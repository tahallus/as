
#Область ПрограммныйИнтерфейс

Функция НастройкиПодключения() Экспорт
	
	НастройкиПодключения = Новый Структура();
	НастройкиПодключения.Вставить("Сервер", "https://1cfresh.com/");
	НастройкиПодключения.Вставить("Хост",   "1cfresh.com");
	НастройкиПодключения.Вставить("СервисРегистрации", "a/adm/hs/promo_reg/");
	НастройкиПодключения.Вставить("ПрограммныйИнтерфейсМенеджераСервиса", "a/adm/hs/ext_api/execute");
	НастройкиПодключения.Вставить("ПользовательРегистрации", "kk_reg");
	НастройкиПодключения.Вставить("ПользовательРегистрацииПароль", "nRImpHR2");
	НастройкиПодключения.Вставить("ПользовательAPI", "kk_api");
	НастройкиПодключения.Вставить("ПользовательAPIПароль", "gm3NtMPQ");
	Возврат НастройкиПодключения;
	
КонецФункции

#Область РегистрацияПользователя

Функция ПользовательЗарегистрированВСервисе(Логин) Экспорт
	
	Метод = МетодНайтиАбонента();
	
	НастройкиПодключения = НастройкиПодключения();
	
	Тело = Новый Структура;
	Тело.Вставить("login", Логин);
	
	ПараметрыОтправки = ОтправкаЗапросов.НовыйПараметрыОтправки("POST");
	ДобавитьЗаголовокАвторизации(
		ПараметрыОтправки,
		НастройкиПодключения.ПользовательРегистрации,
		НастройкиПодключения.ПользовательРегистрацииПароль);
	ПараметрыОтправки.Сервер = НастройкиПодключения.Сервер;
	ПараметрыОтправки.АдресРесурса = НастройкиПодключения.СервисРегистрации + Метод;
	ПараметрыОтправки.Json = Тело;
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапрос(ПараметрыОтправки, Истина);
	ОбработатьОшибкуОтправкиЗапроса(Ответ);
	
	КодыПользовательЗарегистрирован = Новый Массив;
	КодыПользовательЗарегистрирован.Добавить(10200);
	КодыПользовательЗарегистрирован.Добавить(10403);
	
	КодыПользовательОтсутствует = Новый Массив;
	КодыПользовательОтсутствует.Добавить(10404);
	
	КодОтвета = Ответ.ПараметрыТела.response;
	Если КодыПользовательЗарегистрирован.Найти(КодОтвета) <> Неопределено Тогда
		Возврат Истина;
	ИначеЕсли КодыПользовательОтсутствует.Найти(КодОтвета) <> Неопределено Тогда
		Возврат Ложь;
	Иначе
		ОбработатьОшибкуСервисаРегистрации(Ответ, Метод);
	КонецЕсли;
	
КонецФункции

Функция СоздатьАбонента(EmailАбонента, КодТарифа = Неопределено) Экспорт
	
	Метод = МетодСоздатьАбонента();
	
	НастройкиПодключения = НастройкиПодключения();
	
	Тело = Новый Структура;
	Тело.Вставить("name", EmailАбонента);
	Тело.Вставить("email", EmailАбонента);
	Тело.Вставить("fast_completion", Истина);
	Тело.Вставить("send_notification", Ложь);
	Если ЗначениеЗаполнено(КодТарифа) Тогда
		Тело.Вставить("tariff", КодТарифа);
	КонецЕсли;
	
	ПараметрыОтправки = ОтправкаЗапросов.НовыйПараметрыОтправки("POST");
	ДобавитьЗаголовокАвторизации(
		ПараметрыОтправки,
		НастройкиПодключения.ПользовательРегистрации,
		НастройкиПодключения.ПользовательРегистрацииПароль);
	ПараметрыОтправки.Сервер = НастройкиПодключения.Сервер;
	ПараметрыОтправки.АдресРесурса = НастройкиПодключения.СервисРегистрации + Метод;
	ПараметрыОтправки.Json = Тело;
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапрос(ПараметрыОтправки, Истина);
	ОбработатьОшибкуОтправкиЗапроса(Ответ);
	ОбработатьОшибкуСервисаРегистрации(Ответ, Метод);
	
	Возврат Ответ.ПараметрыТела.registration_code;
	
КонецФункции

Функция СозданныеПриложенияПриРегистрации(EmailАбонента) Экспорт
	
	Метод = МетодАдресНовогоПриложенияСозданногоАбонента();
	
	НастройкиПодключения = НастройкиПодключения();
	
	Тело = Новый Структура;
	Тело.Вставить("login", EmailАбонента);
	
	ПараметрыОтправки = ОтправкаЗапросов.НовыйПараметрыОтправки("POST");
	ДобавитьЗаголовокАвторизации(
		ПараметрыОтправки,
		НастройкиПодключения.ПользовательРегистрации,
		НастройкиПодключения.ПользовательРегистрацииПароль);
		
	ПараметрыОтправки.Сервер = НастройкиПодключения.Сервер;
	ПараметрыОтправки.АдресРесурса = НастройкиПодключения.СервисРегистрации + Метод;
	ПараметрыОтправки.Json = Тело;
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапрос(ПараметрыОтправки, Истина);
	ОбработатьОшибкуОтправкиЗапроса(Ответ);
	ОбработатьОшибкуСервисаРегистрации(Ответ, Метод);
	
	КодОтвета = Ответ.ПараметрыТела.response;
	КодОтветаУспешно = 10201;
	КодОтветаПриложенияЕщеНеСозданы = 10102;
	
	Если КодОтвета = КодОтветаПриложенияЕщеНеСозданы Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если КодОтвета = КодОтветаУспешно Тогда
		ОписаниеПриложения = НовыйОписаниеПриложения();
		ОписаниеПриложения.Код                 = Ответ.ПараметрыТела.app;
		ОписаниеПриложения.АдресПриложения     = Ответ.ПараметрыТела.permanent_url;
		ОписаниеПриложения.НомерОбласти        = Ответ.ПараметрыТела.tenant;
		ОписаниеПриложения.СостояниеПриложения = Перечисления.СостоянияПриложений.Готово;
		Возврат ОписаниеПриложения;
	КонецЕсли;
	
	ВызватьИсключениеНеизвестныйКодОтвета(Ответ);
	
КонецФункции

#КонецОбласти

#Область МенеджерСервиса

Функция НовыйДанныеАвторизации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Логин", "");
	Результат.Вставить("Пароль", "");
	Результат.Вставить("КодАбонента", Неопределено);
	Возврат Результат;
	
КонецФункции

Функция НовыйОписаниеСозданияПриложения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Код");
	Результат.Вставить("Наименование");
	Возврат Результат;
	
КонецФункции

Функция НовыйОписаниеПриложения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Код");
	Результат.Вставить("Наименование");
	Результат.Вставить("КодАбонентаВладельца");
	Результат.Вставить("КодКонфигурации");
	Результат.Вставить("ВерсияКонфигурации");
	Результат.Вставить("НаименованиеКонфигурации");
	Результат.Вставить("СостояниеПриложения");
	Результат.Вставить("АдресПриложения");
	Результат.Вставить("ЧасовойПояс");
	Результат.Вставить("НомерОбласти");
	Возврат Результат;
	
КонецФункции

Функция ПроверитьАвторизацию(ДанныеАвторизации) Экспорт
	
	Метод = МетодСписокАбонентов();
	ПараметрыОтправки = ПараметрыОтправкиИнтерфейсМенеджераСервиса(Метод, ДанныеАвторизации);
	
	Тело = Новый Структура;
	ДобавитьВТелоНазваниеМетода(Тело, Метод);
	ПараметрыОтправки.Json = Тело;
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапрос(ПараметрыОтправки, Истина);
	
	Если Ответ.КодСостояния = 401 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбработатьОшибкуОтправкиЗапроса(Ответ);
	
	КодОтвета = Ответ.ПараметрыТела.general.response;
	
	Если КодОтвета = 10401 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбработатьОшибкуИнтерфейсаМенеджераСервиса(Ответ);
	
	Возврат Истина;
	
КонецФункции

Функция АбонентыПользователя(ДанныеАвторизации) Экспорт
	
	Метод = МетодСписокАбонентов();
	ПараметрыОтправки = ПараметрыОтправкиИнтерфейсМенеджераСервиса(Метод, ДанныеАвторизации);
	
	Тело = Новый Структура;
	ДобавитьВТелоНазваниеМетода(Тело, Метод);
	ПараметрыОтправки.Json = Тело;
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапрос(ПараметрыОтправки, Истина);
	ОбработатьОшибкуОтправкиЗапроса(Ответ);
	ОбработатьОшибкуИнтерфейсаМенеджераСервиса(Ответ);
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("name", "Наименование");
	Переименования.Вставить("id", "Код");
	Переименования.Вставить("role", "РольПользователя");
	Возврат МассивСтруктурВТаблицуЗначений(Ответ.ПараметрыТела.account, Переименования);
	
КонецФункции

Функция СоздатьПриложение(ДанныеАвторизации, ОписаниеПриложения) Экспорт
	
	Метод = МетодДобавитьПриложение();
	
	ПараметрыОтправки = ПараметрыОтправкиИнтерфейсМенеджераСервиса(Метод, ДанныеАвторизации);
	
	Тело = Новый Структура;
	ДобавитьВТелоНазваниеМетода(Тело, Метод);
	ДобавитьВТелоПараметрАвторизация(Тело, ДанныеАвторизации);
	
	Тело.Вставить("application", ОписаниеПриложения.Код);
	Если ЗначениеЗаполнено(ОписаниеПриложения.Наименование) Тогда
		Тело.Вставить("name", ОписаниеПриложения.Наименование);
	КонецЕсли;
	
	ПараметрыОтправки.Json = Тело;
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапрос(ПараметрыОтправки, Истина);
	ОбработатьОшибкуОтправкиЗапроса(Ответ);
	ОбработатьОшибкуИнтерфейсаМенеджераСервиса(Ответ);
	
	ОписаниеПриложенияОтвет = Ответ.ПараметрыТела.tenant;
	
	Результат = НовыйОписаниеПриложения();
	Результат.Код = ОписаниеПриложения.Код;
	Результат.АдресПриложения = ОписаниеПриложенияОтвет.url;
	Результат.НомерОбласти = ОписаниеПриложенияОтвет.id;
	Возврат Результат;
	
КонецФункции

Функция ИнформацияОПриложении(ДанныеАвторизации, НомерОбласти) Экспорт
	
	Метод = МетодИнформацияОПриложении();
	
	ПараметрыОтправки = ПараметрыОтправкиИнтерфейсМенеджераСервиса(Метод, ДанныеАвторизации);
	
	Тело = Новый Структура;
	ДобавитьВТелоНазваниеМетода(Тело, Метод);
	ДобавитьВТелоПараметрАвторизация(Тело, ДанныеАвторизации);
	Тело.Вставить("id", НомерОбласти);
	ПараметрыОтправки.Json = Тело;
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапрос(ПараметрыОтправки, Истина);
	ОбработатьОшибкуОтправкиЗапроса(Ответ);
	ОбработатьОшибкуИнтерфейсаМенеджераСервиса(Ответ);
	
	ОписаниеПриложения = Ответ.ПараметрыТела.tenant;
	
	Результат = НовыйОписаниеПриложения();
	Результат.Код = ОписаниеПриложения.application;
	Результат.АдресПриложения = ОписаниеПриложения.url;
	Результат.НомерОбласти = ОписаниеПриложения.id;
	Результат.СостояниеПриложения = СостояниеПриложенияПоИмени(ОписаниеПриложения.status);
	Возврат Результат;
	
КонецФункции

Функция ДоступныеКонфигурации(ДанныеАвторизации) Экспорт
	
	Метод = "application/list";
	
	ПараметрыОтправки = ПараметрыОтправкиИнтерфейсМенеджераСервиса(Метод, ДанныеАвторизации);
	
	Тело = Новый Структура;
	ДобавитьВТелоНазваниеМетода(Тело, Метод);
	ДобавитьВТелоПараметрАвторизация(Тело, ДанныеАвторизации);
	Тело.Вставить("account", ДанныеАвторизации.КодАбонента);
	ПараметрыОтправки.Json = Тело;
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапрос(ПараметрыОтправки, Истина);
	ОбработатьОшибкуОтправкиЗапроса(Ответ);
	ОбработатьОшибкуИнтерфейсаМенеджераСервиса(Ответ);
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("id", "Код");
	Переименования.Вставить("name", "Наименование");
	Переименования.Вставить("sysname", "Имя");
	Переименования.Вставить("description", "Описание");
	Возврат МассивСтруктурВТаблицуЗначений(Ответ.ПараметрыТела.application, Переименования);
	
КонецФункции

Функция АктивированныеПромокоды(ДанныеАвторизации) Экспорт
	
	Метод = МетодАктивированныеПромокоды();
	
	ПараметрыОтправки = ПараметрыОтправкиИнтерфейсМенеджераСервиса(Метод, ДанныеАвторизации);
	
	Тело = Новый Структура;
	ДобавитьВТелоНазваниеМетода(Тело, Метод);
	ДобавитьВТелоПараметрАвторизация(Тело, ДанныеАвторизации);
	Тело.Вставить("account", ДанныеАвторизации.КодАбонента);
	ПараметрыОтправки.Json = Тело;
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапрос(ПараметрыОтправки, Истина);
	ОбработатьОшибкуОтправкиЗапроса(Ответ);
	ОбработатьОшибкуИнтерфейсаМенеджераСервиса(Ответ);
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("activated", "ДатаАктивации");
	Переименования.Вставить("success",   "АктивированУспешно");
	Переименования.Вставить("id",        "Промокод");
	Возврат МассивСтруктурВТаблицуЗначений(Ответ.ПараметрыТела.code, Переименования);
	
КонецФункции

Функция АктивироватьПромокод(ДанныеАвторизации, Промокод) Экспорт
	
	Метод = МетодАктивироватьПромокод();
	
	ПараметрыОтправки = ПараметрыОтправкиИнтерфейсМенеджераСервиса(Метод, ДанныеАвторизации);
	
	Тело = Новый Структура;
	ДобавитьВТелоНазваниеМетода(Тело, Метод);
	ДобавитьВТелоПараметрАвторизация(Тело, ДанныеАвторизации);
	Тело.Вставить("account", ДанныеАвторизации.КодАбонента);
	Тело.Вставить("code",    Промокод);
	ПараметрыОтправки.Json = Тело;
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапрос(ПараметрыОтправки, Истина);
	ОбработатьОшибкуОтправкиЗапроса(Ответ);
	ОбработатьОшибкуИнтерфейсаМенеджераСервиса(Ответ);
	
	Возврат Ответ.ПараметрыТела.general.response = 10200;
	
КонецФункции

Функция ПараметрыСоздаваемогоПользователя() Экспорт
	
	ПараметрыСоздаваемогоПользователя = Новый Структура;
	ПараметрыСоздаваемогоПользователя.Вставить("Логин", "");
	ПараметрыСоздаваемогоПользователя.Вставить("ИмяПользователя", "");
	ПараметрыСоздаваемогоПользователя.Вставить("Пароль", "");
	Возврат ПараметрыСоздаваемогоПользователя;
	
КонецФункции

Процедура СоздатьПользователя(ДанныеАвторизации, ПараметрыСоздаваемогоПользователя) Экспорт
	
	Метод = "account/users/create";
	
	ПараметрыОтправки = ПараметрыОтправкиИнтерфейсМенеджераСервиса(Метод, ДанныеАвторизации);
	
	РольНовогоПользователя = "user";
	
	Тело = Новый Структура;
	ДобавитьВТелоНазваниеМетода(Тело, Метод);
	ДобавитьВТелоПараметрАвторизация(Тело, ДанныеАвторизации);
	Тело.Вставить("id", ДанныеАвторизации.КодАбонента);
	Тело.Вставить("login", ПараметрыСоздаваемогоПользователя.Логин);
	Тело.Вставить("name", ПараметрыСоздаваемогоПользователя.ИмяПользователя);
	Тело.Вставить("password", ПараметрыСоздаваемогоПользователя.Пароль);
	Тело.Вставить("email_required", Ложь);
	Тело.Вставить("role", РольНовогоПользователя);
	
	ПараметрыОтправки.Json = Тело;
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапрос(ПараметрыОтправки, Истина);
	ОбработатьОшибкуОтправкиЗапроса(Ответ);
	ОбработатьОшибкуИнтерфейсаМенеджераСервиса(Ответ);
	
КонецПроцедуры

// Устанавливает пользователю с указанным логином доступ к указанному приложению
// и назначает указанную роль для работы в приложении.
//
// Параметры:
//  ДанныеАвторизации - см. НовыйДанныеАвторизации
//  НомерОбласти - Строка
//  ЛогинПользователя - Строка
//  ПравоПользователя - ПеречислениеСсылка.ПраваПользователяПриложения
//
Процедура ДобавитьПользователяВПриложение(ДанныеАвторизации, НомерОбласти, ЛогинПользователя, ПравоПользователя) Экспорт
	
	Метод = "tenant/users/add";
	
	ПараметрыОтправки = ПараметрыОтправкиИнтерфейсМенеджераСервиса(Метод, ДанныеАвторизации);
	
	Тело = Новый Структура;
	ДобавитьВТелоНазваниеМетода(Тело, Метод);
	ДобавитьВТелоПараметрАвторизация(Тело, ДанныеАвторизации);
	Тело.Вставить("id", НомерОбласти);
	Тело.Вставить("login", ЛогинПользователя);
	Тело.Вставить("role", ПравоПользователяСтрокойПоЗначению(ПравоПользователя));
	
	ПараметрыОтправки.Json = Тело;
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапрос(ПараметрыОтправки, Истина);
	ОбработатьОшибкуОтправкиЗапроса(Ответ);
	ОбработатьОшибкуИнтерфейсаМенеджераСервиса(Ответ);
	
КонецПроцедуры

#КонецОбласти

Функция ПриложениеГотовоКИспользованию(ОписаниеПриложения) Экспорт
	
	СостоянияГотовогоПриложения = Новый Массив;
	СостоянияГотовогоПриложения.Добавить(Перечисления.СостоянияПриложений.Готово);
	СостоянияГотовогоПриложения.Добавить(Перечисления.СостоянияПриложений.Используется);
	
	Возврат СостоянияГотовогоПриложения.Найти(ОписаниеПриложения.СостояниеПриложения) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьОшибкуОтправкиЗапроса(Ответ)
	
	КодОшибки = Ответ.КодСостояния;
	
	Если Ответ.КодСостояния = 200 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = СтрШаблон(
		НСтр("ru='Ошибка при отправке http запроса.
		|Код состояния: %1'"),
		Ответ.КодСостояния);
	ВызватьИсключение ТекстОшибки;
	
КонецПроцедуры

#Область ИнтерфейсСервисаРегистрации

Функция МетодНайтиАбонента()
	Возврат "check_user";
КонецФункции

Функция МетодСоздатьАбонента()
	Возврат "sign_up";
КонецФункции

Функция МетодАдресНовогоПриложенияСозданногоАбонента()
	Возврат "get_app_url";
КонецФункции

Функция ВозможныеКодыОтветаСервисаРегистрации(Метод)
	
	КодыОтвета = Новый Соответствие;
	
	Если Метод = МетодНайтиАбонента() Тогда
		КодыОтвета.Вставить(10200, НСтр("ru='Пользователь существует'"));
		КодыОтвета.Вставить(10400, НСтр("ru='Обязательные параметры либо не указаны, либо некорректны'"));
		КодыОтвета.Вставить(10403, НСтр("ru='Пользователь существует, информация по пользователю не доступна'"));
		КодыОтвета.Вставить(10404, НСтр("ru='Пользователь с указанным логином не найден'"));
		КодыОтвета.Вставить(10500, НСтр("ru='Внутренняя ошибка'"));
	ИначеЕсли Метод = МетодСоздатьАбонента() Тогда
		КодыОтвета.Вставить(10202, НСтр("ru='Запрос на регистрацию успешно принят к обработке, регистрационный код возвращен в параметре registration_code'"));
		КодыОтвета.Вставить(10242, НСтр("ru='Запрос на регистрацию успешно принят к обработке, однако параметры запроса были скорректированы. Регистрационный код возвращен в параметре registration_code'"));
		КодыОтвета.Вставить(10400, НСтр("ru='Обязательные параметры либо не указаны, либо некорректны'"));
		КодыОтвета.Вставить(10400, НСтр("ru='Идентификатор пользователя не может быть привязан'"));
		КодыОтвета.Вставить(10404, НСтр("ru='Не найден тариф с указанным кодом.'"));
		КодыОтвета.Вставить(10406, НСтр("ru='Некорректное значение количества приложений. Ожидается положительное число'"));
		КодыОтвета.Вставить(10406, НСтр("ru='Указанный идентификатор пользователя уже используется'"));
		КодыОтвета.Вставить(10412, НСтр("ru='Количество приложений превышает доступный лимит по тарифу'"));
		КодыОтвета.Вставить(10409, НСтр("ru='Указанный адрес электронной почты уже используется в сервисе'"));
		КодыОтвета.Вставить(10500, НСтр("ru='Внутренняя ошибка'"));
	ИначеЕсли Метод = МетодАдресНовогоПриложенияСозданногоАбонента() Тогда
		КодыОтвета.Вставить(10201, НСтр("ru='Приложение успешно создано, адрес возвращен в параметре url.'"));
		КодыОтвета.Вставить(10102, НСтр("ru='Приложение в процессе создания, необходимо обратиться позже'"));
		КодыОтвета.Вставить(10400, НСтр("ru='Обязательные параметры либо не указаны, либо некорректны'"));
		КодыОтвета.Вставить(10408, НСтр("ru='Истекло допустимое время быстрой регистрации'"));
		КодыОтвета.Вставить(10409, НСтр("ru='Пользователь был зарегистрирован в сервисе другим партнером'"));
		КодыОтвета.Вставить(10500, НСтр("ru='Внутренняя ошибка'"));
	КонецЕсли;
	
	Возврат КодыОтвета;
	
КонецФункции

Процедура ОбработатьОшибкуСервисаРегистрации(Ответ, Метод)
	
	Если НЕ Ответ.ПараметрыТела.error Тогда
		Возврат;
	КонецЕсли;
	
	КодОтвета = Ответ.ПараметрыТела.response;
	КодОшибки = КодОтвета;
	
	ТекстОшибки = СтрШаблон(
		НСтр("ru='Ошибка при обращении к сервису.
		|Ошибка: %1 %2
		|%3'"),
		КодОтвета,
		ВозможныеКодыОтветаСервисаРегистрации(Метод).Получить(КодОтвета),
		Ответ.ПараметрыТела.message);
	ВызватьИсключение ТекстОшибки;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсМенеджераСервиса

Функция МетодСписокАбонентов()
	
	Возврат "account/list";
	
КонецФункции

Функция МетодДобавитьПриложение()
	
	Возврат "tenant/create";
	
КонецФункции

Функция МетодИнформацияОПриложении()
	
	Возврат "tenant/info";
	
КонецФункции

Функция МетодАктивированныеПромокоды()
	
	Возврат "promo_code/list";
	
КонецФункции

Функция МетодАктивироватьПромокод()
	
	Возврат "promo_code/activate";
	
КонецФункции

Процедура ДобавитьВТелоНазваниеМетода(Параметры, Метод, ТипМетода = "usr")
	
	Параметры.Вставить("general", Новый Структура);
	Параметры.General.Вставить("type", ТипМетода);
	Параметры.General.Вставить("method", Метод);
	
КонецПроцедуры

Процедура ДобавитьВТелоПараметрАвторизация(Параметры, ДанныеАвторизации)
	
	Параметры.Вставить("auth", Новый Структура);
	Параметры.auth.Вставить("account", ДанныеАвторизации.КодАбонента);
	
КонецПроцедуры

Функция ПараметрыОтправкиИнтерфейсМенеджераСервиса(Метод, ДанныеАвторизации)
	
	ПараметрыОтправки = ОтправкаЗапросов.НовыйПараметрыОтправки("POST");
	ДобавитьЗаголовокАвторизации(ПараметрыОтправки, ДанныеАвторизации.Логин, ДанныеАвторизации.Пароль);
	
	НастройкиПодключения = НастройкиПодключения();
	ПараметрыОтправки.Сервер = НастройкиПодключения.Сервер;
	ПараметрыОтправки.АдресРесурса = НастройкиПодключения.ПрограммныйИнтерфейсМенеджераСервиса;
	
	Возврат ПараметрыОтправки;
	
КонецФункции

Процедура ОбработатьОшибкуИнтерфейсаМенеджераСервиса(Ответ)
	
	Если НЕ Ответ.ПараметрыТела.general.error Тогда
		Возврат;
	КонецЕсли;
	
	КодОтвета = Ответ.ПараметрыТела.general.response;
	ТекстОшибки = СтрШаблон(
		НСтр("ru='Ошибка при обращении к сервису.
		|Ошибка: %1
		|%2'"),
		КодОтвета,
		Ответ.ПараметрыТела.general.message);
	ВызватьИсключение ТекстОшибки;
	
КонецПроцедуры

#КонецОбласти

Процедура ДобавитьЗаголовокАвторизации(ПараметрыОтправки, Логин, Пароль)
	
	ПараметрыОтправки.Заголовки.Вставить(
		"Authorization",
		ОтправкаЗапросов.СтрокаBasicАутентификации(Логин, Пароль));
	
КонецПроцедуры

Процедура ВызватьИсключениеНеизвестныйКодОтвета(Ответ)
	
	ТекстОшибки = СтрШаблон(
		НСтр("ru='Неизвестный код ответа: %1
		|%2'"),
		Ответ.ПараметрыТела.response,
		Ответ.ПараметрыТела.message);
	ВызватьИсключение ТекстОшибки;
	
КонецПроцедуры

Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур,
		ПереименованияКолонок = Неопределено) Экспорт

	Результат = Новый ТаблицаЗначений;

	Для Каждого Строка Из МассивСтруктур Цикл
		Для Каждого КлючЗначение Из Строка Цикл
			Если Результат.Колонки.Найти(КлючЗначение.Ключ) = Неопределено Тогда
				ТипКолонки = Неопределено;
				Если ПереименованияКолонок <> Неопределено Тогда
					ЗначениеПереименования = ПереименованияКолонок.Получить(КлючЗначение.Ключ);
					Если ЗначениеЗаполнено(ЗначениеПереименования)
							И ТипЗнч(ЗначениеПереименования) = Тип("Структура") Тогда
						ТипКолонки = ЗначениеПереименования.Тип;
					КонецЕсли;
				КонецЕсли;
				Результат.Колонки.Добавить(КлючЗначение.Ключ, ТипКолонки);
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
	КонецЦикла;

	Если ПереименованияКолонок <> Неопределено Тогда
		Для Каждого Элемент Из ПереименованияКолонок Цикл
			Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
				ИмяКолонки = Элемент.Значение;
				ТипКолонки = Неопределено;
			Иначе
				ИмяКолонки = Элемент.Значение.Имя;
				ТипКолонки = Элемент.Значение.Тип;
			КонецЕсли;
			Если Результат.Колонки.Найти(Элемент.Ключ) <> Неопределено Тогда
				Колонка = Результат.Колонки[Элемент.Ключ]; // КолонкаТаблицыЗначений
				Колонка.Имя = ИмяКолонки;
			Иначе
				Результат.Колонки.Добавить(ИмяКолонки, ТипКолонки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция СостояниеПриложенияПоИмени(ИмяЗначения) Экспорт

	Если ИмяЗначения = "ready" Тогда
	    Возврат ПредопределенноеЗначение("Перечисление.СостоянияПриложений.Готово");
	ИначеЕсли ИмяЗначения = "preparation" Тогда
	    Возврат ПредопределенноеЗначение("Перечисление.СостоянияПриложений.ГотовитсяКИспользованию");
	ИначеЕсли ИмяЗначения = "used" Тогда
	    Возврат ПредопределенноеЗначение("Перечисление.СостоянияПриложений.Используется");
	ИначеЕсли ИмяЗначения = "converted" Тогда
	    Возврат ПредопределенноеЗначение("Перечисление.СостоянияПриложений.Конвертируется");
	ИначеЕсли ИмяЗначения = "copied" Тогда
	    Возврат ПредопределенноеЗначение("Перечисление.СостоянияПриложений.Копируется");
	ИначеЕсли ИмяЗначения = "decommissioned" Тогда
	    Возврат ПредопределенноеЗначение("Перечисление.СостоянияПриложений.КУдалению");
	ИначеЕсли ИмяЗначения = "new" Тогда
	    Возврат ПредопределенноеЗначение("Перечисление.СостоянияПриложений.Новая");
	ИначеЕсли ИмяЗначения = "error" Тогда
	    Возврат ПредопределенноеЗначение("Перечисление.СостоянияПриложений.ОшибкаПодготовки");
	ИначеЕсли ИмяЗначения = "removed" Тогда
	    Возврат ПредопределенноеЗначение("Перечисление.СостоянияПриложений.Удалена");
	Иначе
	    Возврат ПредопределенноеЗначение("Перечисление.СостоянияПриложений.ПустаяСсылка");
	КонецЕсли; 
	
КонецФункции

Функция ПравоПользователяСтрокойПоЗначению(Значение)
	
	Если Значение = ПредопределенноеЗначение("Перечисление.ПраваПользователяПриложения.Запуск") Тогда
		Возврат "user";
	ИначеЕсли Значение = ПредопределенноеЗначение("Перечисление.ПраваПользователяПриложения.ЗапускИАдминистрирование") Тогда
		Возврат "administrator";
	ИначеЕсли Значение = ПредопределенноеЗначение("Перечисление.ПраваПользователяПриложения.ДоступКAPI") Тогда
		Возврат "api";
	Иначе 
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

#КонецОбласти
