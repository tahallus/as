#Область ПрограммныйИнтерфейс

// Подключает обработчики события "АвтоПодбор" для тех элементов формы,
// тип соответствующих реквизитов которых удовлетворяет условию
// см. ЭтоСправочникДляПодключенияКлассификатораКонтактов()
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - для элементов этой формы устанавливаются обработчики,
//  СтатическоеОписание - Неопределено - обработчики события "АвтоПодбор" подключаются динамически,
//                      - Соответствие из КлючИЗначение - содержит:
//                        * Ключ - Строка - имя элемента на форме (например, "Контрагент"),
//                        * Значение - Структура - содержит: 
//                          ** ПутьКДанным - Строка, например "Объект.Контрагент",
//                          ** ТипЗначения - Тип - например, Тип("СправочникСсылка.Контрагенты"),
//                          ** ИмяФормыОбъекта - Строка имя формы для создания объекта из классификатора,
//                             например "Справочник.Контрагенты.ФормаОбъекта".
//  ГруппаДополнительныхРеквизитов - Строка - имя группы, где расположены дополнительные реквизиты.
//                                   В этой группе будет осуществляться поиск доп. реквизитов.
//                                   Если не задано, поиск реквизитов будет осуществляться по всем элементам.
Процедура ПодключитьОбработчикиСобытияАвтоподбор(Форма, СтатическоеОписание = Неопределено,
	ГруппаДополнительныхРеквизитов = Неопределено) Экспорт

	ЗаполнитьРеквизитАвтоподборКонтактов(Форма, СтатическоеОписание, ГруппаДополнительныхРеквизитов);

	Для Каждого КлючИЗначение Из Форма.ПоддержкаАвтоподбораКонтактов.ОписаниеПолейДляАвтоПодбора Цикл

		ТекЭлемент = Форма.Элементы[КлючИЗначение.Ключ];

		Если Не ЗначениеЗаполнено(ТекЭлемент.ПолучитьДействие("АвтоПодбор")) Тогда
			ТекЭлемент.УстановитьДействие("АвтоПодбор", "Подключаемый_АвтоПодбор");
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ТекЭлемент.ПолучитьДействие("ОбработкаВыбора")) Тогда
			ТекЭлемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбора");
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Инициализирует реквизиты формы редактирования контрагента для автоподбора из классификатора
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой выполняется инициализация реквизитов
//  Параметры - Структура - параметры, переданные в форму при открытии
//
Процедура ПодготовитьРеквизитыДляАвтоподбораИзКлассификатора(Форма, Параметры) Экспорт
	
	Параметры.Свойство("КлассификаторДляЗаполненияКИ", Форма.КлассификаторДляЗаполненияКИ);
	
	Форма.ПоддержкаАвтоподбораКонтактов = ПоддержкаАвтоподбораКонтактов(Форма);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьРеквизитАвтоподборКонтактов(Форма, СтатическоеОписание, ГруппаДополнительныхРеквизитов)

	Форма.ПоддержкаАвтоподбораКонтактов = ПоддержкаАвтоподбораКонтактов(Форма);

	Форма.ПоддержкаАвтоподбораКонтактов.Вставить("ОписаниеПолейДляАвтоПодбора", ОписаниеПолейДляАвтоПодбора(Форма,
		СтатическоеОписание, ГруппаДополнительныхРеквизитов));

КонецПроцедуры

Функция ПоддержкаАвтоподбораКонтактов(Форма)

	Результат = Новый Структура;

	СостояниеКлассификатораКонтактов = Справочники.КлассификаторКонтактов.ТекущееСостояние();

	Результат.Вставить("КлассификаторКонтактовЗаполнен",
		СостояниеКлассификатораКонтактов.КлассификаторКонтактовЗаполнен);
	Результат.Вставить("ЕстьКонтактыСозданныеПоСобытию",
		СостояниеКлассификатораКонтактов.ЕстьКонтактыСозданныеПоСобытию);

	Возврат Результат;

КонецФункции

Функция ОписаниеПолейДляАвтоПодбора(Знач Форма, Знач СтатическоеОписание, Знач ГруппаДополнительныхРеквизитов)

	Если СтатическоеОписание = Неопределено Тогда
		Результат = Новый Соответствие;
	Иначе
		Результат = СтатическоеОписание;
	КонецЕсли;

	Если ЗначениеЗаполнено(ГруппаДополнительныхРеквизитов) Тогда
		ЗаполнитьОписаниеПолейДляАвтоПодбораРекурсивно(Результат,
			Форма.Элементы[ГруппаДополнительныхРеквизитов].ПодчиненныеЭлементы, Форма);
	ИначеЕсли Не ЗначениеЗаполнено(Результат) Тогда
		ЗаполнитьОписаниеПолейДляАвтоПодбораИзВсехЭлементовФормы(Результат, Форма);
	КонецЕсли;

	Возврат Новый ФиксированноеСоответствие(Результат);

КонецФункции

Процедура ЗаполнитьОписаниеПолейДляАвтоПодбораРекурсивно(ОписаниеПолей, Знач ПодчиненныеЭлементы, Знач Форма)
	
	// @skip-warning
	Для Каждого ТекЭлемент Из ПодчиненныеЭлементы Цикл

		Если ТипЗнч(ТекЭлемент) = Тип("ГруппаФормы") Тогда
			ЗаполнитьОписаниеПолейДляАвтоПодбораРекурсивно(ОписаниеПолей, ТекЭлемент, Форма);
			Продолжить;
		КонецЕсли;

		ЗаполнитьОписаниеПолейДляАвтоПодбора(ОписаниеПолей, ТекЭлемент, Форма);

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьОписаниеПолейДляАвтоПодбораИзВсехЭлементовФормы(ОписаниеПолей, Знач Форма)

	Для Каждого ТекЭлемент Из Форма.Элементы Цикл

		ЗаполнитьОписаниеПолейДляАвтоПодбора(ОписаниеПолей, ТекЭлемент, Форма);

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьОписаниеПолейДляАвтоПодбора(Знач ОписаниеПолей, Знач ТекЭлемент, Знач Форма)

	Если ТипЗнч(ТекЭлемент) <> Тип("ПолеФормы") Тогда
		Возврат;
	КонецЕсли;

	Если ТекЭлемент.Вид <> ВидПоляФормы.ПолеВвода Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекЭлемент.ОграничениеТипа) Тогда
		ОписаниеТиповРеквизита = ТекЭлемент.ОграничениеТипа;
	Иначе
		ОписаниеТиповРеквизита = ОписаниеТиповРеквизита(Форма, ТекЭлемент.ПутьКДанным);
	КонецЕсли;

	Если Не ЭтоСправочникДляПодключенияКлассификатораКонтактов(ОписаниеТиповРеквизита) Тогда
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.Проверить(ОписаниеТиповРеквизита.Типы().Количество() = 1);

	ОписаниеПолей[ТекЭлемент.Имя] = Новый Структура;
	ОписаниеПолей[ТекЭлемент.Имя].Вставить("ПутьКДанным", ТекЭлемент.ПутьКДанным);
	ОписаниеПолей[ТекЭлемент.Имя].Вставить("ТипЗначения", ОписаниеТиповРеквизита.Типы()[0]);
	ОписаниеПолей[ТекЭлемент.Имя].Вставить("ИмяФормыОбъекта", ИмяФормыОбъекта(ОписаниеТиповРеквизита.Типы()[0]));

КонецПроцедуры

Функция ЭтоСправочникДляПодключенияКлассификатораКонтактов(ОписаниеТиповРеквизита)

	Если ОписаниеТиповРеквизита.Типы().Количество() <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ОписаниеТиповРеквизита.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
		Возврат Истина;
	КонецЕсли;

	Если ОписаниеТиповРеквизита.СодержитТип(Тип("СправочникСсылка.КонтактныеЛица")) Тогда
		Возврат Истина;
	КонецЕсли;

	Если ОписаниеТиповРеквизита.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

Функция ИмяФормыОбъекта(Тип)

	Возврат СтрШаблон("%1.ФормаОбъекта", Метаданные.НайтиПоТипу(Тип).ПолноеИмя());

КонецФункции

// Возвращает описание типов реквизита.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой находится указанные реквизит
//  ПутьКДанным - Строка - путь к данным (путь к реквизиту формы)
// Возвращаемое значение:
//  ОписаниеТипов
Функция ОписаниеТиповРеквизита(Форма, ПутьКДанным)

	КомпонентыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");

	Если КомпонентыПути.Количество() > 3 Тогда
		Возврат Новый ОписаниеТипов;
	КонецЕсли;

	Если КомпонентыПути[0] = "Элементы" Тогда
		Возврат Новый ОписаниеТипов;
	КонецЕсли;

	ИмяРеквизита = КомпонентыПути[КомпонентыПути.ВГраница()];

	КомпонентыПути.Удалить(КомпонентыПути.ВГраница());

	МассивРеквизитов = Форма.ПолучитьРеквизиты(СтрСоединить(КомпонентыПути, "."));

	Для Каждого Реквизит Из МассивРеквизитов Цикл
		Если Реквизит.Имя = ИмяРеквизита Тогда
			Возврат Реквизит.ТипЗначения;
		КонецЕсли;
	КонецЦикла;

	Возврат Новый ОписаниеТипов;

КонецФункции

#КонецОбласти