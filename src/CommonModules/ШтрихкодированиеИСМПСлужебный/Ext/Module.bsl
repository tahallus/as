#Область СлужебныйПрограммныйИнтерфейс

//Проверяет необходимость уточнения кода маркировки в составе упаковки, специфика ИС МП
//  * Маркировка молочной продукции, подконтрольной ВЕТИС: требуется заполнение данных ВетИС.
//  * Маркировка молочной продукции, в том числе неподконтрольной ВЕТИС: требуется заполнение срока годности.
//
// Параметры:
//   СтрокаДерева - СтрокаДереваЗначений - строка в которой проверяется специфика
//   ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
// Возвращаемое значение:
//   Булево - для упаковки требуется уточнение данных
Функция ПроверитьНеобходимостьУточнения(СтрокаДерева, ПараметрыСканирования) Экспорт
	
	// Проверка параметров ИС МП требуется для работоспособности штрихкодирования
	// при выполнении сканирования штрихкодов ИС МП в документах с табачной продукцией.
	
	Если ПараметрыСканирования.Свойство("ЗаполнятьДанныеВЕТИС")
		И ПараметрыСканирования.ЗаполнятьДанныеВЕТИС
		И Не ЗначениеЗаполнено(СтрокаДерева.ИдентификаторПроисхожденияВЕТИС) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности")
		И ПараметрыСканирования.ЗаполнятьСрокГодности
		И Не ЗначениеЗаполнено(СтрокаДерева.ГоденДо) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет поля данных штрихкода, используемые подсистемой ИСМП, после уточнения данных:
//  * Для кода маркировки остатков (без номенклатуры) указать Количество вложенных единиц = 1.
//
// Параметры:
//  ДанныеШтрихкода - Структура - текущие данные штрихкода
//  ДанныеВыбора    - Структура - данные уточнения номенклатуры
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  РезультатОбработки    - Структура - Результат обработки штрихкода.
Процедура ОбработатьУточнениеДанных(ДанныеШтрихкода, ДанныеВыбора, ПараметрыСканирования, РезультатОбработки) Экспорт
	
	ДанныеШтрихкода.КоличествоВложенныхЕдиниц = 1;
	
	Если РезультатОбработки.ПроверкаСредствамиККТЗавершена Тогда
		ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ = Ложь;
	КонецЕсли;

КонецПроцедуры

//Заполняет данные кода маркировки, специфика ИС МП:
//  * Только в случае если присутствует документ-основание.
//  Этап 1. Если документа-основания или подходящих строк в нем нет, заполнение не производится.
//  Этап 2. Единственной подходящей строкой из документа-основания.
//  Этап 3. Если подходит несколько строк основания - то единственной подходящей строкой,
//  по которой не завершент подбор маркируемой продукции, из текущего документа.
//
// Параметры:
//   СтрокаДанных - СтрокаТаблицыЗначений - строка в которой заполняется специфика
//   ПараметрыСканирования - см. ШтрихкодированиеИС.ПараметрыСканирования
//   ДанныеДокументаОснования - ТаблицаЗначений - данные документа основания
//   ДанныеДокумента - ТаблицаЗначений - данные табличной части документа Маркировка товаров
// Возвращаемое значение:
//   Булево - для кода маркировки выполнено заполнение данных
Функция ЗаполнитьПоДокументуИОснованию(СтрокаДанных, ПараметрыСканирования, ДанныеДокументаОснования, ДанныеДокумента) Экспорт
	
	Если
		(Не ПараметрыСканирования.ЗаполнятьДанныеВЕТИС Или ЗначениеЗаполнено(СтрокаДанных.ИдентификаторПроисхожденияВЕТИС))
		И (Не ПараметрыСканирования.ЗаполнятьСрокГодности Или ЗначениеЗаполнено(СтрокаДанных.ГоденДо)) Тогда
		Возврат Ложь;
	ИначеЕсли СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
		Возврат Ложь;
	ИначеЕсли ДанныеДокументаОснования = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ДанныеДокументаОснования.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполняемыеПоля = Новый Структура;
	Отбор = Новый Структура("Номенклатура,Характеристика");
	ЗаполнитьЗначенияСвойств(Отбор, СтрокаДанных);
	
	Если ЗначениеЗаполнено(СтрокаДанных.Серия) Тогда
		Отбор.Вставить("Серия", СтрокаДанных.Серия);
	Иначе 
		ЗаполняемыеПоля.Вставить("Серия");
	КонецЕсли;
	
	Если ПараметрыСканирования.ЗаполнятьСрокГодности
			И Не ЗначениеЗаполнено(СтрокаДанных.ГоденДо) Тогда
		ЗаполняемыеПоля.Вставить("ГоденДо");
	КонецЕсли;
	
	Если ПараметрыСканирования.ЗаполнятьДанныеВЕТИС
			И Не ЗначениеЗаполнено(СтрокаДанных.ИдентификаторПроисхожденияВЕТИС) Тогда
		ЗаполняемыеПоля.Вставить("ИдентификаторПроисхожденияВЕТИС");
	КонецЕсли;
	
	Если ЗаполняемыеПоля.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(Отбор);
	ЕстьДанныеВЕТИС = ДанныеДокументаОснования[0].ДанныеИдентификатораПроисхожденияВЕТИС <> Неопределено;
	ПодходитСтрок = 0;
	// Заполнение единственным вариантом документа-основания
	Для Каждого ВариантВыбора Из НайденныеСтроки Цикл
		// Заполнение данных ВетИС (маркировка молочной продукции)
		Если ЕстьДанныеВЕТИС Тогда 
			ДанныеВЕТИС = ВариантВыбора.ДанныеИдентификатораПроисхожденияВЕТИС;
			Если ЗначениеЗаполнено(СтрокаДанных.ИдентификаторПроисхожденияВЕТИС)
					И СтрокаДанных.ИдентификаторПроисхожденияВЕТИС <> ДанныеВЕТИС.ИдентификаторПроисхожденияВЕТИС Тогда
				Продолжить;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ГоденДо)
				И (СтрокаДанных.ГоденДо < ДанныеВЕТИС.НачалоПериода
					Или СтрокаДанных.ГоденДо > Макс(ДанныеВЕТИС.НачалоПериода, ДанныеВЕТИС.КонецПериода)) Тогда
				Продолжить;
			КонецЕсли;
			Если ПодходитСтрок = 0 Тогда
				Если ЗаполняемыеПоля.Свойство("Серия") Тогда
					ЗаполняемыеПоля.Серия = ВариантВыбора.Серия;
				КонецЕсли;
				Если ЗаполняемыеПоля.Свойство("ИдентификаторПроисхожденияВЕТИС") Тогда
					ЗаполняемыеПоля.ИдентификаторПроисхожденияВЕТИС = ДанныеВЕТИС.ИдентификаторПроисхожденияВЕТИС;
				КонецЕсли;
				Если ЗаполняемыеПоля.Свойство("ГоденДо") Тогда
					Если ДанныеВЕТИС.НачалоПериода = Макс(ДанныеВЕТИС.НачалоПериода, ДанныеВЕТИС.КонецПериода) Тогда
						ЗаполняемыеПоля.ГоденДо = ДанныеВЕТИС.НачалоПериода;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли (ЗаполняемыеПоля.Свойство("Серия")
						И ЗаполняемыеПоля.Серия <> ВариантВыбора.Серия)
					Или (ЗаполняемыеПоля.Свойство("ИдентификаторПроисхожденияВЕТИС")
						И ЗаполняемыеПоля.ИдентификаторПроисхожденияВЕТИС <> ДанныеВЕТИС.ИдентификаторПроисхожденияВЕТИС)
					Или (ЗаполняемыеПоля.Свойство("ГоденДо")
						И ЗаполняемыеПоля.ГоденДо <> ?(ДанныеВЕТИС.НачалоПериода <> Макс(ДанныеВЕТИС.НачалоПериода, ДанныеВЕТИС.КонецПериода), Неопределено, ДанныеВЕТИС.НачалоПериода)) Тогда 
				ПодходитСтрок = ПодходитСтрок + 1;
			КонецЕсли;
		// Простое заполнение серии по основанию
		Иначе 
			Если ПодходитСтрок = 0 Тогда
				ЗаполняемыеПоля.Серия = ВариантВыбора.Серия;
				ПодходитСтрок = 1;
			ИначеЕсли ЗаполняемыеПоля.Серия <> ВариантВыбора.Серия Тогда
				ПодходитСтрок = ПодходитСтрок + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПодходитСтрок = 0 Тогда
		Возврат Ложь;
	ИначеЕсли ПодходитСтрок = 1 Тогда
		ЗаполнитьЗначенияСвойств(СтрокаДанных, ЗаполняемыеПоля);
		Возврат Истина;
	ИначеЕсли ДанныеДокумента = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ДанныеДокумента.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыСканирования.ЗаполнятьСрокГодности Тогда
		ПолеСрокГодности = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента[0], "СрокГодности"),"СрокГодности", "ГоденДо");
		Если ЗначениеЗаполнено(СтрокаДанных.ГоденДо) Тогда
			Отбор.Вставить(ПолеСрокГодности, НачалоДня(СтрокаДанных.ГоденДо));
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыСканирования.ЗаполнятьДанныеВЕТИС
			И ЗначениеЗаполнено(СтрокаДанных.ИдентификаторПроисхожденияВЕТИС) Тогда
		Отбор.Вставить("ИдентификаторПроисхожденияВЕТИС", СтрокаДанных.ИдентификаторПроисхожденияВЕТИС);
	КонецЕсли;
	
	НайденныеСтроки = ДанныеДокумента.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	// Заполнение серией для которой проверка не завершена (единственный вариант из текущего документа)
	ПроверятьИзКолонкиСтатусПроверки = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "СтатусПроверкиГосИС");
	ПроверятьИзКолонкиКоличествоПодобрано = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "КоличествоПодобрано");
	Если Не (ПроверятьИзКолонкиСтатусПроверки Или ПроверятьИзКолонкиКоличествоПодобрано) Тогда
		Возврат Ложь;
	КонецЕсли;
	ПодходитСтрок = 0;
	Для Каждого ВариантВыбора Из НайденныеСтроки Цикл
		Если ПроверятьИзКолонкиСтатусПроверки И ВариантВыбора.СтатусПроверкиГосИС = 1 Тогда
			Продолжить;
		ИначеЕсли ПроверятьИзКолонкиКоличествоПодобрано И ВариантВыбора.Количество <= ВариантВыбора.КоличествоПодобрано Тогда
			Продолжить;
		ИначеЕсли ПараметрыСканирования.ЗаполнятьДанныеВЕТИС
				И Не ЗначениеЗаполнено(ВариантВыбора.ИдентификаторПроисхожденияВЕТИС) Тогда
			Продолжить;
		ИначеЕсли ПараметрыСканирования.ЗаполнятьСрокГодности
				И Не ЗначениеЗаполнено(ВариантВыбора[ПолеСрокГодности]) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПодходитСтрок = 0 Тогда
			ПодходитСтрок = 1;
			ЗаполнитьЗначенияСвойств(ЗаполняемыеПоля, ВариантВыбора);
			Если ЗаполняемыеПоля.Свойство("ГоденДо") Тогда
				ЗаполняемыеПоля.ГоденДо = ВариантВыбора[ПолеСрокГодности];
			КонецЕсли;
		ИначеЕсли (ЗаполняемыеПоля.Свойство("Серия")
				И ЗаполняемыеПоля.Серия <> ВариантВыбора.Серия)
			Или (ЗаполняемыеПоля.Свойство("ИдентификаторПроисхожденияВЕТИС")
				И ЗаполняемыеПоля.ИдентификаторПроисхожденияВЕТИС <> ВариантВыбора.ИдентификаторПроисхожденияВЕТИС)
			Или (ЗаполняемыеПоля.Свойство("ГоденДо")
				И ЗаполняемыеПоля.ГоденДо <> ВариантВыбора[ПолеСрокГодности]) Тогда 
				ПодходитСтрок = ПодходитСтрок + 1;
		КонецЕсли;
	КонецЦикла;
	Если ПодходитСтрок = 1 Тогда
		ЗаполнитьЗначенияСвойств(СтрокаДанных, ЗаполняемыеПоля);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Дополняет дерево упаковок структуры "ДанныеПоШтрихкодам", специфика ИСМП.
// * Маркировка молочной продукции: для логистических упаковок возможно заполнение общих идентификаторов ВетИС.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам)
//  ОбновленныеКодыМаркировки - Массив - коды маркировки, в которых обновлялись реквизиты
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования)
Процедура ОбновитьДеревоУпаковок(ДанныеПоШтрихкодам, Знач ОбновленныеКодыМаркировки, ПараметрыСканирования) Экспорт
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
	ОбновляемыеГруппы = Новый Массив;
	Для Каждого СтрокаТаблицыКоды Из ОбновленныеКодыМаркировки Цикл
		Если СтрокаТаблицыКоды.СтрокаДерева <> Неопределено Тогда
			СтрокаТаблицыКоды.СтрокаДерева.ИдентификаторПроисхожденияВЕТИС = СтрокаТаблицыКоды.ИдентификаторПроисхожденияВЕТИС;
			Если ПараметрыСканирования.ЗаполнятьСрокГодности Тогда
				СтрокаТаблицыКоды.СтрокаДерева.ГоденДо = СтрокаТаблицыКоды.ГоденДо;
			КонецЕсли;
			ОбновитьГруппу = СтрокаТаблицыКоды.СтрокаДерева.Родитель;
			Если ОбновитьГруппу <> Неопределено И ОбновляемыеГруппы.Найти(ОбновитьГруппу) = Неопределено Тогда
				ОбновляемыеГруппы.Добавить(ОбновитьГруппу);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Пока ОбновляемыеГруппы.Количество() Цикл
		НоваяИтерация = Новый Массив;
		Для Каждого Группа Из ОбновляемыеГруппы Цикл
			Результат = Новый Структура("ОбщаяСпецифика, ИдентификаторПроисхожденияВЕТИС, ГоденДо");
			Для Каждого ВложенныйЭлемент Из Группа.Строки Цикл
				Если Результат.ОбщаяСпецифика = Ложь Тогда
				ИначеЕсли ПараметрыСканирования.ЗаполнятьСрокГодности И Не ЗначениеЗаполнено(ВложенныйЭлемент.ГоденДо) Тогда
					Результат.ОбщаяСпецифика = Ложь;
				ИначеЕсли Результат.ОбщаяСпецифика = Неопределено Тогда
					Результат.ОбщаяСпецифика = Истина;
					Результат.ИдентификаторПроисхожденияВЕТИС = ВложенныйЭлемент.ИдентификаторПроисхожденияВЕТИС;
					Если ПараметрыСканирования.ЗаполнятьСрокГодности Тогда
						Результат.ГоденДо = ВложенныйЭлемент.ГоденДо;
					КонецЕсли;
				ИначеЕсли Результат.ИдентификаторПроисхожденияВЕТИС <> ВложенныйЭлемент.ИдентификаторПроисхожденияВЕТИС
					Или (ПараметрыСканирования.ЗаполнятьСрокГодности И Результат.ГоденДо <> ВложенныйЭлемент.ГоденДо) Тогда
					Результат.ОбщаяСпецифика = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если Результат.ОбщаяСпецифика Тогда
				Группа.ИдентификаторПроисхожденияВЕТИС = Результат.ИдентификаторПроисхожденияВЕТИС;
				Если ПараметрыСканирования.ЗаполнятьСрокГодности Тогда
					Группа.ГоденДо = Результат.ГоденДо;
				КонецЕсли;
				ОбновитьГруппу = Группа.Родитель;
				Если ОбновитьГруппу <> Неопределено И НоваяИтерация.Найти(ОбновитьГруппу) = Неопределено Тогда
					НоваяИтерация.Добавить(ОбновитьГруппу);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ОбновляемыеГруппы = НоваяИтерация;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет структуру "ДанныеПоШтрихкодам" сведениями, необходимыми для продукции ИСМП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
	
	Если ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП Тогда
		ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииСЗапросомСведенийИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	Иначе
		ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСведенийИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;

КонецПроцедуры

// Дополняет данные, полученные по штрихкодам спецификой, характерной для продукции ИС МП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП Тогда
		ДополнитьДанныеПоШтрихкодамСпецификойСЗапросомСтатусовИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования);
		Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ДанныеПоШтрихкодам, "ТекстОшибки, ЕстьОшибки, ТребуетсяОбновлениеКлючаСессии");
		КонецЕсли;
	Иначе
		ДополнитьДанныеПоШтрихкодамСпецификойБезЗапросаСтатусовИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	ДополнитьДанныеПоШтрихкодамДаннымиПулаКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	// Заполнение количества вложенных единиц по коэффициентам упаковок и коэффициентам из таблицы Описание GTIN
	СтрокиДляЗаполнения = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки) Тогда
			СтрокиДляЗаполнения.Добавить(СтрокаДанных);
		КонецЕсли;
	КонецЦикла;
	Если ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП Тогда
		// Заполнить только коэффициенты упаковок, если не заполнены ранее
		ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(СтрокиДляЗаполнения, Ложь);
	Иначе
		// Заполнить коэффициенты упаковок и количество вложенных пачек
		ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(СтрокиДляЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

// Режим работы с групповыми потребительскими упаковками без индивидуальных.
//  * Заполнение количества в групповых товарных упаковках.
// 
// Параметры:
//  ДанныеКодовМаркировки - Массив из СтрокаТаблицыЗначений - Строки таблицы "ДанныеКодовМаркировки",
//                                                          которые будут заполненые спецификой.
//  ЗаполнятьКоличествоВложенныхЕдиниц - Булево - заполнение количества в строке по данным групповых упаковок.
Процедура ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(ДанныеКодовМаркировки, ЗаполнятьКоличествоВложенныхЕдиниц = Истина) Экспорт
	
	ПодозрительныеУпаковки = Новый Массив;
	НетКоэффициента        = Новый Массив;
	СписокGTIN             = Новый Массив;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.GTIN)
			И (ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковка(СтрокаДанных.ВидУпаковки, СтрокаДанных.ДанныеРазбора)
				Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая) Тогда
			
			Если СтрокаДанных.Коэффициент < 2 Тогда
				СписокGTIN.Добавить(СтрокаДанных.GTIN);
				НетКоэффициента.Добавить(СтрокаДанных);
			КонецЕсли;
			
			// Кандидаты - это пустые упаковки или упаковки с сомнительным количеством
			Если ЗаполнятьКоличествоВложенныхЕдиниц Тогда
				ПоляКоличества = Новый Структура("КоличествоПачек,КоличествоВложенныхЕдиниц", 0, 0);
				ЗаполнитьЗначенияСвойств(ПоляКоличества, СтрокаДанных);
				Если Макс(ПоляКоличества.КоличествоПачек, ПоляКоличества.КоличествоВложенныхЕдиниц) < 2 Тогда
					ПодозрительныеУпаковки.Добавить(СтрокаДанных);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокGTIN.Количество() > 0 Или ПодозрительныеУпаковки.Количество() > 0 Тогда
		Коэффициенты = РегистрыСведений.ОписаниеGTINИС.ПолучитьОписание(СписокGTIN);
	КонецЕсли;
	
	// Заполнение коэффициента
	Для Каждого СтрокаДанных Из НетКоэффициента Цикл
		
		КоличествоВложенныхЕдиницGTIN02 = Неопределено;
		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			И СтрокаДанных.СоставКодаМаркировки <> Неопределено Тогда
			СтрокаДанных.СоставКодаМаркировки.Свойство("КоличествоВложенныхЕдиниц", КоличествоВложенныхЕдиницGTIN02);
		КонецЕсли;
		
		ЭлементДанных = Коэффициенты.Получить(СтрокаДанных.GTIN);
		
		ПлановоеКоличествоВложенныхЕдиниц = Неопределено;
		Если ЭлементДанных <> Неопределено Тогда
			ПлановоеКоличествоВложенныхЕдиниц = ЭлементДанных.Коэффициент;
			Если КоличествоВложенныхЕдиницGTIN02 <> Неопределено Тогда
				ПлановоеКоличествоВложенныхЕдиниц = ЭлементДанных.Коэффициент * КоличествоВложенныхЕдиницGTIN02;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) И ЗначениеЗаполнено(ЭлементДанных.ВидУпаковки) Тогда
				Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
						СтрокаДанных.ВидПродукции, ЭлементДанных.ВидУпаковки, СтрокаДанных.ДанныеРазбора) Тогда
					СтрокаДанных.ВидУпаковки = ЭлементДанных.ВидУпаковки;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли КоличествоВложенныхЕдиницGTIN02 <> Неопределено Тогда
			ПлановоеКоличествоВложенныхЕдиниц = КоличествоВложенныхЕдиницGTIN02;
		КонецЕсли;
		
		Если ПлановоеКоличествоВложенныхЕдиниц = Неопределено
			Или ПлановоеКоличествоВложенныхЕдиниц < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.Коэффициент)
			Или СтрокаДанных.Коэффициент < 2 Тогда
			
			СтрокаДанных.Коэффициент = ПлановоеКоличествоВложенныхЕдиниц;
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				СтрокаДанных.СтрокаДерева.Коэффициент = СтрокаДанных.Коэффициент;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение количества вложенных единиц
	Для Каждого СтрокаДанных Из ПодозрительныеУпаковки Цикл
		
		ПлановоеКоличествоВложенныхЕдиниц = 0;
		
		Если СтрокаДанных.Коэффициент > 1 Тогда
			
			ПлановоеКоличествоВложенныхЕдиниц = СтрокаДанных.Коэффициент;
			
		Иначе
			
			ЭлементДанных = Коэффициенты.Получить(СтрокаДанных.GTIN);
			
			Если ЭлементДанных <> Неопределено Тогда
				ПлановоеКоличествоВложенныхЕдиниц = ЭлементДанных.Коэффициент;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПлановоеКоличествоВложенныхЕдиниц > 1 Тогда
			
			ПоляКоличества = Новый Структура("КоличествоПачек,КоличествоВложенныхЕдиниц", ПлановоеКоличествоВложенныхЕдиниц, ПлановоеКоличествоВложенныхЕдиниц);
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
				ПоляКоличества.Вставить("КоличествоБлоков", 1);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ПоляКоличества);
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, ПоляКоличества);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет представления статусов, владельцев и прочую дополнительную информацию
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	МассивИНН = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.ВыгрузитьКолонку("ИННВладельца");
	МассивИНН = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИНН);
	Если МассивИНН.Количество() > 0 Тогда
		
		КонтрагентыПоИНН = ИнтеграцияИСМП.КонтрагентыПоСпискуИНН(МассивИНН);
		ОрганизацииПоИНН = ИнтеграцияИСМП.ОрганизацииПоСпискуИНН(МассивИНН);
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.Владелец)
				И ЗначениеЗаполнено(СтрокаДанных.ИННВладельца) Тогда
				СтрокаДанных.Владелец = КонтрагентыПоИНН.Получить(СтрокаДанных.ИННВладельца);
				Если Не ЗначениеЗаполнено(СтрокаДанных.Владелец) Тогда
					СтрокаДанных.Владелец = ОрганизацииПоИНН.Получить(СтрокаДанных.ИННВладельца);
				КонецЕсли;
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева.Владелец = СтрокаДанных.Владелец;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет свойства структуры Данные штрихкода свойствами, которые используются только для продукции ИС МП.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
Процедура ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода) Экспорт
	
	ДанныеШтрихкода.Вставить("ИННВладельца"               "");
	ДанныеШтрихкода.Вставить("Владелец",                  Неопределено);
	ДанныеШтрихкода.Вставить("Статус",                    Неопределено);
	ДанныеШтрихкода.Вставить("ПредставлениеСтатуса"       "");
	ДанныеШтрихкода.Вставить("КоличествоВложенныхЕдиниц", 1);
	ДанныеШтрихкода.Вставить("ИННПроизводителя",          "");
	ДанныеШтрихкода.Вставить("Производитель",             Неопределено);
	ДанныеШтрихкода.Вставить("НаименованиеПроизводителя", "");
	ДанныеШтрихкода.Вставить("ДатаЭмиссии",               Неопределено);
	ДанныеШтрихкода.Вставить("ИдентификатоДокумента",     Неопределено);
	ДанныеШтрихкода.Вставить("ГоденДо",                   Неопределено);
	ДанныеШтрихкода.Вставить("GTIN",                      "");
	ДанныеШтрихкода.Вставить("СпособВводаВОборот",        Неопределено);
	ДанныеШтрихкода.Вставить("ОсобоеСостояние",           Неопределено);
	ДанныеШтрихкода.Вставить("ДатаВводаВОборот",          Неопределено);
	ДанныеШтрихкода.Вставить("ДатаСписания",              Неопределено);
	
КонецПроцедуры

// Дополняет свойства структуры результат обработки штрихкода специфичными свойствами, характерными для продукции ИС МП.
// 
// Параметры:
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяАвторизацияИСМП", Ложь);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыВыбораСерии",     Новый Структура);
	
	НастройкиСканирования = ИнтеграцияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	РежимыКонтроля        = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.РежимыКонтроляСредствамиККТ();
	
	ЭтоШтрихкодНоменклатуры = Ложь;
	
	Если ДанныеШтрихкода <> Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "ЭтоШтрихкодНоменклатуры") Тогда
		ЭтоШтрихкодНоменклатуры = ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено
		И ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина)
		И Не ЭтоШтрихкодНоменклатуры
		И ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ Тогда
		
		ВключенКонтроль = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьКодыМаркировкиСредствамиККТ(
			ДанныеШтрихкода.ВидПродукции,
			ПараметрыСканирования.ВидОперацииИСМП);
		
		Если ВключенКонтроль
			И НастройкиСканирования.РежимКонтроляСредствамиККТ = РежимыКонтроля.ПриСканировании
			Или Не ВключенКонтроль Тогда
		
			Если Не ЗначениеЗаполнено(ПараметрыСканирования.ККТФФД12ИСМП)
				И ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
				
				ШтрихкодированиеИСМПКлиентСерверПереопределяемый.УстановитьККТФФД12ПоДаннымОписанияТовара(
					ДанныеШтрихкода, ПараметрыСканирования);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыСканирования.ККТФФД12ИСМП) Тогда
				
				РезультатОбработкиШтрихкода.ТребуетсяПроверкаСредствамиККТ = Истина;
				ЗаполнитьВложенныеШтрихкодыДляПроверкиККТ(РезультатОбработкиШтрихкода, ДанныеШтрихкода, ПараметрыСканирования);
				
			Иначе
				ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует структуру, описывающую результат обработки кода маркировки.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы, во временное хранилище которой 
//  надо поместить данные.
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой выполняется обработка штрихкода.
// Возвращаемое значение:
//  Структура - сожержит в себе информацию по результату обработки штрихкодов обувной продукции.
Функция РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, УникальныйИдентификатор, Форма = Неопределено) Экспорт
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода, ПараметрыСканирования);
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ТекстОшибки) Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	Если ДанныеШтрихкода.ЭтоКодВводаОстатков
		И ШтрихкодированиеИС.ДанныеШтрихкодаТребуетсяОбработатьКакМаркировкуОстатков(ДанныеШтрихкода, ПараметрыСканирования) Тогда
		
		Возврат ШтрихкодированиеИС.РезультатОбработкиТребуетсяОбработатьКодМаркировкиВводаОстатков(ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДанныеШтрихкода.ТребуетсяВыборСерии Тогда
		
		РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
		
	КонецЕсли;
	
	Если ДанныеШтрихкода.ТребуетсяВыборВСД Тогда
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.ИдентификаторПроисхожденияВЕТИС) Тогда
			ДанныеШтрихкода.ТребуетсяВыборВСД = Ложь;
		Иначе
			РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности")
		И ПараметрыСканирования.ЗаполнятьСрокГодности
		И ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ДанныеШтрихкода.ВидПродукции)
		И Не ЗначениеЗаполнено(ДанныеШтрихкода.ГоденДо) Тогда
		РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
	КонецЕсли;
	
	Если Не РезультатОбработки.ТребуетсяУточнениеДанных
		И Не (РезультатОбработки.ТребуетсяПроверкаСредствамиККТ
		      И Не РезультатОбработки.ПроверкаСредствамиККТЗавершена)
		И Форма <> Неопределено Тогда
		
		РезультатОбработки = ШтрихкодированиеИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	СохранениеКодаМаркировкиВПул(РезультатОбработки, ДанныеШтрихкода, ПараметрыСканирования);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Сохраняет код маркировкив ПулКодовМаркировкиСУЗ с проверкой необходимости.
// 
// Параметры:
// 	РезультатОбработки    - Структура - результа обработки штрихкода.
// 	ДанныеШтрихкода       - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура СохранениеКодаМаркировкиВПул(РезультатОбработки, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	ПроверятьСтруктуруКодовМаркировки = ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки;
	ПропускатьПоНаличиюВПуле          = ДанныеШтрихкода.ЕстьВПулеКодовМаркировки;
	
	Если ПропускатьПоНаличиюВПуле
		И ПроверятьСтруктуруКодовМаркировки
		И ЗначениеЗаполнено(ДанныеШтрихкода.ПолныйКодМаркировки)
		И ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодBase64)
		И ДанныеШтрихкода.ШтрихкодBase64 <> ДанныеШтрихкода.ПолныйКодМаркировки Тогда
		
		ПропускатьПоНаличиюВПуле = Ложь;
		
	КонецЕсли;
	
	Если Не ШтрихкодированиеИС.ОбработкаДанныхПоШтрихкодамУспешноЗавершена(РезультатОбработки)
		Или Не (ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая)
		Или ПропускатьПоНаличиюВПуле
		Или ДанныеШтрихкода.ДанныеРазбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ
		И Не ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Тогда
		
		Если ПроверятьСтруктуруКодовМаркировки
			И Не ДанныеШтрихкода.ДанныеРазбора.СоставКодаМаркировки.ВключаетКриптоХвост Тогда
			Возврат;
		Иначе
			Если Не ДанныеШтрихкода.ДанныеРазбора.СоставКодаМаркировки.ВключаетКриптоХвост
				И ДанныеШтрихкода.ДанныеРазбора.СоставКодаМаркировки.ВключаетМРЦ
				И ДанныеШтрихкода.ЕстьВПулеКодовМаркировки Тогда
				Возврат;
			ИначеЕсли Не (ДанныеШтрихкода.ДанныеРазбора.СоставКодаМаркировки.ВключаетМРЦ
				Или ДанныеШтрихкода.ДанныеРазбора.СоставКодаМаркировки.ВключаетКриптоХвост) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляСохраненияВПул();
		
		НормализованныйКод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			ДанныеШтрихкода.ДанныеРазбора,
			ДанныеШтрихкода.ВидПродукции,
			ПараметрыНормализацииКМ);
		
		Если НормализованныйКод <> ДанныеШтрихкода.ДанныеРазбора.КодМаркировки Тогда
			
			ДанныеЗаписи = Новый Структура();
			ДанныеЗаписи.Вставить("КодМаркировки", НормализованныйКод);
			
			РегистрыСведений.ПулКодовМаркировкиСУЗ.ЗаписатьДанныеКодаМаркировки(
				ДанныеШтрихкода,
				ПараметрыСканирования,
				ДанныеЗаписи);
			
			Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ПолныйКодМаркировки) Тогда
				ДанныеШтрихкода.ПолныйКодМаркировки = ДанныеШтрихкода.ШтрихкодBase64;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции) Тогда
		
		Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеШтрихкода.СоставКодаМаркировки, "ВключаетКриптоХвост", Ложь) Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеШтрихкода.СоставКодаМаркировки, "ВключаетКриптоХвост", Ложь) Тогда
			Возврат;
		КонецЕсли;
		
		РегистрыСведений.ПулКодовМаркировкиСУЗ.ЗаписатьДанныеКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует структуру, которая описывает результат обработки штрихкодов. Состоит из базовых свойств 
// (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода), дополненных специфичными свойствами
// (См. ДополнитьСвойстваРезультатаОбработкиШтрихкода).
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода = Неопределено, ПараметрыСканирования = Неопределено) Экспорт
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода, ПараметрыСканирования);
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

// Выполняет поиск ошибок в данных по штрихкодам.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки) Экспорт
	
	ПравилаПроверкиНаОшибки = ПравилаПроверкиНаОшибки(ПараметрыСканирования, ДанныеПоШтрихкодам);
	ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
	
КонецПроцедуры

// Первый этап проверок. Выполняется сразу после считывания штрихкода. 
// 
// Параметры:
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Соответствие - В случае удачного прохождения проверок - возвращает пустое соответствие,
//           В случае выявления ошибок или необходимого уточнения информации - возвращает заполненное соответствие с указанием причины.
Функция ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(ДанныеКодовМаркировки, ПараметрыСканирования) Экспорт

	Возврат ПроверитьНаНеобходимостьОбновленияКлючаСессии(ДанныеКодовМаркировки, ПараметрыСканирования);
	
КонецФункции

// Заполняет результат обработки, который информирует о необходимости выполнения авторизации ИС МП.
// 
// Параметры:
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьРезультатОбработкиТребуетсяАвторизация(РезультатОбработкиШтрихкода, ПараметрыСканирования) Экспорт

	РезультатОбработкиШтрихкода.ТребуетсяАвторизацияИСМП = Истина;
	
КонецПроцедуры

// Выполняет проверку на необходимость выполнения авторизации пользователя.
// 
// Параметры:
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Соответствие - Ключ - Код маркировки, Значение - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ПроверитьНаНеобходимостьОбновленияКлючаСессии(ДанныеКодовМаркировки, ПараметрыСканирования) Экспорт
	
	РезультатыПроверок = Новый Соответствие;
	
	ТребуетсяАвторизацияИСМП = ТребуетсяАвторизацияПользователя(ПараметрыСканирования);
	Если Не ТребуетсяАвторизацияИСМП Тогда
		Возврат РезультатыПроверок;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		// Например, в заказе на Эмиссию можно сканировать EAN и сканирование КМ не требуется
		Если Не ПараметрыСканирования.РазрешеноЗапрашиватьКодМаркировки
			И СтрокаДанных.ЭтоШтрихкодНоменклатуры Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			И Не ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			Или (СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() = 1 // Проверка на упаковку с 1 видом продукции.
				И ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидыПродукцииКодаМаркировки[0])) Тогда
			
			ДанныеШтрихкода = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаДанных);
			ДанныеШтрихкода.Удалить("СтрокаДерева");
			
			РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
			ЗаполнитьРезультатОбработкиТребуетсяАвторизация(РезультатОбработкиШтрихкода, ПараметрыСканирования);
			
			СтрокаДанных.ОбработанСОшибками = Истина;
			РезультатыПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатОбработкиШтрихкода);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыПроверок;
	
КонецФункции

// Возвращает результат обработки штрихкода с описанием ошибки.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - (См. ШтрихкодированиеИСМПСлужебный.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиКодаМаркировкиПриОшибках(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода);
	РезультатДобавления.ДанныеШтрихкода = ДанныеШтрихкода;
	ЗаполнитьЗначенияСвойств(РезультатДобавления, ДанныеШтрихкода);
	
	// У логистической упаковки SSCC считанной в РМК может не быть вида продукции
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции) Тогда
		РезультатДобавления.ВидыПродукции.Добавить(ДанныеШтрихкода.ВидПродукции);
	КонецЕсли;
	
	Возврат РезультатДобавления;
	
КонецФункции

// Реализует обработку действий пользователя. Возвращает результат обработки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  Действие - Строка - Идентификатор действия.
//  Параметры - (См. ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора).
// Возвращаемое значение:
//  Структура - (См. ШтрихкодированиеИСМП.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ВыполнитьДействие(Форма, Действие, Параметры) Экспорт
	
	Если Действие = "ОбработатьВыборСерии" Или Действие = "ОбработатьУточнениеДанных" Тогда
		
		РезультатВыбора             = Параметры.РезультатВыбора;
		РезультатОбработкиШтрихкода = Параметры.РезультатОбработкиШтрихкода;
		КэшированныеЗначения        = Параметры.КэшированныеЗначения;
		РезультатВыбора = ОбработатьВыборСерии(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
		
		Возврат РезультатВыбора;
		
	КонецЕсли;
	
КонецФункции

// Получает данные из государтсвенных информационных систем и заполняет данные для упаковок, о которых нет никакой 
// информации в справочнике Штрихкоды упаковок.
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
Процедура ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	МассивСтрокТаблицы = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоЛогистическаяИлиГрупповаяУпаковка = ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки);
		
		Если ЭтоЛогистическаяИлиГрупповаяУпаковка
			И Не СтрокаДанных.Идентифицирован
			И ШтрихкодированиеИС.ПрисутствуетПродукцияИСМП(СтрокаДанных.ВидыПродукцииКодаМаркировки) Тогда
			МассивСтрокТаблицы.Добавить(СтрокаДанных);
		КонецЕсли;
		
		Если СтрокаДанных.Идентифицирован Тогда
			Если Не СтруктураДанныхТребуетЗагрузкиВложенныхКодовМаркировки(СтрокаДанных, ПараметрыСканирования) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// В каких случаях требуется выдавать сообщение об ошибке, если ЗапрашиватьДанныеНеизвестныхУпаковок = Ложь
		// - если в упаковке нет GTIN
		// - В зависимости от детализации:
		//     * Полная                      - сканируем короб или групповую упаковку
		//     * Потребительские упаковки    - сканируем короб
		//     * Короба с потреб. упаковками - сканируем короб или групповую упаковку
		Если Не ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП
			И Не ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок Тогда
			
			Если (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
					И ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки)
				ИЛИ(ЭтоЛогистическаяИлиГрупповаяУпаковка
					И ПараметрыСканирования.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки)
				Тогда
				
				ТекстОшибки = НСтр(
					"ru = 'В панели администрирования ""Интеграция с ИС МП (обувь, одежда, табак...)""
					      |в разделе ""Настройки сканирования кодов маркировки""
					      |отключена опция ""Запрашивать данные сервиса ГИС МТ"". Данная опция позволяет
					      |выполнять запросы к ГИС МТ для получения содержимого.
					      |Обработка логистической или групповой упаковки невозможна.'");
				
				ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
				ДанныеПоШтрихкодам.ТекстОшибки = ТекстОшибки;
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрокТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В маркировке товаров разрешено добавлять пустые упаковки при выключенном запросе статусов
	Если ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП Тогда
		
		Результат = ДеревоУпаковокПоДаннымИСМП(МассивСтрокТаблицы, ПараметрыСканирования);
		Если Не ПустаяСтрока(Результат.ТекстОшибки) Тогда
			
			ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
			ДанныеПоШтрихкодам.ТекстОшибки                    = Результат.ТекстОшибки;
			ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = Результат.ТребуетсяОбновлениеКлючаСессии;
			
			Возврат;
			
		КонецЕсли;
		
		ОтключитьОтборПоВидуПродукции = Истина;
		
		ОбработатьДеревоПолученноеИзИСМП(Результат, ДанныеПоШтрихкодам, ПараметрыСканирования, ОтключитьОтборПоВидуПродукции);
		
		// Заполнить только коэффициенты упаковок, если не заполнены ранее
		ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(МассивСтрокТаблицы, Ложь);
		
	Иначе
		
		// Заполнить коэффициенты упаковок и количество вложенных пачек
		ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(МассивСтрокТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает дерево упаковок по данным ИС МП.
// 
// Параметры:
//  МассивСтрокТаблицы - Массив из СтрокаТаблицыЗначений - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Описание:
// * ТребуетсяОбновлениеКлючаСессии - Булево - Истина, если требуется авторизация пользователя.
// * ТекстОшибки - Строка - Описание ошибки при попытке получения дерева упаковок из сервиса.
// * ДеревоУпаковок - ДеревоЗначений - иерархия паковок.
// * GTIN - ТаблицаЗначений -:
// ** GTIN - Строка - GTIN кода маркировки.
Функция ДеревоУпаковокПоДаннымИСМП(МассивСтрокТаблицы, ПараметрыСканирования) Экспорт

	Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.Полная;
	РезультатПолученияДерева = ИнтерфейсИСМП.ДеревоУпаковок(
		МассивСтрокТаблицы, Детализация, ПараметрыСканирования);
	
	Если РезультатПолученияДерева.ТребуетсяОбновлениеКлючаСессии Тогда
		РезультатПолученияДерева.ТекстОшибки = 
			НСтр("ru = 'Не удалось получить данные из ИС МП.
			           |По причине: Требуется обновление ключа сессии.'");
	КонецЕсли;

	Возврат РезультатПолученияДерева;

КонецФункции

// Формирует структуру вложенных штрихкодов по ссылке на документ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  Детализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - Детализация, с которой
//    требуется сформировать вложенные штрихкоды.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - (См. ШтрихкодированиеИСМПСлужебный.ИнициализацияВложенныхШтрихкодов).
Функция ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, Детализация, ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		ДанныеШапки           = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(ДокументСсылка);
		ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ДанныеШапки);
	КонецЕсли;
	
	ИмяТабличнойЧасти = ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок;
	ИмяКолонки        = ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	ЕстьКолонкаЗначениеШтрихкода = МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("ЗначениеШтрихкода") <> Неопределено;
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	Если ЕстьКолонкаЗначениеШтрихкода Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Штрихкоды.%3  КАК ШтрихкодУпаковки,
		|	Штрихкоды.ЗначениеШтрихкода КАК Штрихкод
		|ИЗ
		|	Документ.%1.%2 КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Ссылка = &ДокументСсылка";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Штрихкоды.%3                                   КАК ШтрихкодУпаковки,
		|	ЕСТЬNULL(Штрихкоды.%3.ЗначениеШтрихкода, """") КАК Штрихкод
		|ИЗ
		|	Документ.%1.%2 КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Ссылка = &ДокументСсылка";
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяДокумента, ИмяТабличнойЧасти, ИмяКолонки);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ШтрихкодыУпаковок   = Запрос.Выполнить().Выгрузить();
	ИзвестныеУпаковки   = Новый Массив;
	НеизвестныеУпаковки = Новый Массив;
	
	Для Каждого Строка Из ШтрихкодыУпаковок Цикл
		
		Если ЗначениеЗаполнено(Строка.ШтрихкодУпаковки) Тогда
			ИзвестныеУпаковки.Добавить(Строка.ШтрихкодУпаковки);
		Иначе
			НеизвестныеУпаковки.Добавить(Новый Структура("Штрихкод, Количество", Строка.Штрихкод, 1));
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоШтрихкодам = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам();
	Если ИзвестныеУпаковки.Количество() > 0 Тогда
		
		ВложенныеШтрихкодыИзвестныхУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(
			ИзвестныеУпаковки, ПараметрыСканирования);
		
		Если ВложенныеШтрихкодыИзвестныхУпаковок.ДеревоУпаковок.Строки.Количество() = 0 Тогда
			Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП();
			Результат.ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
			Возврат Результат;
		КонецЕсли;
		
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ВложенныеШтрихкодыИзвестныхУпаковок.ДеревоУпаковок,, ПараметрыСканирования);
		ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
		Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП();
		
		Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
			Результат.ЕстьОшибки  = Истина;
			Результат.ТекстОшибки = ДанныеПоШтрихкодам.ТекстОшибки;
			Результат.ТребуетсяОбновлениеКлючаСессии = ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии;
		Иначе
			Результат.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если НеизвестныеУпаковки.Количество() > 0 Тогда
		
		Возврат ВложенныеШтрихкодыПоДаннымИСМП(НеизвестныеУпаковки, ПараметрыСканирования);
		
	КонецЕсли;
	
	Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП();
	Результат.ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
	
	Возврат Результат;
	
КонецФункции

// Обрабатывает выбор серии.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обработать штрихкод.
//  РезультатВыбора - Структура, ОпределяемыйТип.СерияНоменклатуры - результат выбора серии пользователем.
//  РезультатОбработки - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - кэшированные значения формы.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьВыборСерии(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Форма);
	
	ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
	
	Номенклатура   = РезультатВыбора.ДанныеВыбора.Номенклатура;
	Характеристика = РезультатВыбора.ДанныеВыбора.Характеристика;
	Серия = РезультатВыбора.ДанныеВыбора.Серия;
	ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора;
	
	ДанныеШтрихкода.Номенклатура   = Номенклатура;
	ДанныеШтрихкода.Характеристика = Характеристика;
	ДанныеШтрихкода.Серия          = Серия;
	
	Если ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции Тогда
		ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		
		НовыеРеквизиты = Новый Структура;
		НовыеРеквизиты.Вставить("Номенклатура",   Номенклатура);
		НовыеРеквизиты.Вставить("Характеристика", Характеристика);
		НовыеРеквизиты.Вставить("Серия",          Серия);
		
		Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(
			ДанныеШтрихкода.ШтрихкодУпаковки, НовыеРеквизиты);
		
	КонецЕсли;
	
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	
	ТипУпаковки = РезультатОбработки.ТипУпаковки;
	
	ВложенныеШтрихкоды = Неопределено;
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТипУпаковки)
		И ЭтоАдресВременногоХранилища(РезультатОбработки.АдресДереваУпаковок) Тогда
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
		ВложенныеШтрихкоды.ДеревоУпаковок = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДереваУпаковок);
	КонецЕсли;
	
	РезультатОбработки = ШтрихкодированиеИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Инициализирует дерево упаковок для обувной продукции.
// 
// Возвращаемое значение:
//  ДеревоЗначений - Иерархия упаковок.
Функция ИнициализироватьДеревоУпаковок() Экспорт
	
	ДеревоУпаковок = ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок();
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок);
	
	Возврат ДеревоУпаковок;
	
КонецФункции

// Выполняет запрос в систему ИС МП и возвращет ответ в виде дерева.
// 
// Параметры:
//  ДанныеШтрихкодовСписок - Массив из Структура - Описание:
//  * Штрихкод - Строка - Значение штрихкода,
//  * Количество - Число - количество штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  НормализоватьВложенныеШтрихкоды - Булево - Если требуется дополнить вложенные штрихкоды данными, специфичными для табачной продукции.
// Возвращаемое значение:
//  (См. ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП).
Функция ВложенныеШтрихкодыПоДаннымИСМП(ДанныеШтрихкодовСписок, ПараметрыСканирования, НормализоватьВложенныеШтрихкоды = Истина) Экспорт
	
	РезультатФормированияВложенныхШтрихкодов = ИнициализацияРезультатаФормированияВложенныхШтрихкодов();
	
	РезультатФормированияВложенныхШтрихкодов.Вставить("ВложенныеШтрихкоды",             Неопределено);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ЕстьОшибки",                     Ложь);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТекстОшибки",                    "");
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	РезультатФормированияВложенныхШтрихкодов.Вставить("СоответствиеСтрокДерева",        Новый Соответствие);
	
	ДанныеПоШтрихкодам = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам(Ложь);
	ШтрихкодированиеИС.ПодготовитьДанныеКодовМаркировкиДляОбработки(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ДанныеШтрихкодовСписок, ПараметрыСканирования);
	
	Если ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции)
		Или ШтрихкодированиеИС.ПрисутствуетПродукцияИСМП(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		ОпределениеВидаПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, Истина);
		Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
			РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки                     = ДанныеПоШтрихкодам.ЕстьОшибки;
			РезультатФормированияВложенныхШтрихкодов.ТребуетсяОбновлениеКлючаСессии = ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии;
			РезультатФормированияВложенныхШтрихкодов.ТекстОшибки                    = ДанныеПоШтрихкодам.ТекстОшибки;
			Если РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки Тогда
				Возврат РезультатФормированияВложенныхШтрихкодов;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ШтрихкодированиеИС.ИндексироватьКолонкиТаблицыДанныхКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	
	РезультатПолученияДерева = ДеревоУпаковокПоДаннымИСМП(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
	РезультатФормированияВложенныхШтрихкодов.СоответствиеСтрокДерева        = РезультатПолученияДерева.СоответствиеСтрокДерева;
	РезультатФормированияВложенныхШтрихкодов.ТекстОшибки                    = РезультатПолученияДерева.ТекстОшибки;
	РезультатФормированияВложенныхШтрихкодов.ТребуетсяОбновлениеКлючаСессии = РезультатПолученияДерева.ТребуетсяОбновлениеКлючаСессии;
	РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки                     = Не ПустаяСтрока(РезультатПолученияДерева.ТекстОшибки);
	
	Если РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки Тогда
		Возврат РезультатФормированияВложенныхШтрихкодов;
	КонецЕсли;
	
	ОтключитьОтборПоВидуПродукции = Не (ПараметрыСканирования.ОтборПоВидуПродукции И ПараметрыСканирования.ОпределениеВидаПродукцииИСМП);
	
	ОбработатьДеревоПолученноеИзИСМП(РезультатПолученияДерева, ДанныеПоШтрихкодам, ПараметрыСканирования, ОтключитьОтборПоВидуПродукции);
	РезультатФормированияВложенныхШтрихкодов.ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
	
	Возврат РезультатФормированияВложенныхШтрихкодов;
	
КонецФункции

Процедура ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеКодовМаркировки, ПараметрыСканирования = Неопределено) Экспорт
	
	ОбязательныеКолонки = Новый Структура;
	ОбязательныеКолонки.Вставить("Владелец",                        Неопределено);
	ОбязательныеКолонки.Вставить("ПредставлениеСтатуса",            Новый ОписаниеТипов("Строка"));
	ОбязательныеКолонки.Вставить("Производитель",                   Неопределено);
	ОбязательныеКолонки.Вставить("GTIN",                            Новый ОписаниеТипов("Строка"));
	ОбязательныеКолонки.Вставить("ЕстьВПулеКодовМаркировки",        Новый ОписаниеТипов("Булево"));
	ОбязательныеКолонки.Вставить("ПолныйКодМаркировки",             Новый ОписаниеТипов("Строка"));
	
	// Реквизиты молочной продукции ВетИС
	ОбязательныеКолонки.Вставить("ТребуетсяВыборВСД",                Новый ОписаниеТипов("Булево"));
	ОбязательныеКолонки.Вставить("ИдентификаторПроисхожденияВЕТИС",  Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	ОбязательныеКолонки.Вставить("ИдентификаторыПроисхожденияВЕТИС", Новый ОписаниеТипов("Массив"));
	ОбязательныеКолонки.Вставить("Скоропортящаяся",                  Новый ОписаниеТипов("Булево"));
	ОбязательныеКолонки.Вставить("ИдентификаторДокумента",           Новый ОписаниеТипов("Строка"));
	
	Если ПараметрыСканирования <> Неопределено Тогда
		
		ПараметрыДерева = ИнтерфейсМОТП.ПараметрыПостроенияДерева(ПараметрыСканирования);
		ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокИСМП(ПараметрыДерева, ОбязательныеКолонки,,"КоличествоВложенныхЕдиниц");
		Если ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
			ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокДляФормыПроверкиКодовМаркировки(ОбязательныеКолонки);
		КонецЕсли;
		
	КонецЕсли;
	
	ШтрихкодированиеМОТП.НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(ДанныеКодовМаркировки, ОбязательныеКолонки);
	
КонецПроцедуры

Процедура ДобавитьКолонкиТаблицыДанныхДокумента(ТаблицаДанныхДокумента) Экспорт
	
	ТаблицаДанныхДокумента.Колонки.Добавить("ДанныеИдентификатораПроисхожденияВЕТИС", Новый ОписаниеТипов("Структура"));
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеНоменклатурыОстаточныхШтрихкодов(СтрокиТаблицыДанных, ПараметрыСканирования) Экспорт
	
	ТребуетсяЗаполнениеКолонокДерева = Неопределено;
	
	ПредставлениеОстаточныхШтрихкодов = ПредставлениеОстаточныхШтрихкодов(СтрокиТаблицыДанных, ПараметрыСканирования);
	Для Каждого СтрокаДанных Из СтрокиТаблицыДанных Цикл
		
		ПредставлениеНоменклатуры = ПредставлениеОстаточныхШтрихкодов.Получить(СтрокаДанных.Штрихкод);
		Если Не ЗначениеЗаполнено(ПредставлениеНоменклатуры)
			Или ЗначениеЗаполнено(СтрокаДанных.ПредставлениеНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
		
		Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
			Если ТребуетсяЗаполнениеКолонокДерева = Неопределено Тогда
				ТребуетсяЗаполнениеКолонокДерева = (СтрокаДанных.СтрокаДерева.Владелец().Колонки.Найти("ПредставлениеНоменклатуры") <> Неопределено);
			КонецЕсли;
			Если ТребуетсяЗаполнениеКолонокДерева
				И Не ЗначениеЗаполнено(СтрокаДанных.СтрокаДерева.ПредставлениеНоменклатуры) Тогда
				СтрокаДанных.СтрокаДерева.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеОстаточныхШтрихкодов(СтрокиТаблицыДанных, ПараметрыСканирования) Экспорт
	
	ТаблицаПредставлениеОстаточныхШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаПредставлениеОстаточныхШтрихкодов.Колонки.Добавить("КодМаркировки",            Новый ОписаниеТипов("Строка"));
	ТаблицаПредставлениеОстаточныхШтрихкодов.Колонки.Добавить("Номенклатура",             Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаПредставлениеОстаточныхШтрихкодов.Колонки.Добавить("GTIN",                     Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаПредставлениеОстаточныхШтрихкодов.Колонки.Добавить("ПредставлениеGTINОстатки", Новый ОписаниеТипов("Строка"));
	ТаблицаПредставлениеОстаточныхШтрихкодов.Колонки.Добавить("ВидПродукции",             Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыДанных Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидУпаковки) Тогда
			// Код маркировки не удалось разобрать и возможно он содержит ошибки
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПредставлениеНоменклатуры) Тогда
			// Представление уже заполнено из сервиса
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.GTIN)
			И ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаТаблицы.GTIN) Тогда
			НоваяСтрока               = ТаблицаПредставлениеОстаточныхШтрихкодов.Добавить();
			НоваяСтрока.КодМаркировки = СтрокаТаблицы.Штрихкод;
			НоваяСтрока.GTIN          = СтрокаТаблицы.GTIN;
		КонецЕсли;
		
	КонецЦикла;
	
	ВидПродукции = Неопределено;
	Если ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 1 Тогда
		ВидПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции[0];
	КонецЕсли;
	
	РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
		ТаблицаПредставлениеОстаточныхШтрихкодов,,ВидПродукции);
	
	ПредставлениеОстаточныхШтрихкодов = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТаблицаПредставлениеОстаточныхШтрихкодов Цикл
		ПредставлениеОстаточныхШтрихкодов.Вставить(СтрокаТаблицы.КодМаркировки, СтрокаТаблицы.ПредставлениеGTINОстатки);
	КонецЦикла;
	
	Возврат ПредставлениеОстаточныхШтрихкодов;
	
КонецФункции

#Область РасширенноеПредставлениеОшибок

// см. ШтрихкодированиеИСМПКлиентСервер.ПараметрыРасширенногоОписанияОшибки
Функция ВидДополненияПредставленияОшибки() Экспорт
	
	Возврат ШтрихкодированиеИСМПКлиентСервер.ПараметрыРасширенногоОписанияОшибки()
	
КонецФункции

// Дополняет представление ошибки расширенные данными
// 
// Параметры:
// 	СтрокаДанных  - СтрокаТаблицыЗначений, СтрокаДереваЗначений - данные для оформирование и сохранения результата.
// 	ВидДополнения - см. ВидДополненияПредставленияОшибки.
Процедура ДополнитьПредставлениеОшибки(СтрокаДанных, ВидДополнения) Экспорт
	
	Если СтрокаДанных.ПараметрыОшибки = Неопределено Тогда
		СтруктураПараметров = Новый Структура();
		Для Каждого КлючИЗначение Из ВидДополненияПредставленияОшибки() Цикл
			СтруктураПараметров.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		СтрокаДанных.ПараметрыОшибки = СтруктураПараметров;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ВидДополнения Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			СтрокаДанных.ПараметрыОшибки[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРасширенноеПредставлениеОшибки(ПредставлениеОшибки, ПараметрыДополнения, Форма) Экспорт
	
	Если ПараметрыДополнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПроверкаИПодборПродукцииИСМП = СтрНачинаетсяС(Форма.Параметры.ИмяФормыИсточник, "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор");
	ЭтоПроверкаИПодборПродукцииМОТП = СтрНачинаетсяС(Форма.Параметры.ИмяФормыИсточник, "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор");
	
	ДобавляемыеЧасти       = Новый Массив;
	ВыводОбщегоСообщения   = Ложь;
	ВыведеноОтключение     = Ложь;
	ВыведенаСсылкаНаПанель = Ложь;
	
	Если ЗначениеЗаполнено(ПараметрыДополнения.ЗаголовокПродолжить) Тогда
		Форма.Элементы.ДеревоОтсканированнойУпаковкиИгнорироватьОшибку.Заголовок = ПараметрыДополнения.ЗаголовокПродолжить;
		Форма.Элементы.ИгнорироватьОшибку.Заголовок                              = ПараметрыДополнения.ЗаголовокПродолжить;
	КонецЕсли;
	
	Если ПараметрыДополнения.ДанныеПроверкиНаККТ <> Неопределено Тогда
		
		ОтображениеИгнорирования = Ложь;
		Если ПараметрыДополнения.ВозможноИгнорировать
			И (Пользователи.ЭтоПолноправныйПользователь()
				Или РольДоступна(Метаданные.Роли.РазрешитьКодыМаркировкиСОшибкамиПроверкиНаККТ)) Тогда
			ОтображениеИгнорирования = Истина;
		КонецЕсли;
		
		Форма.Элементы.ИгнорироватьОшибку.Видимость                              = ОтображениеИгнорирования;
		Форма.Элементы.ДеревоОтсканированнойУпаковкиИгнорироватьОшибку.Видимость = ОтображениеИгнорирования;
		Форма.Элементы.ГруппаКоманднаяПанельСКнопками.Видимость                  = ОтображениеИгнорирования;
		Форма.Элементы.ГруппаКоманднаяПанель.Видимость                           = Не ОтображениеИгнорирования;
		Форма.Элементы.ДеревоОтсканированнойУпаковкиЗакрыть.Заголовок            = НСтр("ru = 'Отмена'");
		
		СтрокиСОшибками = Новый Массив;
		ВидыПродукции   = Новый СписокЗначений();
		Форма.Заголовок = НСтр("ru = 'Проверка средствами ККТ'");
		
		Если ЗначениеЗаполнено(ПараметрыДополнения.ДанныеПроверкиНаККТ.ТекстОшибки) Тогда
			
			Форма.Префикс = НСтр("ru = 'Произошла ошибка проверки средствами ККТ'");
			
		Иначе
			
			ДанныеПроверки   = ПараметрыДополнения.ДанныеПроверкиНаККТ.ДанныеПроверки;
			ЭлементыПроверки = ПараметрыДополнения.ДанныеПроверкиНаККТ.ЭлементыПроверки;
			
			Для Каждого СтрокаПроверки Из ЭлементыПроверки Цикл
				
				РезультатПроверки = ПараметрыДополнения.ДанныеПроверкиНаККТ.ДанныеПроверки[СтрокаПроверки.ИдентификаторЭлемента];
				Если ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки) Тогда
					СтрокиСОшибками.Добавить(СтрокаПроверки);
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрокиСОшибками.Количество() = 1 Тогда
				
				Форма.Префикс     = НСтр("ru = 'Найдена ошибка при проверке кода'");
				ПроверямаяСтрока  = СтрокиСОшибками.Получить(0);
				РезультатПроверки = ДанныеПроверки[ПроверямаяСтрока.ИдентификаторЭлемента];
				
				ВидыПродукции.Добавить(ПроверямаяСтрока.ВидПродукции, СокрЛП(ПроверямаяСтрока.ВидПродукции));
				
				Если ЗначениеЗаполнено(ПроверямаяСтрока.ПредставлениеНоменклатуры) Тогда
					Форма.ПредставлениеНоменклатуры = ПроверямаяСтрока.ПредставлениеНоменклатуры;
				ИначеЕсли ЗначениеЗаполнено(ПроверямаяСтрока.ШтрихкодУпаковки) Тогда
					РеквизитыЭлемента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						ПроверямаяСтрока.ШтрихкодУпаковки,
						"Номенклатура, Характеристика, Серия, Упаковка");
					Форма.ПредставлениеНоменклатуры = ИнтеграцияИС.ПредставлениеНоменклатуры(
						РеквизитыЭлемента.Номенклатура,
						РеквизитыЭлемента.Характеристика,
						РеквизитыЭлемента.Упаковка,
						РеквизитыЭлемента);
				КонецЕсли;
				
				Форма.ВидПродукции = ПроверямаяСтрока.ВидПродукции;
				Форма.Штрихкод     = ПроверямаяСтрока.КодМаркировки;
				ДобавляемыеЧасти.Добавить(РезультатПроверки.ТекстОшибки);
				
				Если ОтображениеИгнорирования
					И ЗначениеЗаполнено(РезультатПроверки.ПредставлениеВЧеке) Тогда
					
					СтрокиПредупрежденияКлиента = Новый Массив;
					Если ОтрицательныйРезультатПроверкиСредствамиККТ(РезультатПроверки.ПредставлениеВЧеке) Тогда
						СтрокиПредупрежденияКлиента.Добавить(НСтр("ru = 'Предупредите покупателя об отрицательном результате проверки кода маркировки.'"));
					Иначе
						СтрокиПредупрежденияКлиента.Добавить(НСтр("ru = 'Предупредите покупателя о результате проверки кода маркировки.'"));
					КонецЕсли;
					СтрокиПредупрежденияКлиента.Добавить(
							СтрШаблон(
								НСтр("ru = 'Нажмите ""%1"", если покупатель согласен приобрести товар.'"),
								ПараметрыДополнения.ЗаголовокПродолжить));
					СтрокиПредупрежденияКлиента.Добавить(НСтр("ru = 'В чеке будет зафиксирован результат проверки: %1'"));
					ШаблонПредупрежденияКлиента = СтрСоединить(СтрокиПредупрежденияКлиента, Символы.ПС);
					
					ДобавляемыеЧасти.Добавить(Символы.ПС);
					ДобавляемыеЧасти.Добавить(
						СтрШаблон(
							ШаблонПредупрежденияКлиента,
							РезультатПроверки.ПредставлениеВЧеке));
					
				КонецЕсли;
				
				Если РезультатПроверки.ТребуетсяПолныйКодМаркировки
					И Не ПараметрыДополнения.ДанныеПроверкиНаККТ.ЭтоСканирование  Тогда
					
					СоставСтроки = Новый Массив();
					
					Если ПараметрыДополнения.ДанныеПроверкиНаККТ.ЭтоДокументОплаты Тогда
						
						СоставСтроки.Добавить(
							НСтр("ru = 'Для сканирования полного кода маркировки перейдите форму документа основания платежа.'"));
						
					ИначеЕсли ЗначениеЗаполнено(Форма.СсылкаНаОбъект) Тогда
					
						СоставСтроки.Добавить(НСтр("ru = 'Перейти в'"));
						СоставСтроки.Добавить(" ");
						СоставСтроки.Добавить(
							Новый ФорматированнаяСтрока(
								НСтр("ru = 'форму проверки'"),,
								ЦветаСтиля.ПоясняющийТекстГосИС,,
								"ОткрытьФормуПроверкиПоВидуПродукции"));
						СоставСтроки.Добавить(" ");
						СоставСтроки.Добавить(
							НСтр("ru = 'для сканирования полного кода маркировки.'"));
					
					КонецЕсли;
					
					ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
					
				КонецЕсли;
				
			Иначе
				
				Форма.ПоказатьДерево  = Истина;
				Форма.Штрихкод        = "";
				Форма.ШаблонСообщения = НСтр("ru = 'Отрицательный результат проверки кодов маркировки %1 из %2.'");
				ИсточникПредставления = Новый Массив();
				КэшПоУпаковке         = Новый Соответствие();
				
				ВозможныеПредставления     = Новый Массив();
				КоличествоСтрокСПроблемами = 0;
				ЕстьОтрицательныйРезультат = Ложь;
				
				Для Каждого СтрокаОшибки Из ЭлементыПроверки Цикл
					
					РезультатПроверки = ДанныеПроверки[СтрокаОшибки.ИдентификаторЭлемента];
					
					Если Не ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ВидыПродукции.НайтиПоЗначению(СтрокаОшибки.ВидПродукции) = Неопределено Тогда
						ВидыПродукции.Добавить(СтрокаОшибки.ВидПродукции, СокрЛП(СтрокаОшибки.ВидПродукции));
					КонецЕсли;
					
					Если ОтрицательныйРезультатПроверкиСредствамиККТ(РезультатПроверки.ПредставлениеВЧеке) Тогда
						ЕстьОтрицательныйРезультат = Истина;
					КонецЕсли;
					
					НоваяСтрокаОшибки = Форма.ДеревоОтсканированнойУпаковки.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОшибки, СтрокаОшибки);
					
					Если ЗначениеЗаполнено(РезультатПроверки.ПредставлениеВЧеке)
						И ВозможныеПредставления.Найти(РезультатПроверки.ПредставлениеВЧеке) = Неопределено Тогда
						ВозможныеПредставления.Добавить(РезультатПроверки.ПредставлениеВЧеке);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаОшибки.ШтрихкодУпаковки)
						И Не ЗначениеЗаполнено(СтрокаОшибки.ПредставлениеНоменклатуры) Тогда
						
						ИсточникПредставления.Добавить(СтрокаОшибки.ШтрихкодУпаковки);
						КэшПоУпаковке.Вставить(СтрокаОшибки.ШтрихкодУпаковки, НоваяСтрокаОшибки);
						
					КонецЕсли;
					
					НоваяСтрокаОшибки.Штрихкод   = СтрокаОшибки.КодМаркировки;
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОшибки, РезультатПроверки);
					НоваяСтрокаОшибки.ЕстьОшибки = Истина;
					
					Если ЗначениеЗаполнено(РезультатПроверки.ПредставлениеВЧеке) Тогда
						НоваяСтрокаОшибки.ТекстОшибки = СтрШаблон(
							"%1, %2",
							РезультатПроверки.ПредставлениеВЧеке,
							НоваяСтрокаОшибки.ТекстОшибки);
					КонецЕсли;
					
					Если НоваяСтрокаОшибки.ЕстьОшибки Тогда
						КоличествоСтрокСПроблемами = КоличествоСтрокСПроблемами + 1;
					КонецЕсли;
					НоваяСтрокаОшибки.ИндексКартинкиТипУпаковки = ИнтеграцияИСМПСлужебный.ИндексКартинкиПоВидуУпаковкиИВидуПродукции(
						НоваяСтрокаОшибки.ВидУпаковки,
						НоваяСтрокаОшибки.ВидПродукции);
					
				КонецЦикла;
				
				ДанныеПоНоменклатуре = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
					ИсточникПредставления,
					"Номенклатура, Характеристика, Серия, Упаковка");
				
				Если ОтображениеИгнорирования Тогда
					
					СтрокиПредупрежденияКлиента = Новый Массив;
					Если ЕстьОтрицательныйРезультат Тогда
						СтрокиПредупрежденияКлиента.Добавить(НСтр("ru = 'Предупредите покупателя об отрицательном результате проверки кода маркировки.'"));
					Иначе
						СтрокиПредупрежденияКлиента.Добавить(НСтр("ru = 'Предупредите покупателя о результате проверки кода маркировки.'"));
					КонецЕсли;
					СтрокиПредупрежденияКлиента.Добавить(
							СтрШаблон(
								НСтр("ru = 'Нажмите ""%1"", если покупатель согласен приобрести товар.'"),
								ПараметрыДополнения.ЗаголовокПродолжить));
					Если ВозможныеПредставления.Количество() > 1 Тогда
						СтрокиПредупрежденияКлиента.Добавить(НСтр("ru = 'В чеке будуд зафиксированы результаты проверки: %1'"));
					Иначе
						СтрокиПредупрежденияКлиента.Добавить(НСтр("ru = 'В чеке будет зафиксирован результат проверки: %1'"));
					КонецЕсли;
					ШаблонПредупрежденияКлиента = СтрСоединить(СтрокиПредупрежденияКлиента, Символы.ПС);
					
					ТекстПодсказки = СтрШаблон(
						ШаблонПредупрежденияКлиента,
						СтрСоединить(ВозможныеПредставления, ", "));
					
					Форма.Элементы.ДеревоОтсканированнойУпаковки.Подсказка = ТекстПодсказки;
					
				КонецЕсли;
				
				Для Каждого КлючИЗначение Из ДанныеПоНоменклатуре Цикл
					
					СтрокаДанных = КэшПоУпаковке.Получить(КлючИЗначение.Ключ);
					Если СтрокаДанных = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ДанныеПредставления  = КлючИЗначение.Значение;
					ТекущееПредставление = ИнтеграцияИС.ПредставлениеНоменклатуры(
						ДанныеПредставления.Номенклатура,
						ДанныеПредставления.Характеристика,
						ДанныеПредставления.Упаковка,
						ДанныеПредставления.Серия);
					
					СтрокаДанных.ПредставлениеНоменклатуры = ТекущееПредставление;
					
				КонецЦикла;
				
				Форма.КоличествоСтрокСМаркируемойПродукцией = ДанныеПроверки.Количество();
				Форма.КоличествоСтрокСПроблемами            = КоличествоСтрокСПроблемами;
				Форма.СкрытьБезПроблем                      = Истина;
				
			КонецЕсли;
		
		КонецЕсли;
		
		// Отрисовка кнопок открытия проверок и подбора
		
		ВидыПродукции.СортироватьПоПредставлению();
		
		Если Не ПараметрыДополнения.ДанныеПроверкиНаККТ.ЭтоДокументОплаты
			И Не ПараметрыДополнения.ДанныеПроверкиНаККТ.ОтсутствуетФормаПроверки Тогда
			
			ПодменюПроверкаИПодбор = Форма.Элементы.ДеревоОтсканированнойУпаковкиПодменюПроверкаИПодбор;
			Для Каждого ЭлементВидПродукции Из ВидыПродукции Цикл
				
				Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
					Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ЭлементВидПродукции.Значение)
							И Не РольДоступна("ИспользованиеОбработкиПроверкаИПодборТабачнойПродукцииМОТП")
						Или ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ЭлементВидПродукции.Значение)
							И Не РольДоступна("ИспользованиеОбработкиПроверкаИПодборПродукцииИСМП") Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ТекущееИмяПоВидуПроудкции = СтрШаблон(
					"ОткрытьФормуПроверкиИПодбора_%1",
					Формат(XMLСтрока(ЭлементВидПродукции.Значение), "ЧГ=0;"));
				
				ПараметрыИнтеграции = ПроверкаИПодборПродукцииИСМП.ПараметрыИнтеграцииФормыПроверкиИПодбора(
					Форма,
					ЭлементВидПродукции.Значение);
				
				Команда          = Форма.Команды.Добавить(ТекущееИмяПоВидуПроудкции);
				Команда.Действие = "Подключаемый_ОткрытьФормуПроверкиИПодбора";
				Если ВидыПродукции.Количество() = 1 Тогда
					Команда.Заголовок = НСтр("ru = 'Проверка и подбор'");
				Иначе
					Команда.Заголовок = ПараметрыИнтеграции.Заголовки[4];
				КонецЕсли;
				
				НовыйЭлемент = Форма.Элементы.Добавить(
					ТекущееИмяПоВидуПроудкции,
					Тип("КнопкаФормы"),
					ПодменюПроверкаИПодбор);
				НовыйЭлемент.ИмяКоманды = ТекущееИмяПоВидуПроудкции;
				
			КонецЦикла;
			
			Если ВидыПродукции.Количество() > 1 Тогда
				
				ПодменюПроверкаИПодбор.Вид                 = ВидГруппыФормы.Подменю;
				ПодменюПроверкаИПодбор.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветГиперссылкиГосИС;
				ПодменюПроверкаИПодбор.ОтображениеФигуры   = ОтображениеФигурыКнопки.Нет;
				ПодменюПроверкаИПодбор.Отображение         = ОтображениеКнопки.Текст;
				ПодменюПроверкаИПодбор.ШрифтЗаголовка      = Новый Шрифт(ПодменюПроверкаИПодбор.ШрифтЗаголовка, , , , , Истина, , );
				
			ИначеЕсли ВидыПродукции.Количество() = 1 Тогда
				
				ПодменюПроверкаИПодбор.Заголовок = НСтр("ru = 'Проверка и подбор'");
				ПодменюПроверкаИПодбор.Вид       = ВидГруппыФормы.ГруппаКнопок;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыДополнения.ОбщаяОшибка Тогда
		
		СоставСтроки = Новый Массив();
		СоставСтроки.Добавить(НСтр("ru = 'Перейти в'"));
		СоставСтроки.Добавить(" ");
		СоставСтроки.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'рабочее место проверки кода маркировки'"),,
				ЦветаСтиля.ПоясняющийТекстГосИС,,
				"ОткрытьПроверкуКодаМаркировкиИСМП"));
		СоставСтроки.Добавить(" ");
		СоставСтроки.Добавить(
			НСтр("ru = 'для просмотра расширенной информации.'"));
		
		ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыДополнения.Статус) Тогда
		
		Если ПараметрыДополнения.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
			Или ПараметрыДополнения.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен Тогда
			
			СоставСтроки = Новый Массив();
			СоставСтроки.Добавить(НСтр("ru = 'Не удалось определить статус кода маркировки.'"));
			СоставСтроки.Добавить(" ");
			СоставСтроки.Добавить(
				НСтр("ru = 'Код отсутствует в ГИС МТ или устройство считывания кодов (сканер штрихкодов, ТСД)
				           |модифицирует регистр или значения символов.'"));
			СоставСтроки.Добавить(Символы.ПС);
			ПараметрыЛогирования = ЛогированиеЗапросовИСМП.ПараметрыЛогированияЗапросов();
			
			Если ЛогированиеЗапросовИСМП.ВыполняетсяЛогированиеЗапросов(ПараметрыЛогирования) Тогда
				
				СоставСтроки.Добавить(НСтр("ru = 'Передайте'"));
				СоставСтроки.Добавить(" ");
				СоставСтроки.Добавить(
					Новый ФорматированнаяСтрока(
						НСтр("ru = 'информацию'"),,
						ЦветаСтиля.ПоясняющийТекстГосИС,,
						"ОткрытьЛогЗапросов"));
				СоставСтроки.Добавить(" ");
				СоставСтроки.Добавить(НСтр("ru = 'об ошибке в службу технической поддержки.'"));
				
			Иначе
				
				СоставСтроки.Добавить(
					Новый ФорматированнаяСтрока(
						НСтр("ru = 'Включите логирование'"),,
						ЦветаСтиля.ПоясняющийТекстГосИС,,
						"ВключитьЛогированиеЗапросов"));
				СоставСтроки.Добавить(" ");
				СоставСтроки.Добавить(НСтр("ru = 'для сбора сведений об ошибке и повторите действие.'"));
				
			КонецЕсли;
			
			ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
			
		Иначе
			
			СоставСтроки = Новый Массив;
			Если ЭтоОперацияВыводаИзОборота(ПараметрыДополнения.ВидОперацииИСМП) Тогда
				Если КодМаркировкиЕщеНеВведенВОборот(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Код маркировки еще не введен в оборот.
						           |Перед совершением операции необходимо ввести товар в оборот
						           |с помощью документа Маркировка товаров ИС МП.'"));
				ИначеЕсли КодМаркировкиВыведенИзОборота(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Код маркировки ранее уже был выведен из оборота.
						     |Причину, дату и ссылку на документ вывода из оборота можно найти
						     |в рабочем месте проверки кода маркировки или в личном кабинете ГИС МТ.'"));
				КонецЕсли;
			ИначеЕсли ЭтоОперацияВводаВОборот(ПараметрыДополнения.ВидОперацииИСМП) Тогда
				Если КодМаркировкиВыведенИзОборота(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Код маркировки ранее уже был выведен из оборота.
						     |Причину, дату и ссылку на документ вывода из оборота можно найти
						     |в рабочем месте проверки кода маркировки или в личном кабинете ГИС МТ.'"));
				ИначеЕсли КодМаркировкиВОбороте(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Код маркировки ранее уже был введен в оборот.
						     |Ссылку на документ ввода в оборот можно найти
						     |в рабочем месте проверки кода маркировки или в личном кабинете ГИС МТ.'"));
				КонецЕсли;
			ИначеЕсли ЭтоОперацияВозвратаВОборот(ПараметрыДополнения.ВидОперацииИСМП) Тогда
				Если КодМаркировкиВОбороте(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Код маркировки уже находится в обороте.
						     |Ссылку на последний документ с кодом маркировки можно найти
						     |в рабочем месте проверки кода маркировки или в личном кабинете ГИС МТ.'"));
				КонецЕсли;
			ИначеЕсли ЭтоОперацияОтгрузки(ПараметрыДополнения.ВидОперацииИСМП) Тогда
				Если КодМаркировкиЕщеНеВведенВОборот(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Код маркировки еще не введен в оборот.
						           |Перед совершением операции необходимо ввести товар в оборот
						           |с помощью документа Маркировка товаров ИС МП.'"));
				ИначеЕсли КодМаркировкиВыведенИзОборота(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Код маркировки ранее был выведен из оборота.
						     |Причину, дату и ссылку на документ вывода из оборота можно найти
						     |в рабочем месте проверки кода маркировки или в личном кабинете ГИС МТ.'"));
				КонецЕсли;
			ИначеЕсли ЭтоОперацияПриемки(ПараметрыДополнения.ВидОперацииИСМП) Тогда
				Если КодМаркировкиЕщеНеВведенВОборот(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Товар не введен в оборот.
						           |Свяжитесь с поставщиком или производителем с вопросом о вводе товара в оборот.'"));
				ИначеЕсли КодМаркировкиВыведенИзОборота(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Код маркировки выведен из оборота.
						     |Свяжитесь с поставщиком.'"));
				КонецЕсли;
			ИначеЕсли ЭтоОперацияАгрегации(ПараметрыДополнения.ВидОперацииИСМП) Тогда
				Если КодМаркировкиЕщеНеВведенВОборот(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Товар не введен в оборот.
						           |Свяжитесь с поставщиком или производителем с вопросом о вводе товара в оборот.'"));
				ИначеЕсли КодМаркировкиВыведенИзОборота(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Код маркировки выведен из оборота.
						     |Свяжитесь с поставщиком или производителем.'"));
				КонецЕсли;
			КонецЕсли;
			
			Если СоставСтроки.Количество() Тогда
				СоставСтроки.Добавить(Символы.ПС);
			КонецЕсли;
			СоставСтроки.Добавить(НСтр("ru = 'Перейти в'"));
			СоставСтроки.Добавить(" ");
			СоставСтроки.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'рабочее место проверки кода маркировки'"),,
					ЦветаСтиля.ПоясняющийТекстГосИС,,
					"ОткрытьПроверкуКодаМаркировкиИСМП"));
			СоставСтроки.Добавить(" ");
			СоставСтроки.Добавить(НСтр("ru = 'для просмотра расширенной информации о коде маркировки.'"));
			ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
			
		КонецЕсли;
		
		Если Не ВыведеноОтключение Тогда
			
			Если ЭтоПроверкаИПодборПродукцииМОТП Или ЭтоПроверкаИПодборПродукцииИСМП Тогда
			
				СоставСтроки = Новый Массив;
				СоставСтроки.Добавить(Символы.ПС);
				СоставСтроки.Добавить(
					Новый ФорматированнаяСтрока(
							НСтр("ru = 'Отключите контроль статусов'"),,
							ЦветаСтиля.ПоясняющийТекстГосИС,,
							"ОтключитьКонтрольСтатусов"));
				СоставСтроки.Добавить(", ");
				СоставСтроки.Добавить(
					НСтр("ru = 'если требуется выполнить операцию, не учитывая статус ГИС МТ.'"));
				
				ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
				
				ВыведеноОтключение = Истина;
			
			ИначеЕсли ПравоДоступа("Использование", Метаданные.Обработки.ПанельАдминистрированияИСМП) Тогда
				
				Если Не ВыведенаСсылкаНаПанель Тогда
					
					ВыведенаСсылкаНаПанель = Истина;
					
					СоставСтроки = Новый Массив;
					СоставСтроки.Добавить(Символы.ПС);
					СоставСтроки.Добавить(НСтр("ru = 'Отключите контроль статусов в'"));
					СоставСтроки.Добавить(" ");
					СоставСтроки.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru = 'панели администрирования'"),,
							ЦветаСтиля.ПоясняющийТекстГосИС,,
							"ОткрытьПанельАдминистрирования"));
					СоставСтроки.Добавить(", ");
					СоставСтроки.Добавить(
						НСтр("ru = 'если не требуется выполнять контроль статусов для типа операции или товарной группы.'"));
					
					ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
				
				КонецЕсли;
				
				ВыводОбщегоСообщения = Истина;
				
			Иначе
				
				ВыводОбщегоСообщения = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыДополнения.Владелец Тогда
		
		СоставСтроки = Новый Массив;
		СоставСтроки.Добавить(НСтр("ru = 'Владелец кода по данным ГИС МТ отличается от текущей организации.'"));
		СоставСтроки.Добавить(Символы.ПС);
		СоставСтроки.Добавить(НСтр("ru = 'Перейти в'"));
		СоставСтроки.Добавить(" ");
		СоставСтроки.Добавить(
			Новый ФорматированнаяСтрока(
					НСтр("ru = 'рабочее место проверки кода маркировки'"),,
					ЦветаСтиля.ПоясняющийТекстГосИС,,
					"ОткрытьПроверкуКодаМаркировкиИСМП"));
		СоставСтроки.Добавить(" ");
		СоставСтроки.Добавить(НСтр("ru = 'для просмотра расширенной информации о коде маркировки.'"));
		СоставСтроки.Добавить(Символы.ПС);
		
		Если Не ВыведеноОтключение Тогда
			
			Если ЭтоПроверкаИПодборПродукцииМОТП Или ЭтоПроверкаИПодборПродукцииИСМП Тогда
			
				СоставСтроки.Добавить(Символы.ПС);
				СоставСтроки.Добавить(
					НСтр("ru = 'Для выполнения операции без учета владельца ГИС МТ нажмите на гиперссылку'"));
				СоставСтроки.Добавить(" ");
				СоставСтроки.Добавить(
					Новый ФорматированнаяСтрока(
							НСтр("ru = 'Отключить контроль владельцев'"),,
							ЦветаСтиля.ПоясняющийТекстГосИС,,
							"ОтключитьКонтрольВладельцев"));
				
				ВыведеноОтключение = Истина;
				
			ИначеЕсли ПравоДоступа("Использование", Метаданные.Обработки.ПанельАдминистрированияИСМП) Тогда
				
				Если Не ВыведенаСсылкаНаПанель Тогда
					
					ВыведенаСсылкаНаПанель = Истина;
					
					СоставСтроки.Добавить(Символы.ПС);
					СоставСтроки.Добавить(НСтр("ru = 'Отключите контроль владельцев в'"));
					СоставСтроки.Добавить(" ");
					СоставСтроки.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru = 'панели администрирования'"),,
							ЦветаСтиля.ПоясняющийТекстГосИС,,
							"ОткрытьПанельАдминистрирования"));
					СоставСтроки.Добавить(", ");
					СоставСтроки.Добавить(
						НСтр("ru = 'если не требуется выполнять контроль владельцев для типа операции или товарной группы.'"));
					
				КонецЕсли;
				
				ВыводОбщегоСообщения = Истина;
				
			Иначе
				
				ВыводОбщегоСообщения = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
		
	КонецЕсли;
	
	Если ВыводОбщегоСообщения И Не ВыведеноОтключение Тогда
		
		СоставСтроки = Новый Массив;
		СоставСтроки.Добавить(Символы.ПС);
		
		СоставСтроки.Добавить(
				НСтр("ru = 'Также в форме проверки и подбора доступна возможность
				           |временно отключить контроль статусов и владельцев кодов маркировки.'"));
		
		Если СоставСтроки.Количество() Тогда
			ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДобавляемыеЧасти.Количество() > 0 Тогда
		ИтоговыйМассивСтрок = Новый Массив;
		Если ЗначениеЗаполнено(ПредставлениеОшибки) Тогда
			ИтоговыйМассивСтрок.Добавить(ПредставлениеОшибки);
		КонецЕсли;
		Для Каждого ЧастьСтроки Из ДобавляемыеЧасти Цикл
			Если ИтоговыйМассивСтрок.Количество()
				И ЧастьСтроки <> Символы.ПС Тогда
				ИтоговыйМассивСтрок.Добавить(Символы.ПС);
			КонецЕсли;
			ИтоговыйМассивСтрок.Добавить(ЧастьСтроки);
		КонецЦикла;
		ПредставлениеОшибки = Новый ФорматированнаяСтрока(ИтоговыйМассивСтрок);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОперацияВыводаИзОборота(Операция)
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборота);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВПроцессеРеализацииПоДоговоруРассрочки);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКредитныйДоговор);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияКонфискованныхТоваров);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияПоДоговоруРассрочки);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоОбразцамДистанционнаяПродажа);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБрак);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИстечениеСрокаГодности);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛабораторныеОбразцы);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаОтзывСРынка);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРекламации);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругиеПричины);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаТестированиеПродукта);
	
	Возврат Операции.Найти(Операция) <> Неопределено;
	
КонецФункции

Функция ЭтоОперацияВводаВОборот(Операция)
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборот);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотКонтрактноеПроизводствоЕАЭС);
	
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПечатиКМ);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ);
	
	Возврат Операции.Найти(Операция) <> Неопределено;
	
КонецФункции

Функция ЭтоОперацияВозвратаВОборот(Операция)
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриДистанционномСпособеПродажи);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВозвратВОборот);
	
	Возврат Операции.Найти(Операция) <> Неопределено;
	
КонецФункции

Функция ЭтоОперацияОтгрузки(Операция)
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ОтгрузкаПродажа);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ОтгрузкаБезвозмезднаяПередача);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ОтгрузкаПриобретениеГосПредприятием);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ОтгрузкаДляСобственныхНуждПокупателя);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ОтгрузкаКомиссия);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ОтгрузкаАгент);
	
	Возврат Операции.Найти(Операция) <> Неопределено;
	
КонецФункции

Функция ЭтоОперацияПриемки(Операция)
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.Приемка);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ПриемкаПродажа);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ПриемкаБезвозмезднаяПередача);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ПриемкаКомиссия);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ПриемкаАгент);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ПриемкаПриобретениеГосПредприятием);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ПриемкаДляСобственныхНуждПокупателя);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ПриемкаТрансграничнаяТорговля);
	
	Возврат Операции.Найти(Операция) <> Неопределено;
	
КонецФункции

Функция ЭтоОперацияАгрегации(Операция)
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.Агрегация);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияИзменение);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияПроверкаСтатусаОбработкиДокумента);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияСоздание);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияУдаление);
	
	Возврат Операции.Найти(Операция) <> Неопределено;
	
КонецФункции

Функция КодМаркировкиВыведенИзОборота(Статус)
	
	СтатусыКодМаркировкиВыведенИзОборота = Новый Массив;
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВозвращенФизическомуЛицу);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВРезультатеСписания);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаИспользованДляСобственныхНуждПредприятия);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаКонфискация);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЛиквидацияПредприятия);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПоДоговоруРассрочки);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриПеремаркировке);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУничтожении);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУтратеИлиПовреждении);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированВСтраныЕАЭС);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированЗаПределыСтранЕАЭС);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.Экспортирован);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.Утилизирован);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.Списан);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.Разагрегирован);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПовторнойМаркировки);
	
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.ВыведенИзОборота);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.ВыведенИзОборотаПоДоговоруРассрочки);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.ВыведенИзОборотаПриПеремаркировке);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.Списан);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.Продан);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.Разагрегирован);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.Экспортирован);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.Утилизирован);
	
	Возврат СтатусыКодМаркировкиВыведенИзОборота.Найти(Статус) <> Неопределено;
	
КонецФункции

Функция КодМаркировкиЕщеНеВведенВОборот(Статус)
	
	СтатусыКодМаркировкиНеВведенВОборот = Новый Массив;
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.Эмитирован);
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.Нанесен);
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.НаКонтролеФТС);
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ОтрицательноеРешениеФТС);
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПодтверждениеФТС);
	
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.Эмитирован);
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.Нанесен);
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.НанесенНеОплачен);
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.НанесенОплачен);
	
	Возврат СтатусыКодМаркировкиНеВведенВОборот.Найти(Статус) <> Неопределено;
	
КонецФункции

Функция КодМаркировкиВОбороте(Статус)
	
	СтатусыКодМаркировкиВОбороте = Новый Массив;
	СтатусыКодМаркировкиВОбороте.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВведенВОборот);
	СтатусыКодМаркировкиВОбороте.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате);
	СтатусыКодМаркировкиВОбороте.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки);
	СтатусыКодМаркировкиВОбороте.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПередачуСобственнику);
	
	СтатусыКодМаркировкиВОбороте.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.ВведенВОборот);
	СтатусыКодМаркировкиВОбороте.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.ВведенВОборотВозвращен);
	СтатусыКодМаркировкиВОбороте.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.ОжидаетДоставки);
	
	Возврат СтатусыКодМаркировкиВОбороте.Найти(Статус) <> Неопределено;
	
КонецФункции

#КонецОбласти

Процедура ОпределениеВидаПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, Принудительно = Ложь) Экспорт
	
	Если Не ПараметрыСканирования.ОпределениеВидаПродукцииИСМП И Не Принудительно Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПроверкаКодовМаркировкиИСМП = Ложь;
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
		И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		ЭтоПроверкаКодовМаркировкиИСМП = Истина;
	КонецЕсли;
	
	ЛогированиеЗапросовИСМП.НастроитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Истина);
	
	ДанныеДляЗапроса = Новый Массив;
	ВидыПродукции    = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидПродукции) И Не ЭтоПроверкаКодовМаркировкиИСМП Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ДанныеРазбора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДляЗапроса.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Если ДанныеДляЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировки(
		ДанныеДляЗапроса,
		ПараметрыСканирования.Организация);
		
	Если РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии Тогда
		ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии;
		ДанныеПоШтрихкодам.ТекстОшибки                    = РезультатЗапроса.ТекстОшибки;
		ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки) Тогда
		ДанныеПоШтрихкодам.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из РезультатЗапроса.СтатусыКодовМаркировки Цикл
		
		СтрокаТаблицыДанных = КлючИЗначение.Ключ;
		СпецификаСтроки     = КлючИЗначение.Значение;
		
		Если СпецификаСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВидПродукции = СпецификаСтроки.ВидПродукции;
		Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыДанных.ВидПродукции = ВидПродукции;
		
		ВидыПродукции.Добавить(ВидПродукции);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ВидыПродукции, ВидыПродукции, Истина);
	
КонецПроцедуры

Функция ТребуетсяЗагрузкаВложенныхКодовМаркировки(СпецификаСтроки, СтрокаТаблицыДанных, ПараметрыСканирования) Экспорт
	
	Если Не СтрокаТаблицыДанных.Идентифицирован Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СпецификаСтроки) = Тип("СтрокаДереваЗначений") Тогда
		Если СпецификаСтроки.Строки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если СпецификаСтроки.ВложенныеУпаковки = Неопределено
			Или СпецификаСтроки.ВложенныеУпаковки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДанныхТребуетЗагрузкиВложенныхКодовМаркировки(СтрокаТаблицыДанных, ПараметрыСканирования);
	
КонецФункции

Функция СтруктураДанныхТребуетЗагрузкиВложенныхКодовМаркировки(СтрокаТаблицыДанных, ПараметрыСканирования) Экспорт
	
	Если СтрокаТаблицыДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая
		И СтрокаТаблицыДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Групповая Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаТаблицыДанных.СтрокаДерева = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаТаблицыДанных.СтрокаДерева.Строки.Количество() <> 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаТаблицыДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		И ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаТаблицыДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		И ЗначениеЗаполнено(СтрокаТаблицыДанных.GTIN)
		И ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Дополняет данные по штрихкодам спецификой по данным пула.
//
// Параметры:
//  ДанныеПоШтрихкодам    - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ДополнитьДанныеПоШтрихкодамДаннымиПулаКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если Не ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП Тогда
		Возврат;
	КонецЕсли;
	
	КодыМаркировки = ШтрихкодированиеИСМП.НоваяТаблицаПоискаКодаМаркировкивПуле();
	
	СтрокиТаблицыПоКодамМаркировки = Новый Соответствие;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ПолныйКодМаркировки)
			И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодBase64)
			И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаДанных.СоставКодаМаркировки, "ВключаетКриптоХвост", Ложь) Тогда
			
			СтрокаДанных.ПолныйКодМаркировки = СтрокаДанных.ШтрихкодBase64;
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				СтрокаДанных.СтрокаДерева.ПолныйКодМаркировки = СтрокаДанных.ПолныйКодМаркировки;
			КонецЕсли;
			
		КонецЕсли;
		
		ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
			СтрокаДанных,
			КодыМаркировки);
		
		СтрокиТаблицыПоКодамМаркировки.Вставить(СтрокаДанных.Штрихкод, СтрокаДанных);
		
	КонецЦикла;
	
	Если КодыМаркировки.Количество() > 0 Тогда
		
		КодыМаркировкиВПуле = ШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки(КодыМаркировки, "ВидПродукции, ПолныйКодМаркировки");
		
		Для Каждого СтрокаТаблицы Из КодыМаркировкиВПуле Цикл
			
			СтрокаДанных                          = СтрокиТаблицыПоКодамМаркировки.Получить(СтрокаТаблицы.КодМаркировки);
			СтрокаДанных.ЕстьВПулеКодовМаркировки = Истина;
			СтрокаДанных.ПолныйКодМаркировки      = СтрокаТаблицы.ПолныйКодМаркировки;
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) Тогда
				СтрокаДанных.ВидПродукции = СтрокаТаблицы.ВидПродукции;
			КонецЕсли;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				
				СтрокаДанных.СтрокаДерева.ЕстьВПулеКодовМаркировки = Истина;
				СтрокаДанных.СтрокаДерева.ПолныйКодМаркировки      = СтрокаТаблицы.ПолныйКодМаркировки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПолныйКодМаркировкиПоДаннымРазбора(ДанныеРазбора, СтрокаДанных, ПараметрыСканирования) Экспорт
	
	ДанныеРазбора = СтрокаДанных.ДанныеРазбора;
	Если (ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковка(
				ДанныеРазбора.ВидУпаковки, ДанныеРазбора))
		И ДанныеРазбора.Свойство("Детализация")
		И ДанныеРазбора.СоставКодаМаркировки.Свойство("ВключаетКриптоХвост")
		И ДанныеРазбора.СоставКодаМаркировки.ВключаетКриптоХвост Тогда
		
		ПолныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПолныйКодМаркировкиПоДаннымРазбораСРасширеннойДетализацией(
			ДанныеРазбора,
			Истина,
			ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(СтрокаДанных.ШтрихкодBase64));
		
		Если ПолныйКодМаркировки <> Неопределено Тогда
			
			ПолныйКодМаркировкиBase64 = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ПолныйКодМаркировки);
			Если ПолныйКодМаркировкиBase64 <> СтрокаДанных.ШтрихкодBase64 Тогда
				СтрокаДанных.ШтрихкодBase64 = ПолныйКодМаркировкиBase64;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПроверкаСредствамиККТ

Процедура СинхронизироватьРезультатПроверкиСредствамиККТ(ДеревоМаркированнойПродукции, ВидПродукции, СсылкаНаДокумент) Экспорт
	
	НаборЗаписей = РегистрыСведений.РезультатыПроверкиСредствамиККТИСМП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(СсылкаНаДокумент);
	НаборЗаписей.Прочитать();
	
	ИсходноеКоличество = НаборЗаписей.Количество();
	
	Если ИсходноеКоличество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеСтроки  = Новый Массив();
	КодыМаркировки   = ШтрихкодированиеИСМП.НоваяТаблицаПоискаКодаМаркировкиВПуле();
	КлючиПоискаСтрок = Новый Соответствие();
	
	Для Каждого СтрокаНабора Из НаборЗаписей Цикл
		
		Если СтрокаНабора.ВидПродукции <> ВидПродукции Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНабора.ТребуетсяПолныйКодМаркировки Тогда
			
			КодМаркировки = СокрЛП(СтрокаНабора.ШтрихкодУпаковки);
			ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
				КодМаркировки,
				КодыМаркировки);
			
			КлючиПоискаСтрок.Вставить(КодМаркировки, СтрокаНабора);
			
		КонецЕсли;
		
	КонецЦикла;
	
	КодыМаркировкиВПуле = ШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки(
		КодыМаркировки,
		"ПолныйКодМаркировки");
	
	Для Каждого СтрокаПоискаВПуле Из КодыМаркировкиВПуле Цикл
	
		Если Не ЗначениеЗаполнено(СтрокаПоискаВПуле.ПолныйКодМаркировки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНабораУдаления = КлючиПоискаСтрок.Получить(СтрокаПоискаВПуле.КодМаркировки);
		
		Если СтрокаНабораУдаления <> Неопределено Тогда
			УдаляемыеСтроки.Добавить(СтрокаНабораУдаления);
		КонецЕсли;
		
	КонецЦикла;
	
	Если УдаляемыеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		НаборЗаписей.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Блокировка        = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РезультатыПроверкиСредствамиККТИСМП");
	ЭлементБлокировки.УстановитьЗначение(
		Метаданные.РегистрыСведений.РезультатыПроверкиСредствамиККТИСМП.Измерения.Документ.Имя,
		СсылкаНаДокумент);
	
	ОперацияБезТранзакции = Не ТранзакцияАктивна();
	
	Если ОперацияБезТранзакции Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
		
	Иначе
		
		Блокировка.Заблокировать();
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРезультатПроверкиСредствамиККТПоОтсутствующимКодам(СсылкаНаДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка        = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РезультатыПроверкиСредствамиККТИСМП");
	ЭлементБлокировки.УстановитьЗначение(
		Метаданные.РегистрыСведений.РезультатыПроверкиСредствамиККТИСМП.Измерения.Документ.Имя,
		СсылкаНаДокумент);
	
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.РезультатыПроверкиСредствамиККТИСМП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(СсылкаНаДокумент);
	НаборЗаписей.Прочитать();
	
	ИсходноеКоличество = НаборЗаписей.Количество();
	
	Если ИсходноеКоличество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеСтроки             = Новый Массив();
	АктуальныеШтрихкодыУпаковок = Новый Массив;
	ДанныеШтрихкодов            = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковокПоДокументу(СсылкаНаДокумент,,, Истина);
	
	ВложенныеПотребительскиеИГрупповыеУпаковки(
		ДанныеШтрихкодов.ВложенныеШтрихкоды.ДеревоУпаковок,
		АктуальныеШтрихкодыУпаковок);
	
	Для Каждого СтрокаНабора Из НаборЗаписей Цикл
		
		Если АктуальныеШтрихкодыУпаковок.Найти(СтрокаНабора.ШтрихкодУпаковки) = Неопределено Тогда
		
			УдаляемыеСтроки.Добавить(СтрокаНабора);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если УдаляемыеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		НаборЗаписей.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВложенныеПотребительскиеИГрупповыеУпаковки(Узел, АктуальныеШтрихкодыУпаковок)
	
	Для Каждого СтрокаДерева Из Узел.Строки Цикл
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			
			АктуальныеШтрихкодыУпаковок.Добавить(СтрокаДерева.ШтрихкодУпаковки);
			
		КонецЕсли;
		
		ВложенныеПотребительскиеИГрупповыеУпаковки(СтрокаДерева, АктуальныеШтрихкодыУпаковок);
		
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует результат формирования вложенных штрихкодов по кодам маркировки ИСМП.
//
// Возвращаемое значение:
//  Структура - Описание:
// * ВложенныеШтрихкоды - Структура - Описание:
// * ЕстьОшибки - Булево - Истина, если есть ошибки.
// * ТекстОшибки - Строка - Описание ошибки.
// * ТребуетсяОбновлениеКлючаСессии - Булево - Истина, если требуется авторизация.
Функция ИнициализацияРезультатаФормированияВложенныхШтрихкодов()
	
	РезультатФормированияВложенныхШтрихкодов = Новый Структура;
	
	РезультатФормированияВложенныхШтрихкодов.Вставить("ВложенныеШтрихкоды",             Неопределено);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ЕстьОшибки",                     Ложь);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТекстОшибки",                    "");
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);

	Возврат РезультатФормированияВложенныхШтрихкодов;
	
КонецФункции

// Дополняет входящие в состав "Вложенных штрихкодов" коллекции - "Дерево упаковок" и "Маркированные товары" свойствами
// специфичными для табачной продукции и заполняет на основании данных - "Специфика штрихкодов".
//
// Параметры:
//  ВложенныеШтрихкоды - Структура - Включает в себя таблицу значений "Маркированные товары" и "Дерево упаковок".
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено) Экспорт
	
	ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
	НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, ДанныеКодовМаркировки);
	
	// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
	Если Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева Тогда
		МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
		НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет таблицу значений "Маркированные товары" свойствами специфичными для табачной продукции и заполняет
// на основании данных - "Дерева упаковок".
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  МаркированныеТовары - ТаблицаЗначений - Таблица с маркируемой продукцией.
Процедура НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары, ПараметрыСканирования = Неопределено)
	
	МаркированныеТовары.Очистить();
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары, ПараметрыСканирования);
	ШтрихкодированиеИС.ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(ДеревоУпаковок.Строки, МаркированныеТовары);
	
КонецПроцедуры

// Формирует элементы справочника Штрихкоды упаковок на основании данных полученных из ИС МП.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура СоздатьЭлементыШтрихкодовУпаковокПоДереву(ДеревоУпаковок, ПараметрыСканирования)
	
	Если Не ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеревоУпаковок.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Если СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская
			И СтрокаДерева.Строки.Количество() = 0 Тогда  // Проверка на пустую упаковку.
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		
		Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодыУпаковокПоДаннымДерева(ДеревоУпаковок);
		ЗаполнитьУпаковкуВерхнегоУровняДерева(ДеревоУпаковок);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'Создание элементов справочника штрихкоды упаковок.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

// Заполняет во всех строках дерева упаковку верхнего уровня.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - верхний уровень дерева.
Процедура ЗаполнитьУпаковкуВерхнегоУровняДерева(ДеревоУпаковок, УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
		
		СтрокаДерева.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		ЗаполнитьУпаковкуВерхнегоУровняДерева(СтрокаДерева, УпаковкаВерхнегоУровня);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет необходимость авторизации пользователя на сервере ИС МП.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если требуется авторизация.
Функция ТребуетсяАвторизацияПользователя(ПараметрыСканирования) Экспорт
	
	ТребуетсяАвторизация = Ложь;
	
	Если ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП Тогда
		
		Организация = ПараметрыСканирования.Организация;
		Если ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессии(
			ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация)) Тогда
			ТребуетсяАвторизация = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТребуетсяАвторизация;
	
КонецФункции

// Возвращает соответствие статусов их представлениям.
// 
// Параметры:
// Возвращаемое значение:
//  Соответствие - статусы и их представления.
Функция ПредставленияСтатусов() Экспорт
	
	ПредставленияСтатусов = Новый Соответствие();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыКодовМаркировки.Ссылка                КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(СтатусыКодовМаркировки.Ссылка) КАК ПредставлениеСтатуса
	|ИЗ
	|	Перечисление.СтатусыКодовМаркировкиИСМП КАК СтатусыКодовМаркировки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтатусыКодовМаркировки.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(СтатусыКодовМаркировки.Ссылка)
	|ИЗ
	|	Перечисление.СтатусыКодовМаркировкиМОТП КАК СтатусыКодовМаркировки");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставленияСтатусов.Вставить(Выборка.Статус, Выборка.ПредставлениеСтатуса);
	КонецЦикла;
	
	Возврат ПредставленияСтатусов;
	
КонецФункции

#Область ПроверкаСредствамиККТ

Процедура ЗаполнитьВложенныеШтрихкодыДляПроверкиККТ(РезультатОбработкиШтрихкода, ДанныеШтрихкода, ПараметрыСканирования)
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "АдресДереваУпаковок")
		Или Не ЭтоАдресВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок)
		Или РезультатОбработкиШтрихкода.ВложенныеШтрихкодыДляПроверкиККТ.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоУпаковок = ПолучитьИзВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок);
	
	ЗаполнитьВложенныеШтрихкодыПоДеревуПроверкиНаККТРекурсивно(
		ДеревоУпаковок,
		РезультатОбработкиШтрихкода.ВложенныеШтрихкодыДляПроверкиККТ,
		ПараметрыСканирования);
	
КонецПроцедуры

Процедура ЗаполнитьВложенныеШтрихкодыПоДеревуПроверкиНаККТРекурсивно(УзелДерева, ВложенныеШтрихкодыПроверки, ПараметрыСканирования)
	
	Для Каждого СтрокаДерева Из УзелДерева.Строки Цикл
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			ЗаполнитьВложенныеШтрихкодыПоДеревуПроверкиНаККТРекурсивно(СтрокаДерева, ВложенныеШтрихкодыПроверки, ПараметрыСканирования);
			Продолжить;
		КонецЕсли;
		
		ЭлементПроверки = ШтрихкодированиеИСМПКлиентСервер.НовыйЭлементПроверкиСредствамиККТПоДаннымШтрихкода(
			СтрокаДерева);
		ВложенныеШтрихкодыПроверки.Добавить(ЭлементПроверки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтрицательныйРезультатПроверкиСредствамиККТ(ПредставлениеВЧеке)
	
	Если ПредставлениеВЧеке = ШтрихкодированиеИСМПКлиентСервер.ПредставлениеКодаМаркировкиВЧеке().ММинус Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область РаботаСОшибками

// Выполняет проверку на ошибки по заданным правилам.
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  ПравилаПроверкиНаОшибки - Структура - Описание:
//   * КонтрольСерий - Массив - Коллекция строк, где были выявлены ошибки по контролю серий.
//   * КонтрольСтатусов - Массив - Массив структур:
//     * СтрокиСОшибками - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//     * ДоступныеСтатусы - Массив из ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Доступные статусы
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		
		ПроверитьНаОшибкиСтрокиДерева(ДеревоУпаковок.Строки, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ЕстьОшибки;
		
		// Приоритет 1.
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПолногоКодаМаркировки")
			И ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Количество() > 0 Тогда
			
			Для Каждого ЭлементДанных Из ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки Цикл
				
				Если ЭлементДанных.СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементДанных.СтрокаДерева.ТекстОшибки = ЭлементДанных.ТекстОшибки;
				ЭлементДанных.СтрокаДерева.ЕстьОшибки  = Истина;
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Очистить();
			
		КонецЕсли;
		
		// Приоритет 2.
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
			И ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Количество() > 0 Тогда
			
			ПредставленияСтатусов = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ПредставлениеСтатусов;
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДерева.Статус)
					И ЗначениеЗаполнено(СтрокаДерева.ОсобоеСостояние) Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Статус: %1 (%2)'"),
						ПредставленияСтатусов.Получить(СтрокаДерева.Статус),
						ПредставленияСтатусов.Получить(СтрокаДерева.ОсобоеСостояние));
				Иначе
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1'"), ПредставленияСтатусов.Получить(СтрокаДерева.Статус));
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = ТекстОшибки;
				СтрокаДерева.ЕстьОшибки  = Истина;
				
				ВидДополнения = ВидДополненияПредставленияОшибки();
				ВидДополнения.Статус          = СтрокаДерева.Статус;
				ВидДополнения.ВидОперацииИСМП = ПараметрыСканирования.ВидОперацииИСМП;
				ДополнитьПредставлениеОшибки(СтрокаДерева, ВидДополнения);
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Очистить();
			
		КонецЕсли;
		
		// Приоритет 3.
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПустыхУпаковок")
			И ПравилаПроверкиНаОшибки.КонтрольПустыхУпаковок.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольПустыхУпаковок Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = НСтр("ru = 'Пустая упаковка'");
				СтрокаДерева.ЕстьОшибки  = Истина;
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтрольПустыхУпаковок.Очистить();
			
		КонецЕсли;
		
		// Приоритет 4.
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
			И ПравилаПроверкиНаОшибки.КонтрольВладельца.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДерева.ИННАгента) Тогда
					ТекстОшибкиАгент = СтрШаблон(
						НСтр("ru = ', ИНН агента: %1'"),
						СтрокаДерева.ИННАгента);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДерева.Владелец) Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Владелец: %1 (%2)%3'"),
						СтрокаДерева.Владелец,
						СтрокаДерева.ИННВладельца,
						ТекстОшибкиАгент);
				Иначе
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'ИНН владельца: %1%2'"),
						СтрокаДерева.ИННВладельца,
						ТекстОшибкиАгент);
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = ТекстОшибки;
				СтрокаДерева.ЕстьОшибки  = Истина;
				
				ВидДополнения = ВидДополненияПредставленияОшибки();
				ВидДополнения.Владелец        = Истина;
				ВидДополнения.ВидОперацииИСМП = ПараметрыСканирования.ВидОперацииИСМП;
				ДополнитьПредставлениеОшибки(СтрокаДерева, ВидДополнения);
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтрольВладельца.Очистить();
			
		КонецЕсли;
		
		// Приоритет 5.
		Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП") Тогда
			
			ЕстьРасхождения = Ложь;
			ШтрихкодированиеИС.ВыявитьРасхожденияВСоставахДеревьев(
				ДеревоУпаковок, ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса, ЕстьРасхождения);
			
			Если ЕстьРасхождения Тогда
				// Правило является исключением, проверка выполняется после завершения всех остальных проверок.
				// Установка флага обязательна.
				ЕстьОшибки = Истина;
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот")
			И ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Способ ввода в оборот: %1'"),
					СтрокаДерева.СпособВводаВОборот);
				
				СтрокаДерева.ЕстьОшибки = Истина;
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Очистить();
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборотОффлайн")
			И ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = НСтр("ru = 'Способ ввода в оборот: маркировка остатков'");
				СтрокаДерева.ЕстьОшибки = Истина;
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКодовВводаОстатков")
		И ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Количество() > 0 Тогда
		
		Для Каждого ЭлементДанных Из ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков Цикл
			
			Если ЭлементДанных.СтрокаДерева.ЕстьОшибки Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементДанных.СтрокаДерева.ТекстОшибки = ЭлементДанных.ТекстОшибки;
			ЭлементДанных.СтрокаДерева.ЕстьОшибки  = Истина;
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольОкончанияСрокаГодности")
		И ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности.Количество() > 0 Тогда
		
		Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности Цикл
			
			Если СтрокаДерева.ЕстьОшибки Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДерева.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Истек срок годности продукции. Товар годен до: %1'"),
				СтрокаДерева.ГоденДо);
			СтрокаДерева.ЕстьОшибки = Истина;
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности.Очистить();
		
	КонецЕсли;
	
	ПроверитьНаОшибкиТаблицуДанныеКодовМаркировки(
		ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки,
		ПараметрыСканирования, ЕстьОшибки);
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПолногоКодаМаркировки")
		И ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Количество() > 0 Тогда
		
		Для Каждого ЭлементДанных Из ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки Цикл
			
			Если ЗначениеЗаполнено(ЭлементДанных.СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементДанных.СтрокаДанных.ТекстОшибки = ЭлементДанных.ТекстОшибки;
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
		И ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Количество() > 0 Тогда
		
		ПредставленияСтатусов = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ПредставлениеСтатусов;
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.Статус)
				И ЗначениеЗаполнено(СтрокаДанных.ОсобоеСостояние) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Статус: %1 (%2)'"),
					ПредставленияСтатусов.Получить(СтрокаДанных.Статус),
					ПредставленияСтатусов.Получить(СтрокаДанных.ОсобоеСостояние));
			Иначе
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1'"), ПредставленияСтатусов.Получить(СтрокаДанных.Статус));
			КонецЕсли;
			
			СтрокаДанных.ТекстОшибки = ТекстОшибки;
			
			ВидДополнения = ВидДополненияПредставленияОшибки();
			ВидДополнения.Статус          = СтрокаДанных.Статус;
			ВидДополнения.ВидОперацииИСМП = ПараметрыСканирования.ВидОперацииИСМП;
			ДополнитьПредставлениеОшибки(СтрокаДанных, ВидДополнения);
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
		И ПравилаПроверкиНаОшибки.КонтрольВладельца.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.ИННАгента) Тогда
				ТекстОшибкиАгент = СтрШаблон(
					НСтр("ru = ', ИНН агента: %1'"),
					СтрокаДанных.ИННАгента);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.Владелец) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Владелец: %1 (%2)%3'"),
					СтрокаДанных.Владелец,
					СтрокаДанных.ИННВладельца,
					ТекстОшибкиАгент);
			Иначе
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'ИНН владельца: %1%2'"),
					СтрокаДанных.ИННВладельца,
					ТекстОшибкиАгент);
			КонецЕсли;
			
			СтрокаДанных.ТекстОшибки = ТекстОшибки;
			
			ВидДополнения = ВидДополненияПредставленияОшибки();
			ВидДополнения.Владелец        = Истина;
			ВидДополнения.ВидОперацииИСМП = ПараметрыСканирования.ВидОперацииИСМП;
			ДополнитьПредставлениеОшибки(СтрокаДанных, ВидДополнения);
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольВладельца.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКодовВводаОстатков")
		И ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Количество() > 0 Тогда
		
		Для Каждого ЭлементДанных Из ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков Цикл
			
			Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементДанных.СтрокаДанных.ТекстОшибки = ЭлементДанных.ТекстОшибки;
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот")
		И ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			СпособВводаВОборот = СтрокаДанных.СпособВводаВОборот;
			Если СпособВводаВОборот = Неопределено Тогда
				СпособВводаВОборот = НСтр("ru='Неопределен'");
			КонецЕсли;
			
			Если ТипЗнч(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) = Тип("Массив") Тогда
				ПредставлениеСпособаВводаВОборот = СтрСоединить(
					ПараметрыСканирования.ДопустимыйСпособВводаВОборот,
					НСтр("ru = ','") + " ");
			Иначе
				ПредставлениеСпособаВводаВОборот = ПараметрыСканирования.ДопустимыйСпособВводаВОборот;
			КонецЕсли;
			
			СтрокаДанных.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Способ ввода в оборот: %1
				           |Ожидаемый способ ввода в оборот: %2'"),
				СпособВводаВоборот, ПредставлениеСпособаВводаВОборот);
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборотОффлайн")
		И ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) = Тип("Массив") Тогда
				ПредставлениеСпособаВводаВОборот = СтрСоединить(
					ПараметрыСканирования.ДопустимыйСпособВводаВОборот,
					НСтр("ru = ','") + " ");
			Иначе
				ПредставлениеСпособаВводаВОборот = ПараметрыСканирования.ДопустимыйСпособВводаВОборот;
			КонецЕсли;
			
			СтрокаДанных.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Способ ввода в оборот: маркировка остатков.
				           |Ожидаемый способ ввода в оборот: %1'"),
				ПредставлениеСпособаВводаВОборот);
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСрокаГодности")
		И ПравилаПроверкиНаОшибки.КонтрольСрокаГодности.ЕстьОшибка Тогда
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольСрокаГодности.СтрокиСОшибками Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			СрокГодности = СтрокаДанных.СоставКодаМаркировки.ГоденДо;
			СтрокаДанных.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Срок годности кода маркировки не соответствует ни одному ВСД.
				           |Срок годности: %1'"), СрокГодности);
			
			ВидДополнения = ВидДополненияПредставленияОшибки();
			ВидДополнения.Статус          = СтрокаДанных.Статус;
			ВидДополнения.ВидОперацииИСМП = ПараметрыСканирования.ВидОперацииИСМП;
			ДополнитьПредставлениеОшибки(СтрокаДанных, ВидДополнения);
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольСрокаГодности.СтрокиСОшибками.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольОкончанияСрокаГодности")
		И ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДанных.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Истек срок годности продукции. Товар годен до: %1'"),
				СтрокаДанных.ГоденДо);
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности.Очистить();
		
	КонецЕсли;
	
	ШтрихкодированиеИС.ПроконтролироватьЗаполнениеСерийСУчетомСохраненногоВыбора(
		ПравилаПроверкиНаОшибки, ПараметрыСканирования);
	
КонецПроцедуры

Функция ПроизвестиКонтрольСпособаВводаВОборотОстатки(СтрокаДанных, ПараметрыСканирования)
	
	МаркировкаОстатков = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	ШаблонОшибки       = НСтр("ru = 'Способ ввода в оборот: %1
	                                |Ожидаемый способ ввода в оборот: %2'");
	
	СообщитьОбОшибке            = Истина;
	СпособВводаВОборот          = Неопределено;
	ОжидаемыйСпособВводаВОборот = Неопределено;
	ДопустимыеСпособыВвода      = Новый Массив();
	
	Если ТипЗнч(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) = Тип("Массив") Тогда
		ДопустимыеСпособыВвода = ПараметрыСканирования.ДопустимыйСпособВводаВОборот;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) Тогда
		ДопустимыеСпособыВвода.Добавить(ПараметрыСканирования.ДопустимыйСпособВводаВОборот);
	КонецЕсли;
	
	Если ДопустимыеСпособыВвода.Найти(МаркировкаОстатков) <> Неопределено
		Или ПараметрыСканирования.ЭтоМаркировкаОстатков = Истина Тогда
		
		СпособВводаВОборот          = СтрокаДанных.СпособВводаВОборот;
		ОжидаемыйСпособВводаВОборот = МаркировкаОстатков;
		
		Если СтрокаДанных.ЭтоКодВводаОстатков Тогда
			СообщитьОбОшибке = Ложь;
		ИначеЕсли СтрокаДанных.СпособВводаВОборот = МаркировкаОстатков Тогда
			СообщитьОбОшибке = Ложь;
		КонецЕсли;
		
	ИначеЕсли (ДопустимыеСпособыВвода.Количество() > 0
		И ДопустимыеСпособыВвода.Найти(МаркировкаОстатков) = Неопределено)
		Или ПараметрыСканирования.ЭтоМаркировкаОстатков = Ложь Тогда
		
		СпособВводаВОборот          = СтрокаДанных.СпособВводаВОборот;
		ОжидаемыйСпособВводаВОборот = СтрСоединить(
					ДопустимыеСпособыВвода,
					НСтр("ru = ','") + " ");
		
		Если СтрокаДанных.СпособВводаВОборот <> МаркировкаОстатков Тогда
			СообщитьОбОшибке = Ложь;
		ИначеЕсли Не СтрокаДанных.ЭтоКодВводаОстатков Тогда
			СообщитьОбОшибке = Ложь;
		КонецЕсли;
		
	Иначе
		СообщитьОбОшибке = Ложь;
	КонецЕсли;
	
	Если СообщитьОбОшибке Тогда
		Возврат СтрШаблон(
			ШаблонОшибки,
			СпособВводаВОборот,
			ОжидаемыйСпособВводаВОборот);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Выполняет проверку строк дерева на ошибки.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  ПравилаПроверкиНаОшибки - Структура - правила, по которым выполняется проверка:
//    * КонтрольСерий - Массив - для дерева заполнение серий не контролируется.
//    * КонтрольСтатусов - Массив - список строк дерева, в которых статус не соответствует ожидаемому.
//  ПараметрыСканирования - (См. ШтрихкодированиеИС.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если при проверке выявлены ошибки.
Процедура ПроверитьНаОшибкиСтрокиДерева(СтрокиДерева, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки)
	
	ВладелецМожетБытьПустым = Ложь;
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
		
		Если ЗначениеЗаполнено(ПараметрыСканирования.Владелец) Тогда
			
			СведенияОбОрганизации = Неопределено;
			Если ДанныеПоШтрихкодам.СведенияОбОрганизациях = Неопределено Тогда
				ДанныеПоШтрихкодам.СведенияОбОрганизациях = Новый Соответствие;
			Иначе
				СведенияОбОрганизации = ДанныеПоШтрихкодам.СведенияОбОрганизациях[ПараметрыСканирования.Владелец];
			КонецЕсли;
			Если СведенияОбОрганизации = Неопределено Тогда
				СведенияОбОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПараметрыСканирования.Владелец);
				ДанныеПоШтрихкодам.СведенияОбОрганизациях.Вставить(ПараметрыСканирования.Владелец, СведенияОбОрганизации);
			КонецЕсли;
			
			ОжидаемыйИННВладельца = СведенияОбОрганизации.ИНН;
			
		Иначе
			
			ОжидаемыйИННВладельца = "";
			
		КонецЕсли;
		
		ВладелецМожетБытьПустым = ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(ПараметрыСканирования.СсылкаНаОбъект);
		
	КонецЕсли;
	
	ПроверятьСтруктуруКодовМаркировки = ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки;

	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если Не ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДерева.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных = Неопределено;
		
		Если ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора Тогда
			КонтролироватьСтатусыКодовМаркировки = ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП;
		Иначе
			КонтролироватьСтатусыКодовМаркировки = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки(
				СтрокаДерева.ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП)
		КонецЕсли;

		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
			И КонтролироватьСтатусыКодовМаркировки Тогда
			
			Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыУпаковок;
			Иначе
				ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусы;
			КонецЕсли;
			
			ОтсутствуетДопустимыйСтатус = ДопустимыеСтатусыИСМП.Найти(СтрокаДерева.Статус) = Неопределено;
			Если Не ОтсутствуетДопустимыйСтатус
				И ЗначениеЗаполнено(СтрокаДерева.ОсобоеСостояние)
				И СтрокаДерева.ОсобоеСостояние <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
				И ДопустимыеСтатусыИСМП.Найти(СтрокаДерева.ОсобоеСостояние) = Неопределено Тогда
				ОтсутствуетДопустимыйСтатус = Истина;
			КонецЕсли;
			
			Если ОтсутствуетДопустимыйСтатус Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Добавить(СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДопустимыеСпособыВвода = Новый Массив();
		
		Если ТипЗнч(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) = Тип("Массив") Тогда
			ДопустимыеСпособыВвода = ПараметрыСканирования.ДопустимыйСпособВводаВОборот;
		ИначеЕсли ЗначениеЗаполнено(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) Тогда
			ДопустимыеСпособыВвода.Добавить(ПараметрыСканирования.ДопустимыйСпособВводаВОборот);
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот") Тогда
			
			Если СтрокаДерева.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
				И ДопустимыеСпособыВвода.Найти(СтрокаДерева.СпособВводаВОборот) = Неопределено Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Добавить(СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборотОффлайн") Тогда
			
			Если ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаДерева.Штрихкод, Истина)
				И ДопустимыеСпособыВвода.Количество() > 0
				И ДопустимыеСпособыВвода.Найти(Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков) = Неопределено Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Добавить(СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора Тогда
			КонтролироватьВладельцевКодовМаркировкиИСМП = ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП;
		Иначе
			КонтролироватьВладельцевКодовМаркировкиИСМП = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьВладельцевКодовМаркировки(
				СтрокаДерева.ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП)
		КонецЕсли;

		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
			И КонтролироватьВладельцевКодовМаркировкиИСМП Тогда
			
			Если СтрокаДерева.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
				И СтрокаДерева.Статус <> Неопределено
				И Не (СтрокаДерева.ИННВладельца = ОжидаемыйИННВладельца
					Или СтрокаДерева.ИННАгента <> ОжидаемыйИННВладельца) Тогда
				
				Если ВладелецМожетБытьПустым И Не ЗначениеЗаполнено(СтрокаДерева.ИННВладельца) Тогда
				Иначе
					ЕстьОшибки = Истина;
					ПравилаПроверкиНаОшибки.КонтрольВладельца.Добавить(СтрокаДерева);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКодовВводаОстатков") Тогда
			
			Если СтрокаДанных = Неопределено Тогда
				СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(
					СтрокаДерева.НормализованныйШтрихкод, "НормализованныйШтрихкод");
			КонецЕсли;
			
			Если СтрокаДанных <> Неопределено
				И СтрокаДанных.МаркируемаяПродукция
				И (Не СтрокаДанных.ЭтоКодВводаОстатков И ПараметрыСканирования.ЭтоМаркировкаОстатков
				Или СтрокаДанных.ЭтоКодВводаОстатков И Не ПараметрыСканирования.ЭтоМаркировкаОстатков) Тогда
				
				ТекстОшибки = ПроизвестиКонтрольСпособаВводаВОборотОстатки(
					СтрокаДанных, ПараметрыСканирования);
				
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ЕстьОшибки = Истина;
					ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Добавить(
						Новый Структура(
							"СтрокаДерева, ТекстОшибки",
							СтрокаДерева, ТекстОшибки));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПустыхУпаковок") Тогда
			
			Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки)
				И СтрокаДерева.Строки.Количество() = 0 Тогда
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольПустыхУпаковок.Добавить(СтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольОкончанияСрокаГодности") Тогда
			
			Если ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(СтрокаДерева.ВидПродукции)
				И ЗначениеЗаполнено(СтрокаДерева.ГоденДо)
				И СтрокаДерева.ГоденДо < ПараметрыСканирования.ДатаДокумента Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности.Добавить(СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПолногоКодаМаркировки") Тогда

			Если СтрокаДанных = Неопределено Тогда
				СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(
					СтрокаДерева.НормализованныйШтрихкод, "НормализованныйШтрихкод");
			КонецЕсли;

			Если СтрокаДанных <> Неопределено Тогда

				ДанныеРазбора = СтрокаДанных.ДанныеРазбора;
				Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
					Или ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковка(
						ДанныеРазбора.ВидУпаковки, ДанныеРазбора) Тогда

					СоставКодаМаркировки   = СтрокаДерева.СоставКодаМаркировки;
					КодВключаетКриптоХвост = Ложь;

					Если СоставКодаМаркировки <> Неопределено Тогда
						Если СоставКодаМаркировки.Свойство("ВключаетКриптоХвост") Тогда
							КодВключаетКриптоХвост = СоставКодаМаркировки.ВключаетКриптоХвост;
						КонецЕсли;
					КонецЕсли;

					Если Не КодВключаетКриптоХвост
						И ((Не СтрокаДерева.ЕстьВПулеКодовМаркировки И Не ПроверятьСтруктуруКодовМаркировки)
							Или ПроверятьСтруктуруКодовМаркировки) Тогда

						ЕстьОшибки = Истина;
						ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
							Новый Структура(
								"СтрокаДерева, ТекстОшибки",
								СтрокаДерева, НСтр("ru = 'В структуре кода маркировки отсутствует криптохвост'")));

					ИначеЕсли ПроверятьСтруктуруКодовМаркировки
						И КодВключаетКриптоХвост
						И ДанныеРазбора.Детализация.ВключаетИдентификаторыПрименения
						И Не ДанныеРазбора.Детализация.СодержитРазделительGS Тогда

						ЕстьОшибки = Истина;
						ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
							Новый Структура(
								"СтрокаДерева, ТекстОшибки",
								СтрокаДерева, НСтр("ru = 'В структуре кода маркировки отстутствуют разделители GS'")));

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		ПравилаПроверкиНаОшибки.ПроверенныеШтрихкоды.Вставить(СтрокаДерева.Штрихкод, Истина);
		ПроверитьНаОшибкиСтрокиДерева(СтрокаДерева.Строки, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет обработанные штрихкоды на ошибки по заданным правилам.
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  ПравилаПроверкиНаОшибки - Структура - Описание:
// * КонтрольСерий - Массив - Коллекция строк, где были выявлены ошибки по контролю серий.
// * КонтрольСтатусов - Массив - Массив структур:
//     * СтрокиСОшибками - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//     * ДоступныеСтатусы - Массив Из ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Доступные статусы
//                          ошибки по контролю статусов.
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаОшибкиТаблицуДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	ВладелецМожетБытьПустым = Ложь;
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
		ВладелецМожетБытьПустым = ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(ПараметрыСканирования.СсылкаНаОбъект);
	КонецЕсли;
	
	ПроверятьСтруктуруКодовМаркировки = ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки;

	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если Не ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ЭтоШтрихкодНоменклатуры Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.СтрокаДерева = Неопределено И Не СтрокаДанных.Входящий Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСерий") Тогда
			Если ТребуетсяВыборСерии(СтрокаДанных, ПараметрыСканирования) Тогда
				ПравилаПроверкиНаОшибки.КонтрольСерий.Добавить(СтрокаДанных);
			КонецЕсли;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСрокаГодности") Тогда
			ПроверитьДанныеСтрокиПоСрокуГодности(СтрокаДанных, ПравилаПроверкиНаОшибки.КонтрольСрокаГодности, ПараметрыСканирования);
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольИдентификатораВЕТИС") Тогда
			ПроверитьЗаполнениеИдентификатораВЕТИССтроки(СтрокаДанных);
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.ПроверенныеШтрихкоды.Получить(СтрокаДанных.Штрихкод) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора Тогда
			КонтролироватьВладельцевКодовМаркировкиИСМП = ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП;
		Иначе
			КонтролироватьВладельцевКодовМаркировкиИСМП = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьВладельцевКодовМаркировки(
				СтрокаДанных.ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП)
		КонецЕсли;

		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
			И КонтролироватьВладельцевКодовМаркировкиИСМП Тогда
			
			Если ЗначениеЗаполнено(ПараметрыСканирования.Владелец) Тогда
				
				СведенияОбОрганизации = Неопределено;
				Если ДанныеПоШтрихкодам.СведенияОбОрганизациях = Неопределено Тогда
					ДанныеПоШтрихкодам.СведенияОбОрганизациях = Новый Соответствие;
				Иначе
					СведенияОбОрганизации = ДанныеПоШтрихкодам.СведенияОбОрганизациях[ПараметрыСканирования.Владелец];
				КонецЕсли;
				Если СведенияОбОрганизации = Неопределено Тогда
					СведенияОбОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПараметрыСканирования.Владелец);
					ДанныеПоШтрихкодам.СведенияОбОрганизациях.Вставить(ПараметрыСканирования.Владелец, СведенияОбОрганизации);
				КонецЕсли;
				
				ОжидаемыйИННВладельца = СведенияОбОрганизации.ИНН;
				
			Иначе
				
				ОжидаемыйИННВладельца = "";
				
			КонецЕсли;
			
			Если ВладелецМожетБытьПустым И Не ЗначениеЗаполнено(СтрокаДанных.ИННВладельца) Тогда
			ИначеЕсли Не (СтрокаДанных.ИННВладельца = ОжидаемыйИННВладельца
				Или СтрокаДанных.ИННАгента = ОжидаемыйИННВладельца)
				И СтрокаДанных.Статус <> Неопределено
				И СтрокаДанных.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольВладельца.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора Тогда
			КонтролироватьСтатусыКодовМаркировки = ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП;
		Иначе
			КонтролироватьСтатусыКодовМаркировки = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки(
				СтрокаДанных.ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП)
		КонецЕсли;

		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
			И КонтролироватьСтатусыКодовМаркировки Тогда
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыУпаковок;
			Иначе
				ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусы;
			КонецЕсли;
			
			ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусы;
			ОтсутствуетДопустимыйСтатус = ДопустимыеСтатусыИСМП.Найти(СтрокаДанных.Статус) = Неопределено;
			Если Не ОтсутствуетДопустимыйСтатус
				И ЗначениеЗаполнено(СтрокаДанных.ОсобоеСостояние)
				И СтрокаДанных.ОсобоеСостояние <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
				И ДопустимыеСтатусыИСМП.Найти(СтрокаДанных.ОсобоеСостояние) = Неопределено Тогда
				ОтсутствуетДопустимыйСтатус = Истина;
			КонецЕсли;
			
			Если ОтсутствуетДопустимыйСтатус Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКодовВводаОстатков") Тогда
			
			Если СтрокаДанных.ЭтоКодВводаОстатков
				Или (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
					И ПараметрыСканирования.ЭтоМаркировкаОстатков <> Неопределено) Тогда
				
				ТекстОшибки = ПроизвестиКонтрольСпособаВводаВОборотОстатки(
					СтрокаДанных, ПараметрыСканирования);
				
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ЕстьОшибки = Истина;
					ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Добавить(
						Новый Структура(
							"СтрокаДанных, ТекстОшибки",
							СтрокаДанных, ТекстОшибки));
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
		ДопустимыеСпособыВвода = Новый Массив();
	
		Если ТипЗнч(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) = Тип("Массив") Тогда
			ДопустимыеСпособыВвода = ПараметрыСканирования.ДопустимыйСпособВводаВОборот;
		ИначеЕсли ЗначениеЗаполнено(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) Тогда
			ДопустимыеСпособыВвода.Добавить(ПараметрыСканирования.ДопустимыйСпособВводаВОборот);
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот") Тогда
			
			Если ЗначениеЗаполнено(СтрокаДанных.СпособВводаВОборот) // Агрегация, новые упаковки.
				И ДопустимыеСпособыВвода.Найти(СтрокаДанных.СпособВводаВОборот) = Неопределено Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборотОффлайн") Тогда
			
			Если СтрокаДанных.ЭтоКодВводаОстатков
				И ДопустимыеСпособыВвода.Найти(Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков) = Неопределено Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольОкончанияСрокаГодности") Тогда
			
			Если ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(СтрокаДанных.ВидПродукции)
				И ЗначениеЗаполнено(СтрокаДанных.ГоденДо)
				И СтрокаДанных.ГоденДо < ПараметрыСканирования.ДатаДокумента Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПолногоКодаМаркировки") Тогда

			ДанныеРазбора = СтрокаДанных.ДанныеРазбора;
			Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
				Или ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковка(
					ДанныеРазбора.ВидУпаковки, ДанныеРазбора) Тогда

				СоставКодаМаркировки   = СтрокаДанных.СоставКодаМаркировки;
				КодВключаетКриптоХвост = Ложь;

				Если СоставКодаМаркировки <> Неопределено Тогда
					Если СоставКодаМаркировки.Свойство("ВключаетКриптоХвост") Тогда
						КодВключаетКриптоХвост = СоставКодаМаркировки.ВключаетКриптоХвост;
					КонецЕсли;
				КонецЕсли;

				Если Не КодВключаетКриптоХвост
					И ((Не СтрокаДанных.ЕстьВПулеКодовМаркировки И Не ПроверятьСтруктуруКодовМаркировки)
						Или ПроверятьСтруктуруКодовМаркировки) Тогда

					ЕстьОшибки = Истина;
					ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
						Новый Структура(
							"СтрокаДанных, ТекстОшибки",
							СтрокаДанных, НСтр("ru = 'В структуре кода маркировки отсутствует криптохвост'")));

				ИначеЕсли ПроверятьСтруктуруКодовМаркировки
						И КодВключаетКриптоХвост
						И ДанныеРазбора.Детализация.ВключаетИдентификаторыПрименения
						И Не ДанныеРазбора.Детализация.СодержитРазделительGS Тогда

						ЕстьОшибки = Истина;
						ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
							Новый Структура(
								"СтрокаДанных, ТекстОшибки",
								СтрокаДанных, НСтр("ru = 'В структуре кода маркировки отстутствуют разделители GS'")));

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДанныеСтрокиПоСрокуГодностиДокументаОснования(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования)
	
	ИнтеграцияИСМПВЕТИС.ПроверитьДанныеСтрокиПоСрокуГодностиДокументаОснования(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования);
	
КонецПроцедуры

Процедура ПроверитьДанныеСтрокиПоСрокуГодностиДокумента(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования)
	
	Если ПравилоПроверки.ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТаблицыТовары = ПолучитьИзВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары);
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", СтрокаДанных.Номенклатура, СтрокаДанных.Характеристика);
	
	ГоденДо = '00010101';
	Если СтрокаДанных.СоставКодаМаркировки <> Неопределено
		И СтрокаДанных.СоставКодаМаркировки.Свойство("ГоденДо")
		И ЗначениеЗаполнено(СтрокаДанных.СоставКодаМаркировки.ГоденДо) Тогда
		ГоденДо = СтрокаДанных.СоставКодаМаркировки.ГоденДо;
		СтруктураПоиска.Вставить("СрокГодности", ГоденДо);
	КонецЕсли;
	
	НайденныеСтроки = ДанныеТаблицыТовары.НайтиСтроки(СтруктураПоиска);
	СтруктураПоиска.Удалить("Номенклатура");
	СтруктураПоиска.Удалить("Характеристика");
	
	ПодходящиеИдентификаторыПроисхожденияВЕТИС = Новый Массив;
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ПодходящиеИдентификаторыПроисхожденияВЕТИС.Добавить(НайденнаяСтрока.ИдентификаторПроисхожденияВЕТИС);
	КонецЦикла;
	ПодходящиеИдентификаторыПроисхожденияВЕТИС = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПодходящиеИдентификаторыПроисхожденияВЕТИС);
	
	ИдентификаторыПоДокументуОснованию = Новый Массив;
	Если ЗначениеЗаполнено(СтрокаДанных.ИдентификаторПроисхожденияВЕТИС) Тогда
		ИдентификаторыПоДокументуОснованию.Добавить(СтрокаДанных.ИдентификаторПроисхожденияВЕТИС);
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ИдентификаторыПроисхожденияВЕТИС) Тогда
		ИдентификаторыПоДокументуОснованию = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаДанных.ИдентификаторыПроисхожденияВЕТИС, Ложь);
	КонецЕсли;
	
	// Ограничим данными документа, если ввод по документу-основанию
	Если ИдентификаторыПоДокументуОснованию.Количество() Тогда
		ПодходящиеИдентификаторыПроисхожденияВЕТИС = ИнтеграцияИС.ПересечениеМассивов(ПодходящиеИдентификаторыПроисхожденияВЕТИС, ИдентификаторыПоДокументуОснованию)
	КонецЕсли;
	
	Если ПодходящиеИдентификаторыПроисхожденияВЕТИС.Количество() > 1 Тогда
		СтрокаДанных.ИдентификаторПроисхожденияВЕТИС = ПодходящиеИдентификаторыПроисхожденияВЕТИС;
	ИначеЕсли ПодходящиеИдентификаторыПроисхожденияВЕТИС.Количество() = 1 Тогда
		СтрокаДанных.ИдентификаторПроисхожденияВЕТИС = ПодходящиеИдентификаторыПроисхожденияВЕТИС[0];
		Если ЗначениеЗаполнено(ГоденДо) Тогда
			СтрокаДанных.ГоденДо = ГоденДо;
			СтрокаДанных.ТребуетсяВыборВСД = Ложь;
		Иначе
			СтруктураПоиска.Вставить("ИдентификаторПроисхожденияВЕТИС", СтрокаДанных.ИдентификаторПроисхожденияВЕТИС);
			НайденныеСтроки = ДанныеТаблицыТовары.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 1 Тогда
				СтрокаДанных.ГоденДо = НайденныеСтроки[0].СрокГодности;
				СтрокаДанных.ТребуетсяВыборВСД = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.СтрокаДерева) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, "ИдентификаторПроисхожденияВЕТИС, ГоденДо");
		КонецЕсли;
	ИначеЕсли ИдентификаторыПоДокументуОснованию.Количество() Тогда
		ПравилоПроверки.ЕстьОшибка     = Истина;
		СтрокаДанных.ТребуетсяВыборВСД = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеСтрокиПоСрокуГодности(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования)
	
	Если Не ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(СтрокаДанных.ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		ПроверитьДанныеСтрокиПоСрокуГодностиДокументаОснования(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования);
	КонецЕсли;
	
	ПроверитьДанныеСтрокиПоСрокуГодностиДокумента(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеИдентификатораВЕТИССтроки(СтрокаДанных)
	Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		СтрокаДанных.ТребуетсяВыборВСД = Не ЗначениеЗаполнено(СтрокаДанных.ИдентификаторПроисхожденияВЕТИС);
	КонецЕсли;
КонецПроцедуры

// Определяет необходимость указания серии для маркиремой продукции.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если требуется указать серию.
Функция ТребуетсяВыборСерии(ДанныеШтрихкода, ПараметрыСканирования)
	
	ТребуетсяВыбор = Ложь;
	
	Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар 
		И ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
		И Не ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
		
		ТребуетсяВыбор = ИнтеграцияИС.ТребуетсяВыборСерии(ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	Возврат ТребуетсяВыбор;
	
КонецФункции

// Инициализирует структуру правил для проверки на ошибки данных по кодам маркировки.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//  Структура - Описание:
// * КонтрольВладельца - Массив - коллекция, куда требуется поместить строки с ошибками при контроле владельца.
// * КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП - Массив - коллекция, куда требуется поместить строки с ошибками при контроле состава упаковок.
// * КонтрольСпособаВводаВОборот - Массив - коллекция, куда требуется поместить строки с ошибками при контроле способа ввода в оборот.
// * КонтрольСерий - Массив - коллекция, куда требуется поместить строки с ошибками при контроле серий.
// * КонтрольСтатусов - Массив - коллекция, куда требуется поместить строки с ошибками при контроле допустимых статусов.
Функция ПравилаПроверкиНаОшибки(ПараметрыСканирования, ДанныеПоШтрихкодам, ПроверенныеШтрихкоды = Неопределено)
	
	ПравилаПроверкиНаОшибки = Новый Структура;
	ПравилаПроверкиНаОшибки.Вставить("ПроверенныеШтрихкоды", Новый Соответствие);
	
	Если ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		Возврат ПравилаПроверкиНаОшибки;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.Свойство("ДопустимыеСтатусыИСМП") Тогда
		Возврат ПравилаПроверкиНаОшибки;
	КонецЕсли;
	
	Если ПараметрыСканирования.ДопустимыеСтатусыИСМП.Количество() > 0
		И ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП Тогда
		
		ПравилоКонтроляСтатусов = Новый Структура;
		ПравилоКонтроляСтатусов.Вставить("ДопустимыеСтатусы",         ПараметрыСканирования.ДопустимыеСтатусыИСМП);
		ПравилоКонтроляСтатусов.Вставить("ДопустимыеСтатусыУпаковок", ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП);
		ПравилоКонтроляСтатусов.Вставить("ПредставлениеСтатусов",     ПредставленияСтатусов());
		ПравилоКонтроляСтатусов.Вставить("СтрокиСОшибками",           Новый Массив);
		
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСтатусов", ПравилоКонтроляСтатусов);
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ПараметрыУказанияСерий <> Неопределено Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСерий", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.КонтрольПустыхУпаковок
		И Не ПараметрыСканирования.ЭтоАгрегацияКодовМаркировкиИСМП
		И Не ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольПустыхУпаковок", Новый Массив);
	КонецЕсли;
	
	ДопустимыеСпособыВвода = Новый Массив;
	
	Если ТипЗнч(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) = Тип("Массив") Тогда
		ДопустимыеСпособыВвода = ПараметрыСканирования.ДопустимыйСпособВводаВОборот;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) Тогда
		ДопустимыеСпособыВвода.Добавить(ПараметрыСканирования.ДопустимыйСпособВводаВОборот);
	КонецЕсли;
	
	Если ДопустимыеСпособыВвода.Количество() > 0 Тогда
		Если ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП Тогда
			ПравилаПроверкиНаОшибки.Вставить("КонтрольСпособаВводаВОборот", Новый Массив);
		Иначе
			ПравилаПроверкиНаОшибки.Вставить("КонтрольСпособаВводаВОборотОффлайн", Новый Массив);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыСканирования.КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП
		И ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса <> Неопределено Тогда
		
		ПравилаПроверкиНаОшибки.Вставить("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП", Новый Массив);
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП
		И ЗначениеЗаполнено(ПараметрыСканирования.Владелец) Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольВладельца", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.ЭтоМаркировкаОстатков <> Неопределено
		И Не ПараметрыСканирования.ЭтоАгрегацияКодовМаркировкиИСМП Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольКодовВводаОстатков", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.КонтрольПустыхУпаковок
		И Не ПараметрыСканирования.ЭтоАгрегацияКодовМаркировкиИСМП
		И Не ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольПустыхУпаковок", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.ЗаполнятьСрокГодности
		И ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП Тогда
		
		ПравилоКонтроляСрокаГодности = Новый Структура;
		ПравилоКонтроляСрокаГодности.Вставить("ЕстьОшибка",      Ложь);
		ПравилоКонтроляСрокаГодности.Вставить("СтрокиСОшибками", Новый Массив);
		
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСрокаГодности", ПравилоКонтроляСрокаГодности);
		
		Если ПараметрыСканирования.Свойство("КонтролироватьОкончаниеСрокаГодности")
			И ПараметрыСканирования.КонтролироватьОкончаниеСрокаГодности Тогда

			ПравилаПроверкиНаОшибки.Вставить("КонтрольОкончанияСрокаГодности", Новый Массив);

		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ТребоватьПолныйКодМаркировкиИСМП Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольПолногоКодаМаркировки", Новый Массив);
	КонецЕсли;

	Если ПараметрыСканирования.ЗаполнятьДанныеВЕТИС Тогда

		ПравилаПроверкиНаОшибки.Вставить("КонтрольИдентификатораВЕТИС");

	КонецЕсли;

	Возврат ПравилаПроверкиНаОшибки;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДанных

// Заполняет структуру "ДанныеПоШтрихкодам" сведениями, необходимыми для продукции ИС МП. Сведения формируются на основании
//  данных, полученных из сервиса ИС МП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииСЗапросомСведенийИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	МассивСтрокТаблицы = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаТаблицы.ОбработанСОшибками
			Или ЗначениеЗаполнено(СтрокаТаблицы.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЭтоКодВводаОстатков
			И СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаТаблицы.КоличествоВложенныхЕдиниц = 1;
		КонецЕсли;
		
		Если Не СтрокаТаблицы.Идентифицирован
			И ВозможнаПродукцияИСМП(СтрокаТаблицы)
			И СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			МассивСтрокТаблицы.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрокТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ДеревоУпаковокПоДаннымИСМП(МассивСтрокТаблицы, ПараметрыСканирования);
	
	Если Не ПустаяСтрока(Результат.ТекстОшибки) Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки                    = Результат.ТекстОшибки;
		ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = Результат.ТребуетсяОбновлениеКлючаСессии;
		
		Возврат;
	КонецЕсли;
	
	ОтключитьОтборПоВидуПродукции = Истина;
	
	ОбработатьДеревоПолученноеИзИСМП(Результат, ДанныеПоШтрихкодам, ПараметрыСканирования, ОтключитьОтборПоВидуПродукции);
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
		
		Для Каждого ШтрихкодКСопоставлению Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ШтрихкодыПродукцииДляСопоставления Цикл
			НайденнаяСтрока = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(ШтрихкодКСопоставлению, "EAN");
			НайденнаяСтрока.ТребуетсяСопоставление    = Истина;
			ДанныеПоШтрихкодам.ТребуетсяСопоставление = Истина;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки,
		Результат.ДеревоУпаковок,,
		ПараметрыСканирования);
	
КонецПроцедуры

// Заполняет структуру "ДанныеПоШтрихкодам" сведениями, необходимыми для продукции ИС МП. Сведения формируются без запроса
// данных в сервисе ИС МП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСведенийИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаТаблицы.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Идентифицирован Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЭтоКодВводаОстатков
			И СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаТаблицы.КоличествоВложенныхЕдиниц = 1;
		КонецЕсли;
		
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаТаблицы.ВидПродукции)
			И СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаТаблицы.ШтрихкодУпаковки = ШтрихкодированиеИС.СоздатьМаркированныйТоварПоДаннымШтрихкода(СтрокаТаблицы, ПараметрыСканирования);
			СтрокаТаблицы.КоличествоВложенныхЕдиниц = 1;
			СтрокаТаблицы.Идентифицирован           = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет данные по штрихкодам спецификой, исключая информацию без обращения в систему ИС МП.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ДополнитьДанныеПоШтрихкодамСпецификойБезЗапросаСтатусовИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
	
	СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок = Новый Соответствие;
	СтрокиТаблицыДанных = СтрокиТаблицыДанныхДляПолученияСпецифики(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки,
		СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок,
		ПараметрыСканирования);
	
	ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(СтрокиТаблицыДанных);
	ЗаполнитьСтрокиТаблицыДанныхСпецификойПоДаннымПула(СтрокиТаблицыДанных, ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Для Каждого СтрокаДанных Из СтрокиТаблицыДанных Цикл
		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаДанных.КоличествоВложенныхЕдиниц = 1;
		КонецЕсли;
		Если СтруктураДанныхТребуетЗагрузкиВложенныхКодовМаркировки(СтрокаДанных, ПараметрыСканирования) Тогда
			СтрокаДанных.Идентифицирован = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
		И ЗначениеЗаполнено(ДанныеПоШтрихкодам.ВложенныеШтрихкоды) Тогда
		
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		НормализоватьДанныеДереваУпаковок(
			ДеревоУпаковок, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
		// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
		Если Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева Тогда
			МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
			НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары, ПараметрыСканирования);
			ПривестиДанныеМаркированныхТоваровВСоответствиеДеревуУпаковок(МаркированныеТовары);
		КонецЕсли;
		
		ДополнитьВложенныеШтрихкодыДаннымиМолочнойПродукции(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает все коды маркировки, находящиеся в данных по штрихкодам.
// 
// Параметры:
//  ДанныеПоШтрихкодам                                 - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок - Соответствие
//  ПараметрыСканирования                              - См. ШтрихкодированиеИС.ПараметрыСканирования
// Возвращаемое значение:
//  Массив из Строка - Коды маркировки.
Функция СтрокиТаблицыДанныхДляПолученияСпецифики(ДанныеКодовМаркировки, СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок, ПараметрыСканирования)
	
	СтрокиТаблицыДанных = Новый Массив;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если ВозможнаПродукцияИСМП(СтрокаДанных)
			И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок[СтрокаДанных] = Неопределено Тогда
			СтрокиТаблицыДанных.Добавить(СтрокаДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокиТаблицыДанных;
	
КонецФункции

// Возвращает признак, что обрабатываемый код маркировки относится либо может относиться к ИСМП (без табака)
// 
// Параметры:
//   СтрокаДанных - Произвольный - элемент коллекции "ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки"
//     либо совместимый по полям (строка дерева значений, структура).
// Возвращаемое значение:
//   Булево - в текущей строке продукция ИСМП явно присутствует либо возможна
Функция ВозможнаПродукцияИСМП(СтрокаДанных)
	
	Если СтрокаДанных.ЭтоШтрихкодНоменклатуры Тогда
		Возврат Ложь;
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции) Тогда
		Возврат Истина;
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) Тогда
		Возврат Ложь;
	ИначеЕсли Не СтрокаДанных.ЭтоКодВводаОстатков Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ВидПродукции Из СтрокаДанных.ВидыПродукцииКодаМаркировки Цикл
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет специфику, сформированную по данным регистра сведений "Пул кодов маркировки СУЗ".
// 
// Параметры:
//  СтрокиТаблицыДанных - Массив из СтрокаТаблицыЗначений - Строки таблицы "ДанныеКодовМаркировки",
//                                                          которые будут заполненые спецификой.
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам)
//  ПараметрыСканирования - (См. ШтрихкодированиеИС.ПараметрыСканирования)
Процедура ЗаполнитьСтрокиТаблицыДанныхСпецификойПоДаннымПула(СтрокиТаблицыДанных, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	КодыМаркировки = ШтрихкодированиеИСМП.НоваяТаблицаПоискаКодаМаркировкиВПуле();
	
	СоотвествиеСтрокКодам = Новый Соответствие;
	Для Каждого СтрокаДанных Из СтрокиТаблицыДанных Цикл
		
		ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
			СтрокаДанных,
			КодыМаркировки);
		
		СоотвествиеСтрокКодам.Вставить(СтрокаДанных.Штрихкод, СтрокаДанных);
		
	КонецЦикла;
	
	КэшДанныеОрганизаций  = Новый Соответствие();
	ПредставленияСтатусов = ПредставленияСтатусов();
	КодыМаркировкиВПуле   = ШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки(
		КодыМаркировки,
		"Организация,МаркировкаОстатков,СпособВводаВОборот,ПолныйКодМаркировки");
	
	Для Каждого СтрокаТаблицы Из КодыМаркировкиВПуле Цикл
		
		СтрокаДанных = СоотвествиеСтрокКодам.Получить(СтрокаТаблицы.КодМаркировки);
		
		Если СтрокаДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыСканирования.ЭтоПечатьКодаМаркировкиИзПулаИСМП Тогда
			
			Организация = ПараметрыСканирования.Владелец;
			Если Не ЗначениеЗаполнено(Организация) Тогда
				Организация = СтрокаТаблицы.Организация;
			КонецЕсли;
			
			СведенияОбОрганизации = КэшДанныеОрганизаций.Получить(Организация);
			
			Если СведенияОбОрганизации = Неопределено
				И ДанныеПоШтрихкодам.СведенияОбОрганизациях <> Неопределено Тогда
				СведенияОбОрганизации = ДанныеПоШтрихкодам.СведенияОбОрганизациях[Организация];
				КэшДанныеОрганизаций.Вставить(Организация, СведенияОбОрганизации);
			КонецЕсли;
			
			Если СведенияОбОрганизации = Неопределено Тогда
				СведенияОбОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Организация);
				КэшДанныеОрганизаций.Вставить(Организация, СведенияОбОрганизации);
			КонецЕсли;
			
			Если СведенияОбОрганизации <> Неопределено Тогда
				
				СтрокаДанных.ИННВладельца = СведенияОбОрганизации.ИНН;
				СтрокаДанных.Владелец     = Организация;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.МаркировкаОстатков Тогда
			СтрокаДанных.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
		Иначе
			СтрокаДанных.СпособВводаВОборот = СтрокаТаблицы.СпособВводаВОборот;
		КонецЕсли;
		
		СтрокаДанных.ПредставлениеСтатуса = НСтр("ru='Неопределен'");
		
		Если ЗначениеЗаполнено(ПараметрыСканирования.СтатусКодаМаркировкиПоУмолчанию) Тогда
			СтрокаДанных.Статус               = ПараметрыСканирования.СтатусКодаМаркировкиПоУмолчанию;
			СтрокаДанных.ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаДанных.Статус);
		КонецЕсли;
		
		СтрокаДанных.ЕстьВПулеКодовМаркировки = Истина;
		СтрокаДанных.ПолныйКодМаркировки      = СтрокаТаблицы.ПолныйКодМаркировки;
		
	КонецЦикла;
	
	ЗаполнитьПредставлениеНоменклатурыОстаточныхШтрихкодов(СтрокиТаблицыДанных, ПараметрыСканирования);
	
КонецПроцедуры

// Заполняет связанные строки таблицы Маркированные товары данными строк дерева упаковок.
// 
// Параметры:
//  МаркированныеТовары - ТаблицаЗначений - Таблица маркируемой продукции.
Процедура ПривестиДанныеМаркированныхТоваровВСоответствиеДеревуУпаковок(МаркированныеТовары)
	
	Для Каждого СтрокаТовары Из МаркированныеТовары Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТовары.СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет заполнение данных по штрихкодам спецификой продукции ИС МП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
Процедура ДополнитьДанныеПоШтрихкодамСпецификойСЗапросомСтатусовИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок = СформироватьДеревоУпаковокПоДаннымСервиса(
		ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ПотребительскиеУпаковки = СтрокиТаблицыДанныхДляПолученияСпецифики(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок, ПараметрыСканирования);
	
	Если ПотребительскиеУпаковки.Количество() = 0
		И СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
	
	Если ПотребительскиеУпаковки.Количество() > 0 Тогда
		
		Результат = СпецификаДляДополненияДанныхПоШтрихкодам(ПотребительскиеУпаковки, ПараметрыСканирования);
		Если Результат.ЕстьОшибки Тогда
			
			ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
			ДанныеПоШтрихкодам.ТекстОшибки                    = Результат.ТекстОшибки;
			ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = Результат.ТребуетсяОбновлениеКлючаСессии;
			
			ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
			
			Если ВложенныеШтрихкоды <> Неопределено Тогда
				
				НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
				// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
				Если Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева Тогда
					МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
					НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары, ПараметрыСканирования);
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат;
		
		Иначе
			СпецификаШтрихкодовПотребительскихУпаковок = Результат.СпецификаШтрихкодов;
		КонецЕсли;
		
	Иначе
		СпецификаШтрихкодовПотребительскихУпаковок = Новый Соответствие;
	КонецЕсли;
	
	ДополнитьТаблицуДанныеКодовМаркировкиСпецификой(
		СпецификаШтрихкодовПотребительскихУпаковок,
		СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок,
		ПараметрыСканирования);
	
	ЗаполнитьПредставлениеНоменклатурыОстаточныхШтрихкодов(ПотребительскиеУпаковки, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
		НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
		ДополнитьВложенныеШтрихкодыДаннымиМолочнойПродукции(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьДеревоУпаковокПоДаннымСервиса(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ПараметрыСканирования.Свойство("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП")
		И Не ПараметрыСканирования.КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	СтрокиТаблицыДляЗапроса = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки)
			И ШтрихкодированиеИС.ПрисутствуетПродукцияИСМП(СтрокаДанных.ВидыПродукцииКодаМаркировки)
			И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И СтрокаДанных.Входящий Тогда
			
			СтрокиТаблицыДляЗапроса.Добавить(СтрокаДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиТаблицыДляЗапроса.Количество() = 0 Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	РезультатПолученияДанных = ДеревоУпаковокПоДаннымИСМП(СтрокиТаблицыДляЗапроса, ПараметрыСканирования); 
	Если ЗначениеЗаполнено(РезультатПолученияДанных.ТекстОшибки) Тогда
		ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки = РезультатПолученияДанных.ТекстОшибки;
	Иначе
		ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса = РезультатПолученияДанных.ДеревоУпаковок;
	КонецЕсли;
	
	Возврат РезультатПолученияДанных.СоответствиеСтрокДерева;
	
КонецФункции

Процедура ДополнитьТаблицуДанныеКодовМаркировкиСпецификой(
	СпецификаШтрихкодовПотребительскихУпаковок, СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок, ПараметрыСканирования)
	
	ПредставленияСтатусов = ПредставленияСтатусов();
	НаличиеКолонокВДанных = Новый Соответствие;
	КодыМаркировкиДляЗаполненияВводаВОборот = Новый Массив;
	СтрокиТаблицыДляЗаполненияВводаВОборот  = Новый Массив;
	
	Для Каждого КлючЗначение Из СпецификаШтрихкодовПотребительскихУпаковок Цикл
		
		СтрокаТаблицыДанных = КлючЗначение.Ключ;
		СпецификаСтроки     = КлючЗначение.Значение;
		
		ПоляДляЗаполнения = Новый Массив;
		Для Каждого КлючИЗначение Из СпецификаСтроки Цикл
			
			ИмяСвойства  = КлючИЗначение.Ключ;
			ЕстьСвойство = НаличиеКолонокВДанных.Получить(ИмяСвойства);
			Если ЕстьСвойство = Неопределено Тогда
				ЕстьСвойство = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыДанных, ИмяСвойства);
				НаличиеКолонокВДанных.Вставить(ИмяСвойства, ЕстьСвойство);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КлючИЗначение.Значение)
				И ЕстьСвойство Тогда
				ПоляДляЗаполнения.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПоляДляЗаполнения.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДанных, СпецификаСтроки, СтрСоединить(ПоляДляЗаполнения, ","));
		КонецЕсли;
		
		Если СтрокаТаблицыДанных.СтрокаДерева = Неопределено Тогда
			Если СтрокаТаблицыДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
				КоличествоВложенныхЕдиниц = 0;
				Если СпецификаСтроки <> Неопределено
					И СпецификаСтроки.ВложенныеУпаковки <> Неопределено Тогда
					КоличествоВложенныхЕдиниц = СпецификаСтроки.ВложенныеУпаковки.Количество();
				КонецЕсли;
				Если КоличествоВложенныхЕдиниц > 0 Тогда
					СтрокаТаблицыДанных.КоличествоВложенныхЕдиниц = КоличествоВложенныхЕдиниц;
				КонецЕсли;
			ИначеЕсли СтрокаТаблицыДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				СтрокаТаблицыДанных.КоличествоВложенныхЕдиниц = 1;
			ИначеЕсли СпецификаСтроки.ВложенныеУпаковки <> Неопределено Тогда
				
				ВсеВложенныеУпаковкиПотребительские = Истина;
				Для Каждого КлючИЗначение Из СпецификаСтроки.ВложенныеУпаковки Цикл
					Если КлючИЗначение.Значение.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
						ВсеВложенныеУпаковкиПотребительские = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ВсеВложенныеУпаковкиПотребительские Тогда
					СтрокаТаблицыДанных.КоличествоВложенныхЕдиниц = СпецификаСтроки.ВложенныеУпаковки.Количество();
				Иначе
					СтрокаТаблицыДанных.КоличествоВложенныхЕдиниц = СтрокаТаблицыДанных.Коэффициент;
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыДанных.СтрокаДерева, "КоличествоВложенныхЕдиниц") Тогда
			СтрокаТаблицыДанных.КоличествоВложенныхЕдиниц = СтрокаТаблицыДанных.СтрокаДерева.КоличествоВложенныхЕдиниц;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыДанных.Статус)
			И ЗначениеЗаполнено(СтрокаТаблицыДанных.ОсобоеСостояние) Тогда
			ПредставлениеСтатуса = СтрШаблон(
				НСтр("ru = '%1 (%2)'"),
				ПредставленияСтатусов.Получить(СтрокаТаблицыДанных.Статус),
				ПредставленияСтатусов.Получить(СтрокаТаблицыДанных.ОсобоеСостояние));
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицыДанных.Статус) Тогда
			ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаТаблицыДанных.Статус);
		Иначе
			ПредставлениеСтатуса = "";
		КонецЕсли;
		
		СтрокаТаблицыДанных.ПредставлениеСтатуса = ПредставлениеСтатуса;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицыДанных.СпособВводаВОборот) Тогда
			КодыМаркировкиДляЗаполненияВводаВОборот.Добавить(СтрокаТаблицыДанных.Штрихкод);
			СтрокиТаблицыДляЗаполненияВводаВОборот.Добавить(СтрокаТаблицыДанных);
		КонецЕсли;
		
		ЗаполнитьСтрокуПоДаннымРазбораКодаМаркировки(СтрокаТаблицыДанных, ПараметрыСканирования);
		
		Если ТребуетсяЗагрузкаВложенныхКодовМаркировки(
			СпецификаСтроки, СтрокаТаблицыДанных, ПараметрыСканирования) Тогда
			СтрокаТаблицыДанных.Идентифицирован = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеКолонки = Новый Структура;
	ПараметрыДерева = ИнтерфейсМОТП.ПараметрыПостроенияДерева(ПараметрыСканирования);
	ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокИСМП(ПараметрыДерева, ДополнительныеКолонки,, "");
	Если ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокДляФормыПроверкиКодовМаркировки(ДополнительныеКолонки);
	КонецЕсли;
	ИменаКолонокДляКопированияСвойств = Новый Массив;
	Для Каждого КлючИЗначение Из ДополнительныеКолонки Цикл
		ИменаКолонокДляКопированияСвойств.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Для Каждого КлючЗначение Из СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок Цикл
		
		СтрокаТаблицыДанных = КлючЗначение.Ключ;
		СпецификаСтроки     = КлючЗначение.Значение;
		
		Если ЗначениеЗаполнено(СпецификаСтроки) Тогда
			
			Для Каждого ИмяСвойства Из ИменаКолонокДляКопированияСвойств Цикл
				
				Если ЗначениеЗаполнено(СпецификаСтроки[ИмяСвойства]) Тогда
					СтрокаТаблицыДанных[ИмяСвойства] = СпецификаСтроки[ИмяСвойства];
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СтрокаТаблицыДанных.Статус)
				И ЗначениеЗаполнено(СтрокаТаблицыДанных.ОсобоеСостояние) Тогда
				ПредставлениеСтатуса = СтрШаблон(
					НСтр("ru = '%1 (%2)'"),
					ПредставленияСтатусов.Получить(СтрокаТаблицыДанных.Статус),
					ПредставленияСтатусов.Получить(СтрокаТаблицыДанных.ОсобоеСостояние));
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицыДанных.Статус) Тогда
				ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаТаблицыДанных.Статус);
			Иначе
				ПредставлениеСтатуса = "";
			КонецЕсли;
			
			СтрокаТаблицыДанных.ПредставлениеСтатуса = ПредставлениеСтатуса;
			
			СтрокаТаблицыДанных.КоличествоВложенныхЕдиниц = СпецификаСтроки.КоличествоПотребительскихУпаковок;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицыДанных.СпособВводаВОборот) Тогда
				КодыМаркировкиДляЗаполненияВводаВОборот.Добавить(СтрокаТаблицыДанных.Штрихкод);
				СтрокиТаблицыДляЗаполненияВводаВОборот.Добавить(СтрокаТаблицыДанных);
			КонецЕсли;
			
			ЗаполнитьСтрокуПоДаннымРазбораКодаМаркировки(СтрокаТаблицыДанных, ПараметрыСканирования);
			
			Если ТребуетсяЗагрузкаВложенныхКодовМаркировки(
				СпецификаСтроки, СтрокаТаблицыДанных, ПараметрыСканирования) Тогда
				СтрокаТаблицыДанных.Идентифицирован = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КодыМаркировкиДляЗаполненияВводаВОборот.Количество() > 0 Тогда
		ЗаполнитьСпособВводаВОборотСтрокТаблицыДанныеКодовМаркировки(
			СтрокиТаблицыДляЗаполненияВводаВОборот, КодыМаркировкиДляЗаполненияВводаВОборот, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет способ ввода в оборот специфики кодов маркировки. Сначала выполянется заполнение на основании данных регистра
//    сведений "Пул кодов маркировки СУЗ", если получить способа ввода в оборот не удается выполняется обращение в сервис ИС МП.
// 
// Параметры:
//  СпецификаШтрихкодов - Неопределено, соответствие - Ключ - код маркировки, значение - данные, полученные из ИС МП.
//  КодыМаркировки - Массив из Строка - Список кодов маркировки.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьСпособВводаВОборотСтрокТаблицыДанныеКодовМаркировки(СтрокиТаблицыДанных, КодыМаркировки, ПараметрыСканирования)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПулаПоКодамМаркировки = РегистрыСведений.ПулКодовМаркировкиСУЗ.ДанныеКодовМаркировки(КодыМаркировки);
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыДанных Цикл
		
		ДанныеПулаПоКоду = Неопределено;
		Если ДанныеПулаПоКодамМаркировки <> Неопределено Тогда
			ДанныеПулаПоКоду = ДанныеПулаПоКодамМаркировки.Найти(СтрокаТаблицы.Штрихкод, "КодМаркировки");
		КонецЕсли;
		
		Если ДанныеПулаПоКоду <> Неопределено
			И Не ДанныеПулаПоКоду.СохраненоПриСканировании Тогда
			
			Если ДанныеПулаПоКоду.МаркировкаОстатков Тогда
				СтрокаТаблицы.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
			Иначе
				СтрокаТаблицы.СпособВводаВОборот = ДанныеПулаПоКоду.СпособВводаВОборот;
			КонецЕсли;
			
			СтрокаТаблицы.ЭтоКодВводаОстатков      = ДанныеПулаПоКоду.МаркировкаОстатков;
			СтрокаТаблицы.ЕстьВПулеКодовМаркировки = Истина;
			СтрокаТаблицы.ПолныйКодМаркировки      = ДанныеПулаПоКоду.ПолныйКодМаркировки;
			
		ИначеЕсли СтрокаТаблицы.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
			
			СтрокаТаблицы.ЭтоКодВводаОстатков = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получение специфичных данных, используемых только для табачной продукции.
// 
// Параметры:
//  ШтрихкодыДляПолученияСпецифики - Массив Из СтрокаТаблицыЗначений: см. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам - Коды маркировки
//  ПараметрыСканирования - см. ШтрихкодированиеИС.ПараметрыСканирования
//
// Возвращаемое значение:
//  Структура - Описание:
//   * СпецификаШтрихкодов - Неопределено, соответствие - Ключ - код маркировки, значение - данные, полученные из ИС МП.
//   * ЕстьОшибки - Булево - Истина, если при попытке получения данных из ИСМП возникла ошибка.
//   * ТекстОшибки - Строка - Описание ошибки.
Функция СпецификаДляДополненияДанныхПоШтрихкодам(СтрокиТаблицыДанныхДляПолученияСпецифики, ПараметрыСканирования)
	
	Результат = Новый Структура;
	Результат.Вставить("СпецификаШтрихкодов",            Неопределено);
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	ДанныеПоШтрихкодамИСМП = ИнтерфейсИСМП.СтатусыКодовМаркировки(
		СтрокиТаблицыДанныхДляПолученияСпецифики,
		ПараметрыСканирования.Организация);
	
	Если ДанныеПоШтрихкодамИСМП.ТребуетсяОбновлениеКлючаСессии Тогда
		
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось получить данные из ИС МП.
		                                   |По причине: Требуется обновление ключа сессии.'");
		Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
		
		Возврат Результат;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеПоШтрихкодамИСМП.ТекстОшибки) Тогда
		
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось получить данные из ИС МП.
			           |По причине: %1'"), ДанныеПоШтрихкодамИСМП.ТекстОшибки);
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.СпецификаШтрихкодов = ДанныеПоШтрихкодамИСМП.СтатусыКодовМаркировки;
	
	Возврат Результат;
	
КонецФункции

// Дополняет дерево упаковок колонками, специфичными для табачной продукции. Заполняет значения специфичных колонок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
Процедура НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено)
	
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок, ПараметрыСканирования);
	
	Если ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		КоллекцияДополнительныхКолонок = ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокДляФормыПроверкиКодовМаркировки();
		ШтрихкодированиеМОТП.НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(ДеревоУпаковок, КоллекцияДополнительныхКолонок);
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДанныеКодовМаркировки",  ДанныеКодовМаркировки);
	ПараметрыЗаполнения.Вставить("Кэш",                    Новый Структура());
	ПараметрыЗаполнения.Вставить("ПараметрыСканирования",  ПараметрыСканирования);
	
	ПараметрыЗаполнения.Кэш.Вставить("ЗаполняемыеКолонки",  Неопределено);
	
	ЗаполнитьСтрокиДерева(ДеревоУпаковок, ПараметрыЗаполнения);
	
КонецПроцедуры

// Заполняет строки дерева упаковок данными специфичными для обувной продукции.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  ПараметрыЗаполнения - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Самая верхняя строка иерархии дерева упаковок.
//  ЭтоПервыйУровень - Булево - Истина, если это верхний уровень дерева.
Функция ЗаполнитьСтрокиДерева(СтрокаВерхнегоУровня, ПараметрыЗаполнения,
	УпаковкаВерхнегоУровня = Неопределено, ЭтоПервыйУровень = Истина)
	
	ОчиститьКоличествоВложенныхЕдиниц = Истина;
	
	Для Каждого СтрокаДерева Из СтрокаВерхнегоУровня.Строки Цикл
		
		Если ОчиститьКоличествоВложенныхЕдиниц Тогда
			Если ТипЗнч(СтрокаВерхнегоУровня) = Тип("СтрокаДереваЗначений") Тогда
				СтрокаВерхнегоУровня.КоличествоВложенныхЕдиниц = 0;
				ОчиститьКоличествоВложенныхЕдиниц = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.ВидПродукции)
			И Не ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДерева.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Родитель = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
		
		СтрокаДерева.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		ЗаполнитьСтрокиДерева(
			СтрокаДерева, ПараметрыЗаполнения, УпаковкаВерхнегоУровня, Ложь);
		
		Если ПараметрыЗаполнения.ДанныеКодовМаркировки <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(СтрокаДерева.НормализованныйШтрихкод) Тогда
				СтрокаДанных = ПараметрыЗаполнения.ДанныеКодовМаркировки.Найти(СтрокаДерева.НормализованныйШтрихкод, "НормализованныйШтрихкод");
			Иначе
				СтрокаДанных = ПараметрыЗаполнения.ДанныеКодовМаркировки.Найти(СтрокаДерева.Штрихкод, "Штрихкод");
			КонецЕсли;
			
			Если СтрокаДанных <> Неопределено Тогда
				
				Если ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки = Неопределено Тогда
					
					ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки = Новый Массив;
					
					КолонкиДерева = СтрокаДерева.Владелец().Колонки;
					Для Каждого Колонка Из ПараметрыЗаполнения.ДанныеКодовМаркировки.Колонки Цикл
						
						ИмяКолонки = Колонка.Имя;
						
						Если КолонкиДерева.Найти(ИмяКолонки) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки.Добавить(ИмяКолонки);
						
					КонецЦикла;
					
				КонецЕсли;
				
				ЗаполнитьСтрокуДереваПоДаннымТаблицыКодыМаркировок(СтрокаДерева, СтрокаДанных, ПараметрыЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьХарактеристикиСтрокиДереваПоПодчиненнымСтрокам(СтрокаДерева, СтрокаДанных);
		
		РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева);
		
		ЗаполнитьСтрокуПоДаннымРазбораКодаМаркировки(СтрокаДерева, ПараметрыЗаполнения.ПараметрыСканирования);
		
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьСтрокуПоДаннымРазбораКодаМаркировки(СтрокаДанных, ПараметрыСканирования) Экспорт
	
	Если СтрокаДанных.СоставКодаМаркировки = Неопределено Тогда
		
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(СтрокаДанных.Штрихкод, ПараметрыСканирования.ДопустимыеВидыПродукции);
		Если ДанныеРазбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ШтрихкодированиеИС.ЗаполнитьВидУпаковкиПоДаннымРазбораИлиСтрокеДанных(СтрокаДанных, ДанныеРазбора);
		
		СтрокаДанных.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
		
	КонецЕсли;
	
	ПроверятьНаличиеПолейСоставаКодаМаркировки = Ложь;
	Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.АгрегированныйТаможенныйКод Тогда
		ПроверятьНаличиеПолейСоставаКодаМаркировки = Истина;
	КонецЕсли;
	
	СоставКодаМаркировки = СтрокаДанных.СоставКодаМаркировки;
	
	Если ПроверятьНаличиеПолейСоставаКодаМаркировки Тогда
		СоставКодаМаркировки.Свойство("GTIN", СтрокаДанных.GTIN);
		СоставКодаМаркировки.Свойство("EAN",  СтрокаДанных.EAN);
	Иначе
		СтрокаДанных.GTIN = СоставКодаМаркировки.GTIN;
		СтрокаДанных.EAN  = СоставКодаМаркировки.EAN;
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(СтрокаДанных.ВидПродукции)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "ГоденДо")
		И СоставКодаМаркировки.Свойство("ГоденДо") И ЗначениеЗаполнено(СоставКодаМаркировки.ГоденДо) Тогда
		
		СтрокаДанных.ГоденДо         = СоставКодаМаркировки.ГоденДо;
		СтрокаДанных.Скоропортящаяся = СоставКодаМаркировки.Скоропортящаяся;
		
	ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "МРЦ")
		И СоставКодаМаркировки.Свойство("МРЦ") И ЗначениеЗаполнено(СоставКодаМаркировки.МРЦ) Тогда
		
		СтрокаДанных.МРЦ = СоставКодаМаркировки.МРЦ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьХарактеристикиСтрокиДереваПоПодчиненнымСтрокам(СтрокаДерева, СтрокаДанных)
	
	Если СтрокаДерева.Строки.Количество() = 0 Тогда
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		Иначе
			// Групповая упаковка - всегда монотоварная.
			// Логистическая упаковка без вложений - с большой вероятностью является монотоварной.
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		КонецЕсли;
		
		Если СтрокаДерева.Номенклатура = Неопределено Тогда
			СтрокаДерева.Номенклатура = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
		КонецЕсли;
		
		Если СтрокаДерева.Характеристика = Неопределено Тогда
			СтрокаДерева.Характеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
		КонецЕсли;
		
		Если СтрокаДерева.Серия = Неопределено Тогда
			СтрокаДерева.Серия = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
		КонецЕсли;
		
	Иначе
		
		ПроверятьНоменклатуру   = Истина;
		ПроверятьХарактеристику = Истина;
		ПроверятьСерию          = Истина;
		
		СтрокаДерева.Номенклатура   = Неопределено;
		СтрокаДерева.Характеристика = Неопределено;
		СтрокаДерева.Серия          = Неопределено;
		
		СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		
		Для Каждого Строка Из СтрокаДерева.Строки Цикл
			
			Если ПроверятьНоменклатуру Тогда
				Если СтрокаДерева.Номенклатура = Неопределено Тогда
					СтрокаДерева.Номенклатура = Строка.Номенклатура;
				ИначеЕсли СтрокаДерева.Номенклатура <> Строка.Номенклатура Тогда
					СтрокаДерева.Номенклатура   = Неопределено;
					СтрокаДерева.Характеристика = Неопределено;
					СтрокаДерева.Серия          = Неопределено;
					ПроверятьНоменклатуру   = Ложь;
					ПроверятьХарактеристику = Ложь;
					ПроверятьСерию          = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверятьХарактеристику Тогда
				Если СтрокаДерева.Характеристика = Неопределено Тогда
					СтрокаДерева.Характеристика = Строка.Характеристика;
				ИначеЕсли СтрокаДерева.Характеристика <> Строка.Характеристика Тогда
					СтрокаДерева.Номенклатура   = Неопределено;
					СтрокаДерева.Характеристика = Неопределено;
					СтрокаДерева.Серия          = Неопределено;
					ПроверятьНоменклатуру   = Ложь;
					ПроверятьХарактеристику = Ложь;
					ПроверятьСерию          = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверятьСерию Тогда
				Если СтрокаДерева.Серия = Неопределено Тогда
					СтрокаДерева.Серия = Строка.Серия;
				ИначеЕсли СтрокаДерева.Серия <> Строка.Серия Тогда
					СтрокаДерева.Серия = Неопределено;
					ПроверятьСерию = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПроверятьНоменклатуру Или Не ПроверятьХарактеристику Тогда
				СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
			КонецЕсли;
			
			Если Не ПроверятьНоменклатуру И Не ПроверятьХарактеристику И Не ПроверятьСерию Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаДанных <> Неопределено Тогда
			
			СтрокаДанных.Номенклатура   = СтрокаДерева.Номенклатура;
			СтрокаДанных.Характеристика = СтрокаДерева.Характеристика;
			СтрокаДанных.Серия          = СтрокаДерева.Серия;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДереваПоДаннымТаблицыКодыМаркировок(СтрокаДерева, СтрокаДанных, ПараметрыЗаполнения)
	
	Для Каждого ИмяКолонки Из ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДанных[ИмяКолонки]) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДерева[ИмяКолонки] = СтрокаДанных[ИмяКолонки];
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.Статус) Тогда
		СтрокаДерева.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаДерева.ПредставлениеСтатуса) Тогда
		СтрокаДерева.ПредставлениеСтатуса = Строка(СтрокаДерева.Статус);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет расчет количественных показателей строки дерева.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
Процедура РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева)
	
	Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		СтрокаДерева.КоличествоВложенныхЕдиниц = 1;
	Иначе // Для групповых и логистических упаковок
		// Количество загружено из справочника. Актуально для детализации: Короба с групповыми упаковками
		Если СтрокаДерева.КоличествоВложенныхЕдиниц = 0
			И СтрокаДерева.Строки.Количество() = 0 Тогда
			СтрокаДерева.КоличествоВложенныхЕдиниц = СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		СтрокаДерева.Родитель.КоличествоВложенныхЕдиниц = СтрокаДерева.Родитель.КоличествоВложенныхЕдиниц
		                                                + СтрокаДерева.КоличествоВложенныхЕдиниц;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДеревоПолученноеИзИСМП(Результат, ДанныеПоШтрихкодам, ПараметрыСканирования, ОтключитьОтборПоВидуПродукции = Ложь)
	
	Если ПараметрыСканирования <> Неопределено
		И (ПараметрыСканирования.ОтборПоВидуПродукции И Не ОтключитьОтборПоВидуПродукции)
		И ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 1 Тогда
		ШтрихкодированиеИС.ОтобратьСтрокиДереваИСМППоВидуПродукции(
			Результат.ДеревоУпаковок,
			ПараметрыСканирования.ДопустимыеВидыПродукции[0]);
	КонецЕсли;
	
	// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
	ИнициализироватьМаркированныеТовары = Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева;
	
	ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов(
		Результат.ДеревоУпаковок, ИнициализироватьМаркированныеТовары);
	НормализоватьДанныеДереваУпаковок(
		ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
	
	ДополнительныеКолонки = Новый Структура;
	ПараметрыДерева = ИнтерфейсМОТП.ПараметрыПостроенияДерева(ПараметрыСканирования);
	ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокИСМП(ПараметрыДерева, ДополнительныеКолонки);
	Если ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокДляФормыПроверкиКодовМаркировки(ДополнительныеКолонки);
	КонецЕсли;
	ИменаКолонокДляКопированияСвойств = Новый Массив;
	Для Каждого КлючИЗначение Из ДополнительныеКолонки Цикл
		
		ИмяКолонки = КлючИЗначение.Ключ;
		Если ИмяКолонки = "КоличествоПотребительскихУпаковок" Тогда
			ИмяКолонки = "КоличествоВложенныхЕдиниц";
		КонецЕсли;
		
		ИменаКолонокДляКопированияСвойств.Добавить(ИмяКолонки);
		
	КонецЦикла;
	
	ДобавленныеСтроки = Новый Массив;
	ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ВложенныеШтрихкоды.ДеревоУпаковок,
		ДобавленныеСтроки, ПараметрыСканирования, ИменаКолонокДляКопированияСвойств);
	// Если форма проверки и подбора загружается по данным сервиса из
	// документа приемки или поступления товаров - то нужно поискать сопоставленные товары в штрихкодах упаковок
	ШтрихкодированиеИС.ЗаполнитьДанныеИзвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ДобавленныеСтроки, ПараметрыСканирования);
	ЗаполнитьДанныеКодовМаркировкиПоДаннымУПД(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
	ШтрихкодированиеИС.ЗаполнитьСведенияПоШтрихкодамEAN(ДобавленныеСтроки, ПараметрыСканирования);
	
	ЗаполнитьПредставлениеНоменклатурыОстаточныхШтрихкодов(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
	
	ТребуетсяСопоставление                             = Ложь;
	МассивНеизвестныхEAN                               = Новый Массив;
	СтрокиДанныхДляЗаполненияПредставленияНоменклатуры = Новый Массив;
	Для Каждого СтрокаДанных Из ДобавленныеСтроки Цикл
		
		Если СтрокаДанных.ТребуетсяСопоставление Тогда
			ТребуетсяСопоставление = Истина;
		КонецЕсли;
		
		Если СтрокаДанных.ТребуетсяСопоставление
			И Не ЗначениеЗаполнено(СтрокаДанных.ПредставлениеНоменклатуры) Тогда
			МассивНеизвестныхEAN.Добавить(СтрокаДанных.EAN);
			СтрокиДанныхДляЗаполненияПредставленияНоменклатуры.Добавить(СтрокаДанных);
		КонецЕсли;
		
	КонецЦикла;
	МассивНеизвестныхEAN = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНеизвестныхEAN);
	
	Если ТребуетсяСопоставление И ПараметрыСканирования.СопоставлятьНоменклатуру Тогда
		
		НормализоватьДанныеВложенныхШтрихкодов(
			ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
		ШтрихкодированиеИС.ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(
			ДанныеПоШтрихкодам, ВложенныеШтрихкоды, ПараметрыСканирования);
		
		Возврат;
		
	ИначеЕсли ТребуетсяСопоставление Тогда
		
		ЗаполнитьДобавленныеСтрокиПоНоменклатуреСопоставленнойПоУПД(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ДобавленныеСтроки, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если СтрокиДанныхДляЗаполненияПредставленияНоменклатуры.Количество() > 0 Тогда
		ЗаполнитьПредставлениеНоменклатурыПоДаннымИСМП(
			ДанныеПоШтрихкодам, СтрокиДанныхДляЗаполненияПредставленияНоменклатуры, МассивНеизвестныхEAN);
	КонецЕсли;
	
	НормализоватьДанныеДереваУпаковок(
		ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	СоздатьЭлементыШтрихкодовУпаковокПоДереву(ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
	
	Для Каждого ДанныеКодаМаркировки Из ДобавленныеСтроки Цикл
		Если ДанныеКодаМаркировки.СтрокаДерева <> Неопределено Тогда
			ДанныеКодаМаркировки.ШтрихкодУпаковки = ДанныеКодаМаркировки.СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
	КонецЦикла;
	
	// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
	Если Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева Тогда
		НормализоватьДанныеТаблицыМаркированныеТовары(
			ВложенныеШтрихкоды.ДеревоУпаковок, ВложенныеШтрихкоды.МаркированныеТовары, ПараметрыСканирования);
	КонецЕсли;
	
	ШтрихкодированиеИС.ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(
		ДанныеПоШтрихкодам, ВложенныеШтрихкоды, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено
		И ДобавленныеСтроки.Количество()
		И ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Количество() > ДобавленныеСтроки.Количество() Тогда
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		Для Каждого ДанныеКодаМаркировки Из ДобавленныеСтроки Цикл
			Если ДанныеКодаМаркировки.СтрокаДерева <> Неопределено
				И ДанныеКодаМаркировки.СтрокаДерева.Владелец() <> ДеревоУпаковок Тогда
				ДанныеКодаМаркировки.СтрокаДерева = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВидыПродукцииНоменклатуры = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.ВыгрузитьКолонку("ВидПродукции");
	ДанныеПоШтрихкодам.ВидыПродукции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукцииНоменклатуры);
	
КонецПроцедуры

// Выполняет заполнение представления номенклатуры по данным, полученным из сервиса ИСМП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  СтрокиДанныхДляСопоставления - ТаблицаЗначений, Массив из СтрокаТаблицыЗначений - Описание
//  СписокEAN - Массив из Строка - Список штрихкодов формата EAN.
Процедура ЗаполнитьПредставлениеНоменклатурыПоДаннымИСМП(ДанныеПоШтрихкодам, СтрокиДанныхДляСопоставления, СписокEAN)
	
	РезультатЗапроса = ИнтерфейсИСМП.ДанныеПродукцииПоШтрихкодуEAN(СписокEAN);
	
	Если РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии Тогда
		
		ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии;
		ДанныеПоШтрихкодам.ТекстОшибки                    = РезультатЗапроса.ТекстОшибки;
		ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки) Тогда
		
		Для Каждого СтрокаДанных Из СтрокиДанныхДляСопоставления Цикл
			СтрокаДанных.ПредставлениеНоменклатуры = НСтр("ru = '<Не загружено>'");
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаДанных Из СтрокиДанныхДляСопоставления Цикл
			
			СведенияПоEAN = РезультатЗапроса.ДанныеПродукцииПоШтрихкодуEAN.Получить(СтрокаДанных.EAN);
			Если СведенияПоEAN = Неопределено Тогда
				СтрокаДанных.ПредставлениеНоменклатуры = НСтр("ru = '<Не загружено>'");
			Иначе
				СтрокаДанных.ПредставлениеНоменклатуры = СведенияПоEAN.Наименование;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьКодыМаркировкиНоменклатуреПоДаннымУПД(ДанныеКодовМаркировки, ПараметрыСканирования, ЭлектронныйДокумент = Неопределено, ТипЭД = "УПД") Экспорт
	
	ДанныеНоменклатурыПоДаннымУПД = ДанныеМаркируемойНоменклатурыПоДаннымУПД(ПараметрыСканирования.СсылкаНаОбъект, ЭлектронныйДокумент, ТипЭД);
	
	// Штрихкод в УПД может храниться в не нормализованном виде,
	// в ДанныеКодовМаркировки штрихкод уже нормализован.
	ШтрихкодыУпаковок = Новый Массив;
	Для Каждого КлючЗначение Из ДанныеНоменклатурыПоДаннымУПД Цикл
		ШтрихкодыУпаковок.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	ВидПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции[0];
	Для Каждого ШтрихкодУпаковки Из ШтрихкодыУпаковок Цикл
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(ШтрихкодУпаковки, ВидПродукции);
		Если ДанныеРазбора = Неопределено Или ШтрихкодУпаковки = ДанныеРазбора.НормализованныйКодМаркировки Тогда
			Продолжить;
		КонецЕсли;
		ДанныеНоменклатурыПоДаннымУПД[ДанныеРазбора.НормализованныйКодМаркировки] = ДанныеНоменклатурыПоДаннымУПД[ШтрихкодУпаковки];
	КонецЦикла;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		СведенияПоEAN = ДанныеНоменклатурыПоДаннымУПД.Получить(СтрокаДанных.Штрихкод);
		Если СведенияПоEAN = Неопределено Тогда
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено
				И СтрокаДанных.СтрокаДерева.Родитель <> Неопределено Тогда
				СтрокаДереваПоиска = СтрокаДанных.СтрокаДерева.Родитель;
				Пока СведенияПоEAN = Неопределено Цикл
					СведенияПоEAN = ДанныеНоменклатурыПоДаннымУПД.Получить(СтрокаДереваПоиска.Штрихкод);
					Если СтрокаДереваПоиска.Родитель = Неопределено Тогда
						Прервать;
					Иначе
						СтрокаДереваПоиска = СтрокаДереваПоиска.Родитель;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если СведенияПоEAN = Неопределено Или СведенияПоEAN.МультитоварнаяУпаковка Тогда
				Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
					СтрокаДанных.ПредставлениеНоменклатуры = НСтр("ru = '<Не загружено>'");
				КонецЕсли;
			Иначе
				СтрокаДанных.Номенклатура              = СведенияПоEAN.Номенклатура;
				СтрокаДанных.Характеристика            = СведенияПоEAN.Характеристика;
				СтрокаДанных.ПредставлениеНоменклатуры = Строка(СведенияПоEAN.Номенклатура);
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "НоменклатураСопоставленаПоУПД") Тогда
					СтрокаДанных.НоменклатураСопоставленаПоУПД = Истина;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			СтрокаДанных.Номенклатура              = СведенияПоEAN.Номенклатура;
			СтрокаДанных.Характеристика            = СведенияПоEAN.Характеристика;
			СтрокаДанных.ПредставлениеНоменклатуры = Строка(СведенияПоEAN.Номенклатура);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "НоменклатураСопоставленаПоУПД") Тогда
				СтрокаДанных.НоменклатураСопоставленаПоУПД = Истина;
			КонецЕсли;
			Если СведенияПоEAN.МультитоварнаяУпаковка
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "ТипУпаковки") Тогда
				СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "ВидУпаковки")
				И Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
				И ЗначениеЗаполнено(СведенияПоEAN.ВидУпаковки) Тогда
				СтрокаДанных.ВидУпаковки = СведенияПоEAN.ВидУпаковки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет номенклатуру кодов маркировки по данным УПД
// 
// Параметры:
//  ДанныеКодовМаркировки - Массив, ТаблицаЗначений.
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
Процедура ЗаполнитьДанныеКодовМаркировкиПоДаннымУПД(ДанныеКодовМаркировки, ПараметрыСканирования) Экспорт
	
	СсылкаНаОбъект = ПараметрыСканирования.СсылкаНаОбъект;
	Если ЗначениеЗаполнено(СсылкаНаОбъект)
			И ТипЗнч(СсылкаНаОбъект) <> Тип("ДокументСсылка.ПриемкаТоваровИСМП") Тогда
		ЭтоДокументПриобретения = ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(СсылкаНаОбъект);
		ЭтоАктОРасхождениях     = СверкаКодовМаркировкиИСМПКлиентСервер.ЭтоАктОРасхождениях(СсылкаНаОбъект);
		
		Если ЭтоДокументПриобретения Или ЭтоАктОРасхождениях Тогда
			
			ЭлектронныйДокумент = ОбменСКонтрагентами.СтатусДокументооборота(СсылкаНаОбъект).ЭлектронныйДокумент;
			
			Если ЗначениеЗаполнено(ЭлектронныйДокумент) И ДанныеКодовМаркировки.Количество() > 0 Тогда
				
				Если ЭтоАктОРасхождениях Тогда
					СопоставитьКодыМаркировкиНоменклатуреПоДаннымУПД(
						ДанныеКодовМаркировки,
						ПараметрыСканирования,
						ЭлектронныйДокумент,
						"ТОРГ2");
				Иначе
					СопоставитьКодыМаркировкиНоменклатуреПоДаннымУПД(
						ДанныеКодовМаркировки,
						ПараметрыСканирования,
						ЭлектронныйДокумент);
				КонецЕсли;
			
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДобавленныеСтрокиПоНоменклатуреСопоставленнойПоУПД(ДанныеКодовМаркировки, ДобавленныеСтроки, ПараметрыСканирования) Экспорт
	
	Если ДанныеКодовМаркировки.Количество() = 0
		Или ДобавленныеСтроки.Количество() = 0
		Или ДобавленныеСтроки.Количество() >= ДанныеКодовМаркировки.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = ПараметрыСканирования.СсылкаНаОбъект;
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Или ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПриемкаТоваровИСМП") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоДокументПриобретения = ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(СсылкаНаОбъект);
	Если Не ЭтоДокументПриобретения Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныйДокумент = ОбменСКонтрагентами.СтатусДокументооборота(СсылкаНаОбъект).ЭлектронныйДокумент;
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиЗаполнения = Новый Соответствие;
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		Если СтрокаДанных.НоменклатураСопоставленаПоУПД
			И ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДанных.ТипУпаковки)
			И СтрокаДанных.СтрокаДерева <> Неопределено Тогда
			СтрокиЗаполнения[СтрокаДанных.СтрокаДерева] = СтрокаДанных;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДобавленныеСтроки Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			Или СтрокаДанных.СтрокаДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗаполнения = Неопределено;
		СтрокаПоиска     = СтрокаДанных.СтрокаДерева.Родитель;
		
		ДополнитьСоответствиеУпаковок = Ложь;
		
		Пока СтрокаЗаполнения = Неопределено И СтрокаПоиска <> Неопределено Цикл
			СтрокаЗаполнения = СтрокиЗаполнения[СтрокаПоиска];
			Если СтрокаЗаполнения = Неопределено Тогда
				СтрокаПоиска = СтрокаПоиска.Родитель;
				ДополнитьСоответствиеУпаковок = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаЗаполнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДополнитьСоответствиеУпаковок Тогда
			СтрокиЗаполнения[СтрокаПоиска] = СтрокаЗаполнения;
		КонецЕсли;
		
		СтрокаДанных.Номенклатура                  = СтрокаЗаполнения.Номенклатура;
		СтрокаДанных.Характеристика                = СтрокаЗаполнения.Характеристика;
		СтрокаДанных.ПредставлениеНоменклатуры     = Строка(СтрокаЗаполнения.Номенклатура);
		СтрокаДанных.НоменклатураСопоставленаПоУПД = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьВложенныеШтрихкодыДаннымиМолочнойПродукции(ВложенныеШтрихкоды, ПараметрыСканирования)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыСканирования.ЗаполнятьДанныеВЕТИС Тогда
		ИнтеграцияИСМПВЕТИС.ДополнитьВложенныеШтрихкодыДаннымиВЕТИС(ВложенныеШтрихкоды, ПараметрыСканирования);
	ИначеЕсли ПараметрыСканирования.ЗаполнятьСрокГодности Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковок.ШтрихкодУпаковки,
		|	ШтрихкодыУпаковок.СрокГодности КАК ГоденДо
		|ИЗ
		|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
		|ГДЕ
		|	ШтрихкодыУпаковок.Ссылка = &Ссылка
		|	И ШтрихкодыУпаковок.СрокГодности <> ДАТАВРЕМЯ(1, 1, 1)");
		
		Запрос.УстановитьПараметр("Ссылка", ПараметрыСканирования.СсылкаНаОбъект);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		УпаковкиСоСрокамиГодности = Новый Соответствие;
		
		Пока Выборка.Следующий() Цикл
			
			УпаковкиСоСрокамиГодности.Вставить(Выборка.ШтрихкодУпаковки, Выборка.ГоденДо);
			
		КонецЦикла;
		
		ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
		ДополнитьВложенныеШтрихкодыДереваСрокомГодности(ДеревоУпаковок, УпаковкиСоСрокамиГодности);
		
		// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
		Если Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева Тогда
			МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
			Для Каждого СтрокаТЧ Из МаркированныеТовары Цикл
				СтрокаТЧ.ГоденДо = СтрокаТЧ.СтрокаДерева.ГоденДо;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьВложенныеШтрихкодыДереваСрокомГодности(ДеревоУпаковок, УпаковкиСоСрокамиГодности, Знач ГоденДо = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		СрокГодности = ?(ГоденДо = Неопределено, УпаковкиСоСрокамиГодности[СтрокаДерева.ШтрихкодУпаковки], ГоденДо); 
		
		Если СрокГодности <> Неопределено Тогда
			СтрокаДерева.ГоденДо = СрокГодности;
		КонецЕсли;
		
		ДополнитьВложенныеШтрихкодыДереваСрокомГодности(СтрокаДерева, УпаковкиСоСрокамиГодности, СрокГодности);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

// Формирует вложенные штрихкоды путем получения базовых коллекций "ДеревоУпаковок" и "МаркированныеТовары" и дополнения
// их колонками специфичными для табачной продукции.
//
// Параметры:
//  ДеревоУпаковок - См. ИнициализироватьДеревоУпаковок
//  ИнициализироватьМаркированныеТовары - Булево - Признак инициализации таблицы МаркированныеТовары
// 
// Возвращаемое значение:
//  Структура - (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов)
//   и (См. ШтрихкодированиеИСМП.НормализоватьСвойстваКоллекцииВложенныхШтрихкодов).
Функция ИнициализацияВложенныхШтрихкодов(ДеревоУпаковок = Неопределено, ИнициализироватьМаркированныеТовары = Истина)
	
	ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов(
		ДеревоУпаковок, ИнициализироватьМаркированныеТовары);
	
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.ДеревоУпаковок);
	
	Если ИнициализироватьМаркированныеТовары Тогда
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.МаркированныеТовары);
	КонецЕсли;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Дополняет свойства таблицы значений - "МаркированныеТовары" или дерево значение - "ДеревоУпаковок" колонками,
// специфичными для табачной продукции.
//
// Параметры:
//  Коллекция - ТаблицаЗначений, ДеревоЗначений - "МаркированныеТовары" или "ДеревоУпаковок"
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
Процедура НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(Коллекция, ПараметрыСканирования = Неопределено) Экспорт
	
	Если Коллекция.Колонки.Найти("КоличествоПотребительскихУпаковок") <> Неопределено Тогда
		Коллекция.Колонки.Найти("КоличествоПотребительскихУпаковок").Имя = "КоличествоВложенныхЕдиниц";
	КонецЕсли;
	
	Если ТипЗнч(Коллекция) = Тип("ДеревоЗначений") Тогда
		КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиДереваУпаковок();
	ИначеЕсли ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда
		КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиТаблицыМаркированныеТовары();
	КонецЕсли;
	
	ПараметрыДерева = ИнтерфейсМОТП.ПараметрыПостроенияДерева(ПараметрыСканирования);
	
	ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокИСМП(ПараметрыДерева, КоллекцияОбязательныхКолонок,, "КоличествоВложенныхЕдиниц");
	Если ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда
		Если КоллекцияОбязательныхКолонок.Свойство("ОсобоеСостояние") Тогда
			КоллекцияОбязательныхКолонок.Удалить("ОсобоеСостояние");
		КонецЕсли;
	КонецЕсли;
	
	КоллекцияОбязательныхКолонок.Вставить("Владелец",                        Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("GTIN",                            Метаданные.ОпределяемыеТипы.GTIN.Тип);
	КоллекцияОбязательныхКолонок.Вставить("EAN",                             Метаданные.ОпределяемыеТипы.GTIN.Тип);
	КоллекцияОбязательныхКолонок.Вставить("ПредставлениеСтатуса",            Новый ОписаниеТипов("Строка"));
	
	КоллекцияОбязательныхКолонок.Вставить("НоменклатураСопоставленаПоУПД",   Новый ОписаниеТипов("Булево"));
	
	КоллекцияОбязательныхКолонок.Вставить("ИдентификаторПроисхожденияВЕТИС", Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	КоллекцияОбязательныхКолонок.Вставить("ГоденДо",                         Новый ОписаниеТипов("Дата"));
	КоллекцияОбязательныхКолонок.Вставить("Скоропортящаяся",                 Новый ОписаниеТипов("Булево"));
	
	КоллекцияОбязательныхКолонок.Вставить("ЕстьВПулеКодовМаркировки", Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("ПолныйКодМаркировки",      Новый ОписаниеТипов("Строка"));
	
	ШтрихкодированиеМОТП.НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(Коллекция, КоллекцияОбязательныхКолонок);
	
КонецПроцедуры

// Инициаилизирует структуру, описывающую результат получения вложенных штрихкродов по данным ИС МП.
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Описание:
// * ТекстОшибки - Строка - Ошибка, возникшая в результате запроса данных из ИС МП.
// * ЕстьОшибки - Булево - Истина, если возникла ошибка.
// * ВложенныеШтрихкоды - (См. ИнициализацияВложенныхШтрихкодов).
Функция ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВложенныеШтрихкоды",             Неопределено);
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СборИнформацииПоДаннымУПД

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   УПД учетного документа.
// 
// Параметры:
//  УчетныйДокумент     - ЛюбаяСсылка                       - Документ, формируемый на основании УПД.
//  ЭлектронныйДокумент - ЭлектронныйДокумент, Неопределено - ДокументСсылка.ЭлектронныйДокументИсходящий, 
//               ДокументСсылка.ЭлектронныйДокументВходящий - ссылка на электронный документ. Если в
//               параметре "Документ" передан учетный документ, возвращается актуальный
//               для него электронный. Если передан электронный - возвращается та же ссылка.
//  ТипЭД - Строка - тип проверяемого электронного документа
// Возвращаемое значение:
//  Соответствие - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
Функция ДанныеМаркируемойНоменклатурыПоДаннымУПД(УчетныйДокумент, ЭлектронныйДокумент = Неопределено, ТипЭД = "УПД") Экспорт
	
	Если Не ЗначениеЗаполнено(УчетныйДокумент) Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентами");
	
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		// Получаем электронный документ и присоединенный файл титула продавца
		ЭлектронныйДокумент = МодульОбменСКонтрагентами.СтатусДокументооборота(УчетныйДокумент).ЭлектронныйДокумент;
	КонецЕсли;
	
	Если ЭлектронныйДокумент = Неопределено Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействиеИСМП.ВерсияАПИ() = 1 Тогда
		
		МодульОбменСКонтрагентамиСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиСлужебный");
		СсылкаНаФайл = МодульОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(ЭлектронныйДокумент);
		
		Если СсылкаНаФайл = Неопределено Тогда
			Возврат Новый Соответствие;
		КонецЕсли;
		
		// Сохраняем файл на диск
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(СсылкаНаФайл);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		// Формируем дерево документа
		МодульОбменСКонтрагентамиВнутренний = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиВнутренний");
		ОписаниеЭД = МодульОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ИмяВременногоФайла);
		ДеревоДокумента = ОписаниеЭД.СтрокаОбъекта.ЗначениеРеквизита;
		
		// Заполняем номенклатуру информационной базы в дереве.
		МодульОбменСКонтрагентамиСлужебный.ЗаполнитьНоменклатуруИБВДеревеДокумента(
			ЭлектронныйДокумент, ДеревоДокумента);
		
		ИмяСобытия = НСтр("ru = 'Формирование дерева разбора ЭДО. Удаление временного файла.'");
		
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ДеревоДокумента = МодульОбменСКонтрагентами.ДанныеЭлектронногоДокумента(ЭлектронныйДокумент).ДанныеОтправителя.Содержание;
	КонецЕсли;
	
	Если ТипЭД = "ТОРГ2" Тогда
		Возврат ДанныеМаркируемойНоменклатурыПоДаннымДереваТОРГ2(ДеревоДокумента);
	Иначе
		Возврат ДанныеМаркируемойНоменклатурыПоДаннымДереваУПД(ДеревоДокумента);
	КонецЕсли;
	
КонецФункции

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   дерева, сформированного по УПД.
// 
// Параметры:
//  ДеревоДокумента - ДеревоЗначений - Дерево по данным УПД.
// Возвращаемое значение:
//  Соответствие - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
Функция ДанныеМаркируемойНоменклатурыПоДаннымДереваУПД(ДеревоДокумента)
	
	СоответствиеКодаМаркировкиНоменклатуре = Новый Соответствие;
	СведенияОТоварах = ДеревоДокумента.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Если СведенияОТоварах = Неопределено Тогда
		Возврат СоответствиеКодаМаркировкиНоменклатуре;
	КонецЕсли;
	
	ПутьКИндивидуальнымУпаковкам155 = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КодыИндивидуальныхУпаковок";
	ПутьКИндивидуальнымУпаковкам820 = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки";
	ПутьКНоменклатуре               = "СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ";
	ПутьКХарактеристике             = "СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ";
	
	ПутьКИЗ = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки";
	ПутьТранспортныеУпаковки = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ТранспортныеУпаковки";
	
	ПустаяХарактеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	
	Для Каждого СтрокаТовары Из СведенияОТоварах.Строки Цикл
		
		НоменклатураИБ = СтрокаТовары.Строки.Найти(ПутьКНоменклатуре, "ПолныйПуть", Истина);
		Если НоменклатураИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = НоменклатураИБ.Значение;
		
		ХарактеристикаИБ = СтрокаТовары.Строки.Найти(ПутьКХарактеристике, "ПолныйПуть", Истина);
		Если ХарактеристикаИБ = Неопределено Тогда
			Характеристика = ПустаяХарактеристика;
		Иначе
			Характеристика = ХарактеристикаИБ.Значение;
		КонецЕсли;
		
		ДанныеНоменклатуры = ИнициализацияДанныхНоменклатурыДляУПД();
		ДанныеНоменклатуры.Номенклатура              = Номенклатура;
		ДанныеНоменклатуры.Характеристика            = Характеристика;
		ДанныеНоменклатуры.ПредставлениеНоменклатуры = Строка(Номенклатура);
		
		ИндивидуальныеУпаковки = СтрокаТовары.Строки.Найти(ПутьКИндивидуальнымУпаковкам820, "ПолныйПуть", Истина);
		Если ИндивидуальныеУпаковки = Неопределено Тогда
			
			ИндивидуальныеУпаковки = СтрокаТовары.Строки.Найти(ПутьКИндивидуальнымУпаковкам155, "ПолныйПуть", Истина);
			Если ИндивидуальныеУпаковки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		КИЗ = СтрокаТовары.Строки.Найти(ПутьКИЗ, "ПолныйПуть", Истина);
		Если КИЗ <> Неопределено Тогда
			ДанныеНоменклатуры.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
			ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(
				СоответствиеКодаМаркировкиНоменклатуре, КИЗ, ДанныеНоменклатуры);
		КонецЕсли;
		
		Если ИндивидуальныеУпаковки <> Неопределено Тогда
			ДанныеНоменклатуры.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
			ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(
				СоответствиеКодаМаркировкиНоменклатуре, ИндивидуальныеУпаковки, ДанныеНоменклатуры);
		КонецЕсли;
		
		ТранспортныеУпаковки = СтрокаТовары.Строки.Найти(ПутьТранспортныеУпаковки, "ПолныйПуть", Истина);
		Если ТранспортныеУпаковки <> Неопределено Тогда
			ДанныеНоменклатуры.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая;
			ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(
				СоответствиеКодаМаркировкиНоменклатуре, ТранспортныеУпаковки, ДанныеНоменклатуры);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеКодаМаркировкиНоменклатуре;
	
КонецФункции

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   дерева, сформированного по ТОРГ-2.
// 
// Параметры:
//  ДеревоДокумента - ДеревоЗначений - Дерево по данным ТОРГ-2.
// Возвращаемое значение:
//  Соответствие - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
Функция ДанныеМаркируемойНоменклатурыПоДаннымДереваТОРГ2(ДеревоДокумента)
	
	СоответствиеКодаМаркировкиНоменклатуре = Новый Соответствие;
		
	ПутьСведенияОТоварах = "РезультатыПриемки";
	СведенияОТоварах = ДеревоДокумента.Строки.Найти(ПутьСведенияОТоварах, "ПолныйПуть");
	Если СведенияОТоварах = Неопределено Тогда
		Возврат СоответствиеКодаМаркировкиНоменклатуре;
	КонецЕсли;

	ПутьКНоменклатуре    = "РезультатыПриемки.НомерСтроки.Сопоставление.НоменклатураИБ";
	ПутьКХарактеристике  = "РезультатыПриемки.НомерСтроки.Сопоставление.ХарактеристикаИБ";
	ПутьКУпаковкам = ИнициализироватьЗаполнитьПутьКУпаковкамВидУпаковкиТОРГ2();

	ПустаяХарактеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	
	Для Каждого СтрокаТовары Из СведенияОТоварах.Строки Цикл
		
		НоменклатураИБ = СтрокаТовары.Строки.Найти(ПутьКНоменклатуре, "ПолныйПуть", Истина);
		Если НоменклатураИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = НоменклатураИБ.Значение;
		
		ХарактеристикаИБ = СтрокаТовары.Строки.Найти(ПутьКХарактеристике, "ПолныйПуть", Истина);
		Если ХарактеристикаИБ = Неопределено Тогда
			Характеристика = ПустаяХарактеристика;
		Иначе
			Характеристика = ХарактеристикаИБ.Значение;
		КонецЕсли;
		
		ДанныеНоменклатуры = ИнициализацияДанныхНоменклатурыДляУПД();
		ДанныеНоменклатуры.Номенклатура              = Номенклатура;
		ДанныеНоменклатуры.Характеристика            = Характеристика;
		ДанныеНоменклатуры.ПредставлениеНоменклатуры = Строка(Номенклатура);
		
		Для Каждого ЭлементДанных Из ПутьКУпаковкам Цикл
			УпаковкиДляОбработки = СтрокаТовары.Строки.Найти(ЭлементДанных.Ключ, "ПолныйПуть", Истина);
			Если УпаковкиДляОбработки <> Неопределено Тогда
				ДанныеНоменклатуры.ВидУпаковки = ЭлементДанных.Значение;
				ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(
					СоответствиеКодаМаркировкиНоменклатуре, УпаковкиДляОбработки, ДанныеНоменклатуры);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СоответствиеКодаМаркировкиНоменклатуре;
	
КонецФункции

Процедура ДополнитьСоотвествиеКодовМаркировкиНоменклатуре(СоответствиеКодаМаркировкиНоменклатуре,
														ИндивидуальныеУпаковки,
														ДанныеНоменклатуры)
	
	Для Каждого ИндивидуальнаяУпаковка Из ИндивидуальныеУпаковки.Строки Цикл
		
		Если ИндивидуальнаяУпаковка.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КодМаркировки = ИндивидуальнаяУпаковка.Строки[0].Значение;
		
		Если ПустаяСтрока(КодМаркировки) 
			Или КодМаркировки = "-" Тогда // Товар без маркировки.
			Продолжить;
		КонецЕсли;
		
		НайденноеСоответствие = СоответствиеКодаМаркировкиНоменклатуре.Получить(КодМаркировки);
		
		Если НайденноеСоответствие = Неопределено Тогда
			
			ДанныеНоменклатурыКМ = ИнициализацияДанныхНоменклатурыДляУПД();
			ЗаполнитьЗначенияСвойств(ДанныеНоменклатурыКМ, ДанныеНоменклатуры);
			СоответствиеКодаМаркировкиНоменклатуре.Вставить(КодМаркировки, ДанныеНоменклатурыКМ);
			
		ИначеЕсли НайденноеСоответствие.Номенклатура <> ДанныеНоменклатуры.Номенклатура
			Или НайденноеСоответствие.Характеристика <> ДанныеНоменклатуры.Характеристика Тогда
			
			НайденноеСоответствие.Вставить("МультитоварнаяУпаковка", Истина);
			
			Если НайденноеСоответствие.Характеристика <> ДанныеНоменклатуры.Характеристика Тогда
				НайденноеСоответствие.Характеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
			КонецЕсли;
			Если НайденноеСоответствие.Номенклатура <> ДанныеНоменклатуры.Номенклатура Тогда
				НайденноеСоответствие.Номенклатура   = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
				НайденноеСоответствие.Характеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   УПД учетного документа (или УКД, ТОРГ2). Тип документа определяется в параметре.
// 
// Параметры:
//  УчетныйДокумент - ЛюбаяСсылка - Документ, формируемый на основании УПД.
//  ТипДокумента - Строка - "УПД", "УКД", "ТОРГ2".
// Возвращаемое значение:
//  ТаблицаЗначений - Колонки:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
//   * ЗначениеШтрихкода - Строка - значение штрихкода.
//   * Брак - Булево - используется при загрузке из торг2.
//   * Недостача - Булево - используется при загрузке из торг2.
Функция ДанныеМаркируемойНоменклатурыКодовМаркировкиПоДаннымЭДО(УчетныйДокумент, ТипДокумента = "УПД") Экспорт
	
	Если Не ЗначениеЗаполнено(УчетныйДокумент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентами");
	
	// Получаем электронный документ и присоединенный файл титула продавца
	ЭлектронныйДокумент = МодульОбменСКонтрагентами.СтатусДокументооборота(УчетныйДокумент).ЭлектронныйДокумент;
	
	Если ЭлектронныйДокумент = Неопределено Тогда
		Если ТипДокумента = "ТОРГ2" Тогда
			Возврат ИнициализироватьТаблицуТоваровТОРГ2();
		Иначе
			Возврат ИнициализироватьТаблицуТоваровУПДУКД();
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействиеИСМП.ВерсияАПИ() = 1 Тогда
		
		МодульОбменСКонтрагентамиСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиСлужебный");
		СсылкаНаФайл = МодульОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(ЭлектронныйДокумент);
		Если СсылкаНаФайл = Неопределено Тогда
			Возврат Новый Соответствие;
		КонецЕсли;
		
		// Сохраняем файл на диск
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(СсылкаНаФайл);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		// Формируем дерево документа
		МодульОбменСКонтрагентамиВнутренний = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиВнутренний");
		ОписаниеЭД = МодульОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ИмяВременногоФайла);
		ДеревоДокумента = ОписаниеЭД.СтрокаОбъекта.ЗначениеРеквизита;
		
		// Заполняем номенклатуру информационной базы в дереве.
		МодульОбменСКонтрагентамиСлужебный.ЗаполнитьНоменклатуруИБВДеревеДокумента(
			ЭлектронныйДокумент, ДеревоДокумента);
		
		ИмяСобытия = НСтр("ru = 'Формирование дерева разбора ЭДО. Удаление временного файла.'");
		
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	Иначе
		ДеревоДокумента = МодульОбменСКонтрагентами.ДанныеЭлектронногоДокумента(ЭлектронныйДокумент).ДанныеОтправителя.Содержание;
	КонецЕсли;
	
	Возврат ТаблицаТоваровКодовМаркировкиПоДаннымДереваЭДО(ДеревоДокумента, ТипДокумента);
	
КонецФункции

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   дерева, сформированного по УПД.
// 
// Параметры:
//  ДеревоДокумента - ДеревоЗначений - Дерево по данным УПД.
//  ТипДокумента - Строка - "УПД", "УКД", "ТОРГ2".
// Возвращаемое значение:
//  ТаблицаЗначений - Колонки:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
//   * ЗначениеШтрихкода - Строка - значение штрихкода.
//   * Брак - Булево - используется при загрузке из торг2.
//   * Недостача - Булево - используется при загрузке из торг2.
Функция ТаблицаТоваровКодовМаркировкиПоДаннымДереваЭДО(ДеревоДокумента, ТипЭлектронногоДокумента)
	
	Если ТипЭлектронногоДокумента = "ТОРГ2" Тогда
		ТаблицаТовары = ИнициализироватьТаблицуТоваровТОРГ2();
		
		ПутьКНоменклатуре    = "РезультатыПриемки.НомерСтроки.Сопоставление.НоменклатураИБ";
		ПутьКХарактеристике  = "РезультатыПриемки.НомерСтроки.Сопоставление.ХарактеристикаИБ";
		ПутьСведенияОТоварах = "РезультатыПриемки";
		ПутьКУпаковкам = ИнициализироватьЗаполнитьПутьКУпаковкамТОРГ2();
		
	Иначе
		ТаблицаТовары = ИнициализироватьТаблицуТоваровУПДУКД();
		
		ПутьКНоменклатуре    = "СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ";
		ПутьКХарактеристике  = "СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ";
		ПутьСведенияОТоварах = "СведенияОТоварах";
		Если ТипЭлектронногоДокумента = "УПД" Тогда
			ПутьКУпаковкам = ИнициализироватьЗаполнитьПутьКУпаковкамУПД();
		Иначе //УКД
			ПутьКУпаковкам = ИнициализироватьЗаполнитьПутьКУпаковкамУКД();
		КонецЕсли;
		
	КонецЕсли;
	
	СведенияОТоварах = ДеревоДокумента.Строки.Найти(ПутьСведенияОТоварах, "ПолныйПуть");
	Если СведенияОТоварах = Неопределено Тогда
		Возврат ТаблицаТовары;
	КонецЕсли;
	
	ПустаяХарактеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	
	Для Каждого СтрокаТовары Из СведенияОТоварах.Строки Цикл
		
		НоменклатураИБ = СтрокаТовары.Строки.Найти(ПутьКНоменклатуре, "ПолныйПуть", Истина);
		Если НоменклатураИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = НоменклатураИБ.Значение;
		
		ХарактеристикаИБ = СтрокаТовары.Строки.Найти(ПутьКХарактеристике, "ПолныйПуть", Истина);
		Если ХарактеристикаИБ = Неопределено Тогда
			Характеристика = ПустаяХарактеристика;
		Иначе
			Характеристика = ХарактеристикаИБ.Значение;
		КонецЕсли;
		
		ДанныеНоменклатуры = Новый Структура;
		ДанныеНоменклатуры.Вставить("Номенклатура",              Номенклатура);
		ДанныеНоменклатуры.Вставить("Характеристика",            Характеристика);
		
		Для Каждого ЭлементДанных Из ПутьКУпаковкам Цикл
			УпаковкиДляОбработки = СтрокаТовары.Строки.Найти(ЭлементДанных.Ключ, "ПолныйПуть", Истина);
			Если УпаковкиДляОбработки <> Неопределено Тогда
				КодыМаркировкиНоменклатурыПоДаннымДереваЭДО(
					ДанныеНоменклатуры, УпаковкиДляОбработки, ТаблицаТовары, ЭлементДанных.Значение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаТовары;
	
КонецФункции

Процедура КодыМаркировкиНоменклатурыПоДаннымДереваЭДО(ДанныеНоменклатуры, СтрокиУпаковок, ТаблицаТовары, ИмяКолонки = "")
	
	Для Каждого СтрокаУпаковки Из СтрокиУпаковок.Строки Цикл
		
		Если СтрокаУпаковки.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КодМаркировки = СтрокаУпаковки.Строки[0].Значение;
		
		Если ПустаяСтрока(КодМаркировки)
			Или КодМаркировки = "-" Тогда // Товар без маркировки.
			Продолжить;
		КонецЕсли;
		
		Если ИмяКолонки = "" Тогда
			
			СтрокаТовары = ТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, ДанныеНоменклатуры);
			СтрокаТовары.ЗначениеШтрихкода = КодМаркировки;
			
		Иначе
			
			НайденнаяСтрока = ТаблицаТовары.Найти(КодМаркировки);
			Если НайденнаяСтрока = Неопределено Тогда
				СтрокаТовары = ТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовары, ДанныеНоменклатуры);
				СтрокаТовары.ЗначениеШтрихкода = КодМаркировки;
				СтрокаТовары[ИмяКолонки] = Истина;
			Иначе
				НайденнаяСтрока[ИмяКолонки] = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ИнициализацияНастроекЧтенияДокументовЭДО

Функция ИнициализироватьТаблицуТоваровУПДУКД()
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаТовары.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаТовары.Колонки.Добавить("ЗначениеШтрихкода", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	Возврат ТаблицаТовары;
	
Конецфункции

Функция ИнициализироватьТаблицуТоваровТОРГ2()
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура",      Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаТовары.Колонки.Добавить("Характеристика",    Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаТовары.Колонки.Добавить("ЗначениеШтрихкода", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаТовары.Колонки.Добавить("Брак",              Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Колонки.Добавить("Недостача",         Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаТовары;
	
Конецфункции

Функция ИнициализироватьЗаполнитьПутьКУпаковкамТОРГ2()
	
	ПутьКУпаковкам = Новый Соответствие;
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.ПоФакту.Маркировка.ИндивидуальныеУпаковки", "");
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.ПоФакту.Маркировка.КонтрольныеИдентификационныеЗнаки", "");
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.ПоФакту.Маркировка.ТранспортныеУпаковки", "");
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Брак.Маркировка.ИндивидуальныеУпаковки", "Брак");
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Брак.Маркировка.КонтрольныеИдентификационныеЗнаки", "Брак");
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Брак.Маркировка.ТранспортныеУпаковки", "Брак");
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Недостача.Маркировка.ИндивидуальныеУпаковки", "Недостача");
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Недостача.Маркировка.КонтрольныеИдентификационныеЗнаки", "Недостача");
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Недостача.Маркировка.ТранспортныеУпаковки", "Недостача");
	
	Возврат ПутьКУпаковкам;
	
Конецфункции

Функция ИнициализироватьЗаполнитьПутьКУпаковкамВидУпаковкиТОРГ2()
	
	ПутьКУпаковкам = Новый Соответствие;
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.ПоФакту.Маркировка.ИндивидуальныеУпаковки", Перечисления.ВидыУпаковокИС.Групповая);
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.ПоФакту.Маркировка.КонтрольныеИдентификационныеЗнаки", Перечисления.ВидыУпаковокИС.Потребительская);
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.ПоФакту.Маркировка.ТранспортныеУпаковки", Перечисления.ВидыУпаковокИС.Логистическая);
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Брак.Маркировка.ИндивидуальныеУпаковки", Перечисления.ВидыУпаковокИС.Групповая);
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Брак.Маркировка.КонтрольныеИдентификационныеЗнаки", Перечисления.ВидыУпаковокИС.Потребительская);
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Брак.Маркировка.ТранспортныеУпаковки", Перечисления.ВидыУпаковокИС.Логистическая);
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Недостача.Маркировка.ИндивидуальныеУпаковки", Перечисления.ВидыУпаковокИС.Групповая);
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Недостача.Маркировка.КонтрольныеИдентификационныеЗнаки", Перечисления.ВидыУпаковокИС.Потребительская);
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Недостача.Маркировка.ТранспортныеУпаковки", Перечисления.ВидыУпаковокИС.Логистическая);
	
	Возврат ПутьКУпаковкам;
	
Конецфункции

Функция ИнициализироватьЗаполнитьПутьКУпаковкамУПД()
	
	ПутьКУпаковкам = Новый Соответствие;
	ПутьКУпаковкам.Вставить("СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки","");
	ПутьКУпаковкам.Вставить("СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки","");
	ПутьКУпаковкам.Вставить("СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ТранспортныеУпаковки","");
	
	Возврат ПутьКУпаковкам;
	
Конецфункции

Функция ИнициализироватьЗаполнитьПутьКУпаковкамУКД()
	
	ПутьКУпаковкам = Новый Соответствие;
	ПутьКУпаковкам.Вставить("СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле.ТранспортныеУпаковки","");
	ПутьКУпаковкам.Вставить("СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле.КонтрольныеИдентификационныеЗнаки", "");
	
	Возврат ПутьКУпаковкам;
	
Конецфункции

#КонецОбласти

Функция ИнициализацияДанныхНоменклатурыДляУПД()
	ДанныеНоменклатуры = Новый Структура;
	ДанныеНоменклатуры.Вставить("Номенклатура",              Неопределено);
	ДанныеНоменклатуры.Вставить("Характеристика",            Неопределено);
	ДанныеНоменклатуры.Вставить("ПредставлениеНоменклатуры", "");
	ДанныеНоменклатуры.Вставить("МультитоварнаяУпаковка",    Ложь);
	ДанныеНоменклатуры.Вставить("ВидУпаковки",               Неопределено);
	Возврат ДанныеНоменклатуры;
КонецФункции

#КонецОбласти

#Область ОбработкаКодовМаркировкиДляОтчетаОНанесении

// Выполняет нормализацию значений штрихкодов
// Параметры:
//  ДанныеОтчетаПроизводственнойЛинии - ТаблицаЗначений - Таблица значений штрихкодов упаковок:
//   * ЗначениеШтрихкода - Строка - значение штрихкода
//   * ЗначениеШтрихкодаУпаковки - Строка - значение штрихкода
//   * ФорматBase64 - Булево - Штрихкод закодирован по алгоритму BASE64.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - фильтр по виду продукции.
//  ПараметрыОбработки - Структура - настройки обработки кодов маркировки:
//   * ПроверятьАлфавитКодовМаркировки - Булево
//   * ВосстанавливатьСтруктуруКодаМаркировки - Булево
//   * УпрощеннаяОбработкаКодовМаркировки - Булево
// Возвращаемое значение:
//  Структура:
//   * ОбработанныеДанныеОтчета - См. ИнициализацияСостоянияОбработкиКодовМаркировки
//   * ЕстьОшибки - Булево - Признак наличия ошибки в ОбработанныеДанныеОтчета
//   * ИменаГруппКолонок - Массив из Строка - Имена групп колонок (ЗначениеШтрихкода, ЗначениеШтрихкодаУпаковки)
//   * ГруппыКолонок - Массив из Структура - Содержит строковое представление колонок для ИменаГруппКолонок:
//     ** КодМаркировки - Строка
//     ** НормализованныйКодМаркировки - Строка
//     ** ПолныйКодМаркировки - Строка
//     ** ТипШтрихкода - Строка
//     ** ВидУпаковки - Строка
//     ** EAN - Строка
//     ** GTIN - Строка
//     ** КоличествоВложенныхЕдиниц - Строка
//     ** ТекстОшибки - Строка
Функция ОбработатьКодыМаркировкиДляОтчетаОНанесении(ДанныеОтчетаПроизводственнойЛинии, ВидПродукции, ПараметрыОбработки) Экспорт
	
	ПараметрыНормализации = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	
	ПараметрыРазбора = Новый Структура;
	ПараметрыРазбора.Вставить("ВидПродукции",                    ВидПродукции);
	ПараметрыРазбора.Вставить("НастройкиРазбораКодаМаркировки",  РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(ВидПродукции));
	ПараметрыРазбора.Вставить("ПроверятьАлфавитКодовМаркировки", ПараметрыОбработки.ПроверятьАлфавитКодовМаркировки);
	ПараметрыРазбора.Вставить("КешДанныхРазбора",                Новый Соответствие);
	ПараметрыРазбора.Вставить("ОсновнойШаблонGTIN",              Новый Соответствие);
	ПараметрыРазбора.Вставить("ПараметрыНормализации",           ПараметрыНормализации);
	ПараметрыРазбора.Вставить("ВосстанавливатьСтруктуруКодаМаркировки", ПараметрыОбработки.ВосстанавливатьСтруктуруКодаМаркировки);
	ПараметрыРазбора.Вставить("УпрощеннаяОбработкаКодовМаркировки",     ПараметрыОбработки.УпрощеннаяОбработкаКодовМаркировки);
	
	Если ПараметрыОбработки.УпрощеннаяОбработкаКодовМаркировки Тогда
		ПараметрыРазбора.Вставить("ДопустимыеШаблоныПоХешСуммеСвойствКодаМаркировки", Новый Соответствие);
		ПараметрыРазбора.Вставить("ПараметрыШаблонаПоПолномуХешуШаблонаСУчетомGTIN",  Новый Соответствие);
	КонецЕсли;
	
	ОбработанныеДанныеОтчетаПроизводственнойЛинии = ИнициализацияСостоянияОбработкиКодовМаркировки();
	
	ИменаГруппКолонок = Новый Массив;
	ИменаГруппКолонок.Добавить("ЗначениеШтрихкода");
	ИменаГруппКолонок.Добавить("ЗначениеШтрихкодаУпаковки");
	
	ГруппыКолонок = Новый Массив;
	Для Каждого ИмяГруппыКолонок Из ИменаГруппКолонок Цикл
		
		ИменаКолонок = Новый Структура;
		ИменаКолонок.Вставить("КодМаркировки",                ИмяГруппыКолонок);
		ИменаКолонок.Вставить("НормализованныйКодМаркировки", "Нормализованное" + ИмяГруппыКолонок);
		ИменаКолонок.Вставить("ПолныйКодМаркировки",          "Полное"          + ИмяГруппыКолонок);
		ИменаКолонок.Вставить("ТипШтрихкода",                 ИмяГруппыКолонок + "ТипШтрихкода");
		ИменаКолонок.Вставить("ВидУпаковки",                  ИмяГруппыКолонок + "ВидУпаковки");
		ИменаКолонок.Вставить("EAN",                          ИмяГруппыКолонок + "EAN");
		ИменаКолонок.Вставить("GTIN",                         ИмяГруппыКолонок + "GTIN");
		ИменаКолонок.Вставить("КоличествоВложенныхЕдиниц",    ИмяГруппыКолонок + "КоличествоВложенныхЕдиниц");
		ИменаКолонок.Вставить("ТекстОшибки",                  ИмяГруппыКолонок + "ТекстОшибки");
		
		ГруппыКолонок.Добавить(ИменаКолонок);
		
	КонецЦикла;
	
	ЕстьОшибки = Ложь;
	
	Для Каждого ИсходнаяСтрока Из ДанныеОтчетаПроизводственнойЛинии Цикл
		
		Строка = ОбработанныеДанныеОтчетаПроизводственнойЛинии.Добавить();
		Строка.ИсходнаяСтрока = ИсходнаяСтрока;
		
		Для Каждого ИменаКолонок Из ГруппыКолонок Цикл
			
			ИсходныйКодМаркировки = ИсходнаяСтрока[ИменаКолонок.КодМаркировки];
			
			Если Не ЗначениеЗаполнено(ИсходныйКодМаркировки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИсходнаяСтрока.ФорматBase64 Тогда
				КодМаркировки = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(ИсходныйКодМаркировки);
			Иначе
				КодМаркировки = ИсходныйКодМаркировки;
			КонецЕсли;
			
			Результат = ОбработатьКодМаркировкиДляОтчетаОНанесении(КодМаркировки, ПараметрыРазбора);
			
			Если Результат.Разобран Тогда
				Строка.ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки] = Результат.НормализованныйКодМаркировки;
				Строка[ИменаКолонок.ТипШтрихкода]                                = Результат.ТипШтрихкода;
				Строка[ИменаКолонок.ВидУпаковки]                                 = Результат.ВидУпаковки;
				Строка[ИменаКолонок.EAN]                                         = Результат.EAN;
				Строка[ИменаКолонок.GTIN]                                        = Результат.GTIN;
			КонецЕсли;
			
			Если Результат.ЕстьОшибки Тогда
				
				Строка.ЕстьОшибки = Истина;
				
				ТекстОшибки = Строка.ИсходнаяСтрока.ТекстОшибки;
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС;
				КонецЕсли;
				Строка.ИсходнаяСтрока.ТекстОшибки = ТекстОшибки + ИсходныйКодМаркировки + Символы.ПС + Результат.ТекстОшибки;
				
				Строка[ИменаКолонок.ТекстОшибки] = Результат.ТекстОшибки;
				
				ЕстьОшибки = Истина;
				
				Продолжить;
			КонецЕсли;
			
			Если Результат.МаркируемаяУпаковка Тогда
				Строка[ИменаКолонок.ПолныйКодМаркировки] = Результат.ПолныйКодМаркировки;
			ИначеЕсли Результат.КоличествоВложенныхЕдиниц <> Неопределено Тогда
				Строка[ИменаКолонок.КоличествоВложенныхЕдиниц] = Результат.КоличествоВложенныхЕдиниц;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РезультатОбработкиДанныхОтчета = Новый Структура;
	РезультатОбработкиДанныхОтчета.Вставить("ИменаГруппКолонок",        ИменаГруппКолонок);
	РезультатОбработкиДанныхОтчета.Вставить("ГруппыКолонок",            ГруппыКолонок);
	РезультатОбработкиДанныхОтчета.Вставить("ЕстьОшибки",               ЕстьОшибки);
	РезультатОбработкиДанныхОтчета.Вставить("ОбработанныеДанныеОтчета", ОбработанныеДанныеОтчетаПроизводственнойЛинии);
	
	Возврат РезультатОбработкиДанныхОтчета;
	
КонецФункции

Функция ОбработатьКодМаркировкиДляОтчетаОНанесении(КодМаркировки, ПараметрыРазбора)
	
	Результат = ПараметрыРазбора.КешДанныхРазбора[КодМаркировки];
	
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДлинаКодаМаркировки           = СтрДлина(КодМаркировки);
	СодержитРазделительGS         = НайтиНедопустимыеСимволыXML(КодМаркировки) > 0;
	НачинаетсяСоСкобки            = СтрНачинаетсяС(КодМаркировки, "(");
	ХешСуммаСвойствКодаМаркировки = СтрШаблон("%1%2%3", ДлинаКодаМаркировки, СодержитРазделительGS, НачинаетсяСоСкобки);
	
	Если ПараметрыРазбора.УпрощеннаяОбработкаКодовМаркировки Тогда
		
		Результат = УпрощеннаяОбработкаКодовМаркировки(
			КодМаркировки,
			ПараметрыРазбора,
			ДлинаКодаМаркировки,
			СодержитРазделительGS,
			НачинаетсяСоСкобки,
			ХешСуммаСвойствКодаМаркировки);
		
		Если Результат <> Неопределено Тогда
			
			ПараметрыРазбора.КешДанныхРазбора[КодМаркировки] = Результат;
			
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПримечаниеКРезультатуРазбора = Неопределено;
	ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
		КодМаркировки,
		ПараметрыРазбора.ВидПродукции,
		ПримечаниеКРезультатуРазбора,
		ПараметрыРазбора.НастройкиРазбораКодаМаркировки,
		ПараметрыРазбора.ПроверятьАлфавитКодовМаркировки,
		Истина);
	
	Если ДанныеРазбора = Неопределено Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru ='Не удалось разобрать код маркировки:
			|%1'"),
			ПримечаниеКРезультатуРазбора.ТекстОшибки);
		
		Результат = Новый Структура;
		Результат.Вставить("ЕстьОшибки",  Истина);
		Результат.Вставить("ТекстОшибки", ТекстОшибки);
		Результат.Вставить("Разобран",    Ложь);
		
		ПараметрыРазбора.КешДанныхРазбора[КодМаркировки] = Результат;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки",                   Ложь);
	Результат.Вставить("ТекстОшибки",                  "");
	Результат.Вставить("Разобран",                     Истина);
	Результат.Вставить("ВидУпаковки",                  ДанныеРазбора.ВидУпаковки);
	Результат.Вставить("ТипШтрихкода",                 ДанныеРазбора.ТипШтрихкода);
	Результат.Вставить("НормализованныйКодМаркировки", ДанныеРазбора.НормализованныйКодМаркировки);
	Результат.Вставить("МаркируемаяУпаковка",          Ложь);
	Результат.Вставить("ПолныйКодМаркировки",          "");
	Результат.Вставить("EAN",                          "");
	Результат.Вставить("GTIN",                         "");
	Результат.Вставить("КоличествоВложенныхЕдиниц",    Неопределено);
	
	ПараметрыРазбора.КешДанныхРазбора[КодМаркировки] = Результат;
	
	Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		
		Если ДанныеРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
			И ДанныеРазбора.Детализация.ЭтоНеФормализованныйКодМаркировки Тогда
			
			Результат.EAN                       = ДанныеРазбора.СоставКодаМаркировки.EAN;
			Результат.GTIN                      = ДанныеРазбора.СоставКодаМаркировки.GTIN;
			Результат.КоличествоВложенныхЕдиниц = ДанныеРазбора.СоставКодаМаркировки.КоличествоВложенныхЕдиниц;
			
		КонецЕсли;
		
		Возврат Результат
		
	КонецЕсли;
	
	Если Не (ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		Или ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковка(
			ДанныеРазбора.ВидУпаковки, ДанныеРазбора)) Тогда
		
		// Логистическая упаковка
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.МаркируемаяУпаковка = Истина;
	Результат.EAN                 = ДанныеРазбора.СоставКодаМаркировки.EAN;
	Результат.GTIN                = ДанныеРазбора.СоставКодаМаркировки.GTIN;
	
	ДетализацияРазбора = ДанныеРазбора.Детализация;
	
	Если Не ЗначениеЗаполнено(ДанныеРазбора.Детализация.ШаблонРазбораКодаМаркировки) Тогда
		
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = НСтр("ru ='Не удалось определить шаблон кода маркировки'");
		
		Возврат Результат;
		
	КонецЕсли;
	
	ДанныеШаблонаКМ  = ПараметрыРазбора.НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировки.Найти(ДетализацияРазбора.ШаблонРазбораКодаМаркировки, "Шаблон");
	ЭталоннаяДлинаКМ = ДанныеШаблонаКМ["Длина" + ДетализацияРазбора.ИмяСвойстваПозиции];
	
	Если ЭталоннаяДлинаКМ <> ДлинаКодаМаркировки Тогда
		
		// Код маркировки был модифицирован в методе разбора,
		// для дальнейшей обработки этот код не подходит
		
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = НСтр("ru ='Длина кода маркировки не соответствует длине шаблона'");
		
		Возврат Результат;
		
	КонецЕсли;
	
	ЕстьОшибки        = Ложь;
	СообщенияОбОшибке = Новый Массив;
	
	ВключаетКриптоХвост = ДанныеРазбора.СоставКодаМаркировки.ВключаетКриптоХвост;
	
	ВосстановитьСтруктуруКодаМаркировки  = Ложь;
	ПолныйКодМаркировки                  = Неопределено;
	ШаблонКодаМаркировкиНеПоддерживается = Ложь;
	Если ВключаетКриптоХвост Тогда
		Если ДетализацияРазбора.ВключаетИдентификаторыПрименения Тогда
			Если СодержитРазделительGS Тогда
				ПолныйКодМаркировки = КодМаркировки;
			Иначе
				ВосстановитьСтруктуруКодаМаркировки  = ПараметрыРазбора.ВосстанавливатьСтруктуруКодаМаркировки;
				ШаблонКодаМаркировкиНеПоддерживается = Не ПараметрыРазбора.ВосстанавливатьСтруктуруКодаМаркировки;
			КонецЕсли;
		Иначе
			ПолныйКодМаркировки = КодМаркировки;
		КонецЕсли;
	КонецЕсли;
	
	Если ШаблонКодаМаркировкиНеПоддерживается Тогда
		// Нельзя восстанавливать GS в коде маркировки
		ЕстьОшибки = Истина;
		СообщенияОбОшибке.Добавить(
			НСтр("ru ='Формат кода маркировки некорректный'"));
	КонецЕсли;
	
	ЗначениеИдентификатораGTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
	
	ПолныйХешШаблонаСУчетомGTIN = СтрШаблон("%1%2%3",
		ЗначениеИдентификатораGTIN,
		ХешСуммаСвойствКодаМаркировки, //ДлинаКодаМаркировки, СодержитРазделительGS, НачинаетсяСоСкобки
		ДетализацияРазбора.ШаблонРазбораКодаМаркировки);
	
	Если ПараметрыРазбора.ОсновнойШаблонGTIN[ЗначениеИдентификатораGTIN] = Неопределено Тогда
		
		ПараметрыРазбора.ОсновнойШаблонGTIN[ЗначениеИдентификатораGTIN] = ПолныйХешШаблонаСУчетомGTIN;
		
	ИначеЕсли ПараметрыРазбора.ОсновнойШаблонGTIN[ЗначениеИдентификатораGTIN] <> ПолныйХешШаблонаСУчетомGTIN Тогда
		
		ЕстьОшибки = Истина;
		СообщенияОбОшибке.Добавить(
			НСтр("ru ='Шаблон кода маркировки отличается от основного'"));
		
	КонецЕсли;
	
	Если ПараметрыРазбора.УпрощеннаяОбработкаКодовМаркировки Тогда
		
		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ДлинаКодаМаркировки",              ДлинаКодаМаркировки);
		ПараметрыШаблона.Вставить("СодержитРазделительGS",            СодержитРазделительGS);
		ПараметрыШаблона.Вставить("НачинаетсяСоСкобки",               НачинаетсяСоСкобки);
		ПараметрыШаблона.Вставить("ШаблонРазбораКодаМаркировки",      ДетализацияРазбора.ШаблонРазбораКодаМаркировки);
		ПараметрыШаблона.Вставить("ВключаетИдентификаторыПрименения", ДанныеРазбора.СоставКодаМаркировки.ВключаетИдентификаторыПрименения);
		ПараметрыШаблона.Вставить("ВключаетКриптоХвост",              ВключаетКриптоХвост);
		ПараметрыШаблона.Вставить("ВидУпаковки",                      ДанныеРазбора.ВидУпаковки);
		ПараметрыШаблона.Вставить("ТипШтрихкода",                     ДанныеРазбора.ТипШтрихкода);
		
		Если ПараметрыРазбора.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
			
			ВключатьМРЦ = ПараметрыРазбора.ПараметрыНормализации.ВключатьМРЦ И ДанныеРазбора.СоставКодаМаркировки.ВключаетМРЦ;
			
			ПараметрыШаблона.Вставить("ВключатьМРЦ", ВключатьМРЦ);
			
		ИначеЕсли ПараметрыРазбора.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
			
			ВключатьСрокГодности = ПараметрыРазбора.ПараметрыНормализации.ВключатьСрокГодности
				И ДанныеРазбора.СоставКодаМаркировки.Свойство("ГоденДо")
				И ЗначениеЗаполнено(ДанныеРазбора.СоставКодаМаркировки.ГоденДо);
			
			Скоропортящаяся = ?(ВключатьСрокГодности, ДанныеРазбора.СоставКодаМаркировки.Скоропортящаяся, Ложь);
			
			ПараметрыШаблона.Вставить("ВключатьСрокГодности", ВключатьСрокГодности);
			ПараметрыШаблона.Вставить("Скоропортящаяся",      Скоропортящаяся);
			
		КонецЕсли;
		
		ПараметрыШаблона.Вставить("ВосстановитьСтруктуруКодаМаркировки",  ВосстановитьСтруктуруКодаМаркировки);
		ПараметрыШаблона.Вставить("КодМаркировкиСоответствуетПолному",    (ПолныйКодМаркировки <> Неопределено));
		ПараметрыШаблона.Вставить("ШаблонКодаМаркировкиНеПоддерживается", ШаблонКодаМаркировкиНеПоддерживается);
		
		ПараметрыРазбора.ПараметрыШаблонаПоПолномуХешуШаблонаСУчетомGTIN[ПолныйХешШаблонаСУчетомGTIN] = ПараметрыШаблона;
		
		ДобавитьШаблон    = Истина;
		ДопустимыеШаблоны = ПараметрыРазбора.ДопустимыеШаблоныПоХешСуммеСвойствКодаМаркировки[ХешСуммаСвойствКодаМаркировки];
		Если ДопустимыеШаблоны = Неопределено Тогда
			ДопустимыеШаблоны = Новый Массив;
			ПараметрыРазбора.ДопустимыеШаблоныПоХешСуммеСвойствКодаМаркировки[ХешСуммаСвойствКодаМаркировки] = ДопустимыеШаблоны;
		Иначе
			Для Каждого Строка Из ДопустимыеШаблоны Цикл
				Если Строка.ШаблонРазбораКодаМаркировки = ДетализацияРазбора.ШаблонРазбораКодаМаркировки Тогда
					ДобавитьШаблон = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ДобавитьШаблон Тогда
			ДопустимыеШаблоны.Добавить(ПараметрыШаблона);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВосстановитьСтруктуруКодаМаркировки Тогда
		
		ПолныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПолныйКодМаркировкиИзЗначенийЭлементов(
			ДетализацияРазбора.ЗначенияЭлементовКодаМаркировки,
			ДетализацияРазбора.ОписаниеЭлементовКодаМаркировки,
			ПараметрыРазбора.НастройкиРазбораКодаМаркировки.ИдентификаторыПримененияСРазделителемGS);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолныйКодМаркировки) Тогда
		Результат.ПолныйКодМаркировки = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ПолныйКодМаркировки);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = СтрСоединить(СообщенияОбОшибке, Символы.ПС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УпрощеннаяОбработкаКодовМаркировки(КодМаркировки, ПараметрыРазбора, ДлинаКодаМаркировки, СодержитРазделительGS, НачинаетсяСоСкобки, ХешСуммаСвойствКодаМаркировки)
	
	ДопустимыеШаблоны = ПараметрыРазбора.ДопустимыеШаблоныПоХешСуммеСвойствКодаМаркировки[ХешСуммаСвойствКодаМаркировки];
	
	Если ДопустимыеШаблоны = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ПараметрыШаблона Из ДопустимыеШаблоны Цикл
		
		ПараметрыОписанияКодаМаркировки = ПараметрыРазбора.НастройкиРазбораКодаМаркировки.ШаблоныИОписанияВидовПродукции[ПараметрыШаблона.ШаблонРазбораКодаМаркировки];
		
		ИмяСвойстваПозицииЗначения = "ПозицияЗначения";
		
		Если ПараметрыОписанияКодаМаркировки.ВключаетИдентификаторыПрименения Тогда // Содержит идентификаторы применения
			
			ИмяСвойстваПозиции = "";
			Если НачинаетсяСоСкобки Тогда
				ИмяСвойстваПозиции = "СоСкобкой";
			ИначеЕсли СодержитРазделительGS Тогда
				ИмяСвойстваПозиции = "СРазделителемGS";
			КонецЕсли;
			
			ПозицииИдентификаторовКорректны  = Истина;
			ИмяСвойстваПозицииИдентификатора = "ПозицияИдентификатора"    + ИмяСвойстваПозиции;
			ИмяСвойстваПозицииЗначения       = ИмяСвойстваПозицииЗначения + ИмяСвойстваПозиции;
			
			ТекущийИндекс = ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки.Количество() - 1;
			Пока ТекущийИндекс >= 0 Цикл
				
				ОписаниеЭлементаКМ        = ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки[ТекущийИндекс];
				ОписаниеПозицииЭлементаКМ = ПараметрыОписанияКодаМаркировки.ПозицииЭлементовКодаМаркировки[ОписаниеЭлементаКМ.Имя];
				
				ПозицияИдентификатора = ОписаниеПозицииЭлементаКМ[ИмяСвойстваПозицииИдентификатора];
				ДлинаИдентификатора   = ОписаниеПозицииЭлементаКМ.ДлинаИдентификатора;
				Идентификатор         = ОписаниеЭлементаКМ.Код;
				
				Если Идентификатор <> Сред(КодМаркировки, ПозицияИдентификатора, ДлинаИдентификатора) Тогда
					ПозицииИдентификаторовКорректны = Ложь;
					Прервать;
				КонецЕсли;
				
				ТекущийИндекс = ТекущийИндекс - 1;
				
			КонецЦикла;
			
			Если Не ПозицииИдентификаторовКорректны Тогда
				Продолжить; // Переходим к следующему шаблону
			КонецЕсли;
			
		КонецЕсли;
		
		ЗначенияЭлементовКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПолучитьЭлементыКодаМаркировкиПоПозицииВШаблоне(
			КодМаркировки, ПараметрыОписанияКодаМаркировки.ПозицииЭлементовКодаМаркировки, ИмяСвойстваПозицииЗначения, "ДлинаЗначения");
		
		ЗначениеИдентификатораGTIN = ЗначенияЭлементовКМ["GTIN"];
		Если ПараметрыРазбора.ОсновнойШаблонGTIN[ЗначениеИдентификатораGTIN] = Неопределено Тогда
			Если РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ЭтоGTIN(ЗначениеИдентификатораGTIN) Тогда
				// Отправляем на полный разбор
				Прервать;
			Иначе
				 // Переходим к следующему шаблону
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРазбора.ПроверятьАлфавитКодовМаркировки Тогда
			
			ЕстьОшибки = Ложь;
			
			Для Каждого ОписаниеЭлементаКМ Из ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки Цикл
				
				Если ОписаниеЭлементаКМ.Имя = "GTIN" Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОписаниеЭлементаКМ.Алфавит)
					И Не ШтрихкодированиеИСКлиентСервер.КодСоответствуетАлфавиту(ЗначенияЭлементовКМ[ОписаниеЭлементаКМ.Имя], ОписаниеЭлементаКМ.Алфавит) Тогда
					ЕстьОшибки = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьОшибки Тогда
				// Переходим к следующему шаблону
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ПолныйХешШаблонаСУчетомGTIN = СтрШаблон("%1%2%3",
			ЗначениеИдентификатораGTIN,
			ХешСуммаСвойствКодаМаркировки,
			ПараметрыШаблона.ШаблонРазбораКодаМаркировки);
		
		Если ПараметрыРазбора.ПараметрыШаблонаПоПолномуХешуШаблонаСУчетомGTIN[ПолныйХешШаблонаСУчетомGTIN] = Неопределено Тогда
			// Отправляем на полный разбор
			Прервать;
		КонецЕсли;
		
		НормализованныйКодМаркировки = НормализоватьКодМаркировкиПоУпрощенномуРазбору(
			ЗначенияЭлементовКМ,
			ПараметрыРазбора.ВидПродукции,
			ПараметрыОписанияКодаМаркировки,
			ПараметрыРазбора.ПараметрыНормализации,
			ПараметрыШаблона);
		
		ВосстановитьСтруктуруКодаМаркировки  = ПараметрыШаблона.ВосстановитьСтруктуруКодаМаркировки;
		ПолныйКодМаркировки                  = Неопределено;
		ШаблонКодаМаркировкиНеПоддерживается = ПараметрыШаблона.ШаблонКодаМаркировкиНеПоддерживается;
		Если ПараметрыШаблона.КодМаркировкиСоответствуетПолному Тогда
			ПолныйКодМаркировки = КодМаркировки;
		КонецЕсли;
		
		Если ВосстановитьСтруктуруКодаМаркировки Тогда
			
			ПолныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПолныйКодМаркировкиИзЗначенийЭлементов(
				ЗначенияЭлементовКМ,
				ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки,
				ПараметрыРазбора.НастройкиРазбораКодаМаркировки.ИдентификаторыПримененияСРазделителемGS);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПолныйКодМаркировки) Тогда
			ПолныйКодМаркировки = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ПолныйКодМаркировки);
		КонецЕсли;
		
		ЗначениеEAN = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(ЗначениеИдентификатораGTIN);
		
		Результат = Новый Структура;
		Результат.Вставить("ЕстьОшибки",                   Ложь);
		Результат.Вставить("ТекстОшибки",                  "");
		Результат.Вставить("Разобран",                     Истина);
		Результат.Вставить("ВидУпаковки",                  ПараметрыШаблона.ВидУпаковки);
		Результат.Вставить("ТипШтрихкода",                 ПараметрыШаблона.ТипШтрихкода);
		Результат.Вставить("НормализованныйКодМаркировки", НормализованныйКодМаркировки);
		Результат.Вставить("МаркируемаяУпаковка",          Истина);
		Результат.Вставить("ПолныйКодМаркировки",          ПолныйКодМаркировки);
		Результат.Вставить("EAN",                          ЗначениеEAN);
		Результат.Вставить("GTIN",                         ЗначениеИдентификатораGTIN);
		Результат.Вставить("КоличествоВложенныхЕдиниц",    Неопределено);
		
		Если ШаблонКодаМаркировкиНеПоддерживается Тогда
			// Нельзя восстанавливать GS в коде маркировки
			Результат.ЕстьОшибки  = Истина;
			Результат.ТекстОшибки = НСтр("ru ='Формат кода маркировки некорректный'");
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НормализоватьКодМаркировкиПоУпрощенномуРазбору(ЗначенияЭлементовКМ, ВидПродукции, ПараметрыОписанияКодаМаркировки, ПараметрыНормализации, ПараметрыШаблона)
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		
		Если ПараметрыОписанияКодаМаркировки.ВключаетИдентификаторыПрименения Тогда
			
			Если ПараметрыШаблона.ВключатьМРЦ Тогда
				
				Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
					
					Возврат СтрШаблон("(01)%1(21)%2(8005)%3",
						ЗначенияЭлементовКМ["GTIN"],
						ЗначенияЭлементовКМ["СерийныйНомер"],
						ЗначенияЭлементовКМ["МРЦСтрокой"]);
					
				Иначе
					
					Возврат СтрШаблон("01%(1)21%(2)8005%3",
						ЗначенияЭлементовКМ["GTIN"],
						ЗначенияЭлементовКМ["СерийныйНомер"],
						ЗначенияЭлементовКМ["МРЦСтрокой"]);
					
				КонецЕсли;
				
			Иначе
				
				Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
					
					Возврат СтрШаблон("(01)%1(21)%2",
						ЗначенияЭлементовКМ["GTIN"],
						ЗначенияЭлементовКМ["СерийныйНомер"]);
					
				Иначе
					
					Возврат СтрШаблон("01%(1)21%2",
						ЗначенияЭлементовКМ["GTIN"],
						ЗначенияЭлементовКМ["СерийныйНомер"]);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыШаблона.ВключатьМРЦ Тогда
				
				Возврат СтрШаблон("%1%2%3",
					ЗначенияЭлементовКМ["GTIN"],
					ЗначенияЭлементовКМ["СерийныйНомер"],
					ЗначенияЭлементовКМ["МРЦСтрокой"]);
				
			Иначе
				
				Возврат СтрШаблон("%1%2",
					ЗначенияЭлементовКМ["GTIN"],
					ЗначенияЭлементовКМ["СерийныйНомер"]);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
		
		Если ПараметрыОписанияКодаМаркировки.ВключаетИдентификаторыПрименения Тогда
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				
				Возврат СтрШаблон("(01)%1(21)%2",
					ЗначенияЭлементовКМ["GTIN"],
					ЗначенияЭлементовКМ["СерийныйНомер"]);
				
			Иначе
				
				Возврат СтрШаблон("01%(1)21%2",
					ЗначенияЭлементовКМ["GTIN"],
					ЗначенияЭлементовКМ["СерийныйНомер"]);
				
			КонецЕсли;
			
		Иначе
			
			Возврат СтрШаблон("%1%2",
				ЗначенияЭлементовКМ["GTIN"],
				ЗначенияЭлементовКМ["СерийныйНомер"]);
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода Тогда
		
		Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				
				Возврат СтрШаблон("(01)%1(21)%2",
					ЗначенияЭлементовКМ["GTIN"],
					ЗначенияЭлементовКМ["СерийныйНомер"]);
				
		Иначе
			
			Возврат СтрШаблон("01%(1)21%2",
				ЗначенияЭлементовКМ["GTIN"],
				ЗначенияЭлементовКМ["СерийныйНомер"]);
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		
		Если ПараметрыШаблона.ВключатьСрокГодности Тогда
			
			Если ПараметрыШаблона.Скоропортящаяся Тогда
				КодЭлементаСрокГодности = "7003";
				ФорматДаты  = "ДФ=yyMMddHHmm;"; // Формат: YYMMDDHHMM
			Иначе
				КодЭлементаСрокГодности = "17";
				ФорматДаты  = "ДФ=yyMMdd;"; // Формат: YYMMDD
			КонецЕсли;
			
			ЗначениеЭлементаСрокГодности = Формат(ЗначенияЭлементовКМ["ГоденДо"], ФорматДаты);
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				
				Возврат СтрШаблон("(01)%1(21)%2(%3)%4",
					ЗначенияЭлементовКМ["GTIN"],
					ЗначенияЭлементовКМ["СерийныйНомер"],
					КодЭлементаСрокГодности,
					ЗначениеЭлементаСрокГодности);
				
			Иначе
				
				Возврат СтрШаблон("01%(1)21%2%3%4",
					ЗначенияЭлементовКМ["GTIN"],
					ЗначенияЭлементовКМ["СерийныйНомер"],
					КодЭлементаСрокГодности,
					ЗначениеЭлементаСрокГодности);
				
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				
				Возврат СтрШаблон("(01)%1(21)%2",
					ЗначенияЭлементовКМ["GTIN"],
					ЗначенияЭлементовКМ["СерийныйНомер"]);
				
			Иначе
				
				Возврат СтрШаблон("01%(1)21%2",
					ЗначенияЭлементовКМ["GTIN"],
					ЗначенияЭлементовКМ["СерийныйНомер"]);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
		
		Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
			
			Возврат СтрШаблон("(01)%1(21)%2",
				ЗначенияЭлементовКМ["GTIN"],
				ЗначенияЭлементовКМ["СерийныйНомер"]);
			
		Иначе
			
			Возврат СтрШаблон("01%(1)21%2",
				ЗначенияЭлементовКМ["GTIN"],
				ЗначенияЭлементовКМ["СерийныйНомер"]);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ИнициализацияСостоянияОбработкиКодовМаркировки()
	
	ДанныеШтрихкодов = Новый ТаблицаЗначений;
	ДанныеШтрихкодов.Колонки.Добавить("ИсходнаяСтрока");
	ДанныеШтрихкодов.Колонки.Добавить("ЕстьОшибки", Новый ОписаниеТипов("Булево"));
	
	ДанныеШтрихкодов.Колонки.Добавить("ПолноеЗначениеШтрихкода",       Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаТипШтрихкода", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаВидУпаковки",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаТекстОшибки",  Новый ОписаниеТипов("Строка"));
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаEAN",          Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаGTIN",         Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаКоличествоВложенныхЕдиниц", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	
	ДанныеШтрихкодов.Колонки.Добавить("ПолноеЗначениеШтрихкодаУпаковки",       Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаУпаковкиТипШтрихкода", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаУпаковкиВидУпаковки",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаУпаковкиТекстОшибки",  Новый ОписаниеТипов("Строка"));
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаУпаковкиEAN",          Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаУпаковкиGTIN",         Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаУпаковкиКоличествоВложенныхЕдиниц", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	
	Возврат ДанныеШтрихкодов;
	
КонецФункции

#КонецОбласти

#КонецОбласти
