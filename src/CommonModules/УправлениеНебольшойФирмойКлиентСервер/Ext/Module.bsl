
// Получает номер документа без лидирующих нулей. Используется в служебных механизмах, 
//  где номер документа должен отличаться от номера на печать.
//
// Параметры:
//    НомерОбъекта - Строка - номер или код объекта, который преобразуется для вывода на печать.
//    УдалитьПрефиксИнформационнойБазы - Булево - признак удаления префикса информационной базы.
//    УдалитьПользовательскийПрефикс - Булево - признак удаления пользовательского префикса.
//
// Возвращаемое значение:
//     Строка - Номер на печать.
//
Функция НомерДокументаБезЛидирующихНулей(Знач НомерОбъекта, УдалитьПрефиксИнформационнойБазы = Истина, УдалитьПользовательскийПрефикс = Истина) Экспорт
	
	// Удаляем пользовательские префиксы из номера объекта.
	Если УдалитьПользовательскийПрефикс Тогда
		
		НомерОбъекта = ПрефиксацияОбъектовКлиентСервер.УдалитьПользовательскиеПрефиксыИзНомераОбъекта(НомерОбъекта);
		
	КонецЕсли;
	
	// Удаляем лидирующие нули из номера объекта.
	НомерОбъекта = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(НомерОбъекта);
	
	// Удаляем префикс организации и префикс информационной базы из номера объекта.
	НомерОбъекта = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(НомерОбъекта, Истина, УдалитьПрефиксИнформационнойБазы);
	
	Возврат НомерОбъекта;
	
КонецФункции // НомерДокументаБезЛидирующихНулей()

///////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВЗАИМОДЕЙСТВИЯМИ

// Формирует структуру полей контактной информации типа Телефон или МобильныйТелефон по представлению телефона
//
// Параметры
//  Представление  - Строка - строковая информация с номером телефона
//
// Возвращаемое значение:
//   Структура   - сформированная структура
//
Функция ПреобразоватьНомерДляОтправкиSMS(знач Номер) Экспорт
	
	Результат = Новый Структура("НомерКорректен, НомерОтправки, СообщениеОбОшибке");
	
	// Очистка пользовательских разделителей
	ЗаменяемыеСимволы = "()- ";
	Для НомерСимвола = 1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		Номер = СтрЗаменить(Номер, Сред(ЗаменяемыеСимволы, НомерСимвола, 1), "");
	КонецЦикла;
	
	// Телефонный код России 7 (вызов внутри страны начинается на 8), коды сотовых операторов начинаются на 9.
	Если Лев(Номер, 2) = "89" Тогда
		Номер = Сред(Номер, 2);
	ИначеЕсли Лев(Номер, 3) = "+79" Тогда
		Номер = Сред(Номер, 3);
	Иначе
		Результат.НомерКорректен = Ложь;
		Результат.СообщениеОбОшибке = НСтр("ru = 'Российские номера телефонов должны начинаться на +7 или 8, коды сотовых операторов должны начинаться на 9.'");
		Возврат Результат;
	КонецЕсли;
	
	// Телефонные номера России десятизначные
	Если СтрДлина(Номер) = 10
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер) Тогда
		
		Результат.НомерОтправки = "+7" + Номер;
		Результат.НомерКорректен = Истина;
	Иначе
		Результат.НомерКорректен = Ложь;
		Результат.СообщениеОбОшибке = НСтр("ru='Российские номера телефонов должны содержать 10 цифр.'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует представление периода события
// Используется в отчете "Календарь событий"
//
Функция ПредставлениеПериодаСобытия(Начало, Окончание) Экспорт
	
	НачалоСобытия =		Формат(Начало,		"ДФ='ддд дд МММ ЧЧ:мм'");
	ОкончаниеСобытия =	Формат(Окончание,	"ДФ='ддд дд МММ ЧЧ:мм'");
	
	Возврат НачалоСобытия + Символы.ПС + ОкончаниеСобытия;
	
КонецФункции

// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИНАМИЧЕСКИМИ СПИСКАМИ

// Добавление группы отбора
// Параметры:
//  КоллекцияЭлементов - контейнер с элементами и группами отбора, например
//                      Список.Отбор.Элементы или группа в отборе.
//  ТипГруппы - ТипГруппыЭлементовОтбораКомпоновкиДанных - тип группы.
//  Представление строка - представление группы.
//
Функция СоздатьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	
	ГруппаЭлементовОтбора = НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Иначе
		ГруппаЭлементовОтбора.Элементы.Очистить();
	КонецЕсли;
	
	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции

// Процедура изменения элемента отбора в группе элементов отбора.
//
Процедура ИзменитьЭлементОтбораГруппыСписка(Группа, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление)
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ЭлементОтбора.Представление = Представление Тогда
			ВозвращаемоеЗначение = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции

Процедура УстановитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено)
	
	ЭлементОтбора = КоллекцияЭлементов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры

Процедура УдалитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			КоллекцияЭлементов.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Процедура устанавливает отбор у динамического списка на равенство.
//
Процедура УстановитьОтборУДинамическогоСпискаНаРавенство(Отбор, ЛевоеЗначение, ПравоеЗначение) Экспорт
	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение	 = ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения	 = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	ЭлементОтбора.Использование  = Истина;
	
КонецПроцедуры // УстановитьОтборДляДинамическогоСписка()

// Удаляет элемент отбора динамического списка
//
// Параметры:
//  Список  - обрабатываемый динамический список,
//  ИмяПоля - имя поля компоновки, отбор по которому нужно удалить
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	НаборЭлементов = Список.КомпоновщикНастроек.Настройки.Отбор;
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(НаборЭлементов,ИмяПоля);
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Изменяет элемент отбора динамического списка
//
// Параметры:
//  Список         - обрабатываемый динамический список,
//  ИмяПоля        - имя поля компоновки, отбор по которому нужно установить,
//  ВидСравнения   - вид сравнения отбора, по умолчанию - Равно,
//  ПравоеЗначение - значение отбора,
//  Установить     - признак необходимости установить отбор
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено, ОтборПоПериоду = Ложь, БыстрыйДоступ = Ложь) Экспорт
	
	НаборЭлементов = Список.КомпоновщикНастроек.Настройки.Отбор;
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(НаборЭлементов,ИмяПоля,,ПравоеЗначение,ВидСравнения,Установить);
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

// Получает значения параметров из строки.
// По аналогии с СтроковыеФункцииКлиентСервер.ЗапуститьВыполнениеВФоне() БСП 2.2.5. Добавлен параметр "Разделитель".
//
// Параметры:
//  СтрокаПараметров - Строка - строка, содержащая параметры, каждый из которых представляет собой
//                              фрагмент вида <Имя параметра>=<Значение>, где:
//                                Имя параметра - имя параметра; 
//                                Значение - его значение. 
//                              Фрагменты отделяются друг от друга символами ';'.
//                              Если значение содержит пробельные символы, то оно должно быть заключено в двойные
//                              кавычки (").
//                              Например:
//                               "File=""c:\InfoBases\Trade""; Usr=""Director"";"
//
// Возвращаемое значение:
//  Структура - структура параметров, где ключ - имя параметра, значение - значение параметра.
//
Функция ПолучитьПараметрыИзСтроки(Знач СтрокаПараметров, Знач Разделитель = ";") Экспорт
	
	Результат = Новый Структура;
	
	СимволДвойныеКавычки = Символ(34); // (")
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПараметров, Разделитель);
	
	Для Каждого СтрокаПараметра Из МассивПодстрок Цикл
		
		ПозицияПервогоЗнакаРавенства = СтрНайти(СтрокаПараметра, "=");
		
		// Получаем имя параметра
		ИмяПараметра = СокрЛП(Лев(СтрокаПараметра, ПозицияПервогоЗнакаРавенства - 1));
		
		// Получаем значение параметра.
		ЗначениеПараметра = СокрЛП(Сред(СтрокаПараметра, ПозицияПервогоЗнакаРавенства + 1));
		
		Если  Лев(ЗначениеПараметра, 1) = СимволДвойныеКавычки
			И Прав(ЗначениеПараметра, 1) = СимволДвойныеКавычки Тогда
			
			ЗначениеПараметра = Сред(ЗначениеПараметра, 2, СтрДлина(ЗначениеПараметра) - 2);
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ИмяПараметра) Тогда
			
			Результат.Вставить(ИмяПараметра, ЗначениеПараметра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////// 
// РАСШИРЕНИЕ СТАНДАРТНЫХ ВОЗМОЖНОСТЕЙ РАБОТЫ С ПЕРИОДАМИ

Функция ПредыдущийПлавающийПериод(Период) Экспорт
	
	Если ТипЗнч(Период) = Тип("Структура") И Период.Вариант = "Последние7ДнейНеСчитаяТекущего" Тогда
		ДатаНачала = НачалоДня(ТекущаяДата());
		Возврат Новый СтандартныйПериод(ДатаНачала - 14 * 86400, ДатаНачала - 7 * 86400 - 1); 
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.Сегодня Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.Вчера);
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтойНедели Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлаяНеделяДоТакогоЖеДняНедели);
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоМесяца Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйМесяцДоТакойЖеДаты);
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоКвартала Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйКварталДоТакойЖеДаты);
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоПолугодия Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлоеПолугодиеДоТакойЖеДаты);
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоГода Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйГодДоТакойЖеДаты);
	Иначе
		ПродолжительностьСекунд = (КонецДня(Период.ДатаОкончания) - Период.ДатаНачала + 1);
		Возврат Новый СтандартныйПериод(Период.ДатаНачала - ПродолжительностьСекунд, Период.ДатаНачала - 1); 
	КонецЕсли; 
	
КонецФункции
 
Функция АналогичныйПериодПрошлогоГода(Период) Экспорт
	
	Если ТипЗнч(Период) = Тип("Структура") И Период.Вариант = "Последние7ДнейНеСчитаяТекущего" Тогда
		ДатаНачала = НачалоДня(ТекущаяДата()) - 7 * 86400;
		ДатаОкончания = НачалоДня(ТекущаяДата()) - 1;
	Иначе
		ДатаНачала = Период.ДатаНачала;
		ДатаОкончания = Период.ДатаОкончания;
	КонецЕсли;
	
	Год = Год(ДатаНачала);
	Месяц = Месяц(ДатаНачала);
	День = День(ДатаНачала);
	ЭтотГодВисокосный = (День(КонецМесяца(Дата(Год, 2, 1))) = 29);
	ПрошлыйГодВисокосный = (День(КонецМесяца(Дата(Год - 1, 2, 1))) = 29);
	Если Месяц = 2 И День = 29 И ЭтотГодВисокосный Тогда
		День = 28;
	ИначеЕсли Месяц = 2 И День = 28 И ПрошлыйГодВисокосный Тогда
		День = 29;
	КонецЕсли; 
	ГодКонца = Год(ДатаОкончания);
	МесяцКонца = Месяц(ДатаОкончания);
	ДеньКонца = День(ДатаОкончания);
	ЭтотГодВисокосный = (День(КонецМесяца(Дата(ГодКонца, 2, 1))) = 29);
	ПрошлыйГодВисокосный = (День(КонецМесяца(Дата(ГодКонца - 1, 2, 1))) = 29);
	Если МесяцКонца = 2 И ДеньКонца = 29 И ЭтотГодВисокосный Тогда
		ДеньКонца = 28;
	ИначеЕсли МесяцКонца = 2 И ДеньКонца = 28 И ПрошлыйГодВисокосный Тогда
		ДеньКонца = 29;
	КонецЕсли; 
	
	Если Период.Вариант = ВариантСтандартногоПериода.Сегодня Тогда
		Дата = Дата(Год - 1, Месяц, День);
		Возврат Новый СтандартныйПериод(НачалоДня(Дата), КонецДня(Дата));
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтойНедели Тогда
		ПродолжительностьСекунд = НачалоДня(ДатаОкончания) - НачалоНедели(ДатаОкончания);
		Неделя = НеделяГода(ДатаНачала);
		ДеньНедели = ДеньНедели(Дата(Год - 1, 1, 1));
		НомерДня = 7 * (Неделя - 1) - ДеньНедели + 1;
		Дата = Дата(Год - 1, 1, 1) + НомерДня * 86400;
		Возврат Новый СтандартныйПериод(НачалоНедели(Дата), КонецДня(Дата + ПродолжительностьСекунд));
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоМесяца Тогда
		Возврат Новый СтандартныйПериод(Дата(Год - 1, Месяц, 1), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоКвартала Тогда
		Дата = ДобавитьМесяц(Дата(Год - 1, 1, 1), Месяц - 1);
		Возврат Новый СтандартныйПериод(НачалоКвартала(Дата), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоПолугодия Тогда
		Если Месяц < 7 Тогда
			Возврат Новый СтандартныйПериод(Дата(Год - 1, 1, 1), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
		Иначе
			Возврат Новый СтандартныйПериод(ДобавитьМесяц(Дата(Год - 1, 1, 1), 6), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
		КонецЕсли; 
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоГода Тогда
		Возврат Новый СтандартныйПериод(Дата(Год - 1, 1, 1), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
	Иначе
		Возврат Новый СтандартныйПериод(Дата(Год - 1, Месяц, День), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
	КонецЕсли; 
	
КонецФункции

Функция Последние7ДнейНеСчитаяТекущего() Экспорт
	
	ДатаНачала = НачалоДня(ТекущаяДата());
	Возврат Новый СтандартныйПериод(ДатаНачала - 7 * 86400, ДатаНачала - 1); 
	
КонецФункции

#Область БанковскиеИдентификационныеКоды

#КонецОбласти

#Область Контрагенты

Функция ВыделитьИзНаименованияОПФ(КлассификаторОПФ, знач НаименованиеОрганизации) Экспорт
	
	НаименованиеОрганизации = СокрЛП(НаименованиеОрганизации);
	Результат = Новый Структура("НаименованиеБезОПФ, КраткаяФорма, ПолнаяФорма", НаименованиеОрганизации, "", "");
	
	// Поиск по полной организационно-правовой форме
	Для Каждого ДанныеОПФ Из КлассификаторОПФ Цикл
		Если СтрНайти(НаименованиеОрганизации, ДанныеОПФ.ПолнаяФорма) > 0 Тогда
			Результат.КраткаяФорма = ДанныеОПФ.КраткаяФорма;
			Результат.ПолнаяФорма = ДанныеОПФ.ПолнаяФорма;
			Результат.НаименованиеБезОПФ = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(СтрЗаменить(НаименованиеОрганизации, ДанныеОПФ.ПолнаяФорма, "")));
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	// Поиск по краткой организационно-правовой форме
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(НаименованиеОрганизации);
	Для Каждого Слово Из МассивСлов Цикл
		Для Каждого ДанныеОПФ Из КлассификаторОПФ Цикл
			Если Не ПустаяСтрока(ДанныеОПФ.КраткаяФорма) И ВРег(СокрЛП(Слово)) = ВРег(ДанныеОПФ.КраткаяФорма) Тогда
				Результат.КраткаяФорма = ДанныеОПФ.КраткаяФорма;
				Результат.ПолнаяФорма = ДанныеОПФ.ПолнаяФорма;
				Результат.НаименованиеБезОПФ = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(СтрЗаменить(НаименованиеОрганизации, Слово, "")));
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Создает структуру для дальнейшего заполнения и
// передачи в функцию получения реквизитов кассира
//
// Возвращаемое значение:
//  Структура - содержит:
//   * КассаККМ      - Неопределено
//   * Ответственный - Неопределено
//   * Автор         - Неопределено
//
Функция СформироватьСтруктуруДляПроверкиКассира() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КассаККМ", Неопределено);
	Результат.Вставить("Ответственный", Неопределено);
	Результат.Вставить("Автор", Неопределено);
	
	Возврат Результат
	
КонецФункции