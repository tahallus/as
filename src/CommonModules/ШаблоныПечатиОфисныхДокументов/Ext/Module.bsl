
#Область ПрограммныйИнтерфейс

// Вызывается в МодульМенеджера.ДобавитьКомандыПечати
//
// Параметры:
//  НазначениеШаблона - Массив, Перечисления.НазначенияШаблоновПечатиОфисныхДокументов - Назначение шаблона.
//  КомандыПечати     - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//  СписокФорм        - Строка - Формы объекта, в которые добавляются команды печати.
//  МестоРазмещения   - Строка - Имя группы формы.
//  Порядок           - Число - Порядок добавляемых команд печати.
//
Процедура ДобавитьКомандыПечати(НазначениеШаблона, КомандыПечати, СписокФорм, МестоРазмещения, Порядок) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.ШаблоныПечатиОфисныхДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НазначениеШаблона) <> Тип("Массив") Тогда
		НазначенияШаблонов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НазначениеШаблона);
	Иначе
		НазначенияШаблонов = НазначениеШаблона;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШаблоныПечатиОфисныхДокументов.Ссылка КАК Ссылка,
	|	ШаблоныПечатиОфисныхДокументов.Наименование КАК Наименование,
	|	ШаблоныПечатиОфисныхДокументов.ФайлШаблон.Расширение КАК Расширение,
	|	ШаблоныПечатиОфисныхДокументов.Назначение КАК Назначение
	|ИЗ
	|	Справочник.ШаблоныПечатиОфисныхДокументов КАК ШаблоныПечатиОфисныхДокументов
	|ГДЕ
	|	НЕ ШаблоныПечатиОфисныхДокументов.ПометкаУдаления
	|	И ШаблоныПечатиОфисныхДокументов.Используется
	|	И ШаблоныПечатиОфисныхДокументов.ФайлШаблон <> ЗНАЧЕНИЕ(Справочник.ШаблоныПечатиОфисныхДокументовПрисоединенныеФайлы.ПустаяСсылка)
	|	И (НЕ ШаблоныПечатиОфисныхДокументов.ТолькоДляАвтора
	|			ИЛИ ШаблоныПечатиОфисныхДокументов.ТолькоДляАвтора
	|				И ШаблоныПечатиОфисныхДокументов.Автор = &Пользователь)
	|	И ШаблоныПечатиОфисныхДокументов.Назначение В(&НазначенияШаблонов)";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("НазначенияШаблонов", НазначенияШаблонов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПечатьПоШаблонуОфисногоДокумента";
		КомандаПечати.Идентификатор = "ПечатьПоШаблонуОфисногоДокумента_" + Строка(Выборка.Ссылка.УникальныйИдентификатор());
		КомандаПечати.Представление = Выборка.Наименование + СтрШаблон(" (.%1)", Выборка.Расширение);
		КомандаПечати.СписокФорм = СписокФорм;
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.МестоРазмещения = МестоРазмещения;
		КомандаПечати.ДополнительныеПараметры.Вставить("ШаблонПечатиОфисныхДокументов", Выборка.Ссылка);
		КомандаПечати.ДополнительныеПараметры.Вставить("НазначениеШаблона", Выборка.Назначение);
		КомандаПечати.Порядок = Порядок;
	КонецЦикла;
	
КонецПроцедуры

// В профилях с ограниченными правами скрывает команду формы "<показать все шаблоны>"
//
// Параметры:
//  КомандаОткрытьСписок - КнопкаФормы
//
Процедура ОпределитьВидимостьКомандШаблоновПечати(КомандаОткрытьСписок) Экспорт
	
	КомандаОткрытьСписок.Видимость = ПравоДоступа("Просмотр", Метаданные.Справочники.ШаблоныПечатиОфисныхДокументов);
	
КонецПроцедуры

// Добавляет параметры в файл-шаблон.
//
// Параметры:
//  Шаблон						 - СправочникСсылка.ШаблоныПечатиОфисныхДокументов - Шаблон печати.
//  ОписаниеПараметров			 - Массив - См. ШаблоныПечатиОфисныхДокументов.ОписаниеПараметровШаблонаПоНазначению().
//  ДобавляемыеПараметры		 - Структура - Набор добавляемых параметров.
//      * ПараметрыДокумента - Массив - Параметры объекта.
//      * ПараметрыТаблицы   - Массив - Параметры табличной части.
//      * ПараметрыКартинки  - Массив - Параметры картинок.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - Уникальный идентификатор формы.
//
Процедура ДобавитьПараметрыВШаблон(Шаблон, ОписаниеПараметров, ДобавляемыеПараметры, УникальныйИдентификаторФормы) Экспорт
	
	ПараметрыДокумента = Новый СписокЗначений;
	ПараметрыТаблицы = Новый СписокЗначений;
	ПараметрыКартинки = Новый СписокЗначений;
	
	Если ДобавляемыеПараметры.Свойство("ПараметрыДокумента") Тогда
		ПараметрыДокумента = ДобавляемыеПараметры.ПараметрыДокумента;
	КонецЕсли;
	Если ДобавляемыеПараметры.Свойство("ПараметрыТаблицы") Тогда
		ПараметрыТаблицы = ДобавляемыеПараметры.ПараметрыТаблицы;
	КонецЕсли;
	Если ДобавляемыеПараметры.Свойство("ПараметрыКартинки") Тогда
		ПараметрыКартинки = ДобавляемыеПараметры.ПараметрыКартинки;
	КонецЕсли;
	
	Расширение = РасширениеПрисоединенногоФайла(Шаблон);
	СтруктураДокумента = СтруктураДокумента(Шаблон, УникальныйИдентификаторФормы);
	
	Если Расширение = "docx" Тогда
		ДобавитьВыбранныеПараметрыВШаблонDOCX(СтруктураДокумента, ОписаниеПараметров, ПараметрыДокумента, ПараметрыТаблицы, ПараметрыКартинки);
	ИначеЕсли Расширение = "odt" Тогда
		ДобавитьВыбранныеПараметрыВШаблонODT(СтруктураДокумента, ОписаниеПараметров, ПараметрыДокумента, ПараметрыТаблицы);
	КонецЕсли;
	
	ДанныеФайла = ДокументИзСтруктуры(СтруктураДокумента);
	ДанныеФайлаАдрес = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификаторФормы);
	
	ИнформацияОФайле = Новый Структура("АдресФайлаВоВременномХранилище,АдресВременногоХранилищаТекста");
	ИнформацияОФайле.АдресФайлаВоВременномХранилище = ДанныеФайлаАдрес;
	ИнформацияОФайле.АдресВременногоХранилищаТекста = "";
	
	РаботаСФайлами.ОбновитьФайл(Шаблон, ИнформацияОФайле);
	
КонецПроцедуры

// Формирует новый документ по шаблону.
//
// Параметры:
//  ОбъектПечати			 - СправочникСсылка.ДоговорыКонтрагентов, ДокументСсылка.ЗаказПокупателя, ДокументСсылка.СчетНаОплату - Объект, на основании которого вызвана печать.
//  Шаблон					 - СправочникСсылка.ШаблоныПечатиОфисныхДокументов - Выбранный шаблон.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - Уникальный идентификатор формы.
// 
// Возвращаемое значение:
//   - Структура - См. подсистему РаботаСФайлами
//
Функция СФормироватьДокумент(Знач ОбъектПечати, Шаблон, УникальныйИдентификатор) Экспорт
	
	ДополнительныеПараметры = ОпределитьВспомогательныеПараметрыПечати(ОбъектПечати, Шаблон);
	
	Если НЕ ЗначениеЗаполнено(ОбъектПечати) Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru='Документ по шаблону (%1) не сформирован: не заполнен договор контрагента.'"), Шаблон));
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, "Ссылка,Наименование,ФайлШаблон,Назначение,НеВыделятьПоляДокументаЦветом");
	
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Истина;
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ДанныеШаблона.ФайлШаблон, ПараметрыДанныхФайла);
	
	СтруктураДокумента = СтруктураДокумента(ДанныеФайла, УникальныйИдентификатор);
	СтруктураДокумента.Вставить("Шаблон", Шаблон);
	
	Если СтруктураДокумента.Расширение = "docx" Тогда
		ВыбранныеПараметры = ПараметрыИзДокументаDOCX(СтруктураДокумента.ПутьКФайлу);
	ИначеЕсли СтруктураДокумента.Расширение = "odt" Тогда
		ВыбранныеПараметры = ПараметрыИзДокументаODT(СтруктураДокумента.ПутьКФайлу);
	КонецЕсли;
	
	ДополнитьСписокСклоняемыхПараметровИсходными(ВыбранныеПараметры);
	
	ОписаниеПараметров = ПолучитьЗначенияНайденныхПараметров(ОбъектПечати, ДанныеШаблона, ВыбранныеПараметры, ДополнительныеПараметры);
	
	Ошибки = Неопределено;
	
	Если СтруктураДокумента.Расширение = "docx" Тогда
		ЗаполнитьПараметрыДокументаDOCX(ДополнительныеПараметры, ОписаниеПараметров, СтруктураДокумента, Ошибки);
		ЗаписатьФайлСвязейДокументаDOCX(СтруктураДокумента);
		ЗаписатьФайлТипыКонтентаДокументаDOCX(СтруктураДокумента);
	ИначеЕсли СтруктураДокумента.Расширение = "odt" Тогда
		ЗаполнитьПараметрыДокументаODT(ДополнительныеПараметры, ОписаниеПараметров, СтруктураДокумента, Ошибки);
	КонецЕсли;
	
	ПереместитьФайл(СтруктураДокумента.ПутьКФайлуЗамены, СтруктураДокумента.ПутьКФайлу);
	
	СтруктураДокумента.ВременныеФайлы.Добавить(СтруктураДокумента.ПутьКФайлуЗамены);
	
	Если ДанныеШаблона.НеВыделятьПоляДокументаЦветом И СтруктураДокумента.Расширение = "docx" Тогда
		ОтключитьЗатемнениеПолейДокументаDOCX(СтруктураДокумента);
	КонецЕсли;
	
	УдалитьВременныеФайлы(СтруктураДокумента.ВременныеФайлы);
	
	ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеДокументаИзСтруктурыФайлов(СтруктураДокумента.КаталогСтруктураФайла, СтруктураДокумента.Расширение);
	ДанныеФайла = ПолучитьДанныеНовогоФайла(ОбъектПечати, ДанныеШаблона, СтруктураДокумента.Расширение, ДвоичныеДанныеФайла, УникальныйИдентификатор);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Возврат ДанныеФайла;
	
КонецФункции

// Функция - Описание параметров шаблона по назначению
//
// Параметры:
//  НазначениеШаблона - Массив, Перечисления.НазначенияШаблоновПечатиОфисныхДокументов - Назначение шаблона.
//  Шаблон						 - СправочникСсылка.ШаблоныПечатиОфисныхДокументов - Шаблон печати.
// 
// Возвращаемое значение:
//   - Массив
//
Функция ОписаниеПараметровШаблонаПоНазначению(НазначениеШаблона, Шаблон = Неопределено) Экспорт
	
	ОписаниеПараметров = Новый Массив;
	
	ПриДобавленииПараметровШаблона(ОписаниеПараметров);
	
	Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ПриДобавленииПараметровШаблона(НазначениеШаблона, ОписаниеПараметров);
	
	Если Шаблон <> Неопределено И Шаблон <> Справочники.ШаблоныПечатиОфисныхДокументов.ПустаяСсылка() Тогда
		ПриОпределенииСвойствПараметровШаблона(ОписаниеПараметров, Шаблон);
	КонецЕсли;
	
	Возврат ОписаниеПараметров;
	
КонецФункции

// Фильтр выбираемых файлов-шаблонов из файловой системы.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ФильтрВыбираемыхФайловИзКаталога() Экспорт
	
	Возврат НСтр("ru='Офисные документы (*.docx;*.odt)|*.docx;*.odt|Microsoft Word 2007(*.docx)|*.docx|Текстовый документ ODF(*.odt)|*.odt'");
	
КонецФункции

#Область ОписаниеПараметровШаблона

Функция ВидПараметраТекст() Экспорт
	
	Возврат "Текст";
	
КонецФункции

Функция ВидПараметраИзображение() Экспорт
	
	Возврат "Изображение";
	
КонецФункции

Функция ДобавитьПараметрШаблона(Элементы, Ключ, Представление, Формат = Неопределено, ДопустимыеФорматы = Неопределено, ОписаниеТипов = Неопределено) Экспорт
	
	ОписаниеПараметра = НовыйОписаниеПараметраШаблона();
	ОписаниеПараметра.Ключ = Ключ;
	ОписаниеПараметра.Представление = Представление;
	ОписаниеПараметра.Формат = Формат;
	ОписаниеПараметра.ДопустимыеФорматы = ДопустимыеФорматы;
	
	Если ОписаниеТипов <> Неопределено Тогда
		ОписаниеПараметра.ОписаниеТипов = ОписаниеТипов;
	КонецЕсли;
	
	ОписаниеПараметра.Вид = ВидПараметраТекст();
	
	Элементы.Добавить(ОписаниеПараметра);
	
	Возврат ОписаниеПараметра;
	
КонецФункции

Функция ДобавитьПараметрТаблицыШаблона(Элементы, Ключ, Представление, ТаблицаВладелец, Формат = Неопределено, ДопустимыеФорматы = Неопределено, ОписаниеТипов = Неопределено, Вид = Неопределено) Экспорт
	
	ОписаниеПараметра = НовыйОписаниеПараметраШаблона();
	ОписаниеПараметра.Ключ = Ключ;
	ОписаниеПараметра.Представление = Представление;
	ОписаниеПараметра.Формат = Формат;
	ОписаниеПараметра.ДопустимыеФорматы = ДопустимыеФорматы;
	ОписаниеПараметра.ТаблицаВладелец = ТаблицаВладелец;
	
	Если ОписаниеТипов <> Неопределено Тогда
		ОписаниеПараметра.ОписаниеТипов = ОписаниеТипов;
	КонецЕсли;
	
	Если Вид = Неопределено Тогда
		ОписаниеПараметра.Вид = ВидПараметраТекст();
	Иначе
		ОписаниеПараметра.Вид = Вид;
	КонецЕсли;
	
	Элементы.Добавить(ОписаниеПараметра);
	
	Возврат ОписаниеПараметра;
	
КонецФункции

Функция ДобавитьГруппуПараметровШаблона(Элементы, Представление) Экспорт
	
	ОписаниеПараметра = НовыйОписаниеПараметраШаблона();
	ОписаниеПараметра.Представление = Представление;
	ОписаниеПараметра.Элементы = Новый Массив;
	
	Элементы.Добавить(ОписаниеПараметра);
	
	Возврат Элементы.Получить(Элементы.ВГраница()).Элементы;
	
КонецФункции

Процедура ДобавитьПараметрыКонтактнойИнформацииОбъекта(Элементы, ВладелецКИСсылка, ПрефиксПараметр, ТаблицаВладелец = Неопределено) Экспорт
	
	ВидыКонтактнойИнформации = УправлениеКонтактнойИнформацией.ВидыКонтактнойИнформацииОбъекта(ВладелецКИСсылка);
	
	Для каждого ВидКИ Из ВидыКонтактнойИнформации Цикл
		Если ТаблицаВладелец = Неопределено Тогда
			ДобавитьПараметрШаблона(Элементы, ПрефиксПараметр + ИмяПараметраВидКонтактнойИнформации(ВидКИ.Наименование), ВидКИ.Наименование);
		Иначе
			ДобавитьПараметрТаблицыШаблона(Элементы, ПрефиксПараметр + ИмяПараметраВидКонтактнойИнформации(ВидКИ.Наименование), ВидКИ.Наименование, ТаблицаВладелец);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПараметрыДополнительныхРеквизитовОбъекта(Элементы, ВладелецДопРеквизитовСсылка, ПрефиксПараметр, ТаблицаВладелец = Неопределено) Экспорт
	
	Если НЕ УправлениеСвойствами.ИспользоватьДопРеквизиты(ВладелецДопРеквизитовСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Свойства = УправлениеСвойствамиСлужебный.СписокСвойствДляВидаОбъектов(ВладелецДопРеквизитовСсылка.Метаданные().ПолноеИмя(), "ДополнительныеРеквизиты");
	Для каждого ДополнительныйРеквизит Из Свойства Цикл
		
		КлючПараметра = ПрефиксПараметр + ДополнительныйРеквизит.Наименование;
		ПредставлениеПараметра = ДополнительныйРеквизит.Наименование;
		
		Если ТаблицаВладелец = Неопределено Тогда
			ДобавитьПараметрШаблона(Элементы, КлючПараметра, ПредставлениеПараметра);
		Иначе
			ДобавитьПараметрТаблицыШаблона(Элементы, КлючПараметра, ПредставлениеПараметра, ТаблицаВладелец);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПараметрыСклоненияПараметра(Элементы, СклоняемыйПараметрКлюч, СклоняемыйПараметрПредставление, СовместимыеПараметры = Неопределено) Экспорт
	
	НовыйПараметр = ДобавитьПараметрШаблона(Элементы, СклоняемыйПараметрКлюч + "РодительныйПадеж",  СтрШаблон("%1 (%2)", СклоняемыйПараметрПредставление, НСтр("ru='родительный'")));
	Если СовместимыеПараметры <> Неопределено Тогда
		Для каждого СовместимыйПараметр Из СовместимыеПараметры Цикл
			НовыйПараметр.СовместимыеПараметры.Добавить(СовместимыйПараметр + "РодительныйПадеж");
		КонецЦикла;
	КонецЕсли;
	
	НовыйПараметр = ДобавитьПараметрШаблона(Элементы, СклоняемыйПараметрКлюч + "ДательныйПадеж",    СтрШаблон("%1 (%2)", СклоняемыйПараметрПредставление, НСтр("ru='дательный'")));
	Если СовместимыеПараметры <> Неопределено Тогда
		Для каждого СовместимыйПараметр Из СовместимыеПараметры Цикл
			НовыйПараметр.СовместимыеПараметры.Добавить(СовместимыйПараметр + "ДательныйПадеж");
		КонецЦикла;
	КонецЕсли;
	
	НовыйПараметр = ДобавитьПараметрШаблона(Элементы, СклоняемыйПараметрКлюч + "ВинительныйПадеж",  СтрШаблон("%1 (%2)", СклоняемыйПараметрПредставление, НСтр("ru='винительный'")));
	Если СовместимыеПараметры <> Неопределено Тогда
		Для каждого СовместимыйПараметр Из СовместимыеПараметры Цикл
			НовыйПараметр.СовместимыеПараметры.Добавить(СовместимыйПараметр + "ВинительныйПадеж");
		КонецЦикла;
	КонецЕсли;
	
	НовыйПараметр = ДобавитьПараметрШаблона(Элементы, СклоняемыйПараметрКлюч + "ТворительныйПадеж", СтрШаблон("%1 (%2)", СклоняемыйПараметрПредставление, НСтр("ru='творительный'")));
	Если СовместимыеПараметры <> Неопределено Тогда
		Для каждого СовместимыйПараметр Из СовместимыеПараметры Цикл
			НовыйПараметр.СовместимыеПараметры.Добавить(СовместимыйПараметр + "ТворительныйПадеж");
		КонецЦикла;
	КонецЕсли;
	
	НовыйПараметр = ДобавитьПараметрШаблона(Элементы, СклоняемыйПараметрКлюч + "ПредложныйПадеж",   СтрШаблон("%1 (%2)", СклоняемыйПараметрПредставление, НСтр("ru='предложный'")));
	Если СовместимыеПараметры <> Неопределено Тогда
		Для каждого СовместимыйПараметр Из СовместимыеПараметры Цикл
			НовыйПараметр.СовместимыеПараметры.Добавить(СовместимыйПараметр + "ПредложныйПадеж");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОписаниеПараметров(ВыбранныеПараметры, НазначениеШаблона, Шаблон = Неопределено) Экспорт
	
	ОписаниеПараметров = ОписаниеПараметровШаблонаПоНазначению(НазначениеШаблона, Шаблон);
	
	ОписаниеВыбранныхПараметров = Новый Массив;
	
	Для каждого Параметр Из ВыбранныеПараметры Цикл
		
		ОписаниеПараметра = ОписаниеПараметра(ОписаниеПараметров, Параметр, Истина);
		
		Если ОписаниеПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеВыбранныхПараметров.Добавить(ОписаниеПараметра);
		
	КонецЦикла;
	
	Возврат ОписаниеВыбранныхПараметров;
	
КонецФункции

Функция ОписаниеПараметра(ОписаниеПараметров, КлючПараметра, ИскатьПоСовместимым = Ложь) Экспорт
	
	Возврат НайтиОписаниеПараметраРекурсивно(ОписаниеПараметров, КлючПараметра, ИскатьПоСовместимым);
	
КонецФункции

Функция ОписаниеПараметровПоПрефиксу(ОписаниеПараметров, ПрефиксКлючПараметра) Экспорт
	
	НайденныеОписания = Новый Массив;
	НайтиОписаниеПараметровРекурсивно(ОписаниеПараметров, ПрефиксКлючПараметра, НайденныеОписания);
	Возврат НайденныеОписания;
	
КонецФункции

Функция ДопустимыеФорматыДаты() Экспорт
	
	ДопустимыеФорматы = Новый СписокЗначений;
	ДопустимыеФорматы.Добавить("ДЛФ=ДД", "20 августа 2002 г.");
	ДопустимыеФорматы.Добавить("ДЛФ=Д",  "20.08.2002");
	
	Возврат ДопустимыеФорматы;
	
КонецФункции

Функция ДопустимыеФорматыДатыВремени() Экспорт
	
	ДопустимыеФорматы = Новый СписокЗначений;
	ДопустимыеФорматы.Добавить("ДФ=""дд ММММ гггг 'г.' ЧЧ:мм:сс""", "20 августа 2002 г. 15:33:09");
	ДопустимыеФорматы.Добавить("ДЛФ=ДД",                            "20 августа 2002 г.");
	ДопустимыеФорматы.Добавить("ДЛФ=Д",                             "20.08.2002");
	ДопустимыеФорматы.Добавить("ДЛФ=В",                             "15:33:09");
	
	Возврат ДопустимыеФорматы;
	
КонецФункции

Функция ФорматЦены() Экспорт
	
	Возврат "ЧЦ=15; ЧДЦ=2";
	
КонецФункции

Функция ОписаниеТипаЦена() Экспорт
	
	Возврат Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	
КонецФункции

Функция ОписаниеТипаСкидка() Экспорт
	
	Возврат Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5, 2, ДопустимыйЗнак.Любой));
	
КонецФункции

Функция ОписаниеТипаКоличество() Экспорт
	
	Возврат Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	
КонецФункции

Функция ПредставлениеГруппыКонтактнаяИнформация() Экспорт
	
	Возврат НСтр("ru='Контактная информация'");
	
КонецФункции

Функция ПредставлениеГруппыДополнительныеРеквизиты() Экспорт
	
	Возврат НСтр("ru='Дополнительные реквизиты'");
	
КонецФункции

#КонецОбласти

#Область ВыводДанныхВДокумент

Процедура ЗаполнитьЗначениеПараметра(ОписаниеПараметров, КлючПараметр, НовоеЗначение) Экспорт
	
	ОписаниеПараметра = ОписаниеПараметра(ОписаниеПараметров, КлючПараметр);
	
	Если ОписаниеПараметра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПараметра.Значение = НовоеЗначение;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, КлючВладелец, ЗначениеВладелец) Экспорт
	
	КлючДополнительныеРеквизиты = КлючВладелец + "ДополнительныеРеквизиты.";
	
	ПараметрыДопРеквизитов = ОписаниеПараметровПоПрефиксу(ОписаниеПараметров, КлючДополнительныеРеквизиты);
	ОчиститьЗначенияПараметров(ПараметрыДопРеквизитов);
	
	Если НЕ ЗначениеЗаполнено(ЗначениеВладелец) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЗначениеВладелец)) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияСвойств = УправлениеСвойствами.ЗначенияСвойств(ЗначениеВладелец, Истина, Ложь);
	
	Для каждого ОписаниеПараметра Из ПараметрыДопРеквизитов Цикл
		
		ИмяДопРеквизита = СтрЗаменить(ОписаниеПараметра.Ключ, КлючДополнительныеРеквизиты, "");
		
		Для каждого СтрДопРеквизит Из ЗначенияСвойств Цикл
			Если СтрСравнить(СтрДопРеквизит.Свойство.Наименование, ИмяДопРеквизита) = 0 Тогда
				ОписаниеПараметра.Значение = СтрДопРеквизит.Значение;
				ОписаниеПараметра.Формат = СтрДопРеквизит.Свойство.ФорматСвойства;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, КлючВладелец, ЗначениеВладелец,
	Дата = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗначениеВладелец) Тогда
		Возврат;
	КонецЕсли;
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЗначениеВладелец,
		, Дата, Ложь);
	
	Для каждого ОписаниеПараметра Из ОписаниеПараметров Цикл
		
		КлючКонтактнаяИнформация = КлючВладелец + "КонтактнаяИнформация.";
		
		Если НЕ СтрНачинаетсяС(ОписаниеПараметра.Ключ, КлючКонтактнаяИнформация) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПараметра = СтрЗаменить(ОписаниеПараметра.Ключ, КлючКонтактнаяИнформация, "");
		ВыводимаяКонтактнаяИнформация = Новый Массив;
		
		Для каждого ЗначениеКИ Из КонтактнаяИнформацияОбъекта Цикл
			ИмяПараметраВидКИ = ИмяПараметраВидКонтактнойИнформации(ЗначениеКИ.Вид.Наименование);
			Если СтрСравнить(ИмяПараметраВидКИ, ИмяПараметра) <> 0 Тогда
				Продолжить;
			КонецЕсли;
			ВыводимаяКонтактнаяИнформация.Добавить(ЗначениеКИ.Представление);
		КонецЦикла;
		
		ОписаниеПараметра.Значение = СтрСоединить(ВыводимаяКонтактнаяИнформация, "; ");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияИзСтруктуры(ОписаниеПараметров, СтруктураИсточник) Экспорт
	
	Для каждого КлючЗначение Из СтруктураИсточник Цикл
		
		ОписаниеПараметра = ОписаниеПараметра(ОписаниеПараметров, КлючЗначение.Ключ);
		
		Если ОписаниеПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПараметра.Значение = КлючЗначение.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, КолонкиТабличнойЧасти, СтрокаТаблицы, Префикс = "") Экспорт
	
	Для каждого Колонка Из КолонкиТабличнойЧасти Цикл
		Для каждого ОписаниеПараметра Из ОписаниеПараметров Цикл
			
			Если ОписаниеПараметра.Ключ <> Префикс + Колонка.Имя Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеИзВыборки = СтрокаТаблицы[Колонка.Имя];
			Если ЗначениеИзВыборки <> Null Тогда
				ОписаниеПараметра.Значение = ЗначениеИзВыборки;
			КонецЕсли;
			
			Прервать;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПараметраИзображение(ОписаниеПараметра, ФайлСсылка, ПараметрыВывода) Экспорт
	
	ПараметрыКартинки = Неопределено;
	
	Если ЗначениеЗаполнено(ФайлСсылка) Тогда
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлСсылка);
		
		ПараметрыКартинки = Новый Структура;
		ПараметрыКартинки.Вставить("СсылкаДвоичныеДанные", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ПараметрыКартинки.Вставить("Расширение", ДанныеФайла.Расширение);
		
		ДобавитьКартинкуВСтруктуруДокументаDOCX(ПараметрыВывода.СтруктураДокумента, ПараметрыКартинки);
		
	КонецЕсли;
	
	ОписаниеПараметра.ПараметрыКартинки = ПараметрыКартинки;
	
КонецПроцедуры

Процедура ОчиститьЗначенияПараметров(ОписаниеПараметров) Экспорт
	
	Если ТипЗнч(ОписаниеПараметров) = Тип("Массив") Тогда
		Для каждого ОписаниеПараметра Из ОписаниеПараметров Цикл
			ОписаниеПараметра.Значение = Неопределено;
			ОчиститьЗначенияПараметровКартинки(ОписаниеПараметра);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОписаниеПараметров) = Тип("Структура") И ОписаниеПараметров.Свойство("Значение") Тогда
		ОписаниеПараметров.Значение = Неопределено;
		ОчиститьЗначенияПараметровКартинки(ОписаниеПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиСтрокуТаблицыДокумента(ОписаниеПараметров, ПараметрыВывода) Экспорт
	
	Если ПараметрыВывода.Расширение = "docx" Тогда
		НачатьВыводСтрокиТаблицыДокументаDOCX(ОписаниеПараметров, ПараметрыВывода);
	ИначеЕсли ПараметрыВывода.Расширение = "odt" Тогда
		НачатьВыводСтрокиТаблицыДокументаODT(ОписаниеПараметров, ПараметрыВывода);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыводТаблицыДокумента(ОписаниеПараметров, ПараметрыВывода) Экспорт
	
	Если ПараметрыВывода.Расширение = "docx" Тогда
		НачатьПродолжитьВыводТаблицыДокументаDOCX(ОписаниеПараметров, ПараметрыВывода);
	ИначеЕсли ПараметрыВывода.Расширение = "odt" Тогда
		НачатьПродолжитьВыводТаблицыДокументаODT(ОписаниеПараметров, ПараметрыВывода);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакончитьВыводТаблицыДокумента(ОписаниеПараметров, ПараметрыВывода) Экспорт
	
	Если ПараметрыВывода.Расширение = "docx" Тогда
		НачатьПродолжитьВыводТаблицыДокументаDOCX(ОписаниеПараметров, ПараметрыВывода);
	ИначеЕсли ПараметрыВывода.Расширение = "odt" Тогда
		НачатьПродолжитьВыводТаблицыДокументаODT(ОписаниеПараметров, ПараметрыВывода);
	КонецЕсли;
	
	Если НЕ ПараметрыВывода.Свойство("ВыводТаблицы") Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru='ВНИМАНИЕ! В шаблоне ""%1"" для таблицы ""%2"" отсутствует строка с заголовками колонок.'"),
			ПараметрыВывода.СтруктураДокумента.Шаблон,
			ПараметрыВывода.ТаблицыСодержащиеДанныеТЧ.Получить(ПараметрыВывода.НомерТаблицы));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ПараметрыВывода.Ошибки,, ТекстОшибки, Неопределено);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ВыводТаблицы.ЧтениеXML.Закрыть();
	ПараметрыВывода.Удалить("ВыводТаблицы");
	
КонецПроцедуры

Процедура ВывестиПереносСтрокиВДокумент(ПараметрыВывода) Экспорт
	
	ТекстПереносСтроки = "";
	
	Если ПараметрыВывода.Расширение = "docx" Тогда
		ТекстПереносСтроки = "<w:p/>";
	ИначеЕсли ПараметрыВывода.Расширение = "odt" Тогда
		ТекстПереносСтроки = "<text:line-break/>";
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстПереносСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ЗаписьXML.ЗаписатьБезОбработки(ТекстПереносСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеПрограммы

Процедура СоздатьПредопределенныеШаблоныКоммерческогоПредложения() Экспорт
	
	Макеты = Новый Массив;
	Макеты.Добавить("КоммерческоеПредложениеПример_docx");
	Макеты.Добавить("КоммерческоеПредложениеПример_odt");
	
	НачатьТранзакцию();
	Попытка
		
		Для каждого МакетИмя Из Макеты Цикл
			МетаданныеОбъекта = Документы.ЗаказПокупателя.ПустаяСсылка().Метаданные();
			Макет = МетаданныеОбъекта.Макеты.Найти(МакетИмя);
			Если Макет = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МакетДвоичныеДанные = Документы.ЗаказПокупателя.ПолучитьМакет(Макет);
			МакетДвоичныеДанныеАдрес = ПоместитьВоВременноеХранилище(МакетДвоичныеДанные, Новый УникальныйИдентификатор);
			
			СсылкаНаШаблон = Справочники.ШаблоныПечатиОфисныхДокументов.ПолучитьСсылку();
			
			НаименованиеМакета = Макет.Представление();
			Расширение = Прав(Макет.ПолноеИмя(), СтрДлина(Макет.ПолноеИмя()) - СтрНайти(Макет.ПолноеИмя(), "_", НаправлениеПоиска.СКонца));
			
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", СсылкаНаШаблон);
			ПараметрыФайла.Вставить("ИмяБезРасширения", НаименованиеМакета);
			ПараметрыФайла.Вставить("РасширениеБезТочки", Расширение);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяДатаСеанса());
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, МакетДвоичныеДанныеАдрес);
			
			Шаблон = Справочники.ШаблоныПечатиОфисныхДокументов.СоздатьЭлемент();
			Шаблон.Заполнить(Неопределено);
			Шаблон.Наименование = НаименованиеМакета;
			Шаблон.Назначение = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.КоммерческоеПредложение;
			Шаблон.ФайлШаблон = ПрисоединенныйФайл;
			Шаблон.УстановитьСсылкуНового(СсылкаНаШаблон);
			Шаблон.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Ошибка создания предопределенных шаблонов коммерческих предложений:
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ШаблоныПечатиОфисныхДокументов,, ТекстСообщения);
		
		Константы.ПредложитьЗаполнитьПоставляемыеШаблоныКоммерческогоПредложения.Установить(Истина);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьПредопределенныеШаблоныДоговоровКонтрагентов() Экспорт
	
	Макеты = Новый Массив;
	Макеты.Добавить(Новый Структура("Имя,Используется", "ДоговорКуплиПродажиПример_docx", Истина));
	Макеты.Добавить(Новый Структура("Имя,Используется", "ДоговорКуплиПродажиПример_odt", Ложь));
	Макеты.Добавить(Новый Структура("Имя,Используется", "ДоговорОказанияУслугПример_docx", Истина));
	Макеты.Добавить(Новый Структура("Имя,Используется", "ДоговорОказанияУслугПример_odt", Ложь));
	
	НачатьТранзакцию();
	Попытка
		
		Для каждого ДобавляемыйМакет Из Макеты Цикл
			МетаданныеОбъекта = Справочники.ДоговорыКонтрагентов.ПустаяСсылка().Метаданные();
			Макет = МетаданныеОбъекта.Макеты.Найти(ДобавляемыйМакет.Имя);
			Если Макет = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МакетДвоичныеДанные = Справочники.ДоговорыКонтрагентов.ПолучитьМакет(Макет);
			МакетДвоичныеДанныеАдрес = ПоместитьВоВременноеХранилище(МакетДвоичныеДанные, Новый УникальныйИдентификатор);
			
			СсылкаНаШаблон = Справочники.ШаблоныПечатиОфисныхДокументов.ПолучитьСсылку();
			
			НаименованиеМакета = Макет.Представление();
			Расширение = Прав(Макет.ПолноеИмя(), СтрДлина(Макет.ПолноеИмя()) - СтрНайти(Макет.ПолноеИмя(), "_", НаправлениеПоиска.СКонца));
			
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", СсылкаНаШаблон);
			ПараметрыФайла.Вставить("ИмяБезРасширения", НаименованиеМакета);
			ПараметрыФайла.Вставить("РасширениеБезТочки", Расширение);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяДатаСеанса());
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, МакетДвоичныеДанныеАдрес);
			
			Шаблон = Справочники.ШаблоныПечатиОфисныхДокументов.СоздатьЭлемент();
			Шаблон.Заполнить(Неопределено);
			Шаблон.Наименование = НаименованиеМакета;
			Шаблон.Назначение = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента;
			Шаблон.ФайлШаблон = ПрисоединенныйФайл;
			Шаблон.УстановитьСсылкуНового(СсылкаНаШаблон);
			Шаблон.Используется = ДобавляемыйМакет.Используется;
			Шаблон.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Ошибка создания предопределенных шаблонов коммерческих предложений:
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ШаблоныПечатиОфисныхДокументов,, ТекстСообщения);
		
		Константы.ПредложитьЗаполнитьПоставляемыеШаблоныДоговоровКонтрагентов.Установить(Истина);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбщиеПараметрыШаблонов

Процедура ПриДобавленииПараметровШаблона(ОписаниеПараметров)
	
	ПараметрыОбщие = ДобавитьГруппуПараметровШаблона(ОписаниеПараметров, НСтр("ru='Общие'"));
	ДобавитьПараметрШаблона(ПараметрыОбщие, "ТекущаяДата", НСтр("ru='Дата формирования'"), "ДФ=""дд ММММ гггг 'г.' ЧЧ:мм:сс""", ДопустимыеФорматыДаты(), Новый ОписаниеТипов("Дата"));
	
	ПараметрыТекущегоПользователя = ДобавитьГруппуПараметровШаблона(ПараметрыОбщие, НСтр("ru='Текущий пользователь'"));
	ДобавитьПараметрШаблона(ПараметрыТекущегоПользователя, "ТекущийПользователь.Наименование", НСтр("ru='Полное имя'"));
	ДобавитьПараметрШаблона(ПараметрыТекущегоПользователя, "ТекущийПользователь.Комментарий", НСтр("ru='Комментарий'"));
	ДобавитьПараметрыКонтактнойИнформацииОбъекта(ПараметрыТекущегоПользователя, Справочники.Пользователи.ПустаяСсылка(), "ТекущийПользователь.КонтактнаяИнформация.");
	
КонецПроцедуры

Процедура ПриПолученииЗначенийПараметровШаблона(ОписаниеПараметров)
	
	ЗначенияПараметров = Новый Соответствие;
	ЗначенияПараметров.Вставить("ТекущаяДата", ТекущаяДатаСеанса());
	
	ЗаполнитьЗначенияПараметровТекущегоПользователя(ОписаниеПараметров, ЗначенияПараметров);
	
	ЗаполнитьЗначенияИзСтруктуры(ОписаниеПараметров, ЗначенияПараметров);
	
КонецПроцедуры

Процедура ПриОпределенииСвойствПараметровШаблона(ОписаниеПараметров, Шаблон)
	
	ПереопределенныеСвойства = ПереопределенныеФорматыШаблона(Шаблон);
	
	Для каждого ОписаниеСвойства Из ПереопределенныеСвойства Цикл
		
		ОписаниеПараметра = ОписаниеПараметра(ОписаниеПараметров, ОписаниеСвойства.Параметр);
		
		Если ОписаниеПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПараметра.Формат = ОписаниеСвойства.Формат;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПараметровТекущегоПользователя(ОписаниеПараметров, ЗначенияПараметров)
	
	Пользователь = Пользователи.АвторизованныйПользователь();
	
	ДанныеПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Пользователь, "Наименование,Комментарий");
	
	ЗначенияПараметров.Вставить("ТекущийПользователь.Наименование", ДанныеПользователя.Наименование);
	ЗначенияПараметров.Вставить("ТекущийПользователь.Комментарий", ДанныеПользователя.Комментарий);
	
	ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, "ТекущийПользователь.", Пользователь);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФайлами

Функция ПолучитьСтруктуруФайловДокумента(ДанныеФайла)
	
	Расширение = НРег(ДанныеФайла.Расширение);
	ВременныйФайлДокумент = ПолучитьИмяВременногоФайла(Расширение);
	
	ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла).Записать(ВременныйФайлДокумент);
	
	КаталогСтруктураФайла = ФайловаяСистема.СоздатьВременныйКаталог();
	Архив = Новый ЧтениеZipФайла(ВременныйФайлДокумент);
	Архив.ИзвлечьВсе(КаталогСтруктураФайла, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Архив.Закрыть();
	
	УдалитьФайлы(ВременныйФайлДокумент);
	
	Возврат КаталогСтруктураФайла;
	
КонецФункции

Функция ПолучитьДвоичныеДанныеДокументаИзСтруктурыФайлов(КаталогСтруктураФайла, Расширение)
	
	ВременныйФайлДокумент = ПолучитьИмяВременногоФайла(Расширение);
	
	Архиватор = Новый ЗаписьZipФайла(ВременныйФайлДокумент);
	Архиватор.Добавить(КаталогСтруктураФайла + "\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Архиватор.Записать();
	
	ДвоичныеДанныеЗаполненногоФайла = Новый ДвоичныеДанные(ВременныйФайлДокумент);
	
	УдалитьФайлы(ВременныйФайлДокумент);
	УдалитьФайлы(КаталогСтруктураФайла);
	
	Возврат ДвоичныеДанныеЗаполненногоФайла;
	
КонецФункции

Функция ПолучитьДанныеНовогоФайла(ОбъектПечати, ДанныеШаблона, Расширение, ДвоичныеДанныеФайла, УникальныйИдентификатор)
	
	Наименование = ИмяФайлаПоУмолчанию(ДанныеШаблона.Наименование, ОбъектПечати);
	Наименование = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Наименование);
	ИмяФайла = Наименование + "." + Расширение;
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("Наименование", Наименование);
	ДанныеФайла.Вставить("ПолноеНаименованиеВерсии", Наименование);
	ДанныеФайла.Вставить("ИмяФайла", ИмяФайла);
	ДанныеФайла.Вставить("Расширение", Расширение);
	ДанныеФайла.Вставить("СсылкаНаДвоичныеДанныеФайла", ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор));
	ДанныеФайла.Вставить("Размер", ДвоичныеДанныеФайла.Размер());
	ДанныеФайла.Вставить("ОтносительныйПуть", "");
	ДанныеФайла.Вставить("Редактирует", Неопределено);
	ДанныеФайла.Вставить("Зашифрован", Ложь);
	ДанныеФайла.Вставить("ДатаМодификацииУниверсальная", ТекущаяУниверсальнаяДата());
	ДанныеФайла.Вставить("ФайлРедактируетТекущийПользователь", Ложь);
	ПапкаДляСохранитьКак = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
	ДанныеФайла.Вставить("ПапкаДляСохранитьКак", ПапкаДляСохранитьКак);
	
	Возврат ДанныеФайла;
	
КонецФункции

Функция ИмяФайлаПоУмолчанию(ШаблонНаименование, ОбъектПечати)
	
	Если ОбщегоНазначения.ЭтоДокумент(Метаданные.НайтиПоТипу(ТипЗнч(ОбъектПечати))) Тогда
		ПараметрыДляВставки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектПечати, "Дата,Номер");
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрефиксацияОбъектов") Тогда
			МодульПрефиксацияОбъектовКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПрефиксацияОбъектовКлиентСервер");
			ПараметрыДляВставки.Номер = МодульПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ПараметрыДляВставки.Номер);
		КонецЕсли;
		ПараметрыДляВставки.Дата = Формат(ПараметрыДляВставки.Дата, "ДЛФ=D");
		ПараметрыДляВставки.Вставить("НазваниеПечатнойФормы", ШаблонНаименование);
		Шаблон = НСтр("ru = '[НазваниеПечатнойФормы] № [Номер] от [Дата]'");
	Иначе
		ПараметрыДляВставки = Новый Структура;
		ПараметрыДляВставки.Вставить("НазваниеПечатнойФормы",ШаблонНаименование);
		ПараметрыДляВставки.Вставить("ПредставлениеОбъекта", ОбщегоНазначения.ПредметСтрокой(ОбъектПечати));
		ПараметрыДляВставки.Вставить("ТекущаяДата",Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
		Шаблон = НСтр("ru = '[НазваниеПечатнойФормы] - [ПредставлениеОбъекта] - [ТекущаяДата]'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыДляВставки);
	
КонецФункции

Процедура УдалитьВременныеФайлы(ИменаФайлов)
	
	Для каждого ИмяФайла Из ИменаФайлов Цикл
		
		ВременныйФайл = Новый Файл(ИмяФайла);
		Если ВременныйФайл.Существует() Тогда
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РасширениеПрисоединенногоФайла(ПрисоединенныйФайл)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "Расширение");
	
КонецФункции

#КонецОбласти

#Область РаботаСИзображением

// Возвращает ширину, высоту, и тип изображения для файлов GIF, JPG, PNG, BMP, TIFF
Функция ПолучитьАтрибутыИзображения(ДанныеЧтения)
	
	АтрибутыИзображения = Новый Структура;
	
	Если ТипЗнч(ДанныеЧтения) = Тип("Строка") Тогда
		
		Попытка
			ПотокДанных = ФайловыеПотоки.ОткрытьДляЧтения(ДанныеЧтения);
		Исключение
			Возврат АтрибутыИзображения;
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(ДанныеЧтения) = Тип("ДвоичныеДанные") Тогда
		ПотокДанных = ДанныеЧтения
	Иначе
		Возврат АтрибутыИзображения;
	КонецЕсли;
	
	ЧтениеДанных = Новый ЧтениеДанных(ПотокДанных);
	
	Символ1 = ЧтениеДанных.ПрочитатьБайт();
	Символ2 = ЧтениеДанных.ПрочитатьБайт();
	Символ3 = ЧтениеДанных.ПрочитатьБайт();
	
	// MIME syntax -  "type/subtype"
	MimeType = Null;
	
	Ширина  = -1;
	Высота = -1;
	
	Если (Символ(Символ1) = "G" И Символ(Символ2) = "I" И Символ(Символ3) = "F") Тогда // GIF
		
		ЧтениеДанных.Пропустить(3);
		Ширина  = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, Ложь);
		Высота = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2 , Ложь);
		MimeType = "image/gif";
		
	ИначеЕсли (Символ1 = 255 И Символ2 = 216) Тогда // JPG
		
		Пока (Символ3 = 255) Цикл 
			
			Маркер = ЧтениеДанных.ПрочитатьБайт();
			Длина = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, Истина);
			
			Если (Маркер = 192 ИЛИ Маркер = 193 ИЛИ Маркер = 194) Тогда
				
				ЧтениеДанных.Пропустить(1);
				Высота = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, Истина);
				Ширина  = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, Истина);
				MimeType = "image/jpeg";
				Прервать;
				
			КонецЕсли;
			
			ЧтениеДанных.Пропустить(Длина - 2);
			Символ3 = ЧтениеДанных.ПрочитатьБайт();
			
		КонецЦикла;
		
	ИначеЕсли  (Символ1 = 137 И Символ2 = 80 И Символ3 = 78) Тогда // PNG
		
		ЧтениеДанных.Пропустить(15);
		Ширина = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2 , Истина);
		ЧтениеДанных.Пропустить(2);
		Высота = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, Истина);
		MimeType = "image/png";
		
	ИначеЕсли  (Символ1 = 66 И Символ2 = 77) Тогда // BMP
		
		ЧтениеДанных.Пропустить(15);
		Ширина = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, Ложь);
		ЧтениеДанных.Пропустить(2);
		Высота = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, Ложь);
		MimeType = "image/bmp";
		
	Иначе
		
		Символ4 = ЧтениеДанных.ПрочитатьБайт();
		
		Если((Символ(Символ1) = "M" И Символ(Символ2) = "M" И Символ3 = 0 И Символ4 = 42) ИЛИ (Символ(Символ1) = "I" И Символ(Символ2) = "I" И Символ3 = 42 И Символ4 = 0)) Тогда //TIFF
			
			ПорядокБайтовBigEndian = Символ(Символ1) = "M";
			
			// Image header
			ImageFileDirectory = 0;
			ImageFileDirectory = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 4, ПорядокБайтовBigEndian);
			
			ЧтениеДанных.Пропустить(ImageFileDirectory - 8);
			Вхождения = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, ПорядокБайтовBigEndian);
			
			Индекс = 1;
			Пока Индекс <= Вхождения Цикл
				
				Тэг = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, ПорядокБайтовBigEndian);
				ТипПоля = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, ПорядокБайтовBigEndian);
				Пропуск = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 4, ПорядокБайтовBigEndian);
				
				Если (ТипПоля = 3 ИЛИ ТипПоля = 8) Тогда
					
					ЗначениеСмещения = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, ПорядокБайтовBigEndian);
					ЧтениеДанных.Пропустить(2);
					
				Иначе
					
					ЗначениеСмещения = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 4, ПорядокБайтовBigEndian);
					
				КонецЕсли;
				
				Если (Тэг = 256) Тогда
					
					Ширина = ЗначениеСмещения;
					
				ИначеЕсли (Тэг = 257) Тогда
					
					Высота = ЗначениеСмещения;
					
				КонецЕсли;
				
				Если (Ширина <> -1 И Высота <> -1) Тогда
					
					MimeType = "image/tiff";
					Прервать;
					
				КонецЕсли;
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЧтениеДанных.Закрыть();
	
	АтрибутыИзображения.Вставить("ТипИзображения", MimeType);
	АтрибутыИзображения.Вставить("Высота", ?(MimeType = Null, 0, Высота));
	АтрибутыИзображения.Вставить("Ширина", ?(MimeType = Null, 0, Ширина));
	
	Возврат АтрибутыИзображения;
	
КонецФункции

Функция ПрочитатьЗначениеБайтаИзПотока(ПотокВвода, ЧислоБайтов, ПорядокБайтовBigEndian) 
	
	Значение = 0;
	
	ВеличинаСмещения = ?(ПорядокБайтовBigEndian = Истина, (ЧислоБайтов - 1) * 8, 0);
	Количество = ?(ПорядокБайтовBigEndian = Истина, -8, 8); 
	
	Индекс = 0;
	Пока Индекс < ЧислоБайтов Цикл
		
		Значение = ПобитовоеИли_(Значение, ПобитовыйСдвигВлево_(ПотокВвода.ПрочитатьБайт(), ВеличинаСмещения));
		ВеличинаСмещения = ВеличинаСмещения + Количество;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

Функция ПобитовыйСдвигВлево_(Знач Число, Смещение = 0)
	
	ДвоичноеПредставление = ПолучитьДвоичноеПредставлениеЧисла(Число);
	МассивДвоичногоЧисла  = РазобратьДвоичноеПредставление(ДвоичноеПредставление);
	
	Для Инд = 0 По Смещение - 1 Цикл
		
		Индекс = 1;
		Пока Индекс <= МассивДвоичногоЧисла.ВГраница() - Инд Цикл 
			
			МассивДвоичногоЧисла[Индекс-1] = МассивДвоичногоЧисла[Индекс];
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		МассивДвоичногоЧисла[МассивДвоичногоЧисла.ВГраница()- Инд] = "0";
		
	КонецЦикла;
	
	
	ДвоичноеПредставлениеМассиваЧисла = ПолучитьДвоичноеПредставлениеМассиваЧисла(МассивДвоичногоЧисла);	
	
	Результат = ЧислоИзДвоичнойСтроки("0b" + ДвоичноеПредставлениеМассиваЧисла);
	
	Возврат Результат;
	
КонецФункции

Функция ПобитовоеИли_(Число1, Число2)
	
	ДвоичноеПредставлениеЧисла1 = ПолучитьДвоичноеПредставлениеЧисла(Число1);
	ДвоичноеПредставлениеЧисла2 = ПолучитьДвоичноеПредставлениеЧисла(Число2);
	
	МассивДвоичногоЧисла1 = РазобратьДвоичноеПредставление(ДвоичноеПредставлениеЧисла1);
	МассивДвоичногоЧисла2 = РазобратьДвоичноеПредставление(ДвоичноеПредставлениеЧисла2);
	
	ДлинаМассива = МассивДвоичногоЧисла1.ВГраница();
	
	Для Инд = 0 По ДлинаМассива Цикл
		
		Если МассивДвоичногоЧисла1[Инд] = "1" ИЛИ МассивДвоичногоЧисла2[Инд] = "1" Тогда
			МассивДвоичногоЧисла1[Инд] = "1";
		КонецЕсли;
		
	КонецЦикла;
	
	ДвоичноеПредставлениеМассиваЧисла = ПолучитьДвоичноеПредставлениеМассиваЧисла(МассивДвоичногоЧисла1);
	
	Результат = ЧислоИзДвоичнойСтроки("0b" + ДвоичноеПредставлениеМассиваЧисла);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДвоичноеПредставлениеЧисла(Значение, Маска = "00000000000000000000000000000000")
	
	Результат = "";
	Шаблон    = "01";
	Основание = СтрДлина(Шаблон);
	
	Пока Значение > 0 Цикл
		
		Остаток    = Значение % Основание;
		Результат1 = Сред(Шаблон, Остаток + 1, 1);
		Значение   = (Значение - Остаток) / Основание;
		Результат  = Результат1 + Результат;
		
	КонецЦикла;
	
	ЛидирующиеНули = "";
	
	ЧислоНулей = СтрДлина(Маска) - СтрДлина(Результат);
	
	Для Инд = 1 По ЧислоНулей Цикл 
		Результат = "0" + Результат;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДвоичноеПредставлениеМассиваЧисла(МассивДвоичногоЧисла)
	
	Результат = "";
	
	Для Инд = 0 По МассивДвоичногоЧисла.ВГраница() Цикл
		Результат = Результат + МассивДвоичногоЧисла[Инд];
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

Функция РазобратьДвоичноеПредставление(ДвоичноеПредставление)
	
	МассивДвоичногоЧисла = Новый Массив(СтрДлина(ДвоичноеПредставление));
	
	Для Инд = 0 По МассивДвоичногоЧисла.ВГраница() Цикл
		МассивДвоичногоЧисла[Инд] = Сред(ДвоичноеПредставление, Инд + 1, 1);
	КонецЦикла;
	
	Возврат МассивДвоичногоЧисла;
	
КонецФункции

Функция НовыйРазмерКартинки(ШиринаРамки, ВысотаРамки, ШиринаКартинки, ВысотаКартинки)
	
	НоваяШирина = ШиринаРамки;
	НоваяВысота = НоваяШирина * ВысотаКартинки / ШиринаКартинки;
	
	НоваяШирина = Окр(НоваяШирина, 0);
	НоваяВысота = Окр(НоваяВысота, 0);
	
	Возврат Новый Структура("Ширина,Высота", НоваяШирина, НоваяВысота);
	
КонецФункции

#КонецОбласти

#Область РаботаСПараметрамиШаблона

Функция НовыйОписаниеПараметраШаблона()
	
	Описание = Новый Структура;
	Описание.Вставить("Ключ", "");
	Описание.Вставить("Представление", "");
	Описание.Вставить("Формат", "");
	Описание.Вставить("ДопустимыеФорматы", Новый СписокЗначений);
	Описание.Вставить("ОписаниеТипов", Неопределено);
	Описание.Вставить("Элементы", Неопределено);
	Описание.Вставить("Значение", Неопределено);
	Описание.Вставить("ТаблицаВладелец", Неопределено);
	Описание.Вставить("Вид", "");
	Описание.Вставить("ДополнительныеПараметры", Новый Структура);
	Описание.Вставить("ПараметрыКартинки", Неопределено);
	Описание.Вставить("СовместимыеПараметры", Новый Массив);
	
	Возврат Описание;
	
КонецФункции

Функция НовыйПараметрыВывода(ЗаписьXML, СтруктураДокумента)
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ЗаписьXML", ЗаписьXML);
	ПараметрыВывода.Вставить("КопияТаблицы", ПолучитьИмяВременногоФайла("xml"));
	ПараметрыВывода.Вставить("КопияСтрокиТаблицы", ПолучитьИмяВременногоФайла("xml"));
	ПараметрыВывода.Вставить("ТаблицыСодержащиеДанныеТЧ", Новый Соответствие);
	ПараметрыВывода.Вставить("Расширение", СтруктураДокумента.Расширение);
	ПараметрыВывода.Вставить("СтруктураДокумента", СтруктураДокумента);
	ПараметрыВывода.Вставить("Ошибки", Неопределено);
	
	Возврат ПараметрыВывода;
	
КонецФункции

Функция ПолучитьЗначениеПараметра(ОписаниеПараметров, ИмяПараметра)
	
	ОписаниеПараметра = ОписаниеПараметра(ОписаниеПараметров, ИмяПараметра, Истина);
	
	Если ОписаниеПараметра = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЗначениеПараметра = ОписаниеПараметра.Значение;
	
	Если ОписаниеПараметра.Формат <> Неопределено И НЕ ПустаяСтрока(ОписаниеПараметра.Формат) Тогда
		ЗначениеПараметра = Формат(ЗначениеПараметра, ОписаниеПараметра.Формат);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Процедура ВывестиЗначениеПараметраДокумента(ОписаниеПараметров, ПараметрыВывода, ИмяПараметра)
	
	ЗначениеПараметра = ПолучитьЗначениеПараметра(ОписаниеПараметров, ИмяПараметра);
	ЗначениеПараметра = Строка(ЗначениеПараметра);
	
	Если НЕ ПустаяСтрока(ЗначениеПараметра) Тогда
		КодироватьСпецСимволы(ЗначениеПараметра);
		ЗаменитьСимволыПереносаСтроки(ЗначениеПараметра, ПараметрыВывода.Расширение);
	КонецЕсли;
	
	ПараметрыВывода.ЗаписьXML.ЗаписатьБезОбработки(ЗначениеПараметра);
	
КонецПроцедуры

Процедура ВывестиТаблицуПараметровДокумента(ПараметрыПечати, ОписаниеПараметров, ПараметрыВывода, НомерТаблицы)
	
	ИмяТаблицы = ПараметрыВывода.ТаблицыСодержащиеДанныеТЧ.Получить(НомерТаблицы);
	
	Если ИмяТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.Вставить("НомерТаблицы", НомерТаблицы);
	Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ПриВыводеТаблицыПараметровШаблона(ПараметрыПечати, ИмяТаблицы, ОписаниеПараметров, ПараметрыВывода);
	ПараметрыВывода.Удалить("НомерТаблицы");
	
КонецПроцедуры

Процедура ОчиститьЗначенияПараметровКартинки(ОписаниеПараметра)
	
	Если НЕ ОписаниеПараметра.Свойство("ПараметрыКартинки") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеПараметра.ПараметрыКартинки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПараметра.ПараметрыКартинки = Неопределено;
	
КонецПроцедуры

Функция ПолучитьЗначенияНайденныхПараметров(ОбъектПечати, ДанныеШаблона, НайденныеПараметры, ДополнительныеПараметры)
	
	ОписаниеПараметров = ПолучитьОписаниеПараметров(НайденныеПараметры, ДанныеШаблона.Назначение, ДанныеШаблона.Ссылка);
	
	ПриПолученииЗначенийПараметровШаблона(ОписаниеПараметров);
	
	Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ПриПолученииЗначенийПараметровШаблона(ОбъектПечати, ДанныеШаблона.Назначение, ОписаниеПараметров, ДополнительныеПараметры);
	
	ЗаполнитьЗначенияСклоняемыхПараметров(ОписаниеПараметров);
	
	Возврат ОписаниеПараметров;
	
КонецФункции

Процедура ЗаполнитьЗначенияСклоняемыхПараметров(ОписаниеПараметров)
	
	Для каждого ОписаниеПараметра Из ОписаниеПараметров Цикл
		
		Падеж = ПадежСклоняемогоПараметра(ОписаниеПараметра.Ключ);
		
		Если Падеж = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеИсходногоПараметра = ОписаниеПараметра(ОписаниеПараметров, КлючИсходногоСклоняемогоПараметра(ОписаниеПараметра.Ключ), Истина);
		
		Если ОписаниеИсходногоПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПараметра.Значение = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(ОписаниеИсходногоПараметра.Значение), Падеж, ОписаниеИсходногоПараметра.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТабличныеЧастиДокумента(СтруктураДокумента, ОписаниеПараметров)
	
	Если СтруктураДокумента.Расширение = "docx" Тогда
		Возврат НайтиТаблицыСодержащиеДанныеТЧДокументаDOCX(СтруктураДокумента, ОписаниеПараметров);
	ИначеЕсли СтруктураДокумента.Расширение = "odt" Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
КонецФункции

Функция НайтиОписаниеПараметраРекурсивно(ОписаниеПараметров, КлючПараметра, ИскатьПоСовместимым = Ложь)
	
	НайденноеОписание = Неопределено;
	
	Для каждого ОписаниеПараметра Из ОписаниеПараметров Цикл
		
		Если ОписаниеПараметра.Элементы <> Неопределено Тогда
			НайденноеОписание = НайтиОписаниеПараметраРекурсивно(ОписаниеПараметра.Элементы, КлючПараметра, ИскатьПоСовместимым);
		КонецЕсли;
		
		Если НайденноеОписание <> Неопределено Тогда
			Возврат НайденноеОписание;
		КонецЕсли;
		
		Если ОписаниеПараметра.Ключ = КлючПараметра Тогда
			Возврат ОписаниеПараметра;
		КонецЕсли;
		
		Если ИскатьПоСовместимым И ОписаниеПараметра.СовместимыеПараметры.Найти(КлючПараметра) <> Неопределено Тогда
			Возврат ОписаниеПараметра;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция НайтиОписаниеПараметровРекурсивно(ОписаниеПараметров, ПрефиксКлючПараметра, НайденныеОписания)
	
	Для каждого ОписаниеПараметра Из ОписаниеПараметров Цикл
		
		Если ОписаниеПараметра.Элементы <> Неопределено Тогда
			НайтиОписаниеПараметровРекурсивно(ОписаниеПараметра.Элементы, ПрефиксКлючПараметра, НайденныеОписания);
		КонецЕсли;
		
		Если НЕ СтрНачинаетсяС(ОписаниеПараметра.Ключ, ПрефиксКлючПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеОписания.Добавить(ОписаниеПараметра);
		
	КонецЦикла;
	
КонецФункции

Функция ДобавитьКартинкуВСтруктуруДокумента(СтруктураДокумента, ДвоичныеДанные, Расширение)
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Иначе
		СсылкаНаДвоичныеДанныеФайла = ДвоичныеДанные;
	КонецЕсли;
	
	ПараметрыКартинки = Новый Структура;
	ПараметрыКартинки.Вставить("СсылкаДвоичныеДанные", СсылкаНаДвоичныеДанныеФайла);
	ПараметрыКартинки.Вставить("Расширение", Расширение);
	
	ДобавитьКартинкуВСтруктуруДокументаDOCX(СтруктураДокумента, ПараметрыКартинки);
	
	Возврат ПараметрыКартинки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйЧтениеXML(ПутьКФайлу)
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	Возврат ЧтениеXML;
	
КонецФункции

Функция НовыйЗаписьXML(ПутьКФайлу)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.Отступ = Ложь;
	ЗаписьXML.ОткрытьФайл(ПутьКФайлу);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	Возврат ЗаписьXML;
	
КонецФункции

Функция ПереопределенныеФорматыШаблона(Шаблон)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СвойстваПараметровШаблона.Ссылка КАК Ссылка,
	|	СвойстваПараметровШаблона.Параметр КАК Параметр,
	|	СвойстваПараметровШаблона.Формат КАК Формат
	|ИЗ
	|	Справочник.ШаблоныПечатиОфисныхДокументов.СвойстваПараметровШаблона КАК СвойстваПараметровШаблона
	|ГДЕ
	|	СвойстваПараметровШаблона.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Шаблон);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СтруктураДокумента(Файл, УникальныйИдентификатор = Неопределено)
	
	Если УникальныйИдентификатор = Неопределено Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ОжидаемыеТипы = Новый Массив;
	ОжидаемыеТипы.Добавить(Тип("Структура"));
	ОжидаемыеТипы.Добавить(Тип("СправочникСсылка.ШаблоныПечатиОфисныхДокументовПрисоединенныеФайлы"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ШаблоныПечатиОфисныхДокументов.СтруктураДокумента", "Файл", Файл, ОжидаемыеТипы);
	
	Если ТипЗнч(Файл) = Тип("СправочникСсылка.ШаблоныПечатиОфисныхДокументовПрисоединенныеФайлы") Тогда
		
		ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
		ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Истина;
		
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Файл, ПараметрыДанныхФайла);
		
	ИначеЕсли ТипЗнч(Файл) = Тип("Структура") Тогда
		ДанныеФайла = Файл;
	КонецЕсли;
	
	КаталогСтруктураФайла = ПолучитьСтруктуруФайловДокумента(ДанныеФайла);
	
	Расширение = НРег(ДанныеФайла.Расширение);
	
	СтруктураДокумента = Новый Структура;    // переименовать в структура документа
	СтруктураДокумента.Вставить("КаталогСтруктураФайла", КаталогСтруктураФайла);
	СтруктураДокумента.Вставить("Расширение", Расширение);
	СтруктураДокумента.Вставить("ВременныеФайлы", Новый Массив);
	
	Если Расширение = "docx" Тогда
		СтруктураДокумента.Вставить("ПутьКФайлу", КаталогСтруктураФайла + "\word\document.xml");
		СтруктураДокумента.Вставить("ПутьКФайлуЗамены", КаталогСтруктураФайла + "\word\document_update.xml");
		СтруктураДокумента.Вставить("КаталогКартинок", КаталогСтруктураФайла + "\word\media");
		
		ПрочитатьФайлСвязейДокументаDOCX(СтруктураДокумента);
		ПрочитатьФайлТипыКонтентаДокументаDOCX(СтруктураДокумента);
	ИначеЕсли Расширение = "odt" Тогда
		СтруктураДокумента.Вставить("ПутьКФайлу", КаталогСтруктураФайла + "\content.xml");
		СтруктураДокумента.Вставить("ПутьКФайлуЗамены", КаталогСтруктураФайла + "\content_update.xml");
	КонецЕсли;
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ДокументИзСтруктуры(СтруктураДокумента)
	
	Возврат ПолучитьДвоичныеДанныеДокументаИзСтруктурыФайлов(СтруктураДокумента.КаталогСтруктураФайла, СтруктураДокумента.Расширение);
	
КонецФункции

Функция ОпределитьВспомогательныеПараметрыПечати(ОбъектПечати, Шаблон)
	
	ДополнительныеПараметры = Новый Структура;
	
	Если Шаблон.Назначение = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента Тогда
		
		Документ = Неопределено;
		
		Если ТипЗнч(ОбъектПечати) = Тип("ДокументСсылка.ЗаказПокупателя")
			ИЛИ ТипЗнч(ОбъектПечати) = Тип("ДокументСсылка.СчетНаОплату") Тогда
			Документ = ОбъектПечати;
			ОбъектПечати = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Договор");
		ИначеЕсли ТипЗнч(ОбъектПечати) = Тип("СправочникСсылка.Контрагенты") Тогда
			ОбъектПечати = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(ОбъектПечати);
		КонецЕсли;
		
		Если Документ <> Неопределено Тогда
			ДополнительныеПараметры.Вставить("Документ", Документ);
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Организация");
		ИначеЕсли ТипЗнч(ОбъектПечати) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПечати, "Организация");
		Иначе
			Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
		ДополнительныеПараметры.Вставить("Организация", Организация);
		
	ИначеЕсли Шаблон.Назначение = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказ
		ИЛИ Шаблон.Назначение = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказНаряд
		ИЛИ Шаблон.Назначение = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаСчет Тогда
		
		Документ = ОбъектПечати;
		ИмяДокумента = Документ.Метаданные().Имя;
		ОбъектПечати = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Договор");
		
		ДополнительныеПараметры.Вставить(ИмяДокумента, Документ);
		ДополнительныеПараметры.Вставить("Договор", ОбъектПечати);
		ДополнительныеПараметры.Вставить("Организация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Организация"));
		
	ИначеЕсли Шаблон.Назначение = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.КоммерческоеПредложение Тогда
		
		ДополнительныеПараметры.Вставить("ЗаказПокупателя", ОбъектПечати);
		
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("НазначениеШаблона", Шаблон.Назначение);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция КлючИсходногоСклоняемогоПараметра(КлючПараметра)
	
	Падежи = Новый Массив;
	Падежи.Добавить("РодительныйПадеж");
	Падежи.Добавить("ДательныйПадеж");
	Падежи.Добавить("ВинительныйПадеж");
	Падежи.Добавить("ТворительныйПадеж");
	Падежи.Добавить("ПредложныйПадеж");
	
	Падеж = Неопределено;
	
	Для каждого ТекущийПадеж Из Падежи Цикл
		Если СтрЗаканчиваетсяНа(КлючПараметра, ТекущийПадеж) Тогда
			Падеж = ТекущийПадеж;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Падеж = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Лев(КлючПараметра, СтрДлина(КлючПараметра) - СтрДлина(Падеж));
	
КонецФункции

Процедура ДополнитьСписокСклоняемыхПараметровИсходными(СписокПараметров)
	
	ПараметрыДляДобавления = Новый Массив;
	
	Для каждого КлючПараметра Из СписокПараметров Цикл
		
		Падеж = ПадежСклоняемогоПараметра(КлючПараметра);
		
		Если Падеж = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КлючИсходногоСклоняемогоПараметра = КлючИсходногоСклоняемогоПараметра(КлючПараметра);
		
		Если ПараметрыДляДобавления.Найти(КлючИсходногоСклоняемогоПараметра) = Неопределено
			И СписокПараметров.Найти(КлючИсходногоСклоняемогоПараметра) = Неопределено Тогда
			ПараметрыДляДобавления.Добавить(КлючИсходногоСклоняемогоПараметра);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокПараметров, ПараметрыДляДобавления);
	
КонецПроцедуры

Функция ПадежСклоняемогоПараметра(КлючПараметра)
	
	Падежи = Новый Соответствие;
	Падежи.Вставить("РодительныйПадеж",  2);
	Падежи.Вставить("ДательныйПадеж",    3);
	Падежи.Вставить("ВинительныйПадеж",  4);
	Падежи.Вставить("ТворительныйПадеж", 5);
	Падежи.Вставить("ПредложныйПадеж",   6);
	
	Для каждого ТекущийПадеж Из Падежи Цикл
		Если СтрЗаканчиваетсяНа(КлючПараметра, ТекущийПадеж.Ключ) Тогда
			Возврат ТекущийПадеж.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИмяПараметраВидКонтактнойИнформации(ВидКонтактнойИнформацииНаименование) Экспорт
	
	Если СтрНайти(ВидКонтактнойИнформацииНаименование, " ")
		ИЛИ СтрНайти(ВидКонтактнойИнформацииНаименование, ".")
		ИЛИ СтрНайти(ВидКонтактнойИнформацииНаименование, "-") Тогда
		
		Возврат СтрШаблон("[%1]", ВидКонтактнойИнформацииНаименование);
	Иначе
		Возврат ВидКонтактнойИнформацииНаименование;
	КонецЕсли;
	
КонецФункции

Функция ТаблицаСпецсимволов()
	
	ОписаниеСимволов = Новый Массив;
	
	ОписаниеСимвола = Новый Структура;
	ОписаниеСимвола.Вставить("Символ", "&");
	ОписаниеСимвола.Вставить("Код",    "&amp;");
	ОписаниеСимволов.Добавить(ОписаниеСимвола);
	
	ОписаниеСимвола = Новый Структура;
	ОписаниеСимвола.Вставить("Символ", """");
	ОписаниеСимвола.Вставить("Код",    "&quot;");
	ОписаниеСимволов.Добавить(ОписаниеСимвола);
	
	ОписаниеСимвола = Новый Структура;
	ОписаниеСимвола.Вставить("Символ", "<");
	ОписаниеСимвола.Вставить("Код",    "&lt;");
	ОписаниеСимволов.Добавить(ОписаниеСимвола);
	
	ОписаниеСимвола = Новый Структура;
	ОписаниеСимвола.Вставить("Символ", ">");
	ОписаниеСимвола.Вставить("Код",    "&gt;");
	ОписаниеСимволов.Добавить(ОписаниеСимвола);
	
	ОписаниеСимвола = Новый Структура;
	ОписаниеСимвола.Вставить("Символ", "'");
	ОписаниеСимвола.Вставить("Код",    "&apos;");
	ОписаниеСимволов.Добавить(ОписаниеСимвола);
	
	Возврат ОписаниеСимволов;
	
КонецФункции

Процедура КодироватьСпецСимволы(Строка)
	
	Для каждого ОписаниеСимвола Из ТаблицаСпецсимволов() Цикл
		Строка = СтрЗаменить(Строка, ОписаниеСимвола.Символ, ОписаниеСимвола.Код);
	КонецЦикла;
	
КонецПроцедуры

Процедура РаскодироватьСпецСимволы(Строка)
	
	Для каждого ОписаниеСимвола Из ТаблицаСпецсимволов() Цикл
		Строка = СтрЗаменить(Строка, ОписаниеСимвола.Код, ОписаниеСимвола.Символ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьСимволыПереносаСтроки(Строка, Расширение)
	
	СтрокаЗамены = "";
	
	Если Расширение = "docx" Тогда
		СтрокаЗамены = "<w:br/>";
	ИначеЕсли Расширение = "odt" Тогда
		СтрокаЗамены = "<text:line-break/>";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЗамены) Тогда
		Возврат;
	КонецЕсли;
	
	Строка = СтрЗаменить(Строка, Символы.ПС, СтрокаЗамены);
	
КонецПроцедуры

Функция ЭтаТаблицаВыводитсяИзБуфера(ПараметрыЧтенияXML, ПараметрыВывода)
	
	Возврат ПараметрыВывода.ТаблицыСодержащиеДанныеТЧ.Получить(ПараметрыЧтенияXML.Таблица.ПорядковыйНомер) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокументаDOCX

Процедура ПрочитатьФайлСвязейДокументаDOCX(СтруктураДокумента)
	
	ТаблицаСвязей = Новый ТаблицаЗначений;
	ТаблицаСвязей.Колонки.Добавить("ИмяРесурса",   Новый ОписаниеТипов("Строка"));
	ТаблицаСвязей.Колонки.Добавить("ИдРесурса",    Новый ОписаниеТипов("Строка"));
	ТаблицаСвязей.Колонки.Добавить("НомерРесурса", Новый ОписаниеТипов("Число"));
	ТаблицаСвязей.Колонки.Добавить("Новая",        Новый ОписаниеТипов("Булево"));
	
	СтруктураДокумента.Вставить("СвязиКонтента", Новый Структура);
	СтруктураДокумента.СвязиКонтента.Вставить("ПутьКФайлу", СтруктураДокумента.КаталогСтруктураФайла + "\word\_rels");
	СтруктураДокумента.СвязиКонтента.Вставить("ПутьКФайлуЗамены", СтруктураДокумента.КаталогСтруктураФайла + "\word\_rels" + "_update");
	СтруктураДокумента.СвязиКонтента.Вставить("ТаблицаСвязей", ТаблицаСвязей);
	
	ПутьКФайлуСвязей = СтруктураДокумента.КаталогСтруктураФайла + "\word\_rels";
	МаскаСвязей = "document.xml.rels";
	
	ФайлСвязей = НайтиФайлы(ПутьКФайлуСвязей, МаскаСвязей);
	Если ФайлСвязей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДокумента.СвязиКонтента.Вставить("ПутьКФайлу", ФайлСвязей[0].ПолноеИмя);
	СтруктураДокумента.СвязиКонтента.Вставить("ПутьКФайлуЗамены", СтруктураДокумента.СвязиКонтента.ПутьКФайлу + "_update");
	
	ЧтениеXML = НовыйЧтениеXML(СтруктураДокумента.СвязиКонтента.ПутьКФайлу);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		ЭтоОписаниеСвязи = ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Relationship";
		
		Если НЕ ЭтоОписаниеСвязи Тогда
			Продолжить;;
		КонецЕсли;
		
		ИдРесурса    = ЧтениеXML.ПолучитьАтрибут("Id");
		НомерРесурса = Число(СтрЗаменить(СокрЛП(ИдРесурса),"rId",""));
		
		НоваяСтрока = ТаблицаСвязей.Добавить();
		НоваяСтрока.ИмяРесурса   = ЧтениеXML.ПолучитьАтрибут("Target");
		НоваяСтрока.ИдРесурса    = ИдРесурса;
		НоваяСтрока.НомерРесурса = НомерРесурса;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

Процедура ЗаписатьФайлСвязейДокументаDOCX(СтруктураДокумента)
	
	НовыеСвязиДокумента = СтруктураДокумента.СвязиКонтента.ТаблицаСвязей.НайтиСтроки(Новый Структура("Новая", Истина));
	
	Если НовыеСвязиДокумента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = НовыйЧтениеXML(СтруктураДокумента.СвязиКонтента.ПутьКФайлу);
	ЗаписьXML = НовыйЗаписьXML(СтруктураДокумента.СвязиКонтента.ПутьКФайлуЗамены);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		ЭтоКонецДокумента = ЧтениеXML.Имя = "Relationships" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента;
		
		Если ЭтоКонецДокумента Тогда
			ТипСвязи = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image";
			Для каждого НоваяСвязь Из НовыеСвязиДокумента Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("Relationship");
				ЗаписьXML.ЗаписатьАтрибут("Id", НоваяСвязь.ИдРесурса);
				ЗаписьXML.ЗаписатьАтрибут("Type", ТипСвязи);
				ЗаписьXML.ЗаписатьАтрибут("Target", НоваяСвязь.ИмяРесурса);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
			КонецЦикла;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	ЗаписьXML.Закрыть();
	
	ПереместитьФайл(СтруктураДокумента.СвязиКонтента.ПутьКФайлуЗамены, СтруктураДокумента.СвязиКонтента.ПутьКФайлу);
	СтруктураДокумента.ВременныеФайлы.Добавить(СтруктураДокумента.СвязиКонтента.ПутьКФайлуЗамены);
	
КонецПроцедуры

Процедура ПрочитатьФайлТипыКонтентаДокументаDOCX(СтруктураДокумента)
	
	ТаблицаТипов = Новый ТаблицаЗначений;
	ТаблицаТипов.Колонки.Добавить("ContentType", Новый ОписаниеТипов("Строка"));
	ТаблицаТипов.Колонки.Добавить("Extension",   Новый ОписаниеТипов("Строка"));
	ТаблицаТипов.Колонки.Добавить("Новая", Новый ОписаниеТипов("Булево"));
	
	СтруктураДокумента.Вставить("ТипыКонтента", Новый Структура);
	СтруктураДокумента.ТипыКонтента.Вставить("ПутьКФайлу", СтруктураДокумента.КаталогСтруктураФайла + "[Content_Types].xml");
	СтруктураДокумента.ТипыКонтента.Вставить("ПутьКФайлуЗамены", СтруктураДокумента.КаталогСтруктураФайла + "_update");
	СтруктураДокумента.ТипыКонтента.Вставить("ТаблицаТипов", ТаблицаТипов);
	
	ЧтениеXML = НовыйЧтениеXML(СтруктураДокумента.ТипыКонтента.ПутьКФайлу);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		ЭтоОписаниеТипаКонтента = ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Default";
		
		Если НЕ ЭтоОписаниеТипаКонтента Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТипов.Добавить();
		НоваяСтрока.ContentType = ЧтениеXML.ПолучитьАтрибут("ContentType");
		НоваяСтрока.Extension = ЧтениеXML.ПолучитьАтрибут("Extension");
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

Процедура ЗаписатьФайлТипыКонтентаДокументаDOCX(СтруктураДокумента)
	
	НовыеТипыКонтента = СтруктураДокумента.ТипыКонтента.ТаблицаТипов.НайтиСтроки(Новый Структура("Новая", Истина));
	
	Если НовыеТипыКонтента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = НовыйЧтениеXML(СтруктураДокумента.ТипыКонтента.ПутьКФайлу);
	ЗаписьXML = НовыйЗаписьXML(СтруктураДокумента.ТипыКонтента.ПутьКФайлуЗамены);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		ЭтоКонецДокумента = ЧтениеXML.Имя = "Types" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента;
		
		Если ЭтоКонецДокумента Тогда
			ТипСвязи = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image";
			Для каждого НовыйТип Из НовыеТипыКонтента Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("Default");
				ЗаписьXML.ЗаписатьАтрибут("ContentType", НовыйТип.ContentType);
				ЗаписьXML.ЗаписатьАтрибут("Extension", НовыйТип.Extension);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
			КонецЦикла;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	ЗаписьXML.Закрыть();
	
	ПереместитьФайл(СтруктураДокумента.ТипыКонтента.ПутьКФайлуЗамены, СтруктураДокумента.ТипыКонтента.ПутьКФайлу);
	СтруктураДокумента.ВременныеФайлы.Добавить(СтруктураДокумента.ТипыКонтента.ПутьКФайлуЗамены);
	
КонецПроцедуры

Функция НовыйПараметрыЧтенияXMLДокументаDOCX()
	
	ПараметрыЧтенияXML = Новый Структура;
	ПараметрыЧтенияXML.Вставить("НайденоПоле",        Ложь);
	ПараметрыЧтенияXML.Вставить("НайденТекстПоля",    Ложь);
	ПараметрыЧтенияXML.Вставить("КорневойЭлемент",    Ложь);
	ПараметрыЧтенияXML.Вставить("ЭлементТекущийИмя",  "");
	ПараметрыЧтенияXML.Вставить("ЭлементРодительИмя", "");
	ПараметрыЧтенияXML.Вставить("ИмяПараметра",       "");
	ПараметрыЧтенияXML.Вставить("ВидПараметра",       "");
	ПараметрыЧтенияXML.Вставить("ЗначениеПараметраВыведено", Ложь);
	
	ПараметрыЧтенияТаблицы = Новый Структура;
	ПараметрыЧтенияТаблицы.Вставить("ОткрытоЧтение",          Ложь);
	ПараметрыЧтенияТаблицы.Вставить("ЗакрытоЧтение",          Ложь);
	ПараметрыЧтенияТаблицы.Вставить("ПродолжаетсяЧтение",     Ложь);
	ПараметрыЧтенияТаблицы.Вставить("НайденаЭталоннаяСтрока", Ложь);
	ПараметрыЧтенияТаблицы.Вставить("СодержитДанныеТЧ",       Ложь);
	ПараметрыЧтенияТаблицы.Вставить("ПорядковыйНомер",        0);
	ПараметрыЧтенияТаблицы.Вставить("ТекущаяСтрокаТаблицы",   0);
	ПараметрыЧтенияТаблицы.Вставить("ТекущаяКолонкаТаблицы",  0);
	
	ПараметрыЧтенияКартинки = Новый Структура;
	ПараметрыЧтенияКартинки.Вставить("ПродолжаетсяЧтение", Ложь);
	
	ПараметрыЧтенияXML.Вставить("Таблица", ПараметрыЧтенияТаблицы);
	ПараметрыЧтенияXML.Вставить("Картинка", ПараметрыЧтенияКартинки);
	
	Возврат ПараметрыЧтенияXML;
	
КонецФункции

Процедура ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML)
	
	Если ПараметрыЧтенияXML = Неопределено Тогда
		ПараметрыЧтенияXML = НовыйПараметрыЧтенияXMLДокументаDOCX();
		Возврат;
	КонецЕсли;
	
	КэшТаблицаПродолжаетсяЧтение = ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение;
	КэшНайденоПоле = ПараметрыЧтенияXML.НайденоПоле;
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		ПараметрыЧтенияXML.ЭлементРодительИмя = ПараметрыЧтенияXML.ЭлементТекущийИмя;
		ПараметрыЧтенияXML.ЭлементТекущийИмя = ЧтениеXML.Имя;
		
	КонецЕсли;
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента ИЛИ ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		
		Если ПараметрыЧтенияXML.КорневойЭлемент <> Неопределено Тогда
			ПараметрыЧтенияXML.КорневойЭлемент = ЧтениеXML.Имя = "w:document";
		КонецЕсли;
		
		Если ЧтениеXML.Имя = "w:fldChar" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ПараметрыЧтенияXML.НайденоПоле = Истина;
		КонецЕсли;
		
		Если ЧтениеXML.Имя = "w:fldChar" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ПараметрыЧтенияXML.ИмяПараметра = "" Тогда
			ПараметрыЧтенияXML.НайденоПоле = Ложь;
		КонецЕсли;
		
		Если ЧтениеXML.Имя = "w:alias" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ПараметрыЧтенияXML.ЭлементРодительИмя = "w:sdtPr" Тогда
			ПараметрыЧтенияXML.НайденоПоле = Истина;
		КонецЕсли;
		
		Если ЧтениеXML.Имя = "w:alias" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ПараметрыЧтенияXML.НайденоПоле = Ложь;
		КонецЕсли;
		
		Если ЧтениеXML.Имя = "w:t" Тогда
			ПараметрыЧтенияXML.НайденТекстПоля = (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента);
		КонецЕсли;
		
		Если ЧтениеXML.Имя = "w:tbl" Тогда
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				Если ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение Тогда
					ПараметрыЧтенияXML.Таблица.СодержитДанныеТЧ = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение = (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента);
			ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы = 0;
			ПараметрыЧтенияXML.Таблица.ТекущаяКолонкаТаблицы = 0;
			
		КонецЕсли;
		
		Если ЧтениеXML.Имя = "w:tr" И ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение Тогда
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы = ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы + 1;
				ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока = (ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы = 2);
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				ПараметрыЧтенияXML.Таблица.ТекущаяКолонкаТаблицы = 0;
				ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЧтениеXML.Имя = "w:tc" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ПараметрыЧтенияXML.Таблица.ТекущаяКолонкаТаблицы = ПараметрыЧтенияXML.Таблица.ТекущаяКолонкаТаблицы + 1;
		КонецЕсли;
		
		Если ЧтениеXML.Имя = "w:sdt" Тогда
			ПараметрыЧтенияXML.Картинка.ПродолжаетсяЧтение = ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут Тогда
		
		Если ПараметрыЧтенияXML.НайденоПоле И ЧтениеXML.Имя = "w:fldCharType" Тогда
			Если ЧтениеXML.Значение = "end" Тогда
				ПараметрыЧтенияXML.НайденоПоле = Ложь;
				ПараметрыЧтенияXML.ИмяПараметра = "";
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыЧтенияXML.НайденоПоле И ЧтениеXML.Имя = "w:val" И ПараметрыЧтенияXML.ЭлементТекущийИмя = "w:alias" И ПараметрыЧтенияXML.ЭлементРодительИмя = "w:sdtPr" Тогда
			ПараметрыЧтенияXML.ИмяПараметра = ЧтениеXML.Значение;
			ПараметрыЧтенияXML.ВидПараметра = ВидПараметраИзображение();
		КонецЕсли;
		
		Если ПараметрыЧтенияXML.НайденоПоле И ЧтениеXML.Имя = "w:val" И ПараметрыЧтенияXML.ЭлементТекущийИмя = "w:default" И ПараметрыЧтенияXML.ЭлементРодительИмя = "w:textInput" Тогда
			ПараметрыЧтенияXML.ИмяПараметра = ЧтениеXML.Значение;
			ПараметрыЧтенияXML.ВидПараметра = ВидПараметраТекст();
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыЧтенияXML.Таблица.ОткрытоЧтение = НЕ КэшТаблицаПродолжаетсяЧтение И ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение;
	ПараметрыЧтенияXML.Таблица.ЗакрытоЧтение = КэшТаблицаПродолжаетсяЧтение И НЕ ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение;
	
	Если НЕ КэшНайденоПоле И ПараметрыЧтенияXML.НайденоПоле Тогда
		ПараметрыЧтенияXML.ЗначениеПараметраВыведено = Ложь;
	КонецЕсли;
	
	Если ПараметрыЧтенияXML.Таблица.ОткрытоЧтение Тогда
		ПараметрыЧтенияXML.Таблица.ПорядковыйНомер = ПараметрыЧтенияXML.Таблица.ПорядковыйНомер + 1;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыЧтенияXML.ИмяПараметра) Тогда
		РаскодироватьСпецСимволы(ПараметрыЧтенияXML.ИмяПараметра);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыИзДокументаDOCX(ПутьКФайлу)
	
	ПараметрыИзДокумента = Новый Массив;
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если НЕ ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;
		
		ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
		
		Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если НЕ ЗначениеЗаполнено(ПараметрыЧтенияXML.ИмяПараметра) Тогда
				Продолжить;
			КонецЕсли;
			
			Параметр = ПараметрыЧтенияXML.ИмяПараметра;
			РаскодироватьСпецСимволы(Параметр);
			
			Если ПараметрыИзДокумента.Найти(Параметр) = Неопределено Тогда
				ПараметрыИзДокумента.Добавить(Параметр);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат ПараметрыИзДокумента;
	
КонецФункции

Процедура ПоместитьВБуферТаблицыСтрокиДокументаDOCX(СтруктураДокумента, ПараметрыВывода, ОписаниеПараметров)
	
	ЧтениеXML = НовыйЧтениеXML(СтруктураДокумента.ПутьКФайлу);
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
	
	ЗаписьXMLТаблица = НовыйЗаписьXML(ПараметрыВывода.КопияТаблицы);
	ЗаписьXMLСтрока = НовыйЗаписьXML(ПараметрыВывода.КопияСтрокиТаблицы);
	
	ТаблицаНайденаЭталоннаяСтрокаКэш = Ложь;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ТаблицаНайденаКэш = ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение;
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если НЕ ТаблицаНайденаЭталоннаяСтрокаКэш И ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
				ТаблицаНайденаЭталоннаяСтрокаКэш = Истина;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.Таблица.ОткрытоЧтение Тогда
				ТаблицаНайденаЭталоннаяСтрокаКэш = Ложь;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
				ЗаписьXMLТаблица.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
				ЗаписьXMLСтрока.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение Тогда
				ЗаписьXMLТаблица.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
				Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					ЗаписьXMLСтрока.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
				КонецЕсли;
			КонецЕсли;
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
				
				Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
					ЗаписьXMLТаблица.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
					ЗаписьXMLСтрока.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
				ИначеЕсли ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение Тогда
					ЗаписьXMLТаблица.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
					Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
						ЗаписьXMLСтрока.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение И НЕ ПараметрыЧтенияXML.Таблица.СодержитДанныеТЧ И ЗначениеЗаполнено(ПараметрыЧтенияXML.ИмяПараметра) Тогда
				
				ОписаниеПараметра = ОписаниеПараметра(ОписаниеПараметров, ПараметрыЧтенияXML.ИмяПараметра);
				Если ОписаниеПараметра <> Неопределено И ОписаниеПараметра.ТаблицаВладелец <> Неопределено Тогда
					ПараметрыВывода.ТаблицыСодержащиеДанныеТЧ.Вставить(ПараметрыЧтенияXML.Таблица.ПорядковыйНомер, ОписаниеПараметра.ТаблицаВладелец);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение Тогда
				ЗаписьXMLТаблица.ЗаписатьТекст(ЧтениеXML.Значение);
				Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					ЗаписьXMLСтрока.ЗаписатьТекст(ЧтениеXML.Значение);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение Тогда
				ЗаписьXMLТаблица.ЗаписатьКонецЭлемента();
				Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					ЗаписьXMLСтрока.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЕсли;
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если ТаблицаНайденаКэш И НЕ ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение И НЕ ТаблицаНайденаЭталоннаяСтрокаКэш Тогда
				ЗаписьXMLСтрока.ЗаписатьБезОбработки("<w:tr/>");
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
				ЗаписьXMLТаблица.ЗаписатьКонецЭлемента();
				ЗаписьXMLСтрока.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	ЗаписьXMLСтрока.Закрыть();
	ЗаписьXMLТаблица.Закрыть();
	
КонецПроцедуры

Функция НайтиТаблицыСодержащиеДанныеТЧДокументаDOCX(СтруктураДокумента, ОписаниеПараметров)
	
	ТаблицыСодержащиеДанныеТЧ = Новый Соответствие;
	
	ЧтениеXML = НовыйЧтениеXML(СтруктураДокумента.ПутьКФайлу);
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			КонецЦикла;
			
			ЭтоПараметрВнутриТаблицы = ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение И НЕ ПараметрыЧтенияXML.Таблица.СодержитДанныеТЧ И ЗначениеЗаполнено(ПараметрыЧтенияXML.ИмяПараметра);
			
			Если НЕ ЭтоПараметрВнутриТаблицы Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеПараметра = ОписаниеПараметра(ОписаниеПараметров, ПараметрыЧтенияXML.ИмяПараметра);
			Если ОписаниеПараметра = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОписаниеПараметра.ТаблицаВладелец = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицыСодержащиеДанныеТЧ.Вставить(ПараметрыЧтенияXML.Таблица.ПорядковыйНомер, ОписаниеПараметра.ТаблицаВладелец);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат ТаблицыСодержащиеДанныеТЧ;
	
КонецФункции

Процедура НачатьПродолжитьВыводТаблицыДокументаDOCX(ОписаниеПараметров, ПараметрыВывода)
	
	НомерДобавляемойТаблицы = ПараметрыВывода.НомерТаблицы;
	
	Если ПараметрыВывода.Свойство("ВыводТаблицы") Тогда
		
		ЧтениеXML = ПараметрыВывода.ВыводТаблицы.ЧтениеXML;
		ПараметрыЧтенияXML = ПараметрыВывода.ВыводТаблицы.ПараметрыЧтенияXML;
		
	Иначе
		
		ЧтениеXML = НовыйЧтениеXML(ПараметрыВывода.КопияТаблицы);
		
		ПараметрыЧтенияXML = Неопределено;
		ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
		
	КонецЕсли;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ТаблицаНайденаКэш = ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение;
			НайденаЭталоннаяСтрокаКэш = ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока;
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если ПараметрыЧтенияXML.Таблица.ПорядковыйНомер <> НомерДобавляемойТаблицы Тогда
				Продолжить;
			КонецЕсли;
			
			Если НайденаЭталоннаяСтрокаКэш И ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоМестоВставкиСтрокТаблицы = ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока;
			
			Если ЭтоМестоВставкиСтрокТаблицы Тогда
				
				ПараметрыВыводТаблицы = Новый Структура;
				ПараметрыВыводТаблицы.Вставить("ЧтениеXML", ЧтениеXML);
				ПараметрыВыводТаблицы.Вставить("ПараметрыЧтенияXML", ПараметрыЧтенияXML);
				ПараметрыВывода.Вставить("ВыводТаблицы", ПараметрыВыводТаблицы);
				Возврат;
				
			КонецЕсли;
			
			ПараметрыВывода.ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
				ПараметрыВывода.ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
			КонецЦикла;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если ПараметрыЧтенияXML.Таблица.ПорядковыйНомер <> НомерДобавляемойТаблицы Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоМестоВставкиЗначенияПараметра = ПараметрыЧтенияXML.НайденоПоле И ПараметрыЧтенияXML.НайденТекстПоля;
			
			Если ЭтоМестоВставкиЗначенияПараметра Тогда
				// Блок-параметр может быть разбит на несколько из-за применения стилей, но значение параметра выводится только один раз.
				Если НЕ ПараметрыЧтенияXML.ЗначениеПараметраВыведено Тогда
					ВывестиЗначениеПараметраДокумента(ОписаниеПараметров, ПараметрыВывода, ПараметрыЧтенияXML.ИмяПараметра);
					ПараметрыЧтенияXML.ЗначениеПараметраВыведено = Истина;
				КонецЕсли;
			Иначе
				ПараметрыВывода.ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
			КонецЕсли;
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ТаблицаНайденаКэш = ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение;
			НайденаЭталоннаяСтрокаКэш = ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока;
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если ТаблицаНайденаКэш И ПараметрыЧтенияXML.Таблица.ПорядковыйНомер <> НомерДобавляемойТаблицы Тогда
				Продолжить;
			КонецЕсли;
			
			Если НайденаЭталоннаяСтрокаКэш Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда 
				Продолжить;
			КонецЕсли;
			
			ПараметрыВывода.ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НачатьВыводСтрокиТаблицыДокументаDOCX(ОписаниеПараметров, ПараметрыВывода)
	
	ЧтениеXML = НовыйЧтениеXML(ПараметрыВывода.КопияСтрокиТаблицы);
	
	НомерСтроки = 0;
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ЧтениеXML.Имя = "w:tr" Тогда
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
			
			Если НомерСтроки <> ПараметрыВывода.НомерТаблицы Тогда
				Продолжить;
			КонецЕсли;
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.Картинка.ПродолжаетсяЧтение Тогда
				ПродолжитьКопированиеДокументаИсточникаDOCX(ПараметрыВывода.ЗаписьXML, ЧтениеXML, ПараметрыЧтенияXML);
				ПродолжитьВыводЭлементаКартинкаДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML, ОписаниеПараметров, ПараметрыВывода);
				Продолжить;
			КонецЕсли;
			
			ПродолжитьКопированиеДокументаИсточникаDOCX(ПараметрыВывода.ЗаписьXML, ЧтениеXML, ПараметрыЧтенияXML);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если НомерСтроки <> ПараметрыВывода.НомерТаблицы Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоМестоВставкиЗначенияПараметра = ПараметрыЧтенияXML.НайденоПоле И ПараметрыЧтенияXML.НайденТекстПоля;
			
			Если ЭтоМестоВставкиЗначенияПараметра Тогда
				// Блок-параметр может быть разбит на несколько из-за применения стилей, но значение параметра выводится только один раз.
				Если НЕ ПараметрыЧтенияXML.ЗначениеПараметраВыведено Тогда
					ВывестиЗначениеПараметраДокумента(ОписаниеПараметров, ПараметрыВывода, ПараметрыЧтенияXML.ИмяПараметра);
					ПараметрыЧтенияXML.ЗначениеПараметраВыведено = Истина;
				КонецЕсли;
			Иначе
				ПродолжитьКопированиеДокументаИсточникаDOCX(ПараметрыВывода.ЗаписьXML, ЧтениеXML, ПараметрыЧтенияXML);
			КонецЕсли;
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если НомерСтроки <> ПараметрыВывода.НомерТаблицы Тогда
				Продолжить;
			КонецЕсли;
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			ПродолжитьКопированиеДокументаИсточникаDOCX(ПараметрыВывода.ЗаписьXML, ЧтениеXML, ПараметрыЧтенияXML);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

Процедура ПродолжитьВыводЭлементаКартинкаДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML, ОписаниеПараметров, ПараметрыВывода)
	
	КартинкаБудетВыведена = Ложь;
	ПараметрыКартинки = Неопределено;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ЭтоКнопкаВыбораКартинки = ЧтениеXML.Имя = "w:showingPlcHdr";
			Если КартинкаБудетВыведена И ЭтоКнопкаВыбораКартинки Тогда
				Продолжить;
			КонецЕсли;
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			ПродолжитьКопированиеДокументаИсточникаDOCX(ПараметрыВывода.ЗаписьXML, ЧтениеXML);
			
			ЭтоРазмерыКартинки = (ПараметрыЧтенияXML.ЭлементТекущийИмя = "wp:extent" ИЛИ ПараметрыЧтенияXML.ЭлементТекущийИмя = "a:ext")
			 И ЧтениеXML.ПолучитьАтрибут("cx") <> Неопределено И ЧтениеXML.ПолучитьАтрибут("cy") <> Неопределено;
			
			РазмерыКартинки = Неопределено;
			Если ЭтоРазмерыКартинки И КартинкаБудетВыведена Тогда
				РазмерыКартинки = НовыйРазмерКартинки(ЧтениеXML.ПолучитьАтрибут("cx"), ЧтениеXML.ПолучитьАтрибут("cy"), ПараметрыКартинки.Ширина, ПараметрыКартинки.Высота);
			КонецЕсли;
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				
				ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
				
				Если ПараметрыЧтенияXML.НайденоПоле Тогда
					ОписаниеПараметра = ОписаниеПараметра(ОписаниеПараметров, ПараметрыЧтенияXML.ИмяПараметра);
					Если ОписаниеПараметра <> Неопределено И ОписаниеПараметра.ПараметрыКартинки <> Неопределено Тогда
						КартинкаБудетВыведена = Истина;
						ПараметрыКартинки = ОписаниеПараметра.ПараметрыКартинки;
					КонецЕсли;
				КонецЕсли;
				
				// ЭтоСсылкаНаКартинку = ПараметрыЧтенияXML.НайденоПоле И ПараметрыЧтенияXML.ЭлементТекущийИмя = "r:embed" И
				// ПараметрыЧтенияXML.ЭлементРодительИмя = "a:blip";    // todo НайденоПоле должно быть истина
				ЭтоСсылкаНаКартинку = ПараметрыЧтенияXML.ЭлементТекущийИмя = "a:blip" И ЧтениеXML.Имя = "r:embed";
				Если ЭтоСсылкаНаКартинку И КартинкаБудетВыведена Тогда
					ПараметрыВывода.ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ПараметрыКартинки.rID);
					Продолжить;
				КонецЕсли;
				
				Если ЭтоРазмерыКартинки И КартинкаБудетВыведена Тогда
					Если ЧтениеXML.Имя = "cx" Тогда
						ПараметрыВывода.ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, Формат(РазмерыКартинки.Ширина, "ЧГ=0"));
						Продолжить;
					ИначеЕсли ЧтениеXML.Имя = "cy" Тогда
						ПараметрыВывода.ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, Формат(РазмерыКартинки.Высота, "ЧГ=0"));
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ПродолжитьКопированиеДокументаИсточникаDOCX(ПараметрыВывода.ЗаписьXML, ЧтениеXML, ПараметрыЧтенияXML);
				
			КонецЦикла;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			ПродолжитьКопированиеДокументаИсточникаDOCX(ПараметрыВывода.ЗаписьXML, ЧтениеXML, ПараметрыЧтенияXML);
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ЭтоКнопкаВыбораКартинки = ЧтениеXML.Имя = "w:showingPlcHdr";
			Если КартинкаБудетВыведена И ЭтоКнопкаВыбораКартинки Тогда
				Продолжить;
			КонецЕсли;
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			ПродолжитьКопированиеДокументаИсточникаDOCX(ПараметрыВывода.ЗаписьXML, ЧтениеXML, ПараметрыЧтенияXML);
			
			Если НЕ ПараметрыЧтенияXML.Картинка.ПродолжаетсяЧтение Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML, ПараметрыЧтенияXML = Неопределено)
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ПараметрыЧтенияXML <> Неопределено Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
		Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
		КонецЦикла;
		
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ПараметрыЧтенияXML = Неопределено Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
		
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		
		ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
		
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут Тогда
		
		ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыДокументаDOCX(ПараметрыПечати, ОписаниеПараметров, СтруктураДокумента, Ошибки)
	
	ЧтениеXML = НовыйЧтениеXML(СтруктураДокумента.ПутьКФайлу);
	ЗаписьXML = НовыйЗаписьXML(СтруктураДокумента.ПутьКФайлуЗамены);
	
	ПараметрыВывода = НовыйПараметрыВывода(ЗаписьXML, СтруктураДокумента);
	
	СтруктураДокумента.ВременныеФайлы.Добавить(ПараметрыВывода.КопияТаблицы);
	СтруктураДокумента.ВременныеФайлы.Добавить(ПараметрыВывода.КопияСтрокиТаблицы);
	
	ПоместитьВБуферТаблицыСтрокиДокументаDOCX(СтруктураДокумента, ПараметрыВывода, ОписаниеПараметров);
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			
			ЭтоТаблицаСодержащаяДанныеТЧ = ЭтаТаблицаВыводитсяИзБуфера(ПараметрыЧтенияXML, ПараметрыВывода);
			
			Если ПараметрыЧтенияXML.Таблица.ОткрытоЧтение И ЭтоТаблицаСодержащаяДанныеТЧ Тогда
				ВывестиТаблицуПараметровДокумента(ПараметрыПечати, ОписаниеПараметров, ПараметрыВывода, ПараметрыЧтенияXML.Таблица.ПорядковыйНомер);
			КонецЕсли;
			
			Если (ПараметрыЧтенияXML.Таблица.ОткрытоЧтение ИЛИ ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение) И ЭтоТаблицаСодержащаяДанныеТЧ Тогда
				Продолжить;
			КонецЕсли;
			
			ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML, ПараметрыЧтенияXML);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение И ЭтаТаблицаВыводитсяИзБуфера(ПараметрыЧтенияXML, ПараметрыВывода) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоМестоВставкиЗначенияПараметра = ПараметрыЧтенияXML.НайденоПоле И ПараметрыЧтенияXML.НайденТекстПоля;
			
			Если ЭтоМестоВставкиЗначенияПараметра Тогда
				// Блок-параметр может быть разбит на несколько из-за применения стилей, но значение параметра выводится только один раз.
				Если НЕ ПараметрыЧтенияXML.ЗначениеПараметраВыведено Тогда
					ВывестиЗначениеПараметраДокумента(ОписаниеПараметров, ПараметрыВывода, ПараметрыЧтенияXML.ИмяПараметра);
					ПараметрыЧтенияXML.ЗначениеПараметраВыведено = Истина;
				КонецЕсли;
			Иначе
				ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML, ПараметрыЧтенияXML);
			КонецЕсли;
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если (ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение ИЛИ ПараметрыЧтенияXML.Таблица.ЗакрытоЧтение) И ЭтаТаблицаВыводитсяИзБуфера(ПараметрыЧтенияXML, ПараметрыВывода) Тогда
				Продолжить;
			КонецЕсли;
			
			ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML, ПараметрыЧтенияXML);
			
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	ЗаписьXML.Закрыть();
	
	Ошибки = ПараметрыВывода.Ошибки;
	
КонецПроцедуры

Процедура ДобавитьКартинкуВСтруктуруДокументаDOCX(СтруктураДокумента, ПараметрыКартинки)
	
	КаталогMedia = Новый Файл(СтруктураДокумента.КаталогКартинок);
	
	Если НЕ КаталогMedia.Существует() Тогда
		СоздатьКаталог(СтруктураДокумента.КаталогКартинок);
	КонецЕсли;
	
	ТаблицаСвязей = СтруктураДокумента.СвязиКонтента.ТаблицаСвязей;
	ТаблицаСвязей.Сортировать("НомерРесурса Возр");
	
	МаксимальныйНомерРесурса = 0;
	Если ТаблицаСвязей.Количество() <> 0 Тогда
		МаксимальныйНомерРесурса = ТаблицаСвязей[ТаблицаСвязей.Количество() - 1].НомерРесурса;
	КонецЕсли;
	НомерРесурса = МаксимальныйНомерРесурса + 1;
	ИдРесурса = "rId" + Формат(НомерРесурса, "ЧГ=0");
	ИмяКартинки  = "image" + ИдРесурса + "." + ПараметрыКартинки.Расширение;
	
	НоваяСвязь = ТаблицаСвязей.Добавить();
	НоваяСвязь.ИмяРесурса   = "media/" + ИмяКартинки;
	НоваяСвязь.ИдРесурса    = ИдРесурса;
	НоваяСвязь.НомерРесурса = НомерРесурса;
	НоваяСвязь.Новая        = Истина;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыКартинки.СсылкаДвоичныеДанные);
	ДвоичныеДанные.Записать(СтруктураДокумента.КаталогКартинок + "/" + ИмяКартинки);
	
	АтрибутыИзображения = ПолучитьАтрибутыИзображения(ДвоичныеДанные);
	
	ПараметрыКартинки.Вставить("rId", ИдРесурса);
	ПараметрыКартинки.Вставить("ИмяКартинкиВСтруктуреДокумента", ИмяКартинки);
	ПараметрыКартинки.Вставить("Ширина", АтрибутыИзображения.Ширина);
	ПараметрыКартинки.Вставить("Высота", АтрибутыИзображения.Высота);
	
	ДобавитьРасширениеКартинкиВТипыКонтентаДокументаDOCX(СтруктураДокумента, ПараметрыКартинки.Расширение);
	
КонецПроцедуры

Процедура ДобавитьРасширениеКартинкиВТипыКонтентаДокументаDOCX(СтруктураДокумента, Расширение)
	
	ТаблицаТипов = СтруктураДокумента.ТипыКонтента.ТаблицаТипов;
	
	ДобавленныеТипы = ТаблицаТипов.НайтиСтроки(Новый Структура("Extension", Расширение));
	Если ДобавленныеТипы.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	НовыйТип = ТаблицаТипов.Добавить();
	НовыйТип.ContentType = "image/" + Расширение;
	НовыйТип.Extension = Расширение;
	НовыйТип.Новая = Истина;
	
КонецПроцедуры

Процедура ОтключитьЗатемнениеПолейДокументаDOCX(СтруктураДокумента)
	
	ПутьКИсходномуФайлу = СтруктураДокумента.КаталогСтруктураФайла + "/word/settings.xml";
	ПутьКНовомуФайлу = СтруктураДокумента.КаталогСтруктураФайла + "/word/settings_update.xml";
	
	ЧтениеXML = НовыйЧтениеXML(ПутьКИсходномуФайлу);
	
	ТребуетсяДобавитьНастройку = Истина;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "w:doNotShadeFormData" Тогда
			ТребуетсяДобавитьНастройку = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ТребуетсяДобавитьНастройку Тогда
		ЧтениеXML.Закрыть();
		Возврат;
	КонецЕсли;
	
	ЧтениеXML.ОткрытьФайл(ПутьКИсходномуФайлу);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКНовомуФайлу);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
			КонецЦикла;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеXML.Имя = "w:settings" Тогда
				ЗаписьXML.ЗаписатьБезОбработки("<w:doNotShadeFormData/>");
			КонецЕсли;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	ЗаписьXML.Закрыть();
	
	ПереместитьФайл(ПутьКНовомуФайлу, ПутьКИсходномуФайлу);
	СтруктураДокумента.ВременныеФайлы.Добавить(ПутьКНовомуФайлу);
	
КонецПроцедуры

Процедура ДобавитьВыбранныеПараметрыВШаблонDOCX(СтруктураДокумента, ОписаниеПараметров, ДобавляемыеПараметрыДокумента, ДобавляемыеПараметрыТаблицыДокумента, ДобавляемыеПараметрыКартинкиДокумента)
	
	Для каждого Параметр Из ДобавляемыеПараметрыКартинкиДокумента Цикл
		ПараметрыКартинки = ДобавитьКартинкуВСтруктуруДокумента(
			СтруктураДокумента, Справочники.ШаблоныПечатиОфисныхДокументов.ПолучитьМакет("ФоновоеИзображениеЭлементаКартинкаДокумента_png"), "png");
		
		ОписаниеПараметра = ОписаниеПараметра(ОписаниеПараметров, Параметр.Значение);
		ОписаниеПараметра.Вставить("ПараметрыКартинки", ПараметрыКартинки);
	КонецЦикла;
	
	ТаблицыСодержащиеДанныеТЧ = Новый Соответствие;
	Если ДобавляемыеПараметрыТаблицыДокумента.Количество() > 0 Тогда
		ТаблицыСодержащиеДанныеТЧ = ТабличныеЧастиДокумента(СтруктураДокумента, ОписаниеПараметров);
	КонецЕсли;
	
	ТаблицаСодержитДанныеТЧ = ТаблицыСодержащиеДанныеТЧ.Количество() <> 0;
	
	ЧтениеXML = НовыйЧтениеXML(СтруктураДокумента.ПутьКФайлу);
	ЗаписьXML = НовыйЗаписьXML(СтруктураДокумента.ПутьКФайлуЗамены);
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
	
	rsidR = "";
	
	// Добавление параметров в текст документа.
	// - параметры документа добавляются в начало;
	// - параметры таблицы добавляются:
	//    - либо в конец найденной таблицы (если найдена);
	//    - либо создается новая таблица в начале документа.
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				
				ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
				
				Если ДобавляемыеПараметрыТаблицыДокумента.Количество() > 0 Тогда
					Если ПараметрыЧтенияXML.ЭлементТекущийИмя = "w:tr" И ЧтениеXML.Имя = "w:rsidR" Тогда
						rsidR = ЧтениеXML.Значение;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЧтениеXML.Имя = "w:body" Тогда
				Продолжить;
			КонецЕсли;
			
			НужноДобавитьПараметрыВНачалоДокумента = ДобавляемыеПараметрыДокумента.Количество() > 0;
			
			Если НужноДобавитьПараметрыВНачалоДокумента Тогда
				ТекстДобавления = КодДобавляемыхПараметровДокументаDOCX(ДобавляемыеПараметрыДокумента);
				ЗаписьXML.ЗаписатьБезОбработки(ТекстДобавления);
			КонецЕсли;
			
			НужноДобавитьНовуюТаблицуВНачалоДокумента = (ДобавляемыеПараметрыТаблицыДокумента.Количество() > 0 ИЛИ ДобавляемыеПараметрыКартинкиДокумента.Количество() > 0) И НЕ ТаблицаСодержитДанныеТЧ;
			
			Если НужноДобавитьНовуюТаблицуВНачалоДокумента Тогда
				ТекстДобавления = КодДобавляемыхПараметровТаблицыДокументаDOCX(ОписаниеПараметров, ДобавляемыеПараметрыТаблицыДокумента, rsidR);
				ТекстДобавления = КодДобавляемойТаблицыДокументаDOCX(ТекстДобавления.ЯчейкаЗаголовок, ТекстДобавления.ЯчейкаЗначение);
				ЗаписьXML.ЗаписатьБезОбработки(ТекстДобавления);
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если НЕ ТаблицаСодержитДанныеТЧ Тогда
				ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
				Продолжить;
			КонецЕсли;
			
			НужноДобавитьНовуюЯчейкуСтрокиТаблицы = ЧтениеXML.Имя = "w:tr" И ТаблицыСодержащиеДанныеТЧ.Получить(ПараметрыЧтенияXML.Таблица.ПорядковыйНомер) <> Неопределено;
			
			Если НужноДобавитьНовуюЯчейкуСтрокиТаблицы Тогда
				ТекстДобавления = КодДобавляемыхПараметровТаблицыДокументаDOCX(ОписаниеПараметров, ДобавляемыеПараметрыТаблицыДокумента, rsidR);
				
				Если ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы = 1 Тогда
					КодЯчейки = ТекстДобавления.ЯчейкаЗаголовок;
				ИначеЕсли ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы > 1 Тогда
					КодЯчейки = ТекстДобавления.ЯчейкаЗначение;
				КонецЕсли;
				
				ЗаписьXML.ЗаписатьБезОбработки(КодЯчейки);
			КонецЕсли;
			
			ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаписатьФайлСвязейДокументаDOCX(СтруктураДокумента);
	ЗаписатьФайлТипыКонтентаДокументаDOCX(СтруктураДокумента);
	
	ЧтениеXML.Закрыть();
	ЗаписьXML.Закрыть();
	
	ПереместитьФайл(СтруктураДокумента.ПутьКФайлуЗамены, СтруктураДокумента.ПутьКФайлу);
	
	СтруктураДокумента.ВременныеФайлы.Добавить(СтруктураДокумента.ПутьКФайлуЗамены);  // todo
	
КонецПроцедуры

#Область ДобавлениеПараметровДокументаDOCX

Функция КодДобавляемыхПараметровДокументаDOCX(ДобавляемыеПараметры)
	
	ТекстДобавления = "";
	
	Для каждого Параметр Из ДобавляемыеПараметры Цикл
		ТекстДобавления = ТекстДобавления + КодПараметраДокументаDOCX(Параметр.Значение, Параметр.Представление);
	КонецЦикла;
	
	Возврат ТекстДобавления;
	
КонецФункции

Функция КодПараметраДокументаDOCX(ИмяПараметра, Представление)
	
	Возврат СтрШаблон(
		"<w:p>
		|	<w:r>
		|		<w:fldChar w:fldCharType=""begin"">
		|			<w:ffData>
		|				<w:name w:val=""""/>
		|				<w:enabled/>
		|				<w:calcOnExit w:val=""0""/>
		|				<w:textInput>
		|					<w:default w:val=""%1""/>
		|				</w:textInput>
		|			</w:ffData>
		|		</w:fldChar>
		|	</w:r>
		|	<w:r>
		|		<w:instrText xml:space=""preserve""> FORMTEXT </w:instrText>
		|	</w:r>
		|	<w:r>
		|		<w:fldChar w:fldCharType=""separate""/>
		|	</w:r>
		|	<w:r>
		|		<w:rPr>
		|			<w:noProof/>
		|		</w:rPr>
		|		<w:t>%2</w:t>
		|	</w:r>
		|	<w:r>
		|		<w:fldChar w:fldCharType=""end""/>
		|	</w:r>
		|</w:p>",
		ИмяПараметра, Представление);
	
КонецФункции

Функция КодДобавляемойТаблицыДокументаDOCX(ЯчейкиЗаголовка, ЯчейкиЗначения)
	
	ТекстДобавления = СтрШаблон(
		"<w:p/>
		|<w:tbl>
		|	<w:tblPr>
		|		<w:tblStyle w:val=""a3""/>
		|		<w:tblW w:w=""2880"" w:type=""dxa""/>
		|		<w:tblLook/>
		|	</w:tblPr>
		|	<w:tr>
		|		%1
		|	</w:tr>
		|	<w:tr>
		|		%2
		|	</w:tr>
		|</w:tbl>
		|<w:p/>",
		ЯчейкиЗаголовка, ЯчейкиЗначения);
	
	Возврат ТекстДобавления;
	
КонецФункции

Функция КодДобавляемыхПараметровТаблицыДокументаDOCX(ОписаниеПараметров, ДобавляемыеПараметры, rsidR)
	
	ТекстыДобавления = Новый Структура("ЯчейкаЗаголовок,ЯчейкаЗначение", "", "");
	
	Для каждого Параметр Из ДобавляемыеПараметры Цикл
		ОписаниеПараметра = ОписаниеПараметра(ОписаниеПараметров, Параметр.Значение);
		НовыйТекст = КодПараметраТаблицыДокументаDOCX(ОписаниеПараметра, rsidR);
		
		ТекстыДобавления.ЯчейкаЗаголовок = ТекстыДобавления.ЯчейкаЗаголовок + НовыйТекст.ЯчейкаЗаголовок;
		ТекстыДобавления.ЯчейкаЗначение  = ТекстыДобавления.ЯчейкаЗначение + НовыйТекст.ЯчейкаЗначение;
	КонецЦикла;
	
	Возврат ТекстыДобавления;
	
КонецФункции

Функция КодПараметраТаблицыДокументаDOCX(ОписаниеПараметра, rsidR)
	
	ТекстДобавления = Новый Структура("ЯчейкаЗаголовок,ЯчейкаЗначение", "", "");
	
	КлючПараметра = ОписаниеПараметра.Ключ;
	ПредставлениеПараметра = ОписаниеПараметра.Представление;
	
	КодироватьСпецСимволы(КлючПараметра);
	КодироватьСпецСимволы(ПредставлениеПараметра);
	
	ТекстДобавления.ЯчейкаЗаголовок = СтрШаблон(
		"<w:tc>
		|	<w:tcPr>
		|		<w:tcW w:w="""" w:type=""dxa""/>
		|	</w:tcPr>
		|	<w:p w:rsidR=""%2"" w:rsidRDefault=""%2"">
		|		<w:r>
		|			<w:t>%1</w:t>
		|		</w:r>
		|	</w:p>
		|</w:tc>",
		ПредставлениеПараметра, rsidR);
	
	Если ОписаниеПараметра.Вид = ВидПараметраТекст() Тогда
		ТекстДобавления.ЯчейкаЗначение = СтрШаблон(
			"<w:tc>
			|	<w:tcPr>
			|		<w:tcW w:w="""" w:type=""dxa""/>
			|	</w:tcPr>
			|	<w:p w:rsidR=""%3"" w:rsidRDefault=""%3"">
			|		<w:r>
			|			<w:fldChar w:fldCharType=""begin"">
			|				<w:ffData>
			|					<w:name w:val=""""/>
			|					<w:enabled/>
			|					<w:calcOnExit w:val=""0""/>
			|					<w:textInput>
			|						<w:default w:val=""%1""/>
			|					</w:textInput>
			|				</w:ffData>
			|			</w:fldChar>
			|		</w:r>
			|		<w:r>
			|			<w:instrText xml:space=""preserve""> FORMTEXT </w:instrText>
			|		</w:r>
			|		<w:r>
			|			<w:fldChar w:fldCharType=""separate""/>
			|		</w:r>
			|		<w:r>
			|			<w:rPr>
			|				<w:noProof/>
			|			</w:rPr>
			|			<w:t>%2</w:t>
			|		</w:r>
			|		<w:r>
			|			<w:fldChar w:fldCharType=""end""/>
			|		</w:r>
			|	</w:p>
			|</w:tc>",
			КлючПараметра, ПредставлениеПараметра, rsidR);
	ИначеЕсли ОписаниеПараметра.Вид = ВидПараметраИзображение() Тогда
		ТекстДобавления.ЯчейкаЗначение = СтрШаблон(
			"<w:tc>
			|	<w:tcPr>
			|		<w:tcW w:w="""" w:type=""dxa""/>
			|	</w:tcPr>
			|	<w:p w:rsidR=""%1"" w:rsidRDefault=""%1"">
			|		<w:r>
			|		<w:sdt>
			|			<w:sdtPr>
			|				<w:alias w:val=""%2""/>
			|				<w:id w:val=""2116631848""/>
			|				<w:showingPlcHdr/>
			|				<w:picture/>
			|			</w:sdtPr>
			|			<w:sdtContent>
			|				<w:r>
			|					<w:rPr>
			|						<w:noProof/>
			|						<w:lang w:eastAsia=""ru-RU""/>
			|					</w:rPr>
			|					<w:drawing>
			|						<wp:inline distT=""0"" distB=""0"" distL=""0"" distR=""0"">
			|							<wp:extent cx=""938254"" cy=""938254""/>
			|							<wp:effectExtent l=""0"" t=""0"" r=""0"" b=""0""/>
			|							<wp:docPr id=""1"" name=""Рисунок 1""/>
			|							<wp:cNvGraphicFramePr>
			|								<a:graphicFrameLocks xmlns:a=""http://schemas.openxmlformats.org/drawingml/2006/main"" noChangeAspect=""1""/>
			|							</wp:cNvGraphicFramePr>
			|							<a:graphic xmlns:a=""http://schemas.openxmlformats.org/drawingml/2006/main"">
			|								<a:graphicData uri=""http://schemas.openxmlformats.org/drawingml/2006/picture"">
			|									<pic:pic xmlns:pic=""http://schemas.openxmlformats.org/drawingml/2006/picture"">
			|										<pic:nvPicPr>
			|											<pic:cNvPr id=""0"" name=""Picture 1""/>
			|											<pic:cNvPicPr>
			|												<a:picLocks noChangeAspect=""1"" noChangeArrowheads=""1""/>
			|											</pic:cNvPicPr>
			|										</pic:nvPicPr>
			|										<pic:blipFill>
			|											<a:blip r:embed=""%3"">
			|												<a:extLst>
			|													<a:ext uri=""{28A0092B-C50C-407E-A947-70E740481C1C}"">
			|														<a14:useLocalDpi xmlns:a14=""http://schemas.microsoft.com/office/drawing/2010/main"" val=""0""/>
			|															</a:ext>
			|												</a:extLst>
			|											</a:blip>
			|											<a:srcRect/>
			|											<a:stretch>
			|												<a:fillRect/>
			|											</a:stretch>
			|										</pic:blipFill>
			|										<pic:spPr bwMode=""auto"">
			|											<a:xfrm>
			|												<a:off x=""0"" y=""0""/>
			|												<a:ext cx=""938254"" cy=""938254""/>
			|											</a:xfrm>
			|											<a:prstGeom prst=""rect"">
			|												<a:avLst/>
			|											</a:prstGeom>
			|											<a:noFill/>
			|											<a:ln>
			|												<a:noFill/>
			|											</a:ln>
			|										</pic:spPr>
			|									</pic:pic>
			|								</a:graphicData>
			|							</a:graphic>
			|						</wp:inline>
			|					</w:drawing>
			|				</w:r>
			|			</w:sdtContent>
			|		</w:sdt>
			|		</w:r>
			|	</w:p>
			|</w:tc>",
			rsidR, КлючПараметра, ОписаниеПараметра.ПараметрыКартинки.rID);
	КонецЕсли;
	
	Возврат ТекстДобавления;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеДокументаODT

Функция НовыйПараметрыЧтенияXMLДокументаODT()
	
	ПараметрыЧтенияXML = Новый Структура;
	ПараметрыЧтенияXML.Вставить("НайденоПоле",        Ложь);
	ПараметрыЧтенияXML.Вставить("КорневойЭлемент",    Ложь);
	ПараметрыЧтенияXML.Вставить("ЭлементТекущийИмя",  Ложь);
	ПараметрыЧтенияXML.Вставить("ЭлементРодительИмя", "");
	ПараметрыЧтенияXML.Вставить("ИмяПараметра",       "");
	ПараметрыЧтенияXML.Вставить("ВидПараметра",       "");
	
	ПараметрыЧтенияТаблицы = Новый Структура;
	ПараметрыЧтенияТаблицы.Вставить("ОткрытоЧтение",          Ложь);
	ПараметрыЧтенияТаблицы.Вставить("ЗакрытоЧтение",          Ложь);
	ПараметрыЧтенияТаблицы.Вставить("ПродолжаетсяЧтение",     Ложь);
	ПараметрыЧтенияТаблицы.Вставить("НайденаЭталоннаяСтрока", Ложь);
	ПараметрыЧтенияТаблицы.Вставить("СодержитДанныеТЧ",       Ложь);
	ПараметрыЧтенияТаблицы.Вставить("ПорядковыйНомер",        0);
	ПараметрыЧтенияТаблицы.Вставить("ТекущаяСтрокаТаблицы",   0);
	ПараметрыЧтенияТаблицы.Вставить("ТекущаяКолонкаТаблицы",  0);
	
	ПараметрыЧтенияXML.Вставить("Таблица", ПараметрыЧтенияТаблицы);
	
	Возврат ПараметрыЧтенияXML;
	
КонецФункции

Процедура ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML)
	
	Если ПараметрыЧтенияXML = Неопределено Тогда
		ПараметрыЧтенияXML = НовыйПараметрыЧтенияXMLДокументаODT();
		Возврат;
	КонецЕсли;
	
	КэшТаблицаПродолжаетсяЧтение = ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение;
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента ИЛИ ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		ПараметрыЧтенияXML.КорневойЭлемент = ЧтениеXML.Имя = "office:document-content";
	КонецЕсли;
	
	Если ЧтениеXML.Имя = "text:variable-set" Тогда
		ПараметрыЧтенияXML.НайденоПоле = (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента);
		ПараметрыЧтенияXML.ИмяПараметра = "";
	КонецЕсли;
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут И ЧтениеXML.Имя = "text:name" Тогда
		ПараметрыЧтенияXML.ИмяПараметра = ЧтениеXML.Значение;
	КонецЕсли;
	
	Если ЧтениеXML.Имя = "table:table" Тогда
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение Тогда
				ПараметрыЧтенияXML.Таблица.СодержитДанныеТЧ = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение = (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента);
		ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы = 0;
		ПараметрыЧтенияXML.Таблица.ТекущаяКолонкаТаблицы = 0;
		
	КонецЕсли;
	
	Если ЧтениеXML.Имя = "table:table-row" И ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение Тогда
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы = ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы + 1;
			ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока = (ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы = 2);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ПараметрыЧтенияXML.Таблица.ТекущаяКолонкаТаблицы = 0;
			ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЧтениеXML.Имя = "table:table-cell" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ПараметрыЧтенияXML.Таблица.ТекущаяКолонкаТаблицы = ПараметрыЧтенияXML.Таблица.ТекущаяКолонкаТаблицы + 1;
	КонецЕсли;
	
	ПараметрыЧтенияXML.Таблица.ОткрытоЧтение = НЕ КэшТаблицаПродолжаетсяЧтение И ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение;
	ПараметрыЧтенияXML.Таблица.ЗакрытоЧтение = КэшТаблицаПродолжаетсяЧтение И НЕ ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение;
	
	Если ПараметрыЧтенияXML.Таблица.ОткрытоЧтение Тогда
		ПараметрыЧтенияXML.Таблица.ПорядковыйНомер = ПараметрыЧтенияXML.Таблица.ПорядковыйНомер + 1;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыЧтенияXML.ИмяПараметра) Тогда
		РаскодироватьСпецСимволы(ПараметрыЧтенияXML.ИмяПараметра);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыИзДокументаODT(ПутьКФайлу)
	
	ПараметрыИзДокумента = Новый Массив;
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
		
		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
			
			ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если НЕ (ПараметрыЧтенияXML.НайденоПоле И ЗначениеЗаполнено(ПараметрыЧтенияXML.ИмяПараметра)) Тогда
				Продолжить;
			КонецЕсли;
			
			Параметр = ПараметрыЧтенияXML.ИмяПараметра;
			РаскодироватьСпецСимволы(Параметр);
			
			Если ПараметрыИзДокумента.Найти(Параметр) = Неопределено Тогда
				ПараметрыИзДокумента.Добавить(Параметр);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат ПараметрыИзДокумента;
	
КонецФункции

Процедура ПоместитьВБуферТаблицыСтрокиДокументаODT(СтруктураДокумента, ПараметрыВывода, ОписаниеПараметров)
	
	ЧтениеXML = НовыйЧтениеXML(СтруктураДокумента.ПутьКФайлу);
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
	
	ЗаписьXMLТаблица = НовыйЗаписьXML(ПараметрыВывода.КопияТаблицы);
	ЗаписьXMLСтрока = НовыйЗаписьXML(ПараметрыВывода.КопияСтрокиТаблицы);
	
	ТаблицаНайденаЭталоннаяСтрокаКэш = Ложь;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ТаблицаНайденаКэш = ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение;
			
			ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если ПараметрыЧтенияXML.Таблица.ОткрытоЧтение Тогда
				ТаблицаНайденаЭталоннаяСтрокаКэш = Ложь;
			КонецЕсли;
			
			Если НЕ ТаблицаНайденаЭталоннаяСтрокаКэш И ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
				ТаблицаНайденаЭталоннаяСтрокаКэш = Истина;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
				ПродолжитьКопированиеДокументаИсточникаODT(ЗаписьXMLТаблица, ЧтениеXML);
				ПродолжитьКопированиеДокументаИсточникаODT(ЗаписьXMLСтрока, ЧтениеXML);
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение Тогда
				ПродолжитьКопированиеДокументаИсточникаODT(ЗаписьXMLТаблица, ЧтениеXML);
				Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					ПродолжитьКопированиеДокументаИсточникаODT(ЗаписьXMLСтрока, ЧтениеXML);
				КонецЕсли;
			КонецЕсли;
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
				
				Если ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение И НЕ ПараметрыЧтенияXML.Таблица.СодержитДанныеТЧ И ЗначениеЗаполнено(ПараметрыЧтенияXML.ИмяПараметра) Тогда
					
					ОписаниеПараметра = ОписаниеПараметра(ОписаниеПараметров, ПараметрыЧтенияXML.ИмяПараметра);
					Если ОписаниеПараметра <> Неопределено И ОписаниеПараметра.ТаблицаВладелец <> Неопределено Тогда
						ПараметрыВывода.ТаблицыСодержащиеДанныеТЧ.Вставить(ПараметрыЧтенияXML.Таблица.ПорядковыйНомер, ОписаниеПараметра.ТаблицаВладелец);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
					ПродолжитьКопированиеДокументаИсточникаODT(ЗаписьXMLТаблица, ЧтениеXML);
					ПродолжитьКопированиеДокументаИсточникаODT(ЗаписьXMLСтрока, ЧтениеXML);
				ИначеЕсли ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение Тогда
					ПродолжитьКопированиеДокументаИсточникаODT(ЗаписьXMLТаблица, ЧтениеXML);
					Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
						ПродолжитьКопированиеДокументаИсточникаODT(ЗаписьXMLСтрока, ЧтениеXML);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение Тогда
				ПродолжитьКопированиеДокументаИсточникаODT(ЗаписьXMLТаблица, ЧтениеXML);
				Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					ПродолжитьКопированиеДокументаИсточникаODT(ЗаписьXMLСтрока, ЧтениеXML);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение Тогда
				ПродолжитьКопированиеДокументаИсточникаODT(ЗаписьXMLТаблица, ЧтениеXML);
				Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
					ПродолжитьКопированиеДокументаИсточникаODT(ЗаписьXMLСтрока, ЧтениеXML);
				КонецЕсли;
			КонецЕсли;
			
			ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если ТаблицаНайденаКэш И НЕ ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение И НЕ ТаблицаНайденаЭталоннаяСтрокаКэш Тогда
				ЗаписьXMLСтрока.ЗаписатьБезОбработки("<table:table-row/>");
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
				ЗаписьXMLТаблица.ЗаписатьКонецЭлемента();
				ЗаписьXMLСтрока.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьXMLСтрока.Закрыть();
	ЗаписьXMLТаблица.Закрыть();
	
КонецПроцедуры

Процедура НачатьПродолжитьВыводТаблицыДокументаODT(ОписаниеПараметров, ПараметрыВывода)
	
	НомерДобавляемойТаблицы = ПараметрыВывода.НомерТаблицы;
	
	Если ПараметрыВывода.Свойство("ВыводТаблицы") Тогда
		
		ЧтениеXML = ПараметрыВывода.ВыводТаблицы.ЧтениеXML;
		ПараметрыЧтенияXML = ПараметрыВывода.ВыводТаблицы.ПараметрыЧтенияXML;
		
	Иначе
		
		ЧтениеXML = НовыйЧтениеXML(ПараметрыВывода.КопияТаблицы);
		
		ПараметрыЧтенияXML = Неопределено;
		ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
		
	КонецЕсли;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ТаблицаНайденаКэш = ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение;
			НайденаЭталоннаяСтрокаКэш = ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока;
			ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если ПараметрыЧтенияXML.Таблица.ПорядковыйНомер <> НомерДобавляемойТаблицы Тогда
				Продолжить;
			КонецЕсли;
			
			Если НайденаЭталоннаяСтрокаКэш И ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоМестоВставкиСтрокТаблицы = ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока;
			
			Если ЭтоМестоВставкиСтрокТаблицы Тогда
				
				ПараметрыВыводТаблицы = Новый Структура;
				ПараметрыВыводТаблицы.Вставить("ЧтениеXML", ЧтениеXML);
				ПараметрыВыводТаблицы.Вставить("ПараметрыЧтенияXML", ПараметрыЧтенияXML);
				ПараметрыВывода.Вставить("ВыводТаблицы", ПараметрыВыводТаблицы);
				Возврат;
				
			КонецЕсли;
			
			ПродолжитьКопированиеДокументаИсточникаODT(ПараметрыВывода.ЗаписьXML, ЧтениеXML);
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ПродолжитьКопированиеДокументаИсточникаODT(ПараметрыВывода.ЗаписьXML, ЧтениеXML);
			КонецЦикла;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если ПараметрыЧтенияXML.Таблица.ПорядковыйНомер <> НомерДобавляемойТаблицы Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока Тогда
				Продолжить;
			КонецЕсли;
			
			ПродолжитьКопированиеДокументаИсточникаODT(ПараметрыВывода.ЗаписьXML, ЧтениеXML);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ТаблицаНайденаКэш = ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение;
			НайденаЭталоннаяСтрокаКэш = ПараметрыЧтенияXML.Таблица.НайденаЭталоннаяСтрока;
			
			ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если ТаблицаНайденаКэш И ПараметрыЧтенияXML.Таблица.ПорядковыйНомер <> НомерДобавляемойТаблицы Тогда
				Продолжить;
			КонецЕсли;
			
			Если НайденаЭталоннаяСтрокаКэш Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда 
				Продолжить;
			КонецЕсли;
			
			ПродолжитьКопированиеДокументаИсточникаODT(ПараметрыВывода.ЗаписьXML, ЧтениеXML);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НачатьВыводСтрокиТаблицыДокументаODT(ОписаниеПараметров, ПараметрыВывода)
	
	ЧтениеXML = НовыйЧтениеXML(ПараметрыВывода.КопияСтрокиТаблицы);
	
	НомерСтроки = 0;
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ЧтениеXML.Имя = "table:table-row" Тогда
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
			
			Если НомерСтроки <> ПараметрыВывода.НомерТаблицы Тогда
				Продолжить;
			КонецЕсли;
			
			ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеXML.Имя = "text:variable-set" Тогда
				ЧтениеXMLСтрокаИмя = "text:variable-set";
				БуферТекстXML = "<text:variable-set%1>%2</text:variable-set>";
				БуферАтрибуты = "";
				БуферТекстЗначение = "";
			Иначе
				ПараметрыВывода.ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			КонецЕсли;
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
				Если ЧтениеXMLСтрокаИмя = "text:variable-set" Тогда
					БуферАтрибуты = БуферАтрибуты + СтрШаблон(" %1=""%2""", ЧтениеXML.Имя, ЧтениеXML.Значение);
				Иначе
					ПараметрыВывода.ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если НомерСтроки <> ПараметрыВывода.НомерТаблицы Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.НайденоПоле Тогда
				// Заполнение поля таблицы
				ЗначениеПараметра = ПолучитьЗначениеПараметра(ОписаниеПараметров, ПараметрыЧтенияXML.ИмяПараметра);
				ЗначениеПараметра = Строка(ЗначениеПараметра);
				ЗаменитьСимволыПереносаСтроки(ЗначениеПараметра, ПараметрыВывода.Расширение);
				
				БуферТекстЗначение = ЗначениеПараметра;
				
				//Если ЭтоСтрокаРазделитель(СтрокаТаблицы) Тогда
				//	БуферТекстXML = "<text:span text:style-name=""style_isgroup"">" + БуферТекстXML + "</text:span>";
				//КонецЕсли;
				
				ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
			Иначе
				// Обычный текст
				ПараметрыВывода.ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если НомерСтроки <> ПараметрыВывода.НомерТаблицы Тогда
				Продолжить;
			КонецЕсли;
			
			НайденоПолеКэш = ПараметрыЧтенияXML.НайденоПоле;
			
			ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если ПараметрыЧтенияXML.КорневойЭлемент Тогда 
				Продолжить;
			КонецЕсли;
			
			Если НайденоПолеКэш Тогда
				ПараметрыВывода.ЗаписьXML.ЗаписатьБезОбработки(СтрШаблон(БуферТекстXML, БуферАтрибуты, БуферТекстЗначение));
			Иначе
				ПараметрыВывода.ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПродолжитьКопированиеДокументаИсточникаODT(ЗаписьXML, ЧтениеXML, ПараметрыЧтенияXML = Неопределено)
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ПараметрыЧтенияXML <> Неопределено Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
		Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
			ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
			ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
		КонецЦикла;
		
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ПараметрыЧтенияXML = Неопределено Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
		
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		
		ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
		
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут Тогда
		
		ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыДокументаODT(ПараметрыПечати, ОписаниеПараметров, СтруктураДокумента, Ошибки)
	
	ЧтениеXML = НовыйЧтениеXML(СтруктураДокумента.ПутьКФайлу);
	ЗаписьXML = НовыйЗаписьXML(СтруктураДокумента.ПутьКФайлуЗамены);
	
	ПараметрыВывода = НовыйПараметрыВывода(ЗаписьXML, СтруктураДокумента);
	
	СтруктураДокумента.ВременныеФайлы.Добавить(ПараметрыВывода.КопияТаблицы);
	СтруктураДокумента.ВременныеФайлы.Добавить(ПараметрыВывода.КопияСтрокиТаблицы);
	
	ПоместитьВБуферТаблицыСтрокиДокументаODT(СтруктураДокумента, ПараметрыВывода, ОписаниеПараметров);
	
	СтилиДобавлены = Ложь;
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если ЧтениеXML.Имя = "office:body" И НЕ СтилиДобавлены Тогда
				ДобавитьСтильГруппировки(ЗаписьXML, Истина);
			КонецЕсли;
			
			ЭтоТаблицаСодержащаяДанныеТЧ = ЭтаТаблицаВыводитсяИзБуфера(ПараметрыЧтенияXML, ПараметрыВывода);
			
			Если ПараметрыЧтенияXML.Таблица.ОткрытоЧтение И ЭтоТаблицаСодержащаяДанныеТЧ Тогда
				ВывестиТаблицуПараметровДокумента(ПараметрыПечати, ОписаниеПараметров, ПараметрыВывода, ПараметрыЧтенияXML.Таблица.ПорядковыйНомер);
			КонецЕсли;
			
			Если (ПараметрыЧтенияXML.Таблица.ОткрытоЧтение ИЛИ ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение) И ЭтоТаблицаСодержащаяДанныеТЧ Тогда
				Продолжить;
			КонецЕсли;
			
			ПродолжитьКопированиеДокументаИсточникаODT(ЗаписьXML, ЧтениеXML, ПараметрыЧтенияXML);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение И ЭтаТаблицаВыводитсяИзБуфера(ПараметрыЧтенияXML, ПараметрыВывода) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЧтенияXML.НайденоПоле Тогда
				ВывестиЗначениеПараметраДокумента(ОписаниеПараметров, ПараметрыВывода, ПараметрыЧтенияXML.ИмяПараметра);
				// todo ПараметрыЧтенияXML.НайденоПоле = Ложь;
			Иначе
				ПродолжитьКопированиеДокументаИсточникаODT(ЗаписьXML, ЧтениеXML, ПараметрыЧтенияXML);
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ЧтениеXML.Имя = "office:automatic-styles" Тогда
				ДобавитьСтильГруппировки(ЗаписьXML);
				СтилиДобавлены = Истина;
			КонецЕсли;
			
			ОбновитьСвойстваЧтенияXMLДокументаODT(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если (ПараметрыЧтенияXML.Таблица.ПродолжаетсяЧтение ИЛИ ПараметрыЧтенияXML.Таблица.ЗакрытоЧтение) И ЭтаТаблицаВыводитсяИзБуфера(ПараметрыЧтенияXML, ПараметрыВывода) Тогда
				Продолжить;
			КонецЕсли;
			
			ПродолжитьКопированиеДокументаИсточникаODT(ЗаписьXML, ЧтениеXML, ПараметрыЧтенияXML);
			
		КонецЕсли;
	КонецЦикла;
	
	Ошибки = ПараметрыВывода.Ошибки;
	
КонецПроцедуры

Процедура ДобавитьСтильГруппировки(ЗаписьXML, ДобавитьРодителя = Ложь)
	
	СтильТекст = СтрШаблон(
		"%1<style:style style:name=""%2"" style:family=""text"">
		|	<style:text-properties fo:font-weight=""bold"" style:font-weight-asian=""bold"" style:font-weight-complex=""bold""/>
		|</style:style>%3",
		?(ДобавитьРодителя, "<office:automatic-styles>", ""),
		"style_isgroup",
		?(ДобавитьРодителя, "</office:automatic-styles>", "")
	);
	
	ЗаписьXML.ЗаписатьБезОбработки(СтильТекст);
	
КонецПроцедуры

Процедура ДобавитьВыбранныеПараметрыВШаблонODT(СтруктураДокумента, ОписаниеПараметров, ДобавляемыеПараметрыДокумента, ДобавляемыеПараметрыТаблицыДокумента)
	
	ТаблицыСодержащиеДанныеТЧ = Новый Соответствие;
	Если ДобавляемыеПараметрыТаблицыДокумента.Количество() > 0 Тогда
		ТаблицыСодержащиеДанныеТЧ = ТабличныеЧастиДокумента(СтруктураДокумента, ОписаниеПараметров);
	КонецЕсли;
	
	ТаблицаСодержитДанныеТЧ = ТаблицыСодержащиеДанныеТЧ.Количество() <> 0;
	
	ЧтениеXML = НовыйЧтениеXML(СтруктураДокумента.ПутьКФайлу);
	ЗаписьXML = НовыйЗаписьXML(СтруктураДокумента.ПутьКФайлуЗамены);
	
	ПараметрыЧтенияXML = Неопределено;
	ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
	
	ЧтениеXMLИмя = "";
	ПараметрыВставлены = Ложь;
	
	// Добавление параметров в начало файла
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ПораВставлятьОписаниеПараметров = ЧтениеXMLИмя = "office:text" И ЧтениеXML.Имя <> "text:variable-decls" ИЛИ ЧтениеXMLИмя = "text:variable-decls";
			
			Если ПораВставлятьОписаниеПараметров Тогда
				
				// Блок описания параметров документа
				ТекстДобавления = КодОписанияДобавляемыеПараметровДокументаODT(
					ДобавляемыеПараметрыДокумента,
					ДобавляемыеПараметрыТаблицыДокумента,
					ЧтениеXMLИмя <> "text:variable-decls");
				ЗаписьXML.ЗаписатьБезОбработки(ТекстДобавления);
				
				Если ЧтениеXMLИмя <> "text:variable-decls" Тогда
					
					// Параметров НЕ было в документе. Вставляем новые сразу после блока описания параметров.
					Если ДобавляемыеПараметрыДокумента.Количество() <> 0 Тогда
						ТекстДобавления = КодДобавляемыхПараметровДокументаODT(ДобавляемыеПараметрыДокумента);
						ЗаписьXML.ЗаписатьБезОбработки(ТекстДобавления);
					КонецЕсли;
					Если ДобавляемыеПараметрыТаблицыДокумента.Количество() <> 0 Тогда
						ТекстДобавления = КодДобавляемыхПараметровТаблицыДокументаODT(ДобавляемыеПараметрыТаблицыДокумента);
						ТекстДобавления = КодДобавляемойТаблицыДокументаODT(
							ДобавляемыеПараметрыТаблицыДокумента.Количество(),
							ТекстДобавления.ЯчейкаЗаголовок,
							ТекстДобавления.ЯчейкаЗначение);
						ЗаписьXML.ЗаписатьБезОбработки(ТекстДобавления);
					КонецЕсли;
					
					ПараметрыВставлены = Истина;
				КонецЕсли;
			КонецЕсли;
			
			ЧтениеXMLИмя = ЧтениеXML.Имя;
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя,ЧтениеXML.Значение); 
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			Если НЕ ПараметрыВставлены И ЧтениеXML.Имя = "text:variable-decls" Тогда
				
				// Параметры уже были в документе. Вставляем новые сразу после блока описания параметров.
				Если ДобавляемыеПараметрыДокумента.Количество() <> 0 Тогда
					ТекстДобавления = КодДобавляемыхПараметровДокументаODT(ДобавляемыеПараметрыДокумента);
					ЗаписьXML.ЗаписатьБезОбработки(ТекстДобавления);
				КонецЕсли;
				
				Если ДобавляемыеПараметрыТаблицыДокумента.Количество() <> 0 Тогда
					ТекстДобавления = КодДобавляемыхПараметровТаблицыДокументаODT(ДобавляемыеПараметрыТаблицыДокумента);
					ТекстДобавления = КодДобавляемойТаблицыДокументаODT(
						ДобавляемыеПараметрыТаблицыДокумента.Количество(),
						ТекстДобавления.ЯчейкаЗаголовок,
						ТекстДобавления.ЯчейкаЗначение);
					ЗаписьXML.ЗаписатьБезОбработки(ТекстДобавления);
				КонецЕсли;
				
				ПараметрыВставлены = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	ЗаписьXML.Закрыть();
	
	ПереместитьФайл(СтруктураДокумента.ПутьКФайлуЗамены, СтруктураДокумента.ПутьКФайлу);
	
	СтруктураДокумента.ВременныеФайлы.Добавить(СтруктураДокумента.ПутьКФайлуЗамены);  // todo
	
КонецПроцедуры

#Область ДобавлениеПараметровДокументаODT

Функция КодОписанияДобавляемыеПараметровДокументаODT(ДобавляемыеПараметрыДокумента, ДобавляемыеПараметрыТаблицы, ВключаяРодительскийКонтейнер)
	
	ТекстДобавления = "";
	
	Если ВключаяРодительскийКонтейнер Тогда
		ТекстДобавления = ТекстДобавления + "
		|<text:variable-decls>";
	КонецЕсли;
	
	Для каждого Параметр Из ДобавляемыеПараметрыДокумента Цикл
		ТекстДобавления = ТекстДобавления + СтрШаблон("
		|<text:variable-decl office:value-type=""string"" text:name=""%1""/>",
		Параметр.Значение);
	КонецЦикла;
	Для каждого Параметр Из ДобавляемыеПараметрыТаблицы Цикл
		ТекстДобавления = ТекстДобавления + СтрШаблон("
		|<text:variable-decl office:value-type=""string"" text:name=""%1""/>",
		Параметр.Значение);
	КонецЦикла;
	
	Если ВключаяРодительскийКонтейнер Тогда
		ТекстДобавления = ТекстДобавления + "
		|</text:variable-decls>";
	КонецЕсли;
	
	Возврат ТекстДобавления;
	
КонецФункции

Функция КодДобавляемыхПараметровДокументаODT(ДобавляемыеПараметры)
	
	ТекстДобавления = "";
	
	Для каждого Параметр Из ДобавляемыеПараметры Цикл
		ТекстДобавления = ТекстДобавления + КодПараметраДокументаODT(Параметр.Значение, Параметр.Представление);
	КонецЦикла;
	
	Возврат ТекстДобавления;
	
КонецФункции

Функция КодПараметраДокументаODT(ИмяПараметра, Представление)
	
	Возврат СтрШаблон(
		"<text:p text:style-name=""Standard"">
		|	<text:variable-set text:name=""%1"" office:value-type=""string"">%2</text:variable-set>
		|</text:p>",
		ИмяПараметра, Представление);
	
КонецФункции

Функция КодДобавляемойТаблицыДокументаODT(КоличествоКолонок, ЯчейкиЗаголовка, ЯчейкиЗначения)
	
	ТекстДобавления = СтрШаблон(
		"<text:p text:style-name=""Standard""/>
		|<table:table>
		|	<table:table-column table:number-columns-repeated=""%1""/>
		|	<table:table-row>
		|		%2
		|	</table:table-row>
		|	<table:table-row>
		|		%3
		|	</table:table-row>
		|</table:table>
		|<text:p text:style-name=""Standard""/>",
		КоличествоКолонок, ЯчейкиЗаголовка, ЯчейкиЗначения);
	
	Возврат ТекстДобавления;
	
КонецФункции

Функция КодДобавляемыхПараметровТаблицыДокументаODT(ДобавляемыеПараметры)
	
	ТекстыДобавления = Новый Структура("ЯчейкаЗаголовок,ЯчейкаЗначение", "", "");
	
	Для каждого Параметр Из ДобавляемыеПараметры Цикл
		НовыйТекст = КодПараметраТаблицыДокументаODT(Параметр.Значение, Параметр.Представление);
		ТекстыДобавления.ЯчейкаЗаголовок = ТекстыДобавления.ЯчейкаЗаголовок + НовыйТекст.ЯчейкаЗаголовок;
		ТекстыДобавления.ЯчейкаЗначение  = ТекстыДобавления.ЯчейкаЗначение + НовыйТекст.ЯчейкаЗначение;
	КонецЦикла;
	
	Возврат ТекстыДобавления;
	
КонецФункции

Функция КодПараметраТаблицыДокументаODT(ИмяПараметра, Представление)
	
	ТекстДобавления = Новый Структура("ЯчейкаЗаголовок,ЯчейкаЗначение", "", "");
	
	ТекстДобавления.ЯчейкаЗаголовок = СтрШаблон(
		"<table:table-cell office:value-type=""string"">
		|	<text:p>%1</text:p>
		|</table:table-cell>",
		Представление);
	
	ТекстДобавления.ЯчейкаЗначение = СтрШаблон(
		"<table:table-cell office:value-type=""string"">
		|	<text:p>
		|		<text:variable-set text:name=""%1"" office:value-type=""string"">%2</text:variable-set>
		|	</text:p>
		|</table:table-cell>",
		ИмяПараметра, Представление);
	
	Возврат ТекстДобавления;
	
КонецФункции

#КонецОбласти

#КонецОбласти
