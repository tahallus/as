#Область ПрограммныйИнтерфейс

// Процедура добавляет в структуру параметры формулы.
//
// Параметры:
//  СтрокаФормулы - Строка - строковое представление формулы
//  СтруктураПараметров - Структура - в которую будут добавлены идентификаторы из формулы
//  Отказ - Булево - признак отказа операции
//
Процедура ДобавитьПараметрыВСтруктуру(СтрокаФормулы, СтруктураПараметров, Отказ = Ложь) Экспорт

	Формула = СтрокаФормулы;
	
	НачОперанда = СтрНайти(Формула, "[");
	КонОперанда = СтрНайти(Формула, "]");
     
	ЕстьОперанд = Истина;
	Пока ЕстьОперанд Цикл
     
		Если НачОперанда <> 0 И КонОперанда <> 0 Тогда
			
            Идентификатор = СокрЛП(Сред(Формула, НачОперанда+1, КонОперанда - НачОперанда - 1));
            Формула = Прав(Формула, СтрДлина(Формула) - КонОперанда);   
			
			Попытка
				Если НЕ СтруктураПараметров.Свойство(Идентификатор) Тогда
					СтруктураПараметров.Вставить(Идентификатор);
				КонецЕсли;
			Исключение
				Отказ = Истина;
			    Прервать;
			КонецПопытки 
			 
		КонецЕсли;     
          
		НачОперанда = СтрНайти(Формула, "[");
		КонОперанда = СтрНайти(Формула, "]");
          
		Если НЕ (НачОперанда <> 0 И КонОперанда <> 0) Тогда
			ЕстьОперанд = Ложь;
        КонецЕсли;     
               
	КонецЦикла;	

КонецПроцедуры

// Процедура выполняет вставку в параметр СтруктураДанных
// ключа "ДоступныеТипыСчетовУчета" со значением массив типов счетов
// 
// Параметры:
//  СтруктураДанных - Структура - в которую будет вставлен параметры "ДоступныеТипыСчетовУчета"
//
Процедура ПолучитьДанныеДляВыбораСчетаРасчетов(СтруктураДанных) Экспорт
	
	ДоступныеТипыСчетовУчета = Новый Массив;
	ВидНачисленияУдержания = СтруктураДанных.ВидНачисленияУдержания;
	Если НЕ ЗначениеЗаполнено(ВидНачисленияУдержания) Тогда
		
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.НезавершенноеПроизводство);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.КосвенныеЗатраты);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.Расходы);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.ПрочиеРасходы);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.ПрочиеВнеоборотныеАктивы);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.ПрочиеДоходы);
		
	ИначеЕсли ВидНачисленияУдержания.Тип = Перечисления.ТипыНачисленийИУдержаний.Начисление Тогда
		
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.НезавершенноеПроизводство);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.КосвенныеЗатраты);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.Расходы);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.ПрочиеРасходы);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.ПрочиеВнеоборотныеАктивы);
		
	ИначеЕсли ВидНачисленияУдержания.Тип = Перечисления.ТипыНачисленийИУдержаний.Удержание Тогда
		
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.ПрочиеДоходы);
		
	КонецЕсли;
	
	СтруктураДанных.Вставить("ДоступныеТипыСчетовУчета", ДоступныеТипыСчетовУчета);
	
КонецПроцедуры

// Устарела. Будет удалена в следующей версии программы.
// См. ФизическиеЛицаКлиентСервер.ФамилияИнициалы
// Возвращаемое значение:
//  Строка - фамилия и инициалы. Например, "Пупкин В. И.".
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ", ФИОКратко = Истина) Экспорт

	ФамилияИмяОтчество = Новый Структура;
	ФамилияИмяОтчество.Вставить("Фамилия", Фамилия);
	ФамилияИмяОтчество.Вставить("Имя", Имя);
	ФамилияИмяОтчество.Вставить("Отчество", Отчество);
	Возврат ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФамилияИмяОтчество);

КонецФункции

// Функция выделяет первое слово в предложении до пробела и возвращает его
//
// Параметры:
//  ИсходнаяСтрока - Строка - строка в которой необходимо выделить первое слово. Например, "Иванов И. И."
// 
// Возвращаемое значение:
//  Строка - выделенное слово
//
Функция ВыделитьСлово(ИсходнаяСтрока) Экспорт
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = СтрНайти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции

// Функция определяет вводился ли раннее элемент расчета или вид начисления
//
// Параметры:
//  ЗначениеИдентификатора - Строка - значение реквизита Идентификатор элемента справочника ПараметрыРасчетов
//
// Возвращаемое значение:
//  Булево - Истина, если вид начисления вводился ранее. Ложь, если вид начисления не вводился ранее.
//
Функция ПараметрРасчетаСуществует(ЗначениеИдентификатора) Экспорт
	
	Если ПустаяСтрока(ЗначениеИдентификатора)Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат НЕ Справочники.ПараметрыРасчетов.НайтиПоРеквизиту("Идентификатор", ЗначениеИдентификатора) = Справочники.ПараметрыРасчетов.ПустаяСсылка();
	
КонецФункции 

// Функция определяет производилось ли первоначальное заполнение справочника ВидыНачисленийИУдержаний
//
// Возвращаемое значение:
//  Булево - Истина, если производилось первоначальное заполнение справочника ВидыНачисленийИУдержаний. 
//  Ложь, не производилось первоначальное заполнение справочника ВидыНачисленийИУдержаний
//
Функция НачальноеЗаполнениеВидовНачисленийУдержанийПроизводилось() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ Справочник.ВидыНачисленийИУдержаний КАК ВидыНиУ ГДЕ НЕ ВидыНиУ.Предопределенный");
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти