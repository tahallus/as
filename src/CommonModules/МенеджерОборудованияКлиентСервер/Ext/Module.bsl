
#Область ПрограммныйИнтерфейс

// Функция заполняет наименование рабочего места клиента по имени пользователя.
//
// Параметры:
//  Объект - СправочникОбъект.РабочиеМеста - рабочее место текущего сеанса.
//  ИмяПользователя - Строка - ИмяПользователя
//
Процедура ЗаполнитьНаименованиеРабочегоМеста(Объект, ИмяПользователя) Экспорт
	
	ИмяПустойПользователь = НСтр("ru='<Пользователь>'");
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		
		Наименование = ?(ПустаяСтрока(ИмяПользователя), "<" + ИмяПустойПользователь + ">", Строка(ИмяПользователя)) +
			"(" + ?(ПустаяСтрока(Объект.ИмяКомпьютера), Объект.Код, Объект.ИмяКомпьютера) + ")";
		НаименованиеНовое = Наименование;
		ВыполненаСтандартнаяОбработка = Истина;
		МенеджерОборудованияКлиентСерверПереопределяемый.ОбработкаЗаполненияНаименованияРабочегоМеста(НаименованиеНовое, ИмяПользователя, ВыполненаСтандартнаяОбработка);
		Объект.Наименование = ?(Не ВыполненаСтандартнаяОбработка, НаименованиеНовое, Наименование); 
		
	ИначеЕсли Не ПустаяСтрока(Строка(ИмяПользователя)) И Найти(Объект.Наименование, ИмяПустойПользователь) > 0 Тогда
		Объект.Наименование = СтрЗаменить(Объект.Наименование, ИмяПустойПользователь, Строка(ИмяПользователя));
	КонецЕсли;

КонецПроцедуры

Функция ИдентификаторКлиентаДляРабочегоМеста() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = ВРег(СистемнаяИнформация.ИдентификаторКлиента);
	
	ИдентификаторКлиентаНовый = ИдентификаторКлиента;
	ВыполненаСтандартнаяОбработка = Истина;
	МенеджерОборудованияКлиентСерверПереопределяемый.ИдентификаторКлиентаДляРабочегоМеста(ИдентификаторКлиентаНовый, ВыполненаСтандартнаяОбработка); 
	ИдентификаторКлиента = ?(Не ВыполненаСтандартнаяОбработка, ВРег(ИдентификаторКлиентаНовый), ИдентификаторКлиента); 
	
	Возврат ИдентификаторКлиента;
	
КонецФункции

#Область ПрограммныйИнтерфейсМаркировка

// Функция определяет тип штрихкода по значение кода.
// 
Функция ОпределитьТипШтрихкода(Знач Штрихкод) Экспорт
	
	ТипШтрихкодаЗнач = "";	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	
	Если ДлинаШтрихкода = 0 Тогда
		Возврат ТипШтрихкодаЗнач;
	КонецЕсли;
	
	Сумма = 0;
	
	Если ДлинаШтрихкода = 14 Тогда // ITF14
		
		Если РассчитатьКонтрольныйСимволGTIN14(Штрихкод) = Прав(Штрихкод, 1) Тогда
			ТипШтрихкодаЗнач = "ITF14";
 		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихкода = 13 Тогда // EAN13
		
		Если РассчитатьКонтрольныйСимволGTIN13(Штрихкод) = Прав(Штрихкод, 1) Тогда
			ТипШтрихкодаЗнач = "EAN13";
		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихкода = 8 Тогда // EAN8
		
		Если РассчитатьКонтрольныйСимволGTIN8(Штрихкод) = Прав(Штрихкод, 1) Тогда
			ТипШтрихкодаЗнач = "EAN8";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипШтрихкодаЗнач= "" Тогда // CODE39
		
		CODE39 = Истина;
		Для Сч = 1 По ДлинаШтрихкода Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если (ВремКодСимвола <> 32)
				И (ВремКодСимвола < 36 Или ВремКодСимвола > 37)
				И (ВремКодСимвола <> 43)
				И (ВремКодСимвола < 45 Или ВремКодСимвола > 57)
				И (ВремКодСимвола < 65 Или ВремКодСимвола > 90) Тогда
				CODE39 = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если CODE39 Тогда
			ТипШтрихкодаЗнач = "CODE39";
		КонецЕсли                                                     
		
	КонецЕсли;
	
	Если ТипШтрихкодаЗнач= ""  Тогда // CODE128
		// CODE128 символы ASCII от 0 до 127 (цифры от «0» до «9», буквы от «A» до «Z» и от «a» до «z») и специальные символы;
		CODE128 = Истина;
		Для Сч = 1 По ДлинаШтрихкода Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если (ВремКодСимвола > 127) Тогда
				CODE128 = Ложь;
			Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если CODE128 Тогда
			ТипШтрихкодаЗнач = "CODE128";
		КонецЕсли                                                     
		
	КонецЕсли;
	
	Если ТипШтрихкодаЗнач = "CODE128"  Тогда // EAN128
		// В коде EAN128 регламентирован словарь CODE128 но регламентированы группы кодов, и возможны разделители GS.
		Если КодСимвола(Штрихкод, 1) = 40 Или СтрНайти(Штрихкод, КодСимвола(29)) > 0  Тогда
			ТипШтрихкодаЗнач = "EAN128";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипШтрихкодаЗнач;
	
КонецФункции

// Функция возвращает пустую структуру записи EPC.
// 
// Возвращаемое значение:
//  - Структура
//       Результат       - Результат декодирования (успешно или нет)
//       EPC             - Значение EPC в виде HEX строки
//       EPC_BIN         - Значение EPC в виде бинарной строки
//       Формат          - Распознанный формат данных SGTIN-96 или SGTIN-198  
//       GTIN            - GTIN 
//       СерийныйНомер   - Серийный номер SGTIN 
//       ПрефиксКомпании - Префикс компании
//       URI             - EPC Tag URI
//       
Функция ПолучитьСтруктуруЗаписиEPC() Экспорт
	
	СтруктураЗаписиEPC = Новый Структура;
	
	СтруктураЗаписиEPC.Вставить("Результат", Ложь); // Результат декодирования (успешно или нет)
	СтруктураЗаписиEPC.Вставить("EPC");              // Значение EPC в виде HEX строки
	СтруктураЗаписиEPC.Вставить("EPC_BIN");          // Значение EPC в виде бинарной строки
	СтруктураЗаписиEPC.Вставить("Формат");           // Распознанный формат данных SGTIN-96 или SGTIN-198  
	СтруктураЗаписиEPC.Вставить("GTIN");             // GTIN 
	СтруктураЗаписиEPC.Вставить("СерийныйНомер");    // Серийный номер SGTIN 
	СтруктураЗаписиEPC.Вставить("ПрефиксКомпании");  // Префикс компании
	СтруктураЗаписиEPC.Вставить("URI");              // EPC Tag URI
	
	Возврат СтруктураЗаписиEPC;
	
КонецФункции

// Расчет контрольной цифры для GTIN-8. 
//
// Параметры:
//  GTIN - Строка - Текстовая строка с GTIN-8. Может содержать числа от 0 до 9. 
// 
// Возвращаемое значение:
//  Число - Контрольный символ (число) рассчитанный по алгоритму для GTIN.
//
Функция РассчитатьКонтрольныйСимволGTIN8(Знач GTIN) Экспорт
	
	Сумма = 0;
	Коэффициент = 3;
	
	Для Сч = 1 По 7 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

// Расчет контрольной цифры для GTIN-12. 
//
// Параметры:
//  GTIN - Текстовая строка с GTIN-12. Может содержать числа от 0 до 9. 
// 
// Возвращаемое значение:
//   - Контрольный символ (число) рассчитанный по алгоритму для GTIN.
//
Функция РассчитатьКонтрольныйСимволGTIN12(Знач GTIN) Экспорт
	
	Сумма = 0;
	Коэффициент = 3;
	
	Для Сч = 1 По 11 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

// Расчет контрольной цифры для GTIN-13. 
//
// Параметры:
//  GTIN - Текстовая строка с GTIN-13. Может содержать числа от 0 до 9.
// 
// Возвращаемое значение:
//   - Контрольный символ (число) рассчитанный по алгоритму для GTIN.
//
Функция РассчитатьКонтрольныйСимволGTIN13(Знач GTIN) Экспорт
	
	Сумма = 0;
	Коэффициент = 1;
	
	Для Сч = 1 По 12 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

// Расчет контрольной цифры для GTIN-14. 
//
// Параметры:
//  GTIN - Текстовая строка с GTIN-14. Может содержать числа от 0 до 9. 
// 
// Возвращаемое значение:
//   - Контрольный символ (число) рассчитанный по алгоритму для GTIN.
//
Функция РассчитатьКонтрольныйСимволGTIN14(Знач GTIN) Экспорт
	
	Сумма = 0;
	Коэффициент = 3;
	
	Для Сч = 1 По 13 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

// Универсальная функция расчета контрольной цифры GTIN.
// GTIN допускает в формате GTIN-8, GTIN-12, GTIN-13, GTIN-14 c контрольным символом.
//
// Параметры:
//  GTIN - Текстовая строка с GTIN(c контрольным символом). Может содержать числа от 0 до 9.
// 
// Возвращаемое значение:
//   - Контрольный символ (число) рассчитанный по алгоритму для GTIN.
//
Функция РассчитатьКонтрольныйСимволGTIN(Знач GTIN) Экспорт
	
	Сумма = 0;
	ДлиннаGTIN = СтрДлина(GTIN);
	Коэффициент = ?(ДлиннаGTIN % 2 = 0, 3, 1); 
	
	Для Сч = 1 По ДлиннаGTIN - 1 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

// Функция проверяет корректность GTIN.
// GTIN допускает в формате GTIN-8, GTIN-12, GTIN-13, GTIN-14 c контрольным символом.
//
// Параметры:
//  GTIN - Текстовая строка с GTIN(c контрольным символом). Может содержать числа от 0 до 9.
// 
// Возвращаемое значение:
//   - Булево  
//
Функция ПроверитьКорректностьGTIN(Знач GTIN) Экспорт
	
	Результат = (СтрДлина(GTIN) = 8) Или (СтрДлина(GTIN) = 12) Или (СтрДлина(GTIN) = 13) Или (СтрДлина(GTIN) = 14);
	Возврат Результат И РассчитатьКонтрольныйСимволGTIN(GTIN) = Прав(GTIN, 1);
	
КонецФункции

// Декодирование данных по значение EPC(HEX строка). Поддерживается формат SGTIN-96 и SGTIN-198.
//
// Параметры:
//   EPC - Строка содержащая значение банка EPC в HEX виде.
// 
// Возвращаемое значение:
//  - Структура
//       Результат       - Результат декодирования (успешно или нет)
//       EPC             - Значение EPC в виде HEX строки
//       EPC_BIN         - Значение EPC в виде бинарной строки
//       Формат          - Распознанный формат данных SGTIN-96 или SGTIN-198  
//       GTIN            - GTIN 
//       СерийныйНомер   - Серийный номер SGTIN 
//       ПрефиксКомпании - Префикс компании
//       URI             - EPC Tag URI
//       
Функция ДекодированиеДанныхSGTIN(EPC) Экспорт
	
	// Преобразовываем HEX строку значение банка EPC в бинарную строку.
	БитовыйМассив = ПреобразоватьHEXВБинарнуюСтроку(EPC);
	
	// Подготавливаем структура результата.
	СтруктураРезультата = ПолучитьСтруктуруЗаписиEPC();
	СтруктураРезультата.EPC = EPC;
	СтруктураРезультата.EPC_BIN = БитовыйМассив; 
	
	// Получаем заголовок метки.
	Заголовок = Сред(БитовыйМассив, 1, 8);
	
	Если Заголовок = "00110000" Тогда // Распознан заголовок SGTIN-96.
		
		Формат = "sgtin-96";
		// Для SGTIN-96 длинная серийного номера 38 bit.
		СерийныйНомер = Сред(БитовыйМассив, 59); 
		// Серийный номер состоит из десятичных цифр. Максимальное значение 274,877,906,943
		СерийныйНомер = ДобавитьЛидирующиеНули(Формат(ПреобразоватьБинарнуюСтрокуВЧисло(СерийныйНомер), "ЧГ=0"), 12); 
		
	ИначеЕсли Заголовок = "00110110" Тогда // Распознан заголовок SGTIN-198.
		
		Формат = "sgtin-198";
		// Для SGTIN-198 длинная серийного номера 140 bit.
		СерийныйНомерВрем = Сред(БитовыйМассив, 59); 
		// Серийный номер состоит из 7 битных символов. Максимально 20 символов.
		СерийныйНомер = "";
		Пока СтрДлина(СерийныйНомерВрем) > 0 Цикл
			ТекСимвол  = Лев(СерийныйНомерВрем, 7);
			КодСимвола = ПреобразоватьБинарнуюСтрокуВЧисло(ТекСимвол);
			Если КодСимвола > 31 Тогда
				СерийныйНомер = СерийныйНомер + Символ(КодСимвола);
			КонецЕсли;
			СерийныйНомерВрем = Сред(СерийныйНомерВрем, 8);
		КонецЦикла;
		
	Иначе
		Возврат СтруктураРезультата; // Не распознан формат данных EPC.
	КонецЕсли;
	
	СтруктураРезультата.СерийныйНомер = СерийныйНомер;
	СтруктураРезультата.Формат        = Формат;
	
	Фильтр      = ПреобразоватьБинарнуюСтрокуВЧисло(Сред(БитовыйМассив, 9, 3));
	Разделитель = ПреобразоватьБинарнуюСтрокуВЧисло(Сред(БитовыйМассив, 12, 3));
	
	// Определяем разделить префикса компании.
	Если Разделитель = 1 Тогда
		РазрядовКомпании = 37;
		РазрядовЗнаков   = 11;
	ИначеЕсли Разделитель = 2 Тогда
		РазрядовКомпании = 34;
		РазрядовЗнаков   = 10;
	ИначеЕсли Разделитель = 3 Тогда
		РазрядовКомпании = 30;
		РазрядовЗнаков   = 9;
	ИначеЕсли Разделитель = 4 Тогда
		РазрядовКомпании = 27;
		РазрядовЗнаков   = 8;
	ИначеЕсли Разделитель = 5 Тогда
		РазрядовКомпании = 24;
		РазрядовЗнаков   = 7;
	ИначеЕсли Разделитель = 6 Тогда
		РазрядовКомпании = 20;
		РазрядовЗнаков   = 6;
	Иначе
		РазрядовКомпании = 40;
		РазрядовЗнаков   = 12;
	КонецЕсли;
	
	ПрефиксКомпании = Сред(БитовыйМассив, 15, РазрядовКомпании);
	ГруппаТовара    = Сред(БитовыйМассив, 15 + РазрядовКомпании, 44 - РазрядовКомпании);
	
	ПрефиксКомпании = ДобавитьЛидирующиеНули(Формат(ПреобразоватьБинарнуюСтрокуВЧисло(ПрефиксКомпании), "ЧГ=0"), РазрядовЗнаков); 
	ГруппаТовара    = ДобавитьЛидирующиеНули(Формат(ПреобразоватьБинарнуюСтрокуВЧисло(ГруппаТовара), "ЧГ=0"), 13 - РазрядовЗнаков);
	
	URI = "urn:epc:tag:" + Формат + ":" + Фильтр + "." + ПрефиксКомпании + "." + ГруппаТовара + "." + СерийныйНомер; 
	
	GTIN = Лев(ГруппаТовара, 1) + ПрефиксКомпании + Прав(ГруппаТовара, СтрДлина(ГруппаТовара) - 1);
	
	Если СтрДлина(GTIN) = 13 Тогда
		GTIN = GTIN + РассчитатьКонтрольныйСимволGTIN14(GTIN) 
	КонецЕсли;
	
	СтруктураРезультата.ПрефиксКомпании = ПрефиксКомпании; 
	СтруктураРезультата.GTIN = GTIN;
	СтруктураРезультата.URI  = URI;
	СтруктураРезультата.Результат = Истина;
	
	Возврат СтруктураРезультата;        
	
КонецФункции

// Функция определяет, содержит ли EPC значащую информацию (GTIN или СерийныйНомер) по формату SGTIN.
//
// Параметры:
//  EPC - Строка содержащая значение банка EPC в HEX виде.
// 
// Возвращаемое значение:
//   - Булево  
//
Функция ПустойEPC(EPC) Экспорт
	
	БитовыйМассив = ПреобразоватьHEXВБинарнуюСтроку(EPC);
	СерийныйНомер = Прав(БитовыйМассив, 38);
	GTIN = Сред(БитовыйМассив, 15, 44);
	
	СерийныйНомер = ПреобразоватьБинарнуюСтрокуВЧисло(СерийныйНомер);
	GTIN = ПреобразоватьБинарнуюСтрокуВЧисло(GTIN);
	
	Заполнен = (СерийныйНомер > 0) Или (GTIN > 0);                                  
	Возврат Не Заполнен; 
	
КонецФункции

// Сформировать значение EPC в формате SGTIN-96 для GTIN и серийного номера.
//  GTIN допускает в формате GTIN-8, GTIN-12, GTIN-13, GTIN-14.
//
// Параметры:
//  GTIN          - Строка - GTIN товарной номенклатуры. Текстовая строка с GTIN(c контрольным символом).
//  СерийныйНомер - Строка - Серийный номер номенклатуры.
//  Фильтр        - Число - Фильтр
// 
// Возвращаемое значение:
//  Строка - HEX с сформированным EPC для записи на метку RFID.
//
Функция СформироватьДанныеSGTIN96(Знач GTIN, Знач СерийныйНомер, Знач Фильтр = 3) Экспорт
	
	ВремGTIN = ДобавитьЛидирующиеНули(GTIN, 14);
	ВремGTIN = Лев(ВремGTIN, 13); // Отбрасываем контрольный символ.
	
	Если СтрДлина(GTIN) > 13 И Лев(GTIN, 1) <> "0" Тогда
		ЗнаковКомпании = 9;
		Индикатор = Лев(ВремGTIN, 1);
		Компания = Сред(ВремGTIN, 2, ЗнаковКомпании);
		ГруппаТоваров = Индикатор + Прав(ВремGTIN, 3);
	Иначе
		ЗнаковКомпании = 7;
		Компания = Лев(ВремGTIN, ЗнаковКомпании + 1);
		ГруппаТоваров = Сред(ВремGTIN, ЗнаковКомпании + 2);
	КонецЕсли;
	
	Если ЗнаковКомпании = 7 Тогда
		РазрядовКомпании = 24;
		Разделитель      = 5;
	ИначеЕсли ЗнаковКомпании = 9 Тогда
		РазрядовКомпании = 30;
		Разделитель = 3;
	Иначе
		Разделитель      = 3;
		РазрядовКомпании = 30;
	КонецЕсли;
	
	СерийныйНомер = ?(ПустаяСтрока(СерийныйНомер), "0", СерийныйНомер);
	EPC = "00110000";  // Определяем заголовок SGTIN-96.
	EPC = EPC + ДобавитьЛидирующиеНули(ПреобразоватьЧислоВБинарнуюСтроку(Фильтр), 3);      // Фильтр.
	EPC = EPC + ДобавитьЛидирующиеНули(ПреобразоватьЧислоВБинарнуюСтроку(Разделитель), 3); // Разделитель
	EPC = EPC + ДобавитьЛидирующиеНули(ПреобразоватьЧислоВБинарнуюСтроку(Число(Компания)), РазрядовКомпании);
	EPC = EPC + ДобавитьЛидирующиеНули(ПреобразоватьЧислоВБинарнуюСтроку(Число(ГруппаТоваров)), 44 - РазрядовКомпании);
	EPC = EPC + ДобавитьЛидирующиеНули(ПреобразоватьЧислоВБинарнуюСтроку(Число(СерийныйНомер)), 38);
	
	Результат = ПреобразоватьБинарнуюСтрокуВHEX(EPC);
	Возврат Результат;

КонецФункции

// Сформировать серийный номер по правилам производителей чипов.
//
Функция ПолучитьСерийныйНомерПоTID(Знач TID, Знач EPC = Неопределено) Экспорт
	
	ОписаниеОшибки = НСтр("ru='Ошибка генерации серийного номера по TID.'");
	РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, СерийныйНомер", Ложь, ОписаниеОшибки);
	
	ПризнакG2 = Лев(TID, 2);
	Если ПризнакG2 <> "E2" Тогда // Фиксированное значение "E2" признак того что тип соответствует EPC Class1Gen2. 
		ОписаниеОшибки = НСтр("ru='Указанный %1 не соответствует типу %2'");
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, "TID", "EPCClass1Gen2");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	// Преобразовываем HEX строку значение банка TID в бинарную строку.
	БитовыйМассив = ПреобразоватьHEXВБинарнуюСтроку(TID);
	// Получаем префикс производителя.
	Производитель = Сред(TID, 3, 3);
	
	Если Производитель = "001" Или Производитель = "801" Тогда // Чипы Impinj
		
		СерияЧипа = Сред(БитовыйМассив, 84, 2); // Серия чипа 00
		Если СерияЧипа = "00" Тогда
			СерийныйНомер = "000" 
						+ Сред(БитовыйМассив, 86, 8)
						+ Сред(БитовыйМассив, 66, 15)
						+ Сред(БитовыйМассив, 94, 3)
						+ Сред(БитовыйМассив, 65, 1)
						+ Сред(БитовыйМассив, 55, 4)
						+ Сред(БитовыйМассив, 61, 4);
		Иначе // Серия чипа 01,10,11
			СерийныйНомер = Сред(БитовыйМассив, 86, 11) 
						+ Сред(БитовыйМассив, 65, 16)
						+ Сред(БитовыйМассив, 52, 2)
						+ Сред(БитовыйМассив, 57, 1)
						+ Сред(БитовыйМассив, 55, 4)
						+ Сред(БитовыйМассив, 61, 4);
					КонецЕсли;
					
	ИначеЕсли Производитель = "006" Или Производитель = "806" Тогда // Чипы NXP Semiconductors 
		
		СерияЧипа = Сред(БитовыйМассив, 21, 11); // Серия чипа 
		СерияЧипа = ПреобразоватьБинарнуюСтрокуВHEX(СерияЧипа);
		Если СерияЧипа = "806" Или СерияЧипа = "807" Тогда // G2iL или G2iL+
			СерийныйНомер = "111"
				+ Сред(БитовыйМассив, 24, 3) 
				+ Сред(БитовыйМассив, 33, 32);
		Иначе
			СерийныйНомер = Сред(БитовыйМассив, 59, 38);
		КонецЕсли;
		
	ИначеЕсли Производитель = "003" Или Производитель = "803" Тогда // Чипы Alien Technology  
		
		// Words 2, 3, 4 and 5
		СерийныйНомер = Сред(БитовыйМассив, 59, 38);
		
	Иначе
		ОписаниеОшибки = НСтр("ru='Генерация серийного номера для чипа производителя указанного в %1 не поддерживается.'");
		РезультатВыполнения.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, "TID"); 
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РезультатВыполнения.Результат = Истина;
	РезультатВыполнения.СерийныйНомер = ПреобразоватьБинарнуюСтрокуВЧисло(СерийныйНомер);
		
	Возврат РезультатВыполнения;
	
КонецФункции

// Преобразовывает HEX строку в строку символов.
//
// Параметры:
//  СтрокаHEX - Строка - Строка HEX содержащая символы.  
// 
// Возвращаемое значение:
//  Строка - Строка символов
//
Функция ПреобразоватьHEXВСтроку(Знач СтрокаHEX) Экспорт
	
	Результат = "";
	ВремСтрока = СтрокаHEX;
	КодСимвола = 0;
	
	Пока СтрДлина(ВремСтрока) > 0 Цикл
		ТекСимвол  = Лев(ВремСтрока, 2);
		ТекСимвол  = ПреобразоватьHEXВБинарнуюСтроку(ТекСимвол);
		КодСимвола = ПреобразоватьБинарнуюСтрокуВЧисло(ТекСимвол);
		Если КодСимвола > 31 Тогда
			Результат = Результат + Символ(КодСимвола);
		КонецЕсли;
		ВремСтрока = Сред(ВремСтрока, 3);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразовывает строку символов в HEX строку.
//
// Параметры:
//   Строка - Строка - Тестовая строка
// 
// Возвращаемое значение:
//   - Строка - Строка HEX содержащая символы.  
//
Функция ПреобразоватьСтрокуВHEX(Знач Строка) Экспорт
	
	Результат = "";
	ИндексСимвола = 1;
	
	Пока ИндексСимвола <= СтрДлина(Строка) Цикл
		ТекКод = КодСимвола(Строка, ИндексСимвола);
		ТекСимвол = ДобавитьЛидирующиеНули(ПреобразоватьЧислоВБинарнуюСтроку(ТекКод), 8);
		Результат = Результат + ПреобразоватьБинарнуюСтрокуВHEX(ТекСимвол);
		ИндексСимвола = ИндексСимвола + 1;
	КонецЦикла;
	
	Результат = ДобавитьЛидирующиеНули(Результат, 8);
	Возврат Результат;
	
КонецФункции

// Функция - Преобразовать HEX в бинарную строку
//
// Параметры:
//  СтрокаHEX - Строка - Строка HEX содержащая символы.  
// 
// Возвращаемое значение:
//  Строка - Текстовая строка в бинарном представлении (Пример "000010101"). 
//
Функция ПреобразоватьHEXВБинарнуюСтроку(Знач СтрокаHEX) Экспорт
	
	Результат = "";
	
	Для ИндексСимвола = 1 По СтрДлина(СтрокаHEX) Цикл 
		ТекСимвол = Сред(СтрокаHEX, ИндексСимвола, 1);
		Если ТекСимвол = "0" Тогда 
			Результат = Результат + "0000"
		ИначеЕсли ТекСимвол = "1" Тогда 
			Результат = Результат + "0001"
		ИначеЕсли ТекСимвол = "2" Тогда 
			Результат = Результат + "0010"
		ИначеЕсли ТекСимвол = "3" Тогда 
			Результат = Результат + "0011"
		ИначеЕсли ТекСимвол = "4" Тогда 
			Результат = Результат + "0100"
		ИначеЕсли ТекСимвол = "5" Тогда 
			Результат = Результат + "0101"
		ИначеЕсли ТекСимвол = "6" Тогда 
			Результат = Результат + "0110"
		ИначеЕсли ТекСимвол = "7" Тогда 
			Результат = Результат + "0111"
		ИначеЕсли ТекСимвол = "8" Тогда 
			Результат = Результат + "1000"
		ИначеЕсли ТекСимвол = "9" Тогда 
			Результат = Результат + "1001"
		ИначеЕсли ТекСимвол = "A" Тогда 
			Результат = Результат + "1010"
		ИначеЕсли ТекСимвол = "B" Тогда 
			Результат = Результат + "1011"
		ИначеЕсли ТекСимвол = "C" Тогда 
			Результат = Результат + "1100"
		ИначеЕсли ТекСимвол = "D" Тогда 
			Результат = Результат + "1101"
		ИначеЕсли ТекСимвол = "E" Тогда 
			Результат = Результат + "1110"
		ИначеЕсли ТекСимвол = "F" Тогда 
			Результат = Результат + "1111"
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Преобразовать бинарную строку ВHEX
//
// Параметры:
//  БинарнаяСтрока- Строка - Текстовая строка в бинарном представлении (Пример "000010101").
// 
// Возвращаемое значение:
//  Строка - Строка HEX содержащая символы.  
//
Функция ПреобразоватьБинарнуюСтрокуВHEX(Знач БинарнаяСтрока) Экспорт
	
	Результат = "";
	ВремСтрока = БинарнаяСтрока;
	
	Пока СтрДлина(ВремСтрока) > 0 Цикл
		ТекСимвол = Лев(ВремСтрока, 4);
		Если ТекСимвол = "0000" Тогда 
			Результат = Результат + "0";
		ИначеЕсли ТекСимвол = "0001" Тогда 
			Результат = Результат + "1";
		ИначеЕсли ТекСимвол = "0010" Тогда 
			Результат = Результат + "2";
		ИначеЕсли ТекСимвол = "0011" Тогда 
			Результат = Результат + "3";
		ИначеЕсли ТекСимвол = "0100" Тогда 
			Результат = Результат + "4";
		ИначеЕсли ТекСимвол = "0101" Тогда 
			Результат = Результат + "5";
		ИначеЕсли ТекСимвол = "0110" Тогда 
			Результат = Результат + "6";
		ИначеЕсли ТекСимвол = "0111" Тогда 
			Результат = Результат + "7";
		ИначеЕсли ТекСимвол = "1000" Тогда 
			Результат = Результат + "8";
		ИначеЕсли ТекСимвол = "1001" Тогда 
			Результат = Результат + "9";
		ИначеЕсли ТекСимвол = "1010" Тогда 
			Результат = Результат + "A";
		ИначеЕсли ТекСимвол = "1011" Тогда 
			Результат = Результат + "B";
		ИначеЕсли ТекСимвол = "1100" Тогда 
			Результат = Результат + "C";
		ИначеЕсли ТекСимвол = "1101" Тогда 
			Результат = Результат + "D";
		ИначеЕсли ТекСимвол = "1110" Тогда 
			Результат = Результат + "E";
		ИначеЕсли ТекСимвол = "1111" Тогда 
			Результат = Результат + "F";
		КонецЕсли;
		ВремСтрока = Сред(ВремСтрока, 5);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Преобразовать бинарную строку в десятичное число
//
// Параметры:
//  БинарнаяСтрока - Строка - Текстовая строка в бинарном представлении (Пример "000010101"). 
// 
// Возвращаемое значение:
//  Число - Десятичное число. 
//
Функция ПреобразоватьБинарнуюСтрокуВЧисло(Знач БинарнаяСтрока) Экспорт
	
	Результат = 0;
	ТекущийИндекс = СтрДлина(БинарнаяСтрока) - 1;
	
	Для ИндексСимвол = 1 По СтрДлина(БинарнаяСтрока) Цикл
		ТекСимвол = Сред(БинарнаяСтрока, ИндексСимвол, 1);
		Если ТекСимвол = "1" Тогда
			Результат = Результат + Pow(2, ТекущийИндекс); 
		КонецЕсли;
		ТекущийИндекс = ТекущийИндекс - 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Преобразовать десятичное число в бинарную строку
//
// Параметры:
//  Число - Число - Десятичное число которое будет преобразовано в бинарный вид. 
//  КоличествоСимволов - Число - количество символов для преобразования.
// 
// Возвращаемое значение:
//  Строка - Текстовая строка в бинарном представлении (Пример "000010101").
//
Функция ПреобразоватьЧислоВБинарнуюСтроку(Знач Число, Знач КоличествоСимволов = 0) Экспорт 
	
	Результат = "";
	
	Пока Число > 0 Цикл
		Остаток = Число % 2;
		Число = Цел(Число / 2);
		Результат = Строка(Остаток) + Результат;
	КонецЦикла;
	
	Результат =?(ПустаяСтрока(Результат), "0", Результат); 
	
	Если КоличествоСимволов > 0 Тогда
		Пока СтрДлина(Результат) < КоличествоСимволов Цикл
			Результат = "0" + Результат;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет соответствие ИНН требованиям.
//
// Параметры:
//  ИНН                - Строка - проверяемый индивидуальный номер налогоплательщика.
//  ЭтоЮридическоеЛицо - Булево - признак, является ли владелец ИНН юридическим лицом.
//  ТекстСообщения     - Строка - текст сообщения о найденных ошибках.
//
// Возвращаемое значение:
//  Булево - Истина, если соответствует.
//
Функция ИННСоответствуетТребованиям(Знач ИНН, ЭтоЮридическоеЛицо, ТекстСообщения) Экспорт
	
	СоответствуетТребованиям = Истина;
	ТекстСообщения = "";
	
	ИНН      = СокрЛП(ИНН);
	ДлинаИНН = СтрДлина(ИНН);
	
	Если ЭтоЮридическоеЛицо = Неопределено Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Не определен тип владельца ИНН'");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН) Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'ИНН должен состоять только из цифр'");
	КонецЕсли;
	
	Если  ЭтоЮридическоеЛицо И ДлинаИНН <> 10 Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
			+ НСтр("ru = 'ИНН юридического лица должен состоять из 10 цифр'");
	ИначеЕсли НЕ ЭтоЮридическоеЛицо И ДлинаИНН <> 12 Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
			+ НСтр("ru = 'ИНН физического лица должен состоять из 12 цифр'");
	КонецЕсли;
	
	Если СоответствуетТребованиям Тогда
		Если ЭтоЮридическоеЛицо Тогда
			КонтрольнаяСумма = 0;
			Для Индекс = 1 По 9 Цикл
				Если Индекс = 1 Тогда
					Множитель = 2;
				ИначеЕсли Индекс = 2 Тогда
					Множитель = 4;
				ИначеЕсли Индекс = 3 Тогда
					Множитель = 10;
				ИначеЕсли Индекс = 4 Тогда
					Множитель = 3;
				ИначеЕсли Индекс = 5 Тогда
					Множитель = 5;
				ИначеЕсли Индекс = 6 Тогда
					Множитель = 9;
				ИначеЕсли Индекс = 7 Тогда
					Множитель = 4;
				ИначеЕсли Индекс = 8 Тогда
					Множитель = 6;
				ИначеЕсли Индекс = 9 Тогда
					Множитель = 8;
				КонецЕсли;
				Цифра = Число(Сред(ИНН, Индекс, 1));
				КонтрольнаяСумма = КонтрольнаяСумма + Цифра * Множитель;
			КонецЦикла;
			
			КонтрольныйРазряд = (КонтрольнаяСумма %11) %10;
			Если КонтрольныйРазряд <> Число(Сред(ИНН, 10, 1)) Тогда
				СоответствуетТребованиям = Ложь;
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
				               + НСтр("ru = 'Контрольное число для ИНН не совпадает с рассчитанным'");
			КонецЕсли;
		Иначе
			КонтрольнаяСумма11 = 0;
			КонтрольнаяСумма12 = 0;
			Для Индекс = 1 По 11 Цикл
				// Расчет множителя для 11-го и 12-го разрядов.
				Если Индекс = 1 Тогда
					Множитель11 = 7;
					Множитель12 = 3;
				ИначеЕсли Индекс = 2 Тогда
					Множитель11 = 2;
					Множитель12 = 7;
				ИначеЕсли Индекс = 3 Тогда
					Множитель11 = 4;
					Множитель12 = 2;
				ИначеЕсли Индекс = 4 Тогда
					Множитель11 = 10;
					Множитель12 = 4;
				ИначеЕсли Индекс = 5 Тогда
					Множитель11 = 3;
					Множитель12 = 10;
				ИначеЕсли Индекс = 6 Тогда
					Множитель11 = 5;
					Множитель12 = 3;
				ИначеЕсли Индекс = 7 Тогда
					Множитель11 = 9;
					Множитель12 = 5;
				ИначеЕсли Индекс = 8 Тогда
					Множитель11 = 4;
					Множитель12 = 9;
				ИначеЕсли Индекс = 9 Тогда
					Множитель11 = 6;
					Множитель12 = 4;
				ИначеЕсли Индекс = 10 Тогда
					Множитель11 = 8;
					Множитель12 = 6;
				ИначеЕсли Индекс = 11 Тогда
					Множитель11 = 0;
					Множитель12 = 8;
				КонецЕсли;
				
				Цифра = Число(Сред(ИНН, Индекс, 1));
				КонтрольнаяСумма11 = КонтрольнаяСумма11 + Цифра * Множитель11;
				КонтрольнаяСумма12 = КонтрольнаяСумма12 + Цифра * Множитель12;
				
			КонецЦикла;
			
			КонтрольныйРазряд11 = (КонтрольнаяСумма11 %11) %10;
			КонтрольныйРазряд12 = (КонтрольнаяСумма12 %11) %10;
			
			Если КонтрольныйРазряд11 <> Число(Сред(ИНН,11,1)) ИЛИ КонтрольныйРазряд12 <> Число(Сред(ИНН,12,1)) Тогда
				СоответствуетТребованиям = Ложь;
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
				               + НСтр("ru = 'Контрольное число для ИНН не совпадает с рассчитанным'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СоответствуетТребованиям;
	
КонецФункции 

#КонецОбласти

#Область ПрограммныйИнтерфейсККТ

#Область НефискальныйДокумент

// Функция формирует текст нефискального документа по шаблону.
//
// Параметры:
// ОбщиеПараметры - Структура - где:
// *ПозицииЧека - Массив из Структура - где:
// **Наименование - Строка - .
// **ДанныеПоставщика - Структура - где:
// ***Наименование - Строка - .
// **ДанныеАгента - Структура - где: 
// ***ОператорПеревода - Структура - 
// ****Наименование - Строка - .
// *ДанныеПоставщика - Структура - где:
// **Наименование - Строка - .
// *ДанныеАгента - Структура - где: 
// ** ОператорПеревода - Структура - 
// ***Наименование - Строка - .
//
// Возвращаемое значение:
// Массив - .
Функция СформироватьТекстНефискальногоДокумента(ТипДокумента, ОбщиеПараметры, ШиринаСтроки = 32, ДополнительныйТекст = Неопределено, ФорматФФД = "1.1") Экспорт
	
	ПозицииЧека  = ?(ОбщиеПараметры.Свойство("ПозицииЧека"), ОбщиеПараметры.ПозицииЧека, Неопределено);
	ТаблицаОплат = ?(ОбщиеПараметры.Свойство("ТаблицаОплат"), ОбщиеПараметры.ТаблицаОплат, Неопределено);
	
	Если ТипДокумента = 0 Тогда
		ТипыЧеков = Новый Соответствие();
		ТипыЧеков.Вставить(1, НСтр("ru='ПРИХОД'"));          // Чек продажи     
		ТипыЧеков.Вставить(2, НСтр("ru='ВОЗВРАТ ПРИХОДА'")); // Чек возврата продажи 
		ТипыЧеков.Вставить(3, НСтр("ru='РАСХОД'"));          // Чек покупки 
		ТипыЧеков.Вставить(4, НСтр("ru='ВОЗВРАТ РАСХОДА'")); // Чек возврата покупки 
		ТипЧека = ТипыЧеков.Получить(МенеджерОборудованияКлиентСервер.КодРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета))
	ИначеЕсли ТипДокумента = 1 Тогда
		ТипЧека = НСтр("ru='ОТКРЫТИЕ СМЕНЫ'");  
	ИначеЕсли ТипДокумента = 2 Тогда
		ТипЧека = НСтр("ru='ВНЕСЕНИЕ'");  
	ИначеЕсли ТипДокумента = 3 Тогда
		ТипЧека = НСтр("ru='ВЫЕМКА'");  
	ИначеЕсли ТипДокумента = 4 Тогда
		ТипЧека = НСтр("ru='ОТЧЕТ БЕЗ ГАШЕНИЯ'");   
	ИначеЕсли ТипДокумента = 5 Тогда
		ТипЧека = НСтр("ru='ОТЧЕТ С ГАШЕНИЕМ'");  
	КонецЕсли;
	
	ПечатьКлише = Истина;
	
	Разделитель = ПостроитьПоле("", ШиринаСтроки, "=") + Символы.ПС;
	РазделительВнут = ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
	
	Текст = Разделитель;
	
	Если ПечатьКлише Тогда 
		// Сформировать шапку чека.
		Если ОбщиеПараметры.Свойство("ОрганизацияНазвание") И НЕ ПустаяСтрока(ОбщиеПараметры.ОрганизацияНазвание) Тогда
			Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.ОрганизацияНазвание, ШиринаСтроки, , Истина) + Символы.ПС;
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("АдресРасчетов") Тогда
			АдресРасчетов = ОбщиеПараметры.АдресРасчетов;
			Если НЕ ПустаяСтрока(АдресРасчетов) Тогда
				Текст = Текст + ПостроитьПолеПереносом(АдресРасчетов, ШиринаСтроки, , Истина) + Символы.ПС;
				Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда
					Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.МестоРасчетов, ШиринаСтроки, , Истина) + Символы.ПС;
				КонецЕсли;
			ИначеЕсли ОбщиеПараметры.Свойство("АдресМагазина") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресМагазина) Тогда
				Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.АдресМагазина, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
			
		Если ОбщиеПараметры.Свойство("ТекстШапки") И НЕ ПустаяСтрока(ОбщиеПараметры.ТекстШапки) Тогда
			Текст = Текст + ВыстроитьПоля(ОбщиеПараметры.ТекстШапки, , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		Если ТипДокумента = 0 Тогда 
			Текст = Текст +  ВыстроитьПоля(НСтр("ru='КАССОВЫЙ ЧЕК'"), , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		ОрганизацияИНН = ?(ОбщиеПараметры.Свойство("ОрганизацияИНН") И НЕ ПустаяСтрока(ОбщиеПараметры.ОрганизацияИНН), 
			НСтр("ru='ИНН'") + Символы.НПП + ОбщиеПараметры.ОрганизацияИНН, "");
			
		НомерЧека = ?(ОбщиеПараметры.Свойство("НомерЧека") И НЕ ПустаяСтрока(ОбщиеПараметры.НомерЧека),
			НСтр("ru='ЧЕК №'") + ОбщиеПараметры.НомерЧека, "");
			
		Если Не ПустаяСтрока(ОрганизацияИНН) Тогда
			Текст = Текст + ВыстроитьПоля(ТипЧека, ОрганизацияИНН, ШиринаСтроки) + Символы.ПС;
		Иначе
			Текст = Текст + ПостроитьПоле(ТипЧека, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		ДатаВремя = ?(ОбщиеПараметры.Свойство("ДатаВремя") И НЕ ПустаяСтрока(ОбщиеПараметры.ДатаВремя), ОбщиеПараметры.ДатаВремя, ТекущаяДата());
		ДатаВремя = Формат(ДатаВремя, "ДФ=""дд.ММ.гггг ЧЧ:мм""");
		Текст = Текст + ВыстроитьПоля(НомерЧека, ДатаВремя, ШиринаСтроки) + Символы.ПС;
		
		Если ТипДокумента = 0  Тогда
		
			Если НЕ ПустаяСтрока(ОбщиеПараметры.СведенияОПокупателе.Покупатель) Или  НЕ ПустаяСтрока(ОбщиеПараметры.Получатель) Тогда
				Текст = Текст + ПостроитьПоле(НСтр("ru='ПОКУПАТЕЛЬ'"), ШиринаСтроки) + Символы.ПС;
				Если НЕ ПустаяСтрока(ОбщиеПараметры.СведенияОПокупателе.Покупатель) Тогда
					Текст = Текст + ПостроитьПолеПереносом(" " + ОбщиеПараметры.СведенияОПокупателе.Покупатель, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ОбщиеПараметры.Получатель) Тогда
					Текст = Текст + ПостроитьПолеПереносом(" " + ОбщиеПараметры.Получатель, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ПолучательИНН) Тогда
				Текст = Текст + ПостроитьПоле(" " + НСтр("ru='ИНН:'") + ОбщиеПараметры.ПолучательИНН, ШиринаСтроки) + Символы.ПС;
			КонецЕсли; 
			Если НЕ ПустаяСтрока(ОбщиеПараметры.СведенияОПокупателе.ПокупательИНН) Тогда
				Текст = Текст + ПостроитьПоле(" " + НСтр("ru='ИНН:'") + ОбщиеПараметры.СведенияОПокупателе.ПокупательИНН, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.СведенияОПокупателе.ПокупательАдрес) Тогда
				Текст = Текст + ПостроитьПолеПереносом(" " + НСтр("ru='АДРЕС:'") + ОбщиеПараметры.СведенияОПокупателе.ПокупательАдрес, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ПризнакАгента) Тогда
				Текст = Текст + ПостроитьПоле(ВРег(Строка(ОбщиеПараметры.ПризнакАгента)), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеПоставщика.Наименование) Тогда
				Текст = Текст + ПостроитьПолеПереносом(НСтр("ru='ПОСТАВЩИК:'") + ОбщиеПараметры.ДанныеПоставщика.Наименование, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеПоставщика.Телефон) Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru='ТЛФ.ПОСТ.:'"), ОбщиеПараметры.ДанныеПоставщика.Телефон, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеПоставщика.ИНН) Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru='ИНН ПОСТАВЩИКА:'"), ОбщиеПараметры.ДанныеПоставщика.ИНН, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Операция) Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru='ПЛ.АГЕНТ ОПЕР.:'"), ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Операция, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Телефон) Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru='ПЛ.АГЕНТ.ТЛФ.:'"), ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Телефон, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Наименование) Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru='ОПЕРАТОР ПЕРЕВОДА:'"), ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Наименование, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Телефон) Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ТЛФ.ОП.ПЕРЕВОДА:'"), ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Телефон, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Адрес) Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='АДР.ОП.ПЕРЕВОДА:'"), ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Адрес, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеАгента.ОператорПеревода.ИНН) Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ИНН ОП.ПЕРЕВОДА:'"), ОбщиеПараметры.ДанныеАгента.ОператорПеревода.ИНН, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон) Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru='ОПЕР.ПО ПРИЕМУ ПЛАТ.ТЛФ:'"), ОбщиеПараметры.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДополнительныйРеквизитПользователя.Наименование) Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru='РЕК.ПОЛЬЗ.:'"), ОбщиеПараметры.ДополнительныйРеквизитПользователя.Наименование, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДополнительныйРеквизитПользователя.Значение) Тогда
				Текст = Текст + ВыстроитьПоля(НСтр("ru='РЕК.ПОЛЬЗ.:'"), ОбщиеПараметры.ДополнительныйРеквизитПользователя.Значение, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			
		КонецЕсли;
		
		Текст = Текст + РазделительВнут;
	КонецЕсли;
	
	ФорматЧисла = "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0";
	СуммаЧека   = 0;
	СуммаПозицийНДС0   = 0;
	СуммаПозицийНДС10  = 0;
	СуммаПозицийНДС18  = 0;
	СуммаПозицийНДС20  = 0;
	СуммаПозицийНДС110 = 0;
	СуммаПозицийНДС118 = 0;
	СуммаПозицийНДС120 = 0;
	СуммаПозицийБезНДС = 0;
	СуммаНДС0   = 0;
	СуммаНДС10  = 0;
	СуммаНДС18  = 0;
	СуммаНДС20  = 0;
	СуммаНДС110 = 0;
	СуммаНДС118 = 0;
	СуммаНДС120 = 0;
	СуммаБезНДС = 0;
	
	// Формируем строки чека.
	Если ПозицииЧека <> Неопределено Тогда
		
		Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
			
			ПозицияЧека = ПозицииЧека[ИндексМассива];
			
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				Наименование = ?(ПозицияЧека.Свойство("Наименование"), ПозицияЧека.Наименование, "");
				Количество   = ?(ПозицияЧека.Свойство("Количество")  , ПозицияЧека.Количество  , 1);
				Цена         = ?(ПозицияЧека.Свойство("Цена")        , ПозицияЧека.Цена        , 0);
				Сумма        = ?(ПозицияЧека.Свойство("Сумма")       , ПозицияЧека.Сумма       , 0);
				НомерСекции  = ?(ПозицияЧека.Свойство("НомерСекции") , ПозицияЧека.НомерСекции , 0);
				СтавкаНДС    = ?(ПозицияЧека.Свойство("СтавкаНДС")   , ПозицияЧека.СтавкаНДС   , 0);
				СуммаНДС     = ?(ПозицияЧека.Свойство("СуммаНДС")    , ?(ПустаяСтрока(ПозицияЧека.СуммаНДС), 0, ПозицияЧека.СуммаНДС), 0);
				СуммаСкидок  = ?(ПозицияЧека.Свойство("СуммаСкидок") , ?(ПустаяСтрока(ПозицияЧека.СуммаСкидок), 0, ПозицияЧека.СуммаСкидок), 0);
				
				ТекстСтроки  = ПостроитьПолеПереносом(Наименование, ШиринаСтроки) + Символы.ПС;
				ЦенаДляПечати = Окр(Сумма / ?(Количество > 0, Количество, 1), 2);
				
				СтрокаТовара = Формат(Количество, "ЧРД=.;ЧЦ=12;ЧДЦ=3;ЧН=0.000;ЧГ=0") + " х " 
					+ Формат(ЦенаДляПечати, ФорматЧисла) + "=" + Формат(Сумма, ФорматЧисла);
				ТекстСтроки = Символы.ПС + ТекстСтроки + ВыстроитьПоля("", СтрокаТовара, ШиринаСтроки) + Символы.ПС;
				
				Если СуммаСкидок > 0 Тогда
					ТекстСкидки = НСтр("ru='СКИДКА'") + "=" + Формат(СуммаСкидок, ФорматЧисла);
				ИначеЕсли СуммаСкидок < 0 Тогда
					ТекстСкидки = НСтр("ru='НАДБАВКА'") + "=" + Формат(СуммаСкидок, ФорматЧисла);
				Иначе
					ТекстСкидки = "";
				КонецЕсли;
				
				ТекстНалога = "";
				Если ПозицияЧека.СтавкаНДС = 10 Тогда
					СуммаПозицийНДС10 = СуммаПозицийНДС10 + Сумма;
					СуммаНДС10 = СуммаНДС10 + СуммаНДС;
					ТекстНалога = НСтр("ru='НДС 10%'");
				ИначеЕсли ПозицияЧека.СтавкаНДС = 18 Тогда
					СуммаПозицийНДС18  = СуммаПозицийНДС18 + Сумма; 
					СуммаНДС18 = СуммаНДС18 + СуммаНДС;
					ТекстНалога = НСтр("ru='НДС 18%'");
				ИначеЕсли ПозицияЧека.СтавкаНДС = 20 Тогда
					СуммаПозицийНДС20  = СуммаПозицийНДС20 + Сумма; 
					СуммаНДС20 = СуммаНДС20 + СуммаНДС;
					ТекстНалога = НСтр("ru='НДС 20%'");
				ИначеЕсли ПозицияЧека.СтавкаНДС = 0 Тогда
					СуммаПозицийНДС0 = СуммаПозицийНДС0 + Сумма;
					СуммаНДС0 = СуммаНДС0 + СуммаНДС;
					ТекстНалога = НСтр("ru='НДС 0%'");
				ИначеЕсли ПозицияЧека.СтавкаНДС = 110 Тогда
					СуммаПозицийНДС110 = СуммаПозицийНДС110 + Сумма;
					СуммаНДС110 = СуммаНДС110 + СуммаНДС;
					ТекстНалога = НСтр("ru='НДС 10/110%'");
				ИначеЕсли ПозицияЧека.СтавкаНДС = 118 Тогда
					СуммаПозицийНДС118 = СуммаПозицийНДС118 + Сумма;
					СуммаНДС118 = СуммаНДС118 + СуммаНДС;
					ТекстНалога = НСтр("ru='НДС 18/118%'");
				ИначеЕсли ПозицияЧека.СтавкаНДС = 120 Тогда
					СуммаПозицийНДС120 = СуммаПозицийНДС120 + Сумма;
					СуммаНДС120 = СуммаНДС120 + СуммаНДС;
					ТекстНалога = НСтр("ru='НДС 20/120%'");
				Иначе 
					СуммаПозицийБезНДС = СуммаПозицийБезНДС + Сумма;
					СуммаБезНДС = СуммаБезНДС + Сумма;
					ТекстНалога = НСтр("ru='БЕЗ НДС'");
				КонецЕсли;
				
				Если ПустаяСтрока(ТекстСкидки) Тогда
					ТекстСтроки = ТекстСтроки + ПостроитьПоле(ТекстНалога, ШиринаСтроки) + Символы.ПС;
				Иначе
					ТекстСтроки = ТекстСтроки + ВыстроитьПоля(ТекстНалога, ТекстСкидки, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Текст = Текст + ТекстСтроки; 
				
				Если НЕ ПустаяСтрока(ПозицияЧека.ПризнакПредметаРасчета) Тогда
					ПризнакПредметаРасчетаКод = МенеджерОборудованияКлиентСервер.КодПризнакаПредметаРасчета(ПозицияЧека.ПризнакПредметаРасчета);
					ПризнакПредметаРасчетаНаименование = ВРег(МенеджерОборудованияКлиентСервер.НаименованиеПризнакаПредметаРасчета(ПризнакПредметаРасчетаКод));
					Текст = Текст + ПостроитьПоле(ПризнакПредметаРасчетаНаименование, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ПозицияЧека.ПризнакСпособаРасчета) Тогда
					ПризнакСпособаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаСпособаРасчета(ПозицияЧека.ПризнакСпособаРасчета);
					ПризнакСпособаРасчетаНаименование = МенеджерОборудованияКлиентСервер.НаименованиеПризнакаСпособаРасчета(ПризнакСпособаРасчета);
					Текст = Текст + ПостроитьПоле(ПризнакСпособаРасчетаНаименование, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если ПозицияЧека.Свойство("КонтрольнаяМарка") И НЕ ПустаяСтрока(ПозицияЧека.КонтрольнаяМарка) Тогда 
					Текст = Текст + ПостроитьПоле(НСтр("ru='[М]'"), ШиринаСтроки) + Символы.ПС;
				ИначеЕсли ПозицияЧека.ДанныеКодаТоварнойНоменклатуры.Свойство("РеквизитКодаТовара") Тогда 
					Штрихкод = ПозицияЧека.Штрихкод;
					Если ПозицияЧека.Свойство("КодВидаНоменклатурнойКлассификации") И НЕ ПустаяСтрока(ПозицияЧека.КодВидаНоменклатурнойКлассификации) Тогда
						Штрихкод = ПозицияЧека.КодВидаНоменклатурнойКлассификации;
					КонецЕсли;
					КодТовараИдентифицируетЭкземпляр = МенеджерОборудованияВызовСервера.КодТовараИдентифицируетЭкземпляр(ПозицияЧека.ДанныеКодаТоварнойНоменклатуры.РеквизитКодаТовара, Штрихкод);
					КодТовараТекст = Штрихкод;
					Если КодТовараИдентифицируетЭкземпляр Тогда
						КодТовараТекст = НСтр("ru='[М]'") + КодТовараТекст + Символы.НПП;
					КонецЕсли;
					Текст = Текст + ПостроитьПолеПереносом(КодТовараТекст, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ПозицияЧека.КодСтраныПроисхожденияТовара) Тогда
					Текст = Текст + ПостроитьПоле(НСтр("ru='КОД СТРАНЫ:'") + ПозицияЧека.КодСтраныПроисхожденияТовара, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.НомерТаможеннойДекларации) Тогда
					Текст = Текст + ПостроитьПолеПереносом(НСтр("ru='ДЕКЛАРАЦИЯ:'") + ПозицияЧека.НомерТаможеннойДекларации, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.СуммаАкциза) И ПозицияЧека.СуммаАкциза > 0 Тогда
					Текст = Текст + ПостроитьПоле(НСтр("ru='АКЦИЗ:'") + ПозицияЧека.СуммаАкциза, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ЕдиницаИзмерения) Тогда
					Текст = Текст + ПостроитьПоле(НСтр("ru='ЕД.ИЗМЕРЕНИЯ:'") + ПозицияЧека.ЕдиницаИзмерения, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ПозицияЧека.ПризнакАгентаПоПредметуРасчета) Тогда
					Текст = Текст + ПостроитьПоле(ВРег(Строка(ПозицияЧека.ПризнакАгентаПоПредметуРасчета)), ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеПоставщика.Наименование) Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='ПОСТАВЩИК:'"), ПозицияЧека.ДанныеПоставщика.Наименование, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеПоставщика.Телефон) Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='ТЛФ.ПОСТ.:'"), ПозицияЧека.ДанныеПоставщика.Телефон, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеПоставщика.ИНН) Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='ИНН ПОСТАВЩИКА:'"), ПозицияЧека.ДанныеПоставщика.ИНН, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Операция) Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='ПЛ.АГЕНТ ОПЕР.:'"), ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Операция, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Телефон) Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru=' ПЛ.АГЕНТ ТЛФ.:'"), ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Телефон, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеАгента.ОператорПеревода.Наименование) Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='ОПЕРАТОР ПЕРЕВОДА:'"), ПозицияЧека.ДанныеАгента.ОператорПеревода.Наименование, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеАгента.ОператорПеревода.Телефон) Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='ТЛФ.ОП.ПЕРЕВОДА:'"), ПозицияЧека.ДанныеАгента.ОператорПеревода.Телефон, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеАгента.ОператорПеревода.Адрес) Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='АДР.ОП.ПЕРЕВОДА:'"), ПозицияЧека.ДанныеАгента.ОператорПеревода.Адрес, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеАгента.ОператорПеревода.ИНН) Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='ИНН ОП.ПЕРЕВОДА:'"), ПозицияЧека.ДанныеАгента.ОператорПеревода.ИНН, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон) Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='ОПЕР.ПО ПРИЕМУ ПЛАТ.ТЛФ:'"), ПозицияЧека.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДополнительныйРеквизит) Тогда
					Текст = Текст + ВыстроитьПоля(НСтр("ru='ДОП.РЕК.:'"), ПозицияЧека.ДополнительныйРеквизит, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				СуммаЧека = СуммаЧека + Сумма;
			ИначеЕсли ПозицияЧека.Свойство("ТекстоваяСтрока") Тогда
				ТекстСтроки = ?(ПозицияЧека.Свойство("Текст"), ПозицияЧека.Текст, "");
				Текст = Текст + ТекстСтроки + Символы.ПС;
			ИначеЕсли ПозицияЧека.Свойство("ШтрихКод") Тогда
				СтрокаШтрихкода = "|ШтрихКод|" + ПозицияЧека.ТипШтрихкода + "|" + ПозицияЧека.ШтрихКод; 
				Текст = Текст + СтрокаШтрихкода + Символы.ПС; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Формируем подвал чека
	Если ТаблицаОплат <> Неопределено Тогда
		
		СуммаНаличными       = 0;
		СуммаЭлектронными    = 0;
		СуммаПостоплатой     = 0;
		СуммаПредоплатой     = 0;
		СуммаПредоставлением = 0;
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда
				СуммаЭлектронными = СуммаЭлектронными + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата") Тогда
				СуммаПредоплатой = СуммаПредоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата") Тогда
				СуммаПостоплатой = СуммаПостоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление") Тогда
				СуммаПредоставлением = СуммаПредоставлением + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаНаличными = СуммаНаличными + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
		
		СуммаОплаты = СуммаНаличными + СуммаЭлектронными + СуммаПостоплатой + СуммаПредоплатой + СуммаПредоставлением;
	
		Текст = Текст + РазделительВнут;
		Текст = Текст + ВыстроитьПоля(НСтр("ru='ИТОГ'"), "=" + Формат(СуммаЧека, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		Текст = Текст + РазделительВнут;
		
		Текст = Текст + НСтр("ru='ОПЛАТА'") + Символы.ПС;
		
		Если ФорматФФД = "1.0" Тогда // ФФД 1.0
			Если СуммаНаличными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='НАЛИЧНЫМИ'"), "=" + Формат(СуммаНаличными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаЭлектронными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаЭлектронными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаПостоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаПостоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаПредоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаПредоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;          
			Если СуммаПредоставлением > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаПредоставлением, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;          
		Иначе // ФФД 1.0.5 & ФФД 1.1
			Если СуммаНаличными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='НАЛИЧНЫМИ'"), "=" + Формат(СуммаНаличными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаЭлектронными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='БЕЗНАЛИЧНЫМИ'"), "=" + Формат(СуммаЭлектронными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаПредоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ПРЕДВАРИТЕЛЬНАЯ'"), "=" + Формат(СуммаПредоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;          
			Если СуммаПостоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ПОСЛЕДУЮЩАЯ'"), "=" + Формат(СуммаПостоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаПредоставлением > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ИНАЯ ФОРМА'"), "=" + Формат(СуммаПредоставлением, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;          
		КонецЕсли; 
		
		Если СуммаОплаты - СуммаЧека > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru='ПОЛУЧЕНО'"), "=" + Формат(СуммаОплаты, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='СДАЧА'"), "=" + Формат(СуммаОплаты - СуммаЧека, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли; 
		
		Если ОбщиеПараметры.Свойство("СистемаНалогообложения") Тогда
			СистемаНалогообложенияКод = МенеджерОборудованияКлиентСервер.КодСистемыНалогообложенияККТ(ОбщиеПараметры.СистемаНалогообложения);
			СистемаНалогообложения = МенеджерОборудованияКлиентСервер.НаименованиеСистемыНалогообложения(СистемаНалогообложенияКод, Истина);
			Текст = Текст + ВыстроитьПоля(НСтр("ru='СНО:'"), СистемаНалогообложения, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;          
		
		Если СуммаПозицийНДС20 > 0 Тогда
			ЗначениеНДС = ?(СуммаНДС20 > 0, СуммаНДС20, СуммаПозицийНДС20 / 120 * 20);
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 20%'"), "=" + Формат(ЗначениеНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаПозицийНДС18 > 0 Тогда
			ЗначениеНДС = ?(СуммаНДС18 > 0, СуммаНДС18, СуммаПозицийНДС18 / 118 * 18);
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 18%'"), "=" + Формат(ЗначениеНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаПозицийНДС10 > 0 Тогда
			ЗначениеНДС = ?(СуммаНДС10 > 0, СуммаНДС10, СуммаПозицийНДС10 / 110 * 10);
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 10%'"), "=" + Формат(ЗначениеНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаПозицийНДС120 > 0 Тогда
			ЗначениеНДС = ?(СуммаНДС120 > 0, СуммаНДС120, СуммаПозицийНДС120 / 120 * 20);
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 20/120%'"), "=" + Формат(ЗначениеНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаПозицийНДС118 > 0 Тогда
			ЗначениеНДС = ?(СуммаНДС118 > 0, СуммаНДС118, СуммаПозицийНДС118 / 118 * 18);
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 18/118%'"), "=" + Формат(ЗначениеНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаПозицийНДС110 > 0 Тогда
			ЗначениеНДС = ?(СуммаНДС110 > 0, СуммаНДС110, СуммаПозицийНДС110 / 110 * 10);
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 10/110%'"), "=" + Формат(ЗначениеНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаПозицийНДС0 > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА C НДС 0%'")  , "=" + Формат(СуммаПозицийНДС0, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаПозицийБезНДС > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА БЕЗ НДС'"), "=" + Формат(СуммаПозицийБезНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		Кассир = ?(ОбщиеПараметры.Свойство("Кассир"), ОбщиеПараметры.Кассир, "");
		Текст = Текст + ПостроитьПоле(НСтр("ru='КАССИР'") + ":" + Символы.НПП + Кассир, ШиринаСтроки) + Символы.ПС + Символы.ПС;                        
		Текст = Текст + ПостроитьПоле(НСтр("ru='ПОДПИСЬ'") + ":", ШиринаСтроки, "_") + Символы.ПС;
		
		Если ОбщиеПараметры.Свойство("ТекстПодвала") И НЕ ПустаяСтрока(ОбщиеПараметры.ТекстПодвала) Тогда
			Текст = Текст + ВыстроитьПоля(ОбщиеПараметры.ТекстПодвала, , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДополнительныйТекст) Тогда
		Текст = Текст + ДополнительныйТекст + Символы.ПС;
	КонецЕсли;
	
	Текст = Текст + Разделитель + Символы.ПС;
	
	Возврат Текст;
	
КонецФункции

// Функция формирует текст нефискального чека по шаблону.
//
Функция СформироватьТекстНефискальногоЧека(ОбщиеПараметры, ШиринаСтроки = 32, ФорматФФД = "1.1") Экспорт
	
	Возврат СформироватьТекстНефискальногоДокумента(0, ОбщиеПараметры, ШиринаСтроки, , ФорматФФД);
	
КонецФункции

#КонецОбласти

#Область QRКодЧекаККТ

// Функция возвращает структуру параметров QR кода чека ККТ.
//
Функция ПараметрыQRКодаЧекаККТ() Экспорт
	
	ПараметрыШтрихкода = Новый Структура();
	ПараметрыШтрихкода.Вставить("ДатаВремяРасчета"); // Дата и время осуществления расчета 
	ПараметрыШтрихкода.Вставить("СуммаРасчета", 0);  // Сумма расчета в рублях и копейках
	ПараметрыШтрихкода.Вставить("НомерФискальногоНакопителя"); // Заводской номер фискального накопителя
	ПараметрыШтрихкода.Вставить("НомерФискальногоДокумента");  // Порядковый номер фискального документа
	ПараметрыШтрихкода.Вставить("ФискальныйПризнак"); // Фискальный признак документ
	ПараметрыШтрихкода.Вставить("ПризнакРасчета"); // Признак расчета, перечисление
	ПараметрыШтрихкода.Вставить("ПризнакРасчетаКод"); // Признак расчета, код
	Возврат ПараметрыШтрихкода;
	
КонецФункции

// Функция расшифровывает QR код для чека ККТ. Структура описана в документе ФФД в разделе 61.
//
Функция РасшифроватьQRКодЧекаККТ(ЗначениеQRКода) Экспорт
	
	ДанныеШтрихкода = ПараметрыQRКодаЧекаККТ();
	ДанныеШтрихкода.Вставить("Расшифрован", Истина);
	
	ПозицияСимволаСР = Найти(ЗначениеQRКода, "&s=");   
	ПозицияСимволаФП = Найти(ЗначениеQRКода, "&fp=");  
	ПозицияСимволаФН = Найти(ЗначениеQRКода, "&fn=");  
	ПозицияСимволаФД = Найти(ЗначениеQRКода, "&i=");  
	
	Если Лев(ЗначениеQRКода, 2) <> "t=" Или ПозицияСимволаСР = 0 Или ПозицияСимволаФП = 0 Или ПозицияСимволаФН = 0 Или ПозицияСимволаФД = 0 Тогда
		ДанныеШтрихкода.Расшифрован = Ложь;
		Возврат ДанныеШтрихкода;
	КонецЕсли;
	// Дата время расчета.
	ДатаВремяРасчета = Сред(ЗначениеQRКода, 3, ПозицияСимволаСР - 3);
	ДанныеШтрихкода.ДатаВремяРасчета = Дата(Лев(ДатаВремяРасчета, 4), Сред(ДатаВремяРасчета, 5, 2), Сред(ДатаВремяРасчета, 7, 2), 
		Сред(ДатаВремяРасчета, 10, 2), Сред(ДатаВремяРасчета, 12, 2) ,0);
	// Номер фискального накопителя
	ДанныеШтрихкода.НомерФискальногоНакопителя = Сред(ЗначениеQRКода, ПозицияСимволаФН + 4, ПозицияСимволаФД - ПозицияСимволаФН - 4);
	// Номер фискального документа
	ДанныеШтрихкода.НомерФискальногоДокумента = Сред(ЗначениеQRКода, ПозицияСимволаФД + 3, ПозицияСимволаФП - ПозицияСимволаФД - 3);
	// Сумма расчета
	ДанныеШтрихкода.СуммаРасчета = Число(Сред(ЗначениеQRКода, ПозицияСимволаСР + 3, ПозицияСимволаФН - ПозицияСимволаСР - 3));
	// Фискальный признак
	Значение = Сред(ЗначениеQRКода, ПозицияСимволаФП + 4);
	ДанныеШтрихкода.ФискальныйПризнак = Лев(Значение, СтрДлина(Значение) - 4);
	// Признак расчета
	ДанныеШтрихкода.ПризнакРасчетаКод = Число(Прав(Значение, 1));
	ДанныеШтрихкода.ПризнакРасчета = РасчетДенежнымиСредствамиПоКоду(ДанныеШтрихкода.ПризнакРасчетаКод);
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

// Функция формирует QR код для чека ККТ. Структура описана в документе ФФД в разделе 61.
//
Функция СформироватьQRКодЧекаККТ(ПараметрыQRКода) Экспорт
	
	ДанныеQRКода = "t=%D%&s=%S%&fn=%F%&i=%I%&fp=%P%&n=%T%"; // Не локализовывать - утверждено ФФД.
	// Формирование QR кода.
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%D%", Формат(ПараметрыQRКода.ДатаВремяРасчета, "ДФ='ггггММддTЧЧмм'")); // Не локализовывать - утверждено ФФД.
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%F%", ПараметрыQRКода.НомерФискальногоНакопителя);
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%S%", Формат(ПараметрыQRКода.СуммаРасчета, "ЧДЦ=2;ЧГ=;ЧРД=."));
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%I%", Формат(ПараметрыQRКода.НомерФискальногоДокумента, "ЧГ="));
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%P%", ПараметрыQRКода.ФискальныйПризнак);
	Если ПараметрыQRКода.Свойство("ПризнакРасчета") И Не ПустаяСтрока(ПараметрыQRКода.ПризнакРасчета) Тогда
		ПризнакРасчетаКод = КодРасчетаДенежнымиСредствами(ПараметрыQRКода.ПризнакРасчета);
	Иначе
		ПризнакРасчетаКод = ПараметрыQRКода.ПризнакРасчетаКод;
	КонецЕсли;
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%T%", ПризнакРасчетаКод);
	Возврат ДанныеQRКода;
	
КонецФункции

#КонецОбласти

#Область КодыОФД

// Получить код системы налогообложения ККТ.
// 
Функция КодСистемыНалогообложенияККТ(СистемаНалогообложенияККТ) Экспорт
	
	СистемыНалогообложения = Новый Соответствие();
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН")           , 0);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоход")      , 1);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоходРасход"), 2);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕНВД")          , 3);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕСН")           , 4);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.Патент")        , 5);
	
	Возврат СистемыНалогообложения.Получить(СистемаНалогообложенияККТ);
	
КонецФункции

// Получить систему налогообложения ККТ по коду
// 
Функция СистемаНалогообложенияККТПоКоду(КодСистемыНалогообложенияККТ) Экспорт
	
	СистемыНалогообложения = Новый Соответствие();
	СистемыНалогообложения.Вставить(0, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН"));
	СистемыНалогообложения.Вставить(1, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоход"));
	СистемыНалогообложения.Вставить(2, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоходРасход"));
	СистемыНалогообложения.Вставить(3, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕНВД"));
	СистемыНалогообложения.Вставить(4, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕСН"));
	СистемыНалогообложения.Вставить(5, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.Патент"));
	
	Возврат СистемыНалогообложения.Получить(КодСистемыНалогообложенияККТ);
	
КонецФункции

// Получить наименование системы налогообложения по коду.
//
Функция НаименованиеСистемыНалогообложения(СистемаНалогообложения, Кратко = Ложь) Экспорт;
	
	СистемыНалогообложения = Новый Соответствие();
	Если Кратко Тогда
		СистемыНалогообложения.Вставить(0, НСтр("ru='ОСН'"));
		СистемыНалогообложения.Вставить(1, НСтр("ru='УСН доход'"));
		СистемыНалогообложения.Вставить(2, НСтр("ru='УСН доход-расход'"));
		СистемыНалогообложения.Вставить(3, НСтр("ru='ЕНВД'"));
		СистемыНалогообложения.Вставить(4, НСтр("ru='ЕСН'"));
		СистемыНалогообложения.Вставить(5, НСтр("ru='Патент'"));
	Иначе
		СистемыНалогообложения.Вставить(0, НСтр("ru='Общая'"));
		СистемыНалогообложения.Вставить(1, НСтр("ru='Упрощенная Доход'"));
		СистемыНалогообложения.Вставить(2, НСтр("ru='Упрощенная Доход минус Расход'"));
		СистемыНалогообложения.Вставить(3, НСтр("ru='Единый налог на вмененный доход'"));
		СистемыНалогообложения.Вставить(4, НСтр("ru='Единый сельскохозяйственный налог'"));
		СистемыНалогообложения.Вставить(5, НСтр("ru='Патентная система налогообложения'"));
	КонецЕсли;
	
	Возврат СистемыНалогообложения.Получить(СистемаНалогообложения);
	
КонецФункции

// Получить код расчета денежными средствами.
// 
Функция КодРасчетаДенежнымиСредствами(ТипРасчета) Экспорт
	
	ТипыРасчета = Новый Соответствие();
	ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств")        , 1);
	ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств")       , 2);
	ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств")        , 3);
	ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств"), 4);
	
	Возврат ТипыРасчета.Получить(ТипРасчета);
	
КонецФункции

// Получить типа расчета денежными средствами по коду.
// 
Функция РасчетДенежнымиСредствамиПоКоду(КодПризнакаРасчета) Экспорт
	
	ТипыРасчета = Новый Соответствие();
	ТипыРасчета.Вставить(1, ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств"));
	ТипыРасчета.Вставить(2, ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств"));
	ТипыРасчета.Вставить(3, ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств"));
	ТипыРасчета.Вставить(4, ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств"));
	
	Возврат ТипыРасчета.Получить(КодПризнакаРасчета);
	
КонецФункции

// Получить код признака способа расчета.
// 
Функция КодПризнакаСпособаРасчета(ПризнакСпособаРасчета) Экспорт
	
	ПризнакиСпособаРасчета = Новый Соответствие();
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная")         , 1); 
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная")      , 2);
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс")                    , 3); 
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой")   , 4); 
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой"), 5);  
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты")        , 6);  
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита")            , 7);  
	
	Возврат ПризнакиСпособаРасчета.Получить(ПризнакСпособаРасчета);
	
КонецФункции

// Получить признак способа расчета по коду.
// 
Функция ПризнакСпособаРасчетаПоКоду(КодПризнакаСпособаРасчета) Экспорт
	
	ПризнакиСпособаРасчета = Новый Соответствие();
	ПризнакиСпособаРасчета.Вставить(1, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная")); 
	ПризнакиСпособаРасчета.Вставить(2, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная"));
	ПризнакиСпособаРасчета.Вставить(3, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс")); 
	ПризнакиСпособаРасчета.Вставить(4, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой")); 
	ПризнакиСпособаРасчета.Вставить(5, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой"));  
	ПризнакиСпособаРасчета.Вставить(6, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты"));  
	ПризнакиСпособаРасчета.Вставить(7, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита"));  
	
	Возврат ПризнакиСпособаРасчета.Получить(КодПризнакаСпособаРасчета);
	
КонецФункции

// Получить наименование признака способа расчета по коду.
//
Функция НаименованиеПризнакаСпособаРасчета(КодПризнакаСпособаРасчета) Экспорт;
	
	ПризнакиСпособаРасчета = Новый Соответствие();
	
	ПризнакиСпособаРасчета.Вставить(1, НСтр("ru='ПРЕДОПЛАТА 100%'"));
	ПризнакиСпособаРасчета.Вставить(2, НСтр("ru='ПРЕДОПЛАТА'"));
	ПризнакиСпособаРасчета.Вставить(3, НСтр("ru='АВАНС'"));
	ПризнакиСпособаРасчета.Вставить(4, НСтр("ru='ПОЛНЫЙ РАСЧЕТ'"));
	ПризнакиСпособаРасчета.Вставить(5, НСтр("ru='ЧАСТИЧНЫЙ РАСЧЕТ И КРЕДИТ'"));
	ПризнакиСпособаРасчета.Вставить(6, НСтр("ru='ПЕРЕДАЧА В КРЕДИТ'"));
	ПризнакиСпособаРасчета.Вставить(7, НСтр("ru='ОПЛАТА КРЕДИТА'"));
	
	Возврат ПризнакиСпособаРасчета.Получить(КодПризнакаСпособаРасчета);
	
КонецФункции

// Получить код признака способа расчета.
// 
Функция КодПризнакаПредметаРасчета(ПризнакПредметаРасчета, РевизияИнтерфейса = 0) Экспорт
	
	ПризнакиПредметаРасчета = Новый Соответствие(); 
	
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар")                  , 1);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТовар")       , 2);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Работа")                 , 3);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга")                 , 4);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СтавкаАзартнойИгры")     , 5);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышАзартнойИгры")    , 6);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ЛотерейныйБилет")        , 7);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышЛотереи")         , 8);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПредоставлениеРИД")      , 9);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Платеж")                 , 10);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.АгентскоеВознаграждение"), 11);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Выплата")                , 12);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ИнойПредметРасчета")     , 13);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ИмущественноеПраво")     , 14);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВнереализационныйДоход") , 15);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СтраховыеВзносы")        , 16);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ТорговыйСбор")           , 17);       
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.КурортныйСбор")          , 18);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Залог")                  , 19);
	
	Если РевизияИнтерфейса > 3001 Тогда
		ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Расход")                 , 20);
		ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ОбязательноеПенсионноеСтрахованиеИП") , 21);
		ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ОбязательноеПенсионноеСтрахование")   , 22);
		ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ОбязательноеМедицинскоеСтрахованиеИП"), 23);
		ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ОбязательноеМедицинскоеСтрахование")  , 24);
		ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ОбязательноеСоциальноеСтрахование")   , 25);
		ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежКазино")                        , 26);
		// Оставлены для совместимости.
		ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата")          , 10);
		ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СоставнойПредметРасчета"), 10); 
	Иначе
		// Оставлены для совместимости.
		ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата")          , 10);
		ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СоставнойПредметРасчета"), 12);
	КонецЕсли;
	
	Если РевизияИнтерфейса > 3003 Тогда
		ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыдачаДенежныхСредств"), 27);
		ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТоварПодлМаркировкеСИНеИмеющийКМ")  , 30);
		ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТоварПодлМаркировкеСИИмеющийКМ")    , 31);
		ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.МаркированныйТоварПодлМаркировкеСИНеИмеющийКМ"), 32);       
		ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.МаркированныйТоварПодлМаркировкеСИИмеющийКМ")  , 33);
	КонецЕсли;
	
	Возврат ПризнакиПредметаРасчета.Получить(ПризнакПредметаРасчета);
	
КонецФункции

// Получить признак способа расчета по коду.
// 
Функция ПризнакПредметаРасчетаПоКоду(КодПризнакаПредметаРасчета) Экспорт
	
	ПризнакиПредметаРасчета = Новый Соответствие(); 
	
	ПризнакиПредметаРасчета.Вставить(1,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар"));
	ПризнакиПредметаРасчета.Вставить(2,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТовар"));
	ПризнакиПредметаРасчета.Вставить(3,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Работа"));
	ПризнакиПредметаРасчета.Вставить(4,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга"));
	ПризнакиПредметаРасчета.Вставить(5,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СтавкаАзартнойИгры"));
	ПризнакиПредметаРасчета.Вставить(6,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышАзартнойИгры"));
	ПризнакиПредметаРасчета.Вставить(7,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ЛотерейныйБилет"));
	ПризнакиПредметаРасчета.Вставить(8,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышЛотереи"));
	ПризнакиПредметаРасчета.Вставить(9,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПредоставлениеРИД"));
	ПризнакиПредметаРасчета.Вставить(10, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Платеж"));
	ПризнакиПредметаРасчета.Вставить(11, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.АгентскоеВознаграждение"));
	ПризнакиПредметаРасчета.Вставить(12, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Выплата"));
	ПризнакиПредметаРасчета.Вставить(13, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ИнойПредметРасчета"));
	ПризнакиПредметаРасчета.Вставить(14, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ИмущественноеПраво"));
	ПризнакиПредметаРасчета.Вставить(15, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВнереализационныйДоход"));
	ПризнакиПредметаРасчета.Вставить(16, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СтраховыеВзносы"));
	ПризнакиПредметаРасчета.Вставить(17, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ТорговыйСбор"));       
	ПризнакиПредметаРасчета.Вставить(18, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.КурортныйСбор"));
	ПризнакиПредметаРасчета.Вставить(19, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Залог"));
	ПризнакиПредметаРасчета.Вставить(20, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Расход"));
	ПризнакиПредметаРасчета.Вставить(21, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ОбязательноеПенсионноеСтрахованиеИП"));
	ПризнакиПредметаРасчета.Вставить(22, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ОбязательноеПенсионноеСтрахование"));
	ПризнакиПредметаРасчета.Вставить(23, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ОбязательноеМедицинскоеСтрахованиеИП"));
	ПризнакиПредметаРасчета.Вставить(24, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ОбязательноеМедицинскоеСтрахование"));
	ПризнакиПредметаРасчета.Вставить(25, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ОбязательноеСоциальноеСтрахование"));
	ПризнакиПредметаРасчета.Вставить(26, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежКазино"));
	ПризнакиПредметаРасчета.Вставить(27, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыдачаДенежныхСредств"));
	ПризнакиПредметаРасчета.Вставить(30, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТоварПодлМаркировкеСИНеИмеющийКМ"));
	ПризнакиПредметаРасчета.Вставить(31, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТоварПодлМаркировкеСИИмеющийКМ"));
	ПризнакиПредметаРасчета.Вставить(32, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.МаркированныйТоварПодлМаркировкеСИНеИмеющийКМ"));       
	ПризнакиПредметаРасчета.Вставить(33, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.МаркированныйТоварПодлМаркировкеСИИмеющийКМ"));
	
	Возврат ПризнакиПредметаРасчета.Получить(КодПризнакаПредметаРасчета);
	
КонецФункции

// Получить наименование признака предмета расчета по коду.
//
Функция НаименованиеПризнакаПредметаРасчета(КодПризнакаПредметаРасчета) Экспорт

	ПризнакиПредметаРасчета = Новый Соответствие(); 
	
	ПризнакиПредметаРасчета.Вставить(1,  НСтр("ru='ТОВАР'"));
	ПризнакиПредметаРасчета.Вставить(2,  НСтр("ru='ПОДАКЦИЗНЫЙ ТОВАР'"));
	ПризнакиПредметаРасчета.Вставить(3,  НСтр("ru='РАБОТА'"));
	ПризнакиПредметаРасчета.Вставить(4,  НСтр("ru='УСЛУГА'"));
	ПризнакиПредметаРасчета.Вставить(5,  НСтр("ru='СТАВКА АЗАРТНОЙ ИГРЫ'"));
	ПризнакиПредметаРасчета.Вставить(6,  НСтр("ru='ВЫИГРЫШ АЗАРТНОЙ ИГРЫ'"));;
	ПризнакиПредметаРасчета.Вставить(7,  НСтр("ru='СТАВКА ЛОТЕРЕИ'"));
	ПризнакиПредметаРасчета.Вставить(8,  НСтр("ru='ВЫИГРЫШ ЛОТЕРЕИ'"));
	ПризнакиПредметаРасчета.Вставить(9,  НСтр("ru='ПРЕДОСТАВЛЕНИЕ РИД'"));
	ПризнакиПредметаРасчета.Вставить(10, НСтр("ru='ПЛАТЕЖ'"));
	ПризнакиПредметаРасчета.Вставить(11, НСтр("ru='АГЕНТСКОЕ ВОЗНАГРАЖДЕНИЕ'"));
	ПризнакиПредметаРасчета.Вставить(12, НСтр("ru='ВЫПЛАТА'"));
	ПризнакиПредметаРасчета.Вставить(13, НСтр("ru='ИНОЙ ПРЕДМЕТ РАСЧЕТА'"));
	ПризнакиПредметаРасчета.Вставить(14, НСтр("ru='ИМУЩЕСТВЕННОЕ ПРАВО'"));
	ПризнакиПредметаРасчета.Вставить(15, НСтр("ru='ВНЕРЕАЛИЗАЦИОННЫЙ ДОХОД'"));
	ПризнакиПредметаРасчета.Вставить(16, НСтр("ru='ИНЫЕ ПЛАТЕЖИ И ВЗНОСЫ'"));
	ПризнакиПредметаРасчета.Вставить(17, НСтр("ru='ТОРГОВЫЙ СБОР'"));       
	ПризнакиПредметаРасчета.Вставить(18, НСтр("ru='КУРОРТНЫЙ СБОР'"));
	ПризнакиПредметаРасчета.Вставить(19, НСтр("ru='ЗАЛОГ'"));
	ПризнакиПредметаРасчета.Вставить(20, НСтр("ru='РАСХОД'"));
	ПризнакиПредметаРасчета.Вставить(21, НСтр("ru='ВЗНОСЫ НА ОПС ИП'"));
	ПризнакиПредметаРасчета.Вставить(22, НСтр("ru='ВЗНОСЫ НА ОПС'"));
	ПризнакиПредметаРасчета.Вставить(23, НСтр("ru='ВЗНОСЫ НА ОМС ИП'"));
	ПризнакиПредметаРасчета.Вставить(24, НСтр("ru='ВЗНОСЫ НА ОМС'"));
	ПризнакиПредметаРасчета.Вставить(25, НСтр("ru='ВЗНОСЫ НА ОСС'"));
	ПризнакиПредметаРасчета.Вставить(26, НСтр("ru='ПЛАТЕЖ КАЗИНО'"));
	ПризнакиПредметаРасчета.Вставить(27, НСтр("ru='ВЫДАЧА ДЕНЕЖНЫХ СРЕДСТВ'"));
	ПризнакиПредметаРасчета.Вставить(30, НСтр("ru='АТНМ'"));
	ПризнакиПредметаРасчета.Вставить(31, НСтр("ru='АТМ'"));
	ПризнакиПредметаРасчета.Вставить(32, НСтр("ru='ТНМ'"));       
	ПризнакиПредметаРасчета.Вставить(33, НСтр("ru='ТМ'"));
	
	Возврат ПризнакиПредметаРасчета.Получить(КодПризнакаПредметаРасчета);
	
КонецФункции

// Получить признак агента по коду.
// 
Функция КодПризнакаАгента(КодПризнакаАгента) Экспорт
	
	ПризнакиАгента = Новый Соответствие(); 
	
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйАгент")   , 0);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйСубагент"), 1);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйАгент")             , 2);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйСубагент")          , 3);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Поверенный")                 , 4);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Комиссионер")                , 5);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Агент")                      , 6);
	
	Возврат ПризнакиАгента.Получить(КодПризнакаАгента);
	
КонецФункции

// Получить код типа признака агента.
// 
Функция ПризнакАгентаПоКоду(ПризнакАгента) Экспорт
	
	ПризнакиАгента = Новый Соответствие(); 
	
	ПризнакиАгента.Вставить(0, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйАгент"));
	ПризнакиАгента.Вставить(1, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйСубагент"));
	ПризнакиАгента.Вставить(2, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйАгент"));
	ПризнакиАгента.Вставить(3, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйСубагент"));
	ПризнакиАгента.Вставить(4, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Поверенный"));
	ПризнакиАгента.Вставить(5, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Комиссионер"));
	ПризнакиАгента.Вставить(6, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Агент"));
	
	Возврат ПризнакиАгента.Получить(ПризнакАгента);
	
КонецФункции

// Получить код причины изменения сведений о ККТ.
// 
Функция КодПричиныИзмененияСведенийККТ(ПричинаИзмененияСведенийККТ) Экспорт
	
	ПричиныИзмененияСведенийККТ = Новый Соответствие(); 
	
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ЗаменаФН")                         , 0);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ЗаменаОФД")                        , 1);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеНаименованияПользователя"), 2);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеАдреса")                  , 3);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ПереводВРежимПередачиДанных")      , 4);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ПереводВАвтономныйРежим")          , 5);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеВерсии")                  , 6);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеСистемНалогообложения")   , 7);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеНомераУстройства")        , 8);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ПереводВНеавтоматическийРежим")    , 9);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ПереводВАвтоматическийРежим")      , 10);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеБСО")                     , 11);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеБСО")                    , 12);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеРежимаРасчетовВИнтернет") , 13);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеРежимаРасчетовВИнтернет"), 14);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеРежимаАгента")            , 15);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеРежимаАгента")           , 16);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеРежимаАзартныхИгр")       , 17);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеРежимаАзартныхИгр")      , 18);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеРежимаЛотереи")           , 19);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеРежимаЛотереи")          , 20);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеВерсииФФД")               , 21);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.Иное")                             , 31);
	
	Возврат ПричиныИзмененияСведенийККТ.Получить(ПричинаИзмененияСведенийККТ);
	
КонецФункции

// Получить код планируемого статус маркируемого товара
// 
// Параметры:
//  ПланируемыйСтатусМаркируемогоТовара - ПеречислениеСсылка.ПланируемыйСтатусМаркируемогоТовара - Планируемый статус маркируемого товара.  
// 
// Возвращаемое значение:
//  Число - Код планируемого статус маркируемого товара по ОФД
//
Функция КодПланируемыйСтатусМаркируемогоТовара(ПланируемыйСтатусМаркируемогоТовара) Экспорт
	
	Соответствие = Новый Соответствие(); 
	
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварРеализован")      , 1);
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.МерныйТоварВСтадииРеализации"), 2);
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварВозвращен")       , 3);
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.ЧастьТовараВозвращена")       , 4);
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.СтатусТовараНеИзменился")     , 255);
	
	Возврат Соответствие.Получить(ПланируемыйСтатусМаркируемогоТовара);
	
КонецФункции

// Получить код ответ ОИСМ о статусе товара
// 
// Параметры:
//  ОтветОИСМОСтатусеТовара - ПеречислениеСсылка.ОтветОИСМОСтатусеТовара - Ответ от ИСМО.  
// 
// Возвращаемое значение:
//  Число - Ответ ОИСМ о статусе товара по ОФД
//
Функция КодОтветаОИСМОСтатусеТовара(ОтветОИСМОСтатусеТовара) Экспорт
	
	Соответствие = Новый Соответствие(); 
	
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.ОтветОИСМОСтатусеТовара.ПланируемыйСтатусТовараКорректен")  , 1);
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.ОтветОИСМОСтатусеТовара.ПланируемыйСтатусТовараНекорректен"), 2);
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.ОтветОИСМОСтатусеТовара.ОборотТовараПриостановлен")         , 3);
	
	Возврат Соответствие.Получить(ОтветОИСМОСтатусеТовара);
	
КонецФункции

// Получить ответ ОИСМ о статусе товара по коду.
// 
// Параметры:
//  ОтветОИСМОСтатусеТовара - Число - Ответ от ИСМО.  
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ОтветОИСМОСтатусеТовара - Ответ ОИСМ.
//
Функция ОтветОИСМОСтатусеТовараПоКоду(ОтветОИСМОСтатусеТовара) Экспорт
	
	Соответствие = Новый Соответствие(); 
	
	Соответствие.Вставить(1, ПредопределенноеЗначение("Перечисление.ОтветОИСМОСтатусеТовара.ПланируемыйСтатусТовараКорректен"));
	Соответствие.Вставить(2, ПредопределенноеЗначение("Перечисление.ОтветОИСМОСтатусеТовара.ПланируемыйСтатусТовараНекорректен"));
	Соответствие.Вставить(3, ПредопределенноеЗначение("Перечисление.ОтветОИСМОСтатусеТовара.ОборотТовараПриостановлен"));
	
	Возврат Соответствие.Получить(Число(ОтветОИСМОСтатусеТовара));
	
КонецФункции

// Получить код типа маркировки ККТ по коду.
// 
Функция КодТипаМаркировкиККТ(ТипМаркировкиККТ) Экспорт
	
	ТипыМаркировкиККТ = Новый Соответствие(); 
	
	ТипыМаркировкиККТ.Вставить(ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ИзделияИзМеха")         , "02");
	ТипыМаркировкиККТ.Вставить(ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ЛекарственныеПрепараты"), "03");
	ТипыМаркировкиККТ.Вставить(ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ТабачнаяПродукция")     , "05");
	ТипыМаркировкиККТ.Вставить(ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ОбувныеТовары")         , "1520");
	
	Возврат ТипыМаркировкиККТ.Получить(ТипМаркировкиККТ);
	
КонецФункции

// Получить код типа маркировки ККТ.
// 
Функция ТипМаркировкиККТПоКоду(КодТипМаркировкиККТ) Экспорт
	
	ТипыМаркировкиККТ = Новый Соответствие(); 
	
	ТипыМаркировкиККТ.Вставить("02"  , ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ИзделияИзМеха"));
	ТипыМаркировкиККТ.Вставить("03"  , ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ЛекарственныеПрепараты"));
	ТипыМаркировкиККТ.Вставить("05"  , ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ТабачнаяПродукция"));
	ТипыМаркировкиККТ.Вставить("1520", ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ОбувныеТовары"));
	
	Возврат ТипыМаркировкиККТ.Получить(КодТипМаркировкиККТ);
	
КонецФункции

// Получить код вида документа удостоверяющего личность ККТ.
// 
Функция КодВидДокументаУдостоверяющегоЛичность(ВидДокументаУдостоверяющегоЛичность) Экспорт
	
	ВидДокумента = Новый Соответствие();
	
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ПаспортГражданинаРФ"), 21);  
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ПаспортГражданинаРФЗаПределамиРФ"), 22);  
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ВременноеУдостоверениеЛичностиГражданинаРФ"), 26);    
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.СвидетельствоОРожденииГражданинаРФ"), 27);        
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ИныеДокументыУдостоверяющиеЛичностьГражданинаРФ"), 28);  
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ПаспортИностранногоГражданина"), 31);   
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ИныеДокументыУдостоверяющимиЛичностьИностранногоГражданина"), 32);    
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ДокументВыданныйИностраннымГосударствомУдостоверяющегоЛичностьБезГражданства"), 33);     
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ВидНаЖительствоДляЛицБезГражданства"), 34);         
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.РазрешениеНаВременноеПроживаниеДляЛицБезГражданства"), 35);    
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.СвидетельствоОРасХодатайстваОПризнанииЛицаБезГражданстваБеженцемНаТерриторииРФ"), 36);   
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.УдостоверениеБеженца"), 37);               
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ИныеДокументыУдостоверяющимиЛичностьЛицБезГражданстваРФ"), 38);     
	ВидДокумента.Вставить(ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ДокументУдостовЛичностьЛицаНаПериодРассмотренияЗаявленияОПризнанииГражданиномРФ"), 40); 
	
	Возврат ВидДокумента.Получить(ВидДокументаУдостоверяющегоЛичность);
	
КонецФункции

// Получить вида документа удостоверяющего личность ККТ по коду.
// 
Функция ВидДокументаУдостоверяющегоЛичностьПоКоду(КодВидаДокументаУдостоверяющегоЛичность) Экспорт
	
	ВидДокумента = Новый Соответствие();
	
	ВидДокумента.Вставить(21, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ПаспортГражданинаРФ"));  
	ВидДокумента.Вставить(22, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ПаспортГражданинаРФЗаПределамиРФ"));  
	ВидДокумента.Вставить(26, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ВременноеУдостоверениеЛичностиГражданинаРФ"));    
	ВидДокумента.Вставить(27, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.СвидетельствоОРожденииГражданинаРФ"));        
	ВидДокумента.Вставить(28, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ИныеДокументыУдостоверяющиеЛичностьГражданинаРФ"));  
	ВидДокумента.Вставить(31, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ПаспортИностранногоГражданина"));   
	ВидДокумента.Вставить(32, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ИныеДокументыУдостоверяющимиЛичностьИностранногоГражданина"));    
	ВидДокумента.Вставить(33, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ДокументВыданныйИностраннымГосударствомУдостоверяющегоЛичностьБезГражданства"));     
	ВидДокумента.Вставить(34, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ВидНаЖительствоДляЛицБезГражданства"));         
	ВидДокумента.Вставить(35, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.РазрешениеНаВременноеПроживаниеДляЛицБезГражданства"));    
	ВидДокумента.Вставить(36, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.СвидетельствоОРасХодатайстваОПризнанииЛицаБезГражданстваБеженцемНаТерриторииРФ"));   
	ВидДокумента.Вставить(37, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.УдостоверениеБеженца"));               
	ВидДокумента.Вставить(38, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ИныеДокументыУдостоверяющимиЛичностьЛицБезГражданстваРФ"));     
	ВидДокумента.Вставить(40, ПредопределенноеЗначение("Перечисление.ВидДокументаУдостоверяющегоЛичностьККТ.ДокументУдостовЛичностьЛицаНаПериодРассмотренияЗаявленияОПризнанииГражданиномРФ")); 
	
	Возврат ВидДокумента.Получить(КодВидаДокументаУдостоверяющегоЛичность);
	
КонецФункции

Функция КодМерыКоличестваПредметаРасчетаККТ(МераКоличестваПредметаРасчетаККТ) Экспорт
	
	МерыКоличества = Новый Соответствие();
	
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Штука"), 0);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Грамм"), 10);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Килограмм"), 11);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Тонна"), 12);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Сантиметр"), 20);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Дециметр"), 21);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Метр"), 22);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйСантиметр"), 30);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйДециметр"), 31);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйМетр"), 32);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Миллилитр"), 40);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Литр"), 41);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КубическийМетр"), 42);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КиловаттЧас"), 50);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Гигакалория"), 51);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.СуткиДень"), 70);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Час"), 71);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Минута"), 72);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Секунда"), 73);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Килобайт"), 80);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Мегабайт"), 81);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Гигабайт"), 82);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Терабайт"), 83);
	МерыКоличества.Вставить(ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.ИныеЕдиницыИзмерения"), 255);
	
	Возврат МерыКоличества.Получить(МераКоличестваПредметаРасчетаККТ);
	
КонецФункции

// Получить меру количества предмета расчета по коду.
// 
Функция МераКоличестваПредметаРасчетаККТПоКоду(КодМерыКоличестваПредметаРасчетаККТ) Экспорт
	
	МерыКоличества = Новый Соответствие();
	
	МерыКоличества.Вставить(0, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Штука"));
	МерыКоличества.Вставить(10, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Грамм"));
	МерыКоличества.Вставить(11, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Килограмм"));
	МерыКоличества.Вставить(12, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Тонна"));
	МерыКоличества.Вставить(20, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Сантиметр"));
	МерыКоличества.Вставить(21, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Дециметр"));
	МерыКоличества.Вставить(22, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Метр"));
	МерыКоличества.Вставить(30, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйСантиметр"));
	МерыКоличества.Вставить(31, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйДециметр"));
	МерыКоличества.Вставить(32, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйМетр"));
	МерыКоличества.Вставить(40, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Миллилитр"));
	МерыКоличества.Вставить(41, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Литр"));
	МерыКоличества.Вставить(42, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КубическийМетр"));
	МерыКоличества.Вставить(50, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КиловаттЧас"));
	МерыКоличества.Вставить(51, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Гигакалория"));
	МерыКоличества.Вставить(70, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.СуткиДень"));
	МерыКоличества.Вставить(71, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Час"));
	МерыКоличества.Вставить(72, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Минута"));
	МерыКоличества.Вставить(73, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Секунда"));
	МерыКоличества.Вставить(80, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Килобайт"));
	МерыКоличества.Вставить(81, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Мегабайт"));
	МерыКоличества.Вставить(82, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Гигабайт"));
	МерыКоличества.Вставить(83, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Терабайт"));
	МерыКоличества.Вставить(255, ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.ИныеЕдиницыИзмерения"));
	
	Возврат МерыКоличества.Получить(КодМерыКоличестваПредметаРасчетаККТ);
	
КонецФункции

// Получить меру количества предмета расчета по коду единицы измерения.
// 
Функция МераКоличестваПредметаРасчетаПоКодуЕдиницыИзмерения(КодЕдиницыИзмерения) Экспорт
	
	МерыКоличества = Новый Соответствие();
	
	МерыКоличества.Вставить("796", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Штука"));
	
	МерыКоличества.Вставить("163", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Грамм"));
	МерыКоличества.Вставить("166", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Килограмм"));
	МерыКоличества.Вставить("168", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Тонна"));
	
	МерыКоличества.Вставить("004", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Сантиметр"));
	МерыКоличества.Вставить("005", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Дециметр"));
	МерыКоличества.Вставить("006", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Метр"));
	
	МерыКоличества.Вставить("051", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйСантиметр"));
	МерыКоличества.Вставить("053", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйДециметр"));
	МерыКоличества.Вставить("055", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйМетр"));
	
	МерыКоличества.Вставить("111", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Миллилитр"));
	МерыКоличества.Вставить("112", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Литр"));
	МерыКоличества.Вставить("113", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КубическийМетр"));
	
	МерыКоличества.Вставить("245", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КиловаттЧас"));
	МерыКоличества.Вставить("233", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Гигакалория"));
	
	МерыКоличества.Вставить("359", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.СуткиДень"));
	МерыКоличества.Вставить("356", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Час"));
	МерыКоличества.Вставить("355", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Минута"));
	МерыКоличества.Вставить("354", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Секунда"));
	
	МерыКоличества.Вставить("256", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Килобайт"));
	МерыКоличества.Вставить("257", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Мегабайт"));
	МерыКоличества.Вставить("2553", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Гигабайт"));
	МерыКоличества.Вставить("2554", ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Терабайт"));
	
	МерыКоличества = МерыКоличества.Получить(Строка(КодЕдиницыИзмерения));
	Если МерыКоличества = Неопределено  Тогда
		МерыКоличества = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.ИныеЕдиницыИзмерения");
	КонецЕсли;
	
	Возврат МерыКоличества;
	
КонецФункции

// Получить cтатус результата запроса КМ по коду.
//
Функция СтатусРезультатаЗапросаКМПоКоду(КодСтатуса) Экспорт
	
	РезультатЗапроса = Новый Соответствие(); 
	
	РезультатЗапроса.Вставить(0, ПредопределенноеЗначение("Перечисление.СтатусРезультатаЗапросаКМ.Получен"));
	РезультатЗапроса.Вставить(1, ПредопределенноеЗначение("Перечисление.СтатусРезультатаЗапросаКМ.Ожидается"));
	РезультатЗапроса.Вставить(2, ПредопределенноеЗначение("Перечисление.СтатусРезультатаЗапросаКМ.НеМожетБытьПолучен"));
	
	Возврат РезультатЗапроса.Получить(Число(КодСтатуса));
	
КонецФункции

#КонецОбласти

#Область Конструкторы

// Заполняет структуру общих параметров фискального накопителя.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыФискальногоНакопителяОбщие() Экспорт
	
	Параметры = Новый Структура();
	// ФФД 1.0
	Параметры.Вставить("РегистрационныйНомерККТ"); // Регистрационный номер ККТ
	Параметры.Вставить("ЗаводскойНомерККТ");  // Заводской номер ККТ 
	Параметры.Вставить("ЗаводскойНомерФН");   // Заводской номер ФН
	Параметры.Вставить("ВерсияФФДФН");  // Версия ФФД ФН (одно из следующих значений "1.0","1.1")
	Параметры.Вставить("ВерсияФФДККТ"); // Версия ФФД ККТ (одно из следующих значений "1.0","1.0.5","1.1")
	
	Параметры.Вставить("ОрганизацияНазвание"); // Название организации
	Параметры.Вставить("ОрганизацияИНН");      // ИНН организация
	
	Параметры.Вставить("АдресПроведенияРасчетов"); // Адрес проведения расчетов
	Параметры.Вставить("МестоПроведенияРасчетов"); // Место проведения расчетов
	
	Параметры.Вставить("КодыСистемыНалогообложения"); // Коды системы налогообложения
	
	Параметры.Вставить("ПризнакАвтономногоРежима"  , Ложь); // Признак автономного режима
	Параметры.Вставить("ПризнакШифрованиеДанных"   , Ложь); // Признак шифрование данных
	Параметры.Вставить("ПризнакРасчетовЗаУслуги"   , Ложь); // Признак расчетов за услуги
	Параметры.Вставить("ПродажаПодакцизногоТовара" , Ложь); // Продажа подакцизного товара
	
	Параметры.Вставить("ПроведенияАзартныхИгр"     , Ложь); // Признак проведения азартных игр
	Параметры.Вставить("ПроведенияЛотерей"         , Ложь); // Признак проведения лотереи
	Параметры.Вставить("ПризнакиАгента");                   // Коды признаков агента
	Параметры.Вставить("ПризнакФормированияБСО"    , Ложь); // Признак формирования АС БСО
	
	Параметры.Вставить("ПризнакРасчетовТолькоВИнтернет", Ложь);  // Признак ККТ для расчетов только в Интернет
	Параметры.Вставить("УстановкаПринтераВАвтомате"    , Ложь);  // Признак установки принтера в автомате
	Параметры.Вставить("ПризнакАвтоматическогоРежима"  , Ложь);  // Признак автоматического режима
	Параметры.Вставить("НомерАвтоматаДляАвтоматическогоРежима"); // Номер автомата для автоматического режима
	Параметры.Вставить("ОрганизацияОФДИНН");      // Название организации ОФД
	Параметры.Вставить("ОрганизацияОФДНазвание"); // ИНН организации ОФД
	
	Параметры.Вставить("ОтправительEmail"); // Адрес электронной почты отправителя чека.
	Параметры.Вставить("АдресСайтаФНС");    // Адрес сайта уполномоченного органа (ФНС). 
	
	// ФФД 1.2
	Параметры.Вставить("ПроведенияРасчетаВИнтернет"  , Ложь); // Признак ККТ для расчетов в Интернет
	Параметры.Вставить("ПродажаМаркированныхТоваров" , Ложь); // Признак ККТ торговли товарами, подлежащими обязательной маркировке средствами идентификации
	Параметры.Вставить("ПризнакПримененияЛомбардами" , Ложь); // Признак применения ККТ при осуществлении ломбардами кредитования граждан
	Параметры.Вставить("ПризнакДеятельностиПоСтрахованию" , Ложь); // Признак применения при осуществлении деятельности по страхованию
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров регистрации ККТ.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыРегистрацииККТ() Экспорт
	
	Параметры = ПараметрыФискальногоНакопителяОбщие();
	Параметры.Вставить("ПризнакФискализации");        // Признак регистрации фискального накопителя.
	Параметры.Вставить("НомерДокументаФискализации"); // Номер документа регистрация фискального накопителя.
	Параметры.Вставить("ДатаВремяФискализации");      // Дата и время операции регистрации фискального накопителя.
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров Фискализации ФН.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыОперацииФискализацииНакопителя() Экспорт
	
	Параметры = ПараметрыФискальногоНакопителяОбщие();
	
	Параметры.Вставить("КодПричиныПеререгистрации"); 
	Параметры.Вставить("КодыПричинИзмененияСведений"); 
	Параметры.Вставить("ТипОперации", 1);
	
	Параметры.Вставить("Кассир"     , НСтр("ru='Администратор'")); // Строка,Обязательно   - ФИО лица и должность, осуществившего расчет с покупателем (клиентом), оформившего кассовый чек.
	Параметры.Вставить("КассирИНН"  , Неопределено); // Строка,Необязательно - Идентификационный номер налогоплательщика кассира, при наличии.
	
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров выполнения операции.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыВыполненияОперации() Экспорт;
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("Кассир"     , НСтр("ru='Администратор'")); // ФИО лица и должность, осуществившего операцию.
	ПараметрыОперации.Вставить("КассирИНН"  , Неопределено); // Идентификационный номер налогоплательщика кассира, при наличии.
	Возврат ПараметрыОперации; 
	
КонецФункции

// Заполняет структуру данных агента.
//
// Возвращаемое значение:
// 	Структура - Описание:
// * ОператорПоПриемуПлатежей - Структура -:
// ** Телефон - Неопределено -
// * ОператорПеревода - Структура - структура данных с полями:
// ** Телефон - Строка - 
// ** Наименование - Строка -
// ** Адрес - Строка - 
// ** ИНН - Строка - 
// * ПлатежныйАгент - Структура - структура данных с полями:
// ** Операция - Строка - 
// ** Телефон - Строка - 
//
Функция ПараметрыДанныеАгента() Экспорт
	
	// ФФД - Значения реквизита «данные агента» (тег 1223) указаны в таблице 22.
	Параметры = Новый Структура();
	
	ПлатежныйАгент = Новый Структура();
	ПлатежныйАгент.Вставить("Операция", Неопределено);  // Строка - Операция платежного агента.
	ПлатежныйАгент.Вставить("Телефон" , Неопределено);  // Строка - Телефон платежного агента. В формате +{Ц}.
	Параметры.Вставить("ПлатежныйАгент", ПлатежныйАгент);
	
	ОператорПеревода = Новый Структура();
	ОператорПеревода.Вставить("Телефон"     , Неопределено); // Строка - Телефон оператора перевода. В формате +{Ц}.
	ОператорПеревода.Вставить("Наименование", Неопределено); // Строка - Наименование оператора перевода.
	ОператорПеревода.Вставить("Адрес"       , Неопределено); // Строка - Адрес оператора перевода.
	ОператорПеревода.Вставить("ИНН"         , Неопределено); // Строка - ИНН оператора перевода.
	Параметры.Вставить("ОператорПеревода", ОператорПеревода);
	
	ОператорПоПриемуПлатежей = Новый Структура();
	ОператорПоПриемуПлатежей.Вставить("Телефон", Неопределено); // Строка - Телефон оператора по приему платежей. В формате +{Ц}.
	Параметры.Вставить("ОператорПоПриемуПлатежей", ОператорПоПриемуПлатежей);
	
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру данных поставщика.
//
// Возвращаемое значение:
// 	Структура - Описание:
// * ИНН - Строка 
// * Наименование - Строка 
// * Телефон - Строка
Функция ПараметрыДанныеПоставщика() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Телефон");      // Строка - Телефон поставщика. В формате +{Ц}.
	Параметры.Вставить("Наименование"); // Строка - Наименование поставщика.
	Параметры.Вставить("ИНН");          // Строка - ИНН поставщика.
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру данных кода товарной номенклатуры.
//
// Возвращаемое значение:
// 	Структура - Описание:
// * ЗначениеКодаТовара - Строка 
// * ТипКодаТовара - Строка
// * РеквизитКодаТовара - Строка
// * СерийныйНомер - Строка
// * ГлобальныйИдентификаторТорговойЕдиницы - Строка 
// * КонтрольныйИдентификационныйЗнак - СТрока
// * ТипМаркировки - ПеречислениеСсылка.ТипыМаркировкиККТ - 
Функция ПараметрыДанныеКодаТоварнойНоменклатуры() Экспорт
	
	Параметры = Новый Структура();
	
	// Формирование тэга 1162, для ФФД 1.05, 1.1
	Параметры.Вставить("ТипМаркировки"); // Перечисление.ТипыМаркировкиККТ, Необязательно - Тип маркировки. 
	// Ранее в рамках пилотных проектов (в 2017-2019) по маркировке и регистрации выбытия контрольных марок(КМ) 
	// через ККТ для каждого вида маркировки ФНС предоставляла отдельный алгоритм для кодирования тега 1162 
	// содержащий информацию о КМ. Именно для этого было создано данное перечисление  - ТипыМакрировкиККТ.
	// Но в соответствии с приказом ФНС от 29.08.2019 № ММВ-7-20/434@ "О внесении изменений в приложение №2 
	// к приказу Федеральной налоговой службы от 21.03.2017 № ММВ-7-20/229@“ зарегистрированному 25.12.2019 №56978 
	// и вступившему в силу с 01.03.2020г. алгоритм кодирования тега 1162 стал единым для всех типов маркировки.
	// Таким образом, данное перечисление и атрибут устарели. Оставлено для совместимости.
	Параметры.Вставить("КонтрольныйИдентификационныйЗнак");       // Строка,Необязательно - Контрольный идентификационный знак (КиЗ).
	Параметры.Вставить("ГлобальныйИдентификаторТорговойЕдиницы"); // Строка,Необязательно - Глобальный идентификатор торговой единицы (GTIN).
	Параметры.Вставить("СерийныйНомер"); // Строка,Необязательно - Серийный номер.
	Параметры.Вставить("РеквизитКодаТовара"); // Строка,Необязательно -Значение реквизита кода товара (Значение тэга 1162). Кодируется текстом в кодировке Base64.                
	
	// Формирование тэга 1163, для ФФД 1.2
	Параметры.Вставить("ТипКодаТовара"); // Строка,Необязательно - Таблица 118
	Параметры.Вставить("ЗначениеКодаТовара"); // Строка,Необязательно - Значение кода товара в Base64 (Таблица 118) 
	
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру данных дробное количество для товарной номенклатуры.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыДробноеКоличество() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Числитель"   , Неопределено); // Число,Обязательно - Числитель дробного количества - количество  реализуемых  товаров из упаковке.
	Параметры.Вставить("Знаменатель" , Неопределено); // Число,Обязательно - Знаменатель дробного количества - общее количество товаров в потребительской упаковке. 
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру дополнительного реквизита пользователя.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыДополнительногоРеквизитаПользователя() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Наименование"); // Строка,Необязательно - Наименование дополнительного реквизита пользователя (Тег 1085).
	Параметры.Вставить("Значение");     // Строка,Необязательно - Значение дополнительного реквизита пользователя (Тег 1086).
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру операционного реквизит чека.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыОперационныйРеквизит() Экспорт 
	
	// Вложенные тэги 1270
	Параметры = Новый Структура();
	Параметры.Вставить("ДатаВремяОперации");  // Дата,Необязательно - Тэг 1273 - Дата, время операции	
	Параметры.Вставить("ИдентификаторОперации"); // Целое,Необязательно - Тэг 1271 - Идентификатор операции. 
	Параметры.Вставить("ДанныеОперации"); // Строка[64],Необязательно - Тэг 1272 - Данные операции.
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру отраслевого реквизит чека.
// 1260 - отраслевой реквизит предмета расчета.
// 1261 - отраслевой реквизит чека.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыОтраслевойРеквизит() Экспорт  
	
	// Вложенные тэги 1260 & 1261
	Параметры = Новый Структура();
	// Значения реквизита "идентификатор ФОИВ" (тег 1262) приведены в таблице 149.
	Параметры.Вставить("ИдентификаторФОИВ"); // Строка[3],Необязательно - Тэг 1262 - Идентификатор ФОИВ.
	// Дата нормативного акта федерального органа исполнительной власти, регламентирующего порядок 
	// заполнения реквизита "значение отраслевого реквизита" (тег 1265)
	Параметры.Вставить("ДатаДокументаОснования");  // Дата,Необязательно - Тэг 1263 - Дата документа основания	
	// Номер нормативного акта федерального органа исполнительной власти, регламентирующего порядок 
	// заполнения реквизита "значение отраслевого реквизита" (тег 1265)
	Параметры.Вставить("НомерДокументаОснования"); // Строка[64],Необязательно - Тэг 1264 - Номер документа основания.
	// Cостав значений, определенных нормативного актом федерального органа исполнительной власти 
	Параметры.Вставить("ЗначениеРеквизита"); // Строка[256],Необязательно - Тэг 1265 - Номер документа основания.
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру cведений о покупателей.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыСведенияОПокупателе() Экспорт
	
	// Вложенные тэги 1256 - Сведения о покупателе (клиенте).
	Параметры = Новый Структура(); 
	// Реквизиты начиная с ФФД 1.1 (Введены приказом от 09.04.2018 N ММВ-7-20/207@)
	// Наименование организации или фамилия, имя, отчество (при наличии)
	Параметры.Вставить("Покупатель");    // Строка,Необязательно - Тэг 1227 - Получатель (покупатель)	
	Параметры.Вставить("ПокупательИНН"); // Строка,Необязательно - Тэг 1228 - ИНН покупателя (клиента)	 
	Параметры.Вставить("ПокупательАдрес"); // Строка,Необязательно - Тэг 1254 - Адрес покупателя (клиента)	 
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру персональные данные покупателя.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыПерсональныеДанныеПокупателя() Экспорт
	
	Параметры = Новый Структура(); 
	Параметры.Вставить("ИНН");             // Строка,Необязательно       - ИНН покупателя (клиента)	 
	Параметры.Вставить("ДатаРождения");    // Дата,Необязательно         - Дата рождения покупателя (клиента)	
	Параметры.Вставить("Гражданство");     // Строка,Необязательно       - Гражданство покупателя (клиента)	 
	Параметры.Вставить("ВидДокумента");    // Перечисление,Необязательно - Код вида документа, удостоверяющего личность	
	Параметры.Вставить("ДанныеДокумента"); // Строка,Необязательно       - Данные документа, удостоверяющего личность	 
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров операции фискализации чека.
//
// Возвращаемое значение:
// 	Структура - Описание:
// * ДанныеКоррекции - Структура -:
// ** НомерПредписания - Число
// ** ДатаКоррекции - Дата
// ** ОписаниеКоррекции - Строка
// ** ТипКоррекции - Число -
// * НеприменениеККТ - Булево -
// * КорректируемыйДокумент - Произвольный
// * ЕстьПерсональныеДанные - Булево -
// * ИндивидуальныйРежимПодготовкиДанныхКПередачеВОФД - Булево -
// * ДопустимоеРасхождениеФорматноЛогическогоКонтроля - Число -
// * СпособФорматноЛогическогоКонтроля - Неопределено -
// * СформироватьЧекКоррекции - Булево -
// * ДополнительныйРеквизитПользователя - Структура -:
// ** Значение - Произвольный
// ** Наименование - Строка
// * ДополнительныйРеквизит - Неопределено -
// * НефискальныеДокументы - Массив -
// * КассаККМ - Произвольный - 
// * ШаблонЧека -Произвольный
// * ТаблицаОплат - Массив -
// * ПозицииЧека - Массив -
// * КопийЧека - Число -
// * ТекстПодвала - Строка -
// * ТекстШапки - Строка -
// * ДатаВремя - Дата -
// * НомерСмены - Число
// * НомерЧека - Число
// * НомерКассы - Число
// * НаименованиеМагазина - Строка 
// * АдресМагазина - Строка
// * ОрганизацияКПП - Число
// * ОрганизацияИНН - Число
// * ОрганизацияНазвание - Строка
// * СерийныйНомер - Число
// * ПолучательИНН - Число
// * Получатель - Строка
// * ДанныеПоставщика - Структура -:
// ** ИНН - Строка
// ** Наименование - Строка
// ** Телефон - Строка
// * ДанныеАгента - Структура -:
// ** ОператорПоПриемуПлатежей - Структура -:
// *** Телефон - Неопределено -
// ** ОператорПеревода - Структура -:
// *** Телефон - Строка -
// *** Наименование - Строка -
// *** Адрес - Строка -
// *** ИНН - Строка -
// ** ПлатежныйАгент - Структура -:
// *** Операция - Строка -
// *** Телефон - Строка -
// * ПризнакАгента - Неопределено -
// * ПокупательНомер - Строка
// * ПокупательEmail - Строка
// * ОтправительEmail - Строка
// * МестоРасчетов - Строка
// * АдресРасчетов - Строка
// * СистемаНалогообложения - ПеречислениеСсылка.ТипыСистемНалогообложенияККТ -
// * Отправляет1СEmail - Булево -
// * Отправляет1СSMS - Булево -
// * ТипРасчета - ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами -
// * Электронно - Булево -
// * ТорговыйОбъект - Неопределено -
// * Организация - Неопределено -
// * ИдентификаторФискальнойЗаписи - Неопределено -
// * ДокументОснование - Неопределено -
// * КассирИНН - Неопределено -
// * Кассир - Строка -
Функция ПараметрыОперацииФискализацииЧека() Экспорт;
	
	ПараметрыЧека = ПараметрыВыполненияОперации();
	// Общие реквизиты для всех типов оборудования.
	ПараметрыЧека.Вставить("ДокументОснование" , Неопределено); // Ссылка,Обязательно. Документ по которому пробивается чек.
	ПараметрыЧека.Вставить("ИдентификаторФискальнойЗаписи", Неопределено); // Строка,Необязательно. Идентификатор фискальной записи. 
	ПараметрыЧека.Вставить("Организация"       , Неопределено); // Ссылка,Обязательно. Организация по которому пробивается чек.
	ПараметрыЧека.Вставить("ТорговыйОбъект"    , Неопределено); // Ссылка,Необязательно. Объект по которому пробивается чек.
	ПараметрыЧека.Вставить("Электронно"        , Ложь); // Булево,Обязательно - Чек будет предоставлен в электронной форме, без печати. Ложь-Значение по умолчанию.
	ПараметрыЧека.Вставить("ТипРасчета"        , ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств")); // Обязательно.
	ПараметрыЧека.Вставить("Отправляет1СSMS"   , Ложь); // Булево,Обязательно - SMS отправляет средствами 1C.   Ложь-Значение по умолчанию.
	ПараметрыЧека.Вставить("Отправляет1СEmail" , Ложь); // Булево,Обязательно - Email отправляет средствами 1C. Ложь-Значение по умолчанию.
	
	// Системы налогообложения - "Перечисление.ТипыСистемНалогообложенияККТ"
	ПараметрыЧека.Вставить("СистемаНалогообложения", ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН")); // Обязательно. Заполняется значением по умолчанию.  
	ПараметрыЧека.Вставить("АдресРасчетов"     ); // Строка,Необязательно - Адрес расчетов (Тег 1009).
	ПараметрыЧека.Вставить("МестоРасчетов"     ); // Строка,Необязательно - Место расчетов (Тег 1187).
	ПараметрыЧека.Вставить("НомерАвтомата"     ); // Строка,Необязательно - Номер автомата (Тег 1036).
	ПараметрыЧека.Вставить("ОтправительEmail"  ); // Строка,Необязательно - Адрес электронной почты отправителя чека (Тег 1117).
	ПараметрыЧека.Вставить("ПокупательEmail"   ); // Строка,Необязательно - Адрес электронной почты покупателя.
	ПараметрыЧека.Вставить("ПокупательНомер"   ); // Строка,Необязательно - Телефонный номер покупателя. В формате +{Ц}.
	
	// Признак агента - "Перечисление.ПризнакиАгента", (ФФД, Тег 1057, Расшифровка - таблица 10)
	ПараметрыЧека.Вставить("ПризнакАгента"     , Неопределено); // Перечисление - Признак агента (Тег 1057).
	ПараметрыЧека.Вставить("ДанныеАгента"      , ПараметрыДанныеАгента());     // Структура,Заполнение необязательно - Данные агента.
	ПараметрыЧека.Вставить("ДанныеПоставщика"  , ПараметрыДанныеПоставщика()); // Структура,Заполнение необязательно - Данные поставщика.
	
	// Реквизиты начиная с ФФД 1.1 (Введены приказом от 09.04.2018 N ММВ-7-20/207@)
	ПараметрыЧека.Вставить("Получатель"         );  // Строка,Необязательно - Тэг 1227 - Получатель (покупатель)	
	ПараметрыЧека.Вставить("ПолучательИНН"      );  // Строка,Необязательно - Тэг 1228 - ИНН получателя (ИНН покупателя)	
	
	// Реквизиты начиная с ФФД 1.2 (Введены приказом от 14.09.2020 N ЕД-7-20/662@)
	ПараметрыЧека.Вставить("СубъектПерсональныхДанных");    // Необязательно  - Физическое лицо, которое прямо или косвенно определено или определяемо с помощью персональных данных.
	ПараметрыЧека.Вставить("ЕстьПерсональныеДанные", Ложь); // Булево,Необязательно - Параметры чека содержат персональные данные.
	ПараметрыЧека.Вставить("ТипПерсональныхДанных");        // ПеречислениеСсылка.ТипыПерсональныхДанныхККТ, Необязательно - Тип персональных данных.
	
	ПараметрыЧека.Вставить("СведенияОПокупателе" , ПараметрыСведенияОПокупателе());  // Структура,Заполнение необязательно - Тэг 1256 - Сведения о покупателе (клиенте)	
	ПараметрыЧека.Вставить("ОперационныйРеквизит", ПараметрыОперационныйРеквизит()); // Структура,Заполнение необязательно - Тэг 1270 - 
	ПараметрыЧека.Вставить("ОтраслевойРеквизит"  , ПараметрыОтраслевойРеквизит());   // Структура,Заполнение необязательно - Тэг 1261 - Отраслевой реквизит чека,
	 
	// Параметры необходимые для ФР
	ПараметрыЧека.Вставить("СерийныйНомер"       ); // Строка,Необязательно - Заводской номер ККМ (совместимость с ФР).
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ПараметрыЧека.Вставить("ОрганизацияНазвание" ); // Строка,Необязательно - Название организации (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ОрганизацияИНН"      ); // Строка,Необязательно - ИНН организации (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ОрганизацияКПП"      ); // Строка,Необязательно - КПП организации (Для чека ЕНВД).
	ПараметрыЧека.Вставить("АдресМагазина"       ); // Строка,Необязательно - Адрес магазина (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НаименованиеМагазина"); // Строка,Необязательно - Наименование магазина (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерКассы"          ); // Строка,Необязательно - Номер кассы (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерЧека"           ); // Строка,Необязательно - Номер чека  (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерСмены"          ); // Строка,Необязательно - Номер смены (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ДатаВремя", ТекущаяДата()); // ДатаВремя, Необязательно - Дата время в чеке (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ТекстШапки"   , НСтр("ru='ДОБРО ПОЖАЛОВАТЬ!'"));   // Строка - заполняется значением по умолчанию. 
	ПараметрыЧека.Вставить("ТекстПодвала" , НСтр("ru='СПАСИБО ЗА ПОКУПКУ!'")); // Строка - заполняется значением по умолчанию. 
	ПараметрыЧека.Вставить("КопийЧека"    , 1); // Число,Необязательно - Сколько печатать копий чеков ЕНВД на принтере чеков.

	// Позиции чека для фискализациию
	ПараметрыЧека.Вставить("ПозицииЧека"  , Новый Массив()); // Массив элементов "Структура". Обязательно.
	// Таблица оплаты чека
	ПараметрыЧека.Вставить("ТаблицаОплат" , Новый Массив()); // Массив элементов "Структура". Обязательно.
	// Пример заполнения строки оплаты:
	// СтрокаОплаты = Новый Структура();
	// СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные")); // Наличные
	// СтрокаОплаты.Вставить("Сумма", СуммаВидаОплаты);
	// ПараметрыЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	// Параметры для печати чека по шаблону.
	ПараметрыЧека.Вставить("ШаблонЧека"            ); // Ссылка,Необязательно - Пользовательский шаблон для формирования чека.
	ПараметрыЧека.Вставить("КассаККМ"              ); // Ссылка,Необязательно - Касса ККМ. 
	ПараметрыЧека.Вставить("НефискальныеДокументы" , Новый Массив()); // Массив нефискальных документов. Необязательно.
	
	// Строка,Необязательно - Дополнительный реквизит чека (Тег 1192).
	ПараметрыЧека.Вставить("ДополнительныйРеквизит"  , Неопределено); 
	// Структура,Заполнение необязательно - дополнительный реквизит пользователя (Тег 1084).
	ПараметрыЧека.Вставить("ДополнительныйРеквизитПользователя", ПараметрыДополнительногоРеквизитаПользователя());

	ПараметрыЧека.Вставить("СформироватьЧекКоррекции", Ложь); // Булево,Необязательно - сформировать чек коррекции, только для ФФД 1.1.
	
	// Форматно-логический контроль - "ПеречислениеСсылка.СпособыФорматноЛогическогоКонтроля"
	ПараметрыЧека.Вставить("СпособФорматноЛогическогоКонтроля", Неопределено);     // Перечисление,Необязательно - Способ форматно-логического контроля. 
	ПараметрыЧека.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", 0.01); // Число,Необязательно - устанавливается значение по умолчанию. 
	ПараметрыЧека.Вставить("ИндивидуальныйРежимПодготовкиДанныхКПередачеВОФД", Ложь); // Булево,Необязательно - устанавливается значение по умолчанию. 
	ПараметрыЧека.Вставить("ЕдиныйЧек", Ложь);  // Булево,Необязательно - Одна фискальная операция привязана к нескольким документам.
	
	Возврат ПараметрыЧека; 
	
КонецФункции

// Заполняет структуру параметров фискальной строки для фискализации чека.
//
// Возвращаемое значение:
// 	Структура - Описание:
// * Штрихкод - Строка
// * НомерСекции - Число -
// * ДополнительныйРеквизит - Произвольный
// * СуммаАкциза - Строка
// * НомерТаможеннойДекларации - Строка 
// * КодСтраныПроисхожденияТовара - Строка
// * ДанныеКодаТоварнойНоменклатуры - Структура -:
// ** СерийныйНомер - Строка
// ** ГлобальныйИдентификаторТорговойЕдиницы - Строка 
// ** КонтрольныйИдентификационныйЗнак - Строка
// ** ТипМаркировки - Строка 
// * ЕдиницаИзмерения - Произвольный
// * ДанныеПоставщика - Структура -:
// ** ИНН - Строка
// ** Наименование - Строка
// ** Телефон - Строка
// * ДанныеАгента - Структура -:
// ** ОператорПоПриемуПлатежей - Структура -:
// *** Телефон - Неопределено -
// ** ОператорПеревода - Строка
// ** ПлатежныйАгент - Строка
// * ПризнакАгентаПоПредметуРасчета - Число 
// * ПризнакПредметаРасчета - Неопределено -
// * ПризнакСпособаРасчета - Неопределено -
// * СуммаНДС - Неопределено -
// * СтавкаНДС - Неопределено -
// * СуммаСкидок - Число
// * Сумма - Число -
// * ЦенаСоСкидками - Число -
// * Цена - Число -
// * Количество - Число -
// * Наименование - Строка
// * НомерСтрокиТовара - Число
// * ФискальнаяСтрока - Строка.
// 
Функция ПараметрыФискальнойСтрокиЧека() Экспорт;
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ФискальнаяСтрока");  // Строка,Обязательно - Тип строки. Исходящий служебный параметр. 
	ПараметрыСтроки.Вставить("НомерСтрокиТовара"); // Число,Обязательно  - Дополнительный параметр для обработки строк чека для форматно-логического контроля.
	// Обязательные реквизиты
	ПараметрыСтроки.Вставить("Наименование");        // Строка,Обязательно  - Наименование предмета расчета
	ПараметрыСтроки.Вставить("Количество"     , 0);  // Число,Обязательно   - Количество предмета расчета 
	ПараметрыСтроки.Вставить("Цена"           , 0);  // Число,Обязательно   - Цена без учета скидок и наценок (Необходимо для ФР и ФФД 1.0)
	ПараметрыСтроки.Вставить("ЦенаСоСкидками" , 0);  // Число,Обязательно   - Цена с учета скидок и наценок (Необходимо начиная с ФФД 1.0.5 и выше)
	ПараметрыСтроки.Вставить("Сумма"          , 0);  // Число,Обязательно   - Стоимость предмета расчета с учетом скидок и наценок
	ПараметрыСтроки.Вставить("СуммаСкидок");         // Число,Необязательно - Сумма скидок и наценок, не входит в ФФД.
	ПараметрыСтроки.Вставить("СтавкаНДС" , Неопределено); // Число,Обязательно  - Ставка НДС (Значения: Неопределено-БезНДС, 0, 10, 20, 18, 110, 118, 120)
	ПараметрыСтроки.Вставить("СуммаНДС"  , Неопределено); // Число,Обязательно  - Сумма НДС
	
	// Реквизиты начиная с ФФД 1.0.5
	// Перечисление - ПризнакиСпособаРасчета - (ФФД, Тег 1214, Расшифровка - таблица 28)
	ПараметрыСтроки.Вставить("ПризнакСпособаРасчета", Неопределено); // Признак способа расчета. Обязательно для ФФД 1.0.5 и выше.
	                                         
	// Реквизиты начиная с ФФД 1.1
	// Перечисление - ПризнакиПредметаРасчета - (ФФД, Тег 1030, Расшифровка - таблица 29)
	ПараметрыСтроки.Вставить("ПризнакПредметаРасчета", Неопределено); // Признак предмета расчета. Обязательно для ФФД 1.1 и выше.
	
	// Перечисление - ПризнакиАгента - (ФФД, Тег 1222, Расшифровка - таблица 21)
	ПараметрыСтроки.Вставить("ПризнакАгентаПоПредметуРасчета");  // Необязательно, Признак агента по предмету расчета, Тег 1222.
	ПараметрыСтроки.Вставить("ДанныеАгента"     , ПараметрыДанныеАгента());     // Структура - Данные агента, Тег 1223. Заполнение необязательно.
	ПараметрыСтроки.Вставить("ДанныеПоставщика" , ПараметрыДанныеПоставщика()); // Структура - Данные агента, Тег 1224. Заполнение необязательно.
	
	ПараметрыСтроки.Вставить("ЕдиницаИзмерения");         // Необязательно, Единица измерения предмета расчета. 
	ПараметрыСтроки.Вставить("ДанныеКодаТоварнойНоменклатуры", ПараметрыДанныеКодаТоварнойНоменклатуры());  // Коды товарной номенклатуры.
	ПараметрыСтроки.Вставить("КодВидаНоменклатурнойКлассификации"); // Строка,Необязательно - Код вида номенклатурной классификации.
		
	// Реквизиты начиная с ФФД 1.1 (Введены приказом от 9 апреля 2018 г. N ММВ-7-20/207@)
	ПараметрыСтроки.Вставить("КодСтраныПроисхожденияТовара"); // Строка,Необязательно - Цифровой код страны происхождения товара в соответствии с Общероссийским классификатором стран мира.
	ПараметрыСтроки.Вставить("НомерТаможеннойДекларации");    // Строка,Необязательно - Регистрационный номер таможенной декларации.
	ПараметрыСтроки.Вставить("СуммаАкциза");                  // Число,Необязательно  - Сумма акциза, включенная в стоимость предмета расчета.
	ПараметрыСтроки.Вставить("ДополнительныйРеквизит"); // Строка,Необязательно - Дополнительный реквизит предмета расчета, Тег 1191.
	
	// Реквизиты начиная с ФФД 1.2
	
	// Дробное количество, рекомендации ЦРПТ "ВЫВОД ТОВАРА ИЗ ОБОРОТА ПРИ РЕАЛИЗАЦИИ КОНЕЧНЫМ ПОТРЕБИТЕЛЯМ (ЧАСТИЧНАЯ ПРОДАЖА)"
	// для 1.0.5 и 1.1 - пишем в 1191, Формирование и  передача фискального  документав ГИС МТ 
	// для 1.2 - пишем в 1291
	ПараметрыСтроки.Вставить("ДробноеКоличество", ПараметрыДробноеКоличество());     
	ПараметрыСтроки.Вставить("КонтрольнаяМарка"); // Строка,Необязательно -  Код контрольной марки. Кодируется текстом в кодировке Base64.
	ПараметрыСтроки.Вставить("КодЕдиницыИзмерения"); // Строка,Необязательно - Код единицы измерения в соответствии с общероссийским классификатором единиц измерения.
	ПараметрыСтроки.Вставить("ОтраслевойРеквизит", ПараметрыОтраслевойРеквизит()); // Структура,Заполнение необязательно - Тэг 1260 - Отраслевой реквизит предмета расчета.
	
	// Дополнительные реквизиты не входящие в ФФД.
	ПараметрыСтроки.Вставить("НомерСекции" , 0);   // Число,Необязательно  - Номер секции ФР (для совместимости), 0-Значение по умолчанию.
	ПараметрыСтроки.Вставить("Штрихкод");        // Строка,Необязательно - Штрихкод
	ПараметрыСтроки.Вставить("ШтрихкодBase64");  // Строка,Необязательно - Штрихкод, Кодируется текстом в кодировке Base64.
	
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров текстовой строки для фискализации чека.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыТекстовойСтрокиЧека(Текст = Неопределено) Экспорт;
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ТекстоваяСтрока");       // Тип строки. Исходящий служебный параметр. 
	ПараметрыСтроки.Вставить("Текст", Текст);          // Строка,Обязательно   - Текстовая строка
	ПараметрыСтроки.Вставить("ПереносСтроки", Ложь);   // Булево,Необязательно - Перенос строки, устанавливается значение по умолчанию.  
	ПараметрыСтроки.Вставить("Выравнивание" , "Лево"); // Строка,Необязательно - Выравнивание текста, Значения: "Лево", "Право", "Центр".
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров штрихкода в строке для фискализации чека.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыШтрихкодВСтрокеЧека(ТипШтрихкодаЗнач = Неопределено, ШтрихКодЗнач = Неопределено, ШтрихКодBase64 = Неопределено) Экспорт;
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ТипШтрихкода"  , ТипШтрихкодаЗнач); // Строка,Обязательно - Тип штрихкода.  
	ПараметрыСтроки.Вставить("ШтрихКод"      , ШтрихКодЗнач);     // Строка,Обязательно - Значение штрихкода.
	ПараметрыСтроки.Вставить("ШтрихКодBase64", ШтрихКодBase64);   // Строка,Обязательно - Значение штрихкода в Base64.
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров строки оплаты.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыСтрокиОплаты() Экспорт
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные")); 
	ПараметрыСтроки.Вставить("Сумма"    , 0);
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров строки оплаты.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыДанныеКоррекции()  Экспорт
	
	ДанныеКоррекции = Новый Структура();
	ДанныеКоррекции.Вставить("ТипКоррекции", 0);   // Число,Обязательно     - Тип коррекции: 0-самостоятельно, 1-по предписанию.
	ДанныеКоррекции.Вставить("ОписаниеКоррекции"); // Строка,Необязательно  - Описание коррекции.
	ДанныеКоррекции.Вставить("ДатаКоррекции");     // ДатаВремя,Обязательно - Дата совершения корректируемого расчета.
	ДанныеКоррекции.Вставить("НомерПредписания");  // Строка,Обязательно    - Номер предписания налогового органа.
	Возврат ДанныеКоррекции; 
	
КонецФункции

// Заполняет структуру параметров выполнения операции чека коррекции.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыОперацииЧекаКоррекции() Экспорт;
	
	ПараметрыЧека = ПараметрыОперацииФискализацииЧека();
	ПараметрыЧека.Вставить("КорректируемыйДокумент");
	ПараметрыЧека.Вставить("НеприменениеККТ", Ложь); 
	ПараметрыЧека.Вставить("ДанныеКоррекции", ПараметрыДанныеКоррекции()); 
	
	Возврат ПараметрыЧека; 
	
КонецФункции

// Заполняет структуру параметров открытия и закрытия смены.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыОткрытияЗакрытияСмены() Экспорт;
	
	ПараметрыОперации = ПараметрыВыполненияОперации();
	
	ПараметрыОперации.Вставить("АдресРасчетов"); // Строка,Необязательно - Адрес расчетов (Тег 1009).
	ПараметрыОперации.Вставить("МестоРасчетов"); // Строка,Необязательно - Место расчетов (Тег 1187).
	
	Возврат ПараметрыОперации; 
	
КонецФункции

// Заполняет структуру параметров инкассацию на фискальном устройстве.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыИнкассации() Экспорт;
	
	ПараметрыОперации = ПараметрыВыполненияОперации();
	ПараметрыОперации.Вставить("ДокументОснование" , Неопределено); // Ссылка,Необязательно. Документ по которому формируется операция.
	ПараметрыОперации.Вставить("Организация"       , Неопределено); // Ссылка,Необязательно. Организация по которой формируется операция.
	ПараметрыОперации.Вставить("ТорговыйОбъект"    , Неопределено); // Ссылка,Необязательно. Объект по которому формируется операция.

	ПараметрыОперации.Вставить("ТипИнкассации"); // Число,Обязательно - Тип инкассации (1-внесение, 0-выемка)
	ПараметрыОперации.Вставить("Сумма", 0);      // Число,Обязательно - Сумма инкасации.
	
	Возврат ПараметрыОперации; 
	
КонецФункции

// Заполняет структуру параметров аннулирования чека.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыОперацииАннулированияЧека() Экспорт;
	
	ПараметрыОперации = ПараметрыВыполненияОперации();
	ПараметрыОперации.Вставить("ТипРасчета" , ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств"));
	ПараметрыОперации.Вставить("Фискальный" , Истина); 
	Возврат ПараметрыОперации; 
	
КонецФункции

// Параметры счетчиков операций.
//
Функция ПараметрыСчетчиковОпераций() Экспорт
	
	СтруктураРезультат = Новый Структура();
	
	СтруктураРезультат.Вставить("КоличествоЧеков");
	СтруктураРезультат.Вставить("СуммаЧеков");
	СтруктураРезультат.Вставить("КоличествоЧековКоррекции");
	СтруктураРезультат.Вставить("СуммаЧековКоррекции");
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Заполняет структуру параметров нормализуемых фискальных данных.
//
Функция ПараметрыНормализуемыхФискальныхДанных() Экспорт
	
	СтруктураРезультат = Новый Структура();
	
	СтруктураРезультат.Вставить("ДатаСменыККТ"     , 0); // Дата открытой/закрытой смены.
	СтруктураРезультат.Вставить("НомерСменыККТ"    , 0); // Номер открытой/закрытой смены.
	СтруктураРезультат.Вставить("НомерЧекаККТ"     , 0); // Номер последнего фискального чека.
	СтруктураРезультат.Вставить("НомерЧекаЗаСмену" , 0); // Номер последнего чека за смену.
	СтруктураРезультат.Вставить("СтатусСмены"      , Неопределено); // Состояние смены: 1-Закрыта, 2-Открыта, 3-Истекла.
	СтруктураРезультат.Вставить("СчетчикиОперацийПриход"        , ПараметрыСчетчиковОпераций()); // Счетчики операций по типу "приход".
	СтруктураРезультат.Вставить("СчетчикиОперацийВозвратПрихода", ПараметрыСчетчиковОпераций()); // Счетчики операций по типу "возврат прихода".
	СтруктураРезультат.Вставить("СчетчикиОперацийРасход"        , ПараметрыСчетчиковОпераций()); // Счетчики операций по типу "расход".
	СтруктураРезультат.Вставить("СчетчикиОперацийВозвратРасхода", ПараметрыСчетчиковОпераций()); // Счетчики операций по типу "возврат расхода".
	СтруктураРезультат.Вставить("КоличествоЧеков"); // Количество кассовых чеков за смену.
	СтруктураРезультат.Вставить("ОстатокНаличных"); // Остаток наличных денежных средств в кассе
	СтруктураРезультат.Вставить("ПревышеноВремяОжиданияОтветаОФД", Ложь);
	СтруктураРезультат.Вставить("КоличествоНепереданныхФД"   , Неопределено); // Количество непереданных документов.
	СтруктураРезультат.Вставить("НомерПервогоНепереданногоФД", Неопределено); // Номер первого непереданного документ. 
	СтруктураРезультат.Вставить("ДатаПервогоНепереданногоФД ", Неопределено); // Дата и время первого из непереданных документов.
	СтруктураРезультат.Вставить("НеобходимаСтрочнаяЗаменаФН" , Ложь); // Признак необходимости срочной замены ФН.
	СтруктураРезультат.Вставить("ПамятьФНПереполнена"        , Ложь); // Признак переполнения памяти ФН.
	СтруктураРезультат.Вставить("РесурсФНИсчерпан"           , Ложь); // Признак исчерпания ресурса ФН.
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Заполнить структуру фискализации чека
//
Функция ПараметрыФискализацииЧека() Экспорт
	
	ПараметрыФискализации = Новый Структура();

	ПараметрыФискализации.Вставить("Кассир");
	ПараметрыФискализации.Вставить("ДокументОснование");
	ПараметрыФискализации.Вставить("ИдентификаторФискальнойЗаписи");
	
	ПараметрыФискализации.Вставить("Организация");
	ПараметрыФискализации.Вставить("ТорговыйОбъект");
	ПараметрыФискализации.Вставить("КорректируемыйДокумент");
	ПараметрыФискализации.Вставить("ЕстьПерсональныеДанные", Ложь);
	ПараметрыФискализации.Вставить("СубъектПерсональныхДанных");
	ПараметрыФискализации.Вставить("ТипПерсональныхДанных");
	
	ПараметрыФискализации.Вставить("ТипРасчета");
	ПараметрыФискализации.Вставить("ТипДокумента");
	ПараметрыФискализации.Вставить("ТипИнкассации");
	                                                
	ПараметрыФискализации.Вставить("РевизияИнтерфейса");
	ПараметрыФискализации.Вставить("ШиринаСтроки");
	ПараметрыФискализации.Вставить("РегистрационныйНомерККТ");
	ПараметрыФискализации.Вставить("ЗаводскойНомерФН"); 
	ПараметрыФискализации.Вставить("ДополнительныйРеквизит");
	
	ПараметрыФискализации.Вставить("НомерСменыККТ"   , 0); // Номер смены.
	ПараметрыФискализации.Вставить("НомерЧекаККТ"    , 0); // Номер фискального чека.
	ПараметрыФискализации.Вставить("НомерЧекаЗаСмену", 0); // Номер чека за смену.
	ПараметрыФискализации.Вставить("ДатаВремяЧека"); // Дата и время фискализации чека на ККТ.
	
	ПараметрыФискализации.Вставить("СуммаЧека", 0);
	ПараметрыФискализации.Вставить("ОплатаНаличные" , 0);                   
	ПараметрыФискализации.Вставить("ОплатаЭлектронно", 0);
	ПараметрыФискализации.Вставить("ОплатаПредоплата", 0);  
	ПараметрыФискализации.Вставить("ОплатаПостоплата", 0);
	ПараметрыФискализации.Вставить("ОплатаВстречноеПредоставление", 0);
	
	ПараметрыФискализации.Вставить("ФискальныйПризнак" , ""); // Фискальный признак документа.
	ПараметрыФискализации.Вставить("АдресСайтаПроверки", ""); // Адрес сайта проверки ФНС.
	
	ПараметрыФискализации.Вставить("Электронно"       , Ложь);
	ПараметрыФискализации.Вставить("Отправляет1СSMS"  , Ложь);
	ПараметрыФискализации.Вставить("Отправляет1СEmail", Ложь);
	ПараметрыФискализации.Вставить("АвтономныйРежим"  , Ложь);
	
	ПараметрыФискализации.Вставить("ДанныеЧекаXML");
	ПараметрыФискализации.Вставить("ДанныеЧекаXMLПерсональныеДанные");
	ПараметрыФискализации.Вставить("РезультатОперацииXML");
	ПараметрыФискализации.Вставить("ТекстСообщения");
	
	ПараметрыФискализации.Вставить("ЧекКоррекцииСторно");
	ПараметрыФискализации.Вставить("СформироватьЧекКоррекции", Ложь);
	
	ПараметрыФискализации.Вставить("НеприменениеККТ", Истина);
	ПараметрыФискализации.Вставить("ВерсияФФДККТ11" , Ложь);
	
	ПараметрыФискализации.Вставить("Результат", Истина);
	ПараметрыФискализации.Вставить("ОперацияЗаписана", Истина);
	ПараметрыФискализации.Вставить("ТекстОшибки");
	
	ПараметрыФискализации.Вставить("ЕдиныйЧек", Ложь);
	
	Возврат ПараметрыФискализации;
	
КонецФункции 

// Заполняет структуру параметров запрос КМ.
//
// Возвращаемое значение:
//   Структура:
//   * ИдентификаторЗапроса - Строка - Уникальный идентификатор запроса 
//   * Количество - Число - Количество
//   * ДробноеКоличество - Структура - ПараметрыДробноеКоличество()
//   * КонтрольнаяМарка - Строка - Код контрольной марки. Кодируется текстом в кодировке Base64.
//   * КодЕдиницыИзмерения - Строка - Код единицы измерения в соответствии с общероссийским классификатором единиц измерения.
//   * ПланируемыйСтатусТовара - ПеречислениеССылка.ПланируемыйСтатусМаркируемогоТовара - Планируемый статус маркируемого товара.
//
Функция ПараметрыЗапросКМ() Экспорт;
	
	Параметры = Новый Структура();
	Параметры.Вставить("ИдентификаторЗапроса"); // Строка,Обязательно - Уникальный идентификатор запроса
	Параметры.Вставить("ОжидатьПолучениеОтветаОИСМ", Истина); // Булево,Обязательно - Будет ли ожидаться получение ответа от ОИСМ.
	Параметры.Вставить("Количество", 0);  // Число,Необязательно - Количество 
	Параметры.Вставить("ДробноеКоличество", ПараметрыДробноеКоличество());     
	Параметры.Вставить("КонтрольнаяМарка"); // Строка,Необязательно - Код контрольной марки. Кодируется текстом в кодировке Base64.
	// КодЕдиницыИзмерения - Если значение реквизита заполнено, используется он, иначе МераКоличестваПредметаРасчета
	Параметры.Вставить("КодЕдиницыИзмерения"); // Строка,Необязательно - Код единицы измерения в соответствии с общероссийским классификатором единиц измерения.
	Параметры.Вставить("МераКоличестваПредметаРасчета"); // Перечисление.МераКоличестваПредметаРасчетаККТ,Необязательно - Мера количества предмета расчета. Тэг 2108. Значение из таблицы 114 (ФФД).
	Параметры.Вставить("ПланируемыйСтатусТовара"); // ПеречислениеСсылка.ПланируемыйСтатусМаркируемогоТовара - Обязательно
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров запрос КМ.
//
// Возвращаемое значение:
//   Структура:
//   * ИдентификаторЗапроса - Строка - Уникальный идентификатор запроса 
//
Функция ПараметрыПодтверждениеКМ() Экспорт;
	
	Параметры = Новый Структура();
	Параметры.Вставить("ИдентификаторЗапроса"); // Строка,Обязательно - Уникальный идентификатор запроса
	Параметры.Вставить("Выбытие", Истина); // Булево,Обязательно - КМ будет реализована в состав документа о реализации маркированного товара.
	Возврат Параметры; 
	
КонецФункции            

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейсТСД

// Заполняет структуру параметров строки выгрузки в ТСД.
//
Функция ПараметрыСтрокиВыгрузкиВТСД() Экспорт
	
	ПараметрыСтроки = Новый Структура();
	
	ПараметрыСтроки.Вставить("Код");              // Строка
	ПараметрыСтроки.Вставить("Артикул");          // Строка
	ПараметрыСтроки.Вставить("Штрихкод");         // Строка
	ПараметрыСтроки.Вставить("ШтрихкодBase64");   // Строка
	ПараметрыСтроки.Вставить("ШтрихкодУпаковки"); // Строка
	ПараметрыСтроки.Вставить("ШтрихкодУпаковкиBase64"); // Строка
	ПараметрыСтроки.Вставить("Номенклатура");     // Строка
	ПараметрыСтроки.Вставить("Наименование");     // Строка
	ПараметрыСтроки.Вставить("ЕдиницаИзмерения"); // Строка
	ПараметрыСтроки.Вставить("ХарактеристикаНоменклатуры"); // Строка
	ПараметрыСтроки.Вставить("СерияНоменклатуры"); // Строка
	ПараметрыСтроки.Вставить("Качество");          // Строка
	ПараметрыСтроки.Вставить("Цена"        , 0);   // Число
	ПараметрыСтроки.Вставить("Остаток"     , 0);   // Число
	ПараметрыСтроки.Вставить("Количество"  , 0);   // Число
	ПараметрыСтроки.Вставить("Алкоголь"    , Ложь); // Булево
	ПараметрыСтроки.Вставить("Маркируемый" , Ложь); // Булево
	ПараметрыСтроки.Вставить("КодВидаАлкогольнойПродукции"); // Строка
	ПараметрыСтроки.Вставить("КодАлкогольнойПродукции");
	ПараметрыСтроки.Вставить("ЕмкостьТары"); // Число
	ПараметрыСтроки.Вставить("Крепость");    // Число
	ПараметрыСтроки.Вставить("ИННПроизводителя");  // Строка
	ПараметрыСтроки.Вставить("КПППроизводителя");  // Строка
	ПараметрыСтроки.Вставить("ШтрихкодМаркиАлкогольнойПродукции");  // Строка
	ПараметрыСтроки.Вставить("ШтрихкодМаркиАлкогольнойПродукцииBase64");  // Строка
	
	
	Возврат ПараметрыСтроки; 
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

Функция Base64ВШтрихкод(ШтрихкодВBase64) Экспорт
	
	ДвоичныеДанные = Base64Значение(ШтрихкодВBase64);
	Если ДвоичныеДанные = Неопределено Тогда
		Штрихкод = ШтрихкодВBase64;
	Иначе
		Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

Функция ШтрихкодВBase64(Штрихкод) Экспорт
	
	Если Штрихкод = Неопределено Тогда 
		ДвоичныеДанныеСтроки = Неопределено;
	Иначе
		ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(Штрихкод);
		ШтрихкодBase64 = Base64Строка(ДвоичныеДанныеСтроки);
		ШтрихкодBase64 = СтрЗаменить(ШтрихкодBase64, Символы.ПС, "");
		ШтрихкодBase64 = СтрЗаменить(ШтрихкодBase64, Символы.ВК, "");
	КонецЕсли;
	
	Возврат ШтрихкодBase64; 
	
КонецФункции

// Выстраивает строку по длине поля, если поле длинное - переносит на следующую строку.
//
Функция ПостроитьПолеПереносом(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ПоЦентру = Ложь) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	Если СтрДлина(Текст) > ДлинаПоля Тогда 
		ТекстПолный = "";
		Пока СтрДлина(Текст) > ДлинаПоля Цикл
			ТекстПолный = ТекстПолный + ?(ПустаяСтрока(ТекстПолный), "", Символы.ПС) +  Лев(Текст, ДлинаПоля);
			Текст = Сред(Текст, ДлинаПоля + 1);
		КонецЦикла;
		ТекстПолный = ТекстПолный + ?(ПустаяСтрока(Текст), "", Символы.ПС + Текст);
	Иначе
		Если ПоЦентру Тогда
			ТекстПолный = Текст;
			ДобавлятьСправа = Истина; 
			Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
				Если ДобавлятьСправа Тогда
					ТекстПолный = ТекстПолный + ДобСимвол;
				Иначе
					ТекстПолный = ДобСимвол + ТекстПолный;
				КонецЕсли;
				ДобавлятьСправа = Не ДобавлятьСправа;
			КонецЦикла;
		Иначе
			ТекстПолный = Текст;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ТекстПолный;
	
КонецФункции

// Обрезает передаваемую строку по длине поля, если поле слишком короткое - дополняет символами.
//
Функция ПостроитьПоле(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ДобавлятьСправа = Истина) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если ДобавлятьСправа Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		Иначе
			ТекстПолный = ДобСимвол + ТекстПолный;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

// Формирует строку из двух полей, если передается одно поле дополняет символами до нужного размера.
//
Функция ВыстроитьПоля(Знач Текст1, Знач Текст2 = "", Знач ДлинаПоля) Экспорт
	
	Если ПустаяСтрока(Текст2) Тогда
		ТекстПолный = ПостроитьПоле(Текст1, СтрДлина(Текст1) + Цел((ДлинаПоля - СтрДлина(Текст1))/2), , Ложь);
		ТекстПолный = ПостроитьПоле(ТекстПолный, ДлинаПоля);
	ИначеЕсли СтрДлина(Текст1) + СтрДлина(Текст2) < ДлинаПоля Тогда
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля - СтрДлина(Текст2)) + Текст2;
	Иначе
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля) + Символы.ПС + ПостроитьПоле(Текст2, ДлинаПоля, ,Ложь)
	КонецЕсли;
	
	Возврат ТекстПолный;
	
КонецФункции

//  Выравнить передаваемую строку по длине поля, если поле слишком короткое - дополняет символами.
//
Функция ВыравнитьПоле(Знач Текст, Знач ДлинаПоля = 32, Знач Выравнивание = "Лево", ДобСимвол = "") Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	НачПозиция = Истина;
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если Выравнивание = "Лево" Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		ИначеЕсли Выравнивание = "Право" Тогда
			ТекстПолный = ДобСимвол + ТекстПолный;
		Иначе
			Если НачПозиция Тогда
				ТекстПолный = ТекстПолный + ДобСимвол;
				НачПозиция = Ложь;
			Иначе
				ТекстПолный = ДобСимвол + ТекстПолный;
				НачПозиция = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

Функция ДобавитьЛидирующиеНули(Знач Строка, Знач ДлиннаСтроки) 
	
	ТекстПолный = Строка;
	Пока СтрДлина(ТекстПолный) < ДлиннаСтроки Цикл
		ТекстПолный = "0" + ТекстПолный;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

// Определяет необходимость выполнения серверного события ПослеВыполненияКомандыФискальнымУстройством.
//
Функция ТребуетсяВызовСобытияПослеВыполненияКомандыФискальнымУстройством(Контекст) Экспорт
	
	Если Не КомандыРаботыСоСменами().Найти(Контекст.ВыполняемаяКоманда) = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает массив команд работы с кассовой сменой.
//
Функция КомандыРаботыСоСменами()
	
	МассивРезультат = Новый Массив();
	//МассивРезультат.Добавить("ReportCurrentStatusOfSettlements");
	МассивРезультат.Добавить("OpenShift");
	МассивРезультат.Добавить("CloseShift");
	
	Возврат МассивРезультат;
	
КонецФункции

Функция ТребуетсяЗакрытиеСмены(СтатусСмены) Экспорт
	
	Если СтатусСмены = 0 или СтатусСмены = 1 Тогда // неопределено или закрыта
		Возврат Ложь;
	ИначеЕсли СтатусСмены = 2 или СтатусСмены = 3 Тогда // открыта или истекла
		Возврат Истина;
	Иначе
		ТекстОшибки = НСтр("ru = 'Неизвестный статус смены'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецФункции

#КонецОбласти