///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет пересчет цены по валюте табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ФормаДокумента - Форма - форма документа.
//  ПредыдущаяВалюта - СправочникСсылка.Валюты - содержит ссылку на предыдущую валюту.
//  ИмяТабличнойЧасти - Строка - содержит имя пересчитываемой табличной части.
//  КурсПересчетаЦен - Структура, Неопределено:
//    * Курс - Число - курс пересчета в валюту
//    * Кратность - Число - кратность пересчета в валюту
//
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ФормаДокумента, ПредыдущаяВалюта, ИмяТабличнойЧасти, КурсПересчетаЦен = Неопределено) Экспорт
	
	СтруктураКурсы = ЦенообразованиеСервер.ПолучитьКурсыВалют(ПредыдущаяВалюта, ФормаДокумента.Объект.ВалютаДокумента, ФормаДокумента.Объект.Дата);
	
	Если КурсПересчетаЦен <> Неопределено И КурсПересчетаЦен.Свойство("Курс") И КурсПересчетаЦен.Свойство("Кратность") Тогда
		Если ФормаДокумента.Объект.ВалютаДокумента = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
			СтруктураКурсы.КурсНач 	 	= ?(КурсПересчетаЦен.Курс	   = 0, 1, КурсПересчетаЦен.Курс);
			СтруктураКурсы.КратностьНач = ?(КурсПересчетаЦен.Кратность = 0, 1, КурсПересчетаЦен.Кратность);
		Иначе
			СтруктураКурсы.Курс 	 = ?(КурсПересчетаЦен.Курс 		= 0, 1, КурсПересчетаЦен.Курс);
			СтруктураКурсы.Кратность = ?(КурсПересчетаЦен.Кратность = 0, 1, КурсПересчетаЦен.Кратность);
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		// Цена.
		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
			
			СтрокаТабличнойЧасти.Цена = ВалютыУНФКлиентСервер.Пересчитать(СтрокаТабличнойЧасти.Цена,
				СтруктураКурсы.КурсНач, СтруктураКурсы.Курс, СтруктураКурсы.КратностьНач, СтруктураКурсы.Кратность);
																	
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
			
		// Сумма.
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("Сумма") Тогда
			
			СтрокаТабличнойЧасти.Сумма = ВалютыУНФКлиентСервер.Пересчитать(СтрокаТабличнойЧасти.Сумма,
				СтруктураКурсы.КурсНач, СтруктураКурсы.Курс, СтруктураКурсы.КратностьНач, СтруктураКурсы.Кратность);
					
			Если СтрокаТабличнойЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
				
				// Скидки.
				Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
					СтрокаТабличнойЧасти.Сумма = 0;
				ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
				КонецЕсли;
								
			КонецЕсли;														
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			
	        СтрокаТабличнойЧасти.СуммаНДС = ?(ФормаДокумента.Объект.СуммаВключаетНДС, 
								  				СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
								  				СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
					        		
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ФормаДокумента.Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры // ПересчитатьЦеныТабличнойЧастиПоВалюте()

// Выполняет пересчет цены по флагу СуммаВключаетНДС табличной части документа после изменений в форме "Цены и валюта".
//
// Параметры:
//  ФормаДокумента - Форма - форма документа.
//  ИмяТабличнойЧасти - Строка - содержит имя пересчитываемой табличной части.
//
Процедура ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ФормаДокумента, ИмяТабличнойЧасти) Экспорт
	
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
			
			Если ФормаДокумента.Объект.СуммаВключаетНДС Тогда
				
				СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Цена * (100 + СтавкаНДС)) / 100;
				
			Иначе
				
				СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Цена * 100) / (100 + СтавкаНДС);
				
			КонецЕсли;
			
		КонецЕсли;
		
		РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
КонецПроцедуры // ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС()

// Выполняет пересчет цены по валюте табличной части документа после изменений в форме "Цены и валюта" по виду цен
//
// Параметры:
//  ФормаДокумента - Форма - форма документа.
//  ИмяТабличнойЧасти - Строка - содержит имя пересчитываемой табличной части.
//  ПересчитатьСкидки - Булево - признак пересчета скидок
//  ПересчитыватьЦеныСЗаказом - Булево - признак пересчета цен с заказом
//
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ФормаДокумента, ИмяТабличнойЧасти, ПересчитатьСкидки = Ложь, ПересчитыватьЦеныСЗаказом = Истина) Экспорт
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;

	СтруктураДанных.Вставить("Дата",				ФормаДокумента.Объект.Дата);
	СтруктураДанных.Вставить("Организация",			ФормаДокумента.Компания);
	СтруктураДанных.Вставить("ВидЦен",				ФормаДокумента.Объект.ВидЦен);
	СтруктураДанных.Вставить("ВалютаДокумента",		ФормаДокумента.Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("СуммаВключаетНДС",	ФормаДокумента.Объект.СуммаВключаетНДС);
	
	Если ПересчитатьСкидки Тогда
		СтруктураДанных.Вставить("ВидСкидкиНаценки", ФормаДокумента.Объект.ВидСкидкиНаценки);
		СтруктураДанных.Вставить("ПроцентСкидкиНаценки", 0);
						
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаДокумента.Объект, "ПроцентСкидкиПоДисконтнойКарте") Тогда 
			СтруктураДанных.Вставить("ПроцентСкидкиПоДисконтнойКарте", ФормаДокумента.Объект.ПроцентСкидкиПоДисконтнойКарте);		
		КонецЕсли;
	КонецЕсли;  
	
	ЕстьСтруктурнаяЕдиницаВТЧ = Ложь;
	ИмяРеквизитаСтруктурнаяЕдиница = ЦенообразованиеКлиентСервер.ОпределитьИмяРеквизитаСкладаВОбъекте(ФормаДокумента.Объект);
	
	Для каждого СтрокаТЧ Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТЧ.Цена = 0;
		
		Если ТипЗнч(СтрокаТЧ.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
		СтрокаТабличнойЧасти.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		
		// МинимальныеЦены
		ПрименитьОбщийВидЦен = Ложь;
		Если ФормаДокумента.ИмяФормы = "Документ.ЗаказПокупателя.Форма.ФормаДокумента"
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаДокумента, "КэшЗначений")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаДокумента.КэшЗначений, "РезервированиеЗапасов") Тогда
			
			ПрименитьОбщийВидЦен = НЕ ФормаДокумента.КэшЗначений.РезервированиеЗапасов;
				
		КонецЕсли;  
		
		Если ЗначениеЗаполнено(ИмяРеквизитаСтруктурнаяЕдиница) Тогда
			ЕстьСтруктурнаяЕдиницаВТЧ = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, ИмяРеквизитаСтруктурнаяЕдиница);
		КонецЕсли;
		
		СкладВШапке = Неопределено;
		Если ФормаДокумента.ИмяФормы = "Документ.ОтчетОРозничныхПродажах.Форма.ФормаДокумента" Тогда
			СкладВШапке = Истина;
			ЕстьСтруктурнаяЕдиницаВТЧ = Ложь;
		КонецЕсли; 
		
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(ФормаДокумента.Объект, СтрокаТЧ, СтрокаТабличнойЧасти, СкладВШапке, ПрименитьОбщийВидЦен);
		// Конец МинимальныеЦены
		
		// Наборы
		Если СтрокаТЧ.Свойство("НоменклатураНабора") Тогда
			СтрокаТабличнойЧасти.Вставить("НоменклатураНабора",		СтрокаТЧ.НоменклатураНабора);
			СтрокаТабличнойЧасти.Вставить("ХарактеристикаНабора",	СтрокаТЧ.ХарактеристикаНабора);
			СтрокаТабличнойЧасти.Вставить("ДоляСтоимости",			СтрокаТЧ.ДоляСтоимости);
			СтрокаТабличнойЧасти.Вставить("Количество",				СтрокаТЧ.Количество);
			Если ФормаДокумента.Объект.Свойство("ДобавленныеНаборы") Тогда
				// Количество добавленных наборов
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТЧ.НоменклатураНабора);
				СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТЧ.ХарактеристикаНабора);
				Если СтрокаТЧ.Свойство("НомерВариантаКП") Тогда
					СтруктураОтбора.Вставить("НомерВариантаКП", СтрокаТЧ.НомерВариантаКП);
				КонецЕсли;
				ДобавленныеСтроки = ФормаДокумента.Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
				Если ДобавленныеСтроки.Количество()=0 Тогда
					СтрокаТабличнойЧасти.Вставить("КоличествоНаборов", 1);
				Иначе
					СтрокаТабличнойЧасти.Вставить("КоличествоНаборов", ДобавленныеСтроки[0].Количество);
				КонецЕсли;
			Иначе
				СтрокаТабличнойЧасти.Вставить("КоличествоНаборов", 1);
			КонецЕсли;
			Если СтрокаТЧ.Свойство("НомерВариантаКП") Тогда
				СтрокаТабличнойЧасти.Вставить("НомерВариантаКП", СтрокаТЧ.НомерВариантаКП);
			Иначе
				СтрокаТабличнойЧасти.Вставить("НомерВариантаКП", 0);
			КонецЕсли; 
		КонецЕсли;
		// Конец Наборы
		СтрокаТабличнойЧасти.Вставить("Цена",				0);
		
		Если СтрокаТЧ.Свойство("МинимальнаяЦена") Тогда
			СтрокаТабличнойЧасти.Вставить("МинимальнаяЦена", 0);
		КонецЕсли;
		
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
		
	ЦенообразованиеСервер.ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента);
		
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		Если СтрокаТЧ.Свойство("НоменклатураНабора") Тогда
			СтруктураПоиска.Вставить("НоменклатураНабора",	 СтрокаТЧ.НоменклатураНабора);
			СтруктураПоиска.Вставить("ХарактеристикаНабора", СтрокаТЧ.ХарактеристикаНабора);
		КонецЕсли; 
		
		Если СтрокаТЧ.Свойство("СтруктурнаяЕдиница")
			И ЗначениеЗаполнено(СтрокаТЧ.СтруктурнаяЕдиница) Тогда 
						
			Если ЗначениеЗаполнено(ИмяРеквизитаСтруктурнаяЕдиница)
				И ЕстьСтруктурнаяЕдиницаВТЧ Тогда
				СтруктураПоиска.Вставить(ИмяРеквизитаСтруктурнаяЕдиница, СтрокаТЧ.СтруктурнаяЕдиница);
			КонецЕсли;
			
		КонецЕсли;
		
		РезультатПоиска = ФормаДокумента.Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			
			Если ПересчитыватьЦеныСЗаказом
				ИЛИ (НЕ ПересчитыватьЦеныСЗаказом И НЕ ЗначениеЗаполнено(СтрокаРезультат.Заказ)) Тогда
				СтрокаРезультат.Цена = СтрокаТЧ.Цена;
				
				Если СтрокаТЧ.Свойство("МинимальнаяЦена")
					И СтрокаРезультат.Свойство("МинимальнаяЦена") Тогда
					
					СтрокаРезультат.МинимальнаяЦена = СтрокаТЧ.МинимальнаяЦена;
					
				КонецЕсли;
				
			КонецЕсли;
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаРезультат);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Наборы
	// Округление цен составляющих набора
	Если СтруктураДанных.Свойство("ОкругленияНаборов") И СтруктураДанных.ОкругленияНаборов.Количество()>0 Тогда
		Для каждого ОписаниеОкругления Из СтруктураДанных.ОкругленияНаборов Цикл
			НаборыКлиентСервер.ОкруглениеЦеныНабора(
			ОписаниеОкругления.НоменклатураНабора, 
			ОписаниеОкругления.ХарактеристикаНабора, 
			?(ОписаниеОкругления.Свойство("НомерВариантаКП"), ОписаниеОкругления.НомерВариантаКП, Неопределено), 
			ФормаДокумента.Объект[ИмяТабличнойЧасти], 
			ОписаниеОкругления.Округление);
		КонецЦикла; 
	КонецЕсли;
	// Конец Наборы
	
	Если ПересчитатьСкидки Тогда
		Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанных.ПроцентСкидкиНаценки;
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

// Выполняем пересчет цены табличной части документа после изменений в форме "Цены и валюта" по виду цен контрагента
//
// Параметры:
//  ФормаДокумента - Форма - форма документа.
//  ИмяТабличнойЧасти - Строка - содержит имя пересчитываемой табличной части.
//
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(ФормаДокумента, ИмяТабличнойЧасти) Экспорт
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;

	СтруктураДанных.Вставить("Дата",				ФормаДокумента.Объект.Дата);
	СтруктураДанных.Вставить("Организация",			ФормаДокумента.Компания);
	СтруктураДанных.Вставить("ВидЦенКонтрагента",	ФормаДокумента.Объект.ВидЦенКонтрагента);
	СтруктураДанных.Вставить("ВалютаДокумента",		ФормаДокумента.Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("СуммаВключаетНДС",	ФормаДокумента.Объект.СуммаВключаетНДС);
	
	Для каждого СтрокаТЧ Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТЧ.Цена = 0;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Продолжить;	
		КонецЕсли; 
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
		
		Если СтрокаТЧ.Свойство("Характеристика") Тогда
			
			СтрокаТабличнойЧасти.Вставить("Характеристика",	СтрокаТЧ.Характеристика);
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		СтрокаТабличнойЧасти.Вставить("Цена",				0);
		
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
		
	ЦенообразованиеСервер.ПолучитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(СтруктураДанных, ТабличнаяЧастьДокумента);
		
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
		
		Если СтрокаТЧ.Свойство("Характеристика") Тогда
			
			СтруктураПоиска.Вставить("Характеристика",	СтрокаТЧ.Характеристика);
			
		КонецЕсли;
		
		СтруктураПоиска.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		
		РезультатПоиска = ФормаДокумента.Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаРезультат);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

// Дополняет структуру параметров вызова формы Цены и валюта структурной единицей из объекта или строки табличной части
//
// Параметры:
//  Объект - ДокументОбъект - Документ объект.
//  ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть документа объекта.
//  ТекущаяСтрокаТабличнойЧасти - СтрокаТабличнойЧасти - текущая строка табличной части объекта.
//  СтруктураПараметров - Структура - содержит параметры вызова формы ФормаЦеныИВалюта.
//  ПрименитьОбщийВидЦен - Булево - если Истина, то будет подобрана структурная единица независимо от объекта. По умолчанию Ложь;
//
Процедура ДополнитьСтруктуруВызоваФормыЦеныИВалютыСтруктурнойЕдиницей(Объект, ТабличнаяЧасть, ТекущаяСтрокаТабличнойЧасти, СтруктураПараметров, ПрименитьОбщийВидЦен = Ложь) Экспорт
	
	СкладВШапке = ЦенообразованиеКлиентСервер.ОпределитьПоложениеСкладаВОбъекте(Объект);
	
	Если ПрименитьОбщийВидЦен Тогда
		ИмяРеквизита = "";
	Иначе
		ИмяРеквизита = ЦенообразованиеКлиентСервер.ОпределитьИмяРеквизитаСкладаВОбъекте(Объект);
	КонецЕсли;	
	
	Если СкладВШапке Тогда
		
		СтруктурнаяЕдиница = ЦенообразованиеКлиентСервер.ПолучитьЗначениеСкладаВОбъекте(Объект, ТекущаяСтрокаТабличнойЧасти, ИмяРеквизита, СкладВШапке);
		СтруктураПараметров.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		
	Иначе        		
		
		Если ТекущаяСтрокаТабличнойЧасти <> Неопределено Тогда
			
			МассивСтруктурныхЕдиниц = Новый Массив;
			Если ЗначениеЗаполнено(ИмяРеквизита) Тогда				
				МассивСтруктурныхЕдиниц.Добавить(ТекущаяСтрокаТабличнойЧасти[ИмяРеквизита]);
				
				Для ИндексСтроки = 1 По ТабличнаяЧасть.Количество() - 1 Цикл
				
					СтрокаТабличнойЧасти = ТабличнаяЧасть[ИндексСтроки];
					МассивСтруктурныхЕдиниц.Добавить(СтрокаТабличнойЧасти[ИмяРеквизита]);
				
				КонецЦикла;
			Иначе
				МассивСтруктурныхЕдиниц.Добавить(Неопределено);
			КонецЕсли;
					
			СтруктураПараметров.Вставить("СтруктурнаяЕдиница", МассивСтруктурныхЕдиниц);
			
		КонецЕсли;
				
	КонецЕсли;

	
КонецПроцедуры

// Показывает оповещение пользователю с текстом о корректировке размера, суммы скидки
//
// Параметры:
// 	СтруктураРасчета - Структура:
//     * СообщениеПользователю - Текст - текст сообщения пользователю.
//     * СуммаДоРасчета - Число - сумма до расчета.
//     * СуммаПослеРасчета - Число - сумма после расчета.
//
Процедура ПоказатьОповещениеПользователяОКорректировкеЦены(СтруктураРасчета) Экспорт
	
	Если СтруктураРасчета.Свойство("СообщениеПользователю") Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Скидка изменена'"), , СтруктураРасчета.СообщениеПользователю);
		
	КонецЕсли;
	
	Если СтруктураРасчета.Свойство("СуммаДоРасчета") 
		И СтруктураРасчета.Свойство("СуммаПослеРасчета")
		И СтруктураРасчета.СуммаДоРасчета > СтруктураРасчета.СуммаПослеРасчета Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Скидка изменена'"), , НСтр("ru = 'Размер и сумма скидки были изменены по минимальной цене'"));
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет заполненность обязательных параметров схем компоновки данных,
// используемых для расчета цен.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, в которой необходимо рассчитать цены.
//
// Возвращаемое значение:
//  Булево - Признак наличия ошибок.
//
Функция ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанных(Форма) Экспорт
	
	ВидПроизвольныйЗапрос = НСтр("ru = 'Произвольный запрос'");
	ВидыЦен = Новый Массив;
	Для Каждого ГруппаВидЦены Из Форма.ВидыЦен.ПолучитьЭлементы() Цикл
		Для каждого СтрокаВидЦены Из ГруппаВидЦены.ПолучитьЭлементы() Цикл
			
			Если СтрокаВидЦены.Использование
				И СтрокаВидЦены.Вид = ВидПроизвольныйЗапрос Тогда
								
				ВидыЦен.Добавить(Новый Структура("АдресНастроекСхемыКомпоновкиДанных, АдресСхемыКомпоновкиДанных, ВидЦен",
					СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных, СтрокаВидЦены.АдресСхемыКомпоновкиДанных, СтрокаВидЦены.ВидЦен));
				
			КонецЕсли;		
		
		КонецЦикла;
		
	КонецЦикла;
	
	Ошибки = ЦенообразованиеВызовСервера.ПроверитьЗаполненностьОбязательныхПараметровСхемыКомпоновкиДанных(ВидыЦен);
	
	Для Каждого СтруктураОшибки Из Ошибки Цикл                                
		
		СтрокиВидыЦен = Форма.ВидыЦен.ПолучитьЭлементы()[0].ПолучитьЭлементы();
		Для каждого СтрокаВидаЦен Из СтрокиВидыЦен Цикл
			
			Если СтрокаВидаЦен.ВидЦен = СтруктураОшибки.ВидЦены.ВидЦен Тогда
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					СтруктураОшибки.Описание,
					,
					"ВидыЦен");
				
			КонецЕсли;
					
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ошибки.Количество() = 0;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// По выбранным полям в таблице ПредставлениеНоменклатуры формируется строковое представление номенклатуры в прайс-листе
//
Функция ПредставлениеНоменклатурыСтрокой(ПредставлениеНоменклатуры, ПараметрыКартинки = Неопределено) Экспорт
	
	СоставРеквизитов = "";
	Для каждого Строка Из ПредставлениеНоменклатуры Цикл
		
		Если Строка.Использование Тогда
			
			СоставРеквизитов = СоставРеквизитов + ?(ПустаяСтрока(СоставРеквизитов), "", ", ") + Строка.РеквизитПредставление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ПараметрыКартинки) = Тип("Структура") Тогда
		
		СоставРеквизитов = СоставРеквизитов + СтрШаблон(НСтр("ru =', Колонок: %1, Размер: %2 х %3'"), ПараметрыКартинки.КоличествоКолонок, ПараметрыКартинки.КартинкаШирина, ПараметрыКартинки.КартинкаВысота);
		
	КонецЕсли;
	
	Возврат СоставРеквизитов;
	
КонецФункции // ПредставлениеНоменклатурыСтрокой()

// Выполняет обязательные действия при изменении варианта печати
//
Процедура ИзменитьВариантПечатиПрайсЛистаОрганизация(ОбъектФормы, ДополнительныеПараметры) Экспорт
	
	Если ОбъектФормы.ПечатьПрайсЛиста = ПредопределенноеЗначение("Перечисление.ВариантыПечатиПрайсЛиста.Полотно") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИменаРеквизитовНоменклатуры = Новый Массив(3);
	ИменаРеквизитовНоменклатуры[0] = "Артикул";
	ИменаРеквизитовНоменклатуры[1] = "ПризнакНовинка";
	ИменаРеквизитовНоменклатуры[2] = ?(ОбъектФормы.ПечатьПрайсЛиста = ПредопределенноеЗначение("Перечисление.ВариантыПечатиПрайсЛиста.Диафильм"), "НаименованиеПолное", "Наименование");
	
	Для каждого Строка Из ОбъектФормы.ПредставлениеНоменклатуры Цикл
		
		Строка.Использование = (ИменаРеквизитовНоменклатуры.Найти(Строка.РеквизитНоменклатуры) <> Неопределено);
		
	КонецЦикла;
	
	Если ОбъектФормы.ВидыЦен.Количество() > 1 Тогда
		
		ВидЦенСсылка = ОбъектФормы.ВидыЦен[0].ВидЦен;
		
		ОбъектФормы.ВидыЦен.Очистить();
		НоваяСтрока			= ОбъектФормы.ВидыЦен.Добавить();
		НоваяСтрока.ВидЦен	= ВидЦенСсылка;
		ОбъектФормы.ВидЦен2	= Неопределено;
		
	КонецЕсли;
	
	ОбъектФормы.МаксимальнаяЦена = Ложь;
	ОбъектФормы.МинимальнаяЦена = Ложь;
	Если ОбъектФормы.ПечатьПрайсЛиста = ПредопределенноеЗначение("Перечисление.ВариантыПечатиПрайсЛиста.Диафильм") Тогда
		
		ОбъектФормы.УсловнаяЦена = Ложь;
		ОбъектФормы.УсловнаяЦенаУсловие = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначений.Меньше");
		ОбъектФормы.УсловнаяЦенаЗначение = 0;
		ОбъектФормы.УсловнаяЦенаЗначениеДо = 0;
		
	КонецЕсли;
	
	ОбъектФормы.ПредставлениеОстатков = 1;
	
КонецПроцедуры // ИзменитьВариантПечатиПрайсЛиста()

// Процедура рассчитывает сумму строки табличной части при заполнение по "Цены и валюта".
//
// Параметры:
//  ФормаДокумента - Форма - форма документа.
//  СтрокаТабЧасти - СтрокаТабличнойЧасти - рассчитываемая строка табличной части документа.
//  ОбнулятьАвтоСкидки - Булево - признак обнуления автоматических скидок.
//
Процедура РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабЧасти, ОбнулятьАвтоСкидки = Истина)
	
	Если СтрокаТабЧасти.Свойство("Количество") И СтрокаТабЧасти.Свойство("Цена") Тогда
		СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Количество * СтрокаТабЧасти.Цена;
	КонецЕсли; 
	
	ИспользоватьМинимальныеЦены = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаДокумента, "КэшЗначений")
		И ФормаДокумента.КэшЗначений.Свойство("ИспользоватьМинимальныеЦены")
		И ФормаДокумента.КэшЗначений.ИспользоватьМинимальныеЦены
		И СтрокаТабЧасти.Свойство("МинимальнаяЦена")
		И ЗначениеЗаполнено(СтрокаТабЧасти.МинимальнаяЦена);
	
	Если СтрокаТабЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
		
		СуммаСкидкиНаценки = СтрокаТабЧасти.Количество * СтрокаТабЧасти.Цена * СтрокаТабЧасти.ПроцентСкидкиНаценки / 100;
		
		Если ИспользоватьМинимальныеЦены Тогда
			
			МинимальнаяСумма = СтрокаТабЧасти.Количество * СтрокаТабЧасти.МинимальнаяЦена;
			МаксимальнаяСкидкаСтроки = СтрокаТабЧасти.Сумма - МинимальнаяСумма;
			
			Если СуммаСкидкиНаценки > МаксимальнаяСкидкаСтроки Тогда
				
				СуммаСкидкиНаценки = МаксимальнаяСкидкаСтроки;
				
				ПоказатьОповещениеПользователяОКорректировкеЦены(Новый Структура("СообщениеПользователю", 
					НСтр("ru = 'Размер и сумма скидки были изменены по минимальной цене'"))); 
				
			КонецЕсли;
			
			Если СтрокаТабЧасти.Сумма = МинимальнаяСумма
				ИЛИ СтрокаТабЧасти.Сумма = 0 Тогда
				СтрокаТабЧасти.ПроцентСкидкиНаценки = 0;
			Иначе
				СтрокаТабЧасти.ПроцентСкидкиНаценки = Окр(СуммаСкидкиНаценки * 100/СтрокаТабЧасти.Сумма, 2);
			КонецЕсли;
						
		КонецЕсли;
		
		СтрокаТабЧасти.СуммаСкидкиНаценки = Окр(СуммаСкидкиНаценки, 2);
		СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Сумма - СтрокаТабЧасти.СуммаСкидкиНаценки;
		
	КонецЕсли; 
	
	Если СтрокаТабЧасти.Свойство("СтавкаНДС") Тогда
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабЧасти.СтавкаНДС);
		
		Если ФормаДокумента.Объект.Свойство("СуммаВключаетНДС") Тогда
			
			Если СтрокаТабЧасти.Свойство("Сумма") Тогда
				
				СтрокаТабЧасти.СуммаНДС = ?(
				ФормаДокумента.Объект.СуммаВключаетНДС, 
				СтрокаТабЧасти.Сумма - (СтрокаТабЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
				СтрокаТабЧасти.Сумма * СтавкаНДС / 100);
				СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + ?(ФормаДокумента.Объект.СуммаВключаетНДС, 0, СтрокаТабЧасти.СуммаНДС);
				
			Иначе
				
				БазаРасчетаНДС = СтрокаТабЧасти.ТаможеннаяСтоимость + СтрокаТабЧасти.СуммаПошлины;
				
				СтрокаТабЧасти.СуммаНДС = ?(
				ФормаДокумента.Объект.СуммаВключаетНДС, 
				БазаРасчетаНДС - (БазаРасчетаНДС) / ((СтавкаНДС + 100) / 100),
				БазаРасчетаНДС * СтавкаНДС / 100);
				
			КонецЕсли;
			
		Иначе
			
			СтрокаТабЧасти.СуммаНДС = СтрокаТабЧасти.Сумма * СтавкаНДС / 100;
			СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + СтрокаТабЧасти.СуммаНДС;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// АвтоматическиеСкидки
	Если ОбнулятьАвтоСкидки Тогда
		Если СтрокаТабЧасти.Свойство("ПроцентАвтоматическойСкидки") Тогда
			СтрокаТабЧасти.ПроцентАвтоматическойСкидки = 0;
			СтрокаТабЧасти.СуммаАвтоматическойСкидки = 0;
		КонецЕсли;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

#КонецОбласти