
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийДокументов

// Вызывается при вводе документа (Уведомление об остатках, Уведомление о ввозе, 
// Уведомление о перемещении) на основании,
// при выполнении метода Заполнить или при интерактивном вводе нового.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - заполняемый документ,
//  ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//  ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		ДокументОбъект.Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ПрослеживаемостьУНФ.ЗаполнитьПоСтруктуре(ДокументОбъект, ДанныеЗаполнения, МетаданныеДокумента);
	КонецЕсли;   	
	
КонецПроцедуры

// Предоставляет возможность переопределить обработку заполнения документа "Уведомление о перемещении"
//
// Параметры:
//  УведомлениеОбъект    - ДокументОбъект.УведомлениеОперемещенииПрослеживаемыхТоваров - документ, для которого
//                                                                                        выполняется заполнение.
//  ДанныеЗаполнения - Произвольный - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//  ТекстЗаполнения - Строка - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//  СтандартнаяОбработка - Булево - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполненияУведомленияОПеремещении(УведомлениеОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) 
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("Структура")  Тогда
		Возврат;
	КонецЕсли;
	
	ПрослеживаемостьБРУ.ЗаполнитьУведомлениеОПеремещенииПрослеживаемыхТоваров(
		УведомлениеОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		
	ОбработкаЗаполненияДокумента(УведомлениеОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		
КонецПроцедуры

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме,
// а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  ПроверяемыеРеквизиты - Массив - массив путей к реквизитам, для которых будет выполнена проверка заполнения,
//  МассивНепроверяемыхРеквизитов - Массив - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура обработки проведения документов 
// "Уведомление об остатках прослеживаемых товаров" и "Уведомление о ввозе прослеживаемых товаров"
// 
// Параметры:
//  ПараметрыПроведения - Структура таблиц см. Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров.ПодготовитьПараметрыПроведения и 
//                        Документы.УведомлениеОВвозеПрослеживаемыхТоваров.ПодготовитьПараметрыПроведения
//  Движения - ссылка на движения документа
//  Отказ - Булево - признак отказа от записи
//
Процедура ОбработкаПроведенияУведомление(ПараметрыПроведения, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыТаблицыРегистрацииПрослеживаемыхТоваров(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоваров);
	Реквизиты = Параметры.Реквизиты[0];
	
	РегистрыСведений.РегистрацияПрослеживаемыхТоваров.ОбновитьСостояние(Реквизиты.Регистратор, Реквизиты.Основание);  
	
	ПрослеживаемостьУНФ.ОбработкаПроведенияУведомления(Параметры, Движения, Отказ);
			
КонецПроцедуры

// Переопределяемая процедура обработки удаления проведения документов
// "Уведомление об остатках прослеживаемых товаров" и "Уведомление о ввозе прослеживаемых товаров"
// 
// Параметры:
//  Регистратор - ДокументСсылка - документ регистратор
//  Основание - ДокументСсылка - основание регистратора
//
Процедура ОбработкаУдаленияПроведенияУведомление(Регистратор, Основание) Экспорт
	
	РегистрыСведений.РегистрацияПрослеживаемыхТоваров.ОбновитьСостояние(Регистратор, Основание, Истина);
	
КонецПроцедуры

// Переопределяемая процедура обработки проведения документа Уведомление о перемещении
// 
// Параметры:
//  ПараметрыПроведения - Структура таблиц см. Документы.УведомлениеОПеремещении.ПодготовитьПараметрыПроведения
//  Движения - ссылка на движения документа
//  Отказ - Булево - признак отказа от записи
//
Процедура ОбработкаПроведенияУведомлениеОПеремещении(ПараметрыПроведения, Движения, Отказ) Экспорт
	
	
КонецПроцедуры

// Возникает перед выполнением записи документа (Уведомление об остатках, Уведомление о ввозе, 
// Уведомление о перемещении). Вызывается после начала транзакции записи, но до начала записи документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - записываемый документ,
//  Отказ - Булево - признак отказа от записи,
//  РежимЗаписи - РежимЗаписиДокумента - текущий режим записи документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияПрослеживаемогоТовара

// Функция возвращает параметры документа основания
// 
// Параметры:
// ДокументОснования - ДокументСсылка - документ основание
//
// Возвращаемое значение:
// - Структура - параметры документа
//
//
Функция ПолучитьПараметрыДокументаОснования(ДокументОснования) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснования, "Дата, Организация, СтруктурнаяЕдиница");
	
КонецФункции

// Проверяет необходимость обновления регистра сведений Регистрация прослеживаемого товара
//
// Параметры:
// ДокументОснование - ДокументСсылка - Документ, по которому будет формироваться запись в регистре и расчет остатка 
// Период - Дата - Дата документа основания
// 
// Возвращаемое значение:
// Булево - Истина если не надо обновлять запись в регистре
//
Функция НеОбновлятьСостояние(ДокументОснование, Период) Экспорт
	
	Если Не ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Период) Тогда
		
		// Очистим регистр по основанию, если пользователь поменял дату документа основания 
		// и дата не попадает в период ведения прослеживаемости
		Набор = РегистрыСведений.РегистрацияПрослеживаемыхТоваров.СоздатьНаборЗаписей();
		Набор.Отбор.Основание.Установить(ДокументОснование);
		Набор.Записать(Истина);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
		
		// Не обновляем состояния инвентаризаций товаров с датой больше разрешенной даты
		Возврат Период > ПрослеживаемостьБРУ.ДатаОкончанияРегистрацииУведомленийОбОСтатках();
			
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Считает количество товара по которому необходимо сделать запись в регистре Регистрация прослеживаемого товара
//
// Параметры:
// ДокументОснование - ДокументСсылка - Документ, по которому будет формироваться запись в регистре и расчет остатка 
// ПараметрыДокументаОснования - Структура - 
//												Дата - Дата - дата документа основания
//							 					Организация - СправочникСсылка.Организация - организация 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица готовых записей в регистр Регистрация прослеживаемого товара
//
Функция ПолучитьТаблицуДляОбновленияРегистрацииПрослеживаемогоТовара(ДокументРегистратор, ДокументОснование, УдалениеПроведения, ПараметрыДокументаОснования) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	Запрос.УстановитьПараметр("НачалоПериода", ПрослеживаемостьБРУ.ДатаНачалаУчетаПрослеживаемыхТоваров());
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыДокументаОснования.Дата);
	Запрос.УстановитьПараметр("ПустаяСсылкаРнпт", Справочники.НомераГТД.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация", ПараметрыДокументаОснования.Организация);
	Запрос.УстановитьПараметр("ДокументИсключение",
		?(УдалениеПроведения, ДокументРегистратор, Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров.ПустаяСсылка()));
	
	Запрос.Текст = ТекстЗапросаПоОснованию(ДокументОснование, ПараметрыДокументаОснования)
				+ ТекстЗапросаПоУведомлениямИВычислениюОстатка();
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

#Конецобласти

#Область Уведомления

// Формирует и возвращает текст запроса для выборки данных
// необходимых для формирования движений документа
//
// Параметры:
//  НомераТаблиц - Число - Структура с таблицами параметров проведения
// 
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаТаблицаТоваров(НомераТаблиц, ДокументСсылка) Экспорт
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	ИмяВидаДокумента = МетаданныеДокумента.Имя;
	
	НомераТаблиц.Вставить("ТаблицаТоваров", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Уведомление.Ссылка КАК Ссылка,
	|	Уведомление.НомерСтроки КАК НомерСтроки,
	|	Уведомление.Номенклатура КАК Номенклатура,
	|	Уведомление.Характеристика КАК Характеристика,
    |	Уведомление.Партия КАК Партия,
	|	Уведомление.Количество КАК Количество,
	|	Уведомление.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	Уведомление.Сумма КАК Сумма,
	|	Уведомление.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ." + ИмяВидаДокумента + ".Товары КАК Уведомление
	|ГДЕ
	|	Уведомление.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

// Формирует и возвращает текст запроса для выборки данных
// необходимых для формирования движений документа
//
// Параметры:
//  НомераТаблиц - Число - Структура с таблицами параметров проведения
// 
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаТаблицаТоваровУведомлениеОбОстатках(НомераТаблиц, ДокументСсылка) Экспорт
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	ИмяВидаДокумента = МетаданныеДокумента.Имя;
	
	НомераТаблиц.Вставить("ТаблицаТоваров", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Уведомление.Ссылка КАК Ссылка,
	|	Уведомление.НомерСтроки КАК НомерСтроки,
	|	Уведомление.Номенклатура КАК Номенклатура,
	|	Уведомление.Количество КАК Количество,
	|	Уведомление.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	Уведомление.Сумма КАК Сумма,
	|	Уведомление.СтранаПроисхождения КАК СтранаПроисхождения,
	|	Уведомление.Характеристика КАК Характеристика,
	|	Уведомление.Партия КАК Партия
	|ИЗ
	|	Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.Товары КАК Уведомление
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО Уведомление.Ссылка = Реквизиты.Ссылка
	|ГДЕ
	|	Уведомление.Ссылка = &Ссылка
	|	И НЕ Реквизиты.ЭтоКорректировочноеУведомление
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировочноеУведомление.Ссылка,
	|	КорректировочноеУведомление.НомерСтроки,
	|	КорректировочноеУведомление.Номенклатура,
	|	-КорректировочноеУведомление.Количество,
	|	-КорректировочноеУведомление.КоличествоПрослеживаемости,
	|	-КорректировочноеУведомление.Сумма,
	|	КорректировочноеУведомление.СтранаПроисхождения,
	|	КорректировочноеУведомление.Характеристика,
	|	КорректировочноеУведомление.Партия
	|ИЗ
	|	Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.Товары КАК КорректировочноеУведомление
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО КорректировочноеУведомление.Ссылка = Реквизиты.Ссылка
	|ГДЕ
	|	КорректировочноеУведомление.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА Реквизиты.ЭтоКорректировочноеУведомление
	|				ТОГДА Реквизиты.ПолученоПодтверждениеИзФНС
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И (КорректировочноеУведомление.Количество <> КорректировочноеУведомление.КоличествоПослеИзменения
	|			ИЛИ КорректировочноеУведомление.КоличествоПрослеживаемости <> КорректировочноеУведомление.КоличествоПрослеживаемостиПослеИзменения
	|			ИЛИ КорректировочноеУведомление.Сумма <> КорректировочноеУведомление.СуммаПослеИзменения
	|			ИЛИ КорректировочноеУведомление.СтранаПроисхождения <> КорректировочноеУведомление.СтранаПроисхожденияПослеИзменения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировочноеУведомление.Ссылка,
	|	КорректировочноеУведомление.НомерСтроки,
	|	КорректировочноеУведомление.Номенклатура,
	|	КорректировочноеУведомление.КоличествоПослеИзменения,
	|	КорректировочноеУведомление.КоличествоПрослеживаемостиПослеИзменения,
	|	КорректировочноеУведомление.СуммаПослеИзменения,
	|	КорректировочноеУведомление.СтранаПроисхожденияПослеИзменения,
	|	КорректировочноеУведомление.Характеристика,
	|	КорректировочноеУведомление.Партия
	|ИЗ
	|	Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.Товары КАК КорректировочноеУведомление
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО КорректировочноеУведомление.Ссылка = Реквизиты.Ссылка
	|ГДЕ
	|	КорректировочноеУведомление.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА Реквизиты.ЭтоКорректировочноеУведомление
	|				ТОГДА Реквизиты.ПолученоПодтверждениеИзФНС
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И (КорректировочноеУведомление.Количество <> КорректировочноеУведомление.КоличествоПослеИзменения
	|			ИЛИ КорректировочноеУведомление.КоличествоПрослеживаемости <> КорректировочноеУведомление.КоличествоПрослеживаемостиПослеИзменения
	|			ИЛИ КорректировочноеУведомление.Сумма <> КорректировочноеУведомление.СуммаПослеИзменения
	|			ИЛИ КорректировочноеУведомление.СтранаПроисхождения <> КорректировочноеУведомление.СтранаПроисхожденияПослеИзменения)";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

// Формирует и возвращает текст запроса для выборки данных
// необходимых для формирования движений документа Уведомление о перемещении
//
// Параметры:
//  НомераТаблиц - Число - Структура с таблицами параметров проведения
// 
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаТаблицаТоваровУведомлениеОПеремещении(НомераТаблиц, ДокументСсылка) Экспорт
	
	НомераТаблиц.Вставить("ТаблицаТоваров", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Ссылка КАК Ссылка,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Номенклатура КАК Номенклатура,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Количество КАК Количество,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Сумма КАК Сумма,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.РНПТ КАК РНПТ,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.ПорядковыйНомер КАК ПорядковыйНомер,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровКонтрагенты.Контрагент КАК Контрагент,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.СопроводительныйДокумент КАК СопроводительныйДокумент,
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.УведомлениеОПеремещенииПрослеживаемыхТоваров.Товары КАК УведомлениеОПеремещенииПрослеживаемыхТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОПеремещенииПрослеживаемыхТоваров.Контрагенты КАК УведомлениеОПеремещенииПрослеживаемыхТоваровКонтрагенты
	|		ПО УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Ссылка = УведомлениеОПеремещенииПрослеживаемыхТоваровКонтрагенты.Ссылка
	|			И УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.КлючСтроки = УведомлениеОПеремещенииПрослеживаемыхТоваровКонтрагенты.КлючСтроки
	|ГДЕ
	|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

//Переопределяемые дополнительные параметры
//
// Параметры:
//  НомераТаблиц - ТаблицаЗначений - структура таблиц параметров проведения
//  Запрос - Запрос - запрос параметров проведения
//
Процедура ДополнительныеПараметрыЗапроса(НомераТаблиц, Запрос) Экспорт
	
	
КонецПроцедуры

// Формирует текст запроса по таблице товаров
// документа УведомлениеОбОстаткахПрослеживаемыхТоваров
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаПоТаблицеТоваровУведомленияОбОстатках() Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Номенклатура КАК Справочник.Номенклатура).Наименование КАК НаименованиеТовара,
		|	"""" КАК КодОКПД2,
		|	ВЫРАЗИТЬ(УведомлениеОбОстаткахПрослеживаемыхТоваров.ЕдиницаИзмерения КАК Справочник.КлассификаторЕдиницИзмерения).Код КАК ЕдиницаИзмерения,
		|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Количество КАК Количество,
		|	ВЫРАЗИТЬ(УведомлениеОбОстаткахПрослеживаемыхТоваров.ЕдиницаПрослеживаемости КАК Справочник.КлассификаторЕдиницИзмерения).Код КАК ЕдиницаПрослеживаемости,
		|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
		|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Сумма КАК Сумма,
		|	УведомлениеОбОстаткахПрослеживаемыхТоваров.ПервичныйДокумент КАК ПервичныйДокумент,
		|	ВЫРАЗИТЬ(УведомлениеОбОстаткахПрослеживаемыхТоваров.КодТНВЭД КАК Справочник.КлассификаторТНВЭД).Код КАК КодТНВЭД,
		|	ВЫРАЗИТЬ(УведомлениеОбОстаткахПрослеживаемыхТоваров.КодТНВЭД КАК Справочник.КлассификаторТНВЭД).Наименование КАК ТНВЭДНаименование,
		|	УведомлениеОбОстаткахПрослеживаемыхТоваров.ПервичныйДокумент.Номер КАК НомерПервичногоДокумента,
		|	УведомлениеОбОстаткахПрослеживаемыхТоваров.ПервичныйДокумент.Дата КАК ДатаПервичногоДокумента,
		|	"""" КАК РНПТ
		|ПОМЕСТИТЬ ВТ_ВыборкаДанных
		|ИЗ
		|	Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.Товары КАК УведомлениеОбОстаткахПрослеживаемыхТоваровТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров КАК УведомлениеОбОстаткахПрослеживаемыхТоваров
		|		ПО УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Ссылка = УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка
		|ГДЕ
		|	УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка = &Документ
		|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.НомерКорректировки = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Номенклатура КАК Справочник.Номенклатура).Наименование,
		|	"""",
		|	ВЫРАЗИТЬ(УведомлениеОбОстаткахПрослеживаемыхТоваров.ЕдиницаИзмеренияПослеИзменения КАК Справочник.КлассификаторЕдиницИзмерения).Код,
		|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.КоличествоПослеИзменения,
		|	ВЫРАЗИТЬ(УведомлениеОбОстаткахПрослеживаемыхТоваров.ЕдиницаПрослеживаемости КАК Справочник.КлассификаторЕдиницИзмерения).Код,
		|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.КоличествоПрослеживаемостиПослеИзменения,
		|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.СуммаПослеИзменения,
		|	УведомлениеОбОстаткахПрослеживаемыхТоваров.ПервичныйДокумент,
		|	ВЫРАЗИТЬ(УведомлениеОбОстаткахПрослеживаемыхТоваров.КодТНВЭДПослеИзменения КАК Справочник.КлассификаторТНВЭД).Код,
		|	ВЫРАЗИТЬ(УведомлениеОбОстаткахПрослеживаемыхТоваров.КодТНВЭДПослеИзменения КАК Справочник.КлассификаторТНВЭД).Наименование,
		|	УведомлениеОбОстаткахПрослеживаемыхТоваров.ПервичныйДокумент.Номер,
		|	УведомлениеОбОстаткахПрослеживаемыхТоваров.ПервичныйДокумент.Дата,
		|	УведомлениеОбОстаткахПрослеживаемыхТоваров.РНПТ
		|ИЗ
		|	Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.Товары КАК УведомлениеОбОстаткахПрослеживаемыхТоваровТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров КАК УведомлениеОбОстаткахПрослеживаемыхТоваров
		|		ПО УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Ссылка = УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка
		|ГДЕ
		|	УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка = &Документ
		|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.НомерКорректировки > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(1) КАК Количество,
		|	ВТ_ВыборкаДанных.КодТНВЭД КАК КодТНВЭД
		|ПОМЕСТИТЬ ВТ_КоличествоСтрок
		|ИЗ
		|	ВТ_ВыборкаДанных КАК ВТ_ВыборкаДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВыборкаДанных.КодТНВЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВТ_КоличествоСтрок.Количество > 1
		|			ТОГДА ВТ_ВыборкаДанных.ТНВЭДНаименование
		|		ИНАЧЕ ВТ_ВыборкаДанных.НаименованиеТовара
		|	КОНЕЦ КАК НаимТовДок,
		|	ВТ_ВыборкаДанных.КодОКПД2 КАК КодОКПД2,
		|	ВТ_ВыборкаДанных.ЕдиницаИзмерения КАК ЕдинИзмерДок,
		|	СУММА(ВТ_ВыборкаДанных.Количество) КАК КолТоварДок,
		|	ВТ_ВыборкаДанных.ЕдиницаПрослеживаемости КАК ЕдинИзмерПер,
		|	СУММА(ВТ_ВыборкаДанных.КоличествоПрослеживаемости) КАК КоличТоварПер,
		|	СУММА(ВТ_ВыборкаДанных.Сумма) КАК СтТоварБезНДС,
		|	ВТ_ВыборкаДанных.КодТНВЭД КАК КодТНВЭД,
		|	ВТ_ВыборкаДанных.НомерПервичногоДокумента КАК НомПервичДок,
		|	ВТ_ВыборкаДанных.ДатаПервичногоДокумента КАК ДатаПервичДок,
		|	ВТ_ВыборкаДанных.РНПТ КАК РегНомерТов
		|ИЗ
		|	ВТ_ВыборкаДанных КАК ВТ_ВыборкаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоСтрок КАК ВТ_КоличествоСтрок
		|		ПО ВТ_ВыборкаДанных.КодТНВЭД = ВТ_КоличествоСтрок.КодТНВЭД
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВыборкаДанных.КодОКПД2,
		|	ВТ_ВыборкаДанных.ЕдиницаИзмерения,
		|	ВТ_ВыборкаДанных.ЕдиницаПрослеживаемости,
		|	ВЫБОР
		|		КОГДА ВТ_КоличествоСтрок.Количество > 1
		|			ТОГДА ВТ_ВыборкаДанных.ТНВЭДНаименование
		|		ИНАЧЕ ВТ_ВыборкаДанных.НаименованиеТовара
		|	КОНЕЦ,
		|	ВТ_ВыборкаДанных.КодТНВЭД,
		|	ВТ_ВыборкаДанных.ДатаПервичногоДокумента,
		|	ВТ_ВыборкаДанных.НомерПервичногоДокумента,
		|	ВТ_ВыборкаДанных.РНПТ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса по таблице товаров
// документа УведомлениеОВвозеПрослеживаемыхТоваров
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаПоТаблицеТоваровУведомленияОВвозе() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(УведомлениеОВвозеПрослеживаемыхТоваровТовары.Номенклатура КАК Справочник.Номенклатура).Наименование КАК НаименованиеТовара,
	|	"""" КАК КодОКПД2,
	|	ВЫРАЗИТЬ(УведомлениеОВвозеПрослеживаемыхТоваров.ЕдиницаИзмерения КАК Справочник.КлассификаторЕдиницИзмерения).Код КАК ЕдиницаИзмерения,
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Количество КАК Количество,
	|	ВЫРАЗИТЬ(УведомлениеОВвозеПрослеживаемыхТоваров.ЕдиницаПрослеживаемости КАК Справочник.КлассификаторЕдиницИзмерения).Код КАК ЕдиницаПрослеживаемости,
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Сумма КАК Сумма,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.ПервичныйДокумент КАК ПервичныйДокумент,
	|	ВЫРАЗИТЬ(УведомлениеОВвозеПрослеживаемыхТоваров.КодТНВЭД КАК Справочник.КлассификаторТНВЭД).Код КАК КодТНВЭД,
	|	ВЫРАЗИТЬ(УведомлениеОВвозеПрослеживаемыхТоваров.КодТНВЭД КАК Справочник.КлассификаторТНВЭД).Наименование КАК ТНВЭДНаименование,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Номер КАК НомерСопроводительногоДокумента,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Дата КАК ДатаСопроводительногоДокумента,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.РНПТ КАК РНПТ
	|ПОМЕСТИТЬ ВТ_ВыборкаДанных
	|ИЗ
	|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров.Товары КАК УведомлениеОВвозеПрослеживаемыхТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОВвозеПрослеживаемыхТоваров КАК УведомлениеОВвозеПрослеживаемыхТоваров
	|		ПО УведомлениеОВвозеПрослеживаемыхТоваровТовары.Ссылка = УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка
	|ГДЕ
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(1) КАК Количество,
	|	ВТ_ВыборкаДанных.КодТНВЭД КАК КодТНВЭД
	|ПОМЕСТИТЬ ВТ_КоличествоСтрок
	|ИЗ
	|	ВТ_ВыборкаДанных КАК ВТ_ВыборкаДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ВыборкаДанных.КодТНВЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_КоличествоСтрок.Количество > 1
	|			ТОГДА ВТ_ВыборкаДанных.ТНВЭДНаименование
	|		ИНАЧЕ ВТ_ВыборкаДанных.НаименованиеТовара
	|	КОНЕЦ КАК НаимТовДок,
	|	ВТ_ВыборкаДанных.КодОКПД2 КАК КодОКПД2,
	|	ВТ_ВыборкаДанных.ЕдиницаИзмерения КАК ЕдинИзмерДок,
	|	СУММА(ВТ_ВыборкаДанных.Количество) КАК КолТоварДок,
	|	ВТ_ВыборкаДанных.ЕдиницаПрослеживаемости КАК ЕдинИзмерПрослеж,
	|	СУММА(ВТ_ВыборкаДанных.КоличествоПрослеживаемости) КАК КоличТоварПрослеж,
	|	СУММА(ВТ_ВыборкаДанных.Сумма) КАК СтТоварБезНДС,
	|	ВТ_ВыборкаДанных.КодТНВЭД КАК КодТНВЭД,
	|	ВТ_ВыборкаДанных.НомерСопроводительногоДокумента КАК НомСопрДок,
	|	ВТ_ВыборкаДанных.ДатаСопроводительногоДокумента КАК ДатаСопрДок,
	|	ВТ_ВыборкаДанных.РНПТ КАК РНПТ
	|ИЗ
	|	ВТ_ВыборкаДанных КАК ВТ_ВыборкаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоСтрок КАК ВТ_КоличествоСтрок
	|		ПО ВТ_ВыборкаДанных.КодТНВЭД = ВТ_КоличествоСтрок.КодТНВЭД
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ВыборкаДанных.КодОКПД2,
	|	ВТ_ВыборкаДанных.ЕдиницаИзмерения,
	|	ВТ_ВыборкаДанных.ЕдиницаПрослеживаемости,
	|	ВЫБОР
	|		КОГДА ВТ_КоличествоСтрок.Количество > 1
	|			ТОГДА ВТ_ВыборкаДанных.ТНВЭДНаименование
	|		ИНАЧЕ ВТ_ВыборкаДанных.НаименованиеТовара
	|	КОНЕЦ,
	|	ВТ_ВыборкаДанных.КодТНВЭД,
	|	ВТ_ВыборкаДанных.ДатаСопроводительногоДокумента,
	|	ВТ_ВыборкаДанных.НомерСопроводительногоДокумента,
	|	ВТ_ВыборкаДанных.РНПТ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса по таблице товаров
// документа УведомлениеОПеремещенииПрослеживаемыхТоваров
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаПоТаблицамУведомленияОПеремещенииПрослеживаемыхТоваров() Экспорт
	
	ТекстЗапроса =
"ВЫБРАТЬ
|	УведомлениеОПеремещенииПрослеживаемыхТоваровКонтрагенты.Контрагент КАК Контрагент,
|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.СопроводительныйДокумент КАК СопроводительныйДокумент,
|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.НомерСтроки КАК ПорядковыйНомер,
|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Номенклатура КАК Номенклатура,
|	МАКСИМУМ(УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Номенклатура.Наименование) КАК НоменклатураНаименование,
|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.КодТНВЭД КАК КодТНВЭД,
|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.ЕдиницаПрослеживаемости КАК ЕдиницаПрослеживаемости,
|	МАКСИМУМ(УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Количество) КАК Количество,
|	МАКСИМУМ(УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.КоличествоПрослеживаемости) КАК КоличествоПрослеживаемости,
|	МАКСИМУМ(УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Сумма) КАК Сумма,
|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.РНПТ КАК РНПТ,
|	МАКСИМУМ(УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.СопроводительныйДокумент.Номер) КАК НомерСопроводительногоДокумента,
|	МАКСИМУМ(УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.СопроводительныйДокумент.Дата) КАК ДатаСопроводительногоДокумента,
|	МАКСИМУМ(УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.КодТНВЭД.Код) КАК КодТНВЭДКод,
|	МАКСИМУМ(УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.ЕдиницаИзмерения.Код) КАК ЕдиницаИзмеренияКод,
|	МАКСИМУМ(УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.ЕдиницаПрослеживаемости.Код) КАК ЕдиницаПрослеживаемостиКод,
|	МАКСИМУМ(УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.РНПТ.Код) КАК РНПТКод
|ИЗ
|	Документ.УведомлениеОПеремещенииПрослеживаемыхТоваров.Контрагенты КАК УведомлениеОПеремещенииПрослеживаемыхТоваровКонтрагенты
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОПеремещенииПрослеживаемыхТоваров.Товары КАК УведомлениеОПеремещенииПрослеживаемыхТоваровТовары
|		ПО УведомлениеОПеремещенииПрослеживаемыхТоваровКонтрагенты.Ссылка = УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Ссылка
|			И УведомлениеОПеремещенииПрослеживаемыхТоваровКонтрагенты.КлючСтроки = УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.КлючСтроки
|ГДЕ
|	УведомлениеОПеремещенииПрослеживаемыхТоваровКонтрагенты.Ссылка = &Документ
|
|СГРУППИРОВАТЬ ПО
|	УведомлениеОПеремещенииПрослеживаемыхТоваровКонтрагенты.Контрагент,
|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.СопроводительныйДокумент,
|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.НомерСтроки,
|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.Номенклатура,
|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.КодТНВЭД,
|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.ЕдиницаИзмерения,
|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.ЕдиницаПрослеживаемости,
|	УведомлениеОПеремещенииПрослеживаемыхТоваровТовары.РНПТ
|
|УПОРЯДОЧИТЬ ПО
|	НомерСопроводительногоДокумента,
|	ПорядковыйНомер
|ИТОГИ ПО
|	Контрагент,
|	СопроводительныйДокумент,
|	ПорядковыйНомер";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует данные по контрагенту
// документа УведомлениеОПеремещенииПрослеживаемыхТоваров
//
// Возвращаемое значение:
//  Строка - текст запроса
//
// Формирует структуру данных контрагента, необходимых для печати
// Уведомления о перемещении прослеживаемых товаров
//
// Параметры:
// Контрагент - СправочникСсылка.Контрагенты - Контрагент 
// 
// Возвращаемое значение:
//    Структура:
//		Признак - Строка - Признак физического лица, возможны значения: "V" - физ. лицо; "" - организация.
//		КодГосударства - Строка - Код государства-члена ЕАЭС по ОКСМ (3 цифры).
//		Наименование - Строка - Наименование организации (1 - 1000 символов).
//		Фамилия - Строка - Фамилия физического лица (1 - 60 символов).
//		Имя - Строка - Имя физического лица (1 - 60 символов).
//		Отчетсво - -  Отчество физического лица (1 - 60 символов).
//		ИдентификационныйКод - Строка -  Идентификационный код (номер) в государстве-члене ЕАЭС (8 - 14 символов).
//		Адрес - Строка - Адрес (Строка: 1 - 1000 символов).
//
// Формирует данные по контрагенту
// документа УведомлениеОПеремещенииПрослеживаемыхТоваров
//
// Возвращаемое значение:
//  Строка - текст запроса
//
// Формирует структуру данных контрагента, необходимых для печати
// Уведомления о перемещении прослеживаемых товаров
//
// Параметры:
// Контрагент - СправочникСсылка.Контрагенты - Контрагент 
// 
// Возвращаемое значение:
//    Структура:
//		Признак - Строка - Признак физического лица, возможны значения: "V" - физ. лицо; "" - организация.
//		КодГосударства - Строка - Код государства-члена ЕАЭС по ОКСМ (3 цифры).
//		Наименование - Строка - Наименование организации (1 - 1000 символов).
//		Фамилия - Строка - Фамилия физического лица (1 - 60 символов).
//		Имя - Строка - Имя физического лица (1 - 60 символов).
//		Отчетсво - -  Отчество физического лица (1 - 60 символов).
//		ИдентификационныйКод - Строка -  Идентификационный код (номер) в государстве-члене ЕАЭС (8 - 14 символов).
//		Адрес - Строка - Адрес (Строка: 1 - 1000 символов).
//
Функция РеквизитыКонтрагента(Контрагент) Экспорт
	
	Реквизиты = Новый Структура("Признак,КодГосударства,Наименование,Фамилия,Имя,Отчетсво,ИдентификационныйКод,Адрес",
	"","","","","","","","");
	
	ЭтоФизическоеЛицо = Контрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо
	И НЕ ЗначениеЗаполнено(Контрагент.ИНН);
	
	ДанныеКонтрагента = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Контрагент, ТекущаяДата());
	
	Если ЭтоФизическоеЛицо Тогда
		
		ЧастиФИО= ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеКонтрагента.ПолноеНаименование);
		
		Реквизиты["Признак"] = "V";
		Реквизиты["Фамилия"] = ЧастиФИО.Фамилия;
		Реквизиты["Имя"] = ЧастиФИО.Имя;
		Реквизиты["Отчетсво"] = ЧастиФИО.Отчество;
		
	Иначе
		
		Реквизиты["Наименование"] = ДанныеКонтрагента.ПолноеНаименование;
		
	КонецЕсли;
	
	Реквизиты["КодГосударства"] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
	ДанныеКонтрагента.СтранаРегистрации, "Код");
	
	Реквизиты["ИдентификационныйКод"] = ДанныеКонтрагента.РегистрационныйНомер;
	
	Реквизиты["Адрес"] = ДанныеКонтрагента.ЮридическийАдрес;
	
	Возврат Реквизиты;
		
КонецФункции

// Формирует данные многострочной строки по таблице товаров
// документа УведомлениеОПеремещенииПрослеживаемыхТоваров
//
// Возвращаемое значение:
//  Структура:
//			- НомерПоПорядкуТоваров - Число  - графа 1 (0 - 999)
//			- НаименованиеСопроводительногоДокумента - Строка - графа 2 (1 - 255 символов)
//			- НомерСопроводительногоДокумента - Строка - графа 3 (1 - 255 символов)
//			- ДатаСопроводительногоДокумента - Дата   - графа 4.
//			- КодТНВЭД - Строка - графа 6 (6 - 10 символов)
//			- ПорядковыйНомерСопроводительногоДокумента - Число - графа 7 (0 - 9999)
//			- НаименованиеТовара - Строка - графа 8 (1 - 255 символов)
//			- Количество - Число  - графа 9 (0 - 9999999999999.999999)
//			- КодЕдиницаИзмерения - Строка - графа 10 (3 - 4 цифры)
//			- КоличествоПрослеживаемости - Число  - графа 11 (0 - 999999999999999.99999999999)
//			- ЕдиницаПрослеживаемости - Строка - графа 12 (3 - 4 цифры)
//			- РНПТ - Строка - графа 13 (27 - 29 смволов)
//			- АдресДоставки - Строка - графа 14 (1 - 255 символов)
//			- СуммаБезНДС - Число  - графа 15 (0 - 99999999999999999.99)
//
Функция ПолучитьДанныеСтрокиВыборки(ВыборкаНомерСтроки) Экспорт
	
	ДанныеСтроки = Новый Структура();
	
	НаименованиеСопроводительногоДокумента = "";
	АдресДоставки = "";
	
	Если ТипЗНЧ(ВыборкаНомерСтроки.СопроводительныйДокумент) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		НаименованиеСопроводительногоДокумента = "Накладная";
		
		АдресДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ВыборкаНомерСтроки.СопроводительныйДокумент, "АдресДоставки");
			
	КонецЕсли;
		
	ДанныеСтроки.Вставить("НаименованиеСопроводительногоДокумента", НаименованиеСопроводительногоДокумента);
	ДанныеСтроки.Вставить("НомерСопроводительногоДокумента", ВыборкаНомерСтроки.НомерСопроводительногоДокумента);
	ДанныеСтроки.Вставить("ДатаСопроводительногоДокумента", ВыборкаНомерСтроки.ДатаСопроводительногоДокумента);
	
	ДанныеСтроки.Вставить("КодТНВЭД", ВыборкаНомерСтроки.КодТНВЭДКод);
	ДанныеСтроки.Вставить("ПорядковыйНомерВСопроводительномДокументе", ВыборкаНомерСтроки.ПорядковыйНомер);
	ДанныеСтроки.Вставить("НаименованиеТовара", ВыборкаНомерСтроки.НоменклатураНаименование);
	ДанныеСтроки.Вставить("Количество", ВыборкаНомерСтроки.Количество);
	ДанныеСтроки.Вставить("КодЕдиницаИзмерения", ВыборкаНомерСтроки.ЕдиницаИзмеренияКод);
	ДанныеСтроки.Вставить("КоличествоПрослеживаемости", ВыборкаНомерСтроки.КоличествоПрослеживаемости);
	ДанныеСтроки.Вставить("ЕдиницаПрослеживаемости", ВыборкаНомерСтроки.ЕдиницаПрослеживаемостиКод);
	ДанныеСтроки.Вставить("РНПТ", ВыборкаНомерСтроки.РНПТКод);
	ДанныеСтроки.Вставить("СуммаБезНДС", ВыборкаНомерСтроки.Сумма);
	
	ДанныеСтроки.Вставить("АдресДоставки", АдресДоставки);
	
	Возврат ДанныеСтроки;
	
КонецФункции

// Определяет код государственного органа, администрирующего деятельность организации
//
// Параметры:
//  Организация					 - СправочникСсылка.Организации, СправочникОбъект.Организации - администрируемая организация
// 
// Возвращаемое значение:
//  Строка - значащая часть кода государственного органа, заданного в информационной базе
//
Функция КодГосударственногоОрганаОрганизации(Организация) Экспорт
	
	Возврат ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(
			Организация,
			Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган);
	
		КонецФункции
		
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыНакопления.ПрослеживаемыеТоварыОтгруженныеВЕАЭС, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ОперацииСПрослеживаемымиТоварами, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РегистрацияПрослеживаемыхТоваров, Истина);
	
КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к проведению документа.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 3. Устанавливает активность наборам записей документов с установленным флагом ручной корректировки
// 4. Записывает пустые наборы, если дата ранее проведенного документа была сдвинута вперед
// Вызывается из модуля документа при проведении.
//
Процедура ПодготовитьНаборыЗаписейКПроведению(Объект) Экспорт
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Объект.Ссылка, Объект.ДополнительныеСвойства);
	//	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект);
	
КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к отмене проведения документа.
// 1. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 2. Снимает активность у наборов записей документов с установленным флагом ручной корректировки
// Вызывается из модуля документа при отмене проведения.
//
Процедура ПодготовитьНаборыЗаписейКОтменеПроведения(Объект) Экспорт
	
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Объект.Ссылка, Объект.ДополнительныеСвойства);
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект);
	
КонецПроцедуры

// Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  Период - дата, на которую выбираются сведения о ЮрФизЛице.
//  БанковскийСчет - банковский счет, реквизиты которого выводятся.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  БанковскийСчет - банковский счет, реквизиты которого выводятся.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, Период = '20300101') Экспорт
	
	СведенияОЛице = ПечатьДокументовУНФ.СведенияОЮрФизЛице(
		ЮрФизЛицо, Период);
		
		Если СведенияОЛице.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель 
			ИЛИ СведенияОЛице.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
			СведенияОЛице.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);	  
		Иначе
			СведенияОЛице.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		КонецЕсли;   
		
		СведенияОЛице.Вставить("НалоговыйНомерВСтранеРегистрации", СведенияОЛице.РегистрационныйНомер);
	
		СведенияОЛице.Вставить("НаименованиеДляПечатныхФорм", СведенияОЛице.ПолноеНаименование);
		
	Возврат СведенияОЛице;	
	
КонецФункции

// Вызывается перед загрузкой пользовательских настроек на сервере
//
// Параметры:
//  Список      - ДинамическийСписок - Динамический список, для которого устанавливается отбор.
//  Настройки   - ПользовательскиеНастройкиКомпоновкиДанных - Восстанавливаемые настройки списка.
//  ИмяОтбора   - Строка - Имя элемента отбора.
//
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Список, Настройки, ИмяОтбора) Экспорт
	
	РаботаСОтборами.ВосстановитьОтборСписка(Список, Настройки, ИмяОтбора);
	
КонецПроцедуры

Функция УчетнаяПолитикаСуществует(Организация, Период, ВыводитьСообщениеОбОтсутствииУчетнойПолитики = Ложь, ДокументСсылка = Неопределено) Экспорт
	
	Возврат ЗначениеЗаполнено(РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Организация, Период)); 	
	
КонецФункции

Функция УстановитьСостояниеДокумента(Объект) Экспорт
	
	Документ = Объект.Объект;
	
 	РучнаяКорректировка = Неопределено;
	
	Если Документ.Свойство("РучнаяКорректировка", РучнаяКорректировка) Тогда
		Если Документ.РучнаяКорректировка Тогда
			Если Документ.ПометкаУдаления Тогда
				СостояниеДокумента = 10;
			ИначеЕсли НЕ Документ.Проведен Тогда
				СостояниеДокумента = 9;
			Иначе
				СостояниеДокумента = 8;
			КонецЕсли;
		Иначе
			Если Документ.ПометкаУдаления Тогда
				СостояниеДокумента = 2;
			ИначеЕсли Документ.Проведен Тогда
				СостояниеДокумента = 1;
			Иначе
				СостояниеДокумента = 0;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Документ.ПометкаУдаления Тогда
			СостояниеДокумента = 2;
		ИначеЕсли Документ.Проведен Тогда
			СостояниеДокумента = 1;
		Иначе
			СостояниеДокумента = 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеДокумента;

КонецФункции

Функция ПолучитьТаблицуПараметровПроведения(ИсходнаяТаблица, СписокКолонок) Экспорт
	
	Если ИсходнаяТаблица = Неопределено Тогда
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		Колонки = Новый Структура(СписокКолонок);
		Для каждого Колонка Из Колонки Цикл
			ТаблицаРезультат.Колонки.Добавить(Колонка.Ключ);
		КонецЦикла;
		Возврат ТаблицаРезультат;

	Иначе

		Возврат ИсходнаяТаблица.Скопировать(, СписокКолонок);

	КонецЕсли;
	
КонецФункции

// Возвращает перечень (массив) всех структурных частей переданной головной организации, имеющих отдельный баланс.
// В перечень входит головная организация и все ее обособленные подразделения на выделенном балансе.
// В перечень входят только те организации, данные по которым доступны текущему пользователю.
//
Функция ВсяОрганизация(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация")

КонецФункции

#КонецОбласти

#Область ПомощникПолученияРНПТ

&НаСервере
Функция ПолучитьРНПТНаСервере(СтрРНПТ) Экспорт
	
	НайденныйРНПТ = Справочники.НомераГТД.НайтиПоКоду(СтрРНПТ);
	Если НайденныйРНПТ = Справочники.НомераГТД.ПустаяСсылка() Тогда
		
		НовыйЭлемент = Справочники.НомераГТД.СоздатьЭлемент();
		НовыйЭлемент.Код = СтрРНПТ;
		НовыйЭлемент.Записать();
		
		НайденныйРНПТ = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	Возврат НайденныйРНПТ;
	
КонецФункции

// Проверяет ведется учет по складам или нет на счете товары
//
// Возвращаемое значение:
// Булево - Да, по складам ведется учет
//
Функция ВедетсяУчетПоСкладам() Экспорт
	
	Возврат Истина;

КонецФункции

// Получаем таблицу остатков прослеживаемого товара,
// попадают остатки по которым делали инвентаризацию и без инвентаризации
//
// Параметры:
//  Период - Дата - дата остатков
//  Организация - СправочникСсылка.Организация - Организация
//
// Возвращаемое значение:
// ТаблицаЗначений - таблица остатков прослеживаемого товара
//
Функция ПолучитьНачальныеДанныеДляПомощникаПолученияРНПТ(Период, Организация) Экспорт
	
	Если НЕ ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Период) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ПрослеживаемостьУНФ.ПолучитьНачальныеДанные(Период, Организация);
	
КонецФункции

// Возвращает представление документа на форме
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ
//  
// Возвращаемое значение:
//  Строка - Текст, составленный по ссылке документа
// 
Функция ПредставлениеДокумента(Документ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Документ)Тогда
		Возврат "";
	КонецЕсли;
	
	ПараметрыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Номер,Дата");
	ТекстОснование = "";
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
		
		ТекстОснование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Инвентаризация №%1 от %2'"),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ПараметрыДокумента.Номер, Истина, Ложь), 
			Формат(ПараметрыДокумента.Дата, "ДФ=dd.MM.yyyy"));
			
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров") Тогда
		
		ТекстОснование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Уведомление об остатках №%1 от %2'"),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ПараметрыДокумента.Номер, Истина, Ложь), 
			Формат(ПараметрыДокумента.Дата, "ДФ=dd.MM.yyyy"));
			
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров") Тогда
		
		ТекстОснование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Уведомление о ввозе №%1 от %2'"),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ПараметрыДокумента.Номер, Истина, Ложь), 
			Формат(ПараметрыДокумента.Дата, "ДФ=dd.MM.yyyy"));
			
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров") Тогда
		
		ТекстОснование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Уведомление о перемещении №%1 от %2'"),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ПараметрыДокумента.Номер, Истина, Ложь), 
			Формат(ПараметрыДокумента.Дата, "ДФ=dd.MM.yyyy"));
			
	ИначеЕсли  ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		ТекстОснование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Поступление (акт, накладная) №%1 от %2'"),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ПараметрыДокумента.Номер, Истина, Ложь), 
			Формат(ПараметрыДокумента.Дата, "ДФ=dd.MM.yyyy"));
			
	КонецЕсли;
	
	Возврат ТекстОснование;
	
КонецФункции

// Процедура в которой можно добавить новые реквизиты на форму
// 
// Параметры:
// Форма - ФормаКлиентскогоПриложения - форма помощника получения РНПТ
// 
// Пример как добавлять колонку в таблицу НачальныеДанне
// нРеквизиты = Новый Массив;
// нРеквизиты.Добавить(Новый РеквизитФормы("Тест1", Новый ОписаниеТипов("Строка"), "Объект.НачальныеДанные", "Тест3", Истина));
// Форма.ИзменитьРеквизиты(нРеквизиты);
//
// Пример как добавлять колонку в таблицу на форму
// нЭлемент = Элементы.Вставить("Тест3", Тип("ПолеФормы"), Элементы.НачальныеДанные, Элементы.НачальныеДанныеКоличество);
// нЭлемент.Вид = ВидПоляФормы.ПолеВвода;
// нЭлемент.ПутьКДанным = "Объект.НачальныеДанные.Тест1";
//
// Пример как добавлять колонку в таблицу на форму
// переопределение запроса динамического списка Функция: ТекстЗапросаДинамическогоСпискаУведомления()
// нЭлемент = Элементы.Вставить("ТестУведомления", Тип("ПолеФормы"), Элементы.Уведомления, Элементы.УведомленияПредставлениеУведомление);
// нЭлемент.Вид = ВидПоляФормы.ПолеВвода;
// нЭлемент.ПутьКДанным = "Уведомления.ТестУведомления";
//
Процедура ДобавитьДополнительныеРеквизитыНаФорму(Форма) Экспорт

	Элементы = Форма.Элементы;
	
	Возврат ;
	
КонецПроцедуры

Функция ТекстЗапросаДинамическогоСпискаУведомления(ТекстЗапроса) Экспорт
	
	ТекстЗапросаУведомлениеОбОСтатках = ИнтерфейсыВзаимодействияБРОВызовСервера.ТекстыДляЗапросаДокументовРеализацииПолномочийНО(
		"УведомлениеОбОстаткахПрослеживаемыхТоваров");
	ТекстЗапросаУведомлениеОВвозе = ИнтерфейсыВзаимодействияБРОВызовСервера.ТекстыДляЗапросаДокументовРеализацииПолномочийНО(
		"УведомлениеОВвозеПрослеживаемыхТоваров");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.ПервичныйДокумент КАК Основание,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка КАК Уведомление,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК ПредставлениеУведомление,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК ПредставлениеОснование,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК ПредставлениеРНПТ,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.КодТНВЭД КАК ТНВЭД,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.РНПТ КАК РНПТ,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности КАК СостояниеСдачиОтчетности,
	|	ВЫБОР
	|		КОГДА ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности = ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ДокументооборотНеНачат)
	|				ИЛИ ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности = ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ПустаяСсылка)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ЖурналОтчетовСтатусы.ДатаОтправки
	|	КОНЕЦ КАК ДатаОтправки,
	|	ЖурналОтчетовСтатусы.Статус КАК Статус1,
	|	ЕСТЬNULL(СтатусыОтправки.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ПустаяСсылка)) КАК Статус,
	|	ЖурналОтчетовСтатусы.Ссылка КАК РегламентированныйОтчет,
	|	ЖурналОтчетовСтатусы.Организация КАК Организация,
	|	ЖурналОтчетовСтатусы.ВидКонтролирующегоОргана КАК ВидКонтролирующегоОргана,
	|	ЖурналОтчетовСтатусы.КодКонтролирующегоОргана КАК КодКонтролирующегоОргана,
	|	ЖурналОтчетовСтатусы.НаименованиеОтчета КАК НаименованиеОтчета,
	|	ЖурналОтчетовСтатусы.НеОтправляетсяВКонтролирующийОрган КАК НеОтправляетсяВКонтролирующийОрган,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(2)) КАК Отступ,
	|	" + ТекстЗапросаУведомлениеОбОСтатках.ПеречислениеКолонок + "
	|ИЗ
	|	Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров КАК УведомлениеОбОстаткахПрослеживаемыхТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
	|		ПО УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка = СтатусыОтправки.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|		ПО УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка = ЖурналОтчетовСтатусы.Ссылка
	|	" + ТекстЗапросаУведомлениеОбОСтатках.СоединениеСДокументом + "
	|ГДЕ
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.Проведен = ИСТИНА
	|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.Организация = &Организация
	|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОВвозеПрослеживаемыхТоваров.ПервичныйДокумент,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)),
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)),
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)),
	|	УведомлениеОВвозеПрослеживаемыхТоваров.КодТНВЭД,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.РНПТ,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.ЕдиницаИзмерения,
	|	ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности,
	|	ВЫБОР
	|		КОГДА ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности = ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ДокументооборотНеНачат)
	|				ИЛИ ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности = ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ПустаяСсылка)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ЖурналОтчетовСтатусы.ДатаОтправки
	|	КОНЕЦ,
	|	ЖурналОтчетовСтатусы.Статус,
	|	ЕСТЬNULL(СтатусыОтправки.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.ПустаяСсылка)),
	|	ЖурналОтчетовСтатусы.Ссылка,
	|	ЖурналОтчетовСтатусы.Организация,
	|	ЖурналОтчетовСтатусы.ВидКонтролирующегоОргана,
	|	ЖурналОтчетовСтатусы.КодКонтролирующегоОргана,
	|	ЖурналОтчетовСтатусы.НаименованиеОтчета,
	|	ЖурналОтчетовСтатусы.НеОтправляетсяВКонтролирующийОрган,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(2)),
	|	" + ТекстЗапросаУведомлениеОВвозе.ПеречислениеКолонок + "
	|ИЗ
	|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров КАК УведомлениеОВвозеПрослеживаемыхТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
	|		ПО УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка = СтатусыОтправки.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|		ПО УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка = ЖурналОтчетовСтатусы.Ссылка
	|	" + ТекстЗапросаУведомлениеОВвозе.СоединениеСДокументом + "
	|ГДЕ
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Проведен = ИСТИНА
	|	И УведомлениеОВвозеПрослеживаемыхТоваров.Организация = &Организация
	|	И УведомлениеОВвозеПрослеживаемыхТоваров.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДинамическогоСпискаТоварыПоУведомлениям(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	УведомлениеОбОстаткахПрослеживаемогоТовараТовары.Ссылка КАК Уведомление,
	|	УведомлениеОбОстаткахПрослеживаемогоТовараТовары.Номенклатура КАК Номенклатура,
	|	УведомлениеОбОстаткахПрослеживаемогоТовараТовары.КодОКПД2 КАК КодОКПД2,
	|	ЛОЖЬ КАК ЗаполненоОКПД2,
	|	УведомлениеОбОстаткахПрослеживаемогоТовараТовары.Количество КАК Количество,
	|	УведомлениеОбОстаткахПрослеживаемогоТовараТовары.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	УведомлениеОбОстаткахПрослеживаемогоТовараТовары.Сумма КАК Сумма,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.ЕдиницаПрослеживаемости КАК ЕдиницаПрослеживаемости,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.ЕдиницаИзмерения = УведомлениеОбОстаткахПрослеживаемыхТоваров.ЕдиницаПрослеживаемости КАК ЕдиницыИзмеренияОдинаковы,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(1)) КАК Отступ
	|ИЗ
	|	Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.Товары КАК УведомлениеОбОстаткахПрослеживаемогоТовараТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров КАК УведомлениеОбОстаткахПрослеживаемыхТоваров
	|		ПО УведомлениеОбОстаткахПрослеживаемогоТовараТовары.Ссылка = УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка
	|ГДЕ
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Ссылка,
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Номенклатура,
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.КодОКПД2,
	|	ЛОЖЬ,
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Количество,
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.КоличествоПрослеживаемости,
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Сумма,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.ЕдиницаИзмерения,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.ЕдиницаПрослеживаемости,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.ЕдиницаИзмерения = УведомлениеОВвозеПрослеживаемыхТоваров.ЕдиницаПрослеживаемости,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(1))
	|ИЗ
	|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров.Товары КАК УведомлениеОВвозеПрослеживаемыхТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОВвозеПрослеживаемыхТоваров КАК УведомлениеОВвозеПрослеживаемыхТоваров
	|		ПО УведомлениеОВвозеПрослеживаемыхТоваровТовары.Ссылка = УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка
	|ГДЕ
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Проведен = ИСТИНА";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПустоеЗначениеРНПТ() Экспорт
	
	Возврат Справочники.НомераГТД.ПустаяСсылка();
	
КонецФункции

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - Строка - вид настройки, значение по умолчанию которой необходимо получить.
//  Пользователь - СправочникСсылка.Пользователи - пользователь программы, настройка которого
//				   запрашивается, если параметр не передается настройка возвращается для текущего пользователя.
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчанию(Настройка) Экспорт
	
	Возврат РегламентированнаяОтчетность.ПолучитьЗначениеПоУмолчанию(Настройка);
	
КонецФункции

// Возвращает строку с представлением периода.
//
// Параметры:
//	НачалоПериода - Дата - Начало периода.
//	КонецПериода - Дата - Конец периода.
//	ТолькоДаты - Булево - Если Ложь, то возвращаемая строка включает предлог "за".
//
// Возвращаемое значение:
//  Строка - Текст представления периода.
//
Функция ПолучитьПредставлениеПериода(НачалоПериода = '00010101', КонецПериода = '00010101', ТолькоДаты  = Ложь) Экспорт
	
	ТекстПериод = "";
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " " + НСтр("ru = 'за'")+ " ") 
				+ ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП = Истина");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " " + НСтр("ru = 'за'")+ " ") 
			+ ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП = Истина");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, СтрНайти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

#КонецОбласти

// Формирует временные таблицы СведенияОСсылкахНаДаты и СведенияОНоменклатуре со сведениями, необходимыми
// для отчета об операциях.
// СведенияОСсылкахНаДаты:
//  * Ссылка - СправочникСсылка.Контрагенты
//  * ДатаСведений - дата на которую получены сведения о контрагенте
//  * Наименование, ИНН, КПП - сведения о контрагенте
// СведенияОНоменклатуре:
//  * Ссылка - СправочникСсылка.Номенклатура
//  * КодТНВЭД, КодОКПД2, ЕдиницаИзмерения, ЕдиницаИзмеренияПрослеживаемости - сведения о номенклатуре
//
Процедура ДополнительныеСведенияДляОтчетаОбОперациях(МенеджерВременныхТаблиц) Экспорт
	
	// Дополнительные сведения о контрагенте
	РегистрационныеСведенияНаДаты(МенеджерВременныхТаблиц);
	
	// Дополнительные сведения о номенклатуре
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияПрослеживаемости
	|ПОМЕСТИТЬ СведенияОНоменклатуре
	|ИЗ
	|	НоменклатураОпераций КАК НоменклатураОпераций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО НоменклатураОпераций.НоменклатураСсылка = Номенклатура.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура.Ссылка";
	
	Запрос.Выполнить();
	
КонецПроцедуры   

Процедура РегистрационныеСведенияНаДаты(МенеджерВременныхТаблиц) Экспорт
	
	// Запрос требует обязательного наличия в МенеджерВременныхТаблиц таблицы с именем
	// СсылкиНаДаты с колонками Ссылка, ДатаСведений
	// Результатом является временная таблица СведенияОСсылкахНаДаты
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка КАК Ссылка,
	               |	Контрагенты.ИНН КАК ИНН,
	               |	Контрагенты.КПП КАК КПП,
	               |	ВЫРАЗИТЬ(ЕСТЬNULL(Контрагенты.НаименованиеПолное, Контрагенты.Наименование) КАК СТРОКА(1000)) КАК Наименование,
	               |	СсылкиНаДаты.ДатаСведений КАК ДатаСведений
	               |ПОМЕСТИТЬ СведенияОСсылкахНаДаты
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СсылкиНаДаты КАК СсылкиНаДаты
	               |		ПО Контрагенты.Ссылка = СсылкиНаДаты.Ссылка
	               |ГДЕ
	               |	Контрагенты.Ссылка = СсылкиНаДаты.Ссылка";
	
	Запрос.Выполнить();
	
КонецПроцедуры


// Формирует таблицу товаров, для регистра РеализацияПрослеживаемыхТоваров в ЕАЭС. 
// Далее по этим движениям будет заполняться документ Уведомление о перемещении прослеживаемых товаров
Функция ПодготовитьТаблицуРеализацияПрослеживаемыхТоваровВЕАЭС(ПрослеживаемыеТоварыРеализованные, РеализацияТаблицаДокумента, ТаблицаРеквизитов) Экспорт
	Если Не ЗначениеЗаполнено(ПрослеживаемыеТоварыРеализованные)
		ИЛИ Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
			Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПрослеживаемыхТоваров(ПрослеживаемыеТоварыРеализованные, РеализацияТаблицаДокумента, ТаблицаРеквизитов);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если НЕ (ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Реквизиты.Период))
		ИЛИ (НЕ ПрослеживаемостьУНФ.ГосударствоЧленТаможенногоСоюза(Реквизиты.СтранаРегистрации)) Тогда
			Возврат Неопределено;
	КонецЕсли;
	
	РеализацияПрослеживаемыхТоваров = Параметры.ПрослеживаемыеТовары.Скопировать();
	РеализацияПрослеживаемыхТоваров.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	РеализацияПрослеживаемыхТоваров.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	РеализацияПрослеживаемыхТоваров.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	РеализацияПрослеживаемыхТоваров.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	РаспределитьСуммуПродажиПоПрослеживаемымТоварам(РеализацияПрослеживаемыхТоваров, Параметры.РеализацияТаблицаДокумента, Реквизиты);
	
	Возврат РеализацияПрослеживаемыхТоваров;
	
КонецФункции

Функция ПодготовитьПараметрыПрослеживаемыхТоваров(ТаблицаТовары, РеализацияТаблицаДокумента, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"               // <СправочникСсылка.Номенклатура>
	+ "РНПТ,"                       // <СправочникСсылка.НомераГТД>
	+ "Количество,"                 // <Число,15,3> - количество
	+ "СопроводительныйДокумент,"   // <ДокументСсылка.РеализацияТоваровУслуг> - документ реализации
	+ "Контрагент,"                 // <СправочникСсылка.Контрагенты> - Контрагент
	+ "ПорядковыйНомер,"                 // <Число> - НомерСтроки номенклатуры в табличной части документа
	+ "КоличествоПрослеживаемости"; // <Число,26,11> - количество в единицах прослеживаемости
	
	Параметры.Вставить("ПрослеживаемыеТовары", ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"// <СправочникСсылка.Номенклатура>
	+ "Количество,"  // <Число,15,3> - количество
	+ "СуммаРуб,"    // <Число,26,11> - Сумма продажи
	+ "СуммаНДСРуб," // <Число,26,11> - Сумма НДС
	+ "НомерСтроки"; // <Число> - Номер строки документа в табличной части
	
	Параметры.Вставить("РеализацияТаблицаДокумента", ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(
		РеализацияТаблицаДокумента, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "Регистратор," // <ДокументСсылка>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "СтранаРегистрации," // <СправочникСсылка.СтраныМира>
	+ "Контрагент"; // <СправочникСсылка.Контрагенты>
	
	Параметры.Вставить("Реквизиты", ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
	
КонецФункции

Процедура РаспределитьСуммуПродажиПоПрослеживаемымТоварам(РеализацияПрослеживаемыхТоваров, РеализацияТаблицаДокумента, Реквизиты)
	
	РеализацияТаблицаДокумента.Свернуть("Номенклатура, НомерСтроки","Количество, СуммаРуб, СуммаНДСРуб");
	РеализацияТаблицаДокумента.Колонки.Добавить("Списано", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	ФильтрПоНоменклатуре = Новый Структура("Номенклатура,НомерСтроки");
	
	Для каждого ТекСтрокаРеализацияПрослеживаемыхТоваров Из РеализацияПрослеживаемыхТоваров Цикл
		
		ЗаполнитьЗначенияСвойств(ТекСтрокаРеализацияПрослеживаемыхТоваров, Реквизиты);
		ЗаполнитьЗначенияСвойств(ФильтрПоНоменклатуре, ТекСтрокаРеализацияПрослеживаемыхТоваров, "Номенклатура");
		ФильтрПоНоменклатуре.НомерСтроки = ТекСтрокаРеализацияПрослеживаемыхТоваров.ПорядковыйНомер;
		
		НайденныеСтроки = РеализацияТаблицаДокумента.НайтиСтроки(ФильтрПоНоменклатуре);
		Для каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			
			ОстатокКоличество = ТекущаяСтрока.Количество - ТекущаяСтрока.Списано;
			
			Если ОстатокКоличество = ТекСтрокаРеализацияПрослеживаемыхТоваров.Количество Тогда
				
				ТекСтрокаРеализацияПрослеживаемыхТоваров.Сумма = ТекущаяСтрока.СуммаРуб - ТекущаяСтрока.СуммаНДСРуб;
			Иначе
				
				СуммаБезНДСРуб = ТекущаяСтрока.СуммаРуб - ТекущаяСтрока.СуммаНДСРуб;
				Цена = СуммаБезНДСРуб/ТекущаяСтрока.Количество;
				
				ТекСтрокаРеализацияПрослеживаемыхТоваров.Сумма = ТекущаяСтрока.Количество * Цена;
				
			КонецЕсли;
			
			ТекущаяСтрока.Списано = ТекущаяСтрока.Списано - ТекущаяСтрока.Количество;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ВыбытиеВЕАЭС

Процедура СформироватьДвиженияПрослеживаемыхТоваровВЕАЭС(ПрослеживаемыеТоварыРеализованные, РеализацияТаблицаДокумента, ТаблицаРеквизитов, Движения) Экспорт
	
	РеализацияПрослеживаемыхТоваровВЕАЭС = ПодготовитьТаблицуРеализацияПрослеживаемыхТоваровВЕАЭС(
		ПрослеживаемыеТоварыРеализованные, РеализацияТаблицаДокумента, ТаблицаРеквизитов);
	
	Если НЕ ЗначениеЗаполнено(РеализацияПрослеживаемыхТоваровВЕАЭС) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из РеализацияПрослеживаемыхТоваровВЕАЭС Цикл
		Запись = Движения.ПрослеживаемыеТоварыОтгруженныеВЕАЭС.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;
	
	Движения.ПрослеживаемыеТоварыОтгруженныеВЕАЭС.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РегистрацияПрослеживаемогоТовара

Функция ПодготовитьПараметрыТаблицыРегистрацииПрослеживаемыхТоваров(ТаблицаРеквизитов, ТаблицаТоваров)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.таблицаТоваров
	
	СписокОбязательныхКолонок = ""
		+ "Ссылка,"                                   // <ДокументСсылка.*> - документ-регистратор движений
		+ "НомерСтроки,"                              // <Число> - номер строки в таблице товаров
		+ "Номенклатура,"                             // <СправочникСсылка.Номенклатура> - номенклатура
		+ "Характеристика,"                           // <СправочникСсылка.ХарактеристикиНоменклатуры> - номенклатура
		+ "Партия,"                                   // <СправочникСсылка.ПартииНоменклатуры> - номенклатура
		+ "Количество,"		                          // <Число ,15,3> - количество
		+ "КоличествоПрослеживаемости,"               // <Число, 15,3> - количество по прослеживаемости
		+ "Сумма,"		                              // <Число, 15,3> - сумма
		+ "СтранаПроисхождения";                      // <СправочникСсылка.СтраныМира> - страна происхождения товара
		
	Параметры.Вставить("ТаблицаТоваров", ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоваров, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"							// <Дата> - период движений - дата документа
		+ "Регистратор,"					// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"					// <СправочникСсылка.Организации> - организация
		+ "РНПТ,"							// <ОпределяемыеТипы.РНПТ> - РНПТ
		+ "ЭтоКорректировочноеУведомление,"	// <Булево> - признак, показывающий, что данные их корректировочного документа
		+ "ПолученоПодтверждениеИзФНС,"		// <Булево> - признак, показывающий, что получено подтверждение от ФНС
		+ "Основание";						//<ДокументСсылка.*> - документ-основания
		
	Параметры.Вставить("Реквизиты", ПрослеживаемостьПереопределяемый.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Функция ТекстЗапросаПоОснованию(ДокументОснование, ПараметрыДокументаОснования)
	
	ОбъектМетаданных = ДокументОснование.Метаданные();
	
	ТекстЗапроса = Документы[ОбъектМетаданных.Имя].ТекстЗапросаТаблицаПрослеживаемыхТоваровПоОснованию();
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Функция ТекстЗапросаПоУведомлениямИВычислениюОстатка()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Номенклатура КАК Номенклатура,
	|	СУММА(УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Количество) КАК Количество,
	|	СУММА(УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Сумма) КАК Сумма,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.КодТНВЭД КАК ТНВЭД,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.НомерКорректировки КАК НомерКорректировки,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка КАК СсылкаНаУведомление,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Характеристика КАК Характеристика,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Партия КАК Партия
	|ПОМЕСТИТЬ ВТ_ВыписанныеУведомления
	|ИЗ
	|	Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.Товары КАК УведомлениеОбОстаткахПрослеживаемыхТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров КАК УведомлениеОбОстаткахПрослеживаемыхТоваров
	|		ПО УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Ссылка = УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка
	|ГДЕ
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.ПервичныйДокумент = &Основание
	|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.Проведен
	|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка <> &ДокументИсключение
	|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.НомерКорректировки = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.КодТНВЭД,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Номенклатура,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.НомерКорректировки,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Партия,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Номенклатура,
	|	СУММА(УведомлениеОВвозеПрослеживаемыхТоваровТовары.Количество),
	|	СУММА(УведомлениеОВвозеПрослеживаемыхТоваровТовары.Сумма),
	|	УведомлениеОВвозеПрослеживаемыхТоваров.КодТНВЭД,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.НомерКорректировки,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка,
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Характеристика,
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Партия
	|ИЗ
	|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров.Товары КАК УведомлениеОВвозеПрослеживаемыхТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОВвозеПрослеживаемыхТоваров КАК УведомлениеОВвозеПрослеживаемыхТоваров
	|		ПО УведомлениеОВвозеПрослеживаемыхТоваровТовары.Ссылка = УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка
	|ГДЕ
	|	УведомлениеОВвозеПрослеживаемыхТоваров.ПервичныйДокумент = &Основание
	|	И УведомлениеОВвозеПрослеживаемыхТоваров.Проведен
	|	И УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка <> &ДокументИсключение
	|
	|СГРУППИРОВАТЬ ПО
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Номенклатура,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.КодТНВЭД,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.НомерКорректировки,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка,
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Партия,
	|	УведомлениеОВвозеПрослеживаемыхТоваровТовары.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Номенклатура,
	|	СУММА(УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.КоличествоПослеИзменения),
	|	СУММА(УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.СуммаПослеИзменения),
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.КодТНВЭДПослеИзменения,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.НомерКорректировки,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Характеристика,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Партия
	|ИЗ
	|	Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.Товары КАК УведомлениеОбОстаткахПрослеживаемыхТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров КАК УведомлениеОбОстаткахПрослеживаемыхТоваров
	|		ПО УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Ссылка = УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка
	|ГДЕ
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.ПервичныйДокумент = &Основание
	|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.Проведен
	|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка <> &ДокументИсключение
	|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.НомерКорректировки > 0
	|	И УведомлениеОбОстаткахПрослеживаемыхТоваров.ПолученоПодтверждениеИзФНС
	|
	|СГРУППИРОВАТЬ ПО
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Номенклатура,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.КодТНВЭДПослеИзменения,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.НомерКорректировки,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваров.Ссылка,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Партия,
	|	УведомлениеОбОстаткахПрослеживаемыхТоваровТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровПоОснованию.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровПоОснованию.Количество КАК Количество,
	|	ТаблицаТоваровПоОснованию.Сумма КАК Сумма,
	|	ТаблицаТоваровПоОснованию.ТНВЭД КАК ТНВЭД,
	|	ТаблицаТоваровПоОснованию.Организация КАК Организация,
	|	ТаблицаТоваровПоОснованию.ВидОперации КАК ВидОперации,
	|	ТаблицаТоваровПоОснованию.ПериодСобытия КАК ПериодСобытия,
	|	ТаблицаТоваровПоОснованию.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТоваровПоОснованию.Характеристика КАК Характеристика,
	|	ТаблицаТоваровПоОснованию.Партия КАК Партия
	|ПОМЕСТИТЬ ВТ_ТаблицаТоваровПоОснованию
	|ИЗ
	|	ВТ_ТоварыПоОснованию КАК ТаблицаТоваровПоОснованию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_ВыписанныеУведомления.СсылкаНаУведомление) КАК СсылкаНаУведомление,
	|	МАКСИМУМ(ВТ_ВыписанныеУведомления.НомерКорректировки) КАК НомерКорректировки,
	|	ВЫБОР
	|		КОГДА ВТ_ВыписанныеУведомления.СсылкаНаУведомление.ДокументУведомлениеОбОстатках = ЗНАЧЕНИЕ(Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.ПустаяСсылка)
	|			ТОГДА ВТ_ВыписанныеУведомления.СсылкаНаУведомление
	|		ИНАЧЕ ВТ_ВыписанныеУведомления.СсылкаНаУведомление.ДокументУведомлениеОбОстатках
	|	КОНЕЦ КАК Основание
	|ПОМЕСТИТЬ ПоследниеУведомления
	|ИЗ
	|	ВТ_ВыписанныеУведомления КАК ВТ_ВыписанныеУведомления
	|ГДЕ
	|	ВТ_ВыписанныеУведомления.СсылкаНаУведомление ССЫЛКА Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВТ_ВыписанныеУведомления.СсылкаНаУведомление.ДокументУведомлениеОбОстатках = ЗНАЧЕНИЕ(Документ.УведомлениеОбОстаткахПрослеживаемыхТоваров.ПустаяСсылка)
	|			ТОГДА ВТ_ВыписанныеУведомления.СсылкаНаУведомление
	|		ИНАЧЕ ВТ_ВыписанныеУведомления.СсылкаНаУведомление.ДокументУведомлениеОбОстатках
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_ВыписанныеУведомления.СсылкаНаУведомление),
	|	МАКСИМУМ(ВТ_ВыписанныеУведомления.НомерКорректировки),
	|	ВТ_ВыписанныеУведомления.СсылкаНаУведомление
	|ИЗ
	|	ВТ_ВыписанныеУведомления КАК ВТ_ВыписанныеУведомления
	|ГДЕ
	|	ВТ_ВыписанныеУведомления.СсылкаНаУведомление ССЫЛКА Документ.УведомлениеОВвозеПрослеживаемыхТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ВыписанныеУведомления.СсылкаНаУведомление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровПоУведомлениям.Номенклатура КАК Номенклатура,
	|	СУММА(ТаблицаТоваровПоУведомлениям.Количество) КАК Количество,
	|	СУММА(ТаблицаТоваровПоУведомлениям.Сумма) КАК Сумма,
	|	ТаблицаТоваровПоУведомлениям.ТНВЭД КАК ТНВЭД,
	|	ТаблицаТоваровПоУведомлениям.Характеристика КАК Характеристика,
	|	ТаблицаТоваровПоУведомлениям.Партия КАК Партия
	|ПОМЕСТИТЬ ВТ_ТаблицаТоваровПоУведомлениям
	|ИЗ
	|	ПоследниеУведомления КАК ПоследниеУведомления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыписанныеУведомления КАК ТаблицаТоваровПоУведомлениям
	|		ПО ПоследниеУведомления.СсылкаНаУведомление = ТаблицаТоваровПоУведомлениям.СсылкаНаУведомление
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваровПоУведомлениям.Номенклатура,
	|	ТаблицаТоваровПоУведомлениям.ТНВЭД,
	|	ТаблицаТоваровПоУведомлениям.Характеристика,
	|	ТаблицаТоваровПоУведомлениям.Партия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТНВЭД,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровПоОснованию.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваровПоОснованию.Количество - ЕСТЬNULL(ТаблицаТоваровПоУведомлениям.Количество, 0) < 0
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТоваровПоОснованию.Количество - ЕСТЬNULL(ТаблицаТоваровПоУведомлениям.Количество, 0)
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваровПоОснованию.Количество - ЕСТЬNULL(ТаблицаТоваровПоУведомлениям.Количество, 0) < 0
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТоваровПоОснованию.Сумма - ЕСТЬNULL(ТаблицаТоваровПоУведомлениям.Сумма, 0)
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаТоваровПоОснованию.ТНВЭД КАК ТНВЭД,
	|	ТаблицаТоваровПоОснованию.Организация КАК Организация,
	|	ТаблицаТоваровПоОснованию.ВидОперации КАК ВидОперации,
	|	&Основание КАК Основание,
	|	ТаблицаТоваровПоОснованию.ПериодСобытия КАК ПериодСобытия,
	|	ТаблицаТоваровПоОснованию.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТоваровПоОснованию.Характеристика КАК Характеристика,
	|	ТаблицаТоваровПоОснованию.Партия КАК Партия
	|ИЗ
	|	ВТ_ТаблицаТоваровПоОснованию КАК ТаблицаТоваровПоОснованию
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаТоваровПоУведомлениям КАК ТаблицаТоваровПоУведомлениям
	|		ПО ТаблицаТоваровПоОснованию.ТНВЭД = ТаблицаТоваровПоУведомлениям.ТНВЭД
	|			И ТаблицаТоваровПоОснованию.Номенклатура = ТаблицаТоваровПоУведомлениям.Номенклатура
	|			И ТаблицаТоваровПоОснованию.Характеристика = ТаблицаТоваровПоУведомлениям.Характеристика
	|			И ТаблицаТоваровПоОснованию.Партия = ТаблицаТоваровПоУведомлениям.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаТоваровТолькоОприходование.Номенклатура,
	|	ВТ_ТаблицаТоваровТолькоОприходование.Количество,
	|	ВТ_ТаблицаТоваровТолькоОприходование.Сумма,
	|	ВТ_ТаблицаТоваровТолькоОприходование.ТНВЭД,
	|	ВТ_ТаблицаТоваровТолькоОприходование.Организация,
	|	ВТ_ТаблицаТоваровТолькоОприходование.ВидОперации,
	|	&Основание,
	|	ВТ_ТаблицаТоваровТолькоОприходование.ПериодСобытия,
	|	NULL,
	|	ВТ_ТаблицаТоваровТолькоОприходование.Характеристика,
	|	ВТ_ТаблицаТоваровТолькоОприходование.Партия
	|ИЗ
	|	ВТ_ТаблицаТоваровРазмеченный КАК ВТ_ТаблицаТоваровТолькоОприходование
	|ГДЕ
	|	ВТ_ТаблицаТоваровТолькоОприходование.РанееРегистрировалсяВПрослеживаемости
	|	И ВТ_ТаблицаТоваровТолькоОприходование.Количество > ВТ_ТаблицаТоваровТолькоОприходование.КоличествоУчет";
	
	Возврат ТекстЗапроса;
	
КонецФункции


#КонецОбласти

#КонецОбласти
