
#Область ОсновныеПравила

Функция НачалоДействияПриказа90н() Экспорт
	
	// Приказ Минфина №90н от 08.06.2015.
	
	Возврат '2016-01-01';
	
КонецФункции

Функция НачалоДействияПриказа2017_90н() Экспорт
	
	// Приказ Минфина №90н от 08.06.2015.
	
	Возврат '2017-01-01';
	
КонецФункции

Функция НачалоДействияПриказа126н() Экспорт
	
	// Приказ Минфина №126н от 30.10.2014.
	
	Возврат '2015-01-01';
	
КонецФункции

Функция ВидПеречисления(Знач КБК, Знач Период) Экспорт
	
	// Вид перечисления определяет набор правил, которые используются для идентификации платежа.
	// Эти правила определены приложениями №№ 2-4 к приказу Минфина 107Н
	// НалоговыйПлатеж соответствует приложению 2
	// ТаможенныйПлатеж - приложению 3
	// ИнойПлатеж       - приложению 4
	
	Если НЕ КБКЗадан(КБК) Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ИнойПлатеж");
	КонецЕсли;
	
	Если ПлатежАдминистрируетсяНалоговымиОрганами(КБК) Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж");
		
	ИначеЕсли ПлатежАдминистрируетсяТаможеннымиОрганами(КБК)
		ИЛИ ЭтоДоходыОтВнешнеэкономическойДеятельности(КБК) Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж");
		
	ИначеЕсли ЭтоСтраховыеВзносы(КБК) Тогда
		
		Если ДействуетПриказ107н(Период) Тогда
			
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ИнойПлатеж");
			
		Иначе
			
			// Приказ 106н ясности не дает
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж");
			
		КонецЕсли;
		
	Иначе
		
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ИнойПлатеж");
		
	КонецЕсли;
	
КонецФункции

Функция НачалоДействияПриказа107н() Экспорт
	
	// Приказ Минфина №107н от 12.11.2013.
	// Опубликован 24.01.2014 и вступает в силу по истечении 10 дней с даты публикации.
	
	Возврат '2014-02-04';
	
КонецФункции

Функция ДействуетПриказ107н(Период) Экспорт
	
	Возврат Период = Неопределено
		ИЛИ Период >= НачалоДействияПриказа107н();
	
КонецФункции

Функция ДействуетПриказ90н(Период) Экспорт
	
	Возврат Период = Неопределено
		ИЛИ Период >= НачалоДействияПриказа90н();
	
КонецФункции

Функция ДействуетПриказ126н(Период) Экспорт
	
	Возврат Период = Неопределено
		ИЛИ Период >= НачалоДействияПриказа126н();
	
КонецФункции

Функция ВидГосударственногоОргана(КБК) Экспорт
	
	Если ПустаяСтрока(КБК) Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ПустаяСсылка");
	КонецЕсли;
	
	КодГлавногоАдминистратора = КодГлавногоАдминистратора(КБК);
	
	Если ПустаяСтрока(КБК) ИЛИ КодГлавногоАдминистратора = "182" Тогда
		ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган");
	ИначеЕсли КодГлавногоАдминистратора = "392" Тогда
		ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганПФР");
	ИначеЕсли КодГлавногоАдминистратора = "393" Тогда
		ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганФСС");
	Иначе
		ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.Прочий");
	КонецЕсли;
	
	Возврат ВидГосударственногоОргана;
	
КонецФункции

Функция КодАдминистрированияНалоговымиОрганами() Экспорт
	
	Возврат "182";
	
КонецФункции

Функция КодАдминистрированияПенсионнымФондом() Экспорт
	
	Возврат "392";
	
КонецФункции

Функция КодАдминистрированияФСС() Экспорт
	
	Возврат "393";
	
КонецФункции

Функция НовыйАдминистраторСтраховыхВзносов(Период) Экспорт
	
	Возврат Период <> Неопределено
		// Приказ Минфина №90н от 08.06.2015.
		И Период >= '2017-01-01';
	
КонецФункции

Функция ЭтоВзносыНаПенсионноеСтрахование(ВидНалога) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ВидВзноса Из ВидыВзносовНаПенсионноеСтрахование() Цикл
		Если ВидВзноса = ВидНалога Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоВзносыНаСоциальноеСтрахование(ВидНалога) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ВидВзноса Из ВидыНаСоциальноеСтрахование() Цикл
		Если ВидВзноса = ВидНалога Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ВидыВзносовНаПенсионноеСтрахование()
	
	Взносы = Новый Массив;
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФФОМС"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ДополнительныеВзносы_ПФР_ЛетныеЭкипажи"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ДополнительныеВзносы_ПФР_ТяжелыеУсловия"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ДополнительныеВзносы_ПФР_Шахтеры"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФФОМС"));
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть"));
	
	Возврат Взносы;
	
КонецФункции

Функция ВидыНаСоциальноеСтрахование()
	
	Взносы = Новый Массив;
	Взносы.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФСС"));
	
	Возврат Взносы;
	
КонецФункции

Функция НачалоОтложенногоДействияПриказа2017_58н() Экспорт
	
	// Приказ Минфина №58н от 05.04.2017.
	// Настоящий приказ вступает в силу в установленном порядке, за исключением
	//  абзаца одиннадцатого подпункта "г" пункта 3,
	//  абзаца пятого подпункта "а", подпункта "в",
	//  абзацев второго, четвертого - пятого, десятого подпункта "г",
	//  абзацев второго - пятого, девятого подпункта "д" пункта 4,
	//  абзацев третьего - шестого подпункта "е",
	//  абзацев третьего - четвертого подпункта "ж" пункта 5,
	//  подпунктов "б" - "в",
	//  абзацев второго - третьего подпункта "л" пункта 6
	// Изменений, вступающих в силу со 2 октября 2017 года.
	
	Возврат '2017-10-02';
	
КонецФункции

Функция НачалоДействияПриказа2017_58н()
	
	// Приказ Минфина №58н от 05.04.2017.
	
	Возврат '2017-04-25';
	
КонецФункции

Функция НачалоДействияПриказа2020_199н()
	
	// Приказ Минфина №199н от 14.09.2020.
	//
	// Настоящий приказ вступает в силу 1 января 2021 г., за исключением:
	// - абзацев пятого и шестого подпункта "д", абзацев пятого и шестого подпункта "е",
	//   абзацев второго и третьего подпункта "ж", абзацев второго и третьего подпункта "з" пункта 8 изменений,
	// вступающих в силу по истечении девяти месяцев после для его официального опубликования;
	//
	// - пункта 2,
	// - подпункта "в" пункта 3,
	// - абзацев девятого-девятнадцатого подпункта "е" пункта 8,
	// - абзацев второго и третьего подпункта "ж" пункта 9,
	// - абзацев второго и третьего подпункта "з" пункта 10,
	// - абзацев второго - четвертого подпункта "б", подпункта "в" пункта 11,
	// - подпункта "л" пункта 12,
	// - пункта 13 изменений,
	// вступающих в силу с 1 июля 2021 г.;
	//
	// - абзацев второго и третьего подпункта "е" пункта 8,
	// - абзаца второго подпункта "б", подпунктов "в" - "е" пункта 9,
	// - подпункта "б", абзаца четвертого подпункта "г",
	//   абзацев второго - четвертого, девятого - одиннадцатого, тринадцатого и четырнадцатого подпункта "е",
	//   абзацев шестого, девятого и десятого подпункта "ж" пункта 10,
	// - абзацев пятого и шестого подпункта "б" пункта 11,
	// - подпунктов "б", "в", "д", "ж", "и", "м" пункта 12 изменений,
	// вступающих в силу 1 октября 2021 г.
	//
	// Положения подпункта "в" пункта 10 изменений применяются до 1 октября 2021 г
	
	Возврат '2021-01-01';
	
КонецФункции

Функция НачалоОтложенногоДействияПриказа2020_199н_Отложенный()
	
	// Приказ Минфина №199н от 14.09.2020.
	//
	// Настоящий приказ вступает в силу 1 января 2021 г., за исключением:
	//
	// - абзацев второго и третьего подпункта "е" пункта 8,
	// - абзаца второго подпункта "б", подпунктов "в" - "е" пункта 9,
	// - подпункта "б", абзаца четвертого подпункта "г",
	//   абзацев второго - четвертого, девятого - одиннадцатого, тринадцатого и четырнадцатого подпункта "е",
	//   абзацев шестого, девятого и десятого подпункта "ж" пункта 10,
	// - абзацев пятого и шестого подпункта "б" пункта 11,
	// - подпунктов "б", "в", "д", "ж", "и", "м" пункта 12 изменений,
	// вступающих в силу 1 октября 2021 г.
	
	Возврат '2021-10-01';
	
КонецФункции

Функция ДействуетПриказ2017_58н(Период) Экспорт
	
	Возврат Период <> Неопределено
		И Период >= НачалоДействияПриказа2017_58н();
	
КонецФункции

Функция ДействуетПриказ2017_58н_Отложенный(Период) Экспорт
	
	Возврат Период <> Неопределено
		И Период >= НачалоОтложенногоДействияПриказа2017_58н();
	
КонецФункции

Функция ДействуетПриказ2020_199н(Период)
	
	Возврат Период <> Неопределено
		И Период >= НачалоДействияПриказа2020_199н();
	
КонецФункции

Функция ДействуетПриказ2020_199н_Отложенный(Период) Экспорт
	
	Возврат Период <> Неопределено
		И Период >= НачалоОтложенногоДействияПриказа2020_199н_Отложенный();
	
КонецФункции

#КонецОбласти

#Область УникальныйИдентификаторНачисления

// УНИКАЛЬНЫЙ ИДЕНТИФИКАТОР НАЧИСЛЕНИЯ

// До 31 марта 2014 год в реквизите "Назначение платежа" может указываться 
// уникальный идентификатор начисления.
// Уникальный идентификатор начисления указывается первым в реквизите «Назначение платежа» 
// и состоит из 23 знаков: первые три знака принимают значение «УИН», 
// знаки с 4 по 23 соответствуют значению уникального идентификатора начисления.
// Для выделения информации об уникальном идентификаторе начисления после уникального 
// идентификатора начислений используется символ «///».
// Например: «УИН12345678901234567890///».
// В форматах ГИС ГМП до версии 1.16.1 в общем случае УИН может содержать не только цифры.

// Форматы взаимодействия.
// Государственной информационной системы о государственных и муниципальных платежах с информационными системами участников
// Версия 1.16.1

// Структура УИН для АН и ГАН, являющихся федеральными органами государственной власти
// ┌───┬───┬───┬───┬───┬───┬───┬───┬──┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐
// │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │9 │10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │20 │
// ├───┴───┴───┼───┴───┴───┴───┴───┴──┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┼───┤
// │     A     │                              B                               │ C │
// └───────────┴──────────────────────────────────────────────────────────────┴───┘
// A - Код главы КБК
// B - Уникальный номер начисления - 16 цифр. Алгоритм формирования,
//     обеспечивающий уникальность номера, определяется участником самостоятельно.
// С - Контрольный разряд (правила расчета ниже).

// Структура УИН для АН и ГАН, являющихся органами государственной власти субъектов
// Российской Федерации, органами местного самоуправления, государственными (муниципальными) учреждениями
// ┌───┬───┬───┬───┬───┬───┬───┬───┬──┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐
// │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │9 │10 │11 │12 │13 │14 │15 │16 │17 │18 │19 │20 │21 │22 │23 │24 │25 │
// ├───┴───┴───┴───┴───┴───┴───┴───┼──┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┼───┤
// │               A               │                                  B                           │ C │
// └───────────────────────────────┴──────────────────────────────────────────────────────────────┴───┘
// A - УРН участника, сформировавшего начисление. УРН указывается в десятичном представлении.
//     Для этого его необходимо предварительно перевести из шестнадцатеричного представления и десятичное.
//     Например, УРН участника равен значению «aa11b4»; после перевода в десятичное представление получается «11145652».
//     Если при переводе УРН участника в десятичное представление получается  менее восьми символов,
//     то  значение дополняется нулями слева до 8 цифр.
// B - Уникальный номер начисления - 16 цифр. Алгоритм формирования,
//     обеспечивающий уникальность номера, определяется участником самостоятельно.
// С - Контрольный разряд.

// Правила расчета контрольного разряда УИН.
// Контрольный разряд  УИН формируется по следующим правилам:
//   - каждому разряду УИН, начиная со старшего разряда, присваивается набор весов,
//     соответствующий натуральному ряду чисел от 1 до 10, далее набор весов повторяется;
//   - каждая цифра УИН умножается на присвоенный вес разряда и вычисляется сумма полученных произведений;
//   - контрольный разряд для УИН представляет собой остаток от деления полученной суммы на модуль «11».
//     Контрольный разряд должен иметь значение от 0 до 9;
//   - если получается остаток, равный 10, то для обеспечения одноразрядного контрольного разряда
//     необходимо провести повторный расчет, применяя вторую последовательность весов,
//     являющуюся результатом циклического сдвига исходной последовательности на два разряда влево (3, 4, 5, 6, 7, 8, 9, 10, 1, 2).
//     Если, в случае повторного расчета, остаток от деления вновь сохраняется равным 10,
//     то значение контрольного разряда проставляется равным «0».

Функция НачалоПримененияИдентификатораПлатежа() Экспорт
	
	// Указание ЦБ РФ N 3025-У от 15 июля 2013 г.
	
	Возврат '20140331';
	
КонецФункции

Процедура ЗаменитьВНазначенииПлатежаУИН(НазначениеПлатежа, Знач ИдентификаторПлатежа, Знач Дата = Неопределено, Знач ПеречислениеВБюджет = Истина) Экспорт
	
	// Заменим (добавим) УИН (уникальный идентификатор начисления)
	// До 31 марта 2014 он указывается в назначении платежа
	Если НЕ ДействуетПриказ107н(Дата) Тогда
		// УИН не применяется
		Возврат;
	КонецЕсли;
	
	НазначениеПлатежаУИН = РаспознатьВНазначенииПлатежаУИН(НазначениеПлатежа);
	
	Если НЕ ПеречислениеВБюджет
		ИЛИ (Дата <> Неопределено
		И Дата >= НачалоПримененияИдентификатораПлатежа()) Тогда
		// УИН не следует указывать в назначении платежа, надо удалить
		ИдентификаторПлатежа = "";
	КонецЕсли;
	
	Если НЕ РеквизитЗаполнен(ИдентификаторПлатежа) Тогда
		
		// Нормативные документы не определяют, как в Назначении платежа указывается информация о том, что УИН отсутствует.
		// Если УИН отсутствует, то в назначении платежа мы ничего не будем про него писать.
		// Но отдельные банки могут требовать заполнять в Назначении платежа информацию о пустом УИН 
		// в формате УИН0/// или УИН0                   /// 
		// Поэтому если пользователь написал в назначении про пустой УИН, то не будем его как-то поправлять.
		Если НЕ РеквизитЗаполнен(НазначениеПлатежаУИН.Значение) Тогда
			// Пользователь ничего не написал про УИН или написал про пустой УИН
			Возврат;
		Иначе
			// В назначении платежа остался старый УИН, его надо очистить
			ИдентификаторПлатежа = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если СокрЛП(НазначениеПлатежаУИН.Значение) = СокрЛП(ИдентификаторПлатежа) Тогда
		// В назначении указан правильный УИН
		Возврат;
	КонецЕсли;
	
	ОписаниеУИН = ОписаниеУИН(ИдентификаторПлатежа);
	
	Если ЗначениеЗаполнено(НазначениеПлатежаУИН.Описание) Тогда
		// Удалим старое описание
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, НазначениеПлатежаУИН.Описание, "");
	КонецЕсли;
	
	НазначениеПлатежа = ОписаниеУИН + НазначениеПлатежа;
	
КонецПроцедуры

Функция ОписаниеУИН(Знач ИдентификаторПлатежа)
	
	Если ПустаяСтрока(ИдентификаторПлатежа) Тогда
		Возврат "";
	КонецЕсли;
	
	НормативнаяДлина = МинимальнаяДлинаУИН();
	ФактическаяДлина = СтрДлина(СокрЛП(ИдентификаторПлатежа));
	
	Если ФактическаяДлина > НормативнаяДлина Тогда
		ИдентификаторПлатежа = Лев(ИдентификаторПлатежа, НормативнаяДлина);
	Иначе
		ИдентификаторПлатежа = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
			ИдентификаторПлатежа,
			НормативнаяДлина,
			" ",
			"Справа");
	КонецЕсли;
	
	Возврат СигнатураУИН() + ИдентификаторПлатежа + РазделительУИН();
	
КонецФункции

// Возвращает минимальную длину кода УИН
//
// Возвращаемое значение:
//	Число - количество символов УИН
//
Функция МинимальнаяДлинаУИН()
	
	Возврат 20;
	
КонецФункции

Функция СигнатураУИН()
	
	Возврат "УИН";
	
КонецФункции

Функция РазделительУИН()
	
	Возврат "///";
	
КонецФункции

Функция РаспознатьВНазначенииПлатежаУИН(Знач НазначениеПлатежа)
	
	Описание = Новый Структура;
	Описание.Вставить("Описание", ""); // Строка, содержащая описание УИН (23, 26 знаков или больше)
	Описание.Вставить("Значение", ""); // Собственно УИН (строка не более 20 знаков)
	
	Сигнатура                 = "УИН";
	Разделитель               = "///";
	
	МаксимальнаяДлинаЗначенияВНазначенииПлатежа = МинимальнаяДлинаУИН(); // Когда требовалось указывать УИН в Назначении платежа длина была 20.
	
	ДлинаСигнатуры   = СтрДлина(Сигнатура);
	ДлинаРазделителя = СтрДлина(Разделитель);
	
	РазбираемаяСтрока = СокрЛ(НазначениеПлатежа);
	ДлинаОписания = СтрДлина(НазначениеПлатежа) - СтрДлина(РазбираемаяСтрока);
	
	Если Лев(РазбираемаяСтрока, ДлинаСигнатуры) <> Сигнатура Тогда
		// УИН не обнаружен
		Возврат Описание;
	КонецЕсли;
	
	РазбираемаяСтрока = Сред(РазбираемаяСтрока, ДлинаСигнатуры + 1); // Убираем сигнатуру
	ДлинаОписания = ДлинаОписания + ДлинаСигнатуры;
	
	ПозицияРазделителя = СтрНайти(РазбираемаяСтрока, Разделитель); // в идеальном случае - 21
	Если ПозицияРазделителя = 0 Тогда
		ДлинаЗначения     = СтрДлина(РазбираемаяСтрока);
		ДлинаОписания     = ДлинаОписания + ДлинаЗначения;
	Иначе
		ДлинаЗначения     = ПозицияРазделителя - 1;
		ДлинаОписания     = ДлинаОписания + ДлинаЗначения + ДлинаРазделителя;
		РазбираемаяСтрока = Лев(РазбираемаяСтрока, ДлинаЗначения);
	КонецЕсли;
	
	// Убедимся, что значение содержит УИН - 1 символ "0" или 20 символов
	РазбираемаяСтрока = СтрЗаменить(РазбираемаяСтрока, " ", "");
	Если СтрДлина(РазбираемаяСтрока) > МаксимальнаяДлинаЗначенияВНазначенииПлатежа Тогда
		// УИН не обнаружен - слишком много символов 
		Возврат Описание;
	КонецЕсли;
	
	// УИН обнаружен
	Описание.Вставить("Описание", Лев(НазначениеПлатежа, ДлинаОписания));
	Описание.Вставить("Значение", РазбираемаяСтрока);
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область КодыБюджетнойКлассификации

// Приказ Минфина от 01.07.13 г. N 65н

//┌──────────────────────────────────────────────────────────────────────────────────────┐
// │                     Структура кода классификации доходов бюджетов                    │
// ├──────────────┬─────────────────────────────────────────┬───────────┬─────────────────┤
// │ Код главного │        Код вида доходов бюджетов        │Код подвида│Код классификации│
// │администратора├───────┬───────┬───────┬─────────┬───────┤  доходов  │ операций сектора│
// │   доходов    │группа │под-   │статья │подстатья│элемент│ бюджетов  │ государственного│
// │   бюджета    │доходов│группа │доходов│ доходов │доходов│           │   управления,   │
// │              │       │доходов│       │         │       │           │  относящихся к  │
// │              │       │       │       │         │       │           │ доходам бюджетов│
// ├────┬────┬────┼───────┼───┬───┼───┬───┼──┬──┬───┼───┬───┼──┬──┬──┬──┼─────┬─────┬─────┤
// │ 1  │ 2  │ 3  │   4   │ 5 │ 6 │ 7 │ 8 │9 │10│11 │12 │13 │14│15│16│17│ 18  │ 19  │  20 │
//└────┴────┴────┴───────┴───┴───┴───┴───┴──┴──┴───┴───┴───┴──┴──┴──┴──┴─────┴─────┴─────┘

Функция ДопускаетсяПустойКБК(ВидПеречисления, НомерСчетаПолучателя, Период) Экспорт
	
	Возврат ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ИнойПлатеж")
		И ЭтоСчетИсполнителяГосУслуг(НомерСчетаПолучателя, Период);
	
	КонецФункции
	
Функция ПлатежАдминистрируетсяНалоговымиОрганами(КБК) Экспорт
	
	Возврат КодГлавногоАдминистратора(КБК) = "182";
	
КонецФункции

Функция ПлатежАдминистрируетсяПенсионнымФондом(КБК) Экспорт
	
	Возврат КодГлавногоАдминистратора(КБК) = "392";
	
КонецФункции

Функция ПлатежАдминистрируетсяФСС(КБК) Экспорт
	
	Возврат КодГлавногоАдминистратора(КБК) = "393";
	
КонецФункции

Функция ПлатежАдминистрируетсяТаможеннымиОрганами(КБК) Экспорт
	
	Возврат КодГлавногоАдминистратора(КБК) = "153";
	
КонецФункции

Функция ЭтоСтраховыеВзносы(КБК) Экспорт
	
	Возврат ПодгруппаДоходов(КБК) = "102"; // страховые взносы на обязательное социальное страхование;
	
КонецФункции

Функция ЭтоДоходыОтВнешнеэкономическойДеятельности(КБК)
	
	Возврат ПодгруппаДоходов(КБК) = "110"; // доходы от внешнеэкономической деятельности;
	
КонецФункции

Функция ПодгруппаДоходов(КБК)
	
	Возврат ЭлементКБК(КБК, "ПодгруппаДоходов");
	
КонецФункции

Функция ЭлементКБК(КБК, ИмяЭлементаКБК) Экспорт
	
	РасположениеЭлемента = РасположениеЭлементаКБК(ИмяЭлементаКБК);
	
	Возврат Сред(КБК, РасположениеЭлемента.Начало, РасположениеЭлемента.Длина);
	
КонецФункции

Функция РасположениеЭлементаКБК(ИмяЭлементаКБК) Экспорт
	
	Результат = Новый Структура("Начало, Длина", 0, 0);
	Если ИмяЭлементаКБК = "КодГлавногоАдминистратора" Тогда
		Результат.Начало = 1;
		Результат.Длина  = 3;
	ИначеЕсли ИмяЭлементаКБК = "КодГруппыДоходов" Тогда
		Результат.Начало = 4;
		Результат.Длина  = 1;
	ИначеЕсли ИмяЭлементаКБК = "КодПодгруппыДоходов" Тогда
		Результат.Начало = 5;
		Результат.Длина  = 2;
	ИначеЕсли ИмяЭлементаКБК = "ПодгруппаДоходов" Тогда
		Результат.Начало = 4;
		Результат.Длина  = 3;
	ИначеЕсли ИмяЭлементаКБК = "КодСтатьиДоходов" Тогда
		Результат.Начало = 7;
		Результат.Длина  = 2;
	ИначеЕсли ИмяЭлементаКБК = "КодВидаДоходов" Тогда
		Результат.Начало = 4;
		Результат.Длина  = 10;
	ИначеЕсли ИмяЭлементаКБК = "КодЭлементаДоходов" Тогда
		Результат.Начало = 12;
		Результат.Длина  = 2;
	ИначеЕсли ИмяЭлементаКБК = "КодПодвидаДоходов" Тогда
		Результат.Начало = 14;
		Результат.Длина  = 4;
	ИначеЕсли ИмяЭлементаКБК = "КодОперацииСектораУправления" Тогда
		Результат.Начало = 18;
		Результат.Длина  = 3;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КодГлавногоАдминистратора(КБК) Экспорт
	
	Возврат ЭлементКБК(КБК, "КодГлавногоАдминистратора");
	
КонецФункции

Функция КБКЗадан(КБК) Экспорт
	
	Если НЕ РеквизитЗаполнен(КБК) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(СокрП(КБК)) <> 20 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПустойКодГлавногоАдминистратора() Экспорт
	
	Результат = "";
	РасположениеЭлемента = РасположениеЭлементаКБК("КодГлавногоАдминистратора");
	Для Счетчик = 1 По РасположениеЭлемента.Длина Цикл
		Результат = Результат + "0";
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КодВидаДоходов(КБК) Экспорт
	
	Возврат ЭлементКБК(КБК, "КодВидаДоходов");
	
КонецФункции

Функция ШаблонКБК(КБК, ПустойКодПодвидаДоходов = Истина) Экспорт
	
	Если НЕ КБКЗадан(КБК) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПустойКодПодвидаДоходов Тогда
		Возврат КодВидаДоходов(КБК) + ПустойКодПодвидаДоходов() + КодОперацииСектораУправления(КБК);
	Иначе
		Возврат КодВидаДоходов(КБК) + КодПодвидаДоходов(КБК)    + КодОперацииСектораУправления(КБК);
	КонецЕсли;
	
КонецФункции

Функция ПустойКодПодвидаДоходов() Экспорт
	
	Результат = "";
	РасположениеЭлемента = РасположениеЭлементаКБК("КодПодвидаДоходов");
	Для Счетчик = 1 По РасположениеЭлемента.Длина Цикл
		Результат = Результат + "0";
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КодОперацииСектораУправления(КБК) Экспорт
	
	Возврат ЭлементКБК(КБК, "КодОперацииСектораУправления"); // КОСГУ
	
КонецФункции

Функция НовыеРеквизитыПлатежаВБюджет(Объект, ПеречислениеВБюджет = Истина) Экспорт
	
	РеквизитыПлатежаВБюджет = Новый Структура;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		РеквизитыДокумента = РеквизитыДокумента_ПлатежноеПоручение();
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходИзКассы") Тогда
		РеквизитыДокумента = РеквизитыДокумента_РасходныйКассовыйОрдер();
	КонецЕсли;
	
	Для Каждого Реквизит Из РеквизитыДокумента Цикл
		РеквизитыПлатежаВБюджет.Вставить(Реквизит.Значение)
	КонецЦикла;
	
	Если ПеречислениеВБюджет Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыПлатежаВБюджет, Объект);
	КонецЕсли;
	
	Возврат РеквизитыПлатежаВБюджет;
	
КонецФункции

Функция РеквизитыПлатежаВБюджет() Экспорт
	
	Реквизиты = Новый Соответствие;
	
	Реквизиты.Вставить("ВидПеречисления",      "ВидПеречисленияВБюджет");
	Реквизиты.Вставить("ИдентификаторПлатежа", "ИдентификаторПлатежа");
	Реквизиты.Вставить("СтатусПлательщика",    "СтатусСоставителя");
	Реквизиты.Вставить("КБК",                  "КодБК");
	Реквизиты.Вставить("КодТерритории",        "КодОКАТО");
	Реквизиты.Вставить("ОснованиеПлатежа",     "ПоказательОснования");
	Реквизиты.Вставить("НалоговыйПериод",      "ПоказательПериода");
	Реквизиты.Вставить("НомерДокумента",       "ПоказательНомера");
	Реквизиты.Вставить("ДатаДокумента",        "ПоказательДаты");
	Реквизиты.Вставить("ТипПлатежа",           "ПоказательТипа");
	
	Возврат Реквизиты;
	
КонецФункции

Функция РеквизитыДокумента_ПлатежноеПоручение() Экспорт
	
	Реквизиты = РеквизитыПлатежаВБюджет();
	
	Реквизиты.Вставить("НазначениеПлатежа",  "НазначениеПлатежа");
	Реквизиты.Вставить("ОчередностьПлатежа", "ОчередностьПлатежа");
	
	Возврат Реквизиты;
	
КонецФункции

Функция РеквизитыДокумента_РасходныйКассовыйОрдер() Экспорт
	
	Реквизиты = РеквизитыПлатежаВБюджет();
	
	Реквизиты.Вставить("НазначениеПлатежа", "Основание");
	
	Возврат Реквизиты;
	
КонецФункции

Функция ПоказателиНалоговогоПериода(Организация, ВидНалога, Период) Экспорт
	
	Показатели = ПоказателиПериода();
	
	Если ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДС") Тогда
		// Особенность НДС в том, что он уплачивается несколькими (ежемесячными) платежами,
		// каждый из которых относится к одному и тому же периоду (кварталу).
		// Из текста правил оформления  документов нельзя сделать однозначный вывод, что указывать в данном случае - месяц или квартал.
		// Сейчас местные УФНС рекомендуют указывать значение "КВ" (квартал).
		НалоговыйПериодДляПлатежейВБюджет = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал");
		
	ИначеЕсли ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДФЛ_ИП") Тогда
		
		// Если по годовому платежу предусматривается более одного срока уплаты налогового платежа
		// и установлены конкретные даты уплаты, то указываются эти даты.
		
		НалоговыйПериодДляПлатежейВБюджет = Неопределено;
		
	ИначеЕсли ЭтоФиксированныеВзносы(ВидНалога) Тогда
		
		НалоговыйПериодДляПлатежейВБюджет = ПредопределенноеЗначение("Перечисление.Периодичность.Год");
		
	КонецЕсли;
	
	Если НалоговыйПериодДляПлатежейВБюджет <> Неопределено Тогда
		
		ПериодичностьПоКлассификатору = ПериодичностьПоКлассификатору(НалоговыйПериодДляПлатежейВБюджет);
		ПоказательПериода = НалоговыйПериод(Период, ПериодичностьПоКлассификатору);
		Показатели.Период                         = Период;
		Показатели.ПоказательПериода              = ПоказательПериода;
		Показатели.ПредставлениеНалоговогоПериода = ПредставлениеНалоговогоПериода(ПоказательПериода);
		
	ИначеЕсли ВидНалога =  ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДФЛ") Тогда
		
		ПериодУплаты = НачалоМесяца(Период) - 1;
		Показатели.Период                         = ПериодУплаты; // НДФЛ платим в месяце, следующем за окончанием налогового периода
		Показатели.ПоказательПериода              = НалоговыйПериод(ПериодУплаты, ПериодичностьМесяц());
		Показатели.ПредставлениеНалоговогоПериода = ПредставлениеНалоговогоПериода(Показатели.ПоказательПериода);
		
	ИначеЕсли ВидНалога =  ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДС") Тогда // Предприятие на УСН может заплатить НДС
		
		ПериодУплаты = НачалоКвартала(Период) - 1;
		ПоказательПериода = НалоговыйПериод(
			ПериодУплаты, ПериодичностьПоКлассификатору(ПредопределенноеЗначение("Перечисление.Периодичность.Квартал")));
		Показатели.Период                         = ПериодУплаты;
		Показатели.ПоказательПериода              = ПоказательПериода;
		Показатели.ПредставлениеНалоговогоПериода = ПредставлениеНалоговогоПериода(ПоказательПериода);
		
	Иначе
		
		Показатели.Период                         = Период;
		Показатели.ПоказательПериода              = НалоговыйПериод(Период, ПлатежПоКонкретнойДате());
		Показатели.ПредставлениеНалоговогоПериода = ПредставлениеНалоговогоПериода(Показатели.ПоказательПериода);
		
	КонецЕсли;
	
	Возврат Показатели;
	
КонецФункции

Функция ПоказателиПериода() Экспорт
	
	Возврат Новый Структура("Период, ПоказательПериода, ПредставлениеНалоговогоПериода",
		'00010101', "", "");
	
КонецФункции

Функция ПериодичностьПоКлассификатору(Периодичность) Экспорт
	
	Если Периодичность =  ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		
		Возврат ПериодичностьГод();
		
	ИначеЕсли Периодичность =  ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		
		Возврат ПериодичностьПолугодие();
		
	ИначеЕсли Периодичность =  ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		
		Возврат ПериодичностьКвартал();
		
	ИначеЕсли Периодичность =  ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		
		Возврат ПериодичностьМесяц();
		
	Иначе
		
		Возврат ПлатежПоКонкретнойДате();
		
	КонецЕсли;
	
КонецФункции

Функция ЭтоСчетИсполнителяГосУслуг(Знач НомерСчета, Период)
	
	Если НЕ ДействуетПриказ107н(Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(СокрП(НомерСчета)) <> 20 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	БалансовыйСчет       = БанковскиеПравилаКлиентСервер.БалансовыйСчет(НомерСчета);
	ПризнакЛицевогоСчета = Сред(НомерСчета, 14, 1);
	
	// Пункт 2 Приложения 4 к 107н,
	// Указание ЦБ РФ от 24 декабря 2010 г. N 2547-У
	ЭтоСчетИсполнителяГосУслуг = (БалансовыйСчет = "40302")
		ИЛИ (БалансовыйСчет = "40501" И  ПризнакЛицевогоСчета = "2")
		ИЛИ (БалансовыйСчет = "40601" И (ПризнакЛицевогоСчета = "1" ИЛИ ПризнакЛицевогоСчета = "3"))
		ИЛИ (БалансовыйСчет = "40701" И (ПризнакЛицевогоСчета = "1" ИЛИ ПризнакЛицевогоСчета = "3"))
		ИЛИ (БалансовыйСчет = "40503" И  ПризнакЛицевогоСчета = "4")
		ИЛИ (БалансовыйСчет = "40603" И  ПризнакЛицевогоСчета = "4")
		ИЛИ (БалансовыйСчет = "40703" И  ПризнакЛицевогоСчета = "4");
	
	Если ДействуетПриказ2020_199н(Период) Тогда
		ЭтоСчетИсполнителяГосУслуг = ЭтоСчетИсполнителяГосУслуг
			// Приказ Минфина от от 14.09.2020 № 199н
			Или ЭтоСчетКазначействаСредствПоступающихВоВременноеРаспоряжение(НомерСчета)
			Или БалансовыйСчет = "03214" Или БалансовыйСчет = "03224"
			Или БалансовыйСчет = "03234" Или БалансовыйСчет = "03254"
			Или БалансовыйСчет = "03231"; // Приказ Казначейства от 01.04.2020 № 15н
	КонецЕсли;
	
	Возврат ЭтоСчетИсполнителяГосУслуг;
	
КонецФункции

Функция ЭтоСчетКазначействаСредствПоступающихВоВременноеРаспоряжение(Счет)
	
	// Приказ Минфина от от 14.09.2020 № 199н
	
	БалансовыйСчет = БанковскиеПравилаКлиентСервер.БалансовыйСчет(Счет);
	
	ЭтоСчетСредствПоступающихВоВременноеРаспоряжение =
		БалансовыйСчет = "03212" Или БалансовыйСчет = "03222"
		Или БалансовыйСчет = "03232" Или БалансовыйСчет = "03242"
		Или БалансовыйСчет = "03252" Или БалансовыйСчет = "03262" Или БалансовыйСчет = "03272";
	
	Возврат ЭтоСчетСредствПоступающихВоВременноеРаспоряжение;
	
КонецФункции

#КонецОбласти

#Область ОбеспечениеВыполненияПравил

Функция РеквизитЗаполнен(Значение) Экспорт
	
	Возврат ЗначениеЗаполнено(Значение) И СокрП(Значение) <> НезаполненноеЗначение();
	
КонецФункции

// Незаполненное значение ("0")
//
Функция НезаполненноеЗначение() Экспорт
	
	// При невозможности указать конкретное значение, указывается ноль "0".
	// Наличие незаполненных реквизитов не допускается.
	
	Возврат "0";
	
КонецФункции

Функция ПениПроцентыРаздельно(КБК, Период) Экспорт
	
	Если ПлатежАдминистрируетсяНалоговымиОрганами(КБК) Тогда
		
		Возврат ДействуетПриказ126н(Период);
		
	ИначеЕсли ПлатежАдминистрируетсяПенсионнымФондом(КБК) Тогда
		
		Возврат ДействуетПриказ90н(Период);
		
	ИначеЕсли ПлатежАдминистрируетсяФСС(КБК) Тогда
		
		Возврат ДействуетПриказ90н(Период);
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СтраховыеВзносыРаздельно(Период) Экспорт
	
	Возврат ДействуетПриказ90н(Период);
	
КонецФункции

Функция ЭтоКБКШтраф(КБК) Экспорт
	
	// Из этого правила могут быть исключения, но они редкие и мы их не обслуживаем
	
	КодПодвидаДоходов = КодПодвидаДоходов(КБК);
	Возврат Лев(КодПодвидаДоходов, 1) = "3";
	
	// В некоторых случаях штраф может также определяться по типу платежа
	
КонецФункции

Функция ЭтоКБКПени(КБК) Экспорт
	
	КодПодвидаДоходов = КодПодвидаДоходов(КБК);
	Возврат Лев(КодПодвидаДоходов, 2) = "21";
	
КонецФункции

Функция ЭтоКБКПроценты(КБК) Экспорт
	
	КодПодвидаДоходов = КодПодвидаДоходов(КБК);
	Возврат Лев(КодПодвидаДоходов, 2) = "22";
	
КонецФункции

Функция ЭтоКБКПениПроценты(КБК) Экспорт
	
	// Из этого правила могут быть исключения, но они редкие и мы их не обслуживаем
	КодПодвидаДоходов = КодПодвидаДоходов(КБК);
	Возврат Лев(КодПодвидаДоходов, 1) = "2";
	
	// В некоторых случаях может определяться по типу платежа - см. ТипПлатежаПени()
	
КонецФункции

Функция КодПодвидаДоходов(КБК) Экспорт
	
	Возврат ЭлементКБК(КБК, "КодПодвидаДоходов");
	
КонецФункции

Функция ЭтоФиксированныеВзносы(ВидНалога) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФФОМС")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФСС")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_НакопительнаяЧасть"));
	
КонецФункции

Функция ЭтоКБКНалогиВзносы(КБК) Экспорт
	
	КодПодвидаДоходов = КодПодвидаДоходов(КБК);
	Возврат Лев(КодПодвидаДоходов, 1) = "1";
	
КонецФункции

#КонецОбласти

#Область СпециальныеКлассификаторы

// КЛАССИФИКАТОРЫ ДЛЯ ЗАПОЛНЕНИЯ РАСПОРЯЖЕНИЙ ПРИ УПЛАТЕ В БЮДЖЕТ
// Вводятся приказом Минфина 107Н

// Статусы плательщика - реквизит 101

// Возвращает список статусов отправителя п/п на перечисление в бюджет
//
// Возвращаемое значение:
//  СписокЗначений - в котором создаются элементы с возможными значениями статуса отправителя
//
Функция СтатусыПлательщика(Период = Неопределено) Экспорт
	
	Статусы = Новый Соответствие; // Ключ - код, Значение - представление; используем соответствие, чтобы проще описывать изменения в версиях классификатора
	
	// Старые правила
	
	Статусы.Вставить("01", "01 - налогоплательщик (плательщик сборов) - юридическое лицо"); // АПК:1297
	Статусы.Вставить("02", "02 - налоговый агент"); // АПК:1297
	Статусы.Вставить("03",
		"03 - организация федеральной почтовой связи, составившая распоряжение по каждому платежу физического лица"); // АПК:1297
	Статусы.Вставить("04", "04 - налоговый орган"); // АПК:1297
	Статусы.Вставить("05", "05 - территориальные органы Федеральной службы судебных приставов"); // АПК:1297
	Статусы.Вставить("06", "06 - участник внешнеэкономической деятельности - юридическое лицо"); // АПК:1297
	Статусы.Вставить("07", "07 - таможенный орган"); // АПК:1297
	
	Если ДействуетПриказ2017_58н(Период) Тогда
		Статусы.Вставить("08",
			"08 - юридическое лицо, индивидуальный предприниматель, уплачивающий иные платежи (за исключением налогов, сборов, страховых взносов и иных платежей, администрируемых налоговыми органами)"); // АПК:1297
	Иначе
		Статусы.Вставить("08",
			"08 - плательщик - юридическое лицо, индивидуальный предприниматель уплачивающий иные платежи"); // АПК:1297
	КонецЕсли;
	
	Если Не ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		Статусы.Вставить("09",
			"09 - налогоплательщик (плательщик сборов, страховых взносов и иных платежей, администрируемых налоговыми органами) - индивидуальный предприниматель"); // АПК:1297
		Статусы.Вставить("10",
			"10 - налогоплательщик (плательщик сборов, страховых взносов и иных платежей, администрируемых налоговыми органами) - нотариус, занимающийся частной практикой"); // АПК:1297
		Статусы.Вставить("11",
			"11 - налогоплательщик (плательщик сборов, страховых взносов и иных платежей, администрируемых налоговыми органами) - адвокат, учредивший адвокатский кабинет"); // АПК:1297
		Статусы.Вставить("12",
			"12 - налогоплательщик (плательщик сборов, страховых взносов и иных платежей, администрируемых налоговыми органами) - глава крестьянского (фермерского) хозяйства"); // АПК:1297
	КонецЕсли;
	
	Статусы.Вставить("13",
		"13 - налогоплательщик (плательщик сборов, за совершение налоговыми органами юридически значимых действий, страховых взносов и иных платежей, администрируемых налоговыми органами) - физическое лицо"); // АПК:1297
	
	Если Не ДействуетПриказ2017_58н(Период) Тогда
		Статусы.Вставить("14",
			"14 - налогоплательщик, производящий выплаты физическим лицам"); // АПК:1297
	КонецЕсли;
	
	Статусы.Вставить("15",
		"15 - кредитная организация (филиал кредитной организации), платежный агент, организация федеральной почтовой связи, составившие платежное поручение на общую сумму с реестром"); // АПК:1297
	Статусы.Вставить("16",
		"16 - участник внешнеэкономической деятельности - физическое лицо"); // АПК:1297
	Статусы.Вставить("17", "17 - участник внешнеэкономической деятельности - индивидуальный предприниматель"); // АПК:1297
	Статусы.Вставить("18",
		"18 - плательщик таможенных платежей, не являющийся декларантом, на которого законодательством Российской Федерации возложена обязанность по уплате таможенных платежей"); // АПК:1297
	Статусы.Вставить("19",
		"19 - организации, переводящие средства, удержанные из заработной платы на основании исполнительного документа"); // АПК:1297
	Статусы.Вставить("20",
		"20 - кредитная организация (филиал кредитной организации), платежный агент, составившие распоряжение по каждому платежу физического лица"); // АПК:1297
	Статусы.Вставить("21", "21 - ответственный участник консолидированной группы налогоплательщиков"); // АПК:1297
	Статусы.Вставить("22", "22 - участник консолидированной группы налогоплательщиков"); // АПК:1297
	
	Если ДействуетПриказ2017_58н(Период) Тогда
		Статусы.Вставить("23", "23 - Фонд социального страхования Российской Федерации"); // АПК:1297
	Иначе
		Статусы.Вставить("23", "23 - органы контроля за уплатой страховых взносов"); // АПК:1297
	КонецЕсли;
	
	Статусы.Вставить("24",
		"24 - физическое лицо, осуществляющее перевод денежных средств в уплату сборов, страховых взносов, администрируемых ФСС, и иных платежей"); // АПК:1297
	Статусы.Вставить("25",
		"25 - банки - гаранты, составившие распоряжение о переводе денежных средств в бюджетную систему Российской Федерации за плательщика суммы налога на добавленную стоимость, излишне полученной им (зачтенной ему) в результате возмещения налога на добавленную стоимость в заявительном порядке, а также по уплате акцизов, исчисленных по операциям реализации подакцизных товаров за пределы территории Российской Федерации, и акцизов в размере авансового платежа акцизов по алкогольной и (или) подакцизной спиртосодержащей продукции"); // АПК:1297
	Статусы.Вставить("26",
		"26 - учредители (участники) должника, собственники имущества должника - унитарного предприятия или третьи лица, составившие распоряжение на погашение задолженности по обязательным платежам, включенным в реестр требований кредиторов, в ходе процедур, применяемых в деле о банкротстве"); // АПК:1297
	
	Если ДействуетПриказ2017_58н_Отложенный(Период) Тогда
		Статусы.Вставить("27",
			"27 - кредитные организации составившие распоряжение о переводе денежных средств, перечисленных из бюджетной системы РФ, не зачисленных получателю и подлежащих возврату в бюджетную систему РФ"); // АПК:1297
		Статусы.Вставить("28",
			"28 - участник внешнеэкономической деятельности - получатель международного почтового отправления"); // АПК:1297
	КонецЕсли;
	
	Если ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		Статусы.Вставить("29", "29 - Политическая партия, избирательное объединение, зарегистрированный кандидат"); // АПК:1297
		Статусы.Вставить("30", "30 - Иностранное лицо, не состоящее на учете в налоговых органах РФ (при уплате платежей, администрируемых таможенными органами)"); // АПК:1297
	КонецЕсли;
	
	Возврат УпаковатьСоответствиеВСписокЗначений(Статусы);
	
КонецФункции


Функция ПериодичностьГод() Экспорт
	
	Возврат "ГД";
	
КонецФункции

Функция ПериодичностьПолугодие() Экспорт
	
	Возврат "ПЛ";
	
КонецФункции

Функция ПериодичностьКвартал() Экспорт
	
	Возврат "КВ";
	
КонецФункции

Функция ПериодичностьМесяц() Экспорт
	
	Возврат "МС";
	
КонецФункции

Функция ПлатежПоКонкретнойДате() Экспорт
	
	Возврат "-"; // Важно, чтобы отличалось от незаполненного значения
	
КонецФункции

Функция НалоговыйПериод(Период, Знач Периодичность, Знач Год = Неопределено, Знач НомерПериода = Неопределено) Экспорт
	
	Если Периодичность = НезаполненноеЗначение()
		ИЛИ ВидыНалоговыхПериодов().НайтиПоЗначению(Периодичность) = Неопределено Тогда
		
		Возврат НезаполненноеЗначение();
		
	ИначеЕсли Периодичность = ПлатежПоКонкретнойДате() Тогда
		
		Возврат ПреобразоватьДатуКСтроке(Период);
		
	КонецЕсли;
	
	// Для остальных нужен Год и НомерПериода
	Если (НомерПериода = Неопределено ИЛИ Год = Неопределено)
		И НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат НезаполненноеЗначение();
	КонецЕсли;
	
	Если Год = Неопределено Тогда
		Год          = Год(Период);
	КонецЕсли;
	
	Если НомерПериода = Неопределено Тогда
		НомерПериода = 0;
		
		Если Периодичность = ПериодичностьКвартал() Тогда
			НомерПериода = (2 + Месяц(НачалоКвартала(Период))) / 3;
		ИначеЕсли Периодичность = ПериодичностьМесяц() Тогда
			НомерПериода = Месяц(Период);
		ИначеЕсли Периодичность = ПериодичностьПолугодие() Тогда
			Если Месяц(Период) <= 6 Тогда
				НомерПериода = 1;
			Иначе
				НомерПериода = 2;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Периодичность
		+ "." + Формат(НомерПериода, "ЧЦ=2; ЧН=; ЧВН=")
		+ "." + Формат(Год, "ЧЦ=4; ЧГ=");
	
КонецФункции

Функция ПреобразоватьДатуКСтроке(Дата) Экспорт
	
	Если ТипЗнч(Дата) = Тип("Дата") И ЗначениеЗаполнено(Дата) Тогда
		Возврат Формат(Дата, "ДФ=dd.MM.yyyy");
	Иначе
		Возврат НезаполненноеЗначение();
	КонецЕсли;
	
КонецФункции

Функция МаксимальноеЗначениеПоПериодичности(Периодичность)
	
	Результат = Неопределено;
	Если Периодичность = ПериодичностьМесяц() Тогда
		Результат = 12;
	ИначеЕсли Периодичность = ПериодичностьКвартал() Тогда
		Результат = 4;
	ИначеЕсли Периодичность = ПериодичностьПолугодие() Тогда
		Результат = 2;
	ИначеЕсли Периодичность = ПериодичностьГод() Тогда
		Результат = 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеНалоговогоПериода(НалоговыйПериод) Экспорт
	
	ОписаниеПериода = РазобратьНалоговыйПериод(НалоговыйПериод);
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Год",          Формат(ОписаниеПериода.Год,  "ЧГ=0"));
	ПараметрыТекста.Вставить("НомерПериода", ОписаниеПериода.НомерПериода);
	
	Если ОписаниеПериода.Периодичность = ПлатежПоКонкретнойДате() Тогда
		Шаблон = НСтр("ru = 'по сроку уплаты [Дата]'");
		ПараметрыТекста.Вставить("Дата", Формат(ОписаниеПериода.Дата, "ДФ=dd.MM.yyyy"));
	ИначеЕсли ОписаниеПериода.Периодичность = ПериодичностьГод() Тогда
		Шаблон = НСтр("ru = 'за [Год] год'");
	ИначеЕсли ОписаниеПериода.Периодичность = ПериодичностьПолугодие() Тогда
		Шаблон = НСтр("ru = 'за [НомерПериода] полугодие [Год] года'");
	ИначеЕсли ОписаниеПериода.Периодичность = ПериодичностьКвартал() Тогда
		Шаблон = НСтр("ru = 'за [НомерПериода] квартал [Год] года'");
	ИначеЕсли ОписаниеПериода.Периодичность = ПериодичностьМесяц() Тогда
		Шаблон = НСтр("ru = 'за [ИмяМесяца] [Год] года'");
		ПараметрыТекста.Вставить("ИмяМесяца", НРег(Формат(ОписаниеПериода.Дата, "ДФ=MMMM")));
	Иначе
		Шаблон = "";
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыТекста);
	
КонецФункции

Функция ДатаНачалаНалоговогоПериода(Периодичность, Год, НомерПериода)
	
	Если Год = 0 Тогда
		Возврат Дата(1, 1, 1);
	ИначеЕсли НомерПериода = 0 Тогда
		Возврат Дата(Год, 1, 1);
	ИначеЕсли Периодичность = ПериодичностьМесяц() Тогда
		Возврат Дата(Год, НомерПериода, 1);
	ИначеЕсли Периодичность = ПериодичностьКвартал() Тогда
		Возврат Дата(Год, НомерПериода * 3 - 2, 1);
	ИначеЕсли Периодичность = ПериодичностьПолугодие() Тогда
		Возврат Дата(Год, НомерПериода * 6 - 5, 1);
	Иначе
		Возврат Дата(Год, 1, 1);
	КонецЕсли;
	
КонецФункции

Функция РазобратьНалоговыйПериод(Знач НалоговыйПериод) Экспорт
	
	ОписаниеПериода = Новый Структура;
	ОписаниеПериода.Вставить("Периодичность", НезаполненноеЗначение());
	ОписаниеПериода.Вставить("Год",           0);
	ОписаниеПериода.Вставить("НомерПериода",  0);
	ОписаниеПериода.Вставить("Дата",          '0001-01-01');
	
	// Реквизит 107 заполняется налоговым периодом, который имеет 10 знаков, 
	// восемь из которых имеют смысловое значение, а два являются разделительными знаками и заполняются точками (".")
	
	Если СтрДлина(НалоговыйПериод) <> 10 Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	ЧастиПериода = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НалоговыйПериод, ".", Ложь);
	Если ЧастиПериода.Количество() <> 3 Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	// Предусмотрены два варианта:
	// 1. Первые два знака налогового периода предназначены для определения периодичности уплаты
	// 2. Форматом "день.месяц.год" указывается конкретная дата (например: "05.09.2003")
	
	Если СтрДлина(ЧастиПериода[0]) <> 2 Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастиПериода[1])
		ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастиПериода[2]) Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	Периодичность = ЧастиПериода[0];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Периодичность) Тогда
		Периодичность = ПлатежПоКонкретнойДате();
	ИначеЕсли ВидыНалоговыхПериодов().НайтиПоЗначению(Периодичность) = Неопределено Тогда
		Возврат ОписаниеПериода;
	КонецЕсли;
	
	Если Периодичность = ПлатежПоКонкретнойДате() Тогда
		Попытка
			Значение = Дата(ЧастиПериода[2], ЧастиПериода[1], ЧастиПериода[0]);
		Исключение
			Значение = Неопределено;
		КонецПопытки;
		Если Значение = Неопределено Тогда
			Возврат ОписаниеПериода;
		Иначе
			ОписаниеПериода.Дата = Значение;
			ОписаниеПериода.Год  = Год(Значение);
		КонецЕсли;
	Иначе
		Попытка
			НомерПериода = Число(ЧастиПериода[1]);
			Год          = Число(ЧастиПериода[2]);
		Исключение
			НомерПериода = 0;
			Год          = 0;
		КонецПопытки;
		Если Год = 0 Тогда
			Возврат ОписаниеПериода;
		Иначе
			МаксимальноеЗначениеПоПериодичности = МаксимальноеЗначениеПоПериодичности(Периодичность);
			Если МаксимальноеЗначениеПоПериодичности = Неопределено ИЛИ НомерПериода > МаксимальноеЗначениеПоПериодичности Тогда
				Возврат ОписаниеПериода;
			КонецЕсли;
			
			ОписаниеПериода.НомерПериода = НомерПериода;
			ОписаниеПериода.Год          = Год;
			ОписаниеПериода.Дата         = ДатаНачалаНалоговогоПериода(Периодичность, Год, НомерПериода);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПериода.Периодичность = Периодичность;
	Возврат ОписаниеПериода;
	
КонецФункции

// Возвращает список вариантов налоговых периодов
//
// Возвращаемое значение:
//  СписокЗначений - в котором создаются элементы с вариантами налоговых периодов
//
Функция ВидыНалоговыхПериодов() Экспорт
	
	// Первые два знака налогового периода предназначены для определения периодичности уплаты
	
	Периоды = Новый СписокЗначений;
	Периоды.Добавить(ПериодичностьМесяц(),     "МС - месячный платеж");
	Периоды.Добавить(ПериодичностьКвартал(),   "КВ - квартальный платеж");
	Периоды.Добавить(ПериодичностьПолугодие(), "ПЛ - полугодовой платеж");
	Периоды.Добавить(ПериодичностьГод(),       "ГД - годовой платеж"); 
	Периоды.Добавить(ПлатежПоКонкретнойДате(), "Платеж по конкретной дате");
	Периоды.Добавить(НезаполненноеЗначение(),  "0 - значение не указывается");
	
	Возврат Периоды;
	
КонецФункции

// Основания платежа - реквизит 106

Функция ОснованияПлатежа(ВидПеречисления, Период = Неопределено) Экспорт
	
	ОснованияПлатежа = Новый СписокЗначений;
		
	Если ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		ОснованияПлатежа = ОснованияНалоговогоПлатежа(Период);
	ИначеЕсли ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		ОснованияПлатежа = ОснованияТаможенногоПлатежа(Период);
	Иначе
		ОснованияПлатежа.Добавить(НезаполненноеЗначение(), НСтр("ru = '0 - значение не заполняется'"));
	КонецЕсли;
	
	Возврат ОснованияПлатежа;
	
КонецФункции

Функция ОснованияНалоговогоПлатежа(Период = Неопределено) Экспорт
	
	Основания = Новый СписокЗначений;
	
	Основания.Добавить("ТП", "ТП - платежи текущего года"); // АПК:1297
	
	Если ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		Основания.Добавить("ЗД",
			"ЗД - погашение задолженности по истекшим налоговым периодам, в том числе добровольное"); // АПК:1297
	Иначе
		Основания.Добавить("ЗД", "ЗД - добровольное погашение задолженности по истекшим периодам"); // АПК:1297
		Основания.Добавить("ТР", "ТР - погашение задолженности по требованию налогового органа об уплате налогов (сборов)"); // АПК:1297
		Основания.Добавить("АП", "АП - погашение задолженности по акту проверки"); // АПК:1297
		Основания.Добавить("АР", "АР - погашение задолженности по исполнительному документу"); // АПК:1297
		Основания.Добавить("БФ",
			"БФ - текущие платежи физических лиц - клиента банка (владельца счета), уплачиваемые со своего банковского счета"); // АПК:1297
		Основания.Добавить("ПР", "ПР - погашение задолженности, приостановленной к взысканию"); // АПК:1297
	КонецЕсли;
	
	Основания.Добавить("РС", "РС - погашение рассроченной задолженности"); // АПК:1297
	Основания.Добавить("ОТ", "ОТ - погашение отсроченной задолженности"); // АПК:1297
	// АПК:1297-выкл
	Основания.Добавить("РТ", "РТ - погашение реструктурируемой задолженности"); // АПК:1297
	// АПК:1297-вкл
	Если ДействуетПриказ107н(Период) Тогда
		Основания.Добавить("ИН", "ИН - погашение инвестиционного налогового кредита"); // АПК:1297
		Основания.Добавить("ПБ", "ПБ - погашение должником задолженности в ходе процедур, применяемых в деле о банкротстве"); // АПК:1297
		Основания.Добавить("ТЛ",
			"ТЛ - погашение учредителем (участником) должника, собственником имущества должника - унитарного предприятия или третьим лицом задолженности в ходе процедур, применяемых в деле о банкротстве"); // АПК:1297
		Основания.Добавить("ЗТ", "ЗТ - погашение текущей задолженности в ходе процедур, применяемых в деле о банкротстве"); // АПК:1297
	Иначе
		Основания.Добавить("ВУ", "ВУ - погашение отсроченной задолженности в связи с введением внешнего управления"); // АПК:1297
	КонецЕсли;
	
	Основания.Добавить(НезаполненноеЗначение(), "0 - невозможно указать конкретное значение"); // АПК:1297
	
	Возврат Основания;
	
КонецФункции

Функция ОснованияТаможенногоПлатежа(Период = Неопределено)
	
	Основания = Новый СписокЗначений;
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДата(); // АПК:143
	КонецЕсли;
	
	Если ДействуетПриказ107н(Период)
		И Не ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		Основания.Добавить("ДЕ", "ДЕ - декларация на товары"); // АПК:1297
	ИначеЕсли Период < НачалоДействияПриказа107н() Тогда
		Основания.Добавить("ДЕ", "ДЕ - таможенная декларация"); // АПК:1297
	КонецЕсли;
	
	Если ДействуетПриказ2017_58н_Отложенный(Период)
		И Не ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		Основания.Добавить("ПД", "ПД - пассажирская таможенная декларация"); // АПК:1297
	КонецЕсли;
	
	Если Не ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		Основания.Добавить("ПО", "ПО - таможенный приходный ордер"); // АПК:1297
	КонецЕсли;
	
	Основания.Добавить("БД", "БД - документы финансово-хозяйственной деятельности таможенных органов"); // АПК:1297
	
	Если ДействуетПриказ2017_58н_Отложенный(Период) Тогда
		Основания.Добавить("КВ", "КВ - квитанция получателя международного почтового отправления"); // АПК:1297
	ИначеЕсли Период < НачалоДействияПриказа107н() Тогда
		Основания.Добавить("КВ", "КВ - постановление-квитанция (при уплате штрафа)"); // АПК:1297
	КонецЕсли;
	
	Если ДействуетПриказ107н(Период)
		И Не ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		Основания.Добавить("КТ",
			"КТ - корректировка таможенной стоимости, таможенных платежей или декларации на товары"); // АПК:1297
	ИначеЕсли Период < НачалоДействияПриказа107н() Тогда
		Основания.Добавить("КТ", "КТ - форма корректировки таможенной стоимости и таможенных платежей"); // АПК:1297
	КонецЕсли;
	
	Основания.Добавить("ПК", "ПК - таможенный приходный ордер"); // АПК:1297
	
	Если ДействуетПриказ2020_199н_Отложенный(Период) Тогда
		Основания.Добавить("КЭ",
			"КЭ - квитанция физического лица - получателя товаров, перемещаемых в качестве экспресс-грузов"); // АПК:1297
		Основания.Добавить("УВ",
			"УВ - уведомление о не уплаченных в установленный срок суммах таможенных платежей в соответствии со статьями 26-28 Федерального закона № 289-ФЗ"); // АПК:1297
		Основания.Добавить("ИЛ", "ИЛ - исполнительный лист"); // АПК:1297
		Основания.Добавить("ПБ", "ПБ - поручение таможенного органа на бесспорное взыскание"); // АПК:1297
		Основания.Добавить("ТГ", "ТГ - требование об уплате денежных средств гарантирующим объединением (ассоциацией)"); // АПК:1297
		Основания.Добавить("ТБ",
			"ТБ - требование об уплате суммы по банковской гарантии или договору поручительства, если уплата денежных средств производится по банковской гарантии"); // АПК:1297
		Основания.Добавить("ТД",
			"ТД - требование об уплате суммы по банковской гарантии или договору поручительства, если уплата денежных средств производится по договору поручительства"); // АПК:1297
		Основания.Добавить("ПВ",
			"ПВ - постановление о взыскании таможенных платежей, специальных, антидемпинговых, компенсационных пошлин, процентов и пени за счет имущества"); // АПК:1297
	Иначе
		Основания.Добавить("ИД", "ИД - исполнительный документ"); // АПК:1297
		Основания.Добавить("ИП", "ИП - инкассовое поручение"); // АПК:1297
		Основания.Добавить("ТУ", "ТУ - требование об уплате таможенных платежей"); // АПК:1297
		Основания.Добавить("КП", "КП - соглашение о взаимодействии при уплате крупными плательщиками суммарных платежей в централизованном порядке"); // АПК:1297
		Основания.Добавить("ДК", "ДК - декларация на товары, платежи по которой уплачиваются плательщиками таможенных платежей в соответствии со статьями 114, 115, 116 Федерального закона N 311-ФЗ с использованием электронных терминалов, платежных терминалов и банкоматов"); // АПК:1297
		Основания.Добавить("КК", "КК - корректировка декларации на товары, платежи по которой уплачиваются плательщиками таможенных платежей в соответствии со статьями 114, 115, 116 Федерального закона N 311-ФЗ с использованием электронных терминалов, платежных терминалов и банкоматов"); // АПК:1297
		Основания.Добавить("ТК", "ТК - требование об уплате таможенных платежей, платежи по которому уплачиваются плательщиками таможенных платежей в соответствии со статьями 114, 115, 116 Федерального закона N 311-ФЗ с использованием электронных терминалов, платежных терминалов и банкоматов"); // АПК:1297
	КонецЕсли;
	
	Основания.Добавить("ИН", "ИН - документ инкассации"); // АПК:1297
	
	Основания.Добавить(ИныеСлучаи(), "00 - иные случаи"); // АПК:1297
	Основания.Добавить(НезаполненноеЗначение(), "0 - невозможно указать конкретное значение"); // АПК:1297
	
	Возврат Основания;
	
КонецФункции

Функция ИныеСлучаи()
	
	Возврат "00";
	
КонецФункции

// Типы платежа - реквизит 110

Функция ТипыПлатежа(ВидПеречисления, Период = Неопределено) Экспорт
	
	ТипыПлатежа = Новый СписокЗначений;
	
	Если Период >= НачалоДействияПриказа126н() Тогда
		Возврат ТипыПлатежа;
	КонецЕсли;
	
	Если ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		ТипыПлатежа = ТипыНалоговогоПлатежа(Период);
	ИначеЕсли ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		ТипыПлатежа = ТипыТаможенногоПлатежа(Период);
	Иначе
		ТипыПлатежа.Добавить(НезаполненноеЗначение(), НСтр("ru = '0 - значение не заполняется'"));
	КонецЕсли;
	
	Возврат ТипыПлатежа;
	
КонецФункции

Функция ТипыНалоговогоПлатежа(Период = Неопределено)
	
	ТипыПлатежа = Новый СписокЗначений;
	
	Если ДействуетПриказ107н(Период) Тогда
		ТипыПлатежа.Добавить(НезаполненноеЗначение(), "0 - все, кроме пени и процентов"); // АПК:1297
		ТипыПлатежа.Добавить(ТипПлатежаПени(), "ПЕ - уплата пени"); // АПК:1297
		ТипыПлатежа.Добавить("ПЦ", "ПЦ - уплата процентов"); // АПК:1297
	Иначе
		ТипыПлатежа.Добавить("НС", "НС - уплата налога или сбора"); // АПК:1297
		ТипыПлатежа.Добавить("ПЛ", "ПЛ - уплата платежа"); // АПК:1297
		ТипыПлатежа.Добавить("ГП", "ГП - уплата пошлины"); // АПК:1297
		ТипыПлатежа.Добавить("ВЗ", "ВЗ - уплата взноса"); // АПК:1297
		ТипыПлатежа.Добавить(ТипПлатежаАванс(), "АВ - уплата аванса или предоплата (в том числе декадные платежи)"); // АПК:1297
		ТипыПлатежа.Добавить(ТипПлатежаПени(), "ПЕ - уплата пени"); // АПК:1297
		ТипыПлатежа.Добавить("ПЦ", "ПЦ - уплата процентов"); // АПК:1297
		ТипыПлатежа.Добавить(ТипПлатежаНалоговыйШтраф(), "СА - налоговые санкции, установленные Налоговым кодексом РФ"); // АПК:1297
		ТипыПлатежа.Добавить(ТипПлатежаАдминистративныйШтраф(), "АШ - административные штрафы"); // АПК:1297
		ТипыПлатежа.Добавить(ТипПлатежаИнойШтраф(), "ИШ - иные штрафы, установленные соответствующими нормативными актами"); // АПК:1297
		ТипыПлатежа.Добавить(НезаполненноеЗначение(), "0 - невозможно указать конкретное значение"); // АПК:1297
	КонецЕсли;
	
	Возврат ТипыПлатежа;
	
КонецФункции

Функция ТипыТаможенногоПлатежа(Период = Неопределено)
	
	ТипыПлатежа = Новый СписокЗначений;
	
	Если ДействуетПриказ107н(Период) Тогда
		
		ТипыПлатежа.Добавить(НезаполненноеЗначение(), "0 - остальные случаи"); // АПК:1297
		
		ТипыПлатежа.Добавить("ШТ", "ШТ - уплата штрафа"); // АПК:1297
		ТипыПлатежа.Добавить("ЗД", "ЗД - уплата в счет погашения задолженности"); // АПК:1297
		ТипыПлатежа.Добавить(ТипПлатежаПени(), "ПЕ - уплата пени"); // АПК:1297
	Иначе
		ТипыПлатежа.Добавить("ТП", "ТП - текущий платеж"); // АПК:1297
		
		ТипыПлатежа.Добавить("ШТ", "ШТ - уплата штрафа"); // АПК:1297
		ТипыПлатежа.Добавить("ЗД", "ЗД - уплата в счет погашения задолженности"); // АПК:1297
		ТипыПлатежа.Добавить(ТипПлатежаПени(), "ПЕ - уплата пени"); // АПК:1297
		
		ТипыПлатежа.Добавить(НезаполненноеЗначение(), "0 - невозможно указать конкретное значение"); // АПК:1297
	КонецЕсли;
	
	Возврат ТипыПлатежа;
	
КонецФункции

Функция ТипПлатежаАванс() Экспорт
	
	Возврат "АВ";
	
КонецФункции

Функция ТипПлатежаПени() Экспорт
	
	Возврат "ПЕ";
	
КонецФункции

Функция ЭтоТипПлатежаШтраф(ТипПлатежа) Экспорт
	
	Возврат ТипПлатежа = ТипПлатежаНалоговыйШтраф()
		ИЛИ ТипПлатежа = ТипПлатежаАдминистративныйШтраф()
		ИЛИ ТипПлатежа = ТипПлатежаИнойШтраф();
	
КонецФункции

Функция ТипПлатежаНалоговыйШтраф()
	
	Возврат "СА";
	
КонецФункции

Функция ТипПлатежаАдминистративныйШтраф()
	
	Возврат "АШ";
	
КонецФункции

Функция ТипПлатежаИнойШтраф()
	
	Возврат "ИШ";
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

Функция ОставитьВСтрокеТолькоЦифры(ИсходнаяСтрока) Экспорт
	
	СтрокаРезультат = "";
	
	Для а = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, а, 1);
		КодСимвола = КодСимвола(ТекущийСимвол);
		Если КодСимвола >= 48 И КодСимвола <= 57 Тогда
			СтрокаРезультат = СтрокаРезультат + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаРезультат;
	
КонецФункции

Функция УпаковатьСоответствиеВСписокЗначений(Соответствие)
	
	Список = Новый СписокЗначений;
	Для каждого КлючИЗначение Из Соответствие Цикл
		Список.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Список.СортироватьПоЗначению();
	
	Возврат Список;
	
КонецФункции
#КонецОбласти

