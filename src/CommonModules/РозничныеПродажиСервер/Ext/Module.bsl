
&НаСервере
Функция ПолучитьИННКассира() Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат "";
	КонецЕсли;
	
	ИННКассира = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизЛицо, "ИНН");
	
	Возврат ИННКассира;
	
КонецФункции
#Область ПрограммныйИнтерфейс

&НаСервере
Функция ПолучитьИмяКассира() Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат "";
	КонецЕсли;
	
	СтруктураФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", ФизЛицо)); 
	
	СтрокаФИО = "";
	СтрокаФИО = СтрокаФИО + ?(СтрокаФИО = "", "", " ") + СтруктураФИО.Фамилия;
	СтрокаФИО = СтрокаФИО + ?(СтрокаФИО = "" ИЛИ СтруктураФИО.Имя = "", "", " ") + СтруктураФИО.Имя;
	СтрокаФИО = СтрокаФИО + ?(СтрокаФИО = "" ИЛИ СтруктураФИО.Отчество = "", "", " ") + СтруктураФИО.Отчество;
	
	ИмяКассира = СтрокаФИО;

	Возврат ИмяКассира;
	
КонецФункции

// Функция возвращает структуру, характеризующую состояние последней кассовой смены по кассе ККМ.
//
Функция ПолучитьСостояниеКассовойСмены(КассаККМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КассоваяСменаДокумент.Номер КАК НомерКассовойСмены,
	|	КассоваяСменаДокумент.Ссылка КАК КассоваяСмена,
	|	КассоваяСменаДокумент.Статус КАК СтатусКассовойСмены,
	|	КассоваяСменаДокумент.КассаККМ КАК КассаККМ,
	|	КассоваяСменаДокумент.КассаККМ.ВалютаДенежныхСредств КАК ВалютаДокумента,
	|	КассоваяСменаДокумент.КассаККМ.ВалютаДенежныхСредств.Представление КАК ВалютаДокументаПредставление,
	|	КассоваяСменаДокумент.Организация КАК Организация,
	|	КассоваяСменаДокумент.КассаККМ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	Представление(КассоваяСменаДокумент.КассаККМ.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
	|	ВЫБОР
	|		КОГДА КассоваяСменаДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СменаОткрыта,
	|	ВЫБОР
	|		КОГДА КассоваяСменаДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА КассоваяСменаДокумент.НачалоКассовойСмены
	|		ИНАЧЕ КассоваяСменаДокумент.ОкончаниеКассовойСмены
	|	КОНЕЦ КАК ДатаИзмененияСтатуса,
	|	ЕСТЬNULL(ДенежныеСредстваККМОстатки.СуммаВалОстаток, 0) КАК НаличностьВКассе,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.Ссылка, НЕОПРЕДЕЛЕНО) КАК ОтчетОРозничныхПродажах,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.ВидЦен, НЕОПРЕДЕЛЕНО)  КАК ВидЦен,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.НалогообложениеНДС, НЕОПРЕДЕЛЕНО)  КАК НалогообложениеНДС,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.Ответственный, НЕОПРЕДЕЛЕНО)  КАК Ответственный,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.Подразделение, НЕОПРЕДЕЛЕНО)  КАК Подразделение,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.СуммаВключаетНДС, НЕОПРЕДЕЛЕНО)  КАК СуммаВключаетНДС,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.НДСВключатьВСтоимость, НЕОПРЕДЕЛЕНО)  КАК НДСВключатьВСтоимость
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСменаДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваККМОстатки
	|		ПО КассоваяСменаДокумент.КассаККМ = ДенежныеСредстваККМОстатки.КассаККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО КассоваяСменаДокумент.Ссылка = ОтчетОРозничныхПродажах.КассоваяСмена
	|ГДЕ
	|	КассоваяСменаДокумент.Проведен
	|	И КассоваяСменаДокумент.КассаККМ = &КассаККМ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСменаДокумент.Дата УБЫВ,
	|	КассоваяСмена УБЫВ";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОписаниеКассовойСмены = ПолучитьСтруктуруОписанияКассовойСмены();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);
		Если НЕ ЗначениеЗаполнено(ОписаниеКассовойСмены.НалогообложениеНДС) Тогда
			ОписаниеКассовойСмены.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОписаниеКассовойСмены.Ответственный) Тогда
			ОписаниеКассовойСмены.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				Пользователи.ТекущийПользователь(),
				"ОсновнойОтветственный"
			);
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ДенежныеСредстваККМОстатки.СуммаВалОстаток, 0) КАК НаличностьВКассе
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(
		|				,
		|				КассаККМ = &КассаККМ) КАК ДенежныеСредстваККМОстатки
		|		ПО (ДенежныеСредстваККМОстатки.КассаККМ = КассыККМ.Ссылка)
		|ГДЕ
		|	КассыККМ.Ссылка = &КассаККМ";
		
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОписаниеКассовойСмены.КассаККМ = КассаККМ;
		ОписаниеКассовойСмены.НаличностьВКассе    = Выборка.НаличностьВКассе;
	КонецЕсли;
	
	Возврат ОписаниеКассовойСмены;
	
КонецФункции

// Функция возвращает текущую сумму положительного остатка денежных средств (ДС) по кассе ККМ.
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ
// Возвращаемое значение:
//  Число
//
Функция СуммаОстаткаДСПоКассеККМ(КассаККМ, ДоговорПлатежногоАгента = Неопределено) Экспорт

	ЗапросОстатокДСвКассе= Новый Запрос();
	ЗапросОстатокДСвКассе.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваККМОстатки.СуммаОстаток КАК СуммаОстатка
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(
	|			,
	|			КассаККМ = &КассаККМ) КАК ДенежныеСредстваККМОстатки
	|ГДЕ
	|	ДенежныеСредстваККМОстатки.СуммаОстаток > 0";
	ЗапросОстатокДСвКассе.УстановитьПараметр("КассаККМ", КассаККМ);
		
	ВыборкаОстатокДСвКассе = ЗапросОстатокДСвКассе.Выполнить().Выбрать();
	Если ВыборкаОстатокДСвКассе.Следующий() Тогда
		СуммаОстатка = ВыборкаОстатокДСвКассе.СуммаОстатка;
	Иначе
		СуммаОстатка = 0;
	КонецЕсли;
	
	Возврат СуммаОстатка;
	
КонецФункции // СуммаОстаткаДСПоКассеККМ()

// Функция выполняет открытие кассовой смены.
//
Функция ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки = "", ТекстПереходящегоОстатка = "", КассоваяСмена = Неопределено) Экспорт
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	ДатаОткрытияКассовойСмены = ТекущаяДатаСеанса();
	
	ТекстПереходящегоОстатка = "";
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена; 
		
		// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
		Если ДатаОткрытияКассовойСмены - СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса < 86400 Тогда
			
			// Все в порядке
			
		Иначе
			
			Результат = Ложь;
			// Вероятно, что смена была не закрыта.
			ОписаниеОшибки = НСтр("ru = 'С момента открытия кассовой смены истекло более 24 часов.'");
			
		КонецЕсли;
		
	Иначе
		
		// Смена закрыта. Откроем новую кассовую смену.
		
		НоваяКассоваяСмена = Документы.КассоваяСмена.СоздатьДокумент();
		РеквизитыКассыККМ = Справочники.КассыККМ.ПолучитьРеквизитыКассыККМ(КассаККМ);
		ЗаполнитьЗначенияСвойств(НоваяКассоваяСмена, РеквизитыКассыККМ);
		
		НоваяКассоваяСмена.Дата                   = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.Статус                 = Перечисления.СтатусыКассовойСмены.Открыта;
		НоваяКассоваяСмена.НачалоКассовойСмены    = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.ОкончаниеКассовойСмены = '00010101';
		
		Если НоваяКассоваяСмена.ПроверитьЗаполнение() Тогда
			НоваяКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
			
			СуммаОстатка = СуммаОстаткаДСПоКассеККМ(КассаККМ);
			Если СуммаОстатка <> 0 Тогда
				ТекстПереходящегоОстатка = НСтр("ru = 'Сумма остатка в кассе: %1 руб.'");
				ТекстПереходящегоОстатка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПереходящегоОстатка, 
																						 Формат(СуммаОстатка, "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0"));
			КонецЕсли;
			КассоваяСмена = НоваяКассоваяСмена.Ссылка;
		Иначе
			Результат = Ложь;
			ОписаниеОшибки = НСтр("ru = 'Проверьте настройки кассы ККМ.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьОтчетОРозничныхПродажах(КассоваяСмена, ОписаниеОшибки = "") Экспорт
	
	НовыйОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	НовыйОтчетОРозничныхПродажах.Автор = Пользователи.ТекущийПользователь();
	НовыйОтчетОРозничныхПродажах.Заполнить(Новый Структура("КассаККМ", КассоваяСмена.КассаККМ));
	
	НовыйОтчетОРозничныхПродажах.Дата = КассоваяСмена.Дата;
	НовыйОтчетОРозничныхПродажах.КассоваяСмена = КассоваяСмена.Ссылка;
	Если КассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Закрыта Тогда
		НовыйОтчетОРозничныхПродажах.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Закрыта;
	Иначе
		НовыйОтчетОРозничныхПродажах.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", НовыйОтчетОРозничныхПродажах.Организация);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", НовыйОтчетОРозничныхПродажах.КассаККМ.СтруктурнаяЕдиница);
	
	Запрос.УстановитьПараметр("Дата", НовыйОтчетОРозничныхПродажах.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД КАК ЕНВД
	|ИЗ
	|	РегистрСведений.ПримененияЕНВД.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ПримененияЕНВД
	|ГДЕ
	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД";
	
	Выборка = Запрос.Выполнить();
	НовыйОтчетОРозничныхПродажах.УчитыватьВНУ = Выборка.Пустой();
	
	Если НовыйОтчетОРозничныхПродажах.ПроверитьЗаполнение() Тогда
		НовыйОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
		Возврат НовыйОтчетОРозничныхПродажах;
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Проверьте настройки розничного склада и кассы ККМ.'");
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет закрытие кассовой смены.
//
Функция ЗакрытьКассовуюСмену(КассаККМ, ОписаниеОшибки = "", СсылкаНаОтчет = Неопределено) Экспорт
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		КассоваяСменаОбъект = СтруктураСостояниеКассовойСмены.КассоваяСмена.ПолучитьОбъект();
		КассоваяСменаОбъект.Дата                   = ТекущаяДатаСеанса();
		КассоваяСменаОбъект.Статус    = Перечисления.СтатусыКассовойСмены.Закрыта;
		КассоваяСменаОбъект.ОкончаниеКассовойСмены = КассоваяСменаОбъект.Дата;
		
		Попытка
			
			КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Если СсылкаНаОтчет <> Неопределено Тогда
				ОбъектОтчет = СсылкаНаОтчет.ПолучитьОбъект();
				ОбъектОтчет.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
				ОбъектОтчет.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		Исключение
			
			Результат = Ложь;
			
			ОписаниеОшибки = НСтр("ru = 'При закрытии кассовой смены произошла ошибка.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
			
		КонецПопытки;
		
	Иначе
		
		// Смена не открыта.
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет состояние кассовой смены на дату. Если смена не открыта - возвращаеся описание ошибки.
//
Функция СменаОткрыта(ОтчетОРозничныхПродажах, Дата, ОписаниеОшибки = "") Экспорт
	
	СменаОткрыта = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассоваяСмена.Статус КАК Статус,
	|	КассоваяСмена.НачалоКассовойСмены КАК НачалоКассовойСмены,
	|	КассоваяСмена.ОкончаниеКассовойСмены КАК ОкончаниеКассовойСмены
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.Ссылка = &КассоваяСмена";
	
	Запрос.УстановитьПараметр("КассоваяСмена", ОтчетОРозничныхПродажах.КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.Статус = Перечисления.СтатусыКассовойСмены.Открыта Тогда
			
			// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
			Если Дата - Выборка.НачалоКассовойСмены < 86400 Тогда
				СменаОткрыта = Истина;
			Иначе
				ОписаниеОшибки = НСтр("ru = 'С момента открытия кассовой смены истекло более 24 часов. Необходимо выполнить закрытие кассовой смены'");
				СменаОткрыта = Ложь;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.Статус) Тогда
			
			Если Выборка.ОкончаниеКассовойСмены >= Дата И Выборка.НачалоКассовойСмены <= Дата Тогда
				СменаОткрыта = Истина;
			Иначе
				ОписаниеОшибки = НСтр("ru = 'Смена не открыта'");
				СменаОткрыта = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ОписаниеОшибки = НСтр("ru = 'Смена не открыта'");
		СменаОткрыта = Ложь;
		
	КонецЕсли;
	
	Возврат СменаОткрыта;
	
КонецФункции // СменаОткрыта()

// Функция возвращает структуру, характеризующую состояние кассовой смены на дату.
//
Функция ПолучитьСостояниеКассовойСменыНаДату(КассаККМ, ДатаВремя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КассоваяСменаДокумент.Номер КАК НомерКассовойСмены,
	|	КассоваяСменаДокумент.Ссылка КАК КассоваяСмена,
	|	КассоваяСменаДокумент.Статус КАК СтатусКассовойСмены,
	|	КассоваяСменаДокумент.КассаККМ КАК КассаККМ,
	|	КассоваяСменаДокумент.КассаККМ.ВалютаДенежныхСредств КАК ВалютаДокумента,
	|	КассоваяСменаДокумент.КассаККМ.ВалютаДенежныхСредств.Представление КАК ВалютаДокументаПредставление,
	|	КассоваяСменаДокумент.Организация КАК Организация,
	|	КассоваяСменаДокумент.КассаККМ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА КассоваяСменаДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СменаОткрыта,
	|	ВЫБОР
	|		КОГДА КассоваяСменаДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА КассоваяСменаДокумент.НачалоКассовойСмены
	|		ИНАЧЕ КассоваяСменаДокумент.ОкончаниеКассовойСмены
	|	КОНЕЦ КАК ДатаИзмененияСтатуса,
	|	ЕСТЬNULL(ДенежныеСредстваККМОстатки.СуммаВалОстаток, 0) КАК НаличностьВКассе,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.Ссылка, НЕОПРЕДЕЛЕНО) КАК ОтчетОРозничныхПродажах,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.ВидЦен, НЕОПРЕДЕЛЕНО) КАК ВидЦен,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.НалогообложениеНДС, НЕОПРЕДЕЛЕНО) КАК НалогообложениеНДС,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.Ответственный, НЕОПРЕДЕЛЕНО) КАК Ответственный,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.Подразделение, НЕОПРЕДЕЛЕНО) КАК Подразделение,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.СуммаВключаетНДС, НЕОПРЕДЕЛЕНО) КАК СуммаВключаетНДС,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.НДСВключатьВСтоимость, НЕОПРЕДЕЛЕНО) КАК НДСВключатьВСтоимость
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСменаДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(&ДатаВремя, КассаККМ = &КассаККМ) КАК ДенежныеСредстваККМОстатки
	|		ПО КассоваяСменаДокумент.КассаККМ = ДенежныеСредстваККМОстатки.КассаККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО КассоваяСменаДокумент.Ссылка = ОтчетОРозничныхПродажах.КассоваяСмена
	|ГДЕ
	|	КассоваяСменаДокумент.Проведен
	|	И КассоваяСменаДокумент.КассаККМ = &КассаККМ
	|	И ВЫБОР
	|			КОГДА КассоваяСменаДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|				ТОГДА КассоваяСменаДокумент.НачалоКассовойСмены
	|			ИНАЧЕ КассоваяСменаДокумент.ОкончаниеКассовойСмены
	|		КОНЕЦ <= &ДатаВремя
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСменаДокумент.Дата УБЫВ,
	|	КассоваяСмена УБЫВ";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("ДатаВремя", ДатаВремя + 100);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОписаниеКассовойСмены = ПолучитьСтруктуруОписанияКассовойСмены();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);
		Если НЕ ЗначениеЗаполнено(ОписаниеКассовойСмены.НалогообложениеНДС) Тогда
			ОписаниеКассовойСмены.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОписаниеКассовойСмены.Ответственный) Тогда
			ОписаниеКассовойСмены.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				Пользователи.ТекущийПользователь(),
				"ОсновнойОтветственный"
			);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеКассовойСмены;
	
КонецФункции // ПолучитьСостояниеКассовойСменыНаДату()

// Функция возвращает остатков денежных средств в кассе в валюте кассы.
//
Функция ПолучитьОстатокДенежныхСредствВКассеККМ(КассаККМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДенежныеСредстваВКассахККМОстатки.СуммаВалОстаток КАК НаличностьВКассе
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НаличностьВКассе;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьОстатокДенежныхСредствВКассе()

Процедура ПриЗаписиКассовойСменыПереопределяемый(КассоваяСмена) Экспорт
	
	ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.ПолучитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена);
		
	Если ЗначениеЗаполнено(ОтчетОРозничныхПродажах) Тогда
		ОтчетОРозничныхПродажахОбъект = ОтчетОРозничныхПродажах.ПолучитьОбъект();
		НужноЗаписатьОтчет = Ложь;
		Если КассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Закрыта
			И ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены <> Перечисления.СтатусыОтчетаОРозничныхПродажах.Закрыта
			И ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены <> Перечисления.СтатусыОтчетаОРозничныхПродажах.ЗакрытаЧекиЗаархивированы Тогда
			ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Закрыта;
			НужноЗаписатьОтчет = Истина;
		ИначеЕсли КассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Открыта
			И ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены <> Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта Тогда
			ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта;
			НужноЗаписатьОтчет = Истина;	
		КонецЕсли;
		Если НужноЗаписатьОтчет Тогда
			Попытка
				РежимЗаписи = ?(ОтчетОРозничныхПродажахОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписи);
			Исключение
				ЗаписьЖурналаРегистрации("СинхронизацияСтатусовКассовойСмены", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	Иначе
		Попытка
			СоздатьОтчетОРозничныхПродажах(КассоваяСмена);
		Исключение
			ЗаписьЖурналаРегистрации("СозданиеОтчетаОРозничныхПродажах", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Переим ПолучитьКодСистемыНалогообложения
Функция ПолучитьТипСистемыНалогообложенияККТ(Организация, СтруктурнаяЕдиница = Неопределено, ДатаДокумента = Неопределено, СпециальныйНалоговыйРежим) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СпециальныйНалоговыйРежим) Тогда
		Если СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ЕНВД Тогда
			Возврат Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
		ИначеЕсли СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ЕСХН Тогда
			Возврат Перечисления.ТипыСистемНалогообложенияККТ.ЕСН;
		ИначеЕсли СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН Тогда
			Возврат Перечисления.ТипыСистемНалогообложенияККТ.Патент;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтруктурнаяЕдиница)
		И РегистрыСведений.ПримененияЕНВД.ПрименяетсяЕНВД(Организация, СтруктурнаяЕдиница, ДатаДокумента) Тогда
		Возврат Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
	ИначеЕсли ЗначениеЗаполнено(СтруктурнаяЕдиница)
		И РегистрыСведений.ПримененияПатенты.ПрименяетсяПатент(Организация, СтруктурнаяЕдиница, ДатаДокумента) Тогда
		Возврат Перечисления.ТипыСистемНалогообложенияККТ.Патент;
	КонецЕсли;
	
	Возврат РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьТипСистемыНалогообложенияККТОрганизации(Организация, ДатаДокумента);
	
КонецФункции

Процедура КассоваяСменаПриЗаписиДокументаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если НЕ Источник.ДополнительныеСвойства.Свойство("НеСоздаватьОтчетОРозничныхПродажах") Тогда
		ПриЗаписиКассовойСменыПереопределяемый(Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура КассоваяСменаПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.КассаККМ)
		И ЗначениеЗаполнено(Источник.ФискальноеУстройство) Тогда
		Источник.КассаККМ = Справочники.КассыККМ.ПолучитьКассуККМПоЭкземпляруОборудования(Источник.ФискальноеУстройство);
	КонецЕсли;

КонецПроцедуры

// Убирает разделители в номере телефона.
//
// Параметры:
//    НомерТелефона - Строка - номер телефона или факса.
//
// Возвращаемое значение:
//     Строка - номер телефона или факса без разделителей.
//
Функция УбратьРазделителиВНомереТелефона(Знач НомерТелефона) Экспорт
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+7", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "(", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, ")", "");
	
	Если СтрНайти(НомерТелефона, "8") = 1 И СтрДлина(НомерТелефона) = 11 Тогда
		НомерТелефона = Прав(НомерТелефона, 10);
	КонецЕсли;
	
	Возврат НомерТелефона;
	
КонецФункции

Функция ПолучитьРеквизитыКассира(ИсточникФИОКассира, ПодписьКассира = Неопределено) Экспорт
	
	ПоПодписиКассира = ЗначениеЗаполнено(ПодписьКассира);
	
	Результат = Новый Структура;
	Результат.Вставить("Кассир", "");
	Результат.Вставить("ИмяКассира", "");
	Результат.Вставить("КассирИНН", "");
	Результат.Вставить("Должность", "");
	Результат.Вставить("ИмяКассираИДолжность", "");
	Результат.Вставить("ФизЛицо", Неопределено);
	
	Если ПоПодписиКассира Тогда
		Результат.Кассир = ПодписьКассира.ФизическоеЛицо;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Подписи.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Подписи.Должность КАК ТекущаяДолжность
		|ИЗ
		|	Справочник.Подписи КАК Подписи
		|ГДЕ
		|	Подписи.Ссылка = &ПодписьКассира");
		
		Запрос.УстановитьПараметр("ПодписьКассира", ПодписьКассира);
	ИначеЕсли ТипЗнч(ИсточникФИОКассира) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		Результат.Кассир = ИсточникФИОКассира;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК ТекущаяДолжность,
		|	Сотрудники.Физлицо КАК Физлицо
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	Сотрудники.Ссылка = &Кассир");
		
		Запрос.УстановитьПараметр("Кассир", ИсточникФИОКассира);
	Иначе
		СотрудникиПользователя = РегистрыСведений.СотрудникиПользователя.ПолучитьСотрудниковПользователя(ИсточникФИОКассира);
		Если Не ЗначениеЗаполнено(СотрудникиПользователя) Тогда 
			Возврат Результат;
		КонецЕсли;
		
		Результат.Кассир = СотрудникиПользователя[0];
		
	    Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник = &Кассир");
		
		Запрос.УстановитьПараметр("Кассир", Результат.Кассир);
	КонецЕсли;
	
	ФизЛицо = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.ТекущаяДолжность) Тогда
			Результат.Должность = Выборка.ТекущаяДолжность;
		КонецЕсли;
		Если ПоПодписиКассира Тогда
			Физлицо = Выборка.ФизическоеЛицо;
		КонецЕсли;
	Иначе
		Результат.Должность = "";
	КонецЕсли;
	
	Если НЕ ПоПодписиКассира Тогда
		Если ТипЗнч(ИсточникФИОКассира) = Тип("СправочникСсылка.Пользователи") Тогда
			Физлицо = СотрудникиПользователя[0].Физлицо;
		Иначе
			Физлицо = Выборка.Физлицо;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Физлицо) Тогда
		Результат.ИмяКассира = Строка(Физлицо.Наименование);
		Результат.КассирИНН = Физлицо.ИНН;
		Если ЗначениеЗаполнено(Результат.Должность)
			И ВРег(Результат.Должность) <> "КАССИР" Тогда
			Результат.ИмяКассираИДолжность = СтрШаблон("%1 (%2)", Результат.ИмяКассира, Результат.Должность);
		Иначе
			Результат.ИмяКассираИДолжность = Результат.ИмяКассира;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("ФизЛицо", ФизЛицо);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПризнакПредметаРасчета(Номенклатура) Экспорт
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
		Если Номенклатура.ПодакцизныйТовар Тогда
			ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар;
		Иначе
			ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;
		КонецЕсли;
	ИначеЕсли Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Работа;
	ИначеЕсли Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга;
	ИначеЕсли Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
	КонецЕсли;
	
	Возврат ПризнакПредметаРасчета;
	
КонецФункции

Функция ДобавитьПозицииЧекаПоДокументуРасчетов(ДокументРасчетов, ОбщиеПараметры, ТекСтрока, СуммаПлатежа, НомерСтрокиТовара = 0) Экспорт
	
	Если ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРасчетов, "ВалютаДокумента,СуммаДокумента,ВидОперации");
	Иначе
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРасчетов, "ВалютаДокумента,СуммаДокумента");
	КонецЕсли;
	
	Если РеквизитыДокумента.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
		ВызватьИсключение НСтр("ru='Чек не напечатан. В документе расчетов обнаружена валюта, отличная от национальной.'");
	КонецЕсли;
	
	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиДокументаРасчетов(ДокументРасчетов, РеквизитыДокумента);
		
	Если ТекСтрока.ПризнакАванса Тогда
		
		// Полная предоплата, если валюты и суммы совпадают. Иначе это частичная.
		Если СуммаПлатежа = РеквизитыДокумента.СуммаДокумента Тогда
			ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
		Иначе
			ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
		КонецЕсли;
		
	Иначе
		
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
		
	КонецЕсли;
	
	ДополнитьТоварамиПоДокументу(ДокументРасчетов, ОбщиеПараметры, ПризнакСпособаРасчета, ИмяТабличнойЧасти, НомерСтрокиТовара);
	
КонецФункции

Процедура ДополнитьТоварамиПоДокументу(ДокументОбъект, ОбщиеПараметры, ПризнакСпособаРасчета, ИмяТабличнойЧасти = "Запасы", НомерСтрокиТовара = 0) Экспорт
	
	Если ТипЗнч(ИмяТабличнойЧасти) = Тип("Строка") Тогда
		МассивТабличныхЧастей = Новый Массив();
		МассивТабличныхЧастей.Добавить(ИмяТабличнойЧасти);
	ИначеЕсли ТипЗнч(ИмяТабличнойЧасти) = Тип("Массив") Тогда
		МассивТабличныхЧастей = ИмяТабличнойЧасти;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Ремонт" Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект, "ОписаниеРемонта, СуммаДокумента, СтавкаНДС, СуммаНДС");
		Если СтруктураРеквизитов.СуммаДокумента > 0 Тогда
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДСДляККТ(СтруктураРеквизитов.СтавкаНДС);
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			ОписаниеРемонта = Строка(СтруктураРеквизитов.ОписаниеРемонта);
			СтрокаПозицииЧека.Наименование = ?(ПустаяСтрока(ОписаниеРемонта), НСтр("ru ='Ремонт'"), ОписаниеРемонта);
			СтрокаПозицииЧека.Количество = 1;
			СтрокаПозицииЧека.Цена = СтруктураРеквизитов.СуммаДокумента + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтруктураРеквизитов.СуммаНДС);
			СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаПозицииЧека.Цена;
			СтрокаПозицииЧека.Сумма        = СтрокаПозицииЧека.Цена;
			СтрокаПозицииЧека.НомерСекции  = 1;
			СтрокаПозицииЧека.СтавкаНДС    = СтавкаНДС;
			СтрокаПозицииЧека.СуммаНДС     = СтруктураРеквизитов.СуммаНДС;
			СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга;
			СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
			СтрокаПозицииЧека.НомерСтрокиТовара = НомерСтрокиТовара;
			НомерСтрокиТовара = НомерСтрокиТовара + 1;
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		КонецЕсли;
	Иначе
		Для каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
			
			ТаблицаДанных = ДокументОбъект[ТабличнаяЧасть].Выгрузить();
			Если ТаблицаДанных.Колонки.Найти("НоменклатураНабора")<>Неопределено Тогда
				НаборыСервер.ПодготовитьНаборыДляПробитияЧекаККМ(ТаблицаДанных, ДокументОбъект);
			КонецЕсли;
			
			Если ТабличнаяЧасть = "Запасы" Тогда
				ДанныеДляИСМП = ДанныеДляИСМП(ДокументОбъект);
			Иначе
				ДанныеДляИСМП = Новый ТаблицаЗначений;
			КонецЕсли;
			
			Для каждого СтрокаТЧ Из ТаблицаДанных Цикл
				
				Если ТаблицаДанных.Колонки.Найти("НомерВариантаКП") <> Неопределено И ДокументОбъект.ОсновнойВариантКП <> СтрокаТЧ.НомерВариантаКП Тогда
					Продолжить;
				КонецЕсли;
				
				МассивСтрокДляДобавленияВЧек = Новый Массив;
				МассивСтрокДляДобавленияВЧек.Добавить(СтрокаТЧ);
				
				Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.ВидПродукцииИС)
					И ДанныеДляИСМП.Количество() > 0 Тогда
					МассивСтрокДляДобавленияВЧек = ДанныеДляИСМП.НайтиСтроки(
						Новый Структура("НомерСтроки", СтрокаТЧ.НомерСтроки));
				КонецЕсли;
				
				Для Каждого СтрокаДляДобавленияВЧек Из МассивСтрокДляДобавленияВЧек Цикл
				
					СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДСДляККТ(СтрокаДляДобавленияВЧек.СтавкаНДС);
					
					СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
					СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
					СтрокаПозицииЧека.Вставить("РезультатРаспределенияШтрихкодов");
					
					Если ТабличнаяЧасть = "ВнеоборотныеАктивы" Тогда
						СтрокаПозицииЧека.Наименование = Строка(СтрокаДляДобавленияВЧек.ВнеоборотныйАктив);
						СтрокаПозицииЧека.Количество = 1;
						СтрокаПозицииЧека.Цена = СтрокаДляДобавленияВЧек.Всего;
						СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаДляДобавленияВЧек.Всего;
						СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;
					ИначеЕсли ТабличнаяЧасть = "Расходы" Тогда
						РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДляДобавленияВЧек.Номенклатура, "НаименованиеПолное,ТипНоменклатуры,ЭтоНабор,ВидМаркировки,АлкогольнаяПродукция,ПодакцизныйТовар");
						Если ТаблицаДанных.Колонки.Найти("Содержание") <> Неопределено
							И НЕ ПустаяСтрока(СтрокаДляДобавленияВЧек.Содержание) Тогда
							СтрокаПозицииЧека.Наименование = СокрЛП(СтрокаДляДобавленияВЧек.Содержание);
						Иначе
							СтрокаПозицииЧека.Наименование = РеквизитыНоменклатуры.НаименованиеПолное;
						КонецЕсли;
						СтрокаПозицииЧека.Количество = СтрокаДляДобавленияВЧек.Количество;
						СтрокаПозицииЧека.Цена = СтрокаДляДобавленияВЧек.Цена + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрокаДляДобавленияВЧек.СуммаНДС / ?(СтрокаДляДобавленияВЧек.Количество = 0, 1, СтрокаДляДобавленияВЧек.Количество)); 
						СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаПозицииЧека.Цена;
						СтрокаПозицииЧека.ПризнакПредметаРасчета = ПолучитьПризнакПредметаРасчета(РеквизитыНоменклатуры);
					Иначе
						РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДляДобавленияВЧек.Номенклатура, "НаименованиеПолное,ТипНоменклатуры,ЭтоНабор,ВидМаркировки,АлкогольнаяПродукция,ПодакцизныйТовар");
						Если ТаблицаДанных.Колонки.Найти("Содержание") <> Неопределено
							И НЕ ПустаяСтрока(СтрокаДляДобавленияВЧек.Содержание) Тогда
							СтрокаПозицииЧека.Наименование = СокрЛП(СтрокаДляДобавленияВЧек.Содержание);
						Иначе
							СтрокаПозицииЧека.Наименование = СтрокаПозицииЧекаНаименование(РеквизитыНоменклатуры, СтрокаДляДобавленияВЧек);
						КонецЕсли;
						Если РеквизитыНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
							СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
						КонецЕсли;
						Если ТабличнаяЧасть = "Работы" Тогда
							СтрокаПозицииЧека.Количество = СтрокаДляДобавленияВЧек.Количество * СтрокаДляДобавленияВЧек.Кратность * СтрокаДляДобавленияВЧек.Коэффициент;
						Иначе
							СтрокаПозицииЧека.Количество = СтрокаДляДобавленияВЧек.Количество;
						КонецЕсли;
						ЦенаСтроки = СтрокаДляДобавленияВЧек.Цена + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрокаДляДобавленияВЧек.СуммаНДС / ?(СтрокаПозицииЧека.Количество = 0, 1, СтрокаПозицииЧека.Количество));
						СтрокаПозицииЧека.Цена = Окр(ЦенаСтроки, 2);
						СуммаСкидки = СтрокаПозицииЧека.Цена * СтрокаПозицииЧека.Количество - (СтрокаДляДобавленияВЧек.Сумма + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрокаДляДобавленияВЧек.СуммаНДС));
						ЦенаСоСкидкамиСтроки = СтрокаПозицииЧека.Цена - СуммаСкидки / ?(СтрокаПозицииЧека.Количество = 0, 1, СтрокаПозицииЧека.Количество);
						СтрокаПозицииЧека.ЦенаСоСкидками = Окр(ЦенаСоСкидкамиСтроки, 2);
						СтрокаПозицииЧека.СуммаСкидок = СуммаСкидки;
						СтрокаПозицииЧека.ПризнакПредметаРасчета = ПолучитьПризнакПредметаРасчета(РеквизитыНоменклатуры);
						Если ТабличнаяЧасть = "Запасы"
							И ДокументОбъект.Метаданные().ТабличныеЧасти[ТабличнаяЧасть].Реквизиты.Найти("Партия") <> Неопределено
							И ЗначениеЗаполнено(СтрокаДляДобавленияВЧек.Партия)
							И СтрокаДляДобавленияВЧек.Партия.Статус <> Перечисления.СтатусыПартий.СобственныеЗапасы Тогда
							СтруктураРеквизитов = Новый Структура();
							СтруктураРеквизитов.Вставить("НаименованиеПолное", "ВладелецПартии.НаименованиеПолное");
							СтруктураРеквизитов.Вставить("ИНН", "ВладелецПартии.ИНН");
							СтруктураРеквизитов.Вставить("ВладелецПартии", "ВладелецПартии");
							РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДляДобавленияВЧек.Партия, СтруктураРеквизитов);
							СтрокаПозицииЧека.ДанныеПоставщика.Наименование = РеквизитыВладельца.НаименованиеПолное;
							СтрокаПозицииЧека.ДанныеПоставщика.ИНН = РеквизитыВладельца.ИНН;
							Если СтрокаДляДобавленияВЧек.Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии Тогда
								СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = Перечисления.ПризнакиАгента.Комиссионер;
							КонецЕсли;
							Телефон = Справочники.Контрагенты.ПолучитьТелефонКонтрагента(РеквизитыВладельца.ВладелецПартии);
							Телефон = УбратьРазделителиВНомереТелефона(Телефон);
							СтрокаПозицииЧека.ДанныеПоставщика.Телефон = Телефон;
						КонецЕсли;
						
						Если ТабличнаяЧасть = "Запасы"
							И ДокументОбъект.Метаданные().ТабличныеЧасти[ТабличнаяЧасть].Реквизиты.Найти("СтранаПроисхождения") <> Неопределено
							И ЗначениеЗаполнено(СтрокаДляДобавленияВЧек.СтранаПроисхождения) Тогда
							РеквизитыСтраныПроисхождения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДляДобавленияВЧек.СтранаПроисхождения, "Код");
							СтрокаПозицииЧека.КодСтраныПроисхожденияТовара = РеквизитыСтраныПроисхождения.Код;
						КонецЕсли;
						
						Если ТабличнаяЧасть = "Запасы"
							И ДокументОбъект.Метаданные().ТабличныеЧасти[ТабличнаяЧасть].Реквизиты.Найти("НомерГТД") <> Неопределено
							И ЗначениеЗаполнено(СтрокаДляДобавленияВЧек.НомерГТД) Тогда
							РеквизитыНомераГТД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДляДобавленияВЧек.НомерГТД, "Код");
							СтрокаПозицииЧека.НомерТаможеннойДекларации = РеквизитыНомераГТД.Код;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.ВидПродукцииИС)
							И ДанныеДляИСМП.Количество() > 0 Тогда
							
							СтрокаПозицииЧека.Штрихкод = СтрокаДляДобавленияВЧек.Штрихкод;
							
							ЗаполнитьСтрокуПоДаннымРазбораШтрихкода(СтрокаПозицииЧека, СтрокаДляДобавленияВЧек);
							
							Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДляДобавленияВЧек, "РезультатРаспределенияШтрихкодов")
								И ЗначениеЗаполнено(СтрокаДляДобавленияВЧек.РезультатРаспределенияШтрихкодов) Тогда
								СтрокаПозицииЧека.РезультатРаспределенияШтрихкодов = СтрокаДляДобавленияВЧек.РезультатРаспределенияШтрихкодов;
								
								ПолныйКодМаркировки = СтрокаДляДобавленияВЧек.РезультатРаспределенияШтрихкодов.ПолныйКодМаркировки;
								Если ЗначениеЗаполнено(ПолныйКодМаркировки) Тогда
									СтрокаПозицииЧека.ШтрихкодBase64 = ПолныйКодМаркировки;
									СтрокаПозицииЧека.КонтрольнаяМарка = ПолныйКодМаркировки;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					СтрокаПозицииЧека.Сумма        = СтрокаДляДобавленияВЧек.Всего;
					СтрокаПозицииЧека.НомерСекции  = 1;
					СтрокаПозицииЧека.СтавкаНДС    = СтавкаНДС;
					СтрокаПозицииЧека.СуммаНДС     = СтрокаДляДобавленияВЧек.СуммаНДС;
					СтрокаПозицииЧека.НомерСтрокиТовара = НомерСтрокиТовара;
					НомерСтрокиТовара = НомерСтрокиТовара + 1;
					ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	// Доставка
	Если ДокументОбъект.Метаданные().Реквизиты.Найти("НоменклатураДоставки") <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДокументОбъект.НоменклатураДоставки) И ДокументОбъект.СтоимостьДоставки > 0 Тогда
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДСДляККТ(ДокументОбъект.СтавкаНДСДоставки);
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			СтрокаПозицииЧека.Наименование = Строка(ДокументОбъект.НоменклатураДоставки);
			СтрокаПозицииЧека.Количество = 1;
			СтрокаПозицииЧека.Цена = ДокументОбъект.СтоимостьДоставки + ?(ДокументОбъект.СуммаВключаетНДС, 0, ДокументОбъект.СуммаНДСДоставки);
			СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаПозицииЧека.Цена;
			СтрокаПозицииЧека.Сумма        = СтрокаПозицииЧека.Цена;
			СтрокаПозицииЧека.НомерСекции  = 1;
			СтрокаПозицииЧека.СтавкаНДС    = СтавкаНДС;
			СтрокаПозицииЧека.СуммаНДС     = ДокументОбъект.СуммаНДСДоставки;
			СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга;
			СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
			СтрокаПозицииЧека.НомерСтрокиТовара = НомерСтрокиТовара;
			НомерСтрокиТовара = НомерСтрокиТовара + 1;
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуПоДаннымРазбораШтрихкода(СтрокаПозицииЧека, СтрокаДляДобавленияВЧек)
	
	ВидПродукцииИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДляДобавленияВЧек.Номенклатура, "ВидПродукцииИС");
	
	Если НЕ (ЗначениеЗаполнено(ВидПродукцииИС) И ЗначениеЗаполнено(СтрокаПозицииЧека.Штрихкод)) Тогда
		Возврат;
	КонецЕсли;
	
	ТипМаркировкиККТ = ИнтеграцияИСКлиентСервер.ТипМаркировкиККТПоВидуПродукции(ВидПродукцииИС);
	Если Не ЗначениеЗаполнено(ТипМаркировкиККТ) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(СтрокаПозицииЧека.Штрихкод, ВидПродукцииИС);
	Если ДанныеРазбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки                          = ТипМаркировкиККТ;
	СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = ДанныеРазбора.СоставКодаМаркировки.GTIN;
	СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер                          = ДанныеРазбора.СоставКодаМаркировки.СерийныйНомер;
	
КонецПроцедуры

Функция ДанныеДляИСМП(ДокументОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат")
		Или ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ИмяТЧШтрихкодыУпаковок     = "АкцизныеМарки";
		ИмяКолонкиШтрихкодУпаковки = "АкцизнаяМарка";
	Иначе
		ИмяТЧШтрихкодыУпаковок     = "ШтрихкодыУпаковок";
		ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	КонецЕсли;
	
	Если Не ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции()
		ИЛИ ДокументОбъект.Ссылка.Метаданные().ТабличныеЧасти.Найти(ИмяТЧШтрихкодыУпаковок) = Неопределено Тогда
		
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("НомерСтроки");
		Возврат Результат;
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Содержание КАК Содержание,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаЗапасы.НомерГТД КАК НомерГТД,
	|	ТаблицаЗапасы.Количество КАК Количество,
	|	ТаблицаЗапасы.Цена КАК Цена,
	|	ТаблицаЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТаблицаЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ТаблицаЗапасы.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	ТаблицаЗапасы.Сумма КАК Сумма,
	|	ТаблицаЗапасы.Всего КАК Всего,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаЗапасы.СуммаНДС КАК СуммаНДС,
	|	ТаблицаЗапасы.Штрихкод КАК Штрихкод,
	|	ТаблицаЗапасы.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерии.Серия КАК Серия,
	|	ТаблицаСерии.КлючСвязи КАК КлючСвязи,
	|	ТаблицаСерии.Количество КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&ТаблицаСерии КАК ТаблицаСерии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.НомерСтроки КАК НомерСтроки,
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Запасы.Характеристика КАК Характеристика,
	|	Запасы.Содержание КАК Содержание,
	|	Запасы.Партия КАК Партия,
	|	Запасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	Запасы.НомерГТД КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Серии.Серия
	|	КОНЕЦ КАК Серия,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА Запасы.Количество
	|		ИНАЧЕ Серии.Количество
	|	КОНЕЦ * ВЫБОР
	|		КОГДА СпрЕдиницыИзмерения.Ссылка ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ СпрЕдиницыИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА Запасы.Количество
	|		ИНАЧЕ Серии.Количество
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	Запасы.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА Запасы.СуммаАвтоматическойСкидки + Запасы.СуммаСкидкиНаценки + Запасы.СуммаСкидкиОплатыБонусом
	|		ИНАЧЕ (Запасы.СуммаАвтоматическойСкидки + Запасы.СуммаСкидкиНаценки + Запасы.СуммаСкидкиОплатыБонусом) / Запасы.Количество * Серии.Количество
	|	КОНЕЦ КАК СуммаСкидки,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА Запасы.Сумма
	|		ИНАЧЕ Запасы.Сумма / Запасы.Количество * Серии.Количество
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА Запасы.Всего
	|		ИНАЧЕ Запасы.Всего / Запасы.Количество * Серии.Количество
	|	КОНЕЦ КАК Всего,
	|	Запасы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА Запасы.СуммаНДС
	|		ИНАЧЕ Запасы.СуммаНДС / Запасы.Количество * Серии.Количество
	|	КОНЕЦ КАК СуммаНДС,
	|	Запасы.Штрихкод КАК Штрихкод
	|ИЗ
	|	Запасы КАК Запасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Серии КАК Серии
	|		ПО Запасы.КлючСвязи = Серии.КлючСвязи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Запасы.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СпрЕдиницыИзмерения
	|		ПО Запасы.ЕдиницаИзмерения = СпрЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	(НЕ СпрНоменклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|			ИЛИ СпрНоменклатура.АлкогольнаяПродукция)";
	
	ТаблицаЗапасы = ДокументОбъект.Запасы.Выгрузить();
	
	ОпциональныеПоля = Новый Соответствие;
	ОпциональныеПоля.Вставить("Партия", """""");
	ОпциональныеПоля.Вставить("Содержание", """""");
	ОпциональныеПоля.Вставить("СтранаПроисхождения", """""");
	ОпциональныеПоля.Вставить("НомерГТД", """""");
	ОпциональныеПоля.Вставить("СуммаАвтоматическойСкидки", "0");
	ОпциональныеПоля.Вставить("СуммаСкидкиНаценки", "0");
	ОпциональныеПоля.Вставить("СуммаСкидкиОплатыБонусом", "0");
	ОпциональныеПоля.Вставить("Всего", "0");
	ОпциональныеПоля.Вставить("Штрихкод", "ВЫРАЗИТЬ("""" КАК СТРОКА(200))");
	
	Для Каждого ОпциональноеПоле Из ОпциональныеПоля Цикл
		Если ТаблицаЗапасы.Колонки.Найти(ОпциональноеПоле.Ключ) = Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"ТаблицаЗапасы." + ОпциональноеПоле.Ключ,
				ОпциональноеПоле.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", ТаблицаЗапасы);
	Запрос.УстановитьПараметр("ТаблицаСерии", ДокументОбъект.СерииНоменклатуры.Выгрузить());
	
	Запасы = Запрос.Выполнить().Выгрузить();
	Запасы.Колонки.Добавить("РезультатРаспределенияШтрихкодов");
	
	ПараметрыУказанияСерий = Документы.ЧекККМ.ПараметрыУказанияСерий(ДокументОбъект);
	//МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
	//ПараметрыУказанияСерий = МенеджерОбъекта.ПараметрыУказанияСерий(ДокументОбъект);
	
	ПараметрыРаспределения                        = ШтрихкодированиеИСМП.НовыеПараметрыРаспределенияШтрихкодовУпаковок();
	ПараметрыРаспределения.ДокументСсылка         = ДокументОбъект.Ссылка;
	ПараметрыРаспределения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	ШтрихкодыУпаковок = ДокументОбъект[ИмяТЧШтрихкодыУпаковок].Выгрузить().ВыгрузитьКолонку(ИмяКолонкиШтрихкодУпаковки);
	
	ДанныеРаспределения = ШтрихкодированиеИСМП.РаспределениеШтрихкодовУпаковокПоТоварам(
		ПараметрыРаспределения,
		Запасы,
		ШтрихкодыУпаковок);
	
	Если ДанныеРаспределения.ЕстьОшибки Тогда
		ВызватьИсключение СтрСоединить(ДанныеРаспределения.Ошибки, Символы.ПС);
	КонецЕсли;
	
	ТоварыРазобранные = Запасы.СкопироватьКолонки();
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТоварыРазобранные.Колонки, "КоэффициентПересчетаУпаковки") Тогда
		ТоварыРазобранные.Колонки.Добавить("КоэффициентПересчетаУпаковки");
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Запасы Цикл
		
		РаспределениеПоСтроке = ДанныеРаспределения.РаспределенныеСтроки.Получить(СтрокаТовары);
		
		Если РаспределениеПоСтроке = Неопределено Тогда
			СтрокаТоварыРазобранные = ТоварыРазобранные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтрокаТовары);
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаРаспределения Из РаспределениеПоСтроке Цикл
			
			СтрокаТоварыРазобранные = ТоварыРазобранные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтрокаТовары);
			
			Если ЗначениеЗаполнено(СтрокаРаспределения.Штрихкод) Тогда
				СтрокаТоварыРазобранные.Количество = 1;
				Коэффициент = СтрокаРаспределения.Количество;
			Иначе
				Коэффициент = 1;
			КонецЕсли;
			
			Если СтрокаТовары.Количество = СтрокаРаспределения.КоличествоУпаковок Тогда
				СуммаСкидки = СтрокаТовары.СуммаСкидки;
				СуммаНДС    = СтрокаТовары.СуммаНДС;
				Сумма       = СтрокаТовары.Сумма;
				Всего       = СтрокаТовары.Всего;
				Цена        = Сумма + СуммаСкидки;
			Иначе
				СуммаСкидки = Окр(СтрокаТовары.СуммаСкидки / СтрокаТовары.Количество * Коэффициент, 2);
				СуммаНДС    = Окр(СтрокаТовары.СуммаНДС / СтрокаТовары.Количество * Коэффициент, 2);
				Сумма       = Окр(СтрокаТовары.Сумма / СтрокаТовары.Количество * Коэффициент, 2);
				Всего       = Окр(СтрокаТовары.Всего / СтрокаТовары.Количество * Коэффициент, 2);
				Цена        = Сумма + СуммаСкидки;
			КонецЕсли;
			
			СтрокаТоварыРазобранные.СуммаСкидки = СуммаСкидки;
			СтрокаТоварыРазобранные.СуммаНДС    = СуммаНДС;
			СтрокаТоварыРазобранные.Сумма       = Сумма;
			СтрокаТоварыРазобранные.Всего       = Всего;
			СтрокаТоварыРазобранные.Цена        = Цена;
			СтрокаТоварыРазобранные.Штрихкод    = СтрокаРаспределения.Штрихкод;
			СтрокаТоварыРазобранные.РезультатРаспределенияШтрихкодов = СтрокаРаспределения;
			
			СтрокаТовары.Количество  = СтрокаТовары.Количество - СтрокаРаспределения.КоличествоУпаковок;
			СтрокаТовары.СуммаСкидки = СтрокаТовары.СуммаСкидки - СтрокаТоварыРазобранные.СуммаСкидки;
			СтрокаТовары.СуммаНДС    = СтрокаТовары.СуммаНДС - СтрокаТоварыРазобранные.СуммаНДС;
			СтрокаТовары.Сумма       = СтрокаТовары.Сумма - СтрокаТоварыРазобранные.Сумма;
			СтрокаТовары.Всего       = СтрокаТовары.Всего - СтрокаТоварыРазобранные.Всего;
			
		КонецЦикла;
		
	КонецЦикла;

	Возврат ТоварыРазобранные;
	
КонецФункции

Функция СуммаСтрокЧека(ОбщиеПараметры) Экспорт
	
	// Подсчет суммы строк чека.
	СуммаСтрокЧека = 0;
	Для каждого ТекСтрока Из ОбщиеПараметры.ПозицииЧека Цикл
		СуммаСтрокЧека = СуммаСтрокЧека + ТекСтрока.Сумма;
	КонецЦикла;
	
	Возврат СуммаСтрокЧека;
	
КонецФункции

Процедура ДополнитьТоварамиПараметрыПриПробитииЧека(ДокументОбъект, ОбщиеПараметры) Экспорт
	
	// Возможно автоматическое распределение оплаты.
	// Результат распределения хранится в движениях.
	НужноАнализироватьДвижения = Ложь;
	Если ДокументОбъект.Ссылка.Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("СпособЗачета") <> Неопределено Тогда
		Для Каждого ТекущаяСтрока Из ДокументОбъект.РасшифровкаПлатежа Цикл
			Если ТекущаяСтрока.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
				НужноАнализироватьДвижения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НужноАнализироватьДвижения Тогда
		ТаблицаДокумента = ПолучитьТаблицаДокументаПоДвижениям(ДокументОбъект.Ссылка);
	Иначе
		ТаблицаДокумента = ДокументОбъект.РасшифровкаПлатежа.Выгрузить(,"ПризнакАванса,Документ,Заказ,СчетНаОплату,СуммаПлатежа,СтавкаНДС,СуммаНДС");
	КонецЕсли;
	
	Для каждого ТекСтрока Из ТаблицаДокумента Цикл // Все незаполненные документы преобразуются в Неопределено, для того, чтобы можно было свернуть.
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
			ТекСтрока.Документ = Неопределено;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Заказ) Тогда
			ТекСтрока.Заказ = Неопределено;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СчетНаОплату) Тогда
			ТекСтрока.СчетНаОплату = Неопределено;
		КонецЕсли;
	КонецЦикла;

	// Авансы.
	ТаблицаДокумента.Свернуть("ПризнакАванса,Документ,Заказ,СчетНаОплату,СтавкаНДС", "СуммаПлатежа,СуммаНДС");
	НомерСтрокиТовара = 0;
	Для каждого ТекСтрока Из ТаблицаДокумента Цикл
		
		Если (ЗначениеЗаполнено(ТекСтрока.Документ)
			И (ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.ПоступлениеВКассу")
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.РасходИзКассы")
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.ПоступлениеНаСчет")
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.РасходСоСчета")
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.ОперацияПоПлатежнымКартам")))
			ИЛИ ЗначениеЗаполнено(ТекСтрока.Заказ)
			ИЛИ ЗначениеЗаполнено(ТекСтрока.СчетНаОплату) Тогда
			ЕстьДокументРасчетов = Истина;
		Иначе
			ЕстьДокументРасчетов = Ложь;
		КонецЕсли;
		
		Если ЕстьДокументРасчетов Тогда
			Продолжить;
		КонецЕсли;
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДСДляККТ(ТекСтрока.СтавкаНДС); 
		
		ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
		
		// Заполнение строки позиции чека.
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам")
			ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Аванс от: '")
				+ ДокументОбъект.Контрагент.НаименованиеПолное;
		ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Аванс от: '")
				+ ДокументОбъект.ПринятоОт;
		ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.РасходИзКассы") Тогда
			Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
				ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику Тогда
				СтрокаПозицииЧека.Наименование = НСтр("ru = 'Выдать аванс: '")
					+ ДокументОбъект.Выдать;
				ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Платеж;
			ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее Тогда
				Если ПустаяСтрока(ДокументОбъект.Основание) Тогда
					СтрокаПозицииЧека.Наименование = НСтр("ru = 'Выплата'");
				Иначе
					СтрокаПозицииЧека.Наименование = ДокументОбъект.Основание;
				КонецЕсли;
				ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Выплата;
			ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы Тогда
				Если ПустаяСтрока(ДокументОбъект.Основание) Тогда
					СтрокаПозицииЧека.Наименование = НСтр("ru = 'Расход'");
				Иначе
					СтрокаПозицииЧека.Наименование = ДокументОбъект.Основание;
				КонецЕсли;
				ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Расход;
			ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги Тогда
				СтрокаПозицииЧека.Наименование = ДокументОбъект.ВидНалога.Наименование;
				Если ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховая
					ИЛИ ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ПФРНакопительная Тогда
					ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ОбязательноеПенсионноеСтрахованиеИП;
				ИначеЕсли ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники
					ИЛИ ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники Тогда
					ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ОбязательноеПенсионноеСтрахование;
				ИначеЕсли ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ТФОМС
					ИЛИ ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ФФОМС Тогда
					ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ОбязательноеМедицинскоеСтрахованиеИП;
				ИначеЕсли ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ФОМССотрудники Тогда
					ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ОбязательноеМедицинскоеСтрахование;
				ИначеЕсли ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ФСССотрудники 
					ИЛИ ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ФССТравматизмСотрудники Тогда
					ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ОбязательноеСоциальноеСтрахование;
				Иначе
					ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ИнойПредметРасчета;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
					ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.РасходСоСчета") Тогда
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Выдать аванс: '")
				+ ДокументОбъект.Контрагент.НаименованиеПолное;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
			СтрокаПозицииЧека.Наименование = СтрокаПозицииЧека.Наименование 
				+ НСтр("ru = ', Основание: '")
				+ ДокументОбъект.ДокументОснование;
		КонецЕсли;
			
		СтрокаПозицииЧека.Количество   = 1;
		СтрокаПозицииЧека.Цена         = ТекСтрока.СуммаПлатежа;
		СтрокаПозицииЧека.ЦенаСоСкидками = ТекСтрока.СуммаПлатежа;
		СтрокаПозицииЧека.Сумма        = ТекСтрока.СуммаПлатежа;
		СтрокаПозицииЧека.СтавкаНДС    = СтавкаНДС;
		СтрокаПозицииЧека.СуммаНДС     = ТекСтрока.СуммаНДС;
		СтрокаПозицииЧека.НомерСекции  = 1;
		СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
		СтрокаПозицииЧека.ПризнакПредметаРасчета = ПризнакПредметаРасчета;
		СтрокаПозицииЧека.НомерСтрокиТовара = НомерСтрокиТовара;
		НомерСтрокиТовара = НомерСтрокиТовара + 1;
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
	КонецЦикла;
	
	МассивОбработаныхДокументов = Новый Массив;
	
	// Долги.
	ТаблицаДокумента.Свернуть("ПризнакАванса,Документ,Заказ,СчетНаОплату", "СуммаПлатежа");
	Для каждого ТекСтрока Из ТаблицаДокумента Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.Документ)
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.ПоступлениеВКассу")
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.РасходИзКассы")
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.ПоступлениеНаСчет")
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.РасходСоСчета")
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.ОперацияПоПлатежнымКартам")Тогда
			ИмяКолонки = "Документ";
		ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Заказ) Тогда
			ИмяКолонки = "Заказ";
		ИначеЕсли ЗначениеЗаполнено(ТекСтрока.СчетНаОплату) Тогда
			ИмяКолонки = "СчетНаОплату";
		Иначе
			ИмяКолонки = "";
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяКолонки) Тогда
			Продолжить;
		Иначе
			ДокументРасчетов = ТекСтрока[ИмяКолонки];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ДокументОснование)
			И ТипЗнч(ДокументОбъект.ДокументОснование) <> Тип("ДокументСсылка.ПоступлениеВКассу")
			И ТипЗнч(ДокументОбъект.ДокументОснование) <> Тип("ДокументСсылка.РасходИзКассы")
			И ТипЗнч(ДокументОбъект.ДокументОснование) <> Тип("ДокументСсылка.ПоступлениеНаСчет")
			И ТипЗнч(ДокументОбъект.ДокументОснование) <> Тип("ДокументСсылка.РасходСоСчета")
			И ТипЗнч(ДокументОбъект.ДокументОснование) <> Тип("ДокументСсылка.ОперацияПоПлатежнымКартам")
			И (ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
			ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю
			ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика
			ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика
			ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю) Тогда
			ДокументРасчетов = ДокументОбъект.ДокументОснование;
		КонецЕсли;
		
		СуммаПлатежа = 0;
		
		Если ЗначениеЗаполнено(ДокументРасчетов) Тогда
			
			Если МассивОбработаныхДокументов.Найти(ДокументРасчетов) = Неопределено Тогда
				МассивОбработаныхДокументов.Добавить(ДокументРасчетов);
			Иначе
				Продолжить;
			КонецЕсли;
			
			// Подсчет общей суммы платежа по документу расчетов, т.к. он может быть расположен в разных строчках табличной части.
			МассивСтрок = ТаблицаДокумента.НайтиСтроки(Новый Структура(ИмяКолонки, ДокументРасчетов));
			Для каждого ТекЭлемент Из МассивСтрок Цикл
				СуммаПлатежа = СуммаПлатежа + ТекЭлемент.СуммаПлатежа;
			КонецЦикла;
			
			ДобавитьПозицииЧекаПоДокументуРасчетов(ДокументРасчетов, ОбщиеПараметры, ТекСтрока, СуммаПлатежа, НомерСтрокиТовара);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТоварамиПриОтгрузкеПараметрыПриПробитииЧека(ДокументОбъект, ОбщиеПараметры, СуммаПлатежей) Экспорт
	
	НужноАнализироватьДвижения = Ложь;
	Если ДокументОбъект.Ссылка.Метаданные().Реквизиты.Найти("СпособЗачетаПредоплаты") <> Неопределено Тогда
		НужноАнализироватьДвижения = (ДокументОбъект.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто);
	КонецЕсли;
	
	Если НужноАнализироватьДвижения Тогда
		ТаблицаПредоплата = ПолучитьТаблицаДокументаПоДвижениямПриОтгрузке(ДокументОбъект);
	Иначе
		ТаблицаПредоплата = ДокументОбъект.Предоплата.Выгрузить();
	КонецЕсли;
	
	// Добавим колонку оплаты сертификатом, если ее нет в документе
	Если ТаблицаПредоплата.Колонки.Найти("ОплатаСертификатом") = Неопределено Тогда
		ТаблицаПредоплата.Колонки.Добавить("ОплатаСертификатом");
		ТаблицаПредоплата.ЗаполнитьЗначения(Ложь, "ОплатаСертификатом");
	КонецЕсли;
	
	СуммаПлатежей = 0;
	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Контрагент, "ВестиРасчетыПоДокументам");
	Для каждого ТекСтрока Из ТаблицаПредоплата Цикл
		Если ТекСтрока.ОплатаСертификатом Тогда
			СуммаПлатежей = СуммаПлатежей + ТекСтрока.СуммаПлатежа;
		Иначе
			Если РеквизитыКонтрагента.ВестиРасчетыПоДокументам Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекСтрока.Документ, "ВалютаДенежныхСредств") Тогда
					Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.Документ, "ВалютаДенежныхСредств");
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекСтрока.Документ, "ВалютаДокумента") Тогда
					Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.Документ, "ВалютаДокумента");
				КонецЕсли;
				Если Валюта <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
					ВызватьИсключение НСтр("ru='Чек не напечатан. В документе расчетов обнаружена валюта, отличная от национальной.'");
				КонецЕсли;
			КонецЕсли;
			СуммаПлатежей = СуммаПлатежей + ТекСтрока.СуммаПлатежа;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаПлатежей = 0 Тогда
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты;
	ИначеЕсли СуммаПлатежей >= ДокументОбъект.СуммаДокумента Тогда
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	Иначе
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой;
	КонецЕсли;
	
	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиДокументаРасчетов(ДокументОбъект, ДокументОбъект); 
	
	ДополнитьТоварамиПоДокументу(ДокументОбъект, ОбщиеПараметры, ПризнакСпособаРасчета, ИмяТабличнойЧасти);
	
КонецПроцедуры

Функция ЗаполнитьОписаниеОплаты(СтрокаОплаты) Экспорт
	
	// Если оплата сертификатом
	Если СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат") Тогда
		СтрокаОплаты.ОписаниеОплаты = СтрокаОплаты.ПодарочныйСертификат;
		// Если учитываются серии сертификата
		Если ЗначениеЗаполнено(СтрокаОплаты.НомерСертификата) Тогда
			СтрокаОплаты.ОписаниеОплаты = СтрокаОплаты.ОписаниеОплаты + ": " + СтрокаОплаты.НомерСертификата;
		КонецЕсли;
		
	// Если оплата картой
	ИначеЕсли СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.БанковскаяКарта") Тогда
		СтрокаШаблона = НСтр("ru = '%1: %2'");
		Параметр1 = СтрокаОплаты.ВидПлатежнойКарты;
		Параметр2 = ?(ЗначениеЗаполнено(СтрокаОплаты.НомерПлатежнойКарты), СтрокаОплаты.НомерПлатежнойКарты, НСтр("ru = '<номер не указан>'"));
		СтрокаОплаты.ОписаниеОплаты = СтрШаблон(СтрокаШаблона, Параметр1, Параметр2);
		
	// Если оплата бонусами
	ИначеЕсли СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.Бонусы") Тогда
		СтрокаОплаты.ОписаниеОплаты = СтрокаОплаты.БонуснаяКарта.Наименование;
		
	// Если оплата кредитом
	ИначеЕсли СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.Кредит") Тогда
		СтрокаОплаты.ОписаниеОплаты = СтрШаблон(НСтр("ru = '%1 (%2%3)'"),
			СтрокаОплаты.ЭквайринговыйТерминал.Эквайрер,
			СтрокаОплаты.ЭквайринговыйТерминал.ВидыПлатежныхКарт[0].ПроцентКомиссии,
			"%");
		
	КонецЕсли;
	
КонецФункции

// Процедура рассчитывает скидки по документу.
//
Процедура РассчитатьСкидкиНаценкиНаСервере(пФорма, СтруктураПараметры) Экспорт
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(пФорма.Объект, СтруктураПараметры);
	
	пФорма.АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, пФорма.УникальныйИдентификатор);
	
	пФорма.Модифицированность = Истина;
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(пФорма.Объект, "Запасы");
	
	Если НЕ пФорма.Объект.СкидкиРассчитаны Тогда
	
		пФорма.Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКартинкуДисконтнойКарты(пФорма) Экспорт
	
	Если ЗначениеЗаполнено(пФорма.Объект.ДисконтнаяКарта) Тогда
		пФорма.Команды.СчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.СчитанаДисконтнаяКарта;
	Иначе
		пФорма.Команды.СчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.СчитатьДисконтнуюКарту;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицаДокументаПоДвижениям(пДокументОбъектСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПризнакАванса,
		|	РасчетыСПокупателями.Документ КАК Документ,
		|	РасчетыСПокупателями.Заказ КАК Заказ,
		|	ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка) КАК СчетНаОплату,
		|	РасчетыСПокупателями.СуммаПлатежа КАК СуммаПлатежа,
		|	РасчетыСПокупателями.СтавкаНДС КАК СтавкаНДС,
		|	РасчетыСПокупателями.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	РасчетыСПокупателями.Регистратор = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	РасчетыСПоставщиками.Документ,
		|	РасчетыСПоставщиками.Заказ,
		|	ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка),
		|	РасчетыСПоставщиками.СуммаПлатежа,
		|	РасчетыСПоставщиками.СтавкаНДС,
		|	РасчетыСПоставщиками.СуммаНДС
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.Регистратор = &Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор", пДокументОбъектСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицаДокументаПоДвижениямПриОтгрузке(пДокументОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСПокупателями.Документ КАК Документ,
		|	РасчетыСПокупателями.СуммаПлатежа КАК СуммаПлатежа,
		|	РасчетыСПокупателями.ОплатаСертификатом КАК ОплатаСертификатом
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	РасчетыСПокупателями.Регистратор = &Регистратор
		|	И РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И РасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСПоставщиками.Документ,
		|	РасчетыСПоставщиками.СуммаПлатежа,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.Регистратор = &Регистратор
		|	И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)";
	
	Запрос.УстановитьПараметр("Регистратор", пДокументОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция СтрокаПозицииЧекаНаименование(Знач РеквизитыНоменклатуры, Знач СтрокаТЧ)
	
	Если Не ЗначениеЗаполнено(СтрокаТЧ.Характеристика) Тогда
		Возврат СтрШаблон("%1", РеквизитыНоменклатуры.НаименованиеПолное);
	КонецЕсли;
	
	НаименованиеХарактеристики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Характеристика, "НаименованиеДляПечати");
	Если ЗначениеЗаполнено(НаименованиеХарактеристики) Тогда
		Возврат СтрШаблон("%1 (%2)", РеквизитыНоменклатуры.НаименованиеПолное, НаименованиеХарактеристики);
	КонецЕсли;
	
	Возврат СтрШаблон("%1 (%2)", РеквизитыНоменклатуры.НаименованиеПолное, СтрокаТЧ.Характеристика);
	
КонецФункции

Функция ПолучитьИмяТабличнойЧастиДокументаРасчетов(ДокументРасчетов, РеквизитыДокумента)
	
	Если ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.АктВыполненныхРабот")
		ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
		ИмяТабличнойЧасти = "РаботыИУслуги";
	ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПередачаВА")
		ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументОбъект.ПередачаВА") Тогда
		ИмяТабличнойЧасти = "ВнеоборотныеАктивы";
	ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПриходнаяНакладная")
		ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
		ИмяТабличнойЧасти = Новый Массив();
		ИмяТабличнойЧасти.Добавить("Запасы");
		ИмяТабличнойЧасти.Добавить("Расходы");
	ИначеЕсли (ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументОбъект.ЗаказПокупателя"))
		И РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		ИмяТабличнойЧасти = Новый Массив();
		ИмяТабличнойЧасти.Добавить("Запасы");
		ИмяТабличнойЧасти.Добавить("Работы");
	ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПриемИПередачаВРемонт")
		ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументОбъект.ПриемИПередачаВРемонт") Тогда
		ИмяТабличнойЧасти = "Ремонт";
	Иначе
		ИмяТабличнойЧасти = "Запасы";
	КонецЕсли;
	
	Возврат ИмяТабличнойЧасти;
	
КонецФункции

// Функция возвращает пустую структуру состояния кассовой смены.
//
Функция ПолучитьСтруктуруОписанияКассовойСмены()
	
	СостояниеКассовойСмены = Новый Структура;
	СостояниеКассовойСмены.Вставить("ДатаИзмененияСтатуса");
	СостояниеКассовойСмены.Вставить("СтатусКассовойСмены");
	СостояниеКассовойСмены.Вставить("КассоваяСмена");
	СостояниеКассовойСмены.Вставить("НаличностьВКассе");
	СостояниеКассовойСмены.Вставить("НомерКассовойСмены");
	СостояниеКассовойСмены.Вставить("СменаОткрыта", Ложь);
	
	// Описание реквизитов кассовой смены.
	СостояниеКассовойСмены.Вставить("КассаККМ");
	СостояниеКассовойСмены.Вставить("Организация");
	СостояниеКассовойСмены.Вставить("СтруктурнаяЕдиница");
	СостояниеКассовойСмены.Вставить("СтруктурнаяЕдиницаПредставление");
	СостояниеКассовойСмены.Вставить("ВалютаДокумента");
	СостояниеКассовойСмены.Вставить("ВалютаДокументаПредставление");
	СостояниеКассовойСмены.Вставить("ОтчетОРозничныхПродажах");
	СостояниеКассовойСмены.Вставить("ВидЦен");
	СостояниеКассовойСмены.Вставить("Подразделение");
	СостояниеКассовойСмены.Вставить("СуммаВключаетНДС");
	СостояниеКассовойСмены.Вставить("НДСВключатьВСтоимость");
	СостояниеКассовойСмены.Вставить("НалогообложениеНДС");
	СостояниеКассовойСмены.Вставить("Ответственный");
	
	Возврат СостояниеКассовойСмены;
	
КонецФункции

#КонецОбласти