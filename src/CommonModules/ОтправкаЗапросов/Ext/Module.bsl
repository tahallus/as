
#Область ПрограммныйИнтерфейс

Функция НовыйПараметрыОтправки(Метод = "POST") Экспорт
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("URL", "");
	ПараметрыОтправки.Вставить("Сервер", "");
	ПараметрыОтправки.Вставить("АдресРесурса", "");
	ПараметрыОтправки.Вставить("Заголовки", Новый Соответствие);
	ПараметрыОтправки.Вставить("Json", "");
	ПараметрыОтправки.Вставить("ПараметрыТела", Новый Соответствие);
	ПараметрыОтправки.Вставить("ПараметрыURL", Новый Соответствие);
	ПараметрыОтправки.Вставить("Метод", Метод);
	ПараметрыОтправки.Вставить("КоличествоПеренаправлений", 0);
	ПараметрыОтправки.Вставить("ДопустимоеКоличествоПеренаправлений", Неопределено);
	ПараметрыОтправки.Вставить("ТелоЗапроса");
	ПараметрыОтправки.Вставить("ИмяСобытияЖР", Неопределено);
	
	Возврат ПараметрыОтправки;
	
КонецФункции

Функция НовыйПараметрыОтвета() Экспорт
	
	ПараметрыОтвета = Новый Структура;
	ПараметрыОтвета.Вставить("КодСостояния", Неопределено);
	ПараметрыОтвета.Вставить("ПараметрыТела", Новый Структура);
	
	Возврат ПараметрыОтвета;
	
КонецФункции

Функция ОтправитьЗапрос(ПараметрыОтправки, ПолучитьОписаниеОтвета = Ложь) Экспорт
	
	ДополнитьПараметрыОтправки(ПараметрыОтправки);
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыОтправки.URL);
	Протокол = СтруктураURI.Схема;
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(Протокол);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(HTTPЗапрос.Заголовки, ПараметрыОтправки.Заголовки);
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыОтправки.ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,, Прокси, 20, НовыйЗащищенноеСоединениеПоПротоколу(Протокол));
	
	Если ПараметрыОтправки.ИмяСобытияЖР <> Неопределено Тогда
		ЗаписатьЗапросВЖурналРегистрации(ПараметрыОтправки.ИмяСобытияЖР, HTTPСоединение, HTTPЗапрос, ПараметрыОтправки.Метод);
	КонецЕсли;
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(ПараметрыОтправки.Метод, HTTPЗапрос);
	Если ПараметрыОтправки.ИмяСобытияЖР <> Неопределено Тогда
		ЗаписатьОтветВЖурналРегистрации(ПараметрыОтправки.ИмяСобытияЖР, HTTPОтвет);
	КонецЕсли;
	
	Если НЕ ПолучитьОписаниеОтвета Тогда
		Возврат HTTPОтвет;
	КонецЕсли;
	
	Возврат ПараметрыОтвета(HTTPОтвет);
	
КонецФункции

Функция ОтправитьЗапросРекурсивно(ПараметрыОтправки, ПолучитьОписаниеОтвета = Ложь) Экспорт
	
	HTTPОтвет = ОтправитьЗапрос(ПараметрыОтправки, Ложь);
	
	Если ЭтоПеренаправление(HTTPОтвет) Тогда
		ПараметрыОтправки.КоличествоПеренаправлений = ПараметрыОтправки.КоличествоПеренаправлений + 1;
		ПроверитьКоличествоПеренаправлений(ПараметрыОтправки);
		
		НовыйURL = "";
		ПрочитатьЗначениеЗаголовка(HTTPОтвет.Заголовки, "Location", НовыйURL);
		НовыйURL = РаскодироватьСтроку(НовыйURL, СпособКодированияСтроки.URLВКодировкеURL);
		
		Если СтрНачинаетсяС(НовыйURL, "//") Тогда
			СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыОтправки.URL);
			Протокол = СтруктураURI.Схема;
			НовыйURL = Протокол + ":" + НовыйURL;
		КонецЕсли;
		
		ПараметрыОтправки.URL = НовыйURL;
		Возврат ОтправитьЗапросРекурсивно(ПараметрыОтправки, ПолучитьОписаниеОтвета);
	КонецЕсли;
	
	Если НЕ ПолучитьОписаниеОтвета Тогда
		Возврат HTTPОтвет;
	КонецЕсли;
	
	Возврат ПараметрыОтвета(HTTPОтвет);
	
КонецФункции

Функция ПрочитатьЗначениеЗаголовка(Заголовки, Заголовок, ЗначениеЗаголовка = Неопределено) Экспорт
	
	Для каждого КлючЗначение Из Заголовки Цикл
		Если НРег(КлючЗначение.Ключ) = НРег(Заголовок) Тогда
			ЗначениеЗаголовка = КлючЗначение.Значение;
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПараметрыОтвета(Ответ) Экспорт
	
	ПараметрыОтвета = НовыйПараметрыОтвета();
	
	ТипКонтента = Неопределено;
	ПрочитатьЗначениеЗаголовка(Ответ.Заголовки, "Content-Type", ТипКонтента);
	
	Если ЭтоТипКонтентаJson(ТипКонтента) Тогда
		ПараметрыОтвета.ПараметрыТела = ПрочитатьJSONВСтруктуру(Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	ПараметрыОтвета.КодСостояния = Ответ.КодСостояния;
	
	Возврат ПараметрыОтвета;
	
КонецФункции

Функция ЧислоСтрокойБезФормата(Число) Экспорт
	
	Возврат Формат(Число, "ЧГ=''");
	
КонецФункции

Функция ЗначениеПараметраДляURL(Значение) Экспорт
	
	ПреобразованноеЗначение = Значение;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		ПреобразованноеЗначение = ЧислоСтрокойБезФормата(Значение);
	КонецЕсли;
	
	ПреобразованноеЗначение = КодироватьСтроку(ПреобразованноеЗначение, СпособКодированияСтроки.КодировкаURL);
	
	Возврат ПреобразованноеЗначение;
	
КонецФункции

Процедура ЗаполнитьURL(ПараметрыОтправки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОтправки.URL) И ЗначениеЗаполнено(ПараметрыОтправки.Сервер) Тогда
		ПараметрыОтправки.URL = СобратьURL(ПараметрыОтправки.Сервер, ПараметрыОтправки.АдресРесурса);
	КонецЕсли;
	Если СтрНайти(ПараметрыОтправки.URL, "?") = 0 Тогда
		ДополнитьURLПараметрами(ПараметрыОтправки);
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнитьURLСтрокойПараметров(Знач URL, СтрокаПараметров) Экспорт
	
	Если СтрНайти(URL, "?") = 0 Тогда
		URL = URL + "?";
	КонецЕсли;
	
	ДобавитьАмперсанд = НЕ СтрЗаканчиваетсяНа(URL, "?") И НЕ СтрЗаканчиваетсяНа(URL, "&");
	Если ДобавитьАмперсанд Тогда
		URL = URL + "&";
	КонецЕсли;
	
	URL = URL + СтрокаПараметров;
	
	Возврат URL;
	
КонецФункции

Процедура Подождать(Секунд) Экспорт
	
	ОжидаемаяДата = ТекущаяДатаСеанса() + Секунд;
	
	Пока ТекущаяДатаСеанса() < ОжидаемаяДата Цикл
		Продолжить;
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокаBasicАутентификации(Логин, Пароль) Экспорт
	
	Возврат "Basic " + СтрокаBase64БезBOM(Логин + ":" + Пароль);
	
КонецФункции

#Область РаботаСJSON

// Преобразует текст JSON в структуру. Описание параметров см. в Синтакс-помощнике.
// Для преобразования полей с типом дата в формате UTC можно вызвать функцию восстановления:
// ТелефонияСервер.ВосстановлениеСвойствСоЗначениямиДатаUTC
// 
// Возвращаемое значение:
//   - Структура
//
Функция ПрочитатьJSONВСтруктуру(ТекстJSON,
		ИменаСвойствСоЗначениямиДата = Неопределено,
		Знач ОжидаемыйФорматДаты = Неопределено,
		ИмяФункцииВосстановления = Неопределено,
		МодульФункцииВосстановления = Неопределено,
		ДополнительныеПараметрыФункцииВосстановления = Неопределено,
		ИменаСвойствДляОбработкиВосстановления = Неопределено) Экспорт
	
	Возврат ПрочитатьJsonВКоллекцию(
		ТекстJSON,
		Тип("Структура"),
		ИменаСвойствСоЗначениямиДата,
		ОжидаемыйФорматДаты,
		ИмяФункцииВосстановления,
		МодульФункцииВосстановления,
		ДополнительныеПараметрыФункцииВосстановления,
		ИменаСвойствДляОбработкиВосстановления);
	
КонецФункции

Функция ПрочитатьJSONВСоответствие(ТекстJSON,
		ИменаСвойствСоЗначениямиДата = Неопределено,
		Знач ОжидаемыйФорматДаты = Неопределено,
		ИмяФункцииВосстановления = Неопределено,
		МодульФункцииВосстановления = Неопределено,
		ДополнительныеПараметрыФункцииВосстановления = Неопределено,
		ИменаСвойствДляОбработкиВосстановления = Неопределено) Экспорт
	
	Возврат ПрочитатьJsonВКоллекцию(
		ТекстJSON,
		Тип("Соответствие"),
		ИменаСвойствСоЗначениямиДата,
		ОжидаемыйФорматДаты,
		ИмяФункцииВосстановления,
		МодульФункцииВосстановления,
		ДополнительныеПараметрыФункцииВосстановления,
		ИменаСвойствДляОбработкиВосстановления);
	
КонецФункции

// Преобразует произвольную структуру в JSON. См. описание в Синтакс-помощнике.
//
// Параметры:
//  СтруктураПараметров - Структура
// 
// Возвращаемое значение:
//   - Строка
//
Функция СоздатьJSONИзСтруктуры(СтруктураПараметров, ПереносСтрок = Неопределено) Экспорт
	
	Если СтруктураПараметров.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	Если ПереносСтрок = Неопределено Тогда
		ПараметрыЗаписи = Новый ПараметрыЗаписиJSON;
	Иначе
		ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрок);
	КонецЕсли;
	
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураПараметров);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Функция восстановления значений JSON для вызова из ТелефонияСервер.ПрочитатьJSONВСтруктуру
//  См. описание параметров с синтакс-помощнике к методу ПрочитатьJSON (глобальный контекст).
//
// Возвращаемое значение:
//   - Произвольный
//
Функция ВосстановлениеСвойствСоЗначениямиДатаUTC(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	ПреобразованноеЗначение = Дата(1970,01,01) + Число(Значение);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ЧасовойПояс") Тогда
		ПреобразованноеЗначение = МестноеВремя(ПреобразованноеЗначение, ДополнительныеПараметры.ЧасовойПояс);
	КонецЕсли;
	
	Возврат ПреобразованноеЗначение;
	
КонецФункции

// Функция восстановления значений JSON для вызова из ТелефонияСервер.ПрочитатьJSONВСтруктуру
//  См. описание параметров с синтакс-помощнике к методу ПрочитатьJSON (глобальный контекст).
//
// Возвращаемое значение:
//   - Произвольный
//
Функция ВосстановлениеСвойствСоЗначениямиДатаISO(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	ПреобразованноеЗначение = СтрЗаменить(Значение, " ", "T");
	ПреобразованноеЗначение = ПрочитатьДатуJSON(ПреобразованноеЗначение, ФорматДатыJSON.ISO);
	Возврат ПреобразованноеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПрочитатьJsonВКоллекцию(ТекстJSON,
		ТипКоллекции,
		ИменаСвойствСоЗначениямиДата = Неопределено,
		Знач ОжидаемыйФорматДаты = Неопределено,
		ИмяФункцииВосстановления = Неопределено,
		МодульФункцииВосстановления = Неопределено,
		ДополнительныеПараметрыФункцииВосстановления = Неопределено,
		ИменаСвойствДляОбработкиВосстановления = Неопределено)
	
	Если ТекстJSON = "" Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	
	Если ОжидаемыйФорматДаты = Неопределено Тогда
		ОжидаемыйФорматДаты = ФорматДатыJSON.ISO;
	КонецЕсли;
	
	МассивСвойствДляОбработкиВосстановления = Неопределено;
	Если ИменаСвойствДляОбработкиВосстановления <> Неопределено Тогда
		Если ТипЗнч(ИменаСвойствДляОбработкиВосстановления) = Тип("Строка") Тогда
			МассивСвойствДляОбработкиВосстановления = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаСвойствДляОбработкиВосстановления);
		Иначе
			МассивСвойствДляОбработкиВосстановления = ИменаСвойствДляОбработкиВосстановления;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = ПрочитатьJSON(
		ЧтениеJSON,
		ТипКоллекции = Тип("Соответствие"),
		ИменаСвойствСоЗначениямиДата,
		ОжидаемыйФорматДаты,
		ИмяФункцииВосстановления,
		МодульФункцииВосстановления,
		ДополнительныеПараметрыФункцииВосстановления,
		МассивСвойствДляОбработкиВосстановления);
	
	ЧтениеJSON.Закрыть();
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ДополнитьПараметрыОтправки(ПараметрыОтправки) Экспорт
	
	ЗаполнитьURL(ПараметрыОтправки);
	
	Если ЗначениеЗаполнено(ПараметрыОтправки.Json) И ПараметрыОтправки.ПараметрыТела.Количество() <> 0 Тогда
		ВызватьИсключение НСтр("ru='Указаны одновременно параметры тела и Json.'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОтправки.ТелоЗапроса) Тогда
		
		Если ЗначениеЗаполнено(ПараметрыОтправки.Json) Тогда
			
			ПараметрыОтправки.Заголовки.Вставить("Content-Type", ТипКонтентаJson());
			Если ТипЗнч(ПараметрыОтправки.Json) = Тип("Строка") Тогда
				ПараметрыОтправки.ТелоЗапроса = ПараметрыОтправки.Json;
			ИначеЕсли ТипЗнч(ПараметрыОтправки.Json) = Тип("Структура") Тогда
				ПараметрыОтправки.ТелоЗапроса = СоздатьJSONИзСтруктуры(ПараметрыОтправки.Json);
			Иначе
				ТекстОшибки = НСтр("ru='Передан некорректный тип параметра Json: ""%1"".
					|Ожидается Строка или Структура.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ТипЗнч(ПараметрыОтправки.Json));
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
		ИначеЕсли ПараметрыОтправки.ПараметрыТела.Количество() <> 0 Тогда
			
			ПараметрыТела = Новый Массив;
			Для каждого КлючЗначение Из ПараметрыОтправки.ПараметрыТела Цикл
				ПараметрТела = КлючЗначение.Ключ + "=" + ЗначениеПараметраДляURL(КлючЗначение.Значение);
				ПараметрыТела.Добавить(ПараметрТела);
			КонецЦикла;
			
			ПараметрыОтправки.ТелоЗапроса = СтрСоединить(ПараметрыТела, "&");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПрочитатьЗначениеЗаголовка(ПараметрыОтправки.Заголовки, "Content-Type") Тогда
		ПараметрыОтправки.Заголовки.Вставить("Content-Type", ТипКонтентаUrlEncoded());
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйЗащищенноеСоединениеПоПротоколу(Протокол)
	
	Если Протокол <> "https" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС);
	
КонецФункции

Функция ЭтоПеренаправление(HTTPОтвет)
	
	Если HTTPОтвет.КодСостояния <> 301 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Location = "";
	Если НЕ ПрочитатьЗначениеЗаголовка(HTTPОтвет.Заголовки, "Location", Location) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(Location);
	
КонецФункции

Функция ЭтоТипКонтентаJson(ТипКонтента)
	
	Возврат СтрНайти(НРег(ТипКонтента), НРег(ТипКонтентаJson())) <> 0;
	
КонецФункции

Функция ТипКонтентаUrlEncoded()
	
	Возврат "application/x-www-form-urlencoded";
	
КонецФункции

Функция ТипКонтентаJson()
	
	Возврат "application/json";
	
КонецФункции

Процедура ПроверитьКоличествоПеренаправлений(ПараметрыОтправки)
	
	ОграничениеКоличестваПеренаправленийПоУмолчанию = 1;
	
	Если ПараметрыОтправки.ДопустимоеКоличествоПеренаправлений <> Неопределено Тогда
		ОграничениеКоличестваПеренаправлений = ПараметрыОтправки.ДопустимоеКоличествоПеренаправлений;
	Иначе
		ОграничениеКоличестваПеренаправлений = ОграничениеКоличестваПеренаправленийПоУмолчанию;
	КонецЕсли;
	
	Если ПараметрыОтправки.КоличествоПеренаправлений <= ОграничениеКоличестваПеренаправлений Тогда
		Возврат;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru='Превышено количество перенаправлений.'");
	
КонецПроцедуры

Функция СобратьURL(Знач Сервер, Знач АдресРесурса)
	
	Если НЕ ЗначениеЗаполнено(Сервер) Тогда
		Возврат "";
	КонецЕсли;
	
	Сервер = СокрЛП(Сервер);
	Сервер = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Сервер, "/", "Слева");
	Сервер = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Сервер, "/", "Справа");
	АдресРесурса = СокрЛП(АдресРесурса);
	АдресРесурса = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(АдресРесурса, "/", "Слева");
	АдресРесурса = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(АдресРесурса, "/", "Справа");
	
	ЧастиURL = Новый Массив;
	ЧастиURL.Добавить(Сервер);
	ЧастиURL.Добавить("/");
	ЧастиURL.Добавить(АдресРесурса);
	
	Возврат СтрСоединить(ЧастиURL);
	
КонецФункции

Процедура ДополнитьURLПараметрами(ПараметрыОтправки)
	
	Если ПараметрыОтправки.ПараметрыURL.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыURL = Новый Массив;
	Для каждого КлючЗначение Из ПараметрыОтправки.ПараметрыURL Цикл
		ПараметрURL = КлючЗначение.Ключ + "=" + ЗначениеПараметраДляURL(КлючЗначение.Значение);
		ПараметрыURL.Добавить(ПараметрURL);
	КонецЦикла;
	
	ПараметрыОтправки.URL = ДополнитьURLСтрокойПараметров(ПараметрыОтправки.URL, СтрСоединить(ПараметрыURL, "&"));
	
КонецПроцедуры

Функция ПредставлениеСоответствияСтрокой(Соответствие)
	
	Строка = "";
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Если ЗначениеЗаполнено(Строка) Тогда
			Строка = Строка + Символы.ПС;
		КонецЕсли;
		Строка = Строка + КлючИЗначение.Ключ + ":" + КлючИЗначение.Значение;
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

Процедура ЗаписатьЗапросВЖурналРегистрации(ИмяСобытия, HTTPСоединение, HTTPЗапрос, HTTPМетод)
	
	ШаблонКомментария =
	"[Метод] [Сервер]:[Порт] [АдресРесурса]
	|Ssl:[Ssl]
	|Headers:
	|[Заголовки]
	|Body:
	|[ТелоЗапроса]";
	
	ПараметрыКомментария = Новый Структура;
	ПараметрыКомментария.Вставить("Метод",        HTTPМетод);
	ПараметрыКомментария.Вставить("Сервер",       HTTPСоединение.Сервер);
	ПараметрыКомментария.Вставить("Порт",         HTTPСоединение.Порт);
	ПараметрыКомментария.Вставить("АдресРесурса", HTTPЗапрос.АдресРесурса);
	ПараметрыКомментария.Вставить("Ssl",          ?(HTTPСоединение.ЗащищенноеСоединение = Неопределено, Ложь, Истина));
	ПараметрыКомментария.Вставить("Заголовки",    ПредставлениеСоответствияСтрокой(HTTPЗапрос.Заголовки));
	ПараметрыКомментария.Вставить("ТелоЗапроса",  HTTPЗапрос.ПолучитьТелоКакСтроку());
	
	Комментарий = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКомментария, ПараметрыКомментария);
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание,,, Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьОтветВЖурналРегистрации(ИмяСобытия, HTTPОтвет)
	
	ШаблонКомментария =
	"[КодСостояния]
	|Headers:
	|[Заголовки]
	|Body:
	|[ТелоЗапроса]";
	
	ПараметрыКомментария = Новый Структура;
	ПараметрыКомментария.Вставить("КодСостояния", HTTPОтвет.КодСостояния);
	ПараметрыКомментария.Вставить("Заголовки",    ПредставлениеСоответствияСтрокой(HTTPОтвет.Заголовки));
	ПараметрыКомментария.Вставить("ТелоЗапроса",  HTTPОтвет.ПолучитьТелоКакСтроку());
	
	Комментарий = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКомментария, ПараметрыКомментария);
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание,,, Комментарий);
	
КонецПроцедуры


// Возвращает строку Base64, содержащей данные строки в виде двоичных данных файла в формате UTF8 без BOM.
//
// Параметры:
//  СтрокаДанных  - Строка - строка для преобразования в BASE64.
//
// Возвращаемое значение:
//   Строка   - строка в BASE64.
//
Функция СтрокаBase64БезBOM(СтрокаДанных)

	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти, КодировкаТекста.UTF8, , Символы.ПС);
	Текст.Записать(СтрокаДанных);
	Текст.Закрыть();
	ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ВК, "");
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ПС, "");
	
	Возврат СтрокаФорматBase64;

КонецФункции

#КонецОбласти
