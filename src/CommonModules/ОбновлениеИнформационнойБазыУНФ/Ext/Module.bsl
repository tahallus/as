////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы (УНФ)
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ИдентификаторИнтернетПоддержки - Строка - уникальное имя программы в сервисах Интернет-поддержки.
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "УправлениеНебольшойФирмой";
	Описание.Версия = "1.6.26.132";
	Описание.ИдентификаторИнтернетПоддержки = "SmallBusiness";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.0.0.1";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_1";
//  Обработчик.МонопольныйРежим    = Ложь;
//  Обработчик.Опциональный        = Истина;
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	#Область ПервыйЗапуск
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПервыйЗапуск_РазделенныеДанные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПервыйЗапуск_ОбщиеДанные";
	Обработчик.ОбщиеДанные = Истина;
	
	#КонецОбласти
	
	#Область Обработчики_1_6_25
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.115";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьОтчеты_1_6_25";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c420bf3f-bdda-4e7a-ae5a-0411a2724141");
	Обработчик.Комментарий = НСтр("ru = 'Обновление настроек вариантов отчетов.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.39";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.СоздатьПолитикиУчетаСерий_1_6_25";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("691db5a8-99c3-490f-b518-8e0533306dfe");
	Обработчик.Комментарий = НСтр("ru = 'Создание основных политик учета серий номенклатуры.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.39";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УстановитьПолитикиУчетаСерийВНоменклатуру_1_6_25";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d88302b4-26a2-4549-8ef1-a4c2248b415c");
	Обработчик.Комментарий = НСтр("ru = 'Установка политик учета серий и политик по умолчанию в справочник - Номенклатура.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.103";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.СоздатьДвиженияПоРегиструДвиженияСерийНоменклатуры_1_6_25";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("45a0bbeb-437a-4663-884b-81f802085d2f");
	Обработчик.Комментарий = НСтр("ru = 'Создает движения по регистру Движения серий номенклатуры.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.СформироватьОсновныеСведенияДляГоловногоКонтрагентаИПодразделений";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f332da93-08e2-4071-9c3f-a3c02be1ff26");
	Обработчик.Комментарий = НСтр("ru = 'Формирование основных сведений для головного контрагента и подразделений'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.56";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьНаборДополнительныхРеквизитовИСведенийКомплектации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6e3983b8-06f6-49a9-8673-87ea5a2a6f09");
	Обработчик.Комментарий = НСтр("ru = 'Формирование наборов дополнительных реквизитов и сведений справочника комплектаций'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.74";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "УправлениеДоступомУНФ.ПеренестиДополнительныеПрофилиВГруппу";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d28054c9-2e72-4fec-bfe2-50a1913ee063");
	Обработчик.Комментарий = НСтр("ru = 'Перенос дополнительных профилей доступа в группу.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.74";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "УправлениеДоступомУНФ.МигрироватьПерсональныеГруппыДоступа";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b234f757-88c6-4431-ad12-4f332c550a4d");
	Обработчик.Комментарий = НСтр("ru = 'Миграция персональных групп доступа пользователей.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.74";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "УправлениеДоступомУНФ.ПометитьНаУдалениеПерсональныеГруппыБезПользователей";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e2963bfe-b2a6-4859-a17f-735ba80c9264");
	Обработчик.Комментарий = НСтр("ru = 'Пометка на удаление персональных групп доступа пользователей.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.74";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "УправлениеДоступомУНФ.ПредоставитьПользователямСПрофилемПродажиДоступКВозвратам";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b251a7fe-8a89-4b58-b6f7-9472ca063104");
	Обработчик.Комментарий = НСтр("ru = 'Предоставление пользователям с профилем Закупки доступа к Складу.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.74";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "УправлениеДоступомУНФ.ПредоставитьПользователямСПрофилемЗакупкиДоступКСкладу";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3487f530-fc9c-4799-b92a-218cd187f7bf");
	Обработчик.Комментарий = НСтр("ru = 'Предоставление пользователям с профилем Закупки доступа к Складу.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.74";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "УправлениеДоступомУНФ.СоздатьГруппыДляНедостающихПрофилей";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a36b9f90-f283-46f5-91d3-32f4d5164712");
	Обработчик.Комментарий = НСтр("ru = 'Создание групп для недостающих профилей доступа.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.84";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьПроцентыКомиссииВЭквайринговыхТерминалах";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2b0b94ee-0e35-4f31-ab32-28e84531f42c");
	Обработчик.Комментарий = НСтр("ru = 'Заполнить проценты комиссии в эквайринговых терминалах.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.84";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьКомиссиюЗаВозвратВОперацияхПоПлатежнымКартам";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3486f530-fc9c-4798-b91a-218cd273f4bf");
	Обработчик.Комментарий = НСтр("ru = 'Обновить комиссию за возврат в операциях по платежным картам.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.98";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьКонтрагентаПередачиВДвижениях";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3f6f0ff1-88ed-4a1a-a4ca-aa57afc556cc");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет контрагента передачи в движениях по регистру ""Продажи"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.101";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УстановитьКонстантуЯндексДоставки";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9d01c109-4a68-42d8-aed4-6ed8b1385dc0");
	Обработчик.Комментарий = НСтр("ru = 'Установка константы использования Яндекс доставки.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.101";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьСервисЯндексДоставкиВЗаказеПокупателя";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7bdf5072-e135-4ce6-822c-5a675bc4e55c");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение сервиса доставки в заказе покупателя'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.107";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьПризнакАгентаВДоговорахСКомитентом";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7bdf5072-e135-4ce6-821c-5a674bc2e35c");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение признака агента в созданных ранее договорах с комитентом.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.125";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УстановитьКоличествоМесяцевОчисткиВложенийЭлектронныхПисем";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7bdf5072-e135-4ce6-821c-5a673bc2e33c");
	Обработчик.Комментарий = НСтр("ru = 'Установка количества месяцев очистки вложений электронных писем.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.128";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УстановитьЗначениеПризнакаИспользуется";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7b818934-a40d-4432-81f8-8d83fb91c78c");
	Обработчик.Комментарий = НСтр("ru = 'Установка использования дополнительного набора свойств для документа Передача товаров между организациями'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.141";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "УправлениеДоступомУНФ.ПредоставитьПользователямДоступКРедактированиюБанковскихСчетов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("edb23339-3c1a-440f-813b-1cd3bd7009bb");
	Обработчик.Комментарий = НСтр("ru = 'Предоставление пользователям доступ к редактированию банковских счетов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.164";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.СоздатьПолитикуКиЗ";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0e32c042-1d3f-481d-b8d3-c03ea36dcec3");
	Обработчик.Комментарий = НСтр("ru = 'Создание политики КиЗ'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.227";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьРолиУСлужебногоПользователяКабинетКлиента";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4973ce70-61d3-4390-a22a-64859efafc1a");
	Обработчик.Комментарий = НСтр("ru = 'Обновление ролей у служебного пользователя мобильного приложения ""Кабинет клиента""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.25.230";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьДатуНачалаВыгрузкиДокументовВУзлеОбменаКабинетКлиента";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("831f41ea-8842-4060-aa48-1db35629e462");
	Обработчик.Комментарий = НСтр("ru = 'Обновление даты начала выгрузки документов в узле обмена для мобильного приложения ""Кабинет клиента""'");
	
	#КонецОбласти
	
	#Область Обработчики_1_6_26
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УстановитьКоэффициентЕдиницыДляОтчетовИШтрихКодДляПечатныхФорм";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e113f2b0-aea0-406e-b20f-1bc16299d4de");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение коэффициента единицы измерения для отчетов и штрихкода для печатных форм'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ДобавитьПолеШтрихкодВПрайсЛисты";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ab20c83c-f694-44b3-98a8-62c88708c6f5");
	Обработчик.Комментарий = НСтр("ru = 'Добавляет штрихкод в прайс-листы'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.25";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьПоставляемыеСостоянияЗаказовНаПеремещение";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d8518b83-dcf7-49b0-a536-af4fe8e4f633");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение поставляемых состояний заказов на перемещение.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.25";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьНаборДополнительныхРеквизитовИСведенийЗаказНаПеремещение";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5a3bcab8-866d-478e-add0-f575ce1bb51c");
	Обработчик.Комментарий = НСтр("ru = 'Обновление параметров НаборыДополнительныхРеквизитовИСведений документа ЗаказНаПеремещение.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.45";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПеренестиПравилаСегментаВСКД";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8dfb622c-ecf9-41ee-b17b-e5581699c269");
	Обработчик.Комментарий = НСтр("ru = 'Обновление сегментов на новые правила'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.49";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьВариантОграниченияСкидокПоПолучателям";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d8518b83-dcf7-49b0-a536-af4fe8e4f633");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение варианта ограничений скидок по получателям.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.49";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьВариантПредоставленияСкидкиПоНоменклатуре";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a931162e-5471-40c1-a74c-75d12ed749a9");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение варианта предоставления скидки по номенклатуре.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.56";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьЕдиницуИзмеренияВладельца";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bcd4f526-a0c5-4481-b7c6-4e2bad8bc4ef");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит -Единица измерения владельца- справочника Единицы измерения'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.57";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьОтборыВСпискеСобытия";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bcd4f123-a0c5-4481-b9c6-4e2bad8bc2ef");
	Обработчик.Комментарий = НСтр("ru = 'Обновление отборов в форме списка документа Событие'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.74";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьОтчеты_1_6_26";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5b03545f-2a44-4a17-a6c6-a9d909baf6c5");
	Обработчик.Комментарий = НСтр("ru = 'Обновление настроек вариантов отчетов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьРеквизитыШапкаТабличнаяЧастьВДенежныхДокументах";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5b03541f-2a48-4a14-a6c1-a9d909baf4c2");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов Шапка / Табличная часть в денежных документах.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.82";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбработатьПустыеСерии";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("953f168c-9ca4-43f0-9c83-dbd77214214c");
	Обработчик.Комментарий = НСтр("ru = 'Приводит незаполненные серии в объектах информационной базы к единому виду'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.88";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УдалениеУстаревшихВариантовОтчетов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("08b3a889-9c03-47e3-a43f-c9068e66a8a0");
	Обработчик.Комментарий = НСтр("ru = 'Удаляет устаревшие варианты отчетов, для которых изменен ключ варианта'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.88";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.УдалениеУстаревшихПредопределенныхВариантовОтчетов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ae80b19c-b2b9-438d-8e7f-798f669a926a");
	Обработчик.Комментарий = НСтр("ru = 'Удаляет устаревшие предопределенные варианты отчетов, для которых изменен ключ варианта'");  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.115";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.РеструктуризацияНастроекФормыСпискаНоменклатуры";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ea09a57d-bc4d-415a-a081-378042094faa");
	Обработчик.Комментарий = НСтр("ru = 'Реструктуризация настроек формы списка номенклатуры'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.100";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьНастройкиРассылокОтчетов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b686a6e1-6844-4ef9-a900-2892a1c94124");
	Обработчик.Комментарий = НСтр("ru = 'Обновление настроек существующих рассылок отчетов'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.100";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьЗадачиПоСдачиАлкогольнойДекларации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("290b7243-b442-467c-9146-4940c1b9a86e");
	Обработчик.Комментарий = НСтр("ru = 'Обновить задачи по сдачи алкогольной декларации за 2021 год.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.103";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ИзменениеПараметровОбменаВРегламентномЗаданииКабинетКлиента";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bc762197-b348-419c-9de2-b1a581138187");
	Обработчик.Комментарий = НСтр("ru = 'Изменение параметров обмена в регламентном задании Кабинета клиента для разделенных ИБ'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.108";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьПользовательскиеВариантыОтчетов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("17d40bd9-cee8-48e6-85d4-f26609da7261");
	Обработчик.Комментарий = НСтр("ru = 'Обновление настроек существующих пользовательских вариантов отчетов'");  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.110";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.КодыОперацийПрослеживаемости.ЗаполнитьНачальныеЗначения";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9f55a34b-3853-47e9-bccc-984feeda96f3");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение кодов операций по прослеживаемости'"); 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.114";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьКомиссиюЭквайрераВРознице";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d4f1481d-0ffa-4f00-9848-4e6f89daffaf");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение колонки с комиссией эквайрера в чеках и отчетах о продажах'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.26.126";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаменитьФормуИнформационногоЦентраНаНачальномЭкране";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dca04998-4661-4a35-8065-3eb81da04c57");
	Обработчик.Комментарий = НСтр("ru = 'Замена формы информационного центра на начальном экране'");
	
	#КонецОбласти
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
	Знач ИтерацииОбновления, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Возврат;
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриОпределенииНастроек
Процедура ПриОпределенииНастроекОбновленияИнформационнойБазы(Параметры) Экспорт
	
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.Организации);
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.ВидыНалогов);
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПервыйЗапуск_ОбщиеДанные

// (5.Общий) Заполняем справочник ОКУН
Процедура ЗагрузитьОКУН()
	
	Справочники.ОКУН.ЗагрузитьКлассификатор();
	Справочники.ОКУН.ПроставитьВидДеятельностиОКУН();
	
КонецПроцедуры

// (6.Общий) Заполняет РС КоэффициентДефлятор
//
Процедура ЗаполнитьКоэффициентДефлятор()
	
	// переписываем сразу весь набор
	Набор = РегистрыСведений.КоэффициентДефлятор.СоздатьНаборЗаписей();
	
	Запись = Набор.Добавить();
	Запись.Период = '20030101';
	Запись.Значение = 1;
	
	Запись = Набор.Добавить();
	Запись.Период = '20040101';
	Запись.Значение = 1.133;
	
	Запись = Набор.Добавить();
	Запись.Период = '20050101';
	Запись.Значение = 1.104;
	
	Запись = Набор.Добавить();
	Запись.Период = '20060101';
	Запись.Значение = 1.132;
	
	Запись = Набор.Добавить();
	Запись.Период = '20070101';
	Запись.Значение = 1.096;
	
	Запись = Набор.Добавить();
	Запись.Период = '20080101';
	Запись.Значение = 1.081;
	
	Запись = Набор.Добавить();
	Запись.Период = '20090101';
	Запись.Значение = 1.148;
	
	Запись = Набор.Добавить();
	Запись.Период = '20100101';
	Запись.Значение = 1.295;
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.Значение = 1.372;
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.Значение = 1.4942;
	
	Запись = Набор.Добавить();
	Запись.Период = '20130101';
	Запись.Значение = 1.569;
	
	Запись = Набор.Добавить();
	Запись.Период = '20140101';
	Запись.Значение = 1.672;
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.Значение = 1.798;
	
	Запись = Набор.Добавить();
	Запись.Период = '20160101';
	Запись.Значение = 1.798;
	
	Запись = Набор.Добавить();
	Запись.Период = '20180101';
	Запись.Значение = 1.868;
	
	Запись = Набор.Добавить();
	Запись.Период = '20190101';
	Запись.Значение = 1.915;
	
	Запись = Набор.Добавить();
	Запись.Период = '20200101';
	Запись.Значение = 2.005;
	
	Набор.Записать();
	
КонецПроцедуры

// (7.Общий) Заполнять РС МРОТ
//
Процедура ЗагрузитьМРОТ()
	
	Набор = РегистрыСведений.МРОТ.СоздатьНаборЗаписей();
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20000701';
	Запись.Значение = 132;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20010101';
	Запись.Значение = 200;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20010701';
	Запись.Значение = 300;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20020501';
	Запись.Значение = 450;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20031001';
	Запись.Значение = 600;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20050101';
	Запись.Значение = 720;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20050901';
	Запись.Значение = 800;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20060501';
	Запись.Значение = 1100;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20070901';
	Запись.Значение = 2300;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20090101';
	Запись.Значение = 4330;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20110601';
	Запись.Значение = 4611;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20130101';
	Запись.Значение = 5205;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20140101';
	Запись.Значение = 5554;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20150101';
	Запись.Значение = 5965;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20160101';
	Запись.Значение = 6204;
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.Значение = 7500;
	
	Запись = Набор.Добавить();
	Запись.Период = '20180101';
	Запись.Значение = 7800;
	
	Запись = Набор.Добавить();
	Запись.Период = '20190101';
	Запись.Значение = 11280;
	
	Запись = Набор.Добавить();
	Запись.Период = '20200101';
	Запись.Значение = 12130;
	
	Запись = Набор.Добавить();
	Запись.Период = '20210101';
	Запись.Значение = 12792;
	
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПервыйЗапуск_РазделенныеДанные

// (1) Процедура загружает управленческий план счетов из макета.
//
Процедура ЗагрузитьУправленческийПланСчетовПервыйЗапуск()
	
	// 00.
	Счет = ПланыСчетов.Управленческий.Служебный.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 01.
	Счет = ПланыСчетов.Управленческий.ВнеоборотныеАктивы.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ВнеоборотныеАктивы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 02.
	Счет = ПланыСчетов.Управленческий.АмортизацияВнеоборотныхАктивов.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.АмортизацияВнеоборотныхАктивов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 08.
	Счет = ПланыСчетов.Управленческий.ВложенияВоВнеоборотныеАктивы.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеВнеоборотныеАктивы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 10.
	Счет = ПланыСчетов.Управленческий.СырьеИМатериалы.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.Запасы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 20.
	Счет = ПланыСчетов.Управленческий.НезавершенноеПроизводство.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.НезавершенноеПроизводство;
	Счет.СчетЗакрытия = ПланыСчетов.Управленческий.ТоварыПродукция;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 25.
	Счет = ПланыСчетов.Управленческий.КосвенныеЗатраты.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты;
	Счет.СчетЗакрытия = ПланыСчетов.Управленческий.НезавершенноеПроизводство;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемВыпуска;
	Счет.Записать();
	
	// 41.
	Счет = ПланыСчетов.Управленческий.ТоварыПродукция.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.Запасы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 42.
	Счет = ПланыСчетов.Управленческий.ТорговаяНаценка.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ТорговаяНаценка;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 50.
	Счет = ПланыСчетов.Управленческий.Касса.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 51.
	Счет = ПланыСчетов.Управленческий.Банк.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 57.
	Счет = ПланыСчетов.Управленческий.ПереводыВПути.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 58.
	Счет = ПланыСчетов.Управленческий.ФинансовыеВложения.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 60.
	Счет = ПланыСчетов.Управленческий.РасчетыСПоставщикамиИПодрядчиками.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 60.01
	Счет = ПланыСчетов.Управленческий.РасчетыСПоставщиками.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПоставщикамиИПодрядчиками;
	Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 60.02
	Счет = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПоставщикамиИПодрядчиками;
	Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 62.
	Счет = ПланыСчетов.Управленческий.РасчетыСПокупателямиИЗаказчиками.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 62.01
	Счет = ПланыСчетов.Управленческий.РасчетыСПокупателями.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПокупателямиИЗаказчиками;
	Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 62.02
	Счет = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПокупателямиИЗаказчиками;
	Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 66.
	Счет = ПланыСчетов.Управленческий.РасчетыПоКраткосрочнымКредитамИЗаймам.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.КредитыИЗаймы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 67.
	Счет = ПланыСчетов.Управленческий.РасчетыПоДолгосрочнымКредитамИЗаймам.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДолгосрочныеОбязательства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 68.
	Счет = ПланыСчетов.Управленческий.РасчетыПоНалогам.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 68.01
	Счет = ПланыСчетов.Управленческий.Налоги.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.РасчетыПоНалогам;
	Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 68.02
	Счет = ПланыСчетов.Управленческий.НалогиКВозмещению.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.РасчетыПоНалогам;
	Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 70.
	Счет = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоОплатеТруда.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 71.
	Счет = ПланыСчетов.Управленческий.РасчетыСПодотчетнымиЛицами.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 71.01
	Счет = ПланыСчетов.Управленческий.РасчетыСПодотчетниками.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПодотчетнымиЛицами;
	Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 71.02
	Счет = ПланыСчетов.Управленческий.ПерерасходПодотчетников.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПодотчетнымиЛицами;
	Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// Прочие расчеты
	// 73
	Счет = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоПрочимОперациям.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 73.01
	Счет = ПланыСчетов.Управленческий.РасчетыПоПредоставленнымЗаймам.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоПрочимОперациям;
	Счет.ТипСчета = Перечисления.ТипыСчетов.КредитыИЗаймы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 73.02
	Счет = ПланыСчетов.Управленческий.РасчетыПоВозмещениюМатериальногоУщерба.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоПрочимОперациям;
	Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 75
	Счет = ПланыСчетов.Управленческий.РасчетыСУчредителями.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 75.01
	Счет = ПланыСчетов.Управленческий.РасчетыПоВкладамВУставныйКапитал.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСУчредителями;
	Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 75.02
	Счет = ПланыСчетов.Управленческий.РасчетыПоВыплатеДоходов.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСУчредителями;
	Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 76
	Счет = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 76.01
	Счет = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторами.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами;
	Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 76.02
	Счет = ПланыСчетов.Управленческий.РасчетыСРазнымиКредиторами.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами;
	Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	//76.05
	Счет = ПланыСчетов.Управленческий.РасчетыСПрочимиПоставщикамиИТаможеннымиОрганами.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами;
	Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	// Конец Прочие расчеты
	
	// 80.
	Счет = ПланыСчетов.Управленческий.УставныйКапитал.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.Капитал;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 82.
	Счет = ПланыСчетов.Управленческий.РезервныйИДобавочныйКапитал.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.РезервныйИДобавочныйКапитал;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 84.
	Счет = ПланыСчетов.Управленческий.НераспределеннаяПрибыль.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.НераспределеннаяПрибыль;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 90.
	Счет = ПланыСчетов.Управленческий.Продажи.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 90.01
	Счет = ПланыСчетов.Управленческий.ВыручкаОтПродаж.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.Продажи;
	Счет.ТипСчета = Перечисления.ТипыСчетов.Доходы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 90.02
	Счет = ПланыСчетов.Управленческий.СебестоимостьПродаж.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.Продажи;
	Счет.ТипСчета = Перечисления.ТипыСчетов.СебестоимостьПродаж;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 90.07
	Счет = ПланыСчетов.Управленческий.КоммерческиеРасходы.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.Продажи;
	Счет.ТипСчета = Перечисления.ТипыСчетов.Расходы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
	Счет.Записать();
	
	// 90.08
	Счет = ПланыСчетов.Управленческий.УправленческиеРасходы.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.Продажи;
	Счет.ТипСчета = Перечисления.ТипыСчетов.Расходы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
	Счет.Записать();
	
	// 91.
	Счет = ПланыСчетов.Управленческий.ПрочиеДоходыИРасходы.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 91.01
	Счет = ПланыСчетов.Управленческий.ПрочиеДоходы.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.ПрочиеДоходыИРасходы;
	Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеДоходы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
	Счет.Записать();
	
	// 91.02
	Счет = ПланыСчетов.Управленческий.ПрочиеРасходы.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.ПрочиеДоходыИРасходы;
	Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеРасходы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
	Счет.Записать();
	
	// 91.03
	Счет = ПланыСчетов.Управленческий.ПроцентыПоКредитам.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.ПрочиеДоходыИРасходы;
	Счет.ТипСчета = Перечисления.ТипыСчетов.ПроцентыПоКредитам;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
	Счет.Записать();
	
	// 94.
	Счет = ПланыСчетов.Управленческий.НедостачиИПотериОтПорчиЦенностей.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 97.
	Счет = ПланыСчетов.Управленческий.РасходыБудущихПериодов.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 99.
	Счет = ПланыСчетов.Управленческий.ПрибылиИУбытки.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 99.01
	Счет = ПланыСчетов.Управленческий.ПрибылиИУбыткиБезНалогаНаПрибыль.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.ПрибылиИУбытки;
	Счет.ТипСчета = Перечисления.ТипыСчетов.ПрибылиУбытки;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 99.02
	Счет = ПланыСчетов.Управленческий.ПрибылиИУбытки_НалогНаПрибыль.ПолучитьОбъект();
	Счет.Родитель = ПланыСчетов.Управленческий.ПрибылиИУбытки;
	Счет.ТипСчета = Перечисления.ТипыСчетов.НалогНаПрибыль;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
КонецПроцедуры // ЗагрузитьУправленческийПланСчетовПервыйЗапуск()

// (3) Процедура заполняет в ИБ справочник "Виды налогов".
// См. Справочники.ВидыНалогов.ПриНастройкеНачальногоЗаполненияЭлементов
//
Процедура ЗаполнитьВидыНалоговПервыйЗапуск()
	
	// 1. НДС.
	ВидНалога = Справочники.ВидыНалогов.СоздатьЭлемент();
	ВидНалога.Наименование = НСтр("ru = 'НДС'");
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	// 2. Налог на прибыль.
	ВидНалога = Справочники.ВидыНалогов.СоздатьЭлемент();
	ВидНалога.Наименование = НСтр("ru = 'Налог на прибыль'");
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
КонецПроцедуры

// (5) Процедура заполняет в информационной базе справочник "Ставки НДС"
//
Процедура ЗаполнитьСтавкиНДСПервыйЗапуск()
	
	// 10%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "10%";
	СтавкаНДС.Ставка = 10;
	СтавкаНДС.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.Пониженная;
	СтавкаНДС.Записать();
	
	// 18% / 118%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "18% / 118%";
	СтавкаНДС.Расчетная = Истина;
	СтавкаНДС.Ставка = 18;
	СтавкаНДС.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ОбщаяРасчетная;
	СтавкаНДС.Записать();
	
	// 10% / 110%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "10% / 110%";
	СтавкаНДС.Расчетная = Истина;
	СтавкаНДС.Ставка = 10;
	СтавкаНДС.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ПониженнаяРасчетная;
	СтавкаНДС.Записать();
	
	// 0%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "0%";
	СтавкаНДС.Ставка = 0;
	СтавкаНДС.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.Нулевая;
	СтавкаНДС.Записать();
	
	// Без НДС
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "Без НДС";
	СтавкаНДС.НеОблагается = Истина;
	СтавкаНДС.Ставка = 0;
	СтавкаНДС.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.БезНДС;
	СтавкаНДС.Записать();
	
	// 20% / 120%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "20% / 120%";
	СтавкаНДС.Расчетная = Истина;
	СтавкаНДС.Ставка = 20;
	СтавкаНДС.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ОбщаяРасчетная;
	СтавкаНДС.Записать();
	
	// 20%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "20%";
	СтавкаНДС.Ставка = 20;	
	СтавкаНДС.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.Общая;
	СтавкаНДС.Записать();
	
	// 18%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "18%";
	СтавкаНДС.Ставка = 18;	
	СтавкаНДС.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.Общая;
	СтавкаНДС.Записать();
	
КонецПроцедуры

// (7) Процедура создает график работы на основе производственного календаря 
// Российской Федерации по шаблону "Пятидневка"
//
Процедура СоздатьКалендарьПятидневкаРоссийскойФедерации()
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	Если ПроизводственныйКалендарь = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Справочники.Календари.НайтиПоРеквизиту("ПроизводственныйКалендарь", ПроизводственныйКалендарь).Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйГрафикРаботы = Справочники.Календари.СоздатьЭлемент();
	НовыйГрафикРаботы.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроизводственныйКалендарь, "Наименование");
	НовыйГрафикРаботы.ПроизводственныйКалендарь = ПроизводственныйКалендарь;
	НовыйГрафикРаботы.СпособЗаполнения = Перечисления.СпособыЗаполненияГрафикаРаботы.ПоНеделям;
	НовыйГрафикРаботы.ДатаНачала = НачалоГода(ТекущаяДатаСеанса());
	НовыйГрафикРаботы.УчитыватьПраздники = Истина;
	
	// Заполняем недельный цикл как пятидневку
	Для НомерДня = 1 По 7 Цикл
		НовыйГрафикРаботы.ШаблонЗаполнения.Добавить().ДеньВключенВГрафик = НомерДня <= 5;
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйГрафикРаботы, Истина, Истина);
	
КонецПроцедуры // СоздатьКалендарьПятидневкаРоссийскойФедерации()

// (15) Процедура заполняет справочники "Параметры расчетов" и "Виды начислений и удержаний".
//
Процедура ЗаполнитьПараметрыРасчетовИВидыНачислений()
	
	// Параметры расчетов.
	
	// Сумму продаж по ответственному (СПО)
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("СуммуПродажПоОтветственному") Тогда
		
		ПараметрРасчетовСПО = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		
		ПараметрРасчетовСПО.Наименование 		 = "Сумму продаж по ответственному";
		ПараметрРасчетовСПО.Идентификатор 	 = "СуммуПродажПоОтветственному"; 
		ПараметрРасчетовСПО.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовСПО.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ВалютаУчетаКурс";
		НовыйПараметрЗапроса.Представление 			 = "ВалютаУчетаКурс";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ВалютаДокументаКратность";
		НовыйПараметрЗапроса.Представление 			 = "ВалютаДокументаКратность";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ВалютаДокументаКурс";
		НовыйПараметрЗапроса.Представление 			 = "ВалютаДокументаКурс";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ВалютаУчетаКратность";
		НовыйПараметрЗапроса.Представление 			 = "ВалютаУчетаКратность";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "НачалоПериода";
		НовыйПараметрЗапроса.Представление 			 = "НачалоПериода";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "КонецПериода";
		НовыйПараметрЗапроса.Представление 			 = "КонецПериода";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Организация";
		НовыйПараметрЗапроса.Представление 			 = "Организация";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Подразделение";
		НовыйПараметрЗапроса.Представление 			 = "Подразделение";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Сотрудник";
		НовыйПараметрЗапроса.Представление 			 = "Сотрудник";
		
		ПараметрРасчетовСПО.Запрос = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ЕСТЬNULL(Продажи.Сумма * &ВалютаУчетаКурс * &ВалютаДокументаКратность / (&ВалютаДокументаКурс * &ВалютаУчетаКратность), 0)) КАК СуммаПродаж
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Сумма >= 0
		|	И Продажи.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Продажи.Организация = &Организация
		|	И Продажи.Подразделение = &Подразделение
		|	И Продажи.Ответственный = &Сотрудник
		|	И (ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.АктВыполненныхРабот) ССЫЛКА Документ.АктВыполненныхРабот
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ОтчетОПереработке) ССЫЛКА Документ.ОтчетОПереработке
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ОтчетОРозничныхПродажах) ССЫЛКА Документ.ОтчетОРозничныхПродажах
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.РасходнаяНакладная) ССЫЛКА Документ.РасходнаяНакладная
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ЧекККМ) ССЫЛКА Документ.ЧекККМ)
		|
		|СГРУППИРОВАТЬ ПО
		|	Продажи.Ответственный";
		
		ПараметрРасчетовСПО.Записать();
		
	КонецЕсли;
	
	// Фиксированная сумма
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("ФиксированнаяСумма") Тогда
		
		ПараметрРасчетовФиксированнаяСумма = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовФиксированнаяСумма.Наименование 				= "Фиксированная сумма";
		ПараметрРасчетовФиксированнаяСумма.Идентификатор 	 			= "ФиксированнаяСумма";
		ПараметрРасчетовФиксированнаяСумма.ПроизвольныйЗапрос 			= Ложь;
		ПараметрРасчетовФиксированнаяСумма.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		ПараметрРасчетовФиксированнаяСумма.Записать();
		
	КонецЕсли;
	
	// Норма дней
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("НормаДней") Тогда
		
		ПараметрРасчетовНормаДней = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовНормаДней.Наименование 		 = "Норма дней (производственный календарь)";
		ПараметрРасчетовНормаДней.Идентификатор 	 = "НормаДней";
		ПараметрРасчетовНормаДней.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовНормаДней.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаДней.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Организация";
		НовыйПараметрЗапроса.Представление 			 = "Организация";
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаДней.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ПериодРегистрации";
		НовыйПараметрЗапроса.Представление 			 = "Период регистрации";
		ПараметрРасчетовНормаДней.Запрос 			 = 
		"ВЫБРАТЬ
		|	СУММА(1) КАК НормаДней
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО КалендарныеГрафики.Календарь = Организации.ПроизводственныйКалендарь
		|			И (Организации.Ссылка = &Организация)
		|ГДЕ
		|	КалендарныеГрафики.Год = ГОД(&ПериодРегистрации)
		|	И КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И КалендарныеГрафики.ДеньВключенВГрафик";
		
		ПараметрРасчетовНормаДней.Записать();
		
	КонецЕсли;
	
	// Норма часов
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("НормаЧасов") Тогда
		
		ПараметрРасчетовНормаЧасов = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовНормаЧасов.Наименование 	  = "Норма часов (производственный календарь)";
		ПараметрРасчетовНормаЧасов.Идентификатор 	  = "НормаЧасов";
		ПараметрРасчетовНормаЧасов.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовНормаЧасов.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаЧасов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Организация";
		НовыйПараметрЗапроса.Представление 			 = "Организация";
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаЧасов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ПериодРегистрации";
		НовыйПараметрЗапроса.Представление 			 = "Период регистрации";
		ПараметрРасчетовНормаЧасов.Запрос 			 = 
		"ВЫБРАТЬ
		|	СУММА(8) КАК НормаЧасов
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО КалендарныеГрафики.Календарь = Организации.ПроизводственныйКалендарь
		|			И (Организации.Ссылка = &Организация)
		|ГДЕ
		|	КалендарныеГрафики.Год = ГОД(&ПериодРегистрации)
		|	И КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И КалендарныеГрафики.ДеньВключенВГрафик";
		ПараметрРасчетовНормаЧасов.Записать();
		
	КонецЕсли;
	
	// Норма дней по графику
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("НормаДнейГрафикСотрудника") Тогда
		
		ПараметрРасчетовНормаДней = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовНормаДней.Наименование 		 = "Норма дней (график работы сотрудника)";
		ПараметрРасчетовНормаДней.Идентификатор 	 = "НормаДнейГрафикСотрудника";
		ПараметрРасчетовНормаДней.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовНормаДней.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаДней.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ПериодРегистрации";
		НовыйПараметрЗапроса.Представление 			 = "Период регистрации";
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаДней.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ГрафикРаботы";
		НовыйПараметрЗапроса.Представление 			 = "График работы";
		
		ПараметрРасчетовНормаДней.Запрос 			 = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДЕНЬ(ГрафикиРаботы.ВремяНачала)) КАК НормаДней
		|ИЗ
		|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
		|ГДЕ
		|	ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
		|	И ГрафикиРаботы.ВремяНачала МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ГрафикиРаботы.Год = ГОД(&ПериодРегистрации)";
		
		ПараметрРасчетовНормаДней.Записать();
		
	КонецЕсли;
	
	// Норма часов по графику
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("НормаЧасовГрафикСотрудника") Тогда
		
		ПараметрРасчетовНормаЧасов = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовНормаЧасов.Наименование 	  = "Норма часов (график работы сотрудника)";
		ПараметрРасчетовНормаЧасов.Идентификатор 	  = "НормаЧасовГрафикСотрудника";
		ПараметрРасчетовНормаЧасов.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовНормаЧасов.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаЧасов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ПериодРегистрации";
		НовыйПараметрЗапроса.Представление 			 = "Период регистрации";
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаЧасов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ГрафикРаботы";
		НовыйПараметрЗапроса.Представление 			 = "График работы";
		
		ПараметрРасчетовНормаЧасов.Запрос 			 = 
		"ВЫБРАТЬ
		|	СУММА(ГрафикиРаботы.ЧасыРаботы) КАК НормаЧасов
		|ИЗ
		|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
		|ГДЕ
		|	ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
		|	И ГрафикиРаботы.ВремяНачала МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ГрафикиРаботы.Год = ГОД(&ПериодРегистрации)";
		ПараметрРасчетовНормаЧасов.Записать();
		
	КонецЕсли;
	
	// Отработано дней
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("ОтработаноДней") Тогда
		
		ПараметрРасчетовОтработаноДней = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовОтработаноДней.Наименование 	  = "Отработано дней";
		ПараметрРасчетовОтработаноДней.Идентификатор	  = "ОтработаноДней";
		ПараметрРасчетовОтработаноДней.ПроизвольныйЗапрос = Ложь;
		ПараметрРасчетовОтработаноДней.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		ПараметрРасчетовОтработаноДней.Записать();
		
	КонецЕсли;
	
	// Отработано часов
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("ОтработаноЧасов") Тогда
		
		ПараметрРасчетовОтработаноЧасов = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовОтработаноЧасов.Наименование 	   = "Отработано часов";
		ПараметрРасчетовОтработаноЧасов.Идентификатор 	   = "ОтработаноЧасов";
		ПараметрРасчетовОтработаноЧасов.ПроизвольныйЗапрос = Ложь;
		ПараметрРасчетовОтработаноЧасов.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		ПараметрРасчетовОтработаноЧасов.Записать();
		
	КонецЕсли;
	
	// Тарифная ставка
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("ТарифнаяСтавка") Тогда
		
		ПараметрРасчетовТарифнаяСтавка = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовТарифнаяСтавка.Наименование 	  = "Тарифная ставка";
		ПараметрРасчетовТарифнаяСтавка.Идентификатор 	  = "ТарифнаяСтавка";
		ПараметрРасчетовТарифнаяСтавка.ПроизвольныйЗапрос = Ложь;
		ПараметрРасчетовТарифнаяСтавка.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		ПараметрРасчетовТарифнаяСтавка.Записать();
		
	КонецЕсли;
	
	// Отработано по заданиям
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("ОтработаноЧасовПоЗаданиям") Тогда
		
		ПараметрРасчетовСдельнаяВыработка = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовСдельнаяВыработка.Наименование 	= "Отработано часов по заданиям";
		ПараметрРасчетовСдельнаяВыработка.Идентификатор = "ОтработаноЧасовПоЗаданиям";
		ПараметрРасчетовСдельнаяВыработка.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовСдельнаяВыработка.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "НачалоПериода"; 
		НовыйПараметрЗапроса.Представление = "Начало периода"; 
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "КонецПериода";
		НовыйПараметрЗапроса.Представление = "Конец периода";
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "Сотрудник";
		НовыйПараметрЗапроса.Представление = "Сотрудник";
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "Организация"; 
		НовыйПараметрЗапроса.Представление = "Организация"; 
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "Подразделение";
		НовыйПараметрЗапроса.Представление = "Подразделение";
		
		ПараметрРасчетовСдельнаяВыработка.Запрос =
		"ВЫБРАТЬ
		|	Источник.ЗагрузкаФактОборот
		|ИЗ
		|	РегистрНакопления.ЗаданияНаРаботу.Обороты(&НачалоПериода, &КонецПериода, Авто, ) КАК Источник
		|ГДЕ
		|	Источник.Сотрудник = &Сотрудник
		|	И Источник.СтруктурнаяЕдиница = &Подразделение
		|	И Источник.Организация = &Организация";
		
		ПараметрРасчетовСдельнаяВыработка.Записать();
		
	КонецЕсли;
	
	// Виды начислений
	Если НЕ ЗарплатаУНФВызовСервера.НачальноеЗаполнениеВидовНачисленийУдержанийПроизводилось() Тогда
		
		// Группы
		НовоеНачисление 			 = Справочники.ВидыНачисленийИУдержаний.СоздатьГруппу();
		НовоеНачисление.Наименование = "Начисления";
		НовоеНачисление.Записать(); 
		
		ГруппаНачисление 			 = НовоеНачисление.Ссылка;
		
		НовоеНачисление 			 = Справочники.ВидыНачисленийИУдержаний.СоздатьГруппу();
		НовоеНачисление.Наименование = "Удержания";
		НовоеНачисление.Записать();
		ГруппаУдержание 			 = НовоеНачисление.Ссылка;
		
		// Оклад по дням
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Оклад по дням (производственный календарь)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовоеНачисление.Формула				= "[ТарифнаяСтавка] * [ОтработаноДней] / [НормаДней]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Оклад по часам
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Оклад по часам (производственный календарь)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.КосвенныеЗатраты;
		НовоеНачисление.Формула 			= "[ТарифнаяСтавка] * [ОтработаноЧасов] / [НормаЧасов]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Оклад по дням Графики
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Оклад по дням (график работы сотрудника)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовоеНачисление.Формула				= "[ТарифнаяСтавка] * [ОтработаноДней] / [НормаДнейГрафикСотрудника]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Оклад по часам Графики
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Оклад по часам (график работы сотрудника)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.КосвенныеЗатраты;
		НовоеНачисление.Формула 			= "[ТарифнаяСтавка] * [ОтработаноЧасов] / [НормаЧасовГрафикСотрудника]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Оплата по заданиям
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Оплата по заданиям";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "[ТарифнаяСтавка] * [ОтработаноЧасовПоЗаданиям]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Процент от продаж по ответственному
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Процент от продаж по ответственному";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "[СуммуПродажПоОтветственному]  / 100 *  [ТарифнаяСтавка]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Оплата по сдельным нарядам
		НовоеНачислениеСсылка				= Справочники.ВидыНачисленийИУдержаний.СдельнаяОплата;
		НовоеНачисление						= НовоеНачислениеСсылка.ПолучитьОбъект();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Сдельная оплата (тариф)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2010;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ;
		НовоеНачисление.Записать();
		
		// Сдельная оплата процентом
		НовоеНачислениеСсылка				= Справочники.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент;
		НовоеНачисление						= НовоеНачислениеСсылка.ПолучитьОбъект();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Сдельная оплата (% от суммы)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "";
		НовоеНачисление.КодДоходаНДФЛ = Справочники.КодыДоходовНДФЛ.Код2010;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ;
		НовоеНачисление.Записать();
		
		// Фиксированная сумма
		НовоеНачислениеСсылка				= Справочники.ВидыНачисленийИУдержаний.ФиксированнаяСумма;
		НовоеНачисление						= НовоеНачислениеСсылка.ПолучитьОбъект();
		НовоеНачисление.Код					= "";
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Сдельная оплата (фиксированная сумма)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "[ФиксированнаяСумма]";
		НовоеНачисление.УстановитьНовыйКод();
		НовоеНачисление.КодДоходаНДФЛ = Справочники.КодыДоходовНДФЛ.Код2010;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ;
		НовоеНачисление.Записать();
		
		// Отпускные
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Отпускные";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.КодДоходаНДФЛ = Справочники.КодыДоходовНДФЛ.Код2012;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Налог на доходы
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.НалогНаДоходы;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель 			= ГруппаУдержание;
		НовыйНалог.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат			= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула 			= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.НДФЛСотрудники;
		НовыйНалог.Записать();
		
		// ПФР по суммарному тарифу
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ПФРПоСуммарномуТарифу;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель 			= ГруппаУдержание;
		НовыйНалог.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула 			= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
		НовыйНалог.Записать();
		
		// ПФР накопительная
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ПФРНакопительная;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель 			= ГруппаУдержание;
		НовыйНалог.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула 			= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники;
		НовыйНалог.Записать();
		
		// ПФР страховая
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ПФРСтраховая;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель				= ГруппаУдержание;
		НовыйНалог.Тип					= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула				= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
		НовыйНалог.Записать();
		
		// ФСС
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ФСС;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель				= ГруппаУдержание;
		НовыйНалог.Тип					= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула				= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ФСССотрудники;
		НовыйНалог.Записать();
		
		// ФСС несчастные случаи
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ФССНесчастныеСлучаи;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель				= ГруппаУдержание;
		НовыйНалог.Тип					= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула				= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ФССТравматизмСотрудники;
		НовыйНалог.Записать();
		
		// ФФОМС
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ФФОМС;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель				= ГруппаУдержание;
		НовыйНалог.Тип					= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула				= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ФОМССотрудники;
		НовыйНалог.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметрыРасчетовИВидыНачислений()

// (24) Процедура заполняет в настройки подбора при первом запуске
//
Процедура ЗаполнитьПользовательскиеНастройкиПодбора()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ПодборНоменклатурыВДокументах.УстановитьСтандартныеНастройкиПодбора(ТекущийПользователь);
	
КонецПроцедуры // ЗаполнитьПользовательскиеНастройкиПодбора()

// (27) Процедура удаляет регистрацию изменений базовых классификаторов, которые должны выгружаться
// только при наличии на них ссылок в других выгружаемых объектах.
//
Процедура УдалитьРегистрациюИзмененийБазовыхКлассификаторов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия20.Ссылка КАК УзелОбмена
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия20 КАК ОбменУправлениеНебольшойФирмойБухгалтерия20
	|ГДЕ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия20.Ссылка <> &ЭтотУзелБП20
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия30.Ссылка КАК УзелОбмена
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия30 КАК ОбменУправлениеНебольшойФирмойБухгалтерия30
	|ГДЕ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия30.Ссылка <> &ЭтотУзелБП30";
	
	Запрос.УстановитьПараметр("ЭтотУзелБП20", ПланыОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия20.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелБП30", ПланыОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия30.ЭтотУзел());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УзлыОбменаСБП20 = МассивРезультатов[0].Выгрузить().ВыгрузитьКолонку("УзелОбмена");
	УзлыОбменаСБП30 = МассивРезультатов[1].Выгрузить().ВыгрузитьКолонку("УзелОбмена");
	
	Попытка
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП20, Метаданные.Справочники.Банки);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП20, Метаданные.Справочники.Валюты);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП20, Метаданные.Справочники.КлассификаторЕдиницИзмерения);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП20, Метаданные.Справочники.СтраныМира);
	Исключение
	КонецПопытки;
	
	Попытка
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП30, Метаданные.Справочники.Банки);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП30, Метаданные.Справочники.Валюты);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП30, Метаданные.Справочники.КлассификаторЕдиницИзмерения);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП30, Метаданные.Справочники.СтраныМира);
	Исключение
	КонецПопытки;
	
КонецПроцедуры // УдалитьРегистрациюИзмененийБазовыхКлассификаторов()

// (35) Заполняем регистр сведений ЗначенияКБК
Процедура ЗагрузитьЗначенияКБК()
	
	Набор = РегистрыСведений.ЗначенияКБК.СоздатьНаборЗаписей();
	
	Запись = Набор.Добавить();
	Запись.Период = '20000101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРНакопительная;
	Запись.Значение = "39210202100061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРНакопительная;
	Запись.Значение = "39210202110061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20000101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "39210202100061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "39210202100061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20000101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ТФОМС;
	Запись.Значение = "39210202110091000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ТФОМС;
	Запись.Значение = "39210202101081012160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20000101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФФОМС;
	Запись.Значение = "39210202100081000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФФОМС;
	Запись.Значение = "39210202101081011160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ЕНВД;
	Запись.Значение = "18210502010021000110";
	
	// 2012 год
	
	// начисление зп
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники;
	Запись.Значение = "39210202020061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
	Запись.Значение = "39210202010061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФСССотрудники;
	Запись.Значение = "39310202090071000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФССТравматизмСотрудники;
	Запись.Значение = "39310202050071000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.НДФЛСотрудники;
	Запись.Значение = "18210102010011000110";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФОМССотрудники;
	Запись.Значение = "39210202101081011160";
	
	// 2013 год
	
	Запись = Набор.Добавить();
	Запись.Период = '20130101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРНакопительная;
	Запись.Значение = "39210202150061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20130101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "39210202140061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20130101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСвыше300ТР;
	Запись.Значение = "39210202140061000160";
	
	
	
	// 2015 год
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ТорговыйСбор;
	Запись.Значение = "18210505010020000110";
	
	// 2017 год
	Запись = Набор.Добавить();
	Запись.Период = '20160101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "18210202140061100160";
	// Было 39210202140061100160
	
	Запись = Набор.Добавить();
	Запись.Период = '20160101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСвыше300ТР;
	Запись.Значение = "18210202140061200160";
	// Было 39210202140061200160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСвыше300ТР;
	Запись.Значение = "18210202140061110160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "18210202140061110160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
	Запись.Значение = "18210202010061000160";
	// Было 39210202010061000160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
	Запись.Значение = "18210202010061010160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФСССотрудники;
	Запись.Значение = "18210202090071000160";
	// Было 39310202090071000160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФСССотрудники;
	Запись.Значение = "18210202090071010160";
	// Было 39310202090071000160
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФОМССотрудники;
	Запись.Значение = "18210202101081011160";
	// Было 39210202101081011160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФОМССотрудники;
	Запись.Значение = "18210202101081013160";
	// Было 39210202101081011160
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФФОМС;
	Запись.Значение = "18210202103081011160";
	// Было 39210202103081011160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФФОМС;
	Запись.Значение = "18210202103081013160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ТорговыйСбор;
	Запись.Значение = "18210505010021000110";
	
	// 2021 год
	Запись = Набор.Добавить();
	Запись.Период = '20210101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.НДФЛДоходыСвышеПредельнойВеличины;
	Запись.Значение = "18210102080011000110";
	
	Набор.Записать();
	
КонецПроцедуры

// (39) Заполняет справочник КодыДоходовНДФЛ
//
Процедура ЗаполнитьКодыНДФЛ()
	
	НалоговыеСтавкиПоУмолчанию = УчетНДФЛПредпринимателяКлиентСервер.НалоговыеСтавкиПоУмолчанию(); 
	
	Код2000 = Справочники.КодыДоходовНДФЛ.Код2000.ПолучитьОбъект();
	Код2000.СтавкаНДФЛ = НалоговыеСтавкиПоУмолчанию.СтавкаНДФЛ;
	Код2000.СтавкаНДФЛПовышенная = НалоговыеСтавкиПоУмолчанию.СтавкаНДФЛПовышенная;
	Код2000.Записать();
	
	Код2010 = Справочники.КодыДоходовНДФЛ.Код2010.ПолучитьОбъект();
	Код2010.СтавкаНДФЛ = НалоговыеСтавкиПоУмолчанию.СтавкаНДФЛ;
	Код2010.СтавкаНДФЛПовышенная = НалоговыеСтавкиПоУмолчанию.СтавкаНДФЛПовышенная;
	Код2010.Записать();
	
	Код2012 = Справочники.КодыДоходовНДФЛ.Код2012.ПолучитьОбъект();
	Код2012.СтавкаНДФЛ = НалоговыеСтавкиПоУмолчанию.СтавкаНДФЛ;
	Код2012.СтавкаНДФЛПовышенная = НалоговыеСтавкиПоУмолчанию.СтавкаНДФЛПовышенная;
	Код2012.Записать(); 
	
КонецПроцедуры

// (40) Процедура заполняет справочник ДокументыФизическихЛиц по классификатору МВД.
// Для тех конфигураций, в которых в справочнике "Виды документов физических лиц" нет реквизитов.
//
Процедура ЗаполнитьДокументыФизическихЛицПоКлассификаторуМВД(СтруктураПараметров = Неопределено)
	
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортСССР,			"", 	"01", "ПАСПОРТ");						// R-ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортСССР,		"", 	"02", "ЗГПАСПОРТ");						// 99 0999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении,	"", 	"03", "СВИД О РОЖД");					// R-ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.УдостоверениеОфицера,	"", 	"04", "УДОСТ ОФИЦЕРА");					// ББ 9999990
	ОписатьДокумент(,"Справка об освобождении из места лишения свободы",					"05", "СПРАВКА ОБ ОСВ");				// -
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортМинморфлота, 	"",		"06", "ПАСПОРТ МОРФЛТ");				// ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилет, "Военный билет солдата (матроса, сержанта, старшины)", "07", "ВОЕННЫЙ БИЛЕТ"); // ББ 0999999
	ОписатьДокумент(, "Временное удостоверение, выданное взамен военного билета",			"08", "ПРОЧЕЕ");						// -
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт, "",		"09", "ДИППАСПОРТ РФ"); 				// 99 9999999
	ОписатьДокумент(, "Паспорт иностранного гражданина",									"10", "ИНПАСПОРТ");						// -
	ОписатьДокумент(, "Свидетельство о рассмотрении ходатайства о признании беженцем на территории Российской Федерации по существу", "11", "СВИД БЕЖЕНЦА"); // -
	ОписатьДокумент(, "Вид на жительство в Российской Федерации",							"12", "ВИД НА ЖИТЕЛЬ");					// -
	ОписатьДокумент(, "Удостоверение беженца",												"13", "УДОСТ БЕЖЕНЦА");					// -
	ОписатьДокумент(, "Временное удостоверение личности гражданина Российской Федерации",	"14", "ВРЕМ УДОСТ");					// -
	ОписатьДокумент(, "Разрешение на временное проживание в Российской Федерации",			"15", "ПРОЧЕЕ");						// -
	ОписатьДокумент(, "Свидетельство о предоставлении временного убежища на территории Российской Федерации", "18", "ПРОЧЕЕ");		// ББ-999 9999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ,				"",		"21", "ПАСПОРТ РОССИИ");				// 99 99 9999990
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ,		"",		"22", "ЗГПАСПОРТ РФ");					// 99 9999999
	ОписатьДокумент(, "Свидетельство о рождении, выданное уполномоченным органом иностранного государства", "23", "ПРОЧЕЕ");		// -
	ОписатьДокумент(, "Удостоверение личности военнослужащего Российской Федерации",		"24", "ПРОЧЕЕ");						// ББ 9999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортМоряка,			"",		"26", "ПАСПОРТ МОРЯКА");				// ББ 0999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилетОфицераЗапаса, "",	"27", "БИЛЕТ ОЗ");						// ББ 0999999
	ОписатьДокумент(, "Иные документы, выдаваемые ОВД",										"91", "ПРОЧЕЕ");						// -
	
	Если СтруктураПараметров <> Неопределено Тогда
		СтруктураПараметров.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОписатьДокумент(СсылкаНаЭлемент = Неопределено, Наименование = "", КодМВД = "", КодПФР = "")
	
	Если Не ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		Если Наименование = "" Тогда
			Возврат
		КонецЕсли;
		СсылкаНаЭлемент = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию(Наименование);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		ДанныеИБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭлемент, "КодМВД, КодПФР");
		Если ДанныеИБ.КодМВД = КодМВД И ДанныеИБ.КодПФР = КодПФР Тогда
			Возврат
		КонецЕсли;
		Элемент = СсылкаНаЭлемент.ПолучитьОбъект();
	Иначе
		Элемент = Справочники.ВидыДокументовФизическихЛиц.СоздатьЭлемент();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		Элемент.Наименование = Наименование;
	КонецЕсли;
	Элемент.КодМВД = КодМВД;
	Элемент.КодПФР = КодПФР;
	
	Элемент.ОбменДанными.Загрузка = Истина;
	Элемент.Записать();
	
КонецПроцедуры

// (43) Создание шаблонов условий печати в счетах на оплату
Процедура ЗаполнитьДополнительныеУсловияДляПечати()
	
	Справочники.ДополнительныеУсловия.ЗаполнениеТиповыхДополнительныхУсловий();
	
КонецПроцедуры

// (45) Идентификаторы формул и типы видов цен
Процедура ОбновитьПредопределенныеВидыЦен()
	
	// Наличие видов цен контрагентов в новой ИБ не предполагается, но такую возможность поддержим...
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ Справочник.ВидыЦен.Ссылка КАК ВидЦен, ИСТИНА КАК ЭтоЦеныНоменклатуры 
	|	ГДЕ Справочник.ВидыЦен.ИдентификаторФормул = """" ИЛИ Справочник.ВидыЦен.ТипВидаЦен = Значение(Перечисление.ТипыВидовЦен.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ Справочник.ВидыЦенКонтрагентов.Ссылка, ЛОЖЬ ГДЕ Справочник.ВидыЦенКонтрагентов.ИдентификаторФормул = """"");
	
	РезультатЗапроса = Запрос.Выполнить();
	Попытка
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ВидЦенОбъект = Выборка.ВидЦен.ПолучитьОбъект();
			
			ОписаниеВладельца = "";
			Если Выборка.ЭтоЦеныНоменклатуры Тогда
				
				ВидЦенОбъект.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический;
				
			Иначе
				
				ОписаниеВладельца = Строка(Выборка.ВидЦен.Владелец);
				
			КонецЕсли;
			
			ЦенообразованиеФормулыСервер.СформироватьНовыйИдентификаторВидаЦен(ВидЦенОбъект.ИдентификаторФормул, Выборка.ВидЦен.Наименование, ОписаниеВладельца);
			
			ВидЦенОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Идентификаторы.ВидыЦен", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

// (47) Устанавливает константу ФункциональнаяОпцияОпросНалоги
Процедура УстановитьКонстантуУчастияВОпросеПоНалогам()
	
	Константы.ФункциональнаяОпцияОпросНалоги.Установить(Истина);
	
КонецПроцедуры

// (49) Заполняет справочник ключевых операций, устанавливает целевое время
Процедура ЗаполнитьРеквизитыКлючевыхОпераций()
	
	Попытка
		ОценкаПроизводительностиПереопределяемый.ЗаполнитьЦелевоеВремяОперацийПроизводительности();
	Исключение
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Заполнение ключевых операций.'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// (4) Возвращает объект по коду.
//    Если объект не найден в справочнике, создает новый объект и заполняет его из классификатора.
Функция СправочникОбъектВалютыПоКоду(Знач КодВалюты)
	
	ВалютаСсылка = Справочники.Валюты.НайтиПоКоду(КодВалюты);
	Если ЗначениеЗаполнено(ВалютаСсылка) Тогда
		Возврат ВалютаСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	Результат = Справочники.Валюты.СоздатьЭлемент();
	
	КлассификаторXML = Обработки.ЗагрузкаКурсовВалют.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
	
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	ЗаписьОКВ = КлассификаторТаблица.Найти(КодВалюты, "Code"); 
	Если ЗаписьОКВ = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Код = ЗаписьОКВ.Code;
	Результат.Наименование = ЗаписьОКВ.CodeSymbol;
	Результат.НаименованиеПолное = ЗаписьОКВ.Name;
	Если ЗаписьОКВ.RBCLoading Тогда
		Результат.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета;
	Иначе
		Результат.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
	КонецЕсли;
	Результат.ПараметрыПрописи = ЗаписьОКВ.NumerationItemOptions;
	
	Возврат Результат;
	
КонецФункции

// (50) МобильноеПриложение
Процедура УстановитьКонстантуЭтоОбычноеПриложение()
	
	Если НЕ Константы.ЭтоМобильноеПриложение.Получить()
		И НЕ Константы.ЭтоМобильноеПриложение20.Получить() Тогда
		Константы.ЭтоОбычноеПриложение.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// (51) Процедура заполняет справочники "Параметры расчетов доставки".
Процедура ЗаполнитьПараметрыРасчетовДоставки()
	
	// Параметры расчетов.
	
	// Цена
	Если НЕ ДоставкаСервер.ПараметрРасчетаСуществует("Цена") Тогда
		
		ПараметрРасчетов = Справочники.ПараметрыРасчетовДоставки.СоздатьЭлемент();
		
		ПараметрРасчетов.Наименование 	 = "Цена";
		ПараметрРасчетов.Идентификатор 	 = "Цена"; 
		ПараметрРасчетов.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетов.ЗадаватьЗначениеПриРасчете = Ложь;
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Заказ.ВидЦен";
		НовыйПараметрЗапроса.Представление 			 = "Вид цен";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Заказ.Дата";
		НовыйПараметрЗапроса.Представление 			 = "Дата заказа";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Заказ.НоменклатураДоставки";
		НовыйПараметрЗапроса.Представление 			 = "Услуга";
		
		ПараметрРасчетов.Запрос = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ЗаказДата,
		|			ВидЦен = &ЗаказВидЦен
		|				И Номенклатура = &ЗаказНоменклатураДоставки) КАК ЦеныНоменклатурыСрезПоследних";
		
		ПараметрРасчетов.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметрыРасчетовДоставки()

// (52) Процедура заполняет реквизиты собственной службы доставки.
//
Процедура ЗаполнитьРеквизитыСобственнойСлужбыДоставки()
	
	СсылкаНаОбъект = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами");
	Если СсылкаНаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект = СсылкаНаОбъект.ПолучитьОбъект();
	Объект.ВариантУчета = Перечисления.ВариантыУчетаДоставки.ДоставкаСОплатой;
	Объект.ПараметрыРасчетов.Очистить();
	Объект.ЗначенияФормулы.Очистить();
	Объект.ДоступныеСпособыДоставки.Очистить();
	Объект.ДоступныеСпособыДоставки.Добавить().СпособДоставки = Перечисления.СпособыДоставки.Курьер;
	Объект.ДоступныеСпособыДоставки.Добавить().СпособДоставки = Перечисления.СпособыДоставки.Почта;
	Объект.ДоступныеСпособыОтгрузки.Очистить();
	Объект.ФормулаСтоимости = "0";
	Объект.ФормулаСебестоимости = "0";
	Объект.Записать();
	
КонецПроцедуры

// (55) Настройки представлений кодов в печатных формах
//
Процедура ЗаполнитьНастройкиПредставленийВПечатныхФормахПриНачалеРаботы()
	
	Если Константы.УдалитьАртикулНоменклатурыВСодержание.Получить() = Истина Тогда
		
		Константы.ПредставлениеКодовВПечатныхФормах.Установить(Перечисления.КодыНоменклатурыВДокументах.Артикул);
		
	Иначе
		
		Константы.ПредставлениеКодовВПечатныхФормах.Установить(Перечисления.КодыНоменклатурыВДокументах.Код);
		
	КонецЕсли;
	
	Константы.ПредставлениеСкидкиВПечатнойФорме.Установить(Перечисления.СпособОтображенияСкидок.Сумма);
	
	Константы.ПредставлениеНомераДокументаБезПрефиксаИнформационнойБазы.Установить(Истина);
	Константы.ПредставлениеНомераДокументаБезПрефиксаПользователя.Установить(Истина);
	Константы.ПредставлениеНомераДокументаБезПрефиксаОрганизации.Установить(Истина);
	Константы.ПредставлениеНомераДокументаСЛидирующимиНулями.Установить(Ложь);
	
КонецПроцедуры

// (59) Установка значений по умолчанию для реквизитов расчетов в карточке контрагента.
Процедура УстановитьЗначенияПоУмолчаниюДляРеквизитовРасчетов()
	
	Константы.ВестиРасчетыПоДоговорам.Установить(Истина);
	Константы.ВестиРасчетыПоДокументам.Установить(Истина);
	Константы.ВестиРасчетыПоЗаказам.Установить(Истина);
	Константы.ВестиУчетОплатыПоСчетам.Установить(Истина);
	
КонецПроцедуры

// (60) Начало действия Постановления Правительства РФ № 981 (счет-фактура)
Процедура УстановитьДатуНачалаДействияПостановления981()
	
	Константы.НачалоИспользованияСФ981.Установить(Дата(2017, 10, 01));
	
КонецПроцедуры

// (64) Установка варианта возврата по чеку из закрытой смены
Процедура УстановитьВариантВозвратаПоЗакрытойСмене()
	
	Если Константы.ВариантВозвратаПоЗакрытойСмене.Получить() = Перечисления.ВариантыВозвратаПоЗакрытойСмене.ПустаяСсылка() Тогда
		Константы.ВариантВозвратаПоЗакрытойСмене.Установить(Перечисления.ВариантыВозвратаПоЗакрытойСмене.ПН_Чек);
	КонецЕсли;
	
КонецПроцедуры

// (65) Установка значений констант начального заполнения оснований печати для заказа покупателя и счета на оплату
Процедура НачальноеЗаполнениеОснованийПечатиСчетовИЗаказов()
	
	Константы.ОснованиеПечатиЗаказПокупателя.Установить(Перечисления.ОснованиеПечатиСпособНачальногоЗаполнение.ДоговорКонтрагента);
	Константы.ОснованиеПечатиСчетНаОплату.Установить(Перечисления.ОснованиеПечатиСпособНачальногоЗаполнение.ДоговорКонтрагента);
	
КонецПроцедуры

// (67) Обработчик обновления графиков учета рабочего времени
Процедура ОбновитьГрафикиУчетаРабочегоВремени()
	
	ВыборкаГрафиков = Справочники.ГрафикиРаботы.Выбрать();
	Если ВыборкаГрафиков.Следующий() Тогда
		
		Справочники.ГрафикиРаботы.ОбновитьГрафикиУчетаРабочегоВремени();
		Справочники.ПараметрыРасчетов.ДополнитьПараметрыРасчета();
		Справочники.ВидыНачисленийИУдержаний.ДополнитьВидыНачислений();
		
	Иначе
		
		Справочники.ГрафикиРаботы.СоздатьПредопределенныеШаблоныГрафиков();
		
	КонецЕсли;
	
КонецПроцедуры

// (34) Заполнение предопределенных элементов справочника статьи движения денежных средств
Процедура ВыполнитьПервоначальноеЗаполнениеСтатейДвиженияДенежныхСредств()
	
	ОплатаОтПокупателей = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей.ПолучитьОбъект();
	ОплатаОтПокупателей.УчитыватьВНУ = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОплатаОтПокупателей);
	
	ОплатаПоставщикам = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам.ПолучитьОбъект();
	ОплатаПоставщикам.УчитыватьВНУ = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОплатаПоставщикам);
	
	// Добавляем подсказку для групп верхнего уровня
	ОперационнаяДеятельность = Справочники.СтатьиДвиженияДенежныхСредств.ОперационнаяДеятельность.ПолучитьОбъект();
	ОперационнаяДеятельность.Описание = Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьОписаниеПредопределеннойСтатьи(ОперационнаяДеятельность.Ссылка);
	ОперационнаяДеятельность.Порядок = 0;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОперационнаяДеятельность);
	
	ИнвестиционнаяДеятельность = Справочники.СтатьиДвиженияДенежныхСредств.ИнвестиционнаяДеятельность.ПолучитьОбъект();
	ИнвестиционнаяДеятельность.Описание = Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьОписаниеПредопределеннойСтатьи(ИнвестиционнаяДеятельность.Ссылка);
	ИнвестиционнаяДеятельность.Порядок = 1;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИнвестиционнаяДеятельность);
	
	ФинансоваяДеятельность = Справочники.СтатьиДвиженияДенежныхСредств.ФинансоваяДеятельность.ПолучитьОбъект();
	ФинансоваяДеятельность.Описание = Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьОписаниеПредопределеннойСтатьи(ФинансоваяДеятельность.Ссылка);
	ФинансоваяДеятельность.Порядок = 2;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ФинансоваяДеятельность);
	
	ПеремещенияКурсовыеРазницы = Справочники.СтатьиДвиженияДенежныхСредств.ПеремещенияКурсовыеРазницы.ПолучитьОбъект();
	ПеремещенияКурсовыеРазницы.Описание = Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьОписаниеПредопределеннойСтатьи(ПеремещенияКурсовыеРазницы.Ссылка);
	ПеремещенияКурсовыеРазницы.Порядок = 3;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПеремещенияКурсовыеРазницы);
	
	// Поступления по инвестиционной деятельности
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ИнвестиционныеПоступления;
	НовыйЭлемент.Наименование = НСтр("ru = 'Поступления от продажи оборудования, помещений'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ИнвестиционныеПоступления;
	НовыйЭлемент.Наименование = НСтр("ru = 'Поступления от продажи других бизнесов'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	// Платежи по инвестиционной деятельности
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ИнвестиционныеПлатежи;
	НовыйЭлемент.Наименование = НСтр("ru = 'Покупка оборудования, помещений'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ИнвестиционныеПлатежи;
	НовыйЭлемент.Наименование = НСтр("ru = 'Покупка других бизнесов'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	// Поступления по финансовой деятельности
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ФинансовыеПоступления;
	НовыйЭлемент.Наименование = НСтр("ru = 'Получение кредитов и займов'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	// Платежи по финансовой деятельности
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ФинансовыеПлатежи;
	НовыйЭлемент.Наименование = НСтр("ru = 'Возврат кредита /займа'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ФинансовыеПлатежи;
	НовыйЭлемент.Наименование = НСтр("ru = 'Дивиденды'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	// Финансовая деятельность
	ЛичныеСредства = Справочники.СтатьиДвиженияДенежныхСредств.ЛичныеСредстваПредпринимателя.ПолучитьОбъект();
	ЛичныеСредства.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ФинансоваяДеятельность;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЛичныеСредства);
	
	// Перемещения
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ПеремещенияКурсовыеРазницы;
	НовыйЭлемент.Наименование = НСтр("ru = 'Перемещение между кассами, счетами'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	// Операционные платежи
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ОперационныеПлатежи;
	НовыйЭлемент.Наименование = НСтр("ru = 'Заработная плата'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ОперационныеПлатежи;
	НовыйЭлемент.Наименование = НСтр("ru = 'Реклама и маркетинг'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ОперационныеПлатежи;
	НовыйЭлемент.Наименование = НСтр("ru = 'Проценты по кредитам / займам'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ОперационныеПлатежи;
	НовыйЭлемент.Наименование = НСтр("ru = 'Командировки'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ОперационныеПлатежи;
	НовыйЭлемент.Наименование = НСтр("ru = 'Коммунальные платежи'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ОперационныеПлатежи;
	НовыйЭлемент.Наименование = НСтр("ru = 'Банковское обслуживание'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ОперационныеПлатежи;
	НовыйЭлемент.Наименование = НСтр("ru = 'Связь, интернет'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ОперационныеПлатежи;
	НовыйЭлемент.Наименование = НСтр("ru = 'Транспортные расходы'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ОперационныеПлатежи;
	НовыйЭлемент.Наименование = НСтр("ru = 'Аренда помещений'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ОперационныеПлатежи;
	НовыйЭлемент.Наименование = НСтр("ru = 'Обслуживание офиса'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
	НовыйЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ОперационныеПлатежи;
	НовыйЭлемент.Наименование = НСтр("ru = 'Налоги'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйЭлемент);
	
КонецПроцедуры

// (58) Варианты округления копеек в суммах документов
Процедура СоздатьВариантыОкругленияСуммДокументов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АвтоматическиеСкидки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК АвтоматическиеСкидки
	|ГДЕ
	|	АвтоматическиеСкидки.СпособПредоставления = Значение(Перечисление.СпособыПредоставленияСкидокНаценок.Округление)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Количество() = 0 Тогда
		
		Округление = Справочники.АвтоматическиеСкидки.СоздатьЭлемент();
		Округление.Наименование = "Без копеек";
		Округление.Действует = Ложь;
		Округление.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Округление;
		Округление.Назначение = Перечисления.НазначенияАвтоматическихСкидок.Везде;
		Округление.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
		Округление.ВариантОграниченияПоНоменклатуре = Перечисления.ВариантыОграниченийСкидокПоНоменклатуре.ПоНоменклатуре;
		Округление.ВалютаПредоставления = Константы.ВалютаУчета.Получить();
		Округление.ВариантОкругления = Перечисления.ВариантыОкругления.ПоАрифметическимПравилам;
		Округление.ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр1;
		
		Попытка
			Округление.Записать();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПервогоЗапуска

// Процедура заполняет пустую ИБ общими данными
//
// К данным относятся неразделенные сведения, например, глобальные настройки сервиса
//
Процедура ПервыйЗапуск_ОбщиеДанные() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		// 1. Заполним константу ИзвлекатьТекстыФайловНаСервере
		Константы.ИзвлекатьТекстыФайловНаСервере.Установить(Истина);
		Константы.ИспользоватьПроверкуКонтрагентов.Установить(Истина);
		
		// 2. Заполним календарь отчетности
		Справочники.КалендарьПодготовкиОтчетности.ЗагрузитьКалендарьПодготовкиОтчетности();
		
		// 3. Загружаем  тарифы страховых взносов с предельными величинами
		Справочники.ВидыТарифовСтраховыхВзносов.ЗаполнитьСправочникВидыТарифовСтраховыхВзносов();
		Справочники.ВидыТарифовСтраховыхВзносов.ЗаполнитьКодыВидовТарифаСтраховыхВзносов_2012();
		РегистрыСведений.ТарифыСтраховыхВзносов.УстановитьЗначенияТарифовСтраховыхВзносов2011_2012();
		РегистрыСведений.ПредельнаяВеличинаБазыСтраховыхВзносов.УстановитьПредельнуюВеличинуБазыСтраховыхВзносов();
		
		// 4. Заполняем виды предпринимательской деятельности
		Справочники.ВидыПредпринимательскойДеятельности.ЗаполнитьВидыПредпринимательскойДеятельности();
		
		// 5. Заполняем справочник ОКУН
		ЗагрузитьОКУН();
		
		// 6. Заполняем регистр сведений КоэффициентДефлятор
		ЗаполнитьКоэффициентДефлятор();
		
		// 7. Заполняем регистр сведений МРОТ
		ЗагрузитьМРОТ();
		
		// 8. Заполняем справочник Вычеты НДФЛ
		Справочники.ВычетыНДФЛ.НачальноеЗаполнение();
		
		// 9. Заполним регистр сведений НДФЛРазмерВычетов.
		Сотрудники.ЗаполнитьРазмерыВычетовНДФЛ();
		
		// 10. Отчетность
		Справочники.ОсобыеУсловияТрудаПФР.ЗаполнитьКоды();
		Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НачальноеЗаполнение();
		Справочники.ОснованияДосрочногоНазначенияПенсии.НачальноеЗаполнение();
		Справочники.ТерриториальныеУсловияПФР.НачальноеЗаполнение();
		РегистрыСведений.ФиксированныеВзносыИП.УстановитьФиксированныеВзносыИП();
		Справочники.ОснованияДосрочногоНазначенияПенсииДляСЗВК.НачальноеЗаполнение();
		
		Справочники.ОснованияУвольнения.НачальноеЗаполнение();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения обработчика ПервыйЗапуск_ОбщиеДанные()'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;
	
	
КонецПроцедуры

// Процедура заполняет пустую ИБ данными пользователей
//
Процедура ПервыйЗапуск_РазделенныеДанные() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
	// 1. Загрузим план счетов.
	ЗагрузитьУправленческийПланСчетовПервыйЗапуск();
	
	// 2. Заполним вид и направление деятельности.
	ПрочееНаправлениеДеятельностиСсылка = Справочники.НаправленияДеятельности.Прочее;
	ПрочееНаправлениеДеятельности = ПрочееНаправлениеДеятельностиСсылка.ПолучитьОбъект();
	ПрочееНаправлениеДеятельности.СчетУчетаВыручкиОтПродаж = ПланыСчетов.Управленческий.ПрочиеДоходы;
	ПрочееНаправлениеДеятельности.СчетУчетаСебестоимостиПродаж = ПланыСчетов.Управленческий.ПрочиеРасходы;
	ПрочееНаправлениеДеятельности.СчетУчетаПрибыли = ПланыСчетов.Управленческий.ПрибылиИУбыткиБезНалогаНаПрибыль;
	ПрочееНаправлениеДеятельности.Записать();
	
	ОсновноеНаправлениеДеятельностиСсылка = Справочники.НаправленияДеятельности.ОсновноеНаправление;
	ОсновноеНаправлениеДеятельности = ОсновноеНаправлениеДеятельностиСсылка.ПолучитьОбъект();
	ОсновноеНаправлениеДеятельности.СчетУчетаВыручкиОтПродаж = ПланыСчетов.Управленческий.ВыручкаОтПродаж;
	ОсновноеНаправлениеДеятельности.СчетУчетаСебестоимостиПродаж = ПланыСчетов.Управленческий.СебестоимостьПродаж;
	ОсновноеНаправлениеДеятельности.СчетУчетаПрибыли = ПланыСчетов.Управленческий.ПрибылиИУбыткиБезНалогаНаПрибыль;
	ОсновноеНаправлениеДеятельности.Записать();
	
	// 3. Заполним виды налогов. 
	ЗаполнитьВидыНалоговПервыйЗапуск();
	
	// 4. Заполним валюты.
	ВалютаОбъект = СправочникОбъектВалютыПоКоду("643");
	ВалютаОбъект.Наименование = НСтр("ru = 'руб.'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВалютаОбъект);
	РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(ВалютаОбъект.Ссылка);
	
	// 5. Заполним ставки НДС.
	ЗаполнитьСтавкиНДСПервыйЗапуск();
	
	// 6. Заполним кассы.
	КассаРублевая = Справочники.Кассы.СоздатьЭлемент();
	КассаРублевая.Наименование = НСтр("ru = 'Основная касса'");
	КассаРублевая.ВалютаПоУмолчанию = ВалютаОбъект.Ссылка;
	КассаРублевая.СчетУчета = ПланыСчетов.Управленческий.Касса;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(КассаРублевая);
	
	// 7. Заполним Календарь на основании ПроизводственногоКалендаря.
	Календарь = ГрафикиРаботыУНФ.КалендарьПоПроизводственномуКалендарюРФ(); 
	Если Календарь = Неопределено Тогда
		
		СоздатьКалендарьПятидневкаРоссийскойФедерации();
		Календарь = ГрафикиРаботыУНФ.КалендарьПоПроизводственномуКалендарюРФ(); 
		
	КонецЕсли;
	
	// 8. Заполним организации. См. Справочники.Организации.ПриНачальномЗаполненииЭлементов
	Константы.НеИспользоватьНесколькоОрганизаций.Установить(Истина);
	
	НашаОрганизацияСсылка = Справочники.Организации.ОсновнаяОрганизация;
	НашаОрганизация = НашаОрганизацияСсылка.ПолучитьОбъект();
	НашаОрганизация.КассаПоУмолчанию = КассаРублевая.Ссылка;
	НашаОрганизация.ПроизводственныйКалендарь = Календарь;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НашаОрганизация);
	
	// 9. Заполним подразделения.
	ОсновноеПодразделениеСсылка = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	ОсновноеПодразделение = ОсновноеПодразделениеСсылка.ПолучитьОбъект();
	ОсновноеПодразделение.Организация = НашаОрганизация.Ссылка;
	ОсновноеПодразделение.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
	ОсновноеПодразделение.Записать();
	
	// 10. Заполним основной склад.
	ОсновнойСкладСсылка = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
	ОсновнойСклад = ОсновнойСкладСсылка.ПолучитьОбъект();
	ОсновнойСклад.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад;
	ОсновнойСклад.Организация = НашаОрганизация.Ссылка;
	ОсновнойСклад.Записать();
	
	// 11. Заполним виды цен.
	// Оптовая.
	ОптоваяСсылка = Справочники.ВидыЦен.Оптовая;
	Оптовая = ОптоваяСсылка.ПолучитьОбъект();
	Оптовая.ИдентификаторФормул = НСтр("ru ='Оптовая'");
	Оптовая.ВалютаЦены = ВалютаОбъект.Ссылка;
	Оптовая.ЦеныАктуальны = Истина;
	Оптовая.ЦенаВключаетНДС = Истина;
	Оптовая.ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр1;
	Оптовая.ОкруглятьВБольшуюСторону = Ложь;
	Оптовая.ФорматЦены = "ЧЦ=15; ЧДЦ=2";
	Оптовая.Записать();
	
	// Учетная.
	УчетнаяСсылка = Справочники.ВидыЦен.Учетная;
	Учетная = УчетнаяСсылка.ПолучитьОбъект();
	Учетная.ИдентификаторФормул = НСтр("ru ='Учетная'");
	Учетная.ВалютаЦены = ВалютаОбъект.Ссылка;
	Учетная.ЦеныАктуальны = Истина;
	Учетная.ЦенаВключаетНДС = Истина;
	Учетная.ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр1;
	Учетная.ОкруглятьВБольшуюСторону = Ложь;
	Учетная.ФорматЦены = "ЧЦ=15; ЧДЦ=2";
	Учетная.Записать();
	
	// 12. Заполним константы.
	Константы.ВалютаУчета.Установить(ВалютаОбъект.Ссылка);
	Константы.НациональнаяВалюта.Установить(ВалютаОбъект.Ссылка);
	Константы.КонтролироватьОстаткиПриПроведении.Установить(Истина);
	Константы.ИспользоватьНапоминанияПользователя.Установить(Истина);
	
	Константы.ФункциональнаяОпцияКонтрольДоговоров.Установить(Перечисления.ВидыКонтроляДоговоровПриПроведении.НеПроводить);
	Константы.ЧастотаРасчетаКурсовыхРазниц.Установить(Перечисления.ЧастотаРасчетаКурсовыхРазниц.ТолькоПриЗакрытииПериода);
	Если Не РаботаВМоделиСервиса.РазделениеВключено() Тогда
		
		Префикс = "";
		ОбменДаннымиПереопределяемый.ПриОпределенииПрефиксаИнформационнойБазыПоУмолчанию(Префикс);
		Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(Префикс);
		
	КонецЕсли;
	Константы.ИспользоватьШаблоныСообщений.Установить(Истина);
	
	// Взаиморасчеты
	Константы.СпособЗачетаПредоплатыПоУмолчанию.Установить(Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную);
	Константы.СпособРазнесенияОплатыПоУмолчанию.Установить(Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную);
	// Конец Взаиморасчеты
	
	// 13. Заполним сценарий планирования.
	Справочники.СценарииПланирования.ЗаполнитьФактическийСценарий();
	Справочники.СценарииПланирования.ЗаполнитьПоставляемыеСценарии();
	
	// 14. Заполним классификатор использования рабочего времени.
	Справочники.ВидыРабочегоВремени.ЗаполнитьКлассификаторИспользованияРабочегоВремени();
	
	// 15. Заполним параметры расчета и виды начислений.
	ЗаполнитьПараметрыРасчетовИВидыНачислений();
	
	// 16. Заполним наборы свойств.
	ОсновнаяКатегорияСсылка = Справочники.КатегорииНоменклатуры.БезКатегории;
	ОсновнаяКатегория = ОсновнаяКатегорияСсылка.ПолучитьОбъект();
	ОсновнаяКатегория.Заполнить(Неопределено);
	ОсновнаяКатегория.Записать();
	
	// 17. Заполним реквизиты предопределенных единиц измерения.
	
	// Штука.
	ШтСсылка = Справочники.КлассификаторЕдиницИзмерения.шт;
	ШтОбъект = ШтСсылка.ПолучитьОбъект();
	ШтОбъект.НаименованиеПолное = "Штука";
	ШтОбъект.МеждународноеСокращение = "PCE";
	ШтОбъект.Записать();
	
	// Час.
	чСсылка = Справочники.КлассификаторЕдиницИзмерения.ч;
	чОбъект = чСсылка.ПолучитьОбъект();
	чОбъект.НаименованиеПолное = "Час";
	чОбъект.МеждународноеСокращение = "HUR";
	чОбъект.Записать();
	
	// 18. Заполним состояния заказов
	Справочники.СостоянияЗаказовПокупателей.ЗаполнитьПоставляемыеСостояния();
	Справочники.ВидыЗаказовПокупателей.ЗаполнитьОсновнойВидЗаказа();
	Справочники.СостоянияЗаказНарядов.ЗаполнитьПоставляемыеСостояния();
	Справочники.ВидыЗаказНарядов.ЗаполнитьОсновнойВидЗаказа();
	Справочники.СостоянияЗаказовПоставщикам.ЗаполнитьПоставляемыеСостояния();
	Справочники.СостоянияЗаказовНаПроизводство.ЗаполнитьПоставляемыеСостояния();
	Справочники.СостоянияЗаказовНаПеремещение.ЗаполнитьПоставляемыеСостояния();
	
	// 21. Установим дату изменения движений по ордерному складу.
	Константы.ДатаОбновленияНаРелиз_1_2_1.Установить("19800101");
	
	// 22. Установим признак контроля остатков при пробитии чеков ККМ.
	Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Установить(Истина);
	
	// 23. Настройки подбора
	ЗаполнитьПользовательскиеНастройкиПодбора();
	
	// 25. Контактная информация
	КонтактнаяИнформацияУНФ.УстановитьСвойстваПредопределенныхВидовКонтактнойИнформации();
	
	// 26. Константы прайс-листа.
	Константы.ПрайсЛистВыводитьКод.Установить(Перечисления.ДаНет.Да);
	Константы.ПрайсЛистВыводитьПолноеНаименование.Установить(Перечисления.ДаНет.Нет);
	Константы.ПрайсЛистИспользоватьИерархиюНоменклатуры.Установить(Истина);
	Константы.ПрайсЛистФормироватьПоНаличиюНаСкладах.Установить(Ложь);
	
	// 28. Регистрация
	УдалитьРегистрациюИзмененийБазовыхКлассификаторов();
	
	// 30. Константа.НачалоИспользованияСФ1137
	Константы.НачалоИспользованияСФ1137.Установить(Дата(2012, 04, 01));
	
	// 31. Константа.ЗачитыватьАвансыДолгиАвтоматически
	Константы.ЗачитыватьАвансыДолгиАвтоматически.Установить(Перечисления.ДаНет.Нет);
	
	// 32. БПО
	МенеджерОборудованияВызовСервераПереопределяемый.ОбновлениеБиблиотеки();
	
	// 33. Заполним состояния событий.
	СостояниеЗапланированоОбъект = Справочники.СостоянияСобытий.Запланировано.ПолучитьОбъект();
	СостояниеЗапланированоОбъект.РеквизитДопУпорядочивания = 1;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СостояниеЗапланированоОбъект);
	
	СостояниеЗавершеноОбъект = Справочники.СостоянияСобытий.Завершено.ПолучитьОбъект();
	СостояниеЗавершеноОбъект.РеквизитДопУпорядочивания = 2;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СостояниеЗавершеноОбъект);
	
	СостояниеОтмененоОбъект = Справочники.СостоянияСобытий.Отменено.ПолучитьОбъект();
	СостояниеОтмененоОбъект.РеквизитДопУпорядочивания = 3;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СостояниеОтмененоОбъект);
	
	// 34. Заполнение предопределенных элементов справочника статьи движения денежных средств
	ВыполнитьПервоначальноеЗаполнениеСтатейДвиженияДенежныхСредств();
	
	// 35. Заполняем регистр сведений ЗначенияКБК
	ЗагрузитьЗначенияКБК();
	
	// 36. Заполним сегменты контрагентов.
	Справочники.СегментыКонтрагентов.ЗаполнитьПоставляемыеСегменты();
	
	// 37. Заполним источники привлечения покупателей.
	Справочники.ИсточникиПривлеченияПокупателей.ЗаполнитьПоставляемыеИсточникиПривлеченияПокупателей();
	
	// 38. Заполним справочник ВидыДоходовПоСтраховымВзносам.
	Справочники.ВидыДоходовПоСтраховымВзносам.ЗаполнитьВидыДоходовПоСтраховымВзносам();
	
	// 39. Заполним справочник ВидыДоходовПоСтраховымВзносам.
	ЗаполнитьКодыНДФЛ();
	
	// 40. Заполним справочник ВидыДоходовПоСтраховымВзносам.
	ЗаполнитьДокументыФизическихЛицПоКлассификаторуМВД();
	
	// 41. Всегда ИспользоватьДополнительныеРеквизитыИСведения = Истина
	Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
	
	// 42. Настройка отбора номенклатуры.
	РегистрыСведений.НастройкиПользователей.Установить(Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры, "ОсновнойВидОтбора");
	
	// 43. Создание шаблонов условий печати в счетах на оплату
	ЗаполнитьДополнительныеУсловияДляПечати();
	
	// 44. Создание шаблонов наименований для предопределенной категории.
	ШаблоныНаименований.СоздатьШаблоныПоУмолчанию(Справочники.КатегорииНоменклатуры.БезКатегории);
	
	// 45. Идентификаторы
	ОбновитьПредопределенныеВидыЦен();
	
	// 46. Обновление документов заработной платы
	ОтчетыУНФ.Обновить();
	ОтчетыУНФ.ОбновитьТегиОтчетов();
	
	// 47. Установка константы функциональной опции участия в опросе
	УстановитьКонстантуУчастияВОпросеПоНалогам();
	
	// 48. Заполним справочник ПравилаРабочегоПроцесса.
	Справочники.ПравилаРабочегоПроцесса.ЗаполнитьПоставляемыеПравила();
	
	// 49. Заполняет справочник ключевых операций, устанавливает целевое время
	ЗаполнитьРеквизитыКлючевыхОпераций();
	
	// МобильноеПриложение
	// 50. Установка ФО это обычное приложение.
	УстановитьКонстантуЭтоОбычноеПриложение();
	// Конец МобильноеПриложение
	
	// 51. Заполним параметры расчета доставки.
	ЗаполнитьПараметрыРасчетовДоставки();
	
	// 52. Заполним реквизиты собственной службы.
	ЗаполнитьРеквизитыСобственнойСлужбыДоставки();
	
	// 53. Шаблоны печати офисных документов.
	ШаблоныПечатиОфисныхДокументов.СоздатьПредопределенныеШаблоныКоммерческогоПредложения();
	ШаблоныПечатиОфисныхДокументов.СоздатьПредопределенныеШаблоныДоговоровКонтрагентов();
	
	// 54. Расчет стоимости операций сдельным нарядом с учетом нормы времени
	Константы.РасчетСтоимостиОперацийПоНормеВремени.Установить(Перечисления.ДаНет.Да);
	
	// 55. Настройка представлений кодов в печатных формах
	ЗаполнитьНастройкиПредставленийВПечатныхФормахПриНачалеРаботы();
	
	// 56. Настройка вида КИ для ПФ Товарный чек
	Константы.КонтактнаяИнформацияТоварногоЧека.Установить(Перечисления.КонтактнаяИнформацияТоварногоЧека.ОрганизацияИСтруктурнаяЕдиница);
	
	// 57. Коды товаров SKU 
	Константы.НижняяГраницаДиапазонаSKUВесовогоТовара.Установить(1);
	Константы.ВерхняяГраницаДиапазонаSKUВесовогоТовара.Установить(99999);
	
	// 58. Варианты округления копеек в суммах документов
	СоздатьВариантыОкругленияСуммДокументов();
	
	// 59. Установка значений по умолчанию для реквизитов расчетов в карточке контрагента.
	УстановитьЗначенияПоУмолчаниюДляРеквизитовРасчетов();
	
	// 60. Начало действия Постановления Правительства РФ № 981 (счет-фактура)
	УстановитьДатуНачалаДействияПостановления981();
	
	// 61. Заполнение поставляемых состояний лидов.
	Справочники.СостоянияЛидов.ЗаполнитьПоставляемыеСостоянияЛидов();
	
	// 62. Заполнение поставляемых причин отказа лидов.
	Справочники.ПричиныНеуспешногоЗавершенияРаботыСЛидом.ЗаполнитьПоставляемыеПричиныНеуспешногоЗавершенияРаботыСЛидом();
	
	// 64. Установка варианта возврата по чеку из закрытой смены
	УстановитьВариантВозвратаПоЗакрытойСмене();
	
	// 65. Установка значений констант начального заполнения оснований печати для заказа покупателя и счета на оплату
	НачальноеЗаполнениеОснованийПечатиСчетовИЗаказов();
	
	// 66. Установить значение константы использования ручного распределения материалов по умолчанию
	Константы.ИспользоватьРучноеРаспределениеМатериаловПоУмолчанию.Установить(Перечисления.ДаНет.Нет);
	
	// 67. Обработчик обновления графиков учета рабочего времени
	ОбновитьГрафикиУчетаРабочегоВремени();
	
	// 68. Заполнение констант ДатаНачалаРегистрацииРозничныхПродажВЕГАИС и ДатаНачалаРегистрацииРозничныхПродажВЕГАИСВСельскойМестности
	ИнтеграцияЕГАИСУНФ.УстановитьКонстантыЕГАИС();
	
	// 69. Поставляемые шаблоны сообщений.
	Документы.ЗаказПокупателя.СоздатьПоставляемыеШаблоныСообщений();
	
	// 70. Создание стартового набора показателей бизнеса
	Справочники.ПоказателиБизнеса.СформироватьПоказателиБизнесаДоходыРасходыПоШаблону();
	Справочники.ПоказателиБизнеса.СформироватьПоказателиБизнесаДенежныйПотокПоШаблону();
	Справочники.ПоказателиБизнеса.СформироватьПоказателиБизнесаБалансПоШаблону();
	
	// 71. Заполнение поставляемых соответствий реквизитов лида и контрагента
	РегистрыСведений.СоответствиеПолейЛидаИКонтрагента.ЗаполнитьПоставляемыеСоответствияРеквизитовЛидаИКонтрагента();
	
	// 72. Формирование печатных форм в пользовательских единицах измерения
	Константы.ПечатьПользовательскихЕдиницИзмерения.Установить(Перечисления.ПечатьПользовательскихЕдиницИзмерения.ПересчитыватьВБазовуюЕдиницуИзмеренияНоменклатуры);
	
	// 73. Создание стартового набора карточек анализа бизнеса
	Справочники.КарточкиАнализаБизнеса.СформироватьНаборПоставляемыхКарточек();
	
	// 74 Установка значения служебной константы для регистра ДвиженияДенежныхСредств
	Константы.РегистрДвиженияДенежныхСредствЗаполнен.Установить(Истина);
	
	// 75. Заполним константу МиграцияСерийНоменклатурыВыполнена
	Константы.МиграцияСерийНоменклатурыВыполнена.Установить(Истина);
	
	// 76. Заполним константу завершения переноса комиссии по эквайрингу
	Константы.ОбработкаКомиссииЗавершена.Установить(Истина);
	
	ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения обработчика ПервыйЗапуск_РазделенныеДанные()'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;
	
КонецПроцедуры // ПервыйЗапуск()

#КонецОбласти

#Область Обработчики_1_6_25

Процедура ОбновитьОтчеты_1_6_25(ПараметрыОбработчика) Экспорт
	
	ОтчетыКОбновлению = Новый Массив;
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ЗапасыПринятые);
	
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ДвиженияСерийНоменклатуры);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.СкладПоСериямНоменклатуры);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ОстаткиТоваровПоСрокамГодности);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.РезервыТоваровОрганизаций);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ДвижениеТоваров);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.Запасы);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ЗапасыВРазрезеГТД);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ЗапасыПереданные);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ЗапасыПереданныеВРазрезеГТД);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ЗапасыПринятые);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ЗапасыПринятыеВРазрезеГТД);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ИзлишкиИНедостачи);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ОборачиваемостьЗапасов);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ОстаткиТоваров);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ОстаткиТоваровМеньшеНуля);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ОстаткиТоваровПоСрокамГодности);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.СкладПоСериямНоменклатуры);
	
	ОтчетыУНФ.ОбновитьОтчетыВыборочно(ОтчетыКОбновлению);
	
	ПараметрыОбработчика.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура СоздатьПолитикиУчетаСерий_1_6_25() Экспорт

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПолитикаУчетаСерий.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПолитикаУчетаСерий КАК ПолитикаУчетаСерий";
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НоваяПолитика = Справочники.ПолитикаУчетаСерий.СоздатьЭлемент();
	НоваяПолитика.Наименование = НСтр("ru = 'Справочное указание серий'");
	НоваяПолитика.ТипПолитики = Перечисления.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий;
	Справочники.ПолитикаУчетаСерий.ЗаполнитьДеревоНастроек(НоваяПолитика);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоваяПолитика);
	
	НоваяПолитика = Справочники.ПолитикаУчетаСерий.СоздатьЭлемент();
	НоваяПолитика.Наименование = НСтр("ru = 'Управление остатками серий'");
	НоваяПолитика.ТипПолитики = Перечисления.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий;
	Справочники.ПолитикаУчетаСерий.ЗаполнитьДеревоНастроек(НоваяПолитика);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоваяПолитика);
	
КонецПроцедуры

Процедура УстановитьПолитикиУчетаСерийВНоменклатуру_1_6_25(ПараметрыОбработчика) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		ПараметрыОбработчика.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	КонтрольОстатков = ПолучитьФункциональнуюОпцию("КонтрольОстатковСерийНоменклатуры");
	
	Если КонтрольОстатков Тогда
		ПолитикаУчетаСерий = Справочники.ПолитикаУчетаСерий.НайтиПоНаименованию("Управление остатками серий");
	Иначе
		ПолитикаУчетаСерий = Справочники.ПолитикаУчетаСерий.НайтиПоНаименованию("Справочное указание серий");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолитикаУчетаСерий) Тогда
		СоздатьПолитикиУчетаСерий_1_6_25();
		
		Если КонтрольОстатков Тогда
			ПолитикаУчетаСерий = Справочники.ПолитикаУчетаСерий.НайтиПоНаименованию("Управление остатками серий");
		Иначе
			ПолитикаУчетаСерий = Справочники.ПолитикаУчетаСерий.НайтиПоНаименованию("Справочное указание серий");
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ИспользоватьСерииНоменклатуры
	|	И Номенклатура.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикаУчетаСерий.ПустаяСсылка)";
	
	ЕстьОшибки = Ложь;
	КоличествоОбработанных = 0;
	
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаписьОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗаписьОбъект.Заблокировать();

			ЗаписьОбъект.ИспользоватьУникальныеСерии = Истина;
			ЗаписьОбъект.ПолитикаУчетаСерий = ПолитикаУчетаСерий;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаписьОбъект);
			ЗаписьОбъект.Разблокировать();
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		КонецЦикла;
		
	Исключение
		
		ЕстьОшибки = Истина;
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение обработчика УстановитьПолитикиУчетаСерийВНоменклатуру'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,, Выборка.Ссылка, ТекстСообщения);
		
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки И КоличествоОбработанных < 500;
	
КонецПроцедуры

Процедура СоздатьДвиженияПоРегиструДвиженияСерийНоменклатуры_1_6_25(ПараметрыОбработчика) Экспорт
	
	Если Константы.МиграцияСерийНоменклатурыВыполнена.Получить() Тогда
		ПараметрыОбработчика.ОбработкаЗавершена = Истина;
		Возврат
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 200
		|	СерииНоменклатурыГарантии.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.СерииНоменклатурыГарантии КАК СерииНоменклатурыГарантии
		|ГДЕ
		|	НЕ СерииНоменклатурыГарантии.МиграцияВыполнена";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СерииНоменклатурыГарантии.НаборЗаписей");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		ЕстьОшибки = Ложь;
		КоличествоОбработанных = 0;
		
		НаборЗаписейТекущий = РегистрыСведений.СерииНоменклатурыГарантии.СоздатьНаборЗаписей();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Не РегистрыНакопления.ДвиженияСерииНоменклатуры.ЕстьБитыеСсылкиНаНоменклатуруВТаблице(Выборка.Регистратор) Тогда
				РегистраторОбъект = Выборка.Регистратор.ПолучитьОбъект();
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РегистраторОбъект,, Истина, РежимЗаписиДокумента.Запись);
				РегистрыНакопления.ДвиженияСерииНоменклатуры.ВыполнитьДвиженияСерииНоменклатуры(Выборка.Регистратор);
			КонецЕсли;
			
			НаборЗаписейТекущий.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			НаборЗаписейТекущий.Прочитать();
			
			Для Каждого СтрокаНабора Из НаборЗаписейТекущий Цикл
				СтрокаНабора.МиграцияВыполнена = Истина;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейТекущий);
			
			НаборЗаписейТекущий.Очистить();
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЕстьОшибки = Истина;
		
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытия = НСтр("ru = 'Создать движения по регистру Движения серий номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		
	КонецПопытки;
	
	ОбработкаЗавершена = НЕ ЕстьОшибки И КоличествоОбработанных < 200;
	
	Если ОбработкаЗавершена Тогда
		Константы.МиграцияСерийНоменклатурыВыполнена.Установить(Истина);
	КонецЕсли;
	
	ПараметрыОбработчика.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

Процедура СформироватьОсновныеСведенияДляГоловногоКонтрагентаИПодразделений(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	Контрагенты.ГоловнойКонтрагент КАК ГоловнойКонтрагент
	|ПОМЕСТИТЬ ВТ_ГоловныеКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиГоловнойКонтрагентПодразделение КАК СвязиГоловнойКонтрагентПодразделение
	|		ПО (СвязиГоловнойКонтрагентПодразделение.Подразделение = Контрагенты.Ссылка)
	|			И (СвязиГоловнойКонтрагентПодразделение.ГоловнойКонтрагент = Контрагенты.ГоловнойКонтрагент)
	|ГДЕ
	|	Контрагенты.ГоловнойКонтрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И СвязиГоловнойКонтрагентПодразделение.ГоловнойКонтрагент ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ОсновныеСведения КАК ОсновныеСведения
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_ГоловныеКонтрагенты.ГоловнойКонтрагент
	|			ИЗ
	|				ВТ_ГоловныеКонтрагенты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ОсновныеСведения КАК ОсновныеСведения
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ГоловнойКонтрагент В
	|			(ВЫБРАТЬ
	|				ВТ_ГоловныеКонтрагенты.ГоловнойКонтрагент
	|			ИЗ
	|				ВТ_ГоловныеКонтрагенты)
	|ИТОГИ ПО
	|	ГоловнойКонтрагент";
	
	ЕстьОшибки = Ложь;
	КоличествоОбработанных = 0;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ГоловныеКонтрагенты = МассивРезультатов[1].Выбрать();
	ПодразделенияГоловныхКонтрагентов = МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ГоловныеКонтрагенты.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ОсновныеСведенияГоловного = Новый Массив;
			СведенияДляПодразделений = ГоловныеКонтрагенты.ОсновныеСведения;
			
			НаборЗаписей = РегистрыСведений.СвязиГоловнойКонтрагентПодразделение.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ГоловнойКонтрагент.Установить(ГоловныеКонтрагенты.Ссылка);
			
			Отбор = Новый Структура("ГоловнойКонтрагент", ГоловныеКонтрагенты.Ссылка);
			
			Пока ПодразделенияГоловныхКонтрагентов.НайтиСледующий(Отбор) Цикл
				
				ВыборкаПодразделений = ПодразделенияГоловныхКонтрагентов.Выбрать();
				
				Пока ВыборкаПодразделений.Следующий() Цикл
													
					ОсновныеСведенияГоловного.Добавить(ВыборкаПодразделений.ОсновныеСведения);
					ОсновныеСведенияГоловного.Добавить(Символы.ПС);
					
					НоваяЗапись = НаборЗаписей.Добавить(); 
					НоваяЗапись.Подразделение = ВыборкаПодразделений.Ссылка; 
					НоваяЗапись.ГоловнойКонтрагент = ГоловныеКонтрагенты.Ссылка; 
					НоваяЗапись.ОсновныеСведения = СведенияДляПодразделений;
				КонецЦикла;
				
			КонецЦикла;
			НаборЗаписей.Записать(Истина);
			
			ОсновныеСведенияГоловного.Вставить(0, НСтр("ru = 'Подразделения:'"));
			
			МенеджерЗаписи = РегистрыСведений.СвязиГоловнойКонтрагентПодразделение.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ГоловнойКонтрагент = Справочники.Контрагенты.ПустаяСсылка(); 
			МенеджерЗаписи.Подразделение = ГоловныеКонтрагенты.Ссылка; 
			МенеджерЗаписи.ОсновныеСведения = СтрСоединить(ОсновныеСведенияГоловного, Символы.ПС);
			МенеджерЗаписи.Записать();
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ЕстьОшибки = Истина;
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение обработчика СформироватьОсновныеСведенияДляГоловногоКонтрагентаИПодразделений'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,ГоловныеКонтрагенты.Ссылка,ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ЕстьОшибки И КоличествоОбработанных < 500;
	
КонецПроцедуры

Процедура ОбновитьНаборДополнительныхРеквизитовИСведенийКомплектации(Параметры) Экспорт
	
	ЕстьОшибки = Ложь;

	НачатьТранзакцию();
	Попытка
		
		ИмяНабораСвойств = "Документ_КомплектацияЗапасов";
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств(ИмяНабораСвойств);
		ИмяНабораСвойств = "Справочник_КомплектацииНоменклатуры";
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств(ИмяНабораСвойств);
		ИмяНабораСвойств = "Справочник_КомплектацииНоменклатуры_Общие";
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств(ИмяНабораСвойств);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КатегорииНоменклатуры.Ссылка КАК Ссылка,
		|	КатегорииНоменклатуры.Наименование КАК Наименование,
		|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_КомплектацииНоменклатуры) КАК Родитель,
		|	КатегорииНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК Используется
		|ИЗ
		|	Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
		|ГДЕ
		|	КатегорииНоменклатуры.НаборСвойствКомплектацииНоменклатуры = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НовыйНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НовыйНабор, Выборка, , "Ссылка");
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйНабор);
			КатегорияОбъект = Выборка.Ссылка.ПолучитьОбъект();
			КатегорияОбъект.Заблокировать();
			КатегорияОбъект.НаборСвойствКомплектацииНоменклатуры = НовыйНабор.Ссылка;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(КатегорияОбъект);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЕстьОшибки = Истина;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ОбновитьНаборДополнительныхРеквизитовИСведенийКомплектации'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = НЕ ЕстьОшибки;
	
КонецПроцедуры

Процедура ЗаполнитьПроцентыКомиссииВЭквайринговыхТерминалах() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|ГДЕ
		|	ЭквайринговыеТерминалы.УдалитьЭквайрерБеретКомиссиюЗаВозвратДС";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЭквайринговыйТерминал = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Для каждого ВидПлатежнойКарты Из ЭквайринговыйТерминал.ВидыПлатежныхКарт Цикл
			
			Если ВидПлатежнойКарты.ПроцентКомиссии = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭквайринговыйТерминал.УдалитьКомиссияЗаВозвратУменьшаетКомиссиюЗаОплату Тогда
				ВидПлатежнойКарты.ПроцентКомиссииПриВозврате = ВидПлатежнойКарты.ПроцентКомиссии * -1;
			Иначе
				ВидПлатежнойКарты.ПроцентКомиссииПриВозврате = ВидПлатежнойКарты.ПроцентКомиссии;
			КонецЕсли;
			
			ВидПлатежнойКарты.ПроцентКомиссииПриОтмене = ВидПлатежнойКарты.ПроцентКомиссииПриВозврате;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭквайринговыйТерминал);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьКомиссиюЗаВозвратВОперацияхПоПлатежнымКартам(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ОперацияПоПлатежнымКартам.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОперацияПоПлатежнымКартам КАК ОперацияПоПлатежнымКартам
		|ГДЕ
		|	ОперацияПоПлатежнымКартам.Проведен
		|	И ОперацияПоПлатежнымКартам.УдалитьКомиссияЗаВозвратУменьшаетКомиссиюЗаОплату
		|	И ОперацияПоПлатежнымКартам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОперацияПоПлатежнымКартам.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ПараметрыОбработчика.ОбработкаЗавершена = Истина;
		
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ОперацияПоПлатежнойКарте = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОперацияПоПлатежнойКарте.УдалитьКомиссияЗаВозвратУменьшаетКомиссиюЗаОплату = Ложь;
			ОперацияПоПлатежнойКарте.СуммаКомиссииПоДоговору = ОперацияПоПлатежнойКарте.СуммаКомиссииПоДоговору * -1;
			ОперацияПоПлатежнойКарте.ПроцентКомиссии = ОперацияПоПлатежнойКарте.ПроцентКомиссии * -1;
			
			Для Каждого СтрокаТЧ Из ОперацияПоПлатежнойКарте.РасшифровкаПлатежа Цикл
				СтрокаТЧ.СуммаКомиссии = СтрокаТЧ.СуммаКомиссии * -1;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОперацияПоПлатежнойКарте);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКонтрагентаПередачиВДвижениях(Параметры) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ПередачаТоваровМеждуОрганизациями") Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПродажиОбороты.Регистратор КАК Ссылка,
	|	ПередачаТоваровМеждуОрганизациями.КонтрагентПолучатель КАК Контрагент
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(, , Регистратор, ) КАК ПродажиОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|		ПО ПродажиОбороты.Регистратор = ПередачаТоваровМеждуОрганизациями.Ссылка
	|ГДЕ
	|	ПродажиОбороты.Регистратор ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями
	|	И ПродажиОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиОбороты.Регистратор,
	|	ПередачаТоваровМеждуОрганизациями.КонтрагентПолучатель";
	ЕстьОшибки = Ложь;
	
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Документ = Выборка.Ссылка.ПолучитьОбъект();
			Документ.Заблокировать();
			Документ.Движения.Продажи.Прочитать();
			Для Каждого Запись Из Документ.Движения.Продажи Цикл
				Если ЗначениеЗаполнено(Запись.Контрагент) Тогда
					Продолжить;
				КонецЕсли; 
				Запись.Контрагент = Выборка.Контрагент; 
			КонецЦикла; 
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Документ.Движения.Продажи, , Ложь);
			Документ.Разблокировать();
		КонецЦикла;
			
	Исключение
		
		ЕстьОшибки = Истина;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ЗаполнитьКонтрагентаПередачиВДвижениях'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = НЕ ЕстьОшибки;
	
КонецПроцедуры

Процедура ЗаполнитьСервисЯндексДоставкиВЗаказеПокупателя(ПараметрыОбработчика) Экспорт
		
	КоличествоПорции = 500;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	ЗаказПокупателя.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СлужбыДоставки КАК СлужбыДоставки
	|		ПО (СлужбыДоставки.Ссылка = ЗаказПокупателя.СлужбаДоставки)
	|ГДЕ
	|	СлужбыДоставки.ИдентификаторЯндекса <> 0
	|	И ЗаказПокупателя.СервисДоставки = &СервисДоставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателя.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("СервисДоставки", Перечисления.СервисыДоставки.ПустаяСсылка());
	
	ЕстьОшибки = Ложь;
	КоличествоОбработанных = 0;
	
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаказОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗаказОбъект.Заблокировать();

			ЗаказОбъект.СервисДоставки = Перечисления.СервисыДоставки.ЯндексДоставка;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаказОбъект);
			ЗаказОбъект.Разблокировать();
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		КонецЦикла;
		
	Исключение
		ЕстьОшибки = Истина;
		
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ЗаполнитьСервисЯндексДоставкиВЗаказеПокупателя'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		,
		Выборка.Ссылка,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки И КоличествоОбработанных < КоличествоПорции;
	
КонецПроцедуры

Процедура УстановитьКонстантуЯндексДоставки() Экспорт
	
	Если НЕ ЯндексДоставка.Подключена() Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьСервисЯндексДоставка.Установить(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПризнакАгентаВДоговорахСКомитентом(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СКомитентом)
		|	И ДоговорыКонтрагентов.ПризнакАгента = ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ПараметрыОбработчика.ОбработкаЗавершена = Истина;
		
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Договор = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Договор.ПризнакАгента = Перечисления.ПризнакиАгента.Комиссионер;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Договор);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКоличествоМесяцевОчисткиВложенийЭлектронныхПисем() Экспорт
	
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.КоличествоМесяцевОчисткиВложенийЭлектронныхПисем.Установить(2);
	
КонецПроцедуры

Процедура УстановитьЗначениеПризнакаИспользуется(Параметры) Экспорт
	
	НаборОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ПередачаТоваровМеждуОрганизациями.ПолучитьОбъект();
	НаборОбъект.Используется = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборОбъект);
	
КонецПроцедуры

Процедура СоздатьПолитикуКиЗ() Экспорт
	
	Если Не Константы.ВестиУчетМаркировкиПродукцииВГИСМ.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПолитикаУчетаСерий.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПолитикаУчетаСерий КАК ПолитикаУчетаСерий
	|ГДЕ
	|	ПолитикаУчетаСерий.ОсновнаяПолитикаУчетаКиЗ";
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НоваяПолитика = Справочники.ПолитикаУчетаСерий.СоздатьЭлемент();
	НоваяПолитика.Наименование = НСтр("ru = 'Политика учета КиЗ'");
	НоваяПолитика.ТипПолитики = Перечисления.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий;
	НоваяПолитика.ОсновнаяПолитикаУчетаКиЗ = Истина;
	Справочники.ПолитикаУчетаСерий.ЗаполнитьДеревоНастроек(НоваяПолитика);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоваяПолитика);
	
КонецПроцедуры

Процедура ОбновитьРолиУСлужебногоПользователяКабинетКлиента() Экспорт
	
	Попытка
		
		Логин = "UserClients";
		
		УстановитьПривилегированныйРежим(Истина);
		ПользовательИзСправочника = Пользователи.НайтиПоИмени(Логин);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ПользовательИзСправочника <> Неопределено Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			РолиПользователя = Новый Массив;
			РолиПользователя.Добавить(Метаданные.Роли.ИспользованиеМетодовКабинетКлиента.Имя);
			РолиПользователя.Добавить(Метаданные.Роли.ВыполнениеСинхронизацииДанных.Имя);
			
			ОписаниеПользователяИБ = Пользователи.СвойстваПользователяИБ(Логин);
			ОписаниеПользователяИБ.Роли = РолиПользователя;
			
			Пароль = "a0c3bdd0-9699-11ea-1e9e-0242ac130004";
			Включить = Истина;
			
			ОписаниеПользователяИБ.Вставить("СтарыйПароль", Пароль);
			ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная", Включить);
			
			Пользователи.УстановитьСвойстваПользователяИБ(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательИзСправочника, "ИдентификаторПользователяИБ"),
			ОписаниеПользователяИБ,
			Ложь,
			Ложь);
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ОбновитьРолиУСлужебногоПользователяКабинетКлиента'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьДатуНачалаВыгрузкиДокументовВУзлеОбменаКабинетКлиента() Экспорт
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
		|ГДЕ
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.ВариантНастройки = &ВариантНастройки";
		
		Запрос.УстановитьПараметр("ВариантНастройки", "КабинетКлиента");
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаПлановОбмена = РезультатЗапроса.Выбрать();
		
		ПоследняяДатаДокументаУстановкаЦенНоменклатуры = Неопределено;
		
		Если ВыборкаПлановОбмена.Количество() > 0 Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЦеныНоменклатурыСрезПоследних.Период КАК ПоследняяДатаДокументаУстановкаЦенНоменклатуры
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
			|ГДЕ
			|	ЦеныНоменклатурыСрезПоследних.ДокументУстановки <> ЗНАЧЕНИЕ(Документ.УстановкаЦенНоменклатуры.ПустаяСсылка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЦеныНоменклатурыСрезПоследних.Период";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				ПоследняяДатаДокументаУстановкаЦенНоменклатуры = ВыборкаДетальныеЗаписи.ПоследняяДатаДокументаУстановкаЦенНоменклатуры;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПоследняяДатаДокументаУстановкаЦенНоменклатуры) Тогда
			Возврат;
		КонецЕсли;
		
		Пока ВыборкаПлановОбмена.Следующий() Цикл
			УзелОбмена = ВыборкаПлановОбмена.Ссылка;
			УзелОбменаОбъект = УзелОбмена.ПолучитьОбъект();
			Если УзелОбменаОбъект.ДатаНачалаВыгрузкиДокументов > ПоследняяДатаДокументаУстановкаЦенНоменклатуры Тогда
				УзелОбменаОбъект.ДатаНачалаВыгрузкиДокументов = ПоследняяДатаДокументаУстановкаЦенНоменклатуры;
				УзелОбменаОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ОбновитьДатуНачалаВыгрузкиДокументовВУзлеОбменаКабинетКлиента'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Обработчики_1_6_26

Процедура УстановитьКоэффициентЕдиницыДляОтчетовИШтрихКодДляПечатныхФорм(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.КоэффициентЕдиницыДляОтчетов = 0";
	
	ЕстьОшибки = Ложь;
	КоличествоОбработанных = 0;
	
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаписьОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗаписьОбъект.Заблокировать();

			ЗаписьОбъект.КоэффициентЕдиницыДляОтчетов = 1;
			ЗаписьОбъект.ШтрихКод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодСМаксимальнымНомером(Выборка.Ссылка);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаписьОбъект);
			ЗаписьОбъект.Разблокировать();
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		КонецЦикла;
		
	Исключение
		
		ЕстьОшибки = Истина;
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение обработчика УстановитьКоэффициентЕдиницыДляОтчетов'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,, Выборка.Ссылка, ТекстСообщения);
		
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки И КоличествоОбработанных < 500;
	
КонецПроцедуры

Процедура ДобавитьПолеШтрихкодВПрайсЛисты(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрайсЛисты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПрайсЛисты КАК ПрайсЛисты
	|ГДЕ
	|	НЕ ПрайсЛисты.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПрайсЛистыПредставлениеНоменклатуры.Ссылка КАК Ссылка
	|				ИЗ
	|					Справочник.ПрайсЛисты.ПредставлениеНоменклатуры КАК ПрайсЛистыПредставлениеНоменклатуры
	|				ГДЕ
	|					ПрайсЛистыПредставлениеНоменклатуры.РеквизитНоменклатуры = ""Штрихкод"")";
	
	ЕстьОшибки = Ложь;
	
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаписьОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗаписьОбъект.Заблокировать();

			НоваяСтрока							= ЗаписьОбъект.ПредставлениеНоменклатуры.Вставить(3);
			НоваяСтрока.Использование			= Ложь;
			НоваяСтрока.РеквизитНоменклатуры	= "Штрихкод";
			НоваяСтрока.РеквизитПредставление	= "Штрихкод";
			НоваяСтрока.ПараметрРасшифровки		= "НоменклатураСсылка";
			НоваяСтрока.Ширина					= 11;
			НоваяСтрока.СлужебныйУправлениеВидимостью = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаписьОбъект);
			ЗаписьОбъект.Разблокировать();
			
		КонецЦикла;
		
	Исключение
		
		ЕстьОшибки = Истина;
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение обработчика ДобавитьПолеШтрихкодВПрайсЛисты'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,, Выборка.Ссылка, ТекстСообщения);
		
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки;
	
КонецПроцедуры

Процедура ЗаполнитьПоставляемыеСостоянияЗаказовНаПеремещение() Экспорт
	
	Справочники.СостоянияЗаказовНаПеремещение.ЗаполнитьПоставляемыеСостояния();
	
КонецПроцедуры

Процедура ОбновитьНаборДополнительныхРеквизитовИСведенийЗаказНаПеремещение() Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ИмяНабораСвойств = "Документ_ЗаказНаПеремещение";
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств(ИмяНабораСвойств);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ОбновитьНаборДополнительныхРеквизитовИСведенийЗаказНаПеремещение'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьОтчеты_1_6_26(ПараметрыОбработчика) Экспорт
	
	ОтчетыКОбновлению = Новый Массив;
	
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ЗаказыНаПеремещение);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.СоставСегмента);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ПересеченияСегментов);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ABCXYZАнализПродаж);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ABCАнализПродаж);
	
	ОтчетыУНФ.ОбновитьОтчетыВыборочно(ОтчетыКОбновлению);
	
	ПараметрыОбработчика.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьКомиссиюЭквайрераВРознице(ПараметрыОбработчика) Экспорт
	
	ИмяСобытия = НСтр("ru = 'Заполнение колонки с комиссией эквайрера'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахБезналичнаяОплата.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажахБезналичнаяОплата.НомерСтроки КАК НомерСтроки,
	|	ОтчетОРозничныхПродажахБезналичнаяОплата.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ОтчетОРозничныхПродажахБезналичнаяОплата.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	ОтчетОРозничныхПродажахБезналичнаяОплата.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	ОтчетОРозничныхПродажахБезналичнаяОплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ СтрокиОплат
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.БезналичнаяОплата КАК ОтчетОРозничныхПродажахБезналичнаяОплата
	|ГДЕ
	|	ОтчетОРозничныхПродажахБезналичнаяОплата.Ссылка.Проведен
	|	И НЕ ОтчетОРозничныхПродажахБезналичнаяОплата.Ссылка.КомиссияОбработана
	|	И ОтчетОРозничныхПродажахБезналичнаяОплата.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМБезналичнаяОплата.Ссылка,
	|	ЧекККМБезналичнаяОплата.НомерСтроки,
	|	ЧекККМБезналичнаяОплата.ЭквайринговыйТерминал,
	|	ЧекККМБезналичнаяОплата.ВидПлатежнойКарты,
	|	ЧекККМБезналичнаяОплата.НомерПлатежнойКарты,
	|	ЧекККМБезналичнаяОплата.Сумма
	|ИЗ
	|	Документ.ЧекККМ.БезналичнаяОплата КАК ЧекККМБезналичнаяОплата
	|ГДЕ
	|	ЧекККМБезналичнаяОплата.Ссылка.Проведен
	|	И НЕ ЧекККМБезналичнаяОплата.Ссылка.КомиссияОбработана
	|	И ЧекККМБезналичнаяОплата.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта)
	|	И НЕ ЧекККМБезналичнаяОплата.Ссылка.Архивный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозвратБезналичнаяОплата.Ссылка,
	|	ЧекККМВозвратБезналичнаяОплата.НомерСтроки,
	|	ЧекККМВозвратБезналичнаяОплата.ЭквайринговыйТерминал,
	|	ЧекККМВозвратБезналичнаяОплата.ВидПлатежнойКарты,
	|	ЧекККМВозвратБезналичнаяОплата.НомерПлатежнойКарты,
	|	ЧекККМВозвратБезналичнаяОплата.Сумма
	|ИЗ
	|	Документ.ЧекККМВозврат.БезналичнаяОплата КАК ЧекККМВозвратБезналичнаяОплата
	|ГДЕ
	|	ЧекККМВозвратБезналичнаяОплата.Ссылка.Проведен
	|	И НЕ ЧекККМВозвратБезналичнаяОплата.Ссылка.КомиссияОбработана
	|	И ЧекККМВозвратБезналичнаяОплата.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта)
	|	И НЕ ЧекККМВозвратБезналичнаяОплата.Ссылка.Архивный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	СтрокиОплат.Ссылка КАК Ссылка,
	|	СтрокиОплат.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ОплатаПлатежнымиКартами.СуммаКомиссииПоДоговоруВал, РасчетыПоЭквайрингу.КомиссияВал) КАК СуммаКомиссии
	|ИЗ
	|	СтрокиОплат КАК СтрокиОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаПлатежнымиКартами КАК ОплатаПлатежнымиКартами
	|		ПО СтрокиОплат.Ссылка = ОплатаПлатежнымиКартами.Регистратор
	|			И СтрокиОплат.ЭквайринговыйТерминал = ОплатаПлатежнымиКартами.ЭквайринговыйТерминал
	|			И СтрокиОплат.ВидПлатежнойКарты = ОплатаПлатежнымиКартами.ВидПлатежнойКарты
	|			И СтрокиОплат.НомерПлатежнойКарты = ОплатаПлатежнымиКартами.НомерПлатежнойКарты
	|			И СтрокиОплат.Сумма = ОплатаПлатежнымиКартами.СуммаВал
	|			И (НЕ СтрокиОплат.Ссылка ССЫЛКА Документ.ОтчетОРозничныхПродажах)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыПоЭквайрингу КАК РасчетыПоЭквайрингу
	|		ПО СтрокиОплат.Ссылка = РасчетыПоЭквайрингу.Регистратор
	|			И СтрокиОплат.ЭквайринговыйТерминал = РасчетыПоЭквайрингу.ЭквайринговыйТерминал
	|			И СтрокиОплат.ВидПлатежнойКарты = РасчетыПоЭквайрингу.ВидПлатежнойКарты
	|			И СтрокиОплат.НомерПлатежнойКарты = РасчетыПоЭквайрингу.НомерПлатежнойКарты
	|			И (СтрокиОплат.Сумма = РасчетыПоЭквайрингу.СуммаВал
	|				ИЛИ СтрокиОплат.Сумма = -РасчетыПоЭквайрингу.СуммаВал)
	|			И (СтрокиОплат.Ссылка ССЫЛКА Документ.ОтчетОРозничныхПродажах)");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		НачатьТранзакцию();
		Попытка
			Константы.ОбработкаКомиссииЗавершена.Установить(Истина);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ШаблонОшибки = НСтр("ru = 'Ошибка при установке константы ""Обработка комиссии завершена"":
				|%1'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ПодробноеПредставлениеОшибки);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	
	ТаблицаДанных = РезультатЗапроса.Выгрузить();
	СписокДокументов = ТаблицаДанных.Скопировать(, "Ссылка");
	СписокДокументов.Свернуть("Ссылка");
	
	Для Каждого СтрокаДокумента Из СписокДокументов Цикл
		
		СтрокиДанных = ТаблицаДанных.НайтиСтроки(Новый Структура("Ссылка", СтрокаДокумента.Ссылка));
		
		НачатьТранзакцию();
		Попытка
			
			ПространствоБлокировки = ОбщегоНазначения.ИмяТаблицыПоСсылке(СтрокаДокумента.Ссылка);
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПространствоБлокировки);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаДокумента.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
			
			Для Каждого СтрокаДанных Из СтрокиДанных Цикл
				Если СтрокаДанных.СуммаКомиссии = 0 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаОплаты = ДокументОбъект.БезналичнаяОплата.Найти(СтрокаДанных.НомерСтроки, "НомерСтроки");
				Если СтрокаОплаты <> Неопределено Тогда
					СтрокаОплаты.СуммаКомиссии = СтрокаДанных.СуммаКомиссии;
				КонецЕсли;
			КонецЦикла;
			
			ДокументОбъект.КомиссияОбработана = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, , , РежимЗаписиДокумента.Запись);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ШаблонОшибки = НСтр("ru = 'Ошибка при заполнении колонки с комиссией эквайрера в документе ""%1"":
				|%2'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстОшибки = СтрШаблон(ШаблонОшибки, СтрокаДокумента.Ссылка, ПодробноеПредставлениеОшибки);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиПравилаСегментаВСКД(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СегментыКонтрагентовУдалитьИспользуемыеПравила.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(СегментыКонтрагентовУдалитьИспользуемыеПравила.Имя) КАК КоличествоПравил
	|ПОМЕСТИТЬ КоличествоИспользуемыхПравил
	|ИЗ
	|	Справочник.СегментыКонтрагентов.УдалитьИспользуемыеПравила КАК СегментыКонтрагентовУдалитьИспользуемыеПравила
	|
	|СГРУППИРОВАТЬ ПО
	|	СегментыКонтрагентовУдалитьИспользуемыеПравила.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	Сегменты.Ссылка КАК Ссылка,
	|	Сегменты.УдалитьИспользуемыеПравила.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Имя КАК Имя,
	|		Настройка КАК Настройка,
	|		КлючДинамическогоПравила КАК КлючДинамическогоПравила
	|	) КАК ИспользуемыеПравила,
	|	Сегменты.СхемаКомпоновкиДанных КАК СхемаКомпоновкиДанных
	|ИЗ
	|	Справочник.СегментыКонтрагентов КАК Сегменты
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоИспользуемыхПравил КАК КоличествоИспользуемыхПравил
	|		ПО (КоличествоИспользуемыхПравил.Ссылка = Сегменты.Ссылка)
	|ГДЕ
	|	НЕ Сегменты.ЭтоГруппа
	|	И КоличествоИспользуемыхПравил.КоличествоПравил > 0
	|	И НЕ Сегменты.ПравилаПеренесеныНаНовуюСхему";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьОшибки = Ложь;
	КоличествоОбработанных = 0;
	
	Попытка
		Пока Выборка.Следующий() Цикл
			
			СКД = Справочники.СегментыКонтрагентов.ПолучитьМакет("СегментыКонтрагентов");
			СКД.НастройкиПоУмолчанию.Отбор.Элементы.Очистить();
			
			АдресСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
			
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
			КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
			КомпоновщикНастроек.Восстановить();
			
			ВыборкаПравил = Выборка.ИспользуемыеПравила.Выбрать();
			
			Пока ВыборкаПравил.Следующий() Цикл
				
				НастройкиСегмента = ВыборкаПравил.Настройка.Получить();
				ПолеОтбора = Новый ПолеКомпоновкиДанных("");
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПравил.КлючДинамическогоПравила) Тогда
					ПолеОтбора = Справочники.СегментыКонтрагентов.ПолеКомпоновкиДанныхПоПравилу(ВыборкаПравил.Имя);
				Иначе
					ПолеОтбора = Справочники.СегментыКонтрагентов.ПолеКомпоновкиПоДопРеквизитуИлиКИ(ВыборкаПравил, 
					КомпоновщикНастроек.Настройки);
				КонецЕсли;
				
				НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;	
				НовыйЭлементОтбора.Использование = Истина;
				НовыйЭлементОтбора.ВидСравнения = НастройкиСегмента.ВидСравнения;
				НовыйЭлементОтбора.ПравоеЗначение = НастройкиСегмента.Значение;
				
			КонецЦикла;
			
			РаботаССегментами.ПоместитьНастройкиВСхемуКомпоновкиДанных(КомпоновщикНастроек, АдресСКД);
			СегментОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СегментОбъект.Заблокировать();
			СегментОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСКД));
			СегментОбъект.ПравилаПеренесеныНаНовуюСхему = Истина;
			СегментОбъект.Обновляемый = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СегментОбъект);
			СегментОбъект.Разблокировать();
			КоличествоОбработанных = КоличествоОбработанных + 1;
		КонецЦикла;
		
	Исключение
		ЕстьОшибки = Истина;
		
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ПеренестиПравилаСегментаВСКД'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		,
		Выборка.Ссылка,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки И КоличествоОбработанных < 500;
	
	
КонецПроцедуры

Процедура ЗаполнитьВариантОграниченияСкидокПоПолучателям() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АвтоматическиеСкидки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК АвтоматическиеСкидки
	|ГДЕ
	|	АвтоматическиеСкидки.ВариантОграниченияПоПолучателям = ЗНАЧЕНИЕ(Перечисление.ВариантыОграниченийСкидокПоКонтрагентам.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Скидка = Выборка.Ссылка.ПолучитьОбъект();
		Скидка.ВариантОграниченияПоПолучателям = Перечисления.ВариантыОграниченийСкидокПоКонтрагентам.ПоКонтрагентам;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Скидка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВариантПредоставленияСкидкиПоНоменклатуре() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценок.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок КАК УсловияПредоставленияСкидокНаценок
	|ГДЕ
	|	УсловияПредоставленияСкидокНаценок.ВариантПредоставленияСкидкиПоНоменклатуре = ЗНАЧЕНИЕ(Перечисление.ВариантПредоставленияСкидкиПоНоменклатуре.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Скидка = Выборка.Ссылка.ПолучитьОбъект();
		Скидка.ВариантПредоставленияСкидкиПоНоменклатуре = 
			Перечисления.ВариантПредоставленияСкидкиПоНоменклатуре.ПоНоменклатуре;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Скидка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЕдиницуИзмеренияВладельца(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	ЕдиницыИзмерения.Ссылка КАК Ссылка,
	|	ЕдиницыИзмерения.Владелец.ЕдиницаИзмерения КАК ЕдиницаИзмеренияВладельца
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.ЕдиницаИзмеренияВладельца = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|	И НЕ ЕдиницыИзмерения.Владелец = НЕОПРЕДЕЛЕНО
	|	И НЕ ЕдиницыИзмерения.Владелец.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)";
	
	ЕстьОшибки = Ложь;
	КоличествоОбработанных = 0;
	
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаписьОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗаписьОбъект.Заблокировать();

			ЗаписьОбъект.ЕдиницаИзмеренияВладельца = Выборка.ЕдиницаИзмеренияВладельца;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаписьОбъект);
			ЗаписьОбъект.Разблокировать();
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		КонецЦикла;
		
	Исключение
		
		ЕстьОшибки = Истина;
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение обработчика ЗаполнитьЕдиницуИзмеренияВладельца'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,, Выборка.Ссылка, ТекстСообщения);
		
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки И КоличествоОбработанных < 500;
	
КонецПроцедуры

Процедура ОбновитьОтборыВСпискеСобытия() Экспорт
	
	Попытка
		
		ИмяКлючаОбъекта = "ДокументСобытиеФормаФормаСписка";
		КлючНастроек = "ДокументСобытиеФормаФормаСписка_ДанныеОтборов";
		ДанныеОтборов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючНастроек);
		
		ОтборыОбновлены = Ложь;
		
		Если ТипЗнч(ДанныеОтборов) = Тип("ТаблицаЗначений") Тогда
			ОтборыДляИсключения = Новый Массив;
			ОтборыДляИсключения.Добавить("Просмотрено");
			ОтборыДляИсключения.Добавить("Неотвеченный");
			Для каждого Поле Из ОтборыДляИсключения Цикл
				НайденныеСтрокиМассив = ДанныеОтборов.НайтиСтроки(Новый Структура("Поле", Поле));
				Если НайденныеСтрокиМассив.Количество() <> 0 Тогда
					ДанныеОтборов.Удалить(НайденныеСтрокиМассив[0]);
					ОтборыОбновлены = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ОтборыОбновлены Тогда
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючНастроек, ДанныеОтборов);
		КонецЕсли;
		
		ИмяКлючаОбъекта = "ДокументСобытиеФормаФормаСписка";
		КлючНастроек = "ДокументСобытиеФормаФормаСписка_ДанныеМеток";
		ДанныеМеток = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, КлючНастроек);
		
		ОтборыОбновлены = Ложь;
		
		Если ТипЗнч(ДанныеМеток) = Тип("ТаблицаЗначений") Тогда
			ОтборыДляИсключения = Новый Массив;
			ОтборыДляИсключения.Добавить("Просмотрено");
			ОтборыДляИсключения.Добавить("Неотвеченный");
			Для каждого Поле Из ОтборыДляИсключения Цикл
				НайденныеСтрокиМассив = ДанныеМеток.НайтиСтроки(Новый Структура("ИмяОтбора", Поле));
				КоличествоМеток = НайденныеСтрокиМассив.Количество();
				Если КоличествоМеток = 0 Тогда
					Продолжить;
				КонецЕсли;
				Для Счетчик = 1 По КоличествоМеток Цикл
					НайденнаяСтрока = ДанныеМеток.НайтиСтроки(Новый Структура("ИмяОтбора", Поле))[0];
					ДанныеМеток.Удалить(НайденнаяСтрока);
					ОтборыОбновлены = Истина;
				КонецЦикла;
				КонецЦикла;
		КонецЕсли;
		
		Если ОтборыОбновлены Тогда
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, КлючНастроек, ДанныеМеток);
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ОбновитьОтборыВСпискеСобытия'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыШапкаТабличнаяЧастьВДенежныхДокументах(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	РасходИзКассы.Ссылка КАК Ссылка,
		|	РасходИзКассы.Дата КАК Дата
		|ИЗ
		|	Документ.РасходИзКассы КАК РасходИзКассы
		|ГДЕ
		|	РасходИзКассы.ПоложениеСтатьи = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	РасходСоСчета.Ссылка,
		|	РасходСоСчета.Дата
		|ИЗ
		|	Документ.РасходСоСчета КАК РасходСоСчета
		|ГДЕ
		|	РасходСоСчета.ПоложениеСтатьи = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	ПоступлениеВКассу.Ссылка,
		|	ПоступлениеВКассу.Дата
		|ИЗ
		|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
		|ГДЕ
		|	ПоступлениеВКассу.ПоложениеСтатьи = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	ПоступлениеНаСчет.Ссылка,
		|	ПоступлениеНаСчет.Дата
		|ИЗ
		|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
		|ГДЕ
		|	ПоступлениеНаСчет.ПоложениеСтатьи = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	ПлатежноеПоручение.Ссылка,
		|	ПлатежноеПоручение.Дата
		|ИЗ
		|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|ГДЕ
		|	ПлатежноеПоручение.ПоложениеСтатьи = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбработчика.ОбработкаЗавершена = Истина;
		Возврат;
	Иначе
		ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеНаСчет") Тогда
			ИмяРеквизитаПодразделение = "ПодразделениеЗатраты";
		Иначе
			ИмяРеквизитаПодразделение = "Подразделение";
		КонецЕсли;
	
		Если	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
			ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата
			ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Зарплата Тогда
			
			ДокументОбъект.ПоложениеСтатьи = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
			
			Если ДокументОбъект.ВыплатаЗаработнойПлаты.Количество() <= 1 Тогда
				
				ДокументОбъект.ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
				ДокументОбъект.ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
				
				Если ДокументОбъект.ВыплатаЗаработнойПлаты.Количество() = 1 Тогда
					Если НЕ ЗначениеЗаполнено(ДокументОбъект.Проект) Тогда
						ДокументОбъект.Проект = ДокументОбъект.ВыплатаЗаработнойПлаты[0].Проект;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизитаПодразделение]) Тогда
						ДокументОбъект[ИмяРеквизитаПодразделение] = ДокументОбъект.ВыплатаЗаработнойПлаты[0].Подразделение;
					КонецЕсли;
				КонецЕсли;
					
			Иначе
				
				Проекты = Новый Массив;
				Подразделения = Новый Массив;
				
				Для каждого СтрокаТЧ Из ДокументОбъект.ВыплатаЗаработнойПлаты Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Проект) Тогда
						СтрокаТЧ.Проект = ДокументОбъект.Проект;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Подразделение) Тогда
						СтрокаТЧ.Подразделение = ДокументОбъект[ИмяРеквизитаПодразделение];
					КонецЕсли;
					
					Проекты.Добавить(СтрокаТЧ.Проект);
					Подразделения.Добавить(СтрокаТЧ.Подразделение);
					
				КонецЦикла;
				
				Проекты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Проекты);
				Подразделения = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Подразделения);
				
				Если Проекты.Количество() > 1 Тогда
					ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
				Иначе
					ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
				КонецЕсли;
				
				ДокументОбъект.ПоложениеПроекта = ПоложениеПроекта;
				
				Если Подразделения.Количество() > 1 Тогда
					ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
				Иначе
					ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
				КонецЕсли;
				
				ДокументОбъект.ПоложениеПодразделения = ПоложениеПодразделения;
				
			КонецЕсли;
			
		Иначе
			
			Если ДокументОбъект.РасшифровкаПлатежа.Количество() <= 1 Тогда
				
				ДокументОбъект.ПоложениеСтатьи = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
				ДокументОбъект.ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
				ДокументОбъект.ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
				
				Если ДокументОбъект.РасшифровкаПлатежа.Количество() = 1 Тогда
					Если НЕ ЗначениеЗаполнено(ДокументОбъект.Проект) Тогда
						ДокументОбъект.Проект = ДокументОбъект.РасшифровкаПлатежа[0].Проект;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизитаПодразделение]) Тогда
						ДокументОбъект[ИмяРеквизитаПодразделение] = ДокументОбъект.РасшифровкаПлатежа[0].Подразделение;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДокументОбъект.Статья) Тогда
						ДокументОбъект.Статья = ДокументОбъект.РасшифровкаПлатежа[0].СтатьяДДС;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Проекты = Новый Массив;
				Подразделения = Новый Массив;
				Статьи = Новый Массив;
				
				Для каждого СтрокаТЧ Из ДокументОбъект.РасшифровкаПлатежа Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Проект) Тогда
						СтрокаТЧ.Проект = ДокументОбъект.Проект;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Подразделение) Тогда
						СтрокаТЧ.Подразделение = ДокументОбъект[ИмяРеквизитаПодразделение];
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтатьяДДС) Тогда
						СтрокаТЧ.СтатьяДДС = ДокументОбъект.Статья;
					КонецЕсли;
					
					Проекты.Добавить(СтрокаТЧ.Проект);
					Подразделения.Добавить(СтрокаТЧ.Подразделение);
					Статьи.Добавить(СтрокаТЧ.СтатьяДДС);
					
				КонецЦикла;
				
				Проекты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Проекты);
				Подразделения = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Подразделения);
				Статьи = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Статьи);
				
				Если Проекты.Количество() > 1 Тогда
					ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
				Иначе
					ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
				КонецЕсли;
				
				Если Подразделения.Количество() > 1 Тогда
					ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
				Иначе
					ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
				КонецЕсли;
				
				Если Статьи.Количество() > 1 Тогда
					ПоложениеСтатьи = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
				Иначе
					ПоложениеСтатьи = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
				КонецЕсли;
				
				ДокументОбъект.ПоложениеПроекта = ПоложениеПроекта;
				ДокументОбъект.ПоложениеПодразделения = ПоложениеПодразделения;
				ДокументОбъект.ПоложениеСтатьи = ПоложениеСтатьи;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,, РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЗадачиПоСдачиАлкогольнойДекларации() Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	КоличествоОбработанных = 0; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КалендарьПодготовкиОтчетности.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|ГДЕ
	|	КалендарьПодготовкиОтчетности.Задача = &Задача
	|	И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов >= &ДатаНачалаДокументов";
	
	Запрос.УстановитьПараметр("ДатаНачалаДокументов", НачалоГода(ТекущаяДата()));
	Запрос.УстановитьПараметр("Задача", Справочники.ЗадачиКалендаряПодготовкиОтчетности.Декларация12);
	
	Попытка
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			
			ЗадачаКалендаря = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЗадачаКалендаря.Заблокировать();
			
			ЗадачаКалендаря.Наименование = СтрЗаменить(ЗадачаКалендаря.Наименование, "12", "8"); 
			ЗадачаКалендаря.ПредставлениеВКалендаре = СтрЗаменить(ЗадачаКалендаря.ПредставлениеВКалендаре, "12", "8"); 
			ЗадачаКалендаря.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Декларация8;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗадачаКалендаря, Ложь, Ложь);
			ЗадачаКалендаря.Разблокировать();
			КоличествоОбработанных = КоличествоОбработанных + 1;  
			
		КонецЦикла;
		
		
	Исключение
		
		ЕстьОшибки = Истина;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ОбновитьЗадачиПоСдачиАлкогольнойДекларации'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецПопытки;   	                                       	
			
КонецПроцедуры

#Область НоваяФормаБаннеров

Процедура ЗаменитьФормуИнформационногоЦентраНаНачальномЭкране() Экспорт
	
	Попытка
		
		ОтборНастроек		= Новый Структура();
		ОтборНастроек.Вставить("КлючОбъекта","Общее/НастройкиНачальнойСтраницы");
		ОтборНастроек.Вставить("КлючНастроек","");
		
		НастройкиПередОчисткой = "Общее/НастройкиНачальнойСтраницыПередОчисткой";	
		ОтборНастроекПередОчисткой = Новый Структура();
		ОтборНастроекПередОчисткой.Вставить("КлючОбъекта",НастройкиПередОчисткой);
		ОтборНастроекПередОчисткой.Вставить("КлючНастроек","");

		НастройкиПользователей 	= ХранилищеСистемныхНастроек.Выбрать(ОтборНастроек);
		СохраненныеНастройки	= ХранилищеСистемныхНастроек.Выбрать(ОтборНастроекПередОчисткой);
		
		Пока НастройкиПользователей.Следующий() Цикл
			
			СоставФормПользователя = НастройкиПользователей.Настройки.ПолучитьСоставФорм();
			
			Если НЕ ТребуетсяОбновитьНастройкиНачальнойСтраницы(СоставФормПользователя) Тогда
				Продолжить;	
			КонецЕсли;
			
			НачальнаяСтраница = Новый НастройкиНачальнойСтраницы;
			НачальнаяСтраница.УстановитьСоставФорм(СоставФормПользователя);
					
			УстановитьПривилегированныйРежим(Истина);
			ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы",
			"",
			НачальнаяСтраница,,НастройкиПользователей.Пользователь);
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЦикла;
		
		Пока СохраненныеНастройки.Следующий() Цикл
			
			СоставФормПользователя = СохраненныеНастройки.Настройки.Получить().ПолучитьСоставФорм();
			
			Если НЕ ТребуетсяОбновитьНастройкиНачальнойСтраницы(СоставФормПользователя) Тогда
				Продолжить;	
			КонецЕсли;
								
			НачальнаяСтраница = Новый НастройкиНачальнойСтраницы;
			НачальнаяСтраница.УстановитьСоставФорм(СоставФормПользователя);
			СохраняемыеНастройки = Новый ХранилищеЗначения(НачальнаяСтраница);
		
			УстановитьПривилегированныйРежим(Истина);
			ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницыПередОчисткой",
				"",
			СохраняемыеНастройки);
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЦикла;
				
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ЗаменитьФормуИнформационногоЦентраНаНачальномЭкране'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция ТребуетсяОбновитьНастройкиНачальнойСтраницы(СоставФормПользователя)
	
	ТребуетсяОбновитьНастройки 	= Ложь;
	ФормаБаннеры				= "ОбщаяФорма.НовостиИИнформационныйЦентр";
	ФормаИнформационныйЦентр 	= "Обработка.ИнформационныйЦентр.Форма.ИнформационныйЦентр";
	
	ИндексЦентраЛевый = ИндексФормыВКолонке(СоставФормПользователя.ЛеваяКолонка,
		ФормаБаннеры, ФормаИнформационныйЦентр);
		
	Если ИндексЦентраЛевый <> Неопределено
		И СоставФормПользователя.ЛеваяКолонка.Найти(ФормаБаннеры) = Неопределено Тогда
		
		ТребуетсяОбновитьНастройки = Истина;
		СоставФормПользователя.ЛеваяКолонка.Удалить(ИндексЦентраЛевый);
		СоставФормПользователя.ЛеваяКолонка.Вставить(ИндексЦентраЛевый, ФормаБаннеры);
		
	КонецЕсли;
	
	ИндексЦентраПравый = ИндексФормыВКолонке(СоставФормПользователя.ПраваяКолонка,
		ФормаБаннеры, ФормаИнформационныйЦентр);
	Если ИндексЦентраПравый <> Неопределено
			И СоставФормПользователя.ПраваяКолонка.Найти(ФормаБаннеры) = Неопределено Тогда
		
		ТребуетсяОбновитьНастройки = Истина;
		СоставФормПользователя.ПраваяКолонка.Удалить(ИндексЦентраПравый);
		СоставФормПользователя.ПраваяКолонка.Вставить(ИндексЦентраПравый, ФормаБаннеры);
		
	КонецЕсли;
	
	Возврат ТребуетсяОбновитьНастройки;
	
КонецФункции

Функция ИндексФормыВКолонке(СоставФорм, ФормаБаннеры, ФормаИнформационныйЦентр)
		
	ИндексФормыИнформационногоЦентра = СоставФорм.Найти(ФормаИнформационныйЦентр);
	Возврат ИндексФормыИнформационногоЦентра;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеПустыхСерий

Процедура ОбработатьПустыеСерии(Параметры) Экспорт
	
	#Область Справочники
	
	ТекстЗапросаСправочники =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	(ШтрихкодыУпаковокТоваров.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ИЛИ ШтрихкодыУпаковокТоваров.Серия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваровВложенныеТовары.Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеТовары КАК ШтрихкодыУпаковокТоваровВложенныеТовары
	|ГДЕ
	|	(ШтрихкодыУпаковокТоваровВложенныеТовары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ИЛИ ШтрихкодыУпаковокТоваровВложенныеТовары.Серия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка))";
	
	#КонецОбласти
	
	#Область Документы
	
	ТекстЗапросаДокументы =
	"ВЫБРАТЬ
	|	МаркировкаТоваровИСМП.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК МаркировкаТоваровИСМП
	|ГДЕ
	|	(МаркировкаТоваровИСМП.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ИЛИ МаркировкаТоваровИСМП.Серия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремаркировкаТоваровГИСМТовары.Ссылка
	|ИЗ
	|	Документ.ПеремаркировкаТоваровГИСМ.Товары КАК ПеремаркировкаТоваровГИСМТовары
	|ГДЕ
	|	(ПеремаркировкаТоваровГИСМТовары.СписываемаяСерия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ИЛИ ПеремаркировкаТоваровГИСМТовары.СписываемаяСерия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка))";
	
	ШаблонОбъединить = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ШаблонЗапросаТЧ = "
	|ВЫБРАТЬ
	|	%2.Ссылка
	|ИЗ
	|	%1 КАК %2
	|ГДЕ
	|	%2.Серия = Значение(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		ИЛИ %2.Серия = Значение(Справочник.ПартииНоменклатуры.ПустаяСсылка)";
	
	// Дополним запрос выборкой из табличной части "Товары".
	ДокументыКОбработке = Новый Массив;
	ДокументыКОбработке.Добавить(Документы.АктПостановкиНаБалансЕГАИС);
	ДокументыКОбработке.Добавить(Документы.АктСписанияЕГАИС);
	ДокументыКОбработке.Добавить(Документы.ВозвратИзРегистра2ЕГАИС);
	ДокументыКОбработке.Добавить(Документы.ВозвратВОборотИСМП);
	ДокументыКОбработке.Добавить(Документы.ВыводИзОборотаИСМП);
	ДокументыКОбработке.Добавить(Документы.МаркировкаТоваровИСМП);
	ДокументыКОбработке.Добавить(Документы.ОтгрузкаТоваровИСМП);
	ДокументыКОбработке.Добавить(Документы.ПередачаВРегистр2ЕГАИС);
	ДокументыКОбработке.Добавить(Документы.ПеремаркировкаТоваровГИСМ);
	ДокументыКОбработке.Добавить(Документы.ПриемкаТоваровИСМП);
	ДокументыКОбработке.Добавить(Документы.СписаниеКодовМаркировкиИСМП);
	ДокументыКОбработке.Добавить(Документы.ТТНВходящаяЕГАИС);
	ДокументыКОбработке.Добавить(Документы.ТТНИсходящаяЕГАИС);
	ДокументыКОбработке.Добавить(Документы.ЧекЕГАИС);
	ДокументыКОбработке.Добавить(Документы.ЧекЕГАИСВозврат);
	
	Счетчик = 1;
	Для Каждого ДокументКОбработке Из ДокументыКОбработке Цикл
		ИмяДокумента = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументКОбработке.ПустаяСсылка());
		ТекстЗапросаДокументы = ТекстЗапросаДокументы + ШаблонОбъединить + СтрШаблон(ШаблонЗапросаТЧ, ИмяДокумента + ".Товары", "ТаблицаТовары" + Счетчик);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	// Дополним запрос выборкой из табличной части "Серии".
	ДокументыКОбработке = Новый Массив;
	ДокументыКОбработке.Добавить(Документы.МаркировкаТоваровГИСМ);
	
	Счетчик = 1;
	Для Каждого ДокументКОбработке Из ДокументыКОбработке Цикл
		ИмяДокумента = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументКОбработке.ПустаяСсылка());
		ТекстЗапросаДокументы = ТекстЗапросаДокументы + ШаблонОбъединить + СтрШаблон(ШаблонЗапросаТЧ, ИмяДокумента + ".Серии", "ТаблицаСерии" + Счетчик);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	// Дополним запрос выборкой из табличной части "СерииКиЗ".
	ДокументыКОбработке = Новый Массив;
	ДокументыКОбработке.Добавить(Документы.МаркировкаТоваровГИСМ);
	ДокументыКОбработке.Добавить(Документы.ПеремаркировкаТоваровГИСМ);
	
	Счетчик = 1;
	Для Каждого ДокументКОбработке Из ДокументыКОбработке Цикл
		ИмяДокумента = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументКОбработке.ПустаяСсылка());
		ТекстЗапросаДокументы = ТекстЗапросаДокументы + ШаблонОбъединить + СтрШаблон(ШаблонЗапросаТЧ, ИмяДокумента + ".СерииКиЗ", "ТаблицаСерииКиЗ" + Счетчик);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	#КонецОбласти
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ОбъектыДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	(%1) КАК ОбъектыДляОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса,
		ТекстЗапросаСправочники + ШаблонОбъединить + ТекстЗапросаДокументы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		
	Иначе
		
		// Шаблоны реквизитов шапки.
		ПустойМассив = Новый Массив;
		ШаблонСерия = Новый Массив;
		ШаблонСерия.Добавить("Серия");
		
		ШаблонСерияСписываемаяСерия = Новый Массив;
		ШаблонСерияСписываемаяСерия.Добавить("Серия");
		ШаблонСерияСписываемаяСерия.Добавить("СписываемаяСерия");
		
		// Шаблоны обработки табличных частей.
		ШаблонТовары = Новый Соответствие;
		ШаблонТовары.Вставить("Товары", ШаблонСерия);
		
		ШаблонВложенныеТовары = Новый Соответствие;
		ШаблонВложенныеТовары.Вставить("ВложенныеТовары", ШаблонСерия);
		
		ШаблонСерииСерииКиЗ = Новый Соответствие;
		ШаблонСерииСерииКиЗ.Вставить("Серии", ШаблонСерия);
		ШаблонСерииСерииКиЗ.Вставить("СерииКиЗ", ШаблонСерия);
		
		ШаблонТоварыСерииКиЗ = Новый Соответствие;
		ШаблонТоварыСерииКиЗ.Вставить("Товары", ШаблонСерияСписываемаяСерия);
		ШаблонТоварыСерииКиЗ.Вставить("СерииКиЗ", ШаблонСерия);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ШтрихкодыУпаковокТоваров") Тогда
				ЗаполнитьПустыеСерии(Выборка, ШаблонСерия, ШаблонВложенныеТовары);
			ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
				ЗаполнитьПустыеСерии(Выборка, ШаблонСерия, ШаблонТовары);
			ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.МаркировкаТоваровГИСМ") Тогда
				ЗаполнитьПустыеСерии(Выборка, ПустойМассив, ШаблонСерииСерииКиЗ);
			ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ПеремаркировкаТоваровГИСМ") Тогда
				ЗаполнитьПустыеСерии(Выборка, ПустойМассив, ШаблонТоварыСерииКиЗ);
			Иначе
				ЗаполнитьПустыеСерии(Выборка, ПустойМассив, ШаблонТовары);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПустыеСерии(Выборка, РеквизитыШапки, ТабличныеЧасти)
	
	ПустыеСерии = Новый Массив;
	ПустыеСерии.Добавить(Справочники.СерииНоменклатуры.ПустаяСсылка());
	ПустыеСерии.Добавить(Справочники.ПартииНоменклатуры.ПустаяСсылка());
	
	НачатьТранзакцию();
	
	Попытка
		
		МетаданныеОбъекта = Выборка.Ссылка.Метаданные();
		ИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ИмяОбъекта);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ОбъектИБ = Выборка.Ссылка.ПолучитьОбъект();
		Если ОбъектИБ = Неопределено Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Заполним реквизиты шапки.
		Для Каждого РеквизитШапки Из РеквизитыШапки Цикл
			Если НЕ ПустыеСерии.Найти(ОбъектИБ[РеквизитШапки]) = Неопределено Тогда
				ОбъектИБ[РеквизитШапки] = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		// Заполним реквизиты ТЧ.
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			ИмяТЧ = ТабличнаяЧасть.Ключ;
			Колонки = ТабличнаяЧасть.Значение;
			Для Каждого СтрокаТЧ Из ОбъектИБ[ИмяТЧ] Цикл
				Для Каждого ИмяКолонки Из Колонки Цикл
					Если НЕ ПустыеСерии.Найти(СтрокаТЧ[ИмяКолонки]) = Неопределено Тогда
						СтрокаТЧ[ИмяКолонки] = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектИБ);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru = 'Не удалось обработать объект: %Ссылка% по причине: %Причина%';
								|en = 'Не удалось обработать объект: %Ссылка% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеОбъекта,
			Выборка.Ссылка,
			ТекстСообщения);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

Процедура УдалениеУстаревшихВариантовОтчетов() Экспорт
	
	УстаревшиеВарианты = КлючиУстаревшихВариантовОтчетов();
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УстаревшиеВарианты", УстаревшиеВарианты);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВариантыОтчетов.Ссылка КАК Ссылка,
		|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.КлючВарианта В(&УстаревшиеВарианты)
		|	И НЕ ВариантыОтчетов.Пользовательский";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если УстаревшиеВарианты.Найти(Выборка.КлючВарианта) = Неопределено Тогда
				// Требуется регистрозависимый поиск
				Продолжить;
			КонецЕсли;
			Вариант = Выборка.Ссылка.ПолучитьОбъект();
			ОбновлениеИнформационнойБазы.УдалитьДанные(Вариант);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика УдалениеУстаревшихВариантовОтчетов'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалениеУстаревшихПредопределенныхВариантовОтчетов() Экспорт
	
	УстаревшиеВарианты = КлючиУстаревшихВариантовОтчетов();
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УстаревшиеВарианты", УстаревшиеВарианты);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПредопределенныеВариантыОтчетов.Ссылка КАК Ссылка,
		|	ПредопределенныеВариантыОтчетов.КлючВарианта КАК КлючВарианта
		|ИЗ
		|	Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеВариантыОтчетов
		|ГДЕ
		|	ПредопределенныеВариантыОтчетов.КлючВарианта В(&УстаревшиеВарианты)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если УстаревшиеВарианты.Найти(Выборка.КлючВарианта) = Неопределено Тогда
				// Требуется регистрозависимый поиск
				Продолжить;
			КонецЕсли;
			Вариант = Выборка.Ссылка.ПолучитьОбъект();
			ОбновлениеИнформационнойБазы.УдалитьДанные(Вариант);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика УдалениеУстаревшихВариантовОтчетов'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Функция КлючиУстаревшихВариантовОтчетов()
		
	УстаревшиеВарианты = Новый Массив;
	// АПК:1036-выкл - удаление устаревших вариантов отчетов, ключи которых содержат синтаксические ошибки
	УстаревшиеВарианты.Добавить("ABCXYZанализПродажПоНоменклатуре");
	УстаревшиеВарианты.Добавить("ABCXYZанализПродажПоПокупателям");
	УстаревшиеВарианты.Добавить("ABCXYZанализПродажПоМенеджерам");
	УстаревшиеВарианты.Добавить("ABCXYZанализПродажПоКатегориямНоменклатуры");
	УстаревшиеВарианты.Добавить("ABCанализПродажПоНоменклатуре");
	УстаревшиеВарианты.Добавить("ABCанализПродажПоПокупателям");
	УстаревшиеВарианты.Добавить("ABCанализПродажПоМенеджерам");
	УстаревшиеВарианты.Добавить("ABCанализПродажПоКатегориямНоменклатуры");
	// АПК:1036-вкл
	Возврат УстаревшиеВарианты;
	
КонецФункции

Процедура РеструктуризацияНастроекФормыСпискаНоменклатуры(ПараметрыОбработчика) Экспорт
	
	ВыборкаНастроек = ХранилищеСистемныхНастроек.Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		
		// Реструктуризация настроек
		
		// Получим имена необходимых ключей объектов
		ТаблицаИменКлючей = Новый ТаблицаЗначений;
		ТаблицаИменКлючей.Колонки.Добавить("КлючОбъекта");
		
		Пока ВыборкаНастроек.Следующий() Цикл
			
			Если СтрНайти(ВыборкаНастроек.КлючОбъекта, "СписокНоменклатураОбщиеНастройки") > 0 Тогда
				
				НоваяСтрока = ТаблицаИменКлючей.Добавить();
				НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
				
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(ВыборкаНастроек.КлючОбъекта, "СписокНоменклатураФормаВыбораОбщая") > 0 Тогда
				
				НоваяСтрока = ТаблицаИменКлючей.Добавить();
				НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
				
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(ВыборкаНастроек.КлючОбъекта, "СписокНоменклатура") > 0 Тогда
				
				НоваяСтрока = ТаблицаИменКлючей.Добавить();
				НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
				
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаИменКлючей.Свернуть("КлючОбъекта");
		
		// Обойдем настройки по пользователю и ключу объекта
		
		СписокНастроек = Новый ТаблицаЗначений;
		СписокНастроек.Колонки.Добавить("ЗначениеНастройки");
		СписокНастроек.Колонки.Добавить("ИмяНастройки");
		
		СтруктураОтбора = Новый Структура("Пользователь, КлючОбъекта");
		
		СписокПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
		
		Для Каждого ПользовательБазы Из СписокПользователей Цикл
			
			Для Каждого СтрокаТаблицыКлючей Из ТаблицаИменКлючей Цикл
				
				СтруктураОтбора.Пользователь = ПользовательБазы.Имя;
				СтруктураОтбора.КлючОбъекта = СтрокаТаблицыКлючей.КлючОбъекта;
				
				ВыборкаНастроекПоПользователюИКлючу = ХранилищеСистемныхНастроек.Выбрать(СтруктураОтбора);
				
				Если СтрокаТаблицыКлючей.КлючОбъекта = "СписокНоменклатураОбщиеНастройки" Тогда
					
					СписокНастроекДополнительных = Новый ТаблицаЗначений;
					СписокНастроекДополнительных.Колонки.Добавить("ЗначениеНастройки");
					СписокНастроекДополнительных.Колонки.Добавить("ИмяНастройки");
					
					Пока ВыборкаНастроекПоПользователюИКлючу.Следующий() Цикл
						
						ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(СтрокаТаблицыКлючей.КлючОбъекта, ВыборкаНастроекПоПользователюИКлючу.КлючНастроек);
						
						КлючНастроек = СокрЛП(ВыборкаНастроекПоПользователюИКлючу.КлючНастроек);
						
						НачалоИмениНастройки = СтрНайти(КлючНастроек, "_");
						ДлинаИмениНастройки = СтрДлина(КлючНастроек) - НачалоИмениНастройки;
						
						ИмяНастройки = Прав(КлючНастроек, ДлинаИмениНастройки);
						
						Если ИмяНастройки = "ИнформацияПоНоменклатуре" Или ИмяНастройки = "ГруппаОтборы" Или ИмяНастройки = "ПраваяПанельСвернута" Тогда
							
							НоваяСтрокаДополнительныхНастроек = СписокНастроекДополнительных.Добавить();
							НоваяСтрокаДополнительныхНастроек.ИмяНастройки = ИмяНастройки;
							НоваяСтрокаДополнительныхНастроек.ЗначениеНастройки = ЗначениеНастройки;
							
						Иначе
							
							НоваяСтрока = СписокНастроек.Добавить();
							НоваяСтрока.ИмяНастройки = ИмяНастройки;
							НоваяСтрока.ЗначениеНастройки = ЗначениеНастройки;
							
						КонецЕсли;
						
						ХранилищеСистемныхНастроек.Удалить(ВыборкаНастроекПоПользователюИКлючу.КлючОбъекта, ВыборкаНастроекПоПользователюИКлючу.КлючНастроек, ВыборкаНастроекПоПользователюИКлючу.Пользователь);
						
						Продолжить;
					КонецЦикла;
					
					Если СписокНастроек.Количество() Тогда
						ХранилищеСистемныхНастроек.Сохранить(СтрокаТаблицыКлючей.КлючОбъекта, СтрокаТаблицыКлючей.КлючОбъекта+"_" + "СписокНастроекФормы", СписокНастроек,, ПользовательБазы.Имя);
					КонецЕсли;
					
					Если СписокНастроекДополнительных.Количество() Тогда
						ХранилищеСистемныхНастроек.Сохранить("СписокНоменклатураОбщиеНастройкиДополнительные", "СписокНоменклатураОбщиеНастройкиДополнительные_СписокНастроекФормы", СписокНастроекДополнительных,, ПользовательБазы.Имя);
					КонецЕсли;
					
					СписокНастроек.Очистить();
					СписокНастроекДополнительных.Очистить();
					
					Продолжить;
					
				КонецЕсли;
				
				Пока ВыборкаНастроекПоПользователюИКлючу.Следующий() Цикл
					
					ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(СтрокаТаблицыКлючей.КлючОбъекта, ВыборкаНастроекПоПользователюИКлючу.КлючНастроек);
					
					КлючНастроек = СокрЛП(ВыборкаНастроекПоПользователюИКлючу.КлючНастроек);
					
					НачалоИмениНастройки = СтрНайти(КлючНастроек, "_");
					ДлинаИмениНастройки = СтрДлина(КлючНастроек) - НачалоИмениНастройки;
					
					ИмяНастройки = Прав(КлючНастроек, ДлинаИмениНастройки);
					
					НоваяСтрока = СписокНастроек.Добавить();
					НоваяСтрока.ИмяНастройки = ИмяНастройки;
					НоваяСтрока.ЗначениеНастройки = ЗначениеНастройки;
					
					ХранилищеСистемныхНастроек.Удалить(ВыборкаНастроекПоПользователюИКлючу.КлючОбъекта, ВыборкаНастроекПоПользователюИКлючу.КлючНастроек, ВыборкаНастроекПоПользователюИКлючу.Пользователь);
					
				КонецЦикла;
				
				Если СписокНастроек.Количество() Тогда
					ХранилищеСистемныхНастроек.Сохранить(СтрокаТаблицыКлючей.КлючОбъекта, СтрокаТаблицыКлючей.КлючОбъекта+"_" + "СписокНастроекФормы", СписокНастроек,, ПользовательБазы.Имя);
				КонецЕсли;
				
				СписокНастроек.Очистить();
				
			КонецЦикла;
			
		КонецЦикла; 
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ОбновитьНастройкиРассылокОтчетов(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РассылкиОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РассылкиОтчетов КАК РассылкиОтчетов";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока Выборка.Следующий() Цикл
			РассылкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОтчетыУНФ.ОбновитьНастройкиРассылки(РассылкаОбъект);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РассылкаОбъект);
		КонецЦикла;
		
		ПараметрыОбработчика.ОбработкаЗавершена = Истина;
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ОбновитьНастройкиРассылокОтчетов'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецПопытки;

КонецПроцедуры

Процедура ИзменениеПараметровОбменаВРегламентномЗаданииКабинетКлиента() Экспорт
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если Не ОбщегоНазначения.РазделениеВключено() Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
		|ГДЕ
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.ВариантНастройки = &ВариантНастройки";
		
		Запрос.УстановитьПараметр("ВариантНастройки", "КабинетКлиента");
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаПлановОбмена = РезультатЗапроса.Выбрать();
		
		Если ВыборкаПлановОбмена.Количество() > 0 Тогда
			
			Месяцы = Новый Массив;
			Месяцы.Добавить(1);
			Месяцы.Добавить(2);
			Месяцы.Добавить(3);
			Месяцы.Добавить(4);
			Месяцы.Добавить(5);
			Месяцы.Добавить(6);
			Месяцы.Добавить(7);
			Месяцы.Добавить(8);
			Месяцы.Добавить(9);
			Месяцы.Добавить(10);
			Месяцы.Добавить(11);
			Месяцы.Добавить(12);
			
			ДниНедели = Новый Массив;
			ДниНедели.Добавить(1);
			ДниНедели.Добавить(2);
			ДниНедели.Добавить(3);
			ДниНедели.Добавить(4);
			ДниНедели.Добавить(5);
			ДниНедели.Добавить(6);
			ДниНедели.Добавить(7);
			
			ПятьМинутВСекундах = 300;
			
			РасписаниеСинхронизации = Новый РасписаниеРегламентногоЗадания;
			РасписаниеСинхронизации.ДниНедели   = ДниНедели;
			РасписаниеСинхронизации.Месяцы      = Месяцы;
			РасписаниеСинхронизации.ПериодПовтораВТечениеДня = ПятьМинутВСекундах;
			РасписаниеСинхронизации.ПериодПовтораДней        = 1; // Каждый день.
			
		КонецЕсли;
		
		Пока ВыборкаПлановОбмена.Следующий() Цикл
			
			КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обмен данными с внешней системой (%1)'"),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаПлановОбмена.Ссылка, "Код"));
			
			Задания = ОчередьЗаданий.ПолучитьЗадания(Новый Структура("Ключ", КлючЗадания));
			
			Для каждого Задание Из Задания Цикл
				
				ПараметрыЗадания = Задание.Параметры;
				
				НужноИзменитьЗадание = Ложь;
				Для каждого ПараметрыОбмена Из ПараметрыЗадания Цикл
					Если ТипЗнч(ПараметрыОбмена) = Тип("Структура") И ПараметрыОбмена.Свойство("ИнтервалОжиданияНаСервере") И ПараметрыОбмена.ИнтервалОжиданияНаСервере < 10 Тогда
						НужноИзменитьЗадание = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НужноИзменитьЗадание Тогда
					
					ПараметрыЗадания = Новый Структура;
					ПараметрыЗадания.Вставить("Использование", Истина);
					ПараметрыЗадания.Вставить("ИмяМетода",     "ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы");
					
					ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
					ПараметрыОбмена.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.WS;
					ПараметрыОбмена.ДлительнаяОперация = Истина;
					ПараметрыОбмена.ДлительнаяОперацияРазрешена = Истина;
					ПараметрыОбмена.ВыполнятьЗагрузку = Истина;
					ПараметрыОбмена.ВыполнятьВыгрузку = Истина;
					ПараметрыОбмена.ИнтервалОжиданияНаСервере = 10;
					
					ПараметрыЗадания.Вставить("Параметры", Новый Массив);
					ПараметрыЗадания.Параметры.Добавить(ВыборкаПлановОбмена.Ссылка);
					ПараметрыЗадания.Параметры.Добавить(ПараметрыОбмена);
					ПараметрыЗадания.Параметры.Добавить(Ложь);
					
					ПараметрыЗадания.Вставить("Ключ",       КлючЗадания);
					ПараметрыЗадания.Вставить("Расписание", РасписаниеСинхронизации);
					
					ОчередьЗаданий.ИзменитьЗадание(Задание.Идентификатор, ПараметрыЗадания);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ИзменениеПараметровОбменаВРегламентномЗаданииКабинетКлиента'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

#Область ПользовательскиеВариантыОтчетов 

Процедура ОбновитьПользовательскиеВариантыОтчетов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """") КАК Теги,
	|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Рекомендуемый, ЛОЖЬ) КАК Рекомендуемый
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетовУНФ КАК НастройкиВариантовОтчетовУНФ
	|		ПО ВариантыОтчетов.Ссылка = НастройкиВариантовОтчетовУНФ.Вариант
	|			И (НастройкиВариантовОтчетовУНФ.Идентификатор = """")
	|ГДЕ
	|	НЕ ВариантыОтчетов.ПометкаУдаления
	|	И ВариантыОтчетов.Пользовательский";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОбновитьНастройкиВариантаОтчета(ВариантОбъект);
			ОбновитьПодсистемыВариантаОтчета(ВариантОбъект, Выборка.Теги, Выборка.Рекомендуемый);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВариантОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ИмяСобытия = СтрШаблон(НСтр("ru = 'Обновление настроек пользовательского варианта отчетов ""%1""'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), Выборка.Ссылка);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьНастройкиВариантаОтчета(ВариантОбъект)
	
	Если НЕ ВариантОбъект.Пользовательский Тогда
		Возврат;	
	КонецЕсли;
	Если ТипЗнч(ВариантОбъект.Отчет) <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Возврат;	
	КонецЕсли;
	ОтчетМетаданные = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ВариантОбъект.Отчет);
	Если ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОтчетМенеджер = Отчеты[ОтчетМетаданные.Имя];
	СхемаКД = ОтчетМенеджер.ПолучитьМакет(ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных.Имя);
	Настройки = ВариантОбъект.Настройки.Получить();
	Если ТипЗнч(Настройки) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВариантОбъект.Родитель) И СхемаКД.ВариантыНастроек.Количество() > 0 Тогда
		ВариантОбъект.Родитель = ПоставляемыйВариантОтчета(ВариантОбъект.Отчет, СхемаКД.ВариантыНастроек[0].Имя);
	КонецЕсли;
	
	ПараметрСтПериод = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СтПериод"));
	ПараметрПериод = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	ПараметрНачалоПериода = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ПараметрКонецПериода = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если НЕ ВПользовательскихНастройках(ПараметрСтПериод) И НЕ ВПользовательскихНастройках(ПараметрПериод) 
		И НЕ ВПользовательскихНастройках(ПараметрНачалоПериода)И НЕ ВПользовательскихНастройках(ПараметрКонецПериода) Тогда
		// Нет периода в пользовательских настройках
		Если ПараметрСтПериод <> Неопределено И ПараметрДоступен(ПараметрСтПериод, СхемаКД) Тогда
			ПараметрСтПериод.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
		ИначеЕсли ПараметрПериод <> Неопределено И ТипЗнч(ПараметрПериод.Значение) = Тип("СтандартныйПериод") 
			 И ПараметрДоступен(ПараметрПериод, СхемаКД) Тогда
			ПараметрПериод.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
		ИначеЕсли ПараметрКонецПериода <> Неопределено И ПараметрДоступен(ПараметрКонецПериода, СхемаКД) Тогда
			Если ПараметрНачалоПериода <> Неопределено И ПараметрДоступен(ПараметрНачалоПериода, СхемаКД) Тогда
				ПараметрНачалоПериода.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			ПараметрКонецПериода.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
		ИначеЕсли ПараметрПериод <> Неопределено И ТипЗнч(ПараметрПериод.Значение) = Тип("Дата") 
			 И ПараметрДоступен(ПараметрПериод, СхемаКД) Тогда
			ПараметрПериод.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	// Отображение доступных параметров данных
	Для каждого ЭлементПараметр Из Настройки.ПараметрыДанных.Элементы Цикл
		Если НЕ ПустаяСтрока(ЭлементПараметр.ИдентификаторПользовательскойНастройки) Тогда
			Продолжить;	
		КонецЕсли;
		Если ЭлементПараметр.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			ЭлементПараметр.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	// Отображение доступных отборов
	Для каждого ЭлементОтбор Из Настройки.Отбор.Элементы Цикл
		Если НЕ ПустаяСтрока(ЭлементОтбор.ПредставлениеПользовательскойНастройки)
			И СтрНайти(ЭлементОтбор.ПредставлениеПользовательскойНастройки, "ОтметкаФильтра") > 0 Тогда
			// Сброс служебного представления отборов
			ЭлементОтбор.ПредставлениеПользовательскойНастройки = "";
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
			И НЕ ПустаяСтрока(ЭлементОтбор.ПредставлениеПользовательскойНастройки)
			И ЭлементОтбор.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
			И ПустаяСтрока(ЭлементОтбор.ИдентификаторПользовательскойНастройки) Тогда
			// Группа фильтров с общим представлением
			ЭлементОтбор.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
		ИначеЕсли ТипЗнч(ЭлементОтбор) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементОтбор.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
			И ПустаяСтрока(ЭлементОтбор.ИдентификаторПользовательскойНастройки) Тогда
			// Элемент отбора
			ЭлементОтбор.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	ВариантОбъект.Настройки = Новый ХранилищеЗначения(Настройки);
	
КонецПроцедуры

Процедура ОбновитьПодсистемыВариантаОтчета(ВариантОбъект, Теги, Рекомендуемый)
	
	Если НЕ ВариантОбъект.Пользовательский Тогда
		Возврат;	
	КонецЕсли;
	Если ПустаяСтрока(Теги) Тогда
		Возврат;	
	КонецЕсли;
	Если СтрНайти(Теги, НСтр("ru = 'Главное'")) > 0 Тогда
		ДобавитьПодсистему(ВариантОбъект, Неопределено, Рекомендуемый); 	
	КонецЕсли;
	Если СтрНайти(Теги, НСтр("ru = 'CRM'")) > 0 Тогда
		ДобавитьПодсистему(ВариантОбъект, Метаданные.Подсистемы.CRM.Подсистемы.CRMПодраздел, Рекомендуемый); 	
	КонецЕсли;
	Если СтрНайти(Теги, НСтр("ru = 'Продажи'")) > 0 Тогда
		ДобавитьПодсистему(ВариантОбъект, Метаданные.Подсистемы.Продажи.Подсистемы.Продажи, Рекомендуемый); 	
	КонецЕсли;
	Если СтрНайти(Теги, НСтр("ru = 'Закупки'")) > 0 Тогда
		ДобавитьПодсистему(ВариантОбъект, Метаданные.Подсистемы.Закупки.Подсистемы.Закупки, Рекомендуемый); 	
	КонецЕсли;
	Если СтрНайти(Теги, НСтр("ru = 'Склад'")) > 0 Тогда
		ДобавитьПодсистему(ВариантОбъект, Метаданные.Подсистемы.Склад.Подсистемы.Склад, Рекомендуемый); 	
	КонецЕсли;
	Если СтрНайти(Теги, НСтр("ru = 'Работы'")) > 0 Тогда
		ДобавитьПодсистему(ВариантОбъект, Метаданные.Подсистемы.Работы.Подсистемы.Работы, Рекомендуемый); 	
	КонецЕсли;
	Если СтрНайти(Теги, НСтр("ru = 'Производство'")) > 0 Тогда
		ДобавитьПодсистему(ВариантОбъект, Метаданные.Подсистемы.Производство.Подсистемы.Производство, Рекомендуемый); 	
	КонецЕсли;
	Если СтрНайти(Теги, НСтр("ru = 'Деньги'")) > 0 Тогда
		ДобавитьПодсистему(ВариантОбъект, Метаданные.Подсистемы.Деньги.Подсистемы.Деньги, Рекомендуемый); 	
	КонецЕсли;
	Если СтрНайти(Теги, НСтр("ru = 'Персонал'")) > 0 Тогда
		ДобавитьПодсистему(ВариантОбъект, Метаданные.Подсистемы.Персонал.Подсистемы.Персонал, Рекомендуемый); 	
	КонецЕсли;
	Если СтрНайти(Теги, НСтр("ru = 'Зарплата'")) > 0 Тогда
		ДобавитьПодсистему(ВариантОбъект, Метаданные.Подсистемы.Персонал.Подсистемы.Зарплата, Рекомендуемый); 	
	КонецЕсли;
	Если СтрНайти(Теги, НСтр("ru = 'Компания'")) > 0 Тогда
		ДобавитьПодсистему(ВариантОбъект, Метаданные.Подсистемы.Компания.Подсистемы.Компания, Рекомендуемый); 	
	КонецЕсли;
	Если СтрНайти(Теги, НСтр("ru = 'Настройки'")) > 0 Тогда
		ДобавитьПодсистему(ВариантОбъект, Метаданные.Подсистемы.Настройки.Подсистемы.Настройки, Рекомендуемый); 	
	КонецЕсли;
	Если СтрНайти(Теги, НСтр("ru = 'Администрирование'")) > 0 Тогда
		ДобавитьПодсистему(ВариантОбъект, Метаданные.Подсистемы.Настройки.Подсистемы.Администрирование, Рекомендуемый); 	
	КонецЕсли;
	
КонецПроцедуры

Функция ВПользовательскихНастройках(Элемент)
	
	Если Элемент = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли;	     
	Если ТипЗнч(Элемент) <> Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
		Возврат Ложь;	
	КонецЕсли;
	Возврат НЕ ПустаяСтрока(Элемент.ИдентификаторПользовательскойНастройки);
	
КонецФункции

Функция ПараметрДоступен(Параметр, СхемаКД)
	
	Если НЕ ПустаяСтрока(Параметр.ИдентификаторПользовательскойНастройки) Тогда
		Возврат Ложь;	
	КонецЕсли;
	Если Параметр.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Возврат Ложь;
	КонецЕсли;
	ПараметрСхемы = СхемаКД.Параметры.Найти(Строка(Параметр.Параметр));
	Если ПараметрСхемы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат ПараметрСхемы.ВключатьВДоступныеПоля;
	
КонецФункции

Процедура ДобавитьПодсистему(ВариантОбъект, МетаданныеПодсистемы, Рекомендуемый)
	
	Если МетаданныеПодсистемы = Неопределено Тогда
		Идентификатор = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
	Иначе
		Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеПодсистемы);
	КонецЕсли;
	СтрокаРазмещения = ВариантОбъект.Размещение.Найти(Идентификатор, "Подсистема");
	Если СтрокаРазмещения = Неопределено Тогда
		СтрокаРазмещения = ВариантОбъект.Размещение.Добавить();
		СтрокаРазмещения.Подсистема = Идентификатор;
	КонецЕсли;
	СтрокаРазмещения.Важный = Рекомендуемый; 
	СтрокаРазмещения.СмТакже = Ложь; 
	
КонецПроцедуры

Функция ПоставляемыйВариантОтчета(Отчет, Ключ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчет", Отчет);
	Запрос.УстановитьПараметр("Ключ", Ключ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.КлючВарианта = &Ключ
	|	И НЕ ВариантыОтчетов.Пользовательский";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ВариантыОтчетов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти