////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции подсистемы взаиморасчетов с контрагентами:
// - для формирования движений по регистру ОплатаСчетовИЗаказов;
// - для формирования движений по регистру ОплатаДокументов;
// - для формирования движений по регистру СуммыДокументовРегламентированныйУчет;
// - для формирования движений по регистрам расчетов с покупателями и поставщиками;
// - для распределения авансов и оплат;
// - для пересчета сумм документов в разных валютах;
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Инициализирует дополнительные свойства для проведения
// 
// Параметры:
// 	Документ - ДокументСсылка - .
// 	СтруктураДополнительныеСвойства - Структура - .
// 	Отказ - Булево - .
// 	ЭтоРасчетыСПоставщиком - Булево - .
// 	СоответствиеТабличныхЧастейИРеквизитаЗаказ - Соответствие - .
// 	СоответствиеВременныхТаблицИРеквизитаЗаказ - Соответствие - .
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(Документ, СтруктураДополнительныеСвойства, Отказ,
	ЭтоРасчетыСПоставщиком, СоответствиеТабличныхЧастейИРеквизитаЗаказ = Неопределено,
	СоответствиеВременныхТаблицИРеквизитаЗаказ = Неопределено) Экспорт

	СтруктураДополнительныеСвойства.Вставить("Отказ", Отказ);
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ЭтоЗаказ");
	ПараметрыДокумента.Вставить("ЭтоОплата");
	ПараметрыДокумента.Вставить("ЭтоОтгрузка");
	ПараметрыДокумента.Вставить("ЭтоРасчетыСПоставщиком");
	ПараметрыДокумента.Вставить("ЭтоЗаказНаряд");
	ПараметрыДокумента.Вставить("ЭтоКорректировка");
	ПараметрыДокумента.Вставить("ЭтоВозвратОплаты");
	ПараметрыДокумента.Вставить("ЭтоДоставка");
	ПараметрыДокумента.Вставить("ЭтоПередачаТоваров");

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Документ, "ВалютаДокумента") Тогда
		ВалютаДокумента = Документ.ВалютаДокумента;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Документ, "ВалютаДенежныхСредств") Тогда
		ВалютаДокумента = Документ.ВалютаДенежныхСредств;
	Иначе
		ВалютаДокумента = СтруктураДополнительныеСвойства.НациональнаяВалюта;
	КонецЕсли;

	СтруктураДополнительныеСвойства.Вставить("ВалютаДокумента", ВалютаДокумента);

	ЗаполнитьКурсВалютыУчетаИРегВалюты(СтруктураДополнительныеСвойства);

	ЭтоОплата = Ложь;
	ЭтоЗаказ = Ложь;
	ЭтоЗаказНаряд = Ложь;
	ЭтоКорректировка = Ложь;
	ЭтоВозвратОплаты = Ложь;
	ЭтоЧек = Ложь;
	ЭтоДоставка = Ложь;
	ЭтоПередачаТоваров = Ложь;

	Если ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.РасходИзКассы") Тогда
		ЭтоОплата = Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику Или Документ.ВидОперации
			= Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации;
		ЭтоВозвратОплаты = Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю;
		ЭтоРасчетыСПоставщиком = Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
			ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации;
		Если Не ЭтоОплата И Не ЭтоВозвратОплаты Тогда
			СтруктураДополнительныеСвойства.Вставить("ПараметрыДокумента", ПараметрыДокумента);
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.РасходСоСчета") Тогда
		ЭтоОплата = Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Или Документ.ВидОперации
			= Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации;
		ЭтоВозвратОплаты = Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю;
		ЭтоРасчетыСПоставщиком = Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
		ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации;
		Если Не ЭтоОплата И Не ЭтоВозвратОплаты Тогда
			СтруктураДополнительныеСвойства.Вставить("ПараметрыДокумента", ПараметрыДокумента);
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
		ЭтоОплата = Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя
			Или Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации;
		ЭтоВозвратОплаты = Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика;
		ЭтоРасчетыСПоставщиком = Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика;
		Если Не ЭтоОплата И Не ЭтоВозвратОплаты Тогда
			СтруктураДополнительныеСвойства.Вставить("ПараметрыДокумента", ПараметрыДокумента);
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
		ЭтоОплата = Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя
			Или Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации;
		ЭтоВозвратОплаты = Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика;
		ЭтоРасчетыСПоставщиком = Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика;
		Если Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты
			И Документ.РасшифровкаПлатежа.Количество()
			И Документ.РасшифровкаПлатежа[0].Договор.ПереноситьУдержанныеСуммыНаРасчетыСПоставщиком Тогда
			ЭтоДоставка = Истина;
		КонецЕсли;
		Если Не ЭтоОплата И Не ЭтоВозвратОплаты Тогда
			ПараметрыДокумента.ЭтоДоставка = ЭтоДоставка;
			СтруктураДополнительныеСвойства.Вставить("ПараметрыДокумента", ПараметрыДокумента);
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
		ЭтоОплата = Документ.ВидОперации = Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя;
		ЭтоВозвратОплаты = Документ.ВидОперации = Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю;
		Если Не ЭтоОплата И Не ЭтоВозвратОплаты Тогда
			СтруктураДополнительныеСвойства.Вставить("ПараметрыДокумента", ПараметрыДокумента);
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЭтоЗаказ = Документ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
		ЭтоЗаказНаряд = Документ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ЭтоКорректировка = Истина;
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		Если Документ.ОперацияСДенежнымиСредствами Тогда
			ЭтоОплата = Истина;
		КонецЕсли;
		ЭтоЧек = Истина;
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		Если Документ.ОперацияСДенежнымиСредствами Тогда
			ЭтоВозвратОплаты = Истина;
		КонецЕсли;
		ЭтоЧек = Истина;
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		ЭтоПередачаТоваров = Истина;
		ЭтоРасчетыСПоставщиком = Истина;
	КонецЕсли;

	ПараметрыДокумента.ЭтоЗаказ = ЭтоЗаказ;
	ПараметрыДокумента.ЭтоОплата = ЭтоОплата;
	ПараметрыДокумента.ЭтоОтгрузка = Не ЭтоОплата И Не ЭтоВозвратОплаты;
	ПараметрыДокумента.ЭтоРасчетыСПоставщиком = ЭтоРасчетыСПоставщиком;
	ПараметрыДокумента.ЭтоЗаказНаряд = ЭтоЗаказНаряд;
	ПараметрыДокумента.ЭтоКорректировка = ЭтоКорректировка;
	ПараметрыДокумента.ЭтоВозвратОплаты = ЭтоВозвратОплаты;
	ПараметрыДокумента.ЭтоДоставка = ЭтоДоставка;
	ПараметрыДокумента.ЭтоПередачаТоваров = ЭтоПередачаТоваров;

	Если ПараметрыДокумента.ЭтоОтгрузка Тогда

		СтруктураДополнительныеСвойства.Вставить("КурсДокумента", Документ.Курс);
		СтруктураДополнительныеСвойства.Вставить("КратностьДокумента", Документ.Кратность);

		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Документ, "СпособЗачетаПредоплаты") Тогда
			СтруктураДополнительныеСвойства.Вставить("СпособЗачетаПредоплаты", Документ.СпособЗачетаПредоплаты);
		Иначе
			СтруктураДополнительныеСвойства.Вставить("СпособЗачетаПредоплаты",
				Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную);
		КонецЕсли;

		СтруктураДополнительныеСвойства.Вставить("СоответствиеТабличныхЧастейИРеквизитаЗаказ",
			СоответствиеТабличныхЧастейИРеквизитаЗаказ);

		Если Не СтруктураДополнительныеСвойства.Свойство("ИмяРеквизитаЗаказ") Тогда
			СтруктураДополнительныеСвойства.Вставить("ИмяРеквизитаЗаказ", "ЗаказПокупателя");
		КонецЕсли;

		Если СоответствиеВременныхТаблицИРеквизитаЗаказ <> Неопределено Тогда
			СтруктураДополнительныеСвойства.Вставить("СоответствиеВременныхТаблицИРеквизитаЗаказ",
				СоответствиеВременныхТаблицИРеквизитаЗаказ);
		КонецЕсли;

		СтруктураДополнительныеСвойства.Вставить("Договор", Документ.Договор);

	КонецЕсли;

	Если ЭтоЧек Тогда
		СтруктураДополнительныеСвойства.Вставить("Контрагент", Документ.Контрагент);
		СтруктураДополнительныеСвойства.Вставить("Договор", Документ.Договор);
	КонецЕсли;

	СтруктураДополнительныеСвойства.Вставить("ПараметрыДокумента", ПараметрыДокумента);

КонецПроцедуры

// Это операция взаиморасчетов
// 
// Параметры:
// 	ВидОперации - ПеречислениеСсылка - .
// Возвращаемое значение:
// 	Булево - признак того, что операция является взаиморасчетом.
Функция ЭтоВидОперацииВзаиморасчетов(ВидОперации) Экспорт

	МассивВидовОпераций = Новый Массив;
	МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя);
	МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя);
	МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации);
	МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации);
	МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРасходИзКассы.Поставщику);
	МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРасходСоСчета.Поставщику);
	МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации);
	МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации);

	Возврат Не (МассивВидовОпераций.Найти(ВидОперации) = Неопределено);

КонецФункции

// Возвращает пустую таблицу движений
// 
// Параметры:
// 	ИмяРегистра - Строка - .
// 	ДокументСсылка - ДокументСсылка.АвансовыйОтчет - .
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица движений:
// * СсылкаНаДокумент 
// * ПодарочныйСертификат - СправочникСсылка.Номенклатура -
// * НомерСертификата - СправочникСсылка.СерииНоменклатуры -
Функция ПолучитьПустуюТаблицуДвижений(ИмяРегистра, ДокументСсылка) Экспорт
	
	ПустаяТаблицаДвижений = Новый ТаблицаЗначений;
	
	Для Каждого Реквизит Из Метаданные.РегистрыНакопления[ИмяРегистра].Реквизиты Цикл
		ПустаяТаблицаДвижений.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Для Каждого Измерение Из Метаданные.РегистрыНакопления[ИмяРегистра].Измерения Цикл
		ПустаяТаблицаДвижений.Колонки.Добавить(Измерение.Имя, Измерение.Тип);
	КонецЦикла;
	
	Для Каждого Ресурс Из Метаданные.РегистрыНакопления[ИмяРегистра].Ресурсы Цикл
		ПустаяТаблицаДвижений.Колонки.Добавить(Ресурс.Имя, Ресурс.Тип);
	КонецЦикла;
	
	Если Метаданные.РегистрыНакопления[ИмяРегистра].ВидРегистра
		= Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
		ВидДвижения = Метаданные.РегистрыНакопления[ИмяРегистра].СтандартныеРеквизиты.ВидДвижения;
		ПустаяТаблицаДвижений.Колонки.Добавить(ВидДвижения.Имя, ВидДвижения.Тип);
	КонецЕсли;
	
	Период = Метаданные.РегистрыНакопления[ИмяРегистра].СтандартныеРеквизиты.Период;
	ПустаяТаблицаДвижений.Колонки.Добавить(Период.Имя, Период.Тип);
	
	НомерСтроки = Метаданные.РегистрыНакопления[ИмяРегистра].СтандартныеРеквизиты.НомерСтроки;
	ПустаяТаблицаДвижений.Колонки.Добавить(НомерСтроки.Имя, НомерСтроки.Тип);
	
	// Для получения реквизитов шапки будем хранить в таблице ссылку на документ движения.
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипЗнч(ДокументСсылка));
	ПустаяТаблицаДвижений.Колонки.Добавить("СсылкаНаДокумент", Новый ОписаниеТипов(МассивТипов));
	
	Возврат ПустаяТаблицаДвижений;
	
КонецФункции

// Заполняет курс валюты учета и валюты регламентированного учета
// 
// Параметры:
// 	СтруктураДополнительныеСвойства - Структура - Описание:
// * ВалютаДокумента - СправочникСсылка.Валюты -
// * Отказ - Булево -
// 	пДата - Неопределено - Описание
Процедура ЗаполнитьКурсВалютыУчетаИРегВалюты(СтруктураДополнительныеСвойства, пДата = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КурсыВалютыУчетаСрезПоследних.Курс, 1) КАК КурсВалютыУчета,
		|	ЕСТЬNULL(КурсыВалютыУчетаСрезПоследних.Кратность, 1) КАК КратностьВалютыУчета
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &КонстантаВалютаУчета) КАК КурсыВалютыУчетаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КурсыВалютыРегСрезПоследних.Курс, 1) КАК КурсРегВалюты,
		|	ЕСТЬNULL(КурсыВалютыРегСрезПоследних.Кратность, 1) КАК КратностьРегВалюты
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &КонстантаНациональнаяВалюта) КАК КурсыВалютыРегСрезПоследних";
	
	Если пДата = Неопределено Тогда
		Запрос.УстановитьПараметр("Период", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени);
	Иначе
		Запрос.УстановитьПараметр("Период", пДата);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонстантаВалютаУчета", УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета());
	Запрос.УстановитьПараметр("КонстантаНациональнаяВалюта", УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Валюта учета.
	ВыборкаДетальныеЗаписи = МассивРезультатов[0].Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтруктураДополнительныеСвойства.Вставить("КурсВалютыУчета", ?(ВыборкаДетальныеЗаписи.КурсВалютыУчета = 0, 1, ВыборкаДетальныеЗаписи.КурсВалютыУчета));
		СтруктураДополнительныеСвойства.Вставить("КратностьВалютыУчета", ?(ВыборкаДетальныеЗаписи.КратностьВалютыУчета = 0, 1, ВыборкаДетальныеЗаписи.КратностьВалютыУчета));
	Иначе
		СтруктураДополнительныеСвойства.Вставить("КурсВалютыУчета", 1);
		СтруктураДополнительныеСвойства.Вставить("КратностьВалютыУчета", 1);
	КонецЕсли;
	
	// Национальная валюта.
	ВыборкаДетальныеЗаписи = МассивРезультатов[1].Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтруктураДополнительныеСвойства.Вставить("КурсРегВалюты", ?(ВыборкаДетальныеЗаписи.КурсРегВалюты = 0, 1, ВыборкаДетальныеЗаписи.КурсРегВалюты));
		СтруктураДополнительныеСвойства.Вставить("КратностьРегВалюты", ?(ВыборкаДетальныеЗаписи.КратностьРегВалюты = 0, 1, ВыборкаДетальныеЗаписи.КратностьРегВалюты));
	Иначе
		СтруктураДополнительныеСвойства.Вставить("КурсРегВалюты", 1);
		СтруктураДополнительныеСвойства.Вставить("КратностьРегВалюты", 1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС(СтрокаТабличнойЧасти, НалогообложениеНДС) Экспорт
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Заполнить способ зачета в расшифровке платежа
// 
// Параметры:
// 	пОбъект
Процедура ЗаполнитьСпособЗачетаВРасшифровкеПлатежа(пОбъект) Экспорт
	
	Для Каждого ТекущаяСтрока Из пОбъект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(пОбъект.ДокументОснование) Тогда
			ТекущаяСтрока.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
		ИначеЕсли ТекущаяСтрока.СпособЗачета.Пустая() Тогда
			ТекущаяСтрока.СпособЗачета = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(ТекущаяСтрока.Договор, пОбъект.Контрагент, Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обработать расшифровку платежа перед записью
// 
// Параметры:
// 	пОбъект
Процедура ОбработатьРасшифровкуПлатежаПередЗаписью(пОбъект) Экспорт
	
	ЗаполнятьРеквизитыВзаиморасчетов = ЭтоВидОперацииВзаиморасчетов(пОбъект.ВидОперации);
	
	Для Каждого ТекущаяСтрока Из пОбъект.РасшифровкаПлатежа Цикл
		
		Если ТекущаяСтрока.СпособЗачета.Пустая() Тогда
			ТекущаяСтрока.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
		КонецЕсли;
		
		Если ЗаполнятьРеквизитыВзаиморасчетов Тогда
			
			Если ТекущаяСтрока.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
				
				ТекущаяСтрока.ПризнакАванса = Истина;
				ТекущаяСтрока.Заказ = Неопределено;
				
			ИначеЕсли ТекущаяСтрока.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную
				И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Документ)
				И пОбъект.Контрагент.ВестиРасчетыПоДокументам Тогда
				
				ТекущаяСтрока.ПризнакАванса = Истина;
				
			ИначеЕсли ТекущаяСтрока.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную
				И ЗначениеЗаполнено(ТекущаяСтрока.Документ)
				И пОбъект.Контрагент.ВестиРасчетыПоДокументам Тогда
				
				ТекущаяСтрока.ПризнакАванса = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущаяСтрока.Курс = 0 Тогда
			ТекущаяСтрока.Курс = 1;
		КонецЕсли;
		Если ТекущаяСтрока.Кратность = 0 Тогда
			ТекущаяСтрока.Кратность = 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Обновляет значение аналиитики в зависимости от значения реквизита ШапкаТабличнаЧасть
//
// Параметры:
//  Объект	 - ДокументОбъект - Обрабатываемый объект
//
Процедура ОбработатьРеквизитыШапкаТабличнаяЧастьПередЗаписью(Объект) Экспорт
	
	ОбновитьЗначенияВРасшифровке = Объект.ПоложениеСтатьи = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке
								ИЛИ Объект.ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке
								ИЛИ Объект.ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
								
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеНаСчет") Тогда
		ИмяРеквизитаПодразделение = "ПодразделениеЗатраты";
	Иначе
		ИмяРеквизитаПодразделение = "Подразделение";
	КонецЕсли;
	
	Если ОбновитьЗначенияВРасшифровке Тогда
		
		Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			Если Объект.ПоложениеСтатьи = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
				СтрокаРасшифровки.СтатьяДДС = Объект.Статья;
			КонецЕсли;
			Если Объект.ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
				СтрокаРасшифровки.Проект = Объект.Проект;
			КонецЕсли;
			Если Объект.ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
				СтрокаРасшифровки.Подразделение = Объект[ИмяРеквизитаПодразделение];
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата Тогда
			Для Каждого СтрокаЗаработнойПлаты Из Объект.ВыплатаЗаработнойПлаты Цикл
				Если Объект.ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
					СтрокаЗаработнойПлаты.Проект = Объект.Проект;
				КонецЕсли;
				Если Объект.ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
					СтрокаЗаработнойПлаты.Подразделение = Объект[ИмяРеквизитаПодразделение];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Запишем в шапку реквизиты табличной части для совместимости
	Если Объект.ПоложениеСтатьи = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ОбновитьАналитикуВШапке(Объект, Объект.РасшифровкаПлатежа, "Статья", "СтатьяДДС");
	КонецЕсли;
	
	Если Объект.ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата Тогда
			ТаблицаСАналитикой = Объект.ВыплатаЗаработнойПлаты;
		Иначе
			ТаблицаСАналитикой = Объект.РасшифровкаПлатежа;
		КонецЕсли;
		ОбновитьАналитикуВШапке(Объект, ТаблицаСАналитикой, "Проект", "Проект");
	КонецЕсли;
	
	Если Объект.ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата Тогда
			ТаблицаСАналитикой = Объект.ВыплатаЗаработнойПлаты;
		Иначе
			ТаблицаСАналитикой = Объект.РасшифровкаПлатежа;
		КонецЕсли;
		ОбновитьАналитикуВШапке(Объект, ТаблицаСАналитикой, ИмяРеквизитаПодразделение, "Подразделение");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет пропорциональное распределение суммы по колонке таблицы значений
//
// Параметры:
//  РаспределяемаяСумма - Число - сумма, которую надо распределить;
//  Таблица - ТаблицаЗначений - таблица для распределения;
//  ИмяКолонки - Строка - имя колонки таблицы для помещения распределяемой суммы;
//  ИмяКолонкиБазы - Строка - имя колонки таблицы с коэффициентами распределения.
//
Процедура РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяСумма, Таблица, ИмяКолонки, ИмяКолонкиБазы = "") Экспорт
	
	Если РаспределяемаяСумма <> 0 Тогда
		Если ПустаяСтрока(ИмяКолонкиБазы) Тогда
			МассивСтарыхСумм = Таблица.ВыгрузитьКолонку(ИмяКолонки);
		Иначе
			МассивСтарыхСумм = Таблица.ВыгрузитьКолонку(ИмяКолонкиБазы);
		КонецЕсли;
		МассивНовыхСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(РаспределяемаяСумма,
			МассивСтарыхСумм);
		Если МассивНовыхСумм <> Неопределено Тогда
	 		Таблица.ЗагрузитьКолонку(МассивНовыхСумм, ИмяКолонки);
		КонецЕсли; 
	Иначе
		Таблица.ЗаполнитьЗначения(0, ИмяКолонки);
	КонецЕсли;
	
КонецПроцедуры

#Область ДвиженияПоРегистру_ОплатаСчетовИЗаказов

// Формирует таблицу значений, содержащую данные для проведения по регистру ОплатаСчетовИЗаказов для заказов и счетов.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылка, СтруктураДополнительныеСвойства, МассивДоступныхОпераций) Экспорт
	
	Если МассивДоступныхОпераций <> Неопределено
		И МассивДоступныхОпераций.Найти(ДокументСсылка.ВидОперации) = Неопределено Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Если МассивДоступныхОпераций <> Неопределено
		И ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		Запрос.УстановитьПараметр("ЭтоЗаказНаряд", Истина);
	Иначе
		Запрос.УстановитьПараметр("ЭтоЗаказНаряд", Ложь);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Если Запрос.Параметры.ЭтоЗаказНаряд Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Дата КАК Период,
		|	ТаблицаДокумента.Ссылка КАК СчетНаОплату,
		|	&Организация КАК Организация,
		|	ТаблицаДокумента.СуммаДокумента КАК Сумма,
		|	0 КАК СуммаАванса,
		|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
		|	0 КАК СуммаНДС
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ТаблицаДокумента
		|ГДЕ
		|	&ЭтоЗаказНаряд
		|	И ТаблицаДокумента.Контрагент.ВестиРасчетыПоЗаказам
		|	И ТаблицаДокумента.Ссылка = &Ссылка
		|	И ТаблицаДокумента.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
		|	И ТаблицаДокумента.СуммаДокумента <> 0";
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	Иначе
		Запрос.Текст = "";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаШапка.Дата КАК Период,
	|	ВременнаяТаблицаРасчетыСПокупателями.Заказ КАК СчетНаОплату,
	|	ВременнаяТаблицаРасчетыСПокупателями.Организация КАК Организация,
	|	0 КАК Сумма,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаРасчетыСПокупателями.Заказ.ВалютаДокумента = ВременнаяТаблицаШапка.ДоговорВалютаРасчетов
	|			ТОГДА ВременнаяТаблицаРасчетыСПокупателями.СуммаВал
	|		ИНАЧЕ ВременнаяТаблицаРасчетыСПокупателями.СуммаВал * ВременнаяТаблицаРасчетыСПокупателями.Заказ.Курс / ВременнаяТаблицаРасчетыСПокупателями.Заказ.Кратность
	|	КОНЕЦ КАК СуммаАванса,
	|	ВременнаяТаблицаРасчетыСПокупателями.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблицаРасчетыСПокупателями.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПокупателями КАК ВременнаяТаблицаРасчетыСПокупателями,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	НЕ &ЭтоЗаказНаряд
	|	И ВременнаяТаблицаШапка.Контрагент.ВестиРасчетыПоЗаказам
	|	И ВременнаяТаблицаРасчетыСПокупателями.ЭтоОплатаЗаказа
	|	И ВременнаяТаблицаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ВременнаяТаблицаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)";
	
	Если Запрос.Параметры.ЭтоЗаказНаряд Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|	ВременнаяТаблицаШапка.Дата КАК Дата,
		|	ВременнаяТаблицаШапка.Ссылка КАК Ссылка,
		|	ВременнаяТаблицаРасчетыСПокупателями.Организация КАК Организация,
		|	0 КАК Сумма,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаШапка.ВалютаДокумента = ВременнаяТаблицаШапка.ДоговорВалютаРасчетов
		|			ТОГДА ВременнаяТаблицаРасчетыСПокупателями.СуммаВал
		|		ИНАЧЕ ВременнаяТаблицаРасчетыСПокупателями.СуммаВал * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность
		|	КОНЕЦ КАК СуммаАванса,
		|	ВременнаяТаблицаРасчетыСПокупателями.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаРасчетыСПокупателями.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаРасчетыСПокупателями КАК ВременнаяТаблицаРасчетыСПокупателями,
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	&ЭтоЗаказНаряд
		|	И ВременнаяТаблицаШапка.Контрагент.ВестиРасчетыПоЗаказам
		|	И ВременнаяТаблицаРасчетыСПокупателями.Заказ <> &Ссылка
		|	И ВременнаяТаблицаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ВременнаяТаблицаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)";
	КонецЕсли;
	
	Если СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаРасчетыСПоставщиками")
		И СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВременнаяТаблицаРасчетыСПокупателями", "ВременнаяТаблицаРасчетыСПоставщиками");
	ИначеЕсли СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПокупателями.Количество() = 0
		И НЕ Запрос.Параметры.ЭтоЗаказНаряд Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаСчетовИЗаказов()

// Формирует таблицу значений, содержащую данные для проведения по регистру ОплатаСчетовИЗаказов для денежных документов.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаСчетовИЗаказовДенежныеДокументы(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	
	ЭтоПоступлениеДС = Истина;
	ЭтоЧекККМ = Ложь;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
		Запрос.УстановитьПараметр("ВидОперацииОтПокупателя", Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя);
		Запрос.УстановитьПараметр("ВидОперацииОтПоставщика", Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
		Запрос.УстановитьПараметр("ВидОперацииОтПокупателя", Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя);
		Запрос.УстановитьПараметр("ВидОперацииОтПоставщика", Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходИзКассы") Тогда
		Запрос.УстановитьПараметр("ВидОперацииПоставщику", Перечисления.ВидыОперацийРасходИзКассы.Поставщику);
		Запрос.УстановитьПараметр("ВидОперацииПокупателю", Перечисления.ВидыОперацийРасходИзКассы.Покупателю);
		ЭтоПоступлениеДС = Ложь;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходСоСчета") Тогда
		Запрос.УстановитьПараметр("ВидОперацииПоставщику", Перечисления.ВидыОперацийРасходСоСчета.Поставщику);
		Запрос.УстановитьПараметр("ВидОперацииПокупателю", Перечисления.ВидыОперацийРасходСоСчета.Покупателю);
		ЭтоПоступлениеДС = Ложь;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		Запрос.УстановитьПараметр("ВидОперацииОтПокупателя", Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя);
		Запрос.УстановитьПараметр("ВидОперацииОтПоставщика", Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика);
		ЭтоЧекККМ = Истина;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		Запрос.УстановитьПараметр("ВидОперацииПокупателю", Перечисления.ВидыОперацийРасходИзКассы.Покупателю);
		Запрос.УстановитьПараметр("ВидОперацииПоставщику", Перечисления.ВидыОперацийРасходИзКассы.Поставщику);
		ЭтоПоступлениеДС = Ложь;
	Иначе
		ВызватьИсключение НСтр("ru = 'Передан не правильный параметр в процедуру РасчетыПроведениеДокументов.СформироватьТаблицаОплатаСчетовИЗаказовДенежныеДокументы.'");
	КонецЕсли;
	
	Если ЭтоПоступлениеДС Тогда
		Запрос.Текст = ПолучитьТекстЗапросаПоступлениеДС();
	Иначе
		Запрос.Текст = ПолучитьТекстЗапросаРасходДС();
	КонецЕсли;
	
	Если ЭтоЧекККМ
		ИЛИ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументСсылка, "ВидОперации") И
		(ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику) Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
		ТекстОплатыАвто =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ВременнаяТаблицаШапка.Дата КАК Дата,
		|	ВременнаяТаблицаРасчетыСПокупателями.Организация КАК Организация,
		|	ВременнаяТаблицаРасчетыСПокупателями.Заказ КАК Заказ,
		|	ВЫБОР
		|		КОГДА НЕ ВременнаяТаблицаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|			ТОГДА 0
		|		КОГДА ВременнаяТаблицаШапка.ВалютаДенежныхСредств = ВременнаяТаблицаРасчетыСПокупателями.Заказ.ВалютаДокумента
		|			ТОГДА ВременнаяТаблицаРасчетыСПокупателями.СуммаПлатежа
		|		КОГДА ВременнаяТаблицаРасчетыСПокупателями.Договор.ВалютаРасчетов = ВременнаяТаблицаРасчетыСПокупателями.Заказ.ВалютаДокумента
		|			ТОГДА ВременнаяТаблицаРасчетыСПокупателями.СуммаВал
		|		ИНАЧЕ ВЫРАЗИТЬ(ВременнаяТаблицаРасчетыСПокупателями.СуммаПлатежа * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК СуммаАванса,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|			ТОГДА 0
		|		КОГДА ВременнаяТаблицаШапка.ВалютаДенежныхСредств = ВременнаяТаблицаРасчетыСПокупателями.Заказ.ВалютаДокумента
		|			ТОГДА ВременнаяТаблицаРасчетыСПокупателями.СуммаПлатежа
		|		КОГДА ВременнаяТаблицаРасчетыСПокупателями.Договор.ВалютаРасчетов = ВременнаяТаблицаРасчетыСПокупателями.Заказ.ВалютаДокумента
		|			ТОГДА ВременнаяТаблицаРасчетыСПокупателями.СуммаВал
		|		ИНАЧЕ ВЫРАЗИТЬ(ВременнаяТаблицаРасчетыСПокупателями.СуммаПлатежа * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК СуммаОплаты,
		|	ВременнаяТаблицаРасчетыСПокупателями.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаРасчетыСПокупателями.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	ВременнаяТаблицаРасчетыСПокупателями КАК ВременнаяТаблицаРасчетыСПокупателями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютСчета
		|		ПО ВременнаяТаблицаРасчетыСПокупателями.Заказ.ВалютаДокумента = КурсыВалютСчета.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
		|		ПО (ВременнаяТаблицаШапка.ВалютаДенежныхСредств = КурсыВалютКассы.Валюта)
		|ГДЕ
		|	ВременнаяТаблицаШапка.ВестиРасчетыПоЗаказам
		|	И ВременнаяТаблицаРасчетыСПокупателями.СпособЗачета = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто)
		|	И ВременнаяТаблицаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И (ТИПЗНАЧЕНИЯ(ВременнаяТаблицаРасчетыСПокупателями.Заказ) = ТИП(Документ.ЗаказПокупателя)
		|				И ВременнаяТаблицаРасчетыСПокупателями.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|			ИЛИ ТИПЗНАЧЕНИЯ(ВременнаяТаблицаРасчетыСПокупателями.Заказ) = ТИП(Документ.ЗаказПоставщику)
		|				И ВременнаяТаблицаРасчетыСПокупателями.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
		|			ИЛИ ТИПЗНАЧЕНИЯ(ВременнаяТаблицаРасчетыСПокупателями.Заказ) = ТИП(Документ.ПриемИПередачаВРемонт)
		|				И ВременнаяТаблицаРасчетыСПокупателями.Заказ <> ЗНАЧЕНИЕ(Документ.ПриемИПередачаВРемонт.ПустаяСсылка))
		|	И ВременнаяТаблицаРасчетыСПокупателями.Заказ <> НЕОПРЕДЕЛЕНО
		|	И (ВременнаяТаблицаРасчетыСПокупателями.Сумма <> 0
		|			ИЛИ ВременнаяТаблицаРасчетыСПокупателями.СуммаВал <> 0)";
		
		Если НЕ ЭтоПоступлениеДС Тогда
			ТекстОплатыАвто = СтрЗаменить(ТекстОплатыАвто, "ВременнаяТаблицаРасчетыСПокупателями", "ВременнаяТаблицаРасчетыСПоставщиками");
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + ТекстОплатыАвто;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаСчетовИЗаказов()

#КонецОбласти

#Область ДвиженияПоРегистру_ОплатаДокументов

// Формирует таблицу значений, содержащую данные для проведения по регистру ОплатаДокументов для денежных документов.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаДокументовДенежныеДокументы(ДокументСсылка, СтруктураДополнительныеСвойства, МассивДоступныхОпераций, КонтрагентВДвижениях = Ложь) Экспорт
	
	Если МассивДоступныхОпераций <> Неопределено
		И МассивДоступныхОпераций.Найти(ДокументСсылка.ВидОперации) = Неопределено Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаДокументов", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Если НЕ КонтрагентВДвижениях И НЕ ДокументСсылка.Контрагент.ВестиРасчетыПоДокументам Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаДокументов", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ТекущаяТаблицаРасчетов = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками;
	ИначеЕсли ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя Тогда
		
		ТекущаяТаблицаРасчетов = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПокупателями;
	Иначе
		ТекущаяТаблицаРасчетов = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками;
	КонецЕсли;
	
	ТаблицаОплатаДокументов = ПолучитьПустуюТаблицуДвижений("ОплатаДокументов", ДокументСсылка);
	
	Для Каждого ТекущаяСтрока Из ТекущаяТаблицаРасчетов Цикл
		
		Если КонтрагентВДвижениях И НЕ ТекущаяСтрока.Контрагент.ВестиРасчетыПоДокументам Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход И ТекущаяСтрока.ТипРасчетов = Перечисления.ТипыРасчетов.Долг Тогда
		
			Если НЕ Метаданные.РегистрыНакопления.ОплатаДокументов.Измерения.Документ.Тип.СодержитТип(ТипЗнч(ТекущаяСтрока.Документ)) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаОплатаДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока, "Период, Документ, Заказ, Организация, СтавкаНДС, СуммаНДС");
			
			НоваяСтрока.ДокументОплаты = ДокументСсылка;
			
			Если ТипЗнч(ТекущаяСтрока.Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
				СтруктураЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.Документ, "ВидОперации, Дата, Курс, Кратность");
				ВалютаУчета = Константы.ВалютаУчета.Получить();
				Если НЕ (СтруктураЗначения.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ПереуступкаДолгаПокупателя
					ИЛИ СтруктураЗначения.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику) Тогда
					КурсДатаВалютыРасчетов = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(СтруктураЗначения.Дата, Новый Структура("Валюта", ВалютаУчета));
					СтруктураЗначения.Вставить("Курс", КурсДатаВалютыРасчетов.Курс);
					СтруктураЗначения.Вставить("Кратность", КурсДатаВалютыРасчетов.Кратность);
				КонецЕсли;
				СтруктураЗначения.Вставить("ВалютаДокумента", ВалютаУчета);
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Заказ) Тогда
					НоваяСтрока.Заказ = Неопределено;
				КонецЕсли;
			Иначе
				СтруктураЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.Документ, "ВалютаДокумента, Курс, Кратность");
			КонецЕсли;
			
			Если ТекущаяСтрока.Договор.ВалютаРасчетов = СтруктураЗначения.ВалютаДокумента Тогда
				НоваяСтрока.СуммаОплаты = ТекущаяСтрока.СуммаВал;
			Иначе
				НоваяСтрока.СуммаОплаты = ТекущаяСтрока.СуммаВал * ?(СтруктураЗначения.Курс = 0, 1, СтруктураЗначения.Курс) /
					?(СтруктураЗначения.Кратность = 0, 1, СтруктураЗначения.Кратность)
				;
			КонецЕсли;
			
			Если ТекущаяСтрока.Владелец().Колонки.Найти("СпособЗачета") <> Неопределено
				И ТекущаяСтрока.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
				НоваяСтрока.СуммаОплатыАвто = НоваяСтрока.СуммаОплаты;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаОплатаДокументов.Свернуть("Документ, Заказ, Организация, Период, СтавкаНДС", "СуммаОплаты, СуммаОплатыАвто, СуммаНДС");
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаДокументов", ТаблицаОплатаДокументов);
	
КонецПроцедуры // СформироватьТаблицаОплатаСчетовИЗаказов()

// Формирует таблицу значений, содержащую данные для проведения по регистру ОплатаДокументов для счетов, заказов и документов отгрузки.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаДокументовНакладные(ДокументСсылка, СтруктураДополнительныеСвойства, МассивДоступныхОпераций) Экспорт
	
	Если МассивДоступныхОпераций <> Неопределено
		И МассивДоступныхОпераций.Найти(ДокументСсылка.ВидОперации) = Неопределено Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаДокументов", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) =  Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") 
		И НЕ ДокументСсылка.КонтрагентПолучатель.ВестиРасчетыПоДокументам Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаДокументов", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(ДокументСсылка) =  Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") 
		И НЕ ДокументСсылка.Контрагент.ВестиРасчетыПоДокументам Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаДокументов", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) =  Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		И СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаРасчетыСПокупателями")
		И СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаРасчетыСПоставщиками") Тогда
		ТекущаяТаблицаРасчетов = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПокупателями.Скопировать();
		Для каждого Движение Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками Цикл
			НоваяСтрока = ТекущаяТаблицаРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Движение);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		Если СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаРасчетыСПоставщиками")
			И СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками.Количество() > 0 Тогда
			ТекущаяТаблицаРасчетов = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками.Скопировать();
		КонецЕсли;
	ИначеЕсли СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаРасчетыСПокупателями")
		И СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПокупателями.Количество() > 0 Тогда
		ТекущаяТаблицаРасчетов = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПокупателями.Скопировать();
	ИначеЕсли СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаРасчетыСПоставщиками")
		И СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками.Количество() > 0 Тогда
		ТекущаяТаблицаРасчетов = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками.Скопировать();
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаДокументов", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	ТаблицаОплатаДокументов = ПолучитьПустуюТаблицуДвижений("ОплатаДокументов", ДокументСсылка);
	ЕстьКолонкаДокументОплаты = ТекущаяТаблицаРасчетов.Колонки.Найти("ДокументОплаты") <> Неопределено;
	
	Для Каждого ТекущаяСтрока Из ТекущаяТаблицаРасчетов Цикл
		
		Если ТекущаяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход И ТекущаяСтрока.ТипРасчетов = Перечисления.ТипыРасчетов.Долг Тогда
		
			НоваяСтрока = ТаблицаОплатаДокументов.Добавить();
			НоваяСтрока.Период = ТекущаяСтрока.Период;
			НоваяСтрока.Документ = ДокументСсылка;
			НоваяСтрока.Заказ = ТекущаяСтрока.Заказ;
			НоваяСтрока.Организация = ТекущаяСтрока.Организация;
			Если ЕстьКолонкаДокументОплаты Тогда
				НоваяСтрока.ДокументОплаты = ТекущаяСтрока.ДокументОплаты;
			КонецЕсли;
			НоваяСтрока.ЭтоЗачетПредоплаты = Истина;
			
			СтруктураЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Договор,ВалютаДокумента,Курс,Кратность");
			Если СтруктураЗначения.Договор.ВалютаРасчетов = СтруктураЗначения.ВалютаДокумента Тогда
				НоваяСтрока.СуммаАванса = ТекущаяСтрока.СуммаВал;
			Иначе
				НоваяСтрока.СуммаАванса = ТекущаяСтрока.Сумма;
			КонецЕсли;
			
			Если ТекущаяСтрока.Владелец().Колонки.Найти("СпособЗачета") <> Неопределено
				И ТекущаяСтрока.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
				НоваяСтрока.СуммаАвансаАвто = НоваяСтрока.СуммаАванса;
			КонецЕсли;
			
		ИначеЕсли ТекущаяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход И ТекущаяСтрока.ТипРасчетов = Перечисления.ТипыРасчетов.Долг Тогда
			
			НоваяСтрока = ТаблицаОплатаДокументов.Добавить();
			НоваяСтрока.Период = ТекущаяСтрока.Период;
			НоваяСтрока.Документ = ТекущаяСтрока.Документ;
			НоваяСтрока.Заказ = ТекущаяСтрока.Заказ;
			НоваяСтрока.Организация = ТекущаяСтрока.Организация;
			
			СтруктураЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Договор,ВалютаДокумента,Курс,Кратность");
			Если СтруктураЗначения.Договор.ВалютаРасчетов = СтруктураЗначения.ВалютаДокумента Тогда
				НоваяСтрока.Сумма = ТекущаяСтрока.СуммаВал;
			Иначе
				НоваяСтрока.Сумма = ТекущаяСтрока.Сумма;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьКолонкаДокументОплаты Тогда
		ТаблицаОплатаДокументов.Свернуть("Документ, Заказ, Организация, Период, ЭтоЗачетПредоплаты, ДокументОплаты", "Сумма, СуммаАванса, СуммаАвансаАвто");
	Иначе
		ТаблицаОплатаДокументов.Свернуть("Документ, Заказ, Организация, Период, ЭтоЗачетПредоплаты", "Сумма, СуммаАванса, СуммаАвансаАвто");
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаДокументов", ТаблицаОплатаДокументов);
	
КонецПроцедуры // СформироватьТаблицаОплатаСчетовИЗаказов()

#КонецОбласти

#Область ДвиженияПоРегистру_СуммыДокументовРегламентированныйУчет

// Формирует таблицу значений, содержащую данные для проведения по регистру СуммыДокументовРегламентированныйУчет.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСуммыДокументовРегламентированныйУчет(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	// Если опция учета нескольких валют выключена или документ создан в валюте регламентированного учета, движений быть не должно
	Если НЕ ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций")
		ИЛИ СтруктураДополнительныеСвойства.ВалютаДокумента = СтруктураДополнительныеСвойства.НациональнаяВалюта 
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСуммыДокументовРегламентированныйУчет", Новый ТаблицаЗначений);
		Возврат;
		
	КонецЕсли;
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	
	// Стандартные реквизиты
	ТаблицаДвижений.Колонки.Добавить("Период");
	ТаблицаДвижений.Колонки.Добавить("Регистратор");
	// Измерения
	ТаблицаДвижений.Колонки.Добавить("ТабличнаяЧастьДокумента");
	ТаблицаДвижений.Колонки.Добавить("НомерСтрокиДокумента");
	ТаблицаДвижений.Колонки.Добавить("Организация");
	// Ресурсы
	ТаблицаДвижений.Колонки.Добавить("Всего");
	ТаблицаДвижений.Колонки.Добавить("НДС");
	
	Если СтруктураДополнительныеСвойства.Свойство("МассивТаблицДляПересчета") Тогда
		
		Для каждого СтруктураТаблицы Из СтруктураДополнительныеСвойства.МассивТаблицДляПересчета Цикл
			
			ТаблицаСуммВНацВалюте = СтруктураТаблицы.ВременнаяТаблица;
			
			Для Каждого СтрокаСуммВНацВалюте Из ТаблицаСуммВНацВалюте Цикл
			
				СтрокаДвижения 						   = ТаблицаДвижений.Добавить();
				СтрокаДвижения.Период 				   = СтруктураДополнительныеСвойства.ДляПроведения.Дата;
				СтрокаДвижения.Организация 			   = СтруктураДополнительныеСвойства.ДляПроведения.Организация;
				СтрокаДвижения.ТабличнаяЧастьДокумента = СтруктураТаблицы.ВидТабличнойЧасти;
				СтрокаДвижения.НомерСтрокиДокумента    = СтрокаСуммВНацВалюте.НомерСтроки;
				
				СтрокаДвижения.Всего 				   = СтрокаСуммВНацВалюте.СуммаРег;
				СтрокаДвижения.НДС 					   = СтрокаСуммВНацВалюте.СуммаНДСРег;
				
			КонецЦикла;
			
		КонецЦикла; 
		
	Иначе
		
		ВызватьИсключение "Нет таблиц для пересчета!";
		
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСуммыДокументовРегламентированныйУчет", ТаблицаДвижений);
	
КонецПроцедуры

#КонецОбласти

#Область ДвиженияПоРегистрам_РасчетыСПокупателями_РасчетыСПоставщиками

Процедура СформироватьДвиженияПоВзаиморасчетам(СтруктураДополнительныеСвойства, ДокументСсылка, ЗапросПараметры = Неопределено, ТребуемыеРеквизитыШапки = "") Экспорт
	
	ЗаполнитьДополнительныеСвойстваДокументаДляВзаиморасчетов(ДокументСсылка, СтруктураДополнительныеСвойства);
	
	Если СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоЗаказ Тогда //Заказы
		СформироватьДвиженияПоВзаиморасчетамДляЗаказа(СтруктураДополнительныеСвойства.СтруктураДанныхДокумента, СтруктураДополнительныеСвойства);
	ИначеЕсли СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоОплата Тогда //Денежные документы
		СформироватьДвиженияПоВзаиморасчетамОплата(СтруктураДополнительныеСвойства.СтруктураДанныхДокумента, СтруктураДополнительныеСвойства);
	ИначеЕсли СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоВозвратОплаты Тогда //Денежные документы - возврат
		СформироватьДвиженияПоВзаиморасчетамВозвратОплаты(СтруктураДополнительныеСвойства.СтруктураДанныхДокумента, СтруктураДополнительныеСвойства);
	ИначеЕсли СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоПередачаТоваров Тогда //Передача товаров между организациями
		СформироватьДвиженияПоВзаиморасчетамДляПередачиТоваровМеждуОрганизациями(СтруктураДополнительныеСвойства.СтруктураДанныхДокумента, СтруктураДополнительныеСвойства);
	Иначе //Отгрузка
		СформироватьДвиженияПоВзаиморасчетамДляДокументовОтгрузки(СтруктураДополнительныеСвойства.СтруктураДанныхДокумента, СтруктураДополнительныеСвойства);
	КонецЕсли;
	
	СформироватьТаблицуРасчетовДляФормированияДвижений(СтруктураДополнительныеСвойства.СтруктураДанныхДокумента, ДокументСсылка, СтруктураДополнительныеСвойства, СтруктураДополнительныеСвойства.ПараметрыДокумента.ТаблицаДвиженийПоВзаиморасчетам, ТребуемыеРеквизитыШапки, ЗапросПараметры);
	
КонецПроцедуры

Процедура СформироватьДвиженияПоВзаиморасчетамОплатаДоставка(ДокументСсылкаПоступлениеНаСчет, СтруктураДополнительныеСвойства, ЗапросПараметры = Неопределено, ТребуемыеРеквизитыШапки = "") Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВалютаУчета", СтруктураДополнительныеСвойства.ВалютаУчета);
	Запрос.УстановитьПараметр("ВалютаДС", ДокументСсылкаПоступлениеНаСчет.ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("ВалютаДоговораКредитаЗайма", ДокументСсылкаПоступлениеНаСчет.ДоговорКредитаЗайма.ВалютаРасчетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВременнаяТаблицаКурсыВалютСрезПоследних
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаУчета, &ВалютаДС, &ВалютаДоговораКредитаЗайма)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеНаСчетРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеНаСчетРасшифровкаПлатежа.НомерСтроки - 1 КАК ИндексСтрокиДокумента,
	|	&Ссылка КАК СсылкаНаДокумент,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ПоступлениеНаСчетРасшифровкаПлатежа.Договор.Владелец КАК Контрагент,
	|	ПоступлениеНаСчетРасшифровкаПлатежа.Договор.ДоговорСоСлужбойДоставки КАК Договор,
	|	ПоступлениеНаСчетРасшифровкаПлатежа.СпособЗачета КАК СпособЗачета,
	|	&Ссылка КАК ДокументОплаты,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчетРасшифровкаПлатежа.ПризнакАванса
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|	КОНЕЦ КАК ТипРасчетов,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПоступлениеНаСчетРасшифровкаПлатежа.Курс КАК Курс,
	|	ПоступлениеНаСчетРасшифровкаПлатежа.Кратность КАК Кратность,
	|	&ВалютаДокумента КАК ВалютаПлатежа,
	|	&Ссылка КАК Документ,
	|	ПоступлениеНаСчетРасшифровкаПлатежа.СуммаРасчетов КАК СуммаВал,
	|	ПоступлениеНаСчетРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ВалютаДокумента = &НациональнаяВалюта
	|			ТОГДА ПоступлениеНаСчетРасшифровкаПлатежа.СуммаПлатежа
	|		КОГДА &ВалютаУчета = &НациональнаяВалюта
	|			ТОГДА ПоступлениеНаСчетРасшифровкаПлатежа.СуммаРасчетов
	|		ИНАЧЕ ПоступлениеНаСчетРасшифровкаПлатежа.СуммаРасчетов * ПоступлениеНаСчетРасшифровкаПлатежа.Курс / ПоступлениеНаСчетРасшифровкаПлатежа.Кратность
	|	КОНЕЦ КАК СуммаРег,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК НомерСертификата,
	|	ЛОЖЬ КАК ОплатаСертификатом,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК ПодарочныйСертификат,
	|	ЛОЖЬ КАК ЭтоОплатаЗаказа,
	|	ПоступлениеНаСчетРасшифровкаПлатежа.УдержаноАгентом КАК УдержаноАгентом,
	|	ПоступлениеНаСчетРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.ПоступлениеНаСчет.РасшифровкаПлатежа КАК ПоступлениеНаСчетРасшифровкаПлатежа
	|ГДЕ
	|	ПоступлениеНаСчетРасшифровкаПлатежа.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	РасшифровкаПлатежа.ИндексСтрокиДокумента КАК ИндексСтрокиДокумента,
	|	РасшифровкаПлатежа.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	РасшифровкаПлатежа.ВидДвижения КАК ВидДвижения,
	|	РасшифровкаПлатежа.Период КАК Период,
	|	РасшифровкаПлатежа.Организация КАК Организация,
	|	РасшифровкаПлатежа.Контрагент КАК Контрагент,
	|	РасшифровкаПлатежа.Договор КАК Договор,
	|	РасшифровкаПлатежа.СпособЗачета КАК СпособЗачета,
	|	РасшифровкаПлатежа.ДокументОплаты КАК ДокументОплаты,
	|	РасшифровкаПлатежа.ТипРасчетов КАК ТипРасчетов,
	|	РасшифровкаПлатежа.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЕСТЬNULL(РасшифровкаПлатежа.УдержаноАгентом, 0) КАК СуммаПлатежа,
	|	РасшифровкаПлатежа.Курс КАК Курс,
	|	РасшифровкаПлатежа.Кратность КАК Кратность,
	|	РасшифровкаПлатежа.ВалютаПлатежа КАК ВалютаПлатежа,
	|	РасшифровкаПлатежа.Документ КАК Документ,
	|	ЕСТЬNULL(РасшифровкаПлатежа.УдержаноАгентом, 0) КАК СуммаВал,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(РасшифровкаПлатежа.УдержаноАгентом, 0) * КурсыВалютБанковскогоСчета.Курс * КурсыВалютУчета.Кратность / (КурсыВалютУчета.Курс * КурсыВалютБанковскогоСчета.Кратность) КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ЕСТЬNULL(РасшифровкаПлатежа.УдержаноАгентом, 0) КАК СуммаРег,
	|	РасшифровкаПлатежа.НомерСертификата КАК НомерСертификата,
	|	РасшифровкаПлатежа.ОплатаСертификатом КАК ОплатаСертификатом,
	|	РасшифровкаПлатежа.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	РасшифровкаПлатежа.ЭтоОплатаЗаказа КАК ЭтоОплатаЗаказа,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка) КАК Заказ,
	|	&СодержаниеПроводки КАК СодержаниеПроводки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(РасшифровкаПлатежа.УдержаноАгентом, 0) - ЕСТЬNULL(РасшифровкаПлатежа.УдержаноАгентом, 0) / (1 + РасшифровкаПлатежа.СтавкаНДС.Ставка / 100) КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалютБанковскогоСчета
	|		ПО (КурсыВалютБанковскогоСчета.Валюта = &ВалютаДС)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалютУчета
	|		ПО (КурсыВалютУчета.Валюта = &ВалютаУчета)";
		
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПоступлениеНаСчет.Ссылка);
	Запрос.УстановитьПараметр("Период", ДокументСсылкаПоступлениеНаСчет.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ДокументСсылкаПоступлениеНаСчет.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ВалютаДокумента", ДокументСсылкаПоступлениеНаСчет.ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("НациональнаяВалюта", СтруктураДополнительныеСвойства.НациональнаяВалюта);
	Запрос.УстановитьПараметр("ВалютаУчета", СтруктураДополнительныеСвойства.ВалютаУчета);
	Запрос.УстановитьПараметр("СодержаниеПроводки", НСтр("ru='Увеличение долга поставщика перед нами на удержанную сумму'"));
		
	Результат = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ПараметрыДокумента.Вставить("ТаблицаДвиженийПоВзаиморасчетам", Результат.Выгрузить());
	
	СформироватьТаблицуРасчетовДляФормированияДвижений(СтруктураДополнительныеСвойства, ДокументСсылкаПоступлениеНаСчет, СтруктураДополнительныеСвойства, СтруктураДополнительныеСвойства.ПараметрыДокумента.ТаблицаДвиженийПоВзаиморасчетам, ТребуемыеРеквизитыШапки, ЗапросПараметры);
	
КонецПроцедуры

Процедура СформироватьДвиженияПоВзаиморасчетамДляЗаказа(ДокументОбъект, СтруктураДополнительныеСвойства)
	
	Если ДокументОбъект.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыСПокупателями.НомерСтроки КАК НомерСтроки,
	|	РасчетыСПокупателями.НомерСтроки - 1 КАК ИндексСтрокиДокумента,
	|	&Ссылка КАК СсылкаНаДокумент,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	РасчетыСПокупателями.Контрагент КАК Контрагент,
	|	РасчетыСПокупателями.Договор КАК Договор,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную) КАК СпособЗачета,
	|	&Ссылка КАК ДокументОплаты,
	|	&ПустойЗаказ КАК Заказ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасчетыСПокупателями.СуммаПлатежа КАК СуммаПлатежа,
	|	РасчетыСПокупателями.Курс КАК Курс,
	|	РасчетыСПокупателями.Кратность КАК Кратность,
	|	РасчетыСПокупателями.ВалютаРасчетов КАК ВалютаПлатежа,
	|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	&ТекстЗачетПредоплаты КАК СодержаниеПроводки,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПокупателями.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	РасчетыСПокупателями.СуммаРасчетов КАК СуммаВал,
	|	РасчетыСПокупателями.Сумма КАК Сумма,
	|	РасчетыСПокупателями.Сумма КАК СуммаРег,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК НомерСертификата,
	|	ЛОЖЬ КАК ОплатаСертификатом,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК ПодарочныйСертификат,
	|	ЛОЖЬ КАК ЭтоОплатаЗаказа
	|ПОМЕСТИТЬ РасчетыСПокупателями
	|ИЗ
	|	&Предоплата КАК РасчетыСПокупателями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПокупателями.НомерСтроки КАК НомерСтроки,
	|	РасчетыСПокупателями.ИндексСтрокиДокумента КАК ИндексСтрокиДокумента,
	|	РасчетыСПокупателями.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	РасчетыСПокупателями.ВидДвижения КАК ВидДвижения,
	|	РасчетыСПокупателями.Период КАК Период,
	|	РасчетыСПокупателями.Организация КАК Организация,
	|	РасчетыСПокупателями.Контрагент КАК Контрагент,
	|	РасчетыСПокупателями.Договор КАК Договор,
	|	РасчетыСПокупателями.СпособЗачета КАК СпособЗачета,
	|	РасчетыСПокупателями.ДокументОплаты КАК ДокументОплаты,
	|	РасчетыСПокупателями.Заказ КАК Заказ,
	|	РасчетыСПокупателями.ТипРасчетов КАК ТипРасчетов,
	|	РасчетыСПокупателями.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасчетыСПокупателями.СуммаПлатежа КАК СуммаПлатежа,
	|	РасчетыСПокупателями.Курс КАК Курс,
	|	РасчетыСПокупателями.Кратность КАК Кратность,
	|	РасчетыСПокупателями.ВалютаПлатежа КАК ВалютаПлатежа,
	|	РасчетыСПокупателями.СтавкаНДС КАК СтавкаНДС,
	|	РасчетыСПокупателями.СуммаНДС КАК СуммаНДС,
	|	ВЫРАЗИТЬ(РасчетыСПокупателями.СодержаниеПроводки КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	РасчетыСПокупателями.Документ КАК Документ,
	|	РасчетыСПокупателями.СуммаВал КАК СуммаВал,
	|	РасчетыСПокупателями.Сумма КАК Сумма,
	|	РасчетыСПокупателями.СуммаРег КАК СуммаРег,
	|	РасчетыСПокупателями.НомерСертификата КАК НомерСертификата,
	|	РасчетыСПокупателями.ОплатаСертификатом КАК ОплатаСертификатом,
	|	РасчетыСПокупателями.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	РасчетыСПокупателями.ЭтоОплатаЗаказа КАК ЭтоОплатаЗаказа
	|ИЗ
	|	РасчетыСПокупателями КАК РасчетыСПокупателями
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РасчетыСПокупателями.НомерСтроки,
	|	РасчетыСПокупателями.ИндексСтрокиДокумента,
	|	РасчетыСПокупателями.СсылкаНаДокумент,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	РасчетыСПокупателями.Период,
	|	РасчетыСПокупателями.Организация,
	|	РасчетыСПокупателями.Контрагент,
	|	РасчетыСПокупателями.Договор,
	|	РасчетыСПокупателями.СпособЗачета,
	|	РасчетыСПокупателями.ДокументОплаты,
	|	&Ссылка,
	|	РасчетыСПокупателями.ТипРасчетов,
	|	РасчетыСПокупателями.ХозяйственнаяОперация,
	|	РасчетыСПокупателями.СуммаПлатежа,
	|	РасчетыСПокупателями.Курс,
	|	РасчетыСПокупателями.Кратность,
	|	РасчетыСПокупателями.ВалютаПлатежа,
	|	РасчетыСПокупателями.СтавкаНДС,
	|	РасчетыСПокупателями.СуммаНДС,
	|	ВЫРАЗИТЬ(РасчетыСПокупателями.СодержаниеПроводки КАК СТРОКА(100)),
	|	РасчетыСПокупателями.Документ,
	|	РасчетыСПокупателями.СуммаВал,
	|	РасчетыСПокупателями.Сумма,
	|	РасчетыСПокупателями.СуммаРег,
	|	РасчетыСПокупателями.НомерСертификата,
	|	РасчетыСПокупателями.ОплатаСертификатом,
	|	РасчетыСПокупателями.ПодарочныйСертификат,
	|	ИСТИНА
	|ИЗ
	|	РасчетыСПокупателями КАК РасчетыСПокупателями";
		
	Запрос.УстановитьПараметр("Предоплата", ДокументОбъект.Предоплата);
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Период", ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ТекстЗачетПредоплаты", СтруктураДополнительныеСвойства.ТекстЗачетПредоплаты);
	Запрос.УстановитьПараметр("ПустойЗаказ", СтруктураДополнительныеСвойства.ПустойЗаказ);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ДокументОбъект.ХозяйственнаяОперация);
	
	Результат = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ПараметрыДокумента.Вставить("ТаблицаДвиженийПоВзаиморасчетам", Результат.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьДвиженияПоВзаиморасчетамОплата(ДокументОбъект, СтруктураДополнительныеСвойства)
	
	СформироватьДвиженияПоВзаиморасчетамОплатаВручную(ДокументОбъект, СтруктураДополнительныеСвойства);
	СформироватьДвиженияПоВзаиморасчетамОплатаАвтоматически(ДокументОбъект, СтруктураДополнительныеСвойства);
	
КонецПроцедуры

Процедура СформироватьДвиженияПоВзаиморасчетамОплатаВручную(ДокументОбъект, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	РасшифровкаПлатежа.НомерСтроки - 1 КАК ИндексСтрокиДокумента,
	|	&Ссылка КАК СсылкаНаДокумент,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	РасшифровкаПлатежа.Контрагент КАК Контрагент,
	|	РасшифровкаПлатежа.Договор КАК Договор,
	|	РасшифровкаПлатежа.СпособЗачета КАК СпособЗачета,
	|	&Ссылка КАК ДокументОплаты,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ВестиРасчетыПоЗаказам
	|			ТОГДА РасшифровкаПлатежа.Заказ
	|		ИНАЧЕ &ПустойЗаказ
	|	КОНЕЦ КАК Заказ,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПризнакАванса
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|	КОНЕЦ КАК ТипРасчетов,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	РасшифровкаПлатежа.Курс КАК Курс,
	|	РасшифровкаПлатежа.Кратность КАК Кратность,
	|	РасшифровкаПлатежа.ВалютаДенежныхСредств КАК ВалютаПлатежа,
	|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	РасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПризнакАванса
	|			ТОГДА &ТекстАванс
	|		ИНАЧЕ &ТекстОплатаДолга
	|	КОНЕЦ КАК СодержаниеПроводки,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПризнакАванса
	|			ТОГДА ВЫБОР
	|					КОГДА РасшифровкаПлатежа.ВестиРасчетыПоДокументам
	|						ТОГДА &Ссылка
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасшифровкаПлатежа.ВестиРасчетыПоДокументам
	|					ТОГДА РасшифровкаПлатежа.Документ
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК Документ,
	|	РасшифровкаПлатежа.СуммаРасчетов КАК СуммаВал,
	|	РасшифровкаПлатежа.СуммаУчета КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ВалютаДокумента = &НациональнаяВалюта
	|			ТОГДА РасшифровкаПлатежа.СуммаПлатежа
	|		КОГДА &ВалютаУчета = &НациональнаяВалюта
	|			ТОГДА РасшифровкаПлатежа.СуммаУчета
	|		ИНАЧЕ РасшифровкаПлатежа.СуммаРасчетов * РасшифровкаПлатежа.Курс / РасшифровкаПлатежа.Кратность
	|	КОНЕЦ КАК СуммаРег,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК НомерСертификата,
	|	ЛОЖЬ КАК ОплатаСертификатом,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК ПодарочныйСертификат,
	|	ЛОЖЬ КАК ЭтоОплатаЗаказа
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.СпособЗачета = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	РасшифровкаПлатежа.ИндексСтрокиДокумента КАК ИндексСтрокиДокумента,
	|	РасшифровкаПлатежа.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	РасшифровкаПлатежа.ВидДвижения КАК ВидДвижения,
	|	РасшифровкаПлатежа.Период КАК Период,
	|	РасшифровкаПлатежа.Организация КАК Организация,
	|	РасшифровкаПлатежа.Контрагент КАК Контрагент,
	|	РасшифровкаПлатежа.Договор КАК Договор,
	|	РасшифровкаПлатежа.СпособЗачета КАК СпособЗачета,
	|	РасшифровкаПлатежа.ДокументОплаты КАК ДокументОплаты,
	|	РасшифровкаПлатежа.Заказ КАК Заказ,
	|	РасшифровкаПлатежа.ТипРасчетов КАК ТипРасчетов,
	|	РасшифровкаПлатежа.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	РасшифровкаПлатежа.Курс КАК Курс,
	|	РасшифровкаПлатежа.Кратность КАК Кратность,
	|	РасшифровкаПлатежа.ВалютаПлатежа КАК ВалютаПлатежа,
	|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	РасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	ВЫРАЗИТЬ(РасшифровкаПлатежа.СодержаниеПроводки КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	РасшифровкаПлатежа.Документ КАК Документ,
	|	РасшифровкаПлатежа.СуммаВал КАК СуммаВал,
	|	РасшифровкаПлатежа.Сумма КАК Сумма,
	|	РасшифровкаПлатежа.СуммаРег КАК СуммаРег,
	|	РасшифровкаПлатежа.НомерСертификата КАК НомерСертификата,
	|	РасшифровкаПлатежа.ОплатаСертификатом КАК ОплатаСертификатом,
	|	РасшифровкаПлатежа.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	РасшифровкаПлатежа.ЭтоОплатаЗаказа КАК ЭтоОплатаЗаказа
	|ИЗ
	|	РасшифровкаПлатежа КАК РасшифровкаПлатежа";
		
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", ДокументОбъект.РасшифровкаПлатежа);
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Период", ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ТекстАванс", СтруктураДополнительныеСвойства.ТекстАванс);
	Запрос.УстановитьПараметр("ТекстОплатаДолга", СтруктураДополнительныеСвойства.ТекстОплатаДолга);
	Запрос.УстановитьПараметр("ПустойЗаказ", СтруктураДополнительныеСвойства.ПустойЗаказ);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ДокументОбъект.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ВалютаДокумента", ДокументОбъект.ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("НациональнаяВалюта", СтруктураДополнительныеСвойства.НациональнаяВалюта);
	Запрос.УстановитьПараметр("ВалютаУчета", СтруктураДополнительныеСвойства.ВалютаУчета);
		
	Результат = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ПараметрыДокумента.Вставить("ТаблицаДвиженийПоВзаиморасчетам", Результат.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьДвиженияПоВзаиморасчетамОплатаАвтоматически(ДокументОбъект, СтруктураДополнительныеСвойства)
	
	ОтборПоСпособуЗачета = Новый Структура("СпособЗачета", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную);
	РасшифровкаРаспределениеВручную = ДокументОбъект.РасшифровкаПлатежа.НайтиСтроки(ОтборПоСпособуЗачета);
	
	ОтборПоСпособуЗачета.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
	РасшифровкаАвто = ДокументОбъект.РасшифровкаПлатежа.НайтиСтроки(ОтборПоСпособуЗачета);

	// В табличной части нет данных для автоматического распределения оплат
	Если РасшифровкаАвто.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Получим остатки долгов и заказов.
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаОстаткиДолговИЗаказов(СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком);
	
	Запрос.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("МассивДоговоров", ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("Договор")));
	Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("ТипРасчетовДолг", Перечисления.ТипыРасчетов.Долг);
	Запрос.УстановитьПараметр("МоментВремениДокумента", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени);
	Запрос.УстановитьПараметр("СпособЗачетаАвто", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатЗапросаДолги = МассивРезультатов[1];
	ТЗДолгов = РезультатЗапросаДолги.Выгрузить();
	
	// 2. Движения по строкам "Вручную" уже сформированы, необходимо вычесть их из остатков долгов
	Для Каждого СтрокаРасшифровки Из РасшифровкаРаспределениеВручную Цикл
		
		// Уменьшим остатки долгов и заказов.
		Если ЗначениеЗаполнено(СтрокаРасшифровки.Документ) Тогда
			
			Заказ = ?(СтрокаРасшифровки.Заказ = Неопределено, СтруктураДополнительныеСвойства.ПустойЗаказ, СтрокаРасшифровки.Заказ);
			ПараметрыОтбора = Новый Структура("Документ, Заказ", СтрокаРасшифровки.Документ, Заказ);
			
			НужноРаспределить = СтрокаРасшифровки.СуммаРасчетов;
			СтрокиДолги = ТЗДолгов.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого СтрокаДолги Из СтрокиДолги Цикл
				
				Если СтрокаДолги.СуммаВалОстаток <= НужноРаспределить Тогда
					НужноРаспределить = НужноРаспределить - СтрокаДолги.СуммаВалОстаток;
					СтрокаДолги.СуммаВалОстаток = 0;
				Иначе
					СтрокаДолги.СуммаВалОстаток = СтрокаДолги.СуммаВалОстаток - НужноРаспределить;
					НужноРаспределить = 0;
				КонецЕсли;
				
				Если НужноРаспределить = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// 3. Распределим оплату Авто на остатки долгов
	Для Каждого СтрокаРасшифровки Из РасшифровкаАвто Цикл
	
		// Уменьшим остатки долгов.
		НужноРаспределить = СтрокаРасшифровки.СуммаРасчетов;
		
		ПараметрыОтбора = Новый Структура("Договор", СтрокаРасшифровки.Договор);
		
		СтрокиДолги = ТЗДолгов.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаДолги Из СтрокиДолги Цикл
			
			Если СтрокаДолги.СуммаВалОстаток = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаДолги.СуммаВалОстаток <= НужноРаспределить Тогда
				
				СуммаВал = СтрокаДолги.СуммаВалОстаток;
				
				НужноРаспределить = НужноРаспределить - СтрокаДолги.СуммаВалОстаток;
				СтрокаДолги.СуммаВалОстаток = 0;
				
			Иначе
				
				СуммаВал = НужноРаспределить;
				
				СтрокаДолги.СуммаВалОстаток = СтрокаДолги.СуммаВалОстаток - НужноРаспределить;
				НужноРаспределить = 0;
				
			КонецЕсли;
			
			// Добавить движение сразу же
			СформироватьДвижениеРаспределенияАвтоАванса(ДокументОбъект, СтруктураДополнительныеСвойства, СуммаВал, СтрокаДолги, СтрокаРасшифровки);
			
			Если НужноРаспределить = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НужноРаспределить > 0 Тогда
			СформироватьДвижениеАвтоАванса(ДокументОбъект, СтруктураДополнительныеСвойства, НужноРаспределить, СтрокаРасшифровки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураДополнительныеСвойства.УчетВалютныхОпераций Тогда
		
		Если ДокументОбъект.Свойство("СуммаДокумента") Тогда
			СуммаВВалютеДокумента = ДокументОбъект.СуммаДокумента;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект.Ссылка, "СуммаДокумента") Тогда
			СуммаВВалютеДокумента = ДокументОбъект.Ссылка.СуммаДокумента;
		Иначе
			Возврат;
		КонецЕсли;
		
		Движения = СтруктураДополнительныеСвойства.ПараметрыДокумента.ТаблицаДвиженийПоВзаиморасчетам;
		
		Если СтруктураДополнительныеСвойства.ВалютаДокумента = СтруктураДополнительныеСвойства.ВалютаУчета Тогда
			РаспределитьСуммуПоКолонкеТаблицы(СуммаВВалютеДокумента, Движения, "Сумма", "СуммаВал");
			РаспределитьСуммуПоКолонкеТаблицы(СуммаВВалютеДокумента, Движения, "СуммаПлатежа", "СуммаВал");
		КонецЕсли;
		
		Если СтруктураДополнительныеСвойства.ВалютаДокумента = СтруктураДополнительныеСвойства.НациональнаяВалюта Тогда
			РаспределитьСуммуПоКолонкеТаблицы(СуммаВВалютеДокумента, Движения, "СуммаРег", "СуммаВал");
			РаспределитьСуммуПоКолонкеТаблицы(СуммаВВалютеДокумента, Движения, "СуммаПлатежа", "СуммаВал");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоВзаиморасчетамВозвратОплаты(ДокументОбъект, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	РасшифровкаПлатежа.НомерСтроки - 1 КАК ИндексСтрокиДокумента,
	|	&Ссылка КАК СсылкаНаДокумент,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	РасшифровкаПлатежа.Контрагент КАК Контрагент,
	|	РасшифровкаПлатежа.Договор КАК Договор,
	|	РасшифровкаПлатежа.СпособЗачета КАК СпособЗачета,
	|	&Ссылка КАК ДокументОплаты,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ВестиРасчетыПоДокументам
	|			ТОГДА РасшифровкаПлатежа.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ВестиРасчетыПоЗаказам
	|			ТОГДА РасшифровкаПлатежа.Заказ
	|		ИНАЧЕ &ПустойЗаказ
	|	КОНЕЦ КАК Заказ,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПризнакАванса
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|	КОНЕЦ КАК ТипРасчетов,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	РасшифровкаПлатежа.Курс КАК Курс,
	|	РасшифровкаПлатежа.Кратность КАК Кратность,
	|	РасшифровкаПлатежа.ВалютаДенежныхСредств КАК ВалютаПлатежа,
	|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	РасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПризнакАванса
	|			ТОГДА &ТекстАванс
	|		ИНАЧЕ &ТекстОплатаДолга
	|	КОНЕЦ КАК СодержаниеПроводки,
	|	РасшифровкаПлатежа.СуммаРасчетов КАК СуммаВал,
	|	РасшифровкаПлатежа.СуммаУчета КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ВалютаДокумента = &НациональнаяВалюта
	|			ТОГДА РасшифровкаПлатежа.СуммаПлатежа
	|		ИНАЧЕ РасшифровкаПлатежа.СуммаРасчетов * РасшифровкаПлатежа.Курс / РасшифровкаПлатежа.Кратность
	|	КОНЕЦ КАК СуммаРег,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК НомерСертификата,
	|	ЛОЖЬ КАК ОплатаСертификатом,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК ПодарочныйСертификат,
	|	ЛОЖЬ КАК ЭтоОплатаЗаказа,
	|	РасшифровкаПлатежа.ПризнакАванса КАК ПризнакАванса,
	|	РасшифровкаПлатежа.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	РасшифровкаПлатежа.Дата КАК Дата
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПокупателями.Регистратор КАК ДокументРасчетов,
	|	РасчетыСПокупателями.Заказ КАК Заказ,
	|	СРЕДНЕЕ(РасчетыСПокупателями.Сумма / РасчетыСПокупателями.СуммаВал) КАК КурсКратностьВалютаУчета,
	|	СРЕДНЕЕ(РасчетыСПокупателями.СуммаРег / РасчетыСПокупателями.СуммаВал) КАК КурсКратностьРегВалюта
	|ПОМЕСТИТЬ ДанныеДокументовРасчета
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями,
	|	РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасчетыСПокупателями.Регистратор В
	|			(ВЫБРАТЬ
	|				РасшифровкаПлатежа.Документ
	|			ИЗ
	|				РасшифровкаПлатежа)
	|	И РасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|	И РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателями.Регистратор,
	|	РасчетыСПокупателями.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	РасшифровкаПлатежа.ИндексСтрокиДокумента КАК ИндексСтрокиДокумента,
	|	РасшифровкаПлатежа.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	РасшифровкаПлатежа.ВидДвижения КАК ВидДвижения,
	|	РасшифровкаПлатежа.Период КАК Период,
	|	РасшифровкаПлатежа.Организация КАК Организация,
	|	РасшифровкаПлатежа.Контрагент КАК Контрагент,
	|	РасшифровкаПлатежа.Договор КАК Договор,
	|	РасшифровкаПлатежа.СпособЗачета КАК СпособЗачета,
	|	РасшифровкаПлатежа.ДокументОплаты КАК ДокументОплаты,
	|	РасшифровкаПлатежа.Заказ КАК Заказ,
	|	РасшифровкаПлатежа.ТипРасчетов КАК ТипРасчетов,
	|	РасшифровкаПлатежа.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	РасшифровкаПлатежа.Курс КАК Курс,
	|	РасшифровкаПлатежа.Кратность КАК Кратность,
	|	РасшифровкаПлатежа.ВалютаПлатежа КАК ВалютаПлатежа,
	|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	РасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	ВЫРАЗИТЬ(РасшифровкаПлатежа.СодержаниеПроводки КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	РасшифровкаПлатежа.Документ КАК Документ,
	|	РасшифровкаПлатежа.СуммаВал КАК СуммаВал,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПризнакАванса
	|				И НЕ ДанныеДокументовРасчета.КурсКратностьВалютаУчета ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.СуммаВал * ДанныеДокументовРасчета.КурсКратностьВалютаУчета КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ РасшифровкаПлатежа.Сумма
	|	КОНЕЦ КАК Сумма,
	|	РасшифровкаПлатежа.СуммаРег КАК СуммаРег,
	|	РасшифровкаПлатежа.НомерСертификата КАК НомерСертификата,
	|	РасшифровкаПлатежа.ОплатаСертификатом КАК ОплатаСертификатом,
	|	РасшифровкаПлатежа.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	РасшифровкаПлатежа.ЭтоОплатаЗаказа КАК ЭтоОплатаЗаказа
	|ИЗ
	|	РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументовРасчета КАК ДанныеДокументовРасчета
	|		ПО (ДанныеДокументовРасчета.ДокументРасчетов = РасшифровкаПлатежа.Документ)
	|			И (ДанныеДокументовРасчета.Заказ = РасшифровкаПлатежа.Заказ)";
	
	Если СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыСПокупателями", "РасчетыСПоставщиками");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", ДокументОбъект.РасшифровкаПлатежа);
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Период", ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ТекстАванс", СтруктураДополнительныеСвойства.ТекстВозвратАванса);
	Запрос.УстановитьПараметр("ТекстОплатаДолга", СтруктураДополнительныеСвойства.ТекстВозникновениеОбязательств);
	Запрос.УстановитьПараметр("ПустойЗаказ", СтруктураДополнительныеСвойства.ПустойЗаказ);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ДокументОбъект.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ВалютаДокумента", ДокументОбъект.ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("НациональнаяВалюта", СтруктураДополнительныеСвойства.НациональнаяВалюта);
	
	Результат = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ПараметрыДокумента.Вставить("ТаблицаДвиженийПоВзаиморасчетам", Результат.Выгрузить());
	
	ОбновитьРасшифровкуПлатежаПоДаннымВзаиморасчетов(ДокументОбъект, СтруктураДополнительныеСвойства);
	
КонецПроцедуры

Процедура СформироватьДвиженияПоВзаиморасчетамДляДокументовОтгрузки(ДокументОбъект, СтруктураДополнительныеСвойства)
	
	
	ТребуетсяЗачетАвансов = (ДокументОбъект.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто
		ИЛИ ДокументОбъект.Предоплата.Количество() > 0);
	
	Если ТребуетсяЗачетАвансов Тогда
		
		// 1. Определяем авто или вручную, в зависимости от этого выбираем остатки авансов, либо подставляем ТЧ Предоплата
		// 2. Осуществляем одинаковое распределение для обоих случаев
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаОстаткиАвансов(ДокументОбъект, СтруктураДополнительныеСвойства);
		
		Запрос.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);
		Запрос.УстановитьПараметр("Договор", ДокументОбъект.Договор);
		Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
		Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
		Если СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоЗаказНаряд Тогда
			Запрос.УстановитьПараметр("МоментВремениДокумента", Новый  МоментВремени(ДокументОбъект.Период));
		Иначе
			Запрос.УстановитьПараметр("МоментВремениДокумента", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени);
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("ТипРасчетовАванс", Перечисления.ТипыРасчетов.Аванс);
		Запрос.УстановитьПараметр("Заказы", ПолучитьТаблицуСуммКЗачету(ДокументОбъект, СтруктураДополнительныеСвойства));
		Запрос.УстановитьПараметр("Предоплата", ДокументОбъект.Предоплата);
		Запрос.УстановитьПараметр("ПустойЗаказ", СтруктураДополнительныеСвойства.ПустойЗаказ);
		
		МассивРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		Если НЕ ДокументОбъект.Свойство("ВалютаДокумента") Тогда
			ДокументОбъект.Вставить("ВалютаДокумента", ДокументОбъект.Ссылка.ВалютаДокумента);
		КонецЕсли; 
		
		Если ДокументОбъект.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
			РезультатЗапросаАвансы = МассивРезультатов[4]; //Остатки авансов в регистре
		Иначе
			РезультатЗапросаАвансы = МассивРезультатов[8]; //Табличная часть "Предоплата"
		КонецЕсли;
		
		РезультатЗапросаКЗачету = МассивРезультатов[6];
		
		Если РезультатЗапросаКЗачету.Пустой() Тогда
			Если СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоКорректировка Тогда //Движений к зачету может не быть, например просто уменьшен аванс
				РезультатЗапросаКЗачету = РезультатЗапросаАвансы;
				СтруктураДополнительныеСвойства.Вставить("КорректировкаБезИзмененияДолга", Истина);
			Иначе //Нет данных для формирования движений по взаиморасчетам
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Авансы = РезультатЗапросаАвансы.Выгрузить();
		КЗачету = РезультатЗапросаКЗачету.Выгрузить();
		
		// Если авансы зачитываются вручную, необходимо исключить погрешности округления при полном зачете авансов
		ПодготовитьТаблицуАвансовЗачитываемыхВручную(ДокументОбъект, Авансы, МассивРезультатов[4].Выгрузить(), СтруктураДополнительныеСвойства); // Остатки авансов в регистре для списания разницы округления
		
		ПараметрыОтбораСтрок = Новый Структура("Заказ", СтруктураДополнительныеСвойства.ПустойЗаказ);
		
		// Зачтем автоматические авансы под долги, которые не оплачены вручную.
		Для каждого СтрокаКЗачету Из КЗачету Цикл
			
			// Сначала зачтём аванс по заказу (или по пустому заказу).
			ПараметрыОтбораСтрок.Заказ = ?(ЗначениеЗаполнено(СтрокаКЗачету.Заказ), СтрокаКЗачету.Заказ, СтруктураДополнительныеСвойства.ПустойЗаказ);
			СтрокиАвансовДляЗачета = Авансы.НайтиСтроки(ПараметрыОтбораСтрок);
			
			РаспределитьАванс(ДокументОбъект, СтрокиАвансовДляЗачета, СтрокаКЗачету, СтруктураДополнительныеСвойства);
			
			// Осуществляем распределение по авансам с пустым заказом
			// Ветка имеет смысл, если заказ выбран, Если заказ не выбран, то отработает предыдущий блок кода.
			Если ЗначениеЗаполнено(СтрокаКЗачету.Заказ) И СтрокаКЗачету.СуммаВалОстаток > 0 Тогда
				ПараметрыОтбораСтрок.Заказ = СтруктураДополнительныеСвойства.ПустойЗаказ;
				СтрокиАвансовДляЗачета = Авансы.НайтиСтроки(ПараметрыОтбораСтрок);
				РаспределитьАванс(ДокументОбъект, СтрокиАвансовДляЗачета, СтрокаКЗачету, СтруктураДополнительныеСвойства);
			КонецЕсли;
			
			Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.ЧекККМ") Тогда
				ДобавитьСтрокуЗадолженности(ДокументОбъект, СтрокаКЗачету, СтруктураДополнительныеСвойства);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ДокументОбъект.Свойство("ВалютаДокумента") Тогда
			ДокументОбъект.Вставить("ВалютаДокумента", ДокументОбъект.Ссылка.ВалютаДокумента);
		КонецЕсли; 
		
		КЗачету = ПолучитьТаблицуСуммКЗачету(ДокументОбъект, СтруктураДополнительныеСвойства);
		КЗачету.Колонки.СуммаРасчетов.Имя = "СуммаВалОстаток";
		
		Для каждого СтрокаКЗачету Из КЗачету Цикл
			ДобавитьСтрокуЗадолженности(ДокументОбъект, СтрокаКЗачету, СтруктураДополнительныеСвойства);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВзаимозачетДобавитьДвиженияВТаблицуРасчетов(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаимозачетДебитор.Документ КАК Документ,
		|	ВзаимозачетДебитор.Заказ КАК Заказ,
		|	ВзаимозачетДебитор.Договор КАК Договор,
		|	ВзаимозачетДебитор.СуммаРасчетов КАК СуммаРасчетов,
		|	ВзаимозачетДебитор.Ссылка.Дата КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблица_Дебитор
		|ИЗ
		|	Документ.Взаимозачет.Дебитор КАК ВзаимозачетДебитор
		|ГДЕ
		|	ВзаимозачетДебитор.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачет.ЗачетАвансовПокупателя)
		|	И ВзаимозачетДебитор.ПризнакАванса
		|	И ВзаимозачетДебитор.Ссылка = &Ссылка
		|	И ВзаимозачетДебитор.Договор.ВалютаРасчетов <> &КонстантыНациональнаяВалюта
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Документ,
		|	Заказ,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСПокупателямиОстатки.Организация КАК Организация,
		|	РасчетыСПокупателямиОстатки.ТипРасчетов КАК ТипРасчетов,
		|	РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
		|	РасчетыСПокупателямиОстатки.Договор КАК Договор,
		|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
		|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
		|	-РасчетыСПокупателямиОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
		|	-РасчетыСПокупателямиОстатки.СуммаРегОстаток КАК СуммаРегОстаток,
		|	ВременнаяТаблица_Дебитор.СуммаРасчетов КАК СуммаРасчетов,
		|	ВременнаяТаблица_Дебитор.Период КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблица_СуммыРег
		|ИЗ
		|	ВременнаяТаблица_Дебитор КАК ВременнаяТаблица_Дебитор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки(
		|				,
		|				Контрагент = &Контрагент
		|					И Организация = &Организация
		|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
		|		ПО ВременнаяТаблица_Дебитор.Договор = РасчетыСПокупателямиОстатки.Договор
		|			И ВременнаяТаблица_Дебитор.Документ = РасчетыСПокупателямиОстатки.Документ
		|			И ВременнаяТаблица_Дебитор.Заказ = РасчетыСПокупателямиОстатки.Заказ
		|ГДЕ
		|	РасчетыСПокупателямиОстатки.СуммаВалОстаток < 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСПокупателями.Организация,
		|	РасчетыСПокупателями.ТипРасчетов,
		|	РасчетыСПокупателями.Контрагент,
		|	РасчетыСПокупателями.Договор,
		|	РасчетыСПокупателями.Документ,
		|	РасчетыСПокупателями.Заказ,
		|	ВЫБОР
		|		КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА РасчетыСПокупателями.СуммаВал
		|		ИНАЧЕ -РасчетыСПокупателями.СуммаВал
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА РасчетыСПокупателями.СуммаРег
		|		ИНАЧЕ -РасчетыСПокупателями.СуммаРег
		|	КОНЕЦ,
		|	ВременнаяТаблица_Дебитор.СуммаРасчетов,
		|	ВременнаяТаблица_Дебитор.Период
		|ИЗ
		|	ВременнаяТаблица_Дебитор КАК ВременнаяТаблица_Дебитор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|		ПО ВременнаяТаблица_Дебитор.Договор = РасчетыСПокупателями.Договор
		|			И ВременнаяТаблица_Дебитор.Документ = РасчетыСПокупателями.Документ
		|			И ВременнаяТаблица_Дебитор.Заказ = РасчетыСПокупателями.Заказ
		|ГДЕ
		|	РасчетыСПокупателями.Организация = &Организация
		|	И РасчетыСПокупателями.Контрагент = &Контрагент
		|	И РасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|	И РасчетыСПокупателями.Регистратор = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица_СуммыРег.Организация КАК Организация,
		|	ВременнаяТаблица_СуммыРег.ТипРасчетов КАК ТипРасчетов,
		|	ВременнаяТаблица_СуммыРег.Контрагент КАК Контрагент,
		|	ВременнаяТаблица_СуммыРег.Договор КАК Договор,
		|	ВременнаяТаблица_СуммыРег.Документ КАК Документ,
		|	ВременнаяТаблица_СуммыРег.Заказ КАК Заказ,
		|	СУММА(ВременнаяТаблица_СуммыРег.СуммаВалОстаток) КАК СуммаВалОстаток,
		|	СУММА(ВременнаяТаблица_СуммыРег.СуммаРегОстаток) КАК СуммаРегОстаток,
		|	ВременнаяТаблица_СуммыРег.СуммаРасчетов КАК СуммаРасчетов,
		|	ВременнаяТаблица_СуммыРег.Период КАК Период
		|ПОМЕСТИТЬ ВременнаяТаблица_ДанныеПослеГруппировки
		|ИЗ
		|	ВременнаяТаблица_СуммыРег КАК ВременнаяТаблица_СуммыРег
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблица_СуммыРег.ТипРасчетов,
		|	ВременнаяТаблица_СуммыРег.Организация,
		|	ВременнаяТаблица_СуммыРег.Контрагент,
		|	ВременнаяТаблица_СуммыРег.Заказ,
		|	ВременнаяТаблица_СуммыРег.Договор,
		|	ВременнаяТаблица_СуммыРег.Период,
		|	ВременнаяТаблица_СуммыРег.Документ,
		|	ВременнаяТаблица_СуммыРег.СуммаРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ВременнаяТаблица_ДанныеПослеГруппировки.Период КАК Период,
		|	ВременнаяТаблица_ДанныеПослеГруппировки.Организация КАК Организация,
		|	ВременнаяТаблица_ДанныеПослеГруппировки.ТипРасчетов КАК ТипРасчетов,
		|	ВременнаяТаблица_ДанныеПослеГруппировки.Контрагент КАК Контрагент,
		|	ВременнаяТаблица_ДанныеПослеГруппировки.Договор КАК Договор,
		|	ВременнаяТаблица_ДанныеПослеГруппировки.Документ КАК Документ,
		|	ВременнаяТаблица_ДанныеПослеГруппировки.Заказ КАК Заказ,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблица_ДанныеПослеГруппировки.СуммаРасчетов = -ВременнаяТаблица_ДанныеПослеГруппировки.СуммаВалОстаток
		|			ТОГДА -ВременнаяТаблица_ДанныеПослеГруппировки.СуммаРегОстаток
		|		ИНАЧЕ -ВременнаяТаблица_ДанныеПослеГруппировки.СуммаРегОстаток * ВременнаяТаблица_ДанныеПослеГруппировки.СуммаРасчетов / ВЫБОР
		|				КОГДА ВременнаяТаблица_ДанныеПослеГруппировки.СуммаВалОстаток = 0
		|					ТОГДА 1
		|				ИНАЧЕ -ВременнаяТаблица_ДанныеПослеГруппировки.СуммаВалОстаток
		|			КОНЕЦ
		|	КОНЕЦ КАК СуммаРег
		|ИЗ
		|	ВременнаяТаблица_ДанныеПослеГруппировки КАК ВременнаяТаблица_ДанныеПослеГруппировки";
	
	Запрос.УстановитьПараметр("Контрагент", ДокументСсылка.Контрагент);
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(ДокументСсылка.Организация));
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("КонстантыНациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ТаблицаДвижений = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПокупателями;
	
	Если ТаблицаДвижений.Колонки.Найти("СуммаРег") = Неопределено Тогда
		ТаблицаДвижений.Колонки.Добавить("СуммаРег", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьТаблицуВзаиморасчетовСУчетомАвансов(ДокументСсылка, СтруктураДополнительныеСвойства, ЭтоРасчетыСПоставщиком) Экспорт
	
	// Определяем необходимость обработки таблиц
	Если НЕ СтруктураДополнительныеСвойства.УчетВалютныхОпераций Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВременнойТаблицыПредоплата = "ВременнаяТаблицаПредоплата";
	ИмяВременнойТаблицыРасчетов = ?(ЭтоРасчетыСПоставщиком, "ВременнаяТаблицаРасчетыСПоставщиками", "ВременнаяТаблицаРасчетыСПокупателями");
	ТаблицаВзаиморасчетов = ПолучитьВременнуюТаблицуПоИмени(ИмяВременнойТаблицыРасчетов, СтруктураДополнительныеСвойства);
	ТаблицаАвансов = ПолучитьВременнуюТаблицуПоИмени(ИмяВременнойТаблицыПредоплата, СтруктураДополнительныеСвойства);
	
	СтрокиАванса = ТаблицаВзаиморасчетов.НайтиСтроки(Новый Структура("ТипРасчетов", Перечисления.ТипыРасчетов.Аванс));
	
	Если СтрокиАванса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор",ДокументСсылка);
	Запрос.УстановитьПараметр("Договор", ДокументСсылка.Договор);
	Запрос.УстановитьПараметр("Контрагент", ДокументСсылка.Контрагент);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремениДокумента", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени); 
	Запрос.УстановитьПараметр("Заказы", ТаблицаВзаиморасчетов.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Оплаты", ТаблицаАвансов.ВыгрузитьКолонку("Документ"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыСПокупателямиОстатки.Организация КАК Организация,
	|	РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|	РасчетыСПокупателямиОстатки.ТипРасчетов КАК ТипРасчетов,
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	-РасчетыСПокупателямиОстатки.СуммаОстаток КАК СуммаОстаток,
	|	-РасчетыСПокупателямиОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
	|	-РасчетыСПокупателямиОстатки.СуммаРегОстаток КАК СуммаРегОстаток
	|ПОМЕСТИТЬ ВТ_Авансы
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(
	|			,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент
	|				И Договор = &Договор
	|				И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|				И Заказ В (&Заказы)
	|				И (Документ.МоментВремени < &МоментВремениДокумента
	|					ИЛИ НЕ Контрагент.ВестиРасчетыПоДокументам
	|					ИЛИ Документ В (&Оплаты))) КАК РасчетыСПокупателямиОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПокупателями.Организация,
	|	РасчетыСПокупателями.Контрагент,
	|	РасчетыСПокупателями.Договор,
	|	РасчетыСПокупателями.ТипРасчетов,
	|	РасчетыСПокупателями.Документ,
	|	РасчетыСПокупателями.Заказ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСПокупателями.Сумма
	|		ИНАЧЕ -РасчетыСПокупателями.Сумма
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСПокупателями.СуммаВал
	|		ИНАЧЕ -РасчетыСПокупателями.СуммаВал
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСПокупателями.СуммаРег
	|		ИНАЧЕ -РасчетыСПокупателями.СуммаРег
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	РасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|	И РасчетыСПокупателями.Организация = &Организация
	|	И РасчетыСПокупателями.Контрагент = &Контрагент
	|	И РасчетыСПокупателями.Договор = &Договор
	|	И РасчетыСПокупателями.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Авансы.Организация КАК Организация,
	|	ВТ_Авансы.Контрагент КАК Контрагент,
	|	ВТ_Авансы.Договор КАК Договор,
	|	ВТ_Авансы.ТипРасчетов КАК ТипРасчетов,
	|	ВТ_Авансы.Документ КАК Документ,
	|	ВТ_Авансы.Заказ КАК Заказ,
	|	СУММА(ВТ_Авансы.СуммаОстаток) КАК Сумма,
	|	СУММА(ВТ_Авансы.СуммаВалОстаток) КАК СуммаВал,
	|	СУММА(ВТ_Авансы.СуммаРегОстаток) КАК СуммаРег
	|ИЗ
	|	ВТ_Авансы КАК ВТ_Авансы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Авансы.Организация,
	|	ВТ_Авансы.Контрагент,
	|	ВТ_Авансы.Договор,
	|	ВТ_Авансы.ТипРасчетов,
	|	ВТ_Авансы.Документ,
	|	ВТ_Авансы.Заказ
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Авансы.СуммаВалОстаток) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказ,
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если ЭтоРасчетыСПоставщиком Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыСПокупателями", "РасчетыСПоставщиками");
	КонецЕсли;
	
	ОстаткиАвансовВРегистре = Запрос.Выполнить().Выгрузить();
	
	// Если списывается остаток СуммаВал, списываем все остальные ресурсы
	СтруктураОтбора = Новый Структура("Организация,Контрагент,Договор,ТипРасчетов,Документ,Заказ");
	Для каждого СтрокаРучногоАванса Из СтрокиАванса Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаРучногоАванса);
		
		МассивОстатков = ОстаткиАвансовВРегистре.НайтиСтроки(СтруктураОтбора);
		
		Для каждого СтрокаОстатка Из МассивОстатков Цикл
			Если СтрокаРучногоАванса.СуммаВал = СтрокаОстатка.СуммаВал Тогда
				
				СтрокаРучногоАванса.Сумма = СтрокаОстатка.Сумма;
				СтрокаРучногоАванса.СуммаРег = СтрокаОстатка.СуммаРег;
				ОстаткиАвансовВРегистре.Удалить(СтрокаОстатка);
				Прервать;
				
			Иначе
				
				Если СтруктураДополнительныеСвойства.НациональнаяВалюта = СтруктураДополнительныеСвойства.ВалютаУчета Тогда
					СтрокаРучногоАванса.СуммаРег = СтрокаРучногоАванса.Сумма;
				ИначеЕсли СтруктураДополнительныеСвойства.НациональнаяВалюта = ДокументСсылка.Договор.ВалютаРасчетов Тогда
					СтрокаРучногоАванса.СуммаРег = СтрокаРучногоАванса.СуммаВал;
				Иначе
					СтрокаРучногоАванса.СуммаРег = Окр(СтрокаРучногоАванса.СуммаВал * СтрокаРучногоАванса.Курс / СтрокаРучногоАванса.Кратность, 2);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла; 
		
	КонецЦикла;
	
	// Итоги по авансам с учетом остатков
	АвансСуммаВал = 0;
	АвансСумма	  = 0;
	АвансСуммаРег = 0;
	
	Для каждого СтрокаАванса Из СтрокиАванса Цикл
		АвансСуммаВал = АвансСуммаВал + СтрокаАванса.СуммаВал;
		АвансСумма 	  = АвансСумма + СтрокаАванса.Сумма;
		АвансСуммаРег = АвансСуммаРег + СтрокаАванса.СуммаРег;
	КонецЦикла;
	
	// Пересчет долга по данным закрытых авансов
	СтрокиЗакрытогоДолга = ТаблицаВзаиморасчетов.НайтиСтроки(Новый Структура("ТипРасчетов, ВидДвижения", Перечисления.ТипыРасчетов.Долг, ВидДвиженияНакопления.Расход));
	Для каждого СтрокаДолга Из СтрокиЗакрытогоДолга Цикл
		Если АвансСуммаВал = СтрокаДолга.СуммаВал Тогда
			СтрокаДолга.Сумма = АвансСумма;
			Если СтрокаДолга.СуммаРег <> 0 Тогда
				СтрокаДолга.СуммаРег = АвансСуммаРег;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиДолга = ТаблицаВзаиморасчетов.НайтиСтроки(Новый Структура("ТипРасчетов, ВидДвижения", Перечисления.ТипыРасчетов.Долг, ВидДвиженияНакопления.Приход));
	Если ДокументСсылка.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
		Для каждого СтрокаДолга Из СтрокиДолга Цикл
			Если СтрокаДолга.СуммаВал >= АвансСуммаВал Тогда
				ОстатокДолгаВал = СтрокаДолга.СуммаВал - АвансСуммаВал;
				ОстатокДолга	= ОстатокДолгаВал * (СтрокаДолга.Сумма / СтрокаДолга.СуммаВал);
				ОстатокДолгаРег = ?(СтрокаДолга.СуммаРег = 0, 0, ОстатокДолгаВал * (СтрокаДолга.СуммаРег / СтрокаДолга.СуммаВал));
				СтрокаДолга.СуммаВал = ОстатокДолгаВал + АвансСуммаВал;
				СтрокаДолга.Сумма	 = ОстатокДолга    + АвансСумма;
				СтрокаДолга.СуммаРег = ?(СтрокаДолга.СуммаРег = 0, 0, ОстатокДолгаРег + АвансСуммаРег);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДолгСумма 	 = 0;
	ДолгСуммаВал = 0;
	Для каждого СтрокаДолга Из СтрокиДолга Цикл
		ДолгСуммаВал = ДолгСуммаВал + СтрокаДолга.СуммаВал;
		ДолгСумма 	  = ДолгСумма + СтрокаДолга.Сумма;
	КонецЦикла;
	
	// Обновление данных прочих таблиц по результатам пересчитанных взаиморасчетов
	ВременныеТаблицы = Новый Структура;
	
	ВременныеТаблицы.Вставить(ИмяВременнойТаблицыРасчетов, ТаблицаВзаиморасчетов);
	ВременныеТаблицы.Вставить("ВременнаяТаблицаПредоплата", ПолучитьВременнуюТаблицуПоИмени("ВременнаяТаблицаПредоплата", СтруктураДополнительныеСвойства));
	РаспределитьСуммуПоКолонкеТаблицы(АвансСумма, ВременныеТаблицы.ВременнаяТаблицаПредоплата, "Сумма", "СуммаВал");

	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ДополнительныеРасходы") Тогда
		
		ВременныеТаблицы.Вставить("ВременнаяТаблицаРасходы", ПолучитьВременнуюТаблицуПоИмени("ВременнаяТаблицаРасходы", СтруктураДополнительныеСвойства));
		ВременныеТаблицы.Вставить("ВременнаяТаблицаЗапасы", ПолучитьВременнуюТаблицуПоИмени("ВременнаяТаблицаЗапасы", СтруктураДополнительныеСвойства));
		
		РаспределитьСуммуПоКолонкеТаблицы(ДолгСумма, ВременныеТаблицы.ВременнаяТаблицаРасходы, "Сумма", "Сумма");
		РаспределитьСуммуПоКолонкеТаблицы(ДолгСумма, ВременныеТаблицы.ВременнаяТаблицаЗапасы, "СуммаРасходов", "СуммаРасходовВал");
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		
		ВременныеТаблицы.Вставить("ВременнаяТаблицаЗапасы", ПолучитьВременнуюТаблицуПоИмени("ВременнаяТаблицаЗапасы", СтруктураДополнительныеСвойства));
		
		СуммаСВознаграждением = ДолгСумма + ВременныеТаблицы.ВременнаяТаблицаЗапасы.Итог("СуммаВознаграждения");
		РаспределитьСуммуПоКолонкеТаблицы(ДолгСумма, ВременныеТаблицы.ВременнаяТаблицаЗапасы, "Себестоимость", "СуммаРасчетовПринятыеПереданные");
		РаспределитьСуммуПоКолонкеТаблицы(СуммаСВознаграждением, ВременныеТаблицы.ВременнаяТаблицаЗапасы, "Сумма", "СуммаРасчетовПринятыеПереданные");
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		
		ВременныеТаблицы.Вставить("ВременнаяТаблицаЗапасы", ПолучитьВременнуюТаблицуПоИмени("ВременнаяТаблицаЗапасы", СтруктураДополнительныеСвойства));
		
		СуммаСВознаграждением = ДолгСумма + ВременныеТаблицы.ВременнаяТаблицаЗапасы.Итог("СуммаВознаграждения");
		РаспределитьСуммуПоКолонкеТаблицы(СуммаСВознаграждением, ВременныеТаблицы.ВременнаяТаблицаЗапасы, "Сумма", "СуммаВал");
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
		
		ВременныеТаблицы.Вставить("ВременнаяТаблицаЗапасыДляРасчетов", ПолучитьВременнуюТаблицуПоИмени("ВременнаяТаблицаЗапасыДляРасчетов", СтруктураДополнительныеСвойства));
		РаспределитьСуммуПоКолонкеТаблицы(ДолгСумма, ВременныеТаблицы.ВременнаяТаблицаЗапасыДляРасчетов, "Сумма", "СуммаВал");
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетОПереработке") ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
		
		ВременныеТаблицы.Вставить("ВременнаяТаблицаПродукция", ПолучитьВременнуюТаблицуПоИмени("ВременнаяТаблицаПродукция", СтруктураДополнительныеСвойства));
		РаспределитьСуммуПоКолонкеТаблицы(ДолгСумма, ВременныеТаблицы.ВременнаяТаблицаПродукция, "Сумма", "СуммаВал");
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаВА") Тогда
		
		ВременныеТаблицы.Вставить("ВременнаяТаблицаВнеоборотныеАктивы", ПолучитьВременнуюТаблицуПоИмени("ВременнаяТаблицаВнеоборотныеАктивы", СтруктураДополнительныеСвойства));
		РаспределитьСуммуПоКолонкеТаблицы(ДолгСумма, ВременныеТаблицы.ВременнаяТаблицаВнеоборотныеАктивы, "Сумма", "СуммаВал");
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриемИПередачаВРемонт") Тогда
		
		ВременныеТаблицы.Вставить("ВременнаяТаблицаЗапасы", ПолучитьВременнуюТаблицуПоИмени("ВременнаяТаблицаЗапасы", СтруктураДополнительныеСвойства));
		РаспределитьСуммуПоКолонкеТаблицы(ДолгСумма, ВременныеТаблицы.ВременнаяТаблицаЗапасы, "Сумма", "СуммаВал");
		
	КонецЕсли;
	
	ТекстЗаменыВременнойТаблицы = 
	"УНИЧТОЖИТЬ ИмяТаблицы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|	ВЫБРАТЬ * ПОМЕСТИТЬ ИмяТаблицы ИЗ &ИмяТаблицы КАК ИмяТаблицы 
	|;
	|";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Для каждого КлючЗначение Из ВременныеТаблицы Цикл
		Запрос.Текст = Запрос.Текст + СтрЗаменить(ТекстЗаменыВременнойТаблицы, "ИмяТаблицы", КлючЗначение.Ключ);
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла; 
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОбновитьСуммыВНациональнойВалюте(НаборЗаписей) Экспорт
	
	Если УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета() = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
		Для каждого СтрокаНабора Из НаборЗаписей Цикл
			Если СтрокаНабора.СуммаРег <> СтрокаНабора.Сумма Тогда
				СтрокаНабора.СуммаРег = СтрокаНабора.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеДокументовПозжеТекущего

Функция ПолучитьДанныеДляЗаполненияТЧПредоплата(пДокумент, пЭтоРасчетыСПоставщиком)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСПокупателями.Заказ,
		|	РасчетыСПокупателями.Документ,
		|	СУММА(РасчетыСПокупателями.СуммаВал) КАК СуммаРасчетов,
		|	СУММА(РасчетыСПокупателями.СуммаРег) КАК СуммаРег,
		|	РасчетыСПокупателями.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
		|	0 КАК СуммаПлатежа,
		|	0 КАК Курс,
		|	0 КАК Кратность,
		|	НациональнаяВалюта.Значение КАК НациональнаяВалюта
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями,
		|	Константа.НациональнаяВалюта КАК НациональнаяВалюта
		|ГДЕ
		|	РасчетыСПокупателями.Регистратор = &ДокументСсылка
		|	И РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовАванс
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПокупателями.Заказ,
		|	РасчетыСПокупателями.Документ,
		|	РасчетыСПокупателями.Договор.ВалютаРасчетов,
		|	НациональнаяВалюта.Значение
		|
		|ИМЕЮЩИЕ
		|	СУММА(РасчетыСПокупателями.СуммаВал) <> 0";
	
	Запрос.УстановитьПараметр("ДокументСсылка", пДокумент.Ссылка);
	Запрос.УстановитьПараметр("ВалютаДокумента", пДокумент.ВалютаДокумента);
	Запрос.УстановитьПараметр("ТипРасчетовАванс", Перечисления.ТипыРасчетов.Аванс);
	Запрос.УстановитьПараметр("ПериодСрезаПоследних", пДокумент.Дата);
	
	Если пЭтоРасчетыСПоставщиком Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыСПокупателями", "РасчетыСПоставщиками");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗПредоплата = РезультатЗапроса.Выгрузить();
	
	Для Каждого ТекущаяСтрока Из ТЗПредоплата Цикл
		
		Если пДокумент.ВалютаДокумента = ТекущаяСтрока.НациональнаяВалюта Тогда
			Если ТекущаяСтрока.СуммаРег = 0 Тогда
				ТекущаяСтрока.Курс = ?(пДокумент.Курс = 0 , 1, пДокумент.Курс);
				ТекущаяСтрока.Кратность = ?(пДокумент.Кратность = 0, 1, пДокумент.Кратность);
				ТекущаяСтрока.СуммаПлатежа = ТекущаяСтрока.СуммаРасчетов * ТекущаяСтрока.Курс / ТекущаяСтрока.Кратность;
			Иначе
				ТекущаяСтрока.Кратность = ?(пДокумент.Кратность = 0, 1, пДокумент.Кратность);
				ТекущаяСтрока.Курс = Окр(ТекущаяСтрока.СуммаРег * ТекущаяСтрока.Кратность / ТекущаяСтрока.СуммаРасчетов, 4);
				ТекущаяСтрока.СуммаПлатежа = ТекущаяСтрока.СуммаРег;
			КонецЕсли;
		Иначе // Валюта документа и валюта расчетов равны.
			Если ТекущаяСтрока.СуммаРег = 0 Тогда
				ТекущаяСтрока.Курс = ?(пДокумент.Курс = 0 , 1, пДокумент.Курс);
				ТекущаяСтрока.Кратность = ?(пДокумент.Кратность = 0, 1, пДокумент.Кратность);
				ТекущаяСтрока.СуммаПлатежа = ТекущаяСтрока.СуммаРасчетов;
			Иначе
				ТекущаяСтрока.Кратность = ?(пДокумент.Кратность = 0, 1, пДокумент.Кратность);
				ТекущаяСтрока.Курс = Окр(ТекущаяСтрока.СуммаРег * ТекущаяСтрока.Кратность / ТекущаяСтрока.СуммаРасчетов, 4);
				ТекущаяСтрока.СуммаПлатежа = ТекущаяСтрока.СуммаРег / ?(пДокумент.Курс = 0 , 1, пДокумент.Курс) * ?(пДокумент.Кратность = 0, 1, пДокумент.Кратность);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТЗПредоплата;
	
КонецФункции

Функция ПолучитьДанныеДляЗаполненияТЧРасшифровкаПлатежа(пДокумент, пЭтоРасчетыСПоставщиком, пДоговор)
	
	ТЗ_РасшифровкаПлатежа = пДокумент.РасшифровкаПлатежа.Выгрузить();
	МассивСтрокДляУдаления = Новый Массив;
	
	Для Каждого ТекущаяСтрокаРасшифровки Из ТЗ_РасшифровкаПлатежа Цикл
		Если ТекущаяСтрокаРасшифровки.Договор = пДоговор
			И ТекущаяСтрокаРасшифровки.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
			МассивСтрокДляУдаления.Добавить(ТекущаяСтрокаРасшифровки);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляУдаления.Количество() = 0 Тогда
		// Документ содержит только строки со способом "Вручную".
		Возврат Неопределено;
	КонецЕсли;
	
	// 1. Получим данные автораспределения из движений.
	// 2. Заполним данные движений значениями СтатьиДДС и ДокументаПланирования из строки расшифровки.
	// 3. Удалим строки расшифровки с автоматическим распределением.
	// 4. Добавим строки по данным движений.
	
	// 1.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыСПокупателями.Заказ КАК Заказ,
	|	РасчетыСПокупателями.Документ КАК Документ,
	|	РасчетыСПокупателями.СуммаВал КАК СуммаРасчетов,
	|	РасчетыСПокупателями.СуммаПлатежа КАК СуммаПлатежа,
	|	РасчетыСПокупателями.Курс КАК Курс,
	|	РасчетыСПокупателями.Кратность КАК Кратность,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную) КАК СпособЗачета,
	|	РасчетыСПокупателями.ИндексСтрокиДокумента КАК ИндексСтрокиДокумента,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакАванса,
	|	РасчетыСПокупателями.СуммаНДС КАК СуммаНДС,
	|	РасчетыСПокупателями.СтавкаНДС КАК СтавкаНДС,
	|	РасчетыСПокупателями.Договор КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяДДС,
	|	НЕОПРЕДЕЛЕНО КАК ДокументПланирования
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	РасчетыСПокупателями.Регистратор = &ДокументСсылка
	|	И РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РасчетыСПокупателями.СпособЗачета = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто)
	|	И РасчетыСПокупателями.СуммаВал <> 0
	|	И РасчетыСПокупателями.Договор = &Договор";
	
	Запрос.УстановитьПараметр("ДокументСсылка", пДокумент.Ссылка);
	Запрос.УстановитьПараметр("Договор", пДоговор);
	
	Если пЭтоРасчетыСПоставщиком Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыСПокупателями", "РасчетыСПоставщиками");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗДвиженийАвто = РезультатЗапроса.Выгрузить();
	
	// 2.
	Для Каждого ТекущаяСтрокаДвижения Из ТЗДвиженийАвто Цикл
		
		Если ТекущаяСтрокаДвижения.ИндексСтрокиДокумента < ТЗ_РасшифровкаПлатежа.Количество() Тогда
			ЗаполнитьЗначенияСвойств(
				ТекущаяСтрокаДвижения,
				ТЗ_РасшифровкаПлатежа[ТекущаяСтрокаДвижения.ИндексСтрокиДокумента],
				"СтатьяДДС, ДокументПланирования"
			);
		КонецЕсли;
		
	КонецЦикла;
	
	// 3.
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		ТЗ_РасшифровкаПлатежа.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	// 4.
	Для Каждого ТекущаяСтрокаДвижения Из ТЗДвиженийАвто Цикл
		НоваяСтрока = ТЗ_РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаДвижения);
	КонецЦикла;
	
	// Вернем новый вариант расшифровки платежа.
	Возврат ТЗ_РасшифровкаПлатежа;
	
КонецФункции

Процедура ПередЗаписьюНакладной(пДокумент, пМассивДоступныхОпераций = Неопределено) Экспорт
	
	Если пДокумент.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
		пДокумент.Предоплата.Очистить();
	КонецЕсли;
	
	Если пМассивДоступныхОпераций <> Неопределено И пМассивДоступныхОпераций.Найти(пДокумент.ВидОперации) = Неопределено Тогда
		пДокумент.Предоплата.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДанныеОЗачетеТекущегоДокумента(ДополнительныеСвойства, ДокументОбъект)
	
	МассивСтрокДляУдаления = ДокументОбъект.Предоплата.НайтиСтроки(Новый Структура("Документ", ДополнительныеСвойства.ДляПроведения.Ссылка));
	СписокСтрокДляУдаления = Новый СписокЗначений;
	Для Каждого ТекущаяСтрока Из МассивСтрокДляУдаления Цикл
		СписокСтрокДляУдаления.Добавить(ДокументОбъект.Предоплата.Индекс(ТекущаяСтрока));
	КонецЦикла;
	СписокСтрокДляУдаления.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	Для Каждого ТекущаяСтрока Из СписокСтрокДляУдаления Цикл
		ДокументОбъект.Предоплата.Удалить(ТекущаяСтрока.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьЗаказ(ДополнительныеСвойства, НоваяСтрокаПредоплата);
	
	// Возможен следующий сценарий:
	// 1. 10.01. Оплата без заказа.
	// 2. 01.01. Задним числом оформлена РН по заказу.
	// 2*. 01.01. Задним числом зачитывается оплата в заказ-наряде. Заказ наряд нужно указывать в колонке "Заказ" и в
	// колонке "Документ". В РН вызывается Помощник и там отмечается оплата.
	// Т.к. оплата без заказа, то в ней нужно указать заказ.
	// Если заказ в шапке, то это можно сделать здесь.
	// Если заказ в ТЧ, то с такой оплатой ничего пока не делаем.
	ПоложениеЗаказа = Неопределено;
	ЗаказИзШапки = Неопределено;
	Если ДополнительныеСвойства.ПараметрыДокумента.ЭтоОтгрузка Тогда
		ЗаказИзШапки = ДополнительныеСвойства.ДляПроведения.Ссылка[ДополнительныеСвойства.ИмяРеквизитаЗаказ];
		Если ДополнительныеСвойства.ДляПроведения.Ссылка.Метаданные().Реквизиты.Найти("ПоложениеЗаказаПокупателя") <> Неопределено Тогда
			ПоложениеЗаказа = ДополнительныеСвойства.ДляПроведения.Ссылка.ПоложениеЗаказаПокупателя;
		ИначеЕсли ДополнительныеСвойства.ПараметрыДокумента.ЭтоЗаказНаряд Тогда
			ПоложениеЗаказа = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоложениеЗаказа <> Неопределено Тогда
		Если ПоложениеЗаказа = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			НоваяСтрокаПредоплата.Заказ = ЗаказИзШапки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьУдалитьДанныеОбОплатеНакладной(ДокументОбъект, ДополнительныеСвойства, РаспределитьСуммуРасчетов, ТекущаяСтрокаПредоплата, ВариантИзмененияДанных)
	
	БылиДобавленияСтрок = Ложь;
	Если РаспределитьСуммуРасчетов = 0 Или ТекущаяСтрокаПредоплата.СуммаРасчетов = 0 Тогда
		Возврат БылиДобавленияСтрок;
	КонецЕсли;
	
	Если ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Удаление") Тогда
		// Строка подходит, если содержит обрабатываемый документ.
		// В 1-ом цикле мы все такие строки зачищаем.
		ТекущаяСтрокаПредоплата.Документ = Неопределено;
		ТекущаяСтрокаПредоплата.ПризнакАванса = Истина;
		ТекущаяСтрокаПредоплата.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
		Если ДополнительныеСвойства.ПараметрыДокумента.ЭтоЗаказ Тогда
			ТекущаяСтрокаПредоплата.Заказ = Неопределено;
		КонецЕсли;
	ИначеЕсли РаспределитьСуммуРасчетов >= ТекущаяСтрокаПредоплата.СуммаРасчетов Тогда
		Если ДополнительныеСвойства.ПараметрыДокумента.ЭтоЗаказ Тогда
			ТекущаяСтрокаПредоплата.Документ = Неопределено;
			ТекущаяСтрокаПредоплата.ПризнакАванса = Истина;
			ТекущаяСтрокаПредоплата.Заказ = ДополнительныеСвойства.ДляПроведения.Ссылка;
		Иначе
			ТекущаяСтрокаПредоплата.Документ = ДополнительныеСвойства.ДляПроведения.Ссылка;
			ТекущаяСтрокаПредоплата.ПризнакАванса = Ложь;
			ОпределитьЗаказ(ДополнительныеСвойства, ТекущаяСтрокаПредоплата);
		КонецЕсли;
		ТекущаяСтрокаПредоплата.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
		РаспределитьСуммуРасчетов = РаспределитьСуммуРасчетов - ТекущаяСтрокаПредоплата.СуммаРасчетов;
	Иначе
		// Разобьем одну строку на 2.
		// Новая строка.
		НоваяСтрокаПредоплата = ДокументОбъект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПредоплата, ТекущаяСтрокаПредоплата);
		Если ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Добавление") Тогда
			Если ДополнительныеСвойства.ПараметрыДокумента.ЭтоЗаказ Тогда
				НоваяСтрокаПредоплата.Заказ = ДополнительныеСвойства.ДляПроведения.Ссылка;
				НоваяСтрокаПредоплата.Документ = Неопределено;
				НоваяСтрокаПредоплата.ПризнакАванса = Истина;
			Иначе
				НоваяСтрокаПредоплата.Документ = ДополнительныеСвойства.ДляПроведения.Ссылка;
				НоваяСтрокаПредоплата.ПризнакАванса = Ложь;
				ОпределитьЗаказ(ДополнительныеСвойства, НоваяСтрокаПредоплата);
			КонецЕсли;
		ИначеЕсли ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Удаление") Тогда
			НоваяСтрокаПредоплата.Документ = Неопределено;
			НоваяСтрокаПредоплата.ПризнакАванса = Истина;
			Если ДополнительныеСвойства.ПараметрыДокумента.ЭтоЗаказ Тогда
				НоваяСтрокаПредоплата.Заказ = Неопределено;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрокаПредоплата.СуммаРасчетов = РаспределитьСуммуРасчетов;
		вСуммаПлатежа = (ТекущаяСтрокаПредоплата.СуммаПлатежа / ТекущаяСтрокаПредоплата.СуммаРасчетов * РаспределитьСуммуРасчетов);
		НоваяСтрокаПредоплата.СуммаПлатежа = вСуммаПлатежа; //Окр(вСуммаПлатежа, "ЧДЦ=2");
		НоваяСтрокаПредоплата.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
		
		// Существующая строка.
		ТекущаяСтрокаПредоплата.СуммаРасчетов = ТекущаяСтрокаПредоплата.СуммаРасчетов - НоваяСтрокаПредоплата.СуммаРасчетов;
		ТекущаяСтрокаПредоплата.СуммаПлатежа = ТекущаяСтрокаПредоплата.СуммаПлатежа - НоваяСтрокаПредоплата.СуммаПлатежа;
		
		РаспределитьСуммуРасчетов = 0;
		БылиДобавленияСтрок = Истина;
	КонецЕсли;
	
	Возврат БылиДобавленияСтрок;
	
КонецФункции

Функция ОбработатьСтрокуРасшифровкиПлатежаПоДаннымИзменения(ДокументОбъект, ДополнительныеСвойства, РаспределитьСуммуРасчетов, ТекущаяСтрокаПредоплата, ТекущаяСтрока, ВариантИзмененияДанных)
	
	Если ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Добавление")
		ИЛИ ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Удаление") Тогда
		Возврат ДобавитьУдалитьДанныеОбОплатеНакладной(ДокументОбъект, ДополнительныеСвойства, РаспределитьСуммуРасчетов, ТекущаяСтрокаПредоплата, ВариантИзмененияДанных);
	ИначеЕсли ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Изменение") Тогда
		ВызватьИсключение НСтр("ru = 'Неверный вариант изменения данных.'");
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция НужноОбрабатыватьСтрокуПриДобавлении(ТекущаяСтрока, ТекущаяСтрокаПредоплата)
	
	Возврат НЕ ЗначениеЗаполнено(ТекущаяСтрокаПредоплата.Документ)
		И ?(ЗначениеЗаполнено(ТекущаяСтрокаПредоплата.Заказ), ТекущаяСтрокаПредоплата.Заказ, Неопределено)
		= ?(ЗначениеЗаполнено(ТекущаяСтрока.Заказ), ТекущаяСтрока.Заказ, Неопределено)
	;
	
КонецФункции

Функция НужноОбрабатыватьСтрокуПриИзмененииУдалении(ТекущаяСтрока, ТекущаяСтрокаПредоплата, ДокументСсылка)
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПокупателя")
		И ДокументСсылка.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		Возврат НЕ ЗначениеЗаполнено(ТекущаяСтрокаПредоплата.Документ)
			И ?(ЗначениеЗаполнено(ТекущаяСтрокаПредоплата.Заказ), ТекущаяСтрокаПредоплата.Заказ, Неопределено)
			= ?(ЗначениеЗаполнено(ТекущаяСтрока.Заказ), ТекущаяСтрока.Заказ, Неопределено)
		;
	Иначе
		Возврат ТекущаяСтрокаПредоплата.Документ = ДокументСсылка
			И ?(ЗначениеЗаполнено(ТекущаяСтрокаПредоплата.Заказ), ТекущаяСтрокаПредоплата.Заказ, Неопределено)
			= ?(ЗначениеЗаполнено(ТекущаяСтрока.Заказ), ТекущаяСтрока.Заказ, Неопределено)
		;
	КонецЕсли;
	
КонецФункции

Процедура СвернутьТабличнуюЧасть(пДокументОбъект, пИмяТабличнойЧасти)
	
	СтрокаКолонок = "";
	
	Для Каждого ТекущаяКолонка Из пДокументОбъект.Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты Цикл
		Если ТекущаяКолонка.Имя = "СуммаПлатежа" Или ТекущаяКолонка.Имя = "СуммаРасчетов" Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаКолонок = "" Тогда
			СтрокаКолонок = ТекущаяКолонка.Имя;
		Иначе
			СтрокаКолонок = СтрокаКолонок + ", " + ТекущаяКолонка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаКолонок <> "" Тогда
		пДокументОбъект.РасшифровкаПлатежа.Свернуть(СтрокаКолонок, "СуммаПлатежа, СуммаРасчетов");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиРасшифровкуПлатежа(пРасшифровкаПлатежа)
	
	Если пРасшифровкаПлатежа.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Расшифровка платежа не заполнена.'"));
	Иначе
		Для каждого ТекущаяСтрока Из пРасшифровкаПлатежа Цикл
			ПредставлениеСтроки = ""+ТекущаяСтрока.НомерСтроки + ". " + ?(ТекущаяСтрока.ПризнакАванса, НСтр("ru = 'Предоплата '"), НСтр("ru = 'Оплата '"))
				+ ТекущаяСтрока.СпособЗачета + НСтр("ru = ' на '") + ТекущаяСтрока.СуммаПлатежа
				+ НСтр("ru = ' по договору '") + ТекущаяСтрока.Договор
				+ ?(ЗначениеЗаполнено(ТекущаяСтрока.Заказ), НСтр("ru = ' по заказу '") + ТекущаяСтрока.Заказ, "")
				+ ?(ЗначениеЗаполнено(ТекущаяСтрока.Документ), НСтр("ru = ' по документу '") + ТекущаяСтрока.Документ, "")
			;
			Сообщить(ПредставлениеСтроки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработкаТаблицыИзменяемыхДокументов

Процедура ОбработатьТаблицуДокументовДляИзмененияПриОплате(ДополнительныеСвойства, Отказ) Экспорт
	
	ТаблицаДокументовДляИзменения = ДополнительныеСвойства.ТаблицаДокументовДляИзменения;
	
	// Национальная валюта. Курс и кратность.
	КурсКратностьНациональнойВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
		ДополнительныеСвойства.ДляПроведения.МоментВремени,
		Новый Структура("Валюта", Константы.НациональнаяВалюта.Получить())
	);
	КурсКратностьНациональнойВалюты.Курс = ?(КурсКратностьНациональнойВалюты.Курс = 0 , 1, КурсКратностьНациональнойВалюты.Курс);
	КурсКратностьНациональнойВалюты.Кратность = ?(КурсКратностьНациональнойВалюты.Кратность = 0, 1, КурсКратностьНациональнойВалюты.Кратность);
	
	Для Каждого ТекущаяСтрока Из ТаблицаДокументовДляИзменения Цикл
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
			ВызватьИсключение НСтр("ru = 'Не выбран документ для зачёта предоплаты.'");
		КонецЕсли;
		
		ДокументОбъект = ТекущаяСтрока.Документ.ПолучитьОбъект();
		Если ТекущаяСтрока.Документ.Метаданные().Реквизиты.Найти("СпособЗачетаПредоплаты") <> Неопределено Тогда
			Если ДокументОбъект.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
				// Переводим в режим "Вручную" и переносим информацию о зачёте предоплаты из движений в ТЧ Предоплата.
				ДокументОбъект.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
				ДокументОбъект.Предоплата.Загрузить(ПолучитьДанныеДляЗаполненияТЧПредоплата(ДокументОбъект, ДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком));
			КонецЕсли;
		КонецЕсли;
		
		// Удалим данные о зачёте исходного документа.
		Если ТекущаяСтрока.ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Удаление")
			ИЛИ ТекущаяСтрока.ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Изменение") Тогда
			УдалитьДанныеОЗачетеТекущегоДокумента(ДополнительныеСвойства, ДокументОбъект);
		КонецЕсли;
		
		// Добавим данные из нашей таблицы.
		Если ТекущаяСтрока.ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Добавление")
			ИЛИ ТекущаяСтрока.ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Изменение") Тогда
			НоваяСтрокаПредоплата = ДокументОбъект.Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПредоплата, ТекущаяСтрока,, "Документ");
			НоваяСтрокаПредоплата.Документ = ДополнительныеСвойства.ДляПроведения.Ссылка;
			Если НЕ ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
				НоваяСтрокаПредоплата.СуммаПлатежа = НоваяСтрокаПредоплата.СуммаРасчетов;
			ИначеЕсли ДокументОбъект.ВалютаДокумента = Константы.НациональнаяВалюта.Получить() Тогда
				НоваяСтрокаПредоплата.СуммаПлатежа = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
					НоваяСтрокаПредоплата.СуммаРасчетов,
					НоваяСтрокаПредоплата.Курс,
					КурсКратностьНациональнойВалюты.Курс,
					НоваяСтрокаПредоплата.Кратность,
					КурсКратностьНациональнойВалюты.Кратность
				);
			Иначе
				// Национальная валюта. Курс и кратность.
				НоваяСтрокаПредоплата.СуммаПлатежа = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
					НоваяСтрокаПредоплата.СуммаРасчетов,
					НоваяСтрокаПредоплата.Курс,
					ДокументОбъект.Курс,
					НоваяСтрокаПредоплата.Кратность,
					ДокументОбъект.Кратность
				);
			КонецЕсли;
		КонецЕсли;
		
		// Попытаемся провести документ.
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			Отказ = Истина;
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьТаблицуДокументовДляИзмененияПриОтгрузке(ДополнительныеСвойства, Отказ) Экспорт
	
	ТаблицаДокументовДляИзменения = ДополнительныеСвойства.ТаблицаДокументовДляИзменения;
	
	Для Каждого ТекущаяСтрока Из ТаблицаДокументовДляИзменения Цикл
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
			ВызватьИсключение НСтр("ru = 'Не выбран документ для зачёта предоплаты.'");;
		КонецЕсли;
		
		ДокументОбъект = ТекущаяСтрока.Документ.ПолучитьОбъект();
		
		НовыйВариантРасшифровки = ПолучитьДанныеДляЗаполненияТЧРасшифровкаПлатежа(
			ДокументОбъект,
			ДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком,
			ДополнительныеСвойства.Договор
		);
		
		Если НовыйВариантРасшифровки <> Неопределено Тогда
			ДокументОбъект.РасшифровкаПлатежа.Загрузить(НовыйВариантРасшифровки);
		КонецЕсли;
		
		// На данный момент в денежном документе должны остаться только строки с вариантом Вручную
		// для договора, который выбран в накладной.
		
		РаспределитьСуммуРасчетов = ТекущаяСтрока.СуммаРасчетов;
		
		БылиДобавленияСтрок = Ложь;
		
		// В 1-ом цикле удаляем данные по документу.
		// Во 2-ом цикле добавляем данные по документу.
		
		// первый цикл
		Для Каждого ТекущаяСтрокаПредоплата Из ДокументОбъект.РасшифровкаПлатежа Цикл
			
			Если ТекущаяСтрокаПредоплата.Договор <> ДополнительныеСвойства.Договор Тогда
				Продолжить;
			КонецЕсли;
			
			ОбрабатыватьСтроку = Ложь;
			Если ТекущаяСтрока.ВариантИзмененияДанных = Перечисления.ВариантыИзмененияДанныхВДокументахИзПомощника.Добавление Тогда
				
				ОбрабатыватьСтроку = НужноОбрабатыватьСтрокуПриДобавлении(ТекущаяСтрока, ТекущаяСтрокаПредоплата);
				вВариантИзмененияДанных = ТекущаяСтрока.ВариантИзмененияДанных;
				
			ИначеЕсли ТекущаяСтрока.ВариантИзмененияДанных = Перечисления.ВариантыИзмененияДанныхВДокументахИзПомощника.Удаление
				ИЛИ ТекущаяСтрока.ВариантИзмененияДанных = Перечисления.ВариантыИзмененияДанныхВДокументахИзПомощника.Изменение Тогда
				
				ОбрабатыватьСтроку = НужноОбрабатыватьСтрокуПриИзмененииУдалении(ТекущаяСтрока, ТекущаяСтрокаПредоплата, ДополнительныеСвойства.ДляПроведения.Ссылка);
				вВариантИзмененияДанных = Перечисления.ВариантыИзмененияДанныхВДокументахИзПомощника.Удаление;
				
			КонецЕсли;
			
			Если ОбрабатыватьСтроку Тогда
				вБылиДобавленияСтрок = ОбработатьСтрокуРасшифровкиПлатежаПоДаннымИзменения(ДокументОбъект, ДополнительныеСвойства, РаспределитьСуммуРасчетов,
					ТекущаяСтрокаПредоплата,
					ТекущаяСтрока,
					вВариантИзмененияДанных
				);
				БылиДобавленияСтрок = Макс(БылиДобавленияСтрок, вБылиДобавленияСтрок);
			КонецЕсли;
			
			// Эта проверка имеет смысл для варианта Добавление.
			// Для вариантов Изменение и Удаление в этом цикле выполняется очистка информации о распределении, т.е.
			// Значение переменной РаспределитьСуммуРасчетов не имеет значения.
			Если ТекущаяСтрока.ВариантИзмененияДанных = Перечисления.ВариантыИзмененияДанныхВДокументахИзПомощника.Добавление
				И РаспределитьСуммуРасчетов = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// второй цикл для Изменение.
		Если ТекущаяСтрока.ВариантИзмененияДанных = Перечисления.ВариантыИзмененияДанныхВДокументахИзПомощника.Изменение Тогда
			
			Для Каждого ТекущаяСтрокаПредоплата Из ДокументОбъект.РасшифровкаПлатежа Цикл
				
				Если ТекущаяСтрокаПредоплата.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекущаяСтрокаПредоплата.Договор <> ДополнительныеСвойства.Договор Тогда
					Продолжить;
				КонецЕсли;
				
				Если РаспределитьСуммуРасчетов = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если НужноОбрабатыватьСтрокуПриДобавлении(ТекущаяСтрока, ТекущаяСтрокаПредоплата) Тогда
					вВариантИзмененияДанных = Перечисления.ВариантыИзмененияДанныхВДокументахИзПомощника.Добавление;
					вБылиДобавленияСтрок = ОбработатьСтрокуРасшифровкиПлатежаПоДаннымИзменения(ДокументОбъект, ДополнительныеСвойства, РаспределитьСуммуРасчетов,
						ТекущаяСтрокаПредоплата,
						ТекущаяСтрока,
						вВариантИзмененияДанных
					);
					БылиДобавленияСтрок = Макс(БылиДобавленияСтрок, вБылиДобавленияСтрок);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Свернём табличную часть.
		СвернутьТабличнуюЧасть(ДокументОбъект, ДокументОбъект.Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Имя);
		
		// Попытаемся провести документ.
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			Отказ = Истина;
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		Если ТекущаяСтрока.ВариантИзмененияДанных <> Перечисления.ВариантыИзмененияДанныхВДокументахИзПомощника.Удаление
			И РаспределитьСуммуРасчетов > 0 Тогда
			Отказ = Истина;
			ТекстОшибки = НСтр("ru = 'Не получилось изменить следующий документ:'") + Символы.ПС
				+ "	" + ТекущаяСтрока.Документ + Символы.ПС
				+ ?(ЗначениеЗаполнено(ТекущаяСтрока.Заказ), НСтр("ru = '	Возможная причина: не найдена строка с заказом '") + ТекущаяСтрока.Заказ, "")
				+ ?(ЗначениеЗаполнено(ТекущаяСтрока.Заказ), Символы.ПС + НСтр("ru = '	Рекомендация: укажите заказ в документе оплаты.'"), "")
			;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстОшибки;
			Если ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
				Сообщение.УстановитьДанные(ТекущаяСтрока.Документ.ПолучитьОбъект());
			КонецЕсли;
			Сообщение.Сообщить();
		КонецЕсли;
		
		Если Отказ Тогда
			ВывестиРасшифровкуПлатежа(ДокументОбъект.РасшифровкаПлатежа);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КассовыйМетод

Процедура СформироватьВременнаяТаблицаПредоплатаДляКассовогоМетода(СтруктураДополнительныеСвойства, ИмяРегистра = "РасчетыСПоставщиками", ИмяВременнойТаблицы = "ВременнаяТаблицаПредоплатаДляКассовогоМетода") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.ВестиРасчетыПоДокументам
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.АвансовыйОтчет)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.Взаимозачет)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.РасходСоСчета)
	|					ТОГДА ТаблицаДокумента.Документ.Статья
	|				КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.ПоступлениеНаСчет)
	|					ТОГДА ТаблицаДокумента.Документ.Статья
	|				КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.ПоступлениеВКассу)
	|					ТОГДА ТаблицаДокумента.Документ.Статья
	|				КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.РасходИзКассы)
	|					ТОГДА ТаблицаДокумента.Документ.Статья
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам)
	|			КОНЕЦ
	|	КОНЕЦ КАК Статья,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ.Дата
	|		ИНАЧЕ ТаблицаДокумента.Период
	|	КОНЕЦ КАК ДокументДата,
	|	ТаблицаДокумента.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ТаблицаДокумента.НомерСертификата КАК НомерСертификата,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.ОперацияПоПлатежнымКартам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЭквайринговаяОперация
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплатаДляКассовогоМетода
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПоставщиками КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)";
	
	Если ИмяРегистра <> "РасчетыСПоставщиками" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыСПоставщиками", ИмяРегистра);
	КонецЕсли;
	Если ИмяВременнойТаблицы <> "ВременнаяТаблицаПредоплатаДляКассовогоМетода" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВременнаяТаблицаПредоплатаДляКассовогоМетода", ИмяВременнойТаблицы);
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросов

Функция ПолучитьТекстЗапросаПоступлениеДС()
	
	ТекстЗапроса =
	
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.СчетНаОплату КАК СчетНаОплату,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ТаблицаДокумента.ПризнакАванса
	|				ТОГДА 0
	|			КОГДА ТаблицаДокумента.ВалютаДенежныхСредств = ТаблицаДокумента.СчетНаОплату.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаПлатежа
	|			КОГДА ТаблицаДокумента.ВалютаРасчетов = ТаблицаДокумента.СчетНаОплату.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаРасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаПлатежа * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) * ВЫБОР
	|		КОГДА ТаблицаДокумента.ВидОперации = &ВидОперацииОтПоставщика
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СуммаАванса,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.ПризнакАванса
	|				ТОГДА 0
	|			КОГДА ТаблицаДокумента.ВалютаДенежныхСредств = ТаблицаДокумента.СчетНаОплату.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаПлатежа
	|			КОГДА ТаблицаДокумента.ВалютаРасчетов = ТаблицаДокумента.СчетНаОплату.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаРасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаПлатежа * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) * ВЫБОР
	|		КОГДА ТаблицаДокумента.ВидОперации = &ВидОперацииОтПоставщика
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СуммаОплаты,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютСчета
	|		ПО ТаблицаДокумента.СчетНаОплату.ВалютаДокумента = КурсыВалютСчета.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
	|		ПО ТаблицаДокумента.ВалютаДенежныхСредств = КурсыВалютКассы.Валюта
	|ГДЕ
	|	ТаблицаДокумента.ВестиУчетОплатыПоСчетам
	|	И ТаблицаДокумента.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка)
	|	И ТаблицаДокумента.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|	И ТаблицаДокумента.СчетНаОплату <> НЕОПРЕДЕЛЕНО
	|	И (ТаблицаДокумента.ВидОперации = &ВидОперацииОтПокупателя
	|			ИЛИ ТаблицаДокумента.ВидОперации = &ВидОперацииОтПоставщика)
	|	И ТаблицаДокумента.СпособЗачета <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.СчетНаОплату,
	|	ТаблицаДокумента.ВидОперации,
	|	ТаблицаДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	&Организация,
	|	ТаблицаДокумента.Заказ,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ТаблицаДокумента.ПризнакАванса
	|				ТОГДА 0
	|			КОГДА ТаблицаДокумента.ВалютаДенежныхСредств = ТаблицаДокумента.Заказ.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаПлатежа
	|			КОГДА ТаблицаДокумента.ВалютаРасчетов = ТаблицаДокумента.Заказ.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаРасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаПлатежа * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) * ВЫБОР
	|		КОГДА ТаблицаДокумента.ВидОперации = &ВидОперацииОтПоставщика
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.ПризнакАванса
	|				ТОГДА 0
	|			КОГДА ТаблицаДокумента.ВалютаДенежныхСредств = ТаблицаДокумента.Заказ.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаПлатежа
	|			КОГДА ТаблицаДокумента.ВалютаРасчетов = ТаблицаДокумента.Заказ.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаРасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаПлатежа * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) * ВЫБОР
	|		КОГДА ТаблицаДокумента.ВидОперации = &ВидОперацииОтПоставщика
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ТаблицаДокумента.СтавкаНДС,
	|	СУММА(ТаблицаДокумента.СуммаНДС)
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютСчета
	|		ПО ТаблицаДокумента.Заказ.ВалютаДокумента = КурсыВалютСчета.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
	|		ПО ТаблицаДокумента.ВалютаДенежныхСредств = КурсыВалютКассы.Валюта
	|ГДЕ
	|	ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|	И (ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Заказ) = ТИП(Документ.ЗаказПокупателя)
	|				И ТаблицаДокумента.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Заказ) = ТИП(Документ.ЗаказПоставщику)
	|				И ТаблицаДокумента.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Заказ) = ТИП(Документ.ПриемИПередачаВРемонт)
	|				И ТаблицаДокумента.Заказ <> ЗНАЧЕНИЕ(Документ.ПриемИПередачаВРемонт.ПустаяСсылка))
	|	И (ТаблицаДокумента.ВидОперации = &ВидОперацииОтПокупателя
	|			ИЛИ ТаблицаДокумента.ВидОперации = &ВидОперацииОтПоставщика)
	|	И ТаблицаДокумента.СпособЗачета <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Заказ,
	|	ТаблицаДокумента.ВидОперации,
	|	ТаблицаДокумента.СтавкаНДС";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаРасходДС()
	
	ТекстЗапроса =
	
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.СчетНаОплату КАК СчетНаОплату,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ТаблицаДокумента.ПризнакАванса
	|				ТОГДА 0
	|			КОГДА ТаблицаДокумента.ВалютаДенежныхСредств = ТаблицаДокумента.СчетНаОплату.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаПлатежа
	|			КОГДА ТаблицаДокумента.ВалютаРасчетов = ТаблицаДокумента.СчетНаОплату.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаРасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаПлатежа * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) * ВЫБОР
	|		КОГДА ТаблицаДокумента.ВидОперации = &ВидОперацииПокупателю
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СуммаАванса,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.ПризнакАванса
	|				ТОГДА 0
	|			КОГДА ТаблицаДокумента.ВалютаДенежныхСредств = ТаблицаДокумента.СчетНаОплату.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаПлатежа
	|			КОГДА ТаблицаДокумента.ВалютаРасчетов = ТаблицаДокумента.СчетНаОплату.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаРасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаПлатежа * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) * ВЫБОР
	|		КОГДА ТаблицаДокумента.ВидОперации = &ВидОперацииПокупателю
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СуммаОплаты,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютСчета
	|		ПО ТаблицаДокумента.СчетНаОплату.ВалютаДокумента = КурсыВалютСчета.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
	|		ПО ТаблицаДокумента.ВалютаДенежныхСредств = КурсыВалютКассы.Валюта
	|ГДЕ
	|	ТаблицаДокумента.ВестиУчетОплатыПоСчетам
	|	И ТаблицаДокумента.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка)
	|	И ТаблицаДокумента.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|	И ТаблицаДокумента.СчетНаОплату <> НЕОПРЕДЕЛЕНО
	|	И (ТаблицаДокумента.ВидОперации = &ВидОперацииПоставщику
	|			ИЛИ ТаблицаДокумента.ВидОперации = &ВидОперацииПокупателю)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.СчетНаОплату,
	|	ТаблицаДокумента.ВидОперации,
	|	ТаблицаДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	&Организация,
	|	ТаблицаДокумента.Заказ,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ТаблицаДокумента.ПризнакАванса
	|				ТОГДА 0
	|			КОГДА ТаблицаДокумента.ВалютаДенежныхСредств = ТаблицаДокумента.Заказ.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаПлатежа
	|			КОГДА ТаблицаДокумента.ВалютаРасчетов = ТаблицаДокумента.Заказ.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаРасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаПлатежа * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) * ВЫБОР
	|		КОГДА ТаблицаДокумента.ВидОперации = &ВидОперацииПокупателю
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.ПризнакАванса
	|				ТОГДА 0
	|			КОГДА ТаблицаДокумента.ВалютаДенежныхСредств = ТаблицаДокумента.Заказ.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаПлатежа
	|			КОГДА ТаблицаДокумента.ВалютаРасчетов = ТаблицаДокумента.Заказ.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаРасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаПлатежа * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) * ВЫБОР
	|		КОГДА ТаблицаДокумента.ВидОперации = &ВидОперацииПокупателю
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ТаблицаДокумента.СтавкаНДС,
	|	СУММА(ТаблицаДокумента.СуммаНДС)
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютСчета
	|		ПО ТаблицаДокумента.Заказ.ВалютаДокумента = КурсыВалютСчета.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
	|		ПО ТаблицаДокумента.ВалютаДенежныхСредств = КурсыВалютКассы.Валюта
	|ГДЕ
	|	ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|	И (ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Заказ) = ТИП(Документ.ЗаказПокупателя)
	|				И ТаблицаДокумента.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Заказ) = ТИП(Документ.ЗаказПоставщику)
	|				И ТаблицаДокумента.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка))
	|	И (ТаблицаДокумента.ВидОперации = &ВидОперацииПоставщику
	|			ИЛИ ТаблицаДокумента.ВидОперации = &ВидОперацииПокупателю)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Заказ,
	|	ТаблицаДокумента.ВидОперации,
	|	ТаблицаДокумента.СтавкаНДС";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаОстаткиАвансов(ДокументОбъект, СтруктураДополнительныеСвойства)
	
	ЭтоРасчетыСПоставщиком = СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТ_Заказы.Заказ КАК Заказ,
	|	ВТ_Заказы.СуммаРасчетов КАК СуммаРасчетов
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	&Заказы КАК ВТ_Заказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заказы.Заказ КАК Заказ,
	|	ВТ_Заказы.СуммаРасчетов КАК СуммаРасчетов
	|ПОМЕСТИТЬ ВТ_ЗаказыДокументаИПустыеЗаказы
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ПустойЗаказ,
	|	0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО,
	|	0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаказыДокументаИПустыеЗаказы.Заказ КАК Заказ,
	|	СУММА(ВТ_ЗаказыДокументаИПустыеЗаказы.СуммаРасчетов) КАК СуммаРасчетов
	|ПОМЕСТИТЬ ВТ_ЗаказыДляСоединения
	|ИЗ
	|	ВТ_ЗаказыДокументаИПустыеЗаказы КАК ВТ_ЗаказыДокументаИПустыеЗаказы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ЗаказыДокументаИПустыеЗаказы.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПокупателямиОстатки.Организация КАК Организация,
	|	РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|	РасчетыСПокупателямиОстатки.ТипРасчетов КАК ТипРасчетов,
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	-РасчетыСПокупателямиОстатки.СуммаОстаток КАК СуммаОстаток,
	|	-РасчетыСПокупателямиОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
	|	-РасчетыСПокупателямиОстатки.СуммаРегОстаток КАК СуммаРегОстаток
	|ПОМЕСТИТЬ ВТ_Авансы
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(
	|			,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент
	|				И Договор = &Договор
	|				И ТипРасчетов = &ТипРасчетовАванс
	|				И (Документ.МоментВремени < &МоментВремениДокумента
	|					ИЛИ НЕ Контрагент.ВестиРасчетыПоДокументам)) КАК РасчетыСПокупателямиОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаказыДляСоединения КАК ВТ_ЗаказыДляСоединения
	|		ПО РасчетыСПокупателямиОстатки.Заказ = ВТ_ЗаказыДляСоединения.Заказ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПокупателями.Организация,
	|	РасчетыСПокупателями.Контрагент,
	|	РасчетыСПокупателями.Договор,
	|	РасчетыСПокупателями.ТипРасчетов,
	|	РасчетыСПокупателями.Документ,
	|	РасчетыСПокупателями.Заказ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСПокупателями.Сумма
	|		ИНАЧЕ -РасчетыСПокупателями.Сумма
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСПокупателями.СуммаВал
	|		ИНАЧЕ -РасчетыСПокупателями.СуммаВал
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыСПокупателями.СуммаРег
	|		ИНАЧЕ -РасчетыСПокупателями.СуммаРег
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаказыДляСоединения КАК ВТ_ЗаказыДляСоединения
	|		ПО РасчетыСПокупателями.Заказ = ВТ_ЗаказыДляСоединения.Заказ
	|ГДЕ
	|	РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовАванс
	|	И РасчетыСПокупателями.Организация = &Организация
	|	И РасчетыСПокупателями.Контрагент = &Контрагент
	|	И РасчетыСПокупателями.Договор = &Договор
	|	И РасчетыСПокупателями.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Авансы.Организация КАК Организация,
	|	ВТ_Авансы.Контрагент КАК Контрагент,
	|	ВТ_Авансы.Договор КАК Договор,
	|	ВТ_Авансы.ТипРасчетов КАК ТипРасчетов,
	|	ВТ_Авансы.Документ КАК Документ,
	|	ВТ_Авансы.Заказ КАК Заказ,
	|	СУММА(ВТ_Авансы.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(ВТ_Авансы.СуммаВалОстаток) КАК СуммаВалОстаток,
	|	СУММА(ВТ_Авансы.СуммаРегОстаток) КАК СуммаРегОстаток,
	|	0 КАК Курс,
	|	0 КАК Кратность,
	|	ЛОЖЬ КАК ОплатаСертификатом,
	|	"""" КАК НомерСертификата
	|ИЗ
	|	ВТ_Авансы КАК ВТ_Авансы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Авансы.Организация,
	|	ВТ_Авансы.Контрагент,
	|	ВТ_Авансы.Договор,
	|	ВТ_Авансы.ТипРасчетов,
	|	ВТ_Авансы.Документ,
	|	ВТ_Авансы.Заказ
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Авансы.СуммаВалОстаток) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказ,
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПокупателямиОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
	|	0 КАК Долг,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.Организация КАК Организация,
	|	РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСПокупателямиОстатки.Договор КАК Договор
	|ПОМЕСТИТЬ ВременнаяТаблица_СуммаКЗачету
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(
	|			,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент
	|				И Договор = &Договор
	|				И Документ = &Регистратор) КАК РасчетыСПокупателямиОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -РасчетыСПокупателями.СуммаВал
	|		ИНАЧЕ РасчетыСПокупателями.СуммаВал
	|	КОНЕЦ,
	|	0,
	|	РасчетыСПокупателями.Заказ,
	|	РасчетыСПокупателями.Организация,
	|	РасчетыСПокупателями.Контрагент,
	|	РасчетыСПокупателями.Договор
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	РасчетыСПокупателями.Организация = &Организация
	|	И РасчетыСПокупателями.Контрагент = &Контрагент
	|	И РасчетыСПокупателями.Договор = &Договор
	|	И РасчетыСПокупателями.Документ = &Регистратор
	|	И РасчетыСПокупателями.Регистратор = &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Заказы.СуммаРасчетов,
	|	ВТ_Заказы.СуммаРасчетов,
	|	ВТ_Заказы.Заказ,
	|	&Организация,
	|	&Контрагент,
	|	&Договор
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВременнаяТаблица_СуммаКЗачету.Заказ, &ПустойЗаказ) = &ПустойЗаказ
	|				ИЛИ ВременнаяТаблица_СуммаКЗачету.Заказ = НЕОПРЕДЕЛЕНО
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Порядок,
	|	ВременнаяТаблица_СуммаКЗачету.Заказ КАК Заказ,
	|	ВременнаяТаблица_СуммаКЗачету.Организация КАК Организация,
	|	ВременнаяТаблица_СуммаКЗачету.Контрагент КАК Контрагент,
	|	ВременнаяТаблица_СуммаКЗачету.Договор КАК Договор,
	|	СУММА(ВременнаяТаблица_СуммаКЗачету.СуммаВалОстаток) КАК СуммаВалОстаток,
	|	СУММА(ВременнаяТаблица_СуммаКЗачету.Долг - ВременнаяТаблица_СуммаКЗачету.СуммаВалОстаток) КАК Долг
	|ИЗ
	|	ВременнаяТаблица_СуммаКЗачету КАК ВременнаяТаблица_СуммаКЗачету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Заказы КАК ВТ_Заказы
	|		ПО ВременнаяТаблица_СуммаКЗачету.Заказ = ВТ_Заказы.Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблица_СуммаКЗачету.Договор,
	|	ВременнаяТаблица_СуммаКЗачету.Организация,
	|	ВременнаяТаблица_СуммаКЗачету.Заказ,
	|	ВременнаяТаблица_СуммаКЗачету.Контрагент,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВременнаяТаблица_СуммаКЗачету.Заказ, &ПустойЗаказ) = &ПустойЗаказ
	|				ИЛИ ВременнаяТаблица_СуммаКЗачету.Заказ = НЕОПРЕДЕЛЕНО
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ * ПОМЕСТИТЬ Предоплата ИЗ &Предоплата КАК Предоплата;
	|
	|ВЫБРАТЬ
	|	ВТ_Предоплата.Организация КАК Организация,
	|	ВТ_Предоплата.Контрагент КАК Контрагент,
	|	ВТ_Предоплата.Договор КАК Договор,
	|	ВТ_Предоплата.ТипРасчетов КАК ТипРасчетов,
	|	ВТ_Предоплата.Документ КАК Документ,
	|	ВЫБОР КОГДА ВТ_Предоплата.Заказ = НЕОПРЕДЕЛЕНО 
	|		ТОГДА &ПустойЗаказ 
	|		ИНАЧЕ ВТ_Предоплата.Заказ 
	|	КОНЕЦ КАК Заказ,
	|	СУММА(ВТ_Предоплата.Сумма) КАК СуммаОстаток,
	|	СУММА(ВТ_Предоплата.СуммаВал) КАК СуммаВалОстаток,
	|	СУММА(0) КАК СуммаРегОстаток,
	|	ВТ_Предоплата.Курс КАК Курс,
	|	ВТ_Предоплата.Кратность КАК Кратность,
	|	ВТ_Предоплата.ОплатаСертификатом КАК ОплатаСертификатом,
	|	ВТ_Предоплата.НомерСертификата КАК НомерСертификата
	|ИЗ
	|	Предоплата КАК ВТ_Предоплата
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Предоплата.Организация,
	|	ВТ_Предоплата.Контрагент,
	|	ВТ_Предоплата.Договор,
	|	ВТ_Предоплата.ТипРасчетов,
	|	ВТ_Предоплата.Документ,
	|	ВТ_Предоплата.Заказ,
	|	ВТ_Предоплата.Курс,
	|	ВТ_Предоплата.Кратность,
	|	ВТ_Предоплата.ОплатаСертификатом,
	|	ВТ_Предоплата.НомерСертификата
	|УПОРЯДОЧИТЬ ПО Заказ, Документ АВТОУПОРЯДОЧИВАНИЕ";
	
	Если ЭтоРасчетыСПоставщиком Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетыСПокупателями", "РасчетыСПоставщиками");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаОстаткиДолговИЗаказов(ЭтоРасчетыСПоставщиком)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РасчетыСПокупателямиОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
		|	РасчетыСПокупателямиОстатки.Организация КАК Организация,
		|	РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
		|	РасчетыСПокупателямиОстатки.Договор КАК Договор,
		|	РасчетыСПокупателямиОстатки.ТипРасчетов КАК ТипРасчетов,
		|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
		|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ
		|ПОМЕСТИТЬ ВТ_Долги
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Остатки(
		|			,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И Договор В (&МассивДоговоров)
		|				И ТипРасчетов = &ТипРасчетовДолг
		|				И (Документ.МоментВремени < &МоментВремениДокумента
		|					ИЛИ НЕ Контрагент.ВестиРасчетыПоДокументам)) КАК РасчетыСПокупателямиОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|			ТОГДА РасчетыСПокупателями.СуммаВал
		|		ИНАЧЕ -РасчетыСПокупателями.СуммаВал
		|	КОНЕЦ,
		|	РасчетыСПокупателями.Организация,
		|	РасчетыСПокупателями.Контрагент,
		|	РасчетыСПокупателями.Договор,
		|	РасчетыСПокупателями.ТипРасчетов,
		|	РасчетыСПокупателями.Документ,
		|	РасчетыСПокупателями.Заказ
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовДолг
		|	И РасчетыСПокупателями.Организация = &Организация
		|	И РасчетыСПокупателями.Контрагент = &Контрагент
		|	И РасчетыСПокупателями.Договор В (&МассивДоговоров)
		|	И РасчетыСПокупателями.Регистратор = &Регистратор
		|	И (РасчетыСПокупателями.Документ.МоментВремени < &МоментВремениДокумента
		|			ИЛИ НЕ РасчетыСПокупателями.Контрагент.ВестиРасчетыПоДокументам)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВТ_Долги.СуммаВалОстаток) КАК СуммаВалОстаток,
		|	ВТ_Долги.Организация КАК Организация,
		|	ВТ_Долги.Контрагент КАК Контрагент,
		|	ВТ_Долги.Договор КАК Договор,
		|	ВТ_Долги.ТипРасчетов КАК ТипРасчетов,
		|	ВТ_Долги.Документ КАК Документ,
		|	ВТ_Долги.Заказ КАК Заказ
		|ИЗ
		|	ВТ_Долги КАК ВТ_Долги
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Долги.Организация,
		|	ВТ_Долги.Контрагент,
		|	ВТ_Долги.Договор,
		|	ВТ_Долги.ТипРасчетов,
		|	ВТ_Долги.Документ,
		|	ВТ_Долги.Заказ
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВТ_Долги.СуммаВалОстаток) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ,
		|	Заказ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если ЭтоРасчетыСПоставщиком Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетыСПокупателями", "РасчетыСПоставщиками");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьСтрокуЗаменыПоСоответствию(ПолучатьРеквизитыРасчетов, УстановитьНеопределено, РеквизитыРасчетовСоответствие)
	
	СтрокаЗамены = "";
	
	КоличествоЭлементовИтого = РеквизитыРасчетовСоответствие.Количество();
	СчетчикЭлементов = 0;
	
	Для Каждого КлючЗначение Из РеквизитыРасчетовСоответствие Цикл
		СчетчикЭлементов = СчетчикЭлементов + 1;
		
		Если УстановитьНеопределено ИЛИ НЕ ПолучатьРеквизитыРасчетов Тогда
			ТекущееЗначение = "НЕОПРЕДЕЛЕНО";
		Иначе
			ТекущееЗначение = "ТаблицаДокумента."+КлючЗначение.Значение;
		КонецЕсли;
		
		СтрокаЗамены = СтрокаЗамены + ТекущееЗначение + " КАК " + КлючЗначение.Ключ;
		
		Если СчетчикЭлементов < КоличествоЭлементовИтого Тогда
			СтрокаЗамены = СтрокаЗамены + "," + Символы.ПС;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокаЗамены;
	
КонецФункции

Процедура ДобавитьТекстЗапросаРеквизитовРасчетов(ТекстЗапроса, ПолучатьРеквизитыРасчетов, УстановитьНеопределено, ЭтоРасчетыСПоставщиками = Ложь, РеквизитыРасчетовСоответствие = Неопределено) Экспорт
	
	Если УстановитьНеопределено Тогда
		
		Если РеквизитыРасчетовСоответствие = Неопределено Тогда
			СтрокаЗамены = 
			"	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО КАК СуммаНДС,
			|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО";
			
			Если НЕ ЭтоРасчетыСПоставщиками Тогда
				СтрокаЗамены = СтрокаЗамены + ",
				|	НЕОПРЕДЕЛЕНО";
			КонецЕсли;
		Иначе
			СтрокаЗамены = ПолучитьСтрокуЗаменыПоСоответствию(ПолучатьРеквизитыРасчетов, Истина, РеквизитыРасчетовСоответствие);
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитыРасчетовНеопределено", СтрокаЗамены);
		
	КонецЕсли;
	
	Если ПолучатьРеквизитыРасчетов Тогда
		
		Если РеквизитыРасчетовСоответствие = Неопределено Тогда
			СтрокаЗамены = 
			"	ТаблицаДокумента.СпособЗачета,
			|	ТаблицаДокумента.СуммаПлатежа,
			|	ТаблицаДокумента.ВалютаПлатежа,
			|	ТаблицаДокумента.ИндексСтрокиДокумента,
			|	ТаблицаДокумента.СуммаНДС,
			|	ТаблицаДокумента.СтавкаНДС,
			|	ТаблицаДокумента.ДокументОплаты,
			|	ТаблицаДокумента.ЭтоОплатаЗаказа,
			|	ТаблицаДокумента.Курс,
			|	ТаблицаДокумента.Кратность";
			
			Если НЕ ЭтоРасчетыСПоставщиками Тогда
				СтрокаЗамены = СтрокаЗамены + ",
				|	ТаблицаДокумента.ОплатаСертификатом";
			КонецЕсли;
		Иначе
			СтрокаЗамены = ПолучитьСтрокуЗаменыПоСоответствию(ПолучатьРеквизитыРасчетов, Ложь, РеквизитыРасчетовСоответствие);
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитыРасчетов", СтрокаЗамены);
		
	Иначе
		
		Если РеквизитыРасчетовСоответствие = Неопределено Тогда
			СтрокаЗамены = 
			"	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО КАК СуммаНДС,
			|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО";
			
			Если НЕ ЭтоРасчетыСПоставщиками Тогда
				СтрокаЗамены = СтрокаЗамены + ",
				|	НЕОПРЕДЕЛЕНО";
			КонецЕсли;
		Иначе
			СтрокаЗамены = ПолучитьСтрокуЗаменыПоСоответствию(ПолучатьРеквизитыРасчетов, УстановитьНеопределено, РеквизитыРасчетовСоответствие);
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитыРасчетов", СтрокаЗамены);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьСтруктуруДанныхДокумента(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	ПараметрыДокумента = СтруктураДополнительныеСвойства.ПараметрыДокумента;
	
	СтруктураДанныхДокумента = Новый Структура();
	
	Если ПараметрыДокумента.ЭтоРасчетыСПоставщиком И ПараметрыДокумента.ЭтоЗаказ Тогда
		// В ЗаказеПоставщику нет ТЧ Предоплата;
		Возврат СтруктураДанныхДокумента;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Если ПараметрыДокумента.ЭтоОплата ИЛИ ПараметрыДокумента.ЭтоВозвратОплаты Тогда
		Запрос.Текст =
		"ВЫБРАТЬ * ИЗ ВременнаяТаблицаРасшифровкаПлатежа;
		|ВЫБРАТЬ * ИЗ ВременнаяТаблицаШапка";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ * ИЗ ВременнаяТаблицаПредоплата;
		|ВЫБРАТЬ * ИЗ ВременнаяТаблицаШапка";
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	ТаблицаШапка = МассивРезультатов[1].Выгрузить();
	СтрокаШапки0 = ТаблицаШапка[0];
	Для Каждого Колонка Из ТаблицаШапка.Колонки Цикл
		СтруктураДанныхДокумента.Вставить(Колонка.Имя, СтрокаШапки0[Колонка.Имя]);
	КонецЦикла;
	
	Если ПараметрыДокумента.ЭтоОплата ИЛИ ПараметрыДокумента.ЭтоВозвратОплаты Тогда
		СтруктураДанныхДокумента.Вставить("РасшифровкаПлатежа", МассивРезультатов[0].Выгрузить());
		СтруктураДанныхДокумента.РасшифровкаПлатежа.Индексы.Добавить("Договор");
	Иначе
		СтруктураДанныхДокумента.Вставить("Предоплата", МассивРезультатов[0].Выгрузить());
	КонецЕсли;
	
	Если ПараметрыДокумента.ЭтоПередачаТоваров Тогда
		СтруктураДанныхДокумента.Вставить("Контрагент", СтруктураДанныхДокумента.КонтрагентПолучатель);
	КонецЕсли;
	
	Возврат СтруктураДанныхДокумента;
	
КонецФункции

Процедура СформироватьДвиженияПоВзаиморасчетамДляПередачиТоваровМеждуОрганизациями(ДокументОбъект, СтруктураДополнительныеСвойства)
	
	// 1. Определяем авто или вручную, в зависимости от этого выбираем остатки авансов, либо подставляем ТЧ Предоплата
	// 2. Осуществляем одинаковое распределение для обоих случаев
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаОстаткиАвансов(ДокументОбъект, СтруктураДополнительныеСвойства);
	Организация = ДокументОбъект.Организация;
	Контрагент = ДокументОбъект.Контрагент;
	
	Запрос.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Договор", ДокументОбъект.Договор);
	Если СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком Тогда
		ДокументОбъект.Организация = ДокументОбъект.ОрганизацияПолучатель;
		ДокументОбъект.Контрагент = ДокументОбъект.КонтрагентВладелец;
		Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.КонтрагентВладелец);
		Запрос.УстановитьПараметр("Организация", ДокументОбъект.ОрганизацияПолучатель);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Предоплата КАК ВТ_Предоплата",
			"Предоплата КАК ВТ_Предоплата ГДЕ ВТ_Предоплата.ЭтоРасчетыСПоставщиком");
	Иначе
		ДокументОбъект.Контрагент = ДокументОбъект.КонтрагентПолучатель;
		Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.КонтрагентПолучатель);
		Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Предоплата КАК ВТ_Предоплата",
			"Предоплата КАК ВТ_Предоплата ГДЕ НЕ ВТ_Предоплата.ЭтоРасчетыСПоставщиком");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МоментВремениДокумента", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени);
	
	Запрос.УстановитьПараметр("ТипРасчетовАванс", Перечисления.ТипыРасчетов.Аванс);
	Запрос.УстановитьПараметр("Заказы", ПолучитьТаблицуСуммКЗачету(ДокументОбъект, СтруктураДополнительныеСвойства));
	Запрос.УстановитьПараметр("Предоплата", ДокументОбъект.Предоплата);
	Запрос.УстановитьПараметр("ПустойЗаказ", СтруктураДополнительныеСвойства.ПустойЗаказ);
	
	МассивРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Если НЕ ДокументОбъект.Свойство("ВалютаДокумента") Тогда
		ДокументОбъект.Вставить("ВалютаДокумента", ДокументОбъект.Ссылка.ВалютаДокумента);
	КонецЕсли; 
	
	Если ДокументОбъект.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
		РезультатЗапросаАвансы = МассивРезультатов[4]; //Остатки авансов в регистре
	Иначе
		РезультатЗапросаАвансы = МассивРезультатов[8]; // Табличная часть "Предоплата"
	КонецЕсли;
	
	РезультатЗапросаКЗачету = МассивРезультатов[6];
	
	Если РезультатЗапросаКЗачету.Пустой() Тогда
		Если СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоКорректировка Тогда //Движений к зачету может не быть, например просто уменьшен аванс
			РезультатЗапросаКЗачету = РезультатЗапросаАвансы;
			СтруктураДополнительныеСвойства.Вставить("КорректировкаБезИзмененияДолга", Истина);
		Иначе // Нет данных для формирования движений по взаиморасчетам
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Авансы = РезультатЗапросаАвансы.Выгрузить();
	КЗачету = РезультатЗапросаКЗачету.Выгрузить();
	
	// Если авансы зачитываются вручную, необходимо исключить погрешности округления при полном зачете авансов
	ПодготовитьТаблицуАвансовЗачитываемыхВручную(ДокументОбъект, Авансы, МассивРезультатов[4].Выгрузить(), СтруктураДополнительныеСвойства); // Остатки авансов в регистре для списания разницы округления
	
	ПараметрыОтбораСтрок = Новый Структура("Заказ", СтруктураДополнительныеСвойства.ПустойЗаказ);
	
	// Зачтем автоаванс под долги, которые не оплачены вручную.
	Для каждого СтрокаКЗачету Из КЗачету Цикл
		
		// Сначала зачтем аванс по заказу (или по пустому заказу).
		ПараметрыОтбораСтрок.Заказ = ?(ЗначениеЗаполнено(СтрокаКЗачету.Заказ), СтрокаКЗачету.Заказ, СтруктураДополнительныеСвойства.ПустойЗаказ);
		СтрокиАвансовДляЗачета = Авансы.НайтиСтроки(ПараметрыОтбораСтрок);
		
		РаспределитьАванс(ДокументОбъект, СтрокиАвансовДляЗачета, СтрокаКЗачету, СтруктураДополнительныеСвойства);
		
		ДобавитьСтрокуЗадолженности(ДокументОбъект, СтрокаКЗачету, СтруктураДополнительныеСвойства);
		
	КонецЦикла;
	Если Не Константы.УчетПоКомпании.Получить() Тогда
		Для Каждого Строка Из СтруктураДополнительныеСвойства.ПараметрыДокумента.ТаблицаДвиженийПоВзаиморасчетам Цикл
			Строка.Организация = ДокументОбъект.Организация;
		КонецЦикла;
	КонецЕсли;
	
	ДокументОбъект.Организация = Организация;
	ДокументОбъект.Контрагент  = Контрагент;
	
КонецПроцедуры

#Область ПлатежиАвтоЗачетИРаспределениеПриПроведенииДокумента

Процедура ЗаполнитьДополнительныеСвойстваДокументаДляВзаиморасчетов(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	ПараметрыДокумента = СтруктураДополнительныеСвойства.ПараметрыДокумента;
	
	// Подготовка таблицы для записи движений по регистру
	ИмяРегистра = ?(ПараметрыДокумента.ЭтоРасчетыСПоставщиком, "РасчетыСПоставщиками", "РасчетыСПокупателями");
	ПараметрыДокумента.Вставить("ТаблицаДвиженийПоВзаиморасчетам", ПолучитьПустуюТаблицуДвижений(ИмяРегистра, ДокументСсылка));
	ДобавитьКолонкиВТаблицуРасчетов(ПараметрыДокумента.ТаблицаДвиженийПоВзаиморасчетам);
	
	// Инициализируем пустую ссылку для отборов
	ПустойЗаказ = ?(ПараметрыДокумента.ЭтоРасчетыСПоставщиком, Документы.ЗаказПоставщику.ПустаяСсылка(), Документы.ЗаказПокупателя.ПустаяСсылка());
	СтруктураДополнительныеСвойства.Вставить("ПустойЗаказ", ПустойЗаказ);
	
	// Получим курс и кратность валюты учета и валюты рег. учета.
	ЗаполнитьКурсВалютыУчетаИРегВалюты(СтруктураДополнительныеСвойства);
	
	// Определим текст содержания операций
	СтруктураДополнительныеСвойства.Вставить("ТекстЗачетПредоплаты", НСтр("ru = 'Зачет предоплаты'"));
	СтруктураДополнительныеСвойства.Вставить("ТекстАванс", НСтр("ru = 'Предоплата'"));
	СтруктураДополнительныеСвойства.Вставить("ТекстОплатаДолга", НСтр("ru = 'Оплата долга'"));
	СтруктураДополнительныеСвойства.Вставить("ТекстВозвратАванса", НСтр("ru = 'Возврат предоплаты'"));
	Если СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком Тогда
		СтруктураДополнительныеСвойства.Вставить("ТекстВозникновениеОбязательств", НСтр("ru='Возникновение обязательств перед поставщиком'"));
	Иначе
		СтруктураДополнительныеСвойства.Вставить("ТекстВозникновениеОбязательств", НСтр("ru='Возникновение обязательств покупателя'"));
	КонецЕсли;
	
	СтруктураДанныхДокумента = ПолучитьСтруктуруДанныхДокумента(ДокументСсылка, СтруктураДополнительныеСвойства);
	Если ПараметрыДокумента.ЭтоЗаказНаряд Тогда
		СтруктураДанныхДокумента.Период = СтруктураДанныхДокумента.Финиш;
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.Вставить("СтруктураДанныхДокумента", СтруктураДанныхДокумента);
	
КонецПроцедуры

Процедура ДобавитьКолонкиВТаблицуРасчетов(ТаблицаДвиженийПоВзаиморасчетам)
	
	ТаблицаДвиженийПоВзаиморасчетам.Колонки.Добавить("ПодарочныйСертификат", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДвиженийПоВзаиморасчетам.Колонки.Добавить("НомерСертификата", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
КонецПроцедуры

Процедура СформироватьПустуюВременнуюТаблицуРасчетов(ДокументСсылка, СтруктураДополнительныеСвойства, ЗапросПараметры, ТребуемыеРеквизитыШапки = "") Экспорт
	
	Если СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком Тогда
		ТаблицаДвиженийПоВзаиморасчетам = ПолучитьПустуюТаблицуДвижений("РасчетыСПоставщиками", ДокументСсылка);
	Иначе
		ТаблицаДвиженийПоВзаиморасчетам = ПолучитьПустуюТаблицуДвижений("РасчетыСПокупателями", ДокументСсылка);
	КонецЕсли;
	
	ДобавитьКолонкиВТаблицуРасчетов(ТаблицаДвиженийПоВзаиморасчетам);
	
	СтруктураДанныхДокумента = Новый Структура("ВидОперации", ДокументСсылка.ВидОперации);
	СформироватьТаблицуРасчетовДляФормированияДвижений(СтруктураДанныхДокумента, ДокументСсылка, СтруктураДополнительныеСвойства, ТаблицаДвиженийПоВзаиморасчетам, ТребуемыеРеквизитыШапки, ЗапросПараметры);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетовДляФормированияДвижений(СтруктураДанныхДокумента, ДокументСсылка, СтруктураДополнительныеСвойства, ТаблицаДвиженийПоВзаиморасчетам, ТребуемыеРеквизитыШапки = "", ЗапросПараметры = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Для Каждого ТекущаяСтрока Из ТаблицаДвиженийПоВзаиморасчетам Цикл
		ТекущаяСтрока.СсылкаНаДокумент = ДокументСсылка;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаДвиженийПоВзаиморасчетам", ТаблицаДвиженийПоВзаиморасчетам);
	Если ЗапросПараметры <> Неопределено Тогда
		Для Каждого КлючЗначение Из ЗапросПараметры Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЭтоРасчетыСПоставщиком", СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&СпециальныеРеквизиты КАК СпециальныеРеквизиты,
	|	ТаблицаДвиженийПоВзаиморасчетам.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДвиженийПоВзаиморасчетам.ВидДвижения КАК ВидДвижения,
	|	ТаблицаДвиженийПоВзаиморасчетам.Период КАК Период,
	|	ТаблицаДвиженийПоВзаиморасчетам.Организация КАК Организация,
	|	ВЫРАЗИТЬ(ТаблицаДвиженийПоВзаиморасчетам.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(ТаблицаДвиженийПоВзаиморасчетам.Договор КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
	|	ТаблицаДвиженийПоВзаиморасчетам.Документ КАК Документ,
	|	ТаблицаДвиженийПоВзаиморасчетам.Заказ КАК Заказ,
	|	ТаблицаДвиженийПоВзаиморасчетам.ТипРасчетов КАК ТипРасчетов,
	|	ТаблицаДвиженийПоВзаиморасчетам.Сумма КАК Сумма,
	|	ТаблицаДвиженийПоВзаиморасчетам.СуммаВал КАК СуммаВал,
	|	ТаблицаДвиженийПоВзаиморасчетам.СуммаРег КАК СуммаРег,
	|	ТаблицаДвиженийПоВзаиморасчетам.Сумма КАК СуммаДляОстатка,
	|	ТаблицаДвиженийПоВзаиморасчетам.СуммаВал КАК СуммаВалДляОстатка,
	|	ТаблицаДвиженийПоВзаиморасчетам.СодержаниеПроводки КАК СодержаниеПроводки,
	|	ТаблицаДвиженийПоВзаиморасчетам.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаДвиженийПоВзаиморасчетам.СпособЗачета КАК СпособЗачета,
	|	ТаблицаДвиженийПоВзаиморасчетам.СуммаПлатежа КАК СуммаПлатежа,
	|	ТаблицаДвиженийПоВзаиморасчетам.ВалютаПлатежа КАК ВалютаПлатежа,
	|	ТаблицаДвиженийПоВзаиморасчетам.ИндексСтрокиДокумента КАК ИндексСтрокиДокумента,
	|	ТаблицаДвиженийПоВзаиморасчетам.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДвиженийПоВзаиморасчетам.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	ТаблицаДвиженийПоВзаиморасчетам.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДвиженийПоВзаиморасчетам.ДокументОплаты КАК ДокументОплаты,
	|	ТаблицаДвиженийПоВзаиморасчетам.ЭтоОплатаЗаказа КАК ЭтоОплатаЗаказа,
	|	ТаблицаДвиженийПоВзаиморасчетам.Курс КАК Курс,
	|	ТаблицаДвиженийПоВзаиморасчетам.Кратность КАК Кратность,
	|	ТаблицаДвиженийПоВзаиморасчетам.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ТаблицаДвиженийПоВзаиморасчетам.НомерСертификата КАК НомерСертификата
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателямиПредварительно
	|ИЗ
	|	&ТаблицаДвиженийПоВзаиморасчетам КАК ТаблицаДвиженийПоВзаиморасчетам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Контрагент,
	|	Договор,
	|	Документ,
	|	Заказ,
	|	ТипРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СпециальныеРеквизиты КАК СпециальныеРеквизиты,
	|	ТаблицаДвиженийПоВзаиморасчетам.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДвиженийПоВзаиморасчетам.ВидДвижения КАК ВидДвижения,
	|	ТаблицаДвиженийПоВзаиморасчетам.Период КАК Дата,
	|	ТаблицаДвиженийПоВзаиморасчетам.Организация КАК Организация,
	|	ТаблицаДвиженийПоВзаиморасчетам.Контрагент КАК Контрагент,
	|	ТаблицаДвиженийПоВзаиморасчетам.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ВЫБОР
	|		КОГДА &ЭтоРасчетыСПоставщиком
	|				И ТаблицаДвиженийПоВзаиморасчетам.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ТОГДА ТаблицаДвиженийПоВзаиморасчетам.Контрагент.СчетУчетаАвансовПоставщику
	|		КОГДА &ЭтоРасчетыСПоставщиком
	|			ТОГДА ТаблицаДвиженийПоВзаиморасчетам.Контрагент.СчетУчетаРасчетовСПоставщиком
	|		КОГДА ТаблицаДвиженийПоВзаиморасчетам.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ТОГДА ТаблицаДвиженийПоВзаиморасчетам.Контрагент.СчетУчетаАвансовПокупателя
	|		ИНАЧЕ ТаблицаДвиженийПоВзаиморасчетам.Контрагент.СчетУчетаРасчетовСПокупателем
	|	КОНЕЦ КАК СчетУчета,
	|	ТаблицаДвиженийПоВзаиморасчетам.Договор КАК Договор,
	|	ТаблицаДвиженийПоВзаиморасчетам.Документ КАК Документ,
	|	ТаблицаДвиженийПоВзаиморасчетам.Заказ КАК Заказ,
	|	ТаблицаДвиженийПоВзаиморасчетам.Договор.ВалютаРасчетов КАК Валюта,
	|	ТаблицаДвиженийПоВзаиморасчетам.ТипРасчетов КАК ТипРасчетов,
	|	ТаблицаДвиженийПоВзаиморасчетам.Сумма КАК Сумма,
	|	ТаблицаДвиженийПоВзаиморасчетам.СуммаВал КАК СуммаВал,
	|	ТаблицаДвиженийПоВзаиморасчетам.СуммаРег КАК СуммаРег,
	|	ТаблицаДвиженийПоВзаиморасчетам.Сумма КАК СуммаДляОстатка,
	|	ТаблицаДвиженийПоВзаиморасчетам.СуммаВал КАК СуммаВалДляОстатка,
	|	ТаблицаДвиженийПоВзаиморасчетам.СодержаниеПроводки КАК СодержаниеПроводки,
	|	ТаблицаДвиженийПоВзаиморасчетам.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаДвиженийПоВзаиморасчетам.СпособЗачета КАК СпособЗачета,
	|	ТаблицаДвиженийПоВзаиморасчетам.СуммаПлатежа КАК СуммаПлатежа,
	|	ТаблицаДвиженийПоВзаиморасчетам.ИндексСтрокиДокумента КАК ИндексСтрокиДокумента,
	|	ТаблицаДвиженийПоВзаиморасчетам.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДвиженийПоВзаиморасчетам.СтавкаНДС КАК СтавкаНДС,
	|	&ТребуемыеРеквизитыШапки КАК ТребуемыеРеквизитыШапки,
	|	ТаблицаДвиженийПоВзаиморасчетам.ДокументОплаты КАК ДокументОплаты,
	|	ТаблицаДвиженийПоВзаиморасчетам.Курс КАК Курс,
	|	ТаблицаДвиженийПоВзаиморасчетам.Кратность КАК Кратность,
	|	ТаблицаДвиженийПоВзаиморасчетам.ВалютаПлатежа КАК ВалютаПлатежа,
	|	ТаблицаДвиженийПоВзаиморасчетам.ЭтоОплатаЗаказа КАК ЭтоОплатаЗаказа,
	|	ТаблицаДвиженийПоВзаиморасчетам.Период КАК Период,
	|	ТаблицаДвиженийПоВзаиморасчетам.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ТаблицаДвиженийПоВзаиморасчетам.НомерСертификата КАК НомерСертификата
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателями
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПокупателямиПредварительно КАК ТаблицаДвиженийПоВзаиморасчетам";
	
	Если ((ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходнаяНакладная") И НЕ  СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком)
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктВыполненныхРабот")
		ИЛИ (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПокупателя") И СтруктураДанныхДокумента.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд)) Тогда
		
		Запрос.Текст = Запрос.Текст +
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
		ТекстПоСертификатам =
		"ВЫБРАТЬ
		|	&СпециальныеРеквизиты,
		|	1,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
		|	ТаблицаДокумента.Период,
		|	ТаблицаДокумента.Организация,
		|	&КонтрагентДляПредоплаты КАК Контрагент,
		|	ЛОЖЬ,
		|	&СчетУчетаАвансовПокупателя КАК СчетУчета,
		|	&ДоговорПоУмолчанию КАК Договор,
		|	НЕОПРЕДЕЛЕНО КАК Документ,
		|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК Заказ,
		|	ТаблицаДокумента.ВалютаРасчетов КАК Валюта,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
		|	СУММА(ТаблицаДокумента.Сумма),
		|	СУММА(ТаблицаДокумента.СуммаВал),
		|	СУММА(ТаблицаДокумента.СуммаРег),
		|	СУММА(ТаблицаДокумента.Сумма),
		|	СУММА(ТаблицаДокумента.СуммаВал),
		|	ВЫРАЗИТЬ(&ВозникновениеАвансаПокупателя КАК СТРОКА(100)),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	&ТребуемыеРеквизитыШапки,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	ТаблицаДокумента.Период,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Сумма <> 0
		|	И ТаблицаДокумента.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|	И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Период,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.ВалютаРасчетов,
		|	ТаблицаДокумента.Период";
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ТекстПоСертификатам = СтрЗаменить(
				ТекстПоСертификатам,
				"И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)",
				"И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
				|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)"
			);
			ТекстПоСертификатам = СтрЗаменить(
				ТекстПоСертификатам,
				"ВременнаяТаблицаЗапасы КАК ТаблицаДокумента",
				"ВременнаяТаблицаЗапасы КАК ТаблицаДокумента,
				|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка"
			);
			ТекстПоСертификатам = СтрЗаменить(ТекстПоСертификатам, "ВременнаяТаблицаЗапасы КАК", "ВременнаяТаблицаТовары КАК");
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			ТекстПоСертификатам = СтрЗаменить(ТекстПоСертификатам, "ВременнаяТаблицаЗапасы КАК", "ВременнаяТаблицаРаботыИУслуги КАК");
			ТекстПоСертификатам = СтрЗаменить(
				ТекстПоСертификатам,
				"И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)",
				""
			);
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + ТекстПоСертификатам;
		Запрос.УстановитьПараметр("ВозникновениеАвансаПокупателя", НСтр("ru='Возникновение аванса покупателя'"));
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМ")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ 
		|	НЕ &Архивный
		|	И &ЧекПробит";
		Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
		Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Контрагент,
	|	Договор,
	|	Валюта,
	|	Документ,
	|	Заказ,
	|	ТипРасчетов,
	|	СчетУчета";
	
	Если НЕ СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СпециальныеРеквизиты КАК СпециальныеРеквизиты", "ТаблицаДвиженийПоВзаиморасчетам.ОплатаСертификатом КАК ОплатаСертификатом");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СпециальныеРеквизиты,", "НЕОПРЕДЕЛЕНО,");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СпециальныеРеквизиты КАК СпециальныеРеквизиты,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СпециальныеРеквизиты,", "НЕОПРЕДЕЛЕНО,");
	КонецЕсли;
	
	Если ТребуемыеРеквизитыШапки <> "" Тогда
		СтруктураРеквизитов = ОбщегоНазначенияПереопределяемый.СтрокаВСтруктуру(ТребуемыеРеквизитыШапки);
		
		ТекстЗапросаДляВставки = "";
		Для Каждого Реквизит Из СтруктураРеквизитов Цикл
			ТекстЗапросаДляВставки = ТекстЗапросаДляВставки + "ТаблицаДвиженийПоВзаиморасчетам.СсылкаНаДокумент." + Реквизит.Ключ + " КАК " + Реквизит.Ключ + ",";
		КонецЦикла;
		Если Прав(ТекстЗапросаДляВставки, 1) = "," Тогда
			ТекстЗапросаДляВставки = Лев(ТекстЗапросаДляВставки, СтрДлина(ТекстЗапросаДляВставки)-1);
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТребуемыеРеквизитыШапки КАК ТребуемыеРеквизитыШапки", ТекстЗапросаДляВставки);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТребуемыеРеквизитыШапки,", ТекстЗапросаДляВставки);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТребуемыеРеквизитыШапки КАК ТребуемыеРеквизитыШапки", "НЕОПРЕДЕЛЕНО КАК ТребуемыеРеквизитыШапки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТребуемыеРеквизитыШапки,", "НЕОПРЕДЕЛЕНО,");
	КонецЕсли;
	
	Если СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВременнаяТаблицаРасчетыСПокупателями", "ВременнаяТаблицаРасчетыСПоставщиками");
	КонецЕсли;
	
	Если СтруктураДополнительныеСвойства.Свойство("НеобходимПересчет") Тогда
		МодифицироватьЗапросДляПересчетаВВалюту(ДокументСсылка, Запрос, СтруктураДополнительныеСвойства); 
	КонецЕсли; 
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПолучитьТаблицуСуммКЗачету(ДокументОбъект, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПустаяСсылкаНаЗаказ", СтруктураДополнительныеСвойства.ПустойЗаказ);
	
	Если СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоЗаказНаряд Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.Заказ КАК Заказ,
		|	ВременнаяТаблицаТовары.ВсегоВалютаДокумента КАК СуммаРасчетов
		|ПОМЕСТИТЬ ВсегоКЗачету
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаРаботы.Заказ,
		|	ВременнаяТаблицаРаботы.ВсегоВалютаДокумента
		|ИЗ
		|	ВременнаяТаблицаРаботы КАК ВременнаяТаблицаРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсегоКЗачету.Заказ КАК Заказ,
		|	СУММА(ВсегоКЗачету.СуммаРасчетов) КАК СуммаРасчетов
		|ИЗ
		|	ВсегоКЗачету КАК ВсегоКЗачету
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсегоКЗачету.Заказ";
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаЗапасы.Заказ = НЕОПРЕДЕЛЕНО
		|			ТОГДА &ПустаяСсылкаНаЗаказ
		|		ИНАЧЕ ЕСТЬNULL(ВременнаяТаблицаЗапасы.Заказ, &ПустаяСсылкаНаЗаказ)
		|	КОНЕЦ КАК Заказ,
		|	ВременнаяТаблицаЗапасы.ВсегоВалютаДокумента КАК СуммаРасчетов
		|ПОМЕСТИТЬ ВсегоКЗачету
		|ИЗ
		|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаРасходы.ЗаказПоставщику = НЕОПРЕДЕЛЕНО
		|			ТОГДА &ПустаяСсылкаНаЗаказ
		|		ИНАЧЕ ЕСТЬNULL(ВременнаяТаблицаРасходы.ЗаказПоставщику, &ПустаяСсылкаНаЗаказ)
		|	КОНЕЦ,
		|	ВременнаяТаблицаРасходы.ВсегоВалютаДокумента
		|ИЗ
		|	ВременнаяТаблицаРасходы КАК ВременнаяТаблицаРасходы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсегоКЗачету.Заказ КАК Заказ,
		|	СУММА(ВсегоКЗачету.СуммаРасчетов) КАК СуммаРасчетов
		|ИЗ
		|	ВсегоКЗачету КАК ВсегоКЗачету
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсегоКЗачету.Заказ";

	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаДанные.Заказ = НЕОПРЕДЕЛЕНО
		|			ТОГДА &ПустаяСсылкаНаЗаказ
		|		ИНАЧЕ ЕСТЬNULL(ВременнаяТаблицаДанные.Заказ, &ПустаяСсылкаНаЗаказ)
		|	КОНЕЦ КАК Заказ,
		|	СУММА(ВременнаяТаблицаДанные.ВсегоВалютаДокумента) КАК СуммаРасчетов
		|ИЗ
		|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаДанные.Заказ = НЕОПРЕДЕЛЕНО
		|			ТОГДА &ПустаяСсылкаНаЗаказ
		|		ИНАЧЕ ЕСТЬNULL(ВременнаяТаблицаДанные.Заказ, &ПустаяСсылкаНаЗаказ)
		|	КОНЕЦ";
		
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВременнаяТаблицаЗапасы", "ВременнаяТаблицаРаботыИУслуги");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Заказ", ".ЗаказПокупателя");
		ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВременнаяТаблицаЗапасы", "ВременнаяТаблицаТовары");
		ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМ")
			ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Заказ", ".ЗаказПокупателя");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДополнительныеСвойства.НеобходимПересчет Тогда
		МодифицироватьЗапросДляПересчетаВВалюту(ДокументОбъект.Ссылка, Запрос, СтруктураДополнительныеСвойства);
	КонецЕсли; 
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПересчитатьВалютныеСуммыДляДокументовОплаты(СуммаДляПересчета, СтруктураДополнительныеСвойства, СтрокаРасшифровки)
	
	СтруктураСумм = Новый Структура("Сумма,СуммаРег,СуммаВал");
	
	Если СтрокаРасшифровки.Договор.ВалютаРасчетов = СтруктураДополнительныеСвойства.ВалютаУчета Тогда
		СтруктураСумм.Сумма = СуммаДляПересчета;
	Иначе
		СтруктураСумм.Сумма = СуммаДляПересчета * СтрокаРасшифровки.Курс * СтруктураДополнительныеСвойства.КратностьВалютыУчета /
		(СтруктураДополнительныеСвойства.КурсВалютыУчета * СтрокаРасшифровки.Кратность)
	;
	КонецЕсли;
	
	Если СтрокаРасшифровки.Договор.ВалютаРасчетов = СтруктураДополнительныеСвойства.НациональнаяВалюта Тогда
		СтруктураСумм.СуммаРег = СуммаДляПересчета;
	Иначе
		СтруктураСумм.СуммаРег = СуммаДляПересчета * СтрокаРасшифровки.Курс / СтрокаРасшифровки.Кратность;
	КонецЕсли;
	
	СтруктураСумм.СуммаВал = СуммаДляПересчета;
	
	Возврат СтруктураСумм;
	
КонецФункции // ПересчитатьВалютныеСуммыДляДокументовОплаты()

Процедура СформироватьДвижениеРаспределенияАвтоАванса(ДокументОбъект, СтруктураДополнительныеСвойства, СуммаРаспределения, СтрокаДолги, СтрокаРасшифровки)
	
	// Ручной зачет предоплаты
	Движение = СтруктураДополнительныеСвойства.ПараметрыДокумента.ТаблицаДвиженийПоВзаиморасчетам.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, СтрокаДолги);
	
	// Стандартные реквизиты
	Движение.Период = ДокументОбъект.Дата;
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	// Измерения
	Если НЕ ДокументОбъект.ВестиРасчетыПоЗаказам Тогда
		Движение.Заказ = СтруктураДополнительныеСвойства.ПустойЗаказ;
	Иначе
		Движение.Заказ = ?(ЗначениеЗаполнено(СтрокаДолги.Заказ), СтрокаДолги.Заказ, СтруктураДополнительныеСвойства.ПустойЗаказ);
	КонецЕсли;
	
	Движение.ТипРасчетов = Перечисления.ТипыРасчетов.Долг;
	
	// Ресурсы
	СтруктураСумм = ПересчитатьВалютныеСуммыДляДокументовОплаты(СуммаРаспределения, СтруктураДополнительныеСвойства, СтрокаРасшифровки);
	
	Движение.СуммаВал = СтруктураСумм.СуммаВал;
	Движение.Сумма    = СтруктураСумм.Сумма;
	Движение.СуммаРег = СтруктураСумм.СуммаРег;
	
	// Реквизиты
	Движение.ВалютаПлатежа = ДокументОбъект.ВалютаДенежныхСредств;
	Движение.Курс = СтрокаРасшифровки.Курс;
	Движение.Кратность = СтрокаРасшифровки.Кратность;
	
	ЗаполнитьСуммуПлатежа(Движение, СтрокаРасшифровки, СтруктураДополнительныеСвойства);
	
	Движение.СтавкаНДС = СтрокаРасшифровки.СтавкаНДС;
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Движение.СтавкаНДС);
	Движение.СуммаНДС = Движение.СуммаВал - (Движение.СуммаВал) / ((СтавкаНДС + 100) / 100);
	
	Движение.ХозяйственнаяОперация = ДокументОбъект.ХозяйственнаяОперация;
	Движение.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
	
	Движение.ДокументОплаты = ДокументОбъект.Ссылка;
		
	Если Движение.ТипРасчетов = Перечисления.ТипыРасчетов.Аванс Тогда
		Движение.СодержаниеПроводки = НСтр("ru = 'Оплата заказа'");
		Движение.Документ = ?(ДокументОбъект.ВестиРасчетыПоДокументам, ДокументОбъект.Ссылка, Неопределено);
	Иначе
		Движение.СодержаниеПроводки = НСтр("ru = 'Оплата долга'");
		Движение.Документ = ?(ДокументОбъект.ВестиРасчетыПоДокументам, СтрокаДолги.Документ, Неопределено);
	КонецЕсли;
	
	// Реквизит нужен для получения информации о расшифровке платежа в форме документа.
	Движение.ИндексСтрокиДокумента = СтрокаРасшифровки.НомерСтроки - 1;
	
КонецПроцедуры

Процедура СформироватьДвижениеАвтоАванса(ДокументОбъект, СтруктураДополнительныеСвойства, СуммаРаспределения, СтрокаРасшифровки)
	
	Движение = СтруктураДополнительныеСвойства.ПараметрыДокумента.ТаблицаДвиженийПоВзаиморасчетам.Добавить();
	
	ЗаполнитьЗначенияСвойств(Движение, СтрокаРасшифровки,, "СуммаПлатежа, СуммаНДС");
	
	// Стандартные реквизиты
	Движение.Период = ДокументОбъект.Дата;
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	// Измерения
	Движение.Организация = СтруктураДополнительныеСвойства.ДляПроведения.Организация;
	Движение.Контрагент = ДокументОбъект.Контрагент;
	Движение.Заказ = СтруктураДополнительныеСвойства.ПустойЗаказ;
	Движение.ТипРасчетов = Перечисления.ТипыРасчетов.Аванс;
	
	// Ресурсы
	СтруктураСумм = ПересчитатьВалютныеСуммыДляДокументовОплаты(СуммаРаспределения, СтруктураДополнительныеСвойства, СтрокаРасшифровки);
	
	Движение.СуммаВал = СтруктураСумм.СуммаВал;
	Движение.Сумма    = СтруктураСумм.Сумма;
	Движение.СуммаРег = СтруктураСумм.СуммаРег;
	
	//Реквизиты
	Движение.ВалютаПлатежа = ДокументОбъект.ВалютаДенежныхСредств;
	Движение.Курс = СтрокаРасшифровки.Курс;
	Движение.Кратность = СтрокаРасшифровки.Кратность;
	
	ЗаполнитьСуммуПлатежа(Движение, СтрокаРасшифровки, СтруктураДополнительныеСвойства);
	
	Движение.СтавкаНДС = СтрокаРасшифровки.СтавкаНДС;
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Движение.СтавкаНДС);
	Движение.СуммаНДС = Движение.СуммаВал - (Движение.СуммаВал) / ((СтавкаНДС + 100) / 100);
	
	// Реквизиты
	Движение.ХозяйственнаяОперация = ДокументОбъект.ХозяйственнаяОперация;
	
	Если ЗначениеЗаполнено(Движение.Заказ) Тогда
		Движение.СодержаниеПроводки = НСтр("ru = 'Оплата заказа'");
	Иначе
		Движение.СодержаниеПроводки = НСтр("ru = 'Предоплата'");
	КонецЕсли;
	Движение.Документ = ?(ДокументОбъект.ВестиРасчетыПоДокументам, ДокументОбъект.Ссылка, Неопределено);
	Движение.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
	
	// Реквизит нужен для заполнения представления расшифровки платежа в форме документа.
	Движение.ИндексСтрокиДокумента = СтрокаРасшифровки.НомерСтроки - 1;
	
КонецПроцедуры

Процедура ЗаполнитьСуммуПлатежа(Движение, СтрокаРасшифровки, СтруктураДополнительныеСвойства)
	
	Если Движение.ВалютаПлатежа = СтруктураДополнительныеСвойства.ВалютаУчета Тогда
		Движение.СуммаПлатежа = Движение.Сумма;
	ИначеЕсли Движение.ВалютаПлатежа = СтруктураДополнительныеСвойства.НациональнаяВалюта Тогда
		Движение.СуммаПлатежа = Движение.СуммаРег;
	ИначеЕсли Движение.ВалютаПлатежа = СтрокаРасшифровки.ВалютаРасчетов Тогда
		Движение.СуммаПлатежа = Движение.СуммаВал;
	Иначе
		Движение.СуммаПлатежа = СтрокаРасшифровки.СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыОтгрузки

Функция ПересчитатьВалютныеСуммы(СуммаДляПересчета, СтруктураДополнительныеСвойства, ВВалютеРегламентированногоУчета)
	
	СтруктураСумм = Новый Структура("Сумма,СуммаРег,СуммаВал");
	
	Если ВВалютеРегламентированногоУчета Тогда //В валюте регламентированного учета
		
		СтруктураСумм.СуммаРег = СуммаДляПересчета;
		
		Если СтруктураДополнительныеСвойства.НациональнаяВалюта = СтруктураДополнительныеСвойства.Договор.ВалютаРасчетов Тогда
			СтруктураСумм.СуммаВал = СтруктураСумм.СуммаРег;
		Иначе
			СтруктураСумм.СуммаВал = СуммаДляПересчета / СтруктураДополнительныеСвойства.КурсДокумента * СтруктураДополнительныеСвойства.КратностьДокумента;
		КонецЕсли;
		
		Если СтруктураДополнительныеСвойства.НациональнаяВалюта = СтруктураДополнительныеСвойства.ВалютаУчета Тогда
			СтруктураСумм.Сумма = СтруктураСумм.СуммаРег;
		ИначеЕсли СтруктураДополнительныеСвойства.ВалютаУчета = СтруктураДополнительныеСвойства.Договор.ВалютаРасчетов Тогда
			СтруктураСумм.Сумма = СтруктураСумм.СуммаВал;
		Иначе
			СтруктураСумм.Сумма = СтруктураСумм.СуммаРег / СтруктураДополнительныеСвойства.КурсВалютыУчета * СтруктураДополнительныеСвойства.КратностьВалютыУчета;
		КонецЕсли;
		
	Иначе //В валюте расчетов
		
		СтруктураСумм.СуммаВал = СуммаДляПересчета;
		
		Если СтруктураДополнительныеСвойства.ВалютаУчета = СтруктураДополнительныеСвойства.ВалютаДокумента Тогда
			СтруктураСумм.Сумма = СтруктураСумм.СуммаВал;
		Иначе
			СтруктураСумм.Сумма = СтруктураСумм.СуммаВал * СтруктураДополнительныеСвойства.КурсДокумента * СтруктураДополнительныеСвойства.КратностьВалютыУчета /
			(?(СтруктураДополнительныеСвойства.КратностьДокумента = 0, 1, СтруктураДополнительныеСвойства.КратностьДокумента)
			* ?(СтруктураДополнительныеСвойства.КурсВалютыУчета = 0, 1, СтруктураДополнительныеСвойства.КурсВалютыУчета))
			;
		КонецЕсли;
		
		Если СтруктураДополнительныеСвойства.НациональнаяВалюта = СтруктураДополнительныеСвойства.ВалютаДокумента Тогда
			СтруктураСумм.СуммаРег = СтруктураСумм.СуммаВал;
		Иначе
			СтруктураСумм.СуммаРег = СтруктураСумм.СуммаВал * СтруктураДополнительныеСвойства.КурсДокумента / СтруктураДополнительныеСвойства.КратностьДокумента;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат СтруктураСумм;
	
КонецФункции // ПересчитатьВалютныеСуммы()

Процедура РаспределитьАванс(ДокументОбъект, СтрокиТЗАвансовДляЗачета, СтрокаКЗачету, ДополнительныеСвойства)
	
	Для Каждого ТекущаяСтрокаАванс Из СтрокиТЗАвансовДляЗачета Цикл
		
		Если ДополнительныеСвойства.ПараметрыДокумента.ЭтоКорректировка Тогда //Корректировки могут быть как больше, так и меньше нуля
			Если ТекущаяСтрокаАванс.СуммаВалОстаток = 0 Тогда
				Продолжить;
			КонецЕсли;
		Иначе	
			Если ТекущаяСтрокаАванс.СуммаВалОстаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СформироватьДвижениеЗачетаАванса(ДокументОбъект, СтрокаКЗачету, ТекущаяСтрокаАванс, ДополнительныеСвойства);
		
		Если СтрокаКЗачету.СуммаВалОстаток = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвижениеЗачетаАванса(ДокументОбъект, СтрокаКЗачету, СтрокаАванса, СтруктураДополнительныеСвойства)
	
	ПараметрыДокумента = СтруктураДополнительныеСвойства.ПараметрыДокумента;
	Заказ = СтрокаАванса.Заказ;
	
	Движение = ПараметрыДокумента.ТаблицаДвиженийПоВзаиморасчетам.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, СтрокаАванса);
	
	// Для случая, когда зачитывается аванс без заказа
	Движение.Заказ = ?(ДокументОбъект.ВестиРасчетыПоЗаказам, Заказ, СтруктураДополнительныеСвойства.ПустойЗаказ); 
	
	// Стандартные реквизиты
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Период = ДокументОбъект.Период;
	
	// Ресурсы
	Если ДокументОбъект.ВалютаДокумента = ДокументОбъект.ДоговорВалютаРасчетов Тогда //документ в валюте расчетов
		
		СуммаВал = Мин(СтрокаАванса.СуммаВалОстаток, СтрокаКЗачету.СуммаВалОстаток);
		
		// При ручном зачете аванс может быть выбран по ошибке
		Если СтруктураДополнительныеСвойства.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную Тогда
			Если СтрокаКЗачету.СуммаВалОстаток = 0 Тогда
				СуммаВал = СтрокаАванса.СуммаВалОстаток;
			КонецЕсли;
		КонецЕсли;
		
		Движение.СуммаВал = СуммаВал;
		
		Если СтрокаАванса.СуммаВалОстаток = СуммаВал Тогда
			Движение.Сумма = СтрокаАванса.СуммаОстаток;
			Движение.СуммаРег = СтрокаАванса.СуммаРегОстаток;
		Иначе
			// Определяем курсы пересчета из валюты операции
			КоэффициентВалютаУчета = СтрокаАванса.СуммаОстаток / СтрокаАванса.СуммаВалОстаток;
			КоэффициентНациональнаяВалюта = СтрокаАванса.СуммаРегОстаток / СтрокаАванса.СуммаВалОстаток;
			
			Движение.Сумма	  = СуммаВал * КоэффициентВалютаУчета;
			Движение.СуммаРег = СуммаВал * КоэффициентНациональнаяВалюта;
		КонецЕсли;
		
		Если СтрокаАванса.СуммаВалОстаток <= СуммаВал Тогда
		
			СтрокаКЗачету.СуммаВалОстаток = СтрокаКЗачету.СуммаВалОстаток - СтрокаАванса.СуммаВалОстаток;
			
			СтрокаАванса.СуммаВалОстаток = 0;
			СтрокаАванса.СуммаОстаток 	 = 0;
			СтрокаАванса.СуммаРегОстаток = 0;
			
		Иначе
			
			СтрокаАванса.СуммаВалОстаток = СтрокаАванса.СуммаВалОстаток - Движение.СуммаВал;
			СтрокаАванса.СуммаОстаток    = СтрокаАванса.СуммаОстаток 	- Движение.Сумма;
			СтрокаАванса.СуммаРегОстаток = СтрокаАванса.СуммаРегОстаток - Движение.СуммаРег;
			
			СтрокаКЗачету.СуммаВалОстаток = 0;
			
		КонецЕсли;
		
	Иначе //В национальной валюте
		
		Если СтрокаАванса.СуммаРегОстаток = 0 Тогда
			Если СтруктураДополнительныеСвойства.НациональнаяВалюта = СтруктураДополнительныеСвойства.ВалютаУчета Тогда
				СтрокаАванса.СуммаРегОстаток = СтрокаАванса.СуммаОстаток;
			Иначе
				Курс = СтруктураДополнительныеСвойства.КурсВалютыУчета;
				Кратность = ?(СтруктураДополнительныеСвойства.КратностьВалютыУчета = 0, 1, СтруктураДополнительныеСвойства.КратностьВалютыУчета);
				СтрокаАванса.СуммаРегОстаток = СтрокаАванса.СуммаОстаток * Курс / Кратность;
			КонецЕсли;
		КонецЕсли;
		
		СуммаВал = Мин(СтрокаАванса.СуммаРегОстаток, СтрокаКЗачету.СуммаВалОстаток);
		
		// При ручном зачете аванс может быть выбран по ошибке
		Если СтруктураДополнительныеСвойства.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную Тогда
			Если СтрокаКЗачету.СуммаВалОстаток = 0 Тогда
				СуммаВал = СтрокаАванса.СуммаРегОстаток;
			КонецЕсли;
		КонецЕсли;
		
		Движение.СуммаРег = СуммаВал;
		
		Если СтрокаАванса.СуммаРегОстаток = СуммаВал Тогда
			Движение.Сумма = СтрокаАванса.СуммаОстаток;
			Движение.СуммаВал = СтрокаАванса.СуммаВалОстаток;
		Иначе
			// Определяем курсы пересчета из валюты операции
			КоэффициентВалютаРасчетов = СтрокаАванса.СуммаВалОстаток / СтрокаАванса.СуммаРегОстаток;
			КоэффициентВалютаУчета    = СтрокаАванса.СуммаОстаток / СтрокаАванса.СуммаРегОстаток;
			
			Движение.СуммаВал	= СуммаВал * КоэффициентВалютаРасчетов;
			Движение.Сумма  	= СуммаВал * КоэффициентВалютаУчета;
		КонецЕсли;
		
		Если СтрокаАванса.СуммаОстаток <= СуммаВал Тогда
			
			СтрокаКЗачету.СуммаВалОстаток = СтрокаКЗачету.СуммаВалОстаток - СтрокаАванса.СуммаРегОстаток;
			
			СтрокаАванса.СуммаВалОстаток = 0;
			СтрокаАванса.СуммаОстаток 	 = 0;
			СтрокаАванса.СуммаРегОстаток = 0;
			
		Иначе
			
			СтрокаАванса.СуммаВалОстаток = СтрокаАванса.СуммаВалОстаток - Движение.СуммаВал;
			СтрокаАванса.СуммаОстаток    = СтрокаАванса.СуммаОстаток 	- Движение.Сумма;
			СтрокаАванса.СуммаРегОстаток = СтрокаАванса.СуммаРегОстаток - Движение.СуммаРег;
			
			СтрокаКЗачету.СуммаВалОстаток = 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Реквизиты
	Движение.ХозяйственнаяОперация = ДокументОбъект.ХозяйственнаяОперация;
	Движение.СодержаниеПроводки = СтруктураДополнительныеСвойства.ТекстЗачетПредоплаты;
	Движение.СпособЗачета = СтруктураДополнительныеСвойства.СтруктураДанныхДокумента.СпособЗачетаПредоплаты;
	Движение.ДокументОплаты = СтрокаАванса.Документ;
	Движение.СуммаПлатежа = Движение.СуммаВал;
	
	Если Движение.СуммаРег <> 0 И Движение.СуммаВал <> 0 Тогда
		Движение.Курс = Движение.СуммаРег / Движение.СуммаВал;
		Движение.Кратность = ДокументОбъект.Кратность;
	Иначе
		Движение.Курс = СтрокаАванса.Курс;
		Движение.Кратность = СтрокаАванса.Кратность;
	КонецЕсли;
	
	Если СтрокаАванса.Документ <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаАванса.Документ, "ВалютаДенежныхСредств") Тогда
		Движение.ВалютаПлатежа = СтрокаАванса.Документ.ВалютаДенежныхСредств;
	КонецЕсли; 
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
		Движение.СуммаРег = 0;
	КонецЕсли; 
	
	// Для корректного отображения в отчетах необходимо добавить движение по формированию долга, которым был зачтен аванс 
	ДвижениеДолг = ПараметрыДокумента.ТаблицаДвиженийПоВзаиморасчетам.Добавить();
	ЗаполнитьЗначенияСвойств(ДвижениеДолг, Движение);
	ДвижениеДолг.СодержаниеПроводки = СтруктураДополнительныеСвойства.ТекстВозникновениеОбязательств;
	ДвижениеДолг.СсылкаНаДокумент = ДокументОбъект.Ссылка;
	ДвижениеДолг.ТипРасчетов = Перечисления.ТипыРасчетов.Долг;
	ДвижениеДолг.ДокументОплаты = Неопределено;
	
	Если НЕ ДокументОбъект.ВестиРасчетыПоДокументам Тогда
		ДвижениеДолг.Документ = Неопределено;
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ДвижениеДолг.Документ = ДокументОбъект.Ссылка.ИсправляемыйДокументРеализации;
	Иначе
		ДвижениеДолг.Документ = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	// Если зачитывался аванс без заказа, а в документе отгрузки заказ есть, тогда долг должен быть сформирован по заказу
	Если НЕ ЗначениеЗаполнено(Заказ) И ДокументОбъект.ВестиРасчетыПоЗаказам Тогда
		 ДвижениеДолг.Заказ = ?(ЗначениеЗаполнено(СтрокаКЗачету.Заказ), СтрокаКЗачету.Заказ, СтруктураДополнительныеСвойства.ПустойЗаказ);
	КонецЕсли;
	
	// Для корректного отображения в отчетах необходимо добавить движение по уменьшению долга зачтенным авансом 
	ДвижениеЗачетАванса = ПараметрыДокумента.ТаблицаДвиженийПоВзаиморасчетам.Добавить();
	ЗаполнитьЗначенияСвойств(ДвижениеЗачетАванса, ДвижениеДолг);
	ДвижениеЗачетАванса.СодержаниеПроводки = СтруктураДополнительныеСвойства.ТекстЗачетПредоплаты;
	ДвижениеЗачетАванса.ВидДвижения = ВидДвиженияНакопления.Расход;
	ДвижениеЗачетАванса.ДокументОплаты = СтрокаАванса.Документ;
	
	// Подарочные сертификаты
	Если СтрокаАванса.ОплатаСертификатом Тогда
		Движение.Контрагент = СтруктураДополнительныеСвойства.ДляСертификатов.КонтрагентДляПредоплаты;
		Движение.Договор = СтруктураДополнительныеСвойства.ДляСертификатов.ДоговорПоУмолчанию;
		Движение.Документ = Неопределено;
		Движение.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
		Движение.ОплатаСертификатом = Истина;
		Движение.ПодарочныйСертификат = СтрокаАванса.Документ;
		Движение.НомерСертификата = СтрокаАванса.НомерСертификата;
	КонецЕсли;
	
	// Признак для формирования движений по оборотному регистру "Оплата заказов"
	Если ПараметрыДокумента.ЭтоЗаказНаряд Тогда
		ДвижениеЗачетАванса.ЭтоОплатаЗаказа = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаАванса.Заказ) И ЗначениеЗаполнено(СтрокаКЗачету.Заказ) Тогда
		ДвижениеЗачетАванса.ЭтоОплатаЗаказа = Истина;
	КонецЕсли;
	
	// Необходимо удалить движение долга для корректировки, в которой изменялись только зачтенные авансы
	Если ПараметрыДокумента.ЭтоКорректировка И СтруктураДополнительныеСвойства.Свойство("КорректировкаБезИзмененияДолга") Тогда
		ПараметрыДокумента.ТаблицаДвиженийПоВзаиморасчетам.Удалить(Движение);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьСтрокуЗадолженности(ДокументОбъект, СтрокаКЗачету, ДополнительныеСвойства)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаКЗачету, "Долг") Тогда
		СтрокаКЗачету.СуммаВалОстаток = СтрокаКЗачету.СуммаВалОстаток + СтрокаКЗачету.Долг;
	КонецЕсли;
	
	Если СтрокаКЗачету.СуммаВалОстаток <= 0 
		И НЕ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Возврат;
	КонецЕсли;
	
	Заказ = СтрокаКЗачету.Заказ;
	
	ПараметрыДокумента = ДополнительныеСвойства.ПараметрыДокумента;
	
	Движение = ПараметрыДокумента.ТаблицаДвиженийПоВзаиморасчетам.Добавить();
	
	Движение.СсылкаНаДокумент = ДокументОбъект.Ссылка;
	Движение.Организация = ДополнительныеСвойства.ДляПроведения.Организация;
	Движение.Контрагент = ДокументОбъект.Контрагент;
	Движение.Договор = ДокументОбъект.Договор;
	
	// Стандартные реквизиты
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Период = ДокументОбъект.Период;
	
	// Для случая, когда зачитывается аванс без заказа
	Движение.Заказ = ?(ДокументОбъект.ВестиРасчетыПоЗаказам, Заказ, ДополнительныеСвойства.ПустойЗаказ);

	// Ресурсы
	Если ДокументОбъект.ВалютаДокумента = ДокументОбъект.ДоговорВалютаРасчетов Тогда //документ в валюте расчетов
		
		Движение.СуммаВал = СтрокаКЗачету.СуммаВалОстаток;
		
		Если ДополнительныеСвойства.ВалютаУчета = ДокументОбъект.ВалютаДокумента Тогда
			Движение.Сумма = Движение.СуммаВал;
		Иначе
			Движение.Сумма = Движение.СуммаВал * ДополнительныеСвойства.КурсДокумента * ДополнительныеСвойства.КратностьВалютыУчета /
			(?(ДополнительныеСвойства.КратностьДокумента = 0, 1, ДополнительныеСвойства.КратностьДокумента)
			* ?(ДополнительныеСвойства.КурсВалютыУчета = 0, 1, ДополнительныеСвойства.КурсВалютыУчета))
			;
		КонецЕсли;
		
		Если ДополнительныеСвойства.НациональнаяВалюта = ДокументОбъект.ВалютаДокумента Тогда
			Движение.СуммаРег = Движение.СуммаВал;
		Иначе
			Движение.СуммаРег = Движение.СуммаВал * ДополнительныеСвойства.КурсДокумента / ДополнительныеСвойства.КратностьДокумента;
		КонецЕсли;
		
	Иначе // в национальной валюте
		
		Движение.СуммаРег = СтрокаКЗачету.СуммаВалОстаток;
		
		Если ДополнительныеСвойства.НациональнаяВалюта = ДокументОбъект.ДоговорВалютаРасчетов Тогда
			Движение.СуммаВал = Движение.СуммаРег;
		Иначе
			Движение.СуммаВал = СтрокаКЗачету.СуммаВалОстаток / ДополнительныеСвойства.КурсДокумента * ДополнительныеСвойства.КратностьДокумента;
		КонецЕсли;
		
		Если ДополнительныеСвойства.НациональнаяВалюта = ДополнительныеСвойства.ВалютаУчета Тогда
			Движение.Сумма = Движение.СуммаРег;
		ИначеЕсли ДополнительныеСвойства.ВалютаУчета = ДокументОбъект.ДоговорВалютаРасчетов Тогда
			Движение.Сумма = Движение.СуммаВал;
		Иначе
			Движение.Сумма = Движение.СуммаРег / ДополнительныеСвойства.КурсВалютыУчета * ДополнительныеСвойства.КратностьВалютыУчета;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаКЗачету.СуммаВалОстаток = 0;
	
	// Реквизиты
	Движение.СодержаниеПроводки = ДополнительныеСвойства.ТекстВозникновениеОбязательств;
	Движение.ХозяйственнаяОперация = ДокументОбъект.ХозяйственнаяОперация;
	Движение.Курс = ДополнительныеСвойства.КурсДокумента;
	Движение.Кратность = ДополнительныеСвойства.КратностьДокумента;
	Движение.СпособЗачета = ДополнительныеСвойства.СтруктураДанныхДокумента.СпособЗачетаПредоплаты;
	
	Если ПараметрыДокумента.ЭтоОтгрузка Тогда
		Если НЕ ДокументОбъект.ВестиРасчетыПоДокументам Тогда
			Движение.Документ = Неопределено;
		ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			Движение.Документ = Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(ДокументОбъект.Ссылка, Истина);
		Иначе
			Движение.Документ = ДокументОбъект.Ссылка;
		КонецЕсли;
		Движение.ТипРасчетов = Перечисления.ТипыРасчетов.Долг;
		Если ПараметрыДокумента.ЭтоЗаказНаряд Тогда
			Движение.ЭтоОплатаЗаказа = Истина;
		ИначеЕсли ЗначениеЗаполнено(Заказ) Тогда
			Движение.ЭтоОплатаЗаказа = Истина;
		КонецЕсли;
	ИначеЕсли ПараметрыДокумента.ЭтоЗаказ Тогда
		Движение.Заказ = ДокументОбъект.Ссылка;
		Движение.ТипРасчетов = Перечисления.ТипыРасчетов.Аванс;
		Движение.ЭтоОплатаЗаказа = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗачетПредоплаты

// Процедура заменяет стандартную таблицу на временную, при необходимости расчета в нескольких валютах
// 
// Параметры:
// 	ДокументСсылка ссылка на документ, который проводится
// 	Запрос запрос инициализации данных документа
// 	СтруктураДополнительныеСвойства структура дополнительных свойств проведения документа
//
Процедура МодифицироватьЗапросДляПересчетаВВалюту(ДокументСсылка, Запрос, СтруктураДополнительныеСвойства) Экспорт
	
	СтруктураДополнительныеСвойства.Вставить("НеобходимПересчет", Ложь);
	
	// Если валютные операции не включены, используем исходные запросы
	Если НЕ СтруктураДополнительныеСвойства.УчетВалютныхОпераций Тогда
		Возврат;
	КонецЕсли;
	
	// Если все валюты совпадают, используем исходные запросы
	Если  СтруктураДополнительныеСвойства.ВалютаУчета 			  = СтруктураДополнительныеСвойства.НациональнаяВалюта
		И ДокументСсылка.ВалютаДокумента 		 			      = СтруктураДополнительныеСвойства.НациональнаяВалюта
		И СтруктураДополнительныеСвойства.Договор.ВалютаРасчетов  = СтруктураДополнительныеСвойства.НациональнаяВалюта
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьСписокТаблицДляПересчета(ДокументСсылка, СтруктураДополнительныеСвойства);
	
	СтруктураДополнительныеСвойства.НеобходимПересчет = СтруктураДополнительныеСвойства.МассивТаблицДляПересчета.Количество() > 0;
	
	// В исходном запросе заменяем таблицы, которые необходимо пересчитать, добавляя постфикс "ВВалютеДокумента"
	Для каждого ДанныеТаблицы Из СтруктураДополнительныеСвойства.МассивТаблицДляПересчета Цикл
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ДанныеТаблицы.ИмяТаблицы, ДанныеТаблицы.ИмяТаблицы + "ВВалютеДокумента");
	КонецЦикла;
	
КонецПроцедуры

// Процедура подставляет в исходную таблицу, данные таблицы с суммами после распределения
// 
// Параметры:
// 	ДокументСсылка - ссылка на документ, который проводится
// 	Запрос - запрос инициализации данных документа
// 	СтруктураДополнительныеСвойства - структура дополнительных свойств проведения документа
//
Процедура ПоместитьПересчитанныеТаблицыВМенеджерВременныхТаблиц(СтруктураДополнительныеСвойства) Экспорт
	
	Если НЕ СтруктураДополнительныеСвойства.Свойство("МассивТаблицДляПересчета") Тогда //Таблицы не пересчитывались, ничего делать не нужно
		Возврат;
	КонецЕсли;
	
	Для каждого ДанныеТаблицы Из СтруктураДополнительныеСвойства.МассивТаблицДляПересчета Цикл
		ДобавитьТаблицуКЗапросу(ДанныеТаблицы.ВременнаяТаблица, ДанныеТаблицы.ИмяТаблицы, СтруктураДополнительныеСвойства);
	КонецЦикла;
	
КонецПроцедуры

// Процедура помещает в менеджер временных таблиц исходную таблицу после расчета сумм в валютах
// 
// Параметры:
// 	ТаблицаРаспределения временная таблица, в которой были распределены суммы в разных валютах 
// 	ИмяТаблицыВЗапросе имя таблицы, в которую необходимо поместить данные
// 	ДополнительныеСвойства структура дополнительных свойств проведения документа
//
Процедура ДобавитьТаблицуКЗапросу(ТаблицаРаспределения, ИмяТаблицыВЗапросе, ДополнительныеСвойства)
	
	ИмяТаблицыРаспределения = ИмяТаблицыВЗапросе + "ВВалютеДокумента";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ ";
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяТаблицыРаспределения", ИмяТаблицыРаспределения);
	Параметры.Вставить("ИмяТаблицыВЗапросе", 	  ИмяТаблицыВЗапросе);
	Параметры.Вставить("ИмяКолонки", 			  "");
	
	ШаблонСтроки = "[ИмяТаблицыРаспределения].[ИмяКолонки] КАК [ИмяКолонки]," + Символы.ПС;
	
	Для каждого Колонка Из ТаблицаРаспределения.Колонки Цикл
		Параметры.ИмяКолонки = Колонка.Имя;
		Запрос.Текст = Запрос.Текст + СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСтроки, Параметры);
	КонецЦикла;
	
	Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-2); //Удаление запятой у последнего поля
	
	ШаблонОкончанияЗапроса =
	"
	|ПОМЕСТИТЬ [ИмяТаблицыВЗапросе]
	|ИЗ
	|	&ТаблицаРаспределения КАК [ИмяТаблицыРаспределения]"; 
	
	Запрос.Текст = Запрос.Текст + СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонОкончанияЗапроса, Параметры);
	
	Запрос.УстановитьПараметр("ТаблицаРаспределения", ТаблицаРаспределения);
	Запрос.Выполнить();
	
КонецПроцедуры

// Функция возвращает таблицу значений, выгруженную из менеджера временных таблиц по переданному индексу
// 
// Параметры:
// 	ИмяТаблицы  имя временной таблицы в менеджере временных таблиц
// 	ДополнительныеСвойства  структура данных, которая формируется при проведении документов
// Возвращаемое значение: ТаблицаЗначений
// 	
Функция ПолучитьВременнуюТаблицуПоИмени(ИмяТаблицы, ДополнительныеСвойства)
	
	МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	ВременнаяТаблица = МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы);
	
	Если ВременнаяТаблица <> Неопределено Тогда
		Возврат ВременнаяТаблица.ПолучитьДанные().Выгрузить();
	Иначе
		Возврат Новый ТаблицаЗначений;
	КонецЕсли; 
	
КонецФункции

// Функция возвращает таблицу значений с отобранными долгами контрагента из движений по взаиморасчетам
// 
// Параметры:
// 	СтруктураДополнительныеСвойства структура данных, которая формируется при проведении документов
// Возвращаемое значение: ТаблицаЗначений (Заказ, Сумма, СуммаВал)
// 	
Функция ПодготовитьТаблицуСуммРаспределения(СтруктураДополнительныеСвойства)
	
	ТаблицаСуммРаспределения = СтруктураДополнительныеСвойства.ПараметрыДокумента.ТаблицаДвиженийПоВзаиморасчетам.Скопировать();
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
	ПараметрыОтбораСтрок.Вставить("ТипРасчетов", Перечисления.ТипыРасчетов.Долг);
	
	МассивСтрокДолга = ТаблицаСуммРаспределения.НайтиСтроки(ПараметрыОтбораСтрок);
	ИтоговаяТаблица = ТаблицаСуммРаспределения.Скопировать(МассивСтрокДолга);
	
	ИтоговаяТаблица.Свернуть("Заказ", "Сумма, СуммаВал, СуммаРег");
	
	Возврат ИтоговаяТаблица;
	
КонецФункции

Процедура ЗаполнитьСписокТаблицДляПересчета(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Если СтруктураДополнительныеСвойства.Свойство("МассивТаблицДляПересчета") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.Вставить("МассивТаблицДляПересчета", Новый Массив);
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Если ТипДокумента = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		СтруктураВременнойТаблицыЗапасы = Новый Структура;
		СтруктураВременнойТаблицыЗапасы.Вставить("ИмяТаблицы", "ВременнаяТаблицаЗапасы");
		СтруктураВременнойТаблицыЗапасы.Вставить("ВидТабличнойЧасти", Перечисления.ТабличныеЧастиДокументов.Запасы);
		СтруктураДополнительныеСвойства.МассивТаблицДляПересчета.Добавить(СтруктураВременнойТаблицыЗапасы);
		
		СтруктураВременнойТаблицыРасходы = Новый Структура;
		СтруктураВременнойТаблицыРасходы.Вставить("ИмяТаблицы", "ВременнаяТаблицаРасходы");
		СтруктураВременнойТаблицыРасходы.Вставить("ВидТабличнойЧасти", Перечисления.ТабличныеЧастиДокументов.Расходы);
		СтруктураДополнительныеСвойства.МассивТаблицДляПересчета.Добавить(СтруктураВременнойТаблицыРасходы);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		СтруктураВременнойТаблицы = Новый Структура;
		СтруктураВременнойТаблицы.Вставить("ИмяТаблицы", "ВременнаяТаблицаЗапасы");
		СтруктураВременнойТаблицы.Вставить("ВидТабличнойЧасти", Перечисления.ТабличныеЧастиДокументов.Запасы);
		СтруктураДополнительныеСвойства.МассивТаблицДляПересчета.Добавить(СтруктураВременнойТаблицы);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		СтруктураВременнойТаблицы = Новый Структура;
		СтруктураВременнойТаблицы.Вставить("ИмяТаблицы", "ВременнаяТаблицаРаботыИУслуги");
		СтруктураВременнойТаблицы.Вставить("ВидТабличнойЧасти", Перечисления.ТабличныеЧастиДокументов.РаботыИУслуги);
		СтруктураДополнительныеСвойства.МассивТаблицДляПересчета.Добавить(СтруктураВременнойТаблицы);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		СтруктураВременнойТаблицыЗапасы = Новый Структура;
		СтруктураВременнойТаблицыЗапасы.Вставить("ИмяТаблицы", "ВременнаяТаблицаТовары");
		СтруктураВременнойТаблицыЗапасы.Вставить("ВидТабличнойЧасти", Перечисления.ТабличныеЧастиДокументов.Запасы);
		СтруктураДополнительныеСвойства.МассивТаблицДляПересчета.Добавить(СтруктураВременнойТаблицыЗапасы);
		
		СтруктураВременнойТаблицыРаботы = Новый Структура;
		СтруктураВременнойТаблицыРаботы.Вставить("ИмяТаблицы", "ВременнаяТаблицаРаботы");
		СтруктураВременнойТаблицыРаботы.Вставить("ВидТабличнойЧасти", Перечисления.ТабличныеЧастиДокументов.Работы);
		СтруктураДополнительныеСвойства.МассивТаблицДляПересчета.Добавить(СтруктураВременнойТаблицыРаботы);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СчетФактура") Тогда
		
		СтруктураВременнойТаблицы = Новый Структура;
		СтруктураВременнойТаблицы.Вставить("ИмяТаблицы", "ВременнаяТаблицаЗапасы");
		СтруктураВременнойТаблицы.Вставить("ВидТабличнойЧасти", Перечисления.ТабличныеЧастиДокументов.Запасы);
		СтруктураДополнительныеСвойства.МассивТаблицДляПересчета.Добавить(СтруктураВременнойТаблицы);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		СтруктураВременнойТаблицы = Новый Структура;
		СтруктураВременнойТаблицы.Вставить("ИмяТаблицы", "ВременнаяТаблицаЗапасы");
		СтруктураВременнойТаблицы.Вставить("ВидТабличнойЧасти", Перечисления.ТабличныеЧастиДокументов.Запасы);
		СтруктураДополнительныеСвойства.МассивТаблицДляПересчета.Добавить(СтруктураВременнойТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьТаблицыПоКурсамВалют(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Если НЕ СтруктураДополнительныеСвойства.НеобходимПересчет Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураДополнительныеСвойства.Свойство("БезУчетаАвансов") Тогда
		ТаблицаКРаспределению = ПодготовитьТаблицуСуммРаспределения(СтруктураДополнительныеСвойства);
	КонецЕсли; 
	
	ПорядковыйНомерТаблицы = 0;
	
	Для каждого ДанныеТаблицы Из СтруктураДополнительныеСвойства.МассивТаблицДляПересчета Цикл
		
		ПорядковыйНомерТаблицы = ПорядковыйНомерТаблицы + 1;
		ТаблицаСуммДокумента = ПолучитьВременнуюТаблицуПоИмени(ДанныеТаблицы.ИмяТаблицы+"ВВалютеДокумента", СтруктураДополнительныеСвойства);
		
		Если СтруктураДополнительныеСвойства.Свойство("БезУчетаАвансов") Тогда //По итогам табличной части документа
			ТаблицаКРаспределению = ТаблицаСуммДокумента;
		Иначе
			 Если ПорядковыйНомерТаблицы = СтруктураДополнительныеСвойства.МассивТаблицДляПересчета.Количество() Тогда
				 СтруктураДополнительныеСвойства.Вставить("РаспределятьВсюСумму", Истина);
			 КонецЕсли; 
		КонецЕсли;
		
		ПодготовитьТаблицуДокументаРасчетыВВалюте(ДокументСсылка, ТаблицаСуммДокумента, ТаблицаКРаспределению, СтруктураДополнительныеСвойства);
		ДанныеТаблицы.Вставить("ВременнаяТаблица", ТаблицаСуммДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьТаблицуДокументаРасчетыВВалюте(ДокументСсылка, ТаблицаСуммДокумента, РаспределяемаяТаблица, СтруктураДополнительныеСвойства) Экспорт
	
	ВВалютеРегламентированногоУчета = ДокументСсылка.ВалютаДокумента = СтруктураДополнительныеСвойства.НациональнаяВалюта;
	
	Если НЕ СтруктураДополнительныеСвойства.Свойство("БезУчетаАвансов") Тогда  // По взаиморасчетам
		
		Если СтруктураДополнительныеСвойства.Свойство("РаспределятьВсюСумму") Тогда
			
			РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяТаблица.Итог("Сумма"), 	  ТаблицаСуммДокумента, "Сумма", 	"ВсегоВалютаДокумента");
			РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяТаблица.Итог("СуммаВал"), ТаблицаСуммДокумента, "СуммаВал", "ВсегоВалютаДокумента");
			Если ВВалютеРегламентированногоУчета Тогда
				РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяТаблица.Итог("СуммаРег"), ТаблицаСуммДокумента, "СуммаРег", "ВсегоВалютаДокумента");
			Иначе
				РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяТаблица.Итог("СуммаРег"), ТаблицаСуммДокумента, "СуммаРег", "СуммаРег");
			КонецЕсли;
			
		Иначе //От данных по взаиморасчетам зависят суммы в нескольких табличных частях
			
			Если ДокументСсылка.ВалютаДокумента <> СтруктураДополнительныеСвойства.НациональнаяВалюта Тогда // Документ оформлен в валюте расчетов
				
				СуммаВал = ТаблицаСуммДокумента.Итог("ВсегоВалютаДокумента");
				
				КоэффициентВалютыУчета = ?(РаспределяемаяТаблица.Итог("СуммаВал") = 0, 0, РаспределяемаяТаблица.Итог("Сумма") / РаспределяемаяТаблица.Итог("СуммаВал"));
				КоэффициентНациональнойВалюты = ?(РаспределяемаяТаблица.Итог("СуммаВал") = 0, 0, РаспределяемаяТаблица.Итог("СуммаРег") / РаспределяемаяТаблица.Итог("СуммаВал"));
				
				Сумма 	 = СуммаВал * КоэффициентВалютыУчета;
				СуммаРег = СуммаВал * КоэффициентНациональнойВалюты;
				
				РаспределитьСуммуПоКолонкеТаблицы(Сумма,    ТаблицаСуммДокумента, "Сумма",    "ВсегоВалютаДокумента");
				РаспределитьСуммуПоКолонкеТаблицы(СуммаРег, ТаблицаСуммДокумента, "СуммаРег", "ВсегоВалютаДокумента");
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТаблицаСуммДокумента.Колонки, "СуммаРасходов") Тогда
					
					СуммаРасходовВал = ТаблицаСуммДокумента.Итог("СуммаРасходовВал");
					СуммаРасходов = СуммаРасходовВал * КоэффициентВалютыУчета;
					РаспределитьСуммуПоКолонкеТаблицы(СуммаРасходов, ТаблицаСуммДокумента, "СуммаРасходов", "СуммаРасходовВал");
					
					СуммаВал = СуммаВал + СуммаРасходовВал;
					
				КонецЕсли;
				
			Иначе // Договор в у.е., документ оформлен в национальной валюте
				
				СуммаРег = ТаблицаСуммДокумента.Итог("ВсегоВалютаДокумента");
				
				Если РаспределяемаяТаблица.Итог("СуммаРег") = 0 Тогда
					
					Если СтруктураДополнительныеСвойства.НациональнаяВалюта = СтруктураДополнительныеСвойства.ВалютаУчета Тогда
						КоэффициентВалютыУчета  = 1;
						КоэффициентВалютыРасчетов = ?(РаспределяемаяТаблица.Итог("Сумма") = 0, 0, РаспределяемаяТаблица.Итог("СуммаВал") / РаспределяемаяТаблица.Итог("Сумма"));
					Иначе
						КоэффициентВалютыУчета = ?(РаспределяемаяТаблица.Итог("СуммаВал") = 0, 1, РаспределяемаяТаблица.Итог("Сумма") / РаспределяемаяТаблица.Итог("СуммаВал"));
						КоэффициентВалютыРасчетов = 1;
					КонецЕсли; 
				
				Иначе
					КоэффициентВалютыУчета = ?(РаспределяемаяТаблица.Итог("СуммаРег") = 0, 0, РаспределяемаяТаблица.Итог("Сумма") / РаспределяемаяТаблица.Итог("СуммаРег"));
					КоэффициентВалютыРасчетов = ?(РаспределяемаяТаблица.Итог("СуммаРег") = 0, 0, РаспределяемаяТаблица.Итог("СуммаВал") / РаспределяемаяТаблица.Итог("СуммаРег"));
				КонецЕсли;
				
				Сумма 	 = СуммаРег * КоэффициентВалютыУчета;
				СуммаВал = СуммаРег * КоэффициентВалютыРасчетов;
				
				РаспределитьСуммуПоКолонкеТаблицы(Сумма,    ТаблицаСуммДокумента, "Сумма",    "ВсегоВалютаДокумента");
				РаспределитьСуммуПоКолонкеТаблицы(СуммаВал, ТаблицаСуммДокумента, "СуммаВал", "ВсегоВалютаДокумента");
				
			КонецЕсли;
			
			// Уменьшим суммы в распределяемой таблице
			Для каждого СтрокаТаблицы Из РаспределяемаяТаблица Цикл
				Если СтрокаТаблицы.СуммаВал >= СуммаВал Тогда
					СтрокаТаблицы.СуммаВал = СтрокаТаблицы.СуммаВал - СуммаВал;
					СтрокаТаблицы.СуммаРег = СтрокаТаблицы.СуммаРег - СуммаРег;
					СтрокаТаблицы.Сумма    = СтрокаТаблицы.Сумма 	- Сумма;
					Прервать;
				Иначе
					СуммаВал = СуммаВал - СтрокаТаблицы.СуммаВал;
					СуммаРег = СуммаРег - СтрокаТаблицы.СуммаРег;
					Сумма	 = Сумма	- СтрокаТаблицы.Сумма;
					СтрокаТаблицы.СуммаВал = 0;
					СтрокаТаблицы.СуммаРег = 0;
					СтрокаТаблицы.Сумма    = 0;
				КонецЕсли;
			КонецЦикла; 
			
		КонецЕсли; 
		
	Иначе 
		
		СтруктураСумм = ПересчитатьВалютныеСуммы(ТаблицаСуммДокумента.Итог("ВсегоВалютаДокумента"), СтруктураДополнительныеСвойства, ВВалютеРегламентированногоУчета);
		
		РаспределитьСуммуПоКолонкеТаблицы(СтруктураСумм.Сумма,    ТаблицаСуммДокумента, "Сумма", 	"ВсегоВалютаДокумента");
		РаспределитьСуммуПоКолонкеТаблицы(СтруктураСумм.СуммаВал, ТаблицаСуммДокумента, "СуммаВал", "ВсегоВалютаДокумента");
		РаспределитьСуммуПоКолонкеТаблицы(СтруктураСумм.СуммаРег, ТаблицаСуммДокумента, "СуммаРег", "ВсегоВалютаДокумента");
		
	КонецЕсли;
	
	// Пересчет сумм НДС
	Если ТаблицаСуммДокумента.Колонки.Найти("СуммаНДСВал") <> Неопределено Тогда
		
		Если ВВалютеРегламентированногоУчета Тогда // Договор в у.е., документ оформлен в национальной валюте
			
			// Сумма НДС в валюте рассчитывается в целом по документу и распределяется по строкам
			СтруктураСумм = ПересчитатьВалютныеСуммы(ТаблицаСуммДокумента.Итог("СуммаНДСВалютаДокумента"), СтруктураДополнительныеСвойства, Истина);
			
			РаспределитьСуммуПоКолонкеТаблицы(СтруктураСумм.Сумма,    ТаблицаСуммДокумента, "СуммаНДС",    "ВсегоВалютаДокумента");
			РаспределитьСуммуПоКолонкеТаблицы(СтруктураСумм.СуммаВал, ТаблицаСуммДокумента, "СуммаНДСВал", "ВсегоВалютаДокумента");
			РаспределитьСуммуПоКолонкеТаблицы(СтруктураСумм.СуммаРег, ТаблицаСуммДокумента, "СуммаНДСРег", "ВсегоВалютаДокумента");
			
		Иначе // Документ оформлен в валюте расчетов
			
			// Сумма НДС в валюте учета рассчитывается построчно исходя из общей суммы в валюте учета по этой строке и ставки НДС
			Для каждого СтрокаТаблицы Из ТаблицаСуммДокумента Цикл
				ПроцентНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТаблицы.СтавкаНДС);
				СтрокаТаблицы.СуммаНДС 	  = Окр(СтрокаТаблицы.Сумма    * ПроцентНДС / (100 + ПроцентНДС), 2);
				СтрокаТаблицы.СуммаНДСРег = Окр(СтрокаТаблицы.СуммаРег * ПроцентНДС / (100 + ПроцентНДС), 2);
				СтрокаТаблицы.СуммаНДСВал = СтрокаТаблицы.СуммаНДСВалютаДокумента;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТаблицаСуммДокумента.Колонки.Найти("СуммаНДСЗакупкиПродажи") <> Неопределено Тогда
			ТаблицаСуммДокумента.ЗагрузитьКолонку(ТаблицаСуммДокумента.ВыгрузитьКолонку("СуммаНДС"), "СуммаНДСЗакупкиПродажи");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТаблицуАвансовЗачитываемыхВручную(ДокументОбъект, АвансыВручную,  ОстаткиАвансовВРегистре, СтруктураДополнительныеСвойства)
	
	Если ДокументОбъект.СпособЗачетаПредоплаты <> Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Организация,Контрагент,Договор,ТипРасчетов,Документ,Заказ");
	
	Для каждого СтрокаРучногоАванса Из АвансыВручную Цикл
		
		Если СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоКорректировка Тогда //Для корректировки нет необходимости анализировать остатки
		
			Если СтруктураДополнительныеСвойства.НациональнаяВалюта = СтруктураДополнительныеСвойства.ВалютаУчета Тогда
				СтрокаРучногоАванса.СуммаРегОстаток = СтрокаРучногоАванса.СуммаОстаток;
			ИначеЕсли СтруктураДополнительныеСвойства.НациональнаяВалюта = ДокументОбъект.ДоговорВалютаРасчетов Тогда
				СтрокаРучногоАванса.СуммаРегОстаток = СтрокаРучногоАванса.СуммаВалОстаток;
			Иначе
				СтрокаРучногоАванса.СуммаРегОстаток = Окр(СтрокаРучногоАванса.СуммаВалОстаток * СтрокаРучногоАванса.Курс / СтрокаРучногоАванса.Кратность, 2);
			КонецЕсли;
		
		Иначе
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаРучногоАванса);
			
			МассивОстатков = ОстаткиАвансовВРегистре.НайтиСтроки(СтруктураОтбора);
			
			Для каждого СтрокаОстатка Из МассивОстатков Цикл
				Если СтрокаРучногоАванса.СуммаВалОстаток = СтрокаОстатка.СуммаВалОстаток Тогда
					
					СтрокаРучногоАванса.СуммаОстаток = СтрокаОстатка.СуммаОстаток;
					СтрокаРучногоАванса.СуммаРегОстаток = СтрокаОстатка.СуммаРегОстаток;
					ОстаткиАвансовВРегистре.Удалить(СтрокаОстатка);
					Прервать;
					
				Иначе
					
					Если СтруктураДополнительныеСвойства.НациональнаяВалюта = СтруктураДополнительныеСвойства.ВалютаУчета Тогда
						СтрокаРучногоАванса.СуммаРегОстаток = СтрокаРучногоАванса.СуммаОстаток;
					ИначеЕсли СтруктураДополнительныеСвойства.НациональнаяВалюта = ДокументОбъект.ДоговорВалютаРасчетов Тогда
						СтрокаРучногоАванса.СуммаРегОстаток = СтрокаРучногоАванса.СуммаВалОстаток;
					Иначе
						СтрокаРучногоАванса.СуммаРегОстаток = Окр(СтрокаРучногоАванса.СуммаВалОстаток * СтрокаРучногоАванса.Курс / СтрокаРучногоАванса.Кратность, 2);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла; 
		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ОбновитьРасшифровкуПлатежаПоДаннымВзаиморасчетов(ДокументОбъект, СтруктураДополнительныеСвойства)
	
	// Если валютные операции не включены, используем исходные запросы
	Если НЕ СтруктураДополнительныеСвойства.УчетВалютныхОпераций Тогда
		Возврат;
	КонецЕсли;
	
	ВсеДоговораВНациональнойВалюте = Истина;
	Для каждого СтрокаРасшифровки Из ДокументОбъект.РасшифровкаПлатежа Цикл
		Если СтрокаРасшифровки.Договор.ВалютаРасчетов <> СтруктураДополнительныеСвойства.НациональнаяВалюта Тогда
			ВсеДоговораВНациональнойВалюте = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Если все валюты совпадают, используем исходные запросы
	Если  СтруктураДополнительныеСвойства.ВалютаУчета 			  = СтруктураДополнительныеСвойства.НациональнаяВалюта
		И ДокументОбъект.ВалютаДенежныхСредств	 			      = СтруктураДополнительныеСвойства.НациональнаяВалюта
		И ВсеДоговораВНациональнойВалюте
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РаспределяемаяТаблица = СтруктураДополнительныеСвойства.ПараметрыДокумента.ТаблицаДвиженийПоВзаиморасчетам.Скопировать();
	РасшифровкаПлатежа 	  = ДокументОбъект.РасшифровкаПлатежа;
	
	РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяТаблица.Итог("Сумма"), 	  РасшифровкаПлатежа, "СуммаУчета", 	  "СуммаПлатежа");
	РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяТаблица.Итог("СуммаВал"), РасшифровкаПлатежа, "СуммаРасчетов", 	  "СуммаПлатежа");
	
	// Пересчитаем сумму комиссии, при необходимости
	Если РасшифровкаПлатежа.Колонки.Найти("СуммаУчетаКомиссииПоДоговору") <> Неопределено Тогда
		ИтоговаяСуммаКомиссии = Окр(РасшифровкаПлатежа.Итог("СуммаУчета") * ДокументОбъект.Ссылка.ПроцентКомиссии / 100, 2);
		РаспределитьСуммуПоКолонкеТаблицы(ИтоговаяСуммаКомиссии, РасшифровкаПлатежа, "СуммаУчетаКомиссииПоДоговору", "СуммаКомиссииПоДоговору");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"УНИЧТОЖИТЬ ВременнаяТаблицаРасшифровкаПлатежа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|	ВЫБРАТЬ * ПОМЕСТИТЬ ВременнаяТаблицаРасшифровкаПлатежа ИЗ &РасшифровкаПлатежа КАК ВременнаяТаблицаРасшифровкаПлатежа ";
	
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", РасшифровкаПлатежа);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОбновитьАналитикуВШапке(Объект, ТаблицаСАналитикой, ИмяРеквизитаШапка, ИмяРеквизитаТЧ)
	
	Если ТаблицаСАналитикой.Количество() = 1 Тогда
		
		Объект[ИмяРеквизитаШапка] = ТаблицаСАналитикой[0][ИмяРеквизитаТЧ];
		
	ИначеЕсли ТаблицаСАналитикой.Количество() > 1 Тогда
		
		СуммыПоАналитике = ТаблицаСАналитикой.Выгрузить(,ИмяРеквизитаТЧ + ",СуммаПлатежа");
		СуммыПоАналитике.Свернуть(ИмяРеквизитаТЧ, "СуммаПлатежа");
		СуммыПоАналитике.Сортировать("СуммаПлатежа Убыв");
		
		Объект[ИмяРеквизитаШапка] = СуммыПоАналитике[0][ИмяРеквизитаТЧ];
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИзМодуляРублевыеСуммы

// Данная процедура используется для совместимости и только для документов СчетФактура
//
Функция ПодготовитьТаблицуСуммДокументаСФВыданный(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства, ВременнаяТаблицаЗапасы)
	
	Реквизиты = СтруктураДополнительныеСвойства.ДляПроведения;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаШапка.Договор КАК Договор,
	|	ВременнаяТаблицаШапка.ДоговорВалютаРасчетов КАК ВалютаРасчетов,
	|	ВременнаяТаблицаШапка.ДоговорРасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	КурсыВалют.Курс КАК КурсВзаиморасчетов,
	|	КурсыВалют.Кратность КАК КратностьВзаиморасчетов,
	|	ВременнаяТаблицаШапка.Курс КАК КурсВДокументе,
	|	ВременнаяТаблицаШапка.Кратность КАК КратностьВДокументе,
	|	&НациональнаяВалюта КАК НациональнаяВалюта,
	|	ВременнаяТаблицаШапка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВременнаяТаблицаШапка.Дата КАК Период
	|ИЗ
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалют
	|		ПО (КурсыВалют.Валюта = ВременнаяТаблицаШапка.ДоговорВалютаРасчетов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаЗапасы.ДокументОснование КАК ДокументОснование,
	|	ВременнаяТаблицаЗапасы.СтавкаНДС,
	|	ВременнаяТаблицаЗапасы.СтавкаНДС.Ставка КАК ПроцентНДС,
	|	ВременнаяТаблицаЗапасы.СуммаВал КАК СуммаВзаиморасчетов,
	|	ВременнаяТаблицаЗапасы.СуммаНДСВал КАК СуммаНДСВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.Документ.ВалютаДокумента = &НациональнаяВалюта
	|			ТОГДА ВременнаяТаблицаЗапасы.СуммаНДСВалютаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНДСРуб,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.Документ.ВалютаДокумента = &НациональнаяВалюта
	|			ТОГДА ВременнаяТаблицаЗапасы.ВсегоВалютаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРуб,
	|	0 КАК СуммаБУ
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.ДокументОснование КАК ДокументОснование,
	|	ВременнаяТаблицаЗапасы.ДокументОснование.Дата КАК Период,
	|	ВременнаяТаблицаЗапасы.Курс КАК КурсВзаиморасчетов,
	|	ВременнаяТаблицаЗапасы.Кратность КАК КратностьВзаиморасчетов,
	|	ВременнаяТаблицаЗапасы.КурсУпрВал КАК КурсУпрВал,
	|	ВременнаяТаблицаЗапасы.КратностьУпрВал КАК КратностьУпрВал,
	|	ВременнаяТаблицаЗапасы.КурсРегВал КАК КурсРегВал,
	|	ВременнаяТаблицаЗапасы.КратностьРегВал КАК КратностьРегВал,
	|	СУММА(ВременнаяТаблицаЗапасы.СуммаВал) КАК ИтогСуммаВал,
	|	СУММА(ВременнаяТаблицаЗапасы.СуммаРуб) КАК ИтогСуммаРег
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаЗапасы.ДокументОснование,
	|	ВременнаяТаблицаЗапасы.ДокументОснование.Дата,
	|	ВременнаяТаблицаЗапасы.КратностьРегВал,
	|	ВременнаяТаблицаЗапасы.КурсУпрВал,
	|	ВременнаяТаблицаЗапасы.Кратность,
	|	ВременнаяТаблицаЗапасы.КратностьУпрВал,
	|	ВременнаяТаблицаЗапасы.КурсРегВал,
	|	ВременнаяТаблицаЗапасы.Курс
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование";
	
	Если ВременнаяТаблицаЗапасы <> "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы", ВременнаяТаблицаЗапасы+" КАК ВременнаяТаблицаЗапасы");
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Заполним ТаблицаСуммДокумента
	ТаблицаСуммДокумента = МассивРезультатов[1].Выгрузить();
	
	// Добавим информацию о реквизитах шапки.
	Выборка = МассивРезультатов[0].Выбрать();
	Выборка.Следующий();
	
	Реквизиты.Вставить("Контрагент", Выборка.Контрагент);
	Реквизиты.Вставить("Договор", Выборка.Договор);
	Реквизиты.Вставить("ВалютаРасчетов", Выборка.ВалютаРасчетов);
	Реквизиты.Вставить("РасчетыВУсловныхЕдиницах", Выборка.РасчетыВУсловныхЕдиницах);
	Реквизиты.Вставить("НациональнаяВалюта", Выборка.НациональнаяВалюта);
	Реквизиты.Вставить("КурсВзаиморасчетов", ?(Реквизиты.ВалютаРасчетов = Реквизиты.НациональнаяВалюта, Выборка.КурсВзаиморасчетов, Выборка.КурсВДокументе));
	Реквизиты.Вставить("КратностьВзаиморасчетов", ?(Реквизиты.ВалютаРасчетов = Реквизиты.НациональнаяВалюта, Выборка.КратностьВзаиморасчетов, Выборка.КратностьВДокументе));
	Реквизиты.Вставить("ВалютаДокумента", Выборка.ВалютаДокумента);
	Реквизиты.Вставить("Период", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	
	// Рублевые суммы документов
	Реквизиты.Вставить("НациональнаяВалюта", УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту());
	Реквизиты.Вставить("Контрагент", Реквизиты.Контрагент);
	Реквизиты.Вставить("ВалютаРасчетов", Реквизиты.ВалютаРасчетов);
	Реквизиты.Вставить("РасчетыВВалюте", Реквизиты.ВалютаРасчетов <> Реквизиты.НациональнаяВалюта); // И ДокументСсылкаРасходнаяНакладная.ВалютаДокумента <> Реквизиты.НациональнаяВалюта);
	
	ВыборкаДокОснования = МассивРезультатов[2].Выбрать();
	
	Если Реквизиты.РасчетыВВалюте Тогда // Документ оформлен в валюте расчетов
		
		НесколькоОснований = (ВыборкаДокОснования.Количество() > 1);
		Если НесколькоОснований Тогда
			ВремТаблица = ТаблицаСуммДокумента.СкопироватьКолонки();
			ИтоговаяТаблицаСуммДокумента = ТаблицаСуммДокумента.СкопироватьКолонки();
		Иначе
			ВремТаблица = ТаблицаСуммДокумента;
		КонецЕсли;
		
		Пока ВыборкаДокОснования.Следующий() Цикл
			
			// Подготовим и обработаем таблицу по одному документу основанию.
			Если НесколькоОснований Тогда
				Для Каждого ТекущаяСтрока Из ТаблицаСуммДокумента Цикл
					Если ТекущаяСтрока.ДокументОснование = ВыборкаДокОснования.ДокументОснование Тогда
						ВремНоваяСтрока = ВремТаблица.Добавить();
						ЗаполнитьЗначенияСвойств(ВремНоваяСтрока, ТекущаяСтрока);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ИтогСуммаРуб = ?(ВыборкаДокОснования.КратностьВзаиморасчетов = 0, 0,
				Окр(ВыборкаДокОснования.ИтогСуммаВал * ВыборкаДокОснования.КурсВзаиморасчетов / ВыборкаДокОснования.КратностьВзаиморасчетов, 2));
			РаспределитьСуммуПоКолонкеТаблицы(ИтогСуммаРуб, ВремТаблица, "СуммаРуб", "СуммаВзаиморасчетов");
				
			Если ВремТаблица.Колонки.Найти("СуммаНДСРуб") <> Неопределено Тогда
				// Сумма НДС в рублях рассчитывается построчно исходя из общей рублевой суммы по этой строке и ставки НДС
				Для каждого СтрокаТаблицы Из ВремТаблица Цикл
					СтрокаТаблицы.СуммаНДСРуб = Окр(СтрокаТаблицы.СуммаРуб * СтрокаТаблицы.ПроцентНДС / (100 + СтрокаТаблицы.ПроцентНДС), 2);
				КонецЦикла;
			КонецЕсли;
			
			// Перенесём данные в итоговую таблицу.
			Если НесколькоОснований Тогда
				Для Каждого ТекущаяСтрока Из ВремТаблица Цикл
					ИтогНоваяСтрока = ИтоговаяТаблицаСуммДокумента.Добавить();
					ЗаполнитьЗначенияСвойств(ИтогНоваяСтрока, ТекущаяСтрока);
				КонецЦикла;
				
				ВремТаблица.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Если НесколькоОснований Тогда
			ТаблицаСуммДокумента = ИтоговаяТаблицаСуммДокумента;
		Иначе
			ТаблицаСуммДокумента = ВремТаблица;
		КонецЕсли;
		
	Иначе // Договор в у.е., документ оформлен в рублях
	// !!! Эта ветка пока не задействована !!!
		
		НесколькоОснований = (ВыборкаДокОснования.Количество() > 1);
		Если НесколькоОснований Тогда
			ВремТаблица = ТаблицаСуммДокумента.СкопироватьКолонки();
			ИтоговаяТаблицаСуммДокумента = ТаблицаСуммДокумента.СкопироватьКолонки();
		Иначе
			ВремТаблица = ТаблицаСуммДокумента;
		КонецЕсли;
		
		Пока ВыборкаДокОснования.Следующий() Цикл
			// Подготовим и обработаем таблицу по одному документу основанию.
			Если НесколькоОснований Тогда
				Для Каждого ТекущаяСтрока Из ТаблицаСуммДокумента Цикл
					Если ТекущаяСтрока.ДокументОснование = ВыборкаДокОснования.ДокументОснование Тогда
						ВремНоваяСтрока = ВремТаблица.Добавить();
						ЗаполнитьЗначенияСвойств(ВремНоваяСтрока, ТекущаяСтрока);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Курс      = ВыборкаДокОснования.КурсВзаиморасчетов;
			Кратность = ВыборкаДокОснования.КратностьВзаиморасчетов;
			
			Если ВыборкаДокОснования.КурсВзаиморасчетов = 1 И ВыборкаДокОснования.КратностьВзаиморасчетов = 1 Тогда
				
				КурсИКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаРасчетов, ВыборкаДокОснования.Период);
				
				Курс      = КурсИКратность.Курс;
				Кратность = КурсИКратность.Кратность
				
			КонецЕсли;
			
			ИтогСуммаВзаиморасчетов = ?(Курс = 0 ИЛИ Кратность = 0, 0,
				Окр(ВыборкаДокОснования.ИтогСуммаРег / (Курс / Кратность), 2));
			РаспределитьСуммуПоКолонкеТаблицы(ИтогСуммаВзаиморасчетов, ВремТаблица, "СуммаВзаиморасчетов", "СуммаРуб");
				
			Если ВремТаблица.Колонки.Найти("СуммаНДСВзаиморасчетов") <> Неопределено 
				И ВремТаблица.Колонки.Найти("СуммаНДСРуб") <> Неопределено Тогда
				// Сумма НДС в валюте рассчитывается в целом по документу и распределяется по строкам
				ИтогСуммаНДСВзаиморасчетов = ?(Курс = 0 ИЛИ Кратность = 0, 0,
					Окр(ВремТаблица.Итог("СуммаНДСРуб") / (Курс / Кратность), 2));
				РаспределитьСуммуПоКолонкеТаблицы(ИтогСуммаНДСВзаиморасчетов, ВремТаблица, "СуммаНДСВзаиморасчетов",
					"СуммаНДСРуб");
				КонецЕсли;
			
			// Перенесём данные в итоговую таблицу.
			Если НесколькоОснований Тогда
				Для Каждого ТекущаяСтрока Из ВремТаблица Цикл
					ИтогНоваяСтрока = ИтоговаяТаблицаСуммДокумента.Добавить();
					ЗаполнитьЗначенияСвойств(ИтогНоваяСтрока, ТекущаяСтрока);
				КонецЦикла;
				
				ВремТаблица.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Если НесколькоОснований Тогда
			ТаблицаСуммДокумента = ИтоговаяТаблицаСуммДокумента;
		Иначе
			ТаблицаСуммДокумента = ВремТаблица;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ТаблицаСуммДокумента Цикл
		ТекущаяСтрока.СуммаБУ = ТекущаяСтрока.СуммаРуб;
	КонецЦикла;
	
	Возврат ТаблицаСуммДокумента;
	
КонецФункции

// Данная процедура используется для совместимости и только для документов СчетФактура
//
Функция ПодготовитьТаблицуДокументаРасчетыВВалютеРуб(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства, ВременнаяТаблицаЗапасы = "", ЭтоКорректировка = Ложь) Экспорт

	// Документ может быть оформлен только в двух валютах: национальной и валюте расчетов по договору.
	ЭтоСФ = Истина;
	ТаблицаСуммДокумента = ПодготовитьТаблицуСуммДокументаСФВыданный(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства, ВременнаяТаблицаЗапасы);
	
	// Реквизиты заполняются в процедурах ПодготовитьТаблицуСуммДокументаСФВыданный и ПодготовитьТаблицуСуммДокумента.
	Реквизиты = СтруктураДополнительныеСвойства.ДляПроведения;
	Реквизиты.Вставить("ТаблицаСуммДокумента", ТаблицаСуммДокумента);
	
	// Распределим авансы.
	ТаблицаВзаиморасчетов = ПустаяТаблицаВзаиморасчетовЗачетАвансов();
	ОстаткиАвансов = ПолучитьТаблицаПредоплата(СтруктураДополнительныеСвойства, ЭтоСФ, ЭтоКорректировка, ДокументСсылкаРасходнаяНакладная);
	
	ТаблицаСуммДокументаИтоги = ТаблицаСуммДокумента.Скопировать(, "ДокументОснование, СуммаВзаиморасчетов, СуммаРуб");
	ТаблицаСуммДокументаИтоги.Свернуть("ДокументОснование", "СуммаВзаиморасчетов, СуммаРуб");
	
	ДобавитьКолонкиВзаиморасчетовДляТаблицыДокумента(ТаблицаСуммДокументаИтоги);
	Для Каждого ТекущаяСтрока Из ТаблицаСуммДокументаИтоги Цикл
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Реквизиты);
	КонецЦикла;
	
	ЗаполнитьТаблицуВзаиморасчетовЗачетАвансов(
		ТаблицаСуммДокументаИтоги, 
		ОстаткиАвансов, 
		Реквизиты, 
		ТаблицаВзаиморасчетов, 
		ОстаткиАвансов,
		ЭтоСФ);

	Возврат ТаблицаВзаиморасчетов;
	
КонецФункции

// Данная процедура используется для совместимости и только для документов СчетФактура
//
Процедура РаспределитьАвансыПоТаблицеРеализации(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства, ТаблицаВзаиморасчеты, ИмяТЧ = "Запасы", СмотретьВДопСвойствах = Ложь) Экспорт
	
	Если СмотретьВДопСвойствах Тогда
		
		ЕстьДанные = Ложь;
		
		Для Каждого КлючЗначение Из СтруктураДополнительныеСвойства.СоответствиеТабличныхЧастейИРеквизитаЗаказ Цикл
			ЕстьДанные = ЕстьДанные ИЛИ ДокументСсылкаРасходнаяНакладная[КлючЗначение.Ключ].Количество() > 0;
		КонецЦикла;
		
		Если Не ЕстьДанные Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ДокументСсылкаРасходнаяНакладная[ИмяТЧ].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = СтруктураДополнительныеСвойства.ДляПроведения;
	ТаблицаПоступлениеРеализация = СтруктураДополнительныеСвойства.ДляПроведения.ТаблицаСуммДокумента;
	
	Если ТаблицаВзаиморасчеты = Неопределено
		ИЛИ ТаблицаВзаиморасчеты.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НациональнаяВалюта = Реквизиты.НациональнаяВалюта;
	
	ТаблицаДоговоров = ТаблицаВзаиморасчеты.Скопировать( ,
		"ДокументОснование, Договор, ВалютаРасчетов, РасчетыВУсловныхЕдиницах");
	ТаблицаДоговоров.Свернуть("ДокументОснование, Договор, ВалютаРасчетов, РасчетыВУсловныхЕдиницах");
	ТаблицаВзаиморасчеты.Индексы.Добавить("ДокументОснование");
	ТаблицаВзаиморасчеты.Индексы.Добавить("Договор");
	
	ТаблицаРезультат = ТаблицаПоступлениеРеализация.СкопироватьКолонки();
	
	Для каждого СтрокаДоговора Из ТаблицаДоговоров Цикл
		
		ВалютаРасчетов = СтрокаДоговора.ВалютаРасчетов;
		РасчетыВУсловныхЕдиницах = СтрокаДоговора.РасчетыВУсловныхЕдиницах;
		
		Отбор = Новый Структура("Договор", СтрокаДоговора.Договор);
		Отбор.Вставить("ДокументОснование", СтрокаДоговора.ДокументОснование);
		ТаблицаВзаиморасчетыПоДоговору = ТаблицаВзаиморасчеты.Скопировать(Отбор);
		
		СуммаКорректировки = ТаблицаВзаиморасчетыПоДоговору.Итог("СуммаРубПоКурсуАванса") 
			- ТаблицаВзаиморасчетыПоДоговору.Итог("СуммаРуб")
		;
		
		Если ТаблицаПоступлениеРеализация.Колонки.Найти("Договор") = Неопределено Тогда
			Отбор = Новый Структура("ДокументОснование", СтрокаДоговора.ДокументОснование);
			ТаблицаРезультатПоДоговору = ТаблицаПоступлениеРеализация.Скопировать(Отбор);
		Иначе
			ТаблицаРезультатПоДоговору = ТаблицаПоступлениеРеализация.Скопировать(Отбор);
		КонецЕсли;
		
		Если ВалютаРасчетов = НациональнаяВалюта 
			ИЛИ СуммаКорректировки = 0 Тогда
			
			// Результат корректировки по договору добавляем в общую таблицу.
			ЗагрузитьВТаблицуЗначений(ТаблицаРезультатПоДоговору, ТаблицаРезультат);
			
			Продолжить;
		КонецЕсли;
		
		// БУ - корректируются значения колонки СуммаБУ.
		СуммаРуб = ТаблицаРезультатПоДоговору.Итог("СуммаРуб");
		РаспределитьСуммуПоКолонкеТаблицы(СуммаРуб + СуммаКорректировки, ТаблицаРезультатПоДоговору, "СуммаБУ",
			"СуммаРуб");
		
		// НДС
		НДСПоКурсуАвансов = РасчетыВУсловныхЕдиницах;
		// Нужно проверить, для каких видов операций нужно выполнять действия с НДС, а для каких не нужно.
		
		Если НДСПоКурсуАвансов Тогда // Корректируются значения колонки СуммаНДСРуб.
			
			ТолькоПоКурсуАванса = Истина;
			
			Для Каждого СтрокаТаблицыПоДоговору Из ТаблицаРезультатПоДоговору Цикл
				Если ТолькоПоКурсуАванса Тогда
					ПроцентНДС = СтрокаТаблицыПоДоговору.ПроцентНДС;
					СтрокаТаблицыПоДоговору.СуммаНДСРуб = Окр(СтрокаТаблицыПоДоговору.СуммаБУ * ПроцентНДС / (100 + ПроцентНДС), 2);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Результат корректировки по договору добавляем в общую таблицу.
		ЗагрузитьВТаблицуЗначений(ТаблицаРезультатПоДоговору, ТаблицаРезультат);
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ТаблицаСуммДокумента", ТаблицаРезультат);
	
КонецПроцедуры

// Добавляет в таблицу значений строки из другой таблицы значений и
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник)

	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;

КонецПроцедуры

// Данная процедура используется для совместимости и только для документов СчетФактура
//
Функция ПолучитьТаблицаПредоплата(СтруктураДополнительныеСвойства, ЭтоСФ, ЭтоКорректировка, ДокументСсылка) Экспорт
	
	// 1. Если аванс будет зачитываться "под ноль", то рублевая сумма тоже должна стать = 0.
	// 2. Блокировка используемой таблицы остатков должна быть установлена ранее в процедуре
	// "СформироватьТаблицаРасчетыСПокупателями" в модуле менеджера документа.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ГраницаКонтроляИсключая", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("МоментВремениКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.Параметры.Вставить("ТипРасчетовАванс", Перечисления.ТипыРасчетов.Аванс);
	Запрос.Параметры.Вставить("Контрагент", ДокументСсылка.Контрагент);
	Запрос.Параметры.Вставить("Договор", ДокументСсылка.Договор);
	Запрос.Параметры.Вставить("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	
	Если НЕ ЭтоСФ Тогда
		Если СтруктураДополнительныеСвойства.Свойство("СпособЗачетаПредоплаты") Тогда
			Запрос.Параметры.Вставить("СпособЗачетаПредоплаты", СтруктураДополнительныеСвойства.СпособЗачетаПредоплаты);
		Иначе
			Запрос.Параметры.Вставить("СпособЗачетаПредоплаты", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную);
		КонецЕсли;
		Запрос.Параметры.Вставить("ТаблицаРасчетыСПокупателями", СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПокупателями);
		Если СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПокупателями.Колонки.Найти("СпособЗачета") = Неопределено Тогда
			СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПокупателями.Колонки.Добавить("СпособЗачета", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	РасчетыСПокупателями.Период КАК Период,
		|	РасчетыСПокупателями.Организация КАК Организация,
		|	РасчетыСПокупателями.Контрагент КАК Контрагент,
		|	ВЫРАЗИТЬ(РасчетыСПокупателями.Договор КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
		|	РасчетыСПокупателями.Документ КАК Документ,
		|	РасчетыСПокупателями.Заказ КАК Заказ,
		|	РасчетыСПокупателями.Сумма КАК Сумма,
		|	РасчетыСПокупателями.СуммаВал КАК СуммаВал,
		|	РасчетыСПокупателями.СпособЗачета КАК СпособЗачета
		|ПОМЕСТИТЬ ВТ_Расчеты
		|ИЗ
		|	&ТаблицаРасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И РасчетыСПокупателями.СпособЗачета = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто)
		|	И РасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСПокупателямиОстатки.Договор КАК Договор,
		|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
		|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
		|	-РасчетыСПокупателямиОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
		|	-РасчетыСПокупателямиОстатки.СуммаРегОстаток КАК СуммаРегОстаток,
		|	1 КАК НомерЗапроса
		|ПОМЕСТИТЬ ВТ_ОстаткиАвансовДанные
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Остатки(
		|			&ГраницаКонтроляИсключая,
		|			Организация = &Организация
		|				И ТипРасчетов = &ТипРасчетовАванс
		|				И Договор = &Договор
		|				И Контрагент = &Контрагент
		|				И (Документ, Заказ) В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаПредоплата.Документ,
		|						ВЫБОР
		|							КОГДА ВременнаяТаблицаПредоплата.Заказ = НЕОПРЕДЕЛЕНО
		|								ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|							ИНАЧЕ ВременнаяТаблицаПредоплата.Заказ
		|						КОНЕЦ КАК Заказ
		|					ИЗ
		|						ВременнаяТаблицаПредоплата КАК ВременнаяТаблицаПредоплата
		|			
		|					ОБЪЕДИНИТЬ ВСЕ
		|			
		|					ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВТ_Расчеты.Документ,
		|						ВЫБОР
		|							КОГДА ВТ_Расчеты.Заказ = НЕОПРЕДЕЛЕНО
		|								ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|							ИНАЧЕ ВТ_Расчеты.Заказ
		|						КОНЕЦ
		|					ИЗ
		|						ВТ_Расчеты КАК ВТ_Расчеты)) КАК РасчетыСПокупателямиОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСПокупателями.Договор,
		|	РасчетыСПокупателями.Документ,
		|	РасчетыСПокупателями.Заказ,
		|	РасчетыСПокупателями.СуммаВал,
		|	РасчетыСПокупателями.СуммаРег,
		|	2
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	РасчетыСПокупателями.Регистратор = &Ссылка
		|	И РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовАванс
		|	И РасчетыСПокупателями.Организация = &Организация
		|	И РасчетыСПокупателями.Контрагент = &Контрагент
		|	И РасчетыСПокупателями.Договор = &Договор
		|	И (РасчетыСПокупателями.Документ, РасчетыСПокупателями.Заказ) В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаПредоплата.Документ,
		|				ВЫБОР
		|					КОГДА ВременнаяТаблицаПредоплата.Заказ = НЕОПРЕДЕЛЕНО
		|						ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|					ИНАЧЕ ВременнаяТаблицаПредоплата.Заказ
		|				КОНЕЦ
		|			ИЗ
		|				ВременнаяТаблицаПредоплата)
		|	И РасчетыСПокупателями.ВидДвижения = &ВидДвиженияПриход
		|	И РасчетыСПокупателями.МоментВремени < &МоментВремениКонтроля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиАвансовДанные.Договор КАК Договор,
		|	ВТ_ОстаткиАвансовДанные.Документ КАК Документ,
		|	ВТ_ОстаткиАвансовДанные.Заказ КАК Заказ,
		|	СУММА(ВТ_ОстаткиАвансовДанные.СуммаВалОстаток) КАК СуммаВалОстаток,
		|	СУММА(ВТ_ОстаткиАвансовДанные.СуммаРегОстаток) КАК СуммаРегОстаток
		|ПОМЕСТИТЬ ВТ_ОстаткиАвансов
		|ИЗ
		|	ВТ_ОстаткиАвансовДанные КАК ВТ_ОстаткиАвансовДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОстаткиАвансовДанные.Договор,
		|	ВТ_ОстаткиАвансовДанные.Документ,
		|	ВТ_ОстаткиАвансовДанные.Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Период КАК ДатаДокументаРасчетов,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Договор КАК Договор,
		|	ТаблицаДокумента.ВалютаРасчетов КАК ВалютаРасчетов,
		|	ТаблицаДокумента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаДокумента.Документ КАК Документ,
		|	ТаблицаДокумента.ДокументОснование КАК ДокументОснование,
		|	ТаблицаДокумента.Заказ КАК Заказ,
		|	ТаблицаДокумента.Сумма КАК Сумма,
		|	ТаблицаДокумента.СуммаВал КАК СуммаВал,
		|	ТаблицаДокумента.СуммаВал КАК СуммаЗачета,
		|	ТаблицаДокумента.СуммаРубПоКурсуАванса КАК СуммаРубПоКурсуАванса,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную) КАК СпособЗачета
		|ПОМЕСТИТЬ ВременнаяТаблицаПредоплатаДанные
		|ИЗ
		|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
		|ГДЕ
		|	&СпособЗачетаПредоплаты <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Расчеты.НомерСтроки,
		|	ВТ_Расчеты.Период,
		|	ВТ_Расчеты.Организация,
		|	ВТ_Расчеты.Контрагент,
		|	ВТ_Расчеты.Договор,
		|	ВТ_Расчеты.Договор.ВалютаРасчетов,
		|	ВТ_Расчеты.Договор.РасчетыВУсловныхЕдиницах,
		|	ВТ_Расчеты.Документ,
		|	НЕОПРЕДЕЛЕНО,
		|	ВТ_Расчеты.Заказ,
		|	ВТ_Расчеты.Сумма,
		|	ВТ_Расчеты.СуммаВал,
		|	ВТ_Расчеты.СуммаВал,
		|	0,
		|	ВТ_Расчеты.СпособЗачета
		|ИЗ
		|	ВТ_Расчеты КАК ВТ_Расчеты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки) КАК НомерСтроки,
		|	ТаблицаДокумента.ДатаДокументаРасчетов КАК ДатаДокументаРасчетов,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Договор КАК Договор,
		|	ТаблицаДокумента.ВалютаРасчетов КАК ВалютаРасчетов,
		|	ТаблицаДокумента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаДокумента.Документ КАК Документ,
		|	ТаблицаДокумента.ДокументОснование КАК ДокументОснование,
		|	ТаблицаДокумента.Заказ КАК Заказ,
		|	СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
		|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
		|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаЗачета,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_ОстаткиАвансов.СуммаРегОстаток ЕСТЬ NULL
		|				ТОГДА ТаблицаДокумента.СуммаРубПоКурсуАванса
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ТаблицаДокумента.СуммаВал = ВТ_ОстаткиАвансов.СуммаВалОстаток
		|						ТОГДА ВТ_ОстаткиАвансов.СуммаРегОстаток
		|					КОГДА ТаблицаДокумента.СпособЗачета <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто)
		|						ТОГДА ТаблицаДокумента.СуммаРубПоКурсуАванса
		|					КОГДА ВТ_ОстаткиАвансов.СуммаВалОстаток = 0
		|						ТОГДА 0
		|					ИНАЧЕ ВТ_ОстаткиАвансов.СуммаРегОстаток * ТаблицаДокумента.СуммаВал / ВТ_ОстаткиАвансов.СуммаВалОстаток
		|				КОНЕЦ
		|		КОНЕЦ) КАК СуммаРубПоКурсуАванса,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_ОстаткиАвансов.СуммаРегОстаток ЕСТЬ NULL
		|				ТОГДА ТаблицаДокумента.СуммаРубПоКурсуАванса
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ТаблицаДокумента.СуммаВал = ВТ_ОстаткиАвансов.СуммаВалОстаток
		|						ТОГДА ВТ_ОстаткиАвансов.СуммаРегОстаток
		|					КОГДА ТаблицаДокумента.СпособЗачета <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто)
		|						ТОГДА ТаблицаДокумента.СуммаРубПоКурсуАванса
		|					КОГДА ВТ_ОстаткиАвансов.СуммаВалОстаток = 0
		|						ТОГДА 0
		|					ИНАЧЕ ВТ_ОстаткиАвансов.СуммаРегОстаток * ТаблицаДокумента.СуммаВал / ВТ_ОстаткиАвансов.СуммаВалОстаток
		|				КОНЕЦ
		|		КОНЕЦ) КАК СуммаБУ,
		|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВзаиморасчетов,
		|	ТаблицаДокумента.СпособЗачета КАК СпособЗачета
		|ИЗ
		|	ВременнаяТаблицаПредоплатаДанные КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиАвансов КАК ВТ_ОстаткиАвансов
		|		ПО ТаблицаДокумента.Документ = ВТ_ОстаткиАвансов.Документ
		|			И (ВЫБОР
		|				КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
		|					ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|				ИНАЧЕ ТаблицаДокумента.Заказ
		|			КОНЕЦ = ВТ_ОстаткиАвансов.Заказ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.ДатаДокументаРасчетов,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.Контрагент,
		|	ТаблицаДокумента.Договор,
		|	ТаблицаДокумента.ВалютаРасчетов,
		|	ТаблицаДокумента.РасчетыВУсловныхЕдиницах,
		|	ТаблицаДокумента.Документ,
		|	ТаблицаДокумента.ДокументОснование,
		|	ТаблицаДокумента.Заказ,
		|	ТаблицаДокумента.СуммаРубПоКурсуАванса,
		|	ТаблицаДокумента.СпособЗачета";
		
		Если ЭтоКорректировка Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВременнаяТаблицаПредоплата КАК ТаблицаДокумента", "ВременнаяТаблицаПредоплатаРег КАК ТаблицаДокумента");
		КонецЕсли;
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСПокупателями.Договор КАК Договор,
		|	РасчетыСПокупателями.Документ КАК Документ,
		|	РасчетыСПокупателями.СуммаВал КАК СуммаВалОстаток,
		|	РасчетыСПокупателями.СуммаРег КАК СуммаРегОстаток,
		|	2 КАК НомерЗапроса
		|ПОМЕСТИТЬ ВТ_ОстаткиАвансовДанные
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	РасчетыСПокупателями.Регистратор В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаПредоплата.ДокументОснование
		|			ИЗ
		|				ВременнаяТаблицаПредоплата)
		|	И РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовАванс
		|	И РасчетыСПокупателями.Организация = &Организация
		|	И РасчетыСПокупателями.Контрагент = &Контрагент
		|	И РасчетыСПокупателями.Договор = &Договор
		|	И РасчетыСПокупателями.Документ В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаПредоплата.Документ
		|			ИЗ
		|				ВременнаяТаблицаПредоплата)
		|	И РасчетыСПокупателями.ВидДвижения = &ВидДвиженияПриход
		|	И РасчетыСПокупателями.МоментВремени < &МоментВремениКонтроля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиАвансовДанные.Договор КАК Договор,
		|	ВТ_ОстаткиАвансовДанные.Документ КАК Документ,
		|	СУММА(ВТ_ОстаткиАвансовДанные.СуммаВалОстаток) КАК СуммаВалОстаток,
		|	СУММА(ВТ_ОстаткиАвансовДанные.СуммаРегОстаток) КАК СуммаРегОстаток
		|ПОМЕСТИТЬ ВТ_ОстаткиАвансов
		|ИЗ
		|	ВТ_ОстаткиАвансовДанные КАК ВТ_ОстаткиАвансовДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОстаткиАвансовДанные.Договор,
		|	ВТ_ОстаткиАвансовДанные.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки) КАК НомерСтроки,
		|	ТаблицаДокумента.Период КАК ДатаДокументаРасчетов,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Договор КАК Договор,
		|	ТаблицаДокумента.ВалютаРасчетов КАК ВалютаРасчетов,
		|	ТаблицаДокумента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаДокумента.Документ КАК Документ,
		|	НЕОПРЕДЕЛЕНО КАК Заказ,
		|	ТаблицаДокумента.ДокументОснование КАК ДокументОснование,
		|	СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
		|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
		|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаЗачета,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_ОстаткиАвансов.СуммаРегОстаток ЕСТЬ NULL
		|				ТОГДА ТаблицаДокумента.СуммаРубПоКурсуАванса
		|			ИНАЧЕ ВТ_ОстаткиАвансов.СуммаРегОстаток
		|		КОНЕЦ) КАК СуммаРубПоКурсуАванса,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_ОстаткиАвансов.СуммаРегОстаток ЕСТЬ NULL
		|				ТОГДА ТаблицаДокумента.СуммаРубПоКурсуАванса
		|			ИНАЧЕ ВТ_ОстаткиАвансов.СуммаРегОстаток
		|		КОНЕЦ) КАК СуммаБУ,
		|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВзаиморасчетов,
		|	ВТ_ОстаткиАвансов.СуммаРегОстаток КАК СуммаРегОстаток,
		|	ВТ_ОстаткиАвансов.СуммаВалОстаток КАК СуммаВалОстаток,
		|	ТаблицаДокумента.СуммаРубПоКурсуАванса КАК СуммаРубПоКурсуАвансаПоДаннымДокумента
		|ИЗ
		|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиАвансов КАК ВТ_ОстаткиАвансов
		|		ПО ТаблицаДокумента.Документ = ВТ_ОстаткиАвансов.Документ
		|			И ТаблицаДокумента.СуммаВал = ВТ_ОстаткиАвансов.СуммаВалОстаток
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Период,
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.Контрагент,
		|	ТаблицаДокумента.Договор,
		|	ТаблицаДокумента.ВалютаРасчетов,
		|	ТаблицаДокумента.РасчетыВУсловныхЕдиницах,
		|	ТаблицаДокумента.Документ,
		|	ТаблицаДокумента.ДокументОснование,
		|	ВТ_ОстаткиАвансов.СуммаРегОстаток,
		|	ВТ_ОстаткиАвансов.СуммаВалОстаток,
		|	ТаблицаДокумента.СуммаРубПоКурсуАванса";
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Данная процедура используется для совместимости и только для документов СчетФактура
//
Процедура ЗаполнитьТаблицуВзаиморасчетовЗачетАвансов(
	ТаблицаДокумента,
	ДокументыАвансов,
	Реквизиты,
	ТаблицаВзаиморасчетов,
	ОстаткиАвансов,
	ЭтоСФ) Экспорт
	
	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл

		НераспределенныйОстаток = СтрокаДокумента.СуммаВзаиморасчетов;

		Если ЭтоСФ Тогда
			ДокументыАвансовДляСтрокиДокумента = ДокументыАвансов.НайтиСтроки(
					Новый Структура("ДокументОснование",
					СтрокаДокумента.ДокументОснование));
		Иначе
			ДокументыАвансовДляСтрокиДокумента = ДокументыАвансов;
		КонецЕсли;
		
		Для каждого СтрокаТаблицыАвансов Из ДокументыАвансовДляСтрокиДокумента Цикл

			НераспределенныйОстатокПоДокументу = СтрокаТаблицыАвансов.СуммаЗачета;
			НераспределенныйОстаток = НераспределенныйОстаток - СтрокаТаблицыАвансов.СуммаЗачета;
			
			ДобавитьСтрокиЗачтенныхАвансов(
				ТаблицаВзаиморасчетов,
				НераспределенныйОстатокПоДокументу,
				СтрокаТаблицыАвансов,
				СтрокаДокумента,
				Реквизиты,
				ЭтоСФ);
			
		КонецЦикла;

		ДобавитьСтрокуЗадолженностиРуб(
			ТаблицаВзаиморасчетов,
			НераспределенныйОстаток,
			СтрокаДокумента,
			Реквизиты,
			ЭтоСФ);

	КонецЦикла;

КонецПроцедуры

// Данная процедура используется для совместимости и только для документов СчетФактура
//
Процедура ДобавитьСтрокиЗачтенныхАвансов(ТаблицаВзаиморасчетов, НераспределеннаяСумма, СтрокаОстатка, СтрокаДокумента, Реквизиты, ЭтоСФ)

	Если НераспределеннаяСумма <= 0 Тогда
		Возврат;
	КонецЕсли;

	ЗачитываемыйАванс = Мин(НераспределеннаяСумма, СтрокаОстатка.СуммаВзаиморасчетов);

	Если ЗачитываемыйАванс <= 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();

	Если ЭтоСФ Тогда
		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаДокумента,
			"Контрагент, Договор, ДокументОснование,
			|ВалютаРасчетов, РасчетыВВалюте, РасчетыВУсловныхЕдиницах");
	Иначе
		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаДокумента,
			"Контрагент, Договор,
			|ВалютаРасчетов, РасчетыВВалюте, РасчетыВУсловныхЕдиницах");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаОстатка,
		"Документ, ДатаДокументаРасчетов");

	Если ТаблицаВзаиморасчетов.Колонки.Найти("ТипОплаты") <> Неопределено Тогда
		СтрокаВзаиморасчетов.ТипОплаты = СтрокаДокумента.ТипОплаты;
	КонецЕсли;

	СтрокаВзаиморасчетов.ОстатокВзаиморасчетов 		= СтрокаОстатка.СуммаВзаиморасчетов;
	СтрокаВзаиморасчетов.СуммаВзаиморасчетов 		= ЗачитываемыйАванс;

	КоэффициентКурсаАванса = ?(НЕ СтрокаДокумента.РасчетыВВалюте, 1,
		?(СтрокаОстатка.СуммаВзаиморасчетов = 0, 0, СтрокаОстатка.СуммаБУ / СтрокаОстатка.СуммаВзаиморасчетов));

	КоэффициентРуб = ?(НЕ СтрокаДокумента.РасчетыВВалюте, 1,
		?(СтрокаОстатка.СуммаВзаиморасчетов = 0, 0, СтрокаДокумента.СуммаРуб / СтрокаДокумента.СуммаВзаиморасчетов));

	СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса = Окр(ЗачитываемыйАванс * КоэффициентКурсаАванса, 2);
	СтрокаВзаиморасчетов.СуммаРуб              = Окр(ЗачитываемыйАванс * КоэффициентРуб, 2);

	НераспределеннаяСумма = НераспределеннаяСумма - ЗачитываемыйАванс;

	СтрокаОстатка.СуммаВзаиморасчетов = СтрокаОстатка.СуммаВзаиморасчетов - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
	СтрокаОстатка.СуммаБУ             = СтрокаОстатка.СуммаБУ - СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса;

	СтрокаВзаиморасчетов.Заказ = СтрокаОстатка.Заказ;

КонецПроцедуры

// Данная процедура используется для совместимости и только для документов СчетФактура
//
Процедура ДобавитьСтрокуЗадолженностиРуб(ТаблицаВзаиморасчетов, НераспределеннаяСумма, СтрокаДокумента, Реквизиты, ЭтоСФ)

	Если НераспределеннаяСумма <= 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();

	Если ЭтоСФ Тогда
		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаДокумента,
			"Контрагент, Договор, ДокументОснование, ВалютаРасчетов, РасчетыВВалюте, РасчетыВУсловныхЕдиницах");
	Иначе
		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаДокумента,
			"Контрагент, Договор, ВалютаРасчетов, РасчетыВВалюте, РасчетыВУсловныхЕдиницах");
	КонецЕсли;

	Если ТаблицаВзаиморасчетов.Колонки.Найти("ТипОплаты") <> Неопределено Тогда
		СтрокаВзаиморасчетов.ТипОплаты = СтрокаДокумента.ТипОплаты;
	КонецЕсли;

	СтрокаВзаиморасчетов.Документ              = Реквизиты.Ссылка;
	СтрокаВзаиморасчетов.ДатаДокументаРасчетов = Реквизиты.Период;

	СтрокаВзаиморасчетов.СуммаВзаиморасчетов = НераспределеннаяСумма;

	КоэффициентРуб = ?(НЕ СтрокаДокумента.РасчетыВВалюте, 1,
		?(СтрокаДокумента.СуммаВзаиморасчетов = 0, 0, СтрокаДокумента.СуммаРуб / СтрокаДокумента.СуммаВзаиморасчетов));

	СтрокаВзаиморасчетов.СуммаРуб              = Окр(НераспределеннаяСумма * КоэффициентРуб, 2);
	СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса = СтрокаВзаиморасчетов.СуммаРуб;

КонецПроцедуры

// Данная процедура используется для совместимости и только для документов СчетФактура
//
Процедура ДобавитьКолонкиВзаиморасчетовДляТаблицыДокумента(ТаблицаДокумента)
	
	ТаблицаДокумента.Колонки.Добавить("Контрагент",            Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДокумента.Колонки.Добавить("Договор",    Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаДокумента.Колонки.Добавить("ВалютаРасчетов",  Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаДокумента.Колонки.Добавить("РасчетыВВалюте",           Новый ОписаниеТипов("Булево"));
	ТаблицаДокумента.Колонки.Добавить("РасчетыВУсловныхЕдиницах", Новый ОписаниеТипов("Булево"));
	
КонецПроцедуры

// Данная процедура используется для совместимости и только для документов СчетФактура
//
Функция ПустаяТаблицаВзаиморасчетовЗачетАвансов() Экспорт

	ПустаяТаблица = Новый ТаблицаЗначений();

	ДобавитьКолонкиВзаиморасчетовДляТаблицыДокумента(ПустаяТаблица);
	
	ПустаяТаблица.Колонки.Добавить("Документ",      Документы.ТипВсеСсылки());
	ПустаяТаблица.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПустаяТаблица.Колонки.Добавить("ОстатокВзаиморасчетов", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетов",   ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаРуб",              ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаРубПоКурсуАванса", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("ДокументОснование");
	
	МассивТиповЗаказы = Новый Массив;
	МассивТиповЗаказы.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	МассивТиповЗаказы.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	
	ПустаяТаблица.Колонки.Добавить("Заказ", Новый ОписаниеТипов(МассивТиповЗаказы));
	
	Возврат ПустаяТаблица;

КонецФункции

#КонецОбласти 

