#Область ПрограммныйИнтерфейс

&НаСервере
Процедура УстановитьВидимостьЭлементовПечатиЧека(пФорма, пНапечататьЧекВидимость) Экспорт
	
	Элементы = пФорма.Элементы;
	
	Элементы.НапечататьЧек.Видимость = пНапечататьЧекВидимость;
	Элементы.НомерЧекаККМ.Видимость = пНапечататьЧекВидимость;
	Элементы.ГруппаОтправкаЧека.Видимость = пНапечататьЧекВидимость;
	Элементы.ПредварительныйПросмотрЧека.Видимость = пНапечататьЧекВидимость;
	Элементы.ПодписьКассира.Видимость = пНапечататьЧекВидимость;
	
КонецПроцедуры

Процедура УстановитьЗаголовкиКолонокТабличныхЧастей(пФорма, пВалютаСсылка) Экспорт
	
	// Долги будем всегда выводить в валюте документа, чтобы было легче распределить.
	ПредставлениеВалюты = УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(пВалютаСсылка);
	пФорма.Элементы.РасшифровкаПлатежаСуммаПлатежа.Заголовок = НСтр("ru = 'Сумма '")+ПредставлениеВалюты;
	
КонецПроцедуры

Процедура УстановитьСвязьПараметровВыбораПоОрганизации(пФорма) Экспорт
	
	Если Константы.УчетПоКомпании.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив();
	ТипПолеФормы = Тип("ПолеФормы");
	Элементы = пФорма.Элементы;
	
	Для каждого ЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ЭлементФормы) <> ТипПолеФормы Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементФормы.Вид <> ВидПоляФормы.ПолеВвода Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементФормы.ПутьКДанным = "Объект.РасшифровкаПлатежа.ДокументПланирования"
			ИЛИ ЭлементФормы.ПутьКДанным = "Объект.РасшифровкаПлатежа.Документ"
			ИЛИ ЭлементФормы.ПутьКДанным = "Объект.РасшифровкаПлатежа.Заказ"
			ИЛИ ЭлементФормы.ПутьКДанным = "Объект.РасшифровкаПлатежа.СчетНаОплату"
			ИЛИ ЭлементФормы.ПутьКДанным = "Объект.ВыплатаЗаработнойПлаты.ДокументПланирования"
			ИЛИ ЭлементФормы.ПутьКДанным = "Объект.ЭквайринговыеОперации.Документ"
			ИЛИ ЭлементФормы.ПутьКДанным = "Объект.ЭквайринговыеОперации.Заказ"
			ИЛИ ЭлементФормы.ПутьКДанным = "Объект.ВыплатаЗаработнойПлаты.Ведомость"
			Тогда
			МассивЭлементов.Добавить(ЭлементФормы);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекущийЭлементФормы из МассивЭлементов Цикл
		Если ТекущийЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйМассив = Новый Массив;
		
		// Скопируем существующие связи
		НашлиОтборПоОрганизации = Ложь;
		Для каждого ТекущаяСвязь Из ТекущийЭлементФормы.СвязиПараметровВыбора Цикл
			Если ТекущаяСвязь.Имя = "Отбор.Организация" Тогда
				НашлиОтборПоОрганизации = Истина;
				Прервать;
			КонецЕсли;
			НовыйМассив.Добавить(ТекущаяСвязь);
		КонецЦикла;
		Если НашлиОтборПоОрганизации Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавим связь по организации
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");
		НовыйМассив.Добавить(НоваяСвязь);
		
		// Заполним свойство реквизита
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		
		ТекущийЭлементФормы.СвязиПараметровВыбора = НовыеСвязи;
	КонецЦикла;
	
КонецПроцедуры

Функция ВключенаОтчетность() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОтчетность");
КонецФункции

// Функция возвращает значения по умолчанию для реквизитов группы "Деньги" карточки контрагента (бывшая группа "Взаиморасчеты").
//
// Возвращаемое значение:
//  Структура:
//   * ВестиРасчетыПоДоговорам - Булево - признак ведения расчетов по договорам
//   * ВестиРасчетыПоДокументам - Булево - признак ведения расчетов по документам
//   * ВестиРасчетыПоЗаказам - Булево - признак ведения расчетов по заказам
//   * ВестиУчетОплатыПоСчетам - Булево - признак ведения расчетов по счетам
//
&НаСервере
Функция ПолучитьЗначенияРеквизитовПоУмолчаниюДляНовогоКонтрагента() Экспорт

	СтруктураДляВозврата = Новый Структура;
	
	СтруктураДляВозврата.Вставить("ВестиРасчетыПоДоговорам", Константы.ВестиРасчетыПоДоговорам.Получить());
	СтруктураДляВозврата.Вставить("ВестиРасчетыПоДокументам", ВключенаОтчетность() ИЛИ Константы.ВестиРасчетыПоДокументам.Получить());
	СтруктураДляВозврата.Вставить("ВестиРасчетыПоЗаказам", Константы.ВестиРасчетыПоЗаказам.Получить());
	СтруктураДляВозврата.Вставить("ВестиУчетОплатыПоСчетам", Константы.ВестиУчетОплатыПоСчетам.Получить());
	
	Возврат СтруктураДляВозврата;

КонецФункции // ПолучитьЗначенияРеквизитовПоУмолчаниюДляНовогоКонтрагента()

&НаСервере
Процедура СформироватьЗаголовокГруппыДеньги(Форма) Экспорт
	
	Заголовок = НСтр("ru = 'Взаиморасчеты'");
	ЗаголовокОкончание = "";
	ВсеРазрезы = Истина;
	
	Если Форма.Объект.ВестиРасчетыПоДоговорам Тогда
		ЗаголовокОкончание = ЗаголовокОкончание + НСтр("ru = 'по договорам'");
	Иначе
		ВсеРазрезы = Ложь;
	КонецЕсли;
	
	Если Форма.Объект.ВестиРасчетыПоДокументам Тогда
		Если ЗначениеЗаполнено(ЗаголовокОкончание) Тогда
			ЗаголовокОкончание = ЗаголовокОкончание + НСтр("ru = ', накладным'");
		Иначе
			ЗаголовокОкончание = НСтр("ru = 'по накладным'");
		КонецЕсли;
	Иначе
		ВсеРазрезы = Ложь;
	КонецЕсли;
	
	Если Форма.Объект.ВестиРасчетыПоЗаказам Тогда
		Если ЗначениеЗаполнено(ЗаголовокОкончание) Тогда
			ЗаголовокОкончание = ЗаголовокОкончание + НСтр("ru = ', заказам'");
		Иначе
			ЗаголовокОкончание = НСтр("ru = 'по заказам'");
		КонецЕсли;
	Иначе
		ВсеРазрезы = Ложь;
	КонецЕсли;
	
	Если Форма.Объект.ВестиУчетОплатыПоСчетам Тогда
		Если ЗначениеЗаполнено(ЗаголовокОкончание) Тогда
			ЗаголовокОкончание = ЗаголовокОкончание + НСтр("ru = ', счетам'");
		Иначе
			ЗаголовокОкончание = НСтр("ru = 'по счетам'");
		КонецЕсли;
	Иначе
		ВсеРазрезы = Ложь;
	КонецЕсли;
	
	Если ВсеРазрезы Тогда
		ЗаголовокОкончание = НСтр("ru = 'включена вся аналитика'");
	ИначеЕсли НЕ ЗначениеЗаполнено(ЗаголовокОкончание) Тогда
		ЗаголовокОкончание = НСтр("ru = 'без аналитики'");
	КонецЕсли;
	
	Форма.Элементы.Взаиморасчеты.Заголовок = ЗаголовокОкончание;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСуммуДолгаИАвансаВывестиСообщение(ТолькоДолги, ИтогАванс, ИтогДолг) Экспорт
	
	ТекстСообщения = "";
	
	Если ТолькоДолги И ИтогАванс = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Заполнение не выполнено, т.к. сумма авансов = 0. Вы можете выполнить подбор вручную.'");
	ИначеЕсли ТолькоДолги И ИтогДолг = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Заполнение не выполнено, т.к. сумма долгов = 0. Вы можете выполнить подбор вручную.'");
	ИначеЕсли Не ТолькоДолги И ИтогДолг = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Заполнение не выполнено, т.к. сумма долгов = 0. Вы можете выполнить подбор вручную.'");
	ИначеЕсли Не ТолькоДолги И ИтогДолг = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Заполнение не выполнено, т.к. сумма долгов = 0. Вы можете выполнить подбор вручную.'");
	ИначеЕсли Не ТолькоДолги И ИтогАванс = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Заполнение не выполнено, т.к. сумма авансов = 0. Вы можете выполнить подбор вручную.'");
	ИначеЕсли ИтогДолг = 0 И ИтогАванс = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Заполнение не выполнено, т.к. сумма авансов = 0 и сумма долгов = 0. Вы можете выполнить подбор вручную.'");
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
	Дата,
	Договор,
	ДокументПланирования = Неопределено,
	СтатьяДДС = Неопределено,
	ПолучитьКурсИКратность = Истина,
	СчетНаОплату = Неопределено) Экспорт
	
	СтруктураДанные = Новый Структура;
	
	Если ПолучитьКурсИКратность Тогда
		
		СтруктураДанные.Вставить(
			"ДоговорВалютаКурсКратность",
			РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
				Дата,
				Новый Структура("Валюта", Договор.ВалютаРасчетов)
			)
		);
		
		СтруктураДанные.Вставить(
			"ДоговорВалютаСимвольноеПредставление",
			Договор.ВалютаРасчетов.СимвольноеПредставление
		);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("ВалютаРасчетов", Договор.ВалютаРасчетов);
	// Статья в заявке на расход (РасходДСПЛан) приоритетнее.
	Если ЗначениеЗаполнено(ДокументПланирования) Тогда
		СтруктураДанные.Вставить("СтатьяДДСПоУмолчанию", СтатьяДДС);
	ИначеЕсли ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		СтруктураДанные.Вставить("СтатьяДДСПоУмолчанию", Договор.СтатьяДДСПоУмолчанию);
	КонецЕсли;
	
	Если Не Договор.Пустая() И ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		СтруктураДанные.Вставить("СпособЗачета", ПолучитьСпособЗачетаДляДоговора(Договор, Договор.Владелец, Ложь));
	Иначе
		СтруктураДанные.Вставить("СпособЗачета", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную);
	КонецЕсли;
	СтруктураДанные.Вставить("СпособЗаполненияСтавкиНДС", Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(
			Договор));
			
	Если ПолучитьФункциональнуюОпцию("УчетПоПроектам") Тогда
		СтруктураДанные.Вставить("Проект", Справочники.Проекты.ПолучитьПроектПоДоговору(Договор));
	КонецЕсли;
	
	Если СчетНаОплату = Неопределено Тогда
		СтруктураДанные.Вставить("СчетНаОплатуДоговор", Неопределено);
	Иначе
		СтруктураДанные.Вставить("СчетНаОплатуДоговор", УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(СчетНаОплату, "Договор"));
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении()

Функция ПолучитьСтатьюДДСПоУмолчаниюДляСтрокиРасшифровки(Договор, ДокументПланирования = Неопределено, СтатьяДДС = Неопределено) Экспорт
	
	// Статья в заявке на расход (РасходДСПЛан) приоритетнее.
	Если ЗначениеЗаполнено(ДокументПланирования) Тогда
		Возврат СтатьяДДС;
	ИначеЕсли ЗначениеЗаполнено(Договор) Тогда
		Возврат Договор.СтатьяДДСПоУмолчанию;
	Иначе
		Возврат Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСтавкуНДСПоУмолчанию(СтавкаНДСПоУмолчанию, СтавкаНДСПоУмолчаниюЧисло, НалогообложениеНДС, Организация) Экспорт
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию);
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;
	СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоУмолчанию()

Процедура РассчитатьСуммуНДСНаСервере(СтрокаТабличнойЧасти) Экспорт
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаПлатежа - (СтрокаТабличнойЧасти.СуммаПлатежа) / ((СтавкаНДС + 100) / 100);
	
КонецПроцедуры // РассчитатьСуммуНДСНаКлиенте()

Функция ПолучитьТаблицуЗаписейДляЗаполненияПредставленияРасшифровкиПлатежа(СсылкаНаДокумент, ФормироватьПоДвижениям) Экспорт
	
	Если СсылкаНаДокумент.Пустая() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПоступлениеВКассу")
		ИЛИ ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПоступлениеНаСчет")
		ИЛИ ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РасходИзКассы")
		ИЛИ ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РасходСоСчета")
		Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасчетыСПокупателями.Период КАК Период,
			|	РасчетыСПокупателями.Регистратор КАК Регистратор,
			|	РасчетыСПокупателями.НомерСтроки КАК НомерСтроки,
			|	РасчетыСПокупателями.ВидДвижения КАК ВидДвижения,
			|	РасчетыСПокупателями.Договор КАК Договор,
			|	РасчетыСПокупателями.Заказ КАК Заказ,
			|	РасчетыСПокупателями.Организация КАК Организация,
			|	РасчетыСПокупателями.Контрагент КАК Контрагент,
			|	РасчетыСПокупателями.ТипРасчетов КАК ТипРасчетов,
			|	РасчетыСПокупателями.Документ КАК Документ,
			|	РасчетыСПокупателями.Сумма КАК Сумма,
			|	РасчетыСПокупателями.СуммаВал КАК СуммаРасчетов,
			|	РасчетыСПокупателями.СуммаРег КАК СуммаРег,
			|	ВЫБОР
			|		КОГДА РасчетыСПокупателями.СпособЗачета = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную)
			|		ИНАЧЕ РасчетыСПокупателями.СпособЗачета
			|	КОНЕЦ КАК СпособЗачета,
			|	РасчетыСПокупателями.СуммаПлатежа КАК СуммаПлатежа,
			|	РасчетыСПокупателями.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
			|	РасчетыСПокупателями.ИндексСтрокиДокумента КАК ИндексСтрокиДокумента,
			|	РасчетыСПокупателями.СуммаНДС КАК СуммаНДС,
			|	ЛОЖЬ КАК ЭтоЗачет,
			|	ВЫБОР
			|		КОГДА РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовАванс
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ПризнакАванса,
			|	НЕОПРЕДЕЛЕНО КАК СчетНаОплату,
			|	РасчетыСПокупателями.Курс КАК Курс,
			|	РасчетыСПокупателями.Кратность КАК Кратность
			|ПОМЕСТИТЬ ВременнаяТаблицаОбъединение
			|ИЗ
			|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
			|ГДЕ
			|	РасчетыСПокупателями.Регистратор = &СсылкаНаДокумент
			|	И &ФормироватьПоДвижениям
			|	И РасчетыСПокупателями.Активность
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетыСПокупателями.Период,
			|	РасчетыСПокупателями.Регистратор,
			|	0,
			|	РасчетыСПокупателями.ВидДвижения,
			|	РасчетыСПокупателями.Договор,
			|	РасчетыСПокупателями.Заказ,
			|	РасчетыСПокупателями.Организация,
			|	РасчетыСПокупателями.Контрагент,
			|	РасчетыСПокупателями.ТипРасчетов,
			|	РасчетыСПокупателями.Регистратор,
			|	РасчетыСПокупателями.Сумма,
			|	РасчетыСПокупателями.СуммаВал,
			|	РасчетыСПокупателями.СуммаРег,
			|	ВЫБОР
			|		КОГДА РасчетыСПокупателями.СпособЗачета = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную)
			|		ИНАЧЕ РасчетыСПокупателями.СпособЗачета
			|	КОНЕЦ,
			|	РасчетыСПокупателями.СуммаПлатежа,
			|	РасчетыСПокупателями.Договор.ВалютаРасчетов,
			|	РасчетыСПокупателями.ИндексСтрокиДокумента,
			|	РасчетыСПокупателями.СуммаНДС,
			|	ИСТИНА,
			|	ИСТИНА,
			|	НЕОПРЕДЕЛЕНО,
			|	РасчетыСПокупателями.Курс,
			|	РасчетыСПокупателями.Кратность
			|ИЗ
			|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
			|ГДЕ
			|	РасчетыСПокупателями.Регистратор <> &СсылкаНаДокумент
			|	И РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовАванс
			|	И РасчетыСПокупателями.Документ = &СсылкаНаДокумент
			|	И РасчетыСПокупателями.ВидДвижения = &ВидДвиженияПриход
			|	И РасчетыСПокупателями.Активность
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВременнаяТаблицаОбъединение.Регистратор КАК Регистратор,
			|	ВременнаяТаблицаОбъединение.Договор КАК Договор,
			|	ВременнаяТаблицаОбъединение.Заказ КАК Заказ,
			|	ВременнаяТаблицаОбъединение.Организация КАК Организация,
			|	ВременнаяТаблицаОбъединение.Контрагент КАК Контрагент,
			|	ВременнаяТаблицаОбъединение.ТипРасчетов КАК ТипРасчетов,
			|	ВременнаяТаблицаОбъединение.Документ КАК Документ,
			|	СУММА(ВременнаяТаблицаОбъединение.Сумма) КАК Сумма,
			|	СУММА(ВременнаяТаблицаОбъединение.СуммаРасчетов) КАК СуммаРасчетов,
			|	СУММА(ВременнаяТаблицаОбъединение.СуммаРег) КАК СуммаРег,
			|	ВременнаяТаблицаОбъединение.СпособЗачета КАК СпособЗачета,
			|	СУММА(ВременнаяТаблицаОбъединение.СуммаПлатежа) КАК СуммаПлатежа,
			|	ВременнаяТаблицаОбъединение.ВалютаРасчетов КАК ВалютаРасчетов,
			|	ВременнаяТаблицаОбъединение.ИндексСтрокиДокумента КАК ИндексСтрокиДокумента,
			|	СУММА(ВременнаяТаблицаОбъединение.СуммаНДС) КАК СуммаНДС,
			|	ВременнаяТаблицаОбъединение.ЭтоЗачет КАК ЭтоЗачет,
			|	ВременнаяТаблицаОбъединение.ПризнакАванса КАК ПризнакАванса,
			|	ВременнаяТаблицаОбъединение.СчетНаОплату КАК СчетНаОплату,
			|	ВременнаяТаблицаОбъединение.Курс КАК Курс,
			|	ВременнаяТаблицаОбъединение.Кратность КАК Кратность
			|ИЗ
			|	ВременнаяТаблицаОбъединение КАК ВременнаяТаблицаОбъединение
			|
			|СГРУППИРОВАТЬ ПО
			|	ВременнаяТаблицаОбъединение.ВалютаРасчетов,
			|	ВременнаяТаблицаОбъединение.Договор,
			|	ВременнаяТаблицаОбъединение.ЭтоЗачет,
			|	ВременнаяТаблицаОбъединение.СчетНаОплату,
			|	ВременнаяТаблицаОбъединение.СпособЗачета,
			|	ВременнаяТаблицаОбъединение.Документ,
			|	ВременнаяТаблицаОбъединение.ПризнакАванса,
			|	ВременнаяТаблицаОбъединение.Контрагент,
			|	ВременнаяТаблицаОбъединение.Регистратор,
			|	ВременнаяТаблицаОбъединение.Организация,
			|	ВременнаяТаблицаОбъединение.ТипРасчетов,
			|	ВременнаяТаблицаОбъединение.Заказ,
			|	ВременнаяТаблицаОбъединение.ИндексСтрокиДокумента,
			|	ВременнаяТаблицаОбъединение.Курс,
			|	ВременнаяТаблицаОбъединение.Кратность
			|
			|ИМЕЮЩИЕ
			|	СУММА(ВременнаяТаблицаОбъединение.СуммаРасчетов) <> 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоЗачет,
			|	ИндексСтрокиДокумента";
		
		Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
		Запрос.УстановитьПараметр("ТипРасчетовАванс", Перечисления.ТипыРасчетов.Аванс);
		Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ФормироватьПоДвижениям", ФормироватьПоДвижениям);
		
		Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РасходИзКассы")
			ИЛИ ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РасходСоСчета")
			Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыСПокупателями", "РасчетыСПоставщиками");
		КонецЕсли;
		
		МассивРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		РезультатЗапроса = МассивРезультатов[1];
		
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДанныеОбОплатеПоДокументуОтгрузки(СсылкаНаДокумент, ФормироватьПоДвижениям, ЭтоРасчетыСПоставщиком) Экспорт
	
	Если СсылкаНаДокумент.Пустая() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	// Номера запросов:
	// 1 - 
	// 2 - 
	// 3 - поступление аванса по заказу
	// 4 - 
	// 5 - сторно зачета предоплаты
	// 6 - зачет предоплаты
	
	// Сценарии для 5 и 6
	// 1. Заказ покупателя - Оплата с указанием заказа - Зачет оплаты в накладной на основании заказа. Отработает запрос 3, 5 (сторно 3) и 6.
	// 2. Заказ покупателя - Оплата БЕЗ указанием заказа - Зачет оплаты в накладной на основании заказа. Отработает запрос 6.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК НомерЗапроса,
		|	РасчетыСПокупателями.Период КАК Период,
		|	РасчетыСПокупателями.Регистратор КАК Регистратор,
		|	РасчетыСПокупателями.НомерСтроки КАК НомерСтроки,
		|	РасчетыСПокупателями.ВидДвижения КАК ВидДвижения,
		|	РасчетыСПокупателями.Договор КАК Договор,
		|	РасчетыСПокупателями.Заказ КАК Заказ,
		|	РасчетыСПокупателями.Организация КАК Организация,
		|	РасчетыСПокупателями.Контрагент КАК Контрагент,
		|	РасчетыСПокупателями.ТипРасчетов КАК ТипРасчетов,
		|	РасчетыСПокупателями.Документ КАК Документ,
		|	РасчетыСПокупателями.Сумма КАК Сумма,
		|	РасчетыСПокупателями.СуммаВал КАК СуммаРасчетов,
		|	РасчетыСПокупателями.СуммаРег КАК СуммаРег,
		|	ВЫБОР
		|		КОГДА РасчетыСПокупателями.СпособЗачета = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную)
		|		ИНАЧЕ РасчетыСПокупателями.СпособЗачета
		|	КОНЕЦ КАК СпособЗачета,
		|	РасчетыСПокупателями.СуммаПлатежа КАК СуммаПлатежа,
		|	РасчетыСПокупателями.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
		|	РасчетыСПокупателями.ИндексСтрокиДокумента КАК ИндексСтрокиДокумента,
		|	РасчетыСПокупателями.СуммаНДС КАК СуммаНДС,
		|	РасчетыСПокупателями.СтавкаНДС КАК СтавкаНДС,
		|	ИСТИНА КАК ПризнакАванса,
		|	РасчетыСПокупателями.Курс КАК Курс,
		|	ИСТИНА КАК ЭтоЗачет,
		|	РасчетыСПокупателями.Кратность КАК Кратность,
		|	РасчетыСПокупателями.ВалютаПлатежа КАК ВалютаПлатежа,
		|	ЛОЖЬ КАК ЭтоЧек
		|ПОМЕСТИТЬ ВременнаяТаблицаОбъединение
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	&ФормироватьПоДвижениям
		|	И РасчетыСПокупателями.Регистратор = &СсылкаНаДокумент
		|	И РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовАванс
		|	И РасчетыСПокупателями.ВидДвижения = &ВидДвиженияПриход
		|	И РасчетыСПокупателями.Активность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	РасчетыСПокупателями.Период,
		|	РасчетыСПокупателями.Регистратор,
		|	РасчетыСПокупателями.НомерСтроки,
		|	РасчетыСПокупателями.ВидДвижения,
		|	РасчетыСПокупателями.Договор,
		|	РасчетыСПокупателями.Заказ,
		|	РасчетыСПокупателями.Организация,
		|	РасчетыСПокупателями.Контрагент,
		|	РасчетыСПокупателями.ТипРасчетов,
		|	РасчетыСПокупателями.Регистратор,
		|	РасчетыСПокупателями.Сумма,
		|	РасчетыСПокупателями.СуммаВал,
		|	РасчетыСПокупателями.СуммаРег,
		|	РасчетыСПокупателями.СпособЗачета,
		|	РасчетыСПокупателями.СуммаПлатежа,
		|	РасчетыСПокупателями.Договор.ВалютаРасчетов,
		|	РасчетыСПокупателями.ИндексСтрокиДокумента,
		|	РасчетыСПокупателями.СуммаНДС,
		|	РасчетыСПокупателями.СтавкаНДС,
		|	ЛОЖЬ,
		|	РасчетыСПокупателями.Курс,
		|	ЛОЖЬ,
		|	РасчетыСПокупателями.Кратность,
		|	РасчетыСПокупателями.ВалютаПлатежа,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	РасчетыСПокупателями.Документ = &СсылкаНаДокумент
		|	И РасчетыСПокупателями.Регистратор <> &СсылкаНаДокумент
		|	И РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовДолг
		|	И РасчетыСПокупателями.ВидДвижения = &ВидДвиженияРасход
		|	И РасчетыСПокупателями.Активность
		|	И (ТИПЗНАЧЕНИЯ(РасчетыСПокупателями.Документ) <> ТИП(Документ.ЗаказПокупателя)
		|			ИЛИ РасчетыСПокупателями.Документ.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	РасчетыСПокупателями.Период,
		|	РасчетыСПокупателями.Регистратор,
		|	РасчетыСПокупателями.НомерСтроки,
		|	РасчетыСПокупателями.ВидДвижения,
		|	РасчетыСПокупателями.Договор,
		|	РасчетыСПокупателями.Заказ,
		|	РасчетыСПокупателями.Организация,
		|	РасчетыСПокупателями.Контрагент,
		|	РасчетыСПокупателями.ТипРасчетов,
		|	РасчетыСПокупателями.Регистратор,
		|	РасчетыСПокупателями.Сумма,
		|	РасчетыСПокупателями.СуммаВал,
		|	РасчетыСПокупателями.СуммаРег,
		|	РасчетыСПокупателями.СпособЗачета,
		|	РасчетыСПокупателями.СуммаПлатежа,
		|	РасчетыСПокупателями.Договор.ВалютаРасчетов,
		|	РасчетыСПокупателями.ИндексСтрокиДокумента,
		|	РасчетыСПокупателями.СуммаНДС,
		|	РасчетыСПокупателями.СтавкаНДС,
		|	ЛОЖЬ,
		|	РасчетыСПокупателями.Курс,
		|	ЛОЖЬ,
		|	РасчетыСПокупателями.Кратность,
		|	РасчетыСПокупателями.ВалютаПлатежа,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	РасчетыСПокупателями.Заказ = &СсылкаНаДокумент
		|	И РасчетыСПокупателями.Регистратор <> &СсылкаНаДокумент
		|	И РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовАванс
		|	И РасчетыСПокупателями.ВидДвижения = &ВидДвиженияРасход
		|	И ТИПЗНАЧЕНИЯ(&СсылкаНаДокумент) = ТИП(Документ.ЗаказПокупателя)
		|	И РасчетыСПокупателями.Активность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4,
		|	РасчетыСПокупателями.Период,
		|	РасчетыСПокупателями.Регистратор,
		|	РасчетыСПокупателями.НомерСтроки,
		|	РасчетыСПокупателями.ВидДвижения,
		|	РасчетыСПокупателями.Договор,
		|	РасчетыСПокупателями.Заказ,
		|	РасчетыСПокупателями.Организация,
		|	РасчетыСПокупателями.Контрагент,
		|	РасчетыСПокупателями.ТипРасчетов,
		|	РасчетыСПокупателями.Регистратор,
		|	РасчетыСПокупателями.Сумма,
		|	РасчетыСПокупателями.СуммаВал,
		|	РасчетыСПокупателями.СуммаРег,
		|	РасчетыСПокупателями.СпособЗачета,
		|	РасчетыСПокупателями.СуммаПлатежа,
		|	РасчетыСПокупателями.Договор.ВалютаРасчетов,
		|	РасчетыСПокупателями.ИндексСтрокиДокумента,
		|	РасчетыСПокупателями.СуммаНДС,
		|	РасчетыСПокупателями.СтавкаНДС,
		|	ЛОЖЬ,
		|	РасчетыСПокупателями.Курс,
		|	ЛОЖЬ,
		|	РасчетыСПокупателями.Кратность,
		|	РасчетыСПокупателями.ВалютаПлатежа,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	РасчетыСПокупателями.Заказ = &СсылкаНаДокумент
		|	И РасчетыСПокупателями.Регистратор <> &СсылкаНаДокумент
		|	И РасчетыСПокупателями.Регистратор <> РасчетыСПокупателями.Документ
		|	И РасчетыСПокупателями.ТипРасчетов = &ТипРасчетовДолг
		|	И РасчетыСПокупателями.ВидДвижения = &ВидДвиженияРасход
		|	И ТИПЗНАЧЕНИЯ(&СсылкаНаДокумент) = ТИП(Документ.ЗаказПокупателя)
		|	И РасчетыСПокупателями.Активность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5,
		|	РасчетыСПокупателями.Период,
		|	РасчетыСПокупателями.Регистратор,
		|	РасчетыСПокупателями.НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|	РасчетыСПокупателями.СчетНаОплату.Договор,
		|	РасчетыСПокупателями.СчетНаОплату,
		|	РасчетыСПокупателями.СчетНаОплату.Организация,
		|	РасчетыСПокупателями.СчетНаОплату.Контрагент,
		|	ВЫБОР
		|		КОГДА РасчетыСПокупателями.СуммаАванса > 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
		|	КОНЕЦ,
		|	РасчетыСПокупателями.Регистратор,
		|	РасчетыСПокупателями.СуммаАванса + РасчетыСПокупателями.СуммаОплаты,
		|	РасчетыСПокупателями.СуммаАванса + РасчетыСПокупателями.СуммаОплаты,
		|	РасчетыСПокупателями.СуммаАванса + РасчетыСПокупателями.СуммаОплаты,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную),
		|	РасчетыСПокупателями.СуммаАванса + РасчетыСПокупателями.СуммаОплаты,
		|	НациональнаяВалюта.Значение,
		|	0,
		|	РасчетыСПокупателями.СуммаНДС,
		|	РасчетыСПокупателями.СтавкаНДС,
		|	РасчетыСПокупателями.СуммаАванса > 0,
		|	1,
		|	ЛОЖЬ,
		|	1,
		|	НациональнаяВалюта.Значение,
		|	ИСТИНА
		|ИЗ
		|	РегистрНакопления.ОплатаСчетовИЗаказов КАК РасчетыСПокупателями,
		|	Константа.НациональнаяВалюта КАК НациональнаяВалюта
		|ГДЕ
		|	РасчетыСПокупателями.СчетНаОплату = &СсылкаНаДокумент
		|	И ТИПЗНАЧЕНИЯ(РасчетыСПокупателями.Регистратор) = ТИП(Документ.ЧекККМ)
		|	И РасчетыСПокупателями.Активность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаОбъединение.Договор КАК Договор,
		|	ВременнаяТаблицаОбъединение.Заказ КАК Заказ,
		|	ВременнаяТаблицаОбъединение.Организация КАК Организация,
		|	ВременнаяТаблицаОбъединение.Контрагент КАК Контрагент,
		|	ВременнаяТаблицаОбъединение.ТипРасчетов КАК ТипРасчетов,
		|	ВременнаяТаблицаОбъединение.Документ КАК Документ,
		|	СУММА(ВременнаяТаблицаОбъединение.Сумма) КАК Сумма,
		|	СУММА(ВременнаяТаблицаОбъединение.СуммаРасчетов) КАК СуммаРасчетов,
		|	СУММА(ВременнаяТаблицаОбъединение.СуммаРег) КАК СуммаРег,
		|	ВременнаяТаблицаОбъединение.СпособЗачета КАК СпособЗачета,
		|	СУММА(ВременнаяТаблицаОбъединение.СуммаПлатежа) КАК СуммаПлатежа,
		|	ВременнаяТаблицаОбъединение.ВалютаРасчетов КАК ВалютаРасчетов,
		|	ВременнаяТаблицаОбъединение.ИндексСтрокиДокумента КАК ИндексСтрокиДокумента,
		|	СУММА(ВременнаяТаблицаОбъединение.СуммаНДС) КАК СуммаНДС,
		|	ВременнаяТаблицаОбъединение.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаОбъединение.ПризнакАванса КАК ПризнакАванса,
		|	ВременнаяТаблицаОбъединение.Курс КАК Курс,
		|	ВременнаяТаблицаОбъединение.ЭтоЗачет КАК ЭтоЗачет,
		|	ВременнаяТаблицаОбъединение.Кратность КАК Кратность,
		|	ВременнаяТаблицаОбъединение.ВалютаПлатежа КАК ВалютаПлатежа,
		|	ВременнаяТаблицаОбъединение.ВалютаПлатежа.СимвольноеПредставление КАК ВалютаПлатежаСимвольноеПредставление,
		|	ВременнаяТаблицаОбъединение.ВалютаРасчетов.СимвольноеПредставление КАК ВалютаРасчетовСимвольноеПредставление,
		|	ВременнаяТаблицаОбъединение.ЭтоЧек КАК ЭтоЧек
		|ИЗ
		|	ВременнаяТаблицаОбъединение КАК ВременнаяТаблицаОбъединение
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаОбъединение.СпособЗачета,
		|	ВременнаяТаблицаОбъединение.СтавкаНДС,
		|	ВременнаяТаблицаОбъединение.ПризнакАванса,
		|	ВременнаяТаблицаОбъединение.ВалютаРасчетов,
		|	ВременнаяТаблицаОбъединение.Договор,
		|	ВременнаяТаблицаОбъединение.Организация,
		|	ВременнаяТаблицаОбъединение.Контрагент,
		|	ВременнаяТаблицаОбъединение.ТипРасчетов,
		|	ВременнаяТаблицаОбъединение.Заказ,
		|	ВременнаяТаблицаОбъединение.Документ,
		|	ВременнаяТаблицаОбъединение.ИндексСтрокиДокумента,
		|	ВременнаяТаблицаОбъединение.Курс,
		|	ВременнаяТаблицаОбъединение.ЭтоЗачет,
		|	ВременнаяТаблицаОбъединение.Кратность,
		|	ВременнаяТаблицаОбъединение.ВалютаПлатежа,
		|	ВременнаяТаблицаОбъединение.ВалютаПлатежа.СимвольноеПредставление,
		|	ВременнаяТаблицаОбъединение.ВалютаРасчетов.СимвольноеПредставление,
		|	ВременнаяТаблицаОбъединение.ЭтоЧек
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВременнаяТаблицаОбъединение.СуммаРасчетов) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЗачет,
		|	ИндексСтрокиДокумента";
	
	Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("ТипРасчетовДолг", Перечисления.ТипыРасчетов.Долг);
	Запрос.УстановитьПараметр("ТипРасчетовАванс", Перечисления.ТипыРасчетов.Аванс);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ФормироватьПоДвижениям", ФормироватьПоДвижениям);
	
	Если ЭтоРасчетыСПоставщиком Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыСПокупателями", "РасчетыСПоставщиками");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Возврат РезультатЗапроса[1].Выгрузить();
	
КонецФункции

Функция ПолучитьОстаткиОплаты(ДокументОбъект, ЭтоЗаказ, ПараметрыЗаполненияЗаголовка) Экспорт
	
	Если Ложь Тогда
		ДокументОбъект = Документы.АктВыполненныхРабот.СоздатьДокумент();
	КонецЕсли;
	
	СтруктураДляВозврата = Новый Структура("Оплачено, ВТомЧислеАвто, НеРаспределено, НеРаспределеноВал, ВалютаОстатков"
		, 0, 0, 0, 0, Неопределено
	);
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнены обязательные реквизиты. Функция ""ПолучитьОстаткиОплаты""'");
	КонецЕсли;
	
	// 1. Получим оплату текущего заказа.
	// 2. Получим остатки нераспределённого аванса (независимо от даты документа).
	
	// 1
	Если НЕ ДокументОбъект.Ссылка.Пустая() Тогда
		
		Если Метаданные.РегистрыСведений.ФактОплатыЗаказов.Измерения.СчетНаОплату.Тип.СодержитТип(ТипЗнч(ДокументОбъект.Ссылка)) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ФактОплатыЗаказов.СуммаАванса + ФактОплатыЗаказов.СуммаОплаты КАК Оплачено,
				|	0 КАК ВТомЧислеАвто
				|ИЗ
				|	РегистрСведений.ФактОплатыЗаказов КАК ФактОплатыЗаказов
				|ГДЕ
				|	ФактОплатыЗаказов.СчетНаОплату = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ФактОплатыДокументов.СуммаАванса + ФактОплатыДокументов.СуммаОплаты КАК Оплачено,
				|	ФактОплатыДокументов.СуммаАвансаАвто + ФактОплатыДокументов.СуммаОплатыАвто КАК ВТомЧислеАвто
				|ИЗ
				|	РегистрСведений.ФактОплатыДокументов КАК ФактОплатыДокументов
				|ГДЕ
				|	ФактОплатыДокументов.Документ = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
			
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураДляВозврата, ВыборкаДетальныеЗаписи);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// 2
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	-РасчетыСПокупателямиОстатки.СуммаВалОстаток КАК НеРаспределеноВал,
		|	ВЫБОР
		|		КОГДА РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов = &ВалютаДокумента
		|			ТОГДА -РасчетыСПокупателямиОстатки.СуммаВалОстаток
		|		ИНАЧЕ -РасчетыСПокупателямиОстатки.СуммаРегОстаток
		|	КОНЕЦ КАК НеРаспределено,
		|	ВЫБОР
		|		КОГДА РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов = &ВалютаДокумента
		|			ТОГДА &ВалютаДокумента
		|		ИНАЧЕ НациональнаяВалюта.Значение
		|	КОНЕЦ КАК ВалютаОстатков
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Остатки(
		|			,
		|			Договор = &Договор
		|				И (Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) ИЛИ Заказ В(&МассивЗаказов))
		|				И Контрагент = &Контрагент
		|				И Организация = &Организация
		|				И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки,
		|	Константа.НациональнаяВалюта КАК НациональнаяВалюта";
	
	Запрос.УстановитьПараметр("ВалютаДокумента", ДокументОбъект.ВалютаДокумента);
	Запрос.УстановитьПараметр("Договор", ДокументОбъект.Договор);
	Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(ДокументОбъект.Организация));
	
	Если ЭтоЗаказ Тогда
		Запрос.УстановитьПараметр("МассивЗаказов", ДокументОбъект.Ссылка);
	ИначеЕсли ПараметрыЗаполненияЗаголовка.Свойство("ИмяРеквизитаЗаказ") Тогда
		Запрос.УстановитьПараметр("МассивЗаказов", 
			ДокументОбъект[ПараметрыЗаполненияЗаголовка.ИмяТабличнойЧастиЗапасы].Выгрузить(, ПараметрыЗаполненияЗаголовка.ИмяРеквизитаЗаказ)
		);
	Иначе
		МассивЗаказов = Новый Массив;
		Для Каждого КлючЗначение Из ПараметрыЗаполненияЗаголовка.СоответствиеИменТЧИРеквизитаЗаказ Цикл
			ТабличнаяЧасть = ДокументОбъект[КлючЗначение.Ключ].Выгрузить(, КлючЗначение.Значение);
			ТабличнаяЧасть.Свернуть(КлючЗначение.Значение);
			Для Каждого ТекущаяСтрока Из ТабличнаяЧасть Цикл
				МассивЗаказов.Добавить(ТекущаяСтрока[КлючЗначение.Значение]);
			КонецЦикла;
		КонецЦикла;
		Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	КонецЕсли;
	
	Если ПараметрыЗаполненияЗаголовка.ЭтоРасчетыСПоставщиком Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыСПокупателями", "РасчетыСПоставщиками");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() > 1 Тогда
		ВызватьИсключение НСтр("ru = 'В результате запроса должно быть не более 1 строки. Функция ""ПолучитьОстаткиОплаты""'");
	КонецЕсли;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДляВозврата, ВыборкаДетальныеЗаписи);
	Иначе
		СтруктураДляВозврата.Вставить("ВалютаОстатков", ДокументОбъект.ВалютаДокумента);
	КонецЕсли;
	
	Возврат СтруктураДляВозврата;
	
КонецФункции

Функция ВопросЭтоЗаказ(СсылкаНаДокумент) Экспорт
	
	Возврат ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ЗаказПокупателя");
	
КонецФункции

Функция ЗаполнитьЗаголовокСтраницыОплата(Форма, ПараметрыЗаполненияЗаголовка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Форма.Объект.Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(Форма.Объект.Договор) Тогда
		
		//Форма.Оплачено = НСтр("ru = '0,00'");
		//Форма.ОстатокПредоплаты = НСтр("ru = '0,00'");
		
	Иначе
		
		СтруктураОплата = ПолучитьОстаткиОплаты(Форма.Объект, ВопросЭтоЗаказ(Форма.Объект.Ссылка), ПараметрыЗаполненияЗаголовка);
		
		// Оплачено
		МассивФорматированныхСтрок = Новый Массив;
		МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Оплачено: '")));
		СтрокаОплачено = "" + Формат(СтруктураОплата.Оплачено, "ЧДЦ=2; ЧН=0,00"); // + ", " +  Форма.Объект.ВалютаДокумента.СимвольноеПредставление;
		Если СтруктураОплата.Оплачено > Форма.Объект.СуммаДокумента Тогда
			МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(СтрокаОплачено,, WebЦвета.Красный)); //,, "Оплачено"));
		Иначе
			МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(СтрокаОплачено)); //,,,, "Оплачено"));
		КонецЕсли;
		
		ЗаголовокОплата = Новый ФорматированнаяСтрока(МассивФорматированныхСтрок);
		
		// Доступно
		//Форма.Оплачено = "" + Формат(СтруктураОплата.Оплачено, "ЧДЦ=2; ЧН=0,00"); // + ", " +  Форма.Объект.ВалютаДокумента.СимвольноеПредставление;
		//Форма.ОстатокПредоплаты = "" + Формат(СтруктураОплата.НеРаспределено, "ЧДЦ=2; ЧН=0,00"); // + ", " + СтруктураОплата.ВалютаОстатков.СимвольноеПредставление;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСпособЗачетаДляДоговора(Договор, Контрагент, ЭтоЗачет) Экспорт
	
	вСпособ = Перечисления.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка();
	
	Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Организации") Тогда
		Если Контрагент.ВестиРасчетыПоДоговорам Тогда
			Если ЗначениеЗаполнено(Договор.СпособЗачетаПредоплатыПоУмолчанию) Тогда
				вСпособ = Договор.СпособЗачетаПредоплатыПоУмолчанию;
			Иначе
				вСпособ = Контрагент.СпособЗачетаПредоплатыПоУмолчанию;
			КонецЕсли;
		Иначе
			вСпособ = Контрагент.СпособЗачетаПредоплатыПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Если вСпособ.Пустая() Тогда
		Возврат ПолучитьСпособЗачетаПредоплатыПоУмолчанию();
	Иначе
		Возврат вСпособ;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСпособРазнесенияДляДоговора(пДоговор, Контрагент) Экспорт
	
	Если пДоговор = Неопределено Тогда
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Иначе
		Договор = пДоговор;
	КонецЕсли;
	
	вСпособ = Перечисления.СпособыЗачетаИРаспределенияПлатежей.ПустаяСсылка();
	Если Контрагент.ВестиРасчетыПоДоговорам Тогда
		Если ЗначениеЗаполнено(Договор.СпособРазнесенияОплатыПоУмолчанию) Тогда
			вСпособ = Договор.СпособРазнесенияОплатыПоУмолчанию;
		Иначе
			вСпособ = Контрагент.СпособРазнесенияОплатыПоУмолчанию;
		КонецЕсли;
	Иначе
		вСпособ = Контрагент.СпособРазнесенияОплатыПоУмолчанию;
	КонецЕсли;
	
	Если вСпособ.Пустая() Тогда
		Возврат ПолучитьСпособРазнесенияОплатыПоУмолчанию();
	Иначе
		Возврат вСпособ;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСпособЗачетаДляКонтрагента(Контрагент, ЭтоЗачет) Экспорт
	
	вСпособ = ?(ЭтоЗачет, Контрагент.СпособЗачетаПредоплатыПоУмолчанию, Контрагент.СпособРазнесенияОплатыПоУмолчанию);
	Если вСпособ.Пустая() Тогда
		Возврат ?(ЭтоЗачет, ПолучитьСпособЗачетаПредоплатыПоУмолчанию(), ПолучитьСпособРазнесенияОплатыПоУмолчанию());
	Иначе
		Возврат вСпособ;
	КонецЕсли;
	
КонецФункции

Функция ДокументПозволяетЗачитыватьАвансБезЗаказа(ДокументСсылка) Экспорт
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктВыполненныхРабот")
		//ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктВыполненныхРабот")
		//ИЛИ (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПокупателя") И (ДокументСсылка.ВидОперации = ПеречислениеСсылка.ВидыОперацийЗаказПокупателя.ЗаказНаряд))
		//ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходнаяНакладная")
		//ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходнаяНакладная")
		Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаСервере(СтрокаТабличнойЧасти,
	Дата, ВалютаДенежныхСредств, Курс, Кратность, СтавкаНДСПоУмолчанию, ИзменятьСуммуРасчетовВместоКурса = Ложь) Экспорт
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			Дата,
			СтрокаТабличнойЧасти.Договор
		);
		
	Если СтрокаТабличнойЧасти.СуммаПлатежа = 0 Тогда
		СтрокаТабличнойЧасти.СуммаРасчетов = 0;
		Если НЕ ИзменятьСуммуРасчетовВместоКурса Тогда
			СтрокаТабличнойЧасти.Курс = СтруктураДанные.ДоговорВалютаКурсКратность.Курс;
		КонецЕсли;
	ИначеЕсли ВалютаДенежныхСредств = СтруктураДанные.ВалютаРасчетов Тогда
		СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПлатежа;
	ИначеЕсли СтрокаТабличнойЧасти.СуммаРасчетов = 0 Тогда
		СтрокаТабличнойЧасти.СуммаРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
	ИначеЕсли ИзменятьСуммуРасчетовВместоКурса И СтрокаТабличнойЧасти.Курс > 0 Тогда
		СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.Курс
			* ?(СтрокаТабличнойЧасти.Кратность = 0, 1, СтрокаТабличнойЧасти.Кратность)
		;
	Иначе
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.СуммаРасчетов = 0 ИЛИ СтрокаТабличнойЧасти.СуммаПлатежа = 0,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс,
			СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Курс
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РассчитатьСуммуНДСНаСервере(СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
	
КонецПроцедуры // РасшифровкаПлатежаСуммаПлатежаПриИзменении()

Функция ПолучитьСпособЗачетаПредоплатыПоУмолчанию() Экспорт
	
	Возврат Константы.СпособЗачетаПредоплатыПоУмолчанию.Получить();
	
КонецФункции

Функция ПолучитьСпособРазнесенияОплатыПоУмолчанию() Экспорт
	
	Возврат Константы.СпособРазнесенияОплатыПоУмолчанию.Получить();
	
КонецФункции

Функция ВопросДокументНеОбрабатывается(ДокументСсылка, ЭтоЗачетПредоплаты) Экспорт
	
	Часть1 = ЭтоЗачетПредоплаты И (ДокументСсылка.Метаданные().Реквизиты.Найти("СпособЗачетаПредоплаты") <> Неопределено);
	Часть2 = НЕ ЭтоЗачетПредоплаты И (ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено);
	
	Возврат Часть1 ИЛИ Часть2;
	
КонецФункции

Функция ВопросДокументМожноИзменятьИзПомощника(ДокументСсылка) Экспорт
	
	МассивНедоступныхТиповДокументов = Новый Массив;
	МассивНедоступныхТиповДокументов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	МассивНедоступныхТиповДокументов.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
	МассивНедоступныхТиповДокументов.Добавить(Тип("ДокументСсылка.Взаимозачет"));
	
	Возврат (МассивНедоступныхТиповДокументов.Найти(ТипЗнч(ДокументСсылка)) = Неопределено);
	
КонецФункции

Функция РасшифровкаПлатежаЗаказПриИзмененииФрагмент(Объект, ТекущиеДанныеИдентификатор) Экспорт
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходИзКассы")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходСоСчета") Тогда
		ЭтоРасчетыСПоставщиком = Истина;
	Иначе
		ЭтоРасчетыСПоставщиком = Ложь;
	КонецЕсли;
	
	УстановилиСуммуПлатежа = Ложь;
	
	ТекущиеДанные = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	Если Объект.Контрагент.ВестиУчетОплатыПоСчетам Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Заказ) И 
			ТипЗнч(ТекущиеДанные.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			// Заполним счёт на оплату, если он один.
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетНаОплату) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СчетНаОплату.Ссылка КАК СчетНаОплату
				|ИЗ
				|	Документ.СчетНаОплату КАК СчетНаОплату
				|ГДЕ
				|	СчетНаОплату.ДокументОснование = &ДокументОснование
				|	И СчетНаОплату.Проведен";
				
				Если ЭтоРасчетыСПоставщиком Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.СчетНаОплату", "Документ.СчетНаОплатуПоставщика");
				КонецЕсли;
				Запрос.УстановитьПараметр("ДокументОснование", ТекущиеДанные.Заказ);
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Количество() = 1
					И Выборка.Следующий() Тогда
					
					ТекущиеДанные.СчетНаОплату = Выборка.СчетНаОплату;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Заполним суммы, если они = 0.
			Если ТекущиеДанные.СуммаРасчетов = 0 Тогда
				
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("Ссылка", ТекущиеДанные.Заказ);
				Запрос.УстановитьПараметр("ПериодСрезаПоследних", Объект.Дата);
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК ОплаченоВалДок,
				|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.ВалютаДокумента КАК ВалютаЗаказа,
				|	ЕСТЬNULL(КурсыВалютЗаказаСрезПоследних.Курс, 1) КАК КурсВалютыЗаказа,
				|	ЕСТЬNULL(КурсыВалютЗаказаСрезПоследних.Кратность, 1) КАК КратностьВалютыЗаказа,
				|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Договор.ВалютаРасчетов КАК ВалютаРасчетов
				|ИЗ
				|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(, , , СчетНаОплату = &Ссылка) КАК ОплатаСчетовИЗаказовОбороты
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ПериодСрезаПоследних, ) КАК КурсыВалютЗаказаСрезПоследних
				|		ПО ОплатаСчетовИЗаказовОбороты.СчетНаОплату.ВалютаДокумента = КурсыВалютЗаказаСрезПоследних.Валюта";
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаОплата = РезультатЗапроса.Выбрать();
				Если НЕ ВыборкаОплата.Следующий() Тогда
					Возврат Ложь;
				КонецЕсли;
				
				Если Объект.ВалютаДенежныхСредств = ВыборкаОплата.ВалютаЗаказа Тогда
					ТекущиеДанные.СуммаПлатежа = ВыборкаОплата.ОплаченоВалДок;
				Иначе
					ТекущиеДанные.СуммаПлатежа = ВыборкаОплата.ОплаченоВалДок * ВыборкаОплата.КурсВалютыЗаказа * Объект.Кратность / (Объект.Курс * ВыборкаОплата.КратностьВалютыЗаказа);
				КонецЕсли;
				
				Если ВыборкаОплата.ВалютаЗаказа = ВыборкаОплата.ВалютаРасчетов Тогда
					ТекущиеДанные.СуммаРасчетов = ТекущиеДанные.СуммаПлатежа;
					ТекущиеДанные.СуммаПлатежа = ТекущиеДанные.СуммаРасчетов * ТекущиеДанные.Курс / ?(ТекущиеДанные.Кратность = 0, 1, ТекущиеДанные.Кратность);
				ИначеЕсли Объект.ВалютаДенежныхСредств = ВыборкаОплата.ВалютаЗаказа Тогда
					ТекущиеДанные.СуммаПлатежа = ВыборкаОплата.ОплаченоВалДок;
					ТекущиеДанные.СуммаРасчетов = ТекущиеДанные.СуммаПлатежа * ?(ТекущиеДанные.Кратность = 0, 1, ТекущиеДанные.Кратность) / ТекущиеДанные.Курс;
				Иначе
					ТекущиеДанные.СуммаПлатежа = ВыборкаОплата.ОплаченоВалДок * ВыборкаОплата.КурсВалютыЗаказа * Объект.Кратность / (Объект.Курс * ВыборкаОплата.КратностьВалютыЗаказа);
					ТекущиеДанные.СуммаРасчетов = ТекущиеДанные.СуммаПлатежа * ?(ТекущиеДанные.Кратность = 0, 1, ТекущиеДанные.Кратность) / ТекущиеДанные.Курс;
				КонецЕсли;
				
				РасчетыРаботаСФормамиВызовСервера.РассчитатьСуммуНДСНаСервере(ТекущиеДанные);
				
				// Нужно сказать вызывающей процедуре,
				// чтобы она обновила связанные с суммой платежа данные, например, сумму НДС.
				УстановилиСуммуПлатежа = Истина;
				
			КонецЕсли;
			
			Если НЕ ЭтоРасчетыСПоставщиком
				И НЕ ТекущиеДанные.ПризнакАванса
				И ТекущиеДанные.Заказ.Контрагент.ВестиРасчетыПоДокументам
				И ЗначениеЗаполнено(ТекущиеДанные.Заказ)
				И НЕ ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	РасходнаяНакладнаяЗапасы.Ссылка КАК Ссылка,
					|	СУММА(РасходнаяНакладнаяЗапасы.Всего) КАК Всего
					|ИЗ
					|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
					|ГДЕ
					|	РасходнаяНакладнаяЗапасы.Заказ = &Заказ
					|	И РасходнаяНакладнаяЗапасы.Ссылка.Проведен
					|
					|СГРУППИРОВАТЬ ПО
					|	РасходнаяНакладнаяЗапасы.Ссылка";
				
				Запрос.УстановитьПараметр("Заказ", ТекущиеДанные.Заказ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Если Выборка.Количество() = 1 Тогда
					
					Выборка.Следующий();
					
					ТекущиеДанные.Документ = Выборка.Ссылка;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Заказ) Тогда
		Аналитика = ДвижениеДенежныхСредствСервер.АналитикаДокументаДляДвиженияДенежныхСредств(ТекущиеДанные.Заказ);
		Если ЗначениеЗаполнено(Аналитика.Проект) Тогда
			ТекущиеДанные.Проект = Аналитика.Проект;
		КонецЕсли;
		Если ЗначениеЗаполнено(Аналитика.Подразделение) Тогда
			ТекущиеДанные.Подразделение = Аналитика.Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат УстановилиСуммуПлатежа;
	
КонецФункции

Функция ФормироватьТаблицуПросмотраПоДвижениямВопрос(пПроведен, пМодифицированность, пПоДвижениям, пЕстьАвтоплатежи) Экспорт
	
	Возврат пПроведен И (НЕ пМодифицированность ИЛИ пПоДвижениям) И (пЕстьАвтоплатежи ИЛИ ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));
	
КонецФункции

Функция ПолучитьОписаниеДляСтрокиТЧЗапасыНаСервере(пСтрока, пВалютаОбъектаПредставление) Экспорт
	
	СуммаСкидкиСтроки = (пСтрока.Количество * пСтрока.Цена) - пСтрока.Сумма;
	Если СуммаСкидкиСтроки <> 0 Тогда
		ПроцентСкидки = Формат(СуммаСкидкиСтроки * 100 / (пСтрока.Количество * пСтрока.Цена), "ЧДЦ=2");
		ТекстСкидки = ?(СуммаСкидкиСтроки > 0, " - "+СуммаСкидкиСтроки, " + "+(-СуммаСкидкиСтроки))+" "+пВалютаОбъектаПредставление
					  +" ("+?(СуммаСкидкиСтроки > 0, " - "+ПроцентСкидки+"%)", " + "+(-ПроцентСкидки)+"%)");
	Иначе
		ТекстСкидки = "";
	КонецЕсли;
	Возврат ""+пСтрока.Цена+" "+пВалютаОбъектаПредставление+" Х "+пСтрока.Количество+" "+пСтрока.ЕдиницаИзмеренияНаименование+ТекстСкидки+" = "+пСтрока.Сумма+" "+пВалютаОбъектаПредставление;
	
КонецФункции

Функция ПолучитьВариантЗаполненияРасшифровкиДляДокументаОтгрузки(пПроведен, пСпособЗачетаПредоплаты) Экспорт
	
	ВариантЗаполненияРасшифровкиПросмотр = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Просмотр");
	ВариантЗаполненияРасшифровкиВручную = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Вручную");
	
	Если пСпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
		ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиПросмотр;
	Иначе
		ОсновнойРежимРаботыСОплатой = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойРежимРаботыСОплатой");
		Если ОсновнойРежимРаботыСОплатой = Перечисления.РежимыРаботыСОплатой.Просмотр Тогда
			ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиПросмотр;
		ИначеЕсли ОсновнойРежимРаботыСОплатой = Перечисления.РежимыРаботыСОплатой.Редактирование Тогда
			ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиВручную;
		Иначе
			Если пПроведен Тогда
				ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиПросмотр;
			Иначе
				ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиВручную;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВариантЗаполненияРасшифровки;
	
КонецФункции

Функция ПолучитьВариантЗаполненияРасшифровкиДляДокументаОплаты(пПроведен, пСсылка, пЗначениеКопирования) Экспорт
	
	ВариантЗаполненияРасшифровкиПросмотр = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Просмотр");
	ВариантЗаполненияРасшифровкиВручную = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Вручную");
	
	ОсновнойРежимРаботыСОплатой = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойРежимРаботыСОплатой");
	Если ОсновнойРежимРаботыСОплатой = Перечисления.РежимыРаботыСОплатой.Просмотр Тогда
		ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиПросмотр;
	ИначеЕсли ОсновнойРежимРаботыСОплатой = Перечисления.РежимыРаботыСОплатой.Редактирование Тогда
		ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиВручную;
	Иначе
		Если пПроведен ИЛИ
			(пСсылка.Пустая() И НЕ ЗначениеЗаполнено(пЗначениеКопирования)) Тогда
			ВариантЗаполненияРасшифровки = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Просмотр");
		Иначе
			ВариантЗаполненияРасшифровки = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Вручную");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВариантЗаполненияРасшифровки;
	
КонецФункции

Процедура НастроитьЭлементыРаспределенияСуммыНаСервере(пФорма, пВидОперации) Экспорт
	
	Если пФорма.Объект.ВидОперации <> пВидОперации Тогда
		
		пФорма.Элементы.ВариантЗаполненияРасшифровки.Видимость = Ложь;
		пФорма.Элементы.КоманднаяПанельРучногоЗаполнения.Видимость = Истина;
		пФорма.Элементы.РасшифровкаПлатежаСпособЗачета.Видимость = Ложь;
		пФорма.Элементы.РаспределитьСуммуПлатежа.Видимость = Ложь;
		
		Для Каждого ТекущаяСтрока Из пФорма.Объект.РасшифровкаПлатежа Цикл
			ТекущаяСтрока.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
		КонецЦикла;
		
	Иначе
		
		пФорма.Элементы.ВариантЗаполненияРасшифровки.Видимость = Истина;
		пФорма.Элементы.РасшифровкаПлатежаСпособЗачета.Видимость = Истина;
		пФорма.Элементы.РаспределитьСуммуПлатежа.Видимость = Истина;
		
		Если пФорма.ВариантЗаполненияРасшифровки = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Вручную Тогда
			
			пФорма.Элементы.КоманднаяПанельРучногоЗаполнения.Видимость = Истина;
			пФорма.Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = пФорма.Элементы.СтраницаРучноеЗаполнение;
			
			пФорма.Элементы.ЗаполнитьТаблицуПросмотра.Видимость = Ложь;
			
			пФорма.Элементы.ГруппаКомандыТаблицыДляПросмотра.Видимость = Ложь;
			пФорма.Элементы.Итоги.Видимость = Истина;
			
		ИначеЕсли пФорма.ВариантЗаполненияРасшифровки = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Автоматически Тогда
			
			пФорма.Элементы.КоманднаяПанельРучногоЗаполнения.Видимость = Ложь;
			пФорма.Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = пФорма.Элементы.СтраницаАвто;
			
			пФорма.Элементы.ЗаполнитьТаблицуПросмотра.Видимость = Ложь;
			
			пФорма.Элементы.ГруппаКомандыТаблицыДляПросмотра.Видимость = Ложь;
			пФорма.Элементы.Итоги.Видимость = Истина;
			
		Иначе
			
			ЗаполнитьТаблицуПросмотраВДенежномДокументеНаСервере(пФорма);
			
			пФорма.Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = пФорма.Элементы.СтраницаПросмотр;
			пФорма.Элементы.КоманднаяПанельРучногоЗаполнения.Видимость = Ложь;
			
			пФорма.Элементы.ЗаполнитьТаблицуПросмотра.Видимость = Истина;
			
			пФорма.Элементы.ГруппаКомандыТаблицыДляПросмотра.Видимость = Истина;
			пФорма.Элементы.Итоги.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьВидимостьРеквизитовРасчетовФрагмент(пФорма) Экспорт
	
	РеквизитыКонтрагента = "ВестиРасчетыПоДоговорам, ВестиРасчетыПоДокументам, ВестиРасчетыПоЗаказам, ВестиУчетОплатыПоСчетам";
	СтруктураРеквизитыРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(пФорма.Объект.Контрагент, РеквизитыКонтрагента);
	Если пФорма.Объект.Контрагент.Пустая() Тогда
		СтруктураРеквизитыРасчетов.Вставить("ВестиРасчетыПоДоговорам", Ложь);
		СтруктураРеквизитыРасчетов.Вставить("ВестиРасчетыПоДокументам", Ложь);
		СтруктураРеквизитыРасчетов.Вставить("ВестиРасчетыПоЗаказам", Ложь);
		СтруктураРеквизитыРасчетов.Вставить("ВестиУчетОплатыПоСчетам", Ложь);
	КонецЕсли;
	
	СтруктураРеквизитыРасчетов.Вставить("ПлатежныйКалендарь", ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"));
	СтруктураРеквизитыРасчетов.Вставить("УчетВалютныхОпераций", ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));
	
	пФорма.Элементы.РасшифровкаПлатежаДоговор.Видимость = СтруктураРеквизитыРасчетов.ВестиРасчетыПоДоговорам;
	Если СтруктураРеквизитыРасчетов.ВестиРасчетыПоДоговорам И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств") Тогда
		пФорма.Элементы.РасшифровкаПлатежаДоговорИСтатьяДДС.Заголовок = НСтр("ru = 'Договор'");
	ИначеЕсли НЕ СтруктураРеквизитыРасчетов.ВестиРасчетыПоДоговорам И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств") Тогда
		пФорма.Элементы.РасшифровкаПлатежаДоговорИСтатьяДДС.Заголовок = НСтр("ru = 'Статья ДДС'");
	Иначе
		пФорма.Элементы.РасшифровкаПлатежаДоговорИСтатьяДДС.Заголовок = НСтр("ru = 'Договор / Статья ДДС'");
	КонецЕсли;
	пФорма.Элементы.РасшифровкаПлатежаДоговор.Видимость = СтруктураРеквизитыРасчетов.ВестиРасчетыПоДоговорам;
	пФорма.Элементы.РасшифровкаПлатежаДокумент.Видимость = СтруктураРеквизитыРасчетов.ВестиРасчетыПоДокументам;
	пФорма.Элементы.РасшифровкаПлатежаЗаказ.Видимость = СтруктураРеквизитыРасчетов.ВестиРасчетыПоЗаказам;
	
	// МобильноеПриложение
	Если НЕ МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		пФорма.Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = СтруктураРеквизитыРасчетов.ВестиУчетОплатыПоСчетам;
		Если ТипЗнч(пФорма.Объект.Ссылка) = Тип("ДокументСсылка.РасходИзКассы") Тогда
			пФорма.Элементы.РасшифровкаПлатежаЗаказ.Видимость = СтруктураРеквизитыРасчетов.ВестиРасчетыПоЗаказам;
		КонецЕсли;
	КонецЕсли;
	
	Если (пФорма.Элементы.РасшифровкаПлатежаЗаказ.Видимость ИЛИ СтруктураРеквизитыРасчетов.ВестиРасчетыПоЗаказам) И НЕ СтруктураРеквизитыРасчетов.ВестиРасчетыПоДокументам Тогда
		пФорма.Элементы.РасшифровкаПлатежаЗаказДокумент.Заголовок = НСтр("ru = 'Заказ'");
	ИначеЕсли НЕ (пФорма.Элементы.РасшифровкаПлатежаЗаказ.Видимость ИЛИ СтруктураРеквизитыРасчетов.ВестиРасчетыПоЗаказам) И СтруктураРеквизитыРасчетов.ВестиРасчетыПоДокументам Тогда
		пФорма.Элементы.РасшифровкаПлатежаЗаказДокумент.Заголовок = НСтр("ru = 'Документ к зачету'");
	Иначе
		пФорма.Элементы.РасшифровкаПлатежаЗаказДокумент.Заголовок = НСтр("ru = 'Заказ / Документ к зачету'");
	КонецЕсли;
	
	Если (пФорма.Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость ИЛИ СтруктураРеквизитыРасчетов.ВестиУчетОплатыПоСчетам) И НЕ СтруктураРеквизитыРасчетов.ПлатежныйКалендарь Тогда
		пФорма.Элементы.РасшифровкаПлатежаСчетДокументПланирования.Заголовок = НСтр("ru = 'Счет на оплату'");
	ИначеЕсли НЕ (пФорма.Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость ИЛИ СтруктураРеквизитыРасчетов.ВестиУчетОплатыПоСчетам) И СтруктураРеквизитыРасчетов.ПлатежныйКалендарь Тогда
		пФорма.Элементы.РасшифровкаПлатежаСчетДокументПланирования.Заголовок = НСтр("ru = 'Документ планирования'");
	Иначе
		пФорма.Элементы.РасшифровкаПлатежаСчетДокументПланирования.Заголовок = НСтр("ru = 'Счет на оплату / Документ планирования'");
	КонецЕсли;
	
	пФорма.Элементы.РасшифровкаПлатежаДоговорВалютаРасчетовСимвольноеПредставление.Видимость = СтруктураРеквизитыРасчетов.УчетВалютныхОпераций;
	
	Возврат СтруктураРеквизитыРасчетов;
	
КонецФункции // УстановитьВидимостьРеквизитовРасчетов()

// СтруктураПараметровРасчетов и ВариантЗаполненияРасшифровки является реквизитом формы, но передается как параметр, чтобы
// в форме, из которой вызывается процедура, легче было понять, где заполняется этот параметр.
Процедура ЗаполнитьРеквизитыРасчетов(пФорма, пСтруктураПараметровРасчетов, пВариантЗаполненияРасшифровки, ЭтоЗачетПредоплаты = Ложь) Экспорт
	
	пСтруктураПараметровРасчетов = Новый Структура();
	пСтруктураПараметровРасчетов.Вставить("ВариантЗаполненияРасшифровкиПросмотр", пФорма.ВариантЗаполненияРасшифровкиПросмотр);
	пСтруктураПараметровРасчетов.Вставить("ВариантЗаполненияРасшифровкиВручную", пФорма.ВариантЗаполненияРасшифровкиВручную);
	Если Не ЭтоЗачетПредоплаты Тогда
		пСтруктураПараметровРасчетов.Вставить("ВариантЗаполненияРасшифровкиАвтоматически", пФорма.ВариантЗаполненияРасшифровкиАвтоматически);
	КонецЕсли;
	пСтруктураПараметровРасчетов.Вставить("ВидОперацииПомощника", пФорма.ВидОперацииПомощника);
	пСтруктураПараметровРасчетов.Вставить("УчетВалютныхОпераций", пФорма.УчетВалютныхОпераций);
	
	Если НЕ ЭтоЗачетПредоплаты Тогда
		Если НЕ пФорма.Объект.Ссылка.Пустая() И пФорма.Объект.ВариантЗаполненияРасшифровки = пФорма.ВариантЗаполненияРасшифровкиАвтоматически Тогда
			
			пФорма.ВариантЗаполненияРасшифровки = пФорма.ВариантЗаполненияРасшифровкиАвтоматически;
			Если пФорма.Элементы.ВариантЗаполненияРасшифровки.СписокВыбора.Количество() = 2 Тогда
				пФорма.Элементы.ВариантЗаполненияРасшифровки.СписокВыбора.Вставить(0, пФорма.ВариантЗаполненияРасшифровкиАвтоматически, НСтр("ru = 'Авто'"));
			КонецЕсли;
			
		Иначе
			
			пВариантЗаполненияРасшифровки = РасчетыРаботаСФормамиВызовСервера.ПолучитьВариантЗаполненияРасшифровкиДляДокументаОплаты(
				пФорма.Объект.Проведен,
				пФорма.Объект.Ссылка,
				пФорма.Параметры.ЗначениеКопирования
			);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеРасчетов(пФорма, пВидОперацииВозврат) Экспорт
	
	НовоеУсловноеОформление = пФорма.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.РасшифровкаПлатежа.СпособЗачета", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасшифровкаПлатежаДокумент");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "<определяется автоматически>");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	
	НовоеУсловноеОформление = пФорма.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.РасшифровкаПлатежа.СпособЗачета", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасшифровкаПлатежаЗаказ");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	НовоеУсловноеОформление = пФорма.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.РасшифровкаПлатежа.СпособЗачета", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасшифровкаПлатежаСчетНаОплату");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "<указывается только для способа Вручную>");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	
	НовоеУсловноеОформление = пФорма.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.РасшифровкаПлатежа.СпособЗачета", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.РасшифровкаПлатежа.Документ", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.РасшифровкаПлатежа.СЗачетом", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасшифровкаПлатежаДокумент");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "<предоплата>");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	
	НовоеУсловноеОформление = пФорма.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.РасшифровкаПлатежа.СпособЗачета", Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.РасшифровкаПлатежа.Документ", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.РасшифровкаПлатежа.СЗачетом", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасшифровкаПлатежаДокумент");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "<предоплата с зачетом>");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	
	УстановитьУсловноеОформлениеРасчетовПоДаннымКонтрагента(пФорма, пВидОперацииВозврат);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеРасчетовПоДаннымКонтрагента(пФорма, пВидОперацииВозврат) Экспорт
	
	Если пФорма.Объект.Контрагент.ВестиРасчетыПоДокументам
		ИЛИ пФорма.Объект.Контрагент.Пустая() Тогда
		НовоеУсловноеОформление = пФорма.УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.РасшифровкаПлатежа.ЭтоВзаимозачет", Ложь, ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасшифровкаПлатежаПризнакАванса");
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	Иначе
		МассивЭлементовДляУдаления = Новый Массив;
		// Нужно удалить условное оформление.
		Для Каждого ТекущийЭлемент Из пФорма.УсловноеОформление.Элементы Цикл
			Попытка
				Если ТекущийЭлемент.Поля.Элементы[0].Поле = Новый ПолеКомпоновкиДанных("РасшифровкаПлатежаПризнакАванса") Тогда
					МассивЭлементовДляУдаления.Добавить(ТекущийЭлемент);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
		Для Каждого ЭлементМассива Из МассивЭлементовДляУдаления Цикл
			пФорма.УсловноеОформление.Элементы.Удалить(ЭлементМассива);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПустуюТЗЗаказыИСуммы() Экспорт
	
	ТЗЗаказыИСуммы = Новый ТаблицаЗначений;
	ТЗЗаказыИСуммы.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ТЗЗаказыИСуммы.Колонки.Добавить("Всего", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	
	Возврат ТЗЗаказыИСуммы;
	
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервереДеньги(пФорма, ТекущийОбъект) Экспорт
	
	Если пФорма.ВариантЗаполненияРасшифровки = пФорма.ВариантЗаполненияРасшифровкиАвтоматически Тогда
		Для Каждого ТекущаяСтрока Из ТекущийОбъект.РасшифровкаПлатежа Цикл
			ТекущаяСтрока.СпособЗачета = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто");
			ТекущаяСтрока.Заказ = Неопределено;
			ТекущаяСтрока.Документ = Неопределено;
			ТекущаяСтрока.СчетНаОплату = Неопределено;
			ТекущаяСтрока.ДокументПланирования = Неопределено;
		КонецЦикла;
		пФорма.ВариантЗаполненияРасшифровки = пФорма.ВариантЗаполненияРасшифровкиВручную;
		ФормыДокументовДеньги.НастроитьЭлементыРаспределенияДолговНаСервере(пФорма);
	КонецЕсли;
	ТекущийОбъект.ВариантЗаполненияРасшифровки = пФорма.ВариантЗаполненияРасшифровки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОбщиеРеквизитыРасчетов(пФорма) Экспорт
	
	пФорма.ТаблицаДокументовДляИзмененияКартинка = 9;
	
	Для Каждого ТекущаяСтрока Из пФорма.Объект.РасшифровкаПлатежа Цикл
		ТекущаяСтрока.ЭтоВзаимозачет = (ТипЗнч(ТекущаяСтрока.Документ) = Тип("ДокументСсылка.Взаимозачет"));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаголовокДляРежимаАвто() Экспорт
	
	Возврат НСтр("ru = 'Режим ""Авто"" оставлен для совместимости.
		|Теперь способ зачета можно указать в строке расшифровки платежа.
		|Для этого нужно установить режим ""Редактирование"".
		|
		|Если документ будет перезаписан в интерактивном режиме,
		|то режим ""Редактирование"" будет установлен автоматически,
		|а в строках расшифровки платежа будет установлен способ зачета ""Авто""'"
	);
	
КонецФункции

// Возвращает значение реквизита "ВалютаРасчетов" справочника "ДоговорыКонтрагентов".
//  
// Параметры:
// 	Договор - СправочникСсылка.ДоговорыКонтрагентов
// Возвращаемое значение:
// 	СправочникСсылка.Валюты
//
Функция ВалютаРасчетов(Знач Договор) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВалютаРасчетов");
КонецФункции

&НаСервере
Функция ПолучитьКурсИКратностьВалюты(пДата, пВалюта) Экспорт
	
	Возврат РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			пДата,
			Новый Структура("Валюта", пВалюта)
		);
	
КонецФункции

// Получает набор данных с сервера для процедуры ПредоплатаДокументПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДокументПриИзменении(Документ, Контрагент, Договор) Экспорт
	
	СтруктураДанные = Новый Структура();
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		
		СуммаРасчетовПоДокументу = 0;
		
		Если Документ.КонтрагентИсточник = Контрагент Тогда
			ТЧДляАнализа = Документ.Дебитор;
		Иначе
			ТЧДляАнализа = Документ.Кредитор;
		КонецЕсли;
		
		Для Каждого СтрокаДляАнализа Из ТЧДляАнализа Цикл
			Если СтрокаДляАнализа.Договор = Договор Тогда
				СуммаРасчетовПоДокументу = СуммаРасчетовПоДокументу + СтрокаДляАнализа.СуммаРасчетов;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураДанные.Вставить("СуммаРасчетов", СуммаРасчетовПоДокументу);
	ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.Номенклатура") Тогда
		СтруктураДанные.Вставить("СуммаРасчетов", Документ.Номинал);
		СтруктураДанные.Вставить("ОплатаСертификатом", Истина);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЧекККМ") Тогда
		СтруктураДанные.Вставить("СуммаРасчетов", Документ.СуммаДокумента);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
		
		Если Документ.ВалютаДокумента = НациональнаяВалюта Тогда
			СтруктураДанные.Вставить("СуммаРасчетов", Документ.СуммаДокумента * Документ.Кратность / ?(Документ.Курс = 0, 1, Документ.Курс));
		Иначе // Документ оформлен в валюте договора. Документ можно оформить в валюте договора или в национальной валюте.
			СтруктураДанные.Вставить("СуммаРасчетов", Документ.СуммаДокумента);
		КонецЕсли;
		
		СтруктураДанные.Вставить("Курс", Документ.Курс);
		СтруктураДанные.Вставить("Кратность", Документ.Кратность);
		
	Иначе
		СтруктураДанные.Вставить("СуммаРасчетов", Документ.РасшифровкаПлатежа.Итог("СуммаРасчетов"));
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДокументПриИзменении()

#Область ЗаполнениеТаблицыПросмотра

Процедура ЗаполнитьТаблицуПросмотраНаСервере(пФорма, пПоДвижениям = Ложь, ИмяТЧ = "Предоплата", ИменаЭлементов = Неопределено) Экспорт
	
	Если ИменаЭлементов = Неопределено Тогда
		ИменаЭлементов = РаботаСФормойДокументаКлиентСервер.ИменаЭлементовПредоплатыПоУмолчанию();
	КонецЕсли;
	
	ПоДвижениям = РасчетыРаботаСФормамиВызовСервера.ФормироватьТаблицуПросмотраПоДвижениямВопрос(
		пФорма.Объект.Проведен, пФорма.Модифицированность, пПоДвижениям,
		пФорма.Объект[ИменаЭлементов.СпособЗачетаПредоплаты] = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто")
	);
	
	пФорма[ИменаЭлементов.ТаблицаДляПросмотра] = РасчетыПросмотрИнформацииОбОплате.ПолучитьТабличныйДокументОплатаПоДокументуОтгрузки(
		пФорма.Объект, ПоДвижениям, пФорма.Модифицированность, пФорма.ТаблицаДокументовДляИзменения, Ложь, ИмяТЧ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПросмотраВДенежномДокументеНаСервере(пФорма, Знач пПоДвижениям = Ложь, пПроверилиНаКлиенте = Ложь) Экспорт
	
	Если пПроверилиНаКлиенте ИЛИ
		(пФорма.ВариантЗаполненияРасшифровки = пФорма.СтруктураПараметровРасчетов.ВариантЗаполненияРасшифровкиПросмотр
		И пФорма.Объект.ВидОперации = пФорма.СтруктураПараметровРасчетов.ВидОперацииПомощника) Тогда
		
		ЕстьАвтоплатежи = Ложь;
		Для Каждого ТекущаяСтрока Из пФорма.Объект.РасшифровкаПлатежа Цикл
			Если ТекущаяСтрока.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
				ЕстьАвтоплатежи = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПоДвижениям = РасчетыРаботаСФормамиВызовСервера.ФормироватьТаблицуПросмотраПоДвижениямВопрос(
			пФорма.Объект.Проведен, пФорма.Модифицированность, пПоДвижениям, ЕстьАвтоплатежи
		);
		
		пФорма.ТаблицаДляПросмотра = РасчетыПросмотрИнформацииОбОплате.ПолучитьТабличныйДокументОплатаПоДокументуОплаты(
			пФорма.Объект,
			ПоДвижениям,
			пФорма.Модифицированность,
			пФорма.ТаблицаДокументовДляИзменения
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СпособЗачетаПредоплатыПриИзмененииНаСервере(пФорма, ИмяТЧ = "Предоплата", ИменаЭлементов = Неопределено) Экспорт
	
	Если ИменаЭлементов = Неопределено Тогда
		ИменаЭлементов = РаботаСФормойДокументаКлиентСервер.ИменаЭлементовПредоплатыПоУмолчанию();
	КонецЕсли;
	
	ЗаполнилиТаблицуПросмотра = Ложь;
	
	Если пФорма.Объект[ИменаЭлементов.СпособЗачетаПредоплаты] = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
		пФорма[ИменаЭлементов.ВариантЗаполненияРасшифровки] = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Просмотр");
		пФорма.Элементы[ИменаЭлементов.ВариантЗаполненияРасшифровки].Видимость = Ложь;
		пФорма.Элементы[ИменаЭлементов.ОткрытьПомощникЗачетаПредоплаты].Видимость = Ложь;
		пФорма.Элементы[ИменаЭлементов.ГруппаКомандыТаблицыДляПросмотра].Видимость = Истина;
		ЗаполнитьТаблицуПросмотраНаСервере(пФорма, , ИмяТЧ, ИменаЭлементов);
		ЗаполнилиТаблицуПросмотра = Истина;
		пФорма.Элементы[ИменаЭлементов.СтраницыРасчетовСКонтрагентом].ТекущаяСтраница = пФорма.Элементы[ИменаЭлементов.СтраницаПросмотр];
	Иначе
		пФорма[ИменаЭлементов.ВариантЗаполненияРасшифровки] = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Вручную");
		пФорма.Элементы[ИменаЭлементов.ВариантЗаполненияРасшифровки].Видимость = Истина;
		пФорма.Элементы[ИменаЭлементов.ОткрытьПомощникЗачетаПредоплаты].Видимость = Истина;
		пФорма.Элементы[ИменаЭлементов.ГруппаКомандыТаблицыДляПросмотра].Видимость = Ложь;
		пФорма.Элементы[ИменаЭлементов.СтраницыРасчетовСКонтрагентом].ТекущаяСтраница = пФорма.Элементы[ИменаЭлементов.СтраницаРедактирование];
		ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(пФорма, , ИмяТЧ, ИменаЭлементов);
	КонецЕсли;
	
	пФорма.Элементы[ИмяТЧ].Доступность = (пФорма.Объект[ИменаЭлементов.СпособЗачетаПредоплаты] = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную);
	Если пФорма.ИмяФормы = "Документ.ЗаказПокупателя.Форма.ФормаЗаказНаряда" Тогда
		пФорма.Элементы.ЗНГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(пФорма.Объект[ИменаЭлементов.СпособЗачетаПредоплаты], пФорма.Объект[ИмяТЧ]);
	Иначе
		пФорма.Элементы[ИменаЭлементов.ГруппаПредоплата].Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(пФорма.Объект[ИменаЭлементов.СпособЗачетаПредоплаты], пФорма.Объект[ИмяТЧ]);
	КонецЕсли;
	
	Возврат ЗаполнилиТаблицуПросмотра;
	
КонецФункции

// Обработчик изменения варианта расшифровки взаиморасчетов в формах документов
// 
// Параметры:
// 	пФорма - УправляемаяФорма - Форма документа
// 	ПриСозданииНаСервере - Булево - Признак вызова процедуры из обработчика создания формы
// 	ИмяТЧ - Строка - Имя табличной части данных предоплаты
// 	ИменаЭлементов - Структура - Структура переопределения имен элементов формы, не обязательный
Процедура ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(пФорма, ПриСозданииНаСервере = Ложь, ИмяТЧ = "Предоплата", 
	ИменаЭлементов = Неопределено) Экспорт
	
	Если ИменаЭлементов = Неопределено Тогда
		ИменаЭлементов = РаботаСФормойДокументаКлиентСервер.ИменаЭлементовПредоплатыПоУмолчанию();
	КонецЕсли;
	
	Если пФорма[ИменаЭлементов.ВариантЗаполненияРасшифровки] = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Просмотр") Тогда
		пФорма.Элементы[ИменаЭлементов.СтраницыРасчетовСКонтрагентом].ТекущаяСтраница = пФорма.Элементы[ИменаЭлементов.СтраницаПросмотр];
		Если НЕ ПриСозданииНаСервере Тогда
			ФормироватьПоДвижениям = пФорма.Объект.Проведен И НЕ пФорма.Модифицированность;
			пФорма[ИменаЭлементов.ТаблицаДляПросмотра] = РасчетыПросмотрИнформацииОбОплате.ПолучитьТабличныйДокументОплатаПоДокументуОтгрузки(пФорма.Объект,
				ФормироватьПоДвижениям, пФорма.Модифицированность, пФорма.ТаблицаДокументовДляИзменения, Ложь, ИмяТЧ);
		КонецЕсли;
		пФорма.Элементы[ИменаЭлементов.ГруппаКомандыТаблицыДляПросмотра].Видимость = Истина;
	Иначе
		пФорма.Элементы[ИменаЭлементов.СтраницыРасчетовСКонтрагентом].ТекущаяСтраница = пФорма.Элементы[ИменаЭлементов.СтраницаРедактирование];
		пФорма.Элементы[ИменаЭлементов.ГруппаКомандыТаблицыДляПросмотра].Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммуПлатежаПослеРаспределенияЗавершение(пФорма, ИмяТЧ = "Предоплата", ИменаЭлементов = Неопределено) Экспорт
	
	Если ИменаЭлементов = Неопределено Тогда
		ИменаЭлементов = РаботаСФормойДокументаКлиентСервер.ИменаЭлементовПредоплатыПоУмолчанию();
	КонецЕсли;
	
	пФорма.Объект[ИменаЭлементов.СпособЗачетаПредоплаты] = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную");
	ЗаполнилиТаблицуПросмотра = СпособЗачетаПредоплатыПриИзмененииНаСервере(пФорма, ИмяТЧ, ИменаЭлементов);
	
	Если пФорма.Элементы[ИменаЭлементов.СтраницыРасчетовСКонтрагентом].ТекущаяСтраница <> пФорма.Элементы[ИменаЭлементов.СтраницаПросмотр] Тогда
		пФорма[ИменаЭлементов.ВариантЗаполненияРасшифровки] = пФорма.ВариантЗаполненияРасшифровкиПросмотр;
		РасчетыРаботаСФормамиВызовСервера.ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(пФорма, Ложь, ИмяТЧ, ИменаЭлементов);
	КонецЕсли;
	Если НЕ ЗаполнилиТаблицуПросмотра Тогда
		ЗаполнитьТаблицуПросмотраНаСервере(пФорма, , ИмяТЧ, ИменаЭлементов);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ВводНаОсновании

Функция УчестьОплатуДругимиДокументами(МассивРезультатов) Экспорт
	
	// Учтем оплату по акту, выполненную другими документами
	ОплаченоВалДок = 0;
	ВыборкаОплата = МассивРезультатов[1].Выбрать();
	Если ВыборкаОплата.Следующий() Тогда
		ОплаченоВалДок = ВыборкаОплата.ОплаченоВалДок;
	КонецЕсли;
	
	ТаблицаДанных = МассивРезультатов[0].Выгрузить();
	
	// Уменьшим сумму платежа на уже оплаченную по заказу сумму.
	МассивСтрокДляУдаления = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.СуммаПлатежа <= ОплаченоВалДок Тогда
			ОплаченоВалДок = ОплаченоВалДок - СтрокаТаблицы.СуммаПлатежа;
			МассивСтрокДляУдаления.Добавить(СтрокаТаблицы);
		Иначе
			СуммаПлатежаНач = СтрокаТаблицы.СуммаПлатежа;
			СтрокаТаблицы.СуммаПлатежа = СтрокаТаблицы.СуммаПлатежа - ОплаченоВалДок;
			
			Если СтрокаТаблицы.ВалютаДенежныхСредств = СтрокаТаблицы.Договор.ВалютаРасчетов Тогда
				СтрокаТаблицы.СуммаРасчетов = СтрокаТаблицы.СуммаПлатежа;
			Иначе
				СтрокаТаблицы.СуммаРасчетов = СтрокаТаблицы.СуммаРасчетов * СтрокаТаблицы.СуммаПлатежа / СуммаПлатежаНач;
			КонецЕсли;
			
			СтрокаТаблицы.СуммаНДС = СтрокаТаблицы.СуммаПлатежа * (1 - 1 / ((?(ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС), СтрокаТаблицы.СтавкаНДС.Ставка, 0) + 100) / 100));
			
			ОплаченоВалДок = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	СчСтрок = МассивСтрокДляУдаления.Количество() - 1;
	Пока СчСтрок >= 0 Цикл
		СтрокаТаблицы = ТаблицаДанных[СчСтрок];
		
		ТаблицаДанных.Удалить(СтрокаТаблицы);
		
		СчСтрок = СчСтрок - 1;
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации) Экспорт
	
	Возврат Справочники.ДоговорыКонтрагентов.ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, Истина, ВидОперации);
	
КонецФункции

&НаСервере
Процедура ВзаиморасчетыДеньгиПриСозданииНаСервере(пФорма) Экспорт
	
	ЛожьЭтоЗачет = Ложь;
	пФорма.СпособЗачетаПоУмолчаниюДляКонтрагента = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляКонтрагента(пФорма.Объект.Контрагент, ЛожьЭтоЗачет);
	
	пФорма.ДатаПриСозданииНаСервере = пФорма.Объект.Дата;
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьРеквизитыРасчетов(пФорма, пФорма.СтруктураПараметровРасчетов, пФорма.ВариантЗаполненияРасшифровки);
	
	пФорма.ИсходнаяСуммаРавнаНулю = (пФорма.Объект.СуммаДокумента = 0);
	
	РасчетыРаботаСФормамиВызовСервера.ОбработатьОбщиеРеквизитыРасчетов(пФорма);
	пФорма.Элементы.ДекорацияНадписьДляРежимаАвто.Заголовок = РасчетыРаботаСФормамиВызовСервера.ПолучитьЗаголовокДляРежимаАвто();
	
	пФорма.Элементы.ГруппаЗачетПредоплатыПоСтроке.Видимость = Ложь;
	пФорма.НадписьДокументЗачетаПредоплаты = "";
	
	Для Каждого ТекущаяСтрока Из пФорма.Объект.РасшифровкаПлатежа Цикл
		Если ТекущаяСтрока.СпособЗачета.Пустая() Тогда
			ТекущаяСтрока.СпособЗачета = пФорма.СпособЗачетаВручную;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьЗаголовкиКолонокТабличныхЧастей(пФорма, пФорма.Объект.ВалютаДенежныхСредств);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеДокументаПредоплаты(пКонтрагент, пПроверяемыеРеквизиты) Экспорт
	
	Если пКонтрагент.ВестиРасчетыПоДокументам Тогда
		пПроверяемыеРеквизиты.Добавить("Предоплата.Документ");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыКурсИКратность(пФорма) Экспорт
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(пФорма.Объект, "ВалютаДенежныхСредств") Тогда
		 Валюта = пФорма.Объект.ВалютаДенежныхСредств;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(пФорма.Объект, "ВалютаДокумента") Тогда
		 Валюта = пФорма.Объект.ВалютаДокумента;
	КонецЕсли;
	 
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(пФорма.Объект.Дата, Новый Структура("Валюта", Валюта));
	
	пФорма.Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	пФорма.Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущееПодразделениеСотрудника(Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТекущиеКадровыеДанныеСотрудников.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник = &Сотрудник";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтруктурнаяЕдиница;
	Иначе
		Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Ставка НДС по организации, дате и способу заполнения ставки.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации
// 	Дата - Дата
// 	СпособЗаполненияСтавки - ПеречислениеСсылка.СпособыЗаполненияСтавкиНДС
// Возвращаемое значение:
// 	СправочникСсылка.СтавкиНДС
Функция СтавкаНДСПоОрганизацииНалогообложениеНДСИСпособуЗаполнения(Организация, Дата, СпособЗаполненияСтавки) Экспорт
	
	// Объект.СтавкаНДС
	Если Не ЗначениеЗаполнено(СпособЗаполненияСтавки) Тогда
		Возврат Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	ИначеЕсли СпособЗаполненияСтавки = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСтавкиНДС.БезНДС") Тогда
		Возврат Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.БезНДС, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Иначе
		Возврат Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	КонецЕсли;
	
КонецФункции


#Область ИтогиВСпискахДенежныхДокументов

Процедура НастроитьПанельИтоговПриСозданииНаСервере(Форма, ИмяФормы, ПоказыватьПанельИтоговВМобильномКлиенте = Ложь) Экспорт
	
	//Заполнение значений по умолчанию
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "НеОтображатьИтоги") Тогда
		Форма.НеОтображатьИтоги = Перечисления.ВариантыОтображенияИтоговБанкИКасса.НеОтображатьИтоги;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВедомостьЗаДень") Тогда
		Форма.ВедомостьЗаДень = Перечисления.ВариантыОтображенияИтоговБанкИКасса.ВедомостьЗаДень;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВедомостьЗаПериод") Тогда
		Форма.ВедомостьЗаПериод = Перечисления.ВариантыОтображенияИтоговБанкИКасса.ВедомостьЗаПериод;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВариантОтображенияИтогов") Тогда
		Если НЕ ЗначениеЗаполнено(Форма.ВариантОтображенияИтогов) ИЛИ НЕ ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
			Форма.ВариантОтображенияИтогов = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияИтоговБанкИКасса.ВедомостьЗаДень");
			Если НЕ ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДекорацияОткрытьФормуНастройкиИтогов", "Видимость", Ложь);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДекорацияОткрытьФормуНастройкиИтогов2", "Видимость", Ложь);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДекорацияОткрытьФормуНастройкиИтогов3", "Видимость", Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТаблицуИтогов(Форма, ИмяФормы);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() И НЕ ПоказыватьПанельИтоговВМобильномКлиенте Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПоказатьИтогиКонтекстноеМеню", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СтраницыИтоги", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТаблицаИтогов", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ГруппаЭлементыИтогов", "Видимость", Ложь);
		
		Возврат;
		
	КонецЕсли;
	
	Если ИмяФормы = "ПланированиеДенег" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СтраницыИтоги", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ГруппаЭлементыИтогов", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗагрузкойНастроекИтогов(Форма, Настройки) Экспорт
	
	// Вариант отображения итогов.
	Если НЕ ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
		Форма.ВариантОтображенияИтогов = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияИтоговБанкИКасса.ВедомостьЗаДень");
	Иначе
		ТекущийВариантОтображенияИтогов = Настройки.Получить("ВариантОтображенияИтогов");
		Если ЗначениеЗаполнено(ТекущийВариантОтображенияИтогов) Тогда
			Форма.ВариантОтображенияИтогов = ТекущийВариантОтображенияИтогов;
			Форма.ОтборВалютаВедомости = Настройки.Получить("ОтборВалютаВедомости");
			Форма.ОтборВалютаОстатков = Настройки.Получить("ОтборВалютаОстатков");
		КонецЕсли;
	КонецЕсли;
	
	ПоказыватьПанельИтогов = НЕ ОбщегоНазначения.ЭтоМобильныйКлиент();
	НастройкаИтоговЗавершениеНаСервере(Форма, ПоказыватьПанельИтогов);
	
КонецПроцедуры

Процедура ПриЗагрузкеНастроекИтогов(Форма, Настройки) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
		Форма.ВариантОтображенияИтогов = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияИтоговБанкИКасса.ВедомостьЗаДень");
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкаИтоговЗавершениеНаСервере(Форма, ПоказыватьПанельИтогов = Истина) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если НЕ ПоказыватьПанельИтогов Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПоказатьИтогиКонтекстноеМеню", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СтраницыИтоги", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТаблицаИтогов", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ГруппаЭлементыИтогов", "Видимость", Ложь);
		
		Возврат;
		
	КонецЕсли; 
	
	Если Форма.ВариантОтображенияИтогов = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияИтоговБанкИКасса.ВедомостьЗаДень") Тогда
		
		Элементы.ИнформацияСуммаВалНачальныйОстаток.Видимость = Истина;
		Элементы.ИнформацияСуммаВалПриход.Видимость = Истина;
		Элементы.ИнформацияСуммаВалРасход.Видимость = Истина;
		
		Элементы.ИнформацияСуммаВалНачальныйОстаток.Заголовок = НСтр("ru = 'Начало дня'");
		Элементы.ИнформацияСуммаВалКонечныйОстаток.Заголовок = НСтр("ru = 'Конец дня'");
		Элементы.ИнформацияСуммаВалКонечныйОстаток.Шрифт = Новый Шрифт(Элементы.ИнформацияСуммаВалКонечныйОстаток.Шрифт,,, Ложь);
		
		Форма.ТаблицаИтогов[0].Показатель = НСтр("ru = 'Начало дня'");
		Форма.ТаблицаИтогов[3].Показатель = НСтр("ru = 'Конец дня'");
		
		Элементы.СтраницаЗаДень.Видимость = Истина;
		Элементы.СтраницаЗаПериод.Видимость = Ложь;
		Элементы.СтраницаВВалюте.Видимость = Ложь;
		Элементы.СтраницаНеОтображатьИтоги.Видимость = Ложь;
		
		Элементы.ГруппаЭлементыИтогов.Видимость = Ложь;
		Элементы.ТаблицаИтогов.Видимость = Истина;
		
		Элементы.СтраницыИтоги.ТекущаяСтраница = Элементы.СтраницаЗаДень;
		
	ИначеЕсли Форма.ВариантОтображенияИтогов = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияИтоговБанкИКасса.ВедомостьЗаПериод") Тогда
		
		ЗаполнитьИнформациюОбИтогахПоВалюте(Форма);
		
		Элементы.ДекорацияВедомостьПоВалюте.Заголовок = НСтр("ru = 'Ведомость по валюте: '") + Форма.ОтборВалютаВедомости;
		
		Элементы.ИнформацияСуммаВалНачальныйОстаток.Видимость = Истина;
		Элементы.ИнформацияСуммаВалПриход.Видимость = Истина;
		Элементы.ИнформацияСуммаВалРасход.Видимость = Истина;
		
		Элементы.ИнформацияСуммаВалНачальныйОстаток.Заголовок = НСтр("ru = 'Начало периода'");
		Элементы.ИнформацияСуммаВалКонечныйОстаток.Заголовок = НСтр("ru = 'Конец периода'");
		Элементы.ИнформацияСуммаВалКонечныйОстаток.Шрифт = Новый Шрифт(Элементы.ИнформацияСуммаВалКонечныйОстаток.Шрифт,,, Ложь);
		
		Если НЕ ЗначениеЗаполнено(Форма.ОтборПериод.ДатаНачала) И НЕ ЗначениеЗаполнено(Форма.ОтборПериод.ДатаОкончания) Тогда
			Форма.ТаблицаИтогов[0].Показатель = НСтр("ru = 'За все время'");
			Форма.ТаблицаИтогов[3].Показатель = НСтр("ru = 'Остаток'");
		Иначе
			Форма.ТаблицаИтогов[0].Показатель = НСтр("ru = 'С '")+Формат(Форма.ОтборПериод.ДатаНачала, "ДФ=dd.MM.yyyy");
			Форма.ТаблицаИтогов[3].Показатель = НСтр("ru = 'По '")+Формат(Форма.ОтборПериод.ДатаОкончания, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		Элементы.СтраницаЗаДень.Видимость = Ложь;
		Элементы.СтраницаЗаПериод.Видимость = Истина;
		Элементы.СтраницаВВалюте.Видимость = Ложь;
		Элементы.СтраницаНеОтображатьИтоги.Видимость = Ложь;
		
		Элементы.ГруппаЭлементыИтогов.Видимость = Ложь;
		Элементы.ТаблицаИтогов.Видимость = Истина;
		
		Элементы.СтраницыИтоги.ТекущаяСтраница = Элементы.СтраницаЗаПериод;
		
	ИначеЕсли Форма.ВариантОтображенияИтогов = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияИтоговБанкИКасса.ОстаткиПересчитанныеВВалюту") Тогда
		
		СтруктураДанных = ПолучитьОстатокВВалюте(Форма.ОтборВалютаОстатков);
		Элементы.ОтборКурс.Заголовок = НСтр("ru = 'Курс на '")+Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy")+"";
		Форма.ОтборКурс = ""+СтруктураДанных.Курс;
		Форма.ИнформацияСуммаВалКонечныйОстаток = СтруктураДанных.Остаток;
		Элементы.ДекорацияОстатокВВалюте.Заголовок = НСтр("ru = 'Остатки в валюте: '")+Форма.ОтборВалютаОстатков;
		
		Элементы.ИнформацияСуммаВалНачальныйОстаток.Видимость = Ложь;
		Элементы.ИнформацияСуммаВалПриход.Видимость = Ложь;
		Элементы.ИнформацияСуммаВалРасход.Видимость = Ложь;
		
		Элементы.ИнформацияСуммаВалКонечныйОстаток.Заголовок = НСтр("ru = 'Остаток'");
		
		Элементы.СтраницаЗаДень.Видимость = Ложь;
		Элементы.СтраницаЗаПериод.Видимость = Ложь;
		Элементы.СтраницаВВалюте.Видимость = Истина;
		Элементы.СтраницаНеОтображатьИтоги.Видимость = Ложь;
		
		Элементы.ГруппаЭлементыИтогов.Видимость = Истина;
		Элементы.ТаблицаИтогов.Видимость = Ложь;
		
		Элементы.СтраницыИтоги.ТекущаяСтраница = Элементы.СтраницаВВалюте;
		
	Иначе
		
		Элементы.СтраницаЗаДень.Видимость = Ложь;
		Элементы.СтраницаЗаПериод.Видимость = Ложь;
		Элементы.СтраницаВВалюте.Видимость = Ложь;
		Элементы.СтраницаНеОтображатьИтоги.Видимость = Истина;
		
		Элементы.ГруппаЭлементыИтогов.Видимость = Ложь;
		Элементы.ТаблицаИтогов.Видимость = Ложь;
		
		Элементы.СтраницыИтоги.ТекущаяСтраница = Элементы.СтраницаНеОтображатьИтоги;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеПоСчетуКассе(Период, СчетКасса, Валюта = Неопределено) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваОстаткиИОбороты.СуммаВалНачальныйОстаток КАК ИнформацияСуммаВалНачальныйОстаток,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаВалПриход КАК ИнформацияСуммаВалПриход,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаВалРасход КАК ИнформацияСуммаВалРасход,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаВалКонечныйОстаток КАК ИнформацияСуммаВалКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			,
	|			БанковскийСчетКасса = &СчетКасса
	|				%УсловиеВалюта%) КАК ДенежныеСредстваОстаткиИОбороты";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Период));
	Запрос.УстановитьПараметр("СчетКасса", СчетКасса);
	
	Если Валюта = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеВалюта%", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеВалюта%", "И Валюта = &Валюта");
		Запрос.УстановитьПараметр("Валюта", ?(ЗначениеЗаполнено(Валюта), Валюта, Константы.НациональнаяВалюта.Получить()));
	КонецЕсли; 
	
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	
	Если ЗначениеЗаполнено(СчетКасса) Тогда
		Если ТипЗнч(СчетКасса) = Тип("СправочникСсылка.Кассы") Тогда
			НомерБанковскогоСчета = СчетКасса.Наименование;
		ИначеЕсли ТипЗнч(СчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда 
			НомерБанковскогоСчета = СчетКасса.НомерСчета;
		Иначе
		    НомерБанковскогоСчета = СчетКасса;
		КонецЕсли;
	Иначе
		НомерБанковскогоСчета = "";
	КонецЕсли;
	
	Если ВыборкаРезультата.Следующий() Тогда
		СтруктураВозврата = Новый Структура("ИнформацияСуммаВалНачальныйОстаток, ИнформацияСуммаВалКонечныйОстаток, ИнформацияСуммаВалПриход, ИнформацияСуммаВалРасход, УчетВалютныхОпераций, НомерБанковскогоСчета");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ВыборкаРезультата);
		СтруктураВозврата.УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
		СтруктураВозврата.НомерБанковскогоСчета = НомерБанковскогоСчета;
		Возврат СтруктураВозврата;
	Иначе
		Возврат Новый Структура(
			"ИнформацияСуммаВалКонечныйОстаток, ИнформацияСуммаВалНачальныйОстаток, ИнформацияСуммаВалПриход, ИнформацияСуммаВалРасход, УчетВалютныхОпераций, НомерБанковскогоСчета",
			0,0,0,0,Ложь,НомерБанковскогоСчета
		);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеПоПланируемымПлатежам(СсылкаНаДокумент) Экспорт
	
	Валюта = СсылкаНаДокумент.ВалютаДокумента;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ДокументыПланированияДенег.СуммаПриход), 0) КАК СуммаПриходЗаДень,
	|	ЕСТЬNULL(СУММА(ДокументыПланированияДенег.СуммаРасход), 0) КАК СуммаРасходЗаДень,
	|	ЕСТЬNULL(СУММА(ДокументыПланированияДенег.СуммаПеремещения), 0) КАК СуммаПеремещенияЗаДень
	|ИЗ
	|	ЖурналДокументов.ДокументыПланированияДенег КАК ДокументыПланированияДенег
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ДокументыПланированияДенег.Дата, ДЕНЬ) = &Дата
	|	И ДокументыПланированияДенег.Валюта = &Валюта
	|	И ДокументыПланированияДенег.Проведен";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(СсылкаНаДокумент.Дата));
	Запрос.УстановитьПараметр("Валюта", Валюта);
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		ПредставлениеВалюты = ""+Валюта;
	Иначе
		ПредставлениеВалюты = НСтр("ru = '<валюта пустая>'");
	КонецЕсли;
	
	Если ВыборкаРезультата.Следующий() Тогда
		СтруктураВозврата = Новый Структура("СуммаПриходЗаДень, СуммаРасходЗаДень, СуммаПеремещенияЗаДень, ПредставлениеВалюты");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ВыборкаРезультата);
		СтруктураВозврата.ПредставлениеВалюты = ПредставлениеВалюты;
		Возврат СтруктураВозврата;
	Иначе
		Возврат Новый Структура(
			"СуммаПриходЗаДень, СуммаРасходЗаДень, СуммаПеремещенияЗаДень, ПредставлениеВалюты",
			0,0,0,ПредставлениеВалюты
		);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область КурсыВалютВФормахДокументов

Функция ПолучитьСписокКурсовВалют(ВалютаДоговор, ДатаОпределенияКурса, ДополнительнаяДата = Неопределено) Экспорт
	
	Если ТипЗнч(ВалютаДоговор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ВалютаДляОпределенияКурса = ВалютаДоговор.ВалютаРасчетов;
	Иначе
		ВалютаДляОпределенияКурса = ВалютаДоговор;
	КонецЕсли;
	
	СписокКурсовВалют = Новый СписокЗначений;
	
	Если УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() <> ВалютаДляОпределенияКурса Тогда 
		
		Если ЗначениеЗаполнено(ДополнительнаяДата) Тогда
			КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДляОпределенияКурса, ДополнительнаяДата);
			СписокКурсовВалют.Добавить(КурсНаДату.Курс, Формат(КурсНаДату.Курс, "ЧДЦ=4") + " (на " + Формат(ДополнительнаяДата, "ДФ = дд.ММ.гг") + ")");
		КонецЕсли;
		
		КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДляОпределенияКурса, ДатаОпределенияКурса);
		СписокКурсовВалют.Добавить(КурсНаДату.Курс, Формат(КурсНаДату.Курс, "ЧДЦ=4") + " (на " + Формат(ДатаОпределенияКурса, "ДФ = дд.ММ.гг") + ")");
		
		Для ДеньМинус = 1 По 5 Цикл
			ДатаКурса = ДатаОпределенияКурса - (ДеньМинус * 86400);
			КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДляОпределенияКурса, ДатаКурса);
			СписокКурсовВалют.Добавить(КурсНаДату.Курс, Формат(КурсНаДату.Курс, "ЧДЦ=4") + " (на " + Формат(ДатаКурса, "ДФ = дд.ММ.гг") + ")");
		КонецЦикла;
		
		СписокКурсовВалют.Добавить(0, "<Выбрать другую дату>");
		
	КонецЕсли;
	
	Возврат СписокКурсовВалют;
	
КонецФункции

Процедура ЗаполнитьСписокВыбораВалютЭлементаФормы(ЭлементКурс, Валюта, Дата, ДополнительнаяДата = Неопределено) Экспорт
	
	ЭлементКурс.СписокВыбора.Очистить();
	
	СписокКурсовВалют = ПолучитьСписокКурсовВалют(Валюта, Дата, ДополнительнаяДата);
	
	Для Каждого КурсНаДату Из СписокКурсовВалют Цикл
		ЭлементКурс.СписокВыбора.Добавить(КурсНаДату.Значение, КурсНаДату.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКурсКратностьДокументаРасчетов(СсылкаНаДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСПокупателями.Регистратор КАК Регистратор,
		|	СРЕДНЕЕ(РасчетыСПокупателями.Курс) КАК Курс,
		|	СРЕДНЕЕ(РасчетыСПокупателями.Кратность) КАК Кратность
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	РасчетыСПокупателями.Регистратор = &Регистратор
		|	И РасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПокупателями.Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСПоставщиками.Регистратор,
		|	СРЕДНЕЕ(РасчетыСПоставщиками.Курс),
		|	СРЕДНЕЕ(РасчетыСПоставщиками.Кратность)
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.Регистратор = &Регистратор
		|	И РасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПоставщиками.Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор", СсылкаНаДокумент);
	
	ВыборкаКурсКратностьДокументаРасчетов = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаКурсКратностьДокументаРасчетов.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаКурсКратностьДокументаРасчетов.Курс) Тогда
			СтруктураВозврата = Новый Структура;
			СтруктураВозврата.Вставить("Курс", ВыборкаКурсКратностьДокументаРасчетов.Курс);
			СтруктураВозврата.Вставить("Кратность", ?(ВыборкаКурсКратностьДокументаРасчетов.Кратность = 0, 1, ВыборкаКурсКратностьДокументаРасчетов.Кратность));
			Возврат СтруктураВозврата;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции 

#КонецОбласти

#Область ВыборСчетаНаОплату

&НаСервере
Процедура ПроверитьСовпадениеДоговораВСтрокеИВСчетеНаОплату(Форма, ТекущиеДанные) Экспорт
	
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетНаОплату) И ЗначениеЗаполнено(ТекущиеДанные.СчетНаОплату.Договор) Тогда
		ДоговорВСчетеНаОплату = УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СчетНаОплату, "Договор");
		Если ДоговорВСчетеНаОплату <> ТекущиеДанные.Договор Тогда
			ТекущиеДанные.СчетНаОплату = Неопределено;
			ТекстСообщения = НСтр("ru = 'Договор в счете на оплату отличается от договора, который выбран в текущей строке. Выберите договор ""%1"", чтобы выбрать счет на оплату'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ДоговорВСчетеНаОплату);
			Сообщить(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьИнформациюОбИтогахПоВалюте(Форма)
	
	Если НЕ Форма.ОтборВалютаВедомости.Пустая() Тогда
		
		СтруктураДанные = ПолучитьДанныеПоВалюте(Форма.ОтборПериод, Форма.ОтборВалютаВедомости);
		
		Форма.ТаблицаИтогов[0].Значение = СтруктураДанные.ИнформацияСуммаВалНачальныйОстаток;
		Форма.ТаблицаИтогов[1].Значение = СтруктураДанные.ИнформацияСуммаВалПриход;
		Форма.ТаблицаИтогов[2].Значение = СтруктураДанные.ИнформацияСуммаВалРасход;
		Форма.ТаблицаИтогов[3].Значение = СтруктураДанные.ИнформацияСуммаВалКонечныйОстаток;
		
	Иначе
		Форма.ИнформацияСуммаВалКонечныйОстаток = 0;
		Форма.ИнформацияСуммаВалНачальныйОстаток = 0;
		Форма.ИнформацияСуммаВалПриход = 0;
		Форма.ИнформацияСуммаВалРасход = 0;
		Форма.Дата = "";
	КонецЕсли;
	
КонецПроцедуры 

Функция ПолучитьДанныеПоВалюте(Период, Валюта)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваОстаткиИОбороты.СуммаВалНачальныйОстаток КАК ИнформацияСуммаВалНачальныйОстаток,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаВалПриход КАК ИнформацияСуммаВалПриход,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаВалРасход КАК ИнформацияСуммаВалРасход,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаВалКонечныйОстаток КАК ИнформацияСуммаВалКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , Валюта = &Валюта) КАК ДенежныеСредстваОстаткиИОбороты";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода", ?(Период.ДатаОкончания = '00010101', '39991231', КонецДня(Период.ДатаОкончания)));
	Запрос.УстановитьПараметр("Валюта", Валюта);
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаРезультата.Следующий() Тогда
		СтруктураВозврата = Новый Структура("ИнформацияСуммаВалНачальныйОстаток, ИнформацияСуммаВалКонечныйОстаток, ИнформацияСуммаВалПриход, ИнформацияСуммаВалРасход, УчетВалютныхОпераций, НомерБанковскогоСчета");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ВыборкаРезультата);
		СтруктураВозврата.УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
		Возврат СтруктураВозврата;
	Иначе
		Возврат Новый Структура(
			"ИнформацияСуммаВалКонечныйОстаток, ИнформацияСуммаВалНачальныйОстаток, ИнформацияСуммаВалПриход, ИнформацияСуммаВалРасход, УчетВалютныхОпераций, НомерБанковскогоСчета",
			0,0,0,0,Ложь
		);
	КонецЕсли;
	
КонецФункции // ПолучитьДанныеПоВалюте()

Функция ПолучитьОстатокВВалюте(Валюта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК Курс,
		|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоВалюте = РезультатЗапроса.Выбрать();
	ВыборкаПоВалюте.Следующий();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ДенежныеСредстваОстатки.СуммаВалОстаток * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) * &Кратность / (ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) * &Курс)) КАК ОстатокВВалюте
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.Остатки(ДатаВремя(3999, 12, 31), ) КАК ДенежныеСредстваОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсыВалютСрезПоследних
		|		ПО ДенежныеСредстваОстатки.Валюта = КурсыВалютСрезПоследних.Валюта";
	
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Кратность", ВыборкаПоВалюте.Кратность);
	Запрос.УстановитьПараметр("Курс", ВыборкаПоВалюте.Курс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СтруктураВозврата = Новый Структура("Курс, Остаток", ВыборкаПоВалюте.Курс, 0);
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтруктураВозврата.Вставить("Остаток", ВыборкаДетальныеЗаписи.ОстатокВВалюте);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗаполнитьТаблицуИтогов(Форма, ИмяФормы)
	
	СтрокаПоказателей = "";
	
	Если ИмяФормы = "БанкИКасса" ИЛИ ИмяФормы = "Банк" ИЛИ ИмяФормы = "Касса" Тогда
		СтрокаПоказателей = "Начало дня,Поступило,Списано,Конец дня";
	ИначеЕсли ИмяФормы = "ПланированиеДенег" Тогда
		СтрокаПоказателей = "Приход,Расход,В том числе,перемещения";
	КонецЕсли;
	
	Если СтрокаПоказателей = "" Тогда
		Возврат;
	КонецЕсли; 
	
	Форма.ТаблицаИтогов.Очистить();
	
	МассивПоказателей = СтрРазделить(СтрокаПоказателей, ",");
	
	// Начальные остатки
	Для каждого Показатель Из МассивПоказателей Цикл
		
		СтрокаИтогов = Форма.ТаблицаИтогов.Добавить();
		СтрокаИтогов.Показатель = Показатель;
		СтрокаИтогов.Значение = 0;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
