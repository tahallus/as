
#Область ПрограммныйИнтерфейс

// Создает или выключает доступ служебного пользователя Мобильного личного кабинета.
// Требуется для авторизации http-сервиса ОбменМЛК.
//
// Параметры:
//  Включить - Булево - Истина при включении Мобильного личного кабинета.
// 
// Возвращаемое значение:
//   - Булево
//
Функция СоздатьИзменитьСлужебногоПользователяМобильногоЛичногоКабинета(Включить = Ложь) Экспорт
	
	ЛогинПользователя = СлужебныйПользовательМЛКЛогин();
	ПарольПользователя = СлужебныйПользовательМЛКПароль();
	
	РолиПользователя = Новый Массив;
	РолиПользователя.Добавить(Метаданные.Роли.ИспользованиеМетодовМобильногоЛичногоКабинета.Имя);
	РолиПользователя.Добавить(Метаданные.Роли.ЗапускВебКлиента.Имя);
	РолиПользователя.Добавить(Метаданные.Роли.ЗапускМобильногоКлиента.Имя);
	РолиПользователя.Добавить(Метаданные.Роли.ЗапускТонкогоКлиента.Имя);
	РолиПользователя.Добавить(Метаданные.Роли.СохранениеДанныхПользователя.Имя);
	РолиПользователя.Добавить(Метаданные.Роли.ВыводНаПринтерФайлБуферОбмена.Имя);
	
	Возврат СоздатьСлужебногоПользователяИнтеграции(ЛогинПользователя, ПарольПользователя, РолиПользователя, Включить);
	
КонецФункции

Функция СоздатьИзменитьСлужебногоПользователяКабинетКлиента(Включить = Ложь) Экспорт
	
	ЛогинПользователя = СлужебныйПользовательКабинетКлиентаЛогин();
	ПарольПользователя = СлужебныйПользовательКабинетКлиентаПароль();
	
	РолиПользователя = Новый Массив;
	РолиПользователя.Добавить(Метаданные.Роли.ИспользованиеМетодовКабинетКлиента.Имя);
	РолиПользователя.Добавить(Метаданные.Роли.ВыполнениеСинхронизацииДанных.Имя);
	
	Возврат СоздатьСлужебногоПользователяИнтеграции(ЛогинПользователя, ПарольПользователя, РолиПользователя, Включить);
	
КонецФункции

Процедура ФормированиеПакетовДляМЛКПередЗаписью(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Константы.ИспользоватьМобильныйЛичныйКабинет.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Справочники.НастройкиПубликацииМЛК.ОнлайнЗаписьВключена() Тогда
		Возврат;
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("СправочникОбъект.Номенклатура") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиЗаписьНаУслуги.Услуга КАК Услуга
		|ИЗ
		|	РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
		|ГДЕ
		|	НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.МобильноеПриложение)
		|	И НастройкиЗаписьНаУслуги.Услуга = &Услуга";
		
		Запрос.УстановитьПараметр("Услуга", Источник.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.КлючевыеРесурсы") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиЗаписьНаУслуги.Услуга КАК Услуга
		|ИЗ
		|	РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
		|ГДЕ
		|	НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.МобильноеПриложение)
		|	И НастройкиЗаписьНаУслуги.Ресурс = &Ресурс";
		
		Запрос.УстановитьПараметр("Ресурс", Источник.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
	КонецЕсли;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ФоновыеЗадания.Выполнить("КонструкторМобильногоПриложения.СформироватьПакетОнлайнЗаписи",,,"Формирование пакетов для МЛК");
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПакетОнлайнЗаписи() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СсылкаКонструктор = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;

	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НастройкиПубликацииМЛК");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаКонструктор);
		Блокировка.Заблокировать();
		
		ЗаблокироватьДанныеДляРедактирования(СсылкаКонструктор);
		КонструкторОбъект = СсылкаКонструктор.ПолучитьОбъект();
		
		КонструкторОбъект.ВерсияОнлайнЗаписи = КонструкторОбъект.ВерсияОнлайнЗаписи + 1;
		
		СформироватьПакетСУслугами(КонструкторОбъект, ПолучитьВидЦен());
		СформироватьПакетСРесурсами(КонструкторОбъект);
		СформироватьПакетСРесурсамиИУслугами(КонструкторОбъект);
		
		КонструкторОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьВидЦен()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиПубликацииМЛК.ВидЦенУслуг КАК ВидЦенУслуг
		|ИЗ
		|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ВидЦенУслуг;
	КонецЕсли;
	
КонецФункции

Процедура СформироватьПакетСРесурсамиИУслугами(Знач ТекущийОбъект) Экспорт
	
	Если ТекущийОбъект.ВариантЗаписиНаУслуги = Перечисления.ВариантыЗаписиНаУслуги.ЗаписьБезВремени И НЕ ТекущийОбъект.ИспользоватьВыборРесурса Тогда
		Таб = Новый ТаблицаЗначений;
		ТекущийОбъект.ПакетСРесурсамиИУслугами = Новый ХранилищеЗначения(Таб, Новый СжатиеДанных(9));
		Возврат;
	КонецЕсли;
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("УИУслуги");
	Таб.Колонки.Добавить("УИРесурса");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиЗаписьНаУслуги.Услуга.Ссылка КАК УслугаСсылка,
	|	НастройкиЗаписьНаУслуги.Ресурс.Ссылка КАК РесурсСсылка
	|ИЗ
	|	РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|ГДЕ
	|	НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.МобильноеПриложение)
	|	И НЕ НастройкиЗаписьНаУслуги.Услуга.ПометкаУдаления
	|	И НЕ НастройкиЗаписьНаУслуги.Ресурс.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Стр = Таб.Добавить();
		Стр.УИУслуги = ВыборкаДетальныеЗаписи.УслугаСсылка.УникальныйИдентификатор();
		Стр.УИРесурса = ВыборкаДетальныеЗаписи.РесурсСсылка.УникальныйИдентификатор();
	КонецЦикла;
	
	ТекущийОбъект.ПакетСРесурсамиИУслугами = Новый ХранилищеЗначения(Таб, Новый СжатиеДанных(9));
	
КонецПроцедуры

Процедура СформироватьПакетСРесурсами(Знач ТекущийОбъект) Экспорт
	
	Если ТекущийОбъект.ВариантЗаписиНаУслуги = Перечисления.ВариантыЗаписиНаУслуги.ЗаписьБезВремени И НЕ ТекущийОбъект.ИспользоватьВыборРесурса Тогда
		Таб = Новый ТаблицаЗначений;
		ТекущийОбъект.ПакетСРесурсами = Новый ХранилищеЗначения(Таб, Новый СжатиеДанных(9));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрСведенийНастройкиЗаписьНаУслуги.Ресурс.Ссылка КАК РесурсСсылка,
	|	РегистрСведенийНастройкиЗаписьНаУслуги.Ресурс.Наименование КАК РесурсНаименование,
	|	КлючевыеРесурсы.ФайлКартинки КАК ФайлКартинки
	|ИЗ
	|	РегистрСведений.НастройкиЗаписьНаУслуги КАК РегистрСведенийНастройкиЗаписьНаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|		ПО РегистрСведенийНастройкиЗаписьНаУслуги.Ресурс = КлючевыеРесурсы.Ссылка
	|ГДЕ
	|	РегистрСведенийНастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.МобильноеПриложение)
	|	И НЕ КлючевыеРесурсы.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("УИ");
	Таб.Колонки.Добавить("Наименование");
	Таб.Колонки.Добавить("Картинка");
	Таб.Колонки.Добавить("Описание");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Стр = Таб.Добавить();
		Стр.УИ = ВыборкаДетальныеЗаписи.РесурсСсылка.УникальныйИдентификатор();
		Стр.Наименование = ВыборкаДетальныеЗаписи.РесурсНаименование;
		Стр.Описание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДетальныеЗаписи.РесурсСсылка, "Комментарий"); // Версия 1.1.1
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ФайлКартинки) И ТекущийОбъект.ИспользоватьКартинкиРесурсов Тогда
			Стр.Картинка = Новый ХранилищеЗначения(РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаДетальныеЗаписи.ФайлКартинки), Новый СжатиеДанных(9));
		Иначе
			Стр.Картинка = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(9));
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийОбъект.ПакетСРесурсами = Новый ХранилищеЗначения(Таб, Новый СжатиеДанных(9));
	
КонецПроцедуры

Процедура СформироватьПакетСУслугами(Знач ТекущийОбъект, ВидЦенУслуг) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрСведенийНастройкиЗаписьНаУслуги.Услуга.Ссылка КАК УслугаСсылка,
	|	РегистрСведенийНастройкиЗаписьНаУслуги.Услуга.Наименование КАК УслугаНаименование,
	|	РегистрСведенийНастройкиЗаписьНаУслуги.Длительность КАК Длительность,
	|	Номенклатура.ФайлКартинки КАК ФайлКартинки,
	|	Номенклатура.Родитель.Ссылка КАК РодительСсылка,
	|	Номенклатура.Родитель.Наименование КАК РодительНаименование,
	|	Номенклатура.КатегорияНоменклатуры.Ссылка КАК КатегорияНоменклатурыСсылка,
	|	Номенклатура.КатегорияНоменклатуры.Наименование КАК КатегорияНоменклатурыНаименование
	|ИЗ
	|	РегистрСведений.НастройкиЗаписьНаУслуги КАК РегистрСведенийНастройкиЗаписьНаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО РегистрСведенийНастройкиЗаписьНаУслуги.Услуга = Номенклатура.Ссылка
	|ГДЕ
	|	РегистрСведенийНастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.МобильноеПриложение)
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И РегистрСведенийНастройкиЗаписьНаУслуги.Ресурс % ЗНАЧЕНИЕ(Справочник.КлючевыеРесурсы.ПустаяСсылка)";
	
	Если ТекущийОбъект.ВариантЗаписиНаУслуги = Перечисления.ВариантыЗаписиНаУслуги.ЗаписьБезВремени И НЕ ТекущийОбъект.ИспользоватьВыборРесурса Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%", "=");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%", "<>");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("УИ");
	Таб.Колонки.Добавить("Наименование");
	Таб.Колонки.Добавить("Длительность");
	Таб.Колонки.Добавить("Цена");
	Таб.Колонки.Добавить("Картинка");
	Таб.Колонки.Добавить("УИГруппы");
	Таб.Колонки.Добавить("НаименованиеГруппы");
	Таб.Колонки.Добавить("Описание");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Стр = Таб.Добавить();
		Стр.УИ = ВыборкаДетальныеЗаписи.УслугаСсылка.УникальныйИдентификатор();
		Стр.Наименование = ВыборкаДетальныеЗаписи.УслугаНаименование;
		Стр.Длительность = ВыборкаДетальныеЗаписи.Длительность;
		Стр.Описание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДетальныеЗаписи.УслугаСсылка, "Комментарий"); // Версия 1.1.1
		
		Стр.Цена = ПолучитьЦенуУслуги(ВыборкаДетальныеЗаписи.УслугаСсылка, ВидЦенУслуг);
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ФайлКартинки) И ТекущийОбъект.ИспользоватьКартинкиУслуг Тогда
			Стр.Картинка = Новый ХранилищеЗначения(РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаДетальныеЗаписи.ФайлКартинки), Новый СжатиеДанных(9));
		Иначе
			Стр.Картинка = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(9));
		КонецЕсли;
		
		Если ТекущийОбъект.ВариантОтбораУслуг = Перечисления.ВариантыОтбораУслуг.ПоГруппам И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РодительСсылка) Тогда
			Стр.УИГруппы = ВыборкаДетальныеЗаписи.РодительСсылка.УникальныйИдентификатор();
			Стр.НаименованиеГруппы = ВыборкаДетальныеЗаписи.РодительНаименование;
		ИначеЕсли ТекущийОбъект.ВариантОтбораУслуг = Перечисления.ВариантыОтбораУслуг.ПоКатегориям И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КатегорияНоменклатурыСсылка) Тогда
			Стр.УИГруппы = ВыборкаДетальныеЗаписи.КатегорияНоменклатурыСсылка.УникальныйИдентификатор();
			Стр.НаименованиеГруппы = ВыборкаДетальныеЗаписи.КатегорияНоменклатурыНаименование;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийОбъект.ПакетСУслугами = Новый ХранилищеЗначения(Таб, Новый СжатиеДанных(9));
	
КонецПроцедуры

Функция ПолучитьЦенуУслуги(УслугаСсылка, ВидЦенУслуг) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен = &ВидЦен
	|	И ЦеныНоменклатурыСрезПоследних.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("ВидЦен", ВидЦенУслуг);
	Запрос.УстановитьПараметр("Номенклатура", УслугаСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Цена;
	Иначе
		Возврат 0;
	КонецЕсли;

	
КонецФункции

Процедура ФормированиеПакетовДляМЛКПриЗаписиНабораЗаписейПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Константы.ИспользоватьМобильныйЛичныйКабинет.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Справочники.НастройкиПубликацииМЛК.ОнлайнЗаписьВключена() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиЗаписьНаУслуги.Услуга КАК Услуга
	|ИЗ
	|	РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|ГДЕ
	|	НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.МобильноеПриложение)
	|	И НастройкиЗаписьНаУслуги.Услуга = &Услуга";
	
	Запрос.УстановитьПараметр("Услуга", Источник.Отбор.Номенклатура.Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ФоновыеЗадания.Выполнить("КонструкторМобильногоПриложения.СформироватьПакетОнлайнЗаписи",,,"Формирование пакетов для МЛК");
	КонецЕсли;

КонецПроцедуры

Функция ВерсияМЛК() Экспорт

	Возврат "2.2.0";

КонецФункции // ()

Процедура ЗаписатьИдентификаторНовостиМЛКПередУдалением(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.НовостиМЛКДляОтправки.ЗаписатьНовостьДляОтправки(Источник.Ссылка.УникальныйИдентификатор(), ТекущаяДатаСеанса());
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает код компании/клиента с маской
// //
// Параметры:
//  Строка - Код компании/клиента без маски
// 
// Возвращаемое значение:
//  Строка - Код компании/клиента с маской
//
Функция КодКлиентаКомпанииСМаской(КодКлиентаКомпании) Экспорт
	
	КоличествоСимволовВКоде = СтрДлина(КодКлиентаКомпании);
	КодКлиентаКомпанииСМаской = "";
	Для Счетчик = 1 По КоличествоСимволовВКоде Цикл
		ТекСимвол = Сред(КодКлиентаКомпании, Счетчик, 1);
		КодКлиентаКомпанииСМаской = КодКлиентаКомпанииСМаской + ТекСимвол;
		Если Счетчик%3 = 0 И Счетчик <> КоличествоСимволовВКоде Тогда
			КодКлиентаКомпанииСМаской = КодКлиентаКомпанииСМаской + "-";
		КонецЕсли;
	КонецЦикла;
	
	Возврат КодКлиентаКомпанииСМаской
	
КонецФункции // ()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьСлужебногоПользователяИнтеграции(Логин, Пароль, Роли, Включить)
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИзСправочника = Пользователи.НайтиПоИмени(Логин);
	УстановитьПривилегированныйРежим(Ложь);
	
	Попытка
		Если ПользовательИзСправочника = Неопределено Тогда
			
			ИмяСобытия = "МобильныйЛичныйКабинет.СозданиеСлужебногоПользователя";
			
			ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
			ОписаниеПользователяИБ.Имя = Логин;
			ОписаниеПользователяИБ.ПолноеИмя = НСтр("ru='Мобильное приложение ""Кабинет клиента""'");
			ОписаниеПользователяИБ.АутентификацияСтандартная = Включить;
			ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
			ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Истина);
			ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль = Истина;
			ОписаниеПользователяИБ.Пароль = Пароль;
			ОписаниеПользователяИБ.Роли = Роли;
			
			НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
			НовыйПользователь.Наименование = ОписаниеПользователяИБ.ПолноеИмя;
			НовыйПользователь.Служебный = Истина;
			НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
			НовыйПользователь.Записать();
			
		ИначеЕсли ПользовательИзСправочника.Наименование = "Служебный пользователь мобильного личного кабинета" Тогда
			
			ПользовательИзСправочникаОбъект = ПользовательИзСправочника.ПолучитьОбъект();
			ПользовательИзСправочникаОбъект.Наименование = НСтр("ru='Мобильное приложение ""Кабинет клиента""'");
			ПользовательИзСправочникаОбъект.Записать();
			
			ИмяСобытия = "МобильныйЛичныйКабинет.ИзменениеДоступаСлужебногоПользователя";
			ИзменитьДоступВБазуСлужебногоПользователяИнтеграции(Включить, Пароль, ПользовательИзСправочника);
			
		Иначе
			
			ИмяСобытия = "МобильныйЛичныйКабинет.ИзменениеДоступаСлужебногоПользователя";
			ИзменитьДоступВБазуСлужебногоПользователяИнтеграции(Включить, Пароль, ПользовательИзСправочника);
			
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.Пользователи, ПользовательИзСправочника);
		Возврат Истина;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Процедура ИзменитьДоступВБазуСлужебногоПользователяИнтеграции(Включить, Знач Пароль, Знач ПользовательИзСправочника)
	
	ОбновляемыеСвойства = Новый Структура;
	ОбновляемыеСвойства.Вставить("СтарыйПароль", Пароль);
	ОбновляемыеСвойства.Вставить("АутентификацияСтандартная", Включить);
	
	УстановитьПривилегированныйРежим(Истина);
	Пользователи.УстановитьСвойстваПользователяИБ(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательИзСправочника, "ИдентификаторПользователяИБ"),
		ОбновляемыеСвойства,
		Ложь,
		Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция СлужебныйПользовательМЛКПароль()
	Возврат "c3804122-a756-4aad-a9ff-5de8db9b1397";
КонецФункции

Функция СлужебныйПользовательМЛКЛогин()
	Возврат "UserMLK";
КонецФункции

Функция СлужебныйПользовательКабинетКлиентаПароль() Экспорт
	Возврат "a0c3bdd0-9699-11ea-1e9e-0242ac130004";
КонецФункции

Функция СлужебныйПользовательКабинетКлиентаЛогин() Экспорт
	Возврат "UserClients";
КонецФункции

Функция ЗаписьJSONВСтруктуру(Знач СтруктураЗначений) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗначений);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ЧтениеJSONВСтруктуру(Знач СтруктураВСтроке) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтруктураВСтроке);
	
	Возврат ПрочитатьJSON(ЧтениеJSON);

КонецФункции

Процедура АктуализироватьИзмененияПланаОбменаПослеИзмененияВидаЦенВДоговоре(НастройкиПубликацииМЛК, УзелОбмена, НовыйВидЦен) Экспорт
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		
		УзелОбменаОбъект = УзелОбмена.ПолучитьОбъект();
		УзелОбменаОбъект.Заблокировать();
		
		ВыбраннаяНоменклатура = ОтборНоменклатурыУзлаОбмена(УзелОбменаОбъект);
		
		ВидыЦенИзУзла = УзелОбменаОбъект.ВидыЦен.Выгрузить();
		
		НайденныеВидыЦен = ВидыЦенИзУзла.НайтиСтроки(Новый Структура("ВидЦен", НовыйВидЦен));
		
		УзелОбменаИзменен = Ложь;
		Если НайденныеВидыЦен.Количество() = 0 Тогда
			
			НоваяСтрока = УзелОбменаОбъект.ВидыЦен.Добавить();
			НоваяСтрока.ВидЦен = НовыйВидЦен;
			УзелОбменаИзменен = Истина;
			
			ЗарегистрироватьЦеныНоменклатуры(УзелОбмена, НастройкиПубликацииМЛК, ВыбраннаяНоменклатура, НовыйВидЦен);
			
		КонецЕсли;
		
		Если УзелОбменаИзменен Тогда
			УзелОбменаОбъект.Записать();
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Выполнение фонового задания АктуализироватьИзмененияПланаОбменаПослеИзмененияВидаЦенВДоговоре (Кабинет клиента)'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ОтборНоменклатурыУзлаОбмена(УзелОбмена)
	
	Результат = Новый Массив;
	Для каждого Строка Из УзелОбмена.Номенклатура Цикл
		Результат.Добавить(Строка.Номенклатура);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура ЗарегистрироватьЦеныНоменклатуры(УзелОбмена, НастройкаПубликацииМЛК, Номенклатура, НовыйВидЦен)
	
	ДанныеНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаПубликацииМЛК,
		"КаталогТоваров,ВидЦенТоваров,ИспользоватьХарактеристики");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеныНоменклатурыСрезПоследних.ДокументУстановки КАК ДокументУстановки
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			ВидЦен = &НовыйВидЦен
	|				И Номенклатура В (&МассивНоменклатуры)
	|				И (&ИспользоватьХарактеристики
	|					ИЛИ Характеристика = &ХарактеристикаПустаяСсылка)
	|				И ДокументУстановки <> &ДокументУстановкиПустаяСсылка) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("НовыйВидЦен", НовыйВидЦен);
	Запрос.УстановитьПараметр("МассивНоменклатуры", Номенклатура);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", ДанныеНастройки.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ХарактеристикаПустаяСсылка", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДокументУстановкиПустаяСсылка", Документы.УстановкаЦенНоменклатуры.ПустаяСсылка());
	
	Результат = Запрос.Выполнить().Выбрать();
	
	УзлыОбмена = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УзелОбмена);
	
	Пока Результат.Следующий() Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(УзлыОбмена, Результат.ДокументУстановки);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ДокументУстановки КАК ДокументУстановки
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			ВидЦен = &НовыйВидЦен
	|				И Номенклатура В (&МассивНоменклатуры)
	|				И (&ИспользоватьХарактеристики
	|					ИЛИ Характеристика = &ХарактеристикаПустаяСсылка)
	|				И ДокументУстановки = &ДокументУстановкиПустаяСсылка) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("НовыйВидЦен", НовыйВидЦен);
	Запрос.УстановитьПараметр("МассивНоменклатуры", Номенклатура);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", ДанныеНастройки.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ХарактеристикаПустаяСсылка", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДокументУстановкиПустаяСсылка", Документы.УстановкаЦенНоменклатуры.ПустаяСсылка());
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Результат.Период);
		НаборЗаписей.Отбор.ВидЦен.Установить(Результат.ВидЦен);
		НаборЗаписей.Отбор.Номенклатура.Установить(Результат.Номенклатура);
		НаборЗаписей.Отбор.Характеристика.Установить(Результат.Характеристика);
		ПланыОбмена.ЗарегистрироватьИзменения(УзлыОбмена, НаборЗаписей);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик подписки на событие АктуализироватьЦеныНоменклатурыМЛК
//
Процедура ПроверитьИзменениеВидаЦенВДоговореМЛК(Источник, Отказ) Экспорт
	
	Попытка
		
		Если Источник.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
			Возврат;
		КонецЕсли;
		
		Если Источник.ВидЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ВидЦен") Тогда
			Возврат;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		НастройкиПубликацииМЛК = Справочники.НастройкиПубликацииМЛК.ПолучитьНастройкиПубликацииМЛК();
		Если НастройкиПубликацииМЛК = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НастройкиИнтеграцииКабинетКлиента = Справочники.НастройкиПубликацииМЛК.НастройкиИнтеграцииКабинетКлиента(НастройкиПубликацииМЛК);
		Если НастройкиИнтеграцииКабинетКлиента = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		РезультатЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиПубликацииМЛК, "ИндивидуальныеЦены");
		Если ТипЗнч(РезультатЗапроса) = Тип("РезультатЗапроса") Тогда
			ИндивидуальныеЦены = РезультатЗапроса.Выгрузить();
		Иначе
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ИндивидуальныеЦены) <> Тип("ТаблицаЗначений") Тогда
			Возврат;
		КонецЕсли;
		
		ИндивидуальныеЦеныНайденныеСтрокиМассив = ИндивидуальныеЦены.НайтиСтроки(Новый Структура("Договор, ВидЦен", Источник.Ссылка, Справочники.ВидыЦен.ПустаяСсылка()));
		Если ИндивидуальныеЦеныНайденныеСтрокиМассив.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ВариантНастройки = "КабинетКлиента";
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
		|ГДЕ
		|	СинхронизацияДанныхЧерезУниверсальныйФормат.ВариантНастройки = &ВариантНастройки";
		Запрос.УстановитьПараметр("ВариантНастройки", ВариантНастройки);
		УзлыОбменаКабинетКлиента = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Если УзлыОбменаКабинетКлиента.Количество() <> 1 Тогда
			Возврат;
		КонецЕсли;
		
		Узел = УзлыОбменаКабинетКлиента[0];
		ВидыЦенИзУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Узел, "ВидыЦен");
		
		Если ТипЗнч(ВидыЦенИзУзла) = Тип("РезультатЗапроса") Тогда
			ВидыЦенИзУзла = ВидыЦенИзУзла.Выгрузить();
		Иначе
			Возврат;
		КонецЕсли;
		
		НайденныеВидыЦен = ВидыЦенИзУзла.НайтиСтроки(Новый Структура("Ссылка", Источник.ВидЦен));
		
		Если НайденныеВидыЦен.Количество() = 0 Тогда
			
			Параметры = Новый Массив;
			Параметры.Добавить(НастройкиПубликацииМЛК);
			Параметры.Добавить(Узел);
			Параметры.Добавить(Источник.ВидЦен);
			
			ФоновыеЗадания.Выполнить("КонструкторМобильногоПриложения.АктуализироватьИзмененияПланаОбменаПослеИзмененияВидаЦенВДоговоре", Параметры,, НСтр("ru = 'Актуализация изменений плана обмена (Кабинет клиента)'"));
			
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ИмяСобытия = НСтр("ru = 'Актуализация изменений плана обмена после изменения цены в договоре (Кабинет клиента)'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецПопытки;

КонецПроцедуры

#КонецОбласти