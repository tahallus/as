#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриПолученииДанныхНаСервере(СтрокиСписка) Экспорт

	Для Каждого Строка Из СтрокиСписка Цикл
		Строка = СтрокиСписка[Строка.Ключ];
		Если Строка.Оформление.Получить("ГруппыДоступа") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Прервать;
	КонецЦикла;

	Ключи = СтрокиСписка.ПолучитьКлючи();
	Ссылки = Новый Массив;
	Для Каждого Ключ Из Ключи Цикл
		Ссылки.Добавить(Ключ.Ссылка);
	КонецЦикла;

	ГруппыПользователей = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Пользователь КАК Пользователь,
	|	ГруппыДоступаПользователи.Ссылка.Наименование КАК НаименованиеГруппы
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Пользователь В (&Ссылки)
	|	И НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеГруппы";
	Запрос.УстановитьПараметр("Ссылки", Ссылки);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ГруппыПользователей[Выборка.Пользователь] = Неопределено Тогда
			ГруппыПользователей[Выборка.Пользователь] = Новый Массив;
		КонецЕсли;
		ГруппыПользователей[Выборка.Пользователь].Добавить(Выборка.НаименованиеГруппы);
	КонецЦикла;

	Для Каждого Строка Из СтрокиСписка Цикл
		Строка = СтрокиСписка[Строка.Ключ];
		Если ГруппыПользователей[Строка.Данные["Ссылка"]] = Неопределено Тогда
			Строка.Данные["ГруппыДоступа"] = НСтр("ru = 'Не состоит ни в одной группе доступа'");
			Строка.Оформление["ГруппыДоступа"].УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.КрасныйТекстСтрок);
		Иначе
			Строка.Данные["ГруппыДоступа"] = СтрСоединить(ГруппыПользователей[Строка.Данные["Ссылка"]], ", ");
			Строка.Оформление["ГруппыДоступа"].УстановитьЗначениеПараметра("ЦветТекста",
				ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ПриЗаписиПользователя(Источник, Отказ) Экспорт
	
	// Для всех пользователей требуется создать связь Сотрудник <-> Пользователь
	// Данная связь необходима для заполнения поля Ответственный в документах
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;

	Пользователь = Источник.Ссылка;
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;

	ПредоставитьДоступПоУмолчаниюВНеполноправномРежиме(Пользователь);
	СвязатьПользователяССотрудником(Пользователь);
	НастроитьПрайсЛисты(Пользователь);

КонецПроцедуры

// Позволяет указать свою форму выбора пользователей.
// @skip-warning ПустойМетод - переопределяемый метод.
//
// В разрабатываемой форме необходимо:
// - устанавливать отбор Служебный = Ложь, отбор должен сниматься только под полными правами;
// - устанавливать отбор Недействителен = Ложь, отбор должен сниматься под любым пользователем.
//
// При реализации собственной формы необходимо поддержать параметры формы или использовать стандартную форму:
// - ЗакрыватьПриВыборе
// - МножественныйВыбор
// - ВыборУчастниковОбсуждения
//
// Для работы в качестве формы подбора участников обсуждения необходимо:
// - передавать результат выбора в оповещение о закрытии
// - результат выбора должен быть представлен массивом идентификаторов пользователей
//   системы взаимодействия.
//
// Параметры:
//   ВыбраннаяФорма - Строка - имя открываемой формы.
//   ПараметрыФормы - Структура - параметры формы при открытии, только Чтение:
//   * ЗакрыватьПриВыборе - Булево - содержит признак того, что форму
// 									необходимо закрывать после осуществления выбора.
// 									Если свойство имеет значение Ложь, можно использовать
// 									форму для выбора нескольких позиций или элементов.
//   * МножественныйВыбор - Булево - разрешает или запрещает выбор нескольких строк из списка.
//   * ВыборУчастниковОбсуждения - Булево - если Истина, то формы вызывается как форма выбора участников обсуждения.
// 										   Форма должна возвращать массив идентификаторов пользователей системы
// 										   Взаимодействия.
//
//   * ЗаголовокКнопкиЗавершенияПодбора - Строка - заголовок кнопки завершения подбора.
//   * СкрытьПользователейБезПользователяИБ - Булево - если Истина, то пользователи без идентификатора
// 													  пользователя ИБ не должны отображаться в списке.
//   * ВыборГруппПользователей - Булево - разрешить выбирать группы пользователей.
// 										 Если группы пользователей используются и параметр не поддерживается,
// 										 то для группы пользователей нельзя назначать права через форму подбора.
//   * РасширенныйПодбор - Булево - если Истина, то доступен просмотр Групп пользователей.
//   * ПараметрыРасширеннойФормыПодбора - Строка - адрес временного хранилища со структурой:
//   ** СкрываемыеПользователи - Массив - пользователи, которые не отображаются в форме подбора.
//   ** ВыборГруппВнешнихПользователей - Булево - разрешить выбирать группы внешних пользователей.
//   ** ПодборГруппНевозможен - Булево
//   ** ЗаголовокФормыПодбора - Строка - позволяет переопределять заголовок формы подбора.
//   ** ВыбранныеПользователи - Массив - пользователи, которые должны отображаться в подобранных.
//   ** ТекущаяСтрока - СправочникСсылка.ГруппыПользователей - строка, на которой будет выполнена позиционирование 
// 															в динамическом списке групп пользователей
// 															при открытии формы.
//
Процедура ПриОпределенииФормыВыбораПользователей(ВыбраннаяФорма, ПараметрыФормы) Экспорт
КонецПроцедуры

// Добавляет пользователя в группу с указанным профилем с наибольшим количеством пользователей, при условии,
// что он не состоит больше ни в каких группах.
// 
// Параметры:
// 	Пользователь - СправочникСсылка.Пользователи - пользователь, которого следует добавить в группу,
// 	СвойстваПрофиля - см. УправлениеДоступомУНФ.НовыеСвойстваПрофиля.
Процедура ДобавитьПользователяВГруппуСУказаннымПрофилем(Пользователь, СвойстваПрофиля) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГруппыДоступаПользователи.Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Пользователь = &Пользователь
	|	И НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГруппыДоступа.Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	НЕ ГруппыДоступа.Ссылка.ПометкаУдаления
	|	И ГруппыДоступа.Ссылка.Профиль.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляГруппы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГруппыДоступаПользователи.Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления
	|	И ГруппыДоступаПользователи.Ссылка.Профиль.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляГруппы
	|УПОРЯДОЧИТЬ ПО
	|	ГруппыДоступаПользователи.НомерСтроки УБЫВ";

	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ИдентификаторПрофиляГруппы", СвойстваПрофиля.УИД);

	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если Не РезультатыЗапроса[0].Пустой() Тогда
		ПользовательУжеСостоитВГруппеДоступа = СтрШаблон(НСтр("ru = 'Пользователь %1 уже состоит в группе доступа.'"),
			Пользователь);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'УправлениеДоступомУНФ.ДобавитьПользователяВГруппуСУказаннымПрофилем'",
			ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Справочники.Пользователи, , ПользовательУжеСостоитВГруппеДоступа);
		Возврат;
	КонецЕсли;

	Если РезультатыЗапроса[1].Пустой() Тогда
		ОтсутствуютГруппыДоступаСПрофилемПродажи = СтрШаблон(НСтр(
			"ru = 'Отсутствуют группы доступа с профилем ""%1"".'"), СвойстваПрофиля.Имя);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'УправлениеДоступомУНФ.ДобавитьПользователяВГруппуСУказаннымПрофилем'",
			ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Справочники.Пользователи, , ОтсутствуютГруппыДоступаСПрофилемПродажи);
		Возврат;
	КонецЕсли;

	Если РезультатыЗапроса[2].Пустой() Тогда
		Выборка = РезультатыЗапроса[1].Выбрать();
	Иначе
		Выборка = РезультатыЗапроса[2].Выбрать();
	КонецЕсли;

	Если Выборка.Следующий() Тогда
		НачатьТранзакцию();
		Попытка
			ГруппаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ГруппаОбъект.Заблокировать();
			НоваяСтрокаПользователи = ГруппаОбъект.Пользователи.Добавить();
			НоваяСтрокаПользователи.Пользователь = Пользователь;
			ГруппаОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Не удалось добавить пользователя ""%1"" в группу доступа ""%2"" по причине:
				 |%3'"), Пользователь, Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр(
					"ru = 'УправлениеДоступомУНФ.ДобавитьПользователяВГруппуПродажи'",
				ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Пользователи, , СообщениеОбОшибке);
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПредоставитьДоступПоУмолчаниюВНеполноправномРежиме(Пользователь)

	Если Пользователь.Недействителен Или Пользователь.Служебный Тогда
		Возврат;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваПрофиляПоУмолчанию = УправлениеДоступомУНФ.ПрофильПродажи();
	ДобавитьПользователяВГруппуСУказаннымПрофилем(Пользователь, СвойстваПрофиляПоУмолчанию);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СвязатьПользователяССотрудником(Пользователь)

	Если Пользователь.Недействителен Или Пользователь.Служебный Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	СвязанныеПользователи = РегистрыСведений.СотрудникиПользователя.ПолучитьСотрудниковПользователя(Пользователь,
		Истина);

	Если СвязанныеПользователи.Количество() = 0 Тогда

		НайденныйПользователь = Справочники.Сотрудники.НайтиПоНаименованию(Пользователь.Наименование, Истина);
		Если ЗначениеЗаполнено(НайденныйПользователь) Тогда

			Сотрудник = НайденныйПользователь;

		Иначе

			ДанныеНовогоСотрудника = Новый Структура;
			ДанныеНовогоСотрудника.Вставить("Наименование", Пользователь.Наименование);
			ДанныеНовогоСотрудника.Вставить("ТипЗанятости", Перечисления.ТипыЗанятости.ОсновноеМестоРаботы);
			ДанныеНовогоСотрудника.Вставить("СчетРасчетовСПерсоналом",
				ПланыСчетов.Управленческий.РасчетыСПерсоналомПоОплатеТруда);
			ДанныеНовогоСотрудника.Вставить("СчетРасчетовСПодотчетниками",
				ПланыСчетов.Управленческий.РасчетыСПодотчетниками);
			ДанныеНовогоСотрудника.Вставить("СчетРасчетовПоПерерасходу",
				ПланыСчетов.Управленческий.ПерерасходПодотчетников);

			Сотрудник = Справочники.Сотрудники.СоздатьНовогоСотрудника(ДанныеНовогоСотрудника);

		КонецЕсли;
		
		// Если элемент не записан, Сотрудник = Неопределено;
		Если ЗначениеЗаполнено(Сотрудник) Тогда

			СоответствиеДанных = Новый Соответствие;
			СоответствиеДанных.Вставить(Сотрудник, Пользователь);

			РегистрыСведений.СотрудникиПользователя.ДобавитьСотрудниковПользователей(СоответствиеДанных);
			Справочники.КалендариСотрудников.ПроверитьСоздатьКалендарьСотрудника(Сотрудник, Пользователь);

		Иначе

			Возврат;

		КонецЕсли;

	Иначе

		Сотрудник = СвязанныеПользователи[0];

	КонецЕсли;

	Справочники.Сотрудники.УстановитьОсновногоОтветственногоДляПользователя(Сотрудник, Пользователь);

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура НастроитьПрайсЛисты(Пользователь)

	Если Пользователь.Недействителен Или Пользователь.Служебный Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ПрайсЛистыСлужебный.НастройкиПрайсЛистовПриСозданииНовогоПользователя(Пользователь, Истина);

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти

