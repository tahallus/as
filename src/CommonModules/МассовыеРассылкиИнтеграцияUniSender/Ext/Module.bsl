
#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриОпределенииНастроекИнтерфейса(НастройкаИнтеграции, НастройкиИнтерфейса) Экспорт
	
	НастройкиИнтерфейса.ИспользоватьПисьмоОснование = Истина;
	НастройкиИнтерфейса.ИспользоватьКлючAPI = Истина;
	НастройкиИнтерфейса.ИспользоватьЛогин = Истина;
	
КонецПроцедуры

Процедура ПолучитьТокенДоступаAPI(НастройкаИнтеграции, ОписаниеТокена, Ошибки) Экспорт
	
	ВызватьИсключение СтрШаблон(НСтр("ru='Не реализуется для сервиса %1'"), ЭтотСервис());
	
КонецПроцедуры

Процедура ПолучитьШаблоны(НастройкаИнтеграции, ШаблоныСервиса, Ошибки) Экспорт
	Отказ = Ложь;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "getTemplates";
	ПараметрыОтправки.Метод = "GET";
	
	ПараметрыОтправки.ПараметрыURL.Вставить("type", "user");
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДанныеШаблонаСервиса Из Ответ.ПараметрыТела.result Цикл
		ДанныеШаблона = ШаблоныСервиса.Добавить();
		ДанныеШаблона.Идентификатор = ЧислоВСтроку(ДанныеШаблонаСервиса.id);
		ДанныеШаблона.Наименование  = ДанныеШаблонаСервиса.title;
		Если ДанныеШаблонаСервиса.Свойство("fullsize_screenshot_url")
			И ЗначениеЗаполнено(ДанныеШаблонаСервиса.fullsize_screenshot_url) Тогда
			ДанныеШаблона.СсылкаНаПредпросмотр = ДанныеШаблонаСервиса.fullsize_screenshot_url;
		Иначе
			ДанныеШаблона.СсылкаНаПредпросмотр = ДанныеШаблонаСервиса.screenshot_url;
		КонецЕсли;
		ДанныеШаблона.ТемаПисьма = ДанныеШаблонаСервиса.subject;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьШаблон(НастройкаИнтеграции, ДанныеШаблона, Ошибки) Экспорт
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "getTemplate";
	ПараметрыОтправки.Метод = "GET";
	
	ПараметрыОтправки.ПараметрыURL.Вставить("template_id", Число(ДанныеШаблона.Идентификатор));
	
	ДанныеОтвета = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	
	Если ДанныеОтвета.ПараметрыТела.result.Свойство("fullsize_screenshot_url")
		И ЗначениеЗаполнено(ДанныеОтвета.ПараметрыТела.result.fullsize_screenshot_url) Тогда
		СсылкаНаПредпросмотр = ДанныеОтвета.ПараметрыТела.result.fullsize_screenshot_url;
	Иначе
		СсылкаНаПредпросмотр = ДанныеОтвета.ПараметрыТела.result.screenshot_url;
	КонецЕсли;
	
	ДанныеШаблона.Наименование = ДанныеОтвета.ПараметрыТела.result.title;
	ДанныеШаблона.СсылкаНаПредпросмотр = СсылкаНаПредпросмотр;
	ДанныеШаблона.ТемаПисьма = ДанныеОтвета.ПараметрыТела.result.subject;
	
КонецПроцедуры

Процедура ПолучитьОтправителей(НастройкаИнтеграции, ОтправителиСервиса, Ошибки) Экспорт
	Отказ = Ложь;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "getCheckedEmail";
	ПараметрыОтправки.Метод = "GET";
	ПараметрыОтправки.ПараметрыURL.Вставить("login", НастройкаИнтеграции.Логин);
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДанныеОтправителяСервиса Из Ответ.ПараметрыТела.result Цикл
		Если НЕ ДанныеОтправителяСервиса.is_checked Тогда
			Продолжить;
		КонецЕсли;
		ДанныеОтправителя = ОтправителиСервиса.Добавить();
		ДанныеОтправителя.Наименование = ДанныеОтправителяСервиса.name;
		ДанныеОтправителя.Email        = ДанныеОтправителяСервиса.email;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьАдресныеКниги(НастройкаИнтеграции, АдресныеКнигиСервиса, Ошибки) Экспорт
	Отказ = Ложь;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "getLists";
	ПараметрыОтправки.Метод = "GET";
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДанныеАдреснойКнигиСервиса Из Ответ.ПараметрыТела.result Цикл
		ДанныеАдреснойКниги = АдресныеКнигиСервиса.Добавить();
		ДанныеАдреснойКниги.Идентификатор = ЧислоВСтроку(ДанныеАдреснойКнигиСервиса.id);
		ДанныеАдреснойКниги.Наименование  = ДанныеАдреснойКнигиСервиса.title;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьАдреснуюКнигу(НастройкаИнтеграции, ДанныеАдреснойКниги, Ошибки) Экспорт
	Отказ = Ложь;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "createList";
	ПараметрыОтправки.ПараметрыURL.Вставить("title", ДанныеАдреснойКниги.Наименование);
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАдреснойКниги.Идентификатор = ЧислоВСтроку(Ответ.ПараметрыТела.result.id);
	
	ДобавитьПолучателейВАдреснуюКнигу(НастройкаИнтеграции, ДанныеАдреснойКниги, Ошибки);
	
КонецПроцедуры

Процедура УдалитьИзАдреснойКниги(НастройкаИнтеграции, Идентификатор, Получатели, Ошибки) Экспорт
	Отказ = Ложь;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "exclude";
	ПараметрыОтправки.ПараметрыURL.Вставить("contact_type", "email");
	ПараметрыОтправки.ПараметрыURL.Вставить("list_ids", Идентификатор);
	
	Для каждого Получатель Из Получатели Цикл
		ПараметрыОтправки.ПараметрыURL.Вставить("contact", Получатель.Email);
		Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
		ОбработатьОшибку(Ответ, Ошибки, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьИзВсехАдресныхКниг(НастройкаИнтеграции, Получатели, Ошибки) Экспорт
	Отказ = Ложь;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "exclude";
	ПараметрыОтправки.ПараметрыURL.Вставить("contact_type", "email");
	
	Для каждого Получатель Из Получатели Цикл
		ПараметрыОтправки.ПараметрыURL.Вставить("contact", Получатель.Email);
		Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
		ОбработатьОшибку(Ответ, Ошибки, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьПисьмоОснование(НастройкаИнтеграции, ДанныеРассылки, Ошибки) Экспорт
	Отказ = Ложь;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "createEmailMessage";
	ПараметрыОтправки.Метод = "GET";
	ПараметрыОтправки.ПараметрыURL.Вставить("sender_name",  ДанныеРассылки.ИмяОтправителя);
	ПараметрыОтправки.ПараметрыURL.Вставить("sender_email", ДанныеРассылки.Отправитель);
	ПараметрыОтправки.ПараметрыURL.Вставить("subject",      ДанныеРассылки.ТемаПисьма);
	ПараметрыОтправки.ПараметрыURL.Вставить("list_id",      Число(ДанныеРассылки.ИдентификаторАдреснойКниги));
	ПараметрыОтправки.ПараметрыURL.Вставить("template_id",  Число(ДанныеРассылки.ИдентификаторШаблона));
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРассылки.ИдентификаторПисьмаОснования = ЧислоВСтроку(Ответ.ПараметрыТела.result.message_id);
	
КонецПроцедуры

Процедура СоздатьРассылку(НастройкаИнтеграции, ДанныеРассылки, Ошибки) Экспорт
	Отказ = Ложь;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "createCampaign";
	ПараметрыОтправки.ПараметрыURL.Вставить("message_id", Число(ДанныеРассылки.ИдентификаторПисьмаОснования));
	ПараметрыОтправки.ПараметрыURL.Вставить("track_read", 1);
	ПараметрыОтправки.ПараметрыURL.Вставить("track_links", 1);
	Если ДанныеРассылки.ПлановаяДатаОтправки <> Неопределено Тогда
		ПараметрыОтправки.ПараметрыURL.Вставить("start_time", ДатаДляURL(ДанныеРассылки.ПлановаяДатаОтправки));
	КонецЕсли;
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРассылки.Идентификатор = ЧислоВСтроку(Ответ.ПараметрыТела.result.campaign_id);
	
КонецПроцедуры

Процедура ДобавитьПолучателейВАдреснуюКнигу(НастройкаИнтеграции, ДанныеАдреснойКниги, Ошибки) Экспорт
	Отказ = Ложь;
	
	НайтиСоздатьПользовательскиеПоляСервиса(НастройкаИнтеграции, Ошибки);
	
	ПередаваемыеПоля = Новый Массив;
	ПередаваемыеПоля.Добавить("email");
	ПередаваемыеПоля.Добавить("email_list_ids");
	Для каждого ОписаниеПоля Из МассовыеРассылкиИнтеграция.ПользовательскиеПоляАдреснойКниги() Цикл
		ПередаваемыеПоля.Добавить(ОписаниеПоля.Имя);
	КонецЦикла;
	
	URL = "";
	ПоляURL = Новый Массив;
	Для Индекс = 0 По ПередаваемыеПоля.ВГраница() Цикл
		ШаблонПоля = "field_names[%1]=%2";
		ПоляURL.Добавить(СтрШаблон(ШаблонПоля, Индекс, ПередаваемыеПоля[Индекс]));
	КонецЦикла;
	
	Для ИндексКонтакта = 0 По ДанныеАдреснойКниги.Получатели.Количество() - 1 Цикл
		
		ДанныеПолучателя = МассовыеРассылкиИнтеграция.ПараметрыПолучателяДляЭкспорта(ДанныеАдреснойКниги.Получатели[ИндексКонтакта].Контакт);
		
		ШаблонПоля = "data[%1][%2]=%3";
		
		Для ИндексПоля = 0 По ПередаваемыеПоля.ВГраница() Цикл
			ИмяПараметра = ПередаваемыеПоля[ИндексПоля];
			ЗначениеПараметра = "";
			Если ИмяПараметра = "email" Тогда
				ЗначениеПараметра = ДанныеАдреснойКниги.Получатели[ИндексКонтакта].Email;
			ИначеЕсли ИмяПараметра = "email_list_ids" Тогда
				ЗначениеПараметра = Число(ДанныеАдреснойКниги.Идентификатор);
			Иначе
				ЗначениеПараметра = "";
				ДанныеПолучателя.Свойство(ИмяПараметра, ЗначениеПараметра);
			КонецЕсли;
			ЗначениеПараметра = ОтправкаЗапросов.ЗначениеПараметраДляURL(ЗначениеПараметра);
			ПоляURL.Добавить(СтрШаблон(ШаблонПоля, ИндексКонтакта, ИндексПоля, ЗначениеПараметра));
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "importContacts";
	ОтправкаЗапросов.ЗаполнитьURL(ПараметрыОтправки);
	ПараметрыОтправки.URL = ОтправкаЗапросов.ДополнитьURLСтрокойПараметров(ПараметрыОтправки.URL, СтрСоединить(ПоляURL, "&"));
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
КонецПроцедуры

Процедура ДанныеАдреснойКниги(НастройкаИнтеграции, ДанныеАдреснойКниги, Ошибки) Экспорт
	
	АдресныеКниги = МассовыеРассылкиИнтеграция.НовыйАдресныеКнигиСервиса();
	ПолучитьАдресныеКниги(НастройкаИнтеграции, АдресныеКниги, Ошибки);
	
	АдреснаяКнигаСписка = АдресныеКниги.Найти(ДанныеАдреснойКниги.Идентификатор, "Идентификатор");
	Если АдреснаяКнигаСписка <> Неопределено Тогда
		ДанныеАдреснойКниги.Наименование = АдреснаяКнигаСписка.Наименование;
	КонецЕсли;
	
	ПолучателиАдреснойКниги(НастройкаИнтеграции, ДанныеАдреснойКниги, Ошибки);
	
КонецПроцедуры

Процедура ПолучателиАдреснойКниги(НастройкаИнтеграции, ДанныеАдреснойКниги, Ошибки) Экспорт
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "async/exportContacts";
	ПараметрыОтправки.ПараметрыURL.Вставить("list_id", Число(ДанныеАдреснойКниги.Идентификатор));
	ПараметрыОтправки.ПараметрыURL.Вставить("field_names[0]", "email");
	
	Ответ = ОтправитьАсинхронныйЗапрос(НастройкаИнтеграции, ПараметрыОтправки, Ошибки);
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучателиСервиса = ПолучитьРезультатАсинхроннойОперации(Ответ);
	
	Для каждого ДанныеПолучателяСервиса Из ПолучателиСервиса Цикл
		ДанныеПолучателя = ДанныеАдреснойКниги.Получатели.Добавить();
		ДанныеПолучателя.Email = ДанныеПолучателяСервиса.Email;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВнешниеURLРассылки(НастройкаИнтеграции, ДанныеРассылки) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеРассылки.Идентификатор) Тогда
		ШаблонURL = "https://cp.unisender.com/ru/v5/campaigns/%1";
		ДанныеРассылки.ВнешниеСсылки.СтраницаСтатистикиРассылки = СтрШаблон(ШаблонURL, ДанныеРассылки.Идентификатор);
		ДанныеРассылки.ВнешниеСсылки.СтраницаОписанияРассылки = СтрШаблон(ШаблонURL, ДанныеРассылки.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСостояниеРассылки(НастройкаИнтеграции, ДанныеРассылки, Ошибки) Экспорт
	Отказ = Ложь;
	
	ПолучитьСсылкуНаПисьмо(НастройкаИнтеграции, ДанныеРассылки, Ошибки);
	ПолучитьСостояниеРассылкиПоПолучателям(НастройкаИнтеграции, ДанныеРассылки, Ошибки);
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "getCampaignStatus";
	ПараметрыОтправки.ПараметрыURL.Вставить("campaign_id", Число(ДанныеРассылки.Идентификатор));
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРассылки.Состояние = ОпределитьСостояниеРассылки(Ответ.ПараметрыТела.result.status);
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "getCampaignCommonStats";
	ПараметрыОтправки.ПараметрыURL.Вставить("campaign_id", Число(ДанныеРассылки.Идентификатор));
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРассылки.Статистика.Всего                 = Ответ.ПараметрыТела.result.total;
	ДанныеРассылки.Статистика.Отправлено            = Ответ.ПараметрыТела.result.sent;
	ДанныеРассылки.Статистика.Открыто               = Ответ.ПараметрыТела.result.read_unique;
	ДанныеРассылки.Статистика.ПереходовПоСсылке     = Ответ.ПараметрыТела.result.clicked_unique;
	ДанныеРассылки.Статистика.ОтписокПослеПрочтения = Ответ.ПараметрыТела.result.unsubscribed;
	
	ПосчитатьОбщуюСтатистикуПоСтатусамПисем(ДанныеРассылки);
	ПересчитатьЗначенияОбщейСтатистики(ДанныеРассылки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанныхРассылки

Процедура ПересчитатьЗначенияОбщейСтатистики(ДанныеРассылки)
	
	ПрочитаноВсего = ДанныеРассылки.Статистика.Открыто;
	ДанныеРассылки.Статистика.Открыто = ДанныеРассылки.Статистика.Открыто
		- ДанныеРассылки.Статистика.ПереходовПоСсылке
		- ДанныеРассылки.Статистика.ОтписокПослеПрочтения;
	ДанныеРассылки.Статистика.НеПрочитано = ДанныеРассылки.Статистика.Доставлено - ПрочитаноВсего;
	
КонецПроцедуры

Процедура ПосчитатьОбщуюСтатистикуПоСтатусамПисем(ДанныеРассылки)
	
	ДанныеРассылки.Статистика.Доставлено   = 0;
	ДанныеРассылки.Статистика.Ошибок       = 0;
	ДанныеРассылки.Статистика.Исключено    = 0;
	ДанныеРассылки.Статистика.НеОтправлено = 0;
	
	Для каждого Получатель Из ДанныеРассылки.Получатели Цикл
		КодСостояния = Получатель.КодСостояния;
		
		Если ЭтоКодПисьмоДоставлено(КодСостояния) Тогда
			ДанныеРассылки.Статистика.Доставлено = ДанныеРассылки.Статистика.Доставлено + 1;
		ИначеЕсли КодСостояния = МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка Тогда
			ДанныеРассылки.Статистика.Ошибок = ДанныеРассылки.Статистика.Ошибок + 1;
		ИначеЕсли КодСостояния = МассовыеРассылкиИнтеграция.КодыСостояний().ИсключениеИзРассылки Тогда
			ДанныеРассылки.Статистика.Исключено = ДанныеРассылки.Статистика.Исключено + 1;
		ИначеЕсли КодСостояния = МассовыеРассылкиИнтеграция.КодыСостояний().НеОтправлено Тогда
			ДанныеРассылки.Статистика.НеОтправлено = ДанныеРассылки.Статистика.НеОтправлено + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСсылкуНаПисьмо(НастройкаИнтеграции, ДанныеРассылки, Ошибки)
	Отказ = Ложь;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "getWebVersion";
	ПараметрыОтправки.ПараметрыURL.Вставить("campaign_id", Число(ДанныеРассылки.Идентификатор));
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРассылки.ВнешниеСсылки.ВебВерсияПисьма = Ответ.ПараметрыТела.result.web_letter_link;
	
КонецПроцедуры

Процедура ПолучитьСостояниеРассылкиПоПолучателям(НастройкаИнтеграции, ДанныеРассылки, Ошибки)
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "async/getCampaignDeliveryStats";
	ПараметрыОтправки.ПараметрыURL.Вставить("campaign_id", Число(ДанныеРассылки.Идентификатор));
	
	Ответ = ОтправитьАсинхронныйЗапрос(НастройкаИнтеграции, ПараметрыОтправки, Ошибки);
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СостоянияРассылки = ПолучитьРезультатАсинхроннойОперации(Ответ);
	
	Для каждого Получатель Из ДанныеРассылки.Получатели Цикл
		ОписаниеСостояния = Неопределено;
		
		СостояниеСервиса = СостоянияРассылки.Найти(Получатель.Email, "Email");
		Если СостояниеСервиса <> Неопределено Тогда
			ОписаниеСостояния = ОпределитьСостояниеАдресаРассылки(СостояниеСервиса.send_result);
		КонецЕсли;
		
		Если ОписаниеСостояния <> Неопределено Тогда
			КодСостояния = ОписаниеСостояния.КодСостояния;
			Состояние    = ОписаниеСостояния.Представление;
		Иначе
			КодСостояния = МассовыеРассылкиИнтеграция.КодыСостояний().ИсключениеИзРассылки;
			Состояние    = МассовыеРассылкиИнтеграция.Словарь().EmailНеВключенВРассылку;
		КонецЕсли;
		
		Получатель.Состояние = Состояние;
		Получатель.КодСостояния = КодСостояния;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ОбработатьОшибку(Ответ, Ошибки, Отказ)
	
	Если ТипЗнч(Ответ.ПараметрыТела) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	КодОшибки = Неопределено;
	РасшифровкаОшибки = Неопределено;
	
	Ответ.ПараметрыТела.Свойство("code", КодОшибки);
	Ответ.ПараметрыТела.Свойство("error", РасшифровкаОшибки);
	
	Если КодОшибки = Неопределено И РасшифровкаОшибки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = СообщениеОбОшибке(КодОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) И РасшифровкаОшибки <> Неопределено Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + РасшифровкаОшибки;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
	ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	Отказ = Истина;
	
КонецПроцедуры

Функция ИмяСобытияЖР()
	
	ИмяСобытияЖР = НСтр("ru='UniSender'", ОбщегоНазначения.КодОсновногоЯзыка());
	Возврат МассовыеРассылкиИнтеграция.ИмяСобытияЖР() + "." + ИмяСобытияЖР;
	
КонецФункции

Функция ЧислоВСтроку(Число)
	
	Возврат ОтправкаЗапросов.ЧислоСтрокойБезФормата(Число);
	
КонецФункции

Функция ОсновнойUrlApi()
	
	Возврат "https://api.unisender.com/ru/api/";
	
КонецФункции

Функция ДатаДляURL(Дата)
	
	Возврат Формат(Дата, "ДФ='гггг-ММ-дд ЧЧ:мм'");
	
КонецФункции

Процедура ПодписатьЗапрос(НастройкиИнтеграции, ПараметрыОтправки)
	
	ПараметрыОтправки.ПараметрыURL.Вставить("format", "json");
	ПараметрыОтправки.ПараметрыURL.Вставить("api_key", НастройкиИнтеграции.КлючAPI);
	
КонецПроцедуры

Функция ПараметрыОтправкиЗапроса(НастройкаИнтеграции)
	
	ПараметрыОтправки = ОтправкаЗапросов.НовыйПараметрыОтправки();
	ПараметрыОтправки.Сервер = ОсновнойUrlApi();
	ПараметрыОтправки.ИмяСобытияЖР = ИмяСобытияЖР();
	ПодписатьЗапрос(НастройкаИнтеграции, ПараметрыОтправки);
	
	Возврат ПараметрыОтправки;
	
КонецФункции

Функция ОтправитьАсинхронныйЗапрос(НастройкаИнтеграции, ПараметрыОтправки, Ошибки)
	Отказ = Ложь;
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаданиеВыполнено = Ложь;
	ИдентификаторЗадания = Ответ.ПараметрыТела.result.task_uuid;
	
	Пока Не ЗаданиеВыполнено Цикл
		ОтправкаЗапросов.Подождать(5);
		
		ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
		ПараметрыОтправки.АдресРесурса = "async/getTaskResult";
		ПараметрыОтправки.ПараметрыURL.Вставить("task_uuid", ИдентификаторЗадания);
		
		Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
		ОбработатьОшибку(Ответ, Ошибки, Отказ);
		
		Если Отказ Тогда
			Отказ = Ложь;
			Продолжить;
		КонецЕсли;
		
		ЗаданиеВыполнено = НРег(Ответ.ПараметрыТела.result.status) = "completed";
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьРезультатАсинхроннойОперации(Ответ)
	
	СсылкаНаФайл = Ответ.ПараметрыТела.result.file_to_download;
	Файл = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(СсылкаНаФайл);
	
	Возврат ЗагрузитьCSVФайлВТаблицу(ПолучитьИзВременногоХранилища(Файл.Путь));
	
КонецФункции

Функция ЭтотСервис()
	
	Возврат Перечисления.СервисыМассовыхРассылок.UniSender;
	
КонецФункции

Функция ЗагрузитьCSVФайлВТаблицу(ДвоичныеДанныеФайла)
	
	Поток = ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения();
	
	ЧтениеТекста = Новый ЧтениеТекста(Поток, КодировкаТекста.UTF8);
	
	Строка = ЧтениеТекста.ПрочитатьСтроку();
	
	Разделитель = ",";
	
	КолонкиШапки = СтрРазделить(Строка, Разделитель, Ложь);
	НовыйТаблица = Новый ТаблицаЗначений;
	ПозицияКолонкиВФайле = Новый Соответствие();
	
	Позиция = 1;
	Для каждого Колонка Из КолонкиШапки Цикл
		НоваяКолонка = НовыйТаблица.Колонки.Добавить();
		НоваяКолонка.Имя = Колонка;
		НоваяКолонка.Заголовок = Колонка;
		ПозицияКолонкиВФайле.Вставить(Позиция, НоваяКолонка.Имя);
		Позиция = Позиция + 1;
	КонецЦикла;
	
	Если НовыйТаблица.Колонки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Строка = ЧтениеТекста.ПрочитатьСтроку();
	Пока Строка <> Неопределено Цикл
		НоваяСтрока = НовыйТаблица.Добавить();
		Позиция = СтрНайти(Строка, Разделитель);
		Индекс = 0;
		Пока Позиция > 0 Цикл
			Если НовыйТаблица.Колонки.Количество() < Индекс + 1 Тогда
				Прервать;
			КонецЕсли;
			ИмяКолонки = ПозицияКолонкиВФайле.Получить(Индекс + 1);
			Если ИмяКолонки <> Неопределено Тогда
				НоваяСтрока[ИмяКолонки] = Лев(Строка, Позиция - 1);
			КонецЕсли;
			Строка = Сред(Строка, Позиция + 1);
			Позиция = СтрНайти(Строка, Разделитель);
			Индекс = Индекс + 1;
		КонецЦикла;
		Если НовыйТаблица.Колонки.Количество() = Индекс + 1  Тогда
			НоваяСтрока[Индекс] = Строка;
		КонецЕсли;
		
		Строка = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	
	Возврат НовыйТаблица;
	
КонецФункции

Процедура НайтиСоздатьПользовательскиеПоляСервиса(НастройкаИнтеграции, Ошибки)
	Отказ = Ложь;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "getFields";
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоляСервиса = Новый Массив;
	Для каждого ОписаниеПоляСервиса Из Ответ.ПараметрыТела.result Цикл
		ПоляСервиса.Добавить(ОписаниеПоляСервиса.name);
	КонецЦикла;
	
	ПользовательскиеПоля = МассовыеРассылкиИнтеграция.ПользовательскиеПоляАдреснойКниги();
	ПоляДляСоздания = Новый Массив;
	Для каждого ОписаниеПоля Из ПользовательскиеПоля Цикл
		Если ПоляСервиса.Найти(ОписаниеПоля.Имя) = Неопределено Тогда
			ПоляДляСоздания.Добавить(ОписаниеПоля);
		КонецЕсли;
	КонецЦикла;
	
	Если ПоляДляСоздания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ОписаниеПоля Из ПоляДляСоздания Цикл
		ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
		ПараметрыОтправки.АдресРесурса = "createField";
		ПараметрыОтправки.ПараметрыURL.Вставить("name", ОписаниеПоля.Имя);
		ПараметрыОтправки.ПараметрыURL.Вставить("type", "string");
		ПараметрыОтправки.ПараметрыURL.Вставить("public_name", ОписаниеПоля.Представление);
		Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
		ОбработатьОшибку(Ответ, Ошибки, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйОписаниеКодов()
	
	Возврат Новый Массив;
	
КонецФункции

Процедура ДобавитьОписаниеКода(ОписаниеКодов, Код, КодСостояния, Представление)
	
	НовыйКод = Новый Структура;
	НовыйКод.Вставить("Код", Код);
	НовыйКод.Вставить("КодСостояния", КодСостояния);
	НовыйКод.Вставить("Представление", Представление);
	ОписаниеКодов.Добавить(НовыйКод);
	
КонецПроцедуры

Функция ПолучитьОписаниеКода(ОписаниеКодов, Знач Код)
	
	Для каждого ОписаниеКода Из ОписаниеКодов Цикл
		Если ОписаниеКода.Код = Код Тогда
			Возврат ОписаниеКода;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция СообщениеОбОшибке(КодОшибки)
	
	ТекстНеизвестнаяОшибка = НСтр("ru='Неизвестная ошибка'");
	
	Если КодОшибки = Неопределено Тогда
		Возврат ТекстНеизвестнаяОшибка;
	КонецЕсли;
	
	КодыОшибок = Новый Соответствие;
	КодыОшибок.Вставить("unspecified",                         ТекстНеизвестнаяОшибка);
	КодыОшибок.Вставить("invalid_api_key",                     НСтр("ru='Неправильный ключ доступа к API'"));
	КодыОшибок.Вставить("access_denied",                       НСтр("ru='Доступ запрещен'"));
	КодыОшибок.Вставить("unknown_method",                      НСтр("ru='Неправильное имя метода'"));
	КодыОшибок.Вставить("invalid_arg",                         НСтр("ru='Неправильное значение одного из аргументов метода'"));
	КодыОшибок.Вставить("not_enough_money",                    НСтр("ru='Не хватает денег на счету для выполнения метода'"));
	КодыОшибок.Вставить("retry_later",                         НСтр("ru='Временный сбой, повторите запрос позднее'"));
	КодыОшибок.Вставить("api_call_limit_exceeded_for_api_key", НСтр("ru='Сработало ограничение по вызову методов API'"));
	КодыОшибок.Вставить("api_call_limit_exceeded_for_ip",      НСтр("ru='Сработало ограничение по вызову методов API'"));
	
	ТекстОшибки = КодыОшибок.Получить(КодОшибки);
	Если ТекстОшибки <> Неопределено Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Возврат ТекстНеизвестнаяОшибка;
	
КонецФункции

Функция ОпределитьСостояниеРассылки(КодСостояния)
	
	СостоянияРассылки = Новый Соответствие;
	СостоянияРассылки.Вставить("waits_censor",   НСтр("ru='Ожидает проверки'"));
	СостоянияРассылки.Вставить("censor_hold",    НСтр("ru='Ожидает проверки'"));
	СостоянияРассылки.Вставить("declined",       НСтр("ru='Отклонена администратором'"));
	СостоянияРассылки.Вставить("waits_schedule", НСтр("ru='Ожидает постановку в очередь рассылки'"));
	СостоянияРассылки.Вставить("scheduled",      НСтр("ru='Запланирована к рассылке'"));
	СостоянияРассылки.Вставить("in_progress",    НСтр("ru='Отправляется'"));
	СостоянияРассылки.Вставить("analysed",       НСтр("ru='Все сообщения отправлены, идет анализ результатов'"));
	СостоянияРассылки.Вставить("completed",      НСтр("ru='Все сообщения отправлены'"));
	СостоянияРассылки.Вставить("stopped",        НСтр("ru='Рассылка приостановлена'"));
	СостоянияРассылки.Вставить("canceled",       НСтр("ru='Рассылка отменена'"));
	
	Возврат СостоянияРассылки.Получить(КодСостояния);
	
КонецФункции

Функция ОпределитьСостояниеАдресаРассылки(Знач КодСостояния)
	
	Коды = НовыйОписаниеКодов();
	ДобавитьОписаниеКода(Коды, "not_sent",                      МассовыеРассылкиИнтеграция.КодыСостояний().НеОтправлено,                 МассовыеРассылкиИнтеграция.Словарь().СообщениеЕщеНеОтправлено);
	ДобавитьОписаниеКода(Коды, "err_will_retry",                МассовыеРассылкиИнтеграция.КодыСостояний().НеОтправлено,                 МассовыеРассылкиИнтеграция.Словарь().ДоставкаНеУдаласьПовторнаяОтправка);
	ДобавитьОписаниеКода(Коды, "err_resend",                    МассовыеРассылкиИнтеграция.КодыСостояний().НеОтправлено,                 МассовыеРассылкиИнтеграция.Словарь().ДоставкаНеУдаласьПовторнаяОтправка);
	ДобавитьОписаниеКода(Коды, "ok_sent",                       МассовыеРассылкиИнтеграция.КодыСостояний().Отправлено,                   МассовыеРассылкиИнтеграция.Словарь().СообщениеОтправленоСтатусНеизвестен);
	ДобавитьОписаниеКода(Коды, "ok_delivered",                  МассовыеРассылкиИнтеграция.КодыСостояний().ДоставленоНеПрочитано,        МассовыеРассылкиИнтеграция.Словарь().СообщениеДоставленоНеПрочитано);
	ДобавитьОписаниеКода(Коды, "ok_read",                       МассовыеРассылкиИнтеграция.КодыСостояний().ДоставленоПрочитано,          МассовыеРассылкиИнтеграция.Словарь().СообщениеДоставленоПрочитано);
	ДобавитьОписаниеКода(Коды, "ok_link_visited",               МассовыеРассылкиИнтеграция.КодыСостояний().ДоставленоПереходПоСсылке,    МассовыеРассылкиИнтеграция.Словарь().СообщениеДоставленоПереходПоСсылке);
	ДобавитьОписаниеКода(Коды, "ok_unsubscribed",               МассовыеРассылкиИнтеграция.КодыСостояний().ДоставленоПрочитаноОтписался, МассовыеРассылкиИнтеграция.Словарь().СообщениеДоставленоПрочитаноОтписался);
	ДобавитьОписаниеКода(Коды, "err_unsubscribed",              МассовыеРассылкиИнтеграция.КодыСостояний().ИсключениеИзРассылки,         МассовыеРассылкиИнтеграция.Словарь().СообщениеНеОтправлялосьПолучательОтписан);
	ДобавитьОписаниеКода(Коды, "err_will_retry",                МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().ДоставкаНеУдаласьПовторнаяОтправка);
	ДобавитьОписаниеКода(Коды, "err_giveup",                    МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().ДоставкаНеУдалась);
	ДобавитьОписаниеКода(Коды, "err_delivery_failed",           МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().ДоставкаНеУдалась);
	ДобавитьОписаниеКода(Коды, "err_user_unknown",              МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().АдресНеСуществует);
	ДобавитьОписаниеКода(Коды, "err_mailbox_discarded",         МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().АдресНеСуществует);
	ДобавитьОписаниеКода(Коды, "err_user_inactive",             МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().АдресНедоступен);
	ДобавитьОписаниеКода(Коды, "skip_dup_unreachable",          МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().АдресНедоступен);
	ДобавитьОписаниеКода(Коды, "err_skip_letter",               МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().АдресНедоступен);
	ДобавитьОписаниеКода(Коды, "err_unreachable",               МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().АдресНедоступен);
	ДобавитьОписаниеКода(Коды, "skip_dup_temp_unreachable",     МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().АдресВременноНедоступен);
	ДобавитьОписаниеКода(Коды, "err_not_available",             МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().АдресВременноНедоступен);
	ДобавитьОписаниеКода(Коды, "err_dest_invalid",              МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().АдресНекорректный);
	ДобавитьОписаниеКода(Коды, "err_mailbox_full",              МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().ПочтовыйЯщикПолучателяПереполнен);
	ДобавитьОписаниеКода(Коды, "err_no_dns",                    МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().ДоменНеСуществует);
	ДобавитьОписаниеКода(Коды, "err_no_smtp",                   МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().ДоменНеСуществует);
	ДобавитьОписаниеКода(Коды, "err_domain_inactive",           МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().ДоменНеСуществует);
	ДобавитьОписаниеКода(Коды, "err_destination_misconfigured", МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().ДоменНеСуществует);
	ДобавитьОписаниеКода(Коды, "ok_fbl",                        МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().СообщениеДоставленоПомеченоСпамПолучателем);
	ДобавитьОписаниеКода(Коды, "err_spam_may_retry",            МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().СообщениеОтклоненоСерверомКакСпам);
	ДобавитьОписаниеКода(Коды, "ok_spam_folder",                МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().СообщениеОтклоненоСерверомКакСпам);
	ДобавитьОписаниеКода(Коды, "err_spam_rejected",             МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().СообщениеОтклоненоСерверомКакСпам);
	ДобавитьОписаниеКода(Коды, "skip_dup_mailbox_full",         МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, МассовыеРассылкиИнтеграция.Словарь().ПочтовыйЯщикПолучателяПереполнен);
	ДобавитьОписаниеКода(Коды, "err_blacklisted",               МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, НСтр("ru='Сообщение отклонено, будет отправлено повторно'"));
	ДобавитьОписаниеКода(Коды, "err_internal",                  МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, НСтр("ru='Внутренний сбой. Необходима переотправка письма'"));
	ДобавитьОписаниеКода(Коды, "err_src_invalid",               МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, НСтр("ru='Некорректный email отправителя'"));
	ДобавитьОписаниеКода(Коды, "err_too_large",                 МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, НСтр("ru='Письмо превышает допустимый размер.'"));
	ДобавитьОписаниеКода(Коды, "err_lost",                      МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, НСтр("ru='Нарушено содержимое письма'"));
	ДобавитьОписаниеКода(Коды, "err_spam_removed",              МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, НСтр("ru='Рассылка помечена как спам'"));
	ДобавитьОписаниеКода(Коды, "err_spam_skipped",              МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, НСтр("ru='Рассылка помечена как спам'"));
	ДобавитьОписаниеКода(Коды, "err_not_allowed",               МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, НСтр("ru='Отправка отменена администрацией'"));
	ДобавитьОписаниеКода(Коды, "err_over_quota",                МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, НСтр("ru='Отправка отменена из-за нехватки средств'"));
	
	Возврат ПолучитьОписаниеКода(Коды, КодСостояния);
	
КонецФункции

Функция ЭтоКодПисьмоДоставлено(КодСостояния)
	
	Возврат КодСостояния = МассовыеРассылкиИнтеграция.КодыСостояний().Доставлено
		Или КодСостояния = МассовыеРассылкиИнтеграция.КодыСостояний().ДоставленоНеПрочитано
		Или КодСостояния = МассовыеРассылкиИнтеграция.КодыСостояний().ДоставленоПрочитано
		Или КодСостояния = МассовыеРассылкиИнтеграция.КодыСостояний().ДоставленоПереходПоСсылке
		Или КодСостояния = МассовыеРассылкиИнтеграция.КодыСостояний().ДоставленоПрочитаноОтписался;
	
КонецФункции

#КонецОбласти
