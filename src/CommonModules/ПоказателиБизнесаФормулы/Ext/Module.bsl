////////////////////////////////////////////////////////////////////////////////
// Подсистема "Развитие бизнеса"
//
// Процедуры и функции для работы с формулами показателей
////////////////////////////////////////////////////////////////////////////////


#Область ПрограммныйИнтерфейс

Процедура РасчетДанныхПоФормуле(Знач ФормулаСтрокой, СтруктураОперандов, РасчетныеДанные, ОкруглятьВБольшуюСторону = Неопределено, ПравилоОкругления = Неопределено) Экспорт
	
	Если РасчетныеДанные = Неопределено Тогда
		РасчетныеДанные = СоздатьСтруктуруРасчетныхДанных();
	КонецЕсли;
	
	Если СтруктураОперандов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ФормулаСтрокой, "#ЕСЛИ") > 0 Тогда
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, "#ЕСЛИ",		"?(");
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, "#ТОГДА",		",");
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, "#ИНАЧЕ",		",");
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, "#КОНЕЦЕСЛИ",	")");
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, Символы.ПС,	"");
	КонецЕсли;
	
	Для каждого Операнд Из СтруктураОперандов Цикл
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, Операнд.Ключ, Операнд.Значение);
	КонецЦикла;
	
	Попытка
		
		РассчитаннаяСумма = ОбщегоНазначения.ВычислитьВБезопасномРежиме(ФормулаСтрокой);
		
		Если ЗначениеЗаполнено(РассчитаннаяСумма)
			И ЗначениеЗаполнено(ОкруглятьВБольшуюСторону)
			И ЗначениеЗаполнено(ПравилоОкругления) Тогда
			
			РасчетныеДанные.Сумма = ОкруглитьЧислоПоПравилу(РассчитаннаяСумма, ОкруглятьВБольшуюСторону, ПравилоОкругления);
			
		Иначе
			РасчетныеДанные.Сумма = РассчитаннаяСумма;
		КонецЕсли;
		
	Исключение
		
		РасчетныеДанные.ОшибкаРасчета	= Истина;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьОперандВСтруктуру(СоответствиеОперандов, Операнд, Знач Значение) Экспорт
	
	Если ТипЗнч(СоответствиеОперандов) <> Тип("Соответствие") Тогда
		
		СоответствиеОперандов = Новый Соответствие;
		
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = Формат(Значение, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=");
	КонецЕсли;
	
	СоответствиеОперандов.Вставить(Операнд, Значение);
	
КонецПроцедуры

Функция НайтиПоказательПоИдентификатору(Идентификатор, ИсключаяСсылку = Неопределено) Экспорт
	
	Результат = Новый Структура("ИдентификаторЗанят,Показатель,ТипПоказателя", Ложь, Неопределено, Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоказателиБизнеса.Ссылка КАК Показатель,
	|	ПоказателиБизнеса.ТипПоказателя КАК ТипПоказателя
	|ИЗ
	|	Справочник.ПоказателиБизнеса КАК ПоказателиБизнеса
	|ГДЕ
	|	ПоказателиБизнеса.ИдентификаторПоказателя = &Идентификатор");
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ИсключаяСсылку = Выборка.Показатель Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.ИдентификаторЗанят	= Истина;
		Результат.Показатель 			= Выборка.Показатель;
		Результат.ТипПоказателя 		= Выборка.ТипПоказателя;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОкруглитьЧислоПоПравилу(Число, ОкруглятьВБольшуюСторону, ПравилоОкругления) Экспорт
	Перем Результат; // Возвращаемый результат.
	
	Если НЕ ЗначениеЗаполнено(Число) Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Если ОкруглятьВБольшуюСторону <> Истина
		И ОкруглятьВБольшуюСторону <> Ложь Тогда
		
		ОкруглятьВБольшуюСторону = Ложь;
		
	КонецЕсли;
	
	ПорядокОкругления0_01 = Перечисления.ПорядкиОкругления.Окр0_01;
	
	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	ПорядокОкругления	= ?(ЗначениеЗаполнено(ПравилоОкругления), ПравилоОкругления, ПорядокОкругления0_01);
	Порядок 			= Число(Строка(ПорядокОкругления));
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
	
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат	= Число;
	Иначе
		Если ОкруглятьВБольшуюСторону = Истина Тогда
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал, 0, РежимОкругления.Окр15как20);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОкруглитьЦенуПоПравилам()

Процедура ПарсингФормулыНаИдентификаторыОперандов(Формула, Операнды) Экспорт
	
	ТекстФормулы = СокрЛП(Формула);
	
	Если ПустаяСтрока(Формула) Тогда
		Возврат;
	КонецЕсли;
	
	СимволНачалоОперанда = СтрокаНачалаОперанда();
	СимволКонецОперанда	 = СтрокаКонцаОперанда();
	
	КоличествоОперандов = СтрЧислоВхождений(ТекстФормулы, СимволНачалоОперанда);
	
	Пока КоличествоОперандов > 0 Цикл
		
		НачалоОперанда	= Найти(ТекстФормулы, СимволНачалоОперанда);
		КонецОперанда	= Найти(ТекстФормулы, СимволКонецОперанда);
		
		Операнд 		= Сред(ТекстФормулы, НачалоОперанда, КонецОперанда - НачалоОперанда + 1);
		Идентификатор	= СтрЗаменить(СтрЗаменить(Операнд, СимволНачалоОперанда, ""), СимволКонецОперанда, "");
		Операнды.Добавить(Идентификатор);
		
		КоличествоОперандов = КоличествоОперандов - СтрЧислоВхождений(ТекстФормулы, Операнд);
		ТекстФормулы 		= СтрЗаменить(ТекстФормулы, Операнд, "");
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуОперандовФормулы(ХранилищеФормул) Экспорт
	
	Операнды = Новый ТаблицаЗначений;
	Операнды.Колонки.Добавить("Операнд");
	Операнды.Колонки.Добавить("Показатель");
	Операнды.Колонки.Добавить("ТипПоказателя");
	
	Операнды.Индексы.Добавить("Операнд");
	
	Если ТипЗнч(ХранилищеФормул) = Тип("Строка") Тогда
		
		ПарсингФормулыНаОперанды(ХранилищеФормул, Операнды);
		
	ИначеЕсли ТипЗнч(ХранилищеФормул) = Тип("Массив") Тогда
		
		Для каждого ЭлементМассива Из ХранилищеФормул Цикл
			
			ПарсингФормулыНаОперанды(ЭлементМассива, Операнды);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Операнды;
	
КонецФункции

Процедура ПроверитьФормулу(Ошибки, Формула) Экспорт
	
	Перем СоответствиеОперандов, РасчетныеДанные;
	
	ЗначениеВсехОперандов = 10; // При проверке формулы значения всех операндов принимаем равным 10
	
	ТекстФормулы = СокрЛП(Формула);
	
	Если СтрЧислоВхождений(ТекстФормулы, СтрокаНачалаОперанда()) <> СтрЧислоВхождений(ТекстФормулы, СтрокаКонцаОперанда()) Тогда
		
		ТекстОшибки = НСтр("ru ='Количество открытых операндов не равно количеству закрытых.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
		
	КонецЕсли;
	
	Если СтрЧислоВхождений(ТекстФормулы, "(") <> СтрЧислоВхождений(ТекстФормулы, ")") Тогда
		
		ТекстОшибки = НСтр("ru ='Количество открытых скобок не равно количеству закрытых.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
		
	КонецЕсли;
	
	ТаблицаОперандов = ПолучитьТаблицуОперандовФормулы(Формула);
	
	Для каждого Строка Из ТаблицаОперандов Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Показатель) Тогда
			
			ТекстОшибки = НСтр("ru ='Не распознан операнд %1.
										|Проверьте правильность написания формулы.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Операнд);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
			
		КонецЕсли;
		
		ДобавитьОперандВСтруктуру(СоответствиеОперандов, Строка.Операнд, ЗначениеВсехОперандов);
		
	КонецЦикла;
	
	РасчетДанныхПоФормуле(ТекстФормулы, СоответствиеОперандов, РасчетныеДанные);
		
	Если РасчетныеДанные.ОшибкаРасчета Тогда
		
		ТекстОшибки = НСтр("ru ='При расчете возникли ошибки. Проверьте правильность написания формулы.
			|Подробное описание:'") + Символы.ПС + РасчетныеДанные.ТекстОшибки;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонстантныеЗначения

Функция СтрокаКонцаОперанда() Экспорт
	
	Возврат "]";
	
КонецФункции

Функция СтрокаНачалаОперанда() Экспорт
	
	Возврат "[";
	
КонецФункции

#КонецОбласти

#Область Формулы

Функция СоздатьСтруктуруРасчетныхДанных()
	
	Возврат Новый Структура("Сумма, ОшибкаРасчета, ТекстОшибки", 0, Ложь, "")
	
КонецФункции // ()

Процедура ПарсингФормулыНаОперанды(Формула, Операнды)
	
	ТекстФормулы = СокрЛП(Формула);
	
	Если ПустаяСтрока(Формула) Тогда
		Возврат;
	КонецЕсли;
	
	СимволНачалоОперанда = СтрокаНачалаОперанда();
	СимволКонецОперанда	 = СтрокаКонцаОперанда();
	
	КоличествоОперандов = СтрЧислоВхождений(ТекстФормулы, СимволНачалоОперанда);
	
	Пока КоличествоОперандов > 0 Цикл
		
		НачалоОперанда	= Найти(ТекстФормулы, СимволНачалоОперанда);
		КонецОперанда	= Найти(ТекстФормулы, СимволКонецОперанда);
		
		Операнд 		= Сред(ТекстФормулы, НачалоОперанда, КонецОперанда - НачалоОперанда + 1);
		Идентификатор	= СтрЗаменить(СтрЗаменить(Операнд, СимволНачалоОперанда, ""), СимволКонецОперанда, "");
		Результат		= НайтиПоказательПоИдентификатору(Идентификатор);
		
		Если Операнды.Найти(Операнд, "Операнд") <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НовыйОперанд = Операнды.Добавить();
		НовыйОперанд.Операнд			= Операнд;
		НовыйОперанд.Показатель			= Результат.Показатель;
		НовыйОперанд.ТипПоказателя 		= Результат.ТипПоказателя;
		
		КоличествоОперандов = КоличествоОперандов - СтрЧислоВхождений(ТекстФормулы, Операнд);
		ТекстФормулы 		= СтрЗаменить(ТекстФормулы, Операнд, "");
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


