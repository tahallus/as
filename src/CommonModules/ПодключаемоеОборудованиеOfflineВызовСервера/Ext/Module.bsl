#Область Выгрузка

Процедура ЗаполнитьНастройкиККМ(ОфлайнОборудование, НастройкиОборудования) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилоОбмена.СтруктурнаяЕдиница КАК Склад,
	|	ПравилоОбмена.СтруктурнаяЕдиница.Организация КАК Организация,
	|	ПравилоОбмена.СтруктурнаяЕдиница.Организация.Наименование КАК НаименованиеОрганизации,
	|	ПравилоОбмена.СтруктурнаяЕдиница.Наименование КАК НаименованиеРозничнойТочки,
	|	ПравилоОбмена.СтруктурнаяЕдиница.Организация.ИНН КАК ИНН,
	|	ПравилоОбмена.СтруктурнаяЕдиница.Организация.КПП КАК КПП
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилоОбмена
	|ГДЕ
	|	ПравилоОбмена.Ссылка = &ПравилоОбмена";
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ОфлайнОборудование.ПравилоОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		НастройкиОборудования.НаименованиеОрганизации = Выборка.НаименованиеОрганизации;
		НастройкиОборудования.НаименованиеМагазина = Выборка.НаименованиеРозничнойТочки;
		НастройкиОборудования.ИНН = Выборка.ИНН;
		НастройкиОборудования.КПП = Выборка.КПП;
		АдресМагазина = ПечатьДокументовУНФ.КонтактнаяИнформация(Выборка.Склад, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы"));
		НастройкиОборудования.АдресТочкиПродажи = АдресМагазина;
		
		ДатаСеанса = ТекущаяДатаСеанса();
		
		СистемаНалогообложенияККТ = РозничныеПродажиСервер.ПолучитьТипСистемыНалогообложенияККТ(
			Выборка.Организация,
			Выборка.Склад,
			ДатаСеанса,
			Неопределено
		);
		
		НастройкиОборудования.СистемыНалогообложения.Добавить(СистемаНалогообложенияККТ);
		
		//ЭлектроннаяПочтаОтправителяЧека
		СистемнаяУчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		Если ЗначениеЗаполнено(СистемнаяУчетнаяЗапись) Тогда
			НастройкиОборудования.ЭлектроннаяПочтаОтправителяЧека = СистемнаяУчетнаяЗапись.АдресЭлектроннойПочты;
		КонецЕсли;
		
	КонецЕсли;
	
	ВидОплатыККМ = МенеджерОфлайнОборудования.ПолучитьЗаписьВидЭлектроннойОплаты();
	
	ВидОплатыККМ.Код 						= "1";
	ВидОплатыККМ.Наименование 				= "Платежная карта";
	ВидОплатыККМ.ТипЭлектроннойОплаты 		= МенеджерОфлайнОборудования.ТипЭлектроннойОплатыПлатежнаяКарта();
	
	НастройкиОборудования.ВидыЭлектроннойОплаты.Добавить(ВидОплатыККМ);
	
КонецПроцедуры

Процедура ЗаполнитьПрайсЛистККМ(ОфлайнОборудование, ПрайсЛист, ПолнаяВыгрузка) Экспорт
	
	Параметры = ПолучитьПараметрыУстройства(ОфлайнОборудование);
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ПравилоОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ЧастичнаяВыгрузка", НЕ ПолнаяВыгрузка);
	
	Параметры.Вставить("КассаККМ",
		Справочники.КассыККМ.ПолучитьКассуККМПоЭкземпляруОборудования(ОфлайнОборудование)
	);
	
	ТоварыКВыгрузке = ПолучитьТоварыКВыгрузкеККМ(ОфлайнОборудование, Параметры);
	
	ЗаполнитьСтруктуруПрайсЛистаИзДанныхКВыгрузке(ПрайсЛист, ТоварыКВыгрузке, Параметры);
	
КонецПроцедуры

Процедура ЗаполнитьПрайсЛистККМПоШтрихкоду(ОфлайнОборудование, ПрайсЛист, Штрихкод) Экспорт
	
	Параметры = ПолучитьПараметрыУстройства(ОфлайнОборудование);
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ПравилоОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ЧастичнаяВыгрузка", Ложь);
	
	Параметры.Вставить("КассаККМ",
		Справочники.КассыККМ.ПолучитьКассуККМПоЭкземпляруОборудования(ОфлайнОборудование)
	);
	
	ТоварыКВыгрузке = ПолучитьТоварыКВыгрузкеККМ(ОфлайнОборудование, Параметры, Штрихкод);
	
	ЗаполнитьСтруктуруПрайсЛистаИзДанныхКВыгрузке(ПрайсЛист, ТоварыКВыгрузке, Параметры);
	
КонецПроцедуры

Процедура ЗаполнитьЗаказыККМ(ОфлайнОборудование, ЗаказыККМ) Экспорт
	
	Параметры = ПолучитьПараметрыУстройства(ОфлайнОборудование);
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяИзменения.Ссылка КАК Заказ,
	|	ЗаказПокупателяИзменения.Ссылка.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ЗарегистрированныеЗаказы
	|ИЗ
	|	Документ.ЗаказПокупателя.Изменения КАК ЗаказПокупателяИзменения
	|ГДЕ
	|	ЗаказПокупателяИзменения.Узел = &Узел
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарегистрированныеЗаказы.Заказ КАК Заказ,
	|	ЗарегистрированныеЗаказы.Заказ.Номер КАК Номер,
	|	ЗарегистрированныеЗаказы.Заказ.Дата КАК Дата,
	|	ЗарегистрированныеЗаказы.Заказ.Комментарий КАК Комментарий,
	|	ЗарегистрированныеЗаказы.Заказ.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗарегистрированныеЗаказы.Заказ.АдресДоставки КАК АдресДоставки,
	|	ЗарегистрированныеЗаказы.Заказ.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗарегистрированныеЗаказы.Заказ.ВариантЗавершения КАК ВариантЗавершения,
	|	ЗарегистрированныеЗаказы.Заказ.Проведен КАК Проведен,
	|	ВЫБОР
	|		КОГДА ЗарегистрированныеЗаказы.Контрагент ЕСТЬ NULL
	|			ТОГДА ЗарегистрированныеЗаказы.Заказ.Контрагент
	|		ИНАЧЕ ЗарегистрированныеЗаказы.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЗарегистрированныеЗаказы.Контрагент ЕСТЬ NULL
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ЗарегистрированныеЗаказы.Заказ.Контрагент)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЗарегистрированныеЗаказы.Контрагент)
	|	КОНЕЦ КАК КонтрагентПредставление,
	|	ЗарегистрированныеЗаказы.Заказ.ДисконтнаяКарта КАК ДисконтнаяКарта
	|ИЗ
	|	ЗарегистрированныеЗаказы КАК ЗарегистрированныеЗаказы
	|ГДЕ
	|	НЕ(ЗарегистрированныеЗаказы.Заказ.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
	|				И ЗарегистрированныеЗаказы.Заказ.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Ссылка КАК Заказ,
	|	ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.Характеристика КАК Характеристика,
	|	ЗаказПокупателяТовары.Количество КАК Количество,
	|	ЗаказПокупателяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяТовары.Цена КАК Цена,
	|	ЗаказПокупателяТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.Сумма КАК Сумма,
	|	ЗаказПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяТовары.Резерв КАК Резерв,
	|	КодыТоваровSKU.SKU КАК КодSKU
	|ИЗ
	|	ЗарегистрированныеЗаказы КАК ЗарегистрированныеЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|			ПО ЗаказПокупателяТовары.Номенклатура = КодыТоваровSKU.Номенклатура
	|				И ЗаказПокупателяТовары.Характеристика = КодыТоваровSKU.Характеристика
	|				И ЗаказПокупателяТовары.Партия = КодыТоваровSKU.Партия
	|				И (ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяТовары.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|						ТОГДА ЗаказПокупателяТовары.ЕдиницаИзмерения = КодыТоваровSKU.ЕдиницаИзмерения
	|					ИНАЧЕ КодыТоваровSKU.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|				КОНЕЦ)
	|		ПО ЗарегистрированныеЗаказы.Заказ = ЗаказПокупателяТовары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказ,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаСчетовИЗаказов.СчетНаОплату КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказов.Регистратор) = ТИП(Документ.ПоступлениеВКассу)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказов.Регистратор) = ТИП(Документ.ЧекККМ)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказов.Регистратор) = ТИП(Документ.ОтчетОРозничныхПродажах)
	|			ТОГДА ОплатаСчетовИЗаказов.СуммаАванса + ОплатаСчетовИЗаказов.СуммаОплаты
	|		КОГДА ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказов.Регистратор) = ТИП(Документ.РасходИзКассы)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказов.Регистратор) = ТИП(Документ.РасходИзКассы)
	|			ТОГДА -ОплатаСчетовИЗаказов.СуммаАванса - ОплатаСчетовИЗаказов.СуммаОплаты
	|	КОНЕЦ КАК СуммаНаличнойОплаты,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказов.Регистратор) = ТИП(Документ.ПоступлениеНаСчет)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказов.Регистратор) = ТИП(Документ.ОперацияПоПлатежнымКартам)
	|					И ОплатаСчетовИЗаказов.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя)
	|			ТОГДА ОплатаСчетовИЗаказов.СуммаАванса + ОплатаСчетовИЗаказов.СуммаОплаты
	|		КОГДА ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказов.Регистратор) = ТИП(Документ.РасходСоСчета)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказов.Регистратор) = ТИП(Документ.ОперацияПоПлатежнымКартам)
	|					И ОплатаСчетовИЗаказов.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю)
	|			ТОГДА -ОплатаСчетовИЗаказов.СуммаАванса - ОплатаСчетовИЗаказов.СуммаОплаты
	|	КОНЕЦ КАК СуммаЭлектроннойОплаты
	|ПОМЕСТИТЬ Предоплаты
	|ИЗ
	|	ЗарегистрированныеЗаказы КАК ЗарегистрированныеЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаСчетовИЗаказов КАК ОплатаСчетовИЗаказов
	|		ПО ЗарегистрированныеЗаказы.Заказ = ОплатаСчетовИЗаказов.СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Предоплаты.ЗаказПокупателя КАК Заказ,
	|	СУММА(ЕСТЬNULL(Предоплаты.СуммаЭлектроннойОплаты, 0)) КАК СуммаЭлектроннойОплаты,
	|	СУММА(ЕСТЬNULL(Предоплаты.СуммаНаличнойОплаты, 0)) КАК СуммаНаличнойОплаты
	|ИЗ
	|	Предоплаты КАК Предоплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	Предоплаты.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Узел", Параметры.УзелИнформационнойБазы);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Заказы
	РезультатЗаказы = РезультатЗапроса[1];
	ВыборкаЗаказы = РезультатЗаказы.Выбрать();
	
	// Товары заказов
	РезультатТовары = РезультатЗапроса[2];
	ТаблицаТовары = РезультатТовары.Выгрузить();
	
	// Предоплаты
	РезультатПредоплаты = РезультатЗапроса[4];
	ТаблицаПредоплаты = РезультатПредоплаты.Выгрузить();
	
	// структуры для поиска
	ПараметрыОтбораТоваров = Новый Структура;
	ПараметрыОтбораТоваров.Вставить("Заказ");
	
	ПараметрыОтбораПредоплаты = Новый Структура;
	ПараметрыОтбораПредоплаты.Вставить("Заказ");
	
	Пока ВыборкаЗаказы.Следующий() Цикл
		
		ЗаказККМ = МенеджерОфлайнОборудования.ПолучитьЗаписьЗаказа();
		
		// СсылкаЗаказа
		ЗаказККМ.СсылкаЗаказа = ВыборкаЗаказы.Заказ;
		
		// УникальныйИдентификатор
		ЗаказККМ.УникальныйИдентификатор = ВыборкаЗаказы.Заказ.УникальныйИдентификатор();
		
		// Комментарий
		ЗаказККМ.Комментарий = ВыборкаЗаказы.Комментарий;
		
		// НомерЗаказа
		ЗаказККМ.НомерЗаказа = ВыборкаЗаказы.Номер;
			
		// ДатаЗаказа
		ЗаказККМ.ДатаЗаказа = ВыборкаЗаказы.Дата;
			
		// ДатаДоставки
		ЗаказККМ.ДатаДоставки  = ВыборкаЗаказы.ДатаОтгрузки;
		
		// Статус
		Если ВыборкаЗаказы.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен
			И ВыборкаЗаказы.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
			
			ЗаказККМ.СтатусЗаказа = "Отменен"; // выполненные заказы не должны выгружаться, условие в запросе
			
		ИначеЕсли ВыборкаЗаказы.Проведен Тогда
			
			ЗаказККМ.СтатусЗаказа  = "Согласован";
			
		Иначе
			
			ЗаказККМ.СтатусЗаказа  = "НеСогласован";
			
		КонецЕсли;
		
		// ФИО
		ЗаказККМ.ФамилияКлиента = ВыборкаЗаказы.КонтрагентПредставление;
		
		// НомерТелефонаКлиента, АдресЭлектроннойПочты
		Если ЗначениеЗаполнено(ВыборкаЗаказы.Контрагент) Тогда
			ЗаказККМ.НомерТелефонаКлиента = ПолучитьТелефонИзКонтактнойИнформации(ВыборкаЗаказы.Контрагент);
			ЗаказККМ.EmailКлиента = ПолучитьАдресЭлектроннойПочтыИзКонтактнойИнформации(ВыборкаЗаказы.Контрагент);
		КонецЕсли;
		
		// Адрес доставки
		Если ЗначениеЗаполнено(ВыборкаЗаказы.АдресДоставки) Тогда
			ЗаказККМ.ГородДоставки = ВыборкаЗаказы.АдресДоставки;
		КонецЕсли;
		
		// Товары
		ПараметрыОтбораТоваров.Заказ = ВыборкаЗаказы.Заказ;
		НайденныеТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбораТоваров);
		
		Для Каждого ЗаписьТовары Из НайденныеТовары Цикл
			
			СтруктураЗаписиТовары = МенеджерОфлайнОборудования.ПолучитьЗаписьТовараЗаказа();
			
			СтруктураЗаписиТовары.Код 			= Формат(ЗаписьТовары.КодSKU, "ЧГ=0");
			СтруктураЗаписиТовары.Количество 	= ЗаписьТовары.Количество;
			СтруктураЗаписиТовары.Цена 			= ЗаписьТовары.Цена;
			СтруктураЗаписиТовары.Сумма 		= ЗаписьТовары.Сумма;
			
			СтруктураЗаписиТовары.УникальныйИдентификаторТовара = ЗаписьТовары.Номенклатура.УникальныйИдентификатор();
			
			Если ЗначениеЗаполнено(ЗаписьТовары.Характеристика) Тогда
				СтруктураЗаписиТовары.УникальныйИдентификаторХарактеристики = ЗаписьТовары.Характеристика.УникальныйИдентификатор();
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ЗаписьТовары.ЕдиницаИзмерения) Тогда
				СтруктураЗаписиТовары.УникальныйИдентификаторУпаковки = ЗаписьТовары.ЕдиницаИзмерения.УникальныйИдентификатор();
			КонецЕсли;
			
			ЗаказККМ.Товары.Добавить(СтруктураЗаписиТовары);
		КонецЦикла;
		
		// Оплаты
		ПараметрыОтбораПредоплаты.Заказ = ВыборкаЗаказы.Заказ;
		НайденныеПредоплаты = ТаблицаПредоплаты.НайтиСтроки(ПараметрыОтбораПредоплаты);
		
		Для каждого ЗаписьПредоплата Из НайденныеПредоплаты Цикл
			
			СтруктураЗаписиОплаты = МенеджерОфлайнОборудования.ПолучитьЗаписьОплатыЗаказа();
			
			СтруктураЗаписиОплаты.СуммаНаличнойОплаты    = ?(ЗаписьПредоплата.СуммаНаличнойОплаты > 0, ЗаписьПредоплата.СуммаНаличнойОплаты, 0);
			СтруктураЗаписиОплаты.СуммаЭлектроннойОплаты = ?(ЗаписьПредоплата.СуммаЭлектроннойОплаты > 0, ЗаписьПредоплата.СуммаЭлектроннойОплаты, 0);
			
			Если СтруктураЗаписиОплаты.СуммаНаличнойОплаты > 0 ИЛИ СтруктураЗаписиОплаты.СуммаЭлектроннойОплаты > 0 Тогда
				ЗаказККМ.Оплаты.Добавить(СтруктураЗаписиОплаты);
			КонецЕсли;
			
		КонецЦикла;

		
		ЗаказыККМ.Добавить(ЗаказККМ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьРегистрациюПрайсЛистаПослеВыгрузки(ОфлайнОборудование) Экспорт
	
	Параметры = ПолучитьПараметрыУстройства(ОфлайнОборудование);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелИнформационнойБазы, Метаданные.РегистрыСведений.КодыТоваровPLUНаОборудовании);
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелИнформационнойБазы, Метаданные.РегистрыСведений.КодыТоваровSKU);
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелИнформационнойБазы, Метаданные.РегистрыНакопления.Запасы);
		
		УзелОбъект = Параметры.УзелИнформационнойБазы.ПолучитьОбъект();
		УзелОбъект.ДатаВыгрузки      = ТекущаяДатаСеанса();
		УзелОбъект.ВыгрузкаВыполнена = Истина;
		УзелОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УдалитьРегистрациюЗаказовПослеВыгрузки(ОфлайнОборудование) Экспорт
	
	Параметры = ПолучитьПараметрыУстройства(ОфлайнОборудование);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелИнформационнойБазы, Метаданные.Документы.ЗаказПокупателя);
		
		УзелОбъект = Параметры.УзелИнформационнойБазы.ПолучитьОбъект();
		УзелОбъект.ДатаВыгрузки      = ТекущаяДатаСеанса();
		УзелОбъект.ВыгрузкаВыполнена = Истина;
		УзелОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Загрузка

Процедура ЗагрузитьОтчетыОПродажахИзККМ(ОфлайнОборудование, ДанныеОПродажах, Отказ, СообщениеОбОшибке) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСозданныхДокументов = Новый Массив;
	
	Параметры = ПолучитьПараметрыУстройства(ОфлайнОборудование);
	КассаККМ = Справочники.КассыККМ.ПолучитьКассуККМПоЭкземпляруОборудования(ОфлайнОборудование);
	Параметры.Вставить("КассаККМ", КассаККМ);
	Параметры.Вставить("ВалютаДенежныхСредств", КассаККМ.ВалютаДенежныхСредств);
	Параметры.Вставить("Организация", КассаККМ.Владелец);
	
	ТаблицаТоваров 				= ПустаяТаблицаТоваров();
	ТаблицаВозвратов 			= ПустаяТаблицаТоваров();
	ТаблицаШтрихкодовМарок	 	= ПустаяТаблицаШтрихкодовМаркированнойПродукции();
	ТаблицаОплат 				= ПустаяТаблицаОплат();
	ТаблицаРасчетыСКлиентами 	= ПустаяТаблицаРасчетыСКлиентами();
	
	Для каждого ОтчетОПродажах Из ДанныеОПродажах Цикл
		
		Если ОтчетОПродажах.СтатусСмены <> Перечисления.СтатусыКассовойСмены.Закрыта Тогда
			Продолжить;
		КонецЕсли;
		
		УникальныйИдентификаторОтчета = ?(ЗначениеЗаполнено(ОтчетОПродажах.УникальныйИдентификатор),
			ОтчетОПродажах.УникальныйИдентификатор, 
			Строка(Новый УникальныйИдентификатор)
		);
	
		ТаблицаТоваров.Очистить();
		ТаблицаВозвратов.Очистить();
		ТаблицаОплат.Очистить();
		ТаблицаШтрихкодовМарок.Очистить();
		ТаблицаРасчетыСКлиентами.Очистить();
		
		Для каждого ЧекККМ Из ОтчетОПродажах.Чеки Цикл
			
			Если ЧекККМ.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
				ЭтоЧекНаВозврат = Ложь;
				
			ИначеЕсли ЧекККМ.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
				ЭтоЧекНаВозврат = Истина;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			РасчетСКлиентом = Неопределено;
			
			Если ВРег(ЧекККМ.ТипСвязанногоДокументаККМ) = ВРег("Заказ")
				И ЗначениеЗаполнено(ЧекККМ.УникальныйИдентификаторСвязанногоДокументаККМ) Тогда
				
				СсылкаНаЗаказ = Документы.ЗаказПокупателя.ПолучитьСсылку(ЧекККМ.УникальныйИдентификаторСвязанногоДокументаККМ);
				Если НЕ СсылкаНаЗаказ.ПолучитьОбъект() = Неопределено Тогда
					ЗаказПокупателя = СсылкаНаЗаказ;
					РасчетСКлиентом = ТаблицаРасчетыСКлиентами.Добавить();
					РасчетСКлиентом.ЗаказПокупателя = ЗаказПокупателя;
				КонецЕсли;
			КонецЕсли;
			
			СуммаТоваров = 0;
			
			Для каждого СтрокаТЧ Из ЧекККМ.Товары Цикл
				
				Если НЕ (СтрокаТЧ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты
					ИЛИ СтрокаТЧ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
					ИЛИ СтрокаТЧ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой) Тогда
					
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаТоваров.Добавить();
				
				НоваяСтрока.Код 		= СтрокаТЧ.Код;
				НоваяСтрока.Количество 	= ?(ЭтоЧекНаВозврат, -СтрокаТЧ.Количество, СтрокаТЧ.Количество);
				НоваяСтрока.Сумма 		= ?(ЭтоЧекНаВозврат, -СтрокаТЧ.Сумма, СтрокаТЧ.Сумма);
				НоваяСтрока.Цена 		= СтрокаТЧ.Цена;
				НоваяСтрока.СтавкаНДС 	= СтрокаТЧ.СтавкаНДС;
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
					РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.КассаККМ, "Владелец.ВидСтавкиНДСПоУмолчанию");
					НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(РеквизитыОрганизации.ВладелецВидСтавкиНДСПоУмолчанию, ТекущаяДатаСеанса());
				КонецЕсли;
				НоваяСтрока.Заказ = ЗаказПокупателя;
				НоваяСтрока.УникальныйИдентификатор = ОтчетОПродажах.УникальныйИдентификатор;
				НоваяСтрока.Скидка = НоваяСтрока.Цена * НоваяСтрока.Количество - НоваяСтрока.Сумма;
				
				СуммаТоваров = СуммаТоваров + СтрокаТЧ.Сумма;
				
				Если НЕ ЭтоЧекНаВозврат Тогда
					Для Каждого Марка Из СтрокаТЧ.ШтрихкодыМаркированнойПродукции Цикл
						НоваяСтрокаШтрихкод = ТаблицаШтрихкодовМарок.Добавить();
						НоваяСтрокаШтрихкод.Код = НоваяСтрока.Код;
						НоваяСтрокаШтрихкод.Марка = Марка;
						НоваяСтрокаШтрихкод.УникальныйИдентификаторОтчета = УникальныйИдентификаторОтчета;
					КонецЦикла;
				КонецЕсли;
				
				Если ЭтоЧекНаВозврат Тогда
					
					НоваяСтрока = ТаблицаВозвратов.Добавить();
					
					НоваяСтрока.Код 		= СтрокаТЧ.Код;
					НоваяСтрока.Количество 	= СтрокаТЧ.Количество;
					НоваяСтрока.Сумма 		= СтрокаТЧ.Сумма;
					НоваяСтрока.Цена 		= СтрокаТЧ.Цена;
					НоваяСтрока.СтавкаНДС 	= СтрокаТЧ.СтавкаНДС;
					НоваяСтрока.Заказ = ЗаказПокупателя;
					
				КонецЕсли;
				
			КонецЦикла;
			
			СуммаОплаты = 0;
			
			Для каждого СтрокаТЧ Из ЧекККМ.Оплаты Цикл
				
				НоваяСтрока = ТаблицаОплат.Добавить();
				
				Если ЗначениеЗаполнено(СтрокаТЧ.КодВидаЭлектроннойОплаты) Тогда
					НоваяСтрока.КодВидаОплаты = СтрокаТЧ.КодВидаЭлектроннойОплаты;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТЧ.СуммаНаличнойОплаты) Тогда
					
					НоваяСтрока.Сумма = ?(ЭтоЧекНаВозврат, -СтрокаТЧ.СуммаНаличнойОплаты, СтрокаТЧ.СуммаНаличнойОплаты);
					НоваяСтрока.ТипОплаты = "Наличные";
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТЧ.СуммаЭлектроннойОплаты) Тогда
					
					НоваяСтрока.Сумма = ?(ЭтоЧекНаВозврат, -СтрокаТЧ.СуммаЭлектроннойОплаты, СтрокаТЧ.СуммаЭлектроннойОплаты);
					НоваяСтрока.ТипОплаты = "ПлатежнаяКарта";
					
				КонецЕсли;
				
				СуммаОплаты = СуммаОплаты + НоваяСтрока.Сумма;
				
			КонецЦикла;
			
			Если НЕ РасчетСКлиентом = Неопределено Тогда
				РасчетСКлиентом.Отгружено = СуммаТоваров;
				РасчетСКлиентом.Оплачено  = СуммаОплаты;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаТоваров.Свернуть("Код, Цена, Заказ, СтавкаНДС, УникальныйИдентификатор", "Количество, Сумма, Скидка");
		ТаблицаВозвратов.Свернуть("Код, Цена, Заказ, СтавкаНДС, УникальныйИдентификатор", "Количество, Сумма, Скидка");
		ТаблицаОплат.Свернуть("КодВидаОплаты, ТипОплаты", "Сумма");
		
		РеквизитыОтчета = Новый Структура;
		РеквизитыОтчета.Вставить("УникальныйИдентификатор", ОтчетОПродажах.УникальныйИдентификатор);
		РеквизитыОтчета.Вставить("Дата", ОтчетОПродажах.ДатаЗакрытияСмены);
		РеквизитыОтчета.Вставить("ДатаОткрытияСмены", ОтчетОПродажах.ДатаОткрытияСмены);
		РеквизитыОтчета.Вставить("НомерСмены", ОтчетОПродажах.НомерСмены);
		
		ТаблицыДанных = Новый Структура("Товары, Оплаты, ВозвратыТоваров, Реквизиты, ТаблицаШтрихкодовМарок, ТаблицаРасчетыСКлиентами");
		ТаблицыДанных.Товары = ТаблицаТоваров;
		ТаблицыДанных.Оплаты = ТаблицаОплат;
		ТаблицыДанных.ВозвратыТоваров = ТаблицаВозвратов;
		ТаблицыДанных.Реквизиты = РеквизитыОтчета;
		ТаблицыДанных.ТаблицаШтрихкодовМарок = ТаблицаШтрихкодовМарок;
		ТаблицыДанных.ТаблицаРасчетыСКлиентами = ТаблицаРасчетыСКлиентами;
		
		Комментарий = СформироватьКомментарий(ОфлайнОборудование);
		
		СоздатьИЗаполнитьОтчетОПродажах(МассивСозданныхДокументов, Параметры, ТаблицыДанных, Комментарий, СообщениеОбОшибке, Отказ);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗагрузитьЦенники(Устройство, МассивДанных, ВыполненоУспешно = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСозданныхДокументов = Новый Массив;
	НаборЗаписей = РегистрыСведений.ЦенникиКПечати.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	ДатаПриема = ТекущаяДатаСеанса();
	ИндексСтроки = 0;
	Для каждого Документ Из МассивДанных Цикл
		
		ДанныеОТоваре = Новый Структура;
		Для каждого Строка Из Документ.Товары Цикл
			
			Запись = НаборЗаписей.Добавить();
			ПолучитьДанныеОТоваре(Строка, ДанныеОТоваре);
			Запись.Номенклатура = ДанныеОТоваре.Номенклатура;
			Запись.Характеристика = ДанныеОТоваре.Характеристика;
			Запись.Партия = ДанныеОТоваре.Партия;
			Запись.ДатаПриема = ДатаПриема;
			Запись.ИДЦенника = Новый УникальныйИдентификатор;
			Запись.ПодключаемоеОборудование = Устройство;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	ВыполненоУспешно = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаДанных

Функция ПолучитьПараметрыУстройства(Устройство) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.СтруктурнаяЕдиница.РозничныйВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦен,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.МаксимальныйКод, 0) КАК МаксимальныйКод,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.ПрефиксВесовогоТовара, 0) КАК ПрефиксВесовогоТовара,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.СвояНумерацияPLUНаОборудовании, 0) КАК СвояНумерацияPLUНаОборудовании,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.ВыгружатьИзменения, ИСТИНА) КАК ВыгружатьИзменения,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.СтруктурнаяЕдиница.РозничныйВидЦен.ЦенаВключаетНДС, ИСТИНА) КАК ЦенаВключаетНДС,
	|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования,
	|	ПодключаемоеОборудование.ПравилоОбмена.МаксимальныйКодPLU КАК МаксимальныйКодPLU
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство";
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПравилоОбмена",          Выборка.ПравилоОбмена);
	ВозвращаемоеЗначение.Вставить("УзелИнформационнойБазы", Выборка.УзелИнформационнойБазы);
	ВозвращаемоеЗначение.Вставить("СтруктурнаяЕдиница",     Выборка.СтруктурнаяЕдиница);
	ВозвращаемоеЗначение.Вставить("ВидЦен",                 Выборка.ВидЦен);
	ВозвращаемоеЗначение.Вставить("ТипОборудования",        Выборка.ТипОборудования);
	ВозвращаемоеЗначение.Вставить("МаксимальныйКод",        Выборка.МаксимальныйКод);
	ВозвращаемоеЗначение.Вставить("ПрефиксВесовогоТовара",  Строка(Выборка.ПрефиксВесовогоТовара));
	ВозвращаемоеЗначение.Вставить("ВыгружатьИзменения",     Выборка.ВыгружатьИзменения);
	ВозвращаемоеЗначение.Вставить("СвояНумерацияPLUНаОборудовании", Выборка.СвояНумерацияPLUНаОборудовании);
	ВозвращаемоеЗначение.Вставить("МаксимальныйКодPLU",     Выборка.МаксимальныйКодPLU);
	ВозвращаемоеЗначение.Вставить("ЦенаВключаетНДС",        Выборка.ЦенаВключаетНДС);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьТоварыКВыгрузкеККМ(Устройство, Параметры, Штрихкод = "") Экспорт
	
	ПравилоОбмена = Параметры.ПравилоОбмена;
	
	РегистрироватьКОбменуПриИзмененииОстатка = Истина;
	ИспользоватьНаборы = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");
	
	ТаблицаТоваровПоПравилу = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.СписокТоваровПоПравилу(ПравилоОбмена);
	
	// Наборы
	Если ИспользоватьНаборы Тогда
		НаборыСервер.ЗаполнитьЦеныОстаткиНаборовКВыгрузкеККМ(ТаблицаТоваровПоПравилу, ПравилоОбмена);
	КонецЕсли;
	// Конец Наборы
	
	АвтоматическиГенерироватьSKU = Истина;
	
	РегистрыСведений.КодыТоваровSKU.ОбновитьКоды_SKU_PLU(ТаблицаТоваровПоПравилу, АвтоматическиГенерироватьSKU, ПравилоОбмена);
	
	ВерхняяГраница = Константы.ВерхняяГраницаДиапазонаSKUВесовогоТовара.Получить();
	НижняяГраница  = Константы.НижняяГраницаДиапазонаSKUВесовогоТовара.Получить();
	
	ВыгружатьГруппыТоваров = ?(Параметры.Свойство("ВыгружатьГруппыТоваров"), Параметры.ВыгружатьГруппыТоваров, Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	
	#Область Запрос
	
	Запрос = НовыйЗапросПолучитьТоварыКВыгрузкеККМ();
	
	Запрос.УстановитьПараметр("ТолькоИзмененные",       Параметры.ЧастичнаяВыгрузка); 
	Запрос.УстановитьПараметр("ПравилоОбмена",          Параметры.ПравилоОбмена);
	Запрос.УстановитьПараметр("Узел",                   Параметры.УзелИнформационнойБазы);
	Запрос.УстановитьПараметр("Склад",                  Параметры.ПравилоОбмена.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ВыгружатьГруппыТоваров", ВыгружатьГруппыТоваров);
	Запрос.УстановитьПараметр("РегистрироватьПриИзмененииОстатка", РегистрироватьКОбменуПриИзмененииОстатка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ТаблицаТоваровПоПравилу", ТаблицаТоваровПоПравилу);
	Запрос.УстановитьПараметр("ВыгружатьГруппыТоваров",  ВыгружатьГруппыТоваров);
	Запрос.УстановитьПараметр("ОтборПоШтрихкоду",        НЕ ПустаяСтрока(Штрихкод));
	Запрос.УстановитьПараметр("Штрихкод",                Штрихкод);
	Запрос.УстановитьПараметр("ИспользоватьНаборы",      ИспользоватьНаборы);
	
	#КонецОбласти
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("PLU",								Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("SKU",								Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("SKUГруппы",						Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",						Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Группа",							Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",					Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Партия",							Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС",						Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("ТипНоменклатуры",					Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Артикул",							Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Описание",							Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения",					Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",						Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеПолное",				Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",							Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("МассивШтрихкодов",					Новый ОписаниеТипов("Массив"));
	ТаблицаТоваров.Колонки.Добавить("Цена",								Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",							Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ЭтоГруппа",						Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Остаток",							Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка",							Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("КоэффициентУпаковки",				Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ЕстьОшибки",						Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ИндексКартинкиЕстьИзменения",		Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("НоменклатураНаименование",			Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование",				Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНаименование",		Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ПартияНаименование",				Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("КодНалога",						Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Алкоголь",							Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Маркируемый",						Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("КодВидаАлкогольнойПродукции",		Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЕмкостьТары",						Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Крепость",							Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ИННПроизводителя",					Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("КПППроизводителя",					Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НомерСекции",						Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ПризнакПредметаРасчета",			Новый ОписаниеТипов("ПеречислениеСсылка.ПризнакиПредметаРасчета"));
	ТаблицаТоваров.Колонки.Добавить("ПродаетсяВРозлив",					Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ВидПродукцииИС",					Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоКодам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоКодам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Выборка = ВыборкаПоКодам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Штрихкод = СокрЛП(Выборка.Штрихкод);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.PLU) Тогда
				
				НоваяСтрока.PLU								= Выборка.КодТовараPLU;
				НоваяСтрока.SKU								= Выборка.КодТовараSKU;
				НоваяСтрока.SKUГруппы						= ?(ВыгружатьГруппыТоваров, Выборка.SKUГруппы, 0);
				НоваяСтрока.Наименование					= ПечатьДокументовУНФ.ПредставлениеНоменклатурыДляПечати(
					Выборка.НоменклатураНаименование,
					Выборка.ХарактеристикаНаименование);
					
				НоваяСтрока.НаименованиеПолное				= ПечатьДокументовУНФ.ПредставлениеНоменклатурыДляПечати(
					Выборка.НоменклатураНаименованиеПолное,
					Выборка.ХарактеристикаНаименование);

				НоваяСтрока.Остаток							= Выборка.КоличествоОстаток;
				НоваяСтрока.ИндексКартинкиЕстьИзменения		= 0;
				
				НоваяСтрока.Штрихкод						= Штрихкод;
				
				НоваяСтрока.ПризнакПредметаРасчета = РозничныеПродажиСервер.ПолучитьПризнакПредметаРасчета(Выборка.Номенклатура);
				
				ЗаполнитьЗначенияСвойств(
					НоваяСтрока, 
					Выборка,
					"Номенклатура,
					|Характеристика,
					|Партия,
					|ЕдиницаИзмерения,
					|Группа,
					|ХарактеристикаНаименование,
					|ПартияНаименование,
					|Упаковка,
					|Весовой,
					|ЭтоГруппа,
					|Артикул,
					|Описание,
					|СтавкаНДС,
					|КоэффициентУпаковки,
					|ТипНоменклатуры,
					|УпаковкаНаименование,
					|НоменклатураНаименование,
					|Алкоголь,
					|Маркируемый,
					|КодВидаАлкогольнойПродукции,
					|ЕмкостьТары,
					|Крепость,
					|ИННПроизводителя,
					|КПППроизводителя,
					|Цена,
					|ВидПродукцииИС
					|");
				
			Иначе
				НоваяСтрока.Штрихкод = НоваяСтрока.Штрихкод + " " + Штрихкод;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Штрихкод) Тогда
				НоваяСтрока.МассивШтрихкодов.Добавить(Штрихкод);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция НовыйЗапросПолучитьТоварыКВыгрузкеККМ() Экспорт
	
	ТекстЗапроса = Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС() +
	"ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудовании.КодТовараSKU КАК SKUГруппы,
	|	КодыТоваровSKU.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ КодыГрупп
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|		ПО (КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыТоваровSKU.SKU)
	|ГДЕ
	|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровSKU.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И КодыТоваровSKU.Номенклатура.ЭтоГруппа
	|	И &ВыгружатьГруппыТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахИзменения.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ РегистраторыТоварыНаСкладах
	|ИЗ
	|	РегистрНакопления.Запасы.Изменения КАК ТоварыНаСкладахИзменения
	|ГДЕ
	|	ТоварыНаСкладахИзменения.Узел = &Узел
	|	И &РегистрироватьПриИзмененииОстатка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладах.Характеристика КАК Характеристика,
	|	ТоварыНаСкладах.Партия КАК Партия
	|ПОМЕСТИТЬ ТоварыСИзменившемсяОстатком
	|ИЗ
	|	РегистрНакопления.Запасы КАК ТоварыНаСкладах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистраторыТоварыНаСкладах КАК РегистраторыТоварыНаСкладах
	|		ПО ТоварыНаСкладах.Регистратор = РегистраторыТоварыНаСкладах.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Партия,
	|	ТоварыНаСкладах.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСИзменившемсяОстатком.Номенклатура КАК Номенклатура,
	|	ТоварыСИзменившемсяОстатком.Характеристика КАК Характеристика,
	|	ТоварыСИзменившемсяОстатком.Партия КАК Партия
	|ПОМЕСТИТЬ ТоварыИНаборыСИзменившемсяОстатком
	|ИЗ
	|	ТоварыСИзменившемсяОстатком КАК ТоварыСИзменившемсяОстатком
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоставНаборов.НоменклатураНабора,
	|	СоставНаборов.ХарактеристикаНабора,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|ИЗ
	|	РегистрСведений.СоставНаборов КАК СоставНаборов
	|ГДЕ
	|	&ИспользоватьНаборы
	|	И (СоставНаборов.Номенклатура, СоставНаборов.Характеристика) В
	|			(ВЫБРАТЬ
	|				ТоварыСИзменившемсяОстатком.Номенклатура,
	|				ТоварыСИзменившемсяОстатком.Характеристика
	|			ИЗ
	|				ТоварыСИзменившемсяОстатком)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставНаборов.НоменклатураНабора,
	|	СоставНаборов.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТоваровSKU.SKU КАК SKU
	|ПОМЕСТИТЬ SKU_КОбмену
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыИНаборыСИзменившемсяОстатком КАК ТоварыИНаборыСИзменившемсяОстатком
	|		ПО КодыТоваровSKU.Номенклатура = ТоварыИНаборыСИзменившемсяОстатком.Номенклатура
	|			И КодыТоваровSKU.Характеристика = ТоварыИНаборыСИзменившемсяОстатком.Характеристика
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудовании.КодТовараSKU
	|ИЗ
	|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КодыТоваровPLUНаОборудованииИзменения.КодТовараPLU КАК КодТовараPLU,
	|			КодыТоваровPLUНаОборудованииИзменения.ПравилоОбмена КАК ПравилоОбмена
	|		ИЗ
	|			РегистрСведений.КодыТоваровPLUНаОборудовании.Изменения КАК КодыТоваровPLUНаОборудованииИзменения
	|		ГДЕ
	|			КодыТоваровPLUНаОборудованииИзменения.Узел = &Узел
	|			И КодыТоваровPLUНаОборудованииИзменения.ПравилоОбмена = &ПравилоОбмена) КАК PLUКОбмену
	|		ПО КодыТоваровPLUНаОборудовании.КодТовараPLU = PLUКОбмену.КодТовараPLU
	|			И КодыТоваровPLUНаОборудовании.ПравилоОбмена = PLUКОбмену.ПравилоОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТоваровSKU.SKU КАК SKU,
	|	КодыТоваровSKU.Номенклатура КАК Номенклатура,
	|	КодыТоваровSKU.Характеристика КАК Характеристика,
	|	КодыТоваровSKU.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА SKU_КОбмену.SKU ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьИзменения
	|ПОМЕСТИТЬ КодыТоваровSKU
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ЛЕВОЕ СОЕДИНЕНИЕ SKU_КОбмену КАК SKU_КОбмену
	|		ПО КодыТоваровSKU.SKU = SKU_КОбмену.SKU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровПоПравилу.PLU КАК PLU,
	|	ТаблицаТоваровПоПравилу.SKU КАК SKU,
	|	ТаблицаТоваровПоПравилу.Весовой КАК Весовой,
	|	ТаблицаТоваровПоПравилу.Группа КАК Группа,
	|	ТаблицаТоваровПоПравилу.КоличествоОстаток КАК КоличествоОстаток,
	|	ТаблицаТоваровПоПравилу.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровПоПравилу.Партия КАК Партия,
	|	ТаблицаТоваровПоПравилу.Характеристика КАК Характеристика,
	|	ТаблицаТоваровПоПравилу.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ТаблицаТоваровПоПравилу.Цена КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ТаблицаТоваровПоПравилу.ЭтоГруппа КАК ЭтоГруппа
	|ПОМЕСТИТЬ ТаблицаТоваровПоПравилу
	|ИЗ
	|	&ТаблицаТоваровПоПравилу КАК ТаблицаТоваровПоПравилу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровПоПравилу.PLU КАК PLU,
	|	ТаблицаТоваровПоПравилу.SKU КАК SKU,
	|	ТаблицаТоваровПоПравилу.Весовой КАК Весовой,
	|	ТаблицаТоваровПоПравилу.Группа КАК Группа,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаТоваровПоПравилу.КоличествоОстаток, 0) КАК ЧИСЛО(15, 3)) КАК КоличествоОстаток,
	|	ТаблицаТоваровПоПравилу.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровПоПравилу.Характеристика КАК Характеристика,
	|	ТаблицаТоваровПоПравилу.Партия КАК Партия,
	|	ТаблицаТоваровПоПравилу.Цена КАК Цена,
	|	ТаблицаТоваровПоПравилу.ЭтоГруппа КАК ЭтоГруппа,
	|	ТаблицаТоваровПоПравилу.ЕдиницаИзмерения КАК Упаковка,
	|	ЕСТЬNULL(СпрЕдИзм.Наименование, """") КАК УпаковкаНаименование,
	|	ЕСТЬNULL(СпрЕдИзм.Коэффициент, 1) КАК КоэффициентУпаковки,
	|	СпрНоменклатура.Наименование КАК НоменклатураНаименование,
	|	СпрНоменклатура.Комментарий КАК Описание,
	|	СпрНоменклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СпрНоменклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	СпрНоменклатура.Артикул КАК Артикул,
	|	ЕСТЬNULL(ВТСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) КАК СтавкаНДС,
	|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СпрНоменклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СпрНоменклатура.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукцииЕГАИС,
	|	СпрНоменклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	СпрНоменклатура.Крепость КАК Крепость,
	|	СпрНоменклатура.ПроизводительИмпортерАлкогольнойПродукции КАК ПроизводительИмпортерАлкогольнойПродукции,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Наименование, &ПустаяСтрока) КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(ПартииНоменклатуры.Наименование, &ПустаяСтрока) КАК ПартияНаименование,
	|	ВЫБОР
	|		КОГДА SKU_КОбмену.SKU ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьИзменения,
	|	СпрНоменклатура.ВидПродукцииИС КАК ВидПродукцииИС
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровПоПравилу КАК ТаблицаТоваровПоПравилу
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаТоваровПоПравилу.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (СпрНоменклатура.ВидСтавкиНДС = ВТСтавкиНДС.ВидСтавкиНДС)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииНоменклатуры КАК ПартииНоменклатуры
	|		ПО ТаблицаТоваровПоПравилу.Партия = ПартииНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ТаблицаТоваровПоПравилу.Характеристика = ХарактеристикиНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СпрЕдИзм
	|		ПО ТаблицаТоваровПоПравилу.ЕдиницаИзмерения = СпрЕдИзм.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ SKU_КОбмену КАК SKU_КОбмену
	|		ПО ТаблицаТоваровПоПравилу.SKU = SKU_КОбмену.SKU
	|ГДЕ
	|	НЕ ТаблицаТоваровПоПравилу.SKU ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.PLU КАК КодТовараPLU,
	|	ТаблицаТоваров.SKU КАК КодТовараSKU,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Группа КАК Группа,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Партия КАК Партия,
	|	ТаблицаТоваров.Описание КАК Описание,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТоваров.ЭтоГруппа КАК ЭтоГруппа,
	|	ТаблицаТоваров.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаТоваров.Весовой КАК Весовой,
	|	ТаблицаТоваров.НоменклатураНаименование КАК НоменклатураНаименование,
	|	ТаблицаТоваров.НоменклатураНаименование КАК НоменклатураНаименованиеПолное,
	|	ТаблицаТоваров.ПартияНаименование КАК ПартияНаименование,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТаблицаТоваров.УпаковкаНаименование КАК УпаковкаНаименование,
	|	ТаблицаТоваров.КоэффициентУпаковки КАК КоэффициентУпаковки,
	|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаТоваров.Артикул КАК Артикул,
	|	ТаблицаТоваров.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, &ПустаяСтрока) КАК Штрихкод,
	|	ТаблицаТоваров.КоличествоОстаток КАК КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтавкаНДС.Ставка = 18 ИЛИ ТаблицаТоваров.СтавкаНДС.Ставка = 20
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаТоваров.СтавкаНДС.Ставка = 10
	|					ТОГДА 2
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ КАК КодНалога,
	|	ТаблицаТоваров.АлкогольнаяПродукция КАК Алкоголь,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ВидАлкогольнойПродукцииЕГАИС.Маркируемый
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Маркируемый,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ВидАлкогольнойПродукцииЕГАИС.Код
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КодВидаАлкогольнойПродукции,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ОбъемДАЛ * 10
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЕмкостьТары,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.Крепость
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Крепость,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ПроизводительИмпортерАлкогольнойПродукции.ИНН
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИННПроизводителя,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ПроизводительИмпортерАлкогольнойПродукции.КПП
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КПППроизводителя,
	|	КодыГрупп.SKUГруппы КАК SKUГруппы,
	|	ТаблицаТоваров.Цена КАК Цена,
	|	ТаблицаТоваров.ВидПродукцииИС КАК ВидПродукцииИС
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО ТаблицаТоваров.Номенклатура = Штрихкоды.Номенклатура
	|			И ТаблицаТоваров.Характеристика = Штрихкоды.Характеристика
	|			И ТаблицаТоваров.Партия = Штрихкоды.Партия
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыГрупп КАК КодыГрупп
	|		ПО ТаблицаТоваров.Группа = КодыГрупп.Номенклатура
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА &ТолькоИзмененные = ИСТИНА
	|				ТОГДА ТаблицаТоваров.ЕстьИзменения = ИСТИНА
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ВыгружатьГруппыТоваров = ЛОЖЬ
	|				ТОГДА НЕ ТаблицаТоваров.ЭтоГруппа
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборПоШтрихкоду = ИСТИНА
	|				ТОГДА ЕСТЬNULL(Штрихкоды.Штрихкод, &ПустаяСтрока) = &Штрихкод
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|ИТОГИ
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	КодТовараPLU";
	
	Возврат Новый Запрос(ТекстЗапроса);
	
КонецФункции


Функция ПолучитьКэшТаблицуЕИ()
	
	ТаблицаКэш = Новый ТаблицаЗначений;
	ТаблицаКэш.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ТаблицаКэш.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	ТаблицаКэш.Колонки.Добавить("УИ", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Возврат ТаблицаКэш;
	
КонецФункции

Процедура ЗаписатьЕИ(ПрайсЛистККМ, ЗаписьТовар, ЕдиницаИзмерения, КэшТаблица)
	
	Кэш = КэшТаблица.Найти(ЕдиницаИзмерения, "Ссылка");
	
	Если Кэш = Неопределено Тогда
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("Код", "Код");
		СтруктураРеквизитов.Вставить("Наименование", "Наименование");
		
		РеквизитыЕИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмерения, СтруктураРеквизитов);
		
		ЕдиницаИзмеренияККМ = МенеджерОфлайнОборудования.ПолучитьЗаписьЕдиницыИзмерения();
		ЕдиницаИзмеренияККМ.Код = РеквизитыЕИ.Код;
		ЕдиницаИзмеренияККМ.Наименование = РеквизитыЕИ.Наименование;
		ЕдиницаИзмеренияККМ.УникальныйИдентификатор = ЕдиницаИзмерения.УникальныйИдентификатор();
		ЕдиницаИзмеренияККМ.СсылкаЕдиницыИзмерения = ЕдиницаИзмерения;
		
		ПрайсЛистККМ.ЕдиницыИзмерения.Добавить(ЕдиницаИзмеренияККМ);
		
		Кэш = КэшТаблица.Добавить();
		Кэш.Ссылка = ЕдиницаИзмерения;
		Кэш.Код = РеквизитыЕИ.Код;
		Кэш.УИ = ЕдиницаИзмеренияККМ.УникальныйИдентификатор;
		
	КонецЕсли;
	
	ЗаписьТовар.КодЕдиницыИзмерения = Кэш.Код;
	ЗаписьТовар.УникальныйИдентификаторЕдиницыИзмерения = Кэш.УИ;
	
КонецПроцедуры

Процедура ДобавитьГруппуНоменклатурыВПрайсЛист(ВыборкаПоНоменклатуре, ПрайсЛистККМ)
	
	ЗаписьГруппа = МенеджерОфлайнОборудования.ПолучитьЗаписьГруппыТоваров();
	ЗаписьГруппа.Код = Строка(Формат(ВыборкаПоНоменклатуре.SKU, "ЧГ=0"));
	
	Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.SKUГруппы) Тогда
		ЗаписьГруппа.КодГруппы = Строка(Формат(ВыборкаПоНоменклатуре.SKUГруппы, "ЧГ=0"));
		ЗаписьГруппа.УникальныйИдентификаторГруппы = ВыборкаПоНоменклатуре.Группа.УникальныйИдентификатор();
	КонецЕсли;
	
	ЗаписьГруппа.Наименование = ВыборкаПоНоменклатуре.НоменклатураНаименование;
	ЗаписьГруппа.СсылкаГруппы = ВыборкаПоНоменклатуре.Номенклатура;
	ЗаписьГруппа.УникальныйИдентификатор = ВыборкаПоНоменклатуре.Номенклатура.УникальныйИдентификатор();
	ПрайсЛистККМ.ГруппыТоваров.Добавить(ЗаписьГруппа);
	
КонецПроцедуры

Процедура ДобавитьНоменклатуруВПрайсЛист(ВыборкаПоНоменклатуре, ПрайсЛистККМ, КэшЕИ, ОбрабатыватьХарактеристики = Истина, Параметры = Неопределено)
	
	ЗаписьТовар = МенеджерОфлайнОборудования.ПолучитьЗаписьТовара();
	ЗаписьТовар.ПризнакПредметаРасчета = ВыборкаПоНоменклатуре.ПризнакПредметаРасчета;
	
	Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.SKUГруппы) Тогда
		ЗаписьТовар.КодГруппы = Строка(Формат(ВыборкаПоНоменклатуре.SKUГруппы, "ЧГ=0"));
		ЗаписьТовар.УникальныйИдентификаторГруппы = ВыборкаПоНоменклатуре.Группа.УникальныйИдентификатор();
	КонецЕсли;
	
	Если ВыборкаПоНоменклатуре.МаркируемаяПродукция Тогда
		ЗаполнитьВидПродукцииИС(ВыборкаПоНоменклатуре, ЗаписьТовар);
	Иначе
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Ложь;
	КонецЕсли;
			
	Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.Партия) Тогда
		ЗаписьТовар.Наименование = ВыборкаПоНоменклатуре.НоменклатураНаименование + НСтр("ru=' ('") + ВыборкаПоНоменклатуре.ПартияНаименование + ")";
	Иначе
		ЗаписьТовар.Наименование = ВыборкаПоНоменклатуре.НоменклатураНаименование
	КонецЕсли;
	ЗаписьТовар.Артикул          = ВыборкаПоНоменклатуре.Артикул;
	ЗаписьТовар.ЭтоВесовойТовар  = ВыборкаПоНоменклатуре.Весовой;
		
	Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.ЕдиницаИзмерения) Тогда
		ЗаписатьЕИ(ПрайсЛистККМ, ЗаписьТовар, ВыборкаПоНоменклатуре.ЕдиницаИзмерения, КэшЕИ);
	КонецЕсли;
	
	ЗаписьТовар.СтавкаНДС        = ПолучитьСтавкуНДСККМ(ВыборкаПоНоменклатуре.СтавкаНДС, Параметры);
	ЗаписьТовар.Описание         = ВыборкаПоНоменклатуре.Описание;
	ЗаписьТовар.ЭтоАлкоголь      = ВыборкаПоНоменклатуре.Алкоголь;
	
	Если ЗаписьТовар.ЭтоАлкоголь Тогда
		ЗаписьТовар.АлкогольныеРеквизиты.Маркируемый                 = ВыборкаПоНоменклатуре.Маркируемый;
		ЗаписьТовар.АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции = ВыборкаПоНоменклатуре.КодВидаАлкогольнойПродукции;
		ЗаписьТовар.АлкогольныеРеквизиты.ЕмкостьТары                 = ВыборкаПоНоменклатуре.ЕмкостьТары;
		ЗаписьТовар.АлкогольныеРеквизиты.Крепость                    = ВыборкаПоНоменклатуре.Крепость;
		ЗаписьТовар.АлкогольныеРеквизиты.ИННПроизводителя            = ВыборкаПоНоменклатуре.ИННПроизводителя;
		ЗаписьТовар.АлкогольныеРеквизиты.КПППроизводителя            = ВыборкаПоНоменклатуре.КПППроизводителя;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.Партия) Тогда
		ЗаписьТовар.УникальныйИдентификатор = ВыборкаПоНоменклатуре.Партия.УникальныйИдентификатор();
	Иначе
		ЗаписьТовар.УникальныйИдентификатор = ВыборкаПоНоменклатуре.Номенклатура.УникальныйИдентификатор();
	КонецЕсли;
	
	Если ВыборкаПоНоменклатуре.ЕстьХарактеристики
		И ОбрабатыватьХарактеристики Тогда
		
		ЗаписьТовар.ИмеетХарактеристики = Истина;
		ЗаписьТовар.ИмеетУпаковки       = Ложь;
		
		ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоХарактеристикам.Характеристика) Тогда
				ДобавитьНоменклатуруВПрайсЛист(ВыборкаПоХарактеристикам, ПрайсЛистККМ, КэшЕИ, Ложь, Параметры);
				Продолжить;
			КонецЕсли;
			
			ЗаписьХарактеристика = МенеджерОфлайнОборудования.ПолучитьЗаписьХарактеристики();
			ЗаписьХарактеристика.УникальныйИдентификатор = ВыборкаПоХарактеристикам.Характеристика.УникальныйИдентификатор();
			ЗаписьХарактеристика.Наименование = ВыборкаПоХарактеристикам.ХарактеристикаНаименование;
			ЗаписьХарактеристика.СсылкаХарактеристика = ВыборкаПоХарактеристикам.Характеристика;
			
			Если ВыборкаПоХарактеристикам.ЕстьУпаковки Тогда
				
				ЗаписьХарактеристика.ИмеетУпаковки       = Истина;
				
				ВыборкаПоУпаковкам = ВыборкаПоХарактеристикам.Выбрать();
				
				Пока ВыборкаПоУпаковкам.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаПоУпаковкам.Упаковка) Тогда
						
						ЗаписатьУпаковку(ВыборкаПоУпаковкам, ЗаписьХарактеристика);
						
					Иначе
						
						ЗаписьХарактеристика.Код      = Строка(Формат(ВыборкаПоУпаковкам.SKU, "ЧГ=0"));
						ЗаписьХарактеристика.Цена     = ВыборкаПоУпаковкам.Цена;
						ЗаписьХарактеристика.Остаток  = ВыборкаПоУпаковкам.Остаток;
						
						ЗаписатьШтрихкод(ВыборкаПоУпаковкам, ЗаписьХарактеристика);
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				ЗаписьХарактеристика.ИмеетУпаковки       = Ложь;
				
				ЗаписатьШтрихкод(ВыборкаПоХарактеристикам, ЗаписьХарактеристика);
				
				ЗаписьХарактеристика.Код      = Строка(Формат(ВыборкаПоХарактеристикам.SKU, "ЧГ=0"));
				ЗаписьХарактеристика.Цена     = ВыборкаПоХарактеристикам.Цена;
				ЗаписьХарактеристика.Остаток  = ВыборкаПоХарактеристикам.Остаток;
				
			КонецЕсли;
			
			ЗаписьТовар.Характеристики.Добавить(ЗаписьХарактеристика);
			
		КонецЦикла;
		
	ИначеЕсли ВыборкаПоНоменклатуре.ЕстьУпаковки Тогда
		
		ВыборкаПоПустойХарактеристике = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаПоПустойХарактеристике.Следующий();
		
		ВыборкаПоУпаковкам = ВыборкаПоПустойХарактеристике.Выбрать();
		
		ЗаписьТовар.ИмеетУпаковки       = Истина;
		ЗаписьТовар.ИмеетХарактеристики = Ложь;
		
		Пока ВыборкаПоУпаковкам.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаПоУпаковкам.Упаковка) Тогда
				ЗаписатьУпаковку(ВыборкаПоУпаковкам, ЗаписьТовар);
			Иначе
				ЗаписьТовар.Код      = Строка(Формат(ВыборкаПоУпаковкам.SKU, "ЧГ=0"));
				ЗаписьТовар.Цена     = ВыборкаПоУпаковкам.Цена;
				ЗаписьТовар.Остаток  = ВыборкаПоУпаковкам.Остаток;
				ЗаписатьШтрихкод(ВыборкаПоУпаковкам, ЗаписьТовар);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ЗаписатьШтрихкод(ВыборкаПоНоменклатуре, ЗаписьТовар);
		
		ЗаписьТовар.Код      = Строка(Формат(ВыборкаПоНоменклатуре.SKU, "ЧГ=0"));
		ЗаписьТовар.Цена     = ВыборкаПоНоменклатуре.Цена;
		ЗаписьТовар.Остаток  = ВыборкаПоНоменклатуре.Остаток;
		
		ЗаписьТовар.ИмеетУпаковки       = Ложь;
		ЗаписьТовар.ИмеетХарактеристики = Ложь;
		
	КонецЕсли;
	
	ПрайсЛистККМ.Товары.Добавить(ЗаписьТовар);
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруПрайсЛистаИзДанныхКВыгрузке(ПрайсЛистККМ, ТоварыКВыгрузке, Параметры) Экспорт
	
	#Область Запрос
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКВыгрузке.SKU КАК SKU,
	|	ТоварыКВыгрузке.SKUГруппы КАК SKUГруппы,
	|	ТоварыКВыгрузке.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
	|	ТоварыКВыгрузке.Артикул КАК Артикул,
	|	ТоварыКВыгрузке.Весовой КАК Весовой,
	|	ТоварыКВыгрузке.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыКВыгрузке.КоэффициентУпаковки КАК КоэффициентУпаковки,
	|	ТоварыКВыгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКВыгрузке.Характеристика КАК Характеристика,
	|	ТоварыКВыгрузке.Партия КАК Партия,
	|	ТоварыКВыгрузке.НоменклатураНаименование КАК НоменклатураНаименование,
	|	ТоварыКВыгрузке.Группа КАК Группа,
	|	ТоварыКВыгрузке.СтавкаНДС КАК СтавкаНДС,
	|	ТоварыКВыгрузке.Остаток КАК Остаток,
	|	ТоварыКВыгрузке.Алкоголь КАК Алкоголь,
	|	ТоварыКВыгрузке.Маркируемый КАК Маркируемый,
	|	ТоварыКВыгрузке.КодВидаАлкогольнойПродукции КАК КодВидаАлкогольнойПродукции,
	|	ТоварыКВыгрузке.ЕмкостьТары КАК ЕмкостьТары,
	|	ТоварыКВыгрузке.Крепость КАК Крепость,
	|	ТоварыКВыгрузке.ИННПроизводителя КАК ИННПроизводителя,
	|	ТоварыКВыгрузке.КПППроизводителя КАК КПППроизводителя,
	|	ТоварыКВыгрузке.ПартияНаименование КАК ПартияНаименование,
	|	ТоварыКВыгрузке.Упаковка КАК Упаковка,
	|	ТоварыКВыгрузке.УпаковкаНаименование КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА ТоварыКВыгрузке.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьХарактеристики,
	|	ВЫБОР
	|		КОГДА ТоварыКВыгрузке.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПартии,
	|	ВЫБОР
	|		КОГДА ТоварыКВыгрузке.Упаковка = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьУпаковки,
	|	ТоварыКВыгрузке.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
	|	ТоварыКВыгрузке.Цена КАК Цена,
	|	ТоварыКВыгрузке.Штрихкод КАК Штрихкод,
	|	ТоварыКВыгрузке.ЭтоГруппа КАК ЭтоГруппа,
	|	ТоварыКВыгрузке.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТоварыКВыгрузке.Описание КАК Описание,
	|	ВЫБОР
	|		КОГДА ТоварыКВыгрузке.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК МаркируемаяПродукция,
	|	ТоварыКВыгрузке.ВидПродукцииИС КАК ВидПродукцииИС
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТоварыКВыгрузке КАК ТоварыКВыгрузке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
	|	ВЫРАЗИТЬ(Товары.НоменклатураНаименование КАК СТРОКА(1024)) КАК НоменклатураНаименование,
	|	Товары.ЭтоГруппа КАК ЭтоГруппа,
	|	Товары.Группа КАК Группа,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
	|	Товары.Партия КАК Партия,
	|	Товары.ПартияНаименование КАК ПартияНаименование,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.УпаковкаНаименование КАК УпаковкаНаименование,
	|	Товары.Артикул КАК Артикул,
	|	Товары.Весовой КАК Весовой,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.SKU КАК SKU,
	|	Товары.SKUГруппы КАК SKUГруппы,
	|	Товары.Остаток КАК Остаток,
	|	Товары.Алкоголь КАК Алкоголь,
	|	Товары.Маркируемый КАК Маркируемый,
	|	Товары.КодВидаАлкогольнойПродукции КАК КодВидаАлкогольнойПродукции,
	|	Товары.ЕмкостьТары КАК ЕмкостьТары,
	|	Товары.Крепость КАК Крепость,
	|	Товары.ИННПроизводителя КАК ИННПроизводителя,
	|	Товары.КПППроизводителя КАК КПППроизводителя,
	|	Товары.Цена КАК Цена,
	|	Товары.Штрихкод КАК Штрихкод,
	|	Товары.КоэффициентУпаковки КАК КоэффициентУпаковки,
	|	Товары.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Товары.ЕстьХарактеристики КАК ЕстьХарактеристики,
	|	Товары.ЕстьПартии КАК ЕстьПартии,
	|	Товары.ЕстьУпаковки КАК ЕстьУпаковки,
	|	Товары.Описание КАК Описание,
	|	Товары.МаркируемаяПродукция КАК МаркируемаяПродукция,
	|	Товары.ВидПродукцииИС КАК ВидПродукцииИС
	|ИЗ
	|	Товары КАК Товары
	|ИТОГИ
	|	МАКСИМУМ(ПризнакПредметаРасчета),
	|	МАКСИМУМ(НоменклатураНаименование),
	|	МАКСИМУМ(ЭтоГруппа),
	|	МАКСИМУМ(Группа),
	|	МАКСИМУМ(ХарактеристикаНаименование),
	|	МАКСИМУМ(ПартияНаименование),
	|	МАКСИМУМ(Артикул),
	|	МАКСИМУМ(Весовой),
	|	МАКСИМУМ(ЕдиницаИзмерения),
	|	МАКСИМУМ(СтавкаНДС),
	|	МАКСИМУМ(SKU),
	|	МАКСИМУМ(SKUГруппы),
	|	МАКСИМУМ(Остаток),
	|	МАКСИМУМ(Алкоголь),
	|	МАКСИМУМ(Маркируемый),
	|	МАКСИМУМ(КодВидаАлкогольнойПродукции),
	|	МАКСИМУМ(ЕмкостьТары),
	|	МАКСИМУМ(Крепость),
	|	МАКСИМУМ(ИННПроизводителя),
	|	МАКСИМУМ(КПППроизводителя),
	|	МАКСИМУМ(Цена),
	|	МАКСИМУМ(Штрихкод),
	|	МАКСИМУМ(ТипНоменклатуры),
	|	МАКСИМУМ(ЕстьХарактеристики),
	|	МАКСИМУМ(ЕстьПартии),
	|	МАКСИМУМ(ЕстьУпаковки),
	|	МАКСИМУМ(Описание),
	|	МАКСИМУМ(МаркируемаяПродукция),
	|	МАКСИМУМ(ВидПродукцииИС)
	|ПО
	|	Номенклатура,
	|	Партия,
	|	Характеристика";
		
	Запрос.УстановитьПараметр("ТоварыКВыгрузке", ТоварыКВыгрузке);
	РезультатЗапроса = Запрос.Выполнить();
	
	#КонецОбласти
	
	ВыборкаПоНоменклатуре = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КэшЕИ = ПолучитьКэшТаблицуЕИ();
	
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		Если ВыборкаПоНоменклатуре.ЭтоГруппа Тогда
			ДобавитьГруппуНоменклатурыВПрайсЛист(ВыборкаПоНоменклатуре, ПрайсЛистККМ);
		Иначе
			ВыборкаПоПартиям = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоПартиям.Следующий() Цикл
				ДобавитьНоменклатуруВПрайсЛист(ВыборкаПоПартиям, ПрайсЛистККМ, КэшЕИ, , Параметры)
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидПродукцииИС(Номенклатура, ЗаписьТовар)
	
	ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
	
	Если Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Ложь;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табак Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Табак;
		ЗаписьТовар.ТипМаркированнойПродукции = Перечисления.ТипыМаркировкиККТ.ТабачнаяПродукция;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Обувь Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Обувь;
		ЗаписьТовар.ТипМаркированнойПродукции = Перечисления.ТипыМаркировкиККТ.ОбувныеТовары;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.ЛегкаяПромышленность;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.МолочнаяПродукция;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.МолочнаяПродукция;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Шины Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Шины;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Фотоаппараты Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Фотоаппараты;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Велосипеды Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Велосипеды;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.КреслаКоляски Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.КреслаКоляски;
	ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Духи Тогда
		ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Духи;
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ЗаписатьУпаковку(Выборка, Запись)
	
	ЗаписьУпаковка = МенеджерОфлайнОборудования.ПолучитьЗаписьУпаковки();
	
	ЗаписатьШтрихкод(Выборка, ЗаписьУпаковка);
	
	ЗаписьУпаковка.Код      = Строка(Формат(Выборка.SKU, "ЧГ=0"));
	ЗаписьУпаковка.Цена     = Выборка.Цена;
	ЗаписьУпаковка.Остаток  = Выборка.Остаток;
	
	ЗаписьУпаковка.УникальныйИдентификатор = Выборка.Упаковка.УникальныйИдентификатор();
	ЗаписьУпаковка.Коэффициент = Выборка.КоэффициентУпаковки;
	ЗаписьУпаковка.Наименование  = Выборка.УпаковкаНаименование;
	ЗаписьУпаковка.СсылкаУпаковки = Выборка.Упаковка;
	
	Запись.Упаковки.Добавить(ЗаписьУпаковка);
	
КонецПроцедуры

Процедура ЗаписатьШтрихкод(Выборка, Запись)
	
	ШтрихкодыМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.Штрихкод, " ", Истина);
	
	Для Каждого Штрихкод Из ШтрихкодыМассив Цикл
		ДанныеШтрихкодаККМ = МенеджерОфлайнОборудования.ПолучитьЗаписьШтрихкода();
		ДанныеШтрихкодаККМ.Штрихкод = Штрихкод;
		
		Запись.Штрихкоды.Добавить(ДанныеШтрихкодаККМ);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТелефонИзКонтактнойИнформации(Объект)

	Если ЗначениеЗаполнено(Объект) Тогда
	
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Окончание = "ФизическогоЛица";
			ВладелецКонтактнойИнформации = Объект;
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
			ВладелецКонтактнойИнформации = Объект;
		КонецЕсли;

		ВидТелефона = Справочники.ВидыКонтактнойИнформации["Телефон" + Окончание].Ссылка;

		ТаблицаЗначений           = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		НайденныеСтроки = ТаблицаЗначений.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ВидТелефона));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьАдресЭлектроннойПочтыИзКонтактнойИнформации(Объект)

	Если ЗначениеЗаполнено(Объект) Тогда
	
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Окончание = "ФизическогоЛица";
			ВладелецКонтактнойИнформации = Объект;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
			ВладелецКонтактнойИнформации = Объект;
		КонецЕсли;
		
		ВидEmail = Справочники.ВидыКонтактнойИнформации["Email" + Окончание].Ссылка;
	
		ТаблицаЗначений           = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		НайденныеСтроки = ТаблицаЗначений.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ВидEmail));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПустаяТаблицаТоваров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Код",        Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Цена",       Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Скидка",     Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Сумма",      Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС",  Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ТаблицаТоваров.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ПустаяТаблицаШтрихкодовМаркированнойПродукции()
	
	ТаблицаШтрихкодовАкцизов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодовАкцизов.Колонки.Добавить("Код",  Новый ОписаниеТипов("Число"));
	ТаблицаШтрихкодовАкцизов.Колонки.Добавить("Марка", Новый ОписаниеТипов("Строка"));
	ТаблицаШтрихкодовАкцизов.Колонки.Добавить("УникальныйИдентификаторОтчета", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаШтрихкодовАкцизов;
	
КонецФункции

Функция ПустаяТаблицаОплат()
	
	ТаблицаОплат = Новый ТаблицаЗначений;
	ТаблицаОплат.Колонки.Добавить("КодВидаОплаты", Новый ОписаниеТипов("Строка"));
	ТаблицаОплат.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число"));
	ТаблицаОплат.Колонки.Добавить("ТипОплаты",     Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаОплат;
	
КонецФункции

Функция ПустаяТаблицаРасчетыСКлиентами()
	
	ТаблицаРасчетыСКлиентами = Новый ТаблицаЗначений;
	
	ТаблицаРасчетыСКлиентами.Колонки.Добавить("ЗаказПокупателя", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ТаблицаРасчетыСКлиентами.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаРасчетыСКлиентами.Колонки.Добавить("Отгружено", Новый ОписаниеТипов("Число"));
	ТаблицаРасчетыСКлиентами.Колонки.Добавить("Оплачено", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаРасчетыСКлиентами;
	
КонецФункции

Функция СформироватьКомментарий(Устройство)
	
	Комментарий = НСтр("ru = 'Загружено из ККМ Офлайн: %Устройство%'");
	Комментарий = СтрЗаменить(Комментарий, "%Устройство%", Устройство);
	
	Возврат Комментарий;
	
КонецФункции

Функция РассчитатьСуммуНДС(Сумма, СтавкаНДС, ЦенаВключаетНДС = Истина)
	
	ПроцентНДС = СтавкаНДС.Ставка / 100;
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * ПроцентНДС;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции // РассчитатьСуммуНДС()

Функция ПолучитьВыборкуНоменклатурыПоSKU(ПравилоОбмена, ТаблицаТоваров)
	
	Запрос = Новый Запрос(
	Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС() + 
	"ВЫБРАТЬ
	|	Товары.Код КАК Код,
	|	Товары.Цена КАК Цена,
	|	Товары.Количество КАК Количество,
	|	Товары.Скидка КАК Скидка,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.Заказ КАК Заказ
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаЗначений КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровSKU.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровSKU.Партия, ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)) КАК Партия,
	|	ЕСТЬNULL(КодыТоваровSKU.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	Товары.Количество КАК КоличествоУпаковок,
	|	ЕСТЬNULL(КодыТоваровSKU.ЕдиницаИзмерения.Коэффициент, 1) * Товары.Количество КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.Скидка КАК СуммаСкидкиНаценки,
	|	ВЫБОР
	|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ВТСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))
	|		ИНАЧЕ Товары.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	Товары.Заказ КАК Заказ
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ПО Товары.Код = КодыТоваровSKU.SKU
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (КодыТоваровSKU.Номенклатура.ВидСтавкиНДС = ВТСтавкиНДС.ВидСтавкиНДС)
	|");
	
	Запрос.УстановитьПараметр("ПравилоОбмена",   ПравилоОбмена);
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаТоваров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Процедура СоздатьИЗаполнитьОтчетОПродажах(МассивСозданныхДокументов, РеквизитыККМ, ТаблицыДанных, Комментарий = "", СообщениеОбОшибке, Отказ)
	
	ОтчетОРозничныхПродажахОбъект = Неопределено;
	
	Если ЗначениеЗаполнено(ТаблицыДанных.Реквизиты.УникальныйИдентификатор) Тогда
		
		УИ = ТаблицыДанных.Реквизиты.УникальныйИдентификатор;
		
		ОтчетСсылка = Документы.ОтчетОРозничныхПродажах.ПолучитьСсылку(УИ);
		
		ОтчетОРозничныхПродажахОбъект = ОтчетСсылка.ПолучитьОбъект();
		
		Если ОтчетОРозничныхПродажахОбъект = Неопределено Тогда
			ОтчетОРозничныхПродажахОбъект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
			ОтчетОРозничныхПродажахОбъект.УстановитьСсылкуНового(ОтчетСсылка);
		КонецЕсли;
		
	Иначе
		
		ОтчетОРозничныхПродажахОбъект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		
	КонецЕсли;
	
	ОтчетОРозничныхПродажахОбъект.Запасы.Очистить();
	ОтчетОРозничныхПродажахОбъект.БезналичнаяОплата.Очистить();
	ОтчетОРозничныхПродажахОбъект.СкидкиНаценки.Очистить();
	ОтчетОРозничныхПродажахОбъект.СерииНоменклатуры.Очистить();
	ОтчетОРозничныхПродажахОбъект.ДобавленныеНаборы.Очистить();
	ОтчетОРозничныхПродажахОбъект.СуммаДокумента = 0;

	ОтчетОРозничныхПродажахОбъект.Дата               = ТаблицыДанных.Реквизиты.Дата;
	ОтчетОРозничныхПродажахОбъект.НачалоКассовойСмены = ТаблицыДанных.Реквизиты.ДатаОткрытияСмены;
	ОтчетОРозничныхПродажахОбъект.ОкончаниеКассовойСмены = ТаблицыДанных.Реквизиты.Дата;
	ОтчетОРозничныхПродажахОбъект.ВалютаДокумента    = РеквизитыККМ.ВалютаДенежныхСредств;
	Если ЗначениеЗаполнено(РеквизитыККМ.ВидЦен) Тогда
		ОтчетОРозничныхПродажахОбъект.ВидЦен             = РеквизитыККМ.ВидЦен;
	Иначе
		ОтчетОРозничныхПродажахОбъект.ВидЦен = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
	КонецЕсли;
	ОтчетОРозничныхПродажахОбъект.КассаККМ           = РеквизитыККМ.КассаККМ;
	ОтчетОРозничныхПродажахОбъект.Комментарий        = Комментарий;
	ОтчетОРозничныхПродажахОбъект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(РеквизитыККМ.Организация,
		РеквизитыККМ.СтруктурнаяЕдиница, ТекущаяДатаСеанса());
	ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Закрыта;
	ОтчетОРозничныхПродажахОбъект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	ОтчетОРозничныхПродажахОбъект.Организация        = РеквизитыККМ.Организация;
	ОтчетОРозничныхПродажахОбъект.Ответственный      = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	ОтчетОРозничныхПродажахОбъект.ПоложениеОтветственный = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	ОтчетОРозничныхПродажахОбъект.Подразделение      = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновноеПодразделение");
	Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.ПоложениеНастроекНалоговогоУчета) Тогда
		ОтчетОРозничныхПродажахОбъект.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Подразделение) Тогда
		ОтчетОРозничныхПродажахОбъект.Подразделение  = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	КонецЕсли;
	ОтчетОРозничныхПродажахОбъект.СтруктурнаяЕдиница = РеквизитыККМ.СтруктурнаяЕдиница;
	ОтчетОРозничныхПродажахОбъект.СуммаВключаетНДС   = РеквизитыККМ.ЦенаВключаетНДС;
	
	ЗапросПОЕНВД = Новый Запрос;
	ЗапросПОЕНВД.УстановитьПараметр("Организация", ОтчетОРозничныхПродажахОбъект.Организация);
	ЗапросПОЕНВД.УстановитьПараметр("Склад", ОтчетОРозничныхПродажахОбъект.КассаККМ.СтруктурнаяЕдиница);
	ЗапросПОЕНВД.УстановитьПараметр("Дата",ОтчетОРозничныхПродажахОбъект.Дата);
	
	ЗапросПОЕНВД.Текст = 
	"ВЫБРАТЬ
	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД КАК ЕНВД
	|ИЗ
	|	РегистрСведений.ПримененияЕНВД.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &Склад) КАК ПримененияЕНВД
	|ГДЕ
	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД";
	
	Выборка = ЗапросПОЕНВД.Выполнить();
	ОтчетОРозничныхПродажахОбъект.УчитыватьВНУ = Выборка.Пустой();
	
	ВыборкаПоТоварам = ПолучитьВыборкуНоменклатурыПоSKU(РеквизитыККМ.ПравилоОбмена, ТаблицыДанных.Товары);

	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		НоваяСтрока = ОтчетОРозничныхПродажахОбъект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам, "Номенклатура, Характеристика, Партия, ЕдиницаИзмерения, Сумма, Цена, СтавкаНДС, СуммаСкидкиНаценки");
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		НоваяСтрока.Количество          = ВыборкаПоТоварам.КоличествоУпаковок;
		НоваяСтрока.СуммаНДС            = РассчитатьСуммуНДС(НоваяСтрока.Сумма, НоваяСтрока.СтавкаНДС, РеквизитыККМ.ЦенаВключаетНДС);
		НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(ОтчетОРозничныхПродажахОбъект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
		Если НоваяСтрока.Количество * НоваяСтрока.Цена <> 0 Тогда
			НоваяСтрока.ПроцентСкидкиНаценки = Окр(100 * НоваяСтрока.СуммаСкидкиНаценки / (НоваяСтрока.Количество * НоваяСтрока.Цена), 2);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоТоварам.Заказ) Тогда
			ТаблицаТоваровЗаказа = ВыборкаПоТоварам.Заказ.Запасы;
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", 	 ВыборкаПоТоварам.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", 	 ВыборкаПоТоварам.Характеристика);
			ПараметрыОтбора.Вставить("Партия", 		     ВыборкаПоТоварам.Партия);
			Если ЗначениеЗаполнено(ВыборкаПоТоварам.ЕдиницаИзмерения) Тогда
				ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ВыборкаПоТоварам.ЕдиницаИзмерения);
			КонецЕсли;
			НайденныеСтроки = ТаблицаТоваровЗаказа.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки <> Неопределено И НайденныеСтроки.Количество() > 0 Тогда
				НоваяСтрока.Заказ = ВыборкаПоТоварам.Заказ;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	// Наборы
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
		НаборыСервер.РазвернутьНаборы(ОтчетОРозничныхПродажахОбъект);
	КонецЕсли;
	// Конец Наборы
	
	Если ТаблицыДанных.Оплаты <> Неопределено Тогда
		
		Для каждого Оплата Из ТаблицыДанных.Оплаты Цикл
			
			Если Оплата.ТипОплаты = "ПлатежнаяКарта" Тогда
				ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(ОтчетОРозничныхПродажахОбъект.КассаККМ);
				Если НЕ ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
					СообщениеОбОшибке = НСтр("ru='Не найден эквайринговый терминал, соответствующий кассе ККМ. Оплата картами не заполнена.'");
					Сообщить(СообщениеОбОшибке);
					Продолжить;
				КонецЕсли;
				ВидыПлатежныхКарт = Справочники.ЭквайринговыеТерминалы.ВидыПлатежныхКарт(ЭквайринговыйТерминал);
				Если ВидыПлатежныхКарт.Количество() > 0 Тогда
					ВидПлатежнойКарты = ВидыПлатежныхКарт[0];
				Иначе
					ВидПлатежнойКарты = НСтр("ru='Платежная карта'");
				КонецЕсли;
				ОплатаПлатежнойКартой = ОтчетОРозничныхПродажахОбъект.БезналичнаяОплата.Добавить();
				ОплатаПлатежнойКартой.ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта;
				ОплатаПлатежнойКартой.Сумма = Оплата.Сумма;
				ОплатаПлатежнойКартой.ВидПлатежнойКарты = ВидПлатежнойКарты;
				ОплатаПлатежнойКартой.НомерПлатежнойКарты = "***";
				ОплатаПлатежнойКартой.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОтчетОРозничныхПродажахОбъект.СуммаДокумента = ОтчетОРозничныхПродажахОбъект.Запасы.Итог("Всего");
	
	Попытка
		Если ОтчетОРозничныхПродажахОбъект.ПроверитьЗаполнение() Тогда
			ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Исключение
		ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
	УзелОбъект = РеквизитыККМ.УзелИнформационнойБазы.ПолучитьОбъект();
	УзелОбъект.ДатаЗагрузки = ТекущаяДатаСеанса();
	УзелОбъект.Записать();
	
	МассивСозданныхДокументов.Добавить(ОтчетОРозничныхПродажахОбъект.Ссылка);
	
КонецПроцедуры

Процедура ПолучитьДанныеОТоваре(Строка, ДанныеОТоваре) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = (
	"ВЫБРАТЬ
	|	КодыТоваровSKU.Номенклатура.Ссылка КАК Номенклатура,
	|	КодыТоваровSKU.Характеристика.Ссылка КАК Характеристика,
	|	КодыТоваровSKU.Партия.Ссылка КАК Партия,
	|	КодыТоваровSKU.ЕдиницаИзмерения.Ссылка КАК Упаковка
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|ГДЕ
	|	КодыТоваровSKU.SKU = &SKU");
	
	Запрос.УстановитьПараметр("SKU", Число(Строка.Код));
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ДанныеОТоваре.Вставить("Номенклатура", Результат.Номенклатура);
		ДанныеОТоваре.Вставить("Характеристика", Результат.Характеристика);
		ДанныеОТоваре.Вставить("Партия", Результат.Партия);
		ДанныеОТоваре.Вставить("Упаковка", Результат.Упаковка);
		
	КонецЦикла
	
КонецПроцедуры

Функция ПолучитьСтавкуНДСККМ(Знач СтавкаНДС, Параметры)
	
	Если НЕ ЗначениеЗаполнено(СтавкаНДС) И Параметры <> Неопределено Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.КассаККМ, "Владелец.ВидСтавкиНДСПоУмолчанию");
		СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(РеквизитыОрганизации.ВладелецВидСтавкиНДСПоУмолчанию, ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
		Возврат МенеджерОфлайнОборудования.ПолучитьСтавкуБезНДС();
	КонецЕсли;
	
	РеквизитыСтавкиНДС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтавкаНДС, "Ставка, НеОблагается");
	
	Если РеквизитыСтавкиНДС.НеОблагается Тогда
		
		Возврат МенеджерОфлайнОборудования.ПолучитьСтавкуБезНДС();
		
	ИначеЕсли РеквизитыСтавкиНДС.Ставка = 0 Тогда
		
		Возврат МенеджерОфлайнОборудования.ПолучитьСтавкуНДС0();
		
	ИначеЕсли РеквизитыСтавкиНДС.Ставка = 10 Тогда
		
		Возврат МенеджерОфлайнОборудования.ПолучитьСтавкуНДС10();
		
	ИначеЕсли РеквизитыСтавкиНДС.Ставка = 18 Тогда
		
		Возврат МенеджерОфлайнОборудования.ПолучитьСтавкуНДС18();
		
	ИначеЕсли РеквизитыСтавкиНДС.Ставка = 20 Тогда
		
		Возврат МенеджерОфлайнОборудования.ПолучитьСтавкуНДС20();
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ВесыСПечатьюЭтикеток

// Функция регистрирует изменения для устройства.
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование>
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗарегистрироватьИзменения(Устройство) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК Код,
	|	КодыТоваровPLUНаОборудовании.ПравилоОбмена КАК ПравилоОбмена
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|		ПО ПодключаемоеОборудование.ПравилоОбмена = КодыТоваровPLUНаОборудовании.ПравилоОбмена
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	
	Набор = РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		
		Набор.Отбор.ПравилоОбмена.Значение = Выборка.ПравилоОбмена;
		Набор.Отбор.ПравилоОбмена.Использование = Истина;
		
		Набор.Отбор.КодТовараPLU.Значение = Выборка.Код;
		Набор.Отбор.КодТовараPLU.Использование = Истина;
		
		ПланыОбмена.ЗарегистрироватьИзменения(Выборка.УзелИнформационнойБазы, Набор);
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура вызывается при очистке товаров в устройстве.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - <СправочникСсылка.ПодключаемоеОборудование>
//  ВыполненоУспешно - <Булево> Признак успешного выполнения операции
//
// Возвращаемое значение:
//  Нет
//
Процедура ПриОчисткеТоваровВУстройстве(Устройство, ВыполненоУспешно = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
		УзелОбъект.ДатаВыгрузки      = ТекущаяДатаСеанса();
		УзелОбъект.ВыгрузкаВыполнена = ВыполненоУспешно;
		УзелОбъект.Записать();
	КонецЦикла;
	
	ЗарегистрироватьИзменения(Устройство);
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура вызывается при выгрузке товаров в устройство.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - <СправочникСсылка.ПодключаемоеОборудование>
//  ВыполненоУспешно - <Булево> Признак успешного выполнения операции
//
// Возвращаемое значение:
//  Нет
//
Процедура ПриВыгрузкеТоваровВУстройство(Устройство, СтруктураДанные, ВыполненоУспешно = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы                             КАК УзелИнформационнойБазы,
	|	ПодключаемоеОборудование.ПравилоОбмена                                      КАК ПравилоОбмена,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.ВыгружатьИзменения, ИСТИНА) КАК ВыгружатьИзменения
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВыполненоУспешно И СтруктураДанные <> Неопределено Тогда
			
			Если Выборка.ВыгружатьИзменения Тогда
				
				Набор = РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьНаборЗаписей();
				Для Каждого СтрокаТЧ Из СтруктураДанные.Данные Цикл
					
					Набор.Отбор.ПравилоОбмена.Значение = Выборка.ПравилоОбмена;
					Набор.Отбор.ПравилоОбмена.Использование = Истина;
					
					Набор.Отбор.КодТовараPLU.Значение = СтрокаТЧ.Код;
					Набор.Отбор.КодТовараPLU.Использование = Истина;
					
					ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелИнформационнойБазы, Набор);
					
				КонецЦикла;
				
			Иначе
				
				ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелИнформационнойБазы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
		УзелОбъект.ДатаВыгрузки      = ТекущаяДатаСеанса();
		УзелОбъект.ВыгрузкаВыполнена = ВыполненоУспешно;
		УзелОбъект.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Функция возвращает структуру с данными в формате, необходимом для выгрузки списка товаров в весы с печатью этикеток
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование> - Устройство для которого необходимо получить данные
//  ТолькоИзмененные - <Булево> - Флаг получения только измененных данных
//
// Возвращаемое значение:
//  <Структура> с массивом структур для выгрузки и количеством не выгруженных строк
//
Функция ПолучитьДанныеДляВесов(Устройство, ТолькоИзмененные = Истина) Экспорт
	
	Параметры = ПолучитьПараметрыУстройства(Устройство);
	Если Параметры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ПравилоОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Параметры.Вставить("ЧастичнаяВыгрузка"     , ТолькоИзмененные);
	Параметры.Вставить("ВыгружатьГруппыТоваров", Ложь);
	
	ВозвращаемоеЗначение = Новый Структура("Данные, КоличествоНеВыгруженныхСтрокСОшибками, ЧастичнаяВыгрузка, Параметры");
	ВозвращаемоеЗначение.Данные = Новый Массив();
	ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками = 0;
	ВозвращаемоеЗначение.ЧастичнаяВыгрузка = ТолькоИзмененные;
	ВозвращаемоеЗначение.Параметры = Параметры;
	
	Таблица = ПолучитьТаблицуТоваровКВыгрузке(Устройство, Параметры, Истина);
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками = ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками + 1;
			Продолжить;
		КонецЕсли;
		
		ЭлементМассива = Новый Структура;
		ЭлементМассива.Вставить("PLU", СтрокаТЧ.PLU);
		ЭлементМассива.Вставить("Код", СтрокаТЧ.SKU);
		ЭлементМассива.Вставить("Штрихкод", "");
		ЭлементМассива.Вставить("Наименование", Строка(СтрокаТЧ.НаименованиеПолное));
		ЭлементМассива.Вставить("Цена", СтрокаТЧ.Цена);
		ЭлементМассива.Вставить("ОписаниеТовара", СтрокаТЧ.Описание);
		
		ВозвращаемоеЗначение.Данные.Добавить(ЭлементМассива);
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьТаблицуТоваровКВыгрузке(Устройство, Параметры, ОбновитьКодыТоваров = Ложь) Экспорт
	
	ПравилоОбмена = Параметры.ПравилоОбмена;
	
	РегистрироватьКОбменуПриИзмененииОстатка = Истина;
	
	ТаблицаТоваровПоПравилу = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.СписокТоваровПоПравилу(ПравилоОбмена);
	
	АвтоматическиГенерироватьSKU = Истина;
	
	РегистрыСведений.КодыТоваровSKU.ОбновитьКоды_SKU_PLU(ТаблицаТоваровПоПравилу, АвтоматическиГенерироватьSKU, ПравилоОбмена);
	
	ВерхняяГраница = Константы.ВерхняяГраницаДиапазонаSKUВесовогоТовара.Получить();
	НижняяГраница  = Константы.НижняяГраницаДиапазонаSKUВесовогоТовара.Получить();
	
	ВыгружатьГруппыТоваров = ?(Параметры.Свойство("ВыгружатьГруппыТоваров"), Параметры.ВыгружатьГруппыТоваров, Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = НовыйЗапросПолучитьТаблицуТоваровКВыгрузке();
	
	Запрос.УстановитьПараметр("ТолькоИзмененные",       Параметры.ЧастичнаяВыгрузка); 
	Запрос.УстановитьПараметр("ПравилоОбмена",          Параметры.ПравилоОбмена);
	Запрос.УстановитьПараметр("Узел",                   Параметры.УзелИнформационнойБазы);
	Запрос.УстановитьПараметр("Склад",                  Параметры.ПравилоОбмена.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ВыгружатьГруппыТоваров", ВыгружатьГруппыТоваров);
	Запрос.УстановитьПараметр("РегистрироватьПриИзмененииОстатка", РегистрироватьКОбменуПриИзмененииОстатка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ТаблицаТоваровПоПравилу", ТаблицаТоваровПоПравилу);
	Запрос.УстановитьПараметр("ВыгружатьГруппыТоваров",  ВыгружатьГруппыТоваров);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("PLU",							Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("SKU",							Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("SKUГруппы",					Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",					Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",				Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Партия",						Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС",					Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("ТипНоменклатуры",				Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Артикул",						Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Описание",						Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения",				Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",					Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеПолное",			Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",						Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("МассивШтрихкодов",				Новый ОписаниеТипов("Массив"));
	ТаблицаТоваров.Колонки.Добавить("Цена",							Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",						Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ЭтоГруппа",					Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Остаток",						Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ЕстьОшибки",					Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ИндексКартинкиЕстьИзменения",	Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("НоменклатураНаименование",		Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ПартияНаименование",			Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНаименование",	Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("КодНалога",					Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Алкоголь",						Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Маркируемый",					Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("КодВидаАлкогольнойПродукции",	Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЕмкостьТары",					Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Крепость",						Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ИННПроизводителя",				Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("КПППроизводителя",				Новый ОписаниеТипов("Строка"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоКодам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоКодам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Выборка = ВыборкаПоКодам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Штрихкод = СокрЛП(Выборка.Штрихкод);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.PLU) Тогда
				
				НоваяСтрока.PLU								= Выборка.КодТовараPLU;
				НоваяСтрока.SKU								= Выборка.КодТовараSKU;
				НоваяСтрока.SKUГруппы						= ?(ВыгружатьГруппыТоваров, Выборка.SKUГруппы, 0);
				НоваяСтрока.Наименование					= ПечатьДокументовУНФ.ПредставлениеНоменклатурыДляПечати(
					Выборка.НоменклатураНаименование,
					Выборка.ХарактеристикаНаименование);
					
				НоваяСтрока.НаименованиеПолное				= ПечатьДокументовУНФ.ПредставлениеНоменклатурыДляПечати(
					Выборка.НоменклатураНаименованиеПолное,
					Выборка.ХарактеристикаНаименование);

				НоваяСтрока.Остаток							= Выборка.КоличествоОстаток;
				НоваяСтрока.ИндексКартинкиЕстьИзменения		= 0;
				
				НоваяСтрока.Штрихкод						= Штрихкод;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,
					"Номенклатура,
					|Характеристика,
					|ХарактеристикаНаименование,
					|Партия,
					|Весовой,
					|ЭтоГруппа,
					|Артикул,
					|ЕдиницаИзмеренияНаименование,
					|СтавкаНДС,
					|ТипНоменклатуры,
					|ПартияНаименование,
					|НоменклатураНаименование,
					|КодНалога,
					|Алкоголь,
					|Маркируемый,
					|КодВидаАлкогольнойПродукции,
					|ЕмкостьТары,
					|Крепость,
					|ИННПроизводителя,
					|КПППроизводителя,
					|Цена");
				
			Иначе
				НоваяСтрока.Штрихкод = НоваяСтрока.Штрихкод + " " + Штрихкод;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Штрихкод) Тогда
				НоваяСтрока.МассивШтрихкодов.Добавить(Штрихкод);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
			Если (Параметры.СвояНумерацияPLUНаОборудовании И НоваяСтрока.PLU > Параметры.МаксимальныйКодPLU)
				ИЛИ (НоваяСтрока.SKU > ВерхняяГраница) ИЛИ (НоваяСтрока.SKU < НижняяГраница) Тогда
				НоваяСтрока.ЕстьОшибки = Истина;
			КонецЕсли
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаТоваров;

	
КонецФункции


Функция НовыйЗапросПолучитьТаблицуТоваровКВыгрузке() Экспорт
	
	ТекстЗапроса = Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС() + 
	"ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудовании.КодТовараSKU КАК SKUГруппы,
	|	КодыТоваровSKU.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ КодыГрупп
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|		ПО (КодыТоваровPLUНаОборудовании.КодТовараSKU = КодыТоваровSKU.SKU)
	|ГДЕ
	|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровSKU.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И КодыТоваровSKU.Номенклатура.ЭтоГруппа
	|	И &ВыгружатьГруппыТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахИзменения.Регистратор
	|ПОМЕСТИТЬ РегистраторыТоварыНаСкладах
	|ИЗ
	|	РегистрНакопления.Запасы.Изменения КАК ТоварыНаСкладахИзменения
	|ГДЕ
	|	ТоварыНаСкладахИзменения.Узел = &Узел
	|	И &РегистрироватьПриИзмененииОстатка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Характеристика
	|ПОМЕСТИТЬ ТоварыСИзменившемсяОстатком
	|ИЗ
	|	РегистрНакопления.Запасы КАК ТоварыНаСкладах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистраторыТоварыНаСкладах КАК РегистраторыТоварыНаСкладах
	|		ПО ТоварыНаСкладах.Регистратор = РегистраторыТоварыНаСкладах.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТоваровSKU.SKU
	|ПОМЕСТИТЬ SKU_КОбмену
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСИзменившемсяОстатком КАК ТоварыСИзменившемсяОстатком
	|		ПО КодыТоваровSKU.Номенклатура = ТоварыСИзменившемсяОстатком.Номенклатура
	|			И КодыТоваровSKU.Характеристика = ТоварыСИзменившемсяОстатком.Характеристика
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудовании.КодТовараSKU
	|ИЗ
	|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КодыТоваровPLUНаОборудованииИзменения.КодТовараPLU КАК КодТовараPLU,
	|			КодыТоваровPLUНаОборудованииИзменения.ПравилоОбмена КАК ПравилоОбмена
	|		ИЗ
	|			РегистрСведений.КодыТоваровPLUНаОборудовании.Изменения КАК КодыТоваровPLUНаОборудованииИзменения
	|		ГДЕ
	|			КодыТоваровPLUНаОборудованииИзменения.Узел = &Узел
	|			И КодыТоваровPLUНаОборудованииИзменения.ПравилоОбмена = &ПравилоОбмена) КАК PLUКОбмену
	|		ПО КодыТоваровPLUНаОборудовании.КодТовараPLU = PLUКОбмену.КодТовараPLU
	|			И КодыТоваровPLUНаОборудовании.ПравилоОбмена = PLUКОбмену.ПравилоОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТоваровSKU.SKU,
	|	КодыТоваровSKU.Номенклатура,
	|	КодыТоваровSKU.Характеристика,
	|	КодыТоваровSKU.Партия,
	|	ВЫБОР
	|		КОГДА SKU_КОбмену.SKU ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьИзменения
	|ПОМЕСТИТЬ КодыТоваровSKU
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ЛЕВОЕ СОЕДИНЕНИЕ SKU_КОбмену КАК SKU_КОбмену
	|		ПО КодыТоваровSKU.SKU = SKU_КОбмену.SKU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровПоПравилу.PLU,
	|	ТаблицаТоваровПоПравилу.SKU,
	|	ТаблицаТоваровПоПравилу.Весовой,
	|	ТаблицаТоваровПоПравилу.Группа,
	|	ТаблицаТоваровПоПравилу.КоличествоОстаток,
	|	ТаблицаТоваровПоПравилу.Номенклатура,
	|	ТаблицаТоваровПоПравилу.Партия,
	|	ТаблицаТоваровПоПравилу.Характеристика,
	|	ТаблицаТоваровПоПравилу.Цена,
	|	ТаблицаТоваровПоПравилу.ЭтоГруппа
	|ПОМЕСТИТЬ ТаблицаТоваровПоПравилу
	|ИЗ
	|	&ТаблицаТоваровПоПравилу КАК ТаблицаТоваровПоПравилу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровПоПравилу.PLU,
	|	ТаблицаТоваровПоПравилу.SKU,
	|	ТаблицаТоваровПоПравилу.Весовой,
	|	ТаблицаТоваровПоПравилу.Группа,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаТоваровПоПравилу.КоличествоОстаток, 0) КАК ЧИСЛО(15,3)) КАК КоличествоОстаток,
	|	ТаблицаТоваровПоПравилу.Номенклатура,
	|	ТаблицаТоваровПоПравилу.Партия,
	|	ТаблицаТоваровПоПравилу.Характеристика,
	|	ТаблицаТоваровПоПравилу.Цена,
	|	ТаблицаТоваровПоПравилу.ЭтоГруппа,
	|	СпрНоменклатура.Наименование КАК НоменклатураНаименование,
	|	СпрНоменклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	СпрНоменклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	СпрНоменклатура.Артикул КАК Артикул,
	|	ЕСТЬNULL(ВТСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) КАК СтавкаНДС,
	|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СпрНоменклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СпрНоменклатура.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукцииЕГАИС,
	|	СпрНоменклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	СпрНоменклатура.Крепость КАК Крепость,
	|	СпрНоменклатура.ПроизводительИмпортерАлкогольнойПродукции КАК ПроизводительИмпортерАлкогольнойПродукции,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Наименование, &ПустаяСтрока) КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(ПартииНоменклатуры.Наименование, &ПустаяСтрока) КАК ПартияНаименование,
	|	ВЫБОР
	|		КОГДА SKU_КОбмену.SKU ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьИзменения
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровПоПравилу КАК ТаблицаТоваровПоПравилу
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаТоваровПоПравилу.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (СпрНоменклатура.ВидСтавкиНДС = ВТСтавкиНДС.ВидСтавкиНДС)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииНоменклатуры КАК ПартииНоменклатуры
	|		ПО ТаблицаТоваровПоПравилу.Партия = ПартииНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ТаблицаТоваровПоПравилу.Характеристика = ХарактеристикиНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ SKU_КОбмену КАК SKU_КОбмену
	|		ПО ТаблицаТоваровПоПравилу.SKU = SKU_КОбмену.SKU
	|ГДЕ 
	|	НЕ ТаблицаТоваровПоПравилу.SKU ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.PLU КАК КодТовараPLU,
	|	ТаблицаТоваров.SKU КАК КодТовараSKU,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Партия КАК Партия,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТоваров.ЭтоГруппа КАК ЭтоГруппа,
	|	ТаблицаТоваров.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаТоваров.Весовой КАК Весовой,
	|	ТаблицаТоваров.НоменклатураНаименование КАК НоменклатураНаименование,
	|	ТаблицаТоваров.НоменклатураНаименование КАК НоменклатураНаименованиеПолное,
	|	ТаблицаТоваров.ПартияНаименование КАК ПартияНаименование,
	|	ТаблицаТоваров.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаТоваров.Артикул КАК Артикул,
	|	ТаблицаТоваров.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, &ПустаяСтрока) КАК Штрихкод,
	|	ТаблицаТоваров.КоличествоОстаток КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтавкаНДС.Ставка = 18 ИЛИ ТаблицаТоваров.СтавкаНДС.Ставка = 20
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаТоваров.СтавкаНДС.Ставка = 10
	|					ТОГДА 2
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ КАК КодНалога,
	|	ТаблицаТоваров.АлкогольнаяПродукция КАК Алкоголь,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ВидАлкогольнойПродукцииЕГАИС.Маркируемый
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Маркируемый,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ВидАлкогольнойПродукцииЕГАИС.Код
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КодВидаАлкогольнойПродукции,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ОбъемДАЛ * 10
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЕмкостьТары,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.Крепость
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Крепость,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ПроизводительИмпортерАлкогольнойПродукции.ИНН
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИННПроизводителя,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТоваров.ПроизводительИмпортерАлкогольнойПродукции.КПП
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КПППроизводителя,
	|	КодыГрупп.SKUГруппы КАК SKUГруппы,
	|	ТаблицаТоваров.Цена КАК Цена
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО ТаблицаТоваров.Номенклатура = Штрихкоды.Номенклатура
	|			И ТаблицаТоваров.Характеристика = Штрихкоды.Характеристика
	|			И ТаблицаТоваров.Партия = Штрихкоды.Партия
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыГрупп КАК КодыГрупп
	|		ПО ТаблицаТоваров.Группа = КодыГрупп.Номенклатура
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА &ТолькоИзмененные = ИСТИНА
	|				ТОГДА ТаблицаТоваров.ЕстьИзменения = ИСТИНА
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ВыгружатьГруппыТоваров = ЛОЖЬ
	|				ТОГДА НЕ ТаблицаТоваров.ЭтоГруппа
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|ИТОГИ
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	КодТовараPLU";
	
	Возврат Новый Запрос(ТекстЗапроса);
	
КонецФункции

#КонецОбласти
