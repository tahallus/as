
////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры работы с обсуждениями
//
// Для новых объектов и при изменении из списка, изменения в СистемаВзаимодействия записываются регламентным заданием (отложенно)
// Для изменений в форме объектов, изменения в СистемаВзаимодействия записываются фоновым заданием (сразу)
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СистемаВзаимодействия

// Значения заполнения для сообщения обсуждений.
// 
// Возвращаемое значение:
//  Структура
//  * Объект    - ЛюбаяСсылка - Объект-владелец контекстного обсуждения.
//              - ИдентификаторОбсужденияСистемыВзаимодействия - Идентификатор обсуждения.
//  * Текст     - Строка - Текст сообщения.
//  * Дата      - Дата - Дата сообщения.
//  * Автор     - СправочникСсылка.Пользователи - Автор сообщения.
//  * Данные    - Произвольный - Данные, содержащиеся в сообщении.
//  * Действия  - СписокЗначений - 
//  * Системный - Булево - Определяет, надо ли оформить текст в виде системного.
//                         Например, "#Изменено: сумма документа".
// 
Функция НовыйДанныеСообщения() Экспорт
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("Объект", Неопределено);
	ДанныеСообщения.Вставить("Текст", "");
	ДанныеСообщения.Вставить("Дата", Дата(1, 1, 1, 0, 0, 0));
	ДанныеСообщения.Вставить("Автор", Справочники.Пользователи.ПустаяСсылка());
	ДанныеСообщения.Вставить("Данные", Неопределено);
	ДанныеСообщения.Вставить("Действия", Новый СписокЗначений);
	ДанныеСообщения.Вставить("Получатель", Неопределено);
	ДанныеСообщения.Вставить("Системный", Ложь);
	
	Возврат ДанныеСообщения;
	
КонецФункции

// Производит попытку создать произвольное сообщение обсуждения. Если не удается - добавляет сообщение в очередь сообщений.
//
// Параметры:
//  ДанныеСообщения - Структура - См. функцию ОбсужденияУНФ.НовыйДанныеСообщения()
//
Процедура СоздатьСообщение(ДанныеСообщения) Экспорт
	
	Если ТипЗнч(ДанныеСообщения) <> Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru='Передан некорректный параметр ""ДанныеСообщения"" (ожидаемый тип - Структура).'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеСообщения, НовыйДанныеСообщения(), Ложь);
	
	Если НЕ ЗначениеЗаполнено(ДанныеСообщения.Текст) Тогда
		ВызватьИсключение НСтр("ru='Сообщение с пустым текстом не может быть записано.'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСообщения.Автор) Тогда
		ДанныеСообщения.Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСообщения.Дата) Тогда
		ДанныеСообщения.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПопытатьсяСоздатьСообщениеСистемыВзаимодействия(ДанныеСообщения);
	
КонецПроцедуры

// Добавляет сообщение в очередь сообщений.
//
// Параметры:
//  ДанныеСообщения - Структура - См. функцию ОбсужденияУНФ.НовыйДанныеСообщения()
//
Процедура СоздатьСообщениеОтложенно(ДанныеСообщения) Экспорт
	
	Если ТипЗнч(ДанныеСообщения) <> Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru='Передан некорректный параметр ""ДанныеСообщения"" (ожидаемый тип - Структура).'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеСообщения, НовыйДанныеСообщения(), Ложь);
	
	Если НЕ ЗначениеЗаполнено(ДанныеСообщения.Текст) Тогда
		ВызватьИсключение НСтр("ru='Сообщение с пустым текстом не может быть записано.'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСообщения.Автор) Тогда
		ДанныеСообщения.Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСообщения.Дата) Тогда
		ДанныеСообщения.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСообщения.Получатель) = Тип("СправочникСсылка.Сотрудники") И ЗначениеЗаполнено(ДанныеСообщения.Получатель) Тогда
		ДанныеСообщения.Получатель = РегистрыСведений.СотрудникиПользователя.ПолучитьПользователяПоСотруднику(ДанныеСообщения.Получатель);
	КонецЕсли;
	
	ЗаписатьДанныеВРегистрОчереди(ДанныеСообщения);
	
КонецПроцедуры

// Запускает запись отложенных сообщений из очереди непосредственно в систему взаимодействия.
//
Процедура ЗаписатьОтложенныеСообщенияВСистемуВзаимодействияСейчас() Экспорт
	
	ЗаписатьОтложенныеСообщенияВСистемуВзаимодействия();
	
КонецПроцедуры

// Получает объект-владелец обсуждения системы взаимодействия по контексту обсуждения.
//
// Параметры:
//  ИдентификаторОбсуждения	 - ИдентификаторОбсужденияСистемыВзаимодействия
// 
// Возвращаемое значение:
//   - ЛюбаяСсылка
//
Функция РазыменоватьКонтекстОбсуждения(ИдентификаторОбсуждения) Экспорт
	
	Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(ИдентификаторОбсуждения);
	
	Если Обсуждение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Обсуждение.КонтекстОбсуждения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьСсылкуИзНавигационной(Обсуждение.КонтекстОбсуждения.НавигационнаяСсылка)
	
КонецФункции

Функция ПолучитьСообщение(ОбсуждениеИдентификатор, СообщениеИдентификатор) Экспорт
	
	Возврат ПолучитьСообщениеРекурсивно(ОбсуждениеИдентификатор, СообщениеИдентификатор, Неопределено);
	
КонецФункции

Функция ПолучитьОбсуждение(ОбсуждениеИдентификатор) Экспорт
	
	Если ТипЗнч(ОбсуждениеИдентификатор) = Тип("ИдентификаторОбсужденияСистемыВзаимодействия")
		ИЛИ СтрНайти(ОбсуждениеИдентификатор, "-") = 0 Тогда
		Возврат СистемаВзаимодействия.ПолучитьОбсуждение(ОбсуждениеИдентификатор);
	Иначе
		Возврат СистемаВзаимодействия.ПолучитьОбсуждение(
			Новый ИдентификаторОбсужденияСистемыВзаимодействия(ОбсуждениеИдентификатор));
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОбсуждениеСПользователем(Пользователь1, Пользователь2) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ОбсужденияУНФ.ПолучитьОбсуждениеСПользователем", "Пользователь1", Пользователь1, Тип("СправочникСсылка.Пользователи"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ОбсужденияУНФ.ПолучитьОбсуждениеСПользователем", "Пользователь2", Пользователь2, Тип("СправочникСсылка.Пользователи"));
	
	ОтборОбсуждений = Новый ОтборОбсужденийСистемыВзаимодействия;
	ОтборОбсуждений.Групповое = Ложь;
	ОтборОбсуждений.Отображаемое = Истина;
	
	НайденноеОбсуждение = Неопределено;
	НайденныеОбсуждения = СистемаВзаимодействия.ПолучитьОбсуждения(ОтборОбсуждений);
	
	ИдентификаторПользователь1 = ИдентификаторПользователя(Пользователь1);
	ИдентификаторПользователь2 = ИдентификаторПользователя(Пользователь2);
	
	Для каждого Обсуждение Из НайденныеОбсуждения Цикл
		Если ЗначениеЗаполнено(Обсуждение.Заголовок)
			ИЛИ Обсуждение.Участники.Количество() <> 2 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обсуждение.Участники.Содержит(ИдентификаторПользователь1)
			И Обсуждение.Участники.Содержит(ИдентификаторПользователь2) Тогда
			НайденноеОбсуждение = Обсуждение;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НайденноеОбсуждение <> Неопределено Тогда
		Возврат НайденноеОбсуждение;
	КонецЕсли;
	
	НовоеЛичноеОбсуждение = СоздатьЛичноеОбсуждениеПользователей(ИдентификаторПользователь1, ИдентификаторПользователь2);
	
	Возврат НовоеЛичноеОбсуждение;
	
КонецФункции

// Получает контекстное обсуждение системы взаимодействия по навигационной ссылке.
//  В случае если такое обсуждение еще не создано - создает его.
//
// Параметры:
//  НавигационнаяСсылка - Строка - Навигационная ссылка на объект информационной базы.
//  Заголовок           - Строка - Заголовок обсуждения.
// 
// Возвращаемое значение:
//   - ОбсуждениеСистемыВзаимодействия
//
Функция ПолучитьКонтекстноеОбсуждениеПоНавигационнойСсылке(НавигационнаяСсылка, Заголовок = "") Экспорт
	
	Если Заголовок = "" Тогда
		Заголовок = НСтр("ru='История'");
	КонецЕсли;
	
	Обсуждение = Неопределено;
	
	#Если НЕ ВнешнееСоединение Тогда
	КонтекстОбсуждения = Новый КонтекстОбсужденияСистемыВзаимодействия(НавигационнаяСсылка);
	
	ОтборОбсуждений = Новый ОтборОбсужденийСистемыВзаимодействия();
	ОтборОбсуждений.КонтекстноеОбсуждение = Истина;
	ОтборОбсуждений.КонтекстОбсуждения = КонтекстОбсуждения;
	
	ОбсужденияПоОбъекту = СистемаВзаимодействия.ПолучитьОбсуждения(ОтборОбсуждений);
	
	Если ОбсужденияПоОбъекту.Количество() <> 0 Тогда
		Возврат ОбсужденияПоОбъекту[0];
	КонецЕсли;
	
	Обсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
	Обсуждение.Заголовок = Заголовок;
	Обсуждение.КонтекстОбсуждения = КонтекстОбсуждения;
	
	Обсуждение.Записать();
	#КонецЕсли
	
	Возврат Обсуждение;
	
КонецФункции

// Получает идентификатор пользователя системы взаимодействия.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//   - ИдентификаторПользователяСистемыВзаимодействия, Неопределено
//
Функция ИдентификаторПользователя(Пользователь) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ОбсужденияУНФ.ИдентификаторПользователя", "Пользователь", Пользователь, Тип("СправочникСсылка.Пользователи"));
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		ВызватьИсключение НСтр("ru='Не заполнено значение параметра ""Пользователь""'");
	КонецЕсли;
	
	Возврат СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));
	
КонецФункции

// Получает контекстное обсуждение системы взаимодействия по указанному объекту.
// В случае если такое обсуждение еще не создано - создает его.
//
// Параметры:
//  ОбъектСсылка - ЛюбаяСсылка
// 
// Возвращаемое значение:
//   - ОбсуждениеСистемыВзаимодействия
//
Функция ПолучитьКонтекстноеОбсуждение(ОбъектСсылка) Экспорт
	
	Обсуждение = Неопределено;
	
	#Если НЕ ВнешнееСоединение Тогда
	КонтекстОбсуждения = Новый КонтекстОбсужденияСистемыВзаимодействия(ПолучитьНавигационнуюСсылку(ОбъектСсылка));
	
	ОтборОбсуждений = Новый ОтборОбсужденийСистемыВзаимодействия();
	ОтборОбсуждений.КонтекстноеОбсуждение = Истина;
	ОтборОбсуждений.КонтекстОбсуждения = КонтекстОбсуждения;
	
	ОбсужденияПоОбъекту = СистемаВзаимодействия.ПолучитьОбсуждения(ОтборОбсуждений);
	
	Если ОбсужденияПоОбъекту.Количество() <> 0 Тогда
		Возврат ОбсужденияПоОбъекту[0];
	КонецЕсли;
	
	Обсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
	Обсуждение.Заголовок = СтрШаблон(НСтр("ru = 'История %1'"), ОбъектСсылка);
	Обсуждение.КонтекстОбсуждения = КонтекстОбсуждения;
	
	Обсуждение.Записать();
	#КонецЕсли
	
	Возврат Обсуждение;
	
КонецФункции

// Находит последнее сообщение конкретного пользователя в указанном обсуждении.
//
// Параметры:
//  ОбсуждениеИдентификатор	 - ОбсуждениеСистемыВзаимодействия
//  Пользователь			 - ИдентификаторПользователяСистемыВзаимодействия, ПользовательСистемыВзаимодействия, СправочникСсылка.Пользователи
//  После					 - ИдентификаторСообщенияСистемыВзаимодействия - Если параметр передан, возвращаются сообщения после указанного.
// 
// Возвращаемое значение:
//   - СообщениеСистемыВзаимодействия, Неопределено
//
Функция ПолучитьПоследнееСообщение(ОбсуждениеИдентификатор, Пользователь = Неопределено, После = Неопределено) Экспорт
	#Если НЕ ВнешнееСоединение Тогда
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ТипыПользователя = Новый Массив;
		ТипыПользователя.Добавить(Тип("ИдентификаторПользователяСистемыВзаимодействия"));
		ТипыПользователя.Добавить(Тип("ПользовательСистемыВзаимодействия"));
		ТипыПользователя.Добавить(Тип("СправочникСсылка.Пользователи"));
		
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ПолучитьПоследнееСообщение", "Пользователь", Пользователь, ТипыПользователя);
	КонецЕсли;
	
	Отбор = Новый ОтборСообщенийСистемыВзаимодействия;
	Отбор.Обсуждение = ОбсуждениеИдентификатор;
	Отбор.Количество = 1;
	Если После <> Неопределено Тогда
		Отбор.После = После;
	КонецЕсли;
	Отбор.НаправлениеСортировки = НаправлениеСортировки.Убыв;
	
	Сообщения = СистемаВзаимодействия.ПолучитьСообщения(Отбор);
	Если Сообщения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		Возврат Сообщения[0];
	КонецЕсли;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		Автор = ИдентификаторПользователя(Пользователь);
	ИначеЕсли ТипЗнч(Пользователь) = Тип("ИдентификаторПользователяСистемыВзаимодействия") Тогда
		Автор = Пользователь;
	ИначеЕсли ТипЗнч(Пользователь) = Тип("ПользовательСистемыВзаимодействия") Тогда
		Автор = Пользователь.Идентификатор;
	КонецЕсли;
	
	Если Сообщения[0].Автор = Автор Тогда
		Возврат Сообщения[0];
	КонецЕсли;
	#КонецЕсли
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает ответственного сотрудника соответствующего пользователю обсуждений.
//
// Параметры:
//  Пользователь - ИдентификаторПользователяСистемыВзаимодействия - Пользователь системы взаимодействия.
// 
// Возвращаемое значение:
//   СправочникСсылка.Сотрудники
//
Функция СотрудникПользователя(ПользовательСВ) Экспорт
	
	ПользовательСправочника = Обсуждения.ПользовательИнформационнойБазы(ПользовательСВ);
	СотрудникиПользователя = РегистрыСведений.СотрудникиПользователя.ПолучитьСотрудниковПользователя(ПользовательСправочника);
	
	Если СотрудникиПользователя.Количество() <> 0 Тогда
		Возврат СотрудникиПользователя[0];
	Иначе
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьПользователяВОбсуждение(Обсуждение, Пользователь) Экспорт
	
	Если ТипЗнч(Обсуждение) = Тип("ОбсуждениеСистемыВзаимодействия") Тогда
		РедактируемоеОбсуждение = Обсуждение;
	Иначе
		РедактируемоеОбсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Обсуждение);
	КонецЕсли;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		НовыйУчастникОбсуждения = Обсуждения.ПользовательСистемыВзаимодействия(Пользователь).Идентификатор;
	Иначе
		НовыйУчастникОбсуждения = Пользователь;
	КонецЕсли;
	
	Если РедактируемоеОбсуждение.Участники.Содержит(НовыйУчастникОбсуждения) Тогда
		Возврат;
	КонецЕсли;
	
	РедактируемоеОбсуждение.Участники.Добавить(НовыйУчастникОбсуждения);
	РедактируемоеОбсуждение.Записать();
	
КонецПроцедуры

Процедура УдалитьПользователяИзОбсуждения(Обсуждение, Пользователь) Экспорт
	
	Если ТипЗнч(Обсуждение) = Тип("ОбсуждениеСистемыВзаимодействия") Тогда
		РедактируемоеОбсуждение = Обсуждение;
	Иначе
		РедактируемоеОбсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Обсуждение);
	КонецЕсли;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		УдаляемыйУчастникОбсуждения = Обсуждения.ПользовательСистемыВзаимодействия(Пользователь).Идентификатор;
	Иначе
		УдаляемыйУчастникОбсуждения = Пользователь;
	КонецЕсли;
	
	Если НЕ РедактируемоеОбсуждение.Участники.Содержит(УдаляемыйУчастникОбсуждения) Тогда
		Возврат;
	КонецЕсли;
	
	РедактируемоеОбсуждение.Участники.Удалить(УдаляемыйУчастникОбсуждения);
	РедактируемоеОбсуждение.Записать();
	
КонецПроцедуры

#КонецОбласти

Процедура ДобавитьОписаниеИзменений(ОписаниеИзменений, ТекстИзменений, Синоним = "") Экспорт
	
	ДобавитьСтроку(ОписаниеИзменений, Синоним + ": " + ТекстИзменений);
	
КонецПроцедуры

Функция ДобавитьСообщениеОбИзмененииРеквизита(СтароеЗначение = Неопределено, НовоеЗначение = Неопределено, Формат = "") Экспорт
	
	// Текст описания изменения формируется автоматически
	Если СтароеЗначение<>Неопределено ИЛИ НовоеЗначение<>Неопределено Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СтароеЗначение)) 
			ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СтароеЗначение))
			Тогда
			ТекстСтарыйОбъект = ПредставлениеСсылки(СтароеЗначение);
		ИначеЕсли НЕ ПустаяСтрока(Формат) Тогда 
			ТекстСтарыйОбъект = Формат(СтароеЗначение, Формат);
		Иначе
			ТекстСтарыйОбъект = Строка(СтароеЗначение);
		КонецЕсли; 
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(НовоеЗначение)) 
			ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(НовоеЗначение))
			Тогда
			ТекстНовыйОбъект = ПредставлениеСсылки(НовоеЗначение);
		ИначеЕсли НЕ ПустаяСтрока(Формат) Тогда 
			ТекстНовыйОбъект = Формат(НовоеЗначение, Формат);
		Иначе
			ТекстНовыйОбъект = Строка(НовоеЗначение)
		КонецЕсли; 
	КонецЕсли; 
	
	ТекстИзменений = "";
	Если СтароеЗначение<>Неопределено ИЛИ НовоеЗначение<>Неопределено Тогда
		Если СтрДлина(Строка(СтароеЗначение) + Строка(НовоеЗначение)) > ДлинаСообщения() Тогда
			ТекстИзменений = ТекстСтарыйОбъект + Символы.ПС + "→" + Символы.ПС + ТекстНовыйОбъект;
		Иначе
			ТекстИзменений = ТекстСтарыйОбъект + " → " + ТекстНовыйОбъект;
		КонецЕсли;
	Иначе
		ТекстИзменений = "";
	КонецЕсли;
	
	Возврат ТекстИзменений;
	
КонецФункции

Процедура ПослеЗаписиНаСервере(ТекущийОбъект) Экспорт
	
	Если НЕ ТекущийОбъект.ДополнительныеСвойства.Свойство("ДляОбсуждений")
		ИЛИ ТекущийОбъект.ДополнительныеСвойства.ДляОбсуждений.Количество()=0
		ИЛИ НЕ ТекущийОбъект.ДополнительныеСвойства.ДляОбсуждений.Свойство("Сообщение") Тогда
		Возврат;
	КонецЕсли;
	
	ИнформационнаяБазаЗарегистрирована = Ложь;
	#Если НЕ ВнешнееСоединение Тогда
		ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	#КонецЕсли
	
	Если НЕ ИнформационнаяБазаЗарегистрирована Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСообщения = НовыйДанныеСообщения();
	ДанныеСообщения.Объект = ТекущийОбъект.Ссылка;
	ДанныеСообщения.Текст = ТекущийОбъект.ДополнительныеСвойства.ДляОбсуждений.Сообщение;
	ДанныеСообщения.Дата = ТекущийОбъект.ДополнительныеСвойства.ДляОбсуждений.МоментВремени;
	ДанныеСообщения.Автор = Пользователи.АвторизованныйПользователь();
	ДанныеСообщения.Системный = Истина;
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ДанныеСообщения);
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить("ОбсужденияУНФ.ПопытатьсяСоздатьСообщениеСистемыВзаимодействия",
		ПараметрыЗадания,, НСтр("ru = 'Логирование изменений в систему взаимодействия'"));
	
КонецПроцедуры

Функция ПолучитьСсылкуИзНавигационной(НС) Экспорт
	
	Если СтрНайти(НС, "e1cib/list/") > 0 Тогда
		Возврат ПредопределенноеЗначение(Сред(НС, 12) + ".ПустаяСсылка").Метаданные().ПредставлениеСписка;
	КонецЕсли;
	
	ПерваяТочка = СтрНайти(НС, "e1cib/data/");
	ВтораяТочка = СтрНайти(НС, "?ref=");
	ТретьяТочка = СтрНайти(НС, "'>");
	
	ПредставлениеТипа   = Сред(НС, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
	ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
	ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НС, ВтораяТочка + 5));
	Если ТретьяТочка> 0 Тогда
		КонецНС = Прав(НС, СтрДлина(НС) - ТретьяТочка+1);
		ЗначениеСсылки = СтрЗаменить(ЗначениеСсылки, КонецНС, "");
	КонецЕсли;
	Попытка
		Возврат ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
	Исключение
		Возврат НСтр("ru = 'Ошибка преобразования: '")+НС;
	КонецПопытки; 
	
КонецФункции

Процедура ДобавитьСистемноеСообщение(ТекстСообщения, Ссылка) Экспорт
	
	СформироватьИСоздатьСистемноеСообщение(ТекстСообщения, Ссылка);
	
КонецПроцедуры

#Область Устаревшие

// Формирует Массив структур, содержащий имена и описания пользователей для использования в тексте обсуждений.
// 
// Возвращаемое значение:
//  Массив           - по числу пользователей: 
//   * Пользователь  - эл. справочника Пользователи
//   * Представление - Строка - Наименование пользователя,
//   * Имя 			 - Строка - Наименование пользователя сплошной строкой с нижним подчеркиванием, по типу "Фамилия_Имя";
//   * ДляПоиска 	 - Строка - Наименование пользователя сплошной строкой с нижним подчеркиванием, по типу "Фамилия_Имя",
//	 				   в нижнем регистре
Функция МассивОписанийПользователей() Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.Наименование КАК Представление
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления
	|	И НЕ Пользователи.Недействителен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураОписания = Новый Структура;
		СтруктураОписания.Вставить("Пользователь", Выборка.Пользователь);
		СтруктураОписания.Вставить("Представление", Выборка.Представление);
		СтруктураОписания.Вставить("Имя", СтрЗаменить(Выборка.Представление, " ", "_"));
		СтруктураОписания.Вставить("ДляПоиска", НРег(СтруктураОписания.Имя));
		Результат.Добавить(СтруктураОписания);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Устарела. Будет удалена в следующей версии программы.
// Добавляет запись обсуждения в регистр сведений Обсуждения для Ссылки, а также для упомянутых (по навигационным
// ссылкам) в тексте комментария объектов, формирует напоминания пользователям, упомянутым в тексте комментария
// Параметры:
//  Комментарий			   Строка 		- текст сообщения
//  Ссылка				   Любая ссылка - ссылка на объект обсуждения
//  МоментВремени          Дата и время - время сохранения сообщения
//  Системный			   Булево 		- Истина для сохранения изменений объекта, Ложь для сохранения комментариев к объекту
//  Пользователь		   Справочник Пользователи - Пользователь, сохраняющий комментарий
//
Процедура ДобавитьСообщение(
	ТекстСообщения,
	Ссылка,
	Дата = Неопределено,
	Системный = Ложь,
	Автор = Неопределено,
	Действия = Неопределено) Экспорт
	
	Если НЕ УправлениеНебольшойФирмойПовтИсп.ЛогироватьИзмененияОбъектов()
		ИЛИ ПустаяСтрока(ТекстСообщения)
		ИЛИ НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Автор) Тогда
		ПользовательАвторСообщения = Автор;
	Иначе
		ПользовательАвторСообщения = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	ДанныеСообщения = НовыйДанныеСообщения();
	ДанныеСообщения.Объект = Ссылка;
	ДанныеСообщения.Текст = ТекстСообщения;
	ДанныеСообщения.Дата = Дата;
	ДанныеСообщения.Автор = ПользовательАвторСообщения;
	ДанныеСообщения.Системный = Системный;
	Если ТипЗнч(Действия) = Тип("СписокЗначений") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Действия, ДанныеСообщения.Действия);
	КонецЕсли;
	
	ЗаписатьВОчередьСистемыВзаимодействия(ДанныеСообщения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Записывает данные об изменениях объекта по подписке на событие.
// См. ПодпискиНаСобытия.ОбсужденияПриЗаписи.
// 
// Параметры:
//  Источник			   - Ссылка объекта, для которого будут записаны данные обсуждений
//  Отказ				   - Отказ записи
// Дополнительно формируются записи: 
//		при наличии поля "Контрагент" - формируется запись в обсуждениях контрагента об упоминании в этом объекте
//		при вводе на основании - формируется запись о введенном дочернем объекте в обсуждении для родительского объекта
Процедура ОбсужденияПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ УправлениеНебольшойФирмойПовтИсп.ЛогироватьИзмененияОбъектов() Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповаяЗагрузкаДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоЗаписьАссистентом") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
		Если ОбщегоНазначения.ЭтоДокумент(Источник.Метаданные()) Тогда
			Сообщение = ?(Источник.Проведен, НСтр("ru = 'Создан и проведен'"), НСтр("ru = 'Создан'"));
		Иначе
			Сообщение = НСтр("ru = 'Создан'");
		КонецЕсли;
		
		Если Источник.ДополнительныеСвойства.Свойство("ЭтоЗаписьДубля") Тогда
			ДобавитьСтроку(Сообщение, Источник.ДополнительныеСвойства.СообщениеОДублированииИнформации);
		КонецЕсли;
		
		СформироватьИСоздатьСистемноеСообщение(Сообщение, Источник.Ссылка);
		ДобавитьЗаписьУпоминаниеКонтрагента(,Источник);
		ДобавитьЗаписьВводНаОсновании(Источник);
	КонецЕсли;
	
КонецПроцедуры

// Записывает данные об изменениях объекта по подписке на событие.
// См. ПодпискиНаСобытия.ОбсужденияПередЗаписьюДокумента, ПодпискиНаСобытия.ОбсужденияПередЗаписьюСправочника.
// 
// Параметры:
//  Источник			   - Ссылка объекта, для которого будут записаны данные обсуждений
//  Отказ				   - Отказ записи
//  РежимЗаписи			   - Режим записи объекта
//  РежимПроведения		   - Режим проведения объекта
//   Если объект новый и еще не сохранен, запись обсуждений передается в процедуру ОбсужденияПриЗаписи, где уже есть
//   ссылка объекта
// В ДополнительныеСвойства передаются параметры: 
//	Модифицированность		- модифицированность объекта в форме
Процедура ОбсужденияПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ УправлениеНебольшойФирмойПовтИсп.ЛогироватьИзмененияОбъектов() Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповаяЗагрузкаДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ОбсуждениеЗаписано") Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоЗаписьАссистентом") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ДляОбсуждений", Новый Структура);
	
	Если ОбщегоНазначения.ЭтоДокумент(Источник.Метаданные()) Тогда
		Сообщение = ОбсужденияСравнитьОбъектыДокумент(Источник, РежимЗаписи, РежимПроведения);
	ИначеЕсли ОбщегоНазначения.ЭтоСправочник(Источник.Метаданные()) Тогда
		Сообщение = ОбсужденияСравнитьОбъектыСправочник(Источник);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Сообщение) Тогда
		
		ИнформационнаяБазаЗарегистрирована = Ложь;
		#Если НЕ ВнешнееСоединение Тогда
			ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
		#КонецЕсли
		
		Если ИнформационнаяБазаЗарегистрирована Тогда
			Если Источник.ДополнительныеСвойства.Свойство("Модифицированность") Тогда // Запись из формы фоновым заданием в ПослеЗаписи
				МоментВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ПолучитьЧасовойПоясИнформационнойБазы());
				Источник.ДополнительныеСвойства.ДляОбсуждений.Вставить("Сообщение", Сообщение);
				Источник.ДополнительныеСвойства.ДляОбсуждений.Вставить("МоментВремени", МоментВремени);
			Иначе // запись регламентным заданием
				СформироватьИСоздатьСистемноеСообщение(Сообщение, Источник.Ссылка);
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПопытатьсяСоздатьСообщениеСистемыВзаимодействия(ДанныеСообщения) Экспорт
	
	#Если НЕ ВнешнееСоединение Тогда
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Попытка
		Если ТипЗнч(ДанныеСообщения.Объект) = Тип("ИдентификаторОбсужденияСистемыВзаимодействия")
			ИЛИ ТипЗнч(ДанныеСообщения.Объект) = Тип("Строка") Тогда
			Обсуждение = ПолучитьОбсуждение(ДанныеСообщения.Объект);
		ИначеЕсли ТипЗнч(ДанныеСообщения.Объект) = Тип("СправочникСсылка.Пользователи") Тогда
			Обсуждение = ПолучитьОбсуждениеСПользователем(ДанныеСообщения.Объект, ДанныеСообщения.Автор);
		Иначе
			Обсуждение = ПолучитьКонтекстноеОбсуждение(ДанныеСообщения.Объект);
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписатьДанныеВРегистрОчереди(ДанныеСообщения);
		ЗаписатьОшибкуВЖР(
			НСтр("ru = 'Получение сообщений системы взаимодействия'",ОбщегоНазначения.КодОсновногоЯзыка()),
			ТекстОшибки, ДанныеСообщения.Объект);
		Возврат;
	КонецПопытки;
	
	Если Обсуждение.КонтекстОбсуждения <> Неопределено Тогда
		// Снимаем наблюдение, чтобы пользователь не получал уведомление сам себе.
		БылРежимНаблюдения = СистемаВзаимодействия.ПолучитьРежимНаблюдения(Обсуждение.Идентификатор);
		Если БылРежимНаблюдения Тогда
			СистемаВзаимодействия.УстановитьРежимНаблюдения(Обсуждение.Идентификатор, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Текст = ДанныеСообщения.Текст;
	Если ДанныеСообщения.Системный Тогда
		ОформитьСистемныйТекст(Текст);
	КонецЕсли;
	
	Попытка
		// Создаем сообщение.
		НовоеСообщение = СистемаВзаимодействия.СоздатьСообщение(Обсуждение.Идентификатор);
		НовоеСообщение.Текст = Текст;
		НовоеСообщение.Дата = ДанныеСообщения.Дата;
		НовоеСообщение.Автор = ИдентификаторПользователя(ДанныеСообщения.Автор);
		
		Если ЗначениеЗаполнено(ДанныеСообщения.Получатель) Тогда
			НовоеСообщение.Получатели.Добавить(ИдентификаторПользователя(ДанныеСообщения.Получатель));
		КонецЕсли;
		
		Если ДанныеСообщения.Данные <> Неопределено Тогда
			НовоеСообщение.Данные = ДанныеСообщения.Данные;
		КонецЕсли;
		
		Если ДанныеСообщения.Действия <> Неопределено И ТипЗнч(ДанныеСообщения.Действия) = Тип("СписокЗначений") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСообщения.Действия, НовоеСообщение.Действия);
		КонецЕсли;
		
		НовоеСообщение.Записать();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписатьДанныеВРегистрОчереди(ДанныеСообщения);
		ЗаписатьОшибкуВЖР(
			НСтр("ru = 'Запись нового сообщения системы взаимодействия'",ОбщегоНазначения.КодОсновногоЯзыка()),
			ТекстОшибки, ДанныеСообщения.Объект);
	КонецПопытки;
	
	Если Обсуждение.КонтекстОбсуждения <> Неопределено Тогда
		// Возвращаем наблюдение.
		Если БылРежимНаблюдения Тогда
			СистемаВзаимодействия.УстановитьРежимНаблюдения(Обсуждение.Идентификатор, Истина);	
		КонецЕсли;
	КонецЕсли;
	
	#КонецЕсли

КонецПроцедуры

// Обработчик регламентного задания ЗаписьСообщенийВСистемуВзаимодействия.
//
Процедура ЗаписатьОтложенныеСообщенияВСистемуВзаимодействия() Экспорт
	
	#Если НЕ ВнешнееСоединение Тогда
		
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗаписьСообщенийВСистемуВзаимодействия);
	
	ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	Если ИнформационнаяБазаЗарегистрирована = Ложь ИЛИ ИнформационнаяБазаЗарегистрирована = Неопределено Тогда
		
		ИспользованиеРеглЗаданияЗаписьСообщенийВСистемуВзаимодействия(Ложь);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьСообщенийСистемыВзаимодействия.Объект КАК Ссылка,
	|	ОчередьСообщенийСистемыВзаимодействия.МоментВремени КАК МоментВремени,
	|	ОчередьСообщенийСистемыВзаимодействия.Пользователь КАК Пользователь,
	|	ОчередьСообщенийСистемыВзаимодействия.Комментарий КАК Комментарий,
	|	ОчередьСообщенийСистемыВзаимодействия.Пользователь.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	|	ОчередьСообщенийСистемыВзаимодействия.Данные КАК Данные,
	|	ОчередьСообщенийСистемыВзаимодействия.Действия КАК Действия,
	|	ОчередьСообщенийСистемыВзаимодействия.Получатель КАК Получатель,
	|	ОчередьСообщенийСистемыВзаимодействия.Получатель.ИдентификаторПользователяИБ КАК ПолучательИдентификаторПользователяИБ,
	|	ОчередьСообщенийСистемыВзаимодействия.Системный КАК Системный
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийСистемыВзаимодействия КАК ОчередьСообщенийСистемыВзаимодействия
	|ИТОГИ ПО
	|	Ссылка,
	|	Пользователь";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
			ИспользованиеРеглЗаданияЗаписьСообщенийВСистемуВзаимодействия(Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ВыборкаОбъект = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъект.Следующий() Цикл
		
		ВыборкаОбъектПользователь = ВыборкаОбъект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОбъектПользователь.Следующий() Цикл
			
			Попытка
				Если ТипЗнч(ВыборкаОбъектПользователь.Ссылка) = Тип("Строка") Тогда
					Обсуждение = ПолучитьОбсуждение(ВыборкаОбъектПользователь.Ссылка);
					Если Обсуждение = Неопределено Тогда
						// Общее Обсуждение (по ключу) может отсутствовать:
						//  - либо еще не создано прикладной логикой,
						//  - либо ранее было выполнено отключение/подключение обсуждений (происходит отправка старых сообщений).
						// В таком случае сообщение некуда отправить, т.к. обсуждение должна создать ответственная за него прикладная логика.
						Продолжить;
					КонецЕсли;
				ИначеЕсли ТипЗнч(ВыборкаОбъектПользователь.Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда
					Обсуждение = ПолучитьОбсуждениеСПользователем(ВыборкаОбъектПользователь.Ссылка, ВыборкаОбъектПользователь.Пользователь);
				Иначе
					Обсуждение = ПолучитьКонтекстноеОбсуждение(ВыборкаОбъектПользователь.Ссылка);
				КонецЕсли;
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстОшибки = НСтр("ru='Получение обсуждения по объекту: %1
				|%2'");
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ТекстОшибки = СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки);
				ЗаписатьОшибкуВЖР(
					НСтр("ru = 'Получение сообщений системы взаимодействия'",ОбщегоНазначения.КодОсновногоЯзыка()),
					ТекстОшибки, ВыборкаОбъектПользователь.Ссылка);
				Если СтрНайти(ТекстОшибки, "Пользователь не авторизован") > 0 Тогда
					Прервать;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецПопытки;
			
			Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Обсуждение, "Идентификатор") Тогда
				ЗаписатьОшибкуВЖР(
					СтрШаблон(
						НСтр("ru = 'Получение обсуждения системы взаимодействия для %1 - нет поля Идентификатор'", ОбщегоНазначения.КодОсновногоЯзыка()),
							ВыборкаОбъектПользователь.Ссылка),
					ТекстОшибки, ВыборкаОбъектПользователь.Ссылка);
					Прервать;
			КонецЕсли;
			
			// Снимаем наблюдение, чтобы пользователь не получал уведомление сам себе.
			НужноСнятьВернутьНаблюдение = Пользователи.АвторизованныйПользователь() = ВыборкаОбъектПользователь.Пользователь;
			
			Если НужноСнятьВернутьНаблюдение Тогда
				НужноСнятьВернутьНаблюдение = СистемаВзаимодействия.ПолучитьРежимНаблюдения(Обсуждение.Идентификатор);
			КонецЕсли;
			
			Если НужноСнятьВернутьНаблюдение Тогда
				СистемаВзаимодействия.УстановитьРежимНаблюдения(Обсуждение.Идентификатор, Ложь);
			КонецЕсли;
			
			ЕстьОшибки = Ложь;
			
			ВыборкаЗапись = ВыборкаОбъектПользователь.Выбрать();
			Пока ВыборкаЗапись.Следующий() Цикл
				
				Если ВыборкаЗапись.ИдентификаторПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
					Продолжить;
				КонецЕсли;
				
				Текст = ВыборкаЗапись.Комментарий;
				Если ВыборкаЗапись.Системный Тогда
					ОформитьСистемныйТекст(Текст);
				КонецЕсли;
				
				НовоеСообщение = СистемаВзаимодействия.СоздатьСообщение(Обсуждение.Идентификатор);
				НовоеСообщение.Текст = Текст;
				НовоеСообщение.Дата = ВыборкаЗапись.МоментВремени;
				
				Если ЗначениеЗаполнено(ВыборкаЗапись.Пользователь) И ВыборкаЗапись.Пользователь.ПолучитьОбъект() <> Неопределено Тогда
					НовоеСообщение.Автор = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ВыборкаЗапись.ИдентификаторПользователяИБ);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаЗапись.Получатель) Тогда
					Попытка
						НовоеСообщение.Получатели.Добавить(СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ВыборкаЗапись.ПолучательИдентификаторПользователяИБ));
					Исключение
						// Указанный пользователь Еще не подключен к Системе взаимодействия, игнорируем получателя сообщения.
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
						ЗаписатьОшибкуВЖР(
							НСтр("ru = 'Запись нового сообщения системы взаимодействия'",ОбщегоНазначения.КодОсновногоЯзыка()),
							ТекстОшибки, ВыборкаОбъектПользователь.Ссылка);
					КонецПопытки;
				КонецЕсли;
				
				Данные = ВыборкаЗапись.Данные.Получить();
				Если Данные <> Неопределено Тогда
					НовоеСообщение.Данные = Данные;
				КонецЕсли;
				
				Действия = ВыборкаЗапись.Действия.Получить();
				Если ТипЗнч(Действия) = Тип("СписокЗначений") Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Действия, НовоеСообщение.Действия);
				КонецЕсли;
				
				Если НЕ ТранзакцияАктивна() Тогда
				
					НачатьТранзакцию();
					
					БлокировкаДанных		= Новый БлокировкаДанных;
					ЭлементБлокировки		= БлокировкаДанных.Добавить("РегистрСведений.ОчередьСообщенийСистемыВзаимодействия");
					ЭлементБлокировки.УстановитьЗначение("Объект", ВыборкаОбъектПользователь.Ссылка);
					ЭлементБлокировки.УстановитьЗначение("Пользователь", ВыборкаОбъектПользователь.Пользователь);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					Попытка
						БлокировкаДанных.Заблокировать();
					Исключение
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
						ЗаписатьОшибкуВЖР(
							НСтр("ru = 'Запись отложенного сообщения в систему взаимодействия '",ОбщегоНазначения.КодОсновногоЯзыка()),
							ТекстОшибки, ВыборкаОбъектПользователь.Ссылка);
							
						ОтменитьТранзакцию();
						Прервать;
						
					КонецПопытки;
				
				КонецЕсли; 
				
				Попытка
					НовоеСообщение.Записать();
				Исключение
					ЕстьОшибки = Истина;
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
					ЗаписатьОшибкуВЖР(
						НСтр("ru = 'Запись нового сообщения системы взаимодействия'",ОбщегоНазначения.КодОсновногоЯзыка()),
						ТекстОшибки, ВыборкаОбъектПользователь.Ссылка);
						
					ОтменитьТранзакцию();
					Прервать;
					
				КонецПопытки;
			КонецЦикла;
			
			// Удалим переданные записи из регистра очереди.
			Если НЕ ЕстьОшибки Тогда
				НаборЗаписейОбъект = РегистрыСведений.ОчередьСообщенийСистемыВзаимодействия.СоздатьНаборЗаписей();
				НаборЗаписейОбъект.Отбор.Объект.Установить(ВыборкаОбъектПользователь.Ссылка);
				НаборЗаписейОбъект.Отбор.Пользователь.Установить(ВыборкаОбъектПользователь.Пользователь);
				Попытка
					НаборЗаписейОбъект.Записать();
				Исключение
					ЕстьОшибки = Истина;
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
					ЗаписатьОшибкуВЖР(
						НСтр("ru = 'Удаление записи регистра ОчередьСообщенийСистемыВзаимодействия'",ОбщегоНазначения.КодОсновногоЯзыка()),
						ТекстОшибки, ВыборкаОбъектПользователь.Ссылка);
						
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					
				КонецПопытки;
			КонецЕсли;
			
			Если ТранзакцияАктивна() Тогда
				
				Если ЕстьОшибки Тогда
					ОтменитьТранзакцию();
				Иначе
					ЗафиксироватьТранзакцию();
				КонецЕсли;
				
			КонецЕсли; 
			
			// Возвращаем наблюдение.
			Если НужноСнятьВернутьНаблюдение Тогда
				СистемаВзаимодействия.УстановитьРежимНаблюдения(Обсуждение.Идентификатор, Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаТекстаСообщения

Функция ПредставлениеРеквизита(МетаданныеОбъекта, Имя)
	
	Реквизит=МетаданныеОбъекта.Реквизиты.Найти(Имя);
	Если НЕ Реквизит=Неопределено Тогда
		Возврат ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним);
	КонецЕсли;
	
	Для каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если Реквизит.Имя=Имя Тогда
			Возврат ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним);
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Имя;
	
КонецФункции

Процедура ОформитьСистемныйТекст(Текст)
	
	СтандартныйНаклонныйШрифт = Новый Шрифт(,,,Истина);
	Текст = СтрШаблон(НСтр("ru='#%1'"), Текст);
	Текст = Новый ФорматированнаяСтрока(Текст, СтандартныйНаклонныйШрифт, ЦветаСтиля.ЦветСистемногоСообщения);
	
КонецПроцедуры

Функция СократитьТекстСообщения(ТекстСообщения, Объект, Заголовок="")
	
	ПервыйПробелПослеОграничения = СтрНайти(ТекстСообщения, " ", НаправлениеПоиска.СНачала, ДлинаСообщения());
	Если ПервыйПробелПослеОграничения = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПолноеСообщение = Справочники.СообщенияОбсуждений.СоздатьЭлемент();
	ПолноеСообщение.Наименование = Заголовок;
	ПолноеСообщение.ПолныйТекст = ТекстСообщения;
	ПолноеСообщение.Объект = Объект.Ссылка;
	Попытка
		ПолноеСообщение.Записать();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	НСсылка = ПолучитьНавигационнуюСсылку(ПолноеСообщение.Ссылка);
	
	
	ТекстСообщения = Лев(ТекстСообщения, ПервыйПробелПослеОграничения) + " " + НСсылка;
	
	Возврат ПолноеСообщение.Ссылка;
	
КонецФункции

// Задает длину текстового сообщения, начиная с которой оставшееся сообщение обрезается до трех точек, 
// и будет записано в виде ссылки на полное сообщение в справочник СообщенияОбсуждений
Функция ДлинаСообщения()
	
	Возврат 100;
	
КонецФункции

Процедура ДобавитьСтроку(Строка, ДобавляемаяСтрока)
	
	Если ПустаяСтрока(ДобавляемаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Строка) Тогда
		Строка = Строка + Символы.ПС;
	КонецЕсли;
	
	Строка = "" + Строка + ДобавляемаяСтрока;
	
КонецПроцедуры

Функция ПредставлениеСсылки(Ссылка)
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ПолучитьНавигационнуюСсылку(Ссылка);
	
КонецФункции

#КонецОбласти

#Область ФормированиеКомментарияИзменений

Процедура ДобавитьТекстСтандартныхСообщений(Сообщение, СтарыйОбъект, НовыйОбъект, РежимЗаписи)
	
	Если НЕ СтарыйОбъект.Проведен И РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
		Сообщение = НСтр("ru = 'Проведен'");
	КонецЕсли; 
	
	Если СтарыйОбъект.Проведен И РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения Тогда
		Сообщение = НСтр("ru = 'Проведение отменено'");
	КонецЕсли; 
	
	Если НЕ СтарыйОбъект.ПометкаУдаления И НовыйОбъект.ПометкаУдаления Тогда
		Сообщение = НСтр("ru = 'Помечен на удаление'");
	КонецЕсли; 
	
	Если СтарыйОбъект.ПометкаУдаления И НЕ НовыйОбъект.ПометкаУдаления Тогда
		Сообщение = НСтр("ru = 'Снята пометка на удаление'");
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеИзмененийРеквизитов(СтруктураРеквизитов, СтарыйОбъект, НовыйОбъект)
	
	МетаданныеОбъекта = НовыйОбъект.Метаданные();
	ОписаниеИзменений = "";
	
	ИзмененДоговор = Ложь;
	ИзмененКонтрагент = Ложь;
	
	Для каждого Реквизит Из СтруктураРеквизитов Цикл
		
		Если СтарыйОбъект[Реквизит.Ключ]=НовыйОбъект[Реквизит.Ключ] Тогда
			Продолжить;
		КонецЕсли;

		// Текст описания изменения формируется автоматически
		Синоним = ПредставлениеРеквизита(МетаданныеОбъекта, Реквизит.Ключ);
		СтароеЗначение = СтарыйОбъект[Реквизит.Ключ];
		НовоеЗначение = НовыйОбъект[Реквизит.Ключ];
		
		// Не выводим договор, если он был изменен вместе с контрагентом
		Если Реквизит.Ключ = "Договор" Тогда
			ИзмененДоговор = Истина;
			Продолжить;
		КонецЕсли; 
		Если Реквизит.Ключ = "Контрагент" Тогда
			ИзмененКонтрагент = Истина;
		КонецЕсли; 
		
		ТекстИзменений = ДобавитьСообщениеОбИзмененииРеквизита(СтароеЗначение, НовоеЗначение);
		
		// Сокращение текста сообщения
		Если ТипЗнч(СтароеЗначение) = Тип("Строка") 
			И СтрДлина(Строка(СтароеЗначение) + Строка(НовоеЗначение)) > ДлинаСообщения() Тогда
			
			Сокращение = СократитьТекстСообщения(ТекстИзменений, НовыйОбъект, Синоним+": ");
			
			Если НЕ НовыйОбъект.ДополнительныеСвойства.ДляОбсуждений.Свойство("Сокращение") Тогда
				НовыйОбъект.ДополнительныеСвойства.ДляОбсуждений.Вставить("Сокращения", Новый Соответствие);
			КонецЕсли;
			Если ЗначениеЗаполнено(Сокращение) Тогда
				НовыйОбъект.ДополнительныеСвойства.ДляОбсуждений.Сокращения.Вставить(Сокращение);
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьОписаниеИзменений(ОписаниеИзменений, ТекстИзменений, Синоним);
	
	КонецЦикла;
	
	Если СтруктураРеквизитов.Свойство("Договор") И НЕ ИзмененКонтрагент И СтарыйОбъект.Договор <> НовыйОбъект.Договор Тогда
		ТекстИзменений = ДобавитьСообщениеОбИзмененииРеквизита(СтарыйОбъект.Договор, НовыйОбъект.Договор);
		ДобавитьОписаниеИзменений(ОписаниеИзменений, ТекстИзменений, Синоним);
	КонецЕсли;
	
	Возврат ОписаниеИзменений;
	
КонецФункции

Функция ОписаниеИзмененийКонтактнойИнформации(СтарыйОбъект, НовыйОбъект)
	
	Если НовыйОбъект.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	СтараяТЧ = СтарыйОбъект.КонтактнаяИнформация.Выгрузить();
	НоваяТЧ = НовыйОбъект.КонтактнаяИнформация;
	
	МассивСтарыхЗначений = СтараяТЧ.ВыгрузитьКолонку("Представление");
	МассивНовыхЗначений = НоваяТЧ.ВыгрузитьКолонку("Представление");
	
	ТекстИзменений = ОписаниеСравненияМассивов(МассивСтарыхЗначений, МассивНовыхЗначений);
	
	Если НЕ ПустаяСтрока(ТекстИзменений) Тогда
		ТекстИзменений = НСтр("ru = 'Контактная информация: '") + ТекстИзменений;
	КонецЕсли;
	
	Возврат ТекстИзменений;
	
КонецФункции

Функция ОписаниеСравненияМассивов(МассивСтарыхЗначений, МассивНовыхЗначений)
	
	Результат = "";
	
	СписокДобавленных = Новый СписокЗначений;
	СписокУдаленных = Новый СписокЗначений;
	Для каждого Элемент Из МассивСтарыхЗначений Цикл
		Если МассивНовыхЗначений.Найти(Элемент)=Неопределено И СписокУдаленных.НайтиПоЗначению(Элемент)=Неопределено Тогда
			СписокУдаленных.Добавить(Элемент);
		КонецЕсли; 
	КонецЦикла; 
	Для каждого Элемент Из МассивНовыхЗначений Цикл
		Если МассивСтарыхЗначений.Найти(Элемент)=Неопределено И СписокДобавленных.НайтиПоЗначению(Элемент)=Неопределено Тогда
			СписокДобавленных.Добавить(Элемент);
		КонецЕсли; 
	КонецЦикла;
	
	Если СписокДобавленных.Количество() = 0 И СписокУдаленных.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Если СписокДобавленных.Количество() > 0 И СписокУдаленных.Количество() > 0 Тогда
		Результат = НСтр("ru='Удалены: %1, Добавлены: %2'");
		Результат = СтрШаблон(Результат, Строка(СписокУдаленных), Строка(СписокДобавленных));
		Возврат Результат;
	КонецЕсли; 
	
	Если СписокУдаленных.Количество() > 0 Тогда
		Результат = НСтр("ru = 'Удалены: %1'");
		Результат = СтрШаблон(Результат, Строка(СписокУдаленных));
	КонецЕсли;
	
	Если СписокДобавленных.Количество() > 0 Тогда
		Результат = НСтр("ru = 'Добавлены: %1'");
		Результат = СтрШаблон(Результат, Строка(СписокДобавленных));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбсужденияСравнитьОбъектыСправочник(НовыйОбъект)
	
	СтруктураПроверяемыхРеквизитов = РеквизитыДляПроверкиИзмененийСправочник(НовыйОбъект);
	СтарыйОбъект = ДанныеСправочникаВыборка(НовыйОбъект, СтруктураПроверяемыхРеквизитов);
	
	Сообщение = "";
	Если НЕ СтарыйОбъект.ПометкаУдаления И НовыйОбъект.ПометкаУдаления Тогда
		Сообщение = НСтр("ru = 'Помечен на удаление'");
	КонецЕсли; 
	
	Если СтарыйОбъект.ПометкаУдаления И НЕ НовыйОбъект.ПометкаУдаления Тогда
		Сообщение = НСтр("ru = 'Снята пометка на удаление'");
	КонецЕсли;
	
	ЕстьРеквизитНедействителен = СтруктураПроверяемыхРеквизитов.Свойство("Недействителен") И ТипЗнч(СтарыйОбъект.Недействителен) = Тип("Булево");
	
	Если ЕстьРеквизитНедействителен И НЕ СтарыйОбъект.Недействителен И НовыйОбъект.Недействителен Тогда
		Сообщение = НСтр("ru = 'Помечен недействительным'");
		СтруктураПроверяемыхРеквизитов.Удалить("Недействителен");
	КонецЕсли;
	
	Если ЕстьРеквизитНедействителен И СтарыйОбъект.Недействителен И НЕ НовыйОбъект.Недействителен Тогда
		Сообщение = НСтр("ru = 'Снята пометка недействителен'");
		СтруктураПроверяемыхРеквизитов.Удалить("Недействителен");
	КонецЕсли;
	
	Если НовыйОбъект.ДополнительныеСвойства.Свойство("ЭтоЗаписьДубля") Тогда
		ДобавитьСтроку(Сообщение, НовыйОбъект.ДополнительныеСвойства.СообщениеОДублированииИнформации);
	КонецЕсли;
	
	ОписаниеИзменений = ОписаниеИзмененийРеквизитов(СтруктураПроверяемыхРеквизитов, СтарыйОбъект, НовыйОбъект);
	ОписаниеИзмененийКИ = ОписаниеИзмененийКонтактнойИнформации(СтарыйОбъект, НовыйОбъект);
	
	ДобавитьСтроку(Сообщение, ОписаниеИзменений);
	ДобавитьСтроку(Сообщение, ОписаниеИзмененийКИ);
	
	ДобавитьЗаписьУпоминаниеКонтрагента(СтарыйОбъект, НовыйОбъект);
	
	Возврат Сообщение;
	
КонецФункции

Функция ОбсужденияСравнитьОбъектыДокумент(НовыйОбъект, РежимЗаписи, РежимПроведения)
	
	СтруктураПроверяемыхРеквизитов = РеквизитыДляПроверкиИзмененийДокумент(НовыйОбъект);
	СтарыйОбъект = ДанныеДокументаВыборка(НовыйОбъект, СтруктураПроверяемыхРеквизитов);
	
	Сообщение = "";
	ДобавитьТекстСтандартныхСообщений(Сообщение, СтарыйОбъект, НовыйОбъект, РежимЗаписи);
	
	ОбъектМодифицирован = Неопределено;
	Если НовыйОбъект.ДополнительныеСвойства.Свойство("Модифицированность") Тогда
		ОбъектМодифицирован = НовыйОбъект.ДополнительныеСвойства.Модифицированность;
		Если ОбъектМодифицирован = Ложь Тогда
			Возврат Сообщение;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеИзменений = ОписаниеИзмененийРеквизитов(СтруктураПроверяемыхРеквизитов, СтарыйОбъект, НовыйОбъект);
	
	ДобавитьЗаписьУпоминаниеКонтрагента(СтарыйОбъект, НовыйОбъект);
	
	Если ОписаниеИзменений = "" И ОбъектМодифицирован = Истина Тогда
		Если Сообщение = "" Тогда
			// Изменены реквизиты, не входящие в список для проверки
			Сообщение = НСтр("ru = 'Изменен документ'");
		КонецЕсли;
	Иначе
		ДобавитьСтроку(Сообщение, ОписаниеИзменений);
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Процедура ДобавитьЗаписьУпоминаниеКонтрагента(СтарыйОбъект=Неопределено, НовыйОбъект)
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовыйОбъект, "Контрагент") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтарыйОбъект = Неопределено  Тогда
		// Вызов из несохраненного документа.
		Сообщение = НСтр("ru='Добавлен в: %1'");
		Сообщение = СтрШаблон(Сообщение, ПредставлениеСсылки(НовыйОбъект.Ссылка));
		СформироватьИСоздатьСистемноеСообщение(Сообщение, НовыйОбъект.Контрагент);
	ИначеЕсли СтарыйОбъект.Контрагент <> НовыйОбъект.Контрагент Тогда
		Сообщение = НСтр("ru = 'Добавлен в: %1'");
		Сообщение = СтрШаблон(Сообщение, ПредставлениеСсылки(НовыйОбъект.Ссылка));
		СформироватьИСоздатьСистемноеСообщение(Сообщение, НовыйОбъект.Контрагент);
		
		Сообщение = НСтр("ru = 'Удален из: %1'");
		Сообщение = СтрШаблон(Сообщение, ПредставлениеСсылки(СтарыйОбъект.Ссылка));
		СформироватьИСоздатьСистемноеСообщение(Сообщение, СтарыйОбъект.Контрагент);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗаписьВводНаОсновании(Источник)
	
	СписокДокументовОснований = Новый СписокЗначений;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "ДокументОснование")
		И ЗначениеЗаполнено(Источник.ДокументОснование) Тогда
		СписокДокументовОснований.Добавить(Источник.ДокументОснование);
	Иначе
		СписокДокументовОснований = ПолучитьРодительскийДокумент(Источник.Ссылка);
	КонецЕсли;
	
	Если СписокДокументовОснований.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение = НСтр("ru = 'Использован в: %1'");
	Сообщение = СтрШаблон(Сообщение, ПредставлениеСсылки(Источник.Ссылка));
	Для каждого Документ Из СписокДокументовОснований Цикл
		ДокументОснование = Документ.Значение;
		СформироватьИСоздатьСистемноеСообщение(Сообщение, ДокументОснование);
	КонецЦикла; 
	
КонецПроцедуры

Функция РеквизитыДляПроверкиИзмененийДокумент(ДокументОбъект)
	
	ВсеРеквизиты = УправлениеНебольшойФирмойПовтИсп.ПроверяемыеРеквизитыОбсуждения();
	РеквизитыДокумента = "";
	ИмяДокумента = ДокументОбъект.Метаданные().Имя;
	
	Если ВсеРеквизиты.Свойство(ИмяДокумента) Тогда
		РеквизитыДокумента = ВсеРеквизиты[ИмяДокумента];	
	КонецЕсли;
	
	Возврат Новый Структура(РеквизитыДокумента);
	
КонецФункции

Функция ДанныеСправочникаВыборка(СправочникОбъект, СтруктураПроверяемыхРеквизитов)
	
	ТекстПолей = "";
	Для каждого КлючИЗначение Из СтруктураПроверяемыхРеквизитов Цикл
		
		ИмяПоля = КлючИЗначение.Ключ;
		ТекстПолей  = ТекстПолей + "
		|	," + ИмяПоля + " КАК " + ИмяПоля;
		
	КонецЦикла;
	
	ТекстТабличнойЧасти = "";
	Если СправочникОбъект.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация")<>Неопределено Тогда
		Если СправочникОбъект.Метаданные().ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("Представление") <> Неопределено Тогда
			ТекстТабличнойЧасти = " 
			| ,КонтактнаяИнформация.(
			|		Представление КАК Представление
			|)";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СправочникОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|Ссылка КАК Ссылка,
	|ПометкаУдаления КАК ПометкаУдаления
	|" + ТекстПолей + "
	|
	|" + ТекстТабличнойЧасти + "
	|ИЗ
	|	" + СправочникОбъект.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

Функция ДанныеДокументаВыборка(ДокументОбъект, СтруктураПроверяемыхРеквизитов)
	
	ТекстПолей = "";
	Для каждого КлючИЗначение Из СтруктураПроверяемыхРеквизитов Цикл
		
		ИмяПоля = КлючИЗначение.Ключ;
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + ИмяПоля;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|Ссылка КАК Ссылка,
	|Проведен КАК Проведен,
	|ПометкаУдаления КАК ПометкаУдаления,
	|" + ТекстПолей + "
	|
	|ИЗ
	|	" + ДокументОбъект.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

Функция РеквизитыДляПроверкиИзмененийСправочник(СправочникОбъект)
	
	СтруктураПроверяемыхРеквизитов = Новый Структура("
	|Наименование,
	|Комментарий,
	|ИНН,
	|КПП,
	|Контрагент,
	|Договор,
	|Ответственный,
	|НаименованиеПолное,
	|ВестиРасчетыПоДоговорам,
	|ВестиРасчетыПоДокументам,
	|ВестиРасчетыПоЗаказам,
	|ВестиУчетОплатыПоСчетам,
	|ВидКонтрагента,
	|СостояниеЛида,
	|Недействителен");
	
	РеквизитыСправочника = СправочникОбъект.Метаданные().Реквизиты;
	СтандартныеРеквизитыСправочника = СправочникОбъект.Метаданные().СтандартныеРеквизиты;
	РеквизитыКУдалению = Новый Массив;
	Для каждого КлючИЗначение Из СтруктураПроверяемыхРеквизитов Цикл
		Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта(КлючИЗначение.Ключ, СтандартныеРеквизитыСправочника) = Истина Тогда
			Продолжить;
		КонецЕсли;
		Если РеквизитыСправочника.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		РеквизитыКУдалению.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Для каждого УдаляемыйРеквизит Из РеквизитыКУдалению Цикл
		СтруктураПроверяемыхРеквизитов.Удалить(УдаляемыйРеквизит);
	КонецЦикла;
	
	Возврат СтруктураПроверяемыхРеквизитов;
	
КонецФункции

#КонецОбласти

#Область ОчередьСообщенийСистемыВзаимодействия

Процедура ЗаписатьДанныеВРегистрОчереди(ДанныеСообщения)
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеСообщения, НовыйДанныеСообщения(), Ложь);
	
	Менеджер = РегистрыСведений.ОчередьСообщенийСистемыВзаимодействия.СоздатьМенеджерЗаписи();
	Менеджер.Объект        = ДанныеСообщения.Объект;
	Менеджер.МоментВремени = ?(ЗначениеЗаполнено(ДанныеСообщения.Дата), ДанныеСообщения.Дата, ТекущаяДатаСеанса());
	Менеджер.Комментарий   = ДанныеСообщения.Текст;
	Менеджер.Пользователь  = ДанныеСообщения.Автор;
	Если ТипЗнч(ДанныеСообщения.Данные) <> Неопределено Тогда
		Менеджер.Данные    = Новый ХранилищеЗначения(ДанныеСообщения.Данные);
	КонецЕсли;
	Если ТипЗнч(ДанныеСообщения.Действия) = Тип("СписокЗначений") И ДанныеСообщения.Действия.Количество() > 0 Тогда
		Менеджер.Действия  = Новый ХранилищеЗначения(ДанныеСообщения.Действия);
	КонецЕсли;
	Менеджер.Получатель    = ДанныеСообщения.Получатель;
	Менеджер.Системный     = ДанныеСообщения.Системный;
	Менеджер.Записать(Истина);
	
	ИспользованиеРеглЗаданияЗаписьСообщенийВСистемуВзаимодействия(Истина);
	
КонецПроцедуры

Процедура ЗаписатьВОчередьСистемыВзаимодействия(ДанныеСообщения)
	
	Если НЕ ЗначениеЗаполнено(ДанныеСообщения.Автор) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСообщения.Автор) = Тип("СправочникСсылка.Пользователи")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСообщения.Автор, "Служебный") Тогда
		// Нельзя записать сообщение от имени служебного пользователя
		Возврат;
	КонецЕсли;
	
	ЗаписатьДанныеВРегистрОчереди(ДанныеСообщения);
	
КонецПроцедуры

Процедура ИспользованиеРеглЗаданияЗаписьСообщенийВСистемуВзаимодействия(Использование)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяПользователя = "";
	Если Пользователи.АвторизованныйПользователь() = Пользователи.СсылкаНеуказанногоПользователя(Ложь) Тогда
		ПользовательАссистент = АссистентУправления.ПользовательАссистент();
		Если ПользовательАссистент <> Неопределено И ПользовательАссистент <> Справочники.Пользователи.ПустаяСсылка() Тогда
			ИмяПользователя = Пользователи.СвойстваПользователяИБ(ПользовательАссистент.ИдентификаторПользователяИБ).Имя;
		КонецЕсли;
	Иначе
		ИмяПользователя = Строка(ПользователиИнформационнойБазы.ТекущийПользователь().Имя)
	КонецЕсли;
	
	МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ЗаписьСообщенийВСистемуВзаимодействия));
	Если МассивЗаданий.Количество()=0 Тогда
		
		Если Использование = Истина Тогда
			
			Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ЗаписьСообщенийВСистемуВзаимодействия);
			Задание.Использование = Использование;
			Задание.ИмяПользователя = ИмяПользователя;
			Задание.Ключ = "ЗаписьСообщенийВСистемуВзаимодействия";
			Задание.Наименование = "Запись сообщений в систему взаимодействия";
			Задание.Расписание = РасписаниеРегламентногоЗаданияПоУмолчанию();
			Задание.Записать();
			
		КонецЕсли;
		
	Иначе
		Задание = МассивЗаданий[0];
		Если Задание.Использование <> Использование ИЛИ НЕ Задание.ИмяПользователя = Строка(ПользователиИнформационнойБазы.ТекущийПользователь().Имя) Тогда
			Задание.Использование = Использование;
			Задание.ИмяПользователя = ИмяПользователя;
			Задание.Записать();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Функция РасписаниеРегламентногоЗаданияПоУмолчанию()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание							= Новый РасписаниеРегламентногоЗадания;
	Расписание.ДниНедели				= ДниНедели;
	Расписание.ПериодПовтораВТечениеДня	= 300; // 5 минут
	Расписание.ПериодПовтораДней		= 1; // каждый день
	Расписание.Месяцы					= Месяцы;
	
	Возврат Расписание;
	
КонецФункции

#КонецОбласти

#Область СистемаВзаимодействия

Функция СоздатьЛичноеОбсуждениеПользователей(ИдентификаторПользователь1, ИдентификаторПользователь2)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовоеОбсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
	НовоеОбсуждение.Групповое = Ложь;
	НовоеОбсуждение.Участники.Добавить(ИдентификаторПользователь1);
	НовоеОбсуждение.Участники.Добавить(ИдентификаторПользователь2);
	НовоеОбсуждение.Записать();
	Возврат НовоеОбсуждение;
	
КонецФункции

Функция ПолучитьСообщениеРекурсивно(ОбсуждениеИдентификатор, СообщениеИдентификатор, СообщениеИдентификаторПосле = Неопределено)
	
	#Если НЕ ВнешнееСоединение Тогда
	Отбор = Новый ОтборСообщенийСистемыВзаимодействия;
	Отбор.Обсуждение = ОбсуждениеИдентификатор;
	Если ЗначениеЗаполнено(СообщениеИдентификаторПосле) Тогда
		Отбор.После = СообщениеИдентификатор;
	КонецЕсли;
	
	Сообщения = СистемаВзаимодействия.ПолучитьСообщения(Отбор);
	
	Если Сообщения.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Сообщение не найдено.'");
	КонецЕсли;
	
	Для каждого Сообщение Из Сообщения Цикл
		Если Сообщение.Идентификатор = СообщениеИдентификатор Тогда
			Возврат Сообщение;
		КонецЕсли;
	КонецЦикла;
	
	ПолучитьСообщениеРекурсивно(ОбсуждениеИдентификатор, СообщениеИдентификатор, Сообщения[Сообщения.ВГраница()]);
	#КонецЕсли
	
КонецФункции

#КонецОбласти

Процедура ЗаписатьОшибкуВЖР(ИмяСобытия, Комментарий, Ссылка)
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , Ссылка, Комментарий);
	
КонецПроцедуры

Функция ПолучитьРодительскийДокумент(ДокументСсылка)
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	СписокРеквизитов = Новый СписокЗначений;
	мУжеВСписке = Новый Соответствие;
	
	Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		ТипыРеквизита = Реквизит.Тип.Типы();
		Для Каждого ТекущийТип Из ТипыРеквизита Цикл
			МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
			
			Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
				 И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
				Попытка
					ЗначениеРеквизита = ДокументСсылка[Реквизит.Имя];
				Исключение
					Прервать;
				КонецПопытки;
				Если ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая() И ТипЗнч(ЗначениеРеквизита) = ТекущийТип 
					 И мУжеВСписке[ЗначениеРеквизита] = Неопределено И СписокРеквизитов.НайтиПоЗначению(ДокументСсылка[Реквизит.Имя]) = Неопределено Тогда
					Попытка
						СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
					Исключение
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						ОтладкаТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		
		Если МетаданныеДокумента = Метаданные.Документы.СверкаВзаиморасчетов Тогда
			
			Прервать;
			
		КонецЕсли;
		
		СтрРеквизитов = "";
		
		Попытка
			СодержимоеТЧ = ДокументСсылка[ТЧ.Имя].Выгрузить();
		Исключение
			Прервать;
		КонецПопытки;
		
		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
			ТипыРеквизита = Реквизит.Тип.Типы();
			Для Каждого ТекущийТип Из ТипыРеквизита Цикл
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
				Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
					И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
					СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ Из СодержимоеТЧ.Колонки Цикл
			Для Каждого СтрокаТЧ Из СодержимоеТЧ Цикл
				Попытка
					ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
				Исключение
					Продолжить;
				КонецПопытки;
				МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
				Если МетаданныеЗначения = Неопределено Тогда
					// Базовый тип.
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая()
					 И Метаданные.Документы.Содержит(МетаданныеЗначения)
					 И мУжеВСписке[ЗначениеРеквизита] = Неопределено Тогда
					Если СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
						Попытка
							СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
						Исключение
							ИнформацияОбОшибке = ИнформацияОбОшибке();
							ОтладкаТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокРеквизитов;
	
КонецФункции

Процедура СформироватьИСоздатьСистемноеСообщение(ТекстСообщения, Ссылка)
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УправлениеНебольшойФирмойПовтИсп.ЛогироватьИзмененияОбъектов() Тогда
		Возврат;
	КонецЕсли;
	
	Автор = Пользователи.АвторизованныйПользователь();
	
	ДанныеСообщения = НовыйДанныеСообщения();
	ДанныеСообщения.Объект = Ссылка;
	ДанныеСообщения.Текст = ТекстСообщения;
	ДанныеСообщения.Дата = ТекущаяДатаСеанса();
	ДанныеСообщения.Автор = Автор;
	ДанныеСообщения.Системный = Истина;
	
	ЗаписатьВОчередьСистемыВзаимодействия(ДанныеСообщения);
	
КонецПроцедуры

#КонецОбласти
