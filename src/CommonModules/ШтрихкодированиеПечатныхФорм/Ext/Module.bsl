
#Область ПрограммныйИнтерфейс

// Возвращает числовой код для печати штрихкода
//
//	Параметры:
//		Ссылка - ЛюбаяСсылка - ссылка на объект, по которому нужно получить код
//	Возвращаемое значение:
//		Строка - строка из чисел, соответствующая переданной ссылке.
//
Функция ЧисловойКодПоСсылке(Ссылка) Экспорт
	ШестнадцатеричноеЧисло = СтрЗаменить(Строка(Ссылка.УникальныйИдентификатор()), "-", "");
	Возврат ПреобразоватьИзШестнадцатеричнойСистемыСчисленияВДесятичноеЧисло(ШестнадцатеричноеЧисло);
КонецФункции

// Функция - Получить ссылку по штрихкоду табличного документа
//
// Параметры:
//  Штрихкод - Строка - Штрихкод
//  Менеджеры - Массив - Менеджеры документов.
// 
// Возвращаемое значение:
//  Массив - Ссылки на документы
//
Функция ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры = Неопределено) Экспорт

	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Штрихкод, Ложь, Ложь) Или ПустаяСтрока(Штрихкод) Тогда
		Возврат Новый Массив;
	КонецЕсли;

	ШтрихкодВШестнадцатеричномВиде = ПреобразоватьДесятичноеЧислоВШестнадцатеричнуюСистемуСчисления(Число(Штрихкод));
	Пока СтрДлина(ШтрихкодВШестнадцатеричномВиде) < 32 Цикл
		ШтрихкодВШестнадцатеричномВиде = "0" + ШтрихкодВШестнадцатеричномВиде;
	КонецЦикла;

	Идентификатор = СтрШаблон("%1-%2-%3-%4-%5",
							  Сред(ШтрихкодВШестнадцатеричномВиде, 1, 8),
							  Сред(ШтрихкодВШестнадцатеричномВиде, 9, 4),
							  Сред(ШтрихкодВШестнадцатеричномВиде, 13, 4),
							  Сред(ШтрихкодВШестнадцатеричномВиде, 17, 4),
							  Сред(ШтрихкодВШестнадцатеричномВиде, 21, 12));

	Если СтрДлина(Идентификатор) <> 36 Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Запрос = Новый Запрос;

	МассивСсылок = Новый Массив;
	ПервыйЗапрос = Истина;
	Для Каждого Менеджер Из МенеджерыОбъектов(Менеджеры) Цикл

		Попытка
			Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		Исключение
			Продолжить;
		КонецПопытки;

		МетаданныеСсылки = Ссылка.Метаданные();
		Если Не ПравоДоступа("Чтение", МетаданныеСсылки) Тогда
			Продолжить;
		КонецЕсли;

		МассивСсылок.Добавить(Ссылка);

		Если Не ПервыйЗапрос Тогда
			Запрос.Текст = Запрос.Текст + "ОБЪЕДИНИТЬ ВСЕ
										  |";
		КонецЕсли;

		Запрос.Текст = Запрос.Текст
					   + "ВЫБРАТЬ"
					   + ?(ПервыйЗапрос, " " + "РАЗРЕШЕННЫЕ" + " ", " ")
					   + "Таблица.Ссылка КАК Ссылка
						 |ИЗ "
					   + МетаданныеСсылки.ПолноеИмя()
					   + " КАК Таблица
						 |ГДЕ Ссылка В (&МассивСсылок)
						 |";

		ПервыйЗапрос = Ложь;

	КонецЦикла;

	Если Не ПервыйЗапрос Тогда
		Запрос.Параметры.Вставить("МассивСсылок", МассивСсылок);
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Возврат Новый Массив;
	КонецЕсли;

КонецФункции

// Вывести штрихкод в табличный документ
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//  Макет - Макет - Табличный документ
//  ОбластьМакета - ОбластьТабличногоДокумента - Область
//  Ссылка - ЛюбаяСсылка - Ссылка на документ из которого будет вычислен штрихкод.
//
Процедура ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, Знач ОбластьМакета, Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыводитьШтрихкодВОтдельнуюОбласть = Ложь;
	Если Не ЕстьКартинкаШтрихкодаВОбластиМакета(ОбластьМакета) Тогда
		// Картинки штрихкода в этой области макета нет.
		
		Если Макет.Области.Найти("ОбластьШтрихкода") <> Неопределено Тогда
			
			// Проверить картинку штрихкода в области "Штрихкод"
			ОбластьМакетаШтрихкод = Макет.ПолучитьОбласть("ОбластьШтрихкода");
			Если ЕстьКартинкаШтрихкодаВОбластиМакета(ОбластьМакетаШтрихкод) Тогда
				ОбластьМакета = ОбластьМакетаШтрихкод;
				ВыводитьШтрихкодВОтдельнуюОбласть = Истина;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкодированиеПечатныхФормОбъектов") Тогда
		ОбластьМакета.Рисунки.Удалить(ОбластьМакета.Рисунки.КартинкаШтрихкода);
		Возврат;
	КонецЕсли;
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	ПараметрыШтрихкода.Ширина = Окр(ОбластьМакета.Рисунки.КартинкаШтрихкода.Ширина / КоличествоМиллиметровВПикселе);
	ПараметрыШтрихкода.Высота = Окр(ОбластьМакета.Рисунки.КартинкаШтрихкода.Высота / КоличествоМиллиметровВПикселе);
	ПараметрыШтрихкода.Штрихкод = СокрЛП(ЧисловойКодПоСсылке(Ссылка));
	ПараметрыШтрихкода.ТипКода = 4; // Code128
	ПараметрыШтрихкода.ОтображатьТекст = Ложь;
	ПараметрыШтрихкода.РазмерШрифта = 6;
	
	ИзображениеШтрихкода = ГенерацияШтрихкодаВызовСервера.ИзображениеШтрихкода(ПараметрыШтрихкода);
	
	ОбластьМакета.Рисунки.КартинкаШтрихкода.Картинка = ИзображениеШтрихкода.Картинка;
	
	Если ВыводитьШтрихкодВОтдельнуюОбласть Тогда
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПреобразоватьДесятичноеЧислоВШестнадцатеричнуюСистемуСчисления(Знач ДесятичноеЧисло)
	
	Результат = "";
	
	Пока ДесятичноеЧисло > 0 Цикл
		ОстатокОтДеления = ДесятичноеЧисло % 16;
		ДесятичноеЧисло = (ДесятичноеЧисло - ОстатокОтДеления) / 16;
		Результат = Сред("0123456789abcdef", ОстатокОтДеления + 1, 1) + Результат;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразоватьИзШестнадцатеричнойСистемыСчисленияВДесятичноеЧисло(Знач Значение)
	
	Значение = НРег(Значение);
	ДлинаСтроки = СтрДлина(Значение);
	
	Результат = 0;
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		Результат = Результат * 16 + СтрНайти("0123456789abcdef", Сред(Значение, НомерСимвола, 1)) - 1;
	КонецЦикла;
	
	Возврат Формат(Результат, "ЧГ=0");
	
КонецФункции

Функция МенеджерыОбъектов(Знач Менеджеры)
	
	Результат = Новый Массив;
	
	Если Менеджеры = Неопределено Тогда
		Для Каждого ЭлементМетаданных Из Метаданные.Документы Цикл
			Результат.Добавить(Документы[ЭлементМетаданных.Имя]);
		КонецЦикла;
	Иначе
		Для Каждого ПустаяСсылка Из Менеджеры Цикл
			ТипСсылки = ТипЗнч(ПустаяСсылка);
			
			Если Документы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
				Результат.Добавить(Документы[ПустаяСсылка.Метаданные().Имя]);
				
			ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
				Результат.Добавить(Справочники[ПустаяСсылка.Метаданные().Имя]);
				
			ИначеЕсли Задачи.ТипВсеСсылки(ТипСсылки).СодержитТип(ТипСсылки) Тогда
				Результат.Добавить(Задачи[ПустаяСсылка.Метаданные().Имя]);
				
			ИначеЕсли БизнесПроцессы.ТипВсеСсылки(ТипСсылки).СодержитТип(ТипСсылки) Тогда
				Результат.Добавить(БизнесПроцессы[ПустаяСсылка.Метаданные().Имя]);
				
			ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки(ТипСсылки).СодержитТип(ТипСсылки) Тогда
				Результат.Добавить(ПланыВидовХарактеристик[ПустаяСсылка.Метаданные().Имя]);
				
			Иначе
				ТекстИсключения = СтрШаблон(
					НСтр("ru = 'Ошибка распознавания штрихкода: тип ""%1"" не поддерживается.'"), ТипСсылки);
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьКартинкаШтрихкодаВОбластиМакета(ОбластьМакета)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КартинкаШтрихкода", Новый УникальныйИдентификатор);
	СтароеЗначение = СтруктураПоиска.КартинкаШтрихкода;
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ОбластьМакета.Рисунки);
	
	Возврат Не СтруктураПоиска.КартинкаШтрихкода = СтароеЗначение;
	
КонецФункции

#КонецОбласти
