#Область СлужебныйПрограммныйИнтерфейс

#Область ОпределениеКомандЭДО

Процедура ПриОпределенииСпискаКомандЭДО(Знач СоставКоманд, Знач ПолноеИмя, Знач НаправлениеЭД, КомандыЭДО) Экспорт
		
	ИспользоватьОбменЭД = ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД");
	ИспользоватьИнтеркампани = ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭДМеждуОрганизациями");	
		
	ЕстьПравоПросмотраЭД           = ЭлектронныеДокументыЭДО.ЕстьПравоЧтенияДокументов();
	ЕстьПравоОбработкиЭД           = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	ЕстьПравоНастройкиОбмена       = НастройкиЭДО.ЕстьПравоНастройкиОбмена();
	ЕстьПравоЧтенияНастройкиОбмена = НастройкиЭДО.ЕстьПравоЧтенияНастройкиОбмена();
	ЕстьПравоОбменаЭД              = СинхронизацияЭДО.ЕстьПравоВыполненияОбмена();
	
	ЕстьПравоВывода = ПравоДоступа("Вывод", Метаданные);
	
	Если СоставКоманд.Договоры.Найти(ПолноеИмя) <> Неопределено
		И ИспользоватьОбменЭД Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНастройкиОтправкиДокументовПоДоговору";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ПригласитьКОбменуЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Настройки отправки документов'");
		КомандаЭДО.Порядок       = 10;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
		
	КонецЕсли;

	Если СоставКоманд.Контрагенты.Найти(ПолноеИмя) <> Неопределено
		И ИспользоватьОбменЭД Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ПригласитьКОбменуЭДО";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ПригласитьКОбменуЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Пригласить к обмену электронными документами'");
		КомандаЭДО.Порядок       = 10;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ДобавитьКонтрагентыБЭД;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоНастройкиОбмена;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНастройкиОтраженияВУчете";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "НастройкиОтраженияВУчете";
		КомандаЭДО.Представление = НСтр("ru = 'Настройки отражения в учете'");
		КомандаЭДО.Порядок       = 20;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЗагрузитьXMLФайлВИнформационнуюБазу;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяРеквизитаУсловия", "ЕстьСвязь");
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "ИнтерфейсДокументовЭДО.ЕстьПриглашенияПоКонтрагенту");
		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Истина);
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНастройкиОтправкиДокументовКонтрагента";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "НастройкиОтправкиДокументов";
		КомандаЭДО.Представление = НСтр("ru = 'Настройки отправки документов'");
		КомандаЭДО.Порядок       = 30;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяРеквизитаУсловия", "ЕстьСвязь");
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "ИнтерфейсДокументовЭДО.ЕстьПриглашенияПоКонтрагенту");
		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Истина);
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
		
	КонецЕсли;
	
	Если СоставКоманд.Организации.Найти(ПолноеИмя) <> Неопределено
		И ИспользоватьОбменЭД Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ПодключитьКЭДО";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ПодключитьКЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Подключить организацию'");
		КомандаЭДО.Порядок       = 10;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ПодключениеБЭД;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "СинхронизацияЭДО.ЕстьУчетныеЗаписи");
		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Ложь);
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьСписокУчетныхЗаписей";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "УчетныеЗаписиЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Учетные записи'");
		КомандаЭДО.Порядок       = 20;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЗаявлениеНаВыпускСертификатаКлюча;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "СинхронизацияЭДО.ЕстьУчетныеЗаписи");
		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Истина);
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
		
		Если ИспользоватьИнтеркампани Тогда
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.НастройкиОтправкиДокументовИнтеркампани";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "НастройкиОтправкиДокументовИнтеркампани";
			КомандаЭДО.Представление = НСтр("ru = 'Настройки отправки документов'");
			КомандаЭДО.Порядок       = 30;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.СохранитьФайлКак;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоНастройкиОбмена;
		КонецЕсли;
		
	КонецЕсли;

	Если СоставКоманд.Исходящие.Найти(ПолноеИмя) <> Неопределено 
			И НаправлениеЭД <> Перечисления.НаправленияЭДО.Входящий Тогда
		
		Если ИспользоватьОбменЭД Тогда
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокументОбъектаУчетаКоманда";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
			КомандаЭДО.Порядок       = 10;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.СформироватьПодписатьОтправитьЭД";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Отправить электронный документ'");
			КомандаЭДО.Порядок       = 20;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйПроизвольныйЭлектронныйДокументНаОсновании";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "СоздатьПроизвольныйДокумент";
			КомандаЭДО.Представление = НСтр("ru = 'Создать произвольный документ'");
			КомандаЭДО.Порядок       = 50;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Скрепка;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОбщее";
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьТекущиеДелаЭДОКоманда";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьТекущиеДелаЭДО";
			КомандаЭДО.Представление = НСтр("ru = 'Текущие дела ЭДО'");
			КомандаЭДО.Порядок       = 30;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьДеревоЭлектронныхДокументов";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ДеревоЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Список электронных документов'");
			КомандаЭДО.Порядок       = 25;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Подсистема;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
		КонецЕсли;
		
		Если ЕстьПравоВывода И СоставКоманд.БезПодписи.Найти(ПолноеИмя) <> Неопределено Тогда
			// Команды из механизма однократных сделок не завязаны на ФО и роли БЭД.
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ВыгрузитьДанныеВФайл";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ВыгрузитьДанныеВФайл";
			КомандаЭДО.Представление = НСтр("ru = 'Выгрузить документ в файл'");
			КомандаЭДО.Порядок       = 50;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ВыгрузитьДанныеИзИнформационнойБазыВXMLФайл;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СоставКоманд.Входящие.Найти(ПолноеИмя) <> Неопределено 
		И НаправлениеЭД <> Перечисления.НаправленияЭДО.Исходящий Тогда
		
		Если ИспользоватьОбменЭД Тогда
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокументОбъектаУчетаКоманда";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
			КомандаЭДО.Порядок       = 10;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьДеревоЭлектронныхДокументов";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ДеревоЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Открыть электронные документы'");
			КомандаЭДО.Порядок       = 20;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Подсистема;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ПерезаполнитьДокумент";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ПерезаполнитьДокумент";
			КомандаЭДО.Представление = НСтр("ru = 'Перезаполнить по электронному документу'");
			КомандаЭДО.Порядок       = 30;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ДобавитьДопСвойствоВНабор;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйПроизвольныйЭлектронныйДокументНаОсновании";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "СоздатьПроизвольныйДокумент";
			КомандаЭДО.Представление = НСтр("ru = 'Создать произвольный документ'");
			КомандаЭДО.Порядок       = 50;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Скрепка;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьТекущиеДелаЭДОКоманда";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьТекущиеДелаЭДО";
			КомандаЭДО.Представление = НСтр("ru = 'Текущие дела ЭДО'");
			КомандаЭДО.Порядок       = 30;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
		КонецЕсли;
		
		Если ЕстьПравоОбменаЭД Тогда
			
			// Команды из механизма однократных сделок не завязаны на ФО и роли БЭД.
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ЗагрузитьДанныеИзФайла";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ЗагрузитьДанныеИзФайла";
			КомандаЭДО.Представление = НСтр("ru = 'Загрузить документ из файла'");
			КомандаЭДО.Порядок       = 50;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЗагрузитьXMLФайлВИнформационнуюБазу;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Ложь;		
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьОбменЭД И ИспользоватьИнтеркампани И СоставКоманд.Интеркампани.Найти(ПолноеИмя) <> Неопределено Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокументОбъектаУчетаКоманда";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
		КомандаЭДО.Порядок       = 10;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.СформироватьПодписатьОтправитьЭД";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Подписать электронный документ'");
		КомандаЭДО.Порядок       = 12;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
			
	КонецЕсли;
	
	ИспользоватьВнутренниеДокументыЭДО = НастройкиЭДО.ИспользуютсяВнутренниеДокументы();
	
	Если ИспользоватьОбменЭД И ИспользоватьВнутренниеДокументыЭДО
		И СоставКоманд.Внутренние.Найти(ПолноеИмя) <> Неопределено Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокументОбъектаУчетаКоманда";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
		КомандаЭДО.Порядок       = 10;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.СформироватьПодписатьОтправитьЭД";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Подписать электронный документ'");
		КомандаЭДО.Порядок       = 20;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ПодписанЭП;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьТекущиеДелаЭДОКоманда";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ОткрытьТекущиеДелаЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Текущие дела ЭДО'");
		КомандаЭДО.Порядок       = 30;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьДеревоЭлектронныхДокументов";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ДеревоЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Список электронных документов'");
		КомандаЭДО.Порядок       = 25;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.Подсистема;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
		КомандаЭДО.ТолькоВоВсехДействиях = Истина;
		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
		
	КонецЕсли;
	
	Если ИспользоватьОбменЭД И ИспользоватьВнутренниеДокументыЭДО
		И СоставКоманд.Организации.Найти(ПолноеИмя) <> Неопределено Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНастройкиВнутреннегоЭДО";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "НастройкиВнутреннегоЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Настройки внутреннего ЭДО'");
		КомандаЭДО.Порядок       = 40;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ПодписанЭП;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;

	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
	   Если ИнтеграцияБСПБЭД.ИсточникиКомандПечати().Найти(Метаданные.НайтиПоПолномуИмени(ПолноеИмя)) <> Неопределено
			И СоставКоманд.Внутренние.Найти(ПолноеИмя) = Неопределено
			И СоставКоманд.Исходящие.Найти(ПолноеИмя) = Неопределено 
			И СоставКоманд.Входящие.Найти(ПолноеИмя) = Неопределено
			И СоставКоманд.Интеркампани.Найти(ПолноеИмя) = Неопределено
			И СоставКоманд.Контрагенты.Найти(ПолноеИмя) = Неопределено 
			И СоставКоманд.Организации.Найти(ПолноеИмя) = Неопределено
			И СоставКоманд.Договоры.Найти(ПолноеИмя) = Неопределено Тогда
		
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОтправитьПечатнуюФормуПоЭДОКоманда";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОтправитьПечатнуюФорму";
			КомандаЭДО.Представление = НСтр("ru = 'ЭДО'");
			КомандаЭДО.Порядок       = 10;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			КомандаЭДО.Отображение   = ОтображениеКнопки.КартинкаИТекст;
			
		КонецЕсли;
	 КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ПросмотрЭлектронногоДокумента

Функция ДанныеФормыПросмотраЭлектронногоДокумента(ЭлектронныйДокумент, ЭтоВходящийЭДО) Экспорт
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов());
	ТекстыЗапроса.Добавить(ЭлектронныеДокументыЭДО.ТекстЗапросаСостоянияДокумента());
	ТекстыЗапроса.Добавить(ЭлектронныеДокументыЭДО.ТекстЗапросаДанныхЭлементовСхемыРегламента(ЭтоВходящийЭДО));
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеФормыПросмотра = Новый Структура;
	ДанныеФормыПросмотра.Вставить("ВыборкаОбъектовУчета", РезультатыЗапроса[0].Выбрать());
	ДанныеФормыПросмотра.Вставить("ВыборкаСостоянияЭДО", РезультатыЗапроса[1].Выбрать());
	
	ДанныеЭлементовСхемы = СформироватьДанныеЭлементовСхемы(РезультатыЗапроса[2].Выгрузить());
	
	ДанныеФормыПросмотра.Вставить("ДанныеЭлементовСхемы", ДанныеЭлементовСхемы);
	
	Возврат ДанныеФормыПросмотра;
	
КонецФункции

Процедура СоздатьРеквизитыИЭлементыДляПредставленияДокумента(Форма, СхемаРегламента) Экспорт
	
	НовыеРеквизитыФормы = Новый Массив;
	ПодготовитьНовыеРеквизитыФормыПоСхемеРегламента(Форма, СхемаРегламента, НовыеРеквизитыФормы);
	
	Если НовыеРеквизитыФормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(НовыеРеквизитыФормы);
	
	Для Каждого РеквизитФормы Из НовыеРеквизитыФормы Цикл
		
		ИмяСтраницы = "Страница" + РеквизитФормы.Имя;
		Страница = Форма.Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Форма.Элементы.СтраницыПредставленийДокумента);
		Страница.Вид = ВидГруппыФормы.Страница;
		Страница.ОтображатьЗаголовок = Ложь;
		Страница.Видимость = Истина;
		
		НовыйЭлемент = Форма.Элементы.Добавить(РеквизитФормы.Имя, Тип("ПолеФормы"), Страница);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлемент.ПутьКДанным = РеквизитФормы.Имя;
		НовыйЭлемент.Редактирование = Ложь;
		
		НовыйЭлемент.УстановитьДействие("ОбработкаРасшифровки","Подключаемый_ТабличныйДокументОбработкаРасшифровки")
		
	КонецЦикла;
	
КонецПроцедуры

Функция УстановленныеПодписи(ЭлементСхемыРегламента, ТипРегламента) Экспорт
	
	Если Не ЗначениеЗаполнено(ЭлементСхемыРегламента.Сообщение) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Подписи = ЭлектронныеДокументыЭДО.УстановленныеПодписи(ЭлементСхемыРегламента.Сообщение);
	
	Если Не ЗначениеЗаполнено(Подписи) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный Тогда
		Для Каждого Подпись Из Подписи Цикл
			ОтветнаяПодпись = Ложь;
			Если ЭлементСхемыРегламента.Статус = Перечисления.СтатусыСообщенийЭДО.Подтвержден
				И ЭлементСхемыРегламента.ДатаИзмененияСтатуса < Подпись.ДатаПодписи Тогда
				ОтветнаяПодпись = Истина;
			КонецЕсли;
			Подпись.Вставить("ОтветнаяПодпись", ОтветнаяПодпись);
		КонецЦикла;
		Возврат Подписи;
	КонецЕсли;
	
	ПодписиПолучателя = Новый Массив;
	ЭлементСхемыИнформацияПолучателя = ИнтерфейсДокументовЭДОКлиентСервер.НайтиЭлементСхемыИнформацияПолучателя(ЭлементСхемыРегламента);
	Если ЭлементСхемыИнформацияПолучателя <> Неопределено
		И ЗначениеЗаполнено(ЭлементСхемыИнформацияПолучателя.Сообщение) Тогда
		ПодписиПолучателя = ЭлектронныеДокументыЭДО.УстановленныеПодписи(ЭлементСхемыИнформацияПолучателя.Сообщение);
	КонецЕсли;
	
	Для Каждого Подпись Из Подписи Цикл
		Подпись.Вставить("ОтветнаяПодпись", ЭлементСхемыРегламента.Направление = Перечисления.НаправленияЭДО.Входящий);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПодписиПолучателя) Тогда
		Возврат Подписи;
	КонецЕсли;
	
	Для Каждого Подпись Из ПодписиПолучателя Цикл
		Подпись.Вставить("ОтветнаяПодпись", ЭлементСхемыРегламента.Направление <> Перечисления.НаправленияЭДО.Входящий);
		Подписи.Добавить(Подпись);
	КонецЦикла;
	
	Возврат Подписи;
	
КонецФункции

// Конструктор параметров визуализации документа.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ВыводитьДопДанные - Булево - признак включения режима вывода дополнительных данных.
// 	* ВыводитьБанковскиеРеквизиты - Булево -  признак включения режима вывода банковских реквизитов.
// 	* ВыводитьКопияВерна - Булево -  признак включения режима вывода отметки "Копия верна".
//
Функция НовыеПараметрыВизуализацииДокумента() Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.НовыеПараметрыВизуализацииДокумента();
	
КонецФункции

Функция ЗапуститьФормированиеПредставленияДанныхДокумента(ЭлементСхемыРегламента, ИдентификаторФормы, ПараметрыВизуализацииДокумента, АдресОписанияСообщения = "") Экспорт
	
	ДвоичныеДанныеФайла = Неопределено;
	
	Если ЗначениеЗаполнено(ЭлементСхемыРегламента.ПрисоединенныйФайл) Тогда
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ЭлементСхемыРегламента.ПрисоединенныйФайл);
	КонецЕсли;
	
	Если ДвоичныеДанныеФайла = Неопределено
		И ЗначениеЗаполнено(АдресОписанияСообщения) Тогда
		ОписаниеСообщения = ПолучитьИзВременногоХранилища(АдресОписанияСообщения);
		ДвоичныеДанныеФайла = ОписаниеСообщения.Данные.Документ.ДвоичныеДанные;
	КонецЕсли;
	
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанныеФайлаОтвета = Неопределено;
	
	ЭлементСхемыИнформацияПолучателя = ИнтерфейсДокументовЭДОКлиентСервер.НайтиЭлементСхемыИнформацияПолучателя(ЭлементСхемыРегламента);
	Если ЭлементСхемыИнформацияПолучателя <> Неопределено
		И ЗначениеЗаполнено(ЭлементСхемыИнформацияПолучателя.ПрисоединенныйФайл) Тогда
		ДвоичныеДанныеФайлаОтвета = РаботаСФайлами.ДвоичныеДанныеФайла(
			ЭлементСхемыИнформацияПолучателя.ПрисоединенныйФайл);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);

	Если ЭлементСхемыРегламента.ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний Тогда
		Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			"ЭлектронныеДокументыЭДО.ПредставлениеДанныхВнутреннегоСообщения", 
			ДвоичныеДанныеФайла);
	Иначе
		Если ЗначениеЗаполнено(ЭлементСхемыРегламента.Сообщение) Тогда
			Если ЭлементСхемыРегламента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
				
				Если ЭлементСхемыИнформацияПолучателя <> Неопределено Тогда
					 Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
						"ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке", 
						ЭлементСхемыРегламента.Сообщение, ЭлементСхемыИнформацияПолучателя.Сообщение, ПараметрыВизуализацииДокумента);
				Иначе
					 Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
						"ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке", 
						ЭлементСхемыРегламента.Сообщение, Неопределено, ПараметрыВизуализацииДокумента);
				КонецЕсли;
			Иначе
				Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
					"ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке", 
					ЭлементСхемыРегламента.Сообщение, Неопределено, ПараметрыВизуализацииДокумента);
			КонецЕсли;
		Иначе
			 Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
				"ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщения", 
				ЭлементСхемыРегламента.ВидДокумента, ДвоичныеДанныеФайла, ДвоичныеДанныеФайлаОтвета, ПараметрыВизуализацииДокумента);
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПредставлениеИнформацииОтправителя(НомерДокумента, ДатаДокумента) Экспорт 
	
	Если ЗначениеЗаполнено(НомерДокумента) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"), Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя,
			НомерДокумента, Формат(ДатаДокумента, "ДЛФ=D;"));
	ИначеЕсли ЗначениеЗаполнено(ДатаДокумента) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 от %2'"), Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя,
			Формат(ДатаДокумента, "ДЛФ=D;"));
	Иначе
		Представление = Строка(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	КонецЕсли;	

	Возврат Представление;

КонецФункции

#КонецОбласти

#Область АлгоритмыУсловнойВидимостиКоманд

Функция ЕстьПриглашенияПоКонтрагенту(Контрагент) Экспорт
	
	Запросы = Новый Массив;
	
	Отбор = СинхронизацияЭДО.НовыйОтборПриглашений();
	Отбор.Контрагент = "&Контрагент";
	ЗапросПриглашений = СинхронизацияЭДО.ЗапросПриглашений("Приглашения", Отбор);
	Запросы.Добавить(ЗапросПриглашений);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ИдентификаторКонтрагента ИЗ Приглашения";
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Возврат Не ИтоговыйЗапрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область РеестрЭлектронныхДокументов

// Формирует реестр электронных документов.
//
// Параметры:
//  ЭлектронныеДокументы - Массив - Электронные документы, по которым необходимо сформировать реестр.
//  КоличествоФайловДокументов - Соответствие:
//   * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Документ.
//   * Значение - Число - Количество файлов по документу.
//
// Возвращаемое значение:
//  ТабличныйДокумент - Сформированный реестр электронных документов.
//
Функция СформироватьРеестрЭлектронныхДокументов(Знач ЭлектронныеДокументы, Знач КоличествоФайловДокументов) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = Обработки.ИнтерфейсДокументовЭДО.ПолучитьМакет("РеестрЭлектронныхДокументов_ru");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.ДатаСоставления = Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ДанныеДокументов = ЭлектронныеДокументыЭДО.ДанныеДокументовДляРеестраЭлектронныхДокументов(ЭлектронныеДокументы);
	
	ОбъектыУчета = ИнтеграцияЭДО.ОбъектыУчетаАктуальныхЭлектронныхДокументов(ЭлектронныеДокументы);
	ОбъектыУчета.Индексы.Добавить("ЭлектронныйДокумент");
	
	НомерСтроки = 1;
	СуммаДокументов = 0;
	КоличествоФайлов = 0;
	
	Для каждого ДанныеДокумента Из ДанныеДокументов Цикл
		
		ЭлектронныйДокумент = ДанныеДокумента.Ссылка;
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		ОбластьСтрока.Параметры.ДатаДокумента = ДанныеДокумента.ДатаДокумента;
		ОбластьСтрока.Параметры.Организация = ДанныеДокумента.Организация;
		ОбластьСтрока.Параметры.Контрагент = ДанныеДокумента.Контрагент;
		ОбластьСтрока.Параметры.СуммаДокумента = ДанныеДокумента.СуммаДокумента;
		
		ОбластьСтрока.Параметры.ПредставлениеДокумента = ДанныеДокумента.ПредставлениеДокумента;
		
		ОбластьСтрока.Параметры.Направление = ДанныеДокумента.НаправлениеКратко;
		
		КоличествоФайловДокумента = КоличествоФайловДокументов[ЭлектронныйДокумент];
		Если КоличествоФайловДокумента <> Неопределено Тогда
			ОбластьСтрока.Параметры.КоличествоФайлов = КоличествоФайловДокумента;
			КоличествоФайлов = КоличествоФайлов + КоличествоФайловДокумента;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
		ОбъектыУчетаДокумента = ОбъектыУчета.НайтиСтроки(Новый Структура("ЭлектронныйДокумент", ЭлектронныйДокумент));
		Для каждого ОбъектУчетаДокумента Из ОбъектыУчетаДокумента Цикл
			НавигационнаяСсылкаОбъектаУчета = ПолучитьНавигационнуюСсылку(ОбъектУчетаДокумента.ОбъектУчета);
			ОбластьОбъектУчета = Макет.ПолучитьОбласть("ОбъектУчета");
			ОбластьОбъектУчета.Параметры.НавигационнаяСсылкаОбъектаУчета = НавигационнаяСсылкаОбъектаУчета;
			ТабличныйДокумент.Вывести(ОбластьОбъектУчета);
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		СуммаДокументов = СуммаДокументов + ДанныеДокумента.СуммаДокумента;
		
	КонецЦикла;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.СуммаДокументов = СуммаДокументов;
	ОбластьПодвал.Параметры.КоличествоФайлов = КоличествоФайлов;
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ПечатьЭлектронныхДокументов

Функция ПредставлениеСообщения(Сообщение, СообщениеОтвета = Неопределено, ПараметрыПечати = Неопределено, ВыводитьШтампыПодписей = Истина) Экспорт
	
	ТабличныйДокумент = ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке(Сообщение, СообщениеОтвета, ПараметрыПечати).ПредставлениеДокумента; 
	
	Если ТабличныйДокумент <> Неопределено
		И ВыводитьШтампыПодписей Тогда
		ЭлектронныеДокументыЭДО.ДополнитьТабличныйДокументШтампамиПодписей(ТабличныйДокумент, Сообщение);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция КомандаПечатиОбъекта(Объект, Идентификатор) Экспорт
	
	Возврат КомандаПечатиОбъектаМетаданных(Объект.Метаданные(), Идентификатор);
	
КонецФункции

// Возвращает представление команды печати объекта.
//
// Параметры:
//  ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных - идентификатор объекта метаданных.
//  ИдентификаторКоманды - Строка - идентификатор команды печати.
//
// Возвращаемое значение:
//  Строка - представление команды печати.
//
Функция ПредставлениеКомандыПечатиОбъекта(ИдентификаторОбъекта, ИдентификаторКоманды) Экспорт
	
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъекта);
	
	КомандаПечати = КомандаПечатиОбъектаМетаданных(ОбъектМетаданных, ИдентификаторКоманды);
	
	Если ЗначениеЗаполнено(КомандаПечати) Тогда
		Возврат КомандаПечати.Представление;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает печатные формы электронных документов.
//
// Параметры:
//  ЭлектронныеДокументы - Массив - Электронные документы, печатные формы которых необходимо сформировать.
//  ПараметрыСоставаПечати - см. ИнтерфейсДокументовЭДО.ПараметрыСоставаПечатиЭлектронныхДокументов().
//  ПараметрыВизуализации - см. ИнтерфейсДокументовЭДО.НовыеПараметрыВизуализацииДокумента().
//
// Возвращаемое значение:
//  Массив - Сформированные печатные формы. Элементы - структуры со свойствами:
//   * ИмяМакета - Строка - Уникальное имя макета.
//   * СинонимМакета - Строка - Наименование макета.
//   * ТабличныйДокумент - ТабличныйДокумент - Сформированная печатная форма.
//   * Ссылка - Ссылка на документ, по которому сформирована печатная форма.
//
Функция СформироватьПечатныеФормыЭлектронныхДокументов(ЭлектронныеДокументы, ПараметрыСоставаПечати, ПараметрыВизуализации) Экспорт
	
	ПечатныеФормы = Новый Массив;
	КоличествоФайловДокументов = Новый Соответствие;
	
	Для каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
		
		КоличествоФайловДокумента = 0;
		
		Сообщение = Неопределено;
		СообщениеОтвета = Неопределено;
		ТехническиеСообщения = Новый Массив;
		
		ДанныеСхемыРегламента = ЭлектронныеДокументыЭДО.ДанныеЭлементовСхемыРегламента(ЭлектронныйДокумент);
		Для каждого ЭлементСхемыРегламента Из ДанныеСхемыРегламента Цикл
			Если ЭлементСхемыРегламента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
				Сообщение = ЭлементСхемыРегламента.Сообщение;
			ИначеЕсли ЭлементСхемыРегламента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя Тогда
				СообщениеОтвета = ЭлементСхемыРегламента.Сообщение;
			Иначе
				ТехническиеСообщения.Добавить(ЭлементСхемыРегламента.Сообщение);
			КонецЕсли;
		КонецЦикла;
		
		ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокумента(ЭлектронныйДокумент);
		
		ЭлектронныйДокументНапечатан = Ложь;
		
		Если ПараметрыСоставаПечати.ПечататьЭлектронныйДокумент Тогда
			
			ТабличныйДокумент = ПредставлениеСообщения(Сообщение, СообщениеОтвета, ПараметрыВизуализации,
				ПараметрыСоставаПечати.ВыводитьШтампыПодписей);
			ИмяМакета = "ЭлектронныйДокумент" + ЭлектронныйДокумент.УникальныйИдентификатор();
			СинонимМакета = ПредставлениеДокумента;
			Если ПараметрыСоставаПечати.ДополнятьСинонимМакетаВидомПечатнойФормы Тогда
				СинонимМакета = СтрШаблон("%1 (%2)", СинонимМакета, НСтр("ru = 'Электронный документ'")); 
			КонецЕсли;
			
			Если ДобавитьПечатнуюФорму(ПечатныеФормы, ИмяМакета, СинонимМакета, ТабличныйДокумент, ЭлектронныйДокумент) Тогда
				ЭлектронныйДокументНапечатан = Истина;
				КоличествоФайловДокумента = КоличествоФайловДокумента + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		НужноПечататьКарточкуЭлектронногоДокумента = ПараметрыСоставаПечати.ПечататьКарточкуЭлектронногоДокумента;
		
		Если Не НужноПечататьКарточкуЭлектронногоДокумента Тогда
			НужноПечататьКарточкуЭлектронногоДокумента =
				ПараметрыСоставаПечати.ПечататьКарточкуЕслиНеУдалосьНапечататьЭлектронныйДокумент
				И ПараметрыСоставаПечати.ПечататьЭлектронныйДокумент И Не ЭлектронныйДокументНапечатан;
		КонецЕсли;
		
		Если НужноПечататьКарточкуЭлектронногоДокумента Тогда
		
			ТабличныйДокумент = ПредставлениеКарточкиСообщения(Сообщение, СообщениеОтвета);
			ИмяМакета = "КарточкаДокумента" + ЭлектронныйДокумент.УникальныйИдентификатор();
			СинонимМакета = ПредставлениеДокумента;
			Если ПараметрыСоставаПечати.ДополнятьСинонимМакетаВидомПечатнойФормы Тогда
				СинонимМакета = СтрШаблон("%1 (%2)", СинонимМакета, НСтр("ru = 'Карточка электронного документа'")); 
			КонецЕсли;
			
			Если ДобавитьПечатнуюФорму(ПечатныеФормы, ИмяМакета, СинонимМакета, ТабличныйДокумент, ЭлектронныйДокумент) Тогда
				КоличествоФайловДокумента = КоличествоФайловДокумента + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыСоставаПечати.ПечататьТехнологическиеКвитанции Тогда
			
			ВидыСообщений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТехническиеСообщения, "ВидСообщения");
			
			Для каждого ТехническоеСообщение Из ТехническиеСообщения Цикл
				
				ТабличныйДокумент = ПредставлениеСообщения(ТехническоеСообщение, СообщениеОтвета, ПараметрыВизуализации,
					ПараметрыСоставаПечати.ВыводитьШтампыПодписей);
				ИмяМакета = "Сообщение" + ТехническоеСообщение.УникальныйИдентификатор();
				СинонимМакета = ПредставлениеДокумента;
				Если ПараметрыСоставаПечати.ДополнятьСинонимМакетаВидомПечатнойФормы Тогда
					Если ТехническоеСообщение = СообщениеОтвета Тогда
						ВидСообщения = НСтр("ru = 'Информация получателя'");
					Иначе
						ВидСообщения = ВидыСообщений[ТехническоеСообщение];
					КонецЕсли;
					СинонимМакета = СтрШаблон("%1 (%2)", СинонимМакета, Строка(ВидСообщения)); 
				КонецЕсли;
				
				Если ДобавитьПечатнуюФорму(ПечатныеФормы, ИмяМакета, СинонимМакета, ТабличныйДокумент, ЭлектронныйДокумент) Тогда
					КоличествоФайловДокумента = КоличествоФайловДокумента + 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		КоличествоФайловДокументов.Вставить(ЭлектронныйДокумент, КоличествоФайловДокумента);
		
	КонецЦикла;
	
	Если ПараметрыСоставаПечати.ПечататьРеестрЭлектронныхДокументов Тогда
		
		ТабличныйДокумент = СформироватьРеестрЭлектронныхДокументов(ЭлектронныеДокументы, КоличествоФайловДокументов);
		ИмяМакета = "РеестрЭлектронныхДокументов";
		СинонимМакета = НСтр("ru = 'Реестр электронных документов'");
		
		ДобавитьПечатнуюФорму(ПечатныеФормы, ИмяМакета, СинонимМакета, ТабличныйДокумент);
		
	КонецЕсли;
	
	Возврат ПечатныеФормы;
	
КонецФункции

// Возвращает параметры для передачи в функцию ИнтерфейсДокументовЭДО.СформироватьПечатныеФормыЭлектронныхДокументов().
//
// Возвращаемое значение:
//  Структура - параметры, определяющие состав печати электронных документов:
//   * ПечататьЭлектронныйДокумент - Булево - Нужно печатать электронные документы.
//   * ПечататьТехнологическиеКвитанции - Булево - Нужно печатать технические документы, подтверждающие
//                                                 прохождение этапов в документообороте.
//   * ПечататьКарточкуЭлектронногоДокумента - Булево - Нужно печатать карточки электронных документов.
//   * ПечататьРеестрЭлектронныхДокументов - Булево - Нужно печатать реестр электронных документов.
//   * ПечататьКарточкуЕслиНеУдалосьНапечататьЭлектронныйДокумент - Булево - Если не удалось напечатать электронный
//                                                                      документ, тогда печатаем карточку документа.
//   * ВыводитьШтампыПодписей - Булево - Нужно выводить штампы подписей.
//   * ДополнятьСинонимМакетаВидомПечатнойФормы - Булево - К синониму макета добавляется вид печатной формы в скобках.
//
Функция ПараметрыСоставаПечатиЭлектронныхДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПечататьЭлектронныйДокумент", Истина);
	Результат.Вставить("ПечататьТехнологическиеКвитанции", Ложь);
	Результат.Вставить("ПечататьКарточкуЭлектронногоДокумента", Ложь);
	Результат.Вставить("ПечататьРеестрЭлектронныхДокументов", Ложь);
	Результат.Вставить("ПечататьКарточкуЕслиНеУдалосьНапечататьЭлектронныйДокумент", Ложь);
	Результат.Вставить("ВыводитьШтампыПодписей", Истина);
	Результат.Вставить("ДополнятьСинонимМакетаВидомПечатнойФормы", Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлектронныхДокументов

// Выгружает электронные документы в формате PDF в файл.
//
// Параметры:
//  ЭлектронныеДокументы - Массив - Электронные документы, которые необходимо выгрузить.
//  ИдентификаторФормы - УникальныйИдентификатор - Для передачи в ПоместитьВоВременноеХранилище().
//
// Возвращаемое значение:
//  Соответствие - Данные о выгруженных файлах:
//   * Ключ - Структура - Данные файла:
//    ** ИмяФайла - Строка
//    ** ИмяБезРасширения - Строка
//    ** Расширение - Строка
//    ** Размер - Число
//   * Значение - Строка - Адрес во временном хранилище, куда помещен файл.
//
Функция СформироватьФайлыВыгрузкиЭДВФорматеPDF(Знач ЭлектронныеДокументы, Знач ИдентификаторФормы) Экспорт
	
	ПараметрыСоставаПечати = ПараметрыСоставаПечатиЭлектронныхДокументов();
	ПараметрыСоставаПечати.ПечататьЭлектронныйДокумент = Истина;
	ПараметрыСоставаПечати.ПечататьТехнологическиеКвитанции = Ложь;
	ПараметрыСоставаПечати.ПечататьКарточкуЭлектронногоДокумента = Ложь;
	ПараметрыСоставаПечати.ПечататьРеестрЭлектронныхДокументов = Ложь; // Реестр будет сформирован позже
	ПараметрыСоставаПечати.ПечататьКарточкуЕслиНеУдалосьНапечататьЭлектронныйДокумент = Ложь;
	ПараметрыСоставаПечати.ВыводитьШтампыПодписей = Истина;
	ПараметрыСоставаПечати.ДополнятьСинонимМакетаВидомПечатнойФормы = Ложь;
	
	ПараметрыВизуализации = НовыеПараметрыВизуализацииДокумента();
	ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = Ложь;
	ПараметрыВизуализации.ВыводитьДопДанные = Ложь;
	ПараметрыВизуализации.ВыводитьКопияВерна = Ложь;
	
	ПечатныеФормы = СформироватьПечатныеФормыЭлектронныхДокументов(ЭлектронныеДокументы, ПараметрыСоставаПечати,
		ПараметрыВизуализации);
	
	АдресКаталога = РаботаСФайламиБЭД.ВременныйКаталог();
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога, "*");
	
	МассивФайлов = Новый Массив;
	КоличествоФайловДокументов = Новый Соответствие;
	
	Для каждого ДанныеПечатнойФормы Из ПечатныеФормы Цикл
		
		ПолноеИмяФайла = АдресКаталога + ДанныеПечатнойФормы.СинонимМакета + ".pdf";
		ПолноеИмяФайла = РаботаСФайламиБЭДКлиентСервер.ОпределитьУникальноеИмяФайла(ПолноеИмяФайла);
		
		ДанныеПечатнойФормы.ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
		
		МассивФайлов.Добавить(ПолноеИмяФайла);
		
		КоличествоФайловДокументов.Вставить(ДанныеПечатнойФормы.Ссылка, 1);
		
	КонецЦикла;
	
	ДокументыСПечатнымиФормами = Новый Массив;
	Для каждого ДанныеПечатнойФормы Из ПечатныеФормы Цикл
		ДокументыСПечатнымиФормами.Добавить(ДанныеПечатнойФормы.Ссылка);
	КонецЦикла;
	ДокументыБезПечатныхФорм = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ЭлектронныеДокументы,
		ДокументыСПечатнымиФормами);
	
	Для каждого ЭлектронныйДокумент Из ДокументыБезПечатныхФорм Цикл
		
		ОсновнойФайл = ЭлектронныеДокументыЭДО.ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент);
		ДанныеФайла = ИнтерфейсДокументовЭДОВызовСервера.ДанныеФайла(ОсновнойФайл);
		
		ПолноеИмяФайла = АдресКаталога + ДанныеФайла.ИмяФайла;
		ПолноеИмяФайла = РаботаСФайламиБЭДКлиентСервер.ОпределитьУникальноеИмяФайла(ПолноеИмяФайла);
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
		
		МассивФайлов.Добавить(ПолноеИмяФайла);
		
		КоличествоФайловДокументов.Вставить(ЭлектронныйДокумент, 1);
		
	КонецЦикла;
	
	СоответствиеДанныеФайлаАдресВХранилище = Новый Соответствие;
	
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат СоответствиеДанныеФайлаАдресВХранилище;
	КонецЕсли;
	
	ПолноеИмяФайла = АдресКаталога + НСтр("ru = 'Реестр электронных документов'") + ".pdf";
	ТабличныйДокумент = ИнтерфейсДокументовЭДО.СформироватьРеестрЭлектронныхДокументов(ЭлектронныеДокументы,
		КоличествоФайловДокументов);
	ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	МассивФайлов.Добавить(ПолноеИмяФайла);
	
	ИмяФайла = СтрШаблон(НСтр("ru = 'Выгрузка от %1'"), Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy;"));
	ИмяФайлаКонтейнера = АдресКаталога + ИмяФайла + ".zip";
	
	РаботаСФайламиБЭД.СформироватьАрхивФайлов(МассивФайлов, ИмяФайлаКонтейнера);
	
	ДвоичныеДанныеКонтейнера = Новый ДвоичныеДанные(ИмяФайлаКонтейнера);
	ДанныеФайла = РаботаСФайламиБЭД.ДанныеФайла(ИмяФайлаКонтейнера);
	ДанныеФайла.Вставить("ЭлектронныеДокументы", ЭлектронныеДокументы);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКонтейнера, ИдентификаторФормы);
	
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога, "*");
	
	СоответствиеДанныеФайлаАдресВХранилище = Новый Соответствие;
	СоответствиеДанныеФайлаАдресВХранилище.Вставить(ДанныеФайла, АдресВХранилище);
	
	Возврат СоответствиеДанныеФайлаАдресВХранилище;
	
КонецФункции

// Выгружает документооборот по электронным документам в файл.
//
// Параметры:
//  ЭлектронныеДокументы - Массив - Электронные документы, которые необходимо выгрузить.
//  ИдентификаторФормы - УникальныйИдентификатор - Для передачи в ПоместитьВоВременноеХранилище().
//
// Возвращаемое значение:
//  Соответствие - Данные о выгруженных файлах:
//   * Ключ - Структура - Данные файла:
//    ** ИмяФайла - Строка
//    ** ИмяБезРасширения - Строка
//    ** Расширение - Строка
//    ** Размер - Число
//   * Значение - Строка - Адрес во временном хранилище, куда помещен файл.
//
Функция СформироватьФайлыВыгрузкиЭДДокументооборотЦеликом(Знач ЭлектронныеДокументы, Знач ИдентификаторФормы) Экспорт
	
	СоответствиеДанныеФайлаАдресВХранилище = Новый Соответствие;
	
	ПрисоединенныеФайлы = ЭлектронныеДокументыЭДО.ПрисоединенныеФайлыЭлектронныхДокументов(ЭлектронныеДокументы);
	ПрисоединенныеФайлы.Индексы.Добавить("ЭлектронныйДокумент");
	
	Если ПрисоединенныеФайлы.Количество() = 0 Тогда
		Возврат СоответствиеДанныеФайлаАдресВХранилище;
	КонецЕсли;
	
	СообщенияЭДО = ПрисоединенныеФайлы.ВыгрузитьКолонку("СообщениеЭДО");
	ТипыСообщенийЭДО = ЭлектронныеДокументыЭДО.ТипыСообщенийКратко(СообщенияЭДО);
	
	АдресКаталога = РаботаСФайламиБЭД.ВременныйКаталог();
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога, "*");
	
	АдресКаталогаФайлов = АдресКаталога + "Файлы" + ПолучитьРазделительПути();
	СоздатьКаталог(АдресКаталогаФайлов);
	
	РасширениеДляФайловПодписи = ЭлектроннаяПодпись.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	
	Для каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
		
		ФайлыДокумента = ПрисоединенныеФайлы.НайтиСтроки(Новый Структура("ЭлектронныйДокумент", ЭлектронныйДокумент));
		Если ФайлыДокумента.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокумента(ЭлектронныйДокумент);
		КаталогДокумента = АдресКаталогаФайлов + ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			ПредставлениеДокумента);
		КаталогДокумента = РаботаСФайламиБЭДКлиентСервер.ОпределитьУникальноеИмяФайла(КаталогДокумента, Истина)
			+ ПолучитьРазделительПути();
		СоздатьКаталог(КаталогДокумента);
		
		Для каждого ФайлДокумента Из ФайлыДокумента Цикл
			
			ПрисоединенныйФайл = ФайлДокумента.ПрисоединенныйФайл;
			
			КаталогСообщения = КаталогДокумента + ТипыСообщенийЭДО[ФайлДокумента.СообщениеЭДО];
			КаталогСообщения = РаботаСФайламиБЭДКлиентСервер.ОпределитьУникальноеИмяФайла(КаталогСообщения, Истина)
				+ ПолучитьРазделительПути();
			
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
			
			ИмяФайла = КаталогСообщения + ДанныеФайла.ИмяФайла;
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанныеФайла.Записать(ИмяФайла);
			
			КоллекцияПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
			Для каждого ВсеСвойстваПодписи Из КоллекцияПодписей Цикл
				ИмяФайлаПодписи = ЭлектроннаяПодписьСлужебныйКлиентСервер.ИмяФайлаПодписи("Подпись",
					ВсеСвойстваПодписи.КомуВыданСертификат, РасширениеДляФайловПодписи);
				ВсеСвойстваПодписи.Подпись.Записать(КаталогСообщения + ИмяФайлаПодписи);
				
				ДанныеПоСертификату = ЭлектроннаяПодписьСлужебный.ДанныеПоСертификату(ВсеСвойстваПодписи, ИдентификаторФормы);
				ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеПоСертификату.АдресСертификата);
				ИмяФайлаСертификата = ЭлектроннаяПодписьСлужебныйКлиентСервер.ИмяФайлаСертификата("Сертификат",
					ВсеСвойстваПодписи.КомуВыданСертификат, ДанныеПоСертификату.РасширениеСертификата);
				ДвоичныеДанныеСертификата.Записать(КаталогСообщения + ИмяФайлаСертификата);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИмяФайла = СтрШаблон(НСтр("ru = 'Выгрузка от %1'"), Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy;"));
	ИмяФайлаКонтейнера = АдресКаталога + ИмяФайла + ".zip";
	
	МассивФайлов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(АдресКаталогаФайлов + "*");
	ПараметрыФормированияАрхива = РаботаСФайламиБЭД.НовыеПараметрыФормированияАрхива();
	ПараметрыФормированияАрхива.РежимСохраненияПутей = РежимСохраненияПутейZIP.СохранятьОтносительныеПути;
	ПараметрыФормированияАрхива.РежимОбработкиПодкаталогов = РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно;
	
	РаботаСФайламиБЭД.СформироватьАрхивФайлов(МассивФайлов, ИмяФайлаКонтейнера, ПараметрыФормированияАрхива);
	
	ДвоичныеДанныеКонтейнера = Новый ДвоичныеДанные(ИмяФайлаКонтейнера);
	ДанныеФайла = РаботаСФайламиБЭД.ДанныеФайла(ИмяФайлаКонтейнера);
	ДанныеФайла.Вставить("ЭлектронныеДокументы", ЭлектронныеДокументы);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКонтейнера, ИдентификаторФормы);
	
	СоответствиеДанныеФайлаАдресВХранилище.Вставить(ДанныеФайла, АдресВХранилище);
	
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога, "*");
	
	Возврат СоответствиеДанныеФайлаАдресВХранилище;
	
КонецФункции

// См. ИнтеграцияБРОЭДО.СформироватьФайлыВыгрузкиЭДДляФНС().
Функция СформироватьФайлыВыгрузкиЭДДляФНС(Знач ЭлектронныеДокументы) Экспорт
	
	Возврат ИнтеграцияБРОЭДО.СформироватьФайлыВыгрузкиЭДДляФНС(ЭлектронныеДокументы);
	
КонецФункции

#КонецОбласти

#Область ОбработкаПредупрежденийКомпонентов

Функция ПолучитьПредупрежденияКомпонентов(КлючНастроекОтправки) Экспорт
	
	Предупреждения = Новый Массив;

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Предупреждения, НастройкиЭДО.ПредупрежденияКомпонента(КлючНастроекОтправки));
	
	Возврат Предупреждения;
	
КонецФункции

#КонецОбласти

#Область РаботаСФормами

Функция ЕстьДействиеПоЭДО(ДоступныеДействия, ДействиеПоЭДО) Экспорт
	Возврат ДоступныеДействия[ДействиеПоЭДО] <> Неопределено
		И ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
КонецФункции

#Область ПредставленияКоманд

Функция ПредставлениеКомандыПодписать(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Подписать пакет'");
		Иначе			
			Возврат НСтр("ru = 'Подписать документ'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Подписать'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыОтправить(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Отправить пакет'");
		Иначе
			Возврат НСтр("ru = 'Отправить документ'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Отправить'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыПодписатьИОтправить(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Подписать и отправить пакет'");
		Иначе			
			Возврат НСтр("ru = 'Подписать и отправить документ'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Подписать и отправить'");
	КонецЕсли;

КонецФункции

Функция ПредставлениеКомандыПринятьАннулирование(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Согласить с аннулированием пакета'");
		Иначе			
			Возврат НСтр("ru = 'Согласить с аннулированием документа'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Согласить с аннулированием'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыОтклонитьАннулирование(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Не согласиться с аннулированием пакета'");		
		Иначе
			Возврат НСтр("ru = 'Не согласиться с аннулированием документа'");		
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Не согласиться с аннулированием'");
	КонецЕсли;

КонецФункции

Функция ПредставлениеКомандыОтклонить(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Отклонить пакет'");
		Иначе			
			Возврат НСтр("ru = 'Отклонить документ'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Отклонить'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыОтклонитьПодписание(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Отказаться от подписания пакета'");
		Иначе			
			Возврат НСтр("ru = 'Отказаться от подписания документа'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Отказаться от подписания'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыПереформировать(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Переформировать пакет'");
		Иначе
			Возврат НСтр("ru = 'Переформировать документ'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Переформировать'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыАннулировать(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат  НСтр("ru = 'Аннулировать пакет'");
		Иначе
			Возврат НСтр("ru = 'Аннулировать документ'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Аннулировать'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыЗакрытьПринудительно(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат  НСтр("ru = 'Закрыть принудительно пакет'");
		Иначе
			Возврат НСтр("ru = 'Закрыть принудительно документ'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Закрыть принудительно'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыОтправитьВАрхив(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Отправить пакет в архив'");
		Иначе
			Возврат НСтр("ru = 'Отправить документ в архив'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Отправить в архив'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыВернутьВРаботу(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Вернуть пакет в работу'");
		Иначе
			Возврат НСтр("ru = 'Вернуть документ в работу'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Вернуть в работу'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыОтправитьПовторно(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Отправить пакет повторно'");			
		Иначе
			Возврат НСтр("ru = 'Отправить документ повторно'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Отправить повторно'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыУтвердить(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Утвердить пакет'");			
		Иначе
			Возврат НСтр("ru = 'Утвердить документ'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Утвердить'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ТекущиеДела

Процедура ИнициализироватьРазделыТекущихДел(ОписаниеРазделов) Экспорт
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Входящие", НСтр("ru = 'Входящие'"), , ОбщегоНазначения.ЭтоМобильныйКлиент());
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Обработать", НСтр("ru = 'Отразить в учете'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Утвердить", НСтр("ru = 'Утвердить'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Подписать", НСтр("ru = 'Подписать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Исправить", НСтр("ru = 'Исправить'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Аннулировать", НСтр("ru = 'Аннулировать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "НаКонтроле", НСтр("ru = 'На контроле'"));
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Исходящие", НСтр("ru = 'Исходящие'"), , ОбщегоНазначения.ЭтоМобильныйКлиент());
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Сформировать", НСтр("ru = 'Создать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ПодписатьИсх", НСтр("ru = 'Подписать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ИсправитьИсх", НСтр("ru = 'Исправить'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "АннулироватьИсх", НСтр("ru = 'Аннулировать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "НаКонтролеИсх", НСтр("ru = 'На контроле'"));
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Ознакомиться", НСтр("ru = 'Ознакомиться'"));
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Отправить", НСтр("ru = 'Отправить'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Распаковать", НСтр("ru = 'Распаковать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Ошибки", НСтр("ru = 'Ошибки'"));
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Приглашения", НСтр("ru = 'Приглашения'"), , Ложь);
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ТребуетсяПригласить", НСтр("ru = 'Требуется пригласить'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ЖдемСогласия", НСтр("ru = 'Ждем согласия'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ТребуетсяСогласие", НСтр("ru = 'Требуется согласие'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ПриглашенияОзнакомиться", НСтр("ru = 'Ознакомиться'"));
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "НоменклатураКонтрагентов", НСтр("ru = 'Сопоставить'"));
	
КонецПроцедуры

#КонецОбласти

// Скрывает все элементы на форме
//
// Параметры:
//  Элементы - ВсеЭлементыФормы - содержит коллекцию всех элементов формы клиентского приложения для прямого доступа вне зависимости от иерархии.
//
Процедура СкрытьВсеЭлементыФормы(Элементы) Экспорт
	
	Для каждого ЭлементКоллекции Из Элементы Цикл
		Если ТипЗнч(ЭлементКоллекции) <> Тип("ДекорацияФормы") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементКоллекции.Имя, "Видимость", Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Перемещает элемент на форме.
//
// Параметры:
//  Элементы -  ВсеЭлементыФормы - содержит коллекцию всех элементов формы клиентского приложения для прямого доступа вне зависимости от иерархии.
//  Элемент - Строка - имя перемещаемого элемента
//  Родитель - Строка, ФормаКлиентскогоПриложения - имя нового родителя элемента или форма
//  МестоРасположения - Строка - имя элемента, перед которым нужно разместить перемещаемый элемент. Если не задан, то перемещается в конец коллекции.
//
Процедура ПереместитьЭлемент(Элементы, Элемент, Родитель, МестоРасположения = Неопределено) Экспорт
	
	ЭлементСсылка = Элементы.Найти(Элемент);
	Если ТипЗнч(Родитель) = Тип("Строка") Тогда
		РодительСсылка = Элементы.Найти(Родитель);
	Иначе
		РодительСсылка = Родитель;
	КонецЕсли;
	
	Если МестоРасположения = Неопределено Тогда
		Если ЭлементСсылка <> Неопределено И РодительСсылка <> Неопределено Тогда
			Элементы.Переместить(ЭлементСсылка, РодительСсылка);
		КонецЕсли;
	Иначе
		МестоРасположенияСсылка = Элементы.Найти(МестоРасположения);
		Если ЭлементСсылка <> Неопределено И РодительСсылка <> Неопределено И МестоРасположенияСсылка <> Неопределено Тогда
			Элементы.Переместить(ЭлементСсылка, РодительСсылка, МестоРасположенияСсылка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Устанавливает видимость элементов в Истина
//
// Параметры:
//  ВсеЭлементы - ВсеЭлементыФормы - все элементы формы.
//  ВидимыеЭлементы - Строка - список элементов через запятую для включения видимости.
//
Процедура УстановитьВидимостьЭлементов(ВсеЭлементы, ВидимыеЭлементы) Экспорт
	
	МассивВидимыхЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ВидимыеЭлементы, , Истина, Истина);
		
	Для каждого ЭлементКоллекции Из МассивВидимыхЭлементов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ВсеЭлементы, ЭлементКоллекции, "Видимость", Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеСостоянияПодписей(Подписи) Экспорт

	Для Каждого СтрокаПодписи Из Подписи Цикл
		Если ЗначениеЗаполнено(СтрокаПодписи.ДатаПроверкиПодписи) Тогда
			СтрокаПодписи.ПодписьВернаПредставление = ?(СтрокаПодписи.ПодписьВерна, НСтр("ru = 'Верна'"), НСтр("ru = 'Неверна'"))
				+" (" + СтрокаПодписи.ДатаПроверкиПодписи + ")";
		Иначе
			СтрокаПодписи.ПодписьВернаПредставление = НСтр("ru = 'Не проверена'");
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

// Для полей форм, в которые выбирается договор контрагента, необходимо установить связи параметров выбора.
//
// Параметры:
//  ЭлементФормы           - ПолеФормы - Поле, в которое указывается договор контрагента.
//  ПутьКДаннымОрганизация - Строка    - Путь к реквизиту "Организация" объекта формы.
//  ПутьКДаннымКонтрагент  - Строка    - Путь к реквизиту "Контрагент"  объекта формы.
//
Процедура УстановитьСвязиПараметровВыбораДоговорКонтрагента(ЭлементФормы, ПутьКДаннымОрганизация, ПутьКДаннымКонтрагент) Экспорт
	
	ИменаСвязей = ИнтеграцияЭДО.ИменаСвязейПараметровВыбораДоговорКонтрагента();
	
	НовыеСвязи = Новый Массив;
	
	Если ЗначениеЗаполнено(ИменаСвязей.ПоОрганизации) Тогда
		НовыеСвязи.Добавить(Новый СвязьПараметраВыбора(ИменаСвязей.ПоОрганизации, ПутьКДаннымОрганизация));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИменаСвязей.ПоКонтрагенту) Тогда
		НовыеСвязи.Добавить(Новый СвязьПараметраВыбора(ИменаСвязей.ПоКонтрагенту, ПутьКДаннымКонтрагент));
	КонецЕсли;
	
	ЭлементФормы.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыеСвязи);
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеЭлектронныеДокументы

// Возвращает параметры, используемые для определения текущих электронных документов.
//
// Возвращаемое значение:
//  Структура - параметры, определяющие текущие электронные документы:
//   * Раздел - Строка - раздел, по которому нужно получить документы. См. Обработка.ОбменСКонтрагентами.Форма.ТекущиеДелаЭДО.ИнициализироватьРазделы.
//   * Режим - Строка - режим получения документов. Доступные значения: "ВсеДокументы", "МоиДокументы", "КИсполнению".
//   * Ответственный - Массив - пользователи (СправочникСсылка.Пользователи) для отбора документов по ответственным. Актуально для режима "МоиДокументы".
//   * Отбор - Массив - отбор документов. Отбор можно выполнять по полям учетного документа для раздела "Сформировать" 
//                      и полям электронного документа для подразделов входящих/исходящих документов. По остальным разделам отбор не выполняется.
//                      Элементы должны быть представлены структурой со свойствами:
//    ** Поле - Строка - путь к данным для отбора.
//    ** ВидСравнения - ВидСравнения - вид сравнения.
//    ** Значение - Произвольный - значение для отбора.
//   * КоличествоПолучаемыхЗаписей - Число - ограничение выборки документов (соответствует оператору ПЕРВЫЕ в запросе).
//   * ОтправлятьВходящиеДокументыНаУтверждение - Булево - если Истина, то входящие документы сначала попадают в Утвердить. Если Ложь - то сразу в Подписать.
//
Функция НовыеПараметрыОпределенияТекущихЭлектронныхДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Раздел", "Входящие");
	Результат.Вставить("Режим", "ВсеДокументы");
	Результат.Вставить("Ответственный", Новый Массив);
	Результат.Вставить("Отбор", Новый Массив);
	Результат.Вставить("КоличествоПолучаемыхЗаписей", 0);
	Результат.Вставить("ОтправлятьВходящиеДокументыНаУтверждение", Истина);
	
	Возврат Результат;
	
КонецФункции

// Возвращает количество текущих электронных документов.
//
// Параметры:
//  Параметры - Структура - параметры определения текущих документов. См. НовыеПараметрыОпределенияТекущихЭлектронныхДокументов.
//
// Возвращаемое значение:
//  Число - число текущих документов, соответствующих переданным параметрам.
//
Функция КоличествоТекущихЭлектронныхДокументов(Знач Параметры) Экспорт
	
	Запрос = ЗапросКоличестваТекущихЭлектронныхДокументов(Параметры);
	
	Количество = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка._Счетчик;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Возвращает запрос, инициализированный для получения количества текущих электронных документов.
//
// Параметры:
//  Параметры - Структура - параметры определения текущих документов. См. НовыеПараметрыОпределенияТекущихЭлектронныхДокументов.
//
// Возвращаемое значение:
//  Запрос - запрос для получения количества документов. Количество документов представлено в результате запроса полем "_Счетчик".
//
Функция ЗапросКоличестваТекущихЭлектронныхДокументов(Параметры) Экспорт
	
	// Изменения в тексты запросов вносить согласовано с отборами по разделу в текущих делах ЭДО.
	// См. метод СоздатьОтборПоРазделу.
	
	Раздел = Параметры.Раздел;
	
	ПутьКОтбору = "";
	
	ТекстЗапроса = Неопределено;
	
	Если Раздел = "Входящие" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка 
		|				И СостоянияЭДО.Состояние НЕ В (
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.Аннулирован),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершен),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытПринудительно),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытСОтклонением)
		|		)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И Не ЭлектронныйДокументВходящийЭДО.ПометкаУдаления				
		|		И ((&РежимОтображения = ""ВсеДокументы""
		|		ИЛИ &РежимОтображения = ""МоиДокументы""
		|		И ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей)))) КАК ВложенныйЗапрос";
	
	ИначеЕсли Раздел = "Обработать" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|			ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|			И НЕ СостоянияЭДО.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяУточнение),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.Аннулирован),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.НеСформирован),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытПринудительно),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытСОтклонением))
		|	ГДЕ
		|		&УсловиеОтбора
		|		И Не ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И 1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				РегистрСведений.КонтрольОтраженияВУчетеЭДО КАК Контроль
		|			ГДЕ
		|				ЭлектронныйДокументВходящийЭДО.Ссылка = Контроль.ЭлектронныйДокумент)
		|		И (&РежимОтображения = ""ВсеДокументы""
		|		ИЛИ ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Утвердить" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		| 		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|				И СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяУтверждение)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И Не ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И ( (&РежимОтображения = ""ВсеДокументы""
		|						ИЛИ &РежимОтображения = ""МоиДокументы""
		|							И ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей)))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Подписать" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|			ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|			И СостоянияЭДО.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписание),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения))
		|	ГДЕ
		|		&УсловиеОтбора
		|		И Не ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения <> ""МоиДокументы""
		|		ИЛИ ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";


	ИначеЕсли Раздел = "Исправить" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|				И СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяУточнение)
		|					
		|	ГДЕ
		|		&УсловиеОтбора	
		|		И Не ЭлектронныйДокументВходящийЭДО.ПометкаУдаления			
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Аннулировать" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|				И СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И Не ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "НаКонтроле" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка	
		|				И СостоянияЭДО.Состояние В (
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИсправление),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждение),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение)
		|					)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И Не ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ &РежимОтображения = ""МоиДокументы""
		|					И ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Сформировать" Тогда
		
		ПутьКОтбору = "СостоянияЭД.СсылкаНаОбъект.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
		|	ГДЕ
		|		&УсловиеОтбора
		|		И СостоянияЭД.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.НеСформирован)
		|			И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ.УдалитьПроизвольныйЭД
		|			И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ.ТранспортныйКонтейнерЭДО
		|			И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Справочник.НастройкиЭДО
		|			И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Справочник.УдалитьСоглашенияОбИспользованииЭД) КАК ВложенныйЗапрос";

	ИначеЕсли Раздел = "Исходящие" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка 
		|				И СостоянияЭДО.Состояние НЕ В (
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.Аннулирован),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершен),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытПринудительно),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытСОтклонением)
		|		)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И Не ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления	
		|		И ((&РежимОтображения = ""ВсеДокументы""
		|		ИЛИ &РежимОтображения = ""МоиДокументы""
		|		И ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей)))) КАК ВложенныйЗапрос";

	ИначеЕсли Раздел = "ПодписатьИсх" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументИсходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка 
		|				И СостоянияЭДО.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписание),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению))
		|
		|	ГДЕ
		|		&УсловиеОтбора
		|		И Не ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения <> ""МоиДокументы""
		|				ИЛИ ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ИсправитьИсх" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументИсходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка 
		|				И СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяУточнение)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И Не ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "АннулироватьИсх" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументИсходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка 
		|				И (СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования)
		|					Или СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования))
		|	ГДЕ
		|		&УсловиеОтбора
		|		И Не ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "НаКонтролеИсх" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументИсходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка 
		|				И СостоянияЭДО.Состояние В (
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИсправление),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждение),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению)
		|						)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И Не ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|		ИЛИ &РежимОтображения = ""МоиДокументы""
		|		И ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Ошибки" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|	ГДЕ
		|		СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи)) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Ознакомиться" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|	ГДЕ
		|		ЭлектронныйДокументВходящийЭДО.НаОзнакомлении
		|		И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|	ГДЕ
		|		ЭлектронныйДокументИсходящийЭДО.НаОзнакомлении
		|		И НЕ ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Отправить" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ЭлектронныйДокументВходящийЭДО.Дата КАК Дата,
		|	ЭлектронныйДокументВходящийЭДО.Номер КАК Номер,
		|	ЭлектронныйДокументВходящийЭДО.ДатаДокумента КАК ДатаЭД,
		|	ЭлектронныйДокументВходящийЭДО.НомерДокумента КАК НомерЭД,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументВходящийЭДО.СуммаДокумента КАК СуммаДокумента,
		|	СостоянияЭДО.Состояние КАК СостояниеЭД,
		|	""КартинкаМК"" КАК КартинкаМК,
		|	ЭлектронныйДокументВходящийЭДО.Ответственный КАК Ответственный,
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета КАК ИдентификаторПакета,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК ПредставлениеДокументовВнеОтбора,
		|	Ложь КАК ПервыйДокументПакета,
		|	ДанныеКоличестваДокументовВПакете.КоличествоДокументов КАК КоличествоДокументовВПакете,
		|	ПакетыДокументовЭДО.Дата КАК ДатаПакета
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|	ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|	И СостоянияЭДО.Состояние В 
		|	(
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправка),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению)
		|	)
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				СоставПакетовДокументовЭДО.ИдентификаторПакета,
		|				КОЛИЧЕСТВО(СоставПакетовДокументовЭДО.ЭлектронныйДокумент) КАК КоличествоДокументов
		|			ИЗ
		|				РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|			СГРУППИРОВАТЬ ПО
		|				СоставПакетовДокументовЭДО.ИдентификаторПакета) КАК ДанныеКоличестваДокументовВПакете
		|			ПО СоставПакетовДокументовЭДО.ИдентификаторПакета = ДанныеКоличестваДокументовВПакете.ИдентификаторПакета
		|		ПО СоставПакетовДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыДокументовЭДО КАК ПакетыДокументовЭДО
		|		ПО СоставПакетовДокументовЭДО.ИдентификаторПакета = ПакетыДокументовЭДО.ИдентификаторПакета
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка,
		|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.Дата,
		|	ЭлектронныйДокументИсходящийЭДО.Номер,
		|	ЭлектронныйДокументИсходящийЭДО.ДатаДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.НомерДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.Организация,
		|	ЭлектронныйДокументИсходящийЭДО.Контрагент,
		|	ЭлектронныйДокументИсходящийЭДО.СуммаДокумента,
		|	СостоянияЭДО.Состояние,
		|	""КартинкаМК"",
		|	ЭлектронныйДокументИсходящийЭДО.Ответственный,
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(20)),
		|	Ложь,
		|	ДанныеКоличестваДокументовВПакете.КоличествоДокументов,
		|	ПакетыДокументовЭДО.Дата
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|	ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
		|	И СостоянияЭДО.Состояние В 
		|	(
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправка),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению)
		|	)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				СоставПакетовДокументовЭДО.ИдентификаторПакета,
		|				КОЛИЧЕСТВО(СоставПакетовДокументовЭДО.ЭлектронныйДокумент) КАК КоличествоДокументов
		|			ИЗ
		|				РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|			СГРУППИРОВАТЬ ПО
		|				СоставПакетовДокументовЭДО.ИдентификаторПакета) КАК ДанныеКоличестваДокументовВПакете
		|			ПО СоставПакетовДокументовЭДО.ИдентификаторПакета = ДанныеКоличестваДокументовВПакете.ИдентификаторПакета
		|		ПО СоставПакетовДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыДокументовЭДО КАК ПакетыДокументовЭДО
		|		ПО СоставПакетовДокументовЭДО.ИдентификаторПакета = ПакетыДокументовЭДО.ИдентификаторПакета
		|) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Распаковать" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ТранспортныйКонтейнерЭДО КАК ОсновнаяТаблица
		|	ГДЕ
		|		ОсновнаяТаблица.ПометкаУдаления = ЛОЖЬ
		|		И ОсновнаяТаблица.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Входящий)
		|		И ОсновнаяТаблица.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыТранспортныхСообщенийБЭД.Неизвестный), ЗНАЧЕНИЕ(Перечисление.СтатусыТранспортныхСообщенийБЭД.КРаспаковке))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ТребуетсяПригласить" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ОсновнаяТаблица
		|	ГДЕ
		|		ОсновнаяТаблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.ТребуетсяОтправить)) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ЖдемСогласия" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ОсновнаяТаблица
		|	ГДЕ
		|		ОсновнаяТаблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.ОжидаемСогласия) ИЛИ
		|		ОсновнаяТаблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.НастройкаРоуминга)) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ТребуетсяСогласие" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ОсновнаяТаблица
		|	ГДЕ
		|		ОсновнаяТаблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.ТребуетсяСогласие)) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ПриглашенияОзнакомиться" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ОсновнаяТаблица
		|	ГДЕ
		|		ОсновнаяТаблица.Ознакомиться) КАК ВложенныйЗапрос";
		
		
	ИначеЕсли Раздел = "НоменклатураКонтрагентов" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|		КонтрольСопоставленияНоменклатурыЭДО.Владелец,
		|		КонтрольСопоставленияНоменклатурыЭДО.Идентификатор
		|	ИЗ
		|		РегистрСведений.КонтрольСопоставленияНоменклатурыЭДО КАК КонтрольСопоставленияНоменклатурыЭДО) КАК ВложенныйЗапрос";
		
	Иначе
		
		ВызватьИсключение ОбщегоНазначенияБЭД.СформироватьТекстИсключения(
			"НедопустимыеПараметрыМетода", "ЗапросКоличестваТекущихЭлектронныхДокументов");
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РежимОтображения", Параметры.Режим);
	СписокПользователей = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.Ответственный);
	Если Параметры.Режим <> "МоиДокументы" Тогда
		СписокПользователей.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокПользователей", СписокПользователей);
	
	ИсполняемыйОтбор = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.Отбор);
	
	НомерОтбора = 1;
	ПрефиксПараметров = "ОтборПараметр";
	Для каждого ЭлементОтбора Из ИсполняемыйОтбор Цикл
		ЭлементОтбора.Поле = ПутьКОтбору + ЭлементОтбора.Поле;
		Запрос.УстановитьПараметр(ПрефиксПараметров + Формат(НомерОтбора, "ЧГ=0"), ЭлементОтбора.Значение);
		НомерОтбора = НомерОтбора + 1;
	КонецЦикла;
	ТекстОтбора = ТекстУсловияПоОтбору(ИсполняемыйОтбор, ПрефиксПараметров);
	Если ЗначениеЗаполнено(ТекстОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", ТекстОтбора);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", "ИСТИНА");
	КонецЕсли;
	
	ТекстПервые = "";
	Если ЗначениеЗаполнено(Параметры.КоличествоПолучаемыхЗаписей) Тогда
		ТекстПервые = "ПЕРВЫЕ " + Формат(Параметры.КоличествоПолучаемыхЗаписей, "ЧГ=0");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1000", ТекстПервые);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Функция ТекстУсловияПоОтбору(Знач Отбор, Знач ПрефиксПараметров = "ЗначениеОтбора")
	
	Если Не ЗначениеЗаполнено(Отбор) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстПолей = "";
	Для НомерОтбора = 1 По Отбор.Количество() Цикл
		ОписаниеПоля = СтрШаблон("""Поле%1"" КАК Поле%1,", НомерОтбора);
		ТекстПолей = ТекстПолей + ОписаниеПоля;
	КонецЦикла;
	ТекстПолей = Лев(ТекстПолей, СтрДлина(ТекстПолей) - 1);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ТекстПолей
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолей", ТекстПолей);
	
	Построитель = Новый ПостроительЗапроса(ТекстЗапроса);
	Построитель.ЗаполнитьНастройки();
	
	Для НомерОтбора = 1 По Отбор.Количество() Цикл
		ЭлементОтбора = Отбор[НомерОтбора - 1];
		НовыйЭлементОтбора = Построитель.Отбор.Добавить("Поле" + НомерОтбора);
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ЭлементОтбора.ВидСравнения;
	КонецЦикла;
	
	Запрос = Построитель.ПолучитьЗапрос();
	ТекстЗапроса = Запрос.Текст;
	
	ИндексУсловия = СтрНайти(ТекстЗапроса, "ГДЕ");
	
	ТекстУсловия = Сред(ТекстЗапроса, ИндексУсловия + 4); // учтен перенос строки.
	
	Для НомерОтбора = 1 По Отбор.Количество() Цикл
		ЭлементОтбора = Отбор[НомерОтбора - 1];
		ТекстУсловия = СтрЗаменить(ТекстУсловия, """Поле" + НомерОтбора + """", ЭлементОтбора.Поле);
		ТекстУсловия = СтрЗаменить(ТекстУсловия, "&Параметр" + НомерОтбора, "&" + ПрефиксПараметров + НомерОтбора);
	КонецЦикла;
	
	Возврат ТекстУсловия;
	
КонецФункции

Функция ВидыЭлектронныхДокументовДоступныеДляОтборов() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка КАК ВидДокументаЭДО
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	Не ВидыДокументовЭДО.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидДокументаЭДО");
	
КонецФункции

#КонецОбласти

#Область РаботаСДеревомЭлектронныхДокументов

Процедура СформироватьДеревьяЭД(ДеревоОбъект,СоответствиеВладельцевИЭД) Экспорт
	
		Если СоответствиеВладельцевИЭД.Количество() > 0 Тогда
		
		Для Каждого Элемент Из СоответствиеВладельцевИЭД Цикл
			
			Если ЗначениеЗаполнено(Элемент.ЭлектронныйДокумент) Тогда
				
				СхемаРегламента = СхемаРегламентаЭлектронногоДокумента(Элемент.ЭлектронныйДокумент);
				ОбновитьЭлементыДереваЭлектронныхДокументов(ДеревоОбъект, СхемаРегламента, Элемент.Актуальный);
				
			КонецЕсли;			
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОбновитьЭлементыДереваЭлектронныхДокументов(Приемник, Источник, Актуальный = Ложь)
	
	КоллекцияЭлементовИсточника = Источник.Строки;
	Если КоллекцияЭлементовИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияЭлементовПриемника = Приемник.Строки;
	
	Для Каждого ЭлементИсточника Из КоллекцияЭлементовИсточника Цикл
		
		ДанныеЭлементаИсточника = ЭлементИсточника.Данные;
		
		Если ЭлементИсточника.Дополнительный
			И Не ЗначениеЗаполнено(ДанныеЭлементаИсточника.Сообщение) Тогда
			Продолжить;
		КонецЕсли;		
		
		ЭлементПриемника = КоллекцияЭлементовПриемника.Добавить();		
		
		Если ЭлементПриемника.Сообщение <> ДанныеЭлементаИсточника.Сообщение
			Или ЭлементПриемника.Статус <> ДанныеЭлементаИсточника.Статус Тогда
			ЗаполнитьЗначенияСвойств(ЭлементПриемника, ДанныеЭлементаИсточника);
		КонецЕсли;

		Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДанныеЭлементаИсточника.Сообщение, "Дата");
			
		ЭлементПриемника.Сообщение = ДанныеЭлементаИсточника.Сообщение;
		ЭлементПриемника.Версия = Дата;
		
		Если ЗначениеЗаполнено(ЭлементПриемника.Сообщение) 
			И ЭлементПриемника.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ЭлементПриемника.Актуальный = Актуальный;
			СостояниеЭДО = ЭлектронныеДокументыЭДО.СостояниеДокумента(ЭлементПриемника.ЭлектронныйДокумент);
			СвойстваДокумента = ЭлектронныеДокументыЭДО.СвойстваДокумента(ЭлементПриемника.ЭлектронныйДокумент,
				"Ссылка, НаОзнакомлении, СпособОбмена");
			ДействияНаЭтапе = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(СостояниеЭДО, СвойстваДокумента);
			
			Если ЗначениеЗаполнено(ДействияНаЭтапе) Тогда
				ЭлементПриемника.ОжидаемоеДействие = МассивДействийНаЭтапе(ДействияНаЭтапе)[0];	
			КонецЕсли;
			
		КонецЕсли;

		Если ЗначениеЗаполнено(ЭлементПриемника.ЭлектронныйДокумент) 
			Или ЭлементПриемника.ТипЭлементаРегламента	= Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ОбновитьЭлементыДереваЭлектронныхДокументов(ЭлементПриемника, ЭлементИсточника);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСИнтерфейсомУчетныхДокументов

#Область ФормыСписков

// Функция - Параметры "ПриСозданииНаСервере" формы списка справочников и документов.
// 
// Возвращаемое значение:
//  Структура - параметры, которые необходимо передать в метод ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка.
//    * Форма - УправляемаяФорма - форма списка документа.
//    * МестоРазмещенияКоманд - ЭлементФормы - элемент формы "группа", в котором должны отображаться команды ЭДО, необязательный параметр.
//    * КолонкаСостоянияЭДО - ЭлементФормы - колонка состояния ЭДО.
//    * ИспользоватьОформлениеБиблиотеки - Булево - признак применения условного оформления колонки состояния ЭДО библиотекой.
//    * Направление - ПеречислениеСсылка.НаправленияЭДО - указывает направление электронного документа для документа ИБ.
//
Функция ПараметрыПриСозданииНаСервере_ФормаСписка() Экспорт
	
	ПараметрыПриСоздании = Новый Структура;
	ПараметрыПриСоздании.Вставить("Форма");
	ПараметрыПриСоздании.Вставить("МестоРазмещенияКоманд");
	ПараметрыПриСоздании.Вставить("КолонкаСостоянияЭДО", Неопределено);
	ПараметрыПриСоздании.Вставить("ИспользоватьОформлениеБиблиотеки", Истина);
	ПараметрыПриСоздании.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
	
	Возврат ПараметрыПриСоздании;
	
КонецФункции

// Обработчик события "ПриСозданииНаСервере" формы списка справочников и документов
//
// Параметры:
//  ПараметрыПриСозданииНаСервере - структура - см. ИнтеграцияЭДО.ПараметрыПриСозданииНаСервере_ФормаСписка.
//
Процедура ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере) Экспорт

	ПодключаемыеКомандыЭДО.РазместитьНаФормеКомандыЭДО(ПараметрыПриСозданииНаСервере);
	
	Направление = ПараметрыПриСозданииНаСервере.Направление;
	
	Если ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО <> Неопределено Тогда
		
		Если ПараметрыПриСозданииНаСервере.ИспользоватьОформлениеБиблиотеки Тогда
		
			КолонкаСостоянияЭДО = ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО;
		
			КолонкаСостоянияЭДО.ГиперссылкаЯчейки = Истина;
			
			ЭлементОформления = ПараметрыПриСозданииНаСервере.Форма.УсловноеОформление.Элементы.Добавить();
			ЭлементОформления.Использование = Истина;
		    ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
			
			ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(КолонкаСостоянияЭДО.Имя);

			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(КолонкаСостоянияЭДО.ПутьКДанным);
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;	
			
		КонецЕсли;
		
		Если Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
			ИспользоватьОбменЭД = НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами();
			ИспользоватьВнутренниеДокументыЭДО = НастройкиЭДО.ИспользуютсяВнутренниеДокументы();
			ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО.Видимость = ИспользоватьОбменЭД И ИспользоватьВнутренниеДокументыЭДО;
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Функция - Параметры "ПриОткрытии" формы прикладного объекта.
// 
// Возвращаемое значение:
//  Структура - параметры, которые необходимо передать в метод ОбменСКонтрагентамиКлиент.ПриОткрытии.
//    * Форма - УправляемаяФорма - форма справочника или документа.
//    * МестоРазмещенияКоманд - ЭлементФормы - элемент формы "группа", в котором должны отображаться команды ЭДО, необязательный параметр.
//    * ЕстьОбработчикОбновитьКомандыЭДО - Булево - нужно устанавливать в Истина в форме прикладного справочника организаций.
//
Функция ПараметрыПриОткрытии() Экспорт

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма");
	ПараметрыОповещения.Вставить("МестоРазмещенияКоманд");
	ПараметрыОповещения.Вставить("ЕстьОбработчикОбновитьКомандыЭДО", Ложь);
	
	Возврат ПараметрыОповещения;

КонецФункции

#КонецОбласти

#Область ФормыОбъектов

// Функция - Параметры "ПриСозданииНаСервере" формы документа.
// 
// Возвращаемое значение:
//  Структура - параметры, которые нужно передавать в метод ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента.
//    * Форма - УправляемаяФорма - форма документа.
//    * ДокументСсылка - ДокументСсылка - Ссылка на документ.
//    * КонтроллерСостояниеЭДО - ЭлементФормы - элемент формы "декорация" либо "поле формы", в заголовке которого будет отображаться состояние ЭДО.
//    * ГруппаСостояниеЭДО - ЭлементФормы - элемент формы "группа", которому может принадлежать КонтроллерСостояниеЭДО, необязательный параметр.
//    * МестоРазмещенияКоманд - ЭлементФормы - элемент формы "группа", в котором должны отображаться команды ЭДО, необязательный параметр.
//    * Направление - ПеречислениеСсылка.НаправленияЭДО - указывает направление электронного документа для документа ИБ.
//
Функция ПараметрыПриСозданииНаСервере_ФормаДокумента() Экспорт
	
	ПараметрыПриСоздании = Новый Структура;
	ПараметрыПриСоздании.Вставить("Форма");
	ПараметрыПриСоздании.Вставить("ДокументСсылка");
	ПараметрыПриСоздании.Вставить("КонтроллерСостояниеЭДО");
	ПараметрыПриСоздании.Вставить("ГруппаСостояниеЭДО");
	ПараметрыПриСоздании.Вставить("МестоРазмещенияКоманд");
	ПараметрыПриСоздании.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
	
	Возврат ПараметрыПриСоздании;
	
КонецФункции

// Обработчик события "ПриСозданииНаСервере" формы документа.
//
// Параметры:
//  ПараметрыПриСозданииНаСервере - Структура - см. ИнтерфейсДокументовЭДО.ПараметрыПриСозданииНаСервере_ФормаДокумента.
//   
Процедура ПриСозданииНаСервере_ФормаДокумента(ПараметрыПриСозданииНаСервере) Экспорт
	
	ПодключаемыеКомандыЭДО.РазместитьНаФормеКомандыЭДО(ПараметрыПриСозданииНаСервере);
	
	Если ПараметрыПриСозданииНаСервере.КонтроллерСостояниеЭДО = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Реквизиты = Новый Массив;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		ПараметрыПриСозданииНаСервере.Форма, "ПараметрыОбменаСКонтрагентами") Тогда
		
		Реквизиты.Добавить(Новый РеквизитФормы("ПараметрыОбменаСКонтрагентами", Новый ОписаниеТипов()));
		
		ПараметрыПриСозданииНаСервере.Форма.ИзменитьРеквизиты(Реквизиты);
		
	КонецЕсли;
		
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ПараметрыПриСозданииНаСервере.ДокументСсылка);
	
	ПараметрыОбменаСКонтрагентами = Новый Структура;
	ПараметрыОбменаСКонтрагентами.Вставить("Организация",        ОписаниеОбъектаУчета.Организация);
	ПараметрыОбменаСКонтрагентами.Вставить("Контрагент",         ОписаниеОбъектаУчета.Контрагент);
	ПараметрыОбменаСКонтрагентами.Вставить("ДоговорКонтрагента", ОписаниеОбъектаУчета.Договор);
	ПараметрыОбменаСКонтрагентами.Вставить("Направление", 		 ОписаниеОбъектаУчета.Направление);
	ПараметрыОбменаСКонтрагентами.Вставить("ДанныеСостоянияЭДОИзначальные", Неопределено);
	ПараметрыОбменаСКонтрагентами.Вставить("ДанныеСостоянияЭДОТекущие", Неопределено);
	ПараметрыОбменаСКонтрагентами.Вставить("КонтекстОперации",   Неопределено);
	
	Если ТипЗнч(ПараметрыПриСозданииНаСервере.КонтроллерСостояниеЭДО) = Тип("ПолеФормы") Тогда
		ПараметрыОбменаСКонтрагентами.Вставить("ПутьКДаннымКонтроллераСостояния",
			ПараметрыПриСозданииНаСервере.КонтроллерСостояниеЭДО.ПутьКДанным);
	КонецЕсли;
	
	ПараметрыПриСозданииНаСервере.Форма.ПараметрыОбменаСКонтрагентами = ПараметрыОбменаСКонтрагентами;
	
	ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаДокумента(ПараметрыПриСозданииНаСервере);
	
КонецПроцедуры

// Получение параметров оповещения для формы документ.
//
// Возвращаемое значение:
//  Структура - параметры, которые нужно передавать в метод ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента:
//    * Форма - УправляемаяФорма - форма документа.
//    * ДокументСсылка - ДокументСсылка - Ссылка на документ.
//    * КонтроллерСостояниеЭДО - ЭлементФормы - элемент формы "декорация", "поле надписи", в заголовке которого будет отображаться состояние ЭДО.
//    * ГруппаСостояниеЭДО - ЭлементФормы - элемент формы "группа", которому может принадлежать КонтроллерСостояниеЭДО, необязательный параметр.
//    * МестоРазмещенияКоманд - ЭлементФормы - подменю, в котором отображаются команды ЭДО.
//
Функция ПараметрыПриЧтенииНаСервере_ФормаДокумента() Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма");
	ПараметрыОповещения.Вставить("ДокументСсылка");
	ПараметрыОповещения.Вставить("КонтроллерСостояниеЭДО");
	ПараметрыОповещения.Вставить("ГруппаСостояниеЭДО");
	ПараметрыОповещения.Вставить("МестоРазмещенияКоманд");
	Возврат ПараметрыОповещения;
	
КонецФункции

// Обработчик события "ПриЧтенииНаСервере" формы документа.
//
// Параметры:
//  ПараметрыПриЧтенииНаСервере - Структура - см. ИнтерфейсДокументовЭДО.ПараметрыПриЧтенииНаСервере_ФормаДокумента.
//
Процедура ПриЧтенииНаСервере_ФормаДокумента(ПараметрыПриЧтенииНаСервере) Экспорт

	ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаДокумента(ПараметрыПриЧтенииНаСервере);
	
КонецПроцедуры
// Функция - Параметры "ПослеЗаписиНаСервере" формы документа.
// 
// Возвращаемое значение:
//  Структура - Параметры, которые нужно передавать в метод ОбменСКонтрагентами.ПослеЗаписиНаСервере.
//    * Форма - УправляемаяФорма - форма документа.
//    * ДокументСсылка - ДокументСсылка - ссылка на документ.
//    * КонтролерСостояниеЭДО - ЭлементФормы - элемент формы "декорация", "поле формы", в заголовке которого будет отображаться состояние ЭДО, необязательный параметр.
//    * ГруппаСостояниеЭДО - ЭлементФормы - элемент формы "группа", которому может принадлежать КонтроллерСостояниеЭДО, необязательный параметр.
//
Функция ПараметрыПослеЗаписиНаСервере() Экспорт
	
	ПараметрыПослеЗаписи = Новый Структура;
	
	ПараметрыПослеЗаписи.Вставить("Форма");
	ПараметрыПослеЗаписи.Вставить("ДокументСсылка");
	ПараметрыПослеЗаписи.Вставить("КонтроллерСостояниеЭДО");
	ПараметрыПослеЗаписи.Вставить("ГруппаСостояниеЭДО");
	
	Возврат ПараметрыПослеЗаписи;
	
КонецФункции

// Обработчик события "ПослеЗаписиНаСервере" формы документа
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - Записываемый объект.
//  ПараметрыЗаписи - Структура - Структура, содержащая параметры записи.
//  ПараметрыПослеЗаписи - Структура - см. ИнтерфейсДокументоЭДО.ПараметрыПослеЗаписиНаСервере.
//
Процедура ПослеЗаписиНаСервере(ДокументОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи) Экспорт
	
	ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаДокумента(ПараметрыПослеЗаписи);
	
	ДокументОбъект.ДополнительныеСвойства.Свойство("КонтекстОперации", ПараметрыПослеЗаписи.Форма.ПараметрыОбменаСКонтрагентами.КонтекстОперации);
	
КонецПроцедуры

// Параметры для процедуры ОбменСКонтрагентами.КлючевыеРеквизитыТекстСостоянияЭДОПриИзменении
//
// Возвращаемое значение:
//  Структура - параметры, которые нужно передать в процедуру ОбменСКонтрагентами.КлючевыеРеквизитыТекстСостоянияЭДОПриИзменении
//    * Форма                 - УправляемаяФорма - Форма учетного документа.
//    * ДокументСсылка        - ДокументСсылка   - Ссылка на документ.
//    * КонтроллерСостояниеЭДО - ДекорацияФормы, ПолеФормы - контроллер состояния ЭДЛ.
//    * ГруппаСостояниеЭДО    - ГруппаФормы      - Группа, в которую входит "КонтроллерСостояниеЭДО".
//    * Организация           - СправочникСсылка - Ссылка на организацию.
//    * Контрагент            - СправочникСсылка - Ссылка на Контрагента.
//    * Договор               - СправочникСсылка - Ссылка на договор контрагента.
//
Функция ПараметрыИзмененияКлючевыхРеквизитов() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Форма");
	Параметры.Вставить("ДокументСсылка");
	Параметры.Вставить("КонтроллерСостояниеЭДО");
	Параметры.Вставить("ГруппаСостояниеЭДО");
	Параметры.Вставить("Организация");
	Параметры.Вставить("Контрагент");
	Параметры.Вставить("Договор");

	Возврат Параметры;
	
КонецФункции

// Обработчик события "ПриИзменении" для полей документов,
// которые содержат значения "Организация", "Контрагент", "ДоговорКонтрагента".
//
// Параметры:
//  ПараметрыПриИзменении - Структура - см. ИнтерфейсДокументовЭДО.ПараметрыИзмененияКлючевыхРеквизитов.
//
Процедура КлючевыеРеквизитыТекстСостоянияЭДОПриИзменении(ПараметрыПриИзменении) Экспорт
	
	ПараметрыОбменаСКонтрагентами = ПараметрыПриИзменении.Форма.ПараметрыОбменаСКонтрагентами;
	
	// По незаписанным документам определить параметры не можем, поэтому не реагируем на изменение ключевых реквизитов
	Если Не ЗначениеЗаполнено(ПараметрыПриИзменении.ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПриИзменении.Организация <> ПараметрыОбменаСКонтрагентами.Организация
		Или ПараметрыПриИзменении.Контрагент <> ПараметрыОбменаСКонтрагентами.Контрагент
		Или ПараметрыПриИзменении.Договор <> ПараметрыОбменаСКонтрагентами.ДоговорКонтрагента Тогда
		
		ОбъектУчета = ПараметрыПриИзменении.ДокументСсылка;
		
		Описание = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектУчета);
		ПараметрыПолученияСостояния = ИнтеграцияЭДО.НовыеПараметрыПолученияСостоянияНеНачатогоЭДООбъектаУчета();
		ЗаполнитьЗначенияСвойств(ПараметрыПолученияСостояния, Описание);
		
		ПараметрыПолученияСостояния.ОбъектУчета = ПараметрыПриИзменении.ДокументСсылка;
		ПараметрыПолученияСостояния.Организация = ПараметрыПриИзменении.Организация;
		ПараметрыПолученияСостояния.Контрагент = ПараметрыПриИзменении.Контрагент;
		ПараметрыПолученияСостояния.Договор = ПараметрыПриИзменении.Договор;
		
		ДанныеСостоянияЭДО = Неопределено;
		ИнтеграцияЭДО.ЗаполнитьСостояниеНеНачатогоЭДООбъектаУчета(ПараметрыПолученияСостояния, ДанныеСостоянияЭДО);
		ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОТекущие = ДанныеСостоянияЭДО;
		
		Если ТипЗнч(ПараметрыПриИзменении.КонтроллерСостояниеЭДО) = Тип("ПолеФормы") Тогда
			ПараметрыПриИзменении.Форма[ПараметрыПриИзменении.КонтроллерСостояниеЭДО.ПутьКДанным] = ДанныеСостоянияЭДО.ПредставлениеСостояния;
		Иначе
			ПараметрыПриИзменении.КонтроллерСостояниеЭДО.Заголовок = ДанныеСостоянияЭДО.ПредставлениеСостояния;
		КонецЕсли;
		
	ИначеЕсли ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОИзначальные <> Неопределено Тогда
		
		Если ТипЗнч(ПараметрыПриИзменении.КонтроллерСостояниеЭДО) = Тип("ПолеФормы") Тогда
			ПараметрыПриИзменении.Форма[ПараметрыПриИзменении.КонтроллерСостояниеЭДО.ПутьКДанным] = ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОИзначальные.ПредставлениеСостояния;
		Иначе
			ПараметрыПриИзменении.КонтроллерСостояниеЭДО.Заголовок = ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОИзначальные.ПредставлениеСостояния;
		КонецЕсли;
		
		ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОТекущие = ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОИзначальные;
			
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФормаСтатусовЭлектронныхДокументов

Функция ПараметрыПросмотраСтатусовЭлектронныхДокументов(ПараметрыОбъектовУчета) Экспорт
	
	ПараметрыПросмотра = Новый Структура;
	ПараметрыПросмотра.Вставить("РежимПросмотра", "Документ");
	ПараметрыПросмотра.Вставить("ЭлектронныйДокумент", Неопределено);
	ПараметрыПросмотра.Вставить("АдресДанных", "");
	ПараметрыПросмотра.Вставить("ПараметрыОбъектовУчета", Неопределено);
	
	ПолныеИменаОбъектов = Новый Массив;
	
	КоличествоОбъектов = ПараметрыОбъектовУчета.Количество();

	Для Счетчик = 1 По КоличествоОбъектов Цикл
		
		Индекс = КоличествоОбъектов - Счетчик;
		ПараметрыОбъекта = ПараметрыОбъектовУчета[Индекс];
		
		Если Не ЗначениеЗаполнено(ПараметрыОбъекта.ОбъектУчета) Тогда
			ПараметрыОбъектовУчета.Удалить(Индекс);
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
			ОбъектУчета = ПараметрыОбъекта.ОбъектУчета;
			ПараметрыЭД = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектУчета);
			Если Не ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
				ПараметрыОбъектовУчета.Удалить(Индекс);
				Продолжить;
			КонецЕсли;
			
			ПараметрыОбъекта.Организация = ПараметрыЭД.Организация;
			
		КонецЕсли;
		
		ПолноеИмяОбъекта = ПараметрыОбъекта.ОбъектУчета.Метаданные().ПолноеИмя();
		Если ПолныеИменаОбъектов.Найти(ПолноеИмяОбъекта) = Неопределено Тогда
			ПолныеИменаОбъектов.Добавить(ПолноеИмяОбъекта);
		КонецЕсли;
		
		ПараметрыОбъекта.Вставить("ИдентификаторОбъекта", ПолноеИмяОбъекта);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПараметрыОбъектовУчета) Тогда
		Возврат ПараметрыПросмотра;
	КонецЕсли;
	
	ИдентификаторыОбъектов = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(ПолныеИменаОбъектов);
	
	Для Каждого ПараметрыОбъекта Из ПараметрыОбъектовУчета Цикл
		ПараметрыОбъекта.ИдентификаторОбъекта = ИдентификаторыОбъектов[ПараметрыОбъекта.ИдентификаторОбъекта];
	КонецЦикла;
	
	СтатусыЭлектронныхДокументов = СтатусыЭлектронныхДокументовОбъектаУчета(ПараметрыОбъектовУчета);
	
	КоличествоДокументов = СтатусыЭлектронныхДокументов.Количество();
	Если КоличествоДокументов < 2 Тогда
		Возврат ПараметрыПросмотра;
	КонецЕсли;
	
	ПараметрыПросмотра.РежимПросмотра = "Список";
	ПараметрыПросмотра.АдресДанных = ПоместитьВоВременноеХранилище(СтатусыЭлектронныхДокументов);
	ПараметрыПросмотра.ПараметрыОбъектовУчета = Новый ФиксированныйМассив(ПараметрыОбъектовУчета);
	
	Возврат ПараметрыПросмотра;
	
КонецФункции

Функция СтатусыЭлектронныхДокументовОбъектаУчета(ПараметрыОбъектовУчета) Экспорт
	
	ОписаниеТипаОбъектаУчета = Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип;
	ОписаниеТипаОрганизация  = Метаданные.ОпределяемыеТипы.Организация.Тип;
	
	СтатусыЭлектронныхДокументов = Новый ТаблицаЗначений;
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ОбъектУчета",ОписаниеТипаОбъектаУчета);
	СтатусыЭлектронныхДокументов.Колонки.Добавить("Организация",ОписаниеТипаОрганизация);
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ЭлектронныйДокумент",
		Новый ОписаниеТипов("ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО"));
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ПредставлениеДокумента", Новый ОписаниеТипов("Строка"));
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ПредставлениеСостояния", Новый ОписаниеТипов("Строка"));
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ОжидаемоеДействие", Новый ОписаниеТипов("ПеречислениеСсылка.ДействияПоЭДО"));
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ВидДокумента",
		Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ОбъектУчета", ОписаниеТипаОбъектаУчета);
	ТаблицаПараметров.Колонки.Добавить("Организация", ОписаниеТипаОрганизация);
	ТаблицаПараметров.Колонки.Добавить("ВидДокумента",
		Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	ТаблицаПараметров.Колонки.Добавить("ИдентификаторОбъекта",
		Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыОбъектовУчета, ТаблицаПараметров);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПараметрыОбъектовУчета", ТаблицаПараметров);
	Запрос.УстановитьПараметр("ПустойВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПараметрыОбъектовУчета.ОбъектУчета КАК Ссылка,
		|	ПараметрыОбъектовУчета.Организация КАК Организация,
		|	ПараметрыОбъектовУчета.ВидДокумента КАК ВидДокумента,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта КАК ИдентификаторОбъекта
		|ПОМЕСТИТЬ ПараметрыОбъектовУчета
		|ИЗ
		|	&ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктуальныеДокументыЭДО.ОбъектУчета КАК ОбъектУчета,
		|	АктуальныеДокументыЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	АктуальныеДокументыЭДО.ВидЭлектронногоДокумента КАК ВидДокумента
		|ПОМЕСТИТЬ АктуальныеДокументы
		|ИЗ
		|	РегистрСведений.АктуальныеДокументыЭДО КАК АктуальныеДокументыЭДО
		|ГДЕ
		|	(АктуальныеДокументыЭДО.ОбъектУчета, АктуальныеДокументыЭДО.ВидЭлектронногоДокумента) В
		|			(ВЫБРАТЬ
		|				ПараметрыОбъектовУчета.Ссылка,
		|				ПараметрыОбъектовУчета.ВидДокумента
		|			ИЗ
		|				ПараметрыОбъектовУчета
		|			ГДЕ
		|				ПараметрыОбъектовУчета.ВидДокумента <> &ПустойВидДокумента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АктуальныеДокументыЭДО.ОбъектУчета,
		|	АктуальныеДокументыЭДО.ЭлектронныйДокумент,
		|	АктуальныеДокументыЭДО.ВидЭлектронногоДокумента
		|ИЗ
		|	РегистрСведений.АктуальныеДокументыЭДО КАК АктуальныеДокументыЭДО
		|ГДЕ
		|	АктуальныеДокументыЭДО.ОбъектУчета В
		|			(ВЫБРАТЬ
		|				ПараметрыОбъектовУчета.Ссылка
		|			ИЗ
		|				ПараметрыОбъектовУчета
		|			ГДЕ
		|				ПараметрыОбъектовУчета.ВидДокумента = &ПустойВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктуальныеДокументы.ОбъектУчета КАК ОбъектУчета,
		|	АктуальныеДокументы.ВидДокумента КАК ВидДокумента,
		|	АктуальныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	АктуальныеДокументы.ЭлектронныйДокумент.Организация КАК Организация,
		|	АктуальныеДокументы.ЭлектронныйДокумент.НаОзнакомлении КАК НаОзнакомлении,
		|	АктуальныеДокументы.ЭлектронныйДокумент.СпособОбмена КАК СпособОбмена,
		|	АктуальныеДокументы.ЭлектронныйДокумент.НомерДокумента КАК НомерДокумента,
		|	АктуальныеДокументы.ЭлектронныйДокумент.ДатаДокумента КАК ДатаДокумента,
		|	СостоянияЭДО.Состояние КАК СостояниеЭДО,
		|	СообщениеЭДО.Статус КАК СтатусЭД,
		|	СостояниеПодписанияЭД.Объект ЕСТЬ NULL КАК ЭтапПодписанияОтсутствует
		|ИЗ
		|	АктуальныеДокументы КАК АктуальныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО АктуальныеДокументы.ЭлектронныйДокумент = СообщениеЭДО.ЭлектронныйДокумент
		|		И СообщениеЭДО.ТипЭлементаРегламента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
		|		ПО (СообщениеЭДО.Ссылка = СостояниеПодписанияЭД.Объект)
		|			И (СостояниеПодписанияЭД.Текущий)
		|			И (СостояниеПодписанияЭД.Подписант В (&ТекущийПользователь, &ПустойПользователь))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|		ПО СостоянияЭДО.ЭлектронныйДокумент = АктуальныеДокументы.ЭлектронныйДокумент ;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидДокумента,
		|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
		|	ПараметрыОбъектовУчета.Ссылка КАК ОбъектУчета,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта КАК ИдентификаторОбъекта
		|ИЗ
		|	РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента = ВидыДокументовЭДО.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|		ПО НастройкиВнутреннегоЭДО.Организация = ПараметрыОбъектовУчета.Организация
		|			И НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента = ПараметрыОбъектовУчета.ВидДокумента
		|			И (ПараметрыОбъектовУчета.ВидДокумента <> &ПустойВидДокумента)
		|			И (ВидыДокументовЭДО.ИдентификаторОбъектаУчета = ПараметрыОбъектовУчета.ИдентификаторОбъекта)
		|ГДЕ
		|	НастройкиВнутреннегоЭДО.Формировать
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента,
		|	НастройкиВнутреннегоЭДО.Организация,
		|	ПараметрыОбъектовУчета.Ссылка КАК ОбъектУчета,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта КАК ИдентификаторОбъекта
		|ИЗ
		|	РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента = ВидыДокументовЭДО.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|		ПО НастройкиВнутреннегоЭДО.Организация = ПараметрыОбъектовУчета.Организация
		|			И (ПараметрыОбъектовУчета.ВидДокумента = &ПустойВидДокумента)
		|			И (ВидыДокументовЭДО.ИдентификаторОбъектаУчета = ПараметрыОбъектовУчета.ИдентификаторОбъекта)
		|ГДЕ
		|	НастройкиВнутреннегоЭДО.Формировать
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	НастройкиОтправкиДокументовПоВидам.ВидДокумента,
		|	НастройкиОтправкиДокументовПоВидам.Отправитель,
		|	ПараметрыОбъектовУчета.Ссылка КАК ОбъектУчета,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта КАК ИдентификаторОбъекта
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиДокументовПоВидам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО НастройкиОтправкиДокументовПоВидам.ВидДокумента = ВидыДокументовЭДО.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|		ПО НастройкиОтправкиДокументовПоВидам.Отправитель = ПараметрыОбъектовУчета.Организация
		|			И НастройкиОтправкиДокументовПоВидам.ВидДокумента = ПараметрыОбъектовУчета.ВидДокумента
		|			И (ПараметрыОбъектовУчета.ВидДокумента <> &ПустойВидДокумента)
		|ГДЕ
		|	НастройкиОтправкиДокументовПоВидам.Формировать";
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыЗапросов[2].Выбрать();
	
	ПараметрыОпределенияДействия = Новый Структура("ЭлектронныйДокумент, ВидДокумента, СостояниеЭДО");
		
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОпределенияДействия.ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент;
		ПараметрыОпределенияДействия.ВидДокумента = Выборка.ВидДокумента;
		ПараметрыОпределенияДействия.СостояниеЭДО = Выборка.СостояниеЭДО;
		
		СостояниеЭДО = ЭлектронныеДокументыЭДО.СостояниеДокумента(Выборка.ЭлектронныйДокумент);
		СвойстваДокумента = Новый Структура("Ссылка, НаОзнакомлении, СпособОбмена",
			Выборка.ЭлектронныйДокумент, Выборка.НаОзнакомлении, Выборка.СпособОбмена);
		ДоступныеДействия = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(СостояниеЭДО, СвойстваДокумента);
		
		Если ЗначениеЗаполнено(ДоступныеДействия) Тогда
			Если ДоступныеДействия.Получить(Перечисления.ДействияПоЭДО.Сформировать) = Истина Тогда
				ОжидаемоеДействие = Перечисления.ДействияПоЭДО.Сформировать;
			ИначеЕсли ДоступныеДействия.Получить(Перечисления.ДействияПоЭДО.Подписать) = Истина Тогда
				ОжидаемоеДействие = Перечисления.ДействияПоЭДО.Подписать;
			КонецЕсли;
		Иначе
			ОжидаемоеДействие = Неопределено;
		КонецЕсли;

		ПараметрыПредставления = ЭлектронныеДокументыЭДО.НовыеСвойстваПредставленияДокумента();
		ПараметрыПредставления.ВидДокумента = Выборка.ВидДокумента;
		ПараметрыПредставления.НомерДокумента = Выборка.НомерДокумента;
		ПараметрыПредставления.ДатаДокумента = Выборка.ДатаДокумента;
		
		НоваяСтрока = СтатусыЭлектронныхДокументов.Добавить();
		НоваяСтрока.ОбъектУчета               = Выборка.ОбъектУчета;
		НоваяСтрока.Организация               = Выборка.Организация;
		НоваяСтрока.ЭлектронныйДокумент       = Выборка.ЭлектронныйДокумент;
		НоваяСтрока.ВидДокумента 			  = Выборка.ВидДокумента;
		НоваяСтрока.ПредставлениеДокумента    = ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(ПараметрыПредставления);
		НоваяСтрока.ОжидаемоеДействие         = ОжидаемоеДействие;
		
		Если Не ЗначениеЗаполнено(ОжидаемоеДействие) Тогда
			НоваяСтрока.ПредставлениеСостояния = СтрШаблон("<%1>", Выборка.СостояниеЭДО);
		ИначеЕсли Выборка.ЭтапПодписанияОтсутствует
			И ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.Подписать Тогда
			НоваяСтрока.ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
			НоваяСтрока.ПредставлениеСостояния = НСтр("ru = '<Ожидается подписание других лиц>'");
		КонецЕсли;
		
	КонецЦикла;
	
	ВыборкаНастроек = РезультатыЗапросов[3].Выбрать();
	
	ОбъектыУчетаПоИдентификаторам = Новый Соответствие;
	
	ОтборАктуальныхДокументовОбъекта = Новый Структура("ОбъектУчета, ВидДокумента");
	
	Пока ВыборкаНастроек.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборАктуальныхДокументовОбъекта, ВыборкаНастроек);
		
		Если СтатусыЭлектронныхДокументов.НайтиСтроки(ОтборАктуальныхДокументовОбъекта).Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтатусыЭлектронныхДокументов.Добавить();
		НоваяСтрока.ОбъектУчета             = ВыборкаНастроек.ОбъектУчета;
		НоваяСтрока.Организация             = ВыборкаНастроек.Организация;
		НоваяСтрока.ВидДокумента 			= ВыборкаНастроек.ВидДокумента;
		НоваяСтрока.ПредставлениеДокумента  = ВыборкаНастроек.ВидДокумента;
		НоваяСтрока.ОжидаемоеДействие       = Перечисления.ДействияПоЭДО.Сформировать;
		
		Если ОбъектыУчетаПоИдентификаторам[ВыборкаНастроек.ИдентификаторОбъекта] = Неопределено Тогда
			ОбъектыУчетаПоИдентификаторам.Вставить(ВыборкаНастроек.ИдентификаторОбъекта,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыборкаНастроек.ОбъектУчета));
		Иначе
			ОбъектыУчетаПоИдентификаторам[ВыборкаНастроек.ИдентификаторОбъекта].Добавить(ВыборкаНастроек.ОбъектУчета);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ОбъектыУчетаПоИдентификаторам) Тогда
		Возврат СтатусыЭлектронныхДокументов;
	КонецЕсли;
	
	Выборка = ВыборкаРеквизитовНомерДатаОбъектовУчета(ОбъектыУчетаПоИдентификаторам);
	
	ОтборОбъектаУчета = Новый Структура("ОбъектУчета");
	
	Пока Выборка.Следующий() Цикл
		
		ОтборОбъектаУчета.ОбъектУчета = Выборка.Ссылка;
		НайденныеСтроки = СтатусыЭлектронныхДокументов.НайтиСтроки(ОтборОбъектаУчета);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
	
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
			Если ЗначениеЗаполнено(СтрокаТаблицы.ЭлектронныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.ПредставлениеДокумента = ПредставлениеНеСформированногоДокументаПоВиду(
				СтрокаТаблицы.ВидДокумента, Выборка.Номер, Выборка.Дата);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтатусыЭлектронныхДокументов;
	
КонецФункции

Функция ПредставлениеНеСформированногоДокументаПоВиду(ВидДокумента, Номер, Дата)

	ЧастиПредставления = Новый Массив;
	ЧастиПредставления.Добавить(Строка(ВидДокумента));
	
	Если ЗначениеЗаполнено(Номер) Тогда
		ЧастиПредставления.Добавить("№");
		ЧастиПредставления.Добавить(ИнтеграцияБСПБЭД.ПредставлениеНомераОбъектаУчета(Номер));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Дата) Тогда
		ЧастиПредставления.Добавить(НСтр("ru = 'от'"));
		ЧастиПредставления.Добавить(Формат(Дата, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиПредставления, " ");
	
КонецФункции

#КонецОбласти

#Область ПереопределениеМеханизмаПечатиБСП

// см. УправлениеПечатьюПереопределяемый.ПриПечати
Процедура ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если Не НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами()
			Или Не НастройкиЭДО.ИспользуютсяВнутренниеДокументы() 
			Или ПараметрыПечати.Свойство("ИсключитьШтампы")
			Или Не ЭлектронныеДокументыЭДО.ЕстьПравоЧтенияДокументов() Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
		
		ПараметрыЭД = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектПечати.Значение);
		
		Если ЗначениеЗаполнено(ПараметрыЭД) И ПараметрыЭД.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
			
			Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
				
				ОбластьДокумента  = ПечатнаяФорма.ТабличныйДокумент.Области.Найти(ОбъектПечати.Представление);
				
				Если ОбластьДокумента <> Неопределено Тогда  
					
					Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ОбъектПечати.Значение));
		            КомандыПечати = УправлениеПечатью.КомандыПечатиОбъекта(ОбъектПечати.Значение.Метаданные());
					НайденнаяКоманда = КомандыПечати.Найти(ПечатнаяФорма.ИмяМакета, "Идентификатор"); 

					Если Не ЗначениеЗаполнено(НайденнаяКоманда) Тогда
						Возврат;
					КонецЕсли;
					
					ВидВнутреннегоДокумента = ЭлектронныеДокументыЭДО.НайтиСоздатьВидВнутреннегоДокумента(Идентификатор, НайденнаяКоманда);
					
					АктуальныйЭлектронныйДокумент = ИнтеграцияЭДО.АктуальныйЭлектронныйДокументОбъектаУчета(ОбъектПечати.Значение, ВидВнутреннегоДокумента);					
					
					Если Не ЗначениеЗаполнено(АктуальныйЭлектронныйДокумент) Тогда
						Продолжить;
					КонецЕсли;
					
					Организация = ПараметрыЭД.Организация;
					
					ЭД = ЭлектронныеДокументыЭДО.СообщениеОтправителя(АктуальныйЭлектронныйДокумент);
					
					Если Не ЗначениеЗаполнено(ЭД) Тогда
						Продолжить;
					КонецЕсли;
					
					ЭлектронныеДокументыЭДО.ДополнитьТабличныйДокументШтампамиПодписей(ПечатнаяФорма.ТабличныйДокумент,
						ЭД);
//					ЭлектронныеПодписиЭД = ЭлектронныеДокументыЭДО.УстановленныеПодписи(ЭД);
//					
//					Если ЭлектронныеПодписиЭД.Количество() = 0 Тогда
//						Продолжить;
//					КонецЕсли;
//					
//					ВидПодписи = ЭлектронныеПодписиЭД[0].ВидПодписи; 
//					
//					ИмяМакета = ?(ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая, "ШтампПЭП_%1", "ШтампЭП_%1");
//					
//					Штамп = Новый ТабличныйДокумент;
//					
//					МакетЭП = Обработки.ИнтерфейсДокументовЭДО.ПолучитьМакет(
//					СтрШаблон(ИмяМакета, ОбщегоНазначения.КодОсновногоЯзыка()));
//					МакетЭП.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
//					
//					КоличествоПодписей = ЭлектронныеПодписиЭД.Количество(); 
//					
//					Если КоличествоПодписей = 1 Тогда 
//						
//						ОбластьШтамп = МакетЭП.ПолучитьОбласть("ШтампОдинарныйСтрока|ШтампОдинарный");
//						
//						Если ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда 
//							ЗаполнитьОбластьШтампаПЭП(ОбластьШтамп, ЭлектронныеПодписиЭД[0], Организация); 
//						Иначе
//							ЗаполнитьОбластьШтампа(ОбластьШтамп, ЭлектронныеПодписиЭД[0]);
//						КонецЕсли;
//						
//						ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(Штамп, ОбластьШтамп, "ШтампЭП");
//						
//						Штамп.Область().СоздатьФорматСтрок();
//						
//						ВысотаШтампа = Штамп.ВысотаТаблицы;
//						
//						ИндексНачалаОбласти = ОбластьДокумента.Низ + 1;
//						ИндексКонцаОбласти = ИндексНачалаОбласти + ВысотаШтампа;
//						
//						Шаблон = "R%1:R%2";
//						ИдентификаторОбласти = СтрШаблон(Шаблон, Формат(ИндексНачалаОбласти, "ЧГ="), Формат(ИндексКонцаОбласти, "ЧГ="));
//						
//						ОбластьВставки = ПечатнаяФорма.ТабличныйДокумент.Область(ИдентификаторОбласти);
//						
//						ПечатнаяФорма.ТабличныйДокумент.ВставитьОбласть(Штамп.Область(), ОбластьВставки, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
//						
//						
//					Иначе
//						
//						ОбластьШапка = МакетЭП.ПолучитьОбласть("ШтампТабличныйШапка|ОбластьШтампТабличный");
//						ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(Штамп, ОбластьШапка, "ШтампТабличныйШапка");
//						
//						Разделитель = МакетЭП.ПолучитьОбласть("ШтампТабличныйРазделитель|ОбластьШтампТабличный");
//						
//						Счетчик = 0;
//						
//						Для Каждого Подпись Из ЭлектронныеПодписиЭД Цикл
//							
//							Счетчик = Счетчик + 1;
//							
//							ОбластьШтамп = МакетЭП.ПолучитьОбласть("ШтампТабличныйСтрока|ОбластьШтампТабличный");
//							
//							Если ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда 
//								ЗаполнитьОбластьШтампаПЭП(ОбластьШтамп, Подпись, Организация); 
//							Иначе
//								ЗаполнитьОбластьШтампа(ОбластьШтамп, Подпись);
//							КонецЕсли;
//							
//							ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(Штамп, ОбластьШтамп, "ШтампТабличныйСтрока");
//							
//							Если Счетчик <> КоличествоПодписей Тогда
//								ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(Штамп, Разделитель, "ШтампТабличныйРазделитель");
//							КонецЕсли;
//							
//						КонецЦикла;
//						
//						ОбластьПодвал = МакетЭП.ПолучитьОбласть("ШтампТабличныйПодвал|ОбластьШтампТабличный");
//						ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(Штамп, ОбластьПодвал, "ШтампТабличныйПодвал");
//						
//						Штамп.Область().СоздатьФорматСтрок();
//						
//						ВысотаШтампа = Штамп.ВысотаТаблицы;
//						
//						ИндексНачалаОбласти = ОбластьДокумента.Низ + 1;
//						ИндексКонцаОбласти = ИндексНачалаОбласти + ВысотаШтампа;
//						
//						Шаблон = "R%1:R%2";
//						ИдентификаторОбласти = СтрШаблон(Шаблон, Формат(ИндексНачалаОбласти, "ЧГ="), Формат(ИндексКонцаОбласти, "ЧГ="));
//						
//						ОбластьВставки = ПечатнаяФорма.ТабличныйДокумент.Область(ИдентификаторОбласти);
//						
//						ПечатнаяФорма.ТабличныйДокумент.ВставитьОбласть(Штамп.Область(), ОбластьВставки, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
//						
//					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// см. УправлениеПечатьюПереопределяемый.ПечатьДокументовПриСозданииНаСервере
Процедура ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	Если Не НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами()
		Или Не ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов() Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыУчета = Форма.Параметры.ПараметрКоманды;
	
	Если Не ЗначениеЗаполнено(ОбъектыУчета) Тогда 
		 Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектыУчета) <> Тип("Массив") Тогда
		 ОбъектыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектыУчета);
	КонецЕсли;

	ПараметрыЭД = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектыУчета[0]);
	
	Если ПараметрыЭД.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда  
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВнутренниеДокументыЭДО") Тогда 
			ДополнитьЭлементамиВнутреннегоЭДО(Форма, Отказ, СтандартнаяОбработка);
		КонецЕсли; 
	ИначеЕсли ОбъектыУчета.Количество() = 1 
		И Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип.СодержитТип(ТипЗнч(ОбъектыУчета[0])) Тогда
		ДополнитьЭлементамиВнешнегоЭДО(Форма, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СоставПакета

Функция ДокументыПакета(ИдентификаторПакета) Экспорт
	
	ДокументыПакета = ЭлектронныеДокументыЭДО.ДокументыПакета(ИдентификаторПакета);
	
	Если Не ЗначениеЗаполнено(ДокументыПакета) Тогда
		Возврат ДокументыПакета;
	КонецЕсли;
	
	ЗапросСвойствДокументов = ЭлектронныеДокументыЭДО.ЗапросСвойствДокументов(ДокументыПакета, "СвойстваДокументов");
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросСвойствДокументов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СвойстваДокументов.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	|ИЗ
	|	СвойстваДокументов КАК СвойстваДокументов
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваДокументов.ВидДокумента.ПорядокСортировкиВПакете ВОЗР,
	|	СвойстваДокументов.ЭлектронныйДокумент";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	Возврат ИтоговыйЗапрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭлектронныйДокумент");
	
КонецФункции

Процедура СформироватьПанельСоставаПакета(Форма, МестоРазмещения, КоличествоОтображаемыхДокументовПакета, Направление) Экспорт
		
	Если МестоРазмещения.ПодчиненныеЭлементы.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;	
	
	МестоРазмещения.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
	МестоРазмещения.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	МестоРазмещения.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	МестоРазмещения.Видимость = Ложь;
		
	Для ПорядковыйНомерЭлемента = 1 По КоличествоОтображаемыхДокументовПакета Цикл 
		
		// Закладка
		ГруппаЗакладка = Форма.Элементы.Добавить("ПанельСоставаПакета_Закладка_" + Строка(ПорядковыйНомерЭлемента), Тип("ГруппаФормы"), МестоРазмещения);
		ГруппаЗакладка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗакладка.ОтображатьЗаголовок = Ложь;
		ГруппаЗакладка.ЦветФона = ЦветФонаШапкиПакетаДокументов();
		ГруппаЗакладка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЗакладка.Объединенная = Истина;
		ГруппаЗакладка.РастягиватьПоГоризонтали = Ложь;
		ГруппаЗакладка.РастягиватьПоВертикали = Ложь;
		ГруппаЗакладка.Видимость = Ложь;
		ГруппаЗакладка.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		ГруппаЗакладка.ГоризонтальноеПоложениеВГруппе  = ГоризонтальноеПоложениеЭлемента.Центр;

		// Текст закладки (наименование документа)
		ЭлементУправления_ТекстЗакладки = Форма.Элементы.Добавить(
			"ЭлементУправления_ТекстЗакладки_" + Строка(ПорядковыйНомерЭлемента), 
			Тип("ДекорацияФормы"), ГруппаЗакладка);
		
		ЭлементУправления_ТекстЗакладки.Вид = ВидДекорацииФормы.Надпись;
		ЭлементУправления_ТекстЗакладки.УстановитьДействие("ОбработкаНавигационнойСсылки",
			"Подключаемый_СоставПакета_ОбработкаНавигационнойСсылки");
		ЭлементУправления_ТекстЗакладки.РастягиватьПоГоризонтали = Истина;
		ЭлементУправления_ТекстЗакладки.АвтоМаксимальнаяШирина = Ложь;
		ЭлементУправления_ТекстЗакладки.Высота = 1;
		
		Если Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
			// Разделитель
			ЭлементУправления_Разделитель = Форма.Элементы.Добавить(
				"ЭлементУправления_Разделитель_" + Строка(ПорядковыйНомерЭлемента), 
				Тип("ДекорацияФормы"), ГруппаЗакладка);
			
			ЭлементУправления_Разделитель.Вид = ВидДекорацииФормы.Надпись;
			ЭлементУправления_Разделитель.Заголовок = Символы.НПП;
			// Кнопка удаления из пакета 
			ЭлементУправленияПакета_УдалитьДокумент = Форма.Элементы.Добавить(
				"ЭлементУправленияПакета_УдалитьДокумент_" + Строка(ПорядковыйНомерЭлемента), 
				Тип("ДекорацияФормы"), ГруппаЗакладка);
			
			ЭлементУправленияПакета_УдалитьДокумент.Вид = ВидДекорацииФормы.Картинка;
			ЭлементУправленияПакета_УдалитьДокумент.Картинка = БиблиотекаКартинок.Закрыть;
			ЭлементУправленияПакета_УдалитьДокумент.УстановитьДействие("Нажатие",
				"Подключаемый_СоставПакета_Нажатие");
			ЭлементУправленияПакета_УдалитьДокумент.Гиперссылка = Истина;

		КонецЕсли;
		
	КонецЦикла;

	// Закладка
	ГруппаДопЭлементы = Форма.Элементы.Добавить("ПанельСоставаПакета_ГруппаДопЭлементы", Тип(
		"ГруппаФормы"), МестоРазмещения);
	ГруппаДопЭлементы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДопЭлементы.ОтображатьЗаголовок = Ложь;
	ГруппаДопЭлементы.ЦветФона = ЦветФонаШапкиПакетаДокументов();
	ГруппаДопЭлементы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаДопЭлементы.Объединенная = Истина;
	ГруппаДопЭлементы.РастягиватьПоГоризонтали = Истина;
	ГруппаДопЭлементы.РастягиватьПоВертикали = Ложь;
	ГруппаДопЭлементы.Видимость = Истина;
	ГруппаДопЭлементы.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаДопЭлементы.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	
	// ссылка списка остальных документов пакета 
	ЭлементУправленияПакета_ПоказатьОстальныеДокументы = Форма.Элементы.Добавить(
		"ЭлементУправленияПакета_ПоказатьОстальныеДокументы", Тип("ДекорацияФормы"),
		ГруппаДопЭлементы);

	ЭлементУправленияПакета_ПоказатьОстальныеДокументы.Вид = ВидДекорацииФормы.Надпись;
	ЭлементУправленияПакета_ПоказатьОстальныеДокументы.УстановитьДействие("ОбработкаНавигационнойСсылки",
		"Подключаемый_СоставПакета_ОбработкаНавигационнойСсылки");
	ЭлементУправленияПакета_ПоказатьОстальныеДокументы.Высота = 1;
	
	ЭлементУправления_Разделитель = Форма.Элементы.Добавить(
		"ЭлементУправления_Разделитель_" + Строка(ПорядковыйНомерЭлемента), Тип("ДекорацияФормы"),
		ГруппаДопЭлементы);

	ЭлементУправления_Разделитель.Вид = ВидДекорацииФормы.Надпись;
	ЭлементУправления_Разделитель.Заголовок = Символы.НПП;
	
	Если Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
		// Кнопка добавления документа в пакет 
		ЭлементУправленияПакета_ДобавитьДокумент = Форма.Элементы.Добавить(
			"ЭлементУправленияПакета_ЭлементУправленияПакета_ДобавитьДокумент", Тип(
			"ДекорацияФормы"), ГруппаДопЭлементы);
	
		ЭлементУправленияПакета_ДобавитьДокумент.Вид = ВидДекорацииФормы.Картинка;
		ЭлементУправленияПакета_ДобавитьДокумент.Картинка = БиблиотекаКартинок.ДобавитьЭлементСписка;
		ЭлементУправленияПакета_ДобавитьДокумент.УстановитьДействие("Нажатие",
			"Подключаемый_СоставПакета_Нажатие");
		ЭлементУправленияПакета_ДобавитьДокумент.Гиперссылка = Истина;
	КонецЕсли;
	
	// Пустышка
	ЭлементУправленияПакета_Пустышка = Форма.Элементы.Добавить(
		"ЭлементУправленияПакета_Пустышка", Тип("ДекорацияФормы"),
		ГруппаДопЭлементы);

	ЭлементУправленияПакета_Пустышка.Вид = ВидДекорацииФормы.Картинка;
	ЭлементУправленияПакета_Пустышка.Высота = 1;
		
КонецПроцедуры

Процедура ЗаполнитьПанельСоставаПакета(Форма) Экспорт

	КоличествоОтображаемыхДокументовПакета = Форма.КоличествоОтображаемыхДокументовПакета;
	КоличествоДокументовВПакете = Форма.СоставПакета.Количество();
	
	Если КоличествоДокументовВПакете <= 1 Тогда
		Форма.Элементы.ГруппаСоставПакета.Видимость = Ложь;
		Форма.Элементы.ГруппаШапка.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ГруппаШапка.ЦветФона = ЦветФонаШапкиПакетаДокументов();
	Форма.Элементы.ГруппаСоставПакета.Видимость = Истина;
	ГраницыВывода = ИнтерфейсДокументовЭДОКлиентСервер.ГраницыВыводаДокументовПакета(Форма.СоставПакета,
			Форма.Объект.Ссылка, Форма.КоличествоОтображаемыхДокументовПакета);
			
	ПорядковыйНомерЭлемента = 1;
			
	Форма.ОтображаемыеДокументыПакета.Очистить();		
		
	СвойстваДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Форма.СоставПакета.ВыгрузитьЗначения(),
		"ВидДокумента, НомерДокумента, ДатаДокумента");

	Для ИндексДокумента = ГраницыВывода.ИндексНачалоВыводаЭлементов 
		По ГраницыВывода.ИндексКонцаВыводаЭлементов  Цикл
			
		ТекущийДокументПакета = Форма.СоставПакета[ИндексДокумента - 1].Значение;
		
		СвойстваДокумента = СвойстваДокументов.Получить(ТекущийДокументПакета);
		
		ПараметрыПредставления = ЭлектронныеДокументыЭДО.НовыеСвойстваПредставленияДокумента();
		ПараметрыПредставления.ВидДокумента = СвойстваДокумента.ВидДокумента;
		ПараметрыПредставления.НомерДокумента = СвойстваДокумента.НомерДокумента;
		ПараметрыПредставления.ДатаДокумента = СвойстваДокумента.ДатаДокумента;
		
		ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(ПараметрыПредставления);
		
		Если Форма.Объект.Ссылка <> ТекущийДокументПакета Тогда
			ТекстЗакладки = Новый ФорматированнаяСтрока(Строка(ПредставлениеДокумента),
				,,, "Open_" + Формат(ИндексДокумента, "ЧГ=;"));
			Форма.Элементы["ПанельСоставаПакета_Закладка_" + Строка(ПорядковыйНомерЭлемента)].ЦветФона = ЦветФонаШапкиПакетаДокументов();
		Иначе
			ТекстЗакладки = ПредставлениеДокумента;
			Форма.Элементы["ПанельСоставаПакета_Закладка_" + Строка(ПорядковыйНомерЭлемента)].ЦветФона = Новый Цвет(255, 255, 255);
		КонецЕсли;
		
		Форма.Элементы["ЭлементУправления_ТекстЗакладки_" + Строка(ПорядковыйНомерЭлемента)].Заголовок = ТекстЗакладки;
		Форма.Элементы["ПанельСоставаПакета_Закладка_" + Строка(ПорядковыйНомерЭлемента)].Видимость = Истина; 
		
		ПорядковыйНомерЭлемента = ПорядковыйНомерЭлемента + 1; 
		
		Форма.ОтображаемыеДокументыПакета.Добавить(ТекущийДокументПакета);
		
	КонецЦикла;	

	Если КоличествоДокументовВПакете <= КоличествоОтображаемыхДокументовПакета Тогда
		
		Для ПорядковыйНомерЭлемента = КоличествоДокументовВПакете + 1 По КоличествоОтображаемыхДокументовПакета Цикл
			
			Форма.Элементы["ПанельСоставаПакета_Закладка_" + Строка(ПорядковыйНомерЭлемента)].Видимость = Ложь; 
		 
		КонецЦикла;	
		
		Форма.Элементы["ЭлементУправленияПакета_ПоказатьОстальныеДокументы"].Видимость = Ложь;
	
	Иначе
		
		КоличествоСкрытыхДокументов = КоличествоДокументовВПакете - КоличествоОтображаемыхДокументовПакета;
		
		ПредставлениеСкрытыхДокументов = СтрШаблон(
			"%1%2%3",
			НСтр("ru = 'и еще'"),
			Символы.НПП,
			Строка(КоличествоСкрытыхДокументов));
		
		ФорматированноеПредставлениеСкрытыхДокументов = Новый ФорматированнаяСтрока(
			ПредставлениеСкрытыхДокументов,
			,
			,
			,
			"Show");
				
		Форма.Элементы["ЭлементУправленияПакета_ПоказатьОстальныеДокументы"].Заголовок =
			ФорматированноеПредставлениеСкрытыхДокументов;
		
		Форма.Элементы["ЭлементУправленияПакета_ПоказатьОстальныеДокументы"].Видимость = Истина;
			
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.СоставПакета) Или Не Форма.ДоступноИзменениеПакета 
		И ТипЗнч(Форма.Объект.Ссылка) <> Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		Форма.Элементы["ЭлементУправленияПакета_ЭлементУправленияПакета_ДобавитьДокумент"].Видимость = Ложь;
	КонецЕсли;	

КонецПроцедуры

Процедура СоставПакета_ОбработкаНавигационнойСсылкиНаСервере(Форма, НавигационнаяСсылка) Экспорт
	
	Если СтрНайти(НавигационнаяСсылка, "Open_") > 0 Тогда
		
		ИндексДокумента = Число(СтрЗаменить(НавигационнаяСсылка, "Open_", ""));
		
		Документ = Форма.СоставПакета[ИндексДокумента -1].Значение;
		ОбъектДокумента = Документ.ПолучитьОбъект();
		ЗначениеВДанныеФормы(ОбъектДокумента, Форма.Объект);
		Форма.Прочитать();
		
	КонецЕсли;
	
КонецПроцедуры
	
Функция ЗаголовокОтображенияПакетов(КоличествоДокументов) Экспорт
	Если КоличествоДокументов Тогда
		ШаблонСтроки = НСтр("ru = ';Пакет из %1 документа;;Пакет из %1 документов;Пакет из %1 документов;Пакет из %1 документов'");
		Возврат СтрокаСЧислом(ШаблонСтроки, КоличествоДокументов, ВидЧисловогоЗначения.Количественное);
	КонецЕсли;
КонецФункции	
	
Функция ЗаголовокНовогоПроизвольногоДокумента() Экспорт
	Возврат НСтр("ru = 'Новый произвольный документ (создание)'");
КонецФункции
	
Процедура ДополнитьДокументамиПакетов(ЭлектронныеДокументы) Экспорт
	
	МассивДокументов = Новый Массив;
	
	Для Каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
		ИдентификаторПакета = ЭлектронныеДокументыЭДО.ИдентификаторПакетаДокумента(ЭлектронныйДокумент);
		
		Если ЗначениеЗаполнено(ИдентификаторПакета) Тогда
			ДокументыПакета = ЭлектронныеДокументыЭДО.ДокументыПакета(ИдентификаторПакета);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДокументов, ДокументыПакета);
		Иначе
			МассивДокументов.Добавить(ЭлектронныйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлектронныеДокументы = МассивДокументов;
	
КонецПроцедуры

#КонецОбласти

#Область СхемаРегламента

Функция НовыеДанныеЭлементовСхемы() Экспорт
	ДанныеЭлементов = Новый ТаблицаЗначений;
	ДанныеЭлементов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДанныеЭлементов.Колонки.Добавить("ТипЭлементаРегламента",
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО"));
	ДанныеЭлементов.Колонки.Добавить("Сообщение", Новый ОписаниеТипов("ДокументСсылка.СообщениеЭДО"));
	ДанныеЭлементов.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	ДанныеЭлементов.Колонки.Добавить("ВидСообщения", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	ДанныеЭлементов.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	ДанныеЭлементов.Колонки.Добавить("Направление", Новый ОписаниеТипов("ПеречислениеСсылка.НаправленияЭДО"));
	ДанныеЭлементов.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыСообщенийЭДО"));
	ДанныеЭлементов.Колонки.Добавить("ДатаИзмененияСтатуса", Новый ОписаниеТипов("Дата"));
	ДанныеЭлементов.Колонки.Добавить("ДополнительнаяИнформация", Новый ОписаниеТипов("Строка"));
	ДанныеЭлементов.Колонки.Добавить("ПрисоединенныйФайл",
		Новый ОписаниеТипов("СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы"));
	ДанныеЭлементов.Колонки.Добавить("АдресОписанияСообщения", Новый ОписаниеТипов("Строка"));
	ДанныеЭлементов.Колонки.Добавить("Доступность", Новый ОписаниеТипов("Булево"));
	Возврат ДанныеЭлементов;
КонецФункции

Процедура ЗаполнитьСхемуРегламента(НастройкиСхемыРегламента, ДанныеЭлементовСхемы, СхемаРегламента) Экспорт
	
	НоваяСхемаРегламента = ЭлектронныеДокументыЭДО.НоваяСхемаРегламента(НастройкиСхемыРегламента, ДанныеЭлементовСхемы);
	
	ЗаполнитьПустыеДанныеЭлементовСхемыРегламента(НоваяСхемаРегламента, ДанныеЭлементовСхемы);
	
	ОбновитьЭлементыСхемыРегламента(СхемаРегламента, НоваяСхемаРегламента);
	
КонецПроцедуры

Функция ИдентификаторЭлементаСхемыРегламента(ЭлементСхемыРодитель, Сообщение) Экспорт
	
	КоллекцияЭлементовСхемы = ЭлементСхемыРодитель.ПолучитьЭлементы();
	Если КоллекцияЭлементовСхемы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ЭлементСхемы Из КоллекцияЭлементовСхемы Цикл
		Если ЭлементСхемы.Сообщение = Сообщение Тогда
			Возврат ЭлементСхемы.ПолучитьИдентификатор();
		КонецЕсли;
		ИдентификаторЭлемента = ИдентификаторЭлементаСхемыРегламента(ЭлементСхемы, Сообщение);
		Если ИдентификаторЭлемента <> Неопределено Тогда
			Возврат ИдентификаторЭлемента;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ПредупрежденияКомпонентов

Процедура СформироватьПредупреждения(Форма, ГруппаПредупреждений) Экспорт
	
	КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроекОтправки.Отправитель = Форма.Объект.Организация;
	КлючНастроекОтправки.Получатель = Форма.Объект.Контрагент;
	КлючНастроекОтправки.Договор = Форма.Объект.ДоговорКонтрагента;
	КлючНастроекОтправки.ВидДокумента = Форма.Объект.ВидДокумента;
	
	Предупреждения = ИнтерфейсДокументовЭДО.ПолучитьПредупрежденияКомпонентов(КлючНастроекОтправки);
	
	Форма.АдресХранилищаПредупреждений = ПоместитьВоВременноеХранилище(Предупреждения, Форма.УникальныйИдентификатор);
	
	НеподдерживаемыйСпособОбменаВид = НастройкиЭДО.ВидыПредупреждений().НеподдерживаемыйСпособОбмена;
	ПредупрежденияНеподдерживаемыйСпособОбмена = ИнтерфейсДокументовЭДОКлиентСервер.ПредупрежденияПоВиду(Предупреждения,
		НеподдерживаемыйСпособОбменаВид);
	
	ИмяГруппыПрекращенияПрямогоОбмена = "ГруппаПрекращениеПоддержкиПрямогоОбмена";
	ИмяГруппыПрекращенияПредупрежденияОбменаСКонтрагентом = "ГруппПредупрежденияОбменаСКонтрагентом";
	ИмяГруппыОНеактуальномЭлектронномДокументе = "ГруппПредупрежденияОНеактуальномЭлектронномДокументе";
	
	СоздатьЭлементыОтображенияПредупрежденияПрекращенияПрямогоОбмена(Форма, ГруппаПредупреждений,
		ИмяГруппыПрекращенияПрямогоОбмена);
	СоздатьЭлементыОтображенияПредупрежденияОбменаСКонтрагентом(Форма, ГруппаПредупреждений,
		ИмяГруппыПрекращенияПредупрежденияОбменаСКонтрагентом);
	СоздатьЭлементыОтображенияПредупрежденияОНеактуальномЭлектронномДокументе(Форма, ГруппаПредупреждений,
		ИмяГруппыОНеактуальномЭлектронномДокументе);

	Форма.Элементы.Найти(ИмяГруппыПрекращенияПрямогоОбмена).Видимость = ЗначениеЗаполнено(
		ПредупрежденияНеподдерживаемыйСпособОбмена);
	Форма.Элементы.Найти(ИмяГруппыПрекращенияПредупрежденияОбменаСКонтрагентом).Видимость = ЗначениеЗаполнено(
		Предупреждения);
	Форма.Элементы.Найти(ИмяГруппыОНеактуальномЭлектронномДокументе).Видимость = Ложь;	
	
	МассивОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Объект.Ссылка);
	
	ОбъектыУчетаЭлектронныхДокументов = ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(МассивОбъектов);
	ОбъектыУчетаЭлектронногоДокумента = ОбъектыУчетаЭлектронныхДокументов.НайтиСтроки(Новый Структура("ЭлектронныйДокумент", Форма.Объект.Ссылка));
		
	Для Каждого СтрокаДанных Из ОбъектыУчетаЭлектронногоДокумента Цикл
		Если Не СтрокаДанных.Актуальный 
			И ТипЗнч(СтрокаДанных.ОбъектУчета) <> Тип("СправочникСсылка.НастройкиЭДО") Тогда
			
			Форма.Элементы.Найти(ИмяГруппыОНеактуальномЭлектронномДокументе).Видимость = Истина;	
	
			Прервать;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Переформирование

Процедура НастроитьКомандуПереформировать(Форма, ЭлементСхемы) Экспорт
	
	КнопкаПереформировать = Форма.Элементы.Переформировать;
	
	ЕстьПравоОбработкиДокументов = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	
	Если Форма.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован 
		Или Не ЭлементСхемы.Распознан 
		Или ЭлементСхемы.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.КаталогТоваров)
		Или Не ЕстьПравоОбработкиДокументов Тогда
		
		КнопкаПереформировать.Видимость = Ложь;	
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ПереформироватьДокумент") Тогда
			 Форма.Элементы.ПереформироватьДокумент.Видимость = Ложь;	
		КонецЕсли;
		Возврат;
	Иначе
		КнопкаПереформировать.Видимость = Истина;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ПереформироватьДокумент") Тогда
			 Форма.Элементы.ПереформироватьДокумент.Видимость = Истина;	
		КонецЕсли;	
	КонецЕсли;
	
	Если Форма.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		ПереместитьЭлемент(Форма.Элементы, Форма.Элементы.Переформировать.Имя, Форма.Элементы.ГруппаКоманды,
			Форма.Элементы.ГруппаКомандОсновные.Имя);
			
	Иначе
		ПереместитьЭлемент(Форма.Элементы, Форма.Элементы.Переформировать.Имя, Форма.Элементы.ПодменюДругиеДействия,
			Форма.Элементы.ГруппаКомандСоздатьПроизвольныйДокумент.Имя);
	КонецЕсли;
	
	Если ЭлементСхемы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
		КнопкаПереформировать.Заголовок = НСтр("ru = 'Переформировать документ'");
	ИначеЕсли ЭлементСхемы.Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
		КнопкаПереформировать.Заголовок = СтрШаблон(НСтр("ru = 'Переформировать %1'"), ЭлементСхемы.ВидДокумента);
	Иначе
		КнопкаПереформировать.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Настройки
	
Функция НастройкиВнутреннегоЭДО(Организация, ВидДокумента) Экспорт
	
	Запросы = Новый Массив;
	
	ОтборНастроекВнутреннегоЭДО = НастройкиЭДО.НовыйОтборНастроекВнутреннегоЭДО();
	ОтборНастроекВнутреннегоЭДО.Организация = "&Организация";
	ОтборНастроекВнутреннегоЭДО.ВидДокумента = "&ВидДокумента";
	Организация = Организация;		
	
	ЗапросНастроек = НастройкиЭДО.ЗапросНастроекВнутреннегоЭДО("НастройкиВнутреннегоЭДО", ОтборНастроекВнутреннегоЭДО);
	
	Запросы.Добавить(ЗапросНастроек);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
	|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидДокумента,
	|	НастройкиВнутреннегоЭДО.Формировать КАК Формировать,
	|	НастройкиВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
	|	НастройкиВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
	|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента
	|ИЗ
	|	НастройкиВнутреннегоЭДО";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Организация", Организация);
	ИтоговыйЗапрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса.Выгрузить())[0];
	КонецЕсли;
	
КонецФункции
	
#КонецОбласти
// Подготавливает необходимые данные для формирования пакета ЭД.
//
// Параметры:
//  Параметры - Структура - параметры для заполнения документа;
//  
//  Возвращаемое значение
//  Структура
//  *ТаблицаЭД - ТаблицаЗначений
//  *ТекстОшибки - Строка
//
Функция ПодготовитьДанныеДляЗаполненияДокументов(Параметры) Экспорт
	
	ТаблицаЭД = Новый ТаблицаЗначений;
	ТаблицаЭД.Колонки.Добавить("ПолноеИмяФайла");
	ТаблицаЭД.Колонки.Добавить("ИмяФайла");
	ТаблицаЭД.Колонки.Добавить("НаправлениеЭД");
	ТаблицаЭД.Колонки.Добавить("Контрагент");
	ТаблицаЭД.Колонки.Добавить("ДвоичныеДанныеПакета");
	ТаблицаЭД.Колонки.Добавить("ДвоичныеДанныеФайла");
	
	ОписанияОбъектовУчета = ИнтеграцияЭДО.ОписанияОбъектовУчета(Параметры.МассивСсылокНаОбъект);
	
	РезультатФормирования = ЭлектронныеДокументыЭДО.СформироватьДанныеДокументовДляВыгрузки(ОписанияОбъектовУчета);
	ДанныеДокументов = РезультатФормирования.ДанныеДокументов;
	ТекстОшибки = РезультатФормирования.ТекстОшибки;
	
	Для Каждого ДанныеДокумента Из ДанныеДокументов Цикл
		НоваяСтрока = ТаблицаЭД.Добавить();
		НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий;
		НоваяСтрока.ДвоичныеДанныеФайла = ДанныеДокумента.ОписаниеДанных.ДвоичныеДанные;
		НоваяСтрока.Контрагент = ДанныеДокумента.Контрагент;
		
		ДанныеПакета = СинхронизацияЭДО.ДвоичныеДанныеТранспортногоКонтейнера(ДанныеДокументов[0]);
				
		НоваяСтрока.ДвоичныеДанныеПакета = ДанныеПакета;
		НоваяСтрока.ПолноеИмяФайла = ДанныеДокумента.ОписаниеДанных.ИмяФайла;
		НоваяСтрока.ИмяФайла = ДанныеДокумента.ОписаниеДанных.ИмяФайла;			
	КонецЦикла;
	
	РезультатФормирования = Новый Структура("ТаблицаЭД, ТекстОшибки", ТаблицаЭД, ТекстОшибки);
	Возврат РезультатФормирования;
		
КонецФункции

Функция ПредставлениеКарточкиСообщения(Сообщение, ОтветноеСообщение = Неопределено) Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.ПредставлениеКарточкиСообщения(Сообщение, ОтветноеСообщение);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПросмотрЭлектронногоДокумента

// Возвращает параметры просмотра электронного документа.
// 
// Параметры:
// 	ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект учета.
// Возвращаемое значение:
// 	Структура - параметры просмотра электронного документа.
// 	* ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ.
// 	* ПредварительныйПросмотр - Структура - параметры предварительного просмотра, если электронный документ не сформирован.
// 	** РезультатПроверкиГотовности - см. ПроверитьГотовностьОбъектаУчетаКДокументообороту
// 	** РезультатПоискаНастроек - см. НастройкиФормированияЭлектронногоДокументаОбъектаУчета
// 	** РезультатПодготовкиДанных - см. ПодготовитьДанныеПредварительногоПросмотра
Функция ПараметрыПросмотраЭлектронногоДокументаОбъектаУчета(ОбъектУчета, ДополнительныеДанные = Неопределено) Экспорт
	
	ПараметрыПросмотра = Новый Структура;
	ПараметрыПросмотра.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(ДополнительныеДанные)
		И ДополнительныеДанные.Свойство("ВидДокумента") 
		И ЗначениеЗаполнено(ДополнительныеДанные.ВидДокумента) Тогда
		ЭлектронныйДокумент = ИнтеграцияЭДО.АктуальныйЭлектронныйДокументОбъектаУчета(ОбъектУчета, ДополнительныеДанные.ВидДокумента);
	Иначе
		ЭлектронныйДокумент = ИнтеграцияЭДО.ОсновнойЭлектронныйДокументОбъектаУчета(ОбъектУчета);
	КонецЕсли;

	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		ПараметрыПросмотра.ЭлектронныйДокумент = ЭлектронныйДокумент;
		Возврат ПараметрыПросмотра;
	КонецЕсли;
	
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектУчета);
	
	Если ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
		ТекстСообщения = НСтр("ru = 'Электронный документ отсутствует.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат ПараметрыПросмотра;
	КонецЕсли;	
	
	ПредварительныйПросмотр = Новый Структура;
	ПараметрыПросмотра.Вставить("ПредварительныйПросмотр", ПредварительныйПросмотр);
	
	РезультатПроверкиГотовности = ПроверитьГотовностьОбъектаУчетаКДокументообороту(ОбъектУчета);
	ПредварительныйПросмотр.Вставить("РезультатПроверкиГотовности", РезультатПроверкиГотовности);
	Если Не РезультатПроверкиГотовности.Успех Тогда
		Возврат ПараметрыПросмотра;
	КонецЕсли;	
	
	РезультатПоискаНастроек = НастройкиФормированияЭлектронногоДокументаОбъектаУчета(ОписаниеОбъектаУчета, ДополнительныеДанные);
	ПредварительныйПросмотр.Вставить("РезультатПоискаНастроек", РезультатПоискаНастроек);
	Если Не РезультатПоискаНастроек.Успех Тогда
		Возврат ПараметрыПросмотра;
	КонецЕсли;
	
	РезультатПодготовкиДанных = ПодготовитьДанныеПредварительногоПросмотра(ОписаниеОбъектаУчета, РезультатПоискаНастроек.Настройки, ДополнительныеДанные);
	ПредварительныйПросмотр.Вставить("РезультатПодготовкиДанных", РезультатПодготовкиДанных);
	
	Возврат ПараметрыПросмотра;
	
КонецФункции

// Проверяет готовность объекта учета к документообороту.
// 
// Параметры:
// 	ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// Возвращаемое значение:
// 	Структура - результат проверки готовности объекта учета:
// 	* Успех - Булево - признак готовности объекта учета к документообороту.
// 	* ПроверкаГотовности - Структура - см. ИнтеграцияЭДО.ПроверкаГотовностиКДокументообороту
Функция ПроверитьГотовностьОбъектаУчетаКДокументообороту(ОбъектУчета)
	
	РезультатПроверки = Новый Структура("Успех", Истина);
	
	НаборОбъектовУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета);
	ПроверкаГотовности = ИнтеграцияЭДО.ПроверкаГотовностиКДокументообороту(НаборОбъектовУчета);
	Если Не ИнтеграцияЭДОКлиентСервер.ГотовностьКДокументообороту(ПроверкаГотовности) Тогда
		РезультатПроверки.Успех = Ложь;
		РезультатПроверки.Вставить("ПроверкаГотовности", ПроверкаГотовности);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Выполняет поиск настроек формирования по объекту учета.
// 
// Параметры:
// 	ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// Возвращаемое значение:
// 	Структура - результат поиска настройки отправки:
// 	* Успех - Булево - признак наличия настроек.
// 	* Настройки - Неопределено, См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета:
// 	* ПараметрыПоиска - Неопределено, Структура - Описание:
// 	  ** Направление - ПеречислениеСсылка.НаправленияЭДО - направление электронного документа.
// 	  ** КлючНастроекОтправки - См. ЭлектронныеДокументыЭДО.КлючНастроекОтправкиОбъектаУчета
// 	  ** КлючОсновнойНастройкиВнутреннегоЭДО - Структура
Функция НастройкиФормированияЭлектронногоДокументаОбъектаУчета(ОписаниеОбъектаУчета, ДополнительныеДанные = Неопределено)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ОбъектУчета", ОписаниеОбъектаУчета.ОбъектУчета);
	ПараметрыПоиска.Вставить("Направление", ОписаниеОбъектаУчета.Направление);
	ПараметрыПоиска.Вставить("КлючНастроекОтправки");
	ПараметрыПоиска.Вставить("КлючНастроекИнтеркампани");
	ПараметрыПоиска.Вставить("КлючОсновнойНастройкиВнутреннегоЭДО");
	ПараметрыПоиска.Вставить("ПараметрыОсновногоВидаВнутреннегоДокумента");
	
	НастройкиФормирования = ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета();
	НастройкиФормирования.Направление = ОписаниеОбъектаУчета.Направление;
	
	ФормированиеЗапрещено = Ложь;
	Успех = Истина;
	УказанОсновнойВидДокумента = Истина;
	
	Если ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
		ПараметрыПоиска.КлючОсновнойНастройкиВнутреннегоЭДО = Новый Структура("ОбъектУчета, Организация");
		Если ДополнительныеДанные <> Неопределено 
			И ДополнительныеДанные.Свойство("ВидДокумента")
			И ЗначениеЗаполнено(ДополнительныеДанные.ВидДокумента) Тогда
			Настройки = НастройкиВнутреннегоЭДО(ОписаниеОбъектаУчета.Организация, ДополнительныеДанные.ВидДокумента);
		Иначе
			ЗаполнитьЗначенияСвойств(ПараметрыПоиска.КлючОсновнойНастройкиВнутреннегоЭДО, ОписаниеОбъектаУчета);
			Настройки = НастройкиОсновногоВидаВнутреннегоДокумента(ОписаниеОбъектаУчета.Организация,
				ОписаниеОбъектаУчета.ОбъектУчета);			
			Если Не ЗначениеЗаполнено(Настройки) Тогда 
				УказанОсновнойВидДокумента = Ложь;
				НастройкиОбъектаУчета = НастройкиВнутреннегоЭДООбъектаУчета(ОписаниеОбъектаУчета.Организация, ОписаниеОбъектаУчета.ОбъектУчета);
				Если ЗначениеЗаполнено(НастройкиОбъектаУчета) Тогда
					Настройки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НастройкиОбъектаУчета[0]);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		НастройкиФормирования.НастройкиВнутреннегоЭДО = Настройки;
		ДоступныеКФормированиюНастройки = НастройкиВнутреннегоЭДООбъектаУчета(ОписаниеОбъектаУчета.Организация, ОписаниеОбъектаУчета.ОбъектУчета, Истина);
		ФормированиеЗапрещено = Не ЗначениеЗаполнено(ДоступныеКФормированиюНастройки);
		
		Успех = ЗначениеЗаполнено(Настройки) И Не ФормированиеЗапрещено И УказанОсновнойВидДокумента;

	ИначеЕсли ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Интеркампани Тогда
		ПараметрыПоиска.КлючНастроекИнтеркампани = Новый Структура("Организация");
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска.КлючНастроекИнтеркампани, ОписаниеОбъектаУчета);
		
		КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
		КлючНастроек.Отправитель = ОписаниеОбъектаУчета.Организация;
		КлючНастроек.Получатель = ОписаниеОбъектаУчета.Контрагент;
		КлючНастроек.Договор = ОписаниеОбъектаУчета.Договор;
		КлючНастроек.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ОписаниеОбъектаУчета.ТипДокумента);
		
		ПараметрыПоиска.КлючНастроекОтправки = КлючНастроек;
		Настройки = НастройкиЭДО.НастройкиОтправки(ПараметрыПоиска.КлючНастроекОтправки);
		
		Если Настройки = Неопределено Тогда
			Настройки = НастройкиЭДО.СоздатьНастройкиИнтеркампани(КлючНастроек);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Настройки) Тогда
			ФормированиеЗапрещено = Не Настройки.Формировать;
		КонецЕсли;
		
		НастройкиФормирования.НастройкиОтправки = Настройки;	
		Успех = ЗначениеЗаполнено(Настройки) И Не ФормированиеЗапрещено;	
	Иначе		
		ПараметрыПоиска.КлючНастроекОтправки = ЭлектронныеДокументыЭДО.КлючНастроекОтправкиОбъектаУчета(ОписаниеОбъектаУчета);
		Настройки = НастройкиЭДО.НастройкиОтправки(ПараметрыПоиска.КлючНастроекОтправки);
		НастройкиФормирования.НастройкиОтправки = Настройки;
		
		Если ЗначениеЗаполнено(Настройки) Тогда
			ФормированиеЗапрещено = Не Настройки.Формировать;
		КонецЕсли;
		
		Успех = ЗначениеЗаполнено(Настройки) И Не ФормированиеЗапрещено;
	КонецЕсли;
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("Успех", Успех);
	РезультатПоиска.Вставить("ФормированиеЗапрещено", ФормированиеЗапрещено);
	РезультатПоиска.Вставить("Настройки", НастройкиФормирования);
	РезультатПоиска.Вставить("ОписаниеОбъектаУчета", ОписаниеОбъектаУчета);
	РезультатПоиска.Вставить("ПараметрыПоиска", ПараметрыПоиска);
	РезультатПоиска.Вставить("НеУказанОсновнойВидДокумента", Не УказанОсновнойВидДокумента);
	
	Возврат РезультатПоиска;
	
КонецФункции

// Формирует данные электронного документа.
// 
// Параметры:
// 	ОписаниеОбъектаУчета - см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
// 	НастройкиФормирования - см. НастройкиЭДО.НастройкиФормирования
// 	ДополнительныеДанные - Произвольные - Дополнительные данные документа.
// Возвращаемое значение:
// 	Структура - Описание:
// 	* Успех - Булево - признак успешного формирования данных для просмотра.
// 	* АдресДанныхДокумента - Строка - адрес временного хранилища данных для просмотра.
// 	* АдресСведенийОбОшибках - Строка - адрес временного хранилища сведений о проблемах формирования документа.
Функция ПодготовитьДанныеПредварительногоПросмотра(ОписаниеОбъектаУчета, НастройкиФормирования, ДополнительныеДанные = Неопределено) Экспорт
	
	РезультатПодготовкиДанных = Новый Структура;
	РезультатПодготовкиДанных.Вставить("Ошибка", Ложь);
	РезультатПодготовкиДанных.Вставить("Основания", Новый Массив);
	РезультатПодготовкиДанных.Вставить("СвязующийОбъектУчета", Неопределено);
	РезультатПодготовкиДанных.Вставить("СвязанныеОбъектыУчета", Новый Массив);
	РезультатПодготовкиДанных.Вставить("АдресОписанияСообщения", "");
	РезультатПодготовкиДанных.Вставить("АдресСведенийОбОшибках", "");
	
	ОбъектУчета = ОписаниеОбъектаУчета.ОбъектУчета;
	
	Если ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
		ОписаниеСообщения = ЭлектронныеДокументыЭДО.ОписаниеСообщенияВнутреннегоЭДО(ОбъектУчета,
			НастройкиФормирования.НастройкиВнутреннегоЭДО);
		РезультатПодготовкиДанных.Основания.Добавить(ОбъектУчета);
	ИначеЕсли ОписаниеОбъектаУчета.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		ОписаниеСообщения = ЭлектронныеДокументыЭДО.ОписаниеСообщенияОтправителяПрикладногоДокумента(ОбъектУчета,
			НастройкиФормирования.НастройкиОтправки, ОписаниеОбъектаУчета.ПрикладнойТипДокумента);
		РезультатПодготовкиДанных.Основания.Добавить(ОбъектУчета);
	Иначе
		ПараметрыФормирования = ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчет();
		ЗаполнитьЗначенияСвойств(ПараметрыФормирования, НастройкиФормирования.НастройкиОтправки);
		ПараметрыФормирования.ТипДокумента = ОписаниеОбъектаУчета.ТипДокумента;
		ОписаниеДанных = ИнтеграцияЭДО.ОписаниеДанныхОбъектаУчета(ОбъектУчета,
			ПараметрыФормирования, ДополнительныеДанные);
		
		ОписаниеСообщения = ЭлектронныеДокументыЭДО.ОписаниеСообщенияОтправителя(ОбъектУчета,
			ОписаниеДанных.Данные, НастройкиФормирования.НастройкиОтправки, ДополнительныеДанные);
		
		РезультатПодготовкиДанных.Основания = ОписаниеДанных.Основания;
		РезультатПодготовкиДанных.СвязующийОбъектУчета = ОписаниеДанных.СвязующийОбъектУчета;
		РезультатПодготовкиДанных.СвязанныеОбъектыУчета = ОписаниеДанных.СвязанныеОбъектыУчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеСообщения.Данные.Ошибки.ЗаполнениеДанных)
		Или ЗначениеЗаполнено(ОписаниеСообщения.Данные.Ошибки.ЗначенияДополнительныхПолей) Тогда
		
		РезультатПодготовкиДанных.Вставить("Ошибка", Истина);
		
		ОписанияОшибок = Новый Массив;
				
		ОписаниеОшибки = Новый Структура;
		ОписаниеОшибки.Вставить("ОписаниеОбъектаУчета", ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектУчета));
		ОписаниеОшибки.Вставить("ОшибкиДанных", ОписаниеСообщения.Данные.Ошибки);
		
		ОписанияОшибок.Добавить(ОписаниеОшибки);
		
		АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОписанияОшибок, Новый УникальныйИдентификатор);
		
		РезультатПодготовкиДанных.Вставить("АдресСведенийОбОшибках", АдресСведенийОбОшибках);
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	РезультатПодготовкиДанных.АдресОписанияСообщения = ПоместитьВоВременноеХранилище(ОписаниеСообщения,
		Новый УникальныйИдентификатор);
	
	Возврат РезультатПодготовкиДанных;
	
КонецФункции

Процедура ПодготовитьНовыеРеквизитыФормыПоСхемеРегламента(Форма, ЭлементСхемыРодитель, НовыеРеквизитыФормы)
	
	КоллекцияЭлементовСхемы = ЭлементСхемыРодитель.ПолучитьЭлементы();
	Если КоллекцияЭлементовСхемы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСхемы Из КоллекцияЭлементовСхемы Цикл
		
		ПодготовитьНовыеРеквизитыФормыПоСхемеРегламента(Форма, ЭлементСхемы, НовыеРеквизитыФормы);
		
		Если Не ЗначениеЗаполнено(ЭлементСхемы.Сообщение) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = "ТабличныйДокумент" + СтрЗаменить(Строка(ЭлементСхемы.Сообщение.УникальныйИдентификатор()), "-", "");
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита) Тогда
			ЭлементСхемы.ИмяРеквизита = ИмяРеквизита;
			Продолжить;
		КонецЕсли;
		
		ЭлементСхемы.ИмяРеквизита = ИмяРеквизита;
		РеквизитФормы = Новый РеквизитФормы(ЭлементСхемы.ИмяРеквизита, Новый ОписаниеТипов("ТабличныйДокумент"));
		НовыеРеквизитыФормы.Добавить(РеквизитФормы);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СхемаРегламента

Функция СформироватьДанныеЭлементовСхемы(ДанныеЭлементов)
	
	ДанныеЭлементовСхемы = НовыеДанныеЭлементовСхемы();
	
	Для Каждого ДанныеЭлемента Из ДанныеЭлементов Цикл
		НовыеДанныеЭлемента = ДанныеЭлементовСхемы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыеДанныеЭлемента, ДанныеЭлемента);
		НовыеДанныеЭлемента.Доступность = Истина;
		Если НовыеДанныеЭлемента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			НовыеДанныеЭлемента.Наименование = ПредставлениеИнформацииОтправителя(
				ДанныеЭлемента.НомерДокумента, ДанныеЭлемента.ДатаДокумента);
		Иначе
			НовыеДанныеЭлемента.Наименование = НаименованиеЭлементаСхемыРегламента(
				НовыеДанныеЭлемента.ТипЭлементаРегламента);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеЭлементовСхемы;
	
КонецФункции

Функция СхемаРегламентаЭлектронногоДокумента(ЭлектронныйДокумент)
	
	НастройкиСхемыРегламента = РегламентыЭДО.НовыеНастройкиСхемыРегламента();
	ЗаполнитьЗначенияСвойств(НастройкиСхемыРегламента, ЭлектронныйДокумент);

	ДанныеЭлементовСхемыРегламента = ЭлектронныеДокументыЭДО.ДанныеЭлементовСхемыРегламента(ЭлектронныйДокумент);
	
	ДанныеЭлементовСхемы = СформироватьДанныеЭлементовСхемы(ДанныеЭлементовСхемыРегламента);
	ДанныеЭлементовСхемы.Колонки.Добавить("ЭлектронныйДокумент");
	ДанныеЭлементовСхемы.ЗаполнитьЗначения(ЭлектронныйДокумент, "ЭлектронныйДокумент");

	СхемаРегламента = ЭлектронныеДокументыЭДО.НоваяСхемаРегламента(НастройкиСхемыРегламента, ДанныеЭлементовСхемы);
	ЗаполнитьПустыеДанныеЭлементовСхемыРегламента(СхемаРегламента, ДанныеЭлементовСхемы);
	
	Возврат СхемаРегламента;
	
КонецФункции

Процедура ЗаполнитьПустыеДанныеЭлементовСхемыРегламента(СхемаРегламента, ДанныеЭлементовСхемы)
	
	КоллекцияЭлементовСхемы = ЭлектронныеДокументыЭДО.ЭлементыСхемыРегламентаБезДанных(СхемаРегламента);
	
	Для Каждого ЭлементСхемы Из КоллекцияЭлементовСхемы Цикл
		НовыеДанныеЭлемента = ДанныеЭлементовСхемы.Добавить();
		НовыеДанныеЭлемента.ТипЭлементаРегламента = ЭлементСхемы.ТипЭлементаРегламента;
		НовыеДанныеЭлемента.Статус = Перечисления.СтатусыСообщенийЭДО.НеСформирован;
		НовыеДанныеЭлемента.Наименование = НаименованиеЭлементаСхемыРегламента(ЭлементСхемы.ТипЭлементаРегламента);
		ЭлементСхемы.Данные = НовыеДанныеЭлемента;
	КонецЦикла;
	
КонецПроцедуры

Функция НаименованиеЭлементаСхемыРегламента(ТипЭлементаРегламента);
	
	ТипСлужебногоДокумента = ЭлектронныеДокументыЭДО.ТипСлужебногоДокумента(ТипЭлементаРегламента);
	Если ЗначениеЗаполнено(ТипСлужебногоДокумента) Тогда
		Наименование = Строка(ТипСлужебногоДокумента);
	Иначе
		Наименование = Строка(ТипЭлементаРегламента);
	КонецЕсли;
		
	Возврат Наименование;
	
КонецФункции

Процедура ОбновитьЭлементыСхемыРегламента(Приемник, Источник)
	
	КоллекцияЭлементовИсточника = Источник.Строки;
	Если КоллекцияЭлементовИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияЭлементовПриемника = Приемник.ПолучитьЭлементы();
	КоличествоЭлементовПриемника = КоллекцияЭлементовПриемника.Количество();
	
	Индекс = 0;
	Для Каждого ЭлементИсточника Из КоллекцияЭлементовИсточника Цикл
		
		ДанныеЭлементаИсточника = ЭлементИсточника.Данные;
		
		Если ЭлементИсточника.Дополнительный
			И Не ЗначениеЗаполнено(ДанныеЭлементаИсточника.Сообщение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ДанныеЭлементаИсточника.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя И
			Не ЗначениеЗаполнено(ДанныеЭлементаИсточника.Сообщение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Индекс < КоличествоЭлементовПриемника Тогда
			ЭлементПриемника = КоллекцияЭлементовПриемника[Индекс];
		Иначе
			ЭлементПриемника = КоллекцияЭлементовПриемника.Добавить();
		КонецЕсли;
		
		Если ЭлементПриемника.Сообщение <> ДанныеЭлементаИсточника.Сообщение
			ИЛИ ЭлементПриемника.Статус <> ДанныеЭлементаИсточника.Статус Тогда
			ЗаполнитьЗначенияСвойств(ЭлементПриемника, ДанныеЭлементаИсточника);
			ЭлементПриемника.ПредставлениеСформировано = Ложь;
			ЭлементПриемника.РаспознаниеВыполнено = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементПриемника.Сообщение)
			ИЛИ ЭлементПриемника.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ОбновитьЭлементыСхемыРегламента(ЭлементПриемника, ЭлементИсточника);
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПредупрежденияКомпонентов

Процедура СоздатьЭлементыОтображенияПредупрежденияПрекращенияПрямогоОбмена(Форма, ГруппаПредупреждений, ИмяГруппы)	
	
	Если Форма.Элементы.Найти(ИмяГруппы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаПредупреждений);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.ОтображатьЗаголовок = Ложь;
	Группа.ЦветФона = Новый Цвет(255, 240, 240);
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.Объединенная = Истина;
	Группа.РастягиватьПоГоризонтали = Истина;
	Группа.Видимость = Истина;
	
	НовыйЭлемент = Форма.Элементы.Добавить("НадписьПрекращениеПоддержкиПрямогоОбмена", Тип("ДекорацияФормы"), Группа);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	НовыйЭлемент.АвтоМаксимальнаяВысота = Истина;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='Прекращена поддержка прямого обмена с контрагентом (через каталог, Email, FTP). 
	|Для продолжения обмена с контрагентами необходимо использовать один из следующих вариантов:
	|• Обмен через <a href = ""ПерейтиНаСайтЭДО"">оператора ЭДО</a>.
	|• Обмен через сервис <a href = ""ПерейтиНаСайтБизнесСеть"">1С:Бизнес-сеть</a>'"));
	
	НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки","Подключаемый_ОбработкаНавигационнойСсылки");	
	
КонецПроцедуры

Процедура СоздатьЭлементыОтображенияПредупрежденияОбменаСКонтрагентом(Форма, ГруппаПредупреждений, ИмяГруппы)	
	
	Если Форма.Элементы.Найти(ИмяГруппы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаПредупреждений);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.ОтображатьЗаголовок = Ложь;
	Группа.ЦветФона = Новый Цвет(255, 240, 240);
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.Объединенная = Истина;
	Группа.РастягиватьПоГоризонтали = Истина;

	Группа.Видимость = Истина;
	
	НовыйЭлемент = Форма.Элементы.Добавить("НадписьПредупрежденияОбменаСКонтрагентом", Тип("ДекорацияФормы"), Группа);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	НовыйЭлемент.АвтоМаксимальнаяВысота = Истина;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='По данному документу есть предупреждения. Нажмите <a href = ""ПоказатьПредупреждения"">посмотреть</a> чтобы ознакомиться с ними.'"));

	НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");	
	
КонецПроцедуры

Процедура СоздатьЭлементыОтображенияПредупрежденияОНеактуальномЭлектронномДокументе(Форма, ГруппаПредупреждений, ИмяГруппы)	
	
	Если Форма.Элементы.Найти(ИмяГруппы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаПредупреждений);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.ОтображатьЗаголовок = Ложь;
	Группа.ЦветФона = Новый Цвет(255, 250, 217);
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.Объединенная = Истина;
	Группа.РастягиватьПоГоризонтали = Истина;

	Группа.Видимость = Истина;
	
	НовыйЭлемент = Форма.Элементы.Добавить("НадписьПредупрежденияОНеактуальномЭлектронномДокументе", Тип("ДекорацияФормы"), Группа);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	НовыйЭлемент.АвтоМаксимальнаяВысота = Истина;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='Электронный документ не является актуальным для указанных объектов учета. <a href = ""СделатьАктуальнымЭлектронныйДокумент"">Сделать актуальным</a>.'"));

	НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");	
	
КонецПроцедуры

#КонецОбласти

#Область Переформирование

Функция ПараметрыПереформированияДокумента(Сообщение) Экспорт
	
	ПараметрыДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыДействийПоЭДО.ОбъектыДействий.Сообщения.Добавить(Сообщение);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Отказ", Ложь);
	Параметры.Вставить("ПричинаОтказа", "");
	Параметры.Вставить("ТребуетсяФормированиеДокумента", Ложь);
	Параметры.Вставить("ТекстВопроса", "");
	Параметры.Вставить("ПараметрыДействийПоЭДО", ПараметрыДействийПоЭДО);
	
	СвойстваДокумента = ЭлектронныеДокументыЭДО.СвойстваСообщения(Сообщение,
		"Ссылка, ВидСообщения, ЭлектронныйДокумент, Направление, ТипЭлементаРегламента, Статус");
		
	Параметры.Вставить("ТипЭлементаРегламента", СвойстваДокумента.ТипЭлементаРегламента);
	Параметры.Вставить("ВидСообщения", СвойстваДокумента.ВидСообщения);
	Параметры.Вставить("ЭлектронныйДокумент", СвойстваДокумента.ЭлектронныйДокумент);
	
	Если СвойстваДокумента.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
		Параметры.Отказ = Истина;
		Параметры.ПричинаОтказа = НСтр("ru = 'Входящий документ не может быть переформирован'");	
	ИначеЕсли СвойстваДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
		ЗаполнитьПараметрыПереформированияОсновногоДокумента(Параметры, СвойстваДокумента);
	Иначе
		ЗаполнитьПараметрыПереформированияСлужебногоДокумента(Параметры, СвойстваДокумента);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗаполнитьПараметрыПереформированияОсновногоДокумента(Параметры, СвойстваДокумента)
	
	Если Не ЭлектронныеДокументыЭДО.СообщениеОтправлено(СвойстваДокумента.Статус) Тогда
		
		ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
			Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
		
		Параметры.ТребуетсяФормированиеДокумента = Истина;
		
		Подписи = ЭлектронныеДокументыЭДО.УстановленныеПодписи(СвойстваДокумента.Ссылка);
		
		Если ЗначениеЗаполнено(Подписи) Тогда
			Параметры.ТекстВопроса = НСтр("ru = 'После переформирования документ нужно будет заново подписать. Продолжить?'");
		Иначе
			Параметры.ТекстВопроса = НСтр("ru = 'Документ будет переформирован. Продолжить?'");
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	СостояниеЭДО = ЭлектронныеДокументыЭДО.СостояниеДокумента(СвойстваДокумента.ЭлектронныйДокумент);
	
	Если СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		Параметры.ТекстВопроса = НСтр("ru = 'Документ будет переформирован. Продолжить?'");
		
		ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
			Перечисления.ДействияПоЭДО.СформироватьИсправление);
		Возврат;
	КонецЕсли;
	
	Если СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
		
		Параметры.ТекстВопроса = НСтр("ru = 'Документ будет переформирован. Продолжить?'");
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		
		Параметры.ТекстВопроса = НСтр("ru = 'Текущая версия документа будет аннулирована. Продолжить?'");
		ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
			Перечисления.ДействияПоЭДО.ПринятьАннулирование);
		
	ИначеЕсли ЭлектронныеДокументыЭДО.ЕстьОтклонениеАннулирования(СвойстваДокумента.ЭлектронныйДокумент) Тогда
		
		Параметры.ТекстВопроса = НСтр("ru = 'Запрос аннулирования текущей версии был ЗакрытСОтклонением контрагентом.
			|В случае формирования новой версии легитимность документа может быть не подтверждена. Продолжить?'");
		ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
			Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
		
	Иначе
		
		Параметры.ТекстВопроса = НСтр("ru = 'Документ уже отправлен контрагенту. 
			|Контрагенту будет предложено аннулировать текущую версию. Продолжить?'");
		ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
			Перечисления.ДействияПоЭДО.Аннулировать);
				
		ДополнительныеПараметрыДействия = ЭлектронныеДокументыЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия();
		ДополнительныеПараметрыДействия.Комментарий = НСтр("ru = 'Переформирование документа'");	
			
		Параметры.ПараметрыДействийПоЭДО.ДополнительныеПараметрыДействий.Вставить(
			Перечисления.ДействияПоЭДО.Аннулировать, ДополнительныеПараметрыДействия);
	
	КонецЕсли;
	
	Параметры.ТребуетсяФормированиеДокумента = Истина;
		
КонецПроцедуры

Процедура ЗаполнитьПараметрыПереформированияСлужебногоДокумента(Параметры, СвойстваДокумента)
	
	Если ЭлектронныеДокументыЭДО.СообщениеОтправлено(СвойстваДокумента.Статус) Тогда
		Параметры.Отказ = Истина;
		Параметры.ПричинаОтказа = НСтр("ru = 'Переформирование служебного документа доступно до момента отправки'");
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
		Перечисления.ДействияПоЭДО.Переформировать);
	
	Подписи = ЭлектронныеДокументыЭДО.УстановленныеПодписи(СвойстваДокумента.Ссылка);
	
	Если ЗначениеЗаполнено(Подписи) Тогда
		Параметры.ТекстВопроса = НСтр("ru = 'После переформирования документ нужно будет заново подписать. Продолжить?'");
	Иначе
		Параметры.ТекстВопроса = НСтр("ru = 'Документ будет переформирован. Продолжить?'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереопределениеМеханизмаПечатиБСП

Процедура ДополнитьЭлементамиВнешнегоЭДО(Форма, Отказ, СтандартнаяОбработка)
	
	ИдентификаторПечатнойФормы = Форма.НастройкиПечатныхФорм[0].ИмяМакета;
	Если ИнтеграцияЭДО.ПечатнаяФормаЗапрещенаДляФормированияДокумента(ИдентификаторПечатнойФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьНаПодписьКоманда = Форма.Команды.Добавить("ЭДОСформироватьПроизвольныйДокумент");
	ОтправитьНаПодписьКоманда.Заголовок = НСтр("ru = 'ЭДО'");
	ОтправитьНаПодписьКоманда.Действие  = "Подключаемый_ВыполнитьКоманду";	
	
	ОтправитьЧерезЭДОКнопкаФормы = Форма.Элементы.Добавить(
	"СформироватьПроизвольныйДокументКнопкаФормы", 
	Тип("КнопкаФормы"),
	Форма.Элементы.ГруппаСохранитьОтправить);
	
	ОтправитьЧерезЭДОКнопкаФормы.ИмяКоманды = "ЭДОСформироватьПроизвольныйДокумент";
	ОтправитьЧерезЭДОКнопкаФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка; 
	ОтправитьЧерезЭДОКнопкаФормы.Картинка = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
	ОтправитьЧерезЭДОКнопкаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
	ОтправитьЧерезЭДОКнопкаФормы.Видимость = Истина;

КонецПроцедуры

Процедура ДополнитьЭлементамиВнутреннегоЭДО(Форма, Отказ, СтандартнаяОбработка)
	
	ГруппаЭлементовВнутреннегоЭДО = Форма.Элементы.Вставить(
		"ГруппаЭлементовВнутреннегоЭДО", 
		Тип("ГруппаФормы"), Форма.Элементы.ГруппаКоманднаяПанель, 
		Форма.Элементы.КоманднаяПанельЛеваяЧасть);
		
	ГруппаЭлементовВнутреннегоЭДО.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЭлементовВнутреннегоЭДО.РастягиватьПоВертикали = Ложь;
	ГруппаЭлементовВнутреннегоЭДО.РастягиватьПоГоризонтали = Ложь;
	ГруппаЭлементовВнутреннегоЭДО.ОтображатьЗаголовок = Ложь;
	ГруппаЭлементовВнутреннегоЭДО.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	ЭмблемаСервиса1СЭДОКартинкаПодписание = Форма.Элементы.Добавить(
	"ЭмблемаСервиса1СЭДОПодписаниеКартинка", 
	Тип("ДекорацияФормы"),
	ГруппаЭлементовВнутреннегоЭДО);
	
	ЭмблемаСервиса1СЭДОКартинкаПодписание.Вид = ВидДекорацииФормы.Картинка;
	ЭмблемаСервиса1СЭДОКартинкаПодписание.Картинка = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
	ЭмблемаСервиса1СЭДОКартинкаПодписание.Видимость = Ложь;
	
	ПредставлениеПрогрессаПодписанияДекорация = Форма.Элементы.Добавить(
	"ПредставлениеПрогрессаПодписанияДекорация", 
	Тип("ДекорацияФормы"), ГруппаЭлементовВнутреннегоЭДО);
	
	ПредставлениеПрогрессаПодписанияДекорация.Вид = ВидДекорацииФормы.Надпись;
	ПредставлениеПрогрессаПодписанияДекорация.РастягиватьПоГоризонтали = Истина;
	ПредставлениеПрогрессаПодписанияДекорация.АвтоМаксимальнаяШирина = Ложь;
	ПредставлениеПрогрессаПодписанияДекорация.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");
	ПредставлениеПрогрессаПодписанияДекорация.Видимость = Ложь;
	
	ОтправитьНаПодписьКоманда = Форма.Команды.Добавить("ВнутреннийЭДООтправитьНаПодпись");
	ОтправитьНаПодписьКоманда.Заголовок = НСтр("ru = 'Отправить на подпись'");
	ОтправитьНаПодписьКоманда.Действие  = "Подключаемый_ВыполнитьКоманду";	
	
	ОтправитьНаПодписьКнопкаФормы = Форма.Элементы.Добавить(
	"ОтправитьНаПодписьКнопкаФормы", 
	Тип("КнопкаФормы"),
	ГруппаЭлементовВнутреннегоЭДО);
	
	ГруппаРекламыВнутреннегоЭДО = Форма.Элементы.Вставить(
		"ГруппаРекламыВнутреннегоЭДО", 
		Тип("ГруппаФормы"), Форма.Элементы.ГруппаКоманднаяПанель, 
		Форма.Элементы.КоманднаяПанельЛеваяЧасть);
		
	Форма.Элементы.ДополнительнаяИнформация.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");

	ОтправитьНаПодписьКнопкаФормы.ИмяКоманды = "ВнутреннийЭДООтправитьНаПодпись";
	ОтправитьНаПодписьКнопкаФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка; 
	ОтправитьНаПодписьКнопкаФормы.Картинка = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
	ОтправитьНаПодписьКнопкаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
	ОтправитьНаПодписьКнопкаФормы.ЦветФона = ЦветаСтиля.ЦветВажного;
	ОтправитьНаПодписьКнопкаФормы.Видимость = Ложь;
	
	ИнтерфейсДокументовЭДОКлиентСервер.ОбновитьФормуПечатиДокументовБСП(Форма);

КонецПроцедуры

#КонецОбласти 

#Область СоставПакета

Функция ЦветФонаШапкиПакетаДокументов()
	Возврат Новый Цвет(230, 230, 230);
КонецФункции

#КонецОбласти 

#Область Настройки

Функция НастройкиОсновногоВидаВнутреннегоДокумента(Организация, ОбъектУчета) Экспорт
	
	Запросы = Новый Массив;
	
	ИдентификаторОбъектаУчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектУчета.Метаданные().ПолноеИмя());
	
	ОтборНастроекВнутреннегоЭДО = НастройкиЭДО.НовыйОтборНастроекВнутреннегоЭДО();
	ОтборНастроекВнутреннегоЭДО.Организация = "&Организация";
	ОтборНастроекВнутреннегоЭДО.ПроизвольноеУсловие = "ВидВнутреннегоДокумента.ИдентификаторОбъектаУчета = &ИдентификаторОбъектаУчета";
	Организация = Организация;		
	
	ЗапросНастроек = НастройкиЭДО.ЗапросНастроекВнутреннегоЭДО("НастройкиВнутреннегоЭДО", ОтборНастроекВнутреннегоЭДО);
	
	Запросы.Добавить(ЗапросНастроек);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
	|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидДокумента,
	|	НастройкиВнутреннегоЭДО.Формировать КАК Формировать,
	|	НастройкиВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
	|	НастройкиВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
	|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента
	|ИЗ
	|	НастройкиВнутреннегоЭДО
	| ГДЕ НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Организация", Организация);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторОбъектаУчета", ИдентификаторОбъектаУчета);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса.Выгрузить())[0];
	КонецЕсли;
	
КонецФункции

Функция НастройкиВнутреннегоЭДООбъектаУчета(Организация, ОбъектУчета, ТолькоРазрешенные = Ложь)
	
	Запросы = Новый Массив;
	
	ИдентификаторОбъектаУчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектУчета.Метаданные().ПолноеИмя());
	
	ОтборНастроекВнутреннегоЭДО = НастройкиЭДО.НовыйОтборНастроекВнутреннегоЭДО();
	ОтборНастроекВнутреннегоЭДО.Организация = "&Организация";
	ОтборНастроекВнутреннегоЭДО.ПроизвольноеУсловие = "ВидВнутреннегоДокумента.ИдентификаторОбъектаУчета = &ИдентификаторОбъектаУчета";	
	
	ЗапросНастроек = НастройкиЭДО.ЗапросНастроекВнутреннегоЭДО("НастройкиВнутреннегоЭДО", ОтборНастроекВнутреннегоЭДО);
	
	Запросы.Добавить(ЗапросНастроек);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
	|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидВнутреннегоДокумента,
	|	НастройкиВнутреннегоЭДО.Формировать КАК Формировать,
	|	НастройкиВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
	|	НастройкиВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
	|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента
	|ИЗ
	|	НастройкиВнутреннегоЭДО";
	
	Если ТолькоРазрешенные Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ НастройкиВнутреннегоЭДО.Формировать";
	КонецЕсли;
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Организация", Организация);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторОбъектаУчета", ИдентификаторОбъектаУчета);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Возврат РезультатЗапроса.Выгрузить()
	
КонецФункции

#КонецОбласти 

Функция ВыборкаРеквизитовНомерДатаОбъектовУчета(ОбъектыУчетаПоИдентификаторам)
	
	ИдентификаторыОбъектов = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из ОбъектыУчетаПоИдентификаторам Цикл
		ИдентификаторыОбъектов.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	КоллекцияМетаданныхОбъектов = ОбщегоНазначения.ОбъектыМетаданныхПоИдентификаторам(ИдентификаторыОбъектов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	
	ТекстыЗапросов = Новый Массив;
	Счетчик = 0;
	
	Для Каждого ЭлементКоллекции Из КоллекцияМетаданныхОбъектов Цикл
		
		МетаданныеОбъекта = ЭлементКоллекции.Значение;
		
		Если МетаданныеОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитНомер = """""";
		РеквизитДата = "&ПустаяДата";
		
		Для Каждого СтандартныйРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
			Если СтандартныйРеквизит.Имя = "Номер" Тогда
				РеквизитНомер = "Номер";
			ИначеЕсли СтандартныйРеквизит.Имя = "Дата" Тогда
				РеквизитДата = "Дата";
			КонецЕсли;
		КонецЦикла;
		
		Если ПустаяСтрока(РеквизитНомер) И ПустаяСтрока(РеквизитДата) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(СтрШаблон("ВЫБРАТЬ Ссылка, %2 КАК Номер,%3 КАК Дата ИЗ %4 ГДЕ Ссылка В (&Ссылки%1)",
			Счетчик, РеквизитНомер, РеквизитДата, МетаданныеОбъекта.ПолноеИмя()));
		
		Запрос.УстановитьПараметр("Ссылки" + Счетчик, ОбъектыУчетаПоИдентификаторам[ЭлементКоллекции.Ключ]);
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ТексОбъединитьВсе ="
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ТексОбъединитьВсе);
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Функция ДобавитьОписаниеРаздела(ОписаниеРазделов, Знач Имя, Знач Представление = "", Знач Видимость = Истина, Знач РассчитыватьКоличество = Истина) 
	
	НовыйРаздел = ОписаниеРазделов.Добавить();
	НовыйРаздел.Имя = Имя;
	НовыйРаздел.Представление = Представление;
	НовыйРаздел.Видимость = Видимость;
	НовыйРаздел.РассчитыватьКоличество = РассчитыватьКоличество;
	НовыйРаздел.КоличествоРассчитано = Ложь;
	
	Возврат НовыйРаздел;
	
КонецФункции

Функция КомандаПечатиОбъектаМетаданных(ОбъектМетаданных, Идентификатор)
	
	КомандыПечати = ИнтеграцияЭДО.КомандыПечатиДляВнутреннегоЭДО(ОбъектМетаданных); 
	Команда = КомандыПечати.Найти(Идентификатор, "Идентификатор");
	
	Если ЗначениеЗаполнено(Команда) Тогда
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Команда);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ДобавитьПечатнуюФорму(ПечатныеФормы, Знач ИмяМакета, Знач СинонимМакета, Знач ТабличныйДокумент,
	Знач Ссылка = Неопределено)
	
	Если ТабличныйДокумент = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПечатнаяФорма = Новый Структура;
	ПечатнаяФорма.Вставить("ИмяМакета", ИмяМакета);
	ПечатнаяФорма.Вставить("СинонимМакета", СинонимМакета);
	ПечатнаяФорма.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	ПечатнаяФорма.Вставить("Ссылка", Ссылка);
	
	ПечатныеФормы.Добавить(ПечатнаяФорма);
	
	Возврат Истина;
	
КонецФункции

Функция МассивДействийНаЭтапе(ДействияНаЭтапе)
	
	МассивДействийНаЭтапе = Новый Массив;
	Для Каждого ДействиеНаЭтапе Из ДействияНаЭтапе Цикл
		МассивДействийНаЭтапе.Добавить(ДействиеНаЭтапе.Ключ);	
	КонецЦикла;
	
	Возврат МассивДействийНаЭтапе;
	
КонецФункции

#КонецОбласти