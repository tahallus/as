#Область ПрограммныйИнтерфейс

// Сканирует штрихкод.
//
Процедура ОтсканироватьШтрихкод(ОбработчикСканирования, Форма) Экспорт
	
	Штрихкод = "";
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ОтсканироватьШтрихкодЗавершение", ЭтотОбъект, Новый Структура("Форма, Штрихкод", Форма, Штрихкод)), Штрихкод, НСтр("en='Enter Barcode';ru='Введите штрихкод'"), 200);
	
КонецПроцедуры

Процедура ОтсканироватьШтрихкодЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Штрихкод = ?(Строка = Неопределено, ДополнительныеПараметры.Штрихкод, Строка);
	
	
	Если (Строка <> Неопределено) Тогда
		Форма.ПолученШтрихкод(Штрихкод);
	КонецЕсли;

КонецПроцедуры

// Отправляет письмо.
//
Процедура ПослатьПисьмо(
	Получатель = "",
	Тема = "",
	ТекстСообщения = "",
	АдресВложения = Неопределено,
	НаименованиеВложения = Неопределено) Экспорт
	
	#Если МобильноеПриложениеКлиент Тогда
		Если НЕ СредстваПочты.ПоддерживаетсяОтправка() Тогда
			// АПК:565-выкл методы безопасного запуска обеспечиваются этой функцией
			Предупреждение("На этом устройстве отправка почты не поддерживается.",,ОбщегоНазначенияМПВызовСервераПовтИсп.ПолучитьСинонимКонфигурации());
			// АПК:565-вкл
			Возврат;	
		КонецЕсли;
	#КонецЕсли
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Получатели.Добавить(Получатель);
	Письмо.Тема = Тема;
	Письмо.Тексты.Добавить(ТекстСообщения);
	Если АдресВложения <> Неопределено Тогда
		Письмо.Вложения.Добавить(АдресВложения, НаименованиеВложения);
	КонецЕсли;
	#Если МобильноеПриложениеКлиент Тогда
		СредстваПочты.Послать(Письмо);
	#Иначе
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект), АдресВложения);
	#КонецЕсли
	
КонецПроцедуры


// Отправляет сообщение по электронной почте.
//
Процедура ОтправитьПоПочте(Письмо) Экспорт
	
	ТемаПисьма = Письмо.ТемаПисьма;
	ТемаПисьма = ОбщегоНазначенияМПВызовСервера.Кодировать(ТемаПисьма);
	ТелоПисьма = Письмо.ТелоПисьма;
	ТелоПисьма = ОбщегоНазначенияМПВызовСервера.Кодировать(ТелоПисьма);
	СтрокаКоманды = "mailto:";
	СтрокаКоманды = СтрокаКоманды + Письмо.Получатель + "?";
	СтрокаКоманды = СтрокаКоманды + "subject=" + ТемаПисьма + "&";
	СтрокаКоманды = СтрокаКоманды + "body=" + ТелоПисьма;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект), СтрокаКоманды);
	
КонецПроцедуры

// Отправляет сообщение по СМС.
//
Процедура ОтправитьПоСМС(Письмо) Экспорт
	
	СтрокаКоманды = "sms:";
	СтрокаКоманды = СтрокаКоманды + СокрЛП(Письмо.Получатель);
	СтрокаКоманды = СтрокаКоманды + "?body=" + ОбщегоНазначенияМПВызовСервера.Кодировать(Письмо.ТелоПисьма);
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект), СтрокаКоманды);
	
КонецПроцедуры

// Формирует текст периода отчета.
//
Процедура СформироватьТекстПериодОтчета(Форма) Экспорт
	
	Форма.Элементы.ОчиститьПериод.Видимость = Истина;
	Если ЗначениеЗаполнено(Форма.НачалоПериода)
		И ЗначениеЗаполнено(Форма.КонецПериода) Тогда
		Форма.ПериодОтчета = "с " + Строка(Формат(Форма.НачалоПериода, "ДФ=dd.MM.yy")) + " - по " + Строка(Формат(Форма.КонецПериода, "ДФ=dd.MM.yy"));
	ИначеЕсли ЗначениеЗаполнено(Форма.НачалоПериода) Тогда
		Форма.ПериодОтчета = "с " + Строка(Формат(Форма.НачалоПериода, "ДФ=dd.MM.yy"));
	ИначеЕсли ЗначениеЗаполнено(Форма.КонецПериода) Тогда
		Форма.ПериодОтчета = "по " + Строка(Формат(Форма.КонецПериода, "ДФ=dd.MM.yy"));
	Иначе
		Форма.ПериодОтчета = НСтр("ru='<за все время>';en='<all time>'");
		Форма.Элементы.ОчиститьПериод.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Отправляет отчет в CSV.
//
Процедура ОтправитьОтчетВCSV(ТемаПисьма, ТабДокумент) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ТемаПисьма, ТабДокумент", ТемаПисьма, ТабДокумент);
	НачатьСозданиеКаталога(Новый ОписаниеОповещения("ОтправитьОтчетВCSVЗавершение", ЭтотОбъект, ДополнительныеПараметры), КаталогДокументов() + "TempSBM");
	
КонецПроцедуры

Процедура ОтправитьОтчетВCSVЗавершение(ИмяКаталога, ДополнительныеПараметры) Экспорт
	
	ТемаПисьма = ДополнительныеПараметры.ТемаПисьма;
	ТабДокумент = ДополнительныеПараметры.ТабДокумент;
	
	АдресФайла = КаталогДокументов() + "TempSBM/" + "report.csv";
	
	ТекстОтчетаCSV = СконвертироватьВCSV(ТабДокумент, ПолучитьРазделительCSV());
	ЗаписьТекста = Новый ЗаписьТекста(АдресФайла, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстОтчетаCSV);
	ЗаписьТекста.Закрыть();
	
	#Если МобильноеПриложениеКлиент Тогда
		ТекстПисьма = "Во вложении - "
		+ ТемаПисьма
		+ Символы.ПС
		+ Символы.ПС 
		+ НСтр("ru='---
		|Сформировано в мобильном приложении 1С:Управление нашей фирмой';en='---
		|Created in a mobile application 1C:Small Business Mobile'");
		Если ОбщегоНазначенияМПВызовСервера.ВерсияОС() = "iOS" Тогда
			ПослатьПисьмо(, ТемаПисьма, ТекстПисьма, АдресФайла, ТемаПисьма);
		Иначе
			ОтправитьВложениеАндроид(, ТемаПисьма, ТекстПисьма, АдресФайла);
		КонецЕсли;
	#Иначе
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект), АдресФайла);
	#КонецЕсли


КонецПроцедуры

// Конвертирует табличный документ в CSV.
//
Функция СконвертироватьВCSV(ТабДокумент, Разделитель) Экспорт
	
	СтрокаCSV = "";
	Для R = 1 По ТабДокумент.ВысотаТаблицы Цикл
		Для C = 1 По ТабДокумент.ШиринаТаблицы Цикл
			Область = ТабДокумент.Область("R" + R + "C" + C);
			СтрокаCSV = СтрокаCSV + СтрЗаменить(Область.Текст, Разделитель, ".") + Разделитель;
		КонецЦикла;
		СтрокаCSV = СтрокаCSV + Символы.ПС;
	КонецЦикла;
	
	Возврат СтрокаCSV;
	
КонецФункции

// Добавляет фото
//
// Параметры:
//  ОповещениеОДобавлении - ОписаниеОповещения
//
Процедура ДобавитьФото(ОповещениеОДобавлении) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	#Если Не МобильноеПриложениеКлиент Тогда
		НачатьПомещениеФайла(ОповещениеОДобавлении);
	#КонецЕсли
	
КонецПроцедуры

// Помещает файл в хранилище
//
// Параметры:
//  ПутьКФайлу - путь к файлу
//  Параметры - дополнительные параметры
//
Процедура ПоместитьФайлВХранилище(Знач ПутьКФайлу, Параметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ФайлПомещенВХранилище", Ложь);
	
	Файл = Новый Файл(ПутьКФайлу);
	
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПутьКФайлу));
	ПомещенныеФайлы = Новый Массив;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПомещенныеФайлы", ПомещенныеФайлы);
	ДополнительныеПараметры.Вставить("ПутьКФайлу", ПутьКФайлу);
	ДополнительныеПараметры.Вставить("Результат", Результат);
	ДополнительныеПараметры.Вставить("Файл", ПомещенныеФайлы);
	ДополнительныеПараметры.Вставить("ПомещенныеФайлы", Файл);
	ДополнительныеПараметры.Вставить("ОповещениеОДобавлении", Параметры.ОповещениеОДобавлении);
	
	НачатьПомещениеФайлов(Новый ОписаниеОповещения("ПоместитьФайлВХранилищеЗавершение", ЭтотОбъект, ДополнительныеПараметры), ПомещаемыеФайлы);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Получает тип разделителя CSV/
//
Функция ПолучитьРазделительCSV()
	
	Разделитель = НСтр("ru=';';en=','");
	
	Если ОбщегоНазначенияМПВызовСервера.ПолучитьЗначениеКонстанты("ВариантРазделителяCSVМП") = ПредопределенноеЗначение("Перечисление.ВариантыРазделителейCSVМП.Запятая") Тогда
		Разделитель = ",";
	ИначеЕсли ОбщегоНазначенияМПВызовСервера.ПолучитьЗначениеКонстанты("ВариантРазделителяCSVМП") = ПредопределенноеЗначение("Перечисление.ВариантыРазделителейCSVМП.ТочкаСЗапятой") Тогда
		Разделитель = ";";
	КонецЕсли;
	
	Возврат Разделитель;
	
КонецФункции

Процедура ПослеЗапускаПриложения(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Возврат; // Процедура заглушка, т.к. НачатьЗапускПриложения требуется наличие обработчика оповещения.
КонецПроцедуры

Процедура ПоместитьФайлВХранилищеЗавершение(ПомещенныеФайлы1, ДополнительныеПараметры) Экспорт
	
	ПомещенныеФайлы = ДополнительныеПараметры.ПомещенныеФайлы;
	ПутьКФайлу = ДополнительныеПараметры.ПутьКФайлу;
	Результат = ДополнительныеПараметры.Результат;
	Файл = ДополнительныеПараметры.Файл;
	
	Результат.Вставить("ФайлПомещенВХранилище", Истина);
	Результат.Вставить("АдресФайлаВоВременномХранилище", ПомещенныеФайлы1[0].Хранение);
	Результат.Вставить("Расширение",                     Прав(Файл.Расширение, СтрДлина(Файл.Расширение)-1));
	Результат.Вставить("Имя", Файл.Имя);
	Результат.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОДобавлении, Результат.АдресФайлаВоВременномХранилище);
	
КонецПроцедуры

#КонецОбласти

