
#Область ПрограммныйИнтерфейс
// Обновляет заголовки групп реквизитов справочников Номенклатура и Категории номенклатуры
//
Процедура ОбновитьЗаголовкиГрупп(ФормаОбъекта, НаименованиеГруппы = Неопределено) Экспорт
	
	Если НаименованиеГруппы = Неопределено Тогда
		
		ОбновитьЗаголовокУчетнаяИнформация(ФормаОбъекта);
		ОбновитьЗаголовокАлкогольнаяПродукция(ФормаОбъекта);
		ОбновитьЗаголовокЗакупкаИПроизводство(ФормаОбъекта);
		ОбновитьЗаголовокХранение(ФормаОбъекта);
		ОбновитьЗаголовокПрайсЛист(ФормаОбъекта);
		ОбновитьЗаголовокВетИС(ФормаОбъекта);
		ОбновитьЗаголовокТабак(ФормаОбъекта);
		ОбновитьЗаголовокОбувь(ФормаОбъекта);
		ОбновитьЗаголовокГИСМ(ФормаОбъекта);
		
	ИначеЕсли НаименованиеГруппы = "УчетнаяИнформация" Тогда
		ОбновитьЗаголовокУчетнаяИнформация(ФормаОбъекта);
	ИначеЕсли НаименованиеГруппы = "АлкогольнаяПродукция" Тогда
		ОбновитьЗаголовокАлкогольнаяПродукция(ФормаОбъекта);
	ИначеЕсли НаименованиеГруппы = "ЗакупкаИПроизводство" Тогда
		ОбновитьЗаголовокЗакупкаИПроизводство(ФормаОбъекта);
	ИначеЕсли НаименованиеГруппы = "Хранение" Тогда
		ОбновитьЗаголовокХранение(ФормаОбъекта);
	ИначеЕсли НаименованиеГруппы = "ПрайсЛист" Тогда
		ОбновитьЗаголовокПрайсЛист(ФормаОбъекта);
	ИначеЕсли НаименованиеГруппы = "ВетИС" Тогда
		ОбновитьЗаголовокВетИС(ФормаОбъекта);
	ИначеЕсли НаименованиеГруппы = "Табак" Тогда
		ОбновитьЗаголовокТабак(ФормаОбъекта);
	ИначеЕсли НаименованиеГруппы = "Обувь" Тогда
		ОбновитьЗаголовокОбувь(ФормаОбъекта);
	ИначеЕсли НаименованиеГруппы = "ГИСМ" Тогда
		ОбновитьЗаголовокГИСМ(ФормаОбъекта);
	КонецЕсли;
	
КонецПроцедуры

// Контролирует резерв в указанной строке табличной части
//
// Параметры:
//  СтрокаТабличнойЧасти - ДанныеФормыСтруктура - данные строки табличной части
//  ДействиеСтроки - Строка - возможные действия:
//    * "ПриИзмененииКоличестваПроверитьРезерв"
//    * "ПриИзмененииРезерваПроверитьКоличество"
//  Объект - ДанныеФормыСтруктура - данные документа, в котором выполняется контроль
//  ИмяТЧ - Строка - имя табличной части
//
Процедура КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти, ДействиеСтроки = "ПриИзмененииКоличестваПроверитьРезерв", Объект = Неопределено, ИмяТЧ = "Запасы") Экспорт
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ДействиеСтроки = "ПриИзмененииКоличестваПроверитьРезерв" Тогда
		
		Если Не СтрокаТабличнойЧасти.Свойство("Резерв") Тогда
			Возврат
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Резерв = ?(СтрокаТабличнойЧасти.Количество < СтрокаТабличнойЧасти.Резерв, СтрокаТабличнойЧасти.Количество, СтрокаТабличнойЧасти.Резерв);
	
	ИначеЕсли ДействиеСтроки = "ПриИзмененииРезерваПроверитьКоличество" Тогда
		
		Если Не СтрокаТабличнойЧасти.Свойство("Резерв") Или Объект = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.Резерв > СтрокаТабличнойЧасти.Количество Тогда
			
			ОчиститьСообщения();
			
			ТекстСообщения = НСтр("ru = 'В строке №%1 табл. части значение в колонке ""В резерв"" не может превышать значения в колонке ""Количество"".'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТабличнойЧасти.НомерСтроки);
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,,
			СтрШаблон("Объект.%1[%2].Количество", ИмяТЧ, Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧГ=")));
			
			СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.Количество;
			
		КонецЕсли;
		
	Иначе
		
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Передан недопустимый параметр ""ДействиеСтроки"" = ""%1"".'"), ДействиеСтроки);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Создает новый документ и заполняет его товарами из корзины
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из которой оформляется документ
//  ВидДокумента - Строка - вид заполняемого документа
//  ДанныеСписка - Массив - данные списка, заполненные в ПодготовитьДанныеСписка()
//
Процедура ОформитьДокументСТоварамиИзКорзины(Форма, ВидДокумента, ДанныеСписка = Неопределено, Владелец = Неопределено, УИД = Неопределено, ИзКорзины = Ложь) Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	Если ДанныеСписка = Неопределено Тогда
		СтрокиНоменклатуры = Форма.Корзина;
	Иначе
		СтрокиНоменклатуры = ДанныеСписка;
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ВидЦен",  Форма.ОтборВидЦен);
	
	Если Не Форма.ТипСтруктурнойЕдиницыВОтборе = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов")
		И ЗначениеЗаполнено(Форма.ОтборСклад) И Форма.ОтборОстатки = 1 Тогда
		
		Если ВидДокумента = "ЗаказПокупателя" Или ВидДокумента = "ЗаказНаряд" Тогда
			ПараметрыЗаполнения.Вставить("СтруктурнаяЕдиницаРезерв",  Форма.ОтборСклад);
		Иначе
			ПараметрыЗаполнения.Вставить("СтруктурнаяЕдиница",  Форма.ОтборСклад);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.НалогообложениеНДС) Тогда
		ПараметрыЗаполнения.Вставить("НалогообложениеНДС",  Форма.НалогообложениеНДС);
		ПараметрыЗаполнения.Вставить("ИспользуетсяНДС",  Форма.ИспользуетсяНДС);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ВалютаПодбора) Тогда
		ПараметрыЗаполнения.Вставить("Валюта",  Форма.ВалютаПодбора);
	КонецЕсли;
	
	ЗаполнитьДокумент(ПараметрыЗаполнения, ВидДокумента, СтрокиНоменклатуры, Владелец, УИД, ИзКорзины);
	
	Если Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаКорзина" Тогда
		Форма.ПеренестиВДокумент = Истина;
		Форма.Закрыть();
	ИначеЕсли ДанныеСписка = Неопределено Тогда
		Форма.Корзина.Очистить();
	КонецЕсли;
	
КонецПроцедуры

// Дополняет существующий документ товарами из корзины
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из которой оформляется документ
//  ВидДокумента - Строка - вид заполняемого документа
//  ДанныеСписка - Массив - данные списка, заполненные в ПодготовитьДанныеСписка()
//
Функция ПолучитьСтруктуруЗаполнения(Форма, ВидДокумента, ДанныеСписка = Неопределено) Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	Если ДанныеСписка = Неопределено Тогда
		СтрокиНоменклатуры = Форма.Корзина;
	Иначе
		СтрокиНоменклатуры = ДанныеСписка;
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ВидЦен",  Форма.ОтборВидЦен);
	Если ЗначениеЗаполнено(Форма.ОтборСклад) Тогда
		ПараметрыЗаполнения.Вставить("СтруктурнаяЕдиница",  Форма.ОтборСклад);
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.НалогообложениеНДС) Тогда
		ПараметрыЗаполнения.Вставить("НалогообложениеНДС",  Форма.НалогообложениеНДС);
		ПараметрыЗаполнения.Вставить("ИспользуетсяНДС",  Форма.ИспользуетсяНДС);
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.ВалютаПодбора) Тогда
		ПараметрыЗаполнения.Вставить("Валюта",  Форма.ВалютаПодбора);
	КонецЕсли;
	
	Возврат СтруктураЗаполненияДокумента(ПараметрыЗаполнения, ВидДокумента, СтрокиНоменклатуры);
	
КонецФункции

// Обработчик команд "СоздатьИзНоменклатуры" для обобщения вызовов быстрых кнопок Продать/Купить
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из которой вызывается команда
//  ВидДокумента - Строка - вид документа, который создается из карточки номенклатуры.
//
Процедура СоздатьИзНоменклатуры(Форма, ВидДокумента) Экспорт
	
	Если Форма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Форма) <> Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Модифицированность Тогда
		Форма.Записать();
	КонецЕсли; 
	
	Если Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда
		ПодготовитьДанныеЭлемента(
		Форма.Объект.Ссылка,
		ВидДокумента);
	ИначеЕсли Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаСписка" Тогда
		ИмяТаблицы = Форма.ТекущаяСтраницаНоменклатуры;
		ПодготовитьДанныеСписка(
		Форма,
		Форма.Элементы[ИмяТаблицы],
		ВидДокумента);
	ИначеЕсли Форма.ИмяФормы = "Обработка.ДокументыПоКритериюОтбора.Форма.СписокДокументов" Тогда
		ПодготовитьДанныеЭлемента(
		Форма.Номенклатура,
		ВидДокумента);
	Иначе
		ВызватьИсключение СтрШаблон(
		НСтр("ru = 'Не определено поведение при вызове из формы ""%1"".'"),
		Форма.ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Находит открытую форму по уникальному идентификатору
//
Функция ПолучитьОткрытуюФормуПоУИД(УИД) Экспорт
	ОткрытыеОкна = ПолучитьОкна();
	Для Каждого ОткрытаяФорма Из ОткрытыеОкна Цикл
		Если ОткрытаяФорма.Содержимое.Количество() И ОткрытаяФорма.Содержимое[0].УникальныйИдентификатор = УИД Тогда
			Возврат ОткрытаяФорма.Содержимое[0]
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьЗаголовокУчетнаяИнформация(ФормаОбъекта)
	
	Если Не ФормаОбъекта.Элементы.ГруппаУчетнаяИнформация.Видимость Тогда Возврат КонецЕсли;
	
	ТекстЗаголовка = "Учетная информация";
	ДополнениеЗаголовка = "";
	
	Если ТипЗнч(ФормаОбъекта.Объект.Ссылка) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
		ТипНоменклатуры = ФормаОбъекта.Объект.ТипНоменклатурыПоУмолчанию;
	Иначе
		ТипНоменклатуры = ФормаОбъекта.Объект.ТипНоменклатуры;
	КонецЕсли;
	
	ОтобразитьМетодОценки = Истина;
	
	Если Не ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
		И Не ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")
		Тогда
		ОтобразитьМетодОценки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФормаОбъекта.Объект.НаправлениеДеятельности) Тогда
		ДополнениеЗаголовка = ДополнениеЗаголовка + Строка(ФормаОбъекта.Объект.НаправлениеДеятельности);
	КонецЕсли;
	
	Если ОтобразитьМетодОценки И ЗначениеЗаполнено(ФормаОбъекта.Объект.МетодОценки) Тогда
		ДополнениеЗаголовка = ДополнениеЗаголовка + ?(ЗначениеЗаполнено(ДополнениеЗаголовка), ", ", "") +Строка(ФормаОбъекта.Объект.МетодОценки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФормаОбъекта.Объект.ВидСтавкиНДС) Тогда
		
		СтавкаНДС = ФормаОбъекта.Элементы.ВидСтавкиНДС.СписокВыбора.НайтиПоЗначению(ФормаОбъекта.Объект.ВидСтавкиНДС);
		
		ДополнениеЗаголовка = ДополнениеЗаголовка + ?(ЗначениеЗаполнено(ДополнениеЗаголовка), ", ", "") + Строка(СтавкаНДС);
	КонецЕсли;
	
	Если ФормаОбъекта.Объект.ПодакцизныйТовар Тогда
		ДополнениеЗаголовка = ДополнениеЗаголовка + ?(ЗначениеЗаполнено(ДополнениеЗаголовка), ", ", "") + НСтр("ru='Подакцизный товар'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнениеЗаголовка) Тогда
		ТекстЗаголовка = ТекстЗаголовка +" ("+ДополнениеЗаголовка+")";
	КонецЕсли;
	
	ФормаОбъекта.Элементы.ГруппаУчетнаяИнформация.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

Процедура ОбновитьЗаголовокАлкогольнаяПродукция(ФормаОбъекта)
	
	Если Не ФормаОбъекта.Элементы.ГруппаАлкогольнаяПродукция.Видимость Тогда Возврат КонецЕсли;
	
	ТекстЗаголовка = "Алкогольная продукция";
	ДополнениеЗаголовка = "";
	
	Если ЗначениеЗаполнено(ФормаОбъекта.Объект.ВидАлкогольнойПродукции) Тогда
		ДополнениеЗаголовка = ДополнениеЗаголовка + Строка(ФормаОбъекта.Объект.ВидАлкогольнойПродукции);
	КонецЕсли;
	
	Если ТипЗнч(ФормаОбъекта.Объект) = Тип("СправочникСсылка.Номенклатура") И ЗначениеЗаполнено(ФормаОбъекта.Объект.Производитель) Тогда
		ДополнениеЗаголовка = ДополнениеЗаголовка + ?(ЗначениеЗаполнено(ДополнениеЗаголовка), ", ", "") +Строка(ФормаОбъекта.Объект.Производитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнениеЗаголовка) Тогда
		ТекстЗаголовка = ТекстЗаголовка +" ("+ДополнениеЗаголовка+")";
	КонецЕсли;
	
	ФормаОбъекта.Элементы.ГруппаАлкогольнаяПродукция.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

Процедура ОбновитьЗаголовокЗакупкаИПроизводство(ФормаОбъекта)
	
	Если Не ФормаОбъекта.Элементы.ГруппаЗакупкаПроизводство.Видимость Тогда Возврат КонецЕсли;
	
	Если ФормаОбъекта.Объект.Свойство("ЭтоАгентскаяУслуга") И ФормаОбъекта.Объект.ЭтоАгентскаяУслуга Тогда
		ТекстЗаголовка = НСтр("ru='Поставщик услуги'");
	Иначе
		ТекстЗаголовка = НСтр("ru='Закупка и производство'");
		ДополнениеЗаголовка = "";
		
		Если ЗначениеЗаполнено(ФормаОбъекта.Объект.СпособПополнения) Тогда
			ДополнениеЗаголовка = ДополнениеЗаголовка + Строка(ФормаОбъекта.Объект.СпособПополнения);
		КонецЕсли;
		
		Если ТипЗнч(ФормаОбъекта.Объект.Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Если ЗначениеЗаполнено(ФормаОбъекта.Объект.Поставщик) Тогда
				ДополнениеЗаголовка = ДополнениеЗаголовка + ?(ЗначениеЗаполнено(ДополнениеЗаголовка), ", ", "") + Строка(ФормаОбъекта.Объект.Поставщик);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФормаОбъекта.Объект.Производитель) Тогда
			ДополнениеЗаголовка = ДополнениеЗаголовка + ?(ЗначениеЗаполнено(ДополнениеЗаголовка), ", ", "") + Строка(ФормаОбъекта.Объект.Производитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФормаОбъекта.Объект.СтранаПроисхождения) Тогда
			ДополнениеЗаголовка = ДополнениеЗаголовка + ?(ЗначениеЗаполнено(ДополнениеЗаголовка), ", ", "") + Строка(ФормаОбъекта.Объект.СтранаПроисхождения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДополнениеЗаголовка) Тогда
			ТекстЗаголовка = ТекстЗаголовка +" ("+ДополнениеЗаголовка+")";
		КонецЕсли;
	КонецЕсли;
	
	ФормаОбъекта.Элементы.ГруппаЗакупкаПроизводство.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

Процедура ОбновитьЗаголовокХранение(ФормаОбъекта)
	
	Если Не ФормаОбъекта.Элементы.ГруппаХранение.Видимость Тогда Возврат КонецЕсли;
	
	ТекстЗаголовка = "Хранение";
	ДополнениеЗаголовка = "";
	
	Если ЗначениеЗаполнено(ФормаОбъекта.Объект.Склад) Тогда
		ДополнениеЗаголовка = ДополнениеЗаголовка + Строка(ФормаОбъекта.Объект.Склад);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФормаОбъекта.Объект.Ячейка) Тогда
		ДополнениеЗаголовка = ДополнениеЗаголовка + ?(ЗначениеЗаполнено(ДополнениеЗаголовка), ", ", "") +Строка(ФормаОбъекта.Объект.Ячейка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнениеЗаголовка) Тогда
		ТекстЗаголовка = ТекстЗаголовка +" ("+ДополнениеЗаголовка+")";
	КонецЕсли;
	
	ФормаОбъекта.Элементы.ГруппаХранение.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

Процедура ОбновитьЗаголовокПрайсЛист(ФормаОбъекта)
	
	Если Не ФормаОбъекта.Элементы.ГруппаПрайсЛист.Видимость Тогда Возврат КонецЕсли;
	
	ТекстЗаголовка = "Прайс-лист";
	ДополнениеЗаголовка = "";
	
	Если ЗначениеЗаполнено(ФормаОбъекта.Объект.ЦеноваяГруппа) Тогда
		ДополнениеЗаголовка = ДополнениеЗаголовка + Строка(ФормаОбъекта.Объект.ЦеноваяГруппа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнениеЗаголовка) Тогда
		ТекстЗаголовка = ТекстЗаголовка +" ("+ДополнениеЗаголовка+")";
	КонецЕсли;
	
	ФормаОбъекта.Элементы.ГруппаПрайсЛист.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

Процедура ОбновитьЗаголовокВетИС(ФормаОбъекта)
	
	Если Не ФормаОбъекта.Элементы.ГруппаВЕТИС.Видимость Тогда Возврат КонецЕсли;
	
	ТекстЗаголовка = "Подконтрольная продукция (ВЕТИС)";
	ДополнениеЗаголовка = "";
	
	Если ФормаОбъекта.Объект.ПодконтрольнаяПродукцияВЕТИС Тогда
		ДополнениеЗаголовка = " (Это продукция ВЕТИС)";
	КонецЕсли;
	
	ТекстЗаголовка = ТекстЗаголовка + ДополнениеЗаголовка;
	
	ФормаОбъекта.Элементы.ГруппаВЕТИС.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

Процедура ОбновитьЗаголовокГИСМ(ФормаОбъекта)
	
	Если Не ФормаОбъекта.Элементы.ГруппаМаркировка.Видимость Тогда Возврат КонецЕсли;
	
	ТекстЗаголовка = "Маркировка (ГИСМ)";
	ДополнениеЗаголовка = "";
	
	Если ФормаОбъекта.Объект.ВидМаркировки = ПредопределенноеЗначение("Перечисление.ВидыМаркировки.НеМаркируется") Тогда
		ДополнениеЗаголовка = " (Не маркируется)";
	ИначеЕсли ФормаОбъекта.Объект.ВидМаркировки = ПредопределенноеЗначение("Перечисление.ВидыМаркировки.КонтрольныйИдентификационныйЗнак") Тогда
		ДополнениеЗаголовка = " (Контрольный (идентификационный) знак)";
	ИначеЕсли ФормаОбъекта.Объект.ВидМаркировки = ПредопределенноеЗначение("Перечисление.ВидыМаркировки.МаркируемаяПродукция") Тогда
		ДополнениеЗаголовка = " (Маркируемая продукция)";
	КонецЕсли;
	
	ТекстЗаголовка = ТекстЗаголовка + ДополнениеЗаголовка;
	
	ФормаОбъекта.Элементы.ГруппаМаркировка.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

Процедура ОбновитьЗаголовокТабак(ФормаОбъекта)
	
	Если Не ФормаОбъекта.Элементы.ГруппаТабачнаяПродукция.Видимость Тогда Возврат КонецЕсли;
	
	ТекстЗаголовка = "Табачная продукция";
	ДополнениеЗаголовка = "";
	
	Если ФормаОбъекта.Объект.ТабачнаяПродукция Тогда
		ДополнениеЗаголовка = " (Это табачная продукция)";
	КонецЕсли;
	
	ТекстЗаголовка = ТекстЗаголовка + ДополнениеЗаголовка;
	
	ФормаОбъекта.Элементы.ГруппаТабачнаяПродукция.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

Процедура ОбновитьЗаголовокОбувь(ФормаОбъекта)
	
	Если Не ФормаОбъекта.Элементы.ГруппаИСМП.Видимость Тогда Возврат КонецЕсли;
	
	ТекстЗаголовка = "Обувная продукция";
	ДополнениеЗаголовка = "";
	
	Если ФормаОбъекта.Объект.ОбувнаяПродукция Тогда
		ДополнениеЗаголовка = " (Это обувная продукция)";
	КонецЕсли;
	
	ТекстЗаголовка = ТекстЗаголовка + ДополнениеЗаголовка;
	
	ФормаОбъекта.Элементы.ГруппаИСМП.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

Процедура ЗаполнитьДокумент(СтруктураЗаполнения, ВидДокумента, ДанныеЗаполнения, Владелец = Неопределено, УИД = Неопределено, ИзКорзины = Ложь)

	МассивРазрешенныхТиповНоменклатуры = Новый Массив;
	РазрешеныНаборы = Ложь;
	Если ВидДокумента = "ЗаказПокупателя" Тогда
		СтруктураЗаполнения.Вставить("ВидОперации",  ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
		ИмяТабличнойЧасти = "Запасы";
		РазрешеныНаборы = Истина;
	ИначеЕсли ВидДокумента = "СчетНаОплату" Тогда
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
		ИмяТабличнойЧасти = "Запасы";
		РазрешеныНаборы = Истина;
	ИначеЕсли ВидДокумента = "ЗаказНаряд" Тогда
		СтруктураЗаполнения.Вставить("ВидОперации",  ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ВидРабот"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
		ИмяТабличнойЧасти = "Запасы";
		РазрешеныНаборы = Истина;
	ИначеЕсли ВидДокумента = "АктВыполненныхРабот" Тогда
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		ИмяТабличнойЧасти = "РаботыИУслуги";
		РазрешеныНаборы = Истина;
	ИначеЕсли ВидДокумента = "РасходнаяНакладная" Тогда
		СтруктураЗаполнения.Вставить("ВидОперации",  ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
		ИмяТабличнойЧасти = "Запасы";
		РазрешеныНаборы = Истина;
	ИначеЕсли ВидДокумента = "ЧекККМ" Тогда
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
		ИмяТабличнойЧасти = "Запасы";
		РазрешеныНаборы = Истина;
	ИначеЕсли ВидДокумента = "ЗаказПоставщику" Тогда
		СтруктураЗаполнения.Вставить("ВидОперации",  ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
		ИмяТабличнойЧасти = "Запасы";
		РазрешеныНаборы = Ложь;
	ИначеЕсли ВидДокумента = "ПриходнаяНакладная" Тогда
		СтруктураЗаполнения.Вставить("ВидОперации",  ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
		ИмяТабличнойЧасти = "Запасы";
		РазрешеныНаборы = Ложь;
	КонецЕсли;
	
	МассивСообщенийОбОшибках = ПолучитьПараметрыЗаполнения(СтруктураЗаполнения, ДанныеЗаполнения, МассивРазрешенныхТиповНоменклатуры, РазрешеныНаборы, ИмяТабличнойЧасти, ВидДокумента, ИзКорзины);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", СтруктураЗаполнения);
	
	Если ВидДокумента = "ЗаказНаряд" Тогда
		ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаЗаказНаряда", ПараметрыФормы, Владелец, УИД);
	Иначе
		ОткрытьФорму(СтрШаблон("Документ.%1.ФормаОбъекта", ВидДокумента), ПараметрыФормы, Владелец, УИД);
	КонецЕсли;
	
	Для Каждого стрОшибка Из МассивСообщенийОбОшибках Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(стрОшибка);
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураЗаполненияДокумента(СтруктураЗаполнения, ВидДокумента, ДанныеЗаполнения)

	МассивРазрешенныхТиповНоменклатуры = Новый Массив;
	РазрешеныНаборы = Ложь;
	Если ВидДокумента = "ЗаказПокупателя" Тогда
		СтруктураЗаполнения.Вставить("ВидОперации",  ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
		ИмяТабличнойЧасти = "Запасы";
		РазрешеныНаборы = Истина;
	ИначеЕсли ВидДокумента = "СчетНаОплату" Тогда
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
		ИмяТабличнойЧасти = "Запасы";
		РазрешеныНаборы = Истина;
	ИначеЕсли ВидДокумента = "ЗаказНаряд" Тогда
		СтруктураЗаполнения.Вставить("ВидОперации",  ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ВидРабот"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
		ИмяТабличнойЧасти = "Запасы";
		РазрешеныНаборы = Истина;
	ИначеЕсли ВидДокумента = "АктВыполненныхРабот" Тогда
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		ИмяТабличнойЧасти = "РаботыИУслуги";
		РазрешеныНаборы = Истина;
	ИначеЕсли ВидДокумента = "РасходнаяНакладная" Тогда
		СтруктураЗаполнения.Вставить("ВидОперации",  ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
		ИмяТабличнойЧасти = "Запасы";
		РазрешеныНаборы = Истина;
	ИначеЕсли ВидДокумента = "ЧекККМ" Тогда
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
		ИмяТабличнойЧасти = "Запасы";
		РазрешеныНаборы = Истина;
	ИначеЕсли ВидДокумента = "ЗаказПоставщику" Тогда
		СтруктураЗаполнения.Вставить("ВидОперации",  ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
		ИмяТабличнойЧасти = "Запасы";
		РазрешеныНаборы = Ложь;
	ИначеЕсли ВидДокумента = "ПриходнаяНакладная" Тогда
		СтруктураЗаполнения.Вставить("ВидОперации",  ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивРазрешенныхТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
		ИмяТабличнойЧасти = "Запасы";
		РазрешеныНаборы = Ложь;
	КонецЕсли;
	
	МассивСообщенийОбОшибках = ПолучитьПараметрыЗаполнения(СтруктураЗаполнения, ДанныеЗаполнения, МассивРазрешенныхТиповНоменклатуры, РазрешеныНаборы, ИмяТабличнойЧасти, ВидДокумента, Истина);
	
	СтруктураЗаполненияИОшибки = Новый Структура("СтруктураЗаполнения, МассивСообщенийОбОшибках",СтруктураЗаполнения,МассивСообщенийОбОшибках);
	
	Возврат СтруктураЗаполненияИОшибки;
	
КонецФункции

Функция ПолучитьПараметрыЗаполнения(СтруктураЗаполнения, ДанныеЗаполнения, МассивРазрешенныхТиповНоменклатуры, РазрешеныНаборы, ИмяТабличнойЧасти, ВидДокумента, ИзКорзины = Ложь)
	
	МассивСообщенийОбОшибках = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		Возврат МассивСообщенийОбОшибках;
	КонецЕсли;
	
	МассивТоваров 	= Новый Массив;
	МассивУслуг		= Новый Массив;
	МассивРабот		= Новый Массив;
	ВидРабот		= Неопределено;
	
	Для каждого стрКорзины Из ДанныеЗаполнения Цикл
		
		Если МассивРазрешенныхТиповНоменклатуры.Найти(стрКорзины.ТипНоменклатуры) = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = '%1: тип номенклатуры <%2> нельзя использовать в документе'");
			МассивСообщенийОбОшибках.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				стрКорзины.Номенклатура,
				стрКорзины.ТипНоменклатуры
				));
			Продолжить;
			
		КонецЕсли;
		
		// Наборы
		Если стрКорзины.Свойство("ЭтоНабор") И стрКорзины.ЭтоНабор И НЕ РазрешеныНаборы  Тогда
			
			ТекстСообщения = НСтр("ru = '%1: наборы нельзя использовать в документе'");
			МассивСообщенийОбОшибках.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				стрКорзины.Номенклатура
				));
			Продолжить;
			
		КонецЕсли;
		// Конец Наборы
		
		структураТовар = Новый Структура("Номенклатура", стрКорзины.Номенклатура);
		Если стрКорзины.Свойство("Характеристика") Тогда
			структураТовар.Вставить("Характеристика", стрКорзины.Характеристика);
		КонецЕсли;
		
		Если стрКорзины.Свойство("Партия") Тогда
			структураТовар.Вставить("Партия", стрКорзины.Партия);
		КонецЕсли;
		
		структураТовар.Вставить("Количество", стрКорзины.Количество);
		структураТовар.Вставить("ЕдиницаИзмерения", стрКорзины.ЕдиницаИзмерения);
		
		Если ИзКорзины Тогда
			структураТовар.Вставить("Цена", стрКорзины.Цена);
			структураТовар.Вставить("Сумма", стрКорзины.Сумма);
		КонецЕсли;
		
		Если стрКорзины.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
			структураТовар.Вставить("ТипНоменклатурыЗапас", Истина);
		ИначеЕсли стрКорзины.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
			структураТовар.Вставить("ТипНоменклатурыЗапас", Истина);
		ИначеЕсли стрКорзины.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			структураТовар.Вставить("ТипНоменклатурыУслуга", Истина);
			структураТовар.Вставить("КлючСвязи", 0);
		ИначеЕсли стрКорзины.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
			структураТовар.Вставить("КлючСвязи", 0);
		КонецЕсли;
		
		// Наборы
		Если стрКорзины.Свойство("ЭтоНабор") Тогда
			структураТовар.Вставить("ЭтоНабор", стрКорзины.ЭтоНабор);
		КонецЕсли;
		// Конец Наборы
		
		Если СтрКорзины.Свойство("СтранаПроисхождения") Тогда
			СтруктураТовар.Вставить("СтранаПроисхождения", СтрКорзины.СтранаПроисхождения);
		КонецЕсли;
		
		Если стрКорзины.Свойство("СтруктурнаяЕдиница") Тогда
			
			Если ВидДокумента = "ЗаказПокупателя" Или ВидДокумента = "ЗаказНаряд" Тогда
				СтруктураТовар.Вставить("СтруктурнаяЕдиницаРезерв", СтрКорзины.СтруктурнаяЕдиница);
			Иначе
				СтруктураТовар.Вставить("СтруктурнаяЕдиница", СтрКорзины.СтруктурнаяЕдиница);
			КонецЕсли
		
		КонецЕсли;
		
		Если стрКорзины.Свойство("Ячейка") Тогда
			СтруктураТовар.Вставить("Ячейка", СтрКорзины.Ячейка);
		КонецЕсли;
		
		Если ВидДокумента="ЗаказНаряд" Тогда
			Если стрКорзины.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ВидРабот") Тогда
				ВидРабот = стрКорзины.Номенклатура;
			ИначеЕсли стрКорзины.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
				ИЛИ стрКорзины.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
				Тогда
				структураТовар.КлючСвязи = МассивРабот.Количество() + 1;
				МассивРабот.Добавить(структураТовар);
			Иначе
				МассивТоваров.Добавить(структураТовар);
			КонецЕсли;
		ИначеЕсли ВидДокумента="ПриходнаяНакладная" Тогда
			Если стрКорзины.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
				МассивУслуг.Добавить(структураТовар);
			Иначе
				МассивТоваров.Добавить(структураТовар);
			КонецЕсли;
		Иначе
			МассивТоваров.Добавить(структураТовар);
		КонецЕсли; 
		
	КонецЦикла;
	
	СтруктураЗаполнения.Вставить(ИмяТабличнойЧасти, МассивТоваров);
	
	Если ИзКорзины Тогда
		СтруктураЗаполнения.Вставить("ИзКорзины", ИзКорзины);
	КонецЕсли;
	
	// Для Заказ-Наряда
	СтруктураЗаполнения.Вставить("ВидРабот", ВидРабот);
	СтруктураЗаполнения.Вставить("Работы", МассивРабот);
	
	// Для Приходной накладной
	СтруктураЗаполнения.Вставить("Расходы", МассивУслуг);
	
	Возврат МассивСообщенийОбОшибках;
	
КонецФункции

// Подготавливает данные номенклатуры и вызывает ЗаполнитьДокумент()
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - ссылка на элемент справочника "Номенклатура"
//  ВидДокумента - Строка - вид документа, для которого подготавливаются данные
//
Процедура ПодготовитьДанныеЭлемента(Номенклатура, ВидДокумента)
	
	ДанныеНоменклатуры = НоменклатураВДокументахВызовСервера.ДанныеНоменклатуры(Номенклатура);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ДанныеНоменклатуры);
	
	ПараметрыЗаполнения = Новый Структура;
	ДополнитьПолемПоставщик(ПараметрыЗаполнения, ДанныеНоменклатуры, ВидДокумента);
	
	ЗаполнитьДокумент(ПараметрыЗаполнения, ВидДокумента, МассивСтрок);
	
КонецПроцедуры

Процедура ДополнитьПолемПоставщик(ПараметрыЗаполнения, ДанныеНоменклатуры, ВидДокумента)
	
	Если Не ЗначениеЗаполнено(ДанныеНоменклатуры.Поставщик) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидДокумента = "ЗаказПоставщику"
		Или ВидДокумента = "ПриходнаяНакладная" Тогда
		ПараметрыЗаполнения.Вставить("Контрагент", ДанныеНоменклатуры.Поставщик);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные списка номенклатуры и вызывает ОформитьДокументСТоварамиИзКорзины()
//
// Параметры:
//  ТаблицаФормы - ТаблицаФормы - таблица формы, из которой извлекаются данные для заполнения документа
//  ВидДокумента - Строка - вид документа, для заполнения которого подготавливаются данные
//
Процедура ПодготовитьДанныеСписка(Форма, ТаблицаФормы, ВидДокумента)
	
	ДанныеСписка = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаФормы.ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаФормы.ДанныеСтроки(ТекСтрока);
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПоляСписка = Новый Структура;
		ПоляСписка.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
		ПоляСписка.Вставить("Количество", 1);
		ПоляСписка.Вставить("Цена", ДанныеСтроки.Цена);
		ПоляСписка.Вставить("ЕдиницаИзмерения", ДанныеСтроки.ЕдиницаИзмерения);
		ПоляСписка.Вставить("ТипНоменклатуры", ДанныеСтроки.ТипНоменклатуры);
		Если ДанныеСтроки.Свойство("СтавкаНДС") Тогда
			ПоляСписка.Вставить("СтавкаНДС", ДанныеСтроки.СтавкаНДС);
		Иначе
			ПоляСписка.Вставить("СтавкаНДС", НоменклатураВДокументахСервер.СтавкаНоменклатуры(ДанныеСтроки.Номенклатура));
		КонецЕсли;
		ПоляСписка.Вставить("СтранаПроисхождения", ДанныеСтроки.СтранаПроисхождения);
		ПоляСписка.Вставить("ЭтоНабор", ДанныеСтроки.ЭтоНабор);
		ПоляСписка.Вставить("Склад", ДанныеСтроки.Склад);
		ПоляСписка.Вставить("Ячейка", ДанныеСтроки.Ячейка);
		Если ДанныеСтроки.Свойство("Характеристика") Тогда
			ПоляСписка.Вставить("Характеристика", ДанныеСтроки.Характеристика);
		Иначе
			ПоляСписка.Вставить("Характеристика", НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(ДанныеСтроки.Номенклатура));
		КонецЕсли;
		
		ДанныеСписка.Добавить(ПоляСписка);
	КонецЦикла; 
	
	ОформитьДокументСТоварамиИзКорзины(Форма, ВидДокумента, ДанныеСписка);
	
КонецПроцедуры

#КонецОбласти
