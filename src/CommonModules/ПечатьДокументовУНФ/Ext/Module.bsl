#Область ПрограммныйИнтерфейс

// Перед началом формирования документа
//
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент - .
//  ПервыйДокумент		 - Булево - .
//  НомерСтрокиНачало	 - Число - .
//  ДанныеПечати		 - Структура - .
//
Процедура ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало,
	ДанныеПечати = Неопределено) Экспорт
	
	Если ПервыйДокумент = Истина
		ИЛИ ПервыйДокумент = Неопределено Тогда
		
		ПервыйДокумент = Ложь;
		
	Иначе
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЕсли;
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	Если ТипЗнч(ДанныеПечати) = Тип("Структура") Тогда
		
		ДанныеПечати.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак необходимости выделить как составляющую набора
//
// Параметры:
//  ПараметрыНоменклатуры	 - Структура - .
// 
// Возвращаемое значение:
//  Булево - необходимо выделить как состав набора
//
Функция НеобходимоВыделитьКакСоставляющуюНабора(ПараметрыНоменклатуры) Экспорт
	
	Перем НеобходимоВыделитьКакСоставНабора;
	
	ПараметрыНоменклатуры.Свойство("НеобходимоВыделитьКакСоставНабора", НеобходимоВыделитьКакСоставНабора);
	Возврат НеобходимоВыделитьКакСоставНабора = Истина;
	
КонецФункции

// Формирует представление номенклатуры в печатной форме
//
// Параметры:
//  ПараметрыНоменклатуры - Структура - параметры, по которым формируется представление, возможные ключи:
//   * ПредставлениеНоменклатуры - Строка, СправочникСсылка.Номенклатура - .
//   * ПредставлениеХарактеристики - Строка, СправочникСсылка.ХарактеристикиНоменклатуры - .
//   * ПредставлениеСерииНоменклатуры - Строка, СправочникСсылка.ПартииНоменклатуры - .
//   * ПредставлениеПартии  - Строка, СправочникСсылка.ПартииНоменклатуры - .
//   * ПредставлениеКодаТНВЭД - Строка, СправочникСсылка.КлассификаторТНВЭД - .
//
// Возвращаемое значение:
//  Строка - представление номенклатуры в печатной форме.
//
Функция ПредставлениеНоменклатуры(ПараметрыНоменклатуры) Экспорт
	
	ПредставлениеНоменклатуры = "";
	ПредставлениеХарактеристики = "";
	ПредставлениеСерииНоменклатуры = "";
	ПредставлениеПартии = "";
	ПредставлениеКодаТНВЭД = "";
	// "ПредставлениеАртикула" начиная с версии 1.6.11 не используется в представлении номенклатуры.
	
	НеобходимоВыделитьКакСоставНабора = НеобходимоВыделитьКакСоставляющуюНабора(ПараметрыНоменклатуры);
	
	Если ПараметрыНоменклатуры.Свойство("Содержание") 
		И НЕ ПустаяСтрока(ПараметрыНоменклатуры.Содержание) Тогда
		
		ПредставлениеНоменклатуры = ПараметрыНоменклатуры.Содержание;
		
	Иначе
		
		ПредставлениеНоменклатуры = СтрокаПредставленияНоменклатуры(ПараметрыНоменклатуры);
		ПредставлениеХарактеристики = СтрокаПредставленияХарактеристики(ПараметрыНоменклатуры);
		ПредставлениеСерииНоменклатуры = СтрокаПредставленияСерииНоменклатуры(ПараметрыНоменклатуры);
		ПредставлениеПартии = СтрокаПредставленияПартии(ПараметрыНоменклатуры);
		ПредставлениеКодаТНВЭД = СтрокаПредставленияКодаТНВЭД(ПараметрыНоменклатуры);
		
	КонецЕсли;
	
	Возврат ПредставлениеНоменклатурыДляПечати(ПредставлениеНоменклатуры, ПредставлениеХарактеристики,
		ПредставлениеСерииНоменклатуры, ПредставлениеПартии, ПредставлениеКодаТНВЭД, НеобходимоВыделитьКакСоставНабора);
	
КонецФункции // ПредставлениеНоменклатуры()

Функция СтрокаПредставленияНоменклатуры(ПараметрыНоменклатуры) Экспорт
	
	ПредставлениеНоменклатуры = "";
	Если ПараметрыНоменклатуры.Свойство("ПредставлениеНоменклатуры") Тогда
		
		Если ТипЗнч(ПараметрыНоменклатуры.ПредставлениеНоменклатуры) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ПредставлениеНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНоменклатуры.ПредставлениеНоменклатуры, "НаименованиеПолное");
			Если ПустаяСтрока(ПредставлениеНоменклатуры) Тогда
				
				ПредставлениеНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНоменклатуры.ПредставлениеНоменклатуры, "Наименование");
				
			КонецЕсли;
			
		Иначе
			
			ПредставлениеНоменклатуры = СокрЛП(ПараметрыНоменклатуры.ПредставлениеНоменклатуры);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат ПредставлениеНоменклатуры;
	
КонецФункции

Функция СтрокаПредставленияХарактеристики(ПараметрыНоменклатуры) Экспорт
	
	ПредставлениеХарактеристики = "";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		Если ПараметрыНоменклатуры.Свойство("ПредставлениеХарактеристики") Тогда
			
			Если ТипЗнч(ПараметрыНоменклатуры.ПредставлениеХарактеристики) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
				
				ПредставлениеХарактеристики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНоменклатуры.ПредставлениеХарактеристики, "НаименованиеДляПечати");
				Если ПустаяСтрока(ПредставлениеХарактеристики) Тогда
					
					ПредставлениеХарактеристики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНоменклатуры.ПредставлениеХарактеристики, "Наименование");
					
				КонецЕсли;
				
			Иначе
				
				ПредставлениеХарактеристики = СокрЛП(ПараметрыНоменклатуры.ПредставлениеХарактеристики);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеХарактеристики;
	
КонецФункции

Функция СтрокаПредставленияПартии(ПараметрыНоменклатуры) Экспорт
	
	ПредставлениеПартии = "";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		
		Если ПараметрыНоменклатуры.Свойство("ПредставлениеПартии") Тогда
			
			Если ТипЗнч(ПараметрыНоменклатуры.ПредставлениеПартии) = Тип("СправочникСсылка.ПартииНоменклатуры") Тогда
				
				ПредставлениеПартии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНоменклатуры.ПредставлениеПартии, "Наименование");
				
			Иначе
				
				ПредставлениеПартии = СокрЛП(ПараметрыНоменклатуры.ПредставлениеПартии);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеПартии;
	
КонецФункции

Функция СтрокаПредставленияКодаТНВЭД(ПараметрыНоменклатуры) Экспорт
	
	ПредставлениеКодаТНВЭД = "";
	Если ПараметрыНоменклатуры.Свойство("КодТНВЭД") Тогда
		
		Если ТипЗнч(ПараметрыНоменклатуры.КодТНВЭД) = Тип("СправочникСсылка.КлассификаторТНВЭД") Тогда
			
			ПредставлениеКодаТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНоменклатуры.КодТНВЭД, "Код");
			
		Иначе
			
			ПредставлениеКодаТНВЭД = СокрЛП(ПараметрыНоменклатуры.КодТНВЭД);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеКодаТНВЭД;
	
КонецФункции

Функция СтрокаПредставленияСерииНоменклатуры(ПараметрыНоменклатуры) Экспорт
	
	ПредставлениеСерииНоменклатуры = "";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		
		Если ПараметрыНоменклатуры.Свойство("ПредставлениеСерииНоменклатуры") Тогда
			
			Если ТипЗнч(ПараметрыНоменклатуры.ПредставлениеСерииНоменклатуры) = Тип("СправочникСсылка.СерииНоменклатуры") Тогда
				
				ПредставлениеСерииНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНоменклатуры.ПредставлениеСерииНоменклатуры, "Наименование");
				
			Иначе
				
				ПредставлениеСерииНоменклатуры = СокрЛП(ПараметрыНоменклатуры.ПредставлениеСерииНоменклатуры);
				
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеСерииНоменклатуры;
	
КонецФункции

Функция ПредставлениеДатыВДокументах(ЗначениеДаты) Экспорт
	
	Возврат Формат(ЗначениеДаты, "ДЛФ=DD");
	
КонецФункции

Функция ПредставлениеЗаголовкаНДС(СуммаНДС, СуммаВключаетНДС, ЧастичнаяОплата, ЕстьСтавкаНольПроцентов = Ложь) Экспорт
	Перем ЗаголовокИтоговНДС;
	
	ТекстНДС = НСтр("ru ='НДС'");
	Если ЧастичнаяОплата Тогда
		
		ТекстНДС = ТекстНДС + НСтр("ru =' оплаты'");
		
	КонецЕсли;
	
	Если СуммаНДС = 0 
		И НЕ ЕстьСтавкаНольПроцентов Тогда
		
		ЗаголовокИтоговНДС = НСтр("ru ='Без налога (НДС)'");
		
	ИначеЕсли СуммаВключаетНДС Тогда
		
		ЗаголовокИтоговНДС = СтрШаблон(НСтр("ru ='В том числе %1:'"), ТекстНДС);
		
	Иначе
		
		ЗаголовокИтоговНДС = СтрШаблон(НСтр("ru ='Сумма %1:'"), ТекстНДС);
		
	КонецЕсли;
	
	Возврат ЗаголовокИтоговНДС;
	
КонецФункции

Функция ПредставлениеОснованияПечати(ОснованиеПечатиСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОснованиеПечатиСсылка) Тогда
		
		Если ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			Возврат ПараметрЭтотДокументЗаказПокупателя();
			
		ИначеЕсли ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.СчетНаОплату") Тогда
			
			Возврат ПараметрЭтотДокументСчетНаОплату();
			
		Иначе
			
			Возврат "";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОснованиеПечатиСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ЗаголовокПредставления = "";
		Если Константы.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати.Получить() Тогда
			
			ЗаголовокПредставления = НСтр("ru = 'Договор:'") + " ";
			
		КонецЕсли;
		
		Возврат ЗаголовокПредставления + Строка(ОснованиеПечатиСсылка.Наименование);
		
	ИначеЕсли ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.СчетНаОплату")
		ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.РасходнаяНакладная")
		ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.АктВыполненныхРабот")
		ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.ПриемИПередачаВРемонт")
		Тогда
		
		Возврат Строка(ОснованиеПечатиСсылка);
		
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеНомераДатыОснованияПечати(ОснованиеПечатиСсылка) Экспорт
	
	ДанныеОснованияПечати = Новый Структура("Номер, Дата");
	
	Если ЗначениеЗаполнено(ОснованиеПечатиСсылка) Тогда
		
		Если ТипЗнч(ОснованиеПечатиСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			ДанныеОснованияПечати.Номер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПечатиСсылка, "НомерДоговора");
			ДанныеОснованияПечати.Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПечатиСсылка, "ДатаДоговора");
			
		ИначеЕсли ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.СчетНаОплату")
			ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.ЗаказПокупателя")
			ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.ЗаказПоставщику")
			Тогда
			
			ЗаполнитьЗначенияСвойств(ДанныеОснованияПечати, ОснованиеПечатиСсылка, "Номер, Дата");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеОснованияПечати;
	
КонецФункции

Функция ПредставлениеКодаНоменклатуры(ПараметрыНоменклатуры) Экспорт
	
	ПредставлениеКодаНоменклатуры = "";
	ИмяПоля = "";
	
	ВидПредставления = Константы.ПредставлениеКодовВПечатныхФормах.Получить();
	Если ВидПредставления = Перечисления.КодыНоменклатурыВДокументах.Код Тогда
		
		ИмяПоля = "Код";
		
	ИначеЕсли ВидПредставления = Перечисления.КодыНоменклатурыВДокументах.Артикул Тогда
		
		ИмяПоля = "Артикул";
		
	ИначеЕсли ВидПредставления = Перечисления.КодыНоменклатурыВДокументах.Штрихкод Тогда
		
		ИмяПоля = "ШтрихКод";
		
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПоля) Тогда
		
		// обработка не требуется
		
	ИначеЕсли ТипЗнч(ПараметрыНоменклатуры) = Тип("СтрокаТаблицыЗначений")
		ИЛИ ТипЗнч(ПараметрыНоменклатуры) = Тип("СтрокаДереваЗначений")
		ИЛИ ТипЗнч(ПараметрыНоменклатуры) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		Попытка
			ПредставлениеКодаНоменклатуры = ПараметрыНоменклатуры[ИмяПоля];
		Исключение
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(ПараметрыНоменклатуры) = Тип("Структура") Тогда
		
		ПараметрыНоменклатуры.Свойство(ИмяПоля, ПредставлениеКодаНоменклатуры);
		
	КонецЕсли;
	
	Возврат ПредставлениеКодаНоменклатуры;
	
КонецФункции

Функция ПредставлениеСерииНоменклатурыПоКлючу(ТаблицаСерийНоменклатуры, КлючСвязи) Экспорт
	
	ПредставлениеСерииНоменклатуры = "";
	
	Если ТипЗнч(ТаблицаСерийНоменклатуры) = Тип("ТаблицаЗначений")
		И ТаблицаСерийНоменклатуры.Количество() > 0 Тогда
		
		МассивНайденныхСтрок = ТаблицаСерийНоменклатуры.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
		Для каждого СтрокаМассива Из МассивНайденныхСтрок Цикл
			
			ПредставлениеСерииНоменклатуры = ПредставлениеСерииНоменклатуры + ?(ПустаяСтрока(ПредставлениеСерииНоменклатуры), "", ", ") + СокрЛП(СтрокаМассива.Серия);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПредставлениеСерииНоменклатуры;
	
КонецФункции

Функция ПредставлениеСкидки(СтрокаТабличнойЧасти, СтруктураИтогов) Экспорт
	
	СкидкаСумма = 0;
	СкидкаПроцент = 0;
	
	ТочностьОкругленияСкидки = 2; // Знаков после запятой
	
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		
		СкидкаСумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		СкидкаПроцент = НСтр("ru ='100%'");
		
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0 
		И СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0 Тогда
		
		СкидкаСумма = 0;
		СкидкаПроцент = НСтр("ru ='-'");
		
	Иначе
		
		СкидкаСумма = (СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена) - СтрокаТабличнойЧасти.Сумма;
		
		Если СкидкаСумма > 0 Тогда
			
			Знаменатель = (СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена);
			Если Знаменатель = 0 Тогда
				
				СкидкаПроцент = 0;
				
			Иначе
				
				СкидкаПроцент = (СтрокаТабличнойЧасти.Сумма * 100) / Знаменатель;
				СкидкаПроцент = Строка(100 - Окр(СкидкаПроцент, ТочностьОкругленияСкидки)) + "%";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураИтогов.Свойство("СкидкаПоСтроке") Тогда
		
		СтруктураИтогов.СкидкаПоСтроке = СкидкаСумма;
		
	КонецЕсли;
	
	Возврат ?(СтруктураИтогов.ПредставлениеСкидки = Перечисления.СпособОтображенияСкидок.Процент, СкидкаПроцент, Формат(СкидкаСумма, "ЧДЦ=2; ЧГ="));
	
КонецФункции

Функция ПредставлениеКомплектаДокументов() Экспорт
	
	Возврат НСтр("ru = 'Настраиваемый комплект документов'");
	
КонецФункции

Функция ПараметрЭтотДокументЗаказПокупателя() Экспорт
	
	Возврат НСтр("ru ='Этот документ (Заказ покупателя)'");
	
КонецФункции

Функция ПараметрЭтотДокументСчетНаОплату() Экспорт
	
	Возврат НСтр("ru ='Этот документ (Счет на оплату)'");
	
КонецФункции

// Представление номенклатуры для печати
//
// Параметры:
//  ПредставлениеНоменклатуры - Строка, СправочникСсылка.Номенклатура - .
//  ПредставлениеХарактеристики - Строка, СправочникСсылка.ХарактеристикиНоменклатуры - .
//  ПредставлениеСерииНоменклатуры - Строка, СправочникСсылка.ПартииНоменклатуры - .
//  ПредставлениеПартии - Строка, СправочникСсылка.ПартииНоменклатуры - .
//  ПредставлениеКодаТНВЭД - Строка, СправочникСсылка.КлассификаторТНВЭД - .
//  НеобходимоВыделитьКакСоставНабора - Булево
// 
// Возвращаемое значение:
//  Строка - представление номенклатуры в печатной форме.
Функция ПредставлениеНоменклатурыДляПечати(ПредставлениеНоменклатуры, ПредставлениеХарактеристики = "",
	ПредставлениеСерииНоменклатуры = "", ПредставлениеПартии = "", ПредставлениеКодаТНВЭД = "",
	НеобходимоВыделитьКакСоставНабора = Ложь) Экспорт
	
	ПараметрыСтроки = Новый Структура;
	ПараметрыСтроки.Вставить("ПредставлениеНоменклатуры", ПредставлениеНоменклатуры);
	ПараметрыСтроки.Вставить("ПредставлениеХарактеристики", ПредставлениеХарактеристики);
	ПараметрыСтроки.Вставить("ПредставлениеСерииНоменклатуры", ПредставлениеСерииНоменклатуры);
	ПараметрыСтроки.Вставить("ПредставлениеПартии", ПредставлениеПартии);
	ПараметрыСтроки.Вставить("ПредставлениеКодаТНВЭД", ПредставлениеКодаТНВЭД);
	
	// Шаблон представления:
	// [ПредставлениеНоменклатуры] ([ПредставлениеХарактеристики], [ПредставлениеСерииНоменклатуры]), [ПредставлениеПартии],
	// {код ТН ВЭД [ПредставлениеКодаТНВЭД]};
	
	Если ПустаяСтрока(ПредставлениеХарактеристики)
		И ПустаяСтрока(ПредставлениеСерииНоменклатуры) Тогда
		
		ШаблонПредставления = "[ПредставлениеНоменклатуры]";
		
	ИначеЕсли НЕ ПустаяСтрока(ПредставлениеХарактеристики)
		И НЕ ПустаяСтрока(ПредставлениеСерииНоменклатуры) Тогда
		
		ШаблонПредставления = "[ПредставлениеНоменклатуры] ([ПредставлениеХарактеристики], [ПредставлениеСерииНоменклатуры])";
		
	ИначеЕсли ПустаяСтрока(ПредставлениеСерииНоменклатуры) Тогда 
		
		ШаблонПредставления = "[ПредставлениеНоменклатуры] ([ПредставлениеХарактеристики])";
		
	Иначе
		
		ШаблонПредставления = "[ПредставлениеНоменклатуры] ([ПредставлениеСерииНоменклатуры])";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПредставлениеПартии) Тогда
		
		ШаблонПредставления = ШаблонПредставления + ", [ПредставлениеПартии]";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПредставлениеКодаТНВЭД) Тогда
		
		ШаблонПредставления = ШаблонПредставления + НСтр("ru=', код ТН ВЭД'") + " " + " [ПредставлениеКодаТНВЭД]";
		
	КонецЕсли;
	
	Если НеобходимоВыделитьКакСоставНабора Тогда
		
		ШаблонПредставления = СтрШаблон("    • %1", ШаблонПредставления);
		
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонПредставления, ПараметрыСтроки);
	
КонецФункции

Функция ПолучитьИсходныйДокументКорректировки(ДокументСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		Возврат ПолучитьИсходныйДокументКорректировки(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование"));
		
	Иначе
		
		Возврат ДокументСсылка;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОбластьБезопасно(Макет, ИмяОбласти, ПредставлениеОбласти, Ошибки) Экспорт
	Перем ОбластьМакета;
	
	Если Макет.Области.Найти(ИмяОбласти) = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Не обнаружена область макета %1. Возможно используется пользовательский макет.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ?(ПустаяСтрока(ПредставлениеОбласти), ИмяОбласти, ПредставлениеОбласти));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
		
	Иначе
		
		ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
		
	КонецЕсли;
	
	Возврат ОбластьМакета;
	
КонецФункции

Процедура УстановитьПараметрБезопасно(Область, ИмяПараметра, Значение) Экспорт
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить(ИмяПараметра, Значение);
	Область.Параметры.Заполнить(ЗначенияПараметров);
	
КонецПроцедуры

// Получить плашку подписи безопасно
//
// Параметры:
//  ОбластьМакета - ТабличныйДокумент - .
//  ИмяПлашки - Строка - .
//  ПредставлениеПодписи - Строка - .
//  Ошибки - Массив - .
// 
// Возвращаемое значение:
//  ОбластьЯчеекТабличногоДокумента - область ячеек с плашкой подписи.
//
Функция ПолучитьПлашкуПодписиБезопасно(ОбластьМакета, ИмяПлашки, ПредставлениеПодписи, Ошибки) Экспорт
	
	ПлашкаПодписи = ОбластьМакета.Области.Найти(ИмяПлашки);
	Если ПлашкаПодписи = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru ='ВНИМАНИЕ: нет места для подписи %1. Возможно используется пользовательский макет.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ?(ПустаяСтрока(ПредставлениеПодписи), ИмяПлашки, ПредставлениеПодписи));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
		
	Иначе
		
		ПлашкаПодписи.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		
	КонецЕсли;
	
	Возврат ПлашкаПодписи;
	
КонецФункции

Функция ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДатаДокумента, НомерДокумента, Префикс) Экспорт
	
	Если ДатаДокумента < Дата('20110101') Тогда
		
		Возврат НомерНаПечать(НомерДокумента, Префикс);
		
	Иначе
		
		БезПрефиксаИнформационнойБазы = Константы.ПредставлениеНомераДокументаБезПрефиксаИнформационнойБазы.Получить();
		БезПрефиксаПользователя = Константы.ПредставлениеНомераДокументаБезПрефиксаПользователя.Получить();
		
		Возврат ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, БезПрефиксаИнформационнойБазы, БезПрефиксаПользователя);
		
	КонецЕсли;
	
КонецФункции

Процедура КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(Форма, ЭлементФормы_ПодменюПечать, ЭлементФормы_ГруппаКомандУНФ) Экспорт
	
	ИмяГруппыФормыПоУмолчанию = "ПодменюПечатьОбычное";
	
	ГруппаФормыСКомандамиПечати = Форма.Элементы.Найти(ИмяГруппыФормыПоУмолчанию);
	Если ГруппаФормыСКомандамиПечати = Неопределено Тогда
		
		ГруппаФормыСКомандамиПечати = ЭлементФормы_ПодменюПечать;
		
	КонецЕсли;
	
	Форма.Элементы.Переместить(ЭлементФормы_ГруппаКомандУНФ, ГруппаФормыСКомандамиПечати);
	
КонецПроцедуры

Функция ШаблонТекстаПредупрежденияПравкиМакета() Экспорт
	
	Результат = НСтр("ru = 'Внимание: возможно используется пользовательский макет.
	|Штатный механизм печати счетов может работать некорректно.'");
	
	Возврат Результат;
	
КонецФункции

Функция ИтоговаяСтрока(КоличествоПозиций, СуммаДокумента, ВалютаДокумента) Экспорт
	
	Шаблон = НСтр("ru='Всего наименований %1, на сумму %2'");
	Сумма = ПечатьДокументовУНФ.ФорматСумм(СуммаДокумента, ВалютаДокумента);
	Результат = СтрШаблон(Шаблон, КоличествоПозиций, Сумма);
	Возврат Результат;
	
КонецФункции

Функция ДокументФормируетсяСогласноФЗ56(Дата) Экспорт
	
	// Используется при формирование
	// - СФ
	// - УПД
	// - Корректировочный СФ
	
	НачалоПримененияФЗ56 = '20170701';
	ПрименяетсяПостановление981 = (Дата >= Константы.НачалоИспользованияСФ981.Получить());
	
	Возврат (Дата >= НачалоПримененияФЗ56) И НЕ ПрименяетсяПостановление981;
	
КонецФункции

// Возвращает версию постановления Правительства РФ от 26.12.2011 г. № 1137
//
// Параметры
//  Период  -  тип дата, в данном параметре передается
//             дата на которую необходимо определить версию постановления
// Возвращаемое значение:
//  Число   -  версия постановления,
//              "1137" (БП = 1) - исходная версия постановления Правительства РФ от 26.12.2011 г. № 1137
//              "952"  (БП = 2) - постановление Правительства РФ от 26.12.2011 г. № 1137 в редакции постановления № 952
//              "735"  (БП = 3) - постановление Правительства РФ от 26.12.2011 г. № 1137 в редакции постановления № 735
//              "981"  (БП = 4) - постановление Правительства РФ от 26.12.2011 г. № 1137 в редакции постановления № 981
//
Функция ВерсияПостановленияНДС1137(Период) Экспорт
	
	Если Период >= '20210701' Тогда			// Постановление № 534 вступает в силу с 1 июля 2021 года.
		Возврат "534"; 						//  в БП = 5
	ИначеЕсли Период >= '20171001' Тогда	// Постановление № 981 вступает в силу с 1 октября 2017 года.
		Возврат "981"; 						//  в БП = 4
	ИначеЕсли Период >= '20141001' Тогда	// Постановление № 735 вступает в силу с 1 октября 2014 года.
		Возврат "735";						//  в БП = 3
	ИначеЕсли Период >= '20131106' Тогда	// Постановление № 952 вступает в силу с 6 ноября 2013 года.
		Возврат "952";						//  в БП = 2
	Иначе									// Исходная версия Постановления Правительства РФ от 26.12.2011 г. № 1137.
		Возврат "1137";						//  в БП = 1
	КонецЕсли;
	
КонецФункции // ВерсияПостановленияНДС1137()

Функция ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти, Ошибки) Экспорт
	
	Попытка
		
		Возврат ТабличныйДокумент.ПроверитьВывод(ВыводимыеОбласти);
		
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ТекстОшибки = НСтр("ru = 'Невозможно получить информацию о текущем принтере.
		|Возможно, в системе не установлено ни одного принтера.'");
		
		ЗаписьЖурналаРегистрации(ТекстОшибки, УровеньЖурналаРегистрации.Ошибка , , , ОписаниеОшибки.Описание);
		
	КонецПопытки;

КонецФункции

Процедура ОбработкаЗаполненияОснованияПечати(ЭтотОбъект) Экспорт
	
	СоответствиеТиповКонстант = Новый Соответствие;
	СоответствиеТиповКонстант.Вставить(Тип("ДокументСсылка.ЗаказПокупателя"), "ОснованиеПечатиЗаказПокупателя");
	СоответствиеТиповКонстант.Вставить(Тип("ДокументСсылка.СчетНаОплату"), "ОснованиеПечатиСчетНаОплату");
	
	ИмяКонстанты = СоответствиеТиповКонстант.Получить(ТипЗнч(ЭтотОбъект.Ссылка));
	
	ЗначениеКонстанты = Константы[ИмяКонстанты].Получить();
	Если ЗначениеКонстанты = Перечисления.ОснованиеПечатиСпособНачальногоЗаполнение.ТекущийДокумент Тогда
		
		Если ИмяКонстанты = "ОснованиеПечатиЗаказПокупателя" Тогда
			
			ЭтотОбъект.ОснованиеПечатиСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
			ЭтотОбъект.ОснованиеПечати = ПараметрЭтотДокументЗаказПокупателя();
			
		ИначеЕсли ИмяКонстанты = "ОснованиеПечатиСчетНаОплату" Тогда
			
			ЭтотОбъект.ОснованиеПечатиСсылка = Документы.СчетНаОплату.ПустаяСсылка();
			ЭтотОбъект.ОснованиеПечати = ПараметрЭтотДокументСчетНаОплату();
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеКонстанты = Перечисления.ОснованиеПечатиСпособНачальногоЗаполнение.ДоговорКонтрагента Тогда
		
		Если ЗначениеЗаполнено(ЭтотОбъект.Договор) Тогда
			
			ЭтотОбъект.ОснованиеПечатиСсылка = ЭтотОбъект.Договор;
			ЭтотОбъект.ОснованиеПечати = ПредставлениеОснованияПечати(ЭтотОбъект.ОснованиеПечатиСсылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция преобразует строку к множественному числу
// Предназначена для формирования "правильной" подписи к числительным
//
// Параметры: 
//  Слово1 - форма слова в ед числе      ("шкаф")
//  Слово2 - форма слова для числит 2-4  ("шкафа")
//  Слово3 - форма слова для числит 5-10 ("шкафов")
//  ЦелоеЧисло - целое число
//
// Возвращаемое значение:
//  Строка - одну из строк в зависимости от параметра ЦелоеЧисло
//
Функция ФормаМножественногоЧисла(Слово1, Слово2, Слово3, Знач ЦелоеЧисло) Экспорт
	
	// Изменим знак целого числа, иначе отрицательные числа будут неправильно преобразовываться
	Если ЦелоеЧисло < 0 Тогда
		ЦелоеЧисло = -1 * ЦелоеЧисло;
	КонецЕсли;
	
	Если ЦелоеЧисло <> Цел(ЦелоеЧисло) Тогда 
		// для нецелых чисел - всегда вторая форма
		Возврат Слово2;
	КонецЕсли;
	
	// остаток
	Остаток = ЦелоеЧисло%10;
	Если (ЦелоеЧисло >10) И (ЦелоеЧисло<20) Тогда
		// для второго десятка - всегда третья форма
		Возврат Слово3;
	ИначеЕсли Остаток=1 Тогда
		Возврат Слово1;
	ИначеЕсли (Остаток>1) И (Остаток<5) Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;

КонецФункции

// Процедура переопределяет отображение подменю "Печать" в формах
//
// Параметры:
//  ГруппаФормыПечать	 - ГруппаФормы	 - элемент формы, содержащий команды печати
//
Процедура УстановитьОтображениеПодменюПечати(ГруппаФормыПечать) Экспорт
	
	ГруппаФормыПечать.Вид			= ВидГруппыФормы.Подменю;
	ГруппаФормыПечать.Отображение	= ОтображениеКнопки.Картинка;
	ГруппаФормыПечать.Картинка		= БиблиотекаКартинок.Печать;
	ГруппаФормыПечать.Подсказка		= НСтр("ru='Печать с предварительным просмотром'");
	ГруппаФормыПечать.Заголовок		= НСтр("ru='Печать'");
	
КонецПроцедуры

// Функция проверяет возможность выполнения команды печати в серверном контексте
// Параметры:
//  ОписаниеКомандыПечати - СтрокаТаблицыЗначений - подробности см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//                           а также см. ШаблоныСообщенийСлужебный неэкспортный метод ОпределитьСписокПечатныхФорм
//  КолонкаИдентификаторКоманды - Строка - идентификатор команды.
// Возвращаемое значение:
//  Булево - истина означает, что для команды печати определен вывод в табличный документ с использованием процедуры
//           Печать() в модуле менеджера печати.
Функция КомандаПечатаетсяВСерверномКонтексте(знач ОписаниеКомандыПечати, КолонкаИдентификаторКоманды = Неопределено) Экспорт
	
	Если ОписаниеКомандыПечати.Представление = НСтр("ru='Настраиваемый комплект документов'") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если КолонкаИдентификаторКоманды = Неопределено Тогда
		КолонкаИдентификаторКоманды = "Идентификатор";
	КонецЕсли;
	
	КомандыИсключения = Новый Массив;
	КомандыИсключения.Добавить("Конверт");
	КомандыИсключения.Добавить("ПечатьЭтикетокИзОприходованиеЗапасов");
	КомандыИсключения.Добавить("ПечатьЦенниковИзОприходованиеЗапасов");
	КомандыИсключения.Добавить("ПечатьЭтикетокИзПеремещенияТоваров");
	КомандыИсключения.Добавить("ПечатьЦенниковИзПеремещенияТоваров");
	КомандыИсключения.Добавить("ПечатьЭтикетокИзПриходнойНакладной");
	КомандыИсключения.Добавить("ПечатьЦенниковИзПриходнойНакладной");
	КомандыИсключения.Добавить("ПечатьЭтикетокИзРасходнойНакладной");
	КомандыИсключения.Добавить("ПечатьЦенниковИзРасходнойНакладной");
	КомандыИсключения.Добавить("ПечатьЭтикетокИзЗаказаПокупателя");
	КомандыИсключения.Добавить("ПечатьЦенниковИзЗаказаПокупателя");
	КомандыИсключения.Добавить("УниверсальныйПередаточныйДокумент");
	КомандыИсключения.Добавить("УниверсальныйПередаточныйДокументФаксимиле");
	КомандыИсключения.Добавить("УниверсальныйКорректировочныйДокумент");
	КомандыИсключения.Добавить("ПечатьЭтикетокИзСборкиЗапасов");
	КомандыИсключения.Добавить("ТН");
	
	Возврат КомандыИсключения.Найти(ОписаниеКомандыПечати[КолонкаИдентификаторКоманды]) = Неопределено;
	
КонецФункции

// Возвращает номер документа для печати.
//
// Параметры:
//  НомерДокумента - Строка - номер документа,
//  Префикс - Строка - префикс, который будет удален из номера документа.
// Возвращаемое значение:
//  Строка - номер документа для печати.
Функция НомерНаПечать(НомерДокумента, Префикс) Экспорт

	Если Не ЗначениеЗаполнено(НомерДокумента) Тогда
		Возврат 0;
	КонецЕсли;

	Номер = СокрЛП(НомерДокумента);
	
	// удаление префикса из номера документа
	Если СтрНайти(Номер, Префикс) = 1 Тогда
		Номер = Сред(Номер, СтрДлина(Префикс) + 1);
	КонецЕсли;

	ПрефиксОбмен = "";

	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") И ЗначениеЗаполнено(
		Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить()) Тогда
		ПрефиксОбмен = СокрЛП(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить());
	КонецЕсли;
	
	// удаление префикса из номера документа
	Если СтрНайти(Номер, ПрефиксОбмен) = 1 Тогда
		Номер = Сред(Номер, СтрДлина(ПрефиксОбмен) + 1);
	КонецЕсли;
	
	// так же, может остаться "минус" впереди
	Если Лев(Номер, 1) = "-" Тогда
		Номер = Сред(Номер, 2);
	КонецЕсли;
	
	// удаление ведущих нулей
	Пока Лев(Номер, 1) = "0" Цикл
		Номер = Сред(Номер, 2);
	КонецЦикла;

	Возврат Номер;

КонецФункции

// Возвращает представление организации.
//
// Параметры: 
//  СведенияОЮрФизЛице - см. СведенияОЮрФизЛице
//  ПоляПредставления - Строка - поля представления, перечисленные через запятую,
//  СПрефиксом - Булево - признак вывода префикса параметра организации.
//
// Возвращаемое значение:
//  Строка - представление организации для печати.
//
Функция ОписаниеОрганизации(СведенияОЮрФизЛице, ПоляПредставления = "", СПрефиксом = Истина) Экспорт

	Если ПустаяСтрока(ПоляПредставления) Тогда
		ПоляПредставления = "ПолноеНаименование,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,Факс,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли; 

	КомпонентыПредставления = Новый Массив;

	ПрефиксыПолей = Новый Соответствие();
	ПрефиксыПолей["ПолноеНаименование"] = " ";
	ПрефиксыПолей["ИНН"] = СтрШаблон(" %1 ", НСтр("ru = 'ИНН'"));
	ПрефиксыПолей["КПП"] = СтрШаблон(" %1 ", НСтр("ru = 'КПП'"));
	ПрефиксыПолей["РегистрационныйНомер"] = " ";
	ПрефиксыПолей["Свидетельство"] = " ";
	ПрефиксыПолей["СвидетельствоДатаВыдачи"] = СтрШаблон(" %1 ", НСтр("ru = 'от'"));
	ПрефиксыПолей["ЮридическийАдрес"] = " ";
	ПрефиксыПолей["ПочтовыйАдрес"] = " ";
	ПрефиксыПолей["Телефоны"] = СтрШаблон(" %1 ", НСтр("ru = 'тел.:'"));
	ПрефиксыПолей["Факс"] = СтрШаблон(" %1 ", НСтр("ru = 'факс:'"));
	ПрефиксыПолей["НомерСчета"] = СтрШаблон(" %1 ", НСтр("ru = 'р/с'"));
	ПрефиксыПолей["Банк"] = СтрШаблон(" %1 ", НСтр("ru = 'в банке'"));
	ПрефиксыПолей["БИК"] = СтрШаблон(" %1 ", НСтр("ru = 'БИК'"));
	ПрефиксыПолей["КоррСчет"] = СтрШаблон(" %1 ", НСтр("ru = 'к/с'"));
	ПрефиксыПолей["КодПоОКПО"] = СтрШаблон(" %1 ", НСтр("ru = 'Код по ОКПО'"));
	ПрефиксыПолей["Грузополучатель"] = СтрШаблон(" %1 ", НСтр("ru = 'грузополучатель:'"));
	ПрефиксыПолей["АдресДоставки"] = СтрШаблон(" %1 ", НСтр("ru = 'доставка:'"));

	Для Каждого ТекПараметр Из СтрРазделить(ПоляПредставления, ", ", Ложь) Цикл

		Попытка
			ТекПредставление = "";
			СведенияОЮрФизЛице.Свойство(ТекПараметр, ТекПредставление);
			
			Если ТипЗнч(ТекПредставление) = Тип("СправочникСсылка.Банки") Тогда
				ТекПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекПредставление, "Наименование");
			КонецЕсли;
			
			Если ПустаяСтрока(ТекПредставление) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СПрефиксом Тогда
				КомпонентыПредставления.Добавить(СтрШаблон("%1%2", ПрефиксыПолей[ТекПараметр], ТекПредставление));
			Иначе
				КомпонентыПредставления.Добавить(ТекПредставление)
			КонецЕсли;
			
		Исключение
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось определить значение параметра организации: %1'"),
				ТекПараметр);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
			
	КонецЦикла;

	Возврат СтрСоединить(КомпонентыПредставления, ", ");

КонецФункции

// Возвращает сведения об указанном ЮрФизЛице.
// К сведениям относятся наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо - СправочникСсылка.Организации - организация, о которой собираются сведения,
//            - СправочникСсылка.Контрагенты - контрагент, о котором собираются сведения,
//            - СправочникСсылка.СтруктурныеЕдиницы - структурная единица, о которой собираются сведения,
//  ДатаПериода - Дата - дата, на которую выбираются сведения о ЮрФизЛице,
//  ДляФизЛицаТолькоИнициалы - Булево - Для физ. лица выводить только инициалы имени и отчества,
//  БанковскийСчет - СправочникСсылка.БанковскиеСчета - банковский счет.
//
// Возвращаемое значение:
//  Структура - См. ПечатьДокументовУНФ.НовыеСведенияОЮрФизЛице
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина, БанковскийСчет = Неопределено) Экспорт
	
	Результат = НовыеСведенияОЮрФизЛице();
	
	Если Не ПодходящийТипДляСбораСведенийОЮрФизЛице(ЮрФизЛицо) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		
		ТекБанковскийСчет = БанковскийСчет;
		
	Иначе
		
		ТекБанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
		
		ДопустимыеТипы = Новый Массив;
		ДопустимыеТипы.Добавить(Тип("СправочникСсылка.Организации"));
		ДопустимыеТипы.Добавить(Тип("СправочникСсылка.Контрагенты"));
		
		Если ДопустимыеТипы.Найти(ТипЗнч(ЮрФизЛицо)) <> Неопределено Тогда
			
			ТекБанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "БанковскийСчетПоУмолчанию",
				Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЮрФизЛицоМетаданные = ЮрФизЛицо.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарЮрФизЛицо", ЮрФизЛицо);
	Запрос.УстановитьПараметр("ПарБанковскийСчет", ТекБанковскийСчет);
	Запрос.Текст = НовыйТекстЗапросаСведенийОЮрФизЛице(Запрос, ЮрФизЛицоМетаданные.Имя, ТекБанковскийСчет);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Результат.КодПоОКПО = Выборка.КодПоОКПО;
	СтрокаШаблона = НСтр("ru='Свидетельство %1 от %2'");
	Если ЗначениеЗаполнено(Выборка.СвидетельствоСерияНомер)
		Или ЗначениеЗаполнено(Выборка.СвидетельствоДатаВыдачи) Тогда
		Результат.Свидетельство = СтрШаблон(СтрокаШаблона, СокрЛП(Выборка.СвидетельствоСерияНомер),
			Формат(Выборка.СвидетельствоДатаВыдачи, "ДЛФ=D"));
	КонецЕсли;
	Результат.СвидетельствоСерияНомер = Выборка.СвидетельствоСерияНомер;
	Результат.СвидетельствоДатаВыдачи = Выборка.СвидетельствоДатаВыдачи;
	Результат.КодПоОКПО = Выборка.КодПоОКПО;
	Результат.КПП = КППЮрФизЛицаНаДату(ЮрФизЛицо, Результат.КПП, ДатаПериода);
	Результат.ПолноеНаименование = ПолноеНаименованиеЮрФизЛицаНаДату(ЮрФизЛицо,
		Выборка.ПолноеНаименование,
		ДатаПериода);
	
	ВидыКонтактнойИнформации = ВидыКонтактнойИнформации(ЮрФизЛицо);
		
	Результат.Представление = НаименованиеЮрФизЛицаНаДату(ЮрФизЛицо, Выборка.Наименование, ДатаПериода);
	Результат.ИНН = Выборка.ИНН;
	Результат.Телефоны = КонтактнаяИнформация(ЮрФизЛицо, ВидыКонтактнойИнформации.Телефон, ДатаПериода);
	Результат.Факс = КонтактнаяИнформация(ЮрФизЛицо, ВидыКонтактнойИнформации.Факс, ДатаПериода);
	Результат.НомерСчета = Выборка.НомерСчета;
	Результат.Банк = Выборка.Банк;
	Результат.БИК = Выборка.БИК;
	Результат.АдресБанка = Выборка.АдресБанка;
	Результат.КоррСчет = Выборка.КоррСчет;
	Результат.ТекстКорреспондента = Выборка.ТекстКорреспондента;
	Результат.ЮридическийАдрес = КонтактнаяИнформация(ЮрФизЛицо, ВидыКонтактнойИнформации.ЮрАдрес, ДатаПериода);
	Результат.ФактическийАдрес = КонтактнаяИнформация(ЮрФизЛицо, ВидыКонтактнойИнформации.ФактАдрес, ДатаПериода);
	Результат.ПочтовыйАдрес = КонтактнаяИнформация(ЮрФизЛицо, ВидыКонтактнойИнформации.ПочтАдрес, ДатаПериода);
	Результат.ЭлектроннаяПочта = КонтактнаяИнформация(ЮрФизЛицо, ВидыКонтактнойИнформации.ЭлПочта, ДатаПериода);
	Результат.СтранаРегистрации = Выборка.СтранаРегистрации;
	Результат.ВидКонтрагента = Выборка.ВидКонтрагента;
	Если ЗначениеЗаполнено(Выборка.СтранаРегистрации) 
		И Выборка.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		Результат.РегистрационныйНомер = Выборка.РегистрационныйНомер;
	//<ЬЬ зил 2021-12-09 17:52:41 #заявка:~~~
	Иначе
		Результат.ОГРН = Выборка.РегистрационныйНомер;
	//ЬЬ зил 2021-12-09 17:52:41 #заявка:~~~ >
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.ПолноеНаименование) Тогда
		Результат.ПолноеНаименование = Результат.Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция находит актуальное значение адреса в контактной информации.
//
// Параметры:
//  ОбъектКонтактнойИнформации - СправочникСсылка - объект контактной информации,
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации,
//  ДатаПериода - Дата - Дата действия контактной информации.
//
// Возвращаемое значение:
//  Строка - представление найденного адреса.
Функция КонтактнаяИнформация(ОбъектКонтактнойИнформации, ВидКонтактнойИнформации, ДатаПериода = Неопределено) Экспорт
	
	ДатаПечатиКИ = ДатаПериода;
	
	Если Не ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ДатаПечатиКИ = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ДатаПечатиКИ) Тогда
		ДатаПечатиКИ = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ОбъектКонтактнойИнформации, 
		ВидКонтактнойИнформации,
		ДатаПечатиКИ,
		Истина);
	
КонецФункции

Процедура ДобавитьСуммовыеПоляЭквивалентовВНациональнойВалюте(ДанныеДокументов, ИспользуемыеТЧ) Экспорт
	
	НеобходимПересчет = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	
	Для каждого ДанныеОбъекта Из ДанныеДокументов Цикл
		
		НеобходимПересчет = НеобходимПересчет И (НациональнаяВалюта <> ДанныеОбъекта.ВалютаДокумента);
		
		Для каждого ОписаниеТЧ Из ИспользуемыеТЧ Цикл
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("Ссылка", ДанныеОбъекта.Ссылка);
			ПараметрыЗапроса.Вставить("КурсДокумента", ?(НеобходимПересчет, ДанныеОбъекта.Курс, 1));
			ПараметрыЗапроса.Вставить("КратностьДокумента", ?(НеобходимПересчет, ДанныеОбъекта.Кратность, 1));
			
			ДанныеОбъекта[ОписаниеТЧ.Ключ] = ДобавитьСуммовыеПоля(ПараметрыЗапроса, ДанныеОбъекта[ОписаниеТЧ.Ключ],
				ОписаниеТЧ.Значение);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает представление количества прописью.
//
// Параметры:
//  Количество - Число - число, которое требуется форматировать.
//
// Возвращаемое значение:
//  Строка - представление количества прописью.
Функция КоличествоПрописью(Количество) Экспорт

	ЦелаяЧасть = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = НСтр("ru = 'целая, целых, целых, ж, десятая, десятых, десятых, м, 1'");
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = НСтр("ru = 'целая, целых, целых, ж, сотая, сотых, сотых, м, 2'");
	Иначе
		ПараметрыПрописи = НСтр("ru = 'целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3'");
	КонецЕсли;

	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);

КонецФункции

// Возвращает представление суммы прописью.
//
// Параметры: 
//  Сумма - Число - число, которое требуется форматировать 
//  Валюта - СправочникСсылка.Валюты - ссылка на элемент справочника валют, если задан, то в результирующую строку будет добавлено представление валюты,
//  ЧН - Строка - строка, представляющая нулевое значение числа,
//  ЧРГ - Строка - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Строка - Отформатированная должным образом строковое представление суммы.
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт

	КомпонентыФорматнойСтроки = Новый Массив;
	КомпонентыФорматнойСтроки.Добавить("ЧЦ=15");
	КомпонентыФорматнойСтроки.Добавить("ЧДЦ=2");
	
	Если ЗначениеЗаполнено(ЧН) Тогда
		КомпонентыФорматнойСтроки.Добавить(СтрШаблон("ЧН=%1", ЧН));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧРГ) Тогда
		КомпонентыФорматнойСтроки.Добавить(СтрШаблон("ЧРГ=%1", ЧРГ));
	КонецЕсли;
	
	ФорматнаяСтрока = СтрСоединить(КомпонентыФорматнойСтроки, ";");
	
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = СтрШаблон("%1 %2", РезультирующаяСтрока, СокрП(Валюта));
	КонецЕсли;
	
	Возврат РезультирующаяСтрока;
	
КонецФункции

// Функция формирует представление суммы прописью в указанной валюте.
//
// Параметры:
//  Сумма - Число - .
//  Валюта - СправочникСсылка.Валюты - .
// 
// Возвращаемое значение:
//  Строка - сумма прописью.
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт

	Если Валюта.ПараметрыПрописи = "" Тогда
		Возврат ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, , Валюта.ПараметрыПрописи);
	КонецЕсли;

КонецФункции

// Форматирует сумму банковского платежного документа.
//
// Параметры:
//  Сумма - Число - реквизит, который надо отформатировать,
//  ВыводитьСуммуБезКопеек - Булево - флаг представления суммы без копеек.
//
// Возвращаемое значение:
//  Строка - отформатированная строка.
Функция ФорматироватьСуммуПлатежногоДокумента(Сумма, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Результат  = Сумма;
	ЦелаяЧасть = Цел(Сумма);
	
	Если Результат = ЦелаяЧасть Тогда
		Если ВыводитьСуммуБезКопеек Тогда
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат, СтрНайти(Результат, "="));
		Иначе
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Форматирует сумму прописью банковского платежного документа.
//
// Параметры:
//  Сумма - Число - реквизит, который надо представить прописью, 
//  Валюта - СправочникСсылка.Валюты - валюта, в которой нужно представить сумму,
//  ВыводитьСуммуБезКопеек - Булево - флаг представления суммы без копеек.
//
// Возвращаемое значение:
//  Строка - отформатированная строка.
Функция ФорматироватьСуммуПрописьюПлатежногоДокумента(Сумма, Валюта, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Результат     = Сумма;
	ЦелаяЧасть    = Цел(Сумма);
	ФорматСтрока  = "ДП=Ложь";
	ПарамПредмета = Валюта.ПараметрыПрописи;
	
	Если Результат = ЦелаяЧасть Тогда
		Если ВыводитьСуммуБезКопеек Тогда
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
			Результат = Лев(Результат, СтрНайти(Результат, "0") - 1);
		Иначе
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет возможность печати универсального корректировочного документа.
// 
// Параметры:
// 	ПараметрКоманды - Массив - печатаемые документы
// 	Ошибки - Массив - массив ошибок
Процедура ПроверитьВозможностьПечатиУКД(ПараметрКоманды, Ошибки) Экспорт
	
	Счетчик = 0;
	
	Пока Счетчик <= ПараметрКоманды.Количество()-1 Цикл
		
		ДокументСсылка = ПараметрКоманды[Счетчик];
		
		Если ДокументСсылка.Дата < Дата('20130101') Тогда 
			
			ТекстСообщения = НСтр("ru = '__________________
										|Печать универсального корректировочного документа доступна c 1 января 2013. 
										|Для документа %1 печатная форма не сформирована.'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументСсылка);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
			ПараметрКоманды.Удалить(Счетчик);
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ДокументСсылка.Контрагент) Тогда 
			
			ТекстСообщения = НСтр("ru = '__________________
										|Для печати универсального корректировочного документа необходимо заполнить контрагента. 
										|Для документа %1 печатная форма не сформирована.'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументСсылка);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
			ПараметрКоманды.Удалить(Счетчик);
			
		Иначе
			
			Счетчик = Счетчик + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция подготовки данных для печати этикетов и ценников.
//
// Параметры:
//  МассивДокументов - Массив - .
//  ЭтоЦенники		 - Булево - .
// 
// Возвращаемое значение:
//   Строка - адрес структуры данных во временном хранилище.
//
Функция ПодготовитьСтруктуруДанныхПечатиЭтикетокИЦенниковИзДокументов(МассивДокументов, ЭтоЦенники) Экспорт
	
	// АПК:96 -выкл результат должен содержать уникальные значения
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Характеристика КАК Характеристика,
	|	ПоступлениеТоваровУслугТовары.Партия КАК Партия,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Организация КАК Организация
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Характеристика,
	|	ПоступлениеТоваровУслугТовары.Партия,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Номенклатура,
	|	РасходнаяНакладнаяЗапасы.Характеристика,
	|	РасходнаяНакладнаяЗапасы.Партия,
	|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
	|	СУММА(РасходнаяНакладнаяЗапасы.Количество),
	|	РасходнаяНакладнаяЗапасы.Ссылка.Организация
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходнаяНакладнаяЗапасы.Номенклатура,
	|	РасходнаяНакладнаяЗапасы.Характеристика,
	|	РасходнаяНакладнаяЗапасы.Партия,
	|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Номенклатура,
	|	ЗаказПокупателя.Характеристика,
	|	ЗаказПокупателя.Партия,
	|	ЗаказПокупателя.ЕдиницаИзмерения,
	|	СУММА(ЗаказПокупателя.Количество),
	|	ЗаказПокупателя.Ссылка.Организация
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателя.Номенклатура,
	|	ЗаказПокупателя.Характеристика,
	|	ЗаказПокупателя.Партия,
	|	ЗаказПокупателя.ЕдиницаИзмерения,
	|	ЗаказПокупателя.Ссылка.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаПроизводствоПродукция.Номенклатура,
	|	ЗаказНаПроизводствоПродукция.Характеристика,
	|	ЗаказНаПроизводствоПродукция.Партия,
	|	ЗаказНаПроизводствоПродукция.ЕдиницаИзмерения,
	|	СУММА(ЗаказНаПроизводствоПродукция.Количество),
	|	ЗаказНаПроизводствоПродукция.Ссылка.Организация
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|ГДЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНаПроизводствоПродукция.Номенклатура,
	|	ЗаказНаПроизводствоПродукция.Характеристика,
	|	ЗаказНаПроизводствоПродукция.Партия,
	|	ЗаказНаПроизводствоПродукция.ЕдиницаИзмерения,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеЗапасовЗапасы.Номенклатура,
	|	ПеремещениеЗапасовЗапасы.Характеристика,
	|	ПеремещениеЗапасовЗапасы.Партия,
	|	ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения,
	|	СУММА(ПеремещениеЗапасовЗапасы.Количество),
	|	ПеремещениеЗапасовЗапасы.Ссылка.Организация
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
	|ГДЕ
	|	ПеремещениеЗапасовЗапасы.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеЗапасовЗапасы.Номенклатура,
	|	ПеремещениеЗапасовЗапасы.Характеристика,
	|	ПеремещениеЗапасовЗапасы.Партия,
	|	ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения,
	|	ПеремещениеЗапасовЗапасы.Ссылка.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОприходованиеЗапасовЗапасы.Номенклатура,
	|	ОприходованиеЗапасовЗапасы.Характеристика,
	|	ОприходованиеЗапасовЗапасы.Партия,
	|	ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения,
	|	СУММА(ОприходованиеЗапасовЗапасы.Количество),
	|	ОприходованиеЗапасовЗапасы.Ссылка.Организация
	|ИЗ
	|	Документ.ОприходованиеЗапасов.Запасы КАК ОприходованиеЗапасовЗапасы
	|ГДЕ
	|	ОприходованиеЗапасовЗапасы.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОприходованиеЗапасовЗапасы.Номенклатура,
	|	ОприходованиеЗапасовЗапасы.Характеристика,
	|	ОприходованиеЗапасовЗапасы.Партия,
	|	ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения,
	|	ОприходованиеЗапасовЗапасы.Ссылка.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СборкаЗапасовПродукция.Номенклатура,
	|	СборкаЗапасовПродукция.Характеристика,
	|	СборкаЗапасовПродукция.Партия,
	|	СборкаЗапасовПродукция.ЕдиницаИзмерения,
	|	СУММА(СборкаЗапасовПродукция.Количество),
	|	СборкаЗапасовПродукция.Ссылка.Организация
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
	|ГДЕ
	|	СборкаЗапасовПродукция.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	СборкаЗапасовПродукция.Номенклатура,
	|	СборкаЗапасовПродукция.Характеристика,
	|	СборкаЗапасовПродукция.Партия,
	|	СборкаЗапасовПродукция.ЕдиницаИзмерения,
	|	СборкаЗапасовПродукция.Ссылка.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсходныеДанные.Номенклатура,
	|	ИсходныеДанные.Характеристика,
	|	ИсходныеДанные.Партия,
	|	ИсходныеДанные.ЕдиницаИзмерения,
	|	1,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсходныеДанныеБезПартий.Номенклатура КАК Номенклатура,
	|		ИсходныеДанныеБезПартий.Характеристика КАК Характеристика,
	|		ИсходныеДанныеБезПартий.Партия КАК Партия,
	|		ИсходныеДанныеБезПартий.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НоменклатураБезХарактеристик.Ссылка КАК Номенклатура,
	|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|			ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
	|			ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения
	|		ИЗ
	|			Справочник.Номенклатура КАК НоменклатураБезХарактеристик
	|		ГДЕ
	|			НоменклатураБезХарактеристик.Ссылка В(&МассивДокументов)
	|			И НЕ НоменклатураБезХарактеристик.ЭтоГруппа
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			НоменклатураСоСвоейХарактеристикой.Ссылка,
	|			ХарактеристикиНоменклатуры.Ссылка,
	|			ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка),
	|			ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|		ИЗ
	|			Справочник.Номенклатура КАК НоменклатураСоСвоейХарактеристикой
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|				ПО (ХарактеристикиНоменклатуры.Владелец = НоменклатураСоСвоейХарактеристикой.Ссылка)
	|		ГДЕ
	|			НоменклатураСоСвоейХарактеристикой.Ссылка В(&МассивДокументов)
	|			И НЕ НоменклатураСоСвоейХарактеристикой.ЭтоГруппа
	|			И НоменклатураСоСвоейХарактеристикой.ИспользоватьХарактеристики
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			НоменклатураСХарактеристикойКатегории.Ссылка,
	|			ХарактеристикиНоменклатуры.Ссылка,
	|			ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка),
	|			ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|		ИЗ
	|			Справочник.Номенклатура КАК НоменклатураСХарактеристикойКатегории
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|				ПО (ХарактеристикиНоменклатуры.Владелец = НоменклатураСХарактеристикойКатегории.КатегорияНоменклатуры)
	|		ГДЕ
	|			НоменклатураСХарактеристикойКатегории.Ссылка В(&МассивДокументов)
	|			И НЕ НоменклатураСХарактеристикойКатегории.ЭтоГруппа
	|			И ЕСТЬNULL(НоменклатураСХарактеристикойКатегории.ИспользоватьХарактеристики, ЛОЖЬ)) КАК ИсходныеДанныеБезПартий
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ИсходныеДанныеСПартиями.Номенклатура,
	|		ИсходныеДанныеСПартиями.Характеристика,
	|		Партии.Ссылка,
	|		ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НоменклатураБезХарактеристик.Ссылка КАК Номенклатура,
	|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|			ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия
	|		ИЗ
	|			Справочник.Номенклатура КАК НоменклатураБезХарактеристик
	|		ГДЕ
	|			НоменклатураБезХарактеристик.Ссылка В(&МассивДокументов)
	|			И НЕ НоменклатураБезХарактеристик.ЭтоГруппа
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			НоменклатураСоСвоейХарактеристикой.Ссылка,
	|			ХарактеристикиНоменклатуры.Ссылка,
	|			ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|		ИЗ
	|			Справочник.Номенклатура КАК НоменклатураСоСвоейХарактеристикой
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|				ПО (ХарактеристикиНоменклатуры.Владелец = НоменклатураСоСвоейХарактеристикой.Ссылка)
	|		ГДЕ
	|			НоменклатураСоСвоейХарактеристикой.Ссылка В(&МассивДокументов)
	|			И НЕ НоменклатураСоСвоейХарактеристикой.ЭтоГруппа
	|			И НоменклатураСоСвоейХарактеристикой.ИспользоватьХарактеристики
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			НоменклатураСХарактеристикойКатегории.Ссылка,
	|			ХарактеристикиНоменклатуры.Ссылка,
	|			ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|		ИЗ
	|			Справочник.Номенклатура КАК НоменклатураСХарактеристикойКатегории
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|				ПО (ХарактеристикиНоменклатуры.Владелец = НоменклатураСХарактеристикойКатегории.КатегорияНоменклатуры)
	|		ГДЕ
	|			НоменклатураСХарактеристикойКатегории.Ссылка В(&МассивДокументов)
	|			И НЕ НоменклатураСХарактеристикойКатегории.ЭтоГруппа
	|			И ЕСТЬNULL(НоменклатураСХарактеристикойКатегории.ИспользоватьХарактеристики, ЛОЖЬ)) КАК ИсходныеДанныеСПартиями
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПартииНоменклатуры КАК Партии
	|			ПО ИсходныеДанныеСПартиями.Номенклатура = Партии.Владелец) КАК ИсходныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходныеДанные.Номенклатура,
	|	ИсходныеДанные.Характеристика,
	|	ИсходныеДанные.Партия,
	|	ИсходныеДанные.ЕдиницаИзмерения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УстановкаЦенНоменклатурыЗапасы.Номенклатура,
	|	УстановкаЦенНоменклатурыЗапасы.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка),
	|	УстановкаЦенНоменклатурыЗапасы.ЕдиницаИзмерения,
	|	1,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Запасы КАК УстановкаЦенНоменклатурыЗапасы
	|ГДЕ
	|	УстановкаЦенНоменклатурыЗапасы.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	УстановкаЦенНоменклатурыЗапасы.Номенклатура,
	|	УстановкаЦенНоменклатурыЗапасы.Характеристика,
	|	УстановкаЦенНоменклатурыЗапасы.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслуг.Организация КАК Организация,
	|	ПоступлениеТоваровУслуг.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПоступлениеТоваровУслуг.СтруктурнаяЕдиница.РозничныйВидЦен КАК ВидЦен
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходнаяНакладная.Организация,
	|	РасходнаяНакладная.СтруктурнаяЕдиница,
	|	РасходнаяНакладная.СтруктурнаяЕдиница.РозничныйВидЦен
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаПроизводство.Организация,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиница,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиница.РозничныйВидЦен
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремещениеЗапасов.Организация,
	|	ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель,
	|	ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель.РозничныйВидЦен
	|ИЗ
	|	Документ.ПеремещениеЗапасов КАК ПеремещениеЗапасов
	|ГДЕ
	|	ПеремещениеЗапасов.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОприходованиеЗапасов.Организация,
	|	ОприходованиеЗапасов.СтруктурнаяЕдиница,
	|	ОприходованиеЗапасов.ВидЦен
	|ИЗ
	|	Документ.ОприходованиеЗапасов КАК ОприходованиеЗапасов
	|ГДЕ
	|	ОприходованиеЗапасов.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПокупателя.Организация,
	|	ЗаказПокупателя.СтруктурнаяЕдиницаПродажи,
	|	ЗаказПокупателя.ВидЦен
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СборкаЗапасов.Организация,
	|	СборкаЗапасов.СтруктурнаяЕдиницаПродукции,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|ИЗ
	|	Документ.СборкаЗапасов КАК СборкаЗапасов
	|ГДЕ
	|	СборкаЗапасов.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка),
	|	УстановкаЦенНоменклатурыЗапасы.ВидЦены
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Запасы КАК УстановкаЦенНоменклатурыЗапасы
	|ГДЕ
	|	УстановкаЦенНоменклатурыЗапасы.Ссылка В(&МассивДокументов)");
	
	// АПК:96 -вкл
	
	ИсключитьНедоступнуюТаблицуИзТекстаЗапроса(Запрос, "ЗаказНаПроизводство");
	ИсключитьНедоступнуюТаблицуИзТекстаЗапроса(Запрос, "СборкаЗапасов");
	ИсключитьНедоступнуюТаблицуИзТекстаЗапроса(Запрос, "ПеремещениеЗапасов");
	ИсключитьНедоступнуюТаблицуИзТекстаЗапроса(Запрос, "ОприходованиеЗапасов");
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов	= МассивРезультатов[1].Выгрузить();
	МассивОрганизаций			= Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивСкладов				= Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СтруктурнаяЕдиница").ВыгрузитьКолонку(0);
	МассивВидовЦен				= Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ВидЦен").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати этикеток и ценников
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1,МассивОрганизаций[0],
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация")));
	СтруктураДействий.Вставить("ЗаполнитьСклад", ?(МассивСкладов.Количество() = 1,МассивСкладов[0], МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦен", ?(МассивВидовЦен.Количество() = 1,МассивВидовЦен[0],
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойВидЦенПродажи")));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	Если ЭтоЦенники Тогда
		
		СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
		СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
		
	Иначе
		
		СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
		СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
		
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполнения табличной части обработки печати этикеток и ценников
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Запасы", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции // ПодготовитьСтруктуруДанныхПечатиЭтикетокИЦенниковИзДокументов()

// Возвращает список макетов для печати счетов-фактур, перечисленных через запятую.
// 
// Параметры:
// 	СчетаФактуры - Массив - счета-фактуры, для которых следует получить список макетов.
// Возвращаемое значение:
// 	Строка - список макетов для печати счетов-фактур, перечисленных через запятую.
Функция СписокМакетовСчетовФактур(СчетаФактуры) Экспорт
	
	СписокМакетов = "";
	ЕстьСчетФактура = Ложь;
	ЕстьКорректировочныйСчетФактура = Ложь;
	
	Для Каждого Объект Из СчетаФактуры Цикл
		
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.СчетФактура") Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Корректировка Тогда
				Если НЕ ЕстьКорректировочныйСчетФактура Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактураКорректировочный", ",СчетФактураКорректировочный");
					ЕстьКорректировочныйСчетФактура = Истина;
				КонецЕсли;
				
			Иначе
				Если НЕ ЕстьСчетФактура Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактура", ",СчетФактура");
					ЕстьСчетФактура = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
				Если НЕ ЕстьКорректировочныйСчетФактура Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактураКорректировочный", ",СчетФактураКорректировочный");
					ЕстьКорректировочныйСчетФактура = Истина;
				КонецЕсли;
				
			Иначе
				Если НЕ ЕстьСчетФактура Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактура", ",СчетФактура");
					ЕстьСчетФактура = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокМакетов;
	
КонецФункции

// Возвращает ссылку на Организацию, указанную в первом документе параметра команды.
//
// Параметры:
//  ПараметрКоманды	 - Массив Из ДокументСсылка - массив ссылок на документы для печати.
// 
// Возвращаемое значение:
//  СправочникСсылка.Организации - организация, для которой вызывается печатная форма.
//  В случае если печать вызывается для форм разных организаций - возвращается пустая ссылка.
Функция ОрганизацияИзПараметраКоманды(ПараметрКоманды) Экспорт
	
	Результат = Справочники.Организации.ПустаяСсылка();
	
	Если ТипЗнч(ПараметрКоманды) <> Тип("Массив") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрКоманды) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ТекПараметр Из ПараметрКоманды Цикл
		
		Если ТипЗнч(ПараметрКоманды[0]) <> ТипЗнч(ТекПараметр) Тогда
			Возврат Результат;
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ТекПараметр) Тогда
			Возврат Результат;
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", ТекПараметр.Метаданные()) Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначенияРеквизитаОбъектов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПараметрКоманды, "Организация");
	
	Для Каждого КлючИЗначение Из ЗначенияРеквизитаОбъектов Цикл
		Если Не ЗначениеЗаполнено(Результат) Тогда
			Результат = КлючИЗначение.Значение;
		КонецЕсли;
		Если Результат <> КлючИЗначение.Значение Тогда
			Возврат Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КППЮрФизЛицаНаДату(ЮрФизЛицо, ТекущееКПП, ДатаПериода);
	
	Если НЕ ХранитьИсториюИзмененийОбъекта(ЮрФизЛицо) Тогда
		Возврат ТекущееКПП;
	КонецЕсли;
	
	МодульМенеджераВладельцаКПП = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЮрФизЛицо);
	Возврат МодульМенеджераВладельцаКПП.КППНаДату(ЮрФизЛицо, ДатаПериода);
	
КонецФункции

Функция ПолноеНаименованиеЮрФизЛицаНаДату(ЮрФизЛицо, ТекущееНаименование, ДатаПериода);
	
	Если НЕ ХранитьИсториюИзмененийОбъекта(ЮрФизЛицо) Тогда
		Возврат ТекущееНаименование;
	КонецЕсли;
	
	МодульМенеджераВладельцаНаименования = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЮрФизЛицо);
	Возврат МодульМенеджераВладельцаНаименования.ПолноеНаименованиеНаДату(ЮрФизЛицо, ДатаПериода);
	
КонецФункции

Функция НаименованиеЮрФизЛицаНаДату(ЮрФизЛицо, ТекущееНаименование, ДатаПериода);
	
	Если НЕ ХранитьИсториюИзмененийОбъекта(ЮрФизЛицо) Тогда
		Возврат ТекущееНаименование;
	КонецЕсли;
	
	НаименованиеНаДату = Справочники.Организации.НаименованиеНаДату(ЮрФизЛицо, ДатаПериода);
	
	Если НЕ ЗначениеЗаполнено(НаименованиеНаДату) Тогда
		Возврат ТекущееНаименование;
	КонецЕсли;
	
	Возврат НаименованиеНаДату;
	
КонецФункции

Функция ХранитьИсториюИзмененийОбъекта(ЮрФизЛицо)
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") 
			ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция НовыеСведенияОЮрФизЛице()
	Результат = Новый Структура;
	Результат.Вставить("Представление", "");
	Результат.Вставить("ПолноеНаименование", "");
	Результат.Вставить("КодПоОКПО", "");
	Результат.Вставить("ИНН", "");
	Результат.Вставить("КПП", "");
	Результат.Вставить("Свидетельство", "");
	Результат.Вставить("СвидетельствоСерияНомер", "");
	Результат.Вставить("СвидетельствоДатаВыдачи", "");
	Результат.Вставить("Телефоны", "");
	Результат.Вставить("Факс", "");
	Результат.Вставить("ПочтовыйАдрес", "");
	Результат.Вставить("ЮридическийАдрес", "");
	Результат.Вставить("ФактическийАдрес", "");
	Результат.Вставить("Банк", "");
	Результат.Вставить("БИК", "");
	Результат.Вставить("КоррСчет", "");
	Результат.Вставить("ТекстКорреспондента", "");
	Результат.Вставить("НомерСчета", "");
	Результат.Вставить("АдресБанка", "");
	Результат.Вставить("ЭлектроннаяПочта", "");
	Результат.Вставить("СтранаРегистрации", "");
	Результат.Вставить("РегистрационныйНомер", "");
	Результат.Вставить("ВидКонтрагента", "");
	//<ЬЬ зил 2021-12-09 17:51:45 #заявка:~~~
	Результат.Вставить("ОГРН", "");
	//ЬЬ зил 2021-12-09 17:51:45 #заявка:~~~ >
	Возврат Результат;
КонецФункции

Функция ПодходящийТипДляСбораСведенийОЮрФизЛице(ЮрФизЛицо)

	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		Возврат Истина;
	КонецЕсли;

	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат Истина;
	КонецЕсли;

	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Истина;
	КонецЕсли;

	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

Функция НовыйТекстЗапросаСведенийОЮрФизЛице(Запрос, ИмяСправочника, ТекБанковскийСчет)
	
	Результат = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.Представление КАК Наименование,
	|	Таблица.НаименованиеПолное КАК ПолноеНаименование,
	|	"""" КАК СвидетельствоСерияНомер,
	|	"""" КАК СвидетельствоДатаВыдачи,
	|	"""" КАК ИНН,
	|	"""" КАК КПП,
	|	"""" КАК КодПоОКПО,
	|	"""" КАК РегистрационныйНомер,
	|	"""" КАК СтранаРегистрации,
	|	"""" КАК НомерСчета,
	|	"""" КАК ТекстКорреспондента,
	|	"""" КАК Банк,
	|	"""" КАК БИК,
	|	"""" КАК КоррСчет,
	|	"""" КАК ВидКонтрагента,
	|	"""" КАК АдресБанка
	|ИЗ
	|	&ИмяТаблицы КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &ПарЮрФизЛицо";
	
	Если ИмяСправочника = "Организации" Тогда
		Результат = СтрЗаменить(Результат, """"" КАК СвидетельствоСерияНомер",
			"Таблица.СвидетельствоСерияНомер КАК СвидетельствоСерияНомер");
		Результат = СтрЗаменить(Результат, """"" КАК СвидетельствоДатаВыдачи",
			"Таблица.СвидетельствоДатаВыдачи КАК СвидетельствоДатаВыдачи");
		Результат = СтрЗаменить(Результат, """"" КАК ИНН", "Таблица.ИНН КАК ИНН");
		Результат = СтрЗаменить(Результат, """"" КАК КПП", "Таблица.КПП КАК КПП");
		Результат = СтрЗаменить(Результат, """"" КАК КодПоОКПО", "Таблица.КодПоОКПО КАК КодПоОКПО");
		//<ЬЬ зил 2021-12-09 17:59:43 #заявка:~~~
		Результат = СтрЗаменить(Результат, """"" КАК РегистрационныйНомер",
			"Таблица.ОГРН КАК РегистрационныйНомер");
		//ЬЬ зил 2021-12-09 17:59:43 #заявка:~~~ >
	КонецЕсли;
	
	Если ИмяСправочника = "Контрагенты" Тогда
		Результат = СтрЗаменить(Результат, """"" КАК РегистрационныйНомер",
			"Таблица.РегистрационныйНомер КАК РегистрационныйНомер");
		Результат = СтрЗаменить(Результат, """"" КАК СтранаРегистрации",
			"Таблица.СтранаРегистрации КАК СтранаРегистрации");
		Результат = СтрЗаменить(Результат, """"" КАК ИНН", "Таблица.ИНН КАК ИНН");
		Результат = СтрЗаменить(Результат, """"" КАК КПП", "Таблица.КПП КАК КПП");
		Результат = СтрЗаменить(Результат, """"" КАК КодПоОКПО", "Таблица.КодПоОКПО КАК КодПоОКПО");
		Результат = СтрЗаменить(Результат, """"" КАК ВидКонтрагента",
		"Таблица.ВидКонтрагента КАК ВидКонтрагента");
	КонецЕсли;
	
	ИмяРеквизитаБанка = ИмяРеквизитаБанка(ТекБанковскийСчет);
	
	Если ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
		Результат = СтрЗаменить(Результат, """"" КАК НомерСчета", "БанковскиеСчета.НомерСчета КАК НомерСчета");
		Результат = СтрЗаменить(Результат, """"" КАК ТекстКорреспондента",
			"БанковскиеСчета.ТекстКорреспондента КАК ТекстКорреспондента");
		Результат = СтрЗаменить(Результат, """"" КАК Банк", СтрШаблон("БанковскиеСчета.%1 КАК Банк", ИмяРеквизитаБанка));
		Результат = СтрЗаменить(Результат, """"" КАК БИК", СтрШаблон("БанковскиеСчета.%1.Код КАК БИК", ИмяРеквизитаБанка));
		Результат = СтрЗаменить(Результат, """"" КАК КоррСчет",
			СтрШаблон("БанковскиеСчета.%1.КоррСчет КАК КоррСчет", ИмяРеквизитаБанка));
		Результат = СтрЗаменить(Результат, """"" КАК АдресБанка",
			СтрШаблон("БанковскиеСчета.%1.Адрес КАК АдресБанка", ИмяРеквизитаБанка));
		Результат = СтрЗаменить(Результат, "&ИмяТаблицы КАК Таблица",
			"&ИмяТаблицы КАК Таблица, Справочник.БанковскиеСчета КАК БанковскиеСчета");
		Результат = СтрЗаменить(Результат, "Таблица.Ссылка = &ПарЮрФизЛицо",
			"Таблица.Ссылка = &ПарЮрФизЛицо И БанковскиеСчета.Ссылка = &ПарБанковскийСчет");
	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, "&ИмяТаблицы", СтрШаблон("Справочник.%1", ИмяСправочника));
	
	Возврат Результат;
	
КонецФункции

Функция ВидыКонтактнойИнформации(ЮрФизЛицо)
	
	Результат = НовыеВидыКонтактнойИнформации();
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		Результат.Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		Результат.Факс = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
		Результат.ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		Результат.ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
		Результат.ПочтАдрес = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
		Результат.ЭлПочта = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
		Возврат Результат;
	КонецЕсли;
		
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Результат.Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица;
		Результат.ЮрАдрес = Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке;
		Результат.ФактАдрес = Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке;
		Результат.ЭлПочта = Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица;
		Возврат Результат;
	КонецЕсли;
		
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		Результат.Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		Результат.Факс = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;
		Результат.ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		Результат.ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		Результат.ПочтАдрес = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
		Результат.ЭлПочта = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		Возврат Результат;
	КонецЕсли;
		
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Результат.Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонСтруктурнойЕдиницы;
		Результат.ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы;
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыеВидыКонтактнойИнформации()
	
	Результат = Новый Структура;
	Результат.Вставить("Телефон", Справочники.ВидыКонтактнойИнформации.ПустаяСсылка());
	Результат.Вставить("Факс", Справочники.ВидыКонтактнойИнформации.ПустаяСсылка());
	Результат.Вставить("ЮрАдрес", Справочники.ВидыКонтактнойИнформации.ПустаяСсылка());
	Результат.Вставить("ФактАдрес", Справочники.ВидыКонтактнойИнформации.ПустаяСсылка());
	Результат.Вставить("ПочтАдрес", Справочники.ВидыКонтактнойИнформации.ПустаяСсылка());
	Результат.Вставить("ЭлПочта", Справочники.ВидыКонтактнойИнформации.ПустаяСсылка());
	
	Возврат Результат;
	
КонецФункции

Функция ИмяРеквизитаБанка(ТекБанковскийСчет)
	
	ИмяРеквизитаПоУмолчанию = "Банк";
	
	Если Не ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
		Возврат ИмяРеквизитаПоУмолчанию;
	КонецЕсли;
	
	БанкРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекБанковскийСчет, "БанкРасчетов", Истина);
	Если Не ЗначениеЗаполнено(БанкРасчетов) Тогда
		Возврат ИмяРеквизитаПоУмолчанию;
	КонецЕсли;
	
	Возврат "БанкРасчетов";
	
КонецФункции

Функция ДобавитьСуммовыеПоля(ПараметрыЗапроса, ТабличнаяЧастьДокумента, ЗначениеПеречисленияТабличныеЧастиДокументов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПараметрыЗапроса.Ссылка);
	Запрос.УстановитьПараметр("КурсДокумента", ПараметрыЗапроса.КурсДокумента);
	Запрос.УстановитьПараметр("КратностьДокумента", ПараметрыЗапроса.КратностьДокумента);
	Запрос.УстановитьПараметр("ТабличнаяЧастьДокумента", ТабличнаяЧастьДокумента);
	Запрос.УстановитьПараметр("ЗначениеПеречисленияТабличныеЧастиДокументов", ЗначениеПеречисленияТабличныеЧастиДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабличнаяЧастьДокумента.НомерСтроки КАК НомерСтроки
	|	,ТабличнаяЧастьДокумента.ПредставлениеНоменклатуры
	|	,ТабличнаяЧастьДокумента.Код
	|	,ТабличнаяЧастьДокумента.Артикул
	|	,ТабличнаяЧастьДокумента.Штрихкод
	|	,ТабличнаяЧастьДокумента.ТипНоменклатуры
	|	,ТабличнаяЧастьДокумента.Склад
	|	,ТабличнаяЧастьДокумента.Ячейка
	|	,ТабличнаяЧастьДокумента.Характеристика
	|	,ТабличнаяЧастьДокумента.Партия
	|	,ТабличнаяЧастьДокумента.ЕдиницаИзмерения
	|	,ТабличнаяЧастьДокумента.ЕдиницаИзмеренияПоОКЕИ_Наименование
	|	,ТабличнаяЧастьДокумента.ЕдиницаИзмеренияПоОКЕИ_Код
	|	,ТабличнаяЧастьДокумента.Цена
	|	,ТабличнаяЧастьДокумента.Сумма
	|	,ТабличнаяЧастьДокумента.СтавкаНДС
	|	,ТабличнаяЧастьДокумента.СуммаНДС
	|	,ТабличнаяЧастьДокумента.Всего
	|	,ТабличнаяЧастьДокумента.Количество
	|	,ТабличнаяЧастьДокумента.КоличествоПоКоэффициенту
	|	,ТабличнаяЧастьДокумента.Содержание
	|	,ТабличнаяЧастьДокумента.ПроцентСкидкиНаценки
	|	,ТабличнаяЧастьДокумента.ЕстьСкидка
	|	,ТабличнаяЧастьДокумента.СуммаАвтоматическойСкидки
	|	,ТабличнаяЧастьДокумента.КлючСвязи
	|	,ТабличнаяЧастьДокумента.Заказ
	|	,ТабличнаяЧастьДокумента.ЭтоРазделитель
	|ПОМЕСТИТЬ ТабличнаяЧастьДокумента
	|ИЗ &ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента
	|Индексировать ПО НомерСтроки
	|
	|;Выбрать
	|	СтрокиДокумента.НомерСтроки КАК НомерСтроки
	|	,СтрокиДокумента.ПредставлениеНоменклатуры
	|	,СтрокиДокумента.Код
	|	,СтрокиДокумента.Артикул
	|	,СтрокиДокумента.Штрихкод
	|	,СтрокиДокумента.ТипНоменклатуры
	|	,СтрокиДокумента.Склад
	|	,СтрокиДокумента.Ячейка
	|	,СтрокиДокумента.Характеристика
	|	,СтрокиДокумента.Партия
	|	,СтрокиДокумента.ЕдиницаИзмерения
	|	,СтрокиДокумента.ЕдиницаИзмеренияПоОКЕИ_Наименование
	|	,СтрокиДокумента.ЕдиницаИзмеренияПоОКЕИ_Код
	|	,СтрокиДокумента.Цена
	|	,СтрокиДокумента.Сумма
	|	,СтрокиДокумента.СтавкаНДС
	|	,СтрокиДокумента.СуммаНДС
	|	,ЕстьNULL(СуммыДокументовРегламентированныйУчет.НДС, СтрокиДокумента.СуммаНДС * &КурсДокумента / &КратностьДокумента) КАК СуммаНДСВНациональнойВалюте
	|	,СтрокиДокумента.Всего
	|	,ЕстьNULL(СуммыДокументовРегламентированныйУчет.Всего, СтрокиДокумента.Всего * &КурсДокумента / &КратностьДокумента) КАК ВсегоВНациональнойВалюте
	|	,СтрокиДокумента.Количество
	|	,СтрокиДокумента.КоличествоПоКоэффициенту
	|	,СтрокиДокумента.Содержание
	|	,СтрокиДокумента.ПроцентСкидкиНаценки
	|	,СтрокиДокумента.ЕстьСкидка
	|	,СтрокиДокумента.СуммаАвтоматическойСкидки
	|	,СтрокиДокумента.КлючСвязи
	|	,СтрокиДокумента.Заказ
	|	,СтрокиДокумента.ЭтоРазделитель
	|ИЗ ТабличнаяЧастьДокумента КАК СтрокиДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовРегламентированныйУчет КАК СуммыДокументовРегламентированныйУчет
	|	ПО СуммыДокументовРегламентированныйУчет.Регистратор = &Ссылка
	|		И СуммыДокументовРегламентированныйУчет.ТабличнаяЧастьДокумента = &ЗначениеПеречисленияТабличныеЧастиДокументов
	|		И СтрокиДокумента.НомерСтроки = СуммыДокументовРегламентированныйУчет.НомерСтрокиДокумента
	|УПОРЯДОЧИТЬ ПО НомерСтроки";
	
	// Наборы
	Если ТабличнаяЧастьДокумента.Колонки.Найти("НоменклатураНабора")<>Неопределено Тогда
		Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"ПОМЕСТИТЬ ТабличнаяЧастьДокумента", 
		"	,ТабличнаяЧастьДокумента.НоменклатураНабора
		|	,ТабличнаяЧастьДокумента.ХарактеристикаНабора
		|	,ТабличнаяЧастьДокумента.ЭтоНабор
		|	,ТабличнаяЧастьДокумента.НеобходимоВыделитьКакСоставНабора
		|ПОМЕСТИТЬ ТабличнаяЧастьДокумента");
		Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"ИЗ ТабличнаяЧастьДокумента КАК СтрокиДокумента", 
		"	,СтрокиДокумента.НоменклатураНабора КАК НоменклатураНабора
		|	,СтрокиДокумента.ХарактеристикаНабора КАК ХарактеристикаНабора
		|	,СтрокиДокумента.ЭтоНабор КАК ЭтоНабор
		|	,СтрокиДокумента.НеобходимоВыделитьКакСоставНабора КАК НеобходимоВыделитьКакСоставНабора
		|ИЗ ТабличнаяЧастьДокумента КАК СтрокиДокумента");
	КонецЕсли; 
	// Конец Наборы
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ИсключитьНедоступнуюТаблицуИзТекстаЗапроса(Запрос, ИмяТаблицы)
	
	Если ПравоДоступа("Чтение", Метаданные.Документы[ИмяТаблицы]) Тогда
		Возврат;
	КонецЕсли;
	
	// Привилегированный режим нужен, т.к. при отсутствии доступа схема запроса будет выдавать ошибки.
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ИндексыДляУдаления = Новый Соответствие;
	
	Для Каждого ТекПакет Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Для Каждого ТекОператор Из ТекПакет.Операторы Цикл
			
			ИндексыДляУдаления.Очистить();
			
			Для Каждого ТекИсточник Из ТекОператор.Источники Цикл
				Если СтрНайти(ТекИсточник.Источник.ИмяТаблицы, ИмяТаблицы) <> 0 Тогда
					ИндексыДляУдаления[ТекПакет.Операторы.Индекс(ТекОператор)] = Истина;
				КонецЕсли;
			КонецЦикла;
			
			// BSLLS:DeletingCollectionItem-off
			// Удаление выполняется для каждого оператора пакета
			Для Каждого ТекИндексДляУдаления Из ИндексыДляУдаления Цикл
				ТекПакет.Операторы.Удалить(ТекИндексДляУдаления.Ключ);
			КонецЦикла;
			// BSLLS:DeletingCollectionItem-on
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

#КонецОбласти