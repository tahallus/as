
Функция МакетыИДанныеОбъектовДляПечатиMSWord(Знач ИмяМенеджераПечати, Знач ИменаМакетов, Знач СоставДокументов) Экспорт
	
	МассивИменМакетов = СтрРазделить(ИменаМакетов, ", ", Ложь);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераПечати);
	МакетыИДанные = ПолучитьДанныеПечатиMSWord(СоставДокументов, МассивИменМакетов);
	МакетыИДанные.Вставить("ЛокальныйКаталогФайловПечати", Неопределено); // Для обратной совместимости.
	
	Если НЕ МакетыИДанные.Макеты.Свойство("ТипыМакетов") Тогда
		МакетыИДанные.Макеты.Вставить("ТипыМакетов", Новый Соответствие); // Для обратной совместимости.
	КонецЕсли;
	
	Возврат МакетыИДанные;
	
КонецФункции

Функция ПечатьДоговораПриложенияMSWord(Идентификатор, ОбъектыПечати) Экспорт
	
	Результат = Новый Структура("ИмяФайла,АдресХранилищаПечатнойФормы", "", "");
	
	ИмяМакета = Идентификатор;
	ТипМакета = "doc";
	
	ИмяДокумента = "ЗаказПокупателя";
	//Если ОбъектыПечати.Количество() > 0 Тогда
	//	Если ТипЗнч(ОбъектыПечати[0]) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
	//		ИмяДокумента = "ЗаказПокупателя";
	//	КонецЕсли;
	//КонецЕсли;
	
	МакетИДанныеОбъекта = МакетыИДанныеОбъектовДляПечатиMSWord("Документ." + ИмяДокумента,
		ИмяМакета,
		ОбъектыПечати);
		
	ДвоичныеДанныеМакетов = МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	
	Если ДвоичныеДанныеМакетов[ИмяМакета] = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Макет = УправлениеПечатью.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета], ТипМакета, ИмяМакета);
	Если Макет = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Секции = МакетИДанныеОбъекта.Макеты.ОписаниеСекций;
	
	Для Каждого ДокументСсылка Из ОбъектыПечати Цикл
		
		ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
		
		Попытка
			
			Продукт = ПолучитьПродукт(ИмяМакета, ДокументСсылка);
			ИмяФайла = "";
			Расширение = ".docx";
			Если ЗначениеЗаполнено(Продукт) Тогда
				Если ИмяМакета = "ДоговорMSWord" И ЗначениеЗаполнено(Продукт.ПутьСохраненияДоговоров) Тогда
					ИмяФайла = Продукт.ПутьСохраненияДоговоров + ДанныеОбъекта.НомерОсновногоДоговора + ", " + ДанныеОбъекта.ЗаказчикПредставление + Расширение;
				ИначеЕсли ИмяМакета = "ПриложениеMSWord" И ЗначениеЗаполнено(Продукт.ПутьСохраненияСоглашений) Тогда
					ИмяФайла = Продукт.ПутьСохраненияСоглашений + ДанныеОбъекта.НомерОсновногоДоговора + ", " +ДанныеОбъекта.ТипСоглашения + " " + ДанныеОбъекта.НомерСоглашения + ", " + ДанныеОбъекта.ЗаказчикПредставление + Расширение;
				КонецЕсли;
			КонецЕсли;
			
			//ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета);
			ПечатнаяФорма = УправлениеПечатью.ИнициализироватьПечатнуюФорму(ТипМакета,, Макет);
			
			//ПечатнаяФорма = УправлениеПечатью.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета);
			АдресХранилищаПечатнойФормы = "";
			Если ПечатнаяФорма = Неопределено Тогда
				УправлениеПечатью.ОчиститьСсылки(Макет);
				Возврат Неопределено;
			КонецЕсли;
			
			Область = УправлениеПечатью.ОбластьМакета(Макет, Секции[ИмяМакета]["ВерхнийКолонтитул"]);
			УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
		
			Область = УправлениеПечатью.ОбластьМакета(Макет, Секции[ИмяМакета]["НижнийКолонтитул"]);
			УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
			
			Область = УправлениеПечатью.ОбластьМакета(Макет, Секции[ИмяМакета]["ШапкаДокумента"]);
			УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
			
			//Если ДанныеОбъекта.Товары.Количество() > 0 Тогда
			Если ДанныеОбъекта.Свойство("Товары") Тогда
				// Вывод коллекции данных из информационной базы в виде таблицы.
				Область = УправлениеПечатью.ОбластьМакета(Макет, Секции[ИмяМакета]["ШапкаТаблицы"]);
				УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
				//УправлениеПечатью.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
				
				Область = УправлениеПечатью.ОбластьМакета(Макет, Секции[ИмяМакета]["СтрокаТаблицы"]);
				УправлениеПечатью.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
				
				Область = УправлениеПечатью.ОбластьМакета(Макет, Секции[ИмяМакета]["ПодвалТаблицы"]);
				УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
			КонецЕсли;
			
			//Если ДанныеОбъекта.Работы.Количество() > 0 Тогда
			Если ДанныеОбъекта.Свойство("Работы") Тогда
				// Вывод коллекции данных из информационной базы в виде таблицы.
				Область = УправлениеПечатью.ОбластьМакета(Макет, Секции[ИмяМакета]["ШапкаРаботы"]);
				УправлениеПечатью.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
				
				Область = УправлениеПечатью.ОбластьМакета(Макет, Секции[ИмяМакета]["СтрокаРаботы"]);
				УправлениеПечатью.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Работы);
				
				Область = УправлениеПечатью.ОбластьМакета(Макет, Секции[ИмяМакета]["ПодвалРаботы"]);
				УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
			КонецЕсли;
			
			Область = УправлениеПечатью.ОбластьМакета(Макет, Секции[ИмяМакета]["РазделительМеждуТаблицами"]);
			УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
			
			//Если ДанныеОбъекта.Услуги.Количество() > 0 Тогда
			Если ДанныеОбъекта.Свойство("Услуги") Тогда
				// Вывод коллекции данных из информационной базы в виде таблицы.
				Область = УправлениеПечатью.ОбластьМакета(Макет, Секции[ИмяМакета]["ШапкаУслуги"]);
				УправлениеПечатью.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
				
				Область = УправлениеПечатью.ОбластьМакета(Макет, Секции[ИмяМакета]["СтрокаУслуги"]);
				УправлениеПечатью.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Услуги);
				
				Область = УправлениеПечатью.ОбластьМакета(Макет, Секции[ИмяМакета]["ПодвалУслуги"]);
				УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
			КонецЕсли;
			
			Область = УправлениеПечатью.ОбластьМакета(Макет, Секции[ИмяМакета]["ПодвалДокумента"]);
			УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
			
			Область = УправлениеПечатью.ОбластьМакета(Макет, Секции[ИмяМакета]["Разделитель"]);
			//УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
			УправлениеПечатью.ПрисоединитьОбласть(ПечатнаяФорма,Область,Ложь);
			
			Область = УправлениеПечатью.ОбластьМакета(Макет, Секции[ИмяМакета]["Приложение"]);
			УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
			
			АдресХранилищаПечатнойФормы = УправлениеПечатью.СформироватьДокумент(ПечатнаяФорма);
			
		Исключение
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			УправлениеПечатью.ОчиститьСсылки(ПечатнаяФорма);
			УправлениеПечатью.ОчиститьСсылки(Макет);
			
			Возврат Неопределено;
			
		КонецПопытки;
		
		УправлениеПечатью.ОчиститьСсылки(ПечатнаяФорма, Ложь);
		УправлениеПечатью.ОчиститьСсылки(Макет);
		
	КонецЦикла;
	
	Результат.Вставить("ИмяФайла", ИмяФайла);
	Результат.Вставить("АдресХранилищаПечатнойФормы", АдресХранилищаПечатнойФормы);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьКомандыПечатиДоговоров(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "_УправлениеПечатьюКлиент.ПечатьДоговораПриложенияMSWord";
		//КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "ДоговорMSWord";
		КомандаПечати.Представление = НСтр("ru = 'Договор (Word)'");
		КомандаПечати.СписокФорм = "ФормаЭлемента,ФормаСписка";
		КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord;
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
		//КомандаПечати.МестоРазмещения = МестоРазмещения;
		//КомандаПечати.ДополнительныеПараметры.Вставить("", );
		КомандаПечати.Порядок = 1010;
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьКомандыПечатиДоговоровСоглашений(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "_УправлениеПечатьюКлиент.ПечатьДоговораПриложенияMSWord";
	//КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "ДоговорMSWord";
	КомандаПечати.Представление = НСтр("ru = 'Договор (Word)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
	КомандаПечати.Порядок = 1020;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "_УправлениеПечатьюКлиент.ПечатьДоговораПриложенияMSWord";
	//КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "ПриложениеMSWord";
	КомандаПечати.Представление = НСтр("ru = 'Приложение (Word)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
	КомандаПечати.Порядок = 1030;
	
КонецПроцедуры




Функция ПолучитьДанныеПечатиMSWord(Знач МассивДокументов, Знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	ОписаниеСекций = Новый Структура;
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
		
	Для Каждого ОбъектСсылка Из МассивДокументов Цикл
		ДанныеОбъектаПоМакетам = Новый Соответствие;
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			
			Шаблон = ПолучитьДвоичныеДанныеШаблона(ИмяМакета, ОбъектСсылка);
			
			Если Шаблон = Неопределено Тогда
				
				Сообщить("Шаблон не найден: макет " + ИмяМакета + ", Объект " + ОбъектСсылка);
				
			Иначе
			
				ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ПолучитьДанныеОбъекта(ОбъектСсылка, ИмяМакета));
				
				
				ДвоичныеДанныеМакетов.Вставить(ИмяМакета, Шаблон);
				
				ОписаниеСекцийМакета = ПолучитьОписаниеОбластейМакетаОфисногоДокумента();
				ОписаниеСекций.Вставить(ИмяМакета, ОписаниеСекцийМакета);
				
			КонецЕсли;
			
		КонецЦикла;
		ДанныеПоВсемОбъектам.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
	КонецЦикла;	
	
	Макеты = Новый Структура;
	Макеты.Вставить("ОписаниеСекций", ОписаниеСекций);
	//Макеты.Вставить("ОписаниеОбластей", ОписаниеОбластей);
	//Макеты.Вставить("ТипыМакетов", ТипыМакетов);
	Макеты.Вставить("ДвоичныеДанныеМакетов", ДвоичныеДанныеМакетов);
	
	Результат = Новый Структура;
	Результат.Вставить("Данные", ДанныеПоВсемОбъектам);
	Результат.Вставить("Макеты", Макеты);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОписаниеОбластейМакетаОфисногоДокумента()
	
	ОписаниеОбластей = Новый Структура;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ВерхнийКолонтитул"	, "ВерхнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "НижнийКолонтитул"	, "НижнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаДокумента"	, "Общая");
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицы"		, "СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаТаблицы"		, "СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ПодвалТаблицы"		, "СтрокаТаблицы");
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаРаботы"		, "СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаРаботы"		, "СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ПодвалРаботы"		, "СтрокаТаблицы");
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаУслуги"		, "СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаУслуги"		, "СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ПодвалУслуги"		, "СтрокаТаблицы");
	
	//УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "МежТабличнаяЧасть"	, "Общая");
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ПодвалДокумента"	, "Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Приложение"		, "Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Разделитель"		, "Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "РазделительМеждуТаблицами"		, "Общая");	
	
	Возврат ОписаниеОбластей;
	
КонецФункции


Функция ПолучитьКонтрагента(Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты._Партнер = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
КонецФункции

Функция ПолучитьДанныеОбъекта(СсылкаНаОбъект, ИмяМакета)
	
	ЭтоЗаказ			= Ложь;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЭтоЗаказ = Истина;
	КонецЕсли;
	
	РегВалюта = Константы.ВалютаУчета.Получить();
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	Если ЭтоЗаказ Тогда
		ДанныеДляПечати = ПолучитьДанныеДляПечати_ЗаказПокупателя(МассивОбъектов);
	Иначе
		ДанныеДляПечати = ПолучитьДанныеДляПечати_Договор(МассивОбъектов);
	КонецЕсли;
	
	ДанныеПечати = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	Товары = Новый ТаблицаЗначений;
	Если ДанныеДляПечати.Свойство("РезультатПоТабличнойЧасти") Тогда
		Товары       = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура;
	
	Если ДанныеПечати.Следующий() Тогда
		
		ДатаАванса	= '00010101';
		СуммаАванса	= 0;
		ДатаПлатежа = '00010101';
		Если ЭтоЗаказ Тогда
			ТаблицаЭтапыОплаты	= ДанныеПечати.Ссылка.ПлатежныйКалендарь;
			
			Если ТаблицаЭтапыОплаты.Количество() = 0 Тогда
				ДатаПлатежа = '00010101';
			ИначеЕсли ТаблицаЭтапыОплаты.Количество() = 1 Тогда
				ДатаПлатежа = ТаблицаЭтапыОплаты[0].ДатаОплаты;
			Иначе
				Для каждого СтрокаЭтапаОплаты Из ТаблицаЭтапыОплаты Цикл
					Если СтрокаЭтапаОплаты._ВариантОплаты = Перечисления._ВариантыОплатыКлиентом.Предоплата Тогда
						ДатаАванса	= СтрокаЭтапаОплаты.ДатаОплаты;
						СуммаАванса	= СтрокаЭтапаОплаты.СуммаОплаты;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ДатаПлатежа = ТаблицаЭтапыОплаты[ТаблицаЭтапыОплаты.Количество()-1].ДатаОплаты;
			КонецЕсли;
		КонецЕсли;
		
		//Контрагент = ПолучитьКонтрагента(ДанныеПечати.Партнер);
		
		СведенияОИсполнителе = ПечатьДокументовУНФ.СведенияОЮрФизЛице(
			ДанныеПечати.Организация,
			ДанныеПечати.Дата,
			,
			ДанныеПечати.БанковскийСчетОрганизации);
		СведенияОЗаказчике 	 = ПечатьДокументовУНФ.СведенияОЮрФизЛице(
			ДанныеПечати.Контрагент,
			ДанныеПечати.Дата,
			,
			ДанныеПечати.БанковскийСчетКонтрагента);
			
		Для Каждого СтрокаДанных Из СведенияОИсполнителе Цикл
			ДанныеОбъекта.Вставить("Исполнитель" + СтрокаДанных.Ключ, СтрокаДанных.Значение);
		КонецЦикла;
		
		Для Каждого СтрокаДанных Из СведенияОЗаказчике Цикл
			ДанныеОбъекта.Вставить("Заказчик" + СтрокаДанных.Ключ, СтрокаДанных.Значение);
		КонецЦикла;
		
		//Результат = Новый Структура;
		//Результат.Вставить("Представление", "");
		//Результат.Вставить("ПолноеНаименование", "");
		//Результат.Вставить("КодПоОКПО", "");
		//Результат.Вставить("ИНН", "");
		//Результат.Вставить("КПП", "");
		//Результат.Вставить("Свидетельство", "");
		//Результат.Вставить("СвидетельствоСерияНомер", "");
		//Результат.Вставить("СвидетельствоДатаВыдачи", "");
		//Результат.Вставить("Телефоны", "");
		//Результат.Вставить("Факс", "");
		//Результат.Вставить("ПочтовыйАдрес", "");
		//Результат.Вставить("ЮридическийАдрес", "");
		//Результат.Вставить("ФактическийАдрес", "");
		//Результат.Вставить("Банк", "");
		//Результат.Вставить("БИК", "");
		//Результат.Вставить("КоррСчет", "");
		//Результат.Вставить("ТекстКорреспондента", "");
		//Результат.Вставить("НомерСчета", "");
		//Результат.Вставить("АдресБанка", "");
		//Результат.Вставить("ЭлектроннаяПочта", "");
		//Результат.Вставить("СтранаРегистрации", "");
		//Результат.Вставить("РегистрационныйНомер", "");
		//Результат.Вставить("ВидКонтрагента", "");
		//Результат.Вставить("ЮридическоеФизическоеЛицо", "");
		//Результат.Вставить("НаименованиеДляПечатныхФорм", "");
		//Результат.Вставить("НалоговыйНомерВСтранеРегистрации", "");
		//Сведения.Вставить("СокращенноеНаименование"		, "");
		//Сведения.Вставить("СокращенноеНаименованиеАнг"	, "");
		//Сведения.Вставить("ПолноеНаименованиеАнг"		, "");
	
		
		//ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокРеквизиты");
		ДанныеОбъекта.Вставить("ИсполнительПредставление", СведенияОИсполнителе.СокращенноеНаименование);
		ДанныеОбъекта.Вставить("ЗаказчикПредставление", СведенияОЗаказчике.СокращенноеНаименование);
		
		ДанныеОбъекта.Вставить("ИсполнительПредставлениеАнг", СведенияОИсполнителе.СокращенноеНаименованиеАнг);   
		ДанныеОбъекта.Вставить("ЗаказчикПредставлениеАнг", СведенияОЗаказчике.СокращенноеНаименованиеАнг);
		
		//ДанныеОбъекта.Вставить("ИсполнительЮрАдрес", СведенияОИсполнителе.ЮридическийАдрес);
		//ДанныеОбъекта.Вставить("ЗаказчикЮрАдрес", СведенияОЗаказчике.ЮридическийАдрес);
		//
		//ДанныеОбъекта.Вставить("ИсполнительФактАдрес", СведенияОИсполнителе.ФактическийАдрес);		
		//ДанныеОбъекта.Вставить("ЗаказчикФактАдрес", СведенияОЗаказчике.ФактическийАдрес);
		//ДанныеОбъекта.Вставить("ИсполнительИНН", СведенияОИсполнителе.ИНН); 
		//ДанныеОбъекта.Вставить("ЗаказчикИНН", СведенияОЗаказчике.ИНН);
		//ДанныеОбъекта.Вставить("ИсполнительКПП", СведенияОИсполнителе.КПП);
		//ДанныеОбъекта.Вставить("ЗаказчикКПП", СведенияОЗаказчике.КПП);
		//ДанныеОбъекта.Вставить("ИсполнительРасчетныйСчет", СведенияОИсполнителе.НомерСчета);
		//ДанныеОбъекта.Вставить("ЗаказчикРасчетныйСчет", СведенияОЗаказчике.НомерСчета);
		//ДанныеОбъекта.Вставить("ИсполнительКорСчет", СведенияОИсполнителе.КоррСчет);
		//ДанныеОбъекта.Вставить("ЗаказчикКорСчет", СведенияОЗаказчике.КоррСчет);
		//ДанныеОбъекта.Вставить("ИсполнительБанк", СведенияОИсполнителе.Банк);
		//ДанныеОбъекта.Вставить("ЗаказчикБанк", СведенияОЗаказчике.Банк);
		//ДанныеОбъекта.Вставить("ИсполнительБИК", СведенияОИсполнителе.БИК);
		//ДанныеОбъекта.Вставить("ЗаказчикБИК", СведенияОЗаказчике.БИК);
		//ДанныеОбъекта.Вставить("ИсполнительОКПО", СведенияОИсполнителе.КодПоОКПО);
		//ДанныеОбъекта.Вставить("ЗаказчикОКПО", СведенияОЗаказчике.КодПоОКПО);
		//ДанныеОбъекта.Вставить("ИсполнительРегистрационныйНомер", СведенияОИсполнителе.РегистрационныйНомер);
		//ДанныеОбъекта.Вставить("ЗаказчикРегистрационныйНомер", СведенияОЗаказчике.РегистрационныйНомер);
		
		ДанныеОбъекта.Вставить("ИсполнительБанкАнг"	, ДанныеПечати.БанковскийСчетОрганизации._ПредставлениеАнг);
		ДанныеОбъекта.Вставить("ЗаказчикБанкАнг"	, ДанныеПечати.БанковскийСчетКонтрагента._ПредставлениеАнг);
		
		//ДанныеОбъекта.Вставить("ИсполнительТелефон", СведенияОЗаказчике.Телефоны);
		//ДанныеОбъекта.Вставить("ТелефонЗаказчика", СведенияОЗаказчике.Телефоны);
		
		ДанныеОбъекта.Вставить("ЗаказчикСтрана"			, СведенияОЗаказчике.СтранаРегистрации.НаименованиеПолное);
		ДанныеОбъекта.Вставить("ЗаказчикСтранаАнг"		, СведенияОЗаказчике.СтранаРегистрации.МеждународноеНаименование);
		ДанныеОбъекта.Вставить("ЗаказчикДатаРегистрацииАнг"	, ПредставлениеДанных(Формат(ДанныеПечати.Контрагент._НерезидентДатаРег, "ДФ=dd.MM.yyyy")));
		ДанныеОбъекта.Вставить("СрокДействия"	, ПредставлениеДанных(Формат(ДатаПлатежа, "ДФ=dd.MM.yyyy")));
		//ДанныеОбъекта.Вставить("РегистрационныйНомер"	, СведенияОЗаказчике.РегистрационныйНомер);
		//ДанныеОбъекта.Вставить("НалоговыйНомер"			, СведенияОЗаказчике.НалоговыйНомерВСтранеРегистрации);
		//ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПодписи);
		//ТабличныйДокумент.Вывести(ОбластьМакета);
		//Если ЗначениеЗаполнено(ДатаПлатежа) Тогда
		//	ДанныеОбъекта.Вставить("СрокДействия"	, Формат(ДатаПлатежа, "ДФ=dd.MM.yyyy"));		
		//Иначе
		//	ДанныеОбъекта.Вставить("СрокДействия"	, "");
		//КонецЕсли;
		
		ДанныеОбъекта.Вставить("Валюта"	, ДанныеПечати.Валюта.Наименование);
		
		
		Если ЗначениеЗаполнено(ДатаАванса) И СуммаАванса > 0 Тогда
			ДанныеОбъекта.Вставить("ДатаАванса"	, Формат(ДатаАванса, "ДФ=dd.MM.yyyy"));
			ДанныеОбъекта.Вставить("ДатаАвансаЛок"	, Формат(ДатаАванса, "ДЛФ=DD"));
			ДанныеОбъекта.Вставить("СуммаАванса"	, Формат(СуммаАванса, "ДФ=dd.MM.yyyy"));		
			ДанныеОбъекта.Вставить("ВалютаСуммаАванса"  	, СуммаРубКоп(СуммаАванса, ДанныеПечати.Валюта, РегВалюта));
			ДанныеОбъекта.Вставить("ПрописьюСуммаАванса"  	, РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаАванса	, ДанныеПечати.Валюта));
		Иначе
			ДанныеОбъекта.Вставить("ДатаАванса"	, "");
			ДанныеОбъекта.Вставить("ДатаАвансаЛок"	, "");
			ДанныеОбъекта.Вставить("СуммаАванса"	, "");		
			ДанныеОбъекта.Вставить("ВалютаСуммаАванса"		, "");
			ДанныеОбъекта.Вставить("ПрописьюСуммаАванса"	, "");
		КонецЕсли;
	
		ДанныеОбъекта.Вставить("НомерОсновногоДоговора", ДанныеПечати.Договор.НомерДоговора);	
		ДанныеОбъекта.Вставить("ТекстЗаголовка", ДанныеПечати.Соглашение.Наименование);
		//ТекстДоговора = "по договору № " + ?(ЗначениеЗаполнено(ДанныеПечати.Договор._НаименованиеДляПечати), ДанныеПечати.Договор._НаименованиеДляПечати, ДанныеПечати.Договор);
		ТекстДоговора = "по договору № " + ?(ЗначениеЗаполнено(ДанныеПечати.Договор.Наименование), ДанныеПечати.Договор.Наименование, ДанныеПечати.Договор);
		ДанныеОбъекта.Вставить("ТекстДоговора"	, ТекстДоговора);
		ДанныеОбъекта.Вставить("ДатаДоговора"		, Формат(ДанныеПечати.Договор.ДатаДоговора, "ДФ=dd.MM.yyyy"));
		ДанныеОбъекта.Вставить("ДатаДоговораЛок"	, Формат(ДанныеПечати.Договор.ДатаДоговора, "ДЛФ=DD"));
		ДанныеОбъекта.Вставить("ДатаДоговораЛокАнг"	, Формат(ДанныеПечати.Договор.ДатаДоговора, "Л=en_GB; ДЛФ=DD"));
		
		ДанныеОбъекта.Вставить("ДатаНачалаДоговора"	, Формат(ДанныеПечати.Договор.ДатаДоговора, "ДФ=dd.MM.yyyy"));
		
		Если ЗначениеЗаполнено(ДанныеПечати.Договор.СрокДействия) Тогда
			ДанныеОбъекта.Вставить("ДатаОкончанияДоговора"	, Формат(ДанныеПечати.Договор.СрокДействия, "ДФ=dd.MM.yyyy"));
		Иначе
			ДанныеОбъекта.Вставить("ДатаОкончанияДоговора"	, Формат(КонецГода(ДанныеПечати.Договор.ДатаДоговора), "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПечати.Соглашение) Тогда
			ДанныеОбъекта.Вставить("ТипСоглашения", ПредставлениеДанных(ДанныеПечати.Соглашение.ТипСоглашения.Наименование));
			ДанныеОбъекта.Вставить("ТипСоглашенияАнг", ПредставлениеДанных(ДанныеПечати.Соглашение.ТипСоглашения.НаименованиеАнг));
			ДанныеОбъекта.Вставить("ТипСоглашенияШаблонСклонения1", ПредставлениеДанных(ДанныеПечати.Соглашение.ТипСоглашения.ШаблонСклонения1));
			ДанныеОбъекта.Вставить("ТипСоглашенияШаблонСклонения2", ПредставлениеДанных(ДанныеПечати.Соглашение.ТипСоглашения.ШаблонСклонения2));
			ДанныеОбъекта.Вставить("ТипСоглашенияШаблонСклонения3", ПредставлениеДанных(ДанныеПечати.Соглашение.ТипСоглашения.ШаблонСклонения3));
			ДанныеОбъекта.Вставить("ТипСоглашенияШаблонСклонения4", ПредставлениеДанных(ДанныеПечати.Соглашение.ТипСоглашения.ШаблонСклонения4));
		Иначе
			ДанныеОбъекта.Вставить("ТипСоглашения", "");
			ДанныеОбъекта.Вставить("ТипСоглашенияАнг", "");
			ДанныеОбъекта.Вставить("ТипСоглашенияШаблонСклонения1", "");
			ДанныеОбъекта.Вставить("ТипСоглашенияШаблонСклонения2", "");
			ДанныеОбъекта.Вставить("ТипСоглашенияШаблонСклонения3", "");
			ДанныеОбъекта.Вставить("ТипСоглашенияШаблонСклонения4", "");
		КонецЕсли;
		
		ДанныеОбъекта.Вставить("НомерСоглашения"				, ДанныеПечати.Соглашение.Номер);	
		ДанныеОбъекта.Вставить("ДатаСоглашения"					, Формат(ДанныеПечати.Соглашение.Дата, "ДФ=dd.MM.yyyy"));
		ДанныеОбъекта.Вставить("ДатаСоглашенияЛок"				, Формат(ДанныеПечати.Соглашение.Дата, "ДЛФ=DD"));
		ДанныеОбъекта.Вставить("ДатаСоглашенияЛокАнг"			, Формат(ДанныеПечати.Соглашение.Дата, "Л=en_GB; ДЛФ=DD"));
		
		ДниЗадолженностиПоРабочимДням = ЗначениеЗаполнено(ДанныеПечати.Соглашение.Календарь);
		ДнейЗадолженности = 0;
		Для каждого СтрокаЭтапаОплаты Из ДанныеПечати.Соглашение.ЭтапыГрафикаОплаты Цикл
			Если СтрокаЭтапаОплаты.ВариантОплаты = Перечисления._ВариантыОплатыКлиентом.Кредит Тогда
				ДнейЗадолженности = Макс(ДнейЗадолженности, СтрокаЭтапаОплаты.Сдвиг);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеОбъекта.Вставить("ДнейЗадолженностиЧисло"		, ДнейЗадолженности);
		ДанныеОбъекта.Вставить("ДнейЗадолженностиПрописью"	, ЧислоПрописью(ДнейЗадолженности, "Л=ru_RU", ",,,,,,,,0"));
		ДанныеОбъекта.Вставить("ТипДнейЗадолженности"		, ?(ДниЗадолженностиПоРабочимДням, "рабочих дней", "календарных дней"));
		
		ДанныеОбъекта.Вставить("ДнейЗадолженностиПрописьюАнг"	, ЧислоПрописью(ДнейЗадолженности, "Л=en_US", ",,,,0"));		
		ДанныеОбъекта.Вставить("ТипДнейЗадолженностиАнг"		, ?(ДниЗадолженностиПоРабочимДням, "working days", "calendar days"));
		
		
		РуководительСсылка		= ДанныеПечати.ПодписьРуководителя;
		КонтактноеЛицоСсылка	= ДанныеПечати.КонтактноеЛицоПодписант;
				
		ДанныеОбъекта.Вставить("РуководительФИО"		, РуководительСсылка.ФизическоеЛицо.Наименование);
		ДанныеОбъекта.Вставить("РуководительФИнициалы"	, ФизическиеЛицаКлиентСервер.ФамилияИнициалы(РуководительСсылка.ФизическоеЛицо.Наименование));
		ДанныеОбъекта.Вставить("РуководительДолжность"	, РуководительСсылка.Должность);
		ДанныеОбъекта.Вставить("РуководительЛицо"     	, РуководительСсылка._ДоговорЛицо);
		ДанныеОбъекта.Вставить("РуководительОснование"	, РуководительСсылка._ДоговорОснование);
		
		ДанныеОбъекта.Вставить("РуководительФИОАнг"			, РуководительСсылка._НаименованиеАнг);
		ДанныеОбъекта.Вставить("РуководительДолжностьАнг"	, РуководительСсылка._ДолжностьАнг);
		ДанныеОбъекта.Вставить("РуководительЛицоАнг"     	, РуководительСсылка._ДоговорЛицоАнг);
		ДанныеОбъекта.Вставить("РуководительОснованиеАнг"	, РуководительСсылка._ДоговорОснованиеАнг);
		
		ДанныеОбъекта.Вставить("ЗаказчикФИО"			, КонтактноеЛицоСсылка.Наименование);
		ДанныеОбъекта.Вставить("ЗаказчикФИнициалы"		, ФизическиеЛицаКлиентСервер.ФамилияИнициалы(КонтактноеЛицоСсылка.Наименование));
		ДанныеОбъекта.Вставить("ЗаказчикДолжность"		, КонтактноеЛицоСсылка._Должность);
		ДанныеОбъекта.Вставить("ЗаказчикЛицо"			, КонтактноеЛицоСсылка._ДоговорЛицо);
		ДанныеОбъекта.Вставить("ЗаказчикОснование"		, КонтактноеЛицоСсылка._ДоговорОснование);
		
		ДанныеОбъекта.Вставить("ЗаказчикФИОАнг"			, КонтактноеЛицоСсылка._НаименованиеАнг);
		ДанныеОбъекта.Вставить("ЗаказчикДолжностьАнг"	, КонтактноеЛицоСсылка._ДолжностьАнг);
		ДанныеОбъекта.Вставить("ЗаказчикЛицоАнг"		, КонтактноеЛицоСсылка._ДоговорЛицоАнг);
		ДанныеОбъекта.Вставить("ЗаказчикОснованиеАнг"	, КонтактноеЛицоСсылка._ДоговорОснованиеАнг);
		
		
		ДанныеОбъекта.Вставить("ЗаказчикДомен" 			, ДанныеПечати.Договор._Домен);
		
		// Формирование табличной части
		ДанныеОбъекта.Вставить("Товары", Новый Массив);
		ДанныеОбъекта.Вставить("Услуги", Новый Массив);
		ДанныеОбъекта.Вставить("Работы", Новый Массив);
		
		Продукт					= "";
		Журнал					= "";
		ЖурналАнг				= "";
		ЖурналДатаВыхода		= "";
		ЖурналДатаВыходаЛок		= "";
		ЖурналДатаМатериалов	= "";
		ОбщаяРекламнаяКомпания	= "";
		НомерСтроки			= 0;
		ИтогоСуммаБезНДС	= 0;
		ИтогоСуммаСНДС		= 0;
		ИтогоСуммаНДС		= 0;
		
		РаботыИтогоСуммаБезНДС	= 0;
		РаботыИтогоСуммаСНДС	= 0;
		РаботыИтогоСуммаНДС		= 0;
		
		УслугиИтогоСуммаБезНДС	= 0;
		УслугиИтогоСуммаСНДС	= 0;
		УслугиИтогоСуммаНДС		= 0;
		
		ОбщаяДатаНачала	= Дата(1,1,1);
		ОбщаяДатаОкончания	= Дата(1,1,1);
		
		
		Если Товары.Количество() > 0 Тогда
			
			Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
				
				ЭтоРабота = Ложь;
				//Если  Тогда
				//	ЭтоРабота = Истина;
				//КонецЕсли;
				ЖурналСсылка = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Журнал), СтрокаТабличнойЧасти.Журнал, ДанныеПечати.Журнал);
				
				Если ЗначениеЗаполнено(ЖурналСсылка) Тогда
					//Продукт				= ЖурналСсылка.НаименованиеПолное;
					Журнал				= ЖурналСсылка.НаименованиеПолное;
					ЖурналАнг			= ЖурналСсылка._НаименованиеПолноеАнг;
					ЖурналДатаВыхода	= Формат(ЖурналСсылка._ДатаВыходаЖурнала, "ДФ=dd.MM.yyyy");
					ЖурналДатаВыходаЛок	= Формат(ЖурналСсылка._ДатаВыходаЖурнала, "ДЛФ=DD");
					ЖурналДатаМатериалов	= Формат(ЖурналСсылка._ДатаПредоставленияРекламныхМатериалов, "ДФ=dd.MM.yyyy");
				КонецЕсли;
				
				Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
				
				Содержание = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СодержаниеСоглашения) Тогда
					Содержание = СтрокаТабличнойЧасти.СодержаниеСоглашения;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.Содержание) Тогда
					Содержание = СтрокаТабличнойЧасти.Содержание;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаНачала) Тогда
					Если ЗначениеЗаполнено(ОбщаяДатаНачала) Тогда
						Если ОбщаяДатаНачала > СтрокаТабличнойЧасти.ДатаНачала Тогда
							ОбщаяДатаНачала = СтрокаТабличнойЧасти.ДатаНачала;
						КонецЕсли;
					Иначе
						ОбщаяДатаНачала = СтрокаТабличнойЧасти.ДатаНачала;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончания) Тогда
					Если ЗначениеЗаполнено(ОбщаяДатаОкончания) Тогда
						Если ОбщаяДатаОкончания < СтрокаТабличнойЧасти.ДатаОкончания Тогда
							ОбщаяДатаОкончания = СтрокаТабличнойЧасти.ДатаОкончания;
						КонецЕсли;
					Иначе
						ОбщаяДатаОкончания = СтрокаТабличнойЧасти.ДатаОкончания;
					КонецЕсли;
				КонецЕсли;
				
				СуммаБезНДС	= ?(ДанныеПечати.СуммаВключаетНДС, СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС, СтрокаТабличнойЧасти.Сумма);
				СуммаСНДС	= ?(ДанныеПечати.СуммаВключаетНДС, СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС);
				
				
				НомерСтроки = НомерСтроки + 1;
				СтрокаТаблицыТовары = Новый Структура;
				СтрокаТаблицыТовары.Вставить("НомерСтроки"			, НомерСтроки);
				СтрокаТаблицыТовары.Вставить("Журнал"				, Журнал);
				СтрокаТаблицыТовары.Вставить("ЖурналАнг"			, ЖурналАнг);
				СтрокаТаблицыТовары.Вставить("ЖурналДатаВыхода"		, ЖурналДатаВыхода);
				СтрокаТаблицыТовары.Вставить("ЖурналДатаВыходаЛок"	, ЖурналДатаВыходаЛок);
				СтрокаТаблицыТовары.Вставить("ЖурналДата2"			, ЖурналДатаМатериалов);
				СтрокаТаблицыТовары.Вставить("Содержание"			, Содержание);
				СтрокаТаблицыТовары.Вставить("Бренд"				, СтрокаТабличнойЧасти.Бренд);
				СтрокаТаблицыТовары.Вставить("КатегорияРазмещения"	, Номенклатура._КатегорияРазмещения);
				СтрокаТаблицыТовары.Вставить("Продукт"				, Номенклатура._Продукт);
				СтрокаТаблицыТовары.Вставить("ТипРазмещения"		, Номенклатура._ТипРазмещения);
				СтрокаТаблицыТовары.Вставить("ФорматРазмещения"		, Номенклатура._ФорматРазмещения);
				СтрокаТаблицыТовары.Вставить("МестоРазмещения"		, Номенклатура._МестоРазмещения);
				СтрокаТаблицыТовары.Вставить("Формат"				, Номенклатура._Формат);
				СтрокаТаблицыТовары.Вставить("ПозицияНаСайте"		, Номенклатура._ПозицияНаСайте);
				
				СтрокаТаблицыТовары.Вставить("ДатаНачала"	, Формат(СтрокаТабличнойЧасти.ДатаНачала, "ДФ=dd.MM.yyyy"));
				СтрокаТаблицыТовары.Вставить("ДатаОкончания"	, Формат(СтрокаТабличнойЧасти.ДатаОкончания, "ДФ=dd.MM.yyyy"));
				
				СтрокаТаблицыТовары.Вставить("ДатаНачалаЛок"		, Формат(СтрокаТабличнойЧасти.ДатаНачала, "ДЛФ=DD"));
				СтрокаТаблицыТовары.Вставить("ДатаОкончанияЛок"	, Формат(СтрокаТабличнойЧасти.ДатаОкончания, "ДЛФ=DD"));
				
				//СтрокаТаблицыТовары.Вставить("РазмерРекламы"		, СтрокаТабличнойЧасти.РазмерРекламы);
				СтрокаТаблицыТовары.Вставить("РекламнаяКомпания"	, СтрокаТабличнойЧасти.РекламнаяКомпания);
				СтрокаТаблицыТовары.Вставить("СодержаниеСоглашения"	, СтрокаТабличнойЧасти.СодержаниеСоглашения);
				СтрокаТаблицыТовары.Вставить("Количество"			, СтрокаТабличнойЧасти.Количество);
				СтрокаТаблицыТовары.Вставить("СрокОплаты"			, Формат(СтрокаТабличнойЧасти.СрокОплаты, "ДФ=dd.MM.yyyy"));
				//СтрокаТаблицыТовары.Вставить("МестоРазмещения"		, СтрокаТабличнойЧасти.МестоРазмещения);
				//СтрокаТаблицыТовары.Вставить("Таргетинг"			, СтрокаТабличнойЧасти.Таргетинг);
				//СтрокаТаблицыТовары.Вставить("Объем"				, СтрокаТабличнойЧасти.Полосность);
				//СтрокаТаблицыТовары.Вставить("ОбъемАнг"				, "" + СтрокаТабличнойЧасти.Полосность 
				//	+ ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Полосность.НаименованиеАнг), "/" + Символы.ПС + СтрокаТабличнойЧасти.Полосность.НаименованиеАнг, ""));
				
				СтрокаТаблицыТовары.Вставить("КолвоДнейРазмещения"	, "");
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаНачала) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончания) Тогда
					КолвоДнейРазмещения = (СтрокаТабличнойЧасти.ДатаОкончания - СтрокаТабличнойЧасти.ДатаНачала) / (24*3600) + 1;
					МассивСклонений = ПолучитьСклоненияСтрокиПоЧислу("день", КолвоДнейРазмещения, "", "ЧС=Количественное", "ПД=Именительный; ПЧ=Число");
					Если МассивСклонений.Количество() > 0 Тогда
						СтрокаТаблицыТовары.Вставить("КолвоДнейРазмещения"	, "" + МассивСклонений[0]);
					Иначе
						СтрокаТаблицыТовары.Вставить("КолвоДнейРазмещения"	, "" + КолвоДнейРазмещения);
					КонецЕсли;
				КонецЕсли;
				
				//Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СрокРазмещения) Тогда
				//	СрокРазмещения = СтрокаТабличнойЧасти.СрокРазмещения;
				//	СрокРазмещенияЛок = СтрокаТабличнойЧасти.СрокРазмещения;
				//Иначе
					СрокРазмещения		= "с " + Формат(СтрокаТабличнойЧасти.ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + Формат(СтрокаТабличнойЧасти.ДатаОкончания, "ДФ=dd.MM.yyyy");
					СрокРазмещенияЛок	= "с " + Формат(СтрокаТабличнойЧасти.ДатаНачала, "ДЛФ=DD") + " по " + Формат(СтрокаТабличнойЧасти.ДатаОкончания, "ДЛФ=DD");
				//КонецЕсли;
				
				СтрокаТаблицыТовары.Вставить("СрокРазмещения"		, СрокРазмещения);
				СтрокаТаблицыТовары.Вставить("СрокРазмещенияЛок"	, СрокРазмещенияЛок);
				
				
				СтрокаТаблицыТовары.Вставить("СуммаБезНДС"		, ПечатьДокументовУНФ.ФорматСумм(СуммаБезНДС));
				СтрокаТаблицыТовары.Вставить("СуммаСНДС"		, ПечатьДокументовУНФ.ФорматСумм(СуммаСНДС));
				СтрокаТаблицыТовары.Вставить("СуммаНДС"			, ПечатьДокументовУНФ.ФорматСумм(СтрокаТабличнойЧасти.СуммаНДС));
				
				СтрокаТаблицыТовары.Вставить("ПрописьюСуммаБезНДС"		, РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаБезНДС, ДанныеПечати.Валюта));
				СтрокаТаблицыТовары.Вставить("ПрописьюСуммаСНДС"		, РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаСНДС, ДанныеПечати.Валюта));
				СтрокаТаблицыТовары.Вставить("ПрописьюСуммаНДС"			, РаботаСКурсамиВалют.СформироватьСуммуПрописью(СтрокаТабличнойЧасти.СуммаНДС, ДанныеПечати.Валюта));
				
				//ОтборДетализации = Новый Структура("_КлючСвязиДетализации", СтрокаТабличнойЧасти.КлючСвязиДетализации);
				//НайденныеСтрокиДетализации = Детализация.НайтиСтроки(ОтборДетализации);
				//Если НайденныеСтрокиДетализации.Количество() > 0 Тогда
				//	ПервыйЦиклДетализации = Истина;
				//	Для каждого СтрокаДетализации Из НайденныеСтрокиДетализации Цикл
				//		Если ПервыйЦиклДетализации Тогда
				//			ПервыйЦиклДетализации = Ложь;
				//		Иначе
				//			СтрокаТаблицыТовары = ПолучитьСтруктуруСтроки();
				//		КонецЕсли;
				//		
				//		СтрокаТаблицыТовары.Вставить("МестоРазмещения"		, СтрокаДетализации._МестоРазмещения);
				//		СтрокаТаблицыТовары.Вставить("Таргетинг"			, СтрокаДетализации._Таргетинг);
				//        СтрокаТаблицыТовары.Вставить("РазмерРекламы"		, СтрокаДетализации._РазмерРекламы);
				//		ДанныеОбъекта.Товары.Добавить(СтрокаТаблицыТовары);
				//		Если ЭтоРабота Тогда
				//			ДанныеОбъекта.Работы.Добавить(СтрокаТаблицыТовары);
				//		Иначе
				//			ДанныеОбъекта.Услуги.Добавить(СтрокаТаблицыТовары);
				//		КонецЕсли;
				//		
				//	КонецЦикла;				
				//Иначе
					ДанныеОбъекта.Товары.Добавить(СтрокаТаблицыТовары);
					Если ЭтоРабота Тогда
						ДанныеОбъекта.Работы.Добавить(СтрокаТаблицыТовары);
					Иначе
						ДанныеОбъекта.Услуги.Добавить(СтрокаТаблицыТовары);
					КонецЕсли;
				//КонецЕсли;
				
				ИтогоСуммаБезНДС	= ИтогоСуммаБезНДС	+ СуммаБезНДС;
				ИтогоСуммаСНДС		= ИтогоСуммаСНДС	+ СуммаСНДС;
				ИтогоСуммаНДС		= ИтогоСуммаНДС		+ СтрокаТабличнойЧасти.СуммаНДС;
				
				Если ЭтоРабота Тогда
					РаботыИтогоСуммаБезНДС	= РаботыИтогоСуммаБезНДС	+ СуммаБезНДС;
					РаботыИтогоСуммаСНДС	= РаботыИтогоСуммаСНДС		+ СуммаСНДС;
					РаботыИтогоСуммаНДС		= РаботыИтогоСуммаНДС		+ СтрокаТабличнойЧасти.СуммаНДС;
				Иначе
					УслугиИтогоСуммаБезНДС	= УслугиИтогоСуммаБезНДС	+ СуммаБезНДС;
					УслугиИтогоСуммаСНДС	= УслугиИтогоСуммаСНДС		+ СуммаСНДС;
					УслугиИтогоСуммаНДС		= УслугиИтогоСуммаНДС		+ СтрокаТабличнойЧасти.СуммаНДС;
				КонецЕсли;
				
			КонецЦикла;
				
			ОбщаяРекламнаяКомпания = "";
			СписокРекламнаяКомпания = Товары.Скопировать(,"РекламнаяКомпания");
			СписокРекламнаяКомпания.Свернуть("РекламнаяКомпания");
			Для каждого СтрокаТЧ Из СписокРекламнаяКомпания Цикл
				ОбщаяРекламнаяКомпания = ОбщаяРекламнаяКомпания + "," + СтрокаТЧ.РекламнаяКомпания;
			КонецЦикла;
			ОбщаяРекламнаяКомпания = Сред(ОбщаяРекламнаяКомпания, 2);
			
		КонецЕсли;
			
		ДанныеОбъекта.Вставить("ОбщаяРекламнаяКомпания"	, ОбщаяРекламнаяКомпания);
		//ДанныеОбъекта.Вставить("ОбщийПродукт"		  	, Продукт);
		
		Если ЗначениеЗаполнено(ОбщаяДатаНачала) Тогда
			ДанныеОбъекта.Вставить("ОбщаяДатаНачала"		, Формат(ОбщаяДатаНачала, "ДФ=dd.MM.yyyy"));
			ДанныеОбъекта.Вставить("ОбщаяДатаНачалаЛок"	, Формат(ОбщаяДатаНачала, "ДЛФ=DD"));
		Иначе
			ДанныеОбъекта.Вставить("ОбщаяДатаНачала"		, "");
			ДанныеОбъекта.Вставить("ОбщаяДатаНачалаЛок"	, "");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбщаяДатаОкончания) Тогда
			ДанныеОбъекта.Вставить("ОбщаяДатаОкончания"	, Формат(ОбщаяДатаОкончания, "ДФ=dd.MM.yyyy"));
			ДанныеОбъекта.Вставить("ОбщаяДатаОкончанияЛок"	, Формат(ОбщаяДатаОкончания, "ДЛФ=DD"));
		Иначе
			ДанныеОбъекта.Вставить("ОбщаяДатаОкончания"	, "");
			ДанныеОбъекта.Вставить("ОбщаяДатаОкончанияЛок"	, "");
		КонецЕсли;	
		
		ДанныеОбъекта.Вставить("ИтогоСуммаБезНДС"  	, ПечатьДокументовУНФ.ФорматСумм(ИтогоСуммаБезНДС));
		ДанныеОбъекта.Вставить("ИтогоСуммаСНДС"  	, ПечатьДокументовУНФ.ФорматСумм(ИтогоСуммаСНДС));
		ДанныеОбъекта.Вставить("ИтогоСуммаНДС"  	, ПечатьДокументовУНФ.ФорматСумм(ИтогоСуммаНДС));
		
		ДанныеОбъекта.Вставить("ВалютаИтогоСуммаБезНДС"	, СуммаРубКоп(ИтогоСуммаБезНДС	, ДанныеПечати.Валюта, РегВалюта));
		ДанныеОбъекта.Вставить("ВалютаИтогоСуммаСНДС"  	, СуммаРубКоп(ИтогоСуммаСНДС	, ДанныеПечати.Валюта, РегВалюта));
		ДанныеОбъекта.Вставить("ВалютаИтогоСуммаНДС"  	, СуммаРубКоп(ИтогоСуммаНДС		, ДанныеПечати.Валюта, РегВалюта));
		
		ДанныеОбъекта.Вставить("ПрописьюИтогоСуммаБезНДС"  	, РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаБезНДС	, ДанныеПечати.Валюта));
		ДанныеОбъекта.Вставить("ПрописьюИтогоСуммаСНДС"  	, РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаСНДС		, ДанныеПечати.Валюта));
		ДанныеОбъекта.Вставить("ПрописьюИтогоСуммаНДС"  	, РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаНДС		, ДанныеПечати.Валюта));
		
		ДанныеОбъекта.Вставить("УслугиИтогоСуммаБезНДС"	, ПечатьДокументовУНФ.ФорматСумм(УслугиИтогоСуммаБезНДС));
		ДанныеОбъекта.Вставить("УслугиИтогоСуммаСНДС"	, ПечатьДокументовУНФ.ФорматСумм(УслугиИтогоСуммаСНДС));
		ДанныеОбъекта.Вставить("УслугиИтогоСуммаНДС"	, ПечатьДокументовУНФ.ФорматСумм(УслугиИтогоСуммаНДС));
		
		ДанныеОбъекта.Вставить("ВалютаУслугиИтогоСуммаБезНДС"	, СуммаРубКоп(УслугиИтогоСуммаБезНДС	, ДанныеПечати.Валюта	, РегВалюта));
		ДанныеОбъекта.Вставить("ВалютаУслугиИтогоСуммаСНДС"		, СуммаРубКоп(УслугиИтогоСуммаСНДС		, ДанныеПечати.Валюта	, РегВалюта));
		ДанныеОбъекта.Вставить("ВалютаУслугиИтогоСуммаНДС"		, СуммаРубКоп(УслугиИтогоСуммаНДС		, ДанныеПечати.Валюта	, РегВалюта));
		
		ДанныеОбъекта.Вставить("УслугиПрописьюИтогоСуммаБезНДС"	, РаботаСКурсамиВалют.СформироватьСуммуПрописью(УслугиИтогоСуммаБезНДС	, ДанныеПечати.Валюта));
		ДанныеОбъекта.Вставить("УслугиПрописьюИтогоСуммаСНДС"	, РаботаСКурсамиВалют.СформироватьСуммуПрописью(УслугиИтогоСуммаСНДС	, ДанныеПечати.Валюта));
		ДанныеОбъекта.Вставить("УслугиПрописьюИтогоСуммаНДС"	, РаботаСКурсамиВалют.СформироватьСуммуПрописью(УслугиИтогоСуммаНДС		, ДанныеПечати.Валюта));
		
		ДанныеОбъекта.Вставить("РаботыИтогоСуммаБезНДС"	, ПечатьДокументовУНФ.ФорматСумм(РаботыИтогоСуммаБезНДС));
		ДанныеОбъекта.Вставить("РаботыИтогоСуммаСНДС"	, ПечатьДокументовУНФ.ФорматСумм(РаботыИтогоСуммаСНДС));
		ДанныеОбъекта.Вставить("РаботыИтогоСуммаНДС"	, ПечатьДокументовУНФ.ФорматСумм(РаботыИтогоСуммаНДС));
		
		ДанныеОбъекта.Вставить("ВалютаРаботыИтогоСуммаБезНДС"	, СуммаРубКоп(РаботыИтогоСуммаБезНДС	, ДанныеПечати.Валюта	, РегВалюта));
		ДанныеОбъекта.Вставить("ВалютаРаботыИтогоСуммаСНДС"		, СуммаРубКоп(РаботыИтогоСуммаСНДС		, ДанныеПечати.Валюта	, РегВалюта));
		ДанныеОбъекта.Вставить("ВалютаРаботыИтогоСуммаНДС"		, СуммаРубКоп(РаботыИтогоСуммаНДС		, ДанныеПечати.Валюта	, РегВалюта));
		
		ДанныеОбъекта.Вставить("РаботыПрописьюИтогоСуммаБезНДС"	, РаботаСКурсамиВалют.СформироватьСуммуПрописью(РаботыИтогоСуммаБезНДС	, ДанныеПечати.Валюта));
		ДанныеОбъекта.Вставить("РаботыПрописьюИтогоСуммаСНДС"	, РаботаСКурсамиВалют.СформироватьСуммуПрописью(РаботыИтогоСуммаСНДС	, ДанныеПечати.Валюта));
		ДанныеОбъекта.Вставить("РаботыПрописьюИтогоСуммаНДС"	, РаботаСКурсамиВалют.СформироватьСуммуПрописью(РаботыИтогоСуммаНДС		, ДанныеПечати.Валюта));
		
	КонецЕсли;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПредставлениеДанных(ДанныеДляПечати, ДлинаПоля = 12)
	
	Если ЗначениеЗаполнено(ДанныеДляПечати) Тогда
		Возврат ДанныеДляПечати;
	КонецЕсли;
	
	Возврат "____________";
		
КонецФункции

Функция СуммаРубКоп(Сумма, Валюта, ВалютаРегламентированногоУчета) Экспорт
	
	Если Валюта = ВалютаРегламентированногоУчета Тогда
		Рубли = Цел(Сумма);
		Копейки = Окр(100 * (Сумма - Рубли), 0, 1);
		СуммаРубКоп = "" 
			+ Формат(Рубли, "ЧДЦ=0; ЧГ=3,0")
			+ " руб. " 
			+ Цел(Копейки /10) 
			+ (Копейки - 10 * Цел(Копейки / 10))
			+" коп."
		;
	Иначе
		СуммаРубКоп = СуммаПлатежногоДокумента(Сумма, Ложь);
	КонецЕсли;
	
	Возврат СуммаРубКоп;
	
КонецФункции // СуммаРубКоп()

// Форматирует сумму банковского платежного документа.
//
// Параметры:
//  Сумма - Число - Сумма, которую необходимо отформатировать.
//  ВыводитьСуммуБезКопеек - Булево - Флаг представления суммы без копеек.
//
// Возвращаемое значение:
//  Результат - Строка - Отформатированная строка.
//
Функция СуммаПлатежногоДокумента(Сумма, ВыводитьСуммуБезКопеек) Экспорт
	
	Результат  = Сумма;
	ЦелаяЧасть = Цел(Сумма);
	
	Если Результат = ЦелаяЧасть Тогда
		
		Если ВыводитьСуммуБезКопеек Тогда
			
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат, СтрНайти(Результат, "="));
			
		Иначе
			
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
			
		КонецЕсли;
		
	Иначе
		
		Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СуммаПлатежногоДокумента()

Функция ПолучитьСтруктуруСтроки()
	
	СтрокаТаблицыТовары = Новый Структура;
	СтрокаТаблицыТовары.Вставить("НомерСтроки"		, "");
	СтрокаТаблицыТовары.Вставить("Продукт"			, "");
	СтрокаТаблицыТовары.Вставить("Содержание"		, "");
	СтрокаТаблицыТовары.Вставить("Полосность"		, "");
	СтрокаТаблицыТовары.Вставить("Бренд"			, "");
	
	СтрокаТаблицыТовары.Вставить("ДатаНачалаРекламы"	, "");
	СтрокаТаблицыТовары.Вставить("ДатаОкончанияРекламы"	, "");
	
	СтрокаТаблицыТовары.Вставить("РазмерРекламы"		, "");
	СтрокаТаблицыТовары.Вставить("РекламнаяКомпания"	, "");
	СтрокаТаблицыТовары.Вставить("СодержаниеСоглашения"	, "");
	СтрокаТаблицыТовары.Вставить("ОбъемРекламы"			, "");
	СтрокаТаблицыТовары.Вставить("МестоРазмещения"		, "");
	СтрокаТаблицыТовары.Вставить("Таргетинг"			, "");
	СтрокаТаблицыТовары.Вставить("СрокРазмещения"		, "");
	СтрокаТаблицыТовары.Вставить("Объем"				, "");
	
	
	СтрокаТаблицыТовары.Вставить("СуммаБезНДС"		, "");
	СтрокаТаблицыТовары.Вставить("СуммаСНДС"		, "");
	
	Возврат СтрокаТаблицыТовары;
	
КонецФункции

Функция ПолучитьПродукт(ИмяМакета, ОбъектСсылка)
	
	ОбъектЗаказ = ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЗаказПокупателя");
	Возврат ?(ОбъектЗаказ, ОбъектСсылка.Договор._Продукт, ОбъектСсылка._Продукт);
	
	//Если ИмяМакета = "ДоговорMSWord" Тогда
	//	Шаблон = ?(ОбъектЗаказ, ОбъектСсылка.Договор._Продукт, ОбъектСсылка._Продукт);
	//ИначеЕсли ИмяМакета = "ПриложениеMSWord" Тогда
	//	Шаблон = ?(ОбъектЗаказ, ОбъектСсылка._Соглашение._Продукт, ОбъектСсылка._Продукт);
	//КонецЕсли;
	
КонецФункции

Функция ПолучитьДвоичныеДанныеШаблона(ИмяМакета, ОбъектСсылка)
	
	ОбъектЗаказ = ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЗаказПокупателя");
	
	Если ИмяМакета = "ДоговорMSWord" Тогда
		Шаблон = ?(ОбъектЗаказ, ОбъектСсылка.Договор._ШаблонПечати, ОбъектСсылка._ШаблонПечати);
	ИначеЕсли ИмяМакета = "ПриложениеMSWord" Тогда
		Шаблон = ?(ОбъектЗаказ, ОбъектСсылка._Соглашение.ШаблонПечати, ОбъектСсылка.ШаблонПечати);
	КонецЕсли;
	
	ДанныеШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон, "Ссылка,Наименование,ФайлШаблон,Назначение,НеВыделятьПоляДокументаЦветом");
	
	Если Константы._Отладка.Получить() Тогда
		
		ПараметрыСистемы = _ОбщегоНазначенияВызовСервера.ПараметрыСистемы();
		ИмяФайла = ДанныеШаблона.ФайлШаблон.Наименование + ".docx";
		ДвоичныеДанные = Новый ДвоичныеДанные(ПараметрыСистемы.ПутьДоШаблонов + ИмяФайла);
		
		Возврат ДвоичныеДанные;
		
	Иначе
	
		ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ПараметрыДанныхФайла.ИдентификаторФормы = Новый УникальныйИдентификатор;
		ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Истина;
		
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ДанныеШаблона.ФайлШаблон, ПараметрыДанныхФайла);
		
		Если ЗначениеЗаполнено(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла) Тогда		
			Возврат ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);		
		КонецЕсли;
	КонецЕсли;
		
	Возврат Неопределено;
	//////
	
	Организация		= Справочники.Организации.ПустаяСсылка();
	Валюта			= Справочники.Валюты.ПустаяСсылка();
	ДатаДокумента	= ТекущаяДата();
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Организация 	= ОбъектСсылка.Организация;
		Валюта			= ОбъектСсылка.ВалютаДокумента;
		ДатаДокумента	= ОбъектСсылка.Дата;
	Иначе
		Организация 	= ОбъектСсылка.Организация;
		Валюта			= ОбъектСсылка.ВалютаРасчетов;
		ДатаДокумента	= ОбъектСсылка.ДатаДоговора;
	КонецЕсли;
	
	Отбор = Новый Структура("Валюта,Организация", Валюта, Организация);
	Шаблоны = РегистрыСведений._ШаблоныДокументов.ПолучитьПоследнее(ДатаДокумента, Отбор);
	Если ИмяМакета = "ДоговорMSWord" Тогда
		ИмяФайла = Шаблоны.ШаблонДоговора;
	ИначеЕсли ИмяМакета = "ПриложениеMSWord" Тогда
		ИмяФайла = Шаблоны.ШаблонПриложения;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяФайла) Тогда
		
		ПараметрыСистемы = _ОбщегоНазначенияВызовСервера.ПараметрыСистемы();
		ДвоичныеДанные = Новый ДвоичныеДанные(ПараметрыСистемы.ПутьДоШаблонов + ИмяФайла);
		
		Возврат ДвоичныеДанные;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


Функция ПолучитьДанныеДляПечати_Договор(МассивОбъектов, ПараметрыПечати = Неопределено)
	
	//МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//
	//Запрос = Новый Запрос;
	//Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	//
	//РеквизитыОтветственныеЛица = Новый Структура;
	//РеквизитыОтветственныеЛица.Вставить("_Подписант", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	//
	//ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц,, РеквизитыОтветственныеЛица);
	//
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	"""" КАК Номер,
	|	ДоговорыКонтрагентов.ДатаДоговора КАК Дата,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	ДоговорыКонтрагентов._ПодписьРуководителя КАК ПодписьРуководителя,
	|	Значение(Справочник.Подписи.ПустаяСсылка) КАК ПодписьГлавногоБухгалтера,
	|	ДоговорыКонтрагентов.ВалютаРасчетов КАК Валюта,
	|	ДоговорыКонтрагентов._КонтактноеЛицоПодписант КАК КонтактноеЛицоПодписант,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ЗНАЧЕНИЕ(справочник._Соглашения.Пустаяссылка) КАК Соглашение,
	|	ДоговорыКонтрагентов.Организация.БанковскийСчетПоУмолчанию КАК БанковскийСчетОрганизации,
	|	ДоговорыКонтрагентов.Владелец.БанковскийСчетПоУмолчанию КАК БанковскийСчетКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
		
	РезультатПоШапке = Запрос.Выполнить();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", РезультатПоШапке);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция ПолучитьДанныеДляПечати_ЗаказПокупателя(МассивОбъектов, ПараметрыПечати = Неопределено)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеДокументов.Ссылка КАК Ссылка,
	               |	ДанныеДокументов.ВалютаДокумента КАК Валюта
	               |ПОМЕСТИТЬ ТаблицаДанныхДокументов
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ДанныеДокументов
	               |ГДЕ
	               |	ДанныеДокументов.Ссылка В(&МассивОбъектов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таблица.Ссылка КАК Ссылка,
	               |	Таблица.НомерСтроки КАК НомерСтроки,
	               |	Таблица.Номенклатура КАК Номенклатура,
	               |	Таблица.Количество КАК Количество,
	               |	Таблица.Сумма / Таблица.Количество КАК Цена,
	               |	0 КАК СуммаСкидки,
	               |	Таблица.Сумма + Таблица.СуммаСкидкиНаценки + Таблица.СуммаАвтоматическойСкидки КАК СуммаБезСкидки,
	               |	Таблица.Сумма КАК Сумма,
	               |	Таблица.СтавкаНДС КАК СтавкаНДС,
	               |	Таблица.СуммаНДС КАК СуммаНДС,
	               |	Таблица._Бренд КАК Бренд,
	               |	Таблица._ДатаНачала КАК ДатаНачала,
	               |	Таблица._ДатаОкончания КАК ДатаОкончания,
	               |	Таблица._РекламнаяКомпания КАК РекламнаяКомпания,
	               |	Таблица.Содержание КАК Содержание,
	               |	Таблица._СодержаниеСоглашения КАК СодержаниеСоглашения,
	               |	Таблица._СезонныйКоэффициент КАК СезонныйКоэффициент,
	               |	Таблица._КоэффициентОпций КАК КоэффициентОпций,
	               |	Таблица._Журнал КАК Журнал,
	               |	Таблица._Пакет КАК Пакет,
	               |	Таблица._ЦенаПоПрайсу КАК ЦенаПоПрайсу,
	               |	Таблица._СрокОплаты КАК СрокОплаты
	               |ПОМЕСТИТЬ Товары
	               |ИЗ
	               |	Документ.ЗаказПокупателя.Запасы КАК Таблица
	               |ГДЕ
	               |	Таблица.Ссылка В(&МассивОбъектов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказПокупателя.Ссылка КАК Ссылка,
	               |	ЗаказПокупателя.Номер КАК Номер,
	               |	ЗаказПокупателя.Дата КАК Дата,
	               |	ЗаказПокупателя.Организация КАК Организация,
	               |	ЗаказПокупателя._Соглашение.ПодписьРуководителя КАК ПодписьРуководителя,
	               |	ЗаказПокупателя.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера,
	               |	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ЗаказПокупателя.ВалютаДокумента КАК Валюта,
	               |	ЗаказПокупателя._Соглашение.КонтактноеЛицоПодписант КАК КонтактноеЛицоПодписант,
	               |	ЗаказПокупателя.Контрагент КАК Контрагент,
	               |	ЗаказПокупателя.Договор КАК Договор,
	               |	ЗаказПокупателя._Соглашение КАК Соглашение,
	               |	ЗаказПокупателя.БанковскийСчет КАК БанковскийСчетОрганизации,
	               |	ЗаказПокупателя.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	               |	ЗаказПокупателя._Бренд КАК Бренд,
	               |	ЗаказПокупателя._РекламнаяКомпания КАК РекламнаяКомпания,
	               |	ЗаказПокупателя._ТипМероприятий КАК ТипМероприятий,
	               |	ЗаказПокупателя._Мероприятие КАК Мероприятие,
	               |	ЗаказПокупателя._Журнал КАК Журнал,
	               |	ЗаказПокупателя._Продукт КАК Продукт,
	               |	ЗаказПокупателя._ДатаНачала КАК ДатаНачала,
	               |	ЗаказПокупателя._ДатаОкончания КАК ДатаОкончания,
	               |	ЗаказПокупателя._СтатусПартнераНаМероприятии КАК СтатусПартнераНаМероприятии,
	               |	ЗаказПокупателя._СрокОплаты КАК СрокОплаты
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	               |		ПО ЗаказПокупателя.Ссылка = ДанныеДокументов.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.Ссылка КАК Ссылка,
	               |	Товары.Номенклатура КАК Номенклатура,
	               |	Товары.Номенклатура.Код КАК Код,
	               |	Товары.Номенклатура.Артикул КАК Артикул,
	               |	Товары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	               |	Товары.Количество КАК Количество,
	               |	Товары.Цена КАК Цена,
	               |	Товары.СуммаСкидки КАК СуммаСкидки,
	               |	Товары.СуммаБезСкидки КАК СуммаБезСкидки,
	               |	Товары.Сумма КАК Сумма,
	               |	Товары.СтавкаНДС КАК СтавкаНДС,
	               |	Товары.СуммаНДС КАК СуммаНДС,
	               |	Товары.Бренд КАК Бренд,
	               |	Товары.ДатаНачала КАК ДатаНачала,
	               |	Товары.ДатаОкончания КАК ДатаОкончания,
	               |	Товары.РекламнаяКомпания КАК РекламнаяКомпания,
	               |	Товары.Содержание КАК Содержание,
	               |	Товары.СодержаниеСоглашения КАК СодержаниеСоглашения,
	               |	Товары.СезонныйКоэффициент КАК СезонныйКоэффициент,
	               |	Товары.КоэффициентОпций КАК КоэффициентОпций,
	               |	Товары.Журнал КАК Журнал,
	               |	Товары.Пакет КАК Пакет,
	               |	Товары.ЦенаПоПрайсу КАК ЦенаПоПрайсу,
	               |	Товары.СрокОплаты КАК СрокОплаты
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Таблица.Ссылка КАК Ссылка,
	               |		Таблица.Номенклатура КАК Номенклатура,
	               |		Таблица.Количество КАК Количество,
	               |		Таблица.Цена КАК Цена,
	               |		Таблица.Сумма КАК Сумма,
	               |		Таблица.СуммаНДС КАК СуммаНДС,
	               |		Таблица.СтавкаНДС КАК СтавкаНДС,
	               |		Таблица.СуммаСкидки КАК СуммаСкидки,
	               |		Таблица.СуммаБезСкидки КАК СуммаБезСкидки,
	               |		Таблица.Бренд КАК Бренд,
	               |		Таблица.ДатаНачала КАК ДатаНачала,
	               |		Таблица.ДатаОкончания КАК ДатаОкончания,
	               |		Таблица.РекламнаяКомпания КАК РекламнаяКомпания,
	               |		Таблица.Содержание КАК Содержание,
	               |		Таблица.СодержаниеСоглашения КАК СодержаниеСоглашения,
	               |		Таблица.НомерСтроки КАК НомерСтроки,
	               |		Таблица.СезонныйКоэффициент КАК СезонныйКоэффициент,
	               |		Таблица.КоэффициентОпций КАК КоэффициентОпций,
	               |		Таблица.Журнал КАК Журнал,
	               |		Таблица.Пакет КАК Пакет,
	               |		Таблица.ЦенаПоПрайсу КАК ЦенаПоПрайсу,
	               |		Таблица.СрокОплаты КАК СрокОплаты
	               |	ИЗ
	               |		Товары КАК Таблица) КАК Товары
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Товары.НомерСтроки";
		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[2]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[ПакетРезультатовЗапроса.Количество() - 1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции
