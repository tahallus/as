#Область ПрограммныйИнтерфейс

#Область МеткиОтборов

Процедура ПрикрепитьМеткуОтбора(Форма, ИмяПоляОтбора, ИмяГруппыРодителя, Метка, НаименованиеМетки, ИмяСписка = "", ИмяПараметраЗапроса="",
	ИмяТЧДанныеМеток = "ДанныеМеток", ИмяЭлементаПраваяПанель = "ПраваяПанель", РеквизитыОтбораПравойПанели = "",
	ИмяОтбора = "", ИмяТЧДанныеОтборов = "ДанныеОтборов") Экспорт
	
	Если (СтрНачинаетсяС(ИмяГруппыРодителя, "ГруппаОтборСПо_") Или СтрНачинаетсяС(ИмяГруппыРодителя, "ГруппаОтборОтДо_")) И Не ЗначениеЗаполнено(Метка) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПредопределенныйОтбор = СтрНайти(ИмяГруппыРодителя, "_") = 0;
	
	Если ИмяОтбора = "" И ЭтоПредопределенныйОтбор И Форма.Элементы[ИмяГруппыРодителя].ПодчиненныеЭлементы.Количество() > 0 Тогда
		ИмяОтбора = Форма.Элементы[ИмяГруппыРодителя].ПодчиненныеЭлементы[0].Имя;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(ИмяТЧДанныеОтборов, Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Форма);
	Если ЭтоПредопределенныйОтбор И СтруктураПоиска[ИмяТЧДанныеОтборов] <> Неопределено Тогда
		НайденныйОтборМассив = Форма[ИмяТЧДанныеОтборов].НайтиСтроки(Новый Структура("ИмяОтбора", ИмяОтбора));
		Если НайденныйОтборМассив.Количество() > 0 Тогда
			Отбор = НайденныйОтборМассив[0];
			Если Отбор.ДоступенРежимВыбораГрупп Тогда
				Если Отбор.ВключенРежимВыбораГрупп Тогда
					Если СтрНайти(ИмяПоляОтбора, ".Родитель") = 0 Тогда
						ИмяПоляОтбора = ИмяПоляОтбора + ".Родитель";
					КонецЕсли;
				Иначе
					Если СтрНайти(ИмяПоляОтбора, ".Родитель") > 0 Тогда
						ИмяПоляОтбора = СтрЗаменить(ИмяПоляОтбора, ".Родитель", "");
					КонецЕсли;
				КонецЕсли;
				Отбор.Поле = ИмяПоляОтбора;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СоздатьЭлементыМеток(Форма, ИмяПоляОтбора, ИмяГруппыРодителя, Метка, НаименованиеМетки, ИмяСписка, ИмяПараметраЗапроса, ИмяТЧДанныеМеток, ИмяОтбора);
	ОбновитьЭлементыМеток(Форма,, ИмяТЧДанныеМеток);
	
	УстановитьЗаголовокПравойПанелиМобильныйКлиент(Форма, ИмяЭлементаПраваяПанель, ИмяТЧДанныеМеток, РеквизитыОтбораПравойПанели);
	//НастроитьПанельОтборовМобильныйКлиент(Форма, ИмяЭлементаПраваяПанель, ИмяТЧДанныеМеток, РеквизитыОтбораПравойПанели);
	
КонецПроцедуры

Процедура ПрикрепитьМеткиОтбораИзМассива(Форма, ИмяПоляОтбора, ИмяГруппыРодителя, МассивМеток) Экспорт
	
	Для Каждого значениеМетки Из МассивМеток Цикл
		СоздатьЭлементыМеток(Форма, ИмяПоляОтбора, ИмяГруппыРодителя, значениеМетки, Строка(значениеМетки));
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьЭлементыМеток(Форма, ИмяПоляОтбора, ИмяГруппыРодителя, Метка, НаименованиеМетки, ИмяСписка = "", ИмяПараметраЗапроса="", ИмяТЧДанныеМеток = "ДанныеМеток", ИмяОтбора = "") Экспорт
	
	Элементы = Форма.Элементы;
	ДанныеМеток = Форма[ИмяТЧДанныеМеток];
	
	Если ДанныеМеток.Количество() > 0 Тогда
		Если ИмяСписка <> "" И ДанныеМеток[0].Свойство("ИмяСписка") Тогда
			СтруктураПоискаЗначенияОтбора = Новый Структура("Метка, ИмяСписка, ИмяПоляОтбора", Метка, ИмяСписка, ИмяПоляОтбора);
		Иначе
			СтруктураПоискаЗначенияОтбора = Новый Структура("Метка, ИмяПоляОтбора", Метка, ИмяПоляОтбора);
		КонецЕсли;
		Если ДанныеМеток.НайтиСтроки(СтруктураПоискаЗначенияОтбора).Количество() > 0 Тогда
			// добавляется значение отбора, по которому уже есть отбор
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Метка)=Тип("Массив") Тогда
		СписокМеток = Новый СписокЗначений;
		СписокМеток.ЗагрузитьЗначения(Метка);
		Метка = СписокМеток;
	КонецЕсли; 
	
	СтрокаМеток = ДанныеМеток.Добавить();
	НавигационнаяСсылкаФС = ПолучитьНачалоИмениМетки(ИмяТЧДанныеМеток) + СтрокаМеток.ПолучитьИдентификатор();
	
	СтрокаМеток.Метка = Метка;
	СтрокаМеток.ИмяПоляОтбора		= ИмяПоляОтбора;
	СтрокаМеток.ИмяГруппыРодителя	= ИмяГруппыРодителя;
	
	ПредставлениеМетки = СокрЛП(Строка(НаименованиеМетки));

	СтрокаМеток.ПредставлениеМетки = ПредставлениеМетки;
	Если СтрокаМеток.Свойство("ИмяСписка") Тогда
		СтрокаМеток.ИмяСписка = ИмяСписка;
	КонецЕсли;
	Если СтрокаМеток.Свойство("ИмяПараметраЗапроса") Тогда
		СтрокаМеток.ИмяПараметраЗапроса= ИмяПараметраЗапроса;
	КонецЕсли;
	
	Если СтрокаМеток.Свойство("ИмяОтбора") Тогда
		СтрокаМеток.ИмяОтбора = ИмяОтбора;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяСписка = "", ИспользованиеОтбора=Неопределено, 
	ИмяТЧДанныеМеток = "ДанныеМеток", ИмяОтбора="", ИмяТЧДанныеОтборов = "ДанныеОтборов") Экспорт
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(ИмяТЧДанныеОтборов, Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Форма);
	Если СтруктураПоиска[ИмяТЧДанныеОтборов]<> Неопределено Тогда
		Если ИмяОтбора = "" Тогда
			НайденнаяМеткаМассив = Форма[ИмяТЧДанныеОтборов].НайтиСтроки(Новый Структура("Поле", ИмяПоляОтбора));
			Если НайденнаяМеткаМассив.Количество() > 0 Тогда
				ИмяОтбора = НайденнаяМеткаМассив[0].ИмяОтбора;
			КонецЕсли;
		КонецЕсли;
		
		НайденныйОтборМассив = Форма[ИмяТЧДанныеОтборов].НайтиСтроки(Новый Структура("ИмяОтбора", ИмяОтбора));
		Если НайденныйОтборМассив.Количество() > 0 Тогда
			НайденныйОтбор = НайденныйОтборМассив[0];
			Если Не НайденныйОтбор.ЭтоПредопределенныйОтбор Или НайденныйОтбор.ДоступенРежимВыбораГрупп Тогда
				УстановитьНестандартныйОтборСписка(Форма, СписокОтбора, ИмяСписка, ИспользованиеОтбора, ИмяТЧДанныеМеток, ИмяОтбора, НайденныйОтбор, ИмяПоляОтбора);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СписокЗначений = Новый СписокЗначений;
	Для каждого стр Из Форма[ИмяТЧДанныеМеток] Цикл
		Если стр.ИмяПоляОтбора = ИмяПоляОтбора И (ИмяСписка = "" ИЛИ (стр.Свойство("ИмяСписка") И ИмяСписка = стр.ИмяСписка)) Тогда
			Если ТипЗнч(стр.Метка) = Тип("СписокЗначений") Тогда
				Для каждого значениеСписка Из стр.Метка Цикл
				    СписокЗначений.Добавить(значениеСписка.Значение);
				КонецЦикла; 
			Иначе	
				СписокЗначений.Добавить(стр.Метка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользованиеОтбора = Неопределено Тогда
		ИспользованиеОтбора = (СписокЗначений.Количество() > 0);
	КонецЕсли;
	
	ИмяЭлемента = "Отбор" + СтрЗаменить(ИмяПоляОтбора, ".", "");
	ЭлементФормы = Форма.Элементы.Найти(ИмяЭлемента);
	Если ЭлементФормы<>Неопределено И 
		ТипЗнч(ЭлементФормы)=Тип("ПолеФормы") И 
		ЭлементФормы.Вид=ВидПоляФормы.ПолеВвода И 
		(ЭлементФормы.ВыборГруппИЭлементов=ГруппыИЭлементы.Группы ИЛИ 
		ЭлементФормы.ВыборГруппИЭлементов=ГруппыИЭлементы.ГруппыИЭлементы) Тогда
		ТекВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	Иначе
		ТекВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокОтбора, ИмяПоляОтбора, СписокЗначений,
		ТекВидСравнения, , ИспользованиеОтбора);
	
	Если ИмяПоляОтбора = "НомерКартинкиОплаты" Или ИмяПоляОтбора = "СтатусОплаты" Тогда
		ПереместитьЭлементыОтбораВГруппуИЛИ(СписокОтбора, "ГруппаОплата");
	КонецЕсли;
	
	Если ИмяПоляОтбора = "НомерКартинкиОтгрузки" Или ИмяПоляОтбора = "СтатусОтгрузки" Тогда
		ПереместитьЭлементыОтбораВГруппуИЛИ(СписокОтбора, "ГруппаОтгрузка");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяПараметраЗапроса, ИмяТЧДанныеМеток = "ДанныеМеток") Экспорт
	
	МассивОтбора = Новый Массив;
	СтрокиЗначенийОтбора = Форма[ИмяТЧДанныеМеток].НайтиСтроки(Новый Структура("ИмяПоляОтбора", ИмяПоляОтбора));
	Для каждого строкаОтборов Из СтрокиЗначенийОтбора Цикл
		Если ТипЗнч(строкаОтборов.Метка)=Тип("СписокЗначений") Тогда
			Для каждого значениеСписка Из строкаОтборов.Метка Цикл
				МассивОтбора.Добавить(значениеСписка.Значение);
			КонецЦикла;
		Иначе	
			МассивОтбора.Добавить(строкаОтборов.Метка);
		КонецЕсли;
	КонецЦикла;
	
	СписокОтбора.Параметры.УстановитьЗначениеПараметра("БезОтбора", НЕ ЗначениеЗаполнено(МассивОтбора));
	СписокОтбора.Параметры.УстановитьЗначениеПараметра(ИмяПараметраЗапроса, МассивОтбора);
	
КонецПроцедуры

Функция ПолучитьНачалоИмениМетки(ИмяТЧДанныеМеток) Экспорт
	
	Если ИмяТЧДанныеМеток = "ДанныеМеток" Тогда
		НачалоИмениМетки = "Метка_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокПП" Тогда
		НачалоИмениМетки = "МеткаПП_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокККМ" Тогда
		НачалоИмениМетки = "МеткаККМ_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокОбмен" Тогда
		НачалоИмениМетки = "МеткаОбменыССайтом_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокОплатаКартами" Тогда
		НачалоИмениМетки = "МеткаОплатаКартами_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокПередачаНаКомиссию" Тогда
		НачалоИмениМетки = "МеткаПК_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокОтчетКомиссионера" Тогда
		НачалоИмениМетки = "МеткаОК_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокПереоценкаУКомиссионера" Тогда
		НачалоИмениМетки = "МеткаПР_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокСписаниеУКомиссионера" Тогда
		НачалоИмениМетки = "МеткаСК_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокВозвратОтКомиссионера" Тогда
		НачалоИмениМетки = "МеткаВК_";
	Иначе
		НачалоИмениМетки = "";
	КонецЕсли;
	
	Возврат НачалоИмениМетки;
	
КонецФункции

Процедура ОбновитьЭлементыМеток(Форма, СписокГруппФормыДляУдаленияДобавленныхЭлементов=Неопределено, ИмяТЧДанныеМеток = "ДанныеМеток") Экспорт
	
	Элементы = Форма.Элементы;
	ДанныеМеток = Форма[ИмяТЧДанныеМеток];
	
	Если СписокГруппФормыДляУдаленияДобавленныхЭлементов=Неопределено Тогда
		СписокГруппФормыДляУдаленияДобавленныхЭлементов = ПолучитьСписокИмяГруппыРодителя(ДанныеМеток);
	КонецЕсли;
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для каждого группаФормы Из СписокГруппФормыДляУдаленияДобавленныхЭлементов Цикл
		Если Форма.Элементы.Найти(группаФормы) <> Неопределено Тогда
			ДобавитьМеткиДляУдаления(Форма.Элементы[группаФормы], УдаляемыеЭлементы);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	НомерМетки = 0;
	Для Каждого ДанныеМетки Из ДанныеМеток Цикл
		
		Если Форма.Элементы.Найти(ДанныеМетки.ИмяГруппыРодителя) <> Неопределено Тогда
			Если (СтрНачинаетсяС(ДанныеМетки.ИмяГруппыРодителя, "ГруппаОтборСПо_") Или СтрНачинаетсяС(ДанныеМетки.ИмяГруппыРодителя, "ГруппаОтборОтДо_")) И (ТипЗнч(ДанныеМетки.Метка) = Тип("Дата") Или ТипЗнч(ДанныеМетки.Метка) = Тип("Число")) Тогда
				НомерМетки = НомерМетки + 1;
				Продолжить;
			КонецЕсли;
			
			ГруппаРодитель = Форма.Элементы[ДанныеМетки.ИмяГруппыРодителя];
			ГруппаРодитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаРодитель.РастягиватьПоВертикали = Ложь;
			
			Если ГруппаРодитель.ПодчиненныеЭлементы.Количество() > 0 Тогда
				ПолеОтборДоступность = ГруппаРодитель.ПодчиненныеЭлементы[0].Доступность;
			Иначе
				ПолеОтборДоступность = Истина;
			КонецЕсли;
			
			
			// Создаем группу
			ЭлементВспомогательнаяГруппа = Элементы.Добавить(ПолучитьНачалоИмениМетки(ИмяТЧДанныеМеток)+ "ВспомогательнаяГруппа_" + НомерМетки,Тип("ГруппаФормы"), ГруппаРодитель);
			ЭлементВспомогательнаяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ЭлементВспомогательнаяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
			ЭлементВспомогательнаяГруппа.ОтображатьЗаголовок = Ложь;
			ЭлементВспомогательнаяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ЭлементВспомогательнаяГруппа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			
			// Создаем картинку
			ЭлементДекорация = Элементы.Добавить(ПолучитьНачалоИмениМетки(ИмяТЧДанныеМеток)+ "РадиусКнопкиЛевый_"  + НомерМетки, Тип("ДекорацияФормы"), ЭлементВспомогательнаяГруппа);
			ЭлементДекорация.Вид = ВидДекорацииФормы.Картинка;
			Если ГруппаРодитель.Доступность Тогда
				ЭлементДекорация.Картинка = БиблиотекаКартинок.РадиусКнопкиЛевыйСерый;
			Иначе
				ЭлементДекорация.Картинка = БиблиотекаКартинок.РадиусКнопкиЛевыйБелый;
			КонецЕсли;
			ЭлементДекорация.РазмерКартинки = РазмерКартинки.Растянуть;
			ЭлементДекорация.РастягиватьПоВертикали = Истина;
			ЭлементДекорация.Высота = 1;
			ЭлементДекорация.Ширина = 1;
			
			// Создаем группу
			ЭлементВспомогательнаяГруппа2 = Элементы.Добавить(ПолучитьНачалоИмениМетки(ИмяТЧДанныеМеток)+ "ВспомогательнаяГруппа2_" + НомерМетки,Тип("ГруппаФормы"), ЭлементВспомогательнаяГруппа);
			ЭлементВспомогательнаяГруппа2.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ЭлементВспомогательнаяГруппа2.Отображение = ОтображениеОбычнойГруппы.Нет;
			ЭлементВспомогательнаяГруппа2.ОтображатьЗаголовок = Ложь;
			ЭлементВспомогательнаяГруппа2.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ЭлементВспомогательнаяГруппа2.ЦветФона = Новый Цвет(242, 242, 242);
			ЭлементВспомогательнаяГруппа2.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
			
			Картинка = Неопределено;
			Если Форма.ИмяФормы = "Документ.ЗаказПокупателя.Форма.ФормаСпискаЗаказНаряда"
				Или Форма.ИмяФормы = "Документ.ЗаказПокупателя.Форма.ФормаСписка" Тогда
				Если Форма[ИмяТЧДанныеМеток][НомерМетки].ИмяГруппыРодителя = "ГруппаОтборОплата" Или Форма[ИмяТЧДанныеМеток][НомерМетки].ИмяГруппыРодителя = "ГруппаОтборОтгрузка" Тогда
					Картинка = ДобавитьКартинкуКМетке(СокрЛП(Строка(Форма[ИмяТЧДанныеМеток][НомерМетки].ПредставлениеМетки)));
				КонецЕсли;
			КонецЕсли;
		
			Если Картинка <> Неопределено Тогда
				// Создаем картинку
				ЭлементДекорация = Элементы.Добавить(ПолучитьНачалоИмениМетки(ИмяТЧДанныеМеток)+ "Картинка_"  + НомерМетки, Тип("ДекорацияФормы"), ЭлементВспомогательнаяГруппа2);
				ЭлементДекорация.Вид = ВидДекорацииФормы.Картинка;
				ЭлементДекорация.Картинка = Картинка;
				ЭлементДекорация.РазмерКартинки = РазмерКартинки.АвтоРазмер;
				ЭлементДекорация.Высота = 1;
				ЭлементДекорация.Ширина = 2;
			КонецЕсли;
			
			// Создаем надпись
			ПолеМетки = Элементы.Добавить(ПолучитьНачалоИмениМетки(ИмяТЧДанныеМеток)+ "ВыбранноеЗначение" +НомерМетки, Тип("ДекорацияФормы"), ЭлементВспомогательнаяГруппа2);
			ПолеМетки.Вид = ВидДекорацииФормы.Надпись;;
			
			ПредставлениеМетки = СокрЛП(Строка(Форма[ИмяТЧДанныеМеток][НомерМетки].ПредставлениеМетки));
			Если СтрДлина(ПредставлениеМетки) > 32 Тогда
				ПредставлениеМетки = Лев(ПредставлениеМетки, 29) + " ...";
			КонецЕсли;
			ПолеМетки.Заголовок = ПредставлениеМетки;
			ПолеМетки.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			
			Если Картинка <> Неопределено И СтрДлина(ПолеМетки.Заголовок) > 28 Тогда
				ПолеМетки.Шрифт = Новый Шрифт(,9, Истина);
			ИначеЕсли СтрДлина(ПолеМетки.Заголовок) > 29 Тогда
				ПолеМетки.Шрифт = Новый Шрифт(,9, Истина);
			Иначе
				ПолеМетки.Шрифт = Новый Шрифт(,, Истина);
			КонецЕсли;
			ПолеМетки.ЦветТекста = Новый Цвет(77,77,77);
			ПолеМетки.Высота = 1;
			ПолеМетки.РастягиватьПоГоризонтали = Ложь;
			ПолеМетки.Доступность = ПолеОтборДоступность;
			
			// Создаем кнопку удаления
			ЭлементУдалитьОтбор = Элементы.Добавить(ПолучитьНачалоИмениМетки(ИмяТЧДанныеМеток) + НомерМетки, Тип("ДекорацияФормы"), ЭлементВспомогательнаяГруппа2);
			ЭлементУдалитьОтбор.Вид = ВидДекорацииФормы.Картинка;
			ЭлементУдалитьОтбор.Картинка = БиблиотекаКартинок.ОчиститьЗначение12х12;
			ЭлементУдалитьОтбор.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			ЭлементУдалитьОтбор.Высота = 1;
			ЭлементУдалитьОтбор.Ширина = 1;
			ЭлементУдалитьОтбор.Гиперссылка = Истина;
			ЭлементУдалитьОтбор.УстановитьДействие("Нажатие", "Подключаемый_МеткаОбработкаНавигационнойСсылки");
			ЭлементУдалитьОтбор.Доступность = ПолеОтборДоступность;
			
			// Создаем картинку
			ЭлементДекорация2 = Элементы.Добавить(ПолучитьНачалоИмениМетки(ИмяТЧДанныеМеток)+ "РадиусКнопкиПравый_"  + НомерМетки, Тип("ДекорацияФормы"), ЭлементВспомогательнаяГруппа);
			ЭлементДекорация2.Вид = ВидДекорацииФормы.Картинка;
			Если ГруппаРодитель.Доступность Тогда
				ЭлементДекорация2.Картинка = БиблиотекаКартинок.РадиусКнопкиПравыйСерый;
			Иначе
				ЭлементДекорация2.Картинка = БиблиотекаКартинок.РадиусКнопкиПравыйБелый;
			КонецЕсли;
			ЭлементДекорация2.РазмерКартинки = РазмерКартинки.Растянуть;
			ЭлементДекорация2.РастягиватьПоВертикали = Истина;
			ЭлементДекорация2.Высота = 1;
			ЭлементДекорация2.Ширина = 1;
			
			НомерМетки = НомерМетки + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Мобильный клиент.
// Параметры
//	РеквизитыОтбораПравойПанели - строка разделенная запятыми.
Процедура УстановитьЗаголовокПравойПанелиМобильныйКлиент(Форма, ИмяЭлементаПраваяПанель = "ПраваяПанель", ИмяТЧДанныеМеток = "ДанныеМеток", РеквизитыОтбораПравойПанели = "") Экспорт
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементФормыПраваяПанель = Форма.Элементы.Найти(ИмяЭлементаПраваяПанель);
	// На форме должна быть правая панель и ...
	Если ЭлементФормыПраваяПанель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьОтборУстановлен(Форма, ИмяЭлементаПраваяПанель, ИмяТЧДанныеМеток, РеквизитыОтбораПравойПанели) Тогда
		ЭлементФормыПраваяПанель.Заголовок = НСтр("ru = 'Отборы (установлены)'");
	Иначе
		ЭлементФормыПраваяПанель.Заголовок = НСтр("ru = 'Отборы'");
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтборДинамическихСписков()

Функция ПроверитьОтборУстановлен(Форма, ИмяЭлементаПраваяПанель, ИмяТЧДанныеМеток, РеквизитыОтбораПравойПанели)
	
	ОтборУстановлен = Ложь;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОтборПериод") 
		И ЗначениеЗаполнено(Форма.ОтборПериод) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	// ... реквизит "ДанныеМеток".
	Попытка
		Если Форма[ИмяТЧДанныеМеток].Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	Исключение КонецПопытки;
	
	Если РеквизитыОтбораПравойПанели <> "" Тогда
		СтруктураРеквизитыОтбора = ОбщегоНазначенияПереопределяемый.СтрокаВСтруктуру(РеквизитыОтбораПравойПанели, ",");
		
		Для Каждого КлючЗначение Из СтруктураРеквизитыОтбора Цикл
			Если ЗначениеЗаполнено(Форма[КлючЗначение.Ключ]) Тогда
				Если ТипЗнч(Форма[КлючЗначение.Ключ]) = Тип("Булево") Тогда
					ОтборУстановлен = Форма[КлючЗначение.Ключ];
				Иначе
					Возврат Истина;
				КонецЕсли;
				
				Если ОтборУстановлен Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОтборУстановлен;
	
КонецФункции

// Мобильный клиент - процедура настраивает панель отборов в формах списка и выбора
// Параметры
//	Форма - настраиваемая форма списка или выбора
//	ИмяЭлементаПраваяПанель - строка с именем панели с отборами
//	ИмяТЧДанныеМеток - строка с именем табличной части с данными отборов
//	РеквизитыОтбораПравойПанели - строка с именами полей отбора, разделенными запятыми
//	НеотображаемыеЭлементы - строка с именами элементов формы панели отборов, видимость которых необходимо отключить
//
Процедура НастроитьПанельОтборовМобильныйКлиент(Форма, ИмяЭлементаПраваяПанель = "ПраваяПанель", ИмяТЧДанныеМеток = "ДанныеМеток", РеквизитыОтбораПравойПанели = "", НеотображаемыеЭлементы = "СвернутьОтборы,ДекорацияРазвернутьОтборы", СкрыватьПанельОтборов = Ложь) Экспорт
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	// Видимость панели отборов - в мобильном клиенте панель всегда видима - она показывается на отдельном экране
	УстановитьЗаголовокПравойПанелиМобильныйКлиент(Форма, ИмяЭлементаПраваяПанель, ИмяТЧДанныеМеток, РеквизитыОтбораПравойПанели);
	
	МассивНеотображаемыхЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НеотображаемыеЭлементы, ",");
	
	Для каждого ИмяЭлемента Из МассивНеотображаемыхЭлементов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "Видимость", Ложь);
	КонецЦикла;
	
	// Это реализовано в 8.3.13, уберём, после того, как перенесут функциональность в 8.3.12
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлементаПраваяПанель, "ОтображатьЗаголовок", Истина);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() И МобильныйКлиентУНФКлиентСервер.ЭтоБольшойЭкранИлиПланшет() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлементаПраваяПанель, "Поведение", ПоведениеОбычнойГруппы.Свертываемая);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПраваяПанельСтраницы", "РастягиватьПоГоризонтали", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлементаПраваяПанель, "РастягиватьПоГоризонтали", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ГруппаСписокИПанель", "Группировка", ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
		Если СкрыватьПанельОтборов Тогда
			Форма.Элементы[ИмяЭлементаПраваяПанель].Скрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СвернутьРазвернутьОтборыНаСервере(Форма, Видимость, СтруктураИменЭлементов = Неопределено, пШирина = 25) Экспорт
	
	Элементы = Форма.Элементы;
	
	ИнтерфейсТакси = (ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси);
	Если СтруктураИменЭлементов = Неопределено Тогда
		Если Элементы.Найти("ДекорацияРазвернутьОтборы")=Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ФильтрыНастройкиИДопИнфо.Видимость	= Видимость;
		Элементы.ДекорацияРазвернутьОтборы.Видимость	= НЕ Видимость;
		Элементы.ПраваяПанель.Ширина = ?(Видимость, ?(ИнтерфейсТакси, пШирина, пШирина-1), 0);
	Иначе
		Элементы[СтруктураИменЭлементов.ФильтрыНастройкиИДопИнфо].Видимость	= Видимость;
		Элементы[СтруктураИменЭлементов.ДекорацияРазвернутьОтборы].Видимость = НЕ Видимость;
		Элементы[СтруктураИменЭлементов.ПраваяПанель].Ширина = ?(Видимость, ?(ИнтерфейсТакси, пШирина, пШирина-1), 0);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьМеткуОтбораСервер(Форма, СписокОтбора, МеткаИД, ИмяСписка = "", ИмяТЧДанныеМеток = "ДанныеМеток", УстановитьНовыйОтбор = Истина,
	ИмяЭлементаПраваяПанель = "ПраваяПанель", РеквизитыОтбораПравойПанели = "", ИмяТЧДанныеОтборов = "ДанныеОтборов") Экспорт
	
	ДанныеМеток = Форма[ИмяТЧДанныеМеток];
	
	СтрокаМеток = ДанныеМеток[Число(МеткаИД)];
	ИмяПоляОтбора = СтрокаМеток.ИмяПоляОтбора;
	ИмяОтбора = "";
	Если СтрокаМеток.Свойство("ИмяОтбора") Тогда
		ИмяОтбора = СтрокаМеток.ИмяОтбора;
	КонецЕсли;
	ИмяПараметраЗапроса = ?(СтрокаМеток.Свойство("ИмяПараметраЗапроса"), СтрокаМеток.ИмяПараметраЗапроса,"");
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = ПолучитьСписокИмяГруппыРодителя(ДанныеМеток);
	
	ДанныеМеток.Удалить(СтрокаМеток);
	
	ОбновитьЭлементыМеток(Форма, СписокГруппФормыДляУдаленияДобавленныхЭлементов, ИмяТЧДанныеМеток);
	Если УстановитьНовыйОтбор Тогда
		Если ИмяПараметраЗапроса="" Тогда
			УстановитьОтборСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяСписка,,ИмяТЧДанныеМеток,ИмяОтбора, ИмяТЧДанныеОтборов);
		Иначе
			УстановитьПараметрЗапросаСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяПараметраЗапроса);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗаголовокПравойПанелиМобильныйКлиент(Форма, ИмяЭлементаПраваяПанель, ИмяТЧДанныеМеток, РеквизитыОтбораПравойПанели);
	
КонецПроцедуры

Процедура УдалитьМеткиОтбораСервер(Форма, СписокОтбора, Метки, ИмяСписка = "", ИмяТЧДанныеМеток = "ДанныеМеток") Экспорт
	
	Элементы = Форма.Элементы;
	ДанныеМеток = Форма[ИмяТЧДанныеМеток];
	
	Метки.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = ПолучитьСписокИмяГруппыРодителя(ДанныеМеток);
	
	Для каждого МеткаИД Из Метки Цикл
		
		СтрокаМеток = ДанныеМеток[Число(МеткаИД.Значение)];
		ИмяПоляОтбора = СтрокаМеток.ИмяПоляОтбора;
		ИмяПараметраЗапроса = ?(СтрокаМеток.Свойство("ИмяПараметраЗапроса"), СтрокаМеток.ИмяПараметраЗапроса,"");
		
		ДанныеМеток.Удалить(СтрокаМеток);
		
		Если ИмяПараметраЗапроса="" Тогда
			УстановитьОтборСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяСписка);
		Иначе
			УстановитьПараметрЗапросаСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяПараметраЗапроса);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьЭлементыМеток(Форма, СписокГруппФормыДляУдаленияДобавленныхЭлементов, ИмяТЧДанныеМеток);
	
КонецПроцедуры

Функция ПолучитьСписокИмяГруппыРодителя(ДанныеМеток) Экспорт
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = ДанныеМеток.Выгрузить();
	СписокГруппФормыДляУдаленияДобавленныхЭлементов.Свернуть("ИмяГруппыРодителя","");
	
	Возврат СписокГруппФормыДляУдаленияДобавленныхЭлементов.ВыгрузитьКолонку("ИмяГруппыРодителя");
	
КонецФункции

Процедура СохранитьНастройкиОтборов(Знач Форма, ИмяСписка = "", СтруктураИменЭлементов = Неопределено, ВариантОтборовФормы="", УстановитьОтборПоПериоду = Истина, ИмяТЧДанныеМеток = "ДанныеМеток", ИмяТЧДанныеОтборов = "ДанныеОтборов", ИмяГруппыОтборов = "ГруппаОтборы") Экспорт
	
	ИмяКлючаОбъекта = СтрЗаменить(Форма.ИмяФормы,".","")+ВариантОтборовФормы;
	
	Если ИмяСписка = "" Тогда
		ДанныеМеток = Форма[ИмяТЧДанныеМеток].Выгрузить();
	Иначе
		ДанныеМеток = Форма[ИмяТЧДанныеМеток].Выгрузить();
	КонецЕсли;
	
	Если СтруктураИменЭлементов = Неопределено Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ДанныеМеток", ДанныеМеток);
		Если УстановитьОтборПоПериоду Тогда
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ОтборПоПериоду", Форма.ОтборПериод);
		КонецЕсли;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ВидимостьПанелиОтборов", Форма.Элементы.ФильтрыНастройкиИДопИнфо.Видимость);
	Иначе
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ДанныеМеток", ДанныеМеток);
		Если УстановитьОтборПоПериоду Тогда
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ОтборПоПериоду", Форма[СтруктураИменЭлементов.ОтборПериод]);
		КонецЕсли; 
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ВидимостьПанелиОтборов", Форма.Элементы[СтруктураИменЭлементов.ФильтрыНастройкиИДопИнфо].Видимость);
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(ИмяТЧДанныеОтборов, Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Форма);
	Если СтруктураПоиска[ИмяТЧДанныеОтборов]<> Неопределено Тогда
		ДанныеОтборов = Форма[ИмяТЧДанныеОтборов].Выгрузить();
		ДобавитьОтключенныеПредопределенныеОтборы(Форма, ДанныеОтборов, ИмяГруппыОтборов);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ДанныеОтборов", ДанныеОтборов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьНастройкиОтборов(Форма, СписокОтбора, ИмяСписка = "", 
	СтруктураИменЭлементов = Неопределено, СтруктураИменПолейОтборов = Неопределено,
	ВариантОтборовФормы="", УстановитьОтборПоПериоду = Истина, ИмяТЧДанныеМеток = "ДанныеМеток", СписокПолейИсключений = Неопределено,
	ИмяТЧДанныеОтборов = "ДанныеОтборов", ИмяГруппыОтборов = "ГруппаОтборы") Экспорт
	
	ИмяКлючаОбъекта = СтрЗаменить(Форма.ИмяФормы,".","")+ВариантОтборовФормы;
	// Отбор по полям правой панели
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ДанныеМеток");
	ЕстьОтборТекущегоСписка = Ложь;
	
	ДанныеОтборов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ДанныеОтборов");
	
	ГруппаОтборы = Форма.Элементы.Найти(ИмяГруппыОтборов);
	
	Если ГруппаОтборы <> Неопределено И ГруппаОтборы.ПодчиненныеЭлементы.Количество() > 0 Тогда
		Если ГруппаОтборы.ПодчиненныеЭлементы[0].Ширина = 0 Тогда
			Форма.Элементы[ИмяГруппыОтборов].ПодчиненныеЭлементы[0].Ширина = 28;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьОтборыНаИзменения(Форма, СписокОтбора, ДанныеОтборов, СохраненноеЗначение, ИмяГруппыОтборов, ИмяСписка);
	Если ТипЗнч(ДанныеОтборов) = Тип("ТаблицаЗначений") И ДанныеОтборов.Количество() > 0 Тогда
		Форма[ИмяТЧДанныеОтборов].Загрузить(ДанныеОтборов);
		ОтобразитьОтборыПриСозданииНаСервере(Форма, ДанныеОтборов, ИмяГруппыОтборов);
		УстановитьЗначенияДляНестандартныхОтборов(Форма, СохраненноеЗначение, ДанныеОтборов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		
		// Удалим поля из списка исключений восстановления отборов
		Если ТипЗнч(СписокПолейИсключений) = Тип("СписокЗначений")
			И ТипЗнч(СохраненноеЗначение) = Тип("ТаблицаЗначений")
			И НЕ СохраненноеЗначение.Колонки.Найти("ИмяПоляОтбора") = Неопределено Тогда
			
			ПараметрыОтбора = Новый Структура("ИмяПоляОтбора",);
			
			Для Каждого ПолеДляИсключения Из СписокПолейИсключений Цикл
				
				ПараметрыОтбора.ИмяПоляОтбора = ПолеДляИсключения.Значение;
				НайденныеСтрокиОтбора = СохраненноеЗначение.НайтиСтроки(ПараметрыОтбора);
				
				Для Каждого СтрокаОтбора Из НайденныеСтрокиОтбора Цикл
					СохраненноеЗначение.Удалить(СтрокаОтбора);
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// Проверить сохраненные отборы, удалить строки, которых нет ДоступныхПоляхКомпоновкиДанных
		Если СохраненноеЗначение.Колонки.Найти("ИмяПараметраЗапроса")=Неопределено Тогда
			МассивДоступныхПолейКомпоновкиДанных = Новый Массив;
			Для каждого ПолеОтбора Из СписокОтбора.Отбор.ДоступныеПоляОтбора.Элементы Цикл
				МассивДоступныхПолейКомпоновкиДанных.Добавить(Строка(ПолеОтбора.Поле));
			КонецЦикла;
			МассивУдалитьОтборы = Новый Массив;
			Для каждого СохраненноеПолеОтбора Из СохраненноеЗначение Цикл
				Если СтрНайти(СохраненноеПолеОтбора.ИмяПоляОтбора,".")<>0 Тогда
					// Для полей табличной части, которые представлены через точку
					МассивПолей = СтрРазделить(СохраненноеПолеОтбора.ИмяПоляОтбора, ".");
					Если МассивПолей.Количество()>0 Тогда
						СохраненноеПолеОтбораИмя = МассивПолей[0];
					КонецЕсли;
				Иначе
					СохраненноеПолеОтбораИмя = СохраненноеПолеОтбора.ИмяПоляОтбора;
				КонецЕсли;
				Если МассивДоступныхПолейКомпоновкиДанных.Найти(СохраненноеПолеОтбораИмя)=Неопределено Тогда
					МассивУдалитьОтборы.Добавить(СохраненноеПолеОтбора);
				КонецЕсли;
			КонецЦикла;
			Для каждого строкаУдалить Из МассивУдалитьОтборы Цикл
				СохраненноеЗначение.Удалить(строкаУдалить);
			КонецЦикла;
		КонецЕсли; 
		
		Форма[ИмяТЧДанныеМеток].Загрузить(СохраненноеЗначение);
		
		// Установить отборы списка по данным в таблице ДанныеМеток
		ЕстьИмяСписка = Ложь; // для форм с несколькими динамическими списками
		ЕстьИмяПараметраЗапроса = Ложь; // для форм, где отбор устанавливается через параметр запроса динамического списка
		
		СтрокаПолейТаблицыДляСвертки = "ИмяПоляОтбора";
		Если СохраненноеЗначение.Колонки.Найти("ИмяСписка")<>Неопределено Тогда
			СтрокаПолейТаблицыДляСвертки = СтрокаПолейТаблицыДляСвертки + ",ИмяСписка";
			ЕстьИмяСписка = Истина;
		КонецЕсли;
		Если СохраненноеЗначение.Колонки.Найти("ИмяПараметраЗапроса")<>Неопределено  Тогда
			СтрокаПолейТаблицыДляСвертки = СтрокаПолейТаблицыДляСвертки + ",ИмяПараметраЗапроса";
			ЕстьИмяПараметраЗапроса = Истина;
		КонецЕсли;
		ТаблицаИменПолейОтборов = СохраненноеЗначение.Скопировать(,СтрокаПолейТаблицыДляСвертки);
		ТаблицаИменПолейОтборов.Свернуть(СтрокаПолейТаблицыДляСвертки, "");
		Для каждого строкаПолейОтборов Из ТаблицаИменПолейОтборов Цикл //цикл по именам полей отбора
			
			// Если нет колонки "ИмяСписка", отбор через компоновку
			// Если есть имя списка, нужно проверить, что поле отбора принадлежит этому списку
			ПолеОтбораПринадлежитСписку = НЕ ЕстьИмяСписка ИЛИ (ЕстьИмяСписка И строкаПолейОтборов.ИмяСписка = ИмяСписка);
			
			Если (ЕстьИмяПараметраЗапроса И строкаПолейОтборов.ИмяПараметраЗапроса<>""
				И ПолеОтбораПринадлежитСписку) Тогда
				// отбор через установку параметров запроса списка
				УстановитьПараметрЗапросаСписка(Форма, СписокОтбора, строкаПолейОтборов.ИмяПоляОтбора, строкаПолейОтборов.ИмяПараметраЗапроса, ИмяТЧДанныеМеток);
				ЕстьОтборТекущегоСписка = Истина;
			ИначеЕсли ПолеОтбораПринадлежитСписку Тогда
				// отбор через компоновку
				ИмяОтбора = "";
				НайденнаяМеткаМассив = Форма[ИмяТЧДанныеМеток].НайтиСтроки(Новый Структура("ИмяПоляОтбора", строкаПолейОтборов.ИмяПоляОтбора));
				Если НайденнаяМеткаМассив.Количество() > 0 Тогда
					Если НайденнаяМеткаМассив[0].Свойство("ИмяОтбора") Тогда
						ИмяОтбора = НайденнаяМеткаМассив[0].ИмяОтбора;
					КонецЕсли;
				КонецЕсли;
				УстановитьОтборСписка(Форма, СписокОтбора, строкаПолейОтборов.ИмяПоляОтбора,, Истина, ИмяТЧДанныеМеток, ИмяОтбора, ИмяТЧДанныеОтборов);
				ЕстьОтборТекущегоСписка = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновитьЭлементыМеток(Форма,, ИмяТЧДанныеМеток);
		
	КонецЕсли;
	
	// Отбор по периоду
	Если УстановитьОтборПоПериоду Тогда
		Если СтруктураИменЭлементов = Неопределено Тогда
			Форма.ОтборПериод = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ОтборПоПериоду");
			Форма.ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Форма.ОтборПериод);
			Если СтруктураИменПолейОтборов<> Неопределено И СтруктураИменПолейОтборов.Свойство("ОтборПериод") Тогда
				ИмяПоляОтборПериод = СтруктураИменПолейОтборов.ОтборПериод;
			Иначе
				ИмяПоляОтборПериод = "Дата";
			КонецЕсли;
			
			РаботаСОтборамиКлиентСервер.УстановитьОтборПоПериоду(СписокОтбора.КомпоновщикНастроек.Настройки.Отбор, Форма.ОтборПериод.ДатаНачала, Форма.ОтборПериод.ДатаОкончания, ИмяПоляОтборПериод);
		Иначе
			Форма[СтруктураИменЭлементов.ОтборПериод] = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ОтборПоПериоду");
			Форма[СтруктураИменЭлементов.ПредставлениеПериода] = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Форма[СтруктураИменЭлементов.ОтборПериод]);
			РаботаСОтборамиКлиентСервер.УстановитьОтборПоПериоду(СписокОтбора.КомпоновщикНастроек.Настройки.Отбор, 
				Форма[СтруктураИменЭлементов.ОтборПериод].ДатаНачала, 
				Форма[СтруктураИменЭлементов.ОтборПериод].ДатаОкончания,
				?(СтруктураИменЭлементов.Свойство("ИмяПоляОтбора"), СтруктураИменЭлементов.ИмяПоляОтбора, "Дата"));
		КонецЕсли;
	КонецЕсли;
	
	// Мобильный клиент
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НастроитьПанельОтборовМобильныйКлиент(Форма,,,,,Истина);
	Иначе
		// Видимость панели отборов - получаем из настройки
		Если СтруктураИменЭлементов = Неопределено Тогда
			Если Не ЕстьОтборТекущегоСписка И (НЕ УстановитьОтборПоПериоду ИЛИ НЕ ЗначениеЗаполнено(Форма.ОтборПериод)) Тогда
				СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ВидимостьПанелиОтборов", Истина);
				Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
					СвернутьРазвернутьОтборыНаСервере(Форма, СохраненноеЗначение, СтруктураИменЭлементов);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Не ЕстьОтборТекущегоСписка И (НЕ УстановитьОтборПоПериоду ИЛИ НЕ ЗначениеЗаполнено(Форма[СтруктураИменЭлементов.ОтборПериод])) Тогда
				СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ВидимостьПанелиОтборов", Истина);
				Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
					СвернутьРазвернутьОтборыНаСервере(Форма, СохраненноеЗначение, СтруктураИменЭлементов);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьМеткиДляУдаления(ЭлементГруппа, УдаляемыеЭлементы)
	
	Для Каждого СтрокаМеток Из ЭлементГруппа.ПодчиненныеЭлементы Цикл
		Если СтрокаМеток.Вид=ВидПоляФормы.ПолеВвода Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеЭлементы.Добавить(СтрокаМеток);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереместитьЭлементыОтбораВГруппуИЛИ(СписокОтбора, ВидОперацииОтбора)
	
	НаборЭлементов = СписокОтбора.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	ГруппаОтбораСуществует = Ложь;
	ТребуетсяСозданиеГруппы = Ложь;
	
	Для Каждого ЭлементОтбора Из НаборЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
			И ЭлементОтбора.Представление = ВидОперацииОтбора Тогда
			ГруппаОтбораСуществует = Истина;
			ГруппаОтбора = ЭлементОтбора;
			Прервать;			
		КонецЕсли;
		
	КонецЦикла;

	Если Не ГруппаОтбораСуществует Тогда
		ГруппаОтбора = СписокОтбора.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
		ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ГруппаОтбора.Представление = ВидОперацииОтбора;
		ГруппаОтбора.Использование = Истина;
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	
	Если ВидОперацииОтбора = "ГруппаОплата" Тогда
		Для Каждого ЭлементОтбора Из НаборЭлементов Цикл
			
			Если Не ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
				И (Строка(ЭлементОтбора.ЛевоеЗначение) = "НомерКартинкиОплаты" 
				Или Строка(ЭлементОтбора.ЛевоеЗначение) = "СтатусОплаты") Тогда
				СтрокиКУдалению.Добавить(ЭлементОтбора);
				
				УдалитьДублирующийЭлементОсновногоОтбораИзГруппыОтбора(ГруппаОтбора, ЭлементОтбора);
				
				НовыйЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора,ЭлементОтбора);
			КонецЕсли
		КонецЦикла;
	КонецЕсли;
	
	Если ВидОперацииОтбора = "ГруппаОтгрузка" Тогда
		Для Каждого ЭлементОтбора Из НаборЭлементов Цикл
			Если Не ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
				И (Строка(ЭлементОтбора.ЛевоеЗначение) = "НомерКартинкиОтгрузки" 
				Или Строка(ЭлементОтбора.ЛевоеЗначение) = "СтатусОтгрузки") Тогда
				
				СтрокиКУдалению.Добавить(ЭлементОтбора);
				
				УдалитьДублирующийЭлементОсновногоОтбораИзГруппыОтбора(ГруппаОтбора, ЭлементОтбора);
				
				НовыйЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора,ЭлементОтбора);
			КонецЕсли
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлементКУдалению Из СтрокиКУдалению Цикл
		НаборЭлементов.Удалить(ЭлементКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДублирующийЭлементОсновногоОтбораИзГруппыОтбора(ГруппаОтбора, ЭлементОтбора)
	Для Каждого ЭлементГруппы Из ГруппаОтбора.Элементы Цикл
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = (ЭлементГруппы.ЛевоеЗначение) 
			Тогда
			ГруппаОтбора.Элементы.Удалить(ЭлементГруппы);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область НастройкиОтборовОбъектов

// Заполняет списка выбора поле отбора "Статус оплаты"
//
// Параметры:
//   Форма - Форма списка с полем отбора
//   ИмяПоляОтбора - Имя поля для которого необходимо сформировать список отбора
Процедура ЗаполнитьСписокВыбораОтборОплата(Форма, ИмяПоляОтбора, СОтступом = Истина, МассивИсключений = Неопределено) Экспорт 
	
	КомпонентыФС = Новый Массив;
	
	Если МассивИсключений = Неопределено Тогда
		МассивИсключений = Новый Массив;
	КонецЕсли;
	
	Отступ = ?(СОтступом, "   ", "");
	
	Если МассивИсключений.Найти(11) = Неопределено Тогда
		
		// Группа
		КомпонентыФС.Добавить(БиблиотекаКартинок.ГруппаБезОплаты);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Без оплаты'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("Без оплаты", СтрокаПредставления);
		
	КонецЕсли;
	
	// Подчиненные элементы
	
	Если МассивИсключений.Найти(2) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыНеПросрочено);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Без оплаты (не просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("БезОплатыНеПросрочено", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(4) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыОжидаетсяСегодня);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Без оплаты (ждем сегодня)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("БезОплатыСегодня", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(6) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыПросрочено);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Без оплаты (просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("БезОплатыПросрочено", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(12) = Неопределено Тогда
		
		// Группа
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(БиблиотекаКартинок.ГруппаОплаченЧастично);
		КомпонентыФС.Добавить(НСтр("ru='Оплачен частично'"));
		КомпонентыФС.Добавить(" ");
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("Оплачен частично", СтрокаПредставления);
		
	КонецЕсли;
	
	// Подчиненные элементы
	
	Если МассивИсключений.Найти(1) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноНеПросрочено);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Оплачен частично (не просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("ОплаченЧастичноНеПросрочено", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(3) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноОжидаетсяСегодня);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Оплачен частично (ждем сегодня)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("ОплаченЧастичноСегодня", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(5) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноПросрочено);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Оплачен частично (просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("ОплаченЧастичноПросрочено", СтрокаПредставления);
		
	КонецЕсли;

	// Прочие отборы первого уровня
	
	Если МассивИсключений.Найти(0) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченПолностью);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Оплачен полностью'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("Оплачен полностью", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(7) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(БиблиотекаКартинок.СПереплатой);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='С переплатой'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("СПереплатой", СтрокаПредставления);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет списка выбора поле отбора "Статус отгрузки"
//
// Параметры:
//   Форма - Форма списка с полем отбора
//   ИмяПоляОтбора - Имя поля для которого необходимо сформировать список отбора
Процедура ЗаполнитьСписокВыбораОтборОтгрузка(Форма, ИмяПоляОтбора, СОтступом = Истина, МассивИсключений = Неопределено) Экспорт 
	
	КомпонентыФС = Новый Массив;
	
	Если МассивИсключений = Неопределено Тогда
		МассивИсключений = Новый Массив;
	КонецЕсли;
	
	Отступ = ?(СОтступом, "   ", "");
	
	Если МассивИсключений.Найти(11) = Неопределено Тогда
		
		// Группа
		КомпонентыФС.Добавить(БиблиотекаКартинок.ГруппаБезОплаты);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Без отгрузки'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("Без отгрузки", СтрокаПредставления);
		
	КонецЕсли;
	
	// Подчиненные элементы
	
	Если МассивИсключений.Найти(2) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыНеПросрочено);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Без отгрузки (не просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("БезОтгрузкиНеПросрочено", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(4) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыОжидаетсяСегодня);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Без отгрузки (ждем сегодня)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("БезОтгрузкиСегодня", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(6) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыПросрочено);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Без отгрузки (просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("БезОтгрузкиПросрочено", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(12) = Неопределено Тогда
		
		// Группа
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(БиблиотекаКартинок.ГруппаОплаченЧастично);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Отгружен частично'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("Отгружен частично", СтрокаПредставления);
		
	КонецЕсли;
	
	// Подчиненные элементы
	
	Если МассивИсключений.Найти(1) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноНеПросрочено);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Отгружен частично (не просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("ОтгруженЧастичноНеПросрочено", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(3) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноОжидаетсяСегодня);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Отгружен частично (ждем сегодня)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("ОтгруженЧастичноСегодня", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(5) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноПросрочено);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Отгружен частично (просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("ОтгруженЧастичноПросрочено", СтрокаПредставления);
		
	КонецЕсли;

	// Прочие отборы первого уровня
	
	Если МассивИсключений.Найти(0) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченПолностью);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Отгружен полностью'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("Отгружен полностью", СтрокаПредставления);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает форматированную строку представления метки статуса оплаты
//
// Параметры:
//   ЗначениеМетки - Значение метки отбора
Функция СформироватьПредставлениеМеткиОплата(ЗначениеМетки) Экспорт
	
	КомпонентыФС = Новый Массив;
	
	Если ЗначениеМетки = "Без оплаты" Тогда
		// Группа
		КомпонентыФС.Добавить(БиблиотекаКартинок.ГруппаБезОплаты);
		КомпонентыФС.Добавить(НСтр("ru=' Без оплаты'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	// Подчиненные элементы
	
	Если ЗначениеМетки = "БезОплатыНеПросрочено" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыНеПросрочено);
		КомпонентыФС.Добавить(НСтр("ru=' Без оплаты (не просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "БезОплатыСегодня" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыОжидаетсяСегодня);
		КомпонентыФС.Добавить(НСтр("ru=' Без оплаты (ждем сегодня)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "БезОплатыПросрочено" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыПросрочено);
		КомпонентыФС.Добавить(НСтр("ru=' Без оплаты (просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	// Группа
	Если ЗначениеМетки = "Оплачен частично" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ГруппаОплаченЧастично);
		КомпонентыФС.Добавить(НСтр("ru=' Оплачен частично'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	// Подчиненные элементы
	Если ЗначениеМетки = "ОплаченЧастичноНеПросрочено" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноНеПросрочено);
		КомпонентыФС.Добавить(НСтр("ru=' Оплачен частично (не просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "ОплаченЧастичноСегодня" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноОжидаетсяСегодня);
		КомпонентыФС.Добавить(НСтр("ru=' Оплачен частично (ждем сегодня)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "ОплаченЧастичноПросрочено" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноПросрочено);
		КомпонентыФС.Добавить(НСтр("ru=' Оплачен частично (просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	// Прочие отборы первого уровня
	Если ЗначениеМетки = "Оплачен полностью" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченПолностью);
		КомпонентыФС.Добавить(НСтр("ru=' Оплачен полностью'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "СПереплатой" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.СПереплатой);
		КомпонентыФС.Добавить(НСтр("ru=' С переплатой'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
КонецФункции

// Возвращает форматированную строку представления метки статуса отгрузки
//
// Параметры:
//   ЗначениеМетки - Значение метки отбора
Функция СформироватьПредставлениеМеткиОтгрузка(ЗначениеМетки) Экспорт
	
	КомпонентыФС = Новый Массив;
	
	Если ЗначениеМетки = "Без отгрузки" Тогда
		// Группа
		КомпонентыФС.Добавить(БиблиотекаКартинок.ГруппаБезОплаты);
		КомпонентыФС.Добавить(НСтр("ru=' Без отгрузки'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	// Подчиненные элементы
	
	Если ЗначениеМетки = "БезОтгрузкиНеПросрочено" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыНеПросрочено);
		КомпонентыФС.Добавить(НСтр("ru=' Без отгрузки (не просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "БезОтгрузкиСегодня" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыОжидаетсяСегодня);
		КомпонентыФС.Добавить(НСтр("ru=' Без отгрузки (ждем сегодня)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "БезОтгрузкиПросрочено" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыПросрочено);
		КомпонентыФС.Добавить(НСтр("ru=' Без отгрузки (просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	// Группа
	Если ЗначениеМетки = "Отгружен частично" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ГруппаОплаченЧастично);
		КомпонентыФС.Добавить(НСтр("ru=' Отгружен частично'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	// Подчиненные элементы
	Если ЗначениеМетки = "ОтгруженЧастичноНеПросрочено" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноНеПросрочено);
		КомпонентыФС.Добавить(НСтр("ru=' Отгружен частично (не просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "ОтгруженЧастичноСегодня" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноОжидаетсяСегодня);
		КомпонентыФС.Добавить(НСтр("ru=' Отгружен частично (ждем сегодня)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "ОтгруженЧастичноПросрочено" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноПросрочено);
		КомпонентыФС.Добавить(НСтр("ru=' Отгружен частично (просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	// Прочие отборы первого уровня
	Если ЗначениеМетки = "Отгружен полностью" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченПолностью);
		КомпонентыФС.Добавить(НСтр("ru=' Отгружен полностью'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
КонецФункции

// Возвращает числовое значение соответствующее статусу оплаты
//
// Параметры:
//   СтатусОплаты - Выбранный статус оплаты
Функция НомерКартинкиПоСтатусуОплаты(ЗначениеМетки) Экспорт
	
	Если ЗначениеМетки = "БезОплатыНеПросрочено" 
		Или ЗначениеМетки = "БезОтгрузкиНеПросрочено" Тогда
		Возврат 2;
	КонецЕсли;
	
	Если ЗначениеМетки = "БезОплатыСегодня"
		Или ЗначениеМетки = "БезОплатыСегодня" Тогда
		Возврат 4;
	КонецЕсли;
	
	Если ЗначениеМетки = "БезОплатыПросрочено"
		Или ЗначениеМетки = "БезОтгрузкиПросрочено"Тогда
		Возврат 6;
	КонецЕсли;
	
	Если ЗначениеМетки = "ОплаченЧастичноНеПросрочено"
		Или ЗначениеМетки = "ОтгруженЧастичноНеПросрочено"Тогда
		Возврат 1;
	КонецЕсли;
	
	Если ЗначениеМетки = "ОплаченЧастичноСегодня"
		Или ЗначениеМетки = "ОтгруженЧастичноСегодня"Тогда
		Возврат 3;
	КонецЕсли;
	
	Если ЗначениеМетки = "ОплаченЧастичноПросрочено"
		Или ЗначениеМетки = "ОтгруженЧастичноПросрочено"Тогда
		Возврат 5;
	КонецЕсли;
	
	Если ЗначениеМетки = "СПереплатой" Тогда
		Возврат 7;
	КонецЕсли;
	
КонецФункции

// Возвращает массив исключений номеров картинок, из коллекции картинок "Статусы оплаты", для формы списка документа
//
// Параметры:
//   ТипДокумента - Тип документа формы списка
Функция МассивИсключенийПоТипуДокумента(ТипДокумента) Экспорт
	
	МассивИсключений = Новый Массив;
	
	Если ТипДокумента = "АктВыполненныхРабот" 
		Или ТипДокумента = "ДополнительныеРасходы"
		Или ТипДокумента = "ОтчетКомитенту"
		Или ТипДокумента = "ОтчетКомиссионера"
		Или ТипДокумента = "ПриемИПередачаВРемонт"
		Или ТипДокумента = "РасходнаяНакладная"
		Или ТипДокумента = "ПриходнаяНакладная" Тогда
		
		МассивИсключений.Добавить(3);
		МассивИсключений.Добавить(4);
		МассивИсключений.Добавить(5);
		МассивИсключений.Добавить(6);
		МассивИсключений.Добавить(11);
		МассивИсключений.Добавить(12);

	КонецЕсли;
	
	Если ТипДокумента = "ЗаказНаряд" 
		Или ТипДокумента = "ЗаказПоставщику"
		Или ТипДокумента = "СчетНаОплату" Тогда
		
		МассивИсключений.Добавить(7);
		
	КонецЕсли;
	
	Возврат МассивИсключений;
	
	
КонецФункции

#КонецОбласти

#Область ДополнительныеОтборы

Функция ПараметрыДляОткрытияФормыСНастройкамиОтборов(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ИмяРеквизитаСписка = "Список";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
		ИмяГруппыОтборов = "ГруппаОтборы";
		ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчанию";
	Иначе
		ИмяРеквизитаСписка = ДополнительныеПараметры.ИмяРеквизитаСписка;
		ИмяТЧДанныеОтборов = ДополнительныеПараметры.ИмяТЧДанныеОтборов;
		ИмяГруппыОтборов = ДополнительныеПараметры.ИмяГруппыОтборов;
		ИмяПредопределенныеОтборыПоУмолчанию = ДополнительныеПараметры.ИмяПредопределенныеОтборыПоУмолчанию;
	КонецЕсли;
	
	ОтборыДляИсключения = Неопределено;
	ДополнительныеПараметры.Свойство("ОтборыДляИсключения", ОтборыДляИсключения);
	
	Список = Форма[ИмяРеквизитаСписка];
	
	СтруктураПараметров = Новый Структура;
	
	ДанныеОтборовТЗ = Форма.РеквизитФормыВЗначение(ИмяТЧДанныеОтборов);
	ПредопределенныеОтборыТЗ = ОпределитьПредопределенныеОтборы(Форма, ДанныеОтборовТЗ, ИмяГруппыОтборов);
	ДоступныеОтборы = ПолучитьТаблицуДоступныхОтборов(Список, ПредопределенныеОтборыТЗ, ДанныеОтборовТЗ, ОтборыДляИсключения);
	
	АдресДанныеОтборов = ПоместитьВоВременноеХранилище(ДанныеОтборовТЗ, Новый УникальныйИдентификатор);
	АдресПредопределенныеОтборы = ПоместитьВоВременноеХранилище(ПредопределенныеОтборыТЗ, Новый УникальныйИдентификатор);
	АдресДоступныеОтборы = ПоместитьВоВременноеХранилище(ДоступныеОтборы, Новый УникальныйИдентификатор);
	
	СтруктураПараметров.Вставить("АдресПредопределенныеОтборы", АдресПредопределенныеОтборы);
	СтруктураПараметров.Вставить("АдресДанныеОтборов", АдресДанныеОтборов);
	СтруктураПараметров.Вставить("АдресДоступныеОтборы", АдресДоступныеОтборы);
	СтруктураПараметров.Вставить("АдресПредопределенныеОтборыПоУмолчанию", Форма[ИмяПредопределенныеОтборыПоУмолчанию]);
	
	Возврат СтруктураПараметров
	
КонецФункции // ()

Процедура НастройкаОтборовЗавершение(Форма, АдресВыбранныеОтборы, АдресУдаленныеОтборы, СтруктураИмен = Неопределено) Экспорт

	Если СтруктураИмен = Неопределено Тогда
		ИмяРеквизитаСписка = "Список";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
		ИмяГруппыОтборов = "ГруппаОтборы";
	Иначе
		ИмяРеквизитаСписка = СтруктураИмен.ИмяРеквизитаСписка;
		ИмяТЧДанныеМеток = СтруктураИмен.ИмяТЧДанныеМеток;
		ИмяТЧДанныеОтборов = СтруктураИмен.ИмяТЧДанныеОтборов;
		ИмяГруппыОтборов = СтруктураИмен.ИмяГруппыОтборов;
	КонецЕсли;
	
	ВыбранныеОтборы = ПолучитьИзВременногоХранилища(АдресВыбранныеОтборы);
	УдаленныеОтборы = ПолучитьИзВременногоХранилища(АдресУдаленныеОтборы);
	
	УдаляемыеМетки = Новый Массив;
	ОтобразитьОтборы(Форма, ВыбранныеОтборы, УдаленныеОтборы, УдаляемыеМетки, ИмяГруппыОтборов, ИмяРеквизитаСписка);
	
	// Удаляем метки у удаленных отборов
	Для каждого ИмяГруппыРодителя Из УдаляемыеМетки Цикл
		СтрокиДляУдаления = Форма[ИмяТЧДанныеМеток].НайтиСтроки(Новый Структура("ИмяГруппыРодителя", ИмяГруппыРодителя));
		Для каждого СтрокаДанныеМеток Из СтрокиДляУдаления Цикл
			МеткаИД = Форма[ИмяТЧДанныеМеток].Индекс(СтрокаДанныеМеток);
			РаботаСОтборами.УдалитьМеткуОтбораСервер(Форма, Форма[ИмяРеквизитаСписка], МеткаИД);
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма[ИмяРеквизитаСписка].КомпоновщикНастроек.Настройки.Отбор,,СтрокаДанныеМеток.ИмяОтбора);
		КонецЦикла;
	КонецЦикла;
	
	Форма[ИмяТЧДанныеОтборов].Загрузить(ВыбранныеОтборы);
	
КонецПроцедуры

Процедура Подключаемый_ОтборПриИзменении(Форма, ЭлементИмя, ЭлементРодительИмя, ИмяРеквизитаСписка="Список", ИмяТЧДанныеМеток="ДанныеМеток", ИмяТЧДанныеОтборов="ДанныеОтборов") Экспорт
	
	ВыбранноеЗначение = Форма[ЭлементИмя];
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) И (Не СтрНачинаетсяС(ЭлементРодительИмя, "ГруппаОтборСПо_") И Не СтрНачинаетсяС(ЭлементРодительИмя, "ГруппаОтборОтДо_")) Тогда
		Возврат;
	КонецЕсли;
	
	// Обрабатываем отбор с типом булево
	Если СтрНачинаетсяС(ЭлементИмя, "ОтборДаНет_") Тогда
		Если ВыбранноеЗначение = "Да" Тогда
			ВыбранноеЗначение = Истина;
		ИначеЕсли ВыбранноеЗначение = "Нет" Тогда
			ВыбранноеЗначение = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеЗначения = "";
	
	Если СтрНачинаетсяС(ЭлементРодительИмя, "ГруппаОтборСПо_") Или СтрНачинаетсяС(ЭлементРодительИмя, "ГруппаОтборОтДо_") Тогда
		Если СтрНачинаетсяС(ЭлементИмя, "ОтборОт_") Тогда
			ПредставлениеЗначения = "от " + Строка(ВыбранноеЗначение);
		ИначеЕсли СтрНачинаетсяС(ЭлементИмя, "ОтборДо_") Тогда
			ПредставлениеЗначения = "до " + Строка(ВыбранноеЗначение);
		ИначеЕсли СтрНачинаетсяС(ЭлементИмя, "ОтборС_") Тогда
			ПредставлениеЗначения = "с " + Строка(ВыбранноеЗначение);
		ИначеЕсли СтрНачинаетсяС(ЭлементИмя, "ОтборПо_") Тогда
			ПредставлениеЗначения = "по " + Строка(ВыбранноеЗначение);
		КонецЕсли;
		
		ИмяОтбора = РаботаСОтборамиКлиентСервер.ПолучитьИмяОтбора(ЭлементИмя, Форма[ИмяТЧДанныеОтборов]);
		МассивМеток = Форма[ИмяТЧДанныеМеток].НайтиСтроки(Новый Структура("ИмяОтбора", ИмяОтбора));
		Для каждого Метка Из МассивМеток Цикл
			Если СтрНайти(Метка.ПредставлениеМетки, Форма.Элементы[ЭлементИмя].Заголовок) > 0 Тогда
				РаботаСОтборами.УдалитьМеткуОтбораСервер(Форма, Форма[ИмяРеквизитаСписка], Форма[ИмяТЧДанныеМеток].Индекс(Метка),,,,,,ИмяТЧДанныеОтборов);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВыбранноеЗначениеТип = ТипЗнч(ВыбранноеЗначение);
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) И Не ВыбранноеЗначениеТип = Тип("Дата") И Не ВыбранноеЗначениеТип = Тип("Число") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОтбора = РаботаСОтборамиКлиентСервер.ПолучитьИмяОтбора(ЭлементИмя, Форма[ИмяТЧДанныеОтборов]);
	
	НайденныйОтборМассив = Форма[ИмяТЧДанныеОтборов].НайтиСтроки(Новый Структура("ИмяОтбора", ИмяОтбора));
	Если НайденныйОтборМассив.Количество() > 0 Тогда
		ИмяПоляОтбора = НайденныйОтборМассив[0].Поле;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли;

	РаботаСОтборами.ПрикрепитьМеткуОтбора(Форма, ИмяПоляОтбора, ЭлементРодительИмя, ВыбранноеЗначение, ПредставлениеЗначения,ИмяРеквизитаСписка,,ИмяТЧДанныеМеток,,,ИмяОтбора,ИмяТЧДанныеОтборов);
	РаботаСОтборами.УстановитьОтборСписка(Форма, Форма[ИмяРеквизитаСписка], ИмяПоляОтбора,ИмяРеквизитаСписка,,ИмяТЧДанныеМеток,ИмяОтбора,ИмяТЧДанныеОтборов);
	
	Если НЕ СтрНачинаетсяС(ЭлементРодительИмя, "ГруппаОтборСПо_") И Не СтрНачинаетсяС(ЭлементРодительИмя, "ГруппаОтборОтДо_") Тогда
		Форма[ЭлементИмя] = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура Подключаемый_ОтборОчистка(Форма, ЭлементИмя, ИмяСписка = "Список", ИмяТЧДанныеМеток = "ДанныеМеток", ИмяТЧДанныеОтборов="ДанныеОтборов") Экспорт
	
	Если СтрНачинаетсяС(ЭлементИмя, "ОтборС_") 
		Или СтрНачинаетсяС(ЭлементИмя, "ОтборПо_")
		Или СтрНачинаетсяС(ЭлементИмя, "ОтборОт_")
		Или СтрНачинаетсяС(ЭлементИмя, "ОтборДо_")
		Тогда
		
		ДанныеМеток = Форма[ИмяТЧДанныеМеток];
		ДанныеОтборов = Форма[ИмяТЧДанныеОтборов];
		
		ИмяОтбора = РаботаСОтборамиКлиентСервер.ПолучитьИмяОтбора(ЭлементИмя, ДанныеОтборов); 
		МассивМеток = ДанныеМеток.НайтиСтроки(Новый Структура("ИмяОтбора", ИмяОтбора));
		Для каждого Метка Из МассивМеток Цикл
			Если СтрНайти(Метка.ПредставлениеМетки, Форма.Элементы[ЭлементИмя].Заголовок) > 0 Тогда
				МеткаИД =  ДанныеМеток.Индекс(Метка);
				СтроковыеФункцииКлиентСервер.СтрокаВЧисло(МеткаИД);
				РаботаСОтборами.УдалитьМеткуОтбораСервер(Форма, Форма[ИмяСписка], МеткаИД,ИмяСписка,ИмяТЧДанныеМеток,,,,ИмяТЧДанныеОтборов);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ОпределитьПорядокПредопределенныхОтборов(Форма, ИмяГруппыОтборов = "ГруппаОтборы", ИмяРеквизитаОтборовПоУмолчанию = "ПредопределенныеОтборыПоУмолчанию") Экспорт

	Если Форма.Элементы.Найти(ИмяГруппыОтборов) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуществующиеРеквизиты = Форма.ПолучитьРеквизиты();
	ИменаРеквизитов = Новый Массив;
	Для каждого Реквизит Из СуществующиеРеквизиты Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	ПредопределенныеОтборыПоУмолчанию = Новый ТаблицаЗначений;
	ПредопределенныеОтборыПоУмолчанию.Колонки.Добавить("ИмяОтбора", Новый ОписаниеТипов("Строка"));
	ПредопределенныеОтборыПоУмолчанию.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка"));
	ПредопределенныеОтборыПоУмолчанию.Колонки.Добавить("ЗаголовокДляНастройки", Новый ОписаниеТипов("Строка"));
	ПредопределенныеОтборыПоУмолчанию.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	
	Для каждого ПодчиненныйЭлемент Из Форма.Элементы[ИмяГруппыОтборов].ПодчиненныеЭлементы Цикл
		Если ПодчиненныйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа  Тогда
			Для каждого Отбор Из ПодчиненныйЭлемент.ПодчиненныеЭлементы Цикл
				
				Если ТипЗнч(Отбор) = Тип("ГруппаФормы") Тогда
					Продолжить;
				КонецЕсли;
				
				ГруппыОтбораИмя = Отбор.Имя;
				ЭтоПредопределенныйОтбор = СтрНайти(ГруппыОтбораИмя, "_") = 0;
				Если Не ЭтоПредопределенныйОтбор Тогда
					Продолжить;
				КонецЕсли;
				
				ИДРеквизита = ИменаРеквизитов.Найти(Отбор.Имя);
				//Если ИДРеквизита = Неопределено Тогда
				//	ИДРеквизита = ИменаРеквизитов.Найти(Отбор.ПутьКДанным);
				//КонецЕсли;
				
				РеквизитФормы = СуществующиеРеквизиты.Получить(ИДРеквизита);
				Если РеквизитФормы.ТипЗначения = Неопределено Тогда
					ТипОтбора = Новый ОписаниеТипов("Строка");
				Иначе
					ТипОтбора = РеквизитФормы.ТипЗначения;
				КонецЕсли;
				
				НоваяСтрока = ПредопределенныеОтборыПоУмолчанию.Добавить();
				
				НоваяСтрока.ТипЗначения = ТипОтбора;
				Если Форма.Элементы[Отбор.Имя].Вид = ВидПоляФормы.ПолеВвода Тогда
					НоваяСтрока.Заголовок = Форма.Элементы[Отбор.Имя].ПодсказкаВвода;
				Иначе
					НоваяСтрока.Заголовок = Форма.Элементы[Отбор.Имя].Заголовок;
				КонецЕсли;
				НоваяСтрока.ИмяОтбора = Отбор.Имя;
				НоваяСтрока.ЗаголовокДляНастройки = НоваяСтрока.Заголовок;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Форма[ИмяРеквизитаОтборовПоУмолчанию] = ПоместитьВоВременноеХранилище(ПредопределенныеОтборыПоУмолчанию, Новый УникальныйИдентификатор);
	
КонецПроцедуры

#Область УстановкаНестандартныхОтборов

Процедура УстановитьНестандартныйОтборСписка(Форма, СписокОтбора, ИмяСписка, ИспользованиеОтбора, ИмяТЧДанныеМеток, ИмяОтбора, НайденныйОтбор, ИмяПоляОтбора)

	ТипЗначения = НайденныйОтбор.ТипЗначения;
	КоличествоТипов = ТипЗначения.Типы().Количество();
	
	Если (КоличествоТипов = 1 И ТипЗначения.СодержитТип(Тип("Строка"))) Или НайденныйОтбор.ДоступенРежимВыбораГрупп Или (НайденныйОтбор.ЭтоДополнительныйРеквизит И ТипЗначения.СодержитТип(Тип("Булево"))) Тогда
		ТипГруппыКомпоновки = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Иначе
		ТипГруппыКомпоновки = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	КонецЕсли;
	
	ГруппаОтбор = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
	СписокОтбора.КомпоновщикНастроек.Настройки.Отбор.Элементы,
	ИмяОтбора,
	ТипГруппыКомпоновки);
	
	Если КоличествоТипов = 1 И ТипЗначения.СодержитТип(Тип("Число")) Тогда
		УстановитьОтборЧислоОтДо(Форма, ГруппаОтбор, ИмяОтбора, НайденныйОтбор.Поле, НайденныйОтбор.ИмяЭлемента);
	ИначеЕсли КоличествоТипов = 1 И ТипЗначения.СодержитТип(Тип("Дата")) Тогда
		УстановитьОтборДатаСПо(Форма, ГруппаОтбор, ИмяОтбора, НайденныйОтбор.Поле, НайденныйОтбор.ИмяЭлемента);
	ИначеЕсли КоличествоТипов = 1 И НайденныйОтбор.ЭтоДополнительныйРеквизит И ТипЗначения.СодержитТип(Тип("Булево")) Тогда
		
		Строки = Форма[ИмяТЧДанныеМеток].НайтиСтроки(Новый Структура("ИмяОтбора", ИмяОтбора));
		Для каждого Строка Из Строки Цикл
			УстановитьОтборДополнительныйРеквизитБулево(Форма, ГруппаОтбор, Строка.Метка, ИмяОтбора, НайденныйОтбор.Поле);
		КонецЦикла;
		
	ИначеЕсли НайденныйОтбор.ДоступенРежимВыбораГрупп Тогда
		
		СписокЭлементов = Новый СписокЗначений;
		СписокГрупп = Новый СписокЗначений;
		Строки = Форма[ИмяТЧДанныеМеток].НайтиСтроки(Новый Структура("ИмяОтбора", ИмяОтбора));
		Для каждого Строка Из Строки Цикл
			Если СтрЗаканчиваетсяНа(Строка.ИмяПоляОтбора, ".Родитель") Тогда
				СписокГрупп.Добавить(Строка.Метка);
			Иначе
				СписокЭлементов.Добавить(Строка.Метка)
			КонецЕсли;
		КонецЦикла;
		
		Если СписокЭлементов.Количество() = 1 И СписокГрупп.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(СписокОтбора.КомпоновщикНастроек.Настройки.Отбор,,ИмяОтбора);
			ТекВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокОтбора, СтрЗаменить(ИмяПоляОтбора, ".Родитель", ""), СписокЭлементов[0].Значение, ТекВидСравнения, ,Истина);
		Иначе
			НайденныйОтборМассив = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокОтбора.Отбор,СтрЗаменить(ИмяПоляОтбора, ".Родитель", ""));
			Если НайденныйОтборМассив.Количество()> 0 Тогда
				ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(СписокОтбора.Отбор, СтрЗаменить(ИмяПоляОтбора, ".Родитель", ""));
			КонецЕсли;
			УстановитьОтборИерархическийСправочник(Форма, ГруппаОтбор, СписокЭлементов, СписокГрупп, ИмяОтбора, СтрЗаменить(ИмяПоляОтбора, ".Родитель", ""));
		КонецЕсли;
		
	Иначе
		
		СписокЗначений = Новый СписокЗначений;
		Строки = Форма[ИмяТЧДанныеМеток].НайтиСтроки(Новый Структура("ИмяОтбора", ИмяОтбора));
		Для каждого Строка Из Строки Цикл
			Если ТипЗнч(Строка.Метка) = Тип("Строка") Тогда
				УстановитьОтборСтрока(Форма, ГруппаОтбор, Строка.Метка, ИмяОтбора, НайденныйОтбор.Поле);
				Продолжить;
			КонецЕсли;
			СписокЗначений.Добавить(Строка.Метка)
		КонецЦикла;
		
		УстановитьОтборОстальныеТипы(Форма, ГруппаОтбор, СписокЗначений, ИмяОтбора, НайденныйОтбор.Поле);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборЧислоОтДо(Форма, ГруппаОтбор, ИмяОтбора, ИмяПоля, ИмяЭлемента)
	
	Если Форма.Элементы.Найти("ОтборОт_" + ИмяЭлемента) <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбор,
		ИмяПоля,
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		Форма["ОтборОт_" + ИмяЭлемента],
		"ОтборОт_" + ИмяОтбора,
		ЗначениеЗаполнено(Форма["ОтборОт_" + ИмяЭлемента]));
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ОтборДо_" + ИмяЭлемента) <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбор,
		ИмяПоля,
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		Форма["ОтборДо_" + ИмяЭлемента],
		"ОтборДо_" + ИмяОтбора,
		ЗначениеЗаполнено(Форма["ОтборДо_" + ИмяЭлемента]));
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьОтборДатаСПо(Форма, ГруппаОтбор, ИмяОтбора, ИмяПоля, ИмяЭлемента)
	
	Если Форма.Элементы.Найти("ОтборС_" + ИмяЭлемента) <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбор,
		ИмяПоля,
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		Форма["ОтборС_" + ИмяЭлемента],
		"ОтборС_" + ИмяОтбора,
		ЗначениеЗаполнено(Форма["ОтборС_" + ИмяЭлемента]));
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ОтборПо_" + ИмяЭлемента) <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбор,
		ИмяПоля,
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		Форма["ОтборПо_" + ИмяЭлемента],
		"ОтборПо_" + ИмяОтбора,
		ЗначениеЗаполнено(Форма["ОтборПо_" + ИмяЭлемента]));
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборОстальныеТипы(Форма, ГруппаОтбор, СписокЗначений, ИмяОтбора, ИмяПоля)
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
	ГруппаОтбор,
	ИмяПоля,
	ВидСравненияКомпоновкиДанных.ВСписке,
	СписокЗначений,
	"Отбор_" + ИмяОтбора,
	СписокЗначений.Количество()>0);
	
КонецПроцедуры

Процедура УстановитьОтборСтрока(Форма, ГруппаОтбор, Значение, ИмяОтбора, ИмяПоля)
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
	ГруппаОтбор,
	ИмяПоля,
	ВидСравненияКомпоновкиДанных.Содержит,
	Значение,
	"Отбор_" + Значение,
	ЗначениеЗаполнено(Значение));
	
КонецПроцедуры

Процедура УстановитьОтборИерархическийСправочник(Форма, ГруппаОтбор, СписокЭлементов,СписокГрупп, ИмяОтбора, ИмяПоля)
	
	// Элементы
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
	ГруппаОтбор,
	ИмяПоля,
	ВидСравненияКомпоновкиДанных.ВСписке,
	СписокЭлементов,
	"Элементы_" + ИмяОтбора,
	СписокЭлементов.Количество()>0);
	
	// Группы
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
	ГруппаОтбор,
	ИмяПоля + ".Родитель",
	ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии,
	СписокГрупп,
	"Группы_" + ИмяОтбора,
	СписокГрупп.Количество()>0);

КонецПроцедуры

Процедура УстановитьОтборДополнительныйРеквизитБулево(Форма, ГруппаОтбор, Значение, ИмяОтбора, ИмяПоля)
	
	Если Значение Тогда
		ТекВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Иначе
		ТекВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
	ГруппаОтбор,
	ИмяПоля,
	ТекВидСравнения,
	Значение,
	"Отбор_" + ИмяОтбора+ "_" + Строка(Значение),
	Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОпределитьПредопределенныеОтборы(Форма, ВыбранныеОтборы = Неопределено, ИмяГруппыОтборов = "ГруппаОтборы")
	
	СуществующиеРеквизиты = Форма.ПолучитьРеквизиты();
	ИменаРеквизитов = Новый Массив;
	Для каждого Реквизит Из СуществующиеРеквизиты Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	ПредопределенныеОтборыТЗ = Новый ТаблицаЗначений;
	ПредопределенныеОтборыТЗ.Колонки.Добавить("ИмяОтбора", Новый ОписаниеТипов("Строка"));
	ПредопределенныеОтборыТЗ.Колонки.Добавить("КартинкаПоля", Новый ОписаниеТипов("Число"));
	ПредопределенныеОтборыТЗ.Колонки.Добавить("Выбран", Новый ОписаниеТипов("Булево"));
	ПредопределенныеОтборыТЗ.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка"));
	ПредопределенныеОтборыТЗ.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка"));
	ПредопределенныеОтборыТЗ.Колонки.Добавить("ЗаголовокДляНастройки", Новый ОписаниеТипов("Строка"));
	ПредопределенныеОтборыТЗ.Колонки.Добавить("ИдентификаторПоля", Новый ОписаниеТипов("Число"));
	ПредопределенныеОтборыТЗ.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	ПредопределенныеОтборыТЗ.Колонки.Добавить("ФорматРедактирования", Новый ОписаниеТипов("Строка"));
	ПредопределенныеОтборыТЗ.Колонки.Добавить("Таблица", Новый ОписаниеТипов("Булево"));
	ПредопределенныеОтборыТЗ.Колонки.Добавить("ЭтоДополнительныйРеквизит", Новый ОписаниеТипов("Булево"));
	ПредопределенныеОтборыТЗ.Колонки.Добавить("ВключенРежимВыбораГрупп", Новый ОписаниеТипов("Булево"));
	ПредопределенныеОтборыТЗ.Колонки.Добавить("ЭтоПредопределенныйОтбор", Новый ОписаниеТипов("Булево"));
	ПредопределенныеОтборыТЗ.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	ПредопределенныеОтборыТЗ.Колонки.Добавить("РодительИдентификатор", Новый ОписаниеТипов("Строка"));
	ПредопределенныеОтборыТЗ.Колонки.Добавить("Доступен", Новый ОписаниеТипов("Булево"));
	ПредопределенныеОтборыТЗ.Колонки.Добавить("ДоступенРежимВыбораГрупп", Новый ОписаниеТипов("Булево"));
	ПредопределенныеОтборыТЗ.Колонки.Добавить("ИмяЭлемента", Новый ОписаниеТипов("Булево"));
	
	Для каждого ПодчиненныйЭлемент Из Форма.Элементы[ИмяГруппыОтборов].ПодчиненныеЭлементы Цикл
		Если ПодчиненныйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа  Тогда
			Для каждого Отбор Из ПодчиненныйЭлемент.ПодчиненныеЭлементы Цикл
				
				Если ТипЗнч(Отбор) = Тип("ГруппаФормы") Тогда
					Продолжить;
				КонецЕсли;
				
				ГруппыОтбораИмя = Отбор.Имя;
				ЭтоПредопределенныйОтбор = СтрНайти(ГруппыОтбораИмя, "_") = 0;
				Если Не ЭтоПредопределенныйОтбор Тогда
					Продолжить;
				КонецЕсли;
				
				ОтборНеВыбранИНеДоступен = Ложь;
				Если Не Отбор.Видимость И Не ПодчиненныйЭлемент.Видимость Тогда
					ОтборНеВыбранИНеДоступен = Истина;
				КонецЕсли;
				
				ИДРеквизита = ИменаРеквизитов.Найти(Отбор.Имя);
				//Если ИДРеквизита = Неопределено Тогда
				//	ИДРеквизита = ИменаРеквизитов.Найти(Отбор.ПутьКДанным);
				//КонецЕсли;
				
				РеквизитФормы = СуществующиеРеквизиты.Получить(ИДРеквизита);
				Если РеквизитФормы.ТипЗначения = Неопределено Тогда
					ТипОтбора = Новый ОписаниеТипов("Строка");
				Иначе
					ТипОтбора = РеквизитФормы.ТипЗначения;
				КонецЕсли;
				
				ОтборДоступенПоФО = ОбъектМетаданныхДоступенПоФункциональнымОпциям(ТипОтбора);
				
				Если Не ОтборДоступенПоФО Тогда
					ОтборНеВыбранИНеДоступен = Истина;
				КонецЕсли;
				
				НоваяСтрока = ПредопределенныеОтборыТЗ.Добавить();
				
				//РеквизитФормы = СуществующиеРеквизиты.Получить(ИменаРеквизитов.Найти(Отбор.Имя));
				//Если РеквизитФормы.ТипЗначения = Неопределено Тогда
				//	ТипОтбора = Новый ОписаниеТипов("Строка"); 
				//Иначе
				//	ТипОтбора = РеквизитФормы.ТипЗначения;
				//КонецЕсли;
				
				НоваяСтрока.ТипЗначения = ТипОтбора;
				
				Если Форма.Элементы[Отбор.Имя].Вид = ВидПоляФормы.ПолеВвода Тогда
					НоваяСтрока.Заголовок = СтрЗаменить(Форма.Элементы[Отбор.Имя].ПодсказкаВвода, " (Группа)", "");
				Иначе
					НоваяСтрока.Заголовок = Форма.Элементы[Отбор.Имя].Заголовок;
				КонецЕсли;
				
				НоваяСтрока.Выбран = Отбор.Видимость И ПодчиненныйЭлемент.Видимость;
				НоваяСтрока.Доступен = Не НоваяСтрока.Выбран;
				НоваяСтрока.ИмяОтбора = Отбор.Имя;
				НоваяСтрока.Идентификатор = Строка(Новый УникальныйИдентификатор());
				НоваяСтрока.КартинкаПоля = 1;
				НоваяСтрока.ЭтоДополнительныйРеквизит = Ложь;
				НоваяСтрока.ЭтоПредопределенныйОтбор = ЭтоПредопределенныйОтбор;
				НоваяСтрока.ЗаголовокДляНастройки = НоваяСтрока.Заголовок;
				НоваяСтрока.ДоступенРежимВыбораГрупп = ЭтоИерархическийСправочник(НоваяСтрока.ТипЗначения);
				НоваяСтрока.ИмяЭлемента = Отбор.Имя;
				НоваяСтрока.ВключенРежимВыбораГрупп = Ложь;
				
				Если ОтборНеВыбранИНеДоступен Тогда
					НоваяСтрока.Выбран = Ложь;
					НоваяСтрока.Доступен = Ложь;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПредопределенныеОтборыТЗ
	
КонецФункции

Функция ПолучитьТаблицуДоступныхОтборов(Список, ПредопределенныеОтборы, ДанныеОтборов, ОтборыДляИсключения)

	ДоступныеОтборы = Новый ТаблицаЗначений;
	ДоступныеОтборы.Колонки.Добавить("ИмяОтбора", Новый ОписаниеТипов("Строка"));
	ДоступныеОтборы.Колонки.Добавить("КартинкаПоля", Новый ОписаниеТипов("Число"));
	ДоступныеОтборы.Колонки.Добавить("Выбран", Новый ОписаниеТипов("Булево"));
	ДоступныеОтборы.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка"));
	ДоступныеОтборы.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка"));
	ДоступныеОтборы.Колонки.Добавить("ЗаголовокДляНастройки", Новый ОписаниеТипов("Строка"));
	ДоступныеОтборы.Колонки.Добавить("ИдентификаторПоля", Новый ОписаниеТипов("Число"));
	ДоступныеОтборы.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	ДоступныеОтборы.Колонки.Добавить("ФорматРедактирования", Новый ОписаниеТипов("Строка"));
	ДоступныеОтборы.Колонки.Добавить("Таблица", Новый ОписаниеТипов("Булево"));
	ДоступныеОтборы.Колонки.Добавить("ЭтоДополнительныйРеквизит", Новый ОписаниеТипов("Булево"));
	ДоступныеОтборы.Колонки.Добавить("ВключенРежимВыбораГрупп", Новый ОписаниеТипов("Булево"));
	ДоступныеОтборы.Колонки.Добавить("ДоступенРежимВыбораГрупп", Новый ОписаниеТипов("Булево"));
	ДоступныеОтборы.Колонки.Добавить("ЭтоПредопределенныйОтбор", Новый ОписаниеТипов("Булево"));
	ДоступныеОтборы.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	ДоступныеОтборы.Колонки.Добавить("РодительИдентификатор", Новый ОписаниеТипов("Строка"));
	ДоступныеОтборы.Колонки.Добавить("Доступен", Новый ОписаниеТипов("Булево"));
	ДоступныеОтборы.Колонки.Добавить("Путь", Новый ОписаниеТипов("СписокЗначений"));
	
	ДоступныеПоляОтбора = Список.Отбор.ДоступныеПоляОтбора.Элементы;
	
	Путь = Новый СписокЗначений;
	Путь.Добавить("Ссылка");
	
	СтрокаСсылка = Список.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Ссылка");
	
	Если СтрокаСсылка <> Неопределено Тогда
		Для каждого Отбор Из СтрокаСсылка.Элементы Цикл
			
			ЗаголовокДляНастройки = СтрЗаменить(Отбор.Заголовок, "Ссылка.", "");
			Если Не ОтборВозможен(Отбор, ЗаголовокДляНастройки) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ДоступныеОтборы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Отбор,,"Заголовок, Поле");
			
			НоваяСтрока.ЭтоПредопределенныйОтбор = Ложь;
			НоваяСтрока.ЭтоДополнительныйРеквизит = Ложь;
			
			НоваяСтрока.ИмяОтбора = СтрЗаменить(Строка(Отбор.Поле),".","_");
			НоваяСтрока.ИдентификаторПоля = Неопределено;
			НоваяСтрока.Идентификатор = Строка(Новый УникальныйИдентификатор());
			НоваяСтрока.ЗаголовокДляНастройки = ЗаголовокДляНастройки;
			НоваяСтрока.Заголовок = СтрЗаменить(Отбор.Заголовок, "Ссылка.", "");
			НоваяСтрока.ВключенРежимВыбораГрупп = Ложь;
			
			ОтборДоступен = НЕ Отбор.Таблица;
			Если ОтборДоступен Тогда
				СтрокиТЗ = ДанныеОтборов.НайтиСтроки(Новый Структура("ИмяОтбора, Выбран", НоваяСтрока.ИмяОтбора, Истина));
				Если СтрокиТЗ.Количество()>0 Тогда
					ОтборДоступен = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.Доступен = ОтборДоступен;
			НоваяСтрока.Выбран  = НЕ ОтборДоступен;
			НоваяСтрока.Поле = Строка(Отбор.Поле);
			НоваяСтрока.ДоступенРежимВыбораГрупп = ЭтоИерархическийСправочник(НоваяСтрока.ТипЗначения);
			НоваяСтрока.ЭтоДополнительныйРеквизит = СтрЗаканчиваетсяНа(Строка(НоваяСтрока.Поле), ")]");
			
			Путь2 = Путь.Скопировать();
			Путь2.Добавить(НоваяСтрока.Поле);
			НоваяСтрока.Путь = Путь2;
			
			
			НоваяСтрока.КартинкаПоля = ПолучитьКартинкуПоля(Отбор, НоваяСтрока.ЭтоДополнительныйРеквизит);
			
			Если НоваяСтрока.КартинкаПоля = 0 Тогда
				
				Для каждого ВложенныеОтбор Из Отбор.Элементы Цикл
					
					ЗаголовокДляНастройки = СтрЗаменить(ВложенныеОтбор.Заголовок, Отбор.Заголовок + ".", "");
					Если Не ОтборВозможен(ВложенныеОтбор, ЗаголовокДляНастройки) Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрокаВложенныеОтбор = ДоступныеОтборы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаВложенныеОтбор, ВложенныеОтбор,,"Заголовок, Поле");
					
					НоваяСтрокаВложенныеОтбор.ЭтоПредопределенныйОтбор = Ложь;
					НоваяСтрокаВложенныеОтбор.КартинкаПоля = ?(ВложенныеОтбор.Таблица, 0, 1);
					НоваяСтрокаВложенныеОтбор.ИмяОтбора = СтрЗаменить(Строка(ВложенныеОтбор.Поле),".","_");
					НоваяСтрокаВложенныеОтбор.ИдентификаторПоля = Неопределено;
					НоваяСтрокаВложенныеОтбор.Идентификатор = Строка(Новый УникальныйИдентификатор());
					НоваяСтрокаВложенныеОтбор.Заголовок = СтрЗаменить(ВложенныеОтбор.Заголовок, "Ссылка.", "");
					НоваяСтрокаВложенныеОтбор.ЗаголовокДляНастройки = ЗаголовокДляНастройки;
					НоваяСтрокаВложенныеОтбор.ВключенРежимВыбораГрупп = Ложь;
					НоваяСтрокаВложенныеОтбор.РодительИдентификатор = НоваяСтрока.Идентификатор;
					
					ОтборДоступен = НЕ ВложенныеОтбор.Таблица;
					Если ОтборДоступен Тогда
						СтрокиТЗ = ДанныеОтборов.НайтиСтроки(Новый Структура("ИмяОтбора, Выбран", НоваяСтрокаВложенныеОтбор.ИмяОтбора, Истина));
						Если СтрокиТЗ.Количество()>0 Тогда
							ОтборДоступен = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрокаВложенныеОтбор.Доступен = ОтборДоступен;
					НоваяСтрокаВложенныеОтбор.Выбран = НЕ ОтборДоступен;
					НоваяСтрокаВложенныеОтбор.Поле = Строка(ВложенныеОтбор.Поле);
					НоваяСтрокаВложенныеОтбор.ДоступенРежимВыбораГрупп = ЭтоИерархическийСправочник(НоваяСтрокаВложенныеОтбор.ТипЗначения);
					НоваяСтрокаВложенныеОтбор.ЭтоДополнительныйРеквизит = СтрЗаканчиваетсяНа(Строка(НоваяСтрокаВложенныеОтбор.Поле), ")]");
					
					Путь3 = Путь2.Скопировать();
					Путь3.Добавить(НоваяСтрокаВложенныеОтбор.Поле);
					НоваяСтрокаВложенныеОтбор.Путь = Путь3;
					
					// Заполняем реквизиты табличной части
					Если ВложенныеОтбор.Таблица Тогда
						Для каждого ВложенныйОтборРекТабЧасти Из ВложенныеОтбор.Элементы Цикл
							
							ЗаголовокДляНастройки = СтрЗаменить(ВложенныйОтборРекТабЧасти.Заголовок, ВложенныеОтбор.Заголовок + ".", "");
							Если Не ОтборВозможен(ВложенныйОтборРекТабЧасти, ЗаголовокДляНастройки) Тогда
								Продолжить;
							КонецЕсли;
							
							НоваяСтрокаРекТабЧасти = ДоступныеОтборы.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаРекТабЧасти, ВложенныйОтборРекТабЧасти,,"Заголовок, Поле");
							
							НоваяСтрокаРекТабЧасти.ЭтоПредопределенныйОтбор = Ложь;
							НоваяСтрокаРекТабЧасти.ЭтоДополнительныйРеквизит = Ложь;
							НоваяСтрокаРекТабЧасти.КартинкаПоля = ?(ВложенныйОтборРекТабЧасти.Таблица, 0, 1);
							НоваяСтрокаРекТабЧасти.ИмяОтбора = СтрЗаменить(Строка(ВложенныйОтборРекТабЧасти.Поле),".","_");
							НоваяСтрокаРекТабЧасти.ИдентификаторПоля = Неопределено;
							НоваяСтрокаРекТабЧасти.Идентификатор = Строка(Новый УникальныйИдентификатор());
							НоваяСтрокаРекТабЧасти.ЗаголовокДляНастройки = ЗаголовокДляНастройки;
							НоваяСтрокаРекТабЧасти.Заголовок = СтрЗаменить(ВложенныйОтборРекТабЧасти.Заголовок, "Ссылка.", "");
							
							НоваяСтрокаРекТабЧасти.ВключенРежимВыбораГрупп = Ложь;
							НоваяСтрокаРекТабЧасти.РодительИдентификатор = НоваяСтрокаВложенныеОтбор.Идентификатор;
							
							ОтборДоступен = НЕ ВложенныйОтборРекТабЧасти.Таблица;
							Если ОтборДоступен Тогда
								ОтборДоступен = Истина;
								СтрокиТЗ = ДанныеОтборов.НайтиСтроки(Новый Структура("ИмяОтбора, Выбран", НоваяСтрокаРекТабЧасти.ИмяОтбора, Истина));
								Если СтрокиТЗ.Количество()>0 Тогда
									ОтборДоступен = Ложь;
								КонецЕсли;
							КонецЕсли;
							
							НоваяСтрокаРекТабЧасти.Доступен = ОтборДоступен;
							НоваяСтрокаРекТабЧасти.Выбран  = НЕ ОтборДоступен;
							НоваяСтрокаРекТабЧасти.Поле = Строка(ВложенныйОтборРекТабЧасти.Поле);
							НоваяСтрокаРекТабЧасти.ДоступенРежимВыбораГрупп = Ложь;
							
							Путь4 = Путь3.Скопировать();
							Путь4.Добавить(НоваяСтрокаРекТабЧасти.Поле);
							НоваяСтрокаРекТабЧасти.Путь = Путь4
							
							
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
		// Добавляем предопределенные отборы
	Если ПредопределенныеОтборы <> Неопределено Тогда
		Для каждого ПредопределенныйОтбор Из ПредопределенныеОтборы Цикл
			Если Не ПредопределенныйОтбор.Выбран И Не ПредопределенныйОтбор.Доступен Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ДоступныеОтборы.Добавить(), ПредопределенныйОтбор);
		КонецЦикла;
	КонецЕсли;

	
	// Добавляем поля динамического списка
	Для каждого ДоступныйОтбор Из ДоступныеПоляОтбора Цикл
		
		ПараметрыОтбора = Новый Структура("ЗаголовокДляНастройки, ТипЗначения", ДоступныйОтбор.Заголовок, ДоступныйОтбор.ТипЗначения);
		НайденныйСтроки = ДоступныеОтборы.НайтиСтроки(ПараметрыОтбора);
		Если НайденныйСтроки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаголовокДляНастройки = ДоступныйОтбор.Заголовок;
		Если Не ОтборВозможен(ДоступныйОтбор, ЗаголовокДляНастройки) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДоступныеОтборы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДоступныйОтбор,,"Поле");
		
		НоваяСтрока.ЭтоПредопределенныйОтбор = Ложь;
		НоваяСтрока.ЭтоДополнительныйРеквизит = Ложь;
		НоваяСтрока.КартинкаПоля = 1;
		НоваяСтрока.ИмяОтбора = СтрЗаменить(Строка(ДоступныйОтбор.Поле),".","_");
		НоваяСтрока.ИдентификаторПоля = Неопределено;
		НоваяСтрока.Идентификатор = Строка(Новый УникальныйИдентификатор());
		НоваяСтрока.ЗаголовокДляНастройки = ЗаголовокДляНастройки;
		НоваяСтрока.ВключенРежимВыбораГрупп = Ложь;
		
		ОтборДоступен = НЕ ДоступныйОтбор.Таблица;
		Если ОтборДоступен Тогда
			СтрокиТЗ = ДанныеОтборов.НайтиСтроки(Новый Структура("ИмяОтбора, Выбран", НоваяСтрока.ИмяОтбора, Истина));
			Если СтрокиТЗ.Количество()>0 Тогда
				ОтборДоступен = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		
		НоваяСтрока.Доступен = ОтборДоступен;
		НоваяСтрока.Выбран  = НЕ ОтборДоступен;
		НоваяСтрока.Поле = Строка(ДоступныйОтбор.Поле);
		НоваяСтрока.ДоступенРежимВыбораГрупп = Ложь;
		
		Путь = Новый СписокЗначений;
		Путь.Добавить(НоваяСтрока.Поле);
		НоваяСтрока.Путь = Путь;
		
	КонецЦикла;
	
	ДоступныеОтборы.Сортировать("ЗаголовокДляНастройки");
	
	Если ТипЗнч(ОтборыДляИсключения) = Тип("Массив") Тогда
		Для каждого Поле Из ОтборыДляИсключения Цикл
			НайденныеСтрокиМассив = ДоступныеОтборы.НайтиСтроки(Новый Структура("Поле", Поле));
			Если НайденныеСтрокиМассив.Количество() <> 0 Тогда
				ДоступныеОтборы.Удалить(НайденныеСтрокиМассив[0]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДоступныеОтборы

КонецФункции

Функция ПолучитьКартинкуПоля(Отбор, ЭтоДополнительныйРеквизит)

	Если Отбор.Таблица Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ЭтоДополнительныйРеквизит Тогда
		Возврат 1;
	КонецЕсли;
	
	Типы = Отбор.ТипЗначения.Типы();
	
	ЕстьДокументИлиСправочник = Ложь;
	Для каждого Тип Из Типы Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных <> Неопределено И (ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Или ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных)) Тогда
			ЕстьДокументИлиСправочник = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьДокументИлиСправочник Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

Функция ОтборВозможен(Отбор, ЗаголовокДляНастройки = Неопределено)
	
	// АПК:1036-выкл проверка орфографии не требуется
	Если СтрНайти(НРег(Отбор.Заголовок), "не использ") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	// АПК:1036-вкл
	
	Если Строка(Отбор.Поле) = "Ссылка" 
		Или Строка(Отбор.Поле) = "ЕстьФайлы" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗаголовокДляНастройки <> Неопределено 
		И (ЗаголовокДляНастройки = "Версия данных" 
		Или ЗаголовокДляНастройки = "Код" 
		Или ЗаголовокДляНастройки = "Параметры") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Отбор.ТипЗначения.СодержитТип(Тип("Тип")) Или Отбор.ТипЗначения.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоИерархическийСправочник(ТипЗначения)
	
	Если ТипЗнч(ТипЗначения) = Тип("ОписаниеТипов") Тогда
		
		ДоступенРежимВыбораГрупп = Ложь;
		
		Типы =ТипЗначения.Типы();
		Для каждого Тип Из Типы Цикл
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			
			Если ОбъектМетаданных <> Неопределено И ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) И ОбъектМетаданных.Иерархический Тогда
				ДоступенРежимВыбораГрупп = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ДоступенРежимВыбораГрупп = Ложь;
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
		
		Если ОбъектМетаданных <> Неопределено И ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) И ОбъектМетаданных.Иерархический Тогда
			ДоступенРежимВыбораГрупп = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДоступенРежимВыбораГрупп
	
КонецФункции

Функция ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОписаниеТипов)
	
	//Если ТипЗнч(ОписаниеТипов) = Тип("Тип") Тогда
	//	ТипОбъекта = Метаданные.НайтиПоТипу(ОписаниеТипов);
	//	Если ТипОбъекта <> Неопределено И НЕ ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ТипОбъекта) Тогда
	//		Возврат Ложь;
	//	Иначе
	//		Возврат Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
	Типы = ОписаниеТипов.Типы();
	МассивДоступныхТипов = Новый Массив;
	
	Для каждого Тип Из Типы Цикл
		ТипОбъекта = Метаданные.НайтиПоТипу(Тип);
		Если ТипОбъекта <> Неопределено И НЕ ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ТипОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Тип = Тип("СправочникСсылка.ВидыЗаказовПокупателей") И Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
			Продолжить;
		КонецЕсли;
		Если Тип = Тип("СправочникСсылка.Организации") И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			Продолжить;
		КонецЕсли;
		Если Тип = Тип("ПеречислениеСсылка.ВидыОперацийЗаказПоставщику") И Не ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивДоступныхТипов.Добавить(Тип);
	КонецЦикла;
	
	Если МассивДоступныхТипов.Количество() <> Типы.Количество() Тогда
		ОписаниеТипов = Новый ОписаниеТипов(МассивДоступныхТипов);
	КонецЕсли;
	
	Если МассивДоступныхТипов.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции


Процедура ОтобразитьОтборы(Форма, ВыбранныеОтборы, УдаляемыеОтборы, УдаляемыеМетки, ИмяГруппыОтборов = "ГруппаОтборы", ИмяРеквизитаСписка = "Список")
	
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеЭлементы = Новый Массив;
	ДобавляемыеРеквизиты = Новый Массив;
	
	ПеренастроитьПравуюПанельСОтборами(ВыбранныеОтборы, УдаляемыеМетки, УдаляемыеРеквизиты, УдаляемыеЭлементы, Форма, ИмяГруппыОтборов);
	УдалитьЭлементы(УдаляемыеЭлементы, Форма);
	СоздатьРеквизитыДляДополнительныхОтборов(Форма, ВыбранныеОтборы, УдаляемыеРеквизиты);
	УстановитьОтборыНаФорме(Форма, ВыбранныеОтборы, ИмяГруппыОтборов);
	
КонецПроцедуры

Процедура ПеренастроитьПравуюПанельСОтборами(ВыбранныеОтборы, УдаляемыеМетки, УдаляемыеРеквизиты, УдаляемыеЭлементы, Форма, ИмяГруппыОтборов)
	
	СуществующиеРеквизиты = Форма.ПолучитьРеквизиты();
	ИменаРеквизитов = Новый Массив;
	Для каждого Реквизит Из СуществующиеРеквизиты Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Для каждого ГруппаОтбора Из Форма.Элементы[ИмяГруппыОтборов].ПодчиненныеЭлементы Цикл
		Если ГруппаОтбора.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
			
			Отбор = ГруппаОтбора.ПодчиненныеЭлементы[0];
			ОтборИмя = Прав(ГруппаОтбора.ПодчиненныеЭлементы[0].Имя, СтрДлина(ГруппаОтбора.ПодчиненныеЭлементы[0].Имя) - СтрНайти(ГруппаОтбора.ПодчиненныеЭлементы[0].Имя, "_", НаправлениеПоиска.СНачала));
			ГруппыОтбораИмя = ГруппаОтбора.Имя;
			
			// Ищем отбор в выбранных отборах
			ОтборСтрок = Новый Структура("ИмяЭлемента", ОтборИмя);
			Строки = ВыбранныеОтборы.НайтиСтроки(ОтборСтрок);
			
			// Настраиваем видимость отбора. Проверяем наличие отбора в выбранных отборах.
			ГруппаОтбора.Видимость = Строки.Количество() > 0;
			
			// Сохраняем имя реквизита и имя группы для удаления
			ЭтоПредопределенныйОтбор = СтрНайти(ГруппыОтбораИмя, "_") = 0;
			Если Не ЭтоПредопределенныйОтбор И Не ГруппаОтбора.Видимость Тогда
				
				УдаляемыеЭлементы.Добавить(ГруппыОтбораИмя);
				// Находим удаляемый реквизит в правой панели
				Если ТипЗнч(Отбор) = Тип("ГруппаФормы") Тогда
					
					// Отбор состоящий из 2ух реквизитов
					
					ОтборИмя = Отбор.ПодчиненныеЭлементы[0].Имя;
					ОтборИмя2 = Отбор.ПодчиненныеЭлементы[1].Имя;
					
					УдаляемыеРеквизиты.Добавить(ОтборИмя);
					УдаляемыеРеквизиты.Добавить(ОтборИмя2);
					
					УдаляемыеМетки.Добавить(Отбор.Имя);
					Продолжить;
					
				Иначе
					УдаляемыеРеквизиты.Добавить(ГруппаОтбора.ПодчиненныеЭлементы[0].Имя);
				КонецЕсли;
				
			КонецЕсли;
			
			// Проверяем предопределенный отбор отключенный вручную
			Если ЭтоПредопределенныйОтбор И НЕ ГруппаОтбора.Видимость И Не Отбор.Видимость Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Отбор) = Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли;
			
			
			ИДРеквизита = ИменаРеквизитов.Найти(Отбор.Имя);
			//Если ИДРеквизита = Неопределено Тогда
			//	ИДРеквизита = ИменаРеквизитов.Найти(Отбор.ПутьКДанным);
			//КонецЕсли;
			
			РеквизитФормы = СуществующиеРеквизиты.Получить(ИДРеквизита);
			Если РеквизитФормы.ТипЗначения = Неопределено Тогда
				ТипОтбора = Новый ОписаниеТипов("Строка");
			Иначе
				ТипОтбора = РеквизитФормы.ТипЗначения;
			КонецЕсли;
			
			ОтборДоступенПоФО = ОбъектМетаданныхДоступенПоФункциональнымОпциям(ТипОтбора);
			// Проверяем доступен ли отбор по функциональной опции
			Если Не ОтборДоступенПоФО Тогда
				Продолжить;
			КонецЕсли;
			
			// Вкл/выкл отбор по группам
			Если ГруппаОтбора.Видимость Тогда
				Если ЭтоИерархическийСправочник(Строки[0].ТипЗначения) Тогда
					Если Строки[0].ВключенРежимВыбораГрупп Тогда
						Отбор.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
					Иначе
						Отбор.ВыборГруппИЭлементов = ГруппыИЭлементы.Авто;
					КонецЕсли;
					Отбор.ПодсказкаВвода = Строки[0].Заголовок;
				КонецЕсли;
			КонецЕсли;
			
			// Сохраняем имя отбора для удаления меток
			Если Не ГруппаОтбора.Видимость Тогда
				УдаляемыеМетки.Добавить(ГруппыОтбораИмя);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьЭлементы(УдаляемыеЭлементы, Форма)
	
	// Удаляем программно созданные элементы
	Для каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Форма.Элементы.Удалить(Форма.Элементы[УдаляемыйЭлемент]);
	КонецЦикла;

КонецПроцедуры

Процедура СоздатьРеквизитыДляДополнительныхОтборов(Форма, ДополнительныеОтборы, УдаляемыеРеквизиты = Неопределено)

	ДобавляемыеРеквизиты = Новый Массив;
	
	// Добавляем/удаляем реквизиты формы
	Для каждого Отбор Из ДополнительныеОтборы Цикл
		
		// Пропускаем предопределенные отборы
		Если Отбор.ЭтоПредопределенныйОтбор Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборИмя = СтрЗаменить(Отбор.ИмяЭлемента,".", "_");
		
		КоличествоТипов = Отбор.ТипЗначения.Типы().Количество();
		
		Если КоличествоТипов = 1 И Отбор.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			
			Если Форма.Элементы.Найти("ОтборОт_" + ОтборИмя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйРеквизит = Новый РеквизитФормы("ОтборОт_" + ОтборИмя, Новый ОписаниеТипов("Число"));
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			НовыйРеквизит = Новый РеквизитФормы("ОтборДо_" + ОтборИмя, Новый ОписаниеТипов("Число"));
		ИначеЕсли КоличествоТипов = 1 И Отбор.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
			
			Если Форма.Элементы.Найти("ОтборС_" + ОтборИмя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйРеквизит = Новый РеквизитФормы("ОтборС_" + ОтборИмя, Новый ОписаниеТипов("Дата"));
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			НовыйРеквизит = Новый РеквизитФормы("ОтборПо_" + ОтборИмя, Новый ОписаниеТипов("Дата"));
		ИначеЕсли КоличествоТипов = 1 И Отбор.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
			
			Если Форма.Элементы.Найти("ОтборДаНет_" + ОтборИмя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйРеквизит = Новый РеквизитФормы("ОтборДаНет_" + ОтборИмя, Новый ОписаниеТипов("Строка"));
			
		Иначе
			Если Форма.Элементы.Найти("Отбор_" + ОтборИмя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйРеквизит = Новый РеквизитФормы("Отбор_" + ОтборИмя, Отбор.ТипЗначения);
		КонецЕсли;
		
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЦикла;

	Если УдаляемыеРеквизиты = Неопределено Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	Иначе
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьОтборыНаФорме(Форма, ДанныеОтборов, ИмяГруппыОтборов = "ГруппаОтборы")
	
	Счетчик = ДанныеОтборов.Количество() - 1;
	Пока Счетчик >= 0 Цикл
		
		Отбор = ДанныеОтборов[Счетчик];
		Счетчик = Счетчик - 1;
		
		// Если это предопределенный отбор
		Если Отбор.ЭтоПредопределенныйОтбор Тогда
			
			// Предопределенный отбор был удален с формы
			Если Форма.Элементы.Найти(Отбор.ИмяОтбора) = Неопределено Тогда
				Продолжить;
				// Предопределенный отбор скрыт
			ИначеЕсли Не Форма.Элементы[Отбор.ИмяОтбора].Видимость Или Не Форма.Элементы[Отбор.ИмяОтбора].Родитель.Видимость Тогда
				Продолжить;
			Иначе
				// Устанавливаем настройки предопределенному отбору
				Форма.Элементы[Отбор.ИмяОтбора].Родитель.Видимость = Отбор.Выбран;
				Если Форма.Элементы[Отбор.ИмяОтбора].Вид = ВидПоляФормы.ПолеВвода Тогда
					Форма.Элементы[Отбор.ИмяОтбора].ПодсказкаВвода = Отбор.Заголовок;
				Иначе
					Форма.Элементы[Отбор.ИмяОтбора].Заголовок = Отбор.Заголовок;
				КонецЕсли;
				
				Если Отбор.ВключенРежимВыбораГрупп Тогда
					Форма.Элементы[Отбор.ИмяОтбора].ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			// Если это дополнительный отбор
			ГруппаДопОтбора = Неопределено;
			СоздатьДополнительныйОтборНаФорме(Отбор, Форма, ГруппаДопОтбора, ИмяГруппыОтборов);
		КонецЕсли;
		
		// Перемещаем отбор
		Если Отбор.ЭтоПредопределенныйОтбор Тогда
			Форма.Элементы.Переместить(Форма.Элементы[Отбор.ИмяОтбора].Родитель, Форма.Элементы[ИмяГруппыОтборов], Форма.Элементы[ИмяГруппыОтборов].ПодчиненныеЭлементы[0]);
		Иначе
			Форма.Элементы.Переместить(ГруппаДопОтбора, Форма.Элементы[ИмяГруппыОтборов], Форма.Элементы[ИмяГруппыОтборов].ПодчиненныеЭлементы[0]);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьДополнительныйРеквизит(Наименование, Представление)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
	|	ДополнительныеРеквизитыИСведения.Представление КАК Представление
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления
	|	И ДополнительныеРеквизитыИСведения.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование + "%");
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДополнительныеРеквизитыИСведения = РезультатЗапроса.Выгрузить();
	НайденнаяСтрокаМассив = ТаблицаДополнительныеРеквизитыИСведения.НайтиСтроки(Новый Структура("Представление", Представление));
	
	Если НайденнаяСтрокаМассив.Количество() > 0 Тогда
		ДополнительныйРеквизит = НайденнаяСтрокаМассив[0].Ссылка;
	Иначе
		ДополнительныйРеквизит = Неопределено;
	КонецЕсли;
	
	Возврат ДополнительныйРеквизит;
	
КонецФункции

Процедура СоздатьДополнительныйОтборНаФорме(Отбор, Форма, ЭлементГруппаОтбор, ИмяГруппыОтборов = "ГруппаОтборы")
	
	ОтборИмя = СтрЗаменить(Отбор.ИмяЭлемента,".", "_");
	
	ЭлементГруппаОтбор = Форма.Элементы.Найти("ГруппаОтбор_" + ОтборИмя);
	Если ЭлементГруппаОтбор <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементГруппаОтбор = Форма.Элементы.Добавить("ГруппаОтбор_" + ОтборИмя, Тип("ГруппаФормы"), Форма.Элементы[ИмяГруппыОтборов]);
	
	ЭлементГруппаОтбор.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементГруппаОтбор.Отображение = ОтображениеОбычнойГруппы.Нет;
	ЭлементГруппаОтбор.ОтображатьЗаголовок = Ложь;
	ЭлементГруппаОтбор.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	КоличествоТипов = Отбор.ТипЗначения.Типы().Количество();
	Если КоличествоТипов = 1 И Отбор.ТипЗначения.СодержитТип(Тип("Число"))  Тогда
		
		// Создаем вспомогательную группу
		ЭлементГруппаОтборОтДо = Форма.Элементы.Добавить("ГруппаОтборОтДо_" + ОтборИмя, Тип("ГруппаФормы"), ЭлементГруппаОтбор);
		ЭлементГруппаОтборОтДо.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппаОтборОтДо.Отображение = ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппаОтборОтДо.ОтображатьЗаголовок = Истина;
		ЭлементГруппаОтборОтДо.Заголовок = Отбор.Заголовок;
		ЭлементГруппаОтборОтДо.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ЭлементГруппаОтборОтДо.ЦветТекстаЗаголовка = Новый Цвет(160, 160, 160);
		
		// Создаем элемент От
		ЭлементОтборОт = Форма.Элементы.Добавить("ОтборОт_" + ОтборИмя, Тип("ПолеФормы"), ЭлементГруппаОтборОтДо);
		ЭлементОтборОт.Заголовок = НСтр("ru='от'");
		ЭлементОтборОт.ПутьКДанным = "ОтборОт_" + ОтборИмя;
		ЭлементОтборОт.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОтборОт.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		ЭлементОтборОт.УстановитьДействие("ПриИзменении", "Подключаемый_ОтборПриИзменении");
		ЭлементОтборОт.УстановитьДействие("Очистка", "Подключаемый_ОтборОчистка");
		ЭлементОтборОт.ФорматРедактирования = ?(ЗначениеЗаполнено(Отбор.ФорматРедактирования), Отбор.ФорматРедактирования, "ЧДЦ=3");
		ЭлементОтборОт.ЦветТекстаЗаголовка = Новый Цвет(160, 160, 160);
		ЭлементОтборОт.КнопкаОчистки = Истина;
		Форма["ОтборОт_" + ОтборИмя] = Неопределено;
		
		// Создаем элемент До
		ЭлементОтборДо = Форма.Элементы.Добавить("ОтборДо_" + ОтборИмя, Тип("ПолеФормы"), ЭлементГруппаОтборОтДо);
		ЭлементОтборДо.Заголовок = НСтр("ru='до'");
		ЭлементОтборДо.ПутьКДанным = "ОтборДо_" + ОтборИмя;
		ЭлементОтборДо.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОтборДо.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		ЭлементОтборДо.УстановитьДействие("ПриИзменении", "Подключаемый_ОтборПриИзменении");
		ЭлементОтборДо.УстановитьДействие("Очистка", "Подключаемый_ОтборОчистка");
		ЭлементОтборДо.ФорматРедактирования =  ?(ЗначениеЗаполнено(Отбор.ФорматРедактирования), Отбор.ФорматРедактирования, "ЧДЦ=3");
		ЭлементОтборДо.ЦветТекстаЗаголовка = Новый Цвет(160, 160, 160);
		ЭлементОтборДо.КнопкаОчистки = Истина;
		Форма["ОтборДо_" + ОтборИмя] = Неопределено;
		
	ИначеЕсли КоличествоТипов = 1 И Отбор.ТипЗначения.СодержитТип(Тип("Дата"))  Тогда
		
		// Создаем вспомогательную группу
		ЭлементГруппаОтборОтДо = Форма.Элементы.Добавить("ГруппаОтборСПо_" + ОтборИмя, Тип("ГруппаФормы"), ЭлементГруппаОтбор);
		ЭлементГруппаОтборОтДо.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппаОтборОтДо.Отображение = ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппаОтборОтДо.ОтображатьЗаголовок = Истина;
		ЭлементГруппаОтборОтДо.Заголовок = Отбор.Заголовок;
		ЭлементГруппаОтборОтДо.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ЭлементГруппаОтборОтДо.ЦветТекстаЗаголовка = Новый Цвет(160, 160, 160);
		
		// Создаем элемент С
		ЭлементОтборС = Форма.Элементы.Добавить("ОтборС_" + ОтборИмя, Тип("ПолеФормы"), ЭлементГруппаОтборОтДо);
		ЭлементОтборС.Заголовок = НСтр("ru='с'");
		ЭлементОтборС.ПутьКДанным = "ОтборС_" + ОтборИмя;
		ЭлементОтборС.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОтборС.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		ЭлементОтборС.УстановитьДействие("ПриИзменении", "Подключаемый_ОтборПриИзменении");
		ЭлементОтборС.УстановитьДействие("Очистка", "Подключаемый_ОтборОчистка");
		ЭлементОтборС.РастягиватьПоГоризонтали = Истина;
		ЭлементОтборС.Ширина = 8;
		ЭлементОтборС.ФорматРедактирования = Отбор.ФорматРедактирования;
		ЭлементОтборС.ЦветТекстаЗаголовка = Новый Цвет(160, 160, 160);
		Форма["ОтборС_" + ОтборИмя] = Неопределено;
		ЭлементОтборС.КнопкаОчистки = Истина;
		
		// Создаем элемент По
		ЭлементОтборПо = Форма.Элементы.Добавить("ОтборПо_" + ОтборИмя, Тип("ПолеФормы"), ЭлементГруппаОтборОтДо);
		ЭлементОтборПо.Заголовок = НСтр("ru='по'");
		ЭлементОтборПо.ПутьКДанным = "ОтборПо_" + ОтборИмя;
		ЭлементОтборПо.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОтборПо.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		ЭлементОтборПо.УстановитьДействие("ПриИзменении", "Подключаемый_ОтборПриИзменении");
		ЭлементОтборПо.УстановитьДействие("Очистка", "Подключаемый_ОтборОчистка");
		ЭлементОтборПо.РастягиватьПоГоризонтали = Истина;
		ЭлементОтборПо.Ширина = 8;
		ЭлементОтборПо.ФорматРедактирования = Отбор.ФорматРедактирования;
		ЭлементОтборПо.ЦветТекстаЗаголовка = Новый Цвет(160, 160, 160);
		Форма["ОтборПо_" + ОтборИмя] = Неопределено;
		ЭлементОтборПо.КнопкаОчистки = Истина;
		
		
	ИначеЕсли КоличествоТипов = 1 И Отбор.ТипЗначения.СодержитТип(Тип("Булево"))  Тогда
		
		// Создаем элемент
		ЭлементОтбор = Форма.Элементы.Добавить("ОтборДаНет_" + ОтборИмя, Тип("ПолеФормы"), ЭлементГруппаОтбор);
		ЭлементОтбор.ПутьКДанным = "ОтборДаНет_" + ОтборИмя;
		ЭлементОтбор.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОтбор.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементОтбор.ПодсказкаВвода = Отбор.Заголовок;
		ЭлементОтбор.КнопкаВыпадающегоСписка = Истина;
		ЭлементОтбор.КнопкаСоздания = Ложь;
		ЭлементОтбор.КнопкаОткрытия = Ложь;
		ЭлементОтбор.УстановитьДействие("ПриИзменении", "Подключаемый_ОтборПриИзменении");
		Форма["ОтборДаНет_" + ОтборИмя] = Неопределено;
		
		ЭлементОтбор.СписокВыбора.Добавить("Да", НСтр("ru='Да'"));
		ЭлементОтбор.СписокВыбора.Добавить("Нет", НСтр("ru='Нет'"));
		
	Иначе
		
		// Создаем элемент
		ЭлементОтбор = Форма.Элементы.Добавить("Отбор_" + ОтборИмя, Тип("ПолеФормы"), ЭлементГруппаОтбор);
		ЭлементОтбор.ПутьКДанным = "Отбор_" + ОтборИмя;
		ЭлементОтбор.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОтбор.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементОтбор.ПодсказкаВвода = Отбор.Заголовок;
		Если КоличествоТипов = 1 И Не Отбор.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
			ЭлементОтбор.КнопкаВыпадающегоСписка = Истина;
		КонецЕсли;
		ЭлементОтбор.КнопкаСоздания = Ложь;
		ЭлементОтбор.КнопкаОткрытия = Ложь;
		ЭлементОтбор.УстановитьДействие("ПриИзменении", "Подключаемый_ОтборПриИзменении");
		Форма["Отбор_" + ОтборИмя] = Неопределено;
		
		ЭлементОтбор.ФорматРедактирования = Отбор.ФорматРедактирования;
		
		Если Отбор.ВключенРежимВыбораГрупп Тогда
			ЭлементОтбор.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		КонецЕсли;
		
		Если Отбор.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
			ЭлементОтбор.РастягиватьПоГоризонтали = Истина;
		КонецЕсли;
		
		Если Отбор.ЭтоДополнительныйРеквизит Тогда
			Представление = Сред(Отбор.Поле, СтрНайти(Отбор.Поле, ".[") +2, СтрДлина(Отбор.Поле) - СтрНайти(Отбор.Поле, ".[")-2);
			Наименование = Представление;
			Если СтрНайти(Представление, " (") > 0 И СтрЗаканчиваетсяНа(Представление,")") Тогда
				Наименование = Лев(Представление, СтрНайти(Представление, " (", НаправлениеПоиска.СКонца)-1);
			КонецЕсли;
			
			ДополнительныйРеквизит = ПолучитьДополнительныйРеквизит(Наименование, Представление);
			
			Если ДополнительныйРеквизит <> Неопределено Тогда
				ПараметрыВыбораМассив = Новый Массив;
				ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ДополнительныйРеквизит));
				ЭлементОтбор.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьКартинкуКМетке(ПредставлениеМетки)

	Если ПредставлениеМетки = "Без оплаты" Или ПредставлениеМетки = "Без отгрузки" Тогда
		Возврат БиблиотекаКартинок.ГруппаБезОплаты;
	КонецЕсли;
	
	// Подчиненные элементы
	Если ПредставлениеМетки = "Без оплаты (не просрочена)" Или ПредставлениеМетки = "Без отгрузки (не просрочена)" Тогда
		Возврат БиблиотекаКартинок.БезОплатыНеПросрочено;
	КонецЕсли;
	
	Если ПредставлениеМетки = "Без оплаты (ждем сегодня)" Или ПредставлениеМетки = "Без отгрузки (ждем сегодня)" Тогда
		Возврат БиблиотекаКартинок.БезОплатыОжидаетсяСегодня;
	КонецЕсли;
	
	Если ПредставлениеМетки = "Без оплаты (просрочена)" Или ПредставлениеМетки = "Без отгрузки (просрочена)" Тогда
		Возврат БиблиотекаКартинок.БезОплатыПросрочено;
	КонецЕсли;
	
	// Группа
	Если ПредставлениеМетки = "Оплачен частично" Или ПредставлениеМетки = "Отгружен частично" Тогда
		Возврат БиблиотекаКартинок.ГруппаОплаченЧастично;
	КонецЕсли;
	
	// Подчиненные элементы
	Если ПредставлениеМетки = "Оплачен частично (не просрочена)" Или ПредставлениеМетки = "Отгружен частично (не просрочена)" Тогда
		Возврат БиблиотекаКартинок.ОплаченЧастичноНеПросрочено;
	КонецЕсли;
	
	Если ПредставлениеМетки = "Оплачен частично (ждем сегодня)" Или ПредставлениеМетки = "Отгружен частично (ждем сегодня)" Тогда
		Возврат БиблиотекаКартинок.ОплаченЧастичноОжидаетсяСегодня;
	КонецЕсли;
	
	Если ПредставлениеМетки = "Оплачен частично (просрочена)" Или ПредставлениеМетки = "Отгружен частично (просрочена)" Тогда
		Возврат БиблиотекаКартинок.ОплаченЧастичноПросрочено;
	КонецЕсли;
	
	// Прочие отборы первого уровня
	Если ПредставлениеМетки = "Оплачен полностью" Или ПредставлениеМетки = "Отгружен полностью" Тогда
		Возврат БиблиотекаКартинок.ОплаченПолностью;
	КонецЕсли;
	
	Если ПредставлениеМетки = "С переплатой" Тогда
		Возврат БиблиотекаКартинок.СПереплатой;
	КонецЕсли;
	
КонецФункции


Процедура ПроверитьОтборыНаИзменения(Форма, Список, ДанныеОтборов, ДанныеМеток, ИмяГруппыОтборов = "ГруппаОтборы", ИмяСписка = "Список")
	
	Если ИмяСписка = "" Или ИмяСписка = "Список" Тогда
		ИмяРеквизитаСписка = "";
	Иначе
		ИмяРеквизитаСписка = ИмяСписка + "_";
	КонецЕсли;
	
	УдаляемыеОтборы = Новый Массив;
	// Проверяем реквизиты объекта
	КоллекцияДоступныхОтборов = Список.Отбор.ДоступныеПоляОтбора.Элементы;
	
	ДанныеОтборовДоступны = ТипЗнч(ДанныеОтборов) = Тип("ТаблицаЗначений");
	ДанныеМетокДоступны = ТипЗнч(ДанныеМеток) = Тип("ТаблицаЗначений");
	
	Если ДанныеОтборовДоступны Тогда
		
		Для каждого СохраненныйОтбор Из ДанныеОтборов Цикл
			
			Если СохраненныйОтбор.ЭтоПредопределенныйОтбор Тогда
				// проверяем есть ли такой отбор в ДанныеМеток
				Продолжить;
			КонецЕсли;
			
			УровеньВложенности = СохраненныйОтбор.Путь.Количество();
			
			Если УровеньВложенности = 0 Тогда
				УдаляемыеОтборы.Добавить(СохраненныйОтбор.ИмяОтбора);
			КонецЕсли;
			
			Если УровеньВложенности > 0 Тогда
				ДоступныйОтбор = КоллекцияДоступныхОтборов.Найти(СохраненныйОтбор.Путь[0]);
			КонецЕсли;
			
			Если ДоступныйОтбор <> Неопределено И УровеньВложенности > 1 Тогда
				ДоступныйОтбор = ДоступныйОтбор.Элементы.Найти(СохраненныйОтбор.Путь[1]);
			КонецЕсли;
			
			Если ДоступныйОтбор <> Неопределено И УровеньВложенности > 2 Тогда
				ДоступныйОтбор = ДоступныйОтбор.Элементы.Найти(СохраненныйОтбор.Путь[2]);
			КонецЕсли;
			
			Если ДоступныйОтбор <> Неопределено И УровеньВложенности > 3 Тогда
				ДоступныйОтбор = ДоступныйОтбор.Элементы.Найти(СохраненныйОтбор.Путь[3]);
			КонецЕсли;
			
			Если ДоступныйОтбор = Неопределено Тогда
				УдаляемыеОтборы.Добавить(СохраненныйОтбор.ИмяОтбора);
				Продолжить;
			КонецЕсли;
			
			Если СохраненныйОтбор.ВключенРежимВыбораГрупп Тогда
				Если СохраненныйОтбор.Поле <> Строка(ДоступныйОтбор.Поле) + ".Родитель" Тогда
					УдаляемыеОтборы.Добавить(СохраненныйОтбор.ИмяОтбора);
					Продолжить;
				КонецЕсли;
				Если СохраненныйОтбор.Заголовок <> СтрЗаменить(ДоступныйОтбор.Заголовок + " (Группа)", "Ссылка.","") Тогда
					СохраненныйОтбор.Заголовок = ДоступныйОтбор.Заголовок + " (Группа)";
				КонецЕсли;
			Иначе
				Если СохраненныйОтбор.Поле <> СтрЗаменить(Строка(ДоступныйОтбор.Поле), ".Родитель", "") Тогда
					УдаляемыеОтборы.Добавить(СохраненныйОтбор.ИмяОтбора);
					Продолжить;
				КонецЕсли;
				Если СохраненныйОтбор.Заголовок <> СтрЗаменить(СтрЗаменить(ДоступныйОтбор.Заголовок, " (Группа)", ""), "Ссылка.","") Тогда
					СохраненныйОтбор.Заголовок = ДоступныйОтбор.Заголовок + " (Группа)";
				КонецЕсли;
			КонецЕсли;
			
			Если СохраненныйОтбор.Таблица <> ДоступныйОтбор.Таблица Тогда
				УдаляемыеОтборы.Добавить(СохраненныйОтбор.ИмяОтбора);
				Продолжить;
			КонецЕсли;
			
			ДоступныйОтборЭтоДополнительныйРеквизит = СтрЗаканчиваетсяНа(Строка(ДоступныйОтбор.Поле), ")]");
			
			Если СохраненныйОтбор.ЭтоДополнительныйРеквизит <> ДоступныйОтборЭтоДополнительныйРеквизит Тогда
				УдаляемыеОтборы.Добавить(СохраненныйОтбор.ИмяОтбора);
				Продолжить;
			КонецЕсли;
			
			ДоступныйОтборДоступенРежимВыбораГрупп = ЭтоИерархическийСправочник(ДоступныйОтбор.ТипЗначения);
			
			Если СохраненныйОтбор.ДоступенРежимВыбораГрупп <> ДоступныйОтборДоступенРежимВыбораГрупп Тогда
				УдаляемыеОтборы.Добавить(СохраненныйОтбор.ИмяОтбора);
				Продолжить;
			КонецЕсли;
			
			ТипЗначенияИзменился = Ложь;
			Если СохраненныйОтбор.ТипЗначения <> ДоступныйОтбор.ТипЗначения Тогда
				ТипыОтбора = СохраненныйОтбор.ТипЗначения.Типы();
				Для каждого ТипОтбора Из ТипыОтбора Цикл
					Если Не ДоступныйОтбор.ТипЗначения.СодержитТип(ТипОтбора) Тогда
						ТипЗначенияИзменился = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				СохраненныйОтбор.ТипЗначения = ДоступныйОтбор.ТипЗначения;
			КонецЕсли;
			
			Если ТипЗначенияИзменился Тогда
				УдаляемыеОтборы.Добавить(СохраненныйОтбор.ИмяОтбора);
				Продолжить;
			КонецЕсли;
			
			Если СохраненныйОтбор.ФорматРедактирования <> ДоступныйОтбор.ФорматРедактирования Тогда
				СохраненныйОтбор.ФорматРедактирования = ДоступныйОтбор.ФорматРедактирования;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ИмяОтбора Из УдаляемыеОтборы Цикл
	
		СтрокиМеткиМассив = ДанныеМеток.НайтиСтроки(Новый Структура("ИмяОтбора", ИмяОтбора));
		Для каждого СтрокаМетка Из СтрокиМеткиМассив Цикл
			ДанныеМеток.Удалить(ДанныеМеток.Индекс(СтрокаМетка));
		КонецЦикла;
		
		СтрокиОтборыМассив = ДанныеОтборов.НайтиСтроки(Новый Структура("ИмяОтбора", ИмяОтбора));
		Для каждого СтрокаОтбор Из СтрокиОтборыМассив Цикл
			ДанныеОтборов.Удалить(ДанныеОтборов.Индекс(СтрокаОтбор));
		КонецЦикла;
		
	КонецЦикла;

	// Проверяем предопределенные отборы
	Если Форма.Элементы.Найти(ИмяГруппыОтборов) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуществующиеРеквизиты = Форма.ПолучитьРеквизиты();
	ИменаРеквизитов = Новый Массив;
	Для каждого Реквизит Из СуществующиеРеквизиты Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Для каждого ПодчиненныйЭлемент Из Форма.Элементы[ИмяГруппыОтборов].ПодчиненныеЭлементы Цикл
		Если ПодчиненныйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
			Для каждого Отбор Из ПодчиненныйЭлемент.ПодчиненныеЭлементы Цикл
				
				Если ТипЗнч(Отбор) = Тип("ГруппаФормы") Тогда
					Продолжить;
				КонецЕсли;
				
				ГруппыОтбораИмя = Отбор.Имя;
				ЭтоПредопределенныйОтбор = СтрНайти(ГруппыОтбораИмя, "_") = 0;
				Если Не ЭтоПредопределенныйОтбор Тогда
					Продолжить;
				КонецЕсли;
				
				ИДРеквизита = ИменаРеквизитов.Найти(Отбор.Имя);
				//Если ИДРеквизита = Неопределено Тогда
				//	ИДРеквизита = ИменаРеквизитов.Найти(Отбор.ПутьКДанным);
				//КонецЕсли;
				
				РеквизитФормы = СуществующиеРеквизиты.Получить(ИДРеквизита);
				Если РеквизитФормы.ТипЗначения = Неопределено Тогда
					ТипОтбора = Новый ОписаниеТипов("Строка");
				Иначе
					ТипОтбора = РеквизитФормы.ТипЗначения;
				КонецЕсли;
				
				ОтборДоступенПоФО = ОбъектМетаданныхДоступенПоФункциональнымОпциям(ТипОтбора);
				
				Если Отбор.Видимость И ПодчиненныйЭлемент.Видимость И ОтборДоступенПоФО Тогда
					Если ДанныеОтборовДоступны Тогда
						СтрокиОтборыМассив = ДанныеОтборов.НайтиСтроки(Новый Структура("ИмяОтбора", Отбор.Имя));
						Если СтрокиОтборыМассив.Количество() = 0 Тогда
							
							НоваяСтрока = ДанныеОтборов.Добавить();
							НоваяСтрока.ТипЗначения = ТипОтбора;
							
							Если Форма.Элементы[Отбор.Имя].Вид = ВидПоляФормы.ПолеВвода Тогда
								НоваяСтрока.Заголовок = Форма.Элементы[Отбор.Имя].ПодсказкаВвода;
							Иначе
								НоваяСтрока.Заголовок = Форма.Элементы[Отбор.Имя].Заголовок;
							КонецЕсли;
							
							НоваяСтрока.Выбран = Истина;
							НоваяСтрока.ИмяОтбора = Отбор.Имя;
							НоваяСтрока.ЭтоДополнительныйРеквизит = Ложь;
							НоваяСтрока.ЭтоДополнительныйРеквизит = Ложь;
							НоваяСтрока.ЭтоПредопределенныйОтбор = ЭтоПредопределенныйОтбор;
							НоваяСтрока.ДоступенРежимВыбораГрупп = ЭтоИерархическийСправочник(НоваяСтрока.ТипЗначения);
							// АПК:1036-выкл проверка орфографии не требуется
							НоваяСтрока.ИмяЭлемента = ИмяРеквизитаСписка + РаботаСОтборамиКлиентСервер.УбратьЗапрещенныеСимволы(НоваяСтрока.ИмяОтбора,"йцукенгшщзхъфывапролджэячсмитьбю_qwertyuiopasdfghjklzxcvbnm01234567890");;
							// АПК:1036-вкл
							НоваяСтрока.ВключенРежимВыбораГрупп = Ложь;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ Отбор.Видимость Или Не ПодчиненныйЭлемент.Видимость Или Не ОтборДоступенПоФО Тогда
					Если ДанныеМетокДоступны Тогда
						СтрокиМеткиМассив = ДанныеМеток.НайтиСтроки(Новый Структура("ИмяГруппыРодителя", ПодчиненныйЭлемент.Имя));
						Для каждого СтрокаМетка Из СтрокиМеткиМассив Цикл
							ДанныеМеток.Удалить(ДанныеМеток.Индекс(СтрокаМетка));
						КонецЦикла;
					КонецЕсли;
					Если ДанныеОтборовДоступны Тогда
						СтрокиОтборыМассив = ДанныеОтборов.НайтиСтроки(Новый Структура("ИмяОтбора", Отбор.Имя));
						Для каждого СтрокаОтбор Из СтрокиОтборыМассив Цикл
							ДанныеОтборов.Удалить(ДанныеОтборов.Индекс(СтрокаОтбор));
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеМетокДоступны Тогда
		Для каждого СтрокаМетка Из ДанныеМеток Цикл
			
			Если СтрНайти(СтрокаМетка.ИмяГруппыРодителя, "_") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДанныеОтборовДоступны Тогда
				Если Форма.Элементы.Найти(СтрокаМетка.ИмяГруппыРодителя) = Неопределено И ДанныеМеток.Колонки.Найти("ИмяОтбора") <> Неопределено Тогда
					СтрокиОтборыМассив = ДанныеОтборов.НайтиСтроки(Новый Структура("ИмяОтбора", СтрокаМетка.ИмяОтбора));
					Для каждого СтрокаОтбор Из СтрокиОтборыМассив Цикл
						ДанныеОтборов.Удалить(ДанныеОтборов.Индекс(СтрокаОтбор));
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если Форма.Элементы.Найти(СтрокаМетка.ИмяГруппыРодителя) = Неопределено Тогда
				ДанныеМеток.Удалить(ДанныеМеток.Индекс(СтрокаМетка));
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	
КонецПроцедуры

Процедура ОтобразитьОтборыПриСозданииНаСервере(Форма, ДанныеОтборов, ИмяГруппыОтборов)
	
	СоздатьРеквизитыДляДополнительныхОтборов(Форма, ДанныеОтборов);
	
	УстановитьОтборыНаФорме(Форма, ДанныеОтборов, ИмяГруппыОтборов);

КонецПроцедуры

Процедура УстановитьЗначенияДляНестандартныхОтборов(Форма, ДанныеМеток, ДанныеОтборов)
	
	Для каждого Строка Из ДанныеМеток Цикл
		Если СтрНачинаетсяС(Строка.ИмяГруппыРодителя, "ГруппаОтборОтДо_") Или СтрНачинаетсяС(Строка.ИмяГруппыРодителя, "ГруппаОтборСПо_") Тогда
			Если СтрНачинаетсяС(Строка.ПредставлениеМетки, "от") Тогда
				ВидМетки = "От";
			ИначеЕсли СтрНачинаетсяС(Строка.ПредставлениеМетки, "до") Тогда
				ВидМетки = "До";
			ИначеЕсли СтрНачинаетсяС(Строка.ПредставлениеМетки, "с") Тогда
				ВидМетки = "С";
			ИначеЕсли СтрНачинаетсяС(Строка.ПредставлениеМетки, "по") Тогда
				ВидМетки = "По";
			КонецЕсли;
			
			ИмяЭлемента = "";
			НайденныйОтборМассив = ДанныеОтборов.НайтиСтроки(Новый Структура("ИмяОтбора", Строка.ИмяОтбора));
			Если НайденныйОтборМассив.Количество()>0 Тогда
				ИмяЭлемента = НайденныйОтборМассив[0].ИмяЭлемента;
			КонецЕсли;
			
			ИмяРеквизита = "Отбор"+ ВидМетки + "_" + ИмяЭлемента;
			Если Форма.Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда
				Форма[ИмяРеквизита] = Строка.Метка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОтключенныеПредопределенныеОтборы(Форма, ДанныеОтборов, ИмяГруппыОтборов = "ГруппаОтборы")

	СуществующиеРеквизиты = Форма.ПолучитьРеквизиты();
	ИменаРеквизитов = Новый Массив;
	Для каждого Реквизит Из СуществующиеРеквизиты Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	// Делаем обход по правой панели с отборами. Находим отключенные отборы
	Для каждого Отбор Из Форма.Элементы[ИмяГруппыОтборов].ПодчиненныеЭлементы Цикл
		Если Отбор.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
			
			ГруппыОтбораИмя = Отбор.Имя;
			ЭтоПредопределенныйОтбор = СтрНайти(ГруппыОтбораИмя, "_") = 0;
			Если Не ЭтоПредопределенныйОтбор Тогда
				Продолжить;
			КонецЕсли;
			
			ОтборИмя = Отбор.ПодчиненныеЭлементы[0].Имя;
			Если ДанныеОтборов.НайтиСтроки(Новый Структура("ИмяОтбора, ЭтоПредопределенныйОтбор", ОтборИмя, Истина)).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Пропускаем предопределенный отбор. ФО в коде 
			ПредопределенныйОтбор = Отбор.ПодчиненныеЭлементы[0];
			Если Не Отбор.Видимость И НЕ ПредопределенныйОтбор.Видимость Тогда
				Продолжить;
			КонецЕсли;
			
			// Пропускаем включенный отбор
			Если Отбор.Видимость И ПредопределенныйОтбор.Видимость Тогда
				Продолжить;
			КонецЕсли;
			
			ИДРеквизита = ИменаРеквизитов.Найти(ОтборИмя);
			//Если ИДРеквизита = Неопределено Тогда
			//	ИДРеквизита = ИменаРеквизитов.Найти(Отбор.ПутьКДанным);
			//КонецЕсли;
			
			РеквизитФормы = СуществующиеРеквизиты.Получить(ИДРеквизита);
			Если РеквизитФормы.ТипЗначения = Неопределено Тогда
				ТипОтбора = Новый ОписаниеТипов("Строка");
			Иначе
				ТипОтбора = РеквизитФормы.ТипЗначения;
			КонецЕсли;
			
			ОтборДоступенПоФО = ОбъектМетаданныхДоступенПоФункциональнымОпциям(ТипОтбора);
			
			Если Не ОтборДоступенПоФО Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ДанныеОтборов.Добавить();
			
			//МассивТипов = Новый Массив;
			//МассивТипов.Добавить(ТипЗнч(Форма[ПредопределенныйОтбор.Имя]));
			
			НоваяСтрока.ТипЗначения = ТипОтбора; //Новый ОписаниеТипов(МассивТипов);
			
			Если Форма.Элементы[ОтборИмя].Вид = ВидПоляФормы.ПолеВвода Тогда
				НоваяСтрока.Заголовок = Форма.Элементы[ПредопределенныйОтбор.Имя].ПодсказкаВвода;
			Иначе
				НоваяСтрока.Заголовок = Отбор.ПодчиненныеЭлементы[0].Заголовок;
			КонецЕсли;
			
			НоваяСтрока.Выбран = Ложь;
			НоваяСтрока.ИмяОтбора = ПредопределенныйОтбор.Имя;
			НоваяСтрока.ЭтоПредопределенныйОтбор = Истина;
			НоваяСтрока.ВключенРежимВыбораГрупп = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры


// Выполняет установку отбора по указанной организации в динамических списках.
// Вызывать необходимо из обработчика формы ПриСозданииНаСервере.
// Если в форму при открытии был передан отбор по организации, то функция не будет выполнена.
//
// Параметры
//  Форма          - ФормаКлиентскогоПриложения  - форма, в которой необходимо установить отбор
//  ИмяСписка      - Строка - имя реквизита формы типа ДинамическийСписок.
//  ИмяРеквизита   - Строка - имя поля-организации в динамическом списке.
//  ЗначениеОтбора - СправочникСсылка.Организации, СписокЗначений, Массив - значение отбора.
//                   Если значение не задано, то будет подставлена основная организация из
//                   настроек пользователя.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - Если отбор установлен, то вернет значение отбора.
//
Функция УстановитьОтборПоОсновнойОрганизации(Форма, ИмяСписка = "Список", ИмяРеквизита = "Организация", ЗначениеОтбора = Неопределено) Экспорт

	Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		
		Если Форма.Параметры.Свойство("Отбор") И Форма.Параметры.Отбор.Свойство(ИмяРеквизита) Тогда
			// Если значение отбора передается в параметрах формы - берем его оттуда, параметр при этом удаляем
			ОсновнаяОрганизация = Форма.Параметры.Отбор[ИмяРеквизита];
			Форма.Параметры.Отбор.Удалить(ИмяРеквизита);
		ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Организации") 
			ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") 
			ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
			ОсновнаяОрганизация = ЗначениеОтбора;
		Иначе
			ОсновнаяОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
		
		Если ТипЗнч(ОсновнаяОрганизация) = Тип("СправочникСсылка.Организации") Тогда
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
		Иначе
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		КонецЕсли;
		
		ИспользованиеОтбора = ЗначениеЗаполнено(ОсновнаяОрганизация);
		
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		
	Иначе
		
		ОсновнаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ВидСравненияОтбора  = ВидСравненияКомпоновкиДанных.Равно;
		ИспользованиеОтбора = Ложь;
		РежимОтображения    = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма[ИмяСписка], ИмяРеквизита, ОсновнаяОрганизация, ВидСравненияОтбора, , ИспользованиеОтбора, РежимОтображения);
	
	Возврат ОсновнаяОрганизация;
	
КонецФункции

// Изменяет значение отбора в динамическом списке.
// Поиск производится по представлению в элементах отборов верхнего уровня.
//
// Надо анализировать возвращаемое значение - и если вернется
//  Неопределено (т.е. отбор не установлен по причине того, что в списке
//  нет отбора по основной организации (он исправлен вручную и т.п.)), то не надо
//  присваивать Неопределено специальному полю "ОтборПоОрганизации" в форме списка.
//
// Параметры
//  Список         - ДинамическийСписок - список, в котором необходимо изменить значение отбора.
//  ИмяРеквизита   - Строка - имя поля-организации в динамическом списке.
//  ЗначениеОтбора - СправочникСсылка.Организации, СписокЗначений, Массив - значение отбора.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - Если отбор установлен, то вернет значение отбора.
//
Функция ИзменитьОтборПоОсновнойОрганизации(Список, ИмяРеквизита = "Организация", Знач ЗначениеОтбора = Неопределено) Экспорт

	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, ИмяРеквизита);
	
	Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		Если ТипЗнч(ЗначениеОтбора) <> Тип("СправочникСсылка.Организации")
			И ТипЗнч(ЗначениеОтбора) <> Тип("Массив")
			И ТипЗнч(ЗначениеОтбора) <> Тип("СписокЗначений") Тогда
			ЗначениеОтбора = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеОтбора) = Тип("Массив")
		ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
	Иначе
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ИспользованиеОтбора = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, ИмяРеквизита, ЗначениеОтбора, ВидСравненияОтбора, , ИспользованиеОтбора, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
	Возврат ЗначениеОтбора;
	
КонецФункции

// Заменяет отбор, установленный пользователем в сохраненной настройке списка, на отбор, установленный программно при создании формы списка.
// Вызывается при восстановлении пользовательских настроек динамического списка
// из обработчика списка ПередЗагрузкойПользовательскихНастроекНаСервере.
//
// Параметры:
//  Список      - ДинамическийСписок - Динамический список, для которого устанавливается отбор.
//  Настройки   - ПользовательскиеНастройкиКомпоновкиДанных - Восстанавливаемые настройки списка.
//  ИмяОтбора   - Строка - Имя элемента отбора.
//
Процедура ВосстановитьОтборСписка(Список, Настройки, ИмяОтбора) Экспорт

	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, ИмяОтбора);
	
	Если Отборы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОтбора = Отборы[0];
	ИдентификаторНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
	
	Для каждого ЭлементНастроек Из Настройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементНастроек.ИдентификаторПользовательскойНастройки = ИдентификаторНастройки Тогда
			ЭлементНастроек.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
			ЭлементНастроек.Использование  = ЭлементОтбора.Использование;
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти
