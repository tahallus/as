///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СВЯЗАННЫЕ С РЕГЛАМЕНТИРОВАННОЙ ОТЧЕТНОСТЬЮ УСН

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СВЯЗАННЫЕ С РЕГЛАМЕНТИРОВАННОЙ ОТЧЕТНОСТЬЮ УСН

// Функция возвращает документ ЗаписиУСН в периоде по виду формирования
// Если таковой не найден, то создает его
//
// Параметры:
//		Организация - Организация, по которой проводились формирования
//		ПериодФормирования - Период формирования, в котором ищем
//		ВидФормирования - вид формирования, который ищем
//
// Возвращает:
//		ДокументОбъект.ЗаписиУСН - документ, соответствующий критериям
//
Функция ПолучитьДокументЗаписейУСНВПериодеПоВиду(Организация, ПериодФормирования, ВидФормирования) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаписиУСН.Ссылка
	|ИЗ
	|	Документ.ЗаписиУСН КАК ЗаписиУСН
	|ГДЕ
	|	ЗаписиУСН.Дата = &ПериодФормирования
	|	И НЕ ЗаписиУСН.ПометкаУдаления
	|	И ЗаписиУСН.Организация = &Организация
	|	И ЗаписиУСН.ВидЗаписей = &ВидФормирования");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидФормирования", ВидФормирования);
	Запрос.УстановитьПараметр("ПериодФормирования", ПериодФормирования);
	
	РезультатПоиска = Запрос.Выполнить().Выбрать();
	
	Если РезультатПоиска.Следующий() Тогда
		Возврат РезультатПоиска.Ссылка.ПолучитьОбъект();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция на выбранную дату по выбранной оргназиации проверят заполненность 
// параметров УСН
// Возвращает:
//		Истина, если параметры заполнены
//
Функция ПараметрыУСНЗаполнены(Организация, Период) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ДанныеЗаполнены
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&Дата, Организация = &Организация) КАК СистемыНалогообложенияОрганизаций
	|ГДЕ
	|	СистемыНалогообложенияОрганизаций.ОбъектНалогообложения <> ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовНалогообложения.ПустаяСсылка)
	|	И СистемыНалогообложенияОрганизаций.СтавкаНалога >= 0");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Период);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция на выбранную дату по выбранной оргназиации проверят заполненность 
// тарифа страховых взносов
// Возвращает:
//		Истина, если параметры заполнены
//
Функция ТарифыСтраховыхВзносовЗаполнены(Организация, Период) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ДанныеЗаполнены
	|ИЗ
	|	РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(&Дата, Организация = &Организация) КАК ПрименяемыеТарифыСтраховыхВзносовСрезПоследних
	|ГДЕ
	|	ПрименяемыеТарифыСтраховыхВзносовСрезПоследних.ВидТарифа <> ЗНАЧЕНИЕ(Справочник.ВидыТарифовСтраховыхВзносов.ПустаяСсылка)");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Период);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает объект налогообложения на дату или на событие
//
Функция ОбъектНалогообложенияНаДату(Организация,ДатаИлиСобытие) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СистемыНалогообложенияОрганизаций.ОбъектНалогообложения
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация) КАК СистемыНалогообложенияОрганизаций");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ТипЗнч(ДатаИлиСобытие) = Тип("Дата") Тогда
		Запрос.УстановитьПараметр("Дата", ДатаИлиСобытие);
	Иначе
		Запрос.УстановитьПараметр("Дата", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДатаИлиСобытие, "ДатаДокументаОбработкиСобытия"));
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОбъектНалогообложения;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// по документу взаиморасчетов с бюжетом определяет показатель периода
//
Функция ПолучитьПоказательПериода(ДокументВзаиморасчетовСБюжетом, ВидВзаиморасчетов, ДатаДокумента = Неопределено) Экспорт
	Если ЗначениеЗаполнено(ДокументВзаиморасчетовСБюжетом) Тогда
		Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументВзаиморасчетовСБюжетом, "Дата");
	Иначе
		Дата = ДатаДокумента;
	КонецЕсли;
	
	Если ВидВзаиморасчетов = Справочники.ВидыНалогов.АвансовыйПлатежПриУСН Тогда
		Возврат "КВ."+Формат(Месяц(Дата)/3, "ЧЦ=2; ЧВН=")+"."+Формат(Год(Дата), "ЧГ=");
	ИначеЕсли ВидВзаиморасчетов = Справочники.ВидыНалогов.ЕНВД 
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ТорговыйСбор Тогда
		Возврат "КВ."+Формат(Месяц(Дата)/3, "ЧЦ=2; ЧВН=")+"."+Формат(Год(Дата), "ЧГ=");
	ИначеЕсли ВидВзаиморасчетов = Справочники.ВидыНалогов.ЕдиныйНалогПриУСН 
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ПФРНакопительная
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ПФРСтраховая
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ПФРСвыше300ТР
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ТФОМС 
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ФФОМС
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.Патент Тогда
		
		Возврат "ГД.00."+Формат(Год(Дата), "ЧГ=");
	ИначеЕсли ВидВзаиморасчетов = Справочники.ВидыНалогов.НДФЛСотрудники
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ФОМССотрудники
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ФСССотрудники
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ФССТравматизмСотрудники Тогда
		
		Возврат "МС."+Формат(Месяц(Дата), "ЧЦ=2; ЧВН=")+"."+Формат(Год(Дата), "ЧГ=");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// возвращает, был ли исчислен минимальный налог
//
Функция ИсчисленМинимальныйНалог(Организация = Неопределено, Год) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетности.ЗначениеПоказателя КАК МинимальныйНалог
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетности КАК ЗначенияПоказателейОтчетности
	|ГДЕ
	|	ЗначенияПоказателейОтчетности.Организация = &Организация
	|	И ЗначенияПоказателейОтчетности.ПериодОтчетности = &ПериодОтчетности
	|	И ЗначенияПоказателейОтчетности.ПоказательОтчетности = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПоказателиОтчетности.РасчетМинимальнойСуммыЕН)");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Если ТипЗнч(Год) = Тип("Дата") Тогда
		Запрос.УстановитьПараметр("ПериодОтчетности", НачалоДня(КонецГода(Год)));
	Иначе
		Запрос.УстановитьПараметр("ПериодОтчетности", Дата(Год,1,1));
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.МинимальныйНалог;
	
КонецФункции

// функция возвращает необходимые КБК для уплаты по организации и году
//
Функция ПолучитьКБКУплаты(Организация, Дата = Неопределено, ВидВзаиморасчетов = Неопределено) Экспорт
	
	
	Если Дата = Неопределено Тогда
		Год = Год(ТекущаяДатаСеанса());
		ДатаСреза = НачалоГода(ТекущаяДатаСеанса());
	Иначе
		Год = Год(Дата);
	КонецЕсли;
	
	Если ВидВзаиморасчетов = Неопределено 
			ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.АвансовыйПлатежПриУСН 
			ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ЕдиныйНалогПриУСН Тогда
		
		Если ТипЗнч(Год) <> Тип("Дата") Тогда
			ДатаСреза = Дата(Год, 1,1);
		Иначе
			ДатаСреза = Год;
			Год = Год(Год);
		КонецЕсли;
		
		Доходы = (ОбъектНалогообложенияНаДату(Организация, ДатаСреза) = Перечисления.ВидыОбъектовНалогообложения.Доходы);
		
		Если Доходы Тогда
			
			Если Число(Год) >= 2011 Тогда 
				Возврат "18210501011011000110";
			Иначе
				Возврат "18210501012011000110";
			КонецЕсли;
			
		Иначе
			
			Если Число(Год) >= 2011 Тогда
				Возврат "18210501021011000110";
			Иначе
				Возврат "18210501022011000110";
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		СтруктураРесурсов =РегистрыСведений.ЗначенияКБК.ПолучитьПоследнее(Дата, Новый Структура("ВидВзаиморасчета", ВидВзаиморасчетов));
		Возврат СтруктураРесурсов.Значение;
	КонецЕсли;
	
КонецФункции

Функция СрокУплатыПоНалогуИДате(ВидНалога,знач ДатаОплаты) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаОплаты) Тогда
		ДатаОплаты = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МИНИМУМ(КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия) КАК ДатаОкончанияСобытия
	|ИЗ
	|	Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|ГДЕ
	|	КалендарьПодготовкиОтчетности.Задача = &Задача
	|	И КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия >= &ДатаОплаты
	|	И КалендарьПодготовкиОтчетности.ПрименяетсяДляИП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	МАКСИМУМ(КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия)
	|ИЗ
	|	Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|ГДЕ
	|	КалендарьПодготовкиОтчетности.Задача = &Задача
	|	И КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия <= &ДатаОплаты
	|	И КалендарьПодготовкиОтчетности.ПрименяетсяДляИП";
	
	Если ВидНалога = Справочники.ВидыНалогов.АвансовыйПлатежПриУСН Тогда
		Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН;
		// Выбираем ближайшие 45 дней или последний прошедший платеж
		МаксимальнаяДата = ДатаОплаты + 60*60*24*45;
	ИначеЕсли ВидНалога = Справочники.ВидыНалогов.ЕдиныйНалогПриУСН Тогда
		Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалог;
		// Выбираем ближайшие 150 дней или последний прошедший платеж
		МаксимальнаяДата = ДатаОплаты + 60*60*24*150;
	ИначеЕсли ВидНалога = Справочники.ВидыНалогов.ЕНВД Тогда
		Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалогЕНВД;
		// Выбираем ближайшие 45 дней или последний прошедший платеж
		МаксимальнаяДата = ДатаОплаты + 60*60*24*45;
	ИначеЕсли ВидНалога = Справочники.ВидыНалогов.НДФЛСотрудники
		ИЛИ ВидНалога = Справочники.ВидыНалогов.НДФЛДоходыСвышеПредельнойВеличины
		ИЛИ ВидНалога = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники
		ИЛИ ВидНалога = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники
		ИЛИ ВидНалога = Справочники.ВидыНалогов.ФОМССотрудники
		ИЛИ ВидНалога = Справочники.ВидыНалогов.ФСССотрудники
		ИЛИ ВидНалога = Справочники.ВидыНалогов.ФССТравматизмСотрудники Тогда
		// Выбираем ближайшие 20 дней или последний прошедший платеж
		Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.НалогиСотрудников;
		МаксимальнаяДата = ДатаОплаты + 60*60*24*20;
	ИначеЕсли ВидНалога = Справочники.ВидыНалогов.ПФРНакопительная
		Или ВидНалога = Справочники.ВидыНалогов.ПФРСтраховая
		Или ВидНалога = Справочники.ВидыНалогов.ФФОМС Тогда
		Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыИП;
		// Выбираем ближайшие 45 дней или последний прошедший платеж
		МаксимальнаяДата = ДатаОплаты + 60*60*24*45;
	ИначеЕсли ВидНалога = Справочники.ВидыНалогов.ПФРСвыше300тр Тогда
		// Выбираем ближайшие 45 дней или последний прошедший платеж
		МаксимальнаяДата = ДатаОплаты + 60*60*24*45;
		Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыПриДоходахСвыше300тр;
	ИначеЕсли ВидНалога = Справочники.ВидыНалогов.ТорговыйСбор Тогда
		Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ТорговыйСбор;
		// Выбираем ближайшие 45 дней или последний прошедший платеж
		МаксимальнаяДата = ДатаОплаты + 60*60*24*45;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("ДатаОплаты", ДатаОплаты);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли Результат.Количество() = 1 Тогда
		Возврат Результат[0].ДатаОкончанияСобытия;
	Иначе
		Если ЗначениеЗаполнено(Результат[0].ДатаОкончанияСобытия) И
			Результат[0].ДатаОкончанияСобытия <= МаксимальнаяДата Тогда
			Возврат Результат[0].ДатаОкончанияСобытия;
		Иначе
			Возврат Результат[1].ДатаОкончанияСобытия;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьСтатусыОтправленныхОтчетов() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаписиКалендаряПодготовкиОтчетности.Организация,
	|	ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря,
	|	ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря.Задача КАК Задача
	|ИЗ
	|	Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|ГДЕ
	|	ЗаписиКалендаряПодготовкиОтчетности.Состояние = Значение(Перечисление.СостоянияСобытийКалендаря.ПолучитьПодтверждение)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Справки2НДФЛ Тогда
			ДокументОтчетности = ПолучитьСправку2НДФЛВНалоговыйОрганПоСобытиюКалендаря(Выборка.Организация, Выборка.СобытиеКалендаря);
			КонтролирующийОрган = "ФНС";
		ИначеЕсли Выборка.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ОтчетностьВПФР Тогда
			ДокументОтчетности = ПолучитьКомплектОтчетностиПерсучетаПоСобытиюКалендаря(Выборка.Организация, Выборка.СобытиеКалендаря);
			КонтролирующийОрган = "ПФР";
		ИначеЕсли Выборка.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма4ФСС Тогда
			ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Выборка.Организация, Выборка.СобытиеКалендаря);
			КонтролирующийОрган = "ФСС";
		ИначеЕсли Выборка.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма1Предприниматель Тогда
			ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Выборка.Организация, Выборка.СобытиеКалендаря);
			КонтролирующийОрган = "ФСГС";
		ИначеЕсли Выборка.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СведенияОЗастрахованныхЛицах Тогда
			ДокументОтчетности = ПолучитьСЗВМПоСобытиюКалендаря(Выборка.Организация, Выборка.СобытиеКалендаря);
			КонтролирующийОрган = "ПФР";
		ИначеЕсли Выборка.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СЗВСтаж Тогда
			ДокументОтчетности = ПолучитьСЗВСТАЖПоСобытиюКалендаря(Выборка.Организация, Выборка.СобытиеКалендаря);
			КонтролирующийОрган = "ПФР";
		ИначеЕсли Выборка.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Декларация12 Тогда
			ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Выборка.Организация, Выборка.СобытиеКалендаря);
			КонтролирующийОрган = "ФСРАР";
		Иначе
			ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Выборка.Организация, Выборка.СобытиеКалендаря);
			КонтролирующийОрган = "ФНС";
		КонецЕсли;
		
		ТекущееСостояние = СведенияПоОтправкам.ТекущееСостояниеОтправки(ДокументОтчетности, КонтролирующийОрган);
		Если ТекущееСостояние <> Неопределено Тогда
			Состояние = ТекущееСостояние.ТекущийЭтапОтправки.СостояниеСдачиОтчетности;
			Если Состояние = Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота
				ИЛИ Состояние = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота Тогда
				
				КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
					Выборка.Организация,
					Выборка.СобытиеКалендаря,
					?(Состояние = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота,Перечисления.СостоянияСобытийКалендаря.Завершить, Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота),
					ДокументОтчетности);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует назначения платежей по страховым взносам
//
Функция ПолучитьТекстНазначенияПлатежаНалогаПоСтраховымВзносам(ДатаДокумента, ВидВзаиморасчетов) Экспорт
	
	Если ВидВзаиморасчетов = Справочники.ВидыНалогов.ПФРНакопительная Тогда
		Если ДатаДокумента > '20130101' Тогда
			Возврат НСтр("ru ='Страховые взносы в фиксированном размере на выплату накопительной части трудовой пенсии.'");
		Иначе
			Возврат НСтр("ru ='Страховые взносы исходя из стоимости страхового года на выплату накопительной части трудовой пенсии.'");
		КонецЕсли;
	ИначеЕсли ВидВзаиморасчетов = Справочники.ВидыНалогов.ПФРСтраховая
		ИЛИ ВидВзаиморасчетов = Справочники.ВидыНалогов.ПФРСвыше300ТР Тогда
		Если ДатаДокумента > '20130101' Тогда
			Возврат НСтр("ru ='Страховые взносы в фиксированном размере на выплату страховой части трудовой пенсии.'");
		Иначе
			Возврат НСтр("ru ='Страховые взносы исходя из стоимости страхового года на выплату страховой части трудовой пенсии.'");
		КонецЕсли;
	ИначеЕсли ВидВзаиморасчетов = Справочники.ВидыНалогов.ТФОМС Тогда
		Возврат НСтр("ru ='Страховые взносы на ОМС, зачисляемые в бюджет ТФОМС.'");
	ИначеЕсли ВидВзаиморасчетов = Справочники.ВидыНалогов.ФФОМС Тогда
		Возврат НСтр("ru ='Страховые взносы на ОМС, зачисляемые в бюджет ФФОМС.'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

//
//  Функция проверяет, включен ли учет по организации-компании
//
Функция ПолучитьТорговыеТочкиРозничнойПродажиАлкоголяПоОрганизации(Организация) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	НЕ КлассификаторОрганизацийЕГАИС.ПометкаУдаления
	|	И КлассификаторОрганизацийЕГАИС.Контрагент = &Организация
	|	И КлассификаторОрганизацийЕГАИС.СоответствуетОрганизации
	|	И КлассификаторОрганизацийЕГАИС.Сопоставлено";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТорговыйОбъект");
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
//// ОТРАЖЕНИЕ ДВИЖЕНИЙ ПО РЕГИСТРАМ

// Выполняет движения по регистру накопления КнигаУчетаДоходовИРасходов
// 
Процедура ОтразитьКнигаУчетаДоходовИРасходов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаКнигаУчетаДоходовИРасходов;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.КнигаУчетаДоходовИРасходов.Записывать = Истина;
	Движения.КнигаУчетаДоходовИРасходов.Загрузить(Таблица);

КонецПроцедуры

// Функция создает платежное поручение исходящие на основании
// данных по взаиморасчету с бюджетом
//
Функция СоздатьБезналичноеСписаниеПоВзаиморасчетамСБюджетом(ДокументВзаиморасчетовСБюджетом, БанкСчет, Патент = Неопределено, Сумма = Неопределено) Экспорт
	
	// Поиск существующего документа, не акцептованного банка и не помеченного на удаление
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.ДокументОснование = &ДокументОснование
	|	И (НЕ ПлатежноеПоручение.ПометкаУдаления)");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументВзаиморасчетовСБюджетом);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ДокументОбъект = Документы.ПлатежноеПоручение.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Ссылка = Выборка.Ссылка;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		// удалить движения по сумме взаиморасчетов
		Если ДокументОбъект.Проведен Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Заполнить(ДокументВзаиморасчетовСБюджетом);
	ДокументОбъект.БанковскийСчет = БанкСчет;
	
	Если Сумма <> Неопределено Тогда
		ДокументОбъект.СуммаДокумента = Сумма;
	КонецЕсли;
	
	Если Патент <> Неопределено Тогда
		// Определяем кбк и назначение платежа по патенту
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Патенты.КБК,
		|	Патенты.НомерПатента
		|ИЗ
		|	Справочник.Патенты КАК Патенты
		|ГДЕ
		|	Патенты.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Патент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДокументОбъект.КодБК = Выборка.КБК;
			ДокументОбъект.НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уплата налога, взимаемого в связи с применением патентной системы налогообложения, зачисляемого в бюджеты %1, № %2,  НДС не облагается'"),
				Справочники.Патенты.НаправлениеПОКБК(Выборка.КБК),
				Выборка.НомерПатента);
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции
/////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЙ ЗАПИСЕЙ КУДИР

// Функция возвращает дату-время с которой(!) требуется выполнить формирования
//
Функция ПолучитьДатуНачалаФормированияЗаписейКУДиР() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(ДатыИзмененныхДокументов.ДатаДокумента), &ТекущаяДата) КАК ДатаДокумента
	|ИЗ
	|	РегистрСведений.ДатыИзмененныхДокументов КАК ДатыИзмененныхДокументов";
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДатаДокумента;
	Иначе
		Возврат ТекущаяДата;
	КонецЕсли;
	
КонецФункции


// Процедура формирует записи по прочим доходам
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодФормирования - Дата - дата окончания квартала, за который нужно провести формирования
//		Результат - Структура - структура результата
//
Процедура ВыполнитьФормированиеПоДоходам(Организация, ПериодФормирования, Результат, МенеджерВТ) Экспорт
	
	ДокументФормирования = Результат.ДокументФормирования;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОплатаПлатежнымиКартами.Ссылка КАК Ссылка,
	|	СУММА(ЕСТЬNULL(ТаблицаОплатаПлатежнымиКартами.Сумма, 0)) КАК СуммаБезналичнойОплаты
	|ПОМЕСТИТЬ ВТОплатаКартами
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.БезналичнаяОплата КАК ТаблицаОплатаПлатежнымиКартами
	|ГДЕ
	|	(ТаблицаОплатаПлатежнымиКартами.Ссылка.УчитыватьВНУ
	|				И ТаблицаОплатаПлатежнымиКартами.Ссылка.ПоложениеНастроекНалоговогоУчета <> ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ИЛИ ТаблицаОплатаПлатежнымиКартами.Ссылка.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|				И ТаблицаОплатаПлатежнымиКартами.УчитыватьВНУ)
	|	И ТаблицаОплатаПлатежнымиКартами.Ссылка.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ТаблицаОплатаПлатежнымиКартами.Ссылка.ПометкаУдаления
	|	И ТаблицаОплатаПлатежнымиКартами.Ссылка.Проведен
	|	И ТаблицаОплатаПлатежнымиКартами.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплатаПлатежнымиКартами.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка КАК Ссылка,
	|	СУММА(ЕСТЬNULL(ОтчетОРозничныхПродажахЗапасы.Всего, 0)) КАК СуммаДокумента
	|ПОМЕСТИТЬ ВТЗапасы
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Запасы КАК ОтчетОРозничныхПродажахЗапасы
	|ГДЕ
	|	(ОтчетОРозничныхПродажахЗапасы.Ссылка.УчитыватьВНУ
	|				И ОтчетОРозничныхПродажахЗапасы.Ссылка.ПоложениеНастроекНалоговогоУчета <> ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ИЛИ ОтчетОРозничныхПродажахЗапасы.Ссылка.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|				И ОтчетОРозничныхПродажахЗапасы.УчитыватьВНУ)
	|	И ОтчетОРозничныхПродажахЗапасы.Ссылка.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ОтчетОРозничныхПродажахЗапасы.Ссылка.ПометкаУдаления
	|	И ОтчетОРозничныхПродажахЗапасы.Ссылка.Проведен
	|	И ОтчетОРозничныхПродажахЗапасы.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажах.Дата КАК Дата,
	|	ОтчетОРозничныхПродажах.Номер КАК Номер,
	|	ОтчетОРозничныхПродажах.СуммаПредоплаты КАК СуммаПредоплаты,
	|	ОтчетОРозничныхПродажах.ВалютаДокумента КАК ВалютаДокумента,
	|	ЕСТЬNULL(СУММА(ТаблицаОплатаПлатежнымиКартами.СуммаБезналичнойОплаты), 0) КАК СуммаБезналичнойОплаты,
	|	ЕСТЬNULL(СУММА(ОтчетОРозничныхПродажахЗапасы.СуммаДокумента), 0) КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА НЕ ОтчетОРозничныхПродажах.УчитыватьВНУ
	|				И ОтчетОРозничныхПродажах.ПоложениеНастроекНалоговогоУчета <> ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА 0
	|		ИНАЧЕ ОтчетОРозничныхПродажах.ПолученаПредоплата
	|	КОНЕЦ КАК ПолученаПредоплата
	|ПОМЕСТИТЬ ВТРозничныеПродажи
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОплатаКартами КАК ТаблицаОплатаПлатежнымиКартами
	|		ПО (ТаблицаОплатаПлатежнымиКартами.Ссылка = ОтчетОРозничныхПродажах.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗапасы КАК ОтчетОРозничныхПродажахЗапасы
	|		ПО (ОтчетОРозничныхПродажахЗапасы.Ссылка = ОтчетОРозничныхПродажах.Ссылка)
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ОтчетОРозничныхПродажах.ПометкаУдаления
	|	И ОтчетОРозничныхПродажах.Проведен
	|	И ОтчетОРозничныхПродажах.Организация = &Организация
	|	И (ОтчетОРозничныхПродажах.УчитыватьВНУ
	|			ИЛИ ОтчетОРозничныхПродажах.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхПродажах.СуммаПредоплаты,
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Номер,
	|	ОтчетОРозничныхПродажах.ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА НЕ ОтчетОРозничныхПродажах.УчитыватьВНУ
	|				И ОтчетОРозничныхПродажах.ПоложениеНастроекНалоговогоУчета <> ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА 0
	|		ИНАЧЕ ОтчетОРозничныхПродажах.ПолученаПредоплата
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходСоСчета.Ссылка КАК Ссылка,
	|	СУММА(ТаблицаДокумента.СуммаРасчетов) КАК СуммаДокумента
	|ПОМЕСТИТЬ ВТВозвратОплатыНаКарты
	|ИЗ
	|	Документ.РасходСоСчета КАК РасходСоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходСоСчета.РасшифровкаПлатежа КАК ТаблицаДокумента
	|		ПО (РасходСоСчета.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
	|			И (НЕ РасходСоСчета.ПометкаУдаления)
	|			И (РасходСоСчета.Проведен)
	|			И (РасходСоСчета.Организация = &Организация)
	|			И (РасходСоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты))
	|			И РасходСоСчета.Ссылка = ТаблицаДокумента.Ссылка
	|			И (ВЫБОР
	|				КОГДА РасходСоСчета.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|					ТОГДА ТаблицаДокумента.УчитыватьВНУ
	|				ИНАЧЕ РасходСоСчета.УчитыватьВНУ
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходСоСчета.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеНаСчет.Ссылка КАК Ссылка,
	|	СУММА(ТаблицаДокумента.СуммаРасчетов + ТаблицаДокумента.СуммаПлатежаКомиссии) КАК СуммаДокумента,
	|	СУММА(ТаблицаДокумента.СуммаПлатежаКомиссии) КАК СуммаКомиссииДокумента
	|ПОМЕСТИТЬ ВТОплатыПоКартам
	|ИЗ
	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаСчет.РасшифровкаПлатежа КАК ТаблицаДокумента
	|		ПО (ПоступлениеНаСчет.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
	|			И (НЕ ПоступлениеНаСчет.ПометкаУдаления)
	|			И (ПоступлениеНаСчет.Проведен)
	|			И (ПоступлениеНаСчет.Организация = &Организация)
	|			И (ПоступлениеНаСчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам))
	|			И ПоступлениеНаСчет.Ссылка = ТаблицаДокумента.Ссылка
	|			И (ВЫБОР
	|				КОГДА ПоступлениеНаСчет.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|					ТОГДА ТаблицаДокумента.УчитыватьВНУ
	|				ИНАЧЕ ПоступлениеНаСчет.УчитыватьВНУ
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНаСчет.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеВКассу.Ссылка КАК ПервичныйДокумент,
	|	ПоступлениеВКассу.Контрагент КАК Контрагент,
	|	ПоступлениеВКассу.Контрагент.НаименованиеПолное КАК ЮридическоеНазваниеКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК КонтрагентПолучатель,
	|	"""" КАК ЮридическоеНазваниеКонтрагентаПолучателя,
	|	ПоступлениеВКассу.Подотчетник КАК Подотчетник,
	|	ПоступлениеВКассу.СуммаДокумента КАК ДоходБаза,
	|	ПоступлениеВКассу.СуммаДокумента КАК ДоходВсего,
	|	0 КАК СуммаКомиссииДокумента,
	|	ПоступлениеВКассу.ВидОперации КАК ВидОперации,
	|	ПоступлениеВКассу.Дата КАК ДатаПервичногоДокумента,
	|	ПоступлениеВКассу.Номер КАК НомерПервичногоДокумента,
	|	ПоступлениеВКассу.Дата КАК Период,
	|	"""" КАК НомерВходящегоДокумента,
	|	"""" КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ПоступлениеВКассу.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	ПоступлениеВКассу.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	|ГДЕ
	|	ПоступлениеВКассу.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ПоступлениеВКассу.ПометкаУдаления
	|	И ПоступлениеВКассу.Проведен
	|	И ПоступлениеВКассу.Организация = &Организация
	|	И ПоступлениеВКассу.УчитыватьВНУ
	|	И ПоступлениеВКассу.ВидОперации В(&МассивИспользуемыхВидовПоступленийВКассу)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	NULL,
	|	NULL,
	|	НЕОПРЕДЕЛЕНО,
	|	"""",
	|	NULL,
	|	ОтчетОРозничныхПродажах.СуммаДокумента - ОтчетОРозничныхПродажах.СуммаБезналичнойОплаты - ОтчетОРозничныхПродажах.СуммаПредоплаты + ОтчетОРозничныхПродажах.ПолученаПредоплата,
	|	ОтчетОРозничныхПродажах.СуммаДокумента - ОтчетОРозничныхПродажах.СуммаБезналичнойОплаты - ОтчетОРозничныхПродажах.СуммаПредоплаты + ОтчетОРозничныхПродажах.ПолученаПредоплата,
	|	0,
	|	"""",
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Номер,
	|	ОтчетОРозничныхПродажах.Дата,
	|	"""",
	|	"""",
	|	НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажах.Дата, ДЕНЬ),
	|	ОтчетОРозничныхПродажах.ВалютаДокумента
	|ИЗ
	|	ВТРозничныеПродажи КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.СуммаДокумента - ОтчетОРозничныхПродажах.СуммаБезналичнойОплаты - ОтчетОРозничныхПродажах.СуммаПредоплаты + ОтчетОРозничныхПродажах.ПолученаПредоплата <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаСчет.Ссылка,
	|	ПоступлениеНаСчет.Контрагент,
	|	ПоступлениеНаСчет.Контрагент.НаименованиеПолное,
	|	НЕОПРЕДЕЛЕНО,
	|	"""",
	|	ПоступлениеНаСчет.Подотчетник,
	|	ЕСТЬNULL(ВТОплатыПоКартам.СуммаДокумента, ПоступлениеНаСчет.СуммаДокумента + ПоступлениеНаСчет.СуммаКомиссииДокумента),
	|	ЕСТЬNULL(ВТОплатыПоКартам.СуммаДокумента, ПоступлениеНаСчет.СуммаДокумента + ПоступлениеНаСчет.СуммаКомиссииДокумента),
	|	ЕСТЬNULL(ВТОплатыПоКартам.СуммаКомиссииДокумента, ПоступлениеНаСчет.СуммаКомиссииДокумента),
	|	ПоступлениеНаСчет.ВидОперации,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчет.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПоступлениеНаСчет.Дата
	|		ИНАЧЕ ПоступлениеНаСчет.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	ПоступлениеНаСчет.Номер,
	|	ПоступлениеНаСчет.Дата,
	|	ПоступлениеНаСчет.НомерВходящегоДокумента,
	|	ПоступлениеНаСчет.НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ПоступлениеНаСчет.Дата, ДЕНЬ),
	|	ПоступлениеНаСчет.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОплатыПоКартам КАК ВТОплатыПоКартам
	|		ПО (ВТОплатыПоКартам.Ссылка = ПоступлениеНаСчет.Ссылка)
	|ГДЕ
	|	ПоступлениеНаСчет.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ПоступлениеНаСчет.ПометкаУдаления
	|	И ПоступлениеНаСчет.Проведен
	|	И ПоступлениеНаСчет.Организация = &Организация
	|	И (ПоступлениеНаСчет.УчитыватьВНУ
	|			ИЛИ НЕ ВТОплатыПоКартам.Ссылка ЕСТЬ NULL)
	|	И ПоступлениеНаСчет.ВидОперации В(&МассивИспользуемыхВидовПоступленийНаСчет)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Контрагент,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Контрагент.НаименованиеПолное,
	|	НЕОПРЕДЕЛЕНО,
	|	"""",
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Подотчетник,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.ПолученоОтКлиента,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.ПолученоОтКлиента,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.УдержаноАгентом,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.ВидОперации,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Дата
	|		ИНАЧЕ ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Номер,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Дата,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.НомерВходящегоДокумента,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Дата, ДЕНЬ),
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.ПоступлениеНаСчет.РасшифровкаПлатежаОтАгента КАК ПоступлениеНаСчетРасшифровкаПлатежаОтАгента
	|ГДЕ
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.ПометкаУдаления
	|	И ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Проведен
	|	И ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Организация = &Организация
	|	И ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.УчитыватьВНУ
	|	И ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходСоСчета.Ссылка,
	|	РасходСоСчета.Контрагент,
	|	РасходСоСчета.Контрагент.НаименованиеПолное,
	|	НЕОПРЕДЕЛЕНО,
	|	"""",
	|	РасходСоСчета.Подотчетник,
	|	-ЕСТЬNULL(ВТВозвратОплатыНаКарты.СуммаДокумента, РасходСоСчета.СуммаДокумента),
	|	-ЕСТЬNULL(ВТВозвратОплатыНаКарты.СуммаДокумента, РасходСоСчета.СуммаДокумента),
	|	0,
	|	РасходСоСчета.ВидОперации,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РасходСоСчета.Дата
	|		ИНАЧЕ РасходСоСчета.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	РасходСоСчета.Номер,
	|	РасходСоСчета.Дата,
	|	РасходСоСчета.НомерВходящегоДокумента,
	|	РасходСоСчета.НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(РасходСоСчета.Дата, ДЕНЬ),
	|	РасходСоСчета.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.РасходСоСчета КАК РасходСоСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВозвратОплатыНаКарты КАК ВТВозвратОплатыНаКарты
	|		ПО (ВТВозвратОплатыНаКарты.Ссылка = РасходСоСчета.Ссылка)
	|ГДЕ
	|	РасходСоСчета.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ РасходСоСчета.ПометкаУдаления
	|	И РасходСоСчета.Проведен
	|	И РасходСоСчета.Организация = &Организация
	|	И РасходСоСчета.ВидОперации В(&МассивИспользуемыхВидовРасходовСоСчета)
	|	И (РасходСоСчета.УчитыватьВНУ
	|			ИЛИ НЕ ВТВозвратОплатыНаКарты.Ссылка ЕСТЬ NULL)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзКассы.Ссылка,
	|	РасходИзКассы.Контрагент,
	|	РасходИзКассы.Контрагент.НаименованиеПолное,
	|	НЕОПРЕДЕЛЕНО,
	|	"""",
	|	РасходИзКассы.Подотчетник,
	|	-РасходИзКассы.СуммаДокумента,
	|	-РасходИзКассы.СуммаДокумента,
	|	0,
	|	РасходИзКассы.ВидОперации,
	|	РасходИзКассы.Дата,
	|	РасходИзКассы.Номер,
	|	РасходИзКассы.Дата,
	|	"""",
	|	"""",
	|	НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ),
	|	РасходИзКассы.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ РасходИзКассы.ПометкаУдаления
	|	И РасходИзКассы.Проведен
	|	И РасходИзКассы.Организация = &Организация
	|	И РасходИзКассы.УчитыватьВНУ
	|	И РасходИзКассы.ВидОперации В(&МассивИспользуемыхВидовРасходовИзКассы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетКомиссионера.Ссылка,
	|	ОтчетКомиссионера.Контрагент,
	|	ОтчетКомиссионера.Контрагент.НаименованиеПолное,
	|	НЕОПРЕДЕЛЕНО,
	|	"""",
	|	NULL,
	|	ОтчетКомиссионера.СуммаВознаграждения,
	|	ОтчетКомиссионера.СуммаВознаграждения,
	|	0,
	|	NULL,
	|	ОтчетКомиссионера.Дата,
	|	ОтчетКомиссионера.Номер,
	|	ОтчетКомиссионера.Дата,
	|	"""",
	|	"""",
	|	НАЧАЛОПЕРИОДА(ОтчетКомиссионера.Дата, ДЕНЬ),
	|	ОтчетКомиссионера.ВалютаДокумента
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	|ГДЕ
	|	ОтчетКомиссионера.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ОтчетКомиссионера.ПометкаУдаления
	|	И ОтчетКомиссионера.Проведен
	|	И ОтчетКомиссионера.Организация = &Организация
	|	И ОтчетКомиссионера.УдержатьКомиссионноеВознаграждение
	|	И ОтчетКомиссионера.СуммаВознаграждения > 0
	|	И ОтчетКомиссионера.УчитыватьВНУ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетКомитенту.Ссылка,
	|	ОтчетКомитенту.Контрагент,
	|	ОтчетКомитенту.Контрагент.НаименованиеПолное,
	|	НЕОПРЕДЕЛЕНО,
	|	"""",
	|	NULL,
	|	ОтчетКомитенту.СуммаВознаграждения,
	|	ОтчетКомитенту.СуммаВознаграждения,
	|	0,
	|	NULL,
	|	ОтчетКомитенту.Дата,
	|	ОтчетКомитенту.Номер,
	|	ОтчетКомитенту.Дата,
	|	"""",
	|	"""",
	|	НАЧАЛОПЕРИОДА(ОтчетКомитенту.Дата, ДЕНЬ),
	|	ОтчетКомитенту.ВалютаДокумента
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ОтчетКомитенту.ПометкаУдаления
	|	И ОтчетКомитенту.Проведен
	|	И ОтчетКомитенту.Организация = &Организация
	|	И ОтчетКомитенту.УдержатьКомиссионноеВознаграждение
	|	И ОтчетКомитенту.СуммаВознаграждения > 0
	|	И ОтчетКомитенту.УчитыватьВНУ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаимозачетДебитор.Ссылка,
	|	ВзаимозачетДебитор.Ссылка.КонтрагентИсточник,
	|	ВзаимозачетДебитор.Ссылка.КонтрагентИсточник.НаименованиеПолное,
	|	ВзаимозачетДебитор.Ссылка.Контрагент,
	|	ВзаимозачетДебитор.Ссылка.Контрагент.НаименованиеПолное,
	|	NULL,
	|	ВзаимозачетДебитор.СуммаРасчетов,
	|	ВзаимозачетДебитор.СуммаРасчетов,
	|	0,
	|	ВзаимозачетДебитор.Ссылка.ВидОперации,
	|	ВзаимозачетДебитор.Ссылка.Дата,
	|	ВзаимозачетДебитор.Ссылка.Номер,
	|	ВзаимозачетДебитор.Ссылка.Дата,
	|	"""",
	|	"""",
	|	НАЧАЛОПЕРИОДА(ВзаимозачетДебитор.Ссылка.Дата, ДЕНЬ),
	|	ВзаимозачетДебитор.Договор.ВалютаРасчетов
	|ИЗ
	|	Документ.Взаимозачет.Дебитор КАК ВзаимозачетДебитор
	|ГДЕ
	|	ВзаимозачетДебитор.Ссылка.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ВзаимозачетДебитор.Ссылка.ПометкаУдаления
	|	И ВзаимозачетДебитор.Ссылка.Проведен
	|	И ВзаимозачетДебитор.Ссылка.Организация = &Организация
	|	И ВзаимозачетДебитор.Ссылка.УчитыватьВНУ
	|	И ВзаимозачетДебитор.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачет.Взаимозачет)
	|	И НЕ ВзаимозачетДебитор.ПризнакАванса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДоходы.ПервичныйДокумент КАК ПервичныйДокумент,
	|	ВТДоходы.Контрагент КАК Контрагент,
	|	ВТДоходы.ЮридическоеНазваниеКонтрагента КАК ЮридическоеНазваниеКонтрагента,
	|	ВТДоходы.КонтрагентПолучатель КАК КонтрагентПолучатель,
	|	ВТДоходы.ЮридическоеНазваниеКонтрагентаПолучателя КАК ЮридическоеНазваниеКонтрагентаПолучателя,
	|	ВТДоходы.Подотчетник КАК Подотчетник,
	|	ВТДоходы.ДоходБаза * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК ДоходБаза,
	|	ВТДоходы.ДоходВсего * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК ДоходВсего,
	|	ВТДоходы.СуммаКомиссииДокумента * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК СуммаКомиссииДокумента,
	|	ВТДоходы.ВидОперации КАК ВидОперации,
	|	ВТДоходы.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	|	ВТДоходы.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	ВТДоходы.Период КАК Период,
	|	ВТДоходы.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТДоходы.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ВТДоходы.ДатаНачалоДня КАК ДатаНачалоДня
	|ИЗ
	|	ВТДоходы КАК ВТДоходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
	|		ПО ВТДоходы.ДатаНачалоДня = КурсыВалютПоДням.Дата
	|			И ВТДоходы.ВалютаДенежныхСредств = КурсыВалютПоДням.Валюта";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(ПериодФормирования));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодФормирования));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	МассивИспользуемыхВидовПоступленийВКассу = Новый Массив;
	МассивИспользуемыхВидовПоступленийВКассу.Добавить(Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя);
	МассивИспользуемыхВидовПоступленийВКассу.Добавить(Перечисления.ВидыОперацийПоступлениеВКассу.Прочее);
	МассивИспользуемыхВидовПоступленийВКассу.Добавить(Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты);
	
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовПоступленийВКассу", МассивИспользуемыхВидовПоступленийВКассу);
	
	МассивИспользуемыхВидовПоступленийНаСчет = Новый Массив;
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя);
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее);
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты);
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовПоступленийНаСчет", МассивИспользуемыхВидовПоступленийНаСчет);
	
	МассивИспользуемыхВидовРасходовИзКассы = Новый Массив;
	МассивИспользуемыхВидовРасходовИзКассы.Добавить(Перечисления.ВидыОперацийРасходИзКассы.Покупателю);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовРасходовИзКассы", МассивИспользуемыхВидовРасходовИзКассы);
	
	МассивИспользуемыхВидовРасходовСоСчета = Новый Массив;
	МассивИспользуемыхВидовРасходовСоСчета.Добавить(Перечисления.ВидыОперацийРасходСоСчета.Покупателю);
	МассивИспользуемыхВидовРасходовСоСчета.Добавить(Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты);
	
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовРасходовСоСчета", МассивИспользуемыхВидовРасходовСоСчета);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ИндексПоследнегоЗапроса = МассивРезультатов.Количество() - 1;
	ВыборкаЗаписейУСН = МассивРезультатов[ИндексПоследнегоЗапроса].Выбрать();
	
	Если ДокументФормирования = Неопределено И ВыборкаЗаписейУСН.Количество() > 0 Тогда
		ДокументФормирования = Документы.ЗаписиУСН.СоздатьДокумент();
		ДокументФормирования.Дата = ПериодФормирования;
		ДокументФормирования.Организация = Организация;
		ДокументФормирования.ВидЗаписей = Перечисления.ВидыЗаписейФормированийКУДиР.ДоходыПрочие;
	КонецЕсли;
	
	Если ДокументФормирования <> Неопределено Тогда
		
		ДокументФормирования.ЗаписиКУДиР.Очистить();
		
		Пока ВыборкаЗаписейУСН.Следующий() Цикл
			НоваяСтрокаУСН = ДокументФормирования.ЗаписиКУДиР.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУСН, ВыборкаЗаписейУСН);
			Если НЕ ПустаяСтрока(ВыборкаЗаписейУСН.НомерВходящегоДокумента) Тогда
				НоваяСтрокаУСН.НомерПервичногоДокумента = ВыборкаЗаписейУСН.НомерВходящегоДокумента;
			КонецЕсли;
			НоваяСтрокаУСН.НомерПервичногоДокумента =  ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НоваяСтрокаУСН.НомерПервичногоДокумента, Истина, Истина);
			
			Если ТипЗнч(ВыборкаЗаписейУСН.ПервичныйДокумент) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
				НоваяСтрокаУСН.Содержание = НСтр("ru = 'Поступление розничной выручки'");
			ИначеЕсли ТипЗнч(ВыборкаЗаписейУСН.ПервичныйДокумент) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
				НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Получен отчет комиссионера ""%1""; вознаграждение комиссионера зачтено из выручки от реализации.'"),
					?(ЗначениеЗаполнено(СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента)),СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента),СокрЛП(ВыборкаЗаписейУСН.Контрагент)));
			ИначеЕсли ТипЗнч(ВыборкаЗаписейУСН.ПервичныйДокумент) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
				НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оказание посреднических услуг в торговле (комиссионное вознаграждение); комитент ""%1"". Комиссионное вознаграждение удержано из выручки'"),
					?(ЗначениеЗаполнено(СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента)),СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента),СокрЛП(ВыборкаЗаписейУСН.Контрагент)));
			ИначеЕсли ТипЗнч(ВыборкаЗаписейУСН.ПервичныйДокумент) = Тип("ДокументСсылка.Взаимозачет") Тогда
				Если ВыборкаЗаписейУСН.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.Взаимозачет") Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Проведен взаимозачет между ""%1"" (дебитор) и ""%2"" (кредитор); по дебиторской задолженности.'"),
						?(ЗначениеЗаполнено(СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента)), СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента), СокрЛП(ВыборкаЗаписейУСН.Контрагент)),
						?(ЗначениеЗаполнено(СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагентаПолучателя)), СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагентаПолучателя), СокрЛП(ВыборкаЗаписейУСН.КонтрагентПолучатель)));
				КонецЕсли;
			Иначе
				Если ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Поступление наличных денежных средств от покупателя ""%1""'"),
					?(ЗначениеЗаполнено(СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента)),СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента),СокрЛП(ВыборкаЗаписейУСН.Контрагент)));
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее 
					ИЛИ ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты Тогда
					НоваяСтрокаУСН.Содержание = НСтр("ru = 'Поступление наличных денежных средств по прочим операциям'");
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Поступление безналичных денежных средств от покупателя ""%1""'"),
					?(ЗначениеЗаполнено(СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента)),СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента),СокрЛП(ВыборкаЗаписейУСН.Контрагент)));
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее
					ИЛИ ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты Тогда
					НоваяСтрокаУСН.Содержание = НСтр("ru = 'Поступление безналичных денежных средств по прочим операциям'");
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам Тогда
					НоваяСтрокаУСН.Содержание = НСтр("ru = 'Поступление от розничных продаж, оплаченной безналичным способом'");
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты Тогда
					НоваяСтрокаУСН.Содержание = НСтр("ru = 'Поступление безналичных денежных средств от курьерской компании или почты'");
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Возврат наличных денежных средств покупателю ""%1""'"),
					?(ЗначениеЗаполнено(СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента)),СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента),СокрЛП(ВыборкаЗаписейУСН.Контрагент)));
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Возврат безналичных денежных средств покупателю ""%1""'"),
					?(ЗначениеЗаполнено(СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента)),СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента),СокрЛП(ВыборкаЗаписейУСН.Контрагент)));
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда
					НоваяСтрокаУСН.Содержание = НСтр("ru = 'Возврат розничному покупателю безналичных денежных средств'");
				КонецЕсли;
					
				Если ЗначениеЗаполнено(ВыборкаЗаписейУСН.НазначениеПлатежа) Тогда
					НоваяСтрокаУСН.Содержание = НоваяСтрокаУСН.Содержание + ", " + Символы.ПС + СокрЛП(ВыборкаЗаписейУСН.НазначениеПлатежа);
				КонецЕсли;
			КонецЕсли;
			
			Если ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам И 
					ВыборкаЗаписейУСН.СуммаКомиссииДокумента > 0 Тогда
				НоваяСтрокаУСНКомиисия = ДокументФормирования.ЗаписиКУДиР.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаУСНКомиисия, НоваяСтрокаУСН);
				НоваяСтрокаУСНКомиисия.ДоходБаза = 0;
				НоваяСтрокаУСНКомиисия.ДоходВсего = 0;
				НоваяСтрокаУСНКомиисия.РасходБаза = ВыборкаЗаписейУСН.СуммаКомиссииДокумента;
				НоваяСтрокаУСНКомиисия.РасходВсего = ВыборкаЗаписейУСН.СуммаКомиссииДокумента;
				НоваяСтрокаУСНКомиисия.Содержание = НСтр("ru = 'Комиссия банка за операции эквайринга'");
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.ДополнительнаяИнформация = НСтр("ru='Сформировано записей: '") + Строка(ДокументФормирования.ЗаписиКУДиР.Количество());
		ДокументФормирования.Записать(РежимЗаписиДокумента.Проведение);
		Результат.ДокументФормирования = ДокументФормирования.Ссылка;
	КонецЕсли;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТРозничныеПродажи; УНИЧТОЖИТЬ ВТДоходы; УНИЧТОЖИТЬ ВТВозвратОплатыНаКарты; УНИЧТОЖИТЬ ВТОплатыПоКартам; УНИЧТОЖИТЬ ВТОплатаКартами; УНИЧТОЖИТЬ ВТЗапасы";
	Запрос.Выполнить();
	
КонецПроцедуры


// Процедура формирует записи по расходам на оплату труда
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодФормирования - Дата - дата окончания квартала, за который нужно провести формирования
//		Результат - Структура - структура результата
//
Процедура ВыполнитьФормированиеПоРасходамНаОплатуТруда(Организация, ПериодФормирования, Результат, МенеджерВТ)
	
	ДокументФормирования = Результат.ДокументФормирования;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходИзКассы.Ссылка КАК ПервичныйДокумент,
	|	РасходИзКассы.Контрагент КАК Контрагент,
	|	РасходИзКассы.Подотчетник КАК Подотчетник,
	|	РасходИзКассы.СуммаДокумента КАК ДоходБаза,
	|	РасходИзКассы.СуммаДокумента КАК ДоходВсего,
	|	РасходИзКассы.ВидОперации КАК ВидОперации,
	|	РасходИзКассы.Дата КАК ДатаПервичногоДокумента,
	|	РасходИзКассы.Номер КАК НомерПервичногоДокумента,
	|	РасходИзКассы.Дата КАК Период,
	|	"""" КАК НомерВходящегоДокумента,
	|	"""" КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	РасходИзКассы.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТРасходы
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ РасходИзКассы.ПометкаУдаления
	|	И РасходИзКассы.Проведен
	|	И РасходИзКассы.Организация = &Организация
	|	И РасходИзКассы.УчитыватьВНУ
	|	И РасходИзКассы.ВидОперации В(&МассивИспользуемыхВидовРасходовИзКассы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходСоСчета.Ссылка,
	|	РасходСоСчета.Контрагент,
	|	РасходСоСчета.Подотчетник,
	|	РасходСоСчета.СуммаДокумента,
	|	РасходСоСчета.СуммаДокумента,
	|	РасходСоСчета.ВидОперации,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РасходСоСчета.Дата
	|		ИНАЧЕ РасходСоСчета.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	РасходСоСчета.Номер,
	|	РасходСоСчета.Дата,
	|	РасходСоСчета.НомерВходящегоДокумента,
	|	РасходСоСчета.НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(РасходСоСчета.Дата, ДЕНЬ),
	|	РасходСоСчета.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.РасходСоСчета КАК РасходСоСчета
	|ГДЕ
	|	РасходСоСчета.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ РасходСоСчета.ПометкаУдаления
	|	И РасходСоСчета.Организация = &Организация
	|	И РасходСоСчета.УчитыватьВНУ
	|	И РасходСоСчета.ВидОперации В(&МассивИспользуемыхВидовРасходовСоСчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасходы.ПервичныйДокумент,
	|	ВТРасходы.Контрагент,
	|	ВТРасходы.Подотчетник,
	|	ВТРасходы.ДоходБаза * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК РасходБаза,
	|	ВТРасходы.ДоходВсего * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК РасходВсего,
	|	ВТРасходы.ВидОперации,
	|	ВТРасходы.ДатаПервичногоДокумента,
	|	ВТРасходы.НомерПервичногоДокумента,
	|	ВТРасходы.Период,
	|	&СодержаниеСтроки КАК Содержание,
	|	ВТРасходы.НомерВходящегоДокумента,
	|	ВТРасходы.НазначениеПлатежа,
	|	ВТРасходы.ДатаНачалоДня
	|ИЗ
	|	ВТРасходы КАК ВТРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
	|		ПО ВТРасходы.ДатаНачалоДня = КурсыВалютПоДням.Дата
	|			И ВТРасходы.ВалютаДенежныхСредств = КурсыВалютПоДням.Валюта";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(ПериодФормирования));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодФормирования));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СодержаниеСтроки", НСтр("ru='Расходы на оплату труда'"));
	
	МассивИспользуемыхВидовРасходовИзКассы = Новый Массив;
	МассивИспользуемыхВидовРасходовИзКассы.Добавить(Перечисления.ВидыОперацийРасходИзКассы.Зарплата);
	МассивИспользуемыхВидовРасходовИзКассы.Добавить(Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовРасходовИзКассы", МассивИспользуемыхВидовРасходовИзКассы);
	
	МассивИспользуемыхВидовРасходовСоСчета = Новый Массив;
	МассивИспользуемыхВидовРасходовСоСчета.Добавить(Перечисления.ВидыОперацийРасходСоСчета.Зарплата);
	МассивИспользуемыхВидовРасходовСоСчета.Добавить(Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовРасходовСоСчета", МассивИспользуемыхВидовРасходовСоСчета);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаУСН Из РезультатЗапроса Цикл
		СтрокаУСН.НомерПервичногоДокумента =  ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаУСН.НомерПервичногоДокумента, Истина, Истина);
	КонецЦикла;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТРасходы;";
	Запрос.Выполнить();
	
	Если ДокументФормирования = Неопределено И РезультатЗапроса.Количество() > 0 Тогда
		ДокументФормирования = Документы.ЗаписиУСН.СоздатьДокумент();
		ДокументФормирования.Дата = ПериодФормирования;
		ДокументФормирования.Организация = Организация;
		ДокументФормирования.ВидЗаписей = Перечисления.ВидыЗаписейФормированийКУДиР.РасходыНаОплатуТруда;
	КонецЕсли;
	
	Если ДокументФормирования <> Неопределено Тогда
		ДокументФормирования.ЗаписиКУДиР.Загрузить(РезультатЗапроса);
		Результат.ДополнительнаяИнформация = НСтр("ru='Сформировано записей: '") + Строка(ДокументФормирования.ЗаписиКУДиР.Количество());
		ДокументФормирования.Записать(РежимЗаписиДокумента.Проведение);
		Результат.ДокументФормирования = ДокументФормирования.Ссылка;
	КонецЕсли;
	
КонецПроцедуры


// Процедура формирует записи по прочим расходам
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодФормирования - Дата - дата окончания Организация, за который нужно провести формирования
//		Результат - Структура - структура результата
//
Процедура ВыполнитьФормированиеПоПрочимРасходам(Организация, ПериодФормирования, Результат, МенеджерВТ)
	
	ДокументФормирования = Результат.ДокументФормирования;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходИзКассы.Ссылка КАК ПервичныйДокумент,
	|	РасходИзКассы.Контрагент КАК Контрагент,
	|	РасходИзКассы.Контрагент.НаименованиеПолное КАК ЮридическоеНазваниеКонтрагента,
	|	РасходИзКассы.Подотчетник КАК Подотчетник,
	|	РасходИзКассы.СуммаДокумента КАК ДоходБаза,
	|	РасходИзКассы.СуммаДокумента КАК ДоходВсего,
	|	РасходИзКассы.ВидОперации КАК ВидОперации,
	|	РасходИзКассы.Дата КАК ДатаПервичногоДокумента,
	|	РасходИзКассы.Номер КАК НомерПервичногоДокумента,
	|	РасходИзКассы.Дата КАК Период,
	|	"""" КАК НомерВходящегоДокумента,
	|	"""" КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	NULL КАК СтавкаНДС,
	|	ЛОЖЬ КАК СуммаВключаетНДС,
	|	РасходИзКассы.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТРасходы
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	РасходИзКассы.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ РасходИзКассы.ПометкаУдаления
	|	И РасходИзКассы.Проведен
	|	И РасходИзКассы.Организация = &Организация
	|	И РасходИзКассы.УчитыватьВНУ
	|	И РасходИзКассы.ВидОперации В(&МассивИспользуемыхВидовРасходовИзКассы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходСоСчета.Ссылка,
	|	РасходСоСчета.Контрагент,
	|	РасходСоСчета.Контрагент.НаименованиеПолное,
	|	РасходСоСчета.Подотчетник,
	|	РасходСоСчета.СуммаДокумента,
	|	РасходСоСчета.СуммаДокумента,
	|	РасходСоСчета.ВидОперации,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РасходСоСчета.Дата
	|		ИНАЧЕ РасходСоСчета.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	РасходСоСчета.Номер,
	|	РасходСоСчета.Дата,
	|	РасходСоСчета.НомерВходящегоДокумента,
	|	РасходСоСчета.НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(РасходСоСчета.Дата, ДЕНЬ),
	|	NULL,
	|	ЛОЖЬ,
	|	РасходСоСчета.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.РасходСоСчета КАК РасходСоСчета
	|ГДЕ
	|	РасходСоСчета.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ РасходСоСчета.ПометкаУдаления
	|	И РасходСоСчета.Организация = &Организация
	|	И РасходСоСчета.УчитыватьВНУ
	|	И РасходСоСчета.ВидОперации В(&МассивИспользуемыхВидовРасходовСоСчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаСчет.Ссылка,
	|	ПоступлениеНаСчет.Контрагент,
	|	ПоступлениеНаСчет.Контрагент.НаименованиеПолное,
	|	ПоступлениеНаСчет.Подотчетник,
	|	-ПоступлениеНаСчет.СуммаДокумента,
	|	-ПоступлениеНаСчет.СуммаДокумента,
	|	ПоступлениеНаСчет.ВидОперации,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчет.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПоступлениеНаСчет.Дата
	|		ИНАЧЕ ПоступлениеНаСчет.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	ПоступлениеНаСчет.Номер,
	|	ПоступлениеНаСчет.Дата,
	|	ПоступлениеНаСчет.НомерВходящегоДокумента,
	|	ПоступлениеНаСчет.НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ПоступлениеНаСчет.Дата, ДЕНЬ),
	|	NULL,
	|	ЛОЖЬ,
	|	ПоступлениеНаСчет.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|ГДЕ
	|	ПоступлениеНаСчет.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ПоступлениеНаСчет.ПометкаУдаления
	|	И ПоступлениеНаСчет.Организация = &Организация
	|	И ПоступлениеНаСчет.УчитыватьВНУ
	|	И ПоступлениеНаСчет.ВидОперации В(&МассивИспользуемыхВидовПоступленийНаСчет)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетКомиссионера.Ссылка,
	|	ОтчетКомиссионера.Контрагент,
	|	ОтчетКомиссионера.Контрагент.НаименованиеПолное,
	|	NULL,
	|	ОтчетКомиссионера.СуммаВознаграждения,
	|	ОтчетКомиссионера.СуммаВознаграждения,
	|	NULL,
	|	ОтчетКомиссионера.Дата,
	|	ОтчетКомиссионера.Номер,
	|	ОтчетКомиссионера.Дата,
	|	"""",
	|	"""",
	|	НАЧАЛОПЕРИОДА(ОтчетКомиссионера.Дата, ДЕНЬ),
	|	ОтчетКомиссионера.СтавкаНДСВознаграждения,
	|	ОтчетКомиссионера.СуммаВключаетНДС,
	|	ОтчетКомиссионера.ВалютаДокумента
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	|ГДЕ
	|	ОтчетКомиссионера.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ОтчетКомиссионера.ПометкаУдаления
	|	И ОтчетКомиссионера.Проведен
	|	И ОтчетКомиссионера.Организация = &Организация
	|	И ОтчетКомиссионера.УдержатьКомиссионноеВознаграждение
	|	И ОтчетКомиссионера.СуммаВознаграждения > 0
	|	И ОтчетКомиссионера.УчитыватьВНУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасходы.ПервичныйДокумент КАК ПервичныйДокумент,
	|	ВТРасходы.Контрагент КАК Контрагент,
	|	ВТРасходы.ЮридическоеНазваниеКонтрагента КАК ЮридическоеНазваниеКонтрагента,
	|	ВТРасходы.Подотчетник КАК Подотчетник,
	|	ВТРасходы.ДоходБаза * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК РасходБаза,
	|	ВТРасходы.ДоходВсего * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК РасходВсего,
	|	ВТРасходы.ВидОперации КАК ВидОперации,
	|	ВТРасходы.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	|	ВТРасходы.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	ВТРасходы.Период КАК Период,
	|	ВТРасходы.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТРасходы.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ВТРасходы.СтавкаНДС КАК СтавкаНДС,
	|	ВТРасходы.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВТРасходы.ДатаНачалоДня КАК ДатаНачалоДня
	|ИЗ
	|	ВТРасходы КАК ВТРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
	|		ПО ВТРасходы.ДатаНачалоДня = КурсыВалютПоДням.Дата
	|			И ВТРасходы.ВалютаДенежныхСредств = КурсыВалютПоДням.Валюта";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(ПериодФормирования));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодФормирования));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	МассивИспользуемыхВидовРасходовИзКассы = Новый Массив;
	МассивИспользуемыхВидовРасходовИзКассы.Добавить(Перечисления.ВидыОперацийРасходИзКассы.Налоги);
	МассивИспользуемыхВидовРасходовИзКассы.Добавить(Перечисления.ВидыОперацийРасходИзКассы.Прочее);
	МассивИспользуемыхВидовРасходовИзКассы.Добавить(Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты);
	МассивИспользуемыхВидовРасходовИзКассы.Добавить(Перечисления.ВидыОперацийРасходИзКассы.НаРасходы);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовРасходовИзКассы", МассивИспользуемыхВидовРасходовИзКассы);
	
	МассивИспользуемыхВидовРасходовСоСчета = Новый Массив;
	МассивИспользуемыхВидовРасходовСоСчета.Добавить(Перечисления.ВидыОперацийРасходСоСчета.Налоги);
	МассивИспользуемыхВидовРасходовСоСчета.Добавить(Перечисления.ВидыОперацийРасходСоСчета.Прочее);
	МассивИспользуемыхВидовРасходовСоСчета.Добавить(Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты);
	МассивИспользуемыхВидовРасходовСоСчета.Добавить(Перечисления.ВидыОперацийРасходСоСчета.НаРасходы);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовРасходовСоСчета", МассивИспользуемыхВидовРасходовСоСчета);
	
	МассивИспользуемыхВидовПоступленийНаСчет = Новый Массив;
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовПоступленийНаСчет", МассивИспользуемыхВидовПоступленийНаСчет);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Колонки.Добавить("Содержание");
	
	Если ДокументФормирования = Неопределено И РезультатЗапроса.Количество() > 0 Тогда
		ДокументФормирования = Документы.ЗаписиУСН.СоздатьДокумент();
		ДокументФормирования.Дата = ПериодФормирования;
		ДокументФормирования.Организация = Организация;
		ДокументФормирования.ВидЗаписей = Перечисления.ВидыЗаписейФормированийКУДиР.РасходыПрочие;
	КонецЕсли;
	
	Если ДокументФормирования <> Неопределено Тогда
		
		ДокументФормирования.ЗаписиКУДиР.Очистить();
		// проставим номера и содержания операций
		Для Каждого Строка Из РезультатЗапроса Цикл
			
			НоваяСтрокаУСН = ДокументФормирования.ЗаписиКУДиР.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУСН, Строка);
			
			Если НЕ ПустаяСтрока(Строка.НомерВходящегоДокумента) Тогда
				НоваяСтрокаУСН.НомерПервичногоДокумента = Строка.НомерВходящегоДокумента;
			КонецЕсли;
			НоваяСтрокаУСН.НомерПервичногоДокумента =  ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НоваяСтрокаУСН.НомерПервичногоДокумента, Истина, Истина);
			
			Если ТипЗнч(НоваяСтрокаУСН.ПервичныйДокумент) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Получен отчет комиссионера ""%1""; вознаграждение комиссионера зачтено из выручки от реализации.'"),
					?(ЗначениеЗаполнено(СокрЛП(Строка.ЮридическоеНазваниеКонтрагента)),СокрЛП(Строка.ЮридическоеНазваниеКонтрагента),СокрЛП(Строка.Контрагент)));
					
					Если ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
						ЗначениеСтавки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Строка.СтавкаНДС);
						Если ЗначениеСтавки > 0 Тогда
							ПредыдущаяСтрока = НоваяСтрокаУСН;
							НоваяСтрокаУСН = ДокументФормирования.ЗаписиКУДиР.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаУСН, Строка);
							НоваяСтрокаУСН.РасходБаза = ?(Строка.СуммаВключаетНДС,
								НоваяСтрокаУСН.РасходБаза - (НоваяСтрокаУСН.РасходБаза) / ((ЗначениеСтавки + 100) / 100),
								НоваяСтрокаУСН.РасходБаза * ЗначениеСтавки / 100);
							НоваяСтрокаУСН.РасходВсего =  НоваяСтрокаУСН.РасходБаза;
							ПредыдущаяСтрока.РасходВсего = ПредыдущаяСтрока.РасходВсего - НоваяСтрокаУСН.РасходВсего;
							ПредыдущаяСтрока.РасходБаза = ПредыдущаяСтрока.РасходБаза - НоваяСтрокаУСН.РасходБаза;
							НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Получен отчет комиссионера ""%1""; вознаграждение комиссионера зачтено из выручки от реализации. (НДС)'"),
								?(ЗначениеЗаполнено(СокрЛП(Строка.ЮридическоеНазваниеКонтрагента)),СокрЛП(Строка.ЮридическоеНазваниеКонтрагента),СокрЛП(Строка.Контрагент)));
						КонецЕсли;
					КонецЕсли;
			ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги Тогда
				НоваяСтрокаУСН.Содержание = НСтр("ru = 'Расход наличных денежных средств на уплату налогов'");
			ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее 
				ИЛИ Строка.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
				ИЛИ Строка.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы Тогда
				НоваяСтрокаУСН.Содержание =  НСтр("ru = 'Расход наличных денежных средств по прочим операциям'");
			ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги Тогда
				НоваяСтрокаУСН.Содержание = НСтр("ru = 'Расход безналичных денежных средств на уплату налогов'");
			ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее
				ИЛИ Строка.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
				ИЛИ Строка.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы Тогда
				НоваяСтрокаУСН.Содержание = НСтр("ru = 'Расход безналичных денежных средств по прочим операциям'");
			ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги Тогда
				НоваяСтрокаУСН.Содержание = НСтр("ru = 'Возврат излишне уплаченных налогов'");
			КонецЕсли;
		КонецЦикла;
		
		Результат.ДополнительнаяИнформация = НСтр("ru='Сформировано записей: '") + Строка(ДокументФормирования.ЗаписиКУДиР.Количество());
		ДокументФормирования.Записать(РежимЗаписиДокумента.Проведение);
		Результат.ДокументФормирования = ДокументФормирования.Ссылка;
	КонецЕсли;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТРасходы;";
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура формирует записи расходам на ОС и НМА
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодФормирования - Дата - дата окончания квартала, за который нужно провести формирования
//		Результат - Структура - структура результата
//
Процедура ВыполнитьФормированиеПоРасходамНаОСиНМА(Организация, ПериодФормирования, Результат, МенеджерВТ)
	
	
	ДокументФормирования = Результат.ДокументФормирования;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СправочникВнеоборотныеАктивы.Ссылка КАК ВнеоборотныйАктив,
	|	СправочникВнеоборотныеАктивы.НачальнаяСтоимость КАК ПервоначальнаяСтоимость
	|ПОМЕСТИТЬ ВТВнеоборотныеАктивы
	|ИЗ
	|	Справочник.ВнеоборотныеАктивы КАК СправочникВнеоборотныеАктивы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуВА.ВнеоборотныеАктивы КАК ПринятиеКУчетуВАТаблица
	|		ПО (СправочникВнеоборотныеАктивы.УчитыватьВНУ)
	|			И (СправочникВнеоборотныеАктивы.ДатаОплаты <> &ПустаяДата)
	|			И СправочникВнеоборотныеАктивы.Ссылка = ПринятиеКУчетуВАТаблица.ВнеоборотныйАктив
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуВА КАК ПринятиеКУчетуВА
	|		ПО (ПринятиеКУчетуВА.Ссылка = ПринятиеКУчетуВАТаблица.Ссылка)
	|			И (ПринятиеКУчетуВА.Проведен)
	|			И (ПринятиеКУчетуВА.Организация = &Организация)
	|			И (ВЫБОР
	|				КОГДА СправочникВнеоборотныеАктивы.ДатаОплаты > ПринятиеКУчетуВА.Дата
	|					ТОГДА СправочникВнеоборотныеАктивы.ДатаОплаты
	|				ИНАЧЕ ПринятиеКУчетуВА.Дата
	|			КОНЕЦ МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникВнеоборотныеАктивы.Ссылка,
	|	СправочникВнеоборотныеАктивы.НачальнаяСтоимость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПериодыГрафиков.Период КАК Период,
	|	ВтПериодыГрафиков.ДоляПериода КАК Доля
	|ПОМЕСТИТЬ ВтПериодыГрафиков
	|ИЗ
	|	&ВтПериодыГрафиков КАК ВтПериодыГрафиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПериодыГрафиков.Период КАК ПериодПризнания,
	|	ВтОСКПостроениюГрафикаВычетов.ВнеоборотныйАктив КАК ОсновноеСредство,
	|	ВтОСКПостроениюГрафикаВычетов.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ВЫРАЗИТЬ(ВтОСКПостроениюГрафикаВычетов.ПервоначальнаяСтоимость * ВтПериодыГрафиков.Доля КАК ЧИСЛО(15, 2)) КАК Сумма
	|ПОМЕСТИТЬ ВтПризнаниеРасходовГрафик
	|ИЗ
	|	ВТВнеоборотныеАктивы КАК ВтОСКПостроениюГрафикаВычетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПериодыГрафиков КАК ВтПериодыГрафиков
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПризнаниеРасходовГрафик.ПериодПризнания КАК ПериодПризнания,
	|	ВтПризнаниеРасходовГрафик.ОсновноеСредство КАК ОсновноеСредство,
	|	ВтПризнаниеРасходовГрафик.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ВтПризнаниеРасходовГрафик.Сумма
	|ИЗ
	|	ВтПризнаниеРасходовГрафик КАК ВтПризнаниеРасходовГрафик
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредство,
	|	ПериодПризнания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТекстПризнанияРасходовПоОС + ПризнаваемыеРасходы.ОсновноеСредство.Наименование + "" (№"" + ПризнаваемыеРасходы.ОсновноеСредство.Код + "")"" КАК Содержание,
	|	ПризнаваемыеРасходы.РасходБаза,
	|	ПризнаваемыеРасходы.РасходБаза КАК РасходВсего
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтПризнаниеРасходовГрафик.ОсновноеСредство КАК ОсновноеСредство,
	|		ВтПризнаниеРасходовГрафик.Сумма КАК РасходБаза
	|	ИЗ
	|		ВтПризнаниеРасходовГрафик КАК ВтПризнаниеРасходовГрафик
	|	ГДЕ
	|		ВтПризнаниеРасходовГрафик.ПериодПризнания = &ДатаНачала
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГрафикПризнанияРасходовНаОСиНМА.ОсновноеСредство,
	|		ГрафикПризнанияРасходовНаОСиНМА.Сумма
	|	ИЗ
	|		Документ.ЗаписиУСН.ГрафикПоОС КАК ГрафикПризнанияРасходовНаОСиНМА
	|	ГДЕ
	|		ГрафикПризнанияРасходовНаОСиНМА.ПериодПризнания = &ДатаНачала
	|		И ГрафикПризнанияРасходовНаОСиНМА.Ссылка.Организация = &Организация
	|		И &Условие) КАК ПризнаваемыеРасходы");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоКвартала(ПериодФормирования));
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодФормирования);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВтПериодыГрафиков", ПолучитьТаблицуПериодовГрафиковРасходовНаОСПоПериодуФормирования(ПериодФормирования));
	Запрос.УстановитьПараметр("ТекстПризнанияРасходовПоОС", НСтр("ru='Признаны расходы по ОС: '"));
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	
	Если ДокументФормирования = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "ГрафикПризнанияРасходовНаОСиНМА.Ссылка <> &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ДокументФормирования.Ссылка);
	КонецЕсли;
	
	Результаты = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	// таблица графиков по ос
	ГрафикПоОС = Результаты[3].Выгрузить();
	ОбработатьОкругленияТаблицыГрафикПоОС(ГрафикПоОС);
	
	
	Таблица = Результаты[4].Выгрузить();
	Если ДокументФормирования = Неопределено И Таблица.Количество() > 0 Тогда
		ДокументФормирования = Документы.ЗаписиУСН.СоздатьДокумент();
		ДокументФормирования.Дата = ПериодФормирования;
		ДокументФормирования.Организация = Организация;
		ДокументФормирования.ВидЗаписей = Перечисления.ВидыЗаписейФормированийКУДиР.РасходыНаОСиНМА;
		Если ДокументФормирования.Ссылка.Пустая() Тогда
			ДокументФормирования.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументФормирования <> Неопределено Тогда
		ГрафикПоОС.Колонки.Удалить("ПервоначальнаяСтоимость");
		ДокументФормирования.ГрафикПоОС.Загрузить(ГрафикПоОС);
		ДокументФормирования.ЗаписиКУДиР.Загрузить(Таблица);
		Для Каждого Строка Из ДокументФормирования.ЗаписиКУДиР Цикл
			Строка.ПервичныйДокумент = ДокументФормирования.Ссылка;
			Строка.НомерПервичногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументФормирования.Номер, Истина, Истина);
			Строка.ДатаПервичногоДокумента = ДокументФормирования.Дата;
		КонецЦикла;
		
		Результат.ДополнительнаяИнформация = НСтр("ru='Сформировано записей: '") + Строка(ДокументФормирования.ЗаписиКУДиР.Количество());
		ДокументФормирования.Записать(РежимЗаписиДокумента.Проведение);
		Результат.ДокументФормирования = ДокументФормирования.Ссылка;
	КонецЕсли;
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТВнеоборотныеАктивы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтПериодыГрафиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтПризнаниеРасходовГрафик";
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура выполняет контроль таблицы ГрафикПоОС
// на погрешность округлений коэффициентов распределений
// Если таковые имеются то в последний месяц сумма расходов
// изменяется на величину этих погрешностей
//
// Параметры:
//		ГрафикПоОС - ТаблицаЗначений
//
Процедура ОбработатьОкругленияТаблицыГрафикПоОС(ГрафикПоОС)
	
	СуммаНакопленная = 0;
	ОС = Неопределено;
	СтоимостьОС = 0;
	ПредыдущаяСтрока = Неопределено;
	
	Для Каждого Стр Из ГрафикПоОС Цикл
		
		// обрабатываем первую строку
		Если ОС = Неопределено Тогда
			
			ОС = Стр.ОсновноеСредство;
			СтоимостьОС = Стр.ПервоначальнаяСтоимость;
			СуммаНакопленная = Стр.Сумма;
			ПредыдущаяСтрока = Стр;
			Продолжить;
			
		КонецЕсли;
		
		// Если ОС изменилось, значит перешли к обработки нового
		// необходимо зафиксировать результат
		Если Стр.ОсновноеСредство <> ПредыдущаяСтрока.ОсновноеСредство Тогда
			
			ПредыдущаяСтрока.Сумма = ПредыдущаяСтрока.Сумма + (СтоимостьОС-СуммаНакопленная);
			
			ОС = Стр.ОсновноеСредство;
			СтоимостьОС = Стр.ПервоначальнаяСтоимость;
			СуммаНакопленная = 0;
			
		КонецЕсли;
		
		СуммаНакопленная = СуммаНакопленная + Стр.Сумма;
		ПредыдущаяСтрока = Стр;
		
	КонецЦикла;
	
	Если ПредыдущаяСтрока <> Неопределено Тогда
		ПредыдущаяСтрока.Сумма = ПредыдущаяСтрока.Сумма + (СтоимостьОС-СуммаНакопленная);
	КонецЕсли;

	
КонецПроцедуры

// Функция формирует таблицу периодов графиков принятия расходов на ОС и НМА
// исходя из периода формирования
//
// Параметры:
//		ПериодФормирования - Дата - дата от которой необходимо посчитать периоды графиков
//
// Возвращает:
//		ТаблицаЗначений - таблица периодов графиков
//
Функция ПолучитьТаблицуПериодовГрафиковРасходовНаОСПоПериодуФормирования(ПериодФормирования)
	
	ТаблицаГрафиков = Новый ТаблицаЗначений;
	ТаблицаГрафиков.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаГрафиков.Колонки.Добавить("ДоляПериода", Новый ОписаниеТипов("Число"));
	
	Итератор = НачалоКвартала(ПериодФормирования);
	
	КонечныйПериод = КонецГода(ПериодФормирования);
	
	Пока Итератор <= КонечныйПериод Цикл
		Стр = ТаблицаГрафиков.Добавить();
		Стр.Период = Итератор;
		Итератор = ДобавитьМесяц(Итератор,3);
	КонецЦикла;
	
	КоличествоКварталов = ТаблицаГрафиков.Количество();
	
	Для Каждого Стр Из ТаблицаГрафиков Цикл
		
		Стр.ДоляПериода = 1/КоличествоКварталов;
		
	КонецЦикла;
	
	Возврат ТаблицаГрафиков;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// СЕКЦИЯ ПРОЦЕДУР РАСЧЕТ НАЛОГОВ И ВЗНОСОВ


// Процедура формирует записи по расчету налога
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция ВыполнитьРасчетЕдиногоНалога(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено, ФиксироватьСтатусСобытия=Истина) Экспорт
	
	СтруктураРасчетаЕдиногоНалога = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ПериодОтчетности,
		|ОбъектНалогообложения,
		|СтавкаНалогаЕН,
		|РасчетМинимальнойСуммыЕН,
		|СуммаАвансовыхПлатежейЗаГодЕН,
		|Авансы1квЕН,
		|Авансы2квЕН,
		|Авансы3квЕН,
		|СуммаДоходовЗаГодЕН,
		|СуммаЕН,
		|ВсегоКУплатеЕН,
		|СуммаРасходовЗаГодЕН,
		|СуммаСтраховыхВзносовЕН,
		|СуммаСтраховыхВзносовКУплатеЕН,
		|СтавкаНалогаЕНПовышенная,
		|СуммаДоходовЗаГодЕНПовышенная,
		|СуммаЕНПовышенная,
		|СуммаРасходовЗаГодЕНПовышенная,
		|Зачет100ПроцСтрахВзносовЕН,
		|СуммаАвансовыхПлатежейЗаГодЕН,
		|НалоговаяБазаЕН,
		|ДополнительнаяИнформация,
		|ВидВзаиморасчетовСБюджетом,
		|СуммаВзаиморасчетовСБюджетом,
		|ДокументВзаиморасчетовСБюджетом", 
		Организация,
		СобытиеКалендаря,
		ПериодРасчета,
		Неопределено,
		0,
		Ложь, 
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		Ложь,
		0,
		0,
		Новый Структура("Описание,Предупреждение,Ошибка", "", Ложь, Ложь),
		Справочники.ВидыНалогов.ЕдиныйНалогПриУСН,
		0,
		0);
	
	ДокументФормирования = 1;//Результат.ДокументФормирования;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот КАК ДоходовЗаГод,
	|	КнигаУчетаДоходовИРасходовОбороты.РасходБазаОборот КАК РасходовЗаГод
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &ОкончаниеПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизацийСрезПоследних.СтавкаНалога КАК СтавкаНалога,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.ПовышеннаяСтавкаНалога КАК ПовышеннаяСтавкаНалога
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&ОкончаниеПериода, Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних
	|;");
	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	
	Если НЕ УчетВалютныхОпераций ИЛИ НациональнаяВалюта = ВалютаУчета Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ВЫБРАТЬ
		|	СУММА(РасчетыПоНалогамОбороты.СуммаРасход) КАК СуммаУплачено,
		|	СУММА(РасчетыПоНалогамОбороты.СуммаПриход) КАК СуммаНачислено,
		|	НАЧАЛОПЕРИОДА(РасчетыПоНалогамОбороты.СрокУплаты, КВАРТАЛ) КАК КварталУплаты
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетов)
		|				И СрокУплаты В
		|					(ВЫБРАТЬ
		|						КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|					ИЗ
		|						Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|					ГДЕ
		|						КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН)
		|						И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода)) КАК РасчетыПоНалогамОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(РасчетыПоНалогамОбороты.СрокУплаты, КВАРТАЛ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			&НачалоПериода,
		|			&ОкончаниеПериода,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетовВзносыВПФРИФСС)) КАК РасчетыПоНалогамОбороты";
	Иначе
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТ, НачалоГода(ПериодРасчета), КонецДня(ПериодРасчета), НациональнаяВалюта, УчетВалютныхОпераций);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = запрос.Текст +
		"
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаУплачено,
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаНачислено,
		|	НАЧАЛОПЕРИОДА(РасчетыПоНалогам.СрокУплаты, КВАРТАЛ) КАК КварталУплаты
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ
		|	РасчетыПоНалогам.Организация = &Организация
		|	И РасчетыПоНалогам.ВидНалога В(&ВидыВзаиморасчетов)
		|	И РасчетыПоНалогам.СрокУплаты В
		|			(ВЫБРАТЬ
		|				КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|			ИЗ
		|				Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|			ГДЕ
		|				КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН)
		|				И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода)
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(РасчетыПоНалогам.СрокУплаты, КВАРТАЛ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаУплачено
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам  КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ 
		|	РасчетыПоНалогам.Период МЕЖДУ &НачалоПериода И 
		|	&ОкончаниеПериода
		|	И РасчетыПоНалогам.Организация = &Организация
		|		И РасчетыПоНалогам.ВидНалога В (&ВидыВзаиморасчетовВзносыВПФРИФСС)";
		Запрос.УстановитьПараметр("ВалютаУчета", ВалютаУчета);
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ПериодРасчета));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодРасчета));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ВидыВзаиморасчетов = Новый Массив;
	ВидыВзаиморасчетов.Добавить(Справочники.ВидыНалогов.АвансовыйПлатежПриУСН);
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетов", ВидыВзаиморасчетов);
	Запрос.УстановитьПараметр("СрокУплаты", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия"));
	
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300ТР);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФСССотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФССТравматизмСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФОМССотрудники);
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетовВзносыВПФРИФСС", ВидыВзаиморасчетовВзносыВПФРИФСС);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Параметры расчета налога
	ТаблицаПоПараметрам = РезультатЗапроса[1].Выгрузить();
	
	СтруктураРасчетаЕдиногоНалога.СтавкаНалогаЕН = ТаблицаПоПараметрам[0].СтавкаНалога;
	СтруктураРасчетаЕдиногоНалога.ОбъектНалогообложения = ТаблицаПоПараметрам[0].ОбъектНалогообложения;
	СтруктураРасчетаЕдиногоНалога.СтавкаНалогаЕНПовышенная = ТаблицаПоПараметрам[0].ПовышеннаяСтавкаНалога;
	
	ТаблицаПоНалогу = РезультатЗапроса[0].Выгрузить();
	
	Если ТаблицаПоНалогу.Количество() = 0 Тогда
		
		СтруктураРасчетаЕдиногоНалога.ДополнительнаяИнформация.Описание = НСтр("ru='Нет данных для расчета налога'");
		СтруктураРасчетаЕдиногоНалога.ДополнительнаяИнформация.Предупреждение = Истина;
		
		ОтразитьЗначенияПоказателейОтчетности(СтруктураРасчетаЕдиногоНалога);
		
		// запись состояние события календаря
		Если СобытиеКалендаря <> Неопределено Тогда
			
			ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчетаЕдиногоНалога);
			
			КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
				Организация,
				СобытиеКалендаря,
				Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
				СтруктураРасчетаЕдиногоНалога.СуммаЕН,
				СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН);
			
		КонецЕсли;
		
		Возврат СтруктураРасчетаЕдиногоНалога;
		
	Иначе
		
		СтрокаДанныхНалога = ТаблицаПоНалогу[0];
		СтруктураРасчетаЕдиногоНалога.СуммаДоходовЗаГодЕН = СтрокаДанныхНалога.ДоходовЗаГод;
		СтруктураРасчетаЕдиногоНалога.СуммаРасходовЗаГодЕН = СтрокаДанныхНалога.РасходовЗаГод;
		
	КонецЕсли;
	
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ПериодРасчета), Новый Структура("Организация", Организация));
	
	ВыборкаВзносыВПФРИФСС = РезультатЗапроса[3].Выбрать();
	Если ВыборкаВзносыВПФРИФСС.Следующий() Тогда
		Если СистемаНалогообложения.ПлательщикЕНВД И СистемаНалогообложения.ПлательщикУСН И Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВЕНВД Тогда
			СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовЕН = 0;
		Иначе
			СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовЕН = ВыборкаВзносыВПФРИФСС.СуммаУплачено;
		КонецЕсли;
	Иначе
		СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовЕН = 0;
	КонецЕсли;
	
	Если СтруктураРасчетаЕдиногоНалога.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
		СтруктураРасчетаЕдиногоНалога.СуммаРасходовЗаГодЕН = 0;
	Иначе
		СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовКУплатеЕН = 0;
	КонецЕсли;
	
	
	// убираем отрицательные
	СтруктураРасчетаЕдиногоНалога.НалоговаяБазаЕН = Макс(СтруктураРасчетаЕдиногоНалога.СуммаДоходовЗаГодЕН - СтруктураРасчетаЕдиногоНалога.СуммаРасходовЗаГодЕН,0);
	
	РассчитатьСуммуПлатежа(
		НачалоГода(ПериодРасчета), 
		КонецДня(ПериодРасчета), 
		Организация, 
		СтруктураРасчетаЕдиногоНалога,
		Ложь);
		
	
	СуммаМинимальногоНалога = СтруктураРасчетаЕдиногоНалога.СуммаДоходовЗаГодЕН*1/100;
	Если СуммаМинимальногоНалога > СтруктураРасчетаЕдиногоНалога.СуммаЕН Тогда
		
		// минимальный налог в 1% от доходов
		СтруктураРасчетаЕдиногоНалога.СуммаЕН = СуммаМинимальногоНалога;
		СтруктураРасчетаЕдиногоНалога.СтавкаНалогаЕН = 1;
		СтруктураРасчетаЕдиногоНалога.РасчетМинимальнойСуммыЕН = Истина;
		СтруктураРасчетаЕдиногоНалога.НалоговаяБазаЕН = СтруктураРасчетаЕдиногоНалога.СуммаДоходовЗаГодЕН;
		СтруктураРасчетаЕдиногоНалога.ДополнительнаяИнформация.Описание = НСтр("ru='Рассчитан минимальный налог по ставке 1%'");
		
	Иначе
		
		СтруктураРасчетаЕдиногоНалога.ДополнительнаяИнформация.Описание = НСтр("ru='Рассчитан налог за год'");
		
	КонецЕсли;
	
	ВыборкаПоУплате = РезультатЗапроса[2].Выбрать();
	УплаченоЗаПериод = 0;
	
	Пока ВыборкаПоУплате.Следующий() Цикл
		
		Если Месяц(ВыборкаПоУплате.КварталУплаты) <= 4 Тогда  // апрель, 1й квартал
			СтруктураРасчетаЕдиногоНалога.Авансы1квЕН = ВыборкаПоУплате.СуммаНачислено;
		ИначеЕсли Месяц(ВыборкаПоУплате.КварталУплаты) <= 7 Тогда // июль, 2й квартал
			СтруктураРасчетаЕдиногоНалога.Авансы2квЕН = ВыборкаПоУплате.СуммаНачислено;
		Иначе // все остальное пихаем на 3й квартал
			СтруктураРасчетаЕдиногоНалога.Авансы3квЕН = ВыборкаПоУплате.СуммаНачислено;
		КонецЕсли;
		
		УплаченоЗаПериод = УплаченоЗаПериод + ВыборкаПоУплате.СуммаУплачено;
		
	КонецЦикла;
	
	СтруктураРасчетаЕдиногоНалога.Авансы2квЕН = СтруктураРасчетаЕдиногоНалога.Авансы2квЕН + СтруктураРасчетаЕдиногоНалога.Авансы1квЕН;
	СтруктураРасчетаЕдиногоНалога.Авансы3квЕН = СтруктураРасчетаЕдиногоНалога.Авансы3квЕН + СтруктураРасчетаЕдиногоНалога.Авансы2квЕН;
	
	СтруктураРасчетаЕдиногоНалога.СуммаАвансовыхПлатежейЗаГодЕН = УплаченоЗаПериод;
	
	СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН = (СтруктураРасчетаЕдиногоНалога.СуммаЕН)
		+ СтруктураРасчетаЕдиногоНалога.СуммаЕНПовышенная;
	Если СтруктураРасчетаЕдиногоНалога.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ЮридическоеФизическоеЛицо,ИПИспользуетТрудНаемныхРаботников");
		Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не РеквизитыОрганизации.ИПИспользуетТрудНаемныхРаботников
			И ПериодРасчета >= '20120101' Тогда 
			
			СтруктураРасчетаЕдиногоНалога.Зачет100ПроцСтрахВзносовЕН = Истина;
			СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовКУплатеЕН =
					?(1*СтруктураРасчетаЕдиногоНалога.СуммаЕН < СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовЕН,
					(1*СтруктураРасчетаЕдиногоНалога.СуммаЕН), СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовЕН);
			СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН = СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН
				- СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовКУплатеЕН;
			
		Иначе
			СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовКУплатеЕН =
					?(0.5*СтруктураРасчетаЕдиногоНалога.СуммаЕН < СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовЕН,
					(0.5*СтруктураРасчетаЕдиногоНалога.СуммаЕН), СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовЕН);
			СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН = СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН
				- СтруктураРасчетаЕдиногоНалога.СуммаСтраховыхВзносовКУплатеЕН;
		КонецЕсли;
	КонецЕсли;
	
	
	
	НачатьТранзакцию();
	
	ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчетаЕдиногоНалога, Макс(0, СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН));
	
	СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН = Окр(Макс(0,СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН - СтруктураРасчетаЕдиногоНалога.СуммаАвансовыхПлатежейЗаГодЕН));
	
	ОтразитьЗначенияПоказателейОтчетности(СтруктураРасчетаЕдиногоНалога);
	СтруктураРасчетаЕдиногоНалога.СуммаВзаиморасчетовСБюджетом = СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН;
	
	// запись состояние события календаря
	Если СобытиеКалендаря <> Неопределено И ФиксироватьСтатусСобытия Тогда
		
		КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Организация,
			СобытиеКалендаря,
			Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
			СтруктураРасчетаЕдиногоНалога.СуммаЕН,
			СтруктураРасчетаЕдиногоНалога.ВсегоКУплатеЕН);
		// Регистрация документа оплаты
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат СтруктураРасчетаЕдиногоНалога;
	
КонецФункции

// Процедура формирует записи по расчету авансового платежа по усн
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция ВыполнитьРасчетАвансовогоПлатежа(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураРасчетаАвансовогоПлатежа = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ПериодОтчетности,
		|ОбъектНалогообложения,
		|СтавкаНалогаАП,
		|СуммаАвансовыхПлатежейАП,
		|СуммаДоходовАП,
		|СуммаАП,
		|ВсегоКУплатеАП,
		|СуммаРасходовАП,
		|СуммаСтраховыхВзносовАП,
		|СуммаСтраховыхВзносовКУплатеАП,
		|Зачет100ПроцСтрахВзносовАП,
		|НалоговаяБазаАП,
		|ДополнительнаяИнформация,
		|ВидВзаиморасчетовСБюджетом,
		|СуммаВзаиморасчетовСБюджетом,
		|ДокументВзаиморасчетовСБюджетом,
		|НалоговыйВычет,
		|СтавкаНалогаАППовышенная,
		|СуммаДоходовАППовышенная,
		|СуммаАППовышенная,
		|СуммаРасходовАППовышенная", 
		Организация,
		СобытиеКалендаря,
		ПериодРасчета,
		Неопределено,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		Ложь,
		0,
		Новый Структура("Описание,Предупреждение,Ошибка", "", Ложь, Ложь),
		Справочники.ВидыНалогов.АвансовыйПлатежПриУСН,
		0,
		0,
		0,
		0,
		0,
		0,
		0);
	
	ДокументФормирования = 1;//Результат.ДокументФормирования;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот КАК ДоходовЗаГод,
	|	КнигаУчетаДоходовИРасходовОбороты.РасходБазаОборот КАК РасходовЗаГод
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &ОкончаниеПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизацийСрезПоследних.СтавкаНалога,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.ОбъектНалогообложения,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.ПовышеннаяСтавкаНалога
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&ОкончаниеПериода, Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних
	|;");
	
	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	Если НЕ УчетВалютныхОпераций ИЛИ НациональнаяВалюта = ВалютаУчета Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ВЫБРАТЬ
		|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетов)
		|				И СрокУплаты В
		|					(ВЫБРАТЬ
		|						КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|					ИЗ
		|						Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|					ГДЕ
		|						КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН)
		|						И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода)) КАК РасчетыПоНалогамОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			&НачалоПериода,
		|			&ОкончаниеПериода,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетовВзносыВПФРИФСС)
		|				И СрокУплаты <> &ПустаяДата) КАК РасчетыПоНалогамОбороты
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.СуммаПриход), 0) КАК СуммаПриход
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			&НачалоПериода,
		|			,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетов)
		|				И СрокУплаты В
		|					(ВЫБРАТЬ
		|						КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|					ИЗ
		|						Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|					ГДЕ
		|						КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН)
		|						И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода
		|						И КалендарьПодготовкиОтчетности.ДатаОкончанияДокументов <> &ДатаОкончанияДокументов)) КАК РасчетыПоНалогам;";
	Иначе
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТ, НачалоГода(ПериодРасчета), КонецДня(ПериодРасчета), НациональнаяВалюта, УчетВалютныхОпераций);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = запрос.Текст +
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)), 0) КАК СуммаУплачено
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ
		|	РасчетыПоНалогам.Организация = &Организация
		|	И РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыПоНалогам.ВидНалога В(&ВидыВзаиморасчетов)
		|	И РасчетыПоНалогам.СрокУплаты В
		|			(ВЫБРАТЬ
		|				КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|			ИЗ
		|				Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|			ГДЕ
		|				КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН)
		|				И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)), 0) КАК СуммаУплачено
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ
		|	РасчетыПоНалогам.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыПоНалогам.Организация = &Организация
		|	И РасчетыПоНалогам.ВидНалога В(&ВидыВзаиморасчетовВзносыВПФРИФСС)
		|	И РасчетыПоНалогам.СрокУплаты <> &ПустаяДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)), 0) КАК СуммаПриход
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ
		|	РасчетыПоНалогам.Период >= &НачалоПериода
		|	И РасчетыПоНалогам.Организация = &Организация
		|	И РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И РасчетыПоНалогам.ВидНалога В(&ВидыВзаиморасчетов)
		|	И РасчетыПоНалогам.СрокУплаты В
		|			(ВЫБРАТЬ
		|				КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|			ИЗ
		|				Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|			ГДЕ
		|				КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН)
		|				И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода
		|				И КалендарьПодготовкиОтчетности.ДатаОкончанияДокументов <> &ДатаОкончанияДокументов)";
		
		Запрос.УстановитьПараметр("ВалютаУчета", ВалютаУчета);
	КонецЕсли;
	
	ВидыВзаиморасчетов = Новый Массив;
	ВидыВзаиморасчетов.Добавить(Справочники.ВидыНалогов.АвансовыйПлатежПриУСН);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ПериодРасчета));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодРасчета));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыВзаиморасчетов", ВидыВзаиморасчетов);
	Запрос.УстановитьПараметр("СрокУплаты", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия"));
	Запрос.УстановитьПараметр("ДатаОкончанияДокументов", ПериодРасчета);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300ТР);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФСССотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФССТравматизмСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФОМССотрудники);
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетовВзносыВПФРИФСС", ВидыВзаиморасчетовВзносыВПФРИФСС);
	
	НалоговыйВычет = 0;
	Если ПериодРасчета > Дата('20200401')
		И ПериодРасчета < Дата('20210101') 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ПоддержкаИП") Тогда
		НалоговыйВычет = РассчитатьНалоговыйВычетЗа2Квартал2020Года(Организация, ПериодРасчета, СобытиеКалендаря);
	КонецЕсли;
	СтруктураРасчетаАвансовогоПлатежа.НалоговыйВычет = НалоговыйВычет;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Параметры расчета налога
	ТаблицаПоПараметрам = РезультатЗапроса[1].Выгрузить();
	
	Если ТаблицаПоПараметрам.Количество() = 0 Тогда
		Возврат СтруктураРасчетаАвансовогоПлатежа;
	КонецЕсли;
	СтруктураРасчетаАвансовогоПлатежа.СтавкаНалогаАП           = ТаблицаПоПараметрам[0].СтавкаНалога;
	СтруктураРасчетаАвансовогоПлатежа.СтавкаНалогаАППовышенная = ТаблицаПоПараметрам[0].ПовышеннаяСтавкаНалога;
	СтруктураРасчетаАвансовогоПлатежа.ОбъектНалогообложения    = ТаблицаПоПараметрам[0].ОбъектНалогообложения;
	
	ТаблицаПоНалогу = РезультатЗапроса[0].Выгрузить();
	
	Если ТаблицаПоНалогу.Количество() = 0 Тогда
		
		СтруктураРасчетаАвансовогоПлатежа.ДополнительнаяИнформация.Описание = НСтр("ru='Нет данных для расчета налога'");
		СтруктураРасчетаАвансовогоПлатежа.ДополнительнаяИнформация.Предупреждение = Истина;
		
		ОтразитьЗначенияПоказателейОтчетности(СтруктураРасчетаАвансовогоПлатежа);
		
		// запись состояние события календаря
		Если СобытиеКалендаря <> Неопределено Тогда
			
			ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчетаАвансовогоПлатежа);
			
			КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
				Организация,
				СобытиеКалендаря,
				Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
				СтруктураРасчетаАвансовогоПлатежа.СуммаАП,
				СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП);
			
		КонецЕсли;
		
		Возврат СтруктураРасчетаАвансовогоПлатежа;
		
	Иначе
		
		СтрокаДанныхНалога = ТаблицаПоНалогу[0];
		СтруктураРасчетаАвансовогоПлатежа.СуммаДоходовАП = СтрокаДанныхНалога.ДоходовЗаГод;
		СтруктураРасчетаАвансовогоПлатежа.СуммаРасходовАП = СтрокаДанныхНалога.РасходовЗаГод;
		
	КонецЕсли;
	
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ПериодРасчета), Новый Структура("Организация", Организация));
	
	ВыборкаВзносыВПФРИФСС = РезультатЗапроса[3].Выбрать();
	Если ВыборкаВзносыВПФРИФСС.Следующий() Тогда
		Если СистемаНалогообложения.ПлательщикЕНВД И СистемаНалогообложения.ПлательщикУСН И Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВЕНВД Тогда
			СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовАП = 0;
		Иначе
			СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовАП = ВыборкаВзносыВПФРИФСС.СуммаУплачено;
		КонецЕсли;
	Иначе
		СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовАП = 0;
	КонецЕсли;

	Если СтруктураРасчетаАвансовогоПлатежа.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
		СтруктураРасчетаАвансовогоПлатежа.СуммаРасходовАП = 0;
	Иначе
		СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовКУплатеАП = 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[4].Выбрать();
	
	НачисленоСНачалаГода = 0;
	Пока Выборка.Следующий() Цикл
		НачисленоСНачалаГода = Выборка.СуммаПриход;
	КонецЦикла;
	
	// убираем отрицательные
	СтруктураРасчетаАвансовогоПлатежа.НалоговаяБазаАП = Макс(СтруктураРасчетаАвансовогоПлатежа.СуммаДоходовАП 
		- СтруктураРасчетаАвансовогоПлатежа.СуммаРасходовАП, 0);
		
	РассчитатьСуммуПлатежа(
		НачалоГода(ПериодРасчета), 
		КонецДня(ПериодРасчета), 
		Организация, 
		СтруктураРасчетаАвансовогоПлатежа);
	
	СтруктураРасчетаАвансовогоПлатежа.ДополнительнаяИнформация.Описание = НСтр("ru='Рассчитан авансовый платеж'");
		
	ВыборкаПоУплате = РезультатЗапроса[2].Выбрать();
	Если ВыборкаПоУплате.Следующий() Тогда
		СтруктураРасчетаАвансовогоПлатежа.СуммаАвансовыхПлатежейАП = ВыборкаПоУплате.СуммаУплачено;
	Иначе
		СтруктураРасчетаАвансовогоПлатежа.СуммаАвансовыхПлатежейАП = 0;
	КонецЕсли;
	
	СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП = СтруктураРасчетаАвансовогоПлатежа.СуммаАП 
		+ СтруктураРасчетаАвансовогоПлатежа.СуммаАППовышенная;
	Если СтруктураРасчетаАвансовогоПлатежа.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
		
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
			"ЮридическоеФизическоеЛицо, ИПИспользуетТрудНаемныхРаботников");
		
		// Проверяем, производились ли выплаты сотрудникам и расчетный период больше 01.01.12
		// то можно принимать к вычету все 100%
		Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не РеквизитыОрганизации.ИПИспользуетТрудНаемныхРаботников
			И ПериодРасчета >= '20120101' Тогда
			
			СтруктураРасчетаАвансовогоПлатежа.Зачет100ПроцСтрахВзносовАП = Истина;
			СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовКУплатеАП =
					?(1*СтруктураРасчетаАвансовогоПлатежа.СуммаАП < СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовАП,
					(1*СтруктураРасчетаАвансовогоПлатежа.СуммаАП), СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовАП);
			СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП = СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП
				- СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовКУплатеАП;
			
		Иначе
			СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовКУплатеАП =
					?(0.5*СтруктураРасчетаАвансовогоПлатежа.СуммаАП < СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовАП,
					(0.5*СтруктураРасчетаАвансовогоПлатежа.СуммаАП), СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовАП);
			СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП = СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП
				- СтруктураРасчетаАвансовогоПлатежа.СуммаСтраховыхВзносовКУплатеАП;
		КонецЕсли;
	КонецЕсли;
	
	
	НачатьТранзакцию();
	
	// Регистрация документа начисления
	ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчетаАвансовогоПлатежа, ?(СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП < НачисленоСНачалаГода + НалоговыйВычет, 0, СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП - НачисленоСНачалаГода - НалоговыйВычет));
	
	СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП = Окр(Макс(0,СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП - СтруктураРасчетаАвансовогоПлатежа.СуммаАвансовыхПлатежейАП - НалоговыйВычет));
	
	ОтразитьЗначенияПоказателейОтчетности(СтруктураРасчетаАвансовогоПлатежа);
	СтруктураРасчетаАвансовогоПлатежа.СуммаВзаиморасчетовСБюджетом = СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП;
	
	Если СобытиеКалендаря <> Неопределено Тогда
		
	// запись состояние события календаря
		КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Организация,
			СобытиеКалендаря,
			Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
			СтруктураРасчетаАвансовогоПлатежа.СуммаАП,
			СтруктураРасчетаАвансовогоПлатежа.ВсегоКУплатеАП);
		
	КонецЕсли;	
	
	ЗафиксироватьТранзакцию();
	
	Возврат СтруктураРасчетаАвансовогоПлатежа;
	
КонецФункции

// Процедура рассчитывает сумму авансового платежа УСН
Процедура РассчитатьСуммуПлатежа(НачалоПериода, ОкончаниеПериода, Организация, СтруктураДанных, ЭтоАвансовыйПлатеж = Истина)
		
	Если НачалоПериода < Дата('20210101') Тогда
		Если ЭтоАвансовыйПлатеж Тогда
			СтруктураДанных.СуммаАП = СтруктураДанных.НалоговаяБазаАП * СтруктураДанных.СтавкаНалогаАП / 100;
		Иначе
			СтруктураДанных.СуммаЕН = СтруктураДанных.НалоговаяБазаЕН * СтруктураДанных.СтавкаНалогаЕН / 100;
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Сумма                   = 0;
	СуммаДоходов            = 0;
	СуммаРасходов           = 0;
	СуммаПовышенная         = 0;
	СуммаДоходовПовышенная  = 0;
	СуммаРасходовПовышенная = 0;
	НалоговаяБазаЗаГод        = 0;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА &ОбъектНалогообложения = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовНалогообложения.Доходы)
	|			ТОГДА 0
	|		ИНАЧЕ КнигаУчетаДоходовИРасходовОбороты.РасходБазаОборот
	|	КОНЕЦ КАК СуммаРасходов,
	|	КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот КАК СуммаДоходов,
	|	МАКСИМУМ(&ОкончаниеПериода) КАК Период
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &ОкончаниеПериода, Период, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &ОбъектНалогообложения = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовНалогообложения.Доходы)
	|			ТОГДА 0
	|		ИНАЧЕ КнигаУчетаДоходовИРасходовОбороты.РасходБазаОборот
	|	КОНЕЦ,
	|	КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот");
	
	Запрос.УстановитьПараметр("НачалоПериода"   	 , НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода"	 , ОкончаниеПериода);
	Запрос.УстановитьПараметр("Организация"          , Организация);
	Запрос.УстановитьПараметр("ОбъектНалогообложения", СтруктураДанных.ОбъектНалогообложения);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НалоговаяБазаЗаКвартал = Макс(Выборка.СуммаДоходов - Выборка.СуммаРасходов, 0); 
		НалоговаяБазаЗаГод     = НалоговаяБазаЗаГод + НалоговаяБазаЗаКвартал; 
		Численность            = Сотрудники.СреднесписочнаяЧисленностьРаботающих(
			Организация.Ссылка, 
			НачалоКвартала(Выборка.Период), 
			КонецКвартала(Выборка.Период));
		
		Если (НалоговаяБазаЗаГод >= 150000000 И НалоговаяБазаЗаГод < 200000000)
			Или (Численность > 100 И Численность < 130) Тогда
			
			Если ЭтоАвансовыйПлатеж Тогда
				СуммаПовышенная         = СуммаПовышенная + НалоговаяБазаЗаКвартал * СтруктураДанных.СтавкаНалогаАППовышенная / 100;
			Иначе
				СуммаПовышенная         = СуммаПовышенная + НалоговаяБазаЗаКвартал * СтруктураДанных.СтавкаНалогаЕНПовышенная / 100;
			КонецЕсли;
			СуммаДоходовПовышенная  = СуммаДоходовПовышенная  + Выборка.СуммаДоходов;
			СуммаРасходовПовышенная = СуммаРасходовПовышенная + Выборка.СуммаРасходов;

		Иначе
			
			Если ЭтоАвансовыйПлатеж Тогда
				Сумма         = Сумма + НалоговаяБазаЗаКвартал * СтруктураДанных.СтавкаНалогаАП / 100;
			Иначе
				Сумма         = Сумма + НалоговаяБазаЗаКвартал * СтруктураДанных.СтавкаНалогаЕН / 100;
			КонецЕсли;
			СуммаДоходов  = СуммаДоходовПовышенная  + Выборка.СуммаДоходов;
			СуммаРасходов = СуммаРасходовПовышенная + Выборка.СуммаРасходов;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЭтоАвансовыйПлатеж Тогда
		СтруктураДанных.СуммаАП                   = Сумма;
		СтруктураДанных.СуммаДоходовАП            = СуммаДоходов;
		СтруктураДанных.СуммаРасходовАП           = СуммаРасходов;
		СтруктураДанных.СуммаАППовышенная         = СуммаПовышенная;
		СтруктураДанных.СуммаДоходовАППовышенная  = СуммаДоходовПовышенная;
		СтруктураДанных.СуммаРасходовАППовышенная = СуммаРасходовПовышенная;
	Иначе
		СтруктураДанных.СуммаЕН                   = Сумма;
		СтруктураДанных.СуммаДоходовЗаГодЕН            = СуммаДоходов;
		СтруктураДанных.СуммаРасходовЗаГодЕН           = СуммаРасходов;
		СтруктураДанных.СуммаЕНПовышенная         = СуммаПовышенная;
		СтруктураДанных.СуммаДоходовЗаГодЕНПовышенная  = СуммаДоходовПовышенная;
		СтруктураДанных.СуммаРасходовЗаГодЕНПовышенная = СуммаРасходовПовышенная;
	КонецЕсли;
КонецПроцедуры

Функция РассчитатьНалоговыйВычетЗа2Квартал2020Года(Организация, ПериодРасчета, СобытиеКалендаря)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот КАК ДоходовЗаГод,
	|	КнигаУчетаДоходовИРасходовОбороты.РасходБазаОборот КАК РасходовЗаГод
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &ОкончаниеВторогоКвартала, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизацийСрезПоследних.СтавкаНалога,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.ОбъектНалогообложения
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&ОкончаниеВторогоКвартала, Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних
	|;");
	
	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	Если НЕ УчетВалютныхОпераций ИЛИ НациональнаяВалюта = ВалютаУчета Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ВЫБРАТЬ
		|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетов)
		|				И СрокУплаты В
		|					(ВЫБРАТЬ
		|						КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|					ИЗ
		|						Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|					ГДЕ
		|						КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН)
		|						И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода)) КАК РасчетыПоНалогамОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			&НачалоПериода,
		|			&ОкончаниеВторогоКвартала,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетовВзносыВПФРИФСС)
		|				И СрокУплаты <> &ПустаяДата) КАК РасчетыПоНалогамОбороты
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.СуммаПриход), 0) КАК СуммаПриход
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			&НачалоПериода,
		|			,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетов)
		|				И СрокУплаты В
		|					(ВЫБРАТЬ
		|						КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|					ИЗ
		|						Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|					ГДЕ
		|						КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН)
		|						И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода
		|						И КалендарьПодготовкиОтчетности.ДатаОкончанияДокументов <> &ДатаОкончанияДокументов)) КАК РасчетыПоНалогам;";
	Иначе
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТ, НачалоГода(ПериодРасчета), КонецДня(ПериодРасчета), НациональнаяВалюта, УчетВалютныхОпераций);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = запрос.Текст +
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)), 0) КАК СуммаУплачено
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ
		|	РасчетыПоНалогам.Организация = &Организация
		|	И РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыПоНалогам.ВидНалога В(&ВидыВзаиморасчетов)
		|	И РасчетыПоНалогам.СрокУплаты В
		|			(ВЫБРАТЬ
		|				КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|			ИЗ
		|				Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|			ГДЕ
		|				КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН)
		|				И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)), 0) КАК СуммаУплачено
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ
		|	РасчетыПоНалогам.Период МЕЖДУ &НачалоПериода И &ОкончаниеВторогоКвартала
		|	И РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыПоНалогам.Организация = &Организация
		|	И РасчетыПоНалогам.ВидНалога В(&ВидыВзаиморасчетовВзносыВПФРИФСС)
		|	И РасчетыПоНалогам.СрокУплаты <> &ПустаяДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)), 0) КАК СуммаПриход
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ
		|	РасчетыПоНалогам.Период >= &НачалоПериода
		|	И РасчетыПоНалогам.Организация = &Организация
		|	И РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И РасчетыПоНалогам.ВидНалога В(&ВидыВзаиморасчетов)
		|	И РасчетыПоНалогам.СрокУплаты В
		|			(ВЫБРАТЬ
		|				КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|			ИЗ
		|				Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|			ГДЕ
		|				КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН)
		|				И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода
		|				И КалендарьПодготовкиОтчетности.ДатаОкончанияДокументов <> &ОкончаниеВторогоКвартала);";
		
		Запрос.УстановитьПараметр("ВалютаУчета", ВалютаУчета);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ЗаписиКалендаряПодготовкиОтчетности.СуммаНалога, 0) КАК СуммаНалога
	|ИЗ
	|	Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|		ПО (КалендарьПодготовкиОтчетности.Ссылка = ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря)
	|			И (ЗаписиКалендаряПодготовкиОтчетности.Организация = &Организация)
	|			И (КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН))
	|			И (КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода)
	|			И (КалендарьПодготовкиОтчетности.ДатаОкончанияДокументов <= &ОкончаниеПервогоКвартала)";
	ВидыВзаиморасчетов = Новый Массив;
	ВидыВзаиморасчетов.Добавить(Справочники.ВидыНалогов.АвансовыйПлатежПриУСН);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ПериодРасчета));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыВзаиморасчетов", ВидыВзаиморасчетов);
	Запрос.УстановитьПараметр("СрокУплаты", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия"));
	Запрос.УстановитьПараметр("ДатаОкончанияДокументов", ПериодРасчета);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	Запрос.УстановитьПараметр("ОкончаниеВторогоКвартала", Дата('20200630235959'));
	Запрос.УстановитьПараметр("ОкончаниеПервогоКвартала", Дата('20200331235959'));
	
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300тр);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФСССотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФССТравматизмСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФОМССотрудники);
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетовВзносыВПФРИФСС", ВидыВзаиморасчетовВзносыВПФРИФСС);
	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Параметры расчета налога
	ТаблицаПоПараметрам = РезультатЗапроса[1].Выгрузить();
	
	СтавкаНалогаАП = ТаблицаПоПараметрам[0].СтавкаНалога;
	ОбъектНалогообложения = ТаблицаПоПараметрам[0].ОбъектНалогообложения;
	
	ТаблицаПоНалогу = РезультатЗапроса[0].Выгрузить();
	
	Если ТаблицаПоНалогу.Количество() = 0 Тогда
		
		Возврат 0;
		
	Иначе
		
		СтрокаДанныхНалога = ТаблицаПоНалогу[0];
		СуммаДоходовАП = СтрокаДанныхНалога.ДоходовЗаГод;
		СуммаРасходовАП = СтрокаДанныхНалога.РасходовЗаГод;
		
	КонецЕсли;
	
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ПериодРасчета), Новый Структура("Организация", Организация));
	
	ВыборкаВзносыВПФРИФСС = РезультатЗапроса[3].Выбрать();
	Если ВыборкаВзносыВПФРИФСС.Следующий() Тогда
		Если СистемаНалогообложения.ПлательщикЕНВД И СистемаНалогообложения.ПлательщикУСН И Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВЕНВД Тогда
			СуммаСтраховыхВзносовАП = 0;
		Иначе
			СуммаСтраховыхВзносовАП = ВыборкаВзносыВПФРИФСС.СуммаУплачено;
		КонецЕсли;
	Иначе
		СуммаСтраховыхВзносовАП = 0;
	КонецЕсли;

	
	Если ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
		СуммаРасходовАП = 0;
	Иначе
		СуммаСтраховыхВзносовКУплатеАП = 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[4].Выбрать();
	
	НачисленоСНачалаГода = 0;
	Пока Выборка.Следующий() Цикл
		НачисленоСНачалаГода = Выборка.СуммаПриход;
	КонецЦикла;
	
	// убираем отрицательные
	НалоговаяБазаАП =Макс(СуммаДоходовАП - СуммаРасходовАП, 0);
	
	СуммаАвансовогоПлатежа = НалоговаяБазаАП*СтавкаНалогаАП/100;
	
	СуммаАП = СуммаАвансовогоПлатежа;
	
	
	ВыборкаПоУплате = РезультатЗапроса[2].Выбрать();
	Если ВыборкаПоУплате.Следующий() Тогда
		СуммаАвансовыхПлатежейАП = ВыборкаПоУплате.СуммаУплачено;
	Иначе
		СуммаАвансовыхПлатежейАП = 0;
	КонецЕсли;
	
	ВсегоКУплатеАП = СуммаАП;
	Если ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
		
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ЮридическоеФизическоеЛицо,ИПИспользуетТрудНаемныхРаботников");
		
		// Проверяем, производились ли выплаты сотрудникмм и расчтный период больше 01.01.12
		// то можно принимать к вычету все 100%
		Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не РеквизитыОрганизации.ИПИспользуетТрудНаемныхРаботников
			И ПериодРасчета >= '20120101' Тогда
			
			Зачет100ПроцСтрахВзносовАП = Истина;
			СуммаСтраховыхВзносовКУплатеАП =
					?(1*СуммаАП < СуммаСтраховыхВзносовАП,
					(1*СуммаАП), СуммаСтраховыхВзносовАП);
			ВсегоКУплатеАП = ВсегоКУплатеАП
				- СуммаСтраховыхВзносовКУплатеАП;
			
		Иначе
			СуммаСтраховыхВзносовКУплатеАП =
					?(0.5*СуммаАП < СуммаСтраховыхВзносовАП,
					(0.5*СуммаАП), СуммаСтраховыхВзносовАП);
			ВсегоКУплатеАП = ВсегоКУплатеАП
				- СуммаСтраховыхВзносовКУплатеАП;
		КонецЕсли;
	КонецЕсли;
	
	ВыборкаПоУплатеЗа1Квартал = РезультатЗапроса[5].Выбрать();
	Если ВыборкаПоУплатеЗа1Квартал.Следующий() Тогда
		ВсегоКУплатеЗаПервыйКвартал = ВыборкаПоУплатеЗа1Квартал.СуммаНалога;
	Иначе
		ВсегоКУплатеЗаПервыйКвартал = 0;
	КонецЕсли;
	
	Возврат Окр(Макс(0,ВсегоКУплатеАП - ВсегоКУплатеЗаПервыйКвартал ));
КонецФункции

// Процедура формирует декларацию по УСН
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьДекларациюПоУСН(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	КонтрольРасчетаЕдиногоНалога(Организация, ПериодРасчета);
	
	СтруктураДекларацииПоУСН = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ДокументОтчетности,
		|ДатаДокументаОбработкиСобытия,
		|ПараметрыФормыДокумента,
		|НалоговыйПериодПропущен", 
		Организация,
		СобытиеКалендаря,
		Неопределено,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря, "ДатаДокументаОбработкиСобытия"),
		Ложь);
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование декларации по УСН невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СтруктураДекларацииПоУСН.ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СтруктураДекларацииПоУСН.ДокументОтчетности <> Неопределено Тогда
		СтруктураДекларацииПоУСН.ПараметрыФормыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураДекларацииПоУСН.ДокументОтчетности,
			"ДатаНачала,ДатаОкончания,Периодичность,ВыбраннаяФорма");
			Если (ПериодРасчета >= '20140101' И СтруктураДекларацииПоУСН.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2009Кв1")
				ИЛИ (ПериодРасчета >= '20150101' И СтруктураДекларацииПоУСН.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2014Кв1") Тогда
				// Форма документа отчетности не соответствует периоду формирования
				ДокументОбъект = СтруктураДекларацииПоУСН.ДокументОтчетности.ПолучитьОбъект();
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
				ДокументОбъект.Записать();
				
				СтруктураДекларацииПоУСН.ДокументОтчетности = Неопределено;
				СтруктураДекларацииПоУСН.ПараметрыФормыДокумента = Неопределено;
			КонецЕсли;
	КонецЕсли;
	
	СтруктураДекларацииПоУСН.НалоговыйПериодПропущен = НалоговыйПериодПропущен(Организация,
		ПериодРасчета, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации"));

	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		СобытиеКалендаря,
		?(СтруктураДекларацииПоУСН.НалоговыйПериодПропущен,Перечисления.СостоянияСобытийКалендаря.Завершено,Перечисления.СостоянияСобытийКалендаря.Отправить),
		"");
	
	Возврат СтруктураДекларацииПоУСН;
	
КонецФункции

// Процедура формирует отчет 4-ФСС
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция Сформировать4ФСС(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	
	СтруктураФорма4ФСС = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ДокументОтчетности,
		|ДатаДокументаОбработкиСобытия,
		|ПараметрыФормыДокумента",
		Организация,
		СобытиеКалендаря,
		Неопределено,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря, "ДатаДокументаОбработкиСобытия"));
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование декларации по УСН невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СтруктураФорма4ФСС.ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СтруктураФорма4ФСС.ДокументОтчетности <> Неопределено Тогда
		СтруктураФорма4ФСС.ПараметрыФормыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураФорма4ФСС.ДокументОтчетности,
			"ДатаНачала,ДатаОкончания,Периодичность,ВыбраннаяФорма");
			Если (ПериодРасчета >= '20130630' И СтруктураФорма4ФСС.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2012Кв1")
				ИЛИ (ПериодРасчета >= '20140101' И СтруктураФорма4ФСС.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2013Кв2") 
				ИЛИ (ПериодРасчета >= '20150101' И СтруктураФорма4ФСС.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2014Кв1")
				ИЛИ (ПериодРасчета >= '20160101' И СтруктураФорма4ФСС.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2015Кв1")
				ИЛИ (ПериодРасчета >= '20160701' И СтруктураФорма4ФСС.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2016Кв1")
				ИЛИ (ПериодРасчета >= '20170101' И СтруктураФорма4ФСС.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2016Кв3")
				ИЛИ (ПериодРасчета >= '20170701' И СтруктураФорма4ФСС.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2017Кв1")Тогда
				// Форма документа отчетности не соответствует периоду формирования
				ДокументОбъект = СтруктураФорма4ФСС.ДокументОтчетности.ПолучитьОбъект();
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
				ДокументОбъект.Записать();
				
				СтруктураФорма4ФСС.ДокументОтчетности = Неопределено;
				СтруктураФорма4ФСС.ПараметрыФормыДокумента = Неопределено;
			КонецЕсли;
	КонецЕсли;
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		СобытиеКалендаря,
		Перечисления.СостоянияСобытийКалендаря.Отправить,
		"");
	
	Возврат СтруктураФорма4ФСС;
	
КонецФункции


// Процедура формирует отчет расчет по страховым взносам
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьРасчетПоСтраховымВзносам(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	
	СтруктураРасчетПоСтраховымВзносам = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ДокументОтчетности,
		|ДатаДокументаОбработкиСобытия,
		|ПараметрыФормыДокумента",
		Организация,
		СобытиеКалендаря,
		Неопределено,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря, "ДатаДокументаОбработкиСобытия"));
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование расчета по страховым взносам невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СтруктураРасчетПоСтраховымВзносам.ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СтруктураРасчетПоСтраховымВзносам.ДокументОтчетности <> Неопределено Тогда
		СтруктураРасчетПоСтраховымВзносам.ПараметрыФормыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураРасчетПоСтраховымВзносам.ДокументОтчетности,
			"ДатаНачала,ДатаОкончания,Периодичность,ВыбраннаяФорма");
			Если (ПериодРасчета >= '20200101' И СтруктураРасчетПоСтраховымВзносам.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2017Кв1")
				ИЛИ (ПериодРасчета >= '20201001' И СтруктураРасчетПоСтраховымВзносам.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2020Кв1") Тогда
			// Форма документа отчетности не соответствует периоду формирования
			ДокументОбъект = СтруктураРасчетПоСтраховымВзносам.ДокументОтчетности.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			ДокументОбъект.Записать();
			
			СтруктураРасчетПоСтраховымВзносам.ДокументОтчетности = Неопределено;
			СтруктураРасчетПоСтраховымВзносам.ПараметрыФормыДокумента = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		СобытиеКалендаря,
		Перечисления.СостоянияСобытийКалендаря.Отправить,
		"");
	
	Возврат СтруктураРасчетПоСтраховымВзносам;
	
КонецФункции

// Функция проверяет, выполнялся ли расчет единого налога, если таковой не выполнялся
// то производит соответствующий расчет
Функция КонтрольРасчетаЕдиногоНалога(Организация, ПериодРасчета) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗначенияПоказателейОтчетности.ЗначениеПоказателя
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетности КАК ЗначенияПоказателейОтчетности
	|ГДЕ
	|	ЗначенияПоказателейОтчетности.Организация = &Организация
	|	И ЗначенияПоказателейОтчетности.ПоказательОтчетности В ИЕРАРХИИ(&ПоказательОтчетности)
	|	И ЗначенияПоказателейОтчетности.ПериодОтчетности = &ПериодОтчетности");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодОтчетности", ПериодРасчета);
	Запрос.УстановитьПараметр("ПоказательОтчетности", ПланыВидовХарактеристик.ПоказателиОтчетности.ЕдиныйНалог);
	
	ВыполнитьРасчетЕдиногоНалога(Организация, ПериодРасчета, КалендарьОтчетности.ПолучитьСобытиеРасчетаЕдиногоНалогаВПериоде(ПериодРасчета), Ложь);
	
	Если Запрос.Выполнить().Пустой() Тогда
		
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура формирует записи по расчету взносов в ПФР и ФСС
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция ВыполнитьРасчетВзносовВПФРиФСС(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураРасчетаВзносовВПФРиФСС = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ПериодОтчетности,
		|ДатаРегистрацииИППФР,
		|ДатаРожденияЗаСебя,
		|ПлательщикДобровольныхВзносовФССЗаСебя,
		|ПФРНакопительнаяЗаСебя,
		|ПФРСтраховаяЗаСебя,
		|ТФОМСЗаСебя,
		|ФФОМСЗаСебя,
		|МРОТЗаСебя,
		|УплаченоСНачалоГОДЗаСебя,
		|ВидВзаиморасчетовСБюджетом,
		|СуммаВзаиморасчетовСБюджетом,
		|ДокументВзаиморасчетовСБюджетом,
		|СуммаНалога",
		Организация,
		СобытиеКалендаря,
		ПериодРасчета,
		0,
		0,
		Ложь,
		0,
		0,
		0,
		0,
		0,
		0,
		Неопределено,
		0,
		Неопределено,
		0);
	
	Запрос = Новый Запрос;
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	Если НЕ УчетВалютныхОпераций ИЛИ НациональнаяВалюта = ВалютаУчета Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоНалогамОбороты.ВидНалога КАК ВидВзаиморасчетов,
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогамОбороты.СуммаРасход), 0) КАК СуммаРасход
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетов)
		|				И СрокУплаты В
		|					(ВЫБРАТЬ
		|						КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|					ИЗ
		|						Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|					ГДЕ
		|						КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыИП)
		|						И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода)) КАК РасчетыПоНалогамОбороты
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоНалогамОбороты.ВидНалога
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыПоНалогам.ВидНалога КАК ВидВзаиморасчетов,
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.СуммаПриход), 0) КАК СуммаПриход
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			&НачалоПериода,
		|			,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетов)
		|				И СрокУплаты В
		|					(ВЫБРАТЬ
		|						КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|					ИЗ
		|						Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|					ГДЕ
		|						КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыИП)
		|						И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода
		|						И КалендарьПодготовкиОтчетности.ДатаОкончанияДокументов <> &ДатаОкончанияДокументов)) КАК РасчетыПоНалогам
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоНалогам.ВидНалога";
	Иначе
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТ, НачалоГода(ПериодРасчета), КонецДня(ПериодРасчета), НациональнаяВалюта, УчетВалютныхОпераций);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоНалогам.ВидНалога КАК ВидВзаиморасчетов,
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)), 0) КАК СуммаРасход
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ
		|	РасчетыПоНалогам.Организация = &Организация
		|	И РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыПоНалогам.ВидНалога В(&ВидыВзаиморасчетов)
		|	И РасчетыПоНалогам.СрокУплаты В
		|			(ВЫБРАТЬ
		|				КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|			ИЗ
		|				Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|			ГДЕ
		|				КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыИП)
		|				И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоНалогам.ВидНалога
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыПоНалогам.ВидНалога КАК ВидВзаиморасчетов,
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)), 0) КАК СуммаПриход
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ
		|	РасчетыПоНалогам.Период >= &НачалоПериода
		|	И РасчетыПоНалогам.Организация = &Организация
		|	И РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И РасчетыПоНалогам.ВидНалога В(&ВидыВзаиморасчетов)
		|	И РасчетыПоНалогам.СрокУплаты В
		|			(ВЫБРАТЬ
		|				КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|			ИЗ
		|				Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|			ГДЕ
		|				КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыИП)
		|				И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода
		|				И КалендарьПодготовкиОтчетности.ДатаОкончанияДокументов <> &ДатаОкончанияДокументов)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоНалогам.ВидНалога";
		Запрос.УстановитьПараметр("ВалютаУчета", ВалютаУчета);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ПериодРасчета));
	Запрос.УстановитьПараметр("ДатаОкончанияДокументов", ПериодРасчета);
	
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетов", ВидыВзаиморасчетовВзносыВПФРИФСС);
	
	// соберем данные ранее уплаченных платежей
	
	УплаченоСНачалоГода = Новый Соответствие();
	УплаченоСНачалоГода.Вставить(Справочники.ВидыНалогов.ПФРНакопительная,0);
	УплаченоСНачалоГода.Вставить(Справочники.ВидыНалогов.ПФРСтраховая,0);
	УплаченоСНачалоГода.Вставить(Справочники.ВидыНалогов.ТФОМС,0);
	УплаченоСНачалоГода.Вставить(Справочники.ВидыНалогов.ФФОМС,0);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УплаченоСНачалоГода[Выборка.ВидВзаиморасчетов] = Выборка.СуммаРасход;
	КонецЦикла;
	
	НачисленоСНачалоГода = Новый Соответствие();
	НачисленоСНачалоГода.Вставить(Справочники.ВидыНалогов.ПФРНакопительная,0);
	НачисленоСНачалоГода.Вставить(Справочники.ВидыНалогов.ПФРСтраховая,0);
	НачисленоСНачалоГода.Вставить(Справочники.ВидыНалогов.ТФОМС,0);
	НачисленоСНачалоГода.Вставить(Справочники.ВидыНалогов.ФФОМС,0);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачисленоСНачалоГода[Выборка.ВидВзаиморасчетов] = Выборка.СуммаПриход;
	КонецЦикла;
	
	
	
	// Здесь будет произведен расчет взносов
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ФизическоеЛицо,ДатаРегистрации");
	ДатаРождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ФизическоеЛицо, "ДатаРождения");
	СтруктураРасчетаВзносовВПФРиФСС.ДатаРегистрацииИППФР = Реквизиты.ДатаРегистрации;
	СтруктураРасчетаВзносовВПФРиФСС.ДатаРожденияЗаСебя = ДатаРождения;
	
	СтруктураРасчетаВзносовВПФРиФСС.МРОТЗаСебя = РегистрыСведений.МРОТ.МРОТНаДату(НачалоГода(ПериодРасчета));
	
	// ПФР
	ДатаНачалаПрименения = ?(СтруктураРасчетаВзносовВПФРиФСС.ДатаРегистрацииИППФР < НачалоГода(ПериодРасчета), НачалоГода(ПериодРасчета), СтруктураРасчетаВзносовВПФРиФСС.ДатаРегистрацииИППФР);
	
	КоличествоМесяцевНеполных = Месяц(ПериодРасчета) - Месяц(ДатаНачалаПрименения);
	КоличествоДней = День(КонецМесяца(ДатаНачалаПрименения))-День(ДатаНачалаПрименения)+1;
	
	Если Год(ПериодРасчета) < 2018 Тогда
		ПоМесяцам = СтруктураРасчетаВзносовВПФРиФСС.МРОТЗаСебя*КоличествоМесяцевНеполных;
		ПоДням = СтруктураРасчетаВзносовВПФРиФСС.МРОТЗаСебя*КоличествоДней/День(КонецМесяца(ДатаНачалаПрименения));
		
		// Коэффициент, с 2013 года равен 2, до этого 1.
		Если Год(ПериодРасчета) = 2013 Тогда
			Коэффициент = 2;
		Иначе
			Коэффициент = 1;
		КонецЕсли;
		
		Если Год(ПериодРасчета) > 2013 Тогда
			СтруктураРасчетаВзносовВПФРиФСС.ПФРСтраховаяЗаСебя = (ПоМесяцам+ПоДням)*0.26*Коэффициент;
		Иначе
			Если Год(СтруктураРасчетаВзносовВПФРиФСС.ДатаРожденияЗаСебя) < 1967 Тогда
				СтруктураРасчетаВзносовВПФРиФСС.ПФРСтраховаяЗаСебя = (ПоМесяцам+ПоДням)*0.26*Коэффициент;
			Иначе
				СтруктураРасчетаВзносовВПФРиФСС.ПФРСтраховаяЗаСебя = (ПоМесяцам+ПоДням)*0.20*Коэффициент;
				СтруктураРасчетаВзносовВПФРиФСС.ПФРНакопительнаяЗаСебя = (ПоМесяцам+ПоДням)*0.06*Коэффициент;
			КонецЕсли;
		КонецЕсли;
		
		// ОМС
		
		СтруктураРасчетаВзносовВПФРиФСС.ФФОМСЗаСебя = (ПоМесяцам+ПоДням)*0.051;
		СтруктураРасчетаВзносовВПФРиФСС.ТФОМСЗаСебя = (ПоМесяцам+ПоДням)*0.0;
	Иначе
		ТекущиеВзносы = РегистрыСведений.ФиксированныеВзносыИП.ФиксированныеВзносыИПНаДату(НачалоГода(ПериодРасчета));
		Если Год(ПериодРасчета) = 2020 И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ПоддержкаИП")Тогда
			СтруктураРасчетаВзносовВПФРиФСС.ПФРСтраховаяЗаСебя = (КоличествоДней/День(КонецМесяца(ДатаНачалаПрименения))+КоличествоМесяцевНеполных)*20318/12;
		Иначе
			СтруктураРасчетаВзносовВПФРиФСС.ПФРСтраховаяЗаСебя = (КоличествоДней/День(КонецМесяца(ДатаНачалаПрименения))+КоличествоМесяцевНеполных)*ТекущиеВзносы.РазмерПФР/12;
		КонецЕсли;
		
		СтруктураРасчетаВзносовВПФРиФСС.ФФОМСЗаСебя = (КоличествоДней/День(КонецМесяца(ДатаНачалаПрименения))+КоличествоМесяцевНеполных)*ТекущиеВзносы.РазмерФОМС/12;
	КонецЕсли;
	
	
	НачатьТранзакцию();
	
	СтруктураРасчетаВзносовВПФРиФСС.ВидВзаиморасчетовСБюджетом = Справочники.ВидыНалогов.ПФРСтраховая;
	СтруктураРасчетаВзносовВПФРиФСС.СуммаВзаиморасчетовСБюджетом = СтруктураРасчетаВзносовВПФРиФСС.ПФРСтраховаяЗаСебя;
	ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчетаВзносовВПФРиФСС,  Макс(0, СтруктураРасчетаВзносовВПФРиФСС.СуммаВзаиморасчетовСБюджетом - НачисленоСНачалоГода[Справочники.ВидыНалогов.ПФРСтраховая]));
	
	СтруктураРасчетаВзносовВПФРиФСС.ВидВзаиморасчетовСБюджетом = Справочники.ВидыНалогов.ПФРНакопительная;
	СтруктураРасчетаВзносовВПФРиФСС.СуммаВзаиморасчетовСБюджетом = СтруктураРасчетаВзносовВПФРиФСС.ПФРНакопительнаяЗаСебя;
	ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчетаВзносовВПФРиФСС,  Макс(0, СтруктураРасчетаВзносовВПФРиФСС.СуммаВзаиморасчетовСБюджетом - НачисленоСНачалоГода[Справочники.ВидыНалогов.ПФРНакопительная]));
	
	СтруктураРасчетаВзносовВПФРиФСС.ВидВзаиморасчетовСБюджетом = Справочники.ВидыНалогов.ФФОМС;
	СтруктураРасчетаВзносовВПФРиФСС.СуммаВзаиморасчетовСБюджетом = СтруктураРасчетаВзносовВПФРиФСС.ФФОМСЗаСебя;
	ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчетаВзносовВПФРиФСС,  Макс(0, СтруктураРасчетаВзносовВПФРиФСС.СуммаВзаиморасчетовСБюджетом - НачисленоСНачалоГода[Справочники.ВидыНалогов.ФФОМС]));
	
	// корректируем на сумму уплаты с начала года
	СтруктураРасчетаВзносовВПФРиФСС.ПФРСтраховаяЗаСебя = 
		Макс(
			СтруктураРасчетаВзносовВПФРиФСС.ПФРСтраховаяЗаСебя - УплаченоСНачалоГода[Справочники.ВидыНалогов.ПФРСтраховая],
			0);
			
	СтруктураРасчетаВзносовВПФРиФСС.ПФРНакопительнаяЗаСебя =
			Макс(
			СтруктураРасчетаВзносовВПФРиФСС.ПФРНакопительнаяЗаСебя - УплаченоСНачалоГода[Справочники.ВидыНалогов.ПФРНакопительная],
			0);
			
	СтруктураРасчетаВзносовВПФРиФСС.ФФОМСЗаСебя = 
			Макс(
			СтруктураРасчетаВзносовВПФРиФСС.ФФОМСЗаСебя - УплаченоСНачалоГода[Справочники.ВидыНалогов.ФФОМС],
			0);
			
	СтруктураРасчетаВзносовВПФРиФСС.ТФОМСЗаСебя = 
			Макс(
			СтруктураРасчетаВзносовВПФРиФСС.ТФОМСЗаСебя - УплаченоСНачалоГода[Справочники.ВидыНалогов.ТФОМС],
			0);
	
	СтруктураРасчетаВзносовВПФРиФСС.УплаченоСНачалоГОДЗаСебя = 
		УплаченоСНачалоГода[Справочники.ВидыНалогов.ПФРСтраховая]
		+УплаченоСНачалоГода[Справочники.ВидыНалогов.ПФРНакопительная]
		+УплаченоСНачалоГода[Справочники.ВидыНалогов.ТФОМС]
		+УплаченоСНачалоГода[Справочники.ВидыНалогов.ФФОМС];
	
	
	ОтразитьЗначенияПоказателейОтчетности(СтруктураРасчетаВзносовВПФРиФСС);
	
	
	СтруктураРасчетаВзносовВПФРиФСС.СуммаНалога = СтруктураРасчетаВзносовВПФРиФСС.ПФРСтраховаяЗаСебя+
			СтруктураРасчетаВзносовВПФРиФСС.ПФРНакопительнаяЗаСебя+
			СтруктураРасчетаВзносовВПФРиФСС.ФФОМСЗаСебя+
			СтруктураРасчетаВзносовВПФРиФСС.ТФОМСЗаСебя;
		// запись состояние события календаря
	Если СобытиеКалендаря <> Неопределено Тогда
		
		КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Организация,
			СобытиеКалендаря,
			Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
			"",
			СтруктураРасчетаВзносовВПФРиФСС.СуммаНалога);
		
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат СтруктураРасчетаВзносовВПФРиФСС;
	
КонецФункции


// Процедура формирует записи по расчету взносов в ПФР при доходах свыше 300 тр.
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция ВыполнитьРасчетВзносовВПФРПриДоходахСвыше300тр(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураРасчетаВзносовВПФРиФСС = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ПериодОтчетности,
		|СуммаДоходовУСНСвыше300тр,
		|СуммаРасходовУСНСвыше300тр,
		|СуммаДоходовЕНВДСвыше300тр,
		|СуммаДоходовПатентСвыше300тр,
		|ПФРСвыше300тр,
		|МРОТЗаСебя,
		|УплаченоСНачалоГОДСвыше300тр,
		|НеУплаченоФиксированннаяЧасть,
		|ФиксированнаяЧастьВзносов,
		|УплачноФиксированнаяЧасть,
		|ВидВзаиморасчетовСБюджетом,
		|СуммаВзаиморасчетовСБюджетом,
		|ДокументВзаиморасчетовСБюджетом,
		|хзТаблицаЕНВДСвыше300тр",
		Организация,
		СобытиеКалендаря,
		ПериодРасчета,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		Неопределено,
		0,
		Неопределено,
		Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот КАК ДоходовЗаГод,
	|	КнигаУчетаДоходовИРасходовОбороты.РасходБазаОборот КАК РасходовЗаГод
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &ОкончаниеПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|;");
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	Если НЕ УчетВалютныхОпераций ИЛИ НациональнаяВалюта = ВалютаУчета Тогда
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.СуммаРасход), 0) КАК СуммаРасход,
		|	РасчетыПоНалогам.ВидНалога КАК ВидНалога
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			&НачалоПериода,
		|			,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетов)
		|				И СрокУплаты В
		|					(ВЫБРАТЬ
		|						КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|					ИЗ
		|						Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|					ГДЕ
		|						КалендарьПодготовкиОтчетности.Задача В (&СписокЗадачКалендаря)
		|						И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода)) КАК РасчетыПоНалогам
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоНалогам.ВидНалога
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.СуммаПриход), 0) КАК СуммаПриход
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			&НачалоПериода,
		|			,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетов)
		|				И СрокУплаты В
		|					(ВЫБРАТЬ
		|						КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|					ИЗ
		|						Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|					ГДЕ
		|						КалендарьПодготовкиОтчетности.Задача В (&СписокЗадачКалендаря)
		|						И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода
		|						И КалендарьПодготовкиОтчетности.ДатаОкончанияДокументов <> &ДатаОкончанияДокументов)) КАК РасчетыПоНалогам";
	Иначе
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТ, НачалоГода(ПериодРасчета), КонецДня(ПериодРасчета), НациональнаяВалюта, УчетВалютныхОпераций);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)), 0) КАК СуммаРасход,
		|	РасчетыПоНалогам.ВидНалога КАК ВидНалога
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ
		|	РасчетыПоНалогам.Период >= &НачалоПериода
		|	И РасчетыПоНалогам.Организация = &Организация
		|	И РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыПоНалогам.ВидНалога В(&ВидыВзаиморасчетов)
		|	И РасчетыПоНалогам.СрокУплаты В
		|			(ВЫБРАТЬ
		|				КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|			ИЗ
		|				Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|			ГДЕ
		|				КалендарьПодготовкиОтчетности.Задача В (&СписокЗадачКалендаря)
		|				И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоНалогам.ВидНалога
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)), 0) КАК СуммаПриход
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ
		|	РасчетыПоНалогам.Период >= &НачалоПериода
		|	И РасчетыПоНалогам.Организация = &Организация
		|	И РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И РасчетыПоНалогам.ВидНалога В(&ВидыВзаиморасчетов)
		|	И РасчетыПоНалогам.СрокУплаты В
		|			(ВЫБРАТЬ
		|				КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|			ИЗ
		|				Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|			ГДЕ
		|				КалендарьПодготовкиОтчетности.Задача В (&СписокЗадачКалендаря)
		|				И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода
		|				И КалендарьПодготовкиОтчетности.ДатаОкончанияДокументов <> &ДатаОкончанияДокументов)";
		
		Запрос.УстановитьПараметр("ВалютаУчета", ВалютаУчета);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СрокУплаты", ДобавитьМесяц(НачалоГода(ПериодРасчета),15));
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ПериодРасчета));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ПериодРасчета));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодРасчета));
	Запрос.УстановитьПараметр("ДатаОкончанияДокументов", ПериодРасчета); 
	
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ПериодРасчета), Новый Структура("Организация", Организация));
	// Общий доход подсчитывается как сумма
	// по используемым режимам налогообложения
	//
	Если СистемаНалогообложения.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.ДоходыМинусРасходы 
		И СистемаНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		УчитыватьРасходы = Истина;
	Иначе
		УчитыватьРасходы = Ложь;
	КонецЕсли;    
	
	ТекущийПериодПользователя = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
	КонецГода(ПериодРасчета),
	ОбщегоНазначения.ТекущаяДатаПользователя());
	
	РасчетЗаТекущийПериод = (КонецДня(КонецГода(ПериодРасчета)) >= ТекущийПериодПользователя);
	ПериодичностьНачисления = ПериодичностьНачисления(Организация, ПериодРасчета, СистемаНалогообложения);
	
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	СписокЗадачКалендаря = Новый Массив;
	
	Если РасчетЗаТекущийПериод И УчитыватьРасходы
		И ПериодичностьНачисления = Перечисления.Периодичность.Квартал Тогда
		// Для расчета потребуются все уплаченные взносы.
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300тр);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
		СписокЗадачКалендаря.Добавить(Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыПриДоходахСвыше300тр);
		СписокЗадачКалендаря.Добавить(Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыИП);
	Иначе
		// Потребуются только уплаченные взносы с доходов.
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300тр);
		СписокЗадачКалендаря.Добавить(Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыПриДоходахСвыше300тр);
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетов", ВидыВзаиморасчетовВзносыВПФРИФСС);
	Запрос.УстановитьПараметр("СписокЗадачКалендаря", СписокЗадачКалендаря);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет(); 	
	
	ТаблицаПоНалогу = РезультатЗапроса[0].Выгрузить();
	ДоходыУСН = 0;
	РасходыУСН = 0;
	
	Если ТаблицаПоНалогу.Количество() > 0 Тогда
		
		СтрокаДанныхНалога = ТаблицаПоНалогу[0];
		ДоходыУСН = СтрокаДанныхНалога.ДоходовЗаГод;
		РасходыУСН = СтрокаДанныхНалога.РасходовЗаГод;	
		
	КонецЕсли; 
	
	ВыборкаСтраховыеВзносыУплаченные = РезультатЗапроса[1].Выгрузить();
	
	Если ВыборкаСтраховыеВзносыУплаченные <> Неопределено Тогда
		СтраховыеВзносыСДоходовУплаченные = ВыборкаСтраховыеВзносыУплаченные.Скопировать(
		Новый Структура("ВидНалога", Справочники.ВидыНалогов.ПФРСвыше300тр));
		УплаченоСДоходов = СтраховыеВзносыСДоходовУплаченные.Итог("СуммаРасход");
        СтруктураРасчетаВзносовВПФРиФСС.УплаченоСНачалоГОДСвыше300тр = УплаченоСДоходов; 
	Иначе
		СтруктураРасчетаВзносовВПФРиФСС.УплаченоСНачалоГОДСвыше300тр = Неопределено;
		УплаченоСДоходов = 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[2].Выбрать();
	
	НачисленоСНачалаГода = 0;
	Пока Выборка.Следующий() Цикл
		НачисленоСНачалаГода = Выборка.СуммаПриход;
	КонецЦикла;
	
	СтруктураРасчетаВзносовВПФРиФСС.МРОТЗаСебя = РегистрыСведений.МРОТ.МРОТНаДату(НачалоГода(ПериодРасчета));
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	
	Если СистемаНалогообложения.ПлательщикУСН Тогда
		Если УчитыватьРасходы Тогда	
			СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовУСНСвыше300тр = ДоходыУСН  + СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовУСНСвыше300тр;
			СтруктураРасчетаВзносовВПФРиФСС.СуммаРасходовУСНСвыше300тр = РасходыУСН + СтруктураРасчетаВзносовВПФРиФСС.СуммаРасходовУСНСвыше300тр; 
		Иначе
			СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовУСНСвыше300тр = СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовУСНСвыше300тр + ДоходыУСН;	
			СтруктураРасчетаВзносовВПФРиФСС.СуммаРасходовУСНСвыше300тр = 0;
		КонецЕсли;	
	КонецЕсли;
	
	ВременнаяТаблица = Новый ТаблицаЗначений;
	
	ВременнаяТаблица.Колонки.Добавить("ВидДеятельности");
	ВременнаяТаблица.Колонки.Добавить("КодИФНС");
	ВременнаяТаблица.Колонки.Добавить("ОКАТО");
	ВременнаяТаблица.Колонки.Добавить("К2Установленный");
	ВременнаяТаблица.Колонки.Добавить("ДнейВсего");
	ВременнаяТаблица.Колонки.Добавить("ДнейОтработано");
	ВременнаяТаблица.Колонки.Добавить("К2Скорректированный");
	ВременнаяТаблица.Колонки.Добавить("БазоваяДоходность");
	ВременнаяТаблица.Колонки.Добавить("ФизПоказатель");
	ВременнаяТаблица.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов(Новый КвалификаторыЧисла(15,2)));
	ВременнаяТаблица.Колонки.Добавить("СуммаДохода", Новый ОписаниеТипов(Новый КвалификаторыЧисла(15,2)));
	ВременнаяТаблица.Колонки.Добавить("КварталЕНВД", Новый ОписаниеТипов(Новый КвалификаторыЧисла(1,0)));
	
	// Рассчитываем доход по ЕНВД
	Если СистемаНалогообложения.ПлательщикЕНВД Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КодПоОКАТО КАК КодОКАТО,
			|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.Ссылка КАК ВидДеятельности,
			|	ЕСТЬNULL(ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ВидПредпринимательскойДеятельности.БазоваяДоходность, 0) КАК БазоваяДоходность,
			|	ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя1 + ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя2 + ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя3 КАК ФизПоказатель,
			|	ЕСТЬNULL(ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КоэффициентК2, 0) КАК КоэффициентК2,
			|	ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней1 + ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней2 + ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней3 КАК ВыработкаДней,
			|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего1 + ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего2 + ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего3 КАК ДнейВсего,
			|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КодНалоговогоОрганаПолучателя КАК КодИФНС,
			|	КВАРТАЛ(ПоказателиЕНВДПоказателиЕНВД.Ссылка.Дата) КАК КварталЕНВД
			|ИЗ
			|	Документ.ПоказателиЕНВД.ПоказателиЕНВД КАК ПоказателиЕНВДПоказателиЕНВД
			|ГДЕ
			|	НЕ ПоказателиЕНВДПоказателиЕНВД.Ссылка.ПометкаУдаления
			|	И ПоказателиЕНВДПоказателиЕНВД.Ссылка.Организация = &Организация
			|	И ПоказателиЕНВДПоказателиЕНВД.Ссылка.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД,
			|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.Дата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КоэффициентДефляторСрезПоследних.Значение КАК К1
			|ИЗ
			|	РегистрСведений.КоэффициентДефлятор.СрезПоследних(&ОкончаниеПериода, ) КАК КоэффициентДефляторСрезПоследних";
		
		Результат = Запрос.ВыполнитьПакет();
		Выборка = Результат[1].Выбрать();
		Выборка.Следующий();
		
		К1 = Выборка.К1;
		Выборка = Результат[0].Выбрать();
		ДоходыЕНВД = 0;
		
		Пока Выборка.Следующий() Цикл
			Строка = ВременнаяТаблица.Добавить();
			Строка.ОКАТО = Выборка.КодОКАТО;
			Строка.КодИФНС = Выборка.КодИФНС;
			Строка.ВидДеятельности = Выборка.ВидДеятельности;
			Строка.К2Установленный = Выборка.КоэффициентК2;
			Строка.ДнейВсего = Выборка.ДнейВсего;
			Строка.ДнейОтработано = Выборка.ВыработкаДней;
			Строка.БазоваяДоходность = Выборка.БазоваяДоходность;
			Строка.К2Скорректированный = Выборка.КоэффициентК2*Выборка.ВыработкаДней/Выборка.ДнейВсего;
			Строка.ФизПоказатель = Выборка.ФизПоказатель;
			Строка.СуммаНалога = Окр(Строка.ФизПоказатель * Строка.БазоваяДоходность * К1 * Строка.К2Скорректированный * 0.15);
			Строка.СуммаДохода = Строка.ФизПоказатель * Строка.БазоваяДоходность * К1 * Строка.К2Скорректированный;
			Строка.КварталЕНВД = Выборка.КварталЕНВД;
			
			
			ДоходыЕНВД = ДоходыЕНВД + Выборка.ФизПоказатель * Выборка.БазоваяДоходность * К1 * (Выборка.КоэффициентК2*Выборка.ВыработкаДней/Выборка.ДнейВсего);
		КонецЦикла;
		
		СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовЕНВДСвыше300тр = СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовЕНВДСвыше300тр + ДоходыЕНВД;
	КонецЕсли;
	
	СтруктураРасчетаВзносовВПФРиФСС.хзТаблицаЕНВДСвыше300тр = Новый ХранилищеЗначения(ВременнаяТаблица);
	
	// Посчитаем патент
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Патенты.Ссылка,
	|	Патенты.ДатаНачала,
	|	Патенты.ДатаОкончания,
	|	Патенты.ПотенциальноВозможныйГодовойДоход
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	НЕ Патенты.ПометкаУдаления
	|	И Патенты.Владелец = &Организация
	|	И (Патенты.ДатаОкончания МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|			ИЛИ Патенты.ДатаНачала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|			ИЛИ &НачалоПериода МЕЖДУ Патенты.ДатаНачала И Патенты.ДатаОкончания
	|			ИЛИ &ОкончаниеПериода МЕЖДУ Патенты.ДатаНачала И Патенты.ДатаОкончания)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовПатентСвыше300тр = 
			СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовПатентСвыше300тр + 
			РегламентированнаяОтчетностьУСНКлиентСервер.РассчитатьПотенциальноВозможныйДоход(
				Выборка.ПотенциальноВозможныйГодовойДоход,Макс(НачалоГода(ПериодРасчета), Выборка.ДатаНачала),Мин(КонецДня(ПериодРасчета), Выборка.ДатаОкончания), Организация.ПоддержкаИП);
	КонецЦикла;
	
	Если УчитыватьРасходы Тогда
		СуммаДоходаУСН = Макс(СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовУСНСвыше300тр - СтруктураРасчетаВзносовВПФРиФСС.СуммаРасходовУСНСвыше300тр, 0);
	Иначе
		СуммаДоходаУСН = СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовУСНСвыше300тр;
	КонецЕсли;
	
	СуммаДоходовВзносыСвыше300тр = СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовЕНВДСвыше300тр
	//учитываем расходы по УСН 
	+ СуммаДоходаУСН 
	+ СтруктураРасчетаВзносовВПФРиФСС.СуммаДоходовПатентСвыше300тр;
	
	// Посчитаем сумму фиксированных страховых взносов
	
	ДатаНачалаПрименения = ?(ДатаРегистрации < НачалоГода(ПериодРасчета), НачалоГода(ПериодРасчета), ДатаРегистрации);
	
	КоличествоМесяцевНеполных = 12 - Месяц(ДатаНачалаПрименения);
	КоличествоДней = День(КонецМесяца(ДатаНачалаПрименения))-День(ДатаНачалаПрименения)+1;
	
	// Максимальная сумма согласно пп. "а" п. 1 ст. 2 Закона N 237-ФЗ
	// за вычетом фиксированных платежей.
	Если Год(ПериодРасчета) < 2018 Тогда
		ПоМесяцам = СтруктураРасчетаВзносовВПФРиФСС.МРОТЗаСебя*КоличествоМесяцевНеполных;
		ПоДням = СтруктураРасчетаВзносовВПФРиФСС.МРОТЗаСебя*КоличествоДней/День(КонецМесяца(ДатаНачалаПрименения));
		СуммаФиксированныхВзносов = (ПоМесяцам+ПоДням)*0.26;
		МаксимальнаяСуммаСтраховыхВзносов = СтруктураРасчетаВзносовВПФРиФСС.МРОТЗаСебя*8*0.26*12 - СуммаФиксированныхВзносов;
	Иначе
		ТекущиеВзносы = РегистрыСведений.ФиксированныеВзносыИП.ФиксированныеВзносыИПНаДату(НачалоГода(ПериодРасчета));
		СуммаФиксированныхВзносов = (КоличествоДней/День(КонецМесяца(ДатаНачалаПрименения))+КоличествоМесяцевНеполных)*ТекущиеВзносы.РазмерПФР/12;
		МаксимальнаяСуммаСтраховыхВзносов = ТекущиеВзносы.РазмерПФР*8 - СуммаФиксированныхВзносов;
	КонецЕсли;	
	
	//не завершенный период, учитывать вхождение в расходы самого взноса с доходов	
	Если РасчетЗаТекущийПериод И УчитыватьРасходы Тогда		
		
		Если ПериодичностьНачисления = Перечисления.Периодичность.Квартал Тогда
			
			// При ежеквартальном признании расходов взносы, оплаченные в течение периода, уже учтены в расходах.
			// Считаем, что неоплаченная часть взносов будет оплачена и учтена в расходах текущего квартала.
			Если ВыборкаСтраховыеВзносыУплаченные <> Неопределено Тогда
				УплаченоФиксированнаяЧасть = ВыборкаСтраховыеВзносыУплаченные.Итог("СуммаРасход") - УплаченоСДоходов;
			Иначе
				УплаченоФиксированнаяЧасть = 0;
			КонецЕсли;
			
			СтраховыеВзносы = РассчитатьФиксированныеСтраховыеВзносы(ПериодРасчета, Организация);
			ФиксированнаяЧастьВзносов = СтраховыеВзносы.ПФР + СтраховыеВзносы.ФФОМС;
			
			НеУплаченоФиксированннаяЧасть = Макс(ФиксированнаяЧастьВзносов - УплаченоФиксированнаяЧасть, 0);
			СтруктураРасчетаВзносовВПФРиФСС.НеУплаченоФиксированннаяЧасть = НеУплаченоФиксированннаяЧасть;
			СтруктураРасчетаВзносовВПФРиФСС.ФиксированнаяЧастьВзносов = ФиксированнаяЧастьВзносов;
			СтруктураРасчетаВзносовВПФРиФСС.УплачноФиксированнаяЧасть = УплаченоФиксированнаяЧасть;
			
			// При расчете взноса с разницы доходов и расходов необходимо:
			// - добавить к расходам не оплаченную фиксированную часть, поскольку она будет учтена в расходах после оплаты;
			// - исключить расходы на уже уплаченные взносы с доходов, поскольку они являются частью расчетной суммы взноса
			//   и не должны влиять на расчет. 		
			
			ОблагаемыйДоход =  Макс(СуммаДоходовВзносыСвыше300тр + УплаченоСДоходов - НеУплаченоФиксированннаяЧасть - 300000, 0);
			
			СтруктураРасчетаВзносовВПФРиФСС.ПФРСвыше300тр = Окр(ОблагаемыйДоход * 1 / 101, 2, 1);
			
		Иначе 		
			
			// Ежегодное начисление взносов с учетом расходов производится только у ИП на ОСНО в периоды ранее 2020 года.  		
			// Учтенные расходы на постоянную часть взносов нужно исключить из базы - вместо них учитываются планируемые расходы за год.
			ВсегоДоходов = СуммаДоходовВзносыСвыше300тр + СтруктураРасчетаВзносовВПФРиФСС.УплаченоСНачалоГОДСвыше300тр; 		
			
			ОблагаемыйДоход = Макс(ВсегоДоходов - СуммаФиксированныхВзносов - 300000, 0);
			СтруктураРасчетаВзносовВПФРиФСС.ПФРСвыше300тр = Окр(ОблагаемыйДоход * 1 / 101, 2, 1); 
			
		КонецЕсли;	
		
	Иначе
		
		СтруктураРасчетаВзносовВПФРиФСС.ПФРСвыше300тр = Мин(МаксимальнаяСуммаСтраховыхВзносов,?(СуммаДоходовВзносыСвыше300тр > 300000,(СуммаДоходовВзносыСвыше300тр - 300000)*0.01, 0));
		СтруктураРасчетаВзносовВПФРиФСС.ПФРСвыше300тр = ?(СтруктураРасчетаВзносовВПФРиФСС.ПФРСвыше300тр < СтруктураРасчетаВзносовВПФРиФСС.УплаченоСНачалоГОДСвыше300тр, 0, СтруктураРасчетаВзносовВПФРиФСС.ПФРСвыше300тр - СтруктураРасчетаВзносовВПФРиФСС.УплаченоСНачалоГОДСвыше300тр);
	КонецЕсли;	
		
	СтруктураРасчетаВзносовВПФРиФСС.ПФРСвыше300тр = Окр(СтруктураРасчетаВзносовВПФРиФСС.ПФРСвыше300тр, 2, 1); 
	
	НачатьТранзакцию();
	
	СтруктураРасчетаВзносовВПФРиФСС.ВидВзаиморасчетовСБюджетом = Справочники.ВидыНалогов.ПФРСвыше300тр;
	СтруктураРасчетаВзносовВПФРиФСС.СуммаВзаиморасчетовСБюджетом = СтруктураРасчетаВзносовВПФРиФСС.ПФРСвыше300тр;
	ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчетаВзносовВПФРиФСС, ?(СтруктураРасчетаВзносовВПФРиФСС.ПФРСвыше300тр < НачисленоСНачалаГода, 0, СтруктураРасчетаВзносовВПФРиФСС.ПФРСвыше300тр - НачисленоСНачалаГода));
	
	ОтразитьЗначенияПоказателейОтчетности(СтруктураРасчетаВзносовВПФРиФСС);
	
	// запись состояние события календаря
	Если СобытиеКалендаря <> Неопределено Тогда
		
		КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Организация,
			СобытиеКалендаря,
			Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
			"",
			СтруктураРасчетаВзносовВПФРиФСС.ПФРСвыше300тр);
		
	КонецЕсли;
	
	
	ЗафиксироватьТранзакцию();
	
	Возврат СтруктураРасчетаВзносовВПФРиФСС;
	
КонецФункции   

Функция РассчитатьФиксированныеСтраховыеВзносы(Знач Период, Организация = Неопределено) Экспорт
	
	Перем ДатаИзменения;
	
	Период = КонецМесяца(Период); // Считаем взносы до конца месяца
	
	СтраховыеВзносы = Новый Структура;
	// Суммы взносов до конца текущего месяца.
	СтраховыеВзносы.Вставить("ПФР",        0);
	СтраховыеВзносы.Вставить("ФФОМС",      0);
	СтраховыеВзносы.Вставить("ФСС",        0);
	// Суммы взносов до конца года.
	СтраховыеВзносы.Вставить("ПФРВсего",   0);
	СтраховыеВзносы.Вставить("ФФОМСВсего", 0);
	СтраховыеВзносы.Вставить("ФССВсего",   0);
	
	// Расчет сумм взносов в фонды.
	Если ЗначениеЗаполнено(Организация) Тогда
		ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
		//УплачиваютсяДобровольныеВзносыВФСС = УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС(Организация, Период);
	Иначе
		ДатаРегистрации = '00010101';
		//УплачиваютсяДобровольныеВзносыВФСС = Ложь;
	КонецЕсли;
	
	// Страховые взносы за годы до даты регистрации рассчитывать не нужно.
	Если ЗначениеЗаполнено(ДатаРегистрации) И КонецГода(Период) < ДатаРегистрации Тогда
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	СуммаВзносаПФР = 0;
	СуммаВзносаФФОМС = 0;
	СуммаВзносаПФРВсего = 0;
	СуммаВзносаФФОМСВсего = 0;
	
	РазмерыСтраховыхВзносов = РазмерыСтраховыхВзносов(Период, Организация);
	МесячныйВзносПФР   = РазмерыСтраховыхВзносов.ПФР / 12;
	МесячныйВзносФФОМС = РазмерыСтраховыхВзносов.ФФОМС / 12;
	МесячныйВзносФСС   = РазмерыСтраховыхВзносов.ФСС / 12;
	
	ГодМесяцаРасчета = Год(Период);
	НомерМесяцаРасчета = Месяц(Период);
	
	ПервыйМесяц = ?(ЗначениеЗаполнено(ДатаРегистрации) И Год(ДатаРегистрации) = ГодМесяцаРасчета, Месяц(ДатаРегистрации), 1);
	
	ДатаНачалаРасчета = Дата(ГодМесяцаРасчета, ПервыйМесяц, 1);
	ДатаОкончанияРасчета = КонецГода(Период);
	
	Для НомерМесяца = ПервыйМесяц По 12 Цикл
		
		НачалоМесяца = Дата(ГодМесяцаРасчета, НомерМесяца, 1);
		КонецМесяца  = КонецМесяца(НачалоМесяца);
		ДнейВМесяце = День(КонецМесяца);
		
		Если ЗначениеЗаполнено(Организация) Тогда
			
			ПервыйДеньМесяца = НачалоМесяца;
			
		Иначе
			// Расчет за полный месяц
			ПервыйДеньМесяца = НачалоМесяца;
		КонецЕсли;
		
		ДнейУплатыВзносов = ДнейВМесяце - День(ПервыйДеньМесяца) + 1;
		
		// Сумма взносов за первый месяц деятельности
		СуммаВзносаПФРЗаМесяц   = МесячныйВзносПФР * ДнейУплатыВзносов/ДнейВМесяце;
		СуммаВзносаФФОМСЗаМесяц = МесячныйВзносФФОМС * ДнейУплатыВзносов/ДнейВМесяце;
		
		// Сумма взносов до конца года
		СуммаВзносаПФРВсего   = СуммаВзносаПФРВсего + СуммаВзносаПФРЗаМесяц;
		СуммаВзносаФФОМСВсего = СуммаВзносаФФОМСВсего + СуммаВзносаФФОМСЗаМесяц;
		
		Если НомерМесяца <= НомерМесяцаРасчета Тогда
			// Сумма взносов до конца текущего месяца
			СуммаВзносаПФР   = СуммаВзносаПФР + СуммаВзносаПФРЗаМесяц;
			СуммаВзносаФФОМС = СуммаВзносаФФОМС + СуммаВзносаФФОМСЗаМесяц;
		КонецЕсли;
		
	КонецЦикла;
	
	СтраховыеВзносы.ПФР        = Окр(СуммаВзносаПФР, 2, 1);
	СтраховыеВзносы.ФФОМС      = Окр(СуммаВзносаФФОМС, 2, 1);
	
	Возврат СтраховыеВзносы;
	
КонецФункции

Функция РазмерыСтраховыхВзносов(СтраховойПериод, Организация)
	
	СтраховыеВзносы = Новый Структура("ПФР, ФФОМС, ФСС, ПредельнаяСуммаВзноса", 0, 0, 0, 0);
	
	Если СтраховойПериод <  Дата(2014, 1, 1) Тогда
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ДеятельностьОтнесенаКПострадавшимОтКоронавируса = Организация.ПострадавшаяИзРеестраМСП;
	Иначе
		ДеятельностьОтнесенаКПострадавшимОтКоронавируса = Ложь;
	КонецЕсли;
	
	МРОТ = РегистрыСведений.МРОТ.МРОТНаДату(СтраховойПериод);
	
	ГодСтраховогоПериода = Год(СтраховойПериод);
	Если ГодСтраховогоПериода < 2018 Тогда
		СтраховыеВзносы.ПФР   = МРОТ * 12 * 26 / 100;
		СтраховыеВзносы.ФФОМС = МРОТ * 12 * 5.1 / 100;
	ИначеЕсли ГодСтраховогоПериода = 2018 Тогда
		СтраховыеВзносы.ПФР   = 26545;
		СтраховыеВзносы.ФФОМС = 5840;
	ИначеЕсли ГодСтраховогоПериода = 2019 Тогда
		СтраховыеВзносы.ПФР   = 29354;
		СтраховыеВзносы.ФФОМС = 6884;
	ИначеЕсли ГодСтраховогоПериода = Год(Дата(2020, 1, 1)) Тогда
		СтраховыеВзносы.ПФР   = ?(ДеятельностьОтнесенаКПострадавшимОтКоронавируса, 20318, 32448);
		СтраховыеВзносы.ПредельнаяСуммаВзноса = 32448 * 8;
		СтраховыеВзносы.ФФОМС = 8426;
	ИначеЕсли ГодСтраховогоПериода = 2020 Тогда
		СтраховыеВзносы.ПФР   = 32448;
		СтраховыеВзносы.ФФОМС = 8426;
	ИначеЕсли ГодСтраховогоПериода = 2021 Тогда
		СтраховыеВзносы.ПФР   = 32448;
		СтраховыеВзносы.ФФОМС = 8426;
	ИначеЕсли ГодСтраховогоПериода = 2022 Тогда
		СтраховыеВзносы.ПФР   = 34445;
		СтраховыеВзносы.ФФОМС = 8766;
	Иначе
		СтраховыеВзносы.ПФР   = 36723;
		СтраховыеВзносы.ФФОМС = 9119;
	КонецЕсли;
	
	Если СтраховыеВзносы.ПредельнаяСуммаВзноса = 0 Тогда
		СтраховыеВзносы.ПредельнаяСуммаВзноса = СтраховыеВзносы.ПФР * 8;
	КонецЕсли;
	
	Возврат СтраховыеВзносы;
	
КонецФункции

// Возвращает периодичность начисления страховых взносов в фиксированном размере
//
Функция ПериодичностьНачисления(Организация, Период, СистемаНалогообложения) Экспорт
	
	Если Период >= Дата(2016, 1, 1) Тогда
		
		ПрименяетсяУСНДоходыМинусРасходы = СистемаНалогообложения.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.ДоходыМинусРасходы;
		ПлательщикНДФЛ = Организация.ИПИспользуетТрудНаемныхРаботников И ПолучитьФункциональнуюОпцию("ВестиУчетНалогаНаДоходыИВзносов");
		
		Если ПрименяетсяУСНДоходыМинусРасходы
			Или (ПлательщикНДФЛ И Период >= Дата('20200101')) Тогда
			// Выполняем чаще для признания расходов и уменьшения авансового платежа
			Периодичность = Перечисления.Периодичность.Квартал;
		ИначеЕсли ПлательщикНДФЛ
			И СистемаНалогообложения.ПлательщикЕНВД
			И Период >= Дата('20170101') Тогда
			// Выполняем ежеквартально для разделения расходов между ОСНО и уменьшением ЕНВД
			Периодичность = Перечисления.Периодичность.Квартал;
		Иначе
			Периодичность = Перечисления.Периодичность.Год;
		КонецЕсли;
		
	Иначе
		
		Если ПлательщикНДФЛ Тогда
			Периодичность = Перечисления.Периодичность.Год;
		Иначе
			Периодичность = Перечисления.Периодичность.Квартал;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Периодичность;
	
КонецФункции


// Процедура формирует сведения о среднесписочной численности
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьСведенияОСреднесписочнойЧисленности(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураСведенияОССЧ = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ДокументОтчетности,
		|ДатаДокументаОбработкиСобытия,
		|ПараметрыФормыДокумента", 
		Организация,
		СобытиеКалендаря,
		Неопределено,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря, "ДатаДокументаОбработкиСобытия"));
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование сведений о среднесписочной численности невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СтруктураСведенияОССЧ.ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СтруктураСведенияОССЧ.ДокументОтчетности <> Неопределено Тогда
		СтруктураСведенияОССЧ.ПараметрыФормыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураСведенияОССЧ.ДокументОтчетности,
			"ДатаНачала,ДатаОкончания,Периодичность,ВыбраннаяФорма");
	КонецЕсли;
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		СобытиеКалендаря,
		Перечисления.СостоянияСобытийКалендаря.Отправить,
		"");
	
	Возврат СтруктураСведенияОССЧ;
	
КонецФункции

// Процедура формирует документы справки 2-НДФЛ для сотрудников по организации
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьСправки2НДФЛ(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование сведений о среднесписочной численности невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СформироватьСправкуНДФЛВНалоговыйОрган(Организация, СобытиеКалендаря);
	
	СтруктураСправки2НДФЛ = Новый Структура(
		"Организация,
		|Период", 
		Организация,
		КонецГода(ПериодРасчета));
	
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Организация,
			СобытиеКалендаря,
			Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
			"");
	
	
	Возврат СтруктураСправки2НДФЛ;
	
КонецФункции

// Процедура формирует декларацию по УСН
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьСправкуРСВ1(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураДекларацииПоРСВ = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ДокументОтчетности,
		|ДатаДокументаОбработкиСобытия,
		|ПараметрыФормыДокумента,
		|ОтчетныйПериод", 
		Организация,
		СобытиеКалендаря,
		Неопределено,
		ПериодРасчета,
		Неопределено,
		НачалоКвартала(ПериодРасчета));
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование декларации по УСН невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СтруктураДекларацииПоРСВ.ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СтруктураДекларацииПоРСВ.ДокументОтчетности <> Неопределено Тогда
		СтруктураДекларацииПоРСВ.ПараметрыФормыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураДекларацииПоРСВ.ДокументОтчетности,
			"ДатаНачала,ДатаОкончания,Периодичность,ВыбраннаяФорма");
			Если Год(ПериодРасчета)> 2012 И СтруктураДекларацииПоРСВ.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2012Кв1"
				Или Год(ПериодРасчета)> 2013 И СтруктураДекларацииПоРСВ.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2013Кв1"
				Или ПериодРасчета> Дата('20150331') И СтруктураДекларацииПоРСВ.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2014Кв1"
				Тогда
				// Форма документа отчетности не соответствует периоду формирования
				ДокументОбъект = СтруктураДекларацииПоРСВ.ДокументОтчетности.ПолучитьОбъект();
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
				ДокументОбъект.Записать();
				
				СтруктураДекларацииПоРСВ.ДокументОтчетности = Неопределено;
				СтруктураДекларацииПоРСВ.ПараметрыФормыДокумента = Неопределено;
			КонецЕсли;
		
	КонецЕсли;
		
	Возврат СтруктураДекларацииПоРСВ;
	
КонецФункции

// Процедура формирует записи по расчету торгового сбора
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция ВыполнитьРасчетТорговогоСбора(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураРасчетаТорговогоСбора = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ПериодОтчетности,
		|хзТаблицаТорговыхТочек,
		|ВидВзаиморасчетовСБюджетом,
		|СуммаВзаиморасчетовСБюджетом,
		|ДокументВзаиморасчетовСБюджетом",
		Организация,
		СобытиеКалендаря,
		ПериодРасчета,
		Неопределено,
		Справочники.ВидыНалогов.ТорговыйСбор,
		0,
		Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТорговыеТочки.КодИФНС,
	|	СУММА(ВЫБОР
	|			КОГДА ТорговыеТочки.ЛьготаПрименяется
	|				ТОГДА 0
	|			ИНАЧЕ ТорговыеТочки.ИсчисленнаяСумма
	|		КОНЕЦ) КАК СуммаВзаиморасчетов,
	|	СУММА(ТорговыеТочки.ИсчисленнаяСумма) КАК ИсчисленнаяСуммаБезЛьгот,
	|	ТорговыеТочки.КодПоОКТМО КАК КодПоОКТМО
	|ИЗ
	|	Справочник.ТорговыеТочки КАК ТорговыеТочки
	|ГДЕ
	|	ТорговыеТочки.Владелец = &Организация
	|	И ТорговыеТочки.ДатаНачалаОсуществленияДеятельности <= &ОкончаниеПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ТорговыеТочки.КодИФНС,
	|	ТорговыеТочки.КодПоОКТМО");
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ПоддержкаИП")
		И ПериодРасчета = Дата('20200630') Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТорговыеТочки.ЛьготаПрименяется", "Истина");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодРасчета));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ВременнаяТаблица = Запрос.Выполнить().Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("ДокументВзаиморасчетовСБюджетом",Новый ОписаниеТипов("ДокументСсылка.НачислениеНалогов"));
	ЗарегистрироватьВзаиморасчетыСБюджетомТорговыйСбор(ВременнаяТаблица,СтруктураРасчетаТорговогоСбора);
	
	СтруктураРасчетаТорговогоСбора.хзТаблицаТорговыхТочек = Новый ХранилищеЗначения(ВременнаяТаблица);
	
	СтруктураРасчетаТорговогоСбора.СуммаВзаиморасчетовСБюджетом = ВременнаяТаблица.Итог("СуммаВзаиморасчетов");
	
	НачатьТранзакцию();
	
	
	ОтразитьЗначенияПоказателейОтчетности(СтруктураРасчетаТорговогоСбора);
	
	// запись состояние события календаря
	Если СобытиеКалендаря <> Неопределено Тогда
		
		КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Организация,
			СобытиеКалендаря,
			Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
			"",
			СтруктураРасчетаТорговогоСбора.СуммаВзаиморасчетовСБюджетом);
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	СтруктураРасчетаТорговогоСбора.хзТаблицаТорговыхТочек = Неопределено;
	
	Возврат СтруктураРасчетаТорговогоСбора;
	
КонецФункции

// Процедура формирует форму №1-предприниматель
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьФорму1Предприниматель(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	
	СтруктураФорма1Предприниматель = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ДокументОтчетности,
		|ДатаДокументаОбработкиСобытия,
		|ПараметрыФормыДокумента",
		Организация,
		СобытиеКалендаря,
		Неопределено,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря, "ДатаДокументаОбработкиСобытия"));
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование формы №1-предприниматель невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СтруктураФорма1Предприниматель.ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СтруктураФорма1Предприниматель.ДокументОтчетности <> Неопределено Тогда
		СтруктураФорма1Предприниматель.ПараметрыФормыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураФорма1Предприниматель.ДокументОтчетности,
			"ДатаНачала,ДатаОкончания,Периодичность,ВыбраннаяФорма");
	КонецЕсли;
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		СобытиеКалендаря,
		Перечисления.СостоянияСобытийКалендаря.Отправить,
		"");
	
	Возврат СтруктураФорма1Предприниматель;
	
КонецФункции

// Процедура формирует форму 6-НДФЛ
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьФорму6НДФЛ(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураФормы6НДФЛ = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ДокументОтчетности,
		|ДатаДокументаОбработкиСобытия,
		|ПараметрыФормыДокумента", 
		Организация,
		СобытиеКалендаря,
		Неопределено,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря, "ДатаДокументаОбработкиСобытия"));
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование формы 6-НДФЛ невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СтруктураФормы6НДФЛ.ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СтруктураФормы6НДФЛ.ДокументОтчетности <> Неопределено Тогда
		СтруктураФормы6НДФЛ.ПараметрыФормыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураФормы6НДФЛ.ДокументОтчетности,
			"ДатаНачала,ДатаОкончания,Периодичность,ВыбраннаяФорма");
		Если (ПериодРасчета >= '20171231') И (РегламентированнаяОтчетностьКлиентСерверПереопределяемый.ДатаДействияПриказа6НДФЛЗа2017год() <= ТекущаяДата()) И (СтруктураФормы6НДФЛ.ПараметрыФормыДокумента.ВыбраннаяФорма = "ФормаОтчета2016Кв1") Тогда
			// Форма документа отчетности не соответствует периоду формирования
			ДокументОбъект = СтруктураФормы6НДФЛ.ДокументОтчетности.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			ДокументОбъект.Записать();
			
			СтруктураФормы6НДФЛ.ДокументОтчетности = Неопределено;
			СтруктураФормы6НДФЛ.ПараметрыФормыДокумента = Неопределено;
		КонецЕсли;
	КонецЕсли;

	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		СобытиеКалендаря,
		Перечисления.СостоянияСобытийКалендаря.Отправить,
		"");
	
	Возврат СтруктураФормы6НДФЛ;
	
КонецФункции

// Процедура формирует декларацию 12
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьДекларацию12(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураДекларация12 = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ДокументОтчетности,
		|ДатаДокументаОбработкиСобытия,
		|ПараметрыФормыДокумента", 
		Организация,
		СобытиеКалендаря,
		Неопределено,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря, "ДатаДокументаОбработкиСобытия"));
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование декларация об объеме розничной продажи пива и пивных напитков (Приложение №12) невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СтруктураДекларация12.ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СтруктураДекларация12.ДокументОтчетности <> Неопределено Тогда
		СтруктураДекларация12.ПараметрыФормыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураДекларация12.ДокументОтчетности,
			"ДатаНачала,ДатаОкончания,Периодичность,ВыбраннаяФорма");
	КонецЕсли;

	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		СобытиеКалендаря,
		Перечисления.СостоянияСобытийКалендаря.Отправить,
		"");
	
	Возврат СтруктураДекларация12;
	
КонецФункции

// Процедура формирует декларацию 8
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьДекларацию8(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураДекларация8 = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ДокументОтчетности,
		|ДатаДокументаОбработкиСобытия,
		|ПараметрыФормыДокумента", 
		Организация,
		СобытиеКалендаря,
		Неопределено,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря, "ДатаДокументаОбработкиСобытия"));
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование декларация об объеме розничной продажи пива и пивных напитков (Приложение №8) невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СтруктураДекларация8.ДокументОтчетности = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СтруктураДекларация8.ДокументОтчетности <> Неопределено Тогда
		СтруктураДекларация8.ПараметрыФормыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураДекларация8.ДокументОтчетности,
			"ДатаНачала,ДатаОкончания,Периодичность,ВыбраннаяФорма");
	КонецЕсли;

	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		СобытиеКалендаря,
		Перечисления.СостоянияСобытийКалендаря.Отправить,
		"");
	
	Возврат СтруктураДекларация8;
	
КонецФункции


// Процедура формирует сведения о застрахованных лицах по организации
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьСЗВМ(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование сведений о застрахованных лицах (СЗВ-М) невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СформироватьСведенияОЗастрахованныхЛицахСЗВ_М(Организация, СобытиеКалендаря);
	
	СтруктураСобытия = Новый Структура(
		"Организация,
		|Период", 
		Организация,
		КонецГода(ПериодРасчета));
	
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Организация,
			СобытиеКалендаря,
			Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
			"");
	
	
	Возврат СтруктураСобытия;
	
КонецФункции

// Процедура формирует СЗВ-Стаж по организации
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция СформироватьСЗВСтаж(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	Если СобытиеКалендаря = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Формирование сведений о застрахованных лицах (СЗВ-Стаж) невозможно без соответствующего события календаря'");
	КонецЕсли;
	
	СформироватьСведенияОЗастрахованныхЛицахСЗВСтаж(Организация, СобытиеКалендаря);
	
	СтруктураСобытия = Новый Структура(
		"Организация,
		|Период", 
		Организация,
		КонецГода(ПериодРасчета));
	
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Организация,
			СобытиеКалендаря,
			Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
			"");
	
	
	Возврат СтруктураСобытия;
	
КонецФункции


Процедура ЗарегистрироватьВзаиморасчетыСБюджетомТорговыйСбор(ТаблицаПоТорговомуСбору, СтруктураРасчетаТорговогоСбора)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВзаиморасчетыСБюджетом.Ссылка,
	|	ВзаиморасчетыСБюджетом.КодИФНС КАК КодИФНС,
	|	ВзаиморасчетыСБюджетом.КодПоОКАТО КАК КодПоОКТМО,
	|	ВзаиморасчетыСБюджетом.Сумма КАК СуммаВзаиморасчетов
	|ИЗ
	|	Документ.НачислениеНалогов.Налоги КАК ВзаиморасчетыСБюджетом
	|ГДЕ
	|	ВзаиморасчетыСБюджетом.Ссылка.Организация = &Организация
	|	И ВзаиморасчетыСБюджетом.ВидНалога = &ВидВзаиморасчетов
	|	И ВзаиморасчетыСБюджетом.Ссылка.Дата = &ПериодВзаиморасчетов
	|	И НЕ ВзаиморасчетыСБюджетом.Ссылка.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Организация", СтруктураРасчетаТорговогоСбора.Организация);
	Запрос.УстановитьПараметр("ВидВзаиморасчетов", СтруктураРасчетаТорговогоСбора.ВидВзаиморасчетовСБюджетом);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов", КонецДня(СтруктураРасчетаТорговогоСбора.ПериодОтчетности));
	
	ТаблицаВзаиморасчетов = Запрос.Выполнить().Выгрузить();
	
	// найдем все самые подходящие и заполним их в таблице по торговорму сбору
	Для Каждого Строка Из ТаблицаПоТорговомуСбору Цикл
		
		Найденные = ТаблицаВзаиморасчетов.НайтиСтроки(
			Новый Структура("КодПоОКТМО,КодИФНС,СуммаВзаиморасчетов",
			Строка.КодПоОКТМО,
			Строка.КодИФНС,
			Строка.СуммаВзаиморасчетов));
		
		// больше одной по логике ОП не должно находиться
		Если Найденные.Количество() > 0 Тогда
			
			Строка.ДокументВзаиморасчетовСБюджетом = Найденные[0].Ссылка;
			
		КонецЕсли;
		
		Если Найденные.Количество() > 1 Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru='ЕНВД.Внутренняя логика'"),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				НСтр("ru='Нарушение логики работы алгоритма поиска документов взаиморасчетов по ЕНВД'"));
		КонецЕсли;
		
		// удалим из обработки найденные
		Для Каждого СтрокаКУдалению Из Найденные Цикл
			ТаблицаВзаиморасчетов.Удалить(ТаблицаВзаиморасчетов.Индекс(СтрокаКУдалению));
		КонецЦикла;
		
	КонецЦикла;
	
	// найдем близко  подходящие и заполним их в таблице 
	Для Каждого Строка Из ТаблицаПоТорговомуСбору Цикл
		
		// пропускаем заполненные
		Если НЕ Строка.ДокументВзаиморасчетовСБюджетом.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Найденные = ТаблицаВзаиморасчетов.НайтиСтроки(
			Новый Структура("КодПоОКТМО,КодИФНС",
			Строка.КодПоОКТМО,
			Строка.КодИФНС));
		
		// больше одной по логике ОП не должно находиться
		Если Найденные.Количество() > 0 Тогда
			
			Объект = Найденные[0].Ссылка.ПолучитьОбъект();
			
			СтрокаСНалогом = Объект.Налоги.Найти(СтруктураРасчетаТорговогоСбора.ВидВзаиморасчетовСБюджетом, "ВидНалога");
			СтрокаСНалогом.Сумма = Строка.СуммаВзаиморасчетов;
			
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			
			Строка.ДокументВзаиморасчетовСБюджетом = Объект.Ссылка;
			
			// удалим из обработки найденные
			ТаблицаВзаиморасчетов.Удалить(ТаблицаВзаиморасчетов.Индекс(Найденные[0]));
			
		КонецЕсли;
		
	КонецЦикла;
	
	// пометим на удаление те взаиморасчеты, которые не подошли
	Для Каждого Строка Из ТаблицаВзаиморасчетов Цикл
		Объект = Строка.Ссылка.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(Истина);
		Объект.Записать();
	КонецЦикла;
	
	
	// Создадим новые взаиморасчет
	Найденные = ТаблицаПоТорговомуСбору.НайтиСтроки(Новый Структура("ДокументВзаиморасчетовСБюджетом", Документы.НачислениеНалогов.ПустаяСсылка()));
	ДатаОкончанияСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРасчетаТорговогоСбора.СобытиеКалендаря, "ДатаОкончанияСобытия");
	
	Для Каждого Строка Из Найденные Цикл
		
		Объект = Документы.НачислениеНалогов.СоздатьДокумент();
		Объект.Организация = СтруктураРасчетаТорговогоСбора.Организация;
		Объект.Дата = КонецДня(СтруктураРасчетаТорговогоСбора.ПериодОтчетности);
		Объект.СуммаДокумента = Строка.СуммаВзаиморасчетов;
		Объект.ВидОперации = Перечисления.ВидыОперацийНачислениеНалогов.Начисление;
		
		
		НовСтр = Объект.Налоги.Добавить();
		НовСтр.ВидНалога = СтруктураРасчетаТорговогоСбора.ВидВзаиморасчетовСБюджетом;
		НовСтр.СрокУплаты = ДатаОкончанияСобытия;
		НовСтр.КодИФНС = Строка.КодИФНС;
		НовСтр.КодПоОКАТО = Строка.КодПоОКТМО;
		НовСтр.Сумма = Строка.СуммаВзаиморасчетов;
		НовСтр.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
		
		Объект.Записать(РежимЗаписиДокумента.Проведение);
		
		Строка.ДокументВзаиморасчетовСБюджетом = Объект.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

// Процедура регистрирует документ обязательств перед бюджетом
//
Процедура ЗарегистрироватьВзаиморасчетыСБюджетом(СтруктураРасчета, Сумма = Неопределено) Экспорт
	
	ДокументВзаиморасчетов = ПолучитьДокументВзаиморасчетовСБюджетом(
		СтруктураРасчета.Организация,
		СтруктураРасчета.ВидВзаиморасчетовСБюджетом,
		СтруктураРасчета.ПериодОтчетности,
		?(СтруктураРасчета.СобытиеКалендаря = Неопределено,
			СтруктураРасчета.ПериодОтчетности,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРасчета.СобытиеКалендаря,"ДатаОкончанияСобытия")));
	
	СтрокаСНалогом = ДокументВзаиморасчетов.Налоги.Найти(СтруктураРасчета.ВидВзаиморасчетовСБюджетом, "ВидНалога");
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	
	Если УчетВалютныхОпераций 
		И ВалютаУчета <> НациональнаяВалюта Тогда
		ПоследнийКурс = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(КонецДня(СтруктураРасчета.ПериодОтчетности),Новый Структура("Валюта", ВалютаУчета));
		Если ЗначениеЗаполнено(ПоследнийКурс.Курс) И ПоследнийКурс.Курс > 0 Тогда
			СтрокаСНалогом.Сумма = ?(Сумма = Неопределено, СтруктураРасчета.СуммаВзаиморасчетовСБюджетом, Сумма)/ПоследнийКурс.Курс;
		Иначе
			СтрокаСНалогом.Сумма = ?(Сумма = Неопределено, СтруктураРасчета.СуммаВзаиморасчетовСБюджетом, Сумма);
		КонецЕсли;
	Иначе
		СтрокаСНалогом.Сумма = ?(Сумма = Неопределено, СтруктураРасчета.СуммаВзаиморасчетовСБюджетом, Сумма);
	КонецЕсли;
	
	Попытка
		ДокументВзаиморасчетов.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ВызватьИсключение НСтр("ru = 'Не удалось выполнить задачу. Убедитесь, что дата
									|запрета изменения данных меньше, чем "+Формат(СтруктураРасчета.ПериодОтчетности,"ДЛФ=D")+"'");
	КонецПопытки;
	
	СтруктураРасчета.ДокументВзаиморасчетовСБюджетом = ДокументВзаиморасчетов.Ссылка;
	
КонецПроцедуры

// Функция возвращает актуальный документ взаиморасчетов с бюджетом
//
Функция ПолучитьДокументВзаиморасчетовСБюджетом(Организация,ВидВзаиморасчетов,ПериодОтчетности, СрокУплаты, ВозвращатьСсылку = Ложь) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеНалоговНалоги.Ссылка КАК ДокументВзаиморасчетов
	|ИЗ
	|	Документ.НачислениеНалогов.Налоги КАК НачислениеНалоговНалоги
	|ГДЕ
	|	НачислениеНалоговНалоги.Ссылка.Организация = &Организация
	|	И НачислениеНалоговНалоги.ВидНалога = &ВидВзаиморасчетов
	|	И НачислениеНалоговНалоги.Ссылка.Дата = &Дата
	|	И НачислениеНалоговНалоги.НомерСтроки = 1
	|	И НЕ НачислениеНалоговНалоги.Ссылка.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидВзаиморасчетов", ВидВзаиморасчетов);
	Запрос.УстановитьПараметр("Дата",КонецДня(ПериодОтчетности));
	
	ДокументВзаиморасчетов = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ВозвращатьСсылку Тогда
			ДокументВзаиморасчетов = Выборка.ДокументВзаиморасчетов;
		Иначе
			ДокументВзаиморасчетов = Выборка.ДокументВзаиморасчетов.ПолучитьОбъект();
		КонецЕсли;
		
	Иначе
		
		ДокументВзаиморасчетов = Документы.НачислениеНалогов.СоздатьДокумент();
		ДокументВзаиморасчетов.Организация = Организация;
		ДокументВзаиморасчетов.Дата = КонецДня(ПериодОтчетности);
		ДокументВзаиморасчетов.ВидОперации = Перечисления.ВидыОперацийНачислениеНалогов.Начисление;
		СтрокаСНалогом = ДокументВзаиморасчетов.Налоги.Добавить();
		
		СтрокаСНалогом.ВидНалога = ВидВзаиморасчетов;
		СтрокаСНалогом.СрокУплаты = СрокУплаты;
		СтрокаСНалогом.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
		
		Если ВозвращатьСсылку Тогда
			
			ДокументВзаиморасчетов.Записать(РежимЗаписиДокумента.Проведение);
			ДокументВзаиморасчетов = ДокументВзаиморасчетов.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат ДокументВзаиморасчетов;
	
КонецФункции

// Функция получает значение произвольного показателя из регистра Значения показателей отчетности
// так как зачастую там хранится хранилище значений, поэтому трубется получать отдельно
//
Функция ПолучитьЗначениеПроизвольногоПоказателя(Организация,ПериодОтчетности,ПоказательОтчетности) Экспорт
	
	мз = РегистрыСведений.ЗначенияПоказателейОтчетности.СоздатьМенеджерЗаписи();
	мз.Организация = Организация;
	мз.ПериодОтчетности = ПериодОтчетности;
	мз.ПоказательОтчетности = ПоказательОтчетности;
	
	мз.Прочитать();
	
	Если мз.Выбран() Тогда
		Возврат мз.ПроизвольноеЗначениеПоказателя;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура по событию календаря отчетности возвращает документ СправкиНДФЛДляПередачиВНалоговыйОрган
// которые содержит результат формирования отчетности.
//
// В случае, если документ отчета не найден, то возвращается неопределено
//
// Возвращает:
// документ СправкиНДФЛДляПередачиВНалоговыйОрган
//
Функция ПолучитьСправку2НДФЛВНалоговыйОрганПоСобытиюКалендаря(Организация, СобытиеКалендаря) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган КАК СправкиНДФЛДляПередачиВНалоговыйОрган
	|ГДЕ
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.НалоговыйПериод = &ГодОтчетности
	|	И СправкиНДФЛДляПередачиВНалоговыйОрган.Организация = &Организация
	|	И НЕ СправкиНДФЛДляПередачиВНалоговыйОрган.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГодОтчетности", Год(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия")));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура СформироватьСправкуНДФЛВНалоговыйОрган(Организация, СобытиеКалендаря)
	
	СправкаНДФЛ = ПолучитьСправку2НДФЛВНалоговыйОрганПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СправкаНДФЛ = Неопределено Тогда
		
		// Создаем справку по организации
		докСправка = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.СоздатьДокумент();
		докСправка.Организация = Организация;
		докСправка.НалоговыйПериод = Год(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия"));
		СправкаНДФЛ = докСправка.ПолучитьСсылкуНового();
	Иначе
		докСправка = СправкаНДФЛ.ПолучитьОбъект();
	КонецЕсли;
	
	// Заполняем данными по сотрудникам
	докСправка.Дата = ТекущаяДатаСеанса();
	докСправка.ПринятоНалоговымОрганом = Ложь;
	докСправка.ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность;
	докСправка.РегистрацияВНалоговомОргане = ПолучитьРегистрациюВИФНС(Организация);
	ЗапросПоОрганизации = Новый Запрос;
	ЗапросПоОрганизации.Текст =
	"ВЫБРАТЬ
	|	Организации.ИНН,
	|	Организации.КПП,
	|	Организации.КодПоОКАТО,
	|	Организации.КодНалоговогоОрганаПолучателя,
	|	Организации.КодНалоговогоОрганаПолучателя КАК КодИФНСПолучателя,
	|	ЕСТЬNULL(ОрганизацияТелефон.Представление, """""""") КАК ТелефонОрганизации,
	|	Организации.ЮридическоеФизическоеЛицо
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацияТелефон
	|		ПО Организации.Ссылка = ОрганизацияТелефон.Ссылка
	|			И (ОрганизацияТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации))
	|ГДЕ
	|	Организации.Ссылка = &Ссылка";
	ЗапросПоОрганизации.УстановитьПараметр("Ссылка", Организация);
	Выборка = ЗапросПоОрганизации.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЭтоЮрЛицо = Выборка.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		докСправка.ИмяФайла = СправкиПоНДФЛ.ИмяФайлаОбмена(Выборка, докСправка.Дата, ЭтоЮрЛицо);
		докСправка.Телефон = Выборка.ТелефонОрганизации;
		ЗаполнитьЗначенияСвойств(докСправка, СправкиПоНДФЛ.ДанныеПодписывающихЛиц(Организация, докСправка.Дата));
		докСправка.ОКАТО_КПП = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Выборка.КодПоОКАТО, 11) + "/" + РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Выборка.КПП, 9);
	КонецЕсли;
	
	
	// Рассчитаем номер первой справки о доходах
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",докСправка.Дата);
	Запрос.УстановитьПараметр("НалоговыйПериод",докСправка.НалоговыйПериод);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки) КАК КоличествоСформированныхСправок
	|ИЗ
	|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.СотрудникиОрганизации КАК СведенияОДоходахФизлицРаботникиОрганизации
	|ГДЕ
	|	СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Дата < &ДатаДокумента
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Проведен
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Организация = &Организация
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.НалоговыйПериод = &НалоговыйПериод";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НомерПервойСправки = ?(Выборка.КоличествоСформированныхСправок = NULL, 0, Выборка.КоличествоСформированныхСправок) + 1;
	Иначе	
		НомерПервойСправки = 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",докСправка.Дата);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Ссылка",СправкаНДФЛ);
	Запрос.УстановитьПараметр("ГодНП",докСправка.НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецНП",КонецГода(Дата(докСправка.НалоговыйПериод,1,1)));
	Запрос.УстановитьПараметр("ДатаПодачиСведений", НачалоМесяца(докСправка.Дата));
	Запрос.УстановитьПараметр("ОКАТО_КПП", докСправка.ОКАТО_КПП);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДФЛСведенияОДоходах.Сотрудник КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13) КАК Ставка
	|ИЗ
	|	РегистрНакопления.НДФЛДоходы КАК НДФЛСведенияОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.СотрудникиОрганизации КАК СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации
	|		ПО НДФЛСведенияОДоходах.Сотрудник = СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Сотрудник
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Дата < &ДатаДокумента)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Проведен)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Организация = &Организация)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.НалоговыйПериод = &ГодНП)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.ОКАТО_КПП = &ОКАТО_КПП)
	|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка <> &Ссылка)
	|ГДЕ
	|	НДФЛСведенияОДоходах.Организация = &Организация
	|	И ГОД(НДФЛСведенияОДоходах.Период) = &ГодНП
	|	И НДФЛСведенияОДоходах.ПериодРегистрации < &ДатаПодачиСведений
	|	И СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Сотрудник ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДФЛСведенияОДоходах.Сотрудник.Наименование";
	
	СотрудникиОрганизации = докСправка.СотрудникиОрганизации;
	СотрудникиОрганизации.Загрузить(СправкиПоНДФЛ.ДанныеСотрудников(Запрос.Выполнить().Выгрузить(), докСправка.Дата, докСправка.НалоговыйПериод));
	Для Каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
		СтрокаТЧ.НомерСправки = НомерПервойСправки + докСправка.СотрудникиОрганизации.Индекс(СтрокаТЧ)
	КонецЦикла;
	СтруктураДанных = СправкиПоНДФЛ.ДанныеОДоходах(СотрудникиОрганизации.Выгрузить(), докСправка.НалоговыйПериод, Организация, Организация, докСправка.ОКАТО_КПП, докСправка.Дата);
	докСправка.СведенияОДоходах.Загрузить(СтруктураДанных.Доходы);
	докСправка.СведенияОВычетах.Загрузить(СтруктураДанных.Вычеты);
	ТаблицаИтогов = СтруктураДанных.Итоги;
	Если докСправка.НалоговыйПериод < 2011 Тогда
		Для Каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ТаблицаИтогов.Найти(СтрокаТЧ.НомерСправки, "НомерСправки"),, "Ставка");
		КонецЦикла;
	Иначе
		докСправка.СуммыНалогов.Загрузить(ТаблицаИтогов);
		СтруктураПоиска = Новый Структура("НомерСправки");
		Для Каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
			СтрокиИтогов = ТаблицаИтогов.НайтиСтроки(СтруктураПоиска);
		КонецЦикла;
	КонецЕсли;
	докСправка.УведомленияНОоПравеНаВычеты.Загрузить(СтруктураДанных.Уведомления);
	
	докСправка.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

// Процедура по событию календаря отчетности возвращает документ СправкиНДФЛДляПередачиВНалоговыйОрган
// которые содержит результат формирования отчетности.
//
// В случае, если документ отчета не найден, то возвращается неопределено
//
// Возвращает:
// документ СправкиНДФЛДляПередачиВНалоговыйОрган
//
Функция ПолучитьСЗВМПоСобытиюКалендаря(Организация, СобытиеКалендаря) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СведенияОЗастрахованныхЛицахСЗВ_М КАК СведенияОЗастрахованныхЛицахСЗВ_М
	|ГДЕ
	|	СведенияОЗастрахованныхЛицахСЗВ_М.ОтчетныйПериод = &ОтчетныйПериод
	|	И СведенияОЗастрахованныхЛицахСЗВ_М.Организация = &Организация
	|	И НЕ СведенияОЗастрахованныхЛицахСЗВ_М.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтчетныйПериод", НачалоМесяца(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия")));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура СформироватьСведенияОЗастрахованныхЛицахСЗВ_М(Организация, СобытиеКалендаря)
	
	СЗВМ = ПолучитьСЗВМПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СЗВМ = Неопределено Тогда
		// Создаем СЗВ-М по организации
		докСЗВМ = Документы.СведенияОЗастрахованныхЛицахСЗВ_М.СоздатьДокумент();
		докСЗВМ.Организация = Организация;
		докСЗВМ.ОкончаниеОтчетногоПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия");
		докСЗВМ.ОтчетныйПериод = НачалоМесяца(докСЗВМ.ОкончаниеОтчетногоПериода);
		СЗВМ = докСЗВМ.ПолучитьСсылкуНового();
	Иначе
		докСЗВМ = СЗВМ.ПолучитьОбъект();
		докСЗВМ.ОкончаниеОтчетногоПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия");
		докСЗВМ.ОтчетныйПериод = НачалоМесяца(докСЗВМ.ОкончаниеОтчетногоПериода);
	КонецЕсли;
	докСЗВМ.Дата = ТекущаяДатаСеанса();
	докСЗВМ.УстановитьНовыйНомер();
	
	докСЗВМ.ТипФормы = Перечисления.ТипыСведенийСЗВ_М.Исходная;
	докСЗВМ.ДокументПринятВПФР = Ложь;
	докСЗВМ.СформированАвтоматически = Истина;
	
	докСЗВМ.ИмяФайлаДляПФР = Документы.СведенияОЗастрахованныхЛицахСЗВ_М.ИмяФайла(докСЗВМ.Организация, докСЗВМ.Дата);
	ЗаполнитьЗначенияСвойств(докСЗВМ, СправкиПоНДФЛ.ДанныеПодписывающихЛиц(Организация, докСЗВМ.Дата));
	
	// Заполняем данными по сотрудникам
	ДанныеДляЗаполнения = Документы.СведенияОЗастрахованныхЛицахСЗВ_М.ДанныеДляЗаполнения(докСЗВМ);
	
	докСЗВМ.Сотрудники.Очистить();
	
	докСЗВМ.Сотрудники.Загрузить(ДанныеДляЗаполнения);
	
	докСЗВМ.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

// Процедура по событию календаря отчетности возвращает документ СЗВ-Стаж
// которые содержит результат формирования отчетности.
//
// В случае, если документ отчета не найден, то возвращается неопределено
//
// Возвращает:
// документ СправкиНДФЛДляПередачиВНалоговыйОрган
//
Функция ПолучитьСЗВСтажПоСобытиюКалендаря(Организация, СобытиеКалендаря) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ
	|ГДЕ
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ОкончаниеОтчетногоПериода = &ОтчетныйПериод
	|	И СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация = &Организация
	|	И НЕ СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура СформироватьСведенияОЗастрахованныхЛицахСЗВСтаж(Организация, СобытиеКалендаря)
	
	СЗВСтаж = ПолучитьСЗВСтажПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	Если СЗВСтаж = Неопределено Тогда
		// Создаем СЗВСтаж по организации
		докСЗВСтаж = Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.СоздатьДокумент();
		докСЗВСтаж.Организация = Организация;
		докСЗВСтаж.ОкончаниеОтчетногоПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия");
		докСЗВСтаж.ОтчетныйПериод = НачалоМесяца(докСЗВСтаж.ОкончаниеОтчетногоПериода);
		докСЗВСтаж.Год = Год(докСЗВСтаж.ОтчетныйПериод);
		СЗВСтаж = докСЗВСтаж.ПолучитьСсылкуНового();
	Иначе
		докСЗВСтаж = СЗВСтаж.ПолучитьОбъект();
		докСЗВСтаж.Год = Год(докСЗВСтаж.ОтчетныйПериод);
		докСЗВСтаж.ОкончаниеОтчетногоПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия");
		докСЗВСтаж.ОтчетныйПериод = НачалоМесяца(докСЗВСтаж.ОкончаниеОтчетногоПериода);
	КонецЕсли;
	докСЗВСтаж.Дата = ТекущаяДатаСеанса();
	докСЗВСтаж.УстановитьНовыйНомер();
	
	докСЗВСтаж.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.Исходная;
	докСЗВСтаж.ДокументПринятВПФР = Ложь;
	
	докСЗВСтаж.ИмяФайлаДляПФР = Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ИмяФайла(докСЗВСтаж.Организация, докСЗВСтаж.Дата);
	ЗаполнитьЗначенияСвойств(докСЗВСтаж, СправкиПоНДФЛ.ДанныеПодписывающихЛиц(Организация, докСЗВСтаж.Дата));
	
	// Заполняем данными по сотрудникам
	докСЗВСтаж.Сотрудники.Очистить();
	докСЗВСтаж.ЗаписиОСтаже.Очистить();
	докСЗВСтаж.ДосрочноеНазначениеПенсии.Очистить();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.СоздатьВТПерсональныеДанныеСотрудников(МенеджерВременныхТаблиц, докСЗВСтаж.Организация, докСЗВСтаж.Год);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПерсональныеДанные.Сотрудник КАК Сотрудник,
	|	ПерсональныеДанные.Фамилия КАК Фамилия,
	|	ПерсональныеДанные.Имя КАК Имя,
	|	ПерсональныеДанные.Отчество КАК Отчество,
	|	ПерсональныеДанные.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	ПерсональныеДанные.СотрудникУволен КАК СотрудникУволен
	|ИЗ
	|	ВТПерсональныеДанныеСотрудников КАК ПерсональныеДанные";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокСотрудников = Новый Массив;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = докСЗВСтаж.Сотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		СписокСотрудников.Добавить(Выборка.Сотрудник);
	КонецЦикла;
	Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ЗаполнитьДанныеОСтажеСотрудников(докСЗВСтаж, СписокСотрудников);
	
	докСЗВСтаж.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры



// Процедура по событию календаря отчетности возвращает элемент справочника КомплектыОтчетностиПерсучета
// которые содержит результат формирования отчетности.
//
// В случае, если элемент справочника не найден, то возвращается неопределено
//
// Возвращает:
// элемент справочника КомплектыОтчетностиПерсучета
//
Функция ПолучитьКомплектОтчетностиПерсучетаПоСобытиюКалендаря(Организация, СобытиеКалендаря) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КомплектыОтчетностиПерсучета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КомплектыОтчетностиПерсучета КАК КомплектыОтчетностиПерсучета
	|ГДЕ
	|	КомплектыОтчетностиПерсучета.ОтчетныйПериод = &ОтчетныйПериод
	|	И КомплектыОтчетностиПерсучета.Организация = &Организация
	|	И НЕ КомплектыОтчетностиПерсучета.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтчетныйПериод", НачалоКвартала(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия")));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	
КонецФункции


Процедура СформироватьКомплектОтчетностиВПФР(Организация, ДатаДокументаОбработкиСобытия, СобытиеКалендаря) Экспорт
	
	//////////////////////////////////////////////////////////////////////////
	// Создаем комплект отчетности для отправки
	// Получаем справку РСВ-1
	ПараметрыКомплекта =  СформироватьСправкуРСВ1(Организация,ДатаДокументаОбработкиСобытия, СобытиеКалендаря);
	
	Комплект = ПолучитьКомплектОтчетностиПерсучетаПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	
	РСВСсылка = ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	ЗаполнитьДанныеРСВ_1(ПараметрыКомплекта);
	
	Если Комплект = Неопределено Тогда
		Справочники.КомплектыОтчетностиПерсучета.НовыйКомплектСведений(Организация, ПараметрыКомплекта.ОтчетныйПериод, ПараметрыКомплекта.ДокументОтчетности, Истина);
	Иначе
		КомплектОбъект = Комплект.ПолучитьОбъект();
		Справочники.КомплектыОтчетностиПерсучета.ЗаполнитьКомплектСведений(КомплектОбъект, ПараметрыКомплекта.ДокументОтчетности, Ложь);
	КонецЕсли;
	
	// Определяем наличие сотрудников за отчетный период
	СтруктураОтчетностьВПФР = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ПериодОтчетности,
		|ИмеютсяСотрудникиВПФР",
		Организация,
		СобытиеКалендаря,
		ПараметрыКомплекта.ДатаДокументаОбработкиСобытия,
		Ложь);
	
	СтруктураОтчетностьВПФР.ИмеютсяСотрудникиВПФР = УчетСтраховыхВзносов.ОпределитьНаличиеСотрудниковПоСобытиюКалендаря(Организация, СобытиеКалендаря);
	ОтразитьЗначенияПоказателейОтчетности(СтруктураОтчетностьВПФР);
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		СобытиеКалендаря,
		Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
		"");
	
КонецПроцедуры

Процедура ЗаполнитьДанныеРСВ_1(ДанныеКомплекта)
	
	ОкончаниеОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ДанныеКомплекта.ОтчетныйПериод);
	
	
	Если ЗначениеЗаполнено(ДанныеКомплекта.ДокументОтчетности) Тогда
		
		ИнтерфейсыВзаимодействияБРО.ОбновитьДанныеРеглОтчета(
				"РегламентированныйОтчетРСВ1", 
				ДанныеКомплекта.Организация, 
				ДанныеКомплекта.ОтчетныйПериод,
				ОкончаниеОтчетногоПериода,
				ДанныеКомплекта.ДокументОтчетности);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеКомплекта.ДокументОтчетности) Тогда
		
		КорректирующаяФорма = Ложь;
		
		ДанныеКомплекта.ДокументОтчетности = ИнтерфейсыВзаимодействияБРО.СформироватьАвтоматическиРеглОтчет(
				"РегламентированныйОтчетРСВ1", 
				ДанныеКомплекта.Организация, 
				ДанныеКомплекта.ОтчетныйПериод,
				ОкончаниеОтчетногоПериода,
				КорректирующаяФорма);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С РЕГЛАМЕНТИРОВАННЫМИ ОТЧЕТАМИ

// Процедура по событию календаря отчетности возвращает ссылку на документ РегламентированныйОтчет
// которые содержит результат формирования отчетности.
//
// В случае, если документ отчета не найден, то возвращается неопределено
//
// Возвращает:
//		ДокументСсылка.РегламентированныйОтчет, Неопределено
//
Функция ПолучитьДокументРегламентированнойОтчетностиПоСобытиюКалендаря(Организация,СобытиеКалендаря) Экспорт
	
	СтруктураСобытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СобытиеКалендаря,"Задача,ДатаДокументаОбработкиСобытия");
	
	ИмяОтчета = РегламентированнаяОтчетностьУСНКлиентСервер.ПолучитьСоответствиеЗадачОтчетностиИменамОтчетов(СобытиеКалендаря.ДатаОкончанияДокументов)[СтруктураСобытия.Задача];
	
	Если ИмяОтчета = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не найдено соответствие задачи календаря регламентированному отчету'");
	КонецЕсли;
	
	ИмяОтчетаПоСобытию = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегламентированныйОтчет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.Организация = &Организация
	|	И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	|	И РегламентированныйОтчет.ДатаОкончания = &ДатаОкончания
	|	И (НЕ РегламентированныйОтчет.ПометкаУдаления)");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ИсточникОтчета", ИмяОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", СтруктураСобытия.ДатаДокументаОбработкиСобытия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Создает документ Расходный Кассовый ордер на Налоговую
//
Функция ЗарегистрироватьРасходыПоНалогамИВзносамНаличные(Организация,ДокументВзаиморасчетовСБюджетом, ДатаУплаты, ИскатьРанееСозданный = Истина, Сумма = Неопределено) Экспорт
	
	ДокументРасходов = Неопределено;
	ЭтоДокумент = ТипЗнч(ДокументВзаиморасчетовСБюджетом) = Тип("ДокументСсылка.НачислениеНалогов");
	
	Если ИскатьРанееСозданный Тогда
		Если ЭтоДокумент Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РасходДенежныхСредствИзКассы.Ссылка
			|ИЗ
			|	Документ.РасходИзКассы КАК РасходДенежныхСредствИзКассы
			|ГДЕ
			|	РасходДенежныхСредствИзКассы.ДокументОснование = &ДокументОснование
			|	И РасходДенежныхСредствИзКассы.Организация = &Организация
			|	И (НЕ РасходДенежныхСредствИзКассы.ПометкаУдаления)");
			
			Запрос.УстановитьПараметр("ДокументОснование", ДокументВзаиморасчетовСБюджетом);
			Запрос.УстановитьПараметр("Организация", Организация);
			
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РасходДенежныхСредствИзКассы.Ссылка
			|ИЗ
			|	Документ.РасходИзКассы КАК РасходДенежныхСредствИзКассы
			|ГДЕ
			|	РасходДенежныхСредствИзКассы.Организация = &Организация
			|	И РасходДенежныхСредствИзКассы.ВидНалога = &ВидНалога
			|	И РасходДенежныхСредствИзКассы.СрокУплаты = &СрокУплаты
			|	И (НЕ РасходДенежныхСредствИзКассы.ПометкаУдаления)");
			
			Запрос.УстановитьПараметр("ВидНалога", ДокументВзаиморасчетовСБюджетом.ВидНалога);
			Запрос.УстановитьПараметр("СрокУплаты", ДокументВзаиморасчетовСБюджетом.СрокУплаты);
			Запрос.УстановитьПараметр("Организация", Организация);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДокументРасходов = Выборка.Ссылка;
			ДокументРасходов = ДокументРасходов.ПолучитьОбъект();
			Если ДокументРасходов.ПометкаУдаления Тогда
				ДокументРасходов.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументРасходов = Неопределено Тогда
		ДокументРасходов = Документы.РасходИзКассы.СоздатьДокумент();
	КонецЕсли;
	
	
	ДокументРасходов.Дата = ДатаУплаты;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ДокументРасходов.Дата);
	Запрос.УстановитьПараметр("КонстантаНациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	Запрос.УстановитьПараметр("КонстантаВалютаУчета", Константы.ВалютаУчета.Получить());
	
	Если ЭтоДокумент Тогда
		Запрос.УстановитьПараметр("Ссылка", ДокументВзаиморасчетовСБюджетом);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&Ссылка) КАК Основание,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Налоги) КАК ВидОперации,
		|	&Ссылка КАК ДокументОснование,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.Прочее) КАК Статья,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Организация.КассаПоУмолчанию КАК Касса,
		|	&КонстантаНациональнаяВалюта КАК ВалютаДенежныхСредств,
		|	ТаблицаДокумента.Организация.ВидСтавкиНДСПоУмолчанию КАК ВидСтавкиНДСПоУмолчанию,
		|	1 КАК Курс,
		|	1 КАК Кратность,
		|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаДокумента * КурсыВалютУчета.Курс * 1 / (1 * ЕСТЬNULL(КурсыВалютУчета.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаДокумента,
		|	ТаблицаДокументаНалоги.ВидНалога КАК ВидНалога,
		|	ТаблицаДокументаНалоги.СрокУплаты КАК СрокУплаты,
		|	ТаблицаДокументаНалоги.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.НачислениеНалогов КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
		|			ТаблицаДокумента.Ссылка КАК Ссылка,
		|			ТаблицаДокумента.ВидНалога КАК ВидНалога,
		|			ТаблицаДокумента.СрокУплаты КАК СрокУплаты,
		|			ТаблицаДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности
		|		ИЗ
		|			Документ.НачислениеНалогов.Налоги КАК ТаблицаДокумента
		|		ГДЕ
		|			ТаблицаДокумента.Ссылка = &Ссылка) КАК ТаблицаДокументаНалоги
		|		ПО ТаблицаДокумента.Ссылка = ТаблицаДокументаНалоги.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &КонстантаВалютаУчета) КАК КурсыВалютУчета
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Налоги) КАК ВидОперации,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.Прочее) КАК Статья,
		|	Организации.Ссылка КАК Организация,
		|	Организации.КассаПоУмолчанию КАК Касса,
		|	&КонстантаНациональнаяВалюта КАК ВалютаДенежныхСредств,
		|	Организации.ВидСтавкиНДСПоУмолчанию КАК ВидСтавкиНДСПоУмолчанию,
		|	1 КАК Курс,
		|	1 КАК Кратность,
		|	ВЫРАЗИТЬ(&СуммаДокумента * КурсыВалютУчета.Курс * 1 / (1 * ЕСТЬNULL(КурсыВалютУчета.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаДокумента,
		|	&ВидНалога КАК ВидНалога,
		|	&СрокУплаты КАК СрокУплаты
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &КонстантаВалютаУчета) КАК КурсыВалютУчета
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Организации.Ссылка = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СуммаДокумента", ДокументВзаиморасчетовСБюджетом.СуммаДокумента);
		Запрос.УстановитьПараметр("ВидНалога", ДокументВзаиморасчетовСБюджетом.ВидНалога);
		Запрос.УстановитьПараметр("СрокУплаты", ДокументВзаиморасчетовСБюджетом.СрокУплаты);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДокументРасходов, Выборка);
		
		Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
			ДокументРасходов.Касса = Справочники.Кассы.ПолучитьКассуСУчетомПравДоступаНаУровнеЗаписей(Выборка.Касса);
		КонецЕсли;
	КонецЕсли;
	
	Если Сумма <> Неопределено Тогда
		ДокументРасходов.СуммаДокумента = Сумма;
	КонецЕсли;
	
	ДокументРасходов.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , ДокументРасходов.Дата);
	ДокументРасходов.РасшифровкаПлатежа.Очистить();
	ДокументРасходов.УчитыватьВНУ = Истина;
	
	
	ДокументРасходов.Записать(РежимЗаписиДокумента.Проведение);
	
	ИсторияРаботыПользователя.Добавить(ДокументРасходов.Ссылка);
	
	Возврат ДокументРасходов.Ссылка;
	
КонецФункции

// Функция создает платежное поручение исходящие на основании
// данных, где 
// ДанныеДокумента - Структура со следующими параметрами:
// - Организация;
// - ВидНалога;
// - Период
// - СуммаДокумента;
// - СрокУплаты;
// - КодОКТМОДокумента;
// - КодИФНСДокумента;
Функция СоздатьБезналичноеСписание(ДанныеДокумента, БанкСчет) Экспорт
	
	ДокументОбъект = Документы.ПлатежноеПоручение.СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("КонстантаНациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	Запрос.УстановитьПараметр("КонстантаВалютаУчета", Константы.ВалютаУчета.Получить());
	
	Запрос.УстановитьПараметр("Организация", ДанныеДокумента.Организация);
	Запрос.УстановитьПараметр("ВидНалога", ДанныеДокумента.ВидНалога);
	Запрос.УстановитьПараметр("СуммаДокумента", ДанныеДокумента.СуммаДокумента);
	Запрос.УстановитьПараметр("СрокУплаты", ДанныеДокумента.СрокУплаты);
	Запрос.УстановитьПараметр("КодОКТМОДокумента", ДанныеДокумента.КодОКТМОДокумента);
	Запрос.УстановитьПараметр("КодИФНСДокумента", ДанныеДокумента.КодИФНСДокумента);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога) КАК ВидОперации,
	|	Организации.Ссылка КАК Организация,
	|	Организации.КодПоОКАТО,
	|	Организации.КодПоОКТМО,
	|	Организации.КодНалоговогоОрганаПолучателя КАК КодНалоговогоОрганаПолучателя,
	|	Организации.КодОрганаПФР КАК КодОрганаПФР,
	|	Организации.КодОрганаФСС КАК КодОрганаФСС,
	|	Организации.РегистрационныйНомерПФР_ИП,
	|	Организации.РегистрационныйНомерПФР,
	|	Организации.РегистрационныйНомерФСС,
	|	Организации.ИННПлательщика,
	|	Организации.НаименованиеПлательщикаПриПеречисленииНалогов,
	|	ВЫБОР
	|		КОГДА Организации.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств = &КонстантаНациональнаяВалюта
	|			ТОГДА ВЫБОР
	|					КОГДА Организации.БанковскийСчетПоУмолчанию.ВариантУказанияКПП = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияКПП.ВоВсехПлатежныхПоручениях)
	|						ТОГДА Организации.КПП
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВложенныйЗапрос.БанковскийСчет.ВариантУказанияКПП = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияКПП.ВоВсехПлатежныхПоручениях)
	|					ТОГДА Организации.КПП
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК КПППлательщика,
	|	ВЫБОР
	|		КОГДА Организации.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств = &КонстантаНациональнаяВалюта
	|			ТОГДА Организации.БанковскийСчетПоУмолчанию
	|		ИНАЧЕ ВложенныйЗапрос.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|	&КонстантаНациональнаяВалюта КАК ВалютаДокумента,
	|	Организации.ВидСтавкиНДСПоУмолчанию КАК ВидСтавкиНДСПоУмолчанию,
	|	1 КАК Курс,
	|	1 КАК Кратность,
	|	ВЫРАЗИТЬ(&СуммаДокумента * КурсыВалютУчета.Курс * 1 / (1 * ЕСТЬNULL(КурсыВалютУчета.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаДокумента,
	|	&ВидНалога КАК ВидНалога,
	|	&КодОКТМОДокумента КАК КодОКТМОДокумента,
	|	&КодИФНСДокумента КАК КодИФНСДокумента,
	|	&СрокУплаты
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		Организации.Ссылка КАК Ссылка,
	|		Организации.КодПоОКАТО КАК КодПоОКАТО,
	|		Организации.КодПоОКТМО КАК КодПоОКТМО,
	|		Организации.КодНалоговогоОрганаПолучателя КАК КодНалоговогоОрганаПолучателя,
	|		Организации.КодОрганаПФР КАК КодОрганаПФР,
	|		Организации.КодОрганаФСС КАК КодОрганаФСС,
	|		Организации.РегистрационныйНомерПФР_ИП КАК РегистрационныйНомерПФР_ИП,
	|		Организации.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|		Организации.РегистрационныйНомерФСС КАК РегистрационныйНомерФСС,
	|		Организации.ИНН КАК ИННПлательщика,
	|		Организации.КПП КАК КПП,
	|		Организации.НаименованиеПлательщикаПриПеречисленииНалогов КАК НаименованиеПлательщикаПриПеречисленииНалогов,
	|		Организации.БанковскийСчетПоУмолчанию КАК БанковскийСчетПоУмолчанию,
	|		Организации.ВидСтавкиНДСПоУмолчанию КАК ВидСтавкиНДСПоУмолчанию
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	ГДЕ
	|		Организации.Ссылка = &Организация) КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &КонстантаВалютаУчета) КАК КурсыВалютУчета
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|			БанковскиеСчета.Владелец КАК Владелец,
	|			БанковскиеСчета.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|		ИЗ
	|			Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ГДЕ
	|			БанковскиеСчета.Владелец = &Организация
	|			И БанковскиеСчета.ВалютаДенежныхСредств = &КонстантаНациональнаяВалюта
	|			И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ) КАК ВложенныйЗапрос
	|		ПО Организации.Ссылка = ВложенныйЗапрос.Владелец";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
		ДокументОбъект.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Выборка.ВидСтавкиНДСПоУмолчанию, ДокументОбъект.Дата);
		
		Если Выборка.СрокУплаты <= ТекущаяДатаСеанса() Тогда
			ДокументОбъект.ПоказательОснования = "ЗД";
		КонецЕсли;
		
		ДокументОбъект.КодБК = ПолучитьКБКУплаты(ДокументОбъект.Организация, ДокументОбъект.Дата, Выборка.ВидНалога);
		
		ДокументОбъект.ПоказательПериода = ПолучитьПоказательПериода(, Выборка.ВидНалога, ДанныеДокумента.Период);
		
		Если Выборка.ВидНалога = Справочники.ВидыНалогов.ЕНВД Тогда
			ДокументОбъект.КодОКАТО = Выборка.КодОКТМОДокумента;
		Иначе
			Если Год(ДокументОбъект.Дата) > 2013 Тогда
				ДокументОбъект.КодОКАТО = Выборка.КодПоОКТМО;
			Иначе
				ДокументОбъект.КодОКАТО = Выборка.КодПоОКАТО;
			КонецЕсли;
		КонецЕсли;
		
		ВидГосОргана = Перечисления.ВидыГосударственныхОрганов.ПустаяСсылка();
		КодОргана = "";
		ДокументОбъект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		
		Если Выборка.ВидНалога = Справочники.ВидыНалогов.АвансовыйПлатежПриУСН
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ЕдиныйНалогПриУСН
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.НДФЛСотрудники 
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.НДФЛДоходыСвышеПредельнойВеличины Тогда
			
			ДокументОбъект.ПоказательТипа = "0";
			ДокументОбъект.СтатусСоставителя =   "01";
			
			ДокументОбъект.ОчередностьПлатежа = 5;
			ВидГосОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган;
			КодОргана = Выборка.КодНалоговогоОрганаПолучателя;
			
		ИначеЕсли Выборка.ВидНалога = Справочники.ВидыНалогов.ЕНВД Тогда
			
			ДокументОбъект.ПоказательТипа = "0";
			ДокументОбъект.СтатусСоставителя =   "01";
			
			ДокументОбъект.ОчередностьПлатежа = 5;
			ВидГосОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган;
			КодОргана = Выборка.КодИФНСДокумента;
			
		ИначеЕсли Выборка.ВидНалога = Справочники.ВидыНалогов.ФССТравматизмСотрудники Тогда
			ДокументОбъект.ПоказательТипа = "0";
			ДокументОбъект.СтатусСоставителя =   "08";
			ДокументОбъект.ПоказательОснования = "0";
			ДокументОбъект.ПоказательПериода =   "0";
			ДокументОбъект.ПоказательНомера =    "0";
			
			ДокументОбъект.ОчередностьПлатежа = 5;
			ВидГосОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС;
			КодОргана = Выборка.КодОрганаФСС;
			ДокументОбъект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
			
		ИначеЕсли Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРНакопительная
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРСвыше300тр
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховая
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ТФОМС
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ФФОМС
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ФОМССотрудники
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ФСССотрудники Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(ДокументОбъект.Организация) Тогда
				ДокументОбъект.СтатусСоставителя =   "01";
			Иначе
				ДокументОбъект.СтатусСоставителя =   "09";
			КонецЕсли;
			
			ДокументОбъект.ПоказательТипа = "0";
			
			ДокументОбъект.ОчередностьПлатежа = 5;
			ВидГосОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган;
			КодОргана = Выборка.КодНалоговогоОрганаПолучателя;
			
		КонецЕсли;
		ДокументОбъект.ИдентификаторПлатежа = "0";
		ДокументОбъект.ПоказательТипа = "0";
		
		Если Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРНакопительная
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховая
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ПФРСвыше300тр
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ТФОМС
			ИЛИ Выборка.ВидНалога = Справочники.ВидыНалогов.ФФОМС Тогда
			Назначение = РегламентированнаяОтчетностьУСНКлиентСервер.ПолучитьТекстНазначенияПлатежаНалогаПоДате(
				ДанныеДокумента.Период,
				Выборка.ВидНалога,
				Выборка.РегистрационныйНомерПФР_ИП);
		Иначе
			Назначение = РегламентированнаяОтчетностьУСНКлиентСервер.ПолучитьТекстНазначенияПлатежаНалогаПоДате(
				ДанныеДокумента.Период,
				Выборка.ВидНалога,
				Выборка.РегистрационныйНомерПФР,
				Выборка.РегистрационныйНомерФСС);
		КонецЕсли;
		ДокументОбъект.НазначениеПлатежа = Назначение;
		ДокументОбъект.ТекстПлательщика = Выборка.НаименованиеПлательщикаПриПеречисленииНалогов;
		
		Если ЗначениеЗаполнено(ВидГосОргана) Тогда
			ГосОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(ВидГосОргана, КодОргана);
			ДокументОбъект.Контрагент = ГосОрган.Ссылка;
			ДокументОбъект.ИННПолучателя = ГосОрган.ИНН;
			ДокументОбъект.КПППолучателя = ГосОрган.КПП;
			ДокументОбъект.ТекстПолучателя = ГосОрган.ПлатежныеРеквизиты.ПолучательПлатежа;
			ДокументОбъект.СчетКонтрагента = ГосОрган.ПлатежныеРеквизиты.БанковскийСчет;
		КонецЕсли;
		
		
	КонецЕсли;
	
	ДокументОбъект.БанковскийСчет = БанкСчет;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Процедура УстановитьДатуНачалаФормированияЗаписейКУДиР(ДатаГраницы) Экспорт
	
	Набор = РегистрыСведений.ДатыИзмененныхДокументов.СоздатьНаборЗаписей();
	НоваяСтрока = Набор.Добавить();
	НоваяСтрока.ДатаДокумента = ДатаГраницы;
	Набор.Записать(Истина);
	
КонецПроцедуры

// Процедура формирует записи по расходам на услуги
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодФормирования - Дата - дата окончания квартала, за который нужно провести формирования
//		Результат - Структура - структура результата
//
Процедура ВыполнитьФормированиеПоРасходамНаТовары(Организация, ПериодФормирования, Результат, МенеджерВТ)
	
	ДокументФормирования = Результат.ДокументФормирования;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Если Константы.ИспользоватьПоследовательностьПартийКУДиР.Получить() Тогда
		Запрос.Текст = ЗапросДляРасходовНаТоварыСПоследовательностьюПартий();
	Иначе
		Запрос.Текст = ЗапросДляРасходовНаТоварыБезПоследовательностиПартий();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(ПериодФормирования));
	Запрос.УстановитьПараметр("ОкончаниеПериода", ПериодФормирования);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.УстановитьПараметр("ПризнаныРасходыНаТовары", НСтр("ru='Признаны расходы на приобретение товаров'"));
	Запрос.УстановитьПараметр("РасходыУменьшенныеОтВозврата", НСтр("ru='Расходы уменьшены на сумму возвращенных покупателем товаров'"));
	
	Запрос.УстановитьПараметр("ПризнаныРасходыНаТоварыНДС", НСтр("ru='Признаны расходы на приобретение товаров (НДС)'"));
	Запрос.УстановитьПараметр("РасходыУменьшенныеОтВозвратаНДС", НСтр("ru='Расходы уменьшены на сумму возвращенных покупателем товаров (НДС)'"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если ДокументФормирования = Неопределено И РезультатЗапроса.Количество() > 0 Тогда
		ДокументФормирования = Документы.ЗаписиУСН.СоздатьДокумент();
		ДокументФормирования.Дата = ПериодФормирования;
		ДокументФормирования.Организация = Организация;
		ДокументФормирования.ВидЗаписей = Перечисления.ВидыЗаписейФормированийКУДиР.РасходыНаТовары;
	КонецЕсли;
	Если ДокументФормирования <> Неопределено Тогда
		
		ДокументФормирования.ЗаписиКУДиР.Загрузить(РезультатЗапроса);
		Для Каждого СтрокаКУДиР Из ДокументФормирования.ЗаписиКУДиР Цикл
			СтрокаКУДиР.НомерПервичногоДокумента =  ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаКУДиР.НомерПервичногоДокумента, Истина, Истина);
		КонецЦикла;
		
		
		Результат.ДополнительнаяИнформация = НСтр("ru='Сформировано записей: '") + Строка(ДокументФормирования.ЗаписиКУДиР.Количество());
		ДокументФормирования.Записать(РежимЗаписиДокумента.Проведение);
		Результат.ДокументФормирования = ДокументФормирования.Ссылка;
	КонецЕсли;
	
	Запрос.Текст = " 
	|УНИЧТОЖИТЬ ВтОплаченныеПартии;";
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура формирует записи по расходам на услуги
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодФормирования - Дата - дата окончания квартала, за который нужно провести формирования
//		Результат - Структура - структура результата
//
Процедура ВыполнитьФормированиеПоРасходамНаУслуги(Организация, ПериодФормирования, Результат, МенеджерВТ)
	
	ДокументФормирования = Результат.ДокументФормирования;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = ТекстЗапросаПоРасходамНаУслуги();
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(ПериодФормирования));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодФормирования));
	Запрос.УстановитьПараметр("ОблагаетсяНДС", Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	МассивИспользуемыхВидовРасходовИзКассы = Новый Массив;
	МассивИспользуемыхВидовРасходовИзКассы.Добавить(Перечисления.ВидыОперацийРасходИзКассы.Поставщику);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовРасходовИзКассы", МассивИспользуемыхВидовРасходовИзКассы);
	
	МассивИспользуемыхВидовРасходовСоСчета = Новый Массив;
	МассивИспользуемыхВидовРасходовСоСчета.Добавить(Перечисления.ВидыОперацийРасходСоСчета.Поставщику);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовРасходовСоСчета", МассивИспользуемыхВидовРасходовСоСчета);
	
	МассивИспользуемыхВидовПоступленийНаСчет = Новый Массив;
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовПоступленийНаСчет", МассивИспользуемыхВидовПоступленийНаСчет);
	
	МассивИспользуемыхВидовПоступленийВКассу = Новый Массив;
	МассивИспользуемыхВидовПоступленийВКассу.Добавить(Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовПоступленийВКассу", МассивИспользуемыхВидовПоступленийВКассу);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ИндексИтоговогоЗапроса = РезультатЗапроса.Количество() - 1;
	ВыборкаЗаписейУСН = РезультатЗапроса[ИндексИтоговогоЗапроса].Выбрать();
	
	Если ДокументФормирования = Неопределено И ВыборкаЗаписейУСН.Количество() > 0 Тогда
		ДокументФормирования = Документы.ЗаписиУСН.СоздатьДокумент();
		ДокументФормирования.Дата = ПериодФормирования;
		ДокументФормирования.Организация = Организация;
		ДокументФормирования.ВидЗаписей = Перечисления.ВидыЗаписейФормированийКУДиР.РасходыНаУслуги;
	КонецЕсли;
	
	Если ДокументФормирования <> Неопределено Тогда
		
		ДокументФормирования.ЗаписиКУДиР.Очистить();
		
		Пока ВыборкаЗаписейУСН.Следующий() Цикл
			НоваяСтрокаУСН = ДокументФормирования.ЗаписиКУДиР.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУСН, ВыборкаЗаписейУСН);
			Если НЕ ПустаяСтрока(ВыборкаЗаписейУСН.НомерВходящегоДокумента) Тогда
				НоваяСтрокаУСН.НомерПервичногоДокумента = ВыборкаЗаписейУСН.НомерВходящегоДокумента;
			КонецЕсли;
			НоваяСтрокаУСН.НомерПервичногоДокумента =  ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НоваяСтрокаУСН.НомерПервичногоДокумента, Истина, Истина);
			
			Если ТипЗнч(ВыборкаЗаписейУСН.ПервичныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") 
				Или Не ЗначениеЗаполнено(ВыборкаЗаписейУСН.ВидОперации) Тогда
				НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Расходы на оплату товаров, услуг из подотчетных денежных средств'"),
					?(ЗначениеЗаполнено(СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента)),СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента),СокрЛП(ВыборкаЗаписейУСН.Контрагент)));
			ИначеЕсли ТипЗнч(ВыборкаЗаписейУСН.ПервичныйДокумент) = Тип("ДокументСсылка.Взаимозачет") Тогда
				Если ВыборкаЗаписейУСН.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.Взаимозачет") Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Проведен взаимозачет между ""%1"" (дебитор) и ""%2"" (кредитор); по кредиторской задолженности. Признаны расходы на услуги сторонних организаций.'"),
						?(ЗначениеЗаполнено(СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагентаИсточника)), СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагентаИсточника), СокрЛП(ВыборкаЗаписейУСН.КонтрагентИсточник)),
						?(ЗначениеЗаполнено(СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента)), СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента), СокрЛП(ВыборкаЗаписейУСН.Контрагент)));
				КонецЕсли;
			Иначе
				Если ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Расход наличных денежных средств на оплату поставщику ""%1""'"),
					?(ЗначениеЗаполнено(СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента)),СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента),СокрЛП(ВыборкаЗаписейУСН.Контрагент)));
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Расход безналичных денежных средств на оплату поставщику ""%1""'"),
					?(ЗначениеЗаполнено(СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента)),СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента),СокрЛП(ВыборкаЗаписейУСН.Контрагент)));
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Расход безналичных денежных средств на оплату поставщику ""%1""'"),
					?(ЗначениеЗаполнено(СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента)),СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента),СокрЛП(ВыборкаЗаписейУСН.Контрагент)));
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Возврат наличных денежных средств от поставщика ""%1""'"),
					?(ЗначениеЗаполнено(СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента)),СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента),СокрЛП(ВыборкаЗаписейУСН.Контрагент)));
				ИначеЕсли ВыборкаЗаписейУСН.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика Тогда
					НоваяСтрокаУСН.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Возврат безналичных денежных средств от поставщика ""%1""'"),
					?(ЗначениеЗаполнено(СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента)),СокрЛП(ВыборкаЗаписейУСН.ЮридическоеНазваниеКонтрагента),СокрЛП(ВыборкаЗаписейУСН.Контрагент)));
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаЗаписейУСН.НазначениеПлатежа) Тогда
				НоваяСтрокаУСН.Содержание = НоваяСтрокаУСН.Содержание + ", " + Символы.ПС + СокрЛП(ВыборкаЗаписейУСН.НазначениеПлатежа);
			КонецЕсли;
			
			Если ВыборкаЗаписейУСН.СуммаНДС > 0 Тогда
				НоваяСтрокаУСННДС = ДокументФормирования.ЗаписиКУДиР.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаУСННДС, НоваяСтрокаУСН);
				НоваяСтрокаУСННДС.РасходБаза = ВыборкаЗаписейУСН.СуммаНДС;
				НоваяСтрокаУСННДС.РасходВсего = ВыборкаЗаписейУСН.СуммаНДС;
				НоваяСтрокаУСННДС.Содержание = НоваяСтрокаУСННДС.Содержание+ НСтр("ru = ' (НДС)'");
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.ДополнительнаяИнформация = НСтр("ru='Сформировано записей: '") + Строка(ДокументФормирования.ЗаписиКУДиР.Количество());
		ДокументФормирования.Записать(РежимЗаписиДокумента.Проведение);
		Результат.ДокументФормирования = ДокументФормирования.Ссылка;
	КонецЕсли;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТРасходИзКассы; 
	|УНИЧТОЖИТЬ ВТРасходСоСчета;
	|УНИЧТОЖИТЬ ВТПоступлениеНаСчет;
	|УНИЧТОЖИТЬ ВТПоступлениеВКассу;
	|УНИЧТОЖИТЬ ВТАвансовыйОтчет;
	|УНИЧТОЖИТЬ ВТВзаимозачет;
	|УНИЧТОЖИТЬ ВТВзаимозачетДаты;";
	Запрос.Выполнить();
	
КонецПроцедуры


// Готовит данные выбора для справочников - классификаторов, упорядочивает по коду.
//
Процедура ПодготовитьДанныеВыбораКлассификаторовСПорядкомКодов(ДанныеВыбора, Параметры, СтандартнаяОбработка, ПолноеИмяОбъектаМетаданных) Экспорт
	
	Запрос = Новый Запрос;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 51
		|	СписокСправочника.Ссылка,
		|	СписокСправочника.Код,
		|	СписокСправочника.Наименование КАК Наименование,
		|	ИСТИНА КАК НайденПоКоду
		|ПОМЕСТИТЬ ВТОтобранныеЭлементы
		|ИЗ
		|	&СписокСправочника КАК СписокСправочника
		|ГДЕ
		|	&ТекстУсловийОтбораПоКодам
		|	И СписокСправочника.Код <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 51
		|	СписокСправочника.Ссылка,
		|	ВЫБОР
		|		КОГДА СписокСправочника.Код = """"
		|			ТОГДА ""999999999""
		|		ИНАЧЕ СписокСправочника.Код
		|	КОНЕЦ,
		|	СписокСправочника.Наименование,
		|	ЛОЖЬ
		|ИЗ
		|	&СписокСправочника КАК СписокСправочника
		|ГДЕ
		|	&ТекстУсловийОтбораПоНаименованиям
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 51
		|	ОтобранныеЭлементы.Ссылка,
		|	ОтобранныеЭлементы.Код КАК Код,
		|	ОтобранныеЭлементы.Наименование КАК Наименование,
		|	МАКСИМУМ(ОтобранныеЭлементы.НайденПоКоду) КАК НайденПоКоду
		|ИЗ
		|	ВТОтобранныеЭлементы КАК ОтобранныеЭлементы
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтобранныеЭлементы.Ссылка,
		|	ОтобранныеЭлементы.Код,
		|	ОтобранныеЭлементы.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код,
		|	Наименование";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СписокСправочника", ПолноеИмяОбъектаМетаданных);
	
	УстановитьОтборВЗапросеПоПараметрам(Запрос, Параметры);
		
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		Если ДанныеВыбора.НайтиПоЗначению(Выборка.Ссылка) = Неопределено Тогда
			
			Если Выборка.НайденПоКоду Тогда
				Представление = СокрЛП(Выборка.Код) + " (" + Выборка.Наименование + ")";
			Иначе
				
				Представление = Выборка.Наименование;
				Если Не ПустаяСтрока(Выборка.Код) И Выборка.Код <> "999999999" Тогда
					Представление = Представление + " (" + СокрЛП(Выборка.Код) + ")";
				КонецЕсли;
				
			КонецЕсли;
			
			ДанныеВыбора.Добавить(Выборка.Ссылка, Представление);
			
		КонецЕсли;
		
	КонецЦикла;
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура УстановитьОтборВЗапросеПоПараметрам(Запрос, Параметры)
	
	ТекстУсловийОтбора = "";
	
	Если Параметры.Отбор.Количество() > 0 Тогда
		
		Для каждого ЭлементОтбора Из Параметры.Отбор Цикл
			
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("ФиксированныйМассив") Тогда
				
				УсловиеСПравымЗначением = " В (&Отбор" + ЭлементОтбора.Ключ + ")";
				
			Иначе
				
				УсловиеСПравымЗначением = " = (&Отбор" + ЭлементОтбора.Ключ + ")";
				
			КонецЕсли; 
			
			ТекстУсловийОтбора = ?(ПустаяСтрока(ТекстУсловийОтбора), "", ТекстУсловийОтбора + Символы.ПС + " И ")
				+ "СписокСправочника." + ЭлементОтбора.Ключ + УсловиеСПравымЗначением;
				
			Запрос.УстановитьПараметр("Отбор" + ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Параметры.СтрокаПоиска) Тогда
		
		ТекстУсловийОтбораПоКоду = "СписокСправочника.Код ПОДОБНО &СтрокаПоиска";
		ТекстУсловийОтбораПоНаименованию = "СписокСправочника.Наименование ПОДОБНО &СтрокаПоиска";
		
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		
	Иначе
		
		ТекстУсловийОтбораПоКоду = "(ИСТИНА)";
		ТекстУсловийОтбораПоНаименованию = "(ИСТИНА)";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстУсловийОтбора) Тогда
		
		ТекстУсловийОтбораПоКоду = ?(ПустаяСтрока(ТекстУсловийОтбораПоКоду), "", ТекстУсловийОтбораПоКоду + Символы.ПС + " И ") + ТекстУсловийОтбора;
		ТекстУсловийОтбораПоНаименованию = ?(ПустаяСтрока(ТекстУсловийОтбораПоНаименованию), "", ТекстУсловийОтбораПоНаименованию + Символы.ПС + " И ") + ТекстУсловийОтбора;
		
	КонецЕсли; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловийОтбораПоКодам", ТекстУсловийОтбораПоКоду);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловийОтбораПоНаименованиям", ТекстУсловийОтбораПоНаименованию);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТРАЖЕНИЯ РЕЗУЛЬТАТОВ РАСЧЕТОВ НАЛОГОВ

// Процедура производит запись данных в регистр ЗначенияПоказателейОтчетности
Процедура ОтразитьЗначенияПоказателейОтчетности(СтруктураПоказателей) Экспорт
	
	НачатьТранзакцию();
	
	ЗаписьРегистра = РегистрыСведений.ЗначенияПоказателейОтчетности.СоздатьМенеджерЗаписи();
	
	МассивИменПоказателей = Новый Массив;
	
	Для Каждого Показатель Из СтруктураПоказателей Цикл
		МассивИменПоказателей.Добавить(Показатель.Ключ);
	КонецЦикла;
	
	// ссылки показателей 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоказателиОтчетности.Ссылка КАК ПоказательОтчетности,
	|	ПоказателиОтчетности.Код КАК ПоказательОтчетностиСтрока
	|ИЗ
	|	ПланВидовХарактеристик.ПоказателиОтчетности КАК ПоказателиОтчетности
	|ГДЕ
	|	ПоказателиОтчетности.Код В(&Наименования)");
	Запрос.УстановитьПараметр("Наименования", МассивИменПоказателей);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		мзЗначенияПоказателей = РегистрыСведений.ЗначенияПоказателейОтчетности.СоздатьМенеджерЗаписи();
		мзЗначенияПоказателей.Организация = СтруктураПоказателей.Организация;
		мзЗначенияПоказателей.ПериодОтчетности = СтруктураПоказателей.ПериодОтчетности;
		мзЗначенияПоказателей.ПоказательОтчетности = Выборка.ПоказательОтчетности;
		
		Если Лев(Выборка.ПоказательОтчетностиСтрока, 2)="хз" Тогда
			мзЗначенияПоказателей.ПроизвольноеЗначениеПоказателя = СтруктураПоказателей[Выборка.ПоказательОтчетностиСтрока];
		Иначе
			мзЗначенияПоказателей.ЗначениеПоказателя = СтруктураПоказателей[Выборка.ПоказательОтчетностиСтрока];
		КонецЕсли;
		
		мзЗначенияПоказателей.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С СОБЫТИЯМИ

Функция ПолучитьТекущуюОрганизациюДляЦелейЗадачОтчетности() Экспорт
	Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = Справочники.Организации.ПредопределеннаяОрганизация();
	КонецЕсли;
	Возврат Организация; 
КонецФункции

Функция ПолучитьТекущиеДанныеСобытияПоЗадачеКалендаря(ЗадачаКалендаря, Организация = Неопределено) Экспорт
	
	СтруктураДанныхСобытия = Новый Структура("СобытиеКалендаря, СостояниеСобытия, Организация");
	СтруктураДанныхСобытия.Вставить("ЗадачаПрименима", Ложь);
	СтруктураДанныхСобытия.Вставить("ТолькоПросмотр", Не ПравоДоступа("Изменение",
		Метаданные.Справочники.ЗаписиКалендаряПодготовкиОтчетности));
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ПолучитьТекущуюОрганизациюДляЦелейЗадачОтчетности();
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Возврат СтруктураДанныхСобытия;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДанныхСобытия.Организация = Организация;
	
	ПрименяетсяДляООО = Ложь;
	ПрименяетсяДляИП = Ложь;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = 
		Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		
		ПрименяетсяДляООО = Истина;
	Иначе
		ПрименяетсяДляИП = Истина;
	КонецЕсли;
	
	СтруктураДанныхСобытия.ЗадачаПрименима = УстановитьПрименимостьЗадачиПоОрганизации(Организация,ЗадачаКалендаря);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КалендарьПодготовкиОтчетности.Ссылка КАК СобытиеКалендаря,
	|	ЗаписиКалендаряПодготовкиОтчетности.Состояние КАК СостояниеСобытия
	|ИЗ
	|	Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря КАК СобытиеКалендаря,
	|			МАКСИМУМ(ЗаписиКалендаряПодготовкиОтчетности.ДатаСменыСостояния) КАК ДатаСменыСостояния
	|		ИЗ
	|			Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|		ГДЕ
	|			ЗаписиКалендаряПодготовкиОтчетности.Организация = &Организация
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря) КАК ВложенныйЗапрос
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|			ПО ВложенныйЗапрос.СобытиеКалендаря = ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря
	|				И ВложенныйЗапрос.ДатаСменыСостояния = ЗаписиКалендаряПодготовкиОтчетности.ДатаСменыСостояния
	|		ПО КалендарьПодготовкиОтчетности.Ссылка = ВложенныйЗапрос.СобытиеКалендаря
	|ГДЕ
	|	КалендарьПодготовкиОтчетности.Задача = &Задача
	|	И КалендарьПодготовкиОтчетности.ДатаНачалаСобытия <= &ТекущаяДата
	|	И КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия >= &ТекущаяДата
	|	И ((КалендарьПодготовкиОтчетности.ПрименяетсяДляИП И &ПрименяетсяДляИП) 
	|		ИЛИ (КалендарьПодготовкиОтчетности.ПрименяетсяДляООО И &ПрименяетсяДляООО))");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Задача", ЗадачаКалендаря);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ПрименяетсяДляИП", ПрименяетсяДляИП);
	Запрос.УстановитьПараметр("ПрименяетсяДляООО", ПрименяетсяДляООО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанныхСобытия, Выборка);
	КонецЕсли;
	
	Возврат СтруктураДанныхСобытия;
	
КонецФункции

Функция УстановитьПрименимостьЗадачиПоОрганизации(Организация,ЗадачаКалендаря) Экспорт
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Срез = РегистрыСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(, Новый Структура("Организация", Организация));
	Если Срез.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Срез = Срез[0];
	
	Если ЗадачаКалендаря.ИмяПредопределенныхДанных = "ЕдиныйНалог" Тогда
		Возврат Срез.ПлательщикУСН;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "АвансовыйПлатежПоУСН" Тогда
		Возврат Срез.ПлательщикУСН;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "ДекларацияПоУСН" Тогда
		Возврат Срез.ПлательщикУСН;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "СтраховыеВзносыИП" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "НалогиСотрудников" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо 
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИПИспользуетТрудНаемныхРаботников");
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "ДекларацияПоЕНВД" Тогда
		Возврат Срез.ПлательщикЕНВД;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "ЕдиныйНалогЕНВД" Тогда
		Возврат Срез.ПлательщикЕНВД;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "СреднесписочнаяЧисленность" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо 
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИПИспользуетТрудНаемныхРаботников");
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "Справки2НДФЛ" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо 
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИПИспользуетТрудНаемныхРаботников");
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "ОтчетностьВПФР" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо 
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИПИспользуетТрудНаемныхРаботников");
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "Форма4ФСС" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо 
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИПИспользуетТрудНаемныхРаботников");
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "СтраховыеВзносыПриДоходахСвыше300тр" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных ="НалогПатент" Тогда
		Возврат Срез.ПрименяетсяПатент;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "ТорговыйСбор" Тогда
		Возврат Срез.ПлательщикТорговыйСбор;
	ИначеЕсли ЗадачаКалендаря.ИмяПредопределенныхДанных = "Декларация12" Тогда
		Возврат Срез.РозничнаяПродажаАлкоголя;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С СОБЫТИЯМИ

// Функция возвращает значения параметров учетной политики
// на дату среза
//
// Параметры:
//		Организация - СправочникСсылка.Организации - организация 
//			по которой необходимо получить параметры, если неопределено, то 
//			используется текущая организация
//
//		ДатаУчетнойПолитики - Дата- дата, на которую необходимо получить параметры 
//			учетной политики, если неопределено то используется текущая дата
//
// Возвращает:
//		Структура - значение параметров учетной политики в соответствии со срезом,
//			если параметры не заданы, то возвращается неопределено
//
Функция ПолучитьПараметрыУчетаОрганизации(Организация , ДатаУчетнойПолитики = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизацийСрезПоследних.ОбъектНалогообложения,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.СтавкаНалога
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", ?(ДатаУчетнойПолитики=Неопределено, ТекущаяДатаСеанса(), ДатаУчетнойПолитики));
	
	Результат = ЗАпрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыУчета = Новый Структура;
	
	Для Каждого ПараметрУчета Из Результат.Колонки Цикл
		ПараметрыУчета.Вставить(ПараметрУчета.Имя, Результат[0][ПараметрУчета.Имя]);
	КонецЦикла;
	
	Возврат ПараметрыУчета;
	
КонецФункции

// Функция выполняет формирование записей КУДиР по всем видам записей
//
// Параметры:
//		ДатаДокументаОбработкиСобытия - Дата - дата окончания квартала формирований
//
Процедура ВыполнитьФормированияВсехЗаписейКУДИР(ДатаДокументаОбработкиСобытия) Экспорт
	
	ДатаГраницыФормирования = ПолучитьДатуНачалаФормированияЗаписейКУДиР();
	
	// контроль, что уже все сформировано
	Если ДатаГраницыФормирования > ДатаДокументаОбработкиСобытия Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновитьДвиженияПоРегиструЗакупкиДляКУДиР(ДатаГраницыФормирования, ДатаДокументаОбработкиСобытия);
	
	ВыполнитьФормированияДвиженийПартионногоУчета(ДатаДокументаОбработкиСобытия);
	СформироватьЗаписиДляТаможенныхПлатежейУСН();
	
	// Получим список организаций
	//
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.ИспользуетсяОтчетность";
	
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать();
	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	
	// Формируем с начала квартала внесенных изменений
	// готовим массив обрабатываемых периодов
	ИтераторОбрабатываемыхПериодов = КонецКвартала(ДатаГраницыФормирования);
	
	Пока ИтераторОбрабатываемыхПериодов <= ДатаДокументаОбработкиСобытия Цикл
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТ, НачалоКвартала(ИтераторОбрабатываемыхПериодов), КонецДня(ИтераторОбрабатываемыхПериодов), НациональнаяВалюта, УчетВалютныхОпераций);
		ПолучитьВТЗакупкиПоставщиковДляКУДиР(МенеджерВТ, НачалоКвартала(ИтераторОбрабатываемыхПериодов), КонецДня(ИтераторОбрабатываемыхПериодов));
		
		ВыборкаОрганизаций.Сбросить();
		Пока ВыборкаОрганизаций.Следующий() Цикл
			ВыполнитьФормированияВсехЗаписейКУДИРЗаКвартал(
				ВыборкаОрганизаций.Ссылка,
				ИтераторОбрабатываемыхПериодов,
				МенеджерВТ);
			
		КонецЦикла;
		ИтераторОбрабатываемыхПериодов = КонецКвартала(ИтераторОбрабатываемыхПериодов+1);
	КонецЦикла;
	
	УстановитьДатуНачалаФормированияЗаписейКУДиР(ДатаДокументаОбработкиСобытия+1);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#Область ЗакупкиДляКУДиР

Процедура ОбновитьДвиженияПоРегиструЗакупкиДляКУДиР(ДатаГраницыФормирования, ДатаДокументаОбработкиСобытия)
	
	ИтераторОбрабатываемыхПериодов = КонецКвартала(ДатаГраницыФормирования);
	
	Пока ИтераторОбрабатываемыхПериодов <= ДатаДокументаОбработкиСобытия Цикл
		ДатаНачала = НачалоКвартала(ИтераторОбрабатываемыхПериодов);
		ДатаОкончания = КонецДня(ИтераторОбрабатываемыхПериодов);
		
		ВыборкаДокументов = ВыборкаДокументовДляОбновленияДвижений(ДатаНачала, ДатаОкончания);
		Пока ВыборкаДокументов.Следующий() Цикл
			ОбновитьДвиженияПоРегиструЗакупкиДляКУДиРДокумента(ВыборкаДокументов.Регистратор);
		КонецЦикла;
		
		ИтераторОбрабатываемыхПериодов = КонецКвартала(ИтераторОбрабатываемыхПериодов+1);
	КонецЦикла;
	
КонецПроцедуры

Функция ВыборкаДокументовДляОбновленияДвижений(ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходИзКассы.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.РасходИзКассы КАК РасходИзКассы
		|ГДЕ
		|	РасходИзКассы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И (РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Поставщику)
		|			ИЛИ РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации))
		|	И РасходИзКассы.Контрагент.ВестиРасчетыПоДокументам
		|	И РасходИзКассы.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|	И РасходИзКассы.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходСоСчета.Ссылка
		|ИЗ
		|	Документ.РасходСоСчета КАК РасходСоСчета
		|ГДЕ
		|	РасходСоСчета.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И (РасходСоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСоСчета.Поставщику)
		|			ИЛИ РасходСоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСоСчета.НашейОрганизации))
		|	И РасходСоСчета.Контрагент.ВестиРасчетыПоДокументам
		|	И РасходСоСчета.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|	И РасходСоСчета.Проведен";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

Процедура ОбновитьДвиженияПоРегиструЗакупкиДляКУДиРДокумента(СсылкаНаДокумент)
	
	СтруктураДополнительныеСвойства = ПодготовитьДанныеДляОбновленияЗакупокДляКУДиР(СсылкаНаДокумент);
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РасходСоСчета") Тогда
		Документы.РасходСоСчета.СформироватьТаблицаЗакупкиПоставщиковДляКУДиР(СсылкаНаДокумент, СтруктураДополнительныеСвойства);
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РасходИзКассы") Тогда
		Документы.РасходИзКассы.СформироватьТаблицаЗакупкиПоставщиковДляКУДиР(СсылкаНаДокумент, СтруктураДополнительныеСвойства);
	КонецЕсли;
	
	// Сформировать новые движения
	ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
	
	ДокументОбъект.Движения.ЗакупкиДляКУДиР.Записывать = Истина;
	ДокументОбъект.Движения.ЗакупкиДляКУДиР.Загрузить(СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗакупкиДляКУДиР);
	ДокументОбъект.Движения.ЗакупкиДляКУДиР.Записать();
	ДокументОбъект.Движения.ЗакупкиДляКУДиР.Записывать = Ложь;
	
КонецПроцедуры

Функция ПодготовитьДанныеДляОбновленияЗакупокДляКУДиР(СсылкаНаДокумент)
	
	СтруктураДополнительныеСвойства = Новый Структура();
	СтруктураДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура());
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура());
	СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	
	ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаДокумент, "Дата");
	
	СтруктураДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура());
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("Дата", ДатаДокумента);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МоментВремени", Новый МоментВремени(ДатаДокумента, СсылкаНаДокумент));

	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РасходСоСчета")
		Или ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РасходИзКассы") Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСПоставщиками.Период КАК Дата,
		|	РасчетыСПоставщиками.Договор.ВалютаРасчетов КАК Валюта,
		|	РасчетыСПоставщиками.НомерСтроки КАК НомерСтроки,
		|	РасчетыСПоставщиками.Документ КАК Документ,
		|	РасчетыСПоставщиками.СтавкаНДС КАК СтавкаНДС,
		|	РасчетыСПоставщиками.СуммаВал КАК СуммаВал,
		|	РасчетыСПоставщиками.ВалютаПлатежа КАК ВалютаПлатежа,
		|	РасчетыСПоставщиками.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
		|	РасчетыСПоставщиками.ТипРасчетов КАК ТипРасчетов
		|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПоставщиками
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.Регистратор = &Регистратор";
		
		Запрос.УстановитьПараметр("Регистратор", СсылкаНаДокумент);
		
		РезультатЗапроса = Запрос.Выполнить();
	КонецЕсли;
	
	Возврат СтруктураДополнительныеСвойства;
	
КонецФункции

#КонецОбласти

// Функция выполняет формирование записей КУДиР по всем видам записей
//
// Параметры:
//		Организация - СправочникСсылка... - бизнес единица, по которой необходимо провести формирование
//		ПериодФормирования - Дата - дата окончания квартала формирований
//
Функция ВыполнитьФормированияВсехЗаписейКУДИРЗаКвартал(Организация, ПериодФормирования, МенеджерВТ) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДокументФормирования", Документы.ЗаписиУСН.ПустаяСсылка());
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("ЕстьПредупреждения", Ложь);
	Результат.Вставить("ДополнительнаяИнформация", "");
	Результат.ДокументФормирования = ПолучитьДокументЗаписейУСНВПериодеПоВиду(
		Организация,
		ПериодФормирования,
		Перечисления.ВидыЗаписейФормированийКУДиР.ДоходыПрочие);
		
	ВыполнитьФормированиеПоДоходам(
		Организация,
		ПериодФормирования,
		Результат,
		МенеджерВт);
		
	Результат.ДокументФормирования = ПолучитьДокументЗаписейУСНВПериодеПоВиду(
		Организация,
		ПериодФормирования,
		Перечисления.ВидыЗаписейФормированийКУДиР.РасходыНаТовары);
		
	ВыполнитьФормированиеПоРасходамНаТовары(
		Организация,
		ПериодФормирования,
		Результат,
		МенеджерВТ);
		
	Результат.ДокументФормирования = ПолучитьДокументЗаписейУСНВПериодеПоВиду(
		Организация,
		ПериодФормирования,
		Перечисления.ВидыЗаписейФормированийКУДиР.РасходыНаУслуги);
		
	ВыполнитьФормированиеПоРасходамНаУслуги(
		Организация,
		ПериодФормирования,
		Результат,
		МенеджерВТ);
		
	Результат.ДокументФормирования = ПолучитьДокументЗаписейУСНВПериодеПоВиду(
		Организация,
		ПериодФормирования,
		Перечисления.ВидыЗаписейФормированийКУДиР.РасходыНаОплатуТруда);
		
	ВыполнитьФормированиеПоРасходамНаОплатуТруда(
		Организация,
		ПериодФормирования,
		Результат,
		МенеджерВТ);
		
	Результат.ДокументФормирования = ПолучитьДокументЗаписейУСНВПериодеПоВиду(
		Организация,
		ПериодФормирования,
		Перечисления.ВидыЗаписейФормированийКУДиР.РасходыНаОСиНМА);
		
	ВыполнитьФормированиеПоРасходамНаОСиНМА(
		Организация,
		ПериодФормирования,
		Результат,
		МенеджерВТ);
		
		Результат.ДокументФормирования = ПолучитьДокументЗаписейУСНВПериодеПоВиду(
		Организация,
		ПериодФормирования,
		Перечисления.ВидыЗаписейФормированийКУДиР.РасходыПрочие);
		
	ВыполнитьФормированиеПоПрочимРасходам(
		Организация,
		ПериодФормирования,
		Результат,
		МенеджерВТ);
		
КонецФункции

Функция ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТ, НачалоПериода, ОкончаниеПериода, НациональнаяВалюта, УчитыватьВалютныеОперации) Экспорт
	
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("Дата",Новый ОписаниеТипов("Дата"));
	Дата = НачалоПериода;
	Пока Дата <= ОкончаниеПериода Цикл
		НоваяСтрока = ТаблицаДат.Добавить();
		НоваяСтрока.Дата = НачалоДня(Дата);
		Дата = Дата+ 86400;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц =МенеджерВТ;
	Если УчитыватьВалютныеОперации Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДат.Дата
		|ПОМЕСТИТЬ ВТТаблицаДат
		|ИЗ
		|	&ТаблицаДат КАК ТаблицаДат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалютыДокумента.Валюта,
		|	КурсыВалютыДокумента.Период,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалютыДокумента.Кратность, 0) <> 0
		|				И ЕСТЬNULL(КурсыВалютыДокумента.Курс, 0) <> 0
		|				И ЕСТЬNULL(КурсНациональнойВалюты.Кратность, 0) <> 0
		|				И ЕСТЬNULL(КурсНациональнойВалюты.Курс, 0) <> 0
		|			ТОГДА КурсыВалютыДокумента.Курс * КурсНациональнойВалюты.Кратность / (КурсНациональнойВалюты.Курс * КурсыВалютыДокумента.Кратность)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Коэффициент
		|ПОМЕСТИТЬ ВТКУРСЫВАЛЮТ
		|ИЗ
		|	РегистрСведений.КурсыВалют КАК КурсыВалютыДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ОкончаниеПериода, Валюта = &НациональнаяВалюта) КАК КурсНациональнойВалюты
		|		ПО (КурсыВалютыДокумента.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	КурсыВалютыДокумента.Валюта,
		|	КурсыВалютыДокумента.Период,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалютыДокумента.Кратность, 0) <> 0
		|				И ЕСТЬNULL(КурсыВалютыДокумента.Курс, 0) <> 0
		|				И ЕСТЬNULL(КурсНациональнойВалюты.Кратность, 0) <> 0
		|				И ЕСТЬNULL(КурсНациональнойВалюты.Курс, 0) <> 0
		|			ТОГДА КурсыВалютыДокумента.Курс * КурсНациональнойВалюты.Кратность / (КурсНациональнойВалюты.Курс * КурсыВалютыДокумента.Кратность)
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ПредыдущаяДатаНачалу, ) КАК КурсыВалютыДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ПредыдущаяДатаНачалу, Валюта = &НациональнаяВалюта) КАК КурсНациональнойВалюты
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДат.Дата,
		|	КурсыВалют.Валюта,
		|	МАКСИМУМ(КурсыВалют.Период) КАК Период
		|ПОМЕСТИТЬ ВТКУРСЫВАЛЮТПОДНЯМВРЕМЕННАЯ
		|ИЗ
		|	ВТТаблицаДат КАК ТаблицаДат,
		|	ВТКУРСЫВАЛЮТ КАК КурсыВалют
		|ГДЕ
		|	ТаблицаДат.Дата >= КурсыВалют.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДат.Дата,
		|	КурсыВалют.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалютПоДнямВременная.Дата,
		|	КурсыВалютПоДнямВременная.Валюта,
		|	ЕСТЬNULL(КурсыВалют.Коэффициент, 1) КАК Коэффициент
		|ПОМЕСТИТЬ ВТКУРСЫВАЛЮТПОДНЯМ
		|ИЗ
		|	ВТКУРСЫВАЛЮТПОДНЯМВРЕМЕННАЯ КАК КурсыВалютПоДнямВременная
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКУРСЫВАЛЮТ КАК КурсыВалют
		|		ПО КурсыВалютПоДнямВременная.Период = КурсыВалют.Период
		|			И КурсыВалютПоДнямВременная.Валюта = КурсыВалют.Валюта";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КурсНациональнойВалюты.Период КАК Дата,
		|	КурсНациональнойВалюты.Валюта,
		|	1 КАК Коэффициент
		|ПОМЕСТИТЬ ВТКУРСЫВАЛЮТПОДНЯМ
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ОкончаниеПериода, Валюта = &НациональнаяВалюта) КАК КурсНациональнойВалюты";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПредыдущаяДатаНачалу",НачалоПериода-86400);
	
	Запрос.УстановитьПараметр("НачалоПериода",НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("НациональнаяВалюта", НациональнаяВалюта);
	Запрос.УстановитьПараметр("ТаблицаДат", ТаблицаДат);
	Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьВТЗакупкиПоставщиковДляКУДиР(МенеджерВТ, НачалоПериода, ОкончаниеПериода)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц =МенеджерВТ;
	Запрос.УстановитьПараметр("НачалоПериода",НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗакупкиДляКУДиР.Организация КАК Организация,
	|	ЗакупкиДляКУДиР.ТоварныйДокумент КАК ТоварныйДокумент,
	|	ЗакупкиДляКУДиР.ДенежныйДокумент КАК ДенежныйДокумент,
	|	ЗакупкиДляКУДиР.Сумма КАК Сумма,
	|	ЗакупкиДляКУДиР.СуммаНДС КАК СуммаНДС,
	|	ЗакупкиДляКУДиР.ЭтоТоварыКРеализации КАК ЭтоТоварыКРеализации
	|ПОМЕСТИТЬ ВТЗакупкиПоставщиковДляКУДиР
	|ИЗ
	|	РегистрНакопления.ЗакупкиДляКУДиР КАК ЗакупкиДляКУДиР
	|ГДЕ
	|	ЗакупкиДляКУДиР.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И ЗакупкиДляКУДиР.УчитыватьВНУ";
	
	Запрос.Выполнить();
	
КонецФункции

Процедура ЗаписатьДатуДокументаВРегистр(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(Источник.Дата) ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОтчетность") Тогда
		Возврат;
	КонецЕсли;
	
	Запись = РегистрыСведений.ДатыИзмененныхДокументов.СоздатьМенеджерЗаписи();
	Запись.ДатаДокумента = Источник.Дата;
	Запись.Документ = Источник.Ссылка;
	Запись.Записать();
	
КонецПроцедуры

Процедура ВыполнитьФормированияВсехЗаписейКУДИР_ФоновоеЗадание(Параметры, ВременноеХранилищеРезультата) Экспорт
	Перем ДатаФормирования;
	
	Если Параметры <> Неопределено Тогда
		Параметры.Свойство("ДатаФормирования", ДатаФормирования);
	КонецЕсли;
	
	Если ДатаФормирования = Неопределено Тогда
		ДатаФормирования = КонецКвартала(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ВыполнитьФормированияВсехЗаписейКУДИР(ДатаФормирования);
	ЗаписиСформированы = Истина;
	
	ПоместитьВоВременноеХранилище(ЗаписиСформированы, ВременноеХранилищеРезультата);
	
КонецПроцедуры

Процедура УстановитьУчитыватьВНУВДокументах(Параметры, ВременноеХранилищеРезультата) Экспорт
	
	ДатаНачала = НачалоГода(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатьиДвиженияДенежныхСредств.Ссылка КАК Статья
	|ПОМЕСТИТЬ ВТСтатьиДвиженияДенежныхСредств
	|ИЗ
	|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|ГДЕ
	|	НЕ СтатьиДвиженияДенежныхСредств.ПометкаУдаления
	|	И СтатьиДвиженияДенежныхСредств.УчитыватьВНУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеВКассу.Ссылка
	|ИЗ
	|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|		ПО (ПоступлениеВКассу.Дата >= &ДатаНачала)
	|			И (НЕ ПоступлениеВКассу.ПометкаУдаления)
	|			И (НЕ ПоступлениеВКассу.УчитыватьВНУ)
	|			И ПоступлениеВКассу.Статья = СтатьиДвиженияДенежныхСредств.Статья
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаСчет.Ссылка
	|ИЗ
	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|		ПО (ПоступлениеНаСчет.Дата >= &ДатаНачала)
	|			И (НЕ ПоступлениеНаСчет.ПометкаУдаления)
	|			И (НЕ ПоступлениеНаСчет.УчитыватьВНУ)
	|			И ПоступлениеНаСчет.Статья = СтатьиДвиженияДенежныхСредств.Статья
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходИзКассы.Ссылка
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|		ПО (РасходИзКассы.Дата >= &ДатаНачала)
	|			И (НЕ РасходИзКассы.ПометкаУдаления)
	|			И (НЕ РасходИзКассы.УчитыватьВНУ)
	|			И РасходИзКассы.Статья = СтатьиДвиженияДенежныхСредств.Статья
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходСоСчета.Ссылка
	|ИЗ
	|	Документ.РасходСоСчета КАК РасходСоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|		ПО (РасходСоСчета.Дата >= &ДатаНачала)
	|			И (НЕ РасходСоСчета.ПометкаУдаления)
	|			И (НЕ РасходСоСчета.УчитыватьВНУ)
	|			И РасходСоСчета.Статья = СтатьиДвиженияДенежныхСредств.Статья");
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
	
	РегистрироватьНаУзлахОбмена = Ложь;
	ВключитьБизнесЛогику = Ложь;
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НачатьТранзакцию();
				
			Попытка
				// Заблокируем таблицу для записи.
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Документ."+СокрЛП(Выборка.Ссылка.Метаданные().Имя));
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Если ДокументОбъект = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				Если ДокументОбъект.УчитыватьВНУ Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ДокументОбъект.УчитыватьВНУ = Истина;
				
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, РегистрироватьНаУзлахОбмена, ВключитьБизнесЛогику);
				
				ЗафиксироватьТранзакцию();
			Исключение
				// Если не удалось обработать какой-либо документ, пропускаем и обрабатываем позднее.
				ОтменитьТранзакцию();
				
				СтрСообщения = "Заполнение документов, необходимых в налоговом учете";
				ТекстСообщения = НСтр("ru='Не удалось завершить действие: %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрСообщения);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
				ОписаниеОшибки = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Истина, ВременноеХранилищеРезультата);
	
КонецПроцедуры

Функция ПолучитьДанныеСобытия(Событие, РеквизитыСобытия) Экспорт
	
	Если ТипЗнч(Событие) <> Тип("СправочникСсылка.КалендарьПодготовкиОтчетности")
		И ТипЗнч(Событие) <> Тип("СправочникСсылка.КалендарьПерсональныхЗадачОтчетности") Тогда
		ВызватьИсключение (НСтр("ru='Неверные параметры метода ПолучитьДанныеСобытия'"));
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Событие, РеквизитыСобытия);
	
	Если Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалог Тогда
		ТипЗадачи = "РасчетЕдиногоНалога";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН Тогда
		ТипЗадачи = "РасчетАвансовогоПлатежа";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоУСН Тогда
		ТипЗадачи = "ФормированиеДекларацииПоУСН";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыИП Тогда
		ТипЗадачи = "РасчетСтраховыхВзносовИП";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.НалогиСотрудников Тогда
		ТипЗадачи = "РасчетНалоговСотрудников";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоЕНВД Тогда
		ТипЗадачи = "ФормированиеДекларацииЕНВД";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалогЕНВД Тогда
		ТипЗадачи = "РасчетЕдиногоНалогаЕНВД";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СреднесписочнаяЧисленность Тогда
		ТипЗадачи = "ФормированиеСреднесписочнойЧисленности";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Справки2НДФЛ Тогда
		ТипЗадачи = "ФормированиеСправок2НДФЛ";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ОтчетностьВПФР Тогда
		ТипЗадачи = "ФормированиеОтчетностиВПФР";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма4ФСС Тогда
		ТипЗадачи = "Формирование4ФСС";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыПриДоходахСвыше300ТР Тогда
		ТипЗадачи = "СтраховыеВзносыПриДоходахСвыше300тр";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.НалогПатент Тогда
		ТипЗадачи = "НалогПатент";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ТорговыйСбор Тогда
		ТипЗадачи = "ТорговыйСбор";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма1Предприниматель Тогда
		ТипЗадачи = "Форма1Предприниматель";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма6НДФЛ Тогда
		ТипЗадачи = "Форма6НДФЛ";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СведенияОЗастрахованныхЛицах Тогда
		ТипЗадачи = "СведенияОЗастрахованныхЛицах";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СЗВСтаж Тогда
		ТипЗадачи = "СЗВСтаж";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Декларация12 Тогда
		ТипЗадачи = "Декларация12";         
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Декларация8 Тогда
		ТипЗадачи = "Декларация8";
	ИначеЕсли Результат.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности.РасчетПоСтраховымВзносам Тогда
		ТипЗадачи = "РасчетПоСтраховымВзносам";
	Иначе
		ТипЗадачи = "";
	КонецЕсли;
	
	Результат.Вставить("ТипЗадачи", ТипЗадачи);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеДокументаОтчетности(ДокументОтчетности, РеквизитыДокумента) Экспорт
	
	Если ТипЗнч(ДокументОтчетности) <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ВызватьИсключение (НСтр("ru='Неверные параметры метода ПолучитьДанныеДокументаОтчетности'"));
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОтчетности, РеквизитыДокумента);
	
КонецФункции

// Возвращает список банковских счетов не помеченных на удаление и их представлений по организации
//
Функция ПолучитьСписокБанковскихСчетов(Организация) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОбъединенныйЗапрос.Счет КАК Счет,
	|	ОбъединенныйЗапрос.Счет.Представление КАК Представление,
	|	СУММА(ОбъединенныйЗапрос.Приоритет) КАК Приоритет
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.БанковскийСчетПоУмолчанию КАК Счет,
	|		1 КАК Приоритет
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	ГДЕ
	|		Организации.Ссылка = &Организация
	|		И Организации.БанковскийСчетПоУмолчанию <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		БанкСчет.Ссылка,
	|		0
	|	ИЗ
	|		Справочник.БанковскиеСчета КАК БанкСчет
	|	ГДЕ
	|		БанкСчет.Владелец = &Организация
	|		И (НЕ БанкСчет.ПометкаУдаления)) КАК ОбъединенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъединенныйЗапрос.Счет,
	|	ОбъединенныйЗапрос.Счет.Представление
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	СпсСчетов = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпсСчетов.Добавить(Выборка.Счет, Выборка.Представление);
	КонецЦикла;
	
	Возврат СпсСчетов;
	
	
	
КонецФункции


// Проверяет соответствие справочника регистрация в ифнс данным в справочнике организаций
//
// Параметры:
//		Организация - ОрганизацияСсылка или ОрганизацияОбъект. Рекомендуется Объект.
//		Отказ - булево
//
Процедура ПроверитьРегистрациюВИФНС(Организация, Отказ, РегистрацияВНалоговомОргане = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Организация.РегистрацияВНалоговомОргане) Тогда
		РегистрацияВНалоговомОргане = Организация.РегистрацияВНалоговомОргане.ПолучитьОбъект();
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрацияВНалоговомОргане.Ссылка
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацияВНалоговомОргане
		|ГДЕ
		|	(НЕ РегистрацияВНалоговомОргане.ПометкаУдаления)
		|	И РегистрацияВНалоговомОргане.Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", Организация.Ссылка);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
			Если Организация.Ссылка.Пустая() Тогда
				РегистрацияВНалоговомОргане.Владелец = Организация.ПолучитьСсылкуНового();
			Иначе
				РегистрацияВНалоговомОргане.Владелец = Организация.Ссылка;
			КонецЕсли;
				
			РегистрацияВНалоговомОргане.Наименование = НСтр("ru='Автозапись'");
			
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			РегистрацияВНалоговомОргане = Выборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	РегистрацияВНалоговомОргане.КодПоОКАТО = Организация.КодПоОКАТО;
	РегистрацияВНалоговомОргане.КодПоОКТМО = Организация.КодПоОКТМО;
	РегистрацияВНалоговомОргане.КПП        = Организация.КПП;
	
	ГосОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, Организация.КодНалоговогоОрганаПолучателя);
	
	РегистрацияВНалоговомОргане.НаименованиеИФНС = ГосОрган.ПолноеНаименование;
	
	РегистрацияВНалоговомОргане.Код = Организация.КодНалоговогоОрганаПолучателя;
	Если Не ПустаяСтрока(РегистрацияВНалоговомОргане.Код) Тогда
		РегистрацияВНалоговомОргане.Наименование = РегистрацияВНалоговомОргане.Код;
	КонецЕсли;
	
	Попытка
		РегистрацияВНалоговомОргане.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(
			"РегистрацияВИФНС. Запись",
			УровеньЖурналаРегистрации.Ошибка,
			,
			Организация,
			ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
	
	Если ТипЗнч(Организация) = Тип("СправочникОбъект.Организации") Тогда
		Организация.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане.Ссылка;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане.Ссылка;
	
КонецПроцедуры

// возвращает актуализированную информацию ссылки регистрации на ифнс
Функция ПолучитьРегистрациюВИФНС(Организация) Экспорт
	
	Регистрация = Неопределено;
	ПроверитьРегистрациюВИФНС(Организация, Ложь, Регистрация);
	Возврат Регистрация;
	
КонецФункции



// Выполняет движения по регистру накопления КнигаУчетаДоходовИРасходов
// 
Процедура ОтразитьКнигаУчетаДоходовПатент(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаКнигаУчетаДоходовПатент;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.КнигаУчетаДоходовПатент.Записывать = Истина;
	Движения.КнигаУчетаДоходовПатент.Загрузить(Таблица);

КонецПроцедуры


// Процедура формирует записи по патенту.
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Функция ВыполнитьРасчетНалогаПоПатенту(Организация, ПериодРасчета, СобытиеКалендаря = Неопределено) Экспорт
	
	СтруктураРасчетаПатент = Новый Структура(
		"Организация,
		|СобытиеКалендаря,
		|ПериодОтчетности,
		|ВидВзаиморасчетовСБюджетом,
		|СуммаПатент,   
		|ВсегоРасходыСтраховыеВзносы,  
		|УменьшениеСтраховыеВзносы,
		|ОстатокРасходыСтраховыеВзносы,
		|ОКАТОВзаиморасчетов,
		|ИФНСВзаиморасчетов,
		|СуммаВзаиморасчетовСБюджетом,
		|ДокументВзаиморасчетовСБюджетом",
		Организация,
		СобытиеКалендаря,
		ПериодРасчета,
		Справочники.ВидыНалогов.Патент,
		0,  
		0,
		0,
		0,
		"",
		"",
		0,
		Неопределено);
	
	// Найдем патент и определим сумму
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Патенты.ДатаПервогоПлатежа,
	|	Патенты.ДатаВторогоПлатежа,
	|	Патенты.ДатаНачала,
	|	Патенты.ДатаОкончания,
	|	Патенты.СуммаПервогоПлатежа,
	|	Патенты.СуммаВторогоПлатежа,
	|	Патенты.КодПоОКТМО,
	|	Патенты.КодНалоговогоОрганаПолучателя
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	Патенты.Ссылка = &Основание";
	Запрос.УстановитьПараметр("Основание", СобытиеКалендаря.Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ПериодРасчета = Выборка.ДатаПервогоПлатежа Тогда
			СтруктураРасчетаПатент.СуммаПатент = Выборка.СуммаПервогоПлатежа;
		ИначеЕсли ПериодРасчета = Выборка.ДатаВторогоПлатежа Тогда
			СтруктураРасчетаПатент.СуммаПатент = Выборка.СуммаВторогоПлатежа;
		КонецЕсли;
		СтруктураРасчетаПатент.ОКАТОВзаиморасчетов = Выборка.КодПоОКТМО;
		СтруктураРасчетаПатент.ИФНСВзаиморасчетов = Выборка.КодНалоговогоОрганаПолучателя;
	КонецЕсли;
	
	// Вычеты по патенту:
	СуммаРасходовКВычету = 0;
	РегистрыСведений.РасходыНаККТУменьшающиеНалог.ПолучитьСуммуРасходовУменьшающиеНалог(Справочники.ЗаписиКалендаряПодготовкиОтчетности.ПолучитьЗаписьКалендаря(Организация,СобытиеКалендаря), СобытиеКалендаря.Основание, СуммаРасходовКВычету);
	
	// Вычеты по страховым взносам:
	СтруктураРасчетаПатент =
	ПоказателиРасходовСтраховыеВзносы(Организация,  СобытиеКалендаря.Основание, СобытиеКалендаря.ДатаНачалаСобытия, СобытиеКалендаря.ДатаОкончанияСобытия, СтруктураРасчетаПатент);
	
	СтруктураРасчетаПатент.СуммаПатент = Макс(0, СтруктураРасчетаПатент.СуммаПатент - СуммаРасходовКВычету - СтруктураРасчетаПатент.УменьшениеСтраховыеВзносы);
	
	НачатьТранзакцию();
	
	ОтразитьЗначенияПоказателейОтчетности(СтруктураРасчетаПатент);
	СтруктураРасчетаПатент.СуммаВзаиморасчетовСБюджетом = СтруктураРасчетаПатент.СуммаПатент;
	
	// запись состояние события календаря
	Если СобытиеКалендаря <> Неопределено Тогда
		
		ЗарегистрироватьВзаиморасчетыСБюджетомПоПатенту(СтруктураРасчетаПатент);
		
		КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Организация,
			СобытиеКалендаря,
			Перечисления.СостоянияСобытийКалендаря.Ознакомиться,
			СтруктураРасчетаПатент.СуммаПатент,
			СтруктураРасчетаПатент.СуммаПатент);
		// Регистрация документа оплаты
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат СтруктураРасчетаПатент;
	
КонецФункции

Функция ПоказателиРасходовСтраховыеВзносы(Организация, Патент, ДатаНачала, ДатаОкончания, СтруктураРасчетаПатент) Экспорт
	
	СтруктураРасчетаПатент.ВсегоРасходыСтраховыеВзносы =
		РасходыНаСтраховыеВзносыЗаГод(Организация, ДатаНачала, ДатаОкончания);
		
	СведенияУменьшениеНалога = РегистрыСведений.УменьшениеНалогаПСНнаСтраховыеВзносы.СведенияУменьшениеНалогаЗаГод(
	Организация, ДатаНачала);

		
	УменьшениеПоВсемПатентам = 0;
	ПринятоУменьшениеТекущийПатент = 0;
	ПоданоУменьшениеТекущийПатент = 0;
	
	Для Каждого Элемент Из СведенияУменьшениеНалога Цикл
		УменьшениеПоВсемПатентам = УменьшениеПоВсемПатентам + Элемент.Значение.Сумма;
		Если Элемент.Ключ = Патент Тогда
			ПоданоУменьшениеТекущийПатент = Элемент.Значение.Сумма;
			Для Каждого ЭлементУведомление Из Элемент.Значение.Уведомления Цикл
				СтатусУведомления = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(ЭлементУведомление.Уведомление.Ссылка);
				Если СтатусУведомления.Сдано Тогда
					ПринятоУменьшениеТекущийПатент = ПринятоУменьшениеТекущийПатент + ЭлементУведомление.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;  
	
	СвободныйОстатокРасходов = Макс(СтруктураРасчетаПатент.ВсегоРасходыСтраховыеВзносы - УменьшениеПоВсемПатентам, 0);
	
	РеквизитыПатента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Патент, "СуммаПервогоПлатежа, СуммаВторогоПлатежа");
	ПолнаяСтоимостьПатента = РеквизитыПатента.СуммаПервогоПлатежа + РеквизитыПатента.СуммаВторогоПлатежа;
	ИспользуетсяТрудНаемныхРаботников = Организация.ИПИспользуетТрудНаемныхРаботников;
	ЛимитУменьшенияНалога = ?(ИспользуетсяТрудНаемныхРаботников, Цел(ПолнаяСтоимостьПатента/2), ПолнаяСтоимостьПатента);
	ОставшийсяЛимитУменьшенияНалога = Макс(ЛимитУменьшенияНалога - ПоданоУменьшениеТекущийПатент, 0);
	
	СтруктураРасчетаПатент.УменьшениеСтраховыеВзносы = ПринятоУменьшениеТекущийПатент;
	СтруктураРасчетаПатент.ОстатокРасходыСтраховыеВзносы = Мин(СвободныйОстатокРасходов, ОставшийсяЛимитУменьшенияНалога);
	
	Возврат СтруктураРасчетаПатент;
	
КонецФункции 

Функция РасходыНаСтраховыеВзносыЗаГод(Организация, ДатаНачала, ДатаОкончания)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			&НачалоПериода,
		|			&ОкончаниеПериода,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетовВзносыВПФРИФСС)) КАК РасчетыПоНалогамОбороты"; 
		
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300ТР);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФСССотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФССТравматизмСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФОМССотрудники); 
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетовВзносыВПФРИФСС", ВидыВзаиморасчетовВзносыВПФРИФСС);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала); 
	Запрос.УстановитьПараметр("ОкончаниеПериода", ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	          
    СуммаУплаченоВзносы = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СуммаУплаченоВзносы = СуммаУплаченоВзносы + ВыборкаДетальныеЗаписи.СуммаУплачено;
	КонецЦикла;
	
	Возврат СуммаУплаченоВзносы;
	
КонецФункции


// Процедура регистрирует документ обязательств перед бюджетом
//
Процедура ЗарегистрироватьВзаиморасчетыСБюджетомПоПатенту(СтруктураРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ  ПЕРВЫЕ 1
	|	ДокументыСобытийКалендаряОтчетности.СвязанныйДокумент
	|ИЗ
	|	РегистрСведений.ДокументыСобытийКалендаряОтчетности КАК ДокументыСобытийКалендаряОтчетности
	|ГДЕ
	|	ДокументыСобытийКалендаряОтчетности.Событие = &Событие
	|	И ДокументыСобытийКалендаряОтчетности.СвязанныйДокумент ССЫЛКА Документ.НачислениеНалогов";
	
	Запрос.УстановитьПараметр("Событие", СтруктураРасчета.СобытиеКалендаря);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДокументВзаиморасчетов = Выборка.СвязанныйДокумент.ПолучитьОбъект();
		СтрокаСНалогом = ДокументВзаиморасчетов.Налоги.Найти(СтруктураРасчета.ВидВзаиморасчетовСБюджетом, "ВидНалога");
		Если СтрокаСНалогом = Неопределено Тогда
			СтрокаСНалогом = ДокументВзаиморасчетов.Налоги.Добавить();
			СтрокаСНалогом.ВидНалога = СтруктураРасчета.ВидВзаиморасчетовСБюджетом;
		КонецЕсли;
		
		СтрокаСНалогом.СрокУплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРасчета.СобытиеКалендаря,"ДатаОкончанияСобытия");
		СтрокаСНалогом.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
	Иначе
		// Создаем документ взаиморасчетов
		ДокументВзаиморасчетов = Документы.НачислениеНалогов.СоздатьДокумент();
		ДокументВзаиморасчетов.Организация = СтруктураРасчета.Организация;
		ДокументВзаиморасчетов.Дата = КонецДня(СтруктураРасчета.ПериодОтчетности);
		ДокументВзаиморасчетов.ВидОперации = Перечисления.ВидыОперацийНачислениеНалогов.Начисление;
		СтрокаСНалогом = ДокументВзаиморасчетов.Налоги.Добавить();
		
		СтрокаСНалогом.ВидНалога = СтруктураРасчета.ВидВзаиморасчетовСБюджетом;
		СтрокаСНалогом.СрокУплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРасчета.СобытиеКалендаря,"ДатаОкончанияСобытия");
		СтрокаСНалогом.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
		
	КонецЕсли;
	
	СтрокаСНалогом.Сумма      = СтруктураРасчета.СуммаВзаиморасчетовСБюджетом;
	СтрокаСНалогом.КодИФНС    = СтруктураРасчета.ИФНСВзаиморасчетов;
	СтрокаСНалогом.КодПоОКАТО = СтруктураРасчета.ОКАТОВзаиморасчетов;
	
	ДокументВзаиморасчетов.Записать(РежимЗаписиДокумента.Проведение);
	ЗаписьСвязанногоДокумента = РегистрыСведений.ДокументыСобытийКалендаряОтчетности.СоздатьМенеджерЗаписи();
	ЗаписьСвязанногоДокумента.Событие = СтруктураРасчета.СобытиеКалендаря;
	ЗаписьСвязанногоДокумента.СвязанныйДокумент = ДокументВзаиморасчетов.Ссылка;
	ЗаписьСвязанногоДокумента.Записать();
	
	СтруктураРасчета.ДокументВзаиморасчетовСБюджетом = ДокументВзаиморасчетов.Ссылка;
	
КонецПроцедуры

// Функция возвращает актуальный документ взаиморасчетов с бюджетом
//
Функция ПолучитьДокументВзаиморасчетовСБюджетомПатент(Организация,ВидВзаиморасчетов,ПериодОтчетности, СрокУплаты, ВозвращатьСсылку = Ложь, Событие) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыСобытийКалендаряОтчетности.СвязанныйДокумент КАК ДокументВзаиморасчетов
	|ИЗ
	|	РегистрСведений.ДокументыСобытийКалендаряОтчетности КАК ДокументыСобытийКалендаряОтчетности
	|ГДЕ
	|	ДокументыСобытийКалендаряОтчетности.Событие = &Событие
	|	И ДокументыСобытийКалендаряОтчетности.СвязанныйДокумент ССЫЛКА Документ.НачислениеНалогов");
	
	Запрос.УстановитьПараметр("Событие", Событие);
	
	ДокументВзаиморасчетов = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ВозвращатьСсылку Тогда
			ДокументВзаиморасчетов = Выборка.ДокументВзаиморасчетов;
		Иначе
			ДокументВзаиморасчетов = Выборка.ДокументВзаиморасчетов.ПолучитьОбъект();
		КонецЕсли;
		
	Иначе
		
		ДокументВзаиморасчетов = Документы.НачислениеНалогов.СоздатьДокумент();
		ДокументВзаиморасчетов.Организация = Организация;
		ДокументВзаиморасчетов.Дата = КонецДня(ПериодОтчетности);
		ДокументВзаиморасчетов.ВидОперации = Перечисления.ВидыОперацийНачислениеНалогов.Начисление;
		СтрокаСНалогом = ДокументВзаиморасчетов.Налоги.Добавить();
		
		СтрокаСНалогом.ВидНалога = ВидВзаиморасчетов;
		СтрокаСНалогом.СрокУплаты = СрокУплаты;
		СтрокаСНалогом.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
		
		Если ВозвращатьСсылку Тогда
			
			ДокументВзаиморасчетов.Записать(РежимЗаписиДокумента.Проведение);
			ДокументВзаиморасчетов = ДокументВзаиморасчетов.Ссылка;
			
			ЗаписьСвязанногоДокумента = РегистрыСведений.ДокументыСобытийКалендаряОтчетности.СоздатьМенеджерЗаписи();
			ЗаписьСвязанногоДокумента.Событие = Событие;
			ЗаписьСвязанногоДокумента.СвязанныйДокумент = ДокументВзаиморасчетов.Ссылка;
			ЗаписьСвязанногоДокумента.Записать();
			
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат ДокументВзаиморасчетов;
	
КонецФункции


Процедура ВыполнитьФормированияЗаписейПатента(Патент) Экспорт
	
	Если Не ЗначениеЗаполнено(Патент) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = НачалоДня(Патент.ДатаНачала);
	ОкончаниеПериода = КонецДня(Патент.ДатаОкончания);
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТ, НачалоПериода, ОкончаниеПериода, НациональнаяВалюта, УчетВалютныхОпераций);
	
	// Поиск документа, уже созданного ранее
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаписиПатент.Ссылка
	|ИЗ
	|	Документ.ЗаписиПатент КАК ЗаписиПатент
	|ГДЕ
	|	НЕ ЗаписиПатент.ПометкаУдаления
	|	И ЗаписиПатент.Патент = &Патент
	|	И НЕ ЗаписиПатент.РучныеЗаписи";
	
	Запрос.УстановитьПараметр("Патент", Патент);
	
	
	РезультатПоиска = Запрос.Выполнить().Выбрать();
	
	Если РезультатПоиска.Следующий() Тогда
		ДокументФормирования = РезультатПоиска.Ссылка.ПолучитьОбъект();
	Иначе
		ДокументФормирования = Документы.ЗаписиПатент.СоздатьДокумент();
		ДокументФормирования.Патент = Патент;
		ДокументФормирования.Организация = Патент.Владелец;
		ДокументФормирования.Дата = Патент.ДатаОкончания;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажах.СуммаДокумента КАК СуммаДокумента,
	|	ОтчетОРозничныхПродажах.Дата КАК Дата,
	|	ОтчетОРозничныхПродажах.Номер КАК Номер,
	|	ОтчетОРозничныхПродажах.ВалютаДокумента КАК ВалютаДокумента,
	|	ОтчетОРозничныхПродажах.СуммаПредоплаты КАК СуммаПредоплаты,
	|	ВЫБОР
	|		КОГДА НЕ ОтчетОРозничныхПродажах.УчитыватьВНУ
	|				И ОтчетОРозничныхПродажах.ПоложениеНастроекНалоговогоУчета <> ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА ОтчетОРозничныхПродажах.ПолученаПредоплата
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПолученаПредоплата,
	|	ОтчетОРозничныхПродажах.Патент КАК Патент,
	|	ОтчетОРозничныхПродажах.ПоложениеНастроекНалоговогоУчета КАК ПоложениеНастроекНалоговогоУчета
	|ПОМЕСТИТЬ ВТДокументыОтчетОРозничныхПродажах
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ОтчетОРозничныхПродажах.ПометкаУдаления
	|	И ОтчетОРозничныхПродажах.Проведен
	|	И ОтчетОРозничныхПродажах.Организация = &Организация
	|	И (НЕ ОтчетОРозничныхПродажах.УчитыватьВНУ
	|			ИЛИ ОтчетОРозничныхПродажах.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ТаблицаОплатаПлатежнымиКартами.Сумма), 0) КАК СуммаБезналичнойОплаты,
	|	ТаблицаОплатаПлатежнымиКартами.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТСуммаБезналичнойОплаты
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.БезналичнаяОплата КАК ТаблицаОплатаПлатежнымиКартами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО (ОтчетОРозничныхПродажах.Ссылка = ТаблицаОплатаПлатежнымиКартами.Ссылка)
	|			И (ОтчетОРозничныхПродажах.Патент = &Патент
	|					И ОтчетОРозничныхПродажах.ПоложениеНастроекНалоговогоУчета <> ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|				ИЛИ ОтчетОРозничныхПродажах.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|					И ТаблицаОплатаПлатежнымиКартами.Патент = &Патент)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплатаПлатежнымиКартами.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ТаблицаЗапасы.Сумма), 0) КАК Сумма,
	|	ТаблицаЗапасы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТСуммаПатента
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Запасы КАК ТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО (ОтчетОРозничныхПродажах.Ссылка = ТаблицаЗапасы.Ссылка)
	|			И (ОтчетОРозничныхПродажах.Патент = &Патент
	|					И ОтчетОРозничныхПродажах.ПоложениеНастроекНалоговогоУчета <> ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|				ИЛИ ОтчетОРозничныхПродажах.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|					И ТаблицаЗапасы.Патент = &Патент)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ВТСуммаПатента.Сумма, 0) КАК СуммаДокумента,
	|	ОтчетОРозничныхПродажах.Дата КАК Дата,
	|	ОтчетОРозничныхПродажах.Номер КАК Номер,
	|	ОтчетОРозничныхПродажах.ВалютаДокумента КАК ВалютаДокумента,
	|	ОтчетОРозничныхПродажах.СуммаПредоплаты КАК СуммаПредоплаты,
	|	ОтчетОРозничныхПродажах.ПолученаПредоплата КАК ПолученаПредоплата,
	|	ЕСТЬNULL(ТаблицаОплатаПлатежнымиКартами.СуммаБезналичнойОплаты, 0) КАК СуммаБезналичнойОплаты
	|ПОМЕСТИТЬ ВТРозничныеПродажи
	|ИЗ
	|	ВТДокументыОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммаПатента КАК ВТСуммаПатента
	|		ПО (ВТСуммаПатента.Ссылка = ОтчетОРозничныхПродажах.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммаБезналичнойОплаты КАК ТаблицаОплатаПлатежнымиКартами
	|		ПО (ТаблицаОплатаПлатежнымиКартами.Ссылка = ОтчетОРозничныхПродажах.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ПоступлениеНаСчетЭквайринговыеОперации.СуммаРасчетов) КАК СуммаРасчетов,
	|	СУММА(ПоступлениеНаСчетЭквайринговыеОперации.СуммаРасчетовКомиссии) КАК СуммаРасчетовКомиссии,
	|	ПоступлениеНаСчетЭквайринговыеОперации.Ссылка КАК Ссылка,
	|	СУММА(ПоступлениеНаСчетЭквайринговыеОперации.СуммаРасчетовВозврата) КАК СуммаРасчетовВозврата,
	|	СУММА(ПоступлениеНаСчетЭквайринговыеОперации.СуммаРасчетовКомиссииВозврата) КАК СуммаРасчетовКомиссииВозврата
	|ПОМЕСТИТЬ ВТПоступленияЭквайринг
	|ИЗ
	|	Документ.ПоступлениеНаСчет.ЭквайринговыеОперации КАК ПоступлениеНаСчетЭквайринговыеОперации
	|ГДЕ
	|	ПоступлениеНаСчетЭквайринговыеОперации.Ссылка.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И ПоступлениеНаСчетЭквайринговыеОперации.Ссылка.Проведен
	|	И НЕ ПоступлениеНаСчетЭквайринговыеОперации.Ссылка.ПометкаУдаления
	|	И ПоступлениеНаСчетЭквайринговыеОперации.Ссылка.Организация = &Организация
	|	И ПоступлениеНаСчетЭквайринговыеОперации.Патент = &Патент
	|	И ПоступлениеНаСчетЭквайринговыеОперации.Ссылка.ВидОперации В(&МассивИспользуемыхВидовПоступленийНаСчет)
	|	И (ПоступлениеНаСчетЭквайринговыеОперации.Ссылка.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ИЛИ ПоступлениеНаСчетЭквайринговыеОперации.Ссылка.ЭквайринговыеОперации.ЭквайринговыйТерминал.Договор.КонтрольВзаиморасчетовЭквайринг)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНаСчетЭквайринговыеОперации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеВКассу.Ссылка КАК ПервичныйДокумент,
	|	ПоступлениеВКассу.Контрагент КАК Контрагент,
	|	ПоступлениеВКассу.Подотчетник КАК Подотчетник,
	|	ПоступлениеВКассу.СуммаДокумента КАК ДоходБаза,
	|	ПоступлениеВКассу.СуммаДокумента КАК ДоходВсего,
	|	ПоступлениеВКассу.ВидОперации КАК ВидОперации,
	|	ПоступлениеВКассу.Дата КАК ДатаПервичногоДокумента,
	|	ПоступлениеВКассу.Номер КАК НомерПервичногоДокумента,
	|	ПоступлениеВКассу.Дата КАК Период,
	|	"""" КАК НомерВходящегоДокумента,
	|	"""" КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ПоступлениеВКассу.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	ПоступлениеВКассу.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	|ГДЕ
	|	ПоступлениеВКассу.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ПоступлениеВКассу.ПометкаУдаления
	|	И ПоступлениеВКассу.Проведен
	|	И ПоступлениеВКассу.Организация = &Организация
	|	И ПоступлениеВКассу.Патент = &Патент
	|	И ПоступлениеВКассу.ВидОперации В(&МассивИспользуемыхВидовПоступленийВКассу)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	NULL,
	|	NULL,
	|	ОтчетОРозничныхПродажах.СуммаДокумента - ОтчетОРозничныхПродажах.СуммаБезналичнойОплаты - ОтчетОРозничныхПродажах.СуммаПредоплаты + ОтчетОРозничныхПродажах.ПолученаПредоплата,
	|	ОтчетОРозничныхПродажах.СуммаДокумента - ОтчетОРозничныхПродажах.СуммаБезналичнойОплаты - ОтчетОРозничныхПродажах.СуммаПредоплаты + ОтчетОРозничныхПродажах.ПолученаПредоплата,
	|	"""",
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Номер,
	|	ОтчетОРозничныхПродажах.Дата,
	|	"""",
	|	"""",
	|	НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажах.Дата, ДЕНЬ),
	|	ОтчетОРозничныхПродажах.ВалютаДокумента
	|ИЗ
	|	ВТРозничныеПродажи КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.СуммаДокумента - ОтчетОРозничныхПродажах.СуммаБезналичнойОплаты - ОтчетОРозничныхПродажах.СуммаПредоплаты + ОтчетОРозничныхПродажах.ПолученаПредоплата <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаСчет.Ссылка,
	|	ПоступлениеНаСчет.Контрагент,
	|	ПоступлениеНаСчет.Подотчетник,
	|	ПоступлениеНаСчет.СуммаДокумента + ПоступлениеНаСчет.СуммаКомиссииДокумента,
	|	ПоступлениеНаСчет.СуммаДокумента + ПоступлениеНаСчет.СуммаКомиссииДокумента,
	|	ПоступлениеНаСчет.ВидОперации,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчет.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПоступлениеНаСчет.Дата
	|		ИНАЧЕ ПоступлениеНаСчет.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	ПоступлениеНаСчет.Номер,
	|	ПоступлениеНаСчет.Дата,
	|	ПоступлениеНаСчет.НомерВходящегоДокумента,
	|	ПоступлениеНаСчет.НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ПоступлениеНаСчет.Дата, ДЕНЬ),
	|	ПоступлениеНаСчет.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|ГДЕ
	|	ПоступлениеНаСчет.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ПоступлениеНаСчет.ПометкаУдаления
	|	И ПоступлениеНаСчет.Проведен
	|	И ПоступлениеНаСчет.Организация = &Организация
	|	И ПоступлениеНаСчет.Патент = &Патент
	|	И ПоступлениеНаСчет.ВидОперации В(&МассивИспользуемыхВидовПоступленийНаСчет)
	|	И ПоступлениеНаСчет.ПоложениеНастроекНалоговогоУчета <> ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|	И НЕ ПоступлениеНаСчет.ЭквайринговыеОперации.ЭквайринговыйТерминал.Договор.КонтрольВзаиморасчетовЭквайринг
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Контрагент,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Подотчетник,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.ПолученоОтКлиента,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.ПолученоОтКлиента,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.ВидОперации,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Дата
	|		ИНАЧЕ ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Номер,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Дата,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.НомерВходящегоДокумента,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Дата, ДЕНЬ),
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.ВалютаДенежныхСредств
	|ИЗ
	|	Документ.ПоступлениеНаСчет.РасшифровкаПлатежаОтАгента КАК ПоступлениеНаСчетРасшифровкаПлатежаОтАгента
	|ГДЕ
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.ПометкаУдаления
	|	И ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Проведен
	|	И ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Организация = &Организация
	|	И ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка.Патент = &Патент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТПоступленияЭквайринг.Ссылка.Ссылка,
	|	ВТПоступленияЭквайринг.Ссылка.Контрагент,
	|	ВТПоступленияЭквайринг.Ссылка.Подотчетник,
	|	ВТПоступленияЭквайринг.СуммаРасчетов - ВТПоступленияЭквайринг.СуммаРасчетовВозврата,
	|	ВТПоступленияЭквайринг.СуммаРасчетов - ВТПоступленияЭквайринг.СуммаРасчетовВозврата,
	|	ВТПоступленияЭквайринг.Ссылка.ВидОперации,
	|	ВЫБОР
	|		КОГДА ВТПоступленияЭквайринг.Ссылка.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТПоступленияЭквайринг.Ссылка.Дата
	|		ИНАЧЕ ВТПоступленияЭквайринг.Ссылка.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	ВТПоступленияЭквайринг.Ссылка.Номер,
	|	ВТПоступленияЭквайринг.Ссылка.Дата,
	|	ВТПоступленияЭквайринг.Ссылка.НомерВходящегоДокумента,
	|	ВТПоступленияЭквайринг.Ссылка.НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ВТПоступленияЭквайринг.Ссылка.Дата, ДЕНЬ),
	|	ВТПоступленияЭквайринг.Ссылка.ВалютаДенежныхСредств
	|ИЗ
	|	ВТПоступленияЭквайринг КАК ВТПоступленияЭквайринг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДоходы.ПервичныйДокумент КАК ПервичныйДокумент,
	|	ВТДоходы.Контрагент КАК Контрагент,
	|	ВТДоходы.Контрагент.НаименованиеПолное КАК ЮридическоеНазваниеКонтрагента,
	|	ВТДоходы.Подотчетник КАК Подотчетник,
	|	ВТДоходы.ДоходБаза * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1) КАК Доход,
	|	ВТДоходы.ВидОперации КАК ВидОперации,
	|	ВТДоходы.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	|	ВТДоходы.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	ВТДоходы.Период КАК Период,
	|	ВТДоходы.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТДоходы.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ВТДоходы.ДатаНачалоДня КАК ДатаНачалоДня
	|ИЗ
	|	ВТДоходы КАК ВТДоходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКУРСЫВАЛЮТПОДНЯМ КАК КурсыВалютПоДням
	|		ПО ВТДоходы.ДатаНачалоДня = КурсыВалютПоДням.Дата
	|			И ВТДоходы.ВалютаДенежныхСредств = КурсыВалютПоДням.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("Организация", Патент.Владелец);
	Запрос.УстановитьПараметр("Патент", Патент);
	МассивИспользуемыхВидовПоступленийВКассу = Новый Массив;
	МассивИспользуемыхВидовПоступленийВКассу.Добавить(Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя);
	МассивИспользуемыхВидовПоступленийВКассу.Добавить(Перечисления.ВидыОперацийПоступлениеВКассу.Прочее);
	МассивИспользуемыхВидовПоступленийВКассу.Добавить(Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты);
	
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовПоступленийВКассу", МассивИспользуемыхВидовПоступленийВКассу);
	
	МассивИспользуемыхВидовПоступленийНаСчет = Новый Массив;
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя);
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее);
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты);
	МассивИспользуемыхВидовПоступленийНаСчет.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам);
	Запрос.УстановитьПараметр("МассивИспользуемыхВидовПоступленийНаСчет", МассивИспользуемыхВидовПоступленийНаСчет);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[6].Выгрузить();
	РезультатЗапроса.Колонки.Добавить("Содержание");
	
	Для Каждого Строка Из РезультатЗапроса Цикл
		Строка.Доход = Окр(Строка.Доход, 2, 1);
		Если НЕ ПустаяСтрока(Строка.НомерВходящегоДокумента) Тогда
			Строка.НомерПервичногоДокумента = Строка.НомерВходящегоДокумента;
		КонецЕсли;
		Строка.НомерПервичногоДокумента =  ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Строка.НомерПервичногоДокумента, Истина, Истина);
		Если ТипЗнч(Строка.ПервичныйДокумент) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			Строка.Содержание = НСтр("ru = 'Поступление розничной выручки'");
		Иначе
			Если Строка.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя Тогда
				Строка.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Поступление наличных денежных средств от покупателя ""%1""'"), ?(ЗначениеЗаполнено(СокрЛП(Строка.ЮридическоеНазваниеКонтрагента)),СокрЛП(Строка.ЮридическоеНазваниеКонтрагента),СокрЛП(Строка.Контрагент)));
			ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее 
				ИЛИ Строка.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты Тогда
				Строка.Содержание = НСтр("ru = 'Поступление наличных денежных средств по прочим операциям'");
			ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
				Строка.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Поступление безналичных денежных средств от покупателя ""%1""'"), ?(ЗначениеЗаполнено(СокрЛП(Строка.ЮридическоеНазваниеКонтрагента)),СокрЛП(Строка.ЮридическоеНазваниеКонтрагента),СокрЛП(Строка.Контрагент)));
			ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее
				ИЛИ Строка.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты Тогда
				Строка.Содержание = НСтр("ru = 'Поступление безналичных денежных средств по прочим операциям'");
			ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам Тогда
				Строка.Содержание = НСтр("ru = 'Поступление от розничных продаж, оплаченной безналичным способом'");
			ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты Тогда
				Строка.Содержание = НСтр("ru = 'Поступление безналичных денежных средств от курьерской компании или почты'");
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Строка.НазначениеПлатежа) Тогда
				Строка.Содержание = Строка.Содержание + ", " + Символы.ПС + СокрЛП(Строка.НазначениеПлатежа);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДокументФормирования.ЗаписиКнигаДоходовПатент.Загрузить(РезультатЗапроса);
	ДокументФормирования.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры


Процедура ВыполнитьФормированияЗаписейПатента_ФоновоеЗадание(Параметры, ВременноеХранилищеРезультата) Экспорт
	Перем Патент;
	
	Если Параметры <> Неопределено Тогда
		Параметры.Свойство("Патент", Патент);
	КонецЕсли;
	
	Если Патент = Неопределено Тогда
		ЗаписиСформированы = Истина;
	Иначе
		ВыполнитьФормированияЗаписейПатента(Патент);
		ЗаписиСформированы = Истина;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ЗаписиСформированы, ВременноеХранилищеРезультата);
	
КонецПроцедуры


Процедура ОтразитьИзменениеСтатусаРегламентированнойОтчетности(Источник, Отказ, Замещение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблица.Организация,
	|	ВременнаяТаблица.Ссылка,
	|	ВременнаяТаблица.Статус
	|ПОМЕСТИТЬ ВТИсходнаяТаблица
	|ИЗ
	|	&Таблица КАК ВременнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналОтчетовСтатусы.Ссылка,
	|	ЖурналОтчетовСтатусы.НаименованиеОтчета,
	|	ЖурналОтчетовСтатусы.ВидКонтролирующегоОргана,
	|	ВТИсходнаяТаблица.Статус
	|ИЗ
	|	РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсходнаяТаблица КАК ВТИсходнаяТаблица
	|	ПО ЖурналОтчетовСтатусы.Организация = ВТИсходнаяТаблица.Организация
	|		И ЖурналОтчетовСтатусы.Ссылка = ВТИсходнаяТаблица.Ссылка
	|		И ЖурналОтчетовСтатусы.Статус <> ВТИсходнаяТаблица.Статус";
	
	Запрос.УстановитьПараметр("Таблица", Источник.Выгрузить(,"Организация, Ссылка, Статус"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = "";
		ЗаголовокСообщения = "";
		ТипКонтролирующегоОргана = Строка(Выборка.ВидКонтролирующегоОргана);
		
		Если Выборка.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС
			И ТипЗнч(Выборка.Ссылка) <> Тип("ДокументСсылка.РегламентированныйОтчет")
			И ТипЗнч(Выборка.Ссылка) <> Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган")
			И ТипЗнч(Выборка.Ссылка) <> Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Статус = НСтр("ru = 'Не сдано'")
			ИЛИ  Выборка.Статус = НСтр("ru = 'Сдан частично'")
			ИЛИ  Выборка.Статус = НСтр("ru = 'Не принято в обработку'") Тогда
			ЗаголовокСообщения = НСтр("ru = 'Отчет в %2 не принят!'");
			ТекстСообщения     = НСтр("ru = 'Исправьте ошибки и отправьте отчет «%1» еще раз'");
		ИначеЕсли Выборка.Статус = НСтр("ru = 'Сдано'") Тогда
			ЗаголовокСообщения = НСтр("ru = 'Сдан отчет в %2!'");
			ТекстСообщения     = НСтр("ru = 'Отчет «%1» принят в %2'");
		ИначеЕсли Выборка.Статус = НСтр("ru = 'Сдано, требует уточнения'") Тогда
			ЗаголовокСообщения = НСтр("ru = 'Отчет в %2 сдан, но требует уточнения'");
			ТекстСообщения     = НСтр("ru = 'Подготовьте и отправьте корректирующий отчет «%1»'");
		КонецЕсли;
		
		
		ЗаголовокСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокСообщения, Выборка.НаименованиеОтчета, ТипКонтролирующегоОргана);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НаименованиеОтчета, ТипКонтролирующегоОргана);
		
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ОбменМобильноеПриложениеОбщее.ОтправитьPushУведомлениеУстройствамСНалоговымКалендарем(ЗаголовокСообщения, ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Определяет, что переданный период находится в пределах расширенного первого налогового периода -
// с даты регистрации в декабре по конец следующего года после регистрации (п. 2 статьи 55 НК РФ).
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - проверяемая организация
//  Период        - Дата - проверяемый период (в пределах расширенного налогового периода)
//
// Возвращаемое значение:
//   Булево   - Если ИСТИНА, это расширенный период
//             (организация зарегистрирована в декабре переданного или прошлого года,
//              и для нее актуальны требования п.2 статьи 55 НК РФ).
//
Функция НалоговыйПериодРасширен(Организация, Период, ДатаРегистрации = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(Организация,
		Период, Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре, , ДатаРегистрации);
	
	Возврат НалоговыйПериод.Начало < НалоговыйПериод.Период;
	
КонецФункции

// Определяет, что не требуется сдавать отчетность и уплачивать налог за переданный период (год)
// по причине регистрации организации в декабре этого года (п. 2 статьи 55 НК РФ).
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - проверяемая организация
//  Период        - Дата - проверяемый период
//
// Возвращаемое значение:
//   Булево   - Если ИСТИНА, это пропущенный период
//              (организация зарегистрирована в декабре переданного года, и для нее актуальны требования п.2 статьи 55
//              НК РФ).
//
Функция НалоговыйПериодПропущен(Организация, Период, ДатаРегистрации = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПропущенныйПериод = ИнтерфейсыВзаимодействияБРО.ПропущенныйНалоговыйПериод(
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре,
		Организация,
		ДатаРегистрации);
	
	Возврат ПропущенныйПериод <> Неопределено И (Год(ПропущенныйПериод) = Год(Период));
	
КонецФункции

Функция АдресХранилищаТабличногоДокумента(ТабДокумент, УникальныйИдентификатор) Экспорт
	
	Возврат ПоместитьВоВременноеХранилище(ТабДокумент, УникальныйИдентификатор);
	
КонецФункции

// Возвращает актуальную форму уведомления об уменьшении налога на сумму страховых взносов и больничных пособий
//
// Возвращаемое значение:
//  Строка - полный путь к форме уведомления
//
Функция ПутьКФормеУведомленияУменьшенияНалогаПСН() Экспорт
	
	ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УменьшениеНалогаНаСтраховыеВзносы;
	ИмяОтчета = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПолучитьИмяОтчетаПоВидуУведомления(
		ВидУведомления);
	
	ПутьКФорме = "Документ.УведомлениеОСпецрежимахНалогообложения.Форма.ФормаВыбораФормыОтчета";
	
	Если ЗначениеЗаполнено(ИмяОтчета) Тогда 
		Формы = Отчеты[ИмяОтчета].ПолучитьТаблицуФорм();
		Если Формы.Количество() > 1 Тогда
			Формы.Сортировать("ДатаНачала Убыв");
		КонецЕсли;
		Если ЗначениеЗаполнено(Формы) Тогда
			ИмяФормы = Формы[0].ИмяФормы;
			ПутьКФорме = СтрШаблон("Отчет.%1.Форма.%2", ИмяОтчета, ИмяФормы);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПутьКФорме;
	
КонецФункции 


#Область Форма6НДФЛ

Процедура ОписаниеПоказателей_6НДФЛ_2016Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002501", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010004001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010004501", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010005001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010006001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010007001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010008001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010009001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020012001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014001", Истина, Истина);
	
КонецПроцедуры

Процедура Заполнить6НДФЛ(ПараметрыОтчета, Контейнер) Экспорт
	
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	Организация = ПараметрыОтчета.Организация;
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	РегистрацияВНалоговомОргане = ПараметрыОтчета.РегистрацииВНО;
	
	// очищаем разделы
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_6НДФЛ_2016Кв1(ПоказателиОтчета);
	
	ДанныеРаздела1 = Контейнер.Раздел1;
	Значение = Неопределено;
	Для каждого КлючИЗначение Из ДанныеРаздела1 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			ДанныеРаздела1[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Контейнер.Раздел1_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел2_ДанныеДопСтрок.Очистить();
	 
	ОписаниеТаблиц = Новый Структура("КоличествоПолучателейДохода, Раздел1Доходы, Раздел1Вычеты, Раздел1Налоги, Раздел2");
	РасчетПоказателей_6НДФЛ_2016Кв1(НачалоПериода, ОкончаниеПериода, Организация, РегистрацияВНалоговомОргане, ОписаниеТаблиц);
	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	// Раздел 1
	
	Результат = ОписаниеТаблиц.КоличествоПолучателейДохода;
	Если Результат.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ДанныеРаздела1,Результат[0]);
	КонецЕсли;
	РезультатРаздел1Налоги = ОписаниеТаблиц.Раздел1Налоги;
	
	ВременнаяТаблица = Контейнер.Раздел1_ДанныеДопСтрок.СкопироватьКолонки();
	Для каждого СтрокаДанных Из ОписаниеТаблиц.Раздел1Доходы Цикл
		ЗаполнитьЗначенияСвойств(ВременнаяТаблица.Добавить(), СтрокаДанных);
	КонецЦикла;
	Для каждого СтрокаДанных Из ОписаниеТаблиц.Раздел1Вычеты Цикл
		ЗаполнитьЗначенияСвойств(ВременнаяТаблица.Добавить(), СтрокаДанных);
	КонецЦикла;
	Для каждого СтрокаДанных Из РезультатРаздел1Налоги Цикл
		ЗаполнитьЗначенияСвойств(ВременнаяТаблица.Добавить(), СтрокаДанных);
	КонецЦикла;
	
	РезультатРаздел1Налоги.Свернуть(,"П000010007001,П000010008001,П000010009001");
	Если РезультатРаздел1Налоги.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ДанныеРаздела1, РезультатРаздел1Налоги[0]);
	КонецЕсли;
	
	ВременнаяТаблица.Свернуть("П000010001001","П000010002001,П000010002501,П000010003001,П000010004001,П000010004501,П000010005001");
	ВременнаяТаблица.Сортировать("П000010001001");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВременнаяТаблица, Контейнер.Раздел1_ДанныеДопСтрок);
	
	// Раздел 2
	
	Для каждого СтрокаДанных Из ОписаниеТаблиц.Раздел2 Цикл
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_ДанныеДопСтрок.Добавить(), СтрокаДанных);
	КонецЦикла;
	
	
	
КонецПроцедуры


Процедура РасчетПоказателей_6НДФЛ_2016Кв1(НачалоПериода, ОкончаниеПериода, Организация, РегистрацияВНалоговомОргане, ОписаниеТаблиц, ПодробныеДанные = Ложь)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("НачалоПредыдущегоГода", ДобавитьМесяц(НачалоПериода, -12));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("НачалоПериодаКвартала", НачалоКвартала(ОкончаниеПериода));
	
	// Титульный лист
	
	Если ОписаниеТаблиц.Свойство("КоличествоПолучателейДохода") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НДФЛДоходы.Сотрудник), 0) КАК П000010006001
		|ИЗ
		|	РегистрНакопления.НДФЛДоходы КАК НДФЛДоходы
		|ГДЕ
		|	НДФЛДоходы.Период МЕЖДУ &НачалоПредыдущегоГода И &ОкончаниеПериода
		|	И НДФЛДоходы.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И НДФЛДоходы.Организация = &Организация
		|	И НДФЛДоходы.СуммаДохода <> 0";
		
		ОписаниеТаблиц.КоличествоПолучателейДохода = Запрос.Выполнить().Выгрузить()
		
	КонецЕсли;
	
	// Разделы 1 и 2 
	//
	Если ОписаниеТаблиц.Свойство("Раздел1Доходы") Или ОписаниеТаблиц.Свойство("Раздел1Вычеты") Тогда
		
		Если ОписаниеТаблиц.Свойство("Раздел1Доходы") Тогда 
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НДФЛДоходы.КодДохода.СтавкаНДФЛ КАК П000010001001,
			|	НДФЛДоходы.СуммаДохода КАК П000010002001, 
			|	0 КАК П000010002501
			|ИЗ
			|	РегистрНакопления.НДФЛДоходы КАК НДФЛДоходы
			|ГДЕ
			|	НДФЛДоходы.Период МЕЖДУ &НачалоПредыдущегоГода И &ОкончаниеПериода
			|	И НДФЛДоходы.Организация = &Организация
			|	И НДФЛДоходы.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|	И НДФЛДоходы.СуммаДохода <> 0";
			
			ОписаниеТаблиц.Раздел1Доходы = Запрос.Выполнить().Выгрузить()
		КонецЕсли;
		
		Если ОписаниеТаблиц.Свойство("Раздел1Вычеты") Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПримененныеВычетыПоНДФЛ.СуммаВычета КАК П000010003001,
			|	13 КАК П000010001001
			|ИЗ
			|	РегистрНакопления.ПримененныеВычетыПоНДФЛ КАК ПримененныеВычетыПоНДФЛ
			|ГДЕ
			|	ПримененныеВычетыПоНДФЛ.Период МЕЖДУ &НачалоПредыдущегоГода И &ОкончаниеПериода
			|	И ПримененныеВычетыПоНДФЛ.Организация = &Организация
			|	И ПримененныеВычетыПоНДФЛ.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|	И ПримененныеВычетыПоНДФЛ.СуммаВычета <> 0";
			
			ОписаниеТаблиц.Раздел1Вычеты = Запрос.Выполнить().Выгрузить();
		
		КонецЕсли;
		
	КонецЕсли;
		
	
	Если ОписаниеТаблиц.Свойство("Раздел1Налоги") Или ОписаниеТаблиц.Свойство("Раздел2") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	13 КАК П000010001001,
		|	ВЫБОР
		|		КОГДА НДФЛРасчетыНалоговыхАгентовСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА СУММА(НДФЛРасчетыНалоговыхАгентовСБюджетом.Сумма)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК П000010004001,
		|	0 КАК П000010008001,
		|	0 КАК П000010004501,
		|	0 КАК П000010005001,
		|	ВЫБОР
		|		КОГДА НДФЛРасчетыНалоговыхАгентовСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|			ТОГДА СУММА(НДФЛРасчетыНалоговыхАгентовСБюджетом.Сумма)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК П000010007001,
		|	0 КАК П000010009001
		|ИЗ
		|	РегистрНакопления.НДФЛРасчетыНалоговыхАгентовСБюджетом КАК НДФЛРасчетыНалоговыхАгентовСБюджетом
		|ГДЕ
		|	НДФЛРасчетыНалоговыхАгентовСБюджетом.Период МЕЖДУ &НачалоПредыдущегоГода И &ОкончаниеПериода
		|	И НДФЛРасчетыНалоговыхАгентовСБюджетом.Организация = &Организация
		|	И НДФЛРасчетыНалоговыхАгентовСБюджетом.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛРасчетыНалоговыхАгентовСБюджетом.ВидДвижения";
		
		
		ОписаниеТаблиц.Раздел1Налоги = Запрос.Выполнить().Выгрузить();
		
		
		Если ОписаниеТаблиц.Свойство("Раздел2") Тогда
			
			// •	с аванса, то есть зарплаты за первую половину месяца, - день выплаты зарплаты за его вторую половину 
			// (Письма Минфина от 11.06.2019 N 21-08-11/42596, ФНС от 26.05.2014 N БС-4-11/10126@);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	МАКСИМУМ(КОНЕЦПЕРИОДА(РасчетыСПерсоналом.Период, ДЕНЬ)) КАК ДатаВыплаты,
			|	РасчетыСПерсоналом.ПериодРегистрации КАК ПериодРегистрации
			|ПОМЕСТИТЬ ВТВыплатаПерсоналу
			|ИЗ
			|	РегистрНакопления.РасчетыСПерсоналом КАК РасчетыСПерсоналом
			|ГДЕ
			|	РасчетыСПерсоналом.Период МЕЖДУ &НачалоПредыдущегоГода И &ОкончаниеПериода
			|	И РасчетыСПерсоналом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	И РасчетыСПерсоналом.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|	И РасчетыСПерсоналом.Регистратор.Организация = &Организация
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСПерсоналом.ПериодРегистрации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КОНЕЦПЕРИОДА(НДФЛДоходы.ПериодРегистрации, МЕСЯЦ) КАК П000020010001,
			|	НДФЛДоходы.ПериодРегистрации КАК ПериодРегистрации,
			|	СУММА(НДФЛДоходы.СуммаДохода) КАК СуммаДохода
			|ПОМЕСТИТЬ ВТНачисленияПерсоналу
			|ИЗ
			|	РегистрНакопления.НДФЛДоходы КАК НДФЛДоходы
			|ГДЕ
			|	НДФЛДоходы.Период МЕЖДУ &НачалоПредыдущегоГода И &ОкончаниеПериода
			|	И НДФЛДоходы.Организация = &Организация
			|	И НДФЛДоходы.СуммаДохода <> 0
			|	И НДФЛДоходы.ПериодРегистрации МЕЖДУ &НачалоПериодаКвартала И &ОкончаниеПериода
			|
			|СГРУППИРОВАТЬ ПО
			|	НДФЛДоходы.ПериодРегистрации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НДФЛРасчетыНалоговыхАгентовСБюджетом.ПериодРегистрации КАК ПериодРегистрации,
			|	СУММА(НДФЛРасчетыНалоговыхАгентовСБюджетом.Сумма) КАК П000020014001
			|ПОМЕСТИТЬ ВТНДФЛНачисления
			|ИЗ
			|	РегистрНакопления.НДФЛРасчетыНалоговыхАгентовСБюджетом КАК НДФЛРасчетыНалоговыхАгентовСБюджетом
			|ГДЕ
			|	НДФЛРасчетыНалоговыхАгентовСБюджетом.ПериодРегистрации МЕЖДУ &НачалоПериодаКвартала И &ОкончаниеПериода
			|	И НДФЛРасчетыНалоговыхАгентовСБюджетом.Организация = &Организация
			|	И НДФЛРасчетыНалоговыхАгентовСБюджетом.Сумма <> 0
			|	И НДФЛРасчетыНалоговыхАгентовСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	И НДФЛРасчетыНалоговыхАгентовСБюджетом.Период МЕЖДУ &НачалоПериодаКвартала И &ОкончаниеПериода
			|
			|СГРУППИРОВАТЬ ПО
			|	НДФЛРасчетыНалоговыхАгентовСБюджетом.ПериодРегистрации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НДФЛДоходы.П000020010001 КАК П000020010001,
			|	НДФЛДоходы.СуммаДохода КАК П000020013001,
			|	НДФЛНачисления.П000020014001 КАК П000020014001,
			|	ВТВыплатаПерсоналу.ДатаВыплаты КАК П000020011001,
			|	ДОБАВИТЬКДАТЕ(ВТВыплатаПерсоналу.ДатаВыплаты, ДЕНЬ, 1) КАК П000020012001
			|ИЗ
			|	ВТНачисленияПерсоналу КАК НДФЛДоходы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛНачисления КАК НДФЛНачисления
			|		ПО (НДФЛНачисления.ПериодРегистрации = НДФЛДоходы.ПериодРегистрации)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыплатаПерсоналу КАК ВТВыплатаПерсоналу
			|		ПО (ВТВыплатаПерсоналу.ПериодРегистрации = НДФЛДоходы.ПериодРегистрации)
			|
			|УПОРЯДОЧИТЬ ПО
			|	П000020010001,
			|	П000020011001,
			|	П000020012001";
			
			ОписаниеТаблиц.Раздел2 = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОписаниеПоказателей_6НДФЛ_2021Кв1(ПоказателиОтчета) Экспорт
	
	
	// Раздел 1
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00001М102101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00001М102201", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00001М203101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00001М203201", Истина, Истина);
	
	// Раздел 2
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010501", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020012003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020017003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020018003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020019003", Истина, Истина);
	
	// Приложение 1

КонецПроцедуры

Процедура ЗначенияПоказателей_6НДФЛ_2021Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	Организация = ПараметрыОтчета.Организация;
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	НомерКорректировки = ПараметрыОтчета.НомерКорректировки;
	Если ПараметрыОтчета.Свойство("РегистрацииВНО") Тогда
		РегистрацияВНалоговомОргане = ПараметрыОтчета.РегистрацииВНО;
	Иначе
		ТитульныйЛист = Контейнер.Титульный;
		ПараметрыОтбораРегистрацийВНО = Новый Структура;
		ПараметрыОтбораРегистрацийВНО.Вставить("КодНО", ТитульныйЛист.НалоговыйОрган);
		ПараметрыОтбораРегистрацийВНО.Вставить("ОКТМО", ТитульныйЛист.ОКТМО);
		Если СтрДлина(ТитульныйЛист.ИНН) = 10 Тогда
			ПараметрыОтбораРегистрацийВНО.Вставить("КПП", ТитульныйЛист.КПП);
		КонецЕсли;
		//РегистрацияВНалоговомОргане = РегламентированнаяОтчетность.РегистрацииОрганизацииВНалоговомОргане(Организация, ПараметрыОтбораРегистрацийВНО);
		РегистрацияВНалоговомОргане = РегламентированнаяОтчетность.РегистрацииОрганизацииВНалоговомОргане(Организация, Неопределено);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Возврат
	КонецЕсли;
	                         
	// Очистка отчета
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_6НДФЛ_2021Кв1(ПоказателиОтчета);
	
	ДанныеРаздела1 = Контейнер.Раздел1.Строки;
	ПоляКБК = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеРаздела1[0].Данные); 
	ПоляСуммКПеречислению = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеРаздела1[0].ДанныеМногострочныхЧастей.П00001М1.Строки[0].Данные);
	ПоляСуммВозврата = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеРаздела1[0].ДанныеМногострочныхЧастей.П00001М2.Строки[0].Данные);
	ДанныеРаздела1.Очистить();
	ОчиститьПоляСтруктурыПоказателей(ПоказателиОтчета, ПоляКБК);
	ОчиститьПоляСтруктурыПоказателей(ПоказателиОтчета, ПоляСуммКПеречислению);
	ОчиститьПоляСтруктурыПоказателей(ПоказателиОтчета, ПоляСуммВозврата);
	
	ДанныеРаздела2 = Контейнер.Раздел2.Строки;
	ПоляРаздела2 = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеРаздела2[0].Данные); 
	ДанныеРаздела2.Очистить();
	ОчиститьПоляСтруктурыПоказателей(ПоказателиОтчета, ПоляРаздела2);
	
	// Сбор данных
	ОписаниеТаблиц = Новый Структура("КоличествоПолучателейДохода, Раздел1Налоги, Раздел1Возвраты, Раздел2Доходы, Раздел2Вычеты, Раздел2Налоги, КоличествоПолучателейДохода");
	РасчетПоказателей_6НДФЛ_2021Кв1(НачалоПериода, ОкончаниеПериода, ?(ПараметрыОтчета.ДатаПодписи > ОкончаниеПериода,ПараметрыОтчета.ДатаПодписи, ОкончаниеПериода), Организация, РегистрацияВНалоговомОргане, ОписаниеТаблиц, Ложь, НомерКорректировки);	
	
	// Вывод данных в отчет
	
	ВсеКБК = Новый Массив;
	ВсеКБК.Добавить("18210102010011000110");
	ВсеКБК.Добавить("18210102060011000110");
	ВсеКБК.Добавить("18210102070011000110");
	ВсеКБК.Добавить("18210102080011000110");
	ПоискПоКБК = Новый Структура("КБК");
	
	// Раздел 1
	Налоги = ОписаниеТаблиц.Раздел1Налоги;
	Возвраты = ОписаниеТаблиц.Раздел1Возвраты;
	Для каждого КБК Из ВсеКБК Цикл
		
		ПоискПоКБК.КБК = КБК;
		СтрокиНалогов = Налоги.НайтиСтроки(ПоискПоКБК);
		СтрокиВозвратов = Возвраты.НайтиСтроки(ПоискПоКБК);
		
		Если СтрокиНалогов.Количество() > 0 Или СтрокиВозвратов.Количество() > 0 Тогда
			СтраницаРаздела1 = ДанныеРаздела1.Добавить();
			СтраницаРаздела1.Данные = ОбщегоНазначения.СкопироватьРекурсивно(ПоляКБК);
			СтраницаРаздела1.Данные.П000010001001 = КБК;
			СтраницаРаздела1.ДанныеМногострочныхЧастей = Новый Структура("П00001М1,П00001М2", НовоеПустоеДеревоДляОтчета(), НовоеПустоеДеревоДляОтчета());
			Если СтрокиНалогов.Количество() = 0 Тогда
				НоваяСтрокаСуммКПеречислению = СтраницаРаздела1.ДанныеМногострочныхЧастей.П00001М1.Строки.Добавить();
				НоваяСтрокаСуммКПеречислению.Данные = ОбщегоНазначения.СкопироватьРекурсивно(ПоляСуммКПеречислению);
			КонецЕсли;
			Если СтрокиВозвратов.Количество() = 0 Тогда
				НоваяСтрокаСуммВозврата = СтраницаРаздела1.ДанныеМногострочныхЧастей.П00001М2.Строки.Добавить();
				НоваяСтрокаСуммВозврата.Данные = ОбщегоНазначения.СкопироватьРекурсивно(ПоляСуммВозврата);
			КонецЕсли;
		КонецЕсли;
		Для каждого СтрокаНалогов Из СтрокиНалогов Цикл
			НоваяСтрокаСуммКПеречислению = СтраницаРаздела1.ДанныеМногострочныхЧастей.П00001М1.Строки.Добавить();
			НоваяСтрокаСуммКПеречислению.Данные = ОбщегоНазначения.СкопироватьРекурсивно(ПоляСуммКПеречислению);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСуммКПеречислению.Данные, СтрокаНалогов);
		КонецЦикла;
		Для каждого СтрокаВозвратов Из СтрокиВозвратов Цикл
			НоваяСтрокаСуммВозврата = СтраницаРаздела1.ДанныеМногострочныхЧастей.П00001М2.Строки.Добавить();
			НоваяСтрокаСуммВозврата.Данные = ОбщегоНазначения.СкопироватьРекурсивно(ПоляСуммВозврата);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСуммВозврата.Данные, СтрокаВозвратов);
		КонецЦикла;
		
	КонецЦикла;
	Если ДанныеРаздела1.Количество() = 0 Тогда
		СтраницаРаздела1 = ДанныеРаздела1.Добавить();
		СтраницаРаздела1.Данные = ОбщегоНазначения.СкопироватьРекурсивно(ПоляКБК);
		СтраницаРаздела1.ДанныеМногострочныхЧастей = Новый Структура("П00001М1,П00001М2", НовоеПустоеДеревоДляОтчета(), НовоеПустоеДеревоДляОтчета());
		СтраницаРаздела1.ДанныеМногострочныхЧастей.П00001М1.Строки.Добавить().Данные = ОбщегоНазначения.СкопироватьРекурсивно(ПоляСуммКПеречислению);
		СтраницаРаздела1.ДанныеМногострочныхЧастей.П00001М2.Строки.Добавить().Данные = ОбщегоНазначения.СкопироватьРекурсивно(ПоляСуммВозврата);
	КонецЕсли;
	
	// Раздел 2
	Доходы = ОписаниеТаблиц.Раздел2Доходы;
	Вычеты = ОписаниеТаблиц.Раздел2Вычеты;
	Налоги = ОписаниеТаблиц.Раздел2Налоги;
	Количество = ОписаниеТаблиц.КоличествоПолучателейДохода;
	ПоискПоКБКиСтавке = Новый Структура("КБК,Ставка");
	Для каждого Ставка Из Перечисления.НДФЛСтавки Цикл
		ПоискПоКБКиСтавке.Ставка = Ставка;
		Для каждого КБК Из ВсеКБК Цикл
			
			ПоискПоКБКиСтавке.КБК = КБК;
			СтрокиДоходов = Доходы.НайтиСтроки(ПоискПоКБКиСтавке);
			СтрокиВычетов = Вычеты.НайтиСтроки(ПоискПоКБКиСтавке);
			СтрокиНалогов = Налоги.НайтиСтроки(ПоискПоКБКиСтавке);
			СтрокиКоличества = Количество.НайтиСтроки(ПоискПоКБКиСтавке);
			
			Если СтрокиДоходов.Количество() > 0 Или СтрокиНалогов.Количество() > 0 Или СтрокиВычетов.Количество() > 0 Тогда
				СтраницаРаздела = ДанныеРаздела2.Добавить();
				СтраницаРаздела.Данные = ОбщегоНазначения.СкопироватьРекурсивно(ПоляРаздела2);
				СтраницаРаздела.Данные.П000020010501 = КБК;
				Если Ставка = Перечисления.НДФЛСтавки.Ставка09 Тогда
					 СтраницаРаздела.Данные.П000020010001 = 9
				ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка13 Тогда
					 СтраницаРаздела.Данные.П000020010001 = 13
				ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка15 Тогда
					 СтраницаРаздела.Данные.П000020010001 = 15
				ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка30 Тогда
					 СтраницаРаздела.Данные.П000020010001 = 30
				ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка35 Тогда
					 СтраницаРаздела.Данные.П000020010001 = 35
				Иначе
					
				КонецЕсли;
				СтраницаРаздела.ДанныеМногострочныхЧастей = Новый Структура();
			КонецЕсли;
			Для каждого СтрокаДанных Из СтрокиДоходов Цикл
				ЗаполнитьЗначенияСвойств(СтраницаРаздела.Данные, СтрокаДанных);
				Прервать;
			КонецЦикла;
			Для каждого СтрокаДанных Из СтрокиНалогов Цикл
				ЗаполнитьЗначенияСвойств(СтраницаРаздела.Данные, СтрокаДанных);
				Прервать;
			КонецЦикла;
			Для каждого СтрокаДанных Из СтрокиВычетов Цикл
				ЗаполнитьЗначенияСвойств(СтраницаРаздела.Данные, СтрокаДанных);
				Прервать;
			КонецЦикла;
			Для каждого СтрокаДанных Из СтрокиКоличества Цикл
				ЗаполнитьЗначенияСвойств(СтраницаРаздела.Данные, СтрокаДанных);
				Прервать;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	Если ДанныеРаздела2.Количество() = 0 Тогда
		СтраницаРаздела = ДанныеРаздела2.Добавить();
		СтраницаРаздела.Данные = ОбщегоНазначения.СкопироватьРекурсивно(ПоляРаздела2);
		СтраницаРаздела.ДанныеМногострочныхЧастей = Новый Структура();
	КонецЕсли;
		
КонецПроцедуры

Процедура РасчетПоказателей_6НДФЛ_2021Кв1(НачалоПериода, ОкончаниеПериода, ДатаПодписи, Организация, РегистрацияВНалоговомОргане, ОписаниеТаблиц, ПодробныеДанные = Ложь, НомерКорректировки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("НачалоПредыдущегоГода", ДобавитьМесяц(НачалоПериода, -12));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(НачалоПериода));
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("ДатаПодписи", КонецДня(ДатаПодписи));
	Запрос.УстановитьПараметр("КБКсПревышения", "18210102080011000110");
	Запрос.УстановитьПараметр("ОсновнойКБК", "18210102010011000110");
	Запрос.УстановитьПараметр("КБКПоОблигациям", "18210102070011000110");
	Запрос.УстановитьПараметр("НачалоОтчетногоКвартала", НачалоКвартала(ОкончаниеПериода));
	Запрос.УстановитьПараметр("ОкончаниеПериодаОсмотраДоходовВычетов", ?(КонецГода(ОкончаниеПериода) = ОкончаниеПериода Или ЗначениеЗаполнено(НомерКорректировки), Макс(ДатаПодписи, ОкончаниеПериода), ОкончаниеПериода));
	
	Если ОписаниеТаблиц.Свойство("Раздел1Налоги") Или ОписаниеТаблиц.Свойство("Раздел2Налоги") Или ОписаниеТаблиц.Свойство("Раздел1Возвраты") Тогда
		
		Запрос.Текст =
		
		"ВЫБРАТЬ
		|	НДФЛРасчетыНалоговыхАгентовСБюджетом.ВидДвижения КАК ВидДвижения,
		|	НДФЛРасчетыНалоговыхАгентовСБюджетом.Сумма КАК Сумма,
		|	НДФЛРасчетыНалоговыхАгентовСБюджетом.СуммаСПревышения КАК СуммаСПревышения,
		|	&ОсновнойКБК КАК КБК,
		|	НДФЛРасчетыНалоговыхАгентовСБюджетом.Период КАК Период,
		|	НДФЛРасчетыНалоговыхАгентовСБюджетом.ПериодРегистрации КАК ПериодРегистрации,
		|	НДФЛРасчетыНалоговыхАгентовСБюджетом.Регистратор.Дата КАК ДатаУдержания,
		|	НДФЛРасчетыНалоговыхАгентовСБюджетом.Регистратор КАК Регистратор,
		|	НДФЛРасчетыНалоговыхАгентовСБюджетом.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТНалогиБезВыплат
		|ИЗ
		|	РегистрНакопления.НДФЛРасчетыНалоговыхАгентовСБюджетом КАК НДФЛРасчетыНалоговыхАгентовСБюджетом
		|ГДЕ
		|	НДФЛРасчетыНалоговыхАгентовСБюджетом.Период МЕЖДУ &НачалоПредыдущегоГода И &ДатаПодписи
		|	И НДФЛРасчетыНалоговыхАгентовСБюджетом.Организация = &Организация
		|	И (НДФЛРасчетыНалоговыхАгентовСБюджетом.Сумма > 0
		|			ИЛИ НДФЛРасчетыНалоговыхАгентовСБюджетом.СуммаСПревышения > 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(КОНЕЦПЕРИОДА(РасчетыСПерсоналом.Период, ДЕНЬ)) КАК ДатаУдержания,
		|	РасчетыСПерсоналом.ПериодРегистрации КАК ПериодРегистрации,
		|	МИНИМУМ(ВложенныйЗапрос.Дата) КАК КрайнийСрокУплаты,
		|	РасчетыСПерсоналом.Регистратор КАК Регистратор,
		|	РасчетыСПерсоналом.Сотрудник КАК Сотрудник,
		|	РасчетыСПерсоналом.Регистратор.ДокументОснование КАК РегистраторДокументОснование,
		|	РасчетыСПерсоналом.Регистратор.ДокументОснование.ВидОперации КАК РегистраторДокументОснованиеВидОперации
		|ПОМЕСТИТЬ ВТВыплатаПерсоналу
		|ИЗ
		|	РегистрНакопления.РасчетыСПерсоналом КАК РасчетыСПерсоналом
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДанныеПроизводственногоКалендаря.Дата КАК Дата
		|		ИЗ
		|			РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ГДЕ
		|			(ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|					ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))) КАК ВложенныйЗапрос
		|		ПО (ВложенныйЗапрос.Дата >= КОНЕЦПЕРИОДА(РасчетыСПерсоналом.Период, ДЕНЬ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходИзКассы.ВыплатаЗаработнойПлаты КАК РасходИзКассыВыплатаЗаработнойПлаты
		|		ПО РасчетыСПерсоналом.Регистратор = РасходИзКассыВыплатаЗаработнойПлаты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходСоСчета.ВыплатаЗаработнойПлаты КАК РасходСоСчетаВыплатаЗаработнойПлаты
		|		ПО РасчетыСПерсоналом.Регистратор = РасходСоСчетаВыплатаЗаработнойПлаты.Ссылка
		|ГДЕ
		|	КОНЕЦПЕРИОДА(РасчетыСПерсоналом.Период, ДЕНЬ) МЕЖДУ &НачалоПредыдущегоГода И &ОкончаниеПериода
		|	И РасчетыСПерсоналом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыСПерсоналом.Регистратор.Организация = &Организация
		|	И ВЫБОР
		|			КОГДА РасчетыСПерсоналом.Регистратор.ДокументОснование.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежнаяВедомость.Аванс)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА РасходИзКассыВыплатаЗаработнойПлаты.Ведомость.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежнаяВедомость.Аванс)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА РасходСоСчетаВыплатаЗаработнойПлаты.Ведомость.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежнаяВедомость.Аванс)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПерсоналом.ПериодРегистрации,
		|	РасчетыСПерсоналом.Регистратор,
		|	РасчетыСПерсоналом.Сотрудник,
		|	РасчетыСПерсоналом.Регистратор.ДокументОснование,
		|	РасчетыСПерсоналом.Регистратор.ДокументОснование.ВидОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНалоги.ВидДвижения КАК ВидДвижения,
		|	ВТНалоги.Сумма КАК Сумма,
		|	ВТНалоги.СуммаСПревышения КАК СуммаСПревышения,
		|	ВТНалоги.КБК КАК КБК,
		|	МАКСИМУМ(ВТВыплатаПерсоналу.ДатаУдержания) КАК ДатаУдержания,
		|	ВТВыплатаПерсоналу.ПериодРегистрации КАК ПериодРегистрации,
		|	МАКСИМУМ(ВТВыплатаПерсоналу.КрайнийСрокУплаты) КАК КрайнийСрокУплаты,
		|	МАКСИМУМ(ВТНалоги.Период) КАК Период,
		|	ВТНалоги.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТНалоги
		|ИЗ
		|	ВТВыплатаПерсоналу КАК ВТВыплатаПерсоналу
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНалогиБезВыплат КАК ВТНалоги
		|		ПО (ВТНалоги.ПериодРегистрации = ВТВыплатаПерсоналу.ПериодРегистрации)
		|			И ВТВыплатаПерсоналу.Сотрудник = ВТНалоги.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТНалоги.ВидДвижения,
		|	ВТНалоги.Сумма,
		|	ВТНалоги.СуммаСПревышения,
		|	ВТНалоги.КБК,
		|	ВТВыплатаПерсоналу.ПериодРегистрации,
		|	ВТНалоги.Регистратор"; 
		
		Запрос.Выполнить(); 
	
	Если ОписаниеТаблиц.Свойство("Раздел1Налоги") Тогда
		
		Если НачалоКвартала(ОкончаниеПериода) = '20210101' Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СтрокиНалогов.КБК КАК КБК,
			|	МАКСИМУМ(СтрокиНалогов.КрайнийСрокУплаты) КАК СрокПеречисленияНалога,
			|	МАКСИМУМ(СтрокиНалогов.КрайнийСрокУплаты) КАК П00001М102101,
			|	СУММА(СтрокиНалогов.Сумма) КАК П00001М102201,
			|	МАКСИМУМ(СтрокиНалогов.ПериодРегистрации) КАК ПериодРегистрации,
			|	СтрокиНалогов.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ ВТСтрокиНалогов
			|ИЗ
			|	ВТНалоги КАК СтрокиНалогов
			|ГДЕ
			|	СтрокиНалогов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И СтрокиНалогов.ДатаУдержания МЕЖДУ &НачалоОтчетногоКвартала И &ОкончаниеПериода
			|
			|СГРУППИРОВАТЬ ПО
			|	СтрокиНалогов.КБК,
			|	СтрокиНалогов.Регистратор
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&КБКсПревышения,
			|	СтрокиНалогов.КрайнийСрокУплаты,
			|	СтрокиНалогов.КрайнийСрокУплаты,
			|	СУММА(СтрокиНалогов.СуммаСПревышения),
			|	NULL,
			|	NULL
			|ИЗ
			|	ВТНалоги КАК СтрокиНалогов
			|ГДЕ
			|	СтрокиНалогов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И СтрокиНалогов.ДатаУдержания МЕЖДУ &НачалоОтчетногоКвартала И &ОкончаниеПериода
			|
			|СГРУППИРОВАТЬ ПО
			|	СтрокиНалогов.КрайнийСрокУплаты,
			|	СтрокиНалогов.КрайнийСрокУплаты
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СтрокиНалогов.КБК,
			|	СтрокиНалогов.КрайнийСрокУплаты,
			|	СтрокиНалогов.КрайнийСрокУплаты,
			|	СУММА(СтрокиНалогов.Сумма),
			|	NULL,
			|	NULL
			|ИЗ
			|	ВТНалоги КАК СтрокиНалогов
			|ГДЕ
			|	СтрокиНалогов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И СтрокиНалогов.КрайнийСрокУплаты >= ДАТАВРЕМЯ(2021, 1, 1, 0, 0, 0)
			|	И СтрокиНалогов.ДатаУдержания < ДАТАВРЕМЯ(2021, 1, 1, 0, 0, 0)
			|
			|СГРУППИРОВАТЬ ПО
			|	СтрокиНалогов.КрайнийСрокУплаты,
			|	СтрокиНалогов.КБК,
			|	СтрокиНалогов.КрайнийСрокУплаты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НалогиПоДатам.КБК КАК КБК,
			|	НалогиПоДатам.СрокПеречисленияНалога КАК СрокПеречисленияНалога,
			|	НалогиПоДатам.П00001М102101 КАК П00001М102101,
			|	СУММА(НалогиПоДатам.П00001М102201) КАК П00001М102201
			|ИЗ
			|	ВТСтрокиНалогов КАК НалогиПоДатам
			|
			|СГРУППИРОВАТЬ ПО
			|	НалогиПоДатам.КБК,
			|	НалогиПоДатам.П00001М102101,
			|	НалогиПоДатам.СрокПеречисленияНалога
			|
			|ИМЕЮЩИЕ
			|	СУММА(НалогиПоДатам.П00001М102201) > 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	СрокПеречисленияНалога";
			
		Иначе	
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СтрокиНалогов.КБК КАК КБК,
			|	МАКСИМУМ(СтрокиНалогов.КрайнийСрокУплаты) КАК СрокПеречисленияНалога,
			|	МАКСИМУМ(СтрокиНалогов.КрайнийСрокУплаты) КАК П00001М102101,
			|	СУММА(СтрокиНалогов.Сумма) КАК П00001М102201,
			|	МАКСИМУМ(СтрокиНалогов.ПериодРегистрации) КАК ПериодРегистрации,
			|	СтрокиНалогов.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ ВТСтрокиНалогов
			|ИЗ
			|	ВТНалоги КАК СтрокиНалогов
			|ГДЕ
			|	СтрокиНалогов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И СтрокиНалогов.ДатаУдержания МЕЖДУ &НачалоОтчетногоКвартала И &ОкончаниеПериода
			|
			|СГРУППИРОВАТЬ ПО
			|	СтрокиНалогов.КБК,
			|	СтрокиНалогов.Регистратор
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&КБКсПревышения,
			|	СтрокиНалогов.КрайнийСрокУплаты,
			|	СтрокиНалогов.КрайнийСрокУплаты,
			|	СУММА(СтрокиНалогов.СуммаСПревышения),
			|	NULL,
			|	NULL
			|ИЗ
			|	ВТНалоги КАК СтрокиНалогов
			|ГДЕ
			|	СтрокиНалогов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И СтрокиНалогов.ДатаУдержания МЕЖДУ &НачалоОтчетногоКвартала И &ОкончаниеПериода
			|
			|СГРУППИРОВАТЬ ПО
			|	СтрокиНалогов.КрайнийСрокУплаты,
			|	СтрокиНалогов.КрайнийСрокУплаты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НалогиПоДатам.КБК КАК КБК,
			|	НалогиПоДатам.СрокПеречисленияНалога КАК СрокПеречисленияНалога,
			|	НалогиПоДатам.П00001М102101 КАК П00001М102101,
			|	СУММА(НалогиПоДатам.П00001М102201) КАК П00001М102201
			|ИЗ
			|	ВТСтрокиНалогов КАК НалогиПоДатам
			|
			|СГРУППИРОВАТЬ ПО
			|	НалогиПоДатам.КБК,
			|	НалогиПоДатам.П00001М102101,
			|	НалогиПоДатам.СрокПеречисленияНалога
			|
			|ИМЕЮЩИЕ
			|	СУММА(НалогиПоДатам.П00001М102201) > 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	СрокПеречисленияНалога";
			
		КонецЕсли; 
		
		ОписаниеТаблиц.Раздел1Налоги = Запрос.Выполнить().Выгрузить(); 
		
	КонецЕсли;
	
	КонецЕсли;

	//возвратов нет
	Возвраты = Новый ТаблицаЗначений;
	Возвраты.Колонки.Добавить("КБК");
	Возвраты.Колонки.Добавить("П00001М203101");
	Возвраты.Колонки.Добавить("П00001М203201");	
	
	ОписаниеТаблиц.Раздел1Возвраты = Возвраты; 
	
	Если ОписаниеТаблиц.Свойство("Раздел2Доходы") Или ОписаниеТаблиц.Свойство("Раздел2Вычеты") Или ОписаниеТаблиц.Свойство("КоличествоПолучателейДохода") Тогда		
		
		Если ОписаниеТаблиц.Свойство("КоличествоПолучателейДохода") Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	&ОсновнойКБК КАК КБК,
			|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13) КАК Ставка,
			|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НДФЛДоходы.Сотрудник), 0) КАК П000020012003
			|ИЗ
			|	РегистрНакопления.НДФЛДоходы КАК НДФЛДоходы
			|ГДЕ
			|	НДФЛДоходы.Период МЕЖДУ &НачалоПредыдущегоГода И &ОкончаниеПериода
			|	И НДФЛДоходы.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|	И НДФЛДоходы.Организация = &Организация
			|	И НДФЛДоходы.СуммаДохода <> 0";
			
			ОписаниеТаблиц.КоличествоПолучателейДохода = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
	
		Если ОписаниеТаблиц.Свойство("Раздел2Доходы") Тогда 			
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	МАКСИМУМ(ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)) КАК Ставка,
			|	НДФЛДоходы.КодДохода.СтавкаНДФЛ КАК СтавкаНалога,
			|	МАКСИМУМ(&ОсновнойКБК) КАК КБК,
			|	ВЫБОР
			|		КОГДА НДФЛДоходы.КодДохода = ЗНАЧЕНИЕ(Справочник.КодыДоходовНДФЛ.Код2000)
			|			ТОГДА НДФЛДоходы.СуммаДохода
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК П000020011203,
			|	ВЫБОР
			|		КОГДА НДФЛДоходы.КодДохода = ЗНАЧЕНИЕ(Справочник.КодыДоходовНДФЛ.Код2010)
			|			ТОГДА НДФЛДоходы.СуммаДохода
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК П000020011303,
			|	НДФЛДоходы.СуммаДохода КАК П000020011003,
			|	СУММА(0) КАК П000020011103,
			|	НДФЛДоходы.Сотрудник КАК Сотрудник,
			|	НДФЛДоходы.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ ВТДоходы
			|ИЗ
			|	РегистрНакопления.НДФЛДоходы КАК НДФЛДоходы
			|ГДЕ
			|	НДФЛДоходы.Период МЕЖДУ &НачалоПредыдущегоГода И &ОкончаниеПериода
			|	И НДФЛДоходы.Организация = &Организация
			|	И НДФЛДоходы.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|	И НДФЛДоходы.СуммаДохода <> 0
			|
			|СГРУППИРОВАТЬ ПО
			|	НДФЛДоходы.КодДохода.СтавкаНДФЛ,
			|	НДФЛДоходы.СуммаДохода,
			|	ВЫБОР
			|		КОГДА НДФЛДоходы.КодДохода = ЗНАЧЕНИЕ(Справочник.КодыДоходовНДФЛ.Код2000)
			|			ТОГДА НДФЛДоходы.СуммаДохода
			|		ИНАЧЕ 0
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА НДФЛДоходы.КодДохода = ЗНАЧЕНИЕ(Справочник.КодыДоходовНДФЛ.Код2010)
			|			ТОГДА НДФЛДоходы.СуммаДохода
			|		ИНАЧЕ 0
			|	КОНЕЦ,
			|	НДФЛДоходы.Сотрудник,
			|	НДФЛДоходы.Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТДоходы.Ставка КАК Ставка,
			|	ВТДоходы.СтавкаНалога КАК СтавкаНалога,
			|	ВТДоходы.КБК КАК КБК,
			|	СУММА(ВТДоходы.П000020011203) КАК П000020011203,
			|	СУММА(ВТДоходы.П000020011303) КАК П000020011303,
			|	СУММА(ВТДоходы.П000020011003) КАК П000020011003,
			|	СУММА(ВТДоходы.П000020011103) КАК П000020011103
			|ИЗ
			|	ВТДоходы КАК ВТДоходы
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТДоходы.Ставка,
			|	ВТДоходы.СтавкаНалога,
			|	ВТДоходы.КБК";
			
			ОписаниеТаблиц.Раздел2Доходы = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
		Если ОписаниеТаблиц.Свойство("Раздел2Вычеты") Тогда			
			
			Запрос.Текст = "ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13) КАК Ставка,
			|	&ОсновнойКБК КАК КБК,
			|	13 КАК СтавкаНалога,
			|	СУММА(ПримененныеВычетыПоНДФЛ.СуммаВычета) КАК П000020013003
			|ИЗ
			|	РегистрНакопления.ПримененныеВычетыПоНДФЛ КАК ПримененныеВычетыПоНДФЛ
			|ГДЕ
			|	ПримененныеВычетыПоНДФЛ.Период МЕЖДУ &НачалоПредыдущегоГода И &ОкончаниеПериода
			|	И ПримененныеВычетыПоНДФЛ.Организация = &Организация
			|	И ПримененныеВычетыПоНДФЛ.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|	И ПримененныеВычетыПоНДФЛ.СуммаВычета <> 0";
				
			ОписаниеТаблиц.Раздел2Вычеты = Запрос.Выполнить().Выгрузить()
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("Раздел2Налоги") Тогда 
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	13 КАК СтавкаНалога,
		|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13) КАК Ставка,
		|	ВЫБОР
		|		КОГДА ВТНалогиБезВыплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И (ВТНалогиБезВыплат.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|			ТОГДА СУММА(ВТНалогиБезВыплат.Сумма)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК П000020014003,
		|	0 КАК П000020014103,
		|	0 КАК П000020015003,
		|	ВЫБОР
		|		КОГДА ВТНалогиБезВыплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				И (ВТНалогиБезВыплат.ДатаУдержания МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|			ТОГДА СУММА(ВТНалогиБезВыплат.Сумма)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК П000020016003,
		|	СУММА(ВЫБОР
		|			КОГДА ВТНалогиБезВыплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					И (ВТНалогиБезВыплат.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|				ТОГДА ВТНалогиБезВыплат.Сумма
		|			КОГДА ВТНалогиБезВыплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И (ВТНалогиБезВыплат.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|				ТОГДА -ВТНалогиБезВыплат.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000020017003,
		|	0 КАК П000020019003,
		|	0 КАК П000020018003,
		|	&ОсновнойКБК КАК КБК
		|ПОМЕСТИТЬ ВТНалогиПоСтавкам
		|ИЗ
		|	ВТНалогиБезВыплат КАК ВТНалогиБезВыплат
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТНалогиБезВыплат.ВидДвижения,
		|	ВТНалогиБезВыплат.Период,
		|	ВТНалогиБезВыплат.ПериодРегистрации,
		|	ВТНалогиБезВыплат.ДатаУдержания
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	15,
		|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15),
		|	ВЫБОР
		|		КОГДА ВТНалогиБезВыплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И (ВТНалогиБезВыплат.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|			ТОГДА СУММА(ВТНалогиБезВыплат.СуммаСПревышения)
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	0,
		|	0,
		|	ВЫБОР
		|		КОГДА ВТНалогиБезВыплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				И (ВТНалогиБезВыплат.ДатаУдержания МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|			ТОГДА СУММА(ВТНалогиБезВыплат.СуммаСПревышения)
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	СУММА(ВЫБОР
		|			КОГДА ВТНалогиБезВыплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					И (ВТНалогиБезВыплат.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|				ТОГДА ВТНалогиБезВыплат.СуммаСПревышения
		|			КОГДА ВТНалогиБезВыплат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И (ВТНалогиБезВыплат.ПериодРегистрации МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|				ТОГДА -ВТНалогиБезВыплат.СуммаСПревышения
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	0,
		|	0,
		|	&КБКсПревышения
		|ИЗ
		|	ВТНалогиБезВыплат КАК ВТНалогиБезВыплат
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТНалогиБезВыплат.ВидДвижения,
		|	ВТНалогиБезВыплат.ПериодРегистрации,
		|	ВТНалогиБезВыплат.ДатаУдержания,
		|	ВТНалогиБезВыплат.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНалогиПоСтавкам.КБК КАК КБК,
		|	ВТНалогиПоСтавкам.Ставка КАК Ставка,
		|	ВТНалогиПоСтавкам.СтавкаНалога КАК СтавкаНалога,
		|	СУММА(ВТНалогиПоСтавкам.П000020017003) КАК П000020017003
		|ПОМЕСТИТЬ ВТНеУдержано
		|ИЗ
		|	ВТНалогиПоСтавкам КАК ВТНалогиПоСтавкам
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТНалогиПоСтавкам.КБК,
		|	ВТНалогиПоСтавкам.Ставка,
		|	ВТНалогиПоСтавкам.СтавкаНалога
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВТНалогиПоСтавкам.П000020017003) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНалогиПоСтавкам.СтавкаНалога КАК СтавкаНалога,
		|	ВТНалогиПоСтавкам.Ставка КАК Ставка,
		|	СУММА(ВТНалогиПоСтавкам.П000020014003) КАК П000020014003,
		|	СУММА(ВТНалогиПоСтавкам.П000020014103) КАК П000020014103,
		|	СУММА(ВТНалогиПоСтавкам.П000020015003) КАК П000020015003,
		|	СУММА(ВТНалогиПоСтавкам.П000020016003) КАК П000020016003,
		|	ЕСТЬNULL(МАКСИМУМ(ВТНеУдержано.П000020017003), 0) КАК П000020017003,
		|	СУММА(ВТНалогиПоСтавкам.П000020019003) КАК П000020019003,
		|	СУММА(ВТНалогиПоСтавкам.П000020018003) КАК П000020018003,
		|	ВТНалогиПоСтавкам.КБК КАК КБК
		|ИЗ
		|	ВТНалогиПоСтавкам КАК ВТНалогиПоСтавкам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНеУдержано КАК ВТНеУдержано
		|		ПО ВТНалогиПоСтавкам.СтавкаНалога = ВТНеУдержано.СтавкаНалога
		|			И ВТНалогиПоСтавкам.КБК = ВТНеУдержано.КБК
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТНалогиПоСтавкам.Ставка,
		|	ВТНалогиПоСтавкам.СтавкаНалога,
		|	ВТНалогиПоСтавкам.КБК"; 	
		
		ОписаниеТаблиц.Раздел2Налоги = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьПоляСтруктурыПоказателей(ПоказателиОтчета, СтруктураПолей)

	Значение = Неопределено;
	
	Для каждого КлючИЗначение Из СтруктураПолей Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			ТипПоля = ТипЗнч(СтруктураПолей[КлючИЗначение.Ключ]);
			Если ТипПоля = Тип("Строка") Тогда
				СтруктураПолей[КлючИЗначение.Ключ] = ""
			ИначеЕсли ТипПоля = Тип("Дата") Тогда
				СтруктураПолей[КлючИЗначение.Ключ] = '00010101'
			Иначе
				СтруктураПолей[КлючИЗначение.Ключ] = 0
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НовоеПустоеДеревоДляОтчета()
	
	ПустоеДерево = Новый ДеревоЗначений;
	ПустоеДерево.Колонки.Добавить("Данные", Новый ОписаниеТипов("Структура"));
	ПустоеДерево.Колонки.Добавить("ДанныеМногострочныхЧастей", Новый ОписаниеТипов("Структура"));
	
	Возврат ПустоеДерево
	
КонецФункции

#КонецОбласти

#Область ПартионныйУчет

// Процедура выполняет формирование движений по разделу партионного учета
//
// Параметры:
//		ГраницаФормирования - ДатаВремя - дата и время, на которые необходимо 
//			выполнить формирование движений. Начальная дата рассчитывается автоматически
//
// Возвращает:
//		Массив - перечень документов,для которых было выполнено формирование
//
Процедура ВыполнитьФормированияДвиженийПартионногоУчета(ГраницаВыполнения) Экспорт
	
	Если Константы.ИспользоватьПоследовательностьПартийКУДиР.Получить() Тогда
		ВыполнитьФормированияДвиженийПартионногоУчетаСПоследовательностью(ГраницаВыполнения);
	Иначе
		ВыполнитьФормированияДвиженийПартионногоУчетаБезПоследовательности(ГраницаВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает границу, начиная с которой необходимо переформировать
// партии товаров
//
// Возвращает:
//		Дата - дата границы
//
Функция ПолучитьГраницуНачалаВыполненияДвиженийПоПартиям()
	Возврат Дата(1,1,1);
КонецФункции

// Функция подготовливает объект таблица значений для движений по партиям
// 
// Возвращает:
//		Таблица значений
//
Функция ПолучитьОписаниеТаблицыДвиженийПартионногоУчета()
	
	НаборЗаписейРегистраПартий = РегистрыНакопления.ПартииТоваров.СоздатьНаборЗаписей();
	
	Возврат НаборЗаписейРегистраПартий.ВыгрузитьКолонки();
	
КонецФункции

// Функция подготовливает объект таблицы партионного учета
// 
// Возвращает:
//		ТаблицаЗначений
//
Функция ПолучитьОписаниеТаблицыПартионногоУчета()
	
	ТаблицаПартий = Новый ТаблицаЗначений;
	
	НаборЗаписейРегистраПартий = РегистрыНакопления.ПартииТоваров.СоздатьНаборЗаписей();
	
	ТребуемыеКолонкиДерева = НаборЗаписейРегистраПартий.Выгрузить();
	
	Для Каждого Колонка Из ТребуемыеКолонкиДерева.Колонки Цикл
		// для партий нет необходимости в следующих колонках
		Если Найти("ВидДвижения,Регистратор",Колонка.Имя) = 0 Тогда
			ТаблицаПартий.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	ТаблицаПартий.Колонки.Добавить("ДатаДенежногоДокумента", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаПартий.Колонки.Добавить("ДатаСортировки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаПартий.Колонки.Добавить("ДенежныйДокумент", Метаданные.РегистрыНакопления.ЗакупкиДляКУДиР.Измерения.ДенежныйДокумент.Тип);
	
	Возврат ТаблицаПартий;
	
КонецФункции


// Процедура формирует таблицы
//		- Поступления
//		- ВозвратыПоставщикам
//		- Продажи
//		- Возврат покупателям
// на Границу выполнения
//
// Возвращает:
//		Структура - где ключ есть имя таблицы, а значение сама таблица
//
Функция ПолучитьИсходнуюТаблицуДляФормированияДвиженийПоПартиям(Организация, ГраницаНачала, ГраницаВыполнения)
	
	СтруктураТаблиц = Новый Структура;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОперацияПоПлатежнымКартам.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчетЭквайринговыеОперации.Ссылка.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА ПоступлениеНаСчетЭквайринговыеОперации.УчитыватьВНУ
	|		ИНАЧЕ ПоступлениеНаСчетЭквайринговыеОперации.Ссылка.УчитыватьВНУ
	|	КОНЕЦ КАК УчитыватьВНУ,
	|	ПоступлениеНаСчетЭквайринговыеОперации.Ссылка КАК ДокументВзаиморасчетовСБанком,
	|	ОперацияПоПлатежнымКартам.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТВозвратОплатыНаКарту
	|ИЗ
	|	Документ.ОперацияПоПлатежнымКартам КАК ОперацияПоПлатежнымКартам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаСчет.ЭквайринговыеОперации КАК ПоступлениеНаСчетЭквайринговыеОперации
	|		ПО (ПоступлениеНаСчетЭквайринговыеОперации.Документ = ОперацияПоПлатежнымКартам.Ссылка)
	|			И (ВЫБОР
	|				КОГДА ПоступлениеНаСчетЭквайринговыеОперации.Ссылка.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|					ТОГДА ПоступлениеНаСчетЭквайринговыеОперации.УчитыватьВНУ
	|				ИНАЧЕ ПоступлениеНаСчетЭквайринговыеОперации.Ссылка.УчитыватьВНУ
	|			КОНЕЦ)
	|			И (ОперацияПоПлатежнымКартам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю))
	|ГДЕ
	|	ОперацияПоПлатежнымКартам.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацияПоПлатежнымКартам.Ссылка,
	|	ВЫБОР
	|		КОГДА РасходСоСчетаЭквайринговыеОперации.Ссылка.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА РасходСоСчетаЭквайринговыеОперации.УчитыватьВНУ
	|		ИНАЧЕ РасходСоСчетаЭквайринговыеОперации.Ссылка.УчитыватьВНУ
	|	КОНЕЦ,
	|	РасходСоСчетаЭквайринговыеОперации.Ссылка,
	|	ОперацияПоПлатежнымКартам.ДокументОснование
	|ИЗ
	|	Документ.ОперацияПоПлатежнымКартам КАК ОперацияПоПлатежнымКартам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходСоСчета.ЭквайринговыеОперации КАК РасходСоСчетаЭквайринговыеОперации
	|		ПО (РасходСоСчетаЭквайринговыеОперации.Документ = ОперацияПоПлатежнымКартам.Ссылка)
	|			И (ВЫБОР
	|				КОГДА РасходСоСчетаЭквайринговыеОперации.Ссылка.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|					ТОГДА РасходСоСчетаЭквайринговыеОперации.УчитыватьВНУ
	|				ИНАЧЕ РасходСоСчетаЭквайринговыеОперации.Ссылка.УчитыватьВНУ
	|			КОНЕЦ)
	|			И (ОперацияПоПлатежнымКартам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю))
	|ГДЕ
	|	ОперацияПоПлатежнымКартам.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходнаяНакладная.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладная.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|			ТОГДА ПриходнаяНакладная.Заказ.ЗаказПокупателя
	|		ИНАЧЕ ПриходнаяНакладная.Заказ
	|	КОНЕЦ КАК Заказ,
	|	ПриходнаяНакладная.Организация КАК Организация,
	|	ПриходнаяНакладная.Дата КАК ДатаДокумента
	|ПОМЕСТИТЬ ВТВозвратОтПокупателя
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходИзКассы КАК РасходИзКассы
	|		ПО (РасходИзКассы.ДокументОснование = ПриходнаяНакладная.Ссылка)
	|			И (РасходИзКассы.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходСоСчета КАК РасходСоСчета
	|		ПО (РасходСоСчета.ДокументОснование = ПриходнаяНакладная.Ссылка)
	|			И (РасходСоСчета.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВозвратОплатыНаКарту КАК ВТВозвратОплатыНаКарту
	|		ПО (ВТВозвратОплатыНаКарту.ДокументОснование = ПриходнаяНакладная.Ссылка)
	|ГДЕ
	|	ПриходнаяНакладная.Организация = &Организация
	|	И ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|	И (ЕСТЬNULL(ПриходнаяНакладная.ДокументОснование.УчитыватьВНУ, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(РасходИзКассы.УчитыватьВНУ, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(РасходСоСчета.УчитыватьВНУ, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(ВТВозвратОплатыНаКарту.УчитыватьВНУ, ЛОЖЬ))
	|	И ПриходнаяНакладная.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ВозвратПокупателя"" КАК ВидЗаписи,
	|	ВТВозвратОтПокупателя.ДатаДокумента КАК ДатаДокумента,
	|	ЗапасыНаСкладах.Регистратор КАК Регистратор,
	|	ВТВозвратОтПокупателя.Организация КАК Организация,
	|	ЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	СУММА(ЗапасыНаСкладах.Количество) КАК Количество,
	|	ВТВозвратОтПокупателя.Заказ КАК Заказ
	|ПОМЕСТИТЬ ВТЗаписиВозвратОтПокупателя
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах КАК ЗапасыНаСкладах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВозвратОтПокупателя КАК ВТВозвратОтПокупателя
	|		ПО (ВТВозвратОтПокупателя.Ссылка = ЗапасыНаСкладах.Регистратор)
	|			И (ЗапасыНаСкладах.Период МЕЖДУ &ГраницаНачала И &ГраницаВыполнения)
	|			И (ЗапасыНаСкладах.Количество > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВозвратОтПокупателя.Организация,
	|	ВТВозвратОтПокупателя.ДатаДокумента,
	|	ЗапасыНаСкладах.Регистратор,
	|	ЗапасыНаСкладах.Номенклатура,
	|	ВТВозвратОтПокупателя.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Поступление"" КАК ВидЗаписи,
	|	Закупки.ДатаДокумента КАК Дата,
	|	Закупки.ТоварныйДокумент.Дата КАК ДатаСортировки,
	|	Закупки.ТоварныйДокумент КАК Регистратор,
	|	Закупки.ТоварныйДокумент КАК ДокументПартии,
	|	Закупки.ДенежныйДокумент КАК ДенежныйДокумент,
	|	Закупки.ДенежныйДокумент.Дата КАК ДатаДенежногоДокумента,
	|	Закупки.Организация КАК Организация,
	|	Закупки.Номенклатура КАК Номенклатура,
	|	СУММА(Закупки.Количество) КАК Количество,
	|	СУММА(Закупки.Сумма) КАК Сумма,
	|	СУММА(Закупки.СуммаНДС) КАК СуммаНДС,
	|	&ПустаяДата КАК ДатаПервичногоДокумента,
	|	"""" КАК НомерПервичногоДокумента
	|ИЗ
	|	РегистрНакопления.ЗакупкиДляКУДиР КАК Закупки
	|ГДЕ
	|	Закупки.Период МЕЖДУ &ГраницаНачала И &ГраницаВыполнения
	|	И Закупки.Организация = &Организация
	|	И Закупки.Сумма > 0
	|	И Закупки.ЭтоТоварыКРеализации
	|	И (Закупки.ТоварныйДокумент ССЫЛКА Документ.ПриходнаяНакладная
	|			ИЛИ Закупки.ТоварныйДокумент ССЫЛКА Документ.ВводНачальныхОстатков
	|			ИЛИ Закупки.ТоварныйДокумент ССЫЛКА Документ.АвансовыйОтчет)
	|	И Закупки.УчитыватьВНУ
	|
	|СГРУППИРОВАТЬ ПО
	|	Закупки.Организация,
	|	Закупки.ДатаДокумента,
	|	Закупки.ТоварныйДокумент,
	|	Закупки.ДенежныйДокумент,
	|	Закупки.ДенежныйДокумент.Дата,
	|	Закупки.ТоварныйДокумент.Дата,
	|	Закупки.Номенклатура,
	|	Закупки.ТоварныйДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТЗаписиВозвратОтПокупателя.ВидЗаписи,
	|	ВТЗаписиВозвратОтПокупателя.ДатаДокумента,
	|	ВТЗаписиВозвратОтПокупателя.ДатаДокумента,
	|	ВТЗаписиВозвратОтПокупателя.Регистратор,
	|	ВТЗаписиВозвратОтПокупателя.Регистратор,
	|	NULL,
	|	NULL,
	|	ВТЗаписиВозвратОтПокупателя.Организация,
	|	ВТЗаписиВозвратОтПокупателя.Номенклатура,
	|	ВТЗаписиВозвратОтПокупателя.Количество,
	|	0,
	|	0,
	|	&ПустаяДата,
	|	""""
	|ИЗ
	|	ВТЗаписиВозвратОтПокупателя КАК ВТЗаписиВозвратОтПокупателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Поступление"",
	|	Закупки.ДатаДокумента,
	|	Закупки.ДатаДокумента,
	|	Закупки.Ссылка,
	|	Закупки.Ссылка,
	|	Закупки.Ссылка,
	|	Закупки.ДатаДокумента,
	|	&Организация,
	|	Закупки.Номенклатура,
	|	СУММА(Закупки.Количество),
	|	СУММА(Закупки.Сумма),
	|	СУММА(Закупки.СуммаНДС),
	|	Закупки.ДатаДокумента,
	|	Закупки.НомерДокумента
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ЗакупкиДляКУДИР КАК Закупки
	|ГДЕ
	|	Закупки.ДатаДокумента МЕЖДУ &ГраницаНачала И &ГраницаВыполнения
	|	И Закупки.Ссылка.Организация = &Организация
	|	И Закупки.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Закупки.ДатаДокумента,
	|	Закупки.НомерДокумента,
	|	Закупки.Ссылка,
	|	Закупки.Номенклатура,
	|	Закупки.ДатаДокумента,
	|	Закупки.Ссылка,
	|	Закупки.Ссылка,
	|	Закупки.ДатаДокумента,
	|	Закупки.ДатаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСортировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ВозвратПоставщику"" КАК ВидЗаписи,
	|	Закупки.ДатаДокумента КАК Дата,
	|	Закупки.ТоварныйДокумент.Дата КАК ДатаСортировки,
	|	Закупки.ТоварныйДокумент КАК Регистратор,
	|	NULL КАК ДокументПартии,
	|	Закупки.ДенежныйДокумент КАК ДенежныйДокумент,
	|	Закупки.ДенежныйДокумент.Дата КАК ДатаДенежногоДокумента,
	|	Закупки.Организация КАК Организация,
	|	Закупки.Номенклатура КАК Номенклатура,
	|	-Закупки.Количество КАК Количество,
	|	-Закупки.Сумма КАК Сумма,
	|	-Закупки.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	РегистрНакопления.ЗакупкиДляКУДиР КАК Закупки
	|ГДЕ
	|	Закупки.Период МЕЖДУ &ГраницаНачала И &ГраницаВыполнения
	|	И Закупки.Организация = &Организация
	|	И Закупки.Сумма < 0
	|	И Закупки.ЭтоТоварыКРеализации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Продажа"",
	|	Продажи.Регистратор.Дата,
	|	Продажи.Регистратор.Дата,
	|	Продажи.Регистратор,
	|	NULL,
	|	NULL,
	|	NULL,
	|	&Организация,
	|	Продажи.Номенклатура,
	|	Продажи.Количество,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Регистратор.Организация = &Организация
	|	И Продажи.Период МЕЖДУ &ГраницаНачала И &ГраницаВыполнения
	|	И НЕ Продажи.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|	И Продажи.Регистратор.УчитыватьВНУ
	|	И Продажи.Количество <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Продажа"",
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	&Организация,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура,
	|	СУММА(ОтчетОРозничныхПродажахЗапасы.Количество),
	|	0,
	|	0
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Запасы КАК ОтчетОРозничныхПродажахЗапасы
	|		ПО ОтчетОРозничныхПродажах.Ссылка = ОтчетОРозничныхПродажахЗапасы.Ссылка
	|			И (ОтчетОРозничныхПродажах.Проведен)
	|			И (НЕ ОтчетОРозничныхПродажах.ПометкаУдаления)
	|			И (ОтчетОРозничныхПродажах.Организация = &Организация)
	|			И (ОтчетОРозничныхПродажах.Дата МЕЖДУ &ГраницаНачала И &ГраницаВыполнения)
	|			И (ОтчетОРозничныхПродажах.УчитыватьВНУ
	|					И ОтчетОРозничныхПродажах.ПоложениеНастроекНалоговогоУчета <> ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|				ИЛИ ОтчетОРозничныхПродажах.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|					И ОтчетОРозничныхПродажахЗапасы.УчитыватьВНУ)
	|			И (ОтчетОРозничныхПродажахЗапасы.Количество <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура,
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Продажа"",
	|	СписаниеЗапасов.Дата,
	|	СписаниеЗапасов.Дата,
	|	СписаниеЗапасов.Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	&Организация,
	|	СписаниеЗапасовЗапасы.Номенклатура,
	|	СУММА(СписаниеЗапасовЗапасы.Количество),
	|	0,
	|	0
	|ИЗ
	|	Документ.СписаниеЗапасов КАК СписаниеЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеЗапасов.Запасы КАК СписаниеЗапасовЗапасы
	|		ПО СписаниеЗапасов.Ссылка = СписаниеЗапасовЗапасы.Ссылка
	|			И (СписаниеЗапасов.Проведен)
	|			И (НЕ СписаниеЗапасов.ПометкаУдаления)
	|			И (СписаниеЗапасов.Организация = &Организация)
	|			И (СписаниеЗапасов.Дата МЕЖДУ &ГраницаНачала И &ГраницаВыполнения)
	|			И (СписаниеЗапасовЗапасы.Количество <> 0)
	|ГДЕ
	|	СписаниеЗапасов.УчитыватьВНУ
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеЗапасов.Ссылка,
	|	СписаниеЗапасовЗапасы.Номенклатура,
	|	СписаниеЗапасов.Дата,
	|	СписаниеЗапасов.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСортировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходнаяНакладная.Ссылка КАК ТоварныйДокумент,
	|	ВТЗаписиВозвратОтПокупателя.Заказ КАК Заказ
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиВозвратОтПокупателя КАК ВТЗаписиВозвратОтПокупателя
	|		ПО (ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика))
	|			И (ВТЗаписиВозвратОтПокупателя.Заказ = ПриходнаяНакладная.Заказ
	|				ИЛИ ВТЗаписиВозвратОтПокупателя.Заказ = ПриходнаяНакладная.Заказ.ЗаказПокупателя)
	|			И ПриходнаяНакладная.Ссылка <> ВТЗаписиВозвратОтПокупателя.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчет.Ссылка,
	|	ВТЗаписиВозвратОтПокупателя.Заказ
	|ИЗ
	|	Документ.АвансовыйОтчет.Запасы КАК АвансовыйОтчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиВозвратОтПокупателя КАК ВТЗаписиВозвратОтПокупателя
	|		ПО (ВТЗаписиВозвратОтПокупателя.Заказ = АвансовыйОтчет.ЗаказПокупателя)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводНачальныхОстатков.Ссылка,
	|	ВТЗаписиВозвратОтПокупателя.Заказ
	|ИЗ
	|	Документ.ВводНачальныхОстатков.Запасы КАК ВводНачальныхОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиВозвратОтПокупателя КАК ВТЗаписиВозвратОтПокупателя
	|		ПО (ВТЗаписиВозвратОтПокупателя.Заказ = ВводНачальныхОстатков.ЗаказПокупателя)");
	
	Запрос.УстановитьПараметр("ГраницаНачала",ГраницаНачала);
	Запрос.УстановитьПараметр("ГраницаВыполнения",ГраницаВыполнения);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	
	Пакет = Запрос.ВыполнитьПакет();
	ТаблицаПоступлений =  Пакет[3].Выгрузить();
	ТаблицаПоступлений.Индексы.Добавить("Номенклатура,ДокументПартии");
	ТаблицаПоступлений.Индексы.Добавить("Номенклатура");
	
	ТаблицаПродажИВозвратов =  Пакет[4].Выгрузить();
	ТаблицаПродажИВозвратов.Индексы.Добавить("Номенклатура,ДокументПартии");
	ТаблицаПродажИВозвратов.Индексы.Добавить("Номенклатура");
	СтруктураТаблиц.Вставить("ТаблицаПоступлений", ТаблицаПоступлений);
	СтруктураТаблиц.Вставить("ТаблицаПродажИВозвратов", ТаблицаПродажИВозвратов);
	СтруктураТаблиц.Вставить("ТаблицаЗаказов", Пакет[5].Выгрузить());
	
	Возврат СтруктураТаблиц;
	
КонецФункции

// Процедура обработки исходной таблицы поступлений
//
Процедура ОбработатьТаблицуДвижений(ИсходнаяТаблицаДвижений,ДвиженияДокументовПартий,ТаблицаПартионногоУчета, ТаблицаЗаказов, СоответствиеДокументовРегистраторов)
	
	ПредыдущееПоступление = Неопределено;
	
	ИндексПартии = ДвиженияДокументовПартий.ВГраница();
	ТекущийИндекс = ИндексПартии;
	
	Для Каждого СтрокаДвижения Из ИсходнаяТаблицаДвижений Цикл
		
		Если ПредыдущееПоступление <> СтрокаДвижения.Регистратор Тогда // перешли к обработке следующего регистратора
			
			ПредыдущееПоступление = СтрокаДвижения.Регистратор; // он же документ партии
			
			НайденноеДвижение = СоответствиеДокументовРегистраторов.Получить(ПредыдущееПоступление);
			Если НайденноеДвижение = Неопределено Тогда
				ДвиженияДокументовПартий.Добавить(Новый Массив(2));
				ИндексПартии = ИндексПартии + 1;
				
				ДвиженияДокументовПартий[ИндексПартии][0] = ПредыдущееПоступление;
				ДвиженияДокументовПартий[ИндексПартии][1] = ПолучитьОписаниеТаблицыДвиженийПартионногоУчета();
				ДвиженияДокументовПартий[ИндексПартии][1].Индексы.Добавить("Номенклатура");
				
				ТекущийИндекс = ИндексПартии;
				СоответствиеДокументовРегистраторов.Вставить(ПредыдущееПоступление, ДвиженияДокументовПартий[ТекущийИндекс]);
			Иначе
				ТекущийИндекс = ДвиженияДокументовПартий.Найти(НайденноеДвижение);
			КонецЕсли;
		КонецЕсли;
		
		
		Если СтрокаДвижения.ВидЗаписи = "Поступление" Тогда
			// Заполняем дерево результата
			СтрокаРезультата = ДвиженияДокументовПартий[ТекущийИндекс][1].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаДвижения);
			СтрокаРезультата.ВидДвижения = ВидДвиженияНакопления.Приход;
			ЗаполнитьСтрокуРезультатаПоСтрокиДвиженияДополнительно(СтрокаРезультата, СтрокаДвижения);
			
			// Заполняем таблицу партий
			СтрокаПартий = ТаблицаПартионногоУчета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПартий, СтрокаДвижения);
			
			
		ИначеЕсли СтрокаДвижения.ВидЗаписи = "ВозвратПоставщику" Тогда
			
			// Заполняем дерево результата
			СтрокаРезультата = ДвиженияДокументовПартий[ТекущийИндекс][1].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаДвижения);
			СтрокаРезультата.ВидДвижения = ВидДвиженияНакопления.Приход;
			СтрокаРезультата.Количество = -СтрокаРезультата.Количество;
			СтрокаРезультата.Сумма = -СтрокаРезультата.Сумма;
			СтрокаРезультата.СуммаНДС = -СтрокаРезультата.СуммаНДС;
			ЗаполнитьСтрокуРезультатаПоСтрокиДвиженияДополнительно(СтрокаРезультата, СтрокаДвижения);
			
			// Заполняем таблицу партий
			СторнироватьТаблицуПартийПоДвижению(ТаблицаПартионногоУчета, СтрокаДвижения);
			
		ИначеЕсли СтрокаДвижения.ВидЗаписи = "Продажа" Тогда
			
			РаспределитьСтрокуДвиженияПоПартиям(ТаблицаПартионногоУчета,ДвиженияДокументовПартий[ТекущийИндекс][1],СтрокаДвижения);
			
		ИначеЕсли СтрокаДвижения.ВидЗаписи = "ВозвратПокупателя" Тогда
			
			ОбработатьСтрокуДвиженияВозвратаОтПокупателя(ТаблицаПартионногоУчета,ДвиженияДокументовПартий, ДвиженияДокументовПартий[ТекущийИндекс][1], СтрокаДвижения, ТаблицаЗаказов);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Актуализирует таблицу партий по строке движения
//
Процедура СторнироватьТаблицуПартийПоДвижению(ТаблицаПартионногоУчета, СтрокаДвижения, ЭтоВозврат = Ложь)
	Если ЗначениеЗаполнено(СтрокаДвижения.ДокументПартии) Тогда
		СтруктураПоиска = Новый Структура("Номенклатура, ДокументПартии", СтрокаДвижения.Номенклатура, СтрокаДвижения.ДокументПартии);
	Иначе
		СтруктураПоиска = Новый Структура("Номенклатура", СтрокаДвижения.Номенклатура);
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаПартионногоУчета.НайтиСтроки(СтруктураПоиска);
	КоличествоКРаспределению = СтрокаДвижения.Количество;
	
	ОбщаяСумма = 0;
	ОбщееКоличество = 0;
	ОбщаяСуммаНДС = 0;
	Если ЗначениеЗаполнено(СтрокаДвижения.ДокументПартии) Тогда
		Для Каждого стрНоменклатуры Из НайденныеСтроки Цикл
			ОбщаяСумма = ОбщаяСумма + стрНоменклатуры.Сумма;
			ОбщееКоличество = ОбщееКоличество + стрНоменклатуры.Количество;
			ОбщаяСуммаНДС = ОбщаяСуммаНДС + стрНоменклатуры.СуммаНДС;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого стрНоменклатуры Из НайденныеСтроки Цикл
		
		Если стрНоменклатуры.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоВозврат Тогда
			
			РаспределяемаяСумма = КоличествоКРаспределению*
				?(ЗначениеЗаполнено(СтрокаДвижения.ДокументПартии), ОбщаяСумма/ОбщееКоличество, стрНоменклатуры.Сумма/стрНоменклатуры.Количество);
			РаспределяемаяСуммаНДС = КоличествоКРаспределению*
				?(ЗначениеЗаполнено(СтрокаДвижения.ДокументПартии), ОбщаяСуммаНДС/ОбщееКоличество, стрНоменклатуры.СуммаНДС/стрНоменклатуры.Количество);
			НовСтрока =  ТаблицаПартионногоУчета.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, стрНоменклатуры);
			НовСтрока.Количество = - КоличествоКРаспределению;
			НовСтрока.Сумма = - РаспределяемаяСумма;
			НовСтрока.СуммаНДС = - РаспределяемаяСуммаНДС;
			
			КоличествоКРаспределению = 0;
		Иначе
			
			Если КоличествоКРаспределению <= стрНоменклатуры.Количество Тогда
				// Остаток по партии больше или равен том, что нам нужно
				// соответственно списываем полностью всё движение
				
				РаспределяемоеКоличество = КоличествоКРаспределению;
				РаспределяемаяСумма = КоличествоКРаспределению*
					?(ЗначениеЗаполнено(СтрокаДвижения.ДокументПартии), ОбщаяСумма/ОбщееКоличество, стрНоменклатуры.Сумма/стрНоменклатуры.Количество);
				РаспределяемаяСуммаНДС = КоличествоКРаспределению*
					?(ЗначениеЗаполнено(СтрокаДвижения.ДокументПартии), ОбщаяСуммаНДС/ОбщееКоличество, стрНоменклатуры.СуммаНДС/стрНоменклатуры.Количество);
				
				// корректируем остатки
				стрНоменклатуры.Количество = стрНоменклатуры.Количество - РаспределяемоеКоличество;
				стрНоменклатуры.Сумма = стрНоменклатуры.Сумма - РаспределяемаяСумма;
				стрНоменклатуры.СуммаНДС = стрНоменклатуры.СуммаНДС - РаспределяемаяСуммаНДС;
				КоличествоКРаспределению = 0;
				
			Иначе
				
				РаспределяемоеКоличество = стрНоменклатуры.Количество;
				РаспределяемаяСумма = стрНоменклатуры.Сумма;
				РаспределяемаяСуммаНДС = стрНоменклатуры.СуммаНДС;
				КоличествоКРаспределению = КоличествоКРаспределению - РаспределяемоеКоличество;
				
				// корректируем остатки
				стрНоменклатуры.Количество = 0;
				стрНоменклатуры.Сумма = 0;
				стрНоменклатуры.СуммаНДС = 0;
				
			КонецЕсли;
		КонецЕсли;
		
		Если КоличествоКРаспределению = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Распределяет строку движения по партиям таблицы партий и добавляет движения в таблицу движений
//
// Параметры:
//		ТаблицаПартионногоУчета - ТаблицаЗначений - таблица,содержащая данные по партиям
//		ТаблицаДвжиений - ТаблицаЗначений - таблица, содержащие данные по движению регистратора
//		СтрокаДвижений - СтрокаТаблицыЗначений - строка,содержащая информация по списываемому товару по партии
//
Процедура РаспределитьСтрокуДвиженияПоПартиям(
	ТаблицаПартионногоУчета,
	ТаблицаДвижений,
	СтрокаДвижения,
	ЭтоВозврат = Ложь,
	ИспользуетсяПоследовательность = Ложь)
	
	СтруктураПоиска = Новый Структура("Номенклатура", СтрокаДвижения.Номенклатура);
	
	// найдем все партии этой номенклатуры
	СтрокиНоменклатуры = ТаблицаПартионногоУчета.НайтиСтроки(СтруктураПоиска);
	
	// количество номенклатуры, которое необходимо распределить по партиям
	КоличествоКРаспределению = СтрокаДвижения.Количество;
	
	// такого быть не должно. но все равно проверим
	Если КоличествоКРаспределению = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// распишем по фифо
	Для Каждого стрНоменклатуры Из СтрокиНоменклатуры Цикл
		
		Если стрНоменклатуры.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		РаспределяемоеКоличество = 0;
		РаспределяемаяСумма = 0;
		РаспределяемаяСуммаНДС = 0;
		
		Если КоличествоКРаспределению <= стрНоменклатуры.Количество Тогда
			// Остаток по партии больше или равен том, что нам нужно
			// соответственно списываем полностью всё движение
			
			РаспределяемоеКоличество = КоличествоКРаспределению;
			РаспределяемаяСумма = КоличествоКРаспределению*стрНоменклатуры.Сумма/стрНоменклатуры.Количество;
			РаспределяемаяСуммаНДС = КоличествоКРаспределению*стрНоменклатуры.СуммаНДС/стрНоменклатуры.Количество;
			
			// корректируем остатки
			стрНоменклатуры.Количество = стрНоменклатуры.Количество - РаспределяемоеКоличество;
			стрНоменклатуры.Сумма = стрНоменклатуры.Сумма - РаспределяемаяСумма;
			стрНоменклатуры.СуммаНДС = стрНоменклатуры.СуммаНДС - РаспределяемаяСуммаНДС;
			КоличествоКРаспределению = 0;
			
		Иначе
			
			РаспределяемоеКоличество = стрНоменклатуры.Количество;
			РаспределяемаяСумма = стрНоменклатуры.Сумма;
			РаспределяемаяСуммаНДС = стрНоменклатуры.СуммаНДС;
			КоличествоКРаспределению = КоличествоКРаспределению - РаспределяемоеКоличество;
			
			// корректируем остатки
			стрНоменклатуры.Количество = 0;
			стрНоменклатуры.Сумма = 0;
			стрНоменклатуры.СуммаНДС = 0;
			
		КонецЕсли;
		
		// заполняем таблицу движений регистратора
		СтрокаРезультата = ТаблицаДвижений.Добавить();
		СтрокаРезультата.Номенклатура = СтрокаДвижения.Номенклатура;
		СтрокаРезультата.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		СтрокаРезультата.ДокументПартии = стрНоменклатуры.ДокументПартии;
		Если ИспользуетсяПоследовательность Тогда
			СтрокаРезультата.ДенежныйДокумент = стрНоменклатуры.ДенежныйДокумент;
		КонецЕсли;
		
		Множитель = ?(ЭтоВозврат, -1, 1);
		СтрокаРезультата.Количество = РаспределяемоеКоличество * Множитель;
		СтрокаРезультата.Сумма = РаспределяемаяСумма * Множитель;
		СтрокаРезультата.СуммаНДС = РаспределяемаяСуммаНДС * Множитель;
		
		СтрокаРезультата.ДатаПервичногоДокумента = стрНоменклатуры.ДатаПервичногоДокумента;
		СтрокаРезультата.НомерПервичногоДокумента = стрНоменклатуры.НомерПервичногоДокумента;
		
		
		ЗаполнитьСтрокуРезультатаПоСтрокиДвиженияДополнительно(СтрокаРезультата, СтрокаДвижения);
		Если стрНоменклатуры.ДатаСортировки < стрНоменклатуры.ДатаДенежногоДокумента 
			И стрНоменклатуры.ДатаДенежногоДокумента > СтрокаДвижения.Дата Тогда
				// Денежный документ
			СтрокаДвижения.Дата = стрНоменклатуры.ДатаДенежногоДокумента;
			СтрокаРезультата.ДокументРегистрацииВКУДиР = стрНоменклатуры.ДенежныйДокумент;
		КонецЕсли;
		СтрокаРезультата.Период = СтрокаДвижения.Дата;
		
		Если КоличествоКРаспределению = 0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоКРаспределению > 0
		И ИспользуетсяПоследовательность
		И Не ЭтоВозврат
		И СтрокаДвижения.ВидЗаписи <> "ПартииБезОплаты" Тогда
		СтрокаРезультата = ТаблицаДвижений.Добавить();
		
		// Продажа товара, который еще не был оплачен поставщику.
		СтрокаРезультата.НеОплачена = Истина;
		
		СтрокаРезультата.Номенклатура = СтрокаДвижения.Номенклатура;
		СтрокаРезультата.ВидДвижения = ВидДвиженияНакопления.Приход;
		
		СтрокаРезультата.ДокументПартии = СтрокаДвижения.Регистратор;
		
		СтрокаРезультата.Количество = КоличествоКРаспределению;
		СтрокаРезультата.Сумма = 0;
		СтрокаРезультата.СуммаНДС = 0;
		
		ЗаполнитьСтрокуРезультатаПоСтрокиДвиженияДополнительно(СтрокаРезультата, СтрокаДвижения);
		СтрокаРезультата.Период = СтрокаДвижения.Дата;
	КонецЕсли;
	
КонецПроцедуры

// Распределяет строку движения по партиям таблицы партий и добавляет движения в таблицу движений
//
// Параметры:
//		ТаблицаПартионногоУчета - ТаблицаЗначений - таблица,содержащая данные по партиям
//		ТаблицаДвжиений - ТаблицаЗначений - таблица, содержащие данные по движению регистратора
//		СтрокаДвижений - СтрокаТаблицыЗначений - строка,содержащая информация по списываемому товару по партии
//
Процедура ОбработатьСтрокуДвиженияВозвратаОтПокупателя(
	ТаблицаПартионногоУчета,
	ОбщийМассивДвижений,
	ТаблицаДвижений,
	СтрокаДвижения,
	ТаблицаЗаказов,
	ИспользуетсяПоследовательность = Ложь)
	
	ТаблицаДвиженийДокументаРеализации = Неопределено;
	Заказ = СтрокаДвижения.ДокументПартии.Заказ;
	Если ЗначениеЗаполнено(Заказ) Тогда
		СтрокиЗаказа = ТаблицаЗаказов.НайтиСтроки(Новый Структура("Заказ", Заказ));
		Для Каждого ДокументЗаказа Из СтрокиЗаказа Цикл
			ДокументРеализации = ДокументЗаказа.ТоварныйДокумент;
			
			Для к = 0 По ОбщийМассивДвижений.ВГраница() Цикл
				
				Если ОбщийМассивДвижений[к][0] = ДокументРеализации Тогда
					ТаблицаДвиженийДокументаРеализации = ОбщийМассивДвижений[к][1];
					Прервать;;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТаблицаДвиженийДокументаРеализации <> Неопределено Тогда
				СтрокиНоменклатурыВозврата = ТаблицаДвиженийДокументаРеализации.НайтиСтроки(Новый Структура("Номенклатура", СтрокаДвижения.Номенклатура));
				Если СтрокиНоменклатурыВозврата.Количество() > 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(Заказ) Или СтрокиЗаказа.Количество() = 0 Или ТаблицаДвиженийДокументаРеализации = Неопределено Или СтрокиНоменклатурыВозврата.Количество() = 0 Тогда
		Для к = 0 По ОбщийМассивДвижений.ВГраница() Цикл
				
			ТаблицаДвиженийДокументаРеализации = ОбщийМассивДвижений[к][1];
			СтрокиНоменклатурыВозврата = ТаблицаДвиженийДокументаРеализации.НайтиСтроки(Новый Структура("Номенклатура", СтрокаДвижения.Номенклатура));
			Если СтрокиНоменклатурыВозврата.Количество() > 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокиНоменклатурыВозврата.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоСтрок = СтрокиНоменклатурыВозврата.Количество();
	// Отсортируем массив по возрастанию
	// простым пузырьком (нет гарантий, что массив отсортирован)
	ЕстьПерестановки = КоличествоСтрок > 1;
	
	Пока ЕстьПерестановки Цикл
		
		ЕстьПерестановки = Ложь;
		
		Для к = 0 По КоличествоСтрок-2 Цикл
			Если СтрокиНоменклатурыВозврата[к].ДокументПартии.Дата > СтрокиНоменклатурыВозврата[к+1].ДокументПартии.Дата Тогда
				// переставляем элементы
				т = СтрокиНоменклатурыВозврата[к];
				СтрокиНоменклатурыВозврата[к] = СтрокиНоменклатурыВозврата[к+1];
				СтрокиНоменклатурыВозврата[к+1]=т;
				ЕстьПерестановки = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	КоличествоКРаспределению = СтрокаДвижения.Количество;
	
	Для кк = -(КоличествоСтрок-1) По 0 Цикл
		к=-кк;
		
		СтрНоменклатуры = СтрокиНоменклатурыВозврата[к];
		
		РаспределяемоеКоличество = 0;
		РаспределяемаяСумма = 0;
		РаспределяемаяСуммаНДС = 0;
		
		Если КоличествоКРаспределению <= стрНоменклатуры.Количество Тогда
			// Остаток по партии больше или равен том, что нам нужно
			// соответственно списываем полностью всё движение
			
			РаспределяемоеКоличество = КоличествоКРаспределению;
			РаспределяемаяСумма = КоличествоКРаспределению*стрНоменклатуры.Сумма/стрНоменклатуры.Количество;
			РаспределяемаяСуммаНДС = КоличествоКРаспределению*стрНоменклатуры.СуммаНДС/стрНоменклатуры.Количество;
			
			КоличествоКРаспределению = 0;
			
		Иначе
			
			РаспределяемоеКоличество = стрНоменклатуры.Количество;
			РаспределяемаяСумма = стрНоменклатуры.Сумма;
			РаспределяемаяСуммаНДС = стрНоменклатуры.СуммаНДС;
			КоличествоКРаспределению = КоличествоКРаспределению - РаспределяемоеКоличество;
			
		КонецЕсли;
		
		// заполняем таблицу движений регистратора
		СтрокаРезультата = ТаблицаДвижений.Добавить();
		
		СтрокаРезультата.Номенклатура = СтрокаДвижения.Номенклатура;
		СтрокаРезультата.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		СтрокаРезультата.ДокументПартии = стрНоменклатуры.ДокументПартии;
		Если ИспользуетсяПоследовательность Тогда
			СтрокаРезультата.ДенежныйДокумент = стрНоменклатуры.ДенежныйДокумент;
		КонецЕсли;
		
		СтрокаРезультата.Количество = -РаспределяемоеКоличество;
		СтрокаРезультата.Сумма = -РаспределяемаяСумма;
		СтрокаРезультата.СуммаНДС = -РаспределяемаяСуммаНДС;
		
		ЗаполнитьСтрокуРезультатаПоСтрокиДвиженияДополнительно(СтрокаРезультата, СтрокаДвижения);
		
		СторнироватьТаблицуПартийПоДвижению(ТаблицаПартионногоУчета, СтрокаРезультата, Истина);
		
		Если КоличествоКРаспределению = 0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуРезультатаПоСтрокиДвиженияДополнительно(СтрокаРезультата, СтрокаДвижения)
	
	СтрокаРезультата.Организация	= СтрокаДвижения.Регистратор.Организация;
	
	СтрокаРезультата.Период        = СтрокаДвижения.Дата;
	СтрокаРезультата.ДокументРегистрацииВКУДиР = СтрокаДвижения.Регистратор;
	СтрокаРезультата.Активность    = Истина;
	СтрокаРезультата.МоментВремени = СтрокаДвижения.Регистратор.МоментВремени();
	
КонецПроцедуры

// Функция выполняет записи движений по документам регистрации
//
// Параметры:
//		ДеревоРезультат - ДеревоЗначений - результат сформированных движений с групиировкой по регистраторам
//
// Возвращает:
//		Массив - массив регистраторов, по которым сформированы движения
//
Функция СформироватьИЗаписатьДвиженияДокументовПартионногоУчета(ДвиженияДокументовПартий)
	
	Для Каждого СтрокаРегистратор Из ДвиженияДокументовПартий Цикл
		
		ДвиженияПартийРегистратора = СтрокаРегистратор[0].ПолучитьОбъект().Движения.ПартииТоваров;
		
		ДвиженияПартийРегистратора.Загрузить(СтрокаРегистратор[1]);
		ДвиженияПартийРегистратора.Записать();
		
	КонецЦикла;
	
КонецФункции

Процедура ВыполнитьФормированияДвиженийПартионногоУчетаБезПоследовательности(ГраницаВыполнения)

	ГраницаНачала = ПолучитьГраницуНачалаВыполненияДвиженийПоПартиям();
	ТаблицаПартионногоУчета  = ПолучитьОписаниеТаблицыПартионногоУчета();
	ТаблицаПартионногоУчета.Индексы.Добавить("Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОрганизаций.Следующий() Цикл
		// исходные данные по таблицам движений
		ДвиженияДокументовПартий = Новый Массив; //  Двумерный массив: [0] - документ [1] - таблица движений документа
		СоответствиеДокументовРегистраторов = Новый Соответствие;
		СтруктураТаблиц = ПолучитьИсходнуюТаблицуДляФормированияДвиженийПоПартиям(ВыборкаОрганизаций.Ссылка, ГраницаНачала, ГраницаВыполнения);
		
		// формирование дерева результат и таблицы партионного учета
		ОбработатьТаблицуДвижений(СтруктураТаблиц.ТаблицаПоступлений,ДвиженияДокументовПартий,ТаблицаПартионногоУчета, СтруктураТаблиц.ТаблицаЗаказов, СоответствиеДокументовРегистраторов);
		ОбработатьТаблицуДвижений(СтруктураТаблиц.ТаблицаПродажИВозвратов,ДвиженияДокументовПартий,ТаблицаПартионногоУчета, СтруктураТаблиц.ТаблицаЗаказов, СоответствиеДокументовРегистраторов);
		ТаблицаПартионногоУчета.Очистить();
		
		МассивОбработанныхРегистраторов = СформироватьИЗаписатьДвиженияДокументовПартионногоУчета(ДвиженияДокументовПартий);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьСтрокуДвиженияОплатыЗакупокПоПартиямБезОплаты(
	ТаблицаПартийБезОплаты,
	ТаблицаДвижений,
	СтрокаДвижения,
	ТаблицаПартионногоУчета)
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Приход
	СтрокаРезультата = ТаблицаДвижений.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаДвижения);
	//СтрокаРезультата.ТоварныйДокумент = СтрокаДвижения.ДокументПартии;
	СтрокаРезультата.ВидДвижения = ВидДвиженияНакопления.Приход;
	ЗаполнитьСтрокуРезультатаПоСтрокиДвиженияДополнительно(СтрокаРезультата, СтрокаДвижения);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Приход
	СтруктураПоиска = Новый Структура("Номенклатура", СтрокаДвижения.Номенклатура);
	
	// найдем все партии этой номенклатуры
	СтрокиНоменклатуры = ТаблицаПартийБезОплаты.НайтиСтроки(СтруктураПоиска);
	
	// количество номенклатуры, которое необходимо распределить по партиям
	КоличествоКРаспределению = СтрокаДвижения.Количество;
	
	// такого быть не должно. но все равно проверим
	Если КоличествоКРаспределению = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// распишем по фифо
	Для Каждого стрНоменклатуры Из СтрокиНоменклатуры Цикл
		
		Если стрНоменклатуры.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		РаспределяемоеКоличество = 0;
		РаспределяемаяСуммаСтрокиДвижения = 0;
		РаспределяемаяСуммаНДССтрокиДвижения = 0;
		
		Если КоличествоКРаспределению <= стрНоменклатуры.Количество Тогда
			
			РаспределяемоеКоличество = КоличествоКРаспределению;
			
			стрНоменклатуры.Количество = стрНоменклатуры.Количество - РаспределяемоеКоличество;
			
			КоличествоКРаспределению = 0;
			
			// Строка движения
			РаспределяемаяСуммаСтрокиДвижения = СтрокаДвижения.Сумма;
			РаспределяемаяСуммаНДССтрокиДвижения = СтрокаДвижения.СуммаНДС;
			
			СтрокаДвижения.Количество = 0;
			СтрокаДвижения.Сумма = 0;
			СтрокаДвижения.СуммаНДС = 0;
			
		Иначе
			
			РаспределяемоеКоличество = стрНоменклатуры.Количество;
			
			КоличествоКРаспределению = КоличествоКРаспределению - РаспределяемоеКоличество;
			
			стрНоменклатуры.Количество = 0;
			
			// Строка движения
			РаспределяемаяСуммаСтрокиДвижения = РаспределяемоеКоличество * СтрокаДвижения.Сумма / СтрокаДвижения.Количество;
			РаспределяемаяСуммаНДССтрокиДвижения = РаспределяемоеКоличество * СтрокаДвижения.СуммаНДС / СтрокаДвижения.Количество;
			
			СтрокаДвижения.Количество = СтрокаДвижения.Количество - РаспределяемоеКоличество;
			СтрокаДвижения.Сумма = СтрокаДвижения.Сумма - РаспределяемаяСуммаСтрокиДвижения;
			СтрокаДвижения.СуммаНДС = СтрокаДвижения.СуммаНДС - РаспределяемаяСуммаНДССтрокиДвижения;
						
		КонецЕсли;
		
		// заполняем таблицу движений регистратора
		СтрокаРезультатаДляПартииБезОплаты = ТаблицаДвижений.Добавить();
		
		СтрокаРезультатаДляПартииБезОплаты.НеОплачена = Истина;
		СтрокаРезультатаДляПартииБезОплаты.ВидДвижения = ВидДвиженияНакопления.Расход;
		СтрокаРезультатаДляПартииБезОплаты.Период = СтрокаДвижения.Дата;
		
		СтрокаРезультатаДляПартииБезОплаты.Организация = СтрокаДвижения.Регистратор.Организация;
		СтрокаРезультатаДляПартииБезОплаты.Номенклатура = СтрокаДвижения.Номенклатура;
		СтрокаРезультатаДляПартииБезОплаты.ДокументПартии = стрНоменклатуры.ДокументПартии;
		
		СтрокаРезультатаДляПартииБезОплаты.Количество = РаспределяемоеКоличество;
		СтрокаРезультатаДляПартииБезОплаты.Сумма = 0;
		СтрокаРезультатаДляПартииБезОплаты.СуммаНДС = 0;
		
		СтрокаРезультатаДляПартииБезОплаты.ДокументРегистрацииВКУДиР = СтрокаДвижения.Регистратор;
		СтрокаРезультатаДляПартииБезОплаты.ДатаПервичногоДокумента = стрНоменклатуры.ДокументПартииДата;
		СтрокаРезультатаДляПартииБезОплаты.НомерПервичногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(стрНоменклатуры.ДокументПартииНомер, Истина, Истина);
		
		СтрокаРезультатаДляПартииБезОплаты.Активность    = Истина;
		СтрокаРезультатаДляПартииБезОплаты.МоментВремени = СтрокаДвижения.Регистратор.МоментВремени();
		
		//
		СтрокаРезультата = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаДвижения);
		СтрокаРезультата.ВидДвижения = ВидДвиженияНакопления.Расход;
		ЗаполнитьСтрокуРезультатаПоСтрокиДвиженияДополнительно(СтрокаРезультата, СтрокаДвижения);
		
		СтрокаРезультата.ДатаПервичногоДокумента = СтрокаРезультатаДляПартииБезОплаты.ДатаПервичногоДокумента;
		СтрокаРезультата.НомерПервичногоДокумента = СтрокаРезультатаДляПартииБезОплаты.НомерПервичногоДокумента;
		
		СтрокаРезультата.Количество = РаспределяемоеКоличество;
		СтрокаРезультата.Сумма = РаспределяемаяСуммаСтрокиДвижения;
		СтрокаРезультата.СуммаНДС = РаспределяемаяСуммаНДССтрокиДвижения;
		
		//СтрокаРезультата.ДокументРегистрацииВКУДиР = стрНоменклатуры.ДокументПартии;
		
		Если КоличествоКРаспределению = 0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаДвижения.Количество > 0 Тогда
		// Заполняем таблицу партий
		СтрокаПартий = ТаблицаПартионногоУчета.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПартий, СтрокаДвижения);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ПредварительныйРасчетНалоговКОплате

Процедура ВыполнитьРасчетАвансовогоПлатежаПредварительный(Организация, ПериодРасчета, ДатаДокументаОбработкиСобытия, ЗаписьСобытия) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот КАК ДоходовЗаГод,
	|	КнигаУчетаДоходовИРасходовОбороты.РасходБазаОборот КАК РасходовЗаГод
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &ОкончаниеПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизацийСрезПоследних.СтавкаНалога,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.ОбъектНалогообложения,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.ПовышеннаяСтавкаНалога
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&ОкончаниеПериода, Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних
	|;");
	
	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	Если НЕ УчетВалютныхОпераций ИЛИ НациональнаяВалюта = ВалютаУчета Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ВЫБРАТЬ
		|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетов)
		|				И СрокУплаты В
		|					(ВЫБРАТЬ
		|						КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|					ИЗ
		|						Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|					ГДЕ
		|						КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН)
		|						И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода)) КАК РасчетыПоНалогамОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			&НачалоПериода,
		|			&ОкончаниеПериода,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетовВзносыВПФРИФСС)
		|				И СрокУплаты <> &ПустаяДата) КАК РасчетыПоНалогамОбороты
		|;";
	Иначе
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТ, НачалоГода(ПериодРасчета), КонецДня(ПериодРасчета), НациональнаяВалюта, УчетВалютныхОпераций);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = запрос.Текст +
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)), 0) КАК СуммаУплачено
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ
		|	РасчетыПоНалогам.Организация = &Организация
		|	И РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыПоНалогам.ВидНалога В(&ВидыВзаиморасчетов)
		|	И РасчетыПоНалогам.СрокУплаты В
		|			(ВЫБРАТЬ
		|				КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|			ИЗ
		|				Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|			ГДЕ
		|				КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН)
		|				И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)), 0) КАК СуммаУплачено
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ
		|	РасчетыПоНалогам.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыПоНалогам.Организация = &Организация
		|	И РасчетыПоНалогам.ВидНалога В(&ВидыВзаиморасчетовВзносыВПФРИФСС)
		|	И РасчетыПоНалогам.СрокУплаты <> &ПустаяДата
		|;";
		
		Запрос.УстановитьПараметр("ВалютаУчета", ВалютаУчета);
	КонецЕсли;

	
	ВидыВзаиморасчетов = Новый Массив;
	ВидыВзаиморасчетов.Добавить(Справочники.ВидыНалогов.АвансовыйПлатежПриУСН);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ПериодРасчета));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодРасчета));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыВзаиморасчетов", ВидыВзаиморасчетов);
	Запрос.УстановитьПараметр("СрокУплаты", ДатаДокументаОбработкиСобытия);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300ТР);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФСССотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФССТравматизмСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФОМССотрудники);
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетовВзносыВПФРИФСС", ВидыВзаиморасчетовВзносыВПФРИФСС);

	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Параметры расчета налога
	ТаблицаПоПараметрам = РезультатЗапроса[1].Выгрузить();
	Если ТаблицаПоПараметрам.Количество() > 0 Тогда
		СтавкаНалогаАП         = ТаблицаПоПараметрам[0].СтавкаНалога;
		ОбъектНалогообложения  = ТаблицаПоПараметрам[0].ОбъектНалогообложения;
		ПовышеннаяСтавкаНалога = ТаблицаПоПараметрам[0].ПовышеннаяСтавкаНалога;
	Иначе
		СтавкаНалогаАП         = 6;
		ПовышеннаяСтавкаНалога = 8;
		ОбъектНалогообложения  = Перечисления.ВидыОбъектовНалогообложения.Доходы;
	КонецЕсли;
	
	ТаблицаПоНалогу = РезультатЗапроса[0].Выгрузить();
	
	Если ТаблицаПоНалогу.Количество() = 0 Тогда
		СобытиеКалендаряОбъект = ЗаписьСобытия.ПолучитьОбъект();
		СобытиеКалендаряОбъект.СуммаНалога = 0;
		СобытиеКалендаряОбъект.Записать();
		
		Возврат;
		
	Иначе
		
		СтрокаДанныхНалога = ТаблицаПоНалогу[0];
		СуммаДоходовАП     = СтрокаДанныхНалога.ДоходовЗаГод;
		СуммаРасходовАП    = СтрокаДанныхНалога.РасходовЗаГод;
		
	КонецЕсли;
	
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ПериодРасчета), Новый Структура("Организация", Организация));
	
	ВыборкаВзносыВПФРИФСС = РезультатЗапроса[3].Выбрать();
	Если ВыборкаВзносыВПФРИФСС.Следующий() Тогда
		Если СистемаНалогообложения.ПлательщикЕНВД И СистемаНалогообложения.ПлательщикУСН И Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВЕНВД Тогда
			СуммаСтраховыхВзносовАП = 0;
		Иначе
			СуммаСтраховыхВзносовАП = ВыборкаВзносыВПФРИФСС.СуммаУплачено;
		КонецЕсли;
	Иначе
		СуммаСтраховыхВзносовАП = 0;
	КонецЕсли;

	
	Если ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
		СуммаРасходовАП = 0;
	Иначе
		СуммаСтраховыхВзносовКУплатеАП = 0;
	КонецЕсли;
	
	// убираем отрицательные
	НалоговаяБазаАП =Макс(СуммаДоходовАП - СуммаРасходовАП, 0);
	
	СтруктураРасчетаАвансовогоПлатежа = Новый Структура(
		"НалоговаяБазаАП, 
		|ОбъектНалогообложения,
		|СтавкаНалогаАП,
		|СтавкаНалогаАППовышенная,
		|СуммаАП,
		|СуммаДоходовАП,
		|СуммаРасходовАП,
		|СуммаАППовышенная,
		|СуммаДоходовАППовышенная,
		|СуммаРасходовАППовышенная", 
		НалоговаяБазаАП, 
		ОбъектНалогообложения,
		СтавкаНалогаАП,
		ПовышеннаяСтавкаНалога,
		0,
		0,
		0,
		0,
		0,
		0);
		

	РассчитатьСуммуПлатежа(
		НачалоГода(ПериодРасчета), 
		КонецДня(ПериодРасчета), 
		Организация, 
		СтруктураРасчетаАвансовогоПлатежа);
		
	СуммаАвансовогоПлатежа = СтруктураРасчетаАвансовогоПлатежа.СуммаАП + СтруктураРасчетаАвансовогоПлатежа.СуммаАППовышенная;
	
	СуммаАП = СуммаАвансовогоПлатежа;
	
	ВыборкаПоУплате = РезультатЗапроса[2].Выбрать();
	Если ВыборкаПоУплате.Следующий() Тогда
		СуммаАвансовыхПлатежейАП = ВыборкаПоУплате.СуммаУплачено;
	Иначе
		СуммаАвансовыхПлатежейАП = 0;
	КонецЕсли;
	
	ВсегоКУплатеАП = СуммаАП - СуммаАвансовыхПлатежейАП;
	Если ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
		
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ЮридическоеФизическоеЛицо,ИПИспользуетТрудНаемныхРаботников");
		
		// Проверяем, производились ли выплаты сотрудникам и расчетный период больше 01.01.12
		// то можно принимать к вычету все 100%
		Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не РеквизитыОрганизации.ИПИспользуетТрудНаемныхРаботников
			И ПериодРасчета >= '20120101' Тогда
			
			СуммаСтраховыхВзносовКУплатеАП =
					?(1*СуммаАП < СуммаСтраховыхВзносовАП,
					(1*СуммаАП), СуммаСтраховыхВзносовАП);
			ВсегоКУплатеАП = ВсегоКУплатеАП
				- СуммаСтраховыхВзносовКУплатеАП;
			
		Иначе
			СуммаСтраховыхВзносовКУплатеАП =
					?(0.5*СуммаАП < СуммаСтраховыхВзносовАП,
					(0.5*СуммаАП), СуммаСтраховыхВзносовАП);
			ВсегоКУплатеАП = ВсегоКУплатеАП
				- СуммаСтраховыхВзносовКУплатеАП;
		КонецЕсли;
	КонецЕсли;
	
	ВсегоКУплатеАП = Окр(Макс(0,ВсегоКУплатеАП));
	
	
	// запись состояние события календаря
	Если ЗаписьСобытия <> Неопределено Тогда
		СуммаЗаПредыдущиеПериоды = ПредварительнаяСуммаНалогаЗаПредыдущиеПериоды(Организация, Справочники.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН, ДатаДокументаОбработкиСобытия);
		СобытиеКалендаряОбъект = ЗаписьСобытия.ПолучитьОбъект();
		СобытиеКалендаряОбъект.СуммаНалога = ?(ВсегоКУплатеАП-СуммаЗаПредыдущиеПериоды > 0, ВсегоКУплатеАП-СуммаЗаПредыдущиеПериоды, 0);
		СобытиеКалендаряОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьРасчетЕдиногоНалогаПредварительный(Организация, ПериодРасчета, ДатаДокументаОбработкиСобытия, ЗаписьСобытия) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот КАК ДоходовЗаГод,
	|	КнигаУчетаДоходовИРасходовОбороты.РасходБазаОборот КАК РасходовЗаГод
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &ОкончаниеПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизацийСрезПоследних.СтавкаНалога,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.ОбъектНалогообложения,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.ПовышеннаяСтавкаНалога
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&ОкончаниеПериода, Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних
	|;");
	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	
	Если НЕ УчетВалютныхОпераций ИЛИ НациональнаяВалюта = ВалютаУчета Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ВЫБРАТЬ
		|	СУММА(РасчетыПоНалогамОбороты.СуммаРасход) КАК СуммаУплачено,
		|	СУММА(РасчетыПоНалогамОбороты.СуммаПриход) КАК СуммаНачислено,
		|	НАЧАЛОПЕРИОДА(РасчетыПоНалогамОбороты.СрокУплаты, КВАРТАЛ) КАК КварталУплаты
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетов)
		|				И СрокУплаты В
		|					(ВЫБРАТЬ
		|						КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|					ИЗ
		|						Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|					ГДЕ
		|						КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН)
		|						И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода)) КАК РасчетыПоНалогамОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(РасчетыПоНалогамОбороты.СрокУплаты, КВАРТАЛ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			&НачалоПериода,
		|			&ОкончаниеПериода,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетовВзносыВПФРИФСС)) КАК РасчетыПоНалогамОбороты";
	Иначе
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТ, НачалоГода(ПериодРасчета), КонецДня(ПериодРасчета), НациональнаяВалюта, УчетВалютныхОпераций);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = запрос.Текст +
		"
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаУплачено,
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаНачислено,
		|	НАЧАЛОПЕРИОДА(РасчетыПоНалогам.СрокУплаты, КВАРТАЛ) КАК КварталУплаты
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ
		|	РасчетыПоНалогам.Организация = &Организация
		|	И РасчетыПоНалогам.ВидНалога В(&ВидыВзаиморасчетов)
		|	И РасчетыПоНалогам.СрокУплаты В
		|			(ВЫБРАТЬ
		|				КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|			ИЗ
		|				Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|			ГДЕ
		|				КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН)
		|				И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода)
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(РасчетыПоНалогам.СрокУплаты, КВАРТАЛ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаУплачено
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам  КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ 
		|	РасчетыПоНалогам.Период МЕЖДУ &НачалоПериода И 
		|	&ОкончаниеПериода
		|	И РасчетыПоНалогам.Организация = &Организация
		|		И РасчетыПоНалогам.ВидНалога В (&ВидыВзаиморасчетовВзносыВПФРИФСС)";
		Запрос.УстановитьПараметр("ВалютаУчета", ВалютаУчета);
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ПериодРасчета));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодРасчета));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ВидыВзаиморасчетов = Новый Массив;
	ВидыВзаиморасчетов.Добавить(Справочники.ВидыНалогов.АвансовыйПлатежПриУСН);
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетов", ВидыВзаиморасчетов);
	Запрос.УстановитьПараметр("СрокУплаты", ДатаДокументаОбработкиСобытия);
	
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300ТР);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФСССотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФССТравматизмСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФОМССотрудники);
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетовВзносыВПФРИФСС", ВидыВзаиморасчетовВзносыВПФРИФСС);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Параметры расчета налога
	ТаблицаПоПараметрам = РезультатЗапроса[1].Выгрузить();
	
	Если ТаблицаПоПараметрам.Количество() > 0 Тогда
		СтавкаНалогаЕН = ТаблицаПоПараметрам[0].СтавкаНалога;
		ОбъектНалогообложения = ТаблицаПоПараметрам[0].ОбъектНалогообложения;
		ПовышеннаяСтавкаНалога = ТаблицаПоПараметрам[0].ПовышеннаяСтавкаНалога;
	Иначе
		СтавкаНалогаЕН = 6;
		ПовышеннаяСтавкаНалога = 8;
		ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы;
	КонецЕсли;
	
	ТаблицаПоНалогу = РезультатЗапроса[0].Выгрузить();
	
	Если ТаблицаПоНалогу.Количество() = 0 Тогда
		
		СобытиеКалендаряОбъект = ЗаписьСобытия.ПолучитьОбъект();
		СобытиеКалендаряОбъект.СуммаНалога = 0;
		СобытиеКалендаряОбъект.Записать();
		
		Возврат;
		
	Иначе
		
		СтрокаДанныхНалога = ТаблицаПоНалогу[0];
		СуммаДоходовЗаГодЕН = СтрокаДанныхНалога.ДоходовЗаГод;
		СуммаРасходовЗаГодЕН = СтрокаДанныхНалога.РасходовЗаГод;
		
	КонецЕсли;
	
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ПериодРасчета), Новый Структура("Организация", Организация));
	
	ВыборкаВзносыВПФРИФСС = РезультатЗапроса[3].Выбрать();
	Если ВыборкаВзносыВПФРИФСС.Следующий() Тогда
		Если СистемаНалогообложения.ПлательщикЕНВД И СистемаНалогообложения.ПлательщикУСН И Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВЕНВД Тогда
			СуммаСтраховыхВзносовЕН = 0;
		Иначе
			СуммаСтраховыхВзносовЕН = ВыборкаВзносыВПФРИФСС.СуммаУплачено;
		КонецЕсли;
	Иначе
		СуммаСтраховыхВзносовЕН = 0;
	КонецЕсли;
	
	Если ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
		СуммаРасходовЗаГодЕН = 0;
	Иначе
		СуммаСтраховыхВзносовКУплатеЕН = 0;
	КонецЕсли;
	
	// убираем отрицательные
	НалоговаяБазаЕН = Макс(СуммаДоходовЗаГодЕН - СуммаРасходовЗаГодЕН,0);
	
	СуммаМинимальногоНалога = СуммаДоходовЗаГодЕН*1/100;
	
	СтруктураРасчетаЕдиногоНалога = Новый Структура(
		"НалоговаяБазаЕН, 
		|ОбъектНалогообложения,
		|СтавкаНалогаЕН,
		|СтавкаНалогаЕНПовышенная,
		|СуммаЕН,
		|СуммаДоходовЗаГодЕН,
		|СуммаРасходовЗаГодЕН,
		|СуммаЕНПовышенная,
		|СуммаДоходовЗаГодЕНПовышенная,
		|СуммаРасходовЗаГодЕНПовышенная", 
		НалоговаяБазаЕН, 
		ОбъектНалогообложения,
		СтавкаНалогаЕН,
		ПовышеннаяСтавкаНалога,
		0,
		0,
		0,
		0,
		0,
		0);
		
	
	РассчитатьСуммуПлатежа(
		НачалоГода(ПериодРасчета), 
		КонецДня(ПериодРасчета), 
		Организация, 
		СтруктураРасчетаЕдиногоНалога,
		Ложь);
		
	СуммаЕдиногоНалога = СтруктураРасчетаЕдиногоНалога.СуммаЕН + СтруктураРасчетаЕдиногоНалога.СуммаЕНПовышенная;
	
	Если СуммаМинимальногоНалога > СуммаЕдиногоНалога Тогда
		// минимальный налог в 1% от доходов
		СуммаЕН = СуммаМинимальногоНалога;
	Иначе
		СуммаЕН = СуммаЕдиногоНалога;
	КонецЕсли;
	
	ВыборкаПоУплате = РезультатЗапроса[2].Выбрать();
	УплаченоЗаПериод = 0;
	Авансы1квЕН = 0;
	Авансы2квЕН = 0;
	Авансы3квЕН = 0;
	
	Пока ВыборкаПоУплате.Следующий() Цикл
		
		Если Месяц(ВыборкаПоУплате.КварталУплаты) <= 4 Тогда  // апрель, 1й квартал
			Авансы1квЕН = ВыборкаПоУплате.СуммаНачислено;
		ИначеЕсли Месяц(ВыборкаПоУплате.КварталУплаты) <= 7 Тогда // июль, 2й квартал
			Авансы2квЕН = ВыборкаПоУплате.СуммаНачислено;
		Иначе // все остальное пихаем на 3й квартал
			Авансы3квЕН = ВыборкаПоУплате.СуммаНачислено;
		КонецЕсли;
		
		УплаченоЗаПериод = УплаченоЗаПериод + ВыборкаПоУплате.СуммаУплачено;
		
	КонецЦикла;
	
	Авансы2квЕН = Авансы2квЕН + Авансы1квЕН;
	Авансы3квЕН = Авансы3квЕН + Авансы2квЕН;
	
	СуммаАвансовыхПлатежейЗаГодЕН = УплаченоЗаПериод;
	
	ВсегоКУплатеЕН = (СуммаЕН) - СуммаАвансовыхПлатежейЗаГодЕН;
	Если ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ЮридическоеФизическоеЛицо,ИПИспользуетТрудНаемныхРаботников");
		Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не РеквизитыОрганизации.ИПИспользуетТрудНаемныхРаботников
			И ПериодРасчета >= '20120101' Тогда 
			
			СуммаСтраховыхВзносовКУплатеЕН =
					?(1*СуммаЕН < СуммаСтраховыхВзносовЕН,
					(1*СуммаЕН), СуммаСтраховыхВзносовЕН);
			ВсегоКУплатеЕН = ВсегоКУплатеЕН
				- СуммаСтраховыхВзносовКУплатеЕН;
			
		Иначе
			СуммаСтраховыхВзносовКУплатеЕН =
					?(0.5*СуммаЕН < СуммаСтраховыхВзносовЕН,
					(0.5*СуммаЕН), СуммаСтраховыхВзносовЕН);
			ВсегоКУплатеЕН = ВсегоКУплатеЕН
				- СуммаСтраховыхВзносовКУплатеЕН;
		КонецЕсли;
	КонецЕсли;
	
	ВсегоКУплатеЕН = Окр(Макс(0,ВсегоКУплатеЕН));
	
	
	// запись состояние события календаря
	Если ЗаписьСобытия <> Неопределено  Тогда
		
		СуммаЗаПредыдущиеПериоды = ПредварительнаяСуммаНалогаЗаПредыдущиеПериоды(Организация, Справочники.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН, ДатаДокументаОбработкиСобытия);
		СобытиеКалендаряОбъект = ЗаписьСобытия.ПолучитьОбъект();
		СобытиеКалендаряОбъект.СуммаНалога = ?(ВсегоКУплатеЕН - СуммаЗаПредыдущиеПериоды > 0, ВсегоКУплатеЕН - СуммаЗаПредыдущиеПериоды, 0);;
		СобытиеКалендаряОбъект.Записать();
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ВыполнитьРасчетВзносовВПФРПриДоходахСвыше300трПредварительный(Организация, ПериодРасчета, ДатаДокументаОбработкиСобытия, ЗаписьСобытия) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот КАК ДоходовЗаГод,
	|	КнигаУчетаДоходовИРасходовОбороты.РасходБазаОборот КАК РасходовЗаГод
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &ОкончаниеПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|;");
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	Если НЕ УчетВалютныхОпераций ИЛИ НациональнаяВалюта = ВалютаУчета Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.СуммаРасход), 0) КАК СуммаРасход
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			&НачалоПериода,
		|			,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетов)
		|				И СрокУплаты В
		|					(ВЫБРАТЬ
		|						КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|					ИЗ
		|						Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|					ГДЕ
		|						КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыПриДоходахСвыше300ТР)
		|						И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода)) КАК РасчетыПоНалогам
		|;";
	Иначе
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТ, НачалоГода(ПериодРасчета), КонецДня(ПериодРасчета), НациональнаяВалюта, УчетВалютныхОпераций);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)), 0) КАК СуммаРасход
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ
		|	РасчетыПоНалогам.Период >= &НачалоПериода
		|	И РасчетыПоНалогам.Организация = &Организация
		|	И РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыПоНалогам.ВидНалога В(&ВидыВзаиморасчетов)
		|	И РасчетыПоНалогам.СрокУплаты В
		|			(ВЫБРАТЬ
		|				КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|			ИЗ
		|				Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|			ГДЕ
		|				КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыПриДоходахСвыше300ТР)
		|				И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоПериода)
		|;";
		Запрос.УстановитьПараметр("ВалютаУчета", ВалютаУчета);
		
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СрокУплаты", ДобавитьМесяц(НачалоГода(ПериодРасчета),15));
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ПериодРасчета));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ПериодРасчета));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодРасчета));
	// Второй квартал необходим для исключения выплат,
	// которые были произведены за предыдущий год со сроком уплаты до 01.04
	Запрос.УстановитьПараметр("ВторойКвартал", ДобавитьМесяц(НачалоГода(ПериодРасчета),3));
	
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300ТР);
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетов", ВидыВзаиморасчетовВзносыВПФРИФСС);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	
	ТаблицаПоНалогу = РезультатЗапроса[0].Выгрузить();
	ДоходыУСН = 0;
	
	Если ТаблицаПоНалогу.Количество() > 0 Тогда
		
		СтрокаДанныхНалога = ТаблицаПоНалогу[0];
		ДоходыУСН= СтрокаДанныхНалога.ДоходовЗаГод;
		
	КонецЕсли;
	
	
	Выборка = РезультатЗапроса[1].Выбрать();
	
	УплаченоСНачалоГОДСвыше300тр = 0;
	Пока Выборка.Следующий() Цикл
		
		УплаченоСНачалоГОДСвыше300тр = Выборка.СуммаРасход;
		
	КонецЦикла;
	
	
	МРОТЗаСебя = РегистрыСведений.МРОТ.МРОТНаДату(НачалоГода(ПериодРасчета));
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ПериодРасчета), Новый Структура("Организация", Организация));
	// Общий доход подсчитывается как сумма
	// по используемым режимам налогообложения
	//
	СуммаДоходовУСНСвыше300тр = 0;
	Если СистемаНалогообложения.ПлательщикУСН Тогда
		СуммаДоходовУСНСвыше300тр = СуммаДоходовУСНСвыше300тр + ДоходыУСН;
	КонецЕсли;
	
	ВременнаяТаблица = Новый ТаблицаЗначений;
	
	ВременнаяТаблица.Колонки.Добавить("ВидДеятельности");
	ВременнаяТаблица.Колонки.Добавить("КодИФНС");
	ВременнаяТаблица.Колонки.Добавить("ОКАТО");
	ВременнаяТаблица.Колонки.Добавить("К2Установленный");
	ВременнаяТаблица.Колонки.Добавить("ДнейВсего");
	ВременнаяТаблица.Колонки.Добавить("ДнейОтработано");
	ВременнаяТаблица.Колонки.Добавить("К2Скорректированный");
	ВременнаяТаблица.Колонки.Добавить("БазоваяДоходность");
	ВременнаяТаблица.Колонки.Добавить("ФизПоказатель");
	ВременнаяТаблица.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов(Новый КвалификаторыЧисла(15,2)));
	ВременнаяТаблица.Колонки.Добавить("СуммаДохода", Новый ОписаниеТипов(Новый КвалификаторыЧисла(15,2)));
	ВременнаяТаблица.Колонки.Добавить("КварталЕНВД", Новый ОписаниеТипов(Новый КвалификаторыЧисла(1,0)));
	
	СуммаДоходовЕНВДСвыше300тр = 0;
	// Рассчитываем доход по ЕНВД
	Если СистемаНалогообложения.ПлательщикЕНВД Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиКалендаряПодготовкиОтчетности.СуммаНалога КАК СуммаНалога
		|ИЗ
		|	Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|		ПО ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря = КалендарьПодготовкиОтчетности.Ссылка
		|			И (КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалогЕНВД))
		|			И (КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия = &ОкончаниеПериода)
		|			И (ЗаписиКалендаряПодготовкиОтчетности.Организация = &Организация)";
		
		Выборка = Запрос.Выполнить().Выбрать(); 
		
		Если Выборка.Следующий() Тогда
			ДоходыЕНВД = Выборка.СуммаНалога;
		Иначе
			ДоходыЕНВД = 0;
		КонецЕсли;
		
		СуммаДоходовЕНВДСвыше300тр = СуммаДоходовЕНВДСвыше300тр + ДоходыЕНВД;
	КонецЕсли;
	
	// Посчитаем патент
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Патенты.Ссылка,
	|	Патенты.ДатаНачала,
	|	Патенты.ДатаОкончания,
	|	Патенты.ПотенциальноВозможныйГодовойДоход
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	НЕ Патенты.ПометкаУдаления
	|	И Патенты.Владелец = &Организация
	|	И (Патенты.ДатаОкончания МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|			ИЛИ Патенты.ДатаНачала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|			ИЛИ &НачалоПериода МЕЖДУ Патенты.ДатаНачала И Патенты.ДатаОкончания
	|			ИЛИ &ОкончаниеПериода МЕЖДУ Патенты.ДатаНачала И Патенты.ДатаОкончания)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СуммаДоходовПатентСвыше300тр = 0;
	Пока Выборка.Следующий() Цикл
		СуммаДоходовПатентСвыше300тр = 
			СуммаДоходовПатентСвыше300тр + 
			РегламентированнаяОтчетностьУСНКлиентСервер.РассчитатьПотенциальноВозможныйДоход(
				Выборка.ПотенциальноВозможныйГодовойДоход, НачалоГода(ПериодРасчета), КонецДня(ПериодРасчета), Организация.ПоддержкаИП)
	КонецЦикла;
	
	СуммаДоходовВзносыСвыше300тр = СуммаДоходовЕНВДСвыше300тр
			+ СуммаДоходовУСНСвыше300тр
			+ СуммаДоходовПатентСвыше300тр;
	
	// Посчитаем сумму фиксированных страховых взносов
	
	ДатаНачалаПрименения = ?(ДатаРегистрации < НачалоГода(ПериодРасчета), НачалоГода(ПериодРасчета), ДатаРегистрации);
	
	КоличествоМесяцевНеполных = 12 - Месяц(ДатаНачалаПрименения);
	КоличествоДней = День(КонецМесяца(ДатаНачалаПрименения))-День(ДатаНачалаПрименения)+1;
	
	
	// Максимальная сумма согласно пп. "а" п. 1 ст. 2 Закона N 237-ФЗ
	// за вычетом фиксированных платежей.
	Если Год(ПериодРасчета) < 2018 Тогда
		ПоМесяцам = МРОТЗаСебя*КоличествоМесяцевНеполных;
		ПоДням = МРОТЗаСебя*КоличествоДней/День(КонецМесяца(ДатаНачалаПрименения));
		СуммаФиксированныхВзносов = (ПоМесяцам+ПоДням)*0.26;
		МаксимальнаяСуммаСтраховыхВзносов = МРОТЗаСебя*8*0.26*12 - СуммаФиксированныхВзносов;
	Иначе
		ТекущиеВзносы = РегистрыСведений.ФиксированныеВзносыИП.ФиксированныеВзносыИПНаДату(НачалоГода(ПериодРасчета));
		СуммаФиксированныхВзносов = (КоличествоДней/День(КонецМесяца(ДатаНачалаПрименения))+КоличествоМесяцевНеполных)*ТекущиеВзносы.РазмерПФР/12;
		МаксимальнаяСуммаСтраховыхВзносов = ТекущиеВзносы.РазмерПФР*8 - СуммаФиксированныхВзносов;
	КонецЕсли;
	
	ПФРСвыше300ТР = Мин(МаксимальнаяСуммаСтраховыхВзносов,?(СуммаДоходовВзносыСвыше300тр > 300000,(СуммаДоходовВзносыСвыше300тр - 300000)*0.01, 0));
	ПФРСвыше300ТР = ?(ПФРСвыше300ТР < УплаченоСНачалоГОДСвыше300тр, 0, ПФРСвыше300ТР - УплаченоСНачалоГОДСвыше300тр);
	
	// запись состояние события календаря
	Если ЗаписьСобытия <> Неопределено Тогда
			
		СуммаЗаПредыдущиеПериоды = ПредварительнаяСуммаНалогаЗаПредыдущиеПериоды(Организация, Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыПриДоходахСвыше300ТР, ДатаДокументаОбработкиСобытия);
		СобытиеКалендаряОбъект = ЗаписьСобытия.ПолучитьОбъект();
		СобытиеКалендаряОбъект.СуммаНалога = ?(ПФРСвыше300ТР - СуммаЗаПредыдущиеПериоды > 0, ПФРСвыше300ТР - СуммаЗаПредыдущиеПериоды, 0);;
		СобытиеКалендаряОбъект.Записать();
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ВыполнитьРасчетВзносовВПФРиФССПредварительный(Организация, ПериодРасчета, ДатаДокументаОбработкиСобытия, ЗаписьСобытия) Экспорт
	
	
	Запрос = Новый Запрос;
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	Если НЕ УчетВалютныхОпераций ИЛИ НациональнаяВалюта = ВалютаУчета Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоНалогамОбороты.ВидНалога КАК ВидВзаиморасчетов,
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогамОбороты.СуммаРасход), 0) КАК СуммаРасход
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетов)
		|				И СрокУплаты В
		|					(ВЫБРАТЬ
		|						КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|					ИЗ
		|						Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|					ГДЕ
		|						КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыИП)
		|						И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоГода)) КАК РасчетыПоНалогамОбороты
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоНалогамОбороты.ВидНалога
		|;";
	Иначе
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТ, НачалоГода(ПериодРасчета), КонецДня(ПериодРасчета), НациональнаяВалюта, УчетВалютныхОпераций);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоНалогам.ВидНалога КАК ВидВзаиморасчетов,
		|	ЕСТЬNULL(СУММА(РасчетыПоНалогам.Сумма * ЕСТЬNULL(КурсыВалютПоДням.Коэффициент, 1)), 0) КАК СуммаРасход
		|ИЗ
		|	РегистрНакопления.РасчетыПоНалогам КАК РасчетыПоНалогам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютПоДням КАК КурсыВалютПоДням
		|		ПО (НАЧАЛОПЕРИОДА(РасчетыПоНалогам.Период, ДЕНЬ) = КурсыВалютПоДням.Дата)
		|			И (КурсыВалютПоДням.Валюта = &ВалютаУчета)
		|ГДЕ
		|	РасчетыПоНалогам.Организация = &Организация
		|	И РасчетыПоНалогам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыПоНалогам.ВидНалога В(&ВидыВзаиморасчетов)
		|	И РасчетыПоНалогам.СрокУплаты В
		|			(ВЫБРАТЬ
		|				КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
		|			ИЗ
		|				Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
		|			ГДЕ
		|				КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыИП)
		|				И КалендарьПодготовкиОтчетности.ДатаНачалаДокументов = &НачалоГода)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоНалогам.ВидНалога
		|;";
		Запрос.УстановитьПараметр("ВалютаУчета", ВалютаУчета);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СрокУплаты", ПериодРасчета);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ПериодРасчета));
	
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетов", ВидыВзаиморасчетовВзносыВПФРИФСС);
	
	// соберем данные ранее уплаченных платежей
	
	УплаченоСНачалоГода = Новый Соответствие();
	УплаченоСНачалоГода.Вставить(Справочники.ВидыНалогов.ПФРНакопительная,0);
	УплаченоСНачалоГода.Вставить(Справочники.ВидыНалогов.ПФРСтраховая,0);
	УплаченоСНачалоГода.Вставить(Справочники.ВидыНалогов.ТФОМС,0);
	УплаченоСНачалоГода.Вставить(Справочники.ВидыНалогов.ФФОМС,0);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УплаченоСНачалоГода[Выборка.ВидВзаиморасчетов] = Выборка.СуммаРасход;
		
	КонецЦикла;
	
	ПФРНакопительнаяЗаСебя = 0;
	ПФРСтраховаяЗаСебя = 0;
	ФФОМСЗаСебя = 0;
	ТФОМСЗаСебя = 0;
	
	// Здесь будет произведен расчет взносов
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ФизическоеЛицо,ДатаРегистрации");
	ДатаРождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ФизическоеЛицо, "ДатаРождения");
	ДатаРегистрацииИППФР = ?(ЗначениеЗаполнено(Реквизиты.ДатаРегистрации), Реквизиты.ДатаРегистрации, НачалоГода(ПериодРасчета));
	ДатаРожденияЗаСебя = ?(ЗначениеЗаполнено(ДатаРождения), ДатаРождения, Дата(1980,1,1));
	
	МРОТЗаСебя = РегистрыСведений.МРОТ.МРОТНаДату(НачалоГода(ПериодРасчета));
	
	// ПФР
	ДатаНачалаПрименения = ?(ДатаРегистрацииИППФР <= НачалоГода(ПериодРасчета), НачалоГода(ПериодРасчета), ДатаРегистрацииИППФР);
	
	КоличествоМесяцевНеполных = Месяц(ПериодРасчета) - Месяц(ДатаНачалаПрименения);
	КоличествоДней = День(КонецМесяца(ДатаНачалаПрименения))-День(ДатаНачалаПрименения)+1;
	
	Если Год(ПериодРасчета) < 2018 Тогда
		ПоМесяцам = МРОТЗаСебя*КоличествоМесяцевНеполных;
		ПоДням = МРОТЗаСебя*КоличествоДней/День(КонецМесяца(ДатаНачалаПрименения));
		
		// Коэффициент, с 2013 года равен 2, до этого 1.
		Если Год(ПериодРасчета) = 2013 Тогда
			Коэффициент = 2;
		Иначе
			Коэффициент = 1;
		КонецЕсли;
		
		Если Год(ПериодРасчета) > 2013 Тогда
			ПФРСтраховаяЗаСебя = (ПоМесяцам+ПоДням)*0.26*Коэффициент;
		Иначе
			Если Год(ДатаРожденияЗаСебя) < 1967 Тогда
				ПФРСтраховаяЗаСебя = (ПоМесяцам+ПоДням)*0.26*Коэффициент;
			Иначе
				ПФРСтраховаяЗаСебя = (ПоМесяцам+ПоДням)*0.20*Коэффициент;
				ПФРНакопительнаяЗаСебя = (ПоМесяцам+ПоДням)*0.06*Коэффициент;
			КонецЕсли;
		КонецЕсли;
		
		// ОМС
		
		ФФОМСЗаСебя = (ПоМесяцам+ПоДням)*0.051;
		ТФОМСЗаСебя = (ПоМесяцам+ПоДням)*0.0;
	Иначе
		ТекущиеВзносы = РегистрыСведений.ФиксированныеВзносыИП.ФиксированныеВзносыИПНаДату(НачалоГода(ПериодРасчета));
		
		ПФРСтраховаяЗаСебя = (КоличествоДней/День(КонецМесяца(ДатаНачалаПрименения))+КоличествоМесяцевНеполных)*ТекущиеВзносы.РазмерПФР/12;
		ФФОМСЗаСебя = (КоличествоДней/День(КонецМесяца(ДатаНачалаПрименения))+КоличествоМесяцевНеполных)*ТекущиеВзносы.РазмерФОМС/12;
	КонецЕсли;
	
	// корректируем на сумму уплаты с начала года
	ПФРСтраховаяЗаСебя = 
		Макс(
			ПФРСтраховаяЗаСебя - УплаченоСНачалоГода[Справочники.ВидыНалогов.ПФРСтраховая],
			0);
			
	ПФРНакопительнаяЗаСебя =
			Макс(
			ПФРНакопительнаяЗаСебя - УплаченоСНачалоГода[Справочники.ВидыНалогов.ПФРНакопительная],
			0);
			
	ФФОМСЗаСебя = 
			Макс(
			ФФОМСЗаСебя - УплаченоСНачалоГода[Справочники.ВидыНалогов.ФФОМС],
			0);
			
	ТФОМСЗаСебя = 
			Макс(
			ТФОМСЗаСебя - УплаченоСНачалоГода[Справочники.ВидыНалогов.ТФОМС],
			0);
	
	УплаченоСНачалоГОДЗаСебя = 
		УплаченоСНачалоГода[Справочники.ВидыНалогов.ПФРСтраховая]
		+УплаченоСНачалоГода[Справочники.ВидыНалогов.ПФРНакопительная]
		+УплаченоСНачалоГода[Справочники.ВидыНалогов.ТФОМС]
		+УплаченоСНачалоГода[Справочники.ВидыНалогов.ФФОМС];
	
	// запись состояние события календаря
	Если ЗаписьСобытия <> Неопределено Тогда
			
		СуммаЗаПредыдущиеПериоды = ПредварительнаяСуммаНалогаЗаПредыдущиеПериоды(Организация, Справочники.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыИП, ДатаДокументаОбработкиСобытия);
		СобытиеКалендаряОбъект = ЗаписьСобытия.ПолучитьОбъект();
		СобытиеКалендаряОбъект.СуммаНалога = ПФРСтраховаяЗаСебя + ПФРНакопительнаяЗаСебя + ФФОМСЗаСебя + ТФОМСЗаСебя;
		СобытиеКалендаряОбъект.СуммаНалога = ?(СобытиеКалендаряОбъект.СуммаНалога - СуммаЗаПредыдущиеПериоды > 0, СобытиеКалендаряОбъект.СуммаНалога - СуммаЗаПредыдущиеПериоды, 0);;
		СобытиеКалендаряОбъект.Записать();
		
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура формирует записи по расчету торгового сбора
//
// Параметры:
//		Организация - СправочникСсылка - Организация, по которой необходимо провести формирования
//		ПериодРасчета - Дата - дата окончания квартала, за который нужно провести формирования
//		СобытиеКалендаря - СправочникСсылка.КалендарьПодготовкиОтчетности - событие, по которому зафиксировать 
//			статус того, что событие рассчитано
//
Процедура ВыполнитьРасчетТорговогоСбораПредварительный(Организация, ПериодРасчета, ЗаписьСобытия) Экспорт
	
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТорговыеТочки.КодИФНС,
		|	СУММА(ВЫБОР
		|			КОГДА ТорговыеТочки.ЛьготаПрименяется
		|				ТОГДА 0
		|			ИНАЧЕ ТорговыеТочки.ИсчисленнаяСумма
		|		КОНЕЦ) КАК СуммаВзаиморасчетов,
		|	СУММА(ТорговыеТочки.ИсчисленнаяСумма) КАК ИсчисленнаяСуммаБезЛьгот,
		|	ТорговыеТочки.КодПоОКТМО КАК КодПоОКТМО
		|ИЗ
		|	Справочник.ТорговыеТочки КАК ТорговыеТочки
		|ГДЕ
		|	ТорговыеТочки.Владелец = &Организация
		|	И ТорговыеТочки.ДатаНачалаОсуществленияДеятельности <= &ОкончаниеПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ТорговыеТочки.КодИФНС,
		|	ТорговыеТочки.КодПоОКТМО");
		

	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодРасчета));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ВременнаяТаблица = Запрос.Выполнить().Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("ДокументВзаиморасчетовСБюджетом",Новый ОписаниеТипов("ДокументСсылка.НачислениеНалогов"));
	
	СуммаВзаиморасчетовСБюджетом = ВременнаяТаблица.Итог("СуммаВзаиморасчетов");
	
	
	// запись состояние события календаря
	Если ЗаписьСобытия <> Неопределено Тогда
		СобытиеКалендаряОбъект = ЗаписьСобытия.ПолучитьОбъект();
		СобытиеКалендаряОбъект.СуммаНалога = СуммаВзаиморасчетовСБюджетом;
		СобытиеКалендаряОбъект.Записать();
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПредварительнаяСуммаНалогаЗаПредыдущиеПериоды(Организация, Задача, ТекущийПериод) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("ТекущийПериод", ТекущийПериод);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ТекущийПериод));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(КалендарьПодготовкиОтчетности.ДатаДокументаОбработкиСобытия) КАК ДатаПоследнегоТочногоРасчета
	|ПОМЕСТИТЬ ВТПоследнийРасчет
	|ИЗ
	|	Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|		ПО (КалендарьПодготовкиОтчетности.Ссылка = ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря)
	|			И (ЗаписиКалендаряПодготовкиОтчетности.Организация = &Организация)
	|			И (ЗаписиКалендаряПодготовкиОтчетности.ЭтоТочныйРасчет)
	|			И (КалендарьПодготовкиОтчетности.Задача = &Задача)
	|			И (КалендарьПодготовкиОтчетности.ДатаОкончанияДокументов > &НачалоГода)
	|			И (КалендарьПодготовкиОтчетности.ДатаОкончанияДокументов < &ТекущийПериод)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ЗаписиКалендаряПодготовкиОтчетности.СуммаНалога), 0) КАК СуммаНалога
	|ИЗ
	|	Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|		ПО (КалендарьПодготовкиОтчетности.Ссылка = ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря)
	|			И (ЗаписиКалендаряПодготовкиОтчетности.Организация = &Организация)
	|			И (НЕ ЗаписиКалендаряПодготовкиОтчетности.ЭтоТочныйРасчет)
	|			И (КалендарьПодготовкиОтчетности.Задача = &Задача)
	|			И (КалендарьПодготовкиОтчетности.ДатаОкончанияДокументов > &НачалоГода)
	|			И (КалендарьПодготовкиОтчетности.ДатаОкончанияДокументов < &ТекущийПериод)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследнийРасчет КАК ВТПоследнийРасчет
	|		ПО (КалендарьПодготовкиОтчетности.ДатаДокументаОбработкиСобытия > ЕСТЬNULL(ВТПоследнийРасчет.ДатаПоследнегоТочногоРасчета, &НачалоГода))";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СуммаНалога;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция ЗапросДляРасходовНаТоварыБезПоследовательностиПартий()
	
	ЗапросТекст =
	"ВЫБРАТЬ
	|	ПартииТоваровОбороты.ДокументПартии КАК ДокументПартии,
	|	ПартииТоваровОбороты.ДокументРегистрацииВКУДиР КАК ПервичныйДокумент,
	|	ПартииТоваровОбороты.ДокументРегистрацииВКУДиР.Дата КАК ДатаПервичногоДокумента,
	|	ПартииТоваровОбороты.ДокументРегистрацииВКУДиР.Номер КАК НомерПервичногоДокумента,
	|	СУММА(ПартииТоваровОбороты.СуммаРасход) КАК СуммаРасход,
	|	СУММА(ПартииТоваровОбороты.СуммаНДСРасход) КАК СуммаНДСРасход
	|ПОМЕСТИТЬ ВтОплаченныеПартии
	|ИЗ
	|	РегистрНакопления.ПартииТоваров.Обороты(&НачалоПериода, &ОкончаниеПериода, Регистратор, Организация = &Организация) КАК ПартииТоваровОбороты
	|ГДЕ
	|	НЕ ПартииТоваровОбороты.ДокументПартии ЕСТЬ NULL
	|	И НЕ ПартииТоваровОбороты.ДокументПартии ССЫЛКА Документ.ВводНачальныхОстатков
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровОбороты.ДокументРегистрацииВКУДиР,
	|	ПартииТоваровОбороты.ДокументПартии,
	|	ПартииТоваровОбороты.Регистратор.Дата,
	|	ПартииТоваровОбороты.Регистратор.Номер,
	|	ПартииТоваровОбороты.ДокументРегистрацииВКУДиР.Дата,
	|	ПартииТоваровОбороты.ДокументРегистрацииВКУДиР.Номер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПартииТоваров.ДокументПартии,
	|	ПартииТоваров.ДокументРегистрацииВКУДиР,
	|	ПартииТоваров.ДокументРегистрацииВКУДиР.Дата,
	|	ПартииТоваров.ДокументРегистрацииВКУДиР.Номер,
	|	СУММА(ПартииТоваров.Сумма),
	|	СУММА(ПартииТоваров.СуммаНДС)
	|ИЗ
	|	РегистрНакопления.ПартииТоваров КАК ПартииТоваров
	|ГДЕ
	|	ПартииТоваров.Организация = &Организация
	|	И ПартииТоваров.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И ПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И НЕ ПартииТоваров.ДокументПартии ЕСТЬ NULL
	|	И ПартииТоваров.ДокументПартии ССЫЛКА Документ.ВводНачальныхОстатков
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваров.ДокументРегистрацииВКУДиР,
	|	ПартииТоваров.ДокументПартии,
	|	ПартииТоваров.ДатаПервичногоДокумента,
	|	ПартииТоваров.НомерПервичногоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВтОплаченныеПартии.СуммаРасход > 0
	|			ТОГДА &ПризнаныРасходыНаТовары
	|		ИНАЧЕ &РасходыУменьшенныеОтВозврата
	|	КОНЕЦ КАК Содержание,
	|	СУММА(ВтОплаченныеПартии.СуммаРасход) КАК РасходВсего,
	|	СУММА(ВтОплаченныеПартии.СуммаРасход) КАК РасходБаза,
	|	ВтОплаченныеПартии.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	|	ВтОплаченныеПартии.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	ВтОплаченныеПартии.ПервичныйДокумент КАК ПервичныйДокумент
	|ИЗ
	|	ВтОплаченныеПартии КАК ВтОплаченныеПартии
	|ГДЕ
	|	ВтОплаченныеПартии.СуммаРасход <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтОплаченныеПартии.ПервичныйДокумент,
	|	ВЫБОР
	|		КОГДА ВтОплаченныеПартии.СуммаРасход > 0
	|			ТОГДА &ПризнаныРасходыНаТовары
	|		ИНАЧЕ &РасходыУменьшенныеОтВозврата
	|	КОНЕЦ,
	|	ВтОплаченныеПартии.ДатаПервичногоДокумента,
	|	ВтОплаченныеПартии.НомерПервичногоДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВтОплаченныеПартии.СуммаНДСРасход > 0
	|			ТОГДА &ПризнаныРасходыНаТоварыНДС
	|		ИНАЧЕ &РасходыУменьшенныеОтВозвратаНДС
	|	КОНЕЦ,
	|	СУММА(ВтОплаченныеПартии.СуммаНДСРасход),
	|	СУММА(ВтОплаченныеПартии.СуммаНДСРасход),
	|	ВтОплаченныеПартии.ДатаПервичногоДокумента,
	|	ВтОплаченныеПартии.НомерПервичногоДокумента,
	|	ВтОплаченныеПартии.ПервичныйДокумент
	|ИЗ
	|	ВтОплаченныеПартии КАК ВтОплаченныеПартии
	|ГДЕ
	|	ВтОплаченныеПартии.СуммаНДСРасход <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВтОплаченныеПартии.СуммаНДСРасход > 0
	|			ТОГДА &ПризнаныРасходыНаТоварыНДС
	|		ИНАЧЕ &РасходыУменьшенныеОтВозвратаНДС
	|	КОНЕЦ,
	|	ВтОплаченныеПартии.ПервичныйДокумент,
	|	ВтОплаченныеПартии.ДатаПервичногоДокумента,
	|	ВтОплаченныеПартии.НомерПервичногоДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВтОплаченныеПартии.ДатаПервичногоДокумента";
			
	Возврат ЗапросТекст;
	
КонецФункции

Функция ЗапросДляРасходовНаТоварыСПоследовательностьюПартий()
	
	ЗапросТекст = 
	"ВЫБРАТЬ
	|	ПартииТоваровДляКУДиР.ДокументПартии КАК ДокументПартии,
	|	ПартииТоваровДляКУДиР.ДокументРегистрацииВКУДиР КАК ПервичныйДокумент,
	|	ПартииТоваровДляКУДиР.ДокументРегистрацииВКУДиР.Дата КАК ДатаПервичногоДокумента,
	|	ПартииТоваровДляКУДиР.ДокументРегистрацииВКУДиР.Номер КАК НомерПервичногоДокумента,
	|	СУММА(ПартииТоваровДляКУДиР.Сумма) КАК СуммаРасход,
	|	СУММА(ПартииТоваровДляКУДиР.СуммаНДС) КАК СуммаНДСРасход
	|ПОМЕСТИТЬ ВтОплаченныеПартии
	|ИЗ
	|	РегистрНакопления.ПартииТоваровДляКУДиР КАК ПартииТоваровДляКУДиР
	|ГДЕ
	|	ПартииТоваровДляКУДиР.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И НЕ ПартииТоваровДляКУДиР.ДокументПартии ЕСТЬ NULL
	|	И НЕ ПартииТоваровДляКУДиР.ДокументПартии ССЫЛКА Документ.ВводНачальныхОстатков
	|	И ПартииТоваровДляКУДиР.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И ПартииТоваровДляКУДиР.Организация = &Организация
	|	И ПартииТоваровДляКУДиР.НеОплачена = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровДляКУДиР.ДокументРегистрацииВКУДиР,
	|	ПартииТоваровДляКУДиР.ДокументПартии,
	|	ПартииТоваровДляКУДиР.Регистратор.Дата,
	|	ПартииТоваровДляКУДиР.Регистратор.Номер,
	|	ПартииТоваровДляКУДиР.ДокументРегистрацииВКУДиР.Дата,
	|	ПартииТоваровДляКУДиР.ДокументРегистрацииВКУДиР.Номер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПартииТоваровДляКУДиР.ДокументПартии,
	|	ПартииТоваровДляКУДиР.ДокументРегистрацииВКУДиР,
	|	ПартииТоваровДляКУДиР.ДокументРегистрацииВКУДиР.Дата,
	|	ПартииТоваровДляКУДиР.ДокументРегистрацииВКУДиР.Номер,
	|	СУММА(ПартииТоваровДляКУДиР.Сумма),
	|	СУММА(ПартииТоваровДляКУДиР.СуммаНДС)
	|ИЗ
	|	РегистрНакопления.ПартииТоваровДляКУДиР КАК ПартииТоваровДляКУДиР
	|ГДЕ
	|	ПартииТоваровДляКУДиР.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ПартииТоваровДляКУДиР.Организация = &Организация
	|	И ПартииТоваровДляКУДиР.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НЕ ПартииТоваровДляКУДиР.ДокументПартии ЕСТЬ NULL
	|	И ПартииТоваровДляКУДиР.ДокументПартии ССЫЛКА Документ.ВводНачальныхОстатков
	|	И ПартииТоваровДляКУДиР.НеОплачена = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровДляКУДиР.ДокументРегистрацииВКУДиР,
	|	ПартииТоваровДляКУДиР.ДокументПартии,
	|	ПартииТоваровДляКУДиР.ДатаПервичногоДокумента,
	|	ПартииТоваровДляКУДиР.НомерПервичногоДокумента,
	|	ПартииТоваровДляКУДиР.ДокументРегистрацииВКУДиР.Дата,
	|	ПартииТоваровДляКУДиР.ДокументРегистрацииВКУДиР.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВтОплаченныеПартии.СуммаРасход > 0
	|			ТОГДА &ПризнаныРасходыНаТовары
	|		ИНАЧЕ &РасходыУменьшенныеОтВозврата
	|	КОНЕЦ КАК Содержание,
	|	СУММА(ВтОплаченныеПартии.СуммаРасход) КАК РасходВсего,
	|	СУММА(ВтОплаченныеПартии.СуммаРасход) КАК РасходБаза,
	|	ВтОплаченныеПартии.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	|	ВтОплаченныеПартии.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	ВтОплаченныеПартии.ПервичныйДокумент КАК ПервичныйДокумент
	|ИЗ
	|	ВтОплаченныеПартии КАК ВтОплаченныеПартии
	|ГДЕ
	|	ВтОплаченныеПартии.СуммаРасход <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтОплаченныеПартии.ПервичныйДокумент,
	|	ВЫБОР
	|		КОГДА ВтОплаченныеПартии.СуммаРасход > 0
	|			ТОГДА &ПризнаныРасходыНаТовары
	|		ИНАЧЕ &РасходыУменьшенныеОтВозврата
	|	КОНЕЦ,
	|	ВтОплаченныеПартии.ДатаПервичногоДокумента,
	|	ВтОплаченныеПартии.НомерПервичногоДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВтОплаченныеПартии.СуммаНДСРасход > 0
	|			ТОГДА &ПризнаныРасходыНаТоварыНДС
	|		ИНАЧЕ &РасходыУменьшенныеОтВозвратаНДС
	|	КОНЕЦ,
	|	СУММА(ВтОплаченныеПартии.СуммаНДСРасход),
	|	СУММА(ВтОплаченныеПартии.СуммаНДСРасход),
	|	ВтОплаченныеПартии.ДатаПервичногоДокумента,
	|	ВтОплаченныеПартии.НомерПервичногоДокумента,
	|	ВтОплаченныеПартии.ПервичныйДокумент
	|ИЗ
	|	ВтОплаченныеПартии КАК ВтОплаченныеПартии
	|ГДЕ
	|	ВтОплаченныеПартии.СуммаНДСРасход <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВтОплаченныеПартии.СуммаНДСРасход > 0
	|			ТОГДА &ПризнаныРасходыНаТоварыНДС
	|		ИНАЧЕ &РасходыУменьшенныеОтВозвратаНДС
	|	КОНЕЦ,
	|	ВтОплаченныеПартии.ПервичныйДокумент,
	|	ВтОплаченныеПартии.ДатаПервичногоДокумента,
	|	ВтОплаченныеПартии.НомерПервичногоДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВтОплаченныеПартии.ДатаПервичногоДокумента";
	
	Возврат ЗапросТекст;
	
КонецФункции

#Область ПоследовательностьПартийДляКУДиР

Процедура ВыполнитьФормированияДвиженийПартионногоУчетаСПоследовательностью(ГраницаВыполнения)
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОрганизаций.Следующий() Цикл
		ГраницаНачала = РегистрыСведений.ПоследовательностьПартийДляКУДиР.ПолучитьДатуГраницыДляОрганизации(ВыборкаОрганизаций.Ссылка);
		Если ГраницаНачала = Неопределено Или ГраницаНачала = Null Тогда
			Продолжить;
		КонецЕсли;
		
		НачалоПериода = НачалоМесяца(ГраницаНачала);
		КонецПериода = КонецМесяца(ГраницаНачала);
		
		Пока КонецПериода <= КонецМесяца(ДатаСеанса) Цикл
			
			ОбработатьДокументыПартионногоУчетаЗаМесяц(ВыборкаОрганизаций.Ссылка, НачалоПериода, КонецПериода);
			ПередвинутьГраницуПоследовательностиНаНачалоСледующегоМесяца(ВыборкаОрганизаций.Ссылка, КонецПериода);
			
			ГраницаНачала = КонецМесяца(ГраницаНачала) + 1;
			НачалоПериода = НачалоМесяца(ГраницаНачала);
			КонецПериода = КонецМесяца(ГраницаНачала);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьДокументыПартионногоУчетаЗаМесяц(пОрганизация, ГраницаНачала, ГраницаВыполнения)
	
	ОчиститьДвиженияПоПартиямСпоследовательностьюЗаМесяц(пОрганизация, ГраницаНачала, ГраницаВыполнения);
	СформироватьДвиженияПартионногоУчетаСПоследовательностьюЗаМесяц(пОрганизация, ГраницаНачала, ГраницаВыполнения);
	
КонецПроцедуры

Процедура ПередвинутьГраницуПоследовательностиНаНачалоСледующегоМесяца(пОрганизация, пДатаИзОбработанногоМесяца)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоследовательностьПартийДляКУДиР.Организация КАК Организация,
		|	ПоследовательностьПартийДляКУДиР.НачалоМесяца КАК НачалоМесяца
		|ИЗ
		|	РегистрСведений.ПоследовательностьПартийДляКУДиР КАК ПоследовательностьПартийДляКУДиР
		|ГДЕ
		|	ПоследовательностьПартийДляКУДиР.НачалоМесяца <= КОНЕЦПЕРИОДА(&ДатаВМесяцеДляОбработки, МЕСЯЦ)
		|	И ПоследовательностьПартийДляКУДиР.НачалоМесяца >= НАЧАЛОПЕРИОДА(&ДатаВМесяцеДляОбработки, МЕСЯЦ)
		|	И ПоследовательностьПартийДляКУДиР.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ДатаВМесяцеДляОбработки", пДатаИзОбработанногоМесяца);
	Запрос.УстановитьПараметр("Организация", пОрганизация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ПоследовательностьПартийДляКУДиР.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НачалоМесяца.Установить(НачалоМесяца(пДатаИзОбработанногоМесяца));
		НаборЗаписей.Отбор.Организация.Установить(пОрганизация);
		
		ЗамещатьРавноИстина = Истина;
		НаборЗаписей.Записать(ЗамещатьРавноИстина);
		
	КонецЦикла;
	
	НачалоСледующегоМесяца = КонецМесяца(пДатаИзОбработанногоМесяца) + 1;
	
	НаборЗаписей = РегистрыСведений.ПоследовательностьПартийДляКУДиР.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НачалоМесяца.Установить(НачалоСледующегоМесяца);
	НаборЗаписей.Отбор.Организация.Установить(пОрганизация);
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Организация = пОрганизация;
	НоваяСтрока.Документ = Неопределено;
	НоваяСтрока.НачалоМесяца = НачалоСледующегоМесяца;
	НоваяСтрока.ДатаДокумента = НачалоСледующегоМесяца;
	
	ЗамещатьРавноИстина = Истина;
	НаборЗаписей.Записать(ЗамещатьРавноИстина);
	
КонецПроцедуры

Процедура ОчиститьДвиженияПоПартиямСпоследовательностьюЗаМесяц(пОрганизация, ГраницаНачала, ГраницаВыполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПартииТоваровДляКУДиР.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ПартииТоваровДляКУДиР КАК ПартииТоваровДляКУДиР
		|ГДЕ
		|	ПартииТоваровДляКУДиР.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ПартииТоваровДляКУДиР.Организация = &пОрганизация";
	
	Запрос.УстановитьПараметр("ДатаНачала", ГраницаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ГраницаВыполнения);
	Запрос.УстановитьПараметр("пОрганизация", пОрганизация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Регистратор.ПолучитьОбъект();
		ДвиженияПартийРегистратора = ДокументОбъект.Движения.ПартииТоваровДляКУДиР;
		ДвиженияПартийРегистратора.Очистить();
		ДвиженияПартийРегистратора.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияПартионногоУчетаСПоследовательностьюЗаМесяц(пОрганизация, ГраницаНачала, ГраницаВыполнения)
	
	ТаблицаПартионногоУчета  = ПолучитьОписаниеТаблицыПартионногоУчетаСПоследовательностью();
	ТаблицаПартионногоУчета.Индексы.Добавить("Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И Организации.Ссылка = &Организация";
	
	Запрос.УстановитьПараметр("Организация", пОрганизация);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОрганизаций = РезультатЗапроса.Выбрать();
	Пока ВыборкаОрганизаций.Следующий() Цикл
		// исходные данные по таблицам движений
		ДвиженияДокументовПартий = Новый Массив; //  Двумерный массив: [0] - документ; [1] - таблица движений документа; [2] - вид записи.
		
		СоответствиеДокументовРегистраторов = Новый Соответствие;
		СтруктураТаблиц = ПолучитьИсходнуюТаблицуДляФормированияДвиженийПоПартиямСПоследовательностью(ВыборкаОрганизаций.Ссылка, ГраницаНачала, ГраницаВыполнения);
		
		// формирование дерева результат и таблицы партионного учета
		ОбработатьТаблицуДвиженийСПоследовательностью(
			СтруктураТаблиц.ТаблицаПоступлений,
			ДвиженияДокументовПартий,
			ТаблицаПартионногоУчета,
			СтруктураТаблиц.ТаблицаЗаказов,
			СоответствиеДокументовРегистраторов,
			СтруктураТаблиц.ТаблицаПартийБезОплаты);
			
		ОбработатьТаблицуДвиженийСПоследовательностью(
			СтруктураТаблиц.ТаблицаПродажИВозвратов,
			ДвиженияДокументовПартий,
			ТаблицаПартионногоУчета,
			СтруктураТаблиц.ТаблицаЗаказов,
			СоответствиеДокументовРегистраторов,
			СтруктураТаблиц.ТаблицаПартийБезОплаты);
			
		ТаблицаПартионногоУчета.Очистить();
		
		МассивОбработанныхРегистраторов = СформироватьИЗаписатьДвиженияДокументовПартионногоУчетаСПоследовательностью(ДвиженияДокументовПартий);
	КонецЦикла;
	
КонецПроцедуры

// Функция подготовливает объект таблицы партионного учета
// 
// Возвращает:
//		ТаблицаЗначений
//
Функция ПолучитьОписаниеТаблицыПартионногоУчетаСПоследовательностью()
	
	ТаблицаПартий = Новый ТаблицаЗначений;
	
	НаборЗаписейРегистраПартий = РегистрыНакопления.ПартииТоваровДляКУДиР.СоздатьНаборЗаписей();
	
	ТребуемыеКолонкиДерева = НаборЗаписейРегистраПартий.Выгрузить();
	
	Для Каждого Колонка Из ТребуемыеКолонкиДерева.Колонки Цикл
		// для партий нет необходимости в следующих колонках
		Если Найти("ВидДвижения,Регистратор",Колонка.Имя) = 0 Тогда
			ТаблицаПартий.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	ТаблицаПартий.Колонки.Добавить("ДатаДенежногоДокумента", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаПартий.Колонки.Добавить("ДатаСортировки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Возврат ТаблицаПартий;
	
КонецФункции

// Процедура формирует таблицы
//		- Поступления
//		- ВозвратыПоставщикам
//		- Продажи
//		- Возврат покупателям
// на Границу выполнения
//
// Возвращает:
//		Структура - где ключ есть имя таблицы, а значение сама таблица
//
Функция ПолучитьИсходнуюТаблицуДляФормированияДвиженийПоПартиямСПоследовательностью(Организация, ГраницаНачала, ГраницаВыполнения)
	
	СтруктураТаблиц = Новый Структура;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОперацияПоПлатежнымКартам.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчетЭквайринговыеОперации.Ссылка.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА ПоступлениеНаСчетЭквайринговыеОперации.УчитыватьВНУ
	|		ИНАЧЕ ПоступлениеНаСчетЭквайринговыеОперации.Ссылка.УчитыватьВНУ
	|	КОНЕЦ КАК УчитыватьВНУ,
	|	ПоступлениеНаСчетЭквайринговыеОперации.Ссылка КАК ДокументВзаиморасчетовСБанком,
	|	ОперацияПоПлатежнымКартам.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТВозвратОплатыНаКарту
	|ИЗ
	|	Документ.ОперацияПоПлатежнымКартам КАК ОперацияПоПлатежнымКартам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаСчет.ЭквайринговыеОперации КАК ПоступлениеНаСчетЭквайринговыеОперации
	|		ПО (ПоступлениеНаСчетЭквайринговыеОперации.Документ = ОперацияПоПлатежнымКартам.Ссылка)
	|			И (ВЫБОР
	|				КОГДА ПоступлениеНаСчетЭквайринговыеОперации.Ссылка.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|					ТОГДА ПоступлениеНаСчетЭквайринговыеОперации.УчитыватьВНУ
	|				ИНАЧЕ ПоступлениеНаСчетЭквайринговыеОперации.Ссылка.УчитыватьВНУ
	|			КОНЕЦ)
	|			И (ОперацияПоПлатежнымКартам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю))
	|ГДЕ
	|	ОперацияПоПлатежнымКартам.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацияПоПлатежнымКартам.Ссылка,
	|	ВЫБОР
	|		КОГДА РасходСоСчетаЭквайринговыеОперации.Ссылка.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА РасходСоСчетаЭквайринговыеОперации.УчитыватьВНУ
	|		ИНАЧЕ РасходСоСчетаЭквайринговыеОперации.Ссылка.УчитыватьВНУ
	|	КОНЕЦ,
	|	РасходСоСчетаЭквайринговыеОперации.Ссылка,
	|	ОперацияПоПлатежнымКартам.ДокументОснование
	|ИЗ
	|	Документ.ОперацияПоПлатежнымКартам КАК ОперацияПоПлатежнымКартам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходСоСчета.ЭквайринговыеОперации КАК РасходСоСчетаЭквайринговыеОперации
	|		ПО (РасходСоСчетаЭквайринговыеОперации.Документ = ОперацияПоПлатежнымКартам.Ссылка)
	|			И (ВЫБОР
	|				КОГДА РасходСоСчетаЭквайринговыеОперации.Ссылка.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|					ТОГДА РасходСоСчетаЭквайринговыеОперации.УчитыватьВНУ
	|				ИНАЧЕ РасходСоСчетаЭквайринговыеОперации.Ссылка.УчитыватьВНУ
	|			КОНЕЦ)
	|			И (ОперацияПоПлатежнымКартам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю))
	|ГДЕ
	|	ОперацияПоПлатежнымКартам.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходнаяНакладная.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладная.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|			ТОГДА ПриходнаяНакладная.Заказ.ЗаказПокупателя
	|		ИНАЧЕ ПриходнаяНакладная.Заказ
	|	КОНЕЦ КАК Заказ,
	|	ПриходнаяНакладная.Организация КАК Организация,
	|	ПриходнаяНакладная.Дата КАК ДатаДокумента
	|ПОМЕСТИТЬ ВТВозвратОтПокупателя
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходИзКассы КАК РасходИзКассы
	|		ПО (РасходИзКассы.ДокументОснование = ПриходнаяНакладная.Ссылка)
	|			И (РасходИзКассы.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходСоСчета КАК РасходСоСчета
	|		ПО (РасходСоСчета.ДокументОснование = ПриходнаяНакладная.Ссылка)
	|			И (РасходСоСчета.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВозвратОплатыНаКарту КАК ВТВозвратОплатыНаКарту
	|		ПО (ВТВозвратОплатыНаКарту.ДокументОснование = ПриходнаяНакладная.Ссылка)
	|ГДЕ
	|	ПриходнаяНакладная.Организация = &Организация
	|	И ПриходнаяНакладная.Дата МЕЖДУ &ГраницаНачала И &ГраницаВыполнения
	|	И ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|	И (ЕСТЬNULL(ПриходнаяНакладная.ДокументОснование.УчитыватьВНУ, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(РасходИзКассы.УчитыватьВНУ, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(РасходСоСчета.УчитыватьВНУ, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(ВТВозвратОплатыНаКарту.УчитыватьВНУ, ЛОЖЬ))
	|	И ПриходнаяНакладная.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ВозвратПокупателя"" КАК ВидЗаписи,
	|	ВТВозвратОтПокупателя.ДатаДокумента КАК ДатаДокумента,
	|	ЗапасыНаСкладах.Регистратор КАК Регистратор,
	|	ВТВозвратОтПокупателя.Организация КАК Организация,
	|	ЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	СУММА(ЗапасыНаСкладах.Количество) КАК Количество,
	|	ВТВозвратОтПокупателя.Заказ КАК Заказ
	|ПОМЕСТИТЬ ВТЗаписиВозвратОтПокупателя
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах КАК ЗапасыНаСкладах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВозвратОтПокупателя КАК ВТВозвратОтПокупателя
	|		ПО (ВТВозвратОтПокупателя.Ссылка = ЗапасыНаСкладах.Регистратор)
	|			И (ЗапасыНаСкладах.Период МЕЖДУ &ГраницаНачала И &ГраницаВыполнения)
	|			И (ЗапасыНаСкладах.Количество > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВозвратОтПокупателя.Организация,
	|	ВТВозвратОтПокупателя.ДатаДокумента,
	|	ЗапасыНаСкладах.Регистратор,
	|	ЗапасыНаСкладах.Номенклатура,
	|	ВТВозвратОтПокупателя.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Поступление"" КАК ВидЗаписи,
	|	Закупки.ДатаДокумента КАК Дата,
	|	Закупки.ТоварныйДокумент.Дата КАК ДатаСортировки,
	|	ВЫБОР
	|		КОГДА Закупки.ТоварныйДокумент.Дата >= Закупки.ДенежныйДокумент.Дата
	|			ТОГДА Закупки.ТоварныйДокумент
	|		ИНАЧЕ Закупки.ДенежныйДокумент
	|	КОНЕЦ КАК Регистратор,
	|	Закупки.ТоварныйДокумент КАК ДокументПартии,
	|	Закупки.ДенежныйДокумент КАК ДенежныйДокумент,
	|	Закупки.ДенежныйДокумент.Дата КАК ДатаДенежногоДокумента,
	|	Закупки.Организация КАК Организация,
	|	Закупки.Номенклатура КАК Номенклатура,
	|	СУММА(Закупки.Количество) КАК Количество,
	|	СУММА(Закупки.Сумма) КАК Сумма,
	|	СУММА(Закупки.СуммаНДС) КАК СуммаНДС,
	|	&ПустаяДата КАК ДатаПервичногоДокумента,
	|	"""" КАК НомерПервичногоДокумента
	|ИЗ
	|	РегистрНакопления.ЗакупкиДляКУДиР КАК Закупки
	|ГДЕ
	|	Закупки.Период МЕЖДУ &ГраницаНачала И &ГраницаВыполнения
	|	И Закупки.Организация = &Организация
	|	И Закупки.Сумма > 0
	|	И Закупки.ЭтоТоварыКРеализации
	|	И (Закупки.ТоварныйДокумент ССЫЛКА Документ.ПриходнаяНакладная
	|			ИЛИ Закупки.ТоварныйДокумент ССЫЛКА Документ.ВводНачальныхОстатков
	|			ИЛИ Закупки.ТоварныйДокумент ССЫЛКА Документ.АвансовыйОтчет)
	|	И Закупки.УчитыватьВНУ
	|
	|СГРУППИРОВАТЬ ПО
	|	Закупки.Организация,
	|	Закупки.ДатаДокумента,
	|	Закупки.ДенежныйДокумент,
	|	Закупки.ДенежныйДокумент.Дата,
	|	Закупки.ТоварныйДокумент.Дата,
	|	Закупки.Номенклатура,
	|	ВЫБОР
	|		КОГДА Закупки.ТоварныйДокумент.Дата >= Закупки.ДенежныйДокумент.Дата
	|			ТОГДА Закупки.ТоварныйДокумент
	|		ИНАЧЕ Закупки.ДенежныйДокумент
	|	КОНЕЦ,
	|	Закупки.ТоварныйДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТЗаписиВозвратОтПокупателя.ВидЗаписи,
	|	ВТЗаписиВозвратОтПокупателя.ДатаДокумента,
	|	ВТЗаписиВозвратОтПокупателя.ДатаДокумента,
	|	ВТЗаписиВозвратОтПокупателя.Регистратор,
	|	ВТЗаписиВозвратОтПокупателя.Регистратор,
	|	NULL,
	|	NULL,
	|	ВТЗаписиВозвратОтПокупателя.Организация,
	|	ВТЗаписиВозвратОтПокупателя.Номенклатура,
	|	ВТЗаписиВозвратОтПокупателя.Количество,
	|	0,
	|	0,
	|	&ПустаяДата,
	|	""""
	|ИЗ
	|	ВТЗаписиВозвратОтПокупателя КАК ВТЗаписиВозвратОтПокупателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Поступление"",
	|	Закупки.ДатаДокумента,
	|	Закупки.ДатаДокумента,
	|	Закупки.Ссылка,
	|	Закупки.Ссылка,
	|	Закупки.Ссылка,
	|	Закупки.ДатаДокумента,
	|	&Организация,
	|	Закупки.Номенклатура,
	|	СУММА(Закупки.Количество),
	|	СУММА(Закупки.Сумма),
	|	СУММА(Закупки.СуммаНДС),
	|	Закупки.ДатаДокумента,
	|	Закупки.НомерДокумента
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ЗакупкиДляКУДИР КАК Закупки
	|ГДЕ
	|	Закупки.ДатаДокумента МЕЖДУ &ГраницаНачала И &ГраницаВыполнения
	|	И Закупки.Ссылка.Организация = &Организация
	|	И Закупки.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Закупки.ДатаДокумента,
	|	Закупки.НомерДокумента,
	|	Закупки.Ссылка,
	|	Закупки.Номенклатура,
	|	Закупки.ДатаДокумента,
	|	Закупки.Ссылка,
	|	Закупки.Ссылка,
	|	Закупки.ДатаДокумента,
	|	Закупки.ДатаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ОстаткиПартий"",
	|	ПартииТоваровДляКУДиРОстатки.ДокументПартии.Дата,
	|	&ДатаДляОстатков,
	|	ВЫБОР
	|		КОГДА ПартииТоваровДляКУДиРОстатки.ДенежныйДокумент.Дата > ПартииТоваровДляКУДиРОстатки.ДокументПартии.Дата
	|			ТОГДА ПартииТоваровДляКУДиРОстатки.ДенежныйДокумент
	|		ИНАЧЕ ПартииТоваровДляКУДиРОстатки.ДокументПартии
	|	КОНЕЦ,
	|	ПартииТоваровДляКУДиРОстатки.ДокументПартии,
	|	ПартииТоваровДляКУДиРОстатки.ДенежныйДокумент,
	|	ПартииТоваровДляКУДиРОстатки.ДенежныйДокумент.Дата,
	|	ПартииТоваровДляКУДиРОстатки.Организация,
	|	ПартииТоваровДляКУДиРОстатки.Номенклатура,
	|	ПартииТоваровДляКУДиРОстатки.КоличествоОстаток,
	|	ПартииТоваровДляКУДиРОстатки.СуммаОстаток,
	|	ПартииТоваровДляКУДиРОстатки.СуммаНДСОстаток,
	|	&ПустаяДата,
	|	""""
	|ИЗ
	|	РегистрНакопления.ПартииТоваровДляКУДиР.Остатки(
	|			&ГраницаДляОстатков,
	|			Организация = &Организация
	|				И НеОплачена = ЛОЖЬ) КАК ПартииТоваровДляКУДиРОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСортировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ВозвратПоставщику"" КАК ВидЗаписи,
	|	Закупки.ДатаДокумента КАК Дата,
	|	Закупки.ТоварныйДокумент.Дата КАК ДатаСортировки,
	|	Закупки.ТоварныйДокумент КАК Регистратор,
	|	NULL КАК ДокументПартии,
	|	Закупки.ДенежныйДокумент КАК ДенежныйДокумент,
	|	Закупки.ДенежныйДокумент.Дата КАК ДатаДенежногоДокумента,
	|	Закупки.Организация КАК Организация,
	|	Закупки.Номенклатура КАК Номенклатура,
	|	-Закупки.Количество КАК Количество,
	|	-Закупки.Сумма КАК Сумма,
	|	-Закупки.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	РегистрНакопления.ЗакупкиДляКУДиР КАК Закупки
	|ГДЕ
	|	Закупки.Период МЕЖДУ &ГраницаНачала И &ГраницаВыполнения
	|	И Закупки.Организация = &Организация
	|	И Закупки.Сумма < 0
	|	И Закупки.ЭтоТоварыКРеализации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Продажа"",
	|	Продажи.Регистратор.Дата,
	|	Продажи.Регистратор.Дата,
	|	Продажи.Регистратор,
	|	NULL,
	|	NULL,
	|	NULL,
	|	&Организация,
	|	Продажи.Номенклатура,
	|	Продажи.Количество,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Регистратор.Организация = &Организация
	|	И Продажи.Период МЕЖДУ &ГраницаНачала И &ГраницаВыполнения
	|	И НЕ Продажи.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|	И Продажи.Регистратор.УчитыватьВНУ
	|	И Продажи.Количество <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Продажа"",
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	&Организация,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура,
	|	СУММА(ОтчетОРозничныхПродажахЗапасы.Количество),
	|	0,
	|	0
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Запасы КАК ОтчетОРозничныхПродажахЗапасы
	|		ПО ОтчетОРозничныхПродажах.Ссылка = ОтчетОРозничныхПродажахЗапасы.Ссылка
	|			И (ОтчетОРозничныхПродажах.Проведен)
	|			И (НЕ ОтчетОРозничныхПродажах.ПометкаУдаления)
	|			И (ОтчетОРозничныхПродажах.Организация = &Организация)
	|			И (ОтчетОРозничныхПродажах.Дата МЕЖДУ &ГраницаНачала И &ГраницаВыполнения)
	|			И (ОтчетОРозничныхПродажах.УчитыватьВНУ
	|					И ОтчетОРозничныхПродажах.ПоложениеНастроекНалоговогоУчета <> ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|				ИЛИ ОтчетОРозничныхПродажах.ПоложениеНастроекНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|					И ОтчетОРозничныхПродажахЗапасы.УчитыватьВНУ)
	|			И (ОтчетОРозничныхПродажахЗапасы.Количество <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура,
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Продажа"",
	|	СписаниеЗапасов.Дата,
	|	СписаниеЗапасов.Дата,
	|	СписаниеЗапасов.Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	&Организация,
	|	СписаниеЗапасовЗапасы.Номенклатура,
	|	СУММА(СписаниеЗапасовЗапасы.Количество),
	|	0,
	|	0
	|ИЗ
	|	Документ.СписаниеЗапасов КАК СписаниеЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеЗапасов.Запасы КАК СписаниеЗапасовЗапасы
	|		ПО СписаниеЗапасов.Ссылка = СписаниеЗапасовЗапасы.Ссылка
	|			И (СписаниеЗапасов.Проведен)
	|			И (НЕ СписаниеЗапасов.ПометкаУдаления)
	|			И (СписаниеЗапасов.Организация = &Организация)
	|			И (СписаниеЗапасов.Дата МЕЖДУ &ГраницаНачала И &ГраницаВыполнения)
	|			И (СписаниеЗапасовЗапасы.Количество <> 0)
	|ГДЕ
	|	СписаниеЗапасов.УчитыватьВНУ
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеЗапасов.Ссылка,
	|	СписаниеЗапасовЗапасы.Номенклатура,
	|	СписаниеЗапасов.Дата,
	|	СписаниеЗапасов.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСортировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходнаяНакладная.Ссылка КАК ТоварныйДокумент,
	|	ВТЗаписиВозвратОтПокупателя.Заказ КАК Заказ
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиВозвратОтПокупателя КАК ВТЗаписиВозвратОтПокупателя
	|		ПО (ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика))
	|			И (ВТЗаписиВозвратОтПокупателя.Заказ = ПриходнаяНакладная.Заказ
	|				ИЛИ ВТЗаписиВозвратОтПокупателя.Заказ = ПриходнаяНакладная.Заказ.ЗаказПокупателя)
	|			И ПриходнаяНакладная.Ссылка <> ВТЗаписиВозвратОтПокупателя.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчет.Ссылка,
	|	ВТЗаписиВозвратОтПокупателя.Заказ
	|ИЗ
	|	Документ.АвансовыйОтчет.Запасы КАК АвансовыйОтчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиВозвратОтПокупателя КАК ВТЗаписиВозвратОтПокупателя
	|		ПО (ВТЗаписиВозвратОтПокупателя.Заказ = АвансовыйОтчет.ЗаказПокупателя)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводНачальныхОстатков.Ссылка,
	|	ВТЗаписиВозвратОтПокупателя.Заказ
	|ИЗ
	|	Документ.ВводНачальныхОстатков.Запасы КАК ВводНачальныхОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиВозвратОтПокупателя КАК ВТЗаписиВозвратОтПокупателя
	|		ПО (ВТЗаписиВозвратОтПокупателя.Заказ = ВводНачальныхОстатков.ЗаказПокупателя)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ПартииБезОплаты"" КАК ВидЗаписи,
	|	&ГраницаНачала КАК Дата,
	|	ПартииТоваровДляКУДиРБезОплатыОстатки.ДокументПартии.Дата КАК ДатаСортировки,
	|	ПартииТоваровДляКУДиРБезОплатыОстатки.ДокументПартии КАК Регистратор,
	|	ПартииТоваровДляКУДиРБезОплатыОстатки.ДокументПартии КАК ДокументПартии,
	|	НЕОПРЕДЕЛЕНО КАК ДенежныйДокумент,
	|	НЕОПРЕДЕЛЕНО КАК ДатаДенежногоДокумента,
	|	ПартииТоваровДляКУДиРБезОплатыОстатки.Организация КАК Организация,
	|	ПартииТоваровДляКУДиРБезОплатыОстатки.Номенклатура КАК Номенклатура,
	|	ПартииТоваровДляКУДиРБезОплатыОстатки.КоличествоОстаток КАК Количество,
	|	ПартииТоваровДляКУДиРБезОплатыОстатки.СуммаОстаток КАК Сумма,
	|	ПартииТоваровДляКУДиРБезОплатыОстатки.СуммаНДСОстаток КАК СуммаНДС,
	|	ПартииТоваровДляКУДиРБезОплатыОстатки.ДокументПартии.Номер КАК ДокументПартииНомер,
	|	ПартииТоваровДляКУДиРБезОплатыОстатки.ДокументПартии.Дата КАК ДокументПартииДата
	|ИЗ
	|	РегистрНакопления.ПартииТоваровДляКУДиР.Остатки(
	|			&ГраницаДляОстатков,
	|			Организация = &Организация
	|				И НеОплачена = ИСТИНА) КАК ПартииТоваровДляКУДиРБезОплатыОстатки
	|ГДЕ
	|	ПартииТоваровДляКУДиРБезОплатыОстатки.КоличествоОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСортировки");
	
	Запрос.УстановитьПараметр("ГраницаНачала", ГраницаНачала);
	Запрос.УстановитьПараметр("ГраницаВыполнения", ГраницаВыполнения);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ГраницаДляОстатков", Новый Граница(Запрос.Параметры.ГраницаНачала - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаДляОстатков", Запрос.Параметры.ГраницаНачала - 1);
	
	Пакет = Запрос.ВыполнитьПакет();
	ТаблицаПоступлений =  Пакет[3].Выгрузить();
	ТаблицаПоступлений.Индексы.Добавить("Номенклатура,ДокументПартии");
	ТаблицаПоступлений.Индексы.Добавить("Номенклатура");
	
	ТаблицаПродажИВозвратов =  Пакет[4].Выгрузить();
	ТаблицаПродажИВозвратов.Индексы.Добавить("Номенклатура,ДокументПартии");
	ТаблицаПродажИВозвратов.Индексы.Добавить("Номенклатура");
	СтруктураТаблиц.Вставить("ТаблицаПоступлений", ТаблицаПоступлений);
	СтруктураТаблиц.Вставить("ТаблицаПродажИВозвратов", ТаблицаПродажИВозвратов);
	СтруктураТаблиц.Вставить("ТаблицаЗаказов", Пакет[5].Выгрузить());
	СтруктураТаблиц.Вставить("ТаблицаПартийБезОплаты", Пакет[6].Выгрузить());
	
	Возврат СтруктураТаблиц;
	
КонецФункции

// Процедура обработки исходной таблицы поступлений
//
Процедура ОбработатьТаблицуДвиженийСПоследовательностью(
	ИсходнаяТаблицаДвижений,
	ДвиженияДокументовПартий,
	ТаблицаПартионногоУчета,
	ТаблицаЗаказов,
	СоответствиеДокументовРегистраторов,
	ТаблицаПартийБезОплаты)
	
	ПредыдущееПоступление = Неопределено;
	
	ИндексПартии = ДвиженияДокументовПартий.ВГраница();
	ТекущийИндекс = ИндексПартии;
	
	Для Каждого СтрокаДвижения Из ИсходнаяТаблицаДвижений Цикл
		
		Если ПредыдущееПоступление <> СтрокаДвижения.Регистратор Тогда // перешли к обработке следующего регистратора
			
			ПредыдущееПоступление = СтрокаДвижения.Регистратор; // он же документ партии
			
			НайденноеДвижение = СоответствиеДокументовРегистраторов.Получить(ПредыдущееПоступление);
			Если НайденноеДвижение = Неопределено Тогда
				ДвиженияДокументовПартий.Добавить(Новый Массив(3));
				ИндексПартии = ИндексПартии + 1;
				
				ДвиженияДокументовПартий[ИндексПартии][0] = ПредыдущееПоступление;
				ДвиженияДокументовПартий[ИндексПартии][1] = ПолучитьОписаниеТаблицыДвиженийПартионногоУчетаСПоследовательностью();
				ДвиженияДокументовПартий[ИндексПартии][1].Индексы.Добавить("Номенклатура");
				ДвиженияДокументовПартий[ИндексПартии][2] = СтрокаДвижения.ВидЗаписи;
				
				ТекущийИндекс = ИндексПартии;
				СоответствиеДокументовРегистраторов.Вставить(ПредыдущееПоступление, ДвиженияДокументовПартий[ТекущийИндекс]);
			Иначе
				ТекущийИндекс = ДвиженияДокументовПартий.Найти(НайденноеДвижение);
			КонецЕсли;
		КонецЕсли;
		
		
		Если СтрокаДвижения.ВидЗаписи = "Поступление" Тогда
			
			РаспределитьСтрокуДвиженияОплатыЗакупокПоПартиямБезОплаты(
				ТаблицаПартийБезОплаты,
				ДвиженияДокументовПартий[ТекущийИндекс][1],
				СтрокаДвижения,
				ТаблицаПартионногоУчета);
						
		ИначеЕсли СтрокаДвижения.ВидЗаписи = "ОстаткиПартий" Тогда
			
			// Заполняем дерево результата
			СтрокаРезультата = ДвиженияДокументовПартий[ТекущийИндекс][1].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаДвижения);
			//СтрокаРезультата.ТоварныйДокумент = СтрокаДвижения.ДокументПартии;
			СтрокаРезультата.ВидДвижения = ВидДвиженияНакопления.Приход;
			ЗаполнитьСтрокуРезультатаПоСтрокиДвиженияДополнительно(СтрокаРезультата, СтрокаДвижения);
			
			// Заполняем таблицу партий
			СтрокаПартий = ТаблицаПартионногоУчета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПартий, СтрокаДвижения);
			
		ИначеЕсли СтрокаДвижения.ВидЗаписи = "ВозвратПоставщику" Тогда
			
			ЭтоВозвратРавноИстина = Истина;
			ИспользуетсяПоследовательностьРавноИстина = Истина;
			РаспределитьСтрокуДвиженияПоПартиям(
				ТаблицаПартионногоУчета,
				ДвиженияДокументовПартий[ТекущийИндекс][1],
				СтрокаДвижения,
				ЭтоВозвратРавноИстина,
				ИспользуетсяПоследовательностьРавноИстина);
			
		ИначеЕсли СтрокаДвижения.ВидЗаписи = "Продажа" Тогда
			
			ЭтоВозвратРавноЛожь = Ложь;
			ИспользуетсяПоследовательностьРавноИстина = Истина;
			РаспределитьСтрокуДвиженияПоПартиям(
				ТаблицаПартионногоУчета,
				ДвиженияДокументовПартий[ТекущийИндекс][1],
				СтрокаДвижения,
				ЭтоВозвратРавноЛожь,
				ИспользуетсяПоследовательностьРавноИстина);
			
		ИначеЕсли СтрокаДвижения.ВидЗаписи = "ВозвратПокупателя" Тогда
			
			ИспользуетсяПоследовательностьРавноИстина = Истина;
			ОбработатьСтрокуДвиженияВозвратаОтПокупателя(
				ТаблицаПартионногоУчета,
				ДвиженияДокументовПартий,
				ДвиженияДокументовПартий[ТекущийИндекс][1],
				СтрокаДвижения,
				ТаблицаЗаказов,
				ИспользуетсяПоследовательностьРавноИстина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция подготовливает объект таблица значений для движений по партиям
// 
// Возвращает:
//		Таблица значений
//
Функция ПолучитьОписаниеТаблицыДвиженийПартионногоУчетаСПоследовательностью()
	
	НаборЗаписейРегистраПартий = РегистрыНакопления.ПартииТоваровДляКУДиР.СоздатьНаборЗаписей();
	
	Возврат НаборЗаписейРегистраПартий.ВыгрузитьКолонки();
	
КонецФункции

Функция СформироватьИЗаписатьДвиженияДокументовПартионногоУчетаСПоследовательностью(ДвиженияДокументовПартий)
	
	Для Каждого СтрокаРегистратор Из ДвиженияДокументовПартий Цикл
		
		Если СтрокаРегистратор[2] = "ОстаткиПартий"
			Или СтрокаРегистратор[2] = "ПартииБезОплаты" Тогда
			Продолжить;
		КонецЕсли;
		
		ДвиженияПартийРегистратора = СтрокаРегистратор[0].ПолучитьОбъект().Движения.ПартииТоваровДляКУДиР;
		
		ДвиженияПартийРегистратора.Загрузить(СтрокаРегистратор[1]);
		ДвиженияПартийРегистратора.Записать();
		
	КонецЦикла;
	
КонецФункции

Процедура СдвинутьГраницуПоследовательностиПартийДляКУДиР(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.Дата)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетность")
		Или Не ПоследовательностьПартийДляКУДиРПовтИсп.ИспользоватьПоследовательностьПартийКУДиР() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ПоследовательностьПартийДляКУДиР.СоздатьМенеджерЗаписи();
	Запись.Организация = Источник.Организация;
	Запись.Документ = Источник.Ссылка;
	Запись.НачалоМесяца = НачалоМесяца(Источник.Дата);
	Запись.ДатаДокумента = Источник.Дата;
	Запись.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

Функция ТекстЗапросаПоРасходамНаУслуги()

	ЗапросТекст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасходИзКассы.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент
	|		ИНАЧЕ РасходИзКассы.Ссылка
	|	КОНЕЦ КАК ПервичныйДокумент,
	|	РасходИзКассы.НалогообложениеНДС КАК НалогообложениеНДС,
	|	РасходИзКассы.Контрагент КАК Контрагент,
	|	РасходИзКассы.Контрагент.НаименованиеПолное КАК ЮридическоеНазваниеКонтрагента,
	|	ВТЗакупкиПоставщиковДляКУДиР.Сумма КАК РасходБаза,
	|	ВТЗакупкиПоставщиковДляКУДиР.Сумма КАК РасходВсего,
	|	ВТЗакупкиПоставщиковДляКУДиР.СуммаНДС КАК СуммаНДС,
	|	РасходИзКассы.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА РасходИзКассы.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|		ИНАЧЕ РасходИзКассы.Дата
	|	КОНЕЦ КАК ДатаПервичногоДокумента,
	|	ВЫБОР
	|		КОГДА РасходИзКассы.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Номер
	|		ИНАЧЕ РасходИзКассы.Номер
	|	КОНЕЦ КАК НомерПервичногоДокумента,
	|	ВЫБОР
	|		КОГДА РасходИзКассы.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|		ИНАЧЕ РасходИзКассы.Дата
	|	КОНЕЦ КАК Период,
	|	"""" КАК НомерВходящегоДокумента,
	|	"""" КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(РасходИзКассы.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	РасходИзКассы.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТРасходИзКассы
	|ИЗ
	|	ВТЗакупкиПоставщиковДляКУДиР КАК ВТЗакупкиПоставщиковДляКУДиР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходИзКассы КАК РасходИзКассы
	|		ПО ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент = РасходИзКассы.Ссылка
	|			И (НЕ ВТЗакупкиПоставщиковДляКУДиР.ЭтоТоварыКРеализации)
	|			И (ВТЗакупкиПоставщиковДляКУДиР.Организация = &Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасходСоСчета.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент
	|		ИНАЧЕ РасходСоСчета.Ссылка
	|	КОНЕЦ КАК ПервичныйДокумент,
	|	РасходСоСчета.НалогообложениеНДС КАК НалогообложениеНДС,
	|	РасходСоСчета.Контрагент КАК Контрагент,
	|	РасходСоСчета.Контрагент.НаименованиеПолное КАК ЮридическоеНазваниеКонтрагента,
	|	ВТЗакупкиПоставщиковДляКУДиР.Сумма КАК РасходБаза,
	|	ВТЗакупкиПоставщиковДляКУДиР.Сумма КАК РасходВсего,
	|	ВТЗакупкиПоставщиковДляКУДиР.СуммаНДС КАК СуммаНДС,
	|	РасходСоСчета.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВЫБОР
	|					КОГДА РасходСоСчета.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|						ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|					ИНАЧЕ РасходСоСчета.Дата
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасходСоСчета.ДатаВходящегоДокумента < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|					ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|				ИНАЧЕ РасходСоСчета.ДатаВходящегоДокумента
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаПервичногоДокумента,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Номер
	|		ИНАЧЕ РасходСоСчета.Номер
	|	КОНЕЦ КАК НомерПервичногоДокумента,
	|	ВЫБОР
	|		КОГДА РасходСоСчета.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|		ИНАЧЕ РасходСоСчета.Дата
	|	КОНЕЦ КАК Период,
	|	РасходСоСчета.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	РасходСоСчета.НазначениеПлатежа КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(РасходСоСчета.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	РасходСоСчета.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТРасходСоСчета
	|ИЗ
	|	ВТЗакупкиПоставщиковДляКУДиР КАК ВТЗакупкиПоставщиковДляКУДиР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходСоСчета КАК РасходСоСчета
	|		ПО ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент = РасходСоСчета.Ссылка
	|			И (НЕ ВТЗакупкиПоставщиковДляКУДиР.ЭтоТоварыКРеализации)
	|			И (ВТЗакупкиПоставщиковДляКУДиР.Организация = &Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеНаСчет.Ссылка КАК ПервичныйДокумент,
	|	ПоступлениеНаСчет.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ПоступлениеНаСчет.Контрагент КАК Контрагент,
	|	ПоступлениеНаСчет.Контрагент.НаименованиеПолное КАК ЮридическоеНазваниеКонтрагента,
	|	-ВТЗакупкиПоставщиковДляКУДиР.Сумма КАК РасходБаза,
	|	-ВТЗакупкиПоставщиковДляКУДиР.Сумма КАК РасходВсего,
	|	-ВТЗакупкиПоставщиковДляКУДиР.СуммаНДС КАК СуммаНДС,
	|	ПоступлениеНаСчет.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчет.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПоступлениеНаСчет.Дата
	|		ИНАЧЕ ПоступлениеНаСчет.ДатаВходящегоДокумента
	|	КОНЕЦ КАК ДатаПервичногоДокумента,
	|	ПоступлениеНаСчет.Номер КАК НомерПервичногоДокумента,
	|	ПоступлениеНаСчет.Дата КАК Период,
	|	ПоступлениеНаСчет.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ПоступлениеНаСчет.НазначениеПлатежа КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ПоступлениеНаСчет.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	ПоступлениеНаСчет.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТПоступлениеНаСчет
	|ИЗ
	|	ВТЗакупкиПоставщиковДляКУДиР КАК ВТЗакупкиПоставщиковДляКУДиР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|		ПО ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент = ПоступлениеНаСчет.Ссылка
	|			И (НЕ ВТЗакупкиПоставщиковДляКУДиР.ЭтоТоварыКРеализации)
	|			И (ВТЗакупкиПоставщиковДляКУДиР.Организация = &Организация)
	|ГДЕ
	|	ПоступлениеНаСчет.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчет.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент
	|		ИНАЧЕ ПоступлениеНаСчет.Ссылка
	|	КОНЕЦ,
	|	ПоступлениеНаСчет.НалогообложениеНДС,
	|	ПоступлениеНаСчет.Контрагент,
	|	ПоступлениеНаСчет.Контрагент.НаименованиеПолное,
	|	ВТЗакупкиПоставщиковДляКУДиР.Сумма,
	|	ВТЗакупкиПоставщиковДляКУДиР.Сумма,
	|	ВТЗакупкиПоставщиковДляКУДиР.СуммаНДС,
	|	ПоступлениеНаСчет.ВидОперации,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчет.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВЫБОР
	|					КОГДА ПоступлениеНаСчет.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|						ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|					ИНАЧЕ ПоступлениеНаСчет.Дата
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПоступлениеНаСчет.ДатаВходящегоДокумента < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|					ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|				ИНАЧЕ ПоступлениеНаСчет.ДатаВходящегоДокумента
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчет.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Номер
	|		ИНАЧЕ ПоступлениеНаСчет.Номер
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПоступлениеНаСчет.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|		ИНАЧЕ ПоступлениеНаСчет.Дата
	|	КОНЕЦ,
	|	ПоступлениеНаСчет.НомерВходящегоДокумента,
	|	ПоступлениеНаСчет.НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ПоступлениеНаСчет.Дата, ДЕНЬ),
	|	ПоступлениеНаСчет.ВалютаДенежныхСредств
	|ИЗ
	|	ВТЗакупкиПоставщиковДляКУДиР КАК ВТЗакупкиПоставщиковДляКУДиР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|		ПО ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент = ПоступлениеНаСчет.Ссылка
	|			И (НЕ ВТЗакупкиПоставщиковДляКУДиР.ЭтоТоварыКРеализации)
	|			И (ВТЗакупкиПоставщиковДляКУДиР.Организация = &Организация)
	|ГДЕ
	|	ПоступлениеНаСчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеВКассу.Ссылка КАК ПервичныйДокумент,
	|	ПоступлениеВКассу.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ПоступлениеВКассу.Контрагент КАК Контрагент,
	|	ПоступлениеВКассу.Контрагент.НаименованиеПолное КАК ЮридическоеНазваниеКонтрагента,
	|	-ВТЗакупкиПоставщиковДляКУДиР.Сумма КАК РасходБаза,
	|	-ВТЗакупкиПоставщиковДляКУДиР.Сумма КАК РасходВсего,
	|	-ВТЗакупкиПоставщиковДляКУДиР.СуммаНДС КАК СуммаНДС,
	|	ПоступлениеВКассу.ВидОперации КАК ВидОперации,
	|	ПоступлениеВКассу.Дата КАК ДатаПервичногоДокумента,
	|	ПоступлениеВКассу.Номер КАК НомерПервичногоДокумента,
	|	ПоступлениеВКассу.Дата КАК Период,
	|	"""" КАК НомерВходящегоДокумента,
	|	"""" КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ПоступлениеВКассу.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	ПоступлениеВКассу.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТПоступлениеВКассу
	|ИЗ
	|	ВТЗакупкиПоставщиковДляКУДиР КАК ВТЗакупкиПоставщиковДляКУДиР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	|		ПО ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент = ПоступлениеВКассу.Ссылка
	|			И (НЕ ВТЗакупкиПоставщиковДляКУДиР.ЭтоТоварыКРеализации)
	|			И (ВТЗакупкиПоставщиковДляКУДиР.Организация = &Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент
	|		ИНАЧЕ АвансовыйОтчет.Ссылка
	|	КОНЕЦ КАК ПервичныйДокумент,
	|	АвансовыйОтчет.НалогообложениеНДС КАК НалогообложениеНДС,
	|	"""" КАК Контрагент,
	|	"""" КАК ЮридическоеНазваниеКонтрагента,
	|	ВТЗакупкиПоставщиковДляКУДиР.Сумма КАК РасходБаза,
	|	ВТЗакупкиПоставщиковДляКУДиР.Сумма КАК РасходВсего,
	|	ВТЗакупкиПоставщиковДляКУДиР.СуммаНДС КАК СуммаНДС,
	|	"""" КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|		ИНАЧЕ АвансовыйОтчет.Дата
	|	КОНЕЦ КАК ДатаПервичногоДокумента,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Номер
	|		ИНАЧЕ АвансовыйОтчет.Номер
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|		ИНАЧЕ АвансовыйОтчет.Дата
	|	КОНЕЦ КАК Дата,
	|	"""" КАК НомерВходящегоДокумента,
	|	"""" КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(АвансовыйОтчет.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	АвансовыйОтчет.ВалютаДокумента КАК ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВТАвансовыйОтчет
	|ИЗ
	|	ВТЗакупкиПоставщиковДляКУДиР КАК ВТЗакупкиПоставщиковДляКУДиР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|		ПО ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент = АвансовыйОтчет.Ссылка
	|			И (НЕ ВТЗакупкиПоставщиковДляКУДиР.ЭтоТоварыКРеализации)
	|			И (ВТЗакупкиПоставщиковДляКУДиР.Организация = &Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаимозачетКредитор.Документ.Дата КАК ДокументДата
	|ПОМЕСТИТЬ ВТВзаимозачетДаты
	|ИЗ
	|	ВТЗакупкиПоставщиковДляКУДиР КАК ВТЗакупкиПоставщиковДляКУДиР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Взаимозачет.Кредитор КАК ВзаимозачетКредитор
	|		ПО ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент = ВзаимозачетКредитор.Ссылка
	|			И (НЕ ВТЗакупкиПоставщиковДляКУДиР.ЭтоТоварыКРеализации)
	|			И (ВТЗакупкиПоставщиковДляКУДиР.Организация = &Организация)
	|			И (ВзаимозачетКредитор.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачет.Взаимозачет))
	|			И (НЕ ВзаимозачетКредитор.ПризнакАванса)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаимозачетКредитор.Документ.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент
	|		ИНАЧЕ ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент
	|	КОНЕЦ КАК ПервичныйДокумент,
	|	НЕОПРЕДЕЛЕНО КАК НалогообложениеНДС,
	|	ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент.Контрагент КАК Контрагент,
	|	ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент.КонтрагентИсточник КАК КонтрагентИсточник,
	|	ВТЗакупкиПоставщиковДляКУДиР.Сумма КАК РасходБаза,
	|	ВТЗакупкиПоставщиковДляКУДиР.Сумма КАК РасходВсего,
	|	ВТЗакупкиПоставщиковДляКУДиР.СуммаНДС КАК СуммаНДС,
	|	ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|		ИНАЧЕ ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент.Дата
	|	КОНЕЦ КАК ДатаПервичногоДокумента,
	|	ВЫБОР
	|		КОГДА ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент.Дата < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Номер
	|		ИНАЧЕ ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент.Номер
	|	КОНЕЦ КАК НомерПервичногоДокумента,
	|	ВЫБОР
	|		КОГДА ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент < ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|			ТОГДА ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|		ИНАЧЕ ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент.Дата
	|	КОНЕЦ КАК Период,
	|	"""" КАК НомерВходящегоДокумента,
	|	"""" КАК НазначениеПлатежа,
	|	НАЧАЛОПЕРИОДА(ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент.Договор.ВалютаРасчетов КАК ВалютаДенежныхСредств,
	|	ПОДСТРОКА(ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент.Контрагент.НаименованиеПолное, 0, 1000) КАК ЮридическоеНазваниеКонтрагента,
	|	ПОДСТРОКА(ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент.КонтрагентИсточник.НаименованиеПолное, 0, 1000) КАК ЮридическоеНазваниеКонтрагентаИсточника,
	|	ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата КАК ТоварныйДокументДата,
	|	ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент.Дата КАК ДенежныйДокументДата
	|ПОМЕСТИТЬ ВТВзаимозачет
	|ИЗ
	|	ВТВзаимозачетДаты КАК ВзаимозачетКредитор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗакупкиПоставщиковДляКУДиР КАК ВТЗакупкиПоставщиковДляКУДиР
	|		ПО ВзаимозачетКредитор.ДокументДата = ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасходИзКассы.ПервичныйДокумент КАК ПервичныйДокумент,
	|	ВТРасходИзКассы.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ВТРасходИзКассы.Контрагент КАК Контрагент,
	|	ВТРасходИзКассы.ЮридическоеНазваниеКонтрагента КАК ЮридическоеНазваниеКонтрагента,
	|	ВТРасходИзКассы.РасходБаза КАК РасходБаза,
	|	ВТРасходИзКассы.РасходВсего КАК РасходВсего,
	|	ВТРасходИзКассы.СуммаНДС КАК СуммаНДС,
	|	ВТРасходИзКассы.ВидОперации КАК ВидОперации,
	|	ВТРасходИзКассы.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	|	ВТРасходИзКассы.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	ВТРасходИзКассы.Период КАК Период,
	|	ВТРасходИзКассы.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВТРасходИзКассы.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ВТРасходИзКассы.ДатаНачалоДня КАК ДатаНачалоДня,
	|	ВТРасходИзКассы.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	NULL КАК КонтрагентИсточник,
	|	NULL КАК ЮридическоеНазваниеКонтрагентаИсточника
	|ИЗ
	|	ВТРасходИзКассы КАК ВТРасходИзКассы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТРасходСоСчета.ПервичныйДокумент,
	|	ВТРасходСоСчета.НалогообложениеНДС,
	|	ВТРасходСоСчета.Контрагент,
	|	ВТРасходСоСчета.ЮридическоеНазваниеКонтрагента,
	|	ВТРасходСоСчета.РасходБаза,
	|	ВТРасходСоСчета.РасходВсего,
	|	ВТРасходСоСчета.СуммаНДС,
	|	ВТРасходСоСчета.ВидОперации,
	|	ВТРасходСоСчета.ДатаПервичногоДокумента,
	|	ВТРасходСоСчета.НомерПервичногоДокумента,
	|	ВТРасходСоСчета.Период,
	|	ВТРасходСоСчета.НомерВходящегоДокумента,
	|	ВТРасходСоСчета.НазначениеПлатежа,
	|	ВТРасходСоСчета.ДатаНачалоДня,
	|	ВТРасходСоСчета.ВалютаДенежныхСредств,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТРасходСоСчета КАК ВТРасходСоСчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТПоступлениеНаСчет.ПервичныйДокумент,
	|	ВТПоступлениеНаСчет.НалогообложениеНДС,
	|	ВТПоступлениеНаСчет.Контрагент,
	|	ВТПоступлениеНаСчет.ЮридическоеНазваниеКонтрагента,
	|	ВТПоступлениеНаСчет.РасходБаза,
	|	ВТПоступлениеНаСчет.РасходВсего,
	|	ВТПоступлениеНаСчет.СуммаНДС,
	|	ВТПоступлениеНаСчет.ВидОперации,
	|	ВТПоступлениеНаСчет.ДатаПервичногоДокумента,
	|	ВТПоступлениеНаСчет.НомерПервичногоДокумента,
	|	ВТПоступлениеНаСчет.Период,
	|	ВТПоступлениеНаСчет.НомерВходящегоДокумента,
	|	ВТПоступлениеНаСчет.НазначениеПлатежа,
	|	ВТПоступлениеНаСчет.ДатаНачалоДня,
	|	ВТПоступлениеНаСчет.ВалютаДенежныхСредств,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТПоступлениеНаСчет КАК ВТПоступлениеНаСчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТПоступлениеВКассу.ПервичныйДокумент,
	|	ВТПоступлениеВКассу.НалогообложениеНДС,
	|	ВТПоступлениеВКассу.Контрагент,
	|	ВТПоступлениеВКассу.ЮридическоеНазваниеКонтрагента,
	|	ВТПоступлениеВКассу.РасходБаза,
	|	ВТПоступлениеВКассу.РасходВсего,
	|	ВТПоступлениеВКассу.СуммаНДС,
	|	ВТПоступлениеВКассу.ВидОперации,
	|	ВТПоступлениеВКассу.ДатаПервичногоДокумента,
	|	ВТПоступлениеВКассу.НомерПервичногоДокумента,
	|	ВТПоступлениеВКассу.Период,
	|	ВТПоступлениеВКассу.НомерВходящегоДокумента,
	|	ВТПоступлениеВКассу.НазначениеПлатежа,
	|	ВТПоступлениеВКассу.ДатаНачалоДня,
	|	ВТПоступлениеВКассу.ВалютаДенежныхСредств,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТПоступлениеВКассу КАК ВТПоступлениеВКассу
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТАвансовыйОтчет.ПервичныйДокумент,
	|	ВТАвансовыйОтчет.НалогообложениеНДС,
	|	ВТАвансовыйОтчет.Контрагент,
	|	ВТАвансовыйОтчет.ЮридическоеНазваниеКонтрагента,
	|	ВТАвансовыйОтчет.РасходБаза,
	|	ВТАвансовыйОтчет.РасходВсего,
	|	ВТАвансовыйОтчет.СуммаНДС,
	|	ВТАвансовыйОтчет.ВидОперации,
	|	ВТАвансовыйОтчет.ДатаПервичногоДокумента,
	|	ВТАвансовыйОтчет.Период,
	|	ВТАвансовыйОтчет.Дата,
	|	ВТАвансовыйОтчет.НомерВходящегоДокумента,
	|	ВТАвансовыйОтчет.НазначениеПлатежа,
	|	ВТАвансовыйОтчет.ДатаНачалоДня,
	|	ВТАвансовыйОтчет.ВалютаДенежныхСредств,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТАвансовыйОтчет КАК ВТАвансовыйОтчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТВзаимозачет.ПервичныйДокумент,
	|	ВТВзаимозачет.НалогообложениеНДС,
	|	ВТВзаимозачет.Контрагент,
	|	ВТВзаимозачет.ЮридическоеНазваниеКонтрагента,
	|	ВТВзаимозачет.РасходБаза,
	|	ВТВзаимозачет.РасходВсего,
	|	ВТВзаимозачет.СуммаНДС,
	|	ВТВзаимозачет.ВидОперации,
	|	ВТВзаимозачет.ДатаПервичногоДокумента,
	|	ВТВзаимозачет.НомерПервичногоДокумента,
	|	ВТВзаимозачет.Период,
	|	ВТВзаимозачет.НомерВходящегоДокумента,
	|	ВТВзаимозачет.НазначениеПлатежа,
	|	ВТВзаимозачет.ДатаНачалоДня,
	|	ВТВзаимозачет.ВалютаДенежныхСредств,
	|	ВТВзаимозачет.КонтрагентИсточник,
	|	ВТВзаимозачет.ЮридическоеНазваниеКонтрагентаИсточника
	|ИЗ
	|	ВТВзаимозачет КАК ВТВзаимозачет";
	
	Возврат ЗапросТекст;
	
КонецФункции

#Область РаботаСФормами

// Функция проверки операции на необходимость вести учет в НУ.
//
// Параметры:
//  пОперация - ПеречислениеСсылка - одно из перечислений с видами операций денежных документов.
//
// Возвращаемое значение:
//   Булево   - Если ИСТИНА, то по операции ведется учет в НУ.
//
Функция ПоОперацииНеВедетсяУчетВНУ(пОперация) Экспорт
	
	МассивОперацийИсключений = Новый Массив;
	
	МассивОперацийИсключений.Добавить(Перечисления.ВидыОперацийПоступлениеВКассу.ЛичныеСредстваПредпринимателя);
	МассивОперацийИсключений.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ЛичныеСредстваПредпринимателя);
	МассивОперацийИсключений.Добавить(Перечисления.ВидыОперацийРасходИзКассы.ЛичныеСредстваПредпринимателя);
	МассивОперацийИсключений.Добавить(Перечисления.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя);
	
	ЭтоОперацияИсключение = (МассивОперацийИсключений.Найти(пОперация) <> Неопределено);
	
	Возврат ЭтоОперацияИсключение;
	
КонецФункции

// Определяет значение реквизита УчитыватьВНУ по статье и операции документа.
//
Функция НужноУчитыватьВНУ(пСтатья, пОперация, пОрганизация, пДата) Экспорт
	
	УчитыватьВНУ = Ложь;
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(пОрганизация, пДата);
	
	// Если используется стандартная статья Прочее, то нужно установить УчитыватьВНУ
	Если пСтатья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		И ПоОперацииВедетсяУчетВНУДляСтатьиПрочее(пОперация) Тогда
		
		УчитыватьВНУ = СистемаНалогообложенияСтруктура.ПлательщикУСН;
		
	ИначеЕсли ЗначениеЗаполнено(пСтатья) И Не ПоОперацииНеВедетсяУчетВНУ(пОперация) Тогда
		
		УчитыватьВНУ = пСтатья.УчитыватьВНУ И СистемаНалогообложенияСтруктура.ПлательщикУСН;
		
	КонецЕсли;

	Возврат УчитыватьВНУ;
	
КонецФункции

// Функция проверки операции на необходимость вести учет в НУ.
//
// Параметры:
//  пОперация - ПеречислениеСсылка - одно из перечислений с видами операций денежных документов.
//
// Возвращаемое значение:
//   Булево   - Если ИСТИНА, то по операции ведется учет в НУ.
//
Функция ПоОперацииВедетсяУчетВНУДляСтатьиПрочее(пОперация) Экспорт
	
	МассивОпераций = Новый Массив;
	
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКредитам);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги);
		
	МассивОпераций.Добавить(Перечисления.ВидыОперацийРасходИзКассы.Зарплата);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийРасходИзКассы.Налоги);
		
	МассивОпераций.Добавить(Перечисления.ВидыОперацийРасходСоСчета.Зарплата);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийРасходСоСчета.Налоги);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит);
	
	ПоОперацииВедетсяУчетВНУ = (МассивОпераций.Найти(пОперация) <> Неопределено);
	
	Возврат ПоОперацииВедетсяУчетВНУ;
	
КонецФункции

#КонецОбласти

#Область ТаможенныеПлатеж

Функция СформироватьЗаписиДляТаможенныхПлатежейУСН()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.ИспользуетсяОтчетность";
	
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать();
	
	ВыборкаОрганизаций.Сбросить();
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		УдалитьДокументыЗаписиУСНПоРасходамНаТаможенныеПлатежи(ВыборкаОрганизаций.Ссылка);
		ОплаченныеРасходыПриИмпорте = ВыполнитьРаспределениеТаможенныхПлатежейДляУСН(ВыборкаОрганизаций.Ссылка);
		Если ОплаченныеРасходыПриИмпорте.Количество() > 0 Тогда
			ВыполнитьСписаниеТаможенныхПлатежейДляУСН(ОплаченныеРасходыПриИмпорте, ВыборкаОрганизаций.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция УдалитьДокументыЗаписиУСНПоРасходамНаТаможенныеПлатежи(пОрганизация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиУСН.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаписиУСН КАК ЗаписиУСН
		|ГДЕ
		|	ЗаписиУСН.ВидЗаписей = &РасходыНаТаможенныеПлатежи
		|	И ЗаписиУСН.Организация = &Организация";
	
	Запрос.УстановитьПараметр("РасходыНаТаможенныеПлатежи", Перечисления.ВидыЗаписейФормированийКУДиР.РасходыНаТаможенныеПлатежи);
	Запрос.УстановитьПараметр("Организация", пОрганизация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Удалить();
	КонецЦикла;
	
КонецФункции

Функция ВыполнитьРаспределениеТаможенныхПлатежейДляУСН(пОрганизация)
	
	// Получим данные
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходыПриИмпортеЗапасы.Ссылка КАК Ссылка,
		|	РасходыПриИмпортеЗапасы.Номенклатура КАК Номенклатура,
		|	РасходыПриИмпортеЗапасы.Количество КАК Количество,
		|	0 КАК КоличествоОплаченное,
		|	0 КАК СуммаПошлиныОплаченная,
		|	0 КАК СуммаНДСОплаченная,
		|	0 КАК СуммаСбораОплаченная,
		|	0 КАК СуммаВсегоОплаченная,
		|	РасходыПриИмпортеЗапасы.ФактурнаяСтоимость КАК ФактурнаяСтоимость,
		|	РасходыПриИмпортеЗапасы.СуммаПошлины КАК СуммаПошлины,
		|	РасходыПриИмпортеЗапасы.СуммаНДС КАК СуммаНДС,
		|	РасходыПриИмпортеЗапасы.СуммаСбора КАК СуммаСбора,
		|	РасходыПриИмпортеЗапасы.СуммаПошлины + РасходыПриИмпортеЗапасы.СуммаНДС + РасходыПриИмпортеЗапасы.СуммаСбора КАК СуммаВсего,
		|	РасходыПриИмпортеЗапасы.ДокументПартии КАК ДокументПартии,
		|	РасходыПриИмпортеЗапасы.Ссылка.Контрагент КАК Контрагент,
		|	РасходыПриИмпортеЗапасы.Ссылка.Договор КАК Договор,
		|	ИСТИНА КАК МожноОбрабатывать,
		|	НАЧАЛОПЕРИОДА(РасходыПриИмпортеЗапасы.Ссылка.Дата, МЕСЯЦ) КАК НачалоМесяца,
		|	ЛОЖЬ КАК УчитыватьВНУ
		|ИЗ
		|	Документ.РасходыПриИмпорте.Запасы КАК РасходыПриИмпортеЗапасы
		|ГДЕ
		|	РасходыПриИмпортеЗапасы.Ссылка.Организация = &Организация
		|	И РасходыПриИмпортеЗапасы.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходСоСчетаРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|	РасходСоСчетаРасшифровкаПлатежа.СуммаРасчетов КАК СуммаРасчетов,
		|	РасходСоСчетаРасшифровкаПлатежа.Курс КАК Курс,
		|	РасходСоСчетаРасшифровкаПлатежа.Кратность КАК Кратность,
		|	РасходСоСчетаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|	РасходСоСчетаРасшифровкаПлатежа.Ссылка.Контрагент КАК Контрагент,
		|	РасходСоСчетаРасшифровкаПлатежа.Ссылка.Дата КАК Дата,
		|	РасходСоСчетаРасшифровкаПлатежа.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	РасходСоСчетаРасшифровкаПлатежа.Ссылка.Номер КАК Номер,
		|	РасходСоСчетаРасшифровкаПлатежа.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	РасходСоСчетаРасшифровкаПлатежа.Договор КАК Договор,
		|	НАЧАЛОПЕРИОДА(РасходСоСчетаРасшифровкаПлатежа.Ссылка.Дата, МЕСЯЦ) КАК НачалоМесяца
		|ИЗ
		|	Документ.РасходСоСчета.РасшифровкаПлатежа КАК РасходСоСчетаРасшифровкаПлатежа
		|ГДЕ
		|	РасходСоСчетаРасшифровкаПлатежа.Ссылка.Проведен
		|	И РасходСоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = &ВидОперацииПрочиеРасчеты
		|	И РасходСоСчетаРасшифровкаПлатежа.Ссылка.Организация = &Организация
		|	И НЕ РасходСоСчетаРасшифровкаПлатежа.Ссылка.УчитыватьВНУ";
	
	Запрос.УстановитьПараметр("ВидОперацииПрочиеРасчеты", Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты);
	Запрос.УстановитьПараметр("Организация", пОрганизация);
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	РасходыНаИмпорт = МассивРезультатовЗапроса[0].Выгрузить();
	ОплатаРасходовНаИмпорт = МассивРезультатовЗапроса[1].Выгрузить();
	
	// Определим применение УСН в организации
	СоответсвиеПериодаИСНО = Новый Соответствие;
	
	НачалоМесяца = '00010101';
	ПлательщикУСН = Ложь;
	Для Каждого ТекущийРасходНаИмпорт Из РасходыНаИмпорт Цикл
		
		Если НачалоМесяца <> НачалоМесяца(ТекущийРасходНаИмпорт.НачалоМесяца) Тогда
			НачалоМесяца = НачалоМесяца(ТекущийРасходНаИмпорт.НачалоМесяца);
			СистемаНалогообложенияОрганизации = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(пОрганизация, НачалоМесяца);
			ПлательщикУСН = СистемаНалогообложенияОрганизации.ПлательщикУСН;
			
			СоответсвиеПериодаИСНО.Вставить(НачалоМесяца, ПлательщикУСН);
		КонецЕсли;
		
		ТекущийРасходНаИмпорт.УчитыватьВНУ = ПлательщикУСН;
		
	КонецЦикла;
	
	// Распределим оплату на расходы по импорту
	НачалоМесяца = '00010101';
	ПлательщикУСН = Ложь;
	
	Для Каждого ТекущаяОплатаРасходовНаИмпорт Из ОплатаРасходовНаИмпорт Цикл
		
		Если НачалоМесяца <> НачалоМесяца(ТекущаяОплатаРасходовНаИмпорт.НачалоМесяца) Тогда
			НачалоМесяца = НачалоМесяца(ТекущаяОплатаРасходовНаИмпорт.НачалоМесяца);
			
			ЗначениеСоответствия = СоответсвиеПериодаИСНО.Получить(ТекущаяОплатаРасходовНаИмпорт.НачалоМесяца);
			Если ЗначениеСоответствия = Неопределено Тогда
				СистемаНалогообложенияОрганизации = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(пОрганизация, НачалоМесяца);
				ПлательщикУСН = СистемаНалогообложенияОрганизации.ПлательщикУСН;
			Иначе
				ПлательщикУСН = ЗначениеСоответствия;
			КонецЕсли;
			
		КонецЕсли;
		Если Не ПлательщикУСН Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Контрагент", ТекущаяОплатаРасходовНаИмпорт.Контрагент);
		СтруктураПоиска.Вставить("Договор", ТекущаяОплатаРасходовНаИмпорт.Договор);
		СтруктураПоиска.Вставить("МожноОбрабатывать", Истина);
		СтруктураПоиска.Вставить("УчитыватьВНУ", Истина);
		
		НайденныеСтрокиРасходовНаИмпорт = РасходыНаИмпорт.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекущийРасходНаИмпорт Из НайденныеСтрокиРасходовНаИмпорт Цикл
			Если ТекущийРасходНаИмпорт.СуммаВсего = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяОплатаРасходовНаИмпорт.СуммаПлатежа >= ТекущийРасходНаИмпорт.СуммаВсего Тогда
				
				ТекущийРасходНаИмпорт.МожноОбрабатывать = Ложь;
				
				ТекущийРасходНаИмпорт.КоличествоОплаченное = ТекущийРасходНаИмпорт.Количество;
				ТекущийРасходНаИмпорт.СуммаПошлиныОплаченная = ТекущийРасходНаИмпорт.СуммаПошлины;
				ТекущийРасходНаИмпорт.СуммаНДСОплаченная = ТекущийРасходНаИмпорт.СуммаНДС;
				ТекущийРасходНаИмпорт.СуммаСбораОплаченная = ТекущийРасходНаИмпорт.СуммаСбора;
				
				ТекущийРасходНаИмпорт.Количество = 0;
				ТекущийРасходНаИмпорт.СуммаПошлины = 0;
				ТекущийРасходНаИмпорт.СуммаНДС = 0;
				ТекущийРасходНаИмпорт.СуммаСбора = 0;
				ТекущийРасходНаИмпорт.СуммаВсего = 0;
				
			Иначе
				
				ТекущийРасходНаИмпорт.КоличествоОплаченное = ТекущийРасходНаИмпорт.Количество *ТекущаяОплатаРасходовНаИмпорт.СуммаПлатежа / ТекущийРасходНаИмпорт.СуммаВсего;
				ТекущийРасходНаИмпорт.СуммаПошлиныОплаченная = ТекущийРасходНаИмпорт.СуммаПошлины *ТекущаяОплатаРасходовНаИмпорт.СуммаПлатежа / ТекущийРасходНаИмпорт.СуммаВсего;
				ТекущийРасходНаИмпорт.СуммаНДСОплаченная = ТекущийРасходНаИмпорт.СуммаНДС *ТекущаяОплатаРасходовНаИмпорт.СуммаПлатежа / ТекущийРасходНаИмпорт.СуммаВсего;
				ТекущийРасходНаИмпорт.СуммаСбораОплаченная = ТекущийРасходНаИмпорт.СуммаСбора *ТекущаяОплатаРасходовНаИмпорт.СуммаПлатежа / ТекущийРасходНаИмпорт.СуммаВсего;
				ТекущийРасходНаИмпорт.СуммаВсего = ТекущийРасходНаИмпорт.СуммаВсего *ТекущаяОплатаРасходовНаИмпорт.СуммаПлатежа / ТекущийРасходНаИмпорт.СуммаВсего;
				
				ТекущийРасходНаИмпорт.Количество = ТекущийРасходНаИмпорт.Количество - ТекущийРасходНаИмпорт.КоличествоОплаченное;
				ТекущийРасходНаИмпорт.СуммаПошлины = ТекущийРасходНаИмпорт.СуммаПошлины - ТекущийРасходНаИмпорт.СуммаПошлиныОплаченная;
				ТекущийРасходНаИмпорт.СуммаНДС = ТекущийРасходНаИмпорт.СуммаНДС - ТекущийРасходНаИмпорт.СуммаНДСОплаченная;
				ТекущийРасходНаИмпорт.СуммаСбора = ТекущийРасходНаИмпорт.СуммаСбора - ТекущийРасходНаИмпорт.СуммаСбораОплаченная;
				ТекущийРасходНаИмпорт.СуммаВсего = ТекущийРасходНаИмпорт.СуммаВсего - ТекущийРасходНаИмпорт.СуммаВсегоОплаченная;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Поместим результат распределения во временную таблицу
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОплаченныеРасходыНаИмпорт.Ссылка КАК Ссылка,
		|	ОплаченныеРасходыНаИмпорт.Номенклатура КАК Номенклатура,
		|	ОплаченныеРасходыНаИмпорт.КоличествоОплаченное КАК КоличествоОплаченное,
		|	ОплаченныеРасходыНаИмпорт.СуммаПошлиныОплаченная КАК СуммаПошлиныОплаченная,
		|	ОплаченныеРасходыНаИмпорт.СуммаНДСОплаченная КАК СуммаНДСОплаченная,
		|	ОплаченныеРасходыНаИмпорт.СуммаСбораОплаченная КАК СуммаСбораОплаченная,
		|	ОплаченныеРасходыНаИмпорт.ДокументПартии КАК ДокументПартии,
		|	ОплаченныеРасходыНаИмпорт.Контрагент КАК Контрагент,
		|	ОплаченныеРасходыНаИмпорт.Договор КАК Договор
		|ПОМЕСТИТЬ ВТОплаченныеРасходыПриИмпорте
		|ИЗ
		|	&ОплаченныеРасходыПриИмпорте КАК ОплаченныеРасходыНаИмпорт
		|ГДЕ
		|	ОплаченныеРасходыНаИмпорт.КоличествоОплаченное > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОплаченныеРасходыПриИмпорте.Ссылка КАК Ссылка,
		|	ВТОплаченныеРасходыПриИмпорте.Номенклатура КАК Номенклатура,
		|	ВТОплаченныеРасходыПриИмпорте.КоличествоОплаченное КАК КоличествоОплаченное,
		|	ВТОплаченныеРасходыПриИмпорте.СуммаПошлиныОплаченная КАК СуммаПошлиныОплаченная,
		|	ВТОплаченныеРасходыПриИмпорте.СуммаНДСОплаченная КАК СуммаНДСОплаченная,
		|	ВТОплаченныеРасходыПриИмпорте.СуммаСбораОплаченная КАК СуммаСбораОплаченная,
		|	ВТОплаченныеРасходыПриИмпорте.СуммаПошлиныОплаченная + ВТОплаченныеРасходыПриИмпорте.СуммаНДСОплаченная + ВТОплаченныеРасходыПриИмпорте.СуммаСбораОплаченная КАК СуммаВсегоОплаченная,
		|	ВТОплаченныеРасходыПриИмпорте.ДокументПартии КАК ДокументПартии,
		|	ВТОплаченныеРасходыПриИмпорте.Контрагент КАК Контрагент,
		|	ВТОплаченныеРасходыПриИмпорте.Договор КАК Договор
		|ИЗ
		|	ВТОплаченныеРасходыПриИмпорте КАК ВТОплаченныеРасходыПриИмпорте";
	
	Запрос.УстановитьПараметр("ОплаченныеРасходыПриИмпорте", РасходыНаИмпорт);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ВыполнитьСписаниеТаможенныхПлатежейДляУСН(пОплаченныеРасходыНаИмпорт, пОрганизация)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ЗапросДляРасходовНаТоварыБезПоследовательностиПартийТаможня();
	
	Запрос.УстановитьПараметр("Организация", пОрганизация);
	Запрос.УстановитьПараметр("ОплаченныеРасходыНаИмпорт", пОплаченныеРасходыНаИмпорт);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРасходовНаТоварыИтогиПоКварталам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаЗаписейКУДиРСписаниеРасходовНаИмпорт = Новый ТаблицаЗначений;
	ТаблицаЗаписейКУДиРСписаниеРасходовНаИмпорт.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаписейКУДиРСписаниеРасходовНаИмпорт.Колонки.Добавить("РасходВсего", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	ТаблицаЗаписейКУДиРСписаниеРасходовНаИмпорт.Колонки.Добавить("РасходБаза", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	ТаблицаЗаписейКУДиРСписаниеРасходовНаИмпорт.Колонки.Добавить("ДатаПервичногоДокумента", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЗаписейКУДиРСписаниеРасходовНаИмпорт.Колонки.Добавить("НомерПервичногоДокумента", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(11, ДопустимаяДлина.Переменная)));
	
	НомерПервичногоДокумента = 1;
	УвеличитьНомерПервичногоДокумента = Ложь;
	
	Пока ВыборкаРасходовНаТоварыИтогиПоКварталам.Следующий() Цикл
		
		КонецКвартала = КонецКвартала(ВыборкаРасходовНаТоварыИтогиПоКварталам.Квартал);
		
		СтрокаРасходовНаТовары = ВыборкаРасходовНаТоварыИтогиПоКварталам.Выбрать();
		Пока СтрокаРасходовНаТовары.Следующий() Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаРасходовНаТовары.Номенклатура);
			СтруктураПоиска.Вставить("ДокументПартии", СтрокаРасходовНаТовары.ДокументПартии);
			
			НайденныеСтрокиОплаченныхРасходовНаИмпорт = пОплаченныеРасходыНаИмпорт.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекущийОплаченныйРасходНаИмпорт Из НайденныеСтрокиОплаченныхРасходовНаИмпорт Цикл
				Если ТекущийОплаченныйРасходНаИмпорт.СуммаВсегоОплаченная = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				УвеличитьНомерПервичногоДокумента = Истина;
				
				Если СтрокаРасходовНаТовары.КоличествоРасход >= ТекущийОплаченныйРасходНаИмпорт.КоличествоОплаченное Тогда
					
					ТаможенныеПлатежи = ТекущийОплаченныйРасходНаИмпорт.СуммаПошлиныОплаченная + ТекущийОплаченныйРасходНаИмпорт.СуммаСбораОплаченная;
					Если ТаможенныеПлатежи <> 0 Тогда
						НоваяСтрокаКУДиР = ТаблицаЗаписейКУДиРСписаниеРасходовНаИмпорт.Добавить();
						Содержание = НСтр("ru = 'Регламентная операция. Признаны расходы на уплату таможенных платежей.'");
						ЗаполнитьЗаписьКУДиРОСписанииТаможенныхПлатежей(НоваяСтрокаКУДиР, ТаможенныеПлатежи, КонецКвартала, НомерПервичногоДокумента, Содержание);
					КонецЕсли;
					
					СуммаНДСПриВвозе = ТекущийОплаченныйРасходНаИмпорт.СуммаНДСОплаченная;
					Если СуммаНДСПриВвозе <> 0 Тогда
						НоваяСтрокаКУДиР = ТаблицаЗаписейКУДиРСписаниеРасходовНаИмпорт.Добавить();
						Содержание = НСтр("ru = 'Регламентная операция. Признаны расходы на уплату НДС при ввозе на территорию РФ.'");
						ЗаполнитьЗаписьКУДиРОСписанииТаможенныхПлатежей(НоваяСтрокаКУДиР, СуммаНДСПриВвозе, КонецКвартала, НомерПервичногоДокумента, Содержание);
					КонецЕсли;
					
					ТекущийОплаченныйРасходНаИмпорт.КоличествоОплаченное = 0;
					ТекущийОплаченныйРасходНаИмпорт.СуммаПошлиныОплаченная = 0;
					ТекущийОплаченныйРасходНаИмпорт.СуммаНДСОплаченная = 0;
					ТекущийОплаченныйРасходНаИмпорт.СуммаСбораОплаченная = 0;
					ТекущийОплаченныйРасходНаИмпорт.СуммаВсегоОплаченная = 0
					
				Иначе
					
					Коэффициент = СтрокаРасходовНаТовары.КоличествоРасход / ТекущийОплаченныйРасходНаИмпорт.КоличествоОплаченное;
					
					СуммаПошлиныОплаченнаяКСписанию = ТекущийОплаченныйРасходНаИмпорт.СуммаПошлиныОплаченная * Коэффициент;
					СуммаСбораОплаченнаяКСписанию = ТекущийОплаченныйРасходНаИмпорт.СуммаСбораОплаченная * Коэффициент;
					СуммаНДСОплаченнаяКСписанию = ТекущийОплаченныйРасходНаИмпорт.СуммаПошлиныОплаченная * Коэффициент;
					КоличествоОплаченноеКСписанию = ТекущийОплаченныйРасходНаИмпорт.СуммаПошлиныОплаченная * Коэффициент;
					
					ТаможенныеПлатежи = СуммаПошлиныОплаченнаяКСписанию + СуммаСбораОплаченнаяКСписанию;
					Если ТаможенныеПлатежи <> 0 Тогда
						НоваяСтрокаКУДиР = ТаблицаЗаписейКУДиРСписаниеРасходовНаИмпорт.Добавить();
						Содержание = НСтр("ru = 'Регламентная операция. Признаны расходы на уплату таможенных платежей.'");
						ЗаполнитьЗаписьКУДиРОСписанииТаможенныхПлатежей(НоваяСтрокаКУДиР, ТаможенныеПлатежи, КонецКвартала, НомерПервичногоДокумента, Содержание);
					КонецЕсли;
					
					СуммаНДСПриВвозе = СуммаНДСОплаченнаяКСписанию;
					Если СуммаНДСПриВвозе <> 0 Тогда
						НоваяСтрокаКУДиР = ТаблицаЗаписейКУДиРСписаниеРасходовНаИмпорт.Добавить();
						Содержание = НСтр("ru = 'Регламентная операция. Признаны расходы на уплату НДС при ввозе на территорию РФ.'");
						ЗаполнитьЗаписьКУДиРОСписанииТаможенныхПлатежей(НоваяСтрокаКУДиР, СуммаНДСПриВвозе, КонецКвартала, НомерПервичногоДокумента, Содержание);
					КонецЕсли;
					
					ТекущийОплаченныйРасходНаИмпорт.КоличествоОплаченное = ТекущийОплаченныйРасходНаИмпорт.КоличествоОплаченное - КоличествоОплаченноеКСписанию;
					ТекущийОплаченныйРасходНаИмпорт.СуммаПошлиныОплаченная = ТекущийОплаченныйРасходНаИмпорт.СуммаПошлины - СуммаПошлиныОплаченнаяКСписанию;
					ТекущийОплаченныйРасходНаИмпорт.СуммаНДСОплаченная = ТекущийОплаченныйРасходНаИмпорт.СуммаНДС - СуммаНДСОплаченнаяКСписанию;
					ТекущийОплаченныйРасходНаИмпорт.СуммаСбораОплаченная = ТекущийОплаченныйРасходНаИмпорт.СуммаСбора - СуммаСбораОплаченнаяКСписанию;
					ТекущийОплаченныйРасходНаИмпорт.СуммаВсего = ТекущийОплаченныйРасходНаИмпорт.КоличествоОплаченное
						+ ТекущийОплаченныйРасходНаИмпорт.СуммаПошлиныОплаченная
						+ ТекущийОплаченныйРасходНаИмпорт.СуммаНДСОплаченная
						+ ТекущийОплаченныйРасходНаИмпорт.СуммаСбораОплаченная;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ДокументФормирования = РегламентированнаяОтчетностьУСН.ПолучитьДокументЗаписейУСНВПериодеПоВиду(
			пОрганизация,
			КонецКвартала,
			Перечисления.ВидыЗаписейФормированийКУДиР.РасходыНаТаможенныеПлатежи);
			
		Если ДокументФормирования = Неопределено И ТаблицаЗаписейКУДиРСписаниеРасходовНаИмпорт.Количество() > 0 Тогда
			ДокументФормирования = Документы.ЗаписиУСН.СоздатьДокумент();
			ДокументФормирования.Дата = КонецКвартала;
			ДокументФормирования.Организация = пОрганизация;
			ДокументФормирования.ВидЗаписей = Перечисления.ВидыЗаписейФормированийКУДиР.РасходыНаТаможенныеПлатежи;
		КонецЕсли;
		
		Если ДокументФормирования <> Неопределено Тогда
			
			ДокументФормирования.ЗаписиКУДиР.Загрузить(ТаблицаЗаписейКУДиРСписаниеРасходовНаИмпорт);
			Для Каждого СтрокаКУДиР Из ДокументФормирования.ЗаписиКУДиР Цикл
				СтрокаКУДиР.НомерПервичногоДокумента =  ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаКУДиР.НомерПервичногоДокумента, Истина, Истина);
			КонецЦикла;
			ДокументФормирования.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
		
		Если УвеличитьНомерПервичногоДокумента Тогда
			УвеличитьНомерПервичногоДокумента = Ложь;
			НомерПервичногоДокумента = НомерПервичногоДокумента + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапросДляРасходовНаТоварыБезПоследовательностиПартийТаможня() Экспорт
	
	ЗапросТекст = 
	"ВЫБРАТЬ
	|	ОплаченныеРасходыНаИмпорт.ДокументПартии КАК ДокументПартии
	|ПОМЕСТИТЬ ВТОплаченныеРасходыНаИмпорт
	|ИЗ
	|	&ОплаченныеРасходыНаИмпорт КАК ОплаченныеРасходыНаИмпорт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартииТоваровОбороты.ДокументПартии КАК ДокументПартии,
	|	ПартииТоваровОбороты.ДокументРегистрацииВКУДиР КАК ПервичныйДокумент,
	|	ПартииТоваровОбороты.ДокументРегистрацииВКУДиР.Дата КАК ДатаПервичногоДокумента,
	|	ПартииТоваровОбороты.ДокументРегистрацииВКУДиР.Номер КАК НомерПервичногоДокумента,
	|	СУММА(ПартииТоваровОбороты.СуммаРасход) КАК СуммаРасход,
	|	СУММА(ПартииТоваровОбороты.СуммаНДСРасход) КАК СуммаНДСРасход,
	|	ПартииТоваровОбороты.Номенклатура КАК Номенклатура,
	|	ПартииТоваровОбороты.КоличествоРасход КАК КоличествоРасход
	|ПОМЕСТИТЬ ВтОплаченныеПартии
	|ИЗ
	|	РегистрНакопления.ПартииТоваров.Обороты(, , Регистратор, Организация = &Организация) КАК ПартииТоваровОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОплаченныеРасходыНаИмпорт КАК ВТОплаченныеРасходыНаИмпорт
	|		ПО ПартииТоваровОбороты.ДокументПартии = ВТОплаченныеРасходыНаИмпорт.ДокументПартии
	|ГДЕ
	|	НЕ ПартииТоваровОбороты.ДокументПартии ЕСТЬ NULL
	|	И НЕ ПартииТоваровОбороты.ДокументПартии ССЫЛКА Документ.ВводНачальныхОстатков
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровОбороты.ДокументРегистрацииВКУДиР,
	|	ПартииТоваровОбороты.ДокументПартии,
	|	ПартииТоваровОбороты.Регистратор.Дата,
	|	ПартииТоваровОбороты.Регистратор.Номер,
	|	ПартииТоваровОбороты.ДокументРегистрацииВКУДиР.Дата,
	|	ПартииТоваровОбороты.ДокументРегистрацииВКУДиР.Номер,
	|	ПартииТоваровОбороты.Номенклатура,
	|	ПартииТоваровОбороты.КоличествоРасход
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПартииТоваров.ДокументПартии,
	|	ПартииТоваров.ДокументРегистрацииВКУДиР,
	|	ПартииТоваров.ДокументРегистрацииВКУДиР.Дата,
	|	ПартииТоваров.ДокументРегистрацииВКУДиР.Номер,
	|	СУММА(ПартииТоваров.Сумма),
	|	СУММА(ПартииТоваров.СуммаНДС),
	|	ПартииТоваров.Номенклатура,
	|	ПартииТоваров.Количество
	|ИЗ
	|	РегистрНакопления.ПартииТоваров КАК ПартииТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОплаченныеРасходыНаИмпорт КАК ВТОплаченныеРасходыНаИмпорт
	|		ПО ПартииТоваров.ДокументПартии = ВТОплаченныеРасходыНаИмпорт.ДокументПартии
	|ГДЕ
	|	ПартииТоваров.Организация = &Организация
	|	И ПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И НЕ ПартииТоваров.ДокументПартии ЕСТЬ NULL
	|	И ПартииТоваров.ДокументПартии ССЫЛКА Документ.ВводНачальныхОстатков
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваров.ДокументРегистрацииВКУДиР,
	|	ПартииТоваров.ДокументПартии,
	|	ПартииТоваров.ДатаПервичногоДокумента,
	|	ПартииТоваров.НомерПервичногоДокумента,
	|	ПартииТоваров.ДокументРегистрацииВКУДиР.Дата,
	|	ПартииТоваров.ДокументРегистрацииВКУДиР.Номер,
	|	ПартииТоваров.Номенклатура,
	|	ПартииТоваров.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВтОплаченныеПартии.СуммаРасход) КАК РасходВсего,
	|	СУММА(ВтОплаченныеПартии.СуммаРасход) КАК РасходБаза,
	|	ВтОплаченныеПартии.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	|	ВтОплаченныеПартии.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	ВтОплаченныеПартии.ПервичныйДокумент КАК ПервичныйДокумент,
	|	ВтОплаченныеПартии.Номенклатура КАК Номенклатура,
	|	ВтОплаченныеПартии.ДокументПартии КАК ДокументПартии,
	|	ВтОплаченныеПартии.КоличествоРасход КАК КоличествоРасход,
	|	НАЧАЛОПЕРИОДА(ВтОплаченныеПартии.ДатаПервичногоДокумента, КВАРТАЛ) КАК Квартал
	|ИЗ
	|	ВтОплаченныеПартии КАК ВтОплаченныеПартии
	|ГДЕ
	|	ВтОплаченныеПартии.СуммаРасход > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтОплаченныеПартии.ПервичныйДокумент,
	|	ВтОплаченныеПартии.ДатаПервичногоДокумента,
	|	ВтОплаченныеПартии.НомерПервичногоДокумента,
	|	ВтОплаченныеПартии.Номенклатура,
	|	ВтОплаченныеПартии.ДокументПартии,
	|	ВтОплаченныеПартии.КоличествоРасход,
	|	НАЧАЛОПЕРИОДА(ВтОплаченныеПартии.ДатаПервичногоДокумента, КВАРТАЛ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВтОплаченныеПартии.ДатаПервичногоДокумента
	|ИТОГИ ПО
	|	Квартал";
	
	Возврат ЗапросТекст;
	
КонецФункции

Процедура ЗаполнитьЗаписьКУДиРОСписанииТаможенныхПлатежей(пНоваяСтрокаКУДиР, пРасходВсего, пДатаОкончания, пНомерПервичногоДокумента, пСодержание)
	
	пНоваяСтрокаКУДиР.РасходВсего = пРасходВсего;
	пНоваяСтрокаКУДиР.РасходБаза = пНоваяСтрокаКУДиР.РасходВсего;
	пНоваяСтрокаКУДиР.Содержание = пСодержание;
	пНоваяСтрокаКУДиР.НомерПервичногоДокумента = пНомерПервичногоДокумента;
	пНоваяСтрокаКУДиР.ДатаПервичногоДокумента = КонецКвартала(пДатаОкончания);
	
КонецПроцедуры

#КонецОбласти