
#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗагрузитьОбъекты(УзелОбмена, Объекты, ЭтоНовыйОбмен) Экспорт
	
	ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
	ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
	ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументТип");
	
	НачатьТранзакцию();
	
	Если Объекты <> Неопределено Тогда
		Для каждого ОбъектXDTO Из Объекты.objects Цикл
			Если ОбъектXDTO.Тип().Имя = "CatContractors" Тогда
				НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "CatItems" Тогда
				НайтиСоздатьНоменклатура(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "CatStructuralUnit" Тогда
				НайтиСоздатьСтруктурнуюЕдиницу(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "CatCashDesk" Тогда
				НайтиСоздатьКассаККМ(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "CashFlowItems" Тогда
				НайтиСоздатьСтатьяДДС(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "DocOrders" Тогда
				НайтиСоздатьЗаказПокупателя(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "DocInvoice" Тогда
				НайтиСоздатьРасходнаяНакладная(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "DocPurshareInvoice" Тогда
				НайтиСоздатьПриходнаяНакладная(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "DocIncomingPayment" Тогда
				НайтиСоздатьПоступлениеВКассу(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "DocOutgoingPayment" Тогда
				НайтиСоздатьРасходИзКассы(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "DocProduction" Тогда
				НайтиСоздатьСборкаЗапасов(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "DocCashReceipt" Тогда
				НайтиСоздатьЧекККМ(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "DocCashReceiptReturn" Тогда
				НайтиСоздатьЧекККМНаВозврат(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "DocRetailSalesReport" Тогда
				НайтиСоздатьОтчетОРозничныхПродажах(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "Prices" Тогда
				ЗагрузитьЦены(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "ObjectDeletion" Тогда
				ПометитьОбъектНаУдаление(УзелОбмена, ОбъектXDTO);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ВыполнитьОтложенноеПроведениеДокументов(УзелОбмена, ДокументыДляОтложенногоПроведения);
	
КонецПроцедуры // ЗагрузитьОбъекты()

#КонецОбласти

#Область Справочники

Функция НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.Контрагенты.ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Если ОбъектXDTO.ThisIsGroup Тогда
			Объект = Справочники.Контрагенты.СоздатьГруппу();
		Иначе
			Объект = Справочники.Контрагенты.СоздатьЭлемент();
			Объект.Покупатель = Истина;
			Объект.Поставщик = Истина;
			Объект.ПрочиеОтношения = Истина;
		КонецЕсли;
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.УстановитьНовыйКод();
		Объект.Записать();
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Если НЕ ЭтоНовыйОбмен И НЕ ЭтоНовый Тогда
		Возврат Объект.Ссылка;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	Если Объект.Наименование <> ОбъектXDTO.Name Тогда
		Объект.Наименование = ОбъектXDTO.Name;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Родитель = НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO.Group, ЭтоНовыйОбмен);
	Если Объект.Родитель <> Родитель Тогда
		Объект.Родитель = Родитель;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если Объект.Комментарий <> ОбъектXDTO.AdditionalInfo
		И НЕ Объект.ЭтоГруппа Тогда
		Объект.Комментарий = ОбъектXDTO.AdditionalInfo;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если НЕ Объект.ЭтоГруппа Тогда
		Если НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
			Объект.НаименованиеПолное = Объект.Наименование;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ВидКонтрагента) Тогда
			Объект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			ОсновнойОтветственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				Пользователи.ТекущийПользователь(),
				"ОсновнойОтветственный"
			);
			Объект.Ответственный = ОсновнойОтветственный;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСПокупателем) Тогда
			Объект.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаАвансовПокупателя) Тогда
			Объект.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСПоставщиком) Тогда
			Объект.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаАвансовПоставщику) Тогда
			Объект.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если ЭтоНовый Тогда
			Если ОбменМобильноеПриложениеОбщее.ЭтоВерсияСоСтарымОбменом(УзелОбмена) Тогда // это старый вариант
				Объект.ВестиРасчетыПоДоговорам = Ложь;
				Объект.ВестиРасчетыПоДокументам = Ложь;
				Объект.ВестиРасчетыПоЗаказам = Истина;
				Объект.ВестиУчетОплатыПоСчетам = Истина;
			Иначе
				Объект.ВестиРасчетыПоДоговорам = Истина;
				Объект.ВестиРасчетыПоДокументам = Истина;
				Объект.ВестиРасчетыПоЗаказам = Истина;
				Объект.ВестиУчетОплатыПоСчетам = Истина;
			КонецЕсли;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбъектXDTO.Adress) Тогда
			НайденаСтрокаАдреса = Ложь;
			Для каждого ТекСтрока Из Объект.КонтактнаяИнформация Цикл
				Если ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
				   И ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
					НайденаСтрокаАдреса = Истина;
					Если ТекСтрока.Представление <> ОбъектXDTO.Adress Тогда
						ТекСтрока.Представление = ОбъектXDTO.Adress;
						НужноЗаписыватьОбъект = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НЕ НайденаСтрокаАдреса Тогда
				НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
				НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				НоваяСтрока.Представление = ОбъектXDTO.Adress;
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбъектXDTO.Tel) Тогда
			НайденаСтрока = Ложь;
			Для каждого ТекСтрока Из Объект.КонтактнаяИнформация Цикл
				Если ТекСтрока.Тип =  Перечисления.ТипыКонтактнойИнформации.Телефон
				   И ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
					НайденаСтрока = Истина;
					Если ТекСтрока.Представление <> ОбъектXDTO.Tel Тогда
						ТекСтрока.Представление = ОбъектXDTO.Tel;
						НужноЗаписыватьОбъект = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НЕ НайденаСтрока Тогда
				НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
				НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
				НоваяСтрока.Представление = ОбъектXDTO.Tel;
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбъектXDTO.Email) Тогда
			НайденаСтрока = Ложь;
			Для каждого ТекСтрока Из Объект.КонтактнаяИнформация Цикл
				Если ТекСтрока.Тип =  Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
				   И ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
					НайденаСтрока = Истина;
					Если ТекСтрока.Представление <> ОбъектXDTO.Email Тогда
						ТекСтрока.Представление = ОбъектXDTO.Email;
						НужноЗаписыватьОбъект = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НЕ НайденаСтрока Тогда
				НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
				НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
				НоваяСтрока.Представление = ОбъектXDTO.Email;
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НужноЗаписыватьОбъект Тогда
		Объект.Записать();
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark, Ложь);
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьКонтрагенты()

Функция НайтиСоздатьНоменклатура(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Если ОбъектXDTO.ThisIsGroup Тогда
			Объект = Справочники.Номенклатура.СоздатьГруппу();
		Иначе
			Объект = Справочники.Номенклатура.СоздатьЭлемент();
		КонецЕсли;
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.УстановитьНовыйКод();
		Объект.Записать();
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Если НЕ ЭтоНовыйОбмен И НЕ ЭтоНовый Тогда
		Возврат Объект.Ссылка;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	Если Объект.Наименование <> ОбъектXDTO.Name Тогда
		Объект.Наименование = ОбъектXDTO.Name;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если Объект.Артикул <> ОбъектXDTO.Article
		И НЕ Объект.ЭтоГруппа Тогда
		Объект.Артикул = ОбъектXDTO.Article;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Родитель = НайтиСоздатьНоменклатура(УзелОбмена, ОбъектXDTO.Group, ЭтоНовыйОбмен);
	Если Объект.Родитель <> Родитель Тогда
		Объект.Родитель = Родитель;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Поставщик = НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO.Supplier, ЭтоНовыйОбмен);
	Если Объект.Поставщик <> Поставщик
		И НЕ Объект.ЭтоГруппа Тогда
		Объект.Поставщик = Поставщик;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если Объект.ТипНоменклатуры <> НайтиТипыНоменклатуры(ОбъектXDTO.TypeItem)
		И НЕ Объект.ЭтоГруппа Тогда
		Объект.ТипНоменклатуры = НайтиТипыНоменклатуры(ОбъектXDTO.TypeItem);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если ОбъектXDTO.Свойства().Получить("Image") <> Неопределено
		И ЗначениеЗаполнено(ОбъектXDTO.Image) Тогда
		Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", ПоместитьВоВременноеХранилище(ОбъектXDTO.Image));
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			РаботаСФайлами.ОбновитьФайл(Объект.ФайлКартинки, ИнформацияОФайле);
		Иначе
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ИнформацияОФайле.Вставить("ВладелецФайлов", Объект.Ссылка);
			ИнформацияОФайле.Вставить("ИмяБезРасширения", "cover");
			ИнформацияОФайле.Вставить("РасширениеБезТочки", "jpg");
			ИнформацияОФайле.Вставить("ВремяИзмененияУниверсальное");
			АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ОбъектXDTO.Image);
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ИнформацияОФайле, АдресВременногоХранилищаФайла);
			Объект.ФайлКартинки = ПрисоединенныйФайл;
		КонецЕсли;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если ОбъектXDTO.Свойства().Получить("BarCode") <> Неопределено Тогда
		НайтиСоздатьШтрихкодНоменклатуры(Объект.Ссылка, ОбъектXDTO.BarCode);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если НЕ Объект.ЭтоГруппа Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СрокПополнения) Тогда
			Объект.СрокПополнения = 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаЗапасов) Тогда
			Объект.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаЗатрат) Тогда
			Объект.СчетУчетаЗатрат = ПланыСчетов.Управленческий.КоммерческиеРасходы;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
			Объект.НаименованиеПолное = Объект.Наименование;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
			Объект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.КатегорияНоменклатуры) Тогда
			Объект.КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.БезКатегории;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.МетодОценки) Тогда
			Объект.МетодОценки = Перечисления.МетодОценкиЗапасов.ПоСредней;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СпособПополнения) Тогда
			Объект.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ВидСтавкиНДС) Тогда
			Объект.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.Общая;
		КонецЕсли;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НужноЗаписыватьОбъект Тогда
		Объект.Записать();
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark, Ложь);
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьНоменклатура()

Функция НайтиСоздатьСтатьяДДС(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	
	Если ОбъектXDTO.Predefined <> Неопределено И ОбъектXDTO.Predefined Тогда
		Если ОбъектXDTO.PredefinedCode = "000000001" Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
		ИначеЕсли ОбъектXDTO.PredefinedCode = "000000002" Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
		ИначеЕсли ОбъектXDTO.PredefinedCode = "000000003" Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
		КонецЕсли;
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Если ОбъектXDTO.ThisIsGroup Тогда
			Объект = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьГруппу();
		Иначе
			Объект = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		КонецЕсли;
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.УстановитьНовыйКод();
		Объект.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ОперационнаяДеятельность;
		Объект.Записать();
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Если Объект.Предопределенный Тогда
		Возврат Объект.Ссылка;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	Если Объект.Наименование <> ОбъектXDTO.Name Тогда
		Объект.Наименование = ОбъектXDTO.Name;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Родитель = НайтиСоздатьСтатьяДДС(УзелОбмена, ОбъектXDTO.Group, ЭтоНовыйОбмен);
	Если Объект.Родитель <> Родитель Тогда
		Объект.Родитель = Родитель;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
		
	Если НужноЗаписыватьОбъект Тогда
		Объект.Записать();
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark, Ложь);
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьСтатьяДДС()

Функция НайтиСоздатьСтруктурнуюЕдиницу(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
	
	Если ОбъектXDTO.Predefined <> Неопределено И ОбъектXDTO.Predefined Тогда
		Если ОбъектXDTO.PredefinedCode = "000000001" Тогда
			Возврат Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
		ИначеЕсли ОбъектXDTO.PredefinedCode = "000000002" Тогда
			Возврат Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
		КонецЕсли;
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Объект = Справочники.СтруктурныеЕдиницы.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.УстановитьНовыйКод();
		Объект.Записать();
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Если Объект.Предопределенный Тогда
		Возврат Объект.Ссылка;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	Если Объект.Наименование <> ОбъектXDTO.Name Тогда
		Объект.Наименование = ОбъектXDTO.Name;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Родитель = НайтиСоздатьСтруктурнуюЕдиницу(УзелОбмена, ОбъектXDTO.Group, ЭтоНовыйОбмен);
	Если Объект.Родитель <> Родитель Тогда
		Объект.Родитель = Родитель;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипСтруктурнойЕдиницы) Тогда
		Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.РозничныйВидЦен) Тогда
		Объект.РозничныйВидЦен = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НужноЗаписыватьОбъект Тогда
		Объект.Записать();
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark, Ложь);
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьКонтрагенты()

Функция НайтиСоздатьКассаККМ(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.КассыККМ.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Справочники.КассыККМ.ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	ЭтоНовый = Ложь;
	Если Объект = Неопределено Тогда
		Объект = Справочники.КассыККМ.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.УстановитьНовыйКод();
		Объект.ИспользоватьБезПодключенияОборудования = Истина;
		Объект.СчетУчета = ПланыСчетов.Управленческий.Касса;
		
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Объект.Владелец = ЗначениеНастройки;
		Иначе
			Объект.Владелец = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
		Объект.Записать();
		ЭтоНовый = Истина;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	Если Объект.Наименование <> ОбъектXDTO.Name Тогда
		Объект.Наименование = ОбъектXDTO.Name;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	СтруктурнаяЕдиница = НайтиСоздатьСтруктурнуюЕдиницу(УзелОбмена, ОбъектXDTO.RetailStructuralUnit, ЭтоНовыйОбмен);
	Если Объект.СтруктурнаяЕдиница <> СтруктурнаяЕдиница Тогда
		Объект.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипКассы) Тогда
		Объект.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Пользователи.ТекущийПользователь(),
			"ОсновноеПодразделение"
		);
		Объект.Подразделение = ?(ЗначениеЗаполнено(Объект.Подразделение), Объект.Подразделение, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		Объект.ВалютаДенежныхСредств = Константы.НациональнаяВалюта.Получить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НужноЗаписыватьОбъект Тогда
		Объект.Записать();
	КонецЕсли;
	
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.УстановитьПометкуУдаления(ОбъектXDTO.DeletionMark, Ложь);
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьКонтрагенты()

#КонецОбласти

#Область Документы

Функция НайтиСоздатьЗаказПокупателя(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕсли;
	
	Объект = СоздатьДокумент("ЗаказПокупателя", ОбъектXDTO);
	
	Если НЕ Объект.ЭтоНовый() Тогда // Чтобы не испортить данные не перезаполняем документ.
		ПрерватьЗаполнение = ОбменМобильноеПриложениеОбщее.ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, "Запасы");
		Если ПрерватьЗаполнение
			ИЛИ Объект.КоличествоВариантовКП >= 2 Тогда
			Возврат Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнойОтветственный"
		);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Контрагент = НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO.Buyer, ЭтоНовыйОбмен);
	Если Объект.Контрагент <> Контрагент Тогда
		Объект.Контрагент = Контрагент;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ДоговорПоУмолчанию = ПолучитьСоздатьДоговорПоУмолчанию(
			Объект.Ссылка,
			Объект.Контрагент,
			Объект.Организация,
			Объект.ВидОперации,
			Перечисления.ВидыДоговоров.СПокупателем
		);
		Объект.Договор = ДоговорПоУмолчанию;
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КурсыВалютСрезПоследних.Курс,
			|	КурсыВалютСрезПоследних.Кратность
			|ИЗ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютСрезПоследних"
		);
		Запрос.УстановитьПараметр("Период", Объект.Дата);
		Запрос.УстановитьПараметр("Валюта", Объект.Договор.ВалютаРасчетов);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.Курс = Выборка.Курс;
			Объект.Кратность = Выборка.Кратность;
		Иначе
			Объект.Курс = 1;
			Объект.Кратность = 1;
		КонецЕсли;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОтгрузки) Тогда
		Объект.ДатаОтгрузки = Объект.Дата;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидЗаказа) Тогда
		Объект.ВидЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьВидЗаказаПокупателя();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	СостояниеЗаказаЗагружаемое = НайтиСостоянияЗаказовПокупателей(ОбъектXDTO.OrderStatus, Объект.ВидЗаказа);
	Если НЕ ЗначениеЗаполнено(Объект.СостояниеЗаказа)
		ИЛИ СостояниеЗаказаЗагружаемое = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
		Объект.СостояниеЗаказа = СостояниеЗаказаЗагружаемое;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродажи) Тогда
		Объект.СтруктурнаяЕдиницаПродажи = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновноеПодразделение"
		);
		Объект.СтруктурнаяЕдиницаПродажи = ?(ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродажи), Объект.СтруктурнаяЕдиницаПродажи, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда
		Объект.ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнойВидЦенПродажи"
		);
		Объект.ВидЦен = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен, Объект.Договор.ВидЦен);
		Объект.ВидЦен = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен, Справочники.ВидыЦен.Оптовая);
		Объект.СуммаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен.ЦенаВключаетНДС, Истина);
		
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ПоложениеДатыОтгрузкиВЗаказеПокупателя");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Если Объект.ПоложениеДатыОтгрузки <> ЗначениеНастройки Тогда
				Объект.ПоложениеДатыОтгрузки = ЗначениеНастройки;
			КонецЕсли;
		Иначе
			Объект.ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
		
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() > 0 Тогда
		Объект.Запасы.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ОбъектXDTO.Items <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Items.Item Цикл
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			НоваяСтрока.ТипНоменклатурыЗапас = ((НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас)
											ИЛИ (НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат));
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Цена = ТекСтрока.Price;
			НоваяСтрока.Количество = ТекСтрока.Quantity;
			НоваяСтрока.Сумма = ТекСтрока.Total;
			НоваяСтрока.ДатаОтгрузки = Объект.Дата;
			НужноЗаписыватьОбъект = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("Comment") <> Неопределено
		И Объект.Комментарий <> ОбъектXDTO.Comment Тогда
		Объект.Комментарий = ОбъектXDTO.Comment;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("НомерВариантаКП", Объект.ОсновнойВариантКП);
	ПараметрыОтбора.Вставить("ЭтоРазделитель", Ложь);
	
	ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
		Неопределено,
		Объект.Запасы,
		Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой,
		"Сумма",
		?(ЗначениеЗаполнено(ОбъектXDTO.Discount), ОбъектXDTO.Discount, 0),
		"ЗапасыНоменклатура",
		ПараметрыОтбора
	);
	
	Для каждого ТекСтрока Из Объект.Запасы Цикл
		РассчитатьСуммыВСтрокеТабличнойЧасти(Объект, НоваяСтрока);
	КонецЦикла;
	
	ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения);
	
	// Если номер в мобильном приложении не соответствует номеру заказа в центральной базе,
	// передаем назад для синхронизации номеров.
	Если ОбъектXDTO.name = Объект.Номер Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьЗаказПокупателя()

Функция НайтиСоздатьРасходИзКассы(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.РасходИзКассы.ПустаяСсылка();
	КонецЕсли;
	
	Объект = СоздатьДокумент("РасходИзКассы", ОбъектXDTO);
	
	НужноЗаписыватьОбъект = Ложь;
	
	ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		Объект.ВалютаДенежныхСредств = Константы.НациональнаяВалюта.Получить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Касса = Объект.Организация.КассаПоУмолчанию;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
		
	Контрагент = НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO.Contractor, ЭтоНовыйОбмен);
	
	Если Объект.Контрагент <> Контрагент
	 ИЛИ НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику;
		Иначе
			Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы;
			Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
		КонецЕсли;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
		
	Если Объект.Контрагент <> Контрагент Тогда
		Объект.Контрагент = Контрагент;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ПриходнаяНакладная = НайтиСоздатьПриходнаяНакладная(УзелОбмена, ОбъектXDTO.PurshareInvoice, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
	Если Объект.ДокументОснование <> ПриходнаяНакладная Тогда
		Объект.ДокументОснование = ПриходнаяНакладная;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Объект.РасшифровкаПлатежа.Очистить();
	НужноЗаписыватьОбъект = Истина;
	НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	ДоговорПоУмолчанию = ПолучитьСоздатьДоговорПоУмолчанию(
		Объект.Ссылка,
		Объект.Контрагент,
		Объект.Организация,
		Объект.ВидОперации,
		Перечисления.ВидыДоговоров.СПоставщиком
	);
	НоваяСтрока.Договор = ДоговорПоУмолчанию;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта,
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта В (&Валюты)) КАК КурсыВалютСрезПоследних"
	);
	МассивВалют = Новый Массив();
	МассивВалют.Добавить(ДоговорПоУмолчанию.ВалютаРасчетов);
	МассивВалют.Добавить(Объект.ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Валюты", МассивВалют);
	ТаблицаВалют = Запрос.Выполнить().Выгрузить();
	ВалютаРасчетов = ТаблицаВалют.Найти(ДоговорПоУмолчанию.ВалютаРасчетов, "Валюта");
	ВалютаДенежныхСредств = ТаблицаВалют.Найти(Объект.ВалютаДенежныхСредств, "Валюта");
	
	Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
		НоваяСтрока.Курс = ВалютаРасчетов.Курс;
		НоваяСтрока.Кратность = ВалютаРасчетов.Кратность;
	Иначе
		НоваяСтрока.Курс = 1;
		НоваяСтрока.Кратность = 1;
	КонецЕсли;
	
	НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
	Если ЗначениеЗаполнено(ПриходнаяНакладная) Тогда
		НоваяСтрока.Документ = ПриходнаяНакладная;
	Иначе
		НоваяСтрока.ПризнакАванса = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
		НоваяСтрока.СуммаРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			НоваяСтрока.СуммаПлатежа,
			ВалютаДенежныхСредств.Курс,
			НоваяСтрока.Курс,
			ВалютаДенежныхСредств.Кратность,
			НоваяСтрока.Кратность
		);
	Иначе
		НоваяСтрока.СуммаРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			НоваяСтрока.СуммаПлатежа,
			1,
			НоваяСтрока.Курс,
			1,
			НоваяСтрока.Кратность
		);
	КонецЕсли;
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса())); 
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;
	
	НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
	НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((НоваяСтрока.СтавкаНДС.Ставка + 100) / 100);
	
	Если ОбъектXDTO.Свойства().Получить("Comment") <> Неопределено
		И Объект.Комментарий <> ОбъектXDTO.Comment Тогда
		Объект.Комментарий = ОбъектXDTO.Comment;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("CashFlowItem") <> Неопределено Тогда
		Статья = НайтиСоздатьСтатьяДДС(УзелОбмена, ОбъектXDTO.CashFlowItem, ЭтоНовыйОбмен);
		Если Объект.Статья <> Статья Тогда
			Объект.Статья = Статья;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Статья) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения);
	
	// Если номер заказа в мобильном приложении не соответствует номеру заказа в центральной базе,
	// передаем назад для синхронизации номеров.
	Если ОбъектXDTO.name = Объект.Номер Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьРасходИзКассы()

Функция НайтиСоздатьПоступлениеВКассу(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.ПоступлениеВКассу.ПустаяСсылка();
	КонецЕсли;
	
	Объект = СоздатьДокумент("ПоступлениеВКассу", ОбъектXDTO);
	
	НужноЗаписыватьОбъект = Ложь;
	
	ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		Объект.ВалютаДенежныхСредств = Константы.НациональнаяВалюта.Получить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Касса = Объект.Организация.КассаПоУмолчанию;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Контрагент = НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO.Contractor, ЭтоНовыйОбмен);
	
	Если Объект.Контрагент <> Контрагент
	 ИЛИ НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
		Иначе
			Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее;
			Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеДоходы;
		КонецЕсли;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Контрагент <> Контрагент Тогда
		Объект.Контрагент = Контрагент;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПринятоОт) Тогда
		Объект.ПринятоОт = Объект.Контрагент.НаименованиеПолное;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	РасходнаяНакладная = НайтиСоздатьРасходнаяНакладная(УзелОбмена, ОбъектXDTO.Invoice, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
	ЗаказПокупателя = НайтиСоздатьЗаказПокупателя(УзелОбмена, ОбъектXDTO.Order, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
	
	ДокументОснование = Неопределено;
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		ДокументОснование = ЗаказПокупателя;
	ИначеЕсли ЗначениеЗаполнено(РасходнаяНакладная) Тогда
		ДокументОснование = РасходнаяНакладная;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		// В мобильном клиенте удалить или поменять заказ нельзя, по этому заполнение происходит только чистого документа основания.
		Объект.ДокументОснование = ДокументОснование;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Объект.РасшифровкаПлатежа.Очистить();
	НужноЗаписыватьОбъект = Истина;
	НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	ДоговорПоУмолчанию = ПолучитьСоздатьДоговорПоУмолчанию(
		Объект.Ссылка,
		Объект.Контрагент,
		Объект.Организация,
		Объект.ВидОперации,
		Перечисления.ВидыДоговоров.СПокупателем
	);
	НоваяСтрока.Договор = ДоговорПоУмолчанию;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта,
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта В (&Валюты)) КАК КурсыВалютСрезПоследних"
	);
	МассивВалют = Новый Массив();
	МассивВалют.Добавить(ДоговорПоУмолчанию.ВалютаРасчетов);
	МассивВалют.Добавить(Объект.ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Валюты", МассивВалют);
	ТаблицаВалют = Запрос.Выполнить().Выгрузить();
	ВалютаРасчетов = ТаблицаВалют.Найти(ДоговорПоУмолчанию.ВалютаРасчетов, "Валюта");
	ВалютаДенежныхСредств = ТаблицаВалют.Найти(Объект.ВалютаДенежныхСредств, "Валюта");
	
	Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
		НоваяСтрока.Курс = ВалютаРасчетов.Курс;
		НоваяСтрока.Кратность = ВалютаРасчетов.Кратность;
	Иначе
		НоваяСтрока.Курс = 1;
		НоваяСтрока.Кратность = 1;
	КонецЕсли;
	
	НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
	Если ЗначениеЗаполнено(РасходнаяНакладная) Тогда
		НоваяСтрока.Документ = РасходнаяНакладная;
	Иначе
		НоваяСтрока.ПризнакАванса = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		НоваяСтрока.Заказ = ЗаказПокупателя;
	Иначе
		НоваяСтрока.Заказ = Объект.ДокументОснование;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
		НоваяСтрока.СуммаРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			НоваяСтрока.СуммаПлатежа,
			ВалютаДенежныхСредств.Курс,
			НоваяСтрока.Курс,
			ВалютаДенежныхСредств.Кратность,
			НоваяСтрока.Кратность
		);
	Иначе
		НоваяСтрока.СуммаРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			НоваяСтрока.СуммаПлатежа,
			1,
			НоваяСтрока.Курс,
			1,
			НоваяСтрока.Кратность
		);
	КонецЕсли;
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса())); 
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;
	
	НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
	НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((НоваяСтрока.СтавкаНДС.Ставка + 100) / 100);
	
	Если ОбъектXDTO.Свойства().Получить("Comment") <> Неопределено
		И Объект.Комментарий <> ОбъектXDTO.Comment Тогда
		Объект.Комментарий = ОбъектXDTO.Comment;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("CashFlowItem") <> Неопределено Тогда
		Статья = НайтиСоздатьСтатьяДДС(УзелОбмена, ОбъектXDTO.CashFlowItem, ЭтоНовыйОбмен);
		Если Объект.Статья <> Статья Тогда
			Объект.Статья = Статья;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Статья) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения);
	
	// Если номер в мобильном приложении не соответствует номеру заказа в центральной базе,
	// передаем назад для синхронизации номеров.
	Если ОбъектXDTO.name = Объект.Номер Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьПоступлениеВКассу()

Функция НайтиСоздатьРасходнаяНакладная(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.РасходнаяНакладная.ПустаяСсылка();
	КонецЕсли;
	
	Объект = СоздатьДокумент("РасходнаяНакладная", ОбъектXDTO);
	
	Если НЕ Объект.ЭтоНовый() Тогда // Чтобы не испортить данные не перезаполняем документ.
		ПрерватьЗаполнение = ОбменМобильноеПриложениеОбщее.ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, "Запасы");
		Если ПрерватьЗаполнение Тогда
			Возврат Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	
	ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнойОтветственный"
		);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Контрагент = НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO.Buyer, ЭтоНовыйОбмен);
	Если Объект.Контрагент <> Контрагент Тогда
		Объект.Контрагент = Контрагент;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ДоговорПоУмолчанию = ПолучитьСоздатьДоговорПоУмолчанию(
			Объект.Ссылка,
			Объект.Контрагент,
			Объект.Организация,
			Объект.ВидОперации,
			Перечисления.ВидыДоговоров.СПокупателем
		);
		Объект.Договор = ДоговорПоУмолчанию;
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КурсыВалютСрезПоследних.Курс,
			|	КурсыВалютСрезПоследних.Кратность
			|ИЗ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютСрезПоследних"
		);
		Запрос.УстановитьПараметр("Период", Объект.Дата);
		Запрос.УстановитьПараметр("Валюта", Объект.Договор.ВалютаРасчетов);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.Курс = Выборка.Курс;
			Объект.Кратность = Выборка.Кратность;
		Иначе
			Объект.Курс = 1;
			Объект.Кратность = 1;
		КонецЕсли;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновноеПодразделение"
		);
		Объект.Подразделение = ?(ЗначениеЗаполнено(Объект.Подразделение), Объект.Подразделение, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		Объект.СтруктурнаяЕдиница = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнойСклад"
		);
		Объект.СтруктурнаяЕдиница = ?(ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница), Объект.СтруктурнаяЕдиница, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда
		Объект.ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнойВидЦенПродажи"
		);
		Объект.ВидЦен = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен, Объект.Договор.ВидЦен);
		Объект.ВидЦен = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен, Справочники.ВидыЦен.Оптовая);
		Объект.СуммаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен.ЦенаВключаетНДС, Истина);
		
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ПоложениеЗаказаПокупателяВДокументахОтгрузки");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Если Объект.ПоложениеЗаказаПокупателя <> ЗначениеНастройки Тогда
				Объект.ПоложениеЗаказаПокупателя = ЗначениеНастройки;
			КонецЕсли;
		Иначе
			Объект.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
		
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ЗаказПокупателя = НайтиСоздатьЗаказПокупателя(УзелОбмена, ОбъектXDTO.Order, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
	Если Объект.ДокументОснование <> ЗаказПокупателя Тогда
		Объект.ДокументОснование = ЗаказПокупателя;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если Объект.Заказ <> ЗаказПокупателя Тогда
		Объект.Заказ = ЗаказПокупателя;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() > 0 Тогда
		Объект.Запасы.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	Если ОбъектXDTO.Items <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Items.Item Цикл
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			НоваяСтрока.ТипНоменклатурыЗапас = ((НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас)
											ИЛИ (НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат));
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Цена = ТекСтрока.Price;
			НоваяСтрока.Заказ = ЗаказПокупателя;
			НоваяСтрока.Количество = ТекСтрока.Quantity;
			НоваяСтрока.Сумма = ТекСтрока.Total;
			НужноЗаписыватьОбъект = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("Comment") <> Неопределено
		И Объект.Комментарий <> ОбъектXDTO.Comment Тогда
		Объект.Комментарий = ОбъектXDTO.Comment;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
		Неопределено,
		Объект.Запасы,
		Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой,
		"Сумма",
		?(ЗначениеЗаполнено(ОбъектXDTO.Discount), ОбъектXDTO.Discount, 0),
		"ЗапасыНоменклатура"
	);
	
	Для каждого ТекСтрока Из Объект.Запасы Цикл
		РассчитатьСуммыВСтрокеТабличнойЧасти(Объект, НоваяСтрока);
	КонецЦикла;
	
	ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения);
	
	// Если номер в мобильном приложении не соответствует номеру заказа в центральной базе,
	// передаем назад для синхронизации номеров.
	Если ОбъектXDTO.name = Объект.Номер Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьРасходнаяНакладная()

Функция НайтиСоздатьПриходнаяНакладная(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.ПриходнаяНакладная.ПустаяСсылка();
	КонецЕсли;
	
	Объект = СоздатьДокумент("ПриходнаяНакладная", ОбъектXDTO);
	Если НЕ Объект.ЭтоНовый() Тогда // Чтобы не испортить данные не перезаполняем документ.
		ПрерватьЗаполнение = ОбменМобильноеПриложениеОбщее.ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, "Запасы")
			ИЛИ ОбменМобильноеПриложениеОбщее.ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, "Расходы");
		Если ПрерватьЗаполнение Тогда
			Возврат Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	
	ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнойОтветственный"
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Контрагент = НайтиСоздатьКонтрагенты(УзелОбмена, ОбъектXDTO.Supplier, ЭтоНовыйОбмен);
	Если Объект.Контрагент <> Контрагент Тогда
		Объект.Контрагент = Контрагент;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ДоговорПоУмолчанию = ПолучитьСоздатьДоговорПоУмолчанию(
			Объект.Ссылка,
			Объект.Контрагент,
			Объект.Организация,
			Объект.ВидОперации,
			Перечисления.ВидыДоговоров.СПоставщиком
		);
		Объект.Договор = ДоговорПоУмолчанию;
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КурсыВалютСрезПоследних.Курс,
			|	КурсыВалютСрезПоследних.Кратность
			|ИЗ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютСрезПоследних"
		);
		Запрос.УстановитьПараметр("Период", Объект.Дата);
		Запрос.УстановитьПараметр("Валюта", Объект.Договор.ВалютаРасчетов);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.Курс = Выборка.Курс;
			Объект.Кратность = Выборка.Кратность;
		Иначе
			Объект.Курс = 1;
			Объект.Кратность = 1;
		КонецЕсли;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		Объект.СтруктурнаяЕдиница = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнойСклад"
		);
		Объект.СтруктурнаяЕдиница = ?(ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница), Объект.СтруктурнаяЕдиница, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда
		Объект.ВидЦенКонтрагента = Объект.Договор.ВидЦенКонтрагента;
		Объект.ВидЦенКонтрагента = ?(ЗначениеЗаполнено(Объект.ВидЦенКонтрагента), Объект.ВидЦенКонтрагента, Справочники.ВидыЦенКонтрагентов.ВидЦенКонтрагентаПоУмолчанию(Объект.Контрагент));
		Объект.СуммаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ВидЦенКонтрагента), Объект.ВидЦенКонтрагента.ЦенаВключаетНДС, Истина);
		
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ПоложениеЗаказаПоставщикуВДокументахПоступления");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Если Объект.ПоложениеЗаказаПоставщику <> ЗначениеНастройки Тогда
				Объект.ПоложениеЗаказаПоставщику = ЗначениеНастройки;
			КонецЕсли;
		Иначе
			Объект.ПоложениеЗаказаПоставщику = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
		
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() > 0 Тогда
		Объект.Запасы.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Расходы.Количество() > 0 Тогда
		Объект.Расходы.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ОбъектXDTO.Items <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Items.Item Цикл
			Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				НоваяСтрока = Объект.Расходы.Добавить();
			Иначе
				НоваяСтрока = Объект.Запасы.Добавить();
			КонецЕсли;
			НоваяСтрока.Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Цена = ТекСтрока.Price;
			НоваяСтрока.Количество = ТекСтрока.Quantity;
			НоваяСтрока.Сумма = ТекСтрока.Total;
			РассчитатьСуммыВСтрокеТабличнойЧасти(Объект, НоваяСтрока);
			НужноЗаписыватьОбъект = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("Comment") <> Неопределено
		И Объект.Комментарий <> ОбъектXDTO.Comment Тогда
		Объект.Комментарий = ОбъектXDTO.Comment;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения);
	
	// Если номер в мобильном приложении не соответствует номеру заказа в центральной базе,
	// передаем назад для синхронизации номеров.
	Если ОбъектXDTO.name = Объект.Номер Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьПриходнаяНакладная()

Функция НайтиСоздатьСборкаЗапасов(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.СборкаЗапасов.ПустаяСсылка();
	КонецЕсли;

	Объект = СоздатьДокумент("СборкаЗапасов", ОбъектXDTO);
	Если НЕ Объект.ЭтоНовый() Тогда // Чтобы не испортить данные не перезаполняем документ.
		ПрерватьЗаполнение = ОбменМобильноеПриложениеОбщее.ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, "Продукция")
			ИЛИ ОбменМобильноеПриложениеОбщее.ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, "Запасы");
		Если ПрерватьЗаполнение Тогда
			Возврат Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	
	ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	СтруктурнаяЕдиницаПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Объект.Автор,
		"ОсновнойСклад"
	);
	СтруктурнаяЕдиницаПоУмолчанию = ?(ЗначениеЗаполнено(СтруктурнаяЕдиницаПоУмолчанию), СтруктурнаяЕдиницаПоУмолчанию, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		Объект.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоУмолчанию;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродукции) Тогда
		Объект.СтруктурнаяЕдиницаПродукции = СтруктурнаяЕдиницаПоУмолчанию;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаЗапасов) Тогда
		Объект.СтруктурнаяЕдиницаЗапасов = СтруктурнаяЕдиницаПоУмолчанию;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаОтходов) Тогда
		Объект.СтруктурнаяЕдиницаОтходов = СтруктурнаяЕдиницаПоУмолчанию;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Продукция.Количество() > 0 Тогда
		Объект.Продукция.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
		
	Если Объект.Запасы.Количество() > 0 Тогда
		Объект.Запасы.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ОбъектXDTO.Products <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Products.Item Цикл
			Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			НоваяСтрока = Объект.Продукция.Добавить();
			НоваяСтрока.Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрока.Quantity;
			НужноЗаписыватьОбъект = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектXDTO.Materials <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Materials.Item Цикл
			Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрока.Quantity;
			НужноЗаписыватьОбъект = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("Comment") <> Неопределено
		И Объект.Комментарий <> ОбъектXDTO.Comment Тогда
		Объект.Комментарий = ОбъектXDTO.Comment;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения);
	
	// Если номер в мобильном приложении не соответствует номеру заказа в центральной базе,
	// передаем назад для синхронизации номеров.
	Если ОбъектXDTO.name = Объект.Номер Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьПриходнаяНакладная()

Функция НайтиСоздатьЧекККМ(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.ЧекККМ.ПустаяСсылка();
	КонецЕсли;
	
	Объект = СоздатьДокумент("ЧекККМ", ОбъектXDTO);
	
	Если НЕ Объект.ЭтоНовый() Тогда // Чтобы не испортить данные не перезаполняем документ.
		ПрерватьЗаполнение = ОбменМобильноеПриложениеОбщее.ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, "Запасы");
		Если ПрерватьЗаполнение Тогда
			Возврат Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	
	ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнойОтветственный"
		);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	КассоваяСмена = НайтиСоздатьОтчетОРозничныхПродажах(УзелОбмена, ОбъектXDTO.RetailSalesReport, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
	Если Объект.КассоваяСмена <> КассоваяСмена Тогда
		Объект.КассоваяСмена = КассоваяСмена;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектXDTO.CheckNumber) Тогда
		НомерЧекаККМ = Число(ОбъектXDTO.CheckNumber);
	Иначе
		НомерЧекаККМ = 0;
	КонецЕсли;
	
	Если Объект.НомерЧекаККМ <> НомерЧекаККМ Тогда
		Объект.НомерЧекаККМ = НомерЧекаККМ;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	СтатусЧекаККМ = ?(Объект.НомерЧекаККМ = 0, Перечисления.СтатусыЧековККМ.ЧекНеПробит, Перечисления.СтатусыЧековККМ.Пробит);
	Если Объект.Статус <> СтатусЧекаККМ Тогда
		Объект.Статус = СтатусЧекаККМ;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектXDTO.ShiftNumber) Тогда
		НомерСменыККМ = Число(ОбъектXDTO.ShiftNumber);
	Иначе
		НомерСменыККМ = 0;
	КонецЕсли;
	
	Если Объект.НомерСменыККМ <> НомерСменыККМ Тогда
		Объект.НомерСменыККМ = НомерСменыККМ;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.ПолученоНаличными <> ОбъектXDTO.InCashTotal Тогда
		Объект.ПолученоНаличными = ОбъектXDTO.InCashTotal;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	КассаККМ = НайтиСоздатьКассаККМ(УзелОбмена, ОбъектXDTO.CashDesk, ЭтоНовыйОбмен);
	Если Объект.КассаККМ <> КассаККМ Тогда
		Объект.КассаККМ = КассаККМ;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		КассаККМ = ОбменМобильноеПриложениеОбщее.ПолучитьКассуККМУзла(УзелОбмена);
		Объект.КассаККМ = КассаККМ;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ)
		И НужноЗаписыватьОбъект Тогда
		Объект.Подразделение = Объект.КассаККМ.Подразделение;
		Объект.СтруктурнаяЕдиница = Объект.КассаККМ.СтруктурнаяЕдиница;
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда
		Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
			Объект.ВидЦен = Объект.СтруктурнаяЕдиница.РозничныйВидЦен;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			Объект.ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				Объект.Автор,
				"ОсновнойВидЦенПродажи"
			);
		КонецЕсли;
		Объект.ВидЦен = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен, Справочники.ВидыЦен.Оптовая);
		Объект.СуммаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен.ЦенаВключаетНДС, Истина);
		
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() > 0 Тогда
		Объект.Запасы.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	Если ОбъектXDTO.Items <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Items.Item Цикл
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Цена = ТекСтрока.Price;
			НоваяСтрока.Количество = ТекСтрока.Quantity;
			НоваяСтрока.Сумма = ТекСтрока.Total;
			РассчитатьСуммыВСтрокеТабличнойЧасти(Объект, НоваяСтрока);
			НужноЗаписыватьОбъект = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("Comment") <> Неопределено
		И Объект.Комментарий <> ОбъектXDTO.Comment Тогда
		Объект.Комментарий = ОбъектXDTO.Comment;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения);
	
	// Если номер в мобильном приложении не соответствует номеру заказа в центральной базе,
	// передаем назад для синхронизации номеров.
	Если ОбъектXDTO.name = Объект.Номер Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьЧекККМ()

Функция НайтиСоздатьЧекККМНаВозврат(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.ЧекККМВозврат.ПустаяСсылка();
	КонецЕсли;
	
	Объект = СоздатьДокумент("ЧекККМВозврат", ОбъектXDTO);
	
	Если НЕ Объект.ЭтоНовый() Тогда // Чтобы не испортить данные не перезаполняем документ.
		ПрерватьЗаполнение = ОбменМобильноеПриложениеОбщее.ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, "Запасы");
		Если ПрерватьЗаполнение Тогда
			Возврат Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	
	ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнойОтветственный"
		);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	КассоваяСмена = НайтиСоздатьОтчетОРозничныхПродажах(УзелОбмена, ОбъектXDTO.RetailSalesReport, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
	Если Объект.КассоваяСмена <> КассоваяСмена Тогда
		Объект.КассоваяСмена = КассоваяСмена;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектXDTO.CheckNumber) Тогда
		НомерЧекаККМ = Число(ОбъектXDTO.CheckNumber);
	Иначе
		НомерЧекаККМ = 0;
	КонецЕсли;
	
	Если Объект.НомерЧекаККМ <> НомерЧекаККМ Тогда
		Объект.НомерЧекаККМ = НомерЧекаККМ;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектXDTO.ShiftNumber) Тогда
		НомерСменыККМ = Число(ОбъектXDTO.ShiftNumber);
	Иначе
		НомерСменыККМ = 0;
	КонецЕсли;
	
	Если Объект.НомерСменыККМ <> НомерСменыККМ Тогда
		Объект.НомерСменыККМ = НомерСменыККМ;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	КассаККМ = НайтиСоздатьКассаККМ(УзелОбмена, ОбъектXDTO.CashDesk, ЭтоНовыйОбмен);
	Если Объект.КассаККМ <> КассаККМ Тогда
		Объект.КассаККМ = КассаККМ;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		КассаККМ = ОбменМобильноеПриложениеОбщее.ПолучитьКассуККМУзла(УзелОбмена);
		Объект.КассаККМ = КассаККМ;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ)
		И НужноЗаписыватьОбъект Тогда
		Объект.Подразделение = Объект.КассаККМ.Подразделение;
		Объект.СтруктурнаяЕдиница = Объект.КассаККМ.СтруктурнаяЕдиница;
	КонецЕсли;
	
	ЧекККМ = НайтиСоздатьЧекККМ(УзелОбмена, ОбъектXDTO.CashReceipt, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен);
	
	Если Объект.ЧекККМ <> ЧекККМ Тогда
		Объект.ЧекККМ = ЧекККМ;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда
		Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
			Объект.ВидЦен = Объект.СтруктурнаяЕдиница.РозничныйВидЦен;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			Объект.ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				Объект.Автор,
				"ОсновнойВидЦенПродажи"
			);
		КонецЕсли;
		Объект.ВидЦен = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен, Справочники.ВидыЦен.Оптовая);
		Объект.СуммаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен.ЦенаВключаетНДС, Истина);
		
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() > 0 Тогда
		Объект.Запасы.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	Если ОбъектXDTO.Items <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Items.Item Цикл
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Цена = ТекСтрока.Price;
			НоваяСтрока.Количество = ТекСтрока.Quantity;
			НоваяСтрока.Сумма = ТекСтрока.Total;
			РассчитатьСуммыВСтрокеТабличнойЧасти(Объект, НоваяСтрока);
			НужноЗаписыватьОбъект = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("Comment") <> Неопределено
		И Объект.Комментарий <> ОбъектXDTO.Comment Тогда
		Объект.Комментарий = ОбъектXDTO.Comment;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения);
	
	// Если номер в мобильном приложении не соответствует номеру заказа в центральной базе,
	// передаем назад для синхронизации номеров.
	Если ОбъектXDTO.name = Объект.Номер Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьЧекККМНаВозврат()

Функция НайтиСоздатьОтчетОРозничныхПродажах(УзелОбмена, ОбъектXDTO, ДокументыДляОтложенногоПроведения, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	КонецЕсли;
	
	Объект = СоздатьДокумент("ОтчетОРозничныхПродажах", ОбъектXDTO);
	
	Если НЕ Объект.ЭтоНовый() Тогда // Чтобы не испортить данные не перезаполняем документ.
		ПрерватьЗаполнение = ОбменМобильноеПриложениеОбщее.ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, "Запасы");
		Если ПрерватьЗаполнение Тогда
			Возврат Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	НужноЗаписыватьОбъект = Ложь;
	НужноЗаписыватьКассовуюСмену = Ложь;
	
	ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект);
	
	КассаККМ = НайтиСоздатьКассаККМ(УзелОбмена, ОбъектXDTO.CashDesk, ЭтоНовыйОбмен);
	Если Объект.КассаККМ <> КассаККМ Тогда
		Объект.КассаККМ = КассаККМ;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		КассаККМ = ОбменМобильноеПриложениеОбщее.ПолучитьКассуККМУзла(УзелОбмена);
		Объект.КассаККМ = КассаККМ;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ)
		И НужноЗаписыватьОбъект Тогда
		Объект.Подразделение = Объект.КассаККМ.Подразделение;
		Объект.СтруктурнаяЕдиница = Объект.КассаККМ.СтруктурнаяЕдиница;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.КассоваяСмена) Тогда
		КассоваяСменаОбъект = Объект.КассоваяСмена.ПолучитьОбъект();
	Иначе
		КассоваяСменаОбъект = Документы.КассоваяСмена.СоздатьДокумент();
		РеквизитыКассыККМ = Справочники.КассыККМ.ПолучитьРеквизитыКассыККМ(Объект.КассаККМ);
		ЗаполнитьЗначенияСвойств(КассоваяСменаОбъект, РеквизитыКассыККМ);
		КассоваяСменаОбъект.Дата = Объект.Дата;
		НужноЗаписыватьКассовуюСмену = Истина;
	КонецЕсли;
	
	Если ОбъектXDTO.Status = "Open" Тогда
		СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта;
	Иначе
		СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Закрыта;
	КонецЕсли;
	
	Если Объект.СтатусКассовойСмены <> СтатусКассовойСмены
		И Объект.СтатусКассовойСмены <> Перечисления.СтатусыОтчетаОРозничныхПродажах.ЗакрытаЧекиЗаархивированы Тогда
		Объект.СтатусКассовойСмены = СтатусКассовойСмены;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта Тогда
		СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта;
	Иначе
		СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Закрыта;
	КонецЕсли;
	
	Если КассоваяСменаОбъект.Статус <> СтатусКассовойСмены Тогда
		КассоваяСменаОбъект.Статус = СтатусКассовойСмены;
		НужноЗаписыватьКассовуюСмену = Истина;
	КонецЕсли;
	
	Если Объект.НачалоКассовойСмены <> ОбъектXDTO.DateBegin Тогда
		Объект.НачалоКассовойСмены = ОбъектXDTO.DateBegin;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если КассоваяСменаОбъект.НачалоКассовойСмены <> Объект.НачалоКассовойСмены Тогда
		КассоваяСменаОбъект.НачалоКассовойСмены = Объект.НачалоКассовойСмены;
		НужноЗаписыватьКассовуюСмену = Истина;
	КонецЕсли;
	
	Если Объект.ОкончаниеКассовойСмены <> ОбъектXDTO.DateEnd Тогда
		Объект.ОкончаниеКассовойСмены = ОбъектXDTO.DateEnd;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если КассоваяСменаОбъект.ОкончаниеКассовойСмены <> Объект.ОкончаниеКассовойСмены Тогда
		КассоваяСменаОбъект.ОкончаниеКассовойСмены = Объект.ОкончаниеКассовойСмены;
		НужноЗаписыватьКассовуюСмену = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Статья) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнойОтветственный"
		);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда
		Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
			Объект.ВидЦен = Объект.СтруктурнаяЕдиница.РозничныйВидЦен;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			Объект.ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				Объект.Автор,
				"ОсновнойВидЦенПродажи"
			);
		КонецЕсли;
		Объект.ВидЦен = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен, Справочники.ВидыЦен.Оптовая);
		Объект.СуммаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ВидЦен), Объект.ВидЦен.ЦенаВключаетНДС, Истина);
		
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() > 0 Тогда
		Объект.Запасы.Очистить();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;

	Если ОбъектXDTO.Items <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Items.Item Цикл
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ТекСтрока.Nomenclature, ЭтоНовыйОбмен);
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Цена = ТекСтрока.Price;
			НоваяСтрока.Количество = ТекСтрока.Quantity;
			НоваяСтрока.Сумма = ТекСтрока.Total;
			РассчитатьСуммыВСтрокеТабличнойЧасти(Объект, НоваяСтрока);
			НужноЗаписыватьОбъект = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектXDTO.Свойства().Получить("Comment") <> Неопределено
		И Объект.Комментарий <> ОбъектXDTO.Comment Тогда
		Объект.Комментарий = ОбъектXDTO.Comment;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НужноЗаписыватьКассовуюСмену Тогда
		Попытка
			КассоваяСменаОбъект.ДополнительныеСвойства.Вставить("НеСоздаватьОтчетОРозничныхПродажах", Истина);
			КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Если Объект.КассоваяСмена <> КассоваяСменаОбъект.Ссылка Тогда
				Объект.КассоваяСмена = КассоваяСменаОбъект.Ссылка;
				НужноЗаписыватьОбъект = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения);
	
	// Если номер в мобильном приложении не соответствует номеру заказа в центральной базе,
	// передаем назад для синхронизации номеров.
	Если ОбъектXDTO.name = Объект.Номер Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьОтчетОРозничныхПродажах()

#КонецОбласти

#Область РегистрыСведений

Процедура НайтиСоздатьШтрихкодНоменклатуры(Номенклатура, Штрихкод)
	
	ШтрихкодНоменклатуры = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодПоНоменклатуре(Номенклатура);
	
	Если Штрихкод = ШтрихкодНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШтрихкодНоменклатуры) Тогда
		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Штрихкод.Установить(ШтрихкодНоменклатуры);
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Штрихкод.Установить(Штрихкод);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Штрихкод = Штрихкод;
		НоваяЗапись.Номенклатура = Номенклатура;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры // НайтиСоздатьШтрихкодНоменклатуры()

Функция ЗагрузитьЦены(УзелОбмена, ОбъектXDTO, ЭтоНовыйОбмен)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Пользователь = Пользователи.ТекущийПользователь();
	ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователь,
		"ОсновнойВидЦенПродажи"
	);
		
	Если Не ЗначениеЗаполнено(ВидЦен) Тогда
		ВидЦен = Справочники.ВидыЦен.Оптовая;
	КонецЕсли;
		
	Номенклатура = НайтиСоздатьНоменклатура(УзелОбмена, ОбъектXDTO.Nomenclature, ЭтоНовыйОбмен);
	
	НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ОбъектXDTO.Date);
	НаборЗаписей.Отбор.ВидЦен.Установить(ВидЦен);
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Отбор.Характеристика.Установить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = ОбъектXDTO.Date;
	НоваяЗапись.ВидЦен = ВидЦен;
	НоваяЗапись.Номенклатура = Номенклатура;
	НоваяЗапись.Цена = ОбъектXDTO.Price;
	НоваяЗапись.Актуальность = Истина;
	НоваяЗапись.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
	НоваяЗапись.Автор = Пользователь;
	
	НаборЗаписей.Записать();
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, НаборЗаписей);
	
КонецФункции // ЗагрузитьЦены()

#КонецОбласти

#Область Перечисления

Функция НайтиТипыНоменклатуры(ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если ОбъектXDTO = "Product" Тогда
		Объект = Перечисления.ТипыНоменклатуры.Запас;
	Иначе
		Объект = Перечисления.ТипыНоменклатуры.Услуга;
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции // НайтиТипыНоменклатуры()

Функция НайтиСостоянияЗаказовПокупателей(ОбъектXDTO, ВидЗаказа)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.СостоянияЗаказовПокупателей.ПустаяСсылка();
	КонецЕсли;
	
	Если ОбъектXDTO = "Complete" Тогда
		Объект = Справочники.СостоянияЗаказовПокупателей.Завершен;
	Иначе
		Объект = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа);
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции // НайтиСостоянияЗаказовПокупателей()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьДокумент(ИмяДокумента, ОбъектXDTO)
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Документы[ИмяДокумента].ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы[ИмяДокумента].СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции // СоздатьДокумент()

Процедура ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, ДокументыДляОтложенногоПроведения)
	
	Если НужноЗаписыватьОбъект Тогда
		
		Объект.ПометкаУдаления = ОбъектXDTO.DeletionMark;
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если Не ОбъектXDTO.Posted Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;
		
		Если Объект.ПометкаУдаления
			И (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
			
			Объект.ПометкаУдаления = Ложь;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
			
			Объект.УстановитьНовыйНомер();
			
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Попытка
			
			Если Не Объект.Проведен Тогда
				Объект.Записать();
			Иначе
				// отменяем проведение документа
				Объект.Проведен = Ложь;
				Объект.Записать();
				УдалитьДвиженияУДокумента(Объект);
			КонецЕсли;
			
		Исключение
			
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Если ДокументыДляОтложенногоПроведения.Найти(Объект.Ссылка, "ДокументСсылка") = Неопределено Тогда
				СтрокаТаблицы = ДокументыДляОтложенногоПроведения.Добавить();
				СтрокаТаблицы.ДокументСсылка = Объект.Ссылка;
				СтрокаТаблицы.ДокументТип = Объект.Метаданные().Имя;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьДокумент()

Процедура ЗаполнитьОсновныеРеквизитыДокумента(Объект, ОбъектXDTO, НужноЗаписыватьОбъект)
	
	Если Объект.Дата <> ОбъектXDTO.Date Тогда
		Объект.Дата = ОбъектXDTO.Date;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.СборкаЗапасов")
		И Объект.СуммаДокумента <> ОбъектXDTO.Total Тогда
		Объект.СуммаДокумента = ОбъектXDTO.Total;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
		Объект.Автор = Пользователи.ТекущийПользователь();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.Автор,
			"ОсновнаяОрганизация"
		);
		Объект.Организация = ?(ЗначениеЗаполнено(ОсновнаяОрганизация), ОсновнаяОрганизация, Справочники.Организации.ОсновнаяОрганизация);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.СборкаЗапасов")
		И НЕ ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
		Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация, , Объект.Дата);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОсновныеРеквизитыДокумента()

Процедура УдалитьДвиженияУДокумента(ДокументОбъект)
	
	МассивОбрабатываемыхСтрокТаблицыДвижений = Новый Массив();
	
	// получение списка регистров, по которым существуют движения
	ТаблицаДвижений = ОпределитьНаличиеДвиженийПоДокументу(ДокументОбъект.Ссылка);
	ТаблицаДвижений.Колонки.Добавить("НаборЗаписей");
	ТаблицаДвижений.Колонки.Добавить("БезусловноеУдаление", Новый ОписаниеТипов("Булево"));
		
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		// Имя регистра передается как значение, полученное с помощью
		// функции ПолноеИмя() метаданных регистра
		ПозицияТочки = СтрНайти(СтрокаДвижения.Имя, ".");
		ТипРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки + 1));

		МассивОбрабатываемыхСтрокТаблицыДвижений.Добавить(СтрокаДвижения);
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			МетаданныеНабора = Метаданные.РегистрыНакопления[ИмяРегистра];
			Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
			МетаданныеНабора = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
			Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			МетаданныеНабора = Метаданные.РегистрыСведений[ИмяРегистра];
			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			МетаданныеНабора = Метаданные.РегистрыРасчета[ИмяРегистра];
			Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
			
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Изменение", Набор.Метаданные()) Тогда
			// отсутствуют права на всю таблицу регистра
			ВызватьИсключение "Нарушение прав доступа: " + СтрокаДвижения.Имя;
			Возврат;
		КонецЕсли;

		Набор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);

		// Набор не записывается сразу, чтобы не откатывать транзакцию, если впоследствии
		// выяснится, что на один из регистров не хватает прав.
		СтрокаДвижения.НаборЗаписей = Набор;
		
	КонецЦикла;	
	
	Для Каждого СтрокаДвижения Из МассивОбрабатываемыхСтрокТаблицыДвижений Цикл		
		Попытка
			СтрокаДвижения.НаборЗаписей.Записать();
		Исключение
			// возможно «сработал» RLS или подсистема даты запрета изменения
			ВызватьИсключение "Операция не выполнена: " + СтрокаДвижения.Имя + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЦикла;
	
	ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект);
	
КонецПроцедуры // УдалитьДвиженияУДокумента()

Процедура ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект)
		
	Для каждого Движение Из ДокументОбъект.Движения Цикл
		Если Движение.Количество() > 0 Тогда
			Движение.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОчисткаКоллекцииДвиженийДокумента()

Функция ОпределитьНаличиеДвиженийПоДокументу(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "";
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// Если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// При выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции // ОпределитьНаличиеДвиженийПоДокументу()

Функция ПометитьОбъектНаУдаление(УзелОбмена, ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	
	Если ОбъектXDTO.Type = "CatContractors" Тогда
		Возврат Неопределено;
	ИначеЕсли ОбъектXDTO.Type = "CatItems" Тогда
		Возврат Неопределено;
	ИначеЕсли ОбъектXDTO.Type = "CatStructuralUnit" Тогда
		Возврат Неопределено;
	ИначеЕсли ОбъектXDTO.Type = "DocOrders" Тогда
		Ссылка = Документы.ЗаказПокупателя.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Type = "DocInvoice" Тогда
		Ссылка = Документы.РасходнаяНакладная.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Type = "DocPurshareInvoice" Тогда
		Ссылка = Документы.ПриходнаяНакладная.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Type = "DocIncomingPayment" Тогда
		Ссылка = Документы.ПоступлениеВКассу.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Type = "DocOutgoingPayment" Тогда
		Ссылка = Документы.РасходИзКассы.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Type = "DocProduction" Тогда
		Ссылка = Документы.СборкаЗапасов.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Type = "DocCashReceipt" Тогда
		Ссылка = Документы.ЧекККМ.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Type = "DocCashReceiptReturn" Тогда
		Ссылка = Документы.ЧекККМВозврат.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Type = "DocRetailSalesReport" Тогда
		Ссылка = Документы.ОтчетОРозничныхПродажах.ПолучитьСсылку(Идентификатор);
	КонецЕсли;
	
	Попытка
		Объект = Ссылка.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(Истина);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	Исключение
	КонецПопытки;
	
КонецФункции // ПометитьОбъектНаУдаление()

Процедура ВыполнитьОтложенноеПроведениеДокументов(УзелОбмена, ДокументыДляОтложенногоПроведения)

	ДокументыДляОтложенногоПроведения.Сортировать("ДокументТип");
	
	Для Каждого СтрокаТаблицы Из ДокументыДляОтложенногоПроведения Цикл
		
		Если СтрокаТаблицы.ДокументСсылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = СтрокаТаблицы.ДокументСсылка.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УдалятьРегистрациюИзменений = Не ПланыОбмена.ИзменениеЗарегистрировано(УзелОбмена, Объект);
		Объект.ОбменДанными.Загрузка = Ложь;
		
		Попытка
			
			Объект.ПроверитьЗаполнение();
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			
			Если УдалятьРегистрациюИзменений Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры // ВыполнитьОтложенноеПроведениеДокументов()

Функция ПолучитьСоздатьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации, ВидДоговора)
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Если НЕ ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
		ДоговорПоУмолчанию = СоздатьДоговорПоУмолчанию(Контрагент, Организация, ВидДоговора);
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции // ПолучитьДоговорПоУмолчанию()

Функция СоздатьДоговорПоУмолчанию(Контрагент, Организация, ВидДоговора)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	НовыйДоговор.ВалютаРасчетов = Константы.НациональнаяВалюта.Получить();
	НовыйДоговор.Организация = Организация;
	НовыйДоговор.ВидДоговора = ВидДоговора;
	НовыйДоговор.ВидЦен = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
	НовыйДоговор.Владелец = Контрагент;
	НовыйДоговор.СрокОплатыПоставщику = Константы.СрокОплатыПоставщику.Получить();
	НовыйДоговор.СрокОплатыПокупателя = Константы.СрокОплатыПокупателя.Получить();
	
	// Заполним вид цен контрагента
	НовыйВидЦенКонтрагентов = Справочники.ВидыЦенКонтрагентов.ВидЦенКонтрагентаПоУмолчанию(Контрагент);
	
	Если НЕ ЗначениеЗаполнено(НовыйВидЦенКонтрагентов) Тогда 
		
		НовыйВидЦенКонтрагентов = Справочники.ВидыЦенКонтрагентов.НайтиЛюбойПервыйВидЦенКонтрагента(Контрагент);
		
		Если НЕ ЗначениеЗаполнено(НовыйВидЦенКонтрагентов) Тогда
			
			НовыйВидЦенКонтрагентов = Справочники.ВидыЦенКонтрагентов.СоздатьВидЦенКонтрагента(
				Контрагент,
				НовыйДоговор.ВалютаРасчетов
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйДоговор.ВидЦенКонтрагента = НовыйВидЦенКонтрагентов;
	
	Если ПустаяСтрока(НовыйДоговор.Наименование) Тогда
		НовыйДоговор.Наименование = ШаблоныНаименований.НаименованиеДоговораПоУмолчанию(НовыйДоговор);
	КонецЕсли;
	
	НовыйДоговор.Записать();
	
	Справочники.ДоговорыКонтрагентов.ЗаписатьДоговорПоУмолчанию(НовыйДоговор);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НовыйДоговор.Ссылка;
	
КонецФункции // СоздатьДоговорПоУмолчанию()

Процедура РассчитатьСуммыВСтрокеТабличнойЧасти(Объект, НоваяСтрока)
	
	Если Объект.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Номенклатура.ВидСтавкиНДС) Тогда
		НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрока.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	Иначе
		НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	КонецЕсли;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
	НоваяСтрока.СуммаНДС = ?(
		Объект.СуммаВключаетНДС,
		НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
		НоваяСтрока.Сумма * СтавкаНДС / 100
	);
	НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

#КонецОбласти