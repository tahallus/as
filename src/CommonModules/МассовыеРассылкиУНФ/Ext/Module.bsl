
#Область ПрограммныйИнтерфейс

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ВыполнениеМассовойРассылки;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик регламентного задания ЗаданиеОбработатьОчередьРассылок
//
Процедура ЗаданиеОбработатьОчередьРассылок() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ОчередьРассылок");
		БлокировкаДанных.Заблокировать();
		
		ПорцияСообщений = ПодготовитьПорциюСообщений(100);
		
		Для Каждого ТекСтрока Из ПорцияСообщений Цикл
			РегистрыСведений.ОчередьРассылок.ЗарегистрироватьНачалоОтправки(ТекСтрока.МассоваяРассылка, ТекСтрока.КакСвязаться);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
		
	КонецПопытки;
	
	РазослатьПорциюСообщений(ПорцияСообщений);
	
	РассылкиДляСозданияСобытий = РассылкиДляСозданияСобытий();
	СоздатьСобытияПоОтправленнымРассылкам(РассылкиДляСозданияСобытий);
	
	ОтправленныеРассылки = ПолностьюОтправленныеМассовыеРассылки();
	УстановитьСостояниеОтправленныхРассылок(ОтправленныеРассылки);
	
	РегистрыСведений.ОчередьРассылок.ОтключитьНевостребованноеЗадание();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьПорциюСообщений(Знач РазмерПорции)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПорцииСообщений(РазмерПорции);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ТекстЗапросаПорцииСообщений(Знач РазмерПорции)
	
	Результат = 
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	ОчередьРассылок.МассоваяРассылка КАК МассоваяРассылка,
	|	ОчередьРассылок.КакСвязаться КАК КакСвязаться,
	|	ОчередьРассылок.СпособОтправки КАК СпособОтправки,
	|	ОчередьРассылок.ИдентификаторСообщенияSMS КАК ИдентификаторСообщенияSMS,
	|	ОчередьРассылок.СостояниеСообщенияSMS КАК СостояниеСообщенияSMS
	|ИЗ
	|	РегистрСведений.ОчередьРассылок КАК ОчередьРассылок
	|ГДЕ
	|	ОчередьРассылок.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиРассылки.Отправлено)
	|	И ОчередьРассылок.ПопытокОсталось > 0
	|	И ОчередьРассылок.СледующаяПопытка < &ТекущаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередьРассылок.ПопытокОсталось УБЫВ";
	
	КонструкцияВыбратьПервые = СтрШаблон("ВЫБРАТЬ ПЕРВЫЕ %1", Формат(РазмерПорции, "ЧДЦ=0; ЧГ="));
	
	Результат = СтрЗаменить(
	Результат,
	"ВЫБРАТЬ ПЕРВЫЕ 100",
	КонструкцияВыбратьПервые);
	
	Возврат Результат;
	
КонецФункции

Процедура РазослатьПорциюСообщений(Знач ПорцияСообщений)
	
	Для Каждого ТекСтрока Из ПорцияСообщений Цикл
		
		ПараметрыРассылки = НовыеПараметрыРассылки(
		ТекСтрока.СпособОтправки,
		ТекСтрока.МассоваяРассылка,
		ТекСтрока.КакСвязаться,
		ТекСтрока.ИдентификаторСообщенияSMS,
		ТекСтрока.СостояниеСообщенияSMS);
		
		РезультатОтправки = ОтправитьРассылку(ПараметрыРассылки);
		
		Если РезультатОтправки.Успех Тогда
			РегистрыСведений.ОчередьРассылок.ЗарегистрироватьУспешнуюОтправку(
			ТекСтрока.МассоваяРассылка,
			ТекСтрока.КакСвязаться,
			РезультатОтправки.Идентификаторы,
			РезультатОтправки.ИдентификаторСообщенияSMS,
			РезультатОтправки.СостояниеСообщенияSMS,
			РезультатОтправки.УчетнаяЗапись);
		Иначе
			РегистрыСведений.ОчередьРассылок.ЗарегистрироватьСообщениеОбОшибке(
			ТекСтрока.МассоваяРассылка,
			ТекСтрока.КакСвязаться,
			РезультатОтправки.СообщениеОбОшибке);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыеПараметрыРассылки(
	СпособОтправки,
	МассоваяРассылка,
	КакСвязаться,
	ИдентификаторСообщенияSMS,
	СостояниеСообщенияSMS)
	
	Результат = Новый Структура;
	Результат.Вставить("СпособОтправки", СпособОтправки);
	Результат.Вставить("МассоваяРассылка", МассоваяРассылка);
	Результат.Вставить("КакСвязаться", КакСвязаться);
	Результат.Вставить("ИдентификаторСообщенияSMS", ИдентификаторСообщенияSMS);
	Результат.Вставить("СостояниеСообщенияSMS", СостояниеСообщенияSMS);
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьРассылку(ПараметрыРассылки)
	
	Если ПараметрыРассылки.СпособОтправки = Перечисления.ВидыКаналовСвязи.Email Тогда
		Возврат ОтправитьРассылкуEmail(ПараметрыРассылки);
	КонецЕсли;
	
	Если ПараметрыРассылки.СпособОтправки = Перечисления.ВидыКаналовСвязи.SMS Тогда
		Возврат ОтправитьРассылкуSMS(ПараметрыРассылки);
	КонецЕсли;
	
	Результат = НовыйРезультатОтправкиРассылки();
	Результат.СообщениеОбОшибке = СтрШаблон(
	НСтр("ru='Для документа ""%1"" указан неизвестный способ отправки ""%2""'"),
	ПараметрыРассылки.МассоваяРассылка,
	ПараметрыРассылки.СпособОтправки);
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьРассылкуEmail(ПараметрыРассылки)
	
	Результат = НовыйРезультатОтправкиРассылки();
	
	ДанныеРассылки = ДанныеРассылки(ПараметрыРассылки.МассоваяРассылка, ПараметрыРассылки.КакСвязаться);
	Если Не ЗначениеЗаполнено(ДанныеРассылки) Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не удалось получить данные для почтовой рассылки.'");
		Возврат Результат;
	КонецЕсли;
	
	ВложенияКартинки = ДанныеРассылки.КартинкиHTML.Получить();
	Если ВложенияКартинки = Неопределено Тогда
		ВложенияКартинки = Новый Структура;
	КонецЕсли;
	
	Для Каждого ТекУчетнаяЗапись Из ДанныеРассылки.УчетныеЗаписи Цикл
		
		Если Не ЗначениеЗаполнено(ТекУчетнаяЗапись) Тогда
			Продолжить;
		КонецЕсли;
		
		ТемаПисьма = СодержаниеСПодставленнымиПараметрами(
		ДанныеРассылки.Тема,
		ДанныеРассылки.Контакт,
		ТекУчетнаяЗапись);
		
		ТелоПисьма = СодержаниеСПодставленнымиПараметрами(
		ДанныеРассылки.СодержаниеHTML,
		ДанныеРассылки.Контакт,
		ТекУчетнаяЗапись);
		
		ПараметрыПисьма = СформироватьПараметрыEmail(
		ДанныеРассылки,
		ТекУчетнаяЗапись,
		ТемаПисьма,
		ТелоПисьма,
		ВложенияКартинки);
		
		Результат.УчетнаяЗапись = ТекУчетнаяЗапись;
		
		Попытка
			
			Результат.Идентификаторы = ЭлектроннаяПочтаУНФ.ОтправитьПочтовоеСообщение(ПараметрыПисьма, ТекУчетнаяЗапись);
			
			РегистрыСведений.ИдентификаторыРассылок.ЗаписатьИдентификаторы(
			ТекУчетнаяЗапись,
			ДанныеРассылки.Ссылка,
			Результат.Идентификаторы.ИдентификаторыСообщений);
			
			Результат.Успех = Истина;
			
		Исключение
			
			Результат.СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Не удалось отправить E-mail получателю: %1, по причине: %2'"),
			ДанныеРассылки.Контакт,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
		Если Результат.Успех Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьРассылкуSMS(ПараметрыРассылки)
	
	Если СообщениеОтправленоРанее(ПараметрыРассылки) Тогда
		Возврат РезультатПроверкиСтатусаДоставки(ПараметрыРассылки);
	КонецЕсли;
	
	Результат = НовыйРезультатОтправкиРассылки();
	
	ДанныеРассылки = ДанныеРассылки(ПараметрыРассылки.МассоваяРассылка, ПараметрыРассылки.КакСвязаться);
	Если Не ЗначениеЗаполнено(ДанныеРассылки) Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не удалось получить данные для отправки SMS.'");
		Возврат Результат;
	КонецЕсли;
	
	НомерДляОтправки = МассовыеРассылкиУНФКлиентСервер.НомерДляОтправки(ПараметрыРассылки.КакСвязаться);
	Если Не ЗначениеЗаполнено(НомерДляОтправки) Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не указан номер для отправки SMS.'");
		Возврат Результат;
	КонецЕсли;
	
	ТекстSMS = СодержаниеСПодставленнымиПараметрами(
	ДанныеРассылки.Содержание,
	ДанныеРассылки.Контакт,
	Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка());
	
	РезультатОтправки = ОтправкаSMS.ОтправитьSMS(
	ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НомерДляОтправки),
	ТекстSMS,
	ДанныеРассылки.ИмяОтправителяSMS);
	
	Если ЗначениеЗаполнено(РезультатОтправки.ОписаниеОшибки) Тогда
		Результат.СообщениеОбОшибке = РезультатОтправки.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ОтправленноеСообщение Из РезультатОтправки.ОтправленныеСообщения Цикл
		Если СтрНайти(ОтправленноеСообщение.НомерПолучателя, НомерДляОтправки) > 0 Тогда
			Результат.ИдентификаторСообщенияSMS = ОтправленноеСообщение.ИдентификаторСообщения;
			СтатусДоставки = ОтправкаSMS.СтатусДоставки(Результат.ИдентификаторСообщенияSMS);
			Результат.СостояниеСообщенияSMS = СопоставитьСтатусДоставкиSMS(СтатусДоставки);
		КонецЕсли;
	КонецЦикла;
	
	Результат.Успех = Истина;
	
	Возврат Результат;
	
КонецФункции

Функция СообщениеОтправленоРанее(ПараметрыРассылки)
	
	Возврат ЗначениеЗаполнено(ПараметрыРассылки.ИдентификаторСообщенияSMS);
	
КонецФункции

Функция РезультатПроверкиСтатусаДоставки(ПараметрыРассылки)
	
	Результат = НовыйРезультатОтправкиРассылки();
	Результат.ИдентификаторСообщенияSMS = ПараметрыРассылки.ИдентификаторСообщенияSMS;
	СтатусДоставки = ОтправкаSMS.СтатусДоставки(Результат.ИдентификаторСообщенияSMS);
	Если СтатусДоставки <> "Ошибка" Тогда
		Результат.Успех = Истина;
		Результат.СостояниеСообщенияSMS = СопоставитьСтатусДоставкиSMS(СтатусДоставки);
	Иначе
		Результат.Успех = Ложь;
		Результат.СостояниеСообщенияSMS = ПараметрыРассылки.СостояниеСообщенияSMS;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Строки длиннее 120 символов делать не рекомендуется:
// поэтому здесь делегирование.
Функция СопоставитьСтатусДоставкиSMS(СтатусДоставки)
	
	Возврат УправлениеНебольшойФирмойВзаимодействия.СопоставитьСтатусДоставкиSMS(СтатусДоставки);
	
КонецФункции

Функция НовыйРезультатОтправкиРассылки()
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("Идентификаторы", Новый Структура);
	Результат.Вставить("ИдентификаторСообщенияSMS", "");
	Результат.Вставить("СостояниеСообщенияSMS", Перечисления.СостоянияСообщенияSMS.ПустаяСсылка());
	Результат.Вставить("УчетнаяЗапись", Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка());
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеРассылки(Знач МассоваяРассылка, Знач КакСвязаться)
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МассоваяРассылкаПолучатели.Контакт КАК Контакт,
	|	МассоваяРассылкаПолучатели.КакСвязаться КАК КакСвязаться,
	|	МассоваяРассылкаПолучатели.Ссылка КАК Ссылка,
	|	МассоваяРассылкаПолучатели.Ссылка.Тема КАК Тема,
	|	МассоваяРассылкаПолучатели.Ссылка.КартинкиHTML КАК КартинкиHTML,
	|	МассоваяРассылкаПолучатели.Ссылка.СодержаниеHTML КАК СодержаниеHTML,
	|	МассоваяРассылкаПолучатели.Ссылка.ИмяОтправителяSMS КАК ИмяОтправителяSMS,
	|	МассоваяРассылкаПолучатели.Ссылка.Содержание КАК Содержание,
	|	МассоваяРассылкаПолучатели.Ссылка.СоздаватьСобытия КАК СоздаватьСобытия,
	|	МассоваяРассылкаПолучатели.Ссылка.Автор КАК Автор,
	|	МассоваяРассылкаПолучатели.Ссылка.Ответственный КАК Ответственный,
	|	МассоваяРассылкаПолучатели.Ссылка.ИсточникПривлечения КАК ИсточникПривлечения
	|ИЗ
	|	Документ.МассоваяРассылка.Получатели КАК МассоваяРассылкаПолучатели
	|ГДЕ
	|	МассоваяРассылкаПолучатели.Ссылка = &МассоваяРассылка
	|	И МассоваяРассылкаПолучатели.КакСвязаться = &КакСвязаться
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МассоваяРассылка.УчетнаяЗапись КАК УчетнаяЗапись
	|ИЗ
	|	Документ.МассоваяРассылка КАК МассоваяРассылка
	|ГДЕ
	|	МассоваяРассылка.Ссылка = &МассоваяРассылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МассоваяРассылкаАльтернативныеУчетныеЗаписи.УчетнаяЗапись
	|ИЗ
	|	Документ.МассоваяРассылка.АльтернативныеУчетныеЗаписи КАК МассоваяРассылкаАльтернативныеУчетныеЗаписи
	|ГДЕ
	|	МассоваяРассылкаАльтернативныеУчетныеЗаписи.Ссылка = &МассоваяРассылка");
	Запрос.УстановитьПараметр("МассоваяРассылка", МассоваяРассылка);
	Запрос.УстановитьПараметр("КакСвязаться", КакСвязаться);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[0].Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ТекКолонка Из РезультатЗапроса[0].Колонки Цикл
		Результат.Вставить(ТекКолонка.Имя);
	КонецЦикла;
	
	ВыборкаПолучатели = РезультатЗапроса[0].Выбрать();
	ВыборкаПолучатели.Следующий();
	
	ЗаполнитьЗначенияСвойств(Результат, ВыборкаПолучатели);
	
	Результат.Вставить("УчетныеЗаписи", РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("УчетнаяЗапись"));
	
	Возврат Результат;
	
КонецФункции

Функция СодержаниеСПодставленнымиПараметрами(Содержание, Контакт, УчетнаяЗапись)
	
	Результат = Содержание;
	
	ДоступныеПараметры = Новый Массив;
	ДоступныеПараметры.Добавить(МассовыеРассылкиУНФКлиентСервер.ПараметрВремя());
	ДоступныеПараметры.Добавить(МассовыеРассылкиУНФКлиентСервер.ПараметрДата());
	ДоступныеПараметры.Добавить(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяИменительныйПадеж());
	ДоступныеПараметры.Добавить(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяРодительныйПадеж());
	ДоступныеПараметры.Добавить(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяДательныйПадеж());
	ДоступныеПараметры.Добавить(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяВинительныйПадеж());
	ДоступныеПараметры.Добавить(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяТворительныйПадеж());
	ДоступныеПараметры.Добавить(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяПредложныйПадеж());
	ДоступныеПараметры.Добавить(МассовыеРассылкиУНФКлиентСервер.ПараметрКакОтписатьсяОтРассылки());
	
	Для Каждого Параметр Из ДоступныеПараметры Цикл
		Если Найти(Результат, Параметр) = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеПараметра = ПолучитьЗначениеПараметра(Параметр, Контакт, УчетнаяЗапись);
		Результат = СтрЗаменить(Результат, Параметр, ЗначениеПараметра);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначениеПараметра(Параметр, Контакт, УчетнаяЗапись)
	
	Перем ЗначениеПараметра;
	
	Если Параметр = МассовыеРассылкиУНФКлиентСервер.ПараметрВремя() Тогда
		
		ЗначениеПараметра = Формат(ТекущаяДатаСеанса(), "ДФ=ЧЧ:мм");
		
	ИначеЕсли Параметр = МассовыеРассылкиУНФКлиентСервер.ПараметрДата() Тогда
		
		ЗначениеПараметра = Формат(ТекущаяДатаСеанса(), "ДЛФ=D");
		
	ИначеЕсли Лев(Параметр, 15) = Лев(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяИменительныйПадеж(), 15) Тогда
		
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
			ИмяКонтакта = Контакт.НаименованиеПолное;
		ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			ИмяКонтакта = Контакт.Наименование;
		Иначе
			ИмяКонтакта = Контакт;
		КонецЕсли;
		
		ИмяПадежа = Сред(Параметр, 18);
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ИмяПадежа, 2);
		Если ИмяПадежа = "именительный" Тогда
			Падеж = 1;
		ИначеЕсли ИмяПадежа = "родительный" Тогда
			Падеж = 2;
		ИначеЕсли ИмяПадежа = "дательный" Тогда
			Падеж = 3;
		ИначеЕсли ИмяПадежа = "винительный" Тогда
			Падеж = 4;
		ИначеЕсли ИмяПадежа = "творительный" Тогда
			Падеж = 5;
		ИначеЕсли ИмяПадежа = "предложный" Тогда
			Падеж = 6;
		Иначе
			Падеж = Неопределено;
		КонецЕсли;
		
		Если Падеж = Неопределено Тогда
			ЗначениеПараметра = ИмяКонтакта;
		Иначе
			ЗначениеПараметра = СклонениеПредставленийОбъектов.ПросклонятьФИО(ИмяКонтакта, Падеж);
		КонецЕсли;
		
	ИначеЕсли Параметр = МассовыеРассылкиУНФКлиентСервер.ПараметрКакОтписатьсяОтРассылки() Тогда
		
		ЗначениеПараметра = СтрШаблон(
		"<a href=""mailto:%1?subject=unsubscribe"">%2</a>",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "АдресЭлектроннойПочты"),
		НСтр("ru = 'Отписаться от рассылки'"));
		
	Иначе
		
		ЗначениеПараметра = "";
		
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Функция СформироватьПараметрыEmail(ДанныеРассылки, УчетнаяЗапись, ТемаПисьма, ТелоПисьма, ВложенияКартинки)
	
	Результат = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Пароль) Тогда
		Результат.Вставить("Пароль", Пароль);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеРассылки.КакСвязаться) Тогда
		Результат.Вставить("Кому", ДанныеРассылки.КакСвязаться);
	КонецЕсли;
	
	АдресПолучателяСкрытойКопии = УправлениеНебольшойФирмойВзаимодействия.ПолучитьАдресПолучателяСкрытойКопии();
	Если ЗначениеЗаполнено(АдресПолучателяСкрытойКопии) Тогда
		Результат.Вставить("СлепыеКопии", АдресПолучателяСкрытойКопии);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТемаПисьма) Тогда
		Результат.Вставить("Тема", Строка(ТемаПисьма));
	КонецЕсли;
	
	ВложенияПисьма = Новый Соответствие;
	
	Если ВложенияКартинки.Количество() = 0 Тогда
		Результат.Вставить("Тело", ТелоПисьма);
	Иначе
		ТелоПисьмаСКартинками = ТелоПисьма;
		УправлениеНебольшойФирмойВзаимодействия.ДобавитьВложенияКартинкиВПисьмо(
		ТелоПисьмаСКартинками,
		ВложенияПисьма,
		ВложенияКартинки);
		Результат.Вставить("Тело", ТелоПисьмаСКартинками);
	КонецЕсли;
	
	ДополнитьВложенияПрисоединеннымиФайлами(ВложенияПисьма, ДанныеРассылки);
	
	Результат.Вставить("ТипТекста", "HTML");
	Результат.Вставить("Вложения", ВложенияПисьма);
	
	Результат.Вставить("Заголовки", СлужебныеЗаголовки(УчетнаяЗапись));
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьВложенияПрисоединеннымиФайлами(ВложенияПисьма, ДанныеРассылки)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МассоваяРассылкаПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	МассоваяРассылкаПрисоединенныеФайлы.Наименование КАК Наименование,
	|	МассоваяРассылкаПрисоединенныеФайлы.Расширение КАК Расширение
	|ИЗ
	|	Справочник.МассоваяРассылкаПрисоединенныеФайлы КАК МассоваяРассылкаПрисоединенныеФайлы
	|ГДЕ
	|	МассоваяРассылкаПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И МассоваяРассылкаПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("ВладелецФайла", ДанныеРассылки.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОписаниеВложения = Новый Структура;
		ОписаниеВложения.Вставить("ДвоичныеДанные", РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Ссылка));
		ОписаниеВложения.Вставить("Идентификатор", "");
		ВложенияПисьма.Вставить(ПредставлениеВложения(Выборка.Наименование, Выборка.Расширение), ОписаниеВложения);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеВложения(Наименование, Расширение)
	
	Если Не ЗначениеЗаполнено(Расширение) Тогда
		Возврат Наименование;
	КонецЕсли;
	
	Возврат СтрШаблон("%1.%2", Наименование, Расширение);
	
КонецФункции

Функция СлужебныеЗаголовки(УчетнаяЗапись)
	
	Результат = Новый Соответствие;
	
	Результат["Precedence"] = "bulk"; // RFC 3834
	
	АдресЭлектроннойПочты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "АдресЭлектроннойПочты");
	
	Результат["List-Unsubscribe"] = СтрШаблон("<mailto:%1?subject=unsubscribe>", АдресЭлектроннойПочты); // RFC 2369
	
	Возврат Результат;
	
КонецФункции

Функция РассылкиДляСозданияСобытий()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("МассоваяРассылка", Новый ОписаниеТипов("ДокументСсылка.МассоваяРассылка"));
	Результат.Колонки.Добавить("КакСвязаться", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("УчетнаяЗапись", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты"));
	Результат.Колонки.Добавить("СпособОтправки", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКаналовСвязи"));
	Результат.Колонки.Добавить("Идентификаторы");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОчередьРассылок.МассоваяРассылка КАК МассоваяРассылка,
	|	ОчередьРассылок.КакСвязаться КАК КакСвязаться,
	|	ОчередьРассылок.ИдентификаторыJSON КАК ИдентификаторыJSON,
	|	ОчередьРассылок.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ОчередьРассылок.МассоваяРассылка.СпособОтправки КАК СпособОтправки
	|ИЗ
	|	РегистрСведений.ОчередьРассылок КАК ОчередьРассылок
	|ГДЕ
	|	ОчередьРассылок.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиРассылки.Отправлено)
	|	И ОчередьРассылок.Событие = ЗНАЧЕНИЕ(Документ.Событие.ПустаяСсылка)
	|	И ОчередьРассылок.МассоваяРассылка.СоздаватьСобытия");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ЧтениеJSON = Новый ЧтениеJSON;
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Не ЗначениеЗаполнено(Выборка.ИдентификаторыJSON) Тогда
			НоваяСтрока.Идентификаторы = Новый Структура;
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЧтениеJSON.УстановитьСтроку(Выборка.ИдентификаторыJSON);
			НоваяСтрока.Идентификаторы = ПрочитатьJSON(ЧтениеJSON);
		Исключение
			НоваяСтрока.Идентификаторы = Новый Структура;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СоздатьСобытияПоОтправленнымРассылкам(Знач РассылкиДляСозданияСобытий)
	
	Для Каждого ТекЗапись Из РассылкиДляСозданияСобытий Цикл
		
		ДанныеРассылки = ДанныеРассылки(ТекЗапись.МассоваяРассылка, ТекЗапись.КакСвязаться);
		Если Не ЗначениеЗаполнено(ДанныеРассылки) Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьРассылок");
			ЭлементБлокировки.УстановитьЗначение("МассоваяРассылка", ТекЗапись.МассоваяРассылка);
			ЭлементБлокировки.УстановитьЗначение("КакСвязаться", ТекЗапись.КакСвязаться);
			Блокировка.Заблокировать();
			
			МенеджерЗаписи = РегистрыСведений.ОчередьРассылок.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.МассоваяРассылка = ТекЗапись.МассоваяРассылка;
			МенеджерЗаписи.КакСвязаться = ТекЗапись.КакСвязаться;
			МенеджерЗаписи.Прочитать();
			
			Если ЗначениеЗаполнено(МенеджерЗаписи.Событие) Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			МенеджерЗаписи.МассоваяРассылка = ТекЗапись.МассоваяРассылка;
			МенеджерЗаписи.КакСвязаться = ТекЗапись.КакСвязаться;
			
			Если ТекЗапись.СпособОтправки = Перечисления.ВидыКаналовСвязи.Email Тогда
				
				ТемаПисьма = СодержаниеСПодставленнымиПараметрами(
				ДанныеРассылки.Тема,
				ДанныеРассылки.Контакт,
				ТекЗапись.УчетнаяЗапись);
				
				ТелоПисьма = СодержаниеСПодставленнымиПараметрами(
				ДанныеРассылки.СодержаниеHTML,
				ДанныеРассылки.Контакт,
				ТекЗапись.УчетнаяЗапись);
				
				ВложенияКартинки = ДанныеРассылки.КартинкиHTML.Получить();
				Если ВложенияКартинки = Неопределено Тогда
					ВложенияКартинки = Новый Структура;
				КонецЕсли;
				
				МенеджерЗаписи.Событие = СоздатьСобытиеЭлектронноеПисьмо(
				ДанныеРассылки,
				ТекЗапись.УчетнаяЗапись,
				ТемаПисьма,
				ТелоПисьма,
				ВложенияКартинки,
				ТекЗапись.Идентификаторы);
				
			ИначеЕсли ТекЗапись.СпособОтправки = Перечисления.ВидыКаналовСвязи.SMS Тогда
				
				ТекстSMS = СодержаниеСПодставленнымиПараметрами(
				ДанныеРассылки.Содержание,
				ДанныеРассылки.Контакт,
				Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка());
				
				МенеджерЗаписи.Событие = СоздатьСобытиеСообщениеSMS(
				ДанныеРассылки,
				ТекстSMS)
				
			Иначе
				
				ОтменитьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			МенеджерЗаписи.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтрШаблон(НСтр(
			"ru = 'Не удалось создать Событие
			|МассоваяРассылка = ""%1""
			|КакСвязаться = ""%2""
			|По причине: %3'"),
			ТекЗапись.МассоваяРассылка,
			ТекЗапись.КакСвязаться,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Документы.МассоваяРассылка,
			ТекЗапись.МассоваяРассылка,
			ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьСобытиеЭлектронноеПисьмо(
	Знач ДанныеРассылки,
	Знач УчетнаяЗапись,
	Знач ТемаПисьма,
	Знач ТелоПисьма,
	Знач ВложенияКартинки,
	Знач Идентификаторы)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
	ЗначенияЗаполнения.Вставить("НачалоСобытия", ЗначенияЗаполнения.Дата);
	ЗначенияЗаполнения.Вставить("ОкончаниеСобытия", ЗначенияЗаполнения.Дата);
	ЗначенияЗаполнения.Вставить("ТипСобытия", Перечисления.ТипыСобытий.ЭлектронноеПисьмо);
	ЗначенияЗаполнения.Вставить("СодержаниеHTML", ТелоПисьма);
	ЗначенияЗаполнения.Вставить("КартинкиHTML", Новый ХранилищеЗначения(ВложенияКартинки));
	ЗначенияЗаполнения.Вставить("Содержание", УправлениеНебольшойФирмойВзаимодействия.ПолучитьТекстИзHTML(ТелоПисьма));
	ЗначенияЗаполнения.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ЗначенияЗаполнения.Вставить("Состояние", Справочники.СостоянияСобытий.Завершено);
	ЗначенияЗаполнения.Вставить("Важность", Перечисления.ВариантыВажности.Обычная);
	ЗначенияЗаполнения.Вставить("Тема", ТемаПисьма);
	ЗначенияЗаполнения.Вставить("Ответственный", ДанныеРассылки.Ответственный);
	ЗначенияЗаполнения.Вставить("Автор", ДанныеРассылки.Автор);
	ЗначенияЗаполнения.Вставить("ИсточникПривлечения", ДанныеРассылки.ИсточникПривлечения);
	
	НовоеСобытие = Документы.Событие.СоздатьДокумент();
	НовоеСобытие.Заполнить(ЗначенияЗаполнения);
	НовоеСобытие.УстановитьНовыйНомер();
	
	СтрокаОснования = НовоеСобытие.ДокументыОснования.Добавить();
	СтрокаОснования.ДокументОснование = ДанныеРассылки.Ссылка;
	
	СтрокаУчастники = НовоеСобытие.Участники.Добавить();
	СтрокаУчастники.Контакт = ДанныеРассылки.Контакт;
	СтрокаУчастники.КакСвязаться = ДанныеРассылки.КакСвязаться;
	
	НовоеСобытие.ДополнительныеСвойства.Вставить("Идентификатор", Идентификаторы.Идентификатор);
	НовоеСобытие.ДополнительныеСвойства.Вставить("ИдентификаторыСообщений", Идентификаторы.ИдентификаторыСообщений);
	
	НовоеСобытие.Записать();
	
	Возврат НовоеСобытие.Ссылка;
	
КонецФункции

Функция СоздатьСобытиеСообщениеSMS(Знач ДанныеРассылки, Знач ТекстSMS)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
	ЗначенияЗаполнения.Вставить("НачалоСобытия", ЗначенияЗаполнения.Дата);
	ЗначенияЗаполнения.Вставить("ОкончаниеСобытия", ЗначенияЗаполнения.Дата);
	ЗначенияЗаполнения.Вставить("ТипСобытия", Перечисления.ТипыСобытий.СообщениеSMS);
	ЗначенияЗаполнения.Вставить("Содержание", ТекстSMS);
	ЗначенияЗаполнения.Вставить("ДокументОснование", ДанныеРассылки.Ссылка);
	ЗначенияЗаполнения.Вставить("Состояние", Справочники.СостоянияСобытий.Завершено);
	ЗначенияЗаполнения.Вставить("Тема", ДанныеРассылки.Тема);
	ЗначенияЗаполнения.Вставить("Ответственный", ДанныеРассылки.Ответственный);
	ЗначенияЗаполнения.Вставить("Автор", ДанныеРассылки.Автор);
	ЗначенияЗаполнения.Вставить("ИсточникПривлечения", ДанныеРассылки.ИсточникПривлечения);
	
	НовоеСобытие = Документы.Событие.СоздатьДокумент();
	НовоеСобытие.Заполнить(ЗначенияЗаполнения);
	
	НовоеСобытие.УстановитьНовыйНомер();
	
	СтрокаУчастники = НовоеСобытие.Участники.Добавить();
	СтрокаУчастники.Контакт = ДанныеРассылки.Контакт;
	СтрокаУчастники.КакСвязаться = ДанныеРассылки.КакСвязаться;
	
	НовоеСобытие.Записать();
	
	Возврат НовоеСобытие.Ссылка;
	
КонецФункции

Функция ПолностьюОтправленныеМассовыеРассылки()
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОчередьРассылок.МассоваяРассылка КАК МассоваяРассылка,
	|	СУММА(ВЫБОР
	|			КОГДА ОчередьРассылок.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиРассылки.Отправлено)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоОтправленных,
	|	СУММА(1) КАК КоличествоСформированных
	|ИЗ
	|	РегистрСведений.ОчередьРассылок КАК ОчередьРассылок
	|ГДЕ
	|	ОчередьРассылок.МассоваяРассылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиРассылки.Сформировано)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередьРассылок.МассоваяРассылка");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоСформированных = Выборка.КоличествоОтправленных Тогда
			Результат.Добавить(Выборка.МассоваяРассылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьСостояниеОтправленныхРассылок(Знач МассовыеРассылки)
	
	Для Каждого ТекМассоваяРассылка Из МассовыеРассылки Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Документ.МассоваяРассылка");
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ТекМассоваяРассылка);
			БлокировкаДанных.Заблокировать();
			
			МассоваяРассылка = ТекМассоваяРассылка.ПолучитьОбъект();
			МассоваяРассылка.Состояние = Перечисления.СостоянияОтправкиРассылки.Отправлено;
			МассоваяРассылка.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтрШаблон(НСтр("ru='Не удалось автоматически установить состояние в документе: ""%1"".
			|По причине: %2'"), МассоваяРассылка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Документы.МассоваяРассылка,
			МассоваяРассылка.Ссылка,
			ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Массовые рассылки УНФ'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти