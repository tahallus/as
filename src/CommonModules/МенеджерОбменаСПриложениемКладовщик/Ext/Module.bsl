// Конвертация 1С:Кладовщик от 27.09.2021 0:58:07
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	ВариантНастройки = Неопределено;
	Если КомпонентыОбмена.УзелКорреспондента <> Неопределено Тогда
		ВариантНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомпонентыОбмена.УзелКорреспондента.МобильноеПриложение, "ВариантНастройки");
	КонецЕсли;
	ПараметрыКонвертации.ВариантНастройки = ВариантНастройки;
	
	УзелОбмена = КомпонентыОбмена.УзелКорреспондента;
	Пользователь = Пользователи.ТекущийПользователь();
	ОбменЗапрещен = Ложь;
	Если ЗначениеЗаполнено(УзелОбмена.Пользователь) 
		И Пользователь <> УзелОбмена.Пользователь Тогда
		ОбменЗапрещен = Истина;
	ИначеЕсли ЗначениеЗаполнено(УзелОбмена.ГруппаПользователей) Тогда
		Если УзелОбмена.ГруппаПользователей.Состав.Найти(Пользователь, "Пользователь") = Неопределено Тогда
			ОбменЗапрещен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбменЗапрещен Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Пользователь %1 не является участником настройки обмена'"), Пользователь);
		ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СообщениеОбОшибке);
	КонецЕсли;
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПокупателя_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеЗапасов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПересчетТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтруктурныеЕдиницы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ПересчетТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РаспоряжениеНаОтгрузку_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РаспоряжениеНаПриемку_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СерииНоменклатуры_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходнаяНакладная;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Характеристика КАК Характеристика,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВозвратТоваровПоставщикуТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Количество * ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ВозвратТоваровПоставщикуТовары.Количество КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Номенклатура.ИспользоватьСерииНоменклатуры, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Номенклатура.АлкогольнаяПродукция, ЛОЖЬ)
	|				ИЛИ ВозвратТоваровПоставщикуТовары.Номенклатура.ВидМаркировки = ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.МаркируемаяПродукция)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Маркируемый,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Весовой КАК Весовой,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Вес КАК ВесЕдиницыТовара
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Характеристика КАК Характеристика,
	|	ВозвратТоваровПоставщикуСерии.Серия КАК Серия,
	|	ВозвратТоваровПоставщикуСерии.Количество КАК Количество,
	|	ЕСТЬNULL(ВозвратТоваровПоставщикуСерии.Серия.Наименование, """") КАК Номер
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	Документ.РасходнаяНакладная.СерииНоменклатуры КАК ВозвратТоваровПоставщикуСерии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.Запасы КАК ВозвратТоваровПоставщикуТовары
	|		ПО ВозвратТоваровПоставщикуСерии.КлючСвязи = ВозвратТоваровПоставщикуТовары.КлючСвязи
	|ГДЕ
	|	ВозвратТоваровПоставщикуСерии.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК Штрихкод
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	ВТ_Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|			И Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	ВТ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ВТ_Товары.Маркируемый КАК Маркируемый,
	|	ВТ_Товары.Весовой КАК Весовой,
	|	ВТ_Товары.ВесЕдиницыТовара КАК ВесЕдиницыТовара,
	|	ВТ_Товары.Цена КАК Цена,
	|	ВТ_Товары.Сумма КАК Сумма,
	|	ВТ_Товары.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_Товары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВТ_ТоварыИтог
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И ВТ_Товары.Характеристика = Штрихкоды.Характеристика
	|			И ВТ_Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
	|ГДЕ
	|	ВТ_Товары.СтатусУказанияСерий В (0, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки,
	|	ВТ_Товары.Номенклатура,
	|	ВТ_Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА Серии.Номер = """"
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ Серии.Серия
	|	КОНЕЦ,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """"),
	|	ВТ_Товары.ЕдиницаИзмерения,
	|	Серии.Количество,
	|	Серии.Количество,
	|	ВЫБОР
	|		КОГДА Серии.Номер = """"
	|			ТОГДА 1
	|		ИНАЧЕ ВТ_Товары.СтатусУказанияСерий
	|	КОНЕЦ,
	|	ВТ_Товары.Маркируемый,
	|	ВТ_Товары.Весовой,
	|	ВТ_Товары.ВесЕдиницыТовара,
	|	ВТ_Товары.Цена,
	|	ВТ_Товары.Сумма * Серии.Количество / ВТ_Товары.Количество,
	|	ВТ_Товары.СтавкаНДС,
	|	ВТ_Товары.СуммаНДС * Серии.Количество / ВТ_Товары.Количество
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И ВТ_Товары.Характеристика = Штрихкоды.Характеристика
	|			И ВТ_Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Серии КАК Серии
	|		ПО ВТ_Товары.Номенклатура = Серии.Номенклатура
	|			И ВТ_Товары.Характеристика = Серии.Характеристика
	|ГДЕ
	|	ВТ_Товары.СтатусУказанияСерий = 2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыИтог.Номенклатура КАК Номенклатура,
	|	ВТ_ТоварыИтог.Характеристика КАК Характеристика,
	|	ВТ_ТоварыИтог.Серия КАК Серия,
	|	ВТ_ТоварыИтог.Штрихкод КАК Штрихкод,
	|	ВТ_ТоварыИтог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ТоварыИтог.Количество КАК Количество,
	|	ВТ_ТоварыИтог.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_ТоварыИтог.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ВТ_ТоварыИтог.Маркируемый КАК Маркируемый,
	|	ВТ_ТоварыИтог.Весовой КАК Весовой,
	|	ВТ_ТоварыИтог.ВесЕдиницыТовара КАК ВесЕдиницыТовара,
	|	ВТ_ТоварыИтог.Цена КАК Цена,
	|	ВТ_ТоварыИтог.Сумма КАК Сумма,
	|	ВТ_ТоварыИтог.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_ТоварыИтог.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	ВТ_ТоварыИтог КАК ВТ_ТоварыИтог
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ТоварыИтог.НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Ложь;
	Иначе
		Товары = Результат.Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(Товары);
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК НомерАкцизнойМарки
	|ИЗ
	|	Документ.РасходнаяНакладная.ШтрихкодыУпаковок КАК ВозвратТоваровПоставщикуШтрихкодыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ВозвратТоваровПоставщикуШтрихкодыУпаковок.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваров.Ссылка
	|ГДЕ
	|	ВозвратТоваровПоставщикуШтрихкодыУпаковок.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	
	Маркировка = Результат.Выгрузить();
	ДанныеИБ.ДополнительныеСвойства.Вставить("Маркировка", Маркировка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПокупателя_Отправка
Процедура ДобавитьПОД_Документ_ЗаказПокупателя_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПокупателя_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказПокупателя;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПокупателя_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПоставщику_Отправка
Процедура ДобавитьПОД_Документ_ЗаказПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказПоставщику;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПоставщику_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеЗапасов_Отправка
Процедура ДобавитьПОД_Документ_ПеремещениеЗапасов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеЗапасов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПеремещениеЗапасов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПриемкаПоПеремещениюЗапасов_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПеремещениеЗапасов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПеремещениеТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказНаПеремещениеТовары.Номенклатура КАК Номенклатура,
	|	ЗаказНаПеремещениеТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПеремещениеТовары.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказНаПеремещениеТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ЗаказНаПеремещениеТовары.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПеремещениеТовары.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ЗаказНаПеремещениеТовары.Количество * ЗаказНаПеремещениеТовары.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ ЗаказНаПеремещениеТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ЗаказНаПеремещениеТовары.Количество КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказНаПеремещениеТовары.Номенклатура.ИспользоватьСерииНоменклатуры, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказНаПеремещениеТовары.Номенклатура.АлкогольнаяПродукция, ЛОЖЬ)
	|				ИЛИ ЗаказНаПеремещениеТовары.Номенклатура.ВидМаркировки = ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.МаркируемаяПродукция)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Маркируемый,
	|	ЗаказНаПеремещениеТовары.Номенклатура.Весовой КАК Весовой,
	|	ЗаказНаПеремещениеТовары.Номенклатура.Вес КАК ВесЕдиницыТовара
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Запасы КАК ЗаказНаПеремещениеТовары
	|ГДЕ
	|	ЗаказНаПеремещениеТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК Штрихкод
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	ВТ_Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|			И Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	ВТ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_Товары.Маркируемый КАК Маркируемый,
	|	ВТ_Товары.Весовой КАК Весовой,
	|	ВТ_Товары.ВесЕдиницыТовара КАК ВесЕдиницыТовара,
	|	ВТ_Товары.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ ВТ_ТоварыИтог
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И ВТ_Товары.Характеристика = Штрихкоды.Характеристика
	|			И ВТ_Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыИтог.Номенклатура КАК Номенклатура,
	|	ВТ_ТоварыИтог.Характеристика КАК Характеристика,
	|	ВТ_ТоварыИтог.Штрихкод КАК Штрихкод,
	|	ВТ_ТоварыИтог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ТоварыИтог.Количество КАК Количество,
	|	ВТ_ТоварыИтог.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_ТоварыИтог.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ВТ_ТоварыИтог.Маркируемый КАК Маркируемый,
	|	ВТ_ТоварыИтог.Весовой КАК Весовой,
	|	ВТ_ТоварыИтог.ВесЕдиницыТовара КАК ВесЕдиницыТовара
	|ИЗ
	|	ВТ_ТоварыИтог КАК ВТ_ТоварыИтог
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ТоварыИтог.НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ИспользованиеПКО.Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка = Ложь;
		ИспользованиеПКО.Документ_ПриемкаПоПеремещениюЗапасов_Отправка = Ложь;
	Иначе
		Товары = Результат.Выгрузить();
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	
		ФильтрПройден = УправлениеМобильнымиПриложениямиУНФ.ПроверитьФильтрПоСкладу(
			КомпонентыОбмена.УзелКорреспондента, ДанныеИБ.СтруктурнаяЕдиница, ДанныеИБ.СтруктурнаяЕдиница, ДанныеИБ.Организация);
	
		ИспользованиеПКО.Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка =  ФильтрПройден;
		
		ФильтрПройден = УправлениеМобильнымиПриложениямиУНФ.ПроверитьФильтрПоСкладу(
			КомпонентыОбмена.УзелКорреспондента, ДанныеИБ.СтруктурнаяЕдиницаПолучатель, ДанныеИБ.СтруктурнаяЕдиницаПолучатель, ДанныеИБ.Организация);
		
		ИспользованиеПКО.Документ_ПриемкаПоПеремещениюЗапасов_Отправка = ФильтрПройден;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересчетТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПересчетТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПересчетТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ИнвентаризацияЗапасов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересчетТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПересчетТоваровТовары.НомерСтроки КАК НомерСтроки,
	|	ПересчетТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПересчетТоваровТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПересчетТоваровТовары.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ПересчетТоваровТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ПересчетТоваровТовары.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПересчетТоваровТовары.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ПересчетТоваровТовары.Количество * ПересчетТоваровТовары.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ ПересчетТоваровТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ПересчетТоваровТовары.Количество КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ИнвентаризацияЗапасов.Запасы КАК ПересчетТоваровТовары
	|ГДЕ
	|	ПересчетТоваровТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК Штрихкод
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|			И Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|			И (СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И ВТ_Товары.Характеристика = Штрихкоды.Характеристика
	|			И ВТ_Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ИспользованиеПКО.Документ_ПересчетТоваров_Отправка = Ложь;
	Иначе
		Товары = Результат.Выгрузить();
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Маркировка ЕГАИС
	ТаблицаМаркировка = Новый ТаблицаЗначений;
	ТаблицаМаркировка.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМаркировка.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаМаркировка.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаМаркировка.Колонки.Добавить("НомерАкцизнойМарки", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	
	ТТНВходящаяЕГАИС = ДанныеИБ.Ссылка.ДокументОснование;
	
	Если ЗначениеЗаполнено(ТТНВходящаяЕГАИС) И ТипЗнч(ТТНВходящаяЕГАИС) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		ДанныеПроверкиИПодбора = ТТНВходящаяЕГАИС.ДанныеПроверкиИПодбора.Получить();
		Если ДанныеПроверкиИПодбора <> Неопределено Тогда
			Для Каждого СтрокаДерева Из ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции.Строки Цикл
				Если НЕ ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
					НоваяСтрока = ТаблицаМаркировка.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
					НоваяСтрока.НомерАкцизнойМарки = СтрокаДерева.Штрихкод;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("Маркировка", ТаблицаМаркировка);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
		ИспользованиеПКО.Справочник_Номенклатура_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтруктурныеЕдиницы_Отправка
Процедура ДобавитьПОД_Справочник_СтруктурныеЕдиницы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтруктурныеЕдиницы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Магазины_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ЭтоСклад = ДанныеИБ.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.Подразделение
		И ДанныеИБ.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов;
	
	ЭтоМагазинГруппаСкладов = ДанныеИБ.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов;
	
	ИспользованиеПКО.Справочник_Склады_Отправка = ЭтоСклад;
	ИспользованиеПКО.Справочник_Магазины_Отправка = ЭтоМагазинГруппаСкладов;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ХарактеристикиНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ХарактеристикиНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ХарактеристикиНоменклатуры");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
КонецПроцедуры

Процедура ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Номенклатура = ДанныеИБ.Отбор.Номенклатура.Значение;
	
	Если НЕ (ЗначениеЗаполнено(Номенклатура) И ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")) Тогда
		ИспользованиеПКО.Справочник_Штрихкоды_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_ПересчетТоваров_Получение
Процедура ДобавитьПОД_Документ_ПересчетТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПересчетТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПересчетТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересчетТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РаспоряжениеНаОтгрузку_Получение
Процедура ДобавитьПОД_Документ_РаспоряжениеНаОтгрузку_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РаспоряжениеНаОтгрузку_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РаспоряжениеНаОтгрузку_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПокупателя_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтгрузкаПоПеремещениюЗапасов_Получение");
КонецПроцедуры

Процедура ПОД_Документ_РаспоряжениеНаОтгрузку_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ЗаказПокупателя_Получение = Ложь;
	ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Получение = Ложь;
	ИспользованиеПКО.Документ_ОтгрузкаПоПеремещениюЗапасов_Получение = Ложь;
	
	Если ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаПоВозвратуПоставщику" Тогда
		ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Получение = Истина;
	ИначеЕсли ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаПоПеремещению" Тогда
		ИспользованиеПКО.Документ_ОтгрузкаПоПеремещениюЗапасов_Получение = Истина;
	ИначеЕсли ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаКлиенту" Тогда
		ИспользованиеПКО.Документ_ЗаказПокупателя_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РаспоряжениеНаПриемку_Получение
Процедура ДобавитьПОД_Документ_РаспоряжениеНаПриемку_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РаспоряжениеНаПриемку_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РаспоряжениеНаПриемку";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РаспоряжениеНаПриемку_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПоставщику_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПриемкаПоПеремещениюЗапасов_Получение");
КонецПроцедуры

Процедура ПОД_Документ_РаспоряжениеНаПриемку_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ЗаказПоставщику_Получение = Ложь;
	ИспользованиеПКО.Документ_ПриемкаПоПеремещениюЗапасов_Получение = Ложь;
	
	Если ДанныеXDTO.ВидОперации.Значение = "ПриемкаОтПоставщика" Тогда
		ИспользованиеПКО.Документ_ЗаказПоставщику_Получение = Истина;
	ИначеЕсли ДанныеXDTO.ВидОперации.Значение = "ПриемкаПоПеремещению" Тогда
		ИспользованиеПКО.Документ_ПриемкаПоПеремещениюЗапасов_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СерииНоменклатуры_Получение
Процедура ДобавитьПОД_Справочник_СерииНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СерииНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СерииНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СерииНоменклатуры");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересчетТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПриемкаПоПеремещениюЗапасов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КатегорииНоменклатурыВН_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Магазины_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Штрихкоды_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПокупателя_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПоставщику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересчетТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПриемкаПоПеремещениюЗапасов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КатегорииНоменклатурыВН_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СерииНоменклатуры(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Упаковки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры(ПравилаКонвертации);
КонецПроцедуры

Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область Отправка
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ссылка",             "Ссылка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",   "");
	ДобавитьПКС(СвойстваШапки, "",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "Менеджер", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "ОжидаемаяДатаОтгрузки", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "Представление", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "ТелефонМенеджера", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Маркировка");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерАкцизнойМарки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("ВидОперации", "ОтгрузкаПоВозвратуПоставщику");
	
	ДанныеXDTO.Вставить("ОжидаемаяДатаОтгрузки", ТекущаяДатаСеанса());
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
	ДанныеXDTO.Вставить("Маркировка", ДанныеИБ.ДополнительныеСвойства.Маркировка);
	
	ОтветственныйЗаДокумент = ДанныеИБ.Ответственный;
	ТелефонМенеджера = "";
	Менеджер = ОтветственныйЗаДокумент.Физлицо.Наименование;
	
	Для Каждого СтрокаКИ Из ОтветственныйЗаДокумент.Физлицо.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонМенеджера = СтрокаКИ.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Менеджер", Менеджер);	
	ДанныеXDTO.Вставить("ТелефонМенеджера", ТелефонМенеджера);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПокупателя_Отправка
Процедура ДобавитьПКО_Документ_ЗаказПокупателя_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаОтгрузки",             "ОжидаемаяДатаОтгрузки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ссылка",                   "Ссылка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаРезерв", "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Менеджер", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Представление", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "ТелефонМенеджера", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ДанныеИБ.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Заказ = &ЗаказПокупателя
	|	И ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И НЕ ЧекККМ.ОперацияСДенежнымиСредствами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РеализацияТоваров
	|ГДЕ
	|	НЕ РеализацияТоваров.ПометкаУдаления
	|	И РеализацияТоваров.Проведен
	|	И РеализацияТоваров.Заказ = &ЗаказПокупателя";
	
	Результат = Запрос.ВыполнитьПакет();
	Если НЕ(Результат[0].Пустой()
		И Результат[1].Пустой()) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("ВидОперации", "ОтгрузкаКлиенту");
	
	РасширенныеДанныеИБ = ДанныеДокументаЗаказПокупателя(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	//ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Запасы);
	
	ОтветственныйЗаДокумент = ДанныеИБ.Ответственный;
	ТелефонМенеджера = "";
	Менеджер = ОтветственныйЗаДокумент.Физлицо.Наименование;
	
	Для Каждого СтрокаКИ Из ОтветственныйЗаДокумент.Физлицо.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонМенеджера = СтрокаКИ.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Менеджер", Менеджер);
	ДанныеXDTO.Вставить("ТелефонМенеджера", ТелефонМенеджера);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ЗаказПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПоставщику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаПоступления",          "ОжидаемаяДатаПоступления");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ссылка",                   "Ссылка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаРезерв", "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Менеджер", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Представление", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "ТелефонМенеджера", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПоставщику", ДанныеИБ.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриходнаяНакладная.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|ГДЕ
	|	НЕ ПриходнаяНакладная.ПометкаУдаления
	|	И ПриходнаяНакладная.Проведен
	|	И ПриходнаяНакладная.Заказ = &ЗаказПоставщику";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("ВидОперации", "ПриемкаОтПоставщика");
	
	РасширенныеДанныеИБ = ДанныеДокументаЗаказПоставщику(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	//ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Запасы);
	
	ОтветственныйЗаДокумент = ДанныеИБ.Ответственный;
	ТелефонМенеджера = "";
	Менеджер = ОтветственныйЗаДокумент.Физлицо.Наименование;
	
	Для Каждого СтрокаКИ Из ОтветственныйЗаДокумент.Физлицо.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонМенеджера = СтрокаКИ.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Менеджер", Менеджер);
	ДанныеXDTO.Вставить("ТелефонМенеджера", ТелефонМенеджера);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка
Процедура ДобавитьПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Комментарий",                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",                  "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Организация",                  "ОрганизацияПолучатель", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ссылка",                       "Ссылка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",           "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаПолучатель", "СкладПолучатель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                             "", 1);
	ДобавитьПКС(СвойстваШапки, "",                             "Представление", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("ВидОперации", "ОтгрузкаПоПеремещению");
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
	
	//ДанныеXDTO.Вставить("СкладПолучатель", ДанныеИБ.СтруктурнаяЕдиницаПолучатель);
	
	//ОтветственныйЗаДокумент = ДанныеИБ.Ответственный;
	//ТелефонМенеджера = "";
	//Менеджер = ОтветственныйЗаДокумент.Физлицо.Наименование;
	
	//Для Каждого СтрокаКИ Из ОтветственныйЗаДокумент.Физлицо.КонтактнаяИнформация Цикл
	//	Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
	//		ТелефонМенеджера = СтрокаКИ.Представление;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	
	//ДанныеXDTO.Вставить("Менеджер", Менеджер);
	//ДанныеXDTO.Вставить("ТелефонМенеджера", ТелефонМенеджера);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересчетТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПересчетТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересчетТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ИнвентаризацияЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПересчетТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Ссылка",             "Ссылка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",      "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",        "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Менеджер", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ОжидаемаяДатаПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Представление", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ТелефонМенеджера", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Маркировка");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерАкцизнойМарки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗаказПоставщику = ДанныеИБ.Заказ;
	Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		ДанныеXDTO.Вставить("Ссылка", ЗаказПоставщику.Ссылка);
		ОжидаемаяДатаПоступления = ЗаказПоставщику.ДатаПоступления;
	Иначе
		ДанныеXDTO.Вставить("Ссылка", ДанныеИБ.Ссылка);
		ОжидаемаяДатаПоступления = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("ВидОперации", "ПриемкаОтПоставщика");
	ДанныеXDTO.Вставить("ОжидаемаяДатаПоступления", ОжидаемаяДатаПоступления);
	
	РасширенныеДанныеИБ = ДанныеДокументаПриходнаяНакладная(ДанныеИБ);
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Маркировка", ДанныеИБ.ДополнительныеСвойства.Маркировка);
	
	ОтветственныйЗаДокумент = ДанныеИБ.Ответственный;
	ТелефонМенеджера = "";
	Менеджер = ОтветственныйЗаДокумент.Физлицо.Наименование;
	
	Для Каждого СтрокаКИ Из ОтветственныйЗаДокумент.Физлицо.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонМенеджера = СтрокаКИ.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Менеджер", Менеджер);
	ДанныеXDTO.Вставить("ТелефонМенеджера", ТелефонМенеджера);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПриемкаПоПеремещениюЗапасов_Отправка
Процедура ДобавитьПКО_Документ_ПриемкаПоПеремещениюЗапасов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПриемкаПоПеремещениюЗапасов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",                  "", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Организация",                  "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ссылка",                       "Ссылка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",           "СкладОтправитель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаПолучатель", "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                             "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                             "Представление", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("ВидОперации", "ПриемкаПоПеремещению");
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
#КонецОбласти
#Область Справочник_КатегорииНоменклатурыВН_Отправка
Процедура ДобавитьПКО_Справочник_КатегорииНоменклатурыВН_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КатегорииНоменклатурыВН_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ВидыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",               "Наименование");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатурыПоУмолчанию", "ТипНоменклатуры");

КонецПроцедуры

Процедура ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Попытка
		Если НЕ ЗначениеЗаполнено(ДанныеИБ.ТипНоменклатурыПоУмолчанию) Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);
			ДанныеXDTO.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидКонтрагента", "ЮридическоеФизическоеЛицо");
	ДобавитьПКС(СвойстваШапки, "ИНН",            "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",            "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",   "Наименование");
	ДобавитьПКС(СвойстваШапки, "Ссылка",         "Ссылка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Магазины_Отправка
Процедура ДобавитьПКО_Справочник_Магазины_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Магазины_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СкладыГруппа";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_Магазины_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ссылка",       "Ссылка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Артикул",            "Артикул");
	ДобавитьПКС(СвойстваШапки, "Весовой",            "Весовой");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",   "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Ссылка",             "Ссылка");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",    "ТипНоменклатуры", , "Перечисление_ТипыНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "",                   "СтавкаНДС", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтавкаНДССсылка = Справочники.СтавкиНДС.СтавкаНДС(ДанныеИБ.ВидСтавкиНДС);
	Если СтавкаНДССсылка.НеОблагается Тогда
		СтавкаНДС = "БезНДС";
	ИначеЕсли СтавкаНДССсылка.Ставка = 18
		И НЕ СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС18";
	ИначеЕсли СтавкаНДССсылка.Ставка = 18
		И СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС18_118";
	ИначеЕсли СтавкаНДССсылка.Ставка = 10 
		И НЕ СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС10";
	ИначеЕсли СтавкаНДССсылка.Ставка = 10 
		И СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС10_110";
	ИначеЕсли СтавкаНДССсылка.Ставка = 20 
		И НЕ СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС20";
	ИначеЕсли СтавкаНДССсылка.Ставка = 20 
		И СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС20_120";
	ИначеЕсли СтавкаНДССсылка.Ставка = 0 Тогда
		СтавкаНДС = "НДС0";
	Иначе
		СтавкаНДС = "БезНДС";
	КонецЕсли;
	ДанныеXDTO.Вставить("СтавкаНДС", СтавкаНДС);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                       "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",                       "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо", "ЮридическоеФизическоеЛицо", , "Перечисление_ЮридическоеФизическоеЛицо");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Склады";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "СкладГруппа", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ссылка",       "Ссылка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Штрихкоды_Отправка
Процедура ДобавитьПКО_Справочник_Штрихкоды_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Штрихкоды_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Штрихкоды_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Штрихкоды_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номенклатура 	= ДанныеИБ.Отбор.Номенклатура.Значение;
	Упаковка 		= ДанныеИБ.Отбор.ЕдиницаИзмерения.Значение;
	Характеристика 	= ДанныеИБ.Отбор.Характеристика.Значение;
	
	Штрихкоды = Новый ТаблицаЗначений;
	Штрихкоды.Колонки.Добавить("Номенклатура");
	Штрихкоды.Колонки.Добавить("ЕдиницаИзмерения");
	Штрихкоды.Колонки.Добавить("Характеристика");
	Штрихкоды.Колонки.Добавить("Штрихкод");
	
	Если ЗначениеЗаполнено(Номенклатура)
		И ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		СтрокаШК = Штрихкоды.Добавить();
		СтрокаШК.Номенклатура = Номенклатура;
		Если ЗначениеЗаполнено(Упаковка) Тогда
			СтрокаШК.Упаковка = Упаковка;
		КонецЕсли;
		Если ЗначениеЗаполнено(Характеристика) Тогда
			СтрокаШК.Характеристика = Характеристика;
		КонецЕсли;
		СтрокаШК.Штрихкод = ДанныеИБ.Отбор.Штрихкод.Значение;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Штрихкод", ДанныеИБ.Отбор.Штрихкод.Значение);
	ДанныеXDTO.Вставить("Записи", Штрихкоды);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_ВозвратТоваровПоставщику_Получение
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Проведен", "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПокупателя_Получение
Процедура ДобавитьПКО_Документ_ЗаказПокупателя_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаказПокупателя_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "СостояниеЗаказа", "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.СостояниеЗаказа = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "СостояниеЗаказаСобран");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПоставщику_Получение
Процедура ДобавитьПКО_Документ_ЗаказПоставщику_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаказПоставщику_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаказПоставщику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "СостояниеЗаказа", "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.СостояниеЗаказа = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "СостояниеЗаказаПоставщикуПринят");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтгрузкаПоПеремещениюЗапасов_Получение
Процедура ДобавитьПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтгрузкаПоПеремещениюЗапасов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Проведен", "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересчетТоваров_Получение
Процедура ДобавитьПКО_Документ_ПересчетТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПересчетТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ИнвентаризацияЗапасов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПересчетТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область Документ_ПриемкаПоПеремещениюЗапасов_Получение
Процедура ДобавитьПКО_Документ_ПриемкаПоПеремещениюЗапасов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПриемкаПоПеремещениюЗапасов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Проведен", "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
КонецПроцедуры
#КонецОбласти
#Область Справочник_КатегорииНоменклатурыВН_Получение
Процедура ДобавитьПКО_Справочник_КатегорииНоменклатурыВН_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КатегорииНоменклатурыВН_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыНоменклатуры";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",               "Наименование");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатурыПоУмолчанию", "ТипНоменклатуры", , "Перечисление_ТипыНоменклатуры_Получение");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Номенклатура";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Склады_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Склады";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Справочник_ЕдиницыИзмерения
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Код) Тогда
	
		Код = ДанныеИБ.МеждународноеСокращение;
		Если Не ЗначениеЗаполнено(Код) Тогда
			Код = ДанныеИБ.Наименование;
		КонецЕсли;
		
		Код = Лев(Код, 4);
		
		Если СтекВыгрузки.Количество() = 1 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("Код", Код);
		Иначе
			ДанныеXDTO.Вставить("Код", Код);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СерииНоменклатуры
Процедура ДобавитьПКО_Справочник_СерииНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СерииНоменклатуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СерииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СерииНоменклатуры";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоденДо",      "ГоденДо");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Наименование", "СерийныйНомер");
	ДобавитьПКС(СвойстваШапки, "Ссылка",       "Ссылка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Упаковки
Процедура ДобавитьПКО_Справочник_Упаковки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Упаковки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Упаковки";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Упаковки_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Упаковки_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Коэффициент",                      "Коэффициент");
	ДобавитьПКС(СвойстваШапки, "Наименование",                     "Наименование");
	ДобавитьПКС(СвойстваШапки, "Владелец",                         "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмеренияПоКлассификатору", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,ЕдиницаИзмеренияПоКлассификатору,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Упаковки_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмеренияПоКлассификатору) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ЕдиницаИзмерения", ДанныеИБ.ЕдиницаИзмеренияПоКлассификатору);
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.шт);
	КонецЕсли;
	
	Номенклатура = Неопределено;
	Если ЗначениеЗаполнено(ДанныеИБ.Владелец) И ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		Номенклатура = ДанныеИБ.Владелец;
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			ДанныеXDTO.Вставить("Номенклатура", Номенклатура);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Номенклатура") Тогда
	
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Владелец) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", ДанныеXDTO.КлючевыеСвойства.Номенклатура);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Упаковки_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Владелец)
		ИЛИ (ДанныеИБ <> Неопределено И ТипЗнч(ДанныеИБ.Владелец) <> Тип("СправочникСсылка.Номенклатура")) Тогда
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ХарактеристикиНоменклатуры
Процедура ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеДляПечати", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидНоменклатуры", 1, "Справочник_КатегорииНоменклатурыВН_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Владелец",              "ВладелецХарактеристики", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеДляПечати) И ЗначениеЗаполнено(ДанныеИБ.Наименование) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("Номенклатура", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Владелец, "Справочник_Номенклатура_Отправка"));
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ВидНоменклатуры", ДанныеИБ.Владелец);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ИнструкцияВладелец = Новый Структура;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВидНоменклатуры") Тогда
		ИнструкцияВладелец.Вставить("Значение", ДанныеXDTO.КлючевыеСвойства.ВидНоменклатуры);
		ИнструкцияВладелец.Вставить("ИмяПКО",   "Справочник_КатегорииНоменклатурыВН_Получение");
	ИначеЕсли ДанныеXDTO.КлючевыеСвойства.Свойство("Номенклатура") Тогда
		ИнструкцияВладелец.Вставить("Значение", ДанныеXDTO.КлючевыеСвойства.Номенклатура);
		ИнструкцияВладелец.Вставить("ИмяПКО",   "Справочник_Номенклатура_Получение");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнструкцияВладелец) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", ИнструкцияВладелец);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// Перечисление_ТипыНоменклатуры.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыНоменклатуры";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
		ПравилоКонвертации.ТипXDTO   = "ТипыНоменклатуры";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.ВидРабот, "Работа");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Запас, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Операция, "Работа");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Работа, "Работа");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Услуга, "Услуга");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ЮридическоеФизическоеЛицо.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ЮридическоеФизическоеЛицо";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
	Если НаправлениеОбмена = "Получение" Тогда
		// Перечисление_ТипыНоменклатуры_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыНоменклатуры_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
		ПравилоКонвертации.ТипXDTO   = "ТипыНоменклатуры";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("МногооборотнаяТара", Перечисления.ТипыНоменклатуры.Запас);
		ЗначенияДляПолучения.Вставить("Товар", Перечисления.ТипыНоменклатуры.Запас);
		ЗначенияДляПолучения.Вставить("Работа", Перечисления.ТипыНоменклатуры.Работа);
		ЗначенияДляПолучения.Вставить("Услуга", Перечисления.ТипыНоменклатуры.Услуга);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	КонецЕсли;

	// Перечисление_ВидыКонтрагентов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыКонтрагентов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыКонтрагентов;
	ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ГосударственныйОрган, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ВидыКонтрагентов.ГосударственныйОрган);
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель);
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ВидыКонтрагентов.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Функция ДанныеДокументаЗаказПокупателя(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ЗаказПокупателяЗапасы.Количество КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Цена / ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
		|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ЗаказПокупателяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ЗаказПокупателяЗапасы.Всего КАК Всего,
		|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
		|	ЗаказПокупателяЗапасы.Партия КАК Партия,
		|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗаказПокупателяЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры, ЛОЖЬ)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтатусУказанияСерий,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗаказПокупателяЗапасы.Номенклатура.АлкогольнаяПродукция, ЛОЖЬ)
		|				ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ВидМаркировки = ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.МаркируемаяПродукция)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Маркируемый,
		|	ЗаказПокупателяЗапасы.Номенклатура.Весовой КАК Весовой,
		|	ЗаказПокупателяЗапасы.Номенклатура.Вес КАК ВесЕдиницыТовара,
		|	ЗаказПокупателяЗапасы.Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ЗаказПокупателяЗапасы.Номенклатура.ВидМаркировки КАК ВидМаркировки
		|ИЗ
		|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
		|ГДЕ
		|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
		|	И ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|	И (НЕ &ЕстьКП
		|			ИЛИ ЗаказПокупателяЗапасы.НомерВариантаКП = &НомерВариантаКП)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Цена / ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
		|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ЗаказПокупателяЗапасы.Содержание, 1, 100) = """"
		|			ТОГДА ЗаказПокупателяЗапасы.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Содержание
		|ИЗ
		|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
		|ГДЕ
		|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
		|	И ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|	И (НЕ &ЕстьКП
		|			ИЛИ ЗаказПокупателяЗапасы.НомерВариантаКП = &НомерВариантаКП)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	ЗаказПокупателя.НоменклатураДоставки,
		|	1,
		|	ЗаказПокупателя.СтоимостьДоставки,
		|	ЗаказПокупателя.СтоимостьДоставки,
		|	ЗаказПокупателя.СтавкаНДСДоставки,
		|	ЗаказПокупателя.СуммаНДСДоставки,
		|	ЗаказПокупателя.НоменклатураДоставки.НаименованиеПолное
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &Ссылка
		|	И ЗаказПокупателя.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ЗаказПокупателя.СтоимостьДоставки > 0";
			
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		ЕстьКП = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу 
			И ДанныеИБ.КоличествоВариантовКП > 0;
		
		Запрос.УстановитьПараметр("ЕстьКП", ЕстьКП);
		Запрос.УстановитьПараметр("НомерВариантаКП", ДанныеИБ.ОсновнойВариантКП);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаЗаказПоставщику(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ЗаказПоставщикуЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказПоставщикуЗапасы.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ЗаказПоставщикуЗапасы.Количество * ЗаказПоставщикуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.Количество
	|	КОНЕЦ КАК Количество,
	|	ЗаказПоставщикуЗапасы.Количество КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И ЗаказПоставщикуЗапасы.ЕдиницаИзмерения.Коэффициент > 0
	|			ТОГДА ВЫРАЗИТЬ(ЗаказПоставщикуЗапасы.Цена / ЗаказПоставщикуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.Цена
	|	КОНЕЦ КАК Цена,
	|	ЗаказПоставщикуЗапасы.Сумма КАК Сумма,
	|	ЗаказПоставщикуЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПоставщикуЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПоставщикуЗапасы.Всего КАК Всего,
	|	ЗаказПоставщикуЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПоставщикуЗапасы.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказПоставщикуЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказПоставщикуЗапасы.Номенклатура.АлкогольнаяПродукция, ЛОЖЬ)
	|				ИЛИ ЗаказПоставщикуЗапасы.Номенклатура.ВидМаркировки = ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.МаркируемаяПродукция)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Маркируемый,
	|	ЗаказПоставщикуЗапасы.Номенклатура.Весовой КАК Весовой,
	|	ЗаказПоставщикуЗапасы.Номенклатура.Вес КАК ВесЕдиницыТовара,
	|	ЗаказПоставщикуЗапасы.Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ЗаказПоставщикуЗапасы.Номенклатура.ВидМаркировки КАК ВидМаркировки
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
	|ГДЕ
	|	ЗаказПоставщикуЗапасы.Ссылка = &Ссылка
	|	И ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ЗаказПоставщикуЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ЗаказПоставщикуЗапасы.Количество * ЗаказПоставщикуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И ЗаказПоставщикуЗапасы.ЕдиницаИзмерения.Коэффициент > 0
	|			ТОГДА ВЫРАЗИТЬ(ЗаказПоставщикуЗапасы.Цена / ЗаказПоставщикуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.Цена
	|	КОНЕЦ КАК Цена,
	|	ЗаказПоставщикуЗапасы.Сумма КАК Сумма,
	|	ЗаказПоставщикуЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПоставщикуЗапасы.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ЗаказПоставщикуЗапасы.Содержание, 1, 100) = """"
	|			ТОГДА ЗаказПоставщикуЗапасы.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
	|ГДЕ
	|	ЗаказПоставщикуЗапасы.Ссылка = &Ссылка
	|	И ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)";
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
	ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
	Результат.Вставить("Товары", ТаблицаТоваров);
	
	ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
	ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
	Результат.Вставить("Услуги", ТаблицаУслуги);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаПриходнаяНакладная(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ПриходнаяНакладнаяЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ПриходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				ТОГДА ПриходнаяНакладнаяЗапасы.Количество * ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|				ТОГДА ПриходнаяНакладнаяЗапасы.Цена / ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Цена
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ПриходнаяНакладнаяЗапасы.Сумма,
		|	ПриходнаяНакладнаяЗапасы.СтавкаНДС,
		|	ПриходнаяНакладнаяЗапасы.СуммаНДС,
		|	ПОДСТРОКА(ПриходнаяНакладнаяЗапасы.НомерГТД.Код,1,30) КАК НомерГТДСтрокой,
		|	ПриходнаяНакладнаяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
		|				И ПриходнаяНакладнаяЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ПриходнаяНакладнаяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ПриходнаяНакладнаяЗапасы.Всего,
		|	ПриходнаяНакладнаяЗапасы.Характеристика,
		|	ПриходнаяНакладнаяЗапасы.Партия,
		|	""ПоФактическомуИспользованию"" КАК ВозвратПодДеятельность,
		|	ПриходнаяНакладнаяЗапасы.Себестоимость КАК Себестоимость,
		|	ЕСТЬNULL(ПриходнаяНакладнаяЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияПрослеживаемости,
		|	ПриходнаяНакладнаяЗапасы.НомерГТД КАК НомерГТДСсылка,
		|	ПриходнаяНакладнаяЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ПриходнаяНакладнаяЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
		|ГДЕ
		|	ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|	И ПриходнаяНакладнаяЗапасы.Количество > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходнаяНакладнаяРасходы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ПриходнаяНакладнаяРасходы.Номенклатура,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				ТОГДА ПриходнаяНакладнаяРасходы.Количество * ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ПриходнаяНакладнаяРасходы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения.Коэффициент > 0
		|				ТОГДА ПриходнаяНакладнаяРасходы.Цена / ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ПриходнаяНакладнаяРасходы.Цена
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ПриходнаяНакладнаяРасходы.Сумма,
		|	ПриходнаяНакладнаяРасходы.СтавкаНДС,
		|	ПриходнаяНакладнаяРасходы.СуммаНДС,
		|	ПриходнаяНакладнаяРасходы.СтруктурнаяЕдиница КАК ПодразделениеЗатрат,
		|	ВЫБОР
		|		КОГДА ПриходнаяНакладнаяРасходы.Номенклатура.СчетУчетаЗатрат <> ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)
		|				И (ПриходнаяНакладнаяРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
		|					ИЛИ ПриходнаяНакладнаяРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПроизводственныйРасход,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ПриходнаяНакладнаяРасходы.Содержание, 1, 100) = """"
		|			ТОГДА ПриходнаяНакладнаяРасходы.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ ПриходнаяНакладнаяРасходы.Содержание
		|	КОНЕЦ КАК Содержание,
		|	ВЫБОР
		|		КОГДА ПриходнаяНакладнаяРасходы.Ссылка.ВключатьРасходыВСебестоимость
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоДопРасходы,
		|	ПриходнаяНакладнаяРасходы.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
		|	ПриходнаяНакладнаяРасходы.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ПриходнаяНакладная.Расходы КАК ПриходнаяНакладнаяРасходы
		|ГДЕ
		|	ПриходнаяНакладнаяРасходы.Ссылка = &Ссылка
		|	И ПриходнаяНакладнаяРасходы.Количество > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходнаяНакладнаяЗапасы.Номенклатура,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				ТОГДА ПриходнаяНакладнаяЗапасы.Количество * ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ПриходнаяНакладнаяЗапасы.Всего КАК СтоимостьТоваров,
		|	ПриходнаяНакладнаяЗапасы.Ссылка КАК ДокументПоступления,
		|	ПриходнаяНакладнаяЗапасы.Себестоимость КАК Себестоимость,
		|	ПриходнаяНакладнаяЗапасы.СуммаРасходов КАК Сумма,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.СуммаВключаетНДС
		|				ТОГДА ПриходнаяНакладнаяЗапасы.СуммаРасходов - ПриходнаяНакладнаяЗапасы.СуммаРасходов / ((ПриходнаяНакладнаяЗапасы.СтавкаНДС.Ставка + 100) / 100)
		|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.СуммаРасходов * ПриходнаяНакладнаяЗапасы.СтавкаНДС.Ставка / 100
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС
		|ИЗ
		|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
		|ГДЕ
		|	ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|	И ПриходнаяНакладнаяЗапасы.Ссылка.ВключатьРасходыВСебестоимость
		|	И ПриходнаяНакладнаяЗапасы.Количество > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходнаяНакладнаяПредоплата.Документ КАК Документ,
		|	ПриходнаяНакладнаяПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.ПриходнаяНакладная.Предоплата КАК ПриходнаяНакладнаяПредоплата
		|ГДЕ
		|	ПриходнаяНакладнаяПредоплата.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСведенияПрослеживаемости.Ссылка КАК Ссылка,
		|	ТаблицаСведенияПрослеживаемости.РНПТ КАК РНПТ,
		|	ТаблицаСведенияПрослеживаемости.Количество КАК Количество,
		|	ТаблицаСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
		|	ТаблицаСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.ПриходнаяНакладная.СведенияПрослеживаемости КАК ТаблицаСведенияПрослеживаемости
		|ГДЕ
		|	ТаблицаСведенияПрослеживаемости.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		//ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		Результат.Вставить("РасшифровкаДопРасходов", РезультатыЗапроса[2].Выгрузить());
			
		//ПогашениеЗадолженности = Новый ТаблицаЗначений;
		//ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		//ПогашениеЗадолженности.Колонки.Добавить("Сумма");
		//	
		//ВыборкаРасчеты = РезультатыЗапроса[3].Выбрать();
		//Пока ВыборкаРасчеты.Следующий() Цикл
		//	ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ВыборкаРасчеты.Документ, ИмяПКОДляДокумента(ВыборкаРасчеты.Документ));
		//	Если Не ЗначениеЗаполнено(ДокументРасчетов.Значение) 
		//		ИЛИ Не ЗначениеЗаполнено(ДокументРасчетов.ИмяПКО) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	СтрокаРасчеты = ПогашениеЗадолженности.Добавить();
		//	СтрокаРасчеты.ДокументРасчетов = ДокументРасчетов;
		//	СтрокаРасчеты.Сумма = ВыборкаРасчеты.Сумма;
		//КонецЦикла;
		//Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
		
		ТаблицаСведенияПрослеживаемости = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
		Результат.Вставить("СведенияПрослеживаемости", ТаблицаСведенияПрослеживаемости);
			
		Возврат Результат;
КонецФункции
Процедура ЗаполнитьСтавкиНДС_Отправка(ТабличнаяЧасть)
	ТабличнаяЧасть.Колонки.Добавить("СтавкаНДССтрокой");
		Для Каждого Строка Из ТабличнаяЧасть Цикл
		
			Если Строка.СтавкаНДС.НеОблагается Тогда	
				Строка.СтавкаНДССтрокой = "БезНДС";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 18
				И НЕ Строка.СтавкаНДС.Расчетная Тогда
				Строка.СтавкаНДССтрокой = "НДС18";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 18
				И Строка.СтавкаНДС.Расчетная Тогда
				Строка.СтавкаНДССтрокой = "НДС18_118";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 10 
				И НЕ Строка.СтавкаНДС.Расчетная Тогда
				Строка.СтавкаНДССтрокой = "НДС10";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 10 
				И Строка.СтавкаНДС.Расчетная Тогда
				Строка.СтавкаНДССтрокой = "НДС10_110";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 20 
				И НЕ Строка.СтавкаНДС.Расчетная Тогда
				Строка.СтавкаНДССтрокой = "НДС20";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 20 
				И Строка.СтавкаНДС.Расчетная Тогда
				Строка.СтавкаНДССтрокой = "НДС20_120";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 0 Тогда
				Строка.СтавкаНДССтрокой = "НДС0"; 
			Иначе
				Строка.СтавкаНДССтрокой = "БезНДС";
			КонецЕсли;
			
		КонецЦикла;
		ТабличнаяЧасть.Колонки.Удалить("СтавкаНДС");
		ТабличнаяЧасть.Колонки.СтавкаНДССтрокой.Имя = "СтавкаНДС";
КонецПроцедуры

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ВариантНастройки");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПеремещениеЗапасов_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПеремещениеЗапасов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РаспоряжениеНаОтгрузку_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РаспоряжениеНаОтгрузку_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РаспоряжениеНаПриемку_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РаспоряжениеНаПриемку_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Штрихкоды_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Штрихкоды_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Упаковки_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Упаковки_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
