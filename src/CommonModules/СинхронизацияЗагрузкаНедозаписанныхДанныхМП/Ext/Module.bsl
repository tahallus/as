
Процедура НайтиНедозаписанныеДанные(Параметры = Неопределено) Экспорт
	
	ТекущаяВерсияПриложения = СинхронизацияМПУНФ.ПолучитьТекущуюВерсиюПриложения();
	
	Структура = РегистрыСведений.СообщенияИзДругойВерсииМП.РазложитьВерсиюНаЧисла(ТекущаяВерсияПриложения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СообщенияИзДругойВерсииМП.Номер КАК Номер,
	|	СообщенияИзДругойВерсииМП.Ссылка КАК Ссылка,
	|	СообщенияИзДругойВерсииМП.ВерсияПакета КАК ВерсияПакета,
	|	СообщенияИзДругойВерсииМП.КодУзла КАК КодУзла,
	|	СообщенияИзДругойВерсииМП.Сообщение КАК Сообщение,
	|	СообщенияИзДругойВерсииМП.ПредопределенныеДанные КАК ПредопределенныеДанные,
	|	СообщенияИзДругойВерсииМП.НовыеДанные КАК НовыеДанные
	|ИЗ
	|	РегистрСведений.СообщенияИзДругойВерсииМП КАК СообщенияИзДругойВерсииМП
	|ГДЕ
	|	СообщенияИзДругойВерсииМП.Редакция <= &Редакция
	|	И СообщенияИзДругойВерсииМП.Подредакция <= &Подредакция
	|	И СообщенияИзДругойВерсииМП.Версия <= &Версия
	|	И СообщенияИзДругойВерсииМП.Сборка <= &Сборка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
	
	Запрос.УстановитьПараметр("Версия", Структура.Версия);
	Запрос.УстановитьПараметр("Подредакция", Структура.Подредакция);
	Запрос.УстановитьПараметр("Редакция", Структура.Редакция);
	Запрос.УстановитьПараметр("Сборка", Структура.Сборка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗагрузитьПакет(ВыборкаДетальныеЗаписи.Номер, ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Сообщение.Получить(), ВыборкаДетальныеЗаписи.НовыеДанные.Получить(), ВыборкаДетальныеЗаписи.ПредопределенныеДанные.Получить(), ВыборкаДетальныеЗаписи.ВерсияПакета, ВыборкаДетальныеЗаписи.КодУзла);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ЗагрузкаПакета

Процедура ЗагрузитьПакет(НомерСообщения, Ссылка, Сообщение, НовыеДанные, СтруктураПредопределенныхДанных, ВерсияПакета, КодУзла) Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Сообщение);
	
	ФабрикаВыгрузки = ФабрикаВыгрузки(ВерсияПакета);
	
	ПродолжитьЧтение = Истина;
	
	Пока ПродолжитьЧтение Цикл 
		ТипДанныхXML = ПолучитьXMLТип(ЧтениеXML);
		Если ТипДанныхXML = Неопределено Тогда 
			ПродолжитьЧтение = Ложь;
			Продолжить;
		КонецЕсли;
		
		ТипОбъектаВыгрузки = ФабрикаВыгрузки.Тип(ТипДанныхXML.URIПространстваИмен, ТипДанныхXML.ИмяТипа);
		ТипОбъекта = ФабрикаXDTO.Тип(ТипДанныхXML.URIПространстваИмен, ТипДанныхXML.ИмяТипа);
		Тип = СериализаторXDTO.ИзXMLТипа(ТипДанныхXML);
		
		Если Тип = Неопределено Тогда
			ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML);
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		
		Если ТипЗнч(ОбъектМетаданных) <> Тип("ОбъектМетаданных") Тогда
			
			Структура = Новый Структура;
			Структура.Вставить("ТекущаяДата", ТекущаяДатаСеанса());
			Структура.Вставить("НомерСообщения", НомерСообщения);
			Структура.Вставить("Сообщение", Сообщение);
			Структура.Вставить("НовыеДанные", НовыеДанные);
			Структура.Вставить("СтруктураПредопределенныхДанных", СтруктураПредопределенныхДанных);
			Структура.Вставить("ВерсияПакета", ВерсияПакета);
			Структура.Вставить("КодУзла", КодУзла);
			
			ЗаписьXML = Новый ЗаписьXML();
			ЗаписьXML.УстановитьСтроку();
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Структура, НазначениеТипаXML.Явное);
			ДопДанные = ЗаписьXML.Закрыть();
			
			ИмяСобытия = "Ошибка в синхронизации МП УНФ 2.0";
			СборСтатистикиУНФ.ОтправитьСобытиеСДопДанными(ИмяСобытия, ДопДанные);
			
			ЗафиксироватьТранзакцию();
			
			Возврат;
			
		КонецЕсли;
		
		Если ТипЗнч(НовыеДанные) = Тип("Структура") И НовыеДанные.Свойство("СтруктраМассивов") Тогда
			НовыеДанные.Вставить("СтруктураМассивов", НовыеДанные.СтруктраМассивов);
		КонецЕсли;
		
		Если Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда 
			ЗаписатьКонстанту(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, КодУзла, ТипОбъекта, ЧтениеXML, ТипОбъектаВыгрузки, Тип);
		ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			Если НовыеДанные = Неопределено Тогда
				ЗаписатьСправочник(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ВерсияПакета, КодУзла, ТипОбъекта, ЧтениеXML, ТипОбъектаВыгрузки, Тип);
			Иначе
				ДозаписатьСправочник(ФабрикаВыгрузки, ЧтениеXML, ТипОбъектаВыгрузки, ТипОбъекта, ОбъектМетаданных, НовыеДанные, Ссылка, КодУзла, СтруктураПредопределенныхДанных, Тип);
			КонецЕсли;
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
			Если НовыеДанные = Неопределено Тогда
				ЗаписатьРегистрСведений(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ВерсияПакета, КодУзла, ТипОбъекта, ЧтениеXML, ТипОбъектаВыгрузки, Тип);
			Иначе
				ДозаписатьРегистрСведений(ФабрикаВыгрузки, ЧтениеXML, ТипОбъектаВыгрузки, ТипОбъекта, ОбъектМетаданных, КодУзла, НовыеДанные, СтруктураПредопределенныхДанных, ВерсияПакета, Тип);
			КонецЕсли;
		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
			Если НовыеДанные = Неопределено Тогда
				ЗаписатьРегистрНакоплений(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ВерсияПакета, КодУзла, ТипОбъекта, ЧтениеXML, ТипОбъектаВыгрузки, Тип)
			Иначе
				ДозаписатьРегистрНакоплений(НовыеДанные, ЧтениеXML, ФабрикаВыгрузки, ТипОбъекта, ТипОбъектаВыгрузки, ОбъектМетаданных, КодУзла, СтруктураПредопределенныхДанных, Тип);
			КонецЕсли;
		ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			Если НовыеДанные = Неопределено Тогда
				ЗаписатьДокумент(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ВерсияПакета, КодУзла, ТипОбъекта, ЧтениеXML, Ссылка, ТипОбъектаВыгрузки, Тип);
			Иначе
				ДозаписатьДокумент(ФабрикаВыгрузки, ЧтениеXML, ТипОбъектаВыгрузки, ТипОбъекта, ОбъектМетаданных, НовыеДанные, Ссылка, КодУзла, СтруктураПредопределенныхДанных, Тип);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	ЗафиксироватьТранзакцию();
	
	РегистрыСведений.СообщенияИзДругойВерсииМП.УдалитьСообщение(НомерСообщения);
	
КонецПроцедуры

Функция ФабрикаВыгрузки(Версия) Экспорт
	
	Схема = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СхемыКонфигурацийМП.Схема КАК Схема,
	|	СхемыКонфигурацийМП.Версия КАК Версия
	|ИЗ
	|	РегистрСведений.СхемыКонфигурацийМП КАК СхемыКонфигурацийМП
	|ГДЕ
	|	СхемыКонфигурацийМП.Версия = &Версия";
	
	Запрос.УстановитьПараметр("Версия", Версия);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Схема = ВыборкаДетальныеЗаписи.Схема;
		Схема = Схема.Получить();
	КонецЕсли;
	
	ФайлСхемы = ПолучитьИмяВременногоФайла("xsd");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ФайлСхемы);
	ЗаписьXML.ЗаписатьБезОбработки(Схема);
	ЗаписьXML.Закрыть();
	ФабрикаВыгрузки = СоздатьФабрикуXDTO(ФайлСхемы);
	
	Возврат ФабрикаВыгрузки;
	
КонецФункции

Процедура ЗаполнитьЗначенияСвойствОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки)
	
	СвойстваИсключенияМассив = ПолучитьМассивСвойствИсключений(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки);
	СвойстваИсключенияСтрока = МассивСвойствИсключенийВСтроку(СвойстваИсключенияМассив);
	
	ЗаполнитьЗначенияСвойств(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки, , СвойстваИсключенияСтрока);
	
	Для каждого Свойство Из СвойстваИсключенияМассив Цикл
		
		Если ОбъектXDTOВыгрузки[Свойство.Имя] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеXML = СериализаторXDTO.XMLТип(ТипЗнч(ОбъектXDTOВыгрузки[Свойство.Имя]));
		НовыйОбъектТип = ФабрикаXDTO.Тип(ДанныеXML.URIПространстваИмен, ДанныеXML.ИмяТипа);
		
		НовыйОбъектXDTO = ФабрикаXDTO.Создать(НовыйОбъектТип, ОбъектXDTOВыгрузки[Свойство.Имя]);
		ОбъектXDTOКонфигурации[Свойство.Имя] = НовыйОбъектXDTO;
		
	КонецЦикла;
	
	КоллекцияСвойствВыгрузки = ОбъектXDTOВыгрузки.Свойства();
	ТипAnyType = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "anyType");
	
	Для каждого Свойство Из ОбъектXDTOКонфигурации.Свойства() Цикл
		Если ОбъектXDTOКонфигурации[Свойство.Имя] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если КоллекцияСвойствВыгрузки.Получить(Свойство.Имя) = Неопределено
			И НЕ ЭтоГруппа(ОбъектXDTOКонфигурации) Тогда 
			
			ПустоеЗначение(ОбъектXDTOКонфигурации, Свойство);
		ИначеЕсли Свойство.Тип = ТипAnyType Тогда
			ОбъектXDTOКонфигурации[Свойство.Имя] = ФабрикаXDTO.Создать(ТипAnyType);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияСвойствОбъектаXDTOДляСправочника(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки, ТипОбъекта)
	
	СвойстваИсключенияМассив = ПолучитьМассивСвойствИсключений(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки);
	СвойстваИсключенияСтрока = МассивСвойствИсключенийВСтроку(СвойстваИсключенияМассив);
	
	Если ТипЗнч(ОбъектXDTOВыгрузки.Ref) = Тип("СправочникСсылка.СпецификацииМП") Тогда
		
		FilterТип = ТипОбъекта;
		OwnerОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
		
		ЗаполнитьЗначенияСвойств(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки, , "Owner, PredefinedDataName");
		
		URL =  "http://v8.1c.ru/8.1/data/enterprise/current-config";
		
		OwnerТип = ФабрикаXDTO.Тип(URL, "CatalogRef." + Метаданные.НайтиПоТипу(ТипЗнч(ОбъектXDTOВыгрузки.Owner)).Имя);
		OwnerОбъектXDTO = ФабрикаXDTO.Создать(OwnerТип,ОбъектXDTOВыгрузки.Owner);
		
		ОбъектXDTOКонфигурации.Owner = OwnerОбъектXDTO;
		
	Иначе
		ЗаполнитьЗначенияСвойств(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки, , СвойстваИсключенияСтрока);
	КонецЕсли;
	
	
	Для каждого Свойство Из СвойстваИсключенияМассив Цикл
		
		Если ОбъектXDTOВыгрузки[Свойство.Имя] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеXML = СериализаторXDTO.XMLТип(ТипЗнч(ОбъектXDTOВыгрузки[Свойство.Имя]));
		НовыйОбъектТип = ФабрикаXDTO.Тип(ДанныеXML.URIПространстваИмен, ДанныеXML.ИмяТипа);
		
		НовыйОбъектXDTO = ФабрикаXDTO.Создать(НовыйОбъектТип, ОбъектXDTOВыгрузки[Свойство.Имя]);
		ОбъектXDTOКонфигурации[Свойство.Имя] = НовыйОбъектXDTO;
		
	КонецЦикла;
	
	КоллекцияСвойствВыгрузки = ОбъектXDTOВыгрузки.Свойства();
	ТипAnyType = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "anyType");
	
	Для каждого Свойство Из ОбъектXDTOКонфигурации.Свойства() Цикл
		Если ОбъектXDTOКонфигурации[Свойство.Имя] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если КоллекцияСвойствВыгрузки.Получить(Свойство.Имя) = Неопределено
			И НЕ ЭтоГруппа(ОбъектXDTOКонфигурации) Тогда
			
			ПустоеЗначение(ОбъектXDTOКонфигурации, Свойство);
		ИначеЕсли Свойство.Тип = ТипAnyType Тогда
			ОбъектXDTOКонфигурации[Свойство.Имя] = ФабрикаXDTO.Создать(ТипAnyType);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоГруппа(ОбъектXDTO)
	
	СвойствоЭтоГруппа = ОбъектXDTO.Свойства().Получить("IsFolder");
	Если СвойствоЭтоГруппа = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ОбъектXDTO["IsFolder"] = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ?(ОбъектXDTO["IsFolder"], Истина, Ложь);
	
КонецФункции

Процедура ПустоеЗначение(ОбъектXDTOКонфигурации, Свойство)
	
	Если Свойство.Тип.Имя = "decimal" Тогда
		Значение = 0;
	ИначеЕсли Свойство.Тип.Имя = "string" Тогда
		Значение = "";
	ИначеЕсли Свойство.Тип.Имя = "dateTime" Тогда
		Значение = Дата(1, 1, 1);
	ИначеЕсли Свойство.Тип.Имя = "boolean" Тогда
		Значение = Ложь;
	ИначеЕсли Свойство.Тип.Имя = "ValueStorage" Тогда
		Значение = Новый ХранилищеЗначения(Неопределено);
	ИначеЕсли Свойство.Тип.Имя = "УникальныйИдентификатор" Тогда
		Значение = Новый УникальныйИдентификатор;
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.КонтрагентыМП" Тогда
		Значение = Справочники.КонтрагентыМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.ТоварыМП" Тогда
		Значение = Справочники.ТоварыМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.СпецификацииМП" Тогда
		Значение = Справочники.СпецификацииМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.СтатьиМП" Тогда
		Значение = Справочники.СтатьиМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.СтавкиНДСМП" Тогда
		Значение = Справочники.СтавкиНДСМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.КассыККММП" Тогда
		Значение = Справочники.КассыККММП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.СтруктурныеЕдиницыМП" Тогда
		Значение = Справочники.СтруктурныеЕдиницыМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ВводОстатковМП" Тогда
		Значение = Документы.ВводОстатковМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ЗаказМП" Тогда
		Значение = Документы.ЗаказМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ПриходДенегМП" Тогда
		Значение = Документы.ПриходДенегМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ПриходТовараМП" Тогда
		Значение = Документы.ПриходТовараМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.РасходДенегМП" Тогда
		Значение = Документы.РасходДенегМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.РасходТовараМП" Тогда
		Значение = Документы.РасходТовараМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ЧекККММП" Тогда
		Значение = Документы.ЧекККММП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ЧекККМВозвратМП" Тогда
		Значение = Документы.ЧекККМВозвратМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ОтчетОРозничныхПродажахМП" Тогда
		Значение = Документы.ОтчетОРозничныхПродажахМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "EnumRef.СтатусЧекаККММП" Тогда
		Значение = Перечисления.СтатусЧекаККММП.ПустаяСсылка();
	КонецЕсли;
	
	ОбъектXDTOКонфигурации[Свойство.Имя] = ФабрикаXDTO.Создать(Свойство.Тип, Значение);

	
КонецПроцедуры

Функция МассивСвойствИсключенийВСтроку(Массив)
	
	СтрокаСвойствИсключений = "";
	Для каждого Элемент Из Массив Цикл 
		Если ЗначениеЗаполнено(СтрокаСвойствИсключений) Тогда 
			СтрокаСвойствИсключений = СтрокаСвойствИсключений + ",";
		КонецЕсли;
		СтрокаСвойствИсключений = СтрокаСвойствИсключений + Элемент.Имя;
	КонецЦикла;
	Возврат СтрокаСвойствИсключений;
	
КонецФункции

Процедура ЗаполнитьТЧОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки)
	
	Для каждого Свойство Из ОбъектXDTOВыгрузки.Свойства() Цикл 
		Если ТипЗнч(ОбъектXDTOВыгрузки[Свойство.Имя]) <> Тип("СписокXDTO") Тогда 
			Продолжить;
		КонецЕсли;
		
		СвойствоОбъектаXDTOКонфигурации = ОбъектXDTOКонфигурации.Свойства().Получить(Свойство.Имя);
		Если СвойствоОбъектаXDTOКонфигурации = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Для каждого ЭлементСпискаОбъектаXDTOВыгрузки Из ОбъектXDTOВыгрузки[Свойство.Имя] Цикл 
			ЭлементСпискаОбъектаXDTOКонфигурации = ФабрикаXDTO.Создать(СвойствоОбъектаXDTOКонфигурации.Тип);
			ЗаполнитьЗначенияСвойств(ЭлементСпискаОбъектаXDTOКонфигурации, ЭлементСпискаОбъектаXDTOВыгрузки);
			ОбъектXDTOКонфигурации[Свойство.Имя].Добавить(ЭлементСпискаОбъектаXDTOКонфигурации);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивСвойствИсключений(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки)
	
	ТипAnyType = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "anyType");
	МассивСвойствИсключений = Новый Массив;
	Для каждого Свойство Из ОбъектXDTOКонфигурации.Свойства() Цикл
		Если Свойство.Тип = ТипAnyType Тогда 
			МассивСвойствИсключений.Добавить(Свойство);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Свойство Из ОбъектXDTOВыгрузки.Свойства() Цикл
		Если ОбъектXDTOВыгрузки[Свойство.Имя] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивСвойствИсключений.Найти(Свойство) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СвойствоКонфигурации = ОбъектXDTOКонфигурации.Свойства().Получить(Свойство.Имя);
		Если СвойствоКонфигурации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСвойствИсключений.Добавить(СвойствоКонфигурации);
	КонецЦикла;
	
	Возврат МассивСвойствИсключений;
	
КонецФункции

#КонецОбласти

#Область ЗаписьНовогоОбъекта

Процедура ЗаписатьКонстанту(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, КодУзла, ТипОбъекта, ЧтениеXML, ТипОбъектаВыгрузки, Тип)
	
	ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML, ТипОбъектаВыгрузки);
	ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если ПланыОбмена.СинхронизацияМП.ЭтотУзел().Код <> "001" Тогда
		СинхронизацияРаботаСКлассификаторамиМП.ПоискСсылокНаКлассификаторыВОбъектеXDTOДляКонстанты(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойствОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки);
	
	Если СтруктураПредопределенныхДанных <> Неопределено Тогда
		Если СтруктураПредопределенныхДанных.Количество() > 0 Тогда
			СинхронизацияРаботаСПредопределеннымиДаннымиМП.НачатьЗаписьПредопределенныхДанных(ОбъектXDTOКонфигурации, СтруктураПредопределенныхДанных, ОбъектМетаданных, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Константа = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTOКонфигурации);
	Константа.ОбменДанными.Загрузка = Истина;
	Константа.Записать();
	
	СтруктураПредопределенныхДанных = Неопределено;
	
	УдалитьРегистрациюИзменений(КодУзла, Константа);
	
КонецПроцедуры

Процедура ЗаписатьСправочник(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ВерсияПакета, КодУзла, ТипОбъекта, ЧтениеXML, ТипОбъектаВыгрузки, Тип)
	
	ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML, ТипОбъектаВыгрузки);
	ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если ПланыОбмена.СинхронизацияМП.ЭтотУзел().Код <> "001" Тогда
		СинхронизацияРаботаСКлассификаторамиМП.ПоискСсылокНаКлассификаторыВОбъектеXDTOДляСправочникаИлиДокумента(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
	КонецЕсли;
	
	СинхронизацияРаботаСПредопределеннымиДаннымиМП.НайтиПредопределенныеДанные(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
	СинхронизацияРаботаСКлассификаторамиМП.НайтиКлассификаторы(ОбъектXDTOВыгрузки, ОбъектМетаданных);
	
	ЗаполнитьЗначенияСвойствОбъектаXDTOДляСправочника(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки, ТипОбъекта);
	ЗаполнитьТЧОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки);
	
	ВерсияПакетаБольшеТекущейВерсии = СравнитьВерсии(СинхронизацияМПУНФ.ПолучитьТекущуюВерсиюПриложения(), ВерсияПакета);
	
	СтруктураСНовымиДанными = Неопределено;
	Если ВерсияПакетаБольшеТекущейВерсии Тогда
		Если Метаданные.Справочники[ОбъектМетаданных.Имя].ДлинаКода > 0 Тогда
			НайденнаяСсылка = Справочники[ОбъектМетаданных.Имя].НайтиПоКоду(ОбъектXDTOВыгрузки.code);
		Иначе
			НайденнаяСсылка = Справочники[ОбъектМетаданных.Имя].НайтиПоНаименованию(ОбъектXDTOВыгрузки.Description, Истина);
		КонецЕсли;
		СтруктураСНовымиДанными = СинхронизацияПоискИСохранениеДанныхИзДругойВерсииМП.НайтиДанныеИзДругойВерсии(ОбъектXDTOВыгрузки, ОбъектXDTOКонфигурации, ВерсияПакета, СтруктураПредопределенныхДанных, НайденнаяСсылка, КодУзла);
	КонецЕсли;
	
	Если СтруктураПредопределенныхДанных <> Неопределено Тогда
		Если СтруктураПредопределенныхДанных.МассивПредопределенныхРеквизитовВТЧ.Количество() > 0 ИЛИ СтруктураПредопределенныхДанных.СтруктураПредопределенныхРеквизитов.Количество() > 0 Тогда
			СинхронизацияРаботаСПредопределеннымиДаннымиМП.НачатьЗаписьПредопределенныхДанных(ОбъектXDTOКонфигурации, СтруктураПредопределенныхДанных, ОбъектМетаданных, СтруктураСНовымиДанными);
		КонецЕсли;
	КонецЕсли;
	
	Если КодУзла <> "001" Тогда
		ЗаписьНовогоНомера = ПоискОдинаковогоНомераУСправочникаИлиДокументаДляЦентральногоУзла(ОбъектXDTOКонфигурации, КодУзла, ОбъектМетаданных);
	КонецЕсли;
	
	Справочник = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTOКонфигурации);
	Справочник.ОбменДанными.Загрузка = Истина;
	Справочник.Записать();
	
	Если КодУзла <> "001" Тогда
		Если ЗаписьНовогоНомера Тогда
			СправочникОбъект = ОбъектXDTOКонфигурации.Ref.ПолучитьОбъект();
			СправочникОбъект.УстановитьНовыйКод();
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
			СтруктураЗаписи = Новый Структура("КодУзла, Ссылка, Номер", КодУзла, СправочникОбъект.Ссылка.УникальныйИдентификатор(),СправочникОбъект.Код);
			РегистрыСведений.НомераСправочниковИДокументовДляИзмененияНаКлиентскомУзлеМП.ЗаписатьИнформацию(СтруктураЗаписи);
			ПланыОбмена.УдалитьРегистрациюИзменений(ПланыОбмена.СинхронизацияМП.НайтиПоКоду(КодУзла), СправочникОбъект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если ВерсияПакетаБольшеТекущейВерсии Тогда
		СинхронизацияПоискИСохранениеДанныхИзДругойВерсииМП.СохранитьНовыеДанные(СтруктураСНовымиДанными, ОбъектXDTOВыгрузки, ВерсияПакета, СтруктураПредопределенныхДанных, КодУзла);
	КонецЕсли;
	
	СтруктураПредопределенныхДанных = Неопределено;
	
	Если Метаданные.Справочники[ОбъектМетаданных.Имя].ДлинаКода > 0 Тогда // Возможно будет работать ОбъектXDTOВыгрузки.Ref
		НайденнаяСсылка = Справочники[ОбъектМетаданных.Имя].НайтиПоКоду(ОбъектXDTOВыгрузки.code);
	Иначе
		НайденнаяСсылка = Справочники[ОбъектМетаданных.Имя].НайтиПоНаименованию(ОбъектXDTOВыгрузки.Description, Истина);
	КонецЕсли;
	
	УдалитьРегистрациюИзменений(КодУзла, НайденнаяСсылка);
	
КонецПроцедуры

Процедура ЗаписатьРегистрСведений(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ВерсияПакета, КодУзла, ТипОбъекта, ЧтениеXML, ТипОбъектаВыгрузки, Тип)
	
	ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML,ТипОбъектаВыгрузки);
	ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если ПланыОбмена.СинхронизацияМП.ЭтотУзел().Код <> "001" Тогда
		СинхронизацияРаботаСКлассификаторамиМП.ПоискСсылокНаКлассификаторыВОбъектеXDTOДляРегистраСведенийИлиРегистраНакопления(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
	КонецЕсли;
	
	ВерсияПакетаБольшеТекущейВерсии = СравнитьВерсии(СинхронизацияМПУНФ.ПолучитьТекущуюВерсиюПриложения(), ВерсияПакета);
	
	Статус = Перечисления.СтатусыПоискаНовыхДанныхВРегистрахМП.НичегоНеНайдено;
	Если ВерсияПакетаБольшеТекущейВерсии Тогда
		Регистр = "РегистрыСведений";
		СтруктураСНовымиДанными = СинхронизацияПоискИСохранениеДанныхИзДругойВерсииМП.НайтиДанныеИзДругойВерсииДляРегистра(Регистр, ОбъектXDTOВыгрузки, ОбъектXDTOКонфигурации, ВерсияПакета, ОбъектМетаданных, ФабрикаВыгрузки, ЧтениеXML, ТипОбъекта, КодУзла, СтруктураПредопределенныхДанных);
		Статус = СтруктураСНовымиДанными.Результат;
	КонецЕсли;
	
	Если Статус <> Перечисления.СтатусыПоискаНовыхДанныхВРегистрахМП.ВВыгрузкеНеХватаетИзмерения Тогда
		
		Регистры = РегистрыСведений[ОбъектМетаданных.Имя];
		СтруктураПредопределенныхДанныхДляСохранения = СтруктураПредопределенныхДанных;
		
		Для каждого ЗаписьВыгрузки Из ОбъектXDTOВыгрузки.Record Цикл
			
			ЗаписьТип = ТипОбъекта.Свойства.Получить("Record").Тип;
			Запись = ФабрикаXDTO.Создать(ЗаписьТип);
			
			ЗаполнитьЗначенияСвойствОбъектаXDTO(Запись, ЗаписьВыгрузки);
			
			Если СтруктураПредопределенныхДанных <> Неопределено Тогда
				Если СтруктураПредопределенныхДанных.Количество() > 0 Тогда
					СинхронизацияРаботаСПредопределеннымиДаннымиМП.НачатьЗаписьПредопределенныхДанных(Запись, СтруктураПредопределенныхДанных, ОбъектМетаданных, СтруктураСНовымиДанными);
				КонецЕсли;
			КонецЕсли;
			
			ОбъектXDTOКонфигурации.Record.Добавить(Запись);
			
		КонецЦикла;
		
		FilterТип = ТипОбъекта.Свойства.Получить("Filter").Тип;
		FilterОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
		
		Для каждого FilterItemВыгрузки Из ОбъектXDTOВыгрузки.Filter.FilterItem Цикл
			
			Если FilterItemВыгрузки.Name = "Recorder" Тогда
				ЗаписатьРегистрСведенийСРегистратором(FilterItemВыгрузки, FilterОбъектXDTO, FilterТип);
				Продолжить;
			КонецЕсли;
			
			ИзмерениеКонфигурации = Метаданные.РегистрыСведений[ОбъектМетаданных.Имя].Измерения.Найти(FilterItemВыгрузки.Name);
			
			Если ИзмерениеКонфигурации <> Неопределено Тогда 
				ИмяИзмерения = ИзмерениеКонфигурации.Имя ;
				
				Если FilterItemВыгрузки.Name = ИмяИзмерения Тогда
					FilterItemТип = FilterТип.Свойства.Получить("FilterItem").Тип;
					FilterItemОбъектXDTO = ФабрикаXDTO.Создать(FilterItemТип);
					
					Если (ТипЗнч(FilterItemВыгрузки.Value)) = Тип("Строка") ИЛИ (ТипЗнч(FilterItemВыгрузки.Value)) = Тип("Число") Тогда
						FilterItemТип = FilterТип.Свойства.Получить("FilterItem").Тип;
						FilterItemОбъектXDTO = ФабрикаXDTO.Создать(FilterItemТип);
						
						ЗаполнитьЗначенияСвойств(FilterItemОбъектXDTO, FilterItemВыгрузки, , "Usage, ComparisonType, ValueFrom, ValueTo");
						
						FilterОбъектXDTO.FilterItem.Добавить(FilterItemОбъектXDTO);
					Иначе
						ЗаполнитьЗначенияСвойств(FilterItemОбъектXDTO, FilterItemВыгрузки, , "Value, Usage, ComparisonType, ValueFrom, ValueTo");
						
						URL = FilterItemТип.URIПространстваИмен + "/current-config";
						
						ValueТип = ФабрикаXDTO.Тип(URL, "CatalogRef." + Метаданные.НайтиПоТипу(ТипЗнч(FilterItemВыгрузки.Value)).Имя);
						
						Если СтруктураПредопределенныхДанных <> Неопределено Тогда
							НайденноеЗначение = Неопределено;
							СтруктураПредопределенныхДанных.Свойство(FilterItemВыгрузки.Name, НайденноеЗначение);
						КонецЕсли;
						Если НайденноеЗначение <> Неопределено Тогда
							Для каждого Элемент Из СтруктураПредопределенныхДанных Цикл
								Если Элемент.Ключ = FilterItemВыгрузки.Name Тогда
									ОбъектМетаданныхРеквизита = Метаданные.НайтиПоТипу(ТипЗнч(FilterItemВыгрузки.Value));
									НужныйРеквизит = Справочники[ОбъектМетаданныхРеквизита.Имя][Элемент.Значение];
									ValueОбъектXDTO = ФабрикаXDTO.Создать(ValueТип, НужныйРеквизит);
									FilterItemОбъектXDTO.Value = ValueОбъектXDTO;
								КонецЕсли;
							КонецЦикла;
						Иначе
							ValueОбъектXDTO = ФабрикаXDTO.Создать(ValueТип, FilterItemВыгрузки.Value);
							FilterItemОбъектXDTO.Value = ValueОбъектXDTO;
						КонецЕсли;
						
						FilterОбъектXDTO.FilterItem.Добавить(FilterItemОбъектXDTO);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			
		КонецЦикла;
		ОбъектXDTOКонфигурации.Filter = FilterОбъектXDTO;
		
		НаборЗаписей = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTOКонфигурации);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЕсли;
	
	СтруктураПредопределенныхДанных = Неопределено;
	
	УдалитьРегистрациюИзменений(КодУзла, НаборЗаписей);
	
КонецПроцедуры

Процедура ЗаписатьРегистрСведенийСРегистратором(Знач FilterItemВыгрузки, Знач FilterОбъектXDTO, Знач FilterТип)
	
	Перем FilterItemОбъектXDTO, FilterItemТип, URL, ValueОбъектXDTO, ValueТип;
	
	FilterItemТип = FilterТип.Свойства.Получить("FilterItem").Тип;
	FilterItemОбъектXDTO = ФабрикаXDTO.Создать(FilterItemТип);
	
	ЗаполнитьЗначенияСвойств(FilterItemОбъектXDTO, FilterItemВыгрузки, , "Value, Usage, ComparisonType, ValueFrom, ValueTo");
	
	URL = FilterItemТип.URIПространстваИмен + "/current-config";
	
	ValueТип = ФабрикаXDTO.Тип(URL, "DocumentRef." + Метаданные.НайтиПоТипу(ТипЗнч(FilterItemВыгрузки.Value)).Имя);
	ValueОбъектXDTO = ФабрикаXDTO.Создать(ValueТип, FilterItemВыгрузки.Value);
	FilterItemОбъектXDTO.Value = ValueОбъектXDTO;
	
	FilterОбъектXDTO.FilterItem.Добавить(FilterItemОбъектXDTO);

КонецПроцедуры

Процедура ЗаписатьРегистрНакоплений(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ВерсияПакета, КодУзла, ТипОбъекта, ЧтениеXML, ТипОбъектаВыгрузки, Тип)
	
	ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML,ТипОбъектаВыгрузки);
	ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если ПланыОбмена.СинхронизацияМП.ЭтотУзел().Код <> "001" Тогда
		СинхронизацияРаботаСКлассификаторамиМП.ПоискСсылокНаКлассификаторыВОбъектеXDTOДляРегистраСведенийИлиРегистраНакопления(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
	КонецЕсли;
	
	ВерсияПакетаБольшеТекущейВерсии = СравнитьВерсии(СинхронизацияМПУНФ.ПолучитьТекущуюВерсиюПриложения(), ВерсияПакета);
	
	Статус = Перечисления.СтатусыПоискаНовыхДанныхВРегистрахМП.НичегоНеНайдено;
	Если ВерсияПакетаБольшеТекущейВерсии Тогда
		Регистр = "РегистрыНакопления";
		СтруктураСНовымиДанными = СинхронизацияПоискИСохранениеДанныхИзДругойВерсииМП.НайтиДанныеИзДругойВерсииДляРегистра(Регистр, ОбъектXDTOВыгрузки, ОбъектXDTOКонфигурации, ВерсияПакета, ОбъектМетаданных, ФабрикаВыгрузки, ЧтениеXML, ТипОбъекта, КодУзла, СтруктураПредопределенныхДанных);
		Статус = СтруктураСНовымиДанными.Результат;
	КонецЕсли;
	
	Если Статус <> Перечисления.СтатусыПоискаНовыхДанныхВРегистрахМП.ВВыгрузкеНеХватаетИзмерения Тогда
		
		Для каждого ЗаписьВыгрузки Из ОбъектXDTOВыгрузки.Record Цикл
			ЗаписьТип = ТипОбъекта.Свойства.Получить("Record").Тип;
			Запись = ФабрикаXDTO.Создать(ЗаписьТип);
			
			ЗаполнитьЗначенияСвойствОбъектаXDTO(Запись, ЗаписьВыгрузки);
			
			Если СтруктураПредопределенныхДанных <> Неопределено Тогда
				Если СтруктураПредопределенныхДанных.Количество() > 0 Тогда
					СинхронизацияРаботаСПредопределеннымиДаннымиМП.НачатьЗаписьПредопределенныхДанных(Запись, СтруктураПредопределенныхДанных, ОбъектМетаданных, СтруктураСНовымиДанными);
				КонецЕсли;
			КонецЕсли;
			
			ОбъектXDTOКонфигурации.Record.Добавить(Запись);
		КонецЦикла;
		
		FilterТип = ТипОбъекта.Свойства.Получить("Filter").Тип;
		FilterОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
		
		Для каждого FilterItemВыгрузки Из ОбъектXDTOВыгрузки.Filter.FilterItem Цикл 
			
			FilterItemТип = FilterТип.Свойства.Получить("FilterItem").Тип;
			FilterItemОбъектXDTO = ФабрикаXDTO.Создать(FilterItemТип);
			
			ЗаполнитьЗначенияСвойств(FilterItemОбъектXDTO, FilterItemВыгрузки, , "Value, Usage, ComparisonType, ValueFrom, ValueTo");
			
			URL = FilterItemТип.URIПространстваИмен + "/current-config";
			
			ValueТип = ФабрикаXDTO.Тип(URL, "DocumentRef." + Метаданные.НайтиПоТипу(ТипЗнч(FilterItemВыгрузки.Value)).Имя);
			ValueОбъектXDTO = ФабрикаXDTO.Создать(ValueТип, FilterItemВыгрузки.Value);
			FilterItemОбъектXDTO.Value = ValueОбъектXDTO;
			
			FilterОбъектXDTO.FilterItem.Добавить(FilterItemОбъектXDTO);
		КонецЦикла;
		
		ОбъектXDTOКонфигурации.Filter = FilterОбъектXDTO;
		
		НаборЗаписей = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTOКонфигурации);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	СтруктураПредопределенныхДанных = Неопределено;

	
	УдалитьРегистрациюИзменений(КодУзла, НаборЗаписей);
	
КонецПроцедуры

Процедура ЗаписатьДокумент(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ВерсияПакета, КодУзла, ТипОбъекта, ЧтениеXML, Ссылка, ТипОбъектаВыгрузки, Тип)
	
	ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML, ТипОбъектаВыгрузки);
	ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если ПланыОбмена.СинхронизацияМП.ЭтотУзел().Код <> "001" Тогда
		СинхронизацияРаботаСКлассификаторамиМП.ПоискСсылокНаКлассификаторыВОбъектеXDTOДляСправочникаИлиДокумента(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойствОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки);
	ЗаполнитьТЧОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки);
	
	ВерсияПакетаБольшеТекущейВерсии = СравнитьВерсии(СинхронизацияМПУНФ.ПолучитьТекущуюВерсиюПриложения(), ВерсияПакета);
	
	СтруктураСНовымиДанными = Неопределено;
	Если ВерсияПакетаБольшеТекущейВерсии Тогда
		НайденнаяСсылка = ОбъектXDTOВыгрузки.Ref;
		СтруктураСНовымиДанными = СинхронизацияПоискИСохранениеДанныхИзДругойВерсииМП.НайтиДанныеИзДругойВерсии(ОбъектXDTOВыгрузки, ОбъектXDTOКонфигурации, ВерсияПакета, СтруктураПредопределенныхДанных,НайденнаяСсылка,КодУзла);
	КонецЕсли;
	
	Если СтруктураПредопределенныхДанных <> Неопределено Тогда
		Если СтруктураПредопределенныхДанных.МассивПредопределенныхРеквизитовВТЧ.Количество() > 0 ИЛИ СтруктураПредопределенныхДанных.СтруктураПредопределенныхРеквизитов.Количество() > 0 Тогда
			СинхронизацияРаботаСПредопределеннымиДаннымиМП.НачатьЗаписьПредопределенныхДанных(ОбъектXDTOКонфигурации, СтруктураПредопределенныхДанных, ОбъектМетаданных, СтруктураСНовымиДанными);
		КонецЕсли;
	КонецЕсли;
	
	Если КодУзла <> "001" Тогда
		ЗаписьНовогоНомера = ПоискОдинаковогоНомераУСправочникаИлиДокументаДляЦентральногоУзла(ОбъектXDTOКонфигурации, КодУзла, ОбъектМетаданных);
	КонецЕсли;
	
	Документ = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTOКонфигурации);
	Документ.ОбменДанными.Загрузка = Истина;
	Документ.ДополнительныеСвойства.Вставить("ЗапретитьОперацииСоСвязаннымиДокументами", Истина);
	Документ.Записать();

	Если КодУзла <> "001" Тогда
		Если ЗаписьНовогоНомера Тогда
			ДокументОбъект = ОбъектXDTOКонфигурации.Ref.ПолучитьОбъект();
			ДокументОбъект.УстановитьНовыйНомер();
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			СтруктураЗаписи = Новый Структура("КодУзла, Ссылка, Номер", КодУзла, ДокументОбъект.Ссылка.УникальныйИдентификатор(), ДокументОбъект.Номер);
			РегистрыСведений.НомераСправочниковИДокументовДляИзмененияНаКлиентскомУзлеМП.ЗаписатьИнформацию(СтруктураЗаписи);
			ПланыОбмена.УдалитьРегистрациюИзменений(ПланыОбмена.СинхронизацияМП.НайтиПоКоду(КодУзла), ДокументОбъект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если ВерсияПакетаБольшеТекущейВерсии Тогда
		СинхронизацияПоискИСохранениеДанныхИзДругойВерсииМП.СохранитьНовыеДанные(СтруктураСНовымиДанными, ОбъектXDTOВыгрузки, ВерсияПакета, СтруктураПредопределенныхДанных, КодУзла);
	КонецЕсли;
	
	СтруктураПредопределенныхДанных = Неопределено;
	
	УдалитьРегистрациюИзменений(КодУзла, Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ДозаписываниеСуществующегоОбъекта

Процедура ДозаписатьСправочник(ФабрикаВыгрузки, ЧтениеXML, ТипОбъектаВыгрузки, ТипОбъекта, ОбъектМетаданных, НовыеДанные, Ссылка, КодУзла, СтруктураПредопределенныхДанных, Тип)
	
	МассивСНовымиРеквизитамиТЧ = НовыеДанные.СтруктураМассивов.МассивСНовымиРеквизитамиТЧ;
	МассивСНовымиРеквизитами = НовыеДанные.МассивСНовымиРеквизитами;
	
	ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML, ТипОбъектаВыгрузки);
	ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если ПланыОбмена.СинхронизацияМП.ЭтотУзел().Код <> "001" Тогда
		ЕстьДанныеВТаблицеРегистрации = ЗапросКСправочнику(ОбъектXDTOВыгрузки.Ref, ОбъектМетаданных.Имя);
		Если ЕстьДанныеВТаблицеРегистрации Тогда
			СтруктураПредопределенныхДанных = Неопределено;
			Возврат;
		КонецЕсли;
		СинхронизацияРаботаСКлассификаторамиМП.ПоискСсылокНаКлассификаторыВОбъектеXDTOДляСправочникаИлиДокумента(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
	КонецЕсли;
	
	СинхронизацияРаботаСПредопределеннымиДаннымиМП.НайтиПредопределенныеДанные(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
	СинхронизацияРаботаСКлассификаторамиМП.НайтиКлассификаторы(ОбъектXDTOВыгрузки, ОбъектМетаданных);
	
	Если СтруктураПредопределенныхДанных <> Неопределено Тогда
		Если СтруктураПредопределенныхДанных.МассивПредопределенныхРеквизитовВТЧ.Количество() > 0 ИЛИ СтруктураПредопределенныхДанных.СтруктураПредопределенныхРеквизитов.Количество() > 0 Тогда
			СинхронизацияРаботаСПредопределеннымиДаннымиМП.НачатьЗаписьПредопределенныхДанных(ОбъектXDTOВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, НовыеДанные);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьРеквизитов = ПроверкаРеквизитовДляСправочниковИДокументов(МассивСНовымиРеквизитами, ОбъектXDTOВыгрузки, Ссылка);
	СтруктураЗаписиТЧ = ПроверкаТабличнойЧасти(НовыеДанные, Ссылка, ОбъектXDTOВыгрузки, ОбъектXDTOКонфигурации, ОбъектМетаданных);
	СтруктураЗаписиНовыхТЧ = ПроверитьНовуюТЧ(ОбъектXDTOВыгрузки, Ссылка, НовыеДанные.СтруктураМассивов.МассивСНаименованиямиНовыхТЧ);
	
	ЗаписьСправочникаИлиДокументаПослеПроверки(ЗаписьРеквизитов, СтруктураЗаписиТЧ, МассивСНовымиРеквизитами, Ссылка, КодУзла, ОбъектXDTOВыгрузки, СтруктураЗаписиНовыхТЧ, ОбъектМетаданных);
	
КонецПроцедуры

Процедура ДозаписатьРегистрСведений(ФабрикаВыгрузки, ЧтениеXML, ТипОбъектаВыгрузки, ТипОбъекта, ОбъектМетаданных, КодУзла, НовыеДанные, СтруктураПредопределенныхДанных, ВерсияПакета, Тип)
	
	Регистр = "РегистрыСведений";
	МассивНовыхИзмерений = НовыеДанные.МассивСНовымиИзмерениями;
	МассивНовыхРесурсовИРеквизитов = НовыеДанные.МассивСНовымиРесурсамиИРеквизитами;
	ПолнаяЗагрузка = НовыеДанные.ПолнаяЗагрузка;
	
	ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML,ТипОбъектаВыгрузки);
	ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если ПланыОбмена.СинхронизацияМП.ЭтотУзел().Код <> "001" Тогда
		ЕстьДанныеВТаблицеРегистрации = ЗапросКРегиструСведений(ОбъектXDTOВыгрузки, ОбъектМетаданных.Имя, ТипОбъекта);
		Если ЕстьДанныеВТаблицеРегистрации Тогда
			СтруктураПредопределенныхДанных = Неопределено;
			Возврат;
		КонецЕсли;
		СинхронизацияРаботаСКлассификаторамиМП.ПоискСсылокНаКлассификаторыВОбъектеXDTOДляРегистраСведенийИлиРегистраНакопления(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
	КонецЕсли;
	
	Если СтруктураПредопределенныхДанных <> Неопределено Тогда
		Если СтруктураПредопределенныхДанных.Количество() > 0 Тогда
			ЗаписьПредопределенныхДанных(ОбъектXDTOВыгрузки, СтруктураПредопределенныхДанных,ОбъектМетаданных, ТипОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеБылиИзменены = ПроверкаДанныхРегистра(Регистр, ОбъектXDTOВыгрузки, ОбъектXDTOКонфигурации, ТипОбъекта, ОбъектМетаданных, НовыеДанные);
	
	Если ПолнаяЗагрузка И НЕ ДанныеБылиИзменены Тогда
		
		Регистры = РегистрыСведений[ОбъектМетаданных.Имя];
		СтруктураПредопределенныхДанныхДляСохранения = СтруктураПредопределенныхДанных;
		
		Для каждого ЗаписьВыгрузки Из ОбъектXDTOВыгрузки.Record Цикл
			
			ЗаписьТип = ТипОбъекта.Свойства.Получить("Record").Тип;
			Запись = ФабрикаXDTO.Создать(ЗаписьТип);
			
			ЗаполнитьЗначенияСвойствОбъектаXDTO(Запись, ЗаписьВыгрузки);
			
			Если СтруктураПредопределенныхДанных <> Неопределено Тогда
				Если СтруктураПредопределенныхДанных.Количество() > 0 Тогда
					СинхронизацияРаботаСПредопределеннымиДаннымиМП.НачатьЗаписьПредопределенныхДанных(Запись, СтруктураПредопределенныхДанных, ОбъектМетаданных, НовыеДанные);
				КонецЕсли;
			КонецЕсли;
			
			ОбъектXDTOКонфигурации.Record.Добавить(Запись);
			
		КонецЦикла;
		
		FilterТип = ТипОбъекта.Свойства.Получить("Filter").Тип;
		FilterОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
		
		Для каждого FilterItemВыгрузки Из ОбъектXDTOВыгрузки.Filter.FilterItem Цикл
			
			Если FilterItemВыгрузки.Name = "Recorder" Тогда
				ЗаписатьРегистрСведенийСРегистратором(FilterItemВыгрузки, FilterОбъектXDTO, FilterТип);
				Продолжить;
			КонецЕсли;
			
			ИзмерениеКонфигурации = Метаданные.РегистрыСведений[ОбъектМетаданных.Имя].Измерения.Найти(FilterItemВыгрузки.Name);
			
			Если ИзмерениеКонфигурации <> Неопределено Тогда 
				ИмяИзмерения = ИзмерениеКонфигурации.Имя ;
				
				Если FilterItemВыгрузки.Name = ИмяИзмерения Тогда
					FilterItemТип = FilterТип.Свойства.Получить("FilterItem").Тип;
					FilterItemОбъектXDTO = ФабрикаXDTO.Создать(FilterItemТип);
					
					Если (ТипЗнч(FilterItemВыгрузки.Value)) = Тип("Строка") ИЛИ (ТипЗнч(FilterItemВыгрузки.Value)) = Тип("Число") Тогда
						FilterItemТип = FilterТип.Свойства.Получить("FilterItem").Тип;
						FilterItemОбъектXDTO = ФабрикаXDTO.Создать(FilterItemТип);
						
						ЗаполнитьЗначенияСвойств(FilterItemОбъектXDTO, FilterItemВыгрузки, , "Usage, ComparisonType, ValueFrom, ValueTo");
						
						FilterОбъектXDTO.FilterItem.Добавить(FilterItemОбъектXDTO);
					Иначе
						ЗаполнитьЗначенияСвойств(FilterItemОбъектXDTO, FilterItemВыгрузки, , "Value, Usage, ComparisonType, ValueFrom, ValueTo");
						
						URL = FilterItemТип.URIПространстваИмен + "/current-config";
						
						ValueТип = ФабрикаXDTO.Тип(URL, "CatalogRef." + Метаданные.НайтиПоТипу(ТипЗнч(FilterItemВыгрузки.Value)).Имя);
						
						Если СтруктураПредопределенныхДанных <> Неопределено Тогда
							НайденноеЗначение = Неопределено;
							СтруктураПредопределенныхДанных.Свойство(FilterItemВыгрузки.Name, НайденноеЗначение);
						КонецЕсли;
						Если НайденноеЗначение <> Неопределено Тогда
							Для каждого Элемент Из СтруктураПредопределенныхДанных Цикл
								Если Элемент.Ключ = FilterItemВыгрузки.Name Тогда
									ОбъектМетаданныхРеквизита = Метаданные.НайтиПоТипу(ТипЗнч(FilterItemВыгрузки.Value));
									НужныйРеквизит = Справочники[ОбъектМетаданныхРеквизита.Имя][Элемент.Значение];
									ValueОбъектXDTO = ФабрикаXDTO.Создать(ValueТип, НужныйРеквизит);
									FilterItemОбъектXDTO.Value = ValueОбъектXDTO;
								КонецЕсли;
							КонецЦикла;
						Иначе
							ValueОбъектXDTO = ФабрикаXDTO.Создать(ValueТип, FilterItemВыгрузки.Value);
							FilterItemОбъектXDTO.Value = ValueОбъектXDTO;
						КонецЕсли;
						
						FilterОбъектXDTO.FilterItem.Добавить(FilterItemОбъектXDTO);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		ОбъектXDTOКонфигурации.Filter = FilterОбъектXDTO;
		
		НаборЗаписей = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTOКонфигурации);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		ПланыОбмена.УдалитьРегистрациюИзменений(ПланыОбмена.СинхронизацияМП.НайтиПоКоду(КодУзла), НаборЗаписей);
		
	ИначеЕсли НЕ ДанныеБылиИзменены Тогда
		
		Регистр = РегистрыСведений[ОбъектМетаданных.Имя];
		
		FilterТип = ТипОбъекта.Свойства.Получить("Filter").Тип;
		FilterОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
		
		НаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
		
		Для каждого FilterItemВыгрузки Из ОбъектXDTOВыгрузки.Filter.FilterItem Цикл
			
			Если FilterItemВыгрузки.Name = "Recorder" Тогда
				НаборЗаписей.Отбор.Регистратор.Установить(FilterItemВыгрузки.Value);
				Продолжить;
			ИначеЕсли FilterItemВыгрузки.Name = "Period" Тогда
				НаборЗаписей.Отбор.Период.Установить(FilterItemВыгрузки.Value);
				Продолжить;
			КонецЕсли;
			ИзмерениеРегистра = Метаданные.РегистрыСведений[ОбъектМетаданных.Имя].Измерения.Найти(FilterItemВыгрузки.Name);
			Если МассивНовыхИзмерений.Найти(ИзмерениеРегистра.Имя) = Неопределено Тогда
				НаборЗаписей.Отбор[ИзмерениеРегистра.Имя].Установить(FilterItemВыгрузки.Value);
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Прочитать();
		
		Для каждого Запись Из НаборЗаписей Цикл
			Для каждого ЗаписьВыгрузки Из ОбъектXDTOВыгрузки.Record Цикл
				Для каждого Элемент Из МассивНовыхРесурсовИРеквизитов Цикл
					Запись[Элемент] = ЗаписьВыгрузки[Элемент];
				КонецЦикла;
				Для каждого Элемент Из МассивНовыхИзмерений Цикл
					Запись[Элемент] = ЗаписьВыгрузки[Элемент];
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ПланыОбмена.УдалитьРегистрациюИзменений(ПланыОбмена.СинхронизацияМП.НайтиПоКоду(КодУзла), НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДозаписатьРегистрНакоплений(НовыеДанные, ЧтениеXML, ФабрикаВыгрузки, ТипОбъекта, ТипОбъектаВыгрузки, ОбъектМетаданных, КодУзла, СтруктураПредопределенныхДанных, Тип)
	
	Регистр = "РегистрыНакопления";
	МассивНовыхИзмерений = НовыеДанные.МассивСНовымиИзмерениями;
	МассивНовыхРесурсовИРеквизитов = НовыеДанные.МассивСНовымиРесурсамиИРеквизитами;
	ПолнаяЗагрузка = НовыеДанные.ПолнаяЗагрузка;
	
	ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML, ТипОбъектаВыгрузки);
	ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если ПланыОбмена.СинхронизацияМП.ЭтотУзел().Код <> "001" Тогда
		ЕстьДанныеВТаблицеРегистрации = ЗапросКРегиструНакопления(ОбъектXDTOВыгрузки, ОбъектМетаданных.Имя, ТипОбъекта);
		Если ЕстьДанныеВТаблицеРегистрации Тогда
			СтруктураПредопределенныхДанных = Неопределено;
			Возврат;
		КонецЕсли;
		СинхронизацияРаботаСКлассификаторамиМП.ПоискСсылокНаКлассификаторыВОбъектеXDTOДляРегистраСведенийИлиРегистраНакопления(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
	КонецЕсли;
	
	Для каждого ЗаписьВыгрузки Из ОбъектXDTOВыгрузки.Record Цикл 
		Если СтруктураПредопределенныхДанных <> Неопределено Тогда
			Если СтруктураПредопределенныхДанных.Количество() > 0 Тогда
				ЗаписьПредопределенныхДанных(ЗаписьВыгрузки, СтруктураПредопределенныхДанных,ОбъектМетаданных, НовыеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеБылиИзменены = ПроверкаДанныхРегистра(Регистр, ОбъектXDTOВыгрузки, ОбъектXDTOКонфигурации, ТипОбъекта, ОбъектМетаданных, НовыеДанные);
	
	Если ПолнаяЗагрузка И НЕ ДанныеБылиИзменены Тогда
		
		Для каждого ЗаписьВыгрузки Из ОбъектXDTOВыгрузки.Record Цикл
			ЗаписьТип = ТипОбъекта.Свойства.Получить("Record").Тип;
			Запись = ФабрикаXDTO.Создать(ЗаписьТип);
			
			ЗаполнитьЗначенияСвойствОбъектаXDTO(Запись, ЗаписьВыгрузки);
			
			Если СтруктураПредопределенныхДанных <> Неопределено Тогда
				Если СтруктураПредопределенныхДанных.Количество() > 0 Тогда
					СинхронизацияРаботаСПредопределеннымиДаннымиМП.НачатьЗаписьПредопределенныхДанных(Запись, СтруктураПредопределенныхДанных, ОбъектМетаданных, НовыеДанные);
				КонецЕсли;
			КонецЕсли;
			
			ОбъектXDTOКонфигурации.Record.Добавить(Запись);
		КонецЦикла;
		
		FilterТип = ТипОбъекта.Свойства.Получить("Filter").Тип;
		FilterОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
		
		Для каждого FilterItemВыгрузки Из ОбъектXDTOВыгрузки.Filter.FilterItem Цикл 
			
			FilterItemТип = FilterТип.Свойства.Получить("FilterItem").Тип;
			FilterItemОбъектXDTO = ФабрикаXDTO.Создать(FilterItemТип);
			
			ЗаполнитьЗначенияСвойств(FilterItemОбъектXDTO, FilterItemВыгрузки, , "Value, Usage, ComparisonType, ValueFrom, ValueTo");
			
			URL = FilterItemТип.URIПространстваИмен + "/current-config";
			
			ValueТип = ФабрикаXDTO.Тип(URL, "DocumentRef." + Метаданные.НайтиПоТипу(ТипЗнч(FilterItemВыгрузки.Value)).Имя);
			ValueОбъектXDTO = ФабрикаXDTO.Создать(ValueТип, FilterItemВыгрузки.Value);
			FilterItemОбъектXDTO.Value = ValueОбъектXDTO;
			
			FilterОбъектXDTO.FilterItem.Добавить(FilterItemОбъектXDTO);
		КонецЦикла;
		
		ОбъектXDTOКонфигурации.Filter = FilterОбъектXDTO;
		
		НаборЗаписей = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTOКонфигурации);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		ПланыОбмена.УдалитьРегистрациюИзменений(ПланыОбмена.СинхронизацияМП.НайтиПоКоду(КодУзла), НаборЗаписей);
		
	ИначеЕсли НЕ ДанныеБылиИзменены Тогда
		
		FilterТип = ТипОбъекта.Свойства.Получить("Filter").Тип;
		FilterОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
		
		НаборЗаписей = РегистрыНакопления[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
		
		Для каждого FilterItemВыгрузки Из ОбъектXDTOВыгрузки.Filter.FilterItem Цикл
			Если FilterItemВыгрузки.Name = "Recorder" Тогда
				НаборЗаписей.Отбор.Регистратор.Установить(FilterItemВыгрузки.Value);
				Продолжить;
			КонецЕсли;
			ИзмерениеРегистра = Метаданные.РегистрыНакопления[ОбъектМетаданных.Имя].Измерения.Найти(FilterItemВыгрузки.Name);
			
			НаборЗаписей.Отбор[ИзмерениеРегистра.Имя].Установить(FilterItemВыгрузки.Value);
		КонецЦикла;
		
		НаборЗаписей.Прочитать();
		
		Для каждого Запись Из НаборЗаписей Цикл
			Для каждого ЗаписьВыгрузки Из ОбъектXDTOВыгрузки.Record Цикл
				Для каждого Элемент Из МассивНовыхРесурсовИРеквизитов Цикл
					Запись[Элемент] = ЗаписьВыгрузки[Элемент];
				КонецЦикла;
				Для каждого Элемент Из МассивНовыхИзмерений Цикл
					Запись[Элемент] = ЗаписьВыгрузки[Элемент];
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ПланыОбмена.УдалитьРегистрациюИзменений(ПланыОбмена.СинхронизацияМП.НайтиПоКоду(КодУзла), НаборЗаписей);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДозаписатьДокумент(ФабрикаВыгрузки, ЧтениеXML, ТипОбъектаВыгрузки, ТипОбъекта, ОбъектМетаданных, НовыеДанные, Ссылка, КодУзла, СтруктураПредопределенныхДанных, Тип)
	
	МассивСНовымиРеквизитамиТЧ = НовыеДанные.СтруктураМассивов.МассивСНовымиРеквизитамиТЧ;
	МассивСНовымиРеквизитами = НовыеДанные.МассивСНовымиРеквизитами;
	
	ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML,ТипОбъектаВыгрузки);
	ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если ПланыОбмена.СинхронизацияМП.ЭтотУзел().Код <> "001" Тогда
		ЕстьДанныеВТаблицеРегистрации = ЗапросКДокументу(ОбъектXDTOВыгрузки.Ref, ОбъектМетаданных.Имя);
		Если ЕстьДанныеВТаблицеРегистрации Тогда
			СтруктураПредопределенныхДанных = Неопределено;
			Возврат;
		КонецЕсли;
		СинхронизацияРаботаСКлассификаторамиМП.ПоискСсылокНаКлассификаторыВОбъектеXDTOДляСправочникаИлиДокумента(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
	КонецЕсли;
	
	Если СтруктураПредопределенныхДанных <> Неопределено Тогда
		Если СтруктураПредопределенныхДанных.МассивПредопределенныхРеквизитовВТЧ.Количество() > 0 ИЛИ СтруктураПредопределенныхДанных.СтруктураПредопределенныхРеквизитов.Количество() > 0 Тогда
			ЗаписьПредопределенныхДанных(ОбъектXDTOВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, НовыеДанные);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьРеквизитов = ПроверкаРеквизитовДляСправочниковИДокументов(МассивСНовымиРеквизитами, ОбъектXDTOВыгрузки, Ссылка);
	
	СтруктураЗаписиТЧ = ПроверкаТабличнойЧасти(НовыеДанные, Ссылка, ОбъектXDTOВыгрузки, ОбъектXDTOКонфигурации, ОбъектМетаданных);
	
	СтруктураЗаписиНовыхТЧ = ПроверитьНовуюТЧ(ОбъектXDTOВыгрузки, Ссылка, НовыеДанные.СтруктураМассивов.МассивСНаименованиямиНовыхТЧ);
	
	ЗаписьСправочникаИлиДокументаПослеПроверки(ЗаписьРеквизитов, СтруктураЗаписиТЧ, МассивСНовымиРеквизитами, Ссылка, КодУзла, ОбъектXDTOВыгрузки, СтруктураЗаписиНовыхТЧ, ОбъектМетаданных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

Функция ЗаписьПредопределенныхДанных(ОбъектXDTOКонфигурации, СтруктураПредопределенныхДанных, ОбъектМетаданных, ТипОбъекта)
	
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) ИЛИ Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Если СтруктураПредопределенныхДанных.МассивПредопределенныхРеквизитовВТЧ.Количество() > 0 Тогда
			МассивНаименованийТЧ = Новый Массив;
			Для каждого Элемент Из СтруктураПредопределенныхДанных.МассивПредопределенныхРеквизитовВТЧ Цикл
				Если ТипЗнч(Элемент) = Тип("Строка") Тогда
					МассивНаименованийТЧ.Добавить(Элемент);
				КонецЕсли;
			КонецЦикла;
			
			НомерСтроки = 0;
			Для каждого НаименованиеТЧ Из МассивНаименованийТЧ Цикл
				Для каждого Строка Из ОбъектXDTOКонфигурации[НаименованиеТЧ] Цикл
					НомерСтроки = НомерСтроки + 1;
					Для каждого Элемент Из СтруктураПредопределенныхДанных.МассивПредопределенныхРеквизитовВТЧ Цикл
						
						Если ТипЗнч(Элемент) = Тип("Строка") Тогда
							НаименованиеТЧИзМассива = Элемент;
							Продолжить;
						КонецЕсли;
						
						Если ТипЗнч(Элемент) = Тип("Число") Тогда
							НомерСтрокиИзМассива = Элемент;
							Продолжить;
						КонецЕсли;
						
						Если НаименованиеТЧИзМассива = НаименованиеТЧ И НомерСтрокиИзМассива = НомерСтроки Тогда
							Для каждого ЗаписьСПредопределеннымиРеквизитами Из Элемент Цикл
								ОбъектМетаданныхРеквизита = Метаданные.НайтиПоТипу(ТипЗнч(Строка[ЗаписьСПредопределеннымиРеквизитами.Ключ]));
								НужныйРеквизит = Справочники[ОбъектМетаданныхРеквизита.Имя][ЗаписьСПредопределеннымиРеквизитами.Значение];
								Строка[ЗаписьСПредопределеннымиРеквизитами.Ключ] = НужныйРеквизит;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				НомерСтроки = 0;
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураПредопределенныхДанных.СтруктураПредопределенныхРеквизитов.Количество() > 0 Тогда
			Для каждого Реквизит Из СтруктураПредопределенныхДанных.СтруктураПредопределенныхРеквизитов Цикл
				ОбъектМетаданныхРеквизита = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектXDTOКонфигурации[Реквизит.Ключ]));
				НужныйРеквизит = Справочники[ОбъектМетаданныхРеквизита.Имя][Реквизит.Значение];
				ОбъектXDTOКонфигурации[Реквизит.Ключ] = НужныйРеквизит;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		Для каждого Элемент Из СтруктураПредопределенныхДанных Цикл
			ОбъектМетаданныхРеквизита = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектXDTOКонфигурации.Value));
			НужныйРеквизит = Справочники[ОбъектМетаданныхРеквизита.Имя][Элемент.Значение];
			ОбъектXDTOКонфигурации.Value = НужныйРеквизит;
		КонецЦикла;
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		
		FilterТип = ТипОбъекта.Свойства.Получить("Filter").Тип;
		FilterОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
		
		Для каждого Элемент Из ОбъектXDTOКонфигурации.Filter.FilterItem Цикл
			
			ЗначениеПоиска = Неопределено;
			СтруктураПредопределенныхДанных.Свойство(Элемент.Name, ЗначениеПоиска);
			Если ЗначениеПоиска <> Неопределено Тогда
				ОбъектМетаданныхРеквизита = Метаданные.НайтиПоТипу(ТипЗнч(Элемент.Value));
				НужныйРеквизит = Справочники[ОбъектМетаданныхРеквизита.Имя][ЗначениеПоиска];
				
				FilterТип = ТипОбъекта.Свойства.Получить("Filter").Тип;
				FilterItemТип = FilterТип.Свойства.Получить("FilterItem").Тип;
				URL = FilterItemТип.URIПространстваИмен + "/current-config";
				ValueТип = ФабрикаXDTO.Тип(URL, "CatalogRef." + Метаданные.НайтиПоТипу(ТипЗнч(Элемент.Value)).Имя);
				ValueОбъектXDTO = ФабрикаXDTO.Создать(ValueТип, НужныйРеквизит);
				
				Элемент.Value = ValueОбъектXDTO;
				
			КонецЕсли;
			
			
		КонецЦикла;
		
		Для каждого Объект Из ОбъектXDTOКонфигурации.Record Цикл
			Для каждого Реквизит Из СтруктураПредопределенныхДанных Цикл
				ОбъектМетаданныхРеквизита = Метаданные.НайтиПоТипу(ТипЗнч(Объект[Реквизит.Ключ]));
				НужныйРеквизит = Справочники[ОбъектМетаданныхРеквизита.Имя][Реквизит.Значение];
				Объект[Реквизит.Ключ] = НужныйРеквизит;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли  Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		
		Для каждого Реквизит Из СтруктураПредопределенныхДанных Цикл
			ОбъектМетаданныхРеквизита = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектXDTOКонфигурации[Реквизит.Ключ]));
			НужныйРеквизит = Справочники[ОбъектМетаданныхРеквизита.Имя][Реквизит.Значение];
			ОбъектXDTOКонфигурации[Реквизит.Ключ] = НужныйРеквизит;
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецФункции

Функция ПроверкаТабличнойЧасти(НовыеДанные, Ссылка, ОбъектXDTOВыгрузки, ОбъектXDTOКонфигурации, ОбъектМетаданных)
	
	МассивСНовымиРеквизитамиТЧ = НовыеДанные.СтруктураМассивов.МассивСНовымиРеквизитамиТЧ;
	МассивНаименованийТЧ = НовыеДанные.СтруктураМассивов.МассивНаименованийТЧ;
	МассивСНаименованиямиНовыхТЧ = НовыеДанные.СтруктураМассивов.МассивСНаименованиямиНовыхТЧ;
	
	ЗаписьТЧ = Перечисления.СтатусыПроверкиДанныхМП.ДанныеНеИзменились;
	СтруктураЗаписиТЧ = Новый Структура;
	СтруктураЗаписиТЧ.Вставить("ЗаписьТЧ", ЗаписьТЧ);
	Если МассивСНовымиРеквизитамиТЧ.Количество() > 0 Тогда
		Для каждого НаименованиеТЧ Из МассивНаименованийТЧ Цикл
			МассивЭтойТабличнойЧасти = Новый Массив; //Создаем из большого массива, массив только с нужной ТЧ.
			Для каждого Элемент Из МассивСНовымиРеквизитамиТЧ Цикл
				Если МассивНаименованийТЧ.Найти(Элемент) <> Неопределено Тогда
					НаименованиеЭтойТабличнойЧасти = Элемент;
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(Элемент) = Тип("Число") И НаименованиеЭтойТабличнойЧасти = НаименованиеТЧ Тогда
					МассивЭтойТабличнойЧасти.Добавить(Элемент);
				ИначеЕсли НаименованиеЭтойТабличнойЧасти = НаименованиеТЧ Тогда
					МассивЭтойТабличнойЧасти.Добавить(Элемент);
				КонецЕсли;
			КонецЦикла;
			
			СвойствоОбъектаXDTOКонфигурации = ОбъектXDTOКонфигурации.Свойства().Получить(НаименованиеТЧ);
			Если СвойствоОбъектаXDTOКонфигурации = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
				РеквизитыТЧ = Метаданные.Справочники[ОбъектМетаданных.Имя].ТабличныеЧасти[НаименованиеТЧ].Реквизиты;
			ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
				РеквизитыТЧ = Метаданные.Документы[ОбъектМетаданных.Имя].ТабличныеЧасти[НаименованиеТЧ].Реквизиты;
			КонецЕсли;
			
			МассивСтарыхРеквизитовВыгрузка = Новый Массив;
			
			Для каждого ЭлементВыгрузки Из ОбъектXDTOВыгрузки[НаименованиеТЧ] Цикл //Создаем массив с ТЧ, в которой находятся старые реквизиты выгрузки, чтобы создать строку для сравнения.
				Для каждого ИмяРеквизита Из РеквизитыТЧ Цикл
					Если МассивЭтойТабличнойЧасти.Найти(ИмяРеквизита.Имя) = Неопределено Тогда
						МассивСтарыхРеквизитовВыгрузка.Добавить(ЭлементВыгрузки[ИмяРеквизита.Имя]);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			МассивСтарыхРеквизитовКонфигурация = Новый Массив;
			МассивНовыхРеквизитовКонфигурация = Новый Массив;
			
			ТабЧасть = Ссылка[НаименованиеТЧ];
			
			Для каждого ЭлементКонфигурации Из ТабЧасть Цикл
				Для Каждого ИмяРеквизита Из РеквизитыТЧ Цикл
					Если МассивЭтойТабличнойЧасти.Найти(ИмяРеквизита.Имя) = Неопределено Тогда
						МассивСтарыхРеквизитовКонфигурация.Добавить(ЭлементКонфигурации[ИмяРеквизита.Имя]);
					Иначе
						МассивНовыхРеквизитовКонфигурация.Добавить(ЭлементКонфигурации[ИмяРеквизита.Имя]);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			ЗаписьXML = Новый ЗаписьXML();
			ЗаписьXML.УстановитьСтроку();
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, МассивСтарыхРеквизитовВыгрузка);
			СтрокаМассиваСтарыхРеквизитовВыгрузка = ЗаписьXML.Закрыть();
			
			ЗаписьXML = Новый ЗаписьXML();
			ЗаписьXML.УстановитьСтроку();
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, МассивСтарыхРеквизитовКонфигурация);
			СтрокаМассиваСтарыхРеквизитовКонфигурация = ЗаписьXML.Закрыть();
			
			ЗаписьТЧ = Перечисления.СтатусыПроверкиДанныхМП.ТребуетсяЗаписьНовыхДанных;
			Если СтрокаМассиваСтарыхРеквизитовВыгрузка = СтрокаМассиваСтарыхРеквизитовКонфигурация Тогда
				Для каждого Элемент Из МассивНовыхРеквизитовКонфигурация Цикл
					Если ЗначениеЗаполнено(Элемент) Тогда
						ЗаписьТЧ = Перечисления.СтатусыПроверкиДанныхМП.ДанныеИзменились;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ЗаписьТЧ = Перечисления.СтатусыПроверкиДанныхМП.ДанныеИзменились;
			КонецЕсли;
			
			СтруктураЗаписиТЧ.Вставить("ЗаписьТЧ", ЗаписьТЧ);
			
			Если ЗаписьТЧ = Перечисления.СтатусыПроверкиДанныхМП.ДанныеИзменились Тогда
				Прервать;
			КонецЕсли;
			
			Если ЗаписьТЧ = Перечисления.СтатусыПроверкиДанныхМП.ТребуетсяЗаписьНовыхДанных Тогда
				СтруктураЗаписиТЧ.Вставить(НаименованиеТЧ, МассивЭтойТабличнойЧасти);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураЗаписиТЧ;
	
КонецФункции

Функция ПроверкаРеквизитовДляСправочниковИДокументов(МассивСНовымиРеквизитами, ОбъектXDTOВыгрузки, Ссылка)
	
	ЗаписьРеквизитов = Перечисления.СтатусыПроверкиДанныхМП.ДанныеНеИзменились;
	Если МассивСНовымиРеквизитами.Количество() > 0 Тогда
		
		ЗаписьРеквизитов = Перечисления.СтатусыПроверкиДанныхМП.ТребуетсяЗаписьНовыхДанных;
		Для Каждого ИмяРеквизита Из Ссылка.Метаданные().Реквизиты Цикл
			ЗначениеРеквизитаКонфигурации = Ссылка[ИмяРеквизита.Имя];
			ЗначениеРеквизитаВыгрузки = ОбъектXDTOВыгрузки[ИмяРеквизита.Имя];
			
			Если ЗначениеРеквизитаКонфигурации <> ЗначениеРеквизитаВыгрузки Тогда
				ИмяНовогоРеквизита = МассивСНовымиРеквизитами.Найти(ИмяРеквизита.Имя);
				Если ИмяРеквизита.Имя = "Картинка" ИЛИ ИмяРеквизита.Имя = "Параметры" ИЛИ ИмяРеквизита.Имя = "НомерПодтвержден" Тогда
					Продолжить;
				ИначеЕсли ИмяНовогоРеквизита = Неопределено ИЛИ ЗначениеЗаполнено(ЗначениеРеквизитаКонфигурации) Тогда
					ЗаписьРеквизитов = Перечисления.СтатусыПроверкиДанныхМП.ДанныеИзменились;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗаписьРеквизитов
	
КонецФункции

Функция ПроверкаДанныхРегистра(Регистр, ОбъектXDTOВыгрузки, ОбъектXDTOКонфигурации, ТипОбъекта, ОбъектМетаданных, НовыеДанные)
	
	FilterТип = ТипОбъекта.Свойства.Получить("Filter").Тип;
	FilterОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
	
	Если Регистр = "РегистрыСведений" Тогда
		НаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
	ИначеЕсли Регистр = "РегистрыНакопления" Тогда
		НаборЗаписей = РегистрыНакопления[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
	КонецЕсли;
	
	Для каждого FilterItemВыгрузки Из ОбъектXDTOВыгрузки.Filter.FilterItem Цикл
		Если FilterItemВыгрузки.Name = "Period" Тогда
			НаборЗаписей.Отбор.Период.Установить(FilterItemВыгрузки.Value);
			Продолжить;
		ИначеЕсли FilterItemВыгрузки.Name = "Recorder" Тогда
			НаборЗаписей.Отбор.Регистратор.Установить(FilterItemВыгрузки.Value);
			Прервать;
		КонецЕсли;
		
		Если НовыеДанные <> Неопределено Тогда
			Если НовыеДанные.МассивСНовымиИзмерениями.Найти(FilterItemВыгрузки.Name) <> Неопределено ИЛИ НовыеДанные.МассивСНовымиРесурсамиИРеквизитами.Найти(FilterItemВыгрузки.Name) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИзмерениеРегистра = Метаданные[Регистр][ОбъектМетаданных.Имя].Измерения.Найти(FilterItemВыгрузки.Name);
		Если ИзмерениеРегистра <> Неопределено Тогда
			НаборЗаписей.Отбор[ИзмерениеРегистра.Имя].Установить(FilterItemВыгрузки.Value);
		КонецЕсли; 
	КонецЦикла;
	
	НаборЗаписей.Прочитать();
	
	ДанныеБылиИзменены = Ложь;
	Измерения = Метаданные[Регистр][ОбъектМетаданных.Имя].Измерения;
	Ресурсы = Метаданные[Регистр][ОбъектМетаданных.Имя].Ресурсы;
	Реквизиты = Метаданные[Регистр][ОбъектМетаданных.Имя].Реквизиты;
	Для каждого Запись Из НаборЗаписей Цикл
		Для каждого ЗаписьВыгрузки Из ОбъектXDTOВыгрузки.Record Цикл
			Для каждого Измерение Из Измерения Цикл
				Если НовыеДанные <> Неопределено Тогда
					Если НовыеДанные.МассивСНовымиИзмерениями.Найти(Измерение.Имя) <> Неопределено ИЛИ НовыеДанные.МассивСНовымиРесурсамиИРеквизитами.Найти(Измерение.Имя) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если Запись[Измерение.Имя] <> ЗаписьВыгрузки[Измерение.Имя] Тогда
					ДанныеБылиИзменены = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ДанныеБылиИзменены Тогда
				Прервать;
			КонецЕсли;
			
			Для каждого Ресурс Из Ресурсы Цикл
				Если НовыеДанные <> Неопределено Тогда
					Если НовыеДанные.МассивСНовымиИзмерениями.Найти(Ресурс.Имя) <> Неопределено ИЛИ НовыеДанные.МассивСНовымиРесурсамиИРеквизитами.Найти(Ресурс.Имя) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если Запись[Ресурс.Имя] <> ЗаписьВыгрузки[Ресурс.Имя] Тогда
					ДанныеБылиИзменены = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ДанныеБылиИзменены Тогда
				Прервать;
			КонецЕсли;
			
			Для каждого Реквизит Из Реквизиты Цикл
				Если НовыеДанные <> Неопределено Тогда
					Если НовыеДанные.МассивСНовымиИзмерениями.Найти(Реквизит.Имя) <> Неопределено ИЛИ НовыеДанные.МассивСНовымиРесурсамиИРеквизитами.Найти(Реквизит.Имя) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если Запись[Реквизит.Имя] <> ЗаписьВыгрузки[Реквизит.Имя] Тогда
					ДанныеБылиИзменены = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ДанныеБылиИзменены Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеБылиИзменены
	
КонецФункции

Процедура ЗаписьСправочникаИлиДокументаПослеПроверки(ЗаписьРеквизитов, СтруктураЗаписиТЧ, МассивСНовымиРеквизитами, Ссылка, КодУзла, ОбъектXDTOВыгрузки, СтруктураЗаписиНовыхТЧ, ОбъектМетаданных)
	
	Для каждого ЭлементСтруктуры Из СтруктураЗаписиНовыхТЧ Цикл
		НаименованиеНовойТЧ = ЭлементСтруктуры.Ключ;
		Статус = ЭлементСтруктуры.Значение;
		Если Статус = Перечисления.СтатусыПроверкиДанныхМП.ДанныеИзменились Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаписьРеквизитов <> Перечисления.СтатусыПроверкиДанныхМП.ДанныеИзменились И СтруктураЗаписиТЧ.ЗаписьТЧ <> Перечисления.СтатусыПроверкиДанныхМП.ДанныеИзменились Тогда
		
		Если ЗаписьРеквизитов = Перечисления.СтатусыПроверкиДанныхМП.ТребуетсяЗаписьНовыхДанных Тогда
			
			ОбъектСправочникаИлиДокумента = Ссылка.ПолучитьОбъект();
			
			Для Каждого НаименованиеРеквизита Из МассивСНовымиРеквизитами Цикл
				ОбъектСправочникаИлиДокумента[НаименованиеРеквизита] = ОбъектXDTOВыгрузки[НаименованиеРеквизита];
			КонецЦикла;
			ОбъектСправочникаИлиДокумента.ОбменДанными.Загрузка = Истина;
			ОбъектСправочникаИлиДокумента.ДополнительныеСвойства.Вставить("ИдетЗагрузкаНедозаписанныхДанных", Истина);
			ОбъектСправочникаИлиДокумента.Записать();
			
			ПланыОбмена.УдалитьРегистрациюИзменений(ПланыОбмена.СинхронизацияМП.НайтиПоКоду(КодУзла), Ссылка);
		КонецЕсли;
		
		Если СтруктураЗаписиТЧ.Количество() > 1 Тогда  // >1
			СтруктураЗаписиТЧ.Удалить("ЗаписьТЧ");
			ОбъектСправочникаИлиДокумента = Ссылка.ПолучитьОбъект();
			Для каждого ЭлементСтруктуры Из СтруктураЗаписиТЧ Цикл
				НаименованиеТЧ = ЭлементСтруктуры.Ключ;
				Массив = ЭлементСтруктуры.Значение;
				Для каждого Запись Из ОбъектСправочникаИлиДокумента[НаименованиеТЧ] Цикл
					Сч = 1;
					Для каждого ЭлементВыгрузки Из ОбъектXDTOВыгрузки[НаименованиеТЧ] Цикл
						Если Сч <> Запись.НомерСтроки Тогда
							Сч = Сч + 1;
							Продолжить;
						КонецЕсли;
						Для каждого Элемент Из Массив Цикл
							Если ТипЗнч(Элемент) = Тип("Число") Тогда
								ЧислоВМассиве = Элемент;
								Продолжить;
							ИначеЕсли ЧислоВМассиве = Сч Тогда
								Запись[Элемент] = ЭлементВыгрузки[Элемент];
							КонецЕсли;
						КонецЦикла;
						Прервать;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			// Запись новых ТЧ
			Для каждого ЭлементСтруктуры Из СтруктураЗаписиНовыхТЧ Цикл
				НаименованиеНовойТЧ = ЭлементСтруктуры.Ключ;
				ОбъектСправочникаИлиДокумента = Ссылка.ПолучитьОбъект();
				
				Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					РеквизитыТЧ = Метаданные.Справочники[ОбъектМетаданных.Имя].ТабличныеЧасти[НаименованиеНовойТЧ].Реквизиты;
				ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
					РеквизитыТЧ = Метаданные.Документы[ОбъектМетаданных.Имя].ТабличныеЧасти[НаименованиеНовойТЧ].Реквизиты;
				КонецЕсли;
				
				Для каждого СтрокаВыгрузки Из ОбъектXDTOВыгрузки[НаименованиеНовойТЧ] Цикл
					НоваяТЧ = ОбъектСправочникаИлиДокумента[НаименованиеНовойТЧ].Добавить();
					
					Для каждого Реквизит Из РеквизитыТЧ Цикл
						НоваяТЧ[Реквизит.Имя] = СтрокаВыгрузки[Реквизит.Имя];
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			ОбъектСправочникаИлиДокумента.ОбменДанными.Загрузка = Истина;
			ОбъектСправочникаИлиДокумента.ДополнительныеСвойства.Вставить("ИдетЗагрузкаНедозаписанныхДанных", Истина);
			ОбъектСправочникаИлиДокумента.Записать();
			
			ПланыОбмена.УдалитьРегистрациюИзменений(ПланыОбмена.СинхронизацияМП.НайтиПоКоду(КодУзла), Ссылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПроверитьНовуюТЧ(ОбъектXDTOВыгрузки, Ссылка, МассивСНаименованиямиНовыхТЧ)
	
	СтруктураЗаписиНовыхТЧ = Новый Структура;
	
	Для каждого НаименованиеНовойТЧ Из МассивСНаименованиямиНовыхТЧ Цикл
		Если Ссылка[НаименованиеНовойТЧ].Выгрузить().Количество() > 0 Тогда
			ЗаписьНовойТЧ = Перечисления.СтатусыПроверкиДанныхМП.ДанныеИзменились;
		Иначе
			ЗаписьНовойТЧ = Перечисления.СтатусыПроверкиДанныхМП.ТребуетсяЗаписьНовыхДанных;
		КонецЕсли;
		
		СтруктураЗаписиНовыхТЧ.Вставить(НаименованиеНовойТЧ, ЗаписьНовойТЧ);
	КонецЦикла;
	
	Возврат СтруктураЗаписиНовыхТЧ
	
КонецФункции

Процедура УдалитьРегистрациюИзменений(КодУзла, СсылкаИлиНаборЗаписей)
	
	ПланыОбмена.УдалитьРегистрациюИзменений(ПланыОбмена.СинхронизацияМП.НайтиПоКоду(КодУзла), СсылкаИлиНаборЗаписей);
	
КонецПроцедуры

Функция ПоискОдинаковогоНомераУСправочникаИлиДокументаДляЦентральногоУзла(ОбъектXDTOКонфигурации, КодУзла, ОбъектМетаданных) Экспорт
	
	ЗаписьНовогоНомера = Ложь;
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		//ОбъектXDTOКонфигурации.НомерПодтвержден = Истина;
		СсылкаДокументаНаСерверномУзле = НайтиДокументПоНомеру(ОбъектМетаданных.Имя, ОбъектXDTOКонфигурации.Number);
		Если СсылкаДокументаНаСерверномУзле = Неопределено Тогда
			ЗаписьНовогоНомера = Ложь;
			СтруктураЗаписи = Новый Структура("КодУзла, Ссылка, Номер", КодУзла, ОбъектXDTOКонфигурации.Ref.УникальныйИдентификатор(), ОбъектXDTOКонфигурации.Number);
			РегистрыСведений.НомераСправочниковИДокументовДляИзмененияНаКлиентскомУзлеМП.ЗаписатьИнформацию(СтруктураЗаписи);
		ИначеЕсли СсылкаДокументаНаСерверномУзле.УникальныйИдентификатор() <> ОбъектXDTOКонфигурации.Ref.УникальныйИдентификатор() Тогда
			ЗаписьНовогоНомера = Истина;
		КонецЕсли;
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) И ТипЗнч(ОбъектXDTOКонфигурации.Ref) <> Тип("СправочникСсылка.СтавкиНДСМП") И ТипЗнч(ОбъектXDTOКонфигурации.Ref) <> Тип("СправочникСсылка.КассыККММП") Тогда
		
		СсылкаСправочникаНаСерверномУзле = НайтиСправочникПоКоду(ОбъектМетаданных.Имя, ОбъектXDTOКонфигурации.Code);
		Если СсылкаСправочникаНаСерверномУзле = Неопределено Тогда
			ЗаписьНовогоНомера = Ложь;
			СтруктураЗаписи = Новый Структура("КодУзла, Ссылка, Номер", КодУзла, ОбъектXDTOКонфигурации.Ref.УникальныйИдентификатор(), ОбъектXDTOКонфигурации.Code);
			РегистрыСведений.НомераСправочниковИДокументовДляИзмененияНаКлиентскомУзлеМП.ЗаписатьИнформацию(СтруктураЗаписи);
		ИначеЕсли СсылкаСправочникаНаСерверномУзле.УникальныйИдентификатор() <> ОбъектXDTOКонфигурации.Ref.УникальныйИдентификатор() Тогда
			ЗаписьНовогоНомера = Истина;
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат ЗаписьНовогоНомера
	
КонецФункции

Функция НайтиДокументПоНомеру(ИмяДокумента, Номер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИмяДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ИмяДокумента КАК ИмяДокумента
		|ГДЕ
		|	ИмяДокумента.Номер = &Номер";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяДокумента", ИмяДокумента);
	
	Запрос.УстановитьПараметр("Номер", Номер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Ссылка = Неопределено;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка

КонецФункции

Функция НайтиСправочникПоКоду(ИмяСправочника, Код)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИмяСправочника.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИмяСправочника КАК ИмяСправочника
		|ГДЕ
		|	ИмяСправочника.Код = &Код";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяСправочника", ИмяСправочника);
	
	Запрос.УстановитьПараметр("Код", Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Ссылка = Неопределено;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка

КонецФункции

Функция СравнитьВерсии(ТекущаяВерсия, ВерсияПакета)
	
	СтруктураТекущейВерсии = РегистрыСведений.СообщенияИзДругойВерсииМП.РазложитьВерсиюНаЧисла(ТекущаяВерсия);
	СтруктураВерсииПакета = РегистрыСведений.СообщенияИзДругойВерсииМП.РазложитьВерсиюНаЧисла(ВерсияПакета);
	
	ВерсияПакетаБольшеТекущейВерсии = Ложь;
	
	Если СтруктураВерсииПакета.Редакция > СтруктураТекущейВерсии.Редакция Тогда
		ВерсияПакетаБольшеТекущейВерсии = Истина;
	КонецЕсли;
	
	Если НЕ ВерсияПакетаБольшеТекущейВерсии И СтруктураВерсииПакета.Редакция = СтруктураТекущейВерсии.Редакция И СтруктураВерсииПакета.Подредакция > СтруктураТекущейВерсии.Подредакция Тогда
		ВерсияПакетаБольшеТекущейВерсии = Истина;
	КонецЕсли;
	
	Если НЕ ВерсияПакетаБольшеТекущейВерсии И СтруктураВерсииПакета.Редакция = СтруктураТекущейВерсии.Редакция И СтруктураВерсииПакета.Подредакция = СтруктураТекущейВерсии.Подредакция И СтруктураВерсииПакета.Версия > СтруктураТекущейВерсии.Версия Тогда
		ВерсияПакетаБольшеТекущейВерсии = Истина;
	КонецЕсли;
	
	Если НЕ ВерсияПакетаБольшеТекущейВерсии И СтруктураВерсииПакета.Редакция = СтруктураТекущейВерсии.Редакция И СтруктураВерсииПакета.Подредакция = СтруктураТекущейВерсии.Подредакция И СтруктураВерсииПакета.Версия = СтруктураТекущейВерсии.Версия И СтруктураВерсииПакета.Сборка > СтруктураТекущейВерсии.Сборка Тогда
		ВерсияПакетаБольшеТекущейВерсии = Истина;
	КонецЕсли;
	
	Возврат ВерсияПакетаБольшеТекущейВерсии
	
КонецФункции

#КонецОбласти

#Область ЗапросыКТаблицеРегистрацийДляКлиентскогоУзла

Функция ЗапросКСправочнику(Ссылка, ИмяСправочника)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИмяСправочникаИзменения.Узел.Ссылка КАК УзелСсылка,
		|	ИмяСправочникаИзменения.НомерСообщения КАК НомерСообщения,
		|	ИмяСправочникаИзменения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИмяСправочника.Изменения КАК ИмяСправочникаИзменения
		|ГДЕ
		|	ИмяСправочникаИзменения.Узел.Ссылка = &Узел
		|	И ИмяСправочникаИзменения.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяСправочника", ИмяСправочника);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Узел", ПланыОбмена.СинхронизацияМП.НайтиПоКоду("001").Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.НомерСообщения = Null Тогда
			Продолжить;
		КонецЕсли;
		Результат = Истина;
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

Функция ЗапросКДокументу(Ссылка, ИмяДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИмяДокументаИзменения.Узел.Ссылка КАК УзелСсылка,
		|	ИмяДокументаИзменения.НомерСообщения КАК НомерСообщения,
		|	ИмяДокументаИзменения.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ИмяДокумента.Изменения КАК ИмяДокументаИзменения
		|ГДЕ
		|	ИмяДокументаИзменения.Узел.Ссылка = &Узел
		|	И ИмяДокументаИзменения.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяДокумента", ИмяДокумента);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Узел", ПланыОбмена.СинхронизацияМП.НайтиПоКоду("001").Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.НомерСообщения = Null Тогда
			Продолжить;
		КонецЕсли;
		Результат = Истина;
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции // ЗапросКДокументу()

Функция ЗапросКРегиструСведений(ОбъектXDTOВыгрузки, ИмяРегистраСведений, ТипОбъекта)
	
	ИзмеренияРегистраСведений = Метаданные.РегистрыСведений[ИмяРегистраСведений].Измерения;
	
	FilterТип = ТипОбъекта.Свойства.Получить("Filter").Тип;
	FilterОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
	
	СовокупностьИзмерений = Новый Структура;
	Для каждого FilterItemВыгрузки Из ОбъектXDTOВыгрузки.Filter.FilterItem Цикл
		СовокупностьИзмерений.Вставить(FilterItemВыгрузки.Name, FilterItemВыгрузки.Value);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.ИмяРегистраСведений.Изменения КАК ИмяРегистраСведенийИзменения";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяРегистраСведений", ИмяРегистраСведений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПродолжитьЦикл = Ложь;
		
		Для каждого Измерение Из ИзмеренияРегистраСведений Цикл
			Если ВыборкаДетальныеЗаписи[Измерение.Имя] <> СовокупностьИзмерений[Измерение.Имя] Тогда
				ПродолжитьЦикл = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Метаданные.РегистрыСведений[ИмяРегистраСведений].ОсновнойОтборПоПериоду Тогда
			Если ВыборкаДетальныеЗаписи.Период <> СовокупностьИзмерений.Period Тогда
				ПродолжитьЦикл = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.НомерСообщения = Null Тогда
			ПродолжитьЦикл = Истина;
		КонецЕсли;
		
		Если ПродолжитьЦикл Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Истина;
		Прервать;
		
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции // ЗапросКРегиструСведений()

Функция ЗапросКРегиструНакопления(ОбъектXDTOВыгрузки, ИмяРегистраНакопления, ТипОбъекта)
	
	FilterТип = ТипОбъекта.Свойства.Получить("Filter").Тип;
	FilterОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
	
	Для каждого FilterItemВыгрузки Из ОбъектXDTOВыгрузки.Filter.FilterItem Цикл
		Регистратор = FilterItemВыгрузки.Value;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИмяРегистраНакопленияИзменения.Узел КАК Узел,
		|	ИмяРегистраНакопленияИзменения.НомерСообщения КАК НомерСообщения,
		|	ИмяРегистраНакопленияИзменения.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ИмяРегистраНакопления.Изменения КАК ИмяРегистраНакопленияИзменения
		|ГДЕ
		|	ИмяРегистраНакопленияИзменения.Узел.Ссылка = &Узел";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяРегистраНакопления", ИмяРегистраНакопления);
	
	Запрос.УстановитьПараметр("Узел", ПланыОбмена.СинхронизацияМП.НайтиПоКоду("001").Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.НомерСообщения = Null ИЛИ ВыборкаДетальныеЗаписи.Регистратор <> Регистратор Тогда
			Продолжить;
		КонецЕсли;
		Результат = Истина;
		Прервать;
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

#КонецОбласти
