

////////////////////////////////////////////////////////////////////////////////
// ЭлектронноеВзаимодействиеПереопределяемый: общий механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработка метаданных

// Определяет соответствие функциональных опций библиотеки и прикладного решения,
// в случае различий в наименовании.
//
// Параметры:
//  СоответствиеФО - Соответствие - список функциональных опций.
//
Процедура ПолучитьСоответствиеФункциональныхОпций(СоответствиеФО) Экспорт
	
	// Электронные документы
	СоответствиеФО.Вставить("ИспользоватьОбменЭД",                    "ИспользоватьОбменЭД");
	СоответствиеФО.Вставить("ИспользоватьЭлектронныеПодписи", 		  "ИспользоватьЭлектронныеПодписи");
	СоответствиеФО.Вставить("ИспользоватьЭлектронныеЦифровыеПодписи", "ИспользоватьЭлектронныеПодписи");
	СоответствиеФО.Вставить("ИспользоватьОбменЭДМеждуОрганизациями",  "ИспользоватьОбменЭДМеждуОрганизациями");
	СоответствиеФО.Вставить("ИспользоватьОбменСБанками",              "ИспользоватьОбменСБанками");
	// Конец электронные документы
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
//
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	// Электронные документы
	СоответствиеСправочников.Вставить("Организации", "Организации");
	СоответствиеСправочников.Вставить("Контрагенты", "Контрагенты");
	СоответствиеСправочников.Вставить("Партнеры",    "Контрагенты");
	СоответствиеСправочников.Вставить("Банки",       "Банки");
	// Конец электронные документы
	
	СоответствиеСправочников.Вставить("ДоговорыКонтрагентов",        "ДоговорыКонтрагентов");
	СоответствиеСправочников.Вставить("Номенклатура",                "Номенклатура");
	СоответствиеСправочников.Вставить("ХарактеристикиНоменклатуры",  "ХарактеристикиНоменклатуры");
	СоответствиеСправочников.Вставить("ЕдиницыИзмерения",            "ЕдиницыИзмерения");
	СоответствиеСправочников.Вставить("НоменклатураПоставщиков",     "НоменклатураПоставщиков");
	СоответствиеСправочников.Вставить("Валюты",                      "Валюты");
	СоответствиеСправочников.Вставить("Банки", "Банки");
	СоответствиеСправочников.Вставить("БанковскиеСчетаОрганизаций",  "БанковскиеСчета");
	СоответствиеСправочников.Вставить("БанковскиеСчетаКонтрагентов", "БанковскиеСчета");
	СоответствиеСправочников.Вставить("УпаковкиНоменклатуры",        "ЕдиницыИзмерения");
	
КонецПроцедуры

// В процедуре формируется соответствие для сопоставления имен переменных библиотеки,
// наименованиям объектов и реквизитов метаданных прикладного решения.
// Если в прикладном решении есть документы, на основании которых формируется ЭД,
// причем названия реквизитов данных документов отличаются от общепринятых "Организация", "Контрагент", "СуммаДокумента",
// то для этих реквизитов необходимо добавить в соответствие записи виде
// Ключ = "ДокументВМетаданных.ОбщепринятоеНазваниеРеквизита", Значение - "ДокументВМетаданных.ДругоеНазваниеРеквизита"
// Например:
//  СоответствиеРеквизитовОбъекта.Вставить("МЗ_Покупка.Организация", "МЗ_Покупка.Учреждение");
//  СоответствиеРеквизитовОбъекта.Вставить("МЗ_Покупка.Контрагент",  "МЗ_Покупка.Грузоотправитель");
//  СоответствиеРеквизитовОбъекта.Вставить("СчетФактураВыданный.СуммаДокумента",  "СчетФактураВыданный.Основание.СуммаДокумента");
// 
// Параметры:
//   СоответствиеРеквизитовОбъекта - Соответствие, в котором
//    * Ключ - Строка - имя переменной, используемой в коде библиотеки;
//    * Значение - Строка - наименование объекта метаданных или реквизита объекта в прикладном решении.
//
Процедура ПолучитьСоответствиеНаименованийОбъектовМДиРеквизитов(СоответствиеРеквизитовОбъекта) Экспорт
	
	// Обмен с банками начало
	СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеПоручениеВМетаданных", "ПлатежноеПоручение");
	СоответствиеРеквизитовОбъекта.Вставить("СокращенноеНаименованиеОрганизации", "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("БанковскийСчетОрганизации", "БанковскийСчет");
	
	СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеПоручение.СчетОрганизации", "БанковскийСчет");
	СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеПоручение.Организация", "Организация");
	СоответствиеРеквизитовОбъекта.Вставить("БанковскийСчетОрганизации.Банк", "Банк");
	СоответствиеРеквизитовОбъекта.Вставить("БанковскийСчетОрганизации.Организация", "Владелец");
	СоответствиеРеквизитовОбъекта.Вставить("БанковскийСчетОрганизации.НомерСчета", "НомерСчета");
	СоответствиеРеквизитовОбъекта.Вставить("Банк.БИК",                              "Код");
	// Обмен с банками конец
	
	// Обмен с контрагентами начало
	СоответствиеРеквизитовОбъекта.Вставить("РеализацияТоваровУслугВМетаданных",    "РасходнаяНакладная");
	СоответствиеРеквизитовОбъекта.Вставить("ПоступлениеТоваровУслугВМетаданных",   "ПриходнаяНакладная");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаВыставленияВСчетеФактуреВыданном", "ДатаВыставления");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаПолученияВСчетеФактуреПолученном", "Дата");
	СоответствиеРеквизитовОбъекта.Вставить("НомерСчета",                           "НомерСчета");
	
	СоответствиеРеквизитовОбъекта.Вставить("ИННКонтрагента",                       "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППКонтрагента",                       "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагента",              "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагентаДляСообщенияПользователю", "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("ВнешнийКодКонтрагента",                "Код");
	СоответствиеРеквизитовОбъекта.Вставить("ПартнерКонтрагента",                   Неопределено);
	
	СоответствиеРеквизитовОбъекта.Вставить("ИННОрганизации",                       "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППОрганизации",                       "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("ОГРНОрганизации",                      "ОГРН");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеОрганизации",              "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("СокращенноеНаименованиеОрганизации",   "Наименование");
	
	СоответствиеРеквизитовОбъекта.Вставить("НомерДоговораКонтрагента",   "НомерДоговора");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаДоговораКонтрагента",   "ДатаДоговора");
	// Обмен с контрагентами конец
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение текстовых сообщений

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам.
// 
// Параметры:
//  ТипОбъекта - Строка - идентификатор типа объекта, который необходимо найти;
//  ИДОбъекта - Строка - идентификатор объекта заданного типа;
//  ДополнительныеРеквизиты - Структура - набор дополнительных полей объекта для поиска;
//  Результат - Ссылка - ссылка на найденный объект.
//
Процедура НайтиСсылкуНаОбъект(ТипОбъекта, Результат, ИдОбъекта = "", ДополнительныеРеквизиты = Неопределено, ИДЭД = Неопределено) Экспорт
	
	Параметр = "";
	Результат = Неопределено;
	
	Если ТипОбъекта = "Валюты" 
		ИЛИ ТипОбъекта = "Банки" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ИдОбъекта);
		
	ИначеЕсли ТипОбъекта = "ЕдиницыИзмерения" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("КлассификаторЕдиницИзмерения", "Код", ИдОбъекта);
		
	ИначеЕсли (ТипОбъекта = "Контрагенты" 
		ИЛИ ТипОбъекта = "Организации") 
		И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		
		ИНН = ""; 
		КПП = "";
		ДополнительныеРеквизиты.Свойство("ИНН", ИНН);
		ДополнительныеРеквизиты.Свойство("КПП", КПП);
		
		Если ЗначениеЗаполнено(ИНН) Тогда // по ИНН+КПП
			
			ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Результат); 
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Результат) 
			И ДополнительныеРеквизиты.Свойство("Наименование", Параметр) Тогда // по Наименованию
			
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Наименование", Параметр); 
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "НоменклатураПоставщиков" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		
		Контрагент = "";
		ДополнительныеРеквизиты.Свойство("Владелец", Контрагент);
		
		ПараметрПоиска = "";
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска) И ЗначениеЗаполнено(ПараметрПоиска) Тогда
			Результат = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(ПараметрПоиска, Контрагент, "НоменклатураПоставщика");
		ИначеЕсли ДополнительныеРеквизиты.Свойство("Ид", ПараметрПоиска) И ЗначениеЗаполнено(ПараметрПоиска) Тогда
			Результат = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(ПараметрПоиска, Контрагент, "НоменклатураПоставщика");
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "ХарактеристикаНоменклатуры" 
		И ЗначениеЗаполнено(ДополнительныеРеквизиты)
		И ДополнительныеРеквизиты.Свойство("Идентификатор", Параметр) Тогда
		
		Попытка
			ИдентификаторСтрока = Сред(Параметр, Найти(Параметр, "#")-1);
			ХарактеристикаСсылка = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСтрока));
			Если ЗначениеЗаполнено(ХарактеристикаСсылка) Тогда
				Результат = ХарактеристикаСсылка;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	ИначеЕсли ТипОбъекта = "Номенклатура" Тогда
		
		ПараметрПоиска = "";
		Контрагент = "";
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска)
			И ДополнительныеРеквизиты.Свойство("Владелец", Контрагент) Тогда // по Идентификатору
			Результат = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(ПараметрПоиска, Контрагент);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			
			Если ЗначениеЗаполнено(ИдОбъекта) Тогда
				// Если задан Ид, то будем искать по коду
				Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ИдОбъекта);
				
			ИначеЕсли ЗначениеЗаполнено(ДополнительныеРеквизиты) И ДополнительныеРеквизиты.Свойство("Идентификатор", Параметр) Тогда
				
				Попытка
					ИдентификаторСтрока = Лев(Параметр, Найти(Параметр, "#")-1);
					НоменклатураСсылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСтрока));
					Если ЗначениеЗаполнено(НоменклатураСсылка) Тогда
						Результат = НоменклатураСсылка;
					КонецЕсли;
				Исключение
				КонецПопытки;
				
			ИначеЕсли ЗначениеЗаполнено(ДополнительныеРеквизиты) И ДополнительныеРеквизиты.Свойство("Код", Параметр) Тогда
				
				Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", Параметр);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "ВидыКонтактнойИнформации" Тогда
		
		Попытка 
			Результат = Справочники.ВидыКонтактнойИнформации[ИдОбъекта];
		Исключение
			Результат = Неопределено;
		КонецПопытки;
		
	ИначеЕсли (ТипОбъекта = "БанковскиеСчетаОрганизаций" Или ТипОбъекта = "БанковскиеСчетаКонтрагентов") И ЗначениеЗаполнено(ДополнительныеРеквизиты)Тогда
		
		Владелец = "";
		Если ДополнительныеРеквизиты.Свойство("Владелец", Владелец) Тогда
			ИмяПрикладногоСправочника = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ИмяПрикладногоСправочника(ТипОбъекта);
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ИмяПрикладногоСправочника, "НомерСчета", ИдОбъекта, Владелец);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "СтраныМира" Тогда
		
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("СтраныМира", "Код", ИдОбъекта);
		
	ИначеЕсли ТипОбъекта = "НомерТД" Тогда
		
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("НомераГТД", "Код", ИдОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает печатный номер документа.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на документ информационной базы.
//  Результат - Строка - номер документа.
//
Процедура ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект, Результат) Экспорт
	
	НомерДокумента = УправлениеНебольшойФирмойКлиентСервер.НомерДокументаБезЛидирующихНулей(СсылкаНаОбъект.Номер, Истина, Истина);
	
	Результат = НомерДокумента;
	
КонецПроцедуры

// Проверяет, готовность документов ИБ для формирования ЭД, и удаляет из массива не готовые документы.
//
// Параметры:
//  ДокументыМассив - Массив - ссылки на документы, которые должны быть проверены перед формированием ЭД.
//  БезЭлектроннойПодписи - Булево - обозначает использование электронной подписи при обмене документами.
//                          Истина - обмен происходит в рамках подсистемы ЭлектронноеВзаимодействие.БизнесСеть
//                          Ложь - обмен происходит в рамках подсистемы ЭлектронноеВзаимодействие.ОбменСКонтрагентами
//
Процедура ПроверитьГотовностьИсточников(ДокументыМассив, БезЭлектроннойПодписи = Ложь) Экспорт
	
	// Проверим проведенность документов.
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(
										ДокументыМассив,
										Тип("СтрокаГруппировкиДинамическогоСписка"));
	
	МассивНепроведенныхДокументов = ОбщегоНазначения.ПроверитьПроведенностьДокументов(ДокументыМассив);
	
	Если МассивНепроведенныхДокументов.Количество() <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен. Электронный документ не сформирован.'");
		ШаблонОшибкиПроверки = НСтр("ru = 'Документ не проведен.'");
		Для Каждого НеПроведенныйДокумент Из МассивНепроведенныхДокументов Цикл
			
			ЭтоЗаказ = ТипЗнч(НеПроведенныйДокумент) = Тип("ДокументСсылка.ЗаказПоставщику") 
					Или ТипЗнч(НеПроведенныйДокумент) = Тип("ДокументСсылка.ЗаказПокупателя");
			
			// Не проверяем проведение документов заказ поставщику при отправке через 1С:Бизнес-сеть
			Если БезЭлектроннойПодписи И ЭтоЗаказ Тогда
				Продолжить;
			КонецЕсли;
			
			Найденный = ДокументыМассив.Найти(НеПроведенныйДокумент.Ссылка);
			Если Найденный <> Неопределено Тогда
				
				ДокументыМассив.Удалить(Найденный);
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					Строка(НеПроведенныйДокумент.Ссылка));
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает данные о физическом (юридическом) лице по ссылке.
//
// Параметры:
//  ЮрФизЛицо - Ссылка - ссылка на элемент справочника, по которому надо получить данные.
//  Сведения - Структура - данные юридического (физического лица).
//
Процедура ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, Сведения) Экспорт
	
	Сведения = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(ЮрФизЛицо);
	
КонецПроцедуры

// Возвращает текстовое описание организации по параметрам.
//
// Параметры:
//  СведенияОрганизации - Структура - сведения об организации, по которой надо составить описание.
//  Список - Строка - список запрашиваемых параметров организации.
//  СПрефиксом - Булево - признак вывода префикса параметра организации.
//  Результат - Строка - описание организации.
//
Процедура ОписаниеОрганизации(СведенияОрганизации, Результат, Список = "") Экспорт
	
	СПрефиксом = Истина;
	
	Результат = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОрганизации, Список, СПрефиксом);
	
КонецПроцедуры

// Проверяет наличие прав на открытие журнала регистрации.
//
// Параметры:
//  Результат - Булево - если пользователь имеет право на открытие журнала регистрации,
//                       в этой переменной должна быть установлена Истина.
//
Процедура ЕстьПравоОткрытияЖурналаРегистрации(Результат) Экспорт
	
	Результат = Пользователи.ЭтоПолноправныйПользователь();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с электронными документами

// Выполняется перед записью владельца электронного документа.
//
// Параметры:
//  Объект - ДокументОбъект - владелец электронного документа.
//  ИзменилисьКлючевыеРеквизиты - Булево - признак изменения ключевых реквизитов владельца электронного документа.
//                                         Если Истина, то текущая версия электронного документа становится неактуальной. 
//                                         По умолчанию для нового документа Истина, иначе Ложь.
//  СостояниеЭлектронногоДокумента - ПеречислениеСсылка.СостоянияВерсийЭД, ПеречислениеСсылка.СостоянияОбменСБанками -
//                                   состояние текущей версии электронного документа.
//  ПодлежитОбменуЭД - Булево - признак участия документа в ЭДО. По умолчанию Истина.
//  Отказ - Булево - если установить Истина, то владелец электронного документа записан не будет. По умолчанию Ложь.
//
Процедура ПередЗаписьюВладельцаЭлектронногоДокумента(Объект, ИзменилисьКлючевыеРеквизиты, Знач СостояниеЭлектронногоДокумента, ПодлежитОбменуЭД, ТребуетсяКонтрольАктуальности, Отказ) Экспорт
	
	// Если ЭД еще не отправлен, должна быть возможность переформирования ЭД.
	Если СостояниеЭлектронногоДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение
		ИЛИ СостояниеЭлектронногоДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПередЗаписьюВладельцаЭлектронногоДокумента(
			Объект, ИзменилисьКлючевыеРеквизиты, СостояниеЭлектронногоДокумента, ПодлежитОбменуЭД, Отказ);
		
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПередЗаписьюВладельцаЭлектронногоДокументаБанка(
			Объект, ИзменилисьКлючевыеРеквизиты, СостояниеЭлектронногоДокумента, ПодлежитОбменуЭД, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при создании формы подсистемы, допускающей изменение.
// Позволяет изменить реквизиты, команды и элементы формы.
// Вызывается для форм со следующим назначением (см. параметр Контекст.Назначение):
// "СопоставлениеНоменклатуры"
// Для добавленных элементов возможно подключение обработчиков событий методом УстановитьДействие.
// Список подключаемых действий в формате <Событие>-<Имя подключаемого метода>-<Имя метода с реализацией>:
// ПриИзменении                  - Подключаемый_ЭлементПриИзменении                  - ЭлементФормыПодсистемыПриИзменении
// НачалоВыбора                  - Подключаемый_ЭлементНачалоВыбора                  - ЭлементФормыПодсистемыНачалоВыбора
// НачалоВыбораИзСписка          - Подключаемый_ЭлементНачалоВыбораИзСписка          - ЭлементФормыПодсистемыНачалоВыбораИзСписка
// Очистка                       - Подключаемый_ЭлементОчистка                       - ЭлементФормыПодсистемыОчистка
// Создание                      - Подключаемый_ЭлементСоздание                      - ЭлементФормыПодсистемыСоздание
// ОбработкаВыбора               - Подключаемый_ЭлементОбработкаВыбора               - ЭлементФормыПодсистемыОбработкаВыбора
// ИзменениеТекстаРедактирования - Подключаемый_ЭлементИзменениеТекстаРедактирования - ЭлементФормыПодсистемыИзменениеТекстаРедактирования
// АвтоПодбор                    - Подключаемый_ЭлементАвтоПодбор                    - ЭлементФормыПодсистемыАвтоПодбор
// ОкончаниеВводаТекста          - Подключаемый_ЭлементОкончаниеВводаТекста          - ЭлементФормыПодсистемыОкончаниеВводаТекста
// Нажатие                       - Подключаемый_ЭлементНажатие                       - ЭлементФормыПодсистемыНажатие
// ОбработкаНавигационнойСсылки  - Подключаемый_ЭлементОбработкаНавигационнойСсылки  - ЭлементФормыПодсистемыОбработкаНавигационнойСсылки
// ДействиеКоманды               - Подключаемый_КомандаДействие                      - КомандаФормыПодсистемыДействие
// Методы с реализацией находятся в модуле ОбменСКонтрагентамиКлиентПереопределяемый.
//
// Параметры:
//  Контекст - ФиксированнаяСтруктура - контекст создания формы:
//   * Назначение - Строка - назначение формы.
//   * Форма - ФормаКлиентскогоПриложения - форма для изменения.
//   * Префикс - Строка - префикс имен для новых реквизитов, команд и элементов формы.
//  Отказ - Булево - аналогичен параметру обработчика события "ПриСозданииНаСервер" управляемой формы.
//  СтандартнаяОбработка - Булево - аналогичен параметру обработчика события "ПриСозданииНаСервер" управляемой формы.
//
// Пример:
//  Если Контекст.Назначение = "СопоставлениеНоменклатуры" Тогда
//  	Контекст.Форма.Элементы.Добавить(Префикс + "ИмяНовогоЭлемент",...);
//  	Контекст.Форма.Команды.Добавить(Префикс + "ИмяНовойКоманды");
//  	....
//  КонецЕсли;
//
Процедура ПриСозданииФормыПодсистемы(Контекст, Отказ, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Служебные

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
//  ИмяСправочника - Строка, имя справочника, объект которого надо найти,
//  ИмяРеквизита - Строка, имя реквизита, по которому будет проведен поиск,
//  ЗначРеквизита - произвольное значение, значение реквизита, по которому будет проведен поиск,
//  Владелец - Ссылка на владельца для поиска в иерархическом справочнике.
//
Функция НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Владелец = Неопределено)
	
	Результат = Неопределено;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита)
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИскСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК ИскСправочник
	|ГДЕ
	|	ИскСправочник." + ИмяРеквизита + " = &ЗначРеквизита";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
