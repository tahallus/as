
#Область ПрограммныйИнтерфейс

// Процедура - Обновляет признак прослеживаемости с табличной части документа
//
// Параметры:
//  ТабличнаяЧасть				 - 	ДанныеФормыКоллекция - Таблица формы, содержащая прослеживаемые запасы
//  СведенияПрослеживаемости	 - 	ДанныеФормыКоллекция - Таблица РНПТ
//  ИспользуетсяПрослеживаемость - 	Булево - Признак использования механизма прослеживаемости для документа
//
Процедура ОбновитьПризнакПрослеживаемости(ТабличнаяЧасть, СведенияПрослеживаемости, ИспользуетсяПрослеживаемость) Экспорт
	
	Если НЕ ИспользуетсяПрослеживаемость Тогда
		
		// Очистка данных прослеживаемости
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			СтрокаТаблицы.ПрослеживаемыйТовар = Ложь;
		КонецЦикла;
		СведенияПрослеживаемости.Очистить();
		Возврат;
		
	КонецЕсли;
		
	// Получим реквизиты используемой номенклатуры в таблице.
	МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть.Выгрузить(), "Номенклатура", Истина);
	
	ОбщегоНазначенияУНФКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивНоменклатуры);
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
	МассивНоменклатуры,
	"ПрослеживаемыйТовар");
	
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		Если СтрокаТаблицы.Свойство("ЕстьВДокументеРеализации") 
			И СтрокаТаблицы.ЕстьВДокументеРеализации
			ИЛИ СтрокаТаблицы.Свойство("ЕстьВДокументеПоступления") 
			И СтрокаТаблицы.ЕстьВДокументеПоступления Тогда
			// Не обновляем признак прослеживаемости для строк исходного документа. 
			Продолжить;
		КонецЕсли;
		
		РеквизитыТекущейНоменклатуры = РеквизитыНоменклатуры[СтрокаТаблицы.Номенклатура];
		Если РеквизитыТекущейНоменклатуры <> Неопределено Тогда
			СтрокаТаблицы.ПрослеживаемыйТовар = РеквизитыТекущейНоменклатуры;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура;
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		Если СтрокаТаблицы.ПрослеживаемыйТовар Тогда
			СтрокаТаблицы.НомерГТД = Неопределено;
		Иначе
			СтруктураОтбора.Вставить("ИдентификаторСтроки", СтрокаТаблицы.ИдентификаторСтроки);
			ПодчиненныеСтроки = СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
			Для каждого УдаляемаяСтрока Из ПодчиненныеСтроки Цикл
				СведенияПрослеживаемости.Удалить(УдаляемаяСтрока);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Процедура - Действия при создании формы документа для поддержки механизма прослеживаемости
//
// Параметры:
//  Форма		 - 	УправляемаяФорма - Форма документа 
//  КэшЗначений	 - 	Структура - Кешированные значения формы 
//
Процедура ПриСозданииФормы(Форма, КэшЗначений, ПрослеживаемаяОперация = Истина) Экспорт
	
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;

	КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров",
		ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров(Форма.Объект.Дата) И ПрослеживаемаяОперация);
	
КонецПроцедуры

// Процедура - Обработка выбора РНПТН
//
// Параметры:
//  Форма				 - 	УправляемаяФорма - Форма документа 
//  ИдентификаторСтроки	 - 	Строка - Значение реквизита ИдентификаторСтроки изменяемой строки таблицы
//  ВыбранноеЗначение	 - 	Структура - Результат открытия формы подбора РНПТ
//
Процедура ОбработкаВыбораРНПТН(Форма, ИдентификаторСтроки, ВыбранноеЗначение) Экспорт
	
	Объект = Форма.Объект;
	
	СтрокиСРНПТ = Объект.СведенияПрослеживаемости.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
	
	Для Каждого СтрокаСРНПТ Из СтрокиСРНПТ Цикл
		Объект.СведенияПрослеживаемости.Удалить(СтрокаСРНПТ);
	КонецЦикла;
		
	ПодобранныеРНПТ = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТаблицыРНПТВХранилище);
	Для Каждого НовыйРНПТ Из ПодобранныеРНПТ Цикл
		НоваяСтрока = Объект.СведенияПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыйРНПТ);
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
	КонецЦикла;
	
КонецПроцедуры

// Обновляет условное оформление колонки "ЗапасыРНПТ" для формы документа
//
// Параметры:
//  Форма - Форма объекта для условного оформления
//
Процедура ОбновитьУсловноеОформлениеТабличнойЧастиДляПрослеживаемости(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров") Тогда
		Возврат
	КонецЕсли;
	
	СсылкаНаОбъект = Форма.Объект.Ссылка;
	
	НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтборов1 = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов1, "Объект.Запасы.ПодсказкаРНПТ","РНПТ:", ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов1, "Объект.Запасы.РНПТ", "", ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов1, "Объект.Запасы.ПрослеживаемыйТовар", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
	
		ГруппаОтборов2 = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов2, "Объект.ВидОперации", Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю, ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов2, "Объект.ВидОперации", Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию, ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов2, "Объект.ВидОперации", Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику, ВидСравненияКомпоновкиДанных.Равно);

	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПеремещениеЗапасов") Тогда
		
		ГруппаОтборов2 = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов2, "Объект.ВидОперации", Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы, ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов2, "Объект.ВидОперации", Перечисления.ВидыОперацийПеремещениеЗапасов.ВозвратИзЭксплуатации, ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов2, "Объект.ВидОперации", Перечисления.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию, ВидСравненияКомпоновкиДанных.Равно);

	КонецЕсли;
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыРНПТ");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Авто>'"));
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

// Процедура - Заполнить данные РНПТ исходного документа в форме корректировки
//
// Параметры:
//  Форма	 - 	УправляемаяФорма - Форма документа 
//
Процедура ЗаполнитьРНПТИсходныеДанные(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ИсходныйДокумент = Объект.ДокументОснование;
	Если ТипЗнч(ИсходныйДокумент) <> Тип("ДокументСсылка.РасходнаяНакладная") 
		И ТипЗнч(ИсходныйДокумент) <> Тип("ДокументСсылка.КорректировкаРеализации") 
		И ТипЗнч(ИсходныйДокумент) <> Тип("ДокументСсылка.ПриходнаяНакладная") 
		И ТипЗнч(ИсходныйДокумент) <> Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		Возврат;                                                      
	КонецЕсли;
	
	ИсходныеРНПТ = РНПТисходногоДокумента(ИсходныйДокумент);
	ЗаполнитьПредставлениеРНПТВКолонке(Форма, ИсходныеРНПТ, "РНПТДоИсправления");
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		// Требуется заполнение РНПТ первоначального документа
		
		ИсходныйДокумент = ПрослеживаемостьФормыВызовСервераУНФ.ИсходныйДокументРекурсивно(ИсходныйДокумент);
		Если ТипЗнч(ИсходныйДокумент) <> Тип("ДокументСсылка.РасходнаяНакладная") 
			И ТипЗнч(ИсходныйДокумент) <> Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
			Возврат;                                                      
		КонецЕсли;
		ИсходныеРНПТ = РНПТисходногоДокумента(ИсходныйДокумент);
		ЗаполнитьПредставлениеРНПТВКолонке(Форма, ИсходныеРНПТ, "РНПТДоКорректировки");
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныйИнтерфейс

Процедура ЗаполнитьПредставлениеРНПТВКолонке(Форма, ИсходныеРНПТ, ИмяЗаполняемогоПоля)
		
	Объект = Форма.Объект;
	
	Для Каждого СтрокаТовары ИЗ Объект.Запасы Цикл 
		Если СтрокаТовары.ПрослеживаемыйТовар Тогда
			Если ЗначениеЗаполнено(ИсходныеРНПТ) Тогда
				СтрокиСРНПТ = ИсходныеРНПТ.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки));
				КоличествоРНПТ = СтрокиСРНПТ.Количество();
				Если КоличествоРНПТ = 0 Тогда
					СтрокаТовары[ИмяЗаполняемогоПоля] = "";
				ИначеЕсли КоличествоРНПТ = 1 Тогда
					СтрокаТовары[ИмяЗаполняемогоПоля] = СокрЛП(Строка(СтрокиСРНПТ[0].РНПТ));
				Иначе
					СтрокаТовары[ИмяЗаполняемогоПоля] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 и еще %2'"),
					СокрЛП(Строка(СтрокиСРНПТ[0].РНПТ)),
					КоличествоРНПТ-1);
				КонецЕсли;
			Иначе
				// Переходный период, в корректируемом документе не был заполнен РНПТ.
				СтрокаТовары[ИмяЗаполняемогоПоля] = "";
			КонецЕсли;
		Иначе
			СтрокаТовары[ИмяЗаполняемогоПоля] = Строка(СтрокаТовары.НомерГТД);
		КонецЕсли;
	КонецЦикла;
 
КонецПроцедуры

Функция РНПТисходногоДокумента(ИсходныйДокумент)
	
	ИмяВидаДокумента = ИсходныйДокумент.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсходныйДокумент", ИсходныйДокумент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияПрослеживаемости.РНПТ КАК РНПТ,
	|	СведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.РасходнаяНакладная.СведенияПрослеживаемости КАК СведенияПрослеживаемости
	|ГДЕ
	|	СведенияПрослеживаемости.Ссылка = &ИсходныйДокумент";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасходнаяНакладная", ИмяВидаДокумента);
	
	Выборка = Запрос.Выполнить();
	
	Если Выборка.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РНПТДокумента = Выборка.Выгрузить();
	
	Возврат РНПТДокумента;
	
КонецФункции

#КонецОбласти

