////////////////////////////////////////////////////////////////////////////////
// "Денежные средства" 
// 
// Общие серверные процедуры и функции документов РасходСоСчета, РасходИзКассы, ПоступлениеНаСчет, ПоступлениеВКассу
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует список команд создания документов со всеми возможными видами операций для форм списков денежных документов
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма списка, для которой необходимо сформировать список команд
//   ИмяГруппы - Строка - Наименование группы формы, в которую будут помещены созданные команды
//   ВидДокумента - Строка - Вид документа: "ПоступлениеВКассу", "ПоступлениеНаСчет", "РасходИзКассы", "РасходСоСчета"
//   ИмяСписка - Строка - Наименование списка, из формы которого вызывается процедура. Если значение не заполнено,
//                        подразумевается Наименование "Список"
//
Процедура СформироватьСписокКомандСозданияДокументов(Форма, ИмяГруппы, ВидДокумента, ИмяСписка = "") Экспорт
	
	СписокОпераций = ПолучитьСтруктурыОперацийДенежныеСредства(ВидДокумента);
	
	ТипКнопка = Тип("КнопкаФормы");
	ТипГруппа = Тип("ГруппаФормы");
	
	ГруппаКоманднойПанели = Форма.Элементы[ИмяГруппы];
	ЕстьПравоДобавление = ПравоДоступа("Добавление", Метаданные.Документы[ВидДокумента]);
	
	Для каждого Операция Из СписокОпераций Цикл
		
		Если НЕ ЗначениеЗаполнено(Операция.ИмяГруппы) Тогда
			Операция.ИмяГруппы = ИмяГруппы;
		КонецЕсли;
		
		ГруппаКнопок = Форма.Элементы.Найти(Операция.ИмяГруппы);
		
		Если ГруппаКнопок = Неопределено Тогда
			ГруппаКнопок = Форма.Элементы.Добавить(Операция.ИмяГруппы, ТипГруппа, ГруппаКоманднойПанели);
			ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
		КонецЕсли;
			
		ИмяКоманды = ВидДокумента + "_" + Операция.Имя;  
		Если ЗначениеЗаполнено(ИмяСписка) Тогда
			ИмяКоманды = ИмяКоманды + "_" + ИмяСписка;
		КонецЕсли; 
		
		Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
			НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
			НоваяКоманда.Заголовок  = Строка(Операция.Представление);
			НоваяКоманда.Подсказка  = Строка(Операция.Описание);
			НоваяКоманда.Действие   = "Подключаемый_ОбработчикКомандСозданияДокумента";
		КонецЕсли; 
		
		ИмяЭлемента = "Форма" + ИмяКоманды;
		
		Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			НовыйЭлемент 			 = Форма.Элементы.Добавить(ИмяЭлемента, ТипКнопка, ГруппаКнопок);
			НовыйЭлемент.Вид		 = ВидКнопкиФормы.КнопкаКоманднойПанели;
			НовыйЭлемент.Заголовок   = Строка(Операция.Представление);
			НовыйЭлемент.ИмяКоманды  = ИмяКоманды;
			НовыйЭлемент.Доступность = ЕстьПравоДобавление;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

// Обрабатывает изменения состояния формы при изменении реквизита ВидОперации
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма денежного документа
//
Процедура ОбработатьВидОперации(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если ВидОперацииСтрокой(Форма.Объект.ВидОперации) = "ЛичныеСредстваПредпринимателя" Тогда
		
		// Настройка видимости
		ПлатежныйКалендарьИспользуется = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		ЗаголовокСуммыПлатежа = ?(ПлатежныйКалендарьИспользуется, НСтр("ru='Сумма (план)'"), НСтр("ru='Сумма платежа'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаПлатежа", "Заголовок", ЗаголовокСуммыПлатежа);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасчетыПрочие", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаПлатежа", "Видимость", ПлатежныйКалендарьИспользуется);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаПлатежаВалюта", "Видимость", ПлатежныйКалендарьИспользуется);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаРасчетов", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаНДС", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа", "Видимость", ПлатежныйКалендарьИспользуется);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасшифровкаПлатежаПрочиеРасчеты", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыплатаЗаработнойПлатыИтогСуммаПлатежа", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаРасчетыСКонтрагентомСписком", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРеквизитыПервойСтроки", "Видимость", Ложь);
		
		ТекстПодсказки = НСтр("ru='<Эта операция доступна только для ИП>'");
		ДоступныеОрганизации = ПолучитьСписокВыбораОрганизаций(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	Иначе
		
		ТекстПодсказки = "";
		ДоступныеОрганизации = ПолучитьСписокВыбораОрганизаций();
		
	КонецЕсли; 
	
	Форма.Элементы.Организация.ПодсказкаВвода = ТекстПодсказки;
	Форма.Элементы.Организация.СписокВыбора.Очистить();
	Форма.Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(ДоступныеОрганизации.ВыгрузитьЗначения());
	
КонецПроцедуры

// Заполняет доступные банковские счета в формах списка денежных документов
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма денежного документа
//
Процедура ЗаполнитьБанковскиеСчетаНаФорме(Форма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(БанковскиеСчета.Ссылка) КАК Представление
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО БанковскиеСчета.Владелец = Организации.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаСчетов = РезультатЗапроса.Выбрать();
	
	Форма.Элементы.ОтборБанковскийСчет.СписокВыбора.Очистить();
	
	Если НЕ РезультатЗапроса.Пустой() И НЕ ВыборкаСчетов.Количество() = 1 Тогда
		Пока ВыборкаСчетов.Следующий() Цикл
			Форма.Элементы.ОтборБанковскийСчет.СписокВыбора.Добавить(ВыборкаСчетов.Ссылка);
		КонецЦикла;
	Иначе
		Форма.Элементы.ОтборБанковскийСчет.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает банковский счет по переданной валюте.
// Если валюта счета по-умолчанию контрагента совпадает с переданной, возвращается счет по-умолчанию
// Иначе возвращается банковский счет с переданной валютой, при условии, что он единственный у переданного контрагента
//
// Параметры:
//   Контрагент - СправочникСсылка.Контрагенты - Контрагент, банковский счет которого необходимо получить
//   Валюта - СправочникСсылка.Валюты - Валюта счета
//
Функция ПолучитьБанковскийСчетКонтрагентаПоВалюте(Контрагент, Валюта) Экспорт

	Если НЕ ЗначениеЗаполнено(Валюта) ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	Если Контрагент.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств = Валюта Тогда
		Возврат Контрагент.БанковскийСчетПоУмолчанию;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчетаКонтрагента.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчетаКонтрагента
		|ГДЕ
		|	БанковскиеСчетаКонтрагента.ВалютаДенежныхСредств = &Валюта
		|	И БанковскиеСчетаКонтрагента.Владелец = &Контрагент
		|	И БанковскиеСчетаКонтрагента.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	ВыборкаБанковскихСчетов = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаБанковскихСчетов.Количество() = 1 Тогда
		ВыборкаБанковскихСчетов.Следующий();
		Возврат ВыборкаБанковскихСчетов.Ссылка;
	КонецЕсли;

	Возврат Справочники.БанковскиеСчета.ПустаяСсылка();

КонецФункции // ПолучитьБанковскийСчетКонтрагентаПоВалюте()

// Функция возвращает признак необходимости контроля резервов денежных средств
//
Функция КонтролироватьРезервыДенежныхСредств() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") И ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеДенежныхСредств");
	
КонецФункции

// Функция возвращает структуру с аналитикой по Подразделению и проекту переданного документа
//
// Параметры:
//   Документ - ДокументСсылка - Документ, аналитику которого необходимо получить
//
Функция АналитикаДокументаДляДвиженияДенежныхСредств(Документ) Экспорт
	
	Аналитика = Новый Структура;
	Аналитика.Вставить("Подразделение", Неопределено);
	Аналитика.Вставить("Проект", Неопределено);
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаказПоставщику.ЗаказПокупателя.Проект КАК Проект,
			|	ЗаказПоставщику.СтруктурнаяЕдиница КАК Подразделение
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
			|ГДЕ
			|	ЗаказПоставщику.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Документ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Аналитика, ВыборкаДетальныеЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаказПокупателя.Проект КАК Проект,
			|	ЗаказПокупателя.СтруктурнаяЕдиницаПродажи КАК Подразделение
			|ИЗ
			|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
			|ГДЕ
			|	ЗаказПокупателя.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Документ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Аналитика, ВыборкаДетальныеЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Аналитика;
	
КонецФункции


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует список структур с описанием возможных видов операций для денежных документов в заданном порядке
// 
// Параметры:
//   ВидДокумента - Строка - Строковое представление вида документа
//
Функция ПолучитьСтруктурыОперацийДенежныеСредства(ВидДокумента) Экспорт
	
	Операции = Новый Массив;
	
	Если ВидДокумента = "РасходСоСчета" Тогда
		
		ДобавитьОписаниеОперации(Операции, "РасходГруппаПоставщикуНаРасходыБанк",  Перечисления.ВидыОперацийРасходСоСчета.Поставщику);
		ДобавитьОписаниеОперации(Операции, "РасходГруппаПоставщикуНаРасходыБанк", Перечисления.ВидыОперацийРасходСоСчета.НаРасходы);
		
		Если Константы.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата.Получить() Тогда
			ДобавитьОписаниеОперации(Операции,"РасходГруппаЗарплатаБанк", Перечисления.ВидыОперацийРасходСоСчета.Зарплата, НСтр("ru = 'Зарплата по ведомости'"));
			ДобавитьОписаниеОперации(Операции,"РасходГруппаЗарплатаБанк", Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику);
		КонецЕсли;
		
		ДобавитьОписаниеОперации(Операции, , Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты, НСтр("ru = 'Прочему контрагенту (учредителю, таможне)'"));
		ДобавитьОписаниеОперации(Операции, , Перечисления.ВидыОперацийРасходСоСчета.Покупателю, НСтр("ru = 'Покупателю (возврат)'"));
		
		Если ПолучитьФункциональнуюОпцию("КредитыИЗаймы") Тогда
			ДобавитьОписаниеОперации(Операции, "РасходГруппаКредитыИЗаймыБанк", Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам, НСтр("ru = 'Возврат кредита'"));
			ДобавитьОписаниеОперации(Операции, "РасходГруппаКредитыИЗаймыБанк", Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику); // Прочие расчеты.
		КонецЕсли;
		
		ДобавитьОписаниеОперации(Операции, "РасходГруппаПрочееБанк", Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет, НСтр("ru = 'Перевод на другой счет'"));
		ДобавитьОписаниеОперации(Операции, "РасходГруппаПрочееБанк", Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных, НСтр("ru = 'Снятие наличных'"));
		ДобавитьОписаниеОперации(Операции, "РасходГруппаПрочееБанк", Перечисления.ВидыОперацийРасходСоСчета.Прочее, НСтр("ru = 'Прочий расход'"));
		ДобавитьОписаниеОперации(Операции, "РасходГруппаПрочееБанк", Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику);
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСБанкомЭквайрером") Тогда
			ДобавитьОписаниеОперации(Операции, "РасходГруппаПрочееБанк", Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты, НСтр("ru = 'Отчет эквайрера'"));
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуКредитом") Тогда
			ДобавитьОписаниеОперации(Операции, "РасходГруппаПрочееБанк", Перечисления.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит, НСтр("ru = 'Возврат продажи в кредит'"));
		КонецЕсли;
		
		ДобавитьОписаниеОперации(Операции, "РасходГруппаПрочееБанк", Перечисления.ВидыОперацийРасходСоСчета.Налоги, НСтр("ru = 'Налоги'"));
		ДобавитьОписаниеОперации(Операции, "РасходГруппаПрочееБанк", Перечисления.ВидыОперацийРасходСоСчета.КомиссияБанка, НСтр("ru = 'Комиссия банка'"));
		
		Если ОрганизацияИндивидуальныйПредпринимательСуществует() Тогда
			ДобавитьОписаниеОперации(Операции, "РасходГруппаЛичныеСредстваБанк", Перечисления.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя, НСтр("ru = 'Личные средства'"));
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			ДобавитьОписаниеОперации(Операции, "РасходГруппаПоставщикуНаРасходыБанк", Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации, НСтр("ru = 'Нашей организации'"));
		КонецЕсли;
	ИначеЕсли ВидДокумента = "РасходИзКассы" Тогда
		
		ДобавитьОписаниеОперации(Операции, "РасходГруппаПоставщикуНаРасходыКасса",  Перечисления.ВидыОперацийРасходИзКассы.Поставщику);
		ДобавитьОписаниеОперации(Операции, "РасходГруппаПоставщикуНаРасходыКасса",  Перечисления.ВидыОперацийРасходИзКассы.НаРасходы);
		
		Если Константы.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата.Получить() Тогда
			ДобавитьОписаниеОперации(Операции, "РасходГруппаЗарплатаКасса", Перечисления.ВидыОперацийРасходИзКассы.Зарплата, НСтр("ru = 'Зарплата по ведомости'"));
			ДобавитьОписаниеОперации(Операции, "РасходГруппаЗарплатаКасса", Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику);
		КонецЕсли;
		
		ДобавитьОписаниеОперации(Операции, , Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты, НСтр("ru = 'Прочему контрагенту (учредителю)'"));
		ДобавитьОписаниеОперации(Операции, , Перечисления.ВидыОперацийРасходИзКассы.Покупателю, НСтр("ru = 'Покупателю (возврат)'"));
		
		Если ПолучитьФункциональнуюОпцию("КредитыИЗаймы") Тогда
			ДобавитьОписаниеОперации(Операции, "РасходГруппаКредитыИЗаймыКасса", Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам, НСтр("ru = 'Возврат кредита'"));
			ДобавитьОписаниеОперации(Операции, "РасходГруппаКредитыИЗаймыКасса", Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику);
		КонецЕсли;
		
		ДобавитьОписаниеОперации(Операции, "РасходГруппаПрочееКасса",  Перечисления.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк, НСтр("ru = 'Взнос наличными в банк'"));
		ДобавитьОписаниеОперации(Операции, "РасходГруппаПрочееКасса",  Перечисления.ВидыОперацийРасходИзКассы.Прочее, НСтр("ru = 'Прочий расход'"));
		ДобавитьОписаниеОперации(Операции, "РасходГруппаПрочееКасса",  Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику);
		
		Если Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить() Тогда
			ДобавитьОписаниеОперации(Операции, "РасходГруппаПрочееКасса",  Перечисления.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ);
		КонецЕсли;
		
		ДобавитьОписаниеОперации(Операции, "РасходГруппаПрочееКасса",  Перечисления.ВидыОперацийРасходИзКассы.Налоги, НСтр("ru = 'Налоги'"));
		
		Если ОрганизацияИндивидуальныйПредпринимательСуществует() Тогда
			ДобавитьОписаниеОперации(Операции, "РасходГруппаЛичныеСредстваКасса",  Перечисления.ВидыОперацийРасходИзКассы.ЛичныеСредстваПредпринимателя, НСтр("ru = 'Личные средства'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			ДобавитьОписаниеОперации(Операции, "РасходГруппаПоставщикуНаРасходыКасса",  Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации, НСтр("ru = 'Нашей организации'"));
		КонецЕсли;
	ИначеЕсли ВидДокумента = "ПоступлениеНаСчет" Тогда
		
		ДобавитьОписаниеОперации(Операции, , Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя);
		ДобавитьОписаниеОперации(Операции, , Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее, НСтр("ru = 'Прочее поступление'"));
		ДобавитьОписаниеОперации(Операции, , Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика, НСтр("ru = 'От поставщика (возврат)'"));
		
		Если ПолучитьФункциональнуюОпцию("КредитыИЗаймы") Тогда
			ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаКредитыИЗаймыБанк",  Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам, НСтр("ru = 'Получение кредита'"));
			ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаКредитыИЗаймыБанк",  Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
			ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаПокупкаВалютыБанк",  Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты);
		КонецЕсли;
		
		ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаПеремещениеБанк", Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными);
		ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаПеремещениеБанк", Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета);
		
		ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаПрочееБанк",  Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты, НСтр("ru = 'От прочего контрагента (учредителя)'"));
		ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаПрочееБанк",  Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты, НСтр("ru = 'От курьерской компании или почты'"));
		ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаПрочееБанк",  Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника);
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСБанкомЭквайрером") Тогда
			ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаПрочееБанк",  Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам, НСтр("ru = 'Отчет эквайера'"));
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуКредитом") Тогда
			ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаПрочееБанк", Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКредитам, НСтр("ru = 'От продаж в кредит'"));
		КонецЕсли;
		
		ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаПрочееБанк", Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги, НСтр("ru = 'Возврат налогов'"));
		
		Если ОрганизацияИндивидуальныйПредпринимательСуществует() Тогда
			ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаЛичныеСредстваБанк", Перечисления.ВидыОперацийПоступлениеНаСчет.ЛичныеСредстваПредпринимателя, НСтр("ru = 'Личные средства'"));
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			ДобавитьОписаниеОперации(Операции, , Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации);
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = "ПоступлениеВКассу" Тогда
		
		ДобавитьОписаниеОперации(Операции, , Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя);
		ДобавитьОписаниеОперации(Операции, , Перечисления.ВидыОперацийПоступлениеВКассу.Прочее, НСтр("ru = 'Прочее поступление'"));
		ДобавитьОписаниеОперации(Операции, , Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика, НСтр("ru = 'От поставщика (возврат)'"));
		
		Если ПолучитьФункциональнуюОпцию("КредитыИЗаймы") Тогда
			ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаКредитыИЗаймыКасса",  Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам, НСтр("ru = 'Получение кредита'"));
			ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаКредитыИЗаймыКасса",  Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
			ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаПокупкаВалютыКасса",  Перечисления.ВидыОперацийПоступлениеВКассу.ПокупкаВалюты);
		КонецЕсли;
		
		ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаПрочееКасса",  Перечисления.ВидыОперацийПоступлениеВКассу.ПолучениеНаличныхВБанке);
		ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаПрочееКасса",  Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты, НСтр("ru = 'От прочего контрагента (учредителя)'"));
		ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаПрочееКасса",  Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника);
		
		Если ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж") Тогда
			ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаПрочееКасса",  Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка);
			ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаПрочееКасса",  Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет, НСтр("ru = 'Розничная выручка (суммовой учет)'"));
		КонецЕсли;
		
		Если ОрганизацияИндивидуальныйПредпринимательСуществует() Тогда
			ДобавитьОписаниеОперации(Операции, "ПоступлениеГруппаЛичныеСредстваКасса", Перечисления.ВидыОперацийПоступлениеВКассу.ЛичныеСредстваПредпринимателя, НСтр("ru = 'Личные средства'"));
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			ДобавитьОписаниеОперации(Операции, , Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации, НСтр("ru = 'От нашей организации'"));
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = "ПлатежноеПоручение" Тогда
		
		ДобавитьОписаниеОперации(Операции, "ППГруппаПоставщикуНаРасходыБанк",  Перечисления.ВидыОперацийПлатежноеПоручение.Оплата);
		ДобавитьОписаниеОперации(Операции, "ППГруппаПоставщикуНаРасходыБанк", Перечисления.ВидыОперацийПлатежноеПоручение.НаРасходы);
		
		Если Константы.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата.Получить() Тогда
			ДобавитьОписаниеОперации(Операции,"ППГруппаЗарплатаБанк", Перечисления.ВидыОперацийПлатежноеПоручение.Зарплата, НСтр("ru = 'Зарплата по ведомости'"));
			ДобавитьОписаниеОперации(Операции,"ППГруппаЗарплатаБанк", Перечисления.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику);
		КонецЕсли;
		
		ДобавитьОписаниеОперации(Операции, , Перечисления.ВидыОперацийПлатежноеПоручение.ПрочиеРасчеты, НСтр("ru = 'Прочему контрагенту (учредителю, таможне)'"));
		ДобавитьОписаниеОперации(Операции, , Перечисления.ВидыОперацийПлатежноеПоручение.Покупателю, НСтр("ru = 'Покупателю (возврат)'"));
		
		ДобавитьОписаниеОперации(Операции, "ППГруппаПрочееБанк", Перечисления.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет, НСтр("ru = 'Перевод на другой счет'"));
		ДобавитьОписаниеОперации(Операции, "ППГруппаПрочееБанк", Перечисления.ВидыОперацийПлатежноеПоручение.Прочее, НСтр("ru = 'Прочий расход'"));
		ДобавитьОписаниеОперации(Операции, "ППГруппаПрочееБанк", Перечисления.ВидыОперацийПлатежноеПоручение.Подотчетнику);
		
		ДобавитьОписаниеОперации(Операции, "ППГруппаПрочееБанк", Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога, НСтр("ru = 'Перечисление в бюджет'"));
		
		Если ПолучитьФункциональнуюОпцию("КредитыИЗаймы") Тогда
			ДобавитьОписаниеОперации(Операции, "ППГруппаПрочееБанк", Перечисления.ВидыОперацийПлатежноеПоручение.РасчетыПоКредитам, НСтр("ru = 'Возврат кредита'"));
		КонецЕсли;
		
		Если ОрганизацияИндивидуальныйПредпринимательСуществует() Тогда
			ДобавитьОписаниеОперации(Операции, "ППГруппаЛичныеСредстваБанк", Перечисления.ВидыОперацийПлатежноеПоручение.ЛичныеСредстваПредпринимателя, НСтр("ru = 'Личные средства'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Операции;
	
КонецФункции

// Возвращает список значений с доступными организациями, для использования в формах
// Параметры:
//   ЮридическоеФизическоеЛицо - ПеречислениеСсылка.ЮридическоеФизическоеЛицо - Если параметр заполнен, возвращается
//       список организаций только определенного вида
//
Функция ПолучитьСписокВыбораОрганизаций(ЮридическоеФизическоеЛицо = Неопределено) Экспорт
	
	СписокЗначений = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|//%УсловиеЮридическоеФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если ЮридическоеФизическоеЛицо <> Неопределено Тогда
		
		ТекстУсловия = "ГДЕ Организации.ЮридическоеФизическоеЛицо = &ЮридическоеФизическоеЛицо ";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловиеЮридическоеФизическоеЛицо", ТекстУсловия);
		Запрос.УстановитьПараметр("ЮридическоеФизическоеЛицо", ЮридическоеФизическоеЛицо); 
	
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОрганизаций = РезультатЗапроса.Выбрать();
	Пока ВыборкаОрганизаций.Следующий() Цикл
		СписокЗначений.Добавить(ВыборкаОрганизаций.Ссылка);
	КонецЦикла;
	
	Возврат СписокЗначений;
	
КонецФункции

// Проверяет наличие хотя бы одной организации с типом "Индивидуальный предприниматель"
//
Функция ОрганизацияИндивидуальныйПредпринимательСуществует() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
	
	ВыборкаОрганизацииИП = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаОрганизацииИП.Количество() > 0;
	
КонецФункции // ОрганизацияИндивидуальныйПредпринимательСуществует()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет структуру описания вида операции денежных документов в список операций
//
// Параметры:
//   Операции - Массив - Массив видов операций для добавления
//   ИмяГруппы - Строка - Дополнительная группировка однотипных операций
//   ЗначениеПеречисления - ПеречислениеСсылка - Значение перечисления с видом операции
//   Представление - Строка - Представление вида операции в пользовательском режиме, если не заполнено, используется
//                            стандартное строковое представление
//   Описание - Строка - Дополнительное описание операции, может быть использовано для подсказки в форме
//
Процедура ДобавитьОписаниеОперации(Операции, ИмяГруппы = "", ЗначениеПеречисления, Представление = "", Описание = "")
	
	Операция = Новый Структура;
	
	Операция.Вставить("ЗначениеПеречисления", ЗначениеПеречисления);
	Операция.Вставить("Имя",				  XMLСтрока(Операция.ЗначениеПеречисления));
	Операция.Вставить("Представление",        ?(ЗначениеЗаполнено(Представление), Представление, Строка(Операция.ЗначениеПеречисления)));
	Операция.Вставить("Описание",             ?(ЗначениеЗаполнено(Описание), Описание, Операция.Представление));
	Операция.Вставить("ИмяГруппы",            ИмяГруппы);
	
	Операции.Добавить(Операция);
	
КонецПроцедуры

// Возвращает строковое представление вида операции денежных документов
//
// Параметры:
//   ВидОперации - ПеречислениеСсылка - Значение перечисления с видом операции
//
Функция ВидОперацииСтрокой(ВидОперации)
	
	Возврат XMLСтрока(ВидОперации);
	
КонецФункции // ВидОперацииСтрокой()
 
#КонецОбласти





