#Область АвтоматическоеНачислениеИСписание

Процедура АвтоматическоеНачислениеИСписаниеБонусныхБаллов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УстановкаПериодаРассчитанныхИтогов);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Попытка
		ВыполнитьАвтоматическоеНачислениеИСписание();
	Исключение
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Автоматическое начисление и списание бонусных баллов.'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьАвтоматическоеНачислениеИСписание()
	
	ТЧСписаний = Новый ТаблицаЗначений;
	ТЧСписаний.Колонки.Добавить("БонуснаяКарта");
	ТЧСписаний.Колонки.Добавить("Количество");
	ТЧСписаний.Колонки.Добавить("КорректировкаКСписанию");
	
	ТЧНачислений = Новый ТаблицаЗначений;
	ТЧНачислений.Колонки.Добавить("БонуснаяКарта");
	ТЧНачислений.Колонки.Добавить("Количество");
	ТЧНачислений.Колонки.Добавить("ДатаНачисления");
	ТЧНачислений.Колонки.Добавить("ДатаСгорания");
	ТЧНачислений.Колонки.Добавить("АналитикаНачисленияБонусов");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	БонусныеПрограммы.Ссылка КАК Ссылка,
	|	БонусныеПрограммы.НачислятьБонусыНаДеньРождения КАК НачислятьБонусыНаДеньРождения,
	|	БонусныеПрограммы.НачислятьПередДнемРождения КАК НачислятьПередДнемРождения,
	|	БонусныеПрограммы.ДнейПередДнемРождения КАК ДнейПередДнемРождения,
	|	БонусныеПрограммы.СписыватьПослеДняРождения КАК СписыватьПослеДняРождения,
	|	БонусныеПрограммы.ДнейПослеДняРождения КАК ДнейПослеДняРождения,
	|	БонусныеПрограммы.КоличествоБонусовНаДеньРождения КАК КоличествоБонусовНаДеньРождения
	|ПОМЕСТИТЬ ВТ_БонусныеПрограммы
	|ИЗ
	|	Справочник.БонусныеПрограммы КАК БонусныеПрограммы
	|ГДЕ
	|	НЕ БонусныеПрограммы.ПометкаУдаления
	|	И (БонусныеПрограммы.СписаниеНеиспользованных
	|			ИЛИ БонусныеПрограммы.НачислятьПередДнемРождения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_БонусныеПрограммы.Ссылка КАК Программа,
	|	ВидыДисконтныхКарт.Ссылка КАК ВидКарты,
	|	ВТ_БонусныеПрограммы.НачислятьБонусыНаДеньРождения КАК НачислятьБонусыНаДеньРождения,
	|	ВТ_БонусныеПрограммы.НачислятьПередДнемРождения КАК НачислятьПередДнемРождения,
	|	ВТ_БонусныеПрограммы.ДнейПередДнемРождения КАК ДнейПередДнемРождения,
	|	ВТ_БонусныеПрограммы.СписыватьПослеДняРождения КАК СписыватьПослеДняРождения,
	|	ВТ_БонусныеПрограммы.ДнейПослеДняРождения КАК ДнейПослеДняРождения,
	|	ВТ_БонусныеПрограммы.КоличествоБонусовНаДеньРождения КАК КоличествоБонусовНаДеньРождения
	|ПОМЕСТИТЬ ВТ_ВидыИПрограммы
	|ИЗ
	|	ВТ_БонусныеПрограммы КАК ВТ_БонусныеПрограммы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДисконтныхКарт КАК ВидыДисконтныхКарт
	|		ПО ВТ_БонусныеПрограммы.Ссылка = ВидыДисконтныхКарт.БонуснаяПрограмма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВидыИПрограммы.Программа КАК Программа,
	|	ДисконтныеКарты.Ссылка КАК Карта,
	|	ВТ_ВидыИПрограммы.НачислятьБонусыНаДеньРождения КАК НачислятьБонусыНаДеньРождения,
	|	ВТ_ВидыИПрограммы.НачислятьПередДнемРождения КАК НачислятьПередДнемРождения,
	|	ВТ_ВидыИПрограммы.ДнейПередДнемРождения КАК ДнейПередДнемРождения,
	|	ВТ_ВидыИПрограммы.СписыватьПослеДняРождения КАК СписыватьПослеДняРождения,
	|	ВТ_ВидыИПрограммы.ДнейПослеДняРождения КАК ДнейПослеДняРождения,
	|	ВТ_ВидыИПрограммы.КоличествоБонусовНаДеньРождения КАК КоличествоБонусовНаДеньРождения,
	|	ДисконтныеКарты.ВладелецКарты КАК ВладелецКарты
	|ПОМЕСТИТЬ ВТ_КартыИПрограммы
	|ИЗ
	|	ВТ_ВидыИПрограммы КАК ВТ_ВидыИПрограммы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|		ПО ВТ_ВидыИПрограммы.ВидКарты = ДисконтныеКарты.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КартыИПрограммы.Карта КАК Карта,
	|	ДОБАВИТЬКДАТЕ(Контрагенты.ДатаРождения, ГОД, РАЗНОСТЬДАТ(Контрагенты.ДатаРождения, НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ), ГОД)) КАК ДеньРождения_ЭтотГод,
	|	ДОБАВИТЬКДАТЕ(Контрагенты.ДатаРождения, ГОД, РАЗНОСТЬДАТ(Контрагенты.ДатаРождения, НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ), ГОД) + 1) КАК ДеньРождения_СледующийГод
	|ПОМЕСТИТЬ ВТ_ДниРождения
	|ИЗ
	|	ВТ_КартыИПрограммы КАК ВТ_КартыИПрограммы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ВТ_КартыИПрограммы.ВладелецКарты = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияБонусныхБаллов КАК НачисленияБонусныхБаллов
	|		ПО ВТ_КартыИПрограммы.Карта = НачисленияБонусныхБаллов.БонуснаяКарта
	|			И (НачисленияБонусныхБаллов.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ), ДЕНЬ, -ВТ_КартыИПрограммы.ДнейПередДнемРождения) И НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ))
	|			И (НачисленияБонусныхБаллов.АналитикаНачисленияБонусов = ЗНАЧЕНИЕ(Справочник.АналитикаНачисленияБонусов.НачислениеНаДеньРождения))
	|ГДЕ
	|	ВТ_КартыИПрограммы.НачислятьБонусыНаДеньРождения
	|	И Контрагенты.ДатаРождения <> ДАТАВРЕМЯ(1, 1, 1)
	|	И НачисленияБонусныхБаллов.БонуснаяКарта ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_БонусныеПрограммы.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_БонусныеПрограммы КАК ВТ_БонусныеПрограммы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КартыИПрограммы.Программа КАК БонуснаяПрограмма,
	|	БонусныеБаллыОстатки.БонуснаяКарта КАК БонуснаяКарта,
	|	БонусныеБаллыОстатки.НачисленоОстаток КАК Начислено,
	|	БонусныеБаллыОстатки.КСписаниюОстаток КАК КСписанию
	|ИЗ
	|	ВТ_КартыИПрограммы КАК ВТ_КартыИПрограммы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БонусныеБаллы.Остатки(&ТекущийПериод, ) КАК БонусныеБаллыОстатки
	|		ПО ВТ_КартыИПрограммы.Карта = БонусныеБаллыОстатки.БонуснаяКарта
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_КартыИПрограммы.Программа,
	|	БонусныеБаллыОстатки.БонуснаяКарта,
	|	БонусныеБаллыОстатки.НачисленоОстаток,
	|	БонусныеБаллыОстатки.КСписаниюОстаток
	|
	|ИМЕЮЩИЕ
	|	СУММА(БонусныеБаллыОстатки.КСписаниюОстаток) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КартыИПрограммы.Программа КАК БонуснаяПрограмма,
	|	ВТ_КартыИПрограммы.Карта КАК БонуснаяКарта,
	|	ВТ_КартыИПрограммы.КоличествоБонусовНаДеньРождения КАК Количество,
	|	НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ) КАК ДатаНачисления,
	|	ВЫБОР
	|		КОГДА ВТ_КартыИПрограммы.СписыватьПослеДняРождения
	|			ТОГДА ВЫБОР
	|					КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ), ВТ_ДниРождения.ДеньРождения_ЭтотГод, ДЕНЬ) <= ВТ_КартыИПрограммы.ДнейПередДнемРождения
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВТ_ДниРождения.ДеньРождения_ЭтотГод, ДЕНЬ, ВТ_КартыИПрограммы.ДнейПослеДняРождения), ДЕНЬ)
	|					КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ), ВТ_ДниРождения.ДеньРождения_СледующийГод, ДЕНЬ) <= ВТ_КартыИПрограммы.ДнейПередДнемРождения
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВТ_ДниРождения.ДеньРождения_СледующийГод, ДЕНЬ, ВТ_КартыИПрограммы.ДнейПослеДняРождения), ДЕНЬ)
	|				КОНЕЦ
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаСгорания,
	|	ЗНАЧЕНИЕ(Справочник.АналитикаНачисленияБонусов.НачислениеНаДеньРождения) КАК АналитикаНачисленияБонусов
	|ИЗ
	|	ВТ_КартыИПрограммы КАК ВТ_КартыИПрограммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДниРождения КАК ВТ_ДниРождения
	|		ПО ВТ_КартыИПрограммы.Карта = ВТ_ДниРождения.Карта
	|			И (ВТ_КартыИПрограммы.НачислятьБонусыНаДеньРождения)
	|			И (ВЫБОР
	|				КОГДА ВТ_КартыИПрограммы.НачислятьПередДнемРождения
	|					ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ), ВТ_ДниРождения.ДеньРождения_ЭтотГод, ДЕНЬ) <= ВТ_КартыИПрограммы.ДнейПередДнемРождения
	|								И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ), ВТ_ДниРождения.ДеньРождения_ЭтотГод, ДЕНЬ) >= 0
	|							ИЛИ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ), ВТ_ДниРождения.ДеньРождения_СледующийГод, ДЕНЬ) <= ВТ_КартыИПрограммы.ДнейПередДнемРождения
	|				ИНАЧЕ ВТ_ДниРождения.ДеньРождения_ЭтотГод = НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ)
	|			КОНЕЦ)
	|ГДЕ
	|	ВТ_КартыИПрограммы.НачислятьБонусыНаДеньРождения");
	Запрос.УстановитьПараметр("ТекущийПериод", КонецДня(ТекущаяДатаСеанса()));
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаПрограмм		= Результат[4].Выбрать();
	ТаблицаСписаний		= Результат[5].Выгрузить();
	ТаблицаНачислений	= Результат[6].Выгрузить();

	Пока ВыборкаПрограмм.Следующий() Цикл
		
		ТЧСписаний.Очистить();
		НайденныеСтроки = ТаблицаСписаний.НайтиСтроки(Новый Структура("БонуснаяПрограмма", ВыборкаПрограмм.Ссылка));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ТЧСписаний.Добавить();
			НоваяСтрока.БонуснаяКарта = НайденнаяСтрока.БонуснаяКарта;
			НоваяСтрока.КорректировкаКСписанию = НайденнаяСтрока.КСписанию;
			Если НайденнаяСтрока.Начислено <= 0 Тогда
				НоваяСтрока.Количество = 0;
			Иначе
				НоваяСтрока.Количество = Мин(НайденнаяСтрока.Начислено, НайденнаяСтрока.КСписанию);
			КонецЕсли;
		КонецЦикла;
		
		ТЧНачислений.Очистить();
		НайденныеСтроки = ТаблицаНачислений.НайтиСтроки(Новый Структура("БонуснаяПрограмма", ВыборкаПрограмм.Ссылка));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ТЧНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
		КонецЦикла;
		
		
		Если ТЧСписаний.Количество() > 0 Или ТЧНачислений.Количество() <> 0 Тогда
			
			Документ = СоздатьДокументНачислениеИСписания(ВыборкаПрограмм.Ссылка);
			Документ.СписанияБонусов.Загрузить(ТЧСписаний);
			Документ.НачисленияБонусов.Загрузить(ТЧНачислений);
			Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьДокументНачислениеИСписания(БонуснаяПрограмма)
	
	Документ = Документы.НачислениеСписаниеБонусныхБаллов.СоздатьДокумент();
	
	Документ.Заполнить(Неопределено);
	Документ.СлужебныйДокумент = Истина;
	Документ.БонуснаяПрограмма = БонуснаяПрограмма;
	Документ.Дата = НачалоДня(ТекущаяДатаСеанса());
	Документ.Комментарий = НСтр("ru = '#Автоматическое начисление и списание бонусных баллов'");
	
	Возврат Документ;
	
КонецФункции

#КонецОбласти

#Область Уведомления

Процедура СоздатьШаблоныСообщенийПоУмолчанию() Экспорт
	
	Если Не ЕстьШаблон() Тогда
		
		Наименование = НаименованиеШаблонаСообщенияНачислениеБонусов();
		ТекстШаблона = НСтр(
			"ru = 'Начислено: [НачислениеСписаниеБонусов.НачисленоБаллов].
			|Остаток на [ОбщиеРеквизиты.ТекущаяДата]: [НачислениеСписаниеБонусов.ОстатокБаллов].'");
		СоздатьШаблон(Наименование, ТекстШаблона);
		
		Наименование = НаименованиеШаблонаСообщенияСписаниеБонусов();
		ТекстШаблона = НСтр(
			"ru = 'Списано: [НачислениеСписаниеБонусов.СписаноБаллов].
			|Остаток на [ОбщиеРеквизиты.ТекущаяДата]: [НачислениеСписаниеБонусов.ОстатокБаллов].'");
		СоздатьШаблон(Наименование, ТекстШаблона);
		
		Наименование = НаименованиеШаблонаСообщенияСписаниеНачислениеБонусов();
		ТекстШаблона = НСтр(
			"ru = 'Начислено: [НачислениеСписаниеБонусов.НачисленоБаллов].
			|Списано: [НачислениеСписаниеБонусов.СписаноБаллов].
			|Остаток на [ОбщиеРеквизиты.ТекущаяДата]: [НачислениеСписаниеБонусов.ОстатокБаллов].'");
		СоздатьШаблон(Наименование, ТекстШаблона);
		
		Наименование = НаименованиеШаблонаСообщенияНачислениеБонусовНаДеньРождения();
		ТекстШаблона = НСтр(
			"ru = 'В честь дня рождения вам начислены бонусы!
			|Начислено: [НачислениеСписаниеБонусов.НачисленоБаллов].
			|Остаток на [ОбщиеРеквизиты.ТекущаяДата]: [НачислениеСписаниеБонусов.ОстатокБаллов].'");
		СоздатьШаблон(Наименование, ТекстШаблона);
		
		Наименование = НаименованиеШаблонаСообщенияСгораниеБонусов();
		ТекстШаблона = НСтр(
			"ru = 'Списаны неиспользованные бонусы в размере: [НачислениеСписаниеБонусов.СписаноБаллов].
			|Остаток на [ОбщиеРеквизиты.ТекущаяДата]: [НачислениеСписаниеБонусов.ОстатокБаллов].'");
		СоздатьШаблон(Наименование, ТекстШаблона);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьШаблон()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШаблоныСообщений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
	|ГДЕ
	|	ШаблоныСообщений.Назначение = ""Начисление/списание бонусов""");
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура СоздатьШаблон(Наименование, ТекстШаблона)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйШаблон = Справочники.ШаблоныСообщений.СоздатьЭлемент();
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Наименование",							Наименование);
	ДанныеЗаполнения.Вставить("Текст",									ТекстШаблона);
	ДанныеЗаполнения.Вставить("ПредназначенДляSMS",						Истина);
	ДанныеЗаполнения.Вставить("ПредназначенДляВводаНаОсновании",		Истина);
	ДанныеЗаполнения.Вставить("Назначение",								"Начисление/списание бонусов");
	ДанныеЗаполнения.Вставить("ПолноеИмяТипаПараметраВводаНаОсновании",	"НачислениеСписаниеБонусов");
	
	НовыйШаблон.Заполнить(ДанныеЗаполнения);
	
	НовыйШаблон.Записать();
	
КонецПроцедуры

Функция НаименованиеШаблонаСообщенияСписаниеБонусов() Экспорт
	
	Возврат НСтр("ru='Уведомление о списании бонусов'");
	
КонецФункции

Функция НаименованиеШаблонаСообщенияНачислениеБонусов() Экспорт
	
	Возврат НСтр("ru='Уведомление о начислении бонусов'");
	
КонецФункции

Функция НаименованиеШаблонаСообщенияСписаниеНачислениеБонусов() Экспорт
	
	Возврат НСтр("ru='Уведомление о начислении/списании бонусов'");
	
КонецФункции

Функция НаименованиеШаблонаСообщенияСгораниеБонусов() Экспорт
	
	Возврат НСтр("ru='Уведомление о сгорании бонусов'");
	
КонецФункции

Функция НаименованиеШаблонаСообщенияНачислениеБонусовНаДеньРождения() Экспорт
	
	Возврат НСтр("ru='Уведомление о начислении бонусов на день рождения'");
	
КонецФункции

Процедура ПриФормированииСообщения(Сообщение, НазначениеШаблона, ПредметСообщения, ПараметрыШаблона) Экспорт
	
	Если НазначениеШаблона = "НачислениеСписаниеБонусов" Тогда
		
		ШаблоныСообщений.ЗаполнитьРеквизитыПоСКД(Сообщение.ЗначенияРеквизитов, ПредметСообщения, ПараметрыШаблона);
		ОстатокБаллов = Сообщение.ЗначенияРеквизитов.Получить("ОстатокБаллов");
		НачисленоБаллов = Сообщение.ДополнительныеПараметры.ПараметрыСообщения.Начислено;
		СписаноБаллов = Сообщение.ДополнительныеПараметры.ПараметрыСообщения.Списано;
		
		ТекущаяДата = Сообщение.ЗначенияОбщихРеквизитов.Получить("ТекущаяДата");
		Шаблон = ПолучитьШаблонСтрокиБаллов();
		
		Если ОстатокБаллов <> Неопределено Тогда
			Сообщение.ЗначенияРеквизитов.Вставить("ОстатокБаллов", СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, ОстатокБаллов));
		КонецЕсли;
		
		Если НачисленоБаллов <> Неопределено Тогда
			Сообщение.ЗначенияРеквизитов.Вставить("НачисленоБаллов", СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, НачисленоБаллов));
		КонецЕсли;
		
		Если СписаноБаллов <> Неопределено Тогда
			Сообщение.ЗначенияРеквизитов.Вставить("СписаноБаллов", СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, СписаноБаллов));
		КонецЕсли;
		
		Если ТекущаяДата <> Неопределено Тогда
			Сообщение.ЗначенияОбщихРеквизитов.Вставить("ТекущаяДата", Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьШаблонСтрокиБаллов()
	
	Возврат НСтр("ru = ';%1 балл;;%1 балла;%1 баллов;%1 баллов'");
	
КонецФункции

Процедура УведомлениеОбАвтоматическомНачисленииСписанииБонусов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УстановкаПериодаРассчитанныхИтогов);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Попытка
		УведомитьОбАвтоматическомНачисленииИСписанииБонусныхБаллов();
	Исключение
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Уведомление об автоматическом начислении и списании бонусных баллов.'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры

Процедура УведомитьОбАвтоматическомНачисленииИСписанииБонусныхБаллов()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеСписаниеБонусныхБаллов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СписокДокументов
	|ИЗ
	|	Документ.НачислениеСписаниеБонусныхБаллов КАК НачислениеСписаниеБонусныхБаллов
	|ГДЕ
	|	НЕ НачислениеСписаниеБонусныхБаллов.УведомлениеОтправлено
	|	И НачислениеСписаниеБонусныхБаллов.Проведен
	|	И НачислениеСписаниеБонусныхБаллов.СлужебныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокДокументов.Ссылка КАК Ссылка,
	|	НачислениеСписаниеБонусныхБалловНачисленияБонусов.БонуснаяКарта КАК БонуснаяКарта,
	|	НачислениеСписаниеБонусныхБалловНачисленияБонусов.БонуснаяКарта.ВладелецКарты КАК Владелец,
	|	НачислениеСписаниеБонусныхБалловНачисленияБонусов.АналитикаНачисленияБонусов КАК АналитикаНачисленияБонусов,
	|	СУММА(НачислениеСписаниеБонусныхБалловНачисленияБонусов.Количество) КАК Начислено,
	|	NULL КАК Списано
	|ИЗ
	|	СписокДокументов КАК СписокДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеБонусныхБаллов.НачисленияБонусов КАК НачислениеСписаниеБонусныхБалловНачисленияБонусов
	|		ПО СписокДокументов.Ссылка = НачислениеСписаниеБонусныхБалловНачисленияБонусов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокДокументов.Ссылка,
	|	НачислениеСписаниеБонусныхБалловНачисленияБонусов.БонуснаяКарта,
	|	НачислениеСписаниеБонусныхБалловНачисленияБонусов.АналитикаНачисленияБонусов,
	|	НачислениеСписаниеБонусныхБалловНачисленияБонусов.БонуснаяКарта.ВладелецКарты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписокДокументов.Ссылка,
	|	НачислениеСписаниеБонусныхБалловСписанияБонусов.БонуснаяКарта,
	|	НачислениеСписаниеБонусныхБалловСписанияБонусов.БонуснаяКарта.ВладелецКарты,
	|	ЗНАЧЕНИЕ(Справочник.АналитикаНачисленияБонусов.ПустаяСсылка),
	|	NULL,
	|	СУММА(НачислениеСписаниеБонусныхБалловСписанияБонусов.Количество)
	|ИЗ
	|	СписокДокументов КАК СписокДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеБонусныхБаллов.СписанияБонусов КАК НачислениеСписаниеБонусныхБалловСписанияБонусов
	|		ПО СписокДокументов.Ссылка = НачислениеСписаниеБонусныхБалловСписанияБонусов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокДокументов.Ссылка,
	|	НачислениеСписаниеБонусныхБалловСписанияБонусов.БонуснаяКарта,
	|	НачислениеСписаниеБонусныхБалловСписанияБонусов.БонуснаяКарта.ВладелецКарты
	|ИТОГИ ПО
	|	Ссылка");
	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Выборка = ВыборкаДокументов.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Начислено) Тогда
				Если Выборка.АналитикаНачисленияБонусов = Справочники.АналитикаНачисленияБонусов.НачислениеНаДеньРождения Тогда
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("ПараметрыСообщения", Новый Структура);
					ДополнительныеПараметры.ПараметрыСообщения.Вставить("Начислено", Выборка.Начислено);
					ДополнительныеПараметры.ПараметрыСообщения.Вставить("Списано", 0);
					Событие = "НачислениеБонусовНаДеньРождения";
					АссистентУправления.ПриСрабатыванииСобытия(Выборка.БонуснаяКарта, Событие, Выборка.Ссылка, ДополнительныеПараметры);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.Списано) Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрыСообщения", Новый Структура);
				ДополнительныеПараметры.ПараметрыСообщения.Вставить("Начислено", 0);
				ДополнительныеПараметры.ПараметрыСообщения.Вставить("Списано", Выборка.Списано);
				Событие = "СписаниеБонусовПриСгорании";
				АссистентУправления.ПриСрабатыванииСобытия(Выборка.БонуснаяКарта, Событие, Выборка.Ссылка, ДополнительныеПараметры);
			КонецЕсли;
		КонецЦикла;
		
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.УведомлениеОтправлено = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриИзмененииУведомленияОбАвтоматическомНачисленииСписанииБонусов(Расписание) Экспорт
	
	
	
КонецПроцедуры

Процедура ИзменитьПараметрыУведомленияОбАвтоматическомНачисленииСписанииБонусов(ВРаботе, ВремяОтправкиПисьма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовоеРасписание = СоздатьРасписание(ВремяОтправкиПисьма);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", "УведомлениеОбАвтоматическомНачисленииСписанииБонусов");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Если Задания.Количество() <> 1 Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", ВРаботе);
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.УведомлениеОбАвтоматическомНачисленииСписанииБонусов);
		ПараметрыЗадания.Вставить("Расписание", НовоеРасписание);
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		Задание = Задания[0];
		Если (Задание.Использование <> ВРаботе) ИЛИ (Задание.Расписание <> НовоеРасписание) Тогда
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Использование", ВРаботе);
			ПараметрыЗадания.Вставить("Расписание", НовоеРасписание);
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание.УникальныйИдентификатор, ПараметрыЗадания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьРасписание(ВремяОтправкиПисьма)
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней = 1;
	Расписание.ВремяНачала = ВремяОтправкиПисьма;
	Расписание.ВремяКонца = ВремяОтправкиПисьма + 3*3600;
	
	Возврат Расписание;
	
КонецФункции

Функция ПолучитьВремяОтправкиУведомлений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", "УведомлениеОбАвтоматическомНачисленииСписанииБонусов");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Если Задания.Количество() <> 1 Тогда
		Возврат Неопределено;
	Иначе
		Задание = Задания[0];
		Возврат Задание.Расписание.ВремяНачала;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьБонуснуюПрограмму(ДисконтнаяКарта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДисконтныеКарты.Владелец.БонуснаяПрограмма КАК БонуснаяПрограмма
		|ИЗ
		|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
		|ГДЕ
		|	ДисконтныеКарты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДисконтнаяКарта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.БонуснаяПрограмма;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьМаксимальныйПроцентОплаты(ДисконтнаяКарта) Экспорт
	
	БонуснаяПрограмма = ПолучитьБонуснуюПрограмму(ДисконтнаяКарта);
	
	Если ЗначениеЗаполнено(БонуснаяПрограмма) Тогда
		
		Возврат БонуснаяПрограмма.МаксимальныйПроцентОплаты;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

Функция ОпределитьОграничениеОплаты(ДисконтнаяКарта, СуммаДокумента) Экспорт
	
	РеквизитыБП = РеквизитыБонуснойПрограммы(ДисконтнаяКарта);
	МаксимальныйПроцент = РеквизитыБП.МаксимальныйПроцентОплаты;
	Если ЗначениеЗаполнено(МаксимальныйПроцент) Тогда
		ОграничениеОплаты = Окр(СуммаДокумента * МаксимальныйПроцент/100, 2);
	Иначе
		ОграничениеОплаты = СуммаДокумента;
	КонецЕсли;
	
	Возврат ОграничениеОплаты;
	
КонецФункции

Функция ПрибавитьКДатеПериод(ТекущаяДата, КоличествоПериодов, Периодичность) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, &КоличествоПериодов)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, &КоличествоПериодов)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕКАДА, &КоличествоПериодов)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, &КоличествоПериодов)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, КВАРТАЛ, &КоличествоПериодов)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ПОЛУГОДИЕ, &КоличествоПериодов)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, &КоличествоПериодов)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Результат";
	Запрос.УстановитьПараметр("КоличествоПериодов", КоличествоПериодов);
	Запрос.УстановитьПараметр("Периодичность", Периодичность);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеБонуснойКарты(БонуснаяКарта, Период) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Остаток");
	СтруктураВозврата.Вставить("ТаблицаДвижений");
	СтруктураВозврата.Вставить("Владелец");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БонусныеБаллы.Период КАК Период,
	|	ВЫБОР
	|		КОГДА БонусныеБаллы.Начислено <> 0
	|			ТОГДА БонусныеБаллы.Начислено
	|		КОГДА БонусныеБаллы.КСписанию <> 0
	|			ТОГДА -БонусныеБаллы.КСписанию
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Изменение
	|ПОМЕСТИТЬ ТаблицаИзменений
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.Период > &Период
	|	И БонусныеБаллы.БонуснаяКарта = &БонуснаяКарта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзменений.Период КАК Период,
	|	ТаблицаИзменений.Изменение КАК Изменение,
	|	СУММА(ТаблицаИзменений2.Изменение) КАК ИзменениеИтог
	|ПОМЕСТИТЬ ТаблицаИзмененияСИтогами
	|ИЗ
	|	ТаблицаИзменений КАК ТаблицаИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИзменений КАК ТаблицаИзменений2
	|		ПО ТаблицаИзменений.Период >= ТаблицаИзменений2.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзменений.Период,
	|	ТаблицаИзменений.Изменение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА БонусныеБаллыОстатки.НачисленоОстаток - БонусныеБаллыОстатки.КСписаниюОстаток < 0
	|			ТОГДА 0
	|		ИНАЧЕ БонусныеБаллыОстатки.НачисленоОстаток - БонусныеБаллыОстатки.КСписаниюОстаток
	|	КОНЕЦ КАК Остаток
	|ПОМЕСТИТЬ ТаблицаОстатка
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы.Остатки(&Период, БонуснаяКарта = &БонуснаяКарта) КАК БонусныеБаллыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатка.Остаток КАК Остаток
	|ИЗ
	|	ТаблицаОстатка КАК ТаблицаОстатка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзмененияСИтогами.Период КАК Период,
	|	ТаблицаИзмененияСИтогами.Изменение КАК Изменение,
	|	ТаблицаОстатка.Остаток + ТаблицаИзмененияСИтогами.ИзменениеИтог КАК Остаток
	|ИЗ
	|	ТаблицаИзмененияСИтогами КАК ТаблицаИзмененияСИтогами,
	|	ТаблицаОстатка КАК ТаблицаОстатка";
	Запрос.УстановитьПараметр("Период", КонецДня(Период));
	Запрос.УстановитьПараметр("БонуснаяКарта", БонуснаяКарта);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[3].Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата.Остаток = Выборка.Остаток;
	КонецЕсли;
	
	СтруктураВозврата.ТаблицаДвижений = Результат[4].Выгрузить();
	
	СтруктураВозврата.Владелец = ?(ЗначениеЗаполнено(БонуснаяКарта.ВладелецКарты), БонуснаяКарта.ВладелецКарты, "");
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура РаспределитьОплатуБонусамиКакСкидку(Объект, ТаблицаОплат = Неопределено) Экспорт
	
	Если ТаблицаОплат = Неопределено Тогда
		ТаблицаДляЗапроса = Объект.БезналичнаяОплата.Выгрузить(, "ВидОплаты, СуммаБонусов");
	Иначе
		ТаблицаДляЗапроса = ТаблицаОплат.Выгрузить(, "ВидОплаты, СуммаБонусов");
	КонецЕсли;
	
	// Получим общую сумму оплаты бонусами
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Оплата", ТаблицаДляЗапроса);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Оплата.ВидОплаты КАК ВидОплаты,
	|	Оплата.СуммаБонусов КАК Сумма
	|ПОМЕСТИТЬ ТЧ
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТЧ.Сумма) КАК Сумма
	|ИЗ
	|	ТЧ КАК ТЧ
	|ГДЕ
	|	ТЧ.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Бонусы)";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		
		СуммаБонусов = РезультатЗапроса.Сумма;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	// Очистим суммы бонусов в ТЧ "Запасы"
	Запасы = Объект.Запасы;
	Для Каждого СтрокаЗапаса Из Запасы Цикл
		
		СтрокаЗапаса.Сумма = СтрокаЗапаса.Сумма + СтрокаЗапаса.СуммаСкидкиОплатыБонусом;
		СтрокаЗапаса.СуммаСкидкиОплатыБонусом = 0;
		
	КонецЦикла;
	
	// Распределим сумму бонусов по запасам
	СуммаДокумента = Объект.Запасы.Итог("Всего");
	СуммаКРаспределению = СуммаБонусов;
	Для Каждого СтрокаЗапаса Из Запасы Цикл
		
		КоэффициентСтроки = СтрокаЗапаса.Всего / СуммаДокумента;
		СуммаБонусовСтроки = Окр(СуммаБонусов * КоэффициентСтроки, 2);
		СуммаБонусовСтроки = ?(СтрокаЗапаса.НомерСтроки = Запасы.Количество(),
			СуммаКРаспределению,
			Мин(СуммаБонусовСтроки, СуммаКРаспределению));
		СтрокаЗапаса.СуммаСкидкиОплатыБонусом = СуммаБонусовСтроки;
		СтрокаЗапаса.Сумма = СтрокаЗапаса.Сумма - СтрокаЗапаса.СуммаСкидкиОплатыБонусом;
		
		// НДС
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаЗапаса.СтавкаНДС);
		СтрокаЗапаса.СуммаНДС = ?(Объект.СуммаВключаетНДС,
								  СтрокаЗапаса.Сумма - (СтрокаЗапаса.Сумма) / ((СтавкаНДС + 100) / 100),
								  СтрокаЗапаса.Сумма * СтавкаНДС / 100);

		// Всего.
		СтрокаЗапаса.Всего = СтрокаЗапаса.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаЗапаса.СуммаНДС);
		
		СуммаКРаспределению = СуммаКРаспределению - СуммаБонусовСтроки;
		Если СуммаКРаспределению < 0 Тогда
			СуммаКРаспределению = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьРезультатРасчетаБонусовКОбъекту(Объект, ТаблицаБонусов) Экспорт
	
	Объект.БонусныеБаллыКНачислению.Загрузить(ТаблицаБонусов);
	
КонецПроцедуры

// Возвращает массив ссылок на дисконтные карты
// принадлежащие переданной бонусной программе
Функция ПолучитьКартыБонуснойПрограммы(БонуснаяПрограмма) Экспорт
	
	МассивКарт = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДисконтныеКарты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|ГДЕ
	|	ДисконтныеКарты.Владелец.БонуснаяПрограмма = &БонуснаяПрограмма");
	Запрос.УстановитьПараметр("БонуснаяПрограмма", БонуснаяПрограмма);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		МассивКарт.Добавить(Результат.Ссылка);
	КонецЦикла;
	
	Возврат МассивКарт;
	
КонецФункции

Функция ЕстьДействующиеПравилаНачисления(БонуснаяПрограмма) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	АвтоматическиеСкидки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК АвтоматическиеСкидки
	|ГДЕ
	|	АвтоматическиеСкидки.Действует
	|	И АвтоматическиеСкидки.БонуснаяПрограмма = &БонуснаяПрограмма
	|	И АвтоматическиеСкидки.ЭтоПравилоНачисленияБонусов");
	Запрос.УстановитьПараметр("БонуснаяПрограмма", БонуснаяПрограмма);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

Функция РеквизитыБонуснойПрограммы(ДисконтнаяКарта) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДисконтныеКарты.Владелец КАК Владелец
	|ПОМЕСТИТЬ Карта
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|ГДЕ
	|	ДисконтныеКарты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДисконтныхКарт.БонуснаяПрограмма КАК БонуснаяПрограмма
	|ПОМЕСТИТЬ ВидКарт
	|ИЗ
	|	Карта КАК Карта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДисконтныхКарт КАК ВидыДисконтныхКарт
	|		ПО Карта.Владелец = ВидыДисконтныхКарт.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеПрограммы.МаксимальныйПроцентОплаты КАК МаксимальныйПроцентОплаты,
	|	БонусныеПрограммы.ПериодичностьСписания КАК ПериодичностьСписания,
	|	БонусныеПрограммы.КоличествоПериодовСписания КАК КоличествоПериодовСписания,
	|	БонусныеПрограммы.ПериодичностьОтсрочки КАК ПериодичностьОтсрочки,
	|	БонусныеПрограммы.КоличествоПериодовОтсрочки КАК КоличествоПериодовОтсрочки,
	|	БонусныеПрограммы.НачислятьБонусыНаДеньРождения КАК НачислятьБонусыНаДеньРождения,
	|	БонусныеПрограммы.ДнейПередДнемРождения КАК ДнейПередДнемРождения,
	|	БонусныеПрограммы.ДнейПослеДняРождения КАК ДнейПослеДняРождения,
	|	БонусныеПрограммы.КоличествоБонусовНаДеньРождения КАК КоличествоБонусовНаДеньРождения,
	|	БонусныеПрограммы.ОтсрочкаНачисления КАК ОтсрочкаНачисления,
	|	БонусныеПрограммы.СписаниеНеиспользованных КАК СписаниеНеиспользованных,
	|	БонусныеПрограммы.НачислятьПередДнемРождения КАК НачислятьПередДнемРождения,
	|	БонусныеПрограммы.СписыватьПослеДняРождения КАК СписыватьПослеДняРождения,
	|	БонусныеПрограммы.НеНачислятьПриОплатеБонусами КАК НеНачислятьПриОплатеБонусами,
	|	БонусныеПрограммы.НачислятьБонусыПриВозврате КАК НачислятьБонусыПриВозврате,
	|	ВидКарт.БонуснаяПрограмма КАК БонуснаяПрограмма
	|ИЗ
	|	ВидКарт КАК ВидКарт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммы КАК БонусныеПрограммы
	|		ПО ВидКарт.БонуснаяПрограмма = БонусныеПрограммы.Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДисконтнаяКарта);
	
	Результат = Запрос.Выполнить().Выгрузить();
	СтруктураВозврата = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат[0]);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ЕстьОплатаБонусами(Знач БезналичнаяОплата) Экспорт
	
	ОплатаБонусами = Перечисления.ВидыБезналичныхОплат.Бонусы;
	НайденныеСтроки = БезналичнаяОплата.НайтиСтроки(Новый Структура("ВидОплаты", ОплатаБонусами));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДвиженияПоРегистрам

Функция СформироватьТекстЗапросаПоБонуснымБаллам() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаНачисленияБонусов.ДатаНачисления КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВременнаяТаблицаНачисленияБонусов.БонуснаяКарта КАК БонуснаяКарта,
	|	СУММА(ВременнаяТаблицаНачисленияБонусов.Количество) КАК Начислено,
	|	NULL КАК КСписанию,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПервоначальногоНачисления
	|ИЗ
	|	ВременнаяТаблицаНачисленияБонусов КАК ВременнаяТаблицаНачисленияБонусов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаНачисленияБонусов.ДатаНачисления,
	|	ВременнаяТаблицаНачисленияБонусов.БонуснаяКарта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаНачисленияБонусов.ДатаСгорания,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ВременнаяТаблицаНачисленияБонусов.БонуснаяКарта,
	|	NULL,
	|	СУММА(ВременнаяТаблицаНачисленияБонусов.Количество),
	|	ВременнаяТаблицаНачисленияБонусов.ДатаНачисления
	|ИЗ
	|	ВременнаяТаблицаНачисленияБонусов КАК ВременнаяТаблицаНачисленияБонусов
	|ГДЕ
	|	НЕ ВременнаяТаблицаНачисленияБонусов.ДатаСгорания = ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаНачисленияБонусов.ДатаНачисления,
	|	ВременнаяТаблицаНачисленияБонусов.БонуснаяКарта,
	|	ВременнаяТаблицаНачисленияБонусов.ДатаСгорания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаСписанияБонусов.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВременнаяТаблицаСписанияБонусов.БонуснаяКарта КАК БонуснаяКарта,
	|	ВременнаяТаблицаСписанияБонусов.Количество КАК Начислено,
	|	ВременнаяТаблицаСписанияБонусов.КСписанию КАК КСписанию,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПервоначальногоНачисления
	|ИЗ
	|	ВременнаяТаблицаСписанияБонусов КАК ВременнаяТаблицаСписанияБонусов";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОбъединитьТаблицыБонусов(ТаблицаБонусныеБаллы, ТаблицаОплатаБонусами, Ссылка) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаОплатаБонусами.БонуснаяКарта КАК БонуснаяКарта,
	|	ТаблицаОплатаБонусами.Период КАК Период
	|ПОМЕСТИТЬ ТаблицаСписания
	|ИЗ
	|	&ТаблицаОплатаБонусами КАК ТаблицаОплатаБонусами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллы.Период КАК Период,
	|	БонусныеБаллы.БонуснаяКарта КАК БонуснаяКарта,
	|	СУММА(ВЫБОР
	|			КОГДА БонусныеБаллы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -БонусныеБаллы.КСписанию
	|			ИНАЧЕ БонусныеБаллы.КСписанию
	|		КОНЕЦ) КАК КСписанию,
	|	БонусныеБаллы.ДатаПервоначальногоНачисления КАК ДатаПервоначальногоНачисления
	|ИЗ
	|	ТаблицаСписания КАК ТаблицаСписания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|		ПО ТаблицаСписания.Период >= БонусныеБаллы.ДатаПервоначальногоНачисления
	|			И (НЕ БонусныеБаллы.ДатаПервоначальногоНачисления = ДАТАВРЕМЯ(1, 1, 1))
	|			И ТаблицаСписания.Период < БонусныеБаллы.Период
	|			И (БонусныеБаллы.КСписанию <> 0)
	|			И (БонусныеБаллы.Регистратор <> &Ссылка)
	|			И ТаблицаСписания.БонуснаяКарта = БонусныеБаллы.БонуснаяКарта
	|
	|СГРУППИРОВАТЬ ПО
	|	БонусныеБаллы.Период,
	|	БонусныеБаллы.ДатаПервоначальногоНачисления,
	|	БонусныеБаллы.БонуснаяКарта
	|
	|ИМЕЮЩИЕ
	|	СУММА(БонусныеБаллы.КСписанию) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	
	Запрос.УстановитьПараметр("ТаблицаОплатаБонусами", ТаблицаОплатаБонусами);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТаблицаКСписанию = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаОплаты Из ТаблицаОплатаБонусами Цикл
		
		НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
		
		СуммаОплаты = СтрокаОплаты.Начислено;
		
		СтруктураПоиска = Новый Структура("БонуснаяКарта", СтрокаОплаты.БонуснаяКарта);
			
		МассивСтрокКСписанию = ТаблицаКСписанию.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаКСписанию Из МассивСтрокКСписанию Цикл
			
			Если СтрокаКСписанию.КСписанию <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СуммаОплаты > СтрокаКСписанию.КСписанию Тогда
				СуммаКСписанию = СтрокаКСписанию.КСписанию;
				СтрокаКСписанию.КСписанию = 0;
				СуммаОплаты = СуммаОплаты - СуммаКСписанию;
			Иначе
				СуммаКСписанию = СуммаОплаты;
				СтрокаКСписанию.КСписанию = СтрокаКСписанию.КСписанию - СуммаКСписанию;
				СуммаОплаты = 0;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
			НоваяСтрока.Период = СтрокаКСписанию.Период;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.БонуснаяКарта = СтрокаКСписанию.БонуснаяКарта;
			НоваяСтрока.Начислено = 0;
			НоваяСтрока.КСписанию = СуммаКСписанию;
			НоваяСтрока.ДатаПервоначальногоНачисления = СтрокаКСписанию.ДатаПервоначальногоНачисления;
			
			Если СуммаОплаты <= 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыделитьВозвратыИзТаблицыБонусов(ТаблицаБонусныеБаллы, ТаблицаОплатыБонусами) Экспорт
	
	СписокКУдалению = Новый СписокЗначений;
	
	Для Каждого СтрокаБонусов Из ТаблицаОплатыБонусами Цикл
		Если СтрокаБонусов.Начислено < 0 Тогда
			
			СписокКУдалению.Добавить(СтрокаБонусов);
			НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБонусов);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяСтрока.Начислено = -СтрокаБонусов.Начислено;
			
			НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБонусов);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяСтрока.Начислено = 0;
			НоваяСтрока.КСписанию = -СтрокаБонусов.Начислено;
			НоваяСтрока.ДатаПервоначальногоНачисления = СтрокаБонусов.Период;
			РеквизитыПрограммы = РеквизитыБонуснойПрограммы(СтрокаБонусов.БонуснаяКарта);
			НоваяСтрока.Период = ПрибавитьКДатеПериод(СтрокаБонусов.Период,
				РеквизитыПрограммы.КоличествоПериодовСписания,
				РеквизитыПрограммы.ПериодичностьСписания);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СписокКУдалению Цикл
		
		ТаблицаОплатыБонусами.Удалить(СтрокаКУдалению.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьТекстЗапросаПоНачислениямБонусныхБаллов(ЭтоВозврат = Ложь) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаНачисленияБонусов.ДатаНачисления КАК Период,
	|	ВременнаяТаблицаНачисленияБонусов.БонуснаяКарта КАК БонуснаяКарта,
	|	ВременнаяТаблицаНачисленияБонусов.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаНачисленияБонусов.Характеристика КАК Характеристика,
	|	БонусныеПрограммы.Ссылка КАК БонуснаяПрограмма,
	|	ДисконтныеКарты.ВладелецКарты КАК ВладелецКарты,
	|	ВременнаяТаблицаНачисленияБонусов.АналитикаНачисленияБонусов КАК АналитикаНачисленияБонусов,
	|	СУММА(ВременнаяТаблицаНачисленияБонусов.Количество) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаНачисленияБонусов КАК ВременнаяТаблицаНачисленияБонусов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммы КАК БонусныеПрограммы
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДисконтныхКарт КАК ВидыДисконтныхКарт
	|				ПО (ВидыДисконтныхКарт.БонуснаяПрограмма = БонусныеПрограммы.Ссылка)
	|			ПО (ДисконтныеКарты.Владелец = ВидыДисконтныхКарт.Ссылка)
	|		ПО ВременнаяТаблицаНачисленияБонусов.БонуснаяКарта = ДисконтныеКарты.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаНачисленияБонусов.ДатаНачисления,
	|	ВременнаяТаблицаНачисленияБонусов.БонуснаяКарта,
	|	ВременнаяТаблицаНачисленияБонусов.Номенклатура,
	|	ВременнаяТаблицаНачисленияБонусов.Характеристика,
	|	БонусныеПрограммы.Ссылка,
	|	ДисконтныеКарты.ВладелецКарты,
	|	ВременнаяТаблицаНачисленияБонусов.АналитикаНачисленияБонусов";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область АссистентУправления

Процедура ПриОпределенииТиповПредметовСобытий(Предметы) Экспорт
	
	Предметы.Вставить("БонусныеПрограммы", НСтр("ru='Бонусные программы'"));
	
КонецПроцедуры

Процедура ПриОпределенииСобытий(События, Предмет) Экспорт
	
	НовоеСобытие = События.Добавить();
	НовоеСобытие.Идентификатор = "СписаниеБонусовПриПродаже";
	НовоеСобытие.Представление = НСтр("ru='Списание бонусов при продаже'");
	
	НовоеСобытие = События.Добавить();
	НовоеСобытие.Идентификатор = "НачислениеБонусовПриПродаже";
	НовоеСобытие.Представление = НСтр("ru='Начисление бонусов при продаже'");
	
	НовоеСобытие = События.Добавить();
	НовоеСобытие.Идентификатор = "СписаниеНачислениеБонусовПриПродаже";
	НовоеСобытие.Представление = НСтр("ru='Списание и начисление бонусов при продаже'");
	
	НовоеСобытие = События.Добавить();
	НовоеСобытие.Идентификатор = "СписаниеБонусовПриСгорании";
	НовоеСобытие.Представление = НСтр("ru='Сгорание неиспользованных бонусов'");
	
	НовоеСобытие = События.Добавить();
	НовоеСобытие.Идентификатор = "НачислениеБонусовНаДеньРождения";
	НовоеСобытие.Представление = НСтр("ru='Начисление бонусов на день рождения'");
	
КонецПроцедуры

Процедура ПриОпределенииДействий(Действия) Экспорт
	
КонецПроцедуры

Процедура ПриОпределенииПолучателейСообщения(Получатели) Экспорт
	
	Получатель = Получатели.Добавить();
	Получатель.Путь          = "ВладелецКарты";
	Получатель.Представление = НСтр("ru='Покупатель'");
	Получатель.Тип           = Тип("СправочникСсылка.Контрагенты");
	
	Получатель = Получатели.Добавить();
	Получатель.Путь          = "ВладелецКарты.КонтактноеЛицо";
	Получатель.Представление = НСтр("ru='Основной контакт покупателя'");
	Получатель.Тип = Тип("СправочникСсылка.КонтактныеЛица");
	
КонецПроцедуры

Функция ВыполненыУсловия(Предмет, Условия) Экспорт
	
КонецФункции

Процедура ВыполнитьДействие(Предмет, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
КонецПроцедуры

Процедура ПередОбработкойСобытия(Предмет, Событие, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
	
	
КонецПроцедуры

Процедура ПослеОбработкиСобытия(Предмет, Событие, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
	Если Действие = "СоздатьОтправитьЭлектронноеПисьмо" ИЛИ Действие = "СоздатьОтправитьSMS" Тогда
		
		Если НЕ (Результат.Успешно И Результат.Свойство("Документ")) Тогда
			Возврат;
		КонецЕсли;
		
		ТекстПричины = "";
		Если Событие = "СписаниеБонусовПриПродаже"
			ИЛИ Событие = "СписаниеНачислениеБонусовПриПродаже"
			ИЛИ Событие = "СписаниеБонусовПриСгорании" Тогда
			ТекстПричины = НСтр("ru='списании'");
		ИначеЕсли Событие = "НачислениеБонусовПриПродаже"
			ИЛИ Событие = "НачислениеБонусовНаДеньРождения" Тогда
			ТекстПричины = НСтр("ru='начислении'");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекстПричины) Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеСообщения = ОбсужденияУНФ.НовыйДанныеСообщения();
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДисконтныеКарты") Тогда
			ДанныеСообщения.Объект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "ВладелецКарты");
		КонецЕсли;
		ДанныеСообщения.Текст = СтрШаблон(НСтр("ru='Отправила %1 о %2 бонусов'"), ПолучитьНавигационнуюСсылку(Результат.Документ), ТекстПричины);
		
		Результат.ДанныеСообщений.Добавить(ДанныеСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
