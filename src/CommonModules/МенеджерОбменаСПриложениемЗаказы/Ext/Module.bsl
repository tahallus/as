// Конвертация УНФ 1.7.Orders от 06.10.2021 21:34:13
#Область ПрограммныйИнтерфейс

// Процедура, выполняемая перед началом конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт

	Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда  
	
		ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Настройки_Отправка", "Имя");
		Если ПравилоОбработки <> Неопределено Тогда
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, Новый Структура, ПравилоОбработки);    
		КонецЕсли;
	
	
		ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("РегистрСведений_ОстаткиТоваров_Отправка", "Имя"); 
		Если ПравилоОбработки <> Неопределено Тогда   
		
			НаборЗаписей = РегистрыСведений.ОстаткиТоваров.СоздатьНаборЗаписей();	 
			НаборЗаписей.Прочитать();
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, НаборЗаписей, ПравилоОбработки);  
			
		КонецЕсли;  
		
	Иначе
		РеквизитыУзлаЗаполнениеПараметровКонвертации(КомпонентыОбмена, КомпонентыОбмена.УзелКорреспондента);
	КонецЕсли;
КонецПроцедуры


// Процедура, выполняемая после выполнения конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт

	Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
			
			ВыгруженныеКонтрагенты = КомпонентыОбмена.ПараметрыКонвертации.ВыгруженныеКонтрагенты;
			Если ТипЗнч(ВыгруженныеКонтрагенты) = Тип("Массив") Тогда
					 
					ТекстЗапроса = "ВЫБРАТЬ
						|ДоговорыКонтрагентов.Ссылка КАК Ссылка,
						|ВЫБОР
						|	КОГДА ДоговорыКонтрагентов.ВидЦен = &ПустойВидЦен
						|		ТОГДА ЛОЖЬ
						|	ИНАЧЕ ВЫБОР
						|			КОГДА ДоговорыКонтрагентов.ВидЦен = &ВидЦенОптовая
						|				ТОГДА ЛОЖЬ
						|			ИНАЧЕ ИСТИНА
						|		КОНЕЦ
						|КОНЕЦ КАК ЕстьУточнениеЦен,
						|ДоговорыКонтрагентов.ВидЦен КАК ВидЦен
						|ПОМЕСТИТЬ ВТДоговоры
						|ИЗ
						|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
						|ГДЕ
						|	ДоговорыКонтрагентов.Владелец в (&МассивВладелец)
						|;
	                    |
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ВТДоговоры.Ссылка КАК ДоговорКлиента,
						|	ВТДоговоры.ЕстьУточнениеЦен КАК ЕстьУточнениеЦен,
						|	ВТДоговоры.ВидЦен КАК ВидЦен,
						|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
						|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
						|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
						|ИЗ
						|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
						|		ПРАВОЕ СОЕДИНЕНИЕ ВТДоговоры КАК ВТДоговоры
						|		ПО (ВТДоговоры.ВидЦен = ЦеныНоменклатурыСрезПоследних.ВидЦен)
						|			И (ВТДоговоры.ЕстьУточнениеЦен)
						|ИТОГИ ПО
						|	ДоговорКлиента";
	
					Запрос = Новый Запрос;    
					Запрос.Текст = ТекстЗапроса;
					Запрос.УстановитьПараметр("МассивВладелец", ВыгруженныеКонтрагенты);
					Запрос.УстановитьПараметр("ПустойВидЦен", Справочники.ВидыЦен.ПустаяСсылка());
					Запрос.УстановитьПараметр("ВидЦенОптовая", Справочники.ВидыЦен.Оптовая);
					Результат = Запрос.Выполнить();  	 
								
					Если НЕ Результат.Пустой() Тогда 
					    ТаблицаЦен = Новый ТаблицаЗначений;
						ТаблицаЦен.Колонки.Добавить("Номенклатура");
						ТаблицаЦен.Колонки.Добавить("Характеристика");
						ТаблицаЦен.Колонки.Добавить("Цена");
						ТаблицаЦен.Колонки.Добавить("НоменклатураСтруктура", ТипКолонкиСтруктура());   
						ТаблицаЦен.Колонки.Добавить("РодительНоменклатуры");
						ТаблицаЦен.Колонки.Добавить("ВидНоменклатуры");
						ТаблицаЦен.Колонки.Добавить("ЦеноваяГруппа");
						ТаблицаЦен.Колонки.Добавить("СтрокаПоиска");   
						ТаблицаЦен.Колонки.Добавить("ДоговорКлиента");   
	
						ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ДоговорыКонтрагентов_Отправка", "Имя"); 
						Если ПравилоОбработки <> Неопределено Тогда  
							ВыборкаДоговоров = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
							Пока ВыборкаДоговоров.Следующий() Цикл
								ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ВыборкаДоговоров.ДоговорКлиента, ПравилоОбработки);  
								ВыборкаЦен = ВыборкаДоговоров.Выбрать(); 
								Пока ВыборкаЦен.Следующий() Цикл     
									Если ЗначениеЗаполнено(ВыборкаЦен.Номенклатура) Тогда
										СтрокаЦен = ТаблицаЦен.Добавить();   
										ЗаполнитьЗначенияСвойств(СтрокаЦен, ВыборкаЦен);
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;  
							
							ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка", "Имя"); 
							Если ПравилоОбработки <> Неопределено Тогда
								СтруктураНабора = Новый Структура("Записи", ТаблицаЦен);
								ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураНабора, ПравилоОбработки);  
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					 
			КонецЕсли;
			
			
			ВыгруженнаяНоменклатура = КомпонентыОбмена.ПараметрыКонвертации.ВыгруженнаяНоменклатура;
			Если ТипЗнч(ВыгруженнаяНоменклатура) = Тип("Массив") Тогда   
				ТекстЗапроса = "ВЫБРАТЬ
								|	НоменклатураПрисоединенныеФайлы.Ссылка КАК Ссылка
								|ИЗ
								|Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
								|ГДЕ
								|НоменклатураПрисоединенныеФайлы.ВладелецФайла В (&МассивВладелецФайла)";		
				Запрос = Новый Запрос;    
				Запрос.Текст = ТекстЗапроса;
				Запрос.УстановитьПараметр("МассивВладелецФайла", ВыгруженнаяНоменклатура);
				Результат = Запрос.Выполнить();  	 
							
				Если НЕ Результат.Пустой() Тогда   
					ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_НоменклатураПрисоединенныеФайлы_Отправка", "Имя"); 
					Если ПравилоОбработки <> Неопределено Тогда
						ВыборкаФайлов = Результат.Выбрать(); 
						Пока ВыборкаФайлов.Следующий() Цикл
							ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ВыборкаФайлов.Ссылка, ПравилоОбработки);  
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


// Процедура, выполняемая перед началом отложенного заполнения объектов.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт

	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Строка - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаОбработкиДанных - ТаблицаЗначений - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт

	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_ЗаказПокупателя_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Настройки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_РегистрСведений_ОстаткиТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_РегистрСведений_ЦеныНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Клиенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураПрисоединенныеФайлы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтруктурныеЕдиницы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_DocumentObject_ЗаказКлиента_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_DocumentObject_ОплатаКлиента_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт


	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_ЗаданиеТорговомуПредставителю_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПокупателяСостояние_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Настройки_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РегистрСведений_ОстаткиТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РегистрСведений_ЦеныНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыКонтактнойИнформации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыЦен_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЕдиницыИзмеренияКлассификатор_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КатегорииНоменклатурыВиды_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтактныеЛица_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтрагентыКлиенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураИзСтруктуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураПрисоедФайлы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтруктурныеЕдиницыСклады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Характеристики_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЦеновыеГруппы_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ЗаказПокупателя_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОперацияПоПлатежнымКартам_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеВКассу_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыЦен_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтруктурныеЕдиницы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_КатегорииНоменклатурыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КлиентыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтруктурныеЕдиницыСклады_Группа(ПравилаКонвертации);
КонецПроцедуры
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// Перечисление_ВидыКонтрагентов_ЮрФизЛицо.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыКонтрагентов_ЮрФизЛицо";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыКонтрагентов;
		ПравилоКонвертации.ТипXDTO   = "EnumRef.ЮрФизЛицо";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ГосударственныйОрган, "ЮрЛицоНеРезидент");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель, "ИндивидуальныйПредприниматель");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ФизическоеЛицо, "ФизЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ЮридическоеЛицо, "ЮрЛицо");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_СистемыНалогообложения_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_СистемыНалогообложения_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СистемыНалогообложения;
		ПравилоКонвертации.ТипXDTO   = "EnumRef.СистемыНалогообложения";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.СистемыНалогообложения.Общая, "Общая");
		ЗначенияДляОтправки.Вставить(Перечисления.СистемыНалогообложения.ОсобыйПорядок, "Общая");
		ЗначенияДляОтправки.Вставить(Перечисления.СистемыНалогообложения.Упрощенная, "Упрощенная");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ТипыКонтактнойИнформации_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыКонтактнойИнформации_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO   = "EnumRef.ТипыКонтактнойИнформации";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Skype, "Skype");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес, "Адрес");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, "ВебСтраница");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Другое, "Другое");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, "Телефон");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Факс, "Факс");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ЮридическоеФизическоеЛицо_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ЮридическоеФизическоеЛицо_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
		ПравилоКонвертации.ТипXDTO   = "EnumRef.ЮрФизЛицо";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮрЛицо");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Предопределен_ВидыКонтактнойИнформации_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Предопределен_ВидыКонтактнойИнформации_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO   = "EnumRef.ВидыКонтактнойИнформации";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица, "EmailКонтактногоЛица");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, "EmailКлиента");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, "EmailОрганизации");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента, "ДоставкиАдресКлиента");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, "ПочтовыйАдресОрганизации");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица, "ТелефонКонтактногоЛица");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "ТелефонКлиента");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "ТелефонОрганизации");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, "ФаксОрганизации");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "АдресКлиента");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, "ФактАдресОрганизации");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "ЮрАдресОрганизации");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
КонецПроцедуры

// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - Структура - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("РегистрироватьОплатыПКО");
	ПараметрыКонвертации.Вставить("РегистрироватьОплатыПоДоверенностям");
	ПараметрыКонвертации.Вставить("ЭквайринговыйТерминал");
	ПараметрыКонвертации.Вставить("ПередаватьИзображенияТоваров");
	ПараметрыКонвертации.Вставить("ОстатокКоличество");
	ПараметрыКонвертации.Вставить("ИспользоватьВесовыеХарактеристики");
	ПараметрыКонвертации.Вставить("СостояниеЗаданиеТорговомуПредставителю");
	ПараметрыКонвертации.Вставить("ВыгруженныеКонтрагенты");
	ПараметрыКонвертации.Вставить("Пользователь");
	ПараметрыКонвертации.Вставить("ВыгруженнаяНоменклатура");
	ПараметрыКонвертации.Вставить("Касса");
	ПараметрыКонвертации.Вставить("СтатьяДДСНаличные");
	ПараметрыКонвертации.Вставить("СтатьяДДСЭквайринг");
КонецПроцедуры

// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - Строка - имя процедуры этого модуля.
//  Параметры - Структура - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Клиенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Клиенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаданиеТорговомуПредставителю_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаданиеТорговомуПредставителю_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПокупателя_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаказПокупателя_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПокупателяСостояние_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказПокупателяСостояние_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОперацияПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОперацияПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеВКассу_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеВКассу_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеВКассу_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеВКассу_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Настройки_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Настройки_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РегистрСведений_ОстаткиТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РегистрСведений_ОстаткиТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РегистрСведений_ЦеныНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РегистрСведений_ЦеныНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыКонтактнойИнформации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыКонтактнойИнформации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КатегорииНоменклатурыВиды_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КатегорииНоменклатурыВиды_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтактныеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КонтактныеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтрагентыКлиенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КонтрагентыКлиенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураГруппа_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_НоменклатураГруппа_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураИзСтруктуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_НоменклатураИзСтруктуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураПрисоедФайлы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_НоменклатураПрисоедФайлы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтруктурныеЕдиницыСклады_Группа_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтруктурныеЕдиницыСклады_Группа_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтруктурныеЕдиницыСклады_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтруктурныеЕдиницыСклады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Характеристики_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Характеристики_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти
#Область СлужебныеПроцедурыИФункции
Процедура ДобавитьПОД_DocumentObject_ЗаказКлиента_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "DocumentObject_ЗаказКлиента_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "DocumentObject.ЗаказКлиента";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПокупателя_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_DocumentObject_ОплатаКлиента_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "DocumentObject_ОплатаКлиента_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "DocumentObject.ОплатаКлиента";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияПоПлатежнымКартам_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеВКассу_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЗаказПокупателя_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПокупателя_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказПокупателя;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаданиеТорговомуПредставителю_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПокупателяСостояние_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Настройки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Настройки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Настройки_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_РегистрСведений_ОстаткиТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РегистрСведений_ОстаткиТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РегистрСведений_ОстаткиТоваров_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_РегистрСведений_ЦеныНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РегистрСведений_ЦеныНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ЦеныНоменклатуры;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РегистрСведений_ЦеныНоменклатуры_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Клиенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Клиенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Клиенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлиентыГруппа");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыКлиенты_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_НоменклатураПрисоединенныеФайлы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатураПрисоединенныеФайлы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.НоменклатураПрисоединенныеФайлы;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураПрисоедФайлы_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтруктурныеЕдиницы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтруктурныеЕдиницы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтруктурныеЕдиницыСклады_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ХарактеристикиНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Характеристики_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаданиеТорговомуПредставителю_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаданиеТорговомуПредставителю_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "DocumentObject.ЗаданиеТорговомуПредставителю";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаданиеТорговомуПредставителю_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "ДетализацияПоНоменклатуре", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "ЖелаемаяДатаОтгрузки", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "ДатаВизитаПлан", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВремяДоставкиПо",          "ВремяОкончания");
	ДобавитьПКС(СвойстваШапки, "ВремяДоставкиС",           "ВремяНачала");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Date");
	ДобавитьПКС(СвойстваШапки, "Договор",                  "ДоговорКлиента", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Клиент", 1, "Справочник_КонтрагентыКлиенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Number");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",          "DeletionMark");
	ДобавитьПКС(СвойстваШапки, "Проведен",                 "Posted");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаРезерв", "Склад", , "Справочник_СтруктурныеЕдиницыСклады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "",       "Задачи");
	ДобавитьПКС(СвойстваТЧ, "", "Выполнена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ОписаниеЗадачи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ОписаниеРезультата", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы", "Товары");
	ДобавитьПКС(СвойстваТЧ, "Количество",           "Количество");
	ДобавитьПКС(СвойстваТЧ, "Количество",           "КоличествоПлан");
	ДобавитьПКС(СвойстваТЧ, "Количество",           "КоличествоУпаковок");
	ДобавитьПКС(СвойстваТЧ, "Количество",           "КоличествоУпаковокПлан");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",         "Номенклатура", ,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "ПроцентСкидкиНаценки", "ПроцентРучнойСкидки");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                "Сумма");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",             "СуммаНДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаСкидкиНаценки",   "СуммаРучнойСкидки");
	ДобавитьПКС(СвойстваТЧ, "Цена",                 "Цена");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказПокупателя_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаказПокупателя_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата                = "DocumentObject.ЗаказКлиента";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаказПокупателя_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                              "", 1);
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",                      "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                    "ВалютаДокумента", , "Справочник_Валюты_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидЗаказа",                          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидЦен",                             "ВидЦены", , "Справочник_ВидыЦен_Получение");
	ДобавитьПКС(СвойстваШапки, "ВремяДоставкиПо",                    "ВремяДоставкиПо");
	ДобавитьПКС(СвойстваШапки, "ВремяДоставкиС",                     "ВремяДоставкиС");
	ДобавитьПКС(СвойстваШапки, "Дата",                               "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",             "Date");
	ДобавитьПКС(СвойстваШапки, "ДатаИзменения",                      "Date");
	ДобавитьПКС(СвойстваШапки, "ДатаОтгрузки",                       "ДатаОтгрузки");
	ДобавитьПКС(СвойстваШапки, "Договор",                            "Договор", , "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "ДополнительнаяИнформацияПоДоставке", "ДополнительнаяИнформацияПоДоставке");
	ДобавитьПКС(СвойстваШапки, "Касса",                              "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                         "Клиент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Кратность",                          "", 1);
	ДобавитьПКС(СвойстваШапки, "Курс",                               "", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",            "Number");
	ДобавитьПКС(СвойстваШапки, "Организация",                        "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОснованиеПечати",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ОснованиеПечатиСсылка",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Ответственный",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодписьГлавногоБухгалтера",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодписьКассира",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодписьРуководителя",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ПоложениеВидаРабот",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ПоложениеДатыОтгрузки",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ПоложениеСклада",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "СкидкиРассчитаны",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "СостояниеЗаказа",                    "СостояниеЗаказа", 1);
	ДобавитьПКС(СвойстваШапки, "СпециальныйНалоговыйРежим",          "", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаПродажи",          "", 1, "Справочник_СтруктурныеЕдиницы_Получение");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаРезерв",           "Склад", , "Справочник_СтруктурныеЕдиницы_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                     "СуммаДокумента");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы", "Товары");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "Количество");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "Номенклатура", ,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "Сумма");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "СуммаНДС");
	ДобавитьПКС(СвойстваТЧ, "СуммаСкидкиНаценки", "СуммаРучнойСкидки");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "Цена");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказПокупателяСостояние_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказПокупателяСостояние_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "OrderStatus";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказПокупателяСостояние_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "СтатусДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Состояние", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ПечатнаяФормаДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",            "Date", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаОтгрузки",    "ДатаОтгрузки");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Number", 1);
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Проведен",        "Проведен");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "СуммаДокументаУП");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОперацияПоПлатежнымКартам_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОперацияПоПлатежнымКартам_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОперацияПоПлатежнымКартам;
	ПравилоКонвертации.ОбъектФормата                = "DocumentObject.ОплатаКлиента";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОперацияПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОперацияПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",     "Валюта", , "Справочник_Валюты_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидПлатежнойКарты",         "", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",         "ДокументОснование", , "Документ_ЗаказПокупателя_Получение");
	ДобавитьПКС(СвойстваШапки, "Касса",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Клиент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Кратность",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Курс",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",        "", 1);
	ДобавитьПКС(СвойстваШапки, "НомерПлатежнойКарты",       "НомерПлатежнойКарты");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодписьКассира",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ПоложениеСтатьи",           "", 1);
	ДобавитьПКС(СвойстваШапки, "СпециальныйНалоговыйРежим", "", 1);
	ДобавитьПКС(СвойстваШапки, "СпособОплаты",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "СуммаДокумента");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",     "", 1);
	ДобавитьПКС(СвойстваШапки, "ЭквайринговыйТерминал",     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "Договор",       "ДоговорКлиента", ,"Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Заказ",         "ДокументОснование", ,"Документ_ЗаказПокупателя_Получение");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",  "СуммаДокумента");
	ДобавитьПКС(СвойстваТЧ, "СуммаРасчетов", "СуммаДокумента");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПоступлениеВКассу_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПоступлениеВКассу_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата                = "DocumentObject.ОплатаКлиента";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПоступлениеВКассу_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеВКассу_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",        "Валюта", , "Справочник_Валюты_Получение");
	ДобавитьПКС(СвойстваШапки, "ВариантЗаполненияРасшифровки", "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                         "", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",            "ДокументОснование", , "Документ_ЗаказПокупателя_Получение");
	ДобавитьПКС(СвойстваШапки, "Касса",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",                   "Клиент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Кратность",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Курс",                         "", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",           "", 1);
	ДобавитьПКС(СвойстваШапки, "НовыйМеханизмИнкассации",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",                  "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодписьГлавногоБухгалтера",    "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодписьКассира",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодписьРуководителя",          "", 1);
	ДобавитьПКС(СвойстваШапки, "Подразделение",                "", 1, "Справочник_СтруктурныеЕдиницы_Получение");
	ДобавитьПКС(СвойстваШапки, "ПоложениеПодразделения",       "", 1);
	ДобавитьПКС(СвойстваШапки, "ПоложениеПроекта",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ПоложениеСтатьи",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",                   "ПредставлениеДокумента");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "СпециальныйНалоговыйРежим",    "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",               "СуммаДокумента");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "Договор",       "ДоговорКлиента", ,"Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Заказ",         "ДокументОснование", ,"Документ_ЗаказПокупателя_Получение");
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",  "СуммаДокумента");
	ДобавитьПКС(СвойстваТЧ, "СуммаРасчетов", "СуммаДокумента");

КонецПроцедуры

Процедура ДобавитьПКО_Настройки_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Настройки_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Settings";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Настройки_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "UseCashRegister", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseCardPayment", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseAdditionalProps", 1);
	ДобавитьПКС(СвойстваШапки, "", "UnitWeight", 1);
	ДобавитьПКС(СвойстваШапки, "", "ShowOddments", 1);
	ДобавитьПКС(СвойстваШапки, "", "PrefixIB", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseCashPayment", 1);
	ДобавитьПКС(СвойстваШапки, "", "PartnersHowContractors", 1);
	ДобавитьПКС(СвойстваШапки, "", "MessageNumberOut", 1);
	ДобавитьПКС(СвойстваШапки, "", "GoogleCloudProjectNumber", 1);
	ДобавитьПКС(СвойстваШапки, "", "FrequencyExchangeRates", 1);
	ДобавитьПКС(СвойстваШапки, "", "FrequencyExchangeBalance", 1);
	ДобавитьПКС(СвойстваШапки, "", "CheckTINRussianRules", 1);
	ДобавитьПКС(СвойстваШапки, "", "ChangePriceInOrder", 1);
	ДобавитьПКС(СвойстваШапки, "", "CardsTypes", 1);
	ДобавитьПКС(СвойстваШапки, "", "AddChangeCustomerOrders", 1);
	ДобавитьПКС(СвойстваШапки, "", "AddChangeCustomer", 1);
	ДобавитьПКС(СвойстваШапки, "", "UsingJobTargets", 1);
	ДобавитьПКС(СвойстваШапки, "", "UsingCustomerAgreement", 1);
	ДобавитьПКС(СвойстваШапки, "", "MessageNumberIn", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseManualDiscounts", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseWeight", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseStoreInOrderLine", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseSimplifiedClientInput", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseRequestsToReturnOfGoodsByClient", 1);
	ДобавитьПКС(СвойстваШапки, "", "UsePushNotifications", 1);
	ДобавитьПКС(СвойстваШапки, "", "UsePricesInOrderLine", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseOrderStatus", 1);
	ДобавитьПКС(СвойстваШапки, "", "DetailJobTargets", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseImages", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseGoodsBalance", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseCustomerContract", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseCommonAdditionalValues", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseCommonAdditionalProps", 1);
	ДобавитьПКС(СвойстваШапки, "", "UseCommission", 1);

КонецПроцедуры

Процедура ДобавитьПКО_РегистрСведений_ОстаткиТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РегистрСведений_ОстаткиТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ОстаткиТоваров;
	ПравилоКонвертации.ОбъектФормата     = "InformationRegisterRecord.ТоварыНаСкладах";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РегистрСведений_ОстаткиТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Склад", 1, "Справочник_СтруктурныеЕдиницыСклады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВНаличии", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Склад", 1,"Справочник_СтруктурныеЕдиницыСклады_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СостояниеОстаткаИндекс", 1);

КонецПроцедуры

Процедура ДобавитьПКО_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "InformationRegisterRecord.ЦеныНоменклатурыПоДоговорамКлиентов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ДоговорКлиента", 1, "СправочникСсылка_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВидНоменклатуры", 1,"Справочник_КатегорииНоменклатурыВиды_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДоговорКлиента", 1,"Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Остаток", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РодительНоменклатуры", 1,"Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваТЧ, "", "Склад", 1,"Справочник_СтруктурныеЕдиницыСклады_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СостояниеОстаткаИндекс", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтрокаПоиска", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦеноваяГруппа", 1,"Справочник_ЦеновыеГруппы_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_РегистрСведений_ЦеныНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РегистрСведений_ЦеныНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ЦеныНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "InformationRegisterRecord.ЦеныНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РегистрСведений_ЦеныНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидЦены", 1, "Справочник_ВидыЦен_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВидНоменклатуры", 1,"Справочник_КатегорииНоменклатурыВиды_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ВидЦены", 1,"Справочник_ВидыЦен_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РодительНоменклатуры", 1,"Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваТЧ, "", "Склад", 1,"Справочник_СтруктурныеЕдиницыСклады_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтрокаПоиска", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦеноваяГруппа", 1,"Справочник_ЦеновыеГруппы_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Валюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Валюты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.Валюты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",             "Code");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Валюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Валюты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.Валюты";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Code");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыКонтактнойИнформации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыКонтактнойИнформации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ВидыКонтактнойИнформации;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.ВидыКонтактнойИнформации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ВидыКонтактнойИнформации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                                    "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "ВключатьСтрануВПредставление",        "ВключатьСтрануВПредставление");
	ДобавитьПКС(СвойстваШапки, "МожноИзменятьСпособРедактирования",   "МожноИзменятьСпособРедактирования");
	ДобавитьПКС(СвойстваШапки, "Наименование",                        "Description");
	ДобавитьПКС(СвойстваШапки, "ОбязательноеЗаполнение",              "ОбязательноеЗаполнение");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",                     "DeletionMark");
	ДобавитьПКС(СвойстваШапки, "ПроверятьКорректность",               "ПроверятьКорректность");
	ДобавитьПКС(СвойстваШапки, "РазрешитьВводНесколькихЗначений",     "РазрешитьВводНесколькихЗначений");
	ДобавитьПКС(СвойстваШапки, "РеквизитДопУпорядочивания",           "РеквизитДопУпорядочивания");
	ДобавитьПКС(СвойстваШапки, "СкрыватьНеактуальныеАдреса",          "СкрыватьНеактуальныеАдреса");
	ДобавитьПКС(СвойстваШапки, "Тип",                                 "Тип", , "Перечисление_ТипыКонтактнойИнформации_Отправка");
	ДобавитьПКС(СвойстваШапки, "УдалитьРедактированиеТолькоВДиалоге", "РедактированиеТолькоВДиалоге");
	ДобавитьПКС(СвойстваШапки, "ЭтоГруппа",                           "IsFolder");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыЦен_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыЦен_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ВидыЦен;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.ВидыЦен";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаЦены",      "ВалютаЦены", , "Справочник_Валюты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "ЦенаВключаетНДС");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыЦен_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыЦен_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыЦен;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.ВидыЦен";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Ссылка", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.ДоговорыКлиентов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "Действует", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ЕстьУточнениеЦен", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Комиссия", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Склад", 1, "Справочник_СтруктурныеЕдиницыСклады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "СуммаДолгаПоДоговору", 1);
	ДобавитьПКС(СвойстваШапки, "",                "УникальныйКлюч", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ERPКодДоговора", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаРасчетов",  "ВалютаВзаиморасчетов", , "Справочник_Валюты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВидЦен",          "ВидЦены", , "Справочник_ВидыЦен_Отправка");
	ДобавитьПКС(СвойстваШапки, "Владелец",        "Клиент", , "Справочник_КонтрагентыКлиенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Владелец",        "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ДатаДоговора",    "Дата");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "НомерДоговора",   "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.ДоговорыКлиентов";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Ссылка", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЕдиницыИзмеренияКлассификатор_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЕдиницыИзмеренияКлассификатор_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.ЕдиницыИзмерения";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                     "Code");
	ДобавитьПКС(СвойстваШапки, "МеждународноеСокращение", "МеждународноеСокращение");
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Description");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",      "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",         "DeletionMark");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЕдиницыИзмеренияУпаковки_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.УпаковкиНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                                 "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "",                                 "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "Владелец",                         "Владелец", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмеренияПоКлассификатору", "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмеренияКлассификатор_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмеренияПоКлассификатору", "ВесЕдиницаИзмерения", , "Справочник_ЕдиницыИзмеренияКлассификатор_Отправка");
	ДобавитьПКС(СвойстваШапки, "Коэффициент",                      "Коэффициент");
	ДобавитьПКС(СвойстваШапки, "Наименование",                     "Description");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КатегорииНоменклатурыВиды_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КатегорииНоменклатурыВиды_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.ВидыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КатегорииНоменклатурыВиды_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");
	ДобавитьПКС(СвойстваШапки, "Родитель",        "Parent", , "Справочник_КатегорииНоменклатурыГруппа");
	ДобавитьПКС(СвойстваШапки, "ЭтоГруппа",       "IsFolder");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КатегорииНоменклатурыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КатегорииНоменклатурыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.ВидыНоменклатурыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Description");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Parent", , "Справочник_КатегорииНоменклатурыГруппа");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КлиентыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КлиентыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.КлиентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Code", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Description", 1);
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Parent", 1, "Справочник_КлиентыГруппа");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КонтактныеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КонтактныеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.КонтактныеЛица;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.КонтактныеЛицаКлиентов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КонтактныеЛица_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",    "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "АдресЭП",               "АдресЭП");
	ДобавитьПКС(СвойстваТЧ, "Вид",                   "Вид", 1,"Предопределен_ВидыКонтактнойИнформации_Отправка");
	ДобавитьПКС(СвойстваТЧ, "Город",                 "Город");
	ДобавитьПКС(СвойстваТЧ, "ДоменноеИмяСервера",    "ДоменноеИмяСервера");
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей",         "ЗначенияПолей");
	ДобавитьПКС(СвойстваТЧ, "НомерТелефона",         "НомерТелефона");
	ДобавитьПКС(СвойстваТЧ, "НомерТелефонаБезКодов", "НомерТелефонаБезКодов");
	ДобавитьПКС(СвойстваТЧ, "Представление",         "Представление");
	ДобавитьПКС(СвойстваТЧ, "Регион",                "Регион");
	ДобавитьПКС(СвойстваТЧ, "Страна",                "Страна");
	ДобавитьПКС(СвойстваТЧ, "Тип",                   "Тип", ,"Перечисление_ТипыКонтактнойИнформации_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                   "Клиент", 1, "Справочник_КонтрагентыКлиенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "ПредставлениеКонтрагента", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "ИННКПП", 1);
	ДобавитьПКС(СвойстваШапки, "ВидКонтрагента",     "ЮрФизЛицо", 1, "Перечисление_ВидыКонтрагентов_ЮрФизЛицо");
	ДобавитьПКС(СвойстваШапки, "ИНН",                "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",                "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Description");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",    "DeletionMark");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.Клиенты";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Ссылка", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КонтрагентыКлиенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КонтрагентыКлиенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.Клиенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КонтрагентыКлиенты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ВидЦены", 1, "Справочник_ВидыЦен_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "ВремяДоставкиПо", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ВремяДоставкиС", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ДополнительнаяИнформация", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ДополнительнаяИнформацияПоДоставке", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ДополнительныеРеквизиты", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ОтгрузкаЗапрещена", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ПричинаДобавленияВСтопЛист", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Самовывоз", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Склад", 1, "Справочник_СтруктурныеЕдиницыСклады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Код",             "Code");
	ДобавитьПКС(СвойстваШапки, "КонтактноеЛицо",  "КонтактноеЛицо", , "Справочник_КонтактныеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "СтрокаПоиска");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");
	ДобавитьПКС(СвойстваШапки, "Родитель",        "Parent", , "Справочник_КлиентыГруппа");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "АдресЭП",               "АдресЭП");
	ДобавитьПКС(СвойстваТЧ, "Вид",                   "Вид", 1,"Предопределен_ВидыКонтактнойИнформации_Отправка");
	ДобавитьПКС(СвойстваТЧ, "Город",                 "Город");
	ДобавитьПКС(СвойстваТЧ, "ДоменноеИмяСервера",    "ДоменноеИмяСервера");
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей",         "ЗначенияПолей");
	ДобавитьПКС(СвойстваТЧ, "НомерТелефона",         "НомерТелефона");
	ДобавитьПКС(СвойстваТЧ, "НомерТелефонаБезКодов", "НомерТелефонаБезКодов");
	ДобавитьПКС(СвойстваТЧ, "Представление",         "Представление");
	ДобавитьПКС(СвойстваТЧ, "Регион",                "Регион");
	ДобавитьПКС(СвойстваТЧ, "Страна",                "Страна");
	ДобавитьПКС(СвойстваТЧ, "Тип",                   "Тип", ,"Перечисление_ТипыКонтактнойИнформации_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Артикул", 1);
	ДобавитьПКС(СвойстваШапки, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмеренияКлассификатор_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "", "Parent", 1, "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "", "ФайлКартинки", 1, "Справочник_НоменклатураПрисоедФайлы_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ЦеноваяГруппа", 1, "Справочник_ЦеновыеГруппы_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Code", 1);
	ДобавитьПКС(СвойстваШапки, "", "DeletionMark", 1);
	ДобавитьПКС(СвойстваШапки, "", "ERPКодХарактеристика", 1);
	ДобавитьПКС(СвойстваШапки, "", "IsFolder", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмеренияУпаковки_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ВесЗнаменатель", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесИспользовать", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесМожноУказыватьВДокументах", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесЧислитель", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВидНоменклатуры", 1, "Справочник_КатегорииНоменклатурыВиды_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ЕдиницаЗаказа", 1, "Справочник_ЕдиницыИзмеренияУпаковки_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Описание", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтавкаНДСЧислом", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтрокаПоиска", 1);
	ДобавитьПКС(СвойстваШапки, "", "Услуга", 1);
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);
	ДобавитьПКС(СвойстваШапки, "", "ERPКодНоменклатура", 1);
	ДобавитьПКС(СвойстваШапки, "", "Description", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.Номенклатура";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ERPКодНоменклатура", 1);
	ДобавитьПКС(СвойстваШапки, "", "ERPКодХарактеристика", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_НоменклатураГруппа_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",             "ERPКодНоменклатура", 1);
	ДобавитьПКС(СвойстваШапки, "Код",          "Code");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Description");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Parent", , "Справочник_НоменклатураГруппа");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатураИзСтруктуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_НоменклатураИзСтруктуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_НоменклатураИзСтруктуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "DeletionMark", 1);
	ДобавитьПКС(СвойстваШапки, "", "IsFolder", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмеренияУпаковки_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ВесЗнаменатель", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесИспользовать", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесМожноУказыватьВДокументах", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесЧислитель", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВидНоменклатуры", 1, "Справочник_КатегорииНоменклатурыВиды_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ДополнительныеРеквизиты", 1);
	ДобавитьПКС(СвойстваШапки, "", "ЕдиницаЗаказа", 1, "Справочник_ЕдиницыИзмеренияУпаковки_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмеренияКлассификатор_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Описание", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтавкаНДСЧислом", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтрокаПоиска", 1);
	ДобавитьПКС(СвойстваШапки, "", "Услуга", 1);
	ДобавитьПКС(СвойстваШапки, "", "ФайлКартинки", 1, "Справочник_НоменклатураПрисоедФайлы_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ЦеноваяГруппа", 1, "Справочник_ЦеновыеГруппы_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);
	ДобавитьПКС(СвойстваШапки, "", "Code", 1);
	ДобавитьПКС(СвойстваШапки, "", "Description", 1);
	ДобавитьПКС(СвойстваШапки, "", "ERPКодНоменклатура", 1);
	ДобавитьПКС(СвойстваШапки, "", "ERPКодХарактеристика", 1);
	ДобавитьПКС(СвойстваШапки, "", "Parent", 1, "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "", "Артикул", 1);
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатураПрисоедФайлы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_НоменклатураПрисоедФайлы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.НоменклатураПрисоединенныеФайлы;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.НоменклатураПрисоединенныеФайлы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_НоменклатураПрисоедФайлы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "ХранимыйФайл", 1);
	ДобавитьПКС(СвойстваШапки, "ВладелецФайла",   "ВладелецФайла", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "ДатаСоздания",    "ДатаСоздания");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "Описание",        "Описание");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");
	ДобавитьПКС(СвойстваШапки, "Размер",          "Размер");
	ДобавитьПКС(СвойстваШапки, "Расширение",      "Расширение");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.Организации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                          "Банк", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "БИК", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ГлавныйБухгалтер", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ГородБанка", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ДополнительныеРеквизиты", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "КонтактнаяИнформация", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "КоррСчет", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "НомерСчета", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Руководитель", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "СистемаНалогообложения", 1, "Перечисление_СистемыНалогообложения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "ИНН",                       "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",                       "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Description");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",           "DeletionMark");
	ДобавитьПКС(СвойстваШапки, "Префикс",                   "Префикс");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоДатаВыдачи",   "СвидетельствоДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоСерияНомер",   "СвидетельствоСерияНомер");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо", "ЮрФизЛицо", , "Перечисление_ЮридическоеФизическоеЛицо_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Ссылка", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтруктурныеЕдиницы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтруктурныеЕдиницы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.Склады";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Ссылка", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтруктурныеЕдиницыСклады_Группа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтруктурныеЕдиницыСклады_Группа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.Склады";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_СтруктурныеЕдиницыСклады_Группа_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Description");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Parent");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтруктурныеЕдиницыСклады_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтруктурныеЕдиницыСклады_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.Склады";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтруктурныеЕдиницыСклады_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "КонтактнаяИнформация", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ERPКод", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");
	ДобавитьПКС(СвойстваШапки, "Родитель",        "Parent");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Характеристики_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Характеристики_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Характеристики_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "DeletionMark", 1);
	ДобавитьПКС(СвойстваШапки, "", "IsFolder", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмеренияУпаковки_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ВесЗнаменатель", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесИспользовать", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесМожноУказыватьВДокументах", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВесЧислитель", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВидНоменклатуры", 1, "Справочник_КатегорииНоменклатурыВиды_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ЕдиницаЗаказа", 1, "Справочник_ЕдиницыИзмеренияУпаковки_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмеренияКлассификатор_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Описание", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтавкаНДСЧислом", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтрокаПоиска", 1);
	ДобавитьПКС(СвойстваШапки, "", "Услуга", 1);
	ДобавитьПКС(СвойстваШапки, "", "ФайлКартинки", 1, "Справочник_НоменклатураПрисоедФайлы_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ЦеноваяГруппа", 1, "Справочник_ЦеновыеГруппы_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Code", 1);
	ДобавитьПКС(СвойстваШапки, "", "Description", 1);
	ДобавитьПКС(СвойстваШапки, "", "ERPКодНоменклатура", 1);
	ДобавитьПКС(СвойстваШапки, "", "ERPКодХарактеристика", 1);
	ДобавитьПКС(СвойстваШапки, "", "Parent", 1, "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "", "Артикул", 1);
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ХарактеристикиНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "CatalogObject.Номенклатура";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ХарактеристикиНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ERPКодХарактеристика", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЦеновыеГруппы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЦеновыеГруппы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЦеновыеГруппы;
	ПравилоКонвертации.ОбъектФормата     = "CatalogObject.ЦеновыеГруппы";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Description");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "DeletionMark");

КонецПроцедуры



Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область ОбработчикиКонвертации
Процедура ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	СостояниеЗаданиеТорговомуПредставителю = ?(КомпонентыОбмена.ПараметрыКонвертации.СостояниеЗаданиеТорговомуПредставителю = Неопределено, Ложь, КомпонентыОбмена.ПараметрыКонвертации.СостояниеЗаданиеТорговомуПредставителю);
	Если ДанныеИБ.СостояниеЗаказа = СостояниеЗаданиеТорговомуПредставителю Тогда 
		ИспользованиеПКО.Документ_ЗаказПокупателяСостояние_Отправка = Ложь;   
		ИспользованиеПКО.Документ_ЗаданиеТорговомуПредставителю_Отправка = Истина;   
	Иначе
		ИспользованиеПКО.Документ_ЗаказПокупателяСостояние_Отправка = Истина;   
		ИспользованиеПКО.Документ_ЗаданиеТорговомуПредставителю_Отправка = Ложь;   
	КонецЕсли;  
	
	ПользовательУзла = КомпонентыОбмена.ПараметрыКонвертации.Пользователь;
	//Если ДанныеИБ.Ответственный <> ПользовательУзла Тогда
	//	ИспользованиеПКО.Документ_ЗаказПокупателяСостояние_Отправка = Ложь;   
	//	ИспользованиеПКО.Документ_ЗаданиеТорговомуПредставителю_Отправка = Ложь;   
	//КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Клиенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_КонтрагентыКлиенты_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_Контрагенты_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_КлиентыГруппа    = ДанныеИБ.ЭтоГруппа;
	
	Если Не ДанныеИБ.ЭтоГруппа
		И ЗначениеЗаполнено(ДанныеИБ.Родитель)
		И Не ОбъектСуществуетВБазе(ДанныеИБ.Родитель) Тогда
		ИспользованиеПКО.Справочник_КонтрагентыКлиенты_Отправка = Ложь;
		ИспользованиеПКО.Справочник_Контрагенты_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатураГруппа    = ДанныеИБ.ЭтоГруппа;
	
	Если Не ДанныеИБ.ЭтоГруппа
		И ЗначениеЗаполнено(ДанныеИБ.Родитель)
		И Не ОбъектСуществуетВБазе(ДанныеИБ.Родитель) Тогда
		ИспользованиеПКО.Справочник_Номенклатура_Отправка = Ложь;
	КонецЕсли;   
	
	Если Не ДанныеИБ.ЭтоГруппа Тогда
	
		ТекстЗапроса = "ВЫБРАТЬ
		|	СправочникХарактеристикиНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК СправочникХарактеристикиНоменклатуры
		|ГДЕ
		|	НЕ СправочникХарактеристикиНоменклатуры.Недействителен
		|	И СправочникХарактеристикиНоменклатуры.Владелец = &ВладелецНоменклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СправочникХарактеристикиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК СправочникХарактеристикиНоменклатуры
		|ГДЕ
		|	НЕ СправочникХарактеристикиНоменклатуры.Недействителен
		|	И СправочникХарактеристикиНоменклатуры.Владелец = &ВладелецКатегория";
			 
		Запрос = Новый Запрос;    
		Запрос.Текст = ТекстЗапроса;
	
		Запрос.УстановитьПараметр("ВладелецНоменклатура", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("ВладелецКатегория", ДанныеИБ.КатегорияНоменклатуры);
	
		Результат = Запрос.Выполнить();  
		Если НЕ Результат.Пустой() Тогда
			ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ХарактеристикиНоменклатуры_Отправка", "Имя");
			Если ПравилоОбработки <> Неопределено Тогда
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл  
					СтруктураОбъекта = Новый Структура("Номенклатура, Характеристика", ДанныеИБ.Ссылка, Выборка.Ссылка);
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураОбъекта, ПравилоОбработки);    
				КонецЦикла;	
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ДанныеИБ.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		ИспользованиеПКО.Справочник_СтруктурныеЕдиницыСклады_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаданиеТорговомуПредставителю_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ДетализацияПоНоменклатуре", ДанныеИБ.Запасы.Количество() > 0); 
	ЖелаемаяДатаОтгрузки = ДанныеИБ.ОжидаемаяДатаВручения;
	Если Не ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки) Тогда
		ЖелаемаяДатаОтгрузки = ДанныеИБ.ДатаОтгрузки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки) Тогда
		ЖелаемаяДатаОтгрузки = ДанныеИБ.Дата;
	КонецЕсли;
	ДанныеXDTO.Вставить("ЖелаемаяДатаОтгрузки", ЖелаемаяДатаОтгрузки); 
	ДанныеXDTO.Вставить("ДатаВизитаПлан", ЖелаемаяДатаОтгрузки); 
	
	ТаблицаЗадачи = Новый ТаблицаЗначений;
	ТаблицаЗадачи.Колонки.Добавить("ОписаниеРезультата");
	ТаблицаЗадачи.Колонки.Добавить("ОписаниеЗадачи");
	ТаблицаЗадачи.Колонки.Добавить("Выполнена");         
	НоваяЗадача = ТаблицаЗадачи.Добавить(); 
	НоваяЗадача.ОписаниеЗадачи = "Посетить " + ДанныеИБ.Контрагент;
	НоваяЗадача.Выполнена = Ложь;
	НоваяЗадача.ОписаниеРезультата = "";
	ДанныеXDTO.Вставить("Задачи", ТаблицаЗадачи);
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПокупателя_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда 
		ОтменаЗагрузки = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Дата = ТекущаяДатаСеанса();    
	ПолученныеДанные.Автор = КомпонентыОбмена.УзелКорреспондента.Пользователь;
	ПолученныеДанные.Ответственный =  УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				КомпонентыОбмена.УзелКорреспондента.Пользователь,
				"ОсновнойОтветственный");;
	ПолученныеДанные.БанковскийСчет = ПолученныеДанные.Организация.БанковскийСчетПоУмолчанию;      
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
	ПолученныеДанные.ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;   
	ПолученныеДанные.Курс = 1;
	ПолученныеДанные.Кратность = 1;
	
	Если ПолученныеДанные.Контрагент.ВестиРасчетыПоДоговорам Тогда
		ПолученныеДанные.СуммаВключаетНДС = ?(ЗначениеЗаполнено(ПолученныеДанные.Договор.ВидЦен), ПолученныеДанные.Договор.ВидЦен.ЦенаВключаетНДС, Неопределено);
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ПолученныеДанные.Дата, Новый Структура("Валюта", ПолученныеДанные.Договор.ВалютаРасчетов));
		ПолученныеДанные.Курс = СтруктураПоВалюте.Курс;
		ПолученныеДанные.Кратность = СтруктураПоВалюте.Кратность;  
		
		ПолученныеДанные.ОснованиеПечатиСсылка = ПолученныеДанные.Договор;
		КомпонентыПредставления = Новый Массив;
		Если Константы.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати.Получить() Тогда
			КомпонентыПредставления.Добавить(НСтр("ru = 'Договор:'"));
		КонецЕсли;
		КомпонентыПредставления.Добавить(Строка(ПолученныеДанные.Договор));
		ПолученныеДанные.ОснованиеПечати = СтрСоединить(КомпонентыПредставления, " ");
		
	КонецЕсли;    
	
	ПолученныеДанные.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ПолученныеДанные.Организация,, ПолученныеДанные.Дата); 
	
	ПолученныеДанные.Касса = ПолученныеДанные.Организация.КассаПоУмолчанию;
	ПолученныеДанные.ПодписьРуководителя = ПолученныеДанные.Организация.ПодписьРуководителя;
	ПолученныеДанные.ПодписьГлавногоБухгалтера = ПолученныеДанные.Организация.ПодписьГлавногоБухгалтера;    
	
	ПолученныеДанные.ПоложениеВидаРабот = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	ПолученныеДанные.ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	ПолученныеДанные.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;    
	ПолученныеДанные.СкидкиРассчитаны = Истина;   
	ПолученныеДанные.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.НеПрименяется;      
	
	ПолученныеДанные.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ЗаказНаПродажу;  
	ПолученныеДанные.СтруктурнаяЕдиницаПродажи = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение; 
	 
	ПолученныеДанные.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ПолученныеДанные.ВидЗаказа);  
	
	Для Каждого СтрокаЗапасов Из ПолученныеДанные.Запасы Цикл 
	
		Если ПолученныеДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		ИначеЕсли ЗначениеЗаполнено(СтрокаЗапасов.Номенклатура.ВидСтавкиНДС) Тогда
			СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаЗапасов.Номенклатура.ВидСтавкиНДС, ПолученныеДанные.Дата);
		Иначе
			СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ПолученныеДанные.Организация.ВидСтавкиНДСПоУмолчанию, ПолученныеДанные.Дата);
		КонецЕсли;  
		СтрокаЗапасов.СтавкаНДС = СтавкаНДС;      
		ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммуНДСИВсего(СтрокаЗапасов, Новый Структура("СуммаВключаетНДС",ПолученныеДанные.СуммаВключаетНДС));  
		
	 	СтрокаЗапасов.ЕдиницаИзмерения = СтрокаЗапасов.Номенклатура.ЕдиницаИзмерения;
	
	КонецЦикла;                                         
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	ДанныеИБ.Запасы.Загрузить(ПолученныеДанные.Запасы.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПокупателяСостояние_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Состояние = "НеОбработан";
	Если ДанныеИБ.Проведен Тогда
		Состояние = "ГотовКОбеспечению";
	ИначеЕсли ДанныеИБ.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен Тогда
		Состояние = "Закрыт";  
	КонецЕсли; 
	ДанныеXDTO.Вставить("Состояние", Состояние);
	
	СтатусДокумента = "НеСогласован";
	Если ДанныеИБ.Проведен Тогда
		СтатусДокумента = "КОбеспечению";
	ИначеЕсли ДанныеИБ.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен Тогда
		СтатусДокумента = "Закрыт";  
	КонецЕсли; 
	ДанныеXDTO.Вставить("СтатусДокумента", СтатусДокумента); 
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ДанныеИБ.Ссылка);
	
	ОбъектыПечати = Новый СписокЗначений; 
	ПараметрыПечати = Новый Структура;
	ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();
	КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм("ЗаказПокупателя");
	Документы.ЗаказПокупателя.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);                                         
	                                         
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Для Каждого СтрокаКоллекции Из КоллекцияПечатныхФорм Цикл
		ТабличныйДокумент.Вывести(СтрокаКоллекции.ТабличныйДокумент);
	КонецЦикла; 
	ДанныеXDTO.Вставить("ПечатнаяФормаДокумента", Новый ХранилищеЗначения(ТабличныйДокумент));
КонецПроцедуры
Процедура ПКО_Документ_ОперацияПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.ФормаОплаты <> "Платежная карта" Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Отказ", Истина);
		Возврат;
	КонецЕсли; 
	
	ПолученныеДанные.РасшифровкаПлатежа.Очистить();
	СтрокаПлатежа = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
	
	ПКОДляЗагрузки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ДоговорыКонтрагентов_Получение");
	СтрокаПлатежа.Договор = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.ДоговорКлиента,
								ПКОДляЗагрузки, "ПолучитьСсылку").Ссылка;
	ПКОДляЗагрузки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ЗаказПокупателя_Получение");
	СтрокаПлатежа.Заказ = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.ДокументОснование,
								ПКОДляЗагрузки, "ПолучитьСсылку").Ссылка;   
	СтрокаПлатежа.СуммаПлатежа = ДанныеXDTO.СуммаДокумента; 
	СтрокаПлатежа.СуммаРасчетов = ДанныеXDTO.СуммаДокумента;
КонецПроцедуры
Процедура ПКО_Документ_ОперацияПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Отказ") И ПолученныеДанные.ДополнительныеСвойства.Отказ Тогда  
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Дата = ТекущаяДатаСеанса();    
	ПолученныеДанные.Автор = КомпонентыОбмена.УзелКорреспондента.Пользователь;
	ПолученныеДанные.БанковскийСчет = ПолученныеДанные.Организация.БанковскийСчетПоУмолчанию;      
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя;       
	
	ПолученныеДанные.Касса = КомпонентыОбмена.ПараметрыКонвертации.Касса;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ПолученныеДанные.Дата, Новый Структура("Валюта", ПолученныеДанные.ВалютаДенежныхСредств));
	ПолученныеДанные.Курс = СтруктураПоВалюте.Курс;
	ПолученныеДанные.Кратность = СтруктураПоВалюте.Кратность;    
	
	ПолученныеДанные.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ПолученныеДанные.Организация,, ПолученныеДанные.Дата); 
	
	ПолученныеДанные.ПодписьКассира = ПолученныеДанные.Касса.ПодписьКассира;
	ПолученныеДанные.ПоложениеСтатьи = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;   
	  
	ПолученныеДанные.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.НеПрименяется;   
	ПолученныеДанные.СпособОплаты = Перечисления.СпособыОплатыЭквайринг.ОплатаКартой;   
	ПолученныеДанные.Статус = Перечисления.СтатусыЧековККМ.ЧекНеПробит;  
	 
	ПолученныеДанные.Статья = КомпонентыОбмена.ПараметрыКонвертации.СтатьяДДСЭквайринг;
	ПолученныеДанные.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ПоступлениеОплатыОтПокупателя;
	ПолученныеДанные.ЭквайринговыйТерминал = КомпонентыОбмена.ПараметрыКонвертации.ЭквайринговыйТерминал;
	 
	Для Каждого СтрокаПлатежа Из ПолученныеДанные.РасшифровкаПлатежа Цикл        
		СтрокаПлатежа.Курс = ПолученныеДанные.Курс;
		СтрокаПлатежа.Кратность = ПолученныеДанные.Кратность;  
	
		Если ПолученныеДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ПолученныеДанные.Организация.ВидСтавкиНДСПоУмолчанию, ПолученныеДанные.Дата);
		КонецЕсли;  
		СтрокаПлатежа.СтавкаНДС = СтавкаНДС; 
		
		СтавкаНДСЧислом = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаПлатежа.СтавкаНДС);
		СтрокаПлатежа.СуммаНДС = СтрокаПлатежа.СуммаПлатежа - (СтрокаПлатежа.СуммаПлатежа) / ((СтавкаНДСЧислом + 100) / 100);  
		
		СтрокаПлатежа.СпособЗачета = СтрокаПлатежа.Договор.СпособРазнесенияОплатыПоУмолчанию;
	КонецЦикла;	
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеВКассу_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.ФормаОплаты <> "Наличная" Тогда     
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Отказ", Истина);
		Возврат;
	КонецЕсли;
		 
	ПолученныеДанные.РасшифровкаПлатежа.Очистить();
	СтрокаПлатежа = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
	
	ПКОДляЗагрузки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ДоговорыКонтрагентов_Получение");
	СтрокаПлатежа.Договор = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.ДоговорКлиента,
								ПКОДляЗагрузки, "ПолучитьСсылку").Ссылка;
	ПКОДляЗагрузки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ЗаказПокупателя_Получение");
	СтрокаПлатежа.Заказ = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.ДокументОснование,
								ПКОДляЗагрузки, "ПолучитьСсылку").Ссылка;   
	СтрокаПлатежа.СуммаПлатежа = ДанныеXDTO.СуммаДокумента; 
	СтрокаПлатежа.СуммаРасчетов = ДанныеXDTO.СуммаДокумента;
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеВКассу_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Отказ") И ПолученныеДанные.ДополнительныеСвойства.Отказ Тогда  
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Дата = ТекущаяДатаСеанса();    
	ПолученныеДанные.Автор = КомпонентыОбмена.УзелКорреспондента.Пользователь;
	
	ПолученныеДанные.ВариантЗаполненияРасшифровки = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Вручную;  
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;       
	
	ПолученныеДанные.Касса = КомпонентыОбмена.ПараметрыКонвертации.Касса;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ПолученныеДанные.Дата, Новый Структура("Валюта", ПолученныеДанные.ВалютаДенежныхСредств));
	ПолученныеДанные.Курс = СтруктураПоВалюте.Курс;
	ПолученныеДанные.Кратность = СтруктураПоВалюте.Кратность;    
	
	ПолученныеДанные.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ПолученныеДанные.Организация,, ПолученныеДанные.Дата); 
	ПолученныеДанные.НовыйМеханизмИнкассации = Истина;  
	
	ПолученныеДанные.ПодписьКассира = ПолученныеДанные.Касса.ПодписьКассира;
	ПолученныеДанные.ПодписьРуководителя = ПолученныеДанные.Организация.ПодписьРуководителя;
	ПолученныеДанные.ПодписьГлавногоБухгалтера = ПолученныеДанные.Организация.ПодписьГлавногоБухгалтера;    
	ПолученныеДанные.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение; 
	ПолученныеДанные.ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	ПолученныеДанные.ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	ПолученныеДанные.ПоложениеСтатьи = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;   
	ПолученныеДанные.ПринятоОт = СокрЛП(ПолученныеДанные.Контрагент); 
	  
	ПолученныеДанные.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.НеПрименяется;   
	ПолученныеДанные.Статья = КомпонентыОбмена.ПараметрыКонвертации.СтатьяДДСНаличные;
	ПолученныеДанные.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ОтПокупателя;
	 
	Для Каждого СтрокаПлатежа Из ПолученныеДанные.РасшифровкаПлатежа Цикл        
		СтрокаПлатежа.Курс = ПолученныеДанные.Курс;
		СтрокаПлатежа.Кратность = ПолученныеДанные.Кратность;  
	
		Если ПолученныеДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ПолученныеДанные.Организация.ВидСтавкиНДСПоУмолчанию, ПолученныеДанные.Дата);
		КонецЕсли;  
		СтрокаПлатежа.СтавкаНДС = СтавкаНДС; 
		
		СтавкаНДСЧислом = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаПлатежа.СтавкаНДС);
		СтрокаПлатежа.СуммаНДС = СтрокаПлатежа.СуммаПлатежа - (СтрокаПлатежа.СуммаПлатежа) / ((СтавкаНДСЧислом + 100) / 100);  
		
		СтрокаПлатежа.СтатьяДДС =  КомпонентыОбмена.ПараметрыКонвертации.СтатьяДДСНаличные;
		СтрокаПлатежа.СпособЗачета = СтрокаПлатежа.Договор.СпособРазнесенияОплатыПоУмолчанию;
	КонецЦикла;	
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Настройки_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	РеквизитыУзла = РеквизитыУзлаЗаполнениеПараметровКонвертации(КомпонентыОбмена, КомпонентыОбмена.УзелКорреспондента);
	
	ТекстНаборКонстант = "ФункциональнаяОпцияПередачаТоваровНаКомиссию, ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи,
		|ФункциональнаяОпцияРазрешитьСкладыВТабличныхЧастях, ИспользоватьДополнительныеРеквизитыИСведения";
		
	НаборКонстант = Константы.СоздатьНабор(ТекстНаборКонстант);
	НаборКонстант.Прочитать();
	
	ДоступныеФункции = ПроверкаПользователяМобильногоПриложения(Пользователи.ТекущийПользователь());
	
	ДанныеXDTO.Вставить("ExchangePlanName", "ОбменСМобильнымиПриложениями");
	ДанныеXDTO.Вставить("MainNodeID", РеквизитыУзла.КодГлавногоУзла);
	ДанныеXDTO.Вставить("AddChangeCustomer", Ложь);
	ДанныеXDTO.Вставить("AddChangeCustomerOrders", ДоступныеФункции.ЗаказыКлиентов);
	ДанныеXDTO.Вставить("UsingCustomerAgreement", 3);
	ДанныеXDTO.Вставить("UsePricesInOrderLine", Ложь);
	ДанныеXDTO.Вставить("UseCustomerContract", Истина);
	ДанныеXDTO.Вставить("UseGoodsBalance", Истина);
	ДанныеXDTO.Вставить("PartnersHowContractors", Истина);
	ДанныеXDTO.Вставить("UseCommission", Ложь);
	ДанныеXDTO.Вставить("UseManualDiscounts", НаборКонстант.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи);
	ДанныеXDTO.Вставить("UseStoreInOrderLine", Ложь);
	ДанныеXDTO.Вставить("UseOrderStatus", Истина);
	ДанныеXDTO.Вставить("ChangePriceInOrder", ДоступныеФункции.ИзменениеЦен);
	ДанныеXDTO.Вставить("FrequencyExchangeRates", 0);
	ДанныеXDTO.Вставить("FrequencyExchangeBalance", 0);
	ДанныеXDTO.Вставить("PrefixIB", РеквизитыУзла.ПрефиксДляДанныхМобильногоУстройства);
	ДанныеXDTO.Вставить("MessageNumberIn", РеквизитыУзла.НомерПринятого);
	ДанныеXDTO.Вставить("MessageNumberOut", РеквизитыУзла.НомерОтправленного);
	Если ДоступныеФункции.Задания И ЗначениеЗаполнено(РеквизитыУзла.СостояниеЗаданиеТорговомуПредставителю) Тогда
		ИспользованиеЗаданий = 2;
	Иначе
		ИспользованиеЗаданий = 0;
	КонецЕсли;
	ДанныеXDTO.Вставить("UsingJobTargets", ИспользованиеЗаданий);  
	ДанныеXDTO.Вставить("DetailJobTargets", Истина);   
	
	ДанныеXDTO.Вставить("UseCashPayment",
		(ДоступныеФункции.Касса
			И ?(РеквизитыУзла.РегистрироватьОплатыПКО = Неопределено, Ложь,
					РеквизитыУзла.РегистрироватьОплатыПКО)));
	ДанныеXDTO.Вставить("UseCashRegister", ДоступныеФункции.Касса
		И ?(РеквизитыУзла.РегистрироватьОплатыПКО = Неопределено, Ложь,
			РеквизитыУзла.РегистрироватьОплатыПКО));
	ДанныеXDTO.Вставить("UseCardPayment", ДоступныеФункции.ПлатежнаяКарта
		И ЗначениеЗаполнено(РеквизитыУзла.ЭквайринговыйТерминал));
	ДанныеXDTO.Вставить("CardsTypes", "");
	ДанныеXDTO.Вставить("UsePushNotifications", Ложь);
	ДанныеXDTO.Вставить("GoogleCloudProjectNumber", РеквизитыУзла.НомерПриложенияGoogleCloud);
	ДанныеXDTO.Вставить("UseImages", ?(РеквизитыУзла.ПередаватьИзображенияТоваров = Неопределено,
		Ложь, РеквизитыУзла.ПередаватьИзображенияТоваров));
	ДанныеXDTO.Вставить("UseWeight", Ложь); 
		
	ПустойИдентификатор = "00000000-0000-0000-0000-000000000000";
		
	ДанныеXDTO.Вставить("UnitWeight", ПустойИдентификатор);
	ДанныеXDTO.Вставить("UseRequestsToReturnOfGoodsByClient", Ложь);
	
	ДоступенВводКонтрагентов = ПравоДоступа("Добавление", Метаданные.Справочники.Контрагенты);
	ДанныеXDTO.Вставить("UseSimplifiedClientInput", Ложь);
	ДанныеXDTO.Вставить("CheckTINRussianRules", Ложь);
	
	ДанныеXDTO.Вставить("UseAdditionalProps", Ложь);
	ДанныеXDTO.Вставить("UseCommonAdditionalValues", Ложь);
	ДанныеXDTO.Вставить("UseCommonAdditionalProps", Ложь);
	
	ДанныеXDTO.Вставить("ShowOddments", ?(РеквизитыУзла.ОстатокКоличество = Неопределено,
		Истина, РеквизитыУзла.ОстатокКоличество));
КонецПроцедуры
Процедура ПКО_РегистрСведений_ОстаткиТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НоменклатураСПКО = СтруктураДляКонвертацииНоменклатуры(ДанныеИБ.Отбор.Номенклатура.Значение, ДанныеИБ.Отбор.Характеристика.Значение);	
	
	ДанныеXDTO.Вставить("Номенклатура", НоменклатураСПКО);
	ДанныеXDTO.Вставить("Склад", ДанныеИБ.Отбор.СтруктурнаяЕдиница.Значение);
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	
	ТаблицаЗаписи.Колонки.Количество.Имя = "ВНаличии";
	ТаблицаЗаписи.Колонки.СтруктурнаяЕдиница.Имя = "Склад";
	ТаблицаЗаписи.Колонки.Добавить("СостояниеОстаткаИндекс");   
	ТаблицаЗаписи.Колонки.Добавить("НоменклатураСтруктура", ТипКолонкиСтруктура());   
	
	Для каждого СтрокаТаблицы Из ТаблицаЗаписи Цикл
	
		Если СтрокаТаблицы.ВНаличии - СтрокаТаблицы.Резерв < 1 Тогда
			СтрокаТаблицы.СостояниеОстаткаИндекс = 0; 
		ИначеЕсли СтрокаТаблицы.ВНаличии - СтрокаТаблицы.Резерв < 5 Тогда
			СтрокаТаблицы.СостояниеОстаткаИндекс = 1; 
		ИначеЕсли СтрокаТаблицы.ВНаличии - СтрокаТаблицы.Резерв < 10 Тогда
			СтрокаТаблицы.СостояниеОстаткаИндекс = 2; 
		ИначеЕсли СтрокаТаблицы.ВНаличии - СтрокаТаблицы.Резерв < 15 Тогда
			СтрокаТаблицы.СостояниеОстаткаИндекс = 3; 
		ИначеЕсли СтрокаТаблицы.ВНаличии - СтрокаТаблицы.Резерв < 20 Тогда
			СтрокаТаблицы.СостояниеОстаткаИндекс = 4; 
		Иначе
			СтрокаТаблицы.СостояниеОстаткаИндекс = 5; 
		КонецЕсли;  
	
		НоменклатураСПКО = СтруктураДляКонвертацииНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика);	
		СтрокаТаблицы.НоменклатураСтруктура = НоменклатураСПКО; 
	
	КонецЦикла;    
	
	ТаблицаЗаписи.Колонки.Удалить(ТаблицаЗаписи.Колонки.Номенклатура);
	ТаблицаЗаписи.Колонки.НоменклатураСтруктура.Имя = "Номенклатура";    
	
	ДанныеXDTO.Вставить("Записи", ТаблицаЗаписи);
КонецПроцедуры
Процедура ПКО_РегистрСведений_ЦеныДоговоровКонтрагентов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Для каждого СтрокаТаблицы Из ДанныеИБ.Записи Цикл
	
		НоменклатураСПКО = СтруктураДляКонвертацииНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика);	
		СтрокаТаблицы.НоменклатураСтруктура = НоменклатураСПКО; 
		
		СтрокаТаблицы.РодительНоменклатуры = СтрокаТаблицы.Номенклатура.Родитель;
		СтрокаТаблицы.ВидНоменклатуры = СтрокаТаблицы.Номенклатура.КатегорияНоменклатуры;
		СтрокаТаблицы.ЦеноваяГруппа = СтрокаТаблицы.Номенклатура.ЦеноваяГруппа;
			
		НаименованиеНоменклатурыМП = СокрЛП(СтрокаТаблицы.Номенклатура.Наименование); //+Характеристика;
		СтрокаТаблицы.СтрокаПоиска= СокрЛП(СтрокаТаблицы.Номенклатура.Код)+ СокрЛП(НаименованиеНоменклатурыМП) + СокрЛП(СтрокаТаблицы.Номенклатура.Артикул);
	  
	КонецЦикла; 
	
	ДанныеИБ.Записи.Колонки.Удалить(ДанныеИБ.Записи.Колонки.Номенклатура);
	ДанныеИБ.Записи.Колонки.НоменклатураСтруктура.Имя = "Номенклатура";    
	
	ДанныеXDTO.Вставить("Записи", ДанныеИБ.Записи);
КонецПроцедуры
Процедура ПКО_РегистрСведений_ЦеныНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НоменклатураСПКО = СтруктураДляКонвертацииНоменклатуры(ДанныеИБ.Отбор.Номенклатура.Значение, ДанныеИБ.Отбор.Характеристика.Значение);	
	ДанныеXDTO.Вставить("Номенклатура", НоменклатураСПКО);
	ДанныеXDTO.Вставить("ВидЦены", ДанныеИБ.Отбор.ВидЦен.Значение);
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	ТаблицаЗаписи.Колонки.ВидЦен.Имя = "ВидЦены";
	ТаблицаЗаписи.Колонки.Добавить("НоменклатураСтруктура", ТипКолонкиСтруктура());   
	
	ТаблицаЗаписи.Колонки.Добавить("РодительНоменклатуры");
	ТаблицаЗаписи.Колонки.Добавить("ВидНоменклатуры");
	ТаблицаЗаписи.Колонки.Добавить("ЦеноваяГруппа");
	ТаблицаЗаписи.Колонки.Добавить("СтрокаПоиска");
	
	Для каждого СтрокаТаблицы Из ТаблицаЗаписи Цикл
	
		НоменклатураСПКО = СтруктураДляКонвертацииНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика);	
		СтрокаТаблицы.НоменклатураСтруктура = НоменклатураСПКО; 
		
		СтрокаТаблицы.РодительНоменклатуры = СтрокаТаблицы.Номенклатура.Родитель;
		СтрокаТаблицы.ВидНоменклатуры = СтрокаТаблицы.Номенклатура.КатегорияНоменклатуры;
		СтрокаТаблицы.ЦеноваяГруппа = СтрокаТаблицы.Номенклатура.ЦеноваяГруппа;
			
		НаименованиеНоменклатурыМП = СокрЛП(СтрокаТаблицы.Номенклатура.Наименование); //+Характеристика;
		СтрокаТаблицы.СтрокаПоиска= СокрЛП(СтрокаТаблицы.Номенклатура.Код)+ СокрЛП(НаименованиеНоменклатурыМП) + СокрЛП(СтрокаТаблицы.Номенклатура.Артикул);
	  
	КонецЦикла; 
	
	ТаблицаЗаписи.Колонки.Удалить(ТаблицаЗаписи.Колонки.Номенклатура);
	ТаблицаЗаписи.Колонки.НоменклатураСтруктура.Имя = "Номенклатура";    
	
	ДанныеXDTO.Вставить("Записи", ТаблицаЗаписи);
КонецПроцедуры
Процедура ПКО_Справочник_ВидыКонтактнойИнформации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКод", Идентификатор);
КонецПроцедуры
Процедура ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	ДанныеXDTO.Вставить("ERPКод", Идентификатор);
КонецПроцедуры
Процедура ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКодДоговора", Идентификатор);   
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.ДоговорОбслуживанияДатаОкончания) Тогда   
		ДанныеXDTO.Вставить("Действует", Истина);  
	Иначе
		ДанныеXDTO.Вставить("Действует", ДанныеИБ.ДоговорОбслуживанияДатаОкончания > ТекущаяДатаСеанса());  
	КонецЕсли; 
	Комиссия = ДанныеИБ.ВидДоговора = Перечисления.ВидыДоговоров.СКомиссионером; 
	ДанныеXDTO.Вставить("Комиссия", Комиссия);  
	
	УникальныйКлюч = СокрЛП(ДанныеИБ.Организация) + "/"
		+ СокрЛП(ДанныеИБ.Владелец) + "/"
		+ СокрЛП(ДанныеИБ.ВалютаРасчетов) + "/"
		+ СокрЛП(ДанныеИБ.ВидЦен) + "/"
		+ Формат(Комиссия, "БЛ=0; БИ=1");   
	ДанныеXDTO.Вставить("УникальныйКлюч", УникальныйКлюч);  
	
	Если ЗначениеЗаполнено(ДанныеИБ.ВидЦен) Тогда
		Если ДанныеИБ.ВидЦен <> Справочники.ВидыЦен.Оптовая Тогда
			ЕстьУточнениеЦен = Истина;
		Иначе
			ЕстьУточнениеЦен = Ложь;
		КонецЕсли; 
	Иначе  
		ЕстьУточнениеЦен = Ложь;
	КонецЕсли; 
	ДанныеXDTO.Вставить("ЕстьУточнениеЦен", ЕстьУточнениеЦен);
КонецПроцедуры
Процедура ПКО_Справочник_ЕдиницыИзмеренияУпаковки_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	
	ДанныеXDTO.Вставить("ERPКод", Идентификатор);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКод", Идентификатор);   
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Коэффициент) Тогда
		ДанныеXDTO.Вставить("Коэффициент", 1);
	КонецЕсли;
	ДанныеXDTO.Вставить("НаименованиеПолное", ДанныеИБ.ЕдиницаИзмеренияПоКлассификатору.НаименованиеПолное);
КонецПроцедуры
Процедура ПКО_Справочник_КатегорииНоменклатурыВиды_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	ДанныеXDTO.Вставить("ERPКод", Идентификатор);
КонецПроцедуры
Процедура ПКО_Справочник_КонтактныеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКод", Идентификатор);
КонецПроцедуры
Процедура ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИдКонтрагента = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	
	ДанныеXDTO.Вставить("ERPКод", ИдКонтрагента);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКод", ИдКонтрагента);   
	ДанныеXDTO.КлючевыеСвойства.Вставить("Клиент", ДанныеИБ.Ссылка);    
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда   
		НаименованиеПолное = ДанныеИБ.Наименование; 
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", НаименованиеПолное); 
	Иначе
		НаименованиеПолное = ДанныеИБ.НаименованиеПолное; 
	КонецЕсли; 
	
	ИННКПП = СокрЛП(ДанныеИБ.ИНН)+ ?(ЗначениеЗаполнено(ДанныеИБ.КПП),"/" + СокрЛП(ДанныеИБ.КПП), "");
	ДанныеXDTO.Вставить("ИННКПП", ИННКПП);  
	
	ПредставлениеКонтрагента = НаименованиеПолное + " (" +ИННКПП + ")";
	
	ДанныеXDTO.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
	 
	 
	ВыгруженныеКонтрагенты = КомпонентыОбмена.ПараметрыКонвертации.ВыгруженныеКонтрагенты;
	Если ВыгруженныеКонтрагенты = Неопределено Тогда
		ВыгруженныеКонтрагенты = Новый Массив;
	КонецЕсли;
	
	Если ВыгруженныеКонтрагенты.Найти(ДанныеИБ.Ссылка) = Неопределено Тогда
		ВыгруженныеКонтрагенты.Добавить(ДанныеИБ.Ссылка);
	КонецЕсли;
	КомпонентыОбмена.ПараметрыКонвертации.ВыгруженныеКонтрагенты = ВыгруженныеКонтрагенты;
КонецПроцедуры
Процедура ПКО_Справочник_КонтрагентыКлиенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИдКонтрагента = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	
	ДанныеXDTO.Вставить("ERPКод", ИдКонтрагента);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКод", ИдКонтрагента);
	
	ДанныеXDTO.Вставить("ОтгрузкаЗапрещена", ДанныеИБ.ПометкаУдаления);
	Если ДанныеИБ.ПометкаУдаления Тогда 
		ДанныеXDTO.Вставить("ПричинаДобавленияВСтопЛист",	Нстр("ru = 'Помечен на удаление'"));    
	КонецЕсли;
		
	ДанныеXDTO.Вставить("ДополнительнаяИнформацияПоДоставке", ДанныеИБ.Комментарий);
	ДанныеXDTO.Вставить("ДополнительнаяИнформация",  ДосьеКонтрагента(ДанныеИБ.Ссылка));
	 
	ДанныеXDTO.Вставить("Самовывоз", Ложь);
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTOДляНоменклатурыХарактеристики(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);          
	
	ВыгруженнаяНоменклатура = КомпонентыОбмена.ПараметрыКонвертации.ВыгруженнаяНоменклатура;
	Если ВыгруженнаяНоменклатура = Неопределено Тогда
		ВыгруженнаяНоменклатура = Новый Массив;
	КонецЕсли;
	
	Если ВыгруженнаяНоменклатура.Найти(ДанныеИБ.Ссылка) = Неопределено Тогда
		ВыгруженнаяНоменклатура.Добавить(ДанныеИБ.Ссылка);
	КонецЕсли;
	КомпонентыОбмена.ПараметрыКонвертации.ВыгруженнаяНоменклатура = ВыгруженнаяНоменклатура;
КонецПроцедуры
Процедура ПКО_Справочник_НоменклатураГруппа_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИдНоменклатуры = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКодНоменклатура", ИдНоменклатуры);
КонецПроцедуры
Процедура ПКО_Справочник_НоменклатураИзСтруктуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTOДляНоменклатурыХарактеристики(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Справочник_НоменклатураПрисоедФайлы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИдентификаторХранилища = Новый УникальныйИдентификатор();
	АдресДвоичныхДанныхКартинки = РаботаСФайламиУНФ.СсылкаНаДвоичныеДанныеФайла(ДанныеИБ.Ссылка, ИдентификаторХранилища);
	ДвоичныеДанныеКартинки = ПолучитьИзВременногоХранилища(АдресДвоичныхДанныхКартинки);
	ХранилищеКартинки = Новый ХранилищеЗначения(ДвоичныеДанныеКартинки);
	ДанныеXDTO.Вставить("ХранимыйФайл", ХранилищеКартинки);
КонецПроцедуры
Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	
	ДанныеXDTO.Вставить("ERPКод", Идентификатор);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКод", Идентификатор);   
	
	БанковскийСчет = ДанныеИБ.БанковскийСчетПоУмолчанию;    
	Банк = БанковскийСчет.Банк; 
	ДанныеXDTO.Вставить("НомерСчета", БанковскийСчет.НомерСчета);
	ДанныеXDTO.Вставить("КоррСчет", Банк.КоррСчет);
	ДанныеXDTO.Вставить("БИК", Банк.Код);
	ДанныеXDTO.Вставить("Банк", Банк.Наименование);
	ДанныеXDTO.Вставить("ГородБанка", Банк.Город);
	 
	ДанныеXDTO.Вставить("ГлавныйБухгалтер", ДанныеИБ.ПодписьГлавногоБухгалтера.РасшифровкаПодписи);
	ДанныеXDTO.Вставить("Руководитель", ДанныеИБ.ПодписьРуководителя.РасшифровкаПодписи);    
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	СистемыНалогообложенияОрганизаций.Период КАК Период,
		|	СистемыНалогообложенияОрганизаций.Организация КАК Организация,
		|	СистемыНалогообложенияОрганизаций.СистемаНалогообложения КАК СистемаНалогообложения,
		|	СистемыНалогообложенияОрганизаций.ОбъектНалогообложения КАК ОбъектНалогообложения
		|ИЗ
		|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(, Организация = &Организация) КАК СистемыНалогообложенияОрганизаций";
	
	Запрос = Новый Запрос;    
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", ДанныеИБ.Ссылка); 
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ДанныеXDTO.Вставить("СистемаНалогообложения", Выборка.СистемаНалогообложения);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СтруктурныеЕдиницыСклады_Группа_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	ДанныеXDTO.Вставить("ERPКод", Идентификатор);
КонецПроцедуры
Процедура ПКО_Справочник_СтруктурныеЕдиницыСклады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Идентификатор = СокрЛП(ДанныеИБ.Ссылка.УникальныйИдентификатор());
	ДанныеXDTO.Вставить("ERPКод", Идентификатор);  
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКод", Идентификатор);
КонецПроцедуры
Процедура ПКО_Справочник_Характеристики_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTOДляНоменклатурыХарактеристики(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные = 	Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеXDTO.ERPКодХарактеристика));
КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Процедура ДанныеXDTOДляНоменклатурыХарактеристики(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ) = Тип("СправочникОбъект.Номенклатура") Тогда 
		Номенклатура = ДанныеИБ.Ссылка;     
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ИначеЕсли ТипЗнч(ДанныеИБ) = Тип("СправочникСсылка.Номенклатура") Тогда 
		Номенклатура = ДанныеИБ;     
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ИначеЕсли ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда 
		Номенклатура = ДанныеИБ.Номенклатура;   
		Характеристика = ДанныеИБ.Характеристика; 
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", Номенклатура);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Code", Номенклатура.Код);  
	ДанныеXDTO.КлючевыеСвойства.Вставить("Parent", Номенклатура.Родитель);  
	ДанныеXDTO.КлючевыеСвойства.Вставить("Артикул", Номенклатура.Артикул);  
	ДанныеXDTO.Вставить("DeletionMark", Номенклатура.ПометкаУдаления);  
	ДанныеXDTO.Вставить("IsFolder", Номенклатура.ЭтоГруппа);  
	ДанныеXDTO.Вставить("ВесЕдиницаИзмерения", Номенклатура.ЕдиницаДляОтчетов);  
	ДанныеXDTO.Вставить("ВидНоменклатуры", Номенклатура.КатегорияНоменклатуры);  
	ДанныеXDTO.Вставить("ЕдиницаЗаказа", Номенклатура.ЕдиницаДляОтчетов);  
	ДанныеXDTO.Вставить("ЕдиницаИзмерения", Номенклатура.ЕдиницаИзмерения);  
	ДанныеXDTO.Вставить("Описание", Номенклатура.Комментарий); 
	
	ПередаватьИзображенияТоваров = ?(КомпонентыОбмена.ПараметрыКонвертации.ПередаватьИзображенияТоваров = Неопределено, Ложь, КомпонентыОбмена.ПараметрыКонвертации.ПередаватьИзображенияТоваров);
	Если ПередаватьИзображенияТоваров Тогда     
		ДанныеXDTO.Вставить("ФайлКартинки", Номенклатура.ФайлКартинки);  
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ЦеноваяГруппа", Номенклатура.ЦеноваяГруппа);  
	ДанныеXDTO.Вставить("СтавкаНДСЧислом", Справочники.СтавкиНДС.СтавкаНДС(Номенклатура.ВидСтавкиНДС).Ставка/100);
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
		ДанныеXDTO.Вставить("Услуга", Ложь);  
	Иначе
		ДанныеXDTO.Вставить("Услуга", Истина);  
	КонецЕсли; 
	
	ДанныеXDTO.Вставить("ВесЧислитель", 1);
	ДанныеXDTO.Вставить("ВесЗнаменатель", 1);   
	ДанныеXDTO.Вставить("ВесИспользовать", Ложь);
	ДанныеXDTO.Вставить("ВесМожноУказыватьВДокументах", Ложь);   
	 
	ИдНоменклатуры = СокрЛП(Номенклатура.УникальныйИдентификатор());
	ИдХарактеристики = СокрЛП(Характеристика.УникальныйИдентификатор());
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКодНоменклатура", ИдНоменклатуры);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ERPКодХарактеристика", ИдХарактеристики);
	
	НаименованиеНоменклатурыМП = СокрЛП(Номенклатура.Наименование); 
	ПолноеНаименованиеНоменклатурыМП = СокрЛП(Номенклатура.НаименованиеПолное);   
	Если НЕ ЗначениеЗаполнено(Номенклатура.НаименованиеПолное) Тогда
		ПолноеНаименованиеНоменклатурыМП = СокрЛП(Номенклатура.Наименование); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Характеристика) Тогда     
		НаименованиеНоменклатурыМП = НаименованиеНоменклатурыМП + " (" + СокрЛП(Характеристика.Наименование) + ")";
		ПолноеНаименованиеНоменклатурыМП = ПолноеНаименованиеНоменклатурыМП + " (" + СокрЛП(Характеристика.Наименование) + ")";
	КонецЕсли; 
	СтрокаПоиска= СокрЛП(Номенклатура.Код)+ СокрЛП(НаименованиеНоменклатурыМП) + СокрЛП(Номенклатура.Артикул);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Description", НаименованиеНоменклатурыМП); 
	ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ПолноеНаименованиеНоменклатурыМП); 
	ДанныеXDTO.Вставить("СтрокаПоиска", СтрокаПоиска);
КонецПроцедуры
Функция ДосьеКонтрагента(КонтрагентСсылка)
	Контрагенты = Новый Массив; 
	    Контрагенты.Добавить(КонтрагентСсылка);
	     
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_КонтактнаяИнформацияКарточка";
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КонтактнаяИнформацияКарточка";
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабличныйДокумент.АвтоМасштаб = Истина;
	
	
		Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.Контрагенты.ПФ_MXL_КонтактнаяИнформацияКарточка");
		
		ОтступСПодчеркиванием = Макет.ПолучитьОбласть("Отступ");
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 3);
		Область = ОтступСПодчеркиванием.Область(1,1,ОтступСПодчеркиванием.ВысотаТаблицы, ОтступСПодчеркиванием.ШиринаТаблицы);
		Область.ЦветРамки = ЦветаСтиля.ЦветРамки;
		Область.Обвести(,,,Линия);
		
		СтруктураОбластей = Новый Структура;
		СтруктураОбластей.Вставить("ОтступСПодчеркиванием",	  ОтступСПодчеркиванием);
		СтруктураОбластей.Вставить("Отступ",				  Макет.ПолучитьОбласть("Отступ"));
		СтруктураОбластей.Вставить("КонтрагентПредставление", Макет.ПолучитьОбласть("КонтрагентПредставление"));
		СтруктураОбластей.Вставить("КонтрагентДанные",		  Макет.ПолучитьОбласть("КонтрагентДанные"));
		СтруктураОбластей.Вставить("КонтрагентВидКИ",	  	  Макет.ПолучитьОбласть("КонтрагентВидКИ"));
		СтруктураОбластей.Вставить("КонтрагентЗначениеКИ",	  Макет.ПолучитьОбласть("КонтрагентЗначениеКИ"));
		СтруктураОбластей.Вставить("КонтактныеЛицаЗаголовок", Макет.ПолучитьОбласть("КонтактныеЛицаЗаголовок"));
		СтруктураОбластей.Вставить("КонтактноеЛицо", 		  Макет.ПолучитьОбласть("КонтактноеЛицо"));
		СтруктураОбластей.Вставить("КонтактноеЛицоКИ", 		  Макет.ПолучитьОбласть("КонтактноеЛицоКИ"));
		СтруктураОбластей.Вставить("ОтступКЛ", 		  		  Макет.ПолучитьОбласть("ОтступКЛ"));
		СтруктураОбластей.Вставить("Ответственный",			  Макет.ПолучитьОбласть("Ответственный"));
		
		НастройкиСоставаКИ = Новый Структура;
		НастройкиСоставаКИ.Вставить("ИспользуемыеВидыКИ", Новый Массив);
		НастройкиСоставаКИ.Вставить("ИспользуемыеВидыКИ_Контрагентов", Новый Массив);
		НастройкиСоставаКИ.Вставить("ИспользуемыеВидыКИ_КонтактныхЛиц", Новый Массив);
		НастройкиСоставаКИ.Вставить("КонтрагентИНН");
		НастройкиСоставаКИ.Вставить("ОсновноеКонтактноеЛицо");
		НастройкиСоставаКИ.Вставить("ПрочиеКонтактныеЛица");
		НастройкиСоставаКИ.Вставить("ОтветственныйМенеджер");
		
		Выборка = Справочники.Контрагенты.ПолучитьДоступныеДляПечатиВидыКИ().Выбрать();
		
		ИспользуемыеВидыКИ = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("УправлениеСоставомКонтактнойИнформацииКонтрагента",
		"ИспользуемыеВидыКИ", Новый Соответствие);
		
		Пока Выборка.Следующий() Цикл
			
			ИспользованиеКИ = ИспользуемыеВидыКИ.Получить(Выборка.ВидКИ);
			
			// Если доступного вида контактной информации нет в сохраненных настройках пользователя то установим использование по умолчанию
			Если ИспользованиеКИ = Неопределено Тогда
				ИспользованиеКИ = Справочники.Контрагенты.УстановитьПечатьВидаКИПоУмолчанию(Выборка.ВидКИ);
			КонецЕсли;
			
			Если ИспользованиеКИ Тогда
				НастройкиСоставаКИ.ИспользуемыеВидыКИ.Добавить(Выборка.ВидКИ);
				Если Выборка.ВидКИ.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты Тогда
					НастройкиСоставаКИ.ИспользуемыеВидыКИ_Контрагентов.Добавить(Выборка.ВидКИ);
				ИначеЕсли Выборка.ВидКИ.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица Тогда
					НастройкиСоставаКИ.ИспользуемыеВидыКИ_КонтактныхЛиц.Добавить(Выборка.ВидКИ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		НастройкиСоставаКИ.КонтрагентИНН = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("УправлениеСоставомКонтактнойИнформацииКонтрагента",
			"КонтрагентИНН", Истина);
			
		НастройкиСоставаКИ.ОсновноеКонтактноеЛицо = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("УправлениеСоставомКонтактнойИнформацииКонтрагента",
			"ОсновноеКонтактноеЛицо", Истина);
			
		НастройкиСоставаКИ.ПрочиеКонтактныеЛица = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("УправлениеСоставомКонтактнойИнформацииКонтрагента",
			"ПрочиеКонтактныеЛица", Истина);
			
		НастройкиСоставаКИ.ОтветственныйМенеджер = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("УправлениеСоставомКонтактнойИнформацииКонтрагента",
			"ОтветственныйМенеджер", Истина);
			
		КолонокКонтактныхЛиц = 3;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.Представление КАК КонтрагентПредставление,
		|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
		|	ВЫБОР
		|		КОГДА &КонтрагентИНН = ИСТИНА
		|				И Контрагенты.ИНН <> """"
		|			ТОГДА ""ИНН: "" + Контрагенты.ИНН
		|		КОГДА Контрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|				И Контрагенты.РегистрационныйНомер <> """"
		|			ТОГДА ""Рег.№: "" + Контрагенты.РегистрационныйНомер
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ИННПредставление,
		|	Контрагенты.Ответственный КАК ОтветственныйМенеджер,
		|	Контрагенты.Ответственный.Представление КАК ОтветственныйПредставление,
		|	Контрагенты.Ответственный.Физлицо КАК ФизЛицо
		|ПОМЕСТИТЬ втКонтрагенты
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка В(&Контрагенты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКонтрагенты.Контрагент КАК Контрагент,
		|	втКонтрагенты.КонтрагентПредставление КАК КонтрагентПредставление,
		|	втКонтрагенты.НаименованиеПолное КАК НаименованиеПолное,
		|	втКонтрагенты.ИННПредставление КАК ИННПредставление,
		|	втКонтрагенты.ОтветственныйМенеджер КАК ОтветственныйМенеджер,
		|	втКонтрагенты.ОтветственныйПредставление КАК ОтветственныйПредставление,
		|	втКонтрагенты.ФизЛицо КАК ФизЛицо
		|ИЗ
		|	втКонтрагенты КАК втКонтрагенты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Контрагент,
		|	КонтрагентыКонтактнаяИнформация.Вид КАК ВидКИ,
		|	КонтрагентыКонтактнаяИнформация.Представление КАК ЗначениеКИКонтрагента
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Ссылка В(&Контрагенты)
		|	И КонтрагентыКонтактнаяИнформация.Вид В(&ИспользуемыеВидыКИ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтрагентыКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиКонтрагентКонтакт.Контрагент КАК Контрагент,
		|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо,
		|	КонтактныеЛица.Представление КАК КонтактноеЛицоПредставление,
		|	ВЫБОР
		|		КОГДА КонтактныеЛица.Ссылка = СвязиКонтрагентКонтакт.Контрагент.КонтактноеЛицо
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ОсновноеИлиПрочиеКонтактныеЛица
		|ИЗ
		|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
		|		ПО СвязиКонтрагентКонтакт.Контакт = КонтактныеЛица.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПервых КАК СвязиКонтрагентКонтактСрезПервых
		|		ПО (СвязиКонтрагентКонтактСрезПервых.Контакт = КонтактныеЛица.Ссылка)
		|			И СвязиКонтрагентКонтакт.Контрагент = СвязиКонтрагентКонтактСрезПервых.Контрагент
		|ГДЕ
		|	СвязиКонтрагентКонтакт.Контрагент В(&Контрагенты)
		|	И КонтактныеЛица.ПометкаУдаления = ЛОЖЬ
		|	И КонтактныеЛица.Недействителен = ЛОЖЬ
		|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	СвязиКонтрагентКонтактСрезПервых.Порядок,
		|	КонтактныеЛица.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиКонтрагентКонтакт.Контрагент КАК Контрагент,
		|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо,
		|	КонтактныеЛицаКонтактнаяИнформация.Вид КАК ВидКИ,
		|	КонтактныеЛицаКонтактнаяИнформация.Представление КАК ЗначениеКИКонтактногоЛица
		|ИЗ
		|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
		|		ПО СвязиКонтрагентКонтакт.Контакт = КонтактныеЛицаКонтактнаяИнформация.Ссылка
		|ГДЕ
		|	СвязиКонтрагентКонтакт.Контрагент В(&Контрагенты)
		|	И КонтактныеЛицаКонтактнаяИнформация.Вид В(&ИспользуемыеВидыКИ)
		|	И КонтактныеЛицаКонтактнаяИнформация.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И КонтактныеЛицаКонтактнаяИнформация.Ссылка.Недействителен = ЛОЖЬ
		|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтактныеЛицаКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК ФизЛицо,
		|	ФизическиеЛицаКонтактнаяИнформация.Вид КАК ВидКИ,
		|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК ТелефонОтветственного
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|ГДЕ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				втКонтрагенты.ФизЛицо
		|			ИЗ
		|				втКонтрагенты)
		|	И ФизическиеЛицаКонтактнаяИнформация.Вид В(&ИспользуемыеВидыКИ)
		|	И ФизическиеЛицаКонтактнаяИнформация.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическиеЛицаКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания";
		
		
		Запрос = Новый Запрос;    
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("ИспользуемыеВидыКИ", НастройкиСоставаКИ.ИспользуемыеВидыКИ);
		Запрос.УстановитьПараметр("КонтрагентИНН", НастройкиСоставаКИ.КонтрагентИНН);
		Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		ВыборкаКонтрагенты = МассивРезультатов[1].Выбрать();
		ВыборкаКИКонтрагенты = МассивРезультатов[2].Выбрать();
		ВыборкаКонтактныеЛица = МассивРезультатов[3].Выбрать();
		ВыборкаКИКонтактныеЛица = МассивРезультатов[4].Выбрать();
		ВыборкаКИФизЛицо = МассивРезультатов[5].Выбрать();
		
		ПоискПоКонтрагенту = Новый Структура("Контрагент");
		
		Для Каждого Контрагент Из Контрагенты Цикл
			
			ПоискПоКонтрагенту.Контрагент = Контрагент;
			ВыборкаКонтрагенты.Сбросить();
			
			Если ВыборкаКонтрагенты.НайтиСледующий(ПоискПоКонтрагенту) Тогда
				
				ТД_Контрагент = Новый ТабличныйДокумент;
				
				СтруктураОбластей.КонтрагентПредставление.Параметры.Заполнить(ВыборкаКонтрагенты);
				ТД_Контрагент.Вывести(СтруктураОбластей.КонтрагентПредставление);
				СтруктураОбластей.КонтрагентДанные.Параметры.Заполнить(ВыборкаКонтрагенты);
				ТД_Контрагент.Вывести(СтруктураОбластей.КонтрагентДанные);
				
				ТД_ВидыКИ_Контрагентов = Новый ТабличныйДокумент;
				ТД_ЗначениеКИ_Контрагентов = Новый ТабличныйДокумент;
				Для Каждого ВидКИ Из НастройкиСоставаКИ.ИспользуемыеВидыКИ_Контрагентов Цикл
					СтруктураОбластей.КонтрагентВидКИ.Параметры.ВидКИ = ВидКИ;
					ТД_ВидыКИ_Контрагентов.Вывести(СтруктураОбластей.КонтрагентВидКИ);
				КонецЦикла;
				
				ВыборкаКИКонтрагенты.Сбросить();
				ТекущаяСтрокаКИ = 0;
				
				Пока ВыборкаКИКонтрагенты.НайтиСледующий(ПоискПоКонтрагенту) Цикл
					
					СтрокаВыводаКИ = НастройкиСоставаКИ.ИспользуемыеВидыКИ_Контрагентов.Найти(ВыборкаКИКонтрагенты.ВидКИ);
					
					Пока ТекущаяСтрокаКИ < СтрокаВыводаКИ Цикл
						ТД_ЗначениеКИ_Контрагентов.Вывести(СтруктураОбластей.КонтрагентЗначениеКИ);
						ТекущаяСтрокаКИ = ТекущаяСтрокаКИ + 1;
					КонецЦикла;
					
					СтруктураОбластей.КонтрагентЗначениеКИ.Параметры.Заполнить(ВыборкаКИКонтрагенты);
					ТД_ЗначениеКИ_Контрагентов.Вывести(СтруктураОбластей.КонтрагентЗначениеКИ);
					СтруктураОбластей.КонтрагентЗначениеКИ.Параметры.ЗначениеКИКонтрагента = "";
					
					ТекущаяСтрокаКИ = ТекущаяСтрокаКИ + 1;
					
				КонецЦикла;
				
				Пока ТекущаяСтрокаКИ <= НастройкиСоставаКИ.ИспользуемыеВидыКИ_Контрагентов.ВГраница() Цикл
					ТД_ЗначениеКИ_Контрагентов.Вывести(СтруктураОбластей.КонтрагентЗначениеКИ);
					ТекущаяСтрокаКИ = ТекущаяСтрокаКИ + 1;
				КонецЦикла;
				
				ТД_Контрагент.Присоединить(ТД_ВидыКИ_Контрагентов.ПолучитьОбласть(1,1,ТД_ВидыКИ_Контрагентов.ВысотаТаблицы, ТД_ВидыКИ_Контрагентов.ШиринаТаблицы));
				ТД_Контрагент.Присоединить(ТД_ЗначениеКИ_Контрагентов.ПолучитьОбласть(1,1,ТД_ЗначениеКИ_Контрагентов.ВысотаТаблицы, ТД_ЗначениеКИ_Контрагентов.ШиринаТаблицы));
				ТД_Контрагент.Вывести(СтруктураОбластей.Отступ);
				
				Если НастройкиСоставаКИ.ОсновноеКонтактноеЛицо Или НастройкиСоставаКИ.ПрочиеКонтактныеЛица Тогда
					
					ТД_Контрагент.Вывести(СтруктураОбластей.КонтактныеЛицаЗаголовок);
					
					ТД_КонтактныеЛица = Новый ТабличныйДокумент;
					ТекущаяКолонкаКонтактныхЛиц = 0;
					ВыборкаКонтактныеЛица.Сбросить();
					
					Пока ВыборкаКонтактныеЛица.НайтиСледующий(ПоискПоКонтрагенту) Цикл
						
						Если (ВыборкаКонтактныеЛица.ОсновноеИлиПрочиеКонтактныеЛица = 1 И НЕ НастройкиСоставаКИ.ОсновноеКонтактноеЛицо)
							ИЛИ (ВыборкаКонтактныеЛица.ОсновноеИлиПрочиеКонтактныеЛица = 2 И НЕ НастройкиСоставаКИ.ПрочиеКонтактныеЛица) Тогда
								Продолжить;
						КонецЕсли;
						
						ТД_КонтактноеЛицо = Новый ТабличныйДокумент;
						СтруктураОбластей.КонтактноеЛицо.Параметры.Заполнить(ВыборкаКонтактныеЛица);
						ТД_КонтактноеЛицо.Вывести(СтруктураОбластей.КонтактноеЛицо);
						ТекущаяКолонкаКонтактныхЛиц = ТекущаяКолонкаКонтактныхЛиц + 1;
							
						ПоискПоКонтактномуЛицу = Новый Структура("КонтактноеЛицо", ВыборкаКонтактныеЛица.КонтактноеЛицо);
						ТекущаяСтрокаКИ = 0;
						ВыборкаКИКонтактныеЛица.Сбросить();
						
						Пока ВыборкаКИКонтактныеЛица.НайтиСледующий(ПоискПоКонтактномуЛицу) Цикл
							СтруктураОбластей.КонтактноеЛицоКИ.Параметры.Заполнить(ВыборкаКИКонтактныеЛица);
							ТД_КонтактноеЛицо.Вывести(СтруктураОбластей.КонтактноеЛицоКИ);
							ТекущаяСтрокаКИ = ТекущаяСтрокаКИ + 1;
						КонецЦикла;
						
						СтруктураОбластей.КонтактноеЛицоКИ.Параметры.ЗначениеКИКонтактногоЛица = "";
						Пока ТекущаяСтрокаКИ < НастройкиСоставаКИ.ИспользуемыеВидыКИ_КонтактныхЛиц.Количество() Цикл
							ТД_КонтактноеЛицо.Вывести(СтруктураОбластей.КонтактноеЛицоКИ);
							ТекущаяСтрокаКИ = ТекущаяСтрокаКИ + 1;
						КонецЦикла;
						
						Если ВыборкаКонтактныеЛица.ОсновноеИлиПрочиеКонтактныеЛица = 1 Тогда
							Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
							Область = ТД_КонтактноеЛицо.Область(1,2,ТД_КонтактноеЛицо.ВысотаТаблицы, ТД_КонтактноеЛицо.ШиринаТаблицы);
							Область.Обвести(Линия, Линия, Линия, Линия);
						КонецЕсли;
						
						Если ТекущаяКолонкаКонтактныхЛиц % КолонокКонтактныхЛиц = 1 Тогда
							ТД_КонтактныеЛица.Вывести(СтруктураОбластей.ОтступКЛ);
							ТД_КонтактныеЛица.Вывести(ТД_КонтактноеЛицо.ПолучитьОбласть(1,1,ТД_КонтактноеЛицо.ВысотаТаблицы, ТД_КонтактноеЛицо.ШиринаТаблицы));
						Иначе 
							ТД_КонтактныеЛица.Присоединить(ТД_КонтактноеЛицо.ПолучитьОбласть(1,1,ТД_КонтактноеЛицо.ВысотаТаблицы, ТД_КонтактноеЛицо.ШиринаТаблицы));
						КонецЕсли;
						
					КонецЦикла;
					
					СтруктураОбластей.КонтактноеЛицо.Параметры.КонтактноеЛицоПредставление = "";
					ДобавляемыеПустыеКолонкиКонтактныхЛиц = КолонокКонтактныхЛиц - (ТекущаяКолонкаКонтактныхЛиц % (КолонокКонтактныхЛиц + 1));
					ВыведеноПустыхКолонокКонтактныхЛиц = 0;
					Пока ВыведеноПустыхКолонокКонтактныхЛиц < ДобавляемыеПустыеКолонкиКонтактныхЛиц Цикл
						ТД_КонтактныеЛица.Присоединить(СтруктураОбластей.КонтактноеЛицо);
						ВыведеноПустыхКолонокКонтактныхЛиц = ВыведеноПустыхКолонокКонтактныхЛиц + 1;
					КонецЦикла;
					
					ТД_Контрагент.Вывести(ТД_КонтактныеЛица.ПолучитьОбласть(1,1,ТД_КонтактныеЛица.ВысотаТаблицы, ТД_КонтактныеЛица.ШиринаТаблицы));
					
				КонецЕсли;
				
				Если НастройкиСоставаКИ.ОтветственныйМенеджер Тогда
					
					ПоискПоОтветственному = Новый Структура("ФизЛицо", ВыборкаКонтрагенты.ФизЛицо);
					ВыборкаКИФизЛицо.Сбросить();
					
					Если ВыборкаКИФизЛицо.НайтиСледующий(ПоискПоОтветственному) Тогда
						СтруктураОбластей.Ответственный.Параметры.Заполнить(ВыборкаКИФизЛицо);
					Иначе
						СтруктураОбластей.Ответственный.Параметры.ТелефонОтветственного = "";
					КонецЕсли;
					
					СтруктураОбластей.Ответственный.Параметры.Заполнить(ВыборкаКонтрагенты);
					
					ТД_Контрагент.Вывести(СтруктураОбластей.Отступ);
					ТД_Контрагент.Вывести(СтруктураОбластей.Ответственный);
					
				КонецЕсли;
				
				Если НЕ ТабличныйДокумент.ПроверитьВывод(ТД_Контрагент) Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ТД_Контрагент);
				ТабличныйДокумент.Вывести(СтруктураОбластей.ОтступСПодчеркиванием);
				
			КонецЕсли;
			
		КонецЦикла;
	
	    ИнформацияОПартнере = Новый Структура("Досье, КонтактныеТелефоны");
		ИнформацияОПартнере.Досье = ТабличныйДокумент;
		
		СписокКонтактов = Новый СписокЗначений;
		ИнформацияОПартнере.КонтактныеТелефоны = СписокКонтактов;    
		Возврат Новый ХранилищеЗначения(ИнформацияОПартнере, Новый СжатиеДанных(9));
КонецФункции
Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта Из КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры
Функция ОбъектСуществуетВБазе(Ссылка)
	Попытка
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|ИСТИНА
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
		
	Возврат Не Запрос.Выполнить().Пустой();
	
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции
Функция ПроверкаПользователяМобильногоПриложения(Пользователь)
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	ДоступныеФункции = Новый Структура;
	ДоступныеФункции.Вставить("Касса", ПравоДоступа("Добавление",
		Метаданные.Документы.ПриходныйОрдер));
	ДоступныеФункции.Вставить("Доверенности", ПравоДоступа("Добавление",
		Метаданные.Документы.Доверенность));
	ДоступныеФункции.Вставить("ЗаказыКлиентов", ПравоДоступа("Добавление",
		Метаданные.Документы.ЗаказПокупателя));
	ДоступныеФункции.Вставить("ПлатежнаяКарта", ПравоДоступа("Добавление",
		Метаданные.Документы.ОперацияПоПлатежнымКартам));
	ДоступныеФункции.Вставить("Задания", ПравоДоступа("Добавление",
		Метаданные.Документы.ЗаказПокупателя));
	ДоступныеФункции.Вставить("ЗаявкиНаВозврат", ПравоДоступа("Добавление",
		Метаданные.Документы.ПриходнаяНакладная));
	ДоступныеФункции.Вставить("ПользовательМобильногоПриложения",
		ПравоДоступа("Изменение", Метаданные.ПланыОбмена.ОбменСМобильнымиПриложениями));
		
	ДоступныеФункции.Вставить("ИзменениеЦен", Истина);
	ДоступныеФункции.Вставить("ИзменениеКлиентов", Истина);
	
	Возврат ДоступныеФункции;
КонецФункции
Функция РеквизитыУзлаЗаполнениеПараметровКонвертации(КомпонентыОбмена, УзелОбмена)
	РеквизитыУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелОбмена,
	"НомерПринятого, НомерОтправленного, ПрефиксДляДанныхМобильногоУстройства, НастройкиОбмена");
	
	ПланОбменаМенеджер = ПланыОбмена[УзелОбмена.Метаданные().Имя];
	
	РеквизитыГлавногоУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПланОбменаМенеджер.ЭтотУзел(),
	"ВариантОтправкиPushУведомлений, НомерПриложенияGoogleCloud, Код, Пользователь");
	КомпонентыОбмена.ПараметрыКонвертации.Пользователь = РеквизитыГлавногоУзла.Пользователь;
	
	РеквизитыУзла.Вставить("КодГлавногоУзла", РеквизитыГлавногоУзла.Код);
	РеквизитыУзла.Вставить("ОтправляютсяPushУведомления",
		ЗначениеЗаполнено(РеквизитыГлавногоУзла.ВариантОтправкиPushУведомлений)
		И НЕ РеквизитыГлавногоУзла.ВариантОтправкиPushУведомлений = 0);
	РеквизитыУзла.Вставить("НомерПриложенияGoogleCloud", РеквизитыГлавногоУзла.НомерПриложенияGoogleCloud);  
	
	НастройкаКомпоновки = РеквизитыУзла.НастройкиОбмена.Получить();
	
	Если НастройкаКомпоновки = Неопределено Тогда
		Возврат РеквизитыУзла;
	КонецЕсли;      
	
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "РегистрироватьОплатыПКО");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		РеквизитыУзла.Вставить("РегистрироватьОплатыПКО", МассивЭлементовОтбора[0].ПравоеЗначение);   
		КомпонентыОбмена.ПараметрыКонвертации.РегистрироватьОплатыПКО = МассивЭлементовОтбора[0].ПравоеЗначение;
	КонецЕсли;
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "РегистрироватьОплатыПоДоверенностям");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		РеквизитыУзла.Вставить("РегистрироватьОплатыПоДоверенностям", МассивЭлементовОтбора[0].ПравоеЗначение);   
		КомпонентыОбмена.ПараметрыКонвертации.РегистрироватьОплатыПоДоверенностям = МассивЭлементовОтбора[0].ПравоеЗначение;
	КонецЕсли;
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "ЭквайринговыйТерминал");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		РеквизитыУзла.Вставить("ЭквайринговыйТерминал", МассивЭлементовОтбора[0].ПравоеЗначение);   
		КомпонентыОбмена.ПараметрыКонвертации.ЭквайринговыйТерминал = МассивЭлементовОтбора[0].ПравоеЗначение;
	КонецЕсли;
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "Касса");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		РеквизитыУзла.Вставить("Касса", МассивЭлементовОтбора[0].ПравоеЗначение);   
		КомпонентыОбмена.ПараметрыКонвертации.Касса = МассивЭлементовОтбора[0].ПравоеЗначение;
	КонецЕсли;
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "СтатьяДДСНаличные");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		РеквизитыУзла.Вставить("СтатьяДДСНаличные", МассивЭлементовОтбора[0].ПравоеЗначение);   
		КомпонентыОбмена.ПараметрыКонвертации.СтатьяДДСНаличные = МассивЭлементовОтбора[0].ПравоеЗначение;
	КонецЕсли;
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "СтатьяДДСЭквайринг");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		РеквизитыУзла.Вставить("СтатьяДДСЭквайринг", МассивЭлементовОтбора[0].ПравоеЗначение);   
		КомпонентыОбмена.ПараметрыКонвертации.СтатьяДДСЭквайринг = МассивЭлементовОтбора[0].ПравоеЗначение;
	КонецЕсли;
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "ПередаватьИзображенияТоваров");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		РеквизитыУзла.Вставить("ПередаватьИзображенияТоваров", МассивЭлементовОтбора[0].ПравоеЗначение);   
		КомпонентыОбмена.ПараметрыКонвертации.ПередаватьИзображенияТоваров = МассивЭлементовОтбора[0].ПравоеЗначение;
	КонецЕсли;
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "ОстатокКоличество");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		РеквизитыУзла.Вставить("ОстатокКоличество", МассивЭлементовОтбора[0].ПравоеЗначение);   
		КомпонентыОбмена.ПараметрыКонвертации.ОстатокКоличество = МассивЭлементовОтбора[0].ПравоеЗначение;
	КонецЕсли; 
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "ИспользоватьВесовыеХарактеристики");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		РеквизитыУзла.Вставить("ИспользоватьВесовыеХарактеристики", МассивЭлементовОтбора[0].ПравоеЗначение);   
		КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьВесовыеХарактеристики = МассивЭлементовОтбора[0].ПравоеЗначение;
	КонецЕсли; 
	МассивЭлементовОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкаКомпоновки.Отбор, "СостояниеЗаданиеТорговомуПредставителю");   
	Если МассивЭлементовОтбора.Количество() > 0 Тогда
		РеквизитыУзла.Вставить("СостояниеЗаданиеТорговомуПредставителю", МассивЭлементовОтбора[0].ПравоеЗначение);   
		КомпонентыОбмена.ПараметрыКонвертации.СостояниеЗаданиеТорговомуПредставителю = МассивЭлементовОтбора[0].ПравоеЗначение;
	КонецЕсли;
	
	Возврат РеквизитыУзла;
КонецФункции
Функция СтруктураДляКонвертацииНоменклатуры(Номенклатура, Характеристика)
	Если ЗначениеЗаполнено(Характеристика) Тогда
		ВыгружаемыйОбъект = Новый Структура("Номенклатура, Характеристика",Номенклатура, Характеристика);
		СтруктураСПравилом = Новый Структура("ИмяПКО,Значение", "Справочник_НоменклатураИзСтруктуры_Отправка", ВыгружаемыйОбъект);	
	Иначе
		ВыгружаемыйОбъект = Номенклатура;
		СтруктураСПравилом = Новый Структура("ИмяПКО,Значение", "Справочник_Номенклатура_Отправка", ВыгружаемыйОбъект);	
	КонецЕсли;
	                  
	Возврат СтруктураСПравилом;
КонецФункции
Функция ТипКолонкиСтруктура()
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Структура"));      
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Возврат ОписаниеТипов;
КонецФункции
Функция ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO)
	// ДанныеXDTO содержат только 1 свойство, 
	// значит выполняется загрузка значения свойства, а не самого объекта. 
	Возврат ДанныеXDTO.Количество() = 1;
КонецФункции

#КонецОбласти
#КонецОбласти
