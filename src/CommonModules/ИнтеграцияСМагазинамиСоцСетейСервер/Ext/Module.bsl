
Функция ПолучитьСоответствиеИзJSON(СтрокаJSON = "",ЭтоПутьКФайлу = ложь) Экспорт
	
	Если СтрокаJSON = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Если ЭтоПутьКФайлу Тогда
		ЧтениеJSON.ОткрытьФайл(СтрокаJSON);
	иначе
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	КонецЕсли;
	
	Соответствие = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	ЧтениеJSON.Закрыть();
	
	Возврат Соответствие;
	
КонецФункции

Функция ПолучитьЗначениеСоответствия(знач Соответствие, СтрокаКлюча) Экспорт
	
	Для Каждого СтрокаКлюч Из СтрРазделить(СтрокаКлюча, ".", Ложь) Цикл
		
		Соответствие = Соответствие.Получить(СтрокаКлюч);
		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

Функция ПолучитьJSONИзДанных(Структура) Экспорт
	
	Результат = "";
	
	Если Структура = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписатьJSON(ЗаписьJSON,Структура);
		
		Результат = ЗаписьJSON.Закрыть();
		
	Исключение
		
		ПроверитьУбратьNULL(Структура);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписатьJSON(ЗаписьJSON,Структура);
		
		Результат = ЗаписьJSON.Закрыть();
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьUnixTSИзДаты(ДатаВремя) Экспорт
	Возврат УниверсальноеВремя(ДатаВремя) - '19700101';
КонецФункции

Функция ПолучитьДатуИзUnixTS(UnixTime) Экспорт
	Возврат МестноеВремя('19700101' + UnixTime);
КонецФункции

Функция ПодготовитьHTTPЗапрос() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Сервер" , Неопределено);
	Результат.Вставить("Порт" , Неопределено);
	Результат.Вставить("Пользователь" , Неопределено);
	Результат.Вставить("Пароль" , Неопределено);
	Результат.Вставить("Прокси" , Неопределено);
	Результат.Вставить("Таймаут" , 600);
	Результат.Вставить("ЗащищенноеСоединение" , Новый ЗащищенноеСоединениеOpenSSL);
	Результат.Вставить("HTTPСоединение" , Неопределено);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	Результат.Вставить("Заголовки" , Заголовки);
	
	Результат.Вставить("КодСостояния", 0);
	Результат.Вставить("ТелоОтвета", "");
	Результат.Вставить("ПрочитатьJSON", Истина);
	Результат.Вставить("ПрочтенУспешноJSON" , Ложь);
	Результат.Вставить("АдресРесурса" , Неопределено);
	Результат.Вставить("ИмяМетода" , "get");
	Результат.Вставить("ТелоЗапроса" , ""); 
	Результат.Вставить("ОшибкаHTTPЗапрос" , ""); 
	Результат.Вставить("ТипТелоЗапроса" , 1); //1 - Текст, 2 - ДД , 3 - Имя файла
	Результат.Вставить("ТипТелоОтвета", 1); //1 - Текст, 2 - ДД , 3 - Имя файла
	
	Результат.Вставить("ОбъектМетаданныхДляЖР" , "");
	Результат.Вставить("ДанныеДляЖР" , "");
	Результат.Вставить("СобытиеДляЖР" , "");
	
	Результат.Вставить("ТекстПроверкиДляПовторенияЗапроса" , "");
	Результат.Вставить("ИнтервалОжиданияПередПовторением" , 1); // 1 секунда
	Результат.Вставить("СчетчикВызовов" , Новый Соответствие); // 
	Результат.Вставить("ОграничениеНаКоличествоВызововС" , 0); // 
	Результат.Вставить("ОбщийКэш" , Новый Соответствие); // 
	
	Возврат Результат;
	
КонецФункции // ПодготовитьHTTPЗапрос

Процедура ДобавитьЗаписьЖурналаРегистрацииОшибкаHTTPЗапроса(СтруктураHTTPЗапрос,ЭтоОшибка = Истина) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураHTTPЗапрос.СобытиеДляЖР) Тогда
		
		ЗаписьЖурналаРегистрации(СтруктураHTTPЗапрос.СобытиеДляЖР
		,?(ЭтоОшибка,УровеньЖурналаРегистрации.Ошибка,УровеньЖурналаРегистрации.Предупреждение)
		,СтруктураHTTPЗапрос.ОбъектМетаданныхДляЖР
		,СтруктураHTTPЗапрос.ДанныеДляЖР
		,ЗначениеВСтрокуВнутр(СтруктураHTTPЗапрос)
		,РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЗаписьЖурналаРегистрацииОшибкаHTTPЗапроса

Функция ЭтотЗапросУспешный(ОтветHTTP) Экспорт
	
	МассивУспешныхОтветов = Новый Массив;
	МассивУспешныхОтветов.Добавить(200);
	МассивУспешныхОтветов.Добавить(201);
	
	Результат = ОтветHTTP.КодСостояния >=200 И ОтветHTTP.КодСостояния < 300;
	
	Возврат Результат;
	
КонецФункции // ЭтотЗапросУспешный

Функция ВыполнитьHTTPЗапрос(СтруктураHTTPЗапрос) Экспорт
	
	ОтветHTTP = Неопределено;
	
	Попытка
		
		HTTPЗапрос = Новый HTTPЗапрос;
		
		Для Каждого КлючЗначение Из СтруктураHTTPЗапрос.Заголовки Цикл
			HTTPЗапрос.Заголовки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		HTTPЗапрос.АдресРесурса = СтруктураHTTPЗапрос.АдресРесурса; 
		
		Если СтруктураHTTPЗапрос.HTTPСоединение = Неопределено Тогда
			
			HTTPСоединение = Новый HTTPСоединение(СтруктураHTTPЗапрос.Сервер
			,СтруктураHTTPЗапрос.Порт
			,СтруктураHTTPЗапрос.Пользователь
			,СтруктураHTTPЗапрос.Пароль
			,СтруктураHTTPЗапрос.Прокси
			,СтруктураHTTPЗапрос.Таймаут
			,СтруктураHTTPЗапрос.ЗащищенноеСоединение);
			
			СтруктураHTTPЗапрос.Вставить("HTTPСоединение" , HTTPСоединение);
			
		КонецЕсли;
		
		Если СтруктураHTTPЗапрос.ТипТелоЗапроса = 1 Тогда
			HTTPЗапрос.УстановитьТелоИзСтроки(СтруктураHTTPЗапрос.ТелоЗапроса , КодировкаТекста.UTF8);
		ИначеЕсли СтруктураHTTPЗапрос.ТипТелоЗапроса = 2 Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(СтруктураHTTPЗапрос.ТелоЗапроса);
		ИначеЕсли СтруктураHTTPЗапрос.ТипТелоЗапроса = 3 Тогда
			HTTPЗапрос.УстановитьИмяФайлаТела(СтруктураHTTPЗапрос.ТелоЗапроса);
		КонецЕсли; 
		
		СтруктураHTTPЗапрос.СчетчикВызовов.Вставить(ТекущаяУниверсальнаяДатаВМиллисекундах(),"");
		
		Если НРег(СтруктураHTTPЗапрос.ИмяМетода) = "get" Тогда
			ОтветHTTP = СтруктураHTTPЗапрос.HTTPСоединение.Получить(HTTPЗапрос);
		ИначеЕсли НРег(СтруктураHTTPЗапрос.ИмяМетода) = "post" Тогда
			ОтветHTTP = СтруктураHTTPЗапрос.HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли НРег(СтруктураHTTPЗапрос.ИмяМетода) = "put" Тогда
			ОтветHTTP = СтруктураHTTPЗапрос.HTTPСоединение.Записать(HTTPЗапрос);
		ИначеЕсли НРег(СтруктураHTTPЗапрос.ИмяМетода) = "delete" Тогда
			ОтветHTTP = СтруктураHTTPЗапрос.HTTPСоединение.Удалить(HTTPЗапрос);
		КонецЕсли; 
		
	Исключение
		
		СтруктураHTTPЗапрос.Вставить("ОшибкаHTTPЗапрос",ОписаниеОшибки());
		
		ДобавитьЗаписьЖурналаРегистрацииОшибкаHTTPЗапроса(СтруктураHTTPЗапрос,Истина);
		
	КонецПопытки;
	
	Возврат ОтветHTTP;
	
КонецФункции

Функция ВыполнитьHTTPЗапросОбработатьJSON(СтруктураHTTPЗапрос) Экспорт
	
	Результат = Неопределено; 
	
	Если СтруктураHTTPЗапрос.ОграничениеНаКоличествоВызововС <> 0 И
		СтруктураHTTPЗапрос.СчетчикВызовов.Количество() >= СтруктураHTTPЗапрос.ОграничениеНаКоличествоВызововС Тогда 
		
		ДатаВМиллисекундах = ТекущаяУниверсальнаяДатаВМиллисекундах() - 100;
		
		МассивДляУдаления = Новый Массив;
		Для Каждого КлючЗначение Из СтруктураHTTPЗапрос.СчетчикВызовов Цикл
			Если КлючЗначение.Ключ <= ДатаВМиллисекундах Тогда
				МассивДляУдаления.Добавить(КлючЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого КлючДляУдаления Из МассивДляУдаления Цикл
			СтруктураHTTPЗапрос.СчетчикВызовов.Удалить(КлючДляУдаления);
		КонецЦикла;
		
		Если СтруктураHTTPЗапрос.ОграничениеНаКоличествоВызововС <> 0 И
			СтруктураHTTPЗапрос.СчетчикВызовов.Количество() >= СтруктураHTTPЗапрос.ОграничениеНаКоличествоВызововС Тогда 
			Пауза(СтруктураHTTPЗапрос.ИнтервалОжиданияПередПовторением);
			
			СтруктураHTTPЗапрос.СчетчикВызовов.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	ОтветHTTP = ВыполнитьHTTPЗапрос(СтруктураHTTPЗапрос);
	
	Если ОтветHTTP <> Неопределено Тогда
		
		ЭтоОшибка = Истина;
		
		Если СтруктураHTTPЗапрос.ТипТелоОтвета = 1 Тогда
			СтруктураHTTPЗапрос.Вставить("ТелоОтвета" , ОтветHTTP.ПолучитьТелоКакСтроку());
			
			ПроверитьПовторитьОперацию(ОтветHTTP, СтруктураHTTPЗапрос);
			
		ИначеЕсли СтруктураHTTPЗапрос.ТипТелоОтвета = 2 Тогда
			СтруктураHTTPЗапрос.Вставить("ТелоОтвета" , ОтветHTTP.ПолучитьТелоКакДвоичныеДанные());
		ИначеЕсли СтруктураHTTPЗапрос.ТипТелоОтвета = 3 Тогда
			СтруктураHTTPЗапрос.Вставить("ТелоОтвета" , ОтветHTTP.ПолучитьИмяФайлаТела());
		КонецЕсли; 
		
		СтруктураHTTPЗапрос.Вставить("КодСостояния" , ОтветHTTP.КодСостояния);
		
		Если ЭтотЗапросУспешный(ОтветHTTP) Тогда
			
			ЭтоОшибка = Ложь;
			
			Результат = СтруктураHTTPЗапрос.ТелоОтвета;
			
			Если СтруктураHTTPЗапрос.ПрочитатьJSON Тогда
				Попытка
					Результат = ПолучитьСоответствиеИзJSON(Результат);
					СтруктураHTTPЗапрос.ПрочтенУспешноJSON = Истина;
				Исключение
					Результат = Неопределено;
				КонецПопытки;
			КонецЕсли;
			
		Иначе
			
			ДобавитьЗаписьЖурналаРегистрацииОшибкаHTTPЗапроса(СтруктураHTTPЗапрос,Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьПовторитьОперацию(ОтветHTTP, СтруктураHTTPЗапрос)
	
	Если НЕ ПустаяСтрока(СтруктураHTTPЗапрос.ТекстПроверкиДляПовторенияЗапроса)
		И СтрНайти(СтруктураHTTPЗапрос.ТелоОтвета, СтруктураHTTPЗапрос.ТекстПроверкиДляПовторенияЗапроса) <> 0 Тогда
		
		Пауза(СтруктураHTTPЗапрос.ИнтервалОжиданияПередПовторением);
		
		ОтветHTTP = ВыполнитьHTTPЗапрос(СтруктураHTTPЗапрос);
		
		СтруктураHTTPЗапрос.Вставить("ТелоОтвета" , ОтветHTTP.ПолучитьТелоКакСтроку());
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтруктураHTTPЗапрос.ТекстПроверкиДляПовторенияЗапроса)
		И СтрНайти(СтруктураHTTPЗапрос.ТелоОтвета, СтруктураHTTPЗапрос.ТекстПроверкиДляПовторенияЗапроса) <> 0 Тогда
		
		Пауза(СтруктураHTTPЗапрос.ИнтервалОжиданияПередПовторением + СтруктураHTTPЗапрос.ИнтервалОжиданияПередПовторением);
		
		ОтветHTTP = ВыполнитьHTTPЗапрос(СтруктураHTTPЗапрос);
		
		СтруктураHTTPЗапрос.Вставить("ТелоОтвета" , ОтветHTTP.ПолучитьТелоКакСтроку());
		
	КонецЕсли;

КонецПроцедуры // ВыполнитьОбработатьЗапрос

Процедура ПроверитьУбратьNULL(ПроизвольноеЗначение)
	
	Если ТипЗнч(ПроизвольноеЗначение) = Тип("Массив") Тогда
		Для Каждого Стр Из ПроизвольноеЗначение Цикл
			ПроверитьУбратьNULL(Стр);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ПроизвольноеЗначение) = Тип("Структура") Или ТипЗнч(ПроизвольноеЗначение) = Тип("Соответствие")Тогда
		Для Каждого КлючЗначение Из ПроизвольноеЗначение Цикл
			ТекЗнач = КлючЗначение.Значение;
			ПроверитьУбратьNULL(ТекЗнач);
			ПроизвольноеЗначение.Вставить(КлючЗначение.Ключ,ТекЗнач);
		КонецЦикла;
	Иначе
		
		Если ПроизвольноеЗначение = null Тогда
			ПроизвольноеЗначение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСоответствиеКукиИзЗаголовков(Заголовки) Экспорт
	
	Соответствие = Новый Соответствие;
	
	СтрокаЗначений = ПолучитьЗначениеЗаголовка(Заголовки,"Cookie");
	
	Если СтрокаЗначений <> Неопределено Тогда
		
		МассивПар = СтрРазделить(СтрокаЗначений,";",Ложь);
		
		Для Каждого СтрПара Из МассивПар Цикл
			
			СтрПара = СокрЛП(СтрПара);
			
			НомерВхождения = СтрНайти(СтрПара,"=",НаправлениеПоиска.СНачала);
			
			Если НомерВхождения = 0 Тогда
				Соответствие.Вставить(СтрПара);
			Иначе
				ИмяПараметра= Сред(СтрПара,1,НомерВхождения-1);
				ЗначениеПараметра = Прав(СтрПара,СтрДлина(СтрПара) - НомерВхождения);
				
				Соответствие.Вставить(ИмяПараметра,ЗначениеПараметра);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Соответствие;
	
КонецФункции  

Функция ПолучитьЗначениеЗаголовка(Заголовки,Ключ) Экспорт
	
	Результат = Заголовки.Получить(Ключ);
	Если Результат = Неопределено Тогда
		Результат = Заголовки.Получить(НРег(Ключ));
		Если Результат = Неопределено Тогда
			Для Каждого КлючЗначение Из Заголовки Цикл	
				Если НРег(КлючЗначение.Ключ) = НРег(Ключ) Тогда
					Результат = КлючЗначение.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьНаТипЗначение(знач ПроверяемоеЗначение,ТипЗначения,ЗначениеПоУмолчанию) Экспорт
	
	Результат = ЗначениеПоУмолчанию;
	
	Если ПроверяемоеЗначение <> Неопределено Тогда
		Если ТипЗнч(ПроверяемоеЗначение) = ТипЗначения Тогда
			Результат = ПроверяемоеЗначение; 
		Иначе
			Если ТипЗначения = Тип("Число") Тогда
				Попытка
					ЧислоСтрокой = СтрЗаменить(ПроверяемоеЗначение,",",".");
					ЧислоСтрокой = СтрЗаменить(ПроверяемоеЗначение," ","");
					Результат = Число(ЧислоСтрокой);
				Исключение
				КонецПопытки;
			ИначеЕсли ТипЗначения = Тип("Булево") Тогда
				
				Если НРег(ПроверяемоеЗначение = "on") Тогда
					Результат = Истина;
				Иначе
					Попытка
						Результат = Булево(ПроверяемоеЗначение);
					Исключение
					КонецПопытки;
				КонецЕсли;
			ИначеЕсли ТипЗначения = Тип("Массив") И ТипЗнч(ПроверяемоеЗначение) = Тип("Строка") Тогда
				Результат = СтрРазделить(ПроверяемоеЗначение,",",Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьХешСтроки(знач СтрокаДанных,ПреобразоватьВHEX = Истина,ПеревестиВНижнийРегистр = Истина) Экспорт
	
	Если ТипЗнч(СтрокаДанных) <> Тип("Строка") Тогда 
		СтрокаДанных = "";
	КонецЕсли;
	
	Возврат ПолучитьХешФайла(ПолучитьДвоичныеДанныеИзСтроки(СтрокаДанных,КодировкаТекста.UTF8),ПреобразоватьВHEX,ПеревестиВНижнийРегистр);
	
КонецФункции

Функция ПолучитьХешФайла(ДвоичныеДанные,ПреобразоватьВHEX = Истина,ПеревестиВНижнийРегистр = Истина) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(ДвоичныеДанные);
	
	ХешСумма = ХешированиеДанных.ХешСумма;
	
	Если ПреобразоватьВHEX Тогда
		ХешСумма = ПолучитьHexСтрокуИзДвоичныхДанных(ХешСумма);
	КонецЕсли;
	
	Если ПеревестиВНижнийРегистр Тогда
		ХешСумма = НРег(ХешСумма);
	КонецЕсли;
	
	Возврат ХешСумма;
	
КонецФункции

// Останавливает выполнение кода на заданное время.
//
// Параметры:
//Секунд - Число(15,3) - время ожидания в секундах. указывать значение меньше 0.001 не имеет смысла
//
Процедура Пауза(КоличествоСекунд = 5) Экспорт
	
	Если ТипЗнч(КоличествоСекунд) <> Тип("Число") Или КоличествоСекунд <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФоновоеЗадание = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
	
	Если ФоновоеЗадание = Неопределено Тогда
		Параметры = Новый Массив(1);
		Параметры[0] = КоличествоСекунд;
		ФоновоеЗадание = РасширенияКонфигурации.ВыполнитьФоновоеЗаданиеБезРасширений("ИнтеграцияСМагазинамиСоцСетейСервер.Пауза",Параметры,,"ИнтеграцияСМагазинамиСоцСетейСервер_Пауза");
		ФоновоеЗадание.ОжидатьЗавершенияВыполнения(КоличествоСекунд); 
		Параметры = Неопределено;
	Иначе
		ФоновоеЗадание.ОжидатьЗавершенияВыполнения(КоличествоСекунд);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбменВФоне(СсылкаНаУзелОбмена) Экспорт
	ПланыОбмена.ИнтеграцияСМагазинамиСоцСетей.ВыполнитьОбменИнтерактивно(СсылкаНаУзелОбмена, Ложь, Истина);
КонецПроцедуры

Функция ЭтоКорректныйEmail(знач Адрес) Экспорт
	
	///////////////////////
	//Используется решение https://infostart.ru/public/192489/
	//////////////////////
	
	//Адрес = "test@me@gmail.narod.am";
	
	ЛатинскиеБуквы = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	Цифры = "0123456789";
	
	//ищем крайний справа символ @ для правильного выделения локальной и доменной части
	ИндексСобаки = Найти(Адрес,"@");
	
	//1. строка адреса вообще не содержит разделителя
	Если ИндексСобаки = 0 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	УрезаемаяСтрока = Сред(Адрес, ИндексСобаки+1);
	
	Пока Найти(УрезаемаяСтрока,"@") > 0 Цикл
		
		ИндексСобаки= ИндексСобаки + Найти(УрезаемаяСтрока,"@");
		УрезаемаяСтрока = Сред(УрезаемаяСтрока, ИндексСобаки+1);
		
	КонецЦикла;
	
	ДоменнаяЧасть= Сред(Адрес, ИндексСобаки+1);
	ЛокальнаяЧасть = Лев(Адрес, ИндексСобаки-1);
	
	//2. Проверяем длину локальной части
	Если СтрДлина(ЛокальнаяЧасть) < 1 ИЛИ СтрДлина(ЛокальнаяЧасть) > 64 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	//3. Проверяем длину доменной части
	Если СтрДлина(ДоменнаяЧасть) < 1 ИЛИ СтрДлина(ДоменнаяЧасть) > 255 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	//4. Проверяем что локальная части не начинается и не заканчивается на "."
	Если Лев(ЛокальнаяЧасть, 1) = "." ИЛИ Прав(ЛокальнаяЧасть, 1) = "." Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	//5. Локальная части не содержит 2 или более "." подряд
	Если Найти(ЛокальнаяЧасть, "..") > 0 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	//Проверка доменной части
	//6. Доменная часть не начинается с точки
	Если Лев(ДоменнаяЧасть, 1) = "." Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	//7. Доменная часть не содержит 2 или более "." подряд
	Если Найти(ДоменнаяЧасть, "..") > 0 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	//8. Доменная часть не заканчивается на "."
	Если Прав(ДоменнаяЧасть, 1) = "." Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	//9. Проверка частей доменной части
	//каждая часть начинается с буквы и заканчивается буквой или цифрой
	//каждая часть длиной не более 63 символов
	//минимум 2 части
	ИдентификаторыДоменнойЧасти = СтрРазделить(ДоменнаяЧасть, ".",Ложь);
	
	Если ИдентификаторыДоменнойЧасти.Количество() < 2 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Для Каждого ИдентификаторДомена ИЗ ИдентификаторыДоменнойЧасти Цикл
		
		Если СтрДлина(ИдентификаторДомена) > 63 Тогда
			Возврат ЛОЖЬ;
		КонецЕсли;
		
		Если Найти(ЛатинскиеБуквы, Лев(ИдентификаторДомена,1)) = 0
			
			//для доменов, нарушающих RFC 1035 п.2.3.1, например @1c.ru :)
			И Найти(Цифры, Лев(ИдентификаторДомена,1)) = 0
			
			Тогда
			Возврат ЛОЖЬ;
		КонецЕсли;
		
		Если Найти(ЛатинскиеБуквы, Прав(ИдентификаторДомена,1)) = 0 И Найти(Цифры, Прав(ИдентификаторДомена,1)) = 0 Тогда
			Возврат ЛОЖЬ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИСТИНА;
	
КонецФункции

