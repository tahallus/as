
#Область ПрограммныйИнтерфейс

#Область СобытияФормы

// Обработчик для события формы ПриСозданииНаСервере.
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - Форма объекта-владельца, предназначенная для вывода контактной информации.
//  Объект         - Произвольный - Объект-владелец контактной информации.
//  ШиринаПоляВида - Число - Ширина поля вида контактной информации по умолчанию.
//
Процедура ПриСозданииПриЧтенииНаСервере(Форма, Объект = Неопределено, ШиринаПоляВида = 8) Экспорт
	
	Если Объект = Неопределено Тогда
		Объект = Форма.Объект;
	КонецЕсли;
	
	МетаданныеВладельца = Объект.Ссылка.Метаданные();
	
	// Определение вспомогательной информации
	ПолноеИмяОбъектаМетаданных = МетаданныеВладельца.ПолноеИмя();
	ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации[СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "")];
	ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти = 
		МетаданныеВладельца.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти(
			"ИдентификаторСтрокиТабличнойЧасти") <> Неопределено;
	СодержитДействуетС = 
		УправлениеКонтактнойИнформациейСлужебныйПовтИсп.КонтактнаяИнформацияОбъектаСодержитКолонкуДействуетС(
			Объект.Ссылка);	
			
	// Создание таблиц-реквизитов формы, если отсутствуют
	ДобавитьРеквизитыФормыКонтактнойИнформации(Форма, 
		ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти,
		СодержитДействуетС);
	
	// Кэширование информации о доступных видах контактной информации в созданной таблице
	ПрочитатьСвойстваВидовКонтактнойИнформации(Форма, 
		ГруппаВидовКИ, 
		ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти,
		СодержитДействуетС);
	
	// Чтение имеющейся контактной информации объекта в созданную таблицу для отображения
	ЗаполнитьТаблицуКонтактнойИнформации(Форма, Объект);
	
	Если НЕ ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
		// Однократная подготовка элементов и команд формы
		ИнициализироватьФорму(Форма);
	КонецЕсли;
	
	// Пересоздание элементов формы по информации из таблицы для отображения
	ОбновитьЭлементыКонтактнойИнформации(Форма, ШиринаПоляВида);
	
КонецПроцедуры

// Обработчик для события формы ПередЗаписьюНаСервере.
//
// Параметры:
//    Форма         - ФормаКлиентскогоПриложения - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    ТекущийОбъект - Произвольный - Объект-владелец контактной информации.
//
Процедура ПередЗаписьюНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ТекущийОбъект.КонтактнаяИнформация.Очистить();
	
	Для Каждого ДанныеКИ Из Форма.КонтактнаяИнформация Цикл
		
		Если Форма.ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
			
			Если Форма.СодержитДействуетС Тогда
				УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ТекущийОбъект, 
					ДанныеКИ.Значение, 
					ДанныеКИ.Вид, 
					ДанныеКИ.Тип, 
					ДанныеКИ.ИдентификаторСтрокиТабличнойЧасти,
					ДанныеКИ.ДействуетС);
			Иначе	
				УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ТекущийОбъект, 
					ДанныеКИ.Значение, 
					ДанныеКИ.Вид, 
					ДанныеКИ.Тип, 
					ДанныеКИ.ИдентификаторСтрокиТабличнойЧасти);
			КонецЕсли;	
			
			Продолжить;
			
		КонецЕсли;
		
		Если Форма.СодержитДействуетС Тогда
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ТекущийОбъект, 
				ДанныеКИ.Значение, 
				ДанныеКИ.Вид, 
				ДанныеКИ.Тип,
				,
				ДанныеКИ.ДействуетС); 
		Иначе
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ТекущийОбъект, 
				ДанныеКИ.Значение, 
				ДанныеКИ.Вид, 
				ДанныеКИ.Тип);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик для события формы ОбработкаПроверкиЗаполненияНаСервере.
//
// Параметры:
//    Форма  - ФормаКлиентскогоПриложения - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Отказ  - Булево - Если Истина, то во время проверки были обнаружены ошибки.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ) Экспорт
	
	ПараметрыСеанса.ИнтерактивнаяПроверкаЗаполненияКонтактнойИнформации = Истина;
	
	ЕстьОшибки = Ложь;
	Отбор = Новый Структура("Вид");
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформация Цикл
		
		Отбор.Вид = СтрокаТаблицы.Вид;
		НайденныеСтроки = Форма.СвойстваВидовКонтактнойИнформации.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СвойстваВида = НайденныеСтроки[0];
		Индекс = Форма.КонтактнаяИнформация.Индекс(СтрокаТаблицы);
		ИмяРеквизита = "КонтактнаяИнформация["+Индекс+"].Представление";
		
		Если СвойстваВида.ОбязательноеЗаполнение И ПустаяСтрока(СтрокаТаблицы.Представление)
			И Не ЕстьДругиеЗаполненныеСтрокиВидаКИ(Форма, СтрокаТаблицы, СтрокаТаблицы.Вид) Тогда
			// И нет других строк с данными для видов КИ с множественными значениями.
			
			ЕстьОшибки = Истина;
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Вид контактной информации ""%1"" не заполнен.'"), СвойстваВида.ПредставлениеВида),,, ИмяРеквизита);
			
		ИначеЕсли НЕ ПустаяСтрока(СтрокаТаблицы.Представление) И СвойстваВида.ПроверятьКорректность Тогда
			
			РезультатПроверки = УправлениеКонтактнойИнформацией.ПроверитьКонтактнуюИнформацию(СтрокаТаблицы.Представление, СтрокаТаблицы.Значение, СтрокаТаблицы.Вид, СтрокаТаблицы.Тип, ИмяРеквизита);
			ЕстьОшибки = РезультатПроверки <> 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура обновляет элементы формы в соответствии с данными в реквизите-таблице
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - форма-владелец контактной информации
//
Процедура ОбновитьЭлементыКонтактнойИнформации(Форма, ШиринаПоляВида = 8) Экспорт
	
	КомандыДобавления = Форма.Элементы.Найти("ДобавлениеКонтактнойИнформации");
	Если КомандыДобавления <> Неопределено Тогда
		КомандыДобавления.Видимость = КонтактнаяИнформацияУНФКлиентСервер.СписокВидовДляДобавленияКонтактнойИнформации(Форма).Количество() > 0;
	КонецЕсли;
	
	Если Форма.ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
		ИдентификаторыСтрокТабличнойЧасти = Форма.ИдентификаторыСтрокТабличнойЧасти.Выгрузить().ВыгрузитьКолонку("Значение");
	Иначе
		ИдентификаторыСтрокТабличнойЧасти = Новый Массив;
		ИдентификаторыСтрокТабличнойЧасти.Добавить(0);
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	УдаляемыеЭлементы = Новый Массив;
	
	Если Форма.ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
		Для каждого ИдентификаторСтроки Из ИдентификаторыСтрокТабличнойЧасти Цикл
			ГруппаЗначения = Элементы.Найти("КонтактнаяИнформация" + ИдентификаторСтроки + "ЗначенияКонтактнойИнформации");
			Если ГруппаЗначения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Для каждого Элемент Из ГруппаЗначения.ПодчиненныеЭлементы Цикл
				УдаляемыеЭлементы.Добавить(Элемент);
			КонецЦикла;
		КонецЦикла;
		ИнициализироватьФорму(Форма);
		
		Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
			Элементы.Удалить(УдаляемыйЭлемент);
		КонецЦикла;
	Иначе
		Для каждого Элемент Из Элементы.ЗначенияКонтактнойИнформации.ПодчиненныеЭлементы Цикл
			УдаляемыеЭлементы.Добавить(Элемент);
		КонецЦикла;
		
		Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
			Элементы.Удалить(УдаляемыйЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	ШиринаПоляКомментария = 11;
	
	Отбор = Новый Структура("Вид");
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрокТабличнойЧасти Цикл
		
		Если Форма.ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
			СтрокиКонтактнойИнформации = Форма.КонтактнаяИнформация.НайтиСтроки(Новый Структура("ИдентификаторСтрокиТабличнойЧасти", ИдентификаторСтроки));
			Если СтрокиКонтактнойИнформации.Количество() = 0 Тогда
				СтрокиКонтактнойИнформации = НоваяПорцияВсегдаВыводимыеВидыКонтактнойИнформации(Форма, Форма.Объект, ИдентификаторСтроки);
			КонецЕсли;
			Родитель = Элементы["КонтактнаяИнформация" + ИдентификаторСтроки + "ЗначенияКонтактнойИнформации"];
		Иначе
			СтрокиКонтактнойИнформации = Форма.КонтактнаяИнформация;
			Родитель = Элементы.ЗначенияКонтактнойИнформации
		КонецЕсли;
		
		Для Каждого ДанныеКИ Из СтрокиКонтактнойИнформации Цикл
			
			Если Форма.СодержитДействуетС И ДанныеКИ.ЭтоИсторическаяКонтактнаяИнформация Тогда
				Продолжить;
			КонецЕсли;
			
			ИндексКИ = Форма.КонтактнаяИнформация.Индекс(ДанныеКИ);
			Отбор.Вид = ДанныеКИ.Вид;
			НайденныеСтроки = Форма.СвойстваВидовКонтактнойИнформации.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СвойстваВида = НайденныеСтроки[0];
			
			ГруппаЗначениеКИ = Элементы.Добавить("КИ_" + ИндексКИ, Тип("ГруппаФормы"), Родитель);
			ГруппаЗначениеКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЗначениеКИ.Заголовок = ДанныеКИ.Вид;
			ГруппаЗначениеКИ.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаЗначениеКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаЗначениеКИ.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
			ГруппаЗначениеКИ.ОтображатьЗаголовок = Ложь;
			ГруппаЗначениеКИ.Ширина = 35;
			
			ДекорацияДействие = Элементы.Добавить("ДействиеКИ_" + ИндексКИ, Тип("ДекорацияФормы"), ГруппаЗначениеКИ);
			ДекорацияДействие.Вид = ВидДекорацииФормы.Картинка;
			ДекорацияДействие.Картинка = КартинкаДействияПоТипуКонтактнойИнформации(ДанныеКИ.Тип);
			ДекорацияДействие.РазмерКартинки = РазмерКартинки.АвтоРазмер;
			ДекорацияДействие.Гиперссылка = Истина;
			ДекорацияДействие.Ширина = 2;
			ДекорацияДействие.Высота = 1;
			ДекорацияДействие.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			Если СвойстваВида.ВидПоляДругое = "МногострочноеШирокое" Тогда
				ДекорацияДействие.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
			КонецЕсли;
			ДекорацияДействие.УстановитьДействие("Нажатие", "Подключаемый_ДействиеКИНажатие");
			
			ПолеВид = Элементы.Добавить("ВидКИ_" + ИндексКИ, Тип("ПолеФормы"), ГруппаЗначениеКИ);
			ПолеВид.Вид = ВидПоляФормы.ПолеНадписи;
			ПолеВид.ПутьКДанным = "КонтактнаяИнформация[" + ИндексКИ + "].Вид";
			ПолеВид.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеВид.Ширина = ШиринаПоляВида;
			ПолеВид.РастягиватьПоГоризонтали = Ложь;
			
			ДоступноРедактированиеВДиалоге = ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(ДанныеКИ.Тип);
			
			ПолеПредставление = Элементы.Добавить("ПредставлениеКИ_" + ИндексКИ, Тип("ПолеФормы"), ГруппаЗначениеКИ);
			ПолеПредставление.Вид = ВидПоляФормы.ПолеВвода;
			ПолеПредставление.ПутьКДанным = "КонтактнаяИнформация[" + ИндексКИ + "].Представление";
			ПолеПредставление.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеПредставление.КнопкаВыбора = ДоступноРедактированиеВДиалоге;
			ПолеПредставление.АвтоОтметкаНезаполненного = СвойстваВида.ОбязательноеЗаполнение;
			ПолеПредставление.ШиринаВыпадающегоСписка = 40;
			ПолеПредставление.УстановитьДействие("ПриИзменении", "Подключаемый_ПредставлениеКИПриИзменении");
			ПолеПредставление.УстановитьДействие("Очистка", "Подключаемый_ПредставлениеКИОчистка");
			
			Если СвойстваВида.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
				Если СвойстваВида.ВидПоляДругое = "МногострочноеШирокое" Тогда
					ПолеПредставление.МногострочныйРежим = Истина;
					ПолеПредставление.АвтоМаксимальнаяВысота = Ложь;
					ПолеПредставление.МаксимальнаяВысота = 2;
				КонецЕсли;
				Если СвойстваВида.ВидПоляДругое = "ОднострочноеУзкое" Тогда
					ПолеПредставление.АвтоМаксимальнаяШирина = Ложь;
					ПолеПредставление.МаксимальнаяШирина = 27;
				КонецЕсли;
			КонецЕсли;
			Если ДанныеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				ПолеПредставление.УстановитьДействие("Автоподбор", "Подключаемый_КонтактнаяИнформацияАвтоподбор");
				ПолеПредставление.УстановитьДействие("ОбработкаВыбора", "Подключаемый_КонтактнаяИнформацияОбработкаВыбора");
			КонецЕсли;
			Если СвойстваВида.ВидРедактирования = "Диалог" И ДанныеКИ.Тип <> Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
				ПолеПредставление.РедактированиеТекста = Ложь;
				ПолеПредставление.ЦветФона = ЦветаСтиля.КонтактнаяИнформацияСРедактированиемВДиалогеЦвет;
			КонецЕсли;
			Если ДоступноРедактированиеВДиалоге Тогда
				ПолеПредставление.УстановитьДействие("НачалоВыбора", "Подключаемый_ПредставлениеКИНачалоВыбора");
			КонецЕсли;
			
			// Команды контекстного меню: показать адрес в Яндекс.Карты или GoogleMaps
			Если ДанныеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				
				ДобавитьКомандуКонтекстногоМеню(Форма,
					"КонтекстноеМенюКартаЯндекс_" + ИндексКИ,
					БиблиотекаКартинок.ЯндексКарты,
					НСтр("ru = 'Адрес на Яндекс.Картах'"),
					НСтр("ru = 'Показывает адрес на картах Яндекс.Карты'"),
					ПолеПредставление
				);
				ДобавитьКомандуКонтекстногоМеню(Форма,
					"КонтекстноеМенюКартаGoogle_" + ИндексКИ,
					БиблиотекаКартинок.GoogleMaps,
					НСтр("ru = 'Адрес на Google Maps'"),
					НСтр("ru = 'Показывает адрес на карте Google Maps'"),
					ПолеПредставление
				);
				
			КонецЕсли;
			
			Если ДляТипаКонтактнойИнформацииДоступенВводКомментария(ДанныеКИ.Тип) Тогда
				
				ПолеПредставление.АвтоМаксимальнаяШирина = Ложь;
				ПолеПредставление.МаксимальнаяШирина = 27;
				
				ПолеКомментарий = Элементы.Добавить("КомментарийКИ_" + ИндексКИ, Тип("ПолеФормы"), ГруппаЗначениеКИ);
				ПолеКомментарий.Вид = ВидПоляФормы.ПолеВвода;
				ПолеКомментарий.ПутьКДанным = "КонтактнаяИнформация[" + ИндексКИ + "].Комментарий";
				ПолеКомментарий.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				ПолеКомментарий.ПропускатьПриВводе = Истина;
				ПолеКомментарий.ПодсказкаВвода = НСтр("ru='Прим.'");
				ПолеКомментарий.АвтоМаксимальнаяШирина = Ложь;
				ПолеКомментарий.МаксимальнаяШирина = ШиринаПоляКомментария;
				ПолеКомментарий.УстановитьДействие("ПриИзменении", "Подключаемый_КомментарийКИПриИзменении");
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	КонтактнаяИнформацияУНФКлиентСервер.ЗаполнитьСписокВыбораАдресов(Форма);
	
КонецПроцедуры

// Процедура добавляет поля ввода вида контактной информации на форму
//
// Параметры:
//  Форма						 - ФормаКлиентскогоПриложения	 - форма-владелец контактной информации
//  ДобавляемыйВид				 - СправочникСсылка.ВидыКонтактнойИнформации	 - вид для добавления
//  УстановитьВыводВФормеВсегда	 - Булево	 - признак установки настройки "ВыводитьВФормеВсегда"
//
Процедура ДобавитьКонтактнуюИнформацию(Форма, ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь, ИдентификаторСтрокиТабличнойЧасти = 0) Экспорт
	
	Если УстановитьВыводВФормеВсегда Тогда
		УстановитьФлагВыводитьВФормеВсегда(ДобавляемыйВид);
		НайденныеСтроки = Форма.СвойстваВидовКонтактнойИнформации.НайтиСтроки(Новый Структура("Вид", ДобавляемыйВид));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ВыводитьВФормеВсегда = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если УстановитьВыводВФормеВсегда И Форма.ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
		Для каждого Идентификатор Из Форма.ИдентификаторыСтрокТабличнойЧасти Цикл
			КоличествоЭлементовКоллекции = Форма.КонтактнаяИнформация.Количество();
			ИндексВставки = КоличествоЭлементовКоллекции;
			
			Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
				ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
				Если Форма.КонтактнаяИнформация[ТекущийИндекс].Вид = ДобавляемыйВид
					И Форма.КонтактнаяИнформация[ТекущийИндекс].ИдентификаторСтрокиТабличнойЧасти = Идентификатор.Значение Тогда
					ИндексВставки = ТекущийИндекс+1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ДанныеКИ = Форма.КонтактнаяИнформация.Вставить(ИндексВставки);
			ДанныеКИ.Вид = ДобавляемыйВид;
			ДанныеКИ.Тип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавляемыйВид, "Тип");
			ДанныеКИ.ИдентификаторСтрокиТабличнойЧасти = Идентификатор.Значение;
		КонецЦикла;
	Иначе
		КоличествоЭлементовКоллекции = Форма.КонтактнаяИнформация.Количество();
		ИндексВставки = КоличествоЭлементовКоллекции;
		
		Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
			ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
			
			Если Форма.ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти
				И Форма.КонтактнаяИнформация[ТекущийИндекс].ИдентификаторСтрокиТабличнойЧасти <> ИдентификаторСтрокиТабличнойЧасти Тогда
				Продолжить;
			КонецЕсли;
			
			Если Форма.КонтактнаяИнформация[ТекущийИндекс].Вид <> ДобавляемыйВид Тогда
				Продолжить;
			КонецЕсли;
			
			ИндексВставки = ТекущийИндекс+1;
			Прервать;
		КонецЦикла;
		
		ДанныеКИ = Форма.КонтактнаяИнформация.Вставить(ИндексВставки);
		ДанныеКИ.Вид = ДобавляемыйВид;
		ДанныеКИ.Тип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавляемыйВид, "Тип");
		Если Форма.ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
			ДанныеКИ.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтрокиТабличнойЧасти;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьЭлементыКонтактнойИнформации(Форма);
	Форма.ТекущийЭлемент = Форма.Элементы["ПредставлениеКИ_" + ИндексВставки];
	
КонецПроцедуры

// Процедура заполняет значение контактной информации на форме
//
// Параметры:
//  Форма						 - ФормаКлиентскогоПриложения	 - форма-владелец контактной информации
//  ЗаполняемыйВид				 - СправочникСсылка.ВидыКонтактнойИнформации	 - вид для которого заполняется значение
//  ДанныеЗаполнения			 - Структура	 - данные для заполнения, обязательные поля: Представление, Комментарий, Значение
//  ДобавлятьЕслиНет			 - Булево	 - признак необходимости добавления вида на форму, если такого еще нет
//  УстановитьВыводВФормеВсегда	 - Булево	 - признак установки настройки вида в случае добавления вида на форму
//
Процедура ЗаполнитьЗначениеКонтактнойИнформации(Форма, ЗаполняемыйВид, ДанныеЗаполнения, ДобавлятьЕслиНет = Ложь, УстановитьВыводВФормеВсегда = Ложь) Экспорт
	
	Отбор = Новый Структура("Вид", ЗаполняемыйВид);
	НайденныеСтроки = Форма.КонтактнаяИнформация.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		СтрокаКЗаполнению = НайденныеСтроки[0];
		
	ИначеЕсли ДобавлятьЕслиНет Тогда
		
		ДобавитьКонтактнуюИнформацию(Форма, ЗаполняемыйВид, УстановитьВыводВФормеВсегда);
		НайденныеСтроки = Форма.КонтактнаяИнформация.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаКЗаполнению = НайденныеСтроки[0];
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаКЗаполнению, ДанныеЗаполнения, "Представление,Комментарий,Значение");
	
	СтрокаКЗаполнению.Тип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаполняемыйВид, "Тип");
	
КонецПроцедуры

// Функция - Для типа контактной информации доступно редактирование в диалоге
//
// Параметры:
//  ТипКИ	 - ПеречислениеСсылка.ТипыКонтактнойИнформации	 - тип для которого проверяется доступность редактирования в диалоге
// 
// Возвращаемое значение:
//  Булево - признак возможности редактирования в диалоге
//
Функция ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(ТипКИ) Экспорт
	
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат Истина;
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат Истина;
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция - Для типа контактной информации доступен ввод комментария
//
// Параметры:
//  ТипКИ	 - ПеречислениеСсылка.ТипыКонтактнойИнформации	 - тип для которого проверяется доступность ввода комментария
// 
// Возвращаемое значение:
//  Булево - признак наличия поля комментария на форме
//
Функция ДляТипаКонтактнойИнформацииДоступенВводКомментария(ТипКИ) Экспорт
	
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес Или ТипКИ = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Функция - Картинка действия по типу контактной информации
//
// Параметры:
//  ТипКИ	 - ПеречислениеСсылка.ТипыКонтактнойИнформации	 - тип для которого получается картинка
// 
// Возвращаемое значение:
//  Картинка - пиктограмма для отображения
//
Функция КартинкаДействияПоТипуКонтактнойИнформации(ТипКИ) Экспорт
	
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		КартинкаДействия = БиблиотекаКартинок.КонтактнаяИнформацияТелефонУНФ;
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		КартинкаДействия = БиблиотекаКартинок.КонтактнаяИнформацияЭлПочта;
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		КартинкаДействия = БиблиотекаКартинок.КонтактнаяИнформацияАдрес;
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
		КартинкаДействия = БиблиотекаКартинок.КонтактнаяИнформацияСкайп;
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		КартинкаДействия = БиблиотекаКартинок.КонтактнаяИнформацияВебСтраница;
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		КартинкаДействия = БиблиотекаКартинок.КонтактнаяИнформацияФакс;
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		КартинкаДействия = БиблиотекаКартинок.КонтактнаяИнформацияДругое;
	Иначе
		КартинкаДействия = БиблиотекаКартинок.Пустая;
	КонецЕсли;
	
	Возврат КартинкаДействия;
	
КонецФункции

// Функция возвращает таблицу типов контактной информации в порядке по умолчанию
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Стандартный порядок типов контактной информации для отображения в интерфейсе
//
Функция ПорядокТиповКИ() Экспорт
	
	ПорядокТиповКИ = Новый ТаблицаЗначений;
	ПорядокТиповКИ.Колонки.Добавить("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"));
	ПорядокТиповКИ.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	СтрокаТипов = ПорядокТиповКИ.Добавить();
	СтрокаТипов.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	СтрокаТипов.Порядок = 1;
	
	СтрокаТипов = ПорядокТиповКИ.Добавить();
	СтрокаТипов.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	СтрокаТипов.Порядок = 2;
	
	СтрокаТипов = ПорядокТиповКИ.Добавить();
	СтрокаТипов.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	СтрокаТипов.Порядок = 3;
	
	СтрокаТипов = ПорядокТиповКИ.Добавить();
	СтрокаТипов.Тип = Перечисления.ТипыКонтактнойИнформации.Skype;
	СтрокаТипов.Порядок = 4;
	
	СтрокаТипов = ПорядокТиповКИ.Добавить();
	СтрокаТипов.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	СтрокаТипов.Порядок = 5;
	
	СтрокаТипов = ПорядокТиповКИ.Добавить();
	СтрокаТипов.Тип = Перечисления.ТипыКонтактнойИнформации.Факс;
	СтрокаТипов.Порядок = 6;
	
	СтрокаТипов = ПорядокТиповКИ.Добавить();
	СтрокаТипов.Тип = Перечисления.ТипыКонтактнойИнформации.Другое;
	СтрокаТипов.Порядок = 7;
	
	Возврат ПорядокТиповКИ;
	
КонецФункции

// Процедура устанавливает настройку вида контактной информации "ВыводитьВФормеВсегда"
//
// Параметры:
//  ВидКонтактнойИнформации	 - СправочникСсылка.ВидыКонтактнойИнформации	 - вид для которого устанавливается настройка
//  Включить				 - булево	 - значение настройки
//
Процедура УстановитьФлагВыводитьВФормеВсегда(ВидКонтактнойИнформации, Включить = Истина) Экспорт
	
	НаборЗаписей = РегистрыСведений.НастройкиВидовКонтактнойИнформации.СоздатьНаборЗаписей();
	
	// Прочитаем набор записей.
	НаборЗаписей.Отбор.Вид.Установить(ВидКонтактнойИнформации);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		ЗаписьНабора = НаборЗаписей.Добавить();
	ИначеЕсли НаборЗаписей[0].ВыводитьВФормеВсегда = Включить Тогда
		Возврат; // Настройка уже есть, дополнительных действий не требуется
	Иначе
		ЗаписьНабора = НаборЗаписей[0];
	КонецЕсли;
	
	ЗаписьНабора.Вид = ВидКонтактнойИнформации;
	ЗаписьНабора.ВыводитьВФормеВсегда = Включить;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПреобразоватьТелефонДляПоиска(НомерТелефона) Экспорт
	
	Если Не ЗначениеЗаполнено(СокрЛП(НомерТелефона)) Тогда
		Возврат "";
	КонецЕсли;
	
	ПоисковоеВыражение = СтрЗаменить(НомерТелефона, "-", "");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, " ", "");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, "(", "");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, ")", "");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, ".", "");
	
	Возврат ПоисковоеВыражение;
	
КонецФункции

Функция КонтрагентПоНомеруТелефона(знач НомерТелефонаАбонента, ИскатьВКонтрагентах = Истина, ИскатьВКонтактах = Истина, ИскатьВЛидах = Истина) Экспорт
	
	Если ТипЗнч(НомерТелефонаАбонента) = Тип("Строка") И Не ЗначениеЗаполнено(СокрЛП(НомерТелефонаАбонента)) Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(НомерТелефонаАбонента) = Тип("ОбъектXDTO") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоисковоеВыражение = ПреобразоватьТелефонДляПоиска(НомерТелефонаАбонента);
	Возврат ТелефонияСервер.ПолучитьАбонентаПоНомеруТелефона(ПоисковоеВыражение, ИскатьВКонтрагентах, ИскатьВКонтактах, ИскатьВЛидах);
	
КонецФункции

Функция КонтрагентПоАдресуЭП(знач АдресЭП, ИскатьВКонтрагентах = Истина, ИскатьВКонтактах = Истина) Экспорт
	
	Если ТипЗнч(АдресЭП) = Тип("Строка") И НЕ ЗначениеЗаполнено(АдресЭП) Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(АдресЭП) = Тип("ОбъектXDTO") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.АдресЭП = &АдресЭП
	|	И КонтрагентыКонтактнаяИнформация.Тип = &АдресЭлектроннойПочты
	|	И &ИскатьВКонтрагентах
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП
	|	И КонтактныеЛицаКонтактнаяИнформация.Тип = &АдресЭлектроннойПочты
	|	И &ИскатьВКонтактах
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Представление = &АдресЭП
	|	И КонтрагентыКонтактнаяИнформация.Тип = &АдресЭлектроннойПочты
	|	И &ИскатьВКонтрагентах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАдреса.Ссылка КАК Ссылка
	|ИЗ
	|	втАдреса КАК втАдреса
	|
	|СГРУППИРОВАТЬ ПО
	|	втАдреса.Ссылка";
	Запрос.УстановитьПараметр("АдресЭП", НРег(СокрЛП(АдресЭП)));
	Запрос.УстановитьПараметр("АдресЭлектроннойПочты", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ИскатьВКонтрагентах", ИскатьВКонтрагентах);
	Запрос.УстановитьПараметр("ИскатьВКонтактах", ИскатьВКонтактах);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Формирует структуру полей контактной информации типа Телефон или МобильныйТелефон по представлению телефона
//
// Параметры
//  Представление  - Строка - строковая информация с номером телефона
//
// Возвращаемое значение:
//   Структура   - сформированная структура
//
Функция ПреобразоватьНомерДляКонтактнойИнформации(знач Номер) Экспорт
	
	// Очистка пользовательских разделителей
	ЗаменяемыеСимволы = "()- ";
	Для НомерСимвола = 1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		Номер = СтрЗаменить(Номер, Сред(ЗаменяемыеСимволы, НомерСимвола, 1), "");
	КонецЦикла;
	
	// Телефонный код России 7 (вызов внутри страны начинается на 8), коды сотовых операторов начинаются на 9.
	Если Лев(Номер, 2) = "89" Тогда
		Номер = "7"+Сред(Номер, 2);
	ИначеЕсли Лев(Номер, 3) = "+79" Тогда
		Номер = Сред(Номер, 2);
	КонецЕсли;
	
	Возврат Номер;
	
КонецФункции

// Процедура - Конвертировать значение при необходимости
//
// Параметры:
//  ЗначенияПолей - Строка - XML, Описание полей контактной информации.
//  Представление - Строка - Представление контактной информации. Используется, если невозможно определить значение из
//                           параметра ЗначенияПолей
//  Значение      - Строка - Возвращаемое значение. JSON, Описание полей контактной информации.
//
Процедура КонвертироватьЗначениеПриНеобходимости(ЗначенияПолей, Представление, ТипКИ, Значение) Экспорт
	
	Если НЕ ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияПолей) Тогда
		Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ЗначенияПолей, ТипКИ);
	ИначеЕсли ЗначениеЗаполнено(Представление) Тогда
		Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ТипКИ);
	КонецЕсли;
	
КонецПроцедуры

// Получаем структуру для контактной информации
// 
Функция НоваяКонтактнаяИнформация() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КонтактнаяИнформация"); // Строка, 0 - XML 
	Результат.Вставить("Представление");        // Строка, 0
	Результат.Вставить("Комментарий");          // Строка, 0
	Возврат Результат;
	
КонецФункции

// Функция получает XML по представлению адреса
//
//  ЗначенияПолей - Строка - XML, Описание полей контактной информации.
//  Представление - Строка - Представление контактной информации. Используется, если невозможно определить значение из
//                           параметра ЗначенияПолей
Функция ПолучитьXMLПредставлениеАдреса(ЗначенияПолей, ВидКИ, Представление = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗначенияПолей) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресXML = "";
	ДопустимыеТипы = "Индекс, Страна, Регион, Район, Город, Улица, Дом, Корпус, Квартира";
	
	Если ТипЗнч(ЗначенияПолей) = Тип("Структура") Тогда
		Для Каждого ТекСв Из ЗначенияПолей Цикл
			Если ТекСв.Ключ = "КодРегион" Тогда
				АдресXML = АдресXML + "КодРегиона" + "=" + ТекСв.Значение + Символы.ПС;
			ИначеЕсли ТекСв.Ключ = "Населенный пункт" Тогда
				АдресXML = АдресXML + "НаселенныйПункт" + "=" + ТекСв.Значение + Символы.ПС;
			ИначеЕсли ТекСв.Ключ = "Кварт" Тогда
				АдресXML = АдресXML + "Квартира" + "=" + ТекСв.Значение + Символы.ПС;
			ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Ключ) >0 Тогда
				АдресXML = АдресXML + ТекСв.Ключ + "=" + ТекСв.Значение + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ТекСв Из ЗначенияПолей Цикл
			Если ТекСв.Тип = "Почтовый индекс" Тогда
				АдресXML = АдресXML + "Индекс" + "=" + ТекСв.Значение + Символы.ПС;
			ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
				АдресXML = АдресXML + "НаселенныйПункт" + "=" + ТекСв.Значение + Символы.ПС;
			ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип) >0 Тогда
				АдресXML = АдресXML + ТекСв.Тип + "=" + ТекСв.Значение + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(АдресXML, Представление , ВидКИ);
	
	Возврат АдресXML;
	
КонецФункции

// Возвращает полные данные ОКСМ классификатора.
// Таблица значений в макете проиндексирована по полям "Код", "Наименование".
//
// Возвращаемое значение:
//     ТаблицаЗначений - данные классификатора с колонками:
//         * Код                - Строка - данные страны.
//         * Наименование       - Строка - данные страны.
//         * НаименованиеПолное - Строка - данные страны.
//         * КодАльфа2          - Строка - данные страны.
//         * КодАльфа3          - Строка - данные страны.
//
Функция ТаблицаКлассификатора() Экспорт
	
	Возврат РаботаСАдресами.ТаблицаКлассификатора();
	
КонецФункции

//  Преобразует строку полей вида ключ = значение в структуру.
//
//  Параметры:
//      СтрокаПолей             - Строка - строка полей с данными в виде ключ = значение.
//      ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - для определения состава незаполненных
//                                                                            полей.
//
//  Возвращаемое значение:
//      Структура - значения полей.
//
Функция СтруктураЗначенийПолей(СтрокаПолей, ВидКонтактнойИнформации = Неопределено) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.СтруктураЗначенийПолей(СтрокаПолей, ВидКонтактнойИнформации);
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Процедура обновляет/дозаполняет предопределенные виды контактной информации. Начальное заполнение базы.
//
Процедура УстановитьСвойстваПредопределенныхВидовКонтактнойИнформации() Экспорт
	
	Контрагенты_УстановитьСвойстваВидов();
	КонтактныеЛица_УстановитьСвойстваВидов();
	Организации_УстановитьСвойстваВидов();
	ФизическиеЛица_УстановитьСвойстваВидов();
	СтруктурныеЕдиницы_УстановитьСвойстваВидов();
	Пользователи_УстановитьСвойстваВидов();
	ВидыДеятельностиЕНВД_УстановитьСвойстваВидов();
	ТорговыеТочки_УстановитьСвойстваВидов();
	Лиды_УстановитьСвойстваВидов();
	КонтактыЛидов_УстановитьСвойстваВидов();
	ПунктыВыдачиЗаказа_УстановитьСвойстваВидов();
	
КонецПроцедуры

Процедура Контрагенты_УстановитьСвойстваВидов()
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТелефонCДобавочнымНомером	= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
	ПараметрыВида.Порядок = 2;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность		= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	ПараметрыВида.Порядок = 3;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС					= Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса		= Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление	= Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	ПараметрыВида.Порядок = 4;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС					= Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса		= Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление	= Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента;
	ПараметрыВида.Порядок = 5;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС					= Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса		= Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление	= Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Skype");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента;
	ПараметрыВида.Порядок = 6;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("ВебСтраница");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента;
	ПараметрыВида.Порядок = 7;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;
	ПараметрыВида.Порядок = 8;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
	ПараметрыВида.Порядок = 9;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС					= Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса		= Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление	= Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента;
	ПараметрыВида.Порядок = 10;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Процедура КонтактныеЛица_УстановитьСвойстваВидов()
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТелефонCДобавочнымНомером	= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
	ПараметрыВида.Порядок = 2;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность		= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Skype");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтактногоЛица;
	ПараметрыВида.Порядок = 3;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("ВебСтраница");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.СоциальнаяСетьКонтактногоЛица;
	ПараметрыВида.Порядок = 4;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.МессенджерКонтактногоЛица;
	ПараметрыВида.Порядок = 5;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Процедура Организации_УстановитьСвойстваВидов()
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "Диалог";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС					= Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса		= Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление	= Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	ПараметрыВида.Порядок = 2;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "Диалог";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС					= Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса		= Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление	= Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	ПараметрыВида.Порядок = 3;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС					= Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса		= Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление	= Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	ПараметрыВида.Порядок = 4;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТелефонCДобавочнымНомером	= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
	ПараметрыВида.Порядок = 5;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность		= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("ВебСтраница");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.СайтОрганизации;
	ПараметрыВида.Порядок = 6;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
	ПараметрыВида.Порядок = 7;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации;
	ПараметрыВида.Порядок = 8;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Процедура ФизическиеЛица_УстановитьСвойстваВидов()
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТелефонCДобавочнымНомером	= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке;
	ПараметрыВида.Порядок = 2;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Ложь;
	ПараметрыВида.ВидРедактирования						= "Диалог";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Истина;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес			= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность			= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС					= Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса		= Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление	= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.АдресПроживанияФизЛица;
	ПараметрыВида.Порядок = 3;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Ложь;
	ПараметрыВида.ВидРедактирования						= "Диалог";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Истина;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес			= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность			= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС					= Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса		= Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление	= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизЛица;
	ПараметрыВида.Порядок = 4;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Ложь;
	ПараметрыВида.ВидРедактирования						= "Диалог";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Истина;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС					= Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса		= Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление	= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.АдресФизЛицаЗаПределамиРФ;
	ПараметрыВида.Порядок = 5;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Ложь;
	ПараметрыВида.ВидРедактирования						= "Диалог";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС					= Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса		= Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление	= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица;
	ПараметрыВида.Порядок = 6;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияФизЛица;
	ПараметрыВида.Порядок = 7;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Процедура СтруктурныеЕдиницы_УстановитьСвойстваВидов()
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонСтруктурнойЕдиницы;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТелефонCДобавочнымНомером	= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы;
	ПараметрыВида.Порядок = 2;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "Диалог";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес			= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность			= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС					= Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса		= Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление	= Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
КонецПроцедуры

Процедура Пользователи_УстановитьСвойстваВидов()
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТелефонCДобавочнымНомером	= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	ПараметрыВида.Порядок = 2;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность		= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("ВебСтраница");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.СайтПользователя;
	ПараметрыВида.Порядок = 3;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
КонецПроцедуры

Процедура ВидыДеятельностиЕНВД_УстановитьСвойстваВидов()
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.АдресДеятельностиЕНВД;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "Диалог";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Истина;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес			= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность			= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС					= Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса		= Истина;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление	= Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
КонецПроцедуры

Процедура ТорговыеТочки_УстановитьСвойстваВидов()
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "Диалог";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Истина;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес			= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность			= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС					= Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса		= Истина;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление	= Ложь;
	
	// В конструкторе параметров нет свойства "УказыватьОКТМО", добавляем пока вручную
	ПараметрыВида.НастройкиПроверки.Вставить("УказыватьОКТМО", Истина);
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
КонецПроцедуры

Процедура Лиды_УстановитьСвойстваВидов()
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКомпанииЛида;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТелефонCДобавочнымНомером	= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.EmailКомпанииЛида;
	ПараметрыВида.Порядок = 2;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность		= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКомпанииЛида;
	ПараметрыВида.Порядок = 3;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС					= Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса		= Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление	= Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКомпанииЛида;
	ПараметрыВида.Порядок = 4;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС					= Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса		= Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление	= Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Skype");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКомпанииЛида;
	ПараметрыВида.Порядок = 5;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("ВебСтраница");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ВебСайтКомпанииЛида;
	ПараметрыВида.Порядок = 6;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКомпанииЛида;
	ПараметрыВида.Порядок = 7;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Процедура КонтактыЛидов_УстановитьСвойстваВидов()
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактаЛида;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТелефонCДобавочнымНомером	= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактаЛида;
	ПараметрыВида.Порядок = 2;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность		= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Skype");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтактаЛида;
	ПараметрыВида.Порядок = 3;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("ВебСтраница");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.СоциальнаяСетьКонтактаЛида;
	ПараметрыВида.Порядок = 4;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.МессенджерКонтактаЛида;
	ПараметрыВида.Порядок = 5;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "ПолеВвода";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Ложь;
	ПараметрыВида.Используется							= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Процедура ПунктыВыдачиЗаказа_УстановитьСвойстваВидов()
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.АдресПунктаВыдачиЗаказа;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.МожноИзменятьСпособРедактирования		= Истина;
	ПараметрыВида.ВидРедактирования						= "Диалог";
	ПараметрыВида.ОбязательноеЗаполнение				= Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений		= Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем	= Истина;
	ПараметрыВида.Используется							= Истина;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность			= Ложь;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС					= Ложь;
	ПараметрыВида.НастройкиПроверки.СкрыватьНеактуальныеАдреса		= Ложь;
	ПараметрыВида.НастройкиПроверки.ВключатьСтрануВПредставление	= Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	УстановитьФлагВыводитьВФормеВсегда(ПараметрыВида.Вид);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьРеквизитыФормыКонтактнойИнформации(Форма, ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти,
	СодержитДействуетС)
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	СоздатьТаблицуКонтактнаяИнформация = Истина;
	СоздатьТаблицуСвойстваВидовКонтактнойИнформации = Истина;
	
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "КонтактнаяИнформация" Тогда
			СоздатьТаблицуКонтактнаяИнформация = Ложь;
		ИначеЕсли Реквизит.Имя = "СвойстваВидовКонтактнойИнформации" Тогда
			СоздатьТаблицуСвойстваВидовКонтактнойИнформации = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеБулево = Новый ОписаниеТипов("Булево");
	
	Если СоздатьТаблицуКонтактнаяИнформация Тогда
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти", 
			ОписаниеБулево));
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СодержитДействуетС", 
			ОписаниеБулево));

		ИмяТаблицы = "КонтактнаяИнформация";
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"),,, Истина));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"), ИмяТаблицы));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), ИмяТаблицы));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500)), ИмяТаблицы));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Комментарий", ОписаниеСтрока, ИмяТаблицы));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Значение", ОписаниеСтрока, ИмяТаблицы));
		
		Если СодержитДействуетС Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоИсторическаяКонтактнаяИнформация", 
				Новый ОписаниеТипов("Булево"), ИмяТаблицы));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДействуетС", 
				Новый ОписаниеТипов("Дата"), ИмяТаблицы));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ХранитьИсториюИзменений", 
				Новый ОписаниеТипов("Булево"), ИмяТаблицы));
		КонецЕсли;

		Если ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИдентификаторСтрокиТабличнойЧасти", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Неотрицательный)), ИмяТаблицы));
		КонецЕсли;
		
	КонецЕсли;
	
	Если СоздатьТаблицуСвойстваВидовКонтактнойИнформации Тогда
		
		ИмяТаблицы = "СвойстваВидовКонтактнойИнформации";
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"), ИмяТаблицы));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПредставлениеВида", ОписаниеСтрока, ИмяТаблицы));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), ИмяТаблицы));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВыводитьВФормеВсегда", ОписаниеБулево, ИмяТаблицы));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РазрешитьВводНесколькихЗначений", ОписаниеБулево, ИмяТаблицы));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ОбязательноеЗаполнение", ОписаниеБулево, ИмяТаблицы));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПроверятьКорректность", ОписаниеБулево, ИмяТаблицы));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВидРедактирования", ОписаниеСтрока, ИмяТаблицы));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВидПоляДругое", ОписаниеСтрока, ИмяТаблицы));
		
	КонецЕсли;
	
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьСвойстваВидовКонтактнойИнформации(Форма, ГруппаВидовКИ, 
	ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти, СодержитДействуетС)
	
	Форма.ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти 	= ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти;
	Форма.СодержитДействуетС 							= СодержитДействуетС;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокТиповКИ.Тип КАК Тип,
	|	ПорядокТиповКИ.Порядок КАК Порядок
	|ПОМЕСТИТЬ втПорядокТипов
	|ИЗ
	|	&ПорядокТиповКИ КАК ПорядокТиповКИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|	ПРЕДСТАВЛЕНИЕ(ВидыКонтактнойИнформации.Ссылка) КАК ПредставлениеВида,
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	ЕСТЬNULL(НастройкиВидовКонтактнойИнформации.ВыводитьВФормеВсегда, ЛОЖЬ) КАК ВыводитьВФормеВсегда,
	|	ВидыКонтактнойИнформации.РазрешитьВводНесколькихЗначений КАК РазрешитьВводНесколькихЗначений,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение КАК ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.ПроверятьКорректность КАК ПроверятьКорректность,
	|	ВидыКонтактнойИнформации.ВидРедактирования КАК ВидРедактирования,
	|	ВидыКонтактнойИнформации.ВидПоляДругое КАК ВидПоляДругое,
	|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений КАК ХранитьИсториюИзменений
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
	|		ПО ВидыКонтактнойИнформации.Тип = втПорядокТипов.Тип
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВидовКонтактнойИнформации КАК НастройкиВидовКонтактнойИнформации
	|		ПО ВидыКонтактнойИнформации.Ссылка = НастройкиВидовКонтактнойИнформации.Вид
	|ГДЕ
	|	ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И (ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|			ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель = &ГруппаВидовКИ)
	|	И НЕ ВидыКонтактнойИнформации.ЭтоГруппа
	|	И ВидыКонтактнойИнформации.Используется
	|
	|УПОРЯДОЧИТЬ ПО
	|	втПорядокТипов.Порядок,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("ПорядокТиповКИ", ПорядокТиповКИ());
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	
	ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
	Форма.СвойстваВидовКонтактнойИнформации.Загрузить(ТаблицаСвойств);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуКонтактнойИнформации(Форма, Объект)
	
	Форма.КонтактнаяИнформация.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокТипов.Тип КАК Тип,
	|	ПорядокТипов.Порядок КАК Порядок
	|ПОМЕСТИТЬ втПорядокТипов
	|ИЗ
	|	&ПорядокТипов КАК ПорядокТипов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК ИдентификаторСтрокиТабличнойЧасти
	|ПОМЕСТИТЬ втИдентификаторыСтрокТабличнойЧасти
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания КАК ПорядокВидов,
	|	втПорядокТипов.Порядок КАК ПорядокТипов,
	|	втИдентификаторыСтрокТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти КАК ИдентификаторСтрокиТабличнойЧасти,
	|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений КАК ХранитьИсториюИзменений
	|ПОМЕСТИТЬ втВсегдаВыводимыеВиды
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
	|		ПО ВидыКонтактнойИнформации.Тип = втПорядокТипов.Тип,
	|	втИдентификаторыСтрокТабличнойЧасти КАК втИдентификаторыСтрокТабличнойЧасти
	|ГДЕ
	|	ВидыКонтактнойИнформации.Ссылка В(&ВсегдаВыводимыеВиды)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Вид"
	+ ОбщегоНазначения.РазделительПакетаЗапросов();
	
	Если Форма.ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"ВЫБРАТЬ
			|	0 КАК ИдентификаторСтрокиТабличнойЧасти
			|ПОМЕСТИТЬ втИдентификаторыСтрокТабличнойЧасти
			|;",
			"ВЫБРАТЬ
			|	ИдентификаторыСтрокТабличнойЧасти.Значение КАК ИдентификаторСтрокиТабличнойЧасти
			|ПОМЕСТИТЬ втИдентификаторыСтрокТабличнойЧасти
			|ИЗ &ИдентификаторыСтрокТабличнойЧасти КАК ИдентификаторыСтрокТабличнойЧасти
			|;"
		);
		Запрос.УстановитьПараметр("ИдентификаторыСтрокТабличнойЧасти", Форма.ИдентификаторыСтрокТабличнойЧасти.Выгрузить());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ЗапросТекст = "
		|ВЫБРАТЬ
		|	ВладелецКонтактнаяИнформация.Вид КАК Вид,
		|	ВладелецКонтактнаяИнформация.Тип,
		|	ВладелецКонтактнаяИнформация.Представление,
		|	ВладелецКонтактнаяИнформация.Значение,
		|	ВладелецКонтактнаяИнформация.ЗначенияПолей,
		|	0 КАК ИдентификаторСтрокиТабличнойЧасти,
		|	ВладелецКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК ПорядокВидов,
		|	втПорядокТипов.Порядок КАК ПорядокТипов,
		|	&ДействуетС КАК ДействуетС,
		|	ВладелецКонтактнаяИнформация.Вид.ХранитьИсториюИзменений КАК ХранитьИсториюИзменений
		|ПОМЕСТИТЬ втДанныеКИ
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК ВладелецКонтактнаяИнформация
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
		|		ПО ВладелецКонтактнаяИнформация.Тип = втПорядокТипов.Тип
		|ГДЕ
		|	ВладелецКонтактнаяИнформация.Ссылка = &ВладелецКИ
		|	И ВладелецКонтактнаяИнформация.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Вид";
		
		Если Форма.ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "0 КАК ИдентификаторСтрокиТабличнойЧасти",
				"ЕСТЬNULL(ВладелецКонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти, 0) КАК ИдентификаторСтрокиТабличнойЧасти");
		КонецЕсли;
		
		ДействуетС = ?(Форма.СодержитДействуетС, 
			"ВладелецКонтактнаяИнформация.ДействуетС", 
			"ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)");
			
		ЗапросТекст = СтрЗаменить(ЗапросТекст, "&ДействуетС", ДействуетС);
		Запрос.Текст = Запрос.Текст + ЗапросТекст;
		
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	ТаблицаКИ.Вид,
		|	ТаблицаКИ.Тип,
		|	ТаблицаКИ.Представление,
		|	ТаблицаКИ.Значение,
		|	ТаблицаКИ.ЗначенияПолей,
		|	&ДействуетС КАК ДействуетС
		|ПОМЕСТИТЬ втТаблицаКИ
		|ИЗ
		|	&ТаблицаКИ КАК ТаблицаКИ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВладелецКонтактнаяИнформация.Вид КАК Вид,
		|	ВладелецКонтактнаяИнформация.Тип,
		|	ВладелецКонтактнаяИнформация.ДействуетС,
		|	ВладелецКонтактнаяИнформация.Представление,
		|	ВладелецКонтактнаяИнформация.Значение,
		|	ВладелецКонтактнаяИнформация.ЗначенияПолей,
		|	0 КАК ИдентификаторСтрокиТабличнойЧасти,
		|	ВладелецКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК ПорядокВидов,
		|	втПорядокТипов.Порядок КАК ПорядокТипов,
		|	ВладелецКонтактнаяИнформация.Вид.ХранитьИсториюИзменений КАК ХранитьИсториюИзменений
		|ПОМЕСТИТЬ втДанныеКИ
		|ИЗ
		|	втТаблицаКИ КАК ВладелецКонтактнаяИнформация
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
		|		ПО ВладелецКонтактнаяИнформация.Тип = втПорядокТипов.Тип
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Вид";
		
		ДействуетС = ?(Форма.СодержитДействуетС, 
			"ТаблицаКИ.ДействуетС", 
			"ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДействуетС", ДействуетС);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(втДанныеКИ.Вид, втВсегдаВыводимыеВиды.Вид) КАК Вид,
	|	ЕСТЬNULL(втДанныеКИ.Тип, втВсегдаВыводимыеВиды.Тип) КАК Тип,
	|	ЕСТЬNULL(втДанныеКИ.Представление, """") КАК Представление,
	|	ЕСТЬNULL(втДанныеКИ.Значение, """") КАК Значение,
	|	ЕСТЬNULL(втДанныеКИ.ЗначенияПолей, """") КАК ЗначенияПолей,
	|	ЕСТЬNULL(втДанныеКИ.ИдентификаторСтрокиТабличнойЧасти, втВсегдаВыводимыеВиды.ИдентификаторСтрокиТабличнойЧасти) КАК ИдентификаторСтрокиТабличнойЧасти,
	|	ЕСТЬNULL(втДанныеКИ.ПорядокТипов, втВсегдаВыводимыеВиды.ПорядокТипов) КАК ПорядокТипов,
	|	ЕСТЬNULL(втДанныеКИ.ПорядокВидов, втВсегдаВыводимыеВиды.ПорядокВидов) КАК ПорядокВидов,
	|	ЕСТЬNULL(втДанныеКИ.ДействуетС, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДействуетС,
	|	ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация,
	|	ЕСТЬNULL(втДанныеКИ.ХранитьИсториюИзменений, втВсегдаВыводимыеВиды.ХранитьИсториюИзменений) КАК ХранитьИсториюИзменений
	|ИЗ
	|	втВсегдаВыводимыеВиды КАК втВсегдаВыводимыеВиды
	|		ПОЛНОЕ СОЕДИНЕНИЕ втДанныеКИ КАК втДанныеКИ
	|		ПО втВсегдаВыводимыеВиды.Вид = втДанныеКИ.Вид
	|			И втВсегдаВыводимыеВиды.ИдентификаторСтрокиТабличнойЧасти = втДанныеКИ.ИдентификаторСтрокиТабличнойЧасти
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтрокиТабличнойЧасти,
	|	ПорядокТипов,
	|	ПорядокВидов,
	|	ДействуетС";
	
	ДействуетС = ?(Форма.СодержитДействуетС, 
			"втДанныеКИ.ДействуетС", 
			"ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДействуетС", ДействуетС);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Контрагенты", Объект.Ссылка.Метаданные().ПолноеИмя());
	Иначе
		КолонкиТаблицы = ?(Форма.СодержитДействуетС, 
			"Вид,Тип,Представление,Значение,ЗначенияПолей,ДействуетС", 
			"Вид,Тип,Представление,Значение,ЗначенияПолей");
		Запрос.УстановитьПараметр("ТаблицаКИ", Объект.КонтактнаяИнформация.Выгрузить(,КолонкиТаблицы));
	КонецЕсли;
	
	ВсегдаВыводимыеВиды = Форма.СвойстваВидовКонтактнойИнформации.Выгрузить(Новый Структура("ВыводитьВФормеВсегда", Истина), "Вид");
	
	Запрос.УстановитьПараметр("ВладелецКИ",		Объект.Ссылка);
	Запрос.УстановитьПараметр("ПорядокТипов",	ПорядокТиповКИ());
	Запрос.УстановитьПараметр("ВсегдаВыводимыеВиды", ВсегдаВыводимыеВиды);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Форма.КонтактнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		// Конвертация
		Если ПустаяСтрока(Выборка.Значение) Тогда
			Если ЗначениеЗаполнено(Выборка.ЗначенияПолей) Тогда
				НоваяСтрока.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(Выборка.ЗначенияПолей, Выборка.Тип);
			ИначеЕсли ЗначениеЗаполнено(Выборка.Представление) Тогда
				НоваяСтрока.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Выборка.Представление, Выборка.Тип);
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(НоваяСтрока.Значение);
		
	КонецЦикла;
	
	Если Форма.СодержитДействуетС Тогда
		ПредыдущийВид = Неопределено;
		Для Каждого СтрокаКонтактнойИнформации Из Форма.КонтактнаяИнформация Цикл
			Если СтрокаКонтактнойИнформации.ХранитьИсториюИзменений
				И (ПредыдущийВид = Неопределено ИЛИ ПредыдущийВид <> СтрокаКонтактнойИнформации.Вид) Тогда
				Отбор = Новый Структура("Вид", СтрокаКонтактнойИнформации.Вид);
				НайденныеСтроки = Форма.КонтактнаяИнформация.НайтиСтроки(Отбор);
				ПоследняяДата = НайденныеСтроки.Получить(НайденныеСтроки.Количество() - 1).ДействуетС;
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока.ДействуетС < ПоследняяДата Тогда
						НайденнаяСтрока.ЭтоИсторическаяКонтактнаяИнформация = Истина;
					КонецЕсли;
				КонецЦикла;
				ПредыдущийВид = СтрокаКонтактнойИнформации.Вид;
			КонецЕсли;
		КонецЦикла;
		ЕстьИсторическаяИнформация = Истина;
	Иначе
		ЕстьИсторическаяИнформация = Ложь;
	КонецЕсли;

КонецПроцедуры

Функция НоваяПорцияВсегдаВыводимыеВидыКонтактнойИнформации(Форма, Объект, ИдентификаторСтрокиТабличнойЧасти)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокТипов.Тип КАК Тип,
	|	ПорядокТипов.Порядок КАК Порядок
	|ПОМЕСТИТЬ втПорядокТипов
	|ИЗ
	|	&ПорядокТипов КАК ПорядокТипов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ИдентификаторСтрокиТабличнойЧасти КАК ИдентификаторСтрокиТабличнойЧасти
	|ПОМЕСТИТЬ втИдентификаторыСтрокТабличнойЧасти
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания КАК ПорядокВидов,
	|	втПорядокТипов.Порядок КАК ПорядокТипов,
	|	&ИдентификаторСтрокиТабличнойЧасти КАК ИдентификаторСтрокиТабличнойЧасти,
	|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений КАК ХранитьИсториюИзменений
	|ПОМЕСТИТЬ втВсегдаВыводимыеВиды
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
	|		ПО ВидыКонтактнойИнформации.Тип = втПорядокТипов.Тип
	|ГДЕ
	|	ВидыКонтактнойИнформации.Ссылка В(&ВсегдаВыводимыеВиды)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Вид"
	+ ОбщегоНазначения.РазделительПакетаЗапросов();
	
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ
	|	ТаблицаКИ.Вид,
	|	ТаблицаКИ.Тип,
	|	ТаблицаКИ.Представление,
	|	ТаблицаКИ.Значение,
	|	&ДействуетС КАК ДействуетС
	|ПОМЕСТИТЬ втТаблицаКИ
	|ИЗ
	|	&ТаблицаКИ КАК ТаблицаКИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВладелецКонтактнаяИнформация.Вид КАК Вид,
	|	ВладелецКонтактнаяИнформация.Тип,
	|	ВладелецКонтактнаяИнформация.Представление,
	|	ВладелецКонтактнаяИнформация.Значение,
	|	ВладелецКонтактнаяИнформация.ДействуетС,
	|	0 КАК ИдентификаторСтрокиТабличнойЧасти,
	|	ВладелецКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК ПорядокВидов,
	|	втПорядокТипов.Порядок КАК ПорядокТипов,
	|	ВладелецКонтактнаяИнформация.Вид.ХранитьИсториюИзменений КАК ХранитьИсториюИзменений
	|ПОМЕСТИТЬ втДанныеКИ
	|ИЗ
	|	втТаблицаКИ КАК ВладелецКонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
	|		ПО ВладелецКонтактнаяИнформация.Тип = втПорядокТипов.Тип
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Вид";
	
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(втДанныеКИ.Вид, втВсегдаВыводимыеВиды.Вид) КАК Вид,
	|	ЕСТЬNULL(втДанныеКИ.Тип, втВсегдаВыводимыеВиды.Тип) КАК Тип,
	|	ЕСТЬNULL(втДанныеКИ.Представление, """") КАК Представление,
	|	ЕСТЬNULL(втДанныеКИ.Значение, """") КАК Значение,
	|	ЕСТЬNULL(втДанныеКИ.ИдентификаторСтрокиТабличнойЧасти, втВсегдаВыводимыеВиды.ИдентификаторСтрокиТабличнойЧасти) КАК ИдентификаторСтрокиТабличнойЧасти,
	|	ЕСТЬNULL(втДанныеКИ.ПорядокТипов, втВсегдаВыводимыеВиды.ПорядокТипов) КАК ПорядокТипов,
	|	ЕСТЬNULL(втДанныеКИ.ПорядокВидов, втВсегдаВыводимыеВиды.ПорядокВидов) КАК ПорядокВидов,
	|	ЕСТЬNULL(втДанныеКИ.ДействуетС, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДействуетС,
	|	ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация,
	|	ЕСТЬNULL(втДанныеКИ.ХранитьИсториюИзменений, втВсегдаВыводимыеВиды.ХранитьИсториюИзменений) КАК ХранитьИсториюИзменений
	|ИЗ
	|	втВсегдаВыводимыеВиды КАК втВсегдаВыводимыеВиды
	|		ПОЛНОЕ СОЕДИНЕНИЕ втДанныеКИ КАК втДанныеКИ
	|		ПО втВсегдаВыводимыеВиды.Вид = втДанныеКИ.Вид
	|			И втВсегдаВыводимыеВиды.ИдентификаторСтрокиТабличнойЧасти = втДанныеКИ.ИдентификаторСтрокиТабличнойЧасти
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтрокиТабличнойЧасти,
	|	ПорядокТипов,
	|	ПорядокВидов,
	|	ДействуетС";
	
	КолонкиТаблицы = ?(Форма.СодержитДействуетС, 
			"Вид,Тип,Представление,Значение,ЗначенияПолей,ДействуетС", 
			"Вид,Тип,Представление,Значение,ЗначенияПолей");
	Запрос.УстановитьПараметр("ТаблицаКИ", Объект.КонтактнаяИнформация.Выгрузить(Новый Массив,КолонкиТаблицы));
	
	ВсегдаВыводимыеВиды = Форма.СвойстваВидовКонтактнойИнформации.Выгрузить(Новый Структура("ВыводитьВФормеВсегда", Истина), "Вид");
	
	ДействуетС = ?(Форма.СодержитДействуетС, 
			"ТаблицаКИ.ДействуетС", 
			"ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)");
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДействуетС", ДействуетС);

	Запрос.УстановитьПараметр("ИдентификаторСтрокиТабличнойЧасти", ИдентификаторСтрокиТабличнойЧасти);
	Запрос.УстановитьПараметр("ВладелецКИ",		Объект.Ссылка);
	Запрос.УстановитьПараметр("ПорядокТипов",	ПорядокТиповКИ());
	Запрос.УстановитьПараметр("ВсегдаВыводимыеВиды", ВсегдаВыводимыеВиды);
	
	Строки = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Форма.КонтактнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(Выборка.Значение);
		Строки.Добавить(НоваяСтрока);
	КонецЦикла;
	
	Если Форма.СодержитДействуетС Тогда
		ПредыдущийВид = Неопределено;
		Для каждого СтрокаКонтактнойИнформации Из Форма.КонтактнаяИнформация Цикл
			Если СтрокаКонтактнойИнформации.ХранитьИсториюИзменений
				И (ПредыдущийВид = Неопределено ИЛИ ПредыдущийВид <> СтрокаКонтактнойИнформации.Вид) Тогда
				Отбор = Новый Структура("Вид", СтрокаКонтактнойИнформации.Вид);
				НайденныеСтроки = Форма.КонтактнаяИнформация.НайтиСтроки(Отбор);
				ПоследняяДата = НайденныеСтроки.Получить(НайденныеСтроки.Количество() - 1).ДействуетС;
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока.ДействуетС < ПоследняяДата Тогда
						НайденнаяСтрока.ЭтоИсторическаяКонтактнаяИнформация = Истина;
					КонецЕсли;
				КонецЦикла;
				ПредыдущийВид = СтрокаКонтактнойИнформации.Вид;
			КонецЕсли;
		КонецЦикла;
		ЕстьИсторическаяИнформация = Истина;
	Иначе
		ЕстьИсторическаяИнформация = Ложь;
	КонецЕсли;
	
	Возврат Строки;
	
КонецФункции

Процедура ИнициализироватьФорму(Форма)
	
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
		
		Если Элементы.Найти("ЗначенияКонтактнойИнформации") <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ГруппаЗначенийКИ = Элементы.Добавить("ЗначенияКонтактнойИнформации", Тип("ГруппаФормы"), Элементы.КонтактнаяИнформация);
		ГруппаЗначенийКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗначенийКИ.Заголовок = НСтр("ru='Значения контактной информации'");
		ГруппаЗначенийКИ.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаЗначенийКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаЗначенийКИ.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
		ГруппаЗначенийКИ.ОтображатьЗаголовок = Ложь;
		
		Если КонтактнаяИнформацияУНФКлиентСервер.СписокВидовДляДобавленияКонтактнойИнформации(Форма).Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИмяКоманды = "ДобавитьПолеКонтактнойИнформации";
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Заголовок = НСтр("ru='+ телефон, адрес'");
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияУНФВыполнитьКоманду";
		
		Кнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы.КонтактнаяИнформация);
		Кнопка.ИмяКоманды = ИмяКоманды;
		Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		Кнопка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	Иначе
		
		Для каждого Идентификатор Из Форма.ИдентификаторыСтрокТабличнойЧасти Цикл
			
			ГруппаЗначенийКИНаименование = "КонтактнаяИнформация" + Идентификатор.Значение + "ЗначенияКонтактнойИнформации";
			
			ГруппаЗначенийКИ = Элементы.Найти(ГруппаЗначенийКИНаименование);
			
			Если ГруппаЗначенийКИ <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ГруппаЗначенийКИ = Элементы.Добавить(ГруппаЗначенийКИНаименование, Тип("ГруппаФормы"), Элементы["КонтактнаяИнформация" + Идентификатор.Значение]);
			ГруппаЗначенийКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЗначенийКИ.Заголовок = НСтр("ru='Значения контактной информации'");
			ГруппаЗначенийКИ.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаЗначенийКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаЗначенийКИ.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
			ГруппаЗначенийКИ.ОтображатьЗаголовок = Ложь;
			
			Если КонтактнаяИнформацияУНФКлиентСервер.СписокВидовДляДобавленияКонтактнойИнформации(Форма).Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКоманды = "ДобавитьПолеКонтактнойИнформации_" + Идентификатор.Значение;
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			Команда.Заголовок = НСтр("ru='+ телефон, адрес'");
			Команда.Действие = "Подключаемый_КонтактнаяИнформацияУНФВыполнитьКоманду";
			
			ГруппаДобавитьКИ = Элементы.Добавить("Группа" + ИмяКоманды, Тип("ГруппаФормы"), Элементы["КонтактнаяИнформация" + Идентификатор.Значение]);
			ГруппаДобавитьКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаДобавитьКИ.Заголовок = НСтр("ru='Значения контактной информации'");
			ГруппаДобавитьКИ.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаДобавитьКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаДобавитьКИ.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
			ГруппаДобавитьКИ.ОтображатьЗаголовок = Ложь;
			ГруппаДобавитьКИ.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
			
			Кнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаДобавитьКИ);
			Кнопка.ИмяКоманды = ИмяКоманды;
			Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			Кнопка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьДругиеЗаполненныеСтрокиВидаКИ(Знач Форма, Знач ПроверяемаяСтрока, Знач ВидКонтактнойИнформации)
	
	ВсеСтрокиЭтогоВида = Форма.КонтактнаяИнформация.НайтиСтроки(
		Новый Структура("Вид", ВидКонтактнойИнформации));
	
	Для Каждого СтрокаВида Из ВсеСтрокиЭтогоВида Цикл
		
		Если СтрокаВида <> ПроверяемаяСтрока И Не ПустаяСтрока(СтрокаВида.Представление) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДобавитьКомандуКонтекстногоМеню(Форма, ИмяКоманды, Картинка, Заголовок, Подсказка, ПолеВладелец)
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Картинка = Картинка;
		Команда.Заголовок = Заголовок;
		Команда.Подсказка = Подсказка;
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияУНФВыполнитьКоманду";
	КонецЕсли;
	
	Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ПолеВладелец.КонтекстноеМеню);
	Кнопка.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

// Функция возвращает юридический и фактический адреса, указанной организации.
//
// Параметры:
//			Организации - Массив ссылок или ссылка на элемент справочника Организации.
//
// Возвращаемое значение:
//			Соответствие:
//				Ключ 		- СправочникСсылка.Организации
//				Значение 	- Соответствие
//					Ключ - СправочникСсылка.ВидыКонтактнойИнформации
//					Значение - Структура
//						Представление
//						Город
//						Значение
//
Функция АдресаОрганизаций(Организации) Экспорт
	
	ВозвращаемоеЗначение = Новый Соответствие;
	
	ТипСправочникСсылкаОрганизации = Тип("СправочникСсылка.Организации");
	
	// Определение соответствия видов контактной информации в зависимости от 
	// типа объекта, содержащего контактную информацию.
	СоответствиеАдресовОрганизаций = Новый Соответствие;
	
	СоответствиеВидов = Новый Соответствие;
	СоответствиеВидов.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, 
		Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	СоответствиеВидов.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, 
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	СоответствиеАдресовОрганизаций.Вставить(ТипСправочникСсылкаОрганизации, СоответствиеВидов);
	
	
	// Деление организаций по типу объекта, содержащего контактную информацию.
	КоллекцияПоТипам = Новый Соответствие;
			
	Если ТипЗнч(Организации) = ТипСправочникСсылкаОрганизации Тогда
		КоллекцияПоТипам.Вставить(ТипСправочникСсылкаОрганизации, 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организации));
	Иначе
		КоллекцияПоТипам.Вставить(ТипСправочникСсылкаОрганизации, Организации);
	КонецЕсли;
	
	// Получение адресов
	Для каждого КоллекцияПоТипу Из КоллекцияПоТипам Цикл
		
		Если КоллекцияПоТипу.Ключ = Тип("СправочникСсылка.Организации") Тогда
			МассивСсылок = КоллекцияПоТипу.Значение;
			СоответствиеВидовКИ = СоответствиеАдресовОрганизаций.Получить(ТипСправочникСсылкаОрганизации);
		Иначе
			МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(КоллекцияПоТипу.Значение, "Ключ");
			СоответствиеВидовКИ = СоответствиеАдресовОрганизаций.Получить(КоллекцияПоТипу.Ключ);
		КонецЕсли;
		
		ВидыАдресов = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеВидовКИ, "Ключ");
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Адреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивСсылок,
			,
			ВидыАдресов,
			ТекущаяДатаСеанса());
			
		УправлениеКонтактнойИнформацией.СоздатьВТКонтактнаяИнформация(Запрос.МенеджерВременныхТаблиц, 
			МассивСсылок,
			,
			ВидыАдресов,
			ТекущаяДатаСеанса());
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Объект КАК Объект,
			|	КонтактнаяИнформация.Вид,
			|	КонтактнаяИнформация.Представление,
			|	КонтактнаяИнформация.Значение
			|ИЗ
			|	ВТКонтактнаяИнформация КАК КонтактнаяИнформация
			|ИТОГИ ПО
			|	Объект";
			
		ВыборкаОрганизаций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОрганизаций.Следующий() Цикл
			
			СоответствиеАдресовОрганизации = Новый Соответствие;
			ВыборкаПоВидам = Адреса.НайтиСтроки(Новый Структура("Объект", ВыборкаОрганизаций.Объект));
			
			Для Каждого Вид Из  ВыборкаПоВидам Цикл
				
				СтруктураАдреса = Новый Структура("Представление,Город,Значение", "", "", "");
				ЗаполнитьЗначенияСвойств(СтруктураАдреса, Вид);
				
				АдресСтруктура = РаботаСАдресами.СведенияОбАдресе(Вид.Значение);
				
				Сокращение = "";
				Если АдресСтруктура.Свойство("Город") И НЕ ПустаяСтрока(АдресСтруктура.Город) Тогда
					СтруктураАдреса.Город = АдресСтруктура.Город;
					АдресСтруктура.Свойство("ГородСокращение", Сокращение);
				ИначеЕсли АдресСтруктура.Свойство("НаселенныйПункт") И НЕ ПустаяСтрока(АдресСтруктура.НаселенныйПункт) Тогда
					СтруктураАдреса.Город = АдресСтруктура.НаселенныйПункт;
					АдресСтруктура.Свойство("НаселенныйПунктСокращение", Сокращение);
				ИначеЕсли АдресСтруктура.Свойство("Регион") И НЕ ПустаяСтрока(АдресСтруктура.Регион) Тогда
					СтруктураАдреса.Город = АдресСтруктура.Регион;
					АдресСтруктура.Свойство("РегионСокращение", Сокращение);
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтруктураАдреса.Город) И НЕ ПустаяСтрока(Сокращение) Тогда
					СтруктураАдреса.Город = Сокращение + ". " + Лев(СтруктураАдреса.Город, СтрДлина(СтруктураАдреса.Город) - СтрДлина(Сокращение) - 1);
				КонецЕсли; 
				
				ВидАдреса = СоответствиеВидовКИ.Получить(Вид.Вид);
				СоответствиеАдресовОрганизации.Вставить(ВидАдреса, СтруктураАдреса);
				
			КонецЦикла; 
			
			Если КоллекцияПоТипу.Ключ = Тип("СправочникСсылка.Организации") Тогда
				СсылкаНаОрганизацию = ВыборкаОрганизаций.Объект;
			Иначе
				СсылкаНаОрганизацию = КоллекцияПоТипу.Значение.Получить(ВыборкаОрганизаций.Объект);
			КонецЕсли;
			ВозвращаемоеЗначение.Вставить(СсылкаНаОрганизацию, СоответствиеАдресовОрганизации);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структура адреса, поставляемую методом АдресаОрганизаций, по
// переданным параметрам Организации и виду адреса.
//
// Параметры:
//		АдресаОрганизаций - Коллекция адресов, полученная с помощью метода АдресаОрганизаций.
//		Организация
//		ВидАдреса - СправочникСсылка.ВидыКонтактнойИнформации
//
// ВозвращаемоеЗначение:
//		Структура - Ключи структуры описаны в описании метода АдресаОрганизаций.
//
Функция АдресОрганизации(АдресаОрганизаций, Организация, ВидАдреса) Экспорт
	
	АдресОрганизации =Новый Структура("Представление,Город,Значение", "", "", "");
	
	АдресаОрганизации = АдресаОрганизаций.Получить(Организация);
	Если АдресаОрганизации <> Неопределено Тогда
		Адрес = АдресаОрганизации.Получить(ВидАдреса);
		Если Адрес <> Неопределено Тогда
				АдресОрганизации = Адрес;
		КонецЕсли; 
	КонецЕсли; 
		
	Возврат АдресОрганизации;
	
КонецФункции

Процедура СоздатьВТКонтактнаяИнформация(МенеджерВременныхТаблиц, МассивОбъектов, ТипыКонтактнойИнформации = Неопределено, ВидыКонтактнойИнформации = Неопределено, Дата = Неопределено) Экспорт
	
	Если ТипЗнч(МассивОбъектов) <> Тип("Массив") ИЛИ МассивОбъектов.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Неверное значение для массива владельцев контактной информации.'");
	КонецЕсли;
	
	ОбъектыСГруппировкойПоТипам = Новый Соответствие;
	Для каждого Ссылка Из МассивОбъектов Цикл
		ТипОбъекта = ТипЗнч(Ссылка);
		НайденныйОбъект = ОбъектыСГруппировкойПоТипам.Получить(ТипОбъекта);
		Если НайденныйОбъект = Неопределено Тогда
			НаборСсылок = Новый Массив;
			НаборСсылок.Добавить(Ссылка);
			ОбъектыСГруппировкойПоТипам.Вставить(ТипОбъекта, НаборСсылок);
		Иначе
			НайденныйОбъект.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	ТекстЗапросаПодготовкаДанных = "";
	СтрокаРАЗРЕШЕННЫЕ = " РАЗРЕШЕННЫЕ ";
	СтрокаВременнойТаблицы = "ПОМЕСТИТЬ ВТКонтактнаяИнформация";
	
	Для каждого ОбъектСКонтактнойИнформацией Из ОбъектыСГруппировкойПоТипам Цикл
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ОбъектСКонтактнойИнформацией.Ключ);
		Если МетаданныеОбъекта.ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда
			ВызватьИсключение  МетаданныеОбъекта.Имя + " " + НСтр("ru = 'не содержит контактную информацию.'");
		КонецЕсли;
		ИмяТаблицы = МетаданныеОбъекта.Имя;
		Если МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") <> Неопределено Тогда
			ТекстЗапросаПодготовкаДанных = ТекстЗапросаПодготовкаДанных + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Ссылка КАК Объект,
			|	КонтактнаяИнформация.Вид КАК Вид,
			|	МАКСИМУМ(КонтактнаяИнформация.ДействуетС) КАК ДействуетС
			|ПОМЕСТИТЬ СрезКонтактнойИнформации" + ИмяТаблицы + "
			|ИЗ
			|	" + МетаданныеОбъекта.ПолноеИмя() + ".КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка В (&МассивОбъектов" + ИмяТаблицы + ")
			|	И КонтактнаяИнформация.ДействуетС <= &ДействуетС
			|	И КонтактнаяИнформация.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
			|	И КонтактнаяИнформация.Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	КонтактнаяИнформация.Вид, КонтактнаяИнформация.Ссылка
			|;"
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "";
	Для каждого ОбъектСКонтактнойИнформацией Из ОбъектыСГруппировкойПоТипам Цикл
		ТекстЗапроса = ТекстЗапроса + ?(НЕ ПустаяСтрока(ТекстЗапроса), Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС, "");
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ОбъектСКонтактнойИнформацией.Ключ);
		ИмяТаблицы = МетаданныеОбъекта.Имя;
		
		ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти = МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ИдентификаторСтрокиТабличнойЧасти") <> Неопределено;
		
		Если МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") <> Неопределено Тогда
			Если ТипЗнч(Дата) <> Тип("Дата") Тогда
				ВызватьИсключение НСтр("ru = 'Для получения контактной информации, хранящей историю изменений,
					|требуется указывать дату, с которой действует запись контактной информации.'");
			КонецЕсли;
			
			УсловияОтбора = ?(ВидыКонтактнойИнформации = Неопределено, "", " КонтактнаяИнформация.Вид В (&ВидыКонтактнойИнформации)");
			Если ПустаяСтрока(УсловияОтбора) Тогда
				УсловиеИ = "";
			Иначе
				УсловиеИ = " И ";
			КонецЕсли;
			УсловияОтбора = УсловияОтбора + ?(ТипыКонтактнойИнформации = Неопределено, "", УсловиеИ + " КонтактнаяИнформация.Тип В (&ТипыКонтактнойИнформации)");
			Если НЕ ПустаяСтрока(УсловияОтбора) Тогда
				УсловияОтбора = " ГДЕ " + УсловияОтбора;
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ " + СтрокаРАЗРЕШЕННЫЕ + "
			|	КонтактнаяИнформация.Ссылка КАК Объект,
			|	КонтактнаяИнформация.Вид КАК Вид,
			|	КонтактнаяИнформация.Тип КАК Тип,
			|	КонтактнаяИнформация.ДействуетС КАК ДействуетС,
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	КонтактнаяИнформация.Значение,
			|	0 КАК ИдентификаторСтрокиТабличнойЧасти
			|	" + СтрокаВременнойТаблицы + "
			|ИЗ
			|	СрезКонтактнойИнформации" + ИмяТаблицы + " КАК СрезКонтактнойИнформации
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + МетаданныеОбъекта.ПолноеИмя() + ".КонтактнаяИнформация КАК КонтактнаяИнформация
			|		ПО СрезКонтактнойИнформации.Вид = КонтактнаяИнформация.Вид
			|			И СрезКонтактнойИнформации.ДействуетС = КонтактнаяИнформация.ДействуетС
			|			И СрезКонтактнойИнформации.Объект = КонтактнаяИнформация.Ссылка " + УсловияОтбора;
		Иначе
			ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ " + СтрокаРАЗРЕШЕННЫЕ + "
			|	КонтактнаяИнформация.Ссылка КАК Объект,
			|	КонтактнаяИнформация.Вид КАК Вид,
			|	КонтактнаяИнформация.Тип КАК Тип,
			|	ДАТАВРЕМЯ(1,1,1) КАК ДействуетС,
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	КонтактнаяИнформация.Значение КАК Значение,
			|	0 КАК ИдентификаторСтрокиТабличнойЧасти
			|	" + СтрокаВременнойТаблицы + "
			|ИЗ
			|	" + МетаданныеОбъекта.ПолноеИмя() + ".КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			| КонтактнаяИнформация.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
			| И КонтактнаяИнформация.Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)
			| И КонтактнаяИнформация.Ссылка В (&МассивОбъектов" + ИмяТаблицы + ")
			|	" + ?(ТипыКонтактнойИнформации = Неопределено, "", "И КонтактнаяИнформация.Тип В (&ТипыКонтактнойИнформации)") + "
			|	" + ?(ВидыКонтактнойИнформации = Неопределено, "", "И КонтактнаяИнформация.Вид В (&ВидыКонтактнойИнформации)") + "
			|";
		КонецЕсли;
		СтрокаРАЗРЕШЕННЫЕ ="";
		СтрокаВременнойТаблицы = "";
		
		Если ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				"0 КАК ИдентификаторСтрокиТабличнойЧасти",
				"КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти КАК ИдентификаторСтрокиТабличнойЧасти");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивОбъектов" + ИмяТаблицы, ОбъектСКонтактнойИнформацией.Значение);
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапросаПодготовкаДанных + ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДействуетС", Дата);
	Запрос.УстановитьПараметр("ТипыКонтактнойИнформации", ТипыКонтактнойИнформации);
	Запрос.УстановитьПараметр("ВидыКонтактнойИнформации", ВидыКонтактнойИнформации);
	Запрос.Выполнить();
КонецПроцедуры

#КонецОбласти
