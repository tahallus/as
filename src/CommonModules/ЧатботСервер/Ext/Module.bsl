
#Область ПрограммныйИнтерфейс

// Возвращает предзаполненный текст шагов (ответов) для записи на услугу
//
// Возвращаемое значение:
//   ТаблицаЗначений - тексты ответов шагов записи на услугу
//
Функция СписокШагов() Экспорт
		
	ТаблицаШагов = Новый ТаблицаЗначений;
	ТаблицаШагов.Колонки.Добавить("Порядок");
	ТаблицаШагов.Колонки.Добавить("ПорядокРазделов");
	ТаблицаШагов.Колонки.Добавить("Шаг");
	ТаблицаШагов.Колонки.Добавить("Команда");
	ТаблицаШагов.Колонки.Добавить("ТекстСообщения");
	ТаблицаШагов.Колонки.Добавить("Подсказка");
	
	ДобавитьСтроку(ТаблицаШагов,
	1,
	1,
	"Группа",
	"/group",
	НСтр("ru='Здравствуйте, <имя>!
		|Я чат-бот <имябота>, помогу записаться на услуги к нашим мастерам.
		|Выберите раздел услуг:'"), // АПК:1036 для совместимости
	НСтр("ru='Если услуг много, можно распределить их по нескольким группам (Родитель в Номенклатуре), чтобы клиент выбирал сначала раздел услуг.
		|Если все услуги в одной группе, то этот шаг пропускается, и клиент сразу переходит к выбору услуги.
		|Параметры: <имя> - имя клиента, <имябота> - имя чат-бота'") // АПК:1036 для совместимости
	);
	
	ДобавитьСтроку(ТаблицаШагов,
	2,
	1,
	"Услуга",
	"/service",
	НСтр("ru='/ - доступные команды
		|Выбран раздел: <группа>
		|Выберите услугу:'"),
	НСтр("ru='Выберите в настройках число колонок, чтобы названия услуг помещались на кнопки по ширине.
		|Длительность услуг должна быть кратной минимальному интервалу в графике ресурса (мастера).'"));
	
	ДобавитьСтроку(ТаблицаШагов,
	3,
	2,
	"Ресурс",
	"/staff",
	НСтр("ru='/ - доступные команды
		|Выберите мастера:'"),
	НСтр("ru='Один ресурс (мастер) может выполнять разные услуги. Если услуга занимает несколько минимальных интервалов, все они будут заняты после записи.'"));
	
	ДобавитьСтроку(ТаблицаШагов,
	4,
	3,
	"Дата",
	"/calendar",
	НСтр("ru='/ - доступные команды
		|Выберите дату записи:'"),
	НСтр("ru='Показываются даты, в которых есть доступное время для записи. Календарь можно пролистывать стрелками.'"));
	
	ДобавитьСтроку(ТаблицаШагов,
	5,
	3,
	"Время",
	"/calendar",
	НСтр("ru='/ - доступные команды
		|Выберите время записи:'"),
	НСтр("ru='Время выбирается после даты.'"));
	
	ДобавитьСтроку(ТаблицаШагов,
	6,
	4,
	"Запись",
	"",
	НСтр("ru='Нажмите кнопку `Записаться`, чтобы подтвердить запись.
		|Вы выбрали услугу: <услуга>
		|у мастера <ресурс>
		|<дата> на <время>'"),
	НСтр("ru='После записи в 1С создается контакт с номером телефона, и заказ-наряд, который бронирует выбранное время записи.'"));
	
	ДобавитьСтроку(ТаблицаШагов,
	7,
	5,
	"Подтверждение",
	"",
	НСтр("ru='Вы успешно записаны!
		|Номер заказа: <номерзаказа>
		|Ждем вас в нашем салоне!
		|
		|/start - записаться еще раз'"),
	НСтр("ru='Параметры: <номерзаказа> - номер заказа в 1С'"));
	
	ДобавитьСтроку(ТаблицаШагов,
	0,
	6,
	"Контакты",
	"/contacts",
	НСтр("ru='Здравствуйте, <имя>!
		|Вы можете связаться с нами:'"),	
	НСтр("ru='Укажите здесь телефон, адрес, или другую контактную информацию'")
	);
	
	ДобавитьСтроку(ТаблицаШагов,
	0,
	7,
	"Команды",
	"/",
	НСтр("ru='Доступные команды:
		|/contacts - наш телефон и адрес
		|/start - Записаться на услугу
		|
		|/group - выбрать/сменить раздел услуг
		|/service - выбрать/сменить услугу
		|/staff - выбрать/сменить мастера
		|/calendar - выбрать/сменить дату/время
		|
		|/cabinet - посмотреть предыдущие записи'"),
	НСтр("ru='Этот ответ показывается, если клиент написал / или команду, которая не предусмотрена'")
	);	
	
	ДобавитьСтроку(ТаблицаШагов,
	0,
	8,
	"Кабинет",
	"/",
	НСтр("ru='Заказ <номерзаказа> <дата> на <время>
		|услуга: <услуга>
		|мастер <ресурс>'"),
	НСтр("ru=''")
	);	
	
	Возврат ТаблицаШагов;
	
КонецФункции

// Возвращает текст ответа шага записи на услугу и заменяет шаблоны в тексте на значения параметров
//
// Параметры:
//  Шаг - Строка с именем шага,
//  ПоляЧата - структура с параметрами и значениями полей текущей записи
//  Параметры - структура с параметрами настроек чат-бота
//
// Возвращаемое значение:
//   Строка - текст ответа шага
//
Функция ТекстОтветаШага(Шаг, ПоляЧата, Параметры) Экспорт
	
	ШагПредставление = Параметры.СписокШагов.Найти(Шаг, "Шаг").ТекстСообщения;
	
	ШагПредставление = СтрЗаменить(ШагПредставление, "<имя>", Параметры.Имя);
	ШагПредставление = СтрЗаменить(ШагПредставление, "<имябота>", Параметры.ИмяБота); // АПК:1036 для обратной совместимости
	ШагПредставление = СтрЗаменить(ШагПредставление, "<группа>", ПоляЧата.Группа);
	ШагПредставление = СтрЗаменить(ШагПредставление, "<услуга>", ПоляЧата.Услуга);
	ШагПредставление = СтрЗаменить(ШагПредставление, "<ресурс>", ПоляЧата.Ресурс);
	ШагПредставление = СтрЗаменить(ШагПредставление, "<дата>", Формат(ПоляЧата.ДатаВремяЗаписи, НСтр("ru='ДФ=dd.MM.yyyy'")));
	ШагПредставление = СтрЗаменить(ШагПредставление, "<время>", Формат(ПоляЧата.ДатаВремяЗаписи,НСтр("ru='ДФ=HH:mm'")));
	ШагПредставление = СтрЗаменить(ШагПредставление, "<телефон>", ПоляЧата.Телефон);
	ШагПредставление = СтрЗаменить(ШагПредставление, "<номерзаказа>", ПоляЧата.НомерЗаказа);
	
	Возврат ШагПредставление;
	
КонецФункции	

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// для файловой версии в режиме LongPolling
Процедура ПолучитьСообщенияЧатботаТест() Экспорт
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЧатботов") Тогда
		Возврат;
	КонецЕсли;
	
	СохраненныеНастройки = Константы.НастройкиЧатботов.Получить();
	Если СохраненныеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НастройкиЧатбота = СохраненныеНастройки.Получить();
	
	ВходящееСообщение = ПолучитьСообщенияЧатбота(НастройкиЧатбота);
	
	Если ВходящееСообщение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВходящееСообщение.Количество() > 0 Тогда
		
		Данные = ВходящееСообщение.Получить(ВходящееСообщение.ВГраница());
		ИсходящееСообщение = ОбработатьВходящееСообщение(Данные);
		Если ЗначениеЗаполнено(ИсходящееСообщение) Тогда
			ОтправитьСообщение(ИсходящееСообщение, НастройкиЧатбота);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// для фреш-версии в режиме webhook
Функция ОбработатьВходящееСообщение(СтруктураДанные) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЯвляетсяБотом = Ложь;
	Если СтруктураДанные.Получить("message") <> Неопределено Тогда
		ЯвляетсяБотом = СтруктураДанные.Получить("message").Получить("from").Получить("is_bot");
	ИначеЕсли СтруктураДанные.Получить("callback_query") <> Неопределено Тогда
		ЯвляетсяБотом = СтруктураДанные.Получить("callback_query").Получить("from").Получить("is_bot");
	КонецЕсли;
	Если ЯвляетсяБотом Тогда
		// Пропускаем сообщения от ботов
		Возврат Неопределено;
	КонецЕсли;
	
	// Параметры и настройки, которые нужны для обработки сообщения
	Параметры = Новый Структура;
	ПрочитатьПоляСообщения(Параметры, СтруктураДанные);
	Если Параметры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПрочитатьНастройкиЧатботов(Параметры);
	
	// Поля сообщения, которые сохраняются в рег.ЧатыМессенджеров и по данным которых формируется запись на услугу
	ПоляЧата = ПрочитатьСохраненныеПоляЧата(Параметры);
	
	ТекстСообщения = Параметры.ТекстСообщения;
	ИдСообщения = Параметры.ИдСообщения; 
	ТекущийМесяц = НачалоМесяца(ТекущаяДатаСеанса());
	СообщениеСКнопками = ПоляЧата.СообщениеСКнопками;
	////////////////////////////////////////
	
	ТекстОтвета = "";
	Если ТекстСообщения = "/contacts" Тогда
		
		структураОтвет = Контакты(ПоляЧата, Параметры);
		
	ИначеЕсли ТекстСообщения = "/" Тогда
		
		структураОтвет = Команды(ПоляЧата, Параметры);
		
	ИначеЕсли ТекстСообщения = "/start" ИЛИ ПоляЧата.ДатаВремяСоздания = Неопределено Тогда
		
		ПоляЧата.КонтактноеЛицо = НайтиСоздатьКонтакт(Параметры);
		ПоляЧата.ДатаВремяСоздания = ТекущаяДатаСеанса();
		
		ПоляЧата.Вставить("Группа", Неопределено);
		ПоляЧата.Вставить("Услуга", Неопределено);
		ПоляЧата.Вставить("Ресурс", Неопределено);
		ПоляЧата.Вставить("ДатаВремяЗаписи", Неопределено);
		
		структураОтвет = СледующийШаг(ПоляЧата, Параметры);
		ПоляЧата.СообщениеСКнопками = Число(ИдСообщения) + 1;
		
	ИначеЕсли ТекстСообщения = "/group" Тогда
		
		ОтправитьСообщение(УдалитьСообщение(Параметры.ИдЧата, СообщениеСКнопками), Параметры);
		
		ПоляЧата.Группа = Неопределено;
		ПоляЧата.Услуга = Неопределено;
		
		структураОтвет = ВыбратьГруппу(ПоляЧата, Параметры);
		ПоляЧата.СообщениеСКнопками = Число(ИдСообщения) + 1;
				
	ИначеЕсли ТекстСообщения = "/service" Тогда
		
		ОтправитьСообщение(УдалитьСообщение(Параметры.ИдЧата, СообщениеСКнопками), Параметры);
		
		ПоляЧата.Услуга = Неопределено;
		
		структураОтвет = ВыбратьУслугу(ПоляЧата, Параметры);
		ПоляЧата.СообщениеСКнопками = Число(ИдСообщения) + 1;
		
	ИначеЕсли ТекстСообщения = "/staff" Тогда
		
		ОтправитьСообщение(УдалитьСообщение(Параметры.ИдЧата, СообщениеСКнопками), Параметры);
		
		ПоляЧата.Ресурс = Неопределено;
		
		структураОтвет = ВыбратьРесурс(ПоляЧата, Параметры);
		ПоляЧата.СообщениеСКнопками = Число(ИдСообщения) + 1;
		
	ИначеЕсли Лев(ТекстСообщения, 9) = "/empty" Тогда
		
		// нажатие на пустой клетке - ничего не делать, пропустить ответ
		структураОтвет = Новый Структура;
		ПоляЧата.СообщениеСКнопками = ИдСообщения;
		
	ИначеЕсли Лев(ТекстСообщения, 9) = "/calendar" Тогда
		
		ОтправитьСообщение(УдалитьСообщение(Параметры.ИдЧата, СообщениеСКнопками), Параметры);
		
		ПоляЧата.ДатаВремяЗаписи = Неопределено;
		
		структураОтвет = ВыбратьДату(ПоляЧата, Параметры);
		ПоляЧата.СообщениеСКнопками = ИдСообщения;
		
	ИначеЕсли Лев(ТекстСообщения, 9) = "Календарь" Тогда
		// пролистать месяц
		Параметры.ТекущийМесяц = ДатаИзСтрокиЛюбогоФормата(СтрЗаменить(ТекстСообщения, "Календарь", ""));
		
		структураОтвет = ИзменитьСообщение(Параметры.ИдЧата, ИдСообщения, ТекстОтвета(ПоляЧата, Параметры), 
			ЗаполнитьДниМесяца(ПоляЧата, Параметры));
		
		ПоляЧата.СообщениеСКнопками = ИдСообщения;
		
	ИначеЕсли Лев(ТекстСообщения, 10) = "Г_Страница" Тогда
		// переход между группами
		структураОтвет = ПерелистнутьСтраницуГруппы(ПоляЧата, Параметры);
		ПоляЧата.СообщениеСКнопками = ИдСообщения;
		
	ИначеЕсли Лев(ТекстСообщения, 10) = "У_Страница" Тогда
		// переход между услугами
		структураОтвет = ПерелистнутьСтраницуУслуги(ПоляЧата, Параметры);			
		ПоляЧата.СообщениеСКнопками = ИдСообщения;
				
	ИначеЕсли Лев(ТекстСообщения, 2) = "Г_" Тогда
		// выбрана группа
		ВыбраннаяГруппа = СтрЗаменить(ТекстСообщения, "Г_", "");
		ПоляЧата.Группа = Параметры.Группы.НайтиСтроки(Новый Структура("ГруппаНаименование", ВыбраннаяГруппа))[0].Группа;
		
		ОтправитьСообщение(УдалитьСообщение(Параметры.ИдЧата, Параметры.ИдСообщения), Параметры);
		ПоляЧата.СообщениеСКнопками = Число(ПоляЧата.СообщениеСКнопками) + 1;
		
		структураОтвет = СледующийШаг(ПоляЧата, Параметры);
		
	ИначеЕсли Лев(ТекстСообщения, 2) = "У_" Тогда
		// выбрана услуга
		ВыбраннаяУслуга = СтрЗаменить(ТекстСообщения, "У_", "");
		ПоляЧата.Услуга = Параметры.Услуги.НайтиСтроки(Новый Структура("УслугаНаименование", ВыбраннаяУслуга))[0].Услуга;
		
		ОтправитьСообщение(УдалитьСообщение(Параметры.ИдЧата, Параметры.ИдСообщения), Параметры);
		ПоляЧата.СообщениеСКнопками = Число(ПоляЧата.СообщениеСКнопками) + 1;
		
		Если Параметры.КартинкиУслуг Тогда
			УдалосьОтправитьКартинку = ОтправитьКартинку(ПоляЧата.Услуга, ПоляЧата.Услуга.ФайлКартинки, ПоляЧата, Параметры);
			ПоляЧата.СообщениеСКнопками = Число(ПоляЧата.СообщениеСКнопками) + 1;
		КонецЕсли;
		
		структураОтвет = СледующийШаг(ПоляЧата, Параметры);
		
	ИначеЕсли Лев(ТекстСообщения, 2) = "Р_" Тогда
		// выбран ресурс
		ВыбранныйРесурс = СтрЗаменить(ТекстСообщения, "Р_", "");
		ПоляЧата.Ресурс = Параметры.Ресурсы.НайтиСтроки(Новый Структура("РесурсНаименование", ВыбранныйРесурс))[0].Ресурс;
		
		ОтправитьСообщение(УдалитьСообщение(Параметры.ИдЧата, Параметры.ИдСообщения), Параметры);
		ПоляЧата.СообщениеСКнопками = Число(ПоляЧата.СообщениеСКнопками) + 1;
		
		Если Параметры.КартинкиРесурсов Тогда
			ФайлКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоляЧата.Ресурс, "ФайлКартинки");
			
			УдалосьОтправитьКартинку = ОтправитьКартинку(ПоляЧата.Ресурс, ФайлКартинки, ПоляЧата, Параметры);
			ПоляЧата.СообщениеСКнопками = Число(ПоляЧата.СообщениеСКнопками) + 1;
		КонецЕсли;
		
		структураОтвет = СледующийШаг(ПоляЧата, Параметры);
				
	ИначеЕсли Лев(ТекстСообщения, 5) = "Дата_" Тогда
		// выбран день
		ПоляЧата.ДатаВремяЗаписи = ДатаИзСтрокиЛюбогоФормата(СтрЗаменить(ТекстСообщения, "Дата_", ""));
		
		ОтправитьСообщение(УдалитьСообщение(Параметры.ИдЧата, Параметры.ИдСообщения), Параметры);
		ПоляЧата.СообщениеСКнопками = Число(ПоляЧата.СообщениеСКнопками) + 1;
		
		структураОтвет = СледующийШаг(ПоляЧата, Параметры);

	ИначеЕсли Лев(ТекстСообщения, 6) = "Время_" Тогда
		// выбрано время
		ВыбранноеВремя = СтрЗаменить(ТекстСообщения, "Время_", "");
		Если ПоляЧата.ДатаВремяЗаписи = Неопределено Тогда
			ПоляЧата.ДатаВремяЗаписи = НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
		ПоляЧата.ДатаВремяЗаписи = НачалоДня(ПоляЧата.ДатаВремяЗаписи) + Лев(ВыбранноеВремя, 2) * 3600 + Сред(ВыбранноеВремя, 4,5) * 60;
		
		ОтправитьСообщение(УдалитьСообщение(Параметры.ИдЧата, Параметры.ИдСообщения), Параметры);
		ПоляЧата.СообщениеСКнопками = Число(ПоляЧата.СообщениеСКнопками) + 1;
		
		структураОтвет = СледующийШаг(ПоляЧата, Параметры);

	ИначеЕсли ТекстСообщения = "contact" Тогда
		
		// подтвердить запись
		Если Параметры.ПоляСообщения.Получить("contact") <> Неопределено Тогда
			ПоляЧата.Телефон = Параметры.ПоляСообщения.Получить("contact").Получить("phone_number");
			
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ПоляЧата.КонтактноеЛицо, ПоляЧата.Телефон, 
				Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица, ТекущаяДатаСеанса(), Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПоляЧата.Услуга) Тогда
			ПоляЧата.Длительность = Параметры.Услуги.НайтиСтроки(Новый Структура("Услуга", ПоляЧата.Услуга))[0].Длительность;
		КонецЕсли;
		
		НомерЗаказа = СоздатьОбновитьЗаказ(ПоляЧата, Параметры);
		
		ПоляЧата.Вставить("НомерЗаказа", НомерЗаказа);
		ПоляЧата.Вставить("Подтверждена", Истина);
		
		структураОтвет = СледующийШаг(ПоляЧата, Параметры);
		
	ИначеЕсли ТекстСообщения = "/cabinet" Тогда
		
		структураОтвет = Кабинет(ПоляЧата, Параметры);
		
	ИначеЕсли Лев(ТекстСообщения, 6) =  "Отмена" Тогда
		
		Если СтрНайти(ТекстСообщения, "_Отменить") > 0 Тогда
			структураОтвет = ОтменаЗаказа(ТекстСообщения, ПоляЧата, Параметры);
		Иначе
			// показать контакты с телефоном
			структураОтвет = Контакты(ПоляЧата, Параметры);
		КонецЕсли;
		
	ИначеЕсли ДеньНеделиКалендаря(ТекстСообщения) Тогда
		// нажатие на день недели в календарике, ничего делать не надо
	Иначе
		структураОтвет = Команды(ПоляЧата, Параметры);
	КонецЕсли;
	
	СохранитьСостояниеВРегистр(ПоляЧата, Параметры);
	
	Возврат  структураОтвет;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Запросы

Функция ДанныеОбУслугахМастерах()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиЗаписьНаУслуги.Услуга.Родитель КАК Группа,
	|	ПОДСТРОКА(НастройкиЗаписьНаУслуги.Услуга.Родитель.Наименование, 1, 29) КАК ГруппаНаименование
	|ИЗ
	|	РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|ГДЕ
	|	НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.Чатбот)
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиЗаписьНаУслуги.Услуга.Родитель,
	|	ПОДСТРОКА(НастройкиЗаписьНаУслуги.Услуга.Родитель.Наименование, 1, 29)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЗаписьНаУслуги.Услуга КАК Услуга,
	|	ПОДСТРОКА(НастройкиЗаписьНаУслуги.Услуга.Наименование, 1, 29) КАК УслугаНаименование,
	|	НастройкиЗаписьНаУслуги.Услуга.Родитель КАК Группа,
	|	НастройкиЗаписьНаУслуги.Услуга.Родитель.Наименование КАК ГруппаНаименование,
	|	НастройкиЗаписьНаУслуги.Длительность КАК Длительность
	|ИЗ
	|	РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|ГДЕ
	|	НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.Чатбот)
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиЗаписьНаУслуги.Услуга.Родитель,
	|	НастройкиЗаписьНаУслуги.Услуга,
	|	НастройкиЗаписьНаУслуги.Длительность,
	|	НастройкиЗаписьНаУслуги.Услуга.Родитель.Наименование,
	|	ПОДСТРОКА(НастройкиЗаписьНаУслуги.Услуга.Наименование, 1, 32),
	|	ПОДСТРОКА(НастройкиЗаписьНаУслуги.Услуга.Наименование, 1, 29)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЗаписьНаУслуги.Ресурс КАК Ресурс,
	|	ПОДСТРОКА(НастройкиЗаписьНаУслуги.Ресурс.Наименование, 1, 29) КАК РесурсНаименование,
	|	НастройкиЗаписьНаУслуги.Ресурс.Мощность КАК Мощность,
	|	НастройкиЗаписьНаУслуги.Ресурс.ФайлКартинки КАК ФайлКартинки
	|ИЗ
	|	РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|ГДЕ
	|	НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.Чатбот)
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиЗаписьНаУслуги.Ресурс,
	|	ПОДСТРОКА(НастройкиЗаписьНаУслуги.Ресурс.Наименование, 1, 29),
	|	НастройкиЗаписьНаУслуги.Ресурс.Мощность";
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Функция РазрезЗаписи(ИмяРазреза, ПоляЧата, Параметры)
	
	Если ИмяРазреза = "Дата" Тогда
		ДанныеГрафика = СвободныеДатыВремя(Параметры.ТекущийМесяц, ПоляЧата.Услуга, ПоляЧата.Ресурс, Параметры, Истина);
		ДанныеГрафика.Свернуть("ДатаВремяНачалаИнтервала");
		ДанныеГрафика.Сортировать("ДатаВремяНачалаИнтервала");
		Возврат ДанныеГрафика.ВыгрузитьКолонку("ДатаВремяНачалаИнтервала");
	КонецЕсли;
	
	Если ИмяРазреза = "Время" Тогда
		ДанныеГрафика = СвободныеДатыВремя(ПоляЧата.ДатаВремяЗаписи, ПоляЧата.Услуга, ПоляЧата.Ресурс, Параметры, Ложь);
		ДанныеГрафика.Свернуть("ДатаВремяНачалаИнтервала");
		ДанныеГрафика.Сортировать("ДатаВремяНачалаИнтервала");
		Возврат ДанныеГрафика.ВыгрузитьКолонку("ДатаВремяНачалаИнтервала");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоляЧата.ДатаВремяЗаписи) Тогда
		ДанныеГрафика = СвободныеДатыВремя(ПоляЧата.ДатаВремяЗаписи, ПоляЧата.Услуга, ПоляЧата.Ресурс, Параметры, Ложь);
		ДанныеГрафика.Свернуть(ИмяРазреза);
		Возврат ДанныеГрафика.ВыгрузитьКолонку(ИмяРазреза);
	КонецЕсли;
	
	Если ИмяРазреза = "Группа" Тогда
		Если ЗначениеЗаполнено(ПоляЧата.Ресурс) Тогда
			Возврат НайтиГруппыПоРесурсу(ПоляЧата.Ресурс);
		Иначе
			Возврат Параметры.Группы.ВыгрузитьКолонку("Группа");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяРазреза = "Ресурс" Тогда
		Если ЗначениеЗаполнено(ПоляЧата.Услуга) Тогда
			Возврат НайтиРесурсыПоУслуге(ПоляЧата.Услуга);
		Иначе
			Возврат Параметры.Ресурсы.ВыгрузитьКолонку("Ресурс");
		КонецЕсли;
	КонецЕсли; 
	
	Если ИмяРазреза = "Услуга" Тогда
		Если ЗначениеЗаполнено(ПоляЧата.Ресурс) Тогда
			Возврат НайтиУслугиПоРесурсу(ПоляЧата.Группа, ПоляЧата.Ресурс);
		ИначеЕсли ИспользоватьГруппы(ПоляЧата, Параметры) И ЗначениеЗаполнено(ПоляЧата.Группа) Тогда
			Возврат ОтобратьУслугиПоГруппе(Параметры.Услуги, ПоляЧата.Группа);
		Иначе
			Возврат Параметры.Услуги.ВыгрузитьКолонку("Услуга");
		КонецЕсли;
	КонецЕсли; 
	
КонецФункции

Функция ОтобратьУслугиПоГруппе(Услуги, Группа)
	
	МассивУслуг = Новый Массив;
	Для каждого строкаУслуг Из Услуги.НайтиСтроки(Новый Структура("Группа", Группа)) Цикл
		МассивУслуг.Добавить(строкаУслуг.Услуга);
	КонецЦикла;
	Возврат МассивУслуг;
	
КонецФункции
	
Функция СвободныеДатыВремя(ДатаЗаписи, Услуга, Ресурс, Параметры, ЗаМесяц = Истина, ТекущаяДатаВремя = Неопределено)
	
	Если Параметры.Свойство("ТекущаяДатаВремя") И ЗначениеЗаполнено(Параметры.ТекущаяДатаВремя) Тогда
		ТекущаяДатаВремя = Параметры.ТекущаяДатаВремя;
	Иначе
		ТекущаяДатаВремя = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК Поле
	|ПОМЕСТИТЬ Числа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Числа1.Поле + 4 * Числа2.Поле + 16 * Числа3.Поле + 64 * Числа4.Поле + 1 КАК Поле
	|ПОМЕСТИТЬ втЧисла256
	|ИЗ
	|	Числа КАК Числа1,
	|	Числа КАК Числа2,
	|	Числа КАК Числа3,
	|	Числа КАК Числа4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлючевыеРесурсы.Ссылка КАК Ресурс,
	|	ДанныеПроизводственногоКалендаря.Год КАК Год,
	|	ДанныеПроизводственногоКалендаря.Дата КАК ДЕНЬ,
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ втКалендарь
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|		ПО (ДанныеПроизводственногоКалендаря.Дата = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ)),
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год = ГОД(&ДатаЗаписи)
	|	И ДанныеПроизводственногоКалендаря.Дата >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И ДанныеПроизводственногоКалендаря.Дата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И КлючевыеРесурсы.Ссылка В(&Ресурс)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втКалендарь.Ресурс КАК Ресурс,
	|	втКалендарь.Год КАК Год,
	|	втКалендарь.ДЕНЬ КАК ДЕНЬ,
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	|	втКалендарь.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыРесурсов.РесурсПредприятия ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РабочийДеньГрафика
	|ПОМЕСТИТЬ втГрафикПлан
	|ИЗ
	|	втКалендарь КАК втКалендарь
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыРесурсов.СрезПоследних(&ДатаЗаписи, РесурсПредприятия В (&Ресурс)) КАК ГрафикиРаботыРесурсов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|			ПО (ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыРесурсов.ГрафикРаботы)
	|		ПО (втКалендарь.ДЕНЬ = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ))
	|			И (ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь = втКалендарь.ПроизводственныйКалендарь)
	|			И (ГрафикиРаботыРесурсов.РесурсПредприятия = втКалендарь.Ресурс)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втГрафикПлан.Ресурс, ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия) КАК Ресурс,
	|	НастройкиЗаписьНаУслуги.Услуга КАК Услуга,
	|	втГрафикПлан.Год КАК Год,
	|	втГрафикПлан.ДЕНЬ КАК ДЕНЬ,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала) КАК ВремяНачала,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания) КАК ВремяОкончания,
	|	НастройкиЗаписьНаУслуги.Длительность КАК Длительность
	|ПОМЕСТИТЬ втОтклонения
	|ИЗ
	|	втГрафикПлан КАК втГрафикПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО втГрафикПлан.Год = ОтклоненияОтГрафиковРаботыРесурсов.Год
	|			И втГрафикПлан.ДЕНЬ = ОтклоненияОтГрафиковРаботыРесурсов.День
	|			И втГрафикПлан.Ресурс = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|		ПО (НастройкиЗаписьНаУслуги.Ресурс = втГрафикПлан.Ресурс)
	|			И (НастройкиЗаписьНаУслуги.Услуга В (&Услуга))
	|ГДЕ
	|	РАЗНОСТЬДАТ(ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала), ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания), ЧАС) > 0
	|	И втГрафикПлан.ДЕНЬ >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И втГрафикПлан.ДЕНЬ < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтклонения.Услуга КАК Услуга,
	|	втОтклонения.Ресурс КАК Ресурс,
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) КАК ВремяНачалаИнтервала,
	|	втОтклонения.Год КАК Год,
	|	НАЧАЛОПЕРИОДА(втОтклонения.ВремяНачала, ДЕНЬ) КАК день,
	|	втОтклонения.ВремяНачала КАК ВремяНачала,
	|	втОтклонения.ВремяОкончания КАК ВремяОкончания,
	|	втОтклонения.Длительность КАК Длительность
	|ПОМЕСТИТЬ втГрафикСОтклонениями
	|ИЗ
	|	втОтклонения КАК втОтклонения,
	|	втЧисла256 КАК втЧисла256
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) >= втОтклонения.ВремяНачала
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) <= втОтклонения.ВремяОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСОтклонениями.Услуга КАК Услуга,
	|	втГрафикСОтклонениями.Ресурс КАК Ресурс,
	|	втГрафикСОтклонениями.Ресурс.Мощность КАК Мощность,
	|	втГрафикСОтклонениями.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	ДОБАВИТЬКДАТЕ(втГрафикСОтклонениями.ВремяНачалаИнтервала, МИНУТА, втГрафикСОтклонениями.Длительность) КАК ВремяОкончанияИнтервала,
	|	втГрафикСОтклонениями.Год КАК Год,
	|	втГрафикСОтклонениями.день КАК день,
	|	втГрафикСОтклонениями.ВремяНачала КАК ВремяНачала,
	|	втГрафикСОтклонениями.ВремяОкончания КАК ВремяОкончания,
	|	втГрафикСОтклонениями.Длительность КАК Длительность
	|ПОМЕСТИТЬ втГрафикСИнтервалами
	|ИЗ
	|	втГрафикСОтклонениями КАК втГрафикСОтклонениями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала КАК ДатаВремяНачалаИнтервала,
	|	втГрафикСИнтервалами.Ресурс КАК Ресурс,
	|	втГрафикСИнтервалами.Услуга КАК Услуга,
	|	втГрафикСИнтервалами.Услуга.Родитель КАК Группа,
	|	ЕСТЬNULL(РасписаниеЗагрузкиРесурсов.Мощность, 0) КАК Мощность,
	|	втГрафикСИнтервалами.Мощность КАК МощностьПлан
	|ПОМЕСТИТЬ втВремяЗаписи
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ втГрафикСИнтервалами.ВремяОкончанияИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Старт МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Финиш МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И РасписаниеЗагрузкиРесурсов.Документ ЕСТЬ NULL
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, втГрафикСИнтервалами.Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала,
	|	втГрафикСИнтервалами.Ресурс,
	|	втГрафикСИнтервалами.Услуга,
	|	втГрафикСИнтервалами.Услуга.Родитель,
	|	ЕСТЬNULL(РасписаниеЗагрузкиРесурсов.Мощность, 0),
	|	втГрафикСИнтервалами.Мощность
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала = РасписаниеЗагрузкиРесурсов.Старт
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ втГрафикСИнтервалами.ВремяОкончанияИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Старт МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Финиш МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НЕ РасписаниеЗагрузкиРесурсов.Документ ЕСТЬ NULL
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, втГрафикСИнтервалами.Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втВремяЗаписи.ДатаВремяНачалаИнтервала КАК ДатаВремяНачалаИнтервала,
	|	втВремяЗаписи.Ресурс КАК Ресурс,
	|	втВремяЗаписи.Услуга КАК Услуга,
	|	втВремяЗаписи.Группа КАК Группа,
	|	СУММА(втВремяЗаписи.Мощность) КАК Мощность,
	|	втВремяЗаписи.МощностьПлан КАК МощностьПлан
	|ПОМЕСТИТЬ втРезультат
	|ИЗ
	|	втВремяЗаписи КАК втВремяЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	втВремяЗаписи.Ресурс,
	|	втВремяЗаписи.Услуга,
	|	втВремяЗаписи.Группа,
	|	втВремяЗаписи.МощностьПлан,
	|	втВремяЗаписи.ДатаВремяНачалаИнтервала
	|
	|ИМЕЮЩИЕ
	|	СУММА(втВремяЗаписи.Мощность) < втВремяЗаписи.МощностьПлан
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА &ЗаМесяц
	|			ТОГДА НАЧАЛОПЕРИОДА(втРезультат.ДатаВремяНачалаИнтервала, ДЕНЬ)
	|		ИНАЧЕ втРезультат.ДатаВремяНачалаИнтервала
	|	КОНЕЦ КАК ДатаВремяНачалаИнтервала,
	|	втРезультат.Ресурс КАК Ресурс,
	|	втРезультат.Услуга КАК Услуга,
	|	втРезультат.Группа КАК Группа
	|ИЗ
	|	втРезультат КАК втРезультат";
	
	Если ЗначениеЗаполнено(Услуга) Тогда
		Запрос.УстановитьПараметр("Услуга", Услуга);
	Иначе
		Запрос.УстановитьПараметр("Услуга", Параметры.Услуги.ВыгрузитьКолонку("Услуга"));
	КонецЕсли; 
	Если ЗначениеЗаполнено(Ресурс) Тогда
		Запрос.УстановитьПараметр("Ресурс", Ресурс);
	Иначе
		Запрос.УстановитьПараметр("Ресурс", Параметры.Ресурсы.ВыгрузитьКолонку("Ресурс"));
	КонецЕсли; 
	Запрос.УстановитьПараметр("ДатаЗаписи", ДатаЗаписи);
	Запрос.УстановитьПараметр("ЗаМесяц", ЗаМесяц);
	Если ЗаМесяц Тогда
	    Запрос.УстановитьПараметр("ВыгружатьДнейГрафика", (КонецМесяца(ДатаЗаписи)+1 - ДатаЗаписи)/24/3600);
	Иначе
		Запрос.УстановитьПараметр("ВыгружатьДнейГрафика", 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("МинимальныйИнтервалУслуги", Параметры.МинимальныйИнтервалУслуги);
	Запрос.УстановитьПараметр("ТекущаяДатаВремя", ТекущаяДатаВремя);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НайтиРесурсыПоУслуге(Услуга)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиЗаписьНаУслуги.Ресурс КАК Ресурс
	|ИЗ
	|	РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|ГДЕ
	|	НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.Чатбот)
	|	И (НастройкиЗаписьНаУслуги.Услуга = &Услуга
	|			ИЛИ &Услуга = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("Услуга", Услуга);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ресурс");	
	КонецЕсли;
	
КонецФункции

Функция НайтиУслугиПоРесурсу(Группа, Ресурс)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиЗаписьНаУслуги.Услуга КАК Услуга
	|ИЗ
	|	РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|ГДЕ
	|	НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.Чатбот)
	|	И (НастройкиЗаписьНаУслуги.Услуга.Родитель = &Группа
	|			ИЛИ &Группа = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	И (НастройкиЗаписьНаУслуги.Ресурс = &Ресурс
	|			ИЛИ &Ресурс = ЗНАЧЕНИЕ(Справочник.КлючевыеРесурсы.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("Ресурс", Ресурс);
	Запрос.УстановитьПараметр("Группа", Группа);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Услуга");	
	КонецЕсли;
	
КонецФункции

Функция НайтиГруппыПоРесурсу(Ресурс)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиЗаписьНаУслуги.Услуга.Родитель КАК Группа
	|ИЗ
	|	РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|ГДЕ
	|	НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.Чатбот)
	|	И (НастройкиЗаписьНаУслуги.Ресурс = &Ресурс
	|			ИЛИ &Ресурс = ЗНАЧЕНИЕ(Справочник.КлючевыеРесурсы.ПустаяСсылка))";
	Запрос.УстановитьПараметр("Ресурс", Ресурс);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Группа");	
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработкаСообщений

Функция ОтправитьСообщение(структураОтвет, Параметры)

	Если Параметры.ИспользоватьПрокси = 1 И Параметры.Свойство("СистемныйПроксиСервер") Тогда
		URL = "http://" + Параметры.СистемныйПроксиСервер;
		ИнтернетПрокси = Неопределено;
		ЗащищенноеСоединение = Неопределено;
	Иначе
		URL = "https://" + АдресСервераTelegram() + "/bot" + Параметры.Токен + "/" + структураОтвет.Получить("method");
		ИнтернетПрокси = Прокси(Параметры);
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос();
	
	ДанныеКартинки = структураОтвет.Получить("photo");
	Если ДанныеКартинки <> Неопределено Тогда
		
		Расширение = ДанныеКартинки.Расширение;
		Картинка = ПолучитьИзВременногоХранилища(ДанныеКартинки.СсылкаНаДвоичныеДанныеФайла);
		
		Boundary = "--" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; charset=UTF-8; boundary=" + Boundary);
		
		Поток = Новый ПотокВПамяти();
		ЗаписьДанных = Новый ЗаписьДанных(Поток);
		// Заголовки
		ЗаписьДанных.ЗаписатьСтроку("--" + Boundary);
		ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""photo""; filename="""+ДанныеКартинки.ИмяФайла+"");
		ЗаписьДанных.ЗаписатьСтроку("Content-Type: image/"+Расширение);
		ЗаписьДанных.ЗаписатьСтроку("");
		
		// Тело
		ЗаписьДанных.Записать(Картинка);
		ЗаписьДанных.Закрыть();
		КартинкаПоток = Поток.ЗакрытьИПолучитьДвоичныеДанные();
		
		Тело = Новый ПотокВПамяти();
		ЗаписьДанных = Новый ЗаписьДанных(Тело);               
		ЗаписьДанных.Записать(КартинкаПоток);
		// разделитель multipart/form-data
		ЗаписьДанных.ЗаписатьСтроку("");
		ЗаписьДанных.ЗаписатьСтроку("--" + Boundary + "--");
		// конец multipart/form-data
		ЗаписьДанных.Закрыть();
		ДанныеТела = Тело.ЗакрытьИПолучитьДвоичныеДанные();
		
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДанныеТела);
		
	КонецЕсли;
     
	Если структураОтвет.Получить("chat_id") <> Неопределено Тогда
		URL = URL + "?chat_id=" + Формат(структураОтвет.Получить("chat_id"), "ЧГ=0");
	КонецЕсли;
	Если структураОтвет.Получить("text") <> Неопределено Тогда
		URL = URL + "&text=" + структураОтвет.Получить("text");
	КонецЕсли;
	Если структураОтвет.Получить("reply_markup") <> Неопределено Тогда
		URL = URL + "&reply_markup=" + структураОтвет.Получить("reply_markup");
	КонецЕсли;
	Если структураОтвет.Получить("caption") <> Неопределено Тогда
		URL = URL + "&caption=" + структураОтвет.Получить("caption");
	КонецЕсли;
	Если структураОтвет.Получить("message_id") <> Неопределено Тогда
		URL = URL + "&message_id=" + структураОтвет.Получить("message_id");
	КонецЕсли;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,, ИнтернетПрокси, 20, 
		ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение());
	Попытка
	
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТелефонияСервер.ЗаписатьЗапросВЖурналРегистрации(
			"Чатбот",
			ОписаниеОшибки);
		Возврат Неопределено;
		
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		
		Ответ = HTTPОтвет.ПолучитьТелоКакСтроку();
		ОтветСоответствие = ЧтениеJSONВСтруктуру(Ответ, Истина);
		
		Если ОтветСоответствие.Получить("ok") = Истина Тогда
			Возврат ОтветСоответствие;
		Иначе
			ТелефонияСервер.ЗаписатьЗапросВЖурналРегистрации(
			"Чатбот",
			"Ошибка! Ответ сервера: " + HTTPОтвет.КодСостояния + Символы.ПС + HTTPОтвет.ПолучитьТелоКакСтроку());
		КонецЕсли;
	Иначе
		ТелефонияСервер.ЗаписатьЗапросВЖурналРегистрации(
		"Чатбот",
		"Ошибка! Ответ сервера: " + HTTPОтвет.КодСостояния + Символы.ПС + HTTPОтвет.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
КонецФункции

Функция ИзменитьСообщение(ИдЧата, ИдСообщения, ТекстСообщения, Кнопки = Неопределено)
	
	структураОтвет = Новый Соответствие;	
	структураОтвет.Вставить("method", "editMessageText");		
	структураОтвет.Вставить("chat_id", ИдЧата);
	структураОтвет.Вставить("message_id", ИдСообщения);		
	структураОтвет.Вставить("text", ТекстСообщения);
	Если ЗначениеЗаполнено(Кнопки) Тогда
		структураОтвет.Вставить("reply_markup", Кнопки);	
	КонецЕсли;
	
	Возврат структураОтвет;
	
КонецФункции

Функция НовоеСообщение(ИдЧата, ТекстСообщения, Кнопки = Неопределено)
	
	структураОтвет = Новый Соответствие;
	структураОтвет.Вставить("method", "sendMessage");
	структураОтвет.Вставить("chat_id", ИдЧата);
	структураОтвет.Вставить("text", ТекстСообщения);
	Если ЗначениеЗаполнено(Кнопки) Тогда
		структураОтвет.Вставить("reply_markup", Кнопки);	
	КонецЕсли;
	
	Возврат структураОтвет;
	
КонецФункции

Функция СообщениеКартинка(ИдЧата, ТекстСообщения, Картинка, Кнопки = Неопределено)
	
	структураОтвет = Новый Соответствие;
	структураОтвет.Вставить("method", "sendPhoto");
	структураОтвет.Вставить("chat_id", ИдЧата);
	структураОтвет.Вставить("photo", Картинка);
	структураОтвет.Вставить("caption", ТекстСообщения);
	Если ЗначениеЗаполнено(Кнопки) Тогда
		структураОтвет.Вставить("reply_markup", Кнопки);	
	КонецЕсли;
	
	Возврат структураОтвет;
	
КонецФункции

Функция УдалитьСообщение(ИдЧата, ИдСообщения)
	
	структураОтвет = Новый Соответствие;
	структураОтвет.Вставить("method", "deleteMessage");		
	структураОтвет.Вставить("chat_id", ИдЧата);
	структураОтвет.Вставить("message_id", ИдСообщения);		
	
	Возврат структураОтвет;
	
КонецФункции

Функция ТекстОтвета(ПоляЧата, Параметры)
	
	ТекстОтвета = "";
	
	Если НЕ ЗначениеЗаполнено(ПоляЧата.Группа) И НЕ ЗначениеЗаполнено(ПоляЧата.Услуга)  Тогда
		Возврат ТекстОтветаШага("Группа", ПоляЧата, Параметры);
	ИначеЕсли НЕ ЗначениеЗаполнено(ПоляЧата.Услуга) Тогда
		Возврат ТекстОтветаШага("Услуга", ПоляЧата, Параметры);
	ИначеЕсли НЕ ЗначениеЗаполнено(ПоляЧата.Ресурс) Тогда
		Возврат ТекстОтветаШага("Ресурс", ПоляЧата, Параметры);
	ИначеЕсли НЕ ЗначениеЗаполнено(ПоляЧата.ДатаВремяЗаписи) Тогда
		Возврат ТекстОтветаШага("Дата", ПоляЧата, Параметры);	
	ИначеЕсли ТипЗнч(ПоляЧата.ДатаВремяЗаписи) = Тип("Дата") И ПоляЧата.ДатаВремяЗаписи = НачалоДня(ПоляЧата.ДатаВремяЗаписи) Тогда
		Возврат ТекстОтветаШага("Время", ПоляЧата, Параметры);	
	ИначеЕсли НЕ ЗначениеЗаполнено(ПоляЧата.Телефон) Тогда
		Возврат ТекстОтветаШага("Запись", ПоляЧата, Параметры);
	ИначеЕсли ПоляЧата.Подтверждена Тогда
		Возврат ТекстОтветаШага("Подтверждение", ПоляЧата, Параметры);
	Иначе
		Возврат ТекстОтветаШага("Команды", ПоляЧата, Параметры);
	КонецЕсли; 
	
	Возврат ТекстОтвета;
	
КонецФункции

Процедура ДобавитьСтроку(ТаблицаШагов, Порядок, ПорядокРазделов, Шаг, Команда, ТекстСообщения, Подсказка)
	
	НовСтр = ТаблицаШагов.Добавить();
	НовСтр.Порядок = Порядок;
	НовСтр.ПорядокРазделов = ПорядокРазделов;
	НовСтр.Шаг = Шаг;
	НовСтр.Команда = Команда;
	НовСтр.ТекстСообщения = ТекстСообщения;
	НовСтр.Подсказка = Подсказка;
	
КонецПроцедуры

Функция ЗаполнитьВремя(ПоляЧата, Параметры)
	
	МассивВремя = Новый Массив;
	МассивСтрока = Новый Массив;
	
	СвободноеВремя = РазрезЗаписи("Время", ПоляЧата, Параметры);
	
	НомерВСтроке = 0;	
	Для каждого Время Из СвободноеВремя Цикл
		НомерВСтроке = НомерВСтроке + 1;
		МассивСтрока.Добавить(Новый Структура("text, callback_data", Формат(Время,"ДФ=HH:mm"), "Время_"+Формат(Время,"ДФ=HH:mm")));
	
		Если НомерВСтроке >= 4 Тогда
			НомерВСтроке = 0;
			МассивВремя.Добавить(МассивСтрока);
			МассивСтрока = Новый Массив;
		КонецЕсли;
	КонецЦикла;
	МассивВремя.Добавить(МассивСтрока);
	
	СтрокиДат = Новый Структура("inline_keyboard", МассивВремя);
	СтрокиДат.Вставить("one_time_keyboard", Истина);
	СтрокиДат.Вставить("resize_keyboard", Истина);
	
	Возврат ЗаписьJSONВСтруктуру(СтрокиДат);
	
КонецФункции

Функция ДеньНеделиКалендаря(Текст)
	
	МассивДней = СтрРазделить("Пн Вт Ср Чт Пт Сб Вс", " ", Ложь);
	Возврат НЕ (МассивДней.Найти(Текст) = Неопределено);
	
КонецФункции

Функция ЗаполнитьДниМесяца(ПоляЧата, Параметры)
	
	ТекущийМесяц = Параметры.ТекущийМесяц;
	
	МассивДаты = Новый Массив;
	
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Новый Структура("text, callback_data", "<", "Календарь" + ДобавитьМесяц(ТекущийМесяц, -1)));
	МассивСтрока.Добавить(Новый Структура("text, callback_data", СтрЗаменить(Формат(ТекущийМесяц,"ДФ=MMM-yyyy"),"-"," "), "Календарь"+ТекущийМесяц));
	МассивСтрока.Добавить(Новый Структура("text, callback_data", ">", "Календарь" + ДобавитьМесяц(ТекущийМесяц, 1)));
	МассивДаты.Добавить(МассивСтрока);
	
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Новый Структура("text, callback_data", "Пн", "Пн"));
	МассивСтрока.Добавить(Новый Структура("text, callback_data", "Вт", "Вт"));
	МассивСтрока.Добавить(Новый Структура("text, callback_data", "Ср", "Ср"));
	МассивСтрока.Добавить(Новый Структура("text, callback_data", "Чт", "Чт"));
	МассивСтрока.Добавить(Новый Структура("text, callback_data", "Пт", "Пт"));
	МассивСтрока.Добавить(Новый Структура("text, callback_data", "Сб", "Сб"));
	МассивСтрока.Добавить(Новый Структура("text, callback_data", "Вс", "Вс"));
	МассивДаты.Добавить(МассивСтрока);
	
	РабочиеДни = РазрезЗаписи("Дата", ПоляЧата, Параметры);
	
	МассивСтрока = Новый Массив;
	НачальнаяДатаМесяца = НачалоНедели(ТекущийМесяц);
	Для номерДня=0 По 34 Цикл
		ДеньМесяца = НачальнаяДатаМесяца + номерДня*24*3600;
		
		Если ПроверитьДату(ДеньМесяца, ТекущийМесяц, РабочиеДни) Тогда
			МассивСтрока.Добавить(Новый Структура("text, callback_data", Формат(ДеньМесяца, "ДФ=dd"), "Дата_"+ДеньМесяца));
		Иначе
			// клик на пустой клетке даты
			МассивСтрока.Добавить(Новый Структура("text, callback_data", " ", "/Empty"));
		КонецЕсли;
		
		Если ДеньНедели(ДеньМесяца) = 7 Тогда
			МассивДаты.Добавить(МассивСтрока);
			МассивСтрока = Новый Массив;
		КонецЕсли;
	КонецЦикла;
	МассивДаты.Добавить(МассивСтрока);
	
	СтрокиДат = Новый Структура("inline_keyboard", МассивДаты);
	
	Возврат ЗаписьJSONВСтруктуру(СтрокиДат);
	
КонецФункции

Функция ПроверитьДату(ДатаМесяца, ТекущийМесяц, РабочиеДни)
	
	Если ДатаМесяца < НачалоДня(ТекущаяДатаСеанса()) 
		ИЛИ ДатаМесяца < НачалоМесяца(ТекущийМесяц)
		ИЛИ ДатаМесяца > КонецМесяца(ТекущийМесяц)
		ИЛИ РабочиеДни.Найти(ДатаМесяца) = Неопределено Тогда
		
		Возврат Ложь;
	Иначе
		Возврат Истина
	КонецЕсли; 
	
КонецФункции

Функция РазбитьСписокНаСтроки(МассивСтрок, ЧислоКолонок, НомерСтраницы = 1, ИмяТаблицы = "")
	
	СтруктураКнопок = Новый Структура;
	массивКнопок = Новый Массив;
	массивСтрокКнопок = Новый Массив;
	
	КнопокВТекСтроке = 0;
	МаксЧислоСтрок = 4;
	ТекНомерСтраницы = 1;
	ИндексКнопки = 0;
	СтрокНаОдномЭкране = (МаксЧислоСтрок - 1) * ЧислоКолонок;
	
	Для каждого кнопка Из МассивСтрок Цикл
		
		ТекНомерСтраницы = 1 + Цел(ИндексКнопки / СтрокНаОдномЭкране);
		
		ИндексКнопки = ИндексКнопки + 1;
		
		Если ТекНомерСтраницы < НомерСтраницы Тогда
			Продолжить;
		ИначеЕсли ТекНомерСтраницы > НомерСтраницы Тогда
			Прервать;
		КонецЕсли; 
		
		массивКнопок.Добавить(Новый Структура("text, callback_data", Строка(кнопка), Лев(ИмяТаблицы+"_"+кнопка, 31)));
		
		КнопокВТекСтроке = КнопокВТекСтроке + 1;
		
		Если КнопокВТекСтроке >= ЧислоКолонок Тогда
			массивСтрокКнопок.Добавить(массивКнопок);
			массивКнопок = Новый Массив;
			КнопокВТекСтроке = 0;
		ИначеЕсли МассивСтрок[МассивСтрок.ВГраница()] = кнопка Тогда
			// последняя строка кнопок
			массивСтрокКнопок.Добавить(массивКнопок);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокНаОдномЭкране <  МассивСтрок.Количество() Тогда
		массивКнопок = Новый Массив;
		
		Если НомерСтраницы > 1 Тогда
			массивКнопок.Добавить(Новый Структура("text, callback_data", " << ", ИмяТаблицы+"_Страница"+(НомерСтраницы-1) ));
		КонецЕсли;
		
		Если СтрокНаОдномЭкране * НомерСтраницы <= МассивСтрок.Количество() Тогда
			массивКнопок.Добавить(Новый Структура("text, callback_data", " >> ", ИмяТаблицы+"_Страница"+(НомерСтраницы+1) ));
		КонецЕсли;
		
		массивСтрокКнопок.Добавить(массивКнопок);
	КонецЕсли;
		
	СтруктураКнопок.Вставить("inline_keyboard", массивСтрокКнопок);
	
	Возврат ЗаписьJSONВСтруктуру(СтруктураКнопок);
	
КонецФункции

#КонецОбласти

#Область РаботаСБазойДанных

Функция СоздатьОбновитьЗаказ(ПоляЧата, Параметры)
	
	ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	ДокументОбъект.Организация = Справочники.Организации.ОсновнаяОрганизация;
	ДокументОбъект.ПоложениеВидаРабот = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	ДокументОбъект.ВидЭлектронногоДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
	ДокументОбъект.ВидЗаказа = Параметры.ВидЗаказНаряда;
	ДокументОбъект.СостояниеЗаказа = Параметры.СостояниеЗаказНаряда;
	Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ДокументОбъект.Организация, , ДокументОбъект.Дата);
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	КонецЕсли;
	
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.Заполнить(Неопределено);
	
	ДокументОбъект.Комментарий = НСтр("ru='Запись через чат-бот'");
	ДокументОбъект.ВалютаДокумента = Константы.ВалютаУчета.Получить();
	
	Отбор = Новый Структура("Валюта", ДокументОбъект.ВалютаДокумента);
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяДатаСеанса(), Отбор);
	
	ДокументОбъект.Курс = СтруктураПоВалюте.Курс;
	ДокументОбъект.Кратность = СтруктураПоВалюте.Кратность;
	
	ДокументОбъект.ВидЦен = Параметры.ВидЦен;
	Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.БанковскийСчет = ДокументОбъект.Организация.БанковскийСчетПоУмолчанию;
		ДокументОбъект.Касса = ДокументОбъект.Организация.КассаПоУмолчанию;
	КонецЕсли;
	
	КонтрагентДоговор = НайтиСоздатьКонтрагента(ПоляЧата.КонтактноеЛицо, ПоляЧата.Телефон, ДокументОбъект);
	ДокументОбъект.Контрагент = КонтрагентДоговор.Контрагент;
	ДокументОбъект.Договор = КонтрагентДоговор.Договор;
	
	НоваяСтрока = ДокументОбъект.Работы.Добавить();
	НоваяСтрока.ТипНоменклатурыУслуга = Истина;
	НоваяСтрока.Коэффициент = 1;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.Кратность = 1;
	
	Если ЗначениеЗаполнено(ПоляЧата.Услуга) Тогда
		НоваяСтрока.Номенклатура = ПоляЧата.Услуга;
	ИначеЕсли Параметры.Услуги.Количество() > 0 Тогда
		НоваяСтрока.Номенклатура = Параметры.Услуги[0].Услуга;
	КонецЕсли;
	НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ПоляЧата.Услуга.ВидСтавкиНДС);
	
	ПересчитатьСтрокуТабличнойЧасти(НоваяСтрока, ДокументОбъект);	
	
	ДокументОбъект.Старт = ПоляЧата.ДатаВремяЗаписи;
	Если ЗначениеЗаполнено(ПоляЧата.Услуга) Тогда
		ДокументОбъект.Финиш = ДокументОбъект.Старт + 60 * ПоляЧата.Длительность;
	Иначе
		ДокументОбъект.Финиш = ДокументОбъект.Старт + 60 * Параметры.МинимальныйИнтервалУслуги;
	КонецЕсли;
	
	НоваяСтрокаРесурсы = ДокументОбъект.РесурсыПредприятия.Добавить();
	НоваяСтрокаРесурсы.Старт = ПоляЧата.ДатаВремяЗаписи;
	НоваяСтрокаРесурсы.Финиш = ДокументОбъект.Финиш;
	НоваяСтрокаРесурсы.Мощность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоляЧата.Ресурс, "Мощность");
	
	Если НЕ Параметры.ИспользоватьРесурсы 
		И Параметры.РежимЗаполненияРесурса = Перечисления.РежимыЗаполненияРесурса.ПоМенееЗагруженному 
		И Параметры.ИспользоватьДату
		Тогда
	
		ДанныеГрафика = СвободныеДатыВремя(ПоляЧата.ДатаВремяЗаписи, ПоляЧата.Услуга, ПоляЧата.Ресурс, Параметры, Ложь);
		ДанныеГрафика.Колонки.Добавить("ЧислоДат");
		ДанныеГрафика.ЗаполнитьЗначения(1, "ЧислоДат");
		ДанныеГрафика.Свернуть("Ресурс", "ЧислоДат");
		ДанныеГрафика.Сортировать("ЧислоДат Убыв");
		
		ПоляЧата.Ресурс = ДанныеГрафика[0].Ресурс;
	КонецЕсли; 
	
	НоваяСтрокаРесурсы.РесурсПредприятия = ПоляЧата.Ресурс;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Возврат ДокументОбъект.Номер;
	Исключение
		ИмяСобытия = НСтр("ru='Чатбот.Проведение заказ-наряда'");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ЗаказПокупателя,, 
			НСтр("ru='Не удалось провести заказ-наряд '")+ДокументОбъект.Номер);
	КонецПопытки;
		
	Попытка
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Возврат ДокументОбъект.Номер;
	Исключение
		ИмяСобытия = НСтр("ru='Чатбот.Запись заказ-наряда'");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаказПокупателя,, 
			НСтр("ru='Не удалось записать заказ-наряд по клиенту '") + ПоляЧата.КонтактноеЛицо);
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

Процедура ПересчитатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, Документ)
	
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена)
		И ЗначениеЗаполнено(Документ.ВидЦен) Тогда
		
		СтруктураДанные = Новый Структура;
		
		СтруктураДанные.Вставить("ДатаОбработки", Документ.Дата);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", Неопределено);
		СтруктураДанные.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Документ.СуммаВключаетНДС);
		СтруктураДанные.Вставить("СтавкаНДС", СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("ВидЦен", Документ.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Документ.ВидСкидкиНаценки);

		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Документ, СтрокаТабличнойЧасти, СтруктураДанные);

		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтрокаТабличнойЧасти.Цена = Цена;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Кратность * СтрокаТабличнойЧасти.Цена;
		
	КонецЕсли;
	
	СуммаБезСкидки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Кратность;
	СуммаСкидки = СуммаБезСкидки - СтрокаТабличнойЧасти.Сумма;
	
	Если СуммаСкидки <> 0 Тогда
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 * СуммаСкидки / СуммаБезСкидки;
	КонецЕсли;
	
	РассчитатьСуммуНДСЗаказа(СтрокаТабличнойЧасти, Документ);
	
КонецПроцедуры

Процедура РассчитатьСуммуНДСЗаказа(СтрокаТабличнойЧасти, Документ)
	
	Если Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		
		СтрокаТабличнойЧасти.СуммаНДС = ?(Документ.СуммаВключаетНДС,
										  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
										  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	Иначе
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Документ.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

Функция НайтиСоздатьКонтрагента(Контакт, Телефон, ДокументОбъект)
	
	ПокупательСсылка = КонтактнаяИнформацияУНФ.КонтрагентПоНомеруТелефона(Телефон); //, Истина, Ложь, Ложь);
	ДоговорПоУмолчанию = Неопределено;
	СтруктураВозврата = Новый Структура;
	
	Если ПокупательСсылка = Неопределено Тогда
		СтруктураВозврата = СоздатьКонтрагентаДоговор(Контакт, Телефон, ДокументОбъект);
	ИначеЕсли ТипЗнч(ПокупательСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(ПокупательСсылка);
		СтруктураВозврата.Вставить("Контрагент", ПокупательСсылка);
		СтруктураВозврата.Вставить("Договор", ДоговорПоУмолчанию);
	ИначеЕсли ТипЗнч(ПокупательСсылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязиКонтрагентКонтактСрезПоследних.Контрагент КАК Контрагент,
		|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтактСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|		ПО СвязиКонтрагентКонтактСрезПоследних.Контрагент = ОсновныеДоговорыКонтрагента.Контрагент
		|ГДЕ
		|	СвязиКонтрагентКонтактСрезПоследних.Контакт = &Контакт
		|	И НЕ СвязиКонтрагентКонтактСрезПоследних.СвязьНедействительна
		|	И ОсновныеДоговорыКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СПокупателем)
		|	И СвязиКонтрагентКонтактСрезПоследних.Контрагент.КонтактноеЛицо = &Контакт";
		Запрос.УстановитьПараметр("Контакт", ПокупательСсылка);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			
			СтруктураВозврата = СоздатьКонтрагентаДоговор(Контакт, Телефон, ДокументОбъект);
			
		Иначе
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтруктураВозврата.Вставить("Контрагент", Выборка.Контрагент);
				СтруктураВозврата.Вставить("Договор", Выборка.Договор);
				Прервать;
			КонецЦикла;
		
		КонецЕсли;
		
		Если ПокупательСсылка <> Контакт Тогда
			 РегистрыСведений.СвязиКонтрагентКонтакт.НоваяСвязь(Выборка.Контрагент, Контакт);
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(ПокупательСсылка) = Тип("СправочникСсылка.Лиды") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязиКонтрагентЛид.Контрагент КАК Контрагент,
		|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.СвязиКонтрагентЛид КАК СвязиКонтрагентЛид
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|		ПО СвязиКонтрагентЛид.Контрагент = ОсновныеДоговорыКонтрагента.Договор
		|ГДЕ
		|	СвязиКонтрагентЛид.Лид = &Лид";
		Запрос.УстановитьПараметр("Лид", ПокупательСсылка);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураВозврата.Вставить("Контрагент", Выборка.Контрагент);
			СтруктураВозврата.Вставить("Договор", Выборка.Договор);
			Прервать;
		КонецЦикла;
		
		РегистрыСведений.СвязиКонтрагентКонтакт.НоваяСвязь(Выборка.Контрагент, Контакт);
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СоздатьКонтрагентаДоговор(Контакт, Телефон, ДокументОбъект)
	
	КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Наименование", Контакт.Наименование);
	СтруктураЗаполнения.Вставить("НомерТелефона", Телефон);
	
	КонтрагентОбъект.Заполнить(СтруктураЗаполнения);
	КонтрагентОбъект.Покупатель = Истина;
	КонтрагентОбъект.КонтактноеЛицо = Контакт;
	КонтрагентОбъект.Записать();
	ПокупательСсылка = КонтрагентОбъект.Ссылка;
	
	СписокВидовДоговора = Новый СписокЗначений;
	СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(КонтрагентОбъект.Ссылка, Справочники.Организации.ОсновнаяОрганизация, СписокВидовДоговора);
	Если Не ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
		
		Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Договор.ВалютаРасчетов = ДокументОбъект.ВалютаДокумента;
		Договор.Организация = ДокументОбъект.Организация;
		Договор.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем;
		Договор.ВидЦен = ДокументОбъект.ВидЦен;
		Договор.Владелец = КонтрагентОбъект.Ссылка;
		Договор.СрокОплатыПоставщику = Константы.СрокОплатыПоставщику.Получить();
		Договор.СрокОплатыПокупателя = Константы.СрокОплатыПокупателя.Получить();
		Если ПустаяСтрока(Договор.Наименование) Тогда
			Договор.Наименование = ШаблоныНаименований.НаименованиеДоговораПоУмолчанию(Договор);
		КонецЕсли;
		Договор.Записать();
		ДоговорПоУмолчанию = Договор.Ссылка;
		
		Справочники.ДоговорыКонтрагентов.ЗаписатьДоговорПоУмолчанию(Договор);
		
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ПокупательСсылка, Телефон, 
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса(), Истина);
	
	РегистрыСведений.СвязиКонтрагентКонтакт.НоваяСвязь(ПокупательСсылка, Контакт);
	
	Возврат Новый Структура("Контрагент, Договор", ПокупательСсылка, ДоговорПоУмолчанию);
	
КонецФункции

Функция НайтиСоздатьКонтакт(Параметры)
	
	ИсточникПривлечения = "Telegram";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактныеЛицаКонтактнаяИнформация.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
	|	КонтактныеЛицаКонтактнаяИнформация.Значение КАК Значение,
	|	КонтактныеЛицаКонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Тип = &Тип
	|	И КонтактныеЛицаКонтактнаяИнформация.Вид = &Вид
	|	И ПОДСТРОКА(КонтактныеЛицаКонтактнаяИнформация.Ссылка.Комментарий, 1, 30) = &Заметки";
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Другое);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.МессенджерКонтактногоЛица);
	Запрос.УстановитьПараметр("ДоменноеИмяСервера", ИсточникПривлечения);
	Запрос.УстановитьПараметр("Заметки", Параметры.ИдКонтакта);//Формат(ПоляЧата.Получить("id"),"ЧГ=0"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		
		Контакт = Справочники.КонтактныеЛица.СоздатьЭлемент();
		Контакт.Наименование = Параметры.Имя;
		Контакт.Комментарий = Параметры.ИдКонтакта;
		
		элИсточникПривлечения = Справочники.ИсточникиПривлеченияПокупателей.НайтиПоНаименованию(ИсточникПривлечения);
		Если элИсточникПривлечения = Неопределено Тогда
		
			НовИсточник = Справочники.ИсточникиПривлеченияПокупателей.СоздатьЭлемент();
			НовИсточник.Наименование = ИсточникПривлечения;
			НовИсточник.ДатаСоздания = ТекущаяДатаСеанса();
			Попытка
				НовИсточник.Записать();
			Исключение
			КонецПопытки; 
			
			Контакт.ИсточникПривлечения = НовИсточник.Ссылка;
		Иначе
			Контакт.ИсточникПривлечения = элИсточникПривлечения;
		КонецЕсли; 
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Контакт, ИсточникПривлечения + ": " + Параметры.ИмяПользователя, 
			Справочники.ВидыКонтактнойИнформации.МессенджерКонтактногоЛица, ТекущаяДатаСеанса(), Истина);
		
		Попытка
			Контакт.Записать();
			
			Возврат Контакт.Ссылка;
		Исключение
		КонецПопытки; 
		
	Иначе
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ШагиЗаписи

Функция СледующийШаг(ПоляЧата, Параметры)
	
	Для каждого списокШаг Из Параметры.СписокШагов Цикл
	
		Если списокШаг.Шаг = "Группа" И ИспользоватьГруппы(ПоляЧата, Параметры) И НЕ ЗначениеЗаполнено(ПоляЧата.Группа) Тогда
			Возврат ВыбратьГруппу(ПоляЧата, Параметры);
		ИначеЕсли списокШаг.Шаг = "Услуга" И Параметры.ИспользоватьУслуги И НЕ ЗначениеЗаполнено(ПоляЧата.Услуга) Тогда
			Возврат ВыбратьУслугу(ПоляЧата, Параметры);
		ИначеЕсли списокШаг.Шаг = "Ресурс" И Параметры.ИспользоватьРесурсы И НЕ ЗначениеЗаполнено(ПоляЧата.Ресурс) Тогда
			Возврат ВыбратьРесурс(ПоляЧата, Параметры);
		ИначеЕсли списокШаг.Шаг = "Дата" И Параметры.ИспользоватьДату И НЕ ЗначениеЗаполнено(ПоляЧата.ДатаВремяЗаписи) Тогда
			Возврат ВыбратьДату(ПоляЧата, Параметры);
		ИначеЕсли списокШаг.Шаг = "Время" И Параметры.ИспользоватьДату И (ПоляЧата.ДатаВремяЗаписи = НачалоДня(ПоляЧата.ДатаВремяЗаписи)) Тогда
			Возврат ВыбратьВремя(ПоляЧата, Параметры);
		ИначеЕсли списокШаг.Шаг = "Запись" И НЕ ЗначениеЗаполнено(ПоляЧата.НомерЗаказа) Тогда
			Возврат Запись(ПоляЧата, Параметры);
		ИначеЕсли списокШаг.Шаг = "Подтверждение" И ПоляЧата.Подтверждена Тогда
			Возврат Подтверждение(ПоляЧата, Параметры);
		ИначеЕсли списокШаг.Шаг = "Команды" Тогда
			Возврат Команды(ПоляЧата, Параметры);			
		ИначеЕсли списокШаг.Шаг = "Контакты" Тогда
			Возврат Контакты(ПоляЧата, Параметры);
		ИначеЕсли списокШаг.Шаг = "Кабинет" Тогда
			Возврат Кабинет(ПоляЧата, Параметры);
		КонецЕсли;
	
	КонецЦикла; 
	
КонецФункции

Функция ВыбратьГруппу(ПоляЧата, Параметры)

	ПоляЧата.Услуга = Неопределено;
	
	ДоступныеГруппы = РазрезЗаписи("Группа", ПоляЧата, Параметры);
	
	КнопкиСтрока = РазбитьСписокНаСтроки(ДоступныеГруппы, Параметры.ЧислоКолонокКнопок, 1, "Г");
	структураОтвет = НовоеСообщение(Параметры.ИдЧата, ТекстОтвета(ПоляЧата, Параметры), КнопкиСтрока);
	
	Возврат	структураОтвет;
		
КонецФункции // ВыбратьГруппу()

Функция ВыбратьУслугу(ПоляЧата, Параметры)
	
	Если Параметры.Услуги.Количество() = 0 Тогда
		ТекстОтвета = "Услуги не заполнены";
		Возврат НовоеСообщение(Параметры.ИдЧата, ТекстОтвета);
	КонецЕсли; 
	
	ДоступныеУслуги = РазрезЗаписи("Услуга", ПоляЧата, Параметры);
	КнопкиСтрока = РазбитьСписокНаСтроки(ДоступныеУслуги, Параметры.ЧислоКолонокКнопок, 1, "У");
	Возврат НовоеСообщение(Параметры.ИдЧата, ТекстОтвета(ПоляЧата, Параметры), КнопкиСтрока);
	
КонецФункции

Функция ВыбратьРесурс(ПоляЧата, Параметры)

	Если Параметры.Ресурсы.Количество() = 0 Тогда
		ТекстОтвета = НСтр("ru='Ресурсы не заполнены'");
		Возврат НовоеСообщение(Параметры.ИдЧата, ТекстОтвета);
	КонецЕсли; 
	
	ДоступныеРесурсы = РазрезЗаписи("Ресурс", ПоляЧата, Параметры);
	КнопкиСтрока = РазбитьСписокНаСтроки(ДоступныеРесурсы, Параметры.ЧислоКолонокКнопок, 1, "Р");
	Возврат НовоеСообщение(Параметры.ИдЧата, ТекстОтвета(ПоляЧата, Параметры), КнопкиСтрока);
	
КонецФункции

Функция ОтправитьКартинку(Наименование, ФайлКартинки, ПоляЧата, Параметры)
	
	Если ЗначениеЗаполнено(ФайлКартинки) Тогда
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлКартинки);
		ОтветСоответствие = ОтправитьСообщение(СообщениеКартинка(Параметры.ИдЧата, Наименование, ДанныеФайла), Параметры);
		УдалосьОтправитьКартинку = (ОтветСоответствие <> Неопределено);
	КонецЕсли;
	
	Возврат УдалосьОтправитьКартинку;
		
КонецФункции

Функция ОтправитьЗаказ(ТекстСообщения, ПоляЧатаЗаказа, Параметры)
	
	КнопкиСтрока = "";
	ДоступныеКоманды = Новый Массив;
	ДоступныеКоманды.Добавить("Позвонить администратору");
	ДоступныеКоманды.Добавить("Отменить");
	КнопкиСтрока = РазбитьСписокНаСтроки(ДоступныеКоманды, Параметры.ЧислоКолонокКнопок, 1, "Отмена_"+ПоляЧатаЗаказа.НомерЗаказа);
	
	ОтправитьСообщение(НовоеСообщение(Параметры.ИдЧата, ТекстСообщения, КнопкиСтрока), Параметры);
	
КонецФункции


Функция ВыбратьДату(ПоляЧата, Параметры)

	КнопкиСтрока = ЗаполнитьДниМесяца(ПоляЧата, Параметры);
	Возврат НовоеСообщение(Параметры.ИдЧата, ТекстОтвета(ПоляЧата, Параметры), КнопкиСтрока);
	
КонецФункции	

Функция ВыбратьВремя(ПоляЧата, Параметры)
	
	КнопкиСтрока = ЗаполнитьВремя(ПоляЧата, Параметры);
	Возврат НовоеСообщение(Параметры.ИдЧата, ТекстОтвета(ПоляЧата, Параметры), КнопкиСтрока);
	
КонецФункции

Функция Запись(ПоляЧата, Параметры)

	СтруктураКнопок = Новый Структура;
	массивКнопок = Новый Массив;
	массивСтрокКнопок = Новый Массив;
	массивКнопок.Добавить(Новый Структура("text, request_contact", "Записаться", Истина));
	массивСтрокКнопок.Добавить(массивКнопок);
	
	СтруктураКнопок.Вставить("keyboard", массивСтрокКнопок);
	СтруктураКнопок.Вставить("one_time_keyboard", Истина);
	СтруктураКнопок.Вставить("resize_keyboard", Истина);
	КнопкиСтрока = ЗаписьJSONВСтруктуру(СтруктураКнопок);
	
	Возврат НовоеСообщение(Параметры.ИдЧата, ТекстОтвета(ПоляЧата, Параметры), КнопкиСтрока);
		
КонецФункции
 
Функция Подтверждение(ПоляЧата, Параметры)

	СтруктураКнопок = ЗаписьJSONВСтруктуру(Новый Структура("remove_keyboard", Истина));
	ТекстОтвета = ТекстОтветаШага("Подтверждение", ПоляЧата, Параметры);
	
	Возврат НовоеСообщение(Параметры.ИдЧата, ТекстОтвета, СтруктураКнопок);
		
КонецФункции

Функция Контакты(ПоляЧата, Параметры)

	ТекстОтвета = ТекстОтветаШага("Контакты", ПоляЧата, Параметры);
	Возврат НовоеСообщение(Параметры.ИдЧата, ТекстОтвета);
		
КонецФункции

Функция Команды(ПоляЧата, Параметры)

	ТекстОтвета = ТекстОтветаШага("Команды", ПоляЧата, Параметры);
	Возврат НовоеСообщение(Параметры.ИдЧата, ТекстОтвета);
		
КонецФункции

Функция ОтменаЗаказа(ТекстСообщения, ПоляЧата, Параметры)

	НомерЗаказа = СтрЗаменить(ТекстСообщения, "Отмена_", "");
	НомерЗаказа = СтрЗаменить(НомерЗаказа, "_Отменить", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	СвязиКонтрагентКонтакт.Контрагент КАК Контрагент,
	|	СвязиКонтрагентКонтакт.Период КАК Период
	|ПОМЕСТИТЬ втКонтрагент
	|ИЗ
	|	РегистрСведений.ЧатыМессенджеров КАК ЧатыМессенджеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт КАК СвязиКонтрагентКонтакт
	|			ПО КонтактныеЛицаКонтактнаяИнформация.Ссылка = СвязиКонтрагентКонтакт.Контакт
	|		ПО ЧатыМессенджеров.КонтактноеЛицо = КонтактныеЛицаКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Тип = &Тип
	|	И КонтактныеЛицаКонтактнаяИнформация.Вид = &Вид
	|	И ПОДСТРОКА(КонтактныеЛицаКонтактнаяИнформация.Ссылка.Комментарий, 1, 30) = &Заметки
	|	И ЧатыМессенджеров.ИдентификаторЧата = &ИдентификаторЧата
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвязиКонтрагентКонтакт.Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказПокупателя.Ссылка КАК Заказ,
	|	ЗаказПокупателя.Номер КАК номерзаказа
	|ИЗ
	|	втКонтрагент КАК втКонтрагент
	|		ПОЛНОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ПО втКонтрагент.Контрагент = ЗаказПокупателя.Контрагент
	|ГДЕ
	|	ЗаказПокупателя.Номер = &НомерЗаказа";
	
	Запрос.УстановитьПараметр("ИдентификаторЧата", Параметры.ИдЧата);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Другое);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.МессенджерКонтактногоЛица);
	Запрос.УстановитьПараметр("Заметки", Параметры.ИдКонтакта);
	Запрос.УстановитьПараметр("НомерЗаказа", НомерЗаказа);
	
	Результат = Запрос.Выполнить();
	ВыборкаЗаказ = Результат.Выбрать();
	
	Пока ВыборкаЗаказ.Следующий() Цикл
		
		ЗаказНарядОбъект = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
		
		ЗаказНарядОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен;
		ЗаказНарядОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен;
		
		ПричинаОтмены = Справочники.ПричиныОтменыЗаказа.НайтиПоНаименованию("Отменено из чат-бота");
		Если НЕ ЗначениеЗаполнено(ПричинаОтмены) Тогда
			ПричинаОтмены = Справочники.ПричиныОтменыЗаказа.СоздатьЭлемент();
			ПричинаОтмены.Наименование = НСтр("ru='Отменено из чат-бота'");
			ПричинаОтмены.Записать();
		КонецЕсли;
		
		ЗаказНарядОбъект.ПричинаОтмены = ПричинаОтмены.Ссылка;
		
		Попытка
			ЗаказНарядОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ИмяСобытия = НСтр("ru='Чатбот.Проведение заказ-наряда'");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ЗаказПокупателя,, 
				НСтр("ru='Не удалось отменить заказ-наряд '") + ЗаказНарядОбъект.Номер);
		КонецПопытки;
		
		Попытка
			ЗаказНарядОбъект.ОбменДанными.Загрузка = Истина;
			ЗаказНарядОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ИмяСобытия = НСтр("ru='Чатбот.Запись заказ-наряда'");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаказПокупателя,, 
				НСтр("ru='Не удалось отменить заказ-наряд по клиенту '") + ЗаказНарядОбъект.Номер);
			Возврат "";
		КонецПопытки;

		Прервать;
	КонецЦикла;
	
	Возврат НовоеСообщение(Параметры.ИдЧата, НСтр("ru='Заказ '") + НомерЗаказа + НСтр("ru=' отменен'"));	
		
КонецФункции

Функция Кабинет(ПоляЧата, Параметры)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	СвязиКонтрагентКонтакт.Контрагент КАК Контрагент,
	|	СвязиКонтрагентКонтакт.Контрагент.НомерТелефонаДляПоиска КАК КонтрагентНомерТелефона,
	|	СвязиКонтрагентКонтакт.Период КАК Период
	|ПОМЕСТИТЬ втКонтрагент
	|ИЗ
	|	РегистрСведений.ЧатыМессенджеров КАК ЧатыМессенджеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт КАК СвязиКонтрагентКонтакт
	|			ПО КонтактныеЛицаКонтактнаяИнформация.Ссылка = СвязиКонтрагентКонтакт.Контакт
	|		ПО ЧатыМессенджеров.КонтактноеЛицо = КонтактныеЛицаКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Тип = &Тип
	|	И КонтактныеЛицаКонтактнаяИнформация.Вид = &Вид
	|	И ПОДСТРОКА(КонтактныеЛицаКонтактнаяИнформация.Ссылка.Комментарий, 1, 30) = &Заметки
	|	И ЧатыМессенджеров.ИдентификаторЧата = &ИдентификаторЧата
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвязиКонтрагентКонтакт.Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКонтрагент.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.Ссылка КАК Заказ,
	|	ЗаказПокупателя.Номер КАК номерзаказа,
	|	ЗаказПокупателя.Старт КАК ДатаВремяЗаписи,
	|	ЗаказПокупателя.Финиш КАК Финиш,
	|	втКонтрагент.КонтрагентНомерТелефона КАК НомерТелефона,
	|	ВЫБОР
	|		КОГДА &ТекущаяДата > ЗаказПокупателя.Старт
	|				ИЛИ ЗаказПокупателя.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказНарядов.Завершен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Архивный,
	|	ЗаказПокупателя.Работы.(
	|		Номенклатура КАК Номенклатура
	|	) КАК Работы,
	|	ЗаказПокупателя.РесурсыПредприятия.(
	|		РесурсПредприятия КАК Ресурс
	|	) КАК Ресурсы
	|ИЗ
	|	втКонтрагент КАК втКонтрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ПО втКонтрагент.Контрагент = ЗаказПокупателя.Контрагент
	|ГДЕ
	|	ЗаказПокупателя.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Архивный УБЫВ,
	|	ДатаВремяЗаписи
	|ИТОГИ ПО
	|	Архивный";
	
	Запрос.УстановитьПараметр("ИдентификаторЧата", Параметры.ИдЧата);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Другое);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.МессенджерКонтактногоЛица);
	Запрос.УстановитьПараметр("Заметки", Параметры.ИдКонтакта);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат НовоеСообщение(Параметры.ИдЧата, НСтр("ru='Предыдущие заказы не найдены'"));
	КонецЕсли; 
	
	ВыборкаАрхивный = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаАрхивный.Следующий() Цикл
		
		ВыборкаЗаказ = ВыборкаАрхивный.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаАрхивный.Архивный Тогда		
			
			ИсторияЗаказов = НСтр("ru='Архивные записи:'") + Символы.ПС + Символы.ПС;
			Пока ВыборкаЗаказ.Следующий() Цикл
				
				ПоляЧатаЗаказа = ОбщегоНазначения.СкопироватьРекурсивно(ПоляЧата);
				ЗаполнитьЗначенияСвойств(ПоляЧатаЗаказа, ВыборкаЗаказ);
				
				СтрокаЗаписи = "";
				ВыборкаРаботы = ВыборкаЗаказ.Работы.Выбрать();
				Пока ВыборкаРаботы.Следующий() Цикл
					СтрокаЗаписи = СтрокаЗаписи + ВыборкаРаботы.Номенклатура + ", ";
				КонецЦикла;
				СтрокаЗаписи = Лев(СтрокаЗаписи, СтрДлина(СтрокаЗаписи) - 2);
				ПоляЧатаЗаказа.Услуга = СтрокаЗаписи;
				
				СтрокаЗаписи = "";
				ВыборкаРесурсы = ВыборкаЗаказ.Ресурсы.Выбрать();
				Пока ВыборкаРесурсы.Следующий() Цикл
					СтрокаЗаписи = СтрокаЗаписи + ВыборкаРесурсы.Ресурс + ", ";
				КонецЦикла;
				СтрокаЗаписи = Лев(СтрокаЗаписи, СтрДлина(СтрокаЗаписи) - 2);
				ПоляЧатаЗаказа.Ресурс = СтрокаЗаписи;
				
				ИсторияЗаказов = ИсторияЗаказов + ТекстОтветаШага("Кабинет", ПоляЧатаЗаказа, Параметры) + Символы.ПС + Символы.ПС;
			КонецЦикла;
			
			ОтправитьСообщение(НовоеСообщение(Параметры.ИдЧата, ИсторияЗаказов), Параметры);
			
		Иначе
			ОтправитьСообщение(НовоеСообщение(Параметры.ИдЧата, НСтр("ru='Предстоящие записи:'")), Параметры);
			
			ВыборкаЗаказ = ВыборкаАрхивный.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаЗаказ.Следующий() Цикл
				
				ПоляЧатаЗаказа = ОбщегоНазначения.СкопироватьРекурсивно(ПоляЧата);
				ЗаполнитьЗначенияСвойств(ПоляЧатаЗаказа, ВыборкаЗаказ);
				
				СтрокаЗаписи = "";
				ВыборкаРаботы = ВыборкаЗаказ.Работы.Выбрать();
				Пока ВыборкаРаботы.Следующий() Цикл
					СтрокаЗаписи = СтрокаЗаписи + ВыборкаРаботы.Номенклатура + ", ";
				КонецЦикла;
				СтрокаЗаписи = Лев(СтрокаЗаписи, СтрДлина(СтрокаЗаписи) - 2);
				ПоляЧатаЗаказа.Услуга = СтрокаЗаписи;
				
				СтрокаЗаписи = "";
				ВыборкаРесурсы = ВыборкаЗаказ.Ресурсы.Выбрать();
				Пока ВыборкаРесурсы.Следующий() Цикл
					СтрокаЗаписи = СтрокаЗаписи + ВыборкаРесурсы.Ресурс + ", ";
				КонецЦикла;
				СтрокаЗаписи = Лев(СтрокаЗаписи, СтрДлина(СтрокаЗаписи) - 2);
				ПоляЧатаЗаказа.Ресурс = СтрокаЗаписи;
				
				ТекстЗаказа = ТекстОтветаШага("Кабинет", ПоляЧатаЗаказа, Параметры);
				ОтправитьЗаказ(ТекстЗаказа, ПоляЧатаЗаказа, Параметры);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ПерелистнутьСтраницуУслуги(ПоляЧата, Параметры)

	НомерСтраницы = Число(СтрЗаменить(Параметры.ТекстСообщения, "У_Страница", ""));
	
	СтрокиУслуг = Параметры.Услуги.Скопировать(Новый Структура("Группа", ПоляЧата.Группа), "УслугаНаименование").ВыгрузитьКолонку("УслугаНаименование");
	
	КнопкиСтрока = РазбитьСписокНаСтроки(СтрокиУслуг, Параметры.ЧислоКолонокКнопок, НомерСтраницы, "У");
	структураОтвет = ИзменитьСообщение(Параметры.ИдЧата, Параметры.ИдСообщения, ТекстОтвета(ПоляЧата, Параметры), КнопкиСтрока);
	
	Возврат	структураОтвет;
	
КонецФункции

Функция ПерелистнутьСтраницуГруппы(ПоляЧата, Параметры)

	НомерСтраницы = Число(СтрЗаменить(Параметры.ТекстСообщения, "Г_Страница", ""));
	
	КнопкиСтрока = РазбитьСписокНаСтроки(Параметры.Группы.ВыгрузитьКолонку("ГруппаНаименование"), Параметры.ЧислоКолонокКнопок, НомерСтраницы, "Г");
	структураОтвет = ИзменитьСообщение(Параметры.ИдЧата, Параметры.ИдСообщения, ТекстОтвета(ПоляЧата, Параметры), КнопкиСтрока);
	
	Возврат	структураОтвет;
	
КонецФункции

Функция ИспользоватьГруппы(ПоляЧата, Параметры)
	
	Если Параметры.ИспользоватьУслуги 
		И Параметры.Группы.Количество() > 1 
		И НЕ ЗначениеЗаполнено(ПоляЧата.Услуга) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Процедура СохранитьСостояниеВРегистр(ПоляЧата, Параметры)

	НаборЗаписей = РегистрыСведений.ЧатыМессенджеров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторКонтакта.Установить(Параметры.ИдКонтакта); 
	НаборЗаписей.Отбор.Подтверждена.Установить(Ложь); 
	НаборЗаписей.Записать();
	
	ОбновленнаяЗапись = РегистрыСведений.ЧатыМессенджеров.СоздатьМенеджерЗаписи();
	
	ОбновленнаяЗапись.ИдентификаторКонтакта = Параметры.ИдКонтакта;
	ОбновленнаяЗапись.КонтактноеЛицо = ПоляЧата.КонтактноеЛицо;
	ОбновленнаяЗапись.ДатаВремяЗаписи = ПоляЧата.ДатаВремяЗаписи;
	
	ОбновленнаяЗапись.Группа = ПоляЧата.Группа;
	ОбновленнаяЗапись.Услуга = ПоляЧата.Услуга;
	ОбновленнаяЗапись.Ресурс = ПоляЧата.Ресурс;
	ОбновленнаяЗапись.Телефон = ПоляЧата.Телефон;
	
	ОбновленнаяЗапись.ИдентификаторЧата = Параметры.ИдЧата;
	ОбновленнаяЗапись.НомерСообщенияОбработано = ПоляЧата.СообщениеСКнопками;
	ОбновленнаяЗапись.НомерСообщенияПринято = Параметры.ИдОбновления;
	ОбновленнаяЗапись.ДатаВремяСоздания = ПоляЧата.ДатаВремяСоздания;
	ОбновленнаяЗапись.ДатаВремяИзменения = ТекущаяДатаСеанса();
	
	ОбновленнаяЗапись.Подтверждена = ПоляЧата.Подтверждена;
	
	ОбновленнаяЗапись.Записать(Истина);

КонецПроцедуры

Функция ПрочитатьСохраненныеПоляЧата(Параметры)
	
	ПоляСообщения = Новый Структура;
	ПоляСообщения.Вставить("КонтактноеЛицо", Неопределено);
	ПоляСообщения.Вставить("Группа", Неопределено);
	ПоляСообщения.Вставить("Услуга", Неопределено);
	ПоляСообщения.Вставить("Ресурс", Неопределено);
	ПоляСообщения.Вставить("ДатаВремяЗаписи", Неопределено);
	ПоляСообщения.Вставить("Телефон", Неопределено);
	ПоляСообщения.Вставить("НомерЗаказа", Неопределено);
	ПоляСообщения.Вставить("ДатаВремяСоздания", Неопределено);
	ПоляСообщения.Вставить("Длительность", Неопределено);
	ПоляСообщения.Вставить("Подтверждена", Ложь);
	ПоляСообщения.Вставить("СообщениеСКнопками", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧатыМессенджеров.ИдентификаторКонтакта КАК ИдентификаторКонтакта,
	|	ЧатыМессенджеров.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ЧатыМессенджеров.Подтверждена КАК Подтверждена,
	|	ЧатыМессенджеров.Группа КАК Группа,
	|	ЧатыМессенджеров.Услуга КАК Услуга,
	|	ЧатыМессенджеров.Ресурс КАК Ресурс,
	|	ЧатыМессенджеров.ДатаВремяЗаписи КАК ДатаВремяЗаписи,
	|	ЧатыМессенджеров.Телефон КАК Телефон,
	|	ЧатыМессенджеров.ИдентификаторЧата КАК ИдентификаторЧата,
	|	ЧатыМессенджеров.ДатаВремяСоздания КАК ДатаВремяСоздания,
	|	ЧатыМессенджеров.НомерСообщенияОбработано КАК НомерСообщенияОбработано
	|ИЗ
	|	РегистрСведений.ЧатыМессенджеров КАК ЧатыМессенджеров
	|ГДЕ
	|	НЕ ЧатыМессенджеров.Подтверждена
	|	И ЧатыМессенджеров.ИдентификаторКонтакта = &ИдКонтакта";
	
	Запрос.УстановитьПараметр("ИдКонтакта", Параметры.ИдКонтакта);
	
	РезультатСохраненныеЗначения = Запрос.Выполнить();
	ВыборкаСохраненныеЗначения = РезультатСохраненныеЗначения.Выбрать();
	
	Пока ВыборкаСохраненныеЗначения.Следующий() Цикл
		
		ПоляСообщения.Вставить("КонтактноеЛицо", ВыборкаСохраненныеЗначения.КонтактноеЛицо);
		ПоляСообщения.Вставить("Группа", ВыборкаСохраненныеЗначения.Группа);
		ПоляСообщения.Вставить("Услуга", ВыборкаСохраненныеЗначения.Услуга);
		ПоляСообщения.Вставить("Ресурс", ВыборкаСохраненныеЗначения.Ресурс);
		ПоляСообщения.Вставить("ДатаВремяЗаписи", ВыборкаСохраненныеЗначения.ДатаВремяЗаписи);
		ПоляСообщения.Вставить("ДатаВремяСоздания", ВыборкаСохраненныеЗначения.ДатаВремяСоздания);
		ПоляСообщения.Вставить("Телефон", ВыборкаСохраненныеЗначения.Телефон);
		ПоляСообщения.Вставить("СообщениеСКнопками", ВыборкаСохраненныеЗначения.НомерСообщенияОбработано);
		
	КонецЦикла;	
	
	Возврат ПоляСообщения;
	
КонецФункции

Процедура ПрочитатьНастройкиЧатботов(Параметры)
	
	НастройкиЧатбота = Константы.НастройкиЧатботов.Получить().Получить();
	
	ДанныеОбУслугахМастерах = ДанныеОбУслугахМастерах();
	Группы = ДанныеОбУслугахМастерах[0].Выгрузить();
	Услуги = ДанныеОбУслугахМастерах[1].Выгрузить();
	Ресурсы = ДанныеОбУслугахМастерах[2].Выгрузить();
	
	Параметры.Вставить("ИмяБота", НастройкиЧатбота.ИмяБота);
	Параметры.Вставить("Токен", НастройкиЧатбота.Токен);
	
	Параметры.Вставить("ИспользоватьПрокси", НастройкиЧатбота.ИспользоватьПрокси);
	Параметры.Вставить("ПроксиСервер", НастройкиЧатбота.ПроксиСервер);
	
	Если НастройкиЧатбота.ИспользоватьПрокси = 1 Тогда
		
		СистемныеНастройкиЧатботов = Константы.ОбщиеНастройкиЧатботов.Получить().Получить();
		
		Если ТипЗнч(СистемныеНастройкиЧатботов) <> Тип("Структура") Тогда
			Параметры.Вставить("СистемныйПроксиСервер", СистемныеНастройкиЧатботов.СистемныйПроксиСервер);
			Параметры.Вставить("ПроксиЛогин", СистемныеНастройкиЧатботов.ПроксиЛогин);
			Параметры.Вставить("ПроксиПароль", СистемныеНастройкиЧатботов.ПроксиПароль);
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("СписокШагов", НастройкиЧатбота.ТаблицаСообщений);
	Параметры.Вставить("НомерЗаказа", "");
	Параметры.Вставить("КартинкиУслуг", НастройкиЧатбота.КартинкиУслуг);
	Параметры.Вставить("КартинкиРесурсов", НастройкиЧатбота.КартинкиРесурсов);
	Параметры.Вставить("ВидЦен", НастройкиЧатбота.ВидЦен);
	Параметры.Вставить("МинимальныйИнтервалУслуги", НастройкиЧатбота.МинимальныйИнтервалУслуги);
	Параметры.Вставить("ЧислоКолонокКнопок", НастройкиЧатбота.ЧислоКолонокКнопок);
	Параметры.Вставить("ВидЗаказНаряда", НастройкиЧатбота.ВидЗаказНаряда);
	Параметры.Вставить("СостояниеЗаказНаряда", НастройкиЧатбота.СостояниеЗаказНаряда);
	Параметры.Вставить("РежимЗаполненияРесурса", НастройкиЧатбота.РежимЗаполненияРесурса);
	
	Параметры.Вставить("ИспользоватьУслуги", НастройкиЧатбота.ИспользоватьУслуги);
	Параметры.Вставить("ИспользоватьРесурсы", НастройкиЧатбота.ИспользоватьРесурсы);
	Параметры.Вставить("ИспользоватьДату", НастройкиЧатбота.ИспользоватьДату);
	
	Параметры.Вставить("ТекущийМесяц", НачалоМесяца(ТекущаяДатаСеанса()));
	Параметры.Вставить("Группы", Группы);
	Параметры.Вставить("Услуги", Услуги);
	Параметры.Вставить("Ресурсы", Ресурсы);
	
КонецПроцедуры

Процедура ПрочитатьПоляСообщения(Параметры, СтруктураДанные)
	
	// анализ сообщения
	Если СтруктураДанные.Получить("callback_query") <> Неопределено Тогда
	    ПоляСообщения = СтруктураДанные.Получить("callback_query").Получить("message");
		ТекстСообщения = СтруктураДанные.Получить("callback_query").Получить("data");
	ИначеЕсли СтруктураДанные.Получить("message") <> Неопределено Тогда
		ПоляСообщения = СтруктураДанные.Получить("message");
		Если ПоляСообщения.Получить("contact") <> Неопределено Тогда
			ТекстСообщения = "contact";
		Иначе
			ТекстСообщения = ПоляСообщения.Получить("text");
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли; 
	
	Если ПоляСообщения.Получить("reply_to_message") <> Неопределено Тогда
		ИдОтветаНаСообщения = Формат(ПоляСообщения.Получить("reply_to_message").Получить("message_id"), "ЧГ=");
	Иначе
		ИдОтветаНаСообщения = Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("ПоляЧата", ПоляСообщения.Получить("chat"));
	Параметры.Вставить("ТекстСообщения", ТекстСообщения);
	Параметры.Вставить("ПоляСообщения", ПоляСообщения);
	Параметры.Вставить("ИдСообщения", Формат(ПоляСообщения.Получить("message_id"), "ЧГ="));
	Параметры.Вставить("ИдОтветаНаСообщения", ИдОтветаНаСообщения);
	Параметры.Вставить("ИдОбновления", Формат(СтруктураДанные.Получить("update_id"), "ЧГ="));
	
	Параметры.Вставить("ИдЧата", Формат(Параметры.ПоляЧата.Получить("id"), "ЧГ="));
	Параметры.Вставить("ИдКонтакта", Формат(Параметры.ПоляЧата.Получить("id"), "ЧГ="));
	Параметры.Вставить("ИмяПользователя", Параметры.ПоляЧата.Получить("username"));
	Параметры.Вставить("Имя", Параметры.ПоляЧата.Получить("first_name"));
	
КонецПроцедуры

#Область РеглЗадание

Функция ПолучитьСообщенияЧатбота(НастройкиЧатбота)
	
	URL = "https://" + АдресСервераTelegram() + "/bot" + НастройкиЧатбота.Токен + "/getUpdates";
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("charset", "UTF-8");
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	
	СтруктураДанных = Новый Структура("timeout");
	СтруктураДанных["timeout"] = ВремяОжиданияОтветаДлинногоЗапросаTelegram();
	НомерСообщенияПринято = НомерПоследнегоОбновления();
	Если ЗначениеЗаполнено(НомерСообщенияПринято) Тогда
		СтруктураДанных.Вставить("offset", Число(НомерСообщенияПринято) + 1);
	КонецЕсли;
	
	ТелоЗапроса = ЗаписьJSONВСтруктуру(СтруктураДанных);
	Если ТелоЗапроса <> Неопределено Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;	
	
	ОтветСоответствие = Неопределено;
	
	Попытка
		// ожидание 10 сек
		HTTPСоединение = СоединениеLongPolling(НастройкиЧатбота);
		
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТелефонияСервер.ЗаписатьЗапросВЖурналРегистрации(
		"Чатбот",
		"" + ОписаниеОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		
		Ответ = HTTPОтвет.ПолучитьТелоКакСтроку();
		ОтветСоответствие = ЧтениеJSONВСтруктуру(Ответ, Истина);
		
		Если ОтветСоответствие.Получить("ok") = Истина Тогда
			Возврат ОтветСоответствие.Получить("result");
		Иначе
			ТелефонияСервер.ЗаписатьЗапросВЖурналРегистрации(
			"Чатбот",
			"Ошибка! Ответ сервера: " + HTTPОтвет.КодСостояния + Символы.ПС + HTTPОтвет.ПолучитьТелоКакСтроку());
		КонецЕсли;
	Иначе
		ТелефонияСервер.ЗаписатьЗапросВЖурналРегистрации(
		"Чатбот",
		"Ошибка! Ответ сервера: " + HTTPОтвет.КодСостояния + Символы.ПС + HTTPОтвет.ПолучитьТелоКакСтроку());
	КонецЕсли;
		
	Возврат ОтветСоответствие;
	
КонецФункции

Функция СоединениеLongPolling(НастройкиЧатбота)
	
	URL = "https://" + АдресСервераTelegram();
	ТаймаутСоединения = ВремяОжиданияОтветаДлинногоЗапросаTelegram();
	
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС);
	
	Возврат Новый HTTPСоединение(АдресСервераTelegram(), ПортСоединенияTelegram(), , , Прокси(НастройкиЧатбота), ТаймаутСоединения, ЗащищенноеСоединение);
	
КонецФункции

Функция АдресСервераTelegram()
	Возврат "api.telegram.org";
КонецФункции

Функция ПортСоединенияTelegram()
	Возврат 443;
КонецФункции

Функция НомерПоследнегоОбновления()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЧатыМессенджеров.НомерСообщенияПринято) КАК НомерСообщенияПринято
	|ИЗ
	|	РегистрСведений.ЧатыМессенджеров КАК ЧатыМессенджеров";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Формат(Выборка.НомерСообщенияПринято,"ЧГ=");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ВремяОжиданияОтветаДлинногоЗапросаTelegram()
	Возврат 30;
КонецФункции

#КонецОбласти

// АПК:299-выкл процедура вызываются в приемочном тесте
Функция ПроверитьДатуВремяАвтотест(ДатаЗаписи, Услуга, Ресурс, МинимальныйИнтервалУслуги, ЗаМесяц, ТекущаяДатаВремя) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("МинимальныйИнтервалУслуги", МинимальныйИнтервалУслуги);
	Параметры.Вставить("ТекущаяДатаВремя", ТекущаяДатаВремя);
	
	ПоляЧата = Новый Структура();
	ПоляЧата.Вставить("Услуга", Услуга);
	ПоляЧата.Вставить("Ресурс", Ресурс);
	ПоляЧата.Вставить("ДатаВремяЗаписи", ДатаЗаписи);
	
	Если ЗаМесяц Тогда
		Возврат РазрезЗаписи("Дата", ПоляЧата, Параметры);
	Иначе
		Возврат РазрезЗаписи("Время", ПоляЧата, Параметры);	
	КонецЕсли; 
	
КонецФункции
// АПК:299-вкл

Функция Прокси(НастройкиЧатбота) Экспорт
	
	Если НастройкиЧатбота.ИспользоватьПрокси = 0 Тогда // настройки по-умолчанию
		Возврат Неопределено;
	ИначеЕсли НастройкиЧатбота.ИспользоватьПрокси = 1 Тогда // общие настройки прокси
		Возврат ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
	ИначеЕсли НастройкиЧатбота.ИспользоватьПрокси = 2 Тогда // ручные настройки
		НастройкаПроксиСервера = Новый Соответствие;
		НастройкаПроксиСервера.Вставить("ИспользоватьПрокси", Истина);
		НастройкаПроксиСервера.Вставить("НеИспользоватьПроксиДляЛокальныхАдресов", Ложь);
		НастройкаПроксиСервера.Вставить("НеИспользоватьПроксиДляАдресов", Новый Массив);
		НастройкаПроксиСервера.Вставить("ИспользоватьСистемныеНастройки", Ложь);
		НастройкаПроксиСервера.Вставить("ИспользоватьАутентификациюОС", Истина);
		
		// Указываем адрес, логин и пароль в одной строке 
		// https_proxy="https://user:pass@proxy:port/"		
		НастройкаПроксиСервера.Вставить("Сервер"            , НастройкиЧатбота.ПроксиСервер); 
		НастройкаПроксиСервера.Вставить("Пользователь"      , "");
		НастройкаПроксиСервера.Вставить("Пароль"            , "");
	
		Возврат ПолучениеФайловИзИнтернетаСлужебный.НовыйИнтернетПрокси(НастройкаПроксиСервера, "HTTPS");
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ЧтениеJSONВСтруктуру(Знач СтруктураВСтроке, ВернутьСоответствие = Истина) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтруктураВСтроке);
	
	Возврат ПрочитатьJSON(ЧтениеJSON, ВернутьСоответствие);

КонецФункции

Функция ЗаписьJSONВСтруктуру(Знач СтруктураЗначений) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗначений);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ДатаИзСтрокиЛюбогоФормата(СтрДата)
	
	Разделители = "-.,/:";
	
	ДлинаСтроки = СтрДлина(СтрДата);
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("");
	
	Для НС = 1 По ДлинаСтроки Цикл
		Сим = Сред(СтрДата, НС, 1);
		Если Найти(Разделители, Сим) > 0 Тогда
			МассивПолей.Добавить("");
		ИначеЕсли (Сим = "T" ИЛИ Сим = " ") И МассивПолей.ВГраница() < 3 Тогда
			МассивПолей.Вставить(3, "");
		ИначеЕсли Найти("0123456789", Сим) > 0 Тогда
			МассивПолей[МассивПолей.ВГраница()] = МассивПолей[МассивПолей.ВГраница()] + Сим;
		КонецЕсли;
	КонецЦикла;
	
	Поле1 = Макс(1, XMLЗначение(Тип("Число"), " " + СокрЛП(МассивПолей[0])));
	Поле2 = Макс(1, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 1, "1", СокрЛП(МассивПолей[1]))));
	Поле3 = Макс(1, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 2, "1", СокрЛП(МассивПолей[2]))));
	
	Если СтрДлина(МассивПолей[0]) = 8 ИЛИ СтрДлина(МассивПолей[0]) = 14 Тогда
		
		Возврат Дата(МассивПолей[0]);
		
	ИначеЕсли СтрДлина(МассивПолей[0]) = 4 Тогда
		Год   = Мин(3999, Поле1);
		Месяц = Мин(12,   Поле2);
		День  = Мин(31,   Поле3);
	ИначеЕсли МассивПолей.ВГраница() > 0
		И СтрДлина(МассивПолей[1]) = 4 Тогда
		Год   = Мин(3999, Поле2);
		Месяц = Мин(12,   Поле1);
		День  = Мин(31,   Поле3);
	Иначе
		Год   = Мин(3999, Поле3);
		Месяц = Мин(12,   Поле2);
		День  = Мин(31,   Поле1);
	КонецЕсли;
	
	Час = Мин(23, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 3, "0", СокрЛП(МассивПолей[3]))));
	Мин = Мин(59, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 4, "0", СокрЛП(МассивПолей[4]))));
	Сек = Мин(59, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 5, "0", СокрЛП(МассивПолей[5]))));
	
	Возврат Дата(Год, Месяц, День, Час, Мин, Сек);
	
КонецФункции

Процедура ПереключитьИспользованиеЧатботов(НовоеЗначение) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Если СоздатьИзменитьСлужебногоПользователяЧатбота(НовоеЗначение) Тогда
			Константы.ИспользоватьЧатботов.Установить(НовоеЗначение);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ИспользоватьЧатБот", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;	
	
КонецПроцедуры

// Создает или выключает доступ служебного пользователя Чатбота.
// Требуется для авторизации http-сервиса Chatbot.
//
// Параметры:
//  Включить - Булево - Истина при включении Чатбота.
// 
// Возвращаемое значение:
//   - Булево
//
Функция СоздатьИзменитьСлужебногоПользователяЧатбота(Включить = Ложь) Экспорт
	
	Логин = СлужебныйПользовательЧатботаЛогин();
	Пароль = СлужебныйПользовательЧатботаПароль();
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИзСправочника = Пользователи.НайтиПоИмени(Логин);
	УстановитьПривилегированныйРежим(Ложь);
	
	Попытка
		Если ПользовательИзСправочника = Неопределено Тогда
			
			ИмяСобытия = "Чатбот.СозданиеСлужебногоПользователя";
			
			ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
			ОписаниеПользователяИБ.Имя = Логин;
			ОписаниеПользователяИБ.ПолноеИмя = НСтр("ru='Служебный пользователь чатбота'");
			ОписаниеПользователяИБ.АутентификацияСтандартная = Включить;
			ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
			ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Истина);
			ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль = Истина;
			ОписаниеПользователяИБ.Пароль = Пароль;
			ОписаниеПользователяИБ.Роли = Новый Массив;
			ОписаниеПользователяИБ.Роли.Добавить(Метаданные.Роли.ИспользованиеМетодовЧатботов.Имя);
			
			НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
			НовыйПользователь.Наименование = ОписаниеПользователяИБ.ПолноеИмя;
			НовыйПользователь.Служебный = Истина;
			НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
			НовыйПользователь.Записать();
			
		Иначе
			
			ИмяСобытия = "Чатбот.ИзменениеДоступаСлужебногоПользователя";
			ИзменитьДоступВБазуСлужебногоПользователяЧатбота(Включить, Пароль, ПользовательИзСправочника);
			
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.Пользователи, ПользовательИзСправочника);
		Возврат Истина;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция СлужебныйПользовательЧатботаЛогин() Экспорт
	Возврат "ChatbotService";
КонецФункции

Функция СлужебныйПользовательЧатботаПароль()
	Возврат "c3804122-a756-4aad-a9ff-5de8db9b1394";
КонецФункции

Функция СтрокаАвторизацииФайлVRDТекстПодсказки() Экспорт
	
	Возврат СтрШаблон(
		"Usr=%1;Pwd=&quot;%2&quot;;",
		СлужебныйПользовательЧатботаЛогин(),
		СлужебныйПользовательЧатботаПароль());
	
КонецФункции

Функция КорневойURLСервисаОсновнойПубликации(Чатбот) Экспорт
	
	ШаблонURL = "";
	
	Если Чатбот = Перечисления.ЧатБоты.Telegram Тогда
		ШаблонURL = ШаблонURLHTTPСервисаTelegram();
	Иначе
		ВызватьИсключение ТекстОшибкиРеализацияНеОпределена(Чатбот, "КорневойURLСервисаОсновнойПубликации");
	КонецЕсли;
	
	Возврат СтрШаблон("chatbot/%1", ШаблонURL);
	
КонецФункции

Функция ШаблонURLHTTPСервисаTelegram()
	Возврат "telegram";
КонецФункции

Процедура ИзменитьДоступВБазуСлужебногоПользователяЧатбота(Включить, Знач Пароль, Знач ПользовательИзСправочника)
	
	ОбновляемыеСвойства = Новый Структура;
	ОбновляемыеСвойства.Вставить("СтарыйПароль", Пароль);
	ОбновляемыеСвойства.Вставить("АутентификацияСтандартная", Включить);
	
	ОписаниеОшибки = "";
	ПользовательИБ = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	Пользователи.УстановитьСвойстваПользователяИБ(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательИзСправочника, "ИдентификаторПользователяИБ"),
		ОбновляемыеСвойства,
		Ложь,
		Ложь
	);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ТекстОшибкиРеализацияНеОпределена(Чатбот, ИмяМетода)
	
	Возврат СтрШаблон(НСтр("ru='Не заполнена реализация метода ""%1"" для чат-бота ""%2""'"), ИмяМетода, Чатбот);
	
КонецФункции

#КонецОбласти
