
#Область Переход

Процедура ВыполнитьПереход() Экспорт
	
	УдалитьВсеОбъектыНаСервере();
	
	ПеренестиСтруктурныеЕдиницы();
	ПеренестиКонтрагенты();
	ПеренестиКассыККМ();
	ПеренестиСтавкиНДС();
	ПеренестиСтатьи();
	ПеренестиНоменклатуру();
	ПеренестиСпецификации();
	
	ПерейтиНаМобильноеПриложение20();
	УстановитьОбычныйИнтерфейс();
	
КонецПроцедуры

#КонецОбласти

#Область Справочники

Процедура ПеренестиСтруктурныеЕдиницы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка,
	|	СтруктурныеЕдиницы.ПометкаУдаления КАК ПометкаУдаления,
	|	СтруктурныеЕдиницы.Родитель КАК Родитель,
	|	СтруктурныеЕдиницы.Код КАК Код,
	|	СтруктурныеЕдиницы.Наименование КАК Наименование,
	|	СтруктурныеЕдиницы.Предопределенный КАК Предопределенный,
	|	СтруктурныеЕдиницы.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайтиСоздатьСтруктурнуюЕдиницуМП(ВыборкаДетальныеЗаписи, Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьСтруктурнуюЕдиницуМП(Выборка, ЭтоНоваяЗагрузка)
	
	// Проверяем предопределенные данные
	Если Выборка.Предопределенный Тогда
		
		СсылкаНаПредопределенныйОбъект = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтруктурныеЕдиницыМП." + Выборка.ИмяПредопределенныхДанных);
		
		НужноПерезаписатьПредопределенныйОбъект = Ложь;
		
		Если СсылкаНаПредопределенныйОбъект.Наименование <> Выборка.Наименование Тогда
			НужноПерезаписатьПредопределенныйОбъект = Истина;
		КонецЕсли;
		
		Если СсылкаНаПредопределенныйОбъект.ПометкаУдаления <> Выборка.ПометкаУдаления Тогда
			НужноПерезаписатьПредопределенныйОбъект = Истина;
		КонецЕсли;
		
		Если СсылкаНаПредопределенныйОбъект.Код <> Выборка.Код Тогда
			НужноПерезаписатьПредопределенныйОбъект = Истина;
		КонецЕсли;
		
		Если СсылкаНаПредопределенныйОбъект.Родитель <> Выборка.Родитель Тогда
			НужноПерезаписатьПредопределенныйОбъект = Истина;
		КонецЕсли;
		
		Если НужноПерезаписатьПредопределенныйОбъект Тогда
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.СтруктурныеЕдиницыМП");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаПредопределенныйОбъект);
				Блокировка.Заблокировать();
				
				ПредопределенныйОбъект = СсылкаНаПредопределенныйОбъект.ПолучитьОбъект();
				ПредопределенныйОбъект.Наименование = Выборка.Наименование;
				ПредопределенныйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
				ПредопределенныйОбъект.Код = Выборка.Код;
				
				Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
					СсылкаНаРодителя = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Выборка.Родитель.Код);
					Если НЕ ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
						Родитель = НайтиСоздатьСтруктурнуюЕдиницуМП(Выборка.Родитель, Ложь);
						ПредопределенныйОбъект.Родитель = Родитель;
					Иначе
						ПредопределенныйОбъект.Родитель = СсылкаНаРодителя;
					КонецЕсли;
				КонецЕсли;
				
				ПредопределенныйОбъект.Записать();
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
		Если НЕ ЭтоНоваяЗагрузка Тогда
			Возврат СсылкаНаПредопределенныйОбъект;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЭтоНоваяЗагрузка Тогда
		СсылкаНаРодителя = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Выборка.Код);
		Если ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
			Возврат СсылкаНаРодителя;
		КонецЕсли;
	Иначе
		СсылкаНаОбъект = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Выборка.Код);
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	НовыйОбъект = Справочники.СтруктурныеЕдиницыМП.СоздатьЭлемент();
	НовыйОбъект.Наименование = Выборка.Наименование;
	НовыйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
	НовыйОбъект.Код = Выборка.Код;
	
	//НовыйОбъект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница;
	//НовыйОбъект.РозничныйВидЦен = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
	
	Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
		СсылкаНаРодителя = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Выборка.Родитель.Код);
		Если НЕ ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
			Родитель = НайтиСоздатьСтруктурнуюЕдиницуМП(Выборка.Родитель, Ложь);
			НовыйОбъект.Родитель = Родитель;
		Иначе
			НовыйОбъект.Родитель = СсылкаНаРодителя;
		КонецЕсли;
	КонецЕсли;
	
	НовыйОбъект.Записать();
	
	Если НЕ ЭтоНоваяЗагрузка Тогда
		Возврат НовыйОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции

Процедура ПеренестиКонтрагенты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.ПометкаУдаления КАК ПометкаУдаления,
	|	Контрагенты.Родитель КАК Родитель,
	|	Контрагенты.Код КАК Код,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.ЭтоГруппа КАК ЭтоГруппа,
	|	КонтрагентыКонтактнаяИнформация.Представление КАК НомерТелефона,
	|	КонтрагентыКонтактнаяИнформация1.Представление КАК АдресЭП,
	|	КонтрагентыКонтактнаяИнформация2.Представление КАК Адрес,
	|	Контрагенты.Комментарий КАК ДополнительнаяИнформация
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ПО Контрагенты.Ссылка = КонтрагентыКонтактнаяИнформация.Ссылка
	|			И (КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация1
	|		ПО Контрагенты.Ссылка = КонтрагентыКонтактнаяИнформация1.Ссылка
	|			И (КонтрагентыКонтактнаяИнформация1.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация2
	|		ПО Контрагенты.Ссылка = КонтрагентыКонтактнаяИнформация2.Ссылка
	|			И (КонтрагентыКонтактнаяИнформация2.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтрагентыКонтактнаяИнформация2.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента))";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайтиСоздатьКонтрагентаМП(ВыборкаДетальныеЗаписи, Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьКонтрагентаМП(Выборка, ЭтоНоваяЗагрузка)
	
	Если НЕ ЭтоНоваяЗагрузка Тогда
		СсылкаНаРодителя = Справочники.КонтрагентыМП.НайтиПоКоду(Выборка.Код);
		Если ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
			Возврат СсылкаНаРодителя;
		КонецЕсли;
	Иначе
		СсылкаНаОбъект = Справочники.КонтрагентыМП.НайтиПоКоду(Выборка.Код);
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Выборка.ЭтоГруппа Тогда
		НовыйОбъект = Справочники.КонтрагентыМП.СоздатьГруппу();
	Иначе
		НовыйОбъект = Справочники.КонтрагентыМП.СоздатьЭлемент();
		НовыйОбъект.ДополнительнаяИнформация = Выборка.ДополнительнаяИнформация;
		НовыйОбъект.НомерТелефона = Выборка.НомерТелефона;
		НовыйОбъект.АдресЭП = Выборка.АдресЭП;
		НовыйОбъект.Адрес = Выборка.Адрес;
	КонецЕсли;
	
	НовыйОбъект.Наименование = Выборка.Наименование;
	НовыйОбъект.Код = Выборка.Код;
	НовыйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
	
	Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
		СсылкаНаРодителя = Справочники.КонтрагентыМП.НайтиПоКоду(Выборка.Родитель.Код);
		Если НЕ ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
			Родитель = НайтиСоздатьКонтрагентаМП(Выборка.Родитель, Ложь);
			НовыйОбъект.Родитель = Родитель;
		Иначе
			НовыйОбъект.Родитель = СсылкаНаРодителя;
		КонецЕсли;
	КонецЕсли;
	
	НовыйОбъект.Записать();
	
	Если НЕ ЭтоНоваяЗагрузка Тогда
		Возврат НовыйОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции

Процедура ПеренестиКассыККМ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КассыККМ.ПометкаУдаления КАК ПометкаУдаления,
		|	КассыККМ.Код КАК Код,
		|	КассыККМ.Наименование КАК Наименование,
		|	КассыККМ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	КассыККМ.СтруктурнаяЕдиница.Код КАК СтруктурнаяЕдиницаКод
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СоздатьКассуККММП(ВыборкаДетальныеЗаписи, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьКассуККММП(Выборка, ЭтоНоваяЗагрузка)
	
	НовыйОбъект = Справочники.КассыККММП.СоздатьЭлемент();
	НовыйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
	НовыйОбъект.Код = Выборка.Код;
	НовыйОбъект.Наименование = Выборка.Наименование;
	
	Если ЗначениеЗаполнено(Выборка.СтруктурнаяЕдиница) Тогда
		НовыйОбъект.РозничнаяТочка = Справочники.СтруктурныеЕдиницыМП.НайтиПоКоду(Выборка.СтруктурнаяЕдиницаКод);
	КонецЕсли;
	
	НовыйОбъект.Записать();
	
КонецПроцедуры

Процедура ПеренестиСтавкиНДС()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДС.ПометкаУдаления КАК ПометкаУдаления,
		|	СтавкиНДС.Наименование КАК Наименование,
		|	СтавкиНДС.Ставка КАК Ставка,
		|	СтавкиНДС.НеОблагается КАК НеОблагается,
		|	СтавкиНДС.Расчетная КАК Расчетная
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайтиСоздатьСтавкуНДСМП(ВыборкаДетальныеЗаписи, Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьСтавкуНДСМП(Выборка, ЭтоНоваяЗагрузка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДСМП.ПометкаУдаления КАК ПометкаУдаления,
		|	СтавкиНДСМП.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтавкиНДСМП КАК СтавкиНДСМП
		|ГДЕ
		|	СтавкиНДСМП.Наименование = &Наименование
		|	И СтавкиНДСМП.Ставка = &Ставка
		|	И СтавкиНДСМП.НеОблагается = &НеОблагается
		|	И СтавкиНДСМП.Расчетная = &Расчетная
		|	И СтавкиНДСМП.ПометкаУдаления = &ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Наименование", Выборка.Наименование);
	Запрос.УстановитьПараметр("НеОблагается", Выборка.НеОблагается);
	Запрос.УстановитьПараметр("Расчетная", Выборка.Расчетная);
	Запрос.УстановитьПараметр("Ставка", Выборка.Ставка);
	Запрос.УстановитьПараметр("ПометкаУдаления", Выборка.ПометкаУдаления);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СтавкаНайдена = Ложь;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтавкаНайдена = Истина;
	КонецЕсли;
	
	Если СтавкаНайдена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = Справочники.СтавкиНДСМП.СоздатьЭлемент();
	НовыйОбъект.Наименование = Выборка.Наименование;
	НовыйОбъект.НеОблагается = Выборка.НеОблагается;
	НовыйОбъект.Расчетная = Выборка.Расчетная;
	НовыйОбъект.Ставка = Выборка.Ставка;
	НовыйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
	НовыйОбъект.Записать();
	
КонецФункции

Процедура ПеренестиСтатьи()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиДвиженияДенежныхСредств.ПометкаУдаления КАК ПометкаУдаления,
		|	СтатьиДвиженияДенежныхСредств.Родитель КАК Родитель,
		|	СтатьиДвиженияДенежныхСредств.ЭтоГруппа КАК ЭтоГруппа,
		|	СтатьиДвиженияДенежныхСредств.Код КАК Код,
		|	СтатьиДвиженияДенежныхСредств.Наименование КАК Наименование,
		|	СтатьиДвиженияДенежныхСредств.Предопределенный КАК Предопределенный,
		|	СтатьиДвиженияДенежныхСредств.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	СтатьиДвиженияДенежныхСредств.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайтиСоздатьСтатьюМП(ВыборкаДетальныеЗаписи, Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьСтатьюМП(Выборка, ЭтоНоваяЗагрузка)
	
	Если Выборка.Предопределенный Тогда
		СсылкаНаПредопределенныйОбъект = "";
		Если Выборка.Ссылка = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей Тогда
			СсылкаНаПредопределенныйОбъект = Справочники.СтатьиМП.ОплатаОтПокупателя;
		ИначеЕсли Выборка.Ссылка = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам Тогда
			СсылкаНаПредопределенныйОбъект = Справочники.СтатьиМП.ОплатаПоставщику;
		ИначеЕсли Выборка.Ссылка = Справочники.СтатьиДвиженияДенежныхСредств.Прочее Тогда
			СсылкаНаПредопределенныйОбъект = Справочники.СтатьиМП.Прочее;
		КонецЕсли;
		
		Если СсылкаНаПредопределенныйОбъект <> "" Тогда
			Если НЕ ЭтоНоваяЗагрузка Тогда
				Возврат СсылкаНаПредопределенныйОбъект;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ ЭтоНоваяЗагрузка Тогда
			Ссылка = Справочники.СтатьиМП.НайтиПоКоду(Выборка.Код);
			Если ЗначениеЗаполнено(Ссылка) Тогда
				Возврат Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Выборка.ЭтоГруппа Тогда
		НовыйОбъект = Справочники.СтатьиМП.СоздатьГруппу();
	Иначе
		НовыйОбъект = Справочники.СтатьиМП.СоздатьЭлемент();
	КонецЕсли;
	
	НовыйОбъект.Наименование = Выборка.Наименование;
	НовыйОбъект.Код = Выборка.Код;
	НовыйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
	
	Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
		СсылкаНаРодителя = Справочники.СтатьиМП.НайтиПоКоду(Выборка.Родитель.Код);
		Если НЕ ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
			Родитель = НайтиСоздатьСтатьюМП(Выборка.Родитель, Ложь);
			НовыйОбъект.Родитель = Родитель;
		Иначе
			НовыйОбъект.Родитель = СсылкаНаРодителя;
		КонецЕсли;
	КонецЕсли;
	
	НовыйОбъект.Записать();
	
	Если НЕ ЭтоНоваяЗагрузка Тогда
		Возврат НовыйОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции

Процедура ПеренестиНоменклатуру()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпрНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
		|	СпрНоменклатура.Родитель КАК Родитель,
		|	СпрНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
		|	СпрНоменклатура.Код КАК Код,
		|	СпрНоменклатура.Наименование КАК Наименование,
		|	СпрНоменклатура.Артикул КАК Артикул,
		|	СпрНоменклатура.Поставщик КАК Поставщик,
		|	СпрНоменклатура.Поставщик.Код КАК ПоставщикКод,
		|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СпрНоменклатура.Комментарий КАК Комментарий,
		|	СпрНоменклатура.ФайлКартинки КАК ФайлКартинки,
		|	СпрНоменклатура.Ссылка КАК Ссылка,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	СпрНоменклатура.ВидСтавкиНДС КАК ВидСтавкиНДС
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО СпрНоменклатура.Ссылка = ШтрихкодыНоменклатуры.Номенклатура";
		
		
				//|	Номенклатура.Штрихкод КАК Штрихкод,
		//|	Номенклатура.ТекущийОстаток КАК ТекущийОстаток,
		//|	Номенклатура.КартинкаСсылка КАК КартинкаСсылка,
		//|	Номенклатура.СтавкаНДС КАК СтавкаНДС,
		//|	Номенклатура.Спецификация КАК Спецификация

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайтиСоздатьТоварМП(ВыборкаДетальныеЗаписи, Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьТоварМП(Выборка, ЭтоНоваяЗагрузка)
	
	Если НЕ ЭтоНоваяЗагрузка Тогда
		СсылкаНаРодителя = Справочники.ТоварыМП.НайтиПоКоду(Выборка.Код);
		Если ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
			Возврат СсылкаНаРодителя;
		КонецЕсли;
	Иначе
		СсылкаНаОбъект = Справочники.ТоварыМП.НайтиПоКоду(Выборка.Код);
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Выборка.ЭтоГруппа Тогда
		НовыйОбъект = Справочники.ТоварыМП.СоздатьГруппу();
	Иначе
		НовыйОбъект = Справочники.ТоварыМП.СоздатьЭлемент();
		НовыйОбъект.Артикул = Выборка.Артикул;
		НовыйОбъект.Поставщик = Справочники.КонтрагентыМП.НайтиПоКоду(Выборка.ПоставщикКод);
		НовыйОбъект.Вид = НайтиВидНоменклатуры(Выборка.ТипНоменклатуры);
	КонецЕсли;
	
	НовыйОбъект.Наименование = Выборка.Наименование;
	НовыйОбъект.Код = Выборка.Код;
	НовыйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
	
	НачатьТранзакцию();
	
	Попытка
		
		Если НЕ Выборка.ЭтоГруппа Тогда
			НовыйОбъект.Записать();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ТоварыМП");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", НовыйОбъект.Ссылка);
			Блокировка.Заблокировать();
			
			Если ЗначениеЗаполнено(Выборка.ФайлКартинки) Тогда
				ДвоичныеДанные = Выборка.ФайлКартинки.Получить();
				НовыйОбъект.Картинка = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
				НовыйОбъект.Записать();
				НовыйОбъект.КартинкаСсылка = ПолучитьНавигационнуюСсылку(НовыйОбъект, "Картинка");
			КонецЕсли;
			
			НовыйОбъект.Штрихкод = Выборка.Штрихкод;
			
			НовыйОбъект.ДополнительнаяИнформация = Выборка.Комментарий;
			НовыйОбъект.СтавкаНДС = НайтиСтавкуНДС(Выборка.ВидСтавкиНДС);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
			СсылкаНаРодителя = Справочники.Номенклатура.НайтиПоКоду(Выборка.Родитель.Код);
			Если НЕ ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
				Родитель = НайтиСоздатьТоварМП(Выборка.Родитель, Ложь);
				НовыйОбъект.Родитель = Родитель;
			Иначе
				НовыйОбъект.Родитель = СсылкаНаРодителя;
			КонецЕсли;
		КонецЕсли;
		
		НовыйОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Если НЕ ЭтоНоваяЗагрузка Тогда
		Возврат НовыйОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции

Процедура ПеренестиСпецификации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Спецификации.ПометкаУдаления КАК ПометкаУдаления,
		|	Спецификации.Код КАК Код,
		|	Спецификации.Наименование КАК Наименование,
		|	Спецификации.Состав.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.Код КАК НоменклатураКод,
		|		Количество КАК Количество
		|	) КАК Состав,
		|	Спецификации.Владелец КАК Владелец,
		|	Спецификации.Владелец.Код КАК ВладелецКод
		|ИЗ
		|	Справочник.Спецификации КАК Спецификации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайтиСоздатьСпецификациюМП(ВыборкаДетальныеЗаписи, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиСоздатьСпецификациюМП(Выборка, ЭтоНоваяЗагрузка)
	
	НовыйОбъект = Справочники.СпецификацииМП.СоздатьЭлемент();
	НовыйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
	НовыйОбъект.Код = Выборка.Код;
	НовыйОбъект.Наименование = Выборка.Наименование;
	НовыйОбъект.Владелец = Справочники.ТоварыМП.НайтиПоКоду(Выборка.ВладелецКод);
	
	ТабЧасть = Выборка.Состав.Выбрать();
	Пока ТабЧасть.Следующий() Цикл
		
		СтрокаТЧ = НовыйОбъект.Состав.Добавить();
		СтрокаТЧ.Материал = Справочники.ТоварыМП.НайтиПоКоду(ТабЧасть.НоменклатураКод);
		СтрокаТЧ.Количество = ТабЧасть.Количество;
		
	КонецЦикла;
	
	НовыйОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Перечисления

Функция НайтиВидНоменклатуры(Тип)
	
	Если Тип = Перечисления.ТипыНоменклатуры.Запас Тогда
		Вид = Перечисления.ВидыТоваровМП.Товар;
	Иначе
		Вид = Перечисления.ВидыТоваровМП.Услуга;
	КонецЕсли;
	
	Возврат Вид;
	
КонецФункции

Функция НайтиСостоянияЗаказовПокупателей(ОбъектXDTO, ВидЗаказа)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.СостоянияЗаказовПокупателей.ПустаяСсылка();
	КонецЕсли;
	
	Если ОбъектXDTO = Перечисления.СостоянияЗаказовМП.Выполнен Тогда
		НовыйОбъект = Справочники.СостоянияЗаказовПокупателей.Завершен;
	Иначе
		НовыйОбъект = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа);
	КонецЕсли;
	
	Возврат НовыйОбъект;
	
КонецФункции // НайтиСостоянияЗаказовПокупателей()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьВсеОбъектыНаСервере()
	
	МассивСНаименованиямиДокументов = Новый Массив;
	МассивСНаименованиямиДокументов.Добавить("ЗаказМП");
	МассивСНаименованиямиДокументов.Добавить("ПриходДенегМП");
	МассивСНаименованиямиДокументов.Добавить("РасходДенегМП");
	МассивСНаименованиямиДокументов.Добавить("ОтчетОРозничныхПродажахМП");
	МассивСНаименованиямиДокументов.Добавить("ПриходТовараМП");
	МассивСНаименованиямиДокументов.Добавить("РасходТовараМП");
	МассивСНаименованиямиДокументов.Добавить("ПроизводствоМП");
	МассивСНаименованиямиДокументов.Добавить("ЧекККММП");
	МассивСНаименованиямиДокументов.Добавить("ЧекККМВозвратМП");
	МассивСНаименованиямиДокументов.Добавить("ВводОстатковМП");
	
	Для каждого НаименованиеДокумента Из МассивСНаименованиямиДокументов Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|Док.Ссылка КАК Док_
		|ИЗ Документ." + НаименованиеДокумента + " КАК Док";
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Документ." + НаименованиеДокумента);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДетальныеЗаписи.Док_);
				Блокировка.Заблокировать();
				
				ДокументОбъект = ВыборкаДетальныеЗаписи.Док_.ПолучитьОбъект();
				ДокументОбъект.Удалить();
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ВызватьИсключение;
				
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	МассивСНаименованиямиСправочников = Новый Массив;
	МассивСНаименованиямиСправочников.Добавить("ТоварыМП");
	МассивСНаименованиямиСправочников.Добавить("СтруктурныеЕдиницыМП");
	МассивСНаименованиямиСправочников.Добавить("СтатьиМП");
	МассивСНаименованиямиСправочников.Добавить("СтавкиНДСМП");
	МассивСНаименованиямиСправочников.Добавить("КонтрагентыМП");
	МассивСНаименованиямиСправочников.Добавить("КассыККММП");
	МассивСНаименованиямиСправочников.Добавить("СпецификацииМП");
	//МассивСНаименованиямиСправочников.Добавить("Организации");
	
	Для каждого НаименованиеСправочника Из МассивСНаименованиямиСправочников Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		|Спр.Ссылка КАК Спр_
		|ИЗ Справочник." + НаименованиеСправочника + " КАК Спр";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник." + НаименованиеСправочника);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДетальныеЗаписи.Спр_);
				Блокировка.Заблокировать();
				
				СправочникОбъект = ВыборкаДетальныеЗаписи.Спр_.ПолучитьОбъект();
				
				Если СправочникОбъект = Неопределено Тогда
					ЗафиксироватьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				Если НЕ СправочникОбъект.Предопределенный Тогда
					
					СправочникОбъект.Удалить();
					
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ВызватьИсключение;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСтавкуНДС(Выборка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДСМП КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Наименование = &Наименование
		|	И СтавкиНДС.Ставка = &Ставка
		|	И СтавкиНДС.НеОблагается = &НеОблагается
		|	И СтавкиНДС.Расчетная = &Расчетная";
	
	СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Выборка); 
	
	Запрос.УстановитьПараметр("Наименование", СтавкаНДС.Наименование);
	Запрос.УстановитьПараметр("НеОблагается", СтавкаНДС.НеОблагается);
	Запрос.УстановитьПараметр("Расчетная", СтавкаНДС.Расчетная);
	Запрос.УстановитьПараметр("Ставка", СтавкаНДС.Ставка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.СтавкаНДС;
	КонецЕсли;
	
	Возврат Справочники.СтавкиНДСМП.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьСоздатьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации, ВидДоговора)
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Если НЕ ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
		ДоговорПоУмолчанию = СоздатьДоговорПоУмолчанию(Контрагент, Организация, ВидДоговора);
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции // ПолучитьДоговорПоУмолчанию()

Процедура РассчитатьСуммыВСтрокеТабличнойЧасти(НовыйОбъект, НоваяСтрока)
	
	Если НовыйОбъект.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		Если НовыйОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Номенклатура.ВидСтавкиНДС) Тогда
		НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрока.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(НовыйОбъект.Дата), НовыйОбъект.Дата, ТекущаяДатаСеанса()));
	Иначе
		НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НовыйОбъект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(НовыйОбъект.Дата), НовыйОбъект.Дата, ТекущаяДатаСеанса()));
	КонецЕсли;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
	НоваяСтрока.СуммаНДС = ?(
		НовыйОбъект.СуммаВключаетНДС,
		НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
		НоваяСтрока.Сумма * СтавкаНДС / 100);
	
	НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(НовыйОбъект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

Функция СоздатьДоговорПоУмолчанию(Контрагент, Организация, ВидДоговора)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	НовыйДоговор.ВалютаРасчетов = Константы.НациональнаяВалюта.Получить();
	НовыйДоговор.Организация = Организация;
	НовыйДоговор.ВидДоговора = ВидДоговора;
	НовыйДоговор.ВидЦен = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
	НовыйДоговор.Владелец = Контрагент;
	НовыйДоговор.СрокОплатыПоставщику = Константы.СрокОплатыПоставщику.Получить();
	НовыйДоговор.СрокОплатыПокупателя = Константы.СрокОплатыПокупателя.Получить();
	
	// Заполним вид цен контрагента
	НовыйВидЦенКонтрагентов = Справочники.ВидыЦенКонтрагентов.ВидЦенКонтрагентаПоУмолчанию(Контрагент);
	
	Если НЕ ЗначениеЗаполнено(НовыйВидЦенКонтрагентов) Тогда 
		
		НовыйВидЦенКонтрагентов = Справочники.ВидыЦенКонтрагентов.НайтиЛюбойПервыйВидЦенКонтрагента(Контрагент);
		
		Если НЕ ЗначениеЗаполнено(НовыйВидЦенКонтрагентов) Тогда
			
			НовыйВидЦенКонтрагентов = Справочники.ВидыЦенКонтрагентов.СоздатьВидЦенКонтрагента(
				Контрагент,
				НовыйДоговор.ВалютаРасчетов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйДоговор.ВидЦенКонтрагента = НовыйВидЦенКонтрагентов;
	
	Если ПустаяСтрока(НовыйДоговор.Наименование) Тогда
		НовыйДоговор.Наименование = ШаблоныНаименований.НаименованиеДоговораПоУмолчанию(НовыйДоговор);
	КонецЕсли;
	
	НовыйДоговор.Записать();
	
	Справочники.ДоговорыКонтрагентов.ЗаписатьДоговорПоУмолчанию(НовыйДоговор);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НовыйДоговор.Ссылка;
	
КонецФункции // СоздатьДоговорПоУмолчанию()

Функция ПолучитьСтавкуНДС(СсылкаНаНоменклатуру)
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаНоменклатуру.СтавкаНДС) Тогда
		СсылкаНаНоменклатуруИзУНФ = Справочники.Номенклатура.НайтиПоКоду(СсылкаНаНоменклатуру.Код);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.ВидСтавкиНДС.Ссылка КАК ВидСтавкиНДССсылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &СсылкаНаНоменклатуруИзУНФ";
		
		Запрос.УстановитьПараметр("СсылкаНаНоменклатуруИзУНФ", СсылкаНаНоменклатуруИзУНФ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ВидСтавкиНДС = ВыборкаДетальныеЗаписи.ВидСтавкиНДССсылка;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.ВидСтавкиНДС = &ВидСтавкиНДС";
		
		Запрос.УстановитьПараметр("ВидСтавкиНДС", ВидСтавкиНДС);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = &Ставка
		|	И СтавкиНДС.НеОблагается = &НеОблагается
		|	И СтавкиНДС.Расчетная = &Расчетная
		|	И СтавкиНДС.Наименование = &Наименование";
		
		Запрос.УстановитьПараметр("Наименование", СсылкаНаНоменклатуру.СтавкаНДС.Наименование);
		Запрос.УстановитьПараметр("НеОблагается", СсылкаНаНоменклатуру.СтавкаНДС.НеОблагается);
		Запрос.УстановитьПараметр("Расчетная", СсылкаНаНоменклатуру.СтавкаНДС.Расчетная);
		Запрос.УстановитьПараметр("Ставка", СсылкаНаНоменклатуру.СтавкаНДС.Ставка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецФункции

Процедура ЗаписатьДокумент(НовыйОбъект, Выборка, ДокументыДляОтложенногоПроведения)
	
	НовыйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
	
	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Если Не Выборка.Проведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;
	
	Если НовыйОбъект.ПометкаУдаления
		И (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		
		НовыйОбъект.ПометкаУдаления = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.Номер) Тогда
		
		НовыйОбъект.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	НовыйОбъект.ОбменДанными.Загрузка = Истина;
	Попытка
		
		Если Не НовыйОбъект.Проведен Тогда
			НовыйОбъект.Записать();
		Иначе
			// Отменяем проведение документа
			НовыйОбъект.Проведен = Ложь;
			НовыйОбъект.Записать();
			УдалитьДвиженияУДокумента(НовыйОбъект);
		КонецЕсли;
		
	Исключение
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ДокументыДляОтложенногоПроведения.Найти(НовыйОбъект.Ссылка, "ДокументСсылка") = Неопределено Тогда
			СтрокаТаблицы = ДокументыДляОтложенногоПроведения.Добавить();
			СтрокаТаблицы.ДокументСсылка = НовыйОбъект.Ссылка;
			СтрокаТаблицы.ДокументТип = НовыйОбъект.Метаданные().Имя;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьДокумент()

Процедура УдалитьДвиженияУДокумента(ДокументОбъект)
	
	МассивОбрабатываемыхСтрокТаблицыДвижений = Новый Массив();
	
	// Получение списка регистров, по которым существуют движения
	ТаблицаДвижений = ОпределитьНаличиеДвиженийПоДокументу(ДокументОбъект.Ссылка);
	ТаблицаДвижений.Колонки.Добавить("НаборЗаписей");
	ТаблицаДвижений.Колонки.Добавить("БезусловноеУдаление", Новый ОписаниеТипов("Булево"));
		
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		// Имя регистра передается как значение, полученное с помощью
		// Функции ПолноеИмя() метаданных регистра
		ПозицияТочки = СтрНайти(СтрокаДвижения.Имя, ".");
		ТипРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки + 1));

		МассивОбрабатываемыхСтрокТаблицыДвижений.Добавить(СтрокаДвижения);
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			МетаданныеНабора = Метаданные.РегистрыНакопления[ИмяРегистра];
			Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
			МетаданныеНабора = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
			Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			МетаданныеНабора = Метаданные.РегистрыСведений[ИмяРегистра];
			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			МетаданныеНабора = Метаданные.РегистрыРасчета[ИмяРегистра];
			Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
			
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Изменение", Набор.Метаданные()) Тогда
			// Отсутствуют права на всю таблицу регистра
			ВызватьИсключение "Нарушение прав доступа: " + СтрокаДвижения.Имя;
			Возврат;
		КонецЕсли;

		Набор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);

		// Набор не записывается сразу, чтобы не откатывать транзакцию, если впоследствии
		// Выяснится, что на один из регистров не хватает прав.
		СтрокаДвижения.НаборЗаписей = Набор;
		
	КонецЦикла;	
	
	Для Каждого СтрокаДвижения Из МассивОбрабатываемыхСтрокТаблицыДвижений Цикл		
		Попытка
			СтрокаДвижения.НаборЗаписей.Записать();
		Исключение
			// Возможно «сработал» RLS или подсистема даты запрета изменения
			ВызватьИсключение "Операция не выполнена: " + СтрокаДвижения.Имя + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЦикла;
	
	ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект);
	
КонецПроцедуры

Процедура ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект)
		
	Для каждого Движение Из ДокументОбъект.Движения Цикл
		Если Движение.Количество() > 0 Тогда
			Движение.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОчисткаКоллекцииДвиженийДокумента()

Функция ОпределитьНаличиеДвиженийПоДокументу(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "";
	// Для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		// В запросе получаем имена регистров, по которым есть хотя бы одно движение
		// Например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// Имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// Если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// При выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// При втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// Приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// Если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// Таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции // ОпределитьНаличиеДвиженийПоДокументу()

Процедура ЗаполнитьОсновныеРеквизитыДокумента(НовыйОбъект, Выборка)
	
	НовыйОбъект.Номер = Выборка.Номер;
	
	Если НовыйОбъект.Дата <> Выборка.Дата Тогда
		НовыйОбъект.Дата = Выборка.Дата;
	КонецЕсли;
	Если ТипЗнч(НовыйОбъект.Ссылка) <> Тип("ДокументСсылка.СборкаЗапасов") И ТипЗнч(НовыйОбъект.Ссылка) <> Тип("ДокументСсылка.ПоступлениеВКассу") И ТипЗнч(НовыйОбъект.Ссылка) <> Тип("ДокументСсылка.РасходИзКассы")
		И НовыйОбъект.СуммаДокумента <> Выборка.СуммаДокумента Тогда
		НовыйОбъект.СуммаДокумента = Выборка.СуммаДокумента;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.Автор) Тогда
		НовыйОбъект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.Организация) Тогда
		ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			НовыйОбъект.Автор,
			"ОсновнаяОрганизация");
		
		НовыйОбъект.Организация = ?(ЗначениеЗаполнено(ОсновнаяОрганизация), ОсновнаяОрганизация, Справочники.Организации.ОсновнаяОрганизация);
	КонецЕсли;
	Если ТипЗнч(НовыйОбъект.Ссылка) <> Тип("ДокументСсылка.СборкаЗапасов")
		И НЕ ЗначениеЗаполнено(НовыйОбъект.НалогообложениеНДС) Тогда
		НовыйОбъект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(НовыйОбъект.Организация, , НовыйОбъект.Дата);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОсновныеРеквизитыДокумента()

Функция ОжидаетсяВыборВариантаКП(НовыйОбъект)
	
	Возврат НовыйОбъект.КоличествоВариантовКП <> 0 И НовыйОбъект.ОсновнойВариантКП = 0;
	
КонецФункции

Функция ПолучитьВидЦенКонтрагента(Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыЦенКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыЦенКонтрагентов КАК ВидыЦенКонтрагентов
		|ГДЕ
		|	ВидыЦенКонтрагентов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область ПереходВБольшойУНФ

Процедура ПерейтиНаМобильноеПриложение20()
	Константы.ЭтоМобильноеПриложение.Установить(Ложь);
	Константы.ЭтоОбычноеПриложение.Установить(Ложь);
	Константы.ЭтоМобильноеПриложение20.Установить(Истина);
КонецПроцедуры

Процедура УстановитьОбычныйИнтерфейс()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Служебный
	|	И Пользователи.ИдентификаторПользователяИБ <> &ПустойИД
	|	И НЕ Пользователи.ПометкаУдаления";
	Запрос.УстановитьПараметр("ПустойИД", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	
	МассивПользователей = ТаблицаРезультатаЗапроса.ВыгрузитьКолонку("ИдентификаторПользователяИБ");
	
	Для каждого ТекПользователь Из МассивПользователей Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекПользователь);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", Неопределено,, ПользовательИБ.Имя);
	КонецЦикла;
	
	Для каждого ТекПользователь Из МассивПользователей Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекПользователь);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		РабочийСтолУНФ.УстановитьСоставФорм(, ПользовательИБ.Имя);
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

Функция ПолучитьКоличествоДнейДоОкончанияПробногоПериода() Экспорт
	
	ДатаОкончанияПробногоПериода = Константы.ДатаОкончанияПробногоПериодаМПУНФ.Получить();
	ТекущаяДатаБезМинут = НачалоДня(ТекущаяДатаСеанса());
	КоличествоОставшихсяДней = (ДатаОкончанияПробногоПериода - ТекущаяДатаБезМинут) / 60 / 60 / 24;
	Возврат КоличествоОставшихсяДней;
	
КонецФункции