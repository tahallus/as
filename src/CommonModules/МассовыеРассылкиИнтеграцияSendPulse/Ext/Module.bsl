
#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриОпределенииНастроекИнтерфейса(НастройкаИнтеграции, НастройкиИнтерфейса) Экспорт
	НастройкиИнтерфейса.ИспользоватьКлючAPI = Истина;
	НастройкиИнтерфейса.ИспользоватьСекретныйКлюч = Истина;
КонецПроцедуры

Процедура ПолучитьТокенДоступаAPI(НастройкаИнтеграции, ОписаниеТокена, Ошибки) Экспорт
	Отказ = Ложь;
	
	ПараметрыОтправки = ОтправкаЗапросов.НовыйПараметрыОтправки();
	ПараметрыОтправки.Сервер = ОсновнойUrlApi();
	ПараметрыОтправки.АдресРесурса = "oauth/access_token";
	ПараметрыОтправки.ПараметрыТела.Вставить("grant_type",    "client_credentials");
	ПараметрыОтправки.ПараметрыТела.Вставить("client_id",     НастройкаИнтеграции.КлючAPI);
	ПараметрыОтправки.ПараметрыТела.Вставить("client_secret", НастройкаИнтеграции.СекретныйКлюч);
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТокена.Значение     = Ответ.ПараметрыТела.access_token;
	ОписаниеТокена.СрокДействия = ТекущаяДатаСеанса() + Ответ.ПараметрыТела.expires_in;
	
КонецПроцедуры

Процедура ПолучитьШаблоны(НастройкаИнтеграции, ШаблоныСервиса, Ошибки) Экспорт
	Отказ = Ложь;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "templates";
	ПараметрыОтправки.Метод = "GET";
	ПараметрыОтправки.ПараметрыURL.Вставить("owner", "me");
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДанныеШаблонаСервиса Из Ответ.ПараметрыТела Цикл
		ДанныеШаблона = ШаблоныСервиса.Добавить();
		ДанныеШаблона.Идентификатор = ЧислоВСтроку(ДанныеШаблонаСервиса.real_id);
		ДанныеШаблона.Наименование  = ДанныеШаблонаСервиса.Name;
		ДанныеШаблона.СсылкаНаПредпросмотр = ДанныеШаблонаСервиса.preview;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьШаблон(НастройкаИнтеграции, ДанныеШаблона, Ошибки) Экспорт
	Отказ = Ложь;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = СтрШаблон("template/%1", ДанныеШаблона.Идентификатор);
	ПараметрыОтправки.Метод = "GET";
	ПараметрыОтправки.ПараметрыURL.Вставить("owner", "me");
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШаблона.Наименование = Ответ.ПараметрыТела.Name;
	ДанныеШаблона.СсылкаНаПредпросмотр = Ответ.ПараметрыТела.preview;
	
КонецПроцедуры

Процедура ПолучитьОтправителей(НастройкаИнтеграции, ОтправителиСервиса, Ошибки) Экспорт
	Отказ = Ложь;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "senders";
	ПараметрыОтправки.Метод = "GET";
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДанныеОтправителяСервиса Из Ответ.ПараметрыТела Цикл
		ДанныеОтправителя = ОтправителиСервиса.Добавить();
		ДанныеОтправителя.Наименование = ДанныеОтправителяСервиса.name;
		ДанныеОтправителя.Email        = ДанныеОтправителяСервиса.email;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьАдресныеКниги(НастройкаИнтеграции, АдресныеКнигиСервиса, Ошибки) Экспорт
	Отказ = Ложь;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "addressbooks";
	ПараметрыОтправки.Метод = "GET";
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДанныеАдреснойКнигиСервиса Из Ответ.ПараметрыТела Цикл
		ДанныеАдреснойКниги = АдресныеКнигиСервиса.Добавить();
		ДанныеАдреснойКниги.Идентификатор = ЧислоВСтроку(ДанныеАдреснойКнигиСервиса.id);
		ДанныеАдреснойКниги.Наименование  = ДанныеАдреснойКнигиСервиса.name;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьАдреснуюКнигу(НастройкаИнтеграции, ДанныеАдреснойКниги, Ошибки) Экспорт
	Отказ = Ложь;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "addressbooks";
	ПараметрыОтправки.ПараметрыТела.Вставить("bookName", ДанныеАдреснойКниги.Наименование);
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАдреснойКниги.Идентификатор = ЧислоВСтроку(Ответ.ПараметрыТела.id);
	
	ДобавитьПолучателейВАдреснуюКнигу(НастройкаИнтеграции, ДанныеАдреснойКниги, Ошибки);
	
КонецПроцедуры

Процедура УдалитьИзАдреснойКниги(НастройкаИнтеграции, Идентификатор, Получатели, Ошибки) Экспорт
	
	МассивАдресов = Новый Массив;
	Для каждого Получатель Из Получатели Цикл
		МассивАдресов.Добавить(Получатель.Email);
	КонецЦикла;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("id", Идентификатор);
	ПараметрыЗапроса.Вставить("emails", МассивАдресов);
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = СтрШаблон("addressbooks/%1/emails", Идентификатор);
	ПараметрыОтправки.Метод = "DELETE";
	ПараметрыОтправки.Json = ПараметрыЗапроса;
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки);
	
КонецПроцедуры

Процедура УдалитьИзВсехАдресныхКниг(НастройкаИнтеграции, Получатели, Ошибки) Экспорт
	
	АдресныеКниги = МассовыеРассылкиИнтеграция.ПолучитьАдресныеКнигиСервиса();
	Для каждого АдреснаяКнига Из АдресныеКниги Цикл
		УдалитьИзАдреснойКниги(НастройкаИнтеграции, АдреснаяКнига.Идентификатор, Получатели, Ошибки);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьПисьмоОснование(НастройкаИнтеграции, ДанныеРассылки, Ошибки) Экспорт
	
	ВызватьИсключение СтрШаблон(НСтр("ru='Не реализуется для сервиса %1'"), ЭтотСервис());
	
КонецПроцедуры

Процедура СоздатьРассылку(НастройкаИнтеграции, ДанныеРассылки, Ошибки) Экспорт
	Отказ = Ложь;
	
	ПараметрыТела = Новый Структура;
	ПараметрыТела.Вставить("sender_email", ДанныеРассылки.Отправитель);
	ПараметрыТела.Вставить("sender_name",  ДанныеРассылки.ИмяОтправителя);
	ПараметрыТела.Вставить("subject",      ДанныеРассылки.ТемаПисьма);
	ПараметрыТела.Вставить("template_id",  Число(ДанныеРассылки.ИдентификаторШаблона));
	ПараметрыТела.Вставить("list_id",      Число(ДанныеРассылки.ИдентификаторАдреснойКниги));
	ПараметрыТела.Вставить("name",         ДанныеРассылки.ТемаПисьма);
	Если ДанныеРассылки.ПлановаяДатаОтправки <> Неопределено Тогда
		ПараметрыТела.Вставить("send_date", ДатаДляURL(ДанныеРассылки.ПлановаяДатаОтправки));
	КонецЕсли;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = "campaigns";
	ПараметрыОтправки.Json = ПараметрыТела;
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРассылки.Идентификатор = ЧислоВСтроку(Ответ.ПараметрыТела.id);
	
КонецПроцедуры

Процедура ДобавитьПолучателейВАдреснуюКнигу(НастройкаИнтеграции, ДанныеАдреснойКниги, Ошибки) Экспорт
	
	ПользовательскиеПоля = МассовыеРассылкиИнтеграция.ПользовательскиеПоляАдреснойКниги();
	
	СтруктураАдресов = Новый Массив;
	Для каждого Получатель Из ДанныеАдреснойКниги.Получатели Цикл
		ДанныеПолучателя = МассовыеРассылкиИнтеграция.ПараметрыПолучателяДляЭкспорта(Получатель.Контакт);
		ДанныеПолучателяДляВыгрузки = Новый Соответствие;
		
		Для каждого ПараметрПолучателя Из ДанныеПолучателя Цикл
			ПредставлениеПоля = ПредставлениеПользовательскогоПоля(ПользовательскиеПоля, ПараметрПолучателя.Ключ);
			ДанныеПолучателяДляВыгрузки.Вставить(ПредставлениеПоля, ПараметрПолучателя.Значение);
		КонецЦикла;
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("email", Получатель.email);
		СтруктураАдреса.Вставить("variables", ДанныеПолучателяДляВыгрузки);
		СтруктураАдресов.Добавить(СтруктураАдреса);
	КонецЦикла;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = СтрШаблон("addressbooks/%1/emails", ДанныеАдреснойКниги.Идентификатор);
	ПараметрыОтправки.ПараметрыТела.Вставить("id",     Число(ДанныеАдреснойКниги.Идентификатор));
	ПараметрыОтправки.ПараметрыТела.Вставить("emails", ОтправкаЗапросов.СоздатьJSONИзСтруктуры(СтруктураАдресов));
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки);
	
КонецПроцедуры

Процедура ДанныеАдреснойКниги(НастройкаИнтеграции, ДанныеАдреснойКниги, Ошибки) Экспорт
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДанныеАдреснойКниги.Наименование) Тогда
		ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
		ПараметрыОтправки.Метод = "GET";
		ПараметрыОтправки.АдресРесурса = СтрШаблон("addressbooks/%1", ДанныеАдреснойКниги.Идентификатор);
		Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
		ОбработатьОшибку(Ответ, Ошибки, Отказ);
		
		Если НЕ Отказ Тогда
			ДанныеАдреснойКниги.Наименование = Ответ.ПараметрыТела[0].name;
		КонецЕсли;
	КонецЕсли;
	
	ПолучателиАдреснойКниги(НастройкаИнтеграции, ДанныеАдреснойКниги, Ошибки);
	
КонецПроцедуры

Процедура ПолучателиАдреснойКниги(НастройкаИнтеграции, ДанныеАдреснойКниги, Ошибки) Экспорт
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.Метод = "GET";
	ПараметрыОтправки.АдресРесурса = СтрШаблон("addressbooks/%1/emails", ДанныеАдреснойКниги.Идентификатор);
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки);
	
	ДанныеОтвета = ОтправкаЗапросов.НовыйПараметрыОтвета();
	ДанныеОтвета.ПараметрыТела = ОтправкаЗапросов.ПрочитатьJSONВСоответствие(Ответ.ПолучитьТелоКакСтроку());
	
	Если НЕ ДанныеОтвета.Свойство("ПараметрыТела") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДанныеПолучателяСервиса Из ДанныеОтвета.ПараметрыТела Цикл
		ДанныеПолучателя = ДанныеАдреснойКниги.Получатели.Добавить();
		ДанныеПолучателя.Email = ДанныеПолучателяСервиса.Получить("email");
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВнешниеURLРассылки(НастройкаИнтеграции, ДанныеРассылки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеРассылки.Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонURL = "https://login.sendpulse.com/emailservice/tasks/stat/id/%1";
	ДанныеРассылки.ВнешниеСсылки.СтраницаСтатистикиРассылки = СтрШаблон(ШаблонURL, ДанныеРассылки.Идентификатор);
	
	ШаблонURL = "https://login.sendpulse.com/emailservice/tasks/view/id/%1";
	ДанныеРассылки.ВнешниеСсылки.СтраницаОписанияРассылки = СтрШаблон(ШаблонURL, ДанныеРассылки.Идентификатор);
	
КонецПроцедуры

Процедура ПолучитьСостояниеРассылки(НастройкаИнтеграции, ДанныеРассылки, Ошибки) Экспорт
	Отказ = Ложь;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
	ПараметрыОтправки.АдресРесурса = СтрШаблон("campaigns/%1", ДанныеРассылки.Идентификатор);
	ПараметрыОтправки.Метод = "GET";
	
	Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
	ОбработатьОшибку(Ответ, Ошибки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРассылки.Состояние = ОпределитьСостояниеРассылки(Ответ.ПараметрыТела.status);
	ДанныеРассылки.ПрошлаПроверкиИОтправляется = Ответ.ПараметрыТела.status > 1;
	ДанныеРассылки.Статистика.Всего = Ответ.ПараметрыТела.all_email_qty;
	Если Ответ.ПараметрыТела.Свойство("permalink") Тогда
		ДанныеРассылки.ВнешниеСсылки.ВебВерсияПисьма = Ответ.ПараметрыТела.permalink;
	КонецЕсли;
	
	Если Ответ.ПараметрыТела.Свойство("statistics")
		И Ответ.ПараметрыТела.statistics.Свойство("general") Тогда
		Для каждого ДанныеСтатистики Из Ответ.ПараметрыТела.statistics.general Цикл
			МассовыеРассылкиИнтеграция.ЗаполнитьСтатистикуРассылкиПоКодуСостояния(
				ДанныеРассылки, ОпределитьСостояниеАдресаРассылки(ДанныеСтатистики.code).КодСостояния, ДанныеСтатистики.count);
		КонецЦикла;
		ПересчитатьЗначенияОбщейСтатистики(ДанныеРассылки);
	Иначе
		ДанныеРассылки.Статистика.НеОтправлено = ДанныеРассылки.Статистика.Всего;
	КонецЕсли;
	ДанныеРассылки.Статистика.Исключено = ДанныеРассылки.КоличествоПолучателейПлан - ДанныеРассылки.Статистика.Всего;
	
	ПолучитьСостояниеРассылкиПоПолучателям(НастройкаИнтеграции, ДанныеРассылки, Ошибки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанныхРассылки

Процедура ПересчитатьЗначенияОбщейСтатистики(ДанныеРассылки)
	
	Если ЗначениеЗаполнено(ДанныеРассылки.Статистика.Доставлено) Тогда
		ДанныеРассылки.Статистика.НеПрочитано = ДанныеРассылки.Статистика.Доставлено
			- ?(ДанныеРассылки.Статистика.Открыто = Неопределено, 0, ДанныеРассылки.Статистика.Открыто);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеРассылки.Статистика.Открыто) Тогда
		ДанныеРассылки.Статистика.Открыто = ДанныеРассылки.Статистика.Открыто
			- ?(ДанныеРассылки.Статистика.ПереходовПоСсылке = Неопределено, 0, ДанныеРассылки.Статистика.ПереходовПоСсылке)
			- ?(ДанныеРассылки.Статистика.ОтписокПослеПрочтения = Неопределено, 0, ДанныеРассылки.Статистика.ОтписокПослеПрочтения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСостояниеРассылкиПоПолучателям(НастройкаИнтеграции, ДанныеРассылки, Ошибки)
	
	Если Не ДанныеРассылки.ПрошлаПроверкиИОтправляется Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Получатель Из ДанныеРассылки.Получатели Цикл
		Email = ОтправкаЗапросов.ЗначениеПараметраДляURL(Получатель.Email);
		
		ПараметрыОтправки = ПараметрыОтправкиЗапроса(НастройкаИнтеграции);
		ПараметрыОтправки.АдресРесурса = СтрШаблон("campaigns/%1/email/%2", ДанныеРассылки.Идентификатор, Email);
		ПараметрыОтправки.Метод = "GET";
		
		Ответ = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки, Истина);
		Если Ответ.КодСостояния <> 400 Тогда
			ОбработатьОшибку(Ответ, Ошибки);
		КонецЕсли;
		
		Если Ответ.ПараметрыТела.Свойство("detail_status") Тогда
			ОписаниеСостояния = ОпределитьСостояниеАдресаРассылки(Ответ.ПараметрыТела.detail_status);
			Получатель.Состояние = ОписаниеСостояния.Представление;
			Получатель.КодСостояния = ОписаниеСостояния.КодСостояния;
		Иначе
			Получатель.Состояние = МассовыеРассылкиИнтеграция.Словарь().EmailНеВключенВРассылку;
			Получатель.КодСостояния = МассовыеРассылкиИнтеграция.КодыСостояний().ИсключениеИзРассылки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ИмяСобытияЖР()
	
	ИмяСобытияЖР = НСтр("ru='SendPulse'", ОбщегоНазначения.КодОсновногоЯзыка());
	Возврат МассовыеРассылкиИнтеграция.ИмяСобытияЖР() + "." + ИмяСобытияЖР;
	
КонецФункции

Функция ЧислоВСтроку(Число)
	
	Возврат ОтправкаЗапросов.ЧислоСтрокойБезФормата(Число);
	
КонецФункции

Функция ДатаДляURL(Дата)
	
	Возврат Формат(Дата, "ДФ='гг-ММ-дд ЧЧ:мм:сс'");
	
КонецФункции

Функция НовыйТипЧисло()
	
	Возврат Новый ОписаниеТипов("Число");
	
КонецФункции

Функция ОсновнойUrlApi()
	
	Возврат "https://api.sendpulse.com";
	
КонецФункции

Процедура ПодписатьЗапрос(Заголовки, НастройкиИнтеграции)
	
	Токен = МассовыеРассылкиИнтеграция.ТокенДоступаAPI();
	Заголовки.Вставить("Authorization", "Bearer " + Токен);
	
КонецПроцедуры

Функция ПараметрыОтправкиЗапроса(НастройкаИнтеграции)
	
	ПараметрыОтправки = ОтправкаЗапросов.НовыйПараметрыОтправки();
	ПараметрыОтправки.Сервер = ОсновнойUrlApi();
	ПараметрыОтправки.ИмяСобытияЖР = ИмяСобытияЖР();
	ПодписатьЗапрос(ПараметрыОтправки.Заголовки, НастройкаИнтеграции);
	
	Возврат ПараметрыОтправки;
	
КонецФункции

Функция ЭтотСервис()
	
	Возврат Перечисления.СервисыМассовыхРассылок.SendPulse;
	
КонецФункции

Функция ПредставлениеПользовательскогоПоля(ПользовательскиеПоля, Имя)
	
	ОписаниеПоля = ПользовательскиеПоля.Найти(Имя, "Имя");
	
	Если ОписаниеПоля = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Не определено пользовательское поле ""%1""'"), Имя);
	КонецЕсли;
	
	Возврат ОписаниеПоля.Представление;
	
КонецФункции

Процедура ОбработатьОшибку(Ответ, Ошибки, Отказ = Ложь)
	
	Если ТипЗнч(Ответ.ПараметрыТела) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Ответ.ПараметрыТела.Свойство("error_code") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = СообщениеОбОшибке(Ответ.ПараметрыТела.error_code);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Неопределено, ТекстОшибки);
	ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	Отказ = Истина;
	
КонецПроцедуры

Функция НовыйОписаниеКодов()
	
	Возврат Новый Массив;
	
КонецФункции

Процедура ДобавитьОписаниеКода(ОписаниеКодов, Код, КодСостояния, Представление)
	
	НовыйКод = Новый Структура;
	НовыйКод.Вставить("Код", Код);
	НовыйКод.Вставить("КодСостояния", КодСостояния);
	НовыйКод.Вставить("Представление", Представление);
	
	ОписаниеКодов.Добавить(НовыйКод);
	
КонецПроцедуры

Функция ПолучитьОписаниеКода(ОписаниеКодов, Знач Код)
	
	КодНайден = Ложь;
	
	Код = Код + 1;
	Пока НЕ КодНайден И Код >= 0 Цикл
		Код = Код - 1;
		Для каждого ОписаниеКода Из ОписаниеКодов Цикл
			Если ОписаниеКода.Код = Код Тогда
				КодНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ОписаниеКода;
	
КонецФункции

Функция ОпределитьСостояниеРассылки(Знач КодСостояния)
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"МассовыеРассылкиИнтеграцияSendPulse.СтатусРассылки",
		"КодРассылки", КодСостояния, НовыйТипЧисло());
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		КодСостояния >= 0 И КодСостояния < 100,
		СтрШаблон(НСтр("ru='Неверное значение параметра КодРассылки: ""%1""'"), КодСостояния),
		"МассовыеРассылкиИнтеграцияSendPulse");
	
	СостоянияРассылки = Новый Соответствие;
	СостоянияРассылки.Вставить(0,  НСтр("ru='Новое задание на рассылку'"));
	СостоянияРассылки.Вставить(1,  НСтр("ru='Ожидается отправка (на модерации)'"));
	СостоянияРассылки.Вставить(2,  НСтр("ru='Отправляется'"));
	СостоянияРассылки.Вставить(3,  НСтр("ru='Отправлено'"));
	СостоянияРассылки.Вставить(4,  НСтр("ru='Тестовая отправка (на email пользователя)'"));
	СостоянияРассылки.Вставить(5,  НСтр("ru='Рассылка заблокирована (администрацией)'"));
	СостоянияРассылки.Вставить(6,  НСтр("ru='Рассылка помечена для удаления'"));
	СостоянияРассылки.Вставить(7,  НСтр("ru='Обновление статусов, подождите'"));
	СостоянияРассылки.Вставить(8,  НСтр("ru='Тестовая кампания отправлена'"));
	СостоянияРассылки.Вставить(9,  НСтр("ru='Идет отправка'"));
	СостоянияРассылки.Вставить(10, НСтр("ru='Обрабатывается, готовится к отправке'"));
	СостоянияРассылки.Вставить(11, НСтр("ru='Ожидается ответ от пользователя на уточняющий вопрос модератора'"));
	СостоянияРассылки.Вставить(12, НСтр("ru='Нет активных адресов'"));
	СостоянияРассылки.Вставить(13, НСтр("ru='Кампания в процессе создания — адреса из адресной книги переносятся в кампанию, подождите.'"));
	СостоянияРассылки.Вставить(14, НСтр("ru='Кампания создана и отправлена в очередь для отправки.'"));
	СостоянияРассылки.Вставить(15, НСтр("ru='Кампания ожидает итога A/B тестирования'"));
	СостоянияРассылки.Вставить(16, НСтр("ru='Отправка кампании отменена пользователем'"));
	СостоянияРассылки.Вставить(22, НСтр("ru='Отправляется частично'"));
	СостоянияРассылки.Вставить(23, НСтр("ru='Отправлена частично'"));
	СостоянияРассылки.Вставить(25, НСтр("ru='Рассылка заблокирована администрацией после частичной отправки'"));
	СостоянияРассылки.Вставить(26, НСтр("ru='Черновик'"));
	СостоянияРассылки.Вставить(27, НСтр("ru='Необходимо редактирование'"));
	СостоянияРассылки.Вставить(28, НСтр("ru='Запланирована отправка по непрочитанным'"));
	
	СостояниеРассылки = Неопределено;
	КодСостояния = КодСостояния + 1;
	Пока СостояниеРассылки = Неопределено И КодСостояния >= 0 Цикл
		КодСостояния = КодСостояния - 1;
		СостояниеРассылки = СостоянияРассылки.Получить(КодСостояния);
	КонецЦикла;
	
	Возврат СостояниеРассылки;
	
КонецФункции

Функция ОпределитьСостояниеАдресаРассылки(Знач КодСостояния)
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"МассовыеРассылкиИнтеграцияSendPulse.СтатусРассылки",
		"КодРассылки", КодСостояния, НовыйТипЧисло());
	
	Коды = НовыйОписаниеКодов();
	ДобавитьОписаниеКода(Коды, 0,  МассовыеРассылкиИнтеграция.КодыСостояний().НеОтправлено,                 МассовыеРассылкиИнтеграция.Словарь().СообщениеЕщеНеОтправлено);
	ДобавитьОписаниеКода(Коды, 1,  МассовыеРассылкиИнтеграция.КодыСостояний().Отправлено,                   МассовыеРассылкиИнтеграция.Словарь().СообщениеОтправленоСтатусНеизвестен);
	ДобавитьОписаниеКода(Коды, 2,  МассовыеРассылкиИнтеграция.КодыСостояний().Доставлено,                   МассовыеРассылкиИнтеграция.Словарь().СообщениеДоставленоНеПрочитано);
	ДобавитьОписаниеКода(Коды, 3,  МассовыеРассылкиИнтеграция.КодыСостояний().ДоставленоПрочитано,          МассовыеРассылкиИнтеграция.Словарь().СообщениеДоставленоПрочитано);
	ДобавитьОписаниеКода(Коды, 4,  МассовыеРассылкиИнтеграция.КодыСостояний().ДоставленоПереходПоСсылке,    МассовыеРассылкиИнтеграция.Словарь().СообщениеДоставленоПереходПоСсылке);
	ДобавитьОписаниеКода(Коды, 5,  МассовыеРассылкиИнтеграция.КодыСостояний().ДоставленоПрочитаноОтписался, МассовыеРассылкиИнтеграция.Словарь().СообщениеДоставленоПрочитаноОтписался);
	ДобавитьОписаниеКода(Коды, 6,  МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка,                       МассовыеРассылкиИнтеграция.Словарь().АдресНеСуществует);
	ДобавитьОписаниеКода(Коды, 7,  МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка,                       МассовыеРассылкиИнтеграция.Словарь().АдресВременноНедоступен);
	ДобавитьОписаниеКода(Коды, 8,  МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка,                       МассовыеРассылкиИнтеграция.Словарь().АдресНедоступен);
	ДобавитьОписаниеКода(Коды, 9,  МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка,                       МассовыеРассылкиИнтеграция.Словарь().СообщениеОтклоненоСерверомКакСпам);
	ДобавитьОписаниеКода(Коды, 10, МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка,                       МассовыеРассылкиИнтеграция.Словарь().ПочтовыйЯщикПолучателяПереполнен);
	ДобавитьОписаниеКода(Коды, 11, МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка,                       МассовыеРассылкиИнтеграция.Словарь().СообщениеДоставленоПомеченоСпамПолучателем);
	ДобавитьОписаниеКода(Коды, 14, МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка,                       МассовыеРассылкиИнтеграция.Словарь().ДоменНеСуществует);
	ДобавитьОписаниеКода(Коды, 16, МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка,                       МассовыеРассылкиИнтеграция.Словарь().АдресНекорректный);
	ДобавитьОписаниеКода(Коды, 12, МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка,                       МассовыеРассылкиИнтеграция.Словарь().ДоставкаНеУдалась);
	ДобавитьОписаниеКода(Коды, 13, МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, НСтр("ru='Не отправлено'"));
	ДобавитьОписаниеКода(Коды, 15, МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, НСтр("ru='Получатель отписался от рассылки'"));
	ДобавитьОписаниеКода(Коды, 17, МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, НСтр("ru='Отправка временно запрещена'"));
	ДобавитьОписаниеКода(Коды, 18, МассовыеРассылкиИнтеграция.КодыСостояний().Ошибка, НСтр("ru='Отключено администратором'"));
	
	Возврат ПолучитьОписаниеКода(Коды, КодСостояния);
	
КонецФункции

Функция СообщениеОбОшибке(КодОшибки)
	
	ТекстНеизвестнаяОшибка = НСтр("ru='Неизвестная ошибка'");
	
	КодыОшибок = Новый Соответствие;
	КодыОшибок.Вставить(8,    НСтр("ru='Отсутствуют данные'"));
	КодыОшибок.Вставить(10,   НСтр("ru='Отсутствует e-mail адрес отправителя'"));
	КодыОшибок.Вставить(11,   НСтр("ru='Не указаны получатели'"));
	КодыОшибок.Вставить(13,   НСтр("ru='Отсутствует контент email сообщения'"));
	КодыОшибок.Вставить(14,   НСтр("ru='Email адрес с заданным значением ID не найден'"));
	КодыОшибок.Вставить(17,   НСтр("ru='Email адрес не найден'"));
	КодыОшибок.Вставить(19,   НСтр("ru='Такой email адрес уже существует'"));
	КодыОшибок.Вставить(20,   НСтр("ru='Пожалуйста, не используйте бесплатные почтовые сервисы'"));
	КодыОшибок.Вставить(21,   НСтр("ru='На активации нет указанного email адреса'"));
	КодыОшибок.Вставить(97,   НСтр("ru='Недопустимый тип email адреса. Использовать аккаунты бесплатных почтовых сервисов не рекомендуется.'"));
	КодыОшибок.Вставить(201,  НСтр("ru='Отсутствует название адресной книги'"));
	КодыОшибок.Вставить(203,  НСтр("ru='Адресная книга с указанным именем уже существует'"));
	КодыОшибок.Вставить(211,  НСтр("ru='Адресная книга пуста'"));
	КодыОшибок.Вставить(213,  НСтр("ru='Адресная книга не найдена.'"));
	КодыОшибок.Вставить(303,  НСтр("ru='Отсутствуют email адреса в адресной книге'"));
	КодыОшибок.Вставить(400,  НСтр("ru='Не существует такого пользователя SMTP. Необходимо создать аккаунт в SMTP сервисе.'"));
	КодыОшибок.Вставить(502,  НСтр("ru='Не найден email адрес'"));
	КодыОшибок.Вставить(602,  НСтр("ru='Кампания не найдена. Возможно, она была уже отправлена.'"));
	КодыОшибок.Вставить(701,  НСтр("ru='Отсутствует email адрес или имя отправителя'"));
	КодыОшибок.Вставить(703,  НСтр("ru='Не найдена адресная книга'"));
	КодыОшибок.Вставить(704,  НСтр("ru='Не найден отправитель'"));
	КодыОшибок.Вставить(707,  НСтр("ru='Недостаточно средств на счету'"));
	КодыОшибок.Вставить(711,  НСтр("ru='Следует подождать 15 минут перед повторной попыткой отправки на данную адресную книгу'"));
	КодыОшибок.Вставить(720,  НСтр("ru='Не указана тема письма'"));
	КодыОшибок.Вставить(721,  НСтр("ru='Отсутствует контент email сообщения'"));
	КодыОшибок.Вставить(722,  НСтр("ru='Не указано ID адресной книги'"));
	КодыОшибок.Вставить(791,  НСтр("ru='Лимит API-кампаний (5 в час) превышен'"));
	КодыОшибок.Вставить(799,  НСтр("ru='Неправильный формат даты. Должен быть в формате Y-m-d H:i:s и не может быть меньше текущей даты'"));
	КодыОшибок.Вставить(800,  НСтр("ru='Недопустимое действие'"));
	КодыОшибок.Вставить(802,  НСтр("ru='Кампания не найдена'"));
	КодыОшибок.Вставить(901,  НСтр("ru='Не указано имя отправителя'"));
	КодыОшибок.Вставить(902,  НСтр("ru='Выбранный email адрес уже занят'"));
	КодыОшибок.Вставить(903,  НСтр("ru='Не указан email адрес отправителя'"));
	КодыОшибок.Вставить(904,  НСтр("ru='Email адрес найден в черном списке'"));
	КодыОшибок.Вставить(905,  НСтр("ru='Достигнут лимит доступного количества адресов отправителя'"));
	КодыОшибок.Вставить(906,  НСтр("ru='Ошибка в email адресе'"));
	КодыОшибок.Вставить(1101, НСтр("ru='Не указан email адрес'"));
	КодыОшибок.Вставить(1003, НСтр("ru='Указанного отправителя не существует'"));
	КодыОшибок.Вставить(1004, НСтр("ru='Код активации был отправлен. Следует подождать 15 минут перед повторной попыткой.'"));
	КодыОшибок.Вставить(1005, НСтр("ru='Ошибка при отправке подтверждения'"));
	КодыОшибок.Вставить(1104, НСтр("ru='Отсутствует код активации'"));
	
	СообщениеОбОшибке = Неопределено;
	КодОшибки = КодОшибки + 1;
	Пока СообщениеОбОшибке = Неопределено И КодОшибки >= 0 Цикл
		КодОшибки = КодОшибки - 1;
		СообщениеОбОшибке = КодыОшибок.Получить(КодОшибки);
	КонецЦикла;
	
	Если СообщениеОбОшибке <> Неопределено Тогда
		Возврат СообщениеОбОшибке;
	КонецЕсли;
	
	Возврат ТекстНеизвестнаяОшибка;
	
КонецФункции

#КонецОбласти
