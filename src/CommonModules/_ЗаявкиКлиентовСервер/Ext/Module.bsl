
#Область ПрограммныйИнтерфейс

// Формирует и запускает экземпляр бизнес-процесса по сделке
// Параметры:
//  Сделка - СправочникСсылка.СделкиСКлиентами - сделка, которой по которой создается процесс.
//
Процедура ЗапуститьПроцесс(Знач Сделка) Экспорт
	
	// получить необходимые реквизиты сделки
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СделкиСКлиентами.Наименование,
		|	СделкиСКлиентами.Ответственный
		|ИЗ
		|	Документ._ЗаявкаКлиента КАК СделкиСКлиентами
		|ГДЕ
		|	СделкиСКлиентами.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Сделка);
	СделкаИнф = Запрос.Выполнить().Выбрать();
	СделкаИнф.Следующий();

	// определить количество активных процессов по сделке
	//ИмяПроцесса = ПолучитьОписаниеТипаСделки(СделкаИнф.ТипСделки).Имя;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоПроцессов
		|ИЗ
		|	БизнесПроцесс.ЗаявкаКлиента КАК ПроцессПродажи
		|ГДЕ
		|	ПроцессПродажи.Стартован
		|	И НЕ ПроцессПродажи.Завершен
		|	И ПроцессПродажи.Предмет = &Сделка");
	Запрос.УстановитьПараметр("Сделка", Сделка);

	// запустить бизнес-процесс продажи, если не запущен
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если Выборка.КоличествоПроцессов = 0 Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			Процесс = БизнесПроцессы.ЗаявкаКлиента.СоздатьБизнесПроцесс();
			Процесс.Дата         = ТекущаяДатаСеанса();
			Процесс.Предмет      = Сделка;
			Процесс.Автор        = СделкаИнф.Ответственный;
			Процесс.Наименование = СделкаИнф.Наименование;
			Процесс.Записать();
			Процесс.Старт();
			
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

// Отменяет (проставляет пометки удаления) текущие задачи и перезапускает бизнес-процесс
// Параметры:
//  Сделка    - СправочникСсылка.СделкиСКлиентами - сделка, процесс которой нужно стартовать заново.
//  ТипСделки - ПеречислениеСсылка.ТипыСделокСКлиентами - тип сделки, определяет метаданные процесса.
//
Процедура ПерезапуститьПроцессЗаявкаКлиента(Сделка, ТипСделки) Экспорт

	// найти экземпляры процессов сделки
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПроцессПродажи.Ссылка
		|ИЗ
		|	БизнесПроцесс.ЗаявкаКлиента КАК ПроцессПродажи
		|ГДЕ
		|	ПроцессПродажи.Стартован
		|	И НЕ ПроцессПродажи.Завершен
		|	И ПроцессПродажи.Предмет = &Сделка");
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Процессы = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока Процессы.Следующий() Цикл
			ОтменитьЗадачиПроцесса(Процессы.Ссылка);
			ПроцессОбъект = Процессы.Ссылка.ПолучитьОбъект();
			ПроцессОбъект.Стартован = Ложь;
			ПроцессОбъект.Старт();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

КонецПроцедуры

// Отменяет текущие задачи и завершает бизнес-процесс сделки
//
// Параметры:
//  Сделка    - СправочникСсылка.СделкиСКлиентами       - сделка, процесс которой нужно завершить.
//  ТипСделки - ПеречислениеСсылка.ТипыСделокСКлиентами - тип сделки, определяет метаданные процесса.
//
Процедура ЗавершитьПроцессЗаявкаКлиента(Сделка, ТипСделки) Экспорт

	// найти экземпляры процессов сделки
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПроцессПродажи.Ссылка
		|ИЗ
		|	БизнесПроцесс.ЗаявкаКлиента КАК ПроцессПродажи
		|ГДЕ
		|	ПроцессПродажи.Стартован
		|	И НЕ ПроцессПродажи.Завершен
		|	И ПроцессПродажи.Предмет = &Сделка");
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Процессы = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		Пока Процессы.Следующий() Цикл
			ЗавершитьБизнесПроцесс(Процессы.Ссылка);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Завершает процессы заданий по задаче и устанавливает пометку удаления
// Параметры:
// Задача - ссылка на отменяемую задачу.
//
Процедура ОтменитьЗадачу(Задача)

	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.ПометкаУдаления = Истина;
	ЗадачаОбъект.Записать();

КонецПроцедуры

// Отменяет (проставляет пометки удаления) текущие задачи и завершает процесс
// Параметры:
// Процесс - ссылка на завершаемый процесс.
//
Процедура ЗавершитьБизнесПроцесс(Процесс)

	ОтменитьЗадачиПроцесса(Процесс);
	ПроцессОбъект = Процесс.ПолучитьОбъект();
	ПроцессОбъект.Завершен = Истина;
	ПроцессОбъект.Записать();

КонецПроцедуры

// Отменяет (проставляет пометки удаления) текущие задачи процесса
Процедура ОтменитьЗадачиПроцесса(Процесс)

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И (НЕ ЗадачаИсполнителя.Выполнена)");
	Запрос.УстановитьПараметр("БизнесПроцесс", Процесс);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтменитьЗадачу(Выборка.Ссылка);
	КонецЦикла;

КонецПроцедуры

// Рассчитать продолжительность пребывания на стадии в днях
Функция Продолжительность(Старт, Финиш) Экспорт
	
	Возврат Окр((Финиш - Старт)/84600,0);

КонецФункции

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Заявка клиента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти
