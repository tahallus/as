
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает сертификат подписавшей стороны из коллекции сертификатов, извлеченной из данных подписи. 
// Поиск происходит с учетом того, что CN Субъекта и Издателя могут быть равны.
//
// Параметры:
//  СертификатыПодписи - Массив из СертификатКриптографии - сертификаты, извлеченные из данных подписи,
//                                                          см. метод платформы ПолучитьСертификатыИзПодписи.
// 
// Возвращаемое значение:
// СертификатКриптографии, Неопределено - сертификат, с помощью которого была произведена подпись.
//
Функция СертификатПодписавшейСтороны(Знач СертификатыПодписи) Экспорт
	
	Возврат КриптографияБЭДСлужебныйКлиентСервер.НайтиСертификатПодписавшейСтороныРекурсивно(СертификатыПодписи);
	
КонецФункции

// Возвращает пустой результат получения отпечатков сертификатов.
// 
// Возвращаемое значение:
// 	Структура:
// * Отпечатки - Массив из Строка
// * Ошибка - Булево - при получении отпечатков произошла ошибка
// * Доступность - Булево - используется ли криптография в контекстах: клиент, сервер, облачный сервис криптографии.
// * ТекстОшибки - Строка
Функция НовыйРезультатПолученияОтпечатков() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("Доступность", Ложь);
	Результат.Вставить("Отпечатки", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Возвращает результаты получения отпечатков сертификатов в контекстах: Клиент, Сервер, Облако.
// 
// Возвращаемое значение:
// 	Структура:
// * Клиент - см. НовыйРезультатПолученияОтпечатков.
//          - Неопределено - получение отпечатков не выполнялось.
// * Сервер - см. НовыйРезультатПолученияОтпечатков .
//          - Неопределено - получение отпечатков не выполнялось.
// * Облако - см. НовыйРезультатПолученияОтпечатков.
//          - Неопределено - получение отпечатков не выполнялось.
Функция НовыеРезультатыПолученияОтпечатков() Экспорт
	
	Результаты = Новый Структура;
	Результаты.Вставить("Клиент", Неопределено);
	Результаты.Вставить("Сервер", Неопределено);
	Результаты.Вставить("Облако", Неопределено);
	
	Возврат Результаты;
	
КонецФункции

// Возвращает описание подписи.
// 
// Возвращаемое значение:
// 	Структура:
// * Подпись - ДвоичныеДанные
// * Сертификат - ДвоичныеДанные
// * Отпечаток - Строка
// * КомуВыданСертификат - Строка
// * УстановившийПодпись - СправочникСсылка.Пользователи
// * ДатаПроверкиПодписи - Дата
// * ПодписьВерна - Булево
// * ИмяФайлаПодписи - Строка
// * ДатаПодписи - Дата
// * Комментарий - Строка
Функция НовыеСвойстваПодписи() Экспорт
	
	СвойстваПодписи = Новый Структура;
	СвойстваПодписи.Вставить("Подпись");
	СвойстваПодписи.Вставить("Сертификат");
	СвойстваПодписи.Вставить("Отпечаток", "");
	СвойстваПодписи.Вставить("КомуВыданСертификат", "");
	СвойстваПодписи.Вставить("ДатаПодписи", Дата(1, 1, 1));
	СвойстваПодписи.Вставить("ИмяФайлаПодписи", "");
	СвойстваПодписи.Вставить("ПодписьВерна", Ложь);
	СвойстваПодписи.Вставить("ДатаПроверкиПодписи", Дата(1, 1, 1));
	СвойстваПодписи.Вставить("УстановившийПодпись",
		ПредопределенноеЗначение("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка"));
	СвойстваПодписи.Вставить("Комментарий", "");
	
	Возврат СвойстваПодписи;
	
КонецФункции

#Область ОбработкаНеисправностей

// Возвращает вид ошибки, возникающей при проблемах с криптографией.
// 
// Возвращаемое значение:
// 	См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиКриптография() Экспорт
	
	ОбработчикВыполненияДиагностики = "ОбработкаНеисправностейБЭДКлиент.ОткрытьМастерДиагностики";
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ОшибкаКриптографии";
	ВидОшибки.ВыполнятьОбработчикАвтоматически = Истина;
	ВидОшибки.АвтоматическиВыполняемыйОбработчик = ОбработчикВыполненияДиагностики;
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Ошибка криптографии'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = '<a href = ""Выполните"">Выполните</a> диагностику криптографии'");
	ВидОшибки.ОбработчикиНажатия.Вставить("Выполните", ОбработчикВыполненияДиагностики);
	
	Возврат ВидОшибки;
	
КонецФункции

#КонецОбласти

#КонецОбласти
