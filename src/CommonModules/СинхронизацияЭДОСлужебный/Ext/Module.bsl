
#Область СлужебныеПроцедурыИФункции

Функция ПараметрыСинхронизации(ПараметрыПолучения) Экспорт
	
	ПараметрыСинхронизации = Новый Структура;
	ПараметрыСинхронизации.Вставить("НеобходимоПринятьУсловияИспользованияСервиса", Ложь);
	ПараметрыСинхронизации.Вставить("ПараметрыПринятияУсловийИспользованияСервиса");
	ПараметрыСинхронизации.Вставить("КонтекстДиагностики", ПараметрыПолучения.КонтекстДиагностики);
	ПараметрыСинхронизации.Вставить("НемедленнаяОтправка", Не НастройкиЭДО.ОтложеннаяОтправкаЭлектронныхДокументов());
	ПараметрыСинхронизации.Вставить("ЕстьВозможностьОтправкиПолученияЭД", Ложь);
	ПараметрыСинхронизации.Вставить("ЕстьПрямойОбмен", Ложь);
	ПараметрыСинхронизации.Вставить("КлючиСинхронизации", СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации());
	ПараметрыСинхронизации.Вставить("ДанныеСертификатов");
	ПараметрыСинхронизации.Вставить("ОтпечаткиСертификатов");
	ПараметрыСинхронизации.Вставить("УчетныеЗаписиБезДоступаКСертификатам");
	ПараметрыСинхронизации.Вставить("УчетныеЗаписиБезДоступныхСертификатов");
	
	ПараметрыОтправкиПолучения = ПараметрыОтправкиПолученияЭД(ПараметрыПолучения.КонтекстДиагностики);
	
	ЗаполнитьЗначенияСвойств(ПараметрыСинхронизации, ПараметрыОтправкиПолучения);
	
	ВидОперации = НСтр("ru = 'Получение параметров синхронизации электронного документооборота'");
	ОтпечаткиСертификатов = КриптографияБЭД.ПолучитьОтпечаткиСертификатов(ВидОперации, ПараметрыПолучения.КонтекстДиагностики,
		ПараметрыПолучения.ОтпечаткиСертификатов);
	
	ПараметрыСинхронизации.ОтпечаткиСертификатов = ОтпечаткиСертификатов;
	
	ДанныеДляСинхронизации = ДанныеДляСинхронизации(ОтпечаткиСертификатов, ПараметрыПолучения.КонтекстДиагностики,
		ПараметрыПолучения.УчетныеЗаписи);
		
	ЗаполнитьЗначенияСвойств(ПараметрыСинхронизации, ДанныеДляСинхронизации);
	
	УчетныеЗаписи = СинхронизацияЭДО.УчетныеЗаписиКлючейСинхронизации(ДанныеДляСинхронизации.КлючиСинхронизации);
	
	ПараметрыПринятияУсловийИспользованияСервиса = Новый Структура;
	
	УчетныеЗаписиЭДОБезПринятыхУсловийСервиса = УчетныеЗаписиЭДО.УчетныеЗаписиЭДОБезПринятыхУсловийСервиса(УчетныеЗаписи);
	Если ЗначениеЗаполнено(УчетныеЗаписиЭДОБезПринятыхУсловийСервиса) Тогда
		ПараметрыПринятияУсловийИспользованияСервиса.Вставить("УчетныеЗаписиЭДО",
			УчетныеЗаписиЭДОБезПринятыхУсловийСервиса);
	КонецЕсли;
	
	Если ОзнакомитьСПрекращениемПоддержкиПрямогоОбмена() Тогда
		ПараметрыПринятияУсловийИспользованияСервиса.Вставить("ОзнакомитьСПрекращениемПоддержкиПрямогоОбмена", Истина);
	КонецЕсли;
	
	ПараметрыСинхронизации.ПараметрыПринятияУсловийИспользованияСервиса = ПараметрыПринятияУсловийИспользованияСервиса;
	ПараметрыСинхронизации.НеобходимоПринятьУсловияИспользованияСервиса = ЗначениеЗаполнено(ПараметрыПринятияУсловийИспользованияСервиса);
	
	Возврат ПараметрыСинхронизации;
	
КонецФункции

Функция ОтправитьПолучитьТранспортныеКонтейнеры(Параметры) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КонтекстОтправки",                 Неопределено);
	СтруктураВозврата.Вставить("КонтекстПолучения",                Неопределено);
	СтруктураВозврата.Вставить("ПриглашенийПолучено",              0);
	СтруктураВозврата.Вставить("ОтправленоКонтейнеров",            0);
	СтруктураВозврата.Вставить("ПолученоКонтейнеров",              0);
	СтруктураВозврата.Вставить("РаспакованоКонтейнеров",           0);
	СтруктураВозврата.Вставить("МассивУчетныхЗаписей",             Новый Массив);
	СтруктураВозврата.Вставить("ОтпечаткиСертификатов",            Новый Массив);
	СтруктураВозврата.Вставить("ДанныеКонтейнеров",                Неопределено);
	СтруктураВозврата.Вставить("КонтекстДиагностики",              Параметры.КонтекстДиагностики);
	СтруктураВозврата.Вставить("РезультатыОтправкиПолучения",      Параметры.РезультатыОтправкиПолучения);
	СтруктураВозврата.Вставить("РезультатЗагрузкиДокументовВФоне", Неопределено);
	СтруктураВозврата.Вставить("РезультатЗагрузкиДокументов",      Неопределено);
	СтруктураВозврата.Вставить("ТребуетсяОбработкаНаКлиенте",      Ложь);
	СтруктураВозврата.Вставить("КлючиСинхронизацииДляПовторнойОбработки",
		СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации());
	
	ФоновыеЗадания.Выполнить("СинхронизацияЭДО.ОбновитьКешиОператоровЭДОИФорматов",,,
		НСтр("ru = 'Обновление данных из сервиса настроек 1С:ЭДО'"));
	
	ПовторноеПолучение = Параметры.ПовторноеПолучение;
	КлючиСинхронизации = Параметры.КлючиСинхронизации;
	
	ПриглашенийПолучено = ПриглашенияЭДО.ПолучитьПриглашения(КлючиСинхронизации, СтруктураВозврата.КонтекстДиагностики);
	
	РезультатОтправкиКонтейнеров = ОтправитьКонтейнеры(КлючиСинхронизации, Параметры.ОтпечаткиСертификатов,
		СтруктураВозврата.КонтекстДиагностики, СтруктураВозврата.РезультатыОтправкиПолучения);
	
	РезультатОтправки = РезультатОтправкиКонтейнеров.РезультатОтправки;
	
	ТребуетсяОбработкаНаКлиентеОтправка = Ложь;
	
	Если РезультатОтправки <> Неопределено Тогда
		ТребуетсяОбработкаНаКлиентеОтправка = РезультатОтправки.ТребуетсяОбработкаНаКлиенте;
	КонецЕсли;
	
	СтруктураВозврата.ПриглашенийПолучено = ПриглашенийПолучено;
	СтруктураВозврата.ОтправленоКонтейнеров = РезультатОтправкиКонтейнеров.КоличествоОтправленных;
	
	РезультатПолученияКонтейнеров = ПолучитьКонтейнеры(КлючиСинхронизации, Параметры.ОтпечаткиСертификатов,
		СтруктураВозврата.КонтекстДиагностики, СтруктураВозврата.РезультатыОтправкиПолучения, ПовторноеПолучение);
		
	РезультатПолучения = РезультатПолученияКонтейнеров.РезультатПолучения;
	СтруктураВозврата.РезультатЗагрузкиДокументовВФоне = РезультатПолученияКонтейнеров.РезультатЗагрузкиДокументовВФоне;
	СтруктураВозврата.ПолученоКонтейнеров = РезультатПолученияКонтейнеров.ПолученоКонтейнеров;
	СтруктураВозврата.РаспакованоКонтейнеров = РезультатПолученияКонтейнеров.РаспакованоКонтейнеров;
	
	Если ТребуетсяОбработкаНаКлиентеОтправка Или РезультатПолучения.ТребуетсяОбработкаНаКлиенте Тогда
		СтруктураВозврата.ТребуетсяОбработкаНаКлиенте = Истина;
		Для Каждого КлючИЗначение Из КлючиСинхронизации Цикл
			СинхронизацияЭДОКлиентСервер.УстановитьТекущуюУчетнуюЗапись(СтруктураВозврата.КонтекстДиагностики,
				КлючИЗначение.Ключ);
			ОбновитьИнформациюОбАктивностиУчетнойЗаписи(КлючИЗначение.Ключ, СтруктураВозврата.КонтекстДиагностики);
			СтруктураВозврата.МассивУчетныхЗаписей.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		КлючиСинхронизацииДляПовторнойОбработки = СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации();
		Если РезультатПолучения.КонтекстПолучения <> Неопределено Тогда
			Для Каждого КлючСинхронизации Из РезультатПолучения.КонтекстПолучения.КлючиСинхронизацииДляПовторнойОбработки Цикл
				КлючиСинхронизацииДляПовторнойОбработки.Вставить(КлючСинхронизации.Ключ, КлючСинхронизации.Значение);
			КонецЦикла;
		КонецЕсли;
		Если РезультатОтправки <> Неопределено И РезультатОтправки.КонтекстОтправки <> Неопределено Тогда
			Для Каждого КлючСинхронизации Из РезультатОтправки.КонтекстОтправки.КлючиСинхронизации Цикл
				КлючиСинхронизацииДляПовторнойОбработки.Вставить(КлючСинхронизации.Ключ, КлючСинхронизации.Значение);
			КонецЦикла;
		КонецЕсли;
		СтруктураВозврата.КлючиСинхронизацииДляПовторнойОбработки = КлючиСинхронизацииДляПовторнойОбработки;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ЭтоПрямойОбмен(СпособОбменаЭД) Экспорт
	
	Возврат СинхронизацияЭДО.СпособыПрямогоОбмена().Найти(СпособОбменаЭД) <> Неопределено;
	
КонецФункции

// Функция получает данные по сертификатам, разрешенным для использования при подписании ЭД и авторизации
// на сервере оператора ЭДО. Поиск сертификатов выполняется как пересечение массивов сертификатов установленных в
// личном хранилище (клиента либо сервера, в зависимости от настроек в 1с), с сертификатами импортированными в 1с и
// зарегистрированными у оператора ЭДО (регистрация у оператора отражается в таб.части соглашения об обмене ЭД
// "СертификатыПодписейОрганизации"). При необходимости, выборка может быть ограничена учетными записями, по которым
// требуется определить параметры сертификатов.
//
// Параметры:
//  ОтпечаткиСертификатов - см. КриптографияБЭД.ПолучитьОтпечаткиСертификатов
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  УчетныеЗаписи - Массив из Строка - идентификаторы учетных записей, по которым требуется получить данные
//                  для синхронизации, если массив пустой - данные будут получены без отбора по учетным записям.
//  ВыбранныеСертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//
// Возвращаемое значение:
//  Структура:
//    * КлючиСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации
//    * ДанныеСертификатов - Соответствие из КлючИЗначение:
//       ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       ** Значение - см. СинхронизацияЭДО.НовыеДанныеСертификата
//    * УчетныеЗаписиБезДоступаКСертификатам - Соответствие из КлючИЗначение:
//       ** Ключ - Строка
//       ** Значение - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    * УчетныеЗаписиБезДоступныхСертификатов - см. УчетныеЗаписиЭДО.УчетныеЗаписиБезДоступныхСертификатов
//
Функция ДанныеДляСинхронизации(Знач ОтпечаткиСертификатов, КонтекстДиагностики, Знач УчетныеЗаписи = Неопределено,
	Знач ВыбранныеСертификаты = Неопределено) Экспорт
	
	Если ВыбранныеСертификаты = Неопределено Тогда
		ВыбранныеСертификаты = Новый Массив;
	КонецЕсли;
	СтруктураСоответствий = Новый Структура;
	
	ИспользоватьЭП = НастройкиБЭД.ИспользоватьЭлектронныеПодписи();
	
	ВсеОтпечатки = КриптографияБЭД.ПолучитьВсеОтпечаткиСертификатов(ОтпечаткиСертификатов);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСертификатов.Сертификат КАК Сертификат,
	|	ТаблицаСертификатов.ПарольПользователя КАК ПарольПользователя
	|ПОМЕСТИТЬ ТаблицаСертификатов
	|ИЗ
	|	&ТаблицаСертификатов КАК ТаблицаСертификатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
	|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторОрганизации,
	|	УчетныеЗаписиЭДО.ПринятыУсловияИспользования КАК ПринятыУсловияИспользования,
	|	Сертификаты.Ссылка КАК СертификатПодписи,
	|	ЕСТЬNULL(ТаблицаСертификатов.ПарольПользователя, """") КАК ПарольПользователя,
	|	ВЫБОР
	|		КОГДА ТаблицаСертификатов.Сертификат ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗапомнитьПарольКСертификату,
	|	ВЫБОР
	|		КОГДА ТаблицаСертификатов.Сертификат ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПарольПолучен,
	|	Сертификаты.Ссылка В (&ВыбранныеСертификаты) КАК ЭтоВыбранныйСертификат,
	|	Сертификаты.Отпечаток КАК Отпечаток,
	|	Сертификаты.Отозван КАК Отозван,
	|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
	|	Сертификаты.ПользовательОповещенОСрокеДействия КАК ОповещенОСрокеДействия,
	|	Сертификаты.ДействителенДо КАК ДатаОкончания,
	|	Сертификаты.Программа КАК Программа,
	|	Сертификаты.СертификатДоступенТекущемуПользователю КАК СертификатДоступенТекущемуПользователю
	|ИЗ
	|	УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Организации КАК Организации
	|		ПО УчетныеЗаписиЭДО.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СертификатыУчетныхЗаписей КАК СертификатыУчетныхЗаписей
	|			ЛЕВОЕ СОЕДИНЕНИЕ Сертификаты КАК Сертификаты
	|				ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСертификатов КАК ТаблицаСертификатов
	|				ПО (ТаблицаСертификатов.Сертификат = Сертификаты.Ссылка)
	|			ПО СертификатыУчетныхЗаписей.Сертификат = Сертификаты.Ссылка
	|		ПО УчетныеЗаписиЭДО.ИдентификаторЭДО = СертификатыУчетныхЗаписей.ИдентификаторЭДО
	|ГДЕ
	|	&ИспользоватьЭП
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторОрганизации,
	|	ЭтоВыбранныйСертификат УБЫВ,
	|	ПарольПолучен УБЫВ";
	
	Отбор = КриптографияБЭД.НовыйОтборСертификатов();
	Отбор.Отпечатки = "&Отпечатки";
	ЗапросСертификатов = КриптографияБЭД.ЗапросДействующихСертификатов("Сертификаты", Отбор);
	
	ПереданыУчетныеЗаписи = УчетныеЗаписи <> Неопределено;
	ОтборУчетныхЗаписей = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	Если Не ЗначениеЗаполнено(УчетныеЗаписи) Тогда
		УчетныеЗаписи = Новый Массив;
	КонецЕсли;
	Если ПереданыУчетныеЗаписи Тогда
		ОтборУчетныхЗаписей.УчетныеЗаписи = "&УчетныеЗаписи";
	КонецЕсли;
	ОтборУчетныхЗаписей.СпособОбмена = "&СпособОбмена";
	ЗапросУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", ОтборУчетныхЗаписей);
	ОтборСертификатовУчетныхЗаписей = УчетныеЗаписиЭДО.НовыйОтборСертификатовУчетныхЗаписей();
	Если ПереданыУчетныеЗаписи Тогда
		ОтборСертификатовУчетныхЗаписей.УчетныеЗаписи = "&УчетныеЗаписи";
	КонецЕсли;
	ЗапросСертификатовУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросСертификатовУчетныхЗаписей("СертификатыУчетныхЗаписей",
		ОтборСертификатовУчетныхЗаписей);
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросСертификатов);
	Запросы.Добавить(ИнтеграцияЭДО.ЗапросДоступныхОрганизаций("Организации"));
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	Запросы.Добавить(ЗапросСертификатовУчетныхЗаписей);
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	ИтоговыйЗапрос.УстановитьПараметр("СпособОбмена", СинхронизацияЭДО.СпособыОбменаЧерезОператора());
	ИтоговыйЗапрос.УстановитьПараметр("ВыбранныеСертификаты", ВыбранныеСертификаты);
	ИтоговыйЗапрос.УстановитьПараметр("Отпечатки", ВсеОтпечатки);
	ИтоговыйЗапрос.УстановитьПараметр("ИспользоватьЭП", ИспользоватьЭП);
	Если ПереданыУчетныеЗаписи Тогда
		ИтоговыйЗапрос.УстановитьПараметр("УчетныеЗаписи", УчетныеЗаписи);
	КонецЕсли;
	
	Сертификаты = КриптографияБЭД.НайтиСертификаты(ВсеОтпечатки);
	УстановитьПривилегированныйРежим(Истина);
	ПаролиСертификатов = КриптографияБЭД.ПаролиСертификатов(Сертификаты);
	УстановитьПривилегированныйРежим(Ложь);
	ТЗ_Сертификатов = Новый ТаблицаЗначений;
	ТЗ_Сертификатов.Колонки.Добавить("Сертификат",
		Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
	ТЗ_Сертификатов.Колонки.Добавить("ПарольПользователя", Новый ОписаниеТипов("Строка"));
	ТЗ_Сертификатов.Колонки.Добавить("ЭтоВыбранныйСертификат", Новый ОписаниеТипов("Булево"));
	Для Каждого КлючИЗначение Из ПаролиСертификатов Цикл
		Если КлючИЗначение.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТЗ_Сертификатов.Добавить();
		НоваяСтрока.Сертификат = КлючИЗначение.Ключ;
		НоваяСтрока.ПарольПользователя = КлючИЗначение.Значение;
		НоваяСтрока.ЭтоВыбранныйСертификат = ВыбранныеСертификаты.Найти(КлючИЗначение.Ключ) <> Неопределено;
	КонецЦикла;
	ИтоговыйЗапрос.УстановитьПараметр("ТаблицаСертификатов", ТЗ_Сертификатов);
	
	РезультатыЗапроса = ИтоговыйЗапрос.ВыполнитьПакет();
	Выборка = РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выбрать();
	СертификатыУчетныхЗаписей = Новый Соответствие;
	ДанныеСертификатов = Новый Соответствие;
	
	// Для авторизации, помимо сертификатов, попытаемся получить маркеры, по возможности расшифрованные.
	
	КлючиСинхронизации = СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации();
	
	НедоступныеСертификаты = Новый Соответствие;
	ТекущийИдентификаторОрганизации = Неопределено;
	КлючСинхронизацииПолучен = Ложь;
	Пока Выборка.Следующий() Цикл
		
		ДанныеСертификата = СинхронизацияЭДО.НовыеДанныеСертификата();
		
		Если ТекущийИдентификаторОрганизации <> Выборка.ИдентификаторОрганизации Тогда
			ТекущийИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
			КлючСинхронизации = СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации();
			КлючСинхронизации.СпособОбмена = Выборка.СпособОбменаЭД;
			КлючСинхронизации.ИдентификаторУчетнойЗаписи = ТекущийИдентификаторОрганизации;
			МассивСертификатов = Новый Массив;
			КлючиСинхронизации.Вставить(ТекущийИдентификаторОрганизации, КлючСинхронизации);
			КлючСинхронизацииПолучен = Ложь;
		ИначеЕсли КлючСинхронизацииПолучен Тогда
			Продолжить;
		КонецЕсли;
		СертификатДоступенТекущемуПользователю = ЗначениеЗаполнено(Выборка.СертификатПодписи)
			И Выборка.СертификатДоступенТекущемуПользователю;
		Если СертификатДоступенТекущемуПользователю Тогда
			МассивСертификатов.Добавить(Выборка.СертификатПодписи);
		Иначе 
			Если НедоступныеСертификаты[ТекущийИдентификаторОрганизации] = Неопределено Тогда
				НедоступныеСертификаты.Вставить(ТекущийИдентификаторОрганизации,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.СертификатПодписи));
			Иначе 
				НедоступныеСертификаты[ТекущийИдентификаторОрганизации].Добавить(Выборка.СертификатПодписи);
			КонецЕсли;
		КонецЕсли;
		
		Если СертификатыУчетныхЗаписей.Получить(ТекущийИдентификаторОрганизации) = Неопределено Тогда
			СертификатыУчетныхЗаписей.Вставить(ТекущийИдентификаторОрганизации, МассивСертификатов);
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ДанныеСертификата, Выборка);
		ДанныеСертификата.Ссылка = Выборка.СертификатПодписи;
		ДанныеСертификата.ДвоичныеДанные = Выборка.ДанныеСертификата;
		// Заполняем данные для авторизации.
		Если СертификатДоступенТекущемуПользователю
			И ТипЗнч(ДанныеСертификата.ДвоичныеДанные) = Тип("ХранилищеЗначения") Тогда
			ПарольПолучен = Выборка.ПарольПолучен;
			ДанныеСертификата.ПарольПользователя = Выборка.ПарольПользователя;
			ДанныеСертификата.ПарольПолучен = ПарольПолучен;
			
			Маркер = СервисЭДО.Авторизоваться(КлючиСинхронизации[ТекущийИдентификаторОрганизации],
				КонтекстДиагностики, ДанныеСертификата.ДвоичныеДанные);
			
			Если ТипЗнч(Маркер) = Тип("ДвоичныеДанные") Тогда
				ДанныеСертификата.МаркерЗашифрованный = Маркер;
			КонецЕсли;
			КлючиСинхронизации[ТекущийИдентификаторОрганизации].Сертификаты.Добавить(ДанныеСертификата);
			Если Выборка.ЭтоВыбранныйСертификат Тогда
				КлючиСинхронизации[ТекущийИдентификаторОрганизации].ВыбранныйСертификат = ДанныеСертификата.Ссылка;
			КонецЕсли;
			ДанныеСертификатов.Вставить(Выборка.СертификатПодписи, ДанныеСертификата);
			Если ПарольПолучен Или Выборка.ЭтоВыбранныйСертификат Тогда
				КлючСинхронизацииПолучен = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючСинхронизации Из КлючиСинхронизации Цикл
		Если ЗначениеЗаполнено(КлючСинхронизации.Значение.ВыбранныйСертификат) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Сертификат Из КлючСинхронизации.Значение.Сертификаты Цикл
			Если Сертификат.ПарольПолучен Тогда
				КлючСинхронизации.Значение.ВыбранныйСертификат = Сертификат.Ссылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СервисЭДО.ЗаполнитьПараметрыАутентификации(КлючиСинхронизации, КонтекстДиагностики);
	
	УчетныеЗаписиБезДоступаКСертификатам = Новый Соответствие;
	Для каждого КлючИЗначение Из СертификатыУчетныхЗаписей Цикл
		Если КлючИЗначение.Значение.Количество() = 0 Тогда
			УчетныеЗаписиБезДоступаКСертификатам.Вставить(КлючИЗначение.Ключ, НедоступныеСертификаты[КлючИЗначение.Ключ]);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураСоответствий.Вставить("КлючиСинхронизации", КлючиСинхронизации);
	СтруктураСоответствий.Вставить("ДанныеСертификатов", ДанныеСертификатов);
	СтруктураСоответствий.Вставить("УчетныеЗаписиБезДоступаКСертификатам", УчетныеЗаписиБезДоступаКСертификатам);
	СтруктураСоответствий.Вставить("УчетныеЗаписиБезДоступныхСертификатов",
		УчетныеЗаписиЭДО.УчетныеЗаписиБезДоступныхСертификатов(ВсеОтпечатки));
	
	Возврат СтруктураСоответствий;
	
КонецФункции

// Параметры использования сертификатов при отправке и получении электронных документов.
//
// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  Структура - параметры использования сертификатов.
//
Функция ПараметрыОтправкиПолученияЭД(КонтекстДиагностики)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ЕстьВозможностьОтправкиПолученияЭД", Ложь);
	Параметры.Вставить("ЕстьПрямойОбмен", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	УчетныеЗаписиЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
		|	СертификатыУчетныхЗаписей.Сертификат КАК Сертификат
		|ИЗ
		|	УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Организации КАК Организации
		|		ПО УчетныеЗаписиЭДО.Организация = Организации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ СертификатыУчетныхЗаписей КАК СертификатыУчетныхЗаписей
		|		ПО УчетныеЗаписиЭДО.ИдентификаторЭДО = СертификатыУчетныхЗаписей.ИдентификаторЭДО
		|ИТОГИ ПО
		|	СпособОбменаЭД,
		|	ИдентификаторЭДО";
	
	Запросы = Новый Массив;
	Запросы.Добавить(УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО"));
	Запросы.Добавить(ИнтеграцияЭДО.ЗапросДоступныхОрганизаций("Организации"));
	Запросы.Добавить(КриптографияБЭД.ЗапросДействующихСертификатов("Сертификаты"));
	Запросы.Добавить(УчетныеЗаписиЭДО.ЗапросСертификатовУчетныхЗаписей("СертификатыУчетныхЗаписей"));
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	УчетныеЗаписиБезСертификатов = Новый Массив;
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		Если ЭтоПрямойОбмен(Выборка.СпособОбменаЭД) Тогда
			Параметры.ЕстьПрямойОбмен = Истина;
			Параметры.ЕстьВозможностьОтправкиПолученияЭД = Истина;
			Продолжить;
		ИначеЕсли ЭтоИнтеркампани(Выборка.СпособОбменаЭД) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПрофиль = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПрофиль.Следующий() Цикл
			
			ВыборкаДетали = ВыборкаПрофиль.Выбрать();
			ЕстьВалидныйСертификат = ВыборкаДетали.Следующий();
			
			Если ЕстьВалидныйСертификат Тогда
				Параметры.ЕстьВозможностьОтправкиПолученияЭД = Истина;
			Иначе
				УчетныеЗаписиБезСертификатов.Добавить(ВыборкаПрофиль.ИдентификаторЭДО);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если УчетныеЗаписиБезСертификатов.Количество() Тогда
		
		ОтложенныеНапоминания = ЗагрузитьОтложенныеНапоминания();
		
		ТаблицаУчетныхЗаписей = УчетныеЗаписиЭДО.НоваяТаблицаУчетныхЗаписейБезСертификатов();
	
		Для каждого УчетнаяЗапись Из УчетныеЗаписиБезСертификатов Цикл
			НоваяСтрока = ТаблицаУчетныхЗаписей.Добавить();
			НоваяСтрока.ИдентификаторЭДО = УчетнаяЗапись;
		КонецЦикла;
		ПрименитьНастройкиОтложенныхНапоминаний(ОтложенныеНапоминания, ТаблицаУчетныхЗаписей);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДанных.ИдентификаторЭДО КАК ИдентификаторОтправителя,
		|	ТаблицаДанных.СообщениеЭДО КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ЭД
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторОрганизации
		|ИЗ
		|	УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОператорыЭДО КАК ОператорыЭДО
		|		ПО УчетныеЗаписиЭДО.ОператорЭДО = ОператорыЭДО.ИдентификаторОператора";
		
		Отбор = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
		Отбор.УчетныеЗаписи = "&УченыеЗаписи";
		Запросы = Новый Массив;
		Запросы.Добавить(УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", Отбор));
		Запросы.Добавить(СервисНастроекЭДО.ЗапросОператоровЭДО("ОператорыЭДО"));
		
		ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
		
		ИтоговыйЗапрос.УстановитьПараметр("ТаблицаДанных", ТаблицаУчетныхЗаписей);
		ИтоговыйЗапрос.УстановитьПараметр("УченыеЗаписи", ТаблицаУчетныхЗаписей.ВыгрузитьКолонку("ИдентификаторОтправителя"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		УчетныеЗаписиБезСертификатов = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			УчетныеЗаписиБезСертификатов.Добавить(ВыборкаДетальныеЗаписи.ИдентификаторОрганизации);
		КонецЦикла;
		
		Если УчетныеЗаписиБезСертификатов.Количество() Тогда
			СинхронизацияЭДО.ДобавитьОшибкуУчетныхЗаписейБезСертификатов(КонтекстДиагностики,
				УчетныеЗаписиБезСертификатов,
				УчетныеЗаписиЭДОКлиентСервер.ОперацииПомощникаРегистрацииСертификатов().Отправка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ОзнакомитьСПрекращениемПоддержкиПрямогоОбмена()
	
	Если НастройкиЭДО.ПрямойОбменДоступен() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючНастройки = КлючНастройкиОзнакомленияСПрекращениемПоддержкиПрямогоОбмена();
	Ознакомлен = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбменСКонтрагентами", КлючНастройки);
	Если Ознакомлен = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	УдалитьПрофилиНастроекЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УдалитьПрофилиНастроекЭДО КАК УдалитьПрофилиНастроекЭДО
		|ГДЕ
		|	УдалитьПрофилиНастроекЭДО.СпособОбменаЭД В (&СпособыОбменаЭД)";
	
	СпособыОбменаЭД = Новый Массив;
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
	Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		ОзнакомленСПрекращениемПоддержкиПрямогоОбмена();
		Возврат Ложь;
	Иначе
		Возврат Истина
	КонецЕсли;
	
КонецФункции

Функция ЭтоИнтеркампани(СпособОбмена) Экспорт
	Возврат СпособОбмена = Перечисления.СпособыОбменаЭД.Внутренний;
КонецФункции

Функция ЗагрузитьОтложенныеНапоминания()
	
	ОтложенныеНапоминания = ХранилищеСистемныхНастроек.Загрузить(
		"РегистрСведений.СертификатыУчетныхЗаписейЭДО.Форма.ПомощникРегистрацииСертификатов", "ОтложенныеНапоминания");
	
	Если ОтложенныеНапоминания = Неопределено Тогда
		ОтложенныеНапоминания = Новый ТаблицаЗначений;
		ОтложенныеНапоминания.Колонки.Добавить("ПрофильНастроек", Новый ОписаниеТипов("Строка"));
		ОтложенныеНапоминания.Колонки.Добавить("ХешСертификатов", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
		ОтложенныеНапоминания.Колонки.Добавить("ДатаОтсчета", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	КонецЕсли;
		
	Возврат ОтложенныеНапоминания;
	
КонецФункции 

Процедура ПрименитьНастройкиОтложенныхНапоминаний(ОтложенныеНапоминания, ТаблицаДанных)
	
	Если ОтложенныеНапоминания.Количество() Тогда
		
		СтрокиКУдалению  = Новый Массив;
		ТекущаяДата      = ТекущаяДатаСеанса();
		Срок             = 3600 * 24 * 7; // семь дней
		ХешиСертификатов = ХешСертификатовПрофиля(ТаблицаДанных.ВыгрузитьКолонку("ИдентификаторОтправителя"));
		
		Для Каждого Строка Из ТаблицаДанных Цикл
			
			СтрокиНастроек = ОтложенныеНапоминания.НайтиСтроки(Новый Структура("ПрофильНастроек", Строка.ИдентификаторОтправителя));
			Если СтрокиНастроек.Количество() Тогда
				
				СтрокаНастроек = СтрокиНастроек[0];
				
				ПредыдущийХешСертификатов = СтрокаНастроек.ХешСертификатов;
				ТекущийХешСертификатов    = ХешиСертификатов[Строка.ИдентификаторОтправителя];
				
				Если ПредыдущийХешСертификатов = ТекущийХешСертификатов Тогда
					
					Если ТекущаяДата - СтрокаНастроек.ДатаОтсчета < Срок Тогда
						// Срок еще не прошел, не показываем профиль.
						СтрокиКУдалению.Добавить(Строка);
					Иначе
						// Срок прошел, удаляем профиль из настроек напоминаний,
						// чтобы он снова появился в помощнике.
						ОтложенныеНапоминания.Удалить(СтрокаНастроек);
					КонецЕсли;
					
				Иначе
					// Состав сертификатов изменился, удаляем профиль из настроек напоминаний,
					// чтобы он снова появился в помощнике.
					ОтложенныеНапоминания.Удалить(СтрокаНастроек);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокиКУдалению.Количество() Тогда
			Для Каждого Строка Из СтрокиКУдалению Цикл
				ТаблицаДанных.Удалить(Строка);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ХешСертификатовПрофиля(УчетнаяЗапись)
	
	ХешиОтпечатков = Новый Соответствие;
	
	СписокПрофилей = Новый Массив;
	Если ТипЗнч(УчетнаяЗапись) <> Тип("Массив") Тогда
		СписокПрофилей.Добавить(УчетнаяЗапись);
	Иначе
		СписокПрофилей = УчетнаяЗапись;
	КонецЕсли;
	
	Запросы = Новый Массив;
	Отбор = УчетныеЗаписиЭДО.НовыйОтборСертификатовУчетныхЗаписей();
	Отбор.УчетныеЗаписи = "&УчетныеЗаписи";
	Запросы.Добавить(УчетныеЗаписиЭДО.ЗапросСертификатовУчетныхЗаписей("СертификатыУчетныхЗаписей", Отбор));
	Отбор = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	Отбор.УчетныеЗаписи = "&УчетныеЗаписи";
	Запросы.Добавить(УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписи", Отбор));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УчетныеЗаписи.ИдентификаторЭДО КАК ИдентификаторЭДО,
	|	ЕСТЬNULL(СертификатыУчетныхЗаписей.Сертификат.Отпечаток, """") КАК Отпечаток
	|ИЗ
	|	УчетныеЗаписи КАК УчетныеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СертификатыУчетныхЗаписей КАК СертификатыУчетныхЗаписей
	|		ПО УчетныеЗаписи.Сертификат = СертификатыУчетныхЗаписей.Ссылка
	|ИТОГИ
	|ПО
	|	ИдентификаторЭДО");
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("УчетныеЗаписи", СписокПрофилей);
	
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаПрофиль = ИтоговыйЗапрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);
	Пока ВыборкаПрофиль.Следующий() Цикл
		
		Отпечатки = "";
		
		ВыборкаДетали = ВыборкаПрофиль.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			Отпечатки = Отпечатки + ВыборкаДетали.Отпечаток;
		КонецЦикла;
		
		ХешОтпечатков = "";
		
		Если ЗначениеЗаполнено(Отпечатки) Тогда
			Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
			Хеширование.Добавить(Отпечатки);
			ХешОтпечатков = Строка(Хеширование.ХешСумма);
		КонецЕсли;
		
		ХешиОтпечатков.Вставить(ВыборкаПрофиль.ИдентификаторЭДО, ХешОтпечатков);
		
	КонецЦикла;
	
	Возврат ХешиОтпечатков;

КонецФункции

Функция КлючНастройкиОзнакомленияСПрекращениемПоддержкиПрямогоОбмена()
	Возврат "ОзнакомленСПрекращениемПрямогоОбмена";
КонецФункции

Процедура ОзнакомленСПрекращениемПоддержкиПрямогоОбмена()
	
	КлючНастройки = КлючНастройкиОзнакомленияСПрекращениемПоддержкиПрямогоОбмена();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбменСКонтрагентами", КлючНастройки, Истина);
	
КонецПроцедуры

// Получение новых электронных документов на основе заведенных соглашений об обмене.
//
// Параметры:
//  КлючиСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  РезультатыОтправкиПолучения - см. СинхронизацияЭДОСлужебныйКлиент.НовыеРезультатыОтправкиПолучения
//  ПовторноеПолучение - Булево - признак повторного получения.
// 
// Возвращаемое значение:
//  см. НовыйРезультатПолученияДокументов
Функция ПолучитьНовыеЭлектронныеДокументы(Знач КлючиСинхронизации, КонтекстДиагностики,
	РезультатыОтправкиПолучения = Неопределено, ПовторноеПолучение = Ложь, КонтекстПолучения = Неопределено)
	
	РезультатПолученияДокументов = НовыйРезультатПолученияДокументов();
	
	Если КонтекстПолучения <> Неопределено Тогда
		РезультатПолученияДокументов.УчетныеЗаписи1СЭДОПолученыВсеДокументы = КонтекстПолучения.УчетныеЗаписи1СЭДОПолученыВсеДокументы;
		РезультатПолученияДокументов.Контейнеры = КонтекстПолучения.Контейнеры;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПовторноеПолучение Тогда 
		ПолучитьНовыеЭлектронныеДокументыЧерезПрямойОбмен(РезультатПолученияДокументов, КонтекстДиагностики);
	КонецЕсли;
	
	// Получаем документы из сервисов операторов ЭДО.
	ПолучитьНовыеЭлектронныеДокументыЧерезОператораЭДО(РезультатПолученияДокументов,
		КлючиСинхронизации, КонтекстДиагностики, РезультатыОтправкиПолучения);
		
	ОповещенияОСобытияхЭДО.УстановитьПризнакНаличияНовыхЭлектронныхДокументов(
		РезультатПолученияДокументов.УчетныеЗаписи1СЭДОПолученыВсеДокументы, Ложь);
	
	КлючиСинхронизацииДляПовторнойОбработки = КлючиСинхронизацииДляПовторнойОбработки(КлючиСинхронизации, 
		РезультатПолученияДокументов.УчетныеЗаписиДляПовторнойОбработки,
		РезультатПолученияДокументов.УчетныеЗаписиСПросроченнымМаркером,
		КонтекстДиагностики);
	
	Если РезультатПолученияДокументов.УчетныеЗаписиДляПовторнойОбработки.Количество() Тогда
		РезультатПолученияДокументов.ТребуетсяОбработкаНаКлиенте = Истина;
		КонтекстПолучения = Новый Структура;
		КонтекстПолучения.Вставить("УчетныеЗаписи1СЭДОПолученыВсеДокументы",
			РезультатПолученияДокументов.УчетныеЗаписи1СЭДОПолученыВсеДокументы);
		КонтекстПолучения.Вставить("Контейнеры", РезультатПолученияДокументов.Контейнеры);
		КонтекстПолучения.Вставить("КлючиСинхронизацииДляПовторнойОбработки", КлючиСинхронизацииДляПовторнойОбработки);
		
		РезультатПолученияДокументов.КонтекстПолучения = КонтекстПолучения;
		Если РезультатПолученияДокументов.УчетныеЗаписиСПросроченнымМаркером.Количество() Тогда
			Возврат ПолучитьНовыеЭлектронныеДокументы(КлючиСинхронизацииДляПовторнойОбработки, КонтекстДиагностики,
				РезультатыОтправкиПолучения, ПовторноеПолучение, КонтекстПолучения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатПолученияДокументов;
	
КонецФункции

#Область ПрямойОбмен

Процедура ПолучитьНовыеЭлектронныеДокументыЧерезПрямойОбмен(РезультатПолученияДокументов, КонтекстДиагностики)
	
	Если Не НастройкиЭДО.ИспользуетсяПрямойОбменЭлектроннымиДокументами() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиОтправкиПрямогоОбмена.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	НастройкиОтправкиПрямогоОбмена.АдресОтправителя КАК АдресОтправителя
		|ПОМЕСТИТЬ втНастройкиОтправкиПрямогоОбмена
		|ИЗ
		|	НастройкиОтправкиПрямогоОбмена КАК НастройкиОтправкиПрямогоОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втНастройкиОтправкиПрямогоОбмена.АдресОтправителя КАК АдресОтправителя,
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	УчетныеЗаписиЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
		|	УчетныеЗаписиЭДО.КаталогОбмена КАК КаталогОбмена,
		|	УчетныеЗаписиЭДО.ПассивноеСоединениеFTP КАК ПассивноеСоединениеFTP,
		|	УчетныеЗаписиЭДО.ПортFTP КАК ПортFTP,
		|	УчетныеЗаписиЭДО.ПутьFTP КАК ПутьFTP,
		|	УчетныеЗаписиЭДО.УчетнаяЗаписьЭлектроннойПочты КАК УчетнаяЗаписьЭлектроннойПочты
		|ИЗ
		|	втНастройкиОтправкиПрямогоОбмена КАК втНастройкиОтправкиПрямогоОбмена
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО втНастройкиОтправкиПрямогоОбмена.ИдентификаторОтправителя = УчетныеЗаписиЭДО.ИдентификаторЭДО";
	
	Запросы = Новый Массив;
	Запросы.Добавить(НастройкиЭДО.ЗапросНастроекОтправкиДляПрямогоОбмена("НастройкиОтправкиПрямогоОбмена"));
	Запросы.Добавить(УчетныеЗаписиЭДО.ЗапросНастроекУчетныхЗаписей("УчетныеЗаписиЭДО"));
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РесурсыДляПроверки = РезультатЗапроса.Выгрузить();
	
	Отбор = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	МассивРесурсов = РесурсыДляПроверки.НайтиСтроки(Отбор);
	ПолучитьНовыеЭДЧерезКаталогОбмена(РезультатПолученияДокументов, МассивРесурсов, КонтекстДиагностики,
		Отбор.СпособОбменаЭД);
	
	Отбор.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP;
	МассивРесурсов = РесурсыДляПроверки.НайтиСтроки(Отбор);
	ПолучитьНовыеЭДЧерезFTP(РезультатПолученияДокументов, МассивРесурсов, КонтекстДиагностики, Отбор.СпособОбменаЭД);
	
	Отбор.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту;
	МассивРесурсов = РесурсыДляПроверки.НайтиСтроки(Отбор);
	ПолучитьНовыеЭДЧерезЭлектроннуюПочту(РезультатПолученияДокументов, МассивРесурсов, КонтекстДиагностики,
		Отбор.СпособОбменаЭД);
	
КонецПроцедуры

Функция ОбработатьФайлКонтейнера(ДанныеКонтейнеров, ИмяФайлаБезРасширения, ДанныеФайла, АдресРесурсаКонтрагента = "")
	
	Если Не СтрНачинаетсяС(ИмяФайлаБезРасширения, "EDI_") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторКонтейнера = Сред(ИмяФайлаБезРасширения, 5);
	
	ТранспортныйКонтейнер = Новый Структура;
	ТранспортныйКонтейнер.Вставить("ИДПакета"  , "");
	ТранспортныйКонтейнер.Вставить("ИДДокумента"  , ИдентификаторКонтейнера);
	ТранспортныйКонтейнер.Вставить("ДвоичныеДанные", ДанныеФайла);
	ТранспортныйКонтейнер.Вставить("ИДДокументооборота", "");
	ТранспортныйКонтейнер.Вставить("КодТранзакции", "");
	ТранспортныйКонтейнер.Вставить("КодРегламента", "");
	ТранспортныйКонтейнер.Вставить("Приоритет", 0);
	ТранспортныйКонтейнер.Вставить("АдресРесурсаКонтрагента", АдресРесурсаКонтрагента);
	
	ДанныеКонтейнеров.Вставить(ИдентификаторКонтейнера, ТранспортныйКонтейнер);
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьКонтейнерыКЗагрузке(РезультатПолученияДокументов, ДанныеКонтейнеров, КонтекстДиагностики,
	СпособОбмена, ИдентификаторЭДО)
	
	Если Не ЗначениеЗаполнено(ДанныеКонтейнеров) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыКонтейнеров = Новый Массив;
	Для Каждого КлючЗначение Из ДанныеКонтейнеров Цикл
		ИдентификаторыКонтейнеров.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТранспортныйКонтейнерЭДО.ВнешнийУИД
		|ИЗ
		|	Документ.ТранспортныйКонтейнерЭДО КАК ТранспортныйКонтейнерЭДО
		|ГДЕ
		|	ТранспортныйКонтейнерЭДО.ВнешнийУИД В (&ИдентификаторыКонтейнеров)
		|	И ТранспортныйКонтейнерЭДО.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Входящий)");
	Запрос.УстановитьПараметр("ИдентификаторыКонтейнеров", ИдентификаторыКонтейнеров);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеКонтейнеров.Удалить(Выборка.ВнешнийУИД);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДанныеКонтейнеров Цикл
		ОписаниеКонтейнера = КлючЗначение.Значение;
		КлючСинхронизации = СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации();
		КлючСинхронизации.СпособОбмена = СпособОбмена;
		КлючСинхронизации.ИдентификаторУчетнойЗаписи = ИдентификаторЭДО;
		РезультатСохраненияКонтейнера = ТранспортныеКонтейнерыЭДО.СохранитьКонтейнер(
			ОписаниеКонтейнера, КлючСинхронизации, КонтекстДиагностики);
		ТранспортныйКонтейнер = РезультатСохраненияКонтейнера.ТранспортныйКонтейнер;
		Если ЗначениеЗаполнено(ТранспортныйКонтейнер) Тогда
			РезультатПолученияДокументов.Контейнеры.Добавить(ТранспортныйКонтейнер);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьОшибкуТранспортаЧерезПрямойОбмен(Направление, ИдентификаторЭДО, КраткоеПредставление, ПодробноеПредставление, КонтекстДиагностики)
	
	Если Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
		ВидОперации  = НСтр("ru = 'Отправка транспортных контейнеров'");
		ШаблонТекста = НСтр("ru = 'Не удалось отправить транспортный контейнер по причине:'");
	Иначе
		ВидОперации  = НСтр("ru = 'Получение транспортных контейнеров'");
		ШаблонТекста = НСтр("ru = 'Не удалось получить транспортный контейнер по причине:'");
	КонецЕсли;
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
	ТекстОшибкиКратко = ШаблонТекста + Символы.ПС + КраткоеПредставление;
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(
		ВидОперации, ВидОшибки, ПодробноеПредставление, ТекстОшибкиКратко);
	Ошибка.УчетнаяЗапись = ИдентификаторЭДО;
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	
КонецПроцедуры

Процедура УстановитьПризнакОбработкиУчетнойЗаписиПрямогоОбмена(ИдентификаторЭДО, КонтекстДиагностики);
	
	Если Не КонтекстДиагностики.Свойство("ОбработанныеУчетныеЗаписиПрямогоОбмена") Тогда
		КонтекстДиагностики.Вставить("ОбработанныеУчетныеЗаписиПрямогоОбмена", Новый Соответствие);
	КонецЕсли;
	
	Если КонтекстДиагностики.ОбработанныеУчетныеЗаписиПрямогоОбмена[ИдентификаторЭДО] = Неопределено Тогда
		ОбработаннаяУчетнаяЗапись = ДиагностикаЭДОКлиентСервер.НовоеОписаниеОбработаннойУчетнойЗаписи(
			ИдентификаторЭДО);
		ОбработаннаяУчетнаяЗапись.ОтправкаПолучениеВыполнялись = Истина;
		КонтекстДиагностики.ОбработанныеУчетныеЗаписиПрямогоОбмена.Вставить(ИдентификаторЭДО, ОбработаннаяУчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьУчетнымиЗаписямиПрямогоОбмена(УчетныеЗаписи) 
	
	Если Не НастройкиЭДО.ИспользуетсяПрямойОбменЭлектроннымиДокументами() Тогда
		Возврат;
	КонецЕсли;
	
	Запросы = Новый Массив;
	
	ОтборУчетныхЗаписей = СинхронизацияЭДО.НовыйОтборУчетныхЗаписей();
	ОтборУчетныхЗаписей.СпособОбмена = "&СпособОбмена";
	ЗапросУчетныхЗаписей = СинхронизацияЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", ОтборУчетныхЗаписей);
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО
		|ИЗ
		|	УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("СпособОбмена", СинхронизацияЭДО.СпособыПрямогоОбмена());
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		УчетныеЗаписи.Добавить(ВыборкаДетальныеЗаписи.ИдентификаторЭДО);
	КонецЦикла;
	
КонецПроцедуры

#Область ПрямойОбменЧерезКаталогОбмена

Процедура ПолучитьНовыеЭДЧерезКаталогОбмена(РезультатПолученияДокументов, МассивРесурсов, КонтекстДиагностики, СпособОбмена)
	
	Если МассивРесурсов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого РесурсОбмена Из МассивРесурсов Цикл
		
		УстановитьПризнакОбработкиУчетнойЗаписиПрямогоОбмена(РесурсОбмена.ИдентификаторЭДО, КонтекстДиагностики);
		
		КаталогСФайлами = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			РесурсОбмена.КаталогОбмена, РесурсОбмена.АдресОтправителя);
		
		Попытка
			МассивФайлов = НайтиФайлы(КаталогСФайлами, "*.zip");
		Исключение
			ОбработатьОшибкуТранспортаЧерезПрямойОбмен(
				Перечисления.НаправленияЭДО.Входящий,
				РесурсОбмена.ИдентификаторЭДО,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				КонтекстДиагностики);
			Продолжить;
		КонецПопытки;
		
		ДанныеКонтейнеров = Новый Соответствие;
		
		Для Каждого Файл Из МассивФайлов Цикл
			ДанныеФайла = Новый ДвоичныеДанные(Файл.ПолноеИмя);
			Если ОбработатьФайлКонтейнера(ДанныеКонтейнеров, Файл.ИмяБезРасширения, ДанныеФайла) Тогда
				РаботаСФайламиБЭД.УдалитьВременныеФайлы(Файл.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
		
		ДобавитьКонтейнерыКЗагрузке(РезультатПолученияДокументов, ДанныеКонтейнеров, КонтекстДиагностики,
			СпособОбмена, РесурсОбмена.ИдентификаторЭДО);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтправитьКонтейнерЧерезКаталог(ПараметрыОтправки, КонтекстДиагностики)
	
	РезультатОтправки = Ложь;
	
	ОписаниеКонтейнера = ПараметрыОтправки.ДанныеДляОтправки;
	РеквизитыКонтейнера = ПараметрыОтправки.РеквизитыКонтейнера;
	АдресКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		РеквизитыКонтейнера.АдресРесурсаКонтрагента);
		
	Попытка
		КаталогНаДиске = Новый Файл(АдресКаталога);
		Если Не КаталогНаДиске.Существует() Тогда
			СоздатьКаталог(АдресКаталога);
		КонецЕсли;
		
		РаботаСФайламиБЭД.ЗаписатьДвоичныеДанные(ОписаниеКонтейнера.ДвоичныеДанные,
			АдресКаталога + ОписаниеКонтейнера.Наименование, КонтекстДиагностики);
		РезультатОтправки = Истина;
	Исключение
		ОбработатьОшибкуТранспортаЧерезПрямойОбмен(
			Перечисления.НаправленияЭДО.Исходящий,
			РеквизитыКонтейнера.Отправитель,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			КонтекстДиагностики);
	КонецПопытки;
	
	Возврат РезультатОтправки;
	
КонецФункции

#КонецОбласти

#Область ПрямойОбменЧерезЧерезFTP

Процедура ПолучитьНовыеЭДЧерезFTP(РезультатПолученияДокументов, МассивРесурсов, КонтекстДиагностики, СпособОбмена)
	
	Если МассивРесурсов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = НСтр("ru = 'Получение электронных документов'");
	
	Для Каждого РесурсОбмена Из МассивРесурсов Цикл
		
		УстановитьПризнакОбработкиУчетнойЗаписиПрямогоОбмена(РесурсОбмена.ИдентификаторЭДО, КонтекстДиагностики);
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(РесурсОбмена.ПутьFTP);
		
		РазделительПути = "/";
		Если СтрЗаканчиваетсяНа(СтруктураURI.ПутьНаСервере, РазделительПути) Тогда
			КаталогFTP = СтруктураURI.ПутьНаСервере + РесурсОбмена.АдресОтправителя;
		Иначе 
			КаталогFTP = СтруктураURI.ПутьНаСервере + РазделительПути + РесурсОбмена.АдресОтправителя;
		КонецЕсли;
		
		НастройкиFTP = НовыеНастройкиFTP(РесурсОбмена);
		
		Попытка
			FTPСоединение = НовоеFTPСоединение(НастройкиFTP);
			Если FTPСоединение.НайтиФайлы(КаталогFTP).Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			МассивФайлов = FTPСоединение.НайтиФайлы(КаталогFTP, "*.zip");
		Исключение
			ОбработатьОшибкуТранспортаЧерезПрямойОбмен(
				Перечисления.НаправленияЭДО.Входящий,
				РесурсОбмена.ИдентификаторЭДО,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				КонтекстДиагностики);
			Продолжить;
		КонецПопытки;
		
		ДанныеКонтейнеров = Новый Соответствие;
		
		Для Каждого Файл Из МассивФайлов Цикл
			
			ДанныеФайла = ДанныеФайлаFTP(FTPСоединение, Файл.ПолноеИмя, ВидОперации);
			Если ДанныеФайла = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОбработатьФайлКонтейнера(ДанныеКонтейнеров, Файл.ИмяБезРасширения, ДанныеФайла) Тогда
				УдалитьФайлFTP(FTPСоединение, Файл.ПолноеИмя, ВидОперации);
			КонецЕсли;
			
		КонецЦикла;
		
		ДобавитьКонтейнерыКЗагрузке(РезультатПолученияДокументов, ДанныеКонтейнеров, КонтекстДиагностики,
			СпособОбмена, РесурсОбмена.ИдентификаторЭДО);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтправитьКонтейнерЧерезFTP(ПараметрыОтправки, КонтекстДиагностики)
	
	РезультатОтправки = Ложь;
	
	ОписаниеКонтейнера = ПараметрыОтправки.ДанныеДляОтправки;
	РеквизитыКонтейнера = ПараметрыОтправки.РеквизитыКонтейнера;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(РеквизитыКонтейнера.АдресРесурсаКонтрагента);
	
	РазделительПути = "/";
	Если СтрЗаканчиваетсяНа(СтруктураURI.ПутьНаСервере, РазделительПути) Тогда
		КаталогFTP = СтруктураURI.ПутьНаСервере;
	Иначе 
		КаталогFTP = СтруктураURI.ПутьНаСервере + РазделительПути;
	КонецЕсли;
	
	Попытка
		FTPСоединение = ПараметрыОтправки.КэшFTPСоединений[РеквизитыКонтейнера.Отправитель];
		Если FTPСоединение = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
				|	УчетныеЗаписиЭДО.ПутьFTP КАК ПутьFTP,
				|	УчетныеЗаписиЭДО.ПортFTP КАК ПортFTP,
				|	УчетныеЗаписиЭДО.ПассивноеСоединениеFTP КАК ПассивноеСоединениеFTP
				|ИЗ
				|	УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО";
			
			Отбор = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
			Отбор.УчетныеЗаписи = "УчетныеЗаписи";
			Запросы = Новый Массив;
			Запросы.Добавить(УчетныеЗаписиЭДО.ЗапросНастроекУчетныхЗаписей("УчетныеЗаписиЭДО", Отбор));
			
			ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
			ИтоговыйЗапрос.УстановитьПараметр("УчетныеЗаписи", РеквизитыКонтейнера.Отправитель);
			РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				Возврат РезультатОтправки;
			КонецЕсли;
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			НастройкиFTP = НовыеНастройкиFTP(Выборка);
			FTPСоединение = НовоеFTPСоединение(НастройкиFTP);
			ПараметрыОтправки.КэшFTPСоединений.Вставить(РеквизитыКонтейнера.Отправитель, FTPСоединение);
		КонецЕсли;
		
		МассивФайлов = FTPСоединение.НайтиФайлы(КаталогFTP);
		
		Если МассивФайлов.Количество() = 0 Тогда
			FTPСоединение.СоздатьКаталог(КаталогFTP);
		КонецЕсли;
		
		Поток = ОписаниеКонтейнера.ДвоичныеДанные.ОткрытьПотокДляЧтения();
		FTPСоединение.Записать(КаталогFTP + ОписаниеКонтейнера.Наименование, Поток);
		Поток.Закрыть();
		РезультатОтправки = Истина;
	Исключение
		ОбработатьОшибкуТранспортаЧерезПрямойОбмен(
			Перечисления.НаправленияЭДО.Исходящий,
			РеквизитыКонтейнера.Отправитель,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			КонтекстДиагностики);
	КонецПопытки;
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция НовыеНастройкиFTP(ПараметрыУчетнойЗаписи, Таймаут = 30)
	
	Настройки = Новый Структура("Сервер, Порт, Логин, Пароль, Прокси,
		|ПассивноеСоединение, Таймаут, ЗащищенноеСоединение");
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыУчетнойЗаписи.ПутьFTP);
	
	Настройки.Сервер = СтруктураURI.ИмяСервера;
	
	Если ЗначениеЗаполнено(ПараметрыУчетнойЗаписи.ПортFTP) Тогда
		Настройки.Порт = ПараметрыУчетнойЗаписи.ПортFTP;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Настройки.Логин = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ПараметрыУчетнойЗаписи.ИдентификаторЭДО, "ЛогинFTP");
	Настройки.Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ПараметрыУчетнойЗаписи.ИдентификаторЭДО, "ПарольFTP");
	УстановитьПривилегированныйРежим(Ложь);
	
	Настройки.Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
	
	Настройки.ПассивноеСоединение = ПараметрыУчетнойЗаписи.ПассивноеСоединениеFTP;
	
	Настройки.Таймаут = Таймаут;
	
	Настройки.ЗащищенноеСоединение = ?(СтруктураURI.Схема = "ftps",
		ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(), Неопределено);
	
	Возврат Настройки;
	
КонецФункции

Функция НовоеFTPСоединение(НастройкиFTP)
	
	Возврат Новый FTPСоединение(
		НастройкиFTP.Сервер,
		НастройкиFTP.Порт,
		НастройкиFTP.Логин,
		НастройкиFTP.Пароль,
		НастройкиFTP.Прокси,
		НастройкиFTP.ПассивноеСоединение,
		НастройкиFTP.Таймаут,
		НастройкиFTP.ЗащищенноеСоединение);
	
КонецФункции

Функция ДанныеФайлаFTP(FTPСоединение, АдресРесурса, ВидОперации)
	
	Поток = Новый ПотокВПамяти;
	
	Попытка
		FTPСоединение.Получить(АдресРесурса, Поток);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось получить файл %1 через ftp по причине:'"), АдресРесурса)
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстОшибки);
		
		Поток.Закрыть();
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

Процедура УдалитьФайлFTP(FTPСоединение, АдресРесурса, ВидОперации)
	
	Попытка
		FTPСоединение.Удалить(АдресРесурса);
	Исключение
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПрямойОбменЧерезЭлектроннуюПочту

Процедура ПолучитьНовыеЭДЧерезЭлектроннуюПочту(РезультатПолученияДокументов, МассивРесурсов, КонтекстДиагностики,
	СпособОбмена)
	
	Если МассивРесурсов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого РесурсОбмена Из МассивРесурсов Цикл
		
		УстановитьПризнакОбработкиУчетнойЗаписиПрямогоОбмена(РесурсОбмена.ИдентификаторЭДО, КонтекстДиагностики);
		
		Попытка
			НаборСообщений = ЗагрузитьПочтовыеСообщенияПоЭДО(РесурсОбмена);
		Исключение
			ОбработатьОшибкуТранспортаЧерезПрямойОбмен(
				Перечисления.НаправленияЭДО.Входящий,
				РесурсОбмена.ИдентификаторЭДО,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				КонтекстДиагностики);
			Продолжить;
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(НаборСообщений) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеКонтейнеров = Новый Соответствие;
		
		Для Каждого Сообщение Из НаборСообщений Цикл
			
			Если Сообщение.Вложения.Количество() <> 1
				ИЛИ Сообщение.Вложения[0].ТипСодержимого <> "application/zip" Тогда
				Продолжить;
			КонецЕсли;
			
			Вложение = Сообщение.Вложения[0];
			Файл = Новый Файл(Вложение.ИмяФайла);
			ОбработатьФайлКонтейнера(ДанныеКонтейнеров, Файл.ИмяБезРасширения,
				Вложение.Данные, Сообщение.Отправитель.Адрес);
			
		КонецЦикла;
		
		ДобавитьКонтейнерыКЗагрузке(РезультатПолученияДокументов, ДанныеКонтейнеров, КонтекстДиагностики,
			СпособОбмена, РесурсОбмена.ИдентификаторЭДО);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтправитьКонтейнерЧерезЭлектроннуюПочту(ПараметрыОтправки, КонтекстДиагностики)
	
	РезультатОтправки = Ложь;
	
	ОписаниеКонтейнера = ПараметрыОтправки.ДанныеДляОтправки;
	РеквизитыКонтейнера = ПараметрыОтправки.РеквизитыКонтейнера;
	
	Вложения = Новый Массив;
	ОписаниеВложения = Новый Структура;
	ОписаниеВложения.Вставить("Представление", ОписаниеКонтейнера.Наименование);
	ОписаниеВложения.Вставить("АдресВоВременномХранилище",
		ПоместитьВоВременноеХранилище(ОписаниеКонтейнера.ДвоичныеДанные));
	Вложения.Добавить(ОписаниеВложения);
	
	Тема = СтрШаблон(НСтр("ru = 'Обмен эл.документами: %1 -> %2'"),
		РеквизитыКонтейнера.Отправитель, РеквизитыКонтейнера.Получатель);
	
	ПараметрыПисьма = Новый Структура();
	ПараметрыПисьма.Вставить("Кому",     РеквизитыКонтейнера.АдресРесурсаКонтрагента);
	ПараметрыПисьма.Вставить("Тема",     Тема);
	ПараметрыПисьма.Вставить("Тело",     );
	ПараметрыПисьма.Вставить("Вложения", Вложения);
	
	Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(РеквизитыКонтейнера.АдресРесурсаОрганизации, ПараметрыПисьма);
	
	Попытка
		РаботаСПочтовымиСообщениями.ОтправитьПисьмо(РеквизитыКонтейнера.АдресРесурсаОрганизации, Письмо);
		РезультатОтправки = Истина;
	Исключение
		ОбработатьОшибкуТранспортаЧерезПрямойОбмен(
			Перечисления.НаправленияЭДО.Исходящий,
			РеквизитыКонтейнера.Отправитель,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			КонтекстДиагностики);
	КонецПопытки;
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция ЗагрузитьПочтовыеСообщенияПоЭДО(РесурсОбмена)
	
	ОтправителиДляОбработки = НастройкиЭДО.АдресаПолучателейПочтовыхСообщений(РесурсОбмена.ИдентификаторЭДО);
	Если Не ЗначениеЗаполнено(ОтправителиДляОбработки) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ПараметрыЗагрузкиЗаголовков = Новый Структура;
	ПараметрыЗагрузкиЗаголовков.Вставить("ПолучениеЗаголовков", Истина);
	ПараметрыЗагрузкиЗаголовков.Вставить("ПриводитьСообщенияКТипу", Ложь);
	
	НаборСообщений = РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения(
		РесурсОбмена.УчетнаяЗаписьЭлектроннойПочты, ПараметрыЗагрузкиЗаголовков);
	
	Если Не ЗначениеЗаполнено(НаборСообщений) Тогда
		Возврат НаборСообщений;
	КонецЕсли;
	
	ИдентификаторыСообщений = Новый Массив;
	
	Для Каждого Сообщение Из НаборСообщений Цикл
		
		АдресОтправителя = НРег(?(ТипЗнч(Сообщение.Отправитель) = Тип("Строка"),
			Сообщение.Отправитель, Сообщение.Отправитель.Адрес));
		
		Если ОтправителиДляОбработки[АдресОтправителя] <> Неопределено
			И СтрНайти(Сообщение.Тема, НСтр("ru = 'Обмен эл.документами:'"))
			И СтрНайти(Сообщение.Тема, РесурсОбмена.ИдентификаторЭДО) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыСообщений, Сообщение.Идентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИдентификаторыСообщений.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ПараметрыЗагрузкиЗаголовков.Вставить("ПолучениеЗаголовков", Ложь);
	ПараметрыЗагрузкиЗаголовков.Вставить("ЗаголовкиИдентификаторы", ИдентификаторыСообщений);
	
	НаборСообщений = РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения(
		РесурсОбмена.УчетнаяЗаписьЭлектроннойПочты, ПараметрыЗагрузкиЗаголовков);
	
	Возврат НаборСообщений
	
КонецФункции

#КонецОбласти

#КонецОбласти

// Получить новые электронные документы от оператора ЭДО.
//
// Параметры:
//  Результат - см. НовыйРезультатПолученияДокументов
//  КлючиСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  РезультатыОтправкиПолучения - см. СинхронизацияЭДОСлужебныйКлиент.НовыеРезультатыОтправкиПолучения
//
Процедура ПолучитьНовыеЭлектронныеДокументыЧерезОператораЭДО(
			Результат,
			КлючиСинхронизации,
			КонтекстДиагностики,
			РезультатыОтправкиПолучения)
	
	Если Не ЗначениеЗаполнено(КлючиСинхронизации) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыУчетныхЗаписей = Новый Массив;
	Для Каждого КлючИЗначение Из КлючиСинхронизации Цикл
		ИдентификаторыУчетныхЗаписей.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ДатыПолучения = СинхронизацияЭДО.ДатыЗапросаДанныхОператораЭДО(ИдентификаторыУчетныхЗаписей,
		СинхронизацияЭДО.ТипДанныхЗапросаОператораЭДОДокументы());
	
	Для Каждого КлючИЗначение Из КлючиСинхронизации Цикл
		ИстекСрокДействияМаркера = Ложь;
		КлючСинхронизации = КлючИЗначение.Значение;
		ИдентификаторОрганизации = КлючСинхронизации.ИдентификаторУчетнойЗаписи;
		
		Если Не ЗначениеЗаполнено(КлючСинхронизации.МаркерРасшифрованный) Тогда
			Результат.УчетныеЗаписиДляПовторнойОбработки.Вставить(КлючСинхронизации.ИдентификаторУчетнойЗаписи, Истина);
			Продолжить;
		КонецЕсли;
		ДатаПолученияЭДИзНастройки = ДатыПолучения[ИдентификаторОрганизации].ДатаПолучения;
		ПроверочнаяДатаПолученияЭД = ДатыПолучения[ИдентификаторОрганизации].ПроверочнаяДатаПолучения;
			
		ПараметрыПолучения = Новый Структура;
		ПараметрыПолучения.Вставить("СдвигатьДату", Истина);
		ПараметрыПолучения.Вставить("НеЗагружено", Новый Массив);
		ПараметрыПолучения.Вставить("КлючСинхронизации", КлючСинхронизации);
		ПолученыВсеДокументы = Ложь;
		ОбновитьИнформациюОбАктивностиУчетнойЗаписи(ИдентификаторОрганизации, КонтекстДиагностики);
		
		ДатаПоследнегоЗапроса = ДатаПолученияЭДИзНастройки;
		ДатаПолученияЭД = 0;
		НеЗагружено = Новый Массив;
		Пока Не ПолученыВсеДокументы Цикл
			
			Если Результат.УчетныеЗаписиСПросроченнымМаркером[КлючСинхронизации.ИдентификаторУчетнойЗаписи] <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			РезультатПолученияДокументов = ПолучитьОписаниеДокументов(КлючСинхронизации, ДатаПоследнегоЗапроса,
				КонтекстДиагностики, ИстекСрокДействияМаркера);
			
			Если ИстекСрокДействияМаркера Тогда
				Результат.УчетныеЗаписиДляПовторнойОбработки.Вставить(КлючСинхронизации.ИдентификаторУчетнойЗаписи, Истина);
				Результат.УчетныеЗаписиСПросроченнымМаркером.Вставить(КлючСинхронизации.ИдентификаторУчетнойЗаписи, Истина);
			КонецЕсли;
			
			ВсеДокументы = РезультатПолученияДокументов.ВсеДокументы;
			Если ВсеДокументы.Количество() = 0 Тогда
				ПолученыВсеДокументы = Истина;
				Прервать;
			КонецЕсли;
			
			Отбор = Новый Структура;
			Отбор.Вставить("ИДПакета", "");
			ДокументыВнеПакетов = РезультатПолученияДокументов.НеЗагруженныеВБазуДокументы.Скопировать(Отбор);
			ПолучитьДокументы(ДокументыВнеПакетов, КонтекстДиагностики,
				ИстекСрокДействияМаркера, Результат, РезультатыОтправкиПолучения, ПараметрыПолучения);
			
			ИдентификаторыПакетов = РезультатПолученияДокументов.НеЗагруженныеВБазуДокументы.Скопировать(, "ИДПакета");
			ИдентификаторыПакетов.Свернуть("ИДПакета");
			ИдентификаторыПакетов = ИдентификаторыПакетов.ВыгрузитьКолонку("ИДПакета");
			Для Каждого ИдентификаторПакета Из ИдентификаторыПакетов Цикл
				Если Не ЗначениеЗаполнено(ИдентификаторПакета) Тогда
					Продолжить;
				КонецЕсли;
				Отбор = Новый Структура;
				Отбор.Вставить("ИДПакета", ИдентификаторПакета);
				ТранспортныеКонтейнерыПакета = РезультатПолученияДокументов.НеЗагруженныеВБазуДокументы.Скопировать(Отбор);
				ЗагруженыВсеКонтейнеры = Истина;
				Для Каждого ТранспортныйКонтейнер Из ТранспортныеКонтейнерыПакета Цикл
					ДвоичныеДанныеТранспортногоКонтейнера = СервисЭДО.ПолучитьДокумент(КлючСинхронизации,
						ТранспортныйКонтейнер, КонтекстДиагностики, ИстекСрокДействияМаркера);
					ТранспортныйКонтейнер.ДвоичныеДанные = ДвоичныеДанныеТранспортногоКонтейнера;
					Если Не ЗначениеЗаполнено(ДвоичныеДанныеТранспортногоКонтейнера) Тогда
						ЗагруженыВсеКонтейнеры = Ложь;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ЗагруженыВсеКонтейнеры Тогда
					Продолжить;
				КонецЕсли;
				
				НачатьТранзакцию();
				Попытка
					ПолучитьДокументы(ТранспортныеКонтейнерыПакета, КонтекстДиагностики,
						ИстекСрокДействияМаркера, Результат, РезультатыОтправкиПолучения, ПараметрыПолучения);
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Получение транспортных контейнеров пакета электронных документов'",
							ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ВызватьИсключение;
				КонецПопытки;
			КонецЦикла;
			
			// Подтверждение получения электронных документов
			Для каждого СтрокаДокумента Из ВсеДокументы Цикл
				Если ПараметрыПолучения.НеЗагружено.Найти(СтрокаДокумента.ИДДокумента) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СервисЭДО.ПодтвердитьПолучениеСообщения(КлючСинхронизации, СтрокаДокумента.ИДДокумента, КонтекстДиагностики);
			КонецЦикла;

			Если ПараметрыПолучения.СдвигатьДату И ЗначениеЗаполнено(ДатаПоследнегоЗапроса)
				И ВсеДокументы.Количество() > 0 Тогда
				ДатаПолученияЭД = ДатаПоследнегоЗапроса;
				СинхронизацияЭДО.ИзменитьСостояниеОбмена(ИдентификаторОрганизации, "ДатаПолученияДокументов", ДатаПолученияЭД);
			КонецЕсли;

		КонецЦикла;
		
		Если Не ИстекСрокДействияМаркера Тогда
			ДатаУспешногоПолученияЭД = ?(ЗначениеЗаполнено(ДатаПолученияЭД), ДатаПолученияЭД, ДатаПолученияЭДИзНастройки);
			ПроверитьНеполученныеДокументы(КлючСинхронизации, КонтекстДиагностики,
				ДатаПолученияЭДИзНастройки, ДатаУспешногоПолученияЭД, ПроверочнаяДатаПолученияЭД, НеЗагружено);
		КонецЕсли;
		
		Если ПолученыВсеДокументы И КлючСинхронизации.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
			Результат.УчетныеЗаписи1СЭДОПолученыВсеДокументы.Добавить(
				КлючСинхронизации.ИдентификаторУчетнойЗаписи);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗагрузкаДокументаВозможна(ДокументДляЗагрузки, ИдентификаторОрганизации, КонтекстДиагностики)
	
	ЗагрузкаВозможна = Истина;
	Если Не ЗначениеЗаполнено(ДокументДляЗагрузки.ИДДокумента) Тогда

		ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
		ШаблонТехническихДанных = НСтр("ru = 'Документооборот: %1; Код регламента: %2; Код транзакции: %3'");
		ТекстТехническихДанных = СтрШаблон(ШаблонТехническихДанных, ДокументДляЗагрузки.ИДДокументооборота,
			ДокументДляЗагрузки.КодРегламента, ДокументДляЗагрузки.КодТранзакции);
		ТекстЗаголовка = НСтр("ru = 'Получение транспортного контейнера ЭДО'");
		ТекстСообщенияКратко = СтрШаблон(НСтр("ru = 'Получение транспортного контейнер по учетной записи ЭДО: %1'"), ИдентификаторОрганизации)
			+ Символы.ПС
			+ НСтр("ru = 'Невозможно получить транспортный контейнер без идентификатора.'");
		ТекстСообщенияПодробно = ТекстСообщенияКратко + Символы.ПС
			+ ТекстТехническихДанных;
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ТекстЗаголовка, ВидОшибки, ТекстСообщенияПодробно, ТекстСообщенияКратко);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		ЗагрузкаВозможна = Ложь;

	КонецЕсли;
	
	Возврат ЗагрузкаВозможна;
	
КонецФункции

Функция ПолучитьОписаниеДокументов(КлючСинхронизации, ДатаПоследнегоЗапроса, КонтекстДиагностики, ПовторноеПолучение = Ложь)
	
	РезультатПолучения = СервисЭДО.ПолучитьДокументы(КлючСинхронизации, ДатаПоследнегоЗапроса,
		КонтекстДиагностики, ПовторноеПолучение);
	
	ДокументыВСервисе = РезультатПолучения.ЭлектронныеДокументы;
	ДатаПоследнегоЗапроса = РезультатПолучения.ДатаПоследнегоЗапроса;
	
	ДокументыДляЗагрузки = ИсключитьЗагруженныеКонтейнеры(ДокументыВСервисе);
	
	Результат = Новый Структура;
	Результат.Вставить("ВсеДокументы", ДокументыВСервисе);
	Результат.Вставить("НеЗагруженныеВБазуДокументы", ДокументыДляЗагрузки);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьНеполученныеДокументы(КлючСинхронизации, КонтекстДиагностики,
	ДатаПолученияЭДИзНастройки, ДатаУспешногоПолученияЭД, ПроверочнаяДатаПолученияЭДИзНастройки, НезагруженныеИдентификаторы)
	
	ИдентификаторОрганизации = КлючСинхронизации.ИдентификаторУчетнойЗаписи;
	Если Не ЗначениеЗаполнено(ДатаПолученияЭДИзНастройки) И ЗначениеЗаполнено(ДатаУспешногоПолученияЭД) Тогда
		Если ПроверочнаяДатаПолученияЭДИзНастройки <> ДатаУспешногоПолученияЭД Тогда
			СинхронизацияЭДО.ИзменитьСостояниеОбмена(ИдентификаторОрганизации, "ПроверочнаяДатаПолученияДокументов", ДатаУспешногоПолученияЭД);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ДатаПолученияЭДИзНастройки = ПроверочнаяДатаПолученияЭДИзНастройки И ЗначениеЗаполнено(ДатаУспешногоПолученияЭД) Тогда
		Если ПроверочнаяДатаПолученияЭДИзНастройки <> ДатаУспешногоПолученияЭД Тогда
			СинхронизацияЭДО.ИзменитьСостояниеОбмена(ИдентификаторОрганизации, "ПроверочнаяДатаПолученияДокументов", ДатаУспешногоПолученияЭД);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПроверочнаяДатаПолученияЭД = Макс(ПроверочнаяДатаПолученияЭДИзНастройки,
		ДатаПолученияЭДИзНастройки - 1000 * 60 * 60 * 24 * 30); // вычитаем условный месяц в миллисекундах
	
	ДатаПоследнегоЗапроса = ПроверочнаяДатаПолученияЭД;
	РезультатПолученияДокументов = ПолучитьОписаниеДокументов(КлючСинхронизации, ДатаПоследнегоЗапроса, КонтекстДиагностики);
	Если РезультатПолученияДокументов.ВсеДокументы.Количество() = 0 Тогда
		ЕстьДокументы = Ложь;
	Иначе
		НеЗагруженныеВБазуДокументы = РезультатПолученияДокументов.НеЗагруженныеВБазуДокументы;
		Для каждого Идентификатор Из НезагруженныеИдентификаторы Цикл
			Отбор = Новый Структура("ИдДокумента", Идентификатор);
			СтрокиКУдалению = НеЗагруженныеВБазуДокументы.НайтиСтроки(Отбор);
			Для каждого СтрокаТЗ Из СтрокиКУдалению Цикл
				НеЗагруженныеВБазуДокументы.Удалить(СтрокаТЗ);
			КонецЦикла;
		КонецЦикла;
		ЕстьДокументы = НеЗагруженныеВБазуДокументы.Количество() > 0;
	КонецЕсли;
	
	Если ЕстьДокументы Тогда
		ОбработатьОшибкуНеполученныхДокументов(ИдентификаторОрганизации, ДатаУспешногоПолученияЭД, ПроверочнаяДатаПолученияЭД, КонтекстДиагностики);
	ИначеЕсли ПроверочнаяДатаПолученияЭДИзНастройки <> ДатаУспешногоПолученияЭД Тогда 
		СинхронизацияЭДО.ИзменитьСостояниеОбмена(ИдентификаторОрганизации, "ПроверочнаяДатаПолученияДокументов", ДатаУспешногоПолученияЭД);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьОшибкуЗагрузкиДокумента(ДокументДляЗагрузки, КонтекстДиагностики,
	ПодробноеПредставлениеОшибки, ТекстОшибки = "")
	
	ВидОперации = НСтр("ru = 'Получение транспортного контейнера ЭДО'");
	ВидОшибки = СинхронизацияЭДОКлиентСервер.ВидОшибкиПовторноеПолучениеКонтейнера();
	ТекстСообщения = НСтр("ru = 'Не удалось сохранить транспортный контейнер с идентификатором:'")
		+ " " + ДокументДляЗагрузки.ИДДокумента;
	ТекстОшибки = ТекстСообщения + Символы.ПС + НСтр("ru = 'По причине:'")
		+ Символы.ПС + ПодробноеПредставлениеОшибки
		+ Символы.ПС
		+ НСтр("ru = 'Для повторного получения контейнера следует обратиться в тех. поддержку 1С-ЭДО, указав идентификатор электронного документа.'");
	ДополнительныеСвойстваОшибки = ДиагностикаЭДОКлиентСервер.НовыеДополнительныеСвойстваОшибки();
	ДополнительныеСвойстваОшибки.ИдентификаторДокумента = ДокументДляЗагрузки.ИДДокумента;
	ДополнительныеПараметрыОшибки = Новый Структура;
	ДополнительныеПараметрыОшибки.Вставить("ДополнительныеДанные", ДополнительныеСвойстваОшибки);
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки, ТекстСообщения, ДополнительныеПараметрыОшибки);
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	
КонецПроцедуры

Процедура ОбработатьОшибкуНеполученныхДокументов(ИдентификаторОрганизации, ДатаУспешногоПолученияЭД, ПроверочнаяДатаПолученияЭД, КонтекстДиагностики)
	
	КраткийТекстОшибки = НСтр("ru = 'Имеются неполученные документы, ограниченные датой запроса данных у оператора ЭДО'");
	ПодробныйТекстОшибки = КраткийТекстОшибки + Символы.ПС
		+ НСтр("ru = 'Для получения документов измените начальную дату запроса в настройках учетной записи'");
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("ПроверочнаяДатаПолученияЭД", ПроверочнаяДатаПолученияЭД);
	ДополнительныеДанные.Вставить("ДатаПроверки", ДатаУспешногоПолученияЭД);
	ДополнительныеПараметрыОшибки = Новый Структура;
	ДополнительныеПараметрыОшибки.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Получение электронных документов'"),
		СинхронизацияЭДО.ВидОшибкиЕстьНеполученныеЭлектронныеДокументы(),
		КраткийТекстОшибки,
		ПодробныйТекстОшибки,
		ДополнительныеПараметрыОшибки);
	Ошибка.УчетнаяЗапись = ИдентификаторОрганизации;
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	
КонецПроцедуры

Функция ИсключитьЗагруженныеКонтейнеры(ТаблицаИДДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИДДокументов.ИДПакета КАК ИДПакета,
	|	ТаблицаИДДокументов.ИДДокументооборота КАК ИДДокументооборота,
	|	ТаблицаИДДокументов.КодТранзакции КАК КодТранзакции,
	|	ТаблицаИДДокументов.КодРегламента КАК КодРегламента,
	|	ТаблицаИДДокументов.ИДДокумента КАК ИДДокумента,
	|	ТаблицаИДДокументов.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ВТ_ТаблицаИДДокументов
	|ИЗ
	|	&ТаблицаИДДокументов КАК ТаблицаИДДокументов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИДДокумента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаИДДокументов.ИДПакета КАК ИДПакета,
	|	ВТ_ТаблицаИДДокументов.ИДДокументооборота КАК ИДДокументооборота,
	|	ВТ_ТаблицаИДДокументов.КодТранзакции КАК КодТранзакции,
	|	ВТ_ТаблицаИДДокументов.КодРегламента КАК КодРегламента,
	|	ВТ_ТаблицаИДДокументов.ИДДокумента КАК ИДДокумента,
	|	ВТ_ТаблицаИДДокументов.Приоритет КАК Приоритет
	|ИЗ
	|	ВТ_ТаблицаИДДокументов КАК ВТ_ТаблицаИДДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
	|		ПО ВТ_ТаблицаИДДокументов.ИДДокумента = ТранспортныеКонтейнеры.ВнешнийУИД
	|ГДЕ
	|	ТранспортныеКонтейнеры.Ссылка ЕСТЬ NULL";
	
	Отбор = ТранспортныеКонтейнерыЭДО.НовыйОтборВходящихКонтейнеров();
	Отбор.ВнешнийИдентификатор = "ВнешнийИдентификатор";
	Запросы = Новый Массив;
	Запросы.Добавить(ТранспортныеКонтейнерыЭДО.ЗапросВходящихКонтейнеров(
		"ТранспортныеКонтейнеры", Отбор));
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	ТаблицаИДДокументовКопия = ТаблицаИДДокументов.Скопировать(,
		"ИДПакета, ИДДокументооборота, КодТранзакции, КодРегламента, ИДДокумента, Приоритет");
	
	ИтоговыйЗапрос.УстановитьПараметр("ТаблицаИДДокументов", ТаблицаИДДокументовКопия);
	ИтоговыйЗапрос.УстановитьПараметр("ВнешнийИдентификатор", ТаблицаИДДокументовКопия.ВыгрузитьКолонку("ИДДокумента"));
	
	УстановитьПривилегированныйРежим(Истина);
	СписокДокументов = ИтоговыйЗапрос.Выполнить().Выгрузить();
	СписокДокументов.Сортировать("ИДПакета, Приоритет");
	СписокДокументов.Колонки.Добавить("ДвоичныеДанные");
	
	Возврат СписокДокументов;
	
КонецФункции

// Отправляет транспортные контейнеры.
//
// Параметры:
//  ТранспортныеКонтейнеры - Массив из ДокументСсылка.ТранспортныйКонтейнерЭДО - отправляемые контейнеры
//  КлючиСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  РезультатыОтправкиПолучения - см. СинхронизацияЭДОСлужебныйКлиент.НовыеРезультатыОтправкиПолучения
//  ПовторнаяОтправка - Булево - требуется повторная отправка.
//  ДополнительныеПараметры - Произвольный
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   *Ключ - ДокументСсылка.ТранспортныйКонтейнерЭДО
//   *Значение - см. НовыйРезультатОтправкиТранспортногоКонтейнера
Функция ОтправитьТранспортныеКонтейнеры(ТранспортныеКонтейнеры, КлючиСинхронизации, КонтекстДиагностики,
	РезультатыОтправкиПолучения = Неопределено, ПовторнаяОтправка = Ложь,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КэшFTPСоединений = Новый Соответствие;
	
	ТекстСообщения = "";
	
	ОбъектыКонтейнеров = ТранспортныеКонтейнерыЭДО.ОбъектыКонтейнеров(ТранспортныеКонтейнеры);
	Результат = Новый Соответствие;
	Для Каждого ТранспортныйКонтейнер Из ТранспортныеКонтейнеры Цикл
		// Если электронный документ по каким-то причинам отправлен быть не может,
		// то не надо приостанавливать всю цепочку.
		КонтейнерОтправлен = Ложь;
		Попытка
			
			РеквизитыКонтейнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТранспортныйКонтейнер,
				"СпособОбменаЭД, Отправитель, Получатель, АдресРесурсаКонтрагента, АдресРесурсаОрганизации");
			
			ТипОтправки = РеквизитыКонтейнера.СпособОбменаЭД;
			ДанныеДляОтправки = СформироватьДанныеДляОтправки(ТранспортныйКонтейнер);
			Если ДанныеДляОтправки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыОтправки = Новый Структура;
			ПараметрыОтправки.Вставить("ТранспортныйКонтейнер", ТранспортныйКонтейнер);
			ПараметрыОтправки.Вставить("РеквизитыКонтейнера", РеквизитыКонтейнера);
			ПараметрыОтправки.Вставить("ДанныеДляОтправки", ДанныеДляОтправки);
			ПараметрыОтправки.Вставить("КлючиСинхронизации", КлючиСинхронизации);
			ПараметрыОтправки.Вставить("ПовторнаяОтправка", ПовторнаяОтправка);
			ПараметрыОтправки.Вставить("КэшFTPСоединений",  КэшFTPСоединений);
			
			Если СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ТипОтправки) Тогда
				РезультатОтправкиКонтейнера = ОтправитьКонтейнерЧерезОператораЭДО(ПараметрыОтправки, КонтекстДиагностики);
				ПовторнаяОтправка = ПараметрыОтправки.ПовторнаяОтправка;
			ИначеЕсли ЭтоПрямойОбмен(ТипОтправки) Тогда
				РезультатОтправкиКонтейнера = ОтправитьКонтейнерЧерезПрямойОбмен(ПараметрыОтправки, КонтекстДиагностики);
			КонецЕсли;
			
			КонтейнерОтправлен = РезультатОтправкиКонтейнера.Успех;
			
			Результат.Вставить(ТранспортныйКонтейнер, РезультатОтправкиКонтейнера);
			
			Для Каждого ОбъектКонтейнера Из ОбъектыКонтейнеров[ТранспортныйКонтейнер] Цикл
				ЗафиксироватьРезультатОправкиПолучения(РезультатыОтправкиПолучения, ОбъектКонтейнера,
					КонтейнерОтправлен, ТекстСообщения);
			КонецЦикла;
			
			Для Каждого ОбъектКонтейнера Из ОбъектыКонтейнеров[ТранспортныйКонтейнер] Цикл
				Если РезультатОтправкиКонтейнера.ОшибкаПередачи = Неопределено Тогда
					Отказ = Ложь;
				Иначе
					Отказ = СервисЭДО.ЭтоКодОшибкиПросроченногоМаркера(РезультатОтправкиКонтейнера.ОшибкаПередачи.Код)
						Или СервисЭДО.ЭтоКодНеизвестнойОшибки(РезультатОтправкиКонтейнера.ОшибкаПередачи.Код);
				КонецЕсли;
				СинхронизацияЭДОСобытия.ПослеОтправкиОбъекта(ОбъектКонтейнера,
					ТранспортныйКонтейнер, РезультатОтправкиКонтейнера.ОшибкаПередачи, КонтекстДиагностики,
					Отказ, ДополнительныеПараметры);
			КонецЦикла;
			
			Если Не КонтейнерОтправлен Тогда
				Продолжить;
			КонецЕсли;
				
			// статистика по отправленным документам
			КоличествоЭД = 0;
			Для Каждого ОбъектКонтейнера Из ОбъектыКонтейнеров[ТранспортныйКонтейнер] Цикл
				Если Не ЭлектронныеДокументыЭДО.ЭтоСлужебныйСообщение(ОбъектКонтейнера) Тогда
					КоличествоЭД = КоличествоЭД + 1;
				КонецЕсли;
			КонецЦикла;
			Если КоличествоЭД Тогда
				ЗаписатьСтатистикуПоДокументообороту(ТипОтправки, РеквизитыКонтейнера.Отправитель,
					"Отправлено", КоличествоЭД);
			КонецЕсли;
			// конец статистика по отправленным документам
			
		Исключение
			
			ШаблонСообщения = НСтр("ru = 'Ошибка отправки транспортного контейнера ЭДО по учетной записи: %1, способ обмена: %2
									|%3'");
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				РеквизитыКонтейнера.Отправитель, РеквизитыКонтейнера.СпособОбменаЭД, КраткоеПредставлениеОшибки);
			ШаблонВидаОперации = НСтр("ru = 'Отправка транспортного контейнера ЭДО по учетной записи: %1, способ обмена %2'");
			ВидОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонВидаОперации, РеквизитыКонтейнера.Отправитель, РеквизитыКонтейнера.СпособОбменаЭД);
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ДополнительныеПараметрыОшибки = Новый Структура;
			ДополнительныеПараметрыОшибки.Вставить("СсылкаНаОбъект", ТранспортныйКонтейнер);
			
			Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
				ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ПодробноеПредставлениеОшибки,
				ТекстСообщения, ДополнительныеПараметрыОшибки);
			ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		КонецПопытки;
		
		Для Каждого ОбъектКонтейнера Из ОбъектыКонтейнеров[ТранспортныйКонтейнер] Цикл
			ЗафиксироватьРезультатОправкиПолучения(РезультатыОтправкиПолучения, ОбъектКонтейнера,
				КонтейнерОтправлен, ТекстСообщения);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДанныеДляОтправки(ТранспортныйКонтейнер)
	
	ОписаниеКонтейнера = Неопределено;
	ПрисоединенныеФайлыКонтейнеров = ТранспортныеКонтейнерыЭДО.ПрисоединенныеФайлыКонтейнеров(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТранспортныйКонтейнер));
	ПрисоединенныеФайлыКонтейнера = ПрисоединенныеФайлыКонтейнеров[ТранспортныйКонтейнер];
	Если ПрисоединенныеФайлыКонтейнера <> Неопределено И ПрисоединенныеФайлыКонтейнера.Количество() Тогда
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныеФайлыКонтейнера[0]);
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ОписаниеКонтейнера = НовоеОписаниеТранспортногоКонтейнера();
		ОписаниеКонтейнера.Наименование = ДанныеФайла.ИмяФайла;
		ОписаниеКонтейнера.ДвоичныеДанные = ДвоичныеДанные;
		ОписаниеКонтейнера.Ссылка = ТранспортныйКонтейнер;
	КонецЕсли;
	
	Возврат ОписаниеКонтейнера;
	
КонецФункции

Функция ОтправитьКонтейнерЧерезОператораЭДО(ПараметрыОтправки, КонтекстДиагностики)
	
	Результат = НовыйРезультатОтправкиТранспортногоКонтейнера();
	
	ТранспортныйКонтейнер = ПараметрыОтправки.ТранспортныйКонтейнер;
	РеквизитыКонтейнера = ПараметрыОтправки.РеквизитыКонтейнера;
	ОписаниеКонтейнера = ПараметрыОтправки.ДанныеДляОтправки;
	КлючиСинхронизации = ПараметрыОтправки.КлючиСинхронизации;
	
	МассивУчетныхЗаписейЭДО = Новый Массив;
	МассивУчетныхЗаписейЭДО.Добавить(РеквизитыКонтейнера.Отправитель);
	
	СинхронизацияЭДОКлиентСервер.УстановитьТекущуюУчетнуюЗапись(КонтекстДиагностики, РеквизитыКонтейнера.Отправитель);
	КлючСинхронизации = КлючиСинхронизации[ВРег(РеквизитыКонтейнера.Отправитель)];
	
	Если КлючСинхронизации = Неопределено Тогда
		Результат.Успех = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КлючСинхронизации.МаркерРасшифрованный) Тогда
		Результат.Успех = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	ИстекСрокДействияМаркера = Неопределено;
	РезультатОтправки = СервисЭДО.ОтправитьКонтейнер(КлючСинхронизации, ОписаниеКонтейнера, КонтекстДиагностики,
		ИстекСрокДействияМаркера);
	
	Результат.ОшибкаПередачи = РезультатОтправки.Ошибка;
	
	Если Не РезультатОтправки.Успех Тогда
		ВидОперации = НСтр("ru = 'Отправка транспортного контейнера ЭДО'");
		ШаблонСообщения = НСтр("ru = 'Не удалось отправить оператору ЭДО ""%1"".'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТранспортныйКонтейнер);
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ТекстСообщения, ТекстСообщения);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		Результат.Успех = Ложь;
		Возврат Результат;
	Иначе
		Результат.Успех = Истина;
		ОбновитьИнформациюОбАктивностиУчетнойЗаписи(РеквизитыКонтейнера.Отправитель, КонтекстДиагностики);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьКонтейнерЧерезПрямойОбмен(ПараметрыОтправки, КонтекстДиагностики)
	
	КонтейнерОтправлен = Ложь;
	СпособОбмена = ПараметрыОтправки.РеквизитыКонтейнера.СпособОбменаЭД;
	
	УстановитьПризнакОбработкиУчетнойЗаписиПрямогоОбмена(
		ПараметрыОтправки.РеквизитыКонтейнера.Отправитель, КонтекстДиагностики);
	
	Если СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
		
		КонтейнерОтправлен = ОтправитьКонтейнерЧерезКаталог(ПараметрыОтправки, КонтекстДиагностики);
		
	ИначеЕсли СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		
		КонтейнерОтправлен = ОтправитьКонтейнерЧерезFTP(ПараметрыОтправки, КонтекстДиагностики);
		
	ИначеЕсли СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
		
		КонтейнерОтправлен = ОтправитьКонтейнерЧерезЭлектроннуюПочту(ПараметрыОтправки, КонтекстДиагностики);
		
	КонецЕсли;
	
	Результат = НовыйРезультатОтправкиТранспортногоКонтейнера();
	Результат.Успех = КонтейнерОтправлен;
	
	Возврат Результат;
	
КонецФункции

// Добавляет в контекст операции результат оправки/получения документов.
//
// Параметры:
//  РезультатыОтправкиПолучения - см. СинхронизацияЭДОСлужебныйКлиент.НовыеРезультатыОтправкиПолучения
//  Объект           - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ТранспортныйКонтейнерЭДО - объект, по которому выполнялась операция отправки/получения.
//  Успех            - Булево - результат отправки/получения.
//  Ошибка           - Строка - текст ошибки, следует указывать когда Успех - Ложь.
//
Процедура ЗафиксироватьРезультатОправкиПолучения(РезультатыОтправкиПолучения, Объект, Успех, Ошибка = "")
	
	Если РезультатыОтправкиПолучения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РезультатОтправкиПолучения = Новый Структура;
	РезультатОтправкиПолучения.Вставить("Ссылка", Объект);
	РезультатОтправкиПолучения.Вставить("Ошибка", Ошибка);
	
	Если Успех Тогда
		РезультатыОтправкиПолучения.Успешные.Добавить(РезультатОтправкиПолучения);
	Иначе 
		РезультатыОтправкиПолучения.Неудачные.Добавить(РезультатОтправкиПолучения);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание транспортного контейнера.
// 
// Возвращаемое значение:
// 	Структура - с ключами:
// * Ссылка - ДокументСсылка.ТранспортныйКонтейнерЭДО
// * ДвоичныеДанные - ДвоичныеДанные
// * Наименование - Строка
Функция НовоеОписаниеТранспортногоКонтейнера()
	
	ОписаниеКонтейнера = Новый Структура;
	ОписаниеКонтейнера.Вставить("Наименование", "");
	ОписаниеКонтейнера.Вставить("ДвоичныеДанные", Неопределено);
	ОписаниеКонтейнера.Вставить("Ссылка", Документы.ТранспортныйКонтейнерЭДО.ПустаяСсылка());
	
	Возврат ОписаниеКонтейнера;
	
КонецФункции

Процедура ОбновитьИнформациюОбАктивностиУчетнойЗаписи(ИдентификаторУчетнойЗаписи, КонтекстДиагностики) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Пространство = Метаданные.РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.ПолноеИмя();
		Поля = Новый Структура;
		Поля.Вставить("ИдентификаторОрганизации", ИдентификаторУчетнойЗаписи);
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку(Пространство, Поля, ,
			РежимБлокировкиДанных.Разделяемый);

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА КАК НеОбновить
		|ИЗ
		|	РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО КАК СостоянияОбменовЭДЧерезОператоровЭДО
		|ГДЕ
		|	(ВЫРАЗИТЬ(СостоянияОбменовЭДЧерезОператоровЭДО.ИдентификаторОрганизации КАК СТРОКА(150))) = &ИдентификаторОрганизации
		|	И СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПоследнейАктивности = &ТекущаяДатаСеанса";

		Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторУчетнойЗаписи);
		Запрос.УстановитьПараметр("ТекущаяДатаСеанса", НачалоДня(ТекущаяДатаСеанса()));

		УстановитьПривилегированныйРежим(Истина);
		ОбновитьАктивность = Запрос.Выполнить().Пустой();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ОбновитьАктивность Тогда
			Результат = СервисНастроекЭДО.ОбновитьИнформациюОбАктивностиУчетнойЗаписи(ИдентификаторУчетнойЗаписи,
				КонтекстДиагностики);

			Если Результат = Истина Тогда

				Набор = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
				Набор.Отбор.ИдентификаторОрганизации.Установить(ИдентификаторУчетнойЗаписи);
				
				ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
				
				УстановитьПривилегированныйРежим(Истина);
				Набор.Прочитать();
				Если Не ЗначениеЗаполнено(Набор) Тогда
					Запись = Набор.Добавить();
					Запись.ИдентификаторОрганизации = ИдентификаторУчетнойЗаписи;
				КонецЕсли;
				ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
				Для Каждого Запись Из Набор Цикл
					Запись.ДатаПоследнейАктивности = ТекущаяДата;
				КонецЦикла;
				Набор.Записать();
				УстановитьПривилегированныйРежим(Ложь);

			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВидОперации = НСтр("ru = 'Обновление информации об активности учетной записи электронного документооборота'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ВидОперации, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Запись статистики отправленных и полученных документов через ЦентрМониторинга.
//
// Параметры:
//  СпособОбмена  - ПеречислениеСсылка.СпособыОбменаЭД
//  УчетнаяЗапись  - Строка
//  ВидОперации - Строка - возможные значения: "Получено", "Отправлено"
//  КоличествоДокументов - Число - количество неслужебных электронных документов в контейнере.
Процедура ЗаписатьСтатистикуПоДокументообороту(СпособОбмена, УчетнаяЗапись, ВидОперации, КоличествоДокументов)
	
	ИменаОпераций = Новый Соответствие;
	ИменаОпераций.Вставить(Перечисления.СпособыОбменаЭД.ЧерезКаталог,             "Каталог");
	ИменаОпераций.Вставить(Перечисления.СпособыОбменаЭД.ЧерезFTP,                 "FTP");
	ИменаОпераций.Вставить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту,    "ЭлектроннаяПочта");
	ИменаОпераций.Вставить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском, "ОператорЭДОТакском");
	ИменаОпераций.Вставить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО,         "Сервис1сЭДО");
	
	ДанныеОператора = РегистрыСведений.ОператорыЭДО.ИнформацияОбОператореЭДОУчетнойЗаписи(УчетнаяЗапись);
	
	Если Не ЗначениеЗаполнено(ДанныеОператора) Тогда
		ВидОперации = НСтр("ru = 'Запись статистики отправленных и полученных документов через ЦентрМониторинга'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации,
			СтрШаблон(НСтр("ru = 'Для учетной записи ''%1'' не найдены данные о операторе ЭДО'"), УчетнаяЗапись));
		Возврат;
	КонецЕсли;
	
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(
		"ОбменСКонтрагентами.СпособОбменаЭД." + ИменаОпераций[СпособОбмена] + "." + ВидОперации,
		КоличествоДокументов,
		ДанныеОператора.Представление);
	
КонецПроцедуры

#Область ОбработчикиРегламентныхЗаданий

Процедура ОтправитьЭлектронныеДокументыПоРасписанию() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаЭлектронныхДокументов);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ВызватьИсключение
			НСтр("ru = 'Работа регламентного задания в режиме сервиса не предусмотрена.'");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Текст = НСтр("ru = 'Начато регламентное задание по отправке оформленных электронных документов.'");
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(Текст,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().РегламентныеЗадания, УровеньЖурналаРегистрации.Информация);
	Попытка
		ВидОперации = НСтр("ru = 'Выполнение регламентного задания по отправке электронных документов'");
		КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
		ОтпечаткиСертификатов = КриптографияБЭД.ПолучитьОтпечаткиСертификатов(ВидОперации, КонтекстДиагностики);
		ДанныеДляСинхронизации = ДанныеДляСинхронизации(ОтпечаткиСертификатов, КонтекстДиагностики,,
			СертификатыПоОтпечаткам(ОтпечаткиСертификатов));
		Результат = ОтправитьКонтейнеры(ДанныеДляСинхронизации.КлючиСинхронизации, ОтпечаткиСертификатов,
			КонтекстДиагностики);
		Текст = НСтр("ru = 'Закончено регламентное задание. Отправлено транспортных контейнеров: %КоличествоКонтейнеров%.'");
		Текст = СтрЗаменить(Текст, "%КоличествоКонтейнеров%", Результат.КоличествоОтправленных);
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(Текст,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().РегламентныеЗадания, УровеньЖурналаРегистрации.Информация);
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Во время регламентной отправки оформленных электронных .документов произошла ошибка.
		|Дополнительное описание:
		|%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ОписаниеОшибки,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().РегламентныеЗадания);
	КонецПопытки;
	
	ДиагностикаЭДО.ОбработатьОшибки(КонтекстДиагностики);
	
КонецПроцедуры

Процедура ПолучитьНовыеЭлектронныеДокументыПоРасписанию() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеЭлектронныхДокументов);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ВызватьИсключение
			НСтр("ru = 'Работа регламентного задания в режиме сервиса не предусмотрена.'");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Текст = НСтр("ru = 'Начато регламентное задание по получению новых электронных документов.'");
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(Текст,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().РегламентныеЗадания, УровеньЖурналаРегистрации.Информация);
	
	Попытка
		КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
		ВидОперации = НСтр("ru = 'Выполнение регламентного задания по получению электронных документов'");
		ОтпечаткиСертификатов = КриптографияБЭД.ПолучитьОтпечаткиСертификатов(ВидОперации, КонтекстДиагностики);
		ДанныеДляСинхронизации = ДанныеДляСинхронизации(ОтпечаткиСертификатов, КонтекстДиагностики,,
			СертификатыПоОтпечаткам(ОтпечаткиСертификатов));
		
		ПриглашенияЭДО.ПолучитьПриглашения(ДанныеДляСинхронизации.КлючиСинхронизации, КонтекстДиагностики, Ложь);
		
		Результат = ПолучитьКонтейнеры(ДанныеДляСинхронизации.КлючиСинхронизации, ОтпечаткиСертификатов,
			КонтекстДиагностики);
	
		РезультатОбработки = ЭлектронныеДокументыЭДО.ОбработатьРезультатЗагрузкиВФоне(
			Результат.РезультатЗагрузкиДокументовВФоне);
		
		ШаблонСообщения = НСтр("ru = 'Закончено регламентное задание.
									|Получено транспортных контейнеров: %1. Распаковано: %2.'");
		
		Если РезультатОбработки.РезультатДействийПоЭДО <> Неопределено Тогда
			Загружено = РезультатОбработки.РезультатДействийПоЭДО.Итог[Перечисления.ДействияПоЭДО.Загрузить];
		Иначе
			Загружено = 0;
		КонецЕсли;
		
		Если Загружено = Неопределено Тогда
			Загружено = 0;
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Результат.ПолученоКонтейнеров, Загружено);
		
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().РегламентныеЗадания, УровеньЖурналаРегистрации.Информация);
			
		ДиагностикаЭДО.ОбработатьОшибки(КонтекстДиагностики);
		
	Исключение
		
		Операция = НСтр("ru = 'Регламентное получение электронных документов'");
		
		ШаблонСообщения = НСтр("ru = 'В процессе выполнения произошла ошибка: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(Операция,
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
			ТекстСообщения, ТекстСообщения);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		ДиагностикаЭДО.ОбработатьОшибки(КонтекстДиагностики);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

Функция СостояниеОбменаЭлектроннымиДокументами(УчетнаяЗапись) Экспорт
	
	СостояниеОбмена = Новый Структура;
	СостояниеОбмена.Вставить("ДатаПоследнегоПолученияДокументов", Дата(1, 1, 1));
	СостояниеОбмена.Вставить("ДатаПоследнегоПолученияПриглашений", Дата(1, 1, 1));
	СостояниеОбмена.Вставить("ДатаПоследнейАктивности", Дата(1, 1, 1));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПолученияЭД КАК ДатаПолученияЭД,
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПоследнегоПолученияПриглашений КАК ДатаПоследнегоПолученияПриглашений,
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПоследнейАктивности КАК ДатаПоследнейАктивности,
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ПроверочнаяДатаПолученияЭД КАК ПроверочнаяДатаПолученияЭД,
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ПроверочнаяДатаПолученияПриглашений КАК ПроверочнаяДатаПолученияПриглашений
	|ИЗ
	|	РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО КАК СостоянияОбменовЭДЧерезОператоровЭДО
	|ГДЕ
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации";
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", УчетнаяЗапись);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Если Выборка.Следующий() Тогда
		Если Выборка.ДатаПолученияЭД = 0 Тогда
			ДатаПоследнегоПолученияДокументов = Дата(1, 1, 1);
		Иначе
			ДатаПоследнегоПолученияДокументов = ОбщегоНазначенияБЭД.ДатаИзУниверсальнойДатыВМиллисекундах(
				Выборка.ДатаПолученияЭД);
		КонецЕсли;
		СостояниеОбмена.ДатаПоследнегоПолученияДокументов = ДатаПоследнегоПолученияДокументов;
		Если Выборка.ДатаПоследнегоПолученияПриглашений = 0 Тогда
			ДатаПоследнегоПолученияПриглашений = Дата(1, 1, 1);
		Иначе
			ДатаПоследнегоПолученияПриглашений = ОбщегоНазначенияБЭД.ДатаИзУниверсальнойДатыВМиллисекундах(
				Выборка.ДатаПоследнегоПолученияПриглашений);
		КонецЕсли;
		СостояниеОбмена.ДатаПоследнегоПолученияПриглашений = ДатаПоследнегоПолученияПриглашений;
		СостояниеОбмена.ДатаПоследнейАктивности = Выборка.ДатаПоследнейАктивности;
	КонецЕсли;
	
	Возврат СостояниеОбмена;
	
КонецФункции

Процедура ИзменитьСостояниеОбменаЭлектроннымиДокументами(УчетнаяЗапись, ДатаПоследнегоПолученияДокументов,
		ДатаПоследнегоПолученияПриглашений, ДатаПоследнейАктивности) Экспорт
	
	НаборЗаписей = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторОрганизации.Установить(УчетнаяЗапись);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ИдентификаторОрганизации = УчетнаяЗапись;
	
	Если ЗначениеЗаполнено(ДатаПоследнегоПолученияДокументов) Тогда
		ДатаПолученияЭД = ОбщегоНазначенияБЭД.УниверсальнаяДатаВМиллисекундахИзДаты(ДатаПоследнегоПолученияДокументов);
	Иначе
		ДатаПолученияЭД = 0;
	КонецЕсли;
	НоваяЗапись.ДатаПолученияЭД = ДатаПолученияЭД;
	
	Если ЗначениеЗаполнено(ДатаПоследнегоПолученияПриглашений) Тогда
		ДатаПолученияПриглашений = ОбщегоНазначенияБЭД.УниверсальнаяДатаВМиллисекундахИзДаты(
			ДатаПоследнегоПолученияПриглашений);
	Иначе
		ДатаПолученияПриглашений = 0;
	КонецЕсли;
	НоваяЗапись.ДатаПоследнегоПолученияПриглашений = ДатаПолученияПриглашений;
	
	НоваяЗапись.ДатаПоследнейАктивности = ДатаПоследнейАктивности;
	
	Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаПолученияЭД) Тогда
		НоваяЗапись.ПроверочнаяДатаПолученияЭД = ОбщегоНазначенияБЭД.УниверсальнаяДатаВМиллисекундахИзДаты(
			Дата(1, 1, 1));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НоваяЗапись.ДатаПоследнегоПолученияПриглашений) Тогда
		НоваяЗапись.ПроверочнаяДатаПолученияПриглашений = ОбщегоНазначенияБЭД.УниверсальнаяДатаВМиллисекундахИзДаты(
			Дата(1, 1, 1));
	КонецЕсли;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция СформироватьИОтправитьТранспортныеКонтейнеры(КонтекстОтправки, КонтекстДиагностики,
	Знач КлючиСинхронизации, РезультатыОтправкиПолучения = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатОтправки = СинхронизацияЭДОКлиентСервер.НовыйРезультатОтправкиОбъектов();
	РезультатОтправки.КонтекстДиагностики = КонтекстДиагностики;
	РезультатОтправки.ОтправленныеОбъекты = КонтекстОтправки.ОтправленныеОбъекты;
	Если РезультатыОтправкиПолучения <> Неопределено Тогда
		РезультатОтправки.РезультатыОтправкиПолучения = РезультатыОтправкиПолучения;
	КонецЕсли;
	
	КонтейнерыДляПовторнойОтправки = Новый Массив;
	ТранспортныеКонтейнеры = КонтекстОтправки.ТранспортныеКонтейнеры;
	
	УчетныеЗаписиСПросроченнымМаркером = Новый Соответствие;
	УчетныеЗаписиДляПовторнойОбработки = Новый Соответствие;
	Для Каждого ОписаниеКонтейнера Из ТранспортныеКонтейнеры Цикл
		ИстекСрокДействияМаркера = Ложь;
		Если Не ЗначениеЗаполнено(ОписаниеКонтейнера.Ссылка) Тогда
			ЗафиксироватьРезультатОтправки(РезультатОтправки, КонтейнерыДляПовторнойОтправки, ОписаниеКонтейнера, Ложь,
				Ложь);
		КонецЕсли;
		Если СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ОписаниеКонтейнера.СпособОбмена) Тогда
			КлючСинхронизации = КлючиСинхронизации[ВРег(ОписаниеКонтейнера.Отправитель)];
			Если КлючСинхронизации = Неопределено Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Отправка объектов электронного документооборота: не удалось определить ключ синхронизации для учетной записи %1'"),
					ОписаниеКонтейнера.Отправитель);
				ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстОшибки,
					ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(КлючСинхронизации.МаркерРасшифрованный) Тогда
				ЗафиксироватьРезультатОтправки(РезультатОтправки, КонтейнерыДляПовторнойОтправки, ОписаниеКонтейнера, Ложь,
					Истина);
				УчетныеЗаписиДляПовторнойОбработки.Вставить(КлючСинхронизации.ИдентификаторУчетнойЗаписи, Истина);
				Продолжить;
			КонецЕсли;
			ИстекСрокДействияМаркера = УчетныеЗаписиСПросроченнымМаркером[КлючСинхронизации.ИдентификаторУчетнойЗаписи] <> Неопределено;
		Иначе
			ИстекСрокДействияМаркера = Ложь;
		КонецЕсли;
		
		Если ИстекСрокДействияМаркера Тогда
			ЗафиксироватьРезультатОтправки(РезультатОтправки, КонтейнерыДляПовторнойОтправки, ОписаниеКонтейнера, Ложь,
				Истина);
		Иначе
			Контейнеры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеКонтейнера.Ссылка);
			РезультатОтправкиКонтейнеров = СинхронизацияЭДО.ОтправитьТранспортныеКонтейнеры(Контейнеры,
				КлючиСинхронизации, КонтекстДиагностики, РезультатОтправки.РезультатыОтправкиПолучения,
				ИстекСрокДействияМаркера, ДополнительныеПараметры);
			РезультатОтправкиКонтейнера = РезультатОтправкиКонтейнеров[ОписаниеКонтейнера.Ссылка];
			Если РезультатОтправкиКонтейнера = Неопределено Тогда
				КонтейнерОтправлен = Ложь;
			Иначе 
				КонтейнерОтправлен = РезультатОтправкиКонтейнера.Успех;
			КонецЕсли;
			
			ЗафиксироватьРезультатОтправки(РезультатОтправки, КонтейнерыДляПовторнойОтправки, ОписаниеКонтейнера,
				КонтейнерОтправлен, ИстекСрокДействияМаркера);
			
			Если ИстекСрокДействияМаркера Тогда
				УчетныеЗаписиДляПовторнойОбработки.Вставить(КлючСинхронизации.ИдентификаторУчетнойЗаписи, Истина);
				УчетныеЗаписиСПросроченнымМаркером.Вставить(ОписаниеКонтейнера.Отправитель, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КлючиСинхронизацииДляПовторнойОбработки = КлючиСинхронизацииДляПовторнойОбработки(КлючиСинхронизации, 
		УчетныеЗаписиДляПовторнойОбработки, УчетныеЗаписиСПросроченнымМаркером, КонтекстДиагностики);
	
	РезультатОтправки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	РезультатОтправки.КонтекстДиагностики = КонтекстДиагностики;
	Если УчетныеЗаписиДляПовторнойОбработки.Количество() Тогда
		РезультатОтправки.ТребуетсяОбработкаНаКлиенте = Истина;
		КонтекстОтправки = НовыйКонтекстОтправки();
		КонтекстОтправки.КлючиСинхронизации = КлючиСинхронизацииДляПовторнойОбработки;
		КонтекстОтправки.ТранспортныеКонтейнеры = КонтейнерыДляПовторнойОтправки;
		КонтекстОтправки.ОтправленныеОбъекты = РезультатОтправки.ОтправленныеОбъекты;
		РезультатОтправки.КонтекстОтправки = КонтекстОтправки;
		
		Если УчетныеЗаписиСПросроченнымМаркером.Количество() Тогда
			Возврат СформироватьИОтправитьТранспортныеКонтейнеры(КонтекстОтправки, КонтекстДиагностики,
				КлючиСинхронизацииДляПовторнойОбработки, РезультатОтправки.РезультатыОтправкиПолучения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не РезультатОтправки.ТребуетсяОбработкаНаКлиенте Тогда
		СинхронизацияЭДОСобытия.ПослеОтправкиОбъектов(РезультатОтправки, КонтекстДиагностики);
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция НовыйКонтекстОтправки() Экспорт
	
	КонтекстОтправки = Новый Структура;
	КонтекстОтправки.Вставить("КлючиСинхронизации", СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации());
	КонтекстОтправки.Вставить("ТранспортныеКонтейнеры", Новый Массив);
	КонтекстОтправки.Вставить("ОтправленныеОбъекты", Новый Соответствие);
	
	Возврат КонтекстОтправки;
	
КонецФункции

Процедура ДополнитьДанныеОбъектов(ДанныеОбъектов) Экспорт
	
	Запросы = Новый Массив;
	Запросы.Добавить(НастройкиЭДО.ЗапросНастроекОтправкиДляПрямогоОбмена("НастройкиОтправки"));
	
	Отбор = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	Отбор.УчетныеЗаписи = "&УчетныеЗаписи";
	ЗапросУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", Отбор);
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	
	Отбор = ПриглашенияЭДО.НовыйОтборПриглашений();
	Отбор.ИдентификаторОрганизации = "&ИдентификаторОрганизации";
	Отбор.ИдентификаторКонтрагента = "&ИдентификаторКонтрагента";
	ЗапросПриглашений = ПриглашенияЭДО.ЗапросПриглашений("Приглашения", Отбор);
	Запросы.Добавить(ЗапросПриглашений);
	
	КопияДанныхОбъектов = ДанныеОбъектов.Скопировать(,
		"Объект, СпособОбмена, ВидДокумента, ИдентификаторОтправителя, ИдентификаторПолучателя");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеОбъектов.Объект КАК Объект,
		|	ДанныеОбъектов.СпособОбмена КАК СпособОбмена,
		|	ДанныеОбъектов.ВидДокумента КАК ВидДокумента,
		|	ДанныеОбъектов.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	ДанныеОбъектов.ИдентификаторПолучателя КАК ИдентификаторПолучателя
		|ПОМЕСТИТЬ ДанныеОбъектов
		|ИЗ
		|	&ДанныеОбъектов КАК ДанныеОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОбъектов.Объект КАК Объект,
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	УчетныеЗаписиЭДО.КаталогОбмена КАК КаталогОбмена,
		|	УчетныеЗаписиЭДО.ПутьFTP КАК ПутьFTP,
		|	УчетныеЗаписиЭДО.УчетнаяЗаписьЭлектроннойПочты КАК УчетнаяЗаписьЭлектроннойПочты,
		|	ЕСТЬNULL(НастройкиОтправки.АдресПолучателя, """") КАК АдресПолучателя,
		|	ЕСТЬNULL(Приглашения.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.ПустаяСсылка)) КАК СтатусПриглашения
		|ИЗ
		|	ДанныеОбъектов КАК ДанныеОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ДанныеОбъектов.ИдентификаторОтправителя = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиОтправки КАК НастройкиОтправки
		|		ПО ДанныеОбъектов.ИдентификаторОтправителя = НастройкиОтправки.ИдентификаторОтправителя
		|			И ДанныеОбъектов.ИдентификаторПолучателя = НастройкиОтправки.ИдентификаторПолучателя
		|			И ДанныеОбъектов.ВидДокумента = НастройкиОтправки.ВидДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Приглашения КАК Приглашения
		|		ПО ДанныеОбъектов.ИдентификаторОтправителя = Приглашения.ИдентификаторОрганизации
		|			И ДанныеОбъектов.ИдентификаторПолучателя = Приглашения.ИдентификаторКонтрагента";
	
	ИдентификаторыОтправителя = КопияДанныхОбъектов.ВыгрузитьКолонку("ИдентификаторОтправителя");
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("УчетныеЗаписи", ИдентификаторыОтправителя);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторыОтправителя);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторКонтрагента",
		КопияДанныхОбъектов.ВыгрузитьКолонку("ИдентификаторПолучателя"));
	ИтоговыйЗапрос.УстановитьПараметр("ДанныеОбъектов",	КопияДанныхОбъектов);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(ДанныеОбъекта.Объект, "Объект") Тогда
			ДанныеОбъекта.СтатусПриглашения = ВыборкаДетальныеЗаписи.СтатусПриглашения;
			Если ДанныеОбъекта.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
				ДанныеОбъекта.АдресРесурсаКонтрагента = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
					ВыборкаДетальныеЗаписи.КаталогОбмена, ВыборкаДетальныеЗаписи.АдресПолучателя);
			ИначеЕсли ДанныеОбъекта.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
				ДанныеОбъекта.АдресРесурсаОрганизации = ВыборкаДетальныеЗаписи.УчетнаяЗаписьЭлектроннойПочты;
				ДанныеОбъекта.АдресРесурсаКонтрагента = ВыборкаДетальныеЗаписи.АдресПолучателя;
			ИначеЕсли ДанныеОбъекта.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
				ДанныеОбъекта.АдресРесурсаКонтрагента = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
					ВыборкаДетальныеЗаписи.ПутьFTP, ВыборкаДетальныеЗаписи.АдресПолучателя);
			КонецЕсли;
			ВыборкаДетальныеЗаписи.Сбросить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьРезультатОтправки(РезультатОтправки, КонтейнерыДляПовторнойОтправки, ОписаниеКонтейнера, Результат,
	ТребуетсяПовторнаяОбработка)
	
	Для Каждого ОтправляемыйОбъект Из ОписаниеКонтейнера.ОтправляемыеОбъекты Цикл
		РезультатОтправки.ОтправленныеОбъекты.Вставить(ОтправляемыйОбъект, Результат);
	КонецЦикла;
	
	Если Не Результат И ТребуетсяПовторнаяОбработка Тогда
		КонтейнерыДляПовторнойОтправки.Добавить(ОписаниеКонтейнера);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьОтправки(ДанныеОбъектов, КонтекстДиагностики) Экспорт
	
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		Если Не ЭтоПрямойОбмен(ДанныеОбъекта.СпособОбмена)
			И Не ПриглашенияЭДО.ПриглашениеПринято(ДанныеОбъекта.СтатусПриглашения) Тогда
			ДанныеОбъекта.РазрешеноОтправлять = Ложь;
			Если ПриглашенияЭДО.ОжидаетсяОтветНаПриглашение(ДанныеОбъекта.СтатусПриглашения) Тогда
				ДанныеОбъекта.ТипОшибкиОтправки = СинхронизацияЭДО.ТипыОшибокОтправки().ОжидаетсяОтветНаПриглашение;
			Иначе
				ПриглашенияЭДО.ДобавитьОшибкуНепринятогоПриглашения(КонтекстДиагностики,
					ДанныеОбъекта.ИдентификаторОтправителя, ДанныеОбъекта.ИдентификаторПолучателя, ДанныеОбъекта.Объект,
					ДанныеОбъекта.СтатусПриглашения, НСтр("ru = 'Отправка электронного документа'"));
			КонецЕсли;
		Иначе
			ДанныеОбъекта.РазрешеноОтправлять = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает результат получения документов.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Контейнеры - Массив из ДокументСсылка.ТранспортныйКонтейнерЭДО
// * УчетныеЗаписи1СЭДОПолученыВсеДокументы - Массив из Строка
// * ТребуетсяОбработкаНаКлиенте - Булево
// * КонтекстПолучения - Структура
// * УчетныеЗаписиДляПовторнойОбработки - Соответствие
// * УчетныеЗаписиСПросроченнымМаркером - Соответствие из КлючИЗначение:
//     * Ключ - Строка - идентификатор учетной записи
//     * Значение - Булево - должно содержать Истина
Функция НовыйРезультатПолученияДокументов()
	
	РезультатПолученияДокументов = Новый Структура;
	РезультатПолученияДокументов.Вставить("Контейнеры",                             Новый Массив);
	РезультатПолученияДокументов.Вставить("УчетныеЗаписи1СЭДОПолученыВсеДокументы", Новый Массив);
	РезультатПолученияДокументов.Вставить("УчетныеЗаписиСПросроченнымМаркером",     Новый Соответствие);
	РезультатПолученияДокументов.Вставить("ТребуетсяОбработкаНаКлиенте",            Ложь);
	РезультатПолученияДокументов.Вставить("КонтекстПолучения",                      Неопределено);
	РезультатПолученияДокументов.Вставить("УчетныеЗаписиДляПовторнойОбработки",     Новый Соответствие);
	
	Возврат РезультатПолученияДокументов;
	
КонецФункции

Функция КлючиСинхронизацииДляПовторнойОбработки(КлючиСинхронизации, УчетныеЗаписиДляПовторнойОбработки,
	УчетныеЗаписиСПросроченнымМаркером, КонтекстДиагностики)
	
	Результат = СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации();
	
	Для Каждого КлючИЗначение Из КлючиСинхронизации Цикл
		КлючСинхронизации = КлючИЗначение.Значение;
		Если УчетныеЗаписиДляПовторнойОбработки[КлючИЗначение.Ключ] <> Неопределено Тогда
			Если УчетныеЗаписиСПросроченнымМаркером[КлючИЗначение.Ключ] <> Неопределено Тогда
				КлючСинхронизации.МаркерРасшифрованный = Неопределено;
				Маркер = СервисЭДО.Авторизоваться(КлючСинхронизации, КонтекстДиагностики);
				Если ТипЗнч(Маркер) = Тип("ДвоичныеДанные") Тогда
					КлючСинхронизации.МаркерЗашифрованный = Маркер;
				КонецЕсли;
			КонецЕсли;
			Результат.Вставить(КлючИЗначение.Ключ, КлючСинхронизации);
		КонецЕсли;
	КонецЦикла;
	
	СервисЭДО.ЗаполнитьПараметрыАутентификации(Результат, КонтекстДиагностики);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьКоличествоОтправленных(РезультатОтправки, КоличествоОтправленных)
	
	Если РезультатОтправки <> Неопределено Тогда
		Для Каждого Объект Из РезультатОтправки.ОтправленныеОбъекты Цикл
			Если Объект.Значение Тогда
				КоличествоОтправленных = КоличествоОтправленных + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает идентификаторы отправителей.
// 
// Параметры:
// 	ДанныеОбъектов - см. СинхронизацияЭДО.НовыеДанныеОбъектов
// Возвращаемое значение:
// 	Массив из Строка
Функция ИдентификаторыОтправителейОтправляемыхОбъектов(ДанныеОбъектов) Экспорт
	
	ИдентификаторыОтправителей = Новый Массив;
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		Если ИдентификаторыОтправителей.Найти(ДанныеОбъекта.ИдентификаторОтправителя) = Неопределено Тогда
			ИдентификаторыОтправителей.Добавить(ДанныеОбъекта.ИдентификаторОтправителя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторыОтправителей;
	
КонецФункции

Функция ОтправитьКонтейнеры(КлючиСинхронизации, ОтпечаткиСертификатов, КонтекстДиагностики,
	РезультатыОтправкиПолучения = Неопределено)
	
	КоличествоОтправленных = 0;
	
	УчетныеЗаписи = СинхронизацияЭДО.УчетныеЗаписиКлючейСинхронизации(КлючиСинхронизации);
	ДополнитьУчетнымиЗаписямиПрямогоОбмена(УчетныеЗаписи);
	РезультатОтправки = ЭлектронныеДокументыЭДО.ОтправитьВсеДокументы(УчетныеЗаписи, ОтпечаткиСертификатов,
		КонтекстДиагностики);
	
	Если РезультатОтправки <> Неопределено Тогда
		РезультатыОтправкиПолучения = РезультатОтправки.РезультатыОтправкиПолучения;
		КонтекстДиагностики = РезультатОтправки.КонтекстДиагностики;
		Если РезультатОтправки.ТребуетсяОбработкаНаКлиенте Тогда
			РезультатОтправки = СформироватьИОтправитьТранспортныеКонтейнеры(РезультатОтправки.КонтекстОтправки,
				КонтекстДиагностики, КлючиСинхронизации, РезультатыОтправкиПолучения);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатОтправки <> Неопределено Тогда
		ЗаполнитьКоличествоОтправленных(РезультатОтправки, КоличествоОтправленных);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатОтправки", РезультатОтправки);
	Результат.Вставить("КоличествоОтправленных", КоличествоОтправленных);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКонтейнеры(КлючиСинхронизации, ОтпечаткиСертификатов, КонтекстДиагностики,
	РезультатыОтправкиПолучения = Неопределено, ПовторноеПолучение = Ложь)
	
	ПроверитьАктуальностьОшибокПередачи(КлючиСинхронизации, КонтекстДиагностики);
	
	РезультатПолучения = ПолучитьНовыеЭлектронныеДокументы(КлючиСинхронизации, КонтекстДиагностики,
		РезультатыОтправкиПолучения, ПовторноеПолучение);
	
	ПолученоКонтейнеров = РезультатПолучения.Контейнеры.Количество();
	
	УчетныеЗаписи = СинхронизацияЭДО.УчетныеЗаписиКлючейСинхронизации(КлючиСинхронизации);
	
	ТранспортныеКонтейнерыЭДО.ДополнитьКонтейнерамиКРаспаковке(РезультатПолучения.Контейнеры, УчетныеЗаписи);
	
	РезультатРаспаковкиКонтейнеров = ТранспортныеКонтейнерыЭДО.РаспаковатьКонтейнеры(РезультатПолучения.Контейнеры,
		ОтпечаткиСертификатов, КонтекстДиагностики);
	
	РезультатЗагрузкиДокументовВФоне = РезультатРаспаковкиКонтейнеров.РезультатЗагрузкиДокументов;
	Результат = Новый Структура;
	Результат.Вставить("РезультатПолучения", РезультатПолучения);
	Результат.Вставить("РезультатЗагрузкиДокументовВФоне", РезультатЗагрузкиДокументовВФоне);
	Результат.Вставить("ПолученоКонтейнеров", ПолученоКонтейнеров);
	Результат.Вставить("РаспакованоКонтейнеров", РезультатРаспаковкиКонтейнеров.РаспакованоКонтейнеров);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатОтправкиТранспортногоКонтейнера()
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ОшибкаПередачи", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// См. СинхронизацияЭДО.ПриЗагрузкеОбъекта
Процедура ПриЗагрузкеОбъекта(Объект, ДанныеОбъекта, КонтекстДиагностики) Экспорт
	
	Если ДанныеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.Ошибка
		И ДанныеОбъекта.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
		МенеджерЗаписи = РегистрыСведений.ОшибкиПередачиЭДО.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдентификаторОтправителя = ДанныеОбъекта.ИдентификаторПолучателя;
		МенеджерЗаписи.ИдентификаторДокументооборота = ДанныеОбъекта.ИдентификаторДокументооборота;
		МенеджерЗаписи.ИдентификаторОшибки = ДанныеОбъекта.ИдентификаторКонтейнера;
		МенеджерЗаписи.КодОшибки = ДанныеОбъекта.ОшибкаПередачи.Код;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьАктуальностьОшибокПередачи(КлючиСинхронизации, КонтекстДиагностики)
	
	УчетныеЗаписи = СинхронизацияЭДО.УчетныеЗаписиКлючейСинхронизации(КлючиСинхронизации);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОшибкиПередачиЭДО.ИдентификаторОшибки,
		|	ОшибкиПередачиЭДО.ИдентификаторДокументооборота
		|ИЗ
		|	РегистрСведений.ОшибкиПередачиЭДО КАК ОшибкиПередачиЭДО
		|ГДЕ
		|	ОшибкиПередачиЭДО.ИдентификаторОтправителя В (&ИдентификаторЭДО)";
	
	Запрос.УстановитьПараметр("ИдентификаторЭДО", УчетныеЗаписи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОшибкиПоДокументооборотам = Новый Соответствие;
	ВсеОшибки = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВсеОшибки.Добавить(ВыборкаДетальныеЗаписи.ИдентификаторОшибки);
		ОшибкиПоДокументооборотам.Вставить(ВыборкаДетальныеЗаписи.ИдентификаторОшибки,
			ВыборкаДетальныеЗаписи.ИдентификаторДокументооборота);
	КонецЦикла;
	
	АктуальныеОшибки = СервисЭДО.ОшибкиПередачиДокументовАктуальны(ВсеОшибки, КонтекстДиагностики);
	Если АктуальныеОшибки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Ошибка Из ОшибкиПоДокументооборотам Цикл
		Если АктуальныеОшибки.Найти(Ошибка.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПоляБлокировки = Новый Структура;
		ПоляБлокировки.Вставить("ИдентификаторДокументооборота", Ошибка.Значение);
		
		МенеджерЗаписи = РегистрыСведений.ОшибкиПередачиЭДО.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдентификаторДокументооборота = Ошибка.Значение;
	
		НачатьТранзакцию();
		Попытка
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку("РегистрСведений.ОшибкиПередачиЭДО", ПоляБлокировки);
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Удалить();
				СинхронизацияЭДОСобытия.ПриИсправленииОшибкиПередачи(МенеджерЗаписи.ИдентификаторДокументооборота,
					КонтекстДиагностики);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВидОперации = НСтр("ru = 'Проверка актуальности ошибок передачи электронного документооборота'");
			ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДокументы(ЗагружаемыеДокументы, КонтекстДиагностики, ИстекСрокДействияМаркера,
	Результат, РезультатыОтправкиПолучения, ПараметрыПолучения)
	
	КлючСинхронизации = ПараметрыПолучения.КлючСинхронизации;
	Для Каждого ДокументДляЗагрузки Из ЗагружаемыеДокументы Цикл
		Если Не ЗагрузкаДокументаВозможна(ДокументДляЗагрузки,
			КлючСинхронизации.ИдентификаторУчетнойЗаписи, КонтекстДиагностики) Тогда
			ПараметрыПолучения.НеЗагружено.Добавить(ДокументДляЗагрузки.ИДДокумента);
			ПараметрыПолучения.СдвигатьДату = Ложь;
			Продолжить
		КонецЕсли;
		
		Если ДокументДляЗагрузки.ДвоичныеДанные = Неопределено Тогда
			ДвоичныеДанныеТранспортногоКонтейнера = СервисЭДО.ПолучитьДокумент(КлючСинхронизации, ДокументДляЗагрузки,
				КонтекстДиагностики, ИстекСрокДействияМаркера);
		
			Если ИстекСрокДействияМаркера Тогда
				Результат.УчетныеЗаписиДляПовторнойОбработки.Вставить(КлючСинхронизации.ИдентификаторУчетнойЗаписи,
					Истина);
				Результат.УчетныеЗаписиСПросроченнымМаркером.Вставить(КлючСинхронизации.ИдентификаторУчетнойЗаписи,
					Истина);
			КонецЕсли;
			ДокументДляЗагрузки.ДвоичныеДанные = ДвоичныеДанныеТранспортногоКонтейнера;
		КонецЕсли;
		
		
		Если ДокументДляЗагрузки.ДвоичныеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			РезультатСохраненияКонтейнера = ТранспортныеКонтейнерыЭДО.СохранитьКонтейнер(ДокументДляЗагрузки,
				КлючСинхронизации, КонтекстДиагностики);
			Если ЗначениеЗаполнено(РезультатСохраненияКонтейнера.ТранспортныйКонтейнер) Тогда
				Результат.Контейнеры.Добавить(РезультатСохраненияКонтейнера.ТранспортныйКонтейнер);
				ЗафиксироватьРезультатОправкиПолучения(РезультатыОтправкиПолучения,
					РезультатСохраненияКонтейнера.ТранспортныйКонтейнер, Истина);
			Иначе
				ПараметрыПолучения.СдвигатьДату = Ложь;
				ПараметрыПолучения.НеЗагружено.Добавить(ДокументДляЗагрузки.ИДДокумента);
			КонецЕсли;
		Исключение
			ПараметрыПолучения.СдвигатьДату = Ложь;
			ПараметрыПолучения.НеЗагружено.Добавить(ДокументДляЗагрузки.ИДДокумента);
			ТекстОшибки = "";
			ОбработатьОшибкуЗагрузкиДокумента(ДокументДляЗагрузки, КонтекстДиагностики,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстОшибки);
			Если ТипЗнч(РезультатСохраненияКонтейнера) = Тип("Структура")
				И ЗначениеЗаполнено(РезультатСохраненияКонтейнера.Объект) Тогда
				ЗафиксироватьРезультатОправкиПолучения(РезультатыОтправкиПолучения,
					РезультатСохраненияКонтейнера.ТранспортныйКонтейнер, Ложь, ТекстОшибки);
			КонецЕсли;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// См. СинхронизацияЭДОСобытия.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область Версия_1_2_4

#Область Справочники_УдалитьСертификатыЭП_ПеренестиНастройкиСертификатов

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.4.4";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.УдалитьСертификатыЭП.ПеренестиНастройкиСертификатов";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = ''");

#КонецОбласти

#КонецОбласти

#Область Версия_1_3_6

#Область Справочники_УдалитьПрофилиНастроекЭДО_ЗаполнитьРегламентЭДО

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.6.7";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.УдалитьПрофилиНастроекЭДО.ЗаполнитьРегламентЭДО";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: заполнение регламента ЭДО у профилей настроек ЭДО'");

#КонецОбласти

#Область Справочники_УдалитьПрофилиНастроекЭДО_СнятьФлагОтветнойПодписиУСчетаНаОплату

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.6.25";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.УдалитьПрофилиНастроекЭДО.СнятьФлагОтветнойПодписиУСчетаНаОплату";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: снятие флага ожидания ответной подписи у профилей настроек ЭДО'");

#КонецОбласти

#КонецОбласти

#Область Версия_1_6_4

#Область Справочники_УдалитьПрофилиНастроекЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.УдалитьПрофилиНастроекЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.6.4.28";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5e7bb05a-2a3a-4031-bddf-a71990eeb03b");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.УдалитьПрофилиНастроекЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "Справочники.УдалитьПрофилиНастроекЭДО.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: изменение параметров справочника профили настроек ЭДО.
	|Настройка и обмен электронными документами с контрагентами временно невозможен.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.ПодписываемыеВидыЭД.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.СертификатыУчетныхЗаписейЭДО.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.МаршрутыПодписания.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.УдалитьПрофилиНастроекЭДО.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ПодписываемыеВидыЭД.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СертификатыУчетныхЗаписейЭДО.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.УдалитьПрофилиНастроекЭДО.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.УдалитьПрофилиНастроекЭДО.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументИсходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ПодписываемыеВидыЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.МаршрутыПодписания.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.УдалитьСертификатыЭП.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ЭлектронноеВзаимодействиеОбработчикиОбновления.Справочники_НастройкиОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
#КонецОбласти

#КонецОбласти

#Область Версия_1_9_1

#Область РегистрыСведений_СостоянияОбменовЭДЧерезОператоровЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.9.1.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("744c3ef6-2885-418d-a309-6da9ce988978");
	Обработчик.Многопоточный = Истина;
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление состояний обменов электронными документами.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.УдалитьПрофилиНастроекЭДО.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.УдалитьПрофилиНастроекЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#КонецОбласти

КонецПроцедуры

Функция СертификатыПоОтпечаткам(РезультатыПолученияОтпечатков)
	
	ОтборСертификатов = КриптографияБЭД.НовыйОтборСертификатов();
	ОтборСертификатов.Отпечатки = "&Отпечатки";
	ЗапросСертификатов = КриптографияБЭД.ЗапросДействующихСертификатов("Сертификаты", ОтборСертификатов);
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросСертификатов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Сертификаты.Ссылка
	|ИЗ
	|	Сертификаты КАК Сертификаты";
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	ИтоговыйЗапрос.УстановитьПараметр("Отпечатки",
		КриптографияБЭД.ПолучитьВсеОтпечаткиСертификатов(РезультатыПолученияОтпечатков));
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	Сертификаты = Новый Массив;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Сертификаты;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сертификаты.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат Сертификаты;
	
КонецФункции

#КонецОбласти