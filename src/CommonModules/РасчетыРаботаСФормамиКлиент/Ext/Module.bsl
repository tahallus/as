#Область ПрограммныйИнтерфейс

Функция ВсеСуммыРавныНулю(пФорма) Экспорт
	
	СуммаРавныНулю = Истина;
	
	СуммаРавныНулю = (пФорма.Объект.СуммаДокумента = 0);
	Для Каждого ТекущаяСтрока Из пФорма.Объект.РасшифровкаПлатежа Цикл
		СуммаРавныНулю = (ТекущаяСтрока.СуммаРасчетов = 0 И ТекущаяСтрока.СуммаПлатежа = 0 И ТекущаяСтрока.СуммаНДС = 0);
	КонецЦикла;
	
	Возврат СуммаРавныНулю;
	
КонецФункции

Процедура РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти) Экспорт
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаПлатежа - (СтрокаТабличнойЧасти.СуммаПлатежа) / ((СтавкаНДС + 100) / 100);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаКлиенте(СтрокаТабличнойЧасти,
	Дата, ВалютаДенежныхСредств, Курс, Кратность, СтавкаНДСПоУмолчанию,
	ИзменятьСуммуРасчетовВместоКурса = Ложь, РассчитыватьАванс = Истина) Экспорт
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			Дата,
			СтрокаТабличнойЧасти.Договор
		);
		
	Если СтрокаТабличнойЧасти.СуммаПлатежа = 0 Тогда
		СтрокаТабличнойЧасти.СуммаРасчетов = 0;
		Если НЕ ИзменятьСуммуРасчетовВместоКурса Тогда
			СтрокаТабличнойЧасти.Курс = СтруктураДанные.ДоговорВалютаКурсКратность.Курс;
		КонецЕсли;
	ИначеЕсли ВалютаДенежныхСредств = СтруктураДанные.ВалютаРасчетов Тогда
		СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПлатежа;
	ИначеЕсли СтрокаТабличнойЧасти.СуммаРасчетов = 0
		ИЛИ (ИзменятьСуммуРасчетовВместоКурса И СтрокаТабличнойЧасти.Курс > 0) Тогда
		СтрокаТабличнойЧасти.СуммаРасчетов = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаТабличнойЧасти.СуммаПлатежа, Курс, СтрокаТабличнойЧасти.Курс, Кратность,
			СтрокаТабличнойЧасти.Кратность);
	Иначе
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.СуммаРасчетов = 0 ИЛИ СтрокаТабличнойЧасти.СуммаПлатежа = 0,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс,
			СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Курс
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
	Если РассчитыватьАванс Тогда
		СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаСуммаПлатежаПриИзменении()

Функция ПолучитьСтруктуруСтрокиДополнительно() Экспорт
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Организация", Неопределено);
	ДанныеСтроки.Вставить("Контрагент", Неопределено);
	ДанныеСтроки.Вставить("Договор", Неопределено);
	ДанныеСтроки.Вставить("СчетНаОплату", Неопределено);
	ДанныеСтроки.Вставить("Заказ", Неопределено);
	ДанныеСтроки.Вставить("Документ", Неопределено);
	ДанныеСтроки.Вставить("ДокументПланирования", Неопределено);
	ДанныеСтроки.Вставить("СтатьяДДС", Неопределено);
	ДанныеСтроки.Вставить("НазначениеПлатежа", Неопределено);
	ДанныеСтроки.Вставить("Комментарий", Неопределено);
	ДанныеСтроки.Вставить("СтавкаНДС", Неопределено);
	ДанныеСтроки.Вставить("СуммаНДС", Неопределено);
	ДанныеСтроки.Вставить("Курс", Неопределено);
	ДанныеСтроки.Вставить("Кратность", Неопределено);
	ДанныеСтроки.Вставить("СуммаПлатежа", Неопределено);
	ДанныеСтроки.Вставить("СуммаРасчетов", Неопределено);
	ДанныеСтроки.Вставить("ДатаДокумента", Неопределено);
	ДанныеСтроки.Вставить("ВалютаДенежныхСредств", Неопределено);
	ДанныеСтроки.Вставить("СтавкаНДСПоУмолчанию", Неопределено);
	ДанныеСтроки.Вставить("КурсДокумента", Неопределено);
	ДанныеСтроки.Вставить("КратностьДокумента", Неопределено);
	ДанныеСтроки.Вставить("ДокументПозжеТекущего", Неопределено);
	
	Возврат ДанныеСтроки;
	
КонецФункции

Процедура РассчитатьСуммуПлатежаНаКлиенте(Форма, СтрокаТабличнойЧасти, ИмяКолонки = "", НеПересчитыватьИтоги = Ложь, ЭтоПомощник = Ложь) Экспорт
	
	СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			?(ЭтоПомощник, Форма.ДатаДокумента, Форма.Объект.Дата),
			СтрокаТабличнойЧасти.Договор
		);
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		?(СтруктураДанные.ДоговорВалютаКурсКратность.Курс =0, 1, СтруктураДанные.ДоговорВалютаКурсКратность.Курс),
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	Если СтрокаТабличнойЧасти.СуммаРасчетов = 0 Тогда
		СтрокаТабличнойЧасти.СуммаПлатежа = 0;
		СтрокаТабличнойЧасти.Курс = СтруктураДанные.ДоговорВалютаКурсКратность.Курс;
	ИначеЕсли ?(ЭтоПомощник, Форма.ВалютаДенежныхСредств, Форма.Объект.ВалютаДенежныхСредств) = СтруктураДанные.ВалютаРасчетов Тогда
		СтрокаТабличнойЧасти.СуммаПлатежа = СтрокаТабличнойЧасти.СуммаРасчетов;
	ИначеЕсли СтрокаТабличнойЧасти.СуммаПлатежа = 0 ИЛИ
		(ИмяКолонки = "Курс" ИЛИ ИмяКолонки = "Кратность") Тогда
		Если СтрокаТабличнойЧасти.Курс = 0 Тогда
			СтрокаТабличнойЧасти.СуммаПлатежа = 0;
		Иначе
			СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(ЭтоПомощник, Форма.КурсДокумента, Форма.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(ЭтоПомощник, Форма.КратностьДокумента, Форма.Кратность)
			);
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.СуммаРасчетов = 0 ИЛИ СтрокаТабличнойЧасти.СуммаПлатежа = 0,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс, //СтрокаТабличнойЧасти.Курс,
			СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * ?(ЭтоПомощник, Форма.КурсДокумента, Форма.Курс)
		);
		СтрокаТабличнойЧасти.Кратность = ?(
			СтрокаТабличнойЧасти.СуммаРасчетов = 0 ИЛИ СтрокаТабличнойЧасти.СуммаПлатежа = 0,
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
	КонецЕсли;
	
	Если Не ЭтоПомощник Тогда
		СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = Форма.СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	Если НЕ НеПересчитыватьИтоги Тогда
		Форма.ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуПлатежаНаКлиенте()

Процедура РасшифровкаПлатежаРасчетыПоКредитамСуммаПлатежаПриИзменении(Форма, СтрокаТабличнойЧасти, ЭтоПомощник = Ложь) Экспорт
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.СуммаРасчетов = 0,
		1,
		СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * ?(ЭтоПомощник, Форма.КурсДокумента, Форма.Курс)
	);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = Форма.СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Функция ДополнитьПараметрыДляОткрытияФормыПомощника(ЭтоОплата, пФорма, СтруктураПараметров) Экспорт
	
	Объект = пФорма.Объект;
	
	ПараметрыФормыРаспределения = Новый Структура;
	
	Для Каждого КлючЗначение Из СтруктураПараметров Цикл
		ПараметрыФормыРаспределения.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	Если СтруктураПараметров.Свойство("ЭтоПередачаТоваровМеждуОрганизациями") И СтруктураПараметров.ЭтоПередачаТоваровМеждуОрганизациями Тогда
		Если СтруктураПараметров.ЭтоРасчетыСПоставщиком Тогда
			ПараметрыФормыРаспределения.Вставить("Организация", Объект.ОрганизацияПолучатель);
			ПараметрыФормыРаспределения.Вставить("Контрагент", Объект.КонтрагентВладелец);
		Иначе
			ПараметрыФормыРаспределения.Вставить("Организация", Объект.Организация);
			ПараметрыФормыРаспределения.Вставить("Контрагент", Объект.КонтрагентПолучатель);
		КонецЕсли;
	Иначе
		ПараметрыФормыРаспределения.Вставить("Организация", Объект.Организация);
		ПараметрыФормыРаспределения.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	ПараметрыФормыРаспределения.Вставить("ДатаДокумента", Объект.Дата);
	
	ПараметрыФормыРаспределения.Вставить("АдресРасшифровкаПлатежаВХранилище", СтруктураПараметров.СтруктураАдресов.АдресРасшифровкаПлатежаВХранилище);
	ПараметрыФормыРаспределения.Вставить("АдресТаблицаДокументовДляИзмененияВХранилище", СтруктураПараметров.СтруктураАдресов.АдресТаблицаДокументовДляИзмененияВХранилище);
	
	ПараметрыФормыРаспределения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыФормыРаспределения.Вставить("Комментарий", Объект.Комментарий);
	
	Если ЭтоОплата Тогда
		
		ПараметрыФормыРаспределения.Вставить("Курс", пФорма.Курс);
		ПараметрыФормыРаспределения.Вставить("Кратность", пФорма.Кратность);
		ПараметрыФормыРаспределения.Вставить("КРаспределению", Макс(Объект.СуммаДокумента, Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа")));
		ПараметрыФормыРаспределения.Вставить("ВидОперации", Объект.ВидОперации);
		
		ПараметрыФормыРаспределения.Вставить("СтавкаНДСПоУмолчанию", пФорма.СтавкаНДСПоУмолчанию);
		ПараметрыФормыРаспределения.Вставить("СтавкаНДСПоУмолчаниюЧисло", пФорма.СтавкаНДСПоУмолчаниюЧисло);
		
	Иначе
		
		КРаспределению = 0;
		УчитыватьДоставку = Истина;
		Для Каждого КлючЗначение Из СтруктураПараметров.СоответствиеИменТЧИРеквизитовДляИтогов Цикл
			Если СтруктураПараметров.Свойство("ЭтоЗаказ") И СтруктураПараметров.ЭтоЗаказ Тогда
				Если Объект.ОжидаетсяВыборВариантаКП Тогда
					// Если основной вариант не выбран, то мы не знаем, сколько нужно оплатить.
					// В этом случае оставляем КРаспределению = 0.
					УчитыватьДоставку = Ложь;
					Прервать;
				КонецЕсли;
				Для Каждого ТекущаяСтрока Из Объект[КлючЗначение.Ключ] Цикл
					Если ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("Строка") Тогда
						Продолжить;
					ИначеЕсли Объект.КоличествоВариантовКП > 1 И ТекущаяСтрока.НомерВариантаКП <> Объект.ОсновнойВариантКП Тогда
						Продолжить;
					КонецЕсли;
					КРаспределению = КРаспределению + ТекущаяСтрока[КлючЗначение.Значение];
				КонецЦикла;
			Иначе
				КРаспределению = КРаспределению + Объект[КлючЗначение.Ключ].Итог(КлючЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		Если УчитыватьДоставку И СтруктураПараметров.Свойство("ЕстьДоставка") И СтруктураПараметров.ЕстьДоставка
			И НЕ Объект.НоменклатураДоставки.Пустая() Тогда
			КРаспределению = КРаспределению + Объект.СтоимостьДоставки + ?(Объект.СуммаВключаетНДС, 0, Объект.СуммаНДСДоставки);
		КонецЕсли;
		
		ПараметрыФормыРаспределения.Вставить("Договор", Объект.Договор);
		
		// В накладных в реквизитах Курс и Кратность храниться информация для валюты расчетов по договору,
		// а не для валюты документа.
		СтруктураКурсИКратностьВалДокумента = РасчетыРаботаСФормамиВызовСервера.ПолучитьКурсИКратностьВалюты(Объект.Дата, Объект.ВалютаДокумента);
		ПараметрыФормыРаспределения.Вставить("Курс", СтруктураКурсИКратностьВалДокумента.Курс);
		ПараметрыФормыРаспределения.Вставить("Кратность", СтруктураКурсИКратностьВалДокумента.Кратность);
		
		ПараметрыФормыРаспределения.Вставить("КурсРасчетов", Объект.Курс);
		ПараметрыФормыРаспределения.Вставить("КратностьРасчетов", Объект.Кратность);
		
		ПараметрыФормыРаспределения.Вставить("КРаспределению", КРаспределению);
		
		ПараметрыФормыРаспределения.Вставить("ВидОперации", Неопределено);
		ПараметрыФормыРаспределения.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
		ПараметрыФормыРаспределения.Вставить("ЭтоЗачетПредоплаты", Истина);
		
		ПараметрыФормыРаспределения.Вставить("АдресТаблицаЗаказыИСумма", СтруктураПараметров.СтруктураАдресов.АдресТаблицаЗаказыИСумма);
		
	КонецЕсли;
	
	Возврат ПараметрыФормыРаспределения;
	
КонецФункции

Процедура ОткрытьФормуРаспределенияСуммыПлатежа(пЭтоОплата, пФорма, СтруктураПараметров) Экспорт
	
	ПараметрыФормыРаспределения = ДополнитьПараметрыДляОткрытияФормыПомощника(пЭтоОплата, пФорма, СтруктураПараметров);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("РаспределитьСуммуПлатежаПослеРаспределения", пФорма, ПараметрыФормыРаспределения);
	
	ОткрытьФорму("Обработка.ПомощникиВеденияВзаиморасчетов.Форма.ФормаРаспределенияСуммыПлатежа",
		Новый Структура("ПараметрыФормыРаспределения", ПараметрыФормыРаспределения),
		пФорма, пФорма.УникальныйИдентификатор
		,,,
		ОписаниеОповещенияОЗакрытии
	);
	
КонецПроцедуры

// Процедура - Распределить сумму платежа после распределения
//
// Параметры:
//  Форма					 - Форма 	 - Форма редактируемого документа
//  РезультатЗакрытия		 - Структура - Результат выбора пользователя
//  ДополнительныеПараметры	 - Структура - Дополнительные параметры процедуры
//
Процедура РаспределитьСуммуПлатежаПослеРаспределения(Форма, РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураВидыИзменяемыхДокументов = ЗаполнитьРасшифровкуПлатежаПоДеревуРаспределения(Форма, РезультатЗакрытия, ДополнительныеПараметры);
	
	Если НЕ ДополнительныеПараметры.ЭтоЗачетПредоплаты Тогда
		НастроитьЭлементыДляИзменяемыхДокументов(Ложь, Форма, СтруктураВидыИзменяемыхДокументов);
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Функция ЕстьТаблицаДокументовДляИзменения(Ссылка) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") 
		ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") 
		ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение") 
		ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура НастроитьЭлементыДляИзменяемыхДокументов(пЭтоОплата, пФорма, пСтруктураВидыИзменяемыхДокументов) Экспорт
	
	Если НЕ ЕстьТаблицаДокументовДляИзменения(пФорма.Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если пФорма.ТаблицаДокументовДляИзменения.Количество() = 0 Тогда
		
		пФорма.ТаблицаДокументовДляИзмененияКартинка = 9;
		
	Иначе
		
		Если пСтруктураВидыИзменяемыхДокументов.ЕстьДокументыПозжеТекущего Тогда
			пФорма.ТаблицаДокументовДляИзмененияКартинка = 0;
		Иначе
			пФорма.ТаблицаДокументовДляИзмененияКартинка = 9;
		КонецЕсли;
		Если пСтруктураВидыИзменяемыхДокументов.ЕстьСуществующийЗачет Тогда
			пФорма.ТаблицаДокументовДляИзмененияКартинка = 1;
		Иначе
			пФорма.ТаблицаДокументовДляИзмененияКартинка = 9;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - Заполнить расшифровку платежа деньги по дереву распределения
//
// Параметры:
//  Форма					 - Форма 	 - Форма редактируемого документа
//  РезультатЗакрытия		 - Структура - Результат выбора пользователя
//  ДополнительныеПараметры	 - Структура - Дополнительные параметры процедуры
// 
// Возвращаемое значение:
//  Структура - Структура видов изменяемых документов
//
Функция ЗаполнитьРасшифровкуПлатежаДеньгиПоДеревуРаспределения(Форма, РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма.Модифицированность = Истина;
	Форма.Объект.РасшифровкаПлатежа.Очистить();
	Форма.ТаблицаДокументовДляИзменения.Очистить();
	
	ЭлементыДерева = РезультатЗакрытия.ДеревоРаспределенияСуммыПлатежа.ПолучитьЭлементы();
	
	СоответствиеСобираемыеДанные = Новый Соответствие;
	СтруктураВидыИзменяемыхДокументов = Новый Структура("ЕстьСуществующийЗачет, ЕстьДокументыПозжеТекущего", Ложь, Ложь);
	ЗаполнитьРасшифровкуПлатежаДеньгиПоДеревуРаспределенияРекурсивно(Форма, ЭлементыДерева, СтруктураВидыИзменяемыхДокументов, СоответствиеСобираемыеДанные, РезультатЗакрытия);
	
	// Распределим остаток.
	ОстатокПослеРаспределения = (Форма.Объект.СуммаДокумента - Форма.Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа"));
	Если ОстатокПослеРаспределения > 0 Тогда
		
		Для Каждого ТекущийЭлементДерева Из ЭлементыДерева Цикл
			Если ТекущийЭлементДерева.ПолеГруппировки = "Договор"
				И НЕ (РезультатЗакрытия.ВестиРасчетыВЦеломПоКонтрагенту ИЛИ РезультатЗакрытия.ВестиРасчетыТолькоПоДоговорам)
				И ТекущийЭлементДерева.ОжидаетОплаты > 0 Тогда
				
				СтрокаРасшифровки = Форма.Объект.РасшифровкаПлатежа.Добавить();
				ЗаполнитьСтрокуРасшифровки(СтрокаРасшифровки, ТекущийЭлементДерева);
				
				СтрокаРасшифровки.СуммаПлатежа = Мин(ОстатокПослеРаспределения, ТекущийЭлементДерева.ОжидаетОплаты);
				ОстатокПослеРаспределения = ОстатокПослеРаспределения - СтрокаРасшифровки.СуммаПлатежа;
				
				РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаКлиенте(
					СтрокаРасшифровки,
					Форма.Объект.Дата,
					Форма.Объект.ВалютаДенежныхСредств,
					Форма.Курс,
					Форма.Кратность,
					РезультатЗакрытия.СтавкаНДСПоУмолчанию,
					Истина
				);
				
				Если ОстатокПослеРаспределения = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ОстатокПослеРаспределения > 0 Тогда
			ЗаполнитьСтрокуРасшифровкиДеньгиПоНераспределенномуОстатку(Форма,
				ОстатокПослеРаспределения,
				РезультатЗакрытия,
				СоответствиеСобираемыеДанные
			);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВидыИзменяемыхДокументов;
	
КонецФункции

Процедура ТаблицаДляПросмотраОбработкаРасшифровки(пФорма, Элемент, Расшифровка, СтандартнаяОбработка, 
	СтруктураПараметровРасчетов, ЭтоЗачетПредоплаты = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Интеркампани: Поддержка нескольких табличных частей предоплаты в документах
	Если ДополнительныеПараметры = Неопределено ИЛИ НЕ ДополнительныеПараметры.Свойство("ИмяТЧПредоплата") Тогда
		ИмяТЧПредоплата = "Предоплата";
	Иначе
		ИмяТЧПредоплата = ДополнительныеПараметры.ИмяТЧПредоплата;
	КонецЕсли; 
	Если ДополнительныеПараметры = Неопределено ИЛИ НЕ ДополнительныеПараметры.Свойство("ИменаЭлементов") Тогда
		ИменаЭлементов = РаботаСФормойДокументаКлиентСервер.ИменаЭлементовПредоплатыПоУмолчанию();
	Иначе
		ИменаЭлементов = ДополнительныеПараметры.ИменаЭлементов;
	КонецЕсли;
	// Конец Интеркампани
	
	Если СтрНайти(Расшифровка, "ПереходитьВРежимРедактирования") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
		НачалоПодстрокиИндекса = СтрНайти(Расшифровка, "_") + 1;
		ИндексСтроки = Число(Сред(Расшифровка, НачалоПодстрокиИндекса));
		Если ЭтоЗачетПредоплаты Тогда
			пФорма.Элементы[ИменаЭлементов.СтраницыРасчетовСКонтрагентом].ТекущаяСтраница = пФорма.Элементы[ИменаЭлементов.СтраницаРедактирование];
		Иначе
			пФорма.Элементы[ИменаЭлементов.СтраницыРасчетовСКонтрагентом].ТекущаяСтраница = пФорма.Элементы[ИменаЭлементов.СтраницаРучноеЗаполнение];
		КонецЕсли;
		пФорма[ИменаЭлементов.ВариантЗаполненияРасшифровки] = СтруктураПараметровРасчетов.ВариантЗаполненияРасшифровкиВручную;
		Попытка
			Если ЭтоЗачетПредоплаты Тогда
				пФорма.Элементы[ИмяТЧПредоплата].ТекущаяСтрока = пФорма.Объект[ИмяТЧПредоплата][ИндексСтроки].ПолучитьИдентификатор();
			Иначе
				пФорма.Элементы.РасшифровкаПлатежа.ТекущаяСтрока = пФорма.Объект.РасшифровкаПлатежа[ИндексСтроки].ПолучитьИдентификатор();
			КонецЕсли;
			
			СтрСлева = Лев(Расшифровка, НачалоПодстрокиИндекса - 2);
			ИмяПоля = Сред(СтрСлева, СтрДлина("ПереходитьВРежимРедактирования") + 1);
			Попытка
				Если ЭтоЗачетПредоплаты Тогда
					ТекущаяКолонка = пФорма.Элементы[СтрШаблон("%1%2", ИмяТЧПредоплата, ИмяПоля)];
				Иначе
					ТекущаяКолонка = пФорма.Элементы[СтрШаблон("РасшифровкаПлатежа%1", ИмяПоля)];
				КонецЕсли;
			Исключение
				ТекущаяКолонка = Неопределено;
			КонецПопытки;
			Если ТекущаяКолонка <> Неопределено Тогда
				Если ЭтоЗачетПредоплаты Тогда
					пФорма.Элементы[ИмяТЧПредоплата].ТекущийЭлемент = ТекущаяКолонка;
					пФорма.Элементы[ИмяТЧПредоплата].ИзменитьСтроку();
				Иначе
					пФорма.Элементы.РасшифровкаПлатежа.ТекущийЭлемент = ТекущаяКолонка;
					пФорма.Элементы.РасшифровкаПлатежа.ИзменитьСтроку();
				КонецЕсли;
			КонецЕсли;
		Исключение
			//
		КонецПопытки;
		Если Элемент.ТекущаяОбласть.Имя = "СуммаПлатежа" Тогда
			Если ЭтоЗачетПредоплаты Тогда
				пФорма.Элементы[ИмяТЧПредоплата].ТекущийЭлемент = ?(СтруктураПараметровРасчетов.УчетВалютныхОпераций,
					пФорма.Элементы[СтрШаблон("%1СуммаПлатежа", ИмяТЧПредоплата)],
					пФорма.Элементы[СтрШаблон("%1СуммаРасчетов", ИмяТЧПредоплата)]
				);
			Иначе
				пФорма.Элементы.РасшифровкаПлатежа.ТекущийЭлемент = ?(СтруктураПараметровРасчетов.УчетВалютныхОпераций,
					пФорма.Элементы.РасшифровкаПлатежаСуммаПлатежа,
					пФорма.Элементы.РасшифровкаПлатежаСуммаРасчетов
				);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли  Расшифровка = "ОткрытьПомощник" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЭтоЗачетПредоплаты И ИмяТЧПредоплата = "ПредоплатаПолучатель" Тогда
			пФорма.ОткрытьПомощникЗачетаПредоплатыПолучатель(Неопределено);
		ИначеЕсли ЭтоЗачетПредоплаты Тогда
			пФорма.ОткрытьПомощникЗачетаПредоплаты(Неопределено);
		Иначе
			пФорма.РаспределитьСуммуПлатежа(Неопределено);
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Расшифровка) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеНадписиСписокИзменяемыхДокументовНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ВыбранныйЭлемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеНадписиСписокИзменяемыхДокументовНажатие(пФорма, Элемент, СтандартнаяОбработка, НомерСценария = 1) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если НомерСценария = 1 Тогда
		
		ФормаСписокИзменяемыхДокументов = ПолучитьФорму("Обработка.ПомощникиВеденияВзаиморасчетов.Форма.ФормаСписокИзменяемыхДокументов",, пФорма);
		Для Каждого ТекущаяСтрока Из пФорма.ТаблицаДокументовДляИзменения Цикл
			НоваяСтрока = ФормаСписокИзменяемыхДокументов.ТаблицаДокументовДляИзменения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		КонецЦикла;
		ФормаСписокИзменяемыхДокументов.Открыть();
		
		Возврат Неопределено;
		
	Иначе
		
		СписокСсылок = Новый СписокЗначений;
		ТекущиеДанные = пФорма.Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			МассивСтрок = пФорма.ТаблицаДокументовДляИзменения.НайтиСтроки(Новый Структура("ИдентификаторСтрокиРасшифровки", ТекущиеДанные.ПолучитьИдентификатор()));
			Если МассивСтрок.Количество() > 0 Тогда
				Для Каждого ЭлементСписка Из МассивСтрок Цикл
					Если ЭлементСписка.ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Удаление") Тогда
						Продолжить;
					Иначе
						СписокСсылок.Добавить(ПолучитьНавигационнуюСсылку(ЭлементСписка.Документ), ""+ЭлементСписка.Документ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СписокСсылок.Количество() = 1 Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СписокСсылок[0].Значение);
			Возврат Неопределено;
		ИначеЕсли СписокСсылок.Количество() > 1 Тогда
			Возврат СписокСсылок;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура Подключаемый_ОбработатьАктивизациюСтрокиРасшифровкиПлатежа(пФорма) Экспорт
	
	пФорма.НадписьДокументЗачетаПредоплаты = "";
	пФорма.ТаблицаДокументовДляИзмененияКартинка = 9;
	ТекущиеДанные = пФорма.Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		МассивСтрок = пФорма.ТаблицаДокументовДляИзменения.НайтиСтроки(Новый Структура("ИдентификаторСтрокиРасшифровки", ТекущиеДанные.ПолучитьИдентификатор()));
		КомпонентыФС = Новый Массив;
		Если МассивСтрок.Количество() > 0 Тогда
			Для Каждого ЭлементМассива Из МассивСтрок Цикл
				Если ЭлементМассива.ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Удаление") Тогда
					Продолжить;
				Иначе
					ЭлементНадписи = "" + ЭлементМассива.Документ;
					КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(ЭлементНадписи,,,, ПолучитьНавигационнуюСсылку(ЭлементМассива.Документ)));
					Если ЭлементМассива.ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Добавление") Тогда
						пФорма.ТаблицаДокументовДляИзмененияКартинка = 0;
					Иначе
						пФорма.ТаблицаДокументовДляИзмененияКартинка = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			пФорма.НадписьДокументЗачетаПредоплаты = Новый ФорматированнаяСтрока(КомпонентыФС);
			пФорма.Элементы.ГруппаЗачетПредоплатыПоСтроке.Видимость = Истина;
		Иначе
			пФорма.Элементы.ГруппаЗачетПредоплатыПоСтроке.Видимость = Ложь;
		КонецЕсли;
	Иначе
		пФорма.Элементы.ГруппаЗачетПредоплатыПоСтроке.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработатьАктивизациюСтрокиРасшифровкиПлатежа()

Процедура РасшифровкаПлатежаСпособЗачетаПриИзменении(ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.СпособЗачета = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто")
			ИЛИ (ТекущиеДанные.СпособЗачета = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную") И НЕ ЗначениеЗаполнено(ТекущиеДанные.Документ)) Тогда
			ТекущиеДанные.ПризнакАванса = Истина;
		КонецЕсли;
		
		Если ТекущиеДанные.СпособЗачета = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто") Тогда
			ТекущиеДанные.Документ = Неопределено;
			ТекущиеДанные.Заказ = Неопределено;
			ТекущиеДанные.СчетНаОплату = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредоплатаСуммаРасчетовПриИзменении(СтрокаТабличнойЧасти, пФорма) Экспорт
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
			?(пФорма.Объект.Курс = 0,
			1,
			пФорма.Объект.Курс),
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
			?(пФорма.Объект.Кратность = 0,
			1,
			пФорма.Объект.Кратность),
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(пФорма.Объект.ВалютаДокумента = пФорма.НациональнаяВалюта, пФорма.КурсНациональнаяВалюта, пФорма.Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(пФорма.Объект.ВалютаДокумента = пФорма.НациональнаяВалюта, пФорма.КратностьНациональнаяВалюта, пФорма.Объект.Кратность)
	);

КонецПроцедуры

Процедура ОбработатьИзменениеДоговораКонтрагента(пФорма, СтрокаТабличнойЧасти = Неопределено) Экспорт
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = пФорма.Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
		СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			пФорма.Объект.Дата,
			СтрокаТабличнойЧасти.Договор,
			СтрокаТабличнойЧасти.ДокументПланирования,
			СтрокаТабличнойЧасти.СтатьяДДС
		);
		СтрокаТабличнойЧасти.Курс = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс
		);
		СтрокаТабличнойЧасти.Кратность = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность
		);
		
		СтрокаТабличнойЧасти.СтатьяДДС = СтруктураДанные.СтатьяДДСПоУмолчанию;
		Если пФорма.Объект.ВидОперации = пФорма.ВидОперацииПоставщику Тогда
			СтрокаТабличнойЧасти.СпособЗачета = СтруктураДанные.СпособЗачета;
		Иначе
			СтрокаТабличнойЧасти.СпособЗачета = пФорма.СпособЗачетаВручную;
		КонецЕсли;
		СтрокаТабличнойЧасти.СтавкаНДС = РасчетыРаботаСФормамиВызовСервера.СтавкаНДСПоОрганизацииНалогообложениеНДСИСпособуЗаполнения(пФорма.Объект.Организация, пФорма.Объект.Дата, СтруктураДанные.СпособЗаполненияСтавкиНДС);
		
		Если СтруктураДанные.Свойство("Проект") Тогда
			СтрокаТабличнойЧасти.Проект = СтруктураДанные.Проект;
		КонецЕсли;
		
	Иначе
		СтрокаТабличнойЧасти.СтатьяДДС = РасчетыРаботаСФормамиВызовСервера.ПолучитьСтатьюДДСПоУмолчаниюДляСтрокиРасшифровки(
			СтрокаТабличнойЧасти.Договор,
			СтрокаТабличнойЧасти.ДокументПланирования,
			СтрокаТабличнойЧасти.СтатьяДДС
		);
		
		Если пФорма.Объект.ВидОперации = пФорма.ВидОперацииПоставщику Тогда
			СтрокаТабличнойЧасти.СпособЗачета = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(
				СтрокаТабличнойЧасти.Договор,
				пФорма.Объект.Контрагент,
				Ложь
			);
		Иначе
			СтрокаТабличнойЧасти.СпособЗачета = пФорма.СпособЗачетаВручную;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаРасчетов = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаПлатежа, пФорма.Курс, СтрокаТабличнойЧасти.Курс, пФорма.Кратность,
		СтрокаТабличнойЧасти.Кратность);
	
	СтрокаТабличнойЧасти.ЭтоВзаимозачет = (ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет"));
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

Процедура ОбработатьНачалоВыбораДоговораКонтрагента(пФорма, Элемент, СтандартнаяОбработка, Знач ТекущийДоговор = Неопределено) Экспорт
	
	Если ТекущийДоговор = Неопределено Тогда
		Если пФорма.Элементы.РасшифровкаПлатежа.ТекущиеДанные = Неопределено Тогда
			Возврат;
		Иначе
			ТекущийДоговор = пФорма.Элементы.РасшифровкаПлатежа.ТекущиеДанные.Договор;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = РасчетыРаботаСФормамиВызовСервера.ПолучитьПараметрыФормыВыбора(
		пФорма.Объект.Ссылка,
		пФорма.Объект.Организация,
		пФорма.Объект.Контрагент,
		ТекущийДоговор,
		пФорма.Объект.ВидОперации
	);
	
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ИтогиВСпискахДенежныхДокументов

Процедура ОбновлениеИтоговПриАктивизацииСтрокиСписка(Форма, ТекущаяСтрока, ИмяФормы, ВыполнятьВМобильномКлиенте = Ложь) Экспорт
	
	#Если МобильныйКлиент Тогда
	Если НЕ ВыполнятьВМобильномКлиенте Тогда
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	//БанкИКасса
	Если ИмяФормы = "БанкИКасса" Тогда
		РассчитыватьИтоги = ТекущаяСтрока <> Неопределено И ТекущаяСтрока.Свойство("Дата") И ТекущаяСтрока.Свойство("СчетКасса");
	ИначеЕсли ИмяФормы = "Банк" Тогда
		РассчитыватьИтоги = ТекущаяСтрока <> Неопределено И ТекущаяСтрока.Свойство("Дата") И ТекущаяСтрока.Свойство("БанковскийСчетКасса");
	ИначеЕсли ИмяФормы = "Касса" Тогда
		РассчитыватьИтоги = ТекущаяСтрока <> Неопределено И ТекущаяСтрока.Свойство("Дата") И ТекущаяСтрока.Свойство("СчетКасса");
	ИначеЕсли ИмяФормы = "ПланированиеДенег" Тогда
		РассчитыватьИтоги = ТекущаяСтрока <> Неопределено И ТекущаяСтрока.Свойство("Дата") И ТекущаяСтрока.Свойство("СчетКасса") И ТекущаяСтрока.Свойство("Валюта");
	Иначе
		Возврат;
	КонецЕсли;
	
	Если РассчитыватьИтоги Тогда //БанкКасса
		
		Если ИмяФормы = "ПланированиеДенег" Тогда
		
			СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеПоПланируемымПлатежам(ТекущаяСтрока.Ссылка);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Дата") Тогда
				Форма.Дата = Формат(ТекущаяСтрока.Дата, "ДЛФ=D") + " (" + СтруктураДанные.ПредставлениеВалюты + ")";
			КонецЕсли; 
			
			
			Форма.ТаблицаИтогов[0].Значение = СтруктураДанные.СуммаПриходЗаДень + СтруктураДанные.СуммаПеремещенияЗаДень;
			Форма.ТаблицаИтогов[1].Значение = СтруктураДанные.СуммаРасходЗаДень + СтруктураДанные.СуммаПеремещенияЗаДень;
			Форма.ТаблицаИтогов[3].Значение = СтруктураДанные.СуммаПеремещенияЗаДень;
		
		Иначе
			
			Валюта = ?(ИмяФормы = "Касса", ТекущаяСтрока.Валюта, Неопределено);
			СчетКасса = ?(ИмяФормы = "Банк", ТекущаяСтрока.БанковскийСчетКасса, ТекущаяСтрока.СчетКасса);
			
			СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеПоСчетуКассе(ТекущаяСтрока.Дата, СчетКасса, Валюта);
			ЗаполнитьЗначенияСвойств(Форма, СтруктураДанные);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Дата") Тогда
				Форма.Дата = НСтр("ru = 'Ведомость за '") + Формат(ТекущаяСтрока.Дата, "ДЛФ=D");
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "НомерБанковскогоСчета") Тогда
				НомерБанковскогоСчета = СтруктураДанные.НомерБанковскогоСчета;
				Если СтруктураДанные.УчетВалютныхОпераций Тогда
					Форма.НомерБанковскогоСчета = НомерБанковскогоСчета + " (" + ?(ЗначениеЗаполнено(ТекущаяСтрока.Валюта), ТекущаяСтрока.Валюта, НСтр("ru = '<валюта пустая>'")) + ")";
				КонецЕсли;
			КонецЕсли;
			Форма.ТаблицаИтогов[0].Значение = Форма.ИнформацияСуммаВалНачальныйОстаток;
			Форма.ТаблицаИтогов[1].Значение = Форма.ИнформацияСуммаВалПриход;
			Форма.ТаблицаИтогов[2].Значение = Форма.ИнформацияСуммаВалРасход;
			Форма.ТаблицаИтогов[3].Значение = Форма.ИнформацияСуммаВалКонечныйОстаток;
		
		КонецЕсли;
		
	Иначе
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИнформацияСуммаВалКонечныйОстаток") Тогда
			Форма.ИнформацияСуммаВалКонечныйОстаток = 0;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИнформацияСуммаВалНачальныйОстаток") Тогда
			Форма.ИнформацияСуммаВалНачальныйОстаток = 0;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИнформацияСуммаВалПриход") Тогда
			Форма.ИнформацияСуммаВалПриход = 0;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИнформацияСуммаВалРасход") Тогда
			Форма.ИнформацияСуммаВалРасход = 0;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "НомерБанковскогоСчета") Тогда
			Форма.НомерБанковскогоСчета = "";
		КонецЕсли;
		
		Форма.ТаблицаИтогов[0].Значение = 0;
		Форма.ТаблицаИтогов[1].Значение = 0;
		Форма.ТаблицаИтогов[2].Значение = 0;
		Форма.ТаблицаИтогов[3].Значение = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуИтоговКонтекстноеМеню(Форма, ИмяФормыРодителя) Экспорт
	
	ПараметрыИтогов = Новый Структура;
	
	Если ИмяФормыРодителя = "БанкИКасса" ИЛИ ИмяФормыРодителя = "Банк" Тогда
		ТекущаяСтрокаОтбор = Форма.Элементы.БанковскиеВыписки.ТекущиеДанные;
	ИначеЕсли ИмяФормыРодителя = "Касса" Тогда
		ТекущаяСтрокаОтбор = Форма.Элементы.ДокументыПоКассе.ТекущиеДанные;
	Иначе
		ТекущаяСтрокаОтбор = Форма.Элементы.Список.ТекущиеДанные;
	КонецЕсли; 
	
	ПараметрыИтогов.Вставить("ИмяФормыРодителя", 		 ИмяФормыРодителя);
	ПараметрыИтогов.Вставить("ТекущаяСтрокаОтбор", 		 ТекущаяСтрокаОтбор);
	Если ИмяФормыРодителя = "БанкИКасса" ИЛИ ИмяФормыРодителя = "Банк" ИЛИ ИмяФормыРодителя = "Касса" Тогда
		ПараметрыИтогов.Вставить("ВариантОтображенияИтогов", Форма.ВариантОтображенияИтогов);
		ПараметрыИтогов.Вставить("ОтборВалютаВедомости", 	 Форма.ОтборВалютаВедомости);
		ПараметрыИтогов.Вставить("ОтборВалютаОстатков", 	 Форма.ОтборВалютаОстатков);
		ПараметрыИтогов.Вставить("ОтборПериод", 	 		 Форма.ОтборПериод);
	КонецЕсли; 
		
	ОткрытьФорму("ОбщаяФорма.ИтогиПанелиОтборов_МК", ПараметрыИтогов, Форма);
	
КонецПроцедуры

Процедура ОбработкаОповещенияОбИзмененииНастроекИтогов(Форма, Параметр) Экспорт
	Если ТипЗнч(Параметр) = Тип("Структура") Тогда
		Форма.ВариантОтображенияИтогов = Параметр.ВариантОтображенияИтогов;
		Форма.ОтборВалютаВедомости = Параметр.ОтборВалютаВедомости;
		Форма.ОтборВалютаОстатков = Параметр.ОтборВалютаОстатков;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

Функция ПолучитьТекстПредупрежденияДанныеБудутЗаписаны() Экспорт
	
	Возврат НСтр("ru = 'Работа с помощником возможна после записи.
		|Документ будут записан.'");
	
КонецФункции

#Область КурсыВалютВФормахДокументов

Процедура ЗаполнитьСписокВыбораВалютЭлементаФормы(ЭлементКурс, Валюта, Дата, ДополнительнаяДата = Неопределено) Экспорт
	
	ЭлементКурс.СписокВыбора.Очистить();
	
	СписокКурсовВалют = РасчетыРаботаСФормамиВызовСервера.ПолучитьСписокКурсовВалют(Валюта, Дата, ДополнительнаяДата);
	
	Для Каждого КурсНаДату Из СписокКурсовВалют Цикл
		ЭлементКурс.СписокВыбора.Добавить(КурсНаДату.Значение, КурсНаДату.Представление);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПредоплатаКурсНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, ИмяТабличнойЧасти = "") Экспорт
	
	Объект = Форма.Объект;
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		СтрокаПлатеж = Форма.Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "Предоплата") Тогда
		СтрокаПлатеж = Форма.Элементы.Предоплата.ТекущиеДанные;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "Оплаты") Тогда
		СтрокаПлатеж = Форма.Элементы.Оплаты.ТекущиеДанные;
	Иначе
		Возврат;
	КонецЕсли; 
	
	Если ИмяТабличнойЧасти = "РасшифровкаПлатежаРасчетыПоКредитам" Тогда
		Договор = Объект.ДоговорКредитаЗайма;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаПлатеж, "Договор") Тогда
		Договор = СтрокаПлатеж.Договор;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Договор") Тогда
		Договор = Форма.Объект.Договор;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Сообщить("Перед установкой курса расчетов необходимо выбрать договор!");
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорКонтрагента",      Договор);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатеж.Кратность);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов",      СтрокаПлатеж.Курс);
	ПараметрыДокумента.Вставить("Дата",                    Объект.Дата);
	ПараметрыДокумента.Вставить("ДокументРасчетов",        СтрокаПлатеж.Документ);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",        Форма);
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("КурсРасчетовНачалоВыбораЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

Процедура КурсРасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма        = ДополнительныеПараметры.Форма;
	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	ИмяТабличнойЧасти = ДополнительныеПараметры.ИмяТабличнойЧасти;
	
	ТипДокумента = ТипЗнч(Форма.Объект.Ссылка);
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.Курс      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.Кратность = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
	Если ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		ПриИзмененииКурсаВСтрокеРасшифровкиПлатежноеПоручение(Форма);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
		ПриИзмененииКурсаВСтрокеРасшифровкиПлатежноеОперацияПоПлатежнойКарте(Форма);
	ИначеЕсли ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		ПриИзмененииКурсаВСтрокеРасшифровки(Форма, ИмяТабличнойЧасти, "Курс");
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "Предоплата") Тогда
		ПриИзмененииКурсаВСтрокеПредоплаты(Форма);
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "Оплаты") Тогда
		ПриИзмененииКурсаВСтрокеОплаты(Форма);
	Иначе
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриИзмененииКурсаВСтрокеПредоплаты(Форма, ИмяТЧ = "Предоплата") Экспорт

	СтрокаТабличнойЧасти = Форма.Элементы[ИмяТЧ].ТекущиеДанные;
	Объект = Форма.Объект;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = Форма.НациональнаяВалюта, Форма.КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = Форма.НациональнаяВалюта, Форма.КратностьНациональнаяВалюта, Объект.Кратность)
	);

КонецПроцедуры

Процедура ПриИзмененииКурсаВСтрокеОплаты(Форма) Экспорт

	СтрокаТабличнойЧасти = Форма.Элементы.Оплаты.ТекущиеДанные;
	Объект = Форма.Объект;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
		СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов, СтрокаТабличнойЧасти.Курс, Объект.Курс, СтрокаТабличнойЧасти.Кратность,
		Объект.Кратность);

	Форма.ПотраченоИтог = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего") + Объект.Оплаты.Итог("СуммаПлатежа");
	
КонецПроцедуры

Процедура ПриИзмененииКурсаВСтрокеРасшифровки(Форма, ИмяТабличнойЧасти, ИмяПоля = "") Экспорт

	СтрокаТабличнойЧасти = Форма.Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	Объект = Форма.Объект;
	
	Если СтрокаТабличнойЧасти.СуммаПлатежа = 0 И СтрокаТабличнойЧасти.СуммаРасчетов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(Форма, СтрокаТабличнойЧасти, ИмяПоля);
		
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ Форма.ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииКурсаВСтрокеРасшифровкиПлатежноеПоручение(Форма) Экспорт

	СтрокаТабличнойЧасти = Форма.Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.СуммаПлатежа = 0 И СтрокаТабличнойЧасти.СуммаРасчетов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.РассчитатьСуммуПлатежаНаКлиенте(СтрокаТабличнойЧасти, "Курс");
	Форма.ОбновитьСуммыВШапкеДокумента()
	
КонецПроцедуры

Процедура ПриИзмененииКурсаВСтрокеРасшифровкиПлатежноеОперацияПоПлатежнойКарте(Форма) Экспорт
	
	СтрокаТабличнойЧасти = Форма.Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Форма.РассчитатьСуммуПлатежа(СтрокаТабличнойЧасти);
	
	Если Форма.Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Форма.Объект.СуммаДокумента = Форма.Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область Договор

Процедура ЗаполнитьДоговорВНовойСтрокеРасшифровки(пФорма, пТекущиеДанные) Экспорт
	
	Если пФорма.Объект.Контрагент = пФорма.ВладелецДоговораПоУмолчанию Тогда
		пТекущиеДанные.Договор = пФорма.ДоговорКонтрагентаПоУмолчанию;
	ИначеЕсли пФорма.ДоговорКонтрагентаПоУмолчанию.Пустая() Тогда
		пТекущиеДанные.Договор = пФорма.ПолучитьДоговорПоУмолчанию(
			пФорма.Объект.Ссылка,
			пФорма.Объект.Контрагент,
			пФорма.Объект.Организация,
			пФорма.Объект.ВидОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьСтрокуРасшифровки(СтрокаРасшифровки, СтрокаРаспределения)
	
	ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаРаспределения);
	СтрокаРасшифровки.СчетНаОплату = СтрокаРаспределения.СчетНаОплату;
	
	Если СтрокаРасшифровки.СпособЗачета.Пустая() Тогда
		СтрокаРасшифровки.СпособЗачета = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную");
	ИначеЕсли СтрокаРасшифровки.СпособЗачета = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто") Тогда
		СтрокаРасшифровки.ПризнакАванса = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуПлатежаДеньгиПоДеревуРаспределенияРекурсивно(Форма, ЭлементыДерева, СтруктураВидыИзменяемыхДокументов, СоответствиеСобираемыеДанные, РезультатЗакрытия)
	
	Для Каждого ТекущийЭлементДерева Из ЭлементыДерева Цикл
		ЗаполнитьСтрокуРасшифровкиДеньгиПоЭлементуДереваРаспределения(Форма, ТекущийЭлементДерева, СтруктураВидыИзменяемыхДокументов, СоответствиеСобираемыеДанные, РезультатЗакрытия);
		ЗаполнитьРасшифровкуПлатежаДеньгиПоДеревуРаспределенияРекурсивно(Форма, ТекущийЭлементДерева.ПолучитьЭлементы(), СтруктураВидыИзменяемыхДокументов, СоответствиеСобираемыеДанные, РезультатЗакрытия);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьРасшифровкуПлатежаПоДеревуРаспределения(Форма, РезультатЗакрытия, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.Свойство("ИмяТЧПредоплата") Тогда
		Форма.Объект[ДополнительныеПараметры.ИмяТЧПредоплата].Очистить();
	Иначе
		Форма.Объект.Предоплата.Очистить();
	КонецЕсли;
	Форма.ТаблицаДокументовДляИзменения.Очистить();
	
	ЭлементыДерева = РезультатЗакрытия.ДеревоРаспределенияСуммыПлатежа.ПолучитьЭлементы();
	
	СтруктураВидыИзменяемыхДокументов = Новый Структура("ЕстьСуществующийЗачет, ЕстьДокументыПозжеТекущего", Ложь, Ложь);
	ЗаполнитьРасшифровкуПлатежаПоДеревуРаспределенияРекурсивно(Форма, ЭлементыДерева, СтруктураВидыИзменяемыхДокументов, ДополнительныеПараметры);
	
	Возврат СтруктураВидыИзменяемыхДокументов;
	
КонецФункции

Функция ИзменилисьИсходныеЗначения(СтрокаДерева)
	
	Изменились = НЕ (СтрокаДерева.ДокументИсходноеЗначение = СтрокаДерева.Документ
	И СтрокаДерева.ЗаказИсходноеЗначение = СтрокаДерева.Заказ
	И СтрокаДерева.СуммаРасчетовИсходноеЗначение = СтрокаДерева.СуммаРасчетов
	И СтрокаДерева.КурсИсходноеЗначение = СтрокаДерева.Курс
	И СтрокаДерева.СуммаПлатежаИсходноеЗначение = СтрокаДерева.СуммаПлатежа);
	
	Возврат Изменились;
	
КонецФункции

Процедура ЗаполнитьРасшифровкуПлатежаПоДеревуРаспределенияРекурсивно(ЭтаФорма, ЭлементыДерева, СтруктураВидыИзменяемыхДокументов, ДопПараметры)
	
	Для Каждого ТекущийЭлементДерева Из ЭлементыДерева Цикл
		ЗаполнитьСтрокуРасшифровкиПоЭлементуДереваРаспределения(ЭтаФорма, ТекущийЭлементДерева, СтруктураВидыИзменяемыхДокументов, ДопПараметры);
		ЗаполнитьРасшифровкуПлатежаПоДеревуРаспределенияРекурсивно(ЭтаФорма, ТекущийЭлементДерева.ПолучитьЭлементы(), СтруктураВидыИзменяемыхДокументов, ДопПараметры);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуРасшифровкиДеньгиПоЭлементуДереваРаспределения(пФорма, СтрокаРаспределения, СтруктураВидыИзменяемыхДокументов, СоответствиеСобираемыеДанные, РезультатЗакрытия)
	
	Если СтрокаРаспределения.ЭтоАвто Тогда
		СоответствиеСобираемыеДанные.Вставить(СтрокаРаспределения.Договор, Новый Структура("Курс, Кратность", СтрокаРаспределения.Курс, СтрокаРаспределения.Кратность));
	КонецЕсли;
	
	Если НЕ СтрокаРаспределения.Выбран
		И СтрокаРаспределения.ДокументПозжеТекущего И СтрокаРаспределения.ЭтоСуществующийЗачет Тогда
			
		// Теперь добавим информацию о зачете предоплаты в других документах.
		СтрокаРасшифровки = пФорма.ТаблицаДокументовДляИзменения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаРаспределения);
		СтрокаРасшифровки.СуммаПлатежа = СтрокаРаспределения.СуммаПлатежаИсходноеЗначение;
		
		СтрокаРасшифровки.ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Удаление");
		
	ИначеЕсли СтрокаРаспределения.СуммаПлатежа = 0 Тогда
		Возврат;
	ИначеЕсли СтрокаРаспределения.Выбран И СтрокаРаспределения.ДокументПозжеТекущего Тогда
		// Сначала добавим информацию о предоплате.
		СтрокаРасшифровки = пФорма.Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаРаспределения);
		СтрокаРасшифровки.Документ = Неопределено;
		СтрокаРасшифровки.СпособЗачета = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную");
		СтрокаРасшифровки.ПризнакАванса = Истина;
		
		Если НЕ СтрокаРаспределения.ЭтоСуществующийЗачет ИЛИ ИзменилисьИсходныеЗначения(СтрокаРаспределения) Тогда
			// Теперь добавим информацию о зачете предоплаты в других документах.
			СтрокаИзменения = пФорма.ТаблицаДокументовДляИзменения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИзменения, СтрокаРаспределения);
			СтрокаИзменения.ИдентификаторСтрокиРасшифровки = СтрокаРасшифровки.ПолучитьИдентификатор();
			
			Если СтрокаРаспределения.ЭтоСуществующийЗачет Тогда
				СтрокаИзменения.ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Изменение");
			Иначе
				СтрокаИзменения.ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Добавление");
			КонецЕсли;
			СтрокаРасшифровки.СЗачетом = Истина;
		// Иначе ничего не делаем, зачёт уже есть в существующем документе и
		//  пользователь его не менял.
		КонецЕсли;
	ИначеЕсли СтрокаРаспределения.Выбран Тогда
		
		СтрокаРасшифровки = пФорма.Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьСтрокуРасшифровки(СтрокаРасшифровки, СтрокаРаспределения);
		
	КонецЕсли;
	
	Если СтрокаРаспределения.ЭтоСуществующийЗачет Тогда
		СтруктураВидыИзменяемыхДокументов.ЕстьСуществующийЗачет = Истина;
	ИначеЕсли СтрокаРаспределения.ДокументПозжеТекущего Тогда
		СтруктураВидыИзменяемыхДокументов.ЕстьДокументыПозжеТекущего = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуРасшифровкиДеньгиПоНераспределенномуОстатку(пФорма, СуммаНераспределенногоОстатка, РезультатЗакрытия, СоответствиеСобираемыеДанные)
	
	//СтрокаРаспределения = ДеревоРаспределенияСуммыПлатежа.Получить(СтрокаРаспределенияИндекс);
	СтрокаРасшифровки = пФорма.Объект.РасшифровкаПлатежа.Добавить();
	
	СтрокаРасшифровки.Договор = РезультатЗакрытия.ДоговорПоУмолчанию;
	
	Если ЗначениеЗаполнено(РезультатЗакрытия.СпособЗачетаПоУмолчанию) Тогда
		СтрокаРасшифровки.СпособЗачета = РезультатЗакрытия.СпособЗачетаПоУмолчанию;
	Иначе
		СтрокаРасшифровки.СпособЗачета = ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто");
	КонецЕсли;
	СтрокаРасшифровки.ПризнакАванса = Истина;
	СтрокаРасшифровки.СуммаПлатежа = СуммаНераспределенногоОстатка;
	
	Если ЗначениеЗаполнено(РезультатЗакрытия.ДоговорПоУмолчанию) Тогда
		
		ТекущаяВалютаРасчетов = РасчетыРаботаСФормамиВызовСервера.ВалютаРасчетов(РезультатЗакрытия.ДоговорПоУмолчанию);
		ВалютаРасчетовКурсКратность = РасчетыРаботаСФормамиВызовСервера.ПолучитьКурсИКратностьВалюты(пФорма.Объект.Дата, ТекущаяВалютаРасчетов);
		
		СтруктураДанныхПоДоговору = СоответствиеСобираемыеДанные.Получить(РезультатЗакрытия.ДоговорПоУмолчанию);
		
		Если СтруктураДанныхПоДоговору <> Неопределено Тогда
			СтрокаРасшифровки.Курс = ?(СтруктураДанныхПоДоговору.Курс = 0, 1, СтруктураДанныхПоДоговору.Курс);
			СтрокаРасшифровки.Кратность = ?(СтруктураДанныхПоДоговору.Кратность = 0, 1, СтруктураДанныхПоДоговору.Кратность);
		Иначе
			СтрокаРасшифровки.Курс = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
			СтрокаРасшифровки.Кратность = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
		
		Валюта = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
	
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(пФорма.Объект, "ВалютаДенежныхСредств") Тогда
			 Валюта = пФорма.Объект.ВалютаДенежныхСредств;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(пФорма.Объект, "ВалютаДокумента") Тогда
			 Валюта = пФорма.Объект.ВалютаДокумента;
		КонецЕсли; 
		
		// Рассчитаем сумму платежа
		РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаКлиенте(СтрокаРасшифровки,
			пФорма.Объект.Дата,
			Валюта,
			пФорма.Курс,
			пФорма.Кратность,
			пФорма.СтавкаНДСПоУмолчанию
		);
		
	Иначе
		СтрокаРасшифровки.Курс = 1;
		СтрокаРасшифровки.Кратность = 1;
		СтрокаРасшифровки.СуммаРасчетов = СуммаНераспределенногоОстатка;
	КонецЕсли;
	
	// НДС
	Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
		СтрокаРасшифровки.СтавкаНДС = пФорма.СтавкаНДСПоУмолчанию;
	КонецЕсли;
	РассчитатьСуммуНДСНаКлиенте(СтрокаРасшифровки);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуРасшифровкиПоЭлементуДереваРаспределения(ЭтаФорма, СтрокаРаспределения, СтруктураВидыИзменяемыхДокументов, ДопПараметры)
	
	//СтрокаРаспределения = ДеревоРаспределенияСуммыПлатежа.Получить(СтрокаРаспределенияИндекс);
	Если НЕ СтрокаРаспределения.Выбран
		И СтрокаРаспределения.ДокументПозжеТекущего И СтрокаРаспределения.ЭтоСуществующийЗачет
		И ЕстьТаблицаДокументовДляИзменения(ЭтаФорма.Объект.Ссылка) Тогда
			
			// Теперь добавим информацию о зачете предоплаты в других документах.
			СтрокаИзменения = ЭтаФорма.ТаблицаДокументовДляИзменения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИзменения, СтрокаРаспределения);
			СтрокаИзменения.СуммаПлатежа = СтрокаРаспределения.СуммаПлатежаИсходноеЗначение;
			СтрокаИзменения.Договор = ЭтаФорма.Объект.Договор;
			СтрокаИзменения.СуммаРасчетов = СтрокаРаспределения.СуммаРасчетовИсходноеЗначение;
			
			СтрокаИзменения.ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Удаление");
			
	ИначеЕсли СтрокаРаспределения.СуммаПлатежа = 0 Тогда
		Возврат;
	ИначеЕсли СтрокаРаспределения.Выбран
		И (СтрокаРаспределения.ДокументПозжеТекущего ИЛИ СтрокаРаспределения.ЭтоСуществующийЗачет)
		И ЕстьТаблицаДокументовДляИзменения(ЭтаФорма.Объект.Ссылка) Тогда
		// Сначала добавим информацию о предоплате.
		Если НЕ СтрокаРаспределения.ЭтоСуществующийЗачет ИЛИ ИзменилисьИсходныеЗначения(СтрокаРаспределения) Тогда
			// Теперь добавим информацию о зачете предоплаты в других документах.
			СтрокаИзменения = ЭтаФорма.ТаблицаДокументовДляИзменения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИзменения, СтрокаРаспределения);
			СтрокаИзменения.Договор = ЭтаФорма.Объект.Договор;
			
			Если СтрокаРаспределения.ЭтоСуществующийЗачет Тогда
				СтрокаИзменения.ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Изменение");
			Иначе
				СтрокаИзменения.ВариантИзмененияДанных = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияДанныхВДокументахИзПомощника.Добавление");
			КонецЕсли;
		// Иначе ничего не делаем, зачёт уже есть в существующем документе и
		//  пользователь его не менял.
		КонецЕсли;
	ИначеЕсли СтрокаРаспределения.Выбран Тогда
		Если ДопПараметры.Свойство("ИмяТЧПредоплата") Тогда
			СтрокаРасшифровки = ЭтаФорма.Объект[ДопПараметры.ИмяТЧПредоплата].Добавить();
		Иначе
			СтрокаРасшифровки = ЭтаФорма.Объект.Предоплата.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаРаспределения);
		Если ДопПараметры.Свойство("ЭтоЗаказНаряд") И ДопПараметры.ЭтоЗаказНаряд Тогда
			СтрокаРасшифровки.ЭтоПредоплатаБезЗаказа = НЕ ЗначениеЗаполнено(СтрокаРаспределения.Заказ);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаРаспределения.ЭтоСуществующийЗачет Тогда
		СтруктураВидыИзменяемыхДокументов.ЕстьСуществующийЗачет = Истина;
	ИначеЕсли СтрокаРаспределения.ДокументПозжеТекущего Тогда
		СтруктураВидыИзменяемыхДокументов.ЕстьДокументыПозжеТекущего = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ВыборСчетаНаОплату

Процедура РасшифровкаПлатежаСчетНаОплатуНачалоВыбораЗавершение(Форма, Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ДокументСсылка.СчетНаОплату")
		Или ТипЗнч(Результат) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		ТекущаяСтрока = Форма.Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущаяСтрока.СчетНаОплату = Результат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
