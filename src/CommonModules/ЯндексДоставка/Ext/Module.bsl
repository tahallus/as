
#Область ПрограммныйИнтерфейс

Функция Подключена() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиЯндексДоставки.Ссылка
	|ИЗ
	|	Справочник.НастройкиЯндексДоставки КАК НастройкиЯндексДоставки
	|ГДЕ
	|	НЕ НастройкиЯндексДоставки.ПометкаУдаления");
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция НастройкаПоОрганизации(Знач Организация) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиЯндексДоставки.Ссылка
	|ИЗ
	|	Справочник.НастройкиЯндексДоставки КАК НастройкиЯндексДоставки
	|ГДЕ
	|	НастройкиЯндексДоставки.Организация = &Организация
	|	И НЕ НастройкиЯндексДоставки.ПометкаУдаления");
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.НастройкиЯндексДоставки.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ПередатьЗаказ(Знач ЗаказСсылка, Знач СлужбаДоставки, Знач СпособОтгрузки) Экспорт
	
	СвойстваЗаказа = РегистрыСведений.ЯндексДоставка.СвойстваЗаказа(ЗаказСсылка);
	
	СпособОтгрузки = ВыбратьСпособОтгрузки(СлужбаДоставки, СпособОтгрузки);
	
	Если ЗначениеЗаполнено(СвойстваЗаказа.ИдентификаторЗаказа) Тогда
		Результат = ОбновитьЧерновикЗаказа(ЗаказСсылка, СпособОтгрузки, СвойстваЗаказа.ИдентификаторЗаказа)
	Иначе
		Результат = СоздатьЧерновикЗаказа(ЗаказСсылка, СпособОтгрузки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьЧерновикЗаказа(Знач ЗаказСсылка, Знач СпособОтгрузки) Экспорт
	
	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
	СтрШаблон("https://delivery.yandex.ru/api/last/%1", ИмяМетодаСоздатьЧерновикЗаказа()));
	
	ДанныеЗаказа = ДанныеЗаказа(ЗаказСсылка);
	
	НастройкаПодключения = НастройкаПодключения(ДанныеЗаказа.Организация);
	Если НастройкаПодключения = Неопределено Тогда
		Возврат ОтсутствуетНастройкаПодключения(ДанныеЗаказа.Организация);
	КонецЕсли;
	
	ПоляЗапроса = Новый Соответствие;
	
	ЗаполнитьШапкуЗаказа(ПоляЗапроса, ДанныеЗаказа, НастройкаПодключения.Идентификаторы);
	ЗаполнитьДанныеПолучателя(ПоляЗапроса, ДанныеЗаказа);
	ЗаполнитьАдресВрученияЗаказа(ПоляЗапроса, ДанныеЗаказа);
	ЗаполнитьСписокТоваровВЗаказе(ПоляЗапроса, ДанныеЗаказа);
	ЗаполнитьСведенияОДоставке(ПоляЗапроса, ДанныеЗаказа, СпособОтгрузки);
	
	ТелоЗапроса = ТелоЗапроса(
	ПоляЗапроса,
	ИмяМетодаСоздатьЧерновикЗаказа(),
	НастройкаПодключения.КлючиМетодов);
	
	ОтветСервера = ВызовМетода(АдресAPI, "POST",, ТелоЗапроса);
	
	Результат = ИзвлечьРезультатИзОтветаСервера(ОтветСервера, ЗаказСсылка, СпособОтгрузки);
	
	Возврат Результат;
	
КонецФункции

Функция ОбновитьЧерновикЗаказа(Знач ЗаказСсылка, Знач СпособОтгрузки, Знач ИдентификаторЗаказа) Экспорт
	
	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
	СтрШаблон("https://delivery.yandex.ru/api/last/%1", ИмяМетодаОбновитьЧерновикЗаказа()));
	
	ДанныеЗаказа = ДанныеЗаказа(ЗаказСсылка);
	
	НастройкаПодключения = НастройкаПодключения(ДанныеЗаказа.Организация);
	Если НастройкаПодключения = Неопределено Тогда
		Возврат ОтсутствуетНастройкаПодключения(ДанныеЗаказа.Организация);
	КонецЕсли;
	
	ПоляЗапроса = Новый Соответствие;
	ПоляЗапроса["order_id"] = ИдентификаторЗаказа;
	
	ЗаполнитьШапкуЗаказа(ПоляЗапроса, ДанныеЗаказа, НастройкаПодключения.Идентификаторы);
	ЗаполнитьДанныеПолучателя(ПоляЗапроса, ДанныеЗаказа);
	ЗаполнитьАдресВрученияЗаказа(ПоляЗапроса, ДанныеЗаказа);
	ЗаполнитьСписокТоваровВЗаказе(ПоляЗапроса, ДанныеЗаказа);
	ЗаполнитьСведенияОДоставке(ПоляЗапроса, ДанныеЗаказа, СпособОтгрузки);
	
	ТелоЗапроса = ТелоЗапроса(
	ПоляЗапроса,
	ИмяМетодаОбновитьЧерновикЗаказа(),
	НастройкаПодключения.КлючиМетодов);
	
	ОтветСервера = ВызовМетода(АдресAPI, "POST",, ТелоЗапроса);
	
	Результат = ИзвлечьРезультатИзОтветаСервера(ОтветСервера, ЗаказСсылка, СпособОтгрузки);
	
	Возврат Результат;
	
КонецФункции

Функция ИзвлечьРезультатИзОтветаСервера(Знач ОтветСервера, Знач ЗаказСсылка, Знач СпособОтгрузки)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСервера);
	
	Результат = ПрочитатьJSON(ЧтениеJSON, Истина);
	Если Результат["status"] = "ok" Тогда
		РегистрыСведений.ЯндексДоставка.ЗаписатьСвойстваЗаказа(
		ЗаказСсылка,
		СпособОтгрузки,
		Результат["data"]["order"]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаданиеПередатьЗаказ(Знач Параметры, Знач АдресХранилища) Экспорт
	
	Результат = ПередатьЗаказ(Параметры.ЗаказПокупателя, Параметры.СлужбаДоставки, Перечисления.СпособыОтгрузки.ПустаяСсылка());
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Задание ищет подходящие варианты доставки.
//
// Параметры:
//  Параметры		 - Структура - ключи:
//   * ПараметрыПоискаСпособаДоставки - Структура - ключи см. в описании ВариантыДоставкиЗаказа(),
//  АдресХранилища	 - Строка - адрес во временном хранилище, куда будут помещены результаты выполнения задания.
//
Процедура ЗаданиеПоискаВариантов(Знач Параметры, Знач АдресХранилища) Экспорт
	
	Результат = ВариантыДоставкиЗаказа(Параметры);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Возвращает подходящие варианты доставки заказа.
//
// Параметры:
//  ПараметрыПоискаСпособаДоставки	 - Структура - ключи:
//   * Организация - СправочникСсылка.Организации,
//   * Магазин - СправочникСсылка.СтруктурныеЕдиницы,
//   * СпособДоставки - ПеречислениеСсылка.СпособыДоставки,
//   * АдресОтправленияЗначение - Строка,
//   * АдресДоставкиЗначение - Строка,
//   * Вес - Число,
//   * Высота - Число,
//   * Длина - Число,
//   * Ширина - Число,
//   * ОбъявленнаяЦенность - Число.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица вариантов доставки по идентификаторам Яндекса.
//
Функция ВариантыДоставкиЗаказа(Знач ПараметрыПоискаСпособаДоставки) Экспорт
	
	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
	СтрШаблон("https://delivery.yandex.ru/api/last/%1", ИмяМетодаСпособыДоставки()));
	
	НастройкаПодключения = НастройкаПодключения(ПараметрыПоискаСпособаДоставки.Организация);
	Если НастройкаПодключения = Неопределено Тогда
		Возврат ОтсутствуетНастройкаПодключения(ПараметрыПоискаСпособаДоставки.Организация);
	КонецЕсли;
	
	ПоляЗапроса = Новый Соответствие;
	ПоляЗапроса["client_id"] = НастройкаПодключения.Идентификаторы.УчетнаяЗапись;
	Если ЗначениеЗаполнено(НастройкаПодключения.Идентификаторы.Магазины[ПараметрыПоискаСпособаДоставки.Магазин]) Тогда
		ПоляЗапроса["sender_id"] = НастройкаПодключения.Идентификаторы.Магазины[ПараметрыПоискаСпособаДоставки.Магазин];
	Иначе
		ПоляЗапроса["sender_id"] = НастройкаПодключения.Идентификаторы.МагазинПоУмолчанию;
	КонецЕсли;
	
	СведенияОбАдресеОтправления = РаботаСАдресами.СведенияОбАдресе(ПараметрыПоискаСпособаДоставки.АдресОтправленияЗначение);
	ПоляЗапроса["city_from"] = ЗначениеПоляГород(СведенияОбАдресеОтправления);
	Если Не ЗначениеЗаполнено(ПоляЗапроса["city_from"]) Тогда
		ВызватьИсключение
		НСтр("ru = 'Адрес отправления указан неверно.
		|Удостоверьтесь, что все поля адреса отправления корректно заполнены.'");
	КонецЕсли;
	
	СведенияОбАдресеДоставки = РаботаСАдресами.СведенияОбАдресе(ПараметрыПоискаСпособаДоставки.АдресДоставкиЗначение);
	ПоляЗапроса["index_city"] = СведенияОбАдресеДоставки.Индекс;
	ПоляЗапроса["city_to"] = ЗначениеПоляГород(СведенияОбАдресеДоставки);
	Если Не ЗначениеЗаполнено(ПоляЗапроса["city_to"]) Тогда
		ВызватьИсключение
		НСтр("ru = 'Адрес доставки указан неверно.
		|Удостоверьтесь, что все поля адреса доставки корректно заполнены.'");
	КонецЕсли;
	
	ПоляЗапроса["length"] = ПараметрыПоискаСпособаДоставки.Длина;
	ПоляЗапроса["width"] = ПараметрыПоискаСпособаДоставки.Ширина;
	ПоляЗапроса["height"] = ПараметрыПоискаСпособаДоставки.Высота;
	ПоляЗапроса["weight"] = ПараметрыПоискаСпособаДоставки.Вес;
	ПоляЗапроса["assessed_value"] = ПараметрыПоискаСпособаДоставки.ОбъявленнаяЦенность;
	
	Если ПараметрыПоискаСпособаДоставки.СпособДоставки = Перечисления.СпособыДоставки.Курьер Тогда
		ПоляЗапроса["delivery_type"] = "todoor";
	ИначеЕсли ПараметрыПоискаСпособаДоставки.СпособДоставки = Перечисления.СпособыДоставки.ПунктВыдачи Тогда
		ПоляЗапроса["delivery_type"] = "pickup";
	ИначеЕсли ПараметрыПоискаСпособаДоставки.СпособДоставки = Перечисления.СпособыДоставки.Почта Тогда
		ПоляЗапроса["delivery_type"] = "post";
	ИначеЕсли ПараметрыПоискаСпособаДоставки.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз Тогда
		ВызватьИсключение НСтр("ru = 'Выбран неподходящий способ доставки.'");
	КонецЕсли;
	
	ТелоЗапроса = ТелоЗапроса(
	ПоляЗапроса,
	ИмяМетодаСпособыДоставки(),
	НастройкаПодключения.КлючиМетодов);
	
	ОтветСервера = ВызовМетода(АдресAPI, "POST",, ТелоЗапроса);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСервера);
	
	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	Если РезультатЧтенияJSON["status"] = "error" Тогда
		ВызватьИсключение СообщениеОбОшибке(РезультатЧтенияJSON);
	КонецЕсли;
	
	Возврат ТаблицаВариантовДоставкиПоИдентификаторамЯндекса(РезультатЧтенияJSON);
	
КонецФункции

// Выполняет корректировку цен, количества и суммы в таблице заказа "Запасы" для передачи в Яндекс.Доставку.
// Выдержка из условий https://yandex.ru/legal/delivery_terms_of_service/
// 5.4. Заказчик соглашается с тем, что данные о стоимости товаров и услуг (в том числе о сумме к уплате 
// Покупателем) при использовании Системы Яндекс.Доставка указываются в целых рублях (без учета копеек).
// При этом не применяются правила математического округления.
//
// Параметры:
//  ТаблицаЗапасы - таблица с колонками:
//   * НомерСтроки,
//   * Количество,
//   * КоличествоДляДоставки,
//   * ЦенаДляДоставки,
//   * СуммаДляДоставки.
//
Процедура РассчитатьЦеныДляДоставки(Знач ТаблицаЗапасы) Экспорт
	
	Для Каждого ТекПозиция Из ТаблицаЗапасы Цикл
		ТекПозиция.КоличествоДляДоставки = Окр(ТекПозиция.Количество);
		Если ТекПозиция.КоличествоДляДоставки = 0 Тогда
			ТекПозиция.КоличествоДляДоставки = 1;
		КонецЕсли;
		ТекПозиция.ЦенаДляДоставки = Окр(ТекПозиция.Всего / ТекПозиция.КоличествоДляДоставки);
		ТекПозиция.СуммаДляДоставки = ТекПозиция.ЦенаДляДоставки * ТекПозиция.КоличествоДляДоставки;
	КонецЦикла;
	
	ТаблицаЗапасы.Сортировать("ЦенаДляДоставки Убыв");
	
	Разница = Окр(ТаблицаЗапасы.Итог("СуммаДляДоставки") - ТаблицаЗапасы.Итог("Всего"), 0, РежимОкругления.Окр15как10);
	
	СчетчикИтераций = 0;
	
	Пока Разница > 0 Цикл
		
		Если СчетчикИтераций > ТаблицаЗапасы.Количество() Тогда
			Прервать;
		КонецЕсли;
		
		СчетчикИтераций = СчетчикИтераций + 1;
		
		Для Каждого ТекПозиция Из ТаблицаЗапасы Цикл
			
			Если Разница <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если ТекПозиция.ЦенаДляДоставки < 2 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяЦенаДляДоставки = ТекПозиция.ЦенаДляДоставки - 1;
			Декремент = ТекПозиция.СуммаДляДоставки - НоваяЦенаДляДоставки * ТекПозиция.КоличествоДляДоставки;
			
			Если Декремент > Разница Тогда
				Продолжить;
			КонецЕсли;
			
			Разница = Разница - Декремент;
			ТекПозиция.ЦенаДляДоставки = НоваяЦенаДляДоставки;
			ТекПозиция.СуммаДляДоставки = ТекПозиция.ЦенаДляДоставки * ТекПозиция.КоличествоДляДоставки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаЗапасы.Сортировать("НомерСтроки");
	
КонецПроцедуры

// Задание обновляет данные заказов, отправленных в Яндекс.Доставку.
Процедура ЗаданиеЗагрузкаДанныхИзЯндексДоставки(Ключ, АдресХранилища = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаДанныхИзЯндексДоставки);
	
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Ключ) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаНастройки = Справочники.НастройкиЯндексДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор(Ключ));
	
	Если Не ОбщегоНазначения.СсылкаСуществует(СсылкаНаНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиЯндексДоставки.Организация
	|ИЗ
	|	Справочник.НастройкиЯндексДоставки КАК НастройкиЯндексДоставки
	|ГДЕ
	|	НастройкиЯндексДоставки.Ссылка = &СсылкаНаНастройки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЯндексДоставкиСостояния.ВидЗаказаПокупателя,
	|	НастройкиЯндексДоставкиСостояния.СостояниеЗаказаПокупателя,
	|	НастройкиЯндексДоставкиСостояния.СтатусЯндексДоставки
	|ИЗ
	|	Справочник.НастройкиЯндексДоставки.Состояния КАК НастройкиЯндексДоставкиСостояния
	|ГДЕ
	|	НастройкиЯндексДоставкиСостояния.Ссылка = &СсылкаНаНастройки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЯндексДоставкиМагазины.Ссылка.Организация,
	|	НастройкиЯндексДоставкиМагазины.СтруктурнаяЕдиница,
	|	НастройкиЯндексДоставкиМагазины.Идентификатор
	|ПОМЕСТИТЬ ВТ_Магазины
	|ИЗ
	|	Справочник.НастройкиЯндексДоставки.Магазины КАК НастройкиЯндексДоставкиМагазины
	|ГДЕ
	|	НастройкиЯндексДоставкиМагазины.Ссылка = &СсылкаНаНастройки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЯндексДоставка.ЗаказПокупателя.СтруктурнаяЕдиницаПродажи КАК ТочкаПродажи,
	|	ЯндексДоставка.ЗаказПокупателя,
	|	ЯндексДоставка.ЗаказПокупателя.ВидЗаказа КАК ВидЗаказа,
	|	ЯндексДоставка.ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЯндексДоставка.ИдентификаторЗаказа,
	|	ЯндексДоставка.Статус,
	|	ЯндексДоставка.ИзмененЛокально
	|ИЗ
	|	РегистрСведений.ЯндексДоставка КАК ЯндексДоставка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Магазины КАК ВТ_Магазины
	|		ПО ЯндексДоставка.ЗаказПокупателя.Организация = ВТ_Магазины.Организация
	|ГДЕ
	|	ЯндексДоставка.ЗаказПокупателя.СостояниеЗаказа <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
	|	И ВТ_Магазины.Идентификатор <> 0");
	Запрос.УстановитьПараметр("СсылкаНаНастройки", СсылкаНаНастройки);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаОрганизация = РезультатыЗапросов[0].Выбрать();
	ВыборкаОрганизация.Следующий();
	
	НастройкаПодключения = НастройкаПодключения(ВыборкаОрганизация.Организация);
	Если НастройкаПодключения = Неопределено Тогда
		ВызватьИсключение
		СтрШаблон(
		НСтр("ru = 'Отсутствует настройка подключения к Яндекс.Доставке для организации ""%1""'"),
		ВыборкаОрганизация.Организация);
	КонецЕсли;
	
	ЗаказыПоТочкамПродажи = Новый Соответствие;
	СвойстваЗаказовПоИдентификаторам = Новый Соответствие;
	ВыборкаЗаказы = РезультатыЗапросов[3].Выбрать();
	
	Пока ВыборкаЗаказы.Следующий() Цикл
		
		Если ЗаказыПоТочкамПродажи[ВыборкаЗаказы.ТочкаПродажи] = Неопределено Тогда
			ЗаказыПоТочкамПродажи[ВыборкаЗаказы.ТочкаПродажи] = Новый Массив;
		КонецЕсли;
		
		ИдентификаторЗаказа = Формат(ВыборкаЗаказы.ИдентификаторЗаказа, "ЧГ=");
		
		ЗаказыПоТочкамПродажи[ВыборкаЗаказы.ТочкаПродажи].Добавить(ИдентификаторЗаказа);
		СвойстваЗаказовПоИдентификаторам[ИдентификаторЗаказа] = Новый Структура;
		СвойстваЗаказовПоИдентификаторам[ИдентификаторЗаказа].Вставить("ЗаказПокупателя", ВыборкаЗаказы.ЗаказПокупателя);
		СвойстваЗаказовПоИдентификаторам[ИдентификаторЗаказа].Вставить("ВидЗаказа", ВыборкаЗаказы.ВидЗаказа);
		СвойстваЗаказовПоИдентификаторам[ИдентификаторЗаказа].Вставить("СостояниеЗаказа", ВыборкаЗаказы.СостояниеЗаказа);
		СвойстваЗаказовПоИдентификаторам[ИдентификаторЗаказа].Вставить("Статус", ВыборкаЗаказы.Статус);
		СвойстваЗаказовПоИдентификаторам[ИдентификаторЗаказа].Вставить("ИзмененЛокально", ВыборкаЗаказы.ИзмененЛокально);
		
	КонецЦикла;
	
	ОбновленныеЗаказы = Новый Соответствие;
	
	Для Каждого ТекЭлемент Из ЗаказыПоТочкамПродажи Цикл
		
		ДанныеЗаказовИзЯндексДоставки = ДанныеЗаказовИзЯндексДоставки(
		ТекЭлемент.Ключ,
		ТекЭлемент.Значение,
		НастройкаПодключения);
		
		ОбновитьСостоянияИДанныеЗаказов(
		ДанныеЗаказовИзЯндексДоставки,
		СвойстваЗаказовПоИдентификаторам,
		РезультатыЗапросов[1].Выгрузить(),
		ОбновленныеЗаказы,
		НастройкаПодключения);
		
	КонецЦикла;
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ОбновленныеЗаказы, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаданиеРассчитатьСтоимостьДоставки(Знач Параметры, Знач АдресХранилища) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СтоимостьДоставки", 0);
	Результат.Вставить("СебестоимостьДоставки", 0);
	
	ВариантыДоставкиЗаказа = ВариантыДоставкиЗаказа(Параметры.ПараметрыПоискаСпособаДоставки);
	НайденныеСтроки = ВариантыДоставкиЗаказа.НайтиСтроки(Новый Структура("СлужбаДоставки", Параметры.СлужбаДоставки));
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		Если ТекСтрока.ЗонаТариф = Параметры.ЗонаТариф Тогда
			
			Результат.СтоимостьДоставки = ТекСтрока.СтоимостьДляПолучателя;
			
			РасчетСтоимостиДляМагазина = РассчитатьСтоимостьДляМагазина(
			ТекСтрока,
			Параметры.ПараметрыПоискаСпособаДоставки.СуммаЗаказа,
			Параметры.ПараметрыПоискаСпособаДоставки.ОбъявленнаяЦенность);
			
			Результат.СебестоимостьДоставки = РасчетСтоимостиДляМагазина.СтоимостьДляМагазина;
			
			ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		// Если стоимость доставки указана только для другого тарифа,
		// то установим этот тариф.
		Результат.Вставить("ЗонаТариф", НайденныеСтроки[0].ЗонаТариф);
		Результат.СтоимостьДоставки = НайденныеСтроки[0].СтоимостьДляПолучателя;
		
		РасчетСтоимостиДляМагазина = РассчитатьСтоимостьДляМагазина(
		ТекСтрока,
		Параметры.ПараметрыПоискаСпособаДоставки.СуммаЗаказа,
		Параметры.ПараметрыПоискаСпособаДоставки.ОбъявленнаяЦенность);
		
		Результат.СебестоимостьДоставки = РасчетСтоимостиДляМагазина.СтоимостьДляМагазина;
		
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Неопределено, АдресХранилища);
	
КонецПроцедуры

Функция СкладыСлужбДоставки(Знач ПараметрыПоискаСпособаДоставки) Экспорт
	
	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
	СтрШаблон("https://delivery.yandex.ru/api/last/%1", ИмяМетодаСписокСлужбДоставки()));
	
	НастройкаПодключения = НастройкаПодключения(ПараметрыПоискаСпособаДоставки.Организация);
	Если НастройкаПодключения = Неопределено Тогда
		Возврат ОтсутствуетНастройкаПодключения(ПараметрыПоискаСпособаДоставки.Организация);
	КонецЕсли;
	
	ПоляЗапроса = Новый Соответствие;
	ПоляЗапроса["client_id"] = НастройкаПодключения.Идентификаторы.УчетнаяЗапись;
	Если ЗначениеЗаполнено(НастройкаПодключения.Идентификаторы.Магазины[ПараметрыПоискаСпособаДоставки.Магазин]) Тогда
		ПоляЗапроса["sender_id"] = НастройкаПодключения.Идентификаторы.Магазины[ПараметрыПоискаСпособаДоставки.Магазин];
	Иначе
		ПоляЗапроса["sender_id"] = НастройкаПодключения.Идентификаторы.МагазинПоУмолчанию;
	КонецЕсли;
	
	ПоляЗапроса["sender_region_filter"] = 1;
	ПоляЗапроса["with_days_off"] = 1;
	
	ТелоЗапроса = ТелоЗапроса(
	ПоляЗапроса,
	ИмяМетодаСписокСлужбДоставки(),
	НастройкаПодключения.КлючиМетодов);
	
	ОтветСервера = ВызовМетода(АдресAPI, "POST",, ТелоЗапроса);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСервера);
	
	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	Возврат СкладыСлужбДоставкиПоТипу(РезультатЧтенияJSON);
	
КонецФункции

Функция ИнформацияОСкладе(Знач ПараметрыПоискаСпособаДоставки) Экспорт
	
	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
	СтрШаблон("https://delivery.yandex.ru/api/last/%1", ИмяМетодаИнформацияОСкладе()));
	
	НастройкаПодключения = НастройкаПодключения(ПараметрыПоискаСпособаДоставки.Организация);
	Если НастройкаПодключения = Неопределено Тогда
		Возврат ОтсутствуетНастройкаПодключения(ПараметрыПоискаСпособаДоставки.Организация);
	КонецЕсли;
	
	ПоляЗапроса = Новый Соответствие;
	ПоляЗапроса["client_id"] = НастройкаПодключения.Идентификаторы.УчетнаяЗапись;
	Если ЗначениеЗаполнено(НастройкаПодключения.Идентификаторы.Магазины[ПараметрыПоискаСпособаДоставки.Магазин]) Тогда
		ПоляЗапроса["sender_id"] = НастройкаПодключения.Идентификаторы.Магазины[ПараметрыПоискаСпособаДоставки.Магазин];
	Иначе
		ПоляЗапроса["sender_id"] = НастройкаПодключения.Идентификаторы.МагазинПоУмолчанию;
	КонецЕсли;
	Если ЗначениеЗаполнено(НастройкаПодключения.Идентификаторы.Склады[ПараметрыПоискаСпособаДоставки.Склад]) Тогда
		ПоляЗапроса["warehouse_id"] = НастройкаПодключения.Идентификаторы.Склады[ПараметрыПоискаСпособаДоставки.Склад];
	Иначе
		ПоляЗапроса["warehouse_id"] = НастройкаПодключения.Идентификаторы.СкладПоУмолчанию;
	КонецЕсли;
	
	ПоляЗапроса["sender_region_filter"] = 1;
	
	ТелоЗапроса = ТелоЗапроса(
	ПоляЗапроса,
	ИмяМетодаИнформацияОСкладе(),
	НастройкаПодключения.КлючиМетодов);
	
	ОтветСервера = ВызовМетода(АдресAPI, "POST",, ТелоЗапроса);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСервера);
	
	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	Если РезультатЧтенияJSON["status"] = "ok" Тогда
		Возврат РезультатЧтенияJSON["data"];
	Иначе
		Возврат Новый Соответствие;
	КонецЕсли;
	
КонецФункции

Процедура ЗаданиеПередатьЗаказы(Знач ТаблицаЗаказов, Знач АдресХранилища) Экспорт
	
	ОбщегоНазначенияКлиентСервер.Проверить(
	ТипЗнч(ТаблицаЗаказов) = Тип("ТаблицаЗначений"),
	НСтр("ru = 'Неверный тип параметра, ожидается ""ТаблицаЗначений.'"),
	"ЯндексДоставка.ЗаданиеПередатьЗаказы");
	
	РезультатыОтправки = Новый Соответствие;
	
	Для Каждого ТекСтрока Из ТаблицаЗаказов Цикл
		
		Если ТекСтрока.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
			РезультатыОтправки[ТекСтрока.ЗаказПокупателя] = Новый Соответствие;
			РезультатыОтправки[ТекСтрока.ЗаказПокупателя]["status"] = "error";
			РезультатыОтправки[ТекСтрока.ЗаказПокупателя]["data"] = Новый Соответствие;
			РезультатыОтправки[ТекСтрока.ЗаказПокупателя]["data"]["errors"] = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			НСтр("ru = 'Завершенный заказ не может быть передан в Яндекс.Доставку.'"));
		Иначе
			РезультатыОтправки[ТекСтрока.ЗаказПокупателя] = ПередатьЗаказ(
			ТекСтрока.ЗаказПокупателя,
			ТекСтрока.СлужбаДоставки,
			Перечисления.СпособыОтгрузки.ПустаяСсылка());
		КонецЕсли;
		
		ДлительныеОперации.СообщитьПрогресс(,,
		РезультатыОтправки);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(РезультатыОтправки, АдресХранилища);
	
КонецПроцедуры

Функция РассчитатьСтоимостьДляМагазина(ВариантДоставкиЗаказа, СуммаЗаказа, ОбъявленнаяЦенность) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СтоимостьДляМагазина", ВариантДоставкиЗаказа.СтоимостьДляПолучателя);
	Результат.Вставить("СтоимостьДляМагазинаПредставление");
	Результат.Вставить("СтоимостьДляМагазинаРасшифровка");
	
	СтоимостьДляМагазинаРасшифровка = Новый Структура;
	СтоимостьДляМагазинаРасшифровка.Вставить("ОбязательныеУслуги", Новый Массив);
	СтоимостьДляМагазинаРасшифровка.Вставить("ОпциональныеУслуги", Новый Массив);
	
	Для Каждого ТекУслуга Из ВариантДоставкиЗаказа.Услуги Цикл
		
		Если ТекУслуга.Получить("possibility") = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеУслуги = Новый Структура;
		
		ОписаниеУслуги.Вставить("Наименование", ТекУслуга["name"]);
		ОписаниеУслуги.Вставить("Сумма", ДобавитьСтоимостьПоПравилу(ТекУслуга, СуммаЗаказа, ВариантДоставкиЗаказа.СтоимостьДляПолучателя, ОбъявленнаяЦенность));
		
		Если ТекУслуга.Получить("optional") = Ложь Тогда
			СтоимостьДляМагазинаРасшифровка.ОбязательныеУслуги.Добавить(ОписаниеУслуги);
			Результат.СтоимостьДляМагазина = Результат.СтоимостьДляМагазина + ОписаниеУслуги.Сумма;
		Иначе
			СтоимостьДляМагазинаРасшифровка.ОпциональныеУслуги.Добавить(ОписаниеУслуги);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.СтоимостьДляМагазинаПредставление = СтрШаблон(НСтр("ru = '%1 р.'"), Результат.СтоимостьДляМагазина);
	Результат.СтоимостьДляМагазинаРасшифровка = ОбщегоНазначения.ФиксированныеДанные(СтоимостьДляМагазинаРасшифровка);
	
	Возврат Результат;
	
КонецФункции

Функция РасписаниеПоУмолчанию() Экспорт
	
	Результат = Новый РасписаниеРегламентногоЗадания;
	Результат.ПериодПовтораДней = 1;
	Результат.ПериодПовтораВТечениеДня = 60 * 60;
	
	Возврат Результат;
	
КонецФункции

Функция ИзмененЛокально(Знач ЗаказПокупателяОбъект) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗаказПокупателяОбъект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументЗаказПокупателя.СостояниеЗаказа,
	|	ДокументЗаказПокупателя.СпособДоставки,
	|	ДокументЗаказПокупателя.КонтактноеЛицо,
	|	ДокументЗаказПокупателя.КонтактныйТелефон,
	|	ДокументЗаказПокупателя.ЗапаснойТелефон,
	|	ДокументЗаказПокупателя.ПочтаПолучателя,
	|	ДокументЗаказПокупателя.ОжидаемаяДатаВручения,
	|	ДокументЗаказПокупателя.ВремяДоставкиС,
	|	ДокументЗаказПокупателя.ВремяДоставкиПо,
	|	ДокументЗаказПокупателя.СлужбаДоставки,
	|	ДокументЗаказПокупателя.ЗонаТариф,
	|	ДокументЗаказПокупателя.Длина,
	|	ДокументЗаказПокупателя.Ширина,
	|	ДокументЗаказПокупателя.Высота,
	|	ДокументЗаказПокупателя.Вес,
	|	ДокументЗаказПокупателя.ОбъявленнаяЦенность,
	|	ДокументЗаказПокупателя.АдресДоставкиЗначение
	|ИЗ
	|	РегистрСведений.ЯндексДоставка КАК ЯндексДоставка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ДокументЗаказПокупателя
	|		ПО (ЯндексДоставка.ЗаказПокупателя = ДокументЗаказПокупателя.Ссылка
	|				И ДокументЗаказПокупателя.Ссылка = &Ссылка)");
	Запрос.УстановитьПараметр("Ссылка", ЗаказПокупателяОбъект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Для Каждого ТекКолонка Из РезультатЗапроса.Колонки Цикл
		Если ЗаказПокупателяОбъект[ТекКолонка.Имя] <> Выборка[ТекКолонка.Имя] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Входная точка для регрессного тестирования конвертации адресов из Яндекс.Доставки.
// Автотест требуется, т.к. происходит непосредственное обращение к регистру сведений
// в обход программного интерфейса БСП.
//
// Параметры:
//  ИмитацияАдреса	 - Соответствие - имитация адреса Яндекс.Доставки.
//  Может содержать ключи: "index", "street", "house", "building", "housing", "apartment".
//
// Возвращаемое значение:
//  Структура - результат исполнения функции АдресИзЯндексДоставки()
//
Функция АвтоТест_КонвертацияАдреса(ИмитацияАдреса) Экспорт
	
	КлассификаторСубъектовРФ = РегистрыСведений.АдресныеОбъекты.КлассификаторСубъектовРФ();
	КлассификаторСубъектовРФ.Индексы.Добавить("Наименование");
	
	Возврат АдресИзЯндексДоставки(ИмитацияАдреса, КлассификаторСубъектовРФ);
	
КонецФункции

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ЗагрузкаДанныхИзЯндексДоставки;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СообщениеОбОшибке(ОтветЯндексаJSON)
	
	Ошибки = Новый Массив;
	Для Каждого ТекОшибка Из ОтветЯндексаJSON["data"]["errors"] Цикл
		Ошибки.Добавить(СтрШаблон("%1: %2", ТекОшибка.Ключ, ТекОшибка.Значение));
	КонецЦикла;
	
	Возврат СтрШаблон(
	НСтр("ru = 'Яндекс сообщил об ошибке %1
	|%2'"),
	ОтветЯндексаJSON["error"],
	СтрСоединить(Ошибки, Символы.ПС));
	
КонецФункции

Процедура ЗаполнитьШапкуЗаказа(Знач ПоляЗапроса, Знач ДанныеЗаказа, Знач Идентификаторы)
	
	ПоляЗапроса["client_id"] = Идентификаторы.УчетнаяЗапись;
	
	Если ЗначениеЗаполнено(Идентификаторы.Магазины[ДанныеЗаказа.Магазин]) Тогда
		ПоляЗапроса["sender_id"] = Идентификаторы.Магазины[ДанныеЗаказа.Магазин];
	Иначе
		ПоляЗапроса["sender_id"] = Идентификаторы.МагазинПоУмолчанию;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Идентификаторы.Склады[ДанныеЗаказа.Склад]) Тогда
		ПоляЗапроса["order_warehouse"] = Идентификаторы.Склады[ДанныеЗаказа.Склад];
	Иначе
		ПоляЗапроса["order_warehouse"] = Идентификаторы.СкладПоУмолчанию;
	КонецЕсли;
	
	ПоляЗапроса["order_num"] = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеЗаказа.НомерЗаказа, Истина, Истина);
	ПоляЗапроса["order_weight"] = ДанныеЗаказа.Вес;
	ПоляЗапроса["order_length"] = ДанныеЗаказа.Длина;
	ПоляЗапроса["order_width"] = ДанныеЗаказа.Ширина;
	ПоляЗапроса["order_height"] = ДанныеЗаказа.Высота;
	ПоляЗапроса["order_assessed_value"] = ДанныеЗаказа.ОбъявленнаяЦенность;
	Если ЗначениеЗаполнено(ДанныеЗаказа.СтоимостьДоставки) Тогда
		ПоляЗапроса["order_delivery_cost"] = ДанныеЗаказа.СтоимостьДоставки;
		ПоляЗапроса["is_manual_delivery_cost"] = 1;
	КонецЕсли;
	ПоляЗапроса["order_shipment_type"] = ДанныеЗаказа.СпособДоставки;
	ПоляЗапроса["order_comment"] = ДанныеЗаказа.ДополнительнаяИнформацияПоДоставке;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПолучателя(Знач ПоляЗапроса, Знач ДанныеЗаказа)
	
	ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеЗаказа.КонтактноеЛицо);
	ПоляЗапроса["recipient"] = Новый Соответствие;
	ПоляЗапроса["recipient"]["first_name"] = ЧастиИмени.Имя;
	ПоляЗапроса["recipient"]["last_name"] = ЧастиИмени.Фамилия;
	ПоляЗапроса["recipient"]["middle_name"] = ЧастиИмени.Отчество;
	ПоляЗапроса["recipient"]["phone"] = ДанныеЗаказа.КонтактныйТелефон;
	ПоляЗапроса["recipient"]["additional_phone"] = ДанныеЗаказа.ЗапаснойТелефон;
	ПоляЗапроса["recipient"]["email"] = ДанныеЗаказа.ПочтаПолучателя;
	
КонецПроцедуры

Процедура ЗаполнитьАдресВрученияЗаказа(Знач ПоляЗапроса, Знач ДанныеЗаказа)
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеЗаказа.АдресДоставкиЗначение);
	
	ПоляЗапроса["deliverypoint"] = Новый Соответствие;
	ПоляЗапроса["deliverypoint"]["index"] = СведенияОбАдресе.Индекс;
	ПоляЗапроса["deliverypoint"]["city"] = ЗначениеПоляГород(СведенияОбАдресе);
	ПоляЗапроса["deliverypoint"]["street"] = СведенияОбАдресе.Улица;
	
	Если СведенияОбАдресе.Здание.ТипЗдания = "Дом" Тогда
		ПоляЗапроса["deliverypoint"]["house"] = СведенияОбАдресе.Здание.Номер;
	КонецЕсли;
	
	Для Каждого ТекКорпус Из СведенияОбАдресе.Корпуса Цикл
		Если ТекКорпус.ТипКорпуса = "Корпус" Тогда
			ПоляЗапроса["deliverypoint"]["housing"] = ТекКорпус.Номер
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекПомещение Из СведенияОбАдресе.Помещения Цикл
		Если ТекПомещение.ТипПомещения = "Этаж" Тогда
			ПоляЗапроса["deliverypoint"]["floor"] = ТекПомещение.Номер;
		КонецЕсли;
		Если ТекПомещение.ТипПомещения = "Квартира" Тогда
			ПоляЗапроса["deliverypoint"]["flat"] = ТекПомещение.Номер;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеПоляГород(Знач СведенияОбАдресе)
	
	ОбъединяемыеПоля = Новый Массив;
	ДополнитьМассив(ОбъединяемыеПоля, СведенияОбАдресе.НаселенныйПункт);
	ДополнитьМассив(ОбъединяемыеПоля, СведенияОбАдресе.ВнутригородскойРайон);
	ДополнитьМассив(ОбъединяемыеПоля, СведенияОбАдресе.Город);
	ДополнитьМассив(ОбъединяемыеПоля, СведенияОбАдресе.Район);
	ДополнитьМассив(ОбъединяемыеПоля, СведенияОбАдресе.Округ);
	ДополнитьМассив(ОбъединяемыеПоля, СведенияОбАдресе.Регион);
	
	Возврат СтрСоединить(ОбъединяемыеПоля, ", ");
	
КонецФункции

Процедура ЗаполнитьСписокТоваровВЗаказе(Знач ПоляЗапроса, Знач ДанныеЗаказа)
	
	ПоляЗапроса["order_items"] = Новый Массив;
	
	Для Каждого ТекПозиция Из ДанныеЗаказа.ТаблицаЗапасы Цикл
		ДобавитьПозициюЗаказа(ПоляЗапроса,
		ТекПозиция.НоменклатураПредставление,
		ТекПозиция.НоменклатураАртикул,
		ТекПозиция.ХарактеристикаПредставление,
		ТекПозиция.ЦенаДляДоставки,
		ТекПозиция.КоличествоДляДоставки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПозициюЗаказа(ПоляЗапроса, Наименование, Артикул, Характеристика, Стоимость, Количество)
	
	КомпонентыПредставления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Наименование);
	Если ЗначениеЗаполнено(Характеристика) Тогда
		КомпонентыПредставления.Добавить(Характеристика);
	КонецЕсли;
	
	НоваяПозицияЗаказа = Новый Соответствие;
	НоваяПозицияЗаказа["orderitem_name"] = СтрСоединить(КомпонентыПредставления, " / ");
	НоваяПозицияЗаказа["orderitem_article"] = Артикул;
	НоваяПозицияЗаказа["orderitem_cost"] = Стоимость;
	НоваяПозицияЗаказа["orderitem_quantity"] = Количество;
	
	ПоляЗапроса["order_items"].Добавить(НоваяПозицияЗаказа);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОДоставке(Знач ПоляЗапроса, Знач ДанныеЗаказа, Знач СпособОтгрузки)
	
	Если Не ЗначениеЗаполнено(ДанныеЗаказа.СлужбаДоставкиИдентификаторЯндекса) Тогда
		Возврат;
	КонецЕсли;
	
	ПоляЗапроса["delivery"] = Новый Соответствие;
	ПоляЗапроса["delivery"]["to_yd_warehouse"] = ТипОтгрузки(СпособОтгрузки);
	ПоляЗапроса["delivery"]["tariff"] = ДанныеЗаказа.ТарифДоставкиИдентификаторЯндекса;
	ПоляЗапроса["delivery"]["delivery"] = ДанныеЗаказа.СлужбаДоставкиИдентификаторЯндекса;
	ПоляЗапроса["delivery"]["direction"] = ДанныеЗаказа.ИдентификаторНаправленияДоставки;
	Если ЗначениеЗаполнено(ДанныеЗаказа.ПунктВыдачиЗаказаИдентификаторЯндекса) Тогда
		ПоляЗапроса["delivery"]["pickuppoint"] = ДанныеЗаказа.ПунктВыдачиЗаказаИдентификаторЯндекса;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеЗаказовИзЯндексДоставки(Знач ТочкаПродажи, Знач ИдентификаторыЗаказов, Знач НастройкаПодключения)
	
	Результат = Новый Соответствие;
	
	Для Каждого ТекИдентификаторЗаказа Из ИдентификаторыЗаказов Цикл
		
		АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
		СтрШаблон("https://delivery.yandex.ru/api/last/%1", ИмяМетодаИнформацияОЗаказе()));
		
		ПоляЗапроса = Новый Соответствие;
		ПоляЗапроса["client_id"] = НастройкаПодключения.Идентификаторы.УчетнаяЗапись;
		Если ЗначениеЗаполнено(НастройкаПодключения.Идентификаторы.Магазины[ТочкаПродажи]) Тогда
			ПоляЗапроса["sender_id"] = НастройкаПодключения.Идентификаторы.Магазины[ТочкаПродажи];
		Иначе
			ПоляЗапроса["sender_id"] = НастройкаПодключения.Идентификаторы.МагазинПоУмолчанию;
		КонецЕсли;
		
		ПоляЗапроса["order_id"] = ТекИдентификаторЗаказа;
		
		ТелоЗапроса = ТелоЗапроса(
		ПоляЗапроса,
		ИмяМетодаИнформацияОЗаказе(),
		НастройкаПодключения.КлючиМетодов);
		
		ОтветСервера = ВызовМетода(АдресAPI, "POST",, ТелоЗапроса);
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветСервера);
		
		Результат[ТекИдентификаторЗаказа] = ПрочитатьJSON(ЧтениеJSON, Истина);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьСостоянияИДанныеЗаказов(Знач ДанныеЗаказовИзЯндексДоставки, Знач СвойстваЗаказов, Знач СтатусыСостояния, Знач ОбновленныеЗаказы, Знач НастройкаПодключения)
	
	КлассификаторСубъектовРФ = РегистрыСведений.АдресныеОбъекты.КлассификаторСубъектовРФ();
	КлассификаторСубъектовРФ.Индексы.Добавить("Наименование");
	
	Для Каждого ТекДанныеЗаказа Из ДанныеЗаказовИзЯндексДоставки Цикл
		
		Если ТекДанныеЗаказа.Значение["status"] <> "ok" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСвойстваЗаказа = СвойстваЗаказов[ТекДанныеЗаказа.Ключ];
		Если Не ЗначениеЗаполнено(ТекСвойстваЗаказа) Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеСостояниеЗаказа = НовоеСостояниеЗаказа(ТекДанныеЗаказа.Значение["data"]["status"], ТекСвойстваЗаказа, СтатусыСостояния);
		
		Если Не ТребуетсяОбновитьЗаказ(ТекСвойстваЗаказа, НовоеСостояниеЗаказа, ТекДанныеЗаказа.Значение["data"]["updated"]) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаказОбъект = ТекСвойстваЗаказа.ЗаказПокупателя.ПолучитьОбъект();
		ЗаказОбъект.СостояниеЗаказа = НовоеСостояниеЗаказа;
		ЗаказОбъект.КонтактноеЛицо = ТекДанныеЗаказа.Значение["data"]["recipient"]["full_name"];
		ЗаказОбъект.КонтактныйТелефон = ТекДанныеЗаказа.Значение["data"]["recipient"]["phone"];
		ЗаказОбъект.ЗапаснойТелефон = ТекДанныеЗаказа.Значение["data"]["recipient"]["additional_phone"];
		ЗаказОбъект.ПочтаПолучателя = ТекДанныеЗаказа.Значение["data"]["recipient"]["email"];
		ЗаказОбъект.СпособДоставки = СпособДоставкиПоТипу(ТекДанныеЗаказа.Значение["data"]["delivery_method"]);
		ЗаказОбъект.ОжидаемаяДатаВручения = СтрокаВДату(ТекДанныеЗаказа.Значение["data"]["estimated_delivery_date"]);
		Если ЗначениеЗаполнено(ТекДанныеЗаказа.Значение["data"]["delivery_interval"]) Тогда
			ЗаказОбъект.ВремяДоставкиС = СтрокаВоВремя(ТекДанныеЗаказа.Значение["data"]["delivery_interval"]["from"]);
			ЗаказОбъект.ВремяДоставкиПо = СтрокаВоВремя(ТекДанныеЗаказа.Значение["data"]["delivery_interval"]["to"]);
		КонецЕсли;
		АдресИзЯндексДоставки = АдресИзЯндексДоставки(ТекДанныеЗаказа.Значение["data"]["recipient"]["address"], КлассификаторСубъектовРФ);
		ЗаказОбъект.АдресДоставки = АдресИзЯндексДоставки.Представление;
		ЗаказОбъект.АдресДоставкиЗначение = АдресИзЯндексДоставки.Значение;
		ЗаказОбъект.ДополнительнаяИнформацияПоДоставке = ТекДанныеЗаказа.Значение["data"]["comment"];
		ЗаказОбъект.Длина = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекДанныеЗаказа.Значение["data"]["length"]);
		ЗаказОбъект.Ширина = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекДанныеЗаказа.Значение["data"]["width"]);
		ЗаказОбъект.Высота = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекДанныеЗаказа.Значение["data"]["height"]);
		ЗаказОбъект.Вес = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекДанныеЗаказа.Значение["data"]["weight"]);
		ЗаказОбъект.ОбъявленнаяЦенность = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекДанныеЗаказа.Значение["data"]["assessed_value"]);
		УстановитьСлужбуДоставкиПоИдентификатору(ЗаказОбъект, ТекДанныеЗаказа.Значение["data"]["delivery_id"]);
		ЗаказОбъект.ЗонаТариф = ТарифДоставкиПоИдентификатору(ЗаказОбъект.СлужбаДоставки, ТекДанныеЗаказа.Значение["data"]["tariff_id"]);
		ЗаказОбъект.СтоимостьДоставки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекДанныеЗаказа.Значение["data"]["offer"]["costWithRules"]);
		
		НачатьТранзакцию();
		Попытка
			ЗаказОбъект.Записать();
			РегистрыСведений.ЯндексДоставка.УстановитьОтметкуИзмененЛокально(ЗаказОбъект.Ссылка);
			РегистрыСведений.ЯндексДоставка.ОбновитьСтатусЗаказа(
			ТекСвойстваЗаказа.ЗаказПокупателя, 
			ТекСвойстваЗаказа.Статус);
			ОбновленныеЗаказы[ЗаказОбъект.Ссылка] = Истина;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление состояния заказов по данным Яндекс.Доставки'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовоеСостояниеЗаказа(СтатусЯндекс, ТекСвойстваЗаказа, СтатусыСостояния)
	
	УстанавливаемыйСтатус = ЯндексДоставкаКлиентСервер.СтатусПоКоду(СтатусЯндекс);
	
	ОтборСостояния = Новый Структура;
	ОтборСостояния.Вставить("СтатусЯндексДоставки", УстанавливаемыйСтатус);
	ОтборСостояния.Вставить("ВидЗаказаПокупателя", ТекСвойстваЗаказа.ВидЗаказа);
	
	ПодходящиеСостояния = СтатусыСостояния.НайтиСтроки(ОтборСостояния);
	
	Если ЗначениеЗаполнено(ПодходящиеСостояния) Тогда
		Возврат ПодходящиеСостояния[0].СостояниеЗаказаПокупателя;
	Иначе
		Возврат ТекСвойстваЗаказа.СостояниеЗаказа;
	КонецЕсли;
	
КонецФункции

Функция ТребуетсяОбновитьЗаказ(ТекСвойстваЗаказа, НовоеСостояниеЗаказа, ВремяОбновления)
	
	Если НовоеСостояниеЗаказа <> ТекСвойстваЗаказа.СостояниеЗаказа Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если УниверсальноеВремяОбновления(ВремяОбновления) > ТекСвойстваЗаказа.ИзмененЛокально Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция УниверсальноеВремяОбновления(ВремяОбновления)
	
	// Из ответа поддержки Яндекс.Доставки:
	// Дата и время в ответе методов API формируется для часового пояса Москвы - gmt +3.
	Возврат УниверсальноеВремя(СтрокаВДату(ВремяОбновления), "GMT+3");
	
КонецФункции

Функция СтрокаВДату(СтрокаДата)
	
	Если Не ЗначениеЗаполнено(СтрокаДата) Тогда
		Возврат '00010101';
	КонецЕсли;
	
	ДатаДляЧтения = СтрЗаменить(СтрокаДата, " ", "T");
	
	Попытка
		Возврат ПрочитатьДатуJSON(ДатаДляЧтения, ФорматДатыJSON.ISO);
	Исключение
		Возврат '00010101';
	КонецПопытки;
	
КонецФункции

Функция СтрокаВоВремя(СтрокаВремя)
	
	ЧастиВремени = СтрРазделить(СтрокаВремя, ":");
	
	Возврат Дата(1,1,1, ЧастиВремени[0], ЧастиВремени[1], ЧастиВремени[2]);
	
КонецФункции

Процедура УстановитьСлужбуДоставкиПоИдентификатору(ЗаказОбъект, ИдентификаторСлужбыДоставки)
	
	Если Не ЗначениеЗаполнено(ИдентификаторСлужбыДоставки) Тогда
		ЗаказОбъект.СлужбаДоставки = Справочники.СлужбыДоставки.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	ИдентификаторСлужбыДоставкиЧисло = ТипЧисло.ПривестиЗначение(ИдентификаторСлужбыДоставки);
	
	ЗаказОбъект.СлужбаДоставки = Справочники.СлужбыДоставки.НайтиПоРеквизиту(
	"ИдентификаторЯндекса",
	ИдентификаторСлужбыДоставкиЧисло);
	
	Если ЗначениеЗаполнено(ЗаказОбъект.СлужбаДоставки) Тогда
		Возврат;
	КонецЕсли;
	
	// Если подходящая служба доставки не найдена - вызовем поиск вариантов доставки, во время которого
	// в справочник будут записаны подходящие способы доставки.
	ВариантыДоставкиЗаказа(ЗаказОбъект.ПараметрыПоискаСпособаДоставки(ЗаказОбъект.ОсновнойВариантКП));
	
	ЗаказОбъект.СлужбаДоставки = Справочники.СлужбыДоставки.НайтиПоРеквизиту(
	"ИдентификаторЯндекса",
	ИдентификаторСлужбыДоставкиЧисло);
	
КонецПроцедуры

Функция ТарифДоставкиПоИдентификатору(СлужбаДоставки, ИдентификаторТарифаДоставки)
	
	Если Не ЗначениеЗаполнено(ИдентификаторТарифаДоставки) Тогда
		Возврат Справочники.ЗоныТарифыДоставки.ПустаяСсылка();
	КонецЕсли;
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	Возврат Справочники.ЗоныТарифыДоставки.НайтиПоРеквизиту(
	"ИдентификаторЯндекса",
	ТипЧисло.ПривестиЗначение(ИдентификаторТарифаДоставки),,
	СлужбаДоставки);
	
КонецФункции

// По содержимому адресного классификатора пытается определить принадлежность адреса
// и сопоставить поля Регион, Район, Город, НаселенныйПункт.
//
// Параметры:
//  ДанныеАдреса			 - Соответствие - данные адреса в формате предоставленным сервисом Адрес.Доставка
//  КлассификаторСубъектовРФ - ТаблицаЗначений - См. РегистрыСведений.АдресныеОбъекты.КлассификаторСубъектовРФ()
// 
// Возвращаемое значение:
//  Структура - см. РаботаСАдресамиКлиентСервер.ПоляАдреса()
//
Функция РазобратьАдресПоКлассификатору(Знач ДанныеАдреса, Знач КлассификаторСубъектовРФ);
	
	Результат = РаботаСАдресамиКлиентСервер.ПоляАдреса();
	Результат.ТипАдреса = РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес();
	
	Если Не ЗначениеЗаполнено(ДанныеАдреса["city"]) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Представление = ПредставлениеАдресаИзЯндексДоставки(ДанныеАдреса);
	
	КодСубъектаРФ = КодСубъектаРФИзАдресаЯндексДоставки(ДанныеАдреса, КлассификаторСубъектовРФ);
	Если Не ЗначениеЗаполнено(КодСубъектаРФ) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	АдресныеОбъекты.Уровень КАК Уровень,
	|	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
	|	АдресныеОбъекты.Идентификатор КАК Идентификатор,
	|	АдресныеОбъекты.Наименование КАК Наименование,
	|	АдресныеОбъекты.Сокращение КАК Сокращение,
	|	АдресныеОбъекты.КодКЛАДР КАК КодКЛАДР
	|ИЗ
	|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	|ГДЕ
	|	АдресныеОбъекты.КодСубъектаРФ = &КодСубъектаРФ
	|	И АдресныеОбъекты.Наименование В(&НаименованияОбъектов)
	|	И АдресныеОбъекты.Уровень <= 6
	|
	|УПОРЯДОЧИТЬ ПО
	|	Уровень");
	Запрос.УстановитьПараметр("КодСубъектаРФ", КодСубъектаРФ);
	Запрос.УстановитьПараметр("НаименованияОбъектов", НаименованияОбъектов(ДанныеАдреса));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Уровень = 1 Тогда
			Результат.Регион = Выборка.Наименование;
			Результат.РегионСокращение = Выборка.Сокращение;
		ИначеЕсли Выборка.Уровень = 3 Тогда
			Результат.Район = Выборка.Наименование;
			Результат.РайонСокращение = Выборка.Сокращение;
		ИначеЕсли Выборка.Уровень = 4 Тогда
			Результат.Город = Выборка.Наименование;
			Результат.ГородСокращение = Выборка.Сокращение;
		ИначеЕсли Выборка.Уровень = 6 Тогда
			Результат.НаселенныйПункт = Выборка.Наименование;
			Результат.НаселенныйПунктСокращение = Выборка.Сокращение;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КодСубъектаРФИзАдресаЯндексДоставки(Знач ДанныеАдреса, Знач КлассификаторСубъектовРФ)
	
	ФрагментыСтроки = СтрРазделить(ДанныеАдреса["city"], ",");
	
	Для Каждого ТекСлово Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ФрагментыСтроки[0]) Цикл
		
		НайденнаяСтрока = КлассификаторСубъектовРФ.Найти(ТекСлово);
		
		Если НайденнаяСтрока <> Неопределено Тогда
			Возврат НайденнаяСтрока.КодСубъектаРФ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

Функция НаименованияОбъектов(Знач ДанныеАдреса)
	
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ДанныеАдреса["city"]);
	
КонецФункции

Функция ПредставлениеАдресаИзЯндексДоставки(Знач ДанныеАдреса)
	
	Результат = Новый Массив;
	ДополнитьМассив(Результат, ДанныеАдреса["index"]);
	ДополнитьМассив(Результат, ДанныеАдреса["city"]);
	ДополнитьМассив(Результат, ДанныеАдреса["settlement"]);
	ДополнитьМассив(Результат, ДанныеАдреса["street"]);
	ДополнитьМассив(Результат, ДанныеАдреса["house"]);
	ДополнитьМассив(Результат, ДанныеАдреса["housing"]);
	ДополнитьМассив(Результат, ДанныеАдреса["building"]);
	ДополнитьМассив(Результат, ДанныеАдреса["apartment"]);
	
	Возврат СтрСоединить(Результат, ", ");
	
КонецФункции

Функция АдресИзЯндексДоставки(Знач ДанныеАдреса, Знач КлассификаторСубъектовРФ);
	
	Результат = Новый Структура;
	Результат.Вставить("Значение");
	Результат.Вставить("Представление");
	
	Если ТипЗнч(ДанныеАдреса) <> Тип("Соответствие") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПоляАдреса = РазобратьАдресПоКлассификатору(ДанныеАдреса, КлассификаторСубъектовРФ);
	
	ПоляАдреса.Индекс = ДанныеАдреса["index"];
	ПоляАдреса.Улица = ДанныеАдреса["street"];
	ПоляАдреса.Здание.ТипЗдания = "Дом";
	ПоляАдреса.Здание.Номер = ДанныеАдреса["house"];
	
	Если ЗначениеЗаполнено(ДанныеАдреса["housing"]) Тогда
		ОписаниеКорпуса = Новый Структура("ТипКорпуса, Номер", "Корпус", ДанныеАдреса["housing"]);
		ПоляАдреса.Корпуса.Добавить(ОписаниеКорпуса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса["building"]) Тогда
		ОписаниеСтроения = Новый Структура("ТипКорпуса, Номер", "Строение", ДанныеАдреса["building"]);
		ПоляАдреса.Корпуса.Добавить(ОписаниеСтроения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса["apartment"]) Тогда
		ОписаниеПомещения = Новый Структура("ТипПомещения, Номер", "Квартира", ДанныеАдреса["apartment"]);
		ПоляАдреса.Помещения.Добавить(ОписаниеПомещения);
	КонецЕсли;
	
	Результат.Значение = РаботаСАдресами.ПоляАдресаВJSON(ПоляАдреса);
	
	Результат.Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(Результат.Значение);
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьМассив(Массив, Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Массив.Добавить(Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбратьСпособОтгрузки(Знач СлужбаДоставки, Знач СпособОтгрузки)
	
	Если ЗначениеЗаполнено(СпособОтгрузки) Тогда
		Возврат СпособОтгрузки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СлужбаДоставки) Тогда
		Возврат СпособОтгрузки;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СлужбыДоставкиДоступныеСпособыОтгрузки.СпособОтгрузки
	|ИЗ
	|	Справочник.СлужбыДоставки.ДоступныеСпособыОтгрузки КАК СлужбыДоставкиДоступныеСпособыОтгрузки
	|ГДЕ
	|	СлужбыДоставкиДоступныеСпособыОтгрузки.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", СлужбаДоставки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.СпособОтгрузки;
	
КонецФункции

Функция ТипОтгрузки(Знач СпособОтгрузки)
	
	Если СпособОтгрузки = Перечисления.СпособыОтгрузки.ПередатьКурьеруЕдиногоСклада
		Или СпособОтгрузки = Перечисления.СпособыОтгрузки.СамостоятельноПривезтиНаЕдиныйСклад Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ТелоЗапроса(ПоляЗапроса, ИмяМетода, КлючиМетодов)
	
	КомпонентыЗапроса = Новый Массив;
	Для Каждого ТекПоле Из ПоляЗапроса Цикл
		Если ТипЗнч(ТекПоле.Значение) = Тип("Массив") Тогда
			ДобавитьЭлементыМассива(КомпонентыЗапроса, ТекПоле.Ключ, ТекПоле.Значение);
		ИначеЕсли ТипЗнч(ТекПоле.Значение) = Тип("Соответствие") Тогда
			ДобавитьЭлементыСоответствия(КомпонентыЗапроса, ТекПоле.Ключ, ТекПоле.Значение);
		Иначе
			КомпонентыЗапроса.Добавить(
			СтрШаблон("%1=%2",
			ТекПоле.Ключ,
			КодироватьДляОтправки(ТекПоле.Значение)));
		КонецЕсли;
	КонецЦикла;
	
	КомпонентыЗапроса.Добавить(
	СтрШаблон("secret_key=%1",
	СекретныйКлюч(ПоляЗапроса, ИмяМетода, КлючиМетодов)));
	
	Возврат СтрСоединить(КомпонентыЗапроса, "&");
	
КонецФункции

Процедура ДобавитьЭлементыМассива(КомпонентыЗапроса, ИмяПараметра, ПараметрМассив)
	
	Для Индекс = 0 По ПараметрМассив.ВГраница() Цикл
		Для Каждого ТекЭлемент Из ПараметрМассив[Индекс] Цикл
			КомпонентыЗапроса.Добавить(
			СтрШаблон("%1[%2][%3]=%4",
			ИмяПараметра,
			КодироватьЗначение(Индекс),
			ТекЭлемент.Ключ,
			КодироватьДляОтправки(ТекЭлемент.Значение)));
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЭлементыСоответствия(КомпонентыЗапроса, ИмяПараметра, ПараметрСоответствие)
	
	Для Каждого ТекЭлемент Из ПараметрСоответствие Цикл
		КомпонентыЗапроса.Добавить(
		СтрШаблон("%1[%2]=%3",
		ИмяПараметра,
		ТекЭлемент.Ключ,
		КодироватьДляОтправки(ТекЭлемент.Значение)));
	КонецЦикла;
	
КонецПроцедуры

Функция КодироватьДляОтправки(Значение)
	
	Возврат КодироватьСтроку(
	КодироватьЗначение(Значение),
	СпособКодированияСтроки.КодировкаURL);
	
КонецФункции

Функция КодироватьЗначение(Значение)
	
	Возврат Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=");
	
КонецФункции

Функция СекретныйКлюч(ПоляЗапроса, ИмяМетода, КлючиМетодов)
	
	ХД = Новый ХешированиеДанных(ХешФункция.MD5);
	Для Каждого ТекЗначение Из ЗначенияПолей(ПоляЗапроса) Цикл
		ХД.Добавить(ТекЗначение);
	КонецЦикла;
	
	ХД.Добавить(КлючиМетодов[ИмяМетода]);
	
	Возврат НРег(СтрЗаменить(ХД.ХешСумма, " ", ""));
	
КонецФункции

Функция ЗначенияПолей(ПоляЗапроса)
	
	ПоляЗапросаДляСортировки = Новый ТаблицаЗначений;
	ПоляЗапросаДляСортировки.Колонки.Добавить("Ключ");
	ПоляЗапросаДляСортировки.Колонки.Добавить("Значение");
	
	Если ТипЗнч(ПоляЗапроса) = Тип("Массив") Тогда
		
		Для Индекс = 0 По ПоляЗапроса.ВГраница() Цикл
			ТекСтр = ПоляЗапросаДляСортировки.Добавить();
			ТекСтр.Ключ = Индекс;
			ТекСтр.Значение = ПоляЗапроса[Индекс];
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ПоляЗапроса) = Тип("Соответствие") Тогда
		
		Для Каждого ТекПоле Из ПоляЗапроса Цикл
			ЗаполнитьЗначенияСвойств(
			ПоляЗапросаДляСортировки.Добавить(),
			ТекПоле);
		КонецЦикла;
		
	Иначе 
		
		Возврат КодироватьЗначение(ПоляЗапроса);
		
	КонецЕсли;
	
	ПоляЗапросаДляСортировки.Сортировать("Ключ");
	
	Результат = Новый Массив;
	
	Для Каждого ТекСтр Из ПоляЗапросаДляСортировки Цикл
		
		МассивЗначений = ЗначенияПолей(ТекСтр.Значение);
		Если ТипЗнч(МассивЗначений) <> Тип("Массив") Тогда
			МассивЗначений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МассивЗначений);
		КонецЕсли;
		
		Для Каждого ТекЗначение Из МассивЗначений Цикл
			Результат.Добавить(ЗначенияПолей(ТекЗначение));
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВызовМетода(АдресAPI, HTTPМетод = Неопределено, ДополнительныеЗаголовки = Неопределено, ТелоЗапроса = Неопределено)
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(АдресAPI.Схема);
	
	HTTPСоединение = Новый HTTPСоединение(
	АдресAPI.Хост,
	АдресAPI.Порт,,,
	ИнтернетПрокси,
	20,
	ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение());
	
	ЗапросHTTP = Новый HTTPЗапрос;
	ЗапросHTTP.АдресРесурса = АдресAPI.ПутьНаСервере;
	ЗапросHTTP.Заголовки["Content-Type"] = "application/x-www-form-urlencoded";
	
	Если ТипЗнч(ДополнительныеЗаголовки) = Тип("Соответствие") Тогда
		Для Каждого ДопЗаголовок Из ДополнительныеЗаголовки Цикл
			ЗапросHTTP.Заголовки[ДопЗаголовок.Ключ] = ДопЗаголовок.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если ТелоЗапроса <> Неопределено Тогда
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса,, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	Если HTTPМетод = Неопределено Тогда
		ОтветHTTP = HTTPСоединение.Получить(ЗапросHTTP);
	Иначе
		ОтветHTTP = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, ЗапросHTTP);
	КонецЕсли;
	
	Возврат ОтветHTTP.ПолучитьТелоКакСтроку();
	
КонецФункции

Функция НастройкаПодключения(Знач Организация)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификаторы", Новый Структура);
	
	Результат.Идентификаторы.Вставить("УчетнаяЗапись");
	Результат.Идентификаторы.Вставить("МагазинПоУмолчанию");
	Результат.Идентификаторы.Вставить("СкладПоУмолчанию");
	Результат.Идентификаторы.Вставить("Магазины", Новый Соответствие);
	Результат.Идентификаторы.Вставить("Склады", Новый Соответствие);
	
	Результат.Вставить("КлючиМетодов", Новый Соответствие);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиЯндексДоставки.Ссылка
	|ПОМЕСТИТЬ ВТ_НастройкаЯндексДоставки
	|ИЗ
	|	Справочник.НастройкиЯндексДоставки КАК НастройкиЯндексДоставки
	|ГДЕ
	|	НЕ НастройкиЯндексДоставки.ПометкаУдаления
	|	И НастройкиЯндексДоставки.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЯндексДоставки.Идентификаторы
	|ИЗ
	|	ВТ_НастройкаЯндексДоставки КАК ВТ_НастройкаЯндексДоставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиЯндексДоставки КАК НастройкиЯндексДоставки
	|		ПО ВТ_НастройкаЯндексДоставки.Ссылка = НастройкиЯндексДоставки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЯндексДоставкиМагазины.СтруктурнаяЕдиница,
	|	НастройкиЯндексДоставкиМагазины.Идентификатор
	|ИЗ
	|	Справочник.НастройкиЯндексДоставки.Магазины КАК НастройкиЯндексДоставкиМагазины
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкаЯндексДоставки КАК ВТ_НастройкаЯндексДоставки
	|		ПО НастройкиЯндексДоставкиМагазины.Ссылка = ВТ_НастройкаЯндексДоставки.Ссылка
	|ГДЕ
	|	НастройкиЯндексДоставкиМагазины.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЯндексДоставкиСклады.СтруктурнаяЕдиница,
	|	НастройкиЯндексДоставкиСклады.Идентификатор
	|ИЗ
	|	Справочник.НастройкиЯндексДоставки.Склады КАК НастройкиЯндексДоставкиСклады
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкаЯндексДоставки КАК ВТ_НастройкаЯндексДоставки
	|		ПО НастройкиЯндексДоставкиСклады.Ссылка = ВТ_НастройкаЯндексДоставки.Ссылка
	|ГДЕ
	|	НастройкиЯндексДоставкиСклады.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиЯндексДоставки.КлючиМетодов
	|ИЗ
	|	Справочник.НастройкиЯндексДоставки КАК НастройкиЯндексДоставки
	|ГДЕ
	|	НастройкиЯндексДоставки.Организация = &Организация
	|	И НЕ НастройкиЯндексДоставки.ПометкаУдаления");
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапроса[1].Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаИдентификаторы = РезультатыЗапроса[1].Выбрать();
	ВыборкаИдентификаторы.Следующий();
	
	ЧтениеJSON_Идентификаторы = Новый ЧтениеJSON;
	ЧтениеJSON_Идентификаторы.УстановитьСтроку(ВыборкаИдентификаторы.Идентификаторы);
	
	Идентификаторы = ПрочитатьJSON(ЧтениеJSON_Идентификаторы, Истина);
	
	Результат.Идентификаторы.УчетнаяЗапись = Идентификаторы["client"]["id"];
	Результат.Идентификаторы.МагазинПоУмолчанию = Идентификаторы["senders"][0]["id"];
	Результат.Идентификаторы.СкладПоУмолчанию = Идентификаторы["warehouses"][0]["id"];
	
	ВыборкаМагазины = РезультатыЗапроса[2].Выбрать();
	Пока ВыборкаМагазины.Следующий() Цикл
		Результат.Идентификаторы.Магазины[ВыборкаМагазины.СтруктурнаяЕдиница] = ВыборкаМагазины.Идентификатор;
	КонецЦикла;
	
	ВыборкаСклады = РезультатыЗапроса[3].Выбрать();
	Пока ВыборкаСклады.Следующий() Цикл
		Результат.Идентификаторы.Склады[ВыборкаСклады.СтруктурнаяЕдиница] = ВыборкаСклады.Идентификатор;
	КонецЦикла;
	
	ВыборкаКлючиМетодов = РезультатыЗапроса[4].Выбрать();
	ВыборкаКлючиМетодов.Следующий();
	
	ЧтениеJSON_Keys = Новый ЧтениеJSON;
	ЧтениеJSON_Keys.УстановитьСтроку(ВыборкаКлючиМетодов.КлючиМетодов);
	
	Результат.КлючиМетодов = ПрочитатьJSON(ЧтениеJSON_Keys, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ОтсутствуетНастройкаПодключения(Знач Организация)
	
	Результат = Новый Соответствие;
	Результат["status"] = "error";
	Результат["data"] = Новый Соответствие;
	Результат["data"]["errors"] = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
	СтрШаблон(
	НСтр("ru = 'Отсутствует настройка подключения к Яндекс.Доставке для организации ""%1""'"),
	Организация));
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаВариантовДоставкиПоИдентификаторамЯндекса(Знач ДанныеЯндекс)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("СпособДоставки", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыДоставки"));
	Результат.Колонки.Добавить("СлужбаДоставки", Новый ОписаниеТипов("СправочникСсылка.СлужбыДоставки"));
	Результат.Колонки.Добавить("ПредставлениеСлужбыДоставки", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИдентификаторСлужбыДоставки", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ЗонаТариф", Новый ОписаниеТипов("СправочникСсылка.ЗоныТарифыДоставки"));
	Результат.Колонки.Добавить("ПредставлениеТарифаДоставки", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИдентификаторНаправленияДоставки", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Срок", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("МинСрок", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("МаксСрок", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("СтоимостьДляПолучателя", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Настройки", Новый ОписаниеТипов("ФиксированноеСоответствие"));
	Результат.Колонки.Добавить("Услуги", Новый ОписаниеТипов("ФиксированныйМассив"));
	Результат.Колонки.Добавить("ИнтервалыДоставки", Новый ОписаниеТипов("ФиксированныйМассив"));
	Результат.Колонки.Добавить("ДоступныеСпособыОтгрузки", Новый ОписаниеТипов("ФиксированныйМассив"));
	Результат.Колонки.Добавить("ПунктыВыдачиЗаказа", Новый ОписаниеТипов("СписокЗначений"));
	Результат.Колонки.Добавить("БлижайшиеДатыОтгрузки", Новый ОписаниеТипов("ФиксированноеСоответствие"));
	
	Если ДанныеЯндекс["status"] <> "ok" Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеВариантовДоставки = ОписаниеВариантовДоставки(ДанныеЯндекс);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаВариантыДоставки.ИдентификаторСлужбыДоставки,
	|	ТаблицаВариантыДоставки.ПредставлениеСлужбыДоставки,
	|	ТаблицаВариантыДоставки.ИдентификаторТарифаДоставки,
	|	ТаблицаВариантыДоставки.ПредставлениеТарифаДоставки,
	|	ТаблицаВариантыДоставки.Ключ
	|ПОМЕСТИТЬ ВТ_ВариантыДоставки
	|ИЗ
	|	&ТаблицаВариантыДоставки КАК ТаблицаВариантыДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СлужбыДоставки.Ссылка КАК СлужбаДоставкиСсылка,
	|	ЗоныТарифыДоставки.Ссылка КАК ЗонаТарифСсылка,
	|	ВТ_ВариантыДоставки.ИдентификаторСлужбыДоставки,
	|	ВТ_ВариантыДоставки.ПредставлениеСлужбыДоставки,
	|	ВТ_ВариантыДоставки.ИдентификаторТарифаДоставки,
	|	ВТ_ВариантыДоставки.ПредставлениеТарифаДоставки,
	|	ВТ_ВариантыДоставки.Ключ
	|ИЗ
	|	ВТ_ВариантыДоставки КАК ВТ_ВариантыДоставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СлужбыДоставки КАК СлужбыДоставки
	|		ПО ВТ_ВариантыДоставки.ИдентификаторСлужбыДоставки = СлужбыДоставки.ИдентификаторЯндекса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗоныТарифыДоставки КАК ЗоныТарифыДоставки
	|		ПО ВТ_ВариантыДоставки.ИдентификаторТарифаДоставки = ЗоныТарифыДоставки.ИдентификаторЯндекса");
	Запрос.УстановитьПараметр("ТаблицаВариантыДоставки", ОписаниеВариантовДоставки.ВариантыДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	СозданныеСлужбыДоставки = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ИдентификаторСлужбыДоставки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыВариантовДоставки = Результат.Добавить();
		
		СтрокаТаблицыВариантовДоставки.СлужбаДоставки = СлужбаДоставкиСсылка(
		Выборка,
		ОписаниеВариантовДоставки.ПараметрыВариантовДоставки[Выборка.Ключ],
		СозданныеСлужбыДоставки);
		СтрокаТаблицыВариантовДоставки.ПредставлениеСлужбыДоставки = Выборка.ПредставлениеСлужбыДоставки;
		СтрокаТаблицыВариантовДоставки.ИдентификаторСлужбыДоставки = Выборка.ИдентификаторСлужбыДоставки;
		СтрокаТаблицыВариантовДоставки.ЗонаТариф = ЗонаТарифСсылка(Выборка, СтрокаТаблицыВариантовДоставки.СлужбаДоставки);
		СтрокаТаблицыВариантовДоставки.ПредставлениеТарифаДоставки = Выборка.ПредставлениеТарифаДоставки;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыВариантовДоставки, ОписаниеВариантовДоставки.ПараметрыВариантовДоставки[Выборка.Ключ]);
		
		СтрокаТаблицыВариантовДоставки.ПунктыВыдачиЗаказа = ПунктыВыдачиЗаказа(
		ОписаниеВариантовДоставки.ПараметрыВариантовДоставки[Выборка.Ключ].ПунктыВыдачиЗаказа,
		СтрокаТаблицыВариантовДоставки.СлужбаДоставки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеВариантовДоставки(Знач ДанныеЯндекс)
	
	Результат = Новый Структура;
	Результат.Вставить("ВариантыДоставки", Новый ТаблицаЗначений);
	Результат.Вставить("ПараметрыВариантовДоставки", Новый Соответствие);
	
	Результат.ВариантыДоставки.Колонки.Добавить("ИдентификаторСлужбыДоставки", Новый ОписаниеТипов("Число"));
	Результат.ВариантыДоставки.Колонки.Добавить("ПредставлениеСлужбыДоставки", Новый ОписаниеТипов("Строка"));
	Результат.ВариантыДоставки.Колонки.Добавить("ИдентификаторТарифаДоставки", Новый ОписаниеТипов("Число"));
	Результат.ВариантыДоставки.Колонки.Добавить("ПредставлениеТарифаДоставки", Новый ОписаниеТипов("Строка"));
	Результат.ВариантыДоставки.Колонки.Добавить("ИдентификаторНаправленияДоставки", Новый ОписаниеТипов("Число"));
	Результат.ВариантыДоставки.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ТекЭлемент Из ДанныеЯндекс["data"] Цикл
		НоваяСтрока = Результат.ВариантыДоставки.Добавить();
		НоваяСтрока.ИдентификаторСлужбыДоставки = ТекЭлемент["delivery"]["id"];
		НоваяСтрока.ПредставлениеСлужбыДоставки = ТекЭлемент["delivery"]["name"];
		НоваяСтрока.ИдентификаторТарифаДоставки = ТекЭлемент["tariffId"];
		НоваяСтрока.ПредставлениеТарифаДоставки = ТекЭлемент["tariffName"];
		НоваяСтрока.ИдентификаторНаправленияДоставки = ТекЭлемент["direction"];
		НоваяСтрока.Ключ = Строка(Новый УникальныйИдентификатор);
		Результат.ПараметрыВариантовДоставки[НоваяСтрока.Ключ] = Новый Структура;
		Результат.ПараметрыВариантовДоставки[НоваяСтрока.Ключ].Вставить("СпособДоставки", СпособДоставкиПоТипу(ТекЭлемент["type"]));
		Результат.ПараметрыВариантовДоставки[НоваяСтрока.Ключ].Вставить("СтоимостьДляПолучателя", ТекЭлемент["costWithRules"]);
		ЗаполнитьДатыДоставки(Результат.ПараметрыВариантовДоставки[НоваяСтрока.Ключ], ТекЭлемент);
		Результат.ПараметрыВариантовДоставки[НоваяСтрока.Ключ].Вставить("Настройки", ОбщегоНазначения.ФиксированныеДанные(ТекЭлемент["settings"]));
		Результат.ПараметрыВариантовДоставки[НоваяСтрока.Ключ].Вставить("Услуги", ОбщегоНазначения.ФиксированныеДанные(ТекЭлемент["services"]));
		Результат.ПараметрыВариантовДоставки[НоваяСтрока.Ключ].Вставить("ИнтервалыДоставки", ОбщегоНазначения.ФиксированныеДанные(ТекЭлемент["deliveryIntervals"]));
		Результат.ПараметрыВариантовДоставки[НоваяСтрока.Ключ].Вставить("ПунктыВыдачиЗаказа", ОбщегоНазначения.ФиксированныеДанные(ТекЭлемент["pickupPoints"]));
		Результат.ПараметрыВариантовДоставки[НоваяСтрока.Ключ].Вставить("ДоступныеСпособыОтгрузки", ДоступныеСпособыОтгрузки(ТекЭлемент["delivery"]));
		Результат.ПараметрыВариантовДоставки[НоваяСтрока.Ключ].Вставить("БлижайшиеДатыОтгрузки", БлижайшиеДатыОтгрузки(ТекЭлемент["date_limits"]));
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьДатыДоставки(Знач ПараметрыВариантовДоставки, Знач ТекЭлемент)
	
	Если Не ЗначениеЗаполнено(ТекЭлемент["delivery_date"]) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекЭлемент["delivery_date"]) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	МинСрок = ПрочитатьДатуJSON(ТекЭлемент["delivery_date"][0], ФорматДатыJSON.ISO);
	МаксСрок = ПрочитатьДатуJSON(ТекЭлемент["delivery_date"][ТекЭлемент["delivery_date"].ВГраница()], ФорматДатыJSON.ISO);
	
	ПараметрыВариантовДоставки.Вставить("Срок", ПредставлениеСрока(МинСрок, МаксСрок));
	ПараметрыВариантовДоставки.Вставить("МинСрок", МинСрок);
	ПараметрыВариантовДоставки.Вставить("МаксСрок", МаксСрок);
	
КонецПроцедуры

Функция ПредставлениеСрока(МинСрок, МаксСрок)
	
	Если МинСрок = МаксСрок Тогда
		Возврат Формат(МинСрок, "ДФ='d MMMM'");
	КонецЕсли;
	
	Если Месяц(МинСрок) = Месяц(МаксСрок) Тогда
		Возврат СтрШаблон("%1 - %2",
		День(МинСрок),
		Формат(МаксСрок, "ДФ='d MMMM'"));
	КонецЕсли;
	
	Возврат СтрШаблон(
	"%1 - %2",
	Формат(МинСрок, "ДФ='d MMM'"),
	Формат(МаксСрок, "ДФ='d MMM'"));
	
КонецФункции

Функция ДоступныеСпособыОтгрузки(Знач ДанныеСлужбыДоставки)
	
	Результат = Новый Массив;
	
	Для Каждого ТекСпособ Из СоответствиеСпособовОтгрузки() Цикл
		Если ДанныеСлужбыДоставки[ТекСпособ.Значение] Тогда
			Результат.Добавить(ТекСпособ.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(Результат);
	
КонецФункции

Функция СоответствиеСпособовОтгрузки()
	
	Результат = Новый Соответствие;
	Результат.Вставить(Перечисления.СпособыОтгрузки.СамостоятельноПривезтиНаЕдиныйСклад, "is_ff_import_available");
	Результат.Вставить(Перечисления.СпособыОтгрузки.ПередатьКурьеруЕдиногоСклада, "is_ff_withdraw_available");
	Результат.Вставить(Перечисления.СпособыОтгрузки.СамостоятельноПривезтиНаСкладСлужбыДоставки, "is_ds_import_available");
	Результат.Вставить(Перечисления.СпособыОтгрузки.ПередатьКурьеруСлужбыДоставки, "is_ds_withdraw_available");
	
	Возврат Результат;
	
КонецФункции

Функция БлижайшиеДатыОтгрузки(Знач ДоступныеДатыОтгрузки)
	
	Результат = Новый Соответствие;
	
	Для Каждого ТекСпособ Из СоответствиеДатОтгрузки() Цикл
		Результат[ТекСпособ.Ключ] = ПрочитатьДатуJSON(ДоступныеДатыОтгрузки[ТекСпособ.Значение]["min"], ФорматДатыJSON.ISO);
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(Результат);
	
КонецФункции

Функция СоответствиеДатОтгрузки()
	
	Результат = Новый Соответствие;
	Результат.Вставить(Перечисления.СпособыОтгрузки.СамостоятельноПривезтиНаЕдиныйСклад, "import_sort");
	Результат.Вставить(Перечисления.СпособыОтгрузки.ПередатьКурьеруЕдиногоСклада, "withdraw_sort");
	Результат.Вставить(Перечисления.СпособыОтгрузки.СамостоятельноПривезтиНаСкладСлужбыДоставки, "import");
	Результат.Вставить(Перечисления.СпособыОтгрузки.ПередатьКурьеруСлужбыДоставки, "withdraw");
	
	Возврат Результат;
	
КонецФункции

Функция СлужбаДоставкиСсылка(Знач Выборка, Знач ПараметрыВарианта, Знач СозданныеСлужбыДоставки)
	
	Если СозданныеСлужбыДоставки[Выборка.ИдентификаторСлужбыДоставки] <> Неопределено Тогда
		СлужбаДоставкиОбъект = СозданныеСлужбыДоставки[Выборка.ИдентификаторСлужбыДоставки];
	ИначеЕсли Выборка.СлужбаДоставкиСсылка = Null Тогда
		СлужбаДоставкиОбъект = Справочники.СлужбыДоставки.СоздатьЭлемент();
		СлужбаДоставкиОбъект.Наименование = Выборка.ПредставлениеСлужбыДоставки;
		СлужбаДоставкиОбъект.ВариантУчета = Перечисления.ВариантыУчетаДоставки.ДоставкаСОплатой;
		СлужбаДоставкиОбъект.ИдентификаторЯндекса = Выборка.ИдентификаторСлужбыДоставки;
		СозданныеСлужбыДоставки[Выборка.ИдентификаторСлужбыДоставки] = СлужбаДоставкиОбъект;
	Иначе
		СлужбаДоставкиОбъект = Выборка.СлужбаДоставкиСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если СлужбаДоставкиОбъект.ДоступныеСпособыДоставки.Найти(ПараметрыВарианта.СпособДоставки) = Неопределено Тогда
		ТекСтрокаДоступныеСпособыДоставки = СлужбаДоставкиОбъект.ДоступныеСпособыДоставки.Добавить();
		ТекСтрокаДоступныеСпособыДоставки.СпособДоставки = ПараметрыВарианта.СпособДоставки;
	КонецЕсли;
	
	Для Каждого ТекСпособОтгрузки Из ПараметрыВарианта.ДоступныеСпособыОтгрузки Цикл
		Если СлужбаДоставкиОбъект.ДоступныеСпособыОтгрузки.Найти(ТекСпособОтгрузки) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТекСтрокаДоступныеСпособыОтгрузки = СлужбаДоставкиОбъект.ДоступныеСпособыОтгрузки.Добавить();
		ТекСтрокаДоступныеСпособыОтгрузки.СпособОтгрузки = ТекСпособОтгрузки;
	КонецЦикла;
	
	Если СлужбаДоставкиОбъект.Модифицированность() Тогда
		ЗаписатьВПривилегированномРежиме(СлужбаДоставкиОбъект);
	КонецЕсли;
	
	Возврат СлужбаДоставкиОбъект.Ссылка;
	
КонецФункции

Функция ЗонаТарифСсылка(Знач Выборка, Знач СлужбаДоставки)
	
	Если Выборка.ЗонаТарифСсылка <> Null Тогда
		Возврат Выборка.ЗонаТарифСсылка;
	КонецЕсли;
	
	НоваяЗонаТариф = Справочники.ЗоныТарифыДоставки.СоздатьЭлемент();
	НоваяЗонаТариф.Наименование = Выборка.ПредставлениеТарифаДоставки;
	НоваяЗонаТариф.ИдентификаторЯндекса = Выборка.ИдентификаторТарифаДоставки;
	НоваяЗонаТариф.Владелец = СлужбаДоставки;
	ЗаписатьВПривилегированномРежиме(НоваяЗонаТариф);
	
	Возврат НоваяЗонаТариф.Ссылка;
	
КонецФункции

Функция ПунктыВыдачиЗаказа(Знач ПунктыВыдачиЗаказа, Знач СлужбаДоставки)
	
	Результат = Новый СписокЗначений;
	
	ТабПунктыВыдачиЗаказа = Новый ТаблицаЗначений;
	ТабПунктыВыдачиЗаказа.Колонки.Добавить("ИдентификаторЯндекса", Новый ОписаниеТипов("Число"));
	ТабПунктыВыдачиЗаказа.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Для Каждого ТекПункт Из ПунктыВыдачиЗаказа Цикл
		НоваяСтрока = ТабПунктыВыдачиЗаказа.Добавить();
		НоваяСтрока.ИдентификаторЯндекса = ТекПункт["id"];
		НоваяСтрока.Наименование = ТекПункт["full_address"];
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТабПунктыВыдачиЗаказа.ИдентификаторЯндекса КАК ИдентификаторЯндекса,
	|	ТабПунктыВыдачиЗаказа.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_ПунктыВыдачиЗаказа
	|ИЗ
	|	&ТабПунктыВыдачиЗаказа КАК ТабПунктыВыдачиЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПунктыВыдачиЗаказа.ИдентификаторЯндекса КАК ИдентификаторЯндекса,
	|	ВТ_ПунктыВыдачиЗаказа.Наименование КАК Наименование,
	|	ПунктыВыдачиЗаказа.Ссылка КАК Ссылка,
	|	ПунктыВыдачиЗаказа.Наименование КАК СсылкаНаименование
	|ИЗ
	|	ВТ_ПунктыВыдачиЗаказа КАК ВТ_ПунктыВыдачиЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПунктыВыдачиЗаказа КАК ПунктыВыдачиЗаказа
	|		ПО ВТ_ПунктыВыдачиЗаказа.ИдентификаторЯндекса = ПунктыВыдачиЗаказа.ИдентификаторЯндекса
	|			И (ПунктыВыдачиЗаказа.Владелец = &СлужбаДоставки)");
	Запрос.УстановитьПараметр("ТабПунктыВыдачиЗаказа", ТабПунктыВыдачиЗаказа);
	Запрос.УстановитьПараметр("СлужбаДоставки", СлужбаДоставки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Наименование = Выборка.СсылкаНаименование Тогда
			Результат.Добавить(Выборка.Ссылка, Выборка.СсылкаНаименование);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			ПунктВыдачиЗаказаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			ПунктВыдачиЗаказаОбъект = Справочники.ПунктыВыдачиЗаказа.СоздатьЭлемент();
		КонецЕсли;
		
		ПунктВыдачиЗаказаОбъект.Владелец = СлужбаДоставки;
		ПунктВыдачиЗаказаОбъект.Наименование = Выборка.Наименование;
		ПунктВыдачиЗаказаОбъект.ИдентификаторЯндекса = Выборка.ИдентификаторЯндекса;
		ЗаписатьВПривилегированномРежиме(ПунктВыдачиЗаказаОбъект);
		
		Результат.Добавить(ПунктВыдачиЗаказаОбъект.Ссылка, ПунктВыдачиЗаказаОбъект.Наименование);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СпособДоставкиПоТипу(Тип)
	
	Если ВРег(Тип) = "PICKUP" Тогда
		Возврат Перечисления.СпособыДоставки.ПунктВыдачи;
	КонецЕсли;
	
	Если ВРег(Тип) = "TODOOR" Тогда
		Возврат Перечисления.СпособыДоставки.Курьер;
	КонецЕсли;
	
	Если ВРег(Тип) = "POST" Тогда
		Возврат Перечисления.СпособыДоставки.Почта;
	КонецЕсли;
	
КонецФункции

Функция ДанныеЗаказа(ЗаказСсылка)
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Номер КАК НомерЗаказа,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.СтруктурнаяЕдиницаПродажи КАК Магазин,
	|	ЗаказПокупателя.СтруктурнаяЕдиницаРезерв КАК Склад,
	|	ЗаказПокупателя.Вес КАК Вес,
	|	ЗаказПокупателя.Длина КАК Длина,
	|	ЗаказПокупателя.Ширина КАК Ширина,
	|	ЗаказПокупателя.Высота КАК Высота,
	|	ЗаказПокупателя.ОбъявленнаяЦенность КАК ОбъявленнаяЦенность,
	|	ЗаказПокупателя.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Курьер)
	|			ТОГДА ""todoor""
	|		КОГДА ЗаказПокупателя.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПунктВыдачи)
	|			ТОГДА ""pickup""
	|		КОГДА ЗаказПокупателя.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Почта)
	|			ТОГДА ""post""
	|	КОНЕЦ КАК СпособДоставки,
	|	ЗаказПокупателя.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ЗаказПокупателя.КонтактныйТелефон КАК КонтактныйТелефон,
	|	ЗаказПокупателя.ЗапаснойТелефон КАК ЗапаснойТелефон,
	|	ЗаказПокупателя.ПочтаПолучателя КАК ПочтаПолучателя,
	|	ЗаказПокупателя.АдресДоставкиЗначение КАК АдресДоставкиЗначение,
	|	ЗаказПокупателя.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформацияПоДоставке,
	|	ЗаказПокупателя.ИдентификаторНаправленияДоставки КАК ИдентификаторНаправленияДоставки,
	|	ЗаказПокупателя.СлужбаДоставки.ИдентификаторЯндекса КАК СлужбаДоставкиИдентификаторЯндекса,
	|	ЗаказПокупателя.ЗонаТариф.ИдентификаторЯндекса КАК ТарифДоставкиИдентификаторЯндекса,
	|	ЗаказПокупателя.ПунктВыдачиЗаказа.ИдентификаторЯндекса КАК ПунктВыдачиЗаказаИдентификаторЯндекса
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ЗаказСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателяЗапасы.Номенклатура) КАК НоменклатураПредставление,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателяЗапасы.Характеристика) КАК ХарактеристикаПредставление,
	|	ЗаказПокупателяЗапасы.Всего КАК Всего,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	0 КАК ЦенаДляДоставки,
	|	0 КАК КоличествоДляДоставки,
	|	0 КАК СуммаДляДоставки
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.ТипНоменклатурыЗапас");
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(ЗаказСсылка, Запрос.МенеджерВременныхТаблиц, Ложь);
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Для Каждого ТекКолонка Из РезультатыЗапроса[0].Колонки Цикл
		Результат.Вставить(ТекКолонка.Имя);
	КонецЦикла;

	Выборка = РезультатыЗапроса[0].Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	ТаблицаЗапасы = РезультатыЗапроса[1].Выгрузить();
	РассчитатьЦеныДляДоставки(ТаблицаЗапасы);
	
	Результат.Вставить("ТаблицаЗапасы", ТаблицаЗапасы);
	
	Возврат Результат;
	
КонецФункции

Функция СкладыСлужбДоставкиПоТипу(Знач ДанныеЯндекс)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕдиныйСклад", Справочники.СкладыСлужбДоставки.ПустаяСсылка());
	Результат.Вставить("СкладыСлужбыДоставки", Новый Соответствие);
	
	Если ДанныеЯндекс["status"] <> "ok" Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЯндекс["data"]["deliveries"]) <> Тип("Массив") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТабСкладыСлужбДоставки = Новый ТаблицаЗначений;
	ТабСкладыСлужбДоставки.Колонки.Добавить("ИдентификаторСлужбыДоставки", Новый ОписаниеТипов("Число"));
	ТабСкладыСлужбДоставки.Колонки.Добавить("ПредставлениеСлужбыДоставки", Новый ОписаниеТипов("Строка"));
	ТабСкладыСлужбДоставки.Колонки.Добавить("ИдентификаторСклада", Новый ОписаниеТипов("Число"));
	ТабСкладыСлужбДоставки.Колонки.Добавить("ТипСклада", Новый ОписаниеТипов("Строка"));
	ТабСкладыСлужбДоставки.Колонки.Добавить("АдресСклада", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ТекСтрокаСлужбаДоставки Из ДанныеЯндекс["data"]["deliveries"] Цикл
		Для Каждого ТекСклад Из ТекСтрокаСлужбаДоставки["warehouses"] Цикл
			НоваяСтрока = ТабСкладыСлужбДоставки.Добавить();
			НоваяСтрока.ИдентификаторСлужбыДоставки = ТекСтрокаСлужбаДоставки["id"];
			НоваяСтрока.ПредставлениеСлужбыДоставки = ПредставлениеСлужбыДоставки(ТекСтрокаСлужбаДоставки["name"]);
			НоваяСтрока.ТипСклада = ТекСтрокаСлужбаДоставки["type"];
			НоваяСтрока.ИдентификаторСклада = ТекСклад["id"];
			НоваяСтрока.АдресСклада = ТекСклад["address"];
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТабСкладыСлужбДоставки.ИдентификаторСлужбыДоставки КАК ИдентификаторСлужбыДоставки,
	|	ТабСкладыСлужбДоставки.ПредставлениеСлужбыДоставки КАК ПредставлениеСлужбыДоставки,
	|	ТабСкладыСлужбДоставки.ИдентификаторСклада КАК ИдентификаторСклада,
	|	ТабСкладыСлужбДоставки.ТипСклада КАК ТипСклада,
	|	ТабСкладыСлужбДоставки.АдресСклада КАК АдресСклада
	|ПОМЕСТИТЬ ВТ_СкладыСлужбДоставки
	|ИЗ
	|	&ТабСкладыСлужбДоставки КАК ТабСкладыСлужбДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СкладыСлужбДоставки.ИдентификаторСлужбыДоставки,
	|	ВТ_СкладыСлужбДоставки.ПредставлениеСлужбыДоставки КАК ПредставлениеСлужбыДоставки,
	|	ВТ_СкладыСлужбДоставки.ИдентификаторСклада,
	|	ВТ_СкладыСлужбДоставки.ТипСклада,
	|	ВТ_СкладыСлужбДоставки.АдресСклада,
	|	СлужбыДоставки.Ссылка КАК СлужбаДоставки,
	|	СкладыСлужбДоставки.Ссылка КАК СкладСлужбыДоставки
	|ИЗ
	|	ВТ_СкладыСлужбДоставки КАК ВТ_СкладыСлужбДоставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СлужбыДоставки КАК СлужбыДоставки
	|		ПО ВТ_СкладыСлужбДоставки.ИдентификаторСлужбыДоставки = СлужбыДоставки.ИдентификаторЯндекса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладыСлужбДоставки КАК СкладыСлужбДоставки
	|		ПО ВТ_СкладыСлужбДоставки.ИдентификаторСклада = СкладыСлужбДоставки.ИдентификаторЯндекса");
	Запрос.УстановитьПараметр("ТабСкладыСлужбДоставки", ТабСкладыСлужбДоставки);
	
	СозданныеСлужбыДоставки = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СлужбаДоставки = СлужбаДоставкиПоДаннымСклада(Выборка, СозданныеСлужбыДоставки);
		СкладСлужбыДоставки = СкладСлужбыДоставки(Выборка, СлужбаДоставки);
		
		Если Выборка.ТипСклада = "fulfillment"
			И Не ЗначениеЗаполнено(Результат.ЕдиныйСклад) Тогда
			Результат.ЕдиныйСклад = СкладСлужбыДоставки;
			Продолжить;
		КонецЕсли;
		
		Если Результат.СкладыСлужбыДоставки[СлужбаДоставки] = Неопределено Тогда
			Результат.СкладыСлужбыДоставки[СлужбаДоставки] = Новый Массив;
		КонецЕсли;
		
		Результат.СкладыСлужбыДоставки[СлужбаДоставки].Добавить(СкладСлужбыДоставки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеСлужбыДоставки(ПредставлениеЯндекс)
	
	Если СтрНачинаетсяС(ПредставлениеЯндекс, "в ") Тогда
		Возврат Сред(ПредставлениеЯндекс, 3);
	Иначе
		Возврат ПредставлениеЯндекс;
	КонецЕсли;
	
КонецФункции

Функция СкладСлужбыДоставки(Знач Выборка, Знач СлужбаДоставки)
	
	Если ЗначениеЗаполнено(Выборка.СкладСлужбыДоставки) Тогда
		Возврат Выборка.СкладСлужбыДоставки;
	КонецЕсли;
	
	НовыйСкладСлужбыДоставки = Справочники.СкладыСлужбДоставки.СоздатьЭлемент();
	НовыйСкладСлужбыДоставки.ИдентификаторЯндекса = Выборка.ИдентификаторСклада;
	НовыйСкладСлужбыДоставки.Наименование = Выборка.АдресСклада;
	НовыйСкладСлужбыДоставки.Владелец = СлужбаДоставки;
	ЗаписатьВПривилегированномРежиме(НовыйСкладСлужбыДоставки);
	
	Возврат НовыйСкладСлужбыДоставки.Ссылка;
	
КонецФункции

Функция СлужбаДоставкиПоДаннымСклада(Знач Выборка, Знач СозданныеСлужбыДоставки)
	
	Если ЗначениеЗаполнено(Выборка.СлужбаДоставки) Тогда
		Возврат Выборка.СлужбаДоставки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СозданныеСлужбыДоставки[Выборка.ИдентификаторСлужбыДоставки]) Тогда
		Возврат СозданныеСлужбыДоставки[Выборка.ИдентификаторСлужбыДоставки];
	КонецЕсли;
	
	НоваяСлужбаДоставки = Справочники.СлужбыДоставки.СоздатьЭлемент();
	НоваяСлужбаДоставки.ИдентификаторЯндекса = Выборка.ИдентификаторСлужбыДоставки;
	НоваяСлужбаДоставки.Наименование = Выборка.ПредставлениеСлужбыДоставки;
	ЗаписатьВПривилегированномРежиме(НоваяСлужбаДоставки);
	
	СозданныеСлужбыДоставки[Выборка.ИдентификаторСлужбыДоставки] = НоваяСлужбаДоставки.Ссылка;
	
	Возврат НоваяСлужбаДоставки.Ссылка;
	
КонецФункции

Функция ИмяМетодаСоздатьЧерновикЗаказа()
	
	Возврат "createOrder";
	
КонецФункции

Функция ИмяМетодаОбновитьЧерновикЗаказа()
	
	Возврат "updateOrder";
	
КонецФункции

Функция ИмяМетодаСпособыДоставки()
	
	Возврат "searchDeliveryList";
	
КонецФункции

Функция ИмяМетодаСписокСлужбДоставки()
	
	Возврат "getDeliveries";
	
КонецФункции

Функция ИмяМетодаИнформацияОСкладе()
	
	Возврат "getWarehouseInfo";
	
КонецФункции

Функция ИмяМетодаИнформацияОЗаказе()
	
	Возврат "getOrderInfo";
	
КонецФункции

Функция ДобавитьСтоимостьПоПравилу(Услуга, СуммаЗаказа, СтоимостьДоставкиДляПолучателя, ОбъявленнаяЦенность)
	
	ПравилоРасчета = Услуга.Получить("calculateRules");
	
	Если Не ЗначениеЗаполнено(ПравилоРасчета) Тогда
		Возврат Услуга.Получить("cost");
	КонецЕсли;
	
	ТипРасчета = ВРег(ПравилоРасчета.Получить("calculate_type"));
	
	СтоимостьУслуги = ОбщегоНазначения.ОписаниеТипаЧисло(15, 6).ПривестиЗначение(ПравилоРасчета.Получить("service_value"));
	
	Если ТипРасчета = "FIX" Тогда
		Результат = СтоимостьУслуги;
	ИначеЕсли ТипРасчета = "PERCENT_DELIVERY" Тогда
		Результат = СтоимостьДоставкиДляПолучателя * СтоимостьУслуги;
	ИначеЕсли ТипРасчета = "PERCENT_COST" Тогда
		Результат = ОбъявленнаяЦенность * СтоимостьУслуги;
	ИначеЕсли ТипРасчета = "PERCENT_CASH" Тогда
		Результат = СуммаЗаказа * СтоимостьУслуги;
	КонецЕсли;
	
	МинимальнаяСтоимость = ОбщегоНазначения.ОписаниеТипаЧисло(15, 6).ПривестиЗначение(ПравилоРасчета.Получить("min_cost"));
	Если Результат < МинимальнаяСтоимость Тогда
		Результат = МинимальнаяСтоимость;
	КонецЕсли;
	
	МаксимальнаяСтоимость = ОбщегоНазначения.ОписаниеТипаЧисло(15, 6).ПривестиЗначение(ПравилоРасчета.Получить("max_cost"));
	Если ЗначениеЗаполнено(МаксимальнаяСтоимость) И Результат > МаксимальнаяСтоимость Тогда
		Результат = МаксимальнаяСтоимость;
	КонецЕсли;
	
	Возврат Окр(Результат, 2);
	
КонецФункции

// Используется для записи данных в объекты, полученные из Яндекс.Доставки
Процедура ЗаписатьВПривилегированномРежиме(Объект)
	
	УстановитьПривилегированныйРежим(Истина);
	Объект.Записать();
	
КонецПроцедуры

#КонецОбласти
