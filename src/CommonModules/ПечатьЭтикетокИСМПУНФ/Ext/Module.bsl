////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в обработке ПечатьЭтикетокИЦенников
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// См. ПечатьЭтикетокИСМППереопределяемый.СтруктураНастроекЭтикеткаИСМП.
// 
// Параметры:
// 	СтруктураНастроек - Структура - дополнительные параметры.
//
Процедура СтруктураНастроекЭтикеткаИСМП(СтруктураНастроекИтог) Экспорт
	
	СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.СтруктураНастроек();
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикетки");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Количество");
	СтруктураНастроек.ОбязательныеПоля.Добавить("НомерВГруппе");
	СтруктураНастроек.ОбязательныеПоля.Добавить("СодержимоеКоличество");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ПредставлениеНоменклатуры");
	СтруктураНастроек.ОбязательныеПоля.Добавить("КодМаркировки");
	
	Для Каждого КлючИЗначение Из СтруктураНастроек Цикл
		СтруктураНастроекИтог.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры


// См. ПечатьЭтикетокИСМППереопределяемый.ПечатьЭтикетокИСМП
// 
// Параметры:
// 	ТаблицаДляПечати - Массив - Массив строк таблицы (см. РегистрыСведений.ПулКодовМаркировкиСУЗ.НоваяТаблицаДанныхДляПечатиЭтикеток)
// 	ТабличныйДокумент - ТабличныйДокумент - результат печати
// 	СтруктураНастроек - Структура - Дополнительные параметры для печати
// 	СтандартнаяОбработка - Булево - Признак использования библиотечной печати
Процедура ПечатьЭтикетокИСМП(ТаблицаДляПечати, ТабличныйДокумент, СтруктураНастроек, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДополнитьТаблицуШтрихкодамиУпаковок(ТаблицаДляПечати);
	ПечатьЭтикеток(ТаблицаДляПечати, ТабличныйДокумент, СтруктураНастроек);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриПодготовкеСтруктурыДанныхДляПечати(СтруктураНастроек, Режим, Запрос, ИсходныеДанные) Экспорт
	
	Если Режим = "ЭтикеткаКодМаркировкиИСМП" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
			
			ЗаполнитьДополнительныеПараметрыШтрихкодовУпаковок(ИсходныеДанные);
			
			НомерНачальнойПозиции = СтрНайти(Запрос.Текст, "(ВЫБРАТЬ");
			СодержимоеКонечнойПозиции = ") КАК ИсходныеДанные";
			НомерКонечнойПозиции  = СтрНайти(Запрос.Текст, СодержимоеКонечнойПозиции);
			ТекстЗаменяемогоПодзапроса = Сред(Запрос.Текст, НомерНачальнойПозиции, НомерКонечнойПозиции
				+ СтрДлина(СодержимоеКонечнойПозиции) - НомерНачальнойПозиции);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗаменяемогоПодзапроса, "&Таблица КАК ИсходныеДанные");
			
			ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		КонецЕсли;
		
	ИначеЕсли Режим = "ШтрихкодыУпаковок" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
			
			ЗаполнитьДополнительныеПараметрыШтрихкодовУпаковок(ИсходныеДанные);
			
			НомерНачальнойПозиции = СтрНайти(Запрос.Текст, "(ВЫБРАТЬ");
			СодержимоеКонечнойПозиции = ") КАК ИсходныеДанные";
			НомерКонечнойПозиции  = СтрНайти(Запрос.Текст, СодержимоеКонечнойПозиции);
			ТекстЗаменяемогоПодзапроса = Сред(Запрос.Текст, НомерНачальнойПозиции, НомерКонечнойПозиции
				+ СтрДлина(СодержимоеКонечнойПозиции) - НомерНачальнойПозиции);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗаменяемогоПодзапроса, "&Таблица КАК ИсходныеДанные");
			ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		КонецЕсли;
	КонецЕсли;
	// -- Локализация
КонецПроцедуры

Процедура ПриПечати(КоллекцияПечатныхФорм, ПараметрыПечати, ОбъектыПечати) Экспорт
	// ++ Локализация
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаАкцизныеМарки") Тогда
		
		СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.СтруктураНастроек();
		СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
		СтруктураНастроек.ОбязательныеПоля.Добавить("КодАкцизнойМарки");
		СтруктураНастроек.ОбязательныеПоля.Добавить("СерияМарки");
		СтруктураНастроек.ОбязательныеПоля.Добавить("НомерМарки");
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		//СформироватьПечатнуюФормуЭтикеткиАкцизныеМарки(ПараметрыПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаАкцизныеМарки",
			НСтр("ru = 'Этикетки акцизных марок';"),
			ТабличныйДокумент);
			
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаКодМаркировкиИСМП") Тогда
		
		СтруктураНастроек = ПечатьЭтикетокИСМП.СтруктураНастроекЭтикеткаИСМП();
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		СформироватьПечатнуюФормуЭтикеткиОбувь(ПараметрыПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаКодМаркировкиИСМП",
			НСтр("ru = 'Этикетка обувь';"),
			ТабличныйДокумент);
			
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаШтрихкодыУпаковки") Тогда
		
		СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.СтруктураНастроек();
		СтруктураНастроек.ОбязательныеПоля.Добавить("Штрихкод");
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		//СформироватьПечатнуюФормуЭтикеткиШтрихкодыУпаковки(ПараметрыПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаШтрихкодыУпаковки",
			НСтр("ru = 'Этикетки штрихкодов упаковок';"),
			ТабличныйДокумент);
			
	КонецЕсли;
	// -- Локализация
КонецПроцедуры


#Область ШтрихкодыУпаковок

Процедура ЗаполнитьСвойстваСтрокиШтрихкодовУпаковокПоШтрихкоду(Строка, Штрихкод) ЭКспорт
	
	// ++ Локализация
	ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(Штрихкод);
	
	Если ПараметрыШтрихкода.Результат <> Неопределено Тогда
		
		СвойстваШтрихкода = ПараметрыШтрихкода.Результат;
		
		Если ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
			
			Строка.ПрефиксКомпанииGS1 = Формат(СвойстваШтрихкода.ПрефиксКомпанииGS1, "ЧГ=0");
			Строка.ЦифраРасширения    = Формат(СвойстваШтрихкода.ЦифраРасширения, "ЧГ=0");
			Строка.СерийныйНомерSSCC  = Формат(СвойстваШтрихкода.СерийныйНомерSSCC, "ЧГ=0");
			Строка.КонтрольноеЧисло   = Формат(СвойстваШтрихкода.КонтрольноеЧисло, "ЧГ=0");
			
		ИначеЕсли ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128 Тогда
			
			Если СвойстваШтрихкода.НомерФорматаCode128 = 1 Тогда
				Строка.ИдентификаторОрганизации = СвойстваШтрихкода.ИдентификаторОрганизации;
				Строка.ДатаМаркировки           = СвойстваШтрихкода.ДатаМаркировки;
				Строка.НомерПоПорядку           = Формат(СвойстваШтрихкода.НомерПоПорядку, "ЧГ=0");
			ИначеЕсли СвойстваШтрихкода.НомерФорматаCode128 = 2 Тогда
				Строка.ИдентификаторОрганизации = СвойстваШтрихкода.ИдентификаторОрганизации;
				Строка.ТипЛогистическойЕдиницы  = СвойстваШтрихкода.ТипЛогистическойЕдиницы;
				Строка.НомерПлощадкиМаркировки  = СвойстваШтрихкода.НомерПлощадкиМаркировки;
				Строка.ГодГенерацииШтрихкода    = Формат(СвойстваШтрихкода.ГодГенерацииШтрихкода, "ДФ=yyyy");
				Строка.НомерПоПорядку           = Формат(СвойстваШтрихкода.НомерПоПорядку, "ЧГ=0");
			ИначеЕсли СвойстваШтрихкода.НомерФорматаCode128 = 3 Тогда
				Строка.ИдентификаторОрганизации = СвойстваШтрихкода.ИдентификаторОрганизации;
				Строка.НомерПоПорядку           = Формат(СвойстваШтрихкода.НомерПоПорядку, "ЧГ=0");
			КонецЕсли;
			
		ИначеЕсли ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
			Или ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked
			Или ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
			
			Для каждого СтрокаПараметровПримененияGS1 Из ПараметрыШтрихкода.Результат Цикл
				ИмяКолонкиПечати = "ИдентификаторПрименения_" + СтрокаПараметровПримененияGS1.КлючИдентификатора;
				Строка[ИмяКолонкиПечати] = СтрокаПараметровПримененияGS1.Значение;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	// -- Локализация
	
КонецПроцедуры

Процедура ПриПодготовкеСтруктурыДанныхНабора(Режим, СхемаКомпоновкиДанных, ТекстЗапроса) Экспорт
	
	// ++ Локализация
	Если Режим = "ШтрихкодыУпаковок" Тогда
		// Добавляем поля в текст запроса СКД
		// Поля для GS1_128 и GS1_DataBarExpandedStacked одинаковы
		ИдентификаторыТипыКолонок = ШтрихкодыУпаковокКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(Перечисления.ТипыШтрихкодов.GS1_128);
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		ТекстРазрешенныхПолейИсходный =
		"{ВЫБРАТЬ
		|	ШтрихкодУпаковкиТовара.*,
		|	Штрихкод,
		|	Номенклатура.*,
		|	Характеристика.*,
		|	ЦифраРасширения,
		|	ПрефиксКомпанииGS1,
		|	СерийныйНомер,
		|	КонтрольноеЧисло,
		|	ИдентификаторОрганизации,
		|	ДатаМаркировки,
		|	НомерПоПорядку}";
		ТекстРазрешенныхПолейДобавляемый = "";
		
		Для каждого ИдентификаторИТипКолонки Из ИдентификаторыТипыКолонок Цикл
			ИдентификаторПрименения = ИдентификаторИТипКолонки.Ключ;
			ИмяКолонки  = "ИдентификаторПрименения_" + ИдентификаторПрименения;
			ТипЗначения = ИдентификаторИТипКолонки.Значение;
			Если ТипЗначения.СодержитТип(Тип("Число")) Тогда
				ВыражениеПоля = "0";
			ИначеЕсли ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				ВыражениеПоля = "ДАТАВРЕМЯ(1, 1, 1)";
			Иначе
				ВыражениеПоля = """""";
			КонецЕсли;
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Операторы[0].ВыбираемыеПоля.Добавить(ВыражениеПоля);
			ИндексПоследнейКолонки = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Колонки.Количество() - 1;
			ДобавленнаяКолонка = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Колонки[ИндексПоследнейКолонки];
			ДобавленнаяКолонка.Псевдоним   = ИмяКолонки;
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить("ИсходныеДанные." + ИмяКолонки);
			СхемаЗапроса.ПакетЗапросов[1].Операторы[0].ВыбираемыеПоля.Добавить("ИсходныеДанныеПоследнийЗапрос." + ИмяКолонки);
			
			ТекстРазрешенныхПолейДобавляемый = ТекстРазрешенныхПолейДобавляемый
			+ 	",
				|	" + ИмяКолонки;
			
			НовоеПолеНабора(
				СхемаКомпоновкиДанных.НаборыДанных.НаборДанных,
				ИмяКолонки,
				"ПоляGS1." + ИмяКолонки,
				ИмяКолонки,
				ТипЗначения);
		КонецЦикла;
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		ТекстРазрешенныхПолейДобавляемый = СтрЗаменить(ТекстРазрешенныхПолейИсходный, "}", ТекстРазрешенныхПолейДобавляемый + "}");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстРазрешенныхПолейИсходный, ТекстРазрешенныхПолейДобавляемый);
		
	ИначеЕсли Режим = "ЭтикеткаКодМаркировкиИСМП" Тогда
		// Добавляем поля в текст запроса СКД
		// Поля для GS1_128 и GS1_DataBarExpandedStacked одинаковы
		ИдентификаторыТипыКолонок = ШтрихкодыУпаковокКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(Перечисления.ТипыШтрихкодов.GS1_128);
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		ТекстРазрешенныхПолейИсходный =
		"{ВЫБРАТЬ
		|	Штрихкод,
		|	КодМаркировки,
		|	НомерВГруппе,
		|	СодержимоеКоличество,
		|	GTIN,
		|	ПредставлениеНоменклатуры,
		|	Номенклатура.*,
		|	Характеристика.*,
		|	ШаблонЭтикетки.*,
		|	Количество,
		|	ЦифраРасширения,
		|	ПрефиксКомпанииGS1,
		|	СерийныйНомерSSCC,
		|	КонтрольноеЧисло}";
		ТекстРазрешенныхПолейДобавляемый = "";
		
		Для каждого ИдентификаторИТипКолонки Из ИдентификаторыТипыКолонок Цикл
			ИдентификаторПрименения = ИдентификаторИТипКолонки.Ключ;
			ИмяКолонки  = "ИдентификаторПрименения_" + ИдентификаторПрименения;
			ТипЗначения = ИдентификаторИТипКолонки.Значение;
			Если ТипЗначения.СодержитТип(Тип("Число")) Тогда
				ВыражениеПоля = "0";
			ИначеЕсли ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				ВыражениеПоля = "ДАТАВРЕМЯ(1, 1, 1)";
			Иначе
				ВыражениеПоля = """""";
			КонецЕсли;
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Операторы[0].ВыбираемыеПоля.Добавить(ВыражениеПоля);
			ИндексПоследнейКолонки = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Колонки.Количество() - 1;
			ДобавленнаяКолонка = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Колонки[ИндексПоследнейКолонки];
			ДобавленнаяКолонка.Псевдоним   = ИмяКолонки;
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить("ИсходныеДанные." + ИмяКолонки);
			СхемаЗапроса.ПакетЗапросов[1].Операторы[0].ВыбираемыеПоля.Добавить("ИсходныеДанныеПоследнийЗапрос." + ИмяКолонки);
			
			ТекстРазрешенныхПолейДобавляемый = ТекстРазрешенныхПолейДобавляемый
			+ 	",
				|	" + ИмяКолонки;
			
			НовоеПолеНабора(
				СхемаКомпоновкиДанных.НаборыДанных.НаборДанных,
				ИмяКолонки,
				"ПоляGS1." + ИмяКолонки,
				ИмяКолонки,
				ТипЗначения);
				
		КонецЦикла;
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		ТекстРазрешенныхПолейДобавляемый = СтрЗаменить(ТекстРазрешенныхПолейИсходный, "}", ТекстРазрешенныхПолейДобавляемый + "}");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстРазрешенныхПолейИсходный, ТекстРазрешенныхПолейДобавляемый);
		
	КонецЕсли;
	// -- Локализация
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеПараметрыШтрихкодовУпаковок(ТаблицаДанныхШтрихкодов) Экспорт
	
	// ++ Локализация
	
	// Добавляем колонки в таблицу.
	ПоддерживаемыеТипыШтрихкодов = Новый Массив;
	ПоддерживаемыеТипыШтрихкодов.Добавить(Перечисления.ТипыШтрихкодов.Code128);
	ПоддерживаемыеТипыШтрихкодов.Добавить(Перечисления.ТипыШтрихкодов.SSCC);
	// PDF417 и DataMatrix имеют одинаковые параметры. Поэтому добавляем только один тип.
	ПоддерживаемыеТипыШтрихкодов.Добавить(Перечисления.ТипыШтрихкодов.PDF417);
	ПоддерживаемыеТипыШтрихкодов.Добавить(Перечисления.ТипыШтрихкодов.DataMatrix);
	// GS1_DataBarExpandedStacked и GS1_128, GS1_DataMatrix имеют одинаковые параметры. Поэтому добавляем только один тип.
	ПоддерживаемыеТипыШтрихкодов.Добавить(Перечисления.ТипыШтрихкодов.GS1_128);
	
	Для каждого ПоддерживаемыйТипШтрихкода Из ПоддерживаемыеТипыШтрихкодов Цикл
		
		ИдентификаторыИТипыКолонокПечати = ШтрихкодыУпаковокКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(ПоддерживаемыйТипШтрихкода);
		Для каждого ИдентификаторИТипКолонки Из ИдентификаторыИТипыКолонокПечати Цикл
			ИдентификаторКолонки = ИдентификаторИТипКолонки.Ключ;
			Если ПоддерживаемыйТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128
				ИЛИ ПоддерживаемыйТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
				ИмяКолонки = ИдентификаторКолонки;
			Иначе
				ИмяКолонки = "ИдентификаторПрименения_" + ИдентификаторКолонки;
			КонецЕсли;
			Если ТаблицаДанныхШтрихкодов.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				ТипКолонки = ИдентификаторИТипКолонки.Значение;
				ТаблицаДанныхШтрихкодов.Колонки.Добавить(ИмяКолонки, ТипКолонки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполняем колонки прочитанными значениями.
	Для каждого СтрокаТаблицы Из ТаблицаДанныхШтрихкодов Цикл
		Если СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128 Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаCode128(СтрокаТаблицы.Штрихкод);
			Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыШтрихкода.Результат);
			КонецЕсли;
		ИначеЕсли СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаSSCC(СтрокаТаблицы.Штрихкод);
			Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыШтрихкода.Результат);
			КонецЕсли;
		ИначеЕсли СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
			Или СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked
			Или СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1(СтрокаТаблицы.Штрихкод);
			Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
				Для каждого СвойстваПараметраШтрихкода Из ПараметрыШтрихкода.Результат Цикл
					ИмяКолонки = "ИдентификаторПрименения_" + СвойстваПараметраШтрихкода.КлючИдентификатора;
					СтрокаТаблицы[ИмяКолонки] = СвойстваПараметраШтрихкода.Значение;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// -- Локализация
	Возврат;
	
КонецПроцедуры


#КонецОбласти


#Область ЭтикеткиИСМП

// Процедура дополняет исходную таблицу данных для печати колонками, необходимыми для заполнения данными 
// штрихкода SSCС, GS1
// 
// Параметры:
// 	ТаблицаДанных - ТаблицаЗначений - Таблица исходных данных
Процедура ДополнитьТаблицуШтрихкодамиУпаковок(ТаблицаДанных) Экспорт
	
	ТаблицаШтрихкодов = НоваяТаблицаШтрихкодовУпаковок();
	Для Каждого КолонкаТаблицаШтрихкодов Из ТаблицаШтрихкодов.Колонки Цикл
		Если ТаблицаДанных.Колонки.Найти(КолонкаТаблицаШтрихкодов.Имя) = Неопределено Тогда
			ТаблицаДанных.Колонки.Добавить(КолонкаТаблицаШтрихкодов.Имя, КолонкаТаблицаШтрихкодов.ТипЗначения, , )
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Штрихкод) 
			И ЗначениеЗаполнено(СтрокаТаблицы.ТипШтрихкода)
			И (СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128")
				Или СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataBarExpandedStacked")
				Или СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataMatrix")
				Или СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix")
				Или СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC")
				Или СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.Code128")) Тогда
			ЗаполнитьСвойстваСтрокиШтрихкодовУпаковокПоШтрихкоду(СтрокаТаблицы, СтрокаТаблицы.Штрихкод);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура печати этикеток обуви
// 
// Параметры:
// 	ТаблицаДанных - ТаблицаЗначений - Таблица с исходными данными для печати (см. РегистрыСведений.ПулКодовМаркировкиСУЗ.НоваяТаблицаДанныхДляПечатиЭтикеток)
// 	ТабличныйДокумент - ТабличныйДокумент - результат печати
// 	СтруктураНастроек - Структура - Параметры печати
Процедура ПечатьЭтикеток(ТаблицаДанных, ТабличныйДокумент, СтруктураНастроек)
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаИСМП";
	
	// Собираем используемые поля из шаблонов.
	СоответствиеШаблонов = Новый Соответствие;
	Для Каждого СтрокаТЧ Из ТаблицаДанных Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) И СтрокаТЧ.Количество > 0 Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураНастроек.Свойство("СтруктураМакетаШаблона")
		И ЗначениеЗаполнено(СтруктураНастроек.СтруктураМакетаШаблона) Тогда
		СоответствиеШаблонов.Вставить(Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	КонецЕсли;
	
	// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
	Для Каждого КлючИЗначение Из СоответствиеШаблонов Цикл
		
		ШаблонЭтикетокИЦенников = КлючИЗначение.Ключ;
		
		Если ЗначениеЗаполнено(ШаблонЭтикетокИЦенников) Тогда
			СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
		Иначе
			СтруктураШаблона = СтруктураНастроек.СтруктураМакетаШаблона;
		КонецЕсли;
		
		Если СтруктураШаблона = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Структура шаблонов.
		СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(ШаблонЭтикетокИЦенников, СтруктураШаблона);
		
		// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
		Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
			СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
		КонецЦикла;
		
	КонецЦикла;
	
	#Область ПодготовкаСтруктурыДанныхШаблона
	СтруктураНастроек.ИсходныеДанные = ТаблицаДанных;
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек,,"ЭтикеткаКодМаркировкиИСМП");
	#КонецОбласти
	
	#Область ФормированиеТабличногоДокумента
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;

	ПараметрыТабличногоДокументЗаполнены = Ложь;
	
	ПредыдущейНомерВГруппе = Неопределено;
	
	Для Каждого СтрокаТовары Из СтруктураРезультата.ТаблицаТоваров Цикл
		
		КоличествоЭтикеток = СтрокаТовары.Количество;
		Если КоличествоЭтикеток > 0 Тогда
			
			ТекущийНомерВГруппе = СтрокаТовары.НомерВГруппе;
			
			Если Не ПараметрыТабличногоДокументЗаполнены Тогда
				// Применение настроек табличного документа.
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки,, "ОбластьПечати, АвтоМасштаб");
				ПараметрыТабличногоДокументЗаполнены = Истина;
			КонецЕсли;
				
			СтруктураШаблона = СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Получить(СтрокаТовары.ШаблонЭтикетки);
	
			Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
	
			Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
				// Если ОбщегоНазначенияРТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда // ++
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
					НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(Справочники.ХранилищеШаблонов.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
					Если НаименованиеКолонки <> Неопределено Тогда
						Область.Параметры[ПараметрШаблона.Значение] = СтрокаТовары[НаименованиеКолонки];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаТаблицыДанных = ТаблицаДанных.Найти(СтрокаТовары.КодМаркировки, "КодМаркировки");
			Если СтрокаТаблицыДанных = Неопределено Тогда
				ШтрихкодВBase64 = Ложь;
			Иначе
				ШтрихкодВBase64 = СтрокаТаблицыДанных.ШтрихкодВBase64;
			КонецЕсли;
			
			#Область ПечатьИзображенияШтрихкода
			Для каждого Рисунок Из Область.Рисунки Цикл
				
				Если СтрНайти(Рисунок.Имя, Справочники.ХранилищеШаблонов.ИмяПараметраШтрихкод()) = 1 Тогда
					
					ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(Справочники.ХранилищеШаблонов.ИмяПараметраШтрихкод())];
					Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
						
						Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
							УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
						Иначе
							УровеньЧеткости = 1;
						КонецЕсли;
						
						ПараметрыШтрихкода = Новый Структура;
						ПараметрыШтрихкода.Вставить("Ширина",          Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
						ПараметрыШтрихкода.Вставить("Высота",          Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
						ПараметрыШтрихкода.Вставить("ТипКода",         СтруктураШаблона.ТипКода);
						ПараметрыШтрихкода.Вставить("ОтображатьТекст", СтруктураШаблона.ОтображатьТекст);
						ПараметрыШтрихкода.Вставить("РазмерШрифта",    СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
						
						Если ШтрихкодВBase64 Тогда
							ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 1);
							ПараметрыШтрихкода.Вставить("Штрихкод", ЗначениеШтрихкода);
						Иначе
							ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0);
							ПараметрыШтрихкода.Вставить("Штрихкод", ШтрихкодированиеИС.КодGS1ДляКомпонентыПечати(ЗначениеШтрихкода, СтруктураШаблона.ТипКода));
						КонецЕсли;
						
						Если СтруктураШаблона.Свойство("GS1DatabarКоличествоСтрок") Тогда
							ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", СтруктураШаблона.GS1DatabarКоличествоСтрок);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
							ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("УголПоворота") Тогда
							ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
							ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("Масштабировать") Тогда
							ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
							ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
							ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
						КонецЕсли;
						
						Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			#КонецОбласти
			
			#Область КоличествоЭкземпляров
			Для Инд = 1 По КоличествоЭтикеток Цикл // Цикл по количеству экземпляров
				
				Если СтруктураНастроек.КаждаяЭтикеткаНаНовомЛисте Тогда
					
					ТабличныйДокумент.Вывести(Область);
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
				Иначе
					
					Если ПредыдущейНомерВГруппе = Неопределено Тогда
						ПредыдущейНомерВГруппе = ТекущийНомерВГруппе;
					КонецЕсли;
					Присоединять = Истина;
					Если ПредыдущейНомерВГруппе <> ТекущийНомерВГруппе Тогда
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ПредыдущейНомерВГруппе = ТекущийНомерВГруппе;
						Присоединять = Ложь;
					КонецЕсли;
					
					Если Присоединять И ТабличныйДокумент.ПроверитьПрисоединение(Область) Тогда
						
						ТабличныйДокумент.Присоединить(Область);
						
					Иначе
						
						Если Не ТабличныйДокумент.ПроверитьВывод(Область) И Присоединять Тогда
							ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
						
						ТабличныйДокумент.Вывести(Область);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; // Цикл по количеству экземпляров
			#КонецОбласти
	
		КонецЕсли;
	
	КонецЦикла; // Цикл по строкам таблицы товаров
	// -- Локализация
	
#КонецОбласти
	
КонецПроцедуры

Процедура СформироватьПечатнуюФормуЭтикеткиОбувь(ДанныеПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент) Экспорт
	
	РегистрыСведений.ПулКодовМаркировкиСУЗ.РаспечататьЭтикеткиИЗафиксироватьДатуПечати(ДанныеПечати, ТабличныйДокумент, СтруктураНастроек);
	
КонецПроцедуры


#КонецОбласти



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяТаблицаШтрихкодовУпаковок() Экспорт
	
	Таблица = ТаблицаШтрихкодыУпаковок();
	
	ЗначенияТиповШтрихкодов = Метаданные.Перечисления.ТипыШтрихкодов.ЗначенияПеречисления;
	Для каждого МетаданныеЗначенияПеречисления Из ЗначенияТиповШтрихкодов Цикл
		ТипШК = Перечисления.ТипыШтрихкодов[МетаданныеЗначенияПеречисления.Имя];
		КолонкиТипаШК = ШтрихкодыУпаковокКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(ТипШК);
		Для каждого КлючИЗначение Из КолонкиТипаШК Цикл
			Если ТипШК = Перечисления.ТипыШтрихкодов.GS1_128
				Или ТипШК = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked
				Или ТипШК = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
				ИмяКолонки = "ИдентификаторПрименения_" + КлючИЗначение.Ключ;
			Иначе
				ИмяКолонки = КлючИЗначение.Ключ;
			КонецЕсли;
			
			Если Таблица.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Таблица.Колонки.Добавить(ИмяКолонки, КлючИЗначение.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция ТаблицаШтрихкодыУпаковок() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Ссылка"         , Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	Результат.Колонки.Добавить("ТипШтрихкода"   , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	Результат.Колонки.Добавить("Штрихкод"       , Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	Результат.Колонки.Добавить("Номенклатура"   , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика" , Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Упаковки = Новый Массив;
	Упаковки.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
	Результат.Колонки.Добавить("Упаковка"       , Новый ОписаниеТипов(Упаковки));
	Результат.Колонки.Добавить("ДатаМаркировки" , Новый ОписаниеТипов("Дата"));
	
	Возврат Результат;
	
КонецФункции

// Возвращает ссылку на новое поле в переданном наборе данных
//
// Параметры:
//  НаборДанных  - НаборДанныхЗапросСхемыКомпоновкиДанных, НаборДанныхОбъектСхемыКомпоновкиДанных - набор данных в
//      котором необходимо создать новое поле
//  Поле         - Строка - имя нового поля схемы компоновки данных
//  ПутьКДанным  - Строка - путь к данным нового поля схемы компоновки данных (необязательное по умолчанию равно "")
//  Заголовок    - Строка - заголовок нового поля схемы компоновки данных (необязательное по умолчанию равно "")
//  ТипЗначения  - ОписаниеТипов - тип данных нового поля схемы компоновки данных (необязательное по умолчанию Неопределено).
//
// Возвращаемое значение:
//  ПолеНабораДанныхСхемыКомпоновкиДанных - описание возвращаемого значения.
//
Функция НовоеПолеНабора(НаборДанных, Поле, ПутьКДанным = "", Заголовок = "", ТипЗначения = Неопределено) Экспорт
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		ПутьКДанным = Поле;
	КонецЕсли;
	
	Если ПустаяСтрока(Заголовок) Тогда
		Заголовок = Поле;
	КонецЕсли;
	
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле = Поле;
	НовоеПоле.ПутьКДанным = ПутьКДанным;
	НовоеПоле.Заголовок = Заголовок;
	Если ТипЗначения <> Неопределено Тогда
		НовоеПоле.ТипЗначения = ТипЗначения;
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

#КонецОбласти

#Область КомпоновкаДанных

// Находит среди элементов полей СКД поле по полному имени.
//
// Параметры:
//  Элементы - ПолеКомпоновкиДанных - поля СКД.
//  ПолноеИмя - Строка - полное имя поля СКД.
//  Кэш - Соответствие - соответствие полей и наименований СКД.
//
// Возвращаемое значение:
//	ПолеКомпоновкиДанных - поле СКД по полному имени.
//
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя, Кэш = Неопределено) Экспорт
	
	Если Кэш <> Неопределено Тогда
		Поле = Кэш.Получить(ПолноеИмя);
		Если Поле <> Неопределено Тогда
			Возврат Поле;
		КонецЕсли;
	КонецЕсли;
	
	МассивЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя);
	КоличествоЧастей = МассивЧастейИмен.Количество();
	
	ТекущееИмя = МассивЧастейИмен[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, ТекущееИмя, Кэш);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По КоличествоЧастей Цикл
		ТекущееИмя = ТекущееИмя +"." + МассивЧастейИмен[Сч-1];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, ТекущееИмя, Кэш);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если Кэш <> Неопределено Тогда
		Кэш.Вставить(ПолноеИмя, Поле);
	КонецЕсли;
	
	Возврат Поле;
	
КонецФункции

// Получает полное имя поля по частям.
//
// Параметры:
//	ПолноеИмя - полное имя поля СКД.
//
// Возвращаемое значение:
//	МассивЧастей - массив, содержащий части полного имени.
//
Функция ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя)

	МассивЧастей = Новый Массив;
	ИмяДляОбработки = ПолноеИмя;
	
	Пока НЕ ПустаяСтрока(ИмяДляОбработки) Цикл
		Если Лев(ИмяДляОбработки, 1) = "[" Тогда
			
			Позиция = Найти(ИмяДляОбработки, "]");
			Если Позиция = 0 Тогда
				МассивЧастей.Добавить(Сред(ИмяДляОбработки, 2));
				ИмяДляОбработки = "";
			Иначе
				МассивЧастей.Добавить(Сред(ИмяДляОбработки, 1, Позиция));
				ИмяДляОбработки = Сред(ИмяДляОбработки, Позиция + 2);
			КонецЕсли;
			
		Иначе
			
			Позиция = Найти(ИмяДляОбработки, ".");
			Если Позиция = 0 Тогда
				МассивЧастей.Добавить(ИмяДляОбработки);
				ИмяДляОбработки = "";
			Иначе
				МассивЧастей.Добавить(Лев(ИмяДляОбработки, Позиция - 1));
				ИмяДляОбработки = Сред(ИмяДляОбработки, Позиция + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЧастей;

КонецФункции

// Находит среди элементов полей СКД поле по имени.
//
// Параметры:
//  Элементы - ПолеКомпоновкиДанных - поля СКД.
//  Имя - Строка - имя поля СКД.
//  Кэш - Соответствие - соответствие полей и наименований СКД.
//
// Возвращаемое значение:
//  ПолеКомпоновкиДанных - поле СКД по полному имени.
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя, Кэш = Неопределено) Экспорт
	
	Если Кэш <> Неопределено Тогда
		Элемент = Кэш.Получить(Имя);
		Если Элемент <> Неопределено Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			
			Если Кэш <> Неопределено Тогда
				Кэш.Вставить(Имя, Элемент);
			КонецЕсли;
			
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

// Заполняет колонку таблицы значений последовательными номерами.
//
// Параметры:
//  Таблица - ТаблицаЗначений - таблица значений, строки которой нужно пронумеровать.
//  ИмяКолонкиНомераСтроки - КолонкаТаблицыЗначений - колонка таблицы значений, в которой будут указаны номера строк.
//
Процедура ПронумероватьТаблицуЗначений(Таблица, ИмяКолонкиНомераСтроки) Экспорт
	
	// Добавлена проверка на существование колонки
	Если Таблица.Колонки.Найти(ИмяКолонкиНомераСтроки) = Неопределено Тогда
		Таблица.Колонки.Добавить(ИмяКолонкиНомераСтроки, ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	КонецЕсли;

	КоличествоСтрок = Таблица.Количество() - 1;
	Для НомерСтроки = 0 По КоличествоСтрок Цикл
		Таблица[НомерСтроки][ИмяКолонкиНомераСтроки] = НомерСтроки;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти