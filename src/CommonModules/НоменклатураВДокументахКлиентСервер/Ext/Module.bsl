
#Область ПрограммныйИнтерфейс

// Проверяет наличие реквизита у объекта по строковому имени реквизита
//
// Параметры:
//  ИмяРеквизита - Строка - имя реквизита
//  Объект - ДокументОбъект - документ, для которого проверяется наличие реквизита
//         - ДокументТабличнаяЧастьСтрока - строка, для которой проверяется наличие реквизита
//
// Возвращаемое значение:
//  Булево - возвращает Истина когда у объекта есть реквизит с указанным именем
//
Функция ЕстьРеквизитОбъекта(Знач ИмяРеквизита, Знач Объект) Экспорт
	
	ПроверкаРеквизита = Новый Структура(ИмяРеквизита, Неопределено);
	ЗаполнитьЗначенияСвойств(ПроверкаРеквизита, Объект);
	Если ПроверкаРеквизита[ИмяРеквизита] <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Установить флаг у дочерних строк в дереве
//
// Параметры:
//  СписокЭлементов - ДанныеФормыКоллекцияЭлементовДерева - строки, в которых устанавливается флаг
//  ИмяФлага - Строка - имя устанавливаемого флага
//  ЗначениеФлага - Булево - значение устанавливаемого флага
//
Процедура УстановитьФлагУПодчиненных(СписокЭлементов, ИмяФлага, ЗначениеФлага) Экспорт
	
	Для Каждого СтрокаДерева Из СписокЭлементов Цикл
		
		СтрокаДерева[ИмяФлага] = ЗначениеФлага;
		
		ДочерниеСтроки = СтрокаДерева.ПолучитьЭлементы();
		Если ДочерниеСтроки.Количество() > 0 Тогда
			УстановитьФлагУПодчиненных(ДочерниеСтроки, ИмяФлага, ЗначениеФлага);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Установить флаг у родителей
//
// Параметры:
//  ТекущиеДанные - ДанныеФормыЭлементДерева - подчиненная строка
//  ИмяФлага - Строка - имя устанавливаемого флага
//  ЗначениеФлага - Булево - значение устанавливаемого флага
//
Процедура УстановитьФлагУРодителей(ТекущиеДанные, ИмяФлага, ЗначениеФлага) Экспорт
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Родитель[ИмяФлага] = ЗначениеФлага;
		УстановитьФлагУРодителей(Родитель, ИмяФлага, ЗначениеФлага);
	КонецЕсли;
	
КонецПроцедуры

// Процедура рассчитывает сумму НДС в строке табличной части.
Процедура РассчитатьСуммуНДС(Объект, СтрокаТабличнойЧасти) Экспорт
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	Если ЕстьРеквизитОбъекта("СуммаВключаетНДС", Объект) Тогда
		СуммаВключаетНДС = Объект.СуммаВключаетНДС;
	Иначе
		СуммаВключаетНДС = Истина;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВключаетНДС,
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры

// Процедура рассчитывает сумму в строке табличной части.
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, ИмяТабличнойЧасти = "Запасы") Экспорт
	
	// Сумма.
	Если ИмяТабличнойЧасти = "Работы" Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Кратность * СтрокаТабличнойЧасти.Коэффициент * СтрокаТабличнойЧасти.Цена;
	Иначе
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	КонецЕсли;
	
	// Скидки.
	Если ЕстьРеквизитОбъекта("ИспользоватьСкидки", СтрокаТабличнойЧасти) И СтрокаТабличнойЧасти.ИспользоватьСкидки Тогда
		Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
			СтрокаТабличнойЧасти.Сумма = 0;
		ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
		СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
	КонецЕсли; 
	
	// Сумма НДС.
	Если ЕстьРеквизитОбъекта("СуммаНДС", СтрокаТабличнойЧасти) Тогда
		РассчитатьСуммуНДС(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	// Всего.
	Если ЕстьРеквизитОбъекта("Всего", СтрокаТабличнойЧасти) Тогда
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет итоги подобранных товаров в форме Корзина справочника Номенклатура
//
// Параметры:
//  Форма - Форма элемента с корзиной
//  ВалютаПредставление - Представление валюты
//
Процедура ОбновитьИтогиПодобранныхТоваров(Форма, ВалютаПредставление = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ВалютаПредставление) Тогда
		ВалютаПредставление = Форма.ВалютаПредставление;
	КонецЕсли;
	
	Если Форма.ЕстьДоступКЦенам Тогда
		Форма.НадписьПодобраноТоваров = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ваша корзина: 
			|%1 на сумму %2 %3'"),
			Форма.Корзина.Итог("Количество"),
			Формат(Форма.Корзина.Итог("Сумма"),"ЧДЦ=2; ЧН=0"),
			?(ЗначениеЗаполнено(ВалютаПредставление), ВалютаПредставление, "")
			);
	Иначе		
		Форма.НадписьПодобраноТоваров = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ваша корзина:
			|%1'"),
			Форма.Корзина.Итог("Количество")
			);
	КонецЕсли;
	
КонецПроцедуры

// Для использования в колонке Содержание. Добавляет период оказания услуг по договору к сформированному наименованию.
//
// Параметры:
//  ПредставлениеНоменклатуры  - Строка
//  Дата                       - Дата
//  Периодичность              - ПеречислениеСсылка.БиллингПериодичностьДоговораОбслуживания
// 
// Возвращаемое значение:
//   - Строка
//
Функция СодержаниеНоменклатурыСПериодом(ПредставлениеНоменклатуры, Дата, Периодичность) Экспорт
	
	СодержаниеНоменклатуры = "";
	
	Если НЕ ЗначениеЗаполнено(ПредставлениеНоменклатуры) Тогда
		Возврат СодержаниеНоменклатуры;
	КонецЕсли;
	
	ПредставлениеПериода = "";
	ФорматДаты = "";
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Неделя") Тогда
		ФорматДаты = НСтр("ru='дд ММММ гггг ""г.""'");
		ФорматДаты = СтрШаблон("ДФ='%1'", ФорматДаты);
		ПредставлениеПериода = СтрШаблон(
			"%1 — %2",
			Формат(НачалоНедели(Дата), ФорматДаты),
			Формат(КонецНедели(Дата), ФорматДаты)
		);
		//ПредставлениеПериода();
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Месяц") Тогда
		ФорматДаты = НСтр("ru='MMMM yyyy ""г.""'");
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Квартал") Тогда
		ФорматДаты = НСтр("ru='к ""квартал"" yyyy ""г.""'");
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Полгода") Тогда
		НомерПолугодия = ?(Месяц(Дата) <= 6, 1, 2);
		ФорматДаты = СтрШаблон(
			НСтр("ru='""%1 полугодие"" yyyy ""г.""'"),
			НомерПолугодия);
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Год") Тогда
		ФорматДаты = НСтр("ru='yyyy ""г.""'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФорматДаты) И НЕ ЗначениеЗаполнено(ПредставлениеПериода) Тогда
		ФорматДаты = СтрШаблон("ДФ='%1'", ФорматДаты);
		ПредставлениеПериода = Формат(Дата, ФорматДаты);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПредставлениеПериода) Тогда
		Возврат СодержаниеНоменклатуры;
	КонецЕсли;
	
	Возврат СтрШаблон(
		НСтр("ru='%1 за %2'"),
		ПредставлениеНоменклатуры,
		ПредставлениеПериода
	);
	
КонецФункции

// Заполняет таблицу настроек формы выбора номенклатуры в зависимости от документа
//
// Параметры:
//  Форма - Форма документа
//  ВидДокумента - Вид документа
//  НастройкиФормыВыбораНоменклатуры - Настройки формы выбора
//  Текущая - Признак текущей настройки
//  ИмяТабличнойЧасти - Имя табличной части выбора номенклатуры
//  СтруктураНастроек - Структура доп. настроек
//
Процедура ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(Форма, ВидДокумента, НастройкиФормыВыбораНоменклатуры, Текущая = Истина, ИмяТабличнойЧасти = "Запасы", СтруктураНастроек = Неопределено) Экспорт
	
	ТипСохраняемыхНастроек = ТипСохраняемыхНастроек(ВидДокумента);
	ПараметрыОтбора = Новый Структура("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	НастройкаСуществует = НастройкиФормыВыбораНоменклатуры.НайтиСтроки(ПараметрыОтбора);
	НастройкаСуществует = НастройкаСуществует.Количество();
	
	#Если Сервер Тогда
	Если Не НастройкиФормыВыбораНоменклатуры.Количество() 
		Или Не НастройкаСуществует Тогда 
		НоменклатураВДокументахСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатурыСервер(Форма, ВидДокумента, НастройкиФормыВыбораНоменклатуры
																							, ТипСохраняемыхНастроек, Текущая, ИмяТабличнойЧасти, СтруктураНастроек);
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	Если СтруктураНастроек = Неопределено Тогда Возврат КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИмяТабличнойЧасти, ИмяНастройки", ИмяТабличнойЧасти,);
	
	Для Каждого СтрокаСтруктураНастроек Из СтруктураНастроек Цикл;
		ПараметрыОтбора.ИмяНастройки = СтрокаСтруктураНастроек.Ключ;
		СтрокиНастроекФормы = НастройкиФормыВыбораНоменклатуры.НайтиСтроки(ПараметрыОтбора);
		Если Не СтрокиНастроекФормы.Количество() Тогда Продолжить КонецЕсли;
		СтрокиНастроекФормы[0].ЗначениеНастройки = СтрокаСтруктураНастроек.Значение;
	КонецЦикла;
	
КонецПроцедуры

// Определяет тип сохраняемых настроек в зависимости от вида документа
//
// Параметры:
//  ВидДокумента - Вид документа
//
Функция ТипСохраняемыхНастроек(ВидДокумента) Экспорт
	
	Если ВидДокумента = "РасходнаяНакладная"
		Или ВидДокумента = "ЧекККМ"
		Или ВидДокумента = "СписаниеЗапасов"
		Или ВидДокумента = "ЗаказНаряд"
		Или ВидДокумента = "СборкаЗапасовСписание"
		Или ВидДокумента = "ДополнительныеРасходыСписание"
		Или ВидДокумента = "ИнвентаризацияЗапасов"
		Или ВидДокумента = "ОтчетКомитенту"
		Или ВидДокумента = "ОтчетОПереработке"
		Или ВидДокумента = "ОтчетОРозничныхПродажах"
		Или ВидДокумента = "ОтчетПереработчикаСписание"
		Или ВидДокумента = "ПеремещениеЗапасов"
		Или ВидДокумента = "ПеремещениеПоЯчейкам"
		Или ВидДокумента = "ПересортицаЗапасов"
		Или ВидДокумента = "РасходныйОрдер"
		Или ВидДокумента = "РезервированиеЗапасов"
		Или ВидДокумента = "ОтчетКомиссионера"
		Или ВидДокумента = "КомплектацияЗапасовСписание" Тогда
		Возврат 1;
	ИначеЕсли ВидДокумента = "ЗаказПокупателя"
		Или ВидДокумента = "ЗаказПоставщику"
		Или ВидДокумента = "ПереоценкаВРозницеСуммовойУчет"
		Или ВидДокумента = "РаспределениеЗатрат"
		Или ВидДокумента = "СчетНаОплату"
		Или ВидДокумента = "СчетНаОплатуПоставщика"
		Или ВидДокумента = "ЗаказНаПроизводство" Тогда
		Возврат 2;
	ИначеЕсли ВидДокумента = "ПриходнаяНакладная"
		Или ВидДокумента = "ОприходованиеЗапасов"
		Или ВидДокумента = "СборкаЗапасовОприходование"
		Или ВидДокумента = "АвансовыйОтчет"
		Или ВидДокумента = "АктВыполненныхРабот"
		Или ВидДокумента = "ВводНачальныхОстатков"
		Или ВидДокумента = "ДополнительныеРасходыОприходование"
		Или ВидДокумента = "ЗаданиеНаРаботу"
		Или ВидДокумента = "КорректировкаПоступления"
		Или ВидДокумента = "КорректировкаРеализации"
		Или ВидДокумента = "ПриходныйОрдер"
		Или ВидДокумента = "ЧекККМВозврат"
		Или ВидДокумента = "ОтчетПереработчикаОприходование"
		Или ВидДокумента = "КомплектацияЗапасовОприходование" Тогда
		Возврат 3;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

// Обновляет параметры открытия формы выбора
//
// Параметры:
//  Форма - Форма документа
//  ИмяТабличнойЧасти - Имя табличной части выбора номенклатуры
//  ДополнениеНаименованияНоменклатуры - Дополнение наименования поля номенклатуры в зависимости от имени табличной части
//
Процедура ОбновитьПараметрыОткрытияФормыВыбора(Форма, ИмяТабличнойЧасти = "Запасы", ДополнениеНаименованияНоменклатуры = "") Экспорт
	
	НастройкиФормыВыбораНоменклатуры = НастройкиТабличнойЧасти(Форма.НастройкиФормыВыбораНоменклатуры, ИмяТабличнойЧасти);
	
	МассивПараметров = Новый Массив;
	
	Если Форма.Элементы.Найти(ИмяТабличнойЧасти + "Номенклатура" + ДополнениеНаименованияНоменклатуры) = Неопределено Тогда Возврат КонецЕсли;
	
	Для каждого ЭлементМассива Из Форма.Элементы[ИмяТабличнойЧасти + "Номенклатура" + ДополнениеНаименованияНоменклатуры].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя="Дополнительно.НастройкиФормы" Тогда 
			Продолжить;
		КонецЕсли;
		МассивПараметров.Добавить(ЭлементМассива);
	КонецЦикла;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Дополнительно.НастройкиФормы", НастройкиФормыВыбораНоменклатуры));
	Форма.Элементы[ИмяТабличнойЧасти + "Номенклатура"+ ДополнениеНаименованияНоменклатуры].ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Возвращает структуру настроек табличной части
//
// Параметры:
//  ТаблицаНастроек - Таблица настроек
//  ИмяТабличнойЧасти - Имя табличной части выбора номенклатуры
// 
// Возвращаемое значение:
//  Структура - структура настроек
Функция НастройкиТабличнойЧасти(ТаблицаНастроек, ИмяТабличнойЧасти)
	
	ПараметрыОтбора = Новый Структура("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	СтруктураВозврата = Новый Структура;
	
	НайденныеСтроки = ТаблицаНастроек.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СтруктураВозврата.Вставить(НайденнаяСтрока.ИмяНастройки, НайденнаяСтрока.ЗначениеНастройки);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти
