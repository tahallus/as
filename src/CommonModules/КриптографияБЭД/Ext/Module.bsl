
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеКонфигурации

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
#Область Версия_1_9_1

#Область РегистрыСведений_ПодписываемыеВидыЭД_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ПодписываемыеВидыЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.9.1.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7076d4bf-e77e-4888-9b76-aab4ec3cc9da");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ПодписываемыеВидыЭД.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = '1С:БЭД: обновление подписываемых видов электронных документов'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.ПодписываемыеВидыЭД.ПолноеИмя());
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		Читаемые.Добавить("Справочник.ВидыДокументовЭДО");
	КонецЕсли;
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ПодписываемыеВидыЭД.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ПодписываемыеВидыЭД.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
		НоваяСтрока.Процедура = "Справочники.ВидыДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
		НоваяСтрока.Порядок = "После";
		
		НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
		НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
		НоваяСтрока.Порядок = "Любой";
	КонецЕсли;

#КонецОбласти

#КонецОбласти
	 
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область КриптографическиеОперации

// Получает серверные и облачные отпечатки сертификатов, при необходимости
// дополняя их клиентскими отпечатками (в качестве параметра КлиентскиеОтпечатки необходимо передать
// результат выполнения метода см. КриптографияБЭДКлиент.ПолучитьОтпечаткиСертификатов) .
// 
// Параметры:
// 	ВидОперации - Строка
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	                    - Неопределено - ошибка получения отпечатков не будет добавлена в контекст диагностики,
// 	                      ее необходимо будет добавить на вызывающей стороне.
// 	РезультатыПолученияОтпечатков - см. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
// Возвращаемое значение:
// 	См. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
Функция ПолучитьОтпечаткиСертификатов(ВидОперации, КонтекстДиагностики, Знач РезультатыПолученияОтпечатков = Неопределено) Экспорт
	
	Если РезультатыПолученияОтпечатков = Неопределено Тогда
		РезультатыПолученияОтпечатков = КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков();
	КонецЕсли;
	
	Если РезультатыПолученияОтпечатков.Клиент = Неопределено Тогда
		РезультатыПолученияОтпечатков.Клиент = КриптографияБЭДКлиентСервер.НовыйРезультатПолученияОтпечатков();
	КонецЕсли;
	Если РезультатыПолученияОтпечатков.Сервер = Неопределено Тогда
		РезультатыПолученияОтпечатков.Сервер = КриптографияБЭДСлужебный.ПолучитьОтпечаткиСертификатовНаСервере();
	КонецЕсли;
	Если РезультатыПолученияОтпечатков.Облако = Неопределено Тогда
		РезультатыПолученияОтпечатков.Облако = КриптографияБЭДСлужебный.ПолучитьОтпечаткиСертификатовВСервисе();
	КонецЕсли;
	
	Если КонтекстДиагностики <> Неопределено Тогда
		ДобавитьОшибкуПолученияОтпечатковСертификатов(КонтекстДиагностики, ВидОперации, РезультатыПолученияОтпечатков);
	КонецЕсли;
	
	Возврат РезультатыПолученияОтпечатков;
	
КонецФункции

// Возвращает отпечатки сертификатов криптографии на сервере.
//
// Параметры:
//   ПоказыватьОшибку  - Булево - если Ложь, то ошибка создания менеджера криптографии не отображается.
//
// Возвращаемое значение:
//   См. КриптографияБЭДКлиентСервер.НовыйРезультатПолученияОтпечатков
Функция ПолучитьОтпечаткиСертификатовНаСервере(ПоказыватьОшибку = Ложь) Экспорт
	
	Возврат КриптографияБЭДСлужебный.ПолучитьОтпечаткиСертификатовНаСервере(ПоказыватьОшибку);
	
КонецФункции

// Возвращает отпечатки сертификатов всех контекстов.
// 
// Параметры:
// 	РезультатыПолученияОтпечатков - см. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
// Возвращаемое значение:
// 	Массив из Строка 
Функция ПолучитьВсеОтпечаткиСертификатов(РезультатыПолученияОтпечатков) Экспорт
	
	ВсеОтпечатки = Новый Массив;
	
	Если РезультатыПолученияОтпечатков.Клиент <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеОтпечатки, РезультатыПолученияОтпечатков.Клиент.Отпечатки, Истина);
	КонецЕсли;
	Если РезультатыПолученияОтпечатков.Сервер <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеОтпечатки, РезультатыПолученияОтпечатков.Сервер.Отпечатки, Истина);
	КонецЕсли;
	Если РезультатыПолученияОтпечатков.Облако <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеОтпечатки, РезультатыПолученияОтпечатков.Облако.Отпечатки, Истина);
	КонецЕсли;
	
	Возврат ВсеОтпечатки;
	
КонецФункции

// Расшифровывает данные.
// 
// Параметры:
// 	Данные - ДвоичныеДанные - расшифровываемые данные
// 	Пароль - Строка - пароль доступа к закрытому ключу
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	Программа - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования - программа электронной подписи и шифрования
// Возвращаемое значение:
// 	- ДвоичныеДанные - расшифрованный маркер
// 	- Неопределено - если маркер расшифровать не удалось
//
Функция Расшифровать(Данные, Пароль, КонтекстДиагностики, Программа = Неопределено) Экспорт
	
	ВидОперации = НСтр("ru = 'Расшифровка маркера'");
	ВидОшибки = КриптографияБЭДКлиентСервер.ВидОшибкиКриптография();
	ОписаниеОшибки = "";
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("Расшифровка", Истина, ОписаниеОшибки, Программа);
	Если МенеджерКриптографии = Неопределено Тогда
		ТекстСообщения = ОбработкаНеисправностейБЭД.ПолучитьСообщениеОбОшибкеДругойСистемы("110");
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ОписаниеОшибки, ТекстСообщения);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().Криптография, Ложь);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пароль) Тогда
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	КонецЕсли;
	
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(Данные);
	Исключение
		ТекстСообщения = ОбработкаНеисправностейБЭД.ПолучитьСообщениеОбОшибкеДругойСистемы("113");
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().Криптография, Ложь);
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат РасшифрованныеДвоичныеДанные;
	
КонецФункции

// Подписывает данные.
// 
// Параметры:
// 	ОписаниеДанных - см. НовоеОписаниеПодписываемыхДанных
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	ПаролиСертификатов - см. НовыеПаролиСертификатов
// Возвращаемое значение:
// 	См. НовоеОписаниеПодписываемыхДанных - при успешном подписании дополняется свойствами:
// 	 * ПаролиСертификатов - см. НовыеПаролиСертификатов
// 	 * СвойстваПодписи - см. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи - дополняет свойства элементов
//                       массива НаборДанных.
// 	 * ВыбранныйСертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - дополняет свойства элементов
//                       массива НаборДанных.
Функция Подписать(ОписаниеДанных, КонтекстДиагностики, ПаролиСертификатов = Неопределено, МенеджерКриптографии = Неопределено) Экспорт
	
	Если ПаролиСертификатов = Неопределено Тогда
		ПаролиСертификатов = НовыеПаролиСертификатов();
	КонецЕсли;
	
	Операция = НСтр("ru = 'Установка подписи на сервере'");
	ВидОшибки = КриптографияБЭДКлиентСервер.ВидОшибкиКриптография();
	ОписаниеОшибки = "";
	
	Если МенеджерКриптографии = Неопределено Тогда
		МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("Подписание", Ложь, ОписаниеОшибки,
			ОписаниеДанных.Программа);
	КонецЕсли;
	
	Если МенеджерКриптографии = Неопределено Тогда
		ТекстСообщения = ОбработкаНеисправностейБЭД.ПолучитьСообщениеОбОшибкеДругойСистемы("110");
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(Операция, ВидОшибки, ОписаниеОшибки, ТекстСообщения);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().Криптография, Ложь);
		Возврат Неопределено;
	КонецЕсли;
	
	СертификатКриптографии = СертификатПоОтпечатку(МенеджерКриптографии, ОписаниеДанных.Отпечаток);
	Если СертификатКриптографии = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатПроверки = ЭлектроннаяПодпись.ПроверитьСертификат(МенеджерКриптографии, СертификатКриптографии,
		ОписаниеОшибки, ТекущаяДатаСеанса());
	Если Не РезультатПроверки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Пароль = ОписаниеДанных.Пароль;
	Если ЗначениеЗаполнено(Пароль) Тогда
		ПаролиСертификатов.Вставить(ОписаниеДанных.Сертификат, Пароль);
	Иначе
		ПарольИзКэша = ПаролиСертификатов.Получить(ОписаниеДанных.Сертификат);
		Если ЗначениеЗаполнено(ПарольИзКэша) Тогда
			Пароль = ПарольИзКэша;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеДанных.Вставить("ПаролиСертификатов", ПаролиСертификатов);
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	
	Для Каждого ДанныеНабора Из ОписаниеДанных.НаборДанных Цикл
		
		ДвоичныеДанныеПодписи = МенеджерКриптографии.Подписать(ДанныеНабора.Данные, СертификатКриптографии);
	
		СвойстваСертификата = ЭлектроннаяПодпись.СвойстваСертификата(СертификатКриптографии);
		СвойстваСертификата.Вставить("ДвоичныеДанные", СертификатКриптографии.Выгрузить());
		
		СвойстваПодписи = Новый Структура;
		СвойстваПодписи.Вставить("Подпись",             ДвоичныеДанныеПодписи);
		СвойстваПодписи.Вставить("УстановившийПодпись", Пользователи.АвторизованныйПользователь());
		СвойстваПодписи.Вставить("Комментарий",         "");
		СвойстваПодписи.Вставить("ИмяФайлаПодписи",     "");
		СвойстваПодписи.Вставить("ДатаПодписи",         Дата('00010101'));
		СвойстваПодписи.Вставить("ДатаПроверкиПодписи", Дата('00010101'));
		СвойстваПодписи.Вставить("ПодписьВерна",        Ложь);
		СвойстваПодписи.Вставить("Сертификат",          СвойстваСертификата.ДвоичныеДанные);
		СвойстваПодписи.Вставить("Отпечаток",           СвойстваСертификата.Отпечаток);
		СвойстваПодписи.Вставить("КомуВыданСертификат", СвойстваСертификата.КомуВыдан);
		
		ДанныеНабора.Вставить("СвойстваПодписи", СвойстваПодписи);
		ДанныеНабора.Вставить("ВыбранныйСертификат", ОписаниеДанных.Сертификат);
		
	КонецЦикла;
	
	Возврат ОписаниеДанных;
	
КонецФункции

// Проверяет корректность подписи и сертификата.
// 
// Параметры:
//  МенеджерКриптографии - Неопределено - получить менеджер криптографии для проверки
//                          электронных подписей, согласно настройкам.
//                        - МенеджерКриптографии - использовать указанный менеджер криптографии.
//  ИсходныеДанные - ДвоичныеДанные - исходные данные для проверки 
//  Подпись - ДвоичныеДанные - подпись для проверки 
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	Структура:
// * ПодписьВерна - Булево
// * ДатаПроверкиПодписи - Дата
// * Сертификат - ДвоичныеДанные
// * Отпечаток - Строка
// * КомуВыданСертификат - Строка 
Функция ПроверитьПодпись(МенеджерКриптографии, ИсходныеДанные, Подпись, КонтекстДиагностики) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ПодписьВерна", Ложь);
	РезультатПроверки.Вставить("ДатаПроверкиПодписи", Дата(1, 1, 1));
	РезультатПроверки.Вставить("Сертификат", Неопределено);
	РезультатПроверки.Вставить("Отпечаток", "");
	РезультатПроверки.Вставить("КомуВыданСертификат", "");
	РезультатПроверки.Вставить("ОписаниеОшибки", "");
	
	ТекстОшибки = "";
	ПодписьВерна = ЭлектроннаяПодпись.ПроверитьПодпись(
				Неопределено, ИсходныеДанные, Подпись, ТекстОшибки);
	РезультатПроверки.ДатаПроверкиПодписи = ТекущаяУниверсальнаяДата();
	РезультатПроверки.ПодписьВерна = ПодписьВерна;
	РезультатПроверки.ОписаниеОшибки = ТекстОшибки;

	ПолучитьДанныеПодписиЧерезСервисКриптографии = Ложь;
	Сертификат = Неопределено;
	Попытка
		МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("ПолучениеСертификатов");
		Сертификаты = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(Подпись);
		Сертификат = КриптографияБЭДКлиентСервер.СертификатПодписавшейСтороны(Сертификаты);
		ДанныеСертификата = Сертификат.Выгрузить();
		Если Сертификат <> Неопределено Тогда
			РезультатПроверки.Отпечаток = Base64Строка(Сертификат.Отпечаток);
			РезультатПроверки.КомуВыданСертификат = ЭлектроннаяПодпись.ПредставлениеСубъекта(Сертификат);
			РезультатПроверки.Сертификат = ДанныеСертификата;
		КонецЕсли;
	Исключение
		ПолучитьДанныеПодписиЧерезСервисКриптографии = Сертификат = Неопределено
			И ИспользоватьЭлектроннуюПодписьВМоделиСервиса();
		Если ПолучитьДанныеПодписиЧерезСервисКриптографии Тогда
			ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Проверка подписи'"), ПодробноеПредставлениеОшибки(
				ИнформацияОбОшибке()));
		Иначе
			ДобавитьОшибкуПроверкиПодписи(КонтекстДиагностики, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
	КонецПопытки;

	Если ПолучитьДанныеПодписиЧерезСервисКриптографии Тогда
		Попытка
			СвойстваКриптосообщения = КриптографияБЭДСлужебный.ПолучитьСвойстваКриптосообщения(Подпись);
			Если СвойстваКриптосообщения.Сертификаты.Количество() Тогда
				ДанныеСертификата = СвойстваКриптосообщения.Сертификаты.Получить(0);
				Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
				РезультатПроверки.Отпечаток = Base64Строка(Сертификат.Отпечаток);
				РезультатПроверки.КомуВыданСертификат = ЭлектроннаяПодпись.ПредставлениеСубъекта(Сертификат);
				РезультатПроверки.Сертификат = ДанныеСертификата;
			КонецЕсли;
		Исключение
			ДобавитьОшибкуПроверкиПодписи(КонтекстДиагностики, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		Попытка
			ПодписьВерна = СервисКриптографии.ПроверитьПодпись(Подпись, ИсходныеДанные, "CMS");
			РезультатПроверки.ДатаПроверкиПодписи = ТекущаяУниверсальнаяДата();
			РезультатПроверки.ПодписьВерна = ПодписьВерна;
		Исключение
			// Требуется доработка на сервисе
			ДобавитьОшибкуПроверкиПодписи(КонтекстДиагностики, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			РезультатПроверки.ДатаПроверкиПодписи = ТекущаяУниверсальнаяДата();
			РезультатПроверки.ПодписьВерна = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Возвращает параметры подписания, см. Подписать.
// 
// Возвращаемое значение:
// 	Структура: 
//    * НаборДанных - Массив из Структура:
//        * Данные - ДвоичныеДанные - (обязательный параметр), подписываемые данные
//    * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - (обязательный параметр),
//                   сертификат, которым будут подписаны данные.
//    * Отпечаток - Строка - (обязательный параметр), отпечаток сертификата
//    * Пароль - Строка - (обязательный параметр)
//    * Программа - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования - (необязательный параметр) - используется
//                                для создания менеджера криптографии.
Функция НовоеОписаниеПодписываемыхДанных() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("НаборДанных", Новый Массив);
	Параметры.Вставить("Сертификат", Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка());
	Параметры.Вставить("Отпечаток", "");
	Параметры.Вставить("Программа", Справочники.ПрограммыЭлектроннойПодписиИШифрования.ПустаяСсылка());
	Параметры.Вставить("Пароль", "");
	
	Возврат Параметры;
	
КонецФункции

// Возвращает менеджер криптографии (на сервере) для указанной программы.
//
// Параметры:
//  ПоказатьОшибку - Булево - если Истина, тогда будет вызвано исключение, содержащее описание ошибки.
//  ОписаниеОшибки - Строка - возвращаемое описание ошибки, когда функция возвратила значение Неопределено.
//  Программа - Неопределено - возвращает менеджер криптографии первой
//              программы из справочника для которой удалось его создать.
//            - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования - программа
//              для которой нужно создать и вернуть менеджер криптографии.
//
// Возвращаемое значение:
//  - МенеджерКриптографии  - менеджер криптографии.
//  - Неопределено - произошла ошибка, описание которой в параметре ОписаниеОшибки.
Функция МенеджерКриптографии(ПоказатьОшибку = Истина, ОписаниеОшибки = "", Программа = Неопределено) Экспорт
	
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("", ПоказатьОшибку, ОписаниеОшибки, Программа);
	
	Возврат МенеджерКриптографии;
	
КонецФункции

#КонецОбласти

#Область ПодписываемыеВидыДокументов

// Возвращает описание запроса, в результате которого будут содержаться подписываемые виды документов.
// Запрос содержит следующие поля:
//   * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//   * ВидДокумента - ОпределяемыйТип.ВидыЭлектронныхДокументовБЭД
//   * Использовать - Булево - вид документа можно подписать данным сертификатом.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// 	Отбор - см. НовыйОтборПодписываемыхВидовДокументов
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросПодписываемыхВидовДокументов(ИмяВременнойТаблицы, Отбор) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборПодписываемыхВидовДокументов();
	КонецЕсли;
	
	ПоляУсловия = Новый Массив;
	Если Отбор.Сертификаты <> "" Тогда
		ПоляУсловия.Добавить(СтрШаблон("ПодписываемыеВидыЭД.СертификатЭП В(%1)", Отбор.Сертификаты));
	КонецЕсли;
	Если Отбор.ВидыДокументов <> "" Тогда
		ПоляУсловия.Добавить(СтрШаблон("ПодписываемыеВидыЭД.ВидЭД В(%1)", Отбор.ВидыДокументов));
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПодписываемыеВидыЭД.СертификатЭП КАК Сертификат,
		|	ПодписываемыеВидыЭД.ВидЭД КАК ВидДокумента,
		|	ПодписываемыеВидыЭД.Использовать
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
		|ГДЕ &ПоляУсловия";
	
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы, "", ПоляУсловия);
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Добавляет подписываемый вид документа для всех сертификатов. Если для сертификата все флаги "Использовать"
// установлены, новый вид документа будет добавлен с установленным флагом "Использовать", в ином случае флаг
// установлен не будет.
// 
// Параметры:
// 	ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
Процедура ДобавитьПодписываемыйВидДокумента(ВидДокумента) Экспорт
	
	ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку("РегистрСведений.ПодписываемыеВидыЭД");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодписываемыеВидыЭД.СертификатЭП КАК СертификатЭП,
		|	МИНИМУМ(ПодписываемыеВидыЭД.Использовать) КАК ВсеФлагиУстановлены
		|ИЗ
		|	РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
		|ГДЕ
		|	ПодписываемыеВидыЭД.СертификатЭП <> ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ПодписываемыеВидыЭД.СертификатЭП";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ПодписываемыеВидыЭД.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СертификатЭП = ВыборкаДетальныеЗаписи.СертификатЭП;
		МенеджерЗаписи.ВидЭД = ВидДокумента;
		МенеджерЗаписи.Использовать = ВыборкаДетальныеЗаписи.ВсеФлагиУстановлены;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует структуру для отбора подписываемых видов документов.
// 
// Возвращаемое значение:
// 	Структура:
// * Сертификаты - Строка - параметр или выражение для отбора по сертификатам
// * ВидыДокументов - Строка - параметр или выражение для отбора по видам документов
Функция НовыйОтборПодписываемыхВидовДокументов() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Сертификаты", "");
	Отбор.Вставить("ВидыДокументов", "");
	
	Возврат Отбор;
	
КонецФункции

// Возвращает виды подписываемых электронных документов.
//
// Возвращаемое значение:
//  - Массив из СправочникСсылка.ВидыДокументовЭДО, ПеречислениеСсылка.ВидыЭДОбменСБанками - виды актуальных ЭД.
Функция ПодписываемыеВидыДокументов() Экспорт
	
	ВидыДокументов = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами.ЭлектронныеДокументы") Тогда
		Запросы = Новый Массив;
		МодульЭлектронныеДокументыЭДО = ОбщегоНазначения.ОбщийМодуль("ЭлектронныеДокументыЭДО");
		ЗапросВидовДокументов = МодульЭлектронныеДокументыЭДО.ЗапросВидовДокументов("ВидыДокументов");
		Запросы.Добавить(ЗапросВидовДокументов);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|ВидыДокументов.Ссылка КАК Ссылка
		|ИЗ
		|ВидыДокументов КАК ВидыДокументов";
		
		ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
		
		Результат = ИтоговыйЗапрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ВидыДокументов.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанкамиСлужебныйПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменСБанкамиСлужебныйПовтИсп");
		МассивЭДОбменСБанками = МодульОбменСБанкамиСлужебныйПовтИсп.АктуальныеВидыЭД();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыДокументов, МассивЭДОбменСБанками);
	КонецЕсли;

	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыДокументов);
	
КонецФункции


#КонецОбласти

#Область Сертификаты

// Возвращает описание запроса, в результате которого будут содержаться действующие сертификаты.
// Запрос содержит следующие поля:
//   * Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат
//   * Организация - ОпределяемыйТип.Организация
//   * Отпечаток - Строка - отпечаток сертификата в кодировке Base64
//   * Отозван - Булево
//   * ДанныеСертификата - ДвоичныеДанные
//   * ПользовательОповещенОСрокеДействия - Булево - пользователь оповещен о скором окончании
//                 срока действия своего сертификата
//   * ДействителенДо - Дата - Дата окончания действия сертификата
//   * Программа - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования - программа, требуемая для подписания
//                 и расшифровки документов
//   * СертификатДоступенТекущемуПользователю - Булево - текущий пользователь может работать с данным сертификатом.
//   * Пользователь - СправочникСсылка.Пользователи - пользователь сертификата.
//   * ВыпущенЧерезСервис1СПодпись - Булево - сертификат выпущен через сервис 1С-Подпись.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// 	Отбор - см. НовыйОтборСертификатов
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросДействующихСертификатов(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборСертификатов();
	КонецЕсли;
	
	ПоляУсловия = Новый Массив;
	ДобавлятьУсловиеДействительныхСертификатов = Отбор.ТолькоДействительные
		И Не Отбор.ВключатьЗаявленияНаВыпускСертификатов;
	Если ДобавлятьУсловиеДействительныхСертификатов Тогда
		ПоляУсловия.Добавить(ТекстПоляСертификатДействителен());
	КонецЕсли;
	Если Отбор.Отпечатки <> "" Тогда
		Если Отбор.ВключатьЗаявленияНаВыпускСертификатов Тогда
			УсловиеВключатьЗаявленияНаВыпускСертификатов = " ИЛИ НЕ Сертификаты.СостояниеЗаявления В (&КонечныеСостоянияЗаявления)";
		Иначе
			УсловиеВключатьЗаявленияНаВыпускСертификатов = "";
		КонецЕсли;
		ПолеУсловия = СтрШаблон("(Сертификаты.Отпечаток В(%1) %2)", Отбор.Отпечатки, УсловиеВключатьЗаявленияНаВыпускСертификатов);
		ПоляУсловия.Добавить(ПолеУсловия);
	КонецЕсли;
	ИННОрганизации = "";
	Если ЗначениеЗаполнено(Отбор.Организация) Тогда
		ИмяРеквизитаИННОрганизации = ОбщегоНазначенияБЭДПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			"ИННОрганизации");
		Если Отбор.ВключатьСертификатыСПустойОрганизацией Тогда
			УсловиеПустаяОрганизация = "ИЛИ Организация = &ПустаяОрганизация";
		Иначе 
			УсловиеПустаяОрганизация = "";
		КонецЕсли; 
		УсловиеОрганизация = СтрШаблон("(Организация.%1 = &ТекущаяОрганизацияИНН
			|%2)", ИмяРеквизитаИННОрганизации, УсловиеПустаяОрганизация);
		ПоляУсловия.Добавить(УсловиеОрганизация);
		ИННОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отбор.Организация, ИмяРеквизитаИННОрганизации);
	КонецЕсли;
	Если Отбор.Облачные <> Неопределено Тогда
		Условие = ?(Отбор.Облачные, "Программа.ЭтоПрограммаОблачногоСервиса",
			"НЕ Программа.ЭтоПрограммаОблачногоСервиса");
		ПоляУсловия.Добавить(Условие);
	КонецЕсли;
	ПользователиДляОтбора = ПользователиДляОтбораСертификатов();
	Если Отбор.ДоступныеТекущемуПользователю <> Неопределено Тогда
		Условие = ?(Отбор.ДоступныеТекущемуПользователю, "Пользователь В (&ДоступенПользователям)",
			"НЕ Пользователь В (&ДоступенПользователям)");
		ПоляУсловия.Добавить(Условие);
		ПользователиДляОтбора = ПользователиДляОтбораСертификатов();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПользователиДляОтбора, Отбор.ДополнительныеПользователиДляОтбора);
	
	Поля = "Ссылка, Организация, Отпечаток, Отозван, ДанныеСертификата, ПользовательОповещенОСрокеДействия,
	|ДействителенДо, Программа, Пользователь В (&ДоступенПользователям) КАК СертификатДоступенТекущемуПользователю,
	|Пользователь,
	|НЕ Сертификаты.СостояниеЗаявления В (&КонечныеСостоянияЗаявления) КАК ОжидаетсяВыпускСертификата,
	|НЕ Сертификаты.СостояниеЗаявления В (&СостоянияЗаявленияВыпущенЧерезСервис1СПодпись) КАК ВыпущенЧерезСервис1СПодпись,
	|ДействителенДо > &ТекущаяДата КАК Действует";
	
	КонечныеСостоянияЗаявления = Новый Массив;
	КонечныеСостоянияЗаявления.Добавить(Перечисления.СостоянияЗаявленияНаВыпускСертификата.Исполнено);
	КонечныеСостоянияЗаявления.Добавить(Перечисления.СостоянияЗаявленияНаВыпускСертификата.Отклонено);
	КонечныеСостоянияЗаявления.Добавить(Перечисления.СостоянияЗаявленияНаВыпускСертификата.ПустаяСсылка());
	
	СостоянияЗаявленияВыпущенЧерезСервис1СПодпись = Новый Массив;
	СостоянияЗаявленияВыпущенЧерезСервис1СПодпись.Добавить(Перечисления.СостоянияЗаявленияНаВыпускСертификата.Отклонено);
	СостоянияЗаявленияВыпущенЧерезСервис1СПодпись.Добавить(Перечисления.СостоянияЗаявленияНаВыпускСертификата.ПустаяСсылка());
	
	ОписаниеЗапроса = ЗапросСертификатов(ИмяВременнойТаблицы, Поля, ПоляУсловия, Отбор.ТолькоНепомеченныеНаУдаление,
		Отбор.ТолькоДействительные);
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ДоступенПользователям", ПользователиДляОтбора);
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ТекущаяОрганизацияИНН", ИННОрганизации);
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ПустаяОрганизация",
		Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение());
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("КонечныеСостоянияЗаявления", КонечныеСостоянияЗаявления);
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("СостоянияЗаявленияВыпущенЧерезСервис1СПодпись",
		СостоянияЗаявленияВыпущенЧерезСервис1СПодпись);
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Возвращает описание запроса, в результате которого будут содержаться недействующие сертификаты,
// просроченные сертификаты.
// Запрос содержит следующие поля:
//   * Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// 	Отбор - см. НовыйОтборНедействующихИлиНедоступныхСертификатов
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросНедействующихИлиНедоступныхСертификатов(ИмяВременнойТаблицы, Отбор) Экспорт
	
	ПоляУсловия = Новый Массив;
	ПоляУсловия.Добавить(СтрШаблон("(НЕ Отпечаток В(&%1) ИЛИ НЕ %2)",
		Отбор.ОпечаткиДоступныхСертификатов, ТекстПоляСертификатДействителен()));
		
	Поля = "Ссылка";
	Возврат ЗапросСертификатов(ИмяВременнойТаблицы, Поля, ПоляУсловия);
	
КонецФункции

// Возвращает описание запроса, в результате которого будут содержаться заказанные, но еще не полученные сертификаты.
// Запрос содержит следующие поля:
//   * Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат.
//   * Организация - ОпределяемыйТип.Организация - организация.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросНеполученныхСертификатов(ИмяВременнойТаблицы) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|Сертификаты.Ссылка,
	|Сертификаты.Организация
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|ГДЕ
	|	Сертификаты.СостояниеЗаявления = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявленияНаВыпускСертификата.Отправлено)";
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы, "", "");
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Возвращает свойства сертификатов.
// 
// Параметры:
// 	Сертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
//    * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    * Значение - Структура:
//        * Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 		  * Отозван - Булево
//        * Отпечаток - Строка
//        * ДействителенДо - Дата - дата окончания действия сертификата
//        * КемВыдан - Строка - удостоверяющий центр, который выдал сертификат
//        * Наименование - Строка - пользовательское представление сертификата
//        * Программа - Строка - Программа, требуемая для подписания и расшифровки документов
//        * ДанныеСертификата - ДвоичныеДанные - данные файла сертификата
//        * ВыбранныйСертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - в ключ помещается 
//          ссылка на переданный сертификат
//        * ПарольПолучен - Булево - содержит Ложь
//        * ПарольПользователя - Неопределено
//        * Комментарий - Строка - содержит пустую строку
//        * СрокДействияВДнях - Число - количество дней, оставшееся до истечения срока действия сертификата
//        * Организация - ОпределяемыйТип.Организация
//        * Фамилия - Строка - фамилия владельца сертификата
//        * Имя - Строка - имя владельца сертификата
//        * Отчество - Строка - отчество владельца сертификата
//        * Должность - Строка - должность владельца сертификата
//        * ПользовательОповещенОСрокеДействия - Булево
//		  * Пользователь
//        * КомуВыдан
//        * Фирма
Функция СвойстваСертификатов(Сертификаты) Экспорт
	
	СвойстваСертификатов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Сертификаты,
		"Ссылка, Отозван, Отпечаток, ДействителенДо, КемВыдан, Наименование, Программа, ДанныеСертификата, Фамилия, Имя, Отчество, Должность, ПользовательОповещенОСрокеДействия, Организация, Пользователь, КомуВыдан, Фирма");
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Для Каждого Свойство Из СвойстваСертификатов Цикл
		Если Свойство.Значение.ДействителенДо >= ТекущаяДата Тогда
			СрокДействияВДнях = Окр((Свойство.Значение.ДействителенДо - ТекущаяДата) / (60 * 60 * 24));
		Иначе
			СрокДействияВДнях = - 1;
		КонецЕсли;
		Свойство.Значение.Вставить("СрокДействияВДнях", СрокДействияВДнях);
		Свойство.Значение.ДанныеСертификата = Свойство.Значение.ДанныеСертификата.Получить();
		Свойство.Значение.Вставить("ВыбранныйСертификат", Свойство.Ключ);
		Свойство.Значение.Вставить("ПарольПолучен", Ложь);
		Свойство.Значение.Вставить("ПарольПользователя", Неопределено);
		
		// В БСП методах необходим параметр
		Свойство.Значение.Вставить("Комментарий", "");
	КонецЦикла;
	
	Возврат СвойстваСертификатов;
	
КонецФункции

// Позволяет получить свойства субъекта сертификата электронной подписи.
//
// Параметры:
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на элемент справочника сертификатов.
//
// Возвращаемое значение:
//  См. ЭлектроннаяПодпись.СвойстваСубъектаСертификата
//
Функция СвойстваСубъектаСертификата(Сертификат) Экспорт
	
	Сертификаты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сертификат);
	ДанныеСертификата = СвойстваСертификатов(Сертификаты)[Сертификат].ДанныеСертификата;
	СертификатКриптографии = Новый СертификатКриптографии(ДанныеСертификата);
	
	Возврат ЭлектроннаяПодпись.СвойстваСубъектаСертификата(СертификатКриптографии);
	
КонецФункции

// Получает сертификат в формате PEM из сертификата в формате CER.
// 
// Параметры:
// 	ДанныеСертификата - ДвоичныеДанные - сертификат в формате CER.
// Возвращаемое значение:
// 	Строка
Функция СертификатВСтрокуPEM(ДанныеСертификата) Экспорт

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(КриптографияБЭДСлужебныйКлиентСервер.ТегНачалоСертификата());
	МассивСтрок.Добавить(Base64Строка(ДанныеСертификата));
	МассивСтрок.Добавить(КриптографияБЭДСлужебныйКлиентСервер.ТегКонецСертификата());
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

// Возвращает сертификат организации, если он единственный или пустую ссылку на сертификат в ином случае.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.Организация
// Возвращаемое значение:
// 	СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
Функция ЕдинственныйСертификатОрганизации(Организация) Экспорт
	
	СертификатКриптографии = Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат СертификатКриптографии;
	КонецЕсли;
	
	ОтборСертификатов = НовыйОтборСертификатов();
	ОтборСертификатов.Организация = Организация;
	ОтборСертификатов.ВключатьСертификатыСПустойОрганизацией = Ложь;
	ЗапросСертификатов = ЗапросДействующихСертификатов("СертификатыОрганизации", ОтборСертификатов);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыОрганизации.Ссылка КАК Ссылка
	|ИЗ
	|	СертификатыОрганизации КАК СертификатыОрганизации";
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросСертификатов);
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = ИтоговыйЗапрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		СертификатКриптографии = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат СертификатКриптографии;
	
КонецФункции

// Проверяет, возможность использования облачного сертификата.
// Возвращает Ложь, если передан облачный сертификат и его использование запрещено.
// 
// Параметры:
// 	Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 	СообщениеОбОшибке - Строка - содержит текст ошибки, если функция вернула Ложь.
// Возвращаемое значение:
// 	Булево
Функция ПроверитьПравомерностьИспользованияСертификата(Сертификат, СообщениеОбОшибке = "") Экспорт
	
	Результат = Истина;
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		
		МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервисаКлиентСервер");
		Если МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ИспользованиеВозможно()
			И Не КриптографияБЭДСлужебный.ИспользованиеСертификатовОблачногоСервисаВозможно()
			И ЭтоСертификатОблачногоСервиса(Сертификат) Тогда
			СообщениеОбОшибке = КриптографияБЭДСлужебный.ТекстОшибкиНеправомерногоИспользованияОблачногоСертификата();
		Результат = Ложь;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает сертификату программу криптографии.
// 
// Параметры:
// 	Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 	Программа - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования
Процедура УстановитьПрограммуСертификата(Сертификат, Программа) Экспорт
	
	НачатьТранзакцию();
	Попытка
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоСсылке(Сертификат);
		СертификатОбъект = Сертификат.ПолучитьОбъект();
		Если СертификатОбъект.Программа <> Программа Тогда
			СертификатОбъект.Заблокировать();
			СертификатОбъект.Программа = Программа;
			СертификатОбъект.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(НСтр("ru = 'Изменение программы криптографии сертификата'"),
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().Криптография, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Определяет, что пароль сертификата сохранен для всех пользователей.
// 
// Параметры:
// 	Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// Возвращаемое значение:
// 	Булево
Функция ПарольСертификатаСохраненДляВсех(Сертификат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = КриптографияБЭДСлужебный.ДанныеПароляСертификата(Сертификат);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗначениеЗаполнено(Данные[Справочники.Пользователи.ПустаяСсылка()]);
	
КонецФункции

// Возвращает пароль к сертификату, если доступен текущему пользователю.
// Необходимо вызывать в привилегированном режиме.
//
// Параметры:
//  Сертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//    * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    * Пароль - Строка - если пароль сохранен
//             - Неопределено - если пароль не сохранен.
//  Если нет прав на чтение справочника СертификатыКлючейЭлектроннойПодписиИШифрования, возвращается пустое соответствие.
//
Функция ПаролиСертификатов(Сертификаты) Экспорт
	
	ПаролиСертификатов = Новый Соответствие;
	
	МетаданныеСправочникаСертификатов = Метаданные.НайтиПоПолномуИмени("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования");
	Если Не ПравоДоступа("Чтение", МетаданныеСправочникаСертификатов) Или Сертификаты.Количество() = 0 Тогда
		Возврат ПаролиСертификатов;
	КонецЕсли;
	
	Для Каждого Сертификат Из Сертификаты Цикл
		
		Если ЗначениеЗаполнено(Сертификат) Тогда
			Пароль = ПарольСертификата(Сертификат);
		Иначе
			Пароль = Неопределено;
		КонецЕсли;
		
		ПаролиСертификатов.Вставить(Сертификат, Пароль);
	КонецЦикла;
	
	Возврат ПаролиСертификатов;
	
КонецФункции

// Проверяет доступность сертификата текущему пользователю.
// 
// Параметры:
// 	Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// Возвращаемое значение:
// 	Булево - сертификат доступен
Функция ПользователюДоступенСертификат(Сертификат) Экспорт
	
	ПользовательСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сертификат, "Пользователь");
	Возврат ПользователиДляОтбораСертификатов().Найти(ПользовательСертификата) <> Неопределено;
	
КонецФункции

// Определяет есть ли доступный текущему пользователю сертификат или заявление на выпуск сертификата.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.Организация
// 	Отпечатки - см. ПолучитьОтпечаткиСертификатов
// Возвращаемое значение:
// 	Структура:
// * Результат - Булево - если Истина, у пользователя есть доступные сертификаты
// * ОжидаетсяВыпускСертификата - Булево - если Истина, ожидается выпуск сертификата
Функция ПользователюДоступенСертификатИлиЗаявлениеНаВыпуск(Организация, Отпечатки) Экспорт
	
	Отбор = НовыйОтборСертификатов();
	Отбор.Организация = Организация;
	Отбор.Отпечатки = "&Отпечатки";
	Отбор.ВключатьЗаявленияНаВыпускСертификатов = Истина;
	ЗапросСертификатов = ЗапросДействующихСертификатов("Сертификаты", Отбор);
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросСертификатов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Сертификаты.Действует,
	|Сертификаты.ОжидаетсяВыпускСертификата
	|ИЗ
	|Сертификаты КАК Сертификаты";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	ИтоговыйЗапрос.УстановитьПараметр("Отпечатки", ПолучитьВсеОтпечаткиСертификатов(Отпечатки));
	
	ДоступныеСертификаты = ИтоговыйЗапрос.Выполнить().Выгрузить();
	
	Ответ                           = Новый Структура("ЕстьДоступныеСертификаты, ОжидаетсяВыпускСертификата", Ложь, Ложь);
	
	ОтборОптимистичный              = Новый Структура("Действует", Истина);
	ОтборОжидаетсяВыпускСертификата = Новый Структура("ОжидаетсяВыпускСертификата", Истина);
	
	Если ДоступныеСертификаты.НайтиСтроки(ОтборОптимистичный).Количество() > 0 Тогда
		Ответ.ЕстьДоступныеСертификаты = Истина;
	КонецЕсли;
	Если ДоступныеСертификаты.НайтиСтроки(ОтборОжидаетсяВыпускСертификата).Количество() > 0 Тогда
		Ответ.ОжидаетсяВыпускСертификата = Истина;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Инициализирует структуру для отбора сертификатов.
// 
// Возвращаемое значение:
// 	Структура:
// * Отпечатки - Строка - параметр или выражение для отбора по отпечаткам
// * Организация - ОпределяемыйТип.Организация
// * ВключатьСертификатыСПустойОрганизацией - Булево
// * Облачные - Неопределено, Булево - если Истина, отобрать только облачные сертификаты, 
//              Ложь - только необлачные, Неопределено - без отбора.
// * ДоступныеТекущемуПользователю - Неопределено, Булево - если Истина, отобрать только доступные текущему
//                                   пользователю сертификаты, Ложь - только недоступные, Неопределено - без отбора.
// * ДополнительныеПользователиДляОтбора - Массив из СправочникСсылка.Пользователи - пользователи, которым доступен
//                                         сертификат (параметр дополняет основной отбор по пользователям).
// * ВключатьЗаявленияНаВыпускСертификатов - Булево - если Истина, в результате запроса будет содержаться
//                                   заявления на выпуск сертификатов.
// * ТолькоДействительные - Булево - если Истина, в результате запроса будут содержаться только непросроченные
//                                   не отозванные сертификаты.
// * ТолькоНепомеченныеНаУдаление - Булево - если Истина, в результате запроса будут содержаться только непомеченные
//                                  на удаление сертификаты.
Функция НовыйОтборСертификатов() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Отпечатки", "");
	Отбор.Вставить("Организация", Неопределено);
	Отбор.Вставить("ВключатьСертификатыСПустойОрганизацией", Истина);
	Отбор.Вставить("Облачные", Неопределено);
	Отбор.Вставить("ДоступныеТекущемуПользователю", Истина);
	Отбор.Вставить("ДополнительныеПользователиДляОтбора", Новый Массив);
	Отбор.Вставить("ВключатьЗаявленияНаВыпускСертификатов", Ложь);
	Отбор.Вставить("ТолькоДействительные", Истина);
	Отбор.Вставить("ТолькоНепомеченныеНаУдаление", Истина);
	
	Возврат Отбор;
	
КонецФункции

// Инициализирует структуру для отбора недействующих или недоступных сертификатов.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ОпечаткиДоступныхСертификатов - Строка - отпечатки сертификатов, доступные текущем пользователю.
Функция НовыйОтборНедействующихИлиНедоступныхСертификатов() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОпечаткиДоступныхСертификатов", "");
	
	Возврат Отбор;
	
КонецФункции

// Возвращает пароли сертификатов.
// 
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
//    * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат
//    * Значение - Строка - пароль
Функция НовыеПаролиСертификатов() Экспорт
	
	Возврат Новый Соответствие;
	
КонецФункции

// Определяет, являются ли сертификаты облачными.
// 
// Параметры:
// 	Сертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
//   * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//   * Значение - Булево - сертификат облачный
Функция ЭтоСертификатыОблачногоСервиса(Сертификаты) Экспорт
	
	ВозвращаемоеЗначение = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток КАК Отпечаток,
		|	ЕСТЬNULL(ПрограммыЭлектроннойПодписиИШифрования.ЭтоПрограммаОблачногоСервиса, ЛОЖЬ) КАК ЭтоПрограммаОблачногоСервиса,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
		|		ПО СертификатыКлючейЭлектроннойПодписиИШифрования.Программа = ПрограммыЭлектроннойПодписиИШифрования.Ссылка
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Сертификаты);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатПолученияОтпечатков = КриптографияБЭДСлужебный.ПолучитьОтпечаткиСертификатовВСервисе();
	
	Пока Выборка.Следующий() Цикл
		
		ЭтоОблачныйСертификат = Ложь;
		
		Если Выборка.ЭтоПрограммаОблачногоСервиса Тогда
			ЭтоОблачныйСертификат = Истина;
		Иначе
			Если РезультатПолученияОтпечатков.Отпечатки.Найти(Выборка.Отпечаток) <> Неопределено Тогда
				ЭтоОблачныйСертификат = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ВозвращаемоеЗначение.Вставить(Выборка.Ссылка, ЭтоОблачныйСертификат);
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет поиск в справочнике сертификатов.
// 
// Параметры:
// 	Отпечатки - Массив из Строка
// Возвращаемое значение:
// 	Массив - Описание
Функция НайтиСертификаты(Отпечатки) Экспорт
	
	Сертификаты = Новый Массив;
	
	Запросы = Новый Массив;
	Отбор = НовыйОтборСертификатов();
	Отбор.Отпечатки = "&Отпечатки";
	ЗапросСертификатов = ЗапросДействующихСертификатов("Сертификаты", Отбор);
	
	Запросы.Добавить(ЗапросСертификатов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|Сертификаты.Ссылка КАК Ссылка
	|ИЗ
	|Сертификаты";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Отпечатки", Отпечатки);
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Сертификаты;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Сертификаты.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Сертификаты;
	
КонецФункции

// Возвращает пустую ссылку на справочник сертификатов.
// 
// Возвращаемое значение:
// 	СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
Функция ПустойСертификат() Экспорт
	
	Возврат Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка();
	
КонецФункции

// Определяет наличие ошибки получения отпечатков.
// 
// Параметры:
// 	РезультатыПолученияОтпечатков - см. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
// 	ОшибкаПолученияОтпечатков - Строка - в случае наличия ошибки возвращается строка, содержащая тексты ошибок клиента,
// 	                            сервера и облака.
// Возвращаемое значение:
// 	Булево - есть ошибка
Функция ЕстьОшибкаПолученияОтпечатков(РезультатыПолученияОтпечатков, ОшибкаПолученияОтпечатков = "") Экспорт
	
	КлиентскиеОтпечатки = РезультатыПолученияОтпечатков.Клиент;
	СерверныеОтпечатки = РезультатыПолученияОтпечатков.Сервер;
	ОблачныеОтпечатки = РезультатыПолученияОтпечатков.Облако;
	
	ЕстьОшибкаПолученияОтпечатков = КлиентскиеОтпечатки.Ошибка И Не СерверныеОтпечатки.Доступность И Не ОблачныеОтпечатки.Доступность
		Или СерверныеОтпечатки.Ошибка И Не КлиентскиеОтпечатки.Доступность И Не ОблачныеОтпечатки.Доступность
		Или ОблачныеОтпечатки.Ошибка И Не КлиентскиеОтпечатки.Доступность И Не СерверныеОтпечатки.Доступность;
		
	Если ЕстьОшибкаПолученияОтпечатков Тогда
		Ошибки = Новый Массив;
		Если КлиентскиеОтпечатки.Ошибка Тогда
			Ошибки.Добавить(КлиентскиеОтпечатки.ТекстОшибки);
		КонецЕсли;
		Если СерверныеОтпечатки.Ошибка Тогда
			Ошибки.Добавить(СерверныеОтпечатки.ТекстОшибки);
		КонецЕсли;
		Если ОблачныеОтпечатки.Ошибка Тогда
			Ошибки.Добавить(ОблачныеОтпечатки.ТекстОшибки);
		КонецЕсли;
		ОшибкаПолученияОтпечатков = СтрСоединить(Ошибки, Символы.ПС);
	КонецЕсли;
	
	Возврат ЕстьОшибкаПолученияОтпечатков;
	
КонецФункции

// Находит существующий или создает новый элемент справочника СертификатыКлючейЭлектроннойПодписиИШифрования.
//
// Параметры:
//  ДвоичныеДанныеСертификата - ДвоичныеДанные - содержимое сертификата;
//  Организация - СправочникСсылка.Организации - организация;
//  ИнформацияОПрограммеКриптографии - Строка - название криптосредства;
//                                - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования - ссылка на программу криптографии.
//
// Возвращаемое значение:
//  СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на новый сертификат.
//
Функция НайтиСоздатьСертификатЭП(ДвоичныеДанныеСертификата, Организация, ИнформацияОПрограммеКриптографии = Неопределено) Экспорт
	
	Возврат КриптографияБЭДСлужебныйВызовСервера.НайтиСоздатьСертификатЭП(ДвоичныеДанныеСертификата, Организация, ИнформацияОПрограммеКриптографии);
	
КонецФункции

#КонецОбласти

#Область Подписи

// Возвращает описание запроса, в результате которого будут содержаться подписываемые виды документов.
// Запрос содержит следующие поля:
//   * ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект
//   * Отпечаток - Строка
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// 	Отбор - см. НовыйОтборУстановленныхПодписей
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапросаКомпонентаЭДО
Функция ЗапросУстановленныхПодписей(ИмяВременнойТаблицы, Отбор) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборУстановленныхПодписей();
	КонецЕсли;
	
	ПоляУсловия = Новый Массив;
	Если Отбор.ПодписанныйОбъект <> "" Тогда
		ПоляУсловия.Добавить(СтрШаблон("ЭлектронныеПодписи.ПодписанныйОбъект В(&%1)", Отбор.ПодписанныйОбъект));
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписи.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	ЭлектронныеПодписи.Отпечаток КАК Отпечаток
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|ГДЕ &ПоляУсловия";
	
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы,
		"", ПоляУсловия);
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Возвращает данные подписи в виде строки в кодировке base64 без переносов.
// 
// Параметры:
// 	ДанныеПодписи - ДвоичныеДанные
// Возвращаемое значение:
// 	Строка
Функция ДанныеПодписиВСтрокуБезПереносов(ДанныеПодписи) Экспорт
	
	Возврат СтрЗаменить(Base64Строка(ДанныеПодписи), Символы.ВК + Символы.ПС, "");
	
КонецФункции

#КонецОбласти

#Область Настройки

// Определяет, доступно ли выполнение криптоопераций на сервере.
// 
// Возвращаемое значение:
// 	Булево - если Истина - криптооперации доступны на сервере.
Функция КриптооперацииДоступныНаСервере() Экспорт
	
	Результат = Ложь;

	Если Не ЭлектроннаяПодпись.СоздаватьЭлектронныеПодписиНаСервере() Тогда
		Возврат Результат;
	КонецЕсли;
	
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("", Ложь);
	
	Результат = МенеджерКриптографии <> Неопределено;
	
	Возврат Результат;
	
КонецФункции

// Включает настройку "Использовать электронные подписи".
// 
Процедура ВключитьИспользованиеЭлектронныхПодписей() Экспорт
	
	Попытка
		Если ПравоДоступа("Изменение", Метаданные.Константы.ИспользоватьЭлектронныеПодписи) Тогда
			Константы.ИспользоватьЭлектронныеПодписи.Установить(Истина);
		Иначе
			ТекстСообщения = НСтр("ru = 'Для работы 1С-ЭДО необходимо включить использование электронных подписей. Обратитесь к администратору.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Исключение
		ВидОперации = НСтр("ru = 'Включение использования электронных подписей'");
		ТекстСообщения = НСтр("ru = 'Не удалось включить использование электронных подписей.'");
		ТекстОшибки = ТекстСообщения + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Возвращает возможность использования облачной электронной подписи.
// 
// Возвращаемое значение:
// 	Булево
Функция ИспользоватьЭлектроннуюПодписьВМоделиСервиса() Экспорт
	
	ИспользоватьЭПВМоделиСервиса = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервисаКлиентСервер");
		Если МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ИспользованиеВозможно()
			И КриптографияБЭДСлужебный.ИспользованиеСертификатовОблачногоСервисаВозможно() Тогда
			ИспользоватьЭПВМоделиСервиса = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИспользоватьЭПВМоделиСервиса;
	
КонецФункции

// Устанавливает настройки электронных подписей на сервере: "Создавать электронные подписи на сервере" и
// "Проверять электронные подписи на сервере".
// 
// Параметры:
// 	СоздаватьЭлектронныеПодписи - Булево - значение настройки, если не передано, значение не будет изменено.
// 	ПроверятьЭлектронныеПодписи - Булево - значение настройки, если не передано, значение не будет изменено.
Процедура УстановитьНастройкиСервернойКриптографии(СоздаватьЭлектронныеПодписи = Неопределено,
	ПроверятьЭлектронныеПодписи = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если СоздаватьЭлектронныеПодписи <> Неопределено Тогда
		Константы.СоздаватьЭлектронныеПодписиНаСервере.Установить(СоздаватьЭлектронныеПодписи);
	ИначеЕсли ПроверятьЭлектронныеПодписи <> Неопределено Тогда 
		Константы.ПроверятьЭлектронныеПодписиНаСервере.Установить(ПроверятьЭлектронныеПодписи);
	КонецЕсли;
	ОбновитьПовторноИспользуемыеЗначения();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаНеисправностей

// Добавляет ошибку "Для сертификата нет подписываемого вида документов" в контекст диагностики.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	ВидОперации - Строка
// 	Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 	ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
Процедура ДобавитьОшибкуДляСертификатаНетПодписываемогоВидаДокумента(КонтекстДиагностики, ВидОперации, Сертификат, ВидДокумента) Экспорт
	
	ДополнительныеПараметрыОшибки = Новый Структура;
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("Сертификат", Сертификат);
	ДополнительныеДанные.Вставить("ВидДокумента", ВидДокумента);
	ДополнительныеПараметрыОшибки.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	
	ТекстОшибки = НСтр("ru = 'Для сертификата в списке ""Подписываемые виды документов"" нет данного вида документа.'");
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
		КриптографияБЭДСлужебныйКлиентСервер.ВидОшибкиДляСертификатаНетПодписываемогоВидаДокумента(),
		ТекстОшибки, ТекстОшибки, ДополнительныеПараметрыОшибки);
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().Криптография);
	
КонецПроцедуры

// Добавляет ошибку получения отпечатков сертификатов в контекст диагностики.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	ВидОперации - Строка 
// 	РезультатыПолученияОтпечатков - см. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
Процедура ДобавитьОшибкуПолученияОтпечатковСертификатов(КонтекстДиагностики, ВидОперации,
	РезультатыПолученияОтпечатков) Экспорт
	
	ТекстОшибки = "";
	Если ЕстьОшибкаПолученияОтпечатков(РезультатыПолученияОтпечатков, ТекстОшибки) Тогда
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
			КриптографияБЭДКлиентСервер.ВидОшибкиКриптография(), ТекстОшибки,
			НСтр("ru = 'Ошибка при получении отпечатков сертификатов.'"));
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().Криптография);
	КонецЕсли;
	
КонецПроцедуры


// Возвращает вид ошибки, описывающий ситуацию, когда объект содержит невалидные подписи.
// 
// Возвращаемое значение:
// 	См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиПодписьНеверна() Экспорт
	
	ВидОшибки = КриптографияБЭДКлиентСервер.ВидОшибкиКриптография();
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось обработать объект'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Объект содержит невалидные подписи'");
	ОписаниеРешения = НСтр("ru = '<a href = ""Выполните"">Выполните</a> диагностику криптографии. Если это не помогло решить проблему,
			|ознакомьтесь со статьями <a href = ""http://1c-edo.ru/handbook/24/2595/#1"">здесь</a> и <a href = ""https://its.1c.ru/db/metbud81#content:5784:hdoc"">здесь</a>.'");
	ВидОшибки.ОписаниеРешения = ОписаниеРешения;
	ВидОшибки.ОбработчикиНажатия.Вставить("Выполните", "ОбработкаНеисправностейБЭДКлиент.ОткрытьМастерДиагностики");
	
	Возврат ВидОшибки;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращает описания программ криптографии, добавленные в справочник ПрограммыЭлектроннойПодписиИШифрования.
// 
// Возвращаемое значение:
// 	Массив из см. ЭлектроннаяПодпись.НовоеОписаниеПрограммы
Функция ОписанияПрограммЭлектроннойПодписиИШифрования() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы КАК ИмяПрограммы,
		|	ПрограммыЭлектроннойПодписиИШифрования.ТипПрограммы КАК ТипПрограммы
		|ИЗ
		|	Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
		|ГДЕ
		|	ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы <> """"
		|	И НЕ ПрограммыЭлектроннойПодписиИШифрования.ПометкаУдаления";
	
	НаборОписаний = Новый Массив;
	
	Для Каждого Программа Из Запрос.Выполнить().Выгрузить() Цикл
		
		Описание = ЭлектроннаяПодпись.НовоеОписаниеПрограммы();
		ЗаполнитьЗначенияСвойств(Описание, Программа);
		НаборОписаний.Добавить(Описание);
		
	КонецЦикла;
	
	Возврат НаборОписаний;
	
КонецФункции

// Возвращает данные для формирования штампа электронной подписи.
// 
// Возвращаемое значение:
//  Структура:
// * ИдентификаторДокумента - Строка
// * ЭтоИнформацияОтправителя - Булево
// * Организация - Неопределено
// * ЭтоИсходящийДокумент - Булево
// * ПодписиОтправителя - Массив -
// * ПодписиПолучателя - Массив -
// * ОсновноеСостояние - Строка - см. ОсновныеСостоянияДокументов
// * ДополнительноеСостояние - Строка - см. ДополнительныеСостоянияДокументов
// * ЕстьОтветнаяПодпись - Булево
Функция НовыеДанныеДляФормированияШтампа() Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("ИдентификаторДокумента", "");
	Данные.Вставить("ЭтоИнформацияОтправителя", Ложь);
	Данные.Вставить("Организация", Неопределено);
	Данные.Вставить("ЭтоИсходящийДокумент", Ложь);
	Данные.Вставить("ПодписиОтправителя", Новый Массив);
	Данные.Вставить("ПодписиПолучателя", Новый Массив);
	Данные.Вставить("ОсновноеСостояние", "");
	Данные.Вставить("ДополнительноеСостояние", "");
	Данные.Вставить("ЕстьОтветнаяПодпись", Ложь);
	
	Возврат Данные;
	
КонецФункции

// Возвращает табличный документ со штампом электронной подписи.
// 
// Параметры:
// 	ДанныеДляФормирования - см. НовыеДанныеДляФормированияШтампа
// Возвращаемое значение:
// 	ТабличныйДокумент
Функция ШтампЭлектроннойПодписи(ДанныеДляФормирования) Экспорт
	
	Если ДанныеДляФормирования.ЭтоИнформацияОтправителя Тогда
		
		ЭтоИсходящийДокумент = ДанныеДляФормирования.ЭтоИсходящийДокумент;
		Если ЭтоИсходящийДокумент
			И ДанныеДляФормирования.ОсновноеСостояние = ОсновныеСостоянияДокументов().Подписан Тогда
			ТекстШтампа = НСтр("ru = 'Документ подписан в 1С-ЭДО'");
		ИначеЕсли ЭтоИсходящийДокумент
			И ДанныеДляФормирования.ОсновноеСостояние = ОсновныеСостоянияДокументов().Отправлен Тогда 
			ТекстШтампа = НСтр("ru = 'Документ подписан и передан через 1С-ЭДО'");
		ИначеЕсли Не ЭтоИсходящийДокумент
			И ДанныеДляФормирования.ОсновноеСостояние = ОсновныеСостоянияДокументов().Получен Тогда
			ТекстШтампа = НСтр("ru = 'Документ получен через 1С-ЭДО'");
		ИначеЕсли Не ЭтоИсходящийДокумент И ДанныеДляФормирования.ЕстьОтветнаяПодпись Тогда
			ТекстШтампа = НСтр("ru = 'Документ получен и подписан в 1С-ЭДО'");
		ИначеЕсли ЭтоИсходящийДокумент Тогда 
			ТекстШтампа = НСтр("ru = 'Документ подписан в 1С-ЭДО'");
		ИначеЕсли Не ЭтоИсходящийДокумент Тогда
			ТекстШтампа = НСтр("ru = 'Документ получен через 1С-ЭДО'");
		КонецЕсли;
	Иначе
		Если ДанныеДляФормирования.ОсновноеСостояние = ОсновныеСостоянияДокументов().Подписан Тогда
			ТекстШтампа = НСтр("ru = 'Документ подписан в 1С-ЭДО'");
		ИначеЕсли ДанныеДляФормирования.ОсновноеСостояние = ОсновныеСостоянияДокументов().Отправлен Тогда
			ТекстШтампа = НСтр("ru = 'Документ подписан и передан через 1С-ЭДО'");
		ИначеЕсли ДанныеДляФормирования.ОсновноеСостояние = ОсновныеСостоянияДокументов().Получен Тогда
			ТекстШтампа = НСтр("ru = 'Документ получен через 1С-ЭДО'");
		Иначе
			ТекстШтампа = НСтр("ru = 'Документ подписан в 1С-ЭДО'");
		КонецЕсли;
		
	КонецЕсли;
	
	ВсеПодписи = Новый Массив;
	Для Каждого Подпись Из ДанныеДляФормирования.ПодписиОтправителя Цикл
		Подпись.Вставить("ПредставлениеПодписи", "Отправитель");
		ВсеПодписи.Добавить(Подпись);
	КонецЦикла;
	Для Каждого Подпись Из ДанныеДляФормирования.ПодписиПолучателя Цикл
		Подпись.Вставить("ПредставлениеПодписи", "Получатель");
		ВсеПодписи.Добавить(Подпись);
	КонецЦикла;
		
	Штамп = Новый ТабличныйДокумент;
	Если Не ЗначениеЗаполнено(ВсеПодписи) Тогда
		Возврат Штамп;
	КонецЕсли;
	
	ВидПодписи = ВсеПодписи[0].ВидПодписи;
	
	Если ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда
		ТекстШтампа = НСтр("ru = 'Документ подписан простой электронной подписью'");
	КонецЕсли;
	
	ИмяМакета = ?(ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая, "ШтампПЭП_%1", "ШтампЭП_%1");

	МакетЭП = Обработки.КриптографияБЭД.ПолучитьМакет(
		СтрШаблон(ИмяМакета, ОбщегоНазначения.КодОсновногоЯзыка()));
	МакетЭП.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	КоличествоПодписей = ВсеПодписи.Количество();

	ОбластьШапка = МакетЭП.ПолучитьОбласть("ШтампТабличныйШапка|ОбластьШтампТабличный");
	ЗначенияПараметров = Новый Структура;
	
	ДополнительноеСостояние = ДанныеДляФормирования.ДополнительноеСостояние;
	ДобавкаТекста = "";
	Если ДополнительноеСостояние = ДополнительныеСостоянияДокументов().ВПроцессеАннулирования Тогда
		ДобавкаТекста = НСтр("ru = ', в процессе аннулирования.'");
	ИначеЕсли ДополнительноеСостояние = ДополнительныеСостоянияДокументов().Аннулирован Тогда
		ДобавкаТекста = НСтр("ru = ', аннулирован.'");
	ИначеЕсли ДополнительноеСостояние = ДополнительныеСостоянияДокументов().Отклонен Тогда 
		ДобавкаТекста = НСтр("ru = ', отклонен.'");
	КонецЕсли;
	ТекстШтампа = ТекстШтампа + ДобавкаТекста;
	ЗначенияПараметров.Вставить("ДокументПодписан", ТекстШтампа);
	ОбластьШапка.Параметры.Заполнить(ЗначенияПараметров);
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(Штамп, ОбластьШапка, "ШтампТабличныйШапка");

	Разделитель = МакетЭП.ПолучитьОбласть("ШтампТабличныйРазделитель|ОбластьШтампТабличный");

	Счетчик = 0;
	
	Для Каждого Подпись Из ВсеПодписи Цикл

		Счетчик = Счетчик + 1;

		ОбластьШтамп = МакетЭП.ПолучитьОбласть("ШтампТабличныйСтрока|ОбластьШтампТабличный");
		
		ПодписьВерна = Подпись.ПодписьВерна;
		Если Не ПодписьВерна Тогда
			
			Ячейки = ОбластьШтамп.НайтиТекст("[ДатаПодписи]");
			Если Ячейки <> Неопределено Тогда
				Ячейки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			КонецЕсли;	
			
			Ячейки = ОбластьШтамп.НайтиТекст("[НомерСертификата]");
			Если Ячейки <> Неопределено Тогда
				Ячейки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			КонецЕсли;	
			
			Ячейки = ОбластьШтамп.НайтиТекст("ОрганизацияПодписант");
			Если Ячейки <> Неопределено Тогда
				Ячейки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если Подпись.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда
			ЗаполнитьОбластьШтампаПЭП(ОбластьШтамп, Подпись, ДанныеДляФормирования.Организация);
		Иначе
			ЗаполнитьОбластьШтампа(ОбластьШтамп, Подпись);
		КонецЕсли;

		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(Штамп, ОбластьШтамп,
			"ШтампТабличныйСтрока");

		Если Счетчик <> КоличествоПодписей Тогда
			ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(Штамп, Разделитель,
				"ШтампТабличныйРазделитель");
		КонецЕсли;

	КонецЦикла;

	ОбластьПодвал = МакетЭП.ПолучитьОбласть("ШтампТабличныйПодвал|ОбластьШтампТабличный");
	ОбластьПодвал.Параметры.ИдентификаторДокумента = СтрШаблон(НСтр("ru = 'Идентификатор документа: %1'"),
		ДанныеДляФормирования.ИдентификаторДокумента);
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(Штамп, ОбластьПодвал,
		"ШтампТабличныйПодвал");

	Штамп.Область().СоздатьФорматСтрок();
	
	Возврат Штамп;
	
КонецФункции

// Возвращает основные состояния документов для вывода в штамп электронной подписи.
// 
// Возвращаемое значение:
//  Структура:
// * Подписан - Строка
// * Отправлен - Строка
// * Получен - Строка
Функция ОсновныеСостоянияДокументов() Экспорт
	
	Состояния = Новый Структура;
	Состояния.Вставить("Подписан", "Подписан");
	Состояния.Вставить("Отправлен", "Отправлен");
	Состояния.Вставить("Получен", "Получен");
	
	Возврат Состояния;
	
КонецФункции

// Возвращает дополнительные состояния документов для вывода в штамп электронной подписи.
// 
// Возвращаемое значение:
//  Структура:
// * ВПроцессеАннулирования - Строка
// * Аннулирован - Строка
// * Отклонен - Строка
Функция ДополнительныеСостоянияДокументов() Экспорт
	
	Состояния = Новый Структура;
	Состояния.Вставить("ВПроцессеАннулирования", "ВПроцессеАннулирования");
	Состояния.Вставить("Аннулирован", "Аннулирован");
	Состояния.Вставить("Отклонен", "Отклонен");
	
	Возврат Состояния;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗапросСертификатов(ИмяВременнойТаблицы, ВыбираемыеПоля, ПоляУсловия = Неопределено,
	ТолькоНепомеченныеНаУдаление = Истина, ТолькоДействительные = Истина) 
	
	Если ПоляУсловия = Неопределено Тогда
		ПоляУсловия = Новый Массив;
	КонецЕсли;
	Если ТолькоНепомеченныеНаУдаление Тогда
		ПоляУсловия.Добавить("НЕ Сертификаты.ПометкаУдаления");
	КонецЕсли;
	Если ТолькоДействительные Тогда
		ПоляУсловия.Добавить("НЕ Сертификаты.Отозван");
	КонецЕсли;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ВыбираемыеПоля
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|ГДЕ
	|	&ПоляУсловия";
	
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы, 
		ВыбираемыеПоля, ПоляУсловия, "Сертификаты");
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ТекущаяДата", ТекущаяДатаСеанса());
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Возвращает текст поля запроса, в котором вычисляется действительность сертификата.
// 
// Возвращаемое значение:
// 	Строка
Функция ТекстПоляСертификатДействителен() 
	
	Возврат "ВЫБОР
	|			КОГДА Сертификаты.ДействителенДо = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Сертификаты.ДействителенДо, МИНУТА) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	
КонецФункции 

Процедура ДобавитьОшибкуПроверкиПодписи(КонтекстДиагностики, ПодробныйТекстОшибки, КраткийТекстОшибки) 
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Проверка подписи'"),
		ВидОшибки, ПодробныйТекстОшибки, КраткийТекстОшибки);
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().Криптография);
	
КонецПроцедуры

Функция ПользователиДляОтбораСертификатов(ДобавлятьТекущегоПользователя = Истина)
	
	ПользователиДляОтбора = Новый Массив;
	Если ДобавлятьТекущегоПользователя Тогда
		ПользователиДляОтбора.Добавить(Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	ПользователиДляОтбора.Добавить(Пользователи.СсылкаНеуказанногоПользователя());
	ПользователиДляОтбора.Добавить(Справочники.Пользователи.ПустаяСсылка());
	
	Возврат ПользователиДляОтбора;
	
КонецФункции

Функция СертификатПоОтпечатку(МенеджерКриптографии, Отпечаток)
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	ХранилищеСертификатовКриптографии = МенеджерКриптографии.ПолучитьХранилищеСертификатов(
		ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	
	Сертификат = ХранилищеСертификатовКриптографии.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Возврат Сертификат;
	
КонецФункции

Функция ЭтоСертификатОблачногоСервиса(Сертификат)
	
	Сертификаты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сертификат);
	Возврат ЭтоСертификатыОблачногоСервиса(Сертификаты)[Сертификат];
	
КонецФункции

Функция ПарольСертификата(Сертификат)
	
	Если Сертификат <> Неопределено Тогда
		
		Данные = КриптографияБЭДСлужебный.ДанныеПароляСертификата(Сертификат);
		
		Если ТипЗнч(Данные) <> Тип("Соответствие") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Пользователь = Пользователи.ТекущийПользователь();
		Пароль = Данные.Получить(Пользователь);
		
		Если ЗначениеЗаполнено(Пароль) Тогда
			Возврат Пароль;
		КонецЕсли;
		
		Пользователь = Справочники.Пользователи.ПустаяСсылка();
		Пароль = Данные.Получить(Пользователь);
		
		Если ЗначениеЗаполнено(Пароль) Тогда
			Возврат Пароль;
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Инициализирует структуру для отбора установленных подписей документов.
// 
// Возвращаемое значение:
// 	Структура:
// * ПодписанныйОбъект - Строка - параметр или выражение для отбора по подписанным объектам
Функция НовыйОтборУстановленныхПодписей()
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПодписанныйОбъект", "");
	
	Возврат Отбор;
	
КонецФункции

Процедура ЗаполнитьОбластьШтампа(Область, Подпись)
	
	Сертификат = Неопределено;
	ДанныеСертификата = Подпись.Сертификат.Получить();
	Если ДанныеСертификата <> Неопределено Тогда
		Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
	КонецЕсли;
	
	ОтметкаВерна   = НСтр("ru='Подпись верна'");
	ОтметкаНеВерна = НСтр("ru='Подпись не верна'");
	ТекстОтметки = ?(Подпись.ПодписьВерна, ОтметкаВерна, ОтметкаНеВерна);
	ПредставлениеПодписи = ?(Подпись.ПредставлениеПодписи = "Отправитель",
		НСтр("ru='Подпись отправителя'"), НСтр("ru='Подпись получателя'"));
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ВладелецСертификата",  Подпись.Владелец);
	ЗначенияПараметров.Вставить("ТекстОтметки",         ТекстОтметки);
	ЗначенияПараметров.Вставить("ПредставлениеПодписи", ПредставлениеПодписи);
	ЗначенияПараметров.Вставить("ДатаПодписи",          Формат(Подпись.ДатаПодписи, "ДЛФ=D;"));
	Если Сертификат <> Неопределено Тогда
		Шаблон = НСтр("ru='с %1 по %2'");
		СрокДействия = СтрШаблон(Шаблон, Формат(Сертификат.ДатаНачала, НСтр("ru='ДФ=''dd.MM.yyyy HH:mm'''")),
			Формат(Сертификат.ДатаОкончания, НСтр("ru='ДФ=''dd.MM.yyyy HH:mm'''")));
		ЗначенияПараметров.Вставить("ОрганизацияПодписант", Сертификат.Субъект.CN
			+ Символы.ПС + ПредставлениеВладельцаСертификата(Сертификат, Подпись.Владелец));
		ЗначенияПараметров.Вставить("НомерСертификата",     Сертификат.СерийныйНомер);
		ЗначенияПараметров.Вставить("ВыдалСертификат",      Сертификат.Издатель.CN);
		ЗначенияПараметров.Вставить("СрокДействия",         СрокДействия);
	КонецЕсли;
	
	Область.Параметры.Заполнить(ЗначенияПараметров);
	
КонецПроцедуры

Функция ПредставлениеВладельцаСертификата(Сертификат, ВладелецПодписи)
	
	Субъект = ЭлектроннаяПодпись.СвойстваСубъектаСертификата(Сертификат);
	ВладелецСертификата = "";
	Если ЗначениеЗаполнено(Субъект.Фамилия) И ЗначениеЗаполнено(Субъект.Имя) Тогда
		ВладелецСертификата = Субъект.Фамилия + " " + Субъект.Имя;
	ИначеЕсли ЗначениеЗаполнено(Субъект.Фамилия) Тогда
		ВладелецСертификата = Субъект.Фамилия;
	ИначеЕсли ЗначениеЗаполнено(Субъект.Имя) Тогда
		ВладелецСертификата = Субъект.Имя;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Субъект.Отчество) Тогда
		ВладелецСертификата = ВладелецСертификата + " " + Субъект.Отчество;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВладелецСертификата) И ЗначениеЗаполнено(Субъект.Должность)Тогда
		ВладелецСертификата = ВладелецСертификата + ", " + Субъект.Должность;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВладелецСертификата) Тогда
		ВладелецСертификата = ВладелецПодписи;
	КонецЕсли;
	
	Возврат ВладелецСертификата;
	
КонецФункции

Процедура ЗаполнитьОбластьШтампаПЭП(Область, Подпись, Организация)
	
	Пользователь = Подпись.УстановившийПодпись;
	
	ИмяРеквизитаНаименованиеОрганизации =
		ОбщегоНазначенияБЭДПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеОрганизации");
	НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, ИмяРеквизитаНаименованиеОрганизации);
	
	ТекстОтметки = НСтр("ru='Подпись верна'");

	ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ");
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваПользователяИБ = Пользователи.СвойстваПользователяИБ(ИдентификаторПользователяИБ);
	УстановитьПривилегированныйРежим(Ложь);

	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("Организация",     НаименованиеОрганизации);
	ЗначенияПараметров.Вставить("ДатаПодписи",     Формат(Подпись.ДатаПодписи, "ДЛФ=D;"));
	ЗначенияПараметров.Вставить("Подписант",       Подпись.Владелец);
	ЗначенияПараметров.Вставить("Должность",       Подпись.Должность);
	ЗначенияПараметров.Вставить("ИмяПользователя", СвойстваПользователяИБ.Имя);
	ЗначенияПараметров.Вставить("ТекстОтметки",    ТекстОтметки);
	МодульФизическиеЛицаКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ФизическиеЛицаКлиентСервер");
	Если МодульФизическиеЛицаКлиентСервер = Неопределено Тогда
		ЗначенияПараметров.Вставить("ФИОПодписанта", Подпись.Владелец);
	Иначе
		ЗначенияПараметров.Вставить("ФИОПодписанта", МодульФизическиеЛицаКлиентСервер.ФамилияИнициалы(Подпись.Владелец));
	КонецЕсли;
	
	Область.Параметры.Заполнить(ЗначенияПараметров);
	
КонецПроцедуры

#КонецОбласти
