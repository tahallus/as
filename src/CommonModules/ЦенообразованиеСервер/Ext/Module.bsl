
#Область ПрограммныйИнтерфейс

// Записывает цены для характеристик по переданной номенклатуре
//
// Параметры:
//  ДеталиЗаписи - Структура:
//   * Период - Дата - период записи
//   * ВидЦен - СправочникСсылка.ВидыЦен - вид цен записи
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура записи
//   * ЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения - единица измерения номенклатуры для записи
//   * Цена - Число - цена записи
//   * Автор - СправочникСсылка.Пользователи - автор записи
//
Процедура ЗаписатьЦеныХарактеристик(ДеталиЗаписи) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		БлокировкаДанных = Новый БлокировкаДанных;		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ЦеныНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ВидЦен", ДеталиЗаписи.ВидЦен);
		ЭлементБлокировки.УстановитьЗначение("Номенклатура", ДеталиЗаписи.Номенклатура);
		ЭлементБлокировки.УстановитьЗначение("Период", НачалоДня(ДеталиЗаписи.Период)); 		
		БлокировкаДанных.Заблокировать(); 		
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РСЦены.Характеристика, РСЦены.Цена
		|ПОМЕСТИТЬ РСЦены
		|	ИЗ РегистрСведений.ЦеныНоменклатуры КАК РСЦены
		|	ГДЕ РСЦены.Период = &Период И РСЦены.ВидЦен = &ВидЦен И РСЦены.Номенклатура = &Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрХарактеристики.Ссылка КАК Характеристика
		|ПОМЕСТИТЬ НоменклатураХарактеристики
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
		|ГДЕ СпрХарактеристики.Владелец = &Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрХарактеристики.Ссылка КАК Характеристика
		|ПОМЕСТИТЬ КатегорияНоменклатурыХарактеристики
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
		|ГДЕ СпрХарактеристики.Владелец = &КатегорияНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураХарактеристики.Характеристика
		|ПОМЕСТИТЬ ВсеХарактеристики
		|ИЗ
		|	НоменклатураХарактеристики КАК НоменклатураХарактеристики
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КатегорияНоменклатурыХарактеристики.Характеристика
		|ИЗ
		|	КатегорияНоменклатурыХарактеристики КАК КатегорияНоменклатурыХарактеристики
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеХарактеристики.Характеристика КАК Характеристика
		|	,ЕстьNULL(РСЦены.Цена, 0) КАК Цена
		|ПОМЕСТИТЬ ВсеХарактеристикиСЦенами
		|ИЗ
		|	ВсеХарактеристики КАК ВсеХарактеристики
		|	ЛЕВОЕ СОЕДИНЕНИЕ РСЦены КАК РСЦены
		|		ПО ВсеХарактеристики.Характеристика = РСЦены.Характеристика
		|ИНДЕКСИРОВАТЬ ПО
		|	Цена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ * ИЗ ВсеХарактеристикиСЦенами КАК ВсеХарактеристикиСЦенами ГДЕ ВсеХарактеристикиСЦенами.Цена = 0";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Период",					ДеталиЗаписи.Период);
		Запрос.УстановитьПараметр("ВидЦен", 				ДеталиЗаписи.ВидЦен);
		Запрос.УстановитьПараметр("Номенклатура",			ДеталиЗаписи.Номенклатура);
		Запрос.УстановитьПараметр("КатегорияНоменклатуры",	ДеталиЗаписи.Номенклатура.КатегорияНоменклатуры);
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ДеталиЗаписи.Период);
		НаборЗаписей.Отбор.ВидЦен.Установить(ДеталиЗаписи.ВидЦен);
		НаборЗаписей.Отбор.Номенклатура.Установить(ДеталиЗаписи.Номенклатура);
		НаборЗаписей.Прочитать();
		
		Пока ВыборкаДанных.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			НоваяЗапись.Актуальность		= Истина;
			НоваяЗапись.Период				= ДеталиЗаписи.Период;
			НоваяЗапись.ВидЦен				= ДеталиЗаписи.ВидЦен;
			НоваяЗапись.Номенклатура		= ДеталиЗаписи.Номенклатура;
			НоваяЗапись.Характеристика		= ВыборкаДанных.Характеристика;
			НоваяЗапись.ЕдиницаИзмерения	= ДеталиЗаписи.ЕдиницаИзмерения;
			НоваяЗапись.Цена				= ДеталиЗаписи.Цена;
			НоваяЗапись.Автор				= ДеталиЗаписи.Автор;
			
		КонецЦикла; 
		
		НаборЗаписей.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка записи цен по характеристикам'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	
	КонецПопытки;
	
КонецПроцедуры

// Копирует цены номенклатуры в новую характеристику
//
// Параметры:
//  ДеталиЗаписи - Структура:
//   * Период - Дата - период записи
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура записи
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - номенклатура записи
//
Процедура КопироватьЦеныНоменклатурыВНовуюХарактеристику(ДеталиЗаписи) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		БлокировкаДанных = Новый БлокировкаДанных;		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ЦеныНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный; 		
		ЭлементБлокировки.УстановитьЗначение("Номенклатура", ДеталиЗаписи.Номенклатура);
		ЭлементБлокировки.УстановитьЗначение("Характеристика", ДеталиЗаписи.Характеристика);
		ЭлементБлокировки.УстановитьЗначение("Период", НачалоДня(ДеталиЗаписи.Период)); 		
		БлокировкаДанных.Заблокировать();
			
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	РСЦены.ВидЦен КАК ВидЦен,
		|	РСЦены.Актуальность КАК Актуальность,
		|	РСЦены.Номенклатура КАК Номенклатура,
		|	&Характеристика КАК Характеристика,
		|	РСЦены.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РСЦены.Цена КАК Цена,
		|	РСЦены.Автор КАК Автор,
		|	ЛОЖЬ КАК ВключаяХарактеристики
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Период,
		|			Актуальность
		|				И Номенклатура = &Номенклатура
		|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК РСЦены";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Период", ДеталиЗаписи.Период);
		Запрос.УстановитьПараметр("Номенклатура", ДеталиЗаписи.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ДеталиЗаписи.Характеристика);
		ТаблицаДанных = Запрос.Выполнить().Выгрузить();
		
		НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(ДеталиЗаписи.Номенклатура);
		НаборЗаписей.Отбор.Характеристика.Установить(ДеталиЗаписи.Характеристика);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Загрузить(ТаблицаДанных);
		НаборЗаписей.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка записи цен по характеристикам'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	
	КонецПопытки;
	
КонецПроцедуры

// Возвращает курсы валют на дату.
//
// Параметры:
//  ВалютаНач       - СправочникСсылка.Валюты - Валюта из которой выполняется пересчет
//  ВалютаКон       - СправочникСсылка.Валюты - Валюта в которую выполняется пересчет
//  ДатаКурса    - Дата - дата, на которую следует получить курс.
//
// Возвращаемое значение: 
//  Структура, содержащая:
//   Курс        - Число - курс валюты,
//   Кратность   - Число - кратность валюты.
//
Функция ПолучитьКурсыВалют(ВалютаНач, ВалютаКон, ДатаКурса) Экспорт
	
	СтруктураНач = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", ВалютаНач));
	СтруктураКон = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", ВалютаКон));
	
	СтруктураКон.Курс = ?(
		СтруктураКон.Курс = 0,
		1,
		СтруктураКон.Курс);
	СтруктураКон.Кратность = ?(
		СтруктураКон.Кратность = 0,
		1,
		СтруктураКон.Кратность);
	СтруктураКон.Вставить("КурсНач", ?(СтруктураНач.Курс      = 0, 1, СтруктураНач.Курс));
	СтруктураКон.Вставить("КратностьНач", ?(СтруктураНач.Кратность = 0, 1, СтруктураНач.Кратность));
	
	Возврат СтруктураКон;
	
КонецФункции // ПолучитьКурсыВалют()

// Функция пересчитывает сумму из одной валюты в другую
//
// Параметры:      
//	Сумма         - Число - сумма, которую следует пересчитать.
// 	КурсНач       - Число - курс из которого надо пересчитать.
// 	КурсКон       - Число - курс в который надо пересчитать.
// 	КратностьНач  - Число - кратность из которого надо пересчитать 
//                  (по умолчанию = 1).
// 	КратностьКон  - Число - кратность в который надо пересчитать 
//                  (по умолчанию = 1).
//
// Возвращаемое значение: 
//  Число - сумма, пересчитанная в другую валюту.
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, КурсНач, КурсКон,	КратностьНач = 1, КратностьКон = 1) Экспорт
	
	Если (КурсНач = КурсКон) И (КратностьНач = КратностьКон) Тогда
		Возврат Сумма;
	КонецЕсли;
	
	Если КурсНач = 0 ИЛИ КурсКон = 0 ИЛИ КратностьНач = 0 ИЛИ КратностьКон = 0 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Обнаружен нулевой курс валюты. Пересчет не выполнен.'");
		Сообщение.Сообщить();
		Возврат Сумма;
	КонецЕсли;
	
	СуммаПересчитанная = Окр((Сумма * КурсНач * КратностьКон) / (КурсКон * КратностьНач), 2);
	
	Возврат СуммаПересчитанная;
	
КонецФункции // ПересчитатьИзВалютыВВалюту()

// Округляет число по заданному порядку.
//
// Параметры:
//  Число        - Число - которое необходимо округлить
//  ПравилоОкругления - ПеречислениеСсылка.ПорядкиОкругления - порядок округления
//  ОкруглятьВБольшуюСторону - Булево - округления в большую сторону.
//
// Возвращаемое значение:
//  Число        - результат округления.
//
Функция ОкруглитьЦену(Число, ПравилоОкругления, ОкруглятьВБольшуюСторону) Экспорт
	
	Перем Результат; // Возвращаемый результат.
	
	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПравилоОкругления) Тогда
		ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01; 
	Иначе
		ПорядокОкругления = ПравилоОкругления;
	КонецЕсли;
	Порядок = Число(Строка(ПорядокОкругления));
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
	
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат	= Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал, 0, РежимОкругления.Окр15как20);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОкруглитьЦену()

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры:
//  Сумма        - Число - сумма НДС
//  СуммаВключаетНДС - Булево - признак включения НДС в сумму
//  СтавкаНДС    - СправочникСсылка.СтавкиНДС - ссылка на ставку НДС.
//
// Возвращаемое значение:
//  Число        - пересчитанная сумма НДС.
//
Функция ПересчитатьСуммуПриИзмененииФлаговНДС(Сумма, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	Ставка = СтавкаНДС.Ставка;
	
	Если СуммаВключаетНДС Тогда
		
		Сумма = (Сумма * (100 + Ставка)) / 100;
		
	Иначе
		
		Сумма = (Сумма * 100) / (100 + Ставка);
		
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции // ПересчитатьСуммуПриИзмененииФлаговНДС()

// Выполняем пересчет цены табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  СтруктураДанных - Структура:
//	 * ПроцентСкидкиНаценки - Число - процент скидки
//	 * ВидСкидкиНаценки - Число - вид скидки
//	 * ПроцентСкидкиПоДисконтнойКарте - Число - процент скидки по дисконтной карте
//	 * ВидЦен - СправочникСсылка.ВидыЦен - вид цены
//	 * Дата - Дата - период расчета
//	 * ВалютаДокумента - СправочникСсылка.Валюта - валюта документа
//	 * СуммаВключаетНДС - Булево - признак включения НДС в сумму документа
//	 * ЦенаНабора - Число - Используется для пересчета таблицы состава набора, необязательное
//  ТабличнаяЧастьДокумента - ДанныеФормыСтруктура - содержит табличную часть документа.
//  ПриводитьКМинимальным - Булево - признак безусловного приведения цен к минимальным
//
Процедура ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента, ПриводитьКМинимальным = Ложь) Экспорт
	
	// Минимальные цены.
	ФОПриводитьКМинимальным = ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются();
    
	// Скидки.
	Если СтруктураДанных.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанных.ВидСкидкиНаценки) Тогда
		
		СтруктураДанных.ПроцентСкидкиНаценки = СтруктураДанных.ВидСкидкиНаценки.Процент;
		
	КонецЕсли;	
	
	// Дисконтная карта.
	Если СтруктураДанных.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанных.ПроцентСкидкиПоДисконтнойКарте) Тогда
		
		СтруктураДанных.ПроцентСкидкиНаценки = СтруктураДанных.ПроцентСкидкиНаценки + СтруктураДанных.ПроцентСкидкиПоДисконтнойКарте;
		
	КонецЕсли;
	
	// 1. Сформируем таблицу документа.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	
	Массив = Новый Массив;
	
	// Номенклатура.
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", ОписаниеТипов);
	ТаблицаНоменклатуры.Колонки.Добавить("НоменклатураНабора", ОписаниеТипов);
	
	// Характеристика.
	Массив.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", ОписаниеТипов);
	ТаблицаНоменклатуры.Колонки.Добавить("ХарактеристикаНабора", ОписаниеТипов);
	
	// СтавкиНДС.
	Массив.Добавить(Тип("СправочникСсылка.СтавкиНДС"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("СтавкаНДС", ОписаниеТипов);	
	
	// ЕдиницаИзмерения.
	Массив.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
	Массив.Добавить(Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения", ОписаниеТипов);	
	
	// Коэффициент.
	Массив.Добавить(Тип("Число"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("Коэффициент", ОписаниеТипов);
	ТаблицаНоменклатуры.Колонки.Добавить("ДоляСтоимости", ОписаниеТипов);
	ТаблицаНоменклатуры.Колонки.Добавить("Количество", ОписаниеТипов);
	ТаблицаНоменклатуры.Колонки.Добавить("КоличествоНаборов", ОписаниеТипов);
	ТаблицаНоменклатуры.Колонки.Добавить("НомерВариантаКП", ОписаниеТипов);
	
	// Подарочный сертификат
	Массив.Добавить(Тип("Булево"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("ЭтоСертификат", ОписаниеТипов);
	
	// Номинал сертификата
	Массив.Добавить(Тип("Число"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("Номинал", ОписаниеТипов);

	// Структурная единица
	Массив.Добавить(Тип("СправочникСсылка.СтруктурныеЕдиницы"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("СтруктурнаяЕдиница", ОписаниеТипов);
	
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		
		// Наборы
		Если ТипЗнч(СтрокаТЧ) = Тип("Структура")
		   И СтрокаТЧ.Свойство("НоменклатураНабора") 
		   И ЗначениеЗаполнено(СтрокаТЧ.НоменклатураНабора) 
		   И СтрокаТЧ.ДоляСтоимости=0 Тогда
			// Строки корректировки стоимости наборов обрабатываются позже
			Продолжить;
		КонецЕсли;
		// Конец Наборы
		
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		НоваяСтрока.Номенклатура	 = СтрокаТЧ.Номенклатура;
		НоваяСтрока.Характеристика	 = СтрокаТЧ.Характеристика;
		НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
		Если ТипЗнч(СтрокаТЧ) = Тип("Структура")
		   И СтрокаТЧ.Свойство("СтавкаНДС") Тогда
			НоваяСтрока.СтавкаНДС		 = СтрокаТЧ.СтавкаНДС;
		КонецЕсли;
		Если ТипЗнч(СтрокаТЧ) = Тип("Структура")
		   И СтрокаТЧ.Свойство("НоменклатураНабора") Тогда
			НоваяСтрока.НоменклатураНабора 		= СтрокаТЧ.НоменклатураНабора;
			НоваяСтрока.ХарактеристикаНабора 	= СтрокаТЧ.ХарактеристикаНабора;
			НоваяСтрока.ДоляСтоимости 			= СтрокаТЧ.ДоляСтоимости;
			НоваяСтрока.Количество 				= СтрокаТЧ.Количество;
			Если СтрокаТЧ.Свойство("КоличествоНаборов") Тогда
				НоваяСтрока.КоличествоНаборов = СтрокаТЧ.КоличествоНаборов;
			Иначе
				НоваяСтрока.КоличествоНаборов = 1;
			КонецЕсли; 
			Если СтрокаТЧ.Свойство("НомерВариантаКП") Тогда
				НоваяСтрока.НомерВариантаКП = СтрокаТЧ.НомерВариантаКП;
			Иначе
				НоваяСтрока.НомерВариантаКП = 0;
			КонецЕсли; 
		КонецЕсли;
		
		Если ТипЗнч(СтрокаТЧ.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			НоваяСтрока.Коэффициент = СтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
		Иначе
			НоваяСтрока.Коэффициент = 1;
		КонецЕсли;
		
		// Подарочные сертификаты
		НоваяСтрока.ЭтоСертификат = (СтрокаТЧ.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
		НоваяСтрока.Номинал = СтрокаТЧ.Номенклатура.Номинал;
		
		// Минимальные цены
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "СтруктурнаяЕдиница") Тогда
			НоваяСтрока.СтруктурнаяЕдиница = СтрокаТЧ.СтруктурнаяЕдиница;
			ПриводитьКМинимальным = ФОПриводитьКМинимальным;
		КонецЕсли;
		
	КонецЦикла;
	
	// Наборы
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		Если НЕ ТипЗнч(СтрокаТЧ) = Тип("Структура") 
			ИЛИ НЕ СтрокаТЧ.Свойство("НоменклатураНабора") 
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.НоменклатураНабора) 
			ИЛИ СтрокаТЧ.ДоляСтоимости>0 Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураПоиска = Новый Структура("НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, ЕдиницаИзмерения");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
		Если СтрокаТЧ.Свойство("НомерВариантаКП") Тогда
			СтруктураПоиска.Вставить("НомерВариантаКП", СтрокаТЧ.НомерВариантаКП);
		КонецЕсли;
		СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
		Если СтрокиНоменклатуры.Количество()>0 Тогда
			СтрокаНоменклатуры = СтрокиНоменклатуры[0];
			СтрокаНоменклатуры.Количество = СтрокаНоменклатуры.Количество+СтрокаТЧ.Количество;
		КонецЕсли; 
	КонецЦикла;                             
	ИспользоватьНаборы = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
		Для каждого СтрокаТабличнойЧасти Из ТаблицаНоменклатуры Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
				ИспользоватьНаборы = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	// Конец Наборы
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.НоменклатураНабора КАК Справочник.Номенклатура) КАК НоменклатураНабора,
	|	ТаблицаНоменклатуры.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаНоменклатуры.Коэффициент КАК Коэффициент,
	|	ТаблицаНоменклатуры.ДоляСтоимости КАК ДоляСтоимости,
	|	ТаблицаНоменклатуры.Количество КАК Количество,
	|	ТаблицаНоменклатуры.КоличествоНаборов КАК КоличествоНаборов,
	|	ТаблицаНоменклатуры.НомерВариантаКП КАК НомерВариантаКП,
	|	ТаблицаНоменклатуры.ЭтоСертификат КАК ЭтоСертификат,
	|	ТаблицаНоменклатуры.Номинал КАК Номинал,
	|	ТаблицаНоменклатуры.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВременнаяТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаНоменклатуры.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ НоменклатураХарактеристикаТЧ
	|ИЗ
	|	ВременнаяТаблицаНоменклатуры КАК ВременнаяТаблицаНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаНоменклатуры.Номенклатура,
	|	ВременнаяТаблицаНоменклатуры.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблицаНоменклатуры.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ВидыМинимальныхЦенСтруктурныхЕдиниц.ВидМинимальныхЦен, &МинимальнаяЦенаОбщая) КАК ВидМинимальныхЦен
	|ПОМЕСТИТЬ ВидыМинимальныхЦенСтруктурныхЕдиниц
	|ИЗ
	|	ВременнаяТаблицаНоменклатуры КАК ВременнаяТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыМинимальныхЦенСтруктурныхЕдиниц КАК ВидыМинимальныхЦенСтруктурныхЕдиниц
	|		ПО ВременнаяТаблицаНоменклатуры.СтруктурнаяЕдиница = ВидыМинимальныхЦенСтруктурныхЕдиниц.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаНоменклатуры.НоменклатураНабора КАК НоменклатураНабора,
	|	ВременнаяТаблицаНоменклатуры.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ВидыМинимальныхЦенСтруктурныхЕдиниц.ВидМинимальныхЦен КАК ВидМинимальныхЦен
	|ПОМЕСТИТЬ НоменклатураХарактеристикаНабораТЧ
	|ИЗ
	|	ВременнаяТаблицаНоменклатуры КАК ВременнаяТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыМинимальныхЦенСтруктурныхЕдиниц КАК ВидыМинимальныхЦенСтруктурныхЕдиниц
	|		ПО ВременнаяТаблицаНоменклатуры.СтруктурнаяЕдиница = ВидыМинимальныхЦенСтруктурныхЕдиниц.СтруктурнаяЕдиница
	|ГДЕ
	|	ВременнаяТаблицаНоменклатуры.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаНоменклатуры.НоменклатураНабора,
	|	ВременнаяТаблицаНоменклатуры.ХарактеристикаНабора,
	|	ВидыМинимальныхЦенСтруктурныхЕдиниц.ВидМинимальныхЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаНоменклатуры.НоменклатураНабора КАК НоменклатураНабора,
	|	ВременнаяТаблицаНоменклатуры.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ВременнаяТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВременнаяТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблицаНоменклатуры.Коэффициент КАК Коэффициент,
	|	ВременнаяТаблицаНоменклатуры.ДоляСтоимости КАК ДоляСтоимости,
	|	ВременнаяТаблицаНоменклатуры.Количество КАК Количество,
	|	ВременнаяТаблицаНоменклатуры.КоличествоНаборов КАК КоличествоНаборов,
	|	ВременнаяТаблицаНоменклатуры.НомерВариантаКП КАК НомерВариантаКП,
	|	ВременнаяТаблицаНоменклатуры.НоменклатураНабора.СпособРасчетаЦеныНабора КАК СпособРасчетаЦеныНабора,
	|	ВременнаяТаблицаНоменклатуры.ЭтоСертификат КАК ЭтоСертификат,
	|	ВременнаяТаблицаНоменклатуры.Номинал КАК Номинал,
	|	ВидыМинимальныхЦенСтруктурныхЕдиниц.ВидМинимальныхЦен КАК ВидМинимальныхЦен,
	|	ВременнаяТаблицаНоменклатуры.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	ВременнаяТаблицаНоменклатуры КАК ВременнаяТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыМинимальныхЦенСтруктурныхЕдиниц КАК ВидыМинимальныхЦенСтруктурныхЕдиниц
	|		ПО ВременнаяТаблицаНоменклатуры.СтруктурнаяЕдиница = ВидыМинимальныхЦенСтруктурныхЕдиниц.СтруктурнаяЕдиница";
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("МинимальнаяЦенаОбщая", ЦенообразованиеСерверПовтИсп.ПолучитьОбщийВидМинимальныхЦен());
	Запрос.Выполнить();
	
	// 2. Заполним цены.
	ВидЦенПараметр = СтруктураДанных.ВидЦен;
	ВалютаЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидЦенПараметр, "ВалютаЦены");	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент <> 0
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ ЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаОбработки,
	|			Актуальность
	|				И ВидЦен = &ВидЦен
	|				И (Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура,
	|						Товары.Характеристика
	|					ИЗ
	|						НоменклатураХарактеристикаТЧ КАК Товары)) КАК ЦеныНоменклатурыСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК МинимальнаяЦена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент <> 0
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Коэффициент,
	|	ЕСТЬNULL(КурсВалютыМинимальныйВидЦен.Курс, 1) КАК Курс,
	|	ЕСТЬNULL(КурсВалютыМинимальныйВидЦен.Кратность, 1) КАК Кратность
	|ПОМЕСТИТЬ МинимальныеЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаОбработки,
	|			Актуальность
	|				И &ПриводитьКМинимальным
	|				И (ВидЦен, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						Товары.ВидМинимальныхЦен,
	|						Товары.Номенклатура,
	|						Товары.Характеристика
	|					ИЗ
	|						ТаблицаНоменклатуры КАК Товары)) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыМинимальныйВидЦен
	|		ПО (ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.ВидЦен КАК Справочник.ВидыЦен).ВалютаЦены = КурсВалютыМинимальныйВидЦен.Валюта)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ЦенаНабора > 0
	|			ТОГДА &ЦенаНабора
	|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена
	|	КОНЕЦ КАК Цена,
	|	ЕСТЬNULL(МинимальныеЦеныНоменклатурыСрезПоследних.Цена, 0) КАК МинимальнаяЦена,
	|	ВЫБОР
	|		КОГДА &ЦенаНабора > 0
	|			ТОГДА 1
	|		КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент <> 0
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ ЦеныНаборов
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаОбработки,
	|			&ИспользоватьНаборы
	|				И ВидЦен = &ВидЦен
	|				И (Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						Наборы.НоменклатураНабора,
	|						Наборы.ХарактеристикаНабора
	|					ИЗ
	|						НоменклатураХарактеристикаНабораТЧ КАК Наборы)) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаОбработки,
	|				&ИспользоватьНаборы
	|					И (Номенклатура, Характеристика, ВидЦен) В
	|						(ВЫБРАТЬ
	|							Наборы.НоменклатураНабора,
	|							Наборы.ХарактеристикаНабора,
	|							Наборы.ВидМинимальныхЦен
	|						ИЗ
	|							НоменклатураХарактеристикаНабораТЧ КАК Наборы)) КАК МинимальныеЦеныНоменклатурыСрезПоследних
	|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = МинимальныеЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ЦеныНоменклатурыСрезПоследних.Характеристика = МинимальныеЦеныНоменклатурыСрезПоследних.Характеристика
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.Актуальность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаНоменклатуры.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаНоменклатуры.НомерВариантаКП КАК НомерВариантаКП,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаНоменклатуры.Количество = 0
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаНоменклатуры.ДоляСтоимости
	|		КОНЕЦ) КАК ДоляСтоимости,
	|	СУММА(ТаблицаНоменклатуры.Количество) КАК Количество,
	|	МАКСИМУМ(ТаблицаНоменклатуры.КоличествоНаборов * ЕСТЬNULL(ЦеныНаборов.Цена / ЕСТЬNULL(ЦеныНаборов.Коэффициент, 1) * (КурсВалютыВидЦен.Курс / КурсВалютыВидЦен.Кратность) * (КурсВалютыДокумента.Кратность / КурсВалютыДокумента.Курс), 0)) КАК ЦенаНабора,
	|	СУММА(ЕСТЬNULL(ЦеныНоменклатуры.Цена / ЕСТЬNULL(ЦеныНоменклатуры.Коэффициент, 1) * (КурсВалютыВидЦен.Курс / КурсВалютыВидЦен.Кратность) * (КурсВалютыДокумента.Кратность / КурсВалютыДокумента.Курс) * ЕСТЬNULL(ТаблицаНоменклатуры.Коэффициент * ТаблицаНоменклатуры.Количество, 1), 0)) КАК Цена,
	|	МАКСИМУМ(ТаблицаНоменклатуры.КоличествоНаборов * ЕСТЬNULL(ЦеныНаборов.МинимальнаяЦена / ЕСТЬNULL(ЦеныНаборов.Коэффициент, 1) * (КурсВалютыМинимальныйВидЦен.Курс / КурсВалютыМинимальныйВидЦен.Кратность) * (КурсВалютыДокумента.Кратность / КурсВалютыДокумента.Курс), 0)) КАК МинимальнаяЦенаНабора,
	|	СУММА(ЕСТЬNULL(МинимальныеЦеныНоменклатуры.МинимальнаяЦена / ЕСТЬNULL(МинимальныеЦеныНоменклатуры.Коэффициент, 1) * (КурсВалютыМинимальныйВидЦен.Курс / КурсВалютыМинимальныйВидЦен.Кратность) * (КурсВалютыДокумента.Кратность / КурсВалютыДокумента.Курс) * ЕСТЬNULL(ТаблицаНоменклатуры.Коэффициент * ТаблицаНоменклатуры.Количество, 1), 0)) КАК МинимальнаяЦена
	|ПОМЕСТИТЬ БазаВычисления
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ЦеныНоменклатуры.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ МинимальныеЦеныНоменклатуры КАК МинимальныеЦеныНоменклатуры
	|		ПО ТаблицаНоменклатуры.Номенклатура = МинимальныеЦеныНоменклатуры.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = МинимальныеЦеныНоменклатуры.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНаборов КАК ЦеныНаборов
	|		ПО ТаблицаНоменклатуры.НоменклатураНабора = ЦеныНаборов.Номенклатура
	|			И ТаблицаНоменклатуры.ХарактеристикаНабора = ЦеныНаборов.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыМинимальныйВидЦен
	|		ПО (ВЫРАЗИТЬ(ТаблицаНоменклатуры.ВидМинимальныхЦен КАК Справочник.ВидыЦен).ВалютаЦены = КурсВалютыМинимальныйВидЦен.Валюта),
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаЦены) КАК КурсВалютыВидЦен,
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|ГДЕ
	|	&ИспользоватьНаборы
	|	И ТаблицаНоменклатуры.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ТаблицаНоменклатуры.НоменклатураНабора.СпособРасчетаЦеныНабора <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНоменклатуры.НоменклатураНабора,
	|	ТаблицаНоменклатуры.ХарактеристикаНабора,
	|	ТаблицаНоменклатуры.НомерВариантаКП
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатураНабора,
	|	ХарактеристикаНабора,
	|	НомерВариантаКП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.НомерВариантаКП КАК НомерВариантаКП,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.ЭтоСертификат
	|			ТОГДА ТаблицаНоменклатуры.Номинал * (КурсВалютыДокумента.Кратность / КурсВалютыДокумента.Курс)
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена / ЕСТЬNULL(ЦеныНоменклатуры.Коэффициент, 1) * (КурсВалютыВидЦен.Курс / КурсВалютыВидЦен.Кратность) * (КурсВалютыДокумента.Кратность / КурсВалютыДокумента.Курс) * ЕСТЬNULL(ТаблицаНоменклатуры.Коэффициент, 1), 0)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.ЭтоСертификат
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(МинимальныеЦеныНоменклатуры.МинимальнаяЦена / ЕСТЬNULL(МинимальныеЦеныНоменклатуры.Коэффициент, 1) * (МинимальныеЦеныНоменклатуры.Курс / МинимальныеЦеныНоменклатуры.Кратность) * (КурсВалютыДокумента.Кратность / КурсВалютыДокумента.Курс) * ЕСТЬNULL(ТаблицаНоменклатуры.Коэффициент, 1), 0)
	|	КОНЕЦ КАК МинимальнаяЦена,
	|	ТаблицаНоменклатуры.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаНоменклатуры.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаНоменклатуры.СпособРасчетаЦеныНабора КАК СпособРасчетаЦеныНабора,
	|	ТаблицаНоменклатуры.Количество КАК Количество,
	|	ТаблицаНоменклатуры.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница 
	|ПОМЕСТИТЬ ТаблицаЦен
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ЦеныНоменклатуры.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ МинимальныеЦеныНоменклатуры КАК МинимальныеЦеныНоменклатуры
	|		ПО ТаблицаНоменклатуры.Номенклатура = МинимальныеЦеныНоменклатуры.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = МинимальныеЦеныНоменклатуры.Характеристика
	|			И ТаблицаНоменклатуры.ВидМинимальныхЦен = МинимальныеЦеныНоменклатуры.ВидЦен,
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаЦены) КАК КурсВалютыВидЦен,
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|ГДЕ
	|	(ТаблицаНоменклатуры.НоменклатураНабора = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ИЛИ ТаблицаНоменклатуры.СпособРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.НомерВариантаКП,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения,
	|	ТаблицаНоменклатуры.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.Количество = 0
	|				ИЛИ БазаВычисления.Цена = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена / ЕСТЬNULL(ЦеныНоменклатуры.Коэффициент, 1) * (КурсВалютыВидЦен.Курс * КурсВалютыВидЦен.Кратность) * (КурсВалютыДокумента.Кратность / КурсВалютыДокумента.Курс) * ЕСТЬNULL(ТаблицаНоменклатуры.Коэффициент, 1) * (БазаВычисления.ЦенаНабора / БазаВычисления.Цена), 0) КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.Количество = 0
	|				ИЛИ БазаВычисления.МинимальнаяЦена = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(МинимальныеЦеныНоменклатуры.МинимальнаяЦена / ЕСТЬNULL(МинимальныеЦеныНоменклатуры.Коэффициент, 1) * (МинимальныеЦеныНоменклатуры.Курс * МинимальныеЦеныНоменклатуры.Кратность) * (КурсВалютыДокумента.Кратность / КурсВалютыДокумента.Курс) * ЕСТЬNULL(ТаблицаНоменклатуры.Коэффициент, 1) * (БазаВычисления.МинимальнаяЦенаНабора / БазаВычисления.МинимальнаяЦена), 0) КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	ТаблицаНоменклатуры.НоменклатураНабора,
	|	ТаблицаНоменклатуры.ХарактеристикаНабора,
	|	ТаблицаНоменклатуры.СпособРасчетаЦеныНабора,
	|	ТаблицаНоменклатуры.Количество,
	|	ТаблицаНоменклатуры.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ЦеныНоменклатуры.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ МинимальныеЦеныНоменклатуры КАК МинимальныеЦеныНоменклатуры
	|		ПО ТаблицаНоменклатуры.Номенклатура = МинимальныеЦеныНоменклатуры.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = МинимальныеЦеныНоменклатуры.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ БазаВычисления КАК БазаВычисления
	|		ПО ТаблицаНоменклатуры.НоменклатураНабора = БазаВычисления.НоменклатураНабора
	|			И ТаблицаНоменклатуры.ХарактеристикаНабора = БазаВычисления.ХарактеристикаНабора
	|			И ТаблицаНоменклатуры.НомерВариантаКП = БазаВычисления.НомерВариантаКП,
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаЦены) КАК КурсВалютыВидЦен,
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|ГДЕ
	|	&ИспользоватьНаборы
	|	И ТаблицаНоменклатуры.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ТаблицаНоменклатуры.СпособРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.НазначаетсяИРаспределяетсяПоЦене)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.НомерВариантаКП,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения,
	|	ТаблицаНоменклатуры.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.Количество = 0
	|				ИЛИ БазаВычисления.ДоляСтоимости = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаНоменклатуры.ДоляСтоимости * (БазаВычисления.ЦенаНабора / БазаВычисления.ДоляСтоимости), 0) / ТаблицаНоменклатуры.Количество КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.Количество = 0
	|				ИЛИ БазаВычисления.МинимальнаяЦена = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаНоменклатуры.ДоляСтоимости * (БазаВычисления.МинимальнаяЦенаНабора / БазаВычисления.ДоляСтоимости), 0) / ТаблицаНоменклатуры.Количество КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	ТаблицаНоменклатуры.НоменклатураНабора,
	|	ТаблицаНоменклатуры.ХарактеристикаНабора,
	|	ТаблицаНоменклатуры.СпособРасчетаЦеныНабора,
	|	ТаблицаНоменклатуры.Количество,
	|	ТаблицаНоменклатуры.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ БазаВычисления КАК БазаВычисления
	|		ПО ТаблицаНоменклатуры.НоменклатураНабора = БазаВычисления.НоменклатураНабора
	|			И ТаблицаНоменклатуры.ХарактеристикаНабора = БазаВычисления.ХарактеристикаНабора
	|			И ТаблицаНоменклатуры.НомерВариантаКП = БазаВычисления.НомерВариантаКП
	|ГДЕ
	|	&ИспользоватьНаборы
	|	И ТаблицаНоменклатуры.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ТаблицаНоменклатуры.СпособРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.НазначаетсяИРаспределяетсяПоДолеСтоимости)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.НоменклатураНабора КАК НоменклатураНабора,
	|	ВложенныйЗапрос.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ВложенныйЗапрос.НомерВариантаКП КАК НомерВариантаКП,
	|	СУММА(ВложенныйЗапрос.Цена) КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		БазаВычисления.НоменклатураНабора КАК НоменклатураНабора,
	|		БазаВычисления.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		БазаВычисления.НомерВариантаКП КАК НомерВариантаКП,
	|		БазаВычисления.ЦенаНабора КАК Цена
	|	ИЗ
	|		БазаВычисления КАК БазаВычисления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЦен.НоменклатураНабора,
	|		ТаблицаЦен.ХарактеристикаНабора,
	|		ТаблицаЦен.НомерВариантаКП,
	|		-ТаблицаЦен.Цена * ТаблицаЦен.Количество
	|	ИЗ
	|		ТаблицаЦен КАК ТаблицаЦен
	|	ГДЕ
	|		ТаблицаЦен.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И ТаблицаЦен.СпособРасчетаЦеныНабора <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих)) КАК ВложенныйЗапрос
	|ГДЕ
	|	&ИспользоватьНаборы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.НоменклатураНабора,
	|	ВложенныйЗапрос.ХарактеристикаНабора,
	|	ВложенныйЗапрос.НомерВариантаКП
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.Цена) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ТаблицаЦен.Характеристика КАК Характеристика,
	|	ТаблицаЦен.НомерВариантаКП КАК НомерВариантаКП,
	|	ТаблицаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаЦен.СтавкаНДС КАК СтавкаНДС,
	|	&ВалютаЦены КАК Валюта,
	|	ВЫРАЗИТЬ(&ВидЦен КАК Справочник.ВидыЦен).ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫРАЗИТЬ(&ВидЦен КАК Справочник.ВидыЦен).ПорядокОкругления КАК ПорядокОкругления,
	|	ВЫРАЗИТЬ(&ВидЦен КАК Справочник.ВидыЦен).ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	|	ВЫБОР
	|		КОГДА &ПриводитьКМинимальным
	|				И ТаблицаЦен.МинимальнаяЦена <> 0
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЦен.Цена < ТаблицаЦен.МинимальнаяЦена
	|						ТОГДА ТаблицаЦен.МинимальнаяЦена
	|					ИНАЧЕ ТаблицаЦен.Цена
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаЦен.Цена
	|	КОНЕЦ КАК Цена,
	|	ТаблицаЦен.МинимальнаяЦена КАК МинимальнаяЦена,
	|	ТаблицаЦен.Количество КАК Количество,
	|	ТаблицаЦен.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаЦен.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаЦен.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	ТаблицаЦен КАК ТаблицаЦен";
		
	Запрос.УстановитьПараметр("ДатаОбработки",	    СтруктураДанных.Дата);
	Запрос.УстановитьПараметр("ВидЦен",			    ВидЦенПараметр);
	Запрос.УстановитьПараметр("ВалютаЦены",		    ВалютаЦены);
	Запрос.УстановитьПараметр("ВалютаДокумента",    СтруктураДанных.ВалютаДокумента);
	Запрос.УстановитьПараметр("ИспользоватьНаборы", ИспользоватьНаборы);
	Если СтруктураДанных.Свойство("ЦенаНабора") И ЗначениеЗаполнено(СтруктураДанных.ЦенаНабора) Тогда
		Запрос.УстановитьПараметр("ЦенаНабора", СтруктураДанных.ЦенаНабора);
	Иначе
		Запрос.УстановитьПараметр("ЦенаНабора", 0);
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ПриводитьКМинимальным", ПриводитьКМинимальным);
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаЦен = РезультатЗапроса[6].Выгрузить();
	ТаблицаОкруглений = РезультатЗапроса[5].Выгрузить();
	
	СтруктураДанных.Вставить("ОкругленияНаборов", Новый Массив);
	Для каждого СтрокаОкругления Из ТаблицаОкруглений Цикл
		ОписаниеОкругления = Новый Структура;
		ОписаниеОкругления.Вставить("НоменклатураНабора", СтрокаОкругления.НоменклатураНабора);
		ОписаниеОкругления.Вставить("ХарактеристикаНабора", СтрокаОкругления.ХарактеристикаНабора);
		Если СтрокаОкругления.НомерВариантаКП>0 Тогда
			ОписаниеОкругления.Вставить("НомерВариантаКП", СтрокаОкругления.НомерВариантаКП);
		КонецЕсли; 
		ОписаниеОкругления.Вставить("Округление", СтрокаОкругления.Цена);
		СтруктураДанных.ОкругленияНаборов.Добавить(ОписаниеОкругления);
	КонецЦикла; 
	
	Для каждого СтрокаТабЧасти Из ТабличнаяЧастьДокумента Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",	 СтрокаТабЧасти.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",	 СтрокаТабЧасти.Характеристика);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения", СтрокаТабЧасти.ЕдиницаИзмерения);
		Если ТипЗнч(СтрокаТабЧасти) = Тип("Структура")
			И СтрокаТабЧасти.Свойство("СтавкаНДС") Тогда
			СтруктураПоиска.Вставить("СтавкаНДС", СтрокаТабЧасти.СтавкаНДС);
		КонецЕсли;
		Если ТипЗнч(СтрокаТабЧасти) = Тип("Структура")
			И СтрокаТабЧасти.Свойство("НоменклатураНабора") Тогда
			СтруктураПоиска.Вставить("НоменклатураНабора", СтрокаТабЧасти.НоменклатураНабора);
		КонецЕсли;
		Если ТипЗнч(СтрокаТабЧасти) = Тип("Структура")
			И СтрокаТабЧасти.Свойство("ХарактеристикаНабора") Тогда
			СтруктураПоиска.Вставить("ХарактеристикаНабора", СтрокаТабЧасти.ХарактеристикаНабора);
		КонецЕсли;
		Если ТипЗнч(СтрокаТабЧасти) = Тип("Структура")
			И СтрокаТабЧасти.Свойство("НомерВариантаКП") Тогда
			СтруктураПоиска.Вставить("НомерВариантаКП", СтрокаТабЧасти.НомерВариантаКП);
		КонецЕсли;
		
		ЕстьМинимальнаяЦенаВСтроке = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабЧасти, "МинимальнаяЦена");
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабЧасти, "СтруктурнаяЕдиница")
			И ЗначениеЗаполнено(СтрокаТабЧасти.СтруктурнаяЕдиница) Тогда
			
			СтруктураПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТабЧасти.СтруктурнаяЕдиница);
			
		КонецЕсли;
		
		РезультатПоиска = ТаблицаЦен.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			
			Цена = РезультатПоиска[0].Цена;
			МинимальнаяЦена = РезультатПоиска[0].МинимальнаяЦена;
			
			Если Цена = 0 Тогда
				СтрокаТабЧасти.Цена = Цена;
				Если ЕстьМинимальнаяЦенаВСтроке Тогда
					СтрокаТабЧасти.МинимальнаяЦена = МинимальнаяЦена;
				КонецЕсли;				
			Иначе
				
				// Динамически рассчитываем цену
				ПорядокОкругления = РезультатПоиска[0].ПорядокОкругления;
				ОкруглятьВБольшуюСторону = РезультатПоиска[0].ОкруглятьВБольшуюСторону;
				
				Если СтруктураДанных.Свойство("СуммаВключаетНДС")
					И ((СтруктураДанных.СуммаВключаетНДС И НЕ РезультатПоиска[0].ЦенаВключаетНДС)
						ИЛИ (НЕ СтруктураДанных.СуммаВключаетНДС И РезультатПоиска[0].ЦенаВключаетНДС)) Тогда
					
					Цена = ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.СуммаВключаетНДС, СтрокаТабЧасти.СтавкаНДС);
					МинимальнаяЦена = ПересчитатьСуммуПриИзмененииФлаговНДС(МинимальнаяЦена, СтруктураДанных.СуммаВключаетНДС, СтрокаТабЧасти.СтавкаНДС);
					
				КонецЕсли;
				
				Если ТипЗнч(СтрокаТабЧасти)<>Тип("Структура")
		   			ИЛИ НЕ СтрокаТабЧасти.Свойство("НоменклатураНабора")
					ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабЧасти.НоменклатураНабора) Тогда
				
					СтрокаТабЧасти.Цена = ОкруглитьЦену(Цена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
					СтрокаТабЧасти.Цена = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(СтрокаТабЧасти.Цена, ВидЦенПараметр.ПсихологическоеОкругление);
					
					Если ЕстьМинимальнаяЦенаВСтроке Тогда
						СтрокаТабЧасти.МинимальнаяЦена = ОкруглитьЦену(МинимальнаяЦена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
						СтрокаТабЧасти.МинимальнаяЦена = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(СтрокаТабЧасти.МинимальнаяЦена, ВидЦенПараметр.ПсихологическоеОкругление);
					КонецЕсли;
					
				Иначе
					
					// Для наборов округление не используется
					СтрокаТабЧасти.Цена = Цена;
					
					Если ЕстьМинимальнаяЦенаВСтроке Тогда
						СтрокаТабЧасти.МинимальнаяЦена = МинимальнаяЦена;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ПолучитьЦеныТабличнойЧастиПоВидуЦен()

// Выполняем пересчет цены табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  СтруктураДанных - Структура:
//	 * ПроцентСкидкиНаценки - Число - процент скидки
//	 * ВидСкидкиНаценки - Число - вид скидки
//	 * ПроцентСкидкиПоДисконтнойКарте - Число - процент скидки по дисконтной карте
//	 * ВидЦенКонтрагента - СправочникСсылка.ВидыЦенКонтрагентов - вид цены контрагента
//	 * Дата - Дата - период расчета
//	 * ВалютаДокумента - СправочникСсылка.Валюта - валюта документа
//	 * СуммаВключаетНДС - Булево - признак включения НДС в сумму документа
//  ТабличнаяЧастьДокумента - ДанныеФормыСтруктура - содержит табличную часть документа.
//
Процедура ПолучитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(СтруктураДанных, ТабличнаяЧастьДокумента) Экспорт
	
	// 1. Сформируем таблицу документа.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	
	Массив = Новый Массив;
	
	// Номенклатура.
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", ОписаниеТипов);
	
	// Характеристика.
	Массив.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", ОписаниеТипов);
	
	// СтавкиНДС.
	Массив.Добавить(Тип("СправочникСсылка.СтавкиНДС"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("СтавкаНДС", ОписаниеТипов);	
	
	// ЕдиницаИзмерения.
	Массив.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
	Массив.Добавить(Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения", ОписаниеТипов);	
	
	// Коэффициент.
	Массив.Добавить(Тип("Число"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("Коэффициент", ОписаниеТипов);
	
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		НоваяСтрока.Номенклатура	 = СтрокаТЧ.Номенклатура;
		
		Если СтрокаТЧ.Свойство("Характеристика") Тогда
			
			НоваяСтрока.Характеристика	 = СтрокаТЧ.Характеристика;
			
		КонецЕсли;
		
		НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
		НоваяСтрока.СтавкаНДС		 = СтрокаТЧ.СтавкаНДС;
		
		Если ТипЗнч(СтрокаТЧ.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			НоваяСтрока.Коэффициент = 1;
		Иначе
			НоваяСтрока.Коэффициент = СтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения,
	|	ТаблицаНоменклатуры.СтавкаНДС,
	|	ТаблицаНоменклатуры.Коэффициент
	|ПОМЕСТИТЬ ВременнаяТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры";
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.Выполнить();
	
	// 2. Заполним цены.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены КАК ЦеныНоменклатурыВалюта,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) * ЕСТЬNULL(ТаблицаНоменклатуры.Коэффициент, 1) / ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1), 0) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&ДатаОбработки, ВидЦенКонтрагента = &ВидЦенКонтрагента) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ЦеныНоменклатурыКонтрагентовСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыВидЦен
	|		ПО (ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены = КурсВалютыВидЦен.Валюта),
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|ГДЕ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Актуальность";
		
	Запрос.УстановитьПараметр("ДатаОбработки", 		СтруктураДанных.Дата);
	Запрос.УстановитьПараметр("ВидЦенКонтрагента",	СтруктураДанных.ВидЦенКонтрагента);
	Запрос.УстановитьПараметр("ВалютаДокумента", 	СтруктураДанных.ВалютаДокумента);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТабЧасти Из ТабличнаяЧастьДокумента Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",	 СтрокаТабЧасти.Номенклатура);
		
		Если СтрокаТабЧасти.Свойство("Характеристика") Тогда
			
			СтруктураПоиска.Вставить("Характеристика",СтрокаТабЧасти.Характеристика);
			
		КонецЕсли;
		
		СтруктураПоиска.Вставить("ЕдиницаИзмерения", СтрокаТабЧасти.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СтавкаНДС",		 СтрокаТабЧасти.СтавкаНДС);
		
		РезультатПоиска = ТаблицаЦен.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			
			Цена = РезультатПоиска[0].Цена;
			Если Цена = 0 Тогда
				СтрокаТабЧасти.Цена = Цена;
			Иначе
				
				// Учитываем: сумма включает НДС.
				Если (СтруктураДанных.СуммаВключаетНДС И Не РезультатПоиска[0].ЦенаВключаетНДС) 
					ИЛИ (Не СтруктураДанных.СуммаВключаетНДС И РезультатПоиска[0].ЦенаВключаетНДС) Тогда
					Цена = ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.СуммаВключаетНДС, СтрокаТабЧасти.СтавкаНДС);
				КонецЕсли;
				
				СтрокаТабЧасти.Цена = Цена;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ПолучитьЦеныТабличнойЧастиПоВидуЦенКонтрагента()

// Выполняет пересчет документа после изменений в форме "Цены и валюта".
//
// Параметры:
//  СтруктураДанных - Структура:
//   * ВидЦен - СправочникСсылка.ВидыЦен - вид цен
//   * ДатаОбработки - Дата - дата обработки
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура цены
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика цены
//   * Коэффициент - число - коэффициент пересчета цены
//   * ВалютаДокумента - СправочникСсылка.Валюты - валюта документа
//   * СуммаВключаетНДС - Булево - признак включения суммы НДС в сумму документа
//
// Возвращаемое значение:
//  Число        - Полученная цена номенклатуры по прайсу.
//
Функция ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанных) Экспорт
	
	ВидЦенПараметр = СтруктураДанных.ВидЦен;
	МинимальнаяЦена = 0;
	
	ПриводитьКМинимальным = ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются()
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураДанных, "СтруктурнаяЕдиница");	
		
	Если ПриводитьКМинимальным Тогда
				
		МинимальнаяЦена = ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанных);				
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыЦенПравилаОкругленияЦены.Ссылка КАК Ссылка,
	|	ВидыЦенПравилаОкругленияЦены.ТочностьОкругления КАК ТочностьОкругления,
	|	ВидыЦенПравилаОкругленияЦены.НижняяГраницаДиапазонаЦен КАК НижняяГраницаДиапазонаЦен
	|ПОМЕСТИТЬ ПравилаОкругления
	|ИЗ
	|	Справочник.ВидыЦен.ПравилаОкругленияЦены КАК ВидыЦенПравилаОкругленияЦены
	|ГДЕ
	|	ВидыЦенПравилаОкругленияЦены.Ссылка = &ВидЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены КАК ЦеныНоменклатурыВалюта,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ПорядокОкругления КАК ТочностьОкругления,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсВалютыВидЦен.Курс, 0) = 0
	|				ИЛИ ЕСТЬNULL(КурсВалютыВидЦен.Кратность, 0) = 0
	|			ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1)
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * ЕСТЬNULL(КурсВалютыВидЦен.Курс, 1) * ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) / (ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) * ЕСТЬNULL(КурсВалютыВидЦен.Кратность, 1)) * ЕСТЬNULL(&Коэффициент, 1) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1)
	|	КОНЕЦ КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен
	|ПОМЕСТИТЬ ЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаОбработки,
	|			Актуальность
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И ВидЦен = &ВидЦен
	|				И НЕ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыВидЦен
	|		ПО ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены = КурсВалютыВидЦен.Валюта,
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ВалютаДокумента,
	|	ИСТИНА,
	|	ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр0_01),
	|	ЛОЖЬ,
	|	Номенклатура.Номинал,
	|	&ВидЦен
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатуры.ЦеныНоменклатурыВалюта КАК ЦеныНоменклатурыВалюта,
	|	ЦеныНоменклатуры.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЕСТЬNULL(ПравилаОкругления.ТочностьОкругления, ЦеныНоменклатуры.ТочностьОкругления) КАК ТочностьОкругления,
	|	ЦеныНоменклатуры.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	|	ЦеныНоменклатуры.Цена КАК Цена,
	|	ПравилаОкругления.НижняяГраницаДиапазонаЦен КАК НижняяГраницаДиапазонаЦен
	|ИЗ
	|	ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаОкругления КАК ПравилаОкругления
	|		ПО ЦеныНоменклатуры.ВидЦен = ПравилаОкругления.Ссылка
	|			И ЦеныНоменклатуры.Цена >= ПравилаОкругления.НижняяГраницаДиапазонаЦен
	|
	|УПОРЯДОЧИТЬ ПО
	|	НижняяГраницаДиапазонаЦен УБЫВ";
	
	Запрос.УстановитьПараметр("ДатаОбработки",	 СтруктураДанных.ДатаОбработки);
	Запрос.УстановитьПараметр("Номенклатура",	 СтруктураДанных.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ?(СтруктураДанных.Характеристика = Неопределено
												, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(),СтруктураДанных.Характеристика));
	Запрос.УстановитьПараметр("Коэффициент",	 СтруктураДанных.Коэффициент);
	Запрос.УстановитьПараметр("ВалютаДокумента", СтруктураДанных.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВидЦен",			 ВидЦенПараметр);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Цена = 0;
	Пока Выборка.Следующий() Цикл
		
		Цена					= Выборка.Цена;
		ТочностьОкругления		= Выборка.ТочностьОкругления;
		ОкруглятьВБольшуюСторону= Выборка.ОкруглятьВБольшуюСторону;

		ИзменитьЦенуПоМинимальной(Цена, МинимальнаяЦена);

		Если СтруктураДанных.Свойство("СуммаВключаетНДС")
			И ((СтруктураДанных.СуммаВключаетНДС И НЕ Выборка.ЦенаВключаетНДС)
				ИЛИ (НЕ СтруктураДанных.СуммаВключаетНДС И Выборка.ЦенаВключаетНДС)) Тогда
				
				Цена = ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.СуммаВключаетНДС, СтруктураДанных.СтавкаНДС);
				
		КонецЕсли;
		
		Цена = ОкруглитьЦену(Цена, ТочностьОкругления, ОкруглятьВБольшуюСторону);
		
		Если ТипЗнч(ВидЦенПараметр) = Тип("СправочникСсылка.ВидыЦен") 
			И ЗначениеЗаполнено(ВидЦенПараметр) Тогда
			
			Цена = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(Цена, ВидЦенПараметр.ПсихологическоеОкругление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Цена = 0
		И МинимальнаяЦена <> 0 Тогда
		
		ИзменитьЦенуПоМинимальной(Цена, МинимальнаяЦена, СтруктураДанных);
		
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции // ПолучитьЦенуНоменклатурыПоВидуЦен()

// Выполняет пересчет документа после изменений в форме "Цены и валюта".
//
// Параметры:
//  СтруктураДанных - Структура:
//   * ВидЦенКонтрагента - СправочникСсылка.ВидыЦенКонтрагентов - вид цен контрагентов
//   * ДатаОбработки - Дата - дата обработки
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура цены
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика цены
//   * Коэффициент - число - коэффициент пересчета цены
//   * ВалютаДокумента - СправочникСсылка.Валюты - валюта документа
//   * СуммаВключаетНДС - Булево - признак включения суммы НДС в сумму документа
//
// Возвращаемое значение:
//  Число        - Полученная цена номенклатуры по прайсу.
//
Функция ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены КАК ЦеныНоменклатурыВалюта,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) * ЕСТЬNULL(&Коэффициент, 1) / ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1), 0) КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|			&ДатаОбработки,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И ВидЦенКонтрагента = &ВидЦенКонтрагента) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыВидЦен
	|		ПО ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены = КурсВалютыВидЦен.Валюта,
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|ГДЕ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Актуальность";
	
	Запрос.УстановитьПараметр("ДатаОбработки",	 	СтруктураДанных.ДатаОбработки);
	Запрос.УстановитьПараметр("Номенклатура",	 	СтруктураДанных.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",  	СтруктураДанных.Характеристика);
	Запрос.УстановитьПараметр("Коэффициент",	 	СтруктураДанных.Коэффициент);
	Запрос.УстановитьПараметр("ВалютаДокумента", 	СтруктураДанных.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВидЦенКонтрагента",	СтруктураДанных.ВидЦенКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Цена = 0;
	Пока Выборка.Следующий() Цикл
		
		Цена = Выборка.Цена;
		
		// Учитываем: сумма включает НДС.
		Если (СтруктураДанных.СуммаВключаетНДС И НЕ Выборка.ЦенаВключаетНДС)
		 ИЛИ (НЕ СтруктураДанных.СуммаВключаетНДС И Выборка.ЦенаВключаетНДС) Тогда
			Цена = ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.СуммаВключаетНДС, СтруктураДанных.СтавкаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Цена;
	
КонецФункции // ПолучитьЦенуНоменклатурыПоВидуЦен()

// Получает норму времени работы.
//
// Параметры:
//  СтруктураДанных - Структура:
//   * ДатаОбработки - Дата - дата обработки
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура цены
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика цены
//
// Возвращаемое значение:
//  Число        - Полученная цена номенклатуры по прайсу.
//
Функция ПолучитьНормуВремениРаботы(СтруктураДанных) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	НормыВремениРаботСрезПоследних.Норма
						  |ИЗ
						  |	РегистрСведений.НормыВремениРабот.СрезПоследних(
						  |			&ДатаОбработки,
						  |			Номенклатура = &Номенклатура
						  |				И Характеристика = &Характеристика
						  |				И (НЕ Номенклатура.ФиксированнаяСтоимость)) КАК НормыВремениРаботСрезПоследних");	
						  
	Запрос.УстановитьПараметр("Номенклатура", СтруктураДанных.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", СтруктураДанных.Характеристика);
	Запрос.УстановитьПараметр("ДатаОбработки", СтруктураДанных.ДатаОбработки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Норма;		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции // ПолучитьЦенуНоменклатурыПоВидуЦен()

// Устарела. Будет удалена в следующей версии программы.
// См. ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти
Функция ПолучитьСуммуСтрокиТабличнойЧасти(ДанныеСтроки) Экспорт
	
	ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
	
	Возврат ДанныеСтроки;
	
КонецФункции

// Выполняем пересчет цены по валюте табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ФормаДокумента - Форма - форма документа.
//  ПредыдущаяВалюта - СправочникСсылка.Валюты - содержит ссылку на предыдущую валюту.
//  ИмяТабличнойЧасти - Строка - содержит имя пересчитываемой табличной части.
//  БратьКурсНаТекущуюДату - Булево - признак взятия курса на текущую дату
//
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ФормаДокумента, ПредыдущаяВалюта, ИмяТабличнойЧасти, БратьКурсНаТекущуюДату = Ложь) Экспорт
	
	СтруктураКурсы = ПолучитьКурсыВалют(ПредыдущаяВалюта, 
		ФормаДокумента.Объект.ВалютаДокумента, 
		?(БратьКурсНаТекущуюДату, ТекущаяДатаСеанса(), ФормаДокумента.Объект.Дата));
																   
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		// Цена.
		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
			
			СтрокаТабличнойЧасти.Цена = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
																	СтруктураКурсы.КурсНач, 
																	СтруктураКурсы.Курс, 
																	СтруктураКурсы.КратностьНач, 
																	СтруктураКурсы.Кратность);
																	
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
			
		// Сумма.	
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("Сумма") Тогда
			
			СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, 
																	СтруктураКурсы.КурсНач, 
																	СтруктураКурсы.Курс, 
																	СтруктураКурсы.КратностьНач, 
																	СтруктураКурсы.Кратность);														
					
			Если СтрокаТабличнойЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
				
				// Скидки.
				Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
					СтрокаТабличнойЧасти.Сумма = 0;
				ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
				КонецЕсли;
								
			КонецЕсли;														
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			
	        СтрокаТабличнойЧасти.СуммаНДС = ?(ФормаДокумента.Объект.СуммаВключаетНДС, 
								  				СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
								  				СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
					        		
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ФормаДокумента.Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЕсли;
        		        
	КонецЦикла; 

КонецПроцедуры // ПересчитатьЦеныТабличнойЧастиПоВалюте()

// Возвращает таблицу порядков округления на основании перечисления "Порядки округления"
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Порядок - ПеречислениеСсылка.ПорядкиОкругления - порядок перечисление
//   * Значение - значение округления
//
Функция ТаблицаПорядковОкругления() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Порядок", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядкиОкругления"));
	Результат.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Для каждого Значение Из Метаданные.Перечисления.ПорядкиОкругления.ЗначенияПеречисления Цикл
		Стр = Результат.Добавить();
		Стр.Порядок = Перечисления.ПорядкиОкругления[Значение.Имя];
		Стр.Значение = Число(Строка(Стр.Порядок));
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Возвращает минимальную цену номенклатуры по переданной структуре данных
//
// Параметры:
//  СтруктураДанных - Структура:
//   * СтруктурнаяЕдиница - СправочникСсылка.СтруктурныеЕдиницы - структурная единица по которой необходимо получить минимальную цену
//   * ДатаОбработки - Дата - дата получения цены
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура цены
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика цены
//   * Коэффициент - Число - коэффициент единицы измерения
//   * ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа
//   * СуммаВключаетНДС - Булево - признак включения суммы НДС
//
// Возвращаемое значение:
//  Число        - Минимальная цена номенклатуры
//
Функция ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанных) Экспорт
	
	МинимальнаяЦена = 0;
	
	ПриводитьКМинимальным = ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются()
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураДанных, "СтруктурнаяЕдиница");	
		
	Если ПриводитьКМинимальным Тогда
			
		МинимальныйВидЦен = ЦенообразованиеСерверПовтИсп.ПолучитьВидМинимальныхЦен(СтруктураДанных.СтруктурнаяЕдиница);
				
		СтруктураДанныхМинимальнойЦены = Новый Структура("ДатаОбработки, Номенклатура, 
			|Характеристика, Коэффициент, ВалютаДокумента");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхМинимальнойЦены, СтруктураДанных);
		
		Если НЕ ЗначениеЗаполнено(СтруктураДанныхМинимальнойЦены.Коэффициент) Тогда
			СтруктураДанныхМинимальнойЦены.Коэффициент = 1;
		КонецЕсли;
				
		Если СтруктураДанных.Свойство("СуммаВключаетНДС") Тогда
			СтруктураДанныхМинимальнойЦены.Вставить("СуммаВключаетНДС", СтруктураДанных.СуммаВключаетНДС);
		КонецЕсли;	
		
		Если СтруктураДанных.Свойство("СтавкаНДС") Тогда
			СтруктураДанныхМинимальнойЦены.Вставить("СтавкаНДС", СтруктураДанных.СтавкаНДС);
		КонецЕсли;
		
		СтруктураДанныхМинимальнойЦены.Вставить("ВидЦен", МинимальныйВидЦен);
		
		МинимальнаяЦена = ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанныхМинимальнойЦены);				
		
	КонецЕсли;
	
	Возврат МинимальнаяЦена;
	
КонецФункции

// Процедура - Добавить колонку и заполнить минимальные цены в табличной части
//
// Параметры:
//  ФормаДокумента		 - Форма - форма документа 
//  ИмяТабличнойЧасти	 - Строка - имя табличной части
//  ПрименитьОбщийВидЦен - Булево - признак применения общего вида цен 
//
Процедура ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ФормаДокумента, ИмяТабличнойЧасти, ПрименитьОбщийВидЦен = Ложь) Экспорт
	
	Если НЕ ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРазличийФорм = Новый Структура;
	СтруктураРазличийФорм.Вставить("КоллекцияФормы", Неопределено);
	СтруктураРазличийФорм.Вставить("Товары", Неопределено);
	СтруктураРазличийФорм.Вставить("ПрефиксРеквизита", "Объект.");
	СтруктураРазличийФорм.Вставить("ПрименитьОбщийВидЦен", ПрименитьОбщийВидЦен);
	СтруктураРазличийФорм.Вставить("СкладТолькоВТЧ", Ложь);
	СтруктураРазличийФорм.Вставить("СкладВШапке", Неопределено);
	СтруктураРазличийФорм.Вставить("ИмяКолонкиПоиска", "КлючСвязиМинимальныеЦены");
	СтруктураРазличийФорм.Вставить("ПрефиксТЧ", "");
	СтруктураРазличийФорм.Вставить("ПолеЦена", "Цена");
	СтруктураРазличийФорм.Вставить("Объект", "Объект");
	СтруктураРазличийФорм.Вставить("ИмяТЧНаФорме", ИмяТабличнойЧасти);
			
	ЗаполнитьСтруктуруРазличийФормПриДобавленииКолонкиМинимальнойЦеныНаФорму(ФормаДокумента, ИмяТабличнойЧасти, СтруктураРазличийФорм);	
	
	ФормаДокумента.Элементы[СтруктураРазличийФорм.ПрефиксТЧ + СтруктураРазличийФорм.ИмяТЧНаФорме + СтруктураРазличийФорм.ПолеЦена].Подсказка =
		ФормаДокумента.Элементы[СтруктураРазличийФорм.ПрефиксТЧ + СтруктураРазличийФорм.ИмяТЧНаФорме + СтруктураРазличийФорм.ПолеЦена].Подсказка
		+ Символы.ПС 
		+ НСтр("ru = '(Если цена ниже минимальной, то цвет текста будет красный)'");
	
	ДобавитьРеквизитыВКоллекциюПриДобавленииМинимальнойЦены(ФормаДокумента, ИмяТабличнойЧасти, СтруктураРазличийФорм);
	
	Объект = ФормаДокумента[СтруктураРазличийФорм.Объект];
	Товары = СтруктураРазличийФорм.Товары;	                 			
	ИмяКолонкиПоиска = СтруктураРазличийФорм.ИмяКолонкиПоиска;
	
	ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, ИмяТабличнойЧасти, СтруктураРазличийФорм);
	
	ТаблицаМинимальныхЦен = ПолучитьТаблицуТоваровСМинимальнымиЦенами(Товары, Объект.Дата, ИмяКолонкиПоиска);
	Для каждого ЗаписьМинимальныхЦен Из ТаблицаМинимальныхЦен Цикл
		
		Отбор = Новый Структура(ИмяКолонкиПоиска, ЗаписьМинимальныхЦен.КлючСвязи);
		СтрокиНаФорме = СтруктураРазличийФорм.КоллекцияФормы.НайтиСтроки(Отбор);
		
		Для каждого СтрокаНаФорме Из СтрокиНаФорме Цикл
		
			СтрокаНаФорме.МинимальнаяЦена = ЗаписьМинимальныхЦен.МинимальнаяЦена;
		
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

// Процедура - Дополнить таблицу товаров видом минимальных цен
//
// Параметры:
//  Объект				 - ДокументОбъект - документ объект
//  Товары				 - ТаблицаЗначений - табличная часть
//  ИмяТЧ				 - Строка - имя табличной части в объекте
//  СтруктураНеобязательныхПараметров - Структура:
//  	*ПрименитьОбщийВидЦен		 - Булево - признак применения общего вида минимальных цен
//  	*СкладТолькоВТЧ				 - Булево - признак поиска склада только в табличной части
//  	*СкладВШапке		 		 - Булево - признак поиска склада только в шапке документа
//
Процедура ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, ИмяТЧ = "Запасы", СтруктураНеобязательныхПараметров = Неопределено) Экспорт
	
	Если СтруктураНеобязательныхПараметров = Неопределено Тогда
		ПрименитьОбщийВидЦен 	= Ложь;
		СкладТолькоВТЧ 			= Ложь;
		СкладВШапке 			= Неопределено;
	Иначе                          
		ПрименитьОбщийВидЦен 	= СтруктураНеобязательныхПараметров.ПрименитьОбщийВидЦен;
		СкладТолькоВТЧ 			= СтруктураНеобязательныхПараметров.СкладТолькоВТЧ;
		СкладВШапке 			= СтруктураНеобязательныхПараметров.СкладВШапке;
	КонецЕсли;
	
	Колонка = Товары.Колонки.Найти("ВидМинимальныхЦен");
	Если Колонка = Неопределено Тогда
		Товары.Колонки.Добавить("ВидМинимальныхЦен", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	КонецЕсли;
	
	Если СкладВШапке = Неопределено Тогда
		СкладВШапке = ЦенообразованиеКлиентСервер.ОпределитьПоложениеСкладаВОбъекте(Объект);
	КонецЕсли;
		
	// Для документа Корректировка реализации склад указывается только в табличной части
	// Но сам реквизит есть в шапке
	Если СкладВШапке И СкладТолькоВТЧ Тогда
		СкладВШапке = Ложь;
	КонецЕсли;
		
	Если ПрименитьОбщийВидЦен Тогда  		
		ИмяРеквизита = Неопределено; 		
	Иначе   		
		ИмяРеквизита = ЦенообразованиеКлиентСервер.ОпределитьИмяРеквизитаСкладаВОбъекте(Объект); 		
	КонецЕсли;
	
	Если СкладВШапке Тогда
		СтруктурнаяЕдиница = ?(ЗначениеЗаполнено(ИмяРеквизита), Объект[ИмяРеквизита], Неопределено);
		Товары.ЗаполнитьЗначения(ЦенообразованиеСерверПовтИсп.ПолучитьВидМинимальныхЦен(СтруктурнаяЕдиница), "ВидМинимальныхЦен");
	Иначе
		
		Если ИмяТЧ = "Работы" Тогда
			
			ИмяКлючаСвязи = "КлючСвязиДляСкидокНаценок";
			
			Если ТипЗнч(Товары) = Тип("ТаблицаЗначений")
				И Товары.Колонки.Найти(ИмяКлючаСвязи) = Неопределено Тогда 				
				ИмяКлючаСвязиСтрокиТаблицы = "КлючСвязи";   				
			Иначе           				
				ИмяКлючаСвязиСтрокиТаблицы = ИмяКлючаСвязи;  				
			КонецЕсли;
			
		Иначе
			ИмяКлючаСвязи = "КлючСвязи";
			ИмяКлючаСвязиСтрокиТаблицы = "КлючСвязи";
		КонецЕсли;
		
		Для каждого СтрокаТаблицы Из Товары Цикл
						
			СтрокиДокумента = Объект[ИмяТЧ].НайтиСтроки(Новый Структура(ИмяКлючаСвязи, СтрокаТаблицы[ИмяКлючаСвязиСтрокиТаблицы]));
			Для каждого СтрокаДокумента Из СтрокиДокумента Цикл
				
			    СтруктурнаяЕдиница = ?(ЗначениеЗаполнено(ИмяРеквизита), СтрокаДокумента[ИмяРеквизита], Неопределено);
				СтрокаТаблицы.ВидМинимальныхЦен = ЦенообразованиеСерверПовтИсп.ПолучитьВидМинимальныхЦен(СтруктурнаяЕдиница);	
			
			КонецЦикла;
		КонецЦикла;				
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Изменить скидки цены по минимальному виду цен
//
// Параметры:
//  ДеревоСкидок	 - ДеревоЗначений - сформированное дерево скидок
//  Параметры		 - Структура:
//		* ТекущаяДата - Дата - дата обработки 
//		* ВалютаДокумента - СправочникСсылка.Валюты - валюта документа 
//		* СуммаВключаетНДС - Булево - признак включения НДС в сумму
//  ТаблицаДанных	 - ТаблицаЗначений - таблица содержит данные для корректировки скидки
//
Процедура ИзменитьСкидкиЦеныПоМинимальномуВидуЦен(ДеревоСкидок, Параметры, ТаблицаДанных) Экспорт
	
	Если ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются() Тогда
		
		ОграниченаМинимальнойЦеной = Ложь;
		
		Для каждого ВерхнийУровень Из ДеревоСкидок.Строки Цикл
			
			Если ВерхнийУровень.ТаблицаТоваров.Колонки.Найти("ВидМинимальныхЦен") <> Неопределено Тогда
				
				Для каждого СтрокаТовара Из ВерхнийУровень.ТаблицаТоваров Цикл
					
					СтруктураДанных = Новый Структура;
					СтруктураДанных.Вставить("ВидЦен", СтрокаТовара.ВидМинимальныхЦен);
					СтруктураДанных.Вставить("ДатаОбработки", Параметры.ТекущаяДата);
					СтруктураДанных.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
					СтруктураДанных.Вставить("Характеристика", СтрокаТовара.Характеристика);
					СтруктураДанных.Вставить("ВалютаДокумента", Параметры.ВалютаДокумента);
					СтруктураДанных.Вставить("СуммаВключаетНДС", Параметры.СуммаВключаетНДС);  
					Если ТипЗнч(СтрокаТовара.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						СтруктураДанных.Вставить("Коэффициент", СтрокаТовара.ЕдиницаИзмерения.Коэффициент);
					Иначе
						СтруктураДанных.Вставить("Коэффициент", 1);
					КонецЕсли; 
					
					МинимальнаяЦена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанных);
					
					МинимальнаяСумма = СтрокаТовара.Количество * МинимальнаяЦена;
					МаксимальнаяСкидкаСтроки = СтрокаТовара.Сумма - МинимальнаяСумма;
					
					СтруктураПоиска = Новый Структура("КлючСвязи", СтрокаТовара.КлючСвязи);
					СтрокиСкидок = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
					
					
					Если СтрокиСкидок.Количество() > 0 Тогда
						
						РаспределитьПревышениеМинимальнойЦены(СтрокиСкидок, МаксимальнаяСкидкаСтроки, МинимальнаяЦена, СтрокаТовара.СуммаСкидкиНаценки, ОграниченаМинимальнойЦеной);
						
					КонецЕсли;				
					
					Если ОграниченаМинимальнойЦеной Тогда
						
						Параметры.Вставить("СообщениеПользователю", НСтр("ru = 'Размер и сумма скидки были изменены по минимальной цене'"));
						
					КонецЕсли;
										
				КонецЦикла;
				
				ВерхнийУровень.ТаблицаДанных = ТаблицаДанных;
			КонецЕсли;			
		
		КонецЦикла; 		
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура - Удалить вид минимальных цен
//
// Параметры:
//  СтруктурнаяЕдиница	 - СправочникСсылка.СтруктурныеЕдиницы - структурная единица, по которой надо удалить вид минимальных цен
//
Процедура УдалитьВидМинимальныхЦен(СтруктурнаяЕдиница) Экспорт
	
	Запись = РегистрыСведений.ВидыМинимальныхЦенСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
	Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
	Запись.Прочитать();
	Запись.Удалить();
	
КонецПроцедуры

// Процедура - Установить вид минимальных цен
//
// Параметры:
//  СтруктурнаяЕдиница	 - СправочникСсылка.СтруктурнаяЕдиница - структурная единица, по которой надо установить вид минимальных цен
//  ВидМинимальныхЦен	 - СправочникСсылка.ВидыЦен - вид цены, который надо установить по структурной единице
//
Процедура УстановитьВидМинимальныхЦен(СтруктурнаяЕдиница, ВидМинимальныхЦен) Экспорт
	
	Запись = РегистрыСведений.ВидыМинимальныхЦенСтруктурныхЕдиниц.СоздатьМенеджерЗаписи();
	Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
	Запись.ВидМинимальныхЦен = ВидМинимальныхЦен;
	Запись.Записать(Истина);
	
КонецПроцедуры

// Процедура - Установить значения ручной скидки по минимальной цене
//
// Параметры:
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - обрабатываемая строка табличной части
//  ДеревоСкидок		 - ДеревоЗначений - сформированное дерево скидок
//  СуммаВключаетНДС	 - Булево - признак включения ставки НДС в сумму
//  РеквизитКлючСвязи	 - Строка - имя реквизита связи табличных частей, по умолчанию "КлючСвязи"
//
Процедура УстановитьЗначенияРучнойСкидкиПоМинимальнойЦене(СтрокаТабличнойЧасти, ДеревоСкидок, СуммаВключаетНДС, РеквизитКлючСвязи = "КлючСвязи") Экспорт
	
	Если ДеревоСкидок = Неопределено Тогда
		// дерево скидок не заполнено, заполнение на основании		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабличнойЧасти, "МинимальнаяЦена") Тогда
			
			Если СтрокаТабличнойЧасти.Свойство("Кратность") И СтрокаТабличнойЧасти.Свойство("Коэффициент") Тогда
				КоличествоСтроки = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Кратность * СтрокаТабличнойЧасти.Коэффициент;
			Иначе
				КоличествоСтроки = СтрокаТабличнойЧасти.Количество;
			КонецЕсли; 
			
			МинимальнаяСумма = СтрокаТабличнойЧасти.МинимальнаяЦена * КоличествоСтроки;
			
			СуммаПоСтроке = СтрокаТабличнойЧасти.Цена * КоличествоСтроки;			
			ОбщаяСуммаСкидки = СтрокаТабличнойЧасти.СуммаСкидкиНаценки + СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки;
			СуммаПревышения = Макс(МинимальнаяСумма - (СуммаПоСтроке - ОбщаяСуммаСкидки), 0);
			
			Если СуммаПревышения = 0 Тогда
				Возврат;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СуммаСкидкиНаценки = Макс(СтрокаТабличнойЧасти.СуммаСкидкиНаценки - СуммаПревышения, 0);
			
			ПараметрыРасчета = Новый Структура("РассчитатьПроцентСкидки, СуммаВключаетНДС", Истина, СуммаВключаетНДС);			
			ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
						
		КонецЕсли;
				
	Иначе
				
		Для каждого ВерхнийУровень Из ДеревоСкидок.Строки Цикл
			
			Если ВерхнийУровень.ТаблицаДанных.Количество() = 0 
				ИЛИ ВерхнийУровень.ТаблицаДанных.Колонки.Найти("КлючСвязи") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТовара = ВерхнийУровень.ТаблицаДанных.Найти(СтрокаТабличнойЧасти[РеквизитКлючСвязи], "КлючСвязи");
			Если СтрокаТовара <> Неопределено Тогда
				
				Для каждого СтрокаРасшифровки Из СтрокаТовара.Расшифровка Цикл
					
					Если СтрокаРасшифровки.ИзменитьРучнуюСкидку Тогда
						СтрокаТабличнойЧасти.СуммаСкидкиНаценки = СтрокаРасшифровки.СуммаРучнойСкидки;
					КонецЕсли;
					
				КонецЦикла;
				
				ПараметрыРасчета = Новый Структура("РассчитатьПроцентСкидки, СуммаВключаетНДС", Истина, СуммаВключаетНДС);			
				ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Установить условное оформление минимальной цены
//
// Параметры:
//  УсловноеОформление	 - УсловноеОформление - условное оформление формы
//  ИмяТабличнойЧасти	 - Строка - имя табличной части, на которую устанавливается оформление
//  Использование		 - Булево - признак включения оформления
//
Процедура УстановитьУсловноеОформлениеМинимальнойЦены(УсловноеОформление, ИмяТабличнойЧасти, Использование) Экспорт
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, 
		"Объект."+ИмяТабличнойЧасти+".Цена", 
		Новый ПолеКомпоновкиДанных("Объект."+ИмяТабличнойЧасти+".МинимальнаяЦена"), ВидСравненияКомпоновкиДанных.Меньше);
		
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяТабличнойЧасти+"Цена");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Красный);
	
	НовоеУсловноеОформление.Использование = Использование;
	
КонецПроцедуры

// Процедура - Изменить цену в таблице по порогам срабатывания
//
// Параметры:
//  ТаблицаЗаполнения	 - ТаблицаЗначений:
//   * Номенклатура 			- СправочникСсылка.Номенклатура - Номенклатура
//   * Характеристика 			- СправочникСсылка.Характеристика - Характеристика
//   * ЕдиницаИзмерения 		- СправочникСсылка.ЕдиницыИзмерения - ЕдиницаИзмерения
//   * Цена 					- Число - Цена
//   * Автор 					- СправочникСсылка.Пользователи - Автор записи
//   * НомерОчередиЦен 			- Число - Номер очереди цен
//   * ВключаяХарактеристики 	- Булево - Признак включения характеристик
//  ВидыЦен				 - СправочникСсылка.ВидыЦен - Вид цены для которого подбирается прошлая цена 
//  ДатаСреза			 - Дата - Дата по которой подбирается прошлая цена
//
Процедура ИзменитьЦенуВТаблицеПоПорогамСрабатывания(ТаблицаЗаполнения, ВидыЦен, ДатаСреза) Экспорт
	
	ДополнительныеКолонки = Новый Массив;
	ДополнительныеКолонки.Добавить("Автор");
	ДополнительныеКолонки.Добавить("НомерОчередиЦен");
	ДополнительныеКолонки.Добавить("ВключаяХарактеристики");
	ДополнительныеКолонки.Добавить("Актуальность");
	
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(10);
	
	Для каждого КолонкаИмя Из ДополнительныеКолонки Цикл
		
		Если ТаблицаЗаполнения.Колонки.Найти(КолонкаИмя) = Неопределено Тогда
			
			ТаблицаЗаполнения.Колонки.Добавить(КолонкаИмя, ТипСтрока);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ИмяКолонкиВидаЦен = "";
	Если ТаблицаЗаполнения.Колонки.Найти("ВидЦен") = Неопределено
		И ТаблицаЗаполнения.Колонки.Найти("ВидЦены") <> Неопределено Тогда
		
		ТаблицаЗаполнения.Колонки.ВидЦены.Имя = "ВидЦен";
		ИмяКолонкиВидаЦен = "ВидЦены";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТекстЗапроса = 	
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаЗаполнения.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаЗаполнения.Характеристика КАК Характеристика,
	|	ТаблицаЗаполнения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаЗаполнения.Цена КАК Цена,
	|	ВЫРАЗИТЬ(ТаблицаЗаполнения.ВидЦен КАК Справочник.ВидыЦен) КАК ВидЦен,
	|	ТаблицаЗаполнения.Автор КАК Автор,
	|	ТаблицаЗаполнения.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ТаблицаЗаполнения.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	ТаблицаЗаполнения.Актуальность КАК Актуальность
	|ПОМЕСТИТЬ ТаблицаЗаполнения
	|ИЗ
	|	&ТаблицаЗаполнения КАК ТаблицаЗаполнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЦенПорогиСрабатывания.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВидыЦенПорогиСрабатывания.ПорогСрабатыванияПриУвеличении КАК ПорогСрабатыванияПриУвеличении,
	|	ВидыЦенПорогиСрабатывания.ПорогСрабатыванияПриУменьшении КАК ПорогСрабатыванияПриУменьшении,
	|	ВидыЦенПорогиСрабатывания.Ссылка.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПорогиСрабатывания
	|ИЗ
	|	Справочник.ВидыЦен.ПорогиСрабатывания КАК ВидыЦенПорогиСрабатывания
	|ГДЕ
	|	ВидыЦенПорогиСрабатывания.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.ВидЦен
	|			ИЗ
	|				ТаблицаЗаполнения КАК Т)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка),
	|	ВидыЦен.ПорогСрабатыванияПриУвеличении,
	|	ВидыЦен.ПорогСрабатыванияПриУменьшении,
	|	ВидыЦен.Ссылка
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.ВидЦен
	|			ИЗ
	|				ТаблицаЗаполнения КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаполнения.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаполнения.Номенклатура.ЦеноваяГруппа КАК НоменклатураЦеноваяГруппа,
	|	ТаблицаЗаполнения.Характеристика КАК Характеристика,
	|	ТаблицаЗаполнения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаЗаполнения.Цена КАК Цена,
	|	ТаблицаЗаполнения.ВидЦен КАК ВидЦен,
	|	ТаблицаЗаполнения.ВидЦен.ПорогСрабатыванияПриУменьшении КАК ПорогСрабатыванияПриУменьшении,
	|	ТаблицаЗаполнения.ВидЦен.ПорогСрабатыванияПриУвеличении КАК ПорогСрабатыванияПриУвеличении,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаСтарая,
	|	100 * ЕСТЬNULL(ТаблицаЗаполнения.Цена, 0) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 1) - 100 КАК ПроцентИзменения,
	|	ТаблицаЗаполнения.Автор КАК Автор,
	|	ТаблицаЗаполнения.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ТаблицаЗаполнения.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	ТаблицаЗаполнения.Актуальность КАК Актуальность
	|ПОМЕСТИТЬ ТаблицаСЦенами
	|ИЗ
	|	ТаблицаЗаполнения КАК ТаблицаЗаполнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаСреза,
	|				(Номенклатура, Характеристика, ВидЦен) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗаполнения.Номенклатура КАК Номенклатура,
	|						ТаблицаЗаполнения.Характеристика КАК Характеристика,
	|						ТаблицаЗаполнения.ВидЦен КАК ВидЦен
	|					ИЗ
	|						ТаблицаЗаполнения КАК ТаблицаЗаполнения)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ТаблицаЗаполнения.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ТаблицаЗаполнения.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|			И ТаблицаЗаполнения.ВидЦен = ЦеныНоменклатурыСрезПоследних.ВидЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСЦенами.Номенклатура КАК Номенклатура,
	|	ТаблицаСЦенами.НоменклатураЦеноваяГруппа КАК НоменклатураЦеноваяГруппа,
	|	ТаблицаСЦенами.Характеристика КАК Характеристика,
	|	ТаблицаСЦенами.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаСЦенами.Цена КАК Цена,
	|	ТаблицаСЦенами.ВидЦен КАК ВидЦен,
	|	ТаблицаСЦенами.ЦенаСтарая КАК ЦенаСтарая,
	|	ТаблицаСЦенами.ПроцентИзменения КАК ПроцентИзменения,
	|	ЕСТЬNULL(ПорогиСрабатывания.ПорогСрабатыванияПриУвеличении, ТаблицаСЦенами.ПорогСрабатыванияПриУвеличении) КАК ПорогСрабатыванияПриУвеличении,
	|	ЕСТЬNULL(ПорогиСрабатывания.ПорогСрабатыванияПриУменьшении, ТаблицаСЦенами.ПорогСрабатыванияПриУменьшении) КАК ПорогСрабатыванияПриУменьшении,
	|	&ДатаСреза КАК Период,
	|	ТаблицаСЦенами.Автор КАК Автор,
	|	ТаблицаСЦенами.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ТаблицаСЦенами.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	ТаблицаСЦенами.Актуальность КАК Актуальность
	|ИЗ
	|	ТаблицаСЦенами КАК ТаблицаСЦенами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорогиСрабатывания КАК ПорогиСрабатывания
	|		ПО ТаблицаСЦенами.ВидЦен = ПорогиСрабатывания.Ссылка
	|			И ТаблицаСЦенами.НоменклатураЦеноваяГруппа = ПорогиСрабатывания.ЦеноваяГруппа";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("ТаблицаЗаполнения", ТаблицаЗаполнения); 
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ТаблицаЗаполнения = Результат.Выгрузить();
		
		Для каждого СтрокаВыборки Из ТаблицаЗаполнения Цикл
			
			ПроцентИзменения = СтрокаВыборки.ПроцентИзменения;
			  
			Если (ПроцентИзменения > 0 
				И ПроцентИзменения < СтрокаВыборки.ПорогСрабатыванияПриУвеличении)
				ИЛИ (ПроцентИзменения < 0 
					И -ПроцентИзменения < СтрокаВыборки.ПорогСрабатыванияПриУменьшении) Тогда
				
				СтрокаВыборки.Цена = СтрокаВыборки.ЦенаСтарая;
				
			КонецЕсли;
		
		КонецЦикла;
				
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИмяКолонкиВидаЦен) Тогда
		
		ТаблицаЗаполнения.Колонки.ВидЦен.Имя = ИмяКолонкиВидаЦен;
		
	КонецЕсли;
			
КонецПроцедуры

// Процедура - Удаляет записи из таблицы, если цена старая равняется цене новой для последующей записи
//
// Параметры:
//  ТаблицаНоменклатуры	 - ТаблицаЗначений:
//		* Номенклатура - СправочникСсылка.Номенклатура - номенклатура записи
//		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика
//		* ВидЦены - СправочникСсылка.ВидыЦен - вид цены
//		* ЦенаСтарая - Число - старая цена
//		* Цена - Число - новая цена
//
Процедура ИсключитьЗаписиСтарыхЦенИзТаблицы(ТаблицаНоменклатуры) Экспорт
	
	ИмяКолонкиВидаЦен = "";
	Если ТаблицаНоменклатуры.Колонки.Найти("ВидЦен") = Неопределено
		И ТаблицаНоменклатуры.Колонки.Найти("ВидЦены") <> Неопределено Тогда
		
		ТаблицаНоменклатуры.Колонки.ВидЦены.Имя = "ВидЦен";
		ИмяКолонкиВидаЦен = "ВидЦены";
		
	КонецЕсли;
	
  	ПоследняяЗапись = ТаблицаНоменклатуры.Количество() - 1;
	Пока ПоследняяЗапись >= 0 Цикл
		
		ТекущаяСтрока = ТаблицаНоменклатуры[ПоследняяЗапись];
		
		Если ТекущаяСтрока.ЦенаСтарая = ТекущаяСтрока.Цена Тогда
				
			ТаблицаНоменклатуры.Удалить(ТекущаяСтрока);
			
		КонецЕсли;
		
		ПоследняяЗапись = ПоследняяЗапись - 1;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИмяКолонкиВидаЦен) Тогда
		
		ТаблицаНоменклатуры.Колонки.ВидЦен.Имя = ИмяКолонкиВидаЦен;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет сериализацию объекта в XML
//
// Параметры:
//  Значение  - Произвольный - объект, который необходимо сериализовать в XML.
//
// Возвращаемое значение:
//   Строка   - объект, сериализованный в XML.
//
Функция ПолучитьXML(Значение) Экспорт
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции  

// Функция - Получить настройки компоновки по умолчанию
//
// Параметры:
//  СхемаКомпоновкиДанных	 - СхемаКомпоновкиДанных - схема компоновки данных
// 
// Возвращаемое значение:
//   - НастройкиКомпоновкиДанных
//
Функция ПолучитьНастройкиКомпоновкиПоУмолчанию(СхемаКомпоновкиДанных) Экспорт

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	Попытка
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение настройки компоновки по умолчанию'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	
	Возврат КомпоновщикНастроек.ПолучитьНастройки();
	
КонецФункции

// Возвращает имена и типы полей, которые должны обязательно присутствовать.
// в СКД, используемой для заполнения цен по данным ИБ.
//
// Возвращаемое значение:
//	 Соответствие - В ключах содержатся имена полей. В значениях - типы полей.
//
Функция ПолучитьОбязательныеПоляСхемыКомпоновкиДанных() Экспорт
	
	Поля = Новый Соответствие;
	
	Поля.Вставить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		Поля.Вставить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Поля.Вставить("Цена",   Новый ОписаниеТипов("Число"));
	Поля.Вставить("Период",   Новый ОписаниеТипов("Дата"));
	Поля.Вставить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"));	
	Поля.Вставить("ЕдиницаИзмерения", Новый ОписаниеТипов(МассивТипов));
	
	Возврат Поля;
	
КонецФункции

// Проверяет схему компоновки данных на соответствие ограничениям, необходимым
// для ее использования при расчете цен.
//
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема, которую необходимо проверить.
//  СообщениеОбОшибке     - Строка - содержит вводную часть сообщения об ошибке.
//
// Возвращаемое значение:
//  Булево - Истина, если проверка пройдена успешно.
//
Функция ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, СообщениеОбОшибке = Неопределено) Экспорт
	
	Поля = ПолучитьОбязательныеПоляСхемыКомпоновкиДанных();
	
	Возврат ПроверитьСхемуКомпоновкиДанныхПоОбязательнымПолям(СхемаКомпоновкиДанных, Поля, СообщениеОбОшибке);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция - Получить описание параметров компоновщика настроек
//
// Параметры:
//  СтрокаДереваВидаЦен					 - СтрокаДереваЗначений - строка дерева значений дерева видов цен
//  АдресХранилищаНастройкиКомпоновщика	 - Строка - адрес хранилища настроек
// 
// Возвращаемое значение:
//   - Строка
//
Функция ПолучитьОписаниеПараметровКомпоновщикаНастроек(СтрокаДереваВидаЦен, АдресХранилищаНастройкиКомпоновщика) Экспорт
	
	ОписаниеПараметров = "";
	НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновщика);
	ТребуетсяЗаполнениеПараметра = Ложь;
	Для Каждого Параметр Из НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы Цикл
		
		ЗначениеПараметра = Неопределено;
		Если НЕ Параметр.Использование Тогда
			Продолжить;	
		КонецЕсли;
		
		ЗначениеПараметра = Параметр.Значение;
		
		ОписаниеПараметров = ?(ЗначениеЗаполнено(ОписаниеПараметров), ОписаниеПараметров, НСтр("ru = 'Параметры:'") + " ")
		                   + ?(Не ЗначениеЗаполнено(ОписаниеПараметров), "" , ", ")
		                   + Параметр.Параметр
		                   + " = "
		                   + ?(ЗначениеЗаполнено(ЗначениеПараметра), Строка(ЗначениеПараметра), НСтр("ru = '<не заполнен>'")); 
						   
		Если НЕ ТребуетсяЗаполнениеПараметра Тогда
			
			ТребуетсяЗаполнениеПараметра = НЕ ЗначениеЗаполнено(ЗначениеПараметра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеПараметров = ОписаниеПараметров
	                   + ?(ЗначениеЗаполнено(Строка(НастройкиКомпоновкиДанных.Отбор)),
	                      " " + НСтр("ru = 'Отбор:'") + " " + Строка(НастройкиКомпоновкиДанных.Отбор),
	                      "");
	СтрокаДереваВидаЦен.ТребуетсяЗаполнениеПараметра = ТребуетсяЗаполнениеПараметра;
	
	Возврат ОписаниеПараметров;
	
КонецФункции

// Процедура - Установить параметры динамического списка видов цен
//
// Параметры:
//  Список	 - ДинамическийСписок - Список видов цен форм выбора и списка
//
Процедура УстановитьПараметрыДинамическогоСпискаВидовЦен(Список) Экспорт 
	
	Список.Параметры.УстановитьЗначениеПараметра("Статический", НСтр("ru = 'Статический'"));
	Список.Параметры.УстановитьЗначениеПараметра("ПроизвольныйЗапрос", НСтр("ru = 'Произвольный запрос'"));
	Список.Параметры.УстановитьЗначениеПараметра("Процент", НСтр("ru = 'Процент'"));
	Список.Параметры.УстановитьЗначениеПараметра("Формула", НСтр("ru = 'Формула'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
 
// Проверяет схему компоновки данных на соответствие ограничениям, необходимым
// для ее использования при расчете цен.
//
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема, которую необходимо проверить.
//  СообщениеОбОшибке     - Строка - Строка, содержит вводную часть сообщения об ошибке.
//
// Возвращаемое значение:
//  Булево - Истина, если проверка пройдена успешно.
//
Функция ПроверитьСхемуКомпоновкиДанныхПоОбязательнымПолям(СхемаКомпоновкиДанных, Поля, СообщениеОбОшибке = Неопределено)
	
	Результат = Истина;
	
	Если СхемаКомпоновкиДанных <> Неопределено И СхемаКомпоновкиДанных.НаборыДанных.Количество() = 1 Тогда
		
		РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
		
		Для Каждого Поле Из Поля Цикл
			Если Не ПроверитьПолеНабораДанныхСКД(РабочийНаборДанных, Поле.Ключ, Поле.Значение, СообщениеОбОшибке) Тогда
				Результат = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ОбщегоНазначения.СообщитьПользователю(?(ЗначениеЗаполнено(СообщениеОбОшибке), СообщениеОбОшибке + ": ", "") 
			+ НСтр("ru='Схема компоновки данных для заполнения цен должна содержать один набор данных.'"));
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТаблицуТоваровСМинимальнымиЦенами(ТаблицаМинимальныхЦен, ДатаОбработки, ИмяПоляКлюч = "КлючСвязи")
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.Номенклатура КАК Номенклатура,
	               |	Таблица.Характеристика КАК Характеристика,
	               |	Таблица.#КлючСвязи КАК КлючСвязи,
	               |	Таблица.МинимальнаяЦена КАК МинимальнаяЦена,
	               |	Таблица.ВидМинимальныхЦен КАК ВидМинимальныхЦен
	               |ПОМЕСТИТЬ Таблица
	               |ИЗ
	               |	&ТаблицаМинимальныхЦен КАК Таблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таблица.Номенклатура КАК Номенклатура,
	               |	Таблица.Характеристика КАК Характеристика,
	               |	Таблица.КлючСвязи КАК КлючСвязи,
	               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, Таблица.МинимальнаяЦена) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК МинимальнаяЦена,
	               |	Таблица.ВидМинимальныхЦен КАК ВидМинимальныхЦен
	               |ИЗ
	               |	Таблица КАК Таблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |				&ДатаОбработки,
	               |				(Номенклатура, Характеристика, ВидЦен) В
	               |					(ВЫБРАТЬ
	               |						Таблица.Номенклатура КАК Номенклатура,
	               |						Таблица.Характеристика КАК Характеристика,
	               |						Таблица.ВидМинимальныхЦен КАК ВидМинимальныхЦен
	               |					ИЗ
	               |						Таблица КАК Таблица)) КАК ЦеныНоменклатурыСрезПоследних
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсыВалютСрезПоследних
	               |			ПО ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены = КурсыВалютСрезПоследних.Валюта
	               |		ПО Таблица.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |			И Таблица.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	               |			И Таблица.ВидМинимальныхЦен = ЦеныНоменклатурыСрезПоследних.ВидЦен";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#КлючСвязи", ИмяПоляКлюч);
	
	Запрос.УстановитьПараметр("ТаблицаМинимальныхЦен", ТаблицаМинимальныхЦен);
	Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации() Экспорт
	
	Возврат "РасчетОчередиЦен";
	
КонецФункции

Процедура ОтразитьЦеныКонтрагентов(ТаблицаНовыеЦены, ТаблицаТекущиеЦены, НаборЗаписейРегистра) Экспорт
	
	Если ТаблицаНовыеЦены.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОтборЦен = Новый Структура("ВидЦенКонтрагента, Номенклатура, Характеристика");
	Для каждого СтрокаТаблицы Из ТаблицаНовыеЦены Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборЦен, СтрокаТаблицы);
		
		МассивТекущихЦен = ТаблицаТекущиеЦены.НайтиСтроки(ОтборЦен);
		Если МассивТекущихЦен.Количество() > 0 Тогда
			
			Для каждого СтрокаМассива Из МассивТекущихЦен Цикл
				
				ТаблицаТекущиеЦены.Удалить(СтрокаМассива);
				
			КонецЦикла;
			
		КонецЕсли;
		
		НоваяЗапись = ТаблицаТекущиеЦены.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
		
	КонецЦикла; 
	
	НаборЗаписейРегистра.Загрузить(ТаблицаТекущиеЦены);
	НаборЗаписейРегистра.Записать(Истина);
	
КонецПроцедуры

Функция ЗаписьОЦенеСуществует(КлючЗаписи) Экспорт
	
	СтруктураВозврата = Новый Структура("ЗаписьСуществует, Период, ВидЦен, Номенклатура, Характеристика", Ложь);
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, КлючЗаписи);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РС.Период
	|	,РС.Актуальность
	|	,РС.ВидЦен
	|	,РС.Номенклатура
	|	,РС.Характеристика
	|	,РС.ЕдиницаИзмерения
	|	,РС.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК РС
	|ГДЕ
	|	РС.Период = &Период
	|	И РС.ВидЦен = &ВидЦен
	|	И РС.Номенклатура = &Номенклатура
	|	И РС.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("Период", НачалоДня(КлючЗаписи.Период));
	Запрос.УстановитьПараметр("ВидЦен", КлючЗаписи.ВидЦен);
	Запрос.УстановитьПараметр("Номенклатура", КлючЗаписи.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", КлючЗаписи.Характеристика);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	СтруктураВозврата.ЗаписьСуществует = (ТаблицаРезультат.Количество() > 0);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ЗаписьОЦенеКонтрагентаСуществует(КлючЗаписи) Экспорт
	
	СтруктураВозврата = Новый Структура("ЗаписьСуществует, Период, ВидЦенКонтрагента, Номенклатура, Характеристика", Ложь);
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, КлючЗаписи);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РС.Период
	|	,РС.Актуальность
	|	,РС.ВидЦенКонтрагента
	|	,РС.Номенклатура
	|	,РС.Характеристика
	|	,РС.ЕдиницаИзмерения
	|	,РС.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов КАК РС
	|ГДЕ
	|	РС.Период = &Период
	|	И РС.ВидЦенКонтрагента = &ВидЦенКонтрагента
	|	И РС.Номенклатура = &Номенклатура
	|	И РС.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("Период",				НачалоДня(КлючЗаписи.Период));
	Запрос.УстановитьПараметр("ВидЦенКонтрагента",	КлючЗаписи.ВидЦенКонтрагента);
	Запрос.УстановитьПараметр("Номенклатура",		КлючЗаписи.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",		КлючЗаписи.Характеристика);
	
	ТаблицаРезультат = Запрос.Выполнить();
	СтруктураВозврата.ЗаписьСуществует = НЕ ТаблицаРезультат.Пустой();
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ОбновитьПризнакиАктуальностиВидовЦен()
	
	// Актуальность не ключевой признак, поэтому использование блокировок считаем не целесообразным...
	
	Запрос			= Новый Запрос;
	Запрос.Текст	= 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ВидыЦенДинамические.Ссылка КАК Ссылка
	|	,ВидыЦенДинамические.ЦеныАктуальны КАК ЦеныАктуальны
	|ПОМЕСТИТЬ ВидыЦенДинамические
	|ИЗ Справочник.ВидыЦен КАК ВидыЦенДинамические
	|ГДЕ ВидыЦенДинамические.ТипВидаЦен <> Значение(Перечисление.ТипыВидовЦен.Статический)
	|
	|;Выбрать РАЗЛИЧНЫЕ
	|	ВидыЦенОчередиЦен.ВидЦенРасчетный КАК Ссылка
	|ПОМЕСТИТЬ ВидыЦенОчередиЦен
	|ИЗ РегистрСведений.ОчередьРасчетаЦен КАК ВидыЦенОчередиЦен
	|
	|;Выбрать 
	|	ВидыЦенДинамические.Ссылка КАК ВидЦен
	|	,ВидыЦенДинамические.ЦеныАктуальны КАК ЦеныАктуальны
	|	,Выбор КОГДА ВидыЦенОчередиЦен.Ссылка ЕСТЬ NULL
	|		ТОГДА ЛОЖЬ 
	|		ИНАЧЕ ИСТИНА КОНЕЦ КАК ЕстьЗаписиОчередиЦен
	|ИЗ ВидыЦенДинамические КАК ВидыЦенДинамические
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВидыЦенОчередиЦен КАК ВидыЦенОчередиЦен
	|	ПО ВидыЦенДинамические.Ссылка = ВидыЦенОчередиЦен.Ссылка
	|
	|;Выбрать ПЕРВЫЕ 1 * ИЗ ВидыЦенОчередиЦен";
	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаВидовЦен = РезультатЗапроса[2].Выгрузить();
	Для каждого ЗаписьОВидеЦен Из ТаблицаВидовЦен Цикл
		
		Если НЕ ЗначениеЗаполнено(ЗаписьОВидеЦен.ВидЦен) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗаписьОВидеЦен.ЦеныАктуальны = Истина
			И ЗаписьОВидеЦен.ЕстьЗаписиОчередиЦен = Истина Тогда
			
			ИзменитьПризнакАктуальностиВидаЦен(ЗаписьОВидеЦен.ВидЦен, Ложь);
			
		КонецЕсли;
			
		Если ЗаписьОВидеЦен.ЦеныАктуальны = Ложь
			И ЗаписьОВидеЦен.ЕстьЗаписиОчередиЦен = Ложь Тогда
			
			ИзменитьПризнакАктуальностиВидаЦен(ЗаписьОВидеЦен.ВидЦен, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатЗапроса[3].Пустой() Тогда
		
		СброситьРабочийНомерОчередиЦен();
		
		УстановитьИспользованиеРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчередьРасчетаЦен, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПризнакАктуальностиВидаЦен(ВидЦен, ЦеныАктуальны)

	ВидЦенОбъект 				= ВидЦен.ПолучитьОбъект();
	ВидЦенОбъект.ЦеныАктуальны	= ЦеныАктуальны;
	ВидЦенОбъект.КоличествоПопытокСлужебный = 0;
	ВидЦенОбъект.ОписаниеОшибки	= "";
	
	Попытка
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидЦенОбъект, Ложь, Ложь);
		
	Исключение
		
		ТекстОшибки = НСтр("ru ='Ошибка обновления свойства ""Цены актуальны"" вида цен [%1]'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ВидЦен);
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ВидыЦен, ВидЦен, ТекстОшибки);
		
	КонецПопытки;
	
	
КонецПроцедуры

Процедура СнятьПризнакНовинка() Экспорт
	
	// Расписание 14 400 секунд, т.е. 2 раза в течении 8 часов
	
	СрокДействияФлагаНовинка = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос 			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ СпрНоменклатура.Ссылка ИЗ Справочник.Номенклатура КАК СпрНоменклатура ГДЕ СпрНоменклатура.ЭтоНовинка И СпрНоменклатура.СрокДействияФлагаНовинка <= &СрокДействияФлагаНовинка И СпрНоменклатура.СрокДействияФлагаНовинка <> ДАТАВРЕМЯ(01, 01, 01, 00, 00, 00)";
	Запрос.УстановитьПараметр("СрокДействияФлагаНовинка", СрокДействияФлагаНовинка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		МассивНоменклатуры = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Номенклатура");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		Попытка
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			
			Блокировка.Заблокировать();
			Для каждого ЭлементМассива Из МассивНоменклатуры Цикл
				
				СправочникОбъект = ЭлементМассива.ПолучитьОбъект();
				СправочникОбъект.ЭтоНовинка = Ложь;
				СправочникОбъект.Записать();
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			Комментарий = НСтр("ru = 'Ошибка работы фонового регламентного задания: СнятиеПризнакаНовинка'")
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации("ПризнакНовинка", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , Комментарий);
			ОтменитьТранзакцию();
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПересчетЕдиницИзмерения(ЕдиницаИзмеренияИсточник, ЕдиницаИзмеренияПриемник, РезультатСтрокой = Ложь) Экспорт
	
	КоэффициентИсточник = 0;
	Если ТипЗнч(ЕдиницаИзмеренияИсточник) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		
		КоэффициентИсточник = 1;
		
	ИначеЕсли ТипЗнч(ЕдиницаИзмеренияИсточник) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		
		КоэффициентИсточник = ЕдиницаИзмеренияИсточник.Коэффициент;
		
	КонецЕсли;
	
	Если КоэффициентИсточник = 0 Тогда
		
		КоэффициентИсточник = 1;
		
	КонецЕсли;
	
	КоэффициентПриемник = 0;
	Если ТипЗнч(ЕдиницаИзмеренияПриемник) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		
		КоэффициентПриемник = 1;
		
	ИначеЕсли ТипЗнч(ЕдиницаИзмеренияПриемник) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		
		КоэффициентПриемник = ЕдиницаИзмеренияПриемник.Коэффициент;
		
	КонецЕсли;
	
	Если КоэффициентПриемник = 0 Тогда
		
		КоэффициентПриемник = 1;
		
	КонецЕсли;
	
	Если РезультатСтрокой = Истина Тогда
		
		Возврат Формат(КоэффициентПриемник / КоэффициентИсточник, "ЧЦ=20; ЧДЦ=8; ЧРД=.; ЧГ=");
		
	Иначе
		
		Возврат КоэффициентПриемник / КоэффициентИсточник;
		
	КонецЕсли;
	
КонецФункции

Функция УстановитьРабочийНомерОчередиЦен() Экспорт
	
	РабочийНомерОчередиЦен = Константы.ВакантныйНомерОчередиРасчетаЦен.Получить();
	Попытка
		
		Константы.ВакантныйНомерОчередиРасчетаЦен.Установить(РабочийНомерОчередиЦен + 1);
		Возврат РабочийНомерОчередиЦен;
		
	Исключение
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецФункции

Процедура СброситьРабочийНомерОчередиЦен()
	
	Попытка
		
		Константы.ВакантныйНомерОчередиРасчетаЦен.Установить(0);
		
	Исключение
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ДеревоЗначенийВТаблицуЗначений(Дерево, Таблица) Экспорт
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
			ДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьНоменклатуруНаУзлахСайтаИШтрихМ(Товары) Экспорт
	
	Если ОбменССайтом.ОбменДаннымиССайтомВключен() Тогда
		
		Узлы = ОбменССайтом.ПолучитьМассивУзловДляРегистрации(Истина,Ложь, Ложь);
		Для каждого Товар Из Товары Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(Узлы, Товар);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменССерверомШтрихМ") Тогда
		
		Узел = ОбменСКассовымСерверомШтрихМПереопределяемый.УзелТовары();
		Для каждого Товар Из Товары Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, Товар);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет набор данных СКД, что он содержит заданное поле соответствующего типа
//
// Параметры:
//  НаборДанных         - набор данных, который необходимо проверить
//  ИмяПоля             - Строка, содержащее имя поля
//  ТипЗначения         - ОписаниеТипов, тип который должно иметь поле СКД
//  СообщениеОбОшибке   - Строка, содержит вводную часть сообщения об ошибке.
//
// Возвращаемое значение:
//  Булево - Истина, если набор данных содержит требуемое поле.
//
Функция ПроверитьПолеНабораДанныхСКД(НаборДанных, ИмяПоля, ТипЗначения, СообщениеОбОшибке = Неопределено)
	
	Поле = НаборДанных.Поля.Найти(ИмяПоля);
	
	Если Поле = Неопределено Тогда
		Результат = Ложь;
	Иначе
		ТипыПоля       = Поле.ТипЗначения.Типы();
		ДопустимыеТипы = ТипЗначения.Типы();
				
		Результат = Истина;
		Если Поле <> Неопределено И ТипыПоля.Количество() = ДопустимыеТипы.Количество() Тогда
			
			Для Каждого Тип Из ДопустимыеТипы Цикл
				Если ТипыПоля.Найти(Тип) = Неопределено Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Результат Тогда
		ОбщегоНазначения.СообщитьПользователю(?(ЗначениеЗаполнено(СообщениеОбОшибке), СообщениеОбОшибке + ": ", "") 
			+ СтрЗаменить(СтрЗаменить(НСтр("ru='Схема компоновки данных для заполнения цен должна содержать поле ""%ИмяПоля%"" 
							|с обязательным указанием типа значения ""%ТипЗначения%"".'"), "%ИмяПоля%", ИмяПоля), "%ТипЗначения%", ТипЗначения));
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабЧасти)
	
	Если СтрокаТабЧасти.Свойство("Количество") И СтрокаТабЧасти.Свойство("Цена") Тогда
		СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Количество * СтрокаТабЧасти.Цена;
	КонецЕсли;
	
	Если СтрокаТабЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
		Если СтрокаТабЧасти.ПроцентСкидкиНаценки = 100 Тогда
			СтрокаТабЧасти.Сумма = 0;
		ИначеЕсли СтрокаТабЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабЧасти.Количество <> 0 Тогда
			СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Сумма * (1 - СтрокаТабЧасти.ПроцентСкидкиНаценки / 100);
		КонецЕсли;
	КонецЕсли;	

	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабЧасти.СтавкаНДС);
			
	Если ФормаДокумента.Объект.Свойство("СуммаВключаетНДС") Тогда
		СтрокаТабЧасти.СуммаНДС = ?(
			ФормаДокумента.Объект.СуммаВключаетНДС, 
			СтрокаТабЧасти.Сумма - (СтрокаТабЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
			СтрокаТабЧасти.Сумма * СтавкаНДС / 100);
		СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + ?(ФормаДокумента.Объект.СуммаВключаетНДС, 0, СтрокаТабЧасти.СуммаНДС);
	Иначе
		СтрокаТабЧасти.СуммаНДС = СтрокаТабЧасти.Сумма * СтавкаНДС / 100;
		СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + СтрокаТабЧасти.СуммаНДС;
	КонецЕсли;	
	
	// АвтоматическиеСкидки
	Если СтрокаТабЧасти.Свойство("ПроцентАвтоматическойСкидки") Тогда
		СтрокаТабЧасти.ПроцентАвтоматическойСкидки = 0;
		СтрокаТабЧасти.СуммаАвтоматическойСкидки = 0;
	КонецЕсли;
	Если СтрокаТабЧасти.Свойство("ОбщаяСуммаСкидкиБольшеСуммы") Тогда
		СтрокаТабЧасти.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры // РассчитатьСуммуСтрокиТабличнойЧасти()

Процедура ЗаписатьЦеныИОчиститьОчередьЦенПоследовательно(ПериодЗаписи, ВидЦенРасчетный, НомерОчередиЦен, ЗаписиРегистраЗаПериода)
	
	МассивНоменклатуры = Новый Массив;
	МассивХарактеристик = Новый Массив;
	МассивНоменклатуры = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗаписиРегистраЗаПериода.ВыгрузитьКолонку("Номенклатура"));
	Для каждого Номенклатура Из МассивНоменклатуры Цикл
		
		ЗаписиПоНоменклатуре = ЗаписиРегистраЗаПериода.Скопировать(ЗаписиРегистраЗаПериода.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура)));
		МассивХарактеристик = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗаписиПоНоменклатуре.ВыгрузитьКолонку("Характеристика"));		
		Для каждого Характеристика Из МассивХарактеристик Цикл
			
			ЦеныНоменклатуры = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
			ЦеныНоменклатуры.Отбор.Период.Установить(ПериодЗаписи, Истина);
			ЦеныНоменклатуры.Отбор.ВидЦен.Установить(ВидЦенРасчетный, Истина);	
			ЦеныНоменклатуры.Отбор.Номенклатура.Установить(Номенклатура, Истина);
			ЦеныНоменклатуры.Отбор.Характеристика.Установить(Характеристика, Истина);
			НаборЗаписей = ЗаписиРегистраЗаПериода.Скопировать(ЗаписиРегистраЗаПериода.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика)));			
			ЦеныНоменклатуры.Загрузить(НаборЗаписей);
			ЦеныНоменклатуры.ДополнительныеСвойства.Вставить("РегистрацияНаУзлах", Ложь);
			ЦеныНоменклатуры.ДополнительныеСвойства.Вставить("РабочийНомерОчередиЦен", НомерОчередиЦен);
			ЦеныНоменклатуры.Записать(Истина);				
			
		КонецЦикла; 	
	КонецЦикла;
	
	ОчередьРасчетаЦен = РегистрыСведений.ОчередьРасчетаЦен.СоздатьНаборЗаписей();
	ОчередьРасчетаЦен.Отбор.ПериодЗаписи.Установить(ПериодЗаписи, Истина);
	ОчередьРасчетаЦен.Отбор.ВидЦенРасчетный.Установить(ВидЦенРасчетный, Истина);
	ОчередьРасчетаЦен.Отбор.НомерОчередиЦен.Установить(НомерОчередиЦен, Истина);
	ОчередьРасчетаЦен.Очистить();
	ОчередьРасчетаЦен.Записать();

КонецПроцедуры

Процедура ЗаписатьЦеныИОчиститьОчередьЦенОднимНабором(ПериодЗаписи, ВидЦенРасчетный, НомерОчередиЦен, ЗаписиРегистраЗаПериода)
	
	НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ПериодЗаписи, Истина);
	НаборЗаписей.Отбор.ВидЦен.Установить(ВидЦенРасчетный, Истина);
	НаборЗаписей.Загрузить(ЗаписиРегистраЗаПериода); 
	НаборЗаписей.ДополнительныеСвойства.Вставить("РегистрацияНаУзлах", Ложь);
	НаборЗаписей.ДополнительныеСвойства.Вставить("РабочийНомерОчередиЦен", НомерОчередиЦен);
	НаборЗаписей.Записать(Истина);
	
	ОчередьРасчетаЦен = РегистрыСведений.ОчередьРасчетаЦен.СоздатьНаборЗаписей();
	ОчередьРасчетаЦен.Отбор.ПериодЗаписи.Установить(ПериодЗаписи, Истина);
	ОчередьРасчетаЦен.Отбор.ВидЦенРасчетный.Установить(ВидЦенРасчетный, Истина);
	ОчередьРасчетаЦен.Отбор.НомерОчередиЦен.Установить(НомерОчередиЦен, Истина);
	ОчередьРасчетаЦен.Очистить();
	ОчередьРасчетаЦен.Записать(Истина);
	
КонецПроцедуры

Процедура ДополнитьКомментарийРасшифровкиСкидкиОграничениемМинимальнойЦены(Комментарий, МинимальнаяЦена)
	
	ФразаОграничения = НСтр("ru = 'ограничение минимальной ценой'");
	Если СтрНайти(Комментарий, ФразаОграничения) = 0 Тогда
		Комментарий = СтрШаблон("%1 (%2 %3)", Комментарий, ФразаОграничения, МинимальнаяЦена);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруРазличийФормПриДобавленииКолонкиМинимальнойЦеныНаФорму(ФормаДокумента, ИмяТабличнойЧасти, СтруктураРазличийФорм)
	
	Если ФормаДокумента.ИмяФормы = "Документ.ПланПродаж.Форма.ФормаДокумента" Тогда	
		
		СтруктураРазличийФорм.Товары = ФормаДокумента[ИмяТабличнойЧасти].Выгрузить();
		СтруктураРазличийФорм.Товары.Колонки.ОбъектПланирования.Имя = "Номенклатура";
		СтруктураРазличийФорм.ПрефиксРеквизита = "";
		СтруктураРазличийФорм.КоллекцияФормы = ФормаДокумента[СтруктураРазличийФорм.ИмяТЧНаФорме];
		
	ИначеЕсли ФормаДокумента.ИмяФормы = "Документ.ЗаказПокупателя.Форма.ФормаКалькуляции" Тогда
		
		СтруктураРазличийФорм.ИмяТЧНаФорме = "КалькуляцияНаФорме";
		СтруктураРазличийФорм.Товары = ФормаДокумента[СтруктураРазличийФорм.ИмяТЧНаФорме].Выгрузить();
		СтруктураРазличийФорм.ПрефиксРеквизита = "";
		СтруктураРазличийФорм.КоллекцияФормы = ФормаДокумента[СтруктураРазличийФорм.ИмяТЧНаФорме];
		СтруктураРазличийФорм.ПолеЦена = "Сумма";
		СтруктураРазличийФорм.Объект = "ЗаказСсылка";
		
	Иначе 
		
		Объект = ФормаДокумента.Объект;
		СтруктураРазличийФорм.Товары = Объект[ИмяТабличнойЧасти].Выгрузить();
		СтруктураРазличийФорм.КоллекцияФормы = Объект[ИмяТабличнойЧасти];
		
	КонецЕсли;
	
	Если ФормаДокумента.ИмяФормы = "Документ.ЗаказПокупателя.Форма.ФормаДокумента"
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаДокумента, "КэшЗначений")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаДокумента.КэшЗначений, "РезервированиеЗапасов") Тогда
		
		СтруктураРазличийФорм.ПрименитьОбщийВидЦен = НЕ ФормаДокумента.КэшЗначений.РезервированиеЗапасов;
		
	КонецЕсли;
	
	Если ФормаДокумента.ИмяФормы = "Документ.ЗаказПокупателя.Форма.ФормаЗаказНаряда"
		И ИмяТабличнойЧасти = "Работы" Тогда
		
		СтруктураРазличийФорм.ПрефиксТЧ = "ЗН";
		СтруктураРазличийФорм.СкладВШапке = Истина;
		
	КонецЕсли;
	
	Если ФормаДокумента.ИмяФормы = "Документ.КорректировкаРеализации.Форма.ФормаДокумента" Тогда
		
		СтруктураРазличийФорм.СкладТолькоВТЧ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьЦенуПоМинимальной(Цена, МинимальнаяЦена, СтруктураДанных = Неопределено)
	
	Если Цена = 0
		И МинимальнаяЦена <> 0 Тогда
		Цена = МинимальнаяЦена;
		Если СтруктураДанных <> Неопределено Тогда
			МинимальныйВидЦен = СтруктураДанных.ВидЦен;
			Если СтруктураДанных.Свойство("СуммаВключаетНДС")
				И ((СтруктураДанных.СуммаВключаетНДС И НЕ МинимальныйВидЦен.ЦенаВключаетНДС)
				ИЛИ (НЕ СтруктураДанных.СуммаВключаетНДС И МинимальныйВидЦен.ЦенаВключаетНДС)) Тогда
				
				Цена = ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.СуммаВключаетНДС, СтруктураДанных.СтавкаНДС);
				
			КонецЕсли;			
			Цена = ОкруглитьЦену(Цена, МинимальныйВидЦен.ПорядокОкругления, МинимальныйВидЦен.ОкруглятьВБольшуюСторону);	
		КонецЕсли;
		
	КонецЕсли;
	
	Если МинимальнаяЦена <> 0 
		И Цена < МинимальнаяЦена Тогда
		Цена = МинимальнаяЦена;
	КонецЕсли;	
	
КонецПроцедуры

Процедура РаспределитьПревышениеМинимальнойЦены(СтрокиСкидок, МаксимальнаяСкидкаСтроки, МинимальнаяЦена, СуммаРучнойСкидки, ОграниченаМинимальнойЦеной)
	
	СуммаСкидкиПоСтроке = 0;
	Для Каждого СтрокаСкидки Из СтрокиСкидок Цикл
		
		Если СтрокаСкидки.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
			
		СуммаСкидкиПоСтроке = СуммаСкидкиПоСтроке + СтрокаСкидки.Сумма + СуммаРучнойСкидки;
		РазмерПревышения = СуммаСкидкиПоСтроке - МаксимальнаяСкидкаСтроки;
		
		Если РазмерПревышения <= 0 Тогда
			Продолжить;
		КонецЕсли;
				
		// Если ручная скидка больше чем превышение, то уменьшим ручную на этот размер
		ИзменитьРучнуюСкидку = Ложь;
		Если СуммаРучнойСкидки > РазмерПревышения Тогда
			
			СуммаРучнойСкидки = СуммаРучнойСкидки - РазмерПревышения;
			РазмерПревышения = 0;
			ИзменитьРучнуюСкидку = Истина;
			
		Иначе
		// Ручная скидка меньше превышения, обнулим ее, на остаток уменьшим автоматическую скидку
		
			Если СуммаРучнойСкидки > 0 Тогда
				
				РазмерПревышения = РазмерПревышения - СуммаРучнойСкидки;
				СуммаРучнойСкидки = 0;
				ИзменитьРучнуюСкидку = Истина;
				
			КонецЕсли;
					
		КонецЕсли; 		
		
		Если РазмерПревышения >= 0 Тогда
						
			СтрокаСкидки.Сумма = Макс(СтрокаСкидки.Сумма - РазмерПревышения, 0);
			// Распределять будем по скидкам равномерно
			КоличествоПримененныхСкидок = СтрокаСкидки.Расшифровка.Количество();
			ПоследняяСтрока = Ложь;
			Для каждого СтрокаРасшифровки Из СтрокаСкидки.Расшифровка Цикл
				
				СтрокаРасшифровки.Сумма = Окр(СтрокаСкидки.Сумма / КоличествоПримененныхСкидок, 2);
				СтрокаРасшифровки.ОграниченаМинимальнойЦеной = Истина;
				СтрокаРасшифровки.СуммаРучнойСкидки = СуммаРучнойСкидки;
				СтрокаРасшифровки.ИзменитьРучнуюСкидку = ИзменитьРучнуюСкидку;
				ДополнитьКомментарийРасшифровкиСкидкиОграничениемМинимальнойЦены(СтрокаРасшифровки.Комментарий, МинимальнаяЦена);
				ОграниченаМинимальнойЦеной = Истина;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРеквизитыВКоллекциюПриДобавленииМинимальнойЦены(ФормаДокумента, ИмяТабличнойЧасти, СтруктураРазличийФорм)
	
	НовыеРеквизиты = Новый Массив;
	
	Если СтруктураРазличийФорм.Товары.Колонки.Найти("МинимальнаяЦена") = Неопределено Тогда
		
		РеквизитМинимальнаяЦена = Новый РеквизитФормы("МинимальнаяЦена", Новый ОписаниеТипов("Число"), 
				СтруктураРазличийФорм.ПрефиксРеквизита + СтруктураРазличийФорм.ИмяТЧНаФорме, НСтр("ru = 'Минимальная цена'"), Ложь);
				
		
		НовыеРеквизиты.Добавить(РеквизитМинимальнаяЦена);		
		
	КонецЕсли;                                           
	
	Если СтруктураРазличийФорм.Товары.Колонки.Найти("КлючСвязиМинимальныеЦены") = Неопределено Тогда
		
		РеквизитКлючСвязиМинимальнаяЦена = Новый РеквизитФормы("КлючСвязиМинимальныеЦены", Новый ОписаниеТипов("Число"), 
				СтруктураРазличийФорм.ПрефиксРеквизита + СтруктураРазличийФорм.ИмяТЧНаФорме, НСтр("ru = 'Ключ связи минимальные цены'"), Ложь);
				
		НовыеРеквизиты.Добавить(РеквизитКлючСвязиМинимальнаяЦена);
	
	КонецЕсли;
	
	Если НовыеРеквизиты.Количество() > 0 Тогда
		
		ФормаДокумента.ИзменитьРеквизиты(НовыеРеквизиты);
		
	КонецЕсли;  
	
	ЗаполнитьСтруктуруРазличийФормПриДобавленииКолонкиМинимальнойЦеныНаФорму(ФормаДокумента, ИмяТабличнойЧасти, СтруктураРазличийФорм);
	
	ИндексКлючСвязи = 0;
	Для каждого Товар Из СтруктураРазличийФорм.Товары Цикл
	
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(СтруктураРазличийФорм.Товары, Товар, "КлючСвязиМинимальныеЦены", ИндексКлючСвязи);	
		
		ТоварКоллекции = СтруктураРазличийФорм.КоллекцияФормы.Получить(ИндексКлючСвязи);
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(СтруктураРазличийФорм.КоллекцияФормы, ТоварКоллекции, "КлючСвязиМинимальныеЦены", ИндексКлючСвязи);			
		
		ИндексКлючСвязи = ИндексКлючСвязи + 1;
		
	КонецЦикла;
		
КонецПроцедуры

#Область ДинамическиеЦены

#Область РасчетПроцентом

Процедура РасчетДинамическихЦенНаПроцент(ПараметрыРасчета, ЦеныРассчитаны, ОписаниеОшибки = "", ЗаписыватьЦены = Истина) Экспорт
	
	МенеджерЗаписейИспользуется = 500;
	
	Если ЗаписыватьЦены
		И ПараметрыРасчета.КоличествоЗаписей < МенеджерЗаписейИспользуется Тогда
		
		РасчетДинамическихЦенПроцентМенеджерЗаписи(ПараметрыРасчета, ЦеныРассчитаны, ОписаниеОшибки, ЗаписыватьЦены);
		
	Иначе
		
		РасчетДинамическихЦенПроцентНаборЗаписей(ПараметрыРасчета, ЦеныРассчитаны, ОписаниеОшибки, ЗаписыватьЦены);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетДинамическихЦенПроцентМенеджерЗаписи(ПараметрыРасчета, ЦеныРассчитаны, ОписаниеОшибки, ЗаписыватьЦены)
	
	ПериодЗаписи 			= ПараметрыРасчета.ПериодЗаписи;
	ВидЦенРасчетный			= ПараметрыРасчета.ВидЦенРасчетный;
	НомерОчередиЦен			= ПараметрыРасчета.НомерОчередиЦен;
	ЦеныРассчитаны			= Ложь;
	ОкруглятьВБольшуюСторону= ВидЦенРасчетный.ОкруглятьВБольшуюСторону;
	ПравилоОкругления		= ВидЦенРасчетный.ПорядокОкругления;
	
	БлокировкаДанных		= Новый БлокировкаДанных;
	
	ЭлементБлокировки		= БлокировкаДанных.Добавить("РегистрСведений.ЦеныНоменклатуры");
	ЭлементБлокировки.УстановитьЗначение("ВидЦен", ВидЦенРасчетный);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки		= БлокировкаДанных.Добавить("РегистрСведений.ОчередьРасчетаЦен");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("НомерОчередиЦен", НомерОчередиЦен);
	ЭлементБлокировки.УстановитьЗначение("ВидЦенРасчетный",	ВидЦенРасчетный);
	
	Запрос					= Новый Запрос;
	Запрос.УстановитьПараметр("Период", 			НачалоДня(ПериодЗаписи));
	Запрос.УстановитьПараметр("ВидЦенРасчетный",	ВидЦенРасчетный);
	Запрос.УстановитьПараметр("НомерОчередиЦен",	НомерОчередиЦен);
	
	Запрос.Текст			=
	"ВЫБРАТЬ
	|	ВидыЦенПоЦеновымГруппам.Ссылка КАК ВидЦенРасчетный,
	|	ВидыЦенПоЦеновымГруппам.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВидыЦенПоЦеновымГруппам.БазовыйВидЦен КАК БазовыйВидЦен,
	|	ВидыЦенПоЦеновымГруппам.Процент КАК Процент
	|ПОМЕСТИТЬ УсловияРасчетаСЦеновымиГруппами
	|ИЗ
	|	Справочник.ВидыЦен.ЦеновыеГруппы КАК ВидыЦенПоЦеновымГруппам
	|ГДЕ
	|	ВидыЦенПоЦеновымГруппам.Ссылка = &ВидЦенРасчетный
	|	И ВидыЦенПоЦеновымГруппам.БазовыйВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидыЦенПоЦеновымГруппам.Ссылка,
	|	ВидыЦенПоЦеновымГруппам.ЦеноваяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьЦен.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ОчередьЦен.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	ОчередьЦен.Номенклатура КАК Номенклатура,
	|	ОчередьЦен.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ОчередьЦен.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(УсловияРасчетаСЦеновымиГруппами.БазовыйВидЦен, ОчередьЦен.ВидЦенРасчетный.БазовыйВидЦен) КАК БазовыйВидЦен,
	|	ЕСТЬNULL(УсловияРасчетаСЦеновымиГруппами.Процент, ОчередьЦен.ВидЦенРасчетный.Процент) КАК Процент,
	|	ИСТИНА КАК ТребуетсяРасчет
	|ПОМЕСТИТЬ РассчитываемыеЗаписи
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаЦен КАК ОчередьЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияРасчетаСЦеновымиГруппами КАК УсловияРасчетаСЦеновымиГруппами
	|		ПО ОчередьЦен.ВидЦенРасчетный = УсловияРасчетаСЦеновымиГруппами.ВидЦенРасчетный
	|			И ОчередьЦен.Номенклатура.ЦеноваяГруппа = УсловияРасчетаСЦеновымиГруппами.ЦеноваяГруппа
	|ГДЕ
	|	ОчередьЦен.ПериодЗаписи = &Период
	|	И ОчередьЦен.НомерОчередиЦен = &НомерОчередиЦен
	|	И ОчередьЦен.ВидЦенРасчетный = &ВидЦенРасчетный
	|	И НЕ ОчередьЦен.ПересчетВыполнен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОчередьЦен.Номенклатура,
	|	ОчередьЦен.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РассчитываемыеЗаписи.БазовыйВидЦен КАК БазовыйВидЦен
	|ПОМЕСТИТЬ ОтборБазовыхВидовЦен
	|ИЗ
	|	РассчитываемыеЗаписи КАК РассчитываемыеЗаписи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РассчитываемыеЗаписи.БазовыйВидЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Актуальность,
	|	РассчитываемыеЗаписи.НомерОчередиЦен КАК НомерОчередиЦен,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК Период,
	|	РассчитываемыеЗаписи.ВидЦенРасчетный КАК ВидЦен,
	|	РассчитываемыеЗаписи.Номенклатура КАК Номенклатура,
	|	РассчитываемыеЗаписи.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(БазовыеЦены.Цена, 0) + ЕСТЬNULL(БазовыеЦены.Цена, 0) * РассчитываемыеЗаписи.Процент / 100 КАК Цена,
	|	БазовыеЦены.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЛОЖЬ КАК ВключаяХарактеристики,
	|	БазовыеЦены.Автор КАК Автор
	|ИЗ
	|	РассчитываемыеЗаписи КАК РассчитываемыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Актуальность
	|					И ВидЦен В
	|						(ВЫБРАТЬ
	|							ОтборБазовыхВидовЦен.БазовыйВидЦен
	|						ИЗ
	|							ОтборБазовыхВидовЦен)) КАК БазовыеЦены
	|		ПО РассчитываемыеЗаписи.БазовыйВидЦен = БазовыеЦены.ВидЦен
	|			И РассчитываемыеЗаписи.Номенклатура = БазовыеЦены.Номенклатура
	|			И РассчитываемыеЗаписи.Характеристика = БазовыеЦены.Характеристика";
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ТаблицаВыборка = Результат.Выгрузить();
			
			Для каждого Выборка Из ТаблицаВыборка Цикл
				
				ОчередьРасчетаЦен = РегистрыСведений.ОчередьРасчетаЦен.СоздатьМенеджерЗаписи();
				ОчередьРасчетаЦен.ПериодЗаписи = НачалоДня(Выборка.Период);
				ОчередьРасчетаЦен.ВидЦенРасчетный = Выборка.ВидЦен;
				ОчередьРасчетаЦен.Номенклатура = Выборка.Номенклатура;
				ОчередьРасчетаЦен.Характеристика = Выборка.Характеристика;
				ОчередьРасчетаЦен.НомерОчередиЦен = Выборка.НомерОчередиЦен;
				ОчередьРасчетаЦен.Удалить();
				
			КонецЦикла;
			
			ИзменитьЦенуВТаблицеПоПорогамСрабатывания(ТаблицаВыборка, Неопределено, ПериодЗаписи);
			
			ИсключитьЗаписиСтарыхЦенИзТаблицы(ТаблицаВыборка);
			
			Для каждого Выборка Из ТаблицаВыборка Цикл
				
				Если Выборка.Цена <> 0 
					И Выборка.Цена <> Выборка.ЦенаСтарая Тогда 
					
					ЗаписьРегистра = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
					ЗаписьРегистра.Цена = ЦенообразованиеФормулыСервер.ОкруглитьЧислоПоПравилу(ЗаписьРегистра.Цена, ОкруглятьВБольшуюСторону, ПравилоОкругления);
					ЗаписьРегистра.Записать(Истина);
					
				КонецЕсли;
				
			КонецЦикла;     
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		ЦеныРассчитаны = Истина;
		
	Исключение
		
		ОписаниеОшибки = НСтр("ru ='Ошибка расчета цен из очереди.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ВидыЦен, ВидЦенРасчетный, ОписаниеОшибки);
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

Процедура РасчетДинамическихЦенПроцентНаборЗаписей(ПараметрыРасчета, ЦеныРассчитаны, ОписаниеОшибки, ЗаписыватьЦены)
	
	ПериодЗаписи 			= ПараметрыРасчета.ПериодЗаписи;
	ВидЦенРасчетный			= ПараметрыРасчета.ВидЦенРасчетный;
	НомерОчередиЦен			= ПараметрыРасчета.НомерОчередиЦен;
	ФормаВладелец			= ПараметрыРасчета.УникальныйИдентификатор;
	ЦеныРассчитаны			= Ложь;
	ОкруглятьВБольшуюСторону= ВидЦенРасчетный.ОкруглятьВБольшуюСторону;
	ПравилоОкругления		= ВидЦенРасчетный.ПорядокОкругления;
	ПересчетЗаТекущийПериод	= ?(ПараметрыРасчета.Свойство("ПересчетЗаТекущийПериод"), ПараметрыРасчета.ПересчетЗаТекущийПериод, Ложь);
	
	БлокировкаДанных		= Новый БлокировкаДанных;
	
	ЭлементБлокировки		= БлокировкаДанных.Добавить("РегистрСведений.ОчередьРасчетаЦен");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("НомерОчередиЦен", НомерОчередиЦен);
	ЭлементБлокировки.УстановитьЗначение("ВидЦенРасчетный",	ВидЦенРасчетный);
	
	Запрос					= Новый Запрос;
	Запрос.УстановитьПараметр("Период", 		НачалоДня(ПериодЗаписи));
	Запрос.УстановитьПараметр("ВидЦенРасчетный",ВидЦенРасчетный);
	Запрос.УстановитьПараметр("НомерОчередиЦен",НомерОчередиЦен);
	Запрос.УстановитьПараметр("ДобавитьПересчетЗаТекущийПериод",ПересчетЗаТекущийПериод);
		
	Запрос.Текст			=
	"ВЫБРАТЬ
	|	ВидыЦенПоЦеновымГруппам.Ссылка КАК ВидЦенРасчетный,
	|	ВидыЦенПоЦеновымГруппам.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВидыЦенПоЦеновымГруппам.БазовыйВидЦен КАК БазовыйВидЦен,
	|	ВидыЦенПоЦеновымГруппам.Процент КАК Процент
	|ПОМЕСТИТЬ УсловияРасчетаСЦеновымиГруппами
	|ИЗ
	|	Справочник.ВидыЦен.ЦеновыеГруппы КАК ВидыЦенПоЦеновымГруппам
	|ГДЕ
	|	ВидыЦенПоЦеновымГруппам.Ссылка = &ВидЦенРасчетный
	|	И ВидыЦенПоЦеновымГруппам.БазовыйВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидыЦенПоЦеновымГруппам.Ссылка,
	|	ВидыЦенПоЦеновымГруппам.ЦеноваяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьЦен.ПериодЗаписи КАК ПериодЗаписи,
	|	ОчередьЦен.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ОчередьЦен.ВидЦенРасчетный КАК ВидЦен,
	|	ОчередьЦен.Номенклатура КАК Номенклатура,
	|	ОчередьЦен.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ОчередьЦен.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(УсловияРасчетаСЦеновымиГруппами.БазовыйВидЦен, ОчередьЦен.ВидЦенРасчетный.БазовыйВидЦен) КАК БазовыйВидЦен,
	|	ЕСТЬNULL(УсловияРасчетаСЦеновымиГруппами.Процент, ОчередьЦен.ВидЦенРасчетный.Процент) КАК Процент,
	|	ИСТИНА КАК ТребуетсяРасчет
	|ПОМЕСТИТЬ РассчитываемыеЗаписиБезРасчета
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаЦен КАК ОчередьЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияРасчетаСЦеновымиГруппами КАК УсловияРасчетаСЦеновымиГруппами
	|		ПО ОчередьЦен.ВидЦенРасчетный = УсловияРасчетаСЦеновымиГруппами.ВидЦенРасчетный
	|			И ОчередьЦен.Номенклатура.ЦеноваяГруппа = УсловияРасчетаСЦеновымиГруппами.ЦеноваяГруппа
	|ГДЕ
	|	ОчередьЦен.ПериодЗаписи = &Период
	|	И ОчередьЦен.НомерОчередиЦен = &НомерОчередиЦен
	|	И ОчередьЦен.ВидЦенРасчетный = &ВидЦенРасчетный
	|	И НЕ ОчередьЦен.ПересчетВыполнен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОчередьЦен.Номенклатура,
	|	ОчередьЦен.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РассчитываемыеЗаписиБезРасчета.БазовыйВидЦен КАК БазовыйВидЦен
	|ПОМЕСТИТЬ ОтборБазовыхВидовЦен
	|ИЗ
	|	РассчитываемыеЗаписиБезРасчета КАК РассчитываемыеЗаписиБезРасчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РассчитываемыеЗаписиБезРасчета.БазовыйВидЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Актуальность,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК Период,
	|	РассчитываемыеЗаписиБезРасчета.НомерОчередиЦен КАК НомерОчередиЦен,
	|	РассчитываемыеЗаписиБезРасчета.ВидЦен КАК ВидЦен,
	|	РассчитываемыеЗаписиБезРасчета.Номенклатура КАК Номенклатура,
	|	РассчитываемыеЗаписиБезРасчета.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(БазовыеЦены.Цена, 0) + ЕСТЬNULL(БазовыеЦены.Цена, 0) * РассчитываемыеЗаписиБезРасчета.Процент / 100 КАК Цена,
	|	БазовыеЦены.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЛОЖЬ КАК ВключаяХарактеристики,
	|	БазовыеЦены.Автор КАК Автор,
	|	РассчитываемыеЗаписиБезРасчета.ТребуетсяРасчет КАК ТребуетсяРасчет
	|ПОМЕСТИТЬ РассчитываемыеЗаписи
	|ИЗ
	|	РассчитываемыеЗаписиБезРасчета КАК РассчитываемыеЗаписиБезРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Актуальность
	|					И ВидЦен В
	|						(ВЫБРАТЬ
	|							ОтборБазовыхВидовЦен.БазовыйВидЦен
	|						ИЗ
	|							ОтборБазовыхВидовЦен)) КАК БазовыеЦены
	|		ПО РассчитываемыеЗаписиБезРасчета.БазовыйВидЦен = БазовыеЦены.ВидЦен
	|			И РассчитываемыеЗаписиБезРасчета.Номенклатура = БазовыеЦены.Номенклатура
	|			И РассчитываемыеЗаписиБезРасчета.Характеристика = БазовыеЦены.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаннееРассчитанныеЦены.Период КАК Период,
	|	&НомерОчередиЦен КАК НомерОчередиЦен,
	|	РаннееРассчитанныеЦены.ВидЦен КАК ВидЦен,
	|	РаннееРассчитанныеЦены.Номенклатура КАК Номенклатура,
	|	РаннееРассчитанныеЦены.Характеристика КАК Характеристика,
	|	РаннееРассчитанныеЦены.Цена КАК Цена,
	|	РаннееРассчитанныеЦены.Актуальность КАК Актуальность,
	|	РаннееРассчитанныеЦены.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РаннееРассчитанныеЦены.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	РаннееРассчитанныеЦены.Автор КАК Автор,
	|	ЛОЖЬ КАК ТребуетсяРасчет
	|ПОМЕСТИТЬ ТекущиеЦеныРасчетногоВидаЦен
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК РаннееРассчитанныеЦены
	|ГДЕ
	|	РаннееРассчитанныеЦены.Период = &Период
	|	И РаннееРассчитанныеЦены.ВидЦен = &ВидЦенРасчетный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РаннееРассчитанныеЦены.Номенклатура,
	|	РаннееРассчитанныеЦены.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеЦеныРасчетногоВидаЦен.Период КАК Период,
	|	ТекущиеЦеныРасчетногоВидаЦен.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ТекущиеЦеныРасчетногоВидаЦен.ВидЦен КАК ВидЦен,
	|	ТекущиеЦеныРасчетногоВидаЦен.Номенклатура КАК Номенклатура,
	|	ТекущиеЦеныРасчетногоВидаЦен.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА РассчитываемыеЗаписи.ТребуетсяРасчет = ИСТИНА
	|			ТОГДА 0
	|		ИНАЧЕ ТекущиеЦеныРасчетногоВидаЦен.Цена
	|	КОНЕЦ КАК Цена,
	|	ТекущиеЦеныРасчетногоВидаЦен.Актуальность КАК Актуальность,
	|	ТекущиеЦеныРасчетногоВидаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТекущиеЦеныРасчетногоВидаЦен.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	ТекущиеЦеныРасчетногоВидаЦен.Автор КАК Автор
	|ПОМЕСТИТЬ ТекущиеЦеныСПометкойДублирующихсяЗаписей
	|ИЗ
	|	ТекущиеЦеныРасчетногоВидаЦен КАК ТекущиеЦеныРасчетногоВидаЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РассчитываемыеЗаписи КАК РассчитываемыеЗаписи
	|		ПО ТекущиеЦеныРасчетногоВидаЦен.Номенклатура = РассчитываемыеЗаписи.Номенклатура
	|			И ТекущиеЦеныРасчетногоВидаЦен.Характеристика = РассчитываемыеЗаписи.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеТребующиеПерерасчета.Период КАК Период,
	|	НеТребующиеПерерасчета.НомерОчередиЦен КАК НомерОчередиЦен,
	|	НеТребующиеПерерасчета.ВидЦен КАК ВидЦен,
	|	НеТребующиеПерерасчета.Номенклатура КАК Номенклатура,
	|	НеТребующиеПерерасчета.Характеристика КАК Характеристика,
	|	НеТребующиеПерерасчета.Цена КАК Цена,
	|	НеТребующиеПерерасчета.Актуальность КАК Актуальность,
	|	НеТребующиеПерерасчета.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НеТребующиеПерерасчета.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	НеТребующиеПерерасчета.Автор КАК Автор
	|ПОМЕСТИТЬ НеТребующиеПерерасчета
	|ИЗ
	|	ТекущиеЦеныСПометкойДублирующихсяЗаписей КАК НеТребующиеПерерасчета
	|ГДЕ
	|	НеТребующиеПерерасчета.Цена <> 0 И &ДобавитьПересчетЗаТекущийПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК ТребуетсяНовыйРасчет,
	|	НеТребующиеПерерасчета.Период КАК Период,
	|	НеТребующиеПерерасчета.НомерОчередиЦен КАК НомерОчередиЦен,
	|	НеТребующиеПерерасчета.ВидЦен КАК ВидЦен,
	|	НеТребующиеПерерасчета.Номенклатура КАК Номенклатура,
	|	НеТребующиеПерерасчета.Характеристика КАК Характеристика,
	|	НеТребующиеПерерасчета.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппаНоменклатуры,
	|	НеТребующиеПерерасчета.Цена КАК Цена,
	|	НеТребующиеПерерасчета.Актуальность КАК Актуальность,
	|	НеТребующиеПерерасчета.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НеТребующиеПерерасчета.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	НеТребующиеПерерасчета.Автор КАК Автор,
	|	ИСТИНА КАК ПересчетВыполнен
	|ПОМЕСТИТЬ ВсеЗаписиОЦенах
	|ИЗ
	|	НеТребующиеПерерасчета КАК НеТребующиеПерерасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	&Период,
	|	РассчитываемыеЗаписи.НомерОчередиЦен,
	|	РассчитываемыеЗаписи.ВидЦен,
	|	РассчитываемыеЗаписи.Номенклатура,
	|	РассчитываемыеЗаписи.Характеристика,
	|	РассчитываемыеЗаписи.Номенклатура.ЦеноваяГруппа,
	|	РассчитываемыеЗаписи.Цена,
	|	ИСТИНА,
	|	РассчитываемыеЗаписи.ЕдиницаИзмерения,
	|	ЛОЖЬ,
	|	РассчитываемыеЗаписи.Автор,
	|	ИСТИНА
	|ИЗ
	|	РассчитываемыеЗаписи КАК РассчитываемыеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеЗаписиОЦенах.ТребуетсяНовыйРасчет КАК ТребуетсяНовыйРасчет,
	|	ВсеЗаписиОЦенах.Период КАК Период,
	|	ВсеЗаписиОЦенах.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ВсеЗаписиОЦенах.ВидЦен КАК ВидЦен,
	|	ВсеЗаписиОЦенах.Номенклатура КАК Номенклатура,
	|	ВсеЗаписиОЦенах.Характеристика КАК Характеристика,
	|	ВсеЗаписиОЦенах.ЦеноваяГруппаНоменклатуры КАК ЦеноваяГруппаНоменклатуры,
	|	ВсеЗаписиОЦенах.Цена КАК Цена,
	|	ВсеЗаписиОЦенах.Актуальность КАК Актуальность,
	|	ВсеЗаписиОЦенах.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВсеЗаписиОЦенах.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	ВсеЗаписиОЦенах.Автор КАК Автор,
	|	ВсеЗаписиОЦенах.ПересчетВыполнен КАК ПересчетВыполнен
	|ИЗ
	|	ВсеЗаписиОЦенах КАК ВсеЗаписиОЦенах";
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		ЗаписиРегистраЗаПериода = Запрос.Выполнить().Выгрузить();
		
		// заблокируем регистр цен
		БлокировкаЗаписи		= Новый БлокировкаДанных;
		ЭлементБлокировки		= БлокировкаЗаписи.Добавить("РегистрСведений.ЦеныНоменклатуры");
		ЭлементБлокировки.УстановитьЗначение("ВидЦен", ВидЦенРасчетный);
		ЭлементБлокировки.УстановитьЗначение("Период", ПериодЗаписи);
		Если ЗаписиРегистраЗаПериода.Количество() < 1000 Тогда
				
			ЭлементБлокировки.ИсточникДанных = ЗаписиРегистраЗаПериода;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
			
		КонецЕсли;   		
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный; 
		БлокировкаЗаписи.Заблокировать();
		
		КоличествоЗаписей		= ЗаписиРегистраЗаПериода.Количество();
		Пока КоличествоЗаписей > 0 Цикл
			
			ЗаписьРегистра = ЗаписиРегистраЗаПериода.Получить(КоличествоЗаписей - 1);
			
			ЗаписьРегистра.Цена = ЦенообразованиеФормулыСервер.ОкруглитьЧислоПоПравилу(ЗаписьРегистра.Цена, ОкруглятьВБольшуюСторону, ПравилоОкругления);
			ЗаписьРегистра.Цена = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(ЗаписьРегистра.Цена, ЗаписьРегистра.ВидЦен.ПсихологическоеОкругление);
			Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.Цена) Тогда
				
				ЗаписиРегистраЗаПериода.Удалить(ЗаписьРегистра);
				
			КонецЕсли;
			
			КоличествоЗаписей = КоличествоЗаписей - 1;
			
		КонецЦикла;
		
		Если ЗаписыватьЦены Тогда
			
			ИзменитьЦенуВТаблицеПоПорогамСрабатывания(ЗаписиРегистраЗаПериода, Неопределено, ПериодЗаписи);
			
			ИсключитьЗаписиСтарыхЦенИзТаблицы(ЗаписиРегистраЗаПериода);
			
			ЗаписатьЦеныИОчиститьОчередьЦен(ПериодЗаписи, ВидЦенРасчетный, НомерОчередиЦен, ЗаписиРегистраЗаПериода);
			
		Иначе
			
			ПараметрыРасчета.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ЗаписиРегистраЗаПериода, ФормаВладелец));
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		ЦеныРассчитаны = Истина;
		
		Товары = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗаписиРегистраЗаПериода.ВыгрузитьКолонку("Номенклатура"));
		ЗарегистрироватьНоменклатуруНаУзлахСайтаИШтрихМ(Товары);
		
	Исключение
		
		ОписаниеОшибки = НСтр("ru ='Ошибка расчета цен из очереди.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ВидыЦен, ВидЦенРасчетный, ОписаниеОшибки);
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетФормулой

Процедура РасчетДинамическихЦенПоФормуле(ПараметрыРасчета, ЦеныРассчитаны, ОписаниеОшибки = "", ЗаписыватьЦены = Истина) Экспорт
	
	ПериодЗаписи 			= НачалоДня(ПараметрыРасчета.ПериодЗаписи);
	НомерОчередиЦен			= ПараметрыРасчета.НомерОчередиЦен;
	ВидЦенРасчетный			= ПараметрыРасчета.ВидЦенРасчетный;
	ФормаВладелец			= ПараметрыРасчета.УникальныйИдентификатор;
	
	РасчетКоллекции			= Новый Структура;
	РасчетКоллекции.Вставить("ВидЦен",		ПараметрыРасчета.ВидЦенРасчетный);
	РасчетКоллекции.Вставить("Курс",		ПараметрыРасчета.ВидЦенРасчетныйКурс);
	РасчетКоллекции.Вставить("Кратность",	ПараметрыРасчета.ВидЦенРасчетныйКратность);
	
	БлокировкаДанных		= Новый БлокировкаДанных;	
	ЭлементБлокировки		= БлокировкаДанных.Добавить("РегистрСведений.ОчередьРасчетаЦен");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("НомерОчередиЦен", НомерОчередиЦен);
	ЭлементБлокировки.УстановитьЗначение("ВидЦенРасчетный",	ВидЦенРасчетный);
	
	Запрос					= Новый Запрос;
	Запрос.УстановитьПараметр("Период", 		ПериодЗаписи);
	Запрос.УстановитьПараметр("ВидЦенРасчетный",ВидЦенРасчетный);
	Запрос.УстановитьПараметр("НомерОчередиЦен",НомерОчередиЦен);
	
	Запрос.Текст			=
	"ВЫБРАТЬ
	//
	//::: [0]
	//
	|	ВидыЦенПоЦеновымГруппам.Ссылка КАК ВидЦенРасчетный,
	|	ВидыЦенПоЦеновымГруппам.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВидыЦенПоЦеновымГруппам.Формула КАК Формула
	|ПОМЕСТИТЬ УсловияРасчетаСЦеновымиГруппами
	|ИЗ
	|	Справочник.ВидыЦен.ЦеновыеГруппы КАК ВидыЦенПоЦеновымГруппам
	|ГДЕ
	|	ВидыЦенПоЦеновымГруппам.Ссылка = &ВидЦенРасчетный
	|	И ВидыЦенПоЦеновымГруппам.БазовыйВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидыЦенПоЦеновымГруппам.Ссылка,
	|	ВидыЦенПоЦеновымГруппам.ЦеноваяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//
	//::: [1]
	//
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьЦен.ПериодЗаписи КАК ПериодЗаписи,
	|	ОчередьЦен.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ОчередьЦен.ВидЦенРасчетный КАК ВидЦен,
	|	ОчередьЦен.Номенклатура КАК Номенклатура,
	|	ОчередьЦен.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ОчередьЦен.Характеристика КАК Характеристика,
	|	"""" КАК Формула,
	|	ИСТИНА КАК ТребуетсяРасчет
	|ПОМЕСТИТЬ РассчитываемыеЗаписи
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаЦен КАК ОчередьЦен



	|ГДЕ
	|	ОчередьЦен.ПериодЗаписи = &Период
	|	И ОчередьЦен.НомерОчередиЦен = &НомерОчередиЦен
	|	И ОчередьЦен.ВидЦенРасчетный = &ВидЦенРасчетный
	|	И НЕ ОчередьЦен.ПересчетВыполнен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОчередьЦен.Номенклатура,
	|	ОчередьЦен.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//
	//::: [2]
	//
	|ВЫБРАТЬ
	|	РаннееРассчитанныеЦены.Период КАК Период,
	|	&НомерОчередиЦен КАК НомерОчередиЦен,
	|	РаннееРассчитанныеЦены.ВидЦен КАК ВидЦен,
	|	РаннееРассчитанныеЦены.Номенклатура КАК Номенклатура,
	|	РаннееРассчитанныеЦены.Характеристика КАК Характеристика,
	|	РаннееРассчитанныеЦены.Цена КАК Цена,
	|	РаннееРассчитанныеЦены.Актуальность КАК Актуальность,
	|	РаннееРассчитанныеЦены.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РаннееРассчитанныеЦены.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	РаннееРассчитанныеЦены.Автор КАК Автор,
	|	ЛОЖЬ КАК ТребуетсяРасчет
	|ПОМЕСТИТЬ ТекущиеЦеныРасчетногоВидаЦен
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК РаннееРассчитанныеЦены
	|ГДЕ
	|	РаннееРассчитанныеЦены.Период = &Период
	|	И РаннееРассчитанныеЦены.ВидЦен = &ВидЦенРасчетный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РаннееРассчитанныеЦены.Номенклатура,
	|	РаннееРассчитанныеЦены.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//
	//::: [3]
	//
	|ВЫБРАТЬ
	|	ТекущиеЦеныРасчетногоВидаЦен.Период КАК Период,
	|	ТекущиеЦеныРасчетногоВидаЦен.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ТекущиеЦеныРасчетногоВидаЦен.ВидЦен КАК ВидЦен,
	|	ТекущиеЦеныРасчетногоВидаЦен.Номенклатура КАК Номенклатура,
	|	ТекущиеЦеныРасчетногоВидаЦен.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА РассчитываемыеЗаписи.ТребуетсяРасчет = ИСТИНА
	|			ТОГДА 0
	|		ИНАЧЕ ТекущиеЦеныРасчетногоВидаЦен.Цена
	|	КОНЕЦ КАК Цена,
	|	ТекущиеЦеныРасчетногоВидаЦен.Актуальность КАК Актуальность,
	|	ТекущиеЦеныРасчетногоВидаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТекущиеЦеныРасчетногоВидаЦен.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	ТекущиеЦеныРасчетногоВидаЦен.Автор КАК Автор
	|ПОМЕСТИТЬ ТекущиеЦеныРасчетногоВидаЦенПослеОбъединения
	|ИЗ
	|	ТекущиеЦеныРасчетногоВидаЦен КАК ТекущиеЦеныРасчетногоВидаЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РассчитываемыеЗаписи КАК РассчитываемыеЗаписи
	|		ПО ТекущиеЦеныРасчетногоВидаЦен.Номенклатура = РассчитываемыеЗаписи.Номенклатура
	|			И ТекущиеЦеныРасчетногоВидаЦен.Характеристика = РассчитываемыеЗаписи.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//
	//::: [4]
	//
	|ВЫБРАТЬ
	|	НеТребующиеПерерасчета.Период КАК Период,
	|	НеТребующиеПерерасчета.НомерОчередиЦен КАК НомерОчередиЦен,
	|	НеТребующиеПерерасчета.ВидЦен КАК ВидЦен,
	|	НеТребующиеПерерасчета.Номенклатура КАК Номенклатура,
	|	НеТребующиеПерерасчета.Характеристика КАК Характеристика,
	|	НеТребующиеПерерасчета.Цена КАК Цена,
	|	НеТребующиеПерерасчета.Актуальность КАК Актуальность,
	|	НеТребующиеПерерасчета.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НеТребующиеПерерасчета.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	НеТребующиеПерерасчета.Автор КАК Автор
	|ПОМЕСТИТЬ НеТребующиеПерерасчета
	|ИЗ
	|	ТекущиеЦеныРасчетногоВидаЦенПослеОбъединения КАК НеТребующиеПерерасчета
	|ГДЕ
	|	НеТребующиеПерерасчета.Цена <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//
	//::: [5]
	//
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК ТребуетсяНовыйРасчет,
	|	НеТребующиеПерерасчета.Период КАК Период,
	|	НеТребующиеПерерасчета.НомерОчередиЦен КАК НомерОчередиЦен,
	|	НеТребующиеПерерасчета.ВидЦен КАК ВидЦен,
	|	НеТребующиеПерерасчета.Номенклатура КАК Номенклатура,
	|	НеТребующиеПерерасчета.Характеристика КАК Характеристика,
	|	НеТребующиеПерерасчета.Цена КАК Цена,
	|	НеТребующиеПерерасчета.Актуальность КАК Актуальность,
	|	НеТребующиеПерерасчета.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НеТребующиеПерерасчета.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	НеТребующиеПерерасчета.Автор КАК Автор,
	|	ИСТИНА КАК ПересчетВыполнен,
	|	"""" КАК Формула
	|ИЗ
	|	НеТребующиеПерерасчета КАК НеТребующиеПерерасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	&Период,
	|	РассчитываемыеЗаписи.НомерОчередиЦен,
	|	РассчитываемыеЗаписи.ВидЦен,
	|	РассчитываемыеЗаписи.Номенклатура,
	|	РассчитываемыеЗаписи.Характеристика,
	|	0,
	|	ИСТИНА,
	|	НЕОПРЕДЕЛЕНО,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	ИСТИНА,
	|	ВЫБОР 
	|		КОГДА УсловияРасчетаСЦеновымиГруппами.Формула IS NULL ТОГДА
	|			РассчитываемыеЗаписи.ВидЦен.Формула
	|		ИНАЧЕ УсловияРасчетаСЦеновымиГруппами.Формула
	|		КОНЕЦ КАК Формула	
	|ИЗ
	|	РассчитываемыеЗаписи КАК РассчитываемыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияРасчетаСЦеновымиГруппами КАК УсловияРасчетаСЦеновымиГруппами
	|		ПО РассчитываемыеЗаписи.ВидЦен = УсловияРасчетаСЦеновымиГруппами.ВидЦенРасчетный
	|			И РассчитываемыеЗаписи.ЦеноваяГруппа = УсловияРасчетаСЦеновымиГруппами.ЦеноваяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//
	//::: [6]
	//
	|ВЫБРАТЬ 
	|	ВЫБОР 
	|		КОГДА УсловияРасчетаСЦеновымиГруппами.Формула IS NULL ТОГДА
	|			РассчитываемыеЗаписи.ВидЦен.Формула
	|		ИНАЧЕ УсловияРасчетаСЦеновымиГруппами.Формула
	|		КОНЕЦ КАК Формула
	|ИЗ
	|	РассчитываемыеЗаписи КАК РассчитываемыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияРасчетаСЦеновымиГруппами КАК УсловияРасчетаСЦеновымиГруппами
	|		ПО РассчитываемыеЗаписи.ВидЦен = УсловияРасчетаСЦеновымиГруппами.ВидЦенРасчетный
	|			И РассчитываемыеЗаписи.ЦеноваяГруппа = УсловияРасчетаСЦеновымиГруппами.ЦеноваяГруппа";
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		РезультатЗапроса = Запрос.ВыполнитьПакет(); 		
		ЗаписиРегистраЗаПериода = РезультатЗапроса[5].Выгрузить();
		
		// заблокируем регистр цен
		БлокировкаЗаписи		= Новый БлокировкаДанных;
		ЭлементБлокировки		= БлокировкаЗаписи.Добавить("РегистрСведений.ЦеныНоменклатуры");
		ЭлементБлокировки.УстановитьЗначение("ВидЦен", ВидЦенРасчетный);
		ЭлементБлокировки.УстановитьЗначение("Период", ПериодЗаписи);
		Если ЗаписиРегистраЗаПериода.Количество() < 1000 Тогда
				
			ЭлементБлокировки.ИсточникДанных = ЗаписиРегистраЗаПериода;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
			
		КонецЕсли;   		
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный; 
		БлокировкаЗаписи.Заблокировать();
		
		ИспользуемыеФормулы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатЗапроса[6].Выгрузить().ВыгрузитьКолонку("Формула"));
		ТаблицаОперандов = ЦенообразованиеФормулыСервер.ПолучитьТаблицуОперандовФормулы(ПериодЗаписи, ИспользуемыеФормулы);
		ЗначенияЦенВТаблицуОперандов(НачалоДня(ПериодЗаписи), ТаблицаОперандов, ЗаписиРегистраЗаПериода);
		
		ЦенообразованиеФормулыСервер.РассчитатьДанныеКоллекции(ЗаписиРегистраЗаПериода, ТаблицаОперандов, РасчетКоллекции);
		
		Если ЗаписыватьЦены Тогда
			
			ИзменитьЦенуВТаблицеПоПорогамСрабатывания(ЗаписиРегистраЗаПериода, Неопределено, ПериодЗаписи);
			
			ИсключитьЗаписиСтарыхЦенИзТаблицы(ЗаписиРегистраЗаПериода);
            		
			ЗаписатьЦеныИОчиститьОчередьЦен(ПериодЗаписи, ВидЦенРасчетный, НомерОчередиЦен, ЗаписиРегистраЗаПериода);
			
		Иначе
			
			ПараметрыРасчета.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ЗаписиРегистраЗаПериода, ФормаВладелец));
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		ЦеныРассчитаны = Истина;
		
		Товары = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗаписиРегистраЗаПериода.ВыгрузитьКолонку("Номенклатура"));
		ЗарегистрироватьНоменклатуруНаУзлахСайтаИШтрихМ(Товары);
		
	Исключение
		
		ОписаниеОшибки = НСтр("ru ='Ошибка расчета цен из очереди.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ВидыЦен, ВидЦенРасчетный, ОписаниеОшибки);
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗначенияЦенВТаблицуОперандов(ПериодЗаписи, ТаблицаОперандов, ЗаписиРегистраЗаПериода) Экспорт
	
	Если ТаблицаОперандов.Колонки.Найти("Значение") = Неопределено Тогда
		
		ТаблицаОперандов.Колонки.Добавить("Значение");
		
	КонецЕсли;
	
	Если ТаблицаОперандов.Колонки.Найти("КлючСвязи") = Неопределено Тогда
		
		ТаблицаОперандов.Колонки.Добавить("КлючСвязи");
		
	КонецЕсли;
	
	ШаблонТекстаЗапроса =
	"; 
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиОЦене.%1 КАК ВидЦен,
	|	ЗаписиОЦене.%1.ИдентификаторФормул КАК Идентификатор,
	|	ЗаписиОЦене.Номенклатура КАК Номенклатура,
	|	ЗаписиОЦене.Характеристика КАК Характеристика,
	|	ЗаписиОЦене.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаписиОЦене.Цена КАК Значение,
	|	&%3_Курс КАК Курс,
	|	&%3_Кратность КАК Кратность
	|ИЗ
	|	НоменклатураХарактеристики КАК НоменклатураХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ %2(
	|				&ПериодЗаписи,
	|				Актуальность
	|					И %1 = &%3) КАК ЗаписиОЦене
	|		ПО НоменклатураХарактеристики.Номенклатура = ЗаписиОЦене.Номенклатура
	|			И НоменклатураХарактеристики.Характеристика = ЗаписиОЦене.Характеристика
	|ГДЕ
	|	НЕ ЗаписиОЦене.Номенклатура ЕСТЬ NULL";
	
	ЗапросПоЦенам = Новый Запрос;
	ЗапросПоЦенам.УстановитьПараметр("ПериодЗаписи", ПериодЗаписи);
	ЗапросПоЦенам.УстановитьПараметр("ЗаписиРегистраЗаПериода", ЗаписиРегистраЗаПериода);
	ЗапросПоЦенам.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросПоЦенам.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиРегистраЗаПериода.Номенклатура КАК Номенклатура,
	|	ЗаписиРегистраЗаПериода.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ НоменклатураХарактеристики
	|ИЗ
	|	&ЗаписиРегистраЗаПериода КАК ЗаписиРегистраЗаПериода
	|ГДЕ
	|	ЗаписиРегистраЗаПериода.ТребуетсяНовыйРасчет = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	ИндексРезультатаЗапроса = 1;
	Для каждого СтрокаТаблицы Из ТаблицаОперандов Цикл
		
		Если СтрокаТаблицы.ЭтоЦеныНоменклатуры = Истина Тогда
			
			ИмяПоляВидЦен = "ВидЦен";
			ИмяТаблицы = "РегистрСведений.ЦеныНоменклатуры.СрезПоследних"
			
		ИначеЕсли СтрокаТаблицы.ЭтоЦеныНоменклатуры = Ложь Тогда
			
			ИмяПоляВидЦен = "ВидЦенКонтрагента";
			ИмяТаблицы = "РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних"
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		ЗапросПоЦенам.УстановитьПараметр(СтрокаТаблицы.ВидЦен.ИдентификаторФормул, СтрокаТаблицы.ВидЦен);
		ЗапросПоЦенам.УстановитьПараметр(СтрокаТаблицы.ВидЦен.ИдентификаторФормул + "_Курс", СтрокаТаблицы.ВидЦенКурс);
		ЗапросПоЦенам.УстановитьПараметр(СтрокаТаблицы.ВидЦен.ИдентификаторФормул + "_Кратность", СтрокаТаблицы.ВидЦенКратность);
		ЗапросПоЦенам.Текст = ЗапросПоЦенам.Текст + СтрШаблон(ШаблонТекстаЗапроса, ИмяПоляВидЦен, ИмяТаблицы, СтрокаТаблицы.ВидЦен.ИдентификаторФормул);
		
		СтрокаТаблицы.КлючСвязи = ИндексРезультатаЗапроса;
		ИндексРезультатаЗапроса = ИндексРезультатаЗапроса + 1;
		
	КонецЦикла;
	
	РезультатЗапроса = ЗапросПоЦенам.ВыполнитьПакет();
	Для каждого СтрокаТаблицы Из ТаблицаОперандов Цикл
		
		Если СтрокаТаблицы.КлючСвязи = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТаблицы.Значение = РезультатЗапроса[СтрокаТаблицы.КлючСвязи].Выгрузить();
		
	КонецЦикла;
	
	ТаблицаОперандов.Колонки.Удалить("КлючСвязи");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОчередьРасчетаЦен

Процедура РассчитатьЦеныИзОчередиЦен()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьРасчетаЦен.ПериодЗаписи КАК ПериодЗаписи,
	|	ОчередьРасчетаЦен.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ОчередьРасчетаЦен.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	ОчередьРасчетаЦен.ВидЦенРасчетный.ВалютаЦены КАК ВалютаЦены,
	|	КОЛИЧЕСТВО(1) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаЦен КАК ОчередьРасчетаЦен
	|ГДЕ
	|	ОчередьРасчетаЦен.ВидЦенРасчетный.КоличествоПопытокСлужебный < 2
	|	И ОчередьРасчетаЦен.ВидЦенРасчетный.РассчитыватьАвтоматически
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередьРасчетаЦен.ПериодЗаписи,
	|	ОчередьРасчетаЦен.НомерОчередиЦен,
	|	ОчередьРасчетаЦен.ВидЦенРасчетный,
	|	ОчередьРасчетаЦен.ВидЦенРасчетный.ВалютаЦены
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередьРасчетаЦен.НомерОчередиЦен,
	|	ОчередьРасчетаЦен.ПериодЗаписи,
	|	ОчередьРасчетаЦен.ВидЦенРасчетный
	|ИТОГИ ПО
	|	НомерОчередиЦен";
	
	ВыборкаНомеровОчередей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	Пока ВыборкаНомеровОчередей.Следующий() Цикл
		
		Выборка = ВыборкаНомеровОчередей.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПараметрыРасчета = Новый Структура;
			ПараметрыРасчета.Вставить("ПериодЗаписи", НачалоДня(Выборка.ПериодЗаписи));
			ПараметрыРасчета.Вставить("НомерОчередиЦен", ВыборкаНомеровОчередей.НомерОчередиЦен);
			ПараметрыРасчета.Вставить("ВидЦенРасчетный", Выборка.ВидЦенРасчетный);
			ПараметрыРасчета.Вставить("КоличествоЗаписей", Выборка.КоличествоЗаписей);
			ПараметрыРасчета.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
			
			КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.ВалютаЦены, ПараметрыРасчета.ПериодЗаписи);
			ПараметрыРасчета.Вставить("ВидЦенРасчетныйКурс", ?(ЗначениеЗаполнено(КурсВалюты.Курс), КурсВалюты.Курс, 1));
			ПараметрыРасчета.Вставить("ВидЦенРасчетныйКратность", ?(ЗначениеЗаполнено(КурсВалюты.Кратность), КурсВалюты.Кратность, 1));
			
			ЦеныРассчитаны	= Ложь;
			ОписаниеОшибки	= "";
			Если Выборка.ВидЦенРасчетный.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийПроцент Тогда
				
				РасчетДинамическихЦенНаПроцент(ПараметрыРасчета, ЦеныРассчитаны, ОписаниеОшибки, Истина);
				
			ИначеЕсли Выборка.ВидЦенРасчетный.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийФормула Тогда
				
				РасчетДинамическихЦенПоФормуле(ПараметрыРасчета, ЦеныРассчитаны, ОписаниеОшибки, Истина);
				
			КонецЕсли;
			
			Если НЕ ЦеныРассчитаны Тогда
				
				ВидЦенОбъект							= Выборка.ВидЦенРасчетный.ПолучитьОбъект();
				ВидЦенОбъект.КоличествоПопытокСлужебный = ВидЦенОбъект.КоличествоПопытокСлужебный + 1;
				ВидЦенОбъект.ОписаниеОшибки				= ОписаниеОшибки;
				
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидЦенОбъект, Ложь, Ложь);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьЦеныИОчиститьОчередьЦен(ПериодЗаписи, ВидЦенРасчетный, НомерОчередиЦен, ЗаписиРегистраЗаПериода) Экспорт
		
	Если ЗаписиРегистраЗаПериода.Количество() > 1000 Тогда
		
		ЗаписатьЦеныИОчиститьОчередьЦенОднимНабором(ПериодЗаписи, ВидЦенРасчетный, НомерОчередиЦен, ЗаписиРегистраЗаПериода);
		
	Иначе
		
		ЗаписатьЦеныИОчиститьОчередьЦенПоследовательно(ПериодЗаписи, ВидЦенРасчетный, НомерОчередиЦен, ЗаписиРегистраЗаПериода);
		
	КонецЕсли;
	
	МассивНоменклатуры = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗаписиРегистраЗаПериода.ВыгрузитьКолонку("Номенклатура"));
	ЦенообразованиеСервер.ЗарегистрироватьНоменклатуруНаУзлахСайтаИШтрихМ(МассивНоменклатуры);
	
КонецПроцедуры

#Область ПодпискиНаСобытие

#Область ЦенообразованиеДобавитьЗаписиОчередиЦен

Процедура ПодпискаНаСобытиеПриЗаписиЦены(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоРаботаПодпискиНаСобытие") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НовыеЦены 				= Источник.Выгрузить();
	ЭтоЦеныНоменклатуры		= Истина;
	РабочийНомерОчередиЦен	= Неопределено;
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатурыКонтрагентов") Тогда
		
		ЭтоЦеныНоменклатуры = Ложь;
		
		НовыеЦены.Колонки.ВидЦенКонтрагента.Имя = "ВидЦен";
		
	КонецЕсли;
	
	Если НовыеЦены.Количество() > 0 Тогда
		
		Источник.ДополнительныеСвойства.Свойство("РабочийНомерОчередиЦен", РабочийНомерОчередиЦен);
		АктуализироватьОчередьРасчетаДинамическихЦен(НовыеЦены, ЭтоЦеныНоменклатуры, РабочийНомерОчередиЦен);
		
	Иначе
		
		УдалитьЗаписиОЦенахВДинамическихВидахЦен(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АктуализироватьОчередьРасчетаДинамическихЦен(НовыеЦены, ЭтоЦеныНоменклатуры, РабочийНомерОчередиЦен)
	
	Блокировка = Новый БлокировкаДанных;	
	ЭлементБлокировки = Блокировка.Добавить(?(ЭтоЦеныНоменклатуры = Истина, "Справочник.ВидыЦен", "Справочник.ВидыЦенКонтрагентов"));
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.ИсточникДанных = НовыеЦены;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ВидЦен");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НовыеЦены", НовыеЦены);
	Запрос.УстановитьПараметр("НомерОчередиЦен", РабочийНомерОчередиЦен);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НовыеЦены.Период КАК ПериодЗаписи,
	|	НовыеЦены.ВидЦен КАК ВидЦен,
	|	ВЫРАЗИТЬ(НовыеЦены.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	НовыеЦены.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ НовыеЦены
	|ИЗ
	|	&НовыеЦены КАК НовыеЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеЦены.ПериодЗаписи КАК ПериодЗаписи,
	|	НовыеЦены.ВидЦен КАК ВидЦен,
	|	НовыеЦены.Номенклатура КАК Номенклатура,
	|	НовыеЦены.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	НовыеЦены.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ НовыеЦеныСЦеновымиГруппами
	|ИЗ
	|	НовыеЦены КАК НовыеЦены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦен,
	|	ЦеноваяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеЦеныСЦеновымиГруппами.ПериодЗаписи КАК ПериодЗаписи,
	|	СвязиВидовЦен.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	НовыеЦеныСЦеновымиГруппами.ВидЦен КАК ВидЦенБазовый,
	|	НовыеЦеныСЦеновымиГруппами.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦенБазовыйЦеновойГруппы,
	|	НовыеЦеныСЦеновымиГруппами.Номенклатура КАК Номенклатура,
	|	НовыеЦеныСЦеновымиГруппами.Характеристика КАК Характеристика,
	|	&НомерОчередиЦен КАК НомерОчередиЦен,
	|	ВЫБОР
	|		КОГДА СвязиВидовЦенУточнениеЦеновыхГрупп.ВидЦенРасчетный ЕСТЬ NULL
	|			ТОГДА ""NULL""
	|		ИНАЧЕ СвязиВидовЦенУточнениеЦеновыхГрупп.ВидЦенРасчетный
	|	КОНЕЦ КАК ПризнакУточнения
	|ИЗ
	|	НовыеЦеныСЦеновымиГруппами КАК НовыеЦеныСЦеновымиГруппами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦен
	|		ПО НовыеЦеныСЦеновымиГруппами.ВидЦен = СвязиВидовЦен.ВидЦенБазовый
	|			И (СвязиВидовЦен.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦенУточнениеЦеновыхГрупп
	|		ПО (СвязиВидовЦенУточнениеЦеновыхГрупп.ВидЦенБазовый = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|			И НовыеЦеныСЦеновымиГруппами.ВидЦен = СвязиВидовЦенУточнениеЦеновыхГрупп.ВидЦенБазовыйЦеновойГруппы
	|			И НовыеЦеныСЦеновымиГруппами.ЦеноваяГруппа = СвязиВидовЦенУточнениеЦеновыхГрупп.ЦеноваяГруппа
	|ГДЕ
	|	СвязиВидовЦен.ВидЦенРасчетный <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|	И СвязиВидовЦенУточнениеЦеновыхГрупп.ВидЦенРасчетный ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеЦеныСЦеновымиГруппами.ПериодЗаписи КАК ПериодЗаписи,
	|	СвязиВидовЦен.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	НовыеЦеныСЦеновымиГруппами.ВидЦен КАК ВидЦенБазовый,
	|	НовыеЦеныСЦеновымиГруппами.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	НовыеЦеныСЦеновымиГруппами.ВидЦен КАК ВидЦенБазовыйЦеновойГруппы,
	|	НовыеЦеныСЦеновымиГруппами.Номенклатура КАК Номенклатура,
	|	НовыеЦеныСЦеновымиГруппами.Характеристика КАК Характеристика,
	|	&НомерОчередиЦен КАК НомерОчередиЦен
	|ИЗ
	|	НовыеЦеныСЦеновымиГруппами КАК НовыеЦеныСЦеновымиГруппами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦен
	|		ПО НовыеЦеныСЦеновымиГруппами.ЦеноваяГруппа = СвязиВидовЦен.ЦеноваяГруппа
	|			И НовыеЦеныСЦеновымиГруппами.ВидЦен = СвязиВидовЦен.ВидЦенБазовыйЦеновойГруппы
	|ГДЕ
	|	НЕ СвязиВидовЦен.ВидЦенРасчетный ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РегистрацияПоБазовымВидамЦен = РезультатЗапроса[2].Выгрузить();
	РегистрацияПоЦеновымГруппам = РезультатЗапроса[3].Выгрузить();
	
	НачатьТранзакцию();
	
	Попытка
		
		Если РегистрацияПоБазовымВидамЦен.Количество() > 0 
			ИЛИ РегистрацияПоЦеновымГруппам.Количество() > 0 Тогда
				
			Если РабочийНомерОчередиЦен = Неопределено Тогда 		
				РабочийНомерОчередиЦен = ЦенообразованиеСервер.УстановитьРабочийНомерОчередиЦен();
			КонецЕсли;    
			
			РегистрацияПоБазовымВидамЦен.ЗаполнитьЗначения(РабочийНомерОчередиЦен, "НомерОчередиЦен");
			РегистрацияПоЦеновымГруппам.ЗаполнитьЗначения(РабочийНомерОчередиЦен, "НомерОчередиЦен");
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьРасчетаЦен");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("НомерОчередиЦен", РабочийНомерОчередиЦен);			
			Блокировка.Заблокировать();
			
		КонецЕсли;
		
		Если РегистрацияПоБазовымВидамЦен.Количество() > 2000 Тогда		
		
			ВидыЦенРасчетные = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РегистрацияПоБазовымВидамЦен.ВыгрузитьКолонку("ВидЦенРасчетный"));
			
			Для каждого ВидЦенРасчетный Из ВидыЦенРасчетные Цикл
				
				СтрокиПоВидуЦены = РегистрацияПоБазовымВидамЦен.НайтиСтроки(Новый Структура("ВидЦенРасчетный", ВидЦенРасчетный));
				
				Для каждого СтрокаТаблицы Из СтрокиПоВидуЦены Цикл
					
					МенеджерЗаписиОчередиРасчета = РегистрыСведений.ОчередьРасчетаЦен.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписиОчередиРасчета, СтрокаТаблицы);
					МенеджерЗаписиОчередиРасчета.НомерОчередиЦен = РабочийНомерОчередиЦен;
					МенеджерЗаписиОчередиРасчета.Записать(Истина);
					
				КонецЦикла;	
				РабочийНомерОчередиЦен = УстановитьРабочийНомерОчередиЦен(); 				
				
			КонецЦикла; 
			
		Иначе
			
			Для каждого СтрокаТаблицы Из РегистрацияПоБазовымВидамЦен Цикл
				
				МенеджерЗаписиОчередиРасчета = РегистрыСведений.ОчередьРасчетаЦен.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписиОчередиРасчета, СтрокаТаблицы);
				МенеджерЗаписиОчередиРасчета.НомерОчередиЦен = РабочийНомерОчередиЦен;
				МенеджерЗаписиОчередиРасчета.Записать(Истина);
				
			КонецЦикла;	
			
		КонецЕсли;
		
		Для каждого СтрокаТаблицы Из РегистрацияПоЦеновымГруппам Цикл
			
			МенеджерЗаписиОчередиРасчета = РегистрыСведений.ОчередьРасчетаЦен.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписиОчередиРасчета, СтрокаТаблицы);
			МенеджерЗаписиОчередиРасчета.Записать(Истина);
			
		КонецЦикла;
		
		Если РегистрацияПоБазовымВидамЦен.Количество() > 0
			ИЛИ РегистрацияПоЦеновымГруппам.Количество() > 0
			Тогда
			
			УстановитьИспользованиеРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчередьРасчетаЦен, Истина);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьЗаписиОЦенахВДинамическихВидахЦен(Источник)
	
	ПроверитьЗависимыеЦены = Ложь;
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатурыКонтрагентов") Тогда
		
		ВидЦен = Источник.Отбор.ВидЦенКонтрагента.Значение;
		ПроверитьЗависимыеЦены = Истина;
		
	Иначе
		
		ВидЦен = Источник.Отбор.ВидЦен.Значение;
		ПроверитьЗависимыеЦены = ЗначениеЗаполнено(ВидЦен) И ВидЦен.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический;
		
	КонецЕсли;
	
	Если ПроверитьЗависимыеЦены Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		КлючУдаляемойЗаписи					= Новый Структура("Период, ВидЦен, Номенклатура, Характеристика");
		КлючУдаляемойЗаписи.Период			= НачалоДня(Источник.Отбор.Период.Значение);
		КлючУдаляемойЗаписи.Номенклатура	= Источник.Отбор.Номенклатура.Значение;
		КлючУдаляемойЗаписи.Характеристика	= Источник.Отбор.Характеристика.Значение;
		
		ЦеноваяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КлючУдаляемойЗаписи.Номенклатура, "ЦеноваяГруппа");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
		Запрос.УстановитьПараметр("ЦеноваяГруппа", ЦеноваяГруппа);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязиВидовЦен.ВидЦенРасчетный КАК ВидЦенРасчетный,
		|	СвязиВидовЦен.ВидЦенБазовый КАК ВидЦенБазовый,
		|	СвязиВидовЦен.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	СвязиВидовЦен.ВидЦенБазовыйЦеновойГруппы КАК ВидЦенБазовыйЦеновойГруппы
		|ИЗ
		|	РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦен
		|ГДЕ
		|	СвязиВидовЦен.ВидЦенБазовый = &ВидЦен
		|	И СвязиВидовЦен.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвязиВидовЦен.ВидЦенРасчетный КАК ВидЦенРасчетный,
		|	СвязиВидовЦен.ВидЦенБазовый КАК ВидЦенБазовый,
		|	СвязиВидовЦен.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	СвязиВидовЦен.ВидЦенБазовыйЦеновойГруппы КАК ВидЦенБазовыйЦеновойГруппы
		|ИЗ
		|	РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦен
		|ГДЕ
		|	СвязиВидовЦен.ЦеноваяГруппа <> ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		РегистрацияПоБазовымВидамЦен = РезультатЗапроса[0].Выгрузить();
		РегистрацияПоЦеновымГруппам = РезультатЗапроса[1].Выгрузить();
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("ВидЦенБазовый", ВидЦен);
		
		СвязиПоБазовому = РегистрацияПоБазовымВидамЦен.НайтиСтроки(ОтборСтрок);
		Если СвязиПоБазовому.Количество() > 0 Тогда
			
			Для каждого СтрокаТаблицы Из СвязиПоБазовому Цикл
				
				ОтборСтрок.Вставить("ВидЦенРасчетный", СтрокаТаблицы.ВидЦенРасчетный);
				ОтборСтрок.Вставить("ЦеноваяГруппа", ЦеноваяГруппа);
				
				СвязиПоЦеновойГруппе = РегистрацияПоЦеновымГруппам.НайтиСтроки(ОтборСтрок);
				Если СвязиПоЦеновойГруппе.Количество() = 0 Тогда
					
					КлючУдаляемойЗаписи.ВидЦен = СтрокаТаблицы.ВидЦенРасчетный;
					УдалитьОднуЗаписьПоКлючу(КлючУдаляемойЗаписи);
					
				ИначеЕсли СвязиПоЦеновойГруппе.Количество() = 1
					И СвязиПоЦеновойГруппе[0].ВидЦенБазовыйЦеновойГруппы = ВидЦен Тогда
					
					КлючУдаляемойЗаписи.ВидЦен = СвязиПоЦеновойГруппе[0].ВидЦенРасчетный;
					УдалитьОднуЗаписьПоКлючу(КлючУдаляемойЗаписи);
					
				ИначеЕсли  СвязиПоЦеновойГруппе.Количество() > 1 Тогда
					
					// В случае коллизии пройдем мимо (рассмотреть добавление сообщения об ошибке)
					ОписаниеОшибки = СтрШаблон(НСтр("ru ='Для вида цен <%1> есть два уточнения по ценовой группе <%2>.'"), СтрокаТаблицы.ВидЦенРасчетный, ЦеноваяГруппа);
					ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ВидыЦен, СтрокаТаблицы.ВидЦенРасчетный, ОписаниеОшибки);
					
					Продолжить;
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЦеноваяГруппа) Тогда
			
			ОтборСтрок.Очистить();
			ОтборСтрок.Вставить("ЦеноваяГруппа", ЦеноваяГруппа);
			ОтборСтрок.Вставить("ВидЦенБазовыйЦеновойГруппы", ВидЦен);
			
			СвязиПоЦеновойГруппе = РегистрацияПоЦеновымГруппам.НайтиСтроки(ОтборСтрок);
			Для каждого СтрокаТаблицы Из СвязиПоЦеновойГруппе Цикл
				
				КлючУдаляемойЗаписи.ВидЦен = СтрокаТаблицы.ВидЦенРасчетный;
				УдалитьОднуЗаписьПоКлючу(КлючУдаляемойЗаписи);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьОднуЗаписьПоКлючу(КлючУдаляемойЗаписи)
	
	НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(КлючУдаляемойЗаписи.Период, Истина);
	НаборЗаписей.Отбор.ВидЦен.Установить(КлючУдаляемойЗаписи.ВидЦен, Истина);
	НаборЗаписей.Отбор.Номенклатура.Установить(КлючУдаляемойЗаписи.Номенклатура, Истина);
	НаборЗаписей.Отбор.Характеристика.Установить(КлючУдаляемойЗаписи.Характеристика, Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоРаботаПодпискиНаСобытие", Истина);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ЦенообразованиеПриИзмененииКурсаВалюты

Процедура ПодпискаНаСобытиеПриИзмененииКурсаВалюты(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Источник.Выгрузить().Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЭлементОтбора = Источник.Отбор.Найти("Период");
	Если ЭлементОтбора = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Период = ЭлементОтбора.Значение;
	
	ЭлементОтбора = Источник.Отбор.Найти("Валюта");
	Если ЭлементОтбора = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РабочийНомерОчередиЦен	= УстановитьРабочийНомерОчередиЦен();
	ВалютаИзменение			= ЭлементОтбора.Значение;
	
	СпособУстановкиКурса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВалютаИзменение, "СпособУстановкиКурса");
	Если СпособУстановкиКурса <> Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТребуетсяПереключитьИспользованиеЗадания = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ВалютаИзменение", ВалютаИзменение);
	Запрос.УстановитьПараметр("НомерОчередиЦен", РабочийНомерОчередиЦен);
	
	Запрос.Текст =
	"
	//
	// ::: [0] Динамические виды цен (формула) с валютой, у которой изменился курс
	//
	|ВЫБРАТЬ
	|	ВидыЦен.Ссылка КАК ВидЦенРасчетный
	|ПОМЕСТИТЬ ВидыЦенПоВалюте
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.ДинамическийФормула)
	|	И ВидыЦен.ВалютаЦены = &ВалютаИзменение
	|;
	|
	//
	// ::: [1] Очередь расчета для видов цен из [0]
	//
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыЦен.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
	|	ЛОЖЬ КАК ПересчетВыполнен,
	|	&Период КАК ПериодЗаписи,
	|	&НомерОчередиЦен КАК НомерОчередиЦен
	|ИЗ
	|	ВидыЦенПоВалюте КАК ВидыЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, Актуальность) КАК ЦеныНоменклатуры
	|		ПО ВидыЦен.ВидЦенРасчетный = ЦеныНоменклатуры.ВидЦен
	|ГДЕ
	|	НЕ ЦеныНоменклатуры.Номенклатура ЕСТЬ NULL
	|ИТОГИ ПО
	|	ВидЦенРасчетный
	|;
	|
	//
	// ::: [2] Статические виды цен с валютой, у которой изменился курс
	//
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЦен.Ссылка КАК ВидЦен
	|ПОМЕСТИТЬ СтатическиеВидыЦенПоВалюте
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Статический)
	|	И ВидыЦен.ВалютаЦены = &ВалютаИзменение
	|;
	|
	//
	// ::: [3] Расчетные виды цен, которые связаны с [2] по формулам ценовым групп
	//
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвязиВидовЦенСлужебный.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	СвязиВидовЦенСлужебный.ЦеноваяГруппа КАК ЦеноваяГруппа
	|ПОМЕСТИТЬ СтатическиеВидыЦенВФормулахПоЦеновымГруппам
	|ИЗ
	|	РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦенСлужебный
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатическиеВидыЦенПоВалюте КАК СтатическиеВидыЦенПоВалюте
	|		ПО (СвязиВидовЦенСлужебный.ЦеноваяГруппа <> ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка))
	|			И СвязиВидовЦенСлужебный.ВидЦенБазовыйЦеновойГруппы = СтатическиеВидыЦенПоВалюте.ВидЦен
	|ГДЕ
	|	НЕ СтатическиеВидыЦенПоВалюте.ВидЦен ЕСТЬ NULL
	|;
	|
	//
	// ::: [4] Расчетные виды цен, которые связаны с [2] по основным формулам (без привязки к ценовым группам)
	//
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвязиВидовЦенСлужебный.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	СвязиВидовЦенСлужебный.ЦеноваяГруппа КАК ЦеноваяГруппа
	|ПОМЕСТИТЬ СтатическиеВидыЦенВОсновныхФормулах
	|ИЗ
	|	РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦенСлужебный
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатическиеВидыЦенПоВалюте КАК СтатическиеВидыЦенПоВалюте
	|		ПО (СвязиВидовЦенСлужебный.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка))
	|			И СвязиВидовЦенСлужебный.ВидЦенБазовый = СтатическиеВидыЦенПоВалюте.ВидЦен
	|ГДЕ
	|	НЕ СтатическиеВидыЦенПоВалюте.ВидЦен ЕСТЬ NULL
	|;
	|
	//
	// ::: [5] Очередь расчета по видам цен из [3]
	//
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатическиеВидыЦенВФормулахПоЦеновымГруппам.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
	|	ЛОЖЬ КАК ПересчетВыполнен,
	|	&Период КАК ПериодЗаписи
	|ПОМЕСТИТЬ ОчередьРасчетаЦенПоФормуламЦеновыхГрупп
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, Актуальность) КАК ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатическиеВидыЦенВФормулахПоЦеновымГруппам КАК СтатическиеВидыЦенВФормулахПоЦеновымГруппам
	|		ПО ЦеныНоменклатуры.ВидЦен = СтатическиеВидыЦенВФормулахПоЦеновымГруппам.ВидЦенРасчетный
	|			И ЦеныНоменклатуры.Номенклатура.ЦеноваяГруппа = СтатическиеВидыЦенВФормулахПоЦеновымГруппам.ЦеноваяГруппа
	|ГДЕ
	|	НЕ СтатическиеВидыЦенВФормулахПоЦеновымГруппам.ВидЦенРасчетный ЕСТЬ NULL
	|;
	|
	//
	// ::: [6] Очередь расчета по видам цен из [4] исключая [3]
	//
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатическиеВидыЦенВОсновныхФормулах.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
	|	ЛОЖЬ КАК ПересчетВыполнен,
	|	&Период КАК ПериодЗаписи
	|ПОМЕСТИТЬ ОчередьРасчетаЦенПоОсновнымФормулам
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, Актуальность) КАК ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатическиеВидыЦенВОсновныхФормулах КАК СтатическиеВидыЦенВОсновныхФормулах
	|		ПО ЦеныНоменклатуры.ВидЦен = СтатическиеВидыЦенВОсновныхФормулах.ВидЦенРасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьРасчетаЦенПоФормуламЦеновыхГрупп КАК ОчередьРасчетаЦенПоФормуламЦеновыхГрупп
	|		ПО ЦеныНоменклатуры.ВидЦен = ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.ВидЦенРасчетный
	|			И ЦеныНоменклатуры.Номенклатура = ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.Номенклатура
	|			И ЦеныНоменклатуры.Характеристика = ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.Характеристика
	|ГДЕ
	|	НЕ СтатическиеВидыЦенВОсновныхФормулах.ВидЦенРасчетный ЕСТЬ NULL
	|	И ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.Номенклатура ЕСТЬ NULL
	|;
	|
	//
	// ::: [7] Сводная очередь расчета цен без дублей
	//
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередьРасчетаЦенПоОсновнымФормулам.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	ОчередьРасчетаЦенПоОсновнымФормулам.Номенклатура КАК Номенклатура,
	|	ОчередьРасчетаЦенПоОсновнымФормулам.Характеристика КАК Характеристика,
	|	ОчередьРасчетаЦенПоОсновнымФормулам.ПересчетВыполнен КАК ПересчетВыполнен,
	|	ОчередьРасчетаЦенПоОсновнымФормулам.ПериодЗаписи КАК ПериодЗаписи,
	|	&НомерОчередиЦен КАК НомерОчередиЦен
	|ИЗ
	|	ОчередьРасчетаЦенПоОсновнымФормулам КАК ОчередьРасчетаЦенПоОсновнымФормулам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.ВидЦенРасчетный,
	|	ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.Номенклатура,
	|	ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.Характеристика,
	|	ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.ПересчетВыполнен,
	|	ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.ПериодЗаписи,
	|	&НомерОчередиЦен КАК НомерОчередиЦен
	|ИЗ
	|	ОчередьРасчетаЦенПоФормуламЦеновыхГрупп КАК ОчередьРасчетаЦенПоФормуламЦеновыхГрупп
	|ИТОГИ ПО
	|	ВидЦенРасчетный";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	АктуализироватьОчередьРасчетаИзмениласьВалютаВидаЦен(Период, РезультатЗапроса[1], ТребуетсяПереключитьИспользованиеЗадания);
	АктуализироватьОчередьРасчетаИзмениласьВалютаПараметраФормулы(Период, РезультатЗапроса[7], ТребуетсяПереключитьИспользованиеЗадания);
	
	Если ТребуетсяПереключитьИспользованиеЗадания Тогда
		
		УстановитьИспользованиеРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчередьРасчетаЦен, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АктуализироватьОчередьРасчетаИзмениласьВалютаВидаЦен(Период, РезультатЗапроса, ТребуетсяПереключитьИспользованиеЗадания)
	
	ВыборкаВидыЦен = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидыЦен.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ОчередьРасчетаЦен.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПериодЗаписи.Установить(Период, Истина);
		НаборЗаписей.Отбор.ВидЦенРасчетный.Установить(ВыборкаВидыЦен.ВидЦенРасчетный, Истина);
		НаборЗаписей.Очистить();
		
		ВыборкаЗаписей = ВыборкаВидыЦен.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаЗаписей);
			
		КонецЦикла;
		
		ТребуетсяПереключитьИспользованиеЗадания = (НаборЗаписей.Количество() > 0);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура АктуализироватьОчередьРасчетаИзмениласьВалютаПараметраФормулы(Период, РезультатЗапроса, ТребуетсяПереключитьИспользованиеЗадания)
	
	ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика");
	
	ВыборкаВидыЦен = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидыЦен.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ОчередьРасчетаЦен.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПериодЗаписи.Установить(Период, Истина);
		НаборЗаписей.Отбор.ВидЦенРасчетный.Установить(ВыборкаВидыЦен.ВидЦенРасчетный, Истина);
		НаборЗаписей.Прочитать();
		
		ТекущиеЗаписиОчередиЦен = НаборЗаписей.Выгрузить();
		НаборЗаписей.Очистить();
		
		ВыборкаЗаписей = ВыборкаВидыЦен.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			ПараметрыОтбора.Номенклатура = ВыборкаЗаписей.Номенклатура;
			ПараметрыОтбора.Характеристика = ВыборкаЗаписей.Характеристика;
			
			Если ТекущиеЗаписиОчередиЦен.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТекущиеЗаписиОчередиЦен.Добавить(), ВыборкаЗаписей);
			
		КонецЦикла;
		
		Если ТекущиеЗаписиОчередиЦен.Количество() > 0 Тогда
			
			ТребуетсяПереключитьИспользованиеЗадания = Истина;
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Загрузить(ТекущиеЗаписиОчередиЦен);
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РегламентныеЗадания

Процедура УстановитьИспользованиеРегламентногоЗадания(МетаданныеРегЗадания, Использование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", МетаданныеРегЗадания);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Использование", Использование);
	
	МассивЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Для каждого Задание Из МассивЗаданий Цикл
		
		Если Задание.Использование = Использование Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, Параметры);
		
	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОчередьРасчетаЦен() Экспорт
	
	ОчередьРасчетаЦенСтартИтерации();
	
КонецПроцедуры

Процедура ОчередьРасчетаЦенСтартИтерации()
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , , НСтр("ru ='Процесс запущен.'"));
	
	РассчитатьЦеныИзОчередиЦен();
	ОбновитьПризнакиАктуальностиВидовЦен();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИБ

Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("ЦенообразованиеСервер.ОчередьРасчетаЦен");
	
	// Старые задания оставлены на случай, если задание было запланировано, но не успело выполнится до обновления.
	СоответствиеИменПсевдонимам.Вставить("ЦенообразованиеСервер.РасчетОчередиЦен");
	СоответствиеИменПсевдонимам.Вставить("ЦенообразованиеСервер.РасчетОчередиЦенРазовымЗаданием");
	
КонецПроцедуры

#КонецОбласти

#Область УстарелоРегламентныеЗадания

Процедура РасчетОчередиЦен() Экспорт
	
	РасчетОчередиЦенРазовымЗаданием();
	
КонецПроцедуры

Процедура РасчетОчередиЦенРазовымЗаданием() Экспорт
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , , НСтр("ru ='Отключение устаревшего задания <Обработка очереди цен>.'"));
	УстановитьИспользованиеРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалитьОбработкаОчередиЦен, Ложь);
	
	// Устарело. Методы выполняются из ОчередьРасчетаЦен()
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти