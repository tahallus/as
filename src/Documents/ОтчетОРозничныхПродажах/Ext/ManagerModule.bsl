#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(КассаККМ)
	|	И ЗначениеРазрешено(СтруктурнаяЕдиница)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	// Движения формируются только для не фискальных регистраторов (ФР).
	// Для ФР движения формируются в чеках ККМ.
	// Использование в рознице заказов покупателей доступно, если отключено архивирование чеков.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.ЗаказПокупателя КАК СчетНаОплату,
	|	0 КАК СуммаАванса,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.ВалютаДокумента = ТаблицаДокумента.ЗаказПокупателя.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаВал
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаВал * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаОплаты
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютСчета
	|		ПО ТаблицаДокумента.ЗаказПокупателя.ВалютаДокумента = КурсыВалютСчета.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
	|		ПО ТаблицаДокумента.ВалютаДокумента = КурсыВалютКассы.Валюта
	|ГДЕ
	|	(ТаблицаДокумента.КассаККМ.ТипКассы <> ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор) ИЛИ &ПолноеПроведение)
	|	И ТаблицаДокумента.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И ТаблицаДокумента.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|	И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ЗаказПокупателя) = ТИП(Документ.ЗаказПокупателя)
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	|	И ТаблицаДокумента.ЗаказПокупателя.Контрагент.ВестиРасчетыПоЗаказам
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.ЗаказПокупателя
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.ВалютаДокумента = ТаблицаДокумента.ЗаказПокупателя.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаВал
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаВал * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаСчетовИЗаказов()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	// Движения формируются только для не фискальных регистраторов (ФР).
	// Для ФР движения формируются в чеках ККМ.
	// Использование в рознице заказов покупателей доступно, если отключено архивирование чеков.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗаказыПокупателей.Дата КАК Период,
	|	ТаблицаЗаказыПокупателей.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказыПокупателей.УчетПотребностиПоСкладам
	|				И ТаблицаЗаказыПокупателей.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаЗаказыПокупателей.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ТаблицаЗаказыПокупателей.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика КАК Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ТаблицаЗаказыПокупателей.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗаказыПокупателей
	|ГДЕ
	|	(ТаблицаЗаказыПокупателей.КассаККМ.ТипКассы <> ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|			ИЛИ &ПолноеПроведение)
	|	И ТаблицаЗаказыПокупателей.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|	И ТаблицаЗаказыПокупателей.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Дата,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказыПокупателей.УчетПотребностиПоСкладам
	|				И ТаблицаЗаказыПокупателей.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаЗаказыПокупателей.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаЗаказыПокупателей.Количество) <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗаказыПокупателей = РезультатЗапроса.Выгрузить();
	РегистрыНакопления.ЗаказыПокупателей.ДобавитьДвиженияСУчетомСкладов(ДокументСсылкаОтчетОРозничныхПродажах, ТаблицаЗаказыПокупателей);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей", ТаблицаЗаказыПокупателей);
	
КонецПроцедуры // СформироватьТаблицаЗаказыПокупателей()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыИсточник(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ТаблицаЗапасы.СтруктурнаяЕдиница) = ТИП(Справочник.СтруктурныеЕдиницы)
	|	И ТаблицаЗапасы.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасыИсточник КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыИсточник.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыИсточник[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
		
		КоличествоТребуется = СтрокаТаблицаЗапасы.Количество;
			
		Если КоличествоТребуется > 0 Тогда
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуется Тогда

				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуется / КоличествоОстаток , 2, 1);

				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуется;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;

			ИначеЕсли КоличествоОстаток = КоличествоТребуется Тогда

				СуммаКСписанию = СуммаОстаток;

				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;

			Иначе
				СуммаКСписанию = 0;	
			КонецЕсли;
	
			// Расход.
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуется;
			
			// Приход.
			СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
					
			СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
			СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
			СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
			СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
			СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
			СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
			СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
			СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
			СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
			СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
			СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
			СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
			СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПокупателя;
					
			СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
			СтрокаТаблицыПриход.Количество = КоличествоТребуется;
				
			СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаЗапасовИсточник()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасы(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ДокументПродажи ЕСТЬ NULL
	|			ТОГДА ТаблицаЗапасы.Документ
	|		ИНАЧЕ ТаблицаЗапасы.ДокументПродажи
	|	КОНЕЦ КАК ДокументПродажи,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ДокументПродажи ЕСТЬ NULL
	|			ТОГДА ТаблицаЗапасы.Подразделение
	|		ИНАЧЕ ТаблицаЗапасы.ПодразделениеПродажи
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ДокументПродажи ЕСТЬ NULL
	|			ТОГДА ТаблицаЗапасы.Ответственный
	|		ИНАЧЕ ТаблицаЗапасы.ОтветственныйПродажи
	|	КОНЕЦ КАК Ответственный,
	|	ТаблицаЗапасы.ТоварыНаКомиссии КАК ТоварыНаКомиссии,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПродажи,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчетаЗапасов КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаЗапасы.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаЗапасы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	СУММА(ТаблицаЗапасы.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма,
	|	0 КАК Себестоимость,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ТаблицаЗапасы.СчетУчетаЗатрат
	|		ИНАЧЕ ТаблицаЗапасы.СчетУчетаСебестоимостиПродаж
	|	КОНЕЦ КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетКт,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ВЫБОР
	|		КОГДА СУММА(ТаблицаЗапасы.Количество) < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Возврат,
	|	ТаблицаЗапасы.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасыПодготовленная
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	(ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Дата,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Документ,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)),
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)),
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.КоррСчетУчетаЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.НоменклатураНабора,
	|	ТаблицаЗапасы.ТипНоменклатуры,
	|	ТаблицаЗапасы.НаправлениеДеятельности,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.ХарактеристикаНабора,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррПартия,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СтавкаНДС,
	|	ТаблицаЗапасы.ТоварыНаКомиссии,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ТаблицаЗапасы.СчетУчетаЗатрат
	|		ИНАЧЕ ТаблицаЗапасы.СчетУчетаСебестоимостиПродаж
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ДокументПродажи ЕСТЬ NULL
	|			ТОГДА ТаблицаЗапасы.Документ
	|		ИНАЧЕ ТаблицаЗапасы.ДокументПродажи
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ДокументПродажи ЕСТЬ NULL
	|			ТОГДА ТаблицаЗапасы.Подразделение
	|		ИНАЧЕ ТаблицаЗапасы.ПодразделениеПродажи
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ДокументПродажи ЕСТЬ NULL
	|			ТОГДА ТаблицаЗапасы.Ответственный
	|		ИНАЧЕ ТаблицаЗапасы.ОтветственныйПродажи
	|	КОНЕЦ,
	|	ТаблицаЗапасы.Контрагент,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СчетУчетаЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаЗапасы.Период КАК Период,
	|	ВременнаяТаблицаЗапасы.ВидДвижения КАК ВидДвижения,
	|	ВременнаяТаблицаЗапасы.Организация КАК Организация,
	|	ВременнаяТаблицаЗапасы.Документ КАК Документ,
	|	ВременнаяТаблицаЗапасы.ДокументПродажи КАК ДокументПродажи,
	|	ВременнаяТаблицаЗапасы.Подразделение КАК Подразделение,
	|	ВременнаяТаблицаЗапасы.Ответственный КАК Ответственный,
	|	ВременнаяТаблицаЗапасы.ТоварыНаКомиссии КАК ТоварыНаКомиссии,
	|	ВременнаяТаблицаЗапасы.ЗаказПродажи КАК ЗаказПродажи,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.КоррСтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ВременнаяТаблицаЗапасы.КоррСчетУчета КАК КоррСчетУчета,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ВременнаяТаблицаЗапасы.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВременнаяТаблицаЗапасы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВременнаяТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ВременнаяТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ВременнаяТаблицаЗапасы.Партия КАК Партия,
	|	ВременнаяТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ВременнаяТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВременнаяТаблицаЗапасы.КоррЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ВременнаяТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблицаЗапасы.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.Резерв > ВременнаяТаблицаЗапасы.Количество
	|				И ВременнаяТаблицаЗапасы.Количество > 0
	|			ТОГДА ВременнаяТаблицаЗапасы.Количество
	|		КОГДА ВременнаяТаблицаЗапасы.Количество <= 0
	|			ТОГДА 0
	|		ИНАЧЕ ВременнаяТаблицаЗапасы.Резерв
	|	КОНЕЦ КАК Резерв,
	|	ВременнаяТаблицаЗапасы.СуммаНДС КАК СуммаНДС,
	|	ВременнаяТаблицаЗапасы.Сумма КАК Сумма,
	|	ВременнаяТаблицаЗапасы.Себестоимость КАК Себестоимость,
	|	ВременнаяТаблицаЗапасы.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
	|	ВременнаяТаблицаЗапасы.СчетДт КАК СчетДт,
	|	ВременнаяТаблицаЗапасы.СчетКт КАК СчетКт,
	|	ВременнаяТаблицаЗапасы.Содержание КАК Содержание,
	|	ВременнаяТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	ВременнаяТаблицаЗапасы.Возврат КАК Возврат,
	|	ВременнаяТаблицаЗапасы.Контрагент КАК Контрагент
	|ИЗ
	|	ВременнаяТаблицаЗапасыПодготовленная КАК ВременнаяТаблицаЗапасы";
	
	Запрос.УстановитьПараметр("ОприходованиеЗапасов", НСтр("ru = 'Оприходование запасов'"));
	Запрос.УстановитьПараметр("СписаниеЗапасов", НСтр("ru = 'Списание запасов'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Выгрузить());
	
	СформироватьТаблицаЗапасыПродажа(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // СформироватьТаблицаЗапасы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПродажа(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ВЫБОР
	|			КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|				ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОНЕЦ КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|	ГДЕ
	|		ТаблицаЗапасы.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|		И НЕ ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчетаЗапасов,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Определение оснований
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.ДокументПродажи КАК ДокументПродажи
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	НЕ ТаблицаЗапасы.ДокументПродажи ЕСТЬ NULL
	|	И ТаблицаЗапасы.ДокументПродажи <> ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)";
	Основания = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументПродажи");
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Запасы.Период КАК ДатаОстатка,
	|	Запасы.Регистратор КАК Регистратор,
	|	Запасы.Организация КАК Организация,
	|	Запасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	Запасы.СчетУчета КАК СчетУчета,
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	Запасы.Партия КАК Партия,
	|	Запасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	Запасы.Количество КАК КоличествоОстаток,
	|	Запасы.Сумма КАК СуммаОстаток
	|ПОМЕСТИТЬ ДвиженияПоОснованиям
	|ИЗ
	|	РегистрНакопления.Запасы КАК Запасы
	|ГДЕ
	|	Запасы.ДокументПродажи В(&Основания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПериодКонтроля КАК ДатаОстатка,
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	&Ссылка КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|		ЗапасыОстатки.СуммаОстаток КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация КАК Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|						ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|						ТаблицаЗапасы.Характеристика КАК Характеристика,
	|						ТаблицаЗапасы.Партия КАК Партия,
	|						ВЫБОР
	|							КОГДА ТаблицаЗапасы.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|								ТОГДА ВЫБОР
	|										КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|											ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|										ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|									КОНЕЦ
	|							ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						КОНЕЦ КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ВЫБОР
	|							КОГДА ТаблицаЗапасы.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|								ТОГДА ВЫБОР
	|										КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|											ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|										ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|									КОНЕЦ
	|							ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						КОНЕЦ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				
	|					ОБЪЕДИНИТЬ ВСЕ
	|				
	|					ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДвиженияДокументаЗапасы.Количество
	|			ИНАЧЕ -ДвиженияДокументаЗапасы.Количество
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДвиженияДокументаЗапасы.Сумма
	|			ИНАЧЕ -ДвиженияДокументаЗапасы.Сумма
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияПоОснованиям.ДатаОстатка,
	|	ДвиженияПоОснованиям.Организация,
	|	ДвиженияПоОснованиям.СтруктурнаяЕдиница,
	|	ДвиженияПоОснованиям.СчетУчета,
	|	ДвиженияПоОснованиям.Номенклатура,
	|	ДвиженияПоОснованиям.Характеристика,
	|	ДвиженияПоОснованиям.Партия,
	|	ДвиженияПоОснованиям.ЗаказПокупателя,
	|	ДвиженияПоОснованиям.КоличествоОстаток,
	|	ДвиженияПоОснованиям.СуммаОстаток,
	|	ДвиженияПоОснованиям.Регистратор
	|ИЗ
	|	ДвиженияПоОснованиям КАК ДвиженияПоОснованиям";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("Основания", Основания);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	ПериодКонтроля = СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата;
	Запрос.УстановитьПараметр("ПериодКонтроля", ПериодКонтроля);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		СтруктураДляПоиска.Вставить("Регистратор", ДокументСсылкаОтчетОРозничныхПродажах);
		
		КоличествоТребуетсяРезерв = ?(ЗначениеЗаполнено(СтрокаТаблицаЗапасы.Резерв), СтрокаТаблицаЗапасы.Резерв, 0);
		КоличествоТребуетсяСвободныйОстаток = ?(ЗначениеЗаполнено(СтрокаТаблицаЗапасы.Количество), СтрокаТаблицаЗапасы.Количество, 0);
		
		Если КоличествоТребуетсяРезерв > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяСвободныйОстаток - КоличествоТребуетсяРезерв;
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяРезерв;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход. Запасы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
			
			Если СтрокаТаблицаЗапасы.ТоварыНаКомиссии Тогда
				
				СтрокаТаблицыРасход.СодержаниеПроводки = Неопределено;
				
			ИначеЕсли Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				// Сформируем проводки.
				СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
				СтрокаТаблицаУправленческий.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
				СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
				
				СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
				
				СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.Подразделение;
				СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетДт;
				
				СтрокаДоходыИРасходы.СуммаДоходов = 0;
				СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
				СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
				
				СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
				
				// Продажи.
				Если Не СтрокаТаблицаЗапасы.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
					СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
					СтрокаПродажи.Количество = 0;
					СтрокаПродажи.Сумма = 0;
					СтрокаПродажи.СуммаНДС = 0;
					СтрокаПродажи.Себестоимость = СуммаКСписанию;
					СтрокаПродажи.Склад = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстаток;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход. Запасы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
			СтрокаТаблицыРасход.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			Если СтрокаТаблицаЗапасы.ТоварыНаКомиссии Тогда
				
				СтрокаТаблицыРасход.СодержаниеПроводки = Неопределено;
				
			ИначеЕсли Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				// Сформируем проводки.
				СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
				СтрокаТаблицаУправленческий.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
				СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
				
				СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
				
				СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.Подразделение;
				СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетДт;
				
				СтрокаДоходыИРасходы.СуммаДоходов = 0;
				СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
				СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
				
				СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
				
				// Продажи.
				Если Не СтрокаТаблицаЗапасы.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
					СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
					СтрокаПродажи.Количество = 0;
					СтрокаПродажи.Сумма = 0;
					СтрокаПродажи.СуммаНДС = 0;
					СтрокаПродажи.Себестоимость = СуммаКСписанию;
					СтрокаПродажи.Склад = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Возвраты
		МесяцПродажиИВозвратаСовпадает = Истина;
		Если КоличествоТребуетсяСвободныйОстаток < 0 Тогда
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
		
			Если ЗначениеЗаполнено(СтрокаТаблицаЗапасы.ДокументПродажи) Тогда
				
				СтруктураДляПоиска.Вставить("Регистратор", СтрокаТаблицаЗапасы.ДокументПродажи);
				МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
				Если МассивСтрокОстатков.Количество() > 0 Тогда
					КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
					СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
					МесяцПродажиИВозвратаСовпадает = (НачалоМесяца(ПериодКонтроля) = НачалоМесяца(МассивСтрокОстатков[0].ДатаОстатка));
				КонецЕсли;
			
			КонецЕсли;
			
			КоличествоВозврат = - КоличествоТребуетсяСвободныйОстаток;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоВозврат Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоВозврат / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоВозврат;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоВозврат Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				
				СуммаКСписанию = 0;
				
			КонецЕсли;
			
			// Расход. Запасы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Количество = - КоличествоВозврат;
			СтрокаТаблицыРасход.Сумма = - СуммаКСписанию;
			СтрокаТаблицыРасход.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			Если СтрокаТаблицаЗапасы.ТоварыНаКомиссии Тогда
				СтрокаТаблицыРасход.СодержаниеПроводки = Неопределено;
			КонецЕсли;
			
			Если НЕ МесяцПродажиИВозвратаСовпадает Тогда
				СтрокаТаблицыРасход.ФиксированнаяСтоимость = Истина;
			КонецЕсли; 
			
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				// Сформируем проводки.
				СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
				СтрокаТаблицаУправленческий.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
				СтрокаТаблицаУправленческий.Сумма = - СуммаКСписанию;
				
				СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
				
				СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.Подразделение;
				СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетДт;
				
				СтрокаДоходыИРасходы.СуммаДоходов = 0;
				СтрокаДоходыИРасходы.СуммаРасходов = - СуммаКСписанию;
				СтрокаДоходыИРасходы.Сумма = - СуммаКСписанию;
				
				СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
				
				// Продажи.
				Если Не СтрокаТаблицаЗапасы.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
					СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
					СтрокаПродажи.Количество = 0;
					СтрокаПродажи.Сумма = 0;
					СтрокаПродажи.СуммаНДС = 0;
					СтрокаПродажи.Себестоимость = - СуммаКСписанию;
					СтрокаПродажи.Склад = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажи(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Дата КАК Период,
	|	ТаблицаПродажи.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаПродажи.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ТаблицаПродажи.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажи.Характеристика КАК Характеристика,
	|	ТаблицаПродажи.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаПродажи.Партия КАК Партия,
	|	ТаблицаПродажи.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродажи.Документ КАК Документ,
	|	ТаблицаПродажи.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПродажи.Подразделение КАК Подразделение,
	|	ТаблицаПродажи.Ответственный КАК Ответственный,
	|	ТаблицаПродажи.Контрагент КАК Контрагент,
	|	СУММА(ТаблицаПродажи.Количество) КАК Количество,
	|	СУММА(ТаблицаПродажи.СуммаНДСЗакупкиПродажи) КАК СуммаНДС,
	|	СУММА(ТаблицаПродажи.Сумма) КАК Сумма,
	|	СУММА(ТаблицаПродажи.Сумма + ТаблицаПродажи.СуммаСкидкиНаценки + ТаблицаПродажи.СуммаАвтоматическойСкидки + ТаблицаПродажи.СуммаСкидкиОплатыБонусом) КАК СуммаБезСкидки,
	|	0 КАК Себестоимость
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПродажи
	|ГДЕ
	|	&ПолноеПроведение
	|	И НЕ ТаблицаПродажи.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Дата,
	|	ТаблицаПродажи.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаПродажи.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора,
	|	ТаблицаПродажи.Партия,
	|	ТаблицаПродажи.ЗаказПокупателя,
	|	ТаблицаПродажи.Документ,
	|	ТаблицаПродажи.СтавкаНДС,
	|	ТаблицаПродажи.Подразделение,
	|	ТаблицаПродажи.Ответственный,
	|	ТаблицаПродажи.Контрагент
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ТаблицаПродажи.Количество) <> 0
	|		ИЛИ СУММА(ТаблицаПродажи.СуммаНДСЗакупкиПродажи) <> 0
	|		ИЛИ СУММА(ТаблицаПродажи.Сумма) <> 0)";
	
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасыНаСкладах.Дата КАК Период,
	|	ТаблицаЗапасыНаСкладах.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.Ячейка КАК Ячейка,
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	(ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И &ПолноеПроведение
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Дата,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.Ячейка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество) <> 0";
	
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыНаСкладах()

Процедура СформироватьТаблицаЗапасыВРазрезеГТД(СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасыНаСкладах.Период КАК Период,
	|	ТаблицаЗапасыНаСкладах.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД,
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И ТаблицаЗапасыНаСкладах.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Период,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.НомерГТД,
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество) <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыВРазрезеГТД", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыИАгентскиеУслугиПринятые(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыИАгентскиеУслугиПринятые.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Дата КАК Период,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Организация КАК Организация,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Партия КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИАгентскиеУслугиПринятые.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаЗапасыИАгентскиеУслугиПринятые.Заказ
	|	КОНЕЦ КАК Заказ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтчетКомитенту) КАК ТипПриемаПередачи,
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Количество) КАК Количество,
	|	0 КАК СуммаРасчетов,
	|	ВЫРАЗИТЬ(&ПриемЗапасовТоварыНаКомиссии КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыИАгентскиеУслугиПринятые
	|ГДЕ
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ТаблицаЗапасыИАгентскиеУслугиПринятые.ТоварыНаКомиссии
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Дата,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Организация,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Характеристика,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Партия,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Заказ
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Количество) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыИАгентскиеУслугиПринятые.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Дата,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Организация,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Характеристика,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.Поставщик,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.Договор,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеОтКомитента),
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Количество),
	|	0,
	|	ВЫРАЗИТЬ(&ТекстАгентскаяУслуга КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыИАгентскиеУслугиПринятые
	|ГДЕ
	|	&ИспользуютсяАгентскиеУслуги
	|	И ТаблицаЗапасыИАгентскиеУслугиПринятые.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.ЭтоАгентскаяУслуга
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Дата,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Организация,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Характеристика,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.Поставщик,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.Договор
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Количество) <> 0";
	
	Запрос.УстановитьПараметр("ПриемЗапасовТоварыНаКомиссии", НСтр("ru = 'Реализация комиссионных товаров'"));
	Запрос.УстановитьПараметр("ИспользуютсяАгентскиеУслуги", ПолучитьФункциональнуюОпцию("АгентскиеУслуги"));
	Запрос.УстановитьПараметр("ТекстАгентскаяУслуга", НСтр("ru = 'Реализация агентской услуги'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыИАгентскиеУслугиПринятые", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыПринятые()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходы(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	// Установка исключительной блокировки остатков подарочных сертификатов
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ТаблицаДокумента.НомерСертификата КАК НомерСертификата
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаДокумента
	|ГДЕ
	|	НЕ ТаблицаДокумента.ЧастичноеПогашение
	|	И ТаблицаДокумента.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСертификата,
	|	ТаблицаДокумента.ПодарочныйСертификат";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПодарочныеСертификаты");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для Каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаДоходыИРасходы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДоходыИРасходы.Дата КАК Период,
	|	ТаблицаДоходыИРасходы.Организация КАК Организация,
	|	ТаблицаДоходыИРасходы.Подразделение КАК СтруктурнаяЕдиница,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаВыручкиОтПродаж КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика,
	|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК СуммаДоходов,
	|	0 КАК СуммаРасходов,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДоходыИРасходы
	|ГДЕ
	|	НЕ ТаблицаДоходыИРасходы.ТоварыНаКомиссии
	|	И НЕ ТаблицаДоходыИРасходы.ЭтоАгентскаяУслуга
	|	И &ПолноеПроведение
	|	И НЕ ТаблицаДоходыИРасходы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Дата,
	|	ТаблицаДоходыИРасходы.НомерСтроки,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.Подразделение,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельности,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаВыручкиОтПродаж
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее),
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ТаблицаДокумента.Валюта,
	|	&КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницДенежныеСредстваВКассахККМ КАК ТаблицаДокумента
	|ГДЕ
	|	&ПолноеПроведение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	0,
	|	ТаблицаДоходыИРасходы.Дата,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.Подразделение,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
	|	ТаблицаДоходыИРасходы.СчетУчетаДоходов,
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)),
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДоходыИРасходы.ИспользоватьСерииНоменклатуры
	|				ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ТаблицаДоходыИРасходы.Сумма
	|			ИНАЧЕ ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма
	|		КОНЕЦ),
	|	0,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДоходыИРасходы.ИспользоватьСерииНоменклатуры
	|				ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ТаблицаДоходыИРасходы.Сумма
	|			ИНАЧЕ ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма
	|		КОНЕЦ)
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаДоходыИРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&МоментКонтроля, ) КАК ПодарочныеСертификатыОстатки
	|		ПО ТаблицаДоходыИРасходы.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
	|			И ТаблицаДоходыИРасходы.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
	|ГДЕ
	|	&ПолноеПроведение
	|	И ТаблицаДоходыИРасходы.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
	|	И НЕ ТаблицаДоходыИРасходы.ЧастичноеПогашение
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Дата,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.Подразделение,
	|	ТаблицаДоходыИРасходы.СчетУчетаДоходов
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДоходыИРасходы.ИспользоватьСерииНоменклатуры
	|				ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ТаблицаДоходыИРасходы.Сумма
	|			ИНАЧЕ ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма
	|		КОНЕЦ) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("ОтражениеДоходов", НСтр("ru='Отражение доходов'"));
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Исключая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.НаправлениеДеятельности
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ТаблицаДокумента.Статья КАК Статья,
	|	СУММА(ТаблицаДокумента.Сумма) КАК СуммаДоходов,
	|	&Ссылка КАК Документ,
	|	СУММА(0) КАК СуммаКомиссииДоходов,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя) КАК ВидОперацииЭквайринга
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Статья,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.НаправлениеДеятельности
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаДокумента.Сумма) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма), 0) КАК СуммаКСписанию
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
	|ГДЕ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.ВидОплаты В (ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта), ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Кредит))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма), 0) КАК СуммаКСписанию
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
	|ГДЕ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	-ТаблицаДокумента.Сумма КАК СуммаДоходов
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаЗапасыДоходыИРасходыКассовыйМетод = МассивРезультатов[0].Выгрузить();
	ВыборкаРезультатаЗапроса_Эквайринг = МассивРезультатов[1].Выбрать();
	ВыборкаРезультатаЗапроса_Сертификат = МассивРезультатов[2].Выбрать();
	ТаблицаПогашениеСертификатов = МассивРезультатов[3].Выгрузить();
	
	ТаблицаДоходыИРасходыКассовыйМетодЭквайринг = ТаблицаЗапасыДоходыИРасходыКассовыйМетод.Скопировать();
	ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Очистить();
	ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Колонки.Добавить("СодержаниеПроводки", Новый ОписаниеТипов("Строка"));
	
	ТаблицаДоходыИРасходыКассовыйМетод_Этап1 = ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Скопировать();
	ТаблицаДоходыИРасходыКассовыйМетод = ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Скопировать();
	
	// Необходимо распределить направления деятельности на сумму оплаты платежными картами.
	Если ВыборкаРезультатаЗапроса_Эквайринг.Следующий() Тогда
		СуммаКСписанию = ВыборкаРезультатаЗапроса_Эквайринг.СуммаКСписанию;
		Для каждого СтрокаЗапасыДоходыИРасходыКассовыйМетод Из ТаблицаЗапасыДоходыИРасходыКассовыйМетод Цикл
			Если СуммаКСписанию = 0 Тогда
				СтрокаДоходыИРасходыКассовыйМетод = ТаблицаДоходыИРасходыКассовыйМетод_Этап1.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходыКассовыйМетод, СтрокаЗапасыДоходыИРасходыКассовыйМетод);
			ИначеЕсли СтрокаЗапасыДоходыИРасходыКассовыйМетод.СуммаДоходов <= СуммаКСписанию Тогда
				СтрокаДоходыИРасходыКассовыйМетодЭквайринг = ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходыКассовыйМетодЭквайринг, СтрокаЗапасыДоходыИРасходыКассовыйМетод);
				СуммаКСписанию = СуммаКСписанию - СтрокаЗапасыДоходыИРасходыКассовыйМетод.СуммаДоходов;
			ИначеЕсли СтрокаЗапасыДоходыИРасходыКассовыйМетод.СуммаДоходов > СуммаКСписанию Тогда
				// КассовыйМетодЭквайринг
				СтрокаДоходыИРасходыКассовыйМетодЭквайринг = ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходыКассовыйМетодЭквайринг, СтрокаЗапасыДоходыИРасходыКассовыйМетод);
				СтрокаДоходыИРасходыКассовыйМетодЭквайринг.СуммаДоходов = СуммаКСписанию;
				
				// КассовыйМетод
				СтрокаДоходыИРасходыКассовыйМетод = ТаблицаДоходыИРасходыКассовыйМетод_Этап1.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходыКассовыйМетод, СтрокаЗапасыДоходыИРасходыКассовыйМетод);
				СтрокаДоходыИРасходыКассовыйМетод.СуммаДоходов = СтрокаЗапасыДоходыИРасходыКассовыйМетод.СуммаДоходов - СуммаКСписанию;
				
				СуммаКСписанию = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Необходимо распределить направления деятельности на сумму оплаты сертификатами.
	Если ВыборкаРезультатаЗапроса_Сертификат.Следующий() Тогда
		СуммаКСписанию = ВыборкаРезультатаЗапроса_Сертификат.СуммаКСписанию;
		Для каждого СтрокаЗапасыДоходыИРасходыКассовыйМетод Из ТаблицаДоходыИРасходыКассовыйМетод_Этап1 Цикл
			Если СуммаКСписанию = 0 Тогда
				СтрокаДоходыИРасходыКассовыйМетод = ТаблицаДоходыИРасходыКассовыйМетод.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходыКассовыйМетод, СтрокаЗапасыДоходыИРасходыКассовыйМетод);
			ИначеЕсли СтрокаЗапасыДоходыИРасходыКассовыйМетод.СуммаДоходов <= СуммаКСписанию Тогда
				СтрокаДоходыИРасходыКассовыйМетодЭквайринг = ТаблицаДоходыИРасходыКассовыйМетод.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходыКассовыйМетодЭквайринг, СтрокаЗапасыДоходыИРасходыКассовыйМетод);
				СтрокаДоходыИРасходыКассовыйМетодЭквайринг.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
				СуммаКСписанию = СуммаКСписанию - СтрокаЗапасыДоходыИРасходыКассовыйМетод.СуммаДоходов;
			ИначеЕсли СтрокаЗапасыДоходыИРасходыКассовыйМетод.СуммаДоходов > СуммаКСписанию Тогда
				// Сертификаты
				СтрокаДоходыИРасходыКассовыйМетодЭквайринг = ТаблицаДоходыИРасходыКассовыйМетод.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходыКассовыйМетодЭквайринг, СтрокаЗапасыДоходыИРасходыКассовыйМетод);
				СтрокаДоходыИРасходыКассовыйМетодЭквайринг.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
				СтрокаДоходыИРасходыКассовыйМетодЭквайринг.СуммаДоходов = СуммаКСписанию;
				
				// КассовыйМетод
				СтрокаДоходыИРасходыКассовыйМетод = ТаблицаДоходыИРасходыКассовыйМетод.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходыКассовыйМетод, СтрокаЗапасыДоходыИРасходыКассовыйМетод);
				СтрокаДоходыИРасходыКассовыйМетод.СуммаДоходов = СтрокаЗапасыДоходыИРасходыКассовыйМетод.СуммаДоходов - СуммаКСписанию;
				
				СуммаКСписанию = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Расход по погашенным сертификатам
	Для Каждого СтрокаПогашения Из ТаблицаПогашениеСертификатов Цикл
		СтрокаДоходыИРасходыКассовыйМетод = ТаблицаДоходыИРасходыКассовыйМетод.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходыКассовыйМетод, СтрокаПогашения);
	КонецЦикла;
	
	// Отразим движения по комиссии и по возвратам.
	ТаблицаРасчетыПоЭквайрингу = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыПоЭквайрингу;
	
	Для каждого ТекущаяСтрокаРасчетов Из ТаблицаРасчетыПоЭквайрингу Цикл
		
		// Отразим движения по возвратам.
		// Для дальнейшего распределения в документах поступления на счет и расхода со счета сделаем приход и расход по пустому направлению
		// деятельности. Это особенность ведения именно розничной торговли, т.к. при вводе только отчета о розничных продажах
		// без чеков не получиться определить, по каким направлениям деятельности был выполнен возврат товара и денежных средств.
		// Но при этом взаиморасчеты по эквайрингу будут учтены в полном объеме. 
		// Чтобы они совпадали требуется сделать два движения на одну сумму, но с разными видами операций.
		// Такие действия потребуются в маловероятном случае, когда поступят деньги по операции оплаты от банка, но еще не
		// спишутся деньги по операции возврата.
		Если ТекущаяСтрокаРасчетов.ВидОперацииЭквайринга = Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю Тогда
			
			Движение = ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Добавить();
			Движение.Период = СтруктураДополнительныеСвойства.ДляПроведения.Дата;
			Движение.Документ = ДокументСсылкаОтчетОРозничныхПродажах;
			Движение.Организация = СтруктураДополнительныеСвойства.ДляПроведения.Организация;
			Движение.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка();
			Движение.Статья = ДокументСсылкаОтчетОРозничныхПродажах.Статья;
			Движение.СуммаДоходов = ТекущаяСтрокаРасчетов.Сумма;
			Движение.ВидОперацииЭквайринга = Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю;
			Движение.СодержаниеПроводки = "Учет возврата оплаты на карту";
			
			ДвижениеПоступление = ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеПоступление, Движение);
			ДвижениеПоступление.ВидОперацииЭквайринга = Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя;
			
		КонецЕсли;
		
		Если ТекущаяСтрокаРасчетов.Комиссия <> 0 Тогда
		// Отразим движения по комиссии.
		
			Движение = ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Добавить();
			Движение.Период = СтруктураДополнительныеСвойства.ДляПроведения.Дата;
			Движение.Документ = ДокументСсылкаОтчетОРозничныхПродажах;
			Движение.Организация = СтруктураДополнительныеСвойства.ДляПроведения.Организация;
			Движение.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка();
			Движение.Статья = ДокументСсылкаОтчетОРозничныхПродажах.Статья;
			Движение.СуммаКомиссииДоходов = ТекущаяСтрокаРасчетов.Комиссия;
			Движение.ВидОперацииЭквайринга = ТекущаяСтрокаРасчетов.ВидОперацииЭквайринга;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетод", ТаблицаДоходыИРасходыКассовыйМетод);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетодЭквайринг", ТаблицаДоходыИРасходыКассовыйМетодЭквайринг);
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыКассовыйМетод()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДенежныеСредстваВКассахККМ(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.КассаККМ КАК КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета КАК СчетУчета,
	|	ДанныеДокумента.ВалютаДокумента КАК Валюта,
	|	ДанныеДокумента.ДоговорПлатежногоАгента КАК ДоговорКонтрагента,
	|	СУММА(ДанныеДокумента.Сумма) КАК Сумма,
	|	СУММА(ДанныеДокумента.СуммаВал) КАК СуммаВал,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаДляОстатка,
	|	СУММА(ДанныеДокумента.СуммаВал) КАК СуммаВалДляОстатка,
	|	ВЫРАЗИТЬ(&ПоступлениеДенежныхСредств КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаДенежныеСредстваВКассахККМ
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ДанныеДокумента
	|ГДЕ
	|	&ПолноеПроведение
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ДоговорПлатежногоАгента,
	|	ДанныеДокумента.ВалютаДокумента
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеДокумента.Сумма) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	ДанныеДокумента.ДоговорПлатежногоАгента,
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	-СУММА(ДанныеДокумента.Сумма),
	|	-СУММА(ДанныеДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ОплатаПлатежнымиКартами КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ДанныеДокумента
	|ГДЕ
	|	&ПолноеПроведение
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	ДанныеДокумента.ДоговорПлатежногоАгента
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеДокумента.Сумма) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	КассаККМ,
	|	Валюта,
	|	СчетУчета";
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	Запрос.УстановитьПараметр("ПоступлениеДенежныхСредств", НСтр("ru = 'Поступление денежных средств в кассу ККМ'"));
	Запрос.УстановитьПараметр("ОплатаПлатежнымиКартами", НСтр("ru = 'Оплата платежными картами'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	Запрос.Выполнить();
	
	// Установка исключительной блокировки контролируемых остатков денежных средств.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ.Организация КАК Организация,
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ.КассаККМ КАК КассаККМ
	|ИЗ
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ КАК ВременнаяТаблицаДенежныеСредстваВКассахККМ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДенежныеСредстваВКассахККМ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = КурсовыеРазницыУНФ.ПолучитьТекстЗапросаКурсовыеРазницыДенежныеСредстваВКассахККМ(Запрос.МенеджерВременныхТаблиц, НомерЗапроса);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваВКассахККМ", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДенежныеСредстваВКассахККМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаУправленческий(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаУправленческий.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУправленческий.Дата КАК Период,
	|	ТаблицаУправленческий.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаУправленческий.КассаККМСчетУчета КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии ИЛИ ЭтоАгентскаяУслуга
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.РасчетыСПоставщиками)
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчетаВыручкиОтПродаж
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии ИЛИ ЭтоАгентскаяУслуга
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии ИЛИ ЭтоАгентскаяУслуга
	|			ТОГДА ТаблицаУправленческий.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ТаблицаУправленческий.Сумма КАК Сумма,
	|	&ОтражениеВыручки КАК Содержание
	|ПОМЕСТИТЬ ВременнаяТаблица_Данные
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	&ПолноеПроведение
	|	И ТаблицаУправленческий.Сумма <> 0
	|	И НЕ ТаблицаУправленческий.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	&СчетУчетаАвансовПокупателя,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ТаблицаУправленческий.Сумма,
	|	&ВозникновениеАвансаПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	&ПолноеПроведение
	|	И ТаблицаУправленческий.Сумма <> 0
	|	И ТаблицаУправленческий.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта)
	|			ТОГДА &ОтражениеОплатыПлатежнымиКартами
	|		КОГДА ТаблицаУправленческий.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Кредит)
	|			ТОГДА &ОтражениеОплатыКредитом
	|		ИНАЧЕ """"
	|	КОНЕЦ
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаУправленческий
	|ГДЕ
	|	&ПолноеПроведение
	|	И ТаблицаУправленческий.ВидОплаты В (ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта), ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Кредит))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	&СчетУчетаАвансовПокупателя,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	&ЗачетАванса
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаУправленческий
	|ГДЕ
	|	&ПолноеПроведение
	|	И ТаблицаУправленческий.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы < 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаУправленческий.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	&КурсоваяРазница
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницДенежныеСредстваВКассахККМ КАК ТаблицаУправленческий
	|ГДЕ
	|	&ПолноеПроведение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица_Данные.Период КАК Период,
	|	ВременнаяТаблица_Данные.Организация КАК Организация,
	|	ВременнаяТаблица_Данные.СценарийПланирования КАК СценарийПланирования,
	|	ВременнаяТаблица_Данные.СчетДт КАК СчетДт,
	|	ВременнаяТаблица_Данные.ВалютаДт КАК ВалютаДт,
	|	ВременнаяТаблица_Данные.СуммаВалДт КАК СуммаВалДт,
	|	ВременнаяТаблица_Данные.СчетКт КАК СчетКт,
	|	ВременнаяТаблица_Данные.ВалютаКт КАК ВалютаКт,
	|	ВременнаяТаблица_Данные.СуммаВалКт КАК СуммаВалКт,
	|	ВременнаяТаблица_Данные.Сумма КАК Сумма,
	|	ВременнаяТаблица_Данные.Содержание КАК Содержание,
	|	ВременнаяТаблица_Данные.Порядок КАК Порядок,
	|	ВременнаяТаблица_Данные.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВременнаяТаблица_Данные КАК ВременнаяТаблица_Данные
	|ГДЕ
	|	ВременнаяТаблица_Данные.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ВременнаяТаблица_Данные.НомерСтроки";
	
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("ОтражениеВыручки", НСтр("ru = 'Выручка от продажи'"));
	Запрос.УстановитьПараметр("ВозникновениеАвансаПокупателя", "Возникновение аванса покупателя");
	Запрос.УстановитьПараметр("ОтражениеОплатыПлатежнымиКартами", НСтр("ru = 'Оплата платежными картами'"));
	Запрос.УстановитьПараметр("ЗачетАванса", НСтр("ru='Зачет предоплаты'"));
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ОтражениеОплатыКредитом", НСтр("ru = 'Оплата кредитом'"));
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСБанком", ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторами);
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	
	Для Каждого КлючИЗначение Из СтруктураДополнительныеСвойства.ДляСертификатов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		НоваяПроводка = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Выборка);
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаУправленческий()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Исключая));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	МИНИМУМ(ТаблицаДокумента.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Документ,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	СУММА(ТаблицаДокумента.Сумма) КАК СуммаДоходов,
	|	0 КАК СуммаРасходов
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаДокумента.Сумма) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей),
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЧастичноеПогашение
	|			ТОГДА ТаблицаДокумента.Сумма
	|		КОГДА ТаблицаДокумента.ИспользоватьСерииНоменклатуры
	|			ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0)
	|		ИНАЧЕ ТаблицаДокумента.Номинал
	|	КОНЕЦ,
	|	0
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&МоментКонтроля, ) КАК ПодарочныеСертификатыОстатки
	|		ПО ТаблицаДокумента.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
	|			И ТаблицаДокумента.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыНераспределенные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыНераспределенные()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРезервыТоваровОрганизаций(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Если Не ПолучитьФункциональнуюОпцию("ПередачаТоваровМеждуОрганизациями") Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРезервыТоваровОрганизаций", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасыНаСкладах.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасыНаСкладах.Дата КАК Период,
	|	ТаблицаЗапасыНаСкладах.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаЗапасыНаСкладах.Ячейка КАК Ячейка,
	|	ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД,
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаЗапасыНаСкладах.Количество КАК Количество
	|ПОМЕСТИТЬ ЗапасыДляРезервовТоваровОрганизаций
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	(ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И &ПолноеПроведение";
	Запрос.Выполнить();
	
	ИнтеркампаниСервер.СформироватьТаблицаРезервыТоваровОрганизаций(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахЗапасы.НомерСтроки КАК НомерСтроки,
	|	ОтчетОРозничныхПродажахЗапасы.КлючСвязи КАК КлючСвязи,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка КАК Документ,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.ИнвентаризацияЗапасов КАК ДокументОснование,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.Статья КАК Статья,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.Дата КАК Дата,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.Дата КАК Период,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.КассаККМ КАК КассаККМ,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.КассаККМ.Владелец КАК КассаККМВладелец,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	&Организация КАК Организация,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ОтчетОРозничныхПродажахЗапасы.Заказ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ОтчетОРозничныхПродажахЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.Заказ КАК Документ.ЗаказПокупателя).УчетПотребностиПоСкладам
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчетПотребностиПоСкладам,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.Подразделение КАК Подразделение,
	|	ОтчетОРозничныхПродажахЗапасы.Ответственный КАК Ответственный,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж КАК СчетУчетаВыручкиОтПродаж,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж КАК СчетУчетаСебестоимостиПродаж,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахЗапасы.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Ссылка.СтруктурнаяЕдиница
	|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	НЕОПРЕДЕЛЕНО КАК КоррСтруктурнаяЕдиница,
	|	ОтчетОРозничныхПродажахЗапасы.Ячейка КАК Ячейка,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.СчетУчетаЗатрат КАК СчетУчетаЗатрат,
	|	НЕОПРЕДЕЛЕНО КАК КоррСчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|				И ОтчетОРозничныхПродажахЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТоварыНаКомиссии,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура КАК Номенклатура,
	|	ОтчетОРозничныхПродажахЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	НЕОПРЕДЕЛЕНО КАК КоррНоменклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ОтчетОРозничныхПродажахЗапасы.ХарактеристикаНабора
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ХарактеристикаНабора,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррХарактеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррПартия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Количество
	|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.Количество * ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ОтчетОРозничныхПродажахЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ОтчетОРозничныхПродажахЗапасы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.СуммаНДС * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.СуммаНДС * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность) КАК ЧИСЛО(15, 2)) КАК СуммаНДСЗакупкиПродажи,
	|	ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.Всего * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность) КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.Всего КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ОтчетОРозничныхПродажахЗапасы.Всего КАК СуммаРасчетовПринятыеПереданные,
	|	ОтчетОРозничныхПродажахЗапасы.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ОтчетОРозничныхПродажахЗапасы.ДисконтнаяКарта.ВладелецКарты КАК ВладелецКарты,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Резерв
	|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.Резерв * ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Резерв,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ОтчетОРозничныхПродажахЗапасы.Количество = 0
	|				ТОГДА 0
	|			КОГДА ОтчетОРозничныхПродажахЗапасы.Номенклатура.ПроизвольныйНоминал
	|				ТОГДА ОтчетОРозничныхПродажахЗапасы.Сумма / ВЫБОР
	|						КОГДА ОтчетОРозничныхПродажахЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры
	|							ТОГДА ОтчетОРозничныхПродажахЗапасы.Количество
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.Номенклатура.Номинал / ВЫБОР
	|					КОГДА ОтчетОРозничныхПродажахЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры
	|							И ОтчетОРозничныхПродажахЗапасы.Количество < 0
	|						ТОГДА -1
	|					КОГДА ОтчетОРозничныхПродажахЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры
	|						ТОГДА 1
	|					ИНАЧЕ 1 / ОтчетОРозничныхПродажахЗапасы.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК НоминалСертификата,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.ЧастичноеПогашение КАК ЧастичноеПогашениеСертификата,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.ПроизвольныйНоминал КАК ПроизвольныйНоминал,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ОтчетОРозничныхПродажахЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ОтчетОРозничныхПродажахЗапасы.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ОтчетОРозничныхПродажахЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ОтчетОРозничныхПродажахЗапасы.Цена КАК Цена,
	|	ОтчетОРозничныхПродажахЗапасы.ДокументПродажи.КассоваяСмена КАК ДокументПродажи,
	|	ОтчетОРозничныхПродажахЗапасы.Количество < 0 КАК Возврат,
	|	ОтчетОРозничныхПродажахЗапасы.ДокументПродажи.Подразделение КАК ПодразделениеПродажи,
	|	ОтчетОРозничныхПродажахЗапасы.ДокументПродажи.Ответственный КАК ОтветственныйПродажи,
	|	ОтчетОРозничныхПродажахЗапасы.ДокументПродажи.КассоваяСмена КАК КорректируемыйДокумент,
	|	ОтчетОРозничныхПродажахЗапасы.Контрагент КАК Контрагент,
	|	ОтчетОРозничныхПродажахЗапасы.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	ОтчетОРозничныхПродажахЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ОтчетОРозничныхПродажахЗапасы.НомерГТД КАК НомерГТД,
	|	ОтчетОРозничныхПродажахЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.ЭтоАгентскаяУслуга КАК ЭтоАгентскаяУслуга,
	|	ОтчетОРозничныхПродажахЗапасы.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий, ОтчетОРозничныхПродажахЗапасы.Номенклатура.ПолитикаУчетаСерий) КАК ПолитикаУчетаСерий,
	|	ОтчетОРозничныхПродажахЗапасы.Заказ КАК Заказ,
	|	ОтчетОРозничныхПродажахЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Запасы КАК ОтчетОРозничныхПродажахЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыДокВалюты
	|		ПО ОтчетОРозничныхПродажахЗапасы.Ссылка.ВалютаДокумента = КурсыДокВалюты.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО ОтчетОРозничныхПродажахЗапасы.Номенклатура = ПолитикиУчетаСерий.Владелец
	|			И ОтчетОРозничныхПродажахЗапасы.СтруктурнаяЕдиница = ПолитикиУчетаСерий.СтруктурнаяЕдиница
	|			И (&Организация = ПолитикиУчетаСерий.Организация)
	|ГДЕ
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Ссылка.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА &РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям
	|			ТОГДА ВЫБОР
	|					КОГДА ТабличнаяЧасть.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА НАЧАЛОПЕРИОДА(ТабличнаяЧасть.Ссылка.Дата, ДЕНЬ)
	|					ИНАЧЕ НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаПлатежа, ДЕНЬ)
	|				КОНЕЦ
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаПлатежа,
	|	&Ссылка КАК Документ,
	|	&Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.КассаККМ КАК КассаККМ,
	|	ТабличнаяЧасть.Ссылка.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал.СчетУчета КАК ЭквайринговыйТерминалСчетУчета,
	|	ТабличнаяЧасть.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * КурсыВалютКассы.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.СуммаКомиссии * КурсыВалютКассы.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2)) КАК СуммаКомиссии,
	|	ТабличнаяЧасть.Сумма КАК СуммаВал,
	|	ТабличнаяЧасть.СуммаКомиссии КАК СуммаКомиссииВал,
	|	ТабличнаяЧасть.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал.Эквайрер КАК Эквайрер,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал.Договор КАК Договор,
	|	ТабличнаяЧасть.ВидОплаты КАК ВидОплаты,
	|	ТабличнаяЧасть.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	ТабличнаяЧасть.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	ТабличнаяЧасть.Ссылка.Статья КАК Статья,
	|	ТабличнаяЧасть.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ТабличнаяЧасть.НомерСертификата КАК НомерСертификата,
	|	ТабличнаяЧасть.ПодарочныйСертификат.ЧастичноеПогашение КАК ЧастичноеПогашение,
	|	ТабличнаяЧасть.ПодарочныйСертификат.Номинал КАК Номинал,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.ПодарочныйСертификат.СчетУчетаДоходов КАК СчетУчетаДоходов,
	|	ТабличнаяЧасть.ПодарочныйСертификат.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ТабличнаяЧасть.Сумма КАК СуммаСертификата,
	|	НЕОПРЕДЕЛЕНО КАК Заказ,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	ТабличнаяЧасть.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ТабличнаяЧасть.ЭтоОтмена КАК ЭтоОтмена
	|ПОМЕСТИТЬ ВременнаяТаблицаОплатаПлатежнымиКартами
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.БезналичнаяОплата КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыВалютУчетаСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
	|		ПО ТабличнаяЧасть.Ссылка.ВалютаДокумента = КурсыВалютКассы.Валюта
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ОтчетОРозничныхПродажахСкидкиНаценки.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|				ТОГДА ОтчетОРозничныхПродажахСкидкиНаценки.Сумма * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ОтчетОРозничныхПродажахСкидкиНаценки.Сумма * КурсыУпрВалюты.Кратность / КурсыУпрВалюты.Курс
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ОтчетОРозничныхПродажахСкидкиНаценки.Ссылка.Дата КАК Период,
	|	ОтчетОРозничныхПродажахСкидкиНаценки.Номенклатура КАК Номенклатура,
	|	ОтчетОРозничныхПродажахСкидкиНаценки.Характеристика КАК Характеристика,
	|	ОтчетОРозничныхПродажахСкидкиНаценки.Ссылка КАК Документ,
	|	ОтчетОРозничныхПродажахСкидкиНаценки.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтчетОРозничныхПродажахСкидкиНаценки.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ВременнаяТаблицаАвтоСкидкиНаценки
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.СкидкиНаценки КАК ОтчетОРозничныхПродажахСкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаВалютаУчета.Значение
	|					ИЗ
	|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаНациональнаяВалюта.Значение
	|					ИЗ
	|						Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта)) КАК КурсыРегВалюты
	|		ПО (ИСТИНА),
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|ГДЕ
	|	ОтчетОРозничныхПродажахСкидкиНаценки.Ссылка = &Ссылка
	|	И ОтчетОРозничныхПродажахСкидкиНаценки.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	МАКСИМУМ(ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссии) КАК ПроцентКомиссии,
	|	МАКСИМУМ(ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссииПриОтмене) КАК ПроцентКомиссииПриОтмене,
	|	МАКСИМУМ(ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссииПриВозврате) КАК ПроцентКомиссииПриВозврате,
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка КАК ЭквайринговыйТерминал
	|ПОМЕСТИТЬ ВременнаяТаблицаПроцентыКомиссии
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы.ВидыПлатежныхКарт КАК ЭквайринговыеТерминалыВидыПлатежныхКарт
	|ГДЕ
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал
	|			ИЗ
	|				ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ВидПлатежнойКарты,
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтчетОРозничныхПродажахЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажахЗапасы.Партия КАК Партия,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура КАК Номенклатура,
	|	ОтчетОРозничныхПродажахЗапасы.Характеристика КАК Характеристика,
	|	ОтчетОРозничныхПродажахЗапасы.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахЗапасы.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Ссылка.СтруктурнаяЕдиница
	|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ОтчетОРозничныхПродажахЗапасы.Количество) КАК Количество,
	|	СУММА(ОтчетОРозничныхПродажахЗапасы.Резерв) КАК Резерв
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасыСгруппированная
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Запасы КАК ОтчетОРозничныхПродажахЗапасы
	|ГДЕ
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка,
	|	ОтчетОРозничныхПродажахЗапасы.Партия,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура,
	|	ОтчетОРозничныхПродажахЗапасы.Характеристика,
	|	ОтчетОРозничныхПродажахЗапасы.Заказ,
	|	ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахЗапасы.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Ссылка.СтруктурнаяЕдиница
	|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.СтруктурнаяЕдиница
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасыСгруппированная.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасыСгруппированная.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаЗапасыСгруппированная.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыСгруппированная.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ ТаблицаЗапасыСгруппированная.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ ТаблицаЗапасыСгруппированная.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ТаблицаЗапасыСгруппированная.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ТаблицаЗапасыСгруппированная.СтруктурнаяЕдиница) = ТИП(Справочник.СтруктурныеЕдиницы)
	|					ТОГДА ВЫБОР
	|							КОГДА ТаблицаЗапасыСгруппированная.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|								ТОГДА ТаблицаЗапасыСгруппированная.Номенклатура.СчетУчетаЗапасов
	|							ИНАЧЕ ТаблицаЗапасыСгруппированная.Номенклатура.СчетУчетаЗатрат
	|						КОНЕЦ
	|				ИНАЧЕ ТаблицаЗапасыСгруппированная.Номенклатура.СчетУчетаЗапасов
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчета,
	|	ТаблицаЗапасыСгруппированная.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ТаблицаЗапасыСгруппированная.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ТаблицаЗапасыСгруппированная.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ТаблицаЗапасыСгруппированная.Заказ КАК ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК КоррЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаЗапасыСгруппированная.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				И ТаблицаЗапасыСгруппированная.Количество > 0
	|			ТОГДА ТаблицаЗапасыСгруппированная.Резерв - ТаблицаЗапасыСгруппированная.Количество
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаЗапасыСгруппированная.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				И ТаблицаЗапасыСгруппированная.Количество <= 0
	|			ТОГДА ТаблицаЗапасыСгруппированная.Резерв
	|		ИНАЧЕ (ТаблицаЗапасыСгруппированная.Резерв - ТаблицаЗапасыСгруппированная.Количество) * ТаблицаЗапасыСгруппированная.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	0 КАК Сумма,
	|	ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит) КАК ВидДвиженияУправленческий,
	|	&РезервированиеЗапасов КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасыИсточник
	|ИЗ
	|	ВременнаяТаблицаЗапасыСгруппированная КАК ТаблицаЗапасыСгруппированная
	|ГДЕ
	|	ТаблицаЗапасыСгруппированная.Резерв > ТаблицаЗапасыСгруппированная.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.СчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Номенклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Характеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Партия КАК КоррПартия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.ВидДвиженияУправленческий КАК ВидДвиженияУправленческий,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость
	|ИЗ
	|	ВременнаяТаблицаЗапасыИсточник КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.ВидДвиженияУправленческий,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахСерииНоменклатуры.КлючСвязи КАК КлючСвязи,
	|	ОтчетОРозничныхПродажахСерииНоменклатуры.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахСерииНоменклатуры.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ОтчетОРозничныхПродажахСерииНоменклатуры.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикаУчетаСерий.ПустаяСсылка)
	|			ТОГДА &ОстаткиСерийНоменклатуры
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВременнаяТаблицаЗапасы.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ОстаткиСерийНоменклатуры
	|ПОМЕСТИТЬ ВременнаяТаблицаСерииНоменклатуры
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.СерииНоменклатуры КАК ОтчетОРозничныхПродажахСерииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ПО (ВременнаяТаблицаЗапасы.КлючСвязи = ОтчетОРозничныхПродажахСерииНоменклатуры.КлючСвязи)
	|ГДЕ
	|	ОтчетОРозничныхПродажахСерииНоменклатуры.Ссылка = &Ссылка
	|	И &ИспользоватьСерииНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахБонусныеБаллыКНачислению.НомерСтроки КАК НомерСтроки,
	|	ОтчетОРозничныхПродажахБонусныеБаллыКНачислению.Ссылка.Дата КАК Период,
	|	ОтчетОРозничныхПродажахБонусныеБаллыКНачислению.БонуснаяКарта КАК БонуснаяКарта,
	|	ОтчетОРозничныхПродажахБонусныеБаллыКНачислению.Номенклатура КАК Номенклатура,
	|	ОтчетОРозничныхПродажахБонусныеБаллыКНачислению.Характеристика КАК Характеристика,
	|	ОтчетОРозничныхПродажахБонусныеБаллыКНачислению.КоличествоБонусныхБаллов КАК Количество,
	|	ОтчетОРозничныхПродажахБонусныеБаллыКНачислению.ДатаНачисления КАК ДатаНачисления,
	|	ОтчетОРозничныхПродажахБонусныеБаллыКНачислению.ДатаСписания КАК ДатаСгорания,
	|	ОтчетОРозничныхПродажахБонусныеБаллыКНачислению.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажахБонусныеБаллыКНачислению.СкидкаНаценка КАК АналитикаНачисленияБонусов
	|ПОМЕСТИТЬ ВременнаяТаблицаНачисленияБонусов
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.БонусныеБаллыКНачислению КАК ОтчетОРозничныхПродажахБонусныеБаллыКНачислению
	|ГДЕ
	|	ОтчетОРозничныхПродажахБонусныеБаллыКНачислению.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахБезналичнаяОплата.НомерСтроки КАК НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажахБезналичнаяОплата.Ссылка.Дата, ДЕНЬ) КАК Период,
	|	ОтчетОРозничныхПродажахБезналичнаяОплата.БонуснаяКарта КАК БонуснаяКарта,
	|	ОтчетОРозничныхПродажахБезналичнаяОплата.СуммаБонусов КАК Количество,
	|	0 КАК КСписанию,
	|	ОтчетОРозничныхПродажахБезналичнаяОплата.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВременнаяТаблицаСписанияБонусов
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.БезналичнаяОплата КАК ОтчетОРозничныхПродажахБезналичнаяОплата
	|ГДЕ
	|	ОтчетОРозничныхПродажахБезналичнаяОплата.Ссылка = &Ссылка
	|	И ОтчетОРозничныхПродажахБезналичнаяОплата.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Бонусы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажах.Дата КАК Дата,
	|	ОтчетОРозничныхПродажах.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Ячейка,
	|	NULL КАК КорректируемыйДокумент,
	|	ОтчетОРозничныхПродажах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтчетОРозничныхПродажах.Дата КАК Период,
	|	ОтчетОРозничныхПродажах.Номер КАК Номер
	|ПОМЕСТИТЬ ВременнаяТаблицаШапка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Запасы.Количество < 0
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	СведенияПрослеживаемости.НомерСтроки КАК НомерСтроки,
	|	СведенияПрослеживаемости.РНПТ КАК РНПТ,
	|	СведенияПрослеживаемости.Количество КАК Количество,
	|	СведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	СведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВременнаяТаблицаСведенияПрослеживаемости
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.СведенияПрослеживаемости КАК СведенияПрослеживаемости
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗапасы КАК Запасы
	|		ПО СведенияПрослеживаемости.ИдентификаторСтроки = Запасы.ИдентификаторСтроки
	|ГДЕ
	|	СведенияПрослеживаемости.Ссылка = &Ссылка
	|	И &ВестиУчетПрослеживаемыхТоваров";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям", ПолучитьФункциональнуюОпцию("РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям"));
	Запрос.УстановитьПараметр("РезервированиеЗапасов", НСтр("ru = 'Резервирование запасов'"));
	// Прослеживаемость
	Запрос.УстановитьПараметр("ВестиУчетПрослеживаемыхТоваров",
		СтруктураДополнительныеСвойства.УчетнаяПолитика.ВестиУчетПрослеживаемыхТоваров);
	
	Запрос.УстановитьПараметр("ИспользоватьСерииНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры);
	Запрос.УстановитьПараметр("СерииНоменклатуры", СтруктураДополнительныеСвойства.ДанныеСерийНоменклатурыДляПроведения.СерииНоменклатуры);
	Запрос.УстановитьПараметр("ОстаткиСерийНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийНоменклатуры);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ДокументСсылкаОтчетОРозничныхПродажах.СтруктурнаяЕдиница);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Формирование проводок документа.
	ПроведениеДокументовУНФ.СформироватьТаблицуПроводок(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗапасыВРазрезеГТД(СтруктураДополнительныеСвойства);
	// Прослеживаемость
	ПрослеживаемостьУНФ.СформироватьДвиженияРеализацияТоваров(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	// Конец Прослеживаемость
	
	СформироватьТаблицаДенежныеСредстваВКассахККМ(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходы(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПродажи(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗапасы(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыИАгентскиеУслугиПринятые(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРезервыТоваровОрганизаций(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаУправленческий(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
	// ДисконтныеКарты
	СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	// АвтоматическиеСкидки
	СформироватьТаблицаПродажиПоПредоставленнымСкидкам(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	// Эквайринг
	СформироватьТаблицаРасчетыПоЭквайрингу(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаПлатежнымиКартами(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	// Конец Эквайринг
	
	// Кассовый метод
	СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
	// Серии номенклатуры
	СформироватьТаблицаСерииНоменклатуры(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
	// Подарочные сертификаты
	СформироватьТаблицаПодарочныеСертификаты(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаПодарочнымиСертификатами(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
	// Бонусы
	СформироватьТаблицаБонусныеБаллы(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаНачисленияБонусныхБаллов(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
	// Заказы покупателя в Рознице
	// Отмена резерва по заказу
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыИсточник", МассивРезультатов[6].Выгрузить());
	СформироватьТаблицаЗапасыИсточник(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
КонецПроцедуры

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаОтчетОРозничныхПродажах, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если ПроведениеДокументовУНФ.КонтрольОстатковВыключен() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыИзменение", необходимо выполнить контроль реализации товаров.
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыВРазрезеГТДИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыПокупателейИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыПринятыеИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияСерииНоменклатурыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияПодарочныеСертификатыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияПрослеживаемыеТоварыИзменение Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыНаСкладахИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК ЯчейкаПредставление,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(
		|				&МоментКонтроля,
		|				Организация В (&МассивОрганизаций)
		|					И (СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
		|						(ВЫБРАТЬ
		|							ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|							ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
		|							ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
		|							ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
		|							ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
		|						ИЗ
		|							ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК ЗапасыНаСкладахОстатки
		|		ПО ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыТоваровОрганизаций.Остатки(
		|				&МоментКонтроля,
		|				Организация В (&МассивОрганизаций)
		|					И (СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
		|						(ВЫБРАТЬ
		|							ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|							ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
		|							ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
		|							ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
		|							ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
		|						ИЗ
		|							ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК РезервыТоваровОрганизацийОстатки
		|		ПО (&ПередачаТоваровМеждуОрганизациями)
		|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = РезервыТоваровОрганизацийОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = РезервыТоваровОрганизацийОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = РезервыТоваровОрганизацийОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = РезервыТоваровОрганизацийОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = РезервыТоваровОрганизацийОстатки.Ячейка
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчетаПредставление,
		|	ДвиженияЗапасыИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
		|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
		|ИЗ
		|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
		|				&МоментКонтроля,
		|				Организация В (&МассивОрганизаций)
		|					И (СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
		|						(ВЫБРАТЬ
		|							ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|							ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчета,
		|							ДвиженияЗапасыИзменение.Номенклатура КАК Номенклатура,
		|							ДвиженияЗапасыИзменение.Характеристика КАК Характеристика,
		|							ДвиженияЗапасыИзменение.Партия КАК Партия,
		|							ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателя
		|						ИЗ
		|							ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение)) КАК ЗапасыОстатки
		|		ПО ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
		|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
		|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
		|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
		|			И (ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыПринятыеИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыПринятыеИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Контрагент КАК КонтрагентПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Договор КАК ДоговорПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Заказ КАК ЗаказПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи КАК ТипПриемаПередачиПредставление,
		|	ЗапасыПринятыеОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыПринятыеИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыПринятые,
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыПринятые,
		|	ЕСТЬNULL(ДвиженияЗапасыПринятыеИзменение.СуммаРасчетовИзменение, 0) + ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовЗапасыПринятые,
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовОстатокЗапасыПринятые
		|ИЗ
		|	ДвиженияЗапасыПринятыеИзменение КАК ДвиженияЗапасыПринятыеИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыИАгентскиеУслугиПринятые.Остатки(
		|				&МоментКонтроля,
		|				(Организация, Номенклатура, Характеристика, Партия, Контрагент, Договор, Заказ, ТипПриемаПередачи) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыПринятыеИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыПринятыеИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыПринятыеИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыПринятыеИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыПринятыеИзменение.Контрагент КАК Контрагент,
		|						ДвиженияЗапасыПринятыеИзменение.Договор КАК Договор,
		|						ДвиженияЗапасыПринятыеИзменение.Заказ КАК Заказ,
		|						ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи КАК ТипПриемаПередачи
		|					ИЗ
		|						ДвиженияЗапасыПринятыеИзменение КАК ДвиженияЗапасыПринятыеИзменение)) КАК ЗапасыПринятыеОстатки
		|		ПО ДвиженияЗапасыПринятыеИзменение.Организация = ЗапасыПринятыеОстатки.Организация
		|			И ДвиженияЗапасыПринятыеИзменение.Номенклатура = ЗапасыПринятыеОстатки.Номенклатура
		|			И ДвиженияЗапасыПринятыеИзменение.Характеристика = ЗапасыПринятыеОстатки.Характеристика
		|			И ДвиженияЗапасыПринятыеИзменение.Партия = ЗапасыПринятыеОстатки.Партия
		|			И ДвиженияЗапасыПринятыеИзменение.Контрагент = ЗапасыПринятыеОстатки.Контрагент
		|			И ДвиженияЗапасыПринятыеИзменение.Договор = ЗапасыПринятыеОстатки.Договор
		|			И ДвиженияЗапасыПринятыеИзменение.Заказ = ЗапасыПринятыеОстатки.Заказ
		|			И ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи = ЗапасыПринятыеОстатки.ТипПриемаПередачи
		|			И (ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) < 0
		|				ИЛИ ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыПокупателейИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗаказыПокупателейИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Склад КАК СкладПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя КАК ЗаказПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыПокупателейИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыПокупателей,
		|	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыПокупателей
		|ИЗ
		|	ДвиженияЗаказыПокупателейИзменение КАК ДвиженияЗаказыПокупателейИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментКонтроля, ) КАК ЗаказыПокупателейОстатки
		|		ПО ДвиженияЗаказыПокупателейИзменение.Организация = ЗаказыПокупателейОстатки.Организация
		|			И ДвиженияЗаказыПокупателейИзменение.Склад = ЗаказыПокупателейОстатки.Склад
		|			И ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
		|			И ДвиженияЗаказыПокупателейИзменение.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
		|			И ДвиженияЗаказыПокупателейИзменение.Характеристика = ЗаказыПокупателейОстатки.Характеристика
		|			И (ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияСерииНоменклатурыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияСерииНоменклатурыИзменение.Серия КАК СерияПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Ячейка КАК ЯчейкаПредставление,
		|	СерииНоменклатурыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	СерииНоменклатурыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияСерииНоменклатурыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияСерииНоменклатурыИзменение КАК ДвиженияСерииНоменклатурыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СерииНоменклатуры.Остатки(&МоментКонтроля, ) КАК СерииНоменклатурыОстатки
		|		ПО ДвиженияСерииНоменклатурыИзменение.СтруктурнаяЕдиница = СерииНоменклатурыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияСерииНоменклатурыИзменение.Номенклатура = СерииНоменклатурыОстатки.Номенклатура
		|			И ДвиженияСерииНоменклатурыИзменение.Характеристика = СерииНоменклатурыОстатки.Характеристика
		|			И ДвиженияСерииНоменклатурыИзменение.Партия = СерииНоменклатурыОстатки.Партия
		|			И ДвиженияСерииНоменклатурыИзменение.Серия = СерииНоменклатурыОстатки.Серия
		|			И ДвиженияСерииНоменклатурыИзменение.Ячейка = СерииНоменклатурыОстатки.Ячейка
		|			И (ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияПодарочныеСертификатыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияПодарочныеСертификатыИзменение.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ДвиженияПодарочныеСертификатыИзменение.НомерСертификата КАК НомерСертификата,
		|	ЕСТЬNULL(ДвиженияПодарочныеСертификатыИзменение.СуммаИзменение, 0) + ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) КАК ОстатокПодарочныеСертификаты,
		|	ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) КАК СуммаОстатокПодарочныеСертификаты
		|ИЗ
		|	ДвиженияПодарочныеСертификатыИзменение КАК ДвиженияПодарочныеСертификатыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&МоментКонтроля, ) КАК ПодарочныеСертификатыОстатки
		|		ПО ДвиженияПодарочныеСертификатыИзменение.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
		|			И ДвиженияПодарочныеСертификатыИзменение.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
		|			И (ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыВРазрезеГТДИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД) КАК НомерГТДПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения) КАК СтранаПроисхожденияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыВРазрезеГТДОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыВРазрезеГТДИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыВРазрезеГТД,
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыВРазрезеГТД
		|ИЗ
		|	ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыВРазрезеГТД.Остатки(
		|				&МоментКонтроля,
		|				Организация В (&МассивОрганизаций)
		|					И (НомерГТД, Номенклатура, Характеристика, Партия, СтранаПроисхождения) В
		|						(ВЫБРАТЬ
		|							ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД КАК НомерГТД,
		|							ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура КАК Номенклатура,
		|							ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика КАК Характеристика,
		|							ДвиженияЗапасыВРазрезеГТДИзменение.Партия КАК Партия,
		|							ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения КАК СтранаПроисхождения
		|						ИЗ
		|							ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение)) КАК ЗапасыВРазрезеГТДОстатки
		|		ПО ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД = ЗапасыВРазрезеГТДОстатки.НомерГТД
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура = ЗапасыВРазрезеГТДОстатки.Номенклатура
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика = ЗапасыВРазрезеГТДОстатки.Характеристика
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Партия = ЗапасыВРазрезеГТДОстатки.Партия
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения = ЗапасыВРазрезеГТДОстатки.СтранаПроисхождения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыТоваровОрганизаций.Остатки(
		|				&МоментКонтроля,
		|				Организация В (&МассивОрганизаций)
		|					И (НомерГТД, Номенклатура, Характеристика, Партия, СтранаПроисхождения) В
		|						(ВЫБРАТЬ
		|							ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД КАК НомерГТД,
		|							ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура КАК Номенклатура,
		|							ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика КАК Характеристика,
		|							ДвиженияЗапасыВРазрезеГТДИзменение.Партия КАК Партия,
		|							ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения КАК СтранаПроисхождения
		|						ИЗ
		|							ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение)) КАК РезервыТоваровОрганизацийОстатки
		|		ПО (&ПередачаТоваровМеждуОрганизациями)
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД = РезервыТоваровОрганизацийОстатки.НомерГТД
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура = РезервыТоваровОрганизацийОстатки.Номенклатура
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика = РезервыТоваровОрганизацийОстатки.Характеристика
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Партия = РезервыТоваровОрганизацийОстатки.Партия
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения = РезервыТоваровОрганизацийОстатки.СтранаПроисхождения
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияПрослеживаемыеТоварыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияПрослеживаемыеТоварыИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияПрослеживаемыеТоварыИзменение.РНПТ КАК РНПТПредставление,
		|	ДвиженияПрослеживаемыеТоварыИзменение.СтранаПроисхождения КАК СтранаПроисхожденияПредставление,
		|	ДвиженияПрослеживаемыеТоварыИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияПрослеживаемыеТоварыИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияПрослеживаемыеТоварыИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияПрослеживаемыеТоварыИзменение.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ДвиженияПрослеживаемыеТоварыИзменение.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПрослеживаемостиПредставление,
		|	ЕСТЬNULL(ДвиженияПрослеживаемыеТоварыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.КоличествоОстаток, 0) КАК ОстатокКоличество,
		|	ЕСТЬNULL(ДвиженияПрослеживаемыеТоварыИзменение.КоличествоПрослеживаемостиИзменение, 0) + ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.КоличествоПрослеживаемостиОстаток, 0) КАК ОстатокКоличествоПрослеживаемости,
		|	ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.КоличествоОстаток, 0) КАК ОстатокКоличествоТекущий,
		|	ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.КоличествоПрослеживаемостиОстаток, 0) КАК ОстатокКоличествоПрослеживаемостиТекущий
		|ИЗ
		|	ДвиженияПрослеживаемыеТоварыИзменение КАК ДвиженияПрослеживаемыеТоварыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПрослеживаемыеТовары.Остатки(&МоментКонтроля, ) КАК ПрослеживаемыеТоварыОстатки
		|		ПО ДвиженияПрослеживаемыеТоварыИзменение.Организация = ПрослеживаемыеТоварыОстатки.Организация
		|			И ДвиженияПрослеживаемыеТоварыИзменение.РНПТ = ПрослеживаемыеТоварыОстатки.РНПТ
		|			И ДвиженияПрослеживаемыеТоварыИзменение.СтранаПроисхождения = ПрослеживаемыеТоварыОстатки.СтранаПроисхождения
		|			И ДвиженияПрослеживаемыеТоварыИзменение.Номенклатура = ПрослеживаемыеТоварыОстатки.Номенклатура
		|			И ДвиженияПрослеживаемыеТоварыИзменение.Характеристика = ПрослеживаемыеТоварыОстатки.Характеристика
		|			И ДвиженияПрослеживаемыеТоварыИзменение.Партия = ПрослеживаемыеТоварыОстатки.Партия
		|			И (ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.КоличествоОстаток, 0) < 0
		|				ИЛИ ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.КоличествоПрослеживаемостиОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		// Интеркампани
		Запрос.УстановитьПараметр("МассивОрганизаций", 
			РегистрыСведений.НастройкаПередачиТоваровМеждуОрганизациями.ПолучитьСписокОрганизацийДляОстатков(ДополнительныеСвойства.ДляПроведения.Организация));
		Запрос.УстановитьПараметр("ПередачаТоваровМеждуОрганизациями", ДополнительныеСвойства.УчетнаяПолитика.ПередачаТоваровМеждуОрганизациями);
		// Конец Интеркампани
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
			ИЛИ НЕ МассивРезультатов[1].Пустой()
			ИЛИ НЕ МассивРезультатов[2].Пустой()
			ИЛИ НЕ МассивРезультатов[4].Пустой()
			ИЛИ НЕ МассивРезультатов[5].Пустой()
			ИЛИ НЕ МассивРезультатов[6].Пустой()
			Тогда
			
			ДокументОтчетОРозничныхПродажах = ДокументСсылкаОтчетОРозничныхПродажах.ПолучитьОбъект()
			
		КонецЕсли;
		
		// Неудача при формировании резервов передачи товаров
		// Сообщения выводятся в момент заполнения движений
		Если ДополнительныеСвойства.УчетнаяПолитика.ПередачаТоваровМеждуОрганизациями 
			И ДополнительныеСвойства.Свойство("ЕстьОшибкиПередачиТоваров") 
			И ДополнительныеСвойства.ЕстьОшибкиПередачиТоваров Тогда
			Отказ = Истина;
		КонецЕсли; 
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			КонтрольОстатковУНФ.ЗапасыНаСкладахСписком(ДокументОтчетОРозничныхПродажах, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;

		// Отрицательный остаток учета запасов.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			КонтрольОстатковУНФ.ЗапасыСписком(ДокументОтчетОРозничныхПродажах, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток запасов принятых.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			КонтрольОстатковУНФ.ЗапасыПринятые(ДокументОтчетОРозничныхПродажах, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по заказу покупателя.
		Если НЕ МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			КонтрольОстатковУНФ.ЗаказыПокупателей(ДокументОтчетОРозничныхПродажах, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета серийных номеров.
		Если НЕ МассивРезультатов[4].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
			КонтрольОстатковУНФ.СерииНоменклатуры(ДокументОтчетОРозничныхПродажах, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по подарочным сертификатам
		Если Не МассивРезультатов[5].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[5].Выбрать();
			ЗначениеОтказДоОшибок = Отказ;
			КонтрольОстатковУНФ.ПодарочныеСертификаты(ДокументОтчетОРозничныхПродажах, ВыборкаИзРезультатаЗапроса, Отказ);
			Отказ = ЗначениеОтказДоОшибок;
		КонецЕсли;
		
		Если Константы.КонтролироватьОстаткиПоНомерамГТД.Получить()
			И НЕ МассивРезультатов[6].Пустой() Тогда
			
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[6].Выбрать();
			КонтрольОстатковУНФ.ЗапасыВРазрезеГТД(ДокументОтчетОРозничныхПродажах, ВыборкаИзРезультатаЗапроса, Отказ);
			
		КонецЕсли;
		
		// Отрицательный остаток учета прослеживаемых товаров.
		Если Константы.ВестиУчетПрослеживаемыхТоваров.Получить() Тогда
			Если НЕ МассивРезультатов[7].Пустой() Тогда
				ВыборкаИзРезультатаЗапроса = МассивРезультатов[7].Выбрать();
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструПрослеживаемыеТовары(
					ДокументОтчетОРозничныхПродажах, ВыборкаИзРезультатаЗапроса, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить() Тогда
			Отказ = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДисконтныеКарты

// Формирует таблицу значений, содержащую данные для проведения по регистру ПродажиПоДисконтнымКартам.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = ДисконтныеКартыУНФСервер.ТекстЗапросаПродажиПоДисконтнойКарте("ОтчетОРозничныхПродажах");
	Запрос.УстановитьПараметр("ПроцентСкидки", 0);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		СтрокаРезультата.Скидка = ДисконтныеКартыУНФСервер.ВычислитьПроцентСкидкиПоДисконтнойКарте(СтруктураДополнительныеСвойства.ДляПроведения.Дата,
																										  СтрокаРезультата.ДисконтнаяКарта);
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам", РезультатЗапроса);
	
КонецПроцедуры // СформироватьТаблицаПродажиПоДисконтнойКарте()

#КонецОбласти

#Область АвтоматическиеСкидки

// Формирует таблицу значений, содержащую данные для проведения по регистру ПредоставленныеСкидки.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоПредоставленнымСкидкам(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Период КАК Период,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.СкидкаНаценка КАК ВидСкидкиНаценки,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Сумма КАК СуммаСкидки,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Документ КАК ДокументСкидки,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.СтруктурнаяЕдиница КАК ПолучательСкидки,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Ответственный КАК Ответственный
	|ИЗ
	|	ВременнаяТаблицаАвтоСкидкиНаценки КАК ВременнаяТаблицаАвтоСкидкиНаценки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Дата,
	|	ВременнаяТаблицаЗапасы.ВидСкидкиНаценки,
	|	ВременнаяТаблицаЗапасы.СуммаСкидкиНаценки,
	|	ВременнаяТаблицаЗапасы.Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика,
	|	ВременнаяТаблицаЗапасы.Документ,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.Ответственный
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|ГДЕ
	|	ВременнаяТаблицаЗапасы.СуммаСкидкиНаценки <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныеСкидки", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоПредоставленнымАвтоматическимСкидкам()

#КонецОбласти

#Область ПроцедурыОткрытияИЗакрытияСмены

// Процедура удаляет движения по регистру Запасы всех чеков и чеков ККМ из кассовой смены, которая передана в качестве параметра.
//
Процедура УдалитьДвиженияПоРегиструЗапасыВПробитыхЧекахККМ(КассоваяСменаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Удалим движения по запасам по пробитым чекам.
	// По отложенным чекам (товар зарезервирован, но чек не пробит) движения не удаляем, т.к. в этом случае
	// будет расхождение в регистрах Запасы и ЗапасыНаСкладах.
	// Пользователь должен будет удалить такие чеки вручную.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	2 КАК Порядок,
	|	ЧекККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	НЕ ЧекККМ.Архивный
	|	И НЕ ЧекККМ.ДвиженияПоЗапасамУдалять
	|	И ЧекККМ.Проведен
	|	И (ЧекККМ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ТоварЗарезервирован)
	|			ИЛИ ЧекККМ.НомерЧекаККМ <> 0)
	|	И ЧекККМ.КассоваяСмена = &КассоваяСмена
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ЧекККМВозврат.Ссылка
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	НЕ ЧекККМВозврат.Архивный
	|	И НЕ ЧекККМВозврат.ДвиженияПоЗапасамУдалять
	|	И ЧекККМВозврат.Проведен
	|	И ЧекККМВозврат.КассоваяСмена = &КассоваяСмена
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок");
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСменаОбъект.Ссылка);
	ВыборкаЧековККМ = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЧековККМ.Следующий() Цикл
		ЧекККМОбъект = ВыборкаЧековККМ.Ссылка.ПолучитьОбъект();
		ЧекККМОбъект.ДвиженияПоЗапасамУдалять = Истина;
		ЧекККМОбъект.Записать(РежимЗаписиДокумента.Запись); // Если будем записывать с проведением, то будут сформированы записи по всем регистрам.
		
		Набор = РегистрыНакопления.Запасы.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаЧековККМ.Ссылка);
		Набор.Записать(Истина);
		
		// Удалим движения по скидкам и дисконтным картам для правильного формирования отчета
		Набор = РегистрыНакопления.ПредоставленныеСкидки.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаЧековККМ.Ссылка);
		Набор.Записать(Истина);
		
		Набор = РегистрыНакопления.ПродажиПоДисконтнымКартам.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаЧековККМ.Ссылка);
		Набор.Записать(Истина);
		//
		
		// Удалим движения себестоимости по продажам
		Набор = РегистрыНакопления.Продажи.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаЧековККМ.Ссылка);
		Набор.Прочитать();
		ЗаписиКУдалению = Новый СписокЗначений;
		Для Каждого Запись Из Набор Цикл
			Если Запись.Себестоимость <> 0 Тогда
				ЗаписиКУдалению.Добавить(Запись);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Запись Из ЗаписиКУдалению Цикл
			Набор.Удалить(Запись.Значение);
		КонецЦикла;
		Набор.Записать();
		//
		
		Если СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки() = Истина Тогда
			Набор = РегистрыНакопления.СерииНоменклатуры.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(ВыборкаЧековККМ.Ссылка);
			Набор.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция выполняет закрытие кассовой смены.
//
Процедура ЗаполнитьОтчетОРозничныхПродажахПоДаннымВЧеках(ОтчетОРозничныхПродажахОбъект) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Подготовка данных.
	// Продажи и возвраты сворачиваем отдельно.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизаций.ПлательщикУСН КАК ПлательщикУСН,
	|	СистемыНалогообложенияОрганизаций.Организация КАК Организация
	|ПОМЕСТИТЬ ВТСистемыНалогообложения
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&ТекущаяДата, ) КАК СистемыНалогообложенияОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЧекиККМИЧекиККМНаВозврат.УчитыватьВНУ) КАК УчитыватьВНУ,
	|	СУММА(ЧекиККМИЧекиККМНаВозврат.ПолученаПредоплата) КАК ПолученаПредоплата
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ЕСТЬNULL(ВТСистемыНалогообложения.ПлательщикУСН, ЛОЖЬ)
	|						И ЧекККМ.СпециальныйНалоговыйРежим = ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК УчитыватьВНУ,
	|		СУММА(ЧекККМ.СуммаДокумента) КАК ПолученаПредоплата
	|	ИЗ
	|		Документ.ЧекККМ КАК ЧекККМ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСистемыНалогообложения КАК ВТСистемыНалогообложения
	|			ПО (ВТСистемыНалогообложения.Организация = ЧекККМ.Организация)
	|	ГДЕ
	|		ЧекККМ.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМ.Проведен
	|		И ЧекККМ.НомерЧекаККМ > 0
	|		И ЧекККМ.ОперацияСДенежнымиСредствами
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ЕСТЬNULL(ВТСистемыНалогообложения.ПлательщикУСН, ЛОЖЬ)
	|						И ЧекККМВозврат.СпециальныйНалоговыйРежим = ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ),
	|		СУММА(-ЧекККМВозврат.СуммаДокумента)
	|	ИЗ
	|		Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСистемыНалогообложения КАК ВТСистемыНалогообложения
	|			ПО (ВТСистемыНалогообложения.Организация = ЧекККМВозврат.Организация)
	|	ГДЕ
	|		ЧекККМВозврат.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМВозврат.Проведен
	|		И ЧекККМВозврат.НомерЧекаККМ > 0
	|		И ЧекККМВозврат.ОперацияСДенежнымиСредствами) КАК ЧекиККМИЧекиККМНаВозврат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЧекККМПредоплата.СуммаРасчетов) КАК СуммаРасчетов
	|ИЗ
	|	Документ.ЧекККМ.Предоплата КАК ЧекККМПредоплата
	|ГДЕ
	|	ЧекККМПредоплата.Ссылка.КассоваяСмена = &КассоваяСмена
	|	И ЧекККМПредоплата.Ссылка.Проведен
	|	И ЧекККМПредоплата.Ссылка.НомерЧекаККМ > 0
	|	И НЕ ЧекККМПредоплата.Ссылка.ОперацияСДенежнымиСредствами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	ЧекККМЗапасы.Характеристика КАК Характеристика,
	|	ЧекККМЗапасы.Партия КАК Партия,
	|	ЧекККМЗапасы.Количество КАК Количество,
	|	ЧекККМЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЧекККМЗапасы.Цена КАК Цена,
	|	ЧекККМЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЧекККМЗапасы.Сумма КАК Сумма,
	|	ЧекККМЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЧекККМЗапасы.Всего КАК Всего,
	|	ЧекККМЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЧекККМЗапасы.Ячейка КАК Ячейка,
	|	ЧекККМЗапасы.ВалютаДокумента КАК ВалютаДокумента,
	|	ЧекККМЗапасы.ВидЦен КАК ВидЦен,
	|	ЧекККМЗапасы.КассаККМ КАК КассаККМ,
	|	ЧекККМЗапасы.Подразделение КАК Подразделение,
	|	ЧекККМЗапасы.Ответственный КАК Ответственный,
	|	ЧекККМЗапасы.Организация КАК Организация,
	|	ЧекККМЗапасы.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЧекККМЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЧекККМЗапасы.Заказ КАК Заказ,
	|	ЧекККМЗапасы.Резерв КАК Резерв,
	|	ЧекККМЗапасы.Возврат КАК Возврат,
	|	ЧекККМЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЧекККМЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЧекККМЗапасы.ДоляСтоимости КАК ДоляСтоимости,
	|	ЧекККМЗапасы.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ЧекККМЗапасы.ДокументПродажи КАК ДокументПродажи,
	|	ЧекККМЗапасы.Контрагент КАК Контрагент,
	|	ЧекККМЗапасы.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТСистемыНалогообложения.ПлательщикУСН, ЛОЖЬ)
	|				И ЧекККМЗапасы.СпециальныйНалоговыйРежим = ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьВНУ,
	|	ЧекККМЗапасы.Патент КАК Патент,
	|	ЧекККМЗапасы.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ВЫБОР
	|		КОГДА &ВестиУчетПрослеживаемыхТоваров
	|			ТОГДА ЧекККМЗапасы.Номенклатура.ПрослеживаемыйТовар
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрослеживаемыйТовар,
	|	ВЫБОР
	|		КОГДА &ВестиУчетПрослеживаемыхТоваров
	|				И ЧекККМЗапасы.Номенклатура.ПрослеживаемыйТовар
	|			ТОГДА ЧекККМЗапасы.Номенклатура.СтранаПроисхождения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтранаПроисхождения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|		ЧекККМЗапасы.Характеристика КАК Характеристика,
	|		ЧекККМЗапасы.Партия КАК Партия,
	|		СУММА(ЧекККМЗапасы.Количество) КАК Количество,
	|		ЧекККМЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЧекККМЗапасы.Цена КАК Цена,
	|		СУММА(ЧекККМЗапасы.СуммаСкидкиНаценки) КАК СуммаСкидкиНаценки,
	|		ЧекККМЗапасы.Ссылка.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|		ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
	|		СУММА(ЧекККМЗапасы.Сумма) КАК Сумма,
	|		СУММА(ЧекККМЗапасы.СуммаНДС) КАК СуммаНДС,
	|		СУММА(ЧекККМЗапасы.Всего) КАК Всего,
	|		ВЫБОР
	|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|				ТОГДА ЧекККМЗапасы.Ссылка.СтруктурнаяЕдиница
	|			ИНАЧЕ ЧекККМЗапасы.СтруктурнаяЕдиница
	|		КОНЕЦ КАК СтруктурнаяЕдиница,
	|		ВЫБОР
	|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|				ТОГДА ЧекККМЗапасы.Ссылка.Ячейка
	|			ИНАЧЕ ЧекККМЗапасы.Ячейка
	|		КОНЕЦ КАК Ячейка,
	|		ЧекККМЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|		ЧекККМЗапасы.Ссылка.ВидЦен КАК ВидЦен,
	|		ЧекККМЗапасы.Ссылка.КассаККМ КАК КассаККМ,
	|		ЧекККМЗапасы.Ссылка.Подразделение КАК Подразделение,
	|		ЧекККМЗапасы.Ссылка.Ответственный КАК Ответственный,
	|		ЧекККМЗапасы.Ссылка.Организация КАК Организация,
	|		ЧекККМЗапасы.Ссылка.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|		СУММА(ЧекККМЗапасы.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
	|		ЧекККМЗапасы.Заказ КАК Заказ,
	|		СУММА(ВЫБОР
	|				КОГДА &ЕстьЗаказыИРезерв
	|						И ЧекККМЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ТОГДА ЧекККМЗапасы.Резерв
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК Резерв,
	|		0 КАК Возврат,
	|		ЧекККМЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|		ЧекККМЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		СУММА(ЧекККМЗапасы.ДоляСтоимости) КАК ДоляСтоимости,
	|		ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка) КАК ДокументПродажи,
	|		ЧекККМЗапасы.Ссылка.Контрагент КАК Контрагент,
	|		СУММА(ЧекККМЗапасы.СуммаСкидкиОплатыБонусом) КАК СуммаСкидкиОплатыБонусом,
	|		ЧекККМЗапасы.Ссылка.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим,
	|		ЧекККМЗапасы.Ссылка.Патент КАК Патент,
	|		ЧекККМЗапасы.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента
	|	ИЗ
	|		Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|	ГДЕ
	|		ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМЗапасы.Ссылка.Проведен
	|		И ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0
	|		И НЕ ЧекККМЗапасы.Ссылка.ОперацияСДенежнымиСредствами
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЧекККМЗапасы.Номенклатура,
	|		ЧекККМЗапасы.Характеристика,
	|		ЧекККМЗапасы.Партия,
	|		ЧекККМЗапасы.ЕдиницаИзмерения,
	|		ЧекККМЗапасы.Цена,
	|		ЧекККМЗапасы.Ссылка.ВалютаДокумента,
	|		ЧекККМЗапасы.Ссылка.ВидЦен,
	|		ЧекККМЗапасы.Ссылка.КассаККМ,
	|		ЧекККМЗапасы.Ссылка.Организация,
	|		ЧекККМЗапасы.Ссылка.Подразделение,
	|		ЧекККМЗапасы.Ссылка.Ответственный,
	|		ЧекККМЗапасы.СтавкаНДС,
	|		ЧекККМЗапасы.Ссылка.ДисконтнаяКарта,
	|		ЧекККМЗапасы.Заказ,
	|		ЧекККМЗапасы.НоменклатураНабора,
	|		ЧекККМЗапасы.ХарактеристикаНабора,
	|		ЧекККМЗапасы.Ссылка.ВидСкидкиНаценки,
	|		ЧекККМЗапасы.Ссылка.Контрагент,
	|		ЧекККМЗапасы.Ссылка.СпециальныйНалоговыйРежим,
	|		ЧекККМЗапасы.Ссылка.Патент,
	|		ЧекККМЗапасы.ДоговорПлатежногоАгента,
	|		ВЫБОР
	|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|				ТОГДА ЧекККМЗапасы.Ссылка.СтруктурнаяЕдиница
	|			ИНАЧЕ ЧекККМЗапасы.СтруктурнаяЕдиница
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|				ТОГДА ЧекККМЗапасы.Ссылка.Ячейка
	|			ИНАЧЕ ЧекККМЗапасы.Ячейка
	|		КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЧекККМЗапасы.Номенклатура,
	|		ЧекККМЗапасы.Характеристика,
	|		ЧекККМЗапасы.Партия,
	|		СУММА(-ЧекККМЗапасы.Количество),
	|		ЧекККМЗапасы.ЕдиницаИзмерения,
	|		ЧекККМЗапасы.Цена,
	|		СУММА(-ЧекККМЗапасы.СуммаСкидкиНаценки),
	|		ЧекККМЗапасы.Ссылка.ВидСкидкиНаценки,
	|		ЧекККМЗапасы.СтавкаНДС,
	|		СУММА(-ЧекККМЗапасы.Сумма),
	|		СУММА(-ЧекККМЗапасы.СуммаНДС),
	|		СУММА(-ЧекККМЗапасы.Всего),
	|		ВЫБОР
	|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|				ТОГДА ЧекККМЗапасы.Ссылка.СтруктурнаяЕдиница
	|			ИНАЧЕ ЧекККМЗапасы.СтруктурнаяЕдиница
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|				ТОГДА ЧекККМЗапасы.Ссылка.Ячейка
	|			ИНАЧЕ ЧекККМЗапасы.Ячейка
	|		КОНЕЦ,
	|		ЧекККМЗапасы.Ссылка.ВалютаДокумента,
	|		ЧекККМЗапасы.Ссылка.ВидЦен,
	|		ЧекККМЗапасы.Ссылка.КассаККМ,
	|		ЧекККМЗапасы.Ссылка.Подразделение,
	|		ЧекККМЗапасы.Ссылка.Ответственный,
	|		ЧекККМЗапасы.Ссылка.Организация,
	|		ЧекККМЗапасы.Ссылка.ДисконтнаяКарта,
	|		СУММА(-ЧекККМЗапасы.СуммаАвтоматическойСкидки),
	|		ЧекККМЗапасы.Заказ,
	|		0,
	|		СУММА(ЧекККМЗапасы.Количество),
	|		ЧекККМЗапасы.НоменклатураНабора,
	|		ЧекККМЗапасы.ХарактеристикаНабора,
	|		СУММА(ЧекККМЗапасы.ДоляСтоимости),
	|		ВЫБОР
	|			КОГДА ЧекККМЗапасы.Ссылка.ЧекККМ.КассоваяСмена = &КассоваяСмена
	|				ТОГДА ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
	|			ИНАЧЕ ЧекККМЗапасы.Ссылка.ЧекККМ
	|		КОНЕЦ,
	|		ЧекККМЗапасы.Ссылка.Контрагент,
	|		СУММА(-ЧекККМЗапасы.СуммаСкидкиОплатыБонусом),
	|		ЧекККМЗапасы.Ссылка.СпециальныйНалоговыйРежим,
	|		ЧекККМЗапасы.Ссылка.ЧекККМ.Патент,
	|		ЧекККМЗапасы.ДоговорПлатежногоАгента
	|	ИЗ
	|		Документ.ЧекККМВозврат.Запасы КАК ЧекККМЗапасы
	|	ГДЕ
	|		ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМЗапасы.Ссылка.Проведен
	|		И ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0
	|		И НЕ ЧекККМЗапасы.Ссылка.ОперацияСДенежнымиСредствами
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЧекККМЗапасы.Ссылка.ЧекККМ.Патент,
	|		ЧекККМЗапасы.Номенклатура,
	|		ЧекККМЗапасы.Характеристика,
	|		ЧекККМЗапасы.Партия,
	|		ЧекККМЗапасы.ЕдиницаИзмерения,
	|		ЧекККМЗапасы.Цена,
	|		ЧекККМЗапасы.Ссылка.ВалютаДокумента,
	|		ЧекККМЗапасы.Ссылка.ВидЦен,
	|		ЧекККМЗапасы.Ссылка.КассаККМ,
	|		ЧекККМЗапасы.Ссылка.Организация,
	|		ЧекККМЗапасы.Ссылка.Подразделение,
	|		ЧекККМЗапасы.Ссылка.Ответственный,
	|		ЧекККМЗапасы.СтавкаНДС,
	|		ЧекККМЗапасы.Ссылка.ДисконтнаяКарта,
	|		ЧекККМЗапасы.Заказ,
	|		ЧекККМЗапасы.НоменклатураНабора,
	|		ЧекККМЗапасы.ХарактеристикаНабора,
	|		ЧекККМЗапасы.Ссылка.ВидСкидкиНаценки,
	|		ЧекККМЗапасы.ДоговорПлатежногоАгента,
	|		ВЫБОР
	|			КОГДА ЧекККМЗапасы.Ссылка.ЧекККМ.КассоваяСмена = &КассоваяСмена
	|				ТОГДА ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
	|			ИНАЧЕ ЧекККМЗапасы.Ссылка.ЧекККМ
	|		КОНЕЦ,
	|		ЧекККМЗапасы.Ссылка.Контрагент,
	|		ЧекККМЗапасы.Ссылка.СпециальныйНалоговыйРежим,
	|		ВЫБОР
	|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|				ТОГДА ЧекККМЗапасы.Ссылка.СтруктурнаяЕдиница
	|			ИНАЧЕ ЧекККМЗапасы.СтруктурнаяЕдиница
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|				ТОГДА ЧекККМЗапасы.Ссылка.Ячейка
	|			ИНАЧЕ ЧекККМЗапасы.Ячейка
	|		КОНЕЦ) КАК ЧекККМЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСистемыНалогообложения КАК ВТСистемыНалогообложения
	|		ПО (ВТСистемыНалогообложения.Организация = ЧекККМЗапасы.Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаПлатежнымиКартами.ВидОплаты КАК ВидОплаты,
	|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ОплатаПлатежнымиКартами.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	ОплатаПлатежнымиКартами.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ОплатаПлатежнымиКартами.НомерСертификата КАК НомерСертификата,
	|	СУММА(ОплатаПлатежнымиКартами.Сумма) КАК Сумма,
	|	СУММА(ОплатаПлатежнымиКартами.СуммаКомиссии) КАК СуммаКомиссии,
	|	ОплатаПлатежнымиКартами.Дата КАК ДатаПлатежа,
	|	СУММА(ОплатаПлатежнымиКартами.СуммаБонусов) КАК СуммаБонусов,
	|	ОплатаПлатежнымиКартами.БонуснаяКарта КАК БонуснаяКарта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТСистемыНалогообложения.ПлательщикУСН, ЛОЖЬ)
	|				И ОплатаПлатежнымиКартами.СпециальныйНалоговыйРежим = ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьВНУ,
	|	ОплатаПлатежнымиКартами.Патент КАК Патент,
	|	ОплатаПлатежнымиКартами.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ОплатаПлатежнымиКартами.ЭтоОтмена КАК ЭтоОтмена
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЧекККМОплатаПлатежнымиКартами.ВидОплаты КАК ВидОплаты,
	|		ВЫБОР
	|			КОГДА ЧекККМОплатаПлатежнымиКартами.ЭквайринговыйТерминал = ЗНАЧЕНИЕ(Справочник.ЭквайринговыеТерминалы.ПустаяСсылка)
	|				ТОГДА ЧекККМОплатаПлатежнымиКартами.Ссылка.ЭквайринговыйТерминал
	|			ИНАЧЕ ЧекККМОплатаПлатежнымиКартами.ЭквайринговыйТерминал
	|		КОНЕЦ КАК ЭквайринговыйТерминал,
	|		ЧекККМОплатаПлатежнымиКартами.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|		ЧекККМОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|		ЧекККМОплатаПлатежнымиКартами.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|		ЧекККМОплатаПлатежнымиКартами.НомерСертификата КАК НомерСертификата,
	|		ЧекККМОплатаПлатежнымиКартами.Сумма КАК Сумма,
	|		ЧекККМОплатаПлатежнымиКартами.СуммаКомиссии КАК СуммаКомиссии,
	|		ЧекККМОплатаПлатежнымиКартами.Ссылка.КассаККМ КАК КассаККМ,
	|		ЧекККМОплатаПлатежнымиКартами.Ссылка.Организация КАК Организация,
	|		ЧекККМОплатаПлатежнымиКартами.Ссылка.СтруктурнаяЕдиница КАК Склад,
	|		ЧекККМОплатаПлатежнымиКартами.Ссылка.ВалютаДокумента КАК Валюта,
	|		ЧекККМОплатаПлатежнымиКартами.Ссылка.ВидЦен КАК ВидЦен,
	|		ЧекККМОплатаПлатежнымиКартами.Ссылка.Дата КАК Дата,
	|		ЧекККМОплатаПлатежнымиКартами.СуммаБонусов КАК СуммаБонусов,
	|		ЧекККМОплатаПлатежнымиКартами.БонуснаяКарта КАК БонуснаяКарта,
	|		ЧекККМОплатаПлатежнымиКартами.Ссылка.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим,
	|		ЧекККМОплатаПлатежнымиКартами.Ссылка.Патент КАК Патент,
	|		ЧекККМОплатаПлатежнымиКартами.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|		ЛОЖЬ КАК ЭтоОтмена
	|	ИЗ
	|		Документ.ЧекККМ.БезналичнаяОплата КАК ЧекККМОплатаПлатежнымиКартами
	|	ГДЕ
	|		ЧекККМОплатаПлатежнымиКартами.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМОплатаПлатежнымиКартами.Ссылка.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЧекККМВозвратОплатаПлатежнымиКартами.ВидОплаты,
	|		ВЫБОР
	|			КОГДА ЧекККМВозвратОплатаПлатежнымиКартами.ЭквайринговыйТерминал = ЗНАЧЕНИЕ(Справочник.ЭквайринговыеТерминалы.ПустаяСсылка)
	|				ТОГДА ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ЭквайринговыйТерминал
	|			ИНАЧЕ ЧекККМВозвратОплатаПлатежнымиКартами.ЭквайринговыйТерминал
	|		КОНЕЦ,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.ВидПлатежнойКарты,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.НомерПлатежнойКарты,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.ПодарочныйСертификат,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.НомерСертификата,
	|		-ЧекККМВозвратОплатаПлатежнымиКартами.Сумма,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.СуммаКомиссии,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.КассаККМ,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Организация,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.СтруктурнаяЕдиница,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ВалютаДокумента,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ВидЦен,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Дата,
	|		-ЧекККМВозвратОплатаПлатежнымиКартами.СуммаБонусов,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.БонуснаяКарта,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.СпециальныйНалоговыйРежим,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ЧекККМ.Патент,
	|		НЕОПРЕДЕЛЕНО,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ЧекККМ.КассоваяСмена = ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.КассоваяСмена
	|	ИЗ
	|		Документ.ЧекККМВозврат.БезналичнаяОплата КАК ЧекККМВозвратОплатаПлатежнымиКартами
	|	ГДЕ
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Проведен) КАК ОплатаПлатежнымиКартами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСистемыНалогообложения КАК ВТСистемыНалогообложения
	|		ПО (ВТСистемыНалогообложения.Организация = ОплатаПлатежнымиКартами.Организация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал,
	|	ОплатаПлатежнымиКартами.ВидПлатежнойКарты,
	|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты,
	|	ОплатаПлатежнымиКартами.Дата,
	|	ОплатаПлатежнымиКартами.ПодарочныйСертификат,
	|	ОплатаПлатежнымиКартами.НомерСертификата,
	|	ОплатаПлатежнымиКартами.ВидОплаты,
	|	ОплатаПлатежнымиКартами.БонуснаяКарта,
	|	ВТСистемыНалогообложения.ПлательщикУСН,
	|	ОплатаПлатежнымиКартами.СпециальныйНалоговыйРежим,
	|	ОплатаПлатежнымиКартами.Патент,
	|	ОплатаПлатежнымиКартами.ДоговорПлатежногоАгента,
	|	ОплатаПлатежнымиКартами.ЭтоОтмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЧекККМЗапасы.Ответственный) КАК КоличествоОтветственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЧекККМЗапасы.Ссылка.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|	ГДЕ
	|		ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМЗапасы.Ссылка.Проведен
	|		И ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЧекККМЗапасы.Ссылка.Ответственный
	|	ИЗ
	|		Документ.ЧекККМВозврат.Запасы КАК ЧекККМЗапасы
	|	ГДЕ
	|		ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМЗапасы.Ссылка.Проведен
	|		И ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0) КАК ЧекККМЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	ЧекККМЗапасы.Характеристика КАК Характеристика,
	|	ЧекККМСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	ЧекККМСкидкиНаценки.Сумма КАК Сумма,
	|	ЧекККМЗапасы.Ссылка.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ВТ_АвтоСкидкиНаценкиОбъединение
	|ИЗ
	|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СкидкиНаценки КАК ЧекККМСкидкиНаценки
	|		ПО ЧекККМЗапасы.КлючСвязи = ЧекККМСкидкиНаценки.КлючСвязи
	|			И (ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена)
	|			И (ЧекККМЗапасы.Ссылка.Проведен)
	|			И (ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0)
	|			И ЧекККМЗапасы.Ссылка = ЧекККМСкидкиНаценки.Ссылка
	|ГДЕ
	|	НЕ ЧекККМЗапасы.Ссылка.ОперацияСДенежнымиСредствами
	|	И НЕ ЧекККМСкидкиНаценки.Ссылка.ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозвратЗапасы.Номенклатура,
	|	ЧекККМВозвратЗапасы.Характеристика,
	|	ЧекККМВозвратСкидкиНаценки.СкидкаНаценка,
	|	-ЧекККМВозвратСкидкиНаценки.Сумма,
	|	ЧекККМВозвратЗапасы.Ссылка.Ответственный
	|ИЗ
	|	Документ.ЧекККМВозврат.Запасы КАК ЧекККМВозвратЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.СкидкиНаценки КАК ЧекККМВозвратСкидкиНаценки
	|		ПО ЧекККМВозвратЗапасы.КлючСвязи = ЧекККМВозвратСкидкиНаценки.КлючСвязи
	|			И (ЧекККМВозвратЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена)
	|			И (ЧекККМВозвратЗапасы.Ссылка.Проведен)
	|			И (ЧекККМВозвратЗапасы.Ссылка.НомерЧекаККМ > 0)
	|			И ЧекККМВозвратЗапасы.Ссылка = ЧекККМВозвратСкидкиНаценки.Ссылка
	|ГДЕ
	|	НЕ ЧекККМВозвратЗапасы.Ссылка.ОперацияСДенежнымиСредствами
	|	И НЕ ЧекККМВозвратСкидкиНаценки.Ссылка.ОперацияСДенежнымиСредствами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АвтоСкидкиНаценкиОбъединение.Номенклатура КАК Номенклатура,
	|	ВТ_АвтоСкидкиНаценкиОбъединение.Характеристика КАК Характеристика,
	|	ВТ_АвтоСкидкиНаценкиОбъединение.СкидкаНаценка КАК СкидкаНаценка,
	|	СУММА(ВТ_АвтоСкидкиНаценкиОбъединение.Сумма) КАК Сумма,
	|	ВТ_АвтоСкидкиНаценкиОбъединение.Ответственный КАК Ответственный
	|ИЗ
	|	ВТ_АвтоСкидкиНаценкиОбъединение КАК ВТ_АвтоСкидкиНаценкиОбъединение
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_АвтоСкидкиНаценкиОбъединение.Номенклатура,
	|	ВТ_АвтоСкидкиНаценкиОбъединение.Характеристика,
	|	ВТ_АвтоСкидкиНаценкиОбъединение.СкидкаНаценка,
	|	ВТ_АвтоСкидкиНаценкиОбъединение.Ответственный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМПродажиВозвраты.Номенклатура КАК Номенклатура,
	|	ЧекККМПродажиВозвраты.Характеристика КАК Характеристика,
	|	ЧекККМПродажиВозвраты.Партия КАК Партия,
	|	ЧекККМПродажиВозвраты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЧекККМПродажиВозвраты.Цена КАК Цена,
	|	ЧекККМПродажиВозвраты.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ЧекККМПродажиВозвраты.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЧекККМПродажиВозвраты.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ЧекККМПродажиВозвраты.СтавкаНДС КАК СтавкаНДС,
	|	ЧекККМПродажиВозвраты.Заказ КАК Заказ,
	|	ЧекККМПродажиВозвраты.Серия КАК Серия,
	|	ЧекККМПродажиВозвраты.Ответственный КАК Ответственный,
	|	ЧекККМПродажиВозвраты.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЧекККМПродажиВозвраты.ПризнакПродаж КАК ПризнакПродаж,
	|	ЧекККМПродажиВозвраты.ДокументПродажи КАК ДокументПродажи,
	|	ЧекККМПродажиВозвраты.Количество КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|		ЧекККМЗапасы.Характеристика КАК Характеристика,
	|		ЧекККМЗапасы.Партия КАК Партия,
	|		ЧекККМЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЧекККМЗапасы.Цена КАК Цена,
	|		ЧекККМЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ЧекККМЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|		ЧекККМЗапасы.Ссылка.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|		ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
	|		ЧекККМЗапасы.Заказ КАК Заказ,
	|		ЧекККМСерииНоменклатуры.Серия КАК Серия,
	|		ЧекККМЗапасы.Ссылка.Ответственный КАК Ответственный,
	|		ЧекККМЗапасы.Ссылка.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|		1 КАК ПризнакПродаж,
	|		ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка) КАК ДокументПродажи,
	|		ЧекККМСерииНоменклатуры.Количество КАК Количество
	|	ИЗ
	|		Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СерииНоменклатуры КАК ЧекККМСерииНоменклатуры
	|			ПО ЧекККМЗапасы.КлючСвязи = ЧекККМСерииНоменклатуры.КлючСвязи
	|				И ЧекККМЗапасы.Ссылка = ЧекККМСерииНоменклатуры.Ссылка
	|	ГДЕ
	|		ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМЗапасы.Ссылка.Проведен
	|		И ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0
	|		И ЧекККМСерииНоменклатуры.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И НЕ ЧекККМЗапасы.Ссылка.ОперацияСДенежнымиСредствами
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЧекККМВозвратЗапасы.Номенклатура,
	|		ЧекККМВозвратЗапасы.Характеристика,
	|		ЧекККМВозвратЗапасы.Партия,
	|		ЧекККМВозвратЗапасы.ЕдиницаИзмерения,
	|		ЧекККМВозвратЗапасы.Цена,
	|		ЧекККМВозвратЗапасы.ПроцентСкидкиНаценки,
	|		ЧекККМВозвратЗапасы.СуммаСкидкиНаценки,
	|		ЧекККМВозвратЗапасы.Ссылка.ВидСкидкиНаценки,
	|		ЧекККМВозвратЗапасы.СтавкаНДС,
	|		ЧекККМВозвратЗапасы.Заказ,
	|		ЧекККМВозвратСерииНоменклатуры.Серия,
	|		ЧекККМВозвратЗапасы.Ссылка.Ответственный,
	|		ЧекККМВозвратЗапасы.Ссылка.ДисконтнаяКарта,
	|		-1,
	|		ВЫБОР
	|			КОГДА ЧекККМВозвратЗапасы.Ссылка.ЧекККМ.КассоваяСмена = &КассоваяСмена
	|				ТОГДА ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
	|			ИНАЧЕ ЧекККМВозвратЗапасы.Ссылка.ЧекККМ
	|		КОНЕЦ,
	|		ЧекККМВозвратСерииНоменклатуры.Количество
	|	ИЗ
	|		Документ.ЧекККМВозврат.Запасы КАК ЧекККМВозвратЗапасы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.СерииНоменклатуры КАК ЧекККМВозвратСерииНоменклатуры
	|			ПО ЧекККМВозвратЗапасы.КлючСвязи = ЧекККМВозвратСерииНоменклатуры.КлючСвязи
	|				И ЧекККМВозвратЗапасы.Ссылка = ЧекККМВозвратСерииНоменклатуры.Ссылка
	|	ГДЕ
	|		ЧекККМВозвратЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМВозвратЗапасы.Ссылка.Проведен
	|		И ЧекККМВозвратЗапасы.Ссылка.НомерЧекаККМ > 0
	|		И ЧекККМВозвратСерииНоменклатуры.Ссылка.КассоваяСмена = &КассоваяСмена) КАК ЧекККМПродажиВозвраты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЧекККМДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	СУММА(ЧекККМДобавленныеНаборы.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЧекККМДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|		ЧекККМДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		ЧекККМДобавленныеНаборы.Количество КАК Количество
	|	ИЗ
	|		Документ.ЧекККМ.ДобавленныеНаборы КАК ЧекККМДобавленныеНаборы
	|	ГДЕ
	|		ЧекККМДобавленныеНаборы.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМДобавленныеНаборы.Ссылка.Проведен
	|		И ЧекККМДобавленныеНаборы.Ссылка.НомерЧекаККМ > 0
	|		И НЕ ЧекККМДобавленныеНаборы.Ссылка.ОперацияСДенежнымиСредствами
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЧекККМДобавленныеНаборы.НоменклатураНабора,
	|		ЧекККМДобавленныеНаборы.ХарактеристикаНабора,
	|		-ЧекККМДобавленныеНаборы.Количество
	|	ИЗ
	|		Документ.ЧекККМВозврат.ДобавленныеНаборы КАК ЧекККМДобавленныеНаборы
	|	ГДЕ
	|		ЧекККМДобавленныеНаборы.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМДобавленныеНаборы.Ссылка.Проведен
	|		И ЧекККМДобавленныеНаборы.Ссылка.НомерЧекаККМ > 0
	|		И НЕ ЧекККМДобавленныеНаборы.Ссылка.ОперацияСДенежнымиСредствами) КАК ЧекККМДобавленныеНаборы
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМДобавленныеНаборы.НоменклатураНабора,
	|	ЧекККМДобавленныеНаборы.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	ЧекККМЗапасы.Характеристика КАК Характеристика,
	|	ЧекККМБонусныеБаллыКНачислению.СкидкаНаценка КАК СкидкаНаценка,
	|	ЧекККМБонусныеБаллыКНачислению.ДатаНачисления КАК ДатаНачисления,
	|	ЧекККМБонусныеБаллыКНачислению.ДатаСписания КАК ДатаСписания,
	|	ЧекККМБонусныеБаллыКНачислению.Ссылка.ДисконтнаяКарта КАК БонуснаяКарта,
	|	ЧекККМБонусныеБаллыКНачислению.КоличествоБонусныхБаллов КАК КоличествоБонусныхБаллов
	|ПОМЕСТИТЬ ВТ_НачисленияБонусныхБалловОбъединение
	|ИЗ
	|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.БонусныеБаллыКНачислению КАК ЧекККМБонусныеБаллыКНачислению
	|		ПО (ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена)
	|			И (ЧекККМЗапасы.Ссылка.Проведен)
	|			И ЧекККМЗапасы.Ссылка = ЧекККМБонусныеБаллыКНачислению.Ссылка
	|			И ЧекККМЗапасы.КлючСвязи = ЧекККМБонусныеБаллыКНачислению.КлючСвязи
	|			И (ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0)
	|ГДЕ
	|	НЕ ЧекККМЗапасы.Ссылка.ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозвратЗапасы.Номенклатура,
	|	ЧекККМВозвратЗапасы.Характеристика,
	|	ЧекККМВозвратБонусныеБаллыКНачислению.СкидкаНаценка,
	|	ЧекККМВозвратБонусныеБаллыКНачислению.ДатаНачисления,
	|	ЧекККМВозвратБонусныеБаллыКНачислению.ДатаСписания,
	|	ЧекККМВозвратБонусныеБаллыКНачислению.Ссылка.ДисконтнаяКарта,
	|	-ЧекККМВозвратБонусныеБаллыКНачислению.КоличествоБонусныхБаллов
	|ИЗ
	|	Документ.ЧекККМВозврат.Запасы КАК ЧекККМВозвратЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.БонусныеБаллыКНачислению КАК ЧекККМВозвратБонусныеБаллыКНачислению
	|		ПО (ЧекККМВозвратЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена)
	|			И (ЧекККМВозвратЗапасы.Ссылка.Проведен)
	|			И ЧекККМВозвратЗапасы.Ссылка = ЧекККМВозвратБонусныеБаллыКНачислению.Ссылка
	|			И ЧекККМВозвратЗапасы.КлючСвязи = ЧекККМВозвратБонусныеБаллыКНачислению.КлючСвязи
	|			И (ЧекККМВозвратЗапасы.Ссылка.НомерЧекаККМ > 0)
	|ГДЕ
	|	НЕ ЧекККМВозвратЗапасы.Ссылка.ОперацияСДенежнымиСредствами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НачисленияБонусныхБалловОбъединение.Номенклатура КАК Номенклатура,
	|	ВТ_НачисленияБонусныхБалловОбъединение.Характеристика КАК Характеристика,
	|	ВТ_НачисленияБонусныхБалловОбъединение.СкидкаНаценка КАК СкидкаНаценка,
	|	ВТ_НачисленияБонусныхБалловОбъединение.ДатаНачисления КАК ДатаНачисления,
	|	ВТ_НачисленияБонусныхБалловОбъединение.ДатаСписания КАК ДатаСписания,
	|	ВТ_НачисленияБонусныхБалловОбъединение.БонуснаяКарта КАК БонуснаяКарта,
	|	СУММА(ВТ_НачисленияБонусныхБалловОбъединение.КоличествоБонусныхБаллов) КАК КоличествоБонусныхБаллов
	|ИЗ
	|	ВТ_НачисленияБонусныхБалловОбъединение КАК ВТ_НачисленияБонусныхБалловОбъединение
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_НачисленияБонусныхБалловОбъединение.Номенклатура,
	|	ВТ_НачисленияБонусныхБалловОбъединение.Характеристика,
	|	ВТ_НачисленияБонусныхБалловОбъединение.СкидкаНаценка,
	|	ВТ_НачисленияБонусныхБалловОбъединение.ДатаНачисления,
	|	ВТ_НачисленияБонусныхБалловОбъединение.ДатаСписания,
	|	ВТ_НачисленияБонусныхБалловОбъединение.БонуснаяКарта";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КассоваяСмена", ОтчетОРозничныхПродажахОбъект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	// Прослеживаемость
	Запрос.УстановитьПараметр("ВестиУчетПрослеживаемыхТоваров", ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров(ТекущаяДатаСеанса()));
	
	// АвтоматическиеСкидки
	Запрос.УстановитьПараметр("ИспользоватьАвтоматическиеСкидки", ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки"));
	// Конец АвтоматическиеСкидки
	// Заказы покупателей в розничной торговле
	Запрос.УстановитьПараметр("ЕстьЗаказыИРезерв", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле") И
	ПолучитьФункциональнуюОпцию("РезервированиеЗапасов"));
	// Конец Заказы покупателей в розничной торговле
	
	Результат = Запрос.ВыполнитьПакет();
	
	Запасы = Результат[Результат.Количество()-9].Выгрузить();
	Запасы.Колонки.Добавить("ПроцентАвтоматическойСкидки", Новый ОписаниеТипов("Число"));
	Запасы.Колонки.Добавить("ПроцентСкидкиНаценки", Новый ОписаниеТипов("Число"));
	ОплатаПлатежнымиКартами = Результат[Результат.Количество()-8].Выгрузить();
	ПолученаПредоплатаВыборка = Результат[Результат.Количество()-11].Выбрать();
	ПолученаПредоплатаВыборка.Следующий();
	
	ОтчетОРозничныхПродажахОбъект.Запасы.Очистить();
	ОтчетОРозничныхПродажахОбъект.БезналичнаяОплата.Очистить();
	// Прослеживаемость
	ОтчетОРозничныхПродажахОбъект.СведенияПрослеживаемости.Очистить();
	
	ПатентПоУмолчанию = Справочники.Патенты.ПустаяСсылка();
	УчитыватьВНУ = Ложь;
	
	Если Запасы.Количество() > 0 Тогда
		ОтчетОРозничныхПродажахОбъект.ПоложениеОтветственный = ?(
			Результат[Результат.Количество()-7].Выгрузить()[0].КоличествоОтветственный > 1,
			Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти,
			Перечисления.ПоложениеРеквизитаНаФорме.ВШапке
		);
		ПатентПоУмолчанию = Запасы[0].Патент;
		УчитыватьВНУ = Запасы[0].УчитыватьВНУ;
	Иначе
		УчитыватьВНУ = ПолученаПредоплатаВыборка.УчитыватьВНУ;
	КонецЕсли;
	
	НастройкиНалоговогоУчетаВШапке = Истина;
	ОтчетОРозничныхПродажахОбъект.Патент = ПатентПоУмолчанию;
	ОтчетОРозничныхПродажахОбъект.УчитыватьВНУ = УчитыватьВНУ;
	
	Для каждого СтрокаТЧ Из Запасы Цикл
		Если ПатентПоУмолчанию <> СтрокаТЧ.Патент
			Или УчитыватьВНУ <> СтрокаТЧ.УчитыватьВНУ Тогда
			НастройкиНалоговогоУчетаВШапке = Ложь;
		КонецЕсли;
		
		СуммаБезСкидки = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
		
		// Заполним процент автоматической скидки
		Если СтрокаТЧ.СуммаАвтоматическойСкидки <> 0 Тогда
			// Применение автоматической скидки.
			СтрокаТЧ.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , 100 * СтрокаТЧ.СуммаАвтоматическойСкидки / СуммаБезСкидки);
		КонецЕсли;
		// Заполним процент ручной скидки
		Если СтрокаТЧ.СуммаСкидкиНаценки <> 0 Тогда
			// Применение автоматической скидки.
			СтрокаТЧ.ПроцентСкидкиНаценки = ?(СуммаБезСкидки = 0, 0 , 100 * СтрокаТЧ.СуммаСкидкиНаценки / СуммаБезСкидки);
		КонецЕсли;
		
		// Рассчитаем процент оплаты бонусами
		Если СтрокаТЧ.СуммаСкидкиОплатыБонусом <> 0 Тогда
			ПроцентОплатыБонусом = ?(СуммаБезСкидки = 0, 0 , 100 * СтрокаТЧ.СуммаСкидкиОплатыБонусом / СуммаБезСкидки);
		Иначе
			ПроцентОплатыБонусом = 0;
		КонецЕсли;
		
		Если СтрокаТЧ.Всего <> 0 Или (СтрокаТЧ.ПроцентСкидкиНаценки + СтрокаТЧ.ПроцентАвтоматическойСкидки + ПроцентОплатыБонусом) >= 100 
			Или (Окр(СтрокаТЧ.Количество * СтрокаТЧ.Цена, 2) = 0 И СтрокаТЧ.Количество > 0 И СтрокаТЧ.Цена > 0) // Обработка сценария 0.001 * 0.01 = 0.00.
			// Заказы в Рознице.
			Или СтрокаТЧ.Резерв > 0
			Тогда
			СтрокаТабличнойЧастиЗапасы = ОтчетОРозничныхПродажахОбъект.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиЗапасы, СтрокаТЧ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НастройкиНалоговогоУчетаВШапке Тогда
		ОтчетОРозничныхПродажахОбъект.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	Иначе
		ОтчетОРозничныхПродажахОбъект.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	КонецЕсли;
	
	ДобавитьЗапасыВРазрезеГТД(ОтчетОРозничныхПродажахОбъект);
	
	Для каждого СтрокаТЧ Из ОплатаПлатежнымиКартами Цикл
		
		Если СтрокаТЧ.Сумма <> 0
			ИЛИ СтрокаТЧ.СуммаБонусов <> 0
			ИЛИ СтрокаТЧ.СуммаКомиссии <> 0 Тогда
			СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.БезналичнаяОплата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
		КонецЕсли;
		
	КонецЦикла;
	
	// АвтоматическиеСкидки
	ОтчетОРозничныхПродажахОбъект.СкидкиНаценки.Очистить();
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		
		АвтоматическиеСкидки = Результат[Результат.Количество()-5].Выгрузить();
		Для каждого СтрокаТЧ Из АвтоматическиеСкидки Цикл
			
			Если СтрокаТЧ.Сумма <> 0 Тогда
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.СкидкиНаценки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Серии номенклатуры
	ОтчетОРозничныхПродажахОбъект.СерииНоменклатуры.Очистить();
	СерииНоменклатурыУНФКлиентСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(ОтчетОРозничныхПродажахОбъект, "Запасы");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		
		СерииНоменклатуры = Результат[Результат.Количество()-4].Выгрузить();
		Для каждого СтрокаТЧ Из ОтчетОРозничныхПродажахОбъект.Запасы Цикл
			
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Партия, ЕдиницаИзмерения, Цена, СтавкаНДС, Заказ
			|, Ответственный, ДисконтнаяКарта, ДокументПродажи");
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЧ);
			КоличествоСерийНужноЗаполнить = СтрокаТЧ.Количество;
			ЭтоСтрокаВозврата = (КоличествоСерийНужноЗаполнить < 0);
			ВыбранныеСерииНоменклатуры = Новый Массив;
			
			СерииНоменклатурыПоОтбору = СерииНоменклатуры.НайтиСтроки(СтруктураОтбора);
			Если СерииНоменклатурыПоОтбору.Количество()>0 Тогда
				КлючСвязи = СтрокаТЧ.КлючСвязи;
				
				Для каждого СтрокаСерий Из СерииНоменклатурыПоОтбору Цикл
					// Если все Серии номенклатуры добавили, то выходим из цикла.
					Если КоличествоСерийНужноЗаполнить = 0 Тогда
						Прервать;
					КонецЕсли;
					// Для продажи обрабатываем Серии номенклатуры продажи.
					// Для возврата обрабатываем Серии номенклатуры возврата.
					ЭтоСерияВозврата = (СтрокаСерий.ПризнакПродаж < 0);
					Если ЭтоСтрокаВозврата
						И Не ЭтоСерияВозврата Тогда
						Продолжить;
					КонецЕсли;
					Если Не ЭтоСтрокаВозврата
						И ЭтоСерияВозврата Тогда
						Продолжить;
					КонецЕсли;
					
					// Добавим информацию о серии номенклатуры в табличную часть серий.
					НоваяСтрока = ОтчетОРозничныхПродажахОбъект.СерииНоменклатуры.Добавить();
					НоваяСтрока.КлючСвязи = КлючСвязи;
					НоваяСтрока.Серия = СтрокаСерий.Серия;
					НоваяСтрока.Количество = СтрокаСерий.Количество;
					
					Если ЭтоСтрокаВозврата Тогда
						КоличествоСерийНужноЗаполнить = КоличествоСерийНужноЗаполнить + НоваяСтрока.Количество;
					Иначе
						КоличествоСерийНужноЗаполнить = КоличествоСерийНужноЗаполнить - НоваяСтрока.Количество;
					КонецЕсли;
					ВыбранныеСерииНоменклатуры.Добавить(СтрокаСерий);
				КонецЦикла;
				
				// Удалить из таблицы Серии номенклатуры, которые уже были заполнены в строке документа
				Для каждого строкаСН Из ВыбранныеСерииНоменклатуры Цикл
					СерииНоменклатуры.Удалить(строкаСН);
				КонецЦикла; 
				
			КонецЕсли;
			
			СерииНоменклатурыУНФКлиентСервер.ОбновитьСтроковоеПредставлениеСерийНоменклатурыСтроки(СтрокаТЧ, ОтчетОРозничныхПродажахОбъект, "КлючСвязи");
			
		КонецЦикла;
		
	КонецЕсли;
	// Серии номенклатуры
	
	// Наборы
	ОтчетОРозничныхПродажахОбъект.ДобавленныеНаборы.Очистить();
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
		
		ДобавленныеНаборы = Результат[Результат.Количество()-3].Выгрузить();
		Для каждого СтрокаТЧ Из ДобавленныеНаборы Цикл
			Если СтрокаТЧ.Количество<>0 Тогда
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.ДобавленныеНаборы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	// Конец Наборы
	
	// НачисленияБонусов
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммы") Тогда
		НачисленияБонусов = Результат[Результат.Количество()-1].Выгрузить();
		ОтчетОРозничныхПродажахОбъект.БонусныеБаллыКНачислению.Очистить();
		Для Каждого СтрокаТЧ Из НачисленияБонусов Цикл
			НоваяСтрока = ОтчетОРозничныхПродажахОбъект.БонусныеБаллыКНачислению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		КонецЦикла;
	КонецЕсли;
	// Конец НачисленияБонусов
	
	ОтчетОРозничныхПродажахОбъект.СуммаПредоплаты = Результат[Результат.Количество()-10].Выгрузить().Итог("СуммаРасчетов");
	ОтчетОРозничныхПродажахОбъект.ПолученаПредоплата = ПолученаПредоплатаВыборка.ПолученаПредоплата;
	ОтчетОРозничныхПродажахОбъект.СуммаДокумента         = ОтчетОРозничныхПродажахОбъект.Запасы.Итог("Всего");
	
	Если Запасы.Количество() > 0 Тогда
		ОтчетОРозничныхПродажахОбъект.Ответственный = Запасы[0].Ответственный;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Ответственный) Тогда
		ОтчетОРозничныхПродажахОбъект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОтчетОРозничныхПродажахПоДаннымВЧеках()

// Функция выполняет закрытие кассовой смены.
//
// Параметры:
// 	ОтчетОРозничныхПродажахОбъект - ДокументОбъект.ОтчетОРозничныхПродажах - .
// Возвращаемое значение:
// 	Структура - Описание:
// * ОписаниеОшибки - Строка - .
// * ОтчетОРозничныхПродажах - ДокументСсылка.ОтчетОРозничныхПродажах - .
Функция ЗакрытьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажахОбъект) Экспорт
	
	СтруктураВозвращаемоеЗначение = Новый Структура;
	СтруктураВозвращаемоеЗначение.Вставить("ОтчетОРозничныхПродажах");
	СтруктураВозвращаемоеЗначение.Вставить("ОписаниеОшибки");
	
	ЗаполнитьОтчетОРозничныхПродажахПоДаннымВЧеках(ОтчетОРозничныхПродажахОбъект);
	
	ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены    = Перечисления.СтатусыОтчетаОРозничныхПродажах.Закрыта;
	Если ОтчетОРозничныхПродажахОбъект.ДополнительныеСвойства.Свойство("ЗагрузкаИзВнешнегоИсточника") <> Истина Тогда
		ДатаЗакрытияКассовойСмены = ТекущаяДатаСеанса();
		ОтчетОРозничныхПродажахОбъект.Дата                   = ДатаЗакрытияКассовойСмены;
		ОтчетОРозничныхПродажахОбъект.ОкончаниеКассовойСмены = ДатаЗакрытияКассовойСмены;
	КонецЕсли;
	
	ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
	СтруктураВозвращаемоеЗначение.ОписаниеОшибки = "";
	СтруктураВозвращаемоеЗначение.ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажахОбъект.Ссылка;
	
	Попытка
		ОтчетОРозничныхПродажахОбъект.ДополнительныеСвойства.Вставить("ЭтоЗакрытиеСмены", Истина);
		ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить(ОписаниеОшибки());
		СтруктураВозвращаемоеЗначение.ОписаниеОшибки = НСтр(
			"ru = 'При формировании отчета о розничных продажах произошла ошибка.'");
	КонецПопытки;
		
	Возврат СтруктураВозвращаемоеЗначение;
	
КонецФункции

// Выполняет удаление отложенных чеков по кассовой смене.
//
// Параметры:
//  ОтчетОРозничныхПродажах	 - ДокументОбъект.ОтчетОРозничныхПродажах	 - Кассовая смена, для которой следует удалить чеки
//  ОписаниеОшибки			 - Строка									 - Описание ошибки, возникшей в процессе удаления
// 
// Возвращаемое значение:
//  Булево - Результат удаления отложенных чеков
//
Функция УдалитьОтложенныеЧеки(ОтчетОРозничныхПродажах, ОписаниеОшибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Статус <> &Статус
	|	И ЧекККМ.КассоваяСмена = &ОтчетОРозничныхПродажах
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.НомерЧекаККМ = 0
	|	И ЧекККМВозврат.КассоваяСмена = &ОтчетОРозничныхПродажах");
	Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах.Ссылка);
	Запрос.УстановитьПараметр("Статус",        Перечисления.СтатусыЧековККМ.Пробит);
	ВыборкаЧековККМ = Запрос.Выполнить().Выбрать();
	
	Попытка
		
		ТаблицаНоменклатуры = Новый ТаблицаЗначений;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
		ОписаниеТипаНоменклатура = Новый ОписаниеТипов(МассивТипов);
		
		ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", ОписаниеТипаНоменклатура);
		
		Пока ВыборкаЧековККМ.Следующий() Цикл
			ДополнитьТаблицуНоменклатурыНоменклатуройИзЧека(ТаблицаНоменклатуры, ВыборкаЧековККМ.Ссылка);
			ЧекККМОбъект = ВыборкаЧековККМ.Ссылка.ПолучитьОбъект();
			ЧекККМОбъект.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		ДополнительныеПараметры = Новый Структура("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
		ОстаткиОбновлены = РегистрыСведений.ОстаткиТоваров.ОбновитьЗаписиОстатковВТехническомРегистре(ДополнительныеПараметры);
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Результат = Ложь;
		
		ОписаниеОшибки = НСтр(
			"ru = 'При удалении отложенных чеков произошла ошибка.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Выполняет архивацию чеков ККМ по кассовой смене.
//
// Параметры:
//  ОтчетОРозничныхПродажах	 - ДокументОбъект.ОтчетОРозничныхПродажах	 - Кассовая смена, для которой следует заархивировать чеки
//  ОписаниеОшибки			 - Строка									 - Описание ошибки, возникшей в процессе архивации
// 
Процедура ВыполнитьАрхивациюЧековККМ(ОтчетОРозничныхПродажахОбъект, ОписаниеОшибки = "") Экспорт
	
	НачатьТранзакцию();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	2 КАК Порядок,
	|	ЧекККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	(НЕ ЧекККМ.Архивный)
	|	И ЧекККМ.Проведен
	|	И ЧекККМ.НомерЧекаККМ > 0
	|	И ЧекККМ.КассоваяСмена = &ОтчетОРозничныхПродажах
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ЧекККМВозврат.Ссылка
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	(НЕ ЧекККМВозврат.Архивный)
	|	И ЧекККМВозврат.Проведен
	|	И ЧекККМВозврат.НомерЧекаККМ > 0
	|	И ЧекККМВозврат.КассоваяСмена = &ОтчетОРозничныхПродажах
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок");
	Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажахОбъект.Ссылка);
	ВыборкаЧековККМ = Запрос.Выполнить().Выбрать();
	
	ВсегоЧеков = ВыборкаЧековККМ.Количество();
	СчетчикЧеков = 0;
	
	Попытка
		
		Пока ВыборкаЧековККМ.Следующий() Цикл
			Если ВыборкаЧековККМ.Ссылка.ОперацияСДенежнымиСредствами Тогда
				ВызватьИсключение НСтр("ru = 'В смене присутствуют чеки на предоплату. Архивация невозможна'");;
			КонецЕсли;
			ЧекККМОбъект = ВыборкаЧековККМ.Ссылка.ПолучитьОбъект();
			ЧекККМОбъект.Архивный = Истина;
			ЧекККМОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			СчетчикЧеков = СчетчикЧеков + 1;
			ДлительныеОперации.СообщитьПрогресс(Окр(СчетчикЧеков / ВсегоЧеков * 100), НСтр("ru = 'чеков ККМ обработано'"));
		КонецЦикла;
		
		ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.ЗакрытаЧекиЗаархивированы;
		ОтчетОРозничныхПродажахОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
		ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = НСтр(
			"ru = 'При архивации чеков ККМ произошла ошибка.
			|Архивация чеков ККМ не выполнена.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);

	КонецПопытки;

КонецПроцедуры // ВыполнитьАрхивациюЧековККМ()

// Процедура выполняет закрытие кассовой смены.
// 
// Параметры:
// 	КассаККМ - СправочникСсылка.КассыККМ - .
// Возвращаемое значение:
// 	Структура, Неопределено - Описание:
// * ОтчетОРозничныхПродажах - Неопределено -
// * ОписаниеОшибки - Строка -
Функция СформироватьОтчетОРозничныхПродажахИВыполнитьАрхивацию(КассаККМ) Экспорт
	
	ОтчетОРозничныхПродажах = Неопределено;
	ОписаниеОшибки = "";
	
	СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	Если НЕ ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах) Тогда
		// Если нет связи кассовой смены и отчета, создаем новый отчет.
		Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.КассоваяСмена) Тогда
			ОтчетОРозничныхПродажах = РозничныеПродажиСервер.СоздатьОтчетОРозничныхПродажах(СтруктураСостояниеКассовойСмены.КассоваяСмена, ОписаниеОшибки);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОтчетОРозничныхПродажах) Тогда
			СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажах; 
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОтчетОРозничныхПродажахОбъект = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах.ПолучитьОбъект();
	СтруктураВозвращаемоеЗначение = ЗакрытьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажахОбъект);
	
	Если СтруктураВозвращаемоеЗначение.ОтчетОРозничныхПродажах = Неопределено Тогда
		
		ОписаниеОшибки = СтруктураВозвращаемоеЗначение.ОписаниеОшибки;
		
	Иначе
		
		ОтчетОРозничныхПродажах = СтруктураВозвращаемоеЗначение.ОтчетОРозничныхПродажах;
		
		Если Константы.УдалятьНепробитыеЧекиПриЗакрытииКассовойСмены.Получить() Тогда
			УдалитьОтложенныеЧеки(СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах.ПолучитьОбъект(), ОписаниеОшибки);
		КонецЕсли;
		
		Если Константы.АрхивироватьЧекиККМПриЗакрытииКассовойСмены.Получить() Тогда
			ВыполнитьАрхивациюЧековККМ(СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах.ПолучитьОбъект(), ОписаниеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	СтруктураВозврата.Вставить("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах);
	
	Возврат СтруктураВозврата;
	
КонецФункции // СформироватьОтчетОРозничныхПродажахИВыполнитьАрхивацию()

Процедура ДобавитьЗапасыВРазрезеГТД(ДокументОбъектОтчетОРозничныхПродажах)
	
	Если НЕ Константы.ФункциональнаяОпцияУчетГТД.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени",	ДокументОбъектОтчетОРозничныхПродажах.Дата);
	Запрос.УстановитьПараметр("Ссылка",			ДокументОбъектОтчетОРозничныхПродажах.Ссылка);
	Запрос.УстановитьПараметр("Организация",	ДокументОбъектОтчетОРозничныхПродажах.Организация);
	Запрос.УстановитьПараметр("ТаблицаЗапасы",	ДокументОбъектОтчетОРозничныхПродажах.Запасы.Выгрузить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&МоментВремени КАК Период,
	|	&Организация КАК Организация,
	|	ВременнаяТаблицаЗапасыИзПараметра.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЗапасыИзПараметра.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаЗапасыИзПараметра.Партия КАК Партия,
	|	ВременнаяТаблицаЗапасыИзПараметра.Количество КАК КоличествоВДокументе
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасыИзПараметра
	|ИЗ
	|	&ТаблицаЗапасы КАК ВременнаяТаблицаЗапасыИзПараметра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&МоментВремени КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	СУММА(ТаблицаЗапасыНаСкладах.КоличествоВДокументе) КАК КоличествоВДокументе
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	ВременнаяТаблицаЗапасыИзПараметра КАК ТаблицаЗапасыНаСкладах
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДвиженияДокумента.Регистратор.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ДвиженияДокумента.Номенклатура КАК Номенклатура,
	|	ДвиженияДокумента.Характеристика КАК Характеристика,
	|	ДвиженияДокумента.Партия КАК Партия,
	|	ДвиженияДокумента.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ДвиженияДокумента.НомерГТД КАК НомерГТД,
	|	ДвиженияДокумента.Количество КАК КоличествоОстаток
	|ПОМЕСТИТЬ ТаблицаОстатковГТД
	|ИЗ
	|	РегистрНакопления.ЗапасыВРазрезеГТД КАК ДвиженияДокумента
	|ГДЕ
	|	ДвиженияДокумента.Регистратор = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&МоментВремени,
	|	ВременнаяТаблицаЗапасы.Организация,
	|	ВременнаяТаблицаЗапасы.Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика,
	|	ВременнаяТаблицаЗапасы.Партия,
	|	ЗапасыВРазрезеГТД.СтранаПроисхождения,
	|	ЗапасыВРазрезеГТД.НомерГТД,
	|	ЕСТЬNULL(ЗапасыВРазрезеГТД.КоличествоОстаток, 0)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыВРазрезеГТД.Остатки(&МоментВремени, ) КАК ЗапасыВРазрезеГТД
	|		ПО ВременнаяТаблицаЗапасы.Организация = ЗапасыВРазрезеГТД.Организация
	|			И ВременнаяТаблицаЗапасы.Номенклатура = ЗапасыВРазрезеГТД.Номенклатура
	|			И ВременнаяТаблицаЗапасы.Характеристика = ЗапасыВРазрезеГТД.Характеристика
	|			И ВременнаяТаблицаЗапасы.Партия = ЗапасыВРазрезеГТД.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	ТаблицаОстатковГТД.Период КАК Период,
	|	ТаблицаОстатковГТД.Организация КАК Организация,
	|	ТаблицаОстатковГТД.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатковГТД.Характеристика КАК Характеристика,
	|	ТаблицаОстатковГТД.Партия КАК Партия,
	|	ТаблицаОстатковГТД.НомерГТД КАК НомерГТД,
	|	ТаблицаОстатковГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СУММА(ТаблицаОстатковГТД.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	ТаблицаОстатковГТД КАК ТаблицаОстатковГТД
	|ГДЕ
	|	ТаблицаОстатковГТД.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатковГТД.Период,
	|	ТаблицаОстатковГТД.Организация,
	|	ТаблицаОстатковГТД.Номенклатура,
	|	ТаблицаОстатковГТД.Характеристика,
	|	ТаблицаОстатковГТД.Партия,
	|	ТаблицаОстатковГТД.НомерГТД,
	|	ТаблицаОстатковГТД.СтранаПроисхождения";
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("СуммаСкидкиНаценки");
	ИменаПолей.Добавить("Сумма");
	ИменаПолей.Добавить("СуммаНДС");
	ИменаПолей.Добавить("Всего");
	ИменаПолей.Добавить("СуммаАвтоматическойСкидки");
	ИменаПолей.Добавить("СуммаСкидкиОплатыБонусом");
	ИменаПолей.Добавить("Резерв");
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ИндексТекущейСтроки", -1);
	ПараметрыПодбора.Вставить("ИменаПолей", ИменаПолей);
	ПараметрыПодбора.Вставить("ОстаткиПоГТД", ТаблицаОстатков);
	ПараметрыПодбора.Вставить("ПропуститьВозвраты", Истина);
	
	// В ОРП возможен такой сценарий:
	// Продали товар с ГТД, вернули этот товар и опять продали этот же товар.
	// Если это произошло в рамках одной смены, то потребуется 2 раза вызвать текущую функцию.
	// 1-й раз - распределяем остатки ГТД по проданным товарам.
	// Промежуточная обработка - распределяем проданные ГТД, которые вычислили при первом вызове, на возвраты (в другой процедуре).
	// 2-й раз - распределяем ГТД возвратов на те товары, для которых не хватило ГТД при первом проходе.
	МожетПонадобитьсяВторойПеренос = ГрузовыеТаможенныеДекларацииСервер.ПеренестиОстаткиНомеровГТДВТаблицуФормы(ДокументОбъектОтчетОРозничныхПродажах.Запасы, ПараметрыПодбора);
	БылиВозвратыСГТД = ДобавитьНомерГТДВозвращаемогоЗапаса(ДокументОбъектОтчетОРозничныхПродажах);
	Если МожетПонадобитьсяВторойПеренос И БылиВозвратыСГТД Тогда
		ТаблицаОстатковДляВторогоПереноса = ТаблицаОстатков.СкопироватьКолонки();
		Для каждого ТекущаяСтрока Из ДокументОбъектОтчетОРозничныхПродажах.Запасы Цикл
			Если ТекущаяСтрока.Количество < 0 И Не ТекущаяСтрока.НомерГТД.Пустая() Тогда
				НоваяСтрока = ТаблицаОстатковДляВторогоПереноса.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				НоваяСтрока.КоличествоОстаток = -ТекущаяСтрока.Количество;
				НоваяСтрока.Организация = ДокументОбъектОтчетОРозничныхПродажах.Организация;
				НоваяСтрока.Период = ДокументОбъектОтчетОРозничныхПродажах.Дата;
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаОстатковДляВторогоПереноса.Количество() > 0 Тогда
			ПараметрыПодбора.Вставить("ОстаткиПоГТД", ТаблицаОстатковДляВторогоПереноса);
			ПараметрыПодбора.Вставить("ВторойПеренос", Истина);
			ГрузовыеТаможенныеДекларацииСервер.ПеренестиОстаткиНомеровГТДВТаблицуФормы(ДокументОбъектОтчетОРозничныхПродажах.Запасы, ПараметрыПодбора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьНомерГТДВозвращаемогоЗапаса(ДокументОбъектОтчетОРозничныхПродажах)
	
	БылиВозвратыСГТД = ПодобратьГТДДляСтрокВозвратаТекущейСмены(ДокументОбъектОтчетОРозничныхПродажах);
	Возврат БылиВозвратыСГТД;
	
КонецФункции

Функция ПодобратьГТДДляСтрокВозвратаТекущейСмены(ДокументОбъектОтчетОРозничныхПродажах)
	
	БылиВозвратыСГТД = Ложь;
	
	ТаблицаФормы = ДокументОбъектОтчетОРозничныхПродажах.Запасы;
	
	ИменаСуммовыхПолей = Новый Массив;
	ИменаСуммовыхПолей.Добавить("СуммаСкидкиНаценки");
	ИменаСуммовыхПолей.Добавить("Сумма");
	ИменаСуммовыхПолей.Добавить("СуммаНДС");
	ИменаСуммовыхПолей.Добавить("Всего");
	ИменаСуммовыхПолей.Добавить("СуммаАвтоматическойСкидки");
	ИменаСуммовыхПолей.Добавить("СуммаСкидкиОплатыБонусом");
	
	// Подготовим служебную таблицу.
	ТаблицаЗапасы = ТаблицаФормы.Выгрузить();
	ТаблицаЗапасы.Очистить();
	
	// Для текущей смены мы в качестве остатков будем брать ГТД из текущих строк.
	ОстаткиПоГТДТекущаяСмена = ТаблицаФормы.Выгрузить();
	
	КоличественныеПоля = Новый Массив;
	КоличественныеПоля.Добавить("Резерв");
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Партия, ДокументПродажи");
	СтруктураПараметровПрошлаяСмена = Новый Структура("Номенклатура, Характеристика, Партия, ДокументПродажи, Организация");
	
	МаксимальныйКлючСвязи = 0;
	Для каждого СтрокаТЧ Из ТаблицаФормы Цикл
		Если СтрокаТЧ.КлючСвязи > МаксимальныйКлючСвязи Тогда
			МаксимальныйКлючСвязи = СтрокаТЧ.КлючСвязи;
		КонецЕсли;
	КонецЦикла;
	НовыйКлючСвязи = МаксимальныйКлючСвязи + 1;
	
	// Обработаем таблицу объекта.
	// Будем заполнять служебную таблицу, а потом таблицу объекта заменим на служебную.
	Для каждого СтрокаТЧ Из ТаблицаФормы Цикл
		
		// Строки с положительным количеством добавим как есть.
		Если СтрокаТЧ.Количество > 0 Тогда
			НоваяСтрока = ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			Продолжить;
		КонецЕсли;
		
		//
		// Обработаем строки с отрицательным количеством.
		//
		
		// Запомним значения суммовых полей.
		СтруктураИтогов = Новый Структура;
		Для каждого ИмяПоля Из ИменаСуммовыхПолей Цикл
			СтруктураИтогов.Вставить(ИмяПоля, СтрокаТЧ[ИмяПоля]);
		КонецЦикла;
		
		// Получим нужные строки с данными о ГТД.
		СтруктураОтбора.Номенклатура	= СтрокаТЧ.Номенклатура;
		СтруктураОтбора.Характеристика	= СтрокаТЧ.Характеристика;
		СтруктураОтбора.Партия			= СтрокаТЧ.Партия;
		
		ЭтоВозвратПоПродажеВТекущуюСмену = СтрокаТЧ.ДокументПродажи.Пустая();
		Если ЭтоВозвратПоПродажеВТекущуюСмену Тогда
			СтруктураОтбора.ДокументПродажи	= СтрокаТЧ.ДокументПродажи;
			МассивСтрокГТД = ОстаткиПоГТДТекущаяСмена.НайтиСтроки(СтруктураОтбора);
		Иначе
			ЗаполнитьЗначенияСвойств(СтруктураПараметровПрошлаяСмена, СтруктураОтбора);
			СтруктураПараметровПрошлаяСмена.ДокументПродажи = СтрокаТЧ.ДокументПродажи;
			СтруктураПараметровПрошлаяСмена.Организация = ДокументОбъектОтчетОРозничныхПродажах.Организация;
			
			ОстаткиГТДДляПрошлойСмены = ПолучитьОстаткиГТДПрошлойСмены(
				СтруктураПараметровПрошлаяСмена,
				ТаблицаЗапасы,
				ДокументОбъектОтчетОРозничныхПродажах.Ссылка);
			МассивСтрокГТД = ОстаткиГТДДляПрошлойСмены;
		КонецЕсли;
		
		// Вычислим количество для распределения.
		КоличествоОстаток	= -СтрокаТЧ.Количество; // Мы обрабатываем строки, в которых Количество < 0.
		
		// Вычислим коэффициент единицы измерения.
		КоэффициентПользовательскойЕдиницыИзмерения = 1;
		Если ТипЗнч(СтрокаТЧ.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			КоэффициентПользовательскойЕдиницыИзмерения = СтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
		
		// Подберем ГТД для строк возврата.
		Для каждого СтрокаМассива Из МассивСтрокГТД Цикл
			
			БылиВозвратыСГТД = Истина;
			
			// Добавим новую строку.
			НоваяСтрока = ТаблицаЗапасы.Добавить();
			
			// Заполним все реквизиты кроме количества.
			НоваяСтрока.КлючСвязи = НовыйКлючСвязи;
			НовыйКлючСвязи = НовыйКлючСвязи + 1;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			
			НоваяСтрока.НомерГТД			= СтрокаМассива.НомерГТД;
			НоваяСтрока.СтранаПроисхождения	= СтрокаМассива.СтранаПроисхождения;
			
			// Вычислим количество.
			Если СтрокаМассива.Количество > 0 И
				(КоличествоОстаток * КоэффициентПользовательскойЕдиницыИзмерения) <= СтрокаМассива.Количество Тогда
				
				НоваяСтрока.Количество			= -КоличествоОстаток;
				СтрокаМассива.Количество	= СтрокаМассива.Количество - (КоличествоОстаток * КоэффициентПользовательскойЕдиницыИзмерения);
				КоличествоОстаток				= 0;
				
				Если СтрокаМассива.Количество = 0 Тогда
					
					Если ЭтоВозвратПоПродажеВТекущуюСмену Тогда
						ОстаткиПоГТДТекущаяСмена.Удалить(СтрокаМассива);
					КонецЕсли;
					
				КонецЕсли;
				
				Для каждого ИмяПоля Из ИменаСуммовыхПолей Цикл
					
					НоваяСтрока[ИмяПоля] = СтруктураИтогов[ИмяПоля]
					
				КонецЦикла;
				
				Прервать;
				
			Иначе
				
				КоличествоСУчетомКоэффициента = ОКР(СтрокаМассива.Количество / КоэффициентПользовательскойЕдиницыИзмерения, 3);
				
				НоваяСтрока.Количество	= -КоличествоСУчетомКоэффициента;
				
				Если ИменаСуммовыхПолей.Количество() > 0 Тогда
					
					МножительПоКоэффициенту = (КоличествоСУчетомКоэффициента/-СтрокаТЧ.Количество);
					Для каждого ИмяПоля Из ИменаСуммовыхПолей Цикл
						
						Если КоличественныеПоля.Найти(ИмяПоля) = Неопределено Тогда
							
							НоваяСтрока[ИмяПоля] = Окр(НоваяСтрока[ИмяПоля] * МножительПоКоэффициенту, 3);
							
						Иначе
							// ????????????????????????????????
							НоваяСтрока[ИмяПоля] = МИН(НоваяСтрока.Количество, НоваяСтрока[ИмяПоля]);
							
						КонецЕсли;
						
						СтруктураИтогов[ИмяПоля] = СтруктураИтогов[ИмяПоля] - НоваяСтрока[ИмяПоля];
						
					КонецЦикла;
					
				КонецЕсли;
				
				КоличествоОстаток		= КоличествоОстаток - КоличествоСУчетомКоэффициента;
				Если ЭтоВозвратПоПродажеВТекущуюСмену Тогда
					ОстаткиПоГТДТекущаяСмена.Удалить(СтрокаМассива);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Если ГТД не хватило.
		Если КоличествоОстаток > 0 Тогда
		
			НоваяСтрока				= ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			
			НоваяСтрока.Количество			= -КоличествоОстаток;
			НоваяСтрока.НомерГТД			= Справочники.НомераГТД.ПустаяСсылка();
			НоваяСтрока.СтранаПроисхождения = СтрокаТЧ.СтранаПроисхождения;
			
			// Заполним суммовые поля.
			Для каждого ИмяПоля Из ИменаСуммовыхПолей Цикл
				НоваяСтрока[ИмяПоля] = СтруктураИтогов[ИмяПоля];
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заменим таблицу объекта на служебную таблицу.
	ТаблицаФормы.Загрузить(ТаблицаЗапасы);
	
	Возврат БылиВозвратыСГТД;
	
	// Серии номенклатуры должны распределяться после вызова этой процедуры.
	
КонецФункции

Функция ПолучитьОстаткиГТДПрошлойСмены(СтруктураПараметровПрошлаяСмена, ТаблицаЗапасы, ТекущийОРПСсылка)
	
	// 1. Посмотрим, есть ли ГТД в документе продажи.
	// 2. Если ГТД нет, то вернем пустую таблицу.
	// 3. Если ГТД есть, то поищем все возвраты по текущему документу продажи.
	
	// 1. Посмотрим, есть ли ГТД в документе продажи.
	ЗапросУказанГТДПродажи = Новый Запрос;
	
	ЗапросУказанГТДПродажи.УстановитьПараметр("ДокументПродажи", СтруктураПараметровПрошлаяСмена.ДокументПродажи);
	ЗапросУказанГТДПродажи.УстановитьПараметр("Номенклатура", СтруктураПараметровПрошлаяСмена.Номенклатура);
	ЗапросУказанГТДПродажи.УстановитьПараметр("Характеристика", СтруктураПараметровПрошлаяСмена.Характеристика);
	ЗапросУказанГТДПродажи.УстановитьПараметр("Партия", СтруктураПараметровПрошлаяСмена.Партия);
	
	ЗапросУказанГТДПродажи.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтчетОРозничныхПродажахЗапасы.НомерГТД КАК НомерГТД,
		|	ОтчетОРозничныхПродажахЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ОтчетОРозничныхПродажахЗапасы.Ссылка КАК Ссылка,
		|	ОтчетОРозничныхПродажахЗапасы.Ссылка.Дата КАК Дата
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Запасы КАК ОтчетОРозничныхПродажахЗапасы
		|ГДЕ
		|	ОтчетОРозничныхПродажахЗапасы.Ссылка = ВЫРАЗИТЬ(&ДокументПродажи КАК Документ.ЧекККМ).КассоваяСмена
		|	И ОтчетОРозничныхПродажахЗапасы.Номенклатура = &Номенклатура
		|	И ОтчетОРозничныхПродажахЗапасы.Партия = &Партия
		|	И ОтчетОРозничныхПродажахЗапасы.Характеристика = &Характеристика
		|	И ОтчетОРозничныхПродажахЗапасы.Количество > 0
		|	И ОтчетОРозничныхПродажахЗапасы.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)";
	
	РезультатЗапроса = ЗапросУказанГТДПродажи.Выполнить();
	
	// 2. Если ГТД нет, то вернем пустую таблицу.
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	// 3. Если ГТД есть, то поищем все возвраты по текущему документу продажи.
	ВыборкаУказанГТДПродажи = РезультатЗапроса.Выбрать();
	ВыборкаУказанГТДПродажи.Следующий();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОРППродажи", ВыборкаУказанГТДПродажи.Ссылка);
	Запрос.УстановитьПараметр("ДатаПродажи", ВыборкаУказанГТДПродажи.Дата);
	Запрос.УстановитьПараметр("Номенклатура", СтруктураПараметровПрошлаяСмена.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", СтруктураПараметровПрошлаяСмена.Характеристика);
	Запрос.УстановитьПараметр("Партия", СтруктураПараметровПрошлаяСмена.Партия);
	Запрос.УстановитьПараметр("Запасы", ТаблицаЗапасы);
	Запрос.УстановитьПараметр("ТекущийОРПСсылка", ТекущийОРПСсылка);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахЗапасы.Количество КАК Количество,
		|	ОтчетОРозничныхПродажахЗапасы.НомерГТД КАК НомерГТД,
		|	ОтчетОРозничныхПродажахЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.ДокументПродажи КАК Документ.ЧекККМ).КассоваяСмена КАК ОРППродажи
		|ПОМЕСТИТЬ ВременнаяТаблица_ТекущийОРП
		|ИЗ
		|	&Запасы КАК ОтчетОРозничныхПродажахЗапасы
		|ГДЕ
		|	ОтчетОРозничныхПродажахЗапасы.Номенклатура = &Номенклатура
		|	И ОтчетОРозничныхПродажахЗапасы.Партия = &Партия
		|	И ОтчетОРозничныхПродажахЗапасы.Характеристика = &Характеристика
		|	И ОтчетОРозничныхПродажахЗапасы.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
		|	И ОтчетОРозничныхПродажахЗапасы.Количество < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""1. ОРП продажи"" КАК Комментарий,
		|	ОтчетОРозничныхПродажахЗапасы.Количество КАК Количество,
		|	ОтчетОРозничныхПродажахЗапасы.НомерГТД КАК НомерГТД,
		|	ОтчетОРозничныхПродажахЗапасы.СтранаПроисхождения КАК СтранаПроисхождения
		|ПОМЕСТИТЬ ВременнаяТаблица_Объединение
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Запасы КАК ОтчетОРозничныхПродажахЗапасы
		|ГДЕ
		|	ОтчетОРозничныхПродажахЗапасы.Ссылка = &ОРППродажи
		|	И ОтчетОРозничныхПродажахЗапасы.Номенклатура = &Номенклатура
		|	И ОтчетОРозничныхПродажахЗапасы.Партия = &Партия
		|	И ОтчетОРозничныхПродажахЗапасы.Характеристика = &Характеристика
		|	И ОтчетОРозничныхПродажахЗапасы.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
		|	И ОтчетОРозничныхПродажахЗапасы.Количество > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетОРозничныхПродажахЗапасы.Количество,
		|	ОтчетОРозничныхПродажахЗапасы.НомерГТД,
		|	ОтчетОРозничныхПродажахЗапасы.СтранаПроисхождения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""2. ОРП позже ОРП продажи"",
		|	ОтчетОРозничныхПродажахЗапасы.Количество,
		|	ОтчетОРозничныхПродажахЗапасы.НомерГТД,
		|	ОтчетОРозничныхПродажахЗапасы.СтранаПроисхождения
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Запасы КАК ОтчетОРозничныхПродажахЗапасы
		|ГДЕ
		|	ОтчетОРозничныхПродажахЗапасы.Номенклатура = &Номенклатура
		|	И ОтчетОРозничныхПродажахЗапасы.Партия = &Партия
		|	И ОтчетОРозничныхПродажахЗапасы.Характеристика = &Характеристика
		|	И ОтчетОРозничныхПродажахЗапасы.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
		|	И ОтчетОРозничныхПродажахЗапасы.Ссылка.Дата > &ДатаПродажи
		|	И ОтчетОРозничныхПродажахЗапасы.Ссылка <> &ТекущийОРПСсылка
		|	И ОтчетОРозничныхПродажахЗапасы.ДокументПродажи.КассоваяСмена = &ОРППродажи
		|	И ОтчетОРозничныхПродажахЗапасы.Количество < 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетОРозничныхПродажахЗапасы.Количество,
		|	ОтчетОРозничныхПродажахЗапасы.НомерГТД,
		|	ОтчетОРозничныхПродажахЗапасы.СтранаПроисхождения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""3. Текущий ОРП"",
		|	ВременнаяТаблица_ТекущийОРП.Количество,
		|	ВременнаяТаблица_ТекущийОРП.НомерГТД,
		|	ВременнаяТаблица_ТекущийОРП.СтранаПроисхождения
		|ИЗ
		|	ВременнаяТаблица_ТекущийОРП КАК ВременнаяТаблица_ТекущийОРП
		|ГДЕ
		|	ВременнаяТаблица_ТекущийОРП.ОРППродажи = &ОРППродажи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВременнаяТаблица_Объединение.Количество) КАК Количество,
		|	ВременнаяТаблица_Объединение.НомерГТД КАК НомерГТД,
		|	ВременнаяТаблица_Объединение.СтранаПроисхождения КАК СтранаПроисхождения
		|ИЗ
		|	ВременнаяТаблица_Объединение КАК ВременнаяТаблица_Объединение
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблица_Объединение.СтранаПроисхождения,
		|	ВременнаяТаблица_Объединение.НомерГТД
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВременнаяТаблица_Объединение.Количество) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерГТД
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьТаблицуНоменклатурыНоменклатуройИзЧека(ТаблицаНоменклатуры, ЧекККМ)
	
	Для Каждого СтрокаЧекаККМ Из ЧекККМ.Запасы Цикл
		
		Если ТаблицаНоменклатуры.Найти(СтрокаЧекаККМ.Номенклатура) = Неопределено Тогда
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура = СтрокаЧекаККМ.Номенклатура;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииПроверкиСостоянияСмены

// Функция получает открытую кассовую смену по Кассе ККМ в заданный период.
// Используется для контроля пересечения кассовых смен.
// За один период может одновременно существовать только одна кассовая смена.
//
// Параметры:
// 	КассаККМ - СправочникСсылка.КассыККМ - .
// 	КассоваяСмена - Неопределено - Описание
// 	НачалоКассовойСмены - Дата - .
// 	ОкончаниеКассовойСмены - Дата - .
// Возвращаемое значение:
// 	Произвольный, Неопределено - Описание
Функция ПолучитьОткрытуюКассовуюСмену(КассаККМ, КассоваяСмена = Неопределено, НачалоКассовойСмены, ОкончаниеКассовойСмены) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.НачалоКассовойСмены <= &НачалоКассовойСмены
	|	И ВЫБОР
	|			КОГДА ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены >= &НачалоКассовойСмены
	|		КОНЕЦ
	|	И ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ
	|	И ОтчетОРозничныхПродажах.Ссылка <> &КассоваяСмена
	|	И ОтчетОРозничныхПродажах.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	&ОкончаниеКассовойСмены <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ОтчетОРозничныхПродажах.НачалоКассовойСмены <= &ОкончаниеКассовойСмены
	|	И ВЫБОР
	|			КОГДА ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены >= &ОкончаниеКассовойСмены
	|		КОНЕЦ
	|	И ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ
	|	И ОтчетОРозничныхПродажах.Ссылка <> &КассоваяСмена
	|	И ОтчетОРозничныхПродажах.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	&ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|	И ОтчетОРозничныхПродажах.НачалоКассовойСмены >= &НачалоКассовойСмены
	|	И ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ
	|	И ОтчетОРозничныхПродажах.Ссылка <> &КассоваяСмена
	|	И ОтчетОРозничныхПродажах.Проведен";
	
	Запрос.УстановитьПараметр("КассаККМ",               КассаККМ);
	Запрос.УстановитьПараметр("НачалоКассовойСмены",    НачалоКассовойСмены);
	Запрос.УстановитьПараметр("ОкончаниеКассовойСмены", ОкончаниеКассовойСмены);
	Запрос.УстановитьПараметр("КассоваяСмена",          КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьОткрытуюКассовуюСмену()

Функция ПолучитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.КассоваяСмена = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетОРозничныхПродажах.Дата УБЫВ,
	|	ОтчетОРозничныхПродажах.Ссылка УБЫВ";
	Запрос.УстановитьПараметр("Ссылка", КассоваяСмена);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗапроса.Следующий() Тогда
		Возврат ВыборкаЗапроса.Ссылка;
	Иначе
		Возврат Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ обложки кассовой книги
//
Функция СформироватьПечатнуюФормуОтчетаОРозничныхПродажах(МассивОбъектов, ОбъектыПечати)
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетОРозничныхПродажах.ПФ_MXL_ОтчетОРозничныхПродажах");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетОРозничныхПродажах_Накладная";
	
	// Заказы покупателей в розничной торговле
	ИтогЗаказВТЧ = Ложь;
	// Конец Заказы покупателей в розничной торговле
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажах.Номер КАК Номер,
	|	ОтчетОРозничныхПродажах.Дата КАК Дата,
	|	ОтчетОРозничныхПродажах.КассаККМ КАК КассаККМ,
	|	ОтчетОРозничныхПродажах.ВалютаДокумента КАК Валюта,
	|	ОтчетОРозничныхПродажах.КассаККМ.Представление КАК Покупатель,
	|	ОтчетОРозничныхПродажах.Организация КАК Организация,
	|	ОтчетОРозничныхПродажах.Организация.Префикс КАК Префикс,
	|	ОтчетОРозничныхПродажах.Организация.Представление КАК Поставщик,
	|	ОтчетОРозничныхПродажах.СуммаДокумента КАК СуммаДокумента,
	|	ОтчетОРозничныхПродажах.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ОтчетОРозничныхПродажах.ПодписьКассира.Должность КАК ДолжностьКассира,
	|	ОтчетОРозничныхПродажах.ПодписьКассира.РасшифровкаПодписи КАК РасшифровкаПодписиКассира,
	|	ОтчетОРозничныхПродажах.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Номенклатура.Представление КАК Запас,
	|		Номенклатура.НаименованиеПолное КАК ЗапасПолноеНаименование,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		Характеристика КАК Характеристика,
	|		Количество КАК Количество,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ОтчетОРозничныхПродажах.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ОтчетОРозничныхПродажах.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		СуммаАвтоматическойСкидки,
	|		Заказ,
	|		Заказ.Номер,
	|		Заказ.Дата,
	|		КлючСвязи,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаЗапасы,
	|	ОтчетОРозничныхПродажах.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы,
	|	ОтчетОРозничныхПродажах.СерииНоменклатуры.(
	|		Серия,
	|		КлючСвязи
	|	) КАК ТаблицаСерииНоменклатуры
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка В (&МассивОбъектов)
	|УПОРЯДОЧИТЬ ПО Ссылка, НомерСтроки";
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаЗапасы");
	
	Для каждого Шапка Из ДанныеДокументов Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
		// Заказы в розничной торговле
		ИспользоватьЗаказыВРозничнойТорговле = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле");
		Если ИспользоватьЗаказыВРозничнойТорговле Тогда
			ЗаказВТЧ = Ложь;
			Для каждого СтрокаЗапасы Из Шапка.ТаблицаЗапасы Цикл
				Если ЗначениеЗаполнено(СтрокаЗапасы.Заказ) Тогда
					ЗаказВТЧ = Истина;
					ИтогЗаказВТЧ = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЗаказВТЧ = Ложь;
		КонецЕсли;
		// Конец Заказы в розничной торговле
		
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, ,);
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.Дата, Шапка.Номер,
			Шапка.Префикс);
		
		// Выводим шапку накладной.
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|ОсновныеДанные");
		ОбластьМакета.Параметры.ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Отчет о розничных продажах № %1 от %2'"),
			НомерДокумента, Формат(Шапка.Дата, "ДЛФ=DD"));
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Заказы в розничной торговле
		Если ЗаказВТЧ Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|Заказ");
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЕсли;
		// Конец Заказы в розничной торговле
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации,
			"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик = Шапка.Организация;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ЕстьСкидки = Шапка.ТаблицаЗапасы.Итог("ЕстьСкидка") <> 0;
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьСуммы);
		Если ЗаказВТЧ Тогда
			ОбластьЗаказа = Макет.ПолучитьОбласть("ШапкаТаблицы|ЗаказТЧ");
			ТабДокумент.Присоединить(ОбластьЗаказа);
		КонецЕсли;
		
		ОбластьКолонкаЗапас = Макет.Область("Запас");
		
		Если Не ЕстьСкидки Тогда
			ОбластьКолонкаЗапас.ШиринаКолонки = ОбластьКолонкаЗапас.ШиринаКолонки
											  + Макет.Область("СуммаБезСкидки").ШиринаКолонки
											  + Макет.Область("СуммаСкидки").ШиринаКолонки;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		Если ЕстьСкидки Тогда
			ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
		КонецЕсли; 
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
		Если ЗаказВТЧ Тогда
			ОбластьЗаказВТЧ = Макет.ПолучитьОбласть("Строка|ЗаказТЧ");
		КонецЕсли;
		
		СтруктураИтогов = Новый Структура("Сумма, СуммаНДС, Всего, Количество, НомерСтроки, ВсегоСкидок, ВсегоБезСкидок, ЕстьСкидки, ЗаказВТЧ", 0, 0, 0, 0, 0, 0, 0, ЕстьСкидки, ЗаказВТЧ);
		ПараметрыНоменклатуры = Новый Структура;
		СтруктураЗаполненияСекции = Новый Структура;
		
		Для каждого СтрокаЗапасы Из Шапка.ТаблицаЗапасы Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаЗапасы.Количество) Тогда
				
				ТекстОшибки = НСтр("ru ='В одной из строк не заполнено количество - строка при печати пропущена!'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, СтруктураЗаполненияСекции, ТекстОшибки, "");
				
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаЗапасы.Номенклатура) Тогда
				
				ТекстОшибки = НСтр("ru ='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена!'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, СтруктураЗаполненияСекции, ТекстОшибки, "");
				
			КонецЕсли;
			
			ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиТоварныйЧек(СтрокаЗапасы, СтруктураЗаполненияСекции, ПараметрыНоменклатуры, СтруктураИтогов, Шапка);
			
			ОбластьНомера.Параметры.Заполнить(СтрокаЗапасы);
			ОбластьНомера.Параметры.Заполнить(СтруктураЗаполненияСекции);
			ОбластьДанных.Параметры.Заполнить(СтрокаЗапасы);
			ОбластьДанных.Параметры.Заполнить(СтруктураЗаполненияСекции);
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Заполнить(СтрокаЗапасы);
				ОбластьСкидок.Параметры.Заполнить(СтруктураЗаполненияСекции);
			КонецЕсли; 
			ОбластьСуммы.Параметры.Заполнить(СтрокаЗапасы);
			ОбластьСуммы.Параметры.Заполнить(СтруктураЗаполненияСекции);
			Если ЗаказВТЧ Тогда
				ОбластьЗаказВТЧ.Параметры.Заполнить(СтрокаЗапасы);
				ОбластьЗаказВТЧ.Параметры.Заполнить(СтруктураЗаполненияСекции);
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьНомера);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли; 
			ТабДокумент.Присоединить(ОбластьСуммы);
			Если ЗаказВТЧ Тогда
				ТабДокумент.Присоединить(ОбластьЗаказВТЧ);
			КонецЕсли;
			
			// Наборы
			НаборыСервер.УчестьОформлениеСтрокиНабора(ТабДокумент, ОбластьДанных, СтрокаЗапасы);
				
		КонецЦикла;
		
		// Вывести Итого.
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		
		СтруктураДанных = Новый Структура("Всего", СтруктураИтогов.Сумма);
		Если СтруктураИтогов.СуммаНДС = 0 Тогда
			
			СтруктураДанных.Вставить("НДС", "Без налога (НДС)");
			СтруктураДанных.Вставить("СуммаНДС", "-");
			
		Иначе
			
			СтруктураДанных.Вставить("НДС", ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:"));
			СтруктураДанных.Вставить("СуммаНДС", ПечатьДокументовУНФ.ФорматСумм(СтруктураИтогов.СуммаНДС));
			
		КонецЕсли; 
		
		ОбластьДанных.Параметры.Заполнить(СтруктураДанных);
		
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.ВсегоСкидок    = СтруктураИтогов.ВсегоСкидок;
			ОбластьСкидок.Параметры.ВсегоБезСкидок = СтруктураИтогов.ВсегоБезСкидок;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		
		ОбластьСуммы.Параметры.Заполнить(СтруктураДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// Заказы покупателя в Рознице
		Если ЗаказВТЧ Тогда
			ОбластьЗаказВТЧ  = Макет.ПолучитьОбласть("Итого|ЗаказТЧ");
			ТабДокумент.Присоединить(ОбластьЗаказВТЧ);
		КонецЕсли;
		// Конец Заказы покупателя в Рознице
		
		// Вывести Сумму прописью.
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = СтруктураИтогов.Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
													+ Строка(СтруктураИтогов.Количество)
													+ ", на сумму "
													+ ПечатьДокументовУНФ.ФорматСумм(СуммаКПрописи, Шапка.Валюта);
		
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.Валюта);
		ТабДокумент.Вывести(ОбластьМакета);
	
		// Вывести подписи.
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи|ОсновныеДанные");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Заказы в розничной торговле
		Если ЗаказВТЧ Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи|Заказ");
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЕсли;
		// Конец Заказы в розничной торговле
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Если ИтогЗаказВТЧ Тогда
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // СформироватьПечатнуюФормуОбложкиИПоследнегоЛистаКассовойКниги()

Процедура ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиТоварныйЧек(СтрокаТабличнойЧасти, ДанныеПечати, ПараметрыНоменклатуры, СтруктураИтогов, Шапка)
	
	ДанныеПечати.Очистить();
	
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		НомерСтроки = 0;
	Иначе
		СтруктураИтогов.НомерСтроки = СтруктураИтогов.НомерСтроки+1;
		НомерСтроки = СтруктураИтогов.НомерСтроки;
	КонецЕсли;
	ДанныеПечати.Вставить("НомерСтроки", НомерСтроки);
	
	ПараметрыНоменклатуры.Очистить();
	ПараметрыНоменклатуры.Вставить("Содержание", "");
	ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.Запас);
	ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
	ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
	ПараметрыНоменклатуры.Вставить("ПредставлениеСерииНоменклатуры", СерииНоменклатурыУНФ.СтрокаСерииНоменклатуры(Шапка.ТаблицаСерииНоменклатуры, СтрокаТабличнойЧасти.КлючСвязи));
	// Наборы
	ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора);
	
	ДанныеПечати.Вставить("Запас", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
	
	ДанныеПечати.Вставить("ПредставлениеКодаНоменклатуры", ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(СтрокаТабличнойЧасти));
	
	Скидка = 0;
	Если СтруктураИтогов.ЕстьСкидки Тогда
		
		Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
			
			Скидка = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			ДанныеПечати.Вставить("Скидка", Скидка);
			ДанныеПечати.Вставить("СуммаБезСкидки", Скидка);
			
		ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0 И СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0 Тогда
			
			ДанныеПечати.Вставить("Скидка", 0);
			ДанныеПечати.Вставить("СуммаБезСкидки", СтрокаТабличнойЧасти.Сумма);
			
		Иначе
			
			Скидка = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.Сумма; // АвтоматическиеСкидки
			ДанныеПечати.Вставить("Скидка", Скидка);
			ДанныеПечати.Вставить("СуммаБезСкидки", СтрокаТабличнойЧасти.Сумма + Скидка);
			
		КонецЕсли;
		
	КонецЕсли;
			
	Если СтруктураИтогов.ЗаказВТЧ Тогда
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
			ПредставлениеЗаказа = СтрШаблон(НСтр("ru = '№ %1 от %2'"), ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				СтрокаТабличнойЧасти.ЗаказНомер, Истина, Истина), Формат(СтрокаТабличнойЧасти.ЗаказДата, "ДЛФ=D"));
		Иначе
			ПредставлениеЗаказа = "";
		КонецЕсли;
		ДанныеПечати.Вставить("Заказ", ПредставлениеЗаказа);
	КонецЕсли;
	
	Если НЕ СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтруктураИтогов.Сумма			= СтруктураИтогов.Сумма			+ СтрокаТабличнойЧасти.Сумма;
		СтруктураИтогов.СуммаНДС		= СтруктураИтогов.СуммаНДС		+ СтрокаТабличнойЧасти.СуммаНДС;
		СтруктураИтогов.Всего			= СтруктураИтогов.Всего			+ СтрокаТабличнойЧасти.Всего;
		СтруктураИтогов.ВсегоСкидок		= СтруктураИтогов.ВсегоСкидок	+ Скидка;
		СтруктураИтогов.ВсегоБезСкидок	= СтруктураИтогов.Сумма			+ СтруктураИтогов.ВсегоСкидок;
		СтруктураИтогов.Количество		= СтруктураИтогов.Количество	+ 1;
	КонецЕсли; 
	
КонецПроцедуры

// Функция формирует табличный документ обложки кассовой книги
//
Функция СформироватьПечатнуюФормуКМ6(МассивОбъектов, ОбъектыПечати)
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетОРозничныхПродажах.ПФ_MXL_КМ6");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетОРозничныхПродажах_КМ6";
	
	ДанныеПечати = Новый Структура;
	
	ИменаОбластейМакета = Новый Массив;
	ИменаОбластейМакета.Добавить("Заголовок");
	ИменаОбластейМакета.Добавить("Шапка");
	ИменаОбластейМакета.Добавить("Строка");
	ИменаОбластейМакета.Добавить("Итог");
	ИменаОбластейМакета.Добавить("Подвал");
	ИменаОбластейМакета.Добавить("Оборот");
	ИменаОбластейМакета.Добавить("ПечатьСОборотом");
	
	Для каждого ОтчетОРозничныхПродажах Из МассивОбъектов Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало, ДанныеПечати);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ТЧЗапасы.Сумма), 0) КАК Сумма,
		|	ОтчетОРозничныхПродажах.КассаККМ КАК КассаККМ,
		|	ОтчетОРозничныхПродажах.КассаККМ.ПодключаемоеОборудование.Наименование КАК ПредставлениеККМ,
		|	ПРЕДСТАВЛЕНИЕ(ОтчетОРозничныхПродажах.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ОтчетОРозничныхПродажах.Организация КАК Организация,
		|	ОтчетОРозничныхПродажах.Организация.Префикс КАК Префикс,
		|	ОтчетОРозничныхПродажах.Номер КАК Номер,
		|	ОтчетОРозничныхПродажах.Дата КАК ДатаДокумента,
		|	""-"" КАК НомерОтдела,
		|	""-"" КАК НомерСекции,
		|	ОтчетОРозничныхПродажах.ВалютаДокумента КАК Валюта,
		|	ОтчетОРозничныхПродажах.НачалоКассовойСмены КАК НачалоСмены,
		|	ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены КАК ОкончаниеСмены,
		|	ОтчетОРозничныхПродажах.ПодписьРуководителя.Должность КАК ДолжностьРуководителя,
		|	ОтчетОРозничныхПродажах.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя,
		|	ОтчетОРозничныхПродажах.ПодписьЗаведующегоОтделом.Должность КАК ДолжностьЗаведующегоОтделом,
		|	ОтчетОРозничныхПродажах.ПодписьЗаведующегоОтделом.РасшифровкаПодписи КАК РасшифровкаПодписиЗаведующегоОтделом,
		|	ОтчетОРозничныхПродажах.ПодписьСтаршегоКассира.Должность КАК ДолжностьСтаршегоКассира,
		|	ОтчетОРозничныхПродажах.ПодписьСтаршегоКассира.РасшифровкаПодписи КАК РасшифровкаПодписиСтаршегоКассира,
		|	ОтчетОРозничныхПродажах.ПодписьКассира.Должность КАК ДолжностьКассира,
		|	ОтчетОРозничныхПродажах.ПодписьКассира.РасшифровкаПодписи КАК РасшифровкаПодписиКассира
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Запасы КАК ТЧЗапасы
		|		ПО (ТЧЗапасы.Ссылка.КассоваяСмена = ОтчетОРозничныхПродажах.Ссылка)
		|			И (НЕ ТЧЗапасы.Ссылка.ОперацияСДенежнымиСредствами)
		|ГДЕ
		|	ОтчетОРозничныхПродажах.Ссылка = &ОтчетОРозничныхПродажах
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетОРозничныхПродажах.Организация,
		|	ОтчетОРозничныхПродажах.Номер,
		|	ОтчетОРозничныхПродажах.Дата,
		|	ОтчетОРозничныхПродажах.ВалютаДокумента,
		|	ОтчетОРозничныхПродажах.НачалоКассовойСмены,
		|	ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены,
		|	ОтчетОРозничныхПродажах.КассаККМ,
		|	ОтчетОРозничныхПродажах.Организация.Префикс,
		|	ОтчетОРозничныхПродажах.КассаККМ.ПодключаемоеОборудование.Наименование,
		|	ОтчетОРозничныхПродажах.ПодписьРуководителя.Должность,
		|	ОтчетОРозничныхПродажах.ПодписьРуководителя.РасшифровкаПодписи,
		|	ОтчетОРозничныхПродажах.ПодписьЗаведующегоОтделом.Должность,
		|	ОтчетОРозничныхПродажах.ПодписьЗаведующегоОтделом.РасшифровкаПодписи,
		|	ОтчетОРозничныхПродажах.ПодписьСтаршегоКассира.Должность,
		|	ОтчетОРозничныхПродажах.ПодписьСтаршегоКассира.РасшифровкаПодписи,
		|	ОтчетОРозничныхПродажах.ПодписьКассира.Должность,
		|	ОтчетОРозничныхПродажах.ПодписьКассира.РасшифровкаПодписи,
		|	ПРЕДСТАВЛЕНИЕ(ОтчетОРозничныхПродажах.СтруктурнаяЕдиница)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ТЧЗапасы.Сумма), 0) КАК Сумма,
		|	ОтчетОРозничныхПродажах.КассаККМ КАК КассаККМ,
		|	ОтчетОРозничныхПродажах.КассаККМ.ПодключаемоеОборудование.Наименование КАК ПредставлениеККМ,
		|	ОтчетОРозничныхПродажах.Организация КАК Организация,
		|	ОтчетОРозничныхПродажах.Организация.Префикс КАК Префикс,
		|	ОтчетОРозничныхПродажах.Номер КАК НомерДокумента,
		|	ОтчетОРозничныхПродажах.Дата КАК ДатаДокумента,
		|	ОтчетОРозничныхПродажах.ВалютаДокумента КАК Валюта,
		|	ОтчетОРозничныхПродажах.НачалоКассовойСмены КАК НачалоСмены,
		|	ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены КАК ОкончаниеСмены
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.Запасы КАК ТЧЗапасы
		|		ПО (ТЧЗапасы.Ссылка.КассоваяСмена = ОтчетОРозничныхПродажах.Ссылка)
		|			И (НЕ ТЧЗапасы.Ссылка.ОперацияСДенежнымиСредствами)
		|ГДЕ
		|	ОтчетОРозничныхПродажах.Ссылка = &ОтчетОРозничныхПродажах
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетОРозничныхПродажах.Организация,
		|	ОтчетОРозничныхПродажах.Номер,
		|	ОтчетОРозничныхПродажах.Дата,
		|	ОтчетОРозничныхПродажах.ВалютаДокумента,
		|	ОтчетОРозничныхПродажах.НачалоКассовойСмены,
		|	ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены,
		|	ОтчетОРозничныхПродажах.КассаККМ,
		|	ОтчетОРозничныхПродажах.Организация.Префикс,
		|	ОтчетОРозничныхПродажах.КассаККМ.ПодключаемоеОборудование.Наименование";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах);
		Результат = Запрос.ВыполнитьПакет();
		
		Продажи = Результат[0].Выбрать();
		Продажи.Следующий();
		
		Возвраты = Результат[1].Выбрать();
		Возвраты.Следующий();
		
		СведенияОПокупателе = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Продажи.Организация, Продажи.ДатаДокумента, ,);
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Продажи.ДатаДокумента, Продажи.Номер, Продажи.Префикс);
		
		ДанныеПечати.Вставить("ОрганизацияПоОКПО", СведенияОПокупателе.КодПоОКПО);
		ДанныеПечати.Вставить("ВидДеятельностиПоОКДП", "");
		ДанныеПечати.Вставить("ОрганизацияИНН", СведенияОПокупателе.ИНН);
		ДанныеПечати.Вставить("РасшифровкаПодписиКассира", Продажи.РасшифровкаПодписиКассира);
		ДанныеПечати.Вставить("ОрганизацияПредставление", ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,ЮридическийАдрес,Телефоны,"));
		ДанныеПечати.Вставить("СтруктурнаяЕдиницаПредставление", Продажи.СтруктурнаяЕдиницаПредставление);
		ДанныеПечати.Вставить("ПредставлениеККМ", Продажи.ПредставлениеККМ);
		ДанныеПечати.Вставить("ПрограммаУчета", НСтр("ru ='1С:Предприятие 8'"));
		ДанныеПечати.Вставить("ДатаДокумента", Продажи.ДатаДокумента);
		ДанныеПечати.Вставить("НомерДокумента", НомерДокумента);
		ДанныеПечати.Вставить("НачалоСмены", Продажи.НачалоСмены);
		ДанныеПечати.Вставить("ОкончаниеСмены", Продажи.ОкончаниеСмены);
		ДанныеПечати.Вставить("НомерОтдела", Продажи.НомерОтдела);
		ДанныеПечати.Вставить("НомерСекции", Продажи.НомерСекции);
		ДанныеПечати.Вставить("Итого", Продажи.Сумма);
		ДанныеПечати.Вставить("ИтогоВозврат", Возвраты.Сумма);
		
		СуммаВыручкиПрописью = ?(Продажи.Сумма <> 0, РаботаСКурсамиВалют.СформироватьСуммуПрописью(Продажи.Сумма - Возвраты.Сумма, Продажи.Валюта), Неопределено);
		ДанныеПечати.Вставить("СуммаВыручкиПрописью", СуммаВыручкиПрописью);
		
		ДанныеПечати.Вставить("РасшифровкаПодписиЗаведующегоОтделом", Продажи.РасшифровкаПодписиЗаведующегоОтделом);
		ДанныеПечати.Вставить("РасшифровкаПодписиСтаршегоКассира", Продажи.РасшифровкаПодписиСтаршегоКассира);
		ДанныеПечати.Вставить("ДолжностьРуководителя", Продажи.ДолжностьРуководителя);
		ДанныеПечати.Вставить("РасшифровкаПодписиРуководителя", Продажи.РасшифровкаПодписиРуководителя);
		
		
		Для каждого ИмяСекции Из ИменаОбластейМакета Цикл
			
			ОбластьМакета = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, ИмяСекции, "", Ошибки);
			Если ОбластьМакета <> Неопределено Тогда
				
				Если ИмяСекции = "Оборот" Тогда
					
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
				КонецЕсли;
				
				ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ОтчетОРозничныхПродажах);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьПечатнуюФормуКМ6()

// Функция формирует табличный документ с печатной формой КМ3.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция СформироватьПечатнуюФормуКМ3(МассивОбъектов, ОбъектыПечати)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетОРозничныхПродажах_КМ3";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетОРозничныхПродажах.ПФ_MXL_КМ3");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетПоРознице.Ссылка КАК Ссылка
	|	,ОтчетПоРознице.Номер КАК Номер
	|	,ОтчетПоРознице.Дата КАК ДатаДокумента
	|	,ОтчетПоРознице.КассаККМ КАК КассаККМ
	|	,ОтчетПоРознице.КассаККМ.ТипКассы КАК ТипКассы
	|	,ОтчетПоРознице.КассаККМ.Представление КАК Покупатель
	|	,ОтчетПоРознице.Автор КАК Автор
	|	,ОтчетПоРознице.ВалютаДокумента КАК Валюта
	|	,ОтчетПоРознице.Организация КАК Организация
	|	,ОтчетПоРознице.Организация.Представление КАК Поставщик
	|	,ОтчетПоРознице.ПодписьРуководителя.Должность КАК ДолжностьРуководителя
	|	,ОтчетПоРознице.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя
	|	,ОтчетПоРознице.ПодписьЗаведующегоОтделом.Должность КАК ДолжностьЗаведующегоОтделом
	|	,ОтчетПоРознице.ПодписьЗаведующегоОтделом.РасшифровкаПодписи КАК РасшифровкаПодписиЗаведующегоОтделом
	|	,ОтчетПоРознице.ПодписьСтаршегоКассира.Должность КАК ДолжностьСтаршегоКассира
	|	,ОтчетПоРознице.ПодписьСтаршегоКассира.РасшифровкаПодписи КАК РасшифровкаПодписиСтаршегоКассира
	|	,ОтчетПоРознице.ПодписьКассира.Должность КАК ДолжностьКассира
	|	,ОтчетПоРознице.ПодписьКассира.РасшифровкаПодписи КАК РасшифровкаПодписиКассира
	|	,Неопределено КАК СерияККМ
	|	,Неопределено КАК РегистрационныйНомерККМ
	|	,Неопределено КАК ПредставлениеККМ
	|ИЗ Документ.ОтчетОРозничныхПродажах КАК ОтчетПоРознице
	|ГДЕ ОтчетПоРознице.Ссылка В(&МассивОбъектов)
	|УПОРЯДОЧИТЬ ПО Ссылка
	|
	|
	|;Выбрать
	|	ДокОтчетОРозничныхПродажах.Ссылка КАК ОтчетОРозничныхПродажах
	|	,ДокЧек.НомерЧекаККМ КАК НомерЧека
	|	,ДокЧек.СуммаДокумента КАК СуммаДокумента
	|ИЗ Документ.ОтчетОРозничныхПродажах КАК ДокОтчетОРозничныхПродажах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат КАК ДокЧек
	|		ПО ДокОтчетОРозничныхПродажах.Ссылка = ДокЧек.КассоваяСмена
	|			И (ДокЧек.Проведен)
	|			И (ДокЧек.НомерЧекаККМ > 0)
	|ГДЕ ДокОтчетОРозничныхПродажах.Ссылка В(&МассивОбъектов)
	|УПОРЯДОЧИТЬ ПО ОтчетОРозничныхПродажах
	|ИТОГИ ПО ДокОтчетОРозничныхПродажах.Ссылка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатЗапроса[0].Выбрать();
	
	ПервыйДокумент = Истина;
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 с типом кассы ""Автономная ККМ"" печать Акта о возврате денежных сумм по неиспользованным чекам (КМ-3) не требуется.'"),
				Выборка.Ссылка
			);
			
			ОбщегоНазначения.СообщитьПользователю(
				Текст,
				Выборка.Ссылка
			);
			Продолжить;
		КонецЕсли;
		
		ДокументНапечатан = Ложь;
		ВыборкаПоЧекамИтоги = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаПоЧекамИтоги.НайтиСледующий(Новый Структура("ОтчетОРозничныхПродажах", Выборка.Ссылка)) Тогда
			
			Если НЕ ПервыйДокумент Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ДокументНапечатан = Истина;
			
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
			
			ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
			ОбластьШапки.Параметры.Заполнить(Выборка);
			СведенияОбОрганизации							= ПечатьДокументовУНФ.СведенияОЮрФизЛице(Выборка.Организация, Выборка.ДатаДокумента, ,);
			ОбластьШапки.Параметры.ПредставлениеОрганизации	= ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,Телефоны,");;
			ОбластьШапки.Параметры.НомерДокумента			= "";
			ОбластьШапки.Параметры.ОрганизацияПоОКПО		= СведенияОбОрганизации.КодПоОКПО;
			ОбластьШапки.Параметры.ОрганизацияИНН			= СведенияОбОрганизации.ИНН;
			ОбластьШапки.Параметры.ВидДеятельностиПоОКДП	= "";
			ОбластьШапки.Параметры.ВидДеятельностиПоОКДП	= "";
			ОбластьШапки.Параметры.ПрограммаУчета 			= НСтр("ru ='1С:Предприятие 8'");
			ОбластьШапки.Параметры.ДолжностьРуководителя	= Выборка.ДолжностьРуководителя;
			ОбластьШапки.Параметры.РасшифровкаПодписиРуководителя = Выборка.РасшифровкаПодписиРуководителя;
			ТабДокумент.Вывести(ОбластьШапки);
			
			СуммаИтого     = 0;
			НомерПоПорядку = 0;
			ВыборкаПоЧекам = ВыборкаПоЧекамИтоги.Выбрать();
			Пока ВыборкаПоЧекам.Следующий() Цикл
				
				НомерПоПорядку = НомерПоПорядку + 1;
				ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
				ОбластьСтроки.Параметры.Заполнить(ВыборкаПоЧекам);
				ОбластьСтроки.Параметры.РасшифровкаПодписиРуководителя = Выборка.РасшифровкаПодписиРуководителя;
				ОбластьСтроки.Параметры.Номер = НомерПоПорядку;
				ТабДокумент.Вывести(ОбластьСтроки);
				
				СуммаИтого = СуммаИтого + ВыборкаПоЧекам.СуммаДокумента;
				
			КонецЦикла;
			
			ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
			ОбластьПодвала.Параметры.СуммаДокумента = СуммаИтого;
			ОбластьПодвала.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаИтого, Выборка.Валюта);
			ОбластьПодвала.Параметры.РасшифровкаПодписиЗаведующегоОтделом = Выборка.РасшифровкаПодписиЗаведующегоОтделом;
			ОбластьПодвала.Параметры.РасшифровкаПодписиСтаршегоКассира = Выборка.РасшифровкаПодписиСтаршегоКассира;
			ОбластьПодвала.Параметры.РасшифровкаПодписиКассира = Выборка.РасшифровкаПодписиКассира;
			ТабДокумент.Вывести(ОбластьПодвала);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
		
		КонецЕсли;
		
		Если Не ДокументНапечатан Тогда
			
			ТекстОшибки = НСтр("ru ='Нет данных для печати Акта о возврате денежных сумм по неиспользованным чекам (КМ-3). Первичный документ %1.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Выборка.Ссылка);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // СформироватьПечатнуюФормуКМ3()

// Процедура печати документа.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетОРозничныхПродажах") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ОтчетОРозничныхПродажах",
			НСтр("ru ='Отчет о розничных продажах'"),
			СформироватьПечатнуюФормуОтчетаОРозничныхПродажах(МассивОбъектов, ОбъектыПечати)
		);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КМ6") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КМ6",
			НСтр("ru ='Отчет за смену'"),
			СформироватьПечатнуюФормуКМ6(МассивОбъектов, ОбъектыПечати)
		);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КМ3") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КМ3",
			НСтр("ru ='КМ-3'"),
			СформироватьПечатнуюФормуКМ3(МассивОбъектов, ОбъектыПечати)
		);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, 
		КоллекцияПечатныхФорм);
	
КонецПроцедуры // Печать()

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОтчетОРозничныхПродажах";
	КомандаПечати.Представление = НСтр("ru = 'Отчет о розничных продажах'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КМ6";
	КомандаПечати.Представление = НСтр("ru = 'КМ6 (Отчет за смену)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КМ3";
	КомандаПечати.Представление = НСтр("ru = 'КМ3 (Акт о возврате денежных сумм)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 7;
	
КонецПроцедуры

#КонецОбласти

#Область Эквайринг

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасчетыПоЭквайрингу(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ОплатаПлатежнойКартой", "Оплата платежной картой");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("КомиссияОбработана", СтруктураДополнительныеСвойства.ДляПроведения.КомиссияОбработана);
	Запрос.УстановитьПараметр("ВестиУчетРасчетовСБанкомЭквайрером", ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСБанкомЭквайрером"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.Дата КАК Период,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Договор.КонтрольВзаиморасчетовЭквайринг
	|			ТОГДА ВЫБОР
	|					КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма > 0
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ПустаяСсылка)
	|	КОНЕЦ КАК ВидОперацииЭквайринга,
	|	&Организация КАК Организация,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Договор.КонтрольВзаиморасчетовЭквайринг
	|			ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ДатаПлатежа
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаПлатежа,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Договор.КонтрольВзаиморасчетовЭквайринг
	|			ТОГДА &Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ОперацияПоПлатежнымКартам.ПустаяСсылка)
	|	КОНЕЦ КАК Документ,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Договор.КонтрольВзаиморасчетовЭквайринг
	|			ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ВидПлатежнойКарты
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВидПлатежнойКарты,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Договор.КонтрольВзаиморасчетовЭквайринг
	|			ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.НомерПлатежнойКарты
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НомерПлатежнойКарты,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма > 0
	|				ИЛИ НЕ ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Договор.КонтрольВзаиморасчетовЭквайринг
	|			ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма
	|		ИНАЧЕ -ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма > 0
	|				ИЛИ НЕ ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Договор.КонтрольВзаиморасчетовЭквайринг
	|			ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал
	|		ИНАЧЕ -ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал
	|	КОНЕЦ КАК СуммаВал,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Договор.РасчетКомиссииВОтчетеЭквайера
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &КомиссияОбработана
	|					ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаКомиссии
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма > 0
	|							ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЭтоОтмена
	|									ТОГДА -ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссииПриОтмене, 0) / 100
	|								ИНАЧЕ -ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссииПриВозврате, 0) / 100
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Комиссия,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Договор.РасчетКомиссииВОтчетеЭквайера
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &КомиссияОбработана
	|					ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаКомиссииВал
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал > 0
	|							ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЭтоОтмена
	|									ТОГДА -ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссииПриОтмене, 0) / 100
	|								ИНАЧЕ -ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссииПриВозврате, 0) / 100
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КомиссияВал,
	|	&ОплатаПлатежнойКартой КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПроцентыКомиссии КАК ВременнаяТаблицаПроцентыКомиссии
	|		ПО ВременнаяТаблицаОплатаПлатежнымиКартами.ВидПлатежнойКарты = ВременнаяТаблицаПроцентыКомиссии.ВидПлатежнойКарты
	|			И ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал = ВременнаяТаблицаПроцентыКомиссии.ЭквайринговыйТерминал
	|ГДЕ
	|	&ВестиУчетРасчетовСБанкомЭквайрером
	|	И ВременнаяТаблицаОплатаПлатежнымиКартами.ВидОплаты В (ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта), ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Кредит))";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыПоЭквайрингу", РезультатЗапроса.Выгрузить());

КонецПроцедуры // СформироватьТаблицаПлатежныйКалендарь()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаПлатежнымиКартами(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	Запрос.УстановитьПараметр("КомиссияОбработана", СтруктураДополнительныеСвойства.ДляПроведения.КомиссияОбработана);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма КАК Сумма,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал КАК СуммаВал,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Договор.РасчетКомиссииВОтчетеЭквайера
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &КомиссияОбработана
	|					ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаКомиссии
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма > 0
	|							ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЭтоОтмена
	|									ТОГДА -ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссииПриОтмене, 0) / 100
	|								ИНАЧЕ -ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссииПриВозврате, 0) / 100
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаКомиссииПоДоговору,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Договор.РасчетКомиссииВОтчетеЭквайера
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &КомиссияОбработана
	|					ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаКомиссииВал
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал > 0
	|							ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЭтоОтмена
	|									ТОГДА -ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссииПриОтмене, 0) / 100
	|								ИНАЧЕ -ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссииПриВозврате, 0) / 100
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаКомиссииПоДоговоруВал,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПроцентыКомиссии КАК ВременнаяТаблицаПроцентыКомиссии
	|		ПО ВременнаяТаблицаОплатаПлатежнымиКартами.ВидПлатежнойКарты = ВременнаяТаблицаПроцентыКомиссии.ВидПлатежнойКарты
	|			И ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал = ВременнаяТаблицаПроцентыКомиссии.ЭквайринговыйТерминал
	|ГДЕ
	|	&ПолноеПроведение
	|	И ВременнаяТаблицаОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаПлатежнымиКартами", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПлатежныйКалендарь()

#КонецОбласти

#Область РаботаССериямиНоменклатуры

// Формирует таблицу значений, содержащую данные для проведения по регистру СерииНоменклатурыГарантии.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСерииНоменклатуры(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	// Данные о серийных номерах будут подготовлены в
	//    ДанныеДляПроверкиСерийНоменклатуры = СерииНоменклатурыУНФ.СвернутьСерииНоменклатурыДляПроверки(Запасы, СерииНоменклатуры);
	// Эта функция вызывается из ОбработкаПроверкиЗаполнения.
	
	Если ДокументСсылка.СерииНоменклатуры.Количество()=0 Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатуры", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.Количество >= 0
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.Количество >= 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Приход)
	|	КОНЕЦ КАК Операция,
	|	ВременнаяТаблицаЗапасы.Дата КАК Период,
	|	ВременнаяТаблицаЗапасы.Дата КАК ДатаСобытия,
	|	СерииНоменклатуры.Серия КАК Серия,
	|	СерииНоменклатуры.ОстаткиСерийНоменклатуры КАК ОстаткиСерийНоменклатуры,
	|	ВременнаяТаблицаЗапасы.Организация КАК Организация,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаЗапасы.Партия КАК Партия,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.Ячейка КАК Ячейка,
	|	ВременнаяТаблицаЗапасы.Количество КАК КоличествоЗапасы,
	|	СерииНоменклатуры.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерииНоменклатуры КАК СерииНоменклатуры
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерииНоменклатуры.КлючСвязи";
	
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если Не СтруктураДополнительныеСвойства.УчетнаяПолитика.МиграцияСерийНоменклатурыВыполнена Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", РезультатЗапроса);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Новый ТаблицаЗначений);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", РезультатЗапроса);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ОстаткиСерийНоменклатуры", Истина);
	ОстаткиСерийНоменклатурыСтроки = РезультатЗапроса.НайтиСтроки(ПараметрыОтбора);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатуры", РезультатЗапроса.Скопировать(ОстаткиСерийНоменклатурыСтроки));
	
КонецПроцедуры // СформироватьТаблицаСерииНоменклатуры()

#КонецОбласти

#Область ДействияПриОбменеГИСМ

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	НовыйСтатус        = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	ИспользоватьАвтоматическийОбмен = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхГИСМ");
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.КПередаче;
		Если ИспользоватьАвтоматическийОбмен Тогда
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием;
		Иначе
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен;
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РегистрыСведений.СтатусыИнформированияГИСМ.ОбновитьСтатус(
		ДокументСсылка,
		НовыйСтатус,
		ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	НовыйСтатус     = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.Передано;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ПринятоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РегистрыСведений.СтатусыИнформированияГИСМ.ОбновитьСтатус(ДокументСсылка, НовыйСтатус, ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

#КонецОбласти

#Область СообщенияГИСМ

Функция СообщениеКПередачеXML(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		Возврат ОтчетОРозничныхПродажахXML(ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		Возврат ИнтеграцияГИСМВызовСервера.ЗапросКвитанцииОФиксацииПоСсылкеXML(ДокументСсылка, Перечисления.ОперацииОбменаГИСМ.ПередачаДанных);
	КонецЕсли;
	
КонецФункции

Функция ОтчетОРозничныхПродажахXML(ДокументСсылка) Экспорт
	
	Если ИнтеграцияГИСМ.ИспользоватьВозможностиВерсии("2.41") Тогда
		Возврат ОтчетОРозничныхПродажахXML2_41(ДокументСсылка);
	Иначе
		Возврат ОтчетОРозничныхПродажахXML2_40(ДокументСсылка);
	КонецЕсли;
	
КонецФункции

#Область Версия2_40

Функция ОтчетОРозничныхПродажахXML2_40(ДокументСсылка) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанных)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Дата КАК Дата,
	|	ЕСТЬNULL(ВременнаяТаблица.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	ОтчетОРозничныхПродажах.Организация КАК Организация,
	|	ОтчетОРозничныхПродажах.Номер
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО ОтчетОРозничныхПродажах.Ссылка = ВременнаяТаблица.Ссылка
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.Количество <> 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ Товары.Ссылка.СуммаВключаетНДС
	|						ТОГДА ВЫРАЗИТЬ((Товары.Сумма + Товары.СуммаНДС) / Товары.Количество КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК ЧИСЛО(15, 2))
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|	Серии.Серия.НомерКиЗГИСМ КАК НомерКиЗ,
	|	Товары.СуммаНДС
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.СерииНоменклатуры КАК Серии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Запасы КАК Товары
	|		ПО (Товары.Ссылка = Серии.Ссылка)
	|			И (Товары.КлючСвязи = Серии.КлючСвязи)
	|ГДЕ
	|	Серии.Ссылка = &Ссылка
	|	И Товары.Номенклатура.ВидМаркировки <> ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.НеМаркируется)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка = Результат[1].Выбрать();
	Товары = Результат[2].Выгрузить();
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа, ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОрганизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Неопределено);
	
	СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа, ДокументСсылка, НомерВерсии);
	
	ИмяТипа   = "query";
	ИмяПакета = "retail_sale";
	
	ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
	
	ОтчетОРозничныхПродажах = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
	ОтчетОРозничныхПродажах.action_id  = ОтчетОРозничныхПродажах.action_id;
	
	Попытка
		ОтчетОРозничныхПродажах.sender_gln = РеквизитыОрганизации.GLN;
	Исключение
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОрганизации.GLN, Шапка);
	КонецПопытки;
	
	ОтчетОРозничныхПродажах.sales = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах, "sales");
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах.sales, "detail");
		НоваяСтрока.sign_num = СтрокаТЧ.НомерКиЗ;
		НоваяСтрока.cost     = СтрокаТЧ.Стоимость;
		Если ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			НоваяСтрока.vat_value = СтрокаТЧ.СуммаНДС;
		КонецЕсли;
		
		НоваяСтрока.doc_type   = 4;
		НоваяСтрока.doc_name   = НСтр("ru = 'Отчет о розничных продажах'");
		НоваяСтрока.doc_number = Шапка.Номер;
		
		ИнтеграцияГИСМ.УстановитьДатуСЧасовымПоясом(
			НоваяСтрока,
			"sale_time",
			Шапка.Дата,
			ХранилищеВременныхДат);
		
		ОтчетОРозничныхПродажах.sales.detail.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ПередачаДанных.version    = ПередачаДанных.version;
	ПередачаДанных[ИмяПакета] = ОтчетОРозничныхПродажах;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
	ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
	СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
	
	СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
	СообщениеXML.Организация  = Шапка.Организация;
	СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных;
	СообщениеXML.Документ     = ДокументСсылка;
	СообщениеXML.Версия       = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#Область Версия2_41

Функция ОтчетОРозничныхПродажахXML2_41(ДокументСсылка) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанных)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Дата КАК Дата,
	|	ЕСТЬNULL(ВременнаяТаблица.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	ОтчетОРозничныхПродажах.Организация КАК Организация,
	|	ОтчетОРозничныхПродажах.СтруктурнаяЕдиница КАК Подразделение,
	|	ОтчетОРозничныхПродажах.Номер КАК Номер
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО ОтчетОРозничныхПродажах.Ссылка = ВременнаяТаблица.Ссылка
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.Количество <> 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ Товары.Ссылка.СуммаВключаетНДС
	|						ТОГДА ВЫРАЗИТЬ((Товары.Сумма + Товары.СуммаНДС) / Товары.Количество КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК ЧИСЛО(15, 2))
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|	Серии.Серия.НомерКиЗГИСМ КАК НомерКиЗ,
	|	Товары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.СерииНоменклатуры КАК Серии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Запасы КАК Товары
	|		ПО (Товары.Ссылка = Серии.Ссылка)
	|			И (Товары.КлючСвязи = Серии.КлючСвязи)
	|ГДЕ
	|	Серии.Ссылка = &Ссылка
	|	И Товары.Номенклатура.ВидМаркировки <> ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.НеМаркируется)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка = Результат[1].Выбрать();
	Товары = Результат[2].Выгрузить();
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа, ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОрганизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Неопределено);
	
	СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа, ДокументСсылка, НомерВерсии);
	
	ИмяТипа   = "query";
	ИмяПакета = "retail_sale";
	
	ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
	
	ОтчетОРозничныхПродажах = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
	ОтчетОРозничныхПродажах.action_id  = ОтчетОРозничныхПродажах.action_id;
	
	Попытка
		ОтчетОРозничныхПродажах.sender_gln = РеквизитыОрганизации.GLN;
	Исключение
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОрганизации.GLN, Шапка);
	КонецПопытки;
	
	ОтчетОРозничныхПродажах.sales = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах, "sales");
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах.sales, "detail");
		
		НоваяСтрока.sign_num   = СтрокаТЧ.НомерКиЗ;
		НоваяСтрока.cost       = СтрокаТЧ.Стоимость;
		Если ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			НоваяСтрока.vat_value = СтрокаТЧ.СуммаНДС;
		КонецЕсли;
		НоваяСтрока.sale_time  = Шапка.Дата;
		
		НоваяСтрока.sale_docs = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(НоваяСтрока, "sale_docs");
		doc = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(НоваяСтрока.sale_docs, "doc");
		doc.doc_type   = 1;
		doc.doc_name   = НСтр("ru = 'Чек'");
		doc.doc_number = НСтр("ru = 'б/н'");
		doc.doc_date   = Шапка.Дата;
		НоваяСтрока.sale_docs.doc.Добавить(doc);
		
		ОтчетОРозничныхПродажах.sales.detail.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ПередачаДанных.version    = ПередачаДанных.version;
	ПередачаДанных[ИмяПакета] = ОтчетОРозничныхПродажах;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
	ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
	СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
	
	СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
	СообщениеXML.Организация  = Шапка.Организация;
	СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных;
	СообщениеXML.Документ     = ДокументСсылка;
	СообщениеXML.Версия       = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаСПодарочнымиСертификатами

Процедура СформироватьТаблицаПодарочныеСертификаты(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	Запрос.УстановитьПараметр("ИспользоватьСерииНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетОРозничныхПродажах);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК ПодарочныйСертификат,
	|	СерииНоменклатуры.Серия КАК НомерСертификата,
	|	ВременнаяТаблицаЗапасы.НоминалСертификата КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерииНоменклатуры КАК СерииНоменклатуры
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерииНоменклатуры.КлючСвязи
	|			И (&ИспользоватьСерииНоменклатуры)
	|ГДЕ
	|	&ПолноеПроведение
	|	И ВременнаяТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.ПодарочныйСертификат,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.НомерСертификата,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЧастичноеПогашение
	|			ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаСертификата
	|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ИспользоватьСерииНоменклатуры
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ЕСТЬNULL(ПодарочныеСертификатыОбороты.СуммаОборот, 0) > ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаСертификата
	|						ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ЕСТЬNULL(ПодарочныеСертификатыОбороты.СуммаОборот, 0)
	|					ИНАЧЕ ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаСертификата
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Номинал > ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаСертификата
	|					ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Номинал
	|				ИНАЧЕ ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаСертификата
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(, ) КАК ПодарочныеСертификатыОстатки
	|		ПО ВременнаяТаблицаОплатаПлатежнымиКартами.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
	|			И ВременнаяТаблицаОплатаПлатежнымиКартами.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Обороты(, , Регистратор, ) КАК ПодарочныеСертификатыОбороты
	|		ПО ВременнаяТаблицаОплатаПлатежнымиКартами.Документ = ПодарочныеСертификатыОбороты.ПодарочныйСертификат
	|			И ВременнаяТаблицаОплатаПлатежнымиКартами.НомерСертификата = ПодарочныеСертификатыОбороты.НомерСертификата
	|			И (ПодарочныеСертификатыОбороты.Регистратор = &Ссылка)
	|ГДЕ
	|	&ПолноеПроведение
	|	И ВременнаяТаблицаОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПодарочныеСертификаты", РезультатЗапроса);
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру ОплатаПодарочнымиСертификатами.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаПодарочнымиСертификатами(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	
	Запрос.Текст = РаботаСПодарочнымиСертификатами.СформироватьТекстЗапросаПоОплатеПодарочнымиСертификатами(,,Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаПодарочнымиСертификатами", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаПодарочнымиСертификатами()

// Формирует таблицу значений, содержащую данные для проведения по регистру РасчетыСПокупателями.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	Запрос.УстановитьПараметр("ВозникновениеАвансаПокупателя", "Возникновение аванса покупателя");
	Запрос.УстановитьПараметр("ЗачетАванса", НСтр("ru='Зачет предоплаты'"));
	
	Для Каждого КлючИЗначение Из СтруктураДополнительныеСвойства.ДляСертификатов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&КонтрагентДляПредоплаты КАК Контрагент,
	|	&ДоговорПоУмолчанию КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК Документ,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК Заказ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
	|	СУММА(ВременнаяТаблицаЗапасы.Сумма) КАК Сумма,
	|	СУММА(ВременнаяТаблицаЗапасы.СуммаВал) КАК СуммаВал,
	|	&СчетУчетаАвансовПокупателя КАК СчетУчета,
	|	ВременнаяТаблицаЗапасы.ВалютаДокумента КАК Валюта,
	|	&ВозникновениеАвансаПокупателя КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|ГДЕ
	|	&ПолноеПроведение
	|	И ВременнаяТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаЗапасы.ВалютаДокумента,
	|	ВременнаяТаблицаЗапасы.Дата
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВременнаяТаблицаЗапасы.Сумма) <> 0
	|		ИЛИ СУММА(ВременнаяТаблицаЗапасы.СуммаВал) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Организация,
	|	&КонтрагентДляПредоплаты,
	|	&ДоговорПоУмолчанию,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс),
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал,
	|	&СчетУчетаАвансовПокупателя,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.ВалютаДокумента,
	|	&ЗачетАванса
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
	|ГДЕ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
	|	И &ПолноеПроведение";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПокупателями", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаРасчетыСПокупателями()

#КонецОбласти

#Область Бонусы

// Формирует таблицу значение, содержащую данные для проведения по регистру.
// Таблицу значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаБонусныеБаллы(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст = РаботаСБонусами.СформироватьТекстЗапросаПоБонуснымБаллам();
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ТаблицаБонусныеБаллы = РезультатЗапроса[0].Выгрузить();
		ТаблицаОплатаБонусами = РезультатЗапроса[1].Выгрузить();
		РаботаСБонусами.ВыделитьВозвратыИзТаблицыБонусов(ТаблицаБонусныеБаллы, ТаблицаОплатаБонусами);
		
		Если ТаблицаОплатаБонусами.Количество() > 0 Тогда
			
			РаботаСБонусами.ОбъединитьТаблицыБонусов(
				ТаблицаБонусныеБаллы,
				ТаблицаОплатаБонусами,
				ДокументСсылкаОтчетОРозничныхПродажах);
			
		КонецЕсли;
		
	Иначе
		
		ТаблицаБонусныеБаллы = Новый ТаблицаЗначений;
		
	КонецЕсли;
		
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаБонусныеБаллы", ТаблицаБонусныеБаллы);
	
КонецПроцедуры

Процедура СформироватьТаблицаНачисленияБонусныхБаллов(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст = РаботаСБонусами.СформироватьТекстЗапросаПоНачислениямБонусныхБаллов();
		ТаблицаНачисленияБонусныхБаллов = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		ТаблицаНачисленияБонусныхБаллов = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНачисленияБонусныхБаллов", ТаблицаНачисленияБонусныхБаллов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
