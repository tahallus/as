#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимПросмотра = Не ПравоДоступа("Редактирование", Метаданные.Документы.ОтчетОРозничныхПродажах);
	
	//УНФ.ОтборыСписка
	УстановитьВидимостьОтборов();
	РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект);
	РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, ОтчетыОРозничныхПродажах);
	// Так как в отборе есть Касса- обязательное к заполнению поле, отборы всегда показываем
	РаботаСОтборами.СвернутьРазвернутьОтборыНаСервере(ЭтотОбъект, Истина);
	//Конец УНФ.ОтборыСписка
	
	// КассаККМ по умолчанию
	// Определим, сохранялись ли настройки ранее.
	ПользовательСсылка = Пользователи.АвторизованныйПользователь();
	Если Не ЗначениеЗаполнено(ПользовательСсылка) Тогда
		ПользовательСсылка = Справочники.Пользователи.ПустаяСсылка();
		ПользовательИнформационнойБазы = "";
	Иначе
		ПользовательИнформационнойБазы = Обработки.НастройкиПользователей.ИмяПользователяИБ(ПользовательСсылка);
	КонецЕсли;
	
	Если Параметры.Свойство("КассаККМ") И ЗначениеЗаполнено(Параметры.КассаККМ) Тогда
		ОтборКассаККМ = Параметры.КассаККМ;
		КассаККМИзПараметров = Параметры.КассаККМ;
		КассаОтборПриИзмененииНаСервере();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтборКассаККМ) Тогда
		Отбор = Новый Структура("Пользователь, КлючОбъекта", ПользовательИнформационнойБазы, "Документ.ОтчетОРозничныхПродажах.Форма.ФормаСписка/КлючТекущихНастроекДанных");
		ВыборкаНастроек = ХранилищеСистемныхНастроек.Выбрать(Отбор);
		Если НЕ ВыборкаНастроек.Следующий() Тогда
			// Если не сохранялись, то установим отбор по основной кассе. Иначе отработает обработчик "ПриЗагрузкеДанныхИзНастроекНаСервере".
			ОтборКассаККМ = Справочники.КассыККМ.ПолучитьКассуККМПоУмолчанию();
			КассаОтборПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли; 
	// Конец КассаККМ по умолчанию
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	ДинамическиеСпискиУНФ.ОтображатьТолькоВремяДляТекущейДаты(ОтчетыОРозничныхПродажах);
	
	// Мобильный клиент
	НастроитьФормуМобильныйКлиент();
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗагрузкеДанныхИзНастроекНаСервере" формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если КассаККМИзПараметров.Пустая() Тогда
		НастройкаКассаККМ = Настройки.Получить("ОтборКассаККМ");
		Если ОтборКассаККМ <> НастройкаКассаККМ Тогда
			ОтборКассаККМ = НастройкаКассаККМ;
			КассаФискальныйРегистратор = Справочники.КассыККМ.ПолучитьРеквизитыКассыККМ(ОтборКассаККМ).ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
			УстановитьОтборДинамическихСписков();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		//УНФ.ОтборыСписка
		СохранитьНастройкиОтборов();
		//Конец УНФ.ОтборыСписка
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтчетыОРозничныхПродажах

&НаКлиенте
Процедура ОтчетыОРозничныхПродажахПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура УстановитьДоступностьКнопокСозданияНовыхДокументов()
	
	Если РежимПросмотра Тогда
		Возврат;
	КонецЕсли;
	
	КассаККМЗаполнена = ЗначениеЗаполнено(ОтборКассаККМ);
	
	Элементы.ОтчетыОРозничныхПродажахСоздать.Доступность                    = НЕ КассаФискальныйРегистратор И КассаККМЗаполнена;
	Элементы.ОтчетыОРозничныхПродажахСкопировать.Доступность                = НЕ КассаФискальныйРегистратор И КассаККМЗаполнена;
	Элементы.КонтекстноеМенюОтчетыОРозничныхПродажахСоздать.Доступность     = НЕ КассаФискальныйРегистратор И КассаККМЗаполнена;
	Элементы.КонтекстноеМенюОтчетыОРозничныхПродажахСкопировать.Доступность = НЕ КассаФискальныйРегистратор И КассаККМЗаполнена;
	
КонецПроцедуры // УстановитьДоступностьКнопокСозданияНовыхДокументов()

// Процедура устанавливает отбор динамических списков формы.
//
&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОтчетыОРозничныхПродажах, "КассаККМ",
		ОтборКассаККМ, , , ЗначениеЗаполнено(ОтборКассаККМ));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОтчетыОРозничныхПродажах,
		"СтатусКассовойСмены", ОтборСтатусКассовойСмены, , , ЗначениеЗаполнено(ОтборСтатусКассовойСмены));
	
	// Мобильный клиент
	РаботаСОтборами.УстановитьЗаголовокПравойПанелиМобильныйКлиент(ЭтотОбъект, , , "ОтборСтатусКассовойСмены");
	
КонецПроцедуры // УстановитьОтборДинамическихСписков()

// Процедура - обработчик события "ПриИзменении" поля "КассаККМ".
//
&НаСервере
Процедура КассаОтборПриИзмененииНаСервере()
	
	УстановитьОтборДинамическихСписков();
	КассаФискальныйРегистратор = Справочники.КассыККМ.ПолучитьРеквизитыКассыККМ(ОтборКассаККМ).ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
	
КонецПроцедуры // КассаОтборПриИзмененииНаСервере()

// Процедура - обработчик события "ПриИзменении" поля "КассаККМ" на сервере.
//
&НаКлиенте
Процедура КассаОтборПриИзменении(Элемент)
	
	КассаОтборПриИзмененииНаСервере();
	УстановитьДоступностьКнопокСозданияНовыхДокументов();
	
КонецПроцедуры // КассаОтборПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "КассаККМ" на сервере.
//
&НаКлиенте
Процедура КассаОтбор_МК_ПриИзменении(Элемент)
	
	КассаОтборПриИзмененииНаСервере();
	УстановитьДоступностьКнопокСозданияНовыхДокументов();
	
КонецПроцедуры // КассаОтборПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "КассаККМ" на сервере.
//
&НаКлиенте
Процедура СтатусКассовойСменыОтборПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры // СтатусКассовойСменыОтборПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия  = "ОбновитьФормыПослеСнятияZОтчета" Тогда
		Элементы.Список.Обновить();
	ИначеЕсли ИмяСобытия = "ОбновитьФормыПослеЗакрытияКассовойСмены" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;

КонецПроцедуры // ОбработкаОповещения()

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(КассаККМИзПараметров) Тогда
		ОтборКассаККМ = КассаККМИзПараметров;
	КонецЕсли;
	
	УстановитьДоступностьКнопокСозданияНовыхДокументов();
КонецПроцедуры // ПриОткрытии()

// Выбор значения отбора в поле отбора
&НаКлиенте
Процедура ОтборСкладОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СтруктурнаяЕдиница", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Ответственный", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Организация", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьФормуМобильныйКлиент()

	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	//Элементы.ОбработкаМенеджерПодсказокТиповыеСхемыУчета_Розница.Видимость = Ложь;
	РаботаСОтборами.УстановитьЗаголовокПравойПанелиМобильныйКлиент(ЭтотОбъект,,, "ОтборСтатусКассовойСмены");
	Элементы.КассаОтбор_МК.Видимость = Истина;
	Элементы.КассаОтбор.Видимость = Ложь;
	
КонецПроцедуры

#Область Отборы

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ОтчетыОРозничныхПродажах, ИмяПоляОтбораСписка);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_") + 1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, ОтчетыОРозничныхПродажах, МеткаИД);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "ОтчетыОРозничныхПродажах", "Дата");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ИмяРеквизитаСписка = "ОтчетыОРозничныхПродажах";
	ИмяТЧДанныеМеток = "ДанныеМеток";
	ИмяТЧДанныеОтборов = "ДанныеОтборов";
	ИмяГруппыОтборов = "ГруппаОтборы";
	ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчанию";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаСписка", ИмяРеквизитаСписка);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеМеток", ИмяТЧДанныеМеток);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеОтборов", ИмяТЧДанныеОтборов);
	ДополнительныеПараметры.Вставить("ИмяГруппыОтборов", ИмяГруппыОтборов);
	ДополнительныеПараметры.Вставить("ИмяПредопределенныеОтборыПоУмолчанию", ИмяПредопределенныеОтборыПоУмолчанию);
	
	РаботаСОтборамиКлиент.НастроитьОтборыНажатие(ЭтотОбъект, ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры), ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры)
	
	Возврат РаботаСОтборами.ПараметрыДляОткрытияФормыСНастройкамиОтборов(ЭтотОбъект, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура НастройкаОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтборовЗавершениеНаСервере(Результат.АдресВыбранныеОтборы, Результат.АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовЗавершениеНаСервере(АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ИмяРеквизитаСписка = "ОтчетыОРозничныхПродажах";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
	Иначе
		ИмяРеквизитаСписка = ДополнительныеПараметры.ИмяРеквизитаСписка;
		ИмяТЧДанныеМеток = ДополнительныеПараметры.ИмяТЧДанныеМеток;
		ИмяТЧДанныеОтборов = ДополнительныеПараметры.ИмяТЧДанныеОтборов;
	КонецЕсли;
	
	РаботаСОтборами.НастройкаОтборовЗавершение(ЭтотОбъект, АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборПриИзменении(Элемент)
	
	Подключаемый_ОтборПриИзмененииНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборПриИзмененииНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборПриИзменении(ЭтотОбъект, ЭлементИмя, ЭлементРодительИмя, "ОтчетыОРозничныхПродажах");
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборОчистка(Элемент)
	
	Подключаемый_ОтборОчисткаНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборОчисткаНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборОчистка(ЭтотОбъект, ЭлементИмя, "ОтчетыОРозничныхПродажах");

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтборов()
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
		Элементы.ОтборСклад.Видимость = Ложь;
		Элементы.ГруппаОтборСклад.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗамерыПроизводительности

&НаКлиенте
Процедура ОтчетыОРозничныхПродажахПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормы"
		+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыОРозничныхПродажахПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормы"
		+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
