
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтображениеПериодаРегистрации = Формат(Объект.ПериодРегистрации, "ДФ='MMMM yyyy'");
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Если Объект.СпособВводаДанных = ПредопределенноеЗначение("Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод") Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОтработанноеВремяЗаПериод;
	Иначе	
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОтработанноеВремяПоДням;
	КонецЕсли;
	
	Если Объект.СпособВводаДанных <> ПредопределенноеЗначение("Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод") Тогда
		
		СоответствиеДнейНедели = Новый Соответствие;
		СоответствиеДнейНедели.Вставить(1, "Пн");
		СоответствиеДнейНедели.Вставить(2, "Вт");
		СоответствиеДнейНедели.Вставить(3, "Ср");
		СоответствиеДнейНедели.Вставить(4, "Чт");
		СоответствиеДнейНедели.Вставить(5, "Пт");
		СоответствиеДнейНедели.Вставить(6, "Сб");
		СоответствиеДнейНедели.Вставить(7, "Вс"); 
		
		Для День = 1 По День(КонецМесяца(Объект.ПериодРегистрации)) Цикл
			Элементы["ОтработанноеВремяПоДнямПервыйЧасы" + День].Заголовок = СоответствиеДнейНедели.Получить(ДеньНедели(Дата(Год(Объект.ПериодРегистрации), Месяц(Объект.ПериодРегистрации), День)));
		КонецЦикла;
		
		Для День = 28 По День(КонецМесяца(Объект.ПериодРегистрации)) Цикл
			Элементы["ОтработанноеВремяПоДнямПервыйЧасы" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямВторойЧасы" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямТретийЧасы" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямПервыйВидВремени" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямВторойВидВремени" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямТретийВидВремени" + День].Видимость = Истина;
		КонецЦикла;
		
		Для День = День(КонецМесяца(Объект.ПериодРегистрации)) + 1 По 31 Цикл
			Элементы["ОтработанноеВремяПоДнямПервыйЧасы" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямВторойЧасы" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямТретийЧасы" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямПервыйВидВремени" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямВторойВидВремени" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямТретийВидВремени" + День].Видимость = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Константы.ФункциональнаяОпцияИспользоватьСовместительство.Получить() Тогда
		Если Элементы.Найти("ОтработанноеВремяЗаПериодСотрудникКод") <> Неопределено Тогда
			Элементы.ОтработанноеВремяЗаПериодСотрудникКод.Видимость = Ложь;
		КонецЕсли;
		Если Элементы.Найти("ОтработанноеВремяПоДнямСотрудникКод") <> Неопределено Тогда
			Элементы.ОтработанноеВремяПоДнямСотрудникКод.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И СтрНайти(ИсточникВыбора.ИмяФормы, "ФормаКалендаря") > 0 Тогда
		
		Объект.ПериодРегистрации = КонецДня(ВыбранноеЗначение);
		УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
		УстановитьДниНедели();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	СтруктураДанных = ПолучитьДанныеСтруктурнойЕдиницыПриИзменении(Объект.СтруктурнаяЕдиница);
	Объект.ПодписьОтветственного = СтруктураДанных.ПодписьОтветственного;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		ДатаКалендаряПриОткрытии = Объект.ПериодРегистрации;
	Иначе
		ДатаКалендаряПриОткрытии = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", ОбщегоНазначенияУНФКлиент.ПараметрыОткрытияФормыКалендаря(
		ДатаКалендаряПриОткрытии), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УправлениеНебольшойФирмойКлиент.ПриРегулированииПериодаРегистрации(ЭтотОбъект, Направление);
	УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
	УстановитьДниНедели();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособВводаДанныхПриИзменении(Элемент)
	
	Если Объект.СпособВводаДанных = ПредопределенноеЗначение("Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод") Тогда	
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОтработанноеВремяЗаПериод;
	Иначе	
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОтработанноеВремяПоДням;
	КонецЕсли;
	
	Если Объект.СпособВводаДанных = ПредопределенноеЗначение("Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод") Тогда
		Объект.ОтработанноеВремяПоДням.Очистить();
	Иначе
		Объект.ОтработанноеВремяЗаПериод.Очистить();
	КонецЕсли;
	
КонецПроцедуры

// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// В процедуре осуществляется очистка номера документа.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
	Объект.ПодписьРуководителя = СтруктураДанные.ПодписьРуководителя;
	Объект.ПодписьГлавногоБухгалтера = СтруктураДанные.ПодписьГлавногоБухгалтера;
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяЗаПериодСотрудникПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущиеДанные = Элементы.ОтработанноеВремяЗаПериод.ТекущиеДанные;
	
	Структура = Новый Структура;
	Структура.Вставить("Дата", КонецМесяца(Объект.ПериодРегистрации));
	Структура.Вставить("Организация", Объект.Организация);
	Структура.Вставить("Сотрудник", ТекущиеДанные.Сотрудник);
	ТекущиеДанные.Должность = ЗаполнитьДолжность(Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяПоДнямСотрудникПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущиеДанные = Элементы.ОтработанноеВремяПоДням.ТекущиеДанные;
	
	Структура = Новый Структура;
	Структура.Вставить("Дата", КонецМесяца(Объект.ПериодРегистрации));
	Структура.Вставить("Организация", Объект.Организация);
	Структура.Вставить("Сотрудник", ТекущиеДанные.Сотрудник);
	ТекущиеДанные.Должность = ЗаполнитьДолжность(Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяЗаПериодВидВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ОтработанноеВремяЗаПериод.ТекущиеДанные;
	НомерЭлемента = Прав(Элемент.Имя, 1);
	
	МассивОграничений = Новый Массив;
	Для Счетчик = 1 По 6 Цикл
		Если Счетчик = НомерЭлемента Тогда
			Продолжить;
		КонецЕсли; 
		МассивОграничений.Добавить(ТекущаяСтрока["ВидВремени" + Счетчик]);	
	КонецЦикла; 
	
	ДанныеВыбора = ПолучитьСписокВыбора(МассивОграничений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяПоДнямПервыйВидВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ОтработанноеВремяПоДням.ТекущиеДанные;
	НомерЭлемента = СтрЗаменить(Элемент.Имя, "ОтработанноеВремяПоДнямПервыйВидВремени", "");
	
	МассивОграничений = Новый Массив;
	МассивОграничений.Добавить(ТекущаяСтрока["ВторойВидВремени" + НомерЭлемента]);
	МассивОграничений.Добавить(ТекущаяСтрока["ТретийВидВремени" + НомерЭлемента]);
	
	ДанныеВыбора = ПолучитьСписокВыбора(МассивОграничений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяПоДнямВторойВидВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ОтработанноеВремяПоДням.ТекущиеДанные;
	НомерЭлемента = СтрЗаменить(Элемент.Имя, "ОтработанноеВремяПоДнямВторойВидВремени", "");
	
	МассивОграничений = Новый Массив;
	МассивОграничений.Добавить(ТекущаяСтрока["ПервыйВидВремени" + НомерЭлемента]);
	МассивОграничений.Добавить(ТекущаяСтрока["ТретийВидВремени" + НомерЭлемента]);
	
	ДанныеВыбора = ПолучитьСписокВыбора(МассивОграничений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяПоДнямТретийВидВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ОтработанноеВремяПоДням.ТекущиеДанные;
	НомерЭлемента = СтрЗаменить(Элемент.Имя, "ОтработанноеВремяПоДнямТретийВидВремени", "");
	
	МассивОграничений = Новый Массив;
	МассивОграничений.Добавить(ТекущаяСтрока["ВторойВидВремени" + НомерЭлемента]);
	МассивОграничений.Добавить(ТекущаяСтрока["ПервыйВидВремени" + НомерЭлемента]);
	
	ДанныеВыбора = ПолучитьСписокВыбора(МассивОграничений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяПоДнямВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

#Если МобильныйКлиент Тогда

	СтандартнаяОбработка = Ложь;
	ФормаРасшифровкиПоДнямМобильногоКлиента(ВыбраннаяСтрока);

#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяПоДнямПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

#Если МобильныйКлиент Тогда
	Отказ = Истина;
	НоваяСтрока = Объект.ОтработанноеВремяПоДням.Добавить();
	Элементы.ОтработанноеВремяПоДням.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	ФормаРасшифровкиПоДнямМобильногоКлиента(Элементы.ОтработанноеВремяПоДням.ТекущаяСтрока);

#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяЗаПериодВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

#Если МобильныйКлиент Тогда

	СтандартнаяОбработка = Ложь;
	ФормаРасшифровкиЗаПериодМобильногоКлиента(ВыбраннаяСтрока);

#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяЗаПериодПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

#Если МобильныйКлиент Тогда

	Отказ = Истина;
	НоваяСтрока = Объект.ОтработанноеВремяЗаПериод.Добавить();
	Элементы.ОтработанноеВремяЗаПериод.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	ФормаРасшифровкиЗаПериодМобильногоКлиента(Элементы.ОтработанноеВремяЗаПериод.ТекущаяСтрока);

#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДекорацияПечатьНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиТабель", Новый Структура("КонтекстПечати", Объект),
		ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ВилЗаполненияТабеля = "ПоПроизводственномуКалендарю";
	ЗаполнитьТабельКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГрафикуРаботы(Команда)
	ВилЗаполненияТабеля = "ПоГрафику";
	ЗаполнитьТабельКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыделенныеПоГрафикуРаботы(Команда)
	ВилЗаполненияТабеля = "ПоГрафику";
	ЗаполнитьТабельКлиент(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыделенныеСтроки(Команда)
	ВилЗаполненияТабеля = "ПоПроизводственномуКалендарю";
	ЗаполнитьТабельКлиент(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабельКлиент(ОбновитьСтроки = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указано подразделение'"), ,
			"Объект.СтруктурнаяЕдиница");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан период регистрации'"), ,
			"Объект.ПериодРегистрации");
		Возврат;
	КонецЕсли;
	
	Если ОбновитьСтроки Тогда
		ЗаполнитьТабель(ОбновитьСтроки);
		Возврат
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Если Объект.ОтработанноеВремяПоДням.Количество() > 0 Или Объект.ОтработанноеВремяЗаПериод.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), НСтр(
			"ru = 'Табличная часть будет очищена. Продолжить?'"), Режим, 0);
	Иначе
		ЗаполнитьТабель();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТабель();
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // Заполнить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ФормаРасшифровкиПоДнямМобильногоКлиента(ВыбраннаяСтрока)
	
	ЗначенияРеквизитовСтроки = Новый Структура;
	
	ИменаРеквизитов = Новый Массив(6);
	ИменаРеквизитов[0] = "ПервыйВидВремени";
	ИменаРеквизитов[1] = "ВторойВидВремени";
	ИменаРеквизитов[2] = "ТретийВидВремени";
	ИменаРеквизитов[3] = "ПервыйЧасы";
	ИменаРеквизитов[4] = "ВторойЧасы";
	ИменаРеквизитов[5] = "ТретийЧасы";
	
	ДанныеСтроки = Объект.ОтработанноеВремяПоДням.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ДанныеСтроки <> Неопределено Тогда
		
		ЗначенияРеквизитовСтроки.Вставить("Сотрудник", ДанныеСтроки.Сотрудник);
		ЗначенияРеквизитовСтроки.Вставить("Должность", ДанныеСтроки.Должность);
		ЗначенияРеквизитовСтроки.Вставить("СтрокаТаблицы", ВыбраннаяСтрока);
		
		Для Итератор = 1 По 31 Цикл
			
			Для каждого ИмяРеквизита Из ИменаРеквизитов Цикл
				
				Ключ = ИмяРеквизита + Строка(Итератор);
				ЗначенияРеквизитовСтроки.Вставить(Ключ, ДанныеСтроки[Ключ]);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияРеквизитовСтроки", ЗначенияРеквизитовСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеРедактированияСтроки", ЭтотОбъект);
	ОткрытьФорму("Документ.Табель.Форма.ФормаРасшифровкаСтроки_МК", ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаРасшифровкиЗаПериодМобильногоКлиента(ВыбраннаяСтрока)
	
	ЗначенияРеквизитовСтроки = Новый Структура;
	
	ИменаРеквизитов = Новый Массив(3);
	ИменаРеквизитов[0] = "ВидВремени";
	ИменаРеквизитов[1] = "Дней";
	ИменаРеквизитов[2] = "Часов";
	
	ДанныеСтроки = Объект.ОтработанноеВремяЗаПериод.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ДанныеСтроки <> Неопределено Тогда
		
		ЗначенияРеквизитовСтроки.Вставить("Сотрудник", ДанныеСтроки.Сотрудник);
		ЗначенияРеквизитовСтроки.Вставить("Должность", ДанныеСтроки.Должность);
		ЗначенияРеквизитовСтроки.Вставить("СтрокаТаблицы", ВыбраннаяСтрока);
		
		Для Итератор = 1 По 6 Цикл
			
			Для каждого ИмяРеквизита Из ИменаРеквизитов Цикл
				
				Ключ = ИмяРеквизита + Строка(Итератор);
				ЗначенияРеквизитовСтроки.Вставить(Ключ, ДанныеСтроки[Ключ]);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияРеквизитовСтроки", ЗначенияРеквизитовСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеРедактированияСтроки", ЭтотОбъект);
	ОткрытьФорму("Документ.Табель.Форма.ФормаРасшифровкаСтрокиПериод_МК", ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияСтроки(Результат, ДополнительныеРеквизиты) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("СтрокаТаблицы") Тогда
		
		ИмяТаблицы = ?(Объект.СпособВводаДанных = ПредопределенноеЗначение("Перечисление.СпособыВводаДанныхОВремени.ПоДням"),
			"ОтработанноеВремяПоДням",
			"ОтработанноеВремяЗаПериод");
		
		ДанныеСтроки = Объект[ИмяТаблицы].НайтиПоИдентификатору(Результат.СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтруктурнойЕдиницыПриИзменении(СтруктурнаяЕдиница)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ПодписьОтветственного", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ПодписьМОЛ"));
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", ДокументыУНФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", Константы.УчетПоКомпании.Компания(Организация));
	СтруктураДанные.Вставить("ПодписьРуководителя", Организация.ПодписьРуководителя);
	СтруктураДанные.Вставить("ПодписьГлавногоБухгалтера", Организация.ПодписьГлавногоБухгалтера);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Процедура - устанавливает дни недели в шапке таблицы.
//
&НаКлиенте
Процедура УстановитьДниНедели()
	
	Если Объект.СпособВводаДанных <> ПредопределенноеЗначение("Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод") Тогда
		
		СоответствиеДнейНедели = Новый Соответствие;
		СоответствиеДнейНедели.Вставить(1, "Пн");
		СоответствиеДнейНедели.Вставить(2, "Вт");
		СоответствиеДнейНедели.Вставить(3, "Ср");
		СоответствиеДнейНедели.Вставить(4, "Чт");
		СоответствиеДнейНедели.Вставить(5, "Пт");
		СоответствиеДнейНедели.Вставить(6, "Сб");
		СоответствиеДнейНедели.Вставить(7, "Вс"); 
		
		Для День = 1 По День(КонецМесяца(Объект.ПериодРегистрации)) Цикл
			Элементы["ОтработанноеВремяПоДнямПервыйЧасы" + День].Заголовок = СоответствиеДнейНедели.Получить(ДеньНедели(Дата(Год(Объект.ПериодРегистрации), Месяц(Объект.ПериодРегистрации), День)));
		КонецЦикла;
		
		Для День = 29 По День(КонецМесяца(Объект.ПериодРегистрации)) Цикл
			Элементы["ОтработанноеВремяПоДнямПервыйЧасы" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямВторойЧасы" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямТретийЧасы" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямПервыйВидВремени" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямВторойВидВремени" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямТретийВидВремени" + День].Видимость = Истина;
		КонецЦикла;
		
		Для День = День(КонецМесяца(Объект.ПериодРегистрации)) + 1 По 31 Цикл
			
			Элементы["ОтработанноеВремяПоДнямПервыйЧасы" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямВторойЧасы" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямТретийЧасы" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямПервыйВидВремени" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямВторойВидВремени" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямТретийВидВремени" + День].Видимость = Ложь;
			
			Для каждого СтрокаТаблицы Из Объект.ОтработанноеВремяПоДням Цикл
				
				СтрокаТаблицы["ПервыйЧасы" + День] = Неопределено;
				СтрокаТаблицы["ВторойЧасы" + День] = Неопределено;
				СтрокаТаблицы["ТретийЧасы" + День] = Неопределено;
				
				СтрокаТаблицы["ПервыйВидВремени" + День] = Неопределено;
				СтрокаТаблицы["ВторойВидВремени" + День] = Неопределено;
				СтрокаТаблицы["ТретийВидВремени" + День] = Неопределено;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - возвращает должность сотрудника.
//
&НаСервереБезКонтекста
Функция ЗаполнитьДолжность(Структура)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СотрудникиСрезПоследних.Должность
	|ИЗ
	|	РегистрСведений.Сотрудники.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник) КАК СотрудникиСрезПоследних");
	
	Запрос.УстановитьПараметр("Дата", Структура.Дата);
	Запрос.УстановитьПараметр("Организация", Структура.Организация);
	Запрос.УстановитьПараметр("Сотрудник", Структура.Сотрудник);
	Результат = Запрос.Выполнить();
	
	Возврат ?(Результат.Пустой(), 
	Справочники.Должности.ПустаяСсылка(), 
	Результат.Выгрузить()[0].Должность);
	
КонецФункции // ЗаполнитьДолжность()

&НаСервере
Процедура ЗаполнитьДанныеПоЧасам(РезультатЗапроса, ОбновитьСтроки = Ложь)
	
	ВидВремени = Справочники.ВидыРабочегоВремени.Работа;
	
	ВыборкаРабочихДней = РезультатЗапроса[0].Выбрать();
	ДеталиСотрудников = РезультатЗапроса[11].Выгрузить();
	
	НайденныеСтроки = Элементы.ОтработанноеВремяПоДням.ВыделенныеСтроки;
	
	Для каждого СтрокаТаблицы Из ДеталиСотрудников Цикл
		
		Если ОбновитьСтроки Тогда
			
			Для Каждого НомерСтроки Из НайденныеСтроки Цикл
				
				НайденнаяСтрока = Объект.ОтработанноеВремяПоДням.НайтиПоИдентификатору(НомерСтроки);
				
				Если НайденнаяСтрока = Неопределено Тогда Продолжить КонецЕсли;
				
				Если Не СтрокаТаблицы.Сотрудник  = НайденнаяСтрока.Сотрудник Тогда
					Продолжить
				КонецЕсли;
				
				ОчиститьПомеченнуюСтроку(НайденнаяСтрока, СтрокаТаблицы.Период, СтрокаТаблицы.ПериодДо);
				
				ПериодНачало = СтрокаТаблицы.Период;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодДо) Тогда
					ПериодаОкончание = СтрокаТаблицы.ПериодДо - (24*60*60);
				ИначеЕсли СтрокаТаблицы.ЭтоУвольнение Тогда
					ПериодаОкончание = СтрокаТаблицы.Период;
				Иначе
					ПериодаОкончание = КонецМесяца(Объект.ПериодРегистрации);
				КонецЕсли;
				
				Если Объект.ПериодРегистрации > ПериодаОкончание Тогда
					Продолжить;
				КонецЕсли;
				
				ВыборкаРабочихДней.Сбросить();
				
				Пока ВыборкаРабочихДней.Следующий() Цикл
					
					Если ВыборкаРабочихДней.ДатаГрафика > ПериодаОкончание Тогда
						Прервать;
					КонецЕсли;
					
					Если ВыборкаРабочихДней.ДатаГрафика >= ПериодНачало
						И ВыборкаРабочихДней.ДатаГрафика <= ПериодаОкончание Тогда
						
						День = День(ВыборкаРабочихДней.ДатаГрафика);
						
						НайденнаяСтрока["ПервыйВидВремени" + День]	= ВидВремени;
						НайденнаяСтрока["ПервыйЧасы" + День] 		= 8 * СтрокаТаблицы.ЗанимаемыхСтавок;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		ДобавитьСтроку = Истина;
		ПериодНачало = СтрокаТаблицы.Период;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодДо) Тогда
			ПериодаОкончание = СтрокаТаблицы.ПериодДо - (24*60*60);
		ИначеЕсли СтрокаТаблицы.ЭтоУвольнение Тогда
			ДобавитьСтроку = Ложь;
			ПериодаОкончание = СтрокаТаблицы.Период;
		Иначе
			ПериодаОкончание = КонецМесяца(Объект.ПериодРегистрации);
		КонецЕсли;
		
		Если Объект.ПериодРегистрации > ПериодаОкончание Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("Сотрудник", СтрокаТаблицы.Сотрудник);
		НайденныеСтроки = Объект.ОтработанноеВремяПоДням.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() И ДобавитьСтроку
			Тогда
			ДобавитьСтроку = Ложь;
			НоваяСтрока = НайденныеСтроки[0];
		КонецЕсли;
		
		Если ДобавитьСтроку Тогда
			НоваяСтрока 			= Объект.ОтработанноеВремяПоДням.Добавить();
			НоваяСтрока.Сотрудник 	= СтрокаТаблицы.Сотрудник;
			НоваяСтрока.Должность 	= СтрокаТаблицы.Должность;
		КонецЕсли;
		
		ВыборкаРабочихДней.Сбросить();
		
		Пока ВыборкаРабочихДней.Следующий() Цикл
			
			Если ВыборкаРабочихДней.ДатаГрафика > ПериодаОкончание Тогда
				Прервать;
			КонецЕсли;
			
			Если ВыборкаРабочихДней.ДатаГрафика >= ПериодНачало
				И ВыборкаРабочихДней.ДатаГрафика <= ПериодаОкончание Тогда
				
				День = День(ВыборкаРабочихДней.ДатаГрафика);
				
				НоваяСтрока["ПервыйВидВремени" + День]	= ВидВремени;
				НоваяСтрока["ПервыйЧасы" + День] 		= 8 * СтрокаТаблицы.ЗанимаемыхСтавок;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоДням(РезультатЗапроса, ОбновитьСтроки = Ложь)
	
	ВидВремени = Справочники.ВидыРабочегоВремени.Работа;
	
	ВыборкаРабочихДней = РезультатЗапроса[0].Выбрать();
	ДеталиСотрудников = РезультатЗапроса[11].Выгрузить();
	
	НайденныеСтроки = Элементы.ОтработанноеВремяЗаПериод.ВыделенныеСтроки;
	
	Для Каждого НомерСтроки Из НайденныеСтроки Цикл
		НайденнаяСтрока = Объект.ОтработанноеВремяЗаПериод.НайтиПоИдентификатору(НомерСтроки);
		
		Если НайденнаяСтрока = Неопределено Тогда Продолжить КонецЕсли;
		
		ОчиститьПомеченнуюСтрокуПериод(НайденнаяСтрока);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ДеталиСотрудников Цикл
		
		Если ОбновитьСтроки Тогда
			
			Для Каждого НомерСтроки Из НайденныеСтроки Цикл
				
				НайденнаяСтрока = Объект.ОтработанноеВремяЗаПериод.НайтиПоИдентификатору(НомерСтроки);
				
				Если Не СтрокаТаблицы.Сотрудник  = НайденнаяСтрока.Сотрудник Тогда
					Продолжить
				КонецЕсли;
				
				ПериодНачало = СтрокаТаблицы.Период;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодДо) Тогда
					ПериодаОкончание = СтрокаТаблицы.ПериодДо - (24*60*60);
				ИначеЕсли СтрокаТаблицы.ЭтоУвольнение Тогда
					ДобавитьСтроку = Ложь;
					ПериодаОкончание = СтрокаТаблицы.Период;
				Иначе
					ПериодаОкончание = КонецМесяца(Объект.ПериодРегистрации);
				КонецЕсли;
				
				Если Объект.ПериодРегистрации > ПериодаОкончание Тогда
					Продолжить;
				КонецЕсли;
				
				ВыборкаРабочихДней.Сбросить();
				
				НайденнаяСтрока.ВидВремени1 = ВидВремени;
				
				Пока ВыборкаРабочихДней.Следующий() Цикл
					
					Если ВыборкаРабочихДней.ДатаГрафика > ПериодаОкончание Тогда
						Прервать;
					КонецЕсли;
					
					Если ВыборкаРабочихДней.ДатаГрафика >= ПериодНачало
						И ВыборкаРабочихДней.ДатаГрафика <= ПериодаОкончание Тогда
						
						НайденнаяСтрока.Дней1 	= НайденнаяСтрока.Дней1 + 1;
						НайденнаяСтрока.Часов1 	= НайденнаяСтрока.Часов1 + (8 * СтрокаТаблицы.ЗанимаемыхСтавок);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		ДобавитьСтроку = Истина;
		ПериодНачало = СтрокаТаблицы.Период;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодДо) Тогда
			ПериодаОкончание = СтрокаТаблицы.ПериодДо - (24*60*60);
		ИначеЕсли СтрокаТаблицы.ЭтоУвольнение Тогда
			ДобавитьСтроку = Ложь;
			ПериодаОкончание = СтрокаТаблицы.Период;
		Иначе
			ПериодаОкончание = КонецМесяца(Объект.ПериодРегистрации);
		КонецЕсли;
		
		Если Объект.ПериодРегистрации > ПериодаОкончание Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("Сотрудник", СтрокаТаблицы.Сотрудник);
		НайденныеСтроки = Объект.ОтработанноеВремяЗаПериод.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() И ДобавитьСтроку
			Тогда
			ДобавитьСтроку = Ложь;
			НоваяСтрока = НайденныеСтроки[0];
		КонецЕсли;
		
		Если ДобавитьСтроку Тогда
			НоваяСтрока 			= Объект.ОтработанноеВремяЗаПериод.Добавить();
			НоваяСтрока.Сотрудник 	= СтрокаТаблицы.Сотрудник;
			НоваяСтрока.Должность 	= СтрокаТаблицы.Должность;
			НоваяСтрока.ВидВремени1 = ВидВремени;
		КонецЕсли;
		
		ВыборкаРабочихДней.Сбросить();
		
		Пока ВыборкаРабочихДней.Следующий() Цикл
			
			Если ВыборкаРабочихДней.ДатаГрафика > ПериодаОкончание Тогда
				Прервать;
			КонецЕсли;
			
			Если ВыборкаРабочихДней.ДатаГрафика >= ПериодНачало
				И ВыборкаРабочихДней.ДатаГрафика <= ПериодаОкончание Тогда
			
				НоваяСтрока.Дней1 	= НоваяСтрока.Дней1 + 1;
				НоваяСтрока.Часов1 	= НоваяСтрока.Часов1 + (8 * СтрокаТаблицы.ЗанимаемыхСтавок);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоЧасамГрафикиСотрудников(РезультатЗапроса, ОбновитьСтроки = Ложь)
	
	ВидВремени = Справочники.ВидыРабочегоВремени.Работа;
	
	ДеталиСотрудников = РезультатЗапроса[10].Выгрузить();
	
	МассивСотрудников = ДеталиСотрудников.ВыгрузитьКолонку("Сотрудник");
	ТаблицаОтклонений = ТаблицаОтклоненийОтГрафиков(МассивСотрудников);
	
	НайденныеСтроки = Элементы.ОтработанноеВремяПоДням.ВыделенныеСтроки;
	
	Для каждого СтрокаТаблицы Из ДеталиСотрудников Цикл
		
		Если ОбновитьСтроки Тогда
			
			Для Каждого НомерСтроки Из НайденныеСтроки Цикл
				
				НайденнаяСтрока = Объект.ОтработанноеВремяПоДням.НайтиПоИдентификатору(НомерСтроки);
				
				Если НайденнаяСтрока = Неопределено Тогда Продолжить КонецЕсли;
				
				Если Не СтрокаТаблицы.Сотрудник  = НайденнаяСтрока.Сотрудник Тогда
					Продолжить
				КонецЕсли;
					
				ОчиститьПомеченнуюСтроку(НайденнаяСтрока, СтрокаТаблицы.Период, СтрокаТаблицы.ПериодДо);
				
				ПериодНачало = СтрокаТаблицы.Период;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодДо) Тогда
					ПериодаОкончание = СтрокаТаблицы.ПериодДо - (24*60*60);
				ИначеЕсли СтрокаТаблицы.ЭтоУвольнение Тогда
					ПериодаОкончание = СтрокаТаблицы.Период;
				Иначе
					ПериодаОкончание = КонецМесяца(Объект.ПериодРегистрации);
				КонецЕсли;
				
				СписокДатСОтклонениями = Новый СписокЗначений;
				ЗаполнитьОтклоненияПоСтроке(НайденнаяСтрока, ТаблицаОтклонений, СтрокаТаблицы.ЗанимаемыхСтавок, СписокДатСОтклонениями, ПериодНачало, ПериодаОкончание);
				
				ВыборкаРабочихДней = ГрафикПоСотруднику(СтрокаТаблицы.Сотрудник, СтрокаТаблицы.Период, ПериодаОкончание);
				
				Пока ВыборкаРабочихДней.Следующий() Цикл
					
					Если ВыборкаРабочихДней.ДатаГрафика > ПериодаОкончание Тогда
						Прервать;
					КонецЕсли;
					
					Если ВыборкаРабочихДней.ДатаГрафика >= ПериодНачало
						И ВыборкаРабочихДней.ДатаГрафика <= ПериодаОкончание Тогда
						
						День = День(ВыборкаРабочихДней.ДатаГрафика);
						
						Если Не СписокДатСОтклонениями.НайтиПоЗначению(ВыборкаРабочихДней.ДатаГрафика) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						НайденнаяСтрока["ПервыйВидВремени" + День]	= ВидВремени;
						НайденнаяСтрока["ПервыйЧасы" + День] 		= ВыборкаРабочихДней.ЧасыРаботы*СтрокаТаблицы.ЗанимаемыхСтавок;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		ДобавитьСтроку = Истина;
		ПериодНачало = СтрокаТаблицы.Период;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодДо) Тогда
			
			ПериодаОкончание = СтрокаТаблицы.ПериодДо - (24*60*60);
			
		ИначеЕсли СтрокаТаблицы.ЭтоУвольнение Тогда
			ДобавитьСтроку = Ложь;
			ПериодаОкончание = СтрокаТаблицы.Период;
		Иначе
			ПериодаОкончание = КонецМесяца(Объект.ПериодРегистрации);
		КонецЕсли;
		
		Если Объект.ПериодРегистрации > ПериодаОкончание Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("Сотрудник", СтрокаТаблицы.Сотрудник);
		НайденныеСуществующиеСтроки = Объект.ОтработанноеВремяПоДням.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСуществующиеСтроки.Количество() И ДобавитьСтроку
			Тогда
			ДобавитьСтроку = Ложь;
			НоваяСтрока = НайденныеСуществующиеСтроки[0];
		КонецЕсли;
		
		Если ДобавитьСтроку Тогда
			НоваяСтрока 			= Объект.ОтработанноеВремяПоДням.Добавить();
			НоваяСтрока.Сотрудник 	= СтрокаТаблицы.Сотрудник;
			НоваяСтрока.Должность 	= СтрокаТаблицы.Должность;
		КонецЕсли;
		
		СписокДатСОтклонениями = Новый СписокЗначений;
		ЗаполнитьОтклоненияПоСтроке(НоваяСтрока, ТаблицаОтклонений, СтрокаТаблицы.ЗанимаемыхСтавок, СписокДатСОтклонениями, ПериодНачало, ПериодаОкончание);
		
		ВыборкаРабочихДней = ГрафикПоСотруднику(СтрокаТаблицы.Сотрудник, СтрокаТаблицы.Период, ПериодаОкончание);
		
		Пока ВыборкаРабочихДней.Следующий() Цикл
			
			Если ВыборкаРабочихДней.ДатаГрафика > ПериодаОкончание Тогда
				Прервать;
			КонецЕсли;
			
			Если ВыборкаРабочихДней.ДатаГрафика >= ПериодНачало
				И ВыборкаРабочихДней.ДатаГрафика <= ПериодаОкончание Тогда
				
				День = День(ВыборкаРабочихДней.ДатаГрафика);
				
				Если Не СписокДатСОтклонениями.НайтиПоЗначению(ВыборкаРабочихДней.ДатаГрафика) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока["ПервыйВидВремени" + День]	= ВидВремени;
				НоваяСтрока["ПервыйЧасы" + День] 		= ВыборкаРабочихДней.ЧасыРаботы*СтрокаТаблицы.ЗанимаемыхСтавок;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоДнямГрафикиСотрудников(РезультатЗапроса, ОбновитьСтроки = Ложь)
	
	ВидВремени = Справочники.ВидыРабочегоВремени.Работа;
	
	ДеталиСотрудников = РезультатЗапроса[10].Выгрузить();
	
	МассивСотрудников = ДеталиСотрудников.ВыгрузитьКолонку("Сотрудник");
	ТаблицаОтклонений = ТаблицаОтклоненийОтГрафиков(МассивСотрудников);
	
	НайденныеСтроки = Элементы.ОтработанноеВремяЗаПериод.ВыделенныеСтроки;
	
	Для Каждого НомерСтроки Из НайденныеСтроки Цикл
		НайденнаяСтрока = Объект.ОтработанноеВремяЗаПериод.НайтиПоИдентификатору(НомерСтроки);
		
		Если НайденнаяСтрока = Неопределено Тогда Продолжить КонецЕсли;
		
		ОчиститьПомеченнуюСтрокуПериод(НайденнаяСтрока);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ДеталиСотрудников Цикл
		
		Если ОбновитьСтроки Тогда
			
			Для Каждого НомерСтроки Из НайденныеСтроки Цикл
				
				НайденнаяСтрока = Объект.ОтработанноеВремяЗаПериод.НайтиПоИдентификатору(НомерСтроки);
				
				Если Не СтрокаТаблицы.Сотрудник  = НайденнаяСтрока.Сотрудник Тогда
					Продолжить
				КонецЕсли;
				
				ПериодНачало = СтрокаТаблицы.Период;
				Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодДо) Тогда
					ПериодаОкончание = СтрокаТаблицы.ПериодДо - (24*60*60);
				ИначеЕсли СтрокаТаблицы.ЭтоУвольнение Тогда
					ПериодаОкончание = СтрокаТаблицы.Период;
				Иначе
					ПериодаОкончание = КонецМесяца(Объект.ПериодРегистрации);
				КонецЕсли;
				
				СписокДатСОтклонениями = Новый СписокЗначений;
				ЗаполнитьОтклоненияПоСтрокеПериод(НайденнаяСтрока, ТаблицаОтклонений, СтрокаТаблицы.ЗанимаемыхСтавок, СписокДатСОтклонениями, ПериодНачало, ПериодаОкончание);
				
				Если Объект.ПериодРегистрации > ПериодаОкончание Тогда
					Продолжить;
				КонецЕсли;
				
				ВыборкаРабочихДней = ГрафикПоСотруднику(СтрокаТаблицы.Сотрудник, СтрокаТаблицы.Период, ПериодаОкончание);
				
				НайденнаяСтрока.ВидВремени1 = ВидВремени;
				
				Пока ВыборкаРабочихДней.Следующий() Цикл
					
					Если ВыборкаРабочихДней.ДатаГрафика > ПериодаОкончание Тогда
						Прервать;
					КонецЕсли;
					
					Если ВыборкаРабочихДней.ДатаГрафика >= ПериодНачало
						И ВыборкаРабочихДней.ДатаГрафика <= ПериодаОкончание Тогда
						
						Если Не СписокДатСОтклонениями.НайтиПоЗначению(ВыборкаРабочихДней.ДатаГрафика) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						НайденнаяСтрока.Дней1 	= НайденнаяСтрока.Дней1 + 1;
						НайденнаяСтрока.Часов1 	= НайденнаяСтрока.Часов1 + (ВыборкаРабочихДней.ЧасыРаботы * СтрокаТаблицы.ЗанимаемыхСтавок);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		ДобавитьСтроку = Истина;
		ПериодНачало = СтрокаТаблицы.Период;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодДо) Тогда
			ПериодаОкончание = СтрокаТаблицы.ПериодДо - (24*60*60);
		ИначеЕсли СтрокаТаблицы.ЭтоУвольнение Тогда
			ДобавитьСтроку = Ложь;
			ПериодаОкончание = СтрокаТаблицы.Период;
		Иначе
			ПериодаОкончание = КонецМесяца(Объект.ПериодРегистрации);
		КонецЕсли;
		
		Если Объект.ПериодРегистрации > ПериодаОкончание Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("Сотрудник", СтрокаТаблицы.Сотрудник);
		НайденныеСтроки = Объект.ОтработанноеВремяЗаПериод.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() И ДобавитьСтроку
			Тогда
			ДобавитьСтроку = Ложь;
			НоваяСтрока = НайденныеСтроки[0];
		КонецЕсли;
		
		Если ДобавитьСтроку Тогда
			НоваяСтрока 			= Объект.ОтработанноеВремяЗаПериод.Добавить();
			НоваяСтрока.Сотрудник 	= СтрокаТаблицы.Сотрудник;
			НоваяСтрока.Должность 	= СтрокаТаблицы.Должность;
			НоваяСтрока.ВидВремени1 = ВидВремени;
		КонецЕсли;
		
		ВыборкаРабочихДней = ГрафикПоСотруднику(СтрокаТаблицы.Сотрудник, СтрокаТаблицы.Период, ПериодаОкончание);
		
		СписокДатСОтклонениями = Новый СписокЗначений;
		ЗаполнитьОтклоненияПоСтрокеПериод(НоваяСтрока, ТаблицаОтклонений, СтрокаТаблицы.ЗанимаемыхСтавок, СписокДатСОтклонениями, ПериодНачало, ПериодаОкончание);
		
		Пока ВыборкаРабочихДней.Следующий() Цикл
			
			Если ВыборкаРабочихДней.ДатаГрафика > ПериодаОкончание Тогда
				Прервать;
			КонецЕсли;
			
			Если ВыборкаРабочихДней.ДатаГрафика >= ПериодНачало
				И ВыборкаРабочихДней.ДатаГрафика <= ПериодаОкончание Тогда
				
				Если Не СписокДатСОтклонениями.НайтиПоЗначению(ВыборкаРабочихДней.ДатаГрафика) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока.Дней1 	= НоваяСтрока.Дней1 + 1;
				НоваяСтрока.Часов1 	= НоваяСтрока.Часов1 + (ВыборкаРабочихДней.ЧасыРаботы * СтрокаТаблицы.ЗанимаемыхСтавок);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТаблицаОтклоненийОтГрафиков(МассивСотрудников)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ОтклоненияОтГрафиковРаботыРесурсов.ЧасыРаботы) КАК ДлительностьОтклонения,
	|	ОтклоненияОтГрафиковРаботыРесурсов.День КАК Дата,
	|	ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия КАК Сотрудник
	|ИЗ
	|	РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|ГДЕ
	|	ОтклоненияОтГрафиковРаботыРесурсов.День МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия В(&МассивСотрудников)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтклоненияОтГрафиковРаботыРесурсов.День,
	|	ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ГрафикПоСотруднику(Сотрудник, ДатаНачала, ПериодОкончания)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодОкончания);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ГрафикиРаботы.ЧасыРаботы) КАК ЧасыРаботы,
	|	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) КАК ДатаГрафика
	|ИЗ
	|	РегистрСведений.Сотрудники.СрезПоследних(&ДатаНачала, Сотрудник = &Сотрудник) КАК СотрудникиСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|		ПО СотрудникиСрезПоследних.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы
	|ГДЕ
	|	ГрафикиРаботы.ВремяНачала >= &ДатаНачала
	|	И ГрафикиРаботы.ВремяНачала <= &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаГрафика";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

&НаСервере
Процедура ОчиститьПомеченнуюСтроку(СтрокаТаблицы, НачалоПериода, ПериодОкончания)
	
	ПериодОкончание = ?(Не ЗначениеЗаполнено(ПериодОкончания), День(КонецМесяца(Объект.ПериодРегистрации)), День(ПериодОкончания));
	НачалоОтчета = ?(Не ЗначениеЗаполнено(НачалоПериода), 1, День(НачалоПериода));
	
	ВидВремени = Справочники.ВидыРабочегоВремени.ПустаяСсылка();
	
	Для ПериодНачало = НачалоОтчета По ПериодОкончание Цикл
		
		СтрокаТаблицы["ПервыйВидВремени" + ПериодНачало]	= ВидВремени;
		СтрокаТаблицы["ПервыйЧасы" + ПериодНачало] 		= 0;
		
		СтрокаТаблицы["ВторойВидВремени" + ПериодНачало]	= ВидВремени;
		СтрокаТаблицы["ВторойЧасы" + ПериодНачало] 		= 0;
		
		СтрокаТаблицы["ТретийВидВремени" + ПериодНачало]	= ВидВремени;
		СтрокаТаблицы["ТретийЧасы" + ПериодНачало] 		= 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтклоненияПоСтроке(СтрокаТаблицы, ТаблицаОтклонений, ЗанимаемыхСтавок, СписокДатСОтклонениями, ПериодНачала, ПериодОкончания)
	
	Если СтрокаТаблицы = Неопределено Тогда Возврат КонецЕсли;
	
	ПериодОкончаниеДень = ?(Не ЗначениеЗаполнено(ПериодОкончания), День(КонецМесяца(Объект.ПериодРегистрации)), День(ПериодОкончания));
	ПериодНачалаДень = ?(Не ЗначениеЗаполнено(ПериодНачала), 1, День(ПериодНачала));
	
	ВидВремени = Справочники.ВидыРабочегоВремени.Работа;
	ВидВремениПустой = Справочники.ВидыРабочегоВремени.ПустаяСсылка();
	
	ПериодРегистрации = Объект.ПериодРегистрации;
	
	Для ПериодНачало = ПериодНачалаДень По ПериодОкончаниеДень Цикл
		
		ДатаДня = Дата(Год(ПериодРегистрации), Месяц(ПериодРегистрации), ПериодНачало);
		
		ПараметрыОтбораОтклонений = Новый Структура("Сотрудник, Дата",СтрокаТаблицы.Сотрудник, ДатаДня);
		НайденныеОтклонения = ТаблицаОтклонений.НайтиСтроки(ПараметрыОтбораОтклонений);
		
		Если Не НайденныеОтклонения.Количество() Тогда
			Продолжить
		КонецЕсли;
		
		СтрокаТаблицы["ПервыйЧасы" + ПериодНачало] 			= НайденныеОтклонения[0].ДлительностьОтклонения *ЗанимаемыхСтавок;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы["ПервыйЧасы" + ПериодНачало])
			Тогда 
			СтрокаТаблицы["ПервыйВидВремени" + ПериодНачало]	= ВидВремениПустой;
		Иначе
			СтрокаТаблицы["ПервыйВидВремени" + ПериодНачало]	= ВидВремени;
		КонецЕсли;
			
		
		СписокДатСОтклонениями.Добавить(ДатаДня);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтклоненияПоСтрокеПериод(СтрокаТаблицы, ТаблицаОтклонений, ЗанимаемыхСтавок, СписокДатСОтклонениями, ПериодНачала, ПериодОкончания)
	
	Если СтрокаТаблицы = Неопределено Тогда Возврат КонецЕсли;
	
	ПериодОкончаниеДень = ?(Не ЗначениеЗаполнено(ПериодОкончания), День(КонецМесяца(Объект.ПериодРегистрации)), День(ПериодОкончания));
	ПериодНачалаДень = ?(Не ЗначениеЗаполнено(ПериодНачала), 1, День(ПериодНачала));
	
	ВидВремени = Справочники.ВидыРабочегоВремени.Работа;
	
	ПериодРегистрации = Объект.ПериодРегистрации;
	
	Для ПериодНачало = ПериодНачалаДень По ПериодОкончаниеДень Цикл
		
		ДатаДня = Дата(Год(ПериодРегистрации), Месяц(ПериодРегистрации), ПериодНачало);
		
		ПараметрыОтбораОтклонений = Новый Структура("Сотрудник, Дата",СтрокаТаблицы.Сотрудник, ДатаДня);
		НайденныеОтклонения = ТаблицаОтклонений.НайтиСтроки(ПараметрыОтбораОтклонений);
		
		Если Не НайденныеОтклонения.Количество() Тогда
			Продолжить
		КонецЕсли;
		
		СтрокаТаблицы["ВидВремени1"]	= ВидВремени;
		СтрокаТаблицы["Дней1"] 			= СтрокаТаблицы["Дней1"]+?(ЗначениеЗаполнено(НайденныеОтклонения[0].ДлительностьОтклонения),1,0);
		СтрокаТаблицы["Часов1"] 		= СтрокаТаблицы["Часов1"] + НайденныеОтклонения[0].ДлительностьОтклонения * ЗанимаемыхСтавок;
		
		СписокДатСОтклонениями.Добавить(ДатаДня);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеВыделенныхСтрок(Команда)
	
	Если Объект.СпособВводаДанных = ПредопределенноеЗначение("Перечисление.СпособыВводаДанныхОВремени.ПоДням") Тогда
		
		Для Каждого СтрокаТаблицы Из Элементы.ОтработанноеВремяПоДням.ВыделенныеСтроки Цикл
			ОчиститьПомеченнуюСтрокуКлиент(СтрокаТаблицы)
		КонецЦикла;
		
	Иначе
		
		Для Каждого НомерСтроки Из Элементы.ОтработанноеВремяЗаПериод.ВыделенныеСтроки Цикл
			
			СтрокаТаблицы = Объект.ОтработанноеВремяЗаПериод.НайтиПоИдентификатору(НомерСтроки);
			ОчиститьПомеченнуюСтрокуПериодКлиент(СтрокаТаблицы)
			
		КонецЦикла;
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПомеченнуюСтрокуКлиент(НомерСтроки)
	
	ПериодаОкончание = День(КонецМесяца(Объект.ПериодРегистрации));
	
	ВидВремени = ПредопределенноеЗначение("Справочник.ВидыРабочегоВремени.ПустаяСсылка");
	
	Для ПериодНачало = 1 По ПериодаОкончание Цикл
		
		СтрокаТаблицы = Объект.ОтработанноеВремяПоДням.НайтиПоИдентификатору(НомерСтроки);
		
		СтрокаТаблицы["ПервыйВидВремени" + ПериодНачало]	= ВидВремени;
		СтрокаТаблицы["ПервыйЧасы" + ПериодНачало] 		= 0;
		
		СтрокаТаблицы["ВторойВидВремени" + ПериодНачало]	= ВидВремени;
		СтрокаТаблицы["ВторойЧасы" + ПериодНачало] 		= 0;
		
		СтрокаТаблицы["ТретийВидВремени" + ПериодНачало]	= ВидВремени;
		СтрокаТаблицы["ТретийЧасы" + ПериодНачало] 		= 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПомеченнуюСтрокуПериод(СтрокаТаблицы)
	
	ВидВремени = Справочники.ВидыРабочегоВремени.ПустаяСсылка();
	
	Для ИндексКолонки = 1 По 6 Цикл
		
		СтрокаТаблицы["ВидВремени" + ИндексКолонки]	= ВидВремени;
		СтрокаТаблицы["Дней" + ИндексКолонки] 		= 0;
		СтрокаТаблицы["Часов" + ИндексКолонки] 		= 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПомеченнуюСтрокуПериодКлиент(СтрокаТаблицы)
	
	ВидВремени = ПредопределенноеЗначение("Справочник.ВидыРабочегоВремени.ПустаяСсылка");
	
	Для ИндексКолонки = 1 По 6 Цикл
		
		СтрокаТаблицы["ВидВремени" + ИндексКолонки]	= ВидВремени;
		СтрокаТаблицы["Дней" + ИндексКолонки] 		= 0;
		СтрокаТаблицы["Часов" + ИндексКолонки] 		= 0;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет табличную часть сотрудниками подразделения по производственному календарю.
//
&НаСервере
Процедура ЗаполнитьТабель(ОбновитьСтроки = Ложь)
	
	Если Не ОбновитьСтроки Тогда
		Объект.ОтработанноеВремяПоДням.Очистить();
		Объект.ОтработанноеВремяЗаПериод.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",		Компания);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ДатаНачала",			Объект.ПериодРегистрации);
	
	ТекстЗапроса =
	"
	// ::: [0]
	|ВЫБРАТЬ
	|	ДанныеУвольнения.Период КАК ДатаУвольнения,
	|	ДанныеУвольнения.Сотрудник КАК УволенныйСотрудник
	|ПОМЕСТИТЬ ДанныеУвольнения
	|ИЗ
	|	РегистрСведений.Сотрудники.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&ДатаНачала, МЕСЯЦ),
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				И Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ДанныеУвольнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ::: [1]
	|ВЫБРАТЬ
	|	ДанныеУвольнения.УволенныйСотрудник КАК УволенныйСотрудник,
	|	МАКСИМУМ(УсловияРаботыДоУвольнения.Период) КАК ПериодЗаписиПередУвольнением
	|ПОМЕСТИТЬ ПериодЗаписиУсловийТрудаДоУвольнения
	|ИЗ
	|	ДанныеУвольнения КАК ДанныеУвольнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники КАК УсловияРаботыДоУвольнения
	|		ПО (УсловияРаботыДоУвольнения.Период <= ДанныеУвольнения.ДатаУвольнения)
	|			И ДанныеУвольнения.УволенныйСотрудник = УсловияРаботыДоУвольнения.Сотрудник
	|ГДЕ
	|	УсловияРаботыДоУвольнения.Период <= КОНЕЦПЕРИОДА(&ДатаНачала, МЕСЯЦ)
	|	И УсловияРаботыДоУвольнения.Организация = &Организация
	|	И УсловияРаботыДоУвольнения.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеУвольнения.УволенныйСотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ::: [2]
	|ВЫБРАТЬ
	|	ДанныеУвольнения.ДатаУвольнения КАК ДатаУвольнения,
	|	УсловияРаботыДоУвольнения.Организация КАК Организация,
	|	УсловияРаботыДоУвольнения.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	УсловияРаботыДоУвольнения.Должность КАК Должность,
	|	УсловияРаботыДоУвольнения.Сотрудник КАК Сотрудник,
	|	УсловияРаботыДоУвольнения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ИСТИНА КАК ЭтоУвольнение
	|ПОМЕСТИТЬ ДанныеУвольненияСДеталями
	|ИЗ
	|	ДанныеУвольнения КАК ДанныеУвольнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодЗаписиУсловийТрудаДоУвольнения КАК ПериодЗаписиУсловийТрудаДоУвольнения
	|		ПО ДанныеУвольнения.УволенныйСотрудник = ПериодЗаписиУсловийТрудаДоУвольнения.УволенныйСотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники КАК УсловияРаботыДоУвольнения
	|		ПО (ПериодЗаписиУсловийТрудаДоУвольнения.ПериодЗаписиПередУвольнением = УсловияРаботыДоУвольнения.Период)
	|			И (ПериодЗаписиУсловийТрудаДоУвольнения.УволенныйСотрудник = УсловияРаботыДоУвольнения.Сотрудник)
	|ГДЕ
	|	УсловияРаботыДоУвольнения.Организация = &Организация
	|	И УсловияРаботыДоУвольнения.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УсловияРаботыДоУвольнения.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ::: [4]
	|ВЫБРАТЬ
	|	МАКСИМУМ(СотрудникиСрезПоследних.Период) КАК Период,
	|	СотрудникиСрезПоследних.Организация КАК Организация,
	|	СотрудникиСрезПоследних.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ПериодАктуальнойЗаписиПоСотрудникам
	|ИЗ
	|	РегистрСведений.Сотрудники.СрезПоследних(&ДатаНачала, Организация = &Организация) КАК СотрудникиСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиСрезПоследних.Организация,
	|	СотрудникиСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ::: [5]
	|ВЫБРАТЬ
	|	ПериодАктуальнойЗаписиПоСотрудникам.Период КАК П1,
	|	СотрудникиСрезПоследних.Период КАК Период,
	|	СотрудникиСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СотрудникиСрезПоследних.Сотрудник КАК Сотрудник,
	|	СотрудникиСрезПоследних.Должность КАК Должность,
	|	СотрудникиСрезПоследних.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	СотрудникиСрезПоследних.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ДанныеСотрудникаНаНачалоМесяца
	|ИЗ
	|	ПериодАктуальнойЗаписиПоСотрудникам КАК ПериодАктуальнойЗаписиПоСотрудникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники.СрезПоследних(
	|				&ДатаНачала,
	|				Организация = &Организация
	|					И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК СотрудникиСрезПоследних
	|		ПО ПериодАктуальнойЗаписиПоСотрудникам.Период = СотрудникиСрезПоследних.Период
	|			И ПериодАктуальнойЗаписиПоСотрудникам.Сотрудник = СотрудникиСрезПоследних.Сотрудник
	|ГДЕ
	|	НЕ СотрудникиСрезПоследних.Сотрудник ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ::: [6]
	|ВЫБРАТЬ
	|	МИНИМУМ(КадровыеПеремещения.Период) КАК Период,
	|	КадровыеПеремещения.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	КадровыеПеремещения.Сотрудник КАК Сотрудник,
	|	КадровыеПеремещения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок
	|ПОМЕСТИТЬ ЗаписьКадровогоПеремещенияТекущегоПериода
	|ИЗ
	|	РегистрСведений.Сотрудники КАК КадровыеПеремещения,
	|	ДанныеСотрудникаНаНачалоМесяца КАК ДанныеСотрудникаНаНачалоМесяца
	|ГДЕ
	|	КадровыеПеремещения.Период МЕЖДУ &ДатаНачала И КОНЕЦПЕРИОДА(&ДатаНачала, МЕСЯЦ)
	|	И КадровыеПеремещения.Организация = &Организация
	|	И НЕ(КадровыеПеремещения.СтруктурнаяЕдиница В (ДанныеСотрудникаНаНачалоМесяца.СтруктурнаяЕдиница)
	|				И КадровыеПеремещения.Должность В (ДанныеСотрудникаНаНачалоМесяца.Должность))
	|	И КадровыеПеремещения.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	КадровыеПеремещения.СтруктурнаяЕдиница,
	|	КадровыеПеремещения.Сотрудник,
	|	КадровыеПеремещения.ЗанимаемыхСтавок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ::: [7]
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДанныеСотрудникаНаНачалоМесяца.Период < &ДатаНачала
	|			ТОГДА &ДатаНачала
	|		ИНАЧЕ ДанныеСотрудникаНаНачалоМесяца.Период
	|	КОНЕЦ КАК Период,
	|	ДанныеСотрудникаНаНачалоМесяца.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ДанныеСотрудникаНаНачалоМесяца.Сотрудник КАК Сотрудник,
	|	ДанныеСотрудникаНаНачалоМесяца.Должность КАК Должность,
	|	ДанныеСотрудникаНаНачалоМесяца.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ЛОЖЬ КАК ЭтоУвольнение
	|ПОМЕСТИТЬ УсловияОплатыТруда
	|ИЗ
	|	ДанныеСотрудникаНаНачалоМесяца КАК ДанныеСотрудникаНаНачалоМесяца
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Период,
	|	Сотрудники.СтруктурнаяЕдиница,
	|	Сотрудники.Сотрудник,
	|	Сотрудники.Должность,
	|	Сотрудники.ЗанимаемыхСтавок,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Период МЕЖДУ &ДатаНачала И КОНЕЦПЕРИОДА(&ДатаНачала, МЕСЯЦ)
	|	И Сотрудники.Организация = &Организация
	|	И Сотрудники.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеУвольненияСДеталями.ДатаУвольнения,
	|	ДанныеУвольненияСДеталями.СтруктурнаяЕдиница,
	|	ДанныеУвольненияСДеталями.Сотрудник,
	|	ДанныеУвольненияСДеталями.Должность,
	|	ДанныеУвольненияСДеталями.ЗанимаемыхСтавок,
	|	ИСТИНА
	|ИЗ
	|	ДанныеУвольненияСДеталями КАК ДанныеУвольненияСДеталями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ::: [8]
	|ВЫБРАТЬ
	|	УсловияОплатыТруда.Период КАК Период,
	|	УсловияОплатыТруда.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	УсловияОплатыТруда.Сотрудник КАК Сотрудник,
	|	УсловияОплатыТруда.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	УсловияОплатыТруда.ЭтоУвольнение КАК ЭтоУвольнение
	|ПОМЕСТИТЬ ПериодыУсловияОплатыТруда
	|ИЗ
	|	УсловияОплатыТруда КАК УсловияОплатыТруда
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаписьКадровогоПеремещенияТекущегоПериода.Период,
	|	ЗаписьКадровогоПеремещенияТекущегоПериода.СтруктурнаяЕдиница,
	|	ЗаписьКадровогоПеремещенияТекущегоПериода.Сотрудник,
	|	ЗаписьКадровогоПеремещенияТекущегоПериода.ЗанимаемыхСтавок,
	|	ЛОЖЬ
	|ИЗ
	|	ЗаписьКадровогоПеремещенияТекущегоПериода КАК ЗаписьКадровогоПеремещенияТекущегоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ::: [9]
	|ВЫБРАТЬ
	|	ПериодыУсловияОплатыТруда.Период КАК ПериодДо,
	|	МАКСИМУМ(УсловияОплатыТруда.Период) КАК ПериодС,
	|	УсловияОплатыТруда.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ СовмещенныеПериоды
	|ИЗ
	|	УсловияОплатыТруда КАК УсловияОплатыТруда
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыУсловияОплатыТруда КАК ПериодыУсловияОплатыТруда
	|		ПО УсловияОплатыТруда.Период < ПериодыУсловияОплатыТруда.Период
	|			И УсловияОплатыТруда.Сотрудник = ПериодыУсловияОплатыТруда.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыУсловияОплатыТруда.Период,
	|	УсловияОплатыТруда.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ::: [10]
	|ВЫБРАТЬ
	|	УсловияОплатыТруда.Период КАК Период,
	|	СовмещенныеПериоды.ПериодДо КАК ПериодДо,
	|	УсловияОплатыТруда.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	УсловияОплатыТруда.Сотрудник КАК Сотрудник,
	|	УсловияОплатыТруда.Должность КАК Должность,
	|	УсловияОплатыТруда.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	УсловияОплатыТруда.ЭтоУвольнение КАК ЭтоУвольнение
	|ПОМЕСТИТЬ ТаблицаСПолнымиДанными
	|ИЗ
	|	СовмещенныеПериоды КАК СовмещенныеПериоды
	|		ПОЛНОЕ СОЕДИНЕНИЕ УсловияОплатыТруда КАК УсловияОплатыТруда
	|		ПО СовмещенныеПериоды.ПериодС = УсловияОплатыТруда.Период
	|			И СовмещенныеПериоды.Сотрудник = УсловияОплатыТруда.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ::: [11]
	|ВЫБРАТЬ
	|	ТаблицаСПолнымиДанными.Период КАК Период,
	|	ТаблицаСПолнымиДанными.ПериодДо КАК ПериодДо,
	|	ТаблицаСПолнымиДанными.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаСПолнымиДанными.Сотрудник КАК Сотрудник,
	|	ТаблицаСПолнымиДанными.Должность КАК Должность,
	|	ТаблицаСПолнымиДанными.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ТаблицаСПолнымиДанными.ЭтоУвольнение КАК ЭтоУвольнение
	|ИЗ
	|	ТаблицаСПолнымиДанными КАК ТаблицаСПолнымиДанными
	|ГДЕ
	|	НЕ ТаблицаСПолнымиДанными.Сотрудник В
	|				(ВЫБРАТЬ
	|					ДанныеУвольненияСДеталями.Сотрудник
	|				ИЗ
	|					ДанныеУвольненияСДеталями КАК ДанныеУвольненияСДеталями
	|				ГДЕ
	|					ДанныеУвольненияСДеталями.ДатаУвольнения < &ДатаНачала)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаСПолнымиДанными.Сотрудник,
	|	ТаблицаСПолнымиДанными.Период";
	
	
	ТексПакетаКалендарныеГрафики = "";
	Если ВилЗаполненияТабеля = "ПоПроизводственномуКалендарю" Тогда
		
		Запрос.УстановитьПараметр("Календарь", Компания.ПроизводственныйКалендарь);
		
		ТексПакетаКалендарныеГрафики = 
		"ВЫБРАТЬ
		|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|ГДЕ
		|	КалендарныеГрафики.Календарь = &Календарь
		|	И КалендарныеГрафики.ДатаГрафика >= &ДатаНачала
		|	И КалендарныеГрафики.ДатаГрафика <= КОНЕЦПЕРИОДА(&ДатаНачала, МЕСЯЦ)
		|	И КалендарныеГрафики.ДеньВключенВГрафик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	Запрос.Текст = ТексПакетаКалендарныеГрафики + ТекстЗапроса;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если ВилЗаполненияТабеля = "ПоПроизводственномуКалендарю" Тогда
		Если Объект.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
			ЗаполнитьДанныеПоЧасам(РезультатЗапроса, ОбновитьСтроки);
		Иначе
			ЗаполнитьДанныеПоДням(РезультатЗапроса, ОбновитьСтроки);
		КонецЕсли;
	Иначе
		Если Объект.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
			ЗаполнитьДанныеПоЧасамГрафикиСотрудников(РезультатЗапроса, ОбновитьСтроки);
		Иначе
			ЗаполнитьДанныеПоДнямГрафикиСотрудников(РезультатЗапроса, ОбновитьСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция заполняет список доступных для выбора видов времени.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаСервереБезКонтекста
Функция ПолучитьСписокВыбора(МассивОграничений)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВидыРабочегоВремени.Ссылка
	|ИЗ
	|	Справочник.ВидыРабочегоВремени КАК ВидыРабочегоВремени
	|ГДЕ
	|	(НЕ ВидыРабочегоВремени.Ссылка В (&МассивОграничений))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыРабочегоВремени.Наименование");
	
	Запрос.УстановитьПараметр("МассивОграничений", МассивОграничений);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокВыбора = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Ссылка);	
	КонецЦикла; 
	
	Возврат СписокВыбора
	
КонецФункции // ПолучитьСписокВыбора()

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
