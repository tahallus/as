#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборот);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесены);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныИАгрегированы);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированыЧастично);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИСформированыАТК);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТКОшибкаПередачи);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статус по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		Если СтруктураПараметров.Свойство("ОбъектРасчета") Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				СтруктураПараметров.ОбъектРасчета,
				"Операция, ОперацияНанесения, ВариантЗаполненияДекларации");
		Иначе
			Реквизиты = СтруктураПараметров;
		КонецЕсли;
		
		Если Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.Агрегация Тогда
			
			Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию;
			
		ИначеЕсли ЗначениеЗаполнено(Реквизиты.ОперацияНанесения)
			Или ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Реквизиты.Операция) <> Неопределено Тогда
			
			Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет;
			
		ИначеЕсли Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС 
			И Реквизиты.Свойство("ВариантЗаполненияДекларации") Тогда
			
			Если Реквизиты.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.АТК Тогда
				Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК;
			ИначеЕсли Реквизиты.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок Тогда
				Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеИСМП

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборот Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.Агрегация
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияПроверкаСтатусаОбработкиДокумента
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса Тогда
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.АТК
		Или Операция = Перечисления.ВидыОперацийИСМП.АТКСоздание
		Или Операция = Перечисления.ВидыОперацийИСМП.АТКИзменение
		Или Операция = Перечисления.ВидыОперацийИСМП.АТКУдаление Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТККПередаче);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию
		Или Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер
		Или Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПечатиКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ 
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииПроверкаСтатусаКодовМаркировки Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетКПередаче);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборот Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.Агрегация
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияПроверкаСтатусаОбработкиДокумента
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.АТКУдаление
		Или Операция = Перечисления.ВидыОперацийИСМП.АТКСоздание
		Или Операция = Перечисления.ВидыОперацийИСМП.АТКИзменение
		Или Операция = Перечисления.ВидыОперацийИСМП.АТК Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТКОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТКОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию
		Или Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер
		Или Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПечатиКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ 
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииПроверкаСтатусаКодовМаркировки Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
	
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ИСМП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ, для которого требуется обновить статус
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИСМП
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОперацииВводаВОборот = Новый Массив;
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборот);
	
	ОперацииАгрегации = Новый Массив;
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.Агрегация);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияСоздание);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияИзменение);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияУдаление);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияПроверкаСтатусаОбработкиДокумента);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса);
	ОперацииФормированияАТК = Новый Массив;
	ОперацииФормированияАТК.Добавить(Перечисления.ВидыОперацийИСМП.АТК);
	ОперацииФормированияАТК.Добавить(Перечисления.ВидыОперацийИСМП.АТКСоздание);
	ОперацииФормированияАТК.Добавить(Перечисления.ВидыОперацийИСМП.АТКИзменение);
	ОперацииФормированияАТК.Добавить(Перечисления.ВидыОперацийИСМП.АТКУдаление);
	
	ОперацииНанесенияКМ = Новый Массив;
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПечатиКМ);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииПроверкаСтатусаКодовМаркировки);
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И ОперацииВводаВОборот.Найти(ДополнительныеПараметры.ОперацияКвитанции) <> Неопределено Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		Если ЗначениеЗаполнено(ДополнительныеПараметры.Статус) Тогда
			Статусы.Принят = ДополнительныеПараметры.Статус;
		Иначе
			Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборот;
			Если ДополнительныеПараметры.ПараметрыЗапроса <> Неопределено Тогда
				Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры.ПараметрыЗапроса, "КодыАгрегированы", Ложь) Тогда
					Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы;
				ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры.ПараметрыЗапроса, "КодыАТКСформированы", Ложь) Тогда
					Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИСформированыАТК;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДополнительныеПараметры.ПараметрыЗапроса <> Неопределено Тогда
			Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры.ПараметрыЗапроса, "ТребуетсяАгрегация", Ложь) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
			КонецЕсли;
		Иначе
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ДокументСсылка,
				"ВидПродукции, Операция, Организация, ДокументОснование, Контрагент, ОперацияНанесения, ВариантЗаполненияДекларации, ОтчетПроизводственнойЛинии");
			
			Если Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
				Если Реквизиты.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок Тогда
					Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы;
				Иначе
					Если Реквизиты.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.АТК Тогда
						Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИСформированыАТК;
					КонецЕсли;
					Если ТребуетсяАгрегация(ДокументСсылка, Реквизиты) Тогда
						Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТребуетсяАгрегация(ДокументСсылка, Реквизиты) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
			КонецЕсли;
			
		КонецЕсли;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И ОперацииНанесенияКМ.Найти(ДополнительныеПараметры.ОперацияКвитанции) <> Неопределено Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		Если ДополнительныеПараметры.Свойство("ПакетСтатусовОбработкиОперации")
			И ДополнительныеПараметры.ПакетСтатусовОбработкиОперации.Количество() > 1 Тогда
			
			ЕстьОшибки = Ложь;
			ЕстьУспешно = Ложь;
			
			Для Каждого КлючИЗначение Из ДополнительныеПараметры.ПакетСтатусовОбработкиОперации Цикл
				Если КлючИЗначение.Ключ = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
					ЕстьУспешно = Истина;
				Иначе
					ЕстьОшибки = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьОшибки И ЕстьУспешно Тогда
				СтатусПринят          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично;
				ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
			ИначеЕсли Не ЕстьОшибки Тогда
				СтатусПринят          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесены;
				ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтатусПринят = Неопределено Тогда
			Если ЗначениеЗаполнено(ДополнительныеПараметры.Статус) Тогда
				СтатусПринят = ДополнительныеПараметры.Статус;
			Иначе
				СтатусПринят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесены;
			КонецЕсли;
		КонецЕсли;
		
		Статусы.Принят = СтатусПринят;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
			
		Если ДополнительныеПараметры.ПараметрыЗапроса <> Неопределено Тогда
			
			Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры.ПараметрыЗапроса, "ТребуетсяВводВОборот", Ложь) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
			ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры.ПараметрыЗапроса, "ТребуетсяАгрегация", Ложь) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
			КонецЕсли;
		Иначе
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ДокументСсылка,
				"ВидПродукции, Операция, Организация, ДокументОснование, Контрагент, ОперацияНанесения, ОтчетПроизводственнойЛинии");
			Если ОперацииВводаВОборот.Найти(Реквизиты.Операция) <> Неопределено Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
			ИначеЕсли ТребуетсяАгрегация(ДокументСсылка, Реквизиты) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
			КонецЕсли;
		КонецЕсли;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И ОперацииАгрегации.Найти(ДополнительныеПараметры.ОперацияКвитанции) <> Неопределено Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ВидПродукции, Операция, ВариантЗаполненияДекларации");
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		Если ДополнительныеПараметры.Свойство("ПакетСтатусовОбработкиОперации")
			И ДополнительныеПараметры.ПакетСтатусовОбработкиОперации.Количество() > 1 Тогда
			
			ЕстьОшибки = Ложь;
			ЕстьУспешно = Ложь;
			Для Каждого КлючИЗначение Из ДополнительныеПараметры.ПакетСтатусовОбработкиОперации Цикл
				Если КлючИЗначение.Ключ = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
					ЕстьУспешно = Истина;
				Иначе
					ЕстьОшибки = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьОшибки И ЕстьУспешно Тогда
				Статусы.Принят          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированыЧастично;
				ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
			ИначеЕсли Не ЕстьОшибки Тогда
				Если ОперацииАгрегации.Найти(Реквизиты.Операция) <> Неопределено Тогда
					Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы;
				ИначеЕсли ОперацииНанесенияКМ.Найти(Реквизиты.Операция) <> Неопределено Тогда
					Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныИАгрегированы;
				ИначеЕсли Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
					Если Реквизиты.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок Тогда
						Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы;
						Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
					Иначе
						Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы;
					КонецЕсли;
				ИначеЕсли ОперацииВводаВОборот.Найти(Реквизиты.Операция) <> Неопределено Тогда
					Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы;
				Иначе
					ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
				КонецЕсли;
				ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЕстьЗависимыеСообщения", Ложь)
			Или ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса Тогда
			Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ФормированиеАТК", Ложь) Тогда
				Статусы.Обрабатывается = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТКОбрабатывается;
			Иначе
				Статусы.Обрабатывается = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОбрабатывается;
			КонецЕсли;
			Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
			Если ДополнительныеПараметры.ОперацияКвитанции <> Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса Тогда
				ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ДополнительныеПараметры.Статус) Тогда
				Статусы.Принят = ДополнительныеПараметры.Статус;
			Иначе
				Если ОперацииАгрегации.Найти(Реквизиты.Операция) <> Неопределено Тогда
					Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы;
				ИначеЕсли ОперацииНанесенияКМ.Найти(Реквизиты.Операция) <> Неопределено Тогда
					Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныИАгрегированы;
				ИначеЕсли Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
					Если Реквизиты.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок Тогда
						Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы;
						Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
					Иначе
						Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы;
					КонецЕсли;
				ИначеЕсли ОперацииВводаВОборот.Найти(Реквизиты.Операция) <> Неопределено Тогда
					Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы;
				Иначе
					ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И ОперацииФормированияАТК.Найти(ДополнительныеПараметры.ОперацияКвитанции) <> Неопределено Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры, "ЕстьЗависимыеСообщения", Ложь) Тогда
			Статусы.Обрабатывается = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТКОбрабатывается;
			Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
			Если ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
				Или ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята Тогда
				ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
			КонецЕсли;
		Иначе
			Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыАТКСформированы;
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
			
		КонецЕсли;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТКОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеПередачуДанных);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(
		ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ИСМП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИСМП.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ ИС МП.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - новый статус документа ИС МП.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево - признак необходимости получения всех возможных операций
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияИСМП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ИнтеграцияИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ВидПродукции, Операция, ОперацияНанесения");
	
	ОтчетыОбИспользовании = ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки();
	ОтчетыОбИспользовании.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииКодовМаркировки);
	
	Если ЛинейныйСписок
		Или (ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(Реквизиты.ВидПродукции)
			И (ОтчетыОбИспользовании.Найти(Реквизиты.Операция) <> Неопределено
				Или ЗначениеЗаполнено(Реквизиты.ОперацияНанесения))) Тогда
		
		ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииКодовМаркировки);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 101,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 102,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 103,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПечатиКМ);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 104,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 105,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ);
		
	КонецЕсли;
	
	Если ЛинейныйСписок
		Или Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
		
		ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АТК);
			ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АТКСоздание);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АТКИзменение);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 23,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АТКУдаление);
		
		ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.Агрегация);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АгрегацияСоздание);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АгрегацияИзменение);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 23,
			Исходящий,
		Перечисления.ВидыОперацийИСМП.АгрегацияУдаление);
		
		ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборот);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АгрегацияИзменение);
			
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС);
		
		ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 3,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборот);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 31,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 32,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 33,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 34,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 35,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 36,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 37,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 38,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС);
	КонецЕсли;
	
	Если ЛинейныйСписок
		Или (ОтчетыОбИспользовании.Найти(Реквизиты.Операция) = Неопределено
		И Реквизиты.Операция <> Перечисления.ВидыОперацийИСМП.Агрегация
		И Реквизиты.Операция <> Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС) Тогда
		
		ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 3,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборот);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 31,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 32,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 33,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 34,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 35,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 36,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 37,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 38,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС);
		
	КонецЕсли;
	
	ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 4,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.Агрегация);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 41,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.АгрегацияСоздание);
	
	ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 42,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 421,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.АгрегацияИзменение);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 43,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.АгрегацияУдаление);
		
	ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 5,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.АгрегацияПроверкаСтатусаОбработкиДокумента);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияИСМП.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияИСМППереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияИСМП.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИСМП.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные Тогда
		
		Возврат ВводВОборотJSON(ДокументСсылка, ДополнительныеПараметры, Ложь);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет Тогда
		
		Возврат ВводВОборотJSON(ДокументСсылка, ДополнительныеПараметры, Истина);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию Тогда
		
		Возврат АгрегацияJSON(ДокументСсылка, ДополнительныеПараметры);
	
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК Тогда
		
		Возврат ФормированиеАТКJSON(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

// Формирует JSON сообщения для ввода КМ в оборот
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИСМП.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ВводВОборотJSON(ДокументСсылка, ДополнительныеПараметры, ПередатьОтчетОНанесении)
	
	СообщенияJSON = Новый Массив;
	
#Область ПолучениеДанныхДокумента
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСМППрисоединенныеФайлы.Документ КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка = &Ссылка
	|		И ВЫБОР
	|			КОГДА &ПередатьОтчетОНанесении
	|			И Шапка.ОперацияНанесения В (&ОперацииНанесенияКодовМаркировки)
	|				ТОГДА Шапка.ОперацияНанесения = ИСМППрисоединенныеФайлы.Операция
	|			КОГДА Шапка.Операция = &ИмпортСФТС
	|				ТОГДА ИСМППрисоединенныеФайлы.Операция = &АбстрактнаяОперацияВводВОборот
	|			ИНАЧЕ Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		КОНЕЦ
	|		И Шапка.Ссылка = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.Номер                          КАК Номер,
	|	Шапка.Дата                           КАК Дата,
	|	Шапка.ДокументОснование              КАК ДокументОснование,
	|	Шапка.Ссылка                         КАК Документ,
	|	
	|	Шапка.Организация                    КАК Организация,
	|	Представление(Шапка.Организация)     КАК ОрганизацияПредставление,
	|
	|	Шапка.Контрагент                     КАК Контрагент,
	|	Представление(Шапка.Контрагент)      КАК КонтрагентПредставление,
	|
	|	Шапка.Ответственный                  КАК Ответственный,
	|	Представление(Шапка.Ответственный)   КАК ОтветственныйПредставление,
	|	
	|	Шапка.ВидПродукции                   КАК ВидПродукции,
	|	Шапка.Операция                       КАК Операция,
	|	Шапка.ОперацияНанесения              КАК ОперацияНанесения,
	|	Шапка.ВариантЗаполненияДекларации    КАК ВариантЗаполненияДекларации,
	|	Шапка.ПроизводственныйОбъект         КАК ПроизводственныйОбъект,
	|	// Для обуви и одежды
	|	Шапка.ДатаПроизводства               КАК ДатаПроизводства,
	|	Шапка.ДатаДекларации                 КАК ДатаДекларации,
	|	Шапка.РегистрационныйНомерДекларации КАК РегистрационныйНомерДекларации,
	|	Шапка.КодТаможенногоОргана           КАК КодТаможенногоОргана,
	|	Шапка.ПринятоеРешение                КАК ПринятоеРешение,
	|	Шапка.СтранаПроисхождения            КАК СтранаПроисхождения,
	|	Шапка.СтранаПроисхождения.Код        КАК СтранаЭкспортерКод,
	|	Шапка.ДатаИмпорта                    КАК ДатаИмпорта,
	|	Шапка.ДатаПервичногоДокумента        КАК ДатаПервичногоДокумента,
	|	Шапка.НомерПервичногоДокумента       КАК НомерПервичногоДокумента,
	|	// Для отчетов производственной линии
	|	Шапка.СоздаватьШтрихкодыУпаковок             КАК СоздаватьШтрихкодыУпаковок,
	|	Шапка.Номенклатура                           КАК Номенклатура,
	|	Шапка.Характеристика                         КАК Характеристика,
	|	Шапка.Серия                                  КАК Серия,
	|	Шапка.ИдентификаторПроизводственногоЗаказа   КАК ИдентификаторПроизводственногоЗаказа,
	|	Шапка.ИдентификаторПроизводственнойЛинии     КАК ИдентификаторПроизводственнойЛинии,
	|	Шапка.ОтчетПроизводственнойЛинии             КАК ОтчетПроизводственнойЛинии,
	|	Шапка.ИдентификаторПроисхожденияВЕТИССтрокой КАК ИдентификаторПроисхожденияВЕТИССтрокой,
	|	Шапка.СкоропортящаясяПродукцияВЕТИС          КАК СкоропортящаясяПродукцияВЕТИС,
	|	Шапка.СрокГодности                           КАК СрокГодности,
	|	Шапка.КодТНВЭД                               КАК КодТНВЭД,
	|	Шапка.Ссылка                                 КАК Ссылка
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	ТекстЗапросаТовары = 
	"ВЫБРАТЬ
	|	// Универсальные реквизиты
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Серия              КАК Серия,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.GTIN               КАК GTIN,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|
	|	// Дополнительные реквизиты
	|	Товары.КодТНВЭД                               КАК КодТНВЭД,
	|	Товары.ДатаПроизводства                       КАК ДатаПроизводства,
	|	Товары.ВидДокументаСертификации               КАК ВидДокументаСертификации,
	|	Товары.НомерДокументаСертификации             КАК НомерДокументаСертификации,
	|	Товары.ДатаДокументаСертификации              КАК ДатаДокументаСертификации,
	|	ЕСТЬNULL(Товары.СтранаПроизводства.Код, """") КАК СтранаПроизводстваКод,
	|	Товары.ДатаДекларации                         КАК ДатаДекларации,
	|	Товары.РегистрационныйНомерДекларации         КАК РегистрационныйНомерДекларации,
	|	Товары.Цена                                   КАК Цена,
	|	Товары.СуммаНДС                               КАК СуммаНДС,
	|	Товары.ИдентификаторПроисхожденияВЕТИС        КАК ИдентификаторПроисхожденияВЕТИС,
	|	&ИдентификаторПроисхожденияВЕТИССтрокой       КАК ИдентификаторПроисхожденияВЕТИССтрокой,
	|	Товары.СрокГодности                           КАК СрокГодности
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК Товары
	|
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	ИнтеграцияИСМПВЕТИС.ДоработатьЗапросЗаполненияМаркируемойПродукцииДокументаМаркировка(ТекстЗапросаТовары);
	СписокЗапросов.Добавить(ТекстЗапросаТовары, "Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеОтчета.ЗначениеШтрихкода         КАК ЗначениеШтрихкода,
	|	ДанныеОтчета.ЗначениеШтрихкодаУпаковки КАК ЗначениеШтрихкодаУпаковки,
	|	ДанныеОтчета.ФорматBase64              КАК ФорматBase64,
	|	
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкода         КАК НормализованноеЗначениеШтрихкода,
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкодаУпаковки КАК НормализованноеЗначениеШтрихкодаУпаковки
	|	
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеОтчета
	|ГДЕ
	|	ДанныеОтчета.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"ДанныеОтчетаПроизводственнойЛинии");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки                КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
	|	ШтрихкодыУпаковок.СрокГодности                    КАК СрокГодности
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",                                 ДокументСсылка);
	Запрос.УстановитьПараметр("ОперацииНанесенияКодовМаркировки",       ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки());
	Запрос.УстановитьПараметр("ПередатьОтчетОНанесении",                ПередатьОтчетОНанесении);
	Запрос.УстановитьПараметр("ИдентификаторПроисхожденияВЕТИССтрокой", "");
	Запрос.УстановитьПараметр("АбстрактнаяОперацияВводВОборот",         Перечисления.ВидыОперацийИСМП.ВводВОборот);
	Запрос.УстановитьПараметр("ИмпортСФТС",                             Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары            = РезультатЗапроса["Товары"].Выгрузить();
	//@skip-warning
	ДанныеОтчета      = РезультатЗапроса["ДанныеОтчетаПроизводственнойЛинии"].Выгрузить();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или (Товары.Количество() = 0 И ДанныеОтчета.Количество() = 0) Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Шапка.Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	ТребуетсяАгрегация   = Ложь;
	КодыАгрегированы     = Ложь;
	КодыАТКСформированы  = Ложь;
	
	НомерВерсии      = Шапка.ПоследнийНомерВерсии + 1;
	ДатаПроизводства = ИнтеграцияИС.ДатаUTC(Шапка.ДатаПроизводства);
	ДатаДокумента    = ИнтеграцияИС.ДатаUTC(Шапка.Дата);
	
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(Шапка.ВидПродукции, Ложь, Истина)
		И Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
		
		Если Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок Тогда
			
			КодыАгрегированы = Истина;
			ТребуетсяАгрегация = Ложь;
			
		Иначе
			
			ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
			Настройки = Новый Структура(
				"ЗапрашиватьДанныеСервисаИСМП, СсылкаНаОбъект",
				Ложь, ДокументСсылка);
			ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Настройки);
			
			РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
				ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
				ПараметрыСканирования);

			Для Каждого СтрокаДерева Из РезультатПоиска.ДеревоУпаковок.Строки Цикл
				Если СтрокаДерева.Строки.Количество() > 0 Тогда
					ТребуетсяАгрегация = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.АТК Тогда
				КодыАТКСформированы = Истина;
			КонецЕсли;
		
		КонецЕсли;
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ТребуетсяАгрегация",  ТребуетсяАгрегация);
		ПараметрыЗапроса.Вставить("КодыАгрегированы",    КодыАгрегированы);
		ПараметрыЗапроса.Вставить("КодыАТКСформированы", КодыАТКСформированы);
		ПараметрыЗапроса.Вставить("ОрганизацияИНН",      РеквизитыОрганизации.ИНН);
		
		АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.ВводВОборот;
		
		АбстрактноеСообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		АбстрактноеСообщениеJSON.Организация               = Шапка.Организация;
		АбстрактноеСообщениеJSON.Документ                  = ДокументСсылка;
		АбстрактноеСообщениеJSON.ДокументОснование         = Шапка.ДокументОснование;
		АбстрактноеСообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		АбстрактноеСообщениеJSON.Операция                  = АбстрактнаяОперация;
		АбстрактноеСообщениеJSON.Версия                    = НомерВерсии;
		АбстрактноеСообщениеJSON.ПараметрыЗапроса          = ПараметрыЗапроса;
		АбстрактноеСообщениеJSON.Идентификатор             = СокрЛП(Новый УникальныйИдентификатор());
		АбстрактноеСообщениеJSON.ТипСообщения              = Перечисления.ТипыЗапросовИС.Исходящий;
		АбстрактноеСообщениеJSON.ТребуетсяПодписание       = Ложь;
		АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
		АбстрактноеСообщениеJSON.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП;
		АбстрактноеСообщениеJSON.Описание   = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			АбстрактнаяОперация, ДокументСсылка, НомерВерсии);
		
		ПроверитьЗаполнениеДанныхДекларации(АбстрактноеСообщениеJSON, Шапка);
		
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	ОтчетыОбИспользовании = ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки();
	ОтчетыОбИспользовании.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииКодовМаркировки);
	
	ЭтоМолочнаяПродукция = ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Шапка.ВидПродукции);
	ЭтоПродукцияМОТП     = ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(Шапка.ВидПродукции);
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Шапка.Операция, ДокументСсылка, НомерВерсии);
	
	КоличествоКодовВДокументе = 30000;
	
#КонецОбласти
	
#Область РазборКодовМаркировки

	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	ПолныеКодыМаркировки = ИнициализироватьПолныеКодыМаркировки();
	
	КодыМаркировки = ШтрихкодированиеИСМП.НоваяТаблицаПоискаКодаМаркировкиВПуле(ЭтоМолочнаяПродукция);
	ИдентификаторыВЕТИС = Новый Массив;
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	
	// Заполнение данных по отчету производственной линии
	Если Шапка.ОтчетПроизводственнойЛинии Тогда
		
		СоздаватьШтрихкодыУпаковок  = Шапка.СоздаватьШтрихкодыУпаковок;
		
		КешДанныхРазбора = Новый Соответствие;
		ШтрихкодыEAN     = Новый Соответствие;
		
		ПараметрыРазбора = Новый Структура;
		ПараметрыРазбора.Вставить("УпрощеннаяОбработкаКодовМаркировки",     ПараметрыСканирования.УпрощеннаяОбработкаКодовМаркировки);
		//Если флаг стоит, то из пула полные коды брать нельзя.
		ПараметрыРазбора.Вставить("ВосстанавливатьСтруктуруКодаМаркировки", Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки); //Не ПроверятьСтруктуруКодовМаркировки;
		ПараметрыРазбора.Вставить("ПроверятьАлфавитКодовМаркировки",        ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки);
		
		ДанныеОтчета.Колонки.Добавить("ТекстОшибки", Новый ОписаниеТипов("Строка"));
		
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(Шапка.ВидПродукции, Ложь, Истина)
			И ОтчетыОбИспользовании.Найти(Шапка.Операция) = Неопределено
			И Не ПередатьОтчетОНанесении Тогда
			
			// Ввод в оборот
			ОперацияНанесенияВыполненаНезависимо = Не ЗначениеЗаполнено(Шапка.ОперацияНанесения);
			
			Для Каждого СтрокаОтчета Из ДанныеОтчета Цикл
				Если ЗначениеЗаполнено(СтрокаОтчета.ЗначениеШтрихкодаУпаковки)
					Или ЗначениеЗаполнено(СтрокаОтчета.НормализованноеЗначениеШтрихкодаУпаковки) Тогда
					ТребуетсяАгрегация = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если ОперацияНанесенияВыполненаНезависимо
				Или ЗначениеЗаполнено(ДанныеОтчета[0].ЗначениеШтрихкода) Тогда
				
				// Если ввод в оборот выполняется после передачи отчета о нанесении, то нормализованные коды уже сохранены в данных документа.
				// Разбор требуется выполнять для ввода в оборот отдельной операцией,
				// или для документов, в которых до обновления не были заполнены Нормализованные коды
				
				РезультатОбработкиДанныхОтчета = ШтрихкодированиеИСМПСлужебный.ОбработатьКодыМаркировкиДляОтчетаОНанесении(
					ДанныеОтчета, Шапка.ВидПродукции, ПараметрыРазбора);
				ВидыУпаковокДляПередачиОтчетаОНанесении = ШтрихкодированиеИСКлиентСервер.ВидыУпаковокДляПередачиОтчетаОНанесении();
				
				// 1. Разбор кодов, подготовка данных для построения дерева упаковок.
				
				Если РезультатОбработкиДанныхОтчета.ЕстьОшибки Тогда
					
					СохранитьДанныеОтчетаПроизводственнойЛинии(ДокументСсылка, ДанныеОтчета);
					СообщитьОНеправильномФорматеОтчета(СообщениеJSON);
					СообщенияJSON.Добавить(СообщениеJSON);
					Возврат СообщенияJSON;
					
				КонецЕсли;
				
				Для Каждого СтрокаДанных Из РезультатОбработкиДанныхОтчета.ОбработанныеДанныеОтчета Цикл
				
					ИсходнаяСтрока = СтрокаДанных.ИсходнаяСтрока;
					
					Для Каждого ИменаКолонок Из РезультатОбработкиДанныхОтчета.ГруппыКолонок Цикл
						
						Если Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.КодМаркировки]) Тогда
							Продолжить;
						КонецЕсли;
						
						Если СтрокаДанных.ЕстьОшибки
							Или Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки]) Тогда
							ВызватьИсключение НСтр("ru = 'Внутренняя ошибка разбора кодов маркировки.'");
						КонецЕсли;
						
						Если КешДанныхРазбора[ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки]] = Неопределено Тогда
							
							Если СоздаватьШтрихкодыУпаковок Тогда
								
								КешДанныхРазбора.Вставить(
									ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки],
									Новый Структура("ВидУпаковки, ТипШтрихкода, EAN, GTIN, КоличествоВложенныхЕдиниц",
										СтрокаДанных[ИменаКолонок.ВидУпаковки],
										СтрокаДанных[ИменаКолонок.ТипШтрихкода],
										СтрокаДанных[ИменаКолонок.EAN],
										СтрокаДанных[ИменаКолонок.GTIN],
										СтрокаДанных[ИменаКолонок.КоличествоВложенныхЕдиниц]));
								
								Если ШтрихкодыEAN[ИменаКолонок.EAN] = Неопределено 
									И ЗначениеЗаполнено(СтрокаДанных[ИменаКолонок.EAN]) Тогда
									ШтрихкодыEAN.Вставить(СтрокаДанных[ИменаКолонок.EAN], Истина);
								КонецЕсли;
								
							Иначе
								КешДанныхРазбора.Вставить(ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки], Истина);
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				СохранитьДанныеОтчетаПроизводственнойЛинии(ДокументСсылка, ДанныеОтчета);
				
			ИначеЕсли СоздаватьШтрихкодыУпаковок Тогда
				
				// Штрихкоды созданы при первой операции: Передача отчета о нанесении
				СоздаватьШтрихкодыУпаковок = Ложь;
				
			КонецЕсли;
			
		Иначе // Передача отчета о нанесении
			
			РезультатОбработкиДанныхОтчета = ШтрихкодированиеИСМПСлужебный.ОбработатьКодыМаркировкиДляОтчетаОНанесении(
				ДанныеОтчета, Шапка.ВидПродукции, ПараметрыРазбора);
			
			КодыМаркировки = ШтрихкодированиеИСМП.НоваяТаблицаПоискаКодаМаркировкиВПуле(ЭтоМолочнаяПродукция);
			
			КешКодовДляПоискаВПуле = Новый Соответствие;
			
			ВидыУпаковокДляПередачиОтчетаОНанесении = ШтрихкодированиеИСКлиентСервер.ВидыУпаковокДляПередачиОтчетаОНанесении();
			
			// 1. Заполнение таблицы КодыМаркировки для поиска в пуле + кеш.
			
			ЕстьОшибки = РезультатОбработкиДанныхОтчета.ЕстьОшибки;
			
			Для Каждого СтрокаДанных Из РезультатОбработкиДанныхОтчета.ОбработанныеДанныеОтчета Цикл
				
				ИсходнаяСтрока = СтрокаДанных.ИсходнаяСтрока;
				
				Если ЕстьОшибки Или ЗначениеЗаполнено(ИсходнаяСтрока.ТекстОшибки) Тогда
					
					ЕстьОшибки = Истина;
					Прервать;
					
				КонецЕсли;
				
				Для Каждого ИменаКолонок Из РезультатОбработкиДанныхОтчета.ГруппыКолонок Цикл
					
					Если Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.КодМаркировки]) Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаДанных.ЕстьОшибки
						Или Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки]) Тогда
						ВызватьИсключение НСтр("ru = 'Внутренняя ошибка разбора кодов маркировки.'");
					КонецЕсли;
					
					Если КешДанныхРазбора[ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки]] = Неопределено Тогда
						
						Если СоздаватьШтрихкодыУпаковок Тогда
							
							КешДанныхРазбора.Вставить(
								ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки],
								Новый Структура("ВидУпаковки, ТипШтрихкода, EAN, GTIN, КоличествоВложенныхЕдиниц",
									СтрокаДанных[ИменаКолонок.ВидУпаковки],
									СтрокаДанных[ИменаКолонок.ТипШтрихкода],
									СтрокаДанных[ИменаКолонок.EAN],
									СтрокаДанных[ИменаКолонок.GTIN],
									СтрокаДанных[ИменаКолонок.КоличествоВложенныхЕдиниц]));
							
							Если ШтрихкодыEAN[ИменаКолонок.EAN] = Неопределено 
								И ЗначениеЗаполнено(СтрокаДанных[ИменаКолонок.EAN]) Тогда
								ШтрихкодыEAN.Вставить(СтрокаДанных[ИменаКолонок.EAN], Истина);
							КонецЕсли;
							
						Иначе
							КешДанныхРазбора.Вставить(ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки], Истина);
						КонецЕсли;
						
						Если ВидыУпаковокДляПередачиОтчетаОНанесении.Получить(СтрокаДанных[ИменаКолонок.ВидУпаковки]) <> Неопределено Тогда
							
							Если ЗначениеЗаполнено(СтрокаДанных[ИменаКолонок.ПолныйКодМаркировки]) Тогда
								
								ДобавитьКодКПолучению(
									ПолныеКодыМаркировки,
									ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки],
									,
									,
									СтрокаДанных[ИменаКолонок.ПолныйКодМаркировки]);
								
							ИначеЕсли Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки Тогда
								// Искать полный код в пуле
								ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
									ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки], КодыМаркировки);
								
								СтрокиТаблицыДляОбработки = КешКодовДляПоискаВПуле[ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки]];
								Если СтрокиТаблицыДляОбработки = Неопределено Тогда
									СтрокиТаблицыДляОбработки = Новый Массив;
								КонецЕсли;
								СтрокиТаблицыДляОбработки.Добавить(ИсходнаяСтрока);
								КешКодовДляПоискаВПуле[ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки]] = СтрокиТаблицыДляОбработки;
								
							Иначе
								ДобавитьТекстОшибкиНеНайденПолныйКод(ИсходнаяСтрока, ИменаКолонок.КодМаркировки);
								ЕстьОшибки = Истина;
							КонецЕсли;
							
						КонецЕсли;
						
						Если ИменаКолонок.КодМаркировки = "ЗначениеШтрихкодаУпаковки" Тогда
							ТребуетсяАгрегация = Истина;
						КонецЕсли;
						
					ИначеЕсли ВидыУпаковокДляПередачиОтчетаОНанесении.Получить(СтрокаДанных[ИменаКолонок.ВидУпаковки]) <> Неопределено
						И Не ЗначениеЗаполнено(СтрокаДанных[ИменаКолонок.ПолныйКодМаркировки]) Тогда
						
						Если Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки Тогда
							СтрокиТаблицыДляОбработки = КешКодовДляПоискаВПуле[ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки]];
							Если СтрокиТаблицыДляОбработки = Неопределено Тогда
								СтрокиТаблицыДляОбработки = Новый Массив;
							КонецЕсли;
							СтрокиТаблицыДляОбработки.Добавить(ИсходнаяСтрока);
						Иначе
							ДобавитьТекстОшибкиНеНайденПолныйКод(ИсходнаяСтрока, ИменаКолонок.КодМаркировки);
							ЕстьОшибки = Истина;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			// 2. Поиск.
			Если Не (ЕстьОшибки Или ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки) Тогда
				
				РезультатПоискаВПуле = ШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки(
					КодыМаркировки, "ПолныйКодМаркировки");
				РезультатПоискаВПуле.Индексы.Добавить("КодМаркировки");
				
				// 3. Обход результатов поиска.
				Для Каждого КлючИЗначение Из КешКодовДляПоискаВПуле Цикл
					
					КодМаркировки = КлючИЗначение.Ключ;
					ИсходныеСтроки = КлючИЗначение.Значение;
					СтрокаПулаКодовМаркировки = РезультатПоискаВПуле.Найти(КодМаркировки, "КодМаркировки");
					
					Если СтрокаПулаКодовМаркировки = Неопределено Тогда
						ТекстОшибки = СтрШаблон(
							НСтр("ru = 'Не найден полный код маркировки для %1'"), 
							КодМаркировки);
						Для Каждого ИсходнаяСтрока Из ИсходныеСтроки Цикл
							ИсходнаяСтрока.ТекстОшибки = ?(ЗначениеЗаполнено(ИсходнаяСтрока.ТекстОшибки), ИсходнаяСтрока.ТекстОшибки + Символы.ПС + ТекстОшибки, ТекстОшибки);
						КонецЦикла;
						ЕстьОшибки = Истина;
					Иначе
						ДобавитьКодКПолучению(
							ПолныеКодыМаркировки,
							КодМаркировки,
							,
							,
							СтрокаПулаКодовМаркировки.ПолныйКодМаркировки);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// 4. Сохранение в документ.
			СохранитьДанныеОтчетаПроизводственнойЛинии(ДокументСсылка, ДанныеОтчета);
			Если ЕстьОшибки Тогда
				
				СообщитьОНеправильномФорматеОтчета(СообщениеJSON);
				СообщенияJSON.Добавить(СообщениеJSON);
				Возврат СообщенияJSON;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// 5. Заполнение дерева для создания штрихкодов упаковок.
		Если СоздаватьШтрихкодыУпаковок Тогда
			
			ДанныеEAN = Новый Массив;
			Для Каждого КлючИЗначение Из ШтрихкодыEAN Цикл
				ДанныеEAN.Добавить(КлючИЗначение.Ключ);
			КонецЦикла;
			
			ИнформацияПоШтрихкодамEAN = ШтрихкодированиеИС.ДанныеПоШтрихкодамEAN(ДанныеEAN, ПараметрыСканирования);
			
			ДеревоУпаковок = ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок();
			ДеревоУпаковок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
			ДеревоУпаковок.Колонки.Добавить("КоличествоВложенныхЕдиниц", Новый ОписаниеТипов("Число"));
			
			СоответствиеСтрокДереваУпаковок = Новый Соответствие;
			ИсточникДанных                  = Новый Массив;
			КешКоэффициентовПоEANGTIN          = Новый Соответствие;
			
			Для Каждого СтрокаДанныхОтчета Из ДанныеОтчета Цикл
				ИсточникДанных.Добавить(
					Новый Структура(
						"Штрихкод, ШтрихкодУпаковки",
						СтрокаДанныхОтчета.НормализованноеЗначениеШтрихкода, СтрокаДанныхОтчета.НормализованноеЗначениеШтрихкодаУпаковки));
			КонецЦикла;
			
			ГрупповаяОбработкаШтрихкодовИС.ДополнитьУпорядочитьДанныеТСД(ИсточникДанных);
			
			Для Каждого СтрокаДанныхОтчета Из ИсточникДанных Цикл
				
				СтрокаДанных = КешДанныхРазбора[СтрокаДанныхОтчета.Штрихкод];
				Если СтрокаДанных = Неопределено Тогда
					ВызватьИсключение НСтр("ru = 'Внутренняя ошибка разбора кодов маркировки'");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанныхОтчета.ШтрихкодУпаковки) Тогда
					СтрокаДереваВерхнегоУровня = СоответствиеСтрокДереваУпаковок[СтрокаДанныхОтчета.ШтрихкодУпаковки];
					Если СтрокаДереваВерхнегоУровня = Неопределено Тогда
						СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
					КонецЕсли;
				Иначе
					СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
				КонецЕсли;
				
				СтрокаДерева = СтрокаДереваВерхнегоУровня.Строки.Добавить();
				
				СтрокаДерева.Штрихкод             = СтрокаДанныхОтчета.Штрихкод; //совпадает с СтрокаДанныхОтчета.Штрихкод;
				СтрокаДерева.ТипШтрихкода         = СтрокаДанных.ТипШтрихкода;
				СтрокаДерева.ВидУпаковки          = СтрокаДанных.ВидУпаковки;
				СтрокаДерева.ВидПродукции         = Шапка.ВидПродукции;
				СтрокаДерева.Номенклатура         = Шапка.Номенклатура;
				СтрокаДерева.Характеристика       = Шапка.Характеристика;
				СтрокаДерева.Серия                = Шапка.Серия;
				
				Коэффициент = КешКоэффициентовПоEANGTIN[СтрокаДанных.EAN];
				Если Коэффициент <> Неопределено Тогда
					СтрокаДерева.Коэффициент = Коэффициент;
				ИначеЕсли СтрокаДанных.КоличествоВложенныхЕдиниц > 0 Тогда
					СтрокаДерева.КоличествоВложенныхЕдиниц = СтрокаДанных.КоличествоВложенныхЕдиниц;
					СтрокаДерева.Коэффициент = СтрокаДанных.КоличествоВложенныхЕдиниц;
				Иначе
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("ШтрихкодEAN", СтрокаДанных.EAN);
					
					НайденныеСтроки = ИнформацияПоШтрихкодамEAN.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() = 1 Тогда
						СтрокаДерева.Коэффициент = НайденныеСтроки[0].Коэффициент;
						КешКоэффициентовПоEANGTIN[СтрокаДанных.EAN] = СтрокаДерева.Коэффициент;
					Иначе
						Коэффициент = КешКоэффициентовПоEANGTIN[СтрокаДанных.GTIN];
						Если Коэффициент = Неопределено
							И ЗначениеЗаполнено(СтрокаДанных.GTIN)
							И ВидыУпаковокДляПередачиОтчетаОНанесении.Получить(СтрокаДерева.ВидУпаковки) <> Неопределено Тогда
							
							СтруктураЗаполненияСпецифики = ИнициализироватьСтруктуруЗаполненияКоэффициентовПоОписаниюGTIN();
							СтруктураЗаполненияСпецифики.СтрокаДерева = СтрокаДерева;
							СтруктураЗаполненияСпецифики.GTIN         = СтрокаДанных.GTIN;
							
							ЗаполнитьЗначенияСвойств(СтруктураЗаполненияСпецифики, СтрокаДерева);
							
							ДанныеПоШтрихкодам = Новый Массив;
							ДанныеПоШтрихкодам.Добавить(СтруктураЗаполненияСпецифики);
							ШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(ДанныеПоШтрихкодам, Ложь);
							// Коэффициент должен быть заполнен в базе для Потребительской или Групповой упаковки
							Если СтрокаДерева.Коэффициент = 0 
								И ВидыУпаковокДляПередачиОтчетаОНанесении.Получить(СтрокаДерева.ВидУпаковки) <> Неопределено Тогда
								ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
									СообщениеJSON,
									СтрШаблон(
										НСтр("ru = 'Не удалось определить коэффициент для %1'"),
										СтрокаДанных.EAN));
								СообщенияJSON.Добавить(СообщениеJSON);
								Возврат СообщенияJSON;
							КонецЕсли;
							
							КешКоэффициентовПоEANGTIN[СтрокаДанных.GTIN] = СтрокаДерева.Коэффициент;
							
						Иначе
							СтрокаДерева.Коэффициент = Коэффициент;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
					СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
				Иначе
					СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
				КонецЕсли;
				
				СтрокаДерева.НормализованныйШтрихкод = СтрокаДанныхОтчета.Штрихкод;
				
				Если ЭтоПродукцияМОТП Тогда
					СтрокаДерева.ХэшСуммаНормализации    = Справочники.ШтрихкодыУпаковокТоваров.ХэшСуммаСтроки(СтрокаДанныхОтчета.Штрихкод);
				КонецЕсли;
				
				СоответствиеСтрокДереваУпаковок.Вставить(СтрокаДанныхОтчета.Штрихкод, СтрокаДерева);
				
			КонецЦикла;
			
		КонецЕсли;
		
	// Заполнение данных по маркируемым товарам
	Иначе
		
		Настройки = Новый Структура(
			"ЗапрашиватьДанныеСервисаИСМП, СсылкаНаОбъект",
			Ложь, ДокументСсылка);
		ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Настройки);
		
		РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
			ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
			ПараметрыСканирования,, Истина);
		
		СоответствиеБлоков = Новый Соответствие;
		
		Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
			
			Если СтрокаТЧМаркированныеТовары.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				
				ДобавитьКодКПолучению(
					ПолныеКодыМаркировки,
					СтрокаТЧМаркированныеТовары.Штрихкод,
					ЭтоМолочнаяПродукция,
					СтрокаТЧМаркированныеТовары);
				
				ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
					СтрокаТЧМаркированныеТовары, КодыМаркировки, ЭтоМолочнаяПродукция);
				
			КонецЕсли;
			
			СтрокаРодитель = СтрокаТЧМаркированныеТовары.СтрокаДерева.Родитель;
			Если СтрокаРодитель <> Неопределено Тогда
				Если СоответствиеБлоков[СтрокаРодитель.Штрихкод] = Неопределено Тогда
					СоответствиеБлоков.Вставить(СтрокаРодитель.Штрихкод, Истина);
					Если СтрокаРодитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
						
						ДобавитьКодКПолучению(
							ПолныеКодыМаркировки,
							СтрокаРодитель.Штрихкод,
							ЭтоМолочнаяПродукция,
							СтрокаРодитель);
						
						ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
							СтрокаРодитель, КодыМаркировки, ЭтоМолочнаяПродукция);
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаДерева Из РезультатПоиска.ДеревоУпаковок.Строки Цикл
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				ТребуетсяАгрегация = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
#КонецОбласти
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(Шапка.ВидПродукции, Ложь, Истина)
		И ОтчетыОбИспользовании.Найти(Шапка.Операция) = Неопределено
		И Не ПередатьОтчетОНанесении Тогда
		
		// Для операции возможна загрузка данных отчета производственной линии
		Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ Тогда
			
			ПроверитьЗаполнениеДатыПроизводства(ДатаПроизводства, СообщениеJSON);
			ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);
			ПроверитьЗаполнениеКодаТНВЭДШапки(СообщениеJSON, Шапка);
			
			document_description = Новый Структура;
			document_description.Вставить("production_type", "OWN_PRODUCTION");
			document_description.Вставить("production_date", ДатаПроизводства);
			
			document_description.Вставить("participant_inn", РеквизитыОрганизации.ИНН);
			document_description.Вставить("producer_inn",    РеквизитыОрганизации.ИНН);
			document_description.Вставить("owner_inn",       РеквизитыОрганизации.ИНН);
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("doc_type",             "Promotion_Inform_Selfmade");
			ТелоЗапроса.Вставить("document_description", document_description);
			ТелоЗапроса.Вставить("products",             Новый Массив);
			
			Настройки = НастройкиДобавляемыхПолейСведенийОТоварах();
			Настройки.УказыватьИдентификаторПроисхожденияВЕТИС = Истина;
			
			Если Шапка.ОтчетПроизводственнойЛинии Тогда
				Если Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
					И Не ЗначениеЗаполнено(Шапка.ИдентификаторПроисхожденияВЕТИССтрокой) Тогда
					СообщитьОНеЗаполненномИдентификатореВЕТИС(СообщениеJSON);
					СообщенияJSON.Добавить(СообщениеJSON);
					Возврат СообщенияJSON;
				КонецЕсли;
				ЗаполнитьСведенияОТоварахПоДаннымОтчета(СообщениеJSON, ТелоЗапроса, ПараметрыНормализацииПрочее, Шапка, ДанныеОтчета, Настройки);
			Иначе
				ЗаполнитьСведенияОТоварахПоШтрихкодамУпаковок(СообщениеJSON, ТелоЗапроса, РезультатПоиска, ПараметрыНормализацииПрочее, Шапка, Товары, Настройки);
			КонецЕсли;
			
		// Для операции возможна загрузка данных отчета производственной линии
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС Тогда
			
			ПроверитьЗаполнениеДанныхДекларации(СообщениеJSON, Шапка);
			ПроверитьЗаполнениеДанныхТаможенногоОргана(СообщениеJSON, Шапка);
			ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);
			ПроверитьЗаполнениеКодаТНВЭДШапки(СообщениеJSON, Шапка);
			
			document_description = Новый Структура;
			document_description.Вставить("participant_inn",    РеквизитыОрганизации.ИНН);
			document_description.Вставить("declaration_date",   ИнтеграцияИС.ДатаUTC(Шапка.ДатаДекларации));
			document_description.Вставить("declaration_number", Шапка.РегистрационныйНомерДекларации);
			document_description.Вставить("customs_code",       Шапка.КодТаможенногоОргана);
			document_description.Вставить("decision_code",      ИнтерфейсИСМПСлужебный.ПринятоеРешение(Шапка.ПринятоеРешение));
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("doc_type",             "GOODSIMPORT");
			ТелоЗапроса.Вставить("document_description", document_description);
			ТелоЗапроса.Вставить("products",             Новый Массив);
			
			Настройки = НастройкиДобавляемыхПолейСведенийОТоварах();
			Настройки.УказыватьИдентификаторПроисхожденияВЕТИС = Истина;
			
			Если Шапка.ОтчетПроизводственнойЛинии Тогда
				Если Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
					И Не ЗначениеЗаполнено(Шапка.ИдентификаторПроисхожденияВЕТИССтрокой) Тогда
					СообщитьОНеЗаполненномИдентификатореВЕТИС(СообщениеJSON);
					СообщенияJSON.Добавить(СообщениеJSON);
					Возврат СообщенияJSON;
				КонецЕсли;
				ЗаполнитьСведенияОТоварахПоДаннымОтчета(СообщениеJSON, ТелоЗапроса, ПараметрыНормализацииПрочее, Шапка, ДанныеОтчета, Настройки);
			Иначе
				ЗаполнитьСведенияОТоварахПоШтрихкодамУпаковок(СообщениеJSON, ТелоЗапроса, РезультатПоиска, ПараметрыНормализацииПрочее, Шапка, Товары, Настройки);
			КонецЕсли;
			
		// Для операции возможна загрузка данных отчета производственной линии (молочная продукция)
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
			Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика Тогда
			
			РеквизитыКонтрагента = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Контрагент);
			
			ТелоЗапроса = Новый Структура;
			
			Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору Тогда
				ТелоЗапроса.Вставить("producer_inn", РеквизитыОрганизации.ИНН);
				ТелоЗапроса.Вставить("owner_inn",    РеквизитыКонтрагента.ИНН);
				ТелоЗапроса.Вставить("producer",     Истина);
				ТелоЗапроса.Вставить("owner",        Ложь);
			ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика Тогда
				ТелоЗапроса.Вставить("owner_inn",    РеквизитыОрганизации.ИНН);
				ТелоЗапроса.Вставить("producer_inn", РеквизитыКонтрагента.ИНН);
				ТелоЗапроса.Вставить("producer",     Ложь);
				ТелоЗапроса.Вставить("owner",        Истина);
			КонецЕсли;
			
			ТелоЗапроса.Вставить("products_list",    Новый Массив);
			ТелоЗапроса.Вставить("production_date",  ДатаПроизводства);
			ТелоЗапроса.Вставить("production_order", "CONTRACT_PRODUCTION");
			
			Настройки = НастройкиДобавляемыхПолейСведенийОТоварах("products_list", "uit");
			Настройки.УказыватьИнформациюОТоваре               = Истина;
			Настройки.УказыватьИдентификаторПроисхожденияВЕТИС = Истина;
			Настройки.ДатаПроизводства                         = ДатаПроизводства;
			
			Если Шапка.ОтчетПроизводственнойЛинии Тогда
				Если Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
					И Не ЗначениеЗаполнено(Шапка.ИдентификаторПроисхожденияВЕТИССтрокой) Тогда
					СообщитьОНеЗаполненномИдентификатореВЕТИС(СообщениеJSON);
					СообщенияJSON.Добавить(СообщениеJSON);
					Возврат СообщенияJSON;
				КонецЕсли;
				ЗаполнитьСведенияОТоварахПоДаннымОтчета(СообщениеJSON, ТелоЗапроса, ПараметрыНормализацииПрочее, Шапка, ДанныеОтчета, Настройки);
			Иначе
				ЗаполнитьСведенияОТоварахПоШтрихкодамУпаковок(
					СообщениеJSON, ТелоЗапроса, РезультатПоиска, ПараметрыНормализацииПрочее, Шапка, Товары, Настройки);
			КонецЕсли;
			
		// Для операции возможна загрузка данных отчета производственной линии
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц Тогда
			
			ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("participant_inn", РеквизитыОрганизации.ИНН);
			ТелоЗапроса.Вставить("products_list",   Новый Массив);
			
			Настройки = НастройкиДобавляемыхПолейСведенийОТоварах("products_list", "uit");
			Настройки.ПроверятьИУказыватьКодТНВЭД = Ложь;
			Настройки.УказыватьСертификацию = Ложь;
			Настройки.УказыватьДатуПриемки = Истина;
			Настройки.ДатаПриемки = ДатаДокумента;
			
			Если Шапка.ОтчетПроизводственнойЛинии Тогда
				ЗаполнитьСведенияОТоварахПоДаннымОтчета(
					СообщениеJSON, ТелоЗапроса, ПараметрыНормализацииПрочее, Шапка, ДанныеОтчета, Настройки);
			Иначе
				ЗаполнитьСведенияОТоварахПоШтрихкодамУпаковок(
					СообщениеJSON, ТелоЗапроса, РезультатПоиска, ПараметрыНормализацииПрочее, Шапка, Товары, Настройки);
			КонецЕсли;
			
		// Загрузка данных отчета производственной линии недоступна
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков Тогда
			
			ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("trade_participant_inn", РеквизитыОрганизации.ИНН);
			ТелоЗапроса.Вставить("products_list",         Новый Массив);
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				
				ПараметрыОтбора = Новый Структура;
				
				Если ЗначениеЗаполнено(СтрокаТЧМаркированныеТовары.Номенклатура) Тогда
					ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТЧМаркированныеТовары.Номенклатура);
					ПараметрыОтбора.Вставить("Характеристика", СтрокаТЧМаркированныеТовары.Характеристика);
					ПараметрыОтбора.Вставить("Серия",          СтрокаТЧМаркированныеТовары.Серия);
				Иначе
					
					ПримечаниеКРезультатуРазбора = Неопределено;
					ДанныеКодаМаркировки         = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
						СтрокаТЧМаркированныеТовары.Штрихкод, Шапка.ВидПродукции, ПримечаниеКРезультатуРазбора);
					
					Если ДанныеКодаМаркировки = Неопределено Тогда
						СообщитьОбОшибкеРазбораКода(СообщениеJSON, ПримечаниеКРезультатуРазбора, СтрокаТЧМаркированныеТовары);
					Иначе
						ПараметрыОтбора.Вставить("GTIN", ДанныеКодаМаркировки.СоставКодаМаркировки.GTIN);
					КонецЕсли;
					
				КонецЕсли;
				
				НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 1 Тогда
					
					СтрокаТЧТовары = НайденныеСтроки[0];
					
					СтрокаТЧ = Новый Структура;
					РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
						СтрокаТЧМаркированныеТовары.Штрихкод, Шапка.ВидПродукции);
					
					СтрокаТЧ.Вставить(
						"ki",
						ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
					СтрокаТЧ.Вставить("kitu", "");
					
					// Таможенная декларация (необязательное)
					Если ЗначениеЗаполнено(СтрокаТЧТовары.РегистрационныйНомерДекларации) Тогда
						СтрокаТЧ.Вставить("declaration_number", СтрокаТЧТовары.РегистрационныйНомерДекларации);
						СтрокаТЧ.Вставить("declaration_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДекларации));
					КонецЕсли;
					
					// Страна (необязательное)
					Если ЗначениеЗаполнено(СтрокаТЧТовары.СтранаПроизводстваКод) Тогда
						СтрокаТЧ.Вставить("country", СтрокаТЧТовары.СтранаПроизводстваКод);
					КонецЕсли;
					
					// Сертификация (необязательное)
					Если ЗначениеЗаполнено(СтрокаТЧТовары.ВидДокументаСертификации) Тогда
						СтрокаТЧ.Вставить("certificate_type",   ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(СтрокаТЧТовары.ВидДокументаСертификации));
						СтрокаТЧ.Вставить("certificate_number", СтрокаТЧТовары.НомерДокументаСертификации);
						СтрокаТЧ.Вставить("certificate_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДокументаСертификации));
					КонецЕсли;
					
				ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
					
					Если ЗначениеЗаполнено(СтрокаТЧМаркированныеТовары.Номенклатура) Тогда
						СообщитьОДубляхНоменклатуры(СообщениеJSON, ПараметрыОтбора);
					Иначе
						ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							СтрШаблон(НСтр("ru = 'В табличной части ""Товары"" дублируется GTIN %1.'"), ПараметрыОтбора.GTIN));
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаТЧМаркированныеТовары.Номенклатура) Тогда
						СообщитьОбОтсутствующейНоменклатуре(СообщениеJSON, ПараметрыОтбора)
					Иначе
						ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							СтрШаблон(НСтр("ru = 'В табличной части ""Товары"" не найден GTIN %1.'"), ПараметрыОтбора.GTIN));
					КонецЕсли;
					
				КонецЕсли;
				
				ТелоЗапроса.products_list.Добавить(СтрокаТЧ);
				
			КонецЦикла;
			
		// Загрузка данных отчета производственной линии недоступна
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля Тогда
			
			СведенияОКонтрагенте = Новый Структура();
			СведенияОКонтрагенте.Вставить("НалоговыйНомерВСтранеРегистрации", "");
			СведенияОКонтрагенте.Вставить("Наименование",                     "");
			
			ИнтеграцияИСПереопределяемый.ЗаполнитьСведенияОбОрганизации(
				Шапка.Контрагент,
				СведенияОКонтрагенте);
			
			ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);
			ПроверитьЗаполнениеНалоговогоНомера(СообщениеJSON, СведенияОКонтрагенте, Шапка);
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("trade_participant_inn",   РеквизитыОрганизации.ИНН);
			ТелоЗапроса.Вставить("import_date",             ИнтеграцияИС.ДатаUTC(Шапка.ДатаИмпорта));
			ТелоЗапроса.Вставить("exporter_name",           СведенияОКонтрагенте.Наименование);
			ТелоЗапроса.Вставить("primary_document_date",   ИнтеграцияИС.ДатаUTC(Шапка.ДатаПервичногоДокумента));
			ТелоЗапроса.Вставить("primary_document_number", Шапка.НомерПервичногоДокумента);
			ТелоЗапроса.Вставить("country_oksm",            КодСтраныЭкспортера(Шапка));
			ТелоЗапроса.Вставить("sender_tax_number",       СведенияОКонтрагенте.НалоговыйНомерВСтранеРегистрации);
			ТелоЗапроса.Вставить("products_list",           Новый Массив);
			
			Настройки = НастройкиДобавляемыхПолейСведенийОТоварах("products_list", "ki");
			Настройки.УказыватьСуммы                           = Истина;
			Настройки.УказыватьИдентификаторПроисхожденияВЕТИС = Истина;
			
			ЗаполнитьСведенияОТоварахПоШтрихкодамУпаковок(
				СообщениеJSON, ТелоЗапроса, РезультатПоиска, ПараметрыНормализацииПрочее, Шапка, Товары, Настройки);
			
		Иначе
			СообщитьОНеизвестнойОперации(СообщениеJSON, Шапка);
		КонецЕсли;
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ТребуетсяАгрегация",  ТребуетсяАгрегация);
		
		ТекстСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		
		СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Версия              = НомерВерсии;
		СообщениеJSON.ТребуетсяПодписание = Истина;
		СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
		
		СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		СообщениеJSON.Операция                  = Шапка.Операция;
		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
		СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	ИначеЕсли ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(Шапка.ВидПродукции)
		И (ОтчетыОбИспользовании.Найти(Шапка.Операция) <> Неопределено 
		Или ПередатьОтчетОНанесении)Тогда
		
		ОперацияНанесения = ?(ЗначениеЗаполнено(Шапка.ОперацияНанесения), Шапка.ОперацияНанесения, Шапка.Операция);
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Шапка.Операция, ДокументСсылка, НомерВерсии);
		
		РезультатОпределенияСУЗ = ИнтеграцияИСМПСлужебный.ОпределитьСтанциюУправленияЗаказами(
			СообщенияJSON, СообщениеJSON, Шапка, ДополнительныеПараметры);
		Если Не РезультатОпределенияСУЗ.Успешно Тогда
			Возврат СообщенияJSON;
		КонецЕсли;
		
		СтанцияУправленияЗаказами = РезультатОпределенияСУЗ.СтанцияУправленияЗаказами;
		
		Если Не Шапка.ОтчетПроизводственнойЛинии Тогда
			РезультатПоискаВПуле = ШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки(
				КодыМаркировки, "ПолныйКодМаркировки", ЭтоМолочнаяПродукция И Не Шапка.ОтчетПроизводственнойЛинии);
			ПолныеКодыМаркировки.Индексы.Добавить("КодМаркировки");
			ЗаполнитьПолныеКодыМаркировки(ПолныеКодыМаркировки, РезультатПоискаВПуле);
		КонецЕсли;
		
		ГруппыКодов = Новый Массив;
		Если Не ПроверитьИРазбитьНаГруппыПолныеКодыМаркировки(СообщенияJSON, СообщениеJSON, ГруппыКодов, ПолныеКодыМаркировки, КоличествоКодовВДокументе) Тогда
			Возврат СообщенияJSON;
		КонецЕсли;
		
		Если Шапка.ОтчетПроизводственнойЛинии И СоздаватьШтрихкодыУпаковок И ДеревоУпаковок.Строки.Количество() Тогда
			
			Если Не РассчитатьКоличествоВложенныхШтрихкодовПоДаннымДерева(ДеревоУпаковок, СообщениеJSON, СообщенияJSON) Тогда
				Возврат СообщенияJSON;
			КонецЕсли;
			
			НачатьТранзакцию();
			
			Попытка
				
				Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодыУпаковокПоДаннымДерева(ДеревоУпаковок);
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ИмяСобытияЖурналРегистрации = НСтр("ru = 'ГосИС: Запись штрихкодов упаковок при вводе в оборот'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
				
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					ПодробноеПредставлениеОшибки);
				СообщенияJSON.Добавить(СообщениеJSON);
				Возврат СообщенияJSON;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЭтоМолочнаяПродукция Тогда
			
			Если Шапка.ОтчетПроизводственнойЛинии Тогда
				Если Шапка.СкоропортящаясяПродукцияВЕТИС Тогда
					ИмяПараметраГоденДо = "expDate72";
					ФорматДаты          = "ДФ=yyMMddHHmm";
				Иначе
					ИмяПараметраГоденДо = "expDate";
					ФорматДаты          = "ДФ=yyMMdd";
				КонецЕсли;
				ГоденДоСтрокой = Формат(Шапка.СрокГодности, ФорматДаты);
				Для Каждого ДанныеСообщения Из ГруппыКодов Цикл
					ДанныеСообщения.Вставить("ПараметрГоденДо", ИмяПараметраГоденДо);
					ДанныеСообщения.Вставить("ГоденДо",         ГоденДоСтрокой);
				КонецЦикла;
			Иначе
				
				ИдентификаторыВЕТИС = РезультатПоискаВПуле.ВыгрузитьКолонку("ИдентификаторПроисхожденияВЕТИС");
				ДанныеПоИдентификаторам = ИнтеграцияИСМПВЕТИС.ДанныеИдентификаторовПроисхождения(ИдентификаторыВЕТИС);
				
				Для Каждого ДанныеСообщения Из ГруппыКодов Цикл
					ДанныеПоИдентификатору = ДанныеПоИдентификаторам.Получить(ДанныеСообщения.КлючИдентификаторПроисхожденияВЕТИС);
					ИмяПараметраГоденДо = "expDate";
					ФорматДаты          = "ДФ=yyMMdd";
					Если ДанныеПоИдентификатору <> Неопределено
						И ДанныеПоИдентификатору.Скоропортящаяся Тогда
						ИмяПараметраГоденДо = "expDate72";
						ФорматДаты          = "ДФ=yyMMddHHmm";
					КонецЕсли;
					ГоденДоСтрокой = Формат(ДанныеСообщения.КлючГоденДо, ФорматДаты);
					ДанныеСообщения.Вставить("ПараметрГоденДо", ИмяПараметраГоденДо);
					ДанныеСообщения.Вставить("ГоденДо",         ГоденДоСтрокой);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ТребуетсяАгрегация", ТребуетсяАгрегация);
		ПараметрыЗапроса.Вставить("ОперацияДокумента",  ОперацияНанесения);
		
		Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ
			Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС
			Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
			Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика Тогда
			ПараметрыЗапроса.Вставить("ТребуетсяВводВОборот", Истина);
		КонецЕсли;
		
		АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса;
		
		АбстрактноеСообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		АбстрактноеСообщениеJSON.Организация               = Шапка.Организация;
		АбстрактноеСообщениеJSON.Документ                  = ДокументСсылка;
		АбстрактноеСообщениеJSON.ДокументОснование         = Шапка.ДокументОснование;
		АбстрактноеСообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		АбстрактноеСообщениеJSON.Операция                  = АбстрактнаяОперация;
		АбстрактноеСообщениеJSON.Версия                    = НомерВерсии;
		АбстрактноеСообщениеJSON.ПараметрыЗапроса          = ПараметрыЗапроса;
		АбстрактноеСообщениеJSON.ИдентификаторЗаявки       = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
		АбстрактноеСообщениеJSON.Идентификатор             = СокрЛП(Новый УникальныйИдентификатор());
		АбстрактноеСообщениеJSON.ТипСообщения              = Перечисления.ТипыЗапросовИС.Исходящий;
		АбстрактноеСообщениеJSON.ТребуетсяПодписание       = Ложь;
		АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
		АбстрактноеСообщениеJSON.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.Описание   = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			АбстрактнаяОперация, ДокументСсылка, НомерВерсии);
		
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		
		Для Каждого ДанныеСообщения Из ГруппыКодов Цикл
			
			ТелоЗапроса = Новый Структура;
			
			// Обязательные реквизиты
			ТелоЗапроса.Вставить("usageType", ИнтерфейсСУЗСлужебный.ВидОтчетаОбИспользованииКодовМаркировки(ОперацияНанесения));
			ТелоЗапроса.Вставить("sntins",    ДанныеСообщения.ГруппаКодов);
			// Необязательные реквизиты
			ТелоЗапроса.Вставить("productionLineId", Шапка.ИдентификаторПроизводственнойЛинии);
			Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственногоЗаказа) Тогда
				ТелоЗапроса.Вставить("productionOrderId", Шапка.ИдентификаторПроизводственногоЗаказа);
			КонецЕсли;
			
			Если ЭтоМолочнаяПродукция Тогда
				ТелоЗапроса.Вставить("cisType", "UNIT");
				ТелоЗапроса.Вставить(ДанныеСообщения.ПараметрГоденДо, ДанныеСообщения.ГоденДо);
			КонецЕсли;
			
			ТекстСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
			
			КодыМаркировки = Новый Массив;
			Если ДанныеСообщения.ГруппаКодов.Количество() Тогда
				КодыМаркировки.Добавить(ДанныеСообщения.ГруппаКодов[0]);
			КонецЕсли;
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("КодыМаркировкиДляКонтроляСтатусов", КодыМаркировки);
			ПараметрыЗапроса.Вставить("ДопустимыеНачальныеСтатусыКодовОтчетОНанесении", ШтрихкодированиеИС.ДопустимыеНачальныеСтатусыОтчетОНанесении(Шапка.ВидПродукции));
			ПараметрыЗапроса.Вставить("ОжидаемыеСтатусыКодовПослеПередачиОтчетаОНанесении", ШтрихкодированиеИС.ОжидаемыеСтатусыПослеПередачиОтчетаОНанесении(Шапка.ВидПродукции));

			СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			СообщениеJSON.Организация       = Шапка.Организация;
			СообщениеJSON.Документ          = ДокументСсылка;
			СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
			
			СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
				ОперацияНанесения, ДокументСсылка, НомерВерсии);
			
			СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
			СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
			СообщениеJSON.Версия              = НомерВерсии;
			СообщениеJSON.ТребуетсяПодписание = Ложь;
			СообщениеJSON.ЗагружатьДо         = АбстрактноеСообщениеJSON.Идентификатор;
			СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
			
			СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
			СообщениеJSON.Операция                  = ОперацияНанесения;
			СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
			СообщениеJSON.ФорматОбмена              = Перечисления.ВерсииФорматаОбменаСУЗ.V2;
			СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
			СообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
		КонецЦикла;
		
	Иначе
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Неизвестный вид продукции для маркировки товаров: ""%1"".'"),
					Шапка.ВидПродукции));
	КонецЕсли;
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для агрегации КМ
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИСМП.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция АгрегацияJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция = Перечисления.ВидыОперацийИСМП.Агрегация;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И ИСМППрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.Агрегация)
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.Операция     КАК Операция,
	|	Шапка.ВидПродукции КАК ВидПродукции,
	|	// Табачная продукция
	|	Шапка.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа,
	|	Шапка.ИдентификаторПроизводственнойЛинии   КАК ИдентификаторПроизводственнойЛинии,
	|	Шапка.ОтчетПроизводственнойЛинии           КАК ОтчетПроизводственнойЛинии,
	|	Шапка.ПроизводственныйОбъект               КАК ПроизводственныйОбъект,
	|	Шапка.ПроверятьСоставУпаковокПоДаннымИСМП  КАК ПроверятьСоставУпаковокПоДаннымИСМП,
	|	
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|
	|	Шапка.ВариантЗаполненияДекларации КАК ВариантЗаполненияДекларации
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки                КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"ШтрихкодыУпаковок");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеОтчета.ЗначениеШтрихкода         КАК ЗначениеШтрихкода,
	|	ДанныеОтчета.ЗначениеШтрихкодаУпаковки КАК ЗначениеШтрихкодаУпаковки,
	|	ДанныеОтчета.ФорматBase64              КАК ФорматBase64,
	|	
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкода         КАК НормализованноеЗначениеШтрихкода,
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкодаУпаковки КАК НормализованноеЗначениеШтрихкодаУпаковки
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеОтчета
	|ГДЕ
	|	ДанныеОтчета.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"ДанныеОтчетаПроизводственнойЛинии");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	//@skip-warning
	ДанныеОтчета      = РезультатЗапроса["ДанныеОтчетаПроизводственнойЛинии"].Выгрузить();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	ВидПродукцииИспользуетОтчетыОНанесении = ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(Шапка.ВидПродукции);
	
	Если ВидПродукцииИспользуетОтчетыОНанесении
		И Шапка.Операция <> Перечисления.ВидыОперацийИСМП.Агрегация Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка, НомерВерсии);
		
		РезультатОпределенияСУЗ = ИнтеграцияИСМПСлужебный.ОпределитьСтанциюУправленияЗаказами(
			СообщенияJSON, СообщениеJSON, Шапка, ДополнительныеПараметры);
		Если Не РезультатОпределенияСУЗ.Успешно Тогда
			Возврат СообщенияJSON;
		КонецЕсли;
		
		СтанцияУправленияЗаказами = РезультатОпределенияСУЗ.СтанцияУправленияЗаказами;
		
		ДанныеШапки           = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(ДокументСсылка);
		ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ДанныеШапки, Неопределено, Шапка.ВидПродукции);
		
		Если Шапка.ОтчетПроизводственнойЛинии Тогда
			
			ДеревоУпаковок = ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок();
			
			СоответствиеСтрокДереваУпаковок = Новый Соответствие;
			КешДанныхРазбора                = Новый Соответствие;
			НастройкиРазбораКодаМаркировки  = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(Шапка.ВидПродукции);
			ПроверятьАлфавитКодовМаркировки = Ложь;
			ЭтоПродукцияМОТП                = ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(Шапка.ВидПродукции);
			
			Штрихкоды = Новый Массив;
			Для Каждого СтрокаДанныхОтчета Из ДанныеОтчета Цикл
				Штрихкоды.Добавить(
					Новый Структура(
						"Штрихкод, ШтрихкодУпаковки",
						СтрокаДанныхОтчета.НормализованноеЗначениеШтрихкода, СтрокаДанныхОтчета.НормализованноеЗначениеШтрихкодаУпаковки));
			КонецЦикла;
			
			ГрупповаяОбработкаШтрихкодовИС.ДополнитьУпорядочитьДанныеТСД(Штрихкоды);
			
			Для Каждого СтрокаДанныхОтчета Из Штрихкоды Цикл
			
				ДанныеРазбораШтрихкода = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкода(
					СтрокаДанныхОтчета.Штрихкод, Шапка.ВидПродукции, КешДанныхРазбора,
					НастройкиРазбораКодаМаркировки, ПроверятьАлфавитКодовМаркировки);
				
				ДанныеРазбораИПримечание = КешДанныхРазбора[СтрокаДанныхОтчета.Штрихкод];
				Если ДанныеРазбораИПримечание = Неопределено Тогда
					ВызватьИсключение НСтр("ru = 'Внутренняя ошибка разбора кодов маркировки'");
				КонецЕсли;
				
				ВозможнаГрупповаяУпаковка = ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковка(
					ДанныеРазбораШтрихкода.ВидУпаковки,
					ДанныеРазбораИПримечание.ДанныеРазбора);
				
				Если (Не ЗначениеЗаполнено(ДанныеРазбораШтрихкода.ВидУпаковки) И Не ВозможнаГрупповаяУпаковка)
					Или (ДанныеРазбораИПримечание.ПримечаниеКРазборуШтрихкода <> Неопределено
						И ЗначениеЗаполнено(ДанныеРазбораИПримечание.ПримечаниеКРазборуШтрихкода.ТекстОшибки)) Тогда
					СообщитьОНеправильномФорматеОтчета(СообщениеJSON);
					СообщенияJSON.Добавить(СообщениеJSON);
					Возврат СообщенияJSON;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанныхОтчета.ШтрихкодУпаковки) Тогда
					
					ДанныеРазбораШтрихкодаУпаковки = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкода(
						СтрокаДанныхОтчета.ШтрихкодУпаковки, Шапка.ВидПродукции, КешДанныхРазбора,
						НастройкиРазбораКодаМаркировки, ПроверятьАлфавитКодовМаркировки);
					
					Если ДанныеРазбораШтрихкодаУпаковки <> Неопределено
						И ЗначениеЗаполнено(ДанныеРазбораШтрихкодаУпаковки.НормализованныйШтрихкод) Тогда
						СтрокаДереваВерхнегоУровня = СоответствиеСтрокДереваУпаковок[ДанныеРазбораШтрихкодаУпаковки.НормализованныйШтрихкод];
						Если СтрокаДереваВерхнегоУровня = Неопределено Тогда
							СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
						КонецЕсли;
					Иначе
						СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
					КонецЕсли;
					
				Иначе
					
					СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
					
				КонецЕсли;
				
				СтрокаДерева = СтрокаДереваВерхнегоУровня.Строки.Добавить();
				
				ДанныеРазбораИПримечание = КешДанныхРазбора[СтрокаДанныхОтчета.Штрихкод];
				ДанныеРазбора = ДанныеРазбораИПримечание.ДанныеРазбора;
				
				// Заполнение GTIN и EAN
				Если ДанныеРазбора.СоставКодаМаркировки <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДерева, ДанныеРазбора.СоставКодаМаркировки);
				КонецЕсли;
				
				СтрокаДерева.Штрихкод             = ДанныеРазбора.НормализованныйКодМаркировки;
				СтрокаДерева.ТипШтрихкода         = ДанныеРазбора.ТипШтрихкода;
				СтрокаДерева.ВидУпаковки          = ДанныеРазбора.ВидУпаковки;
				СтрокаДерева.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
				СтрокаДерева.ВидПродукции         = Шапка.ВидПродукции;
				СтрокаДерева.ДанныеРазбора        = ДанныеРазбора;
				
				Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
					СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
				ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
					СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
				ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
					И ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
					СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
				Иначе
					СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
				КонецЕсли;
				
				СтрокаДерева.НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
				
				Если ЭтоПродукцияМОТП Тогда
					ШтрихкодированиеМОТП.РассчитатьХэшСуммуНормализации(
						СтрокаДерева,
						СтрокаДерева.ДанныеРазбора);
				КонецЕсли;
				
				СоответствиеСтрокДереваУпаковок.Вставить(ДанныеРазбораШтрихкода.НормализованныйШтрихкод, СтрокаДерева);
				
			КонецЦикла;
			
			ДобавленныеСтроки  = Новый Массив;
			ДанныеПоШтрихкодам = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам(Ложь);
			
			ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
				ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ДеревоУпаковок, ДобавленныеСтроки, ПараметрыСканирования);
			
			ШтрихкодированиеИС.ЗаполнитьКоэффициентыВложенностиУпаковокПоШтрихкодамEAN(ДобавленныеСтроки, ПараметрыСканирования);
			ШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(ДобавленныеСтроки, Ложь);
			
			ПараметрыПроверки = ИнтеграцияИСМПСлужебный.ИнициализироватьПараметрыПроверкиАгрегатов();
			
			Если ЭтоПродукцияМОТП Тогда
				ДопустимыеВложенияАгрегатовПоВидамПродукции = ПроверкаИПодборПродукцииМОТПКлиентСервер.ДопустимыеВложенияАгрегатовПоВидамПродукции();
				Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
					ПараметрыПроверки.КонтролироватьСоставБлока = Истина;
				КонецЕсли;
			Иначе
				ДопустимыеВложенияАгрегатовПоВидамПродукции = ПроверкаИПодборПродукцииИСМПКлиентСервер.ДопустимыеВложенияАгрегатовПоВидамПродукции();
			КонецЕсли;
			ПараметрыПроверки.ПараметрыПроверкиИерархииАгрегатов       = ДопустимыеВложенияАгрегатовПоВидамПродукции.Получить(Шапка.ВидПродукции);
			ПараметрыПроверки.КонтролироватьДопустимуюИерархиюУпаковок = Истина;
			
			Если ПараметрыПроверки.ПараметрыПроверкиИерархииАгрегатов <> Неопределено Тогда
				РезультатПроверки = ПроверитьИерархиюДереваУпаковок(ДеревоУпаковок, ПараметрыПроверки);
				Если РезультатПроверки.ЕстьОшибки Тогда
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(НСтр("ru = 'Некорректный формат данных отчета производственной линии:
						                      |%1,'"), РезультатПроверки.ТекстОшибки));
					СообщенияJSON.Добавить(СообщениеJSON);
					Возврат СообщенияJSON;
				КонецЕсли;
			КонецЕсли;
			
			РезультатПоиска = Новый Структура(
				"ДеревоУпаковок", ДеревоУпаковок);
			
		Иначе
			
			ЗаполнитьСведенияПоШтрихкодамEAN = Ложь;
			Если ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(Шапка.ВидПродукции) Тогда
				
				// В отчете об агрегации для табачной продукции необходимо передавать емкость упаковки по данным GTIN
				// Как правило емкость блока - 10 пачек,
				// Емкость короба - 50 блоков.
				// Данные о емкости хранятся в учетной системе в виде коэффициентов упаковок (если реализовано)
				// и в служебном регистре сведений ОписаниеGTINИС
				
				// В отчете об агрегации для молочной продукции необходимо использовать сведения о емкости упаковки по данным GTIN
				// Данные о емкости хранятся в учетной системе в виде коэффициентов упаковок (если реализовано)
				// и в служебном регистре сведений ОписаниеGTINИС.
				// В случае частичного заполнения агрегата в полях «aggregationUnitCapacity»
				// и «aggregatedItemsCount» необходимо передавать значение 1.
				
				ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП = Ложь;
				ЗаполнитьСведенияПоШтрихкодамEAN                   = Истина;
				
			КонецЕсли;
			
			РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
				ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
				ПараметрыСканирования, ЗаполнитьСведенияПоШтрихкодамEAN, Истина);
			
		КонецЕсли;
		
		ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);
		
		ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
		ПараметрыНормализацииКМ.НачинаетсяСоСкобки       = Ложь;
		ПараметрыНормализацииКМ.ВключатьМРЦ              = Ложь;
		ПараметрыНормализацииКМ.ВключатьСрокГодности     = Истина;
		ПараметрыНормализацииКМ.ИмяСвойстваКодМаркировки = "Штрихкод";
		
		ПакетКодов = Новый Массив;
		КоличествоКодовВДокументе = 25000;
		
		ЗаполнениеДанныхОбАгрегацииВСУЗ(
			РезультатПоиска.ДеревоУпаковок,
			ПакетКодов,
			Шапка.ВидПродукции,
			ПараметрыНормализацииКМ,
			КоличествоКодовВДокументе);
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ОперацияДокумента",  Шапка.Операция);
		
		АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса;
		
		АбстрактноеСообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		АбстрактноеСообщениеJSON.Организация               = Шапка.Организация;
		АбстрактноеСообщениеJSON.Документ                  = ДокументСсылка;
		АбстрактноеСообщениеJSON.ДокументОснование         = Шапка.ДокументОснование;
		АбстрактноеСообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		АбстрактноеСообщениеJSON.Операция                  = АбстрактнаяОперация;
		АбстрактноеСообщениеJSON.Версия                    = НомерВерсии;
		АбстрактноеСообщениеJSON.ПараметрыЗапроса          = ПараметрыЗапроса;
		АбстрактноеСообщениеJSON.ИдентификаторЗаявки       = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
		АбстрактноеСообщениеJSON.Идентификатор             = СокрЛП(Новый УникальныйИдентификатор());
		АбстрактноеСообщениеJSON.ТипСообщения              = Перечисления.ТипыЗапросовИС.Исходящий;
		АбстрактноеСообщениеJSON.ТребуетсяПодписание       = Ложь;
		АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
		АбстрактноеСообщениеJSON.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.Описание   = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			АбстрактнаяОперация, ДокументСсылка, НомерВерсии);
		
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		
		Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка, НомерВерсии);
		
		Для Каждого ДанныеОбАгрегации Из ПакетКодов Цикл
			ТелоЗапроса = Новый Структура;
			
			// Обязательные реквизиты
			ТелоЗапроса.Вставить("participantId",    РеквизитыОрганизации.ИНН);
			ТелоЗапроса.Вставить("aggregationUnits", ДанныеОбАгрегации);
			
			// Необязательные реквизиты
			ТелоЗапроса.Вставить("productionLineId",  Шапка.ИдентификаторПроизводственнойЛинии);
			Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственногоЗаказа) Тогда
				ТелоЗапроса.Вставить("productionOrderId",  Шапка.ИдентификаторПроизводственногоЗаказа);
			КонецЕсли;
			
			ТекстСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		
			СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			
			СообщениеJSON.Организация       = Шапка.Организация;
			СообщениеJSON.Документ          = ДокументСсылка;
			СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
			
			СообщениеJSON.Описание = Описание;
			
			СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
			СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
			СообщениеJSON.Версия              = НомерВерсии;
			СообщениеJSON.ТребуетсяПодписание = Ложь;
			
			СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
			СообщениеJSON.Операция                  = Операция;
			СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
			СообщениеJSON.ФорматОбмена              = Перечисления.ВерсииФорматаОбменаСУЗ.V2;
			СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
			СообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
			СообщениеJSON.ЗагружатьДо               = АбстрактноеСообщениеJSON.Идентификатор;
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("КонтролироватьСтатусДокументаАгрегацияИСМП", Истина);
			
			СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
			СообщенияJSON.Добавить(СообщениеJSON);
			
		КонецЦикла;
		
	Иначе
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка, НомерВерсии);
		
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Версия              = НомерВерсии;
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ОрганизацияИНН", РеквизитыОрганизации.ИНН);
		
		ПараметрыЗапроса.Вставить("ПроверятьСоставУпаковокПоДаннымИСМП", Шапка.ПроверятьСоставУпаковокПоДаннымИСМП);
		
		СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
		
		СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		СообщениеJSON.Операция                  = Операция;
		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
		СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	КонецЕсли;
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для формирования АТК
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИСМП.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ФормированиеАТКJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция = Перечисления.ВидыОперацийИСМП.Агрегация;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И ИСМППрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.АТК)
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.Операция     КАК Операция,
	|	Шапка.ВидПродукции КАК ВидПродукции,
	|	
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки                КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	//@skip-warning
	
	Если Не Шапка.Следующий() Или ШтрихкодыУпаковок.Количество() = 0 Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	
	Операция = Перечисления.ВидыОперацийИСМП.АТК;
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = НомерВерсии;
	СообщениеJSON.ТребуетсяПодписание = Ложь;
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ОрганизацияИНН", РеквизитыОрганизации.ИНН);
	ПараметрыЗапроса.Вставить("ФормированиеАТК", Истина);
	СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
	
	СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
	СообщениеJSON.Операция                  = Операция;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

Процедура ЗаполнениеДанныхОбАгрегацииВСУЗ(СтрокаДерева, ГруппаКодов, ВидПродукции, ПараметрыНормализацииКМ, КоличествоКодовВДокументе, ПараметрыОбработки = Неопределено)
	
	Если ТипЗнч(СтрокаДерева) <> Тип("ДеревоЗначений") Тогда
		КодМаркировкиУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			СтрокаДерева, ВидПродукции, ПараметрыНормализацииКМ);
	Иначе
		
		КодМаркировкиУпаковки = Неопределено;
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("КоличествоВТекущейГруппе", 0);
		ПараметрыОбработки.Вставить("ТекущийПакетКодов", Новый Массив);
		
		КоличествоВТекущейГруппе = 0;
		ПакетКодовВерхнегоУровня = Новый Массив;
		
	КонецЕсли;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		
		Если КодМаркировкиУпаковки <> Неопределено Тогда
			ВложенныеКоды = Новый Массив;
		КонецЕсли;
		
		КоэффициентВложенныхЕдиниц = Неопределено;
		Для Каждого СтрокаДереваВложенная Из СтрокаДерева.Строки Цикл
			
			Если КоэффициентВложенныхЕдиниц = Неопределено Тогда
				КоэффициентВложенныхЕдиниц = СтрокаДереваВложенная.Коэффициент;
			ИначеЕсли КоэффициентВложенныхЕдиниц <> СтрокаДереваВложенная.Коэффициент Тогда
				// В упаковке содержится разная продукция
				КоэффициентВложенныхЕдиниц = 0;
			КонецЕсли;
			
			Если КодМаркировкиУпаковки <> Неопределено Тогда
				КодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					СтрокаДереваВложенная, ВидПродукции, ПараметрыНормализацииКМ);
				ВложенныеКоды.Добавить(КодМаркировки);
			КонецЕсли;
			
			ЗаполнениеДанныхОбАгрегацииВСУЗ(
				СтрокаДереваВложенная,
				ГруппаКодов,
				ВидПродукции,
				ПараметрыНормализацииКМ,
				КоличествоКодовВДокументе,
				ПараметрыОбработки);
			
			Если КодМаркировкиУпаковки = Неопределено Тогда
				Если КоличествоВТекущейГруппе + ПараметрыОбработки.КоличествоВТекущейГруппе > КоличествоКодовВДокументе Тогда
					Если ПакетКодовВерхнегоУровня.Количество() Тогда 
						ГруппаКодов.Добавить(ПакетКодовВерхнегоУровня);
						ПакетКодовВерхнегоУровня = Новый Массив;
					КонецЕсли;
					КоличествоВТекущейГруппе = 0;
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПакетКодовВерхнегоУровня, ПараметрыОбработки.ТекущийПакетКодов);
				КоличествоВТекущейГруппе = КоличествоВТекущейГруппе + ПараметрыОбработки.КоличествоВТекущейГруппе;
				ПараметрыОбработки.ТекущийПакетКодов = Новый Массив;
				ПараметрыОбработки.КоличествоВТекущейГруппе = 0;
			КонецЕсли;
		КонецЦикла;
		
		Если КодМаркировкиУпаковки = Неопределено И ПакетКодовВерхнегоУровня.Количество() Тогда
			ГруппаКодов.Добавить(ПакетКодовВерхнегоУровня);
		КонецЕсли;
			
		Если КодМаркировкиУпаковки <> Неопределено
			И ВложенныеКоды.Количество() > 0 Тогда
			
			ЕмкостьУпаковки = 0;
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
				
				ФактическоеКоличествоВложенныхЕдиниц = ВложенныеКоды.Количество();
				Если КоэффициентВложенныхЕдиниц <> Неопределено
					И КоэффициентВложенныхЕдиниц > 1 Тогда
					ЕмкостьУпаковки = СтрокаДерева.Коэффициент / КоэффициентВложенныхЕдиниц;
				ИначеЕсли КоэффициентВложенныхЕдиниц = 1 И СтрокаДерева.Коэффициент > 0 Тогда
					ЕмкостьУпаковки = СтрокаДерева.Коэффициент;
				Иначе
					ЕмкостьУпаковки = ФактическоеКоличествоВложенныхЕдиниц;
				КонецЕсли;
				Если ЕмкостьУпаковки = 0 Тогда
					ЕмкостьУпаковки = ФактическоеКоличествоВложенныхЕдиниц;
				КонецЕсли;
				
			Иначе
				ФактическоеКоличествоВложенныхЕдиниц = ВложенныеКоды.Количество();
			КонецЕсли;
			
			Если ЕмкостьУпаковки < ФактическоеКоличествоВложенныхЕдиниц Тогда
				ЕмкостьУпаковки = ФактическоеКоличествоВложенныхЕдиниц;
			КонецЕсли;
			
			ПараметрыОбработки.КоличествоВТекущейГруппе = ПараметрыОбработки.КоличествоВТекущейГруппе + ФактическоеКоличествоВложенныхЕдиниц;
			
			ДанныеОбАгрегации = Новый Структура;
			// На линии находится счетчик пачек и сканер, отсканированы могут быть не все пачки блока.
			// Поле заполняется емкостью упаковки, если количество sntins отличается от aggregatedItemsCount - расчитывается количество
			// серых пачек внутри агрегата в методах true-api
			ДанныеОбАгрегации.Вставить("aggregatedItemsCount",    ЕмкостьУпаковки);
			ДанныеОбАгрегации.Вставить("aggregationType",         "AGGREGATION");
			ДанныеОбАгрегации.Вставить("aggregationUnitCapacity", ЕмкостьУпаковки);
			ДанныеОбАгрегации.Вставить("sntins",                  ВложенныеКоды);
			ДанныеОбАгрегации.Вставить("unitSerialNumber",        КодМаркировкиУпаковки);
			
			ПараметрыОбработки.ТекущийПакетКодов.Добавить(ДанныеОбАгрегации);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьИерархиюДереваУпаковок(ДеревоУпаковок, ПараметрыПроверки)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	
	МассивОшибок = Новый Массив;
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		РезультатПроверки = ПроверитьИерархиюУпаковки(СтрокаДерева, ПараметрыПроверки);
		Если РезультатПроверки.ЕстьОшибки Тогда
			Результат.ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОшибок, РезультатПроверки.НайденныеОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Результат.ЕстьОшибки Тогда
		Результат.ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьИерархиюУпаковки(СтрокаДерева, ПараметрыПроверки)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("НайденныеОшибки", Новый Массив);
	
	Для Каждого ПодчиненнаяСтрокаДерева Из СтрокаДерева.Строки Цикл
		
		ТекстОшибки = ИнтеграцияИСМПСлужебный.ВыполнитьКонтрольДопустимойИерархииУпаковки(СтрокаДерева, ПодчиненнаяСтрокаДерева, ПараметрыПроверки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Результат.НайденныеОшибки.Добавить(ТекстОшибки);
		КонецЕсли;
		
		Если ПодчиненнаяСтрокаДерева.Строки.Количество() Тогда
			РезультатПроверки = ПроверитьИерархиюУпаковки(ПодчиненнаяСтрокаДерева, ПараметрыПроверки);
			Если РезультатПроверки.ЕстьОшибки Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.НайденныеОшибки, РезультатПроверки.НайденныеОшибки);
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Если Результат.НайденныеОшибки.Количество() Тогда
		Результат.ЕстьОшибки = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.МаркировкаТоваровИСМП);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект	 - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Структура - параметры указания серий См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.МаркировкаТоваровИСМП, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - Структура - параметры указания серий
//    См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.МаркировкаТоваровИСМП, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область ОбработкаКодовМаркировки

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Результат, Форма, ДанныеШтрихкода, ВложенныеШтрихкоды);
	Иначе
		
		ПараметрыЗаполнения = ПараметрыЗаполнения();
		
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
			
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыЗаполнения);
			
		КонецЕсли;
		
		Результат.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
		Результат.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(РезультатОбработки, Форма, ДанныеШтрихкода, ВложенныеШтрихкоды)
	
	ПараметрыЗаполнения = ПараметрыЗаполнения();
	
	ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
КонецПроцедуры

Функция ПараметрыЗаполнения()
	
	Результат = Новый Структура;
	Результат.Вставить("ИзмененныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеШтрихкоды", Новый Массив);
	Результат.Вставить("РодительскийШтрихкод");
	Результат.Вставить("ШтрихкодУточнения");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ДеревоУпаковок, ПараметрыЗаполнения,
	УпаковкаВерхнегоУровня = Неопределено, УпаковкаУточнения = Неопределено)
	
	ЭтоМолочнаяПродукция = ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Форма.Объект.ВидПродукции);
	ДополнительныеПоля = Новый Структура("ИдентификаторПроисхожденияВЕТИС,ГоденДо");
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		Если ЭтоМолочнаяПродукция Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПоля, СтрокаДерева);
		
			Если УпаковкаУточнения = Неопределено
				И (ЗначениеЗаполнено(ДополнительныеПоля.ИдентификаторПроисхожденияВЕТИС)
					Или ЗначениеЗаполнено(ДополнительныеПоля.ГоденДо)) Тогда
				УпаковкаУточненияСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
			Иначе
				УпаковкаУточненияСтрокиДерева = УпаковкаУточнения;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ПараметрыЗаполнения.РодительскийШтрихкод = УпаковкаВерхнегоУровня;
			ПараметрыЗаполнения.ШтрихкодУточнения = УпаковкаУточненияСтрокиДерева;
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, СтрокаДерева, ПараметрыЗаполнения);
			
		Иначе
			
			ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, СтрокаДерева, ПараметрыЗаполнения,
				УпаковкаВерхнегоУровняСтрокиДерева, УпаковкаУточненияСтрокиДерева);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыЗаполнения)
	
	ИсточникДанных = Форма.Объект;
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Тогда
		КоличествоМаркируемыхЕдиниц = ДанныеШтрихкода.КоличествоПачек;
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции) Тогда
		КоличествоМаркируемыхЕдиниц = ДанныеШтрихкода.КоличествоВложенныхЕдиниц;
	КонецЕсли;

	ОбработкаБезМаркировки = ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
		И ДанныеШтрихкода.Свойство("ОбработатьБезМаркировки")
		И ДанныеШтрихкода.ОбработатьБезМаркировки;
	
	ВидПродукции = Форма.Объект.ВидПродукции;
	Операция = Форма.Объект.Операция;
	ТребуетсяСрокГодности = ЗначениеЗаполнено(Форма.Объект.ОперацияНанесения)
		Или ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Операция)<>Неопределено;
	
	СпецификаОбработки = "ДоступныКодыМаркировкиОстатков";
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС
			И ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Операция).ТребуетсяЗаполнениеИдентификаторовПримененияВЕТИС Тогда
		Если ТребуетсяСрокГодности Тогда
			СпецификаОбработки = "СрокГодностиВЕТИС";
		Иначе
			СпецификаОбработки = "ВЕТИС";
		КонецЕсли;
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции) И ТребуетсяСрокГодности Тогда
		СпецификаОбработки = "СрокГодности";
	КонецЕсли;
	
	ОбновляемаяСтрока = ПроверкаИПодборПродукцииИС.ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкода, СпецификаОбработки);
	ОбновляемаяСтрока.Количество = КоличествоМаркируемыхЕдиниц;
	
	Если ПараметрыЗаполнения.РодительскийШтрихкод <> Неопределено Тогда
		ОбновляемаяСтрока.ШтрихкодУпаковки = ПараметрыЗаполнения.РодительскийШтрихкод;
	КонецЕсли;
	
	Если СпецификаОбработки <> "ДоступныКодыМаркировкиОстатков" Тогда;
		ОбновляемаяСтрока.ШтрихкодОднороднойУпаковки = ?(ПараметрыЗаполнения.ШтрихкодУточнения = Неопределено, 
			ДанныеШтрихкода.ШтрихкодУпаковки, ПараметрыЗаполнения.ШтрихкодУточнения);
	КонецЕсли;
	
	ПараметрыПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(
		Истина,
		Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура),
		Истина);
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ОбновляемаяСтрока);
	
	НайденныеСтрокиТовары = ИсточникДанных.Товары.НайтиСтроки(ПараметрыПоиска);
	ТребуетсяРаспределениеСНезаполненныхСтрок = Истина;
	
	Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
		КоличествоМаркируемойПродукции = ОбновляемаяСтрока.Количество;
		
		ВсегоПоПараметрамПоиска = 0;
		Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТовары Цикл
			ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.Количество;
		КонецЦикла;
		
		ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока);
		
		Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
			КоличествоМаркируемойПродукции = Макс(0, КоличествоМаркируемойПродукции + ВсегоВКеше - ВсегоПоПараметрамПоиска);
		КонецЕсли;
		
		Если КоличествоМаркируемойПродукции > 0 Тогда
			
			СтрокаТовары = НайденныеСтрокиТовары[0];
			СтрокаТовары.Количество = СтрокаТовары.Количество + КоличествоМаркируемойПродукции;
			СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок + КоличествоМаркируемойПродукции;
			
			ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки.Найти(СтрокаТовары);
			Если ДобавленныеСтроки = Неопределено Тогда
				ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТовары);
			КонецЕсли;
			
			ОбновляемаяСтрока.Количество = КоличествоМаркируемойПродукции;
			
		Иначе
			
			ТребуетсяРаспределениеСНезаполненныхСтрок = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаТовары = ИсточникДанных.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ОбновляемаяСтрока);
		СтрокаТовары.КоличествоУпаковок = СтрокаТовары.Количество;
		
		ПараметрыЗаполнения.ДобавленныеСтроки.Добавить(СтрокаТовары);
		
	КонецЕсли;
	
	Если Не ОбработкаБезМаркировки Тогда
		
		ПроверкаИПодборПродукцииИС.ДополнитьКешИТаблицуШтрихкодовУпаковок(Форма, ОбновляемаяСтрока, ПараметрыЗаполнения.ДобавленныеШтрихкоды);
		Если ТребуетсяРаспределениеСНезаполненныхСтрок Тогда
			ИзмененныеСтроки = ПроверкаИПодборПродукцииИС.РаспределитьНаНезаполненныеСтроки(Форма, ОбновляемаяСтрока);
			Для Каждого СтрокаТовары Из ИзмененныеСтроки Цикл
				ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТовары);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
		
		РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
			ИсточникДанных.Товары, ИсточникДанных.Организация, ИсточникДанных.ВидПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменИСМП

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, требующих ожидания пользователем
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ЗавершениеПроверкиИПодбораМаркируемойПродукции

// Отражает результаты проверки и подбора в документе, из которого была вызвана соответствующая форма.
//
// Параметры:
// 	ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборМОТП.ЗафиксироватьРезультатПроверкиИПодбора)
Процедура ОтразитьРезультатыПроверкиИПодбора(ПараметрыОкончанияПроверки) Экспорт
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
	ПустойСклад = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Склад");
	
	СтруктураДействийИзмененныхСтрок = Новый Структура;
	СтруктураДействийИзмененныхСтрок.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныхСтрок.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ПустойСклад, ПараметрыУказанияСерий));
	
	СтруктураДействийДобавленныхСтрок = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДействийИзмененныхСтрок, Ложь);
	//@skip-warning
	СтруктураДействийДобавленныхСтрок.Вставить("ЗаполнитьКодТНВЭД");
	
	СпецификаОперацииНанесения = ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ДокументОбъект.ВидПродукции);
	
	МассивОбработанныхСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции Цикл
		
		Если СтрокаТаблицы.КоличествоПодобрано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			СтрокаТаблицы.GTIN = Неопределено;
		КонецЕсли;
		
		ПараметрыОтбора = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Истина, Истина, СпецификаОперацииНанесения);
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТаблицы);
		
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТаблицы);
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				СтрокаТовары.GTIN = Неопределено;
			КонецЕсли;
		Иначе
			СтрокаТовары = НайденныеСтроки[0];
		КонецЕсли;
		
		Если МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			СтрокаТовары.Количество = СтрокаТаблицы.КоличествоПодобрано;
			МассивОбработанныхСтрок.Добавить(СтрокаТовары);
		Иначе
			СтрокаТовары.Количество = СтрокаТовары.Количество + СтрокаТаблицы.КоличествоПодобрано;
		КонецЕсли;
		
		ОбработатьСтрокуТабличнойЧасти(
			СтрокаТовары, ДокументОбъект,
			?(НайденныеСтроки.Количество(), СтруктураДействийИзмененныхСтрок, СтруктураДействийДобавленныхСтрок));
		
	КонецЦикла;
	
	// Удаление лишних строк документа.
	ИндексТабЧастиТовары = ДокументОбъект.Товары.Количество() - 1;
	Пока ИндексТабЧастиТовары >= 0 Цикл
		
		СтрокаТовары = ДокументОбъект.Товары[ИндексТабЧастиТовары];
		Если СтрокаТовары.Количество = 0
		 Или МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			
			ДокументОбъект.Товары.Удалить(СтрокаТовары);
			
		КонецЕсли;
		
		ИндексТабЧастиТовары = ИндексТабЧастиТовары - 1;
	КонецЦикла;
	
	ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураДействий)
	
	ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий);
	
КонецПроцедуры

Процедура ЗаполнитьМаркируемуюПродукциюДокумента(ТаблицаМаркируемойПродукции, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МаркировкаТоваровИСМПТовары.Номенклатура,
	|	МаркировкаТоваровИСМПТовары.Характеристика,
	|	МаркировкаТоваровИСМПТовары.Серия,
	|	МаркировкаТоваровИСМПТовары.Количество,
	|	МаркировкаТоваровИСМПТовары.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
	|	&Скоропортящаяся КАК Скоропортящаяся,
	|	МаркировкаТоваровИСМПТовары.СрокГодности КАК ГоденДо,
	|	МаркировкаТоваровИСМПТовары.GTIN
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК МаркировкаТоваровИСМПТовары
	|ГДЕ
	|	МаркировкаТоваровИСМПТовары.Ссылка = &ДокументСсылка";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ИнтеграцияИСМПВЕТИС.ДоработатьЗапросЗаполненияМаркируемойПродукцииДокументаМаркировка(Запрос);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Скоропортящаяся", "ЛОЖЬ");
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
		ДокументСсылка,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидПродукции"),
		ТаблицаМаркируемойПродукции);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриМаркировкеТоваровИСМП.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет<> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = Отчеты.КодыМаркировкиДляДекларацииИСМП.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет<> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.МаркировкаТоваровИСМП, Ограничение);

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СохранитьДанныеОтчетаПроизводственнойЛинии(ДокументСсылка, ДанныеОтчета)
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.ДанныеОтчетаПроизводственнойЛинии.Загрузить(ДанныеОтчета);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

Функция ТребуетсяАгрегация(ДокументСсылка, Реквизиты)
	
	ТребуетсяАгрегация = Ложь;
	
	Шапка = Новый Структура;
	Шапка.Вставить("Ссылка",       ДокументСсылка);
	Шапка.Вставить("ВидПродукции", Реквизиты.ВидПродукции);
	Шапка.Вставить("Организация",  Реквизиты.Организация);
	Шапка.Вставить("Контрагент",   Реквизиты.Контрагент);
	Шапка.Вставить("ДокументОснование",  Реквизиты.ДокументОснование);
	Шапка.Вставить("Операция",           Реквизиты.Операция);
	Шапка.Вставить("ОперацияНанесения",  Реквизиты.ОперацияНанесения);
	
	Если Реквизиты.ОтчетПроизводственнойЛинии Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Т.НормализованноеЗначениеШтрихкодаУпаковки
			|ИЗ
			|	Документ.МаркировкаТоваровИСМП.ДанныеОтчетаПроизводственнойЛинии КАК Т
			|ГДЕ
			|	Т.Ссылка = &Ссылка
			|	И Т.НормализованноеЗначениеШтрихкодаУпаковки <> """"");
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		ТребуетсяАгрегация = Не Запрос.Выполнить().Пустой();
		
	Иначе
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК Штрихкод
			|ИЗ
			|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
			|		ПО (ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.ШтрихкодУпаковки)
			|			И (ШтрихкодыУпаковок.Ссылка = &Ссылка)");
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		ТребуетсяАгрегация = Не Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	Возврат ТребуетсяАгрегация;
	
КонецФункции

Функция КодСтраныЭкспортера(ДанныеШапки)
	
	Если ДанныеШапки.СтранаЭкспортерКод = "398" Тогда // Временное исправление ошибки ИСМП
		Возврат "487";
	Иначе
		Возврат ДанныеШапки.СтранаЭкспортерКод;
	КонецЕсли;
	
КонецФункции

#Область Сообщения

#Область ПроверкиСообщений

Процедура ПроверитьЗаполнениеДатыПроизводства(ДатаПроизводства, СообщениеJSON)
	Если Не ЗначениеЗаполнено(ДатаПроизводства) Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'Не заполнено поле ""Дата производства""'"));
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеДанныхДекларации(СообщениеJSON, Шапка)
	Если Не ЗначениеЗаполнено(Шапка.РегистрационныйНомерДекларации) Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'Не заполнено поле ""Регистрационный номер декларации""'"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Шапка.ДатаДекларации) Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'Не заполнено поле ""Дата декларации""'"));
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеДанныхТаможенногоОргана(СообщениеJSON, Шапка)
	Если Не ЗначениеЗаполнено(Шапка.ПринятоеРешение) Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'Не заполнено поле ""Решение таможенного органа""'"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Шапка.КодТаможенногоОргана) Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'Не заполнено поле ""Код таможенного органа""'"));
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка)
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеНалоговогоНомера(СообщениеJSON, СведенияОКонтрагенте, Шапка)
	Если Не ЗначениеЗаполнено(СведенияОКонтрагенте.НалоговыйНомерВСтранеРегистрации) Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(
				НСтр("ru = 'Не заполнено поле ""Налоговый номер в стране регистрации"".
						   |Контрагент: %1'"), Шапка.Контрагент));
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеКодаТНВЭДШапки(СообщениеJSON, Шапка)
	Если Не Шапка.ОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Шапка.КодТНВЭД) Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'Не заполнено поле ""ТН ВЭД""'"));
	ИначеЕсли СтрДлина(Шапка.КодТНВЭД) <> 10 Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'Длина кода ТН ВЭД должна составлять 10 цифр.'"));
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеКодаТНВЭДНоменклатуры(СообщениеJSON, КодТНВЭД, Номенклатура)
	Если Не ЗначениеЗаполнено(КодТНВЭД) Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(НСтр("ru = 'Не заполнено поле ""ТН ВЭД"" для номенклатуры %1.'"), Номенклатура));
	ИначеЕсли СтрДлина(КодТНВЭД) <> 10 Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'Длина кода ТН ВЭД должна составлять 10 цифр.'"));
	КонецЕсли;
КонецПроцедуры

Процедура СообщитьОНезаполненномИдентификатореВЕТИС(СообщениеJSON)
	ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		СтрШаблон(НСтр("ru = 'Не заполнено поле ""%1"".'"), ИнтеграцияИСМПВЕТИСКлиентСервер.ИмяИдентификатораПроисхожденияВЕТИС()));
КонецПроцедуры

Процедура СообщитьОДубляхНоменклатуры(СообщениеJSON, ПараметрыОтбора)
	ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		СтрШаблон(
			НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.'"),
				ИнтеграцияИС.ПредставлениеНоменклатуры(
					ПараметрыОтбора.Номенклатура,
					ПараметрыОтбора.Характеристика,,
					ПараметрыОтбора.Серия)));
КонецПроцедуры

Процедура СообщитьОбОтсутствующейНоменклатуре(СообщениеJSON, ПараметрыОтбора)
	ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		СтрШаблон(
			НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.'"),
			ИнтеграцияИС.ПредставлениеНоменклатуры(
				ПараметрыОтбора.Номенклатура,
				ПараметрыОтбора.Характеристика,,
				ПараметрыОтбора.Серия)));
КонецПроцедуры

Процедура СообщитьОбОшибкеРазбораКода(СообщениеJSON, ПримечаниеКРезультатуРазбора, СтрокаТЧМаркированныеТовары)
	ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		СтрШаблон(
			НСтр("ru = 'Не удалось разобрать код маркировки %1:
				       |%2'"),
				СтрокаТЧМаркированныеТовары.Штрихкод,
				ПримечаниеКРезультатуРазбора.ТекстОшибки));
КонецПроцедуры

Процедура СообщитьОНеизвестнойОперации(СообщениеJSON, Шапка)
	ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		СтрШаблон(НСтр("ru = 'Неизвестная операция ввода в оборот: ""%1"".'"), Шапка.Операция));
КонецПроцедуры

Процедура СообщитьОНеправильномФорматеОтчета(СообщениеJSON)
	ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		НСтр("ru = 'Некорректный формат данных отчета производственной линии'"));
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСведенийПоШтрихкодамУпаковок

Процедура ЗаполнитьСведенияОТоварахПоШтрихкодамУпаковок(
	СообщениеJSON, ТелоЗапроса, ДанныеПоШтрихкодам, ПараметрыНормализацииШтрихкода, Шапка, Товары, Настройки = Неопределено)
	
	Если Настройки = Неопределено Тогда
		Настройки = НастройкиДобавляемыхПолейСведенийОТоварах();
	КонецЕсли;
	
	ТребуетсяНоменклатура = Настройки.ПроверятьИУказыватьКодТНВЭД
		Или Настройки.УказыватьСертификацию
		Или Настройки.УказыватьИнформациюОТоваре
		Или Настройки.УказыватьСуммы;
	
	Для Каждого СтрокаТЧМаркированныеТовары Из ДанныеПоШтрихкодам.МаркированныеТовары Цикл
		
		Если ТребуетсяНоменклатура Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура",   СтрокаТЧМаркированныеТовары.Номенклатура);
			Отбор.Вставить("Характеристика", СтрокаТЧМаркированныеТовары.Характеристика);
			Отбор.Вставить("Серия",          СтрокаТЧМаркированныеТовары.Серия);
			
			Если ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Шапка.ВидПродукции) Тогда
				Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
					Отбор.Вставить("ИдентификаторПроисхожденияВЕТИС", СтрокаТЧМаркированныеТовары.ИдентификаторПроисхожденияВЕТИС);
				КонецЕсли;
			КонецЕсли;
			
			НайденныеСтроки = Товары.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СообщитьОбОтсутствующейНоменклатуре(СообщениеJSON, Отбор);
				Продолжить;
			ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
				СообщитьОДубляхНоменклатуры(СообщениеJSON, Отбор);
				Продолжить;
			КонецЕсли;
			СтрокаТЧТовары = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаТЧ = Новый Структура;
		
		РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
			СтрокаТЧМаркированныеТовары.Штрихкод, Шапка.ВидПродукции, Ложь);
		
		СтрокаТЧ.Вставить(
			Настройки.ИмяРеквизитаКодМаркировки,
			ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииШтрихкода));
		
		Если Настройки.УказыватьТипУпаковки Тогда
			СтрокаТЧ.Вставить("packType", "UNIT");
		КонецЕсли;
		
		Если Настройки.ПроверятьИУказыватьКодТНВЭД Тогда
			КодТНВЭД = СокрЛП(СтрокаТЧТовары.КодТНВЭД);
			ПроверитьЗаполнениеКодаТНВЭДНоменклатуры(СообщениеJSON, КодТНВЭД, Отбор.Номенклатура);
			СтрокаТЧ.Вставить("tnved_code", КодТНВЭД);
		КонецЕсли;
		
		// Сертификация
		Если Настройки.УказыватьСертификацию
			И ЗначениеЗаполнено(СтрокаТЧТовары.ВидДокументаСертификации) Тогда
			СтрокаТЧ.Вставить("certificate_document",        ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(СтрокаТЧТовары.ВидДокументаСертификации));
			СтрокаТЧ.Вставить("certificate_document_number", СтрокаТЧТовары.НомерДокументаСертификации);
			СтрокаТЧ.Вставить("certificate_document_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДокументаСертификации));
		КонецЕсли;
		
		// Информация о товаре
		Если Настройки.УказыватьИнформациюОТоваре Тогда
			СтрокаТЧ.Вставить("production_date", Настройки.ДатаПроизводства);
			СтрокаТЧ.Вставить(
				"productName",
				ИнтеграцияИС.ПредставлениеНоменклатуры(
					СтрокаТЧМаркированныеТовары.Номенклатура,
					СтрокаТЧМаркированныеТовары.Характеристика,,
					СтрокаТЧМаркированныеТовары.Серия));
		КонецЕсли;
		
		Если Настройки.УказыватьИдентификаторПроисхожденияВЕТИС
			И Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
			СтрокаТЧ.Вставить("vsd_number", СтрокаТЧТовары.ИдентификаторПроисхожденияВЕТИССтрокой);
		КонецЕсли;
		
		// Дата приемки от физических лиц
		// Отсутствует в отчете производственной линии
		Если Настройки.УказыватьДатуПриемки Тогда
			СтрокаТЧ.Вставить("product_receiving_date", Настройки.ДатаПриемки);
		КонецЕсли;
		
		// Отсутствуют в отчете производственной линии
		Если Настройки.УказыватьСуммы Тогда
			СтрокаТЧ.Вставить("cost",      СтрокаТЧТовары.Цена * 100);
			СтрокаТЧ.Вставить("vat_value", СтрокаТЧТовары.СуммаНДС * 100);
		КонецЕсли;
		
		ТелоЗапроса[Настройки.ИмяРеквизитаТовары].Добавить(СтрокаТЧ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОТоварахПоДаннымОтчета(
	СообщениеJSON, ТелоЗапроса, ПараметрыНормализацииШтрихкода, Шапка, ДанныеОтчета, Настройки = Неопределено)
	
	Если Настройки = Неопределено Тогда
		Настройки = НастройкиДобавляемыхПолейСведенийОТоварах();
	КонецЕсли;
	
	Для Каждого СтрокаТЧМаркированныеТовары Из ДанныеОтчета Цикл
		
		СтрокаТЧ = Новый Структура;
		
		РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
			СтрокаТЧМаркированныеТовары.НормализованноеЗначениеШтрихкода, Шапка.ВидПродукции, Ложь);
		
		СтрокаТЧ.Вставить(
			Настройки.ИмяРеквизитаКодМаркировки,
			ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииШтрихкода));
		
		Если Настройки.УказыватьТипУпаковки Тогда
			СтрокаТЧ.Вставить("packType", "UNIT");
		КонецЕсли;
		
		Если Настройки.ПроверятьИУказыватьКодТНВЭД Тогда
			СтрокаТЧ.Вставить("tnved_code", Шапка.КодТНВЭД);
		КонецЕсли;
		
		Если Настройки.УказыватьИдентификаторПроисхожденияВЕТИС
			И Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
			СтрокаТЧ.Вставить("vsd_number", Шапка.ИдентификаторПроисхожденияВЕТИССтрокой);
		КонецЕсли;
		
		// Дата приемки от физических лиц
		Если Настройки.УказыватьДатуПриемки Тогда
			СтрокаТЧ.Вставить("product_receiving_date", Настройки.ДатаПриемки);
		КонецЕсли;
		
		ТелоЗапроса[Настройки.ИмяРеквизитаТовары].Добавить(СтрокаТЧ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НастройкиДобавляемыхПолейСведенийОТоварах(ИмяРеквизитаТовары = "products", ИмяРеквизитаКодМаркировки = "uit_code")
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИмяРеквизитаТовары",        ИмяРеквизитаТовары);
	Результат.Вставить("ИмяРеквизитаКодМаркировки", ИмяРеквизитаКодМаркировки);
	
	Результат.Вставить("ПроверятьИУказыватьКодТНВЭД", Истина);
	Результат.Вставить("УказыватьСертификацию",       Истина);
	
	Результат.Вставить("УказыватьИнформациюОТоваре",  Ложь);
	Результат.Вставить("ДатаПроизводства",            Неопределено);
	
	Результат.Вставить("УказыватьДатуПриемки", Ложь);
	Результат.Вставить("ДатаПриемки",          Неопределено);
	
	Результат.Вставить("УказыватьСуммы",       Ложь);
	Результат.Вставить("УказыватьТипУпаковки", Ложь);
	
	Результат.Вставить("УказыватьИдентификаторПроисхожденияВЕТИС", Ложь);
	Результат.Вставить("УровеньВложенностиУпаковок", 1);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСПолнымиКодамиМаркировки

Функция ПроверитьИРазбитьНаГруппыПолныеКодыМаркировки(СообщенияJSON, СообщениеJSON, ГруппыКодов,
	ПолныеКодыМаркировки, Знач КоличествоКодовВДокументе)
	
	ПолныеКодыМаркировки.Сортировать("ИдентификаторПроисхожденияВЕТИС, ГоденДо, КодМаркировки");
	
	ТекущийИдентификаторПроисхожденияВЕТИС = Неопределено;
	ТекущийГоденДо = Неопределено;
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаКодМаркировки Из ПолныеКодыМаркировки Цикл
		
		Если ТекущийИдентификаторПроисхожденияВЕТИС <> СтрокаКодМаркировки.ИдентификаторПроисхожденияВЕТИС
			Или ТекущийГоденДо <> СтрокаКодМаркировки.ГоденДо Тогда
			
			ТекущаяГруппа = Новый Массив;
			КоличествоВТекущейГруппе = 0;
			ОписаниеПакета = Новый Структура;
			ОписаниеПакета.Вставить("ГруппаКодов",                         ТекущаяГруппа);
			ОписаниеПакета.Вставить("КлючИдентификаторПроисхожденияВЕТИС", СтрокаКодМаркировки.ИдентификаторПроисхожденияВЕТИС);
			ОписаниеПакета.Вставить("КлючГоденДо",                         СтрокаКодМаркировки.ГоденДо);
			ГруппыКодов.Добавить(ОписаниеПакета);
			
		КонецЕсли;
		
		ТекущийИдентификаторПроисхожденияВЕТИС = СтрокаКодМаркировки.ИдентификаторПроисхожденияВЕТИС;
		ТекущийГоденДо                         = СтрокаКодМаркировки.ГоденДо;
		
		Если Не ЗначениеЗаполнено(СтрокаКодМаркировки.ПолныйКодМаркировки) Тогда
			ЕстьОшибки = Истина;
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(НСтр("ru = 'Не найден полный код маркировки для кода %1.'"), СтрокаКодМаркировки.КодМаркировки));
		Иначе
			Если КоличествоВТекущейГруппе = КоличествоКодовВДокументе Тогда
				ТекущаяГруппа = Новый Массив;
				КоличествоВТекущейГруппе = 0;
				ОписаниеПакета = Новый Структура;
				ОписаниеПакета.Вставить("ГруппаКодов", ТекущаяГруппа);
				ОписаниеПакета.Вставить("КлючИдентификаторПроисхожденияВЕТИС", ТекущийИдентификаторПроисхожденияВЕТИС);
				ОписаниеПакета.Вставить("КлючГоденДо", ТекущийГоденДо);
				ГруппыКодов.Добавить(ОписаниеПакета);
			КонецЕсли;
			ТекущаяГруппа.Добавить(ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(СтрокаКодМаркировки.ПолныйКодМаркировки));
			КоличествоВТекущейГруппе = КоличествоВТекущейГруппе + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		СообщенияJSON.Добавить(СообщениеJSON);
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

Функция ИнициализироватьПолныеКодыМаркировки()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ГоденДо",                          Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("КодМаркировки",          Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПолныйКодМаркировки",              Новый ОписаниеТипов("Строка"));
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьКодКПолучению(ПолныеКодыМаркировки, НормализованныйШтрихкод, МолочнаяПродукция = Ложь,
	ДанныеШтрихкодовУпаковок = Неопределено, ПолныйКодМаркировки = Неопределено)
	
	ИдентификаторПроисхожденияВЕТИС = "";
	ГоденДо = "";
	Если МолочнаяПродукция И ДанныеШтрихкодовУпаковок <> Неопределено Тогда
		ИдентификаторПроисхожденияВЕТИС = ДанныеШтрихкодовУпаковок.ИдентификаторПроисхожденияВЕТИС;
		Если ИдентификаторПроисхожденияВЕТИС = Неопределено Тогда
			ИдентификаторПроисхожденияВЕТИС = "";
		КонецЕсли;
		ГоденДо = ДанныеШтрихкодовУпаковок.ГоденДо;
	КонецЕсли;
	
	ДанныеСтроки = ПолныеКодыМаркировки.Добавить();
	ДанныеСтроки.ИдентификаторПроисхожденияВЕТИС = ИдентификаторПроисхожденияВЕТИС;
	ДанныеСтроки.ГоденДо                         = ГоденДо;
	ДанныеСтроки.КодМаркировки                   = НормализованныйШтрихкод;
	ДанныеСтроки.ПолныйКодМаркировки             = ПолныйКодМаркировки;
	
КонецПроцедуры

Процедура ЗаполнитьПолныеКодыМаркировки(ПолныеКодыМаркировки, РезультатПоискаВПуле)
	
	Для Каждого СтрокаТаблицы Из РезультатПоискаВПуле Цикл
		
		ДанныеСтроки = ПолныеКодыМаркировки.Найти(СтрокаТаблицы.КодМаркировки, "КодМаркировки");
		Если ДанныеСтроки <> Неопределено Тогда
			ДанныеСтроки.ПолныйКодМаркировки = СтрокаТаблицы.ПолныйКодМаркировки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция РассчитатьКоличествоВложенныхШтрихкодовПоДаннымДерева(ДеревоУпаковок, СообщениеJSON, СообщенияJSON)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		ЕстьОшибки = ЕстьОшибки Или РассчитатьКоличествоВложенныхШтрихкодовСтрокиДерева(СтрокаДерева, СообщениеJSON);
		СтрокаДерева.Строки.Очистить();
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		СообщенияJSON.Добавить(СообщениеJSON);
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

Функция РассчитатьКоличествоВложенныхШтрихкодовСтрокиДерева(СтрокаДерева, СообщениеJSON)
	
	ЕстьОшибки = Ложь;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		
		Для Каждого ВложеннаяСтрока Из СтрокаДерева.Строки Цикл
			ЕстьОшибки = ЕстьОшибки Или РассчитатьКоличествоВложенныхШтрихкодовСтрокиДерева(ВложеннаяСтрока, СообщениеJSON);
			СтрокаДерева.Количество = СтрокаДерева.Количество +  ВложеннаяСтрока.Количество;
			СтрокаДерева.КоличествоВложенныхЕдиниц = СтрокаДерева.Количество;
		КонецЦикла;
		
	ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		СтрокаДерева.Количество = 1;
		
	ИначеЕсли СтрокаДерева.КоличествоВложенныхЕдиниц > 0 Тогда
		
		// Для GTIN02 может быть указано количество.
		СтрокаДерева.Количество = СтрокаДерева.КоличествоВложенныхЕдиниц;
		
	ИначеЕсли СтрокаДерева.Коэффициент > 0 Тогда
		
		// Получен по данным EAN или GTIN.
		СтрокаДерева.Количество = СтрокаДерева.Коэффициент;
		
	Иначе
		
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(НСтр("ru = 'Не найден коэффициент для %1.'"), СтрокаДерева.НормализованныйШтрихкод));
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

Функция ИнициализироватьСтруктуруЗаполненияКоэффициентовПоОписаниюGTIN()
	
	Результат  = Новый Структура;
	
	Результат.Вставить("ОбработанСОшибками", Ложь);
	Результат.Вставить("GTIN",                      "");
	Результат.Вставить("ВидУпаковки",               Неопределено);
	Результат.Вставить("Коэффициент",               0);
	Результат.Вставить("КоличествоПачек",           0);
	Результат.Вставить("КоличествоВложенныхЕдиниц", Ложь);
	Результат.Вставить("СоставКодаМаркировки",      Неопределено);
	Результат.Вставить("ДанныеРазбора",             Неопределено);
	Результат.Вставить("СтрокаДерева",              Неопределено);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьТекстОшибкиНеНайденПолныйКод(ИсходнаяСтрока, ИмяКолонки)
	ТекстОшибки = СтрШаблон(
		НСтр("ru = 'Не найден полный код маркировки для %1'"), 
		ИсходнаяСтрока[ИмяКолонки]);
	ИсходнаяСтрока.ТекстОшибки = ?(ЗначениеЗаполнено(ИсходнаяСтрока.ТекстОшибки), ИсходнаяСтрока.ТекстОшибки + Символы.ПС + ТекстОшибки, ТекстОшибки);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли