#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеМаркировкаТоваровИСМП.Тип;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ДоступныеВидыПродукцииИС = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	СобытияФормИСМП.НастроитьВидПродукцииПриСозданииНаСервере(ЭтотОбъект, ДоступныеВидыПродукцииИС);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыУпаковка");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыСерия");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(ЭтотОбъект, "ТоварыСерия");
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "Характеристика", "Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "Серия", "Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(
		ЭтотОбъект, "Серия", "Характеристика");
		
	ПрименитьУсловноеОформлениеХарактеристикаСерия();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	// Режим отладки
	Элементы.СтраницаШтрихкодыУпаковок.Видимость = ОбщегоНазначения.РежимОтладки() И Пользователи.ЭтоПолноправныйПользователь();
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ВидимостьПодключаемыхКоманд") Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки" И Источник = "Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не ВидПродукцииУказан() Или РедактированиеФормыНедоступно Или НЕ ПравоИзменения
		Или РедактированиеНедоступноПоСтатусуПроверкиИподбора(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(
		ЭтотОбъект, Источник, Событие, Данные);
		
	Если ДанныеСоСканераСтруктура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеСоСканераСтруктура);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ШтрихкодированиеИС.СохранитьНастройкиВыбораМаркируемойПродукции(ЭтотОбъект, Объект.Ссылка);
	
	// Запись документа при смене операции / организации / вида продукции (с очисткой щтрихкодов)
	Если Не Отказ Тогда
		
		Если СтатусПроверкиИПодбора <> ПроверкаИПодборПродукцииИСМП.СтатусПроверкиИПодбораДокумента(
			ТекущийОбъект.Ссылка, ТекущийОбъект.ВидПродукции) Тогда
			РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.ОчиститьРезультатыПроверкиДокумента(ТекущийОбъект.Ссылка);
		КонецЕсли;
		
		ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ЗаполнитьПредставлениеСертификации();
	ЗаполнитьПредставлениеТаможеннойДекларации();
	ЗаполнитьСлужебныеРеквизитыВЕТИСВКоллекции();
	ЗаполнитьСлужебныеРеквизитыДанныеОтчетаПроизводственнойЛинии();
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект,,,КлючСвязиСтатусаСтрок(ЭтотОбъект));
	
	ПараметрыОбновленияСтатуса = Неопределено;
	
	ОбновитьСтатусИСМП();
	ОбновитьПредставленияНаФорме();
	НастроитьЭлементыФормы(ЭтотОбъект);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);

	РазблокироватьДанныеФормыДляРедактирования();
	
	ЗаполнитьТаблицуПредставленийGTINОстатки();

	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	СобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбораСерии(
		ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий);
	
	ИмяФормыУказанияСерии = "";
	ШтрихкодированиеИСКлиентПереопределяемый.ЗаполнитьПолноеИмяФормыУказанияСерии(ИмяФормыУказанияСерии);

	Если ИсточникВыбора.ИмяФормы = ИмяФормыУказанияСерии И Объект.ОтчетПроизводственнойЛинии Тогда

		Серия = ВыбранноеЗначение.Значение;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) И ИспользуетсяУказаниеИдентификатораВЕТИС(ЭтотОбъект) Тогда
			СерияПриИзмененииСервер(Истина);
		КонецЕсли;

	ИначеЕсли ИнтеграцияИСКлиент.ЭтоЗагрузкаКодовМаркировки(ИсточникВыбора, ЭтотОбъект) Тогда
		
		Если Объект.ОтчетПроизводственнойЛинии Тогда
			
			ШтрихкодированиеИСКлиент.ПодготовитьДанныеДляЗагрузкиОтчетПроизводственнойЛинии(ВыбранноеЗначение); //Массив кодов 
			
			Объект.ДанныеОтчетаПроизводственнойЛинии.Очистить();
			Для Каждого ЭлементДанных Из ВыбранноеЗначение Цикл
				
				СтрокаТЧ = Объект.ДанныеОтчетаПроизводственнойЛинии.Добавить();
				СтрокаТЧ.ЗначениеШтрихкода         = ЭлементДанных.Штрихкод;
				СтрокаТЧ.ЗначениеШтрихкодаУпаковки = ЭлементДанных.ШтрихкодУпаковки;
				Если ЭлементДанных.Свойство("ФорматBase64") Тогда
					СтрокаТЧ.ФорматBase64 = ЭлементДанных.ФорматBase64;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Объект.СоздаватьШтрихкодыУпаковок Тогда
				ОпределитьНоменклатуруОтчетаПроизводственнойЛинии(ВыбранноеЗначение);
			КонецЕсли;
			
		Иначе
			//Формат загрузки из внешнего файла полностью соответствует формату загрузки из ТСД
			Подключаемый_ПолученыДанныеИзТСД(ВыбранноеЗначение, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
	СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если Не Отказ Тогда
		Объект.Номенклатура   = Номенклатура;
		Объект.Характеристика = Характеристика;
		Объект.Серия          = Серия;
		Объект.КодТНВЭД       = КодТНВЭД;
		Объект.ИдентификаторПроисхожденияВЕТИССтрокой = ИдентификаторПроисхожденияВЕТИССтрокой;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если (Объект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС
		  И (Не ЗначениеЗаполнено(Объект.ОперацияНанесения)
		     Или ЗначениеЗаполнено(Объект.ОперацияНанесения)
		         И НЕ (СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик")
		              Или СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетКПередаче")
		              Или СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОбрабатывается")
		              Или СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи")
		              Или СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично")))
		 Или Объект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС
		     И (СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыАТКСформированы 
				И Объект.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.АТК
				Или СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы 
				И Объект.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок
				Или СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик
				И Объект.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыМаркировки))
		И СтрДлина(Объект.КодТаможенногоОргана) <> 8 Тогда
		ТекстСообщения = Нстр("ru = 'Код таможенного органа должен состоять из 8 цифр'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект.КодТаможенногоОргана", Отказ);
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("КодТНВЭД");
	Если Объект.ОтчетПроизводственнойЛинии И Объект.СоздаватьШтрихкодыУпаковок Тогда
		Если Не ХарактеристикиИспользуются Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
		КонецЕсли;
		Если Не ИнтеграцияИСКлиентСервер.НеобходимоУказатьСерию(СтатусУказанияСерий) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Серия");
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
		МассивНепроверяемыхРеквизитов.Добавить("Серия");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСМПКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ДокументОснование = Неопределено;
	
	ОчиститьСписокВыбораЭлементовШапки();
	ОчиститьДанныеТаблицаПродукцииОснование(ДанныеТаблицаПродукцииОснование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	ОчисткаШтрихкодыУпаковок = Ложь;
	ОчиститьДокументОснование = Ложь;
	ПроизводствоВнеЕАЭС = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС");
	МаркировкаОстатков = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков");
	Агрегация = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийИСМП.Агрегация");
	ИмпортСФТС= ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС");
	НанесениеКодов = ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки();
	
	ЭтоСменаПроизводствоВнеЕАЭС = (ПредыдущаяОперация = ПроизводствоВнеЕАЭС) <> (Объект.Операция = ПроизводствоВнеЕАЭС);
	ЭтоСменаМаркировкиОстатков  = (ПредыдущаяОперация = МаркировкаОстатков)  <> (Объект.Операция = МаркировкаОстатков);
	ЭтоСменаАгрегации           = (ПредыдущаяОперация = Агрегация)           <> (Объект.Операция = Агрегация);
	ЭтоСменаИмпортСФТС          = (ПредыдущаяОперация = ИмпортСФТС)          <> (Объект.Операция = ИмпортСФТС);
	
	БылоНанесениеКодов = НанесениеКодов.Найти(ПредыдущаяОперация)<>Неопределено
		Или ЗначениеЗаполнено(Объект.ОперацияНанесения);
	СталоНанесениеКодов = НанесениеКодов.Найти(Объект.Операция) <> Неопределено
		Или ЗначениеЗаполнено(Объект.ОперацияНанесения);
	ЭтоСменаНанесениеКодов = БылоНанесениеКодов <> СталоНанесениеКодов;
	
	Если ЭтоСменаПроизводствоВнеЕАЭС
		Или ЭтоСменаМаркировкиОстатков
		Или ЭтоСменаАгрегации
		Или ЭтоСменаНанесениеКодов
		Или ЭтоСменаИмпортСФТС Тогда
		ОчисткаШтрихкодыУпаковок = Истина;
	КонецЕсли;
	
	ОчиститьТНВЭД = Ложь;
	Если Объект.Операция = ПроизводствоВнеЕАЭС Или Объект.Операция = МаркировкаОстатков Тогда
		ОчиститьТНВЭД = Истина;
	КонецЕсли;
	
	Если Объект.Операция <> МаркировкаОстатков Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			СтрокаТовары.GTIN = "";
		КонецЦикла;
	КонецЕсли;
	
	ПроверитьТипИденификатораВетис = Ложь;
	Если Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		
		ПроверитьТипИденификатораВетис = Истина;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			
			ОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Объект.Операция);
			ПредыдущиеОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(ПредыдущаяОперация);
			
			Если ОперацииМаркировки.ЭтоИмпорт <> ПредыдущиеОперацииМаркировки.ЭтоИмпорт 
				Или ПредыдущиеОперацииМаркировки.ЭтоВводВОборот <> ОперацииМаркировки.ЭтоВводВОборот Тогда
				ОчиститьДокументОснование = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Действия = Новый Структура;
	Действия.Вставить("ОчиститьТНВЭД",                  ОчиститьТНВЭД);
	Действия.Вставить("ОчиститьШтрихкодыУпаковок",      ОчисткаШтрихкодыУпаковок);
	Действия.Вставить("ИзменениеДальнейшегоДействия",   ЭтоСменаНанесениеКодов Или ЭтоСменаАгрегации Или ЭтоСменаИмпортСФТС);
	Действия.Вставить("УстановитьСтатусПоУмолчанию",    ЭтоСменаИмпортСФТС);
	Действия.Вставить("ОчиститьШтрихкодыАТК",           Ложь);
	Действия.Вставить("ОчиститьДокументОснование",      ОчиститьДокументОснование);
	Действия.Вставить("ПроверитьТипИденификатораВетис", ПроверитьТипИденификатораВетис);
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросПриИзмененииОперацииЗавершение", ЭтотОбъект, Действия);
	
	Если ОчисткаШтрихкодыУпаковок И Объект.ШтрихкодыУпаковок.Количество() Тогда
		
		Действия.ОчиститьШтрихкодыУпаковок = Истина;
		Если ЭтоСменаИмпортСФТС И Объект.ШтрихкодыАТК.Количество() Тогда
			Действия.ОчиститьШтрихкодыАТК = Истина;
		КонецЕсли;
		ТекстВопроса = НСтр(
			"ru = 'При изменении вида операции табличная часть Штрихкоды упаковок будет очищена. Продолжить?'");
		Кнопки = РежимДиалогаВопрос.ДаНет; 
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантФормированияАТКИСМППриИзменении(Элемент)
	
	Если Объект.ВариантФормированияАТКИСМП <> ПредыдущийВариантФормированияАТКИСМП Тогда
		ОчиститьШтрихкодыАТК = Ложь;
		
		Действия = Новый Структура;
		Действия.Вставить("ОчиститьШтрихкодыАТК", ОчиститьШтрихкодыАТК);
		Действия.Вставить("ПредыдущийВариантФормированияАТКИСМП", ПредыдущийВариантФормированияАТКИСМП);
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросПриИзмененииВариантФормированияАТКЗавершение", ЭтотОбъект, Действия);
		
		Если Объект.ШтрихкодыАТК.Количество() Тогда
			
			Действия.ОчиститьШтрихкодыАТК = Истина;
			ТекстВопроса = НСтр(
				"ru = 'При изменении варианта формирования АТК табличная часть Штрихкоды упаковок АТК будет очищена. Продолжить?'");
			Кнопки = РежимДиалогаВопрос.ДаНет; 
			ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки);
			Возврат;
			
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияОтсканироватьПроверитьМаркируемуюПродукциюНажатие(Элемент)
	
	ПроверкаИПодборПродукцииИСМПКлиент.ОткрытьФормуПроверкиИПодбора(ЭтотОбъект, Объект.ВидПродукции, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредыдущаяОперация = Объект.Операция;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантФормированияАТКИСМПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредыдущийВариантФормированияАТКИСМП = Объект.ВариантФормированияАТКИСМП;
	
КонецПроцедуры


&НаКлиенте
Процедура ОперацияНанесенияПриИзменении(Элемент)
	
	ТребуетсяОчиститьКодыМаркировки = ЗначениеЗаполнено(Объект.ОперацияНанесения) <> ЗначениеЗаполнено(ПредыдущаяОперация);
	
	Действия = Новый Структура;
	Действия.Вставить("ОчиститьШтрихкодыУпаковок", Ложь);
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросПриИзмененииОперацииНанесенияЗавершение", ЭтотОбъект, Действия);
	
	Если ТребуетсяОчиститьКодыМаркировки И Объект.ШтрихкодыУпаковок.Количество() Тогда
		
		Действия.ОчиститьШтрихкодыУпаковок = Истина;
		
		ТекстВопроса = НСтр(
			"ru = 'При изменении операции нанесения табличная часть Штрихкоды упаковок будет очищена. Продолжить?'");
		Кнопки = РежимДиалогаВопрос.ДаНет; 
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияНанесенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредыдущаяОперация = Объект.ОперацияНанесения;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияДекларацииПриИзменении(Элемент)
	
	ОчисткаШтрихкодовАТК = Ложь;
	Действия = Новый Структура;
	Действия.Вставить("ОчиститьШтрихкодыАТК", ОчисткаШтрихкодовАТК);
	Действия.Вставить("ПредыдущийВариантЗаполненияДекларации", ПредыдущийВариантЗаполненияДекларации);
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросПриИзмененииВариантЗаполненияДекларацииЗавершение", ЭтотОбъект, Действия);
	
	ВариантЗаполненияДекларацииАТК = ПредопределенноеЗначение(
		"Перечисление.ВариантыЗаполненияДекларацииИСМП.АТК");
	
	Если ПредыдущийВариантЗаполненияДекларации = ВариантЗаполненияДекларацииАТК Тогда
		ОчисткаШтрихкодовАТК = Истина;
	КонецЕсли;
	
	Если ОчисткаШтрихкодовАТК И Объект.ШтрихкодыАТК.Количество() Тогда
		
		Действия.ОчиститьШтрихкодыАТК = Истина;
		ТекстВопроса = НСтр(
			"ru = 'При изменении варианта заполнения декларации табличная часть Штрихкоды упаковок АТК будет очищена. Продолжить?'");
		Кнопки = РежимДиалогаВопрос.ДаНет; 
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент, ПерезаполнитьПоОснованию = Ложь)
	
	Если Объект.ОтчетПроизводственнойЛинии Тогда
		ОчиститьРеквизитыШапкиОтчетПроизводственнойЛинии();
		ОчиститьСписокВыбораЭлементовШапки();
		ОчиститьДанныеТаблицаПродукцииОснование(ДанныеТаблицаПродукцииОснование);
	КонецЕсли;
	
	ПриИзмененииВидПродукцииНаСервере(ПерезаполнитьПоОснованию);
	
	Если Объект.СоздаватьШтрихкодыУпаковок Тогда
		ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
	СобытияФормИСМПКлиент.ВидПродукцииПриИзменении(ЭтотОбъект, Элемент);
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции, "Номенклатура");
	
	Если ЗначениеЗаполнено(Объект.ОперацияНанесения)
		И (Не ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(Объект.ВидПродукции)
		Или ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Объект.Операция) <> Неопределено
		Или Не ДоступнаОперацияНанесенияПоВидуОперацииИСМП(Объект.Операция)) Тогда
		Объект.ОперацияНанесения = Неопределено;
	КонецЕсли;
	
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля") Тогда
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Истина, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Истина, "СтранаПроисхожденияПолеВвода");
	Иначе
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Неопределено, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Неопределено, "СтранаПроисхожденияПолеВвода");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 И ВыбранноеЗначение <> Объект.ВидПродукции Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении вида продукции документ-основание, табличная часть Товары
		                        |и связанные с ней штрихкоды упаковок будут очищены. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		
		РежимДиалога = РежимДиалогаВопрос.ДаНет;
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			РежимДиалога = Новый СписокЗначений;
			РежимДиалога.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Очистить'"));
			РежимДиалога.Добавить(Истина, НСтр("ru = 'Перезаполнить'"));
			РежимДиалога.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		КонецЕсли;
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалога);
		
	ИначеЕсли Объект.ОтчетПроизводственнойЛинии И ВыбранноеЗначение <> Объект.ВидПродукции 
		И (Объект.ДанныеОтчетаПроизводственнойЛинии.Количество()
		   Или ЗначениеЗаполнено(Номенклатура)) Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении вида продукции документ-основание, табличная часть ""Коды маркировки""
		                        |и связанные с ней реквизиты Отчета производственной линии будут очищены. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		
		РежимДиалога = РежимДиалогаВопрос.ДаНет;
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			РежимДиалога = Новый СписокЗначений;
			РежимДиалога.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Очистить'"));
			РежимДиалога.Добавить(Истина, НСтр("ru = 'Перезаполнить'"));
			РежимДиалога.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		КонецЕсли;
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалога);
		
	ИначеЕсли ВыбранноеЗначение = Объект.ВидПродукции Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииОрганизацияПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении организации отсканированные коды маркировки будут очищены. Продолжить?'");
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВопросПриИзмененииОрганизацияПриЗавершении(КодВозвратаДиалога.Да, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Объект.Организация);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("РегистрСведений.НастройкиОбменаСУЗ.Форма.ФормаВыбораПроизводственногоОбъекта",
		ПараметрыОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Маркировка товаров ИС МП"" не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Маркировка товаров ИС МП"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСКлиент.ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПроизводственнойЛинииПриИзменении(Элемент)
	
	ОчиститьТовары                            = Ложь;
	ОчиститьДанныеОтчетаПроизводственнойЛинии = Ложь;
	
	Действия = Новый Структура;
	Действия.Вставить("ОчиститьТовары", ОчиститьТовары);
	Действия.Вставить("ОчиститьДанныеОтчетаПроизводственнойЛинии", ОчиститьДанныеОтчетаПроизводственнойЛинии);
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросПриИзмененииОтчетПроизводственнойЛинииЗавершение", ЭтотОбъект, Действия);
	Если Объект.ОтчетПроизводственнойЛинии И Объект.Товары.Количество() Тогда
		Действия.ОчиститьТовары = Истина;
		ТекстВопроса = НСтр(
			"ru = 'При установке признака Отчет прозводственной линии табличная часть ""Товары"" будет очищена. Продолжить?'");
			Кнопки = РежимДиалогаВопрос.ДаНет; 
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки);
		Возврат;
	ИначеЕсли Не Объект.ОтчетПроизводственнойЛинии И Объект.ДанныеОтчетаПроизводственнойЛинии.Количество() Тогда
		Действия.ОчиститьДанныеОтчетаПроизводственнойЛинии = Истина;
		ТекстВопроса = НСтр(
			"ru = 'При установке признака Отчет прозводственной линии табличная часть ""Коды маркировки"" будет очищена. Продолжить?'");
			Кнопки = РежимДиалогаВопрос.ДаНет; 
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	НоменклатураПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(Элемент, Объект.ВидПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ЭтотОбъект, КэшированныеЗначения);
	ХарактеристикаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СерияПриИзменении(Элемент)
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСерии(
		ЭтотОбъект, ЭтотОбъект, КэшированныеЗначения, ПараметрыУказанияСерий);
	СерияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект, ПараметрыУказанияСерий, Элемент.ТекстРедактирования, СтандартнаяОбработка, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкоропортящаясяПродукцияВЕТИСПриИзменении(Элемент)
	
	УстановитьФорматСрокГодности(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПроисхожденияВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	ПараметрыОткрытия = ИнтеграцияИСМПВЕТИСКлиент.ПараметрыВыбораИдентификатораПросхождения(ПараметрыСканирования.ВидОперацииИСМП);
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ЭтотОбъект, "Номенклатура, Характеристика, Серия, ХарактеристикиИспользуются");
	ПараметрыОткрытия.ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИдентификатораПроисхожденияВЕТИСЗавершение", ЭтотОбъект);
	ПараметрыОткрытия.Организация                         = Объект.Организация;
	ПараметрыОткрытия.ОтчетПроизводственнойЛинии          = Истина;

	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ПараметрыОткрытия.ТребуетсяУказаниеСерии = ИнтеграцияИСКлиентСервер.НеобходимоУказатьСерию(СтатусУказанияСерий);
	КонецЕсли;

	ИнтеграцияИСМПВЕТИСКлиент.ОткрытьФормуВыбораИдентификатораПроисхожденияВЕТИС(ПараметрыОткрытия, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыИдентификаторПроисхожденияВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект);

	ПараметрыОткрытия = ИнтеграцияИСМПВЕТИСКлиент.ПараметрыВыбораИдентификатораПросхождения(ПараметрыСканирования.ВидОперацииИСМП);
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ТекущиеДанные, "Номенклатура, Характеристика, Серия, ХарактеристикиИспользуются");
	ПараметрыОткрытия.ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИдентификатораПроисхожденияВЕТИСЗавершение", ЭтотОбъект);
	ПараметрыОткрытия.Организация                         = Объект.Организация;
	ПараметрыОткрытия.ТребуетсяУказаниеСерии = ИнтеграцияИСКлиентСервер.НеобходимоУказатьСерию(ТекущиеДанные.СтатусУказанияСерий);

	ИнтеграцияИСМПВЕТИСКлиент.ОткрытьФормуВыбораИдентификатораПроисхожденияВЕТИС(ПараметрыОткрытия, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПроисхожденияВЕТИСПриИзменении(Элемент)
	
	ПриИзмененииИдентификаторПроисхожденияВЕТИС(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПроисхожденияВЕТИСОчистка(Элемент, СтандартнаяОбработка)
	
	ПриИзмененииИдентификаторПроисхожденияВЕТИС(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПроисхожденияВЕТИССтрокойПриИзменении(Элемент)
	
	Если СтрДлина(ИдентификаторПроисхожденияВЕТИССтрокой) = 39 Тогда
		
		ИдентификаторПроисхожденияВЕТИССтрокой = НРег(ИдентификаторПроисхожденияВЕТИССтрокой);
		ИдентификаторПроисхожденияВЕТИССтрокой = СтрЗаменить(ИдентификаторПроисхожденияВЕТИССтрокой, "-", "");
		ИдентификаторПроисхожденияВЕТИССтрокой = Лев(ИдентификаторПроисхожденияВЕТИССтрокой,8)
			+ "-" + Сред(ИдентификаторПроисхожденияВЕТИССтрокой, 9, 4)
			+ "-" + Сред(ИдентификаторПроисхожденияВЕТИССтрокой, 13, 4)
			+ "-" + Сред(ИдентификаторПроисхожденияВЕТИССтрокой, 17, 4)
			+ "-" + Сред(ИдентификаторПроисхожденияВЕТИССтрокой, 21, 12);
		
	КонецЕсли;
	
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторПроисхожденияВЕТИССтрокой) Тогда
		Сообщить("Указан некорректный идентификатор ВСД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДПриИзменении(Элемент)
	
	Объект.КодТНВЭД = КодТНВЭД;
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ТекущаяСтрока",                           КодТНВЭД);
	ПараметрыФормы.Вставить("ВидПродукции",                            Объект.ВидПродукции);
	ПараметрыФормы.Вставить("Организация",                             Объект.Организация);
	ПараметрыФормы.Вставить("РежимВыбора",                             Истина);
	ПараметрыФормы.Вставить("ВозвращатьСсылкуНаЭлементКлассификатора", Ложь);
	
	ОткрытьФорму(
		"РегистрСведений.КодыТНВЭДИСМП.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьШтрихкодыУпаковокПриИзменении(Элемент)
	
	ПриИзмененииСоздаватьШтрихкодыУпаковок(Объект.СоздаватьШтрихкодыУпаковок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСоздаватьШтрихкодыУпаковок(СоздаватьШтрихкодыУпаковок)
	
	Элементы.ГруппаНастройкиСозданияШтрихкодовУпаковок.Доступность = СоздаватьШтрихкодыУпаковок;
	
	Если Не СоздаватьШтрихкодыУпаковок Тогда
		
		ОчиститьРеквизитыНастройкиСозданияШтрихкодовУпаковок();
		ОчиститьСписокВыбораЭлементовШапки();
		Элементы.Номенклатура.АвтоОтметкаНезаполненного   = Ложь;
		Элементы.Характеристика.АвтоОтметкаНезаполненного = Ложь;
		НоменклатураПриИзмененииСервер(Ложь, Ложь);
		ОтключитьОтметкуНезаполненного();
		
	Иначе
		
		Элементы.Номенклатура.АвтоОтметкаНезаполненного = Истина;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ЗаполнитьСписокВыбораЭлементаФорма("Номенклатура");
			Если ЗначениеЗаполнено("Номенклатура") Тогда
				НоменклатураПриИзмененииСервер();
			Иначе
				НоменклатураПриИзмененииСервер(, Ложь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеФормыНедоступно Тогда
		СобытияФормИСМПКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(Элемент, Объект.ВидПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	Если ИспользуетсяПодсистемаВЕТИС Тогда
		
		НоменклатураСоответствуетСопоставленнойПродукции = НоменклатураСоответствуетСопоставленнойПродукцииВЕТИСПоИдентификаторуПроисхождения(
			ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС,
			ТекущиеДанные.Номенклатура,
			ТекущиеДанные.Характеристика,
			ТекущиеДанные.Серия);
		
		Если Не НоменклатураСоответствуетСопоставленнойПродукции Тогда
			ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ТребуетсяОбновитьКэшУпаковок = ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
		ЭтотОбъект,
		Объект.Товары,
		ТекущиеДанные,
		ДанныеКешаСтроки,
		Истина,
		КлючСвязиСтатусаСтрок(ЭтотОбъект, ТекущиеДанные.Номенклатура));
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ТекущиеДанные.GTIN = "";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеКешаСтроки, ТекущиеДанные);
	
	Если ТребуетсяОбновитьКэшУпаковок Тогда
		ПрименитьКешШтрихкодовУпаковок();
	КонецЕсли;
	
	СписокНоменклатуры = Новый Массив;
	СписокНоменклатуры.Добавить(ТекущиеДанные.Номенклатура);
	
	ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
	
	ЗаполнитьСертификациюНоменклатурыПоСтроке(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ДанныеКешаСтроки, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
	Если ИспользуетсяПодсистемаВЕТИС Тогда
		
		НоменклатураСоответствуетСопоставленнойПродукции = НоменклатураСоответствуетСопоставленнойПродукцииВЕТИСПоИдентификаторуПроисхождения(
			ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС,
			ТекущиеДанные.Номенклатура,
			ТекущиеДанные.Характеристика,
			ТекущиеДанные.Серия);
		
		Если Не НоменклатураСоответствуетСопоставленнойПродукции Тогда
			ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ТребуетсяОбновитьКэшУпаковок = ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
		ЭтотОбъект,
		Объект.Товары,
		ТекущиеДанные,
		ДанныеКешаСтроки,
		Истина,
		КлючСвязиСтатусаСтрок(ЭтотОбъект, ТекущиеДанные.Номенклатура));
	
	ЗаполнитьЗначенияСвойств(ДанныеКешаСтроки, ТекущиеДанные);
	
	Если ТребуетсяОбновитьКэшУпаковок Тогда
		ПрименитьКешШтрихкодовУпаковок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСертификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыСтрок.Добавить(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	ОткрытьФормуРедактированияСертификации(ИдентификаторыСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСтавкиНДС(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСуммы(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСуммыНДС(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииЦены(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТаможеннаяДекларацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыСтрок.Добавить(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	ОткрытьФормуРедактированияТаможеннойДекларации(ИдентификаторыСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСертификацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ПустаяСтрока(ТекущиеДанные.Сертификация) Тогда
	
		ТекущиеДанные.ВидДокументаСертификации   = ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИСМП.ПустаяСсылка");
		ТекущиеДанные.НомерДокументаСертификации = "";
		ТекущиеДанные.ДатаДокументаСертификации  = '00010101';
	
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Представление", ТекущиеДанные.Сертификация);
	НайденныеСтроки = КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекущиеДанные.ВидДокументаСертификации   = НайденныеСтроки[0].ВидСертификации;
		ТекущиеДанные.НомерДокументаСертификации = НайденныеСтроки[0].НомерСертификации;
		ТекущиеДанные.ДатаДокументаСертификации  = НайденныеСтроки[0].ДатаСертификации;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТаможеннаяДекларацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ПустаяСтрока(ТекущиеДанные.ТаможеннаяДекларация) Тогда
	
		ТекущиеДанные.РегистрационныйНомерДекларации = "";
		ТекущиеДанные.ДатаДекларации  = '00010101';

		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Представление", ТекущиеДанные.ТаможеннаяДекларация);
	НайденныеСтроки = КешТаможеннойДекларации.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекущиеДанные.РегистрационныйНомерДекларации = НайденныеСтроки[0].РегистрационныйНомерДекларации;
		ТекущиеДанные.ДатаДекларации  = НайденныеСтроки[0].ДатаДекларации;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
	КонецЕсли;
	
	Если Не ОтменаРедактирования Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТребуетсяОбновитьКэшУпаковок = ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
			ЭтотОбъект,
			Объект.Товары,
			ТекущиеДанные,
			ДанныеКешаСтроки,
			Истина,
			КлючСвязиСтатусаСтрок(ЭтотОбъект, ТекущиеДанные.Номенклатура));
	
		Если ТребуетсяОбновитьКэшУпаковок Тогда
			ПрименитьКешШтрихкодовУпаковок();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииКоличества(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииЦены(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
	ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
		ЭтотОбъект,
		Объект.Товары,
		ТекущиеДанные,
		ДанныеКешаСтроки,
		Истина,
		КлючСвязиСтатусаСтрок(ЭтотОбъект, ТекущиеДанные.Номенклатура));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ИнициализироватьКэшСтроки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтаФорма,, Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСерии(
		ЭтотОбъект, Элементы.Товары.ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("ТекущаяСтрока",                           ТекущиеДанные.КодТНВЭД);
		ПараметрыФормы.Вставить("ВидПродукции",                            Объект.ВидПродукции);
		ПараметрыФормы.Вставить("Организация",                             Объект.Организация);
		ПараметрыФормы.Вставить("РежимВыбора",                             Истина);
		ПараметрыФормы.Вставить("ВозвращатьСсылкуНаЭлементКлассификатора", Ложь);
		
		ОткрытьФорму(
			"РегистрСведений.КодыТНВЭДИСМП.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыСертификация Тогда
		ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект);
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыСрокГодности Тогда
		ОпределитьФорматРедактированияСрокГодности();
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыТаможеннаяДекларация И Не Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ОбновитьСписокВыбораТаможеннойДекларации(ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИдентификаторПроисхожденияВЕТИСПриИзменении(Элемент)
	ЗаполнитьДанныеВЕТИС();
	ОпределитьФорматРедактированияСрокГодности();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИдентификаторПроисхожденияВЕТИСОчистка(Элемент, СтандартнаяОбработка)
	ЗаполнитьДанныеВЕТИС();
	ОпределитьФорматРедактированияСрокГодности();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыGTINПриИзменении(Элемент)
	
	ЗаполнитьТаблицуПредставленийGTINОстатки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыGTINНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(
		МассивGTINИзКэшаОписанияОстатков(Объект.Организация, Объект.ВидПродукции));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДанныеОтчетаПроизводственнойЛинии

&НаКлиенте
Процедура ДанныеОтчетаПроизводственнойЛинииЗначениеШтрихкодаУпаковкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеОтчетаПроизводственнойЛинии.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ОчиститьДанныеСтрокиОтчетаПроизводственнойЛинии(ТекущиеДанные);
		ПроверитьФорматШтрихкода(ТекущиеДанные.ЗначениеШтрихкодаУпаковки, ТекущиеДанные.ФорматBase64);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОтчетаПроизводственнойЛинииЗначениеШтрихкодаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеОтчетаПроизводственнойЛинии.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ОчиститьДанныеСтрокиОтчетаПроизводственнойЛинии(ТекущиеДанные);
		ПроверитьФорматШтрихкода(ТекущиеДанные.ЗначениеШтрихкода, ТекущиеДанные.ФорматBase64);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеСтрокиОтчетаПроизводственнойЛинии(ДанныеСтроки);
	
	ДанныеСтроки.НормализованноеЗначениеШтрихкода = "";
	ДанныеСтроки.НормализованноеЗначениеШтрихкодаУпаковки ="";
	ДанныеСтроки.ТекстОшибки ="";
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОтчетаПроизводственнойЛинииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.Форма.ФормаДокумента.Записать",,Истина);
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.Форма.ФормаДокумента.ПровестиИЗакрыть",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ОчиститьСообщения();
	
	ДоступнаИерархия = Объект.ОтчетПроизводственнойЛинии;
	
	ИнтеграцияИСКлиент.ОткрытьФормуЗагрузкиКодовМаркировки(
		ЭтотОбъект,
		ДоступнаИерархия,
		ИнтеграцияИСМПКлиент.ЗаголовокФормыЗагрузкиКодовМаркировки(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	Если Не ВидПродукцииУказан() Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ВозобновитьПодборМаркируемойПродукции(Команда)
	
	ПроверкаИПодборПродукцииИСМПКлиент.ВозобновитьПроверку(ЭтотОбъект, Объект.ВидПродукции, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументыСертификации(Команда)
	
	ОткрытьФормуРедактированияСертификации(Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыТовары(Команда)
	
	ОповещениеЗакрытияФормыЗаполненияТовары = Новый ОписаниеОповещения(
		"Подключаемый_ЗаполнениеПараметровТовары", ЭтотОбъект, Элементы.Товары.ВыделенныеСтроки);
		
	ОткрытьФорму(
		"Документ.МаркировкаТоваровИСМП.Форма.ФормаЗаполненияТовары",,
		ЭтотОбъект,,,,
		ОповещениеЗакрытияФормыЗаполненияТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.ФормаДокумента.Команда.ОткрытьПодбор");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект);
	СобытияФормИСМПКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ОчиститьСообщения();
	СобытияФормИСМПКлиентПереопределяемый.ВыгрузитьДанныеВТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияИСМПКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	ОбработчикПерезаполненияПоОснованию();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтрокПриИзменении(Элемент)
	УстановитьОтборСтрок(ЭтотОбъект);
КонецПроцедуры

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

//@skip-warning
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияИСМПСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТНВЭДТовары()
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.КодТНВЭД = "";
	КонецЦикла;
	
	КодТНВЭД = "";
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаРезультатаПодбораНоменклатуры(Результат);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусИСМП()
	
	СтатусПроверкиИПодбора = ПроверкаИПодборПродукцииИСМП.СтатусПроверкиИПодбораДокумента(
		Объект.Ссылка, Объект.ВидПродукции);
	
	СтатусИСМП = Документы.МаркировкаТоваровИСМП.СтатусПоУмолчанию();
	Реквизиты = Новый Структура(
		"Операция, ОперацияНанесения, ВариантЗаполненияДекларации");
	ЗаполнитьЗначенияСвойств(Реквизиты, Объект);
	
	ДальнейшееДействие = Документы.МаркировкаТоваровИСМП.ДальнейшееДействиеПоУмолчанию(Реквизиты);
	
	Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		
		ДальнейшееДействие = Новый Массив;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка)
		И ПараметрыОбновленияСтатуса = Неопределено Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Статусы.Статус КАК Статус,
			|	Статусы.ДальнейшееДействие1 КАК ДальнейшееДействие1,
			|	Статусы.ДальнейшееДействие2 КАК ДальнейшееДействие2,
			|	Статусы.ДальнейшееДействие3 КАК ДальнейшееДействие3
			|ИЗ
			|	РегистрСведений.СтатусыДокументовИСМП КАК Статусы
			|ГДЕ
			|	Статусы.Документ = &Документ");
		Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
		
		ИсключаемыеДействия = ИнтеграцияИСМП.НеотображаемыеВДокументахДальнейшиеДействия();
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			СтатусИСМП = Выборка.Статус;
			
			ДальнейшееДействие = Новый Массив;
			Если ИсключаемыеДействия.Найти(Выборка.ДальнейшееДействие1) = Неопределено Тогда
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
			КонецЕсли;
			Если ИсключаемыеДействия.Найти(Выборка.ДальнейшееДействие2) = Неопределено Тогда
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
			КонецЕсли;
			Если ИсключаемыеДействия.Найти(Выборка.ДальнейшееДействие3) = Неопределено Тогда
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыОбновленияСтатуса <> Неопределено Тогда
		
		СтатусИСМП = ПараметрыОбновленияСтатуса.НовыйСтатус;
		
		ДальнейшееДействие = Новый Массив;
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие1);
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие2);
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие3);	
		
	КонецЕсли;
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеПередачуДанных);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК);
	
	СтатусПредставление = ИнтеграцияИСМП.ПредставлениеСтатуса(СтатусИСМП, ДальнейшееДействие, ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = СтатусИСМП <> Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик
	                              И СтатусИСМП <> Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи
	                              И СтатусИСМП <> Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи
	                              И СтатусИСМП <> Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи
	                              И СтатусИСМП <> Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыАТКСформированы
	                              И СтатусИСМП <> Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТКОшибкаПередачи
	                              И Не (СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы
	                                    И Объект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС);
	
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПередатьОтчет" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВыполнитьАгрегацию" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки= "ВыполнитьФормированиеАТК" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение)
	
	ПараметрыЗаполнения = ИнтеграцияИС.ПараметрыЗаполненияТабличнойЧастиТовары(Объект.ВидПродукции);
	
	СобытияФормИСМППереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект,,,КлючСвязиСтатусаСтрок(ЭтотОбъект));
	
	СписокНоменклатуры = Новый Массив;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СписокНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
	КонецЦикла;
	
	ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
	ЗаполнитьСертификациюНоменклатурыПоСтроке(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект, "Характеристика", "ХарактеристикиИспользуются");
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект, "Серия", "СтатусУказанияСерий", "ТипНоменклатуры");
		
	СписокОперацийБезНоменклатуры = Новый СписокЗначений();
	СписокОперацийБезНоменклатуры.ЗагрузитьЗначения(ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки());
	СписокОперацийБезНоменклатуры.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
	СписокОперацийБезНоменклатуры.Добавить(Перечисления.ВидыОперацийИСМП.Агрегация);
	
	// Молочная продукция
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСрокГодности.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.СкоропортящаясяПродукцияВЕТИС");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=dd.MM.yyyy;");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СрокГодности.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.СкоропортящаясяПродукцияВЕТИС");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=dd.MM.yyyy;");
	
	// Молочная продукция скоропортящаяся
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСрокГодности.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.СкоропортящаясяПродукцияВЕТИС");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='dd.MM.yyyy HH:mm';");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СрокГодности.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.СкоропортящаясяПродукцияВЕТИС");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=dd.MM.yyyy HH:mm';");
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.Операция.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокОперацийБезНоменклатуры;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.Операция.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокОперацийБезНоменклатуры;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Товары.ПредставлениеGTINОстатки"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля  = ЦветаСтиля.ЦветТекстаПоля;
	ОтборСтрок      = "Все";
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ДанныеДокумента = Новый Структура("ВидПродукции, Операция, ОперацияНанесения");
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Объект);
		Если ЭтоАдресВременногоХранилища(ДанныеДокументаАдрес) Тогда
			ПоместитьВоВременноеХранилище(ДанныеДокумента, ДанныеДокументаАдрес);
		Иначе
			ДанныеДокументаАдрес = ПоместитьВоВременноеХранилище(ДанныеДокумента, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ШтрихкодированиеИС.ВосстановитьНастройкиВыбораМаркируемойПродукции(ЭтотОбъект, Объект.Ссылка);
	ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(ЭтотОбъект);
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.МаркировкаТоваровИСМП);
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(Объект, Документы.МаркировкаТоваровИСМП);
	ИспользуетсяПодсистемаВЕТИС = ИнтеграцияИСМПВЕТИС.ИспользуетсяПодсистемаВетИС();
	
	ЗаполнитьДанныеФормыПриСозданииНаСервере();
	
	ИнтеграцияИСПереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ЗаполнитьСлужебныеРеквизитыНоменклатуры(ЭтотОбъект, Ложь);
	ЗаполнитьСлужебныеРеквизитыВЕТИСВКоллекции();
	
	ПараметрыОбновленияСтатуса = Неопределено;
	
	ОбновитьСтатусИСМП();
	
	ОбновитьПредставленияНаФорме();
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции, "Номенклатура");
	ЗаполнитьДоступныеОперации();
	ЗаполнитьПредставлениеСертификации();
	ЗаполнитьПредставлениеТаможеннойДекларации();
	ПроизводственныйОбъектЗаполнитьСписокВыбора(ЭтотОбъект);
	НастроитьЭлементыФормы(ЭтотОбъект);
	
	ЗаполнитьСписокВыбораПриСозданииНаСервере();
	ЗаполнитьСлужебныеРеквизитыДанныеОтчетаПроизводственнойЛинии();
	
	СоздатьКэшСертификацииСервер();
	СоздатьКэшТаможеннойДекларации();
	ЗаполнитьТаблицуПредставленийGTINОстатки();
	
	Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля Тогда
		СобытияФормИСМППереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Истина, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Истина, "СтранаПроисхожденияПолеВвода");
	Иначе
		СобытияФормИСМППереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Неопределено, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Неопределено, "СтранаПроисхожденияПолеВвода");
	КонецЕсли;
	
	Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
		ПредыдущийВариантЗаполненияДекларации = Объект.ВариантЗаполненияДекларации;
	КонецЕсли;
	
	Если Не ПодключенаОбработкаКодовМаркировки Тогда
		СобытияФормИСМП.ПодключитьОбработкуКодовМаркировки(ЭтотОбъект,,"ИдентификаторПроисхожденияВЕТИС,СрокГодности,GTIN");
		ПодключенаОбработкаКодовМаркировки = Истина;
	Иначе
		ПерезаполнитьДанныеФормы();
	КонецЕсли;
	
	ИнициализироватьКэшСтроки(ЭтотОбъект);
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(ЭтотОбъект);
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект,,,КлючСвязиСтатусаСтрок(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроизводственныйОбъектЗаполнитьСписокВыбора(Форма, ПроверитьПроизводственныйОбъект = Ложь)
	
	Форма.Элементы.ПроизводственныйОбъект.СписокВыбора.Очистить();
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Организация) Тогда
		Если ПроверитьПроизводственныйОбъект Тогда
			Форма.Объект.ПроизводственныйОбъект = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПроверитьПроизводственныйОбъект Тогда
		ПроизводственныйОбъект = Форма.Объект.ПроизводственныйОбъект;
	Иначе
		ПроизводственныйОбъект = Неопределено;
	КонецЕсли;
	
	СписокВыбора = ПроизводственныйОбъектПолучитьСписокВыбора(Форма.Объект.Организация, ПроизводственныйОбъект);
	
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		Форма.Элементы.ПроизводственныйОбъект.СписокВыбора.Добавить(
			ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Форма.Элементы.ПроизводственныйОбъект.СписокВыбора.СортироватьПоПредставлению();
	
	Если ПроверитьПроизводственныйОбъект
		И ПроизводственныйОбъект = Неопределено Тогда
		Форма.Объект.ПроизводственныйОбъект = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроизводственныйОбъектПолучитьСписокВыбора(Организация, ПроизводственныйОбъект)
	
	Возврат РегистрыСведений.НастройкиОбменаСУЗ.ПроизводственныйОбъектПолучитьСписокВыбора(Организация, ПроизводственныйОбъект);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДоступнаОперацияНанесенияПоВидуОперацииИСМП(Операция)
	
	Возврат Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотКонтрактноеПроизводствоЕАЭС")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормы(Форма)
	
	Элементы                   = Форма.Элементы;
	Операция                   = Форма.Объект.Операция;
	ОперацияНанесения          = Форма.Объект.ОперацияНанесения;
	ОтчетПроизводственнойЛинии = Форма.Объект.ОтчетПроизводственнойЛинии;
	ВидПродукции               = Форма.Объект.ВидПродукции;
	ПередаватьВДекларациюАТК   = Форма.Объект.ВариантЗаполненияДекларации = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.АТК");
	
	ПроверятьСоставУпаковокПоДаннымИСМП = Форма.Объект.ПроверятьСоставУпаковокПоДаннымИСМП;
	
	ОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Операция);
	ЭтоПроизводствоРФ                           = ОперацииМаркировки.ЭтоПроизводствоРФ;
	ЭтоПроизводствоВнеЕАЭС                      = ОперацииМаркировки.ЭтоПроизводствоВнеЕАЭС;
	ЭтоПроизводствоПоДоговору                   = ОперацииМаркировки.ЭтоПроизводствоПоДоговору;
	ЭтоПроизводствоПоДоговоруНаСторонеЗаказчика = ОперацииМаркировки.ЭтоПроизводствоПоДоговоруНаСторонеЗаказчика;
	ЭтоПолучениеПродукцииОтФизическихЛиц        = ОперацииМаркировки.ЭтоПолучениеПродукцииОтФизическихЛиц;
	ЭтоМаркировкаОстатков                       = ОперацииМаркировки.ЭтоМаркировкаОстатков;
	ЭтоТрансграничнаяТорговля                   = ОперацииМаркировки.ЭтоТрансграничнаяТорговля;
	ЭтоАгрегация                                = ОперацииМаркировки.ЭтоАгрегация;
	ЭтоИмпортСФТС                               = ОперацииМаркировки.ЭтоИмпортСФТС;
	ЭтоВводВОборот                              = ОперацииМаркировки.ЭтоВводВОборот;
	ЭтоКонтрактноеПроизводство                  = ОперацииМаркировки.ЭтоКонтрактноеПроизводство;
	
	ЭтоТабак                     = (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак"));
	ЭтоМолочнаяПродукцияВЕТИС    = (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС"));
	ЭтоМолочнаяПродукцияБезВЕТИС = (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС"));
	ЭтоМолочнаяПродукция         = ЭтоМолочнаяПродукцияБезВЕТИС Или ЭтоМолочнаяПродукцияВЕТИС;
	ЭтоПродукцияМОТП             = ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции);
	
	ПроверятьСоставУпаковокПоДаннымИСМП = ПроверятьСоставУпаковокПоДаннымИСМП И ЭтоАгрегация И ЭтоПродукцияМОТП;
	
	Если Не ЭтоИмпортСФТС
		Или ЭтоИмпортСФТС
			И (Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыАТКСформированы")
				И Форма.Объект.ВариантЗаполненияДекларации = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.АТК")
				Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы")
				И Форма.Объект.ВариантЗаполненияДекларации = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок")
				Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик")
				И Форма.Объект.ВариантЗаполненияДекларации = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.КодыМаркировки")) Тогда
		Элементы.РегистрационныйНомерДекларации.АвтоОтметкаНезаполненного = Истина;
		Элементы.ДатаДекларации.АвтоОтметкаНезаполненного                 = Истина;
		Элементы.ПринятоеРешениеПолеВвода.АвтоОтметкаНезаполненного       = Истина;
		Элементы.КодТаможенногоОргана.АвтоОтметкаНезаполненного           = Истина;
	Иначе
		Элементы.РегистрационныйНомерДекларации.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ДатаДекларации.АвтоОтметкаНезаполненного                 = Ложь;
		Элементы.ПринятоеРешениеПолеВвода.АвтоОтметкаНезаполненного       = Ложь;
		Элементы.КодТаможенногоОргана.АвтоОтметкаНезаполненного           = Ложь;
	КонецЕсли;
	
	Если ЭтоМолочнаяПродукцияВЕТИС И Не Форма.ИспользуетсяПодсистемаВЕТИС Тогда
		ОтчетПроизводственнойЛинии = Истина;
	КонецЕсли;
	
	ВозможнаОперацияНанесения = ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(ВидПродукции);
	ЭтоОперацияНанесения =
		ОперацииМаркировки.ЭтоОперацияНанесения
		Или (ЭтоМолочнаяПродукцияВЕТИС И Не Форма.ИспользуетсяПодсистемаВЕТИС);
	
	ПрисутствуетОперацияНанесения = ЗначениеЗаполнено(Форма.Объект.ОперацияНанесения) Или ЭтоОперацияНанесения;
	ДоступнаОперацияНанесенияПоВидуОперацииИСМП = ДоступнаОперацияНанесенияПоВидуОперацииИСМП(Операция);
	ДоступенОтчетПроизводственнойЛинии =
			(ВозможнаОперацияНанесения
			И Не ЭтоТрансграничнаяТорговля
			И (Не ЭтоКонтрактноеПроизводство Или (ЭтоМолочнаяПродукцияВЕТИС И Не Форма.ИспользуетсяПодсистемаВЕТИС))
			И Не ЭтоМаркировкаОстатков)
		Или (ВозможнаОперацияНанесения И ЭтоАгрегация);
	ОтчетПроизводственнойЛинии = ОтчетПроизводственнойЛинии И ДоступенОтчетПроизводственнойЛинии;
	
	Элементы.ТоварыЗагрузитьДанныеИзТСД.Видимость     = Не ЭтоАгрегация;
	Элементы.ТоварыЗагрузитьИзВнешнегоФайла.Видимость = Не ЭтоАгрегация;
	
	Элементы.ДатаДекларации.Видимость                 = ЭтоПроизводствоВнеЕАЭС Или ЭтоИмпортСФТС;
	Элементы.ДатаДекларацииЗаголовок.Видимость        = ЭтоПроизводствоВнеЕАЭС Или ЭтоИмпортСФТС;
	
	Элементы.РегистрационныйНомерДекларации.Видимость = ЭтоПроизводствоВнеЕАЭС Или ЭтоИмпортСФТС;
	Элементы.ВариантЗаполненияДекларации.Видимость    = ЭтоИмпортСФТС;
	Элементы.ВариантФормированияАТКИСМП.Видимость     = ЭтоИмпортСФТС;
	Элементы.ВариантФормированияАТКИСМП.Доступность   = ЭтоИмпортСФТС И ПередаватьВДекларациюАТК;
	
	Элементы.КодТаможенногоОргана.Видимость           = ЭтоПроизводствоВнеЕАЭС Или ЭтоИмпортСФТС;
	Элементы.КодТаможенногоОрганаЗаголовок.Видимость  = ЭтоПроизводствоВнеЕАЭС Или ЭтоИмпортСФТС;
	
	Элементы.ПринятоеРешение.Видимость                = ЭтоПроизводствоВнеЕАЭС Или ЭтоИмпортСФТС;
	Элементы.СтранаПроисхождения.Видимость            = ЭтоТрансграничнаяТорговля;
	Элементы.ТоварыСтранаПроизводства.Видимость       = ЭтоМаркировкаОстатков;
	Элементы.ТоварыТаможеннаяДекларация.Видимость     = ЭтоМаркировкаОстатков;
	Элементы.ЗаполнитьПараметрыТовары.Видимость       = ЭтоМаркировкаОстатков;
	Элементы.ТоварыGTIN.Видимость                     = ЭтоМаркировкаОстатков Или ЭтоАгрегация Или (ЭтоОперацияНанесения И ЭтоТабак);
	Элементы.ДатаИмпорта.Видимость                    = ЭтоТрансграничнаяТорговля;
	Элементы.ТоварыЦена.Видимость                     = ЭтоТрансграничнаяТорговля;
	Элементы.ТоварыСуммаНДС.Видимость                 = ЭтоТрансграничнаяТорговля;
	Элементы.ТоварыСумма.Видимость                    = ЭтоТрансграничнаяТорговля;
	Элементы.ТоварыСтавкаНДС.Видимость                = ЭтоТрансграничнаяТорговля Или ЭтоИмпортСФТС;
	Элементы.ТоварыСуммаСНДС.Видимость                = ЭтоТрансграничнаяТорговля;
	Элементы.ГруппаПервичныйДокумент.Видимость        = ЭтоТрансграничнаяТорговля;
	Элементы.ТоварыКодТНВЭД.Видимость                 = ЭтоВводВОборот;
	Элементы.ТоварыСертификация.Видимость             = ЭтоВводВОборот;
	
	Элементы.ТоварыИдентификаторПроисхожденияВЕТИС.Видимость            = Ложь;
	Элементы.ТоварыСрокГодности.Видимость                               = Ложь;
	Элементы.ШтрихкодыУпаковокИдентификаторПроисхожденияВЕТИС.Видимость = Ложь;
	Элементы.ШтрихкодыУпаковокСрокГодности.Видимость                    = Ложь;
	Элементы.ИдентификаторПроизводственногоЗаказа.Видимость             = Ложь;
	Элементы.ИдентификаторПроизводственнойЛинии.Видимость               = Ложь;
	Элементы.ПроверятьСоставУпаковокПоДаннымИСМП.Видимость              = Ложь;
	
	// Реквизиты отчета производственной линии
	Элементы.ИдентификаторПроисхожденияВЕТИССтрокой.Видимость = ЭтоВводВОборот И Не Форма.ИспользуетсяПодсистемаВЕТИС;
	Элементы.ИдентификаторПроисхожденияВЕТИС.Видимость        = ЭтоВводВОборот И Форма.ИспользуетсяПодсистемаВЕТИС;
	Элементы.КодТНВЭД.Видимость                               = ЭтоВводВОборот;
	Элементы.СрокГодности.Видимость                           = ПрисутствуетОперацияНанесения;
	Элементы.СкоропортящаясяПродукцияВЕТИС.Видимость          = ПрисутствуетОперацияНанесения;
	
	Элементы.КодТНВЭД.АвтоОтметкаНезаполненного = ЭтоВводВОборот;
	
	Если ЭтоМолочнаяПродукция И ПрисутствуетОперацияНанесения Тогда
		УстановитьФорматСрокГодности(Форма);
	КонецЕсли;
	
	Элементы.Контрагент.Видимость       = (ЭтоКонтрактноеПроизводство Или ЭтоТрансграничнаяТорговля);
	Элементы.ДатаПроизводства.Видимость = (ЭтоКонтрактноеПроизводство Или ЭтоПроизводствоРФ);
	
	Если ЭтоПроизводствоПоДоговору Тогда
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Владелец'");
	ИначеЕсли ЭтоПроизводствоПоДоговоруНаСторонеЗаказчика Тогда
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Производитель'");
	ИначеЕсли ЭтоТрансграничнаяТорговля Тогда
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Экспортер'");
	КонецЕсли;
	
	Элементы.ОперацияНанесения.Видимость = Ложь;
	
	Элементы.ПроизводственныйОбъект.Видимость = ЭтоОперацияНанесения
		Или Не ЭтоПродукцияМОТП
		И ВозможнаОперацияНанесения
		И ДоступнаОперацияНанесенияПоВидуОперацииИСМП
		И ЗначениеЗаполнено(ОперацияНанесения);
	
	Элементы.ОтчетПроизводственнойЛинии.Видимость       = ДоступенОтчетПроизводственнойЛинии;
	Форма.Объект.ОтчетПроизводственнойЛинии             = ОтчетПроизводственнойЛинии;
	Элементы.ОтчетПроизводственнойЛинии.ТолькоПросмотр  = Ложь;
	Элементы.СтраницаТовары.Видимость                   = Не ОтчетПроизводственнойЛинии;
	Элементы.СтраницаОтчетПроизводственнойЛинии.Видимость = ОтчетПроизводственнойЛинии;
	Элементы.ГруппаДанныеОтчетаПроизводственнойЛинии.Видимость = ОтчетПроизводственнойЛинии И Не ЭтоАгрегация И Не ЭтоПолучениеПродукцииОтФизическихЛиц;
	
	Элементы.ГруппаНастройкиСозданияШтрихкодовУпаковок.Доступность = Форма.Объект.СоздаватьШтрихкодыУпаковок;
	ОтображатьИсходныеЗначенияКодов = ОтчетПроизводственнойЛинии 
		                              И (Не ЭтоАгрегация 
									    И СтатусыКодыМаркировкиОбработаны().Найти(Форма.СтатусИСМП) = Неопределено
		                                И СтатусыКодыМаркировкиАгрегация().Найти(Форма.СтатусИСМП) = Неопределено
									    Или ЭтоАгрегация);
		
	Элементы.ДанныеОтчетаПроизводственнойЛинииЗначениеШтрихкода.Видимость         = ОтображатьИсходныеЗначенияКодов;
	Элементы.ДанныеОтчетаПроизводственнойЛинииЗначениеШтрихкодаУпаковки.Видимость = ОтображатьИсходныеЗначенияКодов;
	Элементы.ДанныеОтчетаПроизводственнойЛинииФорматBase64.Видимость              = ОтображатьИсходныеЗначенияКодов;
	
	Элементы.ДанныеОтчетаПроизводственнойЛинииНормализованноеЗначениеШтрихкода.Видимость         = Не ОтображатьИсходныеЗначенияКодов;
	Элементы.ДанныеОтчетаПроизводственнойЛинииНормализованноеЗначениеШтрихкодаУпаковки.Видимость = Не ОтображатьИсходныеЗначенияКодов;
	
	Элементы.ГруппаМолочнаяПродукция.Видимость = ЭтоМолочнаяПродукция;
	Элементы.ГруппаВЕТИС.Видимость             = ЭтоМолочнаяПродукцияВЕТИС;
	
	Форма.Объект.ПроверятьСоставУпаковокПоДаннымИСМП = ПроверятьСоставУпаковокПоДаннымИСМП;
	
	Если ЭтоПродукцияМОТП Тогда
		
		Элементы.ИдентификаторПроизводственногоЗаказа.Видимость = Истина;
		Элементы.ИдентификаторПроизводственнойЛинии.Видимость   = Истина;
		
		Элементы.ПроверятьСоставУпаковокПоДаннымИСМП.Видимость   = ЭтоАгрегация;
		Элементы.ПроверятьСоставУпаковокПоДаннымИСМП.Доступность = ЭтоАгрегация;
		
	ИначеЕсли ВозможнаОперацияНанесения Тогда
		
		Элементы.ОперацияНанесения.Видимость = ДоступнаОперацияНанесенияПоВидуОперацииИСМП;
		
		Элементы.ИдентификаторПроизводственногоЗаказа.Видимость = Истина;
		
		Если ЭтоМолочнаяПродукция Тогда
			Элементы.ТоварыСрокГодности.Видимость            = ПрисутствуетОперацияНанесения;
			Элементы.ШтрихкодыУпаковокСрокГодности.Видимость = ПрисутствуетОперацияНанесения;
		КонецЕсли;
		
		Если ЭтоВводВОборот И ЭтоМолочнаяПродукцияВЕТИС Тогда
			
			Элементы.ОтчетПроизводственнойЛинии.ТолькоПросмотр = Не Форма.ИспользуетсяПодсистемаВЕТИС;
			
			Элементы.ТоварыИдентификаторПроисхожденияВЕТИС.Видимость                 = Истина;
			Элементы.ТоварыИдентификаторПроисхожденияВЕТИС.АвтоОтметкаНезаполненного = Истина;
			Элементы.ШтрихкодыУпаковокИдентификаторПроисхожденияВЕТИС.Видимость      = Истина;
		
			
			ЗаголовокКолонкиВЕТИС = ИнтеграцияИСМПВЕТИСКлиентСервер.ИмяИдентификатораПроисхожденияВЕТИС();
			Элементы.ТоварыИдентификаторПроисхожденияВЕТИС.Заголовок = ЗаголовокКолонкиВЕТИС;
			Элементы.ШтрихкодыУпаковокИдентификаторПроисхожденияВЕТИС.Заголовок = ЗаголовокКолонкиВЕТИС;
			Элементы.ИдентификаторПроисхожденияВЕТИС.Заголовок = ЗаголовокКолонкиВЕТИС;
			Элементы.ИдентификаторПроисхожденияВЕТИС.АвтоотметкаНезаполненного = Не ЗначениеЗаполнено(ОперацияНанесения)
				Или ЗначениеЗаполнено(ОперацияНанесения)
					И НЕ (Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик")
					Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетКПередаче")
					Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи")
					Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОбрабатывается")
					Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично"));
				
		КонецЕсли;
		
	Иначе
		
		Если ЭтоМаркировкаОстатков Или ЭтоПолучениеПродукцииОтФизическихЛиц Или ЭтоАгрегация Тогда
			Элементы.ТоварыКодТНВЭД.Видимость = Ложь;
		Иначе
			Элементы.ТоварыКодТНВЭД.Видимость = Истина;
		КонецЕсли;
		
		Элементы.ТоварыСертификация.Видимость = Не ЭтоПолучениеПродукцииОтФизическихЛиц И Не ЭтоАгрегация И Не ЭтоИмпортСФТС;
		
	КонецЕсли;
	
	Элементы.ОтборСтрок.Видимость = ОтчетПроизводственнойЛинии И Не Форма.РедактированиеФормыНеДоступно;
	
	ЗависимыеОтСтатусаИСМП = Новый Массив;
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаЛеваяКолонка");
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаПраваяКолонкаНередактируемыеПослеОтправки");
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаПраваяКолонкаНередактируемыеПослеОтправкиДополнительныеДанные");
	ЗависимыеОтСтатусаИСМП.Добавить("СоздаватьШтрихкодыУпаковок");
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаНастройкиСозданияШтрихкодовУпаковок");
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаМолочнаяПродукция");
	ЗависимыеОтСтатусаИСМП.Добавить("КодТНВЭД");
	
	Если ЗначениеЗаполнено(ОперацияНанесения) Тогда
		
		ЗависимыеОтСтатусаИСМПОтчетОНанесении = Новый Массив;
		Если ЭтоМолочнаяПродукцияВЕТИС И ОтчетПроизводственнойЛинии Тогда
			ЗависимыеОтСтатусаИСМПОтчетОНанесении.Добавить("ГруппаВЕТИС");
		КонецЕсли;
		
		Если ЭтоПроизводствоВнеЕАЭС Тогда
			ЗависимыеОтСтатусаИСМПОтчетОНанесении.Добавить("ГруппаПраваяКолонкаДанныеДекларации");
		КонецЕсли;
		
		ИнтеграцияИСКлиентСервер.УправлениеДоступностьюЭлементовФормы(
			Форма,
			ЗависимыеОтСтатусаИСМПОтчетОНанесении,
			Не Форма.РедактированиеФормыНеДоступно
				Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесены")
				Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично"));
	Иначе
		ЗависимыеОтСтатусаИСМП.Добавить("ГруппаВЕТИС");
		ЗависимыеОтСтатусаИСМП.Добавить("ГруппаПраваяКолонкаДанныеДекларации");
	КонецЕсли;
	
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаНередактируемыеПослеОтправкиКомандыТовары");
	ЗависимыеОтСтатусаИСМП.Добавить("СтраницаТовары");
	ЗависимыеОтСтатусаИСМП.Добавить("СтраницаОтчетПроизводственнойЛинии");
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаНередактируемыеПослеОтправкиКомандыДанныеОтчета");
	
	ИнтеграцияИСКлиентСервер.УправлениеДоступностьюЭлементовФормы(Форма,
		ЗависимыеОтСтатусаИСМП, Не Форма.РедактированиеФормыНеДоступно);
	
	ЗависимыеОтСтатусаПроверкиИПодбора = Новый Массив;
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ОткрытьПодборПодменю");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыЗагрузитьИзВнешнегоФайла");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыГруппаПерезаполнитьПоОснованию");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ГруппаТорговоеОборудование");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыНоменклатура");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыХарактеристика");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыСерия");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКоличествоУпаковок");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыУпаковкаЕдиницаИзмерения");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыДобавить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыСкопировать");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыИзменить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыУдалить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюДобавить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюСкопировать");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюИзменить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюУдалить");

	ИнтеграцияИСКлиентСервер.УправлениеДоступностьюЭлементовФормы(Форма,
		ЗависимыеОтСтатусаПроверкиИПодбора,
		Не (Форма.РедактированиеФормыНеДоступно Или РедактированиеНедоступноПоСтатусуПроверкиИподбора(Форма)));
	
	Если Форма.РедактированиеФормыНеДоступно
		Или Не Форма.ПравоИзменения Тогда
		Элементы.ВозобновитьПодборМаркируемойПродукции.Доступность = Ложь;
	ИначеЕсли Форма.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Завершено") Тогда
		Элементы.ВозобновитьПодборМаркируемойПродукции.Доступность = Истина;
	Иначе
		Элементы.ВозобновитьПодборМаркируемойПродукции.Доступность = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВидимостьПодключаемыхКоманд") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РедактированиеНедоступноПоСтатусуПроверкиИподбора(Форма)
	
	Если Форма.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Выполняется") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПредставленийGTINОстатки()
	
	Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков
		Или Объект.Операция = Перечисления.ВидыОперацийИСМП.Агрегация
		Или (Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
		И ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Объект.Операция) <> Неопределено) Тогда
		РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
			Объект.Товары, Объект.Организация, Объект.ВидПродукции);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивGTINИзКэшаОписанияОстатков(Организация, ВидПродукции)
	Возврат РегистрыСведений.КэшОписанияОстатковИСМП.МассивGTINОписанияОстатков(Организация, ВидПродукции);
КонецФункции

&НаСервере
Процедура ТоварыПослеУдаленияСервер()
	
	ПрименитьКешШтрихкодовУпаковок();
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСтрок(Форма)
	
	Если Форма.ОтборСтрок = "СОшибками" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ЕстьОшибки", Истина);
		Форма.Элементы.ДанныеОтчетаПроизводственнойЛинии.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Форма.Элементы.ДанныеОтчетаПроизводственнойЛинии.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФорматШтрихкода(ЗначениеШтрихкода, ФорматBase64)
	ШтрихкодированиеИСКлиент.ПроверитьФорматШтрихкода(ЗначениеШтрихкода, ФорматBase64);
КонецПроцедуры

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сертификация

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСертификациюНоменклатурыПоСтроке(Форма, ДанныеДляЗаполнения)
	
	Если ДанныеДляЗаполнения = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ДанныеДляЗаполнения) = Тип("Массив") Тогда
		МассивДанныхЗаполнения = ДанныеДляЗаполнения;
	Иначе
		МассивДанныхЗаполнения = Новый Массив();
		МассивДанныхЗаполнения.Добавить(ДанныеДляЗаполнения);
	КонецЕсли;
	
	Для Каждого СтрокаДанныхЗаполнения Из МассивДанныхЗаполнения Цикл
	
		ПараметрыПоиска = Новый Структура();
		
		Если ТипЗнч(СтрокаДанныхЗаполнения) = Тип("Число") Тогда
			ДанныеСтроки = Форма.Объект.Товары.НайтиПоИдентификатору(СтрокаДанныхЗаполнения);
		Иначе
			ДанныеСтроки = СтрокаДанныхЗаполнения;
		КонецЕсли;
		
		ПараметрыПоиска.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
		
		НайденныеСтроки = Форма.КэшСертификации.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаСертифкации = НайденныеСтроки.Получить(0);
			
			ДанныеСтроки.ВидДокументаСертификации   = СтрокаСертифкации.ВидСертификации;
			ДанныеСтроки.НомерДокументаСертификации = СтрокаСертифкации.НомерСертификации;
			ДанныеСтроки.ДатаДокументаСертификации  = СтрокаСертифкации.ДатаСертификации;
			
			ДанныеСтроки.Сертификация = ПредставлениеСертификации(
				ДанныеСтроки.ВидДокументаСертификации,
				ДанныеСтроки.НомерДокументаСертификации,
				ДанныеСтроки.ДатаДокументаСертификации);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСертификации(ИдентификаторыСтрок)
	
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидСертификации",   ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИСМП.ДекларацияСоответствия"));
	ПараметрыОткрытия.Вставить("ДатаСертификации",  Дата('00010101'));
	ПараметрыОткрытия.Вставить("НомерСертификации", "");
	
	Если ИдентификаторыСтрок.Количество() = 1 Тогда
		
		ВыбраннаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторыСтрок[0]);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ВидСертификации",   ВыбраннаяСтрока.ВидДокументаСертификации);
		ПараметрыОткрытия.Вставить("ДатаСертификации",  ВыбраннаяСтрока.ДатаДокументаСертификации);
		ПараметрыОткрытия.Вставить("НомерСертификации", ВыбраннаяСтрока.НомерДокументаСертификации);
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторыСтрок", ИдентификаторыСтрок);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеСертификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"ОбщаяФорма.УточнениеСертификацииИС",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияТаможеннойДекларации(ИдентификаторыСтрок)
	
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДатаДекларации",  Дата('00010101'));
	ПараметрыОткрытия.Вставить("РегистрационныйНомерДекларации", "");
	
	Если ИдентификаторыСтрок.Количество() = 1 Тогда
		
		ВыбраннаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторыСтрок[0]);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДатаДекларации",  ВыбраннаяСтрока.ДатаДекларации);
		ПараметрыОткрытия.Вставить("РегистрационныйНомерДекларации", ВыбраннаяСтрока.РегистрационныйНомерДекларации);
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторыСтрок", ИдентификаторыСтрок);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеТаможеннойДекларацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Документ.МаркировкаТоваровИСМП.Форма.УточнениеТаможеннойДекларации",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСертификации(ВидСертификации, НомерСертификации, ДатаСертификации)
	
	ШаблонПредставлениеСертификата = "%1 №%2 от %3";
	
	Если ЗначениеЗаполнено(ВидСертификации)
		И ЗначениеЗаполнено(НомерСертификации)
		И ЗначениеЗаполнено(ДатаСертификации) Тогда
		
		ПредставлениеСертификата = СтрШаблон(ШаблонПредставлениеСертификата,
			ВидСертификации, НомерСертификации, Формат(ДатаСертификации, "ДФ=dd.MM.yyyy"));
		
	КонецЕсли;
	
	Возврат ПредставлениеСертификата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеТаможеннойДекларации(РегистрационныйНомерДекларации, ДатаДекларации)
	
	ШаблонПредставление = НСтр("ru = '№%1 от %2'");
	
	Если ЗначениеЗаполнено(РегистрационныйНомерДекларации)
		И ЗначениеЗаполнено(ДатаДекларации) Тогда
		
		ПредставлениеРегистрации = СтрШаблон(
			ШаблонПредставление,
			РегистрационныйНомерДекларации,
			Формат(ДатаДекларации, "ДФ=dd.MM.yyyy"));
		
	КонецЕсли;
	
	Возврат ПредставлениеРегистрации;
	
КонецФункции

&НаСервере
Процедура СоздатьКэшСертификацииСервер()
	
	СписокНоменклатуры = Новый Массив;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		ОбновитьКэшСертификацииКлиентСервер(ЭтотОбъект, СтрокаТовары.ВидДокументаСертификации,
			СтрокаТовары.НомерДокументаСертификации, СтрокаТовары.ДатаДокументаСертификации);
		
		СтрокаТовары.Сертификация = ПредставлениеСертификации(СтрокаТовары.ВидДокументаСертификации,
			СтрокаТовары.НомерДокументаСертификации, СтрокаТовары.ДатаДокументаСертификации);
		
		СписокНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
		
	КонецЦикла;
	
	ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКэшТаможеннойДекларации()
	
	СписокНоменклатуры = Новый Массив;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		ОбновитьКэшТаможеннойДекларацииКлиентСервер(
			ЭтотОбъект, СтрокаТовары.РегистрационныйНомерДекларации,
			СтрокаТовары.ДатаДекларации);
		
		СтрокаТовары.ТаможеннаяДекларация = ПредставлениеТаможеннойДекларации(
			СтрокаТовары.РегистрационныйНомерДекларации,
			СтрокаТовары.ДатаДекларации);
		
		СписокНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
		
	КонецЦикла;
	
	ДобавитьРегистрациюДТВКэш(ЭтотОбъект, СписокНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораТаможеннойДекларации(Номенклатура)
	
	Элементы.ТоварыТаможеннаяДекларация.СписокВыбора.Очистить();
	Для Каждого СтрокаКэша Из КешТаможеннойДекларации Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаКэша.Номенклатура)
			Или Номенклатура = СтрокаКэша.Номенклатура Тогда
			Элементы.ТоварыТаможеннаяДекларация.СписокВыбора.Добавить(СтрокаКэша.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКэшСертификацииКлиентСервер(Форма, ВидСертификации, НомерСертификации, ДатаСертификации, Номенклатура = Неопределено)
	
	Если Не ЗначениеЗаполнено(ВидСертификации)
		И Не ЗначениеЗаполнено(НомерСертификации)
		И Не ЗначениеЗаполнено(ДатаСертификации) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("ВидСертификации, НомерСертификации, ДатаСертификации",
		ВидСертификации, НомерСертификации, ДатаСертификации);
	
	НайденныеСтроки = Форма.КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		НоваяСтрока = Форма.КэшСертификации.Добавить();
		НоваяСтрока.ВидСертификации   = ВидСертификации;
		НоваяСтрока.НомерСертификации = НомерСертификации;
		НоваяСтрока.ДатаСертификации  = ДатаСертификации;
		НоваяСтрока.Номенклатура      = Номенклатура;
		НоваяСтрока.Представление     = ПредставлениеСертификации(ВидСертификации, НомерСертификации, ДатаСертификации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКэшТаможеннойДекларацииКлиентСервер(Форма, РегистрационныйНомерДекларации, ДатаДекларации, Номенклатура = Неопределено)
	
	Если Не ЗначениеЗаполнено(РегистрационныйНомерДекларации)
		И Не ЗначениеЗаполнено(ДатаДекларации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("РегистрационныйНомерДекларации, ДатаДекларации",
		РегистрационныйНомерДекларации, ДатаДекларации);
	
	НайденныеСтроки = Форма.КешТаможеннойДекларации.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		НоваяСтрока = Форма.КешТаможеннойДекларации.Добавить();
		НоваяСтрока.РегистрационныйНомерДекларации = РегистрационныйНомерДекларации;
		НоваяСтрока.ДатаДекларации                 = ДатаДекларации;
		НоваяСтрока.Номенклатура                   = Номенклатура;
		НоваяСтрока.Представление                  = ПредставлениеТаможеннойДекларации(РегистрационныйНомерДекларации, ДатаДекларации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеСертификации()
	
	Для Каждого Строка Из Объект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ВидДокументаСертификации) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.Сертификация = ПредставлениеСертификации(
			Строка.ВидДокументаСертификации, Строка.НомерДокументаСертификации, Строка.ДатаДокументаСертификации);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеТаможеннойДекларации()
	 
	Если Не Объект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(Строка.РегистрационныйНомерДекларации) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.ТаможеннаяДекларация = ПредставлениеТаможеннойДекларации(
			Строка.РегистрационныйНомерДекларации, Строка.ДатаДекларации);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыДанныеОтчетаПроизводственнойЛинии()
	
	Если Не Объект.ОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОтчета Из Объект.ДанныеОтчетаПроизводственнойЛинии Цикл
		СтрокаОтчета.ЕстьОшибки = ЗначениеЗаполнено(СтрокаОтчета.ТекстОшибки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСертификацииЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеСтроки.ВидДокументаСертификации   = РезультатВыбора.ВидСертификации;
		ДанныеСтроки.НомерДокументаСертификации = РезультатВыбора.НомерСертификации;
		ДанныеСтроки.ДатаДокументаСертификации  = РезультатВыбора.ДатаСертификации;
		ДанныеСтроки.Сертификация = ПредставлениеСертификации(РезультатВыбора.ВидСертификации,
			РезультатВыбора.НомерСертификации, РезультатВыбора.ДатаСертификации);
	КонецЦикла;
	
	ОбновитьКэшСертификацииКлиентСервер(ЭтотОбъект, ДанныеСтроки.ВидДокументаСертификации,
		ДанныеСтроки.НомерДокументаСертификации, ДанныеСтроки.ДатаДокументаСертификации);
	
	ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеТаможеннойДекларацииЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеСтроки.РегистрационныйНомерДекларации = РезультатВыбора.РегистрационныйНомерДекларации;
		ДанныеСтроки.ДатаДекларации  = РезультатВыбора.ДатаДекларации;
		ДанныеСтроки.ТаможеннаяДекларация      = ПредставлениеТаможеннойДекларации(РезультатВыбора.РегистрационныйНомерДекларации,
			РезультатВыбора.ДатаДекларации);
	КонецЦикла;
	
	ОбновитьКэшТаможеннойДекларацииКлиентСервер(
		ЭтотОбъект, ДанныеСтроки.РегистрационныйНомерДекларации, ДанныеСтроки.ДатаДекларации);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОбновитьСписокВыбораТаможеннойДекларации(ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	ШтрихкодированиеИСМПКлиент.ОбработатьСобытиеПотоковойПечати(ЭтотОбъект, ИсходныеДанные, ПараметрыСканирования);
	
	ШтрихкодированиеИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	
	РезультатОбработки = ОбработатьКодМаркировкиСервер(ИсходныеДанные, КэшированныеЗначения, ПараметрыСканирования);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьКодМаркировкиСервер(ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода   = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                         = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования         = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода               = ИсходныеДанные;
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаШтрихкодов

//@skip-warning
&НаКлиенте
Процедура ПослеОбработкиШтрихкодов(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Если ДанныеВыбораПоМаркируемойПродукции<>Неопределено Тогда
			КлючиСвязи = Новый Структура(КлючСвязиСтатусаСтрок(ЭтотОбъект, ДанныеВыбораПоМаркируемойПродукции.Номенклатура));
			КлючиСвязи.Вставить("Номенклатура");
			КлючиСвязи.Вставить("Характеристика");
			КлючиСвязи.Вставить("Серия");
			ЗаполнитьЗначенияСвойств(КлючиСвязи, ДанныеВыбораПоМаркируемойПродукции);
			Если Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
				ДанныеВыбораПоМаркируемойПродукции.Свойство("ГоденДо", КлючиСвязи.СрокГодности);
			КонецЕсли;
			СтрокиТовар = Объект.Товары.НайтиСтроки(КлючиСвязи);
			Если СтрокиТовар.Количество() И СтрокиТовар[0].СтатусПроверкиГосИС = 1 Тогда
				ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(ЭтотОбъект,,Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьОчереднойШтрихкод();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования)
	
	Если РезультатОбработкиШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьДобавленныеИзмененныеСтроки(
		РезультатОбработкиШтрихкода.ДобавленныеСтроки, РезультатОбработкиШтрихкода.ИзмененныеСтроки, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДобавленныеИзмененныеСтроки(ДобавленныеСтроки, ИзмененныеСтроки, КэшированныеЗначения)
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект,,,КлючСвязиСтатусаСтрок(ЭтотОбъект));
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	
	Если ДобавленныеСтроки.Количество() = 0 И ИзмененныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокНоменклатуры = Новый Массив;
	
	Для Каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
		СобытияФормИСМППереопределяемый.ПриИзмененииНоменклатуры(
			ЭтотОбъект, ДобавленнаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий);
		СобытияФормИСМППереопределяемый.ПриИзмененииКоличестваЕдиниц(
			ЭтотОбъект, ДобавленнаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		СписокНоменклатуры.Добавить(ДобавленнаяСтрока.Номенклатура);
		
	КонецЦикла;
	
	Для Каждого ИзмененнаяСтрока Из ИзмененныеСтроки Цикл
		Если ИзмененнаяСтрока.Количество = 0 Тогда
			Объект.Товары.Удалить(ИзмененнаяСтрока);
		Иначе
			СобытияФормИСМППереопределяемый.ПриИзмененииКоличестваЕдиниц(
				ЭтотОбъект, ИзмененнаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
	
	ЗаполнитьСертификациюНоменклатурыПоСтроке(ЭтотОбъект, ДобавленныеСтроки);
	
	ЗаполнитьТаблицуПредставленийGTINОстатки();
	
КонецПроцедуры

//@skip-warning
&НаСервере
Функция Подключаемый_ВыполнитьДействие(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ЭтотОбъект);
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

#КонецОбласти

#Область КэшСтроки

&НаСервере
Процедура ПрименитьКешШтрихкодовУпаковок()
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект, , Истина, КлючСвязиСтатусаСтрок(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьКэшСтроки(Форма)
	
	Форма.ДанныеКешаСтроки = Новый Структура;
	Форма.ДанныеКешаСтроки.Вставить("Номенклатура");
	Форма.ДанныеКешаСтроки.Вставить("Характеристика");
	Форма.ДанныеКешаСтроки.Вставить("Серия");
	Форма.ДанныеКешаСтроки.Вставить("ИдентификаторПроисхожденияВЕТИС");
	Форма.ДанныеКешаСтроки.Вставить("СрокГодности");
	Форма.ДанныеКешаСтроки.Вставить("GTIN");
	
КонецПроцедуры

#КонецОбласти

#Область ФормаПроверкиИПодбора

&НаСервере
Процедура ОбновитьИнформациюОткрытияФормыПроверкиПодбора()
	
	Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукции.Видимость = Истина;
	ТекстНадписи = "";
	
	Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		
		Если ПравоИзменения Тогда
			
			ТекстНадписи = НСтр("ru = 'Продолжить подбор и проверку маркированной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Истина;
			
		Иначе
			
			ТекстНадписи = НСтр("ru = 'Промежуточные результаты подбора маркированной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик
		Или СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи
		Или СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи
		Или СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи Тогда
		
		Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено Тогда
			
			ТекстНадписи = НСтр("ru = 'Результаты подбора маркированной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			
		ИначеЕсли ПравоИзменения Тогда
			
			ТекстНадписи = НСтр("ru = 'Подобрать и проверить маркированную продукцию'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			
		Иначе
			
			Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукции.Видимость = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.ПустаяСсылка() Тогда
		
		Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукции.Видимость = Ложь;
		
	Иначе
		
		ТекстНадписи = НСтр("ru = 'Результаты подбора маркированной продукции'");
		Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.ДекорацияОтсканироватьПроверитьМаркируемуюПродукцию.Заголовок = ТекстНадписи;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт

	Прочитать();

КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)

	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусИСМП();
		ОбновитьИнформациюОткрытияФормыПроверкиПодбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация Тогда
		СобытияФормИСМПКлиентСервер.УправлениеДоступностьюЭлементовФормы(Форма);
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("ДокументОснование") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
		Элементы.ТоварыПерезаполнитьПоОснованию.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("ВариантЗаполненияДекларации") Тогда
		Элементы.ВариантФормированияАТКИСМП.Доступность = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС")
		                                                  И Объект.ВариантЗаполненияДекларации = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.АТК");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый.ПриПолученииДанныхИзТСД(
		Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект),
		ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеОперации()
	
	ДоступныОперацииНанесения = ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(Объект.ВидПродукции);
	ЭтоМолочнаяПродукция = (Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС"));
	ЭтоОбувь = (Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь"));
	
	Элементы.Операция.СписокВыбора.Очистить();
	Элементы.ОперацияНанесения.СписокВыбора.Очистить();
	
	Если ДоступныОперацииНанесения Тогда
		
		Для Каждого ОперацияНанесения Из ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки(Ложь) Цикл
			Элементы.Операция.СписокВыбора.Добавить(ОперацияНанесения);
		КонецЦикла;
		
	КонецЕсли;
	
	ВидыПродукцииОперацииИмпортСФТС = Новый Соответствие;
	ВидыПродукцииОперацииИмпортСФТС.Вставить(Перечисления.ВидыПродукцииИС.Духи, Истина);
	ВидыПродукцииОперацииИмпортСФТС.Вставить(Перечисления.ВидыПродукцииИС.Обувь, Истина);
	ВидыПродукцииОперацииИмпортСФТС.Вставить(Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность, Истина);
	ВидыПродукцииОперацииИмпортСФТС.Вставить(Перечисления.ВидыПродукцииИС.Фотоаппараты, Истина);
	ВидыПродукцииОперацииИмпортСФТС.Вставить(Перечисления.ВидыПродукцииИС.Шины, Истина);
	
	Элементы.Операция.СписокВыбора.Добавить(
		Перечисления.ВидыОперацийИСМП.Агрегация);
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(Объект.ВидПродукции, Ложь, Истина) Тогда
		
		Если Не ЭтоОбувь Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС);
		КонецЕсли;
		
		Если ВидыПродукцииОперацииИмпортСФТС.Получить(Объект.ВидПродукции) <> Неопределено Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС);
		КонецЕсли;
		
		Элементы.Операция.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ);
		
		Если ДоступныОперацииНанесения Тогда
			
			Элементы.ОперацияНанесения.СписокВыбора.Добавить(Перечисления.ВидыОперацийИСМП.ПустаяСсылка(),
				НСтр("ru = '<Выполнена независимо>'"));
			Для Каждого ОперацияНанесения Из ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки(Ложь) Цикл
				Элементы.ОперацияНанесения.СписокВыбора.Добавить(ОперацияНанесения);
			КонецЦикла;
		
		КонецЕсли;
		
		ИспользуетсяПереработкаНаСтороне = Истина;
		ИнтеграцияИСМППереопределяемый.ИспользуетсяПереработкаНаСтороне(ИспользуетсяПереработкаНаСтороне);
		
		Элементы.Операция.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору);
		
		Если ИспользуетсяПереработкаНаСтороне Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика);
		КонецЕсли;
		
		ДоступноПолучениеПродукцииОтФизическихЛиц = (Не ЭтоМолочнаяПродукция);
		Если ДоступноПолучениеПродукцииОтФизическихЛиц Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц);
		КонецЕсли;
		
		// Недоступно для отчетов производственной линии: требует цены/суммы
		Если ИспользуетсяПодсистемаВЕТИС Или Не ЭтоМолочнаяПродукция Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля);
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитМаркировкеОстатков(Объект.ВидПродукции) Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ДанныеДокументаАдрес) Тогда
		ДанныеДокумента = ПолучитьИзВременногоХранилища(ДанныеДокументаАдрес);
	Иначе
		ДанныеДокумента = Неопределено;
	КонецЕсли;
	
	Если ДанныеДокумента <> Неопределено
		И ДанныеДокумента.ВидПродукции = Объект.ВидПродукции Тогда
		
		Если ЗначениеЗаполнено(ДанныеДокумента.Операция)
			И Элементы.Операция.СписокВыбора.НайтиПоЗначению(ДанныеДокумента.Операция) = Неопределено Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				ДанныеДокумента.Операция);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДокумента.ОперацияНанесения)
			И Элементы.ОперацияНанесения.СписокВыбора.НайтиПоЗначению(ДанныеДокумента.ОперацияНанесения) = Неопределено Тогда
			Элементы.ОперацияНанесения.СписокВыбора.Добавить(
				ДанныеДокумента.ОперацияНанесения);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из Элементы.Операция.СписокВыбора Цикл
		ЭлементСписка.Представление = ИнтеграцияИСМПКлиентСервер.ПредставлениеВидаОперацииИСМП(ЭлементСписка.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора) Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность       = Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение") Тогда
		ОбработчикПерезаполненияПоОснованию(Ложь);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДанныеФормы()
	
	ЗаполнитьПредставлениеСертификации();
	ЗаполнитьПредставлениеТаможеннойДекларации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполненияПоОснованию(ЗадаватьВопрос = Истина)
	
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() > 0 И ЗадаватьВопрос Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные документа будут перезаполнены. Продолжить?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросОПерезаполнениииПоОснованиюПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Если Объект.ОтчетПроизводственнойЛинии Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОтчетПроизводственнойЛинии", Истина);
	КонецЕсли;
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидПродукцииНаСервере(ПерезаполнитьПоОснованию)
	
	ЗаполнитьДоступныеОперации();
	Если Элементы.Операция.СписокВыбора.НайтиПоЗначению(Объект.Операция) = Неопределено Тогда
		Объект.Операция = Элементы.Операция.СписокВыбора.Получить(0).Значение;
	КонецЕсли;
	
	ОбновитьДальнейшиеДействия();
	
	Если ПерезаполнитьПоОснованию И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПерезаполнитьПоОснованиюСервер();
	ИначеЕсли Объект.СоздаватьШтрихкодыУпаковок Тогда
		НоменклатураПриИзмененииСервер(Ложь);
	КонецЕсли;
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	ОбновитьПредставленияИКеши();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОперацииНанесенияЗавершение(РезультатВопроса, Действия) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ОперацияНанесения = ПредыдущаяОперация;
		Возврат;
	КонецЕсли;
	
	Если Действия.ОчиститьШтрихкодыУпаковок Тогда
		Объект.ШтрихкодыУпаковок.Очистить();
	КонецЕсли;
	
	ТребуетсяОбновитьДальнейшиеДействия = ЗначениеЗаполнено(Объект.ОперацияНанесения) <> ЗначениеЗаполнено(ПредыдущаяОперация);
	Если ТребуетсяОбновитьДальнейшиеДействия Тогда
		
		ОперацияНанесенияПриИзмененииНаСервере();
		
	КонецЕсли;
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОперацииЗавершение(РезультатВопроса, Действия) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Операция = ПредыдущаяОперация;
		Возврат;
	КонецЕсли;
	
	Если Действия.ОчиститьШтрихкодыАТК Тогда
		Объект.ШтрихкодыАТК.Очистить();
		Объект.ХешСумма = "";
	КонецЕсли;
	
	ОбработатьИзменениеНаСервере = Ложь;
	Если Действия.ОчиститьШтрихкодыУпаковок Тогда
		Объект.ШтрихкодыУпаковок.Очистить();
		СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.НеВыполнялось");
		ОбработатьИзменениеНаСервере = Истина;
	КонецЕсли;
	
	Если Действия.ОчиститьДокументОснование Тогда
		Объект.ДокументОснование = Неопределено;
		Если Объект.ОтчетПроизводственнойЛинии Тогда
			ОчиститьДанныеТаблицаПродукцииОснование(ДанныеТаблицаПродукцииОснование);
			ОчиститьСписокВыбораЭлементовШапки();
		КонецЕсли;
		ОбработатьИзменениеНаСервере = Истина;
	ИначеЕсли Действия.ПроверитьТипИденификатораВетис Тогда
		ОбработатьИзменениеНаСервере = Истина;
	КонецЕсли;
	
	Если ОбработатьИзменениеНаСервере Тогда
		ОперацияПриИзмененииНаСервере(Действия);
	КонецЕсли;
	
	Если Действия.ОчиститьТНВЭД Тогда
		ОчиститьТНВЭДТовары();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОперацияНанесения)
		И (ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Объект.Операция) <> Неопределено
		Или Не ДоступнаОперацияНанесенияПоВидуОперацииИСМП(Объект.Операция)) Тогда
		Объект.ОперацияНанесения = Неопределено;
	КонецЕсли;
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	ОбновитьПредставленияНаФорме();
	
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля") Тогда
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Истина, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Истина, "СтранаПроисхожденияПолеВвода");
	Иначе
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Неопределено, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Неопределено, "СтранаПроисхожденияПолеВвода");
	КонецЕсли;
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаСервере
Процедура ОперацияПриИзмененииНаСервере(Действия)
	
	ОчиститьНеиспользуемыеКолонкиТаблицыТовары();
	
	Если Объект.ОтчетПроизводственнойЛинии Тогда
		ОбновитьИденификаторПримененияВЕТИССрокГодности();
	КонецЕсли;
	
	Если Действия.УстановитьСтатусПоУмолчанию Тогда
		СтатусИСМП = Документы.МаркировкаТоваровИСМП.СтатусПоУмолчанию();
	КонецЕсли;
	
	Если Действия.ИзменениеДальнейшегоДействия Тогда
		ОбновитьДальнейшиеДействия();
	КонецЕсли;
	
	ОбновитьПредставленияИКеши();
	
КонецПроцедуры

&НаСервере
Процедура ОперацияНанесенияПриИзмененииНаСервере()
	
	ОчиститьНеиспользуемыеКолонкиТаблицыТовары();
	
	Если Объект.ОтчетПроизводственнойЛинии Тогда
		ОбновитьИденификаторПримененияВЕТИССрокГодности();
	КонецЕсли;
	
	ОбновитьДальнейшиеДействия();
	ОбновитьПредставленияИКеши();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИденификаторПримененияВЕТИССрокГодности()
	
	НужноЗначениеИдентификаторВЕТИС = Ложь;
	НужноЗначениеСрокГодности = Ложь;
	
	Если Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		
		ОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Объект.Операция);
		НужноЗначениеИдентификаторВЕТИС = ОперацииМаркировки.ТребуетсяЗаполнениеИдентификаторовПримененияВЕТИС
			И ИспользуетсяПодсистемаВЕТИС;
		
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Объект.ВидПродукции) Тогда
		НужноЗначениеСрокГодности = ЗначениеЗаполнено(Объект.ОперацияНанесения)
			Или ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Объект.Операция)<>Неопределено;
		
		Если Не НужноЗначениеИдентификаторВЕТИС Тогда
			Объект.ИдентификаторПроисхожденияВЕТИС = Неопределено;
		КонецЕсли;
		Если Не НужноЗначениеСрокГодности Тогда
			Объект.СрокГодности = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНеиспользуемыеКолонкиТаблицыТовары()
	
	НужноЗначениеИдентификаторВЕТИС = Ложь;
	НужноЗначениеСрокГодности = Ложь;
	Если Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		ОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Объект.Операция);
		НужноЗначениеИдентификаторВЕТИС = ОперацииМаркировки.ТребуетсяЗаполнениеИдентификаторовПримененияВЕТИС;
	КонецЕсли;
	Если ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Объект.ВидПродукции) Тогда
		НужноЗначениеСрокГодности = ЗначениеЗаполнено(Объект.ОперацияНанесения)
			Или ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Объект.Операция)<>Неопределено;
		
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			Если Не НужноЗначениеИдентификаторВЕТИС Тогда
				СтрокаТЧ.ИдентификаторПроисхожденияВЕТИС = Неопределено;
			КонецЕсли;
			Если Не НужноЗначениеСрокГодности Тогда
				СтрокаТЧ.СрокГодности = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДальнейшиеДействия()
	
	Реквизиты = Новый Структура(
		"Операция, ОперацияНанесения, ВариантЗаполненияДекларации");
	ЗаполнитьЗначенияСвойств(Реквизиты, Объект);
	
	ДальнейшиеДействия = Новый Массив;
	ДальнейшиеДействия.Добавить(Документы.МаркировкаТоваровИСМП.ДальнейшееДействиеПоУмолчанию(Реквизиты));
	
	ПараметрыОбновленияСтатуса = РегистрыСведений.СтатусыДокументовИСМП.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
		СтатусИСМП,
		ДальнейшиеДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаПродукцииПриЗавершении(РезультатВопроса, НовыйВидПродукции) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Или РезультатВопроса = Истина Тогда
		
		Объект.ВидПродукции = НовыйВидПродукции;
		
		Если Объект.ОтчетПроизводственнойЛинии Тогда
			Объект.ДанныеОтчетаПроизводственнойЛинии.Очистить();
			ОчиститьРеквизитыШапкиОтчетПроизводственнойЛинии();
		Иначе
			Объект.Товары.Очистить();
			Объект.ШтрихкодыУпаковок.Очистить();
		КонецЕсли;
		
		Объект.ДокументОснование = Неопределено;
		СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.НеВыполнялось");
		ВидПродукцииПриИзменении(Элементы.ВидПродукции, РезультатВопроса = Истина);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОрганизацияПриЗавершении(РезультатВопроса, НоваяОрганизация) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.Организация = НоваяОрганизация;
		ПриИзмененииОрганизации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизации()
	
	Объект.ШтрихкодыУпаковок.Очистить();
	СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.НеВыполнялось");
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.GTIN = "";
	КонецЦикла;
	
	ПроизводственныйОбъектЗаполнитьСписокВыбора(ЭтотОбъект, Истина);
	
	ОбновитьПредставленияИКеши();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииСервер(ЗаполнитьЗначения = Истина, ЗаполнитьКодТНВЭД = Истина)
	
	ЗаполнитьСлужебныеРеквизитыНоменклатуры(ЭтотОбъект, ЗаполнитьКодТНВЭД);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ЕстьИдентификаторВЕТИС = ИспользуетсяУказаниеИдентификатораВЕТИС(ЭтотОбъект);
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			
			ЗаполнитьСписокВыбораЭлементовШапки(Ложь, ЕстьИдентификаторВЕТИС);
			
			Если ЕстьИдентификаторВЕТИС Тогда
				ПриИзмененииИдентификаторПроисхожденияВЕТИС(ЭтотОбъект);
			КонецЕсли;
			
		ИначеЕсли ЕстьИдентификаторВЕТИС И ЗначениеЗаполнено(Объект.ИдентификаторПроисхожденияВЕТИС) Тогда
			
			НоменклатураСоответствуетСопоставленнойПродукции = НоменклатураСоответствуетСопоставленнойПродукцииВЕТИСПоИдентификаторуПроисхождения(
				Объект.ИдентификаторПроисхожденияВЕТИС,
				Номенклатура,
				Характеристика,
				Серия);
			
			Если Не НоменклатураСоответствуетСопоставленнойПродукции Тогда
				Объект.ИдентификаторПроисхожденияВЕТИС = Неопределено;
			КонецЕсли;
			
			Элементы.Характеристика.СписокВыбора.Очистить();
			Элементы.Серия.СписокВыбора.Очистить();
			Элементы.ИдентификаторПроисхожденияВЕТИС.СписокВыбора.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПрименитьУсловноеОформлениеХарактеристикаСерия();
	
КонецПроцедуры

&НаСервере
Процедура ХарактеристикаПриИзмененииСервер(ЗаполнитьЗначения = Истина)
	
	ЕстьИдентификаторВЕТИС = ИспользуетсяУказаниеИдентификатораВЕТИС(ЭтотОбъект);
	НеобходимоУказатьСерию = ИнтеграцияИСКлиентСервер.НеобходимоУказатьСерию(СтатусУказанияСерий);
	
	Если НеобходимоУказатьСерию Тогда
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика);
		ЗаполнитьСписокВыбораЭлементаФорма("Серия", СтруктураОтбора, ЗаполнитьЗначения);
	Иначе
		Элементы.Серия.СписокВыбора.Очистить();
	КонецЕсли;
	
	Если ЕстьИдентификаторВЕТИС
		И (НеобходимоУказатьСерию И ЗначениеЗаполнено(Серия)
		   Или Не НеобходимоУказатьСерию) Тогда
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Серия", Номенклатура, Характеристика,  Серия);
		ЗаполнитьСписокВыбораЭлементаФорма("ИдентификаторПроисхожденияВЕТИС", СтруктураОтбора, ЗаполнитьЗначения);
		ПриИзмененииИдентификаторПроисхожденияВЕТИС(ЭтотОбъект);
	Иначе
		Элементы.ИдентификаторПроисхожденияВЕТИС.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СерияПриИзмененииСервер(ЗаполнитьЗначения = Истина)
	
	ЕстьИдентификаторВЕТИС = ИспользуетсяУказаниеИдентификатораВЕТИС(ЭтотОбъект);
	
	Если ЕстьИдентификаторВЕТИС Тогда
		
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Серия", Номенклатура, Характеристика, Серия);
		ЗаполнитьСписокВыбораЭлементаФорма("ИдентификаторПроисхожденияВЕТИС", СтруктураОтбора, ЗаполнитьЗначения);
		
		ПриИзмененииИдентификаторПроисхожденияВЕТИС(ЭтотОбъект);
	Иначе
		Элементы.ИдентификаторПроисхожденияВЕТИС.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВариантЗаполненияДекларацииЗавершение(РезультатВопроса, Параметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ВариантЗаполненияДекларации = Параметры.ПредыдущийВариантЗаполненияДекларации;
		Возврат;
	КонецЕсли;
	
	Если Параметры.ОчиститьШтрихкодыАТК Тогда
		Объект.ШтрихкодыАТК.Очистить();
		Объект.ХешСумма = "";
	КонецЕсли;
	
	ПредыдущийВариантЗаполненияДекларации = Объект.ВариантЗаполненияДекларации;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ВариантЗаполненияДекларации");
	ВариантЗаполненияДекларацииПриИзмененииНаСервере();
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВариантФормированияАТКЗавершение(РезультатВопроса, Параметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ВариантФормированияАТКИСМП = Параметры.ПредыдущийВариантФормированияАТКИСМП;
		Возврат;
	КонецЕсли;
	
	Если Параметры.ОчиститьШтрихкодыАТК Тогда
		Объект.ШтрихкодыАТК.Очистить();
		Объект.ХешСумма = "";
		ВариантЗаполненияДекларацииПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВариантЗаполненияДекларацииПриИзмененииНаСервере()
	
	СтатусИСМП = Документы.МаркировкаТоваровИСМП.СтатусПоУмолчанию();
	ОбновитьДальнейшиеДействия();
	ОбновитьПредставленияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОтчетПроизводственнойЛинииЗавершение(РезультатВопроса, Параметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ОтчетПроизводственнойЛинии = Не Объект.ОтчетПроизводственнойЛинии;
		Возврат;
	КонецЕсли;
	
	Если Параметры.ОчиститьТовары Тогда
		Объект.Товары.Очистить();
		Объект.ШтрихкодыУпаковок.Очистить();
	КонецЕсли;
	
	Если Параметры.ОчиститьДанныеОтчетаПроизводственнойЛинии Тогда
		Объект.ДанныеОтчетаПроизводственнойЛинии.Очистить();
	КонецЕсли;
	
	Если Не Объект.ОтчетПроизводственнойЛинии Тогда
		ОчиститьРеквизитыШапкиОтчетПроизводственнойЛинии();
		Объект.СоздаватьШтрихкодыУпаковок = Ложь;
		ПриИзмененииСоздаватьШтрихкодыУпаковок(Ложь);
		ОчиститьДанныеТаблицаПродукцииОснование(ДанныеТаблицаПродукцииОснование);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПерезаполнитьПоОснованиюСервер();
	КонецЕсли;
	
	ОтборСтрок      = "Все";
	УстановитьОтборСтрок(ЭтотОбъект);
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияИКеши()
	
	ОбновитьПредставленияНаФорме();
	ОбновлениеКешей();
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеКешей()
	
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(ЭтотОбъект);
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект,,,КлючСвязиСтатусаСтрок(ЭтотОбъект));
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ВидПродукцииУказан()
	
	Если Не ЗначениеЗаполнено(Объект.ВидПродукции) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан вид продукции'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияСертификатовНоменклатурыСервер(СписокНоменклатуры)
	
	СертификатыНоменклатуры = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ПриЗаполненииСертификатовНоменклатуры(СписокНоменклатуры, СертификатыНоменклатуры);
	
	Возврат СертификатыНоменклатуры;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияТаможеннойДекларацииНоменклатурыСервер(СписокНоменклатуры)
	
	СертификатыНоменклатуры = Новый Соответствие;
	
	Возврат СертификатыНоменклатуры;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ЗаполнениеПараметровТовары(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСписка Из ДополнительныеПараметры Цикл
		
		СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(СтрокаСписка);
		
		ЗаполнениеТаможеннойДекларации = Ложь;
		
		Для Каждого КлючИзНачение Из Результат Цикл
			СтрокаТовары[КлючИзНачение.Ключ] = КлючИзНачение.Значение;
			Если КлючИзНачение.Ключ = "РегистрационныйНомерДекларации" Тогда
				ЗаполнениеТаможеннойДекларации = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаполнениеТаможеннойДекларации Тогда
			СтрокаТовары.ТаможеннаяДекларация = ПредставлениеТаможеннойДекларации(
				СтрокаТовары.РегистрационныйНомерДекларации,
				СтрокаТовары.ДатаДекларации);
				
			ОбновитьКэшТаможеннойДекларацииКлиентСервер(
					ЭтотОбъект,
					СтрокаТовары.РегистрационныйНомерДекларации,
					СтрокаТовары.ДатаДекларации,
					СтрокаТовары.Номенклатура);
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#Область РаботаСТСД

#Область Загрузка

&НаКлиенте
Процедура ОпределитьНоменклатуруОтчетаПроизводственнойЛинии(Штрихкоды)
	
	Если Штрихкоды.Количество() Тогда
		
		ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект);
		ОбработатьПолученныеШтрихкодыНаСервере(Штрихкоды, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныеШтрихкодыНаСервере(ШтрихКоды, ПараметрыСканирования)
	
	КешДанныхРазбора                = Новый Соответствие;
	НастройкиРазбораКодаМаркировки  = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(Объект.ВидПродукции);
	ПроверятьАлфавитКодовМаркировки = Ложь;
	
	Для Каждого ДанныеШтрихкода Из ШтрихКоды Цикл
		
		Если ДанныеШтрихкода.ФорматBase64 Тогда
			Штрихкод = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(ДанныеШтрихкода.Штрихкод);
		Иначе
			Штрихкод = ДанныеШтрихкода.Штрихкод;
		КонецЕсли;
		
		ДанныеРазбораШтрихкода = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкода(
			Штрихкод, Объект.ВидПродукции, КешДанныхРазбора,
			НастройкиРазбораКодаМаркировки, ПроверятьАлфавитКодовМаркировки);
		
		ДанныеРазбораИПримечание = КешДанныхРазбора[Штрихкод];
		Если ДанныеРазбораИПримечание = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеРазбораИПримечание.ДанныеРазбора = Неопределено
			Или Не ДанныеРазбораИПримечание.ДанныеРазбора.СоставКодаМаркировки.Свойство("EAN")
			Или Не ЗначениеЗаполнено(ДанныеРазбораИПримечание.ДанныеРазбора.СоставКодаМаркировки.EAN) Тогда
			Продолжить;
		КонецЕсли;
		
		ВозможнаГрупповаяУпаковка = ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковка(
			ДанныеРазбораШтрихкода.ВидУпаковки,
			ДанныеРазбораИПримечание.ДанныеРазбора);
		
		Если (Не ЗначениеЗаполнено(ДанныеРазбораШтрихкода.ВидУпаковки) И Не ВозможнаГрупповаяУпаковка)
			Или (ДанныеРазбораИПримечание.ПримечаниеКРазборуШтрихкода <> Неопределено
			     И ЗначениеЗаполнено(ДанныеРазбораИПримечание.ПримечаниеКРазборуШтрихкода.ТекстОшибки)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		EAN = ДанныеРазбораИПримечание.ДанныеРазбора.СоставКодаМаркировки.EAN;
		Если ЗначениеЗаполнено(EAN) Тогда
			
			ШтрихкодыEAN = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(EAN);
			ИнформацияПоШтрихкодамEAN = ШтрихкодированиеИС.ДанныеПоШтрихкодамEAN(ШтрихкодыEAN, ПараметрыСканирования);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ШтрихкодEAN", EAN);
			
			НайденныеСтроки = ИнформацияПоШтрихкодамEAN.НайтиСтроки(СтруктураПоиска);
		
			Если НайденныеСтроки <> Неопределено 
				И НайденныеСтроки.Количество() = 1 Тогда
				
				Если (Номенклатура <> НайденныеСтроки[0].Номенклатура
					Или Характеристика <> НайденныеСтроки[0].Характеристика) Тогда
					
					ЗаполнитьЗначенияСвойств(ЭтотОбъект, НайденныеСтроки[0],"Номенклатура, Характеристика, Серия");
					НоменклатураПриИзмененииСервер(Ложь);
					
				КонецЕсли;
				
			Иначе
				
				Номенклатура   = Неопределено;
				Характеристика = Неопределено;
				Серия          = Неопределено;
				НоменклатураПриИзмененииСервер(Ложь, Ложь);
				
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДПослеАвторизации(РезультатАвторизации, Штрихкоды) Экспорт
	
	Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, АвторизацияЗапрашивалась = Неопределено) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,НСтр("ru = 'В полученных данных не содержится информации о считанных штриховых кодах'"));
		Возврат;
		
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	ШтрихкодированиеИСКлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	
	ЗагрузкаДанныхТСД = ОбработатьПолученныеДанныеТСДНаСервере(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения);
	
	Если ЗагрузкаДанныхТСД.ТребуетсяАвторизация Тогда
		
		Если АвторизацияЗапрашивалась = Истина Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Загрузка данных недоступна: авторизация в сервисе не пройдена'"));
			
			ЗагрузкаДанныхТСД = Неопределено;
			
			Возврат;
			
		КонецЕсли;
		
		ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
			ИнтерфейсАвторизацииИСМПКлиент.ПараметрыЗапросаКлючаСессии(Объект.Организация, Объект.ВидПродукции),
			Новый ОписаниеОповещения("ЗагрузитьИзТСДПослеАвторизации", ЭтотОбъект, Штрихкоды));
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ОбщаяОшибка Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		
		Если ТипЗнч(ЗагрузкаДанныхТСД.ТекстОбщейОшибки) = Тип("ФорматированнаяСтрока") Тогда
			ПараметрыОткрытияФормы.ТекстОшибкиФорматированнаяСтрока = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		Иначе
			ПараметрыОткрытияФормы.ТекстОшибки = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		КонецЕсли;
		
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		ЗагрузкаДанныхТСД = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ЕстьОшибкиВДереве Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(Объект.ВидПродукции);
		ПараметрыОткрытияФормы.АдресДереваУпаковок = ЗагрузкаДанныхТСД.АдресДереваУпаковок; 
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура("ВсеШтрихкоды, ШтрихкодыДляСопоставления",
			ЗагрузкаДанныхТСД.ШтрихкодыТСД, ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления);
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления, ЭтотОбъект, ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	ОбработатьПолученныеДанныеТСД();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеШтрихкодовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ШтрихкодированиеИСВызовСервера.ОчиститьОтложенныеКодыМаркировки(КэшМаркируемойПродукции);
		Возврат;
	КонецЕсли;
	
	Если Результат.НайденыНезарегистрированныеТовары Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			Результат.ОтложенныеТовары, ЭтотОбъект, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	Подключаемый_ПолученыДанныеИзТСД(ДополнительныеПараметры.ВсеШтрихкоды);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, ПараметрыСканирования, КэшированныеЗначения)
	
	Результат = ГрупповаяОбработкаШтрихкодовИС.ОбработатьПолученныеДанныеТСДВДокументе(ЭтотОбъект, ШтрихкодыТСД, ПараметрыСканирования);
	
	Если Результат.ТребуетсяАвторизация
		Или Результат.ОбщаяОшибка
		Или Результат.ШтрихкодыДляСопоставления.Количество() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ОбработатьДобавленныеИзмененныеСтроки(Результат.ДобавленныеСтроки, Результат.ИзмененныеСтроки, КэшированныеЗначения);
	Результат.ДобавленныеСтроки = Новый Массив;
	Результат.ИзмененныеСтроки  = Новый Массив;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД()
	
	Если ЗагрузкаДанныхТСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Всего Тогда
		ШтрихкодированиеИСКлиент.ОповеститьОбОкончанииОбработкиДанныхТСД();
		ЗагрузкаДанныхТСД = Неопределено;
	Иначе
		Штрихкод = ЗагрузкаДанныхТСД.ШтрихкодыТСД[ЗагрузкаДанныхТСД.Обработано];
		ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Обработано + 1;
		
		Если ЗначениеЗаполнено(Штрихкод.Штрихкод) Тогда
			
			ОбработатьКодМаркировки(Штрихкод.РезультатОбработки.ДанныеШтрихкода);
			
		Иначе
			
			ОбработатьОчереднойШтрихкод();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОчереднойШтрихкод()
	ПодключитьОбработчикОжидания("ОбработатьПолученныеДанныеТСД", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСертификатыНоменклатурыВКэш(Форма, СписокНоменклатуры)
	
	СертификатыНоменклатуры = ИнформацияСертификатовНоменклатурыСервер(СписокНоменклатуры);
	
	Для Каждого КлючЗначение Из СертификатыНоменклатуры Цикл
		
		Номенклатура = КлючЗначение.Ключ;
		Для Каждого Сертификат Из КлючЗначение.Значение Цикл
			
			ОбновитьКэшСертификацииКлиентСервер(
				Форма, Сертификат.ВидСертификации, Сертификат.НомерСертификации, Сертификат.ДатаСертификации, Номенклатура);
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьРегистрациюДТВКэш(Форма, СписокНоменклатуры)
	
	ТаможеннаяДекларация = ИнформацияТаможеннойДекларацииНоменклатурыСервер(СписокНоменклатуры);
	
	Для Каждого КлючЗначение Из ТаможеннаяДекларация Цикл
		
		Номенклатура = КлючЗначение.Ключ;
		Для Каждого Регистрация Из КлючЗначение.Значение Цикл
			
			ОбновитьКэшТаможеннойДекларацииКлиентСервер(
				Форма, Регистрация.РегистрационныйНомерДекларации, Регистрация.ДатаДекларации, Номенклатура);
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает параметры выбора страны мира.
//
//Параметры:
//   Форма                     - ФормаКлиентскогоПриложения - форма, в которой нужно установить параметры выбора.
//   ТолькоСтраныУчастникиЕАЭС - Неопределено, Булево - Признак страны-участника ЕАЭС.
//   ИмяПоляВвода              - Строка - имя поля ввода номенклатуры.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСтраныМира(Форма, ТолькоСтраныУчастникиЕАЭС = Неопределено, ИмяПоляВвода = "Страна") Экспорт
	
	ПараметрыВыбора = Новый Массив;
	
	Если ТолькоСтраныУчастникиЕАЭС <> Неопределено Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.УчастникЕАЭС", ТолькоСтраныУчастникиЕАЭС));
	КонецЕсли;
	
	Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючСвязиСтатусаСтрок(Форма, Номенклатура = Неопределено)
	
	МассивКлючейСвязи = Новый Массив;
	
	Если ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Форма.Объект.Операция) <> Неопределено
		Или ЗначениеЗаполнено(Форма.Объект.ОперацияНанесения) Тогда
		
		Если Форма.Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
			МассивКлючейСвязи.Добавить("ИдентификаторПроисхожденияВЕТИС");
			МассивКлючейСвязи.Добавить("СрокГодности");
		ИначеЕсли Форма.Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС") Тогда
			МассивКлючейСвязи.Добавить("СрокГодности");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		МассивКлючейСвязи.Добавить("GTIN");
	КонецЕсли;
	
	Возврат СтрСоединить(МассивКлючейСвязи, ",");
	
КонецФункции

&НаКлиенте
Процедура ОпределитьФорматРедактированияСрокГодности()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Объект.ВидПродукции) Тогда
		ФорматДаты = "ДФ=dd.MM.yyyy;";
		Если ТекущиеДанные.СкоропортящаясяПродукцияВЕТИС Тогда
			ФорматДаты = "ДФ='dd.MM.yyyy HH:mm';";
		КонецЕсли;
		Элементы.ТоварыСрокГодности.ФорматРедактирования = ФорматДаты;
	Иначе
		ТекущиеДанные.СрокГодности = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматСрокГодности(Форма)

	Если ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Форма.Объект.ВидПродукции) Тогда
		ФорматДаты = "ДФ=dd.MM.yyyy;";

		Если Форма.Объект.СкоропортящаясяПродукцияВЕТИС Тогда
			ФорматДаты = "ДФ='dd.MM.yyyy HH:mm';";
		Иначе
			Форма.Объект.СрокГодности = НачалоДня(Форма.Объект.СрокГодности);
		КонецЕсли;

		Форма.Элементы.СрокГодности.Формат               = ФорматДаты;
		Форма.Элементы.СрокГодности.ФорматРедактирования = ФорматДаты;
	Иначе
		Форма.Объект.СрокГодности = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеВЕТИС()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеВЕТИСПоСтроке(ЭтотОбъект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеВЕТИСПоСтроке(Форма, ДобавленныеСтроки)
	
	Если Форма.Объект.ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Форма.Объект.ОперацияНанесения) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыВЕТИС = Новый Массив;
	Для Каждого СтрокаДанныхЗаполнения Из ДобавленныеСтроки Цикл
		Если Не ЗначениеЗаполнено(СтрокаДанныхЗаполнения.ИдентификаторПроисхожденияВЕТИС) Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторыВЕТИС.Добавить(СтрокаДанныхЗаполнения.ИдентификаторПроисхожденияВЕТИС);
	КонецЦикла;
	
	ДанныеВЕТИС = ДанныеИдентификаторовПроисхожденияВЕТИС(ИдентификаторыВЕТИС);
	
	Для Каждого ТекущиеДанные Из ДобавленныеСтроки Цикл
		
		СрокГодности    = '00010101';
		Скоропортящаяся = Ложь;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС) Тогда
			СрокГодности    = ДанныеВЕТИС[ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС].СрокГодности;
			Скоропортящаяся = ДанныеВЕТИС[ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС].Скоропортящаяся;
		КонецЕсли;
		
		ТекущиеДанные.СрокГодности = СрокГодности;
		ТекущиеДанные.СкоропортящаясяПродукцияВЕТИС = Скоропортящаяся;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииИдентификаторПроисхожденияВЕТИС(Форма)
	
	ЗаполнитьДанныеВЕТИСШапка(Форма);
	УстановитьФорматСрокГодности(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеВЕТИСШапка(Форма)
	
	Объект = Форма.Объект;

	Если Не Объект.ОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат;
	КонецЕсли;
	
	СрокГодности    = '00010101';
	Скоропортящаяся = Ложь;
	Идентификатор   = "";
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторПроисхожденияВЕТИС) Тогда
		
		ДанныеВЕТИС = ДанныеИдентификаторовПроисхожденияВЕТИС(Объект.ИдентификаторПроисхожденияВЕТИС);
		
		СрокГодности    = ДанныеВЕТИС[Объект.ИдентификаторПроисхожденияВЕТИС].СрокГодности;
		Скоропортящаяся = ДанныеВЕТИС[Объект.ИдентификаторПроисхожденияВЕТИС].Скоропортящаяся;
		Идентификатор   = ДанныеВЕТИС[Объект.ИдентификаторПроисхожденияВЕТИС].Идентификатор;
		
	КонецЕсли;
	
	Объект.СрокГодности                  = СрокГодности;
	Объект.СкоропортящаясяПродукцияВЕТИС = Скоропортящаяся;
	
	Форма.ИдентификаторПроисхожденияВЕТИССтрокой = Идентификатор;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеИдентификаторовПроисхожденияВЕТИС(ИдентификаторыПроисхождения)
	Возврат ИнтеграцияИСМПВЕТИС.ДанныеИдентификаторовПроисхождения(ИдентификаторыПроисхождения);
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыВЕТИСВКоллекции()
	
	Если Объект.ВидПродукции <> Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ОперацияНанесения) Тогда
		Возврат;
	КонецЕсли;
	
	Идентификаторы = Объект.Товары.Выгрузить(, "ИдентификаторПроисхожденияВЕТИС").ВыгрузитьКолонку("ИдентификаторПроисхожденияВЕТИС");
	ДанныеПоИдентификаторам = ИнтеграцияИСМПВЕТИС.ДанныеИдентификаторовПроисхождения(Идентификаторы);
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		ДанныеПоИдентификатору = ДанныеПоИдентификаторам.Получить(СтрокаТовары.ИдентификаторПроисхожденияВЕТИС);
		Если ДанныеПоИдентификатору <> Неопределено Тогда
			СтрокаТовары.СкоропортящаясяПродукцияВЕТИС = ДанныеПоИдентификатору.Скоропортящаяся;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИспользуетсяУказаниеИдентификатораВЕТИС(Форма)
	
	ИспользуетсяУказаниеИдентификатораВЕТИС = Ложь;
	ОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Форма.Объект.Операция);
	Если Форма.ИспользуетсяПодсистемаВЕТИС
		И Форма.Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
		И ОперацииМаркировки.ТребуетсяЗаполнениеИдентификаторовПримененияВЕТИС Тогда
		ИспользуетсяУказаниеИдентификатораВЕТИС = Истина;
	КонецЕсли;
	
	Возврат ИспользуетсяУказаниеИдентификатораВЕТИС;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуДанныхДокументаОснования()
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ЭтотОбъект);
	ТаблицаДанныхДокументаОснования = ШтрихкодированиеИС.ИнициализицияТаблицыДанныхДокумента(ПараметрыСканирования);
	
	ЭтоМолочнаяПродукцияВЕТИС = (Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС"));
	
	ЗаполнятьДанныеВЕТИС = ИспользуетсяПодсистемаВЕТИС И ЭтоМолочнаяПродукцияВЕТИС;
	ДанныеСформированы = Ложь;
	Если ЗаполнятьДанныеВЕТИС Тогда
		
		ИнтеграцияИСМПВЕТИС.СформироватьДанныеДокументаОснования(
			ТаблицаДанныхДокументаОснования, Объект.ДокументОснование, ДанныеСформированы);
		
		Если ЭтоМолочнаяПродукцияВЕТИС И ТаблицаДанныхДокументаОснования.Колонки.Найти("ДанныеИдентификатораПроисхожденияВЕТИС") <> Неопределено Тогда
			
			ТаблицаДанныхДокументаОснования.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС", Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
			Для Каждого СтрокаОснования Из ТаблицаДанныхДокументаОснования Цикл
				ЗаполнитьЗначенияСвойств(СтрокаОснования, СтрокаОснования.ДанныеИдентификатораПроисхожденияВЕТИС);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		ИнтеграцияИСМППереопределяемый.СформироватьТаблицуМаркируемойПродукцииДокумента(Объект.ДокументОснование,
			ТаблицаДанныхДокументаОснования, Объект.ВидПродукции);
	КонецЕсли;
	
	ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура");
	ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура, Характеристика");
	ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура, Характеристика, Серия");
	
	Если ЭтоАдресВременногоХранилища(ДанныеТаблицаПродукцииОснование) Тогда
		ПоместитьВоВременноеХранилище(ТаблицаДанныхДокументаОснования, ДанныеТаблицаПродукцииОснование);
	Иначе
		ДанныеТаблицаПродукцииОснование = ПоместитьВоВременноеХранилище(ТаблицаДанныхДокументаОснования, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИдентификатораПроисхожденияВЕТИСЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ОтчетПроизводственнойЛинии Тогда

		Объект.ИдентификаторПроисхожденияВЕТИС = Результат;
		ЗаполнитьДанныеВЕТИСШапка(ЭтотОбъект);
		УстановитьФорматСрокГодности(ЭтотОбъект);

	Иначе

		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС = Результат;
		ЗаполнитьДанныеВЕТИС();
		ОпределитьФорматРедактированияСрокГодности();

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НоменклатураСоответствуетСопоставленнойПродукцииВЕТИСПоИдентификаторуПроисхождения(ИдентификаторПроисхожденияВЕТИС, Номенклатура, Характеристика, Серия)

	ДанныеСопоставления = Новый Структура;
	ДанныеСопоставления.Вставить("Номенклатура", Номенклатура);
	ДанныеСопоставления.Вставить("Характеристика", Характеристика);
	ДанныеСопоставления.Вставить("Серия", Серия);

	Возврат ИнтеграцияИСМПВЕТИС.НоменклатураСоответствуетСопоставленнойПродукцииВЕТИСПоИдентификаторуПроисхождения(
		ИдентификаторПроисхожденияВЕТИС,
		ДанныеСопоставления);

КонецФункции

&НаСервереБезКонтекста
Функция СтатусыКодыМаркировкиОбработаны()
	
	СтатусыКодыМаркировки = Новый Массив;
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборот"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесены"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныИАгрегированы"));
	
	Возврат СтатусыКодыМаркировки;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтатусыКодыМаркировкиАгрегация()
	
	СтатусыКодыМаркировки = Новый Массив;
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияКПередаче"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОбрабатывается"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи"));
	
	Возврат СтатусыКодыМаркировки;
	
КонецФункции

#Область ЗаполнениеСлужебныхРеквизитовСоздаватьШтрихкодыУпаковок

&НаСервере
Процедура ЗаполнитьДанныеФормыПриСозданииНаСервере()
	
	Если Не Объект.ОтчетПроизводственнойЛинии Тогда
		ОчиститьДанныеТаблицаПродукцииОснование(ДанныеТаблицаПродукцииОснование);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЗаполнитьТаблицуДанныхДокументаОснования();
	Иначе
		ОчиститьДанныеТаблицаПродукцииОснование(ДанныеТаблицаПродукцииОснование);
	КонецЕсли;
	
	Если Объект.СоздаватьШтрихкодыУпаковок Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Объект, "Номенклатура, Характеристика, Серия, КодТНВЭД, ИдентификаторПроисхожденияВЕТИССтрокой");
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Объект, "КодТНВЭД, ИдентификаторПроисхожденияВЕТИССтрокой");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПриСозданииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Если Объект.СоздаватьШтрихкодыУпаковок Тогда
			
			ЗаполнитьСписокВыбораЭлементовШапки(Истина, ИспользуетсяУказаниеИдентификатораВЕТИС(ЭтотОбъект));
			
		ИначеЕсли ИспользуетсяУказаниеИдентификатораВЕТИС(ЭтотОбъект) Тогда
			
			ЗаполнитьСписокВыбораЭлементаФорма("ИдентификаторПроисхожденияВЕТИС",, Ложь);
			УстановитьФорматСрокГодности(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПрименитьУсловноеОформлениеХарактеристикаСерия();
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьУсловноеОформлениеХарактеристикаСерия(СписокРеквизитов = "")
	
	Если Не ЗначениеЗаполнено(СписокРеквизитов) Тогда
		СписокРеквизитов = "Характеристика, Серия";
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	Для Каждого СвойствоСтруктуры Из СтруктураРеквизитов Цикл
		СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, СвойствоСтруктуры.Ключ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнициализироватьСтруктуруЗаполненияСлужебныхРеквизитовНоменклатуры(ЗаполнитьКодТНВЭД)
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Номенклатура");
	СтруктураЗаполнения.Вставить("Характеристика");
	СтруктураЗаполнения.Вставить("Серия");
	СтруктураЗаполнения.Вставить("ХарактеристикиИспользуются");
	СтруктураЗаполнения.Вставить("ТипНоменклатуры");
	СтруктураЗаполнения.Вставить("СтатусУказанияСерий");
	
	Если ЗаполнитьКодТНВЭД Тогда
		СтруктураЗаполнения.Вставить("КодТНВЭД");
	КонецЕсли;
	
	Возврат СтруктураЗаполнения;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыНоменклатуры(Форма, ЗаполнитьКодТНВЭД)
	
	СтруктураЗаполнения = ИнициализироватьСтруктуруЗаполненияСлужебныхРеквизитовНоменклатуры(ЗаполнитьКодТНВЭД);
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Форма);
	СобытияФормИСПереопределяемый.ПриИзмененииНоменклатуры(Форма, СтруктураЗаполнения,, Форма.ПараметрыУказанияСерий);
	ЗаполнитьЗначенияСвойств(Форма, СтруктураЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораЭлементаФорма(ИмяЭлемента, СтруктураОтбора = Неопределено, ЗаполнитьЗначения = Истина)
	
	Если ЭтоАдресВременногоХранилища(ДанныеТаблицаПродукцииОснование) Тогда
		ТоварыДокументаОснования = ПолучитьИзВременногоХранилища(ДанныеТаблицаПродукцииОснование);
	Иначе
		ТоварыДокументаОснования = Неопределено;
	КонецЕсли;
	
	Если ТоварыДокументаОснования = Неопределено Или ТоварыДокументаОснования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = Элементы[ИмяЭлемента];
	Элемент.СписокВыбора.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия КАК Серия,
	|	&ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС
	|ПОМЕСТИТЬ ДанныеОснования
	|ИЗ
	|	&ДанныеОснования КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	%ТекстЗапросаПолей
	|ИЗ
	|	ДанныеОснования КАК ДанныеОснования
	|ГДЕ
	|	%ТекстУсловияОтбора
	|";
	
	Если ТоварыДокументаОснования.Колонки.Найти("ИдентификаторПроисхожденияВЕТИС") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИдентификаторПроисхожденияВЕТИС", "Т.ИдентификаторПроисхожденияВЕТИС");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИдентификаторПроисхожденияВЕТИС",  """""");
	КонецЕсли;
	
	ТекстЗапросаПолей = "";
	ТекстЗапросаПолей = ТекстЗапросаПолей + "ДанныеОснования." + ИмяЭлемента + " КАК " + ИмяЭлемента;

	ТекстУсловияОтбора = "ИСТИНА";
	Если СтруктураОтбора <> Неопределено Тогда
		
		Для Каждого ЭлементОтбора Из СтруктураОтбора Цикл

			ТекстУсловияОтбора = ТекстУсловияОтбора +" И " + ЭлементОтбора.Ключ + " = " + "&" +ЭлементОтбора.Ключ;
			Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);

		КонецЦикла;

	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстЗапросаПолей", ТекстЗапросаПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстУсловияОтбора", ТекстУсловияОтбора);

	Запрос.УстановитьПараметр("ДанныеОснования", ТоварыДокументаОснования);
	СгруппированнаяТаблица = Запрос.Выполнить().Выгрузить();
	Если СгруппированнаяТаблица.Количество() > 5 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЗаполнения Из СгруппированнаяТаблица Цикл
		Если ЗначениеЗаполнено(СтрокаЗаполнения[ИмяЭлемента]) Тогда
			Элемент.СписокВыбора.Добавить(СтрокаЗаполнения[ИмяЭлемента]);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполнитьЗначения Тогда
		
		Если СгруппированнаяТаблица.Количество() = 1 Тогда
			Если ИмяЭлемента = "ИдентификаторПроисхожденияВЕТИС" Тогда
				Объект[ИмяЭлемента] = СгруппированнаяТаблица[0][ИмяЭлемента];
			Иначе
				ЭтотОбъект[ИмяЭлемента] = СгруппированнаяТаблица[0][ИмяЭлемента];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораЭлементовШапки(Инициалзиация, ЕстьИдентификаторВЕТИС)
	
	Если Инициалзиация Тогда
		ЗаполнитьСписокВыбораЭлементаФорма("Номенклатура",, Ложь);
	КонецЕсли;
	
	Если ХарактеристикиИспользуются Тогда
		СтруктураОтбора = Новый Структура("Номенклатура", Номенклатура);
		ЗаполнитьСписокВыбораЭлементаФорма("Характеристика", СтруктураОтбора, Не Инициалзиация);
	Иначе
		Элементы.Характеристика.СписокВыбора.Очистить();
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.НеобходимоУказатьСерию(СтатусУказанияСерий) 
		И (ХарактеристикиИспользуются И ЗначениеЗаполнено(Характеристика)
		   Или Не ХарактеристикиИспользуются) Тогда
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика);
		ЗаполнитьСписокВыбораЭлементаФорма("Серия", СтруктураОтбора, Не Инициалзиация);
	Иначе
		Элементы.Серия.СписокВыбора.Очистить();
	КонецЕсли;
	
	Если ЕстьИдентификаторВЕТИС Тогда
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Серия", Номенклатура, Характеристика, Серия);
		ЗаполнитьСписокВыбораЭлементаФорма("ИдентификаторПроисхожденияВЕТИС", СтруктураОтбора, Не Инициалзиация);
	Иначе
		Элементы.ИдентификаторПроисхожденияВЕТИС.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыШапкиОтчетПроизводственнойЛинии()
	
	ОчиститьРеквизитыНастройкиСозданияШтрихкодовУпаковок();
	
	КодТНВЭД                               = Неопределено;
	ИдентификаторПроисхожденияВЕТИССтрокой = "";
	
	Объект.ИдентификаторПроисхожденияВЕТИС = Неопределено;
	Объект.СрокГодности                    = Неопределено;
	Объект.СкоропортящаясяПродукцияВЕТИС   = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыНастройкиСозданияШтрихкодовУпаковок()
	
	Номенклатура   = Неопределено;
	Характеристика = Неопределено;
	Серия          = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписокВыбораЭлементовШапки()
	
	Элементы.Номенклатура.СписокВыбора.Очистить();
	Элементы.Характеристика.СписокВыбора.Очистить();
	Элементы.Серия.СписокВыбора.Очистить();
	Элементы.ИдентификаторПроисхожденияВЕТИС.СписокВыбора.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДанныеТаблицаПродукцииОснование(ДанныеТаблицаПродукцииОснование)
	
	Если ЭтоАдресВременногоХранилища(ДанныеТаблицаПродукцииОснование) Тогда
		УдалитьИзВременногоХранилища(ДанныеТаблицаПродукцииОснование);
		ДанныеТаблицаПродукцииОснование = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект)
	
	Если ПараметрыОбновленияСтатуса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ТекущийОбъект.Ссылка,
		ПараметрыОбновленияСтатуса);
	
	ПараметрыОбновленияСтатуса = Неопределено;
	
КонецПроцедуры

#КонецОбласти
