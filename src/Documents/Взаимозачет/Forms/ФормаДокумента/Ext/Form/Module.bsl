
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Предопределенные значения
	ВидОперацииКорректировкаДолгаПокупателя = Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПокупателя;
	ВидОперацииКорректировкаДолгаПоставщику = Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику;
	
	ВидОперации = Объект.ВидОперации;
	
	Контрагент = Объект.КонтрагентИсточник;
	КонтрагентПолучатель = Объект.Контрагент;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Константы.ВалютаУчета.Получить()));
	Курс = ?(СтруктураПоВалюте.Курс = 0, 1, СтруктураПоВалюте.Курс);
	Кратность = ?(СтруктураПоВалюте.Курс = 0, 1, СтруктураПоВалюте.Кратность);
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	УстановитьСвязиПараметровВыбора();
	УстановитьВидимостьИДоступность();
	
	ПроверкаЗаполнениеНеВыполнялась = Истина;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	// МобильныйКлиент
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	// Конец МобильныйКлиент
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	НастроитьПодсказкуДляКорреспонденции(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступныеТипы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагент" Тогда
		Если ЗначениеЗаполнено(Параметр) Тогда
			Если Параметр = Объект.Контрагент
			 ИЛИ Параметр = Объект.КонтрагентИсточник Тогда
				УстановитьВидимостьИДоступность();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, ЗавершениеРаботы, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПроверкаЗаполнениеНеВыполнялась Тогда
		
		Если (Объект.Ссылка.Пустая() ИЛИ Модифицированность)
			И УправлениеНебольшойФирмойПовтИсп.ОбменСБухгалтериейНастроен() Тогда
			
			ТекстОшибки = "";
			ПроверитьКорректностьЗаполненияРеквизитовДокумента(ТекстОшибки);
			Если Не ПустаяСтрока(ТекстОшибки) Тогда
				
				Отказ = Истина;
				ОписаниеОповещенияЗакрытияФормыСОшибками = Новый ОписаниеОповещения("ОпределитьНеобходимостьЗакрытияФормыСОшибками",
					ЭтотОбъект);
				ПоказатьВопрос(ОписаниеОповещенияЗакрытияФормыСОшибками, ТекстОшибки, РежимДиалогаВопрос.ДаНет, ,
					КодВозвратаДиалога.Да, );
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе 
		
		ПроверкаЗаполнениеНеВыполнялась = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	// Оповещение об оплате.
	ОповеститьОбОплатеЗаказа = Ложь;
	ОповеститьОбОплатеСчета = Ложь;
	
	Для каждого ТекСтрока Из Объект.Дебитор Цикл
		ОповеститьОбОплатеСчета = ?(
			ОповеститьОбОплатеСчета,
			ОповеститьОбОплатеСчета,
			ЗначениеЗаполнено(ТекСтрока.СчетНаОплату)
		);
		ОповеститьОбОплатеЗаказа = ?(
			ОповеститьОбОплатеЗаказа,
			ОповеститьОбОплатеЗаказа,
			ЗначениеЗаполнено(ТекСтрока.Заказ)
		);
	КонецЦикла;
	
	Для каждого ТекСтрока Из Объект.Кредитор Цикл
		ОповеститьОбОплатеСчета = ?(
			ОповеститьОбОплатеСчета,
			ОповеститьОбОплатеСчета,
			ЗначениеЗаполнено(ТекСтрока.СчетНаОплату)
		);
		ОповеститьОбОплатеЗаказа = ?(
			ОповеститьОбОплатеЗаказа,
			ОповеститьОбОплатеЗаказа,
			ЗначениеЗаполнено(ТекСтрока.Заказ)
		);
	КонецЦикла;
	
	Если ОповеститьОбОплатеСчета Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплату"));
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
	КонецЕсли;

	Если ОповеститьОбОплатеЗаказа Тогда
		Оповестить("ОповещениеОбОплатеЗаказа");
	КонецЕсли;
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КорреспонденцияПриИзменении(Элемент)
	НастроитьПодсказкуДляКорреспонденции(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПередИзменением = ВидОперации;
	ВидОперации = Объект.ВидОперации;
	Если ВидОперации <> ВидОперацииПередИзменением Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.Взаимозачет") Тогда
			Объект.Договор = Неопределено;
			Объект.ДокументРасчетов = Неопределено;
			Объект.ПризнакАванса = Ложь;
			Объект.СуммаРасчетов = 0;
			Объект.Курс = 0;
			Объект.Кратность = 0;
			Объект.СуммаУчета = 0;
			Для каждого Строка Из Объект.Кредитор Цикл
				Строка.Договор = Неопределено;
				Строка.Документ = Неопределено;
				Строка.Заказ = Неопределено;
				Строка.СчетНаОплату = Неопределено;
			КонецЦикла;
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПокупателя") Тогда
			Объект.Кредитор.Очистить();
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику") Тогда
			Объект.Дебитор.Очистить();
			Для каждого Строка Из Объект.Кредитор Цикл
				Строка.Договор = Неопределено;
				Строка.Документ = Неопределено;
				Строка.Заказ = Неопределено;
				Строка.СчетНаОплату = Неопределено;
			КонецЦикла;
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.КорректировкаДолгаПокупателя") Тогда
			Объект.Кредитор.Очистить();
			Объект.Контрагент = Неопределено;
			Объект.ДокументРасчетов = Неопределено;
			Объект.ПризнакАванса = Ложь;
			Объект.СуммаРасчетов = 0;
			Объект.Курс = 0;
			Объект.Кратность = 0;
			Объект.СуммаУчета = 0;
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику") Тогда
			Объект.Дебитор.Очистить();
			Объект.КонтрагентИсточник = Неопределено;
			Объект.ДокументРасчетов = Неопределено;
			Объект.ПризнакАванса = Ложь;
			Объект.СуммаРасчетов = 0;
			Объект.Курс = 0;
			Объект.Кратность = 0;
			Объект.СуммаУчета = 0;
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПрочийВзаимозачет") Тогда
			Объект.Договор = Неопределено;
			Объект.ДокументРасчетов = Неопределено;
			Объект.ПризнакАванса = Ложь;
			Объект.СуммаРасчетов = 0;
			Объект.Курс = 0;
			Объект.Кратность = 0;
			Объект.СуммаУчета = 0;
			Объект.Дебитор.Очистить();
			Объект.Кредитор.Очистить();
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ЗачетАвансовПокупателя")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику") Тогда
			Объект.Договор = Неопределено;
			Объект.ДокументРасчетов = Неопределено;
			Объект.ПризнакАванса = Ложь;
			Объект.СуммаРасчетов = 0;
			Объект.Курс = 0;
			Объект.Кратность = 0;
			Объект.СуммаУчета = 0;
			Объект.Дебитор.Очистить();
			Объект.Кредитор.Очистить();
			Объект.Контрагент = Объект.КонтрагентИсточник;
		КонецЕсли;
		УстановитьСвязиПараметровВыбора();
		УстановитьВидимостьИДоступность();
		УстановитьДоступныеТипы();
		ОпределитьВидимостьНастроекУчетаВНалогообложении();
		НастроитьПодсказкуДляКорреспонденции(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ВидОперацииПриИзменении()

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ЗачетАвансовПокупателя")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику") Тогда
		Объект.Контрагент = Объект.КонтрагентИсточник;
	КонецЕсли;
		
	Если Контрагент <> Объект.КонтрагентИсточник Тогда
		Для каждого Строка Из Объект.Дебитор Цикл
			Строка.Договор = Неопределено;
			Строка.Документ = Неопределено;
			Строка.Заказ = Неопределено;
			Строка.СчетНаОплату = Неопределено;
		КонецЦикла;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику") Тогда
			Для каждого Строка Из Объект.Кредитор Цикл
				Строка.Договор = Неопределено;
				Строка.Документ = Неопределено;
				Строка.Заказ = Неопределено;
				Строка.СчетНаОплату = Неопределено;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Контрагент = Объект.КонтрагентИсточник;
	
КонецПроцедуры // КонтрагентПриИзменении()

&НаКлиенте
Процедура КонтрагентПолучательПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
	Если КонтрагентПолучатель <> Объект.Контрагент Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.Взаимозачет") Тогда
			Для каждого Строка Из Объект.Кредитор Цикл
				Строка.Договор = Неопределено;
				Строка.Документ = Неопределено;
				Строка.Заказ = Неопределено;
				Строка.СчетНаОплату = Неопределено;
			КонецЦикла;
		КонецЕсли;
		Объект.Договор = Неопределено;
	КонецЕсли;
	КонтрагентПолучатель = Объект.Контрагент;
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Ссылка, Объект.Контрагент, Объект.Организация);
	Объект.Договор = СтруктураДанные.Договор;
	
КонецПроцедуры // КонтрагентПолучательПриИзменении()

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
	Объект.ПодписьРуководителя = СтруктураДанные.ПодписьРуководителя;
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(
		Объект.Дата,
		Объект.Договор
	);
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Курс      = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
		Объект.Кратность = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	КонецЕсли;
	
	РассчитатьСуммуУчета(Объект);
	
КонецПроцедуры // ДоговорПриИзменении()

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаРасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуУчета(Объект);
	
КонецПроцедуры // СуммаРасчетовПриИзменении()

&НаКлиенте
Процедура КурсПриИзменении(Элемент)
	
	РассчитатьСуммуУчета(Объект);
	
КонецПроцедуры // КурсПриИзменении()

&НаКлиенте
Процедура КратностьПриИзменении(Элемент)
	
	РассчитатьСуммуУчета(Объект);
	
КонецПроцедуры // КратностьПриИзменении()

&НаКлиенте
Процедура СуммаУчетаПриИзменении(Элемент)
	
	РассчитатьСуммуРасчетов(Объект);
	
КонецПроцедуры // СуммаУчетаПриИзменении()

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект,
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРасчетовПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.ДокументРасчетов) = Тип("ДокументСсылка.ПоступлениеВКассу")
	 ИЛИ ТипЗнч(Объект.ДокументРасчетов) = Тип("ДокументСсылка.ПоступлениеНаСчет")
	 ИЛИ ТипЗнч(Объект.ДокументРасчетов) = Тип("ДокументСсылка.РасходИзКассы")
	 ИЛИ ТипЗнч(Объект.ДокументРасчетов) = Тип("ДокументСсылка.РасходСоСчета")
	 ИЛИ ТипЗнч(Объект.ДокументРасчетов) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Объект.ПризнакАванса = Истина;
	Иначе
		Объект.ПризнакАванса = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВидПрочегоВзаимозачетаПриИзмененииНаСервере()
	
	УстановитьВидимостьИДоступностьДляВидаПрочегоВзаимозачета();
	
	Объект.Кредитор.Очистить();
	Объект.Дебитор.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПрочегоВзаимозачетаПриИзменении(Элемент)
	
	ВидПрочегоВзаимозачетаПриИзмененииНаСервере();
	УстановитьДоступныеТипы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДебитор

&НаКлиенте
Процедура ДебиторДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Дебитор.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(
		Объект.Дата,
		СтрокаТабличнойЧасти.Договор
	);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда 
		СтрокаТабличнойЧасти.Курс      = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
		СтрокаТабличнойЧасти.Кратность = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	КонецЕсли;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДебиторДоговорПриИзменении()

&НаКлиенте
Процедура ДебиторДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Дебитор.ТекущиеДанные;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.КонтрагентИсточник,
		ТекущиеДанные.Договор, Объект.ВидОперации, "Дебитор");
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторКурсПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Дебитор.ТекущиеДанные;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДебиторКурсПриИзменении()

&НаКлиенте
Процедура ДебиторКратностьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Дебитор.ТекущиеДанные;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДебиторКратностьПриИзменении()

&НаКлиенте
Процедура ДебиторСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Дебитор.ТекущиеДанные;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДебиторСуммаРасчетовПриИзменении()

&НаКлиенте
Процедура ДебиторСуммаУчетаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Дебитор.ТекущиеДанные;
	
	РассчитатьСуммуРасчетов(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДебиторСуммаУчетаПриИзменении()

&НаКлиенте
Процедура ДебиторДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Дебитор.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
	 Или ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет")
	 Или ((ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходСоСчета")
	 	Или ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходИзКассы"))
	 	И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику")) Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Истина;
	Иначе
		СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ДебиторДокументПриИзменении()

&НаКлиенте
Процедура ДебиторПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Дебитор.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.ПоступлениеВКассу")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКредитор

&НаКлиенте
Процедура КредиторДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Кредитор.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(
		Объект.Дата,
		СтрокаТабличнойЧасти.Договор
	);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда 
		СтрокаТабличнойЧасти.Курс      = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
		СтрокаТабличнойЧасти.Кратность = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	КонецЕсли;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // КредиторДоговорПриИзменении()

&НаКлиенте
Процедура КредиторДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику") Тогда
		КонтрагентКредитор = Объект.КонтрагентИсточник;
	Иначе
		КонтрагентКредитор = Объект.Контрагент;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Кредитор.ТекущиеДанные;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, КонтрагентКредитор,
		ТекущиеДанные.Договор, Объект.ВидОперации, "Кредитор");
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторКурсПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Кредитор.ТекущиеДанные;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДебиторКурсПриИзменении()

&НаКлиенте
Процедура КредиторКратностьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Кредитор.ТекущиеДанные;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // КредиторКратностьПриИзменении()

&НаКлиенте
Процедура КредиторСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Кредитор.ТекущиеДанные;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // КредиторСуммаРасчетовПриИзменении()

&НаКлиенте
Процедура КредиторСуммаУчетаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Кредитор.ТекущиеДанные;
	
	РассчитатьСуммуРасчетов(СтрокаТабличнойЧасти);
	
КонецПроцедуры // КредиторСуммаУчетаПриИзменении()

&НаКлиенте
Процедура КредиторДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Кредитор.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходИзКассы")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходСоСчета")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Истина;
	Иначе
		СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
	КонецЕсли;
	
КонецПроцедуры // КредиторДокументПриИзменении()

&НаКлиенте
Процедура КредиторПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Кредитор.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.РасходИзКассы")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.РасходСоСчета")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходИзКассы")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходСоСчета")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДекорацияПечатьНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиВзаимозачет", Новый Структура("КонтекстПечати",
		Объект), ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРасчетыСПокупателем(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику") Тогда
		ПодборРасчетыСПоставщикомДебитор();
	Иначе
		ПодборРасчетыСПокупателемФрагмент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРасчетыСПокупателемФрагмент()
	
	Если НЕ ЗначениеЗаполнено(Объект.КонтрагентИсточник) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале покупателя'"));
		Возврат;
	КонецЕсли;
	
	АдресДебиторВХранилище = ПоместитьДебиторВХранилище();
	
	ИмяТЧ = "Дебитор";
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресДебиторВХранилище", АдресДебиторВХранилище);
	ПараметрыПодбора.Вставить("Компания", Компания);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Контрагент", Объект.КонтрагентИсточник);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("ТолькоДолги", Объект.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийВзаимозачет.ПрочийВзаимозачет"));
	ПараметрыПодбора.Вставить("ДебиторСуммаУчетаИтог", Объект.Дебитор.Итог("СуммаУчета"));
	ПараметрыПодбора.Вставить("ВидОперации", Объект.ВидОперации);
	ПараметрыПодбора.Вставить("ИмяТЧ", ИмяТЧ);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовИДолговПокупателей", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("ПодборРасчетыСПокупателемЗавершение", ЭтотОбъект,
		Новый Структура("АдресДебиторВХранилище", АдресДебиторВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРасчетыСПокупателемЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	АдресДебиторВХранилище = ДополнительныеПараметры.АдресДебиторВХранилище;
	
	Результат = Результат1;
	Если Результат = КодВозвратаДиалога.OK Тогда
		ПолучитьДебиторИзХранилища(АдресДебиторВХранилище, ?(ДополнительныеПараметры.Свойство("ИмяТЧ"),
			ДополнительныеПараметры.ИмяТЧ, ""));
	КонецЕсли;
	
КонецПроцедуры // ПодборРасчетыСПокупателем()

&НаКлиенте
Процедура ПодборРасчетыСПоставщиком(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ЗачетАвансовПокупателя") Тогда
		ПодборРасчетыСПокупателемКредитор();
	Иначе
		ПодборРасчетыСПоставщикомФрагмент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРасчетыСПокупателемКредитор()
	
	Если НЕ ЗначениеЗаполнено(Объект.КонтрагентИсточник) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале покупателя'"));
		Возврат;
	КонецЕсли;
	
	АдресКредиторВХранилище = ПоместитьКредиторВХранилище();
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресДебиторВХранилище", АдресКредиторВХранилище);
	ПараметрыПодбора.Вставить("Компания", Компания);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Контрагент", Объект.КонтрагентИсточник);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("ТолькоДолги", Объект.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийВзаимозачет.ПрочийВзаимозачет"));
	ПараметрыПодбора.Вставить("ДебиторСуммаУчетаИтог", Объект.Дебитор.Итог("СуммаУчета"));
	ПараметрыПодбора.Вставить("ВидОперации", Объект.ВидОперации);
	ПараметрыПодбора.Вставить("ИмяТЧ", "Кредитор");
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовИДолговПокупателей", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("ПодборРасчетыСПоставщикомЗавершение", ЭтотОбъект,
		Новый Структура("АдресКредиторВХранилище, ИмяТЧ", АдресКредиторВХранилище, "Кредитор")));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРасчетыСПоставщикомДебитор()
	
	Если НЕ ЗначениеЗаполнено(Объект.КонтрагентИсточник) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале поставщика'"));
		Возврат;
	КонецЕсли;
	
	АдресДебиторВХранилище = ПоместитьДебиторВХранилище();
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресДебиторВХранилище", АдресДебиторВХранилище);
	ПараметрыПодбора.Вставить("Компания", Компания);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Контрагент", Объект.КонтрагентИсточник);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("ТолькоДолги", Объект.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийВзаимозачет.ПрочийВзаимозачет"));
	ПараметрыПодбора.Вставить("ДебиторСуммаУчетаИтог", Объект.Кредитор.Итог("СуммаУчета"));
	ПараметрыПодбора.Вставить("ВидОперации", Объект.ВидОперации);
	ПараметрыПодбора.Вставить("ИмяТЧ", "Дебитор");
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовИДолговПоставщикам", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("ПодборРасчетыСПокупателемЗавершение", ЭтотОбъект,
		Новый Структура("АдресДебиторВХранилище, ИмяТЧ", АдресДебиторВХранилище, "Дебитор")));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРасчетыСПоставщикомФрагмент()
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале поставщика'"));
		Возврат;
	КонецЕсли;
	
	АдресКредиторВХранилище = ПоместитьКредиторВХранилище();
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресДебиторВХранилище", АдресКредиторВХранилище);
	ПараметрыПодбора.Вставить("Компания", Компания);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	Если Объект.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику") Тогда
		ПараметрыПодбора.Вставить("Контрагент", Объект.КонтрагентИсточник);
	Иначе
		ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("ТолькоДолги", Объект.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийВзаимозачет.ПрочийВзаимозачет"));
	ПараметрыПодбора.Вставить("ДебиторСуммаУчетаИтог", Объект.Кредитор.Итог("СуммаУчета"));
	ПараметрыПодбора.Вставить("ВидОперации", Объект.ВидОперации);
	ПараметрыПодбора.Вставить("ИмяТЧ", "Кредитор");
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовИДолговПоставщикам", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("ПодборРасчетыСПоставщикомЗавершение", ЭтотОбъект,
		Новый Структура("АдресКредиторВХранилище", АдресКредиторВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРасчетыСПоставщикомЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	АдресКредиторВХранилище = ДополнительныеПараметры.АдресКредиторВХранилище;
	
	Результат = Результат1;
	Если Результат = КодВозвратаДиалога.OK Тогда
		ПолучитьКредиторИзХранилища(АдресКредиторВХранилище, ?(ДополнительныеПараметры.Свойство("ИмяТЧ"), ДополнительныеПараметры.ИмяТЧ, ""));
	КонецЕсли;
	
КонецПроцедуры // ПодборРасчетыСПоставщиком()

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованию(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Сообщение				= Новый СообщениеПользователю;
		Сообщение.Текст			= НСтр("ru = 'Выберите документ основание.'");
		Сообщение.ПутьКДанным	= "ДокументОснование";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса 	= НСтр("ru = 'Документ будет очищен и заполнен по документу-основанию. Продолжить?'");

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоДокументуОснованиюЗавершение", ЭтотОбъект), ТекстВопроса,
		РежимДиалогаВопрос.ДаНет, );
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;

	Если Ответ = КодВозвратаДиалога.Да Тогда

		ЗаполнитьПоДокументу();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборРасчетовСПрочимиКонтрагентами(Команда)
	
	ТекКонтрагент = ?(Объект.ВидПрочегоВзаимозачета = ПредопределенноеЗначение("Перечисление.ВидыПрочегоВзаимозачета.ДолгПрочегоКонтрагентаИДолгПередПоставщиком"), Объект.КонтрагентИсточник, Объект.Контрагент);
	Если НЕ ЗначениеЗаполнено(ТекКонтрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале контрагента!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидПрочегоВзаимозачета = ПредопределенноеЗначение("Перечисление.ВидыПрочегоВзаимозачета.ДолгПокупателяИДолгПрочемуКонтрагенту") Тогда
		АдресТЧВХранилище = ПоместитьКредиторВХранилище();
	Иначе
		АдресТЧВХранилище = ПоместитьДебиторВХранилище();
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресДебиторВХранилище", АдресТЧВХранилище);
	ПараметрыПодбора.Вставить("Компания", Компания);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Контрагент", ТекКонтрагент);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("СчетУчета", Объект.КорреспонденцияПрочиеРасчеты);
	ПараметрыПодбора.Вставить("ВидПрочегоВзаимозачета", Объект.ВидПрочегоВзаимозачета);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораПрочихДолгов", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("ПодборРасчетовСПрочимиКонтрагентамиЗавершение", ЭтотОбъект,
		Новый Структура("АдресДебиторВХранилище", АдресТЧВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРасчетовСПрочимиКонтрагентамиЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	АдресДебиторВХранилище = ДополнительныеПараметры.АдресДебиторВХранилище;
	
	Результат = Результат1;
	Если Результат = КодВозвратаДиалога.OK Тогда
		Если Объект.ВидПрочегоВзаимозачета = ПредопределенноеЗначение("Перечисление.ВидыПрочегоВзаимозачета.ДолгПокупателяИДолгПрочемуКонтрагенту") Тогда
			ПолучитьКредиторИзХранилища(АдресДебиторВХранилище);
		Иначе
			ПолучитьДебиторИзХранилища(АдресДебиторВХранилище);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодборРасчетыСПокупателем()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьПодсказкуДляКорреспонденции(Форма)
	
	ОтображениеПодсказкиКорреспонденции = ОтображениеПодсказки.ОтображатьСправа;
	СтандартнаяМаксимальнаяШирина = 40;
	МаксимальнаяШиринаСПодсказкой = 28;
	
	Если Форма.Объект.ВидОперации = Форма.ВидОперацииКорректировкаДолгаПокупателя Тогда
		Если Форма.Объект.Корреспонденция.Пустая() Тогда
			Форма.Элементы.Корреспонденция.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
			Форма.Элементы.Корреспонденция.МаксимальнаяШирина = СтандартнаяМаксимальнаяШирина;
		Иначе
			ТипСчета = УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(Форма.Объект.Корреспонденция, "ТипСчета");
			Если ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеДоходы") Тогда
				Форма.Элементы.Корреспонденция.ОтображениеПодсказки = ОтображениеПодсказкиКорреспонденции;
				Форма.Элементы.Корреспонденция.Подсказка = НСтр("ru = 'Увеличение долга'");
				Форма.Элементы.Корреспонденция.МаксимальнаяШирина = МаксимальнаяШиринаСПодсказкой;
			ИначеЕсли ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеРасходы") Тогда
				Форма.Элементы.Корреспонденция.ОтображениеПодсказки = ОтображениеПодсказкиКорреспонденции;
				Форма.Элементы.Корреспонденция.Подсказка = НСтр("ru = 'Уменьшение долга'");
				Форма.Элементы.Корреспонденция.МаксимальнаяШирина = МаксимальнаяШиринаСПодсказкой;
			Иначе
				Форма.Элементы.Корреспонденция.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
				Форма.Элементы.Корреспонденция.МаксимальнаяШирина = СтандартнаяМаксимальнаяШирина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Форма.Объект.ВидОперации = Форма.ВидОперацииКорректировкаДолгаПоставщику Тогда
		Если Форма.Объект.Корреспонденция.Пустая() Тогда
			Форма.Элементы.Корреспонденция.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
			Форма.Элементы.Корреспонденция.МаксимальнаяШирина = СтандартнаяМаксимальнаяШирина;
		Иначе
			ТипСчета = УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(Форма.Объект.Корреспонденция, "ТипСчета");
			Если ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеДоходы") Тогда
				Форма.Элементы.Корреспонденция.ОтображениеПодсказки = ОтображениеПодсказкиКорреспонденции;
				Форма.Элементы.Корреспонденция.Подсказка = НСтр("ru = 'Уменьшение долга'");
				Форма.Элементы.Корреспонденция.МаксимальнаяШирина = МаксимальнаяШиринаСПодсказкой;
			ИначеЕсли ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеРасходы") Тогда
				Форма.Элементы.Корреспонденция.ОтображениеПодсказки = ОтображениеПодсказкиКорреспонденции;
				Форма.Элементы.Корреспонденция.Подсказка = НСтр("ru = 'Увеличение долга'");
				Форма.Элементы.Корреспонденция.МаксимальнаяШирина = МаксимальнаяШиринаСПодсказкой;
			Иначе
				Форма.Элементы.Корреспонденция.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
				Форма.Элементы.Корреспонденция.МаксимальнаяШирина = СтандартнаяМаксимальнаяШирина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Форма.Элементы.Корреспонденция.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Форма.Элементы.Корреспонденция.МаксимальнаяШирина = СтандартнаяМаксимальнаяШирина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДебиторВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Дебитор.Выгрузить(,
			"Договор,
			|Документ,
			|Заказ,
			|СуммаРасчетов,
			|СуммаУчета,
			|Курс,
			|Кратность,
			|ПризнакАванса"
		),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьДебиторВХранилище()

&НаСервере
Процедура ПолучитьДебиторИзХранилища(АдресДебиторВХранилище, ИмяТЧ = "")
	
	ТаблицаДебитор = ПолучитьИзВременногоХранилища(АдресДебиторВХранилище);
	Объект.Дебитор.Очистить();
	Для каждого СтрокаДебитор Из ТаблицаДебитор Цикл
		
		Если ИмяТЧ = "Дебитор"
			И (Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ЗачетАвансовПокупателя
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику)
			И НЕ СтрокаДебитор.ПризнакАванса Тогда
			Продолжить;
		КонецЕсли;
		
		Строка = Объект.Дебитор.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаДебитор);
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДебиторИзХранилища()

&НаСервере
Функция ПоместитьКредиторВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Кредитор.Выгрузить(,
			"Договор,
			|Документ,
			|Заказ,
			|СуммаРасчетов,
			|СуммаУчета,
			|Курс,
			|Кратность,
			|ПризнакАванса"
		),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьКредиторВХранилище()

&НаСервере
Процедура ПолучитьКредиторИзХранилища(АдресКредиторВХранилище, ИмяТЧ = "")
	
	ТаблицаКредитор = ПолучитьИзВременногоХранилища(АдресКредиторВХранилище);
	Объект.Кредитор.Очистить();
	Для каждого СтрокаКредитор Из ТаблицаКредитор Цикл
		
		Если ИмяТЧ = "Кредитор"
			И (Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ЗачетАвансовПокупателя
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику)
			И СтрокаКредитор.ПризнакАванса Тогда
			Продолжить;
		КонецЕсли;
		
		Строка = Объект.Кредитор.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаКредитор);
	КонецЦикла;
	
КонецПроцедуры // ПолучитьКредиторИзХранилища()

&НаСервере
Процедура ЗаполнитьПоДокументу()
	
	ДокументОснование 	= Объект.ДокументОснование;
	
	// Очистим данные документа
	Объект.Дебитор.Очистить();
	Объект.Кредитор.Очистить();
	Документ = РеквизитФормыВЗначение("Объект");
	ЗаполнитьЗначенияСвойств(Документ, Документы.Взаимозачет.ПустаяСсылка(), , "Номер, Дата, ВидОперации");
	
	// Заполним по документу-основанию
	Документ.Заполнить(ДокументОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	Модифицированность = Истина;
	
КонецПроцедуры //ЗаполнитьПоДокументу()

&НаКлиенте
Процедура РассчитатьСуммуУчета(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.Курс      = ?(СтрокаТабличнойЧасти.Курс      = 0, 1, СтрокаТабличнойЧасти.Курс);
	СтрокаТабличнойЧасти.Кратность = ?(СтрокаТабличнойЧасти.Кратность = 0, 1, СтрокаТабличнойЧасти.Кратность);
	
	СтрокаТабличнойЧасти.СуммаУчета = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов, СтрокаТабличнойЧасти.Курс, Курс, СтрокаТабличнойЧасти.Кратность, Кратность);
	
КонецПроцедуры // РассчитатьСуммуУчета()

&НаКлиенте
Процедура РассчитатьСуммуРасчетов(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.Курс      = ?(СтрокаТабличнойЧасти.Курс = 0, 1, СтрокаТабличнойЧасти.Курс);
	СтрокаТабличнойЧасти.Кратность = ?(СтрокаТабличнойЧасти.Кратность = 0, 1, СтрокаТабличнойЧасти.Кратность);
	
	СтрокаТабличнойЧасти.СуммаРасчетов = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаУчета, Курс, СтрокаТабличнойЧасти.Курс, Кратность, СтрокаТабличнойЧасти.Кратность);
	
КонецПроцедуры // РассчитатьСуммуРасчетов()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, Договор)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", Договор.ВалютаРасчетов)
		)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	РазностьДат = ДокументыУНФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить(
		"Компания",
		Константы.УчетПоКомпании.Компания(Организация)
	);
	
	СтруктураДанные.Вставить("ПодписьРуководителя", Организация.ПодписьРуководителя);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервере
Процедура УстановитьСвязиПараметровВыбора()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.Взаимозачет") Тогда
		
		НовыйМассив = Новый Массив;
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "КонтрагентПолучатель");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторДоговор.СвязиПараметровВыбора = НовыеСвязи;
		
		НовыйМассив = Новый Массив;
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "КонтрагентПолучатель");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторДокумент.СвязиПараметровВыбора = НовыеСвязи;
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторЗаказ.СвязиПараметровВыбора = НовыеСвязи;
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
		
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Покупатель", Истина));
		Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
		Элементы.КонтрагентПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику") Тогда
		
		НовыйМассив = Новый Массив;
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторДоговор.СвязиПараметровВыбора = НовыеСвязи;
		
		НовыйМассив = Новый Массив;
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторДокумент.СвязиПараметровВыбора = НовыеСвязи;
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторЗаказ.СвязиПараметровВыбора = НовыеСвязи;
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
		
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
		Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
		Элементы.КонтрагентПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ЗачетАвансовПокупателя") Тогда
		
		НовыйМассив = Новый Массив;
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторДоговор.СвязиПараметровВыбора = НовыеСвязи;
		
		НовыйМассив = Новый Массив;
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторДокумент.СвязиПараметровВыбора = НовыеСвязи;
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторЗаказ.СвязиПараметровВыбора = НовыеСвязи;
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
		
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Покупатель", Истина));
		Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику") Тогда
		
		НовыйМассив = Новый Массив;
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторДоговор.СвязиПараметровВыбора = НовыеСвязи;
		
		НовыйМассив = Новый Массив;
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторДокумент.СвязиПараметровВыбора = НовыеСвязи;
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторЗаказ.СвязиПараметровВыбора = НовыеСвязи;
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
		
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
		Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
	Иначе
		
		НовыйФиксированныйМассив = Новый ФиксированныйМассив(Новый Массив);
		Элементы.Контрагент.ПараметрыВыбора = НовыйФиксированныйМассив;
		Элементы.КонтрагентПолучатель.ПараметрыВыбора = НовыйФиксированныйМассив;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПокупателя")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.КорректировкаДолгаПокупателя") Тогда
			НовыйМассив = Новый Массив;
			НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Покупатель", Истина));
			Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
			
			НовыйМассив = Новый Массив;
			НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Покупатель", Истина));
			Элементы.КонтрагентПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
		КонецЕсли;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику") Тогда
			НовыйМассив = Новый Массив;
			НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
			Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
			
			НовыйМассив = Новый Массив;
			НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
			Элементы.КонтрагентПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
		КонецЕсли;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПрочийВзаимозачет") Тогда
			НовыйМассив = Новый Массив;
			НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ПрочиеОтношения", Истина));
			Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
			
			НовыйМассив = Новый Массив;
			НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ПрочиеОтношения", Истина));
			Элементы.КонтрагентПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
		КонецЕсли;

		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСвязиПараметровВыбора() 

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	Элементы.РасчетыСДебитором.Заголовок = НСтр("ru = 'Расчеты с покупателем'");
	Элементы.РасчетыСКредитором.Заголовок = НСтр("ru = 'Расчеты с поставщиком'");
	Элементы.КредиторПризнакАванса.Видимость = Истина;
	Элементы.ДебиторПризнакАванса.Видимость = Истина;
	Элементы.КорреспонденцияПрочиеРасчеты.Видимость = Ложь;
	
	Элементы.ДебиторДокумент.АвтоОтметкаНезаполненного = Истина;
	Элементы.КредиторДокумент.АвтоОтметкаНезаполненного = Истина;
	
	Элементы.ДебиторПодборРасчетыСПокупателем.Видимость = Истина;
	Элементы.КредиторПодборРасчетыСПоставщиком.Видимость = Истина;
	Элементы.ДебиторПодборРасчетовСПрочимиКонтрагентами.Видимость = Ложь;
	Элементы.ДебиторПодборРасчетовСПрочимиКонтрагентамиКредитор.Видимость = Ложь;
	
	Элементы.КредиторДокумент.Заголовок = НСтр("ru = 'Документ'");
	Элементы.ДебиторДокумент.Заголовок = НСтр("ru = 'Документ'");
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.Взаимозачет") Тогда
		
		// Подвал
		Элементы.ИтогиСуммаДебитор.Видимость = Истина;
		Элементы.ИтогиСуммаКредитор.Видимость = Истина;
		
		Элементы.ИтогиСуммаДебитор.Заголовок = НСтр("ru = 'Покупатель'");
		Элементы.ИтогиСуммаКредитор.Заголовок = НСтр("ru = 'Поставщик'");
		// Конец Подвал
		
		Элементы.Получатель.Видимость = Ложь;
		Элементы.РасчетыСДебитором.Видимость = Истина;
		Элементы.РасчетыСКредитором.Видимость = Истина;
		Элементы.Корреспонденция.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.КонтрагентПолучатель.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Покупатель'");
		Элементы.КонтрагентПолучатель.Заголовок = НСтр("ru = 'Поставщик'");
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Элементы.ДебиторДоговор.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДоговорам;
		Элементы.ДебиторДокумент.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Если ЗначениеЗаполнено(Объект.КонтрагентИсточник) Тогда
			Элементы.ДебиторПризнакАванса.ТолькоПросмотр = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Иначе
			Элементы.ДебиторПризнакАванса.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.ДебиторДокумент.АвтоОтметкаНезаполненного = Истина;
		Элементы.ДебиторЗаказ.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоЗаказам;
		Элементы.ДебиторСчетНаОплату.Видимость = Объект.КонтрагентИсточник.ВестиУчетОплатыПоСчетам;
		
		Элементы.КредиторДоговор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
		Элементы.КредиторДокумент.Видимость = Объект.Контрагент.ВестиРасчетыПоДокументам;
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Элементы.КредиторПризнакАванса.ТолькоПросмотр = Объект.Контрагент.ВестиРасчетыПоДокументам;
		Иначе
			Элементы.КредиторПризнакАванса.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.КредиторДокумент.АвтоОтметкаНезаполненного = Истина;
		Элементы.КредиторЗаказ.Видимость = Объект.Контрагент.ВестиРасчетыПоЗаказам;
		Элементы.КредиторСчетНаОплату.Видимость = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
		
		Элементы.ВидПрочегоВзаимозачета.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПокупателя") Тогда
		
		// Подвал
		Элементы.ИтогиСуммаДебитор.Видимость = Истина;
		Элементы.ИтогиСуммаКредитор.Видимость = Ложь;
		
		Элементы.ИтогиСуммаДебитор.Заголовок = НСтр("ru = 'Покупатель'");
		// Конец Подвал
		
		Элементы.Получатель.Видимость = Истина;
		Элементы.РасчетыСДебитором.Видимость = Истина;
		Элементы.РасчетыСКредитором.Видимость = Ложь;
		Элементы.Корреспонденция.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.КонтрагентПолучатель.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Покупатель'");
		Элементы.КонтрагентПолучатель.Заголовок = НСтр("ru = 'Покупатель-получатель'");
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Элементы.ДебиторДоговор.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДоговорам;
		Элементы.ДебиторДокумент.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Если ЗначениеЗаполнено(Объект.КонтрагентИсточник) Тогда
			Элементы.ДебиторПризнакАванса.ТолькоПросмотр = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Иначе
			Элементы.ДебиторПризнакАванса.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.ДебиторДокумент.АвтоОтметкаНезаполненного = Истина;
		Элементы.ДебиторЗаказ.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоЗаказам;
		Элементы.ДебиторСчетНаОплату.Видимость = Объект.КонтрагентИсточник.ВестиУчетОплатыПоСчетам;
		
		Элементы.Договор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
		Элементы.ДокументРасчетов.Видимость = Объект.Контрагент.ВестиРасчетыПоДокументам;
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Элементы.ПризнакАванса.ТолькоПросмотр = Объект.Контрагент.ВестиРасчетыПоДокументам;
		Иначе
			Элементы.ПризнакАванса.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.Заказ.Видимость = Объект.Контрагент.ВестиРасчетыПоЗаказам;
		Элементы.СчетНаОплату.Видимость = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
		
		Элементы.ВидПрочегоВзаимозачета.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику") Тогда
		
		// Подвал
		Элементы.ИтогиСуммаДебитор.Видимость = Ложь;
		Элементы.ИтогиСуммаКредитор.Видимость = Истина;
		
		Элементы.ИтогиСуммаКредитор.Заголовок = НСтр("ru = 'Поставщик'");
		// Конец Подвал
		
		Элементы.Получатель.Видимость = Истина;
		Элементы.РасчетыСДебитором.Видимость = Ложь;
		Элементы.РасчетыСКредитором.Видимость = Истина;
		Элементы.Корреспонденция.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.КонтрагентПолучатель.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Поставщик'");
		Элементы.КонтрагентПолучатель.Заголовок = НСтр("ru = 'Поставщик-получатель'");
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Элементы.КредиторДоговор.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДоговорам;
		Элементы.КредиторДокумент.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Если ЗначениеЗаполнено(Объект.КонтрагентИсточник) Тогда
			Элементы.КредиторПризнакАванса.ТолькоПросмотр = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Иначе
			Элементы.КредиторПризнакАванса.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.КредиторДокумент.АвтоОтметкаНезаполненного = Истина;
		Элементы.КредиторЗаказ.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоЗаказам;
		Элементы.КредиторСчетНаОплату.Видимость = Объект.КонтрагентИсточник.ВестиУчетОплатыПоСчетам;
		
		Элементы.Договор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
		Элементы.ДокументРасчетов.Видимость = Объект.Контрагент.ВестиРасчетыПоДокументам;
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Элементы.ПризнакАванса.ТолькоПросмотр = Объект.Контрагент.ВестиРасчетыПоДокументам;
		Иначе
			Элементы.ПризнакАванса.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.Заказ.Видимость = Объект.Контрагент.ВестиРасчетыПоЗаказам;
		Элементы.СчетНаОплату.Видимость = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
		
		Элементы.ВидПрочегоВзаимозачета.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.КорректировкаДолгаПокупателя") Тогда
		
		// Подвал
		Элементы.ИтогиСуммаДебитор.Видимость = Истина;
		Элементы.ИтогиСуммаКредитор.Видимость = Ложь;
		
		Элементы.ИтогиСуммаДебитор.Заголовок = НСтр("ru = 'Покупатель'");
		// Конец Подвал
		
		Элементы.Получатель.Видимость = Ложь;
		Элементы.РасчетыСДебитором.Видимость = Истина;
		Элементы.РасчетыСКредитором.Видимость = Ложь;
		Элементы.Корреспонденция.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.КонтрагентПолучатель.Видимость = Ложь;
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Покупатель'");
		
		Элементы.ДебиторДоговор.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДоговорам;
		Элементы.ДебиторДокумент.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Элементы.ДебиторДокумент.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ДебиторПризнакАванса.ТолькоПросмотр = Ложь;
		Элементы.ДебиторЗаказ.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоЗаказам;
		Элементы.ДебиторСчетНаОплату.Видимость = Объект.КонтрагентИсточник.ВестиУчетОплатыПоСчетам;
		
		Элементы.ВидПрочегоВзаимозачета.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику") Тогда
		
		// Подвал
		Элементы.ИтогиСуммаДебитор.Видимость = Ложь;
		Элементы.ИтогиСуммаКредитор.Видимость = Истина;
		
		Элементы.ИтогиСуммаКредитор.Заголовок = НСтр("ru = 'Поставщик'");
		// Конец Подвал
		
		Элементы.Получатель.Видимость = Ложь;
		Элементы.РасчетыСДебитором.Видимость = Ложь;
		Элементы.РасчетыСКредитором.Видимость = Истина;
		Элементы.Корреспонденция.Видимость = Истина;
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.КонтрагентПолучатель.Видимость = Истина;
		Элементы.КонтрагентПолучатель.Заголовок = НСтр("ru = 'Поставщик'");
		
		Элементы.КредиторДоговор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
		Элементы.КредиторДокумент.Видимость = Объект.Контрагент.ВестиРасчетыПоДокументам;
		Элементы.КредиторПризнакАванса.ТолькоПросмотр = Ложь;
		Элементы.КредиторДокумент.АвтоОтметкаНезаполненного = Ложь;
		Элементы.КредиторЗаказ.Видимость = Объект.Контрагент.ВестиРасчетыПоЗаказам;
		Элементы.КредиторСчетНаОплату.Видимость = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
		
		Элементы.ВидПрочегоВзаимозачета.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПрочийВзаимозачет") Тогда
		
		// Подвал
		Элементы.ИтогиСуммаДебитор.Видимость = Истина;
		Элементы.ИтогиСуммаКредитор.Видимость = Истина;
		// Заголовки задаются далее в процедуре УстановитьВидимостьИДоступностьДляВидаПрочегоВзаимозачета.
		// Конец Подвал
		
		Элементы.Получатель.Видимость = Ложь;
		Элементы.РасчетыСДебитором.Видимость = Истина;
		Элементы.РасчетыСКредитором.Видимость = Истина;
		Элементы.Корреспонденция.Видимость = Ложь;
		Элементы.КорреспонденцияПрочиеРасчеты.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.КонтрагентПолучатель.Видимость = Истина;
		
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Элементы.ДебиторДоговор.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДоговорам;
		Элементы.ДебиторДокумент.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Если ЗначениеЗаполнено(Объект.КонтрагентИсточник) Тогда
			Элементы.ДебиторПризнакАванса.ТолькоПросмотр = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Иначе
			Элементы.ДебиторПризнакАванса.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.ДебиторДокумент.АвтоОтметкаНезаполненного = Истина;
		
		Элементы.КредиторДоговор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
		Элементы.КредиторДокумент.Видимость = Объект.Контрагент.ВестиРасчетыПоДокументам;
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Элементы.КредиторПризнакАванса.ТолькоПросмотр = Объект.Контрагент.ВестиРасчетыПоДокументам;
		Иначе
			Элементы.КредиторПризнакАванса.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.КредиторДокумент.АвтоОтметкаНезаполненного = Истина;
		
		
		Элементы.ВидПрочегоВзаимозачета.Видимость = Истина;
		
		УстановитьВидимостьИДоступностьДляВидаПрочегоВзаимозачета();
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ЗачетАвансовПокупателя")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику") Тогда
		
		// Подвал
		Элементы.ИтогиСуммаДебитор.Видимость = Истина;
		Элементы.ИтогиСуммаКредитор.Видимость = Истина;
		
		ОкончаниеАвансы = ?(
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ЗачетАвансовПокупателя"),
			НСтр("ru = ' от покупателя'"),
			НСтр("ru = ' поставщику'")
		);
		ОкончаниеДолги = ?(
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ЗачетАвансовПокупателя"),
			НСтр("ru = ' покупателя'"),
			НСтр("ru = ' перед поставщиком'")
		);
		
		Элементы.ИтогиСуммаДебитор.Заголовок = НСтр("ru = 'Авансы'") + ОкончаниеАвансы;
		Элементы.ИтогиСуммаКредитор.Заголовок = НСтр("ru = 'Долги'") + ОкончаниеДолги;
		// Конец Подвал
		
		Элементы.Получатель.Видимость = Ложь;
		
		Элементы.РасчетыСДебитором.Видимость = Истина;
		Элементы.РасчетыСДебитором.Заголовок = НСтр("ru = 'Авансы'");
		
		Элементы.РасчетыСКредитором.Видимость = Истина;
		Элементы.РасчетыСКредитором.Заголовок = НСтр("ru = 'Долги'");
		
		Элементы.Корреспонденция.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.КонтрагентПолучатель.Видимость = Ложь;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ЗачетАвансовПокупателя") Тогда
			Элементы.Контрагент.Заголовок = НСтр("ru = 'Покупатель'");
		Иначе
			Элементы.Контрагент.Заголовок = НСтр("ru = 'Поставщик'");
		КонецЕсли;
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Элементы.ДебиторДоговор.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДоговорам;
		Элементы.ДебиторДокумент.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Если ЗначениеЗаполнено(Объект.КонтрагентИсточник) Тогда
			Элементы.ДебиторПризнакАванса.ТолькоПросмотр = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Иначе
			Элементы.ДебиторПризнакАванса.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.ДебиторДокумент.АвтоОтметкаНезаполненного = Истина;
		Элементы.ДебиторЗаказ.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоЗаказам;
		Элементы.ДебиторСчетНаОплату.Видимость = Объект.КонтрагентИсточник.ВестиУчетОплатыПоСчетам;
		
		Элементы.КредиторДоговор.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДоговорам;
		Элементы.КредиторДокумент.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Если ЗначениеЗаполнено(Объект.КонтрагентИсточник) Тогда
			Элементы.КредиторПризнакАванса.ТолькоПросмотр = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Иначе
			Элементы.КредиторПризнакАванса.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.КредиторДокумент.АвтоОтметкаНезаполненного = Истина;
		Элементы.КредиторЗаказ.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоЗаказам;
		Элементы.КредиторСчетНаОплату.Видимость = Объект.КонтрагентИсточник.ВестиУчетОплатыПоСчетам;
		
		Элементы.ВидПрочегоВзаимозачета.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаСервере
Процедура УстановитьВидимостьИДоступностьДляВидаПрочегоВзаимозачета()
	
	// Подвал
	Если Объект.ВидПрочегоВзаимозачета = Перечисления.ВидыПрочегоВзаимозачета.ДолгПокупателяИДолгПрочемуКонтрагенту Тогда
		Элементы.ИтогиСуммаДебитор.Заголовок = НСтр("ru = 'Покупатель'");
		Элементы.ИтогиСуммаКредитор.Заголовок = НСтр("ru = 'Прочий контрагент'");
	Иначе
		Элементы.ИтогиСуммаДебитор.Заголовок = НСтр("ru = 'Прочий контрагент'");
		Элементы.ИтогиСуммаКредитор.Заголовок = НСтр("ru = 'Поставщик'");
	КонецЕсли;
	// Конец Подвал
	
	Элементы.Контрагент.Заголовок = ?(Объект.ВидПрочегоВзаимозачета = ПредопределенноеЗначение("Перечисление.ВидыПрочегоВзаимозачета.ДолгПокупателяИДолгПрочемуКонтрагенту"),
		НСтр("ru = 'Покупатель'"), НСтр("ru = 'Контрагент'"));
	Элементы.КонтрагентПолучатель.Заголовок = ?(Объект.ВидПрочегоВзаимозачета = ПредопределенноеЗначение("Перечисление.ВидыПрочегоВзаимозачета.ДолгПокупателяИДолгПрочемуКонтрагенту"),
		НСтр("ru = 'Контрагент'"),
		НСтр("ru = 'Поставщик'"));
		
	Элементы.РасчетыСДебитором.Заголовок = ?(Объект.ВидПрочегоВзаимозачета = ПредопределенноеЗначение("Перечисление.ВидыПрочегоВзаимозачета.ДолгПокупателяИДолгПрочемуКонтрагенту"),
		НСтр("ru = 'Расчеты с покупателем'"), НСтр("ru = 'Расчеты с прочим контрагентом'"));
	Элементы.РасчетыСКредитором.Заголовок = ?(Объект.ВидПрочегоВзаимозачета = ПредопределенноеЗначение("Перечисление.ВидыПрочегоВзаимозачета.ДолгПокупателяИДолгПрочемуКонтрагенту"),
		НСтр("ru = 'Расчеты с прочим контрагентом'"),
		НСтр("ru = 'Расчеты с поставщиком'"));
		
	Если Объект.ВидПрочегоВзаимозачета = ПредопределенноеЗначение("Перечисление.ВидыПрочегоВзаимозачета.ДолгПокупателяИДолгПрочемуКонтрагенту") Тогда
		
		Элементы.ДебиторПризнакАванса.Видимость = Истина;
		Элементы.ДебиторСчетНаОплату.Видимость = Объект.КонтрагентИсточник.ВестиУчетОплатыПоСчетам;
		Элементы.ДебиторЗаказ.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоЗаказам;
		
		Элементы.КредиторПризнакАванса.Видимость = Ложь;
		Элементы.КредиторСчетНаОплату.Видимость = Ложь;
		Элементы.КредиторЗаказ.Видимость = Ложь;
		
		Элементы.ДебиторДокумент.АвтоОтметкаНезаполненного = Истина;
		Элементы.КредиторДокумент.АвтоОтметкаНезаполненного = Ложь;
		
		Элементы.ДебиторПодборРасчетыСПокупателем.Видимость = Истина;
		Элементы.ДебиторПодборРасчетовСПрочимиКонтрагентами.Видимость = Ложь;
		Элементы.ДебиторПодборРасчетовСПрочимиКонтрагентамиКредитор.Видимость = Истина;
		Элементы.КредиторПодборРасчетыСПоставщиком.Видимость = Ложь;
		
		Элементы.ДебиторДокумент.Заголовок = НСтр("ru = 'Документ'");
		Элементы.КредиторДокумент.Заголовок = ?(ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса"), НСтр("ru = 'Документ (для обмена с Бухгалтерией)'"), НСтр("ru = 'Документ (справочно)'"));
		
	Иначе
		
		Элементы.ДебиторПризнакАванса.Видимость = Ложь;
		Элементы.ДебиторСчетНаОплату.Видимость = Ложь;
		Элементы.ДебиторЗаказ.Видимость = Ложь;
		
		Элементы.КредиторПризнакАванса.Видимость = Истина;
		Элементы.КредиторСчетНаОплату.Видимость = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
		Элементы.КредиторЗаказ.Видимость = Объект.Контрагент.ВестиРасчетыПоЗаказам;
		
		Элементы.ДебиторДокумент.АвтоОтметкаНезаполненного = Ложь;
		Элементы.КредиторДокумент.АвтоОтметкаНезаполненного = Истина;
		
		Элементы.ДебиторПодборРасчетыСПокупателем.Видимость = Ложь;
		Элементы.ДебиторПодборРасчетовСПрочимиКонтрагентами.Видимость = Истина;
		Элементы.ДебиторПодборРасчетовСПрочимиКонтрагентамиКредитор.Видимость = Ложь;
		Элементы.КредиторПодборРасчетыСПоставщиком.Видимость = Истина;
		
		Элементы.ДебиторДокумент.Заголовок = ?(ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса"), НСтр("ru = 'Документ (для обмена с Бухгалтерией)'"), НСтр("ru = 'Документ (справочно)'"));
		Элементы.КредиторДокумент.Заголовок = НСтр("ru = 'Документ'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступныеТипы()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПокупателя")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.КорректировкаДолгаПокупателя") Тогда
		
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.ПередачаВА"));
		Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
		Массив.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетОПереработке"));
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеВКассу"));
		Массив.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
		Массив.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнымКартам"));
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПокупателя") Тогда
			Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		КонецЕсли;
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		Элементы.ДокументРасчетов.ОграничениеТипа = ДопустимыеТипы;
		Элементы.КредиторДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя", , );
		Элементы.Заказ.ОграничениеТипа = ДопустимыеТипы;
		Элементы.КредиторЗаказ.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплату", , );
		Элементы.СчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		Элементы.КредиторСчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику") Тогда
		
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.ДополнительныеРасходы"));
		Массив.Добавить(Тип("ДокументСсылка.РасходСоСчета"));
		Массив.Добавить(Тип("ДокументСсылка.РасходИзКассы"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетПереработчика"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику") Тогда
			Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		КонецЕсли;
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		Элементы.ДокументРасчетов.ОграничениеТипа = ДопустимыеТипы;
		Элементы.КредиторДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику", , );
		Элементы.Заказ.ОграничениеТипа = ДопустимыеТипы;
		Элементы.КредиторЗаказ.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПоставщика", , );
		Элементы.КредиторСчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПрочийВзаимозачет")
		И Объект.ВидПрочегоВзаимозачета = ПредопределенноеЗначение("Перечисление.ВидыПрочегоВзаимозачета.ДолгПокупателяИДолгПрочемуКонтрагенту") Тогда
		
		// Дебитор
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
		Массив.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетОПереработке"));
		Массив.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		Элементы.ДебиторДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		// Кредитор
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.РасходСоСчета"));
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеВКассу"));
		Массив.Добавить(Тип("ДокументСсылка.РасходИзКассы"));
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
		Массив.Добавить(Тип("ДокументСсылка.ДополнительныеРасходы"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетПереработчика"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		Элементы.КредиторДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		// Покупатель
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя", , );
		Элементы.Заказ.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплату", , );
		Элементы.СчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПрочийВзаимозачет")
		И Объект.ВидПрочегоВзаимозачета = ПредопределенноеЗначение("Перечисление.ВидыПрочегоВзаимозачета.ДолгПрочегоКонтрагентаИДолгПередПоставщиком") Тогда
		
		// Дебитор
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.ПередачаВА"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеВКассу"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
		Массив.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнымКартам"));
		Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
		Массив.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетОПереработке"));
		Массив.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		Элементы.ДебиторДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		// Кредитор
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.ДополнительныеРасходы"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетПереработчика"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		Элементы.КредиторДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		// Поставщик
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику", , );
		Элементы.КредиторЗаказ.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПоставщика", , );
		Элементы.КредиторСчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.Взаимозачет") Тогда
		
		// Дебитор
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.ПередачаВА"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеВКассу"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
		Массив.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнымКартам"));
		Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
		Массив.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетОПереработке"));
		Массив.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		Элементы.ДебиторДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		// Кредитор
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.РасходСоСчета"));
		Массив.Добавить(Тип("ДокументСсылка.РасходИзКассы"));
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
		Массив.Добавить(Тип("ДокументСсылка.ДополнительныеРасходы"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетПереработчика"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		Элементы.КредиторДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		// Покупатель
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя", , );
		Элементы.Заказ.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплату", , );
		Элементы.СчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
		// Поставщик
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику", , );
		Элементы.КредиторЗаказ.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПоставщика", , );
		Элементы.КредиторСчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ЗачетАвансовПокупателя") Тогда
		
		МассивДебитор = Новый Массив();
		МассивДебитор.Добавить(Тип("ДокументСсылка.ПоступлениеВКассу"));
		МассивДебитор.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		МассивДебитор.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
		МассивДебитор.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнымКартам"));
		
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.ПередачаВА"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
		Массив.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетОПереработке"));
		Массив.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		ДопустимыеТипыДебитор = Новый ОписаниеТипов(МассивДебитор, , );
		
		Элементы.ДебиторДокумент.ОграничениеТипа = ДопустимыеТипыДебитор;
		Элементы.КредиторДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя", , );
		Элементы.Заказ.ОграничениеТипа = ДопустимыеТипы;
		Элементы.КредиторЗаказ.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплату", , );
		Элементы.СчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		Элементы.КредиторСчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику") Тогда
		
		МассивДебитор = Новый Массив();
		МассивДебитор.Добавить(Тип("ДокументСсылка.РасходИзКассы"));
		МассивДебитор.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		МассивДебитор.Добавить(Тип("ДокументСсылка.РасходСоСчета"));
		
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
		Массив.Добавить(Тип("ДокументСсылка.ДополнительныеРасходы"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетОПереработке"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		ДопустимыеТипыДебитор = Новый ОписаниеТипов(МассивДебитор, , );
		
		Элементы.ДебиторДокумент.ОграничениеТипа = ДопустимыеТипыДебитор;
		Элементы.КредиторДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику", , );
		Элементы.Заказ.ОграничениеТипа = ДопустимыеТипы;
		Элементы.КредиторЗаказ.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПоставщика", , );
		Элементы.СчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		Элементы.КредиторСчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСвязиПараметровВыбораДоступныеТипы()

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации, ИмяТабличнойЧасти = "")
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации, ИмяТабличнойЧасти);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ПроверитьКорректностьЗаполненияРеквизитовДокумента(ТекстВопроса)

	СуммаАвансовДебитор  = 0;
	СуммаАвансовКредитор = 0;
	
	МассивДоговоров = Новый Массив;
	МассивДоговоров.Добавить(Объект.Договор);
	
	Для каждого СтрокаТаблицы Из Объект.Дебитор Цикл
		
		Если СтрокаТаблицы.ПризнакАванса Тогда
			СуммаАвансовДебитор = СуммаАвансовДебитор + СтрокаТаблицы.СуммаРасчетов;
		КонецЕсли;
		
		МассивДоговоров.Добавить(СтрокаТаблицы.Договор);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.Кредитор Цикл
		
		Если СтрокаТаблицы.ПризнакАванса Тогда
			СуммаАвансовКредитор = СуммаАвансовКредитор + СтрокаТаблицы.СуммаРасчетов;
		КонецЕсли;
		
		МассивДоговоров.Добавить(СтрокаТаблицы.Договор);
	КонецЦикла;
	
	// Проверка на наличие нескольких валют
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентов.ВалютаРасчетов КАК ВалютаРасчетов
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&МассивДоговоров)
	|	И ДоговорыКонтрагентов.Ссылка <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("МассивДоговоров", МассивДоговоров);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		
		ТекстВопроса = НСтр("ru = 'Документ оформленный в нескольких валютах не будет перенесен в ""Бухгалтерию предприятия"".
			|
			|Продолжить запись документа?'");
			
		Возврат;
		
	КонецЕсли;
	
	// Проверка на корректность оформления операции Взаимозачет
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.Взаимозачет
		И СуммаАвансовДебитор <> СуммаАвансовКредитор Тогда
		
		ТекстВопроса = НСтр("ru = 'Документ, у которого сумма авансов в табличной части ""Расчеты с покупателем"" не соответствует
			|сумме авансов в табличной части ""Расчеты с поставщиком"" не будет перенесен в ""Бухгалтерию предприятия"".
			|
			|Продолжить запись документа?'");
			
		Возврат;
		
	КонецЕсли;

КонецПроцедуры // ПроверитьКорректностьЗаполненияРеквизитовДокумента()

&НаКлиенте
Процедура ОпределитьНеобходимостьЗакрытияФормыСОшибками(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		ПроверкаЗаполнениеНеВыполнялась = Ложь;
		Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеКонтрагентПриИзменении(СсылкаНаДокумент, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить("Договор", РаботаСКонтрагентамиУНФ.ПолучитьДоговорПоУмолчанию(СсылкаНаДокумент, Контрагент, Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Процедура ОпределитьВидимостьНастроекУчетаВНалогообложении()
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
		
		Возврат;
	Иначе
		Элементы.ГруппаУчетВНУ.Видимость = Истина;
	КонецЕсли;
	
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, Объект.Дата);
	ПлательщикУСН =  СистемаНалогообложенияСтруктура.ПлательщикУСН;
	
	Если Не ПлательщикУСН Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
	Иначе
		Если Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику
			Или Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.Взаимозачет Тогда
			Элементы.УчитыватьВНУ.Видимость = Истина;
		Иначе
			Элементы.УчитыватьВНУ.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаУчетВНУ.Видимость = Элементы.УчитыватьВНУ.Видимость;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АвтоподборКонтактов

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
