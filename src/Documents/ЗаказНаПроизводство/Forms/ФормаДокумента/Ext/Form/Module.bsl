
#Область ОписаниеПеременных

&НаКлиенте
Перем ПриИзмененииСтарт;

&НаКлиенте
Перем СтароеКоличествоПродукции;

&НаКлиенте
Перем ПриИзмененииФиниш;

&НаКлиенте
Перем ДанныеВыбораСостояния;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнитьКэшЗначений();
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	ЭтотОбъект.ОснованиеСоздания = Параметры.Основание;
	ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	ОбновитьСпособРаспределенияПоУмолчанию();
	
	// Установить надпись основание
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	
	УстановитьРежимИСписокВыбора();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОповеститьРабочийКалендарь = Ложь;
	Иначе
		ОповеститьРабочийКалендарь = Истина;
	КонецЕсли; 
	ДокументМодифицирован = Ложь;
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Продукция");
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ЗаказНаПроизводство.ТабличныеЧасти.Запасы, НастройкиЗагрузкиДанных, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	Элементы.ПродукцияЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	// Характеристики
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить("Продукция");
	СоответствиеТЧ.Вставить("Запасы");
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма, СоответствиеТЧ);
	
	ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик();
	Если Параметры.Ключ.Пустая()
		Тогда
		ТипСтруктурнойЕдиницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтруктурнаяЕдиница, "ТипСтруктурнойЕдиницы");
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина);
		ЗаполнитьПризнакиИспользованияЭтапов();
		ОбновитьКэшиДанныхСервер();
		ЗаполнитьСлужебныеДанныеПослеЧтенияОбъекта(Объект);
	КонецЕсли;
	
	Если ПравоДоступа("Изменение", Объект.Ссылка.Метаданные())
		И НЕ ТолькоПросмотр Тогда
		Если Объект.Исполнитель = Неопределено Тогда
			Объект.Исполнитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяПродукция = -1;
	УстановитьКартинкиЗакладок(ЭтотОбъект);
	
	РучноеРаспределение = Объект.РучноеРаспределение;
	Если Объект.РучноеРаспределение Тогда
		ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	КонецЕсли; 
	
	УправлениеФормой(ЭтотОбъект);
	
	РезервированиеЗапасов = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	
	// Установка видимости реквизитов от пользовательских настроек
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	
	// МобильныйКлиент
	УстановитьВидимостьЭлементовДляМобильногоКлиента();
	// Конец МобильныйКлиент
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	ШтрихкодированиеИС.ИнициализироватьКэшМаркируемойПродукции(ЭтаФорма);
	// Конец ИнтеграцияГосИС
	
	ОткрытИзПланировщика = Параметры.Свойство("ВыбранныеРесурсы");
	
	Если ОткрытИзПланировщика И Не ЭтаФорма.ТолькоПросмотр Тогда
		ЗаполнитьРесурсыИзПланировщика(Параметры.ВыбранныеРесурсы);
	КонецЕсли;
	
	РазрешитьСкладыВТабличныхЧастях = ПолучитьФункциональнуюОпцию("РазрешитьСкладыВТабличныхЧастях");
		
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДействияПослеЧтенияОбъекта();
		ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	КонецЕсли;
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриИзмененииСтарт = Объект.Старт;
	ПриИзмененииФиниш = Объект.Финиш;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьСпискиВыбораПродукции();
	ОбновитьПодсказкуРаспределение();
	
	//Ресурсы
	Если ОткрытИзПланировщика И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не Элементы.Найти("ТЧРесурсыПредприятия") = Неопределено Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.ТЧРесурсыПредприятия;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы, "Страницы", "ТекущаяСтраница") = Неопределено Тогда
		Если Элементы.Страницы.ТекущаяСтраница.Имя = "ТЧРесурсыПредприятия" Тогда
			УстановитьДоступностьПовторов(Истина);
			ЗаполнитьДанныеТаблицыРесурсовНаФорме();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьОтметкуСтруктурнойЕдиницыРезерва();
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ОповеститьРабочийКалендарь Тогда
		Оповестить("ИзмененЗаказНаПроизводство", Объект.Ответственный);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище	= Параметр;
		ТекущаяСтраницыПродукция= (Элементы.Страницы.ТекущаяСтраница = Элементы.ТЧПродукция);
		ИмяТабличнойЧасти		= ?(ТекущаяСтраницыПродукция, "Продукция", "Запасы");
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, Истина, Ложь);
		
		Если ИмяТабличнойЧасти="Продукция" Тогда
			УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
			ОбновитьСпискиВыбораПродукции();
		ИначеЕсли ИмяТабличнойЧасти="Запасы" Тогда
			ВывестиОтметкиКонтроля(ЭтотОбъект);
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_СостоянияЗаказовНаПроизводство" Тогда
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостояния_ЗаказНаПроизводство" И Параметр <> Неопределено Тогда
		
		ЗаказИзменен = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			ЗаказИзменен = Параметр.Найти(Объект.Ссылка);
		ИначеЕсли ТипЗнч(Параметр) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			ЗаказИзменен = Параметр = Объект.Ссылка;
		КонецЕсли;
		
		Если ЗаказИзменен = Неопределено ИЛИ (ТипЗнч(ЗаказИзменен) = Тип("Булево") И ЗаказИзменен = Ложь) Тогда
			Возврат;
		КонецЕсли;
		
		ЭтотОбъект.Прочитать();
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшированныеЗначения",    Неопределено);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка",    Истина);
	ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов", Ложь);
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	// Конец ИнтеграцияГосИС
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Продукция");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьКэшЗначений();	
	
	Элементы.ВариантЗавершенияРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЗаказов.ПолучитьСостояниеЗаказаПередЗавершением(
			ТекущийОбъект.Ссылка,
			Справочники.СостоянияЗаказовНаПроизводство.Завершен)
	);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец ИнтеграцияГосИС
	
	ТипСтруктурнойЕдиницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтруктурнаяЕдиница, "ТипСтруктурнойЕдиницы");
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	ОбновитьКэшиДанныхСервер();
	ЗаполнитьСлужебныеДанныеПослеЧтенияОбъекта(Объект);
	
	ПланированиеРесурсовУНФ.ПерезаполнитьСлужебныеРеквизитыТаблицыРесурсов(Объект.РесурсыПредприятия);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	ДействияПослеЧтенияОбъекта();
	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Модифицированность Тогда
		ДокументМодифицирован = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
	// Характеристики и Партии таб. часть "РаспределениеЗапасов"
	 ПроверитьЗаполнениеХарактеристикРаспределениеЗапасов(Отказ);
	 
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И РежимОстаткиИРезервы Тогда
		ПроверитьПоложениеСкладаПриПроведении(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.ВариантЗавершенияРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЗаказов.ПолучитьСостояниеЗаказаПередЗавершением(
			ТекущийОбъект.Ссылка,
			Справочники.СостоянияЗаказовНаПроизводство.Завершен)
	);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	АссистентУправления.ПослеЗаписиНаСервере(ТекущийОбъект);
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтаФорма);
	// Конец ИнтеграцияГосИС
	
	ПланированиеРесурсовУНФ.ПерезаполнитьСлужебныеРеквизитыТаблицыРесурсов(Объект.РесурсыПредприятия);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	ДействияПослеЧтенияОбъекта();
	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	ЗаполненЗаказ = Ложь;
	Для каждого СтрокаТЧ Из Объект.Продукция Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя) Тогда
			ЗаполненЗаказ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполненЗаказ Тогда
		Оповестить("Запись_ЗаказНаПроизводство", Объект.Ссылка);
	КонецЕсли;
	
	Если ДокументМодифицирован Тогда
		ОповеститьРабочийКалендарь = Истина;
		ДокументМодифицирован = Ложь;
	КонецЕсли;
	
	Если ОткрытИзПланировщика Тогда Оповестить("ОбновитьПланировщик") КонецЕсли;
	
	ЗаполнитьСлужебныеДанныеПослеЧтенияОбъекта(Объект);
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПараметрическиеСпецификации
	ПроизводствоФормулыСервер.ПроверитьЗаполнениеДопРеквизитовСпецификаций(Объект, "Продукция", Отказ);
	// Конец ПараметрическиеСпецификации
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// Изменен состав бригады в подчиненной форме
	Если ТипЗнч(ВыбранноеЗначение)=Тип("Структура") И ВыбранноеЗначение.Свойство("Событие") И ВыбранноеЗначение.Событие="ИзмененСоставБригады" Тогда
		СтрокаТабличнойЧасти = Объект.Операции.НайтиПоИдентификатору(ВыбранноеЗначение.Идентификатор);
		Если СтрокаТабличнойЧасти.КлючСвязи=0 Тогда
			ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, СтрокаТабличнойЧасти);
		КонецЕсли;
		ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.СоставБригады, СтрокаТабличнойЧасти);
		Для каждого ОписаниеСтроки Из ВыбранноеЗначение.СоставБригады Цикл
			НоваяСтрока = Объект.СоставБригады.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеСтроки);
			НоваяСтрока.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
		КонецЦикла; 
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура СостояниеЗаказаПриИзменении(Элемент)
	
	Если Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказовНаПроизводство.Завершен") Тогда
		Объект.ВариантЗавершения = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.Успешно");
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершениеЗаказа;
		
		#Если ВебКлиент Тогда
			// В веб-клиенте установка текущей страницы должна происходить после включения видимости у страницы
			ПодключитьОбработчикОжидания("УстановитьТекущейСтраницейЗавершениеЗаказа", 0.1, Истина);
		#КонецЕсли
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния Тогда
		ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказовНаПроизводство"), ПараметрыПолученияДанных);
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Ложь;
	КонецЕсли;
	
	ДанныеВыбора = ДанныеВыбораСостояния;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПокупателяПриИзменении(Элемент)
	
	ЗаполнитьРеквизитыТЧПоШапке(Объект, "ЗаказПокупателя");
	
	УправлениеФормой(ЭтотОбъект);
	
	ПриИзмененииВидаОперацииЗаказа();
	
КонецПроцедуры // ЗаказПокупателяПриИзменении()

&НаКлиенте
Процедура ВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ВыбранноеЗначение <> ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка") Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаПродукция Из Объект.Продукция Цикл

		Если Не ЗначениеЗаполнено(СтрокаПродукция.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПродукция.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
			Продолжить;
		КонецЕсли;

		ТекстСообщения = СтрШаблон(НСтр(
			"ru = 'Операция разборки не выполняется для работ и услуг.
			|В строке №%1 табличной части ""Продукция"" номенклатура ""%2"" является работой (услугой)'"),
			СтрокаПродукция.НомерСтроки, СтрокаПродукция.Номенклатура);
		КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Продукция", СтрокаПродукция.НомерСтроки,
			"Номенклатура");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
		СтандартнаяОбработка = Ложь;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
	ПриИзмененииВидаОперацииЗаказа();
	
КонецПроцедуры // ВидОперацииПриИзменении()

&НаКлиенте
Процедура СтартПриИзменении(Элемент)
	
	Если Объект.Старт > Объект.Финиш И ЗначениеЗаполнено(Объект.Финиш) Тогда
		Объект.Старт = ПриИзмененииСтарт;
		Сообщить(НСтр("ru='Дата старта не может быть больше даты финиша.'"));
	Иначе
		ПриИзмененииСтарт = Объект.Старт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФинишПриИзменении(Элемент)
	
	Если Час(Объект.Финиш) = 0 И Минута(Объект.Финиш) = 0 Тогда
		Объект.Финиш = КонецДня(Объект.Финиш);
	КонецЕсли;
	
	Если Объект.Финиш < Объект.Старт Тогда
		Объект.Финиш = ПриИзмененииФиниш;
		Сообщить(НСтр("ru='Дата финиша не может быть меньше даты старта.'"));
	Иначе
		ПриИзмененииФиниш = Объект.Финиш;
	КонецЕсли;
	
КонецПроцедуры // ФинишПриИзменении()

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	ДанныеСтруктурнаяЕдиница = ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении(Объект.СтруктурнаяЕдиница);
	
	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		Если ЗначениеЗаполнено(ДанныеСтруктурнаяЕдиница.ИсточникПеремещения) Тогда
			Объект.СтруктурнаяЕдиницаРезерв = ДанныеСтруктурнаяЕдиница.ИсточникПеремещения;
			ОбновитьСкладВТЧ();
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеСтруктурнаяЕдиница.ПолучательПеремещения) Тогда
			Объект.СтруктурнаяЕдиницаПродукции = ДанныеСтруктурнаяЕдиница.ПолучательПеремещения;
		КонецЕсли;
	КонецЕсли;
	
	ТипСтруктурнойЕдиницы = ДанныеСтруктурнаяЕдиница.ТипСтруктурнойЕдиницы;
	
	// Этапы
	УправлениеВидимостьюЭтапов(ЭтотОбъект);
	Для каждого СтрокаПродукция Из Объект.Продукция Цикл
		Если ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение")
			И КэшЗначений.ИспользоватьЭтапыПроизводства
			И СтрокаПродукция.ИспользоватьЭтапыПроизводства Тогда
			СтрокаПродукция.ПодразделениеЗавершающегоЭтапа = Объект.СтруктурнаяЕдиница;
		Иначе
			СтрокаПродукция.ПодразделениеЗавершающегоЭтапа = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
		КонецЕсли; 
	КонецЦикла;
	
	Если ТипСтруктурнойЕдиницы <> ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение") Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			СтрокаТабличнойЧасти.Этап = ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
		КонецЦикла;
		Для каждого СтрокаТабличнойЧасти Из Объект.РаспределениеЗапасов Цикл
			СтрокаТабличнойЧасти.Этап = ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
		КонецЦикла;
		Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
			СтрокаТабличнойЧасти.Этап = ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры // СтруктурнаяЕдиницаПриИзменении()

&НаКлиенте
Процедура СтруктурнаяЕдиницаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаОткрытие()

&НаКлиенте
Процедура СтруктурнаяЕдиницаРезервПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаРезерв)
		И Не ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		ДанныеСтруктурнаяЕдиница = ПолучитьДанныеСтруктурнаяЕдиницаРезервПриИзменении(Объект.СтруктурнаяЕдиницаРезерв);
		Объект.СтруктурнаяЕдиница = ДанныеСтруктурнаяЕдиница;
		
	КонецЕсли;
	
	ОбновитьСкладВТЧ();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли
	
КонецПроцедуры // СтруктурнаяЕдиницаРезервПриИзменении()

&НаКлиенте
Процедура ПродукцияСтруктурнаяЕдиницаРезервОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.ПродукцияСтруктурнаяЕдиницаРезерв.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаРезерв) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаРезерв) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		// Выбрать основание
		СписокОснований = Новый СписокЗначений;
		СписокОснований.Добавить("Документ.ЗаказПокупателя.ФормаВыбора", НСтр("ru = 'Заказ покупателя'"));
		СписокОснований.Добавить("Документ.ЗаказНаПроизводство.ФормаВыбора", НСтр("ru = 'Заказ на производство'"));
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокОснований, Элементы.ДокументОснованиеНадпись);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаОперацииЗаказа()
	
	ПриИзмененииВидаОперацииЗаказаСервер();
	
	ЭтоРазборка = (Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка"));
	
	Если ЭтоРазборка Тогда
		
		Для каждого СтрокаПродукция Из Объект.Продукция Цикл
			СтрокаПродукция.Резерв = 0;
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			СтрокаЗапасы.Резерв = 0;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЭтоРазборка Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			СтрокаТабличнойЧасти.Этап = ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
		КонецЦикла;
		Для каждого СтрокаТабличнойЧасти Из Объект.РаспределениеЗапасов Цикл
			СтрокаТабличнойЧасти.Этап = ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
		КонецЦикла;
		Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
			СтрокаТабличнойЧасти.Этап = ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
		КонецЦикла;
	КонецЕсли;
	
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	
	ОбновитьСкладВТЧ();
	
	Если РежимОстаткиИРезервы Тогда
		ОбновитьОтображениеКолонокВРазрезеЗапасов();
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаОперацииЗаказаСервер()
	
	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка") Тогда
		ИмяТЧ = "Запасы";
	Иначе
		ИмяТЧ = "Продукция";
	КонецЕсли;
	Для каждого СтрокаПродукция Из Объект[ИмяТЧ] Цикл
		Если ЗначениеЗаполнено(СтрокаПродукция.Партия)
			И СтрокаПродукция.Партия.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье") Тогда
			СтрокаПродукция.Партия = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РучноеРаспределениеПриИзменении(Элемент)
	
	Объект.РучноеРаспределение = РучноеРаспределение;
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтотОбъект);
	Если Объект.РучноеРаспределение Тогда
		РаспределитьФрагмент();
		ОбновитьСпискиВыбораПродукции();
	Иначе
		Объект.РаспределениеЗапасов.Очистить();
	КонецЕсли; 
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаОперацийПриИзменении(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
	КонецЦикла; 	
	Для каждого СтрокаТабличнойЧасти Из Объект.СоставБригады Цикл
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	Объект.СоставБригады.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Исполнитель) И ТипЗнч(Объект.Исполнитель)=Тип("СправочникСсылка.Бригады") Тогда
		ЗаполнитьСоставБригадыНаСервере(Объект.Исполнитель);
	ИначеЕсли ЗначениеЗаполнено(Объект.Исполнитель) И ТипЗнч(Объект.Исполнитель)=Тип("СправочникСсылка.Сотрудники") Тогда
		ОбновитьКэшиДанных();
		Подразделение = КэшПодразделения.Получить(Объект.Исполнитель);
		Если НЕ КэшЗначений.УчетПоНесколькимПодразделениям Тогда
			Объект.СтруктурнаяЕдиницаОпераций = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновноеПодразделение");
		ИначеЕсли Объект.ПоложениеСтруктурнойЕдиницыОпераций=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
			Объект.СтруктурнаяЕдиницаОпераций = Подразделение;
		ИначеЕсли Объект.ПоложениеСтруктурнойЕдиницыОпераций=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
			Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Подразделение;
			КонецЦикла; 
			Для каждого СтрокаТабличнойЧасти Из Объект.СоставБригады Цикл
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Подразделение;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.Исполнитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");	
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "ТЧРесурсыПредприятия" Тогда
		УстановитьДоступностьПовторов(Истина);
		ЗаполнитьДанныеТаблицыРесурсовНаФорме();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ВключаяШаблоны", Истина);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства = СтруктураДанные.ИспользоватьЭтапыПроизводства;
	Если СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства 
		И ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение") Тогда
		СтрокаТабличнойЧасти.ПодразделениеЗавершающегоЭтапа = Объект.СтруктурнаяЕдиница;
	Иначе
		СтрокаТабличнойЧасти.ПодразделениеЗавершающегоЭтапа = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЭтоШаблонСпецификации = СтруктураДанные.ЭтоШаблонСпецификации;
	СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации = СтруктураДанные.ЕстьДопРеквизитыСпецификации;
	Если СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации Тогда
		Если СтрокаТабличнойЧасти.КлючСвязи<>0 Тогда
			ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.РеквизитыПараметрическихСпецификаций, СтрокаТабличнойЧасти);
		КонецЕсли; 
		ЗаполнитьДопРеквизитыПоУмолчанию(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		ОбновитьОписанияДопРеквизитов(ЭтотОбъект, СтрокаТабличнойЧасти.КлючСвязи);
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.ТипНоменклатуры = СтруктураДанные.ТипНоменклатуры;
	
	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка") Тогда
		Если НЕ СкладВШапке Тогда
			ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(СтрокаТабличнойЧасти, Объект, СтруктураДанные);
		Иначе
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЕсли; 
	КонецЕсли; 

	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) И Объект.Запасы.Количество()>0 Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
	КонецЕсли; 
	ОбновитьСпискиВыбораПродукции();
	ЗаполнитьСлужебныеДанныеОперации(Объект);
	УправлениеВидимостьюЭтапов(ЭтотОбъект);	
	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	
	ПодборНоменклатурыИзСписка = Ложь;

КонецПроцедуры // ПродукцияНоменклатураПриИзменении()

&НаКлиенте
Процедура ПродукцияНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда

		СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЗаказНаПроизводство", НастройкиФормыВыбораНоменклатуры, Истина, "Продукция", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Продукция");
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ВключаяШаблоны", Истина);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства = СтруктураДанные.ИспользоватьЭтапыПроизводства;
	Если СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства 
		И ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение") Тогда
		СтрокаТабличнойЧасти.ПодразделениеЗавершающегоЭтапа = Объект.СтруктурнаяЕдиница;
	Иначе
		СтрокаТабличнойЧасти.ПодразделениеЗавершающегоЭтапа = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.ЭтоШаблонСпецификации = СтруктураДанные.ЭтоШаблонСпецификации;
	СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации = СтруктураДанные.ЕстьДопРеквизитыСпецификации;
	Если СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации Тогда
		Если СтрокаТабличнойЧасти.КлючСвязи<>0 Тогда
			ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.РеквизитыПараметрическихСпецификаций, СтрокаТабличнойЧасти);
		КонецЕсли; 
		ЗаполнитьДопРеквизитыПоУмолчанию(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		ОбновитьОписанияДопРеквизитов(ЭтотОбъект, СтрокаТабличнойЧасти.КлючСвязи);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) И Объект.Запасы.Количество()>0 Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
	КонецЕсли; 
	ОбновитьСпискиВыбораПродукции();
	ЗаполнитьСлужебныеДанныеОперации(Объект);
	УправлениеВидимостьюЭтапов(ЭтотОбъект);
	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	
КонецПроцедуры // ПродукцияХарактеристикаПриИзменении()

&НаКлиенте
Процедура ПродукцияЗаказПокупателяПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
		СтрокаТабличнойЧасти.Резерв = 0;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) И Объект.Запасы.Количество()>0 Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
	КонецЕсли; 
	ОбновитьСпискиВыбораПродукции();
	ЗаполнитьСлужебныеДанныеОперации(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока И Копирование Тогда
		ТекущаяСтрока.КлючСвязи = 0;
	КонецЕсли;
		
	ИмяТабличнойЧасти = "Продукция";
	
	Если НоваяСтрока ИЛИ ТекущаяСтрока.КлючСвязи=0 Тогда
		
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект);
		
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ЗаполнитьДанныеШапки(Объект, ТекущаяСтрока, "Продукция"); 
	КонецЕсли; 
	
	СтароеКоличествоПродукции = ТекущаяСтрока.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Продукция.ТекущиеДанные.Спецификация) Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЕдиницаИзмеренияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Продукция.ТекущиеДанные.Спецификация) Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСпецификацияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Спецификация", СтрокаТабличнойЧасти.Спецификация);
	СтруктураДанные = ПолучитьДанныеСпецификацияПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства = СтруктураДанные.ИспользоватьЭтапыПроизводства;
	Если СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства 
		И ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение") Тогда
		СтрокаТабличнойЧасти.ПодразделениеЗавершающегоЭтапа = Объект.СтруктурнаяЕдиница;
	Иначе
		СтрокаТабличнойЧасти.ПодразделениеЗавершающегоЭтапа = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.ЭтоШаблонСпецификации = СтруктураДанные.ЭтоШаблонСпецификации;
	СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации = СтруктураДанные.ЕстьДопРеквизитыСпецификации;
	Если СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации Тогда
		Если СтрокаТабличнойЧасти.КлючСвязи<>0 Тогда
			ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.РеквизитыПараметрическихСпецификаций, СтрокаТабличнойЧасти);
		КонецЕсли; 
		ЗаполнитьДопРеквизитыПоУмолчанию(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		ОбновитьОписанияДопРеквизитов(ЭтотОбъект, СтрокаТабличнойЧасти.КлючСвязи);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) И Объект.Запасы.Количество()>0 Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
	КонецЕсли; 
	ОбновитьСпискиВыбораПродукции();
	ЗаполнитьСлужебныеДанныеОперации(Объект);
	УправлениеВидимостьюЭтапов(ЭтотОбъект);
	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриИзменении(Элемент)
	
	ОбновитьОтметкуСтруктурнойЕдиницыРезерва(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ЕстьСпецификации = Ложь;
	Для каждого ВыделеннаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элемент.ДанныеСтроки(ВыделеннаяСтрока);
		Если ЗначениеЗаполнено(ДанныеСтроки.Спецификация) Тогда
			ЕстьСпецификации = Истина;
		КонецЕсли;
		Если Объект.РучноеРаспределение Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("КлючСвязиПродукция", ДанныеСтроки.КлючСвязи);
			Строки = Объект.РаспределениеЗапасов.НайтиСтроки(СтруктураОтбора);
			Если Строки.Количество()>0 Тогда
				ЗапасыНеРаспределены = Истина;
			КонецЕсли;
			Для каждого СтрокаРаспределения Из Строки Цикл
				СтрокаРаспределения.КлючСвязиПродукция = 0;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	
	Если Объект.Запасы.Количество()>0 И ЕстьСпецификации Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
	КонецЕсли; 

	// ПараметрическиеСпецификации
	ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.РеквизитыПараметрическихСпецификаций, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПослеУдаления(Элемент)
	
	ОбновитьСпискиВыбораПродукции();
	ЗаполнитьСлужебныеДанныеОперации(Объект);
	
	ОбновитьОтметкуСтруктурнойЕдиницыРезерва(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Объект.Продукция.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	// ПараметрическиеСпецификации
	Если НЕ ТолькоПросмотр 
		И СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации
		И Элемент.ТекущийЭлемент = Элементы.ПродукцияПараметрыСпецификации Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуРедактированияПараметровСпецификации();
		
	КонецЕсли; 
	// Конец ПараметрическиеСпецификации
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПараметрыСпецификацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияПараметровСпецификации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияПараметровСпецификации()
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Спецификация) Тогда
		Возврат;
	КонецЕсли;
	Если ТекущаяСтрока.КлючСвязи=0 Тогда
		ИмяТабличнойЧасти = "Продукция";
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, ТекущаяСтрока); 
	КонецЕсли; 
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("КлючСвязи", ТекущаяСтрока.КлючСвязи);
	СтрокиРеквизиты = Объект.РеквизитыПараметрическихСпецификаций.НайтиСтроки(СтруктураОткрытия);
	СтруктураОткрытия.Вставить("Спецификация", ТекущаяСтрока.Спецификация);
	СтруктураОткрытия.Вставить("Реквизиты", Новый Массив);
	Для каждого СтрокаТабличнойЧасти Из СтрокиРеквизиты Цикл
		СтруктураСтроки = Новый Структура("Свойство, Значение");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабличнойЧасти);
		СтруктураОткрытия.Реквизиты.Добавить(СтруктураСтроки);
	КонецЦикла;
	Оповещение = Новый ОписаниеОповещения("ПродукцияПараметрыСпецификацииЗавершениеВыбора", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Спецификации.Форма.ДополнительныеРеквизитыСпецификации", СтруктураОткрытия, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
 
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПараметрыСпецификацииЗавершениеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.РеквизитыПараметрическихСпецификаций, ВыбранноеЗначение); 
	Для каждого ДанныеДопРеквизитов Из ВыбранноеЗначение.Реквизиты Цикл
		НоваяСтрока = Объект.РеквизитыПараметрическихСпецификаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДопРеквизитов);
		НоваяСтрока.КлючСвязи = ВыбранноеЗначение.КлючСвязи;
	КонецЦикла;
	
	ОбновитьОписанияДопРеквизитов(ЭтотОбъект, ВыбранноеЗначение.КлючСвязи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	Если СкладВШапке Тогда
		СтруктураДанные.Вставить("Склад", Объект.СтруктурнаяЕдиница);
	ИначеЕсли ПодборНоменклатурыИзСписка Тогда
		СтруктураДанные.Вставить("Склад", СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.ДоляСтоимости = 1;
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Сборка") Тогда
		Если НЕ СкладВШапке Тогда
			ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(СтрокаТабличнойЧасти, Объект, СтруктураДанные);
		Иначе
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЗаказНаПроизводство", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
		КонецЕсли;
			
		Если РазрешитьСкладыВТабличныхЧастях Тогда
			Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") 
				Или Объект.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад
				Или Не ЗначениеЗаполнено(ВыбранноеЗначение.Склад) Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				
				Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиница") Тогда
					СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ВыбранноеЗначение.Склад;
				КонецЕсли;
				
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
				
			ИначеЕсли ЗначениеЗаполнено(ВыбранноеЗначение.Склад) И Не Объект.СтруктурнаяЕдиницаРезерв = ВыбранноеЗначение.Склад Тогда
				Режим = РежимДиалогаВопрос.ДаНет;
				ПараметрыОповещения = ВыбранноеЗначение;
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСкладВТЧ", ЭтотОбъект, ПараметрыОповещения);
				ПоказатьВопрос(Оповещение, НСтр("ru = 'Выбранный склад отличен от склада в шапке. Отобразить склад в табличной части?'"), Режим, 0);
				СтандартнаяОбработка = Ложь;
				Возврат;
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				
				Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиница") Тогда
					СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ВыбранноеЗначение.Склад;
				КонецЕсли;
				
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСкладВТЧ(Результат, ПараметрыОповещения) Экспорт
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
		ЗапасыНоменклатураПриИзменении(Неопределено);
		НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		Возврат;
	КонецЕсли;
	
	Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
	
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
	
	Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиница") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ПараметрыОповещения.Склад;
	КонецЕсли;
	
	ЗапасыНоменклатураПриИзменении(Неопределено);
	
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗапасыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Запасы и Остатки
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Номенклатура = ТекущиеДанные.Номенклатура;
	Характеристика = ТекущиеДанные.Характеристика;
	Партия = ТекущиеДанные.Партия;
	Склад = ?(ЗначениеЗаполнено(ТекущиеДанные.СтруктурнаяЕдиница), ТекущиеДанные.СтруктурнаяЕдиница, Объект.СтруктурнаяЕдиницаРезерв);
	
	СтруктураПараметров = Новый Структура("ОрганизацияОбъекта, Номенклатура, Характеристика, Партия, Склад,
										|ЕдиницаИзмерения, ЗаказПокупателя, НомерВариантаКП, ИмяКолонкиСклада, ВидыЗаполненияПоЗаказНаряду");
	
	СтруктураПараметров.Номенклатура = Номенклатура;
	СтруктураПараметров.Характеристика = Характеристика;
	СтруктураПараметров.Партия = Партия;
	СтруктураПараметров.Склад = Склад;
	СтруктураПараметров.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
	СтруктураПараметров.ЗаказПокупателя =?(ЗначениеЗаполнено(ТекущиеДанные.ЗаказПокупателя), ТекущиеДанные.ЗаказПокупателя, Объект.ЗаказПокупателя);
	СтруктураПараметров.НомерВариантаКП = 0;
	СтруктураПараметров.ОрганизацияОбъекта = Объект.Организация;
	СтруктураПараметров.ИмяКолонкиСклада = "СтруктурнаяЕдиница";
	
	ВидыЗаполненияПоЗаказНаряду = Новый Структура("КакВЗаказеПокупателя, КакВРасходнойНакладной");
	ВидыЗаполненияПоЗаказНаряду.КакВЗаказеПокупателя = Истина;
	ВидыЗаполненияПоЗаказНаряду.КакВРасходнойНакладной = Ложь;
	
	СтруктураПараметров.ВидыЗаполненияПоЗаказНаряду = ВидыЗаполненияПоЗаказНаряду;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		Если Элемент.ТекущийЭлемент = Элементы.ЗапасыВРезерве Тогда
			
			ЗначениеПоля = ТекущиеДанные.ВРезерве;
			
			Если ЗначениеЗаполнено(ЗначениеПоля) И ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыВРезерве");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				СтруктураПараметров.Склад = Неопределено;
				
				СписокДокументов = СписокДокументовПоЗаказу("Остаток", СтруктураПараметров);
				
				ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент = Элементы.ЗапасыРазмещено И ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ЗначениеПоля = ТекущиеДанные.Размещено;
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыРазмещено");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				СтруктураПараметров.Склад = Неопределено;
				
				СписокДокументов = СписокДокументовПоЗаказу("Заказано", СтруктураПараметров);
				ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент = Элементы.ЗапасыОстатокОбщий 
			Или Элемент.ТекущийЭлемент = Элементы.ЗапасыСтруктурнаяЕдиницаОстатки Тогда
			
			ЗначениеПоля = ТекущиеДанные.ОстатокОбщий;
			
			СписокВыбораСклад = Элементы.ЗапасыСтруктурнаяЕдиницаОстатки.СписокВыбора;
			СписокВыбораСклад.Очистить();
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыОстатокОбщий");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				СписокДокументов = СписокДокументовПоЗаказу("ОбщиеЗапасы", СтруктураПараметров);
				
				Для Каждого ЭлементСписка Из СписокДокументов Цикл
					СписокВыбораСклад.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление,, ЭлементСписка.Картинка);
				КонецЦикла;
				
				Если Не ТекущиеДанные.ОстатокОбщий = 0 И РазрешитьСкладыВТабличныхЧастях И РезервированиеЗапасов Тогда
					
					ОстатокОбщий = ?(ТекущиеДанные.ОстатокОбщий <= 0, "", Формат(ТекущиеДанные.ОстатокОбщий, "ЧДЦ = 3"));
					
					ПредставлениеОбщегоОстатка = ОстатокОбщий + " " + Строка(ТекущиеДанные.ЕдиницаИзмерения) + ". <Всего>; Заполнить по остаткам.";
					
					ЭлементСпискаЗначений = Новый СписокЗначений;
					ЭлементСпискаЗначений.Добавить("РаспределитьПоРезервам", ПредставлениеОбщегоОстатка);
					
					СписокВыбораСклад.Добавить(ЭлементСпискаЗначений[0].Значение, ПредставлениеОбщегоОстатка);
					СписокДокументов.Добавить(ЭлементСпискаЗначений[0].Значение, ПредставлениеОбщегоОстатка);
					
				КонецЕсли;
				
				Если СписокДокументов.Количество() Тогда
					СписокДокументов.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"),, БиблиотекаКартинок.Отчет);
					СписокВыбораСклад.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"),, БиблиотекаКартинок.Отчет);
				КонецЕсли;
				
				Если Элемент.ТекущийЭлемент = Элементы.ЗапасыОстатокОбщий Тогда
					ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент = Элементы.ЗапасыДатаПоступления Тогда
			
			ЗначениеПоля = ТекущиеДанные.ДатаПоступления;
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыПоступления");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				СписокДокументов = СписокДокументовПоЗаказу("ЗапасыПоступления", СтруктураПараметров);
				ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаОстаткиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаОстаткиОчистка(Элемент, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРезервДляРежимаОстаткиПриИзменении(Элемент)
		
	Если РежимОстаткиИРезервы Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаОстаткиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = Неопределено Тогда Возврат КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") ИЛИ ВыбранноеЗначение = "РаспределитьПоРезервам" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров = Новый Структура("ВыбранноеПоле", "ЗапасыОстатокОбщий");
		
		ЭлементСпискаЗначений = Новый СписокЗначений;
		ЭлементСпискаЗначений.Добавить(ВыбранноеЗначение);
		
		ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти(ЭлементСпискаЗначений[0], СтруктураПараметров);
		
	ИначеЕсли ВыбранноеЗначение = "ОтчетОстаткиНаСкладах" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда Возврат КонецЕсли;
		
		Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "ПоМестамХранения");
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
		ОтборРасшифровки = Новый Соответствие;
		ОтборРасшифровки.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		ОтборРасшифровки.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		ОтборРасшифровки.Вставить("СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
		ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
		
		ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия);
		
	Иначе
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЗаказПокупателяПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
		СтрокаТабличнойЧасти.Резерв = 0;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока И Копирование Тогда
		ТекущаяСтрока.КлючСвязи = 0;
	КонецЕсли;
		
	ИмяТабличнойЧасти = "Запасы";
	
	Если НоваяСтрока ИЛИ ТекущаяСтрока.КлючСвязи=0 Тогда
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект);
	КонецЕсли; 
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтарыеДанныеСтроки = Неопределено;
		ЗаполнитьДанныеШапки(Объект, ТекущаяСтрока);
	ИначеЕсли НЕ НоваяСтрока Тогда 
		СтруктураПолей = Новый Структура(ИменаКолонокЗапасов(Объект));
		ЗаполнитьЗначенияСвойств(СтруктураПолей, ТекущаяСтрока);
		СтарыеДанныеСтроки = Новый ФиксированнаяСтруктура(СтруктураПолей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриИзменении(Элемент)
	
	ОбновитьОтметкуСтруктурнойЕдиницыРезерва(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	Если НЕ Объект.РучноеРаспределение Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект);
	КонецЕсли;
	Если ТипЗнч(СтарыеДанныеСтроки)=Тип("ФиксированныйМассив") Тогда
		Значения = Новый Массив(СтарыеДанныеСтроки);
		Для каждого Значение Из Значения Цикл
			СтарыеДанныеСтроки = Значение;
			ОбновитьКэшКонтроляПриИзмененииДанныхСтроки();
		КонецЦикла; 
	Иначе
		ОбновитьКэшКонтроляПриИзмененииДанныхСтроки();
	КонецЕсли; 
	
	ОбновитьОтметкуСтруктурнойЕдиницыРезерва(); 
	
	Если РежимОстаткиИРезервы Тогда
		Если ЗначениеЗаполнено(НоменклатураУдаленнойСтроки) Тогда
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,НоменклатураУдаленнойСтроки);
		Иначе
			ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьКэшКонтроляПриИзмененииДанныхСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование И РежимОстаткиИРезервы Тогда
		
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		
		Отказ = Истина;
		
		НоваяСтрока = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		НоваяСтрока.Резерв = 0;
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура", 	НоваяСтрока.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	НоваяСтрока.Характеристика);
		СтруктураДанные.Вставить("Партия", 	НоваяСтрока.Партия);
		
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
		
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	Если Отказ ИЛИ НЕ Объект.РучноеРаспределение Тогда
		СтарыеДанныеСтроки = Неопределено;
	ИначеЕсли Элементы.Запасы.ВыделенныеСтроки.Количество()>1 Тогда
		СохраняемыеДанные = Новый Массив;
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			СтруктураПолей = Новый Структура(ИменаКолонокЗапасов(Объект));
			ЗаполнитьЗначенияСвойств(СтруктураПолей, ТекущиеДанныеСтроки);
			СохраняемыеДанные.Добавить(Новый ФиксированнаяСтруктура(СтруктураПолей));
		КонецЦикла;
		СтарыеДанныеСтроки = Новый ФиксированныйМассив(СохраняемыеДанные);
	ИначеЕсли Элементы.Запасы.ВыделенныеСтроки.Количество()=1 Тогда
		СтруктураПолей = Новый Структура(ИменаКолонокЗапасов(Объект));
		ЗаполнитьЗначенияСвойств(СтруктураПолей, Элемент.ТекущиеДанные);
		СтарыеДанныеСтроки = Новый ФиксированнаяСтруктура(СтруктураПолей);
	Иначе
		СтарыеДанныеСтроки = Неопределено;
	КонецЕсли;
	
	// Остатки и резервы
	Если РежимОстаткиИРезервы И Не Отказ Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
		НоменклатураУдаленнойСтроки = ТекущиеДанные.Номенклатура;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПредупреждениеЗапасыЗакрытьНажатие(Элемент)
	
	УстановитьКартинкиЗакладок(ЭтотОбъект, Истина);		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЭтапАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивСпецификаций = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		МассивСпецификаций.Добавить(СтрокаТабличнойЧасти.Спецификация);
	КонецЦикла; 
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(ЭтапыПроизводства(МассивСпецификаций));
	ОбновитьПредставлениеПустогоЭтапа(ДанныеВыбора); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ЗаказНаПроизводство.Запасы");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка запасов из файла'"));
	НастройкиЗагрузкиДанных.Вставить("ПоложениеЗаказаПокупателя", Объект.ПоложениеЗаказаПокупателя);
	НастройкиЗагрузкиДанных.Вставить("ПоложениеСклада", Объект.ПоложениеСклада);
	НастройкиЗагрузкиДанных.Вставить("ВидОперации", Объект.ВидОперации);
	НастройкиЗагрузкиДанных.Вставить("ЗаказЗаполнен", ЗаказПокупателяЗаполнен(Объект));
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги", Ложь);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределениеЗапасов

&НаКлиенте
Процедура РаспределениеЗапасовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		ТекущаяСтрока.НомерСтроки = РаспределениеЗапасов.Количество();
		СтарыеДанныеСтроки = Неопределено;
		Если ЗначениеЗаполнено(ТекущаяПродукция) Тогда
			ТекущаяСтрока.КлючСвязиПродукция = ТекущаяПродукция;
			СтрокаПродукции = СтрокаПоКлючу(Объект.Продукция, ТекущаяПродукция);
			ЗаполнитьДанныеПродукцииВСтрокеРаспределения(ТекущаяСтрока, СтрокаПродукции);
		КонецЕсли; 
		ЗаполнитьДанныеШапки(Объект, Элемент.ТекущиеДанные);
	Иначе
		СтруктураПолей = Новый Структура(ИменаКолонокЗапасов(Объект));
		ЗаполнитьЗначенияСвойств(СтруктураПолей, Элемент.ТекущиеДанные);
		СтарыеДанныеСтроки = Новый ФиксированнаяСтруктура(СтруктураПолей);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьДанныеТЧРаспределениеЗапасов(ЭтотОбъект);
	ОбновитьКэшКонтроляПриИзмененииДанныхСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ДанныеПеретаскивания = Новый Структура;
	ДанныеПеретаскивания.Вставить("Событие", "ПерераспределениеМатериалов");
	ДанныеПеретаскивания.Вставить("Строка", Элемент.ТекущаяСтрока);
	
	ПараметрыПеретаскивания.Значение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПеретаскивания);
	
КонецПроцедуры                                                                                                                           

&НаКлиенте
Процедура РаспределениеЗапасовПередУдалением(Элемент, Отказ)
	
	Если Отказ Тогда
		СтарыеДанныеСтроки = Неопределено;
	Иначе
		СтруктураПолей = Новый Структура(ИменаКолонокЗапасов(Объект));
		ЗаполнитьЗначенияСвойств(СтруктураПолей, Элемент.ТекущиеДанные);
		СтарыеДанныеСтроки = Новый ФиксированнаяСтруктура(СтруктураПолей);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПродукцииПриАктивизацииСтроки(Элемент)
	
	ЭлементСписка = Элементы.СписокПродукции.ТекущиеДанные;
	Если ЭлементСписка=Неопределено ИЛИ ЭлементСписка.Значение=ТекущаяПродукция Тогда
		Возврат;
	КонецЕсли; 
	
	ОбновитьРаспределениеЗапасовНаФорме();
	
	// МобильныйКлиент
	Если ЭтоМобильныйКлиент Тогда
		Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			Элементы.ПраваяПанель.Заголовок = НСтр("ru = 'Отборы (установлены)'");
		Иначе
			Элементы.ПраваяПанель.Заголовок = НСтр("ru = 'Отборы'");
		КонецЕсли;
	КонецЕсли; 
	// Конец МобильныйКлиент	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПродукцииПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли; 
	
	Если Строка=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение)<>Тип("Массив") ИЛИ ПараметрыПеретаскивания.Значение.Количество()<>1 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСобытия = ПараметрыПеретаскивания.Значение[0];
	
	Если ТипЗнч(ОписаниеСобытия)<>Тип("Структура") ИЛИ НЕ ОписаниеСобытия.Свойство("Событие") ИЛИ ОписаниеСобытия.Событие<>"ПерераспределениеМатериалов" Тогда
		Возврат;
	КонецЕсли; 
	
	ЭлементСписка = СписокПродукции.НайтиПоИдентификатору(Строка);
	СтрокаРаспределения = РаспределениеЗапасов.НайтиПоИдентификатору(ОписаниеСобытия.Строка);
	Если ЭлементСписка=Неопределено ИЛИ ЭлементСписка.Значение=0 ИЛИ СтрокаРаспределения.КлючСвязиПродукция=ЭлементСписка.Значение Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПродукцииПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли; 
	
	ЭлементСписка = СписокПродукции.НайтиПоИдентификатору(Строка);
	Если ЭлементСписка=Неопределено ИЛИ ЭлементСписка.Значение=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение)<>Тип("Массив") ИЛИ ПараметрыПеретаскивания.Значение.Количество()<>1 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСобытия = ПараметрыПеретаскивания.Значение[0];
	
	СтрокаРаспределения = РаспределениеЗапасов.НайтиПоИдентификатору(ОписаниеСобытия.Строка);
	Если СтрокаРаспределения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПродукции = СтрокаПоКлючу(Объект.Продукция, ЭлементСписка.Значение);
	Если СтрокаПродукции=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПродукции", СтрокаПродукции);
	СтруктураПараметров.Вставить("СтрокаРаспределения", СтрокаРаспределения);
	Оповещение = Новый ОписаниеОповещения("СписокПродукцииПеретаскиваниеЗавершение", ЭтотОбъект, СтруктураПараметров);
	ПоказатьВводЧисла(Оповещение, СтрокаРаспределения.Количество, НСтр("ru = 'Количество'"), 15, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПродукцииПеретаскиваниеЗавершение(Количество, СтруктураПараметров) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Количество) ИЛИ ТипЗнч(Количество)<>Тип("Число") Тогда
		Возврат;
	КонецЕсли; 	
	
	СтрокаПродукции = СтруктураПараметров.СтрокаПродукции;
	СтрокаРаспределения = СтруктураПараметров.СтрокаРаспределения;
	
	Если СтрокаПродукции.ЗаказПокупателя<>СтрокаРаспределения.ЗаказПокупателя Тогда
		// Предварительно требуется замена идентификатора запасов
		СтрокаРаспределения.ЗаказПокупателя = СтрокаПродукции.ЗаказПокупателя;
	КонецЕсли; 
	
	Если Количество>СтрокаРаспределения.Количество Тогда
		Количество = СтрокаРаспределения.Количество;
	КонецЕсли;
	
	Если ТекущаяПродукция=0 Тогда
		// Отображается полный список распределенных запасов
		НоваяСтрока = НайтиСуществующуюСтрокуРаспределения(РаспределениеЗапасов, СтрокаПродукции.КлючСвязи, СтрокаРаспределения);
		Если Количество=СтрокаРаспределения.Количество Тогда
			// Переносятся все материалы из строки распределения
			Если НоваяСтрока=Неопределено Тогда
				ЗаполнитьДанныеПродукцииВСтрокеРаспределения(СтрокаРаспределения, СтрокаПродукции);
			Иначе
				НоваяСтрока.Количество = НоваяСтрока.Количество+Количество;
				РаспределениеЗапасов.Удалить(СтрокаРаспределения);
			КонецЕсли; 
		Иначе
			// Переносится часть материалов
			Если НоваяСтрока=Неопределено Тогда
				НоваяСтрока = РаспределениеЗапасов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				НоваяСтрока.Количество = Количество;
				ЗаполнитьДанныеПродукцииВСтрокеРаспределения(НоваяСтрока, СтрокаПродукции);
			Иначе
				НоваяСтрока.Количество = НоваяСтрока.Количество+Количество;
			КонецЕсли; 
			СтрокаРаспределения.Количество = СтрокаРаспределения.Количество-Количество;
		КонецЕсли;
		ОбновитьДанныеТЧРаспределениеЗапасов(ЭтотОбъект);
	Иначе
		// Отображается список распределенных запасов с отбором по изделию
		СтараяСтрока = НайтиСуществующуюСтрокуРаспределения(Объект.РаспределениеЗапасов, СтрокаРаспределения.КлючСвязиПродукция, СтрокаРаспределения);
		НоваяСтрока = НайтиСуществующуюСтрокуРаспределения(Объект.РаспределениеЗапасов, СтрокаПродукции.КлючСвязи, СтараяСтрока);
		Если Количество=СтрокаРаспределения.Количество Тогда
			// Переносятся все материалы из строки распределения
			Если НоваяСтрока=Неопределено Тогда
				СтараяСтрока.КлючСвязиПродукция = СтрокаПродукции.КлючСвязи;
			Иначе
				НоваяСтрока.Количество = НоваяСтрока.Количество+Количество;
				Объект.РаспределениеЗапасов.Удалить(СтараяСтрока);
			КонецЕсли; 
			РаспределениеЗапасов.Удалить(СтрокаРаспределения);
		Иначе
			// Переносится часть материалов
			Если НоваяСтрока=Неопределено Тогда
				НоваяСтрока = Объект.РаспределениеЗапасов.Добавить();
				ЗаполнитьДанныеЗапасовВСтрокеРаспределения(Объект, НоваяСтрока, СтрокаРаспределения);
				НоваяСтрока.КлючСвязиПродукция = СтрокаПродукции.КлючСвязи;
				НоваяСтрока.Количество = Количество;
			Иначе
				НоваяСтрока.Количество = НоваяСтрока.Количество+Количество;
			КонецЕсли;
			СтараяСтрока.Количество = СтараяСтрока.Количество-Количество;
			СтрокаРаспределения.Количество = СтрокаРаспределения.Количество-Количество;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовНоменклатураПродукцияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение)<>Тип("Число") Тогда
		Возврат;
	КонецЕсли; 	
	
	СтрокаПродукция = СтрокаПоКлючу(Объект.Продукция, ВыбранноеЗначение);
	Если СтрокаПродукция=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяСтрока = Элементы.РаспределениеЗапасов.ТекущиеДанные;
	
	ЗаполнитьДанныеПродукцииВСтрокеРаспределения(ТекущаяСтрока, СтрокаПродукция);
	
	Если Элементы.Найти("РаспределениеЗапасовНоменклатура")<>Неопределено Тогда
		Элементы.РаспределениеЗапасов.ТекущийЭлемент = Элементы.РаспределениеЗапасовНоменклатура;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовНоменклатураПриИзменении(Элемент)
	
	ТекСтр = Элементы.РаспределениеЗапасов.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", ТекСтр.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", ТекСтр.Характеристика);
	СтруктураДанные.Вставить("Партия", ТекСтр.Партия);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	ТекСтр.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	ТекСтр.Количество = 1;
	ТекСтр.Спецификация = СтруктураДанные.Спецификация;
	
	//Характеристики
	ТекСтр.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	ТекСтр.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	ТекСтр.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			ТекСтр.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			ТекСтр.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	//Конец Характеристики
	
	//Партии
	ТекСтр.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	ТекСтр.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			ТекСтр.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			ТекСтр.Партия = СтруктураДанные.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Сборка") Тогда
		Если НЕ СкладВШапке Тогда
			ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(ТекСтр, Объект, СтруктураДанные);
		Иначе
			ТекСтр.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.РаспределениеЗапасов.ТекущиеДанные;
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
			
		Если РазрешитьСкладыВТабличныхЧастях Тогда
			Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				
				Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиница") Тогда
					СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ВыбранноеЗначение.Склад;
				КонецЕсли;
				
			Иначе
				Режим = РежимДиалогаВопрос.ДаНет;
				ПараметрыОповещения = ВыбранноеЗначение;
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСкладВТЧРаспределениеЗапасов", ЭтотОбъект, ПараметрыОповещения);
				ПоказатьВопрос(Оповещение, НСтр("ru = 'Выбранный склад отличен от склада в шапке. Отобразить склад в табличной части?'"), Режим, 0);
			КонецЕсли;
		КонецЕсли;
		
		ВыбранноеЗначение = СтрокаТабличнойЧасти.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСкладВТЧРаспределениеЗапасов(Результат, ПараметрыОповещения) Экспорт
	
	СтрокаТабличнойЧасти = Элементы.РаспределениеЗапасов.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
		РаспределениеЗапасовНоменклатураПриИзменении(Неопределено);
		Возврат;
	КонецЕсли;
	
	Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
	
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
	
	Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиница") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ПараметрыОповещения.Склад;
	КонецЕсли;
	
	РаспределениеЗапасовНоменклатураПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовХарактеристикаПриИзменении(Элемент)
	
	ТекСтр = Элементы.РаспределениеЗапасов.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", ТекСтр.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", ТекСтр.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	ТекСтр.Спецификация = СтруктураДанные.Спецификация;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанель(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);

КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовПриАктивизацииСтроки(Элемент)
	
	ОбновитьТекстПодсказкиРаспределения();	
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовПослеУдаления(Элемент)
	
	ОбновитьДанныеТЧРаспределениеЗапасов(ЭтотОбъект);
	ОбновитьКэшКонтроляПриИзмененииДанныхСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура РучноеРаспределениеРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("СтрокаПоиска", НСтр("ru = 'Способ распределения материалов'"));
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииСпособаРаспределенияПоУмолчанию", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма",
			ПараметрыОткрытияФормы,
			ЭтотОбъект,
			Ложь,,,
			ОписаниеОповещения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовНоменклатураПродукцияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовЭтапАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.РаспределениеЗапасов.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СпецификацияПродукция) Тогда
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.ЗагрузитьЗначения(ЭтапыПроизводства(СтрокаТабличнойЧасти.СпецификацияПродукция));
		ОбновитьПредставлениеПустогоЭтапа(ДанныеВыбора); 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОперации

&НаКлиенте
Процедура ОперацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(ТекущаяСтрока, Объект, "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");
		Если Объект.ПоложениеСтруктурнойЕдиницыОпераций <> ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
			ТекущаяСтрока.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаОпераций;
		КонецЕсли; 
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(ТекущаяСтрока, Объект, "Исполнитель", "ПоложениеИсполнителя");
	КонецЕсли; 
	
	Если НоваяСтрока И Копирование Тогда
		ТекущаяСтрока.КлючСвязи = 0;
	КонецЕсли;	
	
	Если НоваяСтрока ИЛИ ТекущаяСтрока.КлючСвязи = 0 Тогда
		ИмяТабличнойЧасти = "Операции";
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект);
	КонецЕсли; 
	
	Если ТекущаяСтрока.Исполнитель = Неопределено Тогда
		ТекущаяСтрока.Исполнитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя="ОперацииИзменитьСостав" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуИзмененияСостава(ВыбраннаяСтрока);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПередУдалением(Элемент, Отказ)
	
	ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "СоставБригады");
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПриИзменении(Элемент)
	
	ОбновитьАвтоОтметкиПриИзмененииОпераций(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение)<>Тип("Число") Тогда
		Возврат;
	КонецЕсли; 	
	
	СтрокаПродукция = СтрокаПоКлючу(Объект.Продукция, ВыбранноеЗначение);
	Если СтрокаПродукция=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяСтрока = Элементы.Операции.ТекущиеДанные;
	
	ЗаполнитьДанныеПродукцииВСтрокеОперации(Объект, ТекущаяСтрока, СтрокаПродукция);
	ПриИзмененииНоменклатурыХарактеристикиСпецификацииОпераций();
	ВыбранноеЗначение = СтрокаПродукция.Номенклатура;
	
	Если Элементы.Найти("ОперацииОперация")<>Неопределено Тогда
		Элементы.Операции.ТекущийЭлемент = Элементы.ОперацииОперация;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатурыХарактеристикиСпецификацииОпераций()
	
	СтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Спецификация", СтрокаТабличнойЧасти.Спецификация);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, "Операции");
	
	Если ЗначениеЗаполнено(СтруктураДанные.Операция) Тогда
		СтрокаТабличнойЧасти.Операция 			= СтруктураДанные.Операция;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.НормаВремени 		= СтруктураДанные.НормаВремени;
		РассчитатьДлительностьОперации();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииОперацияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Спецификация", СтрокаТабличнойЧасти.Спецификация);
	СтруктураДанные.Вставить("Операция", 	СтрокаТабличнойЧасти.Операция);
	
	СтруктураРезультат = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, "Операции");
	
	Если ЗначениеЗаполнено(СтруктураДанные.Операция) Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураРезультат.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.НормаВремени 		= СтруктураРезультат.НормаВремени;
	Иначе
		СтрокаТабличнойЧасти.НормаВремени 		= 0;
	КонецЕсли; 
	РассчитатьДлительностьОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииКоличествоПланПриИзменении(Элемент)
	
	РассчитатьДлительностьОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииНормаВремениПриИзменении(Элемент)
	
	РассчитатьДлительностьОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.НормаВремени = СтрокаТабличнойЧасти.НормаВремени * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		РассчитатьДлительностьОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииИсполнительПриИзменении(Элемент)
	
	ОбновитьКэшиДанных();
	СтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	ЗаполнитьСлужебныеДанныеВСтрокеОпераций(Объект, СтрокаТабличнойЧасти);
	Если Объект.ПоложениеСтруктурнойЕдиницыОпераций=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") И НЕ СтрокаТабличнойЧасти.ИсполнительБригада Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = КэшПодразделения.Получить(СтрокаТабличнойЧасти.Исполнитель);
	ИначеЕсли Объект.ПоложениеСтруктурнойЕдиницыОпераций=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаОпераций;
	КонецЕсли;
	Если СтрокаТабличнойЧасти.ИсполнительБригада Тогда
		Если СтрокаТабличнойЧасти.КлючСвязи=0 Тогда
			ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, СтрокаТабличнойЧасти);
		КонецЕсли;
		ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.СоставБригады, СтрокаТабличнойЧасти);
		ЗаполнитьСоставБригадыНаСервере(СтрокаТабличнойЧасти.Исполнитель, СтрокаТабличнойЧасти.КлючСвязи);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	СтрокаТабличнойЧасти.Исполнитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИзмененияСостава(Идентификатор)
	
	СтрокаТабличнойЧасти = Объект.Операции.НайтиПоИдентификатору(Идентификатор);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	ПараметрыОткрытия.Вставить("Идентификатор", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	ПараметрыОткрытия.Вставить("ПоложениеСтруктурнойЕдиницы", Объект.ПоложениеСтруктурнойЕдиницыОпераций);
	ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаОпераций);
	ПараметрыОткрытия.Вставить("СоставБригады", Новый Массив);
	ПараметрыОткрытия.Вставить("Бригада", СтрокаТабличнойЧасти.Исполнитель);
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
	ПараметрыОткрытия.Вставить("СкрытьТабельныйНомер", Истина);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	СтрокиСостава = Объект.СоставБригады.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТабличнойЧасти Из СтрокиСостава Цикл
		ОписаниеСтроки = Новый Структура("Сотрудник, КТУ, СтруктурнаяЕдиница");
		ЗаполнитьЗначенияСвойств(ОписаниеСтроки, СтрокаТабличнойЧасти);
		ПараметрыОткрытия.СоставБригады.Добавить(ОписаниеСтроки);
	КонецЦикла;
	
	ОткрытьФорму("Документ.СдельныйНаряд.Форма.ФормаИзмененияСоставаБригады", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставБригадыСотрудникПриИзменении(Элемент)
	
	ОбновитьКэшиДанных();
	СтрокаТабличнойЧасти = Элементы.СоставБригады.ТекущиеДанные;
	СтрокаТабличнойЧасти.КТУ = 1;
	Если Объект.ПоложениеСтруктурнойЕдиницыОпераций=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = КэшПодразделения.Получить(СтрокаТабличнойЧасти.Исполнитель);
	Иначе
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииЭтапАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.ЗагрузитьЗначения(ЭтапыПроизводства(СтрокаТабличнойЧасти.Спецификация));
		ОбновитьПредставлениеПустогоЭтапа(ДанныеВыбора); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставБригадыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		Если Объект.ПоложениеСтруктурнойЕдиницыОпераций<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
			ТекущаяСтрока.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаОпераций;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРесурсыПредприятия

&НаКлиенте
Процедура РесурсыПредприятияРесурсПредприятияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Ресурс", ТекущиеДанные.РесурсПредприятия);
	
	ТекущиеДанные.Мощность = 1;
	
	ПланированиеРесурсовУНФКлиент.ОчиститьДанныеСтроки(ТекущиеДанные);
	ЗаполнитьДанныеТаблицыРесурсовНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияСтартПриИзменении(Элемент)
	ПриИзмененииПериода(Истина)
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияСтартВремяПриИзменении(Элемент)
	ПриИзмененииПериода(Истина)
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияДниПриИзменении(Элемент)
	ЗадатьОкончаниеПериода();
	УстановитьДоступностьПовторов();
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияВремяПриИзменении(Элемент)
	ЗадатьОкончаниеПериода();
	УстановитьДоступностьПовторов();
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияФинишПриИзменении(Элемент)
	ПриИзмененииПериода()
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияФинишВремяПриИзменении(Элемент)
	ПриИзмененииПериода()
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияРасписаниеПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ДатаСтроки = День(ТекущиеДанные.Старт);
	
	ПараметрыОповещения = Новый Структура;
	
	Оповещение = Новый ОписаниеОповещения("ПослеОкончанияРедактированияРасписания", ЭтотОбъект, ПараметрыОповещения);
	
	СтруктураПовторов = Новый Структура("ИнтервалПовторения, Пн, Вт, Ср, Чт, Пт, Сб, Вс, ПоследнийДеньМесяца, ДатаПовторения, ДеньНеделиМесяца, ДатаСтроки, ТекДеньНедели, НомерНеделиМесяца, ПериодСтроки, НомерМесяца"
										,ТекущиеДанные.ИнтервалПовторения, ТекущиеДанные.Пн, ТекущиеДанные.Вт, ТекущиеДанные.Ср
										,ТекущиеДанные.Чт,ТекущиеДанные.Пт, ТекущиеДанные.Сб, ТекущиеДанные.Вс, ТекущиеДанные.ПоследнийДеньМесяца
										,ТекущиеДанные.ДатаПовторения, ТекущиеДанные.ДеньНеделиМесяца, ДатаСтроки, ДеньНедели(ТекущиеДанные.Старт), ТекущиеДанные.НомерНеделиМесяца, ТекущиеДанные.Старт, ТекущиеДанные.НомерМесяца);
	
	ПараметрыОткрытия = Новый Структура("Повторяемость, СтруктураПовторов", ТекущиеДанные.ВидПовтора, СтруктураПовторов);
	
	ОткрытьФорму("Обработка.ПланировщикРесурсов.Форма.ФормаРедактированияРасписания",ПараметрыОткрытия, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Контроль(Команда)
	КонтрольНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрольНаСервере()
	ПланированиеРесурсовУНФ.КонтрольПараметровЗагрузкиРесурсов(Истина,, Объект.РесурсыПредприятия, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура КонтрольВсеНаСервере()
	ПланированиеРесурсовУНФ.КонтрольПараметровЗагрузкиРесурсов(Истина, Истина, Объект.РесурсыПредприятия, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольВсе(Команда)
	КонтрольВсеНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрольГраницНаСервере()
	ПланированиеРесурсовУНФ.КонтрольПараметровЗагрузкиРесурсов(,Истина, Объект.РесурсыПредприятия, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольГраниц(Команда)
	КонтрольГраницНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодборРесурсы(Команда)
	
	ПараметрыОткрытия = Новый Структура("ЭтоПодбор, РесурсыПредприятия, ГраницыПланирования, НомерПодсистемы", Истина, Объект.РесурсыПредприятия,,2);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодбораИзПланировщикаЗавершение", ЭтотОбъект, ПараметрыОткрытия);
	
	ОткрытьФорму("Обработка.ПланировщикРесурсов.Форма.ФормаПланировщика", ПараметрыОткрытия,,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораИзПланировщикаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		Объект.РесурсыПредприятия.Очистить();
		
		ВыбранныеРесурсы = Результат;
		
		Для Каждого СтрокаРесурсов Из ВыбранныеРесурсы Цикл
			
			НоваяСтрока = Объект.РесурсыПредприятия.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРесурсов);
			
			НоваяСтрока.РесурсПредприятия = СтрокаРесурсов.Ресурс;
			НоваяСтрока.Старт = СтрокаРесурсов.НачалоПериода;
			НоваяСтрока.Финиш = СтрокаРесурсов.ОкончаниеПериода;
			НоваяСтрока.Мощность = СтрокаРесурсов.Загрузка;
			НоваяСтрока.Длительность = Дата(1,1,1)+(НоваяСтрока.Финиш - НоваяСтрока.Старт); 
			
		КонецЦикла;
		
		ЗаполнитьДанныеТаблицыРесурсовНаФорме();
		
		УстановитьДоступностьПовторов(, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию""! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоДокументу();
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка") Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.ЗаказПокупателя) 
				И Объект.ПоложениеЗаказаПокупателя<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
				
				Для Каждого СтрокаЗапасы Из Объект.Продукция Цикл
					СтрокаЗапасы.Резерв = 0;
				КонецЦикла;
				Элементы.ПродукцияРезерв.Видимость = Ложь;
				
			Иначе
				
				Если Элементы.ПродукцияРезерв.Видимость = Ложь Тогда
					Элементы.ПродукцияРезерв.Видимость = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(Объект.ЗаказПокупателя) 
				И Объект.ПоложениеЗаказаПокупателя<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
				
				Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
					СтрокаЗапасы.Резерв = 0;
				КонецЦикла;
				
				Элементы.ЗапасыРезерв.Видимость = Ложь;
				Элементы.ЗапасыИзменитьРезерв.Видимость = Ложь;
				
			Иначе
				
				Если НЕ Элементы.ЗапасыРезерв.Видимость Тогда
					Элементы.ЗапасыРезерв.Видимость = Истина;
					Элементы.ЗапасыИзменитьРезерв.Видимость = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновитьСпискиВыбораПродукции();
		ЗапасыНеЗаполнены = Ложь;
		ВывестиОтметкиКонтроля(ЭтотОбъект);
		
		ОбновитьОтметкуСтруктурнойЕдиницыРезерва();
		
		Если Объект.РесурсыПредприятия.Количество() Тогда
			УстановитьДоступностьПовторов();
			ЗаполнитьДанныеТаблицыРесурсовНаФорме();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры  // ЗаполнитьВыполнить()

&НаКлиенте
Процедура ЗаполнитьПоЗаказуПокупателя(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоЗаказуПокупателяЗавершение", ЭтотОбъект), НСтр(
		"ru = 'Документ будет полностью перезаполнен по ""Заказу покупателя"". Продолжить операцию?'"),
		РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуПокупателяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоДокументу("ЗаказПокупателя");
		
		ОбновитьСпискиВыбораПродукции();
		ЗапасыНеЗаполнены = Ложь;
		ВывестиОтметкиКонтроля(ЭтотОбъект);
		
		ОбновитьОтметкуСтруктурнойЕдиницыРезерва();
		
		Если Объект.РесурсыПредприятия.Количество() Тогда
			УстановитьДоступностьПовторов();
			ЗаполнитьДанныеТаблицыРесурсовНаФорме();
		КонецЕсли;
		
	КонецЕсли;

	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРезервЗаполнитьПоОстаткам(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Запасы"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКолонкуРезервПоОстаткамНаСервере();
	
	ОбновитьОтметкуСтруктурнойЕдиницыРезерва(); 
	
КонецПроцедуры // ИзменитьРезервЗаполнитьПоОстаткам()

&НаКлиенте
Процедура ИзменитьРезервОчиститьРезерв(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Запасы"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.Резерв = 0;
	КонецЦикла;
	
	ОбновитьОтметкуСтруктурнойЕдиницыРезерва(); 
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьРезервЗаполнитьПоОстаткам()

&НаКлиенте
Процедура ШапкаТабличнаяЧасть(Команда)
	
	ЗаполнениеОбъектовУНФКлиент.ЗаполнитьПустыеПоложения(Объект, "ПоложениеСклада, ПоложениеЗаказаПокупателя, ПоложениеИсполнителя, ПоложениеСтруктурнойЕдиницыОпераций");
	
	ПараметрыДиалога = Новый Структура;
	Если КэшЗначений.РезервированиеЗапасов ИЛИ Объект.УчетПотребностиПоЗаказам Тогда
		ПараметрыДиалога.Вставить("ПоложениеЗаказаПокупателяВДокументахПроизводства", Объект.ПоложениеЗаказаПокупателя);
	КонецЕсли; 
	Если КэшЗначений.РезервированиеЗапасов ИЛИ Объект.УчетПотребностиПоСкладам И РазрешитьСкладыВТабличныхЧастях Тогда
		ПараметрыДиалога.Вставить("ПоложениеСкладаВДокументахПроизводства", Объект.ПоложениеСклада);
	КонецЕсли; 
	ПараметрыДиалога.Вставить("ПоложениеИсполнителяВСдельномНаряде", Объект.ПоложениеИсполнителя);
	Если КэшЗначений.УчетПоНесколькимПодразделениям Тогда
		ПараметрыДиалога.Вставить("ПоложениеСтруктурнойЕдиницыВСдельномНаряде", Объект.ПоложениеСтруктурнойЕдиницыОпераций);
	КонецЕсли; 
	ПараметрыДиалога.Вставить("БылиВнесеныИзменения", Ложь);
	ПараметрыДиалога.Вставить("Доступность", Новый Структура("ПоложениеСкладаВДокументахПроизводства", НЕ РежимОстаткиИРезервы));
	
	ОткрытьФорму(
	"ОбщаяФорма.ШапкаТабличнаяЧасть",
	ПараметрыДиалога,,,,,
	Новый ОписаниеОповещения("ШапкаТабличнаяЧастьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиВнесеныИзменения Тогда
		ШапкаТабличнаяЧастьЗавершениеНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШапкаТабличнаяЧастьЗавершениеНаСервере(Знач Результат)
	
	Если Результат.Свойство("ПоложениеЗаказаПокупателяВДокументахПроизводства") 
		И Объект.ПоложениеЗаказаПокупателя <> Результат.ПоложениеЗаказаПокупателяВДокументахПроизводства Тогда
		Если Результат.ПоложениеЗаказаПокупателяВДокументахПроизводства <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			Объект.ЗаказПокупателя = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Объект.Продукция, "ЗаказПокупателя");
		КонецЕсли; 
		Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.ЗаказПокупателя;
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.ЗаказПокупателя;
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из Объект.РаспределениеЗапасов Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.ЗаказПокупателя;
		КонецЦикла; 
		Объект.ПоложениеЗаказаПокупателя = Результат.ПоложениеЗаказаПокупателяВДокументахПроизводства;
	КонецЕсли; 
	
	Если Результат.Свойство("ПоложениеСкладаВДокументахПроизводства") 
		И Объект.ПоложениеСклада <> Результат.ПоложениеСкладаВДокументахПроизводства Тогда
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка Тогда
			ИмяТЧ = "Продукция";
		Иначе
			ИмяТЧ = "Запасы";
		КонецЕсли;
		Если Не РежимОстаткиИРезервы Тогда
			Если Результат.ПоложениеСкладаВДокументахПроизводства <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				Объект.СтруктурнаяЕдиницаРезерв = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Объект[ИмяТЧ], "СтруктурнаяЕдиница");
				Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаРезерв) Тогда
					ДанныеСтруктурнаяЕдиница = ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении(Объект.СтруктурнаяЕдиница);
					Объект.СтруктурнаяЕдиницаРезерв = ДанныеСтруктурнаяЕдиница.ИсточникПеремещения;
				КонецЕсли; 
				Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаРезерв) Тогда
					Объект.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиница;
				КонецЕсли; 
			КонецЕсли; 
			Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТЧ] Цикл
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв;
			КонецЦикла;
			Если Объект.ВидОперации <> Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка Тогда
				Для каждого СтрокаТабличнойЧасти Из Объект.РаспределениеЗапасов Цикл
					СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв;
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
		Объект.ПоложениеСклада = Результат.ПоложениеСкладаВДокументахПроизводства;
	КонецЕсли;
	
	Если Результат.Свойство("ПоложениеИсполнителяВСдельномНаряде") 
		И Объект.ПоложениеИсполнителя <> Результат.ПоложениеИсполнителяВСдельномНаряде Тогда
		Если Результат.ПоложениеИсполнителяВСдельномНаряде<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			Объект.Исполнитель = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Объект.Операции, "Исполнитель");
		КонецЕсли; 
		Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
			СтрокаТабличнойЧасти.Исполнитель = Объект.Исполнитель;
		КонецЦикла;
		Если Результат.ПоложениеИсполнителяВСдельномНаряде = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			Если ТипЗнч(Объект.Исполнитель) = Тип("СправочникСсылка.Бригады") Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("КлючСвязи", 0);
				СтрокиСостава = Объект.СоставБригады.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрокаОперации Из Объект.Операции Цикл
					Если СтрокаОперации.КлючСвязи=0 Тогда
						ИмяТабличнойЧасти = "Операции";
						СтрокаОперации.КлючСвязи = ТабличныеЧастиУНФКлиентСервер.СоздатьНовыйКлючСвязи(ЭтотОбъект);
					КонецЕсли; 
					Для каждого СтрокаСостава Из СтрокиСостава Цикл
						НоваяСтрока = Объект.СоставБригады.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСостава);
						НоваяСтрока.КлючСвязи = СтрокаОперации.КлючСвязи;
					КонецЦикла; 
				КонецЦикла; 
				Для каждого СтрокаСостава Из СтрокиСостава Цикл
					Объект.СоставБригады.Удалить(СтрокаСостава);
				КонецЦикла; 
			КонецЕсли; 
			Объект.Исполнитель = Неопределено;
		Иначе
			Объект.СоставБригады.Очистить();
		КонецЕсли; 
		Объект.ПоложениеИсполнителя = Результат.ПоложениеИсполнителяВСдельномНаряде;
	КонецЕсли; 
	
	Если Результат.Свойство("ПоложениеСтруктурнойЕдиницыВСдельномНаряде") 
		И Объект.ПоложениеСтруктурнойЕдиницыОпераций <> Результат.ПоложениеСтруктурнойЕдиницыВСдельномНаряде Тогда
		Если Результат.ПоложениеСтруктурнойЕдиницыВСдельномНаряде <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			Объект.СтруктурнаяЕдиницаОпераций = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Объект.Операции, "СтруктурнаяЕдиница");
			Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаОпераций) Тогда
				Объект.СтруктурнаяЕдиницаОпераций = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					Пользователи.ТекущийПользователь(), 
					"ОсновноеПодразделение"); 
			КонецЕсли; 
		КонецЕсли;
		Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаОпераций;
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из Объект.СоставБригады Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаОпераций;
		КонецЦикла; 
		Объект.ПоложениеСтруктурнойЕдиницыОпераций = Результат.ПоложениеСтруктурнойЕдиницыВСдельномНаряде;
	КонецЕсли; 
	
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	
	ЗаполнитьСлужебныеДанныеПослеЧтенияОбъекта(Объект);
	Если Объект.РучноеРаспределение Тогда
		ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
		ВывестиОтметкиКонтроля(ЭтотОбъект);
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Распределить(Команда)

	Если Объект.РаспределениеЗапасов.Количество() <> 0 Тогда

		ПоказатьВопрос(Новый ОписаниеОповещения("РаспределитьЗавершение", ЭтотОбъект), НСтр(
			"ru = 'Табличная часть ""Распределение"" будет перезаполнена. Продолжить операцию?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;

	КонецЕсли;

	РаспределитьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура РаспределитьЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	РаспределитьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура РаспределитьФрагмент()
	
	РаспределитьСервер();
	ОбновитьРаспределениеЗапасовНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификации(Команда)

	Если КэшЗначений.ИспользоватьПараметрическиеСпецификации И Объект.Ссылка.Пустая() Тогда

		МассивСпецификаций = Новый Массив;
		Для Каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
				МассивСпецификаций.Добавить(СтрокаТабличнойЧасти.Спецификация);
			КонецЕсли;
		КонецЦикла;
		ПараметрическиеСпецификации = ОпределитьПараметрическиеСпецификации(МассивСпецификаций);
		Если ПараметрическиеСпецификации.Количество() > 0 Тогда
			Описание = Новый ОписаниеОповещения("ЗаполнитьПоСпецификацииЗаписатьДокумент", ЭтотОбъект);
			ПоказатьВопрос(Описание, НСтр(
				"ru = 'В таблице продукции используются параметрические спецификации, заполнение материалов возможно только после записи документа. Записать?'"),
				РежимДиалогаВопрос.ДаНет, 0);
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Если Объект.Запасы.Количество() <> 0 Тогда

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоСпецификацииЗавершение", ЭтотОбъект), НСтр(
			"ru = 'Табличная часть ""Материалы"" будет перезаполнена. Продолжить операцию?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;

	КонецЕсли;

	ЗаполнитьПоСпецификацииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьПоСпецификацииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииФрагмент()

	ЗаполнитьПоСпецификацииНаСервере();

	ОбновитьОтметкуСтруктурнойЕдиницыРезерва();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРаспределению(Команда)

	Если Объект.Запасы.Количество() <> 0 Тогда

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоРаспределениюЗавершение", ЭтотОбъект), НСтр(
			"ru = 'Табличная часть ""Материалы"" будет перезаполнена. Продолжить операцию?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;

	КонецЕсли;

	ЗаполнитьПоРаспределениюФрагмент();

	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРаспределениюЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьПоРаспределениюФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРаспределениюФрагмент()
    
    ЗаполнитьПоРаспределениюСервер();
	
	ОбновитьОтметкуСтруктурнойЕдиницыРезерва(); 
		
КонецПроцедуры // ЗаполнитьПоРаспределению()

&НаКлиенте
Процедура ДобавитьИзЗаказов(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьИзЗаказовЗавершение", ЭтотОбъект);
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("РежимВыбора", Истина);
	СтруктураОткрытия.Вставить("МножественныйВыбор", Истина);
	СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаВыбора", СтруктураОткрытия, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзЗаказовЗавершение(Заказы, ДополнительныеДанные) Экспорт
	
	Если Заказы=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = "Продукция";
	
	КоличествоСтрок = Объект.Продукция.Количество();
	
	ДобавитьПродукциюИзЗаказов(Заказы);
	
	ЕстьСпецификации = Ложь;
	Для ии = КоличествоСтрок + 1 По Объект.Продукция.Количество() Цикл
		СтрокаТабличнойЧасти = Объект.Продукция[ии - 1];
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
			ЕстьСпецификации = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;  
	
	Если ЕстьСпецификации Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
	КонецЕсли; 
	ОбновитьСпискиВыбораПродукции();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОперации(Команда)

	Если КэшЗначений.ИспользоватьПараметрическиеСпецификации И Объект.Ссылка.Пустая() Тогда

		МассивСпецификаций = Новый Массив;
		Для Каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
				МассивСпецификаций.Добавить(СтрокаТабличнойЧасти.Спецификация);
			КонецЕсли;
		КонецЦикла;
		ПараметрическиеСпецификации = ОпределитьПараметрическиеСпецификации(МассивСпецификаций);
		Если ПараметрическиеСпецификации.Количество() > 0 Тогда
			Описание = Новый ОписаниеОповещения("ЗаполнитьОперацииЗаписатьДокумент", ЭтотОбъект);
			ПоказатьВопрос(Описание, НСтр(
				"ru = 'В таблице продукции используются параметрические спецификации, заполнение операций возможно только после записи документа. Записать?'"),
				РежимДиалогаВопрос.ДаНет, 0);
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Если Объект.Операции.Количество() <> 0 Тогда

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьОперацииЗавершение", ЭтотОбъект), НСтр(
			"ru = 'Табличная часть ""Операции"" будет перезаполнена. Продолжить операцию?'"),
			РежимДиалогаВопрос.ДаНет, 0);
		Возврат;

	КонецЕсли;

	ЗаполнитьОперацииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОперацииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьОперацииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОперацииФрагмент()
    
    ЗаполнитьОперацииНаСервере();
	
КонецПроцедуры // ЗаполнитьПоСпецификации()

&НаКлиенте
// Процедура - обработчик команды ЗаполнитьСоставБригады.
//
Процедура ЗаполнитьСоставБригады(Команда)
	
	ЗаполнитьСоставБригадыНаСервере(Объект.Исполнитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказНаПроизводство"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииЗаписатьДокумент(Результат, ДополнительныеПараметры) Экспорт
	
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
	КонецЕсли;
	
	Записать();
	Если Объект.Ссылка.Пустая() Тогда
		Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
	КонецЕсли;
	
    ЗаполнитьПоСпецификацииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОперацииЗаписатьДокумент(Результат, ДополнительныеПараметры) Экспорт
	
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
	КонецЕсли;
	
	Записать();
	Если Объект.Ссылка.Пустая() Тогда
		Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
	КонецЕсли;
	
    ЗаполнитьОперацииФрагмент();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция СоответствиеДанныхРесурсов()
	
	СвернутаяТаблицаРесурсов = Объект.РесурсыПредприятия.Выгрузить(,"РесурсПредприятия");
	СвернутаяТаблицаРесурсов.Свернуть("РесурсПредприятия");
	
	СоответствиеВозврата = Новый Соответствие();
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ТаблицаДанных.Колонки.Добавить("РесурсПредприятия");
	ТаблицаДанных.Колонки.Добавить("КонтролироватьШаг");
	ТаблицаДанных.Колонки.Добавить("КратностьПланирования");
	
	Для каждого СтрокаТаблицы Из СвернутаяТаблицаРесурсов Цикл
		
		РесурсПредприятия = СтрокаТаблицы.РесурсПредприятия;
		
		СтруктураДанных = Новый Структура("КонтролироватьШаг,КратностьПланирования"
											,РесурсПредприятия.КонтролироватьШагИнтервалаВДокументах, РесурсПредприятия.КратностьПланирования);
		
		СоответствиеВозврата.Вставить(РесурсПредприятия, СтруктураДанных);
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьПовторов(ОткрытиеФормы = Ложь, БылПодбор = Ложь)
	
	Если ОткрытиеФормы ИЛИ БылПодбор Тогда
		
		Для Каждого СтрокаРесурсыПредприятия Из Объект.РесурсыПредприятия Цикл
			
			СтрокаРесурсыПредприятия.РасписаниеПредставление = ?(СтрокаРесурсыПредприятия.РасписаниеПредставление = "", "Не повторять", СтрокаРесурсыПредприятия.РасписаниеПредставление);
			
			Если ЗначениеЗаполнено(СтрокаРесурсыПредприятия.Старт) И ЗначениеЗаполнено(СтрокаРесурсыПредприятия.Финиш) Тогда
				
				СтрокаРесурсыПредприятия.ПериодРазличный = ?(Не НачалоДня(СтрокаРесурсыПредприятия.Старт) = НачалоДня(СтрокаРесурсыПредприятия.Финиш), Истина, Ложь);
				
				Если НачалоДня(СтрокаРесурсыПредприятия.Старт) = НачалоДня(СтрокаРесурсыПредприятия.Финиш) Тогда
					СтрокаРесурсыПредприятия.ПовторыДоступны = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ТекущиеДанные.ПовторыДоступны = Ложь;
	ТекущиеДанные.ПериодРазличный = Ложь;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Старт) И ЗначениеЗаполнено(ТекущиеДанные.Финиш) Тогда
		
		ТекущиеДанные.ПериодРазличный = ?(Не НачалоДня(ТекущиеДанные.Старт) = НачалоДня(ТекущиеДанные.Финиш), Истина, Ложь);
		
		Если НачалоДня(ТекущиеДанные.Старт) = НачалоДня(ТекущиеДанные.Финиш) Тогда
			ТекущиеДанные.ПовторыДоступны = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода(ЭтоДатаНачала = Ложь)
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ОстатокСекундДоКонцаДня = КонецДня(ТекущиеДанные.Финиш) - ТекущиеДанные.Финиш;
	
	Если ОстатокСекундДоКонцаДня = 59 Тогда ТекущиеДанные.Финиш = КонецДня(ТекущиеДанные.Финиш) КонецЕсли;
	Если ТекущиеДанные.Финиш = НачалоДня(ТекущиеДанные.Финиш) Тогда ТекущиеДанные.Финиш = ТекущиеДанные.Финиш-1 КонецЕсли; 
	
	ТекущиеДанные.Старт = ?(Минута(ТекущиеДанные.Старт)%5 = 0, ТекущиеДанные.Старт, ТекущиеДанные.Старт - (Минута(ТекущиеДанные.Старт)%5*60));
	
	ОстатокОтДеления = Минута(ТекущиеДанные.Финиш)%5;
	
	Если Не (ОстатокОтДеления = 0 ИЛИ ТекущиеДанные.Финиш = КонецДня(ТекущиеДанные.Финиш)) Тогда
		
		Если ОстатокОтДеления < 3 Тогда
			ТекущиеДанные.Финиш = ТекущиеДанные.Финиш - (ОстатокОтДеления*60);
		ИначеЕсли (КонецДня(ТекущиеДанные.Финиш) - ТекущиеДанные.Финиш)<300 Тогда
			ТекущиеДанные.Финиш = КонецДня(ТекущиеДанные.Финиш);
		Иначе
			ТекущиеДанные.Финиш = ТекущиеДанные.Финиш + (300 - (ОстатокОтДеления*60));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанные.Старт > ТекущиеДанные.Финиш Тогда 
		Если ЭтоДатаНачала Тогда 
			ТекущиеДанные.Финиш = ТекущиеДанные.Старт+ТекущиеДанные.КратностьПланирования*60;
		Иначе
			ТекущиеДанные.Финиш = ТекущиеДанные.Старт;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные.Старт = ?(Секунда(ТекущиеДанные.Старт) = 0, ТекущиеДанные.Старт, ТекущиеДанные.Старт - Секунда(ТекущиеДанные.Старт));
	
	Если Не (Секунда(ТекущиеДанные.Финиш) = 0 ИЛИ ТекущиеДанные.Финиш = КонецДня(ТекущиеДанные.Финиш)) Тогда  
		ТекущиеДанные.Финиш = ТекущиеДанные.Финиш - Секунда(ТекущиеДанные.Финиш)
	КонецЕсли;
	
	ПланированиеРесурсовУНФКлиент.ПроконтролироватьШагПланирования(ТекущиеДанные,ЭтоДатаНачала,Истина);
	
	УстановитьДоступностьПовторов();
	
	Если ТекущиеДанные.ПовторыДоступны Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаПовторения) Тогда
			ТекущиеДанные.ДатаПовторения = День(ТекущиеДанные.Старт);
		КонецЕсли;
		
		Если ТекущиеДанные.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежемесячно") Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.ДеньНеделиМесяца) Тогда
				
				Если КонецДня(ТекущиеДанные.Старт) = КонецМесяца(ТекущиеДанные.Старт) Тогда
					
					ТекущиеДанные.ДеньНеделиМесяца = 0;
					ТекущиеДанные.НомерНеделиМесяца = 0;
					ТекущиеДанные.ПоследнийДеньМесяца = Истина
					
				Иначе
					
					ТекущиеДанные.ДеньНеделиМесяца = ДеньНедели(ТекущиеДанные.Старт);
					
					ТекНомерНедели = НеделяГода(ТекущиеДанные.Старт)-НеделяГода(НачалоМесяца(ТекущиеДанные.Старт))+1;
					
					Если ЗначениеЗаполнено(ТекущиеДанные.НомерНеделиМесяца) И Не ТекущиеДанные.НомерНеделиМесяца = ТекНомерНедели  Тогда
						ТекущиеДанные.НомерНеделиМесяца = ТекНомерНедели;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущиеДанные.ПоследнийДеньМесяца И Не КонецДня(ТекущиеДанные.Старт) = КонецМесяца(ТекущиеДанные.Старт) Тогда
				
				ТекущиеДанные.ПоследнийДеньМесяца = Ложь;
				ТекущиеДанные.ДеньНеделиМесяца = ДеньНедели(ТекущиеДанные.Старт);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущиеДанные.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежегодно")
										И ЗначениеЗаполнено(ТекущиеДанные.НомерМесяца) Тогда
			
			ТекущиеДанные.НомерМесяца = Месяц(ТекущиеДанные.Старт);
			
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанные.НомерНеделиМесяца = 0;
		ТекущиеДанные.НомерМесяца = 0;
		ТекущиеДанные.ДатаПовторения = 0;
		ТекущиеДанные.ДеньНеделиМесяца = 0;
		ТекущиеДанные.ПоследнийДеньМесяца = Ложь;
		
		ТекущиеДанные.ВидЗавершения = Неопределено;
		ТекущиеДанные.ЗавершатьПосле = Неопределено;
		
		ТекущиеДанные.ИнтервалПовторения = 0;
		ТекущиеДанные.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять");
		ТекущиеДанные.РасшифровкаСчетчика = "";
		
		ТекущиеДанные.Пн = Ложь;
		ТекущиеДанные.Вт = Ложь;
		ТекущиеДанные.Ср = Ложь;
		ТекущиеДанные.Чт = Ложь;
		ТекущиеДанные.Пт = Ложь;
		ТекущиеДанные.Сб = Ложь;
		ТекущиеДанные.Вс = Ложь;
		
	КонецЕсли;
	
	ТекущиеДанные.Длительность = Дата(1,1,1)+(ТекущиеДанные.Финиш - ТекущиеДанные.Старт);
	
	ЗаполнитьДанныеТаблицыРесурсовНаФорме();
	
	Если ЭтоДатаНачала Тогда
		Если ТипЗнч(ТекущиеДанные.ЗавершатьПосле) = Тип("Дата")
			И ЗначениеЗаполнено(ТекущиеДанные.ЗавершатьПосле)
			И ЗначениеЗаполнено(ТекущиеДанные.Старт)
			И ТекущиеДанные.ЗавершатьПосле<НачалоДня(ТекущиеДанные.Старт)
			Тогда
			ТекущиеДанные.ЗавершатьПосле=НачалоДня(ТекущиеДанные.Старт)
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеТаблицыРесурсовНаФорме()
	
	ДанныеРесурсов = СоответствиеДанныхРесурсов();
	
	Элементы.РесурсыПредприятияПодборРесурсы.Доступность = Не ЭтаФорма.ТолькоПросмотр;
	Элементы.РесурсыПредприятияГруппаПроверить.Доступность = Не ЭтаФорма.ТолькоПросмотр;
	
	Для Каждого СтрокаРесурсов Из Объект.РесурсыПредприятия Цикл
		
		ДанныеРесурса = ДанныеРесурсов.Получить(СтрокаРесурсов.РесурсПредприятия);
		
		Если Не ДанныеРесурса = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРесурсов, ДанныеРесурса)
		КонецЕсли;
		
		ВыбранныеДниНедели = ПланированиеРесурсовУНФКлиент.ПредставлениеДнейНедели(СтрокаРесурсов);
		
		Если СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Еженедельно") Тогда
			Междометие = НСтр("ru = 'каждую'");
		Иначе
			Междометие = НСтр("ru = 'каждый'");
		КонецЕсли;
		
		Окончание = "";
		
		Если СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Еженедельно") Тогда
			Окончание = НСтр("ru = 'неделю'");
		ИначеЕсли СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежедневно") Тогда
			Окончание = НСтр("ru = 'день'")
		ИначеЕсли СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежемесячно") Тогда
			Окончание = НСтр("ru = 'месяц'");
		ИначеЕсли СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежегодно") Тогда
			Окончание = НСтр("ru = 'год'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРесурсов.ВидПовтора) И Не СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение(
			"Перечисление.ВидыПовторовРасписания.НеПовторять") Тогда
			ДополнениеПоМесяцуГоду = ДополнениеПоМесяцуГоду(СтрокаРесурсов);
			РасписаниеПредставление = СтрШаблон("%1, %2 %3 %4%5%6", СтрокаРесурсов.ВидПовтора, Междометие,
				СтрокаРесурсов.ИнтервалПовторения, Окончание, ВыбранныеДниНедели, ДополнениеПоМесяцуГоду);
		Иначе
			РасписаниеПредставление = НСтр("ru = 'Не повторять'");
		КонецЕсли;
		
		СтрокаРесурсов.РасписаниеПредставление = РасписаниеПредставление;
		
		Если СтрокаРесурсов.ВидЗавершения = ПредопределенноеЗначение("Перечисление.ВидыЗавершенияПовторовРасписания.ПоСчетчику")
			И ЗначениеЗаполнено(СтрокаРесурсов.ЗавершатьПосле) Тогда 
			
			РасшифровкаСчетчика = ПланированиеРесурсовУНФКлиент.ПредметИсчисления(
			СтрокаРесурсов.ЗавершатьПосле, НСтр("ru = 'раза'"), НСтр("ru = 'раз'"), НСтр("ru = 'раз'"), "м");
			
			СтрокаРесурсов.РасшифровкаСчетчика = РасшифровкаСчетчика;
		Иначе
			СтрокаРесурсов.РасшифровкаСчетчика = "";
		КонецЕсли;
		
	КонецЦикла;
	
	ПланированиеРесурсовУНФКлиент.ЗаполнитьДлительностьВТаблицеВыбранныхРесурсов(Объект.РесурсыПредприятия);
	
КонецПроцедуры

&НаКлиенте
Функция ДополнениеПоМесяцуГоду(Знач СтрокаРесурсов)
	
	Результат = "";
	
	Старт = СтрокаРесурсов.Старт;
	ДеньНеделиМесяца = СтрокаРесурсов.ДеньНеделиМесяца;
	ДатаПовторения = СтрокаРесурсов.ДатаПовторения;
	
	Если СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежемесячно")
		Или СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежегодно") Тогда
		
		Если ЗначениеЗаполнено(ДатаПовторения) Тогда
			
			Если ЗначениеЗаполнено(СтрокаРесурсов.НомерМесяца) Тогда
				Результат = СтрШаблон(НСтр("ru = ', каждое %1-е %2.'"), ДатаПовторения,
					ПланированиеРесурсовУНФКлиент.ПолучитьМесяцПоНомеру(СтрокаРесурсов.НомерМесяца));
			Иначе
				Результат = СтрШаблон(НСтр("ru = ', каждое %1-е число.'"), ДатаПовторения);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ДеньНеделиМесяца) Тогда
			
			Если ПланированиеРесурсовУНФКлиент.ЭтоПоследняяНеделяМесяца(Старт) Тогда
				Результат = СтрШаблон(НСтр("ru = '"", в послед. %1  месяца.""'"),
					ПланированиеРесурсовУНФКлиент.СоответствиеНомераДнюНедели(ДеньНеделиМесяца));
			Иначе
				НомерНеделиМесяца = НеделяГода(Старт) - НеделяГода(НачалоМесяца(Старт)) + 1;
				Результат = СтрШаблон(НСтр("ru = '%1%2 каждой %3-й недели'"), " ",
					ПланированиеРесурсовУНФКлиент.СоответствиеНомераДнюНедели(ДеньНеделиМесяца), НомерНеделиМесяца);
			КонецЕсли;
			
		ИначеЕсли СтрокаРесурсов.ПоследнийДеньМесяца = Истина Тогда
			
			Результат = НСтр("ru = ', последний день месяца.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ЗадатьОкончаниеПериода()
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	СекундыПоВремени = ТекущиеДанные.Время - Дата(1,1,1);
	СекундыПоДням = ?(ЗначениеЗаполнено(ТекущиеДанные.Дни), ТекущиеДанные.Дни*1440*60, 0);
	
	ТекущиеДанные.Финиш = ТекущиеДанные.Старт + СекундыПоДням + СекундыПоВремени;
	ТекущиеДанные.Финиш = ?(Не СекундыПоДням = 0 И ТекущиеДанные.Финиш = НачалоДня(ТекущиеДанные.Финиш)
										, ТекущиеДанные.Финиш - 1, ТекущиеДанные.Финиш);
	
	ПланированиеРесурсовУНФКлиент.ПроконтролироватьШагПланирования(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОкончанияРедактированияРасписания(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения = Неопределено Тогда Возврат КонецЕсли;
	
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ВидПовтора = РезультатВыполнения.ВидПовтора;
	
	ТекущиеДанные.ВидПовтора = ВидПовтора;
	
	Если ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять") Тогда
		 ПланированиеРесурсовУНФКлиент.ОчиститьДанныеСтроки(ТекущиеДанные, Ложь);
		 ЗаполнитьДанныеТаблицыРесурсовНаФорме();
		 Возврат;
	 КонецЕсли;
	
	ТекущиеДанные.ИнтервалПовторения = РезультатВыполнения.ИнтервалПовторения;
	ТекущиеДанные.Пн = РезультатВыполнения.Пн;
	ТекущиеДанные.Вт = РезультатВыполнения.Вт;
	ТекущиеДанные.Ср = РезультатВыполнения.Ср;
	ТекущиеДанные.Чт = РезультатВыполнения.Чт;
	ТекущиеДанные.Пт = РезультатВыполнения.Пт;
	ТекущиеДанные.Сб = РезультатВыполнения.Сб;
	ТекущиеДанные.Вс = РезультатВыполнения.Вс;
	ТекущиеДанные.ПоследнийДеньМесяца = РезультатВыполнения.ПоследнийДеньМесяца;
	ТекущиеДанные.ДатаПовторения = РезультатВыполнения.ДатаПовторения;
	ТекущиеДанные.ДеньНеделиМесяца = РезультатВыполнения.ДеньНеделиМесяца;
	ТекущиеДанные.НомерНеделиМесяца = РезультатВыполнения.НомерНеделиМесяца;
	ТекущиеДанные.НомерМесяца = РезультатВыполнения.НомерМесяца;
	
	ЗаполнитьДанныеТаблицыРесурсовНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияВидЗавершенияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если ТекущиеДанные.ВидЗавершения = ПредопределенноеЗначение("Перечисление.ВидыЗавершенияПовторовРасписания.ПоДате") Тогда
		ТекущиеДанные.ЗавершатьПосле = НачалоДня(ТекущиеДанные.Финиш+86400);
		ТекущиеДанные.РасшифровкаСчетчика = "";
	ИначеЕсли ТекущиеДанные.ВидЗавершения = ПредопределенноеЗначение("Перечисление.ВидыЗавершенияПовторовРасписания.ПоСчетчику") Тогда
		ТекущиеДанные.ЗавершатьПосле = 1;
		ТекущиеДанные.РасшифровкаСчетчика = "раза";
	Иначе
		ТекущиеДанные.РасшифровкаСчетчика = "";
		ТекущиеДанные.ЗавершатьПосле = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыПредприятияЗавершатьПослеПриИзменении(Элемент)

	ТекущиеДанные = Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ВидЗавершения = ПредопределенноеЗначение(
		"Перечисление.ВидыЗавершенияПовторовРасписания.ПоСчетчику") И ЗначениеЗаполнено(ТекущиеДанные.ЗавершатьПосле) Тогда

		РасшифровкаСчетчика = ПланированиеРесурсовУНФКлиент.ПредметИсчисления(
		ТекущиеДанные.ЗавершатьПосле, НСтр("ru = 'раза'"), НСтр("ru = 'раз'"), НСтр("ru = 'раз'"), "м");

		ТекущиеДанные.РасшифровкаСчетчика = РасшифровкаСчетчика;
	Иначе
		ТекущиеДанные.РасшифровкаСчетчика = "";
	КонецЕсли;

	Если ТипЗнч(ТекущиеДанные.ЗавершатьПосле) = Тип("Дата") И ЗначениеЗаполнено(ТекущиеДанные.ЗавершатьПосле)
		И ЗначениеЗаполнено(ТекущиеДанные.Старт) И ТекущиеДанные.ЗавершатьПосле < НачалоДня(ТекущиеДанные.Старт) Тогда
		ТекущиеДанные.ЗавершатьПосле = НачалоДня(ТекущиеДанные.Старт);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРесурсыИзПланировщика(ВыбранныеРесурсы)
	
	Для Каждого СтрокаРесурсов Из ВыбранныеРесурсы Цикл
		
		
		НоваяСтрока = Объект.РесурсыПредприятия.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРесурсов);
		
		НоваяСтрока.РесурсПредприятия = СтрокаРесурсов.Ресурс;
		НоваяСтрока.Старт = СтрокаРесурсов.НачалоПериода;
		НоваяСтрока.Финиш = СтрокаРесурсов.ОкончаниеПериода;
		НоваяСтрока.Мощность = СтрокаРесурсов.Загрузка;
		НоваяСтрока.Длительность = Дата(1,1,1)+(НоваяСтрока.Финиш - НоваяСтрока.Старт); 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСпецификацииНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	СтекСпецификацийУзлов = Новый Массив;
	// ПараметрическиеСпецификации
	Отказ = Ложь;
	ПроизводствоФормулыСервер.РассчитатьПараметрическиеСпецификации(Документ, "Продукция", Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	// Конец ПараметрическиеСпецификации
	Документ.ЗаполнитьЗапасыПоСпецификации(СтекСпецификацийУзлов);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	ОбновитьКэшиДанныхСервер();
	ЗаполнитьСлужебныеДанныеПослеЧтенияОбъекта(Объект);
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	
	ЗапасыНеЗаполнены = Ложь;
	ВывестиОтметкиКонтроля(ЭтотОбъект);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;

	ДействияПослеЧтенияОбъекта();
	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	
КонецПроцедуры // ЗаполнитьПоСпецификацииНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", ДокументыУНФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", Константы.УчетПоКомпании.Компания(Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, ИмяТЧ = "Запасы")
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	// Наборы
	СтруктураДанные.Вставить("ЭтоНабор", СтруктураДанные.Номенклатура.ЭтоНабор);
	
	
	СтруктураДанные.Вставить("ТипНоменклатуры", СтруктураДанные.Номенклатура.ТипНоменклатуры);
	
	Если Не СтруктураДанные.Свойство("Склад") Тогда
		СтруктураДанные.Вставить("Склад", СтруктураДанные.Номенклатура.Склад);
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураДанные.Склад) Тогда
		СтруктураДанные.Склад = СтруктураДанные.Номенклатура.Склад;
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) 
		И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики Тогда
		
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии")
			Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации")
				Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	ВключаяШаблоны = (СтруктураДанные.Свойство("ВключаяШаблоны") И СтруктураДанные.ВключаяШаблоны);
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(
			СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика, ВключаяШаблоны));
	Иначе
		СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(
			СтруктураДанные.Номенклатура, , ВключаяШаблоны));
	КонецЕсли;
	СтруктураДанные = ПолучитьДанныеСпецификацияПриИзменении(СтруктураДанные);
	
	Если ИмяТЧ="Операции" Тогда
		
		Если ЗначениеЗаполнено(СтруктураДанные.Спецификация) И ТипЗнч(СтруктураДанные.Спецификация)=Тип("СправочникСсылка.Спецификации") Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", СтруктураДанные.Спецификация);
			Если СтруктураДанные.Свойство("Операция") Тогда
				Запрос.УстановитьПараметр("Операция", СтруктураДанные.Операция);
			Иначе
				Запрос.УстановитьПараметр("Операция", Неопределено);
			КонецЕсли; 
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СпецификацииОперации.Ссылка КАК Спецификация,
			|	СпецификацииОперации.НомерСтроки КАК НомерСтроки,
			|	СпецификацииОперации.Операция КАК Операция,
			|	СпецификацииОперации.НормаВремени КАК НормаВремени,
			|	СпецификацииОперации.КоличествоПродукции КАК КоличествоПродукции
			|ПОМЕСТИТЬ Операции
			|ИЗ
			|	Справочник.Спецификации.Операции КАК СпецификацииОперации
			|ГДЕ
			|	СпецификацииОперации.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СпецификацииОперации.Операция КАК Операция,
			|	СпецификацииОперации.Операция.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВЫБОР
			|		КОГДА СпецификацииОперации.КоличествоПродукции = 0
			|			ТОГДА 0
			|		ИНАЧЕ СпецификацииОперации.НормаВремени / СпецификацииОперации.КоличествоПродукции
			|	КОНЕЦ КАК НормаВремени
			|ИЗ
			|	Операции КАК СпецификацииОперации
			|ГДЕ
			|	СпецификацииОперации.Операция В
			|			(ВЫБРАТЬ
			|				СпецификацииОперации.Операция
			|			ИЗ
			|				Операции КАК СпецификацииОперации
			|			ГДЕ
			|				(СпецификацииОперации.Операция = &Операция
			|					ИЛИ &Операция = НЕОПРЕДЕЛЕНО)
			|			СГРУППИРОВАТЬ ПО
			|				СпецификацииОперации.Операция
			|			ИМЕЮЩИЕ
			|				КОЛИЧЕСТВО(СпецификацииОперации.НомерСтроки) = 1)";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				// Норма времени берется из спецификации
				СтруктураДанные.Вставить("Операция", Выборка.Операция);
				СтруктураДанные.Вставить("НормаВремени", Выборка.НормаВремени);
				СтруктураДанные.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("Операция") 
			И ЗначениеЗаполнено(СтруктураДанные.Операция)
			И ТипЗнч(СтруктураДанные.Операция)=Тип("СправочникСсылка.Номенклатура") Тогда
			Если НЕ СтруктураДанные.Свойство("НормаВремени") Тогда
				// Норма времени берется из карточки операции
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДанные.Операция, "НормаВремени, ЕдиницаИзмерения");
				СтруктураДанные.Вставить("НормаВремени", ЗначенияРеквизитов.НормаВремени);
				СтруктураДанные.Вставить("ЕдиницаИзмерения", ЗначенияРеквизитов.ЕдиницаИзмерения);
			КонецЕсли; 
		Иначе
			// Не удалось определить операцию
			СтруктураДанные.Вставить("Операция", Неопределено);
			СтруктураДанные.Вставить("НормаВремени", 0);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", Неопределено);
		КонецЕсли;
	
	КонецЕсли; 
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	ВключаяШаблоны = (СтруктураДанные.Свойство("ВключаяШаблоны") И СтруктураДанные.ВключаяШаблоны);
	СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика, ВключаяШаблоны));
	СтруктураДанные = ПолучитьДанныеСпецификацияПриИзменении(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении(Склад)
	
	Результат = Новый Структура;
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, 
		"ТипСтруктурнойЕдиницы, ИсточникПеремещения, ИсточникПеремещения.ТипСтруктурнойЕдиницы, ПолучательПеремещения, 
		|ПолучательПеремещения.ТипСтруктурнойЕдиницы");
	
	Если ЗначенияРеквизитов.ИсточникПеремещенияТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад
		ИЛИ ЗначенияРеквизитов.ИсточникПеремещенияТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		Результат.Вставить("ИсточникПеремещения", ЗначенияРеквизитов.ИсточникПеремещения);
	Иначе
		Результат.Вставить("ИсточникПеремещения", Неопределено);
	КонецЕсли;
	Если ЗначенияРеквизитов.ПолучательПеремещенияТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад
		ИЛИ ЗначенияРеквизитов.ПолучательПеремещенияТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		Результат.Вставить("ПолучательПеремещения", ЗначенияРеквизитов.ПолучательПеремещения);
	Иначе
		Результат.Вставить("ПолучательПеремещения", Неопределено);
	КонецЕсли;
	Результат.Вставить("ТипСтруктурнойЕдиницы", ЗначенияРеквизитов.ТипСтруктурнойЕдиницы);
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении()	

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтруктурнаяЕдиницаРезервПриИзменении(Склад)

	Если Склад.ПолучательПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад
		Или Склад.ПолучательПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда

		Возврат Склад.ПолучательПеремещения;

	Иначе

		Возврат Неопределено;

	КонецЕсли;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоДокументу(Реквизит = "ЗаказНаПроизводствоОснование")
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Объект[Реквизит]);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	ОбновитьКэшиДанныхСервер();
	ЗаполнитьСлужебныеДанныеПослеЧтенияОбъекта(Объект);
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	
	Если Объект.РучноеРаспределение Тогда
		ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	КонецЕсли; 
	ОбновитьАвтоОтметкиПриИзмененииОпераций(ЭтотОбъект);
	ТипСтруктурнойЕдиницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтруктурнаяЕдиница, "ТипСтруктурнойЕдиницы");
	
	ДействияПослеЧтенияОбъекта();
	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаСервере
Процедура УстановитьРежимИСписокВыбора()
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
		И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
		
		Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиница.КнопкаСоздания = Ложь;
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		Элементы.ПродукцияСтруктурнаяЕдиницаРезерв.РежимВыбораИзСписка = Истина;
		Элементы.ПродукцияСтруктурнаяЕдиницаРезерв.КнопкаСоздания = Ложь;
		Элементы.ПродукцияСтруктурнаяЕдиницаРезерв.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		Элементы.ПродукцияСтруктурнаяЕдиницаРезерв.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.РежимВыбораИзСписка = Истина;
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.КнопкаСоздания = Ложь;
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		
		Элементы.ПродукцияСтруктурнаяЕдиницаТабличнаяЧасть.РежимВыбораИзСписка = Истина;
		Элементы.ПродукцияСтруктурнаяЕдиницаТабличнаяЧасть.КнопкаСоздания = Ложь;
		Элементы.ПродукцияСтруктурнаяЕдиницаТабличнаяЧасть.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		Элементы.ПродукцияСтруктурнаяЕдиницаТабличнаяЧасть.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		
		Элементы.ЗапасыСтруктурнаяЕдиницаТабличнаяЧасть.РежимВыбораИзСписка = Истина;
		Элементы.ЗапасыСтруктурнаяЕдиницаТабличнаяЧасть.КнопкаСоздания = Ложь;
		Элементы.ЗапасыСтруктурнаяЕдиницаТабличнаяЧасть.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		Элементы.ЗапасыСтруктурнаяЕдиницаТабличнаяЧасть.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		
		Элементы.СтруктурнаяЕдиницаПродукцииСборка.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиницаПродукцииСборка.КнопкаСоздания = Ложь;
		Элементы.СтруктурнаяЕдиницаПродукцииСборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		Элементы.СтруктурнаяЕдиницаПродукцииСборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		
		Элементы.СтруктурнаяЕдиницаПродукцииРазборка.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиницаПродукцииРазборка.КнопкаСоздания = Ложь;
		Элементы.СтруктурнаяЕдиницаПродукцииРазборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		Элементы.СтруктурнаяЕдиницаПродукцииРазборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		
	КонецЕсли;
	
КонецПроцедуры

// ПодключаемоеОборудование
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ЗаказНаПроизводство.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	Если ИмяТекущейСтраницы = "ТЧПродукция" Тогда
		ИмяТабличнойЧасти = "Продукция";
	ИначеЕсли ИмяТекущейСтраницы = "ТЧЗапасы" Тогда
		ИмяТабличнойЧасти = "Запасы";
	Иначе
		Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа", Новый Массив, Новый Массив);
	КонецЕсли;
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные, ИмяТабличнойЧасти",СтруктураДанные, ИмяТабличнойЧасти));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено 
			ИЛИ ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор"
			, ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор));
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			МассивСтрокТЧ = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
				ЗаполнитьДанныеШапки(Объект, НоваяСтрока, ИмяТабличнойЧасти);
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				Если НоваяСтрока.Свойство("Спецификация") Тогда
					НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
				КонецЕсли;
				Если НоваяСтрока.Свойство("ИспользоватьЭтапыПроизводства") Тогда
					НоваяСтрока.ИспользоватьЭтапыПроизводства = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ИспользоватьЭтапыПроизводства;
					Если НоваяСтрока.Свойство("ПодразделениеЗавершающегоЭтапа")
						И НоваяСтрока.ИспользоватьЭтапыПроизводства 
						И ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение") Тогда
						НоваяСтрока.ПодразделениеЗавершающегоЭтапа = Объект.СтруктурнаяЕдиница;
					Иначе
						НоваяСтрока.ПодразделениеЗавершающегоЭтапа = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
					КонецЕсли; 
				КонецЕсли;
				Если НоваяСтрока.Свойство("ЭтоШаблонСпецификации") Тогда
					НоваяСтрока.ЭтоШаблонСпецификации = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоШаблонСпецификации;
					НоваяСтрока.ЕстьДопРеквизитыСпецификации = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕстьДопРеквизитыСпецификации;
					Если НоваяСтрока.ЕстьДопРеквизитыСпецификации Тогда
						Если НоваяСтрока.КлючСвязи<>0 Тогда
							ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.РеквизитыПараметрическихСпецификаций, НоваяСтрока);
						КонецЕсли; 
						ЗаполнитьДопРеквизитыПоУмолчанию(НоваяСтрока.ПолучитьИдентификатор());
						ОбновитьОписанияДопРеквизитов(ЭтотОбъект, НоваяСтрока.КлючСвязи);
					КонецЕсли; 
				КонецЕсли; 
				ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, НоваяСтрока);
				Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Если ИмяТабличнойЧасти = "Запасы" Тогда
					НоваяСтрока.ДоляСтоимости = 1;
				КонецЕсли; 
			Иначе
				НайденнаяСтрока = МассивСтрокТЧ[0];
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекШтрихкод.Количество;
				Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяТабличнойЧасти="Продукция" Тогда
		ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	КонецЕсли; 
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт //bg
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	ИмяТабличнойЧасти = Параметры.ИмяТабличнойЧасти;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено ИЛИ ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
		ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор));
	Иначе
		МассивСтрокТЧ = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьДанныеШапки(Объект, НоваяСтрока, ИмяТабличнойЧасти);
			НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
			НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
			НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
			НоваяСтрока.Количество = ТекШтрихкод.Количество;
			НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
			Если НоваяСтрока.Свойство("Спецификация") Тогда
				НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
			КонецЕсли;
			Если НоваяСтрока.Свойство("ИспользоватьЭтапыПроизводства") Тогда
				НоваяСтрока.ИспользоватьЭтапыПроизводства = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ИспользоватьЭтапыПроизводства;
				Если НоваяСтрока.Свойство("ПодразделениеЗавершающегоЭтапа")
					И НоваяСтрока.ИспользоватьЭтапыПроизводства 
					И КэшЗначений.ИспользоватьЭтапыПроизводства 
					И ТипСтруктурнойЕдиницы=ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение") Тогда
					НоваяСтрока.ПодразделениеЗавершающегоЭтапа = Объект.СтруктурнаяЕдиница;
				КонецЕсли; 
			КонецЕсли;
			Если НоваяСтрока.Свойство("ЭтоШаблонСпецификации") Тогда
				НоваяСтрока.ЭтоШаблонСпецификации = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоШаблонСпецификации;
				НоваяСтрока.ЕстьДопРеквизитыСпецификации = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕстьДопРеквизитыСпецификации;
				Если НоваяСтрока.ЕстьДопРеквизитыСпецификации Тогда
					Если НоваяСтрока.КлючСвязи<>0 Тогда
						ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.РеквизитыПараметрическихСпецификаций, НоваяСтрока);
					КонецЕсли; 
					ЗаполнитьДопРеквизитыПоУмолчанию(НоваяСтрока.ПолучитьИдентификатор());
					ОбновитьОписанияДопРеквизитов(ЭтотОбъект, НоваяСтрока.КлючСвязи);
				КонецЕсли; 
			КонецЕсли; 
			ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, НоваяСтрока);
			Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Если ИмяТабличнойЧасти = "Запасы" Тогда
				НоваяСтрока.ДоляСтоимости = 1;
			КонецЕсли; 
		Иначе
			НайденнаяСтрока = МассивСтрокТЧ[0];
			НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекШтрихкод.Количество;
			Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти="Продукция" Тогда
		ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	ЗаполнитьПоДаннымШтрихкодовЗавершениеСервер();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершениеСервер()
	
	ЗаполнитьПризнакиИспользованияХарактеристикСервер();
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);

КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристикСервер();

	Если ИмяТабличнойЧасти="Продукция" Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
		ОбновитьСпискиВыбораПродукции();
	ИначеЕсли ИмяТабличнойЧасти="Запасы" Тогда
		ВывестиОтметкиКонтроля(ЭтотОбъект);
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		Если ТекНекорректныйШтрихкод.Свойство("ЭтоНабор") И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", НСтр("ru = 'Набор'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		КонецЕсли; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТовары = Объект.Запасы.Добавить();
		НоваяСтрокаТовары.Номенклатура = СтрокаТаблицы.Номенклатура;
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			НоваяСтрокаТовары.Характеристика = СтрокаТаблицы.Характеристика;
			
		КонецЕсли;

		НоваяСтрокаТовары.Количество = СтрокаТаблицы.Количество;
		
		Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрокаТовары.Номенклатура) Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
			
		КонецЕсли;
		
		ТоварыДобавлены = Истина;
		
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных)
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ДлительнаяОперация = ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки);
			
			СтруктураПараметров = Новый Структура;
			Если РезультатЗагрузки.НастройкиЗагрузкиДанных.Свойство("ТекстОшибки") Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗагрузки.НастройкиЗагрузкиДанных.ТекстОшибки);
			КонецЕсли;
			
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров);
			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(АдресРезультатаЗагрузки)
	
	ЭтоРазборка = (Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка"));
	
	НачатьТранзакцию();
	Попытка
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);	
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;    
		
		ИменаСвойств = Новый Массив;
		ИменаСвойств.Добавить("Номенклатура, Количество, ЕдиницаИзмерения, ЗаказПокупателя, СтруктурнаяЕдиница");
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
			ИменаСвойств.Добавить("Партия");
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			ИменаСвойств.Добавить("Характеристика");
		КонецЕсли;
		
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.Запасы.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, СтрСоединить(ИменаСвойств, ", "));
				ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");
				ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
				
				Если ЭтоРазборка Тогда
					НоваяСтрока.ДоляСтоимости = СтрокаТаблицы.ДоляСтоимости;
				Иначе
					Если ЗаказПокупателяЗаполнен(Объект) Тогда
						НоваяСтрока.Резерв = СтрокаТаблицы.Резерв;
					КонецЕсли;					
				КонецЕсли;						
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ПодробноеПредставлениеОшибки());
		
	КонецПопытки;
		
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;	
	
	ИмяМетода = "Справочники.Номенклатура.ОбработатьПодготовленныеДанные";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

// Проверяет,в зависимости от использования, заполнение характеристик номенклатуры
//
&НаСервере
Процедура ПроверитьЗаполнениеХарактеристикРаспределениеЗапасов(Отказ)
	
	ТаблицаНоменклатуры = РаспределениеЗапасов.Выгрузить(,"Номенклатура");
	ТаблицаНоменклатуры.Свернуть("Номенклатура");

	СписокНоменклатуры = СписокНоменклатурыСХарактеристикамиРаспределениеЗапасов(ТаблицаНоменклатуры);
	СписокНоменклатурыСПартиями = СписокНоменклатурыСПартиямиРаспределениеЗапасов(ТаблицаНоменклатуры);

	Для Каждого СтрокаЗапасы Из РаспределениеЗапасов Цикл
		
		Если СписокНоменклатуры.НайтиПоЗначению(СтрокаЗапасы.Номенклатура) <> Неопределено
			И Не ЗначениеЗаполнено(СтрокаЗапасы.Характеристика) Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'В таблице ""РаспределениеЗапасов"", для номенклатуры %1 в строке %2, заполнение поля ""Характеристика"" является обязательным.'"),
				СтрокаЗапасы.Номенклатура, СтрокаЗапасы.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РаспределениеЗапасов",
				СтрокаЗапасы.НомерСтроки, "Характеристика");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле, , Отказ);
		КонецЕсли;
		
		Если СписокНоменклатурыСПартиями.НайтиПоЗначению(СтрокаЗапасы.Номенклатура) <> Неопределено
			И Не ЗначениеЗаполнено(СтрокаЗапасы.Партия) Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'В таблице ""РаспределениеЗапасов"", для номенклатуры %1 в строке %2, заполнение поля ""Партия"" является обязательным.'"),
				СтрокаЗапасы.Номенклатура, СтрокаЗапасы.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РаспределениеЗапасов",
				СтрокаЗапасы.НомерСтроки, "Партия");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле, , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает список номенклатуры для которой ведется учет по характеристикам таб. части "РаспределениеЗапасов"
//
&НаСервере
Функция СписокНоменклатурыСХарактеристикамиРаспределениеЗапасов(ТаблицаНоменклатуры)
	
	СписокНоменклатуры = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|ГДЕ
	|	ТаблицаНоменклатуры.Номенклатура.ИспользоватьХарактеристики
	|	И ТаблицаНоменклатуры.Номенклатура.ПроверятьЗаполнениеХарактеристики";
	
	МассивНоменклатуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	СписокНоменклатуры.ЗагрузитьЗначения(МассивНоменклатуры);
	
	Возврат СписокНоменклатуры;
	
КонецФункции

// Получает список номенклатуры для которой ведется учет по партиям таб. части "РаспределениеЗапасов"
//
&НаСервере
Функция СписокНоменклатурыСПартиямиРаспределениеЗапасов(ТаблицаНоменклатуры)
	
	СписокНоменклатуры = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|ГДЕ
	|	ТаблицаНоменклатуры.Номенклатура.ИспользоватьПартии 
	|	И ТаблицаНоменклатуры.Номенклатура.ПроверятьЗаполнениеПартий";
	
	МассивНоменклатуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	СписокНоменклатуры.ЗагрузитьЗначения(МассивНоменклатуры);
	
	Возврат СписокНоменклатуры;

КонецФункции

&НаСервере
Процедура ЗаполнитьКолонкуРезервПоОстаткамНаСервере(СтруктураОтбораНоменклатуры = Неопределено)
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	
	НоменклатураВДокументахСервер.ЗаполнитьКолонкуРезервПоОстаткамЗаказНаПроизводство(Объект,, СтруктураОтбораНоменклатуры);
	
	КоличествоСтрокДоЗаполнения = Объект.Запасы.Количество();
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	РежимОстаткиИРезервы = ?(Не РежимОстаткиИРезервы И Не КоличествоСтрокДоЗаполнения = Объект.Запасы.Количество(), Истина, РежимОстаткиИРезервы);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	ОбновитьКэшиДанныхСервер();
	ЗаполнитьСлужебныеДанныеПослеЧтенияОбъекта(Объект);
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	
	Если Объект.РучноеРаспределение Тогда
		ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоОстаткамНаСервере()

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбранноеЗначение, Параметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		СтруктураПараметровОтбора = Новый Структура();
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбранноеЗначение.Значение, СтруктураПараметровОтбора, ЭтотОбъект, , , , ОповещениеОЗакрытии);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.ДокументОснование = ВыбранноеЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбранноеЗначение);
		Модифицированность = Истина;
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоДокументуОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);		

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу("ДокументОснование");
		ОбновитьСпискиВыбораПродукции();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущейСтраницейЗавершениеЗаказа()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершениеЗаказа;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаказПокупателяЗаполнен(Объект)
	
	Возврат ЗначениеЗаполнено(Объект.ЗаказПокупателя) 
	ИЛИ Объект.ПоложениеЗаказаПокупателя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыТЧПоШапке(Объект, Реквизит = "")

	// Заполнение склада
	ЗаполнятьСтруктурнуюЕдиницу = (ПустаяСтрока(Реквизит) ИЛИ Реквизит="СтруктурнаяЕдиница");
	Если ЗаполнятьСтруктурнуюЕдиницу И Объект.ПоложениеСклада<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		ТЧ = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка"), Объект.Продукция, Объект.Запасы);
		Для каждого СтрокаТабличнойЧасти Из ТЧ Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв;
		КонецЦикла; 
		ТЧ = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка"), Объект.Запасы, Объект.Продукция);
		Для каждого СтрокаТабличнойЧасти Из ТЧ Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
		КонецЦикла; 
	КонецЕсли;
	// Заполнение заказа покупателя
	ЗаполнятьЗаказПокупателя = ((ПустаяСтрока(Реквизит) ИЛИ Реквизит="ЗаказПокупателя"));
	Если ЗаполнятьЗаказПокупателя И Объект.ПоложениеЗаказаПокупателя<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.ЗаказПокупателя;
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.ЗаказПокупателя;
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из Объект.РаспределениеЗапасов Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.ЗаказПокупателя;
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.ЗаказПокупателя;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПоКлючу(Таблица, КлючСвязи, ИмяПоля = "КлючСвязи")
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить(ИмяПоля, КлючСвязи);
	Строки = Таблица.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строки[0];
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристикСервер()
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если Объект.РучноеРаспределение Тогда
		ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеШапки(Объект, СтрокаТЧ, ИмяТЧ = "Запасы")
	
	ЭтоСборка = (Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Сборка"));
	ЭтоРазборка = (Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка"));
	
	СтруктураПолей = Новый Структура;
	Если Объект.ПоложениеЗаказаПокупателя<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		СтруктураПолей.Вставить("ЗаказПокупателя", Объект.ЗаказПокупателя);
	КонецЕсли;
	Если Объект.ПоложениеСклада<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") 
		И ЭтоСборка Тогда
		Если ИмяТЧ="Продукция" Тогда
			СтруктураПолей.Вставить("СтруктурнаяЕдиница", ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка"));
		Иначе
			СтруктураПолей.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаРезерв);
		КонецЕсли; 
	КонецЕсли; 
	Если Объект.ПоложениеСклада<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") 
		И ЭтоРазборка Тогда
		Если ИмяТЧ="Продукция" Тогда
			СтруктураПолей.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаРезерв);
		Иначе
			СтруктураПолей.Вставить("СтруктурнаяЕдиница", ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка"));
		КонецЕсли; 
	КонецЕсли;
	Если СтруктураПолей.Количество()>0 Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураПолей);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПродукциюИзЗаказов(Заказы)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказы", Заказы);
	Запрос.УстановитьПараметр("ВидОперации", Объект.ВидОперации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.СерииНоменклатуры КАК СерииНоменклатуры,
	|	ЗаказПокупателяЗапасы.Количество - ЗаказПокупателяЗапасы.Резерв КАК Количество,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Спецификация КАК Спецификация,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЗаказПокупателяЗапасы.Ссылка КАК ЗаказПокупателя,
	|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказПокупателяЗапасы.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Количество - ЗаказПокупателяЗапасы.Резерв > 0
	|	И (ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|	И (ЗаказПокупателяЗапасы.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство))
	|	И ЗаказПокупателяЗапасы.Ссылка В(&Заказы)
	|	И ЗаказПокупателяЗапасы.Ссылка.ОсновнойВариантКП = ЗаказПокупателяЗапасы.НомерВариантаКП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателяМатериалы.Номенклатура,
	|	ЗаказПокупателяМатериалы.Характеристика,
	|	ЗаказПокупателяМатериалы.СерииНоменклатуры,
	|	ЗаказПокупателяМатериалы.Количество - ЗаказПокупателяМатериалы.Резерв,
	|	ЗаказПокупателяМатериалы.ЕдиницаИзмерения,
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка),
	|	ЗаказПокупателяМатериалы.Партия,
	|	ЗаказПокупателяМатериалы.Ссылка,
	|	ЗаказПокупателяМатериалы.Номенклатура.ТипНоменклатуры,
	|	ЗаказПокупателяМатериалы.КлючСвязи
	|ИЗ
	|	Документ.ЗаказПокупателя.Материалы КАК ЗаказПокупателяМатериалы
	|ГДЕ
	|	ЗаказПокупателяМатериалы.Количество - ЗаказПокупателяМатериалы.Резерв > 0
	|	И (ЗаказПокупателяМатериалы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ЗаказПокупателяМатериалы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|	И ЗаказПокупателяМатериалы.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство)
	|	И ЗаказПокупателяМатериалы.Ссылка В(&Заказы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	Запасы.СерииНоменклатуры КАК СерииНоменклатуры,
	|	СУММА(Запасы.Количество) КАК Количество,
	|	Запасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Запасы.Спецификация КАК Спецификация,
	|	Запасы.Партия КАК Партия,
	|	Запасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	Запасы.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА Запасы.Спецификация.ВидПроизводства <> ЗНАЧЕНИЕ(Справочник.ВидыПроизводства.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьЭтапыПроизводства
	|ИЗ
	|	Запасы КАК Запасы
	|
	|СГРУППИРОВАТЬ ПО
	|	Запасы.Спецификация,
	|	Запасы.ЕдиницаИзмерения,
	|	Запасы.СерииНоменклатуры,
	|	Запасы.Характеристика,
	|	Запасы.ЗаказПокупателя,
	|	Запасы.Партия,
	|	Запасы.ТипНоменклатуры,
	|	Запасы.Номенклатура,
	|	ВЫБОР
	|		КОГДА Запасы.Спецификация.ВидПроизводства <> ЗНАЧЕНИЕ(Справочник.ВидыПроизводства.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если КэшЗначений.ИспользоватьЭтапыПроизводства 
			И Выборка.ИспользоватьЭтапыПроизводства 
			И ТипСтруктурнойЕдиницы=ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение") Тогда
			НоваяСтрока.ПодразделениеЗавершающегоЭтапа = Объект.СтруктурнаяЕдиница;
		КонецЕсли;
		Если Объект.ПоложениеЗаказаПокупателя<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти
			И Выборка.ЗаказПокупателя<>Объект.ЗаказПокупателя Тогда
			Объект.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
			УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
		КонецЕсли;
		ЗаполнитьДанныеШапки(Объект, НоваяСтрока, "Продукция");
	КонецЦикла; 
	
	ЗаполнитьПризнакиИспользованияХарактеристикСервер();
	ЗаполнитьПризнакиИспользованияЭтапов();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("РезервированиеЗапасов", ПолучитьФункциональнуюОпцию("РезервированиеЗапасов"));
	КэшЗначений.Вставить("УчетПоНесколькимПодразделениям", ПолучитьФункциональнуюОпцию(
		"УчетПоНесколькимПодразделениям"));
	КэшЗначений.Вставить("ИспользоватьТехоперации", ПолучитьФункциональнуюОпцию("ИспользоватьТехоперации"));
	КэшЗначений.Вставить("ИспользоватьЭтапыПроизводства", ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства"));
	КэшЗначений.Вставить("ИспользоватьПараметрическиеСпецификации", ПолучитьФункциональнуюОпцию(
		"ИспользоватьПараметрическиеСпецификации"));
	КэшЗначений.Вставить("ИспользоватьДополнительныеРеквизитыИСведения", ПолучитьФункциональнуюОпцию(
		"ИспользоватьДополнительныеРеквизитыИСведения"));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОперацииНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	// ПараметрическиеСпецификации
	Отказ = Ложь;
	ПроизводствоФормулыСервер.РассчитатьПараметрическиеСпецификации(Документ, "Продукция", Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	// Конец ПараметрическиеСпецификации
	Документ.ЗаполнитьОперацииПоСпецификации();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ОбновитьКэшиДанныхСервер();
	ЗаполнитьСлужебныеДанныеПослеЧтенияОбъекта(Объект);
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	
	ВывестиОтметкиКонтроля(ЭтотОбъект);
	ОбновитьАвтоОтметкиПриИзмененииОпераций(ЭтотОбъект);
	
	ДействияПослеЧтенияОбъекта();
	ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	
КонецПроцедуры // ЗаполнитьПоСпецификацииНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено,
	ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура;
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаКлиенте
Процедура ОбновитьКэшиДанных()
	
	СотрудникиКОбновлению = Новый Массив;
	Если Объект.ПоложениеИсполнителя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Исполнитель) ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Исполнитель)<>Тип("СправочникСсылка.Сотрудники") Тогда
				Продолжить;
			КонецЕсли; 
			Если КэшПодразделения.Получить(СтрокаТабличнойЧасти.Исполнитель)=Неопределено Тогда
				СотрудникиКОбновлению.Добавить(СтрокаТабличнойЧасти.Исполнитель);
			КонецЕсли; 
		КонецЦикла;
		Для каждого СтрокаТабличнойЧасти Из Объект.СоставБригады Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сотрудник) Тогда
				Продолжить;
			КонецЕсли; 
			Если КэшПодразделения.Получить(СтрокаТабличнойЧасти.Сотрудник)=Неопределено Тогда
				СотрудникиКОбновлению.Добавить(СтрокаТабличнойЧасти.Сотрудник);
			КонецЕсли; 
		КонецЦикла;
	ИначеЕсли Объект.ПоложениеИсполнителя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		Если ЗначениеЗаполнено(Объект.Исполнитель) И ТипЗнч(Объект.Исполнитель)=Тип("СправочникСсылка.Сотрудники") Тогда
			Если КэшПодразделения.Получить(Объект.Исполнитель)=Неопределено Тогда
				СотрудникиКОбновлению.Добавить(Объект.Исполнитель);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект.Исполнитель)=Тип("СправочникСсылка.Бригады") Тогда
			Для каждого СтрокаТабличнойЧасти Из Объект.СоставБригады Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сотрудник) Тогда
					Продолжить;
				КонецЕсли; 
				Если КэшПодразделения.Получить(СтрокаТабличнойЧасти.Сотрудник)=Неопределено Тогда
					СотрудникиКОбновлению.Добавить(СтрокаТабличнойЧасти.Сотрудник);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
	
	Если СотрудникиКОбновлению.Количество()>0 Тогда
		ОбновитьКэшиДанныхСервер(СотрудникиКОбновлению);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКэшиДанныхСервер(МассивСотрудников = Неопределено)
	
	Если МассивСотрудников=Неопределено Тогда
		МассивСотрудников = Новый Массив;
		Если Объект.ПоложениеИсполнителя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
			Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Исполнитель) ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Исполнитель)<>Тип("СправочникСсылка.Сотрудники") Тогда
					Продолжить;
				КонецЕсли; 
				МассивСотрудников.Добавить(СтрокаТабличнойЧасти.Исполнитель);
			КонецЦикла;
			Для каждого СтрокаТабличнойЧасти Из Объект.СоставБригады Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сотрудник) Тогда
					Продолжить;
				КонецЕсли; 
				МассивСотрудников.Добавить(СтрокаТабличнойЧасти.Сотрудник);
			КонецЦикла;
		ИначеЕсли Объект.ПоложениеИсполнителя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
			Если ЗначениеЗаполнено(Объект.Исполнитель) И ТипЗнч(Объект.Исполнитель)=Тип("СправочникСсылка.Сотрудники") Тогда
				МассивСотрудников.Добавить(Объект.Исполнитель);
			ИначеЕсли ТипЗнч(Объект.Исполнитель)=Тип("СправочникСсылка.Бригады") Тогда
				Для каждого СтрокаТабличнойЧасти Из Объект.СоставБригады Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сотрудник) Тогда
						Продолжить;
					КонецЕсли; 
					МассивСотрудников.Добавить(СтрокаТабличнойЧасти.Сотрудник);
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьЗапрос = КэшЗначений.ИспользоватьТехоперации И МассивСотрудников.Количество()>0;
	
	Если ВыполнитьЗапрос Тогда
		
		МассивСотрудников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСотрудников);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
		Запрос.УстановитьПараметр("ПериодСреза", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, КонецДня(ТекущаяДата())));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	ЕСТЬNULL(СотрудникиСрезПоследних.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СтруктурнаяЕдиница
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники.СрезПоследних(&ПериодСреза, Организация = &Организация) КАК СотрудникиСрезПоследних
		|		ПО (СотрудникиСрезПоследних.Сотрудник = Сотрудники.Ссылка)
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСотрудников)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если ТипЗнч(КэшПодразделения)=Тип("ФиксированноеСоответствие") Тогда
			СоответствиеПодразделений = Новый Соответствие(КэшПодразделения);
		Иначе
			СоответствиеПодразделений = Новый Соответствие;
		КонецЕсли; 
		
		Пока Выборка.Следующий() Цикл
			СоответствиеПодразделений.Вставить(Выборка.Сотрудник, Выборка.СтруктурнаяЕдиница);	
		КонецЦикла;
		
		КэшПодразделения = Новый ФиксированноеСоответствие(СоответствиеПодразделений);
		
	Иначе
		
		КэшПодразделения = Новый ФиксированноеСоответствие(Новый Соответствие);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДлительностьОперации()

	ТекущаяСтрока = Элементы.Операции.ТекущиеДанные;
	ТекущаяСтрока.Нормочасы = ТекущаяСтрока.НормаВремени * ТекущаяСтрока.КоличествоПлан;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставБригадыНаСервере(Бригада, КлючСвязи = Неопределено)

	Если КлючСвязи=Неопределено Тогда
		Объект.СоставБригады.Очистить();
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Бригада) И ТипЗнч(Бригада) = Тип("СправочникСсылка.Бригады") Тогда
		
		ТаблицаСостава = Справочники.Бригады.СоставБригады(Бригада, Объект.Организация, Объект.Дата);
		
		Для каждого СтрокаТабличнойЧасти Из ТаблицаСостава Цикл
			НоваяСтрока = Объект.СоставБригады.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			НоваяСтрока.КТУ = 1;
			Если Объект.ПоложениеСтруктурнойЕдиницыОпераций=Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
				НоваяСтрока.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
			КонецЕсли;
			Если КлючСвязи<>Неопределено Тогда
				НоваяСтрока.КлючСвязи = КлючСвязи;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли;	
	
	Модифицированность = Истина;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеДанныеПослеЧтенияОбъекта(Объект)
	
	Если Объект.ПоложениеИсполнителя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Для каждого ТекущаяСтрока Из Объект.Операции Цикл
			ТекущаяСтрока.ИсполнительБригада = (ТипЗнч(ТекущаяСтрока.Исполнитель)=Тип("СправочникСсылка.Бригады"));
			Если ТекущаяСтрока.ИсполнительБригада Тогда
				ТекущаяСтрока.ИзменитьСостав = НСтр("ru = 'Изменить состав и КТУ'");
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого ТекущаяСтрока Из Объект.Операции Цикл
			ТекущаяСтрока.ИсполнительБригада = Ложь;
		КонецЦикла; 
	КонецЕсли; 
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
		СтрокаПродукции = СтрокаПоКлючу(Объект.Продукция, СтрокаТабличнойЧасти.КлючСвязиПродукция);
		ЗаполнитьДанныеПродукцииВСтрокеОперации(Объект, СтрокаТабличнойЧасти, СтрокаПродукции);
	КонецЦикла; 	
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСпецификацияПриИзменении(СтруктураДанные)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства")
		И ЗначениеЗаполнено(СтруктураДанные.Спецификация)
		И ТипЗнч(СтруктураДанные.Спецификация)=Тип("СправочникСсылка.Спецификации") Тогда
		ВидПроизводства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанные.Спецификация, "ВидПроизводства");
		СтруктураДанные.Вставить("ИспользоватьЭтапыПроизводства", ЗначениеЗаполнено(ВидПроизводства));
	Иначе
		СтруктураДанные.Вставить("ИспользоватьЭтапыПроизводства", Ложь);
	КонецЕсли; 
	
	// ПараметрическиеСпецификации
	Если ЗначениеЗаполнено(СтруктураДанные.Спецификация)
		И ТипЗнч(СтруктураДанные.Спецификация)=Тип("СправочникСсылка.Спецификации") Тогда
		СтруктураДанные.Вставить("ЭтоШаблонСпецификации", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанные.Спецификация, "ЭтоШаблон"));
		СтруктураДанные.Вставить("ЕстьДопРеквизитыСпецификации", ПроизводствоСервер.ЕстьДопРеквизитыСпецификации(СтруктураДанные.Спецификация));
	Иначе
		СтруктураДанные.Вставить("ЭтоШаблонСпецификации", Ложь);
		СтруктураДанные.Вставить("ЕстьДопРеквизитыСпецификации", Ложь);
	КонецЕсли; 
	// Конец ПараметрическиеСпецификации
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаКлиенте
Процедура ОбновитьСкладВТЧ()
	
	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка") Тогда
		ИмяТЧ = "Продукция";
		ИмяТЧОчистка = "Запасы";
	Иначе
		ИмяТЧ = "Запасы";
		ИмяТЧОчистка = "Продукция";
	КонецЕсли;
	Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТЧ] Цикл
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв;
	КонецЦикла; 
	Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТЧОчистка] Цикл
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
	КонецЦикла; 
	Если Объект.РучноеРаспределение Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.РаспределениеЗапасов Цикл
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
			Иначе
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДействияПослеЧтенияОбъекта()
	
	// ПараметрическиеСпецификации
	ОбновитьПризнакиПараметрическихСпецификаций(Объект.Продукция);
	ОбновитьОписанияДопРеквизитов(ЭтотОбъект);
	// Конец ПараметрическиеСпецификации
	
КонецПроцедуры

#КонецОбласти

#Область Подбор

&НаКлиенте
Процедура Подбор(Команда)

	ИмяТабличнойЧасти = "Запасы";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);

КонецПроцедуры // Подбор()

&НаКлиенте
Процедура ПодборПродукция(Команда)

	ИмяТабличнойЧасти = "Продукция";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);

КонецПроцедуры // ПодборПродукция()

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТЧ, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Если ИмяТабличнойЧасти = "Запасы" И Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		
		ЕстьСтруктурнаяЕдиница = НЕ ТаблицаДляЗагрузки.Колонки.Найти("СтруктурнаяЕдиница") = Неопределено;
		
		Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
			Если ЕстьСтруктурнаяЕдиница И ЗначениеЗаполнено(СтрокаЗагрузки.СтруктурнаяЕдиница) 
				И Не СтрокаЗагрузки.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв Тогда
				Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
				УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
				СкладВШапке = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		ЗаполнитьДанныеШапки(Объект, НоваяСтрока, ИмяТЧ);
		
		Если НЕ СкладВШапке = Истина Тогда
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиница) Тогда
				НоваяСтрока.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв;
			КонецЕсли;
		КонецЕсли;
		
		// Характеристики
		СтруктураДанныеНоменклатуры = Новый Структура();
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
		Если ИмяТабличнойЧасти = "Продукция" Тогда
			
			Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) 
				Тогда
				НоваяСтрока.ТипНоменклатуры = СтрокаЗагрузки.Номенклатура.ТипНоменклатуры;
			КонецЕсли;
			СтатусПартии = Новый СписокЗначений;
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
			СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии)
		ИначеЕсли ИмяТабличнойЧасти = "Запасы"
			Тогда
			СтатусПартии = Новый СписокЗначений;
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
			СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
		КонецЕсли;
		
		НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики
			Тогда
			НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
		// Конец Характеристики
		
		//Партии
		НоваяСтрока.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, СтруктураДанные.Партия);
		// Конец Партии
		
		НоваяСтрока.КлючСвязи = ТабличныеЧастиУНФКлиентСервер.СоздатьНовыйКлючСвязи(ЭтотОбъект);
		
		Если НоваяСтрока.Свойство("Спецификация") Тогда
			НоваяСтрока.Спецификация = СтруктураДанные.Спецификация;
		КонецЕсли;
		Если НоваяСтрока.Свойство("ИспользоватьЭтапыПроизводства") Тогда
			НоваяСтрока.ИспользоватьЭтапыПроизводства = СтруктураДанные.ИспользоватьЭтапыПроизводства;
			Если НоваяСтрока.Свойство("ПодразделениеЗавершающегоЭтапа")
				И НоваяСтрока.ИспользоватьЭтапыПроизводства 
				И ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение") Тогда
				НоваяСтрока.ПодразделениеЗавершающегоЭтапа = Объект.СтруктурнаяЕдиница;
			Иначе
				НоваяСтрока.ПодразделениеЗавершающегоЭтапа = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
			КонецЕсли; 
		КонецЕсли;
		Если НоваяСтрока.Свойство("ЭтоШаблонСпецификации") Тогда
			НоваяСтрока.ЭтоШаблонСпецификации = СтруктураДанные.ЭтоШаблонСпецификации;
			НоваяСтрока.ЕстьДопРеквизитыСпецификации = СтруктураДанные.ЕстьДопРеквизитыСпецификации;
			Если НоваяСтрока.ЕстьДопРеквизитыСпецификации Тогда
				Если НоваяСтрока.КлючСвязи<>0 Тогда
					ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.РеквизитыПараметрическихСпецификаций, НоваяСтрока);
				КонецЕсли; 
				ЗаполнитьДопРеквизитыПоУмолчанию(НоваяСтрока.ПолучитьИдентификатор());
				ОбновитьОписанияДопРеквизитов(ЭтотОбъект, НоваяСтрока.КлючСвязи);
			КонецЕсли; 
		КонецЕсли; 

	КонецЦикла;
	
	Если ИмяТабличнойЧасти="Запасы" Тогда
		ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	КонецЕсли; 
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	Если ИмяТабличнойЧасти="Продукция" Тогда
		ОбновитьВидимостьКолонкиПараметровСпецификации(ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));
	
	#Если МобильныйКлиент Тогда
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
	ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество, ДоляСтоимости", ТекШтрихкод, 1, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы", Ложь);
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ТЧПродукция Тогда
		ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Продукция");
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ТЧЗапасы Тогда
		ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	КонецЕсли;
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Ложь, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ПродукцияКопироватьСтроки(Команда)
	
	КопироватьСтроки("Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВставитьСтроки(Команда)
	
	ИмяТабличнойЧасти = "Продукция";
	ВставитьСтроки(ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ИмяТабличнойЧасти = "Запасы";
	ВставитьСтроки(ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	
	Если Объект.РучноеРаспределение И ИмяТЧ="Запасы" Тогда
		ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	КонецЕсли;
	
	Если РежимОстаткиИРезервы И ИмяТЧ = "Запасы" Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		СтрокаТабличнойЧасти = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
			СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
		КонецЕсли;
		
		Если ИмяТЧ = "Продукция" Тогда
			
			СтрокаТабличнойЧасти.ТипНоменклатуры = СтруктураДанные.ТипНоменклатуры;
			
		ИначеЕсли ИмяТЧ="Операции" Тогда
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
				СтруктураДанные.Вставить("Спецификация", СтрокаТабличнойЧасти.Спецификация);
			КонецЕсли; 
			
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, ИмяТЧ);
			
			СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
			Если ЗначениеЗаполнено(СтруктураДанные.Операция) Тогда
				СтрокаТабличнойЧасти.Операция 			= СтруктураДанные.Операция;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.НормаВремени 		= СтруктураДанные.НормаВремени;
			Иначе
				СтрокаТабличнойЧасти.НормаВремени 		= 0;
			КонецЕсли;
			СтрокаТабличнойЧасти.Нормочасы = СтрокаТабличнойЧасти.НормаВремени * СтрокаТабличнойЧасти.КоличествоПлан;
			
			Если Объект.ПоложениеИсполнителя=Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
				СтрокаТабличнойЧасти.Исполнитель = Объект.Исполнитель;
			КонецЕсли; 
			Если Объект.ПоложениеСтруктурнойЕдиницыОпераций=Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
			КонецЕсли;
			
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмяТЧ="Операции" Тогда
		ОбновитьКэшиДанныхСервер();
		ЗаполнитьСлужебныеДанныеПослеЧтенияОбъекта(Объект);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	ЕстьСпецификации = Ложь;
	Для Итератор = 1 По КоличествоВставленных Цикл
		СтрокаТабличнойЧасти = Объект[ИмяТЧ][Количество - Итератор];
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, СтрокаТабличнойЧасти);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
			ЕстьСпецификации = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяТЧ="Продукция" Тогда
		Если ЕстьСпецификации Тогда
			ЗапасыНеЗаполнены = Истина;
		КонецЕсли; 
		УстановитьКартинкиЗакладок(ЭтотОбъект);
		ОбновитьСпискиВыбораПродукции();
	ИначеЕсли ИмяТЧ="Запасы" Тогда
		ВывестиОтметкиКонтроля(ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииКопироватьСтроки(Команда)
	
	КопироватьСтроки("Операции");
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВставитьСтроки(Команда)
	
	ВставитьСтроки("Операции");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
// @skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область РаспределениеЗапасов

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКартинкиЗакладок(Форма, Заполнено = Неопределено, Распределено = Неопределено)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Заполнено <> (НЕ Форма.ЗапасыНеЗаполнены) Тогда
		Если Заполнено <> Неопределено Тогда
			Форма.ЗапасыНеЗаполнены = НЕ Заполнено;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧЗапасы", "Картинка", ?(Форма.ЗапасыНеЗаполнены, БиблиотекаКартинок.ВниманиеВВидеТреугольника, Новый Картинка));
	КонецЕсли; 	
	
	Если НЕ Объект.РучноеРаспределение Тогда
		Форма.ЗапасыНеРаспределены = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧРаспределениеЗапасов", "Картинка", Новый Картинка);
	ИначеЕсли Распределено <> (НЕ Форма.ЗапасыНеРаспределены) Тогда
		Если Распределено <> Неопределено Тогда
			Форма.ЗапасыНеРаспределены = НЕ Распределено;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧРаспределениеЗапасов", "Картинка", ?(Форма.ЗапасыНеРаспределены, БиблиотекаКартинок.ВниманиеВВидеТреугольника, Новый Картинка));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПредупрежденияЗапасы", "Видимость", Форма.ЗапасыНеЗаполнены);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПредупрежденияРаспределение", "Видимость", Форма.ЗапасыНеРаспределены);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСервер()
	
	Если НЕ Объект.РучноеРаспределение Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьРеквизитыТЧПоШапке(Объект);
	ПроизводствоСервер.РаспределитьМатериалы(Объект.Продукция, Объект.Запасы, Объект.РаспределениеЗапасов, , Истина, Объект.ВидОперации);
	ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	УстановитьКартинкиЗакладок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРаспределениеЗапасовНаФорме()
	
	Если НЕ Объект.РучноеРаспределение Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяСтрока = Элементы.СписокПродукции.ТекущиеДанные;
	БезОтбора = (ТекущаяСтрока=Неопределено ИЛИ ТекущаяСтрока.Значение=0);
	Элементы.РаспределениеЗапасовГруппаПродукция.Видимость = БезОтбора;
	
	Если БезОтбора Тогда
		Строки = Объект.РаспределениеЗапасов;
		ТекущаяПродукция = 0;
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязиПродукция", ТекущаяСтрока.Значение);
		Строки = Объект.РаспределениеЗапасов.НайтиСтроки(СтруктураОтбора);
		ТекущаяПродукция = ТекущаяСтрока.Значение;
	КонецЕсли; 
	
	СоответствияПродукции = Новый Соответствие;
	ИмяТабличнойЧасти = "Продукция";
	Для каждого СтрокаПродукция Из Объект.Продукция Цикл
		Если СтрокаПродукция.КлючСвязи=0 И НЕ ТолькоПросмотр Тогда
			СтрокаПродукция.КлючСвязи = ТабличныеЧастиУНФКлиентСервер.СоздатьНовыйКлючСвязи(ЭтотОбъект);
		КонецЕсли; 
		СоответствияПродукции.Вставить(СтрокаПродукция.КлючСвязи, СтрокаПродукция);
	КонецЦикла; 
	
	РаспределениеЗапасов.Очистить();
	Для каждого СтрокаТабличнойЧасти Из Строки Цикл
		Если НЕ БезОтбора И ТекущаяСтрока.Значение<>СтрокаТабличнойЧасти.КлючСвязиПродукция Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаПродукция = СоответствияПродукции.Получить(СтрокаТабличнойЧасти.КлючСвязиПродукция);
		НоваяСтрока = РаспределениеЗапасов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		ЗаполнитьДанныеПродукцииВСтрокеРаспределения(НоваяСтрока, СтрокаПродукция);
	КонецЦикла;
	
	ПеренумероватьРаспределение(РаспределениеЗапасов);
	ВывестиОтметкиКонтроля(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Представление(Значение1 = Неопределено, Значение2 = Неопределено, Значение3 = Неопределено)
	
	Результат = "";
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(Значение1);
	МассивЗначений.Добавить(Значение2);
	МассивЗначений.Добавить(Значение3);
	
	Для каждого Значение Из МассивЗначений Цикл
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Продолжить;
		КонецЕсли;
		Результат = Результат + ?(ПустаяСтрока(Результат), "", ", ")+Строка(Значение);
	КонецЦикла; 
	
	Возврат Результат; 
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеТЧРаспределениеЗапасов(Форма)
	
	Если НЕ Форма.Объект.РучноеРаспределение Тогда
		Возврат;
	КонецЕсли; 
	
	РаспределениеНаФорме = Форма.РаспределениеЗапасов;
	РаспределениеТЧ = Форма.Объект.РаспределениеЗапасов;
	ТекущаяПродукция = Форма.ТекущаяПродукция;
	
	Если ТекущаяПродукция>0 Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязиПродукция", ТекущаяПродукция);
		Строки = РаспределениеТЧ.НайтиСтроки(СтруктураОтбора);
		Если Строки.Количество()=0 Тогда
			ИндексВставки = РаспределениеТЧ.Количество();
		Иначе
			ИндексВставки = РаспределениеТЧ.Индекс(Строки[0]);
		КонецЕсли; 
	Иначе
		Строки = Новый Массив;
		РаспределениеТЧ.Очистить();
		ИндексВставки = 0;
	КонецЕсли; 
	Для каждого СтрокаФормы Из РаспределениеНаФорме Цикл
		Если СтрокаФормы.Количество=0 Тогда
			Продолжить;
		КонецЕсли; 
		Если ИндексВставки>=РаспределениеТЧ.Количество() Тогда
			НоваяСтрока = РаспределениеТЧ.Добавить();
		Иначе
			НоваяСтрока = РаспределениеТЧ.Вставить(ИндексВставки);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаФормы);
		ИндексВставки = ИндексВставки + 1;
	КонецЦикла; 
	Для каждого СтрокаТабличнойЧасти Из Строки Цикл
		РаспределениеТЧ.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеПродукцииВСтрокеРаспределения(СтрокаРаспределения, СтрокаПродукции = Неопределено)
	
	Если СтрокаПродукции=Неопределено Тогда
		СтрокаРаспределения.НоменклатураПродукция = Неопределено;
		СтрокаРаспределения.ХарактеристикаПродукция = Неопределено;
		СтрокаРаспределения.СпецификацияПродукция = Неопределено;
		СтрокаРаспределения.ЕдиницаИзмеренияПродукция = Неопределено;
		СтрокаРаспределения.КоличествоПродукция = 0;
		СтрокаРаспределения.РезервПродукция = 0;
		СтрокаРаспределения.ПартияПродукция = Неопределено;
		СтрокаРаспределения.СтруктурнаяЕдиницаПродукция = Неопределено;
		СтрокаРаспределения.КлючСвязиПродукция = 0;
		СтрокаРаспределения.ЗаказПокупателя = Неопределено; 
	Иначе
		СтрокаРаспределения.НоменклатураПродукция = СтрокаПродукции.Номенклатура;
		СтрокаРаспределения.ХарактеристикаПродукция = СтрокаПродукции.Характеристика;
		СтрокаРаспределения.СпецификацияПродукция = СтрокаПродукции.Спецификация;
		СтрокаРаспределения.ЕдиницаИзмеренияПродукция = СтрокаПродукции.ЕдиницаИзмерения;
		СтрокаРаспределения.КоличествоПродукция = СтрокаПродукции.Количество;
		СтрокаРаспределения.РезервПродукция = СтрокаПродукции.Резерв;
		СтрокаРаспределения.ПартияПродукция = СтрокаПродукции.Партия;
		СтрокаРаспределения.СтруктурнаяЕдиницаПродукция = СтрокаПродукции.СтруктурнаяЕдиница;
		СтрокаРаспределения.КлючСвязиПродукция = СтрокаПродукции.КлючСвязи;
		СтрокаРаспределения.ЗаказПокупателя = СтрокаПродукции.ЗаказПокупателя; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСуществующуюСтрокуРаспределения(Таблица, КлючСвязиПродукция, ДанныеЗапасов)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязиПродукция", КлючСвязиПродукция);
	СтруктураОтбора.Вставить("Номенклатура", ДанныеЗапасов.Номенклатура);
	СтруктураОтбора.Вставить("Характеристика", ДанныеЗапасов.Характеристика);
	СтруктураОтбора.Вставить("Партия", ДанныеЗапасов.Партия);
	СтруктураОтбора.Вставить("Спецификация", ДанныеЗапасов.Спецификация);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", ДанныеЗапасов.ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("СтруктурнаяЕдиница", ДанныеЗапасов.СтруктурнаяЕдиница);
	СтруктураОтбора.Вставить("ЗаказПокупателя", ДанныеЗапасов.ЗаказПокупателя);
	Строки = Таблица.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строки[0];
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренумероватьРаспределение(РаспределениеЗапасов)
	
	Ном = 1;
	Для каждого СтрокаТабличнойЧасти Из РаспределениеЗапасов Цикл
		СтрокаТабличнойЧасти.НомерСтроки = Ном;
		Ном = Ном+1;
	КонецЦикла; 	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРаспределениюСервер()
	
	Если НЕ Объект.РучноеРаспределение Тогда
		Возврат;
	КонецЕсли; 
	
	ПроизводствоСервер.ЗаполнитьПоРаспределению(Объект.Запасы, Объект.РаспределениеЗапасов);
	ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	ЗапасыНеЗаполнены = Ложь;
	ВывестиОтметкиКонтроля(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеЗапасовВСтрокеРаспределения(Объект, СтрокаРаспределения, СтрокаЗапасов)
	
	ЗаполнитьЗначенияСвойств(СтрокаРаспределения, СтрокаЗапасов, ИменаКолонокЗапасов(Объект))
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиОтметкиКонтроля(Форма)
	
	Объект = Форма.Объект;
	Если НЕ Объект.РучноеРаспределение Тогда
		УстановитьКартинкиЗакладок(Форма);
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаРаспределения Из Форма.РаспределениеЗапасов Цикл
		СтрокаРаспределения.ОшибкаКоличество = Ложь;
	КонецЦикла;
	
	ЕстьОшибкиРаспределения = Ложь;
	Для каждого СтрокаКонтроля Из Форма.КэшКонтроляРаспределения Цикл
		Если СтрокаКонтроля.КоличествоЗапасы=СтрокаКонтроля.КоличествоРаспределение Тогда
			Продолжить;
		КонецЕсли;
		ЕстьОшибкиРаспределения = Истина;
		СтруктураОтбора = Новый Структура(ИменаКолонокЗапасов(Объект));
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаКонтроля);
		СтрокиРаспределения = Форма.РаспределениеЗапасов.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			Если (СтрокаКонтроля.КоличествоЗапасы<>СтрокаКонтроля.КоличествоРаспределение) Тогда
				СтрокаРаспределения.ОшибкаКоличество = Истина;
			КонецЕсли; 
		КонецЦикла;  
	КонецЦикла;
	
	УстановитьКартинкиЗакладок(Форма, , НЕ ЕстьОшибкиРаспределения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКэшКонтроляПриИзмененииДанныхСтроки(НовыеДанныеСтроки = Неопределено)
	
	Если НЕ Объект.РучноеРаспределение Тогда
		Возврат;
	КонецЕсли; 
	
	Для ии = 1 По 2 Цикл
		Если ии=1 Тогда
			Если ТипЗнч(СтарыеДанныеСтроки)<>Тип("ФиксированнаяСтруктура") Тогда
				Продолжить;
			КонецЕсли; 
			СтруктураОтбора = Новый Структура(СтарыеДанныеСтроки);
			СтарыеДанныеСтроки = Неопределено;
		Иначе
			Если НовыеДанныеСтроки=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			СтруктураОтбора = Новый Структура(ИменаКолонокЗапасов(Объект));
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, НовыеДанныеСтроки);
		КонецЕсли;
		СтруктураИтогов = ИтогиПоЗапасам(СтруктураОтбора);
		СтрокиКонтроля = КэшКонтроляРаспределения.НайтиСтроки(СтруктураОтбора);
		Если СтрокиКонтроля.Количество()=0 Тогда
			СтрокаКонтроля = КэшКонтроляРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКонтроля, СтруктураОтбора);
		Иначе
			СтрокаКонтроля = СтрокиКонтроля[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаКонтроля, СтруктураИтогов);
		ЕстьОшибки = (СтрокаКонтроля.КоличествоЗапасы<>СтрокаКонтроля.КоличествоРаспределение);
		СтрокиНаФорме = РаспределениеЗапасов.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаНаФорме Из СтрокиНаФорме Цикл
			СтрокаНаФорме.ОшибкаКоличество = ЕстьОшибки;
		КонецЦикла; 
	КонецЦикла;
	
	ЕстьОшибкиРаспределения = Ложь;
	Для каждого СтрокаКонтроля Из КэшКонтроляРаспределения Цикл
		Если СтрокаКонтроля.КоличествоЗапасы<>СтрокаКонтроля.КоличествоРаспределение Тогда
			ЕстьОшибкиРаспределения = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	УстановитьКартинкиЗакладок(ЭтотОбъект, , НЕ ЕстьОшибкиРаспределения);
	ОбновитьТекстПодсказкиРаспределения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстПодсказкиРаспределения()
	
	ПоясняющийТекстОшибкиРаспределение = "";
	
	ТекущаяСтрока = Элементы.РаспределениеЗапасов.ТекущиеДанные;
	Если ТекущаяСтрока=Неопределено Тогда
		ПоясняющийТекстОшибкиРаспределение = НСтр("ru = 'Результат распределения не соответствует данным о материалах и/или продукции.'");
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураПродукция) И НЕ ТекущаяСтрока.ОшибкаКоличество Тогда
		ПоясняющийТекстОшибкиРаспределение = НСтр("ru = 'Результат распределения не соответствует данным о материалах и/или продукции. Для подробной информации выделите строку с предупреждением.'");
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура(ИменаКолонокЗапасов(Объект));
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущаяСтрока);
	СтруктураИтогов = ИтогиПоЗапасам(СтруктураОтбора);
	ЕдиницаИзмерения = Строка(СтруктураОтбора.ЕдиницаИзмерения);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураПродукция) Тогда
		ПоясняющийТекстОшибкиРаспределение = ПоясняющийТекстОшибкиРаспределение 
		+ НСтр("ru = 'Не указана продукция распределения. '"); 
	КонецЕсли; 
	
	Если ТекущаяСтрока.ОшибкаКоличество Тогда
		ПоясняющийТекстОшибкиРаспределение = ПоясняющийТекстОшибкиРаспределение 
		+ СтрШаблон(НСтр("ru = 'Отличается количество материалов (%1 %2) и распределения (%3 %4). '"), СтруктураИтогов.КоличествоЗапасы, ЕдиницаИзмерения, СтруктураИтогов.КоличествоРаспределение, ЕдиницаИзмерения); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ИтогиПоЗапасам(СтруктураОтбора)
	
	СтруктураИтогов = Новый Структура("КоличествоЗапасы, КоличествоРаспределение", 0, 0, 0, 0);
	СтрокиЗапасы = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаЗапасы Из СтрокиЗапасы Цикл
		СтруктураИтогов.КоличествоЗапасы = СтруктураИтогов.КоличествоЗапасы + СтрокаЗапасы.Количество;
	КонецЦикла; 
	СтрокиРаспределения = Объект.РаспределениеЗапасов.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
		СтруктураИтогов.КоличествоРаспределение = СтруктураИтогов.КоличествоРаспределение + СтрокаРаспределения.Количество;
	КонецЦикла;
	Возврат СтруктураИтогов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИменаКолонокЗапасов(Объект)
	
	Возврат "Этап, Номенклатура, Характеристика, Партия, Спецификация, ЕдиницаИзмерения"
	+?(Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Сборка") 
	И Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти"), ", СтруктурнаяЕдиница", "")
	+?(Объект.ПоложениеЗаказаПокупателя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти"), ", ЗаказПокупателя", "");	
	
КонецФункции 

&НаКлиенте
Процедура ОбновитьСпискиВыбораПродукции()
	
	ТекущаяСтрока = Элементы.СписокПродукции.ТекущиеДанные;
	Если ТекущаяСтрока=Неопределено Тогда
		КлючСвязи = 0;
	Иначе
		КлючСвязи = ТекущаяСтрока.Значение;
	КонецЕсли;
	
	ИмяТабличнойЧасти = "Продукция";
	
	СписокПродукции.Очистить();
	Элементы.РаспределениеЗапасовНоменклатураПродукция.СписокВыбора.Очистить();
	Элементы.ЗапасыЗаказПокупателя.СписокВыбора.Очистить();
	Элементы.ОперацииЗаказПокупателя.СписокВыбора.Очистить();
	Элементы.ОперацииНоменклатура.СписокВыбора.Очистить();
	СписокПродукции.Добавить(0, НСтр("ru = 'Вся продукция'"));
	Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		Если СтрокаТабличнойЧасти.КлючСвязи=0 И НЕ ТолькоПросмотр Тогда
			СтрокаТабличнойЧасти.КлючСвязи = ТабличныеЧастиУНФКлиентСервер.СоздатьНовыйКлючСвязи(ЭтотОбъект);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		ПредставлениеПродукции = Представление(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрокаТабличнойЧасти.Спецификация);
		СписокПродукции.Добавить(СтрокаТабличнойЧасти.КлючСвязи, ПредставлениеПродукции);
		Элементы.РаспределениеЗапасовНоменклатураПродукция.СписокВыбора.Добавить(СтрокаТабличнойЧасти.КлючСвязи, ПредставлениеПродукции);
		Если Элементы.ЗапасыЗаказПокупателя.СписокВыбора.НайтиПоЗначению(СтрокаТабличнойЧасти.ЗаказПокупателя)=Неопределено Тогда
			ПредставлениеЗаказа = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя), Строка(СтрокаТабличнойЧасти.ЗаказПокупателя), НСтр("ru = '<Не указан>'"));
			Элементы.ЗапасыЗаказПокупателя.СписокВыбора.Добавить(СтрокаТабличнойЧасти.ЗаказПокупателя, ПредставлениеЗаказа);
		КонецЕсли; 
	КонецЦикла;
	Элементы.ЗапасыЗаказПокупателя.СписокВыбора.СортироватьПоПредставлению();
	Для каждого ЭлементСписка Из Элементы.ЗапасыЗаказПокупателя.СписокВыбора Цикл
		Элементы.ОперацииЗаказПокупателя.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	Для каждого ЭлементСписка Из Элементы.РаспределениеЗапасовНоменклатураПродукция.СписокВыбора Цикл
		Элементы.ОперацииНоменклатура.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла; 
	
	ТекущаяСтрока = СписокПродукции.НайтиПоЗначению(КлючСвязи);
	Если ТекущаяСтрока=Неопределено Тогда
		ТекущаяСтрока = СписокПродукции[0];
	КонецЕсли; 
	Элементы.СписокПродукции.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	
	Если Объект.РучноеРаспределение Тогда
		ОбновитьРаспределениеЗапасовНаФорме();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодсказкуРаспределение(ПрочитатьЗначение = Ложь)
	
	Если ПрочитатьЗначение Тогда
		ОбновитьСпособРаспределенияПоУмолчанию();
	КонецЕсли; 
	
	ЭлементыЗаголовка = Новый Массив;
	ЭлементыЗаголовка.Добавить(
	СтрШаблон(НСтр("ru = 'Правила автоматического распределения материалов: по спецификациям и (или) 
	|пропорционально количеству выпускаемой продукции. Для ручного режима первичное 
	|распределение выполняется по тем же правилам, но есть возможность откорректировать
	|результат. Режим по умолчанию: %1 '"),
	?(РучноеРаспределениеПоУмолчанию, НСтр("ru = 'ручное распределение'"), НСтр("ru = 'автоматическое распределение'"))));
	ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'изменить'"), , , , "ИзменитьРежимПоУмолчанию"));
	Элементы.РучноеРаспределениеРасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ЭлементыЗаголовка);	// АПК:1356 Используются предварительно локализованные строки с гиперссылками
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпособРаспределенияПоУмолчанию()
	
	РучноеРаспределениеПоУмолчанию = (Константы.ИспользоватьРучноеРаспределениеМатериаловПоУмолчанию.Получить()=Перечисления.ДаНет.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСпособаРаспределенияПоУмолчанию(Значение, ДополнительныеПараметры) Экспорт
	
	ОбновитьПодсказкуРаспределение(Истина);	
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Колонка "Спецификация"
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Продукция.ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Услуга);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ПродукцияСпецификация.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используются>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	// Резервирование
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПоложениеЗаказаПокупателя", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.УчетПотребностиПоСкладам", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ПродукцияРезерв.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ПродукцияСтруктурнаяЕдиницаТабличнаяЧасть.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Продукция.ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПоложениеЗаказаПокупателя", Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.УчетПотребностиПоСкладам", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ПродукцияРезерв.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ПродукцияСтруктурнаяЕдиницаТабличнаяЧасть.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаИЛИ = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ГруппаИ = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИ, "Объект.Продукция.ЗаказПокупателя", Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИ, "Объект.Продукция.Резерв", 0, ВидСравненияКомпоновкиДанных.Больше);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИЛИ, "Объект.УчетПотребностиПоСкладам", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Продукция.СтруктурнаяЕдиница", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ПродукцияСтруктурнаяЕдиницаТабличнаяЧасть.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПоложениеЗаказаПокупателя", Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.УчетПотребностиПоСкладам", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыРезерв.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыРезервДляРежимаОстатки.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыСтруктурнаяЕдиницаТабличнаяЧасть.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыСтруктурнаяЕдиницаОстатки.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Выберите заказ покупателя>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПоложениеЗаказаПокупателя", Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.УчетПотребностиПоСкладам", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыРезерв.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыРезервДляРежимаОстатки.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыСтруктурнаяЕдиницаТабличнаяЧасть.Имя);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыСтруктурнаяЕдиницаОстатки.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Выберите заказ покупателя>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаИЛИ = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ГруппаИ = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИ, "Объект.Запасы.ЗаказПокупателя", Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИ, "Объект.Запасы.Резерв", 0, ВидСравненияКомпоновкиДанных.Больше);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаИЛИ, "Объект.УчетПотребностиПоСкладам", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СтруктурнаяЕдиница", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыСтруктурнаяЕдиницаТабличнаяЧасть.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	// Операции
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.ИсполнительБригада", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ОперацииИзменитьСостав");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.ИсполнительБригада", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПоложениеСтруктурнойЕдиницыОпераций", Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ОперацииСтруктурнаяЕдиница");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	// Этапы производства
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Продукция.ИспользоватьЭтапыПроизводства", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПродукцияПодразделениеЗавершающегоЭтапа");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Продукция.ИспользоватьЭтапыПроизводства", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Продукция.ПодразделениеЗавершающегоЭтапа", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПродукцияПодразделениеЗавершающегоЭтапа");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	// ПараметрическиеСпецификации
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Продукция.ЭтоШаблонСпецификации", Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПродукцияСпецификация");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.КрасныйТекстСтрок);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Продукция.ЕстьДопРеквизитыСпецификации", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПродукцияПараметрыСпецификации");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используются>'"));
	// Конец ПараметрическиеСпецификации
	
	//Ресурсы
	ПланированиеРесурсовУНФ.УстановитьУсловноеОформлениеРесурсы("РесурсыПредприятия", ЭтотОбъект, Истина);
	
	// Остатки и резервы

	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Обеспечено", 0, ВидСравненияКомпоновкиДанных.Больше);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОбеспечено");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветТекстаПредупреждениеОбОкончанииДоговора);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Обеспечено", 
		Новый ПолеКомпоновкиДанных("Объект.Запасы.НеОтгруженоВсего"), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОбеспечено");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Зеленый);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Обеспечено", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.НеОтгружено", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОбеспечено");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "0");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Красный);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ОстатокСвободно", 0, ВидСравненияКомпоновкиДанных.Меньше);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОстатокСвободно");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Красный);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПредставлениеНеОтгружено", "", ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыНеОтгружено");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", Новый ПолеКомпоновкиДанных("Объект.Запасы.ПредставлениеНеОтгружено"));
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.НеОтгруженоВсего", 
		Новый ПолеКомпоновкиДанных("Объект.Запасы.МожноОтгрузить"), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыМожноОтгрузить");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Зеленый);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.НеОтгруженоВсего", 
		Новый ПолеКомпоновкиДанных("Объект.Запасы.МожноОтгрузить"), ВидСравненияКомпоновкиДанных.Больше);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.МожноОтгрузить", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыМожноОтгрузить");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветТекстаПредупреждениеОбОкончанииДоговора);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Количество", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыМожноОтгрузить");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОбеспечено");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "0");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Красный);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПредставлениеДублей", "", ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "РежимОстаткиИРезервы", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыКоличество");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", Новый ПолеКомпоновкиДанных("Объект.Запасы.ПредставлениеДублей"));
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ИндексЦвета", 1, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыМожноОтгрузить");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветТекстаПредупреждениеОбОкончанииДоговора);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.МожноОтгрузить", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.НеОтгружено", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыМожноОтгрузить");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "0");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Красный);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Обеспечено", Новый ПолеКомпоновкиДанных("Объект.Запасы.МожноОтгрузить"), ВидСравненияКомпоновкиДанных.Больше);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОбеспечено");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыВРезерве");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыРазмещено");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветТекстаПредупреждениеОбОкончанииДоговора);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Обеспечено", Новый ПолеКомпоновкиДанных("Объект.Запасы.НеОтгружено"), ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОбеспечено");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Зеленый);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ТипНоменклатурыЗапас", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыМожноОтгрузить");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОбеспечено");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтметкуСтруктурнойЕдиницыРезерва() 
	
	УчетПотребностиПоСкладамДляПродукции = (Объект.УчетПотребностиПоСкладам 
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка"));
	УчетПотребностиПоСкладамДляЗапасов = (Объект.УчетПотребностиПоСкладам 
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Сборка"));
		
	ЕстьРезерв = (Объект.Продукция.Итог("Резерв") > 0);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияСтруктурнаяЕдиницаРезерв", 
		"АвтоОтметкаНезаполненного", ЕстьРезерв ИЛИ УчетПотребностиПоСкладамДляПродукции);
	Если НЕ ЕстьРезерв И НЕ УчетПотребностиПоСкладамДляПродукции Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияСтруктурнаяЕдиницаРезерв", 
			"ОтметкаНезаполненного", Ложь);
	КонецЕсли;
	
	ЕстьРезерв = (Объект.Запасы.Итог("Резерв") > 0);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиницаРезерв", 
		"АвтоОтметкаНезаполненного", ЕстьРезерв ИЛИ УчетПотребностиПоСкладамДляЗапасов);
	Если НЕ ЕстьРезерв И НЕ УчетПотребностиПоСкладамДляЗапасов Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиницаРезерв", 
			"ОтметкаНезаполненного", Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиницаПродукцииСборка", 
		"АвтоОтметкаНезаполненного", УчетПотребностиПоСкладамДляЗапасов);
	Если НЕ УчетПотребностиПоСкладамДляЗапасов Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиницаПродукцииСборка", 
			"ОтметкаНезаполненного", Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиницаПродукцииРазборка", 
		"АвтоОтметкаНезаполненного", УчетПотребностиПоСкладамДляПродукции);
	Если НЕ УчетПотребностиПоСкладамДляПродукции Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиницаПродукцииРазборка", 
			"ОтметкаНезаполненного", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик()
			
	НаименованиеПоляХарактеристика = "ОперацииХарактеристика";
	
	ЗначениеПоиска = ЭтаФорма.Элементы.Найти(НаименованиеПоляХарактеристика);
	
	Если НЕ ЗначениеПоиска = Неопределено
		Тогда
		ИмяПоляПроверятьЗаполнениеХарактеристики = "Объект.Операции.ПроверятьЗаполнениеХарактеристики";
		ИмяПоляИспользоватьХарактеристики = "Объект.Операции.ИспользоватьХарактеристики";
		ИмяПоляХарактеристики = НаименованиеПоляХарактеристика; 
		
		НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляИспользоватьХарактеристики, Ложь, ВидСравненияКомпоновкиДанных.Равно);

		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используется>'"));
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
		
		НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляПроверятьЗаполнениеХарактеристики, Истина, ВидСравненияКомпоновкиДанных.Равно);
		
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
		
		НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	КонецЕсли;
	НаименованиеПоляПартия= "ОперацииПартия";
	
	ЗначениеПоискаПартия = ЭтаФорма.Элементы.Найти(НаименованиеПоляПартия);
	
	Если НЕ ЗначениеПоискаПартия = Неопределено
		Тогда
		ИмяПоляПроверятьЗаполнениеПартии = "Объект.Операции.ПроверятьЗаполнениеПартий";
		ИмяПоляИспользоватьПартии = "Объект.Операции.ИспользоватьПартии";
		ИмяПоляПартии = НаименованиеПоляПартия;
		
		НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляИспользоватьПартии, Ложь, ВидСравненияКомпоновкиДанных.Равно);
		
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляПартии);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используется>'"));
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
		
		НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляПроверятьЗаполнениеПартии, Истина, ВидСравненияКомпоновкиДанных.Равно);
		
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляПартии);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
		
		НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.Партия", Справочники.ПартииНоменклатуры.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляПартии);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	КэшЗначений = Форма.КэшЗначений;
	
	ЭтоРазборка = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка"));
	ЗаказЗавершен = (Объект.СостояниеЗаказа=ПредопределенноеЗначение("Справочник.СостоянияЗаказовНаПроизводство.Завершен"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыДоляСтоимости", "Видимость", ЭтоРазборка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиницаПродукцииСборка", 
		"Видимость", НЕ ЭтоРазборка И Объект.УчетПотребностиПоСкладам);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиницаПродукцииРазборка", 
		"Видимость", ЭтоРазборка И Объект.УчетПотребностиПоСкладам);
	
	
	УстановитьВидимостьКолонокРезерв(Форма);
	
	// Заказ покупателя
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаказПокупателя", "ТолькоПросмотр", ЗначениеЗаполнено(Объект.ЗаказНаПроизводствоОснование));	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияЗаказПокупателя", "ТолькоПросмотр", ЗначениеЗаполнено(Объект.ЗаказНаПроизводствоОснование));	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЗаказПокупателя", "ТолькоПросмотр", ЗначениеЗаполнено(Объект.ЗаказНаПроизводствоОснование));	
	
	// Распределение
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РаспределениеЗапасов", "ТолькоПросмотр", Форма.ТолькоПросмотр);	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РучноеРаспределение", "ТолькоПросмотр", Форма.ТолькоПросмотр);	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧРаспределениеЗапасов", "Видимость", Объект.РучноеРаспределение);	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЗаполнитьПоРаспределению", "Видимость", Объект.РучноеРаспределение);	
	
	НовыйПараметрТипВладельца = Новый ПараметрВыбора("Дополнительно.ТипВладельца", "ЗаказНаПроизводство");
	
	// Параметры выбора
	Если ЭтоРазборка Тогда
		
		// Статус партии.
		ДоступныеСтатусы = Новый Массив;
		ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
		МассивЗапасРабота = Новый ФиксированныйМассив(ДоступныеСтатусы);
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Статус", МассивЗапасРабота));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", МассивЗапасРабота));
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПродукцияПартия.ПараметрыВыбора = НовыеПараметры;
		
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы")));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы")));
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
		Элементы.РаспределениеЗапасовПартия.ПараметрыВыбора = НовыеПараметры;
		
		ДоступныеСтатусы.Очистить();
		ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		СтатусыПартий = Новый ФиксированныйМассив(ДоступныеСтатусы);
		
		МассивПараметров = Новый Массив;
		Для каждого ЭлементМассива Из Элементы.ЗапасыНоменклатура.ПараметрыВыбора Цикл
			Если ЭлементМассива.Имя="Дополнительно.СтатусыПартий" Тогда 
				Продолжить;
			КонецЕсли;
			МассивПараметров.Добавить(ЭлементМассива);
		КонецЦикла;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Дополнительно.СтатусыПартий", СтатусыПартий));
		Элементы.ЗапасыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив;
		Для каждого ЭлементМассива Из Элементы.РаспределениеЗапасовНоменклатура.ПараметрыВыбора Цикл
			Если ЭлементМассива.Имя="Дополнительно.СтатусыПартий" Тогда 
				Продолжить;
			КонецЕсли;
			МассивПараметров.Добавить(ЭлементМассива);
		КонецЦикла;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Дополнительно.СтатусыПартий", СтатусыПартий));
		Элементы.РаспределениеЗапасовНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		Если НЕ Форма.ТолькоПросмотр Тогда
			Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
				Если СтрокаЗапасы.Резерв=0 Тогда
					Продолжить;
				КонецЕсли; 
				СтрокаЗапасы.Резерв = 0;
			КонецЦикла;
		КонецЕсли; 
		
		// Тип номенклатуры.
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ЭтоНабор", Ложь));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Дополнительно.СтатусыПартий", МассивЗапасРабота));
		НовыйМассив.Добавить(НовыйПараметрТипВладельца);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПродукцияНоменклатура.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		
		// Статус партии.
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы")));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы")));
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПродукцияПартия.ПараметрыВыбора = НовыеПараметры;
		
		ДоступныеСтатусы = Новый Массив;
		ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
		МассивЗапасРабота = Новый ФиксированныйМассив(ДоступныеСтатусы);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Статус", МассивЗапасРабота));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", МассивЗапасРабота));
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
		Элементы.РаспределениеЗапасовПартия.ПараметрыВыбора = НовыеПараметры;
		
		МассивПараметров = Новый Массив;
		Для каждого ЭлементМассива Из Элементы.ЗапасыНоменклатура.ПараметрыВыбора Цикл
			Если ЭлементМассива.Имя="Дополнительно.СтатусыПартий" Тогда 
				Продолжить;
			КонецЕсли;
			МассивПараметров.Добавить(ЭлементМассива);
		КонецЦикла;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Дополнительно.СтатусыПартий", МассивЗапасРабота));
		Элементы.ЗапасыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив;
		Для каждого ЭлементМассива Из Элементы.РаспределениеЗапасовНоменклатура.ПараметрыВыбора Цикл
			Если ЭлементМассива.Имя="Дополнительно.СтатусыПартий" Тогда 
				Продолжить;
			КонецЕсли;
			МассивПараметров.Добавить(ЭлементМассива);
		КонецЦикла;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Дополнительно.СтатусыПартий", МассивЗапасРабота));
		Элементы.РаспределениеЗапасовНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		Если НЕ Форма.ТолькоПросмотр Тогда
			Для каждого СтрокаПродукция Из Объект.Продукция Цикл
				Если СтрокаПродукция.Резерв=0 Тогда
					Продолжить;
				КонецЕсли; 
				СтрокаПродукция.Резерв = 0;
			КонецЦикла;
		КонецЕсли;
		
		ДоступныеСтатусы.Очистить();
		ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		СтатусыПартий = Новый ФиксированныйМассив(ДоступныеСтатусы);
		
		// Тип номенклатуры.
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивЗапасРабота = Новый ФиксированныйМассив(НовыйМассив);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивЗапасРабота));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ЭтоНабор", Ложь));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Дополнительно.ОграничениеТипа", МассивЗапасРабота));
		МассивСтатусыПартий = Новый ФиксированныйМассив(ДоступныеСтатусы);
		НовыйМассив.Добавить(Новый ПараметрВыбора("Дополнительно.СтатусыПартий", МассивСтатусыПартий));
		НовыйМассив.Добавить(НовыйПараметрТипВладельца);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПродукцияНоменклатура.ПараметрыВыбора = НовыеПараметры;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаЗавершениеЗаказа", "Видимость",
		ЗаказЗавершен);	
	
	// Операции
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧОперации", "Видимость",
		КэшЗначений.ИспользоватьТехоперации);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧСоставБригады", "Видимость",
		КэшЗначений.ИспользоватьТехоперации И ОтображатьЗакладкуБригады(Объект));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьСоставБригады", "Видимость",
		КэшЗначений.ИспользоватьТехоперации И ОтображатьЗакладкуБригады(Объект));
	ОбновитьАвтоОтметкиПриИзмененииОпераций(Форма);
	
	// Этапы
	УправлениеВидимостьюЭтапов(Форма);
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(Форма, "ЗаказНаПроизводство",
		Форма.НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(Форма, "Запасы");
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(Форма, "ЗаказНаПроизводство",
		Форма.НастройкиФормыВыбораНоменклатуры, , "Продукция");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(Форма, "Продукция");
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаСервере
Процедура УстановитьВидимостьЭлементовДляМобильногоКлиента()
	
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	ЭтоМобильныйКлиент = Истина;
	РаботаСОтборами.НастроитьПанельОтборовМобильныйКлиент(ЭтотОбъект,,,,,Истина);
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОтПользовательскихНастроек(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ЭтоРазборка = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка"));
	ЭтоСборка = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Сборка"));
	
	ЗаказПокупателяЗаполнен = ЗаказПокупателяЗаполнен(Объект);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыИзменитьРезервЗаполнитьПоОстаткамБезРазбиения", 
		"Видимость", Форма.РезервированиеЗапасов);
	
	// Склад
	Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияСтруктурнаяЕдиницаРезерв", 
			"Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиницаРезерв", 
			"Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияСтруктурнаяЕдиницаТабличнаяЧасть", 
			"Видимость", ЭтоРазборка И (ЗаказПокупателяЗаполнен ИЛИ Объект.УчетПотребностиПоСкладам));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиницаТабличнаяЧасть", 
			"Видимость", ЭтоСборка И (ЗаказПокупателяЗаполнен ИЛИ Объект.УчетПотребностиПоСкладам));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РаспределениеЗапасовСтруктурнаяЕдиница", 
			"Видимость", ЭтоСборка И (ЗаказПокупателяЗаполнен ИЛИ Объект.УчетПотребностиПоСкладам));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЗаполнитьПоВсемСкладам", "Видимость", Истина);
		Форма.СкладВШапке = Ложь;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияСтруктурнаяЕдиницаРезерв", 
			"Видимость", ЭтоРазборка И (ЗаказПокупателяЗаполнен ИЛИ Объект.УчетПотребностиПоСкладам));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиницаРезерв", 
			"Видимость", ЭтоСборка И (ЗаказПокупателяЗаполнен ИЛИ Объект.УчетПотребностиПоСкладам));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияСтруктурнаяЕдиницаТабличнаяЧасть", 
			"Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиницаТабличнаяЧасть", 
			"Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РаспределениеЗапасовСтруктурнаяЕдиница", 
			"Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЗаполнитьПоВсемСкладам", 
			"Видимость", Форма.РежимОстаткиИРезервы);
		Форма.СкладВШапке = Истина;
	КонецЕсли;
	
	// Заказ покупателя
	ЗаказВТабличнойЧасти = (Объект.ПоложениеЗаказаПокупателя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияЗаказПокупателя", 
		"Видимость", ЗаказВТабличнойЧасти);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЗаказПокупателя", 
		"Видимость", ЗаказВТабличнойЧасти);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РаспределениеЗапасовЗаказПокупателя", 
		"Видимость", ЗаказВТабличнойЧасти);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииЗаказПокупателя", 
		"Видимость", ЗаказВТабличнойЧасти);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЗаказПокупателя", 
		"Видимость", НЕ ЗаказВТабличнойЧасти);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияДобавитьИзЗаказов", 
		"Видимость", ЭтоСборка И ЗаказВТабличнойЧасти);
	УстановитьВидимостьКолонокРезерв(Форма);
	
	// Исполнитель
	Если Объект.ПоложениеИсполнителя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИсполнитель", 
			"Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсполнительТНСостав", 	
			"Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧСоставБригады", 
			"Видимость", ОтображатьЗакладкуБригады(Объект));
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИсполнитель", 
			"Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсполнительТНСостав", 
			"Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧСоставБригады", 
			"Видимость", ОтображатьЗакладкуБригады(Объект));
	КонецЕсли;
	
	// Подразделение выполнения операций
	Если Объект.ПоложениеСтруктурнойЕдиницыОпераций = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиницаОпераций", 
			"Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииСтруктурнаяЕдиница", 
			"Видимость", НЕ ОтображатьЗакладкуБригады(Объект));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоставБригадыСтруктурнаяЕдиница", 
			"Видимость", ОтображатьЗакладкуБригады(Объект));
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиницаОпераций", 
			"Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииСтруктурнаяЕдиница", 
			"Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоставБригадыСтруктурнаяЕдиница", 
			"Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьОтПользовательскихНастроек()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКолонокРезерв(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ЭтоРазборка = (Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка"));
	ЗаказПокупателяЗаполнен = ЗаказПокупателяЗаполнен(Объект);
	
	// Резерв
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияРезерв", "Видимость", ЗаказПокупателяЗаполнен И ЭтоРазборка);	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыРезерв", "Видимость", ЗаказПокупателяЗаполнен И НЕ ЭтоРазборка);	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыИзменитьРезерв", "Видимость", ЗаказПокупателяЗаполнен И НЕ ЭтоРазборка);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОтображатьЗакладкуБригады(Объект)
	
	Возврат ЗначениеЗаполнено(Объект.Исполнитель) 
		И ТипЗнч(Объект.Исполнитель)=Тип("СправочникСсылка.Бригады") 
		И Объект.ПоложениеИсполнителя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке");
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюЭтапов(Форма)
	
	Элементы = Форма.Элементы;
	
	ЕстьЭтапы = ПроизводствоСЭтапами(Форма);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЭтап", "Видимость", 								ЕстьЭтапы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РаспределениеЗапасовЭтап", "Видимость", 				ЕстьЭтапы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииЭтап", "Видимость", 							ЕстьЭтапы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияПодразделениеЗавершающегоЭтапа", "Видимость", 	ЕстьЭтапы);
	
КонецПроцедуры

#КонецОбласти 

#Область Операции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеДанныеОперации(Объект)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
		ЗаполнитьСлужебныеДанныеВСтрокеОпераций(Объект, СтрокаТабличнойЧасти);
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеДанныеВСтрокеОпераций(Объект, СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.ИсполнительБригада = (ТипЗнч(СтрокаТабличнойЧасти.Исполнитель)=Тип("СправочникСсылка.Бригады"));
	Если СтрокаТабличнойЧасти.ИсполнительБригада Тогда
		СтрокаТабличнойЧасти.ИзменитьСостав = НСтр("ru = 'Изменить состав и КТУ'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КлючСвязиПродукция) Тогда
		СтрокаПродукции = СтрокаПоКлючу(Объект.Продукция, СтрокаТабличнойЧасти.КлючСвязиПродукция);
		ЗаполнитьДанныеПродукцииВСтрокеОперации(Объект, СтрокаТабличнойЧасти, СтрокаПродукции);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеПродукцииВСтрокеОперации(Объект, СтрокаОперации, СтрокаПродукции)
	
	Если СтрокаПродукции=Неопределено Тогда
		СтруктураИзменяемыхПолей = Новый Структура;
		СтруктураИзменяемыхПолей.Вставить("КлючСвязиПродукция", 0);
		СтруктураИзменяемыхПолей.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		СтруктураИзменяемыхПолей.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		СтруктураИзменяемыхПолей.Вставить("Партия", ПредопределенноеЗначение("Справочник.ПартииНоменклатуры.ПустаяСсылка"));
		СтруктураИзменяемыхПолей.Вставить("Спецификация", ПредопределенноеЗначение("Справочник.Спецификации.ПустаяСсылка"));
	Иначе
		СтруктураИзменяемыхПолей = Новый Структура("Номенклатура, Характеристика, Партия, Спецификация, КлючСвязиПродукция");
		ЗаполнитьЗначенияСвойств(СтруктураИзменяемыхПолей, СтрокаПродукции);
		СтруктураИзменяемыхПолей.КлючСвязиПродукция = СтрокаПродукции.КлючСвязи;
	КонецЕсли;
	
	Если Объект.ПоложениеЗаказаПокупателя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Если СтрокаПродукции=Неопределено Тогда
			СтруктураИзменяемыхПолей.Вставить("ЗаказПокупателя", ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка"));
		Иначе
			СтруктураИзменяемыхПолей.Вставить("ЗаказПокупателя", СтрокаПродукции.ЗаказПокупателя);
		КонецЕсли; 
	Иначе
		СтруктураИзменяемыхПолей.Вставить("ЗаказПокупателя", Объект.ЗаказПокупателя);
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СтруктураИзменяемыхПолей Цикл
		Если СтрокаОперации[КлючИЗначение.Ключ]=КлючИЗначение.Значение Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаОперации[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьАвтоОтметкиПриИзмененииОпераций(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ОперацииЗаполнены = (Объект.Операции.Количество()>0);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Исполнитель", "ТолькоПросмотр", НЕ ОперацииЗаполнены);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиницаОпераций", "ТолькоПросмотр", НЕ ОперацииЗаполнены);
	
	Если НЕ Форма.ТолькоПросмотр И Объект.Исполнитель=Неопределено Тогда
		Объект.Исполнитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ЭтапыПроизводства

&НаКлиентеНаСервереБезКонтекста
Функция ПроизводствоСЭтапами(Форма)
	
	Объект = Форма.Объект;
	КэшЗначений = Форма.КэшЗначений;
	
	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка") Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Форма.ТипСтруктурнойЕдиницы<>ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ КэшЗначений.ИспользоватьЭтапыПроизводства Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ЕстьЭтапы = Ложь;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		Если СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства Тогда
			ЕстьЭтапы = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ЕстьЭтапы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтапыПроизводства(Спецификации)
	
	Возврат ПроизводствоСервер.ЭтапыПроизводстваСпецификаций(Спецификации);	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеПустогоЭтапа(Список)
	
	Если Список.Количество()>0 И НЕ ЗначениеЗаполнено(Список[0].Значение) Тогда
		Список[0].Представление = НСтр("ru = '<Без этапов>'");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияЭтапов()
	
	Если НЕ КэшЗначений.ИспользоватьЭтапыПроизводства Тогда
		Возврат;
	КонецЕсли;
	
	МассивСпецификаций = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства = Ложь;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) И МассивСпецификаций.Найти(СтрокаТабличнойЧасти.Спецификация)=Неопределено Тогда
			МассивСпецификаций.Добавить(СтрокаТабличнойЧасти.Спецификация);
		КонецЕсли; 
	КонецЦикла;
	
	Если МассивСпецификаций.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СпецификацииСПоэтапнымПроизводством = ПроизводствоСервер.СпецификацииСПоэтапнымПроизводством(МассивСпецификаций);
	Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства = (СпецификацииСПоэтапнымПроизводством.Найти(СтрокаТабличнойЧасти.Спецификация)<>Неопределено);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ОстаткиИРезервы

&НаКлиенте
Процедура ОстаткиИРезервы(Команда)
	
	РежимОстаткиИРезервы = Не РежимОстаткиИРезервы;
	Элементы.ОстаткиИРезервы.Пометка = Не Элементы.ОстаткиИРезервы.Пометка;
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	
	Если РежимОстаткиИРезервы Тогда
		
		Если СкладВШапке Тогда
			Для каждого Строка Из Объект.Запасы Цикл
				Строка.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв;
			КонецЦикла;
		КонецЕсли;
		
		Элементы.Запасы.ВысотаШапки = 2;
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	Иначе
		Элементы.Запасы.ВысотаШапки = 1;
		ПроверитьПоложениеСклада();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтборПоДублямОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтрок.Пометка = Ложь;
	Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
	
	Если Элементы.Запасы.ОтборСтрок <> Неопределено Тогда
		Элементы.Запасы.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРазбитьСтроку(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в текущей строке равно нулю.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("СтрокаТабличнойЧасти", СтрокаТабличнойЧасти);
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТабличнойЧастиЗавершение", ЭтаФорма, ПараметрыОповещения);
	
	ПоказатьВводЧисла(Оповещение, СтрокаТабличнойЧасти.Количество, "Введите количество в новой строке", 15, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТабличнойЧастиЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	СтрокаТабличнойЧасти = Параметры.СтрокаТабличнойЧасти;
	ИмяТЧ = "Запасы";
	
	Если Результат <= 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в новой строке должно быть больше нуля.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	Если Результат >= СтрокаТабличнойЧасти.Количество Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в новой строке должно быть меньше чем в текущей.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;

	НоваяСтрока = Объект[ИмяТЧ].Вставить(СтрокаТабличнойЧасти.НомерСтроки);
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);

	НоваяСтрока.Резерв = 0;
	
	СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество - Результат;
	НоваяСтрока.Количество = Результат;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(,СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;
	
	Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДублиСтрок(Команда)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если Не Элементы.ДекорацияОтборПоДублям.Видимость Тогда
		
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, Партия, ЗаказПокупателя"
		, СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрокаТабличнойЧасти.Партия, СтрокаТабличнойЧасти.ЗаказПокупателя);
		
		НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() <=1 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Дубли строки не найдены.'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			Возврат
		КонецЕсли;
		
		Если Элементы.Запасы.ОтборСтрок <> Неопределено Тогда
			Элементы.Запасы.ОтборСтрок = Неопределено;
		КонецЕсли;
		
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("Номенклатура, Характеристика, Партия, ЗаказПокупателя"
		, СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрокаТабличнойЧасти.Партия, СтрокаТабличнойЧасти.ЗаказПокупателя);
		
		Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтрок.Пометка = Истина;
		
		Элементы.ДекорацияОтборПоДублям.Заголовок = ИнформацияОбОтборе(СтрокаТабличнойЧасти.НомерСтроки);
		Элементы.ДекорацияОтборПоДублям.Видимость = Истина;
		
		Элементы.Запасы.ОтборСтрок = ПараметрыОтбора;
		
	Иначе
		Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтрок.Пометка = Ложь;
		Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПоложениеСклада()
	
	Если СкладВШапке И РазрешитьСкладыВТабличныхЧастях Тогда
		
		ЗначениеСклада = Объект.СтруктурнаяЕдиницаРезерв;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если НЕ СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ЗначениеСклада Тогда
				Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
				УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
				Возврат;
			КонецЕсли;
			
			ЗначениеСклада = СтрокаТабличнойЧасти.СтруктурнаяЕдиница;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПоложениеСкладаПриПроведении(ТекущийОбъект)
	
	Если ТекущийОбъект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") И РазрешитьСкладыВТабличныхЧастях Тогда
		
		ЗначениеСклада = ТекущийОбъект.СтруктурнаяЕдиницаРезерв;
		
		Для Каждого СтрокаТабличнойЧасти Из ТекущийОбъект.Запасы Цикл
			
			Если НЕ СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ЗначениеСклада Тогда
				ТекущийОбъект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
				Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.Видимость = Ложь;
				Возврат;
			КонецЕсли;
			
			ЗначениеСклада = СтрокаТабличнойЧасти.СтруктурнаяЕдиница;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКолонокВРазрезеЗапасов()
	
	ЭтоРазборка = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка"));
	
	Если РежимОстаткиИРезервы Тогда
		
		Элементы.ЗапасыОстатки.Видимость = Истина;
		Элементы.ЗапасыГруппаКПоступлению.Видимость = Истина;
		Элементы.ЗапасыОстатокОбщий.Видимость = Истина;
		
		Элементы.ЗапасыНеОтгружено.Видимость = Объект.Проведен;
		
		Элементы.ЗапасыСтруктурнаяЕдиницаОстатки.Видимость = РазрешитьСкладыВТабличныхЧастях И НЕ ЭтоРазборка;
		
		Если РезервированиеЗапасов Тогда
			Элементы.ЗапасыОбеспечение.Видимость = Объект.Проведен;
		Иначе
			Элементы.ЗапасыОбеспечение.Видимость = Ложь;
			
			Элементы.ЗапасыОбеспечено.Видимость = Ложь;
			Элементы.ЗапасыСтруктурнаяЕдиницаОстатки.Видимость = Ложь;
			Элементы.ЗапасыОстатокСвободно.Видимость = Ложь;
			Элементы.ЗапасыРезервДляРежимаОстатки.Видимость = Ложь;
			
		КонецЕсли;
		
		Элементы.ЗапасыСтруктурнаяЕдиницаТабличнаяЧасть.Видимость = Ложь;
		Элементы.ЗапасыРезерв.Видимость = Ложь;
		Элементы.ЗапасыКонтекстноеМенюГруппаРаботаССтрокамиОбновить.Видимость = Истина;
		
	Иначе
		
		Элементы.ЗапасыОстатки.Видимость = Ложь;
		Элементы.ЗапасыГруппаКПоступлению.Видимость = Ложь;
		Элементы.ЗапасыОстатокОбщий.Видимость = Ложь;
		Элементы.ЗапасыНеОтгружено.Видимость = Ложь;
		
		Элементы.ЗапасыОбеспечение.Видимость = Ложь;
		
		Если Объект.ПоложениеЗаказаПокупателя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке")
			И Не ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
			Элементы.ЗапасыРезерв.Видимость = Ложь;
		Иначе
			Элементы.ЗапасыРезерв.Видимость = РезервированиеЗапасов;
		КонецЕсли;
		
		Элементы.ЗапасыСтруктурнаяЕдиницаТабличнаяЧасть.Видимость = НЕ СкладВШапке И НЕ ЭтоРазборка 
			И (РезервированиеЗапасов ИЛИ Объект.УчетПотребностиПоСкладам);
		Элементы.ЗапасыКонтекстноеМенюГруппаРаботаССтрокамиОбновить.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.ГруппаЗаполнитьПоВсемСкладам.Видимость = Не СкладВШапке Или РежимОстаткиИРезервы;
	Элементы.ЗапасыИзменитьРезервЗаполнитьПоОстаткам.Видимость = РазрешитьСкладыВТабличныхЧастях;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если Параметры.ВыбранноеПоле = "ЗапасыВРезерве" И Результат.Значение = Объект.Ссылка Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ЗапасыРезервДляРежимаОстатки;
		Возврат;
	КонецЕсли;
	
	Если Параметры.ВыбранноеПоле = "ЗапасыОстатокОбщий" Тогда
		
		Если Результат.Значение = "ОтчетОстаткиНаСкладах" Тогда
			
			Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда Возврат КонецЕсли;
			
			Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "ПоМестамХранения");
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
			ОтборРасшифровки = Новый Соответствие;
			ОтборРасшифровки.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
			ОтборРасшифровки.Вставить("Характеристика", ТекущиеДанные.Характеристика);
			ОтборРасшифровки.Вставить("СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
			ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
			
			ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия);
			
		КонецЕсли;
		
		Если Не РезервированиеЗапасов Или Не РазрешитьСкладыВТабличныхЧастях Тогда 
			Если Объект.УчетПотребностиПоСкладам И ТипЗнч(Результат.Значение) = Тип("Структура") 
				И Результат.Значение.Свойство("Склад") 
				И ТекущиеДанные.СтруктурнаяЕдиницаРезерв <> Результат.Значение.Склад Тогда
				ТекущиеДанные.СтруктурнаяЕдиницаРезерв = Результат.Значение.Склад;
			КонецЕсли;
			Возврат 
		КонецЕсли;
		
		Если Результат.Значение = "РаспределитьПоРезервам" Тогда

			СтруктураОтбораНоменклатуры = Новый Структура("Номенклатура, Характеристика, Партия"
			, ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, ТекущиеДанные.Партия, 0);
			
			ЗаполнитьКолонкуРезервПоОстаткамНаСервере(СтруктураОтбораНоменклатуры);
			
			ЭтаФорма.Модифицированность = Истина;
		
		Иначе
			
			Если ТипЗнч(Результат.Значение) = Тип("Структура") И Результат.Значение.Свойство("Склад") 
				И Не ТекущиеДанные.СтруктурнаяЕдиница = Результат.Значение.Склад Тогда
				
				Если Не Объект.Проведен И ТекущиеДанные.Количество > ТекущиеДанные.МожноОтгрузить
										И Результат.Значение.Количество < ТекущиеДанные.МожноОтгрузить Тогда
					
					НоваяСтрока = Объект.Запасы.Вставить(ТекущиеДанные.НомерСтроки);
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущиеДанные);
					
					НоваяСтрока.СтруктурнаяЕдиница = Результат.Значение.Склад;
					
					Заказ = ?(ЗначениеЗаполнено(ТекущиеДанные.Заказ), ТекущиеДанные.Заказ, Объект.ЗаказПокупателя);
					
					СтруктураОстатков = СвободныйОстатокПоСтруктурнойЕдинице(НоваяСтрока.СтруктурнаяЕдиница, НоваяСтрока.Номенклатура
					, НоваяСтрока.Характеристика, НоваяСтрока.Партия, НоваяСтрока.ЕдиницаИзмерения, Заказ);
					
					НоваяСтрока.Количество = ТекущиеДанные.Количество - ТекущиеДанные.МожноОтгрузить;
					
					ТекущиеДанные.Количество =  ТекущиеДанные.МожноОтгрузить;
					
					НоваяСтрока.Резерв = ?(СтруктураОстатков.КоличествоСвободно >= НоваяСтрока.Количество, НоваяСтрока.Количество, СтруктураОстатков.КоличествоСвободно);
					

					ОбрабатываемаяСтрока = НоваяСтрока;
					
					
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					
				Иначе
					
					ТекущиеДанные.СтруктурнаяЕдиница = Результат.Значение.Склад;
					ОбрабатываемаяСтрока = ТекущиеДанные;
					
				КонецЕсли;
				
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Организация",Компания);
				СтруктураДанные.Вставить("Номенклатура",ОбрабатываемаяСтрока.Номенклатура);
				СтруктураДанные.Вставить("Характеристика",ОбрабатываемаяСтрока.Характеристика);
				СтруктураДанные.Вставить("Партия",ОбрабатываемаяСтрока.Партия);
				СтруктураДанные.Вставить("ИспользоватьХарактеристики",ОбрабатываемаяСтрока.ИспользоватьХарактеристики);
				СтруктураДанные.Вставить("ИспользоватьПартии", ОбрабатываемаяСтрока.ИспользоватьПартии);
				
				ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
				
			КонецЕсли;
			
		КонецЕсли;

		
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗначение(,Результат.Значение);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОбновить(Команда)
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРезервЗаполнитьПоОстаткамБезРазбиения(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Запасы"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКолонкуРезервПоОстаткамНаСервереБезРазбиения();
	
	ОбновитьОтметкуСтруктурнойЕдиницыРезерва();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКолонкуРезервПоОстаткамНаСервереБезРазбиения()
	
	ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьКолонкуРезервПоОстаткам(Объект.Запасы);
	
	ОбновитьКэшиДанныхСервер();
	ЗаполнитьСлужебныеДанныеПослеЧтенияОбъекта(Объект);
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	
	Если Объект.РучноеРаспределение Тогда
		ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоОстаткамНаСервере()

&НаСервере
Функция ИнформацияОбОтборе(НомерСтроки)
	ТекстСообщения = НСтр("ru = 'Дубли строки '");
	Возврат НоменклатураВДокументахСервер.ИнформацияОбОтборе(ТекстСообщения + Строка(НомерСтроки));
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияРезервовИОстатокНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные = Неопределено, НоменклатураОтбора = Неопределено)
	
	НоменклатураВДокументахСервер.ЗаполнитьЗначенияРезервовИОстатокЗаказНаПроизводство(Объект, СтруктураДанные, 0, НоменклатураОтбора, РезервированиеЗапасов)
	
КонецПроцедуры

&НаСервере
Функция СвободныйОстатокПоСтруктурнойЕдинице(СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, ЕдиницаИзмерения, Заказ)
	
	Коэффициент = ?(ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), ЕдиницаИзмерения.Коэффициент, 1);
	
	Организация = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Партия", Партия);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ЗапасыОстаткиСвободные.КоличествоОстаток) КАК КоличествоСвободно,
	|	СУММА(ЗапасыОстаткиРезерв.КоличествоОстаток) КАК КоличествоРезерв
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				И Организация = &Организация
	|				И Характеристика = &Характеристика
	|				И Партия = &Партия
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстаткиСвободные,
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И ЗаказПокупателя = &Заказ
	|				И Организация = &Организация
	|				И Характеристика = &Характеристика
	|				И Партия = &Партия
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстаткиРезерв
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоСвободно УБЫВ";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СтруктураВозврата = Новый Структура("КоличествоСвободно, КоличествоРезерв");
	
	Пока Результат.Следующий() Цикл
		СтруктураВозврата.КоличествоСвободно = Результат.КоличествоСвободно/Коэффициент;
		СтруктураВозврата.КоличествоРезерв = ?(ЗначениеЗаполнено(Объект.Ссылка), Результат.КоличествоРезерв/Коэффициент, 0);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция СписокДокументовПоЗаказу(ТипОперации, СтруктураПараметров)
	Возврат НоменклатураВДокументахСервер.СписокДокументовПоЗаказу(Объект, ТипОперации,СтруктураПараметров,,,"ЗаказНаПроизводство");
КонецФункции


#КонецОбласти 

#Область ПараметрическиеСпецификации

&НаСервереБезКонтекста
Процедура ОбновитьПризнакиПараметрическихСпецификаций(Продукция)

	ПроизводствоСервер.ОбновитьПризнакиПараметрическихСпецификаций(Продукция); 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьКолонкиПараметровСпецификации(Форма)
	
	Продукция = Форма.Объект.Продукция;
	Элементы = Форма.Элементы;
	КэшЗначений = Форма.КэшЗначений;
	
	Если НЕ КэшЗначений.ИспользоватьПараметрическиеСпецификации
		ИЛИ НЕ КэшЗначений.ИспользоватьДополнительныеРеквизитыИСведения  Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияПараметрыСпецификации", "Видимость", Ложь); 
		Возврат;
	КонецЕсли; 
	
	ВидимостьКолонки = Ложь;
	Для каждого СтрокаТабличнойЧасти Из Продукция Цикл
		Если СтрокаТабличнойЧасти.ЭтоШаблонСпецификации И СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации Тогда
			ВидимостьКолонки = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияПараметрыСпецификации", "Видимость", ВидимостьКолонки); 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОписанияДопРеквизитов(Форма, КлючСвязи = Неопределено)
	
	Продукция = Форма.Объект.Продукция;
	Реквизиты = Форма.Объект.РеквизитыПараметрическихСпецификаций;
	КэшЗначений = Форма.КэшЗначений;
	
	Если НЕ КэшЗначений.ИспользоватьПараметрическиеСпецификации
		ИЛИ НЕ КэшЗначений.ИспользоватьДополнительныеРеквизитыИСведения  Тогда
		Для каждого СтрокаТабличнойЧасти Из Продукция Цикл
			СтрокаТабличнойЧасти.ПараметрыСпецификации = "";
		КонецЦикла; 
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаТабличнойЧасти Из Продукция Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) 
			ИЛИ НЕ СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации Тогда
			Продолжить;
		КонецЕсли;
		Если КлючСвязи<>Неопределено И СтрокаТабличнойЧасти.КлючСвязи<>КлючСвязи Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		СтрокиРеквизитов = Реквизиты.НайтиСтроки(СтруктураОтбора);
		ЭлементыОписания = Новый Массив;
		Для каждого СтрокаРеквизита Из СтрокиРеквизитов Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаРеквизита.Значение) Тогда
				Продолжить;
			КонецЕсли;
			ИмяСвойства = Строка(СтрокаРеквизита.Свойство);
			Позиция = СтрНайти(ИмяСвойства, "(");
			Если Позиция>0 Тогда
				ИмяСвойства = Лев(ИмяСвойства, Позиция - 2);
			КонецЕсли;
			Если ТипЗнч(СтрокаРеквизита.Значение)=Тип("Число") Тогда
				ПредставлениеЗначения = Формат(СтрокаРеквизита.Значение, "ЧРД=.; ЧН=0; ЧГ=0");
			Иначе
				ПредставлениеЗначения = Строка(СтрокаРеквизита.Значение);
			КонецЕсли; 
			ЭлементыОписания.Добавить(ИмяСвойства + ": " + ПредставлениеЗначения);
		КонецЦикла;
		СтрокаТабличнойЧасти.ПараметрыСпецификации = СтрСоединить(ЭлементыОписания, "; ");
	КонецЦикла; 
 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДопРеквизитыПоУмолчанию(Идентификатор)
	
	СтрокаТабличнойЧасти = Объект.Продукция.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаТабличнойЧасти=Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация)
		ИЛИ НЕ СтрокаТабличнойЧасти.ЕстьДопРеквизитыСпецификации Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.КлючСвязи=0 Тогда
		ИмяТабличнойЧасти = "Продукция";
		СтрокаТабличнойЧасти.КлючСвязи = ТабличныеЧастиУНФКлиентСервер.СоздатьНовыйКлючСвязи(ЭтотОбъект);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификация", СтрокаТабличнойЧасти.Спецификация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииДополнительныеРеквизиты.Свойство КАК Свойство,
	|	СпецификацииДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.Спецификации.ДополнительныеРеквизиты КАК СпецификацииДополнительныеРеквизиты
	|ГДЕ
	|	СпецификацииДополнительныеРеквизиты.Ссылка = &Спецификация";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Продолжить;
		КонецЕсли; 
		НоваяСтрока = Объект.РеквизитыПараметрическихСпецификаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьПараметрическиеСпецификации(Спецификации)
	
	Возврат ПроизводствоФормулыСервер.ВыбратьПараметрические(Спецификации);
	
КонецФункции

#КонецОбласти 

#Область СлужебныеОбработчики

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если НЕ Прогресс = Неопределено Тогда
		ОбработатьПодготовленныеДанные(Прогресс.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров = Неопределено)
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПослеВыполненияФоновогоЗадания(ДлительнаяОперация, СтруктураПараметров);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗадания", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
