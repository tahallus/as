
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
// @skip-warning
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ЗаказПокупателя.Контрагент, NULL КАК ИСТИНА)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#Область ЗагрузкаДанныхИзВнешнегоИсточника

// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
//
// Параметры:
//   ТаблицаПолейЗагрузки - таблица значений, которая будет наполнена колонками
//   НастройкиЗагрузкиДанных - структура настроек загрузки
//
Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	ОписаниеТиповСтрока11 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(11));
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока30 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(30));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока110 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(110));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2,
		ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3,
		ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ЭтоЗапасы = (ПолноеИмяОбъектаЗаполнения = "Документ.ЗаказНаПроизводство.ТабличнаяЧасть.Запасы");
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ОбязательноеЗаполнениеГруппыНоменклатуры = Не ПолучитьФункциональнуюОпцию("УчетНоменклатурыПоставщиков");
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
		ТаблицаПолейЗагрузки, "Штрихкод",
		НСтр("ru = 'Штрихкод'"), ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура",
		1, , ОбязательноеЗаполнениеГруппыНоменклатуры, ЭтоЗапасы);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
		ТаблицаПолейЗагрузки, "Артикул",
		НСтр("ru = 'Артикул'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура",
		2, , ОбязательноеЗаполнениеГруппыНоменклатуры);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
		ТаблицаПолейЗагрузки, "НоменклатураНаименование",
		НСтр("ru = 'Номенклатура (наименование)'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура",
		3, , ОбязательноеЗаполнениеГруппыНоменклатуры);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
		ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное",
		НСтр("ru = 'Номенклатура (полное наименование)'"), ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура",
		5, , ОбязательноеЗаполнениеГруппыНоменклатуры);
		
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительКод",
		НСтр("ru = 'Код'", ОбщегоНазначения.КодОсновногоЯзыка()), 			ОписаниеТиповСтрока11, ОписаниеТиповКолонка, "Родитель", 1);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительНаименование", 
		НСтр("ru = 'Группа (наименование)'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Родитель", 2);	

	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
			ТаблицаПолейЗагрузки, "ХарактеристикаНаименование", 
			НСтр("ru = 'Характеристика (наименование)'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ОписаниеТиповСтрока150, ОписаниеТиповКолонка, "Характеристика", 1);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
			ТаблицаПолейЗагрузки, "ХарактеристикаАртикул", 
			НСтр("ru = 'Характеристика (артикул)'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Характеристика", 2);
		
	КонецЕсли;
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаДоходов", 
		НСтр("ru = 'Счет учета доходов'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗапасов", 
		НСтр("ru = 'Счет учета запасов'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗатрат", 
		НСтр("ru = 'Счет учета затрат'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НаправлениеДеятельности",
		НСтр("ru = 'Направление деятельности'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.МетодОценкиЗапасов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "МетодОценки",
		НСтр("ru = 'Способ списания'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПополненияЗапасов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СпособПополнения",
		НСтр("ru = 'Способ пополнения'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Картинка", 
		НСтр("ru = 'Картинка'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000,,,,,Ложь);
		
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЭтоУслуга", 
		НСтр("ru = 'Это услуга'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповБулево, ОписаниеТиповБулево,,,,,);

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "КатегорияНоменклатуры", 
		НСтр("ru = 'Категория номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);   

	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Партия",
			НСтр("ru = 'Партия (наименование)'"), ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", НСтр("ru = 'Количество'"),
		ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , Истина);

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения",
		НСтр("ru = 'Ед. изм.'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, , , , ,
		ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтавкаНДС",
		НСтр("ru = 'Ставка НДС'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка);

	Если НастройкиЗагрузкиДанных.Свойство("ВидОперации") Тогда		
		Если НастройкиЗагрузкиДанных.ВидОперации = Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка Тогда    				
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДоляСтоимости", НСтр("ru = 'ДоляСтоимости'"),
				ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Ложь); 			
		Иначе         			
			Если НастройкиЗагрузкиДанных.ЗаказЗаполнен Тогда
				ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Резерв", НСтр("ru = 'Резерв'"),
					ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Ложь);
			КонецЕсли;    			
		КонецЕсли;
	КонецЕсли;    	
		
	ВидимостьЗаказа = (ЭтоЗапасы
						И НастройкиЗагрузкиДанных.Свойство("ПоложениеЗаказаПокупателя")
						И НастройкиЗагрузкиДанных.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));	
	ОписаниеТиповКолонка = Новый ОписаниеТипов(МассивТипов);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЗаказПокупателя",
		НСтр("ru = 'Заказ (покупатель)'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка, , , , , ВидимостьЗаказа);
	
	ВидимостьСклада = (ЭтоЗапасы
					   И ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам")
					   И НастройкиЗагрузкиДанных.Свойство("ПоложениеСклада")
					   И НастройкиЗагрузкиДанных.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтруктурнаяЕдиница",
		НСтр("ru = 'Склад'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка, , , , , ВидимостьСклада);
	
КонецПроцедуры

// Добавляет в структуру НастройкиЗагрузкиДанных адреса макетов-образцов загрузки данных
//
// Параметры:
//   НастройкиЗагрузкиДанных - структура настроек загрузки
//   УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

// АПК:299-выкл процедура вызывается программно в форме ПомощникЗагрузкиДанныхИзВнешнегоИсточника обработки ЗагрузкаДанныхИзВнешнегоИсточника

// Сопоставляет загружаемые данные из внешнего источника с данными в базе
//
// Параметры:
//   ПараметрыСопоставления - структура, параметры сопоставления загружаемых данных
//   АдресРезультата - адрес, куда будет помещена таблица сопоставления данных
//
Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ПараметрыСопоставления, АдресРезультата) Экспорт
	
	ТаблицаСопоставленияДанных	= ПараметрыСопоставления.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных		= ПараметрыСопоставления.НастройкиЗагрузкиДанных;
	НастройкиПоиска				= НастройкиЗагрузкиДанных.НастройкиПоиска;
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	ТаблицаДублирующихСтрок = ЗагрузкаДанныхИзВнешнегоИсточника.ПустаяТаблицаДублирующихСтрокНоменклатуры();
	НастройкиПоиска.Вставить("ТаблицаДублирующихСтрок", ТаблицаДублирующихСтрок);
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		НоменклатураСопоставлена = Ложь;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "НоменклатураПоставщиков") 
			И (ЗначениеЗаполнено(СтрокаТаблицыФормы.АртикулПоставщика)
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.Идентификатор)
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураПоставщиковНаименование)) Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуруПоставщиков(СтрокаТаблицыФормы, НастройкиЗагрузкиДанных);	
			НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураПоставщиков);
		КонецЕсли;
		
		Если НЕ НоменклатураСопоставлена Тогда
		
			// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы, НастройкиПоиска);
		
		КонецЕсли; 
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "Родитель")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "РодительНаименование")
			И ЗначениеЗаполнено(СтрокаТаблицыФормы.РодительНаименование) Тогда
			
			ЗначениеПоУмолчанию = Справочники.Номенклатура.ПустаяСсылка();
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьРодителяНоменклатуры(СтрокаТаблицыФормы.Родитель, "", СтрокаТаблицыФормы.РодительНаименование, ЗначениеПоУмолчанию);
			
		КонецЕсли; 
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "ЭтоУслуга_ВходящиеДанные") Тогда
			
			СтрокаТаблицыФормы.ЭтоУслуга = СтрокаТаблицыФормы.ЭтоУслуга_ВходящиеДанные;
			
		КонецЕсли;
		
		СтрокаТаблицыФормы.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
		СтрокаТаблицыФормы.СчетУчетаЗатрат = ?(ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство"), 
			ПланыСчетов.Управленческий.НезавершенноеПроизводство, ПланыСчетов.Управленческий.КоммерческиеРасходы);
		СтрокаТаблицыФормы.СчетУчетаДоходов = ?(СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"), 
			ПланыСчетов.Управленческий.ПрочиеДоходы, ПланыСчетов.Управленческий.ПустаяСсылка());
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "НаправлениеДеятельности") Тогда
			
			ЗначениеПоУмолчанию = Справочники.НаправленияДеятельности.Прочее;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНаправлениеДеятельности(СтрокаТаблицыФормы.НаправлениеДеятельности, СтрокаТаблицыФормы.НаправлениеДеятельности_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "МетодОценки") Тогда
			
			ЗначениеПоУмолчанию = Перечисления.МетодОценкиЗапасов.ПоСредней;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьМетодОценки(СтрокаТаблицыФормы.МетодОценки, СтрокаТаблицыФормы.МетодОценки_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "СпособПополнения") Тогда
			
			ЗначениеПоУмолчанию = Перечисления.СпособыПополненияЗапасов.Закупка;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСпособПополнения(СтрокаТаблицыФормы.СпособПополнения, СтрокаТаблицыФормы.СпособПополнения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "КатегорияНоменклатуры_ВходящиеДанные")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "КатегорияНоменклатуры") Тогда
		
			ЗначениеПоУмолчанию = Справочники.КатегорииНоменклатуры.БезКатегории;					
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьКатегориюНоменклатуры(СтрокаТаблицыФормы.КатегорияНоменклатуры, СтрокаТаблицыФормы.КатегорияНоменклатуры_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ПолноеИмяОбъектаЗаполнения = "Документ.ЗаказНаПроизводство.ТабличнаяЧасть.Расходы" Тогда
			
			Если СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
				
				СтрокаТаблицыФормы.Номенклатура = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПолноеИмяОбъектаЗаполнения = "Документ.ЗаказНаПроизводство.ТабличнаяЧасть.Запасы" Тогда
			
			Если СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
				
				СтрокаТаблицыФормы.Номенклатура = Неопределено;
				
			КонецЕсли;
			
			Если НЕ НоменклатураСопоставлена И ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") И ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				// Характеристика по Владельцу и Наименованию
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы);
				
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
				
				Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
					
					// Партия по Владельцу и Наименованию
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПартию(СтрокаТаблицыФормы.Партия, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Партия_ВходящиеДанные);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Количество
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
		
		Если НастройкиЗагрузкиДанных.ВидОперации = Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка Тогда                                                      			
			// Доля стоимости
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.ДоляСтоимости, СтрокаТаблицыФормы.ДоляСтоимости_ВходящиеДанные, 0);				
		Иначе			
			Если НастройкиЗагрузкиДанных.ЗаказЗаполнен Тогда
				// Резерв
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Резерв, СтрокаТаблицыФормы.Резерв_ВходящиеДанные, 0);				
			КонецЕсли;			
		КонецЕсли; 		
				
		// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
		ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Заказ по номеру, дате, признаку		
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЗаказ(СтрокаТаблицыФормы.ЗаказПокупателя, СтрокаТаблицыФормы.ЗаказПокупателя_ВходящиеДанные);
		
		// Склад
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтруктурнуюЕдиницу(СтрокаТаблицыФормы.СтруктурнаяЕдиница, СтрокаТаблицыФормы.СтруктурнаяЕдиница_ВходящиеДанные, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПрогрессСопоставленияДанных(ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицыФормы), РазмерТаблицыДанных);
		
	КонецЦикла;
	
	ТаблицаСопоставленияДанных.ЗагрузитьКолонку(ТаблицаДублирующихСтрок.ВыгрузитьКолонку("КлючСвязи"), "_КлючСвязи");
	ПоместитьВоВременноеХранилище(ТаблицаСопоставленияДанных, АдресРезультата);
	
КонецПроцедуры

// АПК:299-вкл

// Проверяет корректность данных в строке табличной части "Запасы"
//
// Параметры:
//   СтрокаТаблицыФормы - строка таблицы формы для проверки заполнения
//   ПолноеИмяОбъектаЗаполнения - строка, полное имя объекта для заполнения
//
Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт

	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	НоменклатураЗаполнена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
	ЗагрузкаНоменклатурыВозможна = Ложь;
	Если НЕ НоменклатураЗаполнена Тогда
		ЗагрузкаНоменклатурыВозможна = (ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименование) 
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименованиеПолное));
	КонецЕсли;
	
	Если ПолноеИмяОбъектаЗаполнения = "Документ.ЗаказНаПроизводство.ТабличнаяЧасть.Запасы" Тогда
		
		Если НоменклатураЗаполнена Тогда

			СтрокаТаблицыФормы[ИмяСлужебногоПоля] = СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
				И Не СтрокаТаблицыФормы.Номенклатура.ЭтоНабор // Исключая наборы
				И СтрокаТаблицыФормы.Количество <> 0
				И Не СтрокаТаблицыФормы.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
			СтрокаТаблицыФормы._СтрокаСопоставлена = НоменклатураЗаполнена;
				
		Иначе
			
  			СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗагрузкаНоменклатурыВозможна И НЕ СтрокаТаблицыФормы.ЭтоУслуга;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ПроверитьВозможностьВводаНаОснованииЗаказаНаПроизводство(ДанныеЗаполнения, ЗначенияРеквизитов) Экспорт
	
	Если ЗначенияРеквизитов.Свойство("Проведен") Тогда
		Если НЕ ЗначенияРеквизитов.Проведен Тогда
			ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.Свойство("СостояниеЗаказа")
		И ЗначенияРеквизитов.СостояниеЗаказа = Справочники.СостоянияЗаказовНаПроизводство.Завершен Тогда
		
		ТекстОшибки = НСтр("ru='Документ %Документ% в состоянии Завершен. Ввод на основании завершенного заказа запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет состояние заказа
//
// Параметры:
//  Заказ				 - 	ДокументСсылка.ЗаказНаПроизводство 
//  Состояние			 - 	СправочникСсылка.СостоянияЗаказовНаПроизводство 
//  ВариантЗавершения	 - 	ПеречисленияСсылка.ВариантыЗавершенияЗаказа 
//
Процедура ИзменитьСостояниеЗаказа(Заказ, Состояние, ВариантЗавершения = Неопределено) Экспорт
	
	Если Заказ.СостояниеЗаказа = Состояние И Состояние <> Справочники.СостоянияЗаказовНаПроизводство.Завершен Тогда
		Возврат;
	КонецЕсли;
	
	Если Заказ.СостояниеЗаказа = Состояние И Состояние = Справочники.СостоянияЗаказовНаПроизводство.Завершен
		И (ЗначениеЗаполнено(Заказ.ВариантЗавершения) И Заказ.ВариантЗавершения = ВариантЗавершения) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказОбъект = Заказ.ПолучитьОбъект();
	ЗаказОбъект.Заблокировать();
	
	Если ВариантЗавершения <> Неопределено Тогда
		ЗаказОбъект.ВариантЗавершения = ВариантЗавершения;
	КонецЕсли;
	
	ЗаказОбъект.СостояниеЗаказа = Состояние;
	ЗаказОбъект.Записать(ЗаказОбъект.РежимЗаписиПриСменеСостояния());
	ЗаказОбъект.Разблокировать();
	
КонецПроцедуры

// Возвращает Заказы на производство оформленные под обеспечение Заказа покупателя.
//
// Параметры:
//  ЗаказПокупателя - ДокументСсылка.ЗаказПокупателя
// 
// Возвращаемое значение:
//   - Массив
//
Функция ЗаказыПодОбеспечение(ЗаказПокупателя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|ГДЕ
	|	ЗаказНаПроизводствоПродукция.ЗаказПокупателя = &ЗаказПокупателя";
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает Заказы покупателя, обеспечиваемые указанным заказом на производство.
//
// Параметры:
//  ЗаказНаПроизводство - ДокументСсылка.ЗаказНаПроизводство
// 
// Возвращаемое значение:
//   - Массив
//
Функция ОбеспечиваемыеЗаказыПокупателя(ЗаказНаПроизводство) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказНаПроизводствоПродукция.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|ГДЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка = &ЗаказНаПроизводство
	|	И ЗаказНаПроизводствоПродукция.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)";
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("ЗаказПокупателя");
	
КонецФункции

Функция СтатусВыполнения(Заказ, МоментВремени = Неопределено)
	
	Если НЕ Заказ.Проведен ИЛИ Заказ.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
		Возврат Перечисления.СтатусОтгрузки.Отсутствует;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказыНаПроизводствоОбороты.КоличествоПриход КАК КоличествоПриход,
	|	ЗаказыНаПроизводствоОбороты.КоличествоРасход КАК КоличествоРасход
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПроизводство.Обороты(, &КонецПериода, , ЗаказНаПроизводство = &Заказ) КАК ЗаказыНаПроизводствоОбороты";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("КонецПериода", ?(МоментВремени = Неопределено, ТекущаяДатаСеанса(), МоментВремени));
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если НЕ Результат.Следующий() Тогда
		Возврат Перечисления.СтатусОтгрузки.Отсутствует;
	КонецЕсли;
	
	Если Результат.КоличествоРасход = 0 Тогда
		Возврат Перечисления.СтатусОтгрузки.Отсутствует;
	ИначеЕсли Результат.КоличествоПриход - Результат.КоличествоРасход = 0 Тогда
		Возврат Перечисления.СтатусОтгрузки.Полная;
	Иначе
		Возврат Перечисления.СтатусОтгрузки.Частичная;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - состав полей см. в функции ВерсионированиеОбъектов.НастройкиПодсистемы
//
// @skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсПечати

Функция СформироватьТребованиеНаСклад(ОписаниеПечатнойФормы, МассивОбъектов, ОбъектыПечати)
	Перем ПервыйДокумент, НомерСтрокиНачало;
	
	ТабличныйДокумент	= ОписаниеПечатнойФормы.ТабличныйДокумент;
	Макет				= УправлениеПечатью.МакетПечатнойФормы(ОписаниеПечатнойФормы.ПолныйПутьКМакету);
	ДанныеПечати		= Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПроизводство.Ссылка КАК Ссылка
	|	,ЗаказНаПроизводство.Номер КАК Номер
	|	,ЗаказНаПроизводство.Дата КАК ДатаДокумента
	|	,ЗаказНаПроизводство.Организация КАК Организация
	|	,ЗаказНаПроизводство.Ответственный КАК Исполнитель
	|	,ЗаказНаПроизводство.ЗаказПокупателя КАК Заказ
	|	,ЗаказНаПроизводство.Старт КАК ДатаЗапуска
	|	,ЗаказНаПроизводство.Финиш КАК ДатаВыпуска
	|	,ЗаказНаПроизводство.СтруктурнаяЕдиница КАК Подразделение
	|	,ЗаказНаПроизводство.Организация.Префикс КАК Префикс
	|
	// ::: Табличная часть "Продукция"
	|	,ЗаказНаПроизводство.Продукция.(
	|		НомерСтроки КАК НомерСтроки
	|		,Выбор КОГДА (ВЫРАЗИТЬ(ЗаказНаПроизводство.Продукция.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
	|			ТОГДА ЗаказНаПроизводство.Продукция.Номенклатура.Наименование
	|			ИНАЧЕ ЗаказНаПроизводство.Продукция.Номенклатура.НаименованиеПолное КОНЕЦ КАК ПредставлениеНоменклатуры
	|		,Номенклатура.Артикул КАК Артикул
	|		,Номенклатура.Штрихкод КАК Штрихкод
	|		,Номенклатура.Код КАК Код
	|		,Характеристика КАК Характеристика
	|		,ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|		,Количество КАК Количество
	|	) КАК ТаблицаПродукция
	|
	// ::: Табличная часть "Запасы" (Материалы)
	|	,ЗаказНаПроизводство.Запасы.(
	|		НомерСтроки КАК НомерСтроки
	|		,Выбор КОГДА (ВЫРАЗИТЬ(ЗаказНаПроизводство.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
	|			ТОГДА ЗаказНаПроизводство.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ЗаказНаПроизводство.Запасы.Номенклатура.НаименованиеПолное КОНЕЦ КАК ПредставлениеНоменклатуры
	|		,Номенклатура.Артикул КАК Артикул
	|		,Номенклатура.Штрихкод КАК Штрихкод
	|		,Номенклатура.Код КАК Код
	|		,Характеристика КАК Характеристика
	|		,ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|		,Количество КАК Количество
	|	) КАК ТаблицаЗапасы
	|
	|ИЗ Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ ЗаказНаПроизводство.Ссылка В(&МассивОбъектов)
	|УПОРЯДОЧИТЬ ПО Ссылка, НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало,
			ДанныеПечати);
		
		//::: Заголовок
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");

		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента,
			Шапка.Номер, Шапка.Префикс);
		ДатаДокумента = Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
		ДанныеПечати.Вставить("ТекстЗаголовка", СтрШаблон(НСтр("ru ='Требование на склад № %1 от %2'"), НомерДокумента,
			ДатаДокумента));

		ОбластьЗаголовок.Параметры.Заполнить(ДанныеПечати);
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок,
			Шапка.Ссылка);

		ТабличныйДокумент.Вывести(ОбластьЗаголовок);

		// ::: Шапка документа
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// ::: Табличная часть "Продукция"
		ОбластьМакетаШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого");
		
		ДанныеПечати.Вставить("ОписаниеТаблицы", НСтр("ru ='Продукция, работа'"));
		ДанныеПечати.Вставить("ОписаниеЗапасов", НСтр("ru ='Наименование, характеристика продукции'"));
		
		ОбластьМакетаШапкаТаблицы.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
		
		ТаблицаПродукция = Шапка.ТаблицаПродукция.Выгрузить();
		ПараметрыНоменклатуры = Новый Структура;
		
		Для каждого СтрокаТабличнойЧастиПродукция Из ТаблицаПродукция Цикл
			
			ДанныеПечати.Очистить();
			ДанныеПечати.Вставить("НомерСтроки", СтрокаТабличнойЧастиПродукция.НомерСтроки);
			
			ПараметрыНоменклатуры.Очистить();
			ПараметрыНоменклатуры.Вставить("Содержание", Неопределено);
			ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧастиПродукция.ПредставлениеНоменклатуры);
			ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧастиПродукция.Характеристика);
			ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧастиПродукция.Артикул);
			ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", Ложь);
			
			ДанныеПечати.Вставить("ПредставлениеНоменклатуры", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
			ДанныеПечати.Вставить("ПредставлениеКодаНоменклатуры", ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(СтрокаТабличнойЧастиПродукция));
			
			ДанныеПечати.Вставить("Количество", СтрокаТабличнойЧастиПродукция.Количество);
			ДанныеПечати.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧастиПродукция.ЕдиницаИзмерения);
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаИтого);
		
		// ::: Табличная часть "Запасы" (Материалы)
		ДанныеПечати.Очистить();
		ДанныеПечати.Вставить("ОписаниеТаблицы", НСтр("ru ='Потребность в материалах'"));
		ДанныеПечати.Вставить("ОписаниеЗапасов", НСтр("ru ='Наименование, характеристика материала'"));
		
		ОбластьМакетаШапкаТаблицы.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
		
		ТаблицаЗапасы = Шапка.ТаблицаЗапасы.Выгрузить();
		Для Каждого СтрокаТабличнойЧастиЗапасы Из ТаблицаЗапасы Цикл

			ДанныеПечати.Очистить();
			ДанныеПечати.Вставить("НомерСтроки", СтрокаТабличнойЧастиЗапасы.НомерСтроки);

			ПараметрыНоменклатуры.Очистить();
			ПараметрыНоменклатуры.Вставить("Содержание", Неопределено);
			ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры",
				СтрокаТабличнойЧастиЗапасы.ПредставлениеНоменклатуры);
			ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧастиЗапасы.Характеристика);
			ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧастиЗапасы.Артикул);
			ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", Ложь);

			ДанныеПечати.Вставить("ПредставлениеНоменклатуры", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(
				ПараметрыНоменклатуры));
			ДанныеПечати.Вставить("ПредставлениеКодаНоменклатуры", ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(
				СтрокаТабличнойЧастиЗапасы));

			ДанныеПечати.Вставить("Количество", СтрокаТабличнойЧастиЗапасы.Количество);
			ДанныеПечати.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧастиЗапасы.ЕдиницаИзмерения);

			ОбластьМакетаСтрока.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);

		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаИтого);
		
		//::: Подписи
		ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
		ОбластьПодписи.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьПодписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов			 - Массив		 - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати			 - Структура	 - дополнительные настройки печати;
//  КоллекцияПечатныхФорм	 - ТаблицаЗначений	 - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати			 - СписокЗначений	 - значение - ссылка на объект;
//  	представление - имя области, в которой был выведен объект (выходной параметр);
//  ПараметрыВывода			 - Структура		 - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ОписаниеПечатнойФормы = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ТребованиеНаСклад");
	Если ОписаниеПечатнойФормы <> Неопределено Тогда
		
		ОписаниеПечатнойФормы.ТабличныйДокумент = Новый ТабличныйДокумент;
		ОписаниеПечатнойФормы.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаПроизводство_ТребованиеНаСклад";
		ОписаниеПечатнойФормы.ПолныйПутьКМакету = "Документ.ЗаказНаПроизводство.ПФ_MXL_ТребованиеНаСклад";
		ОписаниеПечатнойФормы.СинонимМакета = НСтр("ru ='Требование на склад'");
		
		СформироватьТребованиеНаСклад(ОписаниеПечатнойФормы, МассивОбъектов, ОбъектыПечати);
		
	КонецЕсли;
	
	ОписаниеПечатнойФормы = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "СдельныйНаряд");
	Если ОписаниеПечатнойФормы <> Неопределено Тогда
		
		ОписаниеПечатнойФормы.ТабличныйДокумент = Новый ТабличныйДокумент;
		ОписаниеПечатнойФормы.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаПроизводство_СдельныйНаряд";
		ОписаниеПечатнойФормы.ПолныйПутьКМакету = "Документ.СдельныйНаряд.ПФ_MXL_СдельныйНаряд";
		ОписаниеПечатнойФормы.СинонимМакета = НСтр("ru ='Сдельный наряд'");
		
		Документы.СдельныйНаряд.ПечатнаяФорма(ОписаниеПечатнойФормы, МассивОбъектов, ОбъектыПечати);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, 
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//  КомандыПечати	 - ТаблицаЗначений	 - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТребованиеНаСклад";
	КомандаПечати.Представление = НСтр("ru = 'Требование на склад'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы.СдельныйНаряд)
		И ПолучитьФункциональнуюОпцию("ИспользоватьТехоперации") Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "СдельныйНаряд";
		КомандаПечати.Представление = НСтр("ru = 'Сдельный наряд'");
		КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Порядок = 2;
		
	КонецЕсли; 
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПечатьЭтикетокИЦенников)
		И ПолучитьФункциональнуюОпцию("ПечатьЭтикетокИЦенников")
		И НЕ УправлениеДоступомУНФ.ЕстьПрофильРабочееМестоКассира() Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьЭтикетокИЦенниковИзДокументов";
		КомандаПечати.Идентификатор = "ПечатьЭтикетокИзРасходнойНакладной";
		КомандаПечати.Представление = НСтр("ru = 'Печать этикеток'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Порядок = 3;
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьЭтикетокИЦенниковИзДокументов";
		КомандаПечати.Идентификатор = "ПечатьЦенниковИзРасходнойНакладной";
		КомандаПечати.Представление = НСтр("ru = 'Печать ценников'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Порядок = 4;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - состав полей см. в функции ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ГруппаДел	= НСтр("ru = 'Заказы на производство'");
	ИмяФормы	= "Документ.ЗаказНаПроизводство.Форма.ФормаСписка";
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство")
		Или Не ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказНаПроизводство)
		Или ТекущиеДелаСервер.ДелоОтключено(ГруппаДел) Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА ДокЗаказНаПроизводство.Финиш < &ТекущаяДата
		|					И ЕСТЬNULL(ЗаказыНаПроизводствоОстатки.КоличествоОстаток, 0) > 0
		|				ТОГДА ДокЗаказНаПроизводство.Ссылка
		|		КОНЕЦ) КАК ЗаказыНаПроизводствоПросроченоВыполнение,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА ДокЗаказНаПроизводство.Старт <= КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|					И ДокЗаказНаПроизводство.Финиш >= &ТекущаяДата
		|					И ЕСТЬNULL(ЗаказыНаПроизводствоОстатки.КоличествоОстаток, 0) > 0
		|				ТОГДА ДокЗаказНаПроизводство.Ссылка
		|		КОНЕЦ) КАК ЗаказыНаПроизводствоНаСегодня,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокЗаказНаПроизводство.Ссылка) КАК ЗаказыНаПроизводствоНеЗавершенные
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК ДокЗаказНаПроизводство
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаПроизводство.Остатки(, ) КАК ЗаказыНаПроизводствоОстатки
		|		ПО ДокЗаказНаПроизводство.Ссылка = ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство}
		|ГДЕ
		|	ДокЗаказНаПроизводство.Проведен
		|	И НЕ ДокЗаказНаПроизводство.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовНаПроизводство.Завершен)
		|	И ДокЗаказНаПроизводство.Ответственный В(&СотрудникиПользователя)";
	
	ДанныеДел = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	 = "ЗаказыНаПроизводствоПросроченоВыполнение";
	Дело.ЕстьДела		= ДанныеДел.ЗаказыНаПроизводствоПросроченоВыполнение > 0;
	Дело.Важное			= Истина;
	Дело.Представление	= НСтр("ru = 'Просроченные'");
	Дело.Количество		= ДанныеДел.ЗаказыНаПроизводствоПросроченоВыполнение;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,ПросроченоВыполнение", "ПросроченоВыполнение");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаказыНаПроизводствоНаСегодня";
	Дело.ЕстьДела		= ДанныеДел.ЗаказыНаПроизводствоНаСегодня > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'На сегодня'");
	Дело.Количество		= ДанныеДел.ЗаказыНаПроизводствоНаСегодня;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,НаСегодня", "НаСегодня");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаказыНаПроизводствоНеЗавершенные";
	Дело.ЕстьДела		= ДанныеДел.ЗаказыНаПроизводствоНеЗавершенные > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'Не завершенные'");
	Дело.Количество		= ДанныеДел.ЗаказыНаПроизводствоНеЗавершенные;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,НеЗавершенные", "НеЗавершенные");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсРабочегоПроцесса

Функция РеквизитыНедоступныеДляИсточникаРабочегоПроцесса(ТипДействия = Неопределено) Экспорт
	
	НедоступныеРеквизиты = Новый Массив;
	
	НедоступныеРеквизиты.Добавить("СписокНоменклатуры");
	НедоступныеРеквизиты.Добавить("СписокРесурсов");
	НедоступныеРеквизиты.Добавить("СтруктурнаяЕдиницаРезерв");
	
	Возврат НедоступныеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
// @skip-warning
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
// @skip-warning
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
// @skip-warning
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
// @skip-warning
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область АссистентУправления

#Область АссистентУправления_Интеграция

Процедура ПриОпределенииТиповПредметовСобытий(Предметы) Экспорт
	
	Предметы.Вставить("ЗаказНаПроизводство", НСтр("ru='Заказ на производство'"));
	
КонецПроцедуры

Процедура ПриОпределенииСобытий(События, Предмет) Экспорт
	
	НовоеСобытие = События.Добавить();
	НовоеСобытие.Предмет       = "ЗаказНаПроизводство";
	НовоеСобытие.Тип           = "ПриЗаписи";
	НовоеСобытие.Идентификатор = "ИзменениеСостоянияЗаказаНаПроизводство";
	НовоеСобытие.Представление = НСтр("ru='Изменение состояния заказа поставщику'");
	
	НовоеСобытие = События.Добавить();
	НовоеСобытие.Предмет       = "ЗаказНаПроизводство";
	НовоеСобытие.Тип           = "ПриЗаписи";
	НовоеСобытие.Идентификатор = "ИзменениеСостоянияВыполнения";
	НовоеСобытие.Представление = НСтр("ru='Изменение статуса выполнения заказа'");
	
КонецПроцедуры

Процедура ПриОпределенииДействий(Действия) Экспорт
	
	ТипыСостояний = Новый Массив;
	ТипыСостояний.Добавить(Тип("СправочникСсылка.СостоянияЗаказовНаПроизводство"));
	ТипСостояниеЗаказаНаПроизводство = Новый ОписаниеТипов(ТипыСостояний);
	
	НовоеДействие = Действия.Добавить();
	НовоеДействие.Предмет       = "ЗаказНаПроизводство";
	НовоеДействие.Идентификатор = "СинхронизироватьСостояниеЗаказаСтатусыЗаказа";
	НовоеДействие.Представление = НСтр("ru='Изменить состояние Заказа на производство при изменении статуса выполнения'");
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "СостояниеЗаказа";
	НовоеПоле.Представление = НСтр("ru='Новое состояние'");
	НовоеПоле.ОписаниеТипов = ТипСостояниеЗаказаНаПроизводство;
	НовоеПоле.ОбязательноеЗаполнение = Истина;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "СтатусВыполнения";
	НовоеПоле.Представление = НСтр("ru='Статус выполнения заказа'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусОтгрузки");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "ТолькоОповестить";
	НовоеПоле.Представление = НСтр("ru='Только оповестить'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("Булево");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
КонецПроцедуры

// @skip-warning
Процедура ПриОпределенииПолучателейСообщения(Получатели) Экспорт
	
	
КонецПроцедуры

// @skip-warning
Процедура ПриОпределенииКонтактовПолучателяПредметаСообщения(Получатель, Предмет, ТипПредмета, ОписаниеПолучателя) Экспорт
	
	
КонецПроцедуры

// @skip-warning
Функция ВыполненыУсловия(Предмет, Условия) Экспорт
	
	
КонецФункции

// @skip-warning
Процедура ПередОбработкойСобытия(Предмет, Событие, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
	
	
КонецПроцедуры

Процедура ВыполнитьДействие(Предмет, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
	Если Действие.Идентификатор = "СинхронизироватьСостояниеЗаказаСтатусыЗаказа" Тогда
		
		СинхронизироватьСостояниеЗаказаСтатусыЗаказа(Предмет, ЗначенияЗаполнения, ДополнительныеПараметры, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// @skip-warning
Процедура ПослеОбработкиСобытия(Предмет, Событие, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область АссистентУправления_Реализация

Процедура СинхронизироватьСостояниеЗаказаСтатусыЗаказа(ЗаказПоставщику, ЗначенияЗаполнения, ДополнительныеПараметры, Результат)
	
	СтатусВыполненияТекущий = Неопределено;
	СтатусВыполненияДо      = Неопределено;
	
	МоментВремени = Неопределено;
	Если ДополнительныеПараметры.Источник <> Неопределено И ТипЗнч(ДополнительныеПараметры.Источник) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		МоментВремени = Новый МоментВремени(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныеПараметры.Источник, "Дата"), ДополнительныеПараметры.Источник);
		МоментВремени = Новый Граница(МоментВремени, ВидГраницы.Исключая);
	КонецЕсли;
	
	Если ЗначенияЗаполнения.Свойство("СтатусВыполнения") И ЗначениеЗаполнено(ЗначенияЗаполнения.СтатусВыполнения) Тогда
		СтатусВыполненияТекущий = СтатусВыполнения(ЗаказПоставщику);
		Если МоментВремени <> Неопределено Тогда
			СтатусВыполненияДо = СтатусВыполнения(ЗаказПоставщику, МоментВремени);
		КонецЕсли;
	КонецЕсли;
	
	ЗаказВыполнилУсловия = Истина;
	
	Если ЗначенияЗаполнения.Свойство("СтатусВыполнения") И ЗначениеЗаполнено(ЗначенияЗаполнения.СтатусВыполнения) Тогда
		ЗаказВыполнилУсловия = Перечисления.СтатусОтгрузки.Сравнить(СтатусВыполненияТекущий, ЗначенияЗаполнения.СтатусВыполнения) >= 0;
	КонецЕсли;
	
	ТекущееСостояние = СостоянияЗаказов.СостояниеЗаказа(ЗаказПоставщику);
	
	Если ЗначенияЗаполнения.Свойство("СостояниеЗаказа") Тогда
		СинхронизируемоеСостояние = ЗначенияЗаполнения.СостояниеЗаказа;
		ЗаказПрошелСинхронизируемоеСостояние = СостоянияЗаказов.СравнитьСостояния(ТекущееСостояние, СинхронизируемоеСостояние) >= 0;
		СравниватьСостояния = Истина;
	Иначе
		СравниватьСостояния = Ложь;
	КонецЕсли;
	
	Если СравниватьСостояния Тогда
		Если ЗаказВыполнилУсловия И ЗаказПрошелСинхронизируемоеСостояние
			ИЛИ НЕ ЗаказВыполнилУсловия И НЕ ЗаказПрошелСинхронизируемоеСостояние Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СравниватьСостояния И НЕ ЗаказВыполнилУсловия Тогда
		Возврат;
	КонецЕсли;
	
	Если СравниватьСостояния Тогда
		Если НЕ ЗаказВыполнилУсловия И ЗаказПрошелСинхронизируемоеСостояние Тогда
			ТекстСобытие = СтрШаблон(НСтр("ru='Заказ в состоянии %1'"), ТекущееСостояние);
			ТекстПредупреждения = "";
			Если СтатусВыполненияТекущий <> Неопределено Тогда
				ТекстПредупреждения = НСтр("ru=', а он еще не выполнен'");
			КонецЕсли;
			АссистентУправления.ДобавитьСообщениеВРезультат(Результат, ЗаказПоставщику, ТекстСобытие + ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СравниватьСостояния ИЛИ (ЗаказВыполнилУсловия И НЕ ЗаказПрошелСинхронизируемоеСостояние) Тогда
		
		НужноТолькоОповестить = ЗначенияЗаполнения.Свойство("ТолькоОповестить") И ЗначенияЗаполнения.ТолькоОповестить;
		
		Если НЕ НужноТолькоОповестить Тогда
			АссистентУправленияИзменитьСостояние(ЗаказПоставщику, СинхронизируемоеСостояние, ДополнительныеПараметры, Результат);
		КонецЕсли;
		
		ТекстСобытия = "";
		Если СтатусВыполненияТекущий <> Неопределено Тогда
			ТекстСобытия = НСтр("ru='Заказ выполнен'");
		КонецЕсли;
		
		Если НужноТолькоОповестить Тогда
			ТекстДействия = "";
		Иначе
			ТекстДействия = СтрШаблон(НСтр("ru=', перевела заказ в состояние %1'"), СинхронизируемоеСостояние);
		КонецЕсли;
		
		АссистентУправления.ДобавитьСообщениеВРезультат(Результат, ЗаказПоставщику, ТекстСобытия + ТекстДействия);
	КонецЕсли;
	
КонецПроцедуры

Процедура АссистентУправленияИзменитьСостояние(Заказ, НовоеСостояние, ДополнительныеПараметры, Результат) Экспорт
	
	Если ДатыЗапретаИзменения.ИзменениеЗапрещено("Документ.ЗаказПокупателя", Заказ) Тогда
		Результат.ДействиеВыполнено = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НовоеСостояние) = Тип("Структура") Тогда
		СостояниеЗаказа = НовоеСостояние.СостояниеЗаказа;
		ВариантЗавершения = НовоеСостояние.ВариантЗавершения;
	Иначе
		СостояниеЗаказа = НовоеСостояние;
		ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно;
	КонецЕсли;
	
	ДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "СостояниеЗаказа,ВариантЗавершения");
	
	Если СостоянияЗаказов.СравнитьСостояния(ДанныеЗаказа.СостояниеЗаказа, СостояниеЗаказа) >= 0
		И (ВариантЗавершения = Неопределено ИЛИ ДанныеЗаказа.ВариантЗавершения = ВариантЗавершения) Тогда
		Результат.ДействиеВыполнено = Ложь;
		Возврат;
	КонецЕсли;
	
	Объект = Заказ.ПолучитьОбъект();
	Объект.СостояниеЗаказа = СостояниеЗаказа;
	Если СостоянияЗаказов.ЭтоСостояниеЗавершен(Объект.СостояниеЗаказа) Тогда
		Объект.ВариантЗавершения = ВариантЗавершения;
	КонецЕсли;
	Объект.ДополнительныеСвойства.Вставить("ЭтоЗаписьАссистентом", Истина);
	Объект.Записать(Объект.РежимЗаписиПриСменеСостояния());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаЗаказНаПроизводство, СтруктураДополнительныеСвойства) Экспорт
	
	ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылкаЗаказНаПроизводство, "ВидОперации");
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказНаПроизводство.Сборка Тогда
		
		ИнициализироватьДанныеДокументаСборка(ДокументСсылкаЗаказНаПроизводство, СтруктураДополнительныеСвойства);
		
	Иначе
		
		ИнициализироватьДанныеДокументаРазборка(ДокументСсылкаЗаказНаПроизводство, СтруктураДополнительныеСвойства);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКонтроль(ДокументСсылкаЗаказНаПроизводство, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если ПроведениеДокументовУНФ.КонтрольОстатковВыключен() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗаказыНаПроизводствоИзменение", "ДвиженияРазмещениеЗаказовИзменение",
	// "ДвиженияПотребностьВЗапасахИзменение", "ДвиженияЗапасыИзменение"
	// содержат записи, необходимо выполнить контроль реализации товаров.
	
	Если СтруктураВременныеТаблицы.ДвиженияЗаказыНаПроизводствоИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияРазмещениеЗаказовИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияПотребностьВЗапасахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.СчетУчета) КАК СчетУчетаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.ЗаказПокупателя) КАК ЗаказПокупателяПредставление,
		|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
		|ИЗ
		|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчета,
		|						ДвиженияЗапасыИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателя
		|					ИЗ
		|						ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение)) КАК ЗапасыОстатки
		|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
		|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
		|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
		|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
		|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыНаПроизводствоИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыНаПроизводствоИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыНаПроизводствоИзменение.Склад) КАК СкладПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыНаПроизводствоИзменение.ЗаказНаПроизводство) КАК ЗаказНаПроизводствоПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыНаПроизводствоИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыНаПроизводствоИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаказыНаПроизводствоОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыНаПроизводствоИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыНаПроизводствоОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыНаПроизводство,
		|	ЕСТЬNULL(ЗаказыНаПроизводствоОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыНаПроизводство
		|ИЗ
		|	ДвиженияЗаказыНаПроизводствоИзменение КАК ДвиженияЗаказыНаПроизводствоИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаПроизводство.Остатки(
		|				&МоментКонтроля,
		|				(Организация, Склад, ЗаказНаПроизводство, Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗаказыНаПроизводствоИзменение.Организация КАК Организация,
		|						ДвиженияЗаказыНаПроизводствоИзменение.Склад КАК Склад,
		|						ДвиженияЗаказыНаПроизводствоИзменение.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|						ДвиженияЗаказыНаПроизводствоИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗаказыНаПроизводствоИзменение.Характеристика КАК Характеристика
		|					ИЗ
		|						ДвиженияЗаказыНаПроизводствоИзменение КАК ДвиженияЗаказыНаПроизводствоИзменение)) КАК ЗаказыНаПроизводствоОстатки
		|		ПО ДвиженияЗаказыНаПроизводствоИзменение.Организация = ЗаказыНаПроизводствоОстатки.Организация
		|			И ДвиженияЗаказыНаПроизводствоИзменение.Склад = ЗаказыНаПроизводствоОстатки.Склад
		|			И ДвиженияЗаказыНаПроизводствоИзменение.ЗаказНаПроизводство = ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство
		|			И ДвиженияЗаказыНаПроизводствоИзменение.Номенклатура = ЗаказыНаПроизводствоОстатки.Номенклатура
		|			И ДвиженияЗаказыНаПроизводствоИзменение.Характеристика = ЗаказыНаПроизводствоОстатки.Характеристика
		|ГДЕ
		|	ЕСТЬNULL(ЗаказыНаПроизводствоОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияПотребностьВЗапасахИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияПотребностьВЗапасахИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияПотребностьВЗапасахИзменение.ТипДвижения) КАК ТипДвиженияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияПотребностьВЗапасахИзменение.Склад) КАК СкладПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияПотребностьВЗапасахИзменение.ЗаказПокупателя) КАК ЗаказПокупателяПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияПотребностьВЗапасахИзменение.ЗаказНаПроизводство) КАК ЗаказНаПроизводствоПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияПотребностьВЗапасахИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияПотребностьВЗапасахИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПотребностьВЗапасахОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияПотребностьВЗапасахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) КАК ОстатокПотребностьВЗапасах,
		|	ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокПотребностьВЗапасах
		|ИЗ
		|	ДвиженияПотребностьВЗапасахИзменение КАК ДвиженияПотребностьВЗапасахИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПотребностьВЗапасах.Остатки(
		|				&МоментКонтроля,
		|				(Организация, ТипДвижения, Склад, ЗаказПокупателя, ЗаказНаПроизводство, Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						ДвиженияПотребностьВЗапасахИзменение.Организация КАК Организация,
		|						ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
		|						ДвиженияПотребностьВЗапасахИзменение.Склад КАК Склад,
		|						ДвиженияПотребностьВЗапасахИзменение.ЗаказПокупателя КАК ЗаказПокупателя,
		|						ДвиженияПотребностьВЗапасахИзменение.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|						ДвиженияПотребностьВЗапасахИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияПотребностьВЗапасахИзменение.Характеристика КАК Характеристика
		|					ИЗ
		|						ДвиженияПотребностьВЗапасахИзменение КАК ДвиженияПотребностьВЗапасахИзменение)) КАК ПотребностьВЗапасахОстатки
		|		ПО ДвиженияПотребностьВЗапасахИзменение.Организация = ПотребностьВЗапасахОстатки.Организация
		|			И ДвиженияПотребностьВЗапасахИзменение.ТипДвижения = ПотребностьВЗапасахОстатки.ТипДвижения
		|			И ДвиженияПотребностьВЗапасахИзменение.Склад = ПотребностьВЗапасахОстатки.Склад
		|			И ДвиженияПотребностьВЗапасахИзменение.ЗаказПокупателя = ПотребностьВЗапасахОстатки.ЗаказПокупателя
		|			И ДвиженияПотребностьВЗапасахИзменение.ЗаказНаПроизводство = ПотребностьВЗапасахОстатки.ЗаказНаПроизводство
		|			И ДвиженияПотребностьВЗапасахИзменение.Номенклатура = ПотребностьВЗапасахОстатки.Номенклатура
		|			И ДвиженияПотребностьВЗапасахИзменение.Характеристика = ПотребностьВЗапасахОстатки.Характеристика
		|ГДЕ
		|	ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияРазмещениеЗаказовИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.ЗаказПокупателя) КАК ЗаказПокупателяПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.ИсточникОбеспечения) КАК ИсточникОбеспеченияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(РазмещениеЗаказовОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияРазмещениеЗаказовИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) КАК ОстатокРазмещениеЗаказов,
		|	ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокРазмещениеЗаказов
		|ИЗ
		|	ДвиженияРазмещениеЗаказовИзменение КАК ДвиженияРазмещениеЗаказовИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
		|				&МоментКонтроля,
		|				(Организация, ЗаказПокупателя, Номенклатура, Характеристика, ИсточникОбеспечения) В
		|					(ВЫБРАТЬ
		|						ДвиженияРазмещениеЗаказовИзменение.Организация КАК Организация,
		|						ДвиженияРазмещениеЗаказовИзменение.ЗаказПокупателя КАК ЗаказПокупателя,
		|						ДвиженияРазмещениеЗаказовИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияРазмещениеЗаказовИзменение.Характеристика КАК Характеристика,
		|						ДвиженияРазмещениеЗаказовИзменение.ИсточникОбеспечения КАК ИсточникОбеспечения
		|					ИЗ
		|						ДвиженияРазмещениеЗаказовИзменение КАК ДвиженияРазмещениеЗаказовИзменение)) КАК РазмещениеЗаказовОстатки
		|		ПО ДвиженияРазмещениеЗаказовИзменение.Организация = РазмещениеЗаказовОстатки.Организация
		|			И ДвиженияРазмещениеЗаказовИзменение.ЗаказПокупателя = РазмещениеЗаказовОстатки.ЗаказПокупателя
		|			И ДвиженияРазмещениеЗаказовИзменение.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
		|			И ДвиженияРазмещениеЗаказовИзменение.Характеристика = РазмещениеЗаказовОстатки.Характеристика
		|			И ДвиженияРазмещениеЗаказовИзменение.ИсточникОбеспечения = РазмещениеЗаказовОстатки.ИсточникОбеспечения
		|ГДЕ
		|	ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
			ИЛИ НЕ МассивРезультатов[1].Пустой()
			ИЛИ НЕ МассивРезультатов[2].Пустой()
			ИЛИ НЕ МассивРезультатов[3].Пустой() Тогда
			ДокументОбъектЗаказНаПроизводство = ДокументСсылкаЗаказНаПроизводство.ПолучитьОбъект()
		КонецЕсли;
		
		// Отрицательный остаток запасов и затрат.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			КонтрольОстатковУНФ.Запасы(ДокументОбъектЗаказНаПроизводство, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по рабочим заданиям.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			КонтрольОстатковУНФ.ЗаказыНаПроизводство(ДокументОбъектЗаказНаПроизводство, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток потребности в запасах.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			КонтрольОстатковУНФ.ПотребностьВЗапасах(ДокументОбъектЗаказНаПроизводство, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по размещению запасов.
		Если НЕ МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			КонтрольОстатковУНФ.РазмещениеЗаказов(ДокументОбъектЗаказНаПроизводство, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область Сборка

Процедура ИнициализироватьДанныеДокументаСборка(ДокументСсылкаЗаказНаПроизводство, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПроизводствоПродукция.НомерСтроки КАК НомерСтроки,
	|	ЗаказНаПроизводствоПродукция.Ссылка КАК Ссылка,
	|	ЗаказНаПроизводство.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	ЗаказНаПроизводство.Дата КАК Дата,
	|	ЗаказНаПроизводство.ЗапланированыОперации КАК ЗапланированыОперации,
	|	НАЧАЛОПЕРИОДА(ЗаказНаПроизводство.Финиш, ДЕНЬ) КАК Финиш,
	|	&Организация КАК Организация,
	|	ЗаказНаПроизводствоПродукция.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказНаПроизводствоПродукция.Номенклатура КАК Номенклатура,
	|	ЗаказНаПроизводствоПродукция.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНаПроизводствоПродукция.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЗаказНаПроизводствоПродукция.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ЗаказНаПроизводствоПродукция.Спецификация КАК Спецификация,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПроизводствоПродукция.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказНаПроизводствоПродукция.Количество * ВЫРАЗИТЬ(ЗаказНаПроизводствоПродукция.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ ЗаказНаПроизводствоПродукция.Количество
	|	КОНЕЦ КАК Количество,
	|	ЗаказНаПроизводствоПродукция.ПодразделениеЗавершающегоЭтапа КАК ПодразделениеЗавершающегоЭтапа
	|ПОМЕСТИТЬ ТЧПродукция
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|		ПО ЗаказНаПроизводствоПродукция.Ссылка = ЗаказНаПроизводство.Ссылка
	|ГДЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка = &Ссылка
	|	И НЕ ЗаказНаПроизводство.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаПроизводствоЗапасы.Ссылка КАК Ссылка,
	|	ЗаказНаПроизводствоЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказНаПроизводство.Старт КАК Старт,
	|	ЗаказНаПроизводство.Финиш КАК Финиш,
	|	ЗаказНаПроизводство.Дата КАК Дата,
	|	ЗаказНаПроизводство.УчетПотребностиПоЗаказамНаПроизводство КАК УчетПотребностиПоЗаказамНаПроизводство,
	|	ЗаказНаПроизводство.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	ЗаказНаПроизводство.УчетПотребностиПоЗаказам КАК УчетПотребностиПоЗаказам,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	&Организация КАК Организация,
	|	ЗаказНаПроизводствоЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоЗапасы.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА ЗаказНаПроизводствоЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ЗаказНаПроизводствоЗапасы.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетУчета,
	|	ЗаказНаПроизводствоЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНаПроизводствоЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЗаказНаПроизводствоЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ЗаказНаПроизводствоЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПроизводствоЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказНаПроизводствоЗапасы.Количество * ВЫРАЗИТЬ(ЗаказНаПроизводствоЗапасы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ ЗаказНаПроизводствоЗапасы.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПроизводствоЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказНаПроизводствоЗапасы.Резерв * ВЫРАЗИТЬ(ЗаказНаПроизводствоЗапасы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ ЗаказНаПроизводствоЗапасы.Резерв
	|	КОНЕЦ КАК Резерв
	|ПОМЕСТИТЬ ТЧЗапасы
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Запасы КАК ЗаказНаПроизводствоЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|		ПО ЗаказНаПроизводствоЗапасы.Ссылка = ЗаказНаПроизводство.Ссылка
	|ГДЕ
	|	ЗаказНаПроизводствоЗапасы.Ссылка = &Ссылка
	|	И НЕ ЗаказНаПроизводство.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	0 КАК НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТЧПродукция.Финиш, ДЕНЬ) КАК Период,
	|	ТЧПродукция.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТЧПродукция.УчетПотребностиПоСкладам
	|				И ТЧПродукция.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТЧПродукция.СтруктурнаяЕдиницаПродукции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Поступление) КАК ТипДвижения,
	|	ТЧПродукция.Ссылка КАК Заказ,
	|	ТЧПродукция.Номенклатура КАК Номенклатура,
	|	ТЧПродукция.Характеристика КАК Характеристика,
	|	ТЧПродукция.Количество КАК Количество
	|ИЗ
	|	ТЧПродукция КАК ТЧПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТЧЗапасы.НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТЧЗапасы.Старт, ДЕНЬ),
	|	ТЧЗапасы.Организация,
	|	ВЫБОР
	|		КОГДА ТЧЗапасы.УчетПотребностиПоСкладам
	|			ТОГДА ТЧЗапасы.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка),
	|	ВЫБОР
	|		КОГДА ТЧЗапасы.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				ИЛИ НЕ ТЧЗапасы.УчетПотребностиПоЗаказам
	|			ТОГДА ТЧЗапасы.Ссылка
	|		ИНАЧЕ ТЧЗапасы.ЗаказПокупателя
	|	КОНЕЦ,
	|	ТЧЗапасы.Номенклатура,
	|	ТЧЗапасы.Характеристика,
	|	ТЧЗапасы.Количество
	|ИЗ
	|	ТЧЗапасы КАК ТЧЗапасы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	НАЧАЛОПЕРИОДА(ТЧПродукция.Дата, ДЕНЬ) КАК Период,
	|	ТЧПродукция.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТЧПродукция.УчетПотребностиПоСкладам
	|				И ТЧПродукция.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТЧПродукция.СтруктурнаяЕдиницаПродукции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ТЧПродукция.Ссылка КАК ЗаказНаПроизводство,
	|	ТЧПродукция.Номенклатура КАК Номенклатура,
	|	ТЧПродукция.Характеристика КАК Характеристика,
	|	ТЧПродукция.Количество КАК Количество
	|ИЗ
	|	ТЧПродукция КАК ТЧПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ЗаказНаПроизводствоОперации.Ссылка.Дата,
	|	&Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка),
	|	ЗаказНаПроизводствоОперации.Ссылка,
	|	ЗаказНаПроизводствоОперации.Операция,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗаказНаПроизводствоОперации.КоличествоПлан
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Операции КАК ЗаказНаПроизводствоОперации
	|ГДЕ
	|	ЗаказНаПроизводствоОперации.Ссылка = &Ссылка
	|	И НЕ ЗаказНаПроизводствоОперации.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧЗапасы.НомерСтроки КАК НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТЧЗапасы.Старт, ДЕНЬ) КАК Период,
	|	ТЧЗапасы.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТЧЗапасы.УчетПотребностиПоСкладам
	|			ТОГДА ТЧЗапасы.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|				ИЛИ ТЧЗапасы.УчетПотребностиПоЗаказам
	|			ТОГДА ТЧЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|					И ТЧЗапасы.УчетПотребностиПоЗаказамНаПроизводство
	|				ИЛИ ТЧЗапасы.УчетПотребностиПоЗаказам
	|			ТОГДА ТЧЗапасы.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказНаПроизводство,
	|	ТЧЗапасы.Номенклатура КАК Номенклатура,
	|	ТЧЗапасы.Характеристика КАК Характеристика,
	|	ТЧЗапасы.Количество КАК Количество
	|ИЗ
	|	ТЧЗапасы КАК ТЧЗапасы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	НАЧАЛОПЕРИОДА(ТЧПродукция.Дата, ДЕНЬ) КАК Период,
	|	ТЧПродукция.Организация КАК Организация,
	|	ТЧПродукция.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТЧПродукция.Номенклатура КАК Номенклатура,
	|	ТЧПродукция.Характеристика КАК Характеристика,
	|	ТЧПродукция.Ссылка КАК ИсточникОбеспечения,
	|	ТЧПродукция.Количество КАК Количество
	|ИЗ
	|	ТЧПродукция КАК ТЧПродукция
	|ГДЕ
	|	&ИспользоватьРезервирование
	|	И ТЧПродукция.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И ТЧПродукция.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТЧЗапасы.Дата КАК Период,
	|	ТЧЗапасы.Организация КАК Организация,
	|	ТЧЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТЧЗапасы.СчетУчета КАК СчетУчета,
	|	ТЧЗапасы.Номенклатура КАК Номенклатура,
	|	ТЧЗапасы.Характеристика КАК Характеристика,
	|	ТЧЗапасы.Партия КАК Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя,
	|	ТЧЗапасы.ЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ТЧЗапасы.Резерв КАК Количество,
	|	0 КАК Сумма,
	|	ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит) КАК ВидДвиженияУправленческий,
	|	&РезервированиеЗапасов КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	ТЧЗапасы КАК ТЧЗапасы
	|ГДЕ
	|	ТЧЗапасы.Резерв > 0
	|	И ТЧЗапасы.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.СчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Номенклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Характеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Партия КАК КоррПартия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.ВидДвиженияУправленческий КАК ВидДвиженияУправленческий,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.ВидДвиженияУправленческий,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТЧПродукция.Дата, ДЕНЬ) КАК Период,
	|	ТЧПродукция.Организация КАК Организация,
	|	ТЧПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТЧПродукция.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТЧПродукция.Номенклатура КАК Номенклатура,
	|	ТЧПродукция.Характеристика КАК Характеристика,
	|	ТЧПродукция.Партия КАК Партия,
	|	ТЧПродукция.Спецификация КАК Спецификация,
	|	ТЧПродукция.Количество КАК КоличествоПлан
	|ИЗ
	|	ТЧПродукция КАК ТЧПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Продукция.Дата КАК Период,
	|	Продукция.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Продукция.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА Продукция.Ссылка
	|		ИНАЧЕ Продукция.ЗаказПокупателя
	|	КОНЕЦ КАК Заказ,
	|	Продукция.Номенклатура КАК Номенклатура,
	|	Продукция.Характеристика КАК Характеристика,
	|	Продукция.Спецификация КАК Спецификация,
	|	Продукция.Партия КАК Партия,
	|	ЕСТЬNULL(ВидыПроизводстваЭтапы.Этап, ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства)) КАК Этап,
	|	Продукция.Количество КАК КоличествоПлан,
	|	0 КАК КоличествоФакт,
	|	Продукция.ПодразделениеЗавершающегоЭтапа КАК СтруктурнаяЕдиница
	|ИЗ
	|	ТЧПродукция КАК Продукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации КАК Спецификации
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПроизводства.Этапы КАК ВидыПроизводстваЭтапы
	|			ПО Спецификации.ВидПроизводства = ВидыПроизводстваЭтапы.Ссылка
	|		ПО Продукция.Спецификация = Спецификации.Ссылка
	|ГДЕ
	|	&ИспользоватьЭтапыПроизводства
	|	И &ИспользоватьРезервирование
	|	И Продукция.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|	И ВЫРАЗИТЬ(Продукция.Спецификация КАК Справочник.Спецификации).ВидПроизводства <> ЗНАЧЕНИЕ(Справочник.ВидыПроизводства.ПустаяСсылка)
	|	И Продукция.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Продукция.Дата,
	|	Продукция.Организация,
	|	ВЫБОР
	|		КОГДА Продукция.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА Продукция.Ссылка
	|		ИНАЧЕ Продукция.ЗаказПокупателя
	|	КОНЕЦ,
	|	Продукция.Номенклатура,
	|	Продукция.Характеристика,
	|	Продукция.Спецификация,
	|	Продукция.Партия,
	|	ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства),
	|	Продукция.Количество,
	|	0,
	|	ВЫБОР
	|		КОГДА Продукция.ПодразделениеЗавершающегоЭтапа = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА Продукция.СтруктурнаяЕдиница
	|		ИНАЧЕ Продукция.ПодразделениеЗавершающегоЭтапа
	|	КОНЕЦ
	|ИЗ
	|	ТЧПродукция КАК Продукция
	|ГДЕ
	|	&ИспользоватьЭтапыПроизводства
	|	И &ИспользоватьРезервирование
	|	И Продукция.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|	И ВЫРАЗИТЬ(Продукция.Спецификация КАК Справочник.Спецификации).ВидПроизводства = ЗНАЧЕНИЕ(Справочник.ВидыПроизводства.ПустаяСсылка)
	|	И Продукция.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказНаПроизводство);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("ИспользоватьТехоперации",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьТехоперации);
	Запрос.УстановитьПараметр("ИспользоватьРезервирование",  СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	Запрос.УстановитьПараметр("РезервированиеЗапасов", НСтр("ru = 'Резервирование запасов'"));
	Запрос.УстановитьПараметр("ИспользоватьЭтапыПроизводства",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьЭтапыПроизводства);
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГрафикДвиженияЗапасов", Результат[2].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыНаПроизводство", Результат[3].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПотребностьВЗапасах", Результат[4].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРазмещениеЗаказов", Результат[5].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", Результат[7].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыпускПродукции", Результат[8].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЭтапыПроизводства", Результат[9].Выгрузить());
	
	//Ресурсы
	Если ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятия") Тогда
		ТаблицаРасписаниеЗагрузкиРесурсов = ПланированиеРесурсовУНФ.ТаблицаДвиженийДокументов(ДокументСсылкаЗаказНаПроизводство);
		
		Если  ДокументСсылкаЗаказНаПроизводство.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
			ТаблицаРасписаниеЗагрузкиРесурсов.Очистить();
		КонецЕсли;
		
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасписаниеЗагрузкиРесурсов", ТаблицаРасписаниеЗагрузкиРесурсов);
	КонецЕсли;
	
	// Расчет стоимости списания запасов.
	СформироватьТаблицаЗапасыСборка(ДокументСсылкаЗаказНаПроизводство, СтруктураДополнительныеСвойства);
	
КонецПроцедуры

Процедура СформироватьТаблицаЗапасыСборка(ДокументСсылкаЗаказНаПроизводство, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказНаПроизводство);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия");
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуетсяСвободныйОстаток = СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстаток;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
			СтрокаТаблицыРасход.ЗаказПокупателя = Неопределено;
			
			// Приход.
			СтрокаТаблицыПриход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
			СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
			СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
			СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
			СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
			СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
			
			СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
			СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
			СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
			СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
			СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
			СтрокаТаблицыПриход.КоррЗаказПокупателя = Неопределено;
			
			СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
			СтрокаТаблицыПриход.Количество = КоличествоТребуетсяСвободныйОстаток;
			
			СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
			СтрокаТаблицыПриход.ВидДвиженияУправленческий = ВидДвиженияБухгалтерии.Дебет;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры

#КонецОбласти 

#Область Разборка

Процедура ИнициализироватьДанныеДокументаРазборка(ДокументСсылкаЗаказНаПроизводство, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПроизводствоПродукция.НомерСтроки КАК НомерСтроки,
	|	ЗаказНаПроизводствоПродукция.Ссылка КАК Ссылка,
	|	ЗаказНаПроизводство.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	ЗаказНаПроизводство.УчетПотребностиПоЗаказам КАК УчетПотребностиПоЗаказам,
	|	ЗаказНаПроизводство.УчетПотребностиПоЗаказамНаПроизводство КАК УчетПотребностиПоЗаказамНаПроизводство,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаПродукции,
	|	ЗаказНаПроизводство.Дата КАК Дата,
	|	ЗаказНаПроизводство.ЗапланированыОперации КАК ЗапланированыОперации,
	|	НАЧАЛОПЕРИОДА(ЗаказНаПроизводство.Финиш, ДЕНЬ) КАК Финиш,
	|	НАЧАЛОПЕРИОДА(ЗаказНаПроизводство.Старт, ДЕНЬ) КАК Старт,
	|	&Организация КАК Организация,
	|	ЗаказНаПроизводствоПродукция.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказНаПроизводствоПродукция.Номенклатура КАК Номенклатура,
	|	ЗаказНаПроизводствоПродукция.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНаПроизводствоПродукция.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЗаказНаПроизводствоПродукция.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ЗаказНаПроизводствоПродукция.Спецификация КАК Спецификация,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПроизводствоПродукция.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказНаПроизводствоПродукция.Количество * ВЫРАЗИТЬ(ЗаказНаПроизводствоПродукция.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ ЗаказНаПроизводствоПродукция.Количество
	|	КОНЕЦ КАК Количество,
	|	ЗаказНаПроизводствоПродукция.ПодразделениеЗавершающегоЭтапа КАК ПодразделениеЗавершающегоЭтапа
	|ПОМЕСТИТЬ ТЧПродукция
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|		ПО ЗаказНаПроизводствоПродукция.Ссылка = ЗаказНаПроизводство.Ссылка
	|ГДЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка = &Ссылка
	|	И НЕ ЗаказНаПроизводство.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаПроизводствоЗапасы.Ссылка КАК Ссылка,
	|	ЗаказНаПроизводствоЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказНаПроизводство.Старт КАК Старт,
	|	ЗаказНаПроизводство.Финиш КАК Финиш,
	|	ЗаказНаПроизводство.Дата КАК Дата,
	|	ЗаказНаПроизводство.УчетПотребностиПоЗаказамНаПроизводство КАК УчетПотребностиПоЗаказамНаПроизводство,
	|	ЗаказНаПроизводство.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	ЗаказНаПроизводство.УчетПотребностиПоЗаказам КАК УчетПотребностиПоЗаказам,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	&Организация КАК Организация,
	|	ЗаказНаПроизводствоЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоЗапасы.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА ЗаказНаПроизводствоЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ЗаказНаПроизводствоЗапасы.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетУчета,
	|	ЗаказНаПроизводствоЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНаПроизводствоЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЗаказНаПроизводствоЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ЗаказНаПроизводствоЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПроизводствоЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказНаПроизводствоЗапасы.Количество * ВЫРАЗИТЬ(ЗаказНаПроизводствоЗапасы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ ЗаказНаПроизводствоЗапасы.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПроизводствоЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказНаПроизводствоЗапасы.Резерв * ВЫРАЗИТЬ(ЗаказНаПроизводствоЗапасы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ ЗаказНаПроизводствоЗапасы.Резерв
	|	КОНЕЦ КАК Резерв
	|ПОМЕСТИТЬ ТЧЗапасы
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Запасы КАК ЗаказНаПроизводствоЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|		ПО ЗаказНаПроизводствоЗапасы.Ссылка = ЗаказНаПроизводство.Ссылка
	|ГДЕ
	|	ЗаказНаПроизводствоЗапасы.Ссылка = &Ссылка
	|	И НЕ ЗаказНаПроизводство.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	0 КАК НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ЗаказНаПроизводствоПродукция.Ссылка.Финиш, ДЕНЬ) КАК Период,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоПродукция.УчетПотребностиПоСкладам
	|				И ЗаказНаПроизводствоПродукция.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ЗаказНаПроизводствоПродукция.СтруктурнаяЕдиницаПродукции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоПродукция.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ЗаказНаПроизводствоПродукция.Ссылка
	|		ИНАЧЕ ЗаказНаПроизводствоПродукция.ЗаказПокупателя
	|	КОНЕЦ КАК Заказ,
	|	ЗаказНаПроизводствоПродукция.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНаПроизводствоПродукция.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЗаказНаПроизводствоПродукция.Количество КАК Количество
	|ИЗ
	|	ТЧПродукция КАК ЗаказНаПроизводствоПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ЗаказНаПроизводствоЗапасы.НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ЗаказНаПроизводствоЗапасы.Ссылка.Старт, ДЕНЬ),
	|	&Организация,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоЗапасы.УчетПотребностиПоСкладам
	|			ТОГДА ЗаказНаПроизводствоЗапасы.СтруктурнаяЕдиницаПродукции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Поступление),
	|	ЗаказНаПроизводствоЗапасы.Ссылка,
	|	ЗаказНаПроизводствоЗапасы.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНаПроизводствоЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЗаказНаПроизводствоЗапасы.Количество
	|ИЗ
	|	ТЧЗапасы КАК ЗаказНаПроизводствоЗапасы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ЗаказНаПроизводствоЗапасы.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоЗапасы.УчетПотребностиПоСкладам
	|			ТОГДА ЗаказНаПроизводствоЗапасы.СтруктурнаяЕдиницаПродукции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ЗаказНаПроизводствоЗапасы.Ссылка КАК ЗаказНаПроизводство,
	|	ЗаказНаПроизводствоЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНаПроизводствоЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЗаказНаПроизводствоЗапасы.Количество КАК Количество
	|ИЗ
	|	ТЧЗапасы КАК ЗаказНаПроизводствоЗапасы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ЗаказНаПроизводствоОперации.Ссылка.Дата,
	|	&Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка),
	|	ЗаказНаПроизводствоОперации.Ссылка,
	|	ЗаказНаПроизводствоОперации.Операция,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗаказНаПроизводствоОперации.Нормочасы
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Операции КАК ЗаказНаПроизводствоОперации
	|ГДЕ
	|	ЗаказНаПроизводствоОперации.Ссылка = &Ссылка
	|	И НЕ ЗаказНаПроизводствоОперации.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаПроизводствоПродукция.Старт КАК Период,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоПродукция.УчетПотребностиПоСкладам
	|				И ЗаказНаПроизводствоПродукция.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ЗаказНаПроизводствоПродукция.СтруктурнаяЕдиницаПродукции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|				ИЛИ ЗаказНаПроизводствоПродукция.УчетПотребностиПоЗаказам
	|			ТОГДА ЗаказНаПроизводствоПродукция.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|					И ЗаказНаПроизводствоПродукция.УчетПотребностиПоЗаказамНаПроизводство
	|				ИЛИ ЗаказНаПроизводствоПродукция.УчетПотребностиПоЗаказам
	|			ТОГДА ЗаказНаПроизводствоПродукция.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказНаПроизводство,
	|	ЗаказНаПроизводствоПродукция.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНаПроизводствоПродукция.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЗаказНаПроизводствоПродукция.Количество КАК Количество
	|ИЗ
	|	ТЧПродукция КАК ЗаказНаПроизводствоПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ЗаказНаПроизводствоЗапасы.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ЗаказНаПроизводствоЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказНаПроизводствоЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНаПроизводствоЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЗаказНаПроизводствоЗапасы.Ссылка КАК ИсточникОбеспечения,
	|	ЗаказНаПроизводствоЗапасы.Количество КАК Количество
	|ИЗ
	|	ТЧЗапасы КАК ЗаказНаПроизводствоЗапасы
	|ГДЕ
	|	&ИспользоватьРезервирование
	|	И ЗаказНаПроизводствоЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ЗаказНаПроизводствоПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоПродукция.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА ЗаказНаПроизводствоПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ЗаказНаПроизводствоПродукция.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетУчета,
	|	ЗаказНаПроизводствоПродукция.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНаПроизводствоПродукция.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЗаказНаПроизводствоПродукция.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя,
	|	ЗаказНаПроизводствоПродукция.ЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПроизводствоПродукция.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказНаПроизводствоПродукция.Резерв
	|		ИНАЧЕ ЗаказНаПроизводствоПродукция.Резерв * ЗаказНаПроизводствоПродукция.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	0 КАК Сумма,
	|	ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит) КАК ВидДвиженияУправленческий,
	|	&РезервированиеЗапасов КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|ГДЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка = &Ссылка
	|	И ЗаказНаПроизводствоПродукция.Резерв > 0
	|	И ЗаказНаПроизводствоПродукция.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	И НЕ ЗаказНаПроизводствоПродукция.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.СчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Номенклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Характеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Партия КАК КоррПартия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.ВидДвиженияУправленческий КАК ВидДвиженияУправленческий,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.ВидДвиженияУправленческий,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаПроизводствоЗапасы.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ЗаказНаПроизводствоЗапасы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗаказНаПроизводствоЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказНаПроизводствоЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНаПроизводствоЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЗаказНаПроизводствоЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ЗаказНаПроизводствоЗапасы.Спецификация КАК Спецификация,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПроизводствоЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказНаПроизводствоЗапасы.Количество
	|		ИНАЧЕ ЗаказНаПроизводствоЗапасы.Количество * ЗаказНаПроизводствоЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК КоличествоПлан
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Запасы КАК ЗаказНаПроизводствоЗапасы
	|ГДЕ
	|	ЗаказНаПроизводствоЗапасы.Ссылка = &Ссылка
	|	И НЕ ЗаказНаПроизводствоЗапасы.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказНаПроизводство);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("ИспользоватьРезервирование",  СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	Запрос.УстановитьПараметр("РезервированиеЗапасов", НСтр("ru = 'Резервирование запасов'"));

	Результат = Запрос.ВыполнитьПакет();

	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГрафикДвиженияЗапасов", Результат[2].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыНаПроизводство", Результат[3].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПотребностьВЗапасах", Результат[4].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРазмещениеЗаказов", Результат[5].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", Результат[7].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыпускПродукции", Результат[8].Выгрузить());
	
	//Ресурсы
	Если ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятия") Тогда
		
		ТаблицаРасписаниеЗагрузкиРесурсов = ПланированиеРесурсовУНФ.ТаблицаДвиженийДокументов(ДокументСсылкаЗаказНаПроизводство);
		
		Если  ДокументСсылкаЗаказНаПроизводство.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
			ТаблицаРасписаниеЗагрузкиРесурсов.Очистить();
		КонецЕсли;
		
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасписаниеЗагрузкиРесурсов", ТаблицаРасписаниеЗагрузкиРесурсов);
		
	КонецЕсли;
	
	// Расчет стоимости списания запасов.
	СформироватьТаблицаЗапасыРазборка(ДокументСсылкаЗаказНаПроизводство, СтруктураДополнительныеСвойства);
	
КонецПроцедуры

Процедура СформироватьТаблицаЗапасыРазборка(ДокументСсылкаЗаказНаПроизводство, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказНаПроизводство);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия");
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуетсяСвободныйОстаток = СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстаток;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
	
			// Расход.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
			СтрокаТаблицыРасход.ЗаказПокупателя = Неопределено;
			
			// Приход.
			СтрокаТаблицыПриход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
			СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
			СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
			СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
			СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
			СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
			
			СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
			СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
			СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
			СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
			СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
			СтрокаТаблицыПриход.КоррЗаказПокупателя = Неопределено;
			
			СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
			СтрокаТаблицыПриход.Количество = КоличествоТребуетсяСвободныйОстаток;
			
			СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
			СтрокаТаблицыПриход.ВидДвиженияУправленческий = ВидДвиженияБухгалтерии.Дебет;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область РаботаСКалендарем
// Процедура заполняет таблицу описаний расширенного ввода записи календаря
//
// Параметры:
//  ТаблицаОписаний	 - ТаблицаЗначений	 - описание колонок см. Справочник.ЗаписиКалендаряСотрудника.ПриЗаполненииРасширенногоВводаЗаписиКалендаря()
//
Процедура ПриЗаполненииРасширенногоВводаЗаписиКалендаря(ТаблицаОписаний) Экспорт
	
	НоваяСтрока = ТаблицаОписаний.Добавить();
	НоваяСтрока.ИмяФормы = "Документ.ЗаказНаПроизводство.ФормаОбъекта";
	НоваяСтрока.ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ВидОперации", Перечисления.ВидыОперацийЗаказНаПроизводство.Сборка));
	НоваяСтрока.Представление = НСтр("ru='Задание на производство: сборка'");
	
	НоваяСтрока = ТаблицаОписаний.Добавить();
	НоваяСтрока.ИмяФормы = "Документ.ЗаказНаПроизводство.ФормаОбъекта";
	НоваяСтрока.ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ВидОперации", Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка));
	НоваяСтрока.Представление = НСтр("ru='Задание на производство: разборка'");
	
КонецПроцедуры

// Функция определяет пиктограмму для элемента записи календаря
//
// Параметры:
//  Событие	 - ДокументСсылка.Событие	 - событие, для записи календаря которого подбирается картинка
// 
// Возвращаемое значение:
//  Картинка - пиктограмма записи календаря
//
Функция КартинкаЗаписиКалендаря(Источник) Экспорт
	
	Картинка = БиблиотекаКартинок.РазделПроизводство;
	
	Возврат Картинка;
	
КонецФункции

// Функция определяет цвет текста для элемента записи календаря
//
// Параметры:
//  Событие	 - ДокументСсылка.Событие	 - событие, для записи календаря которого подбирается цвет
// 
// Возвращаемое значение:
//  Цвет - цвет текста записи календаря
//
Функция ЦветТекстаЗаписиКалендаря(Источник) Экспорт
	
	ЦветСостояния = Новый Цвет;

	Возврат ЦветСостояния;
	
КонецФункции

#КонецОбласти

#КонецОбласти 

#КонецЕсли

