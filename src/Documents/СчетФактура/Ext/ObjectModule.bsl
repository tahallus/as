#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ТребуетсяОтразитьСчетФактуройЗапасыВРазрезеГТД()
	
	Возврат ГрузовыеТаможенныеДекларацииСервер.НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД(Ссылка);
	
КонецФункции

Функция ТребуетсяОтразитьСуммыДокументаВНациональнойВалюте()
	
	Если УдалитьЗапасы.Количество() < 1 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Продажа")
		ИЛИ
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Корректировка"))
		И Договор.РасчетыВУсловныхЕдиницах
		И ВалютаДокумента <> Константы.НациональнаяВалюта.Получить()
		И Договор.ВалютаРасчетов <> Константы.НациональнаяВалюта.Получить();
	
КонецФункции

#Область ПроцедурыЗаполненияДокумента

Процедура ПроверитьДокументыОснованияСчетФактуры()
	
	Для каждого ТекСтрока Из ДокументыОснования Цикл
		
		Если ТипЗнч(ТекСтрока.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекСтрока.ДокументОснование, "ДокументОснование, ВидОперации");
			Если СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(РеквизитыОснования.ДокументОснование) = Неопределено Тогда
				
				ШаблонТекст = НСтр("ru = 'Перед добавлением %1 счета-фактуры создайте счет-фактуру у документа-основания'");
				
				ЭтоИсправление = (РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
				ОписаниеВидаОперации = ?(ЭтоИсправление, НСтр("ru = 'исправления'"), НСтр("ru = 'корректировочного'"));
				
				ВызватьИсключение СтрШаблон(ШаблонТекст, ОписаниеВидаОперации);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ТекСтрока.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеВКассу")
			ИЛИ ТипЗнч(ТекСтрока.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеНаСчет")
			ИЛИ ТипЗнч(ТекСтрока.ДокументОснование) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
			
			Если НЕ Документы.СчетФактура.ТребуетсяВводитьСчетФактуруНаАванс(ТекСтрока.ДокументОснование) Тогда
				ТекстИсключения = НСтр("ru = 'Для операции, которая выбрана в документе %1,
					|создание счета-фактуры не требуется.'"
				);
				
				ВызватьИсключение СтрШаблон(ТекстИсключения, СокрЛП(ТекСтрока.ДокументОснование));
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура("ПризнакАванса", Истина);
			
			НайденныеСтроки = ТекСтрока.ДокументОснование.РасшифровкаПлатежа.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() < 1 Тогда
				
				ТекстИсключения = НСтр("ru = 'В документе %1 нет авансовых данных.
					|Создание счета-фактуры не требуется.'");
				
				ВызватьИсключение СтрШаблон(ТекстИсключения, СокрЛП(ТекСтрока.ДокументОснование));
				
			КонецЕсли;
			
			Если ДополнительныеСвойства.Свойство("ЭтоСуммоваяРазница") Тогда
				
				ОтсутствуетДоговорУЕ = Истина;
				Для каждого СтрокаРасшифровки Из ТекСтрока.ДокументОснование.РасшифровкаПлатежа Цикл
					
					Если СтрокаРасшифровки.Договор.РасчетыВУсловныхЕдиницах Тогда
						
						ОтсутствуетДоговорУЕ = Ложь;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ОтсутствуетДоговорУЕ Тогда
					
					ТекстИсключения = НСтр("ru = 'Счет-фактура с видом операции Суммовые разницы формируется по договорам в У.Е.
						|В документе %1 отсутствуют договоры в условных единицах.'");
					
					ВызватьИсключение СтрШаблон(ТекстИсключения, СокрЛП(ТекСтрока.ДокументОснование));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НайденныйСчетФактура = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(ТекСтрока.ДокументОснование);
		Если ЗначениеЗаполнено(НайденныйСчетФактура)
			И НайденныйСчетФактура.Ссылка <> Ссылка Тогда
			
			ШаблонТекст = НСтр("ru = 'Для документа ""%1"" 
				|уже введен счет-фактура ""%2"".
				|Запись еще одного документа ""Счет-фактура"" не допускается!'");
			
			ВызватьИсключение СтрШаблон(ШаблонТекст, ТекСтрока.ДокументОснование, НайденныйСчетФактура.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуДокументаОснования(СсылкаНаДокументОснование)
	
	Если НЕ ОбщегоНазначения.ЗначениеСсылочногоТипа(СсылкаНаДокументОснование) Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru ='Документ-основание должен быть ссылочного типа'"), СсылкаНаДокументОснование);
		
	КонецЕсли;
		
	Если СсылкаНаДокументОснование.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru ='Для документа %1 ввод счета-фактуры не требуется'"), СсылкаНаДокументОснование);
		
	КонецЕсли;
	
	Если ДокументыОснования.Найти(СсылкаНаДокументОснование, "ДокументОснование") = Неопределено Тогда
		
		НоваяСтрока 					= ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование	= СсылкаНаДокументОснование;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыОснования(ДанныеЗаполнения)
	
	ДокументыОснования.Очистить();
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
		
		ДобавитьСтрокуДокументаОснования(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ТаблицаЗначений") Тогда
		
		Для каждого СтрокаТаблицы Из ДанныеЗаполнения Цикл
			
			ДобавитьСтрокуДокументаОснования(СтрокаТаблицы.ДокументОснование);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Ссылка") Тогда
			
			ДобавитьСтрокуДокументаОснования(ДанныеЗаполнения.Ссылка);
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЭтоСуммоваяРазница") Тогда
			
			ДополнительныеСвойства.Вставить("ЭтоСуммоваяРазница", ДанныеЗаполнения.ЭтоСуммоваяРазница);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьДокументыОснованияСчетФактуры();
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеСПроверкой(Приемник, Источник, ИмяРеквизита, ЗапретитьРазличия = Ложь)
	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.АктВыполненныхРабот")
		И ИмяРеквизита = "ПодписьКладовщика" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗапретитьРазличия
		И ЗначениеЗаполнено(Приемник[ИмяРеквизита])
		Тогда
		
		Если Приемник[ИмяРеквизита] <> Источник[ИмяРеквизита] Тогда
			
			ВызватьИсключение СтрШаблон(НСтр("ru ='Ввод счета-фактуры по различающимся значениям запрещен (%1).'"), ИмяРеквизита);
			
		КонецЕсли;
		
		Приемник[ИмяРеквизита] = Источник[ИмяРеквизита];
		
	Иначе
		
		Приемник[ИмяРеквизита] = Источник[ИмяРеквизита];
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования)
	
	СуммыДокументовОснований.СуммаДокумента = СуммыДокументовОснований.СуммаДокумента + СуммаДокументаОснования;
	СуммыДокументовОснований.СуммаНДСДокумента = СуммыДокументовОснований.СуммаНДСДокумента + СуммаНДСДокументаОснования;
	
	Если ДанныеЗаполнения.СуммаВключаетНДС Тогда
		
		СуммыДокументовОснований.СуммаДокумента = СуммыДокументовОснований.СуммаДокумента - СуммаНДСДокументаОснования;
		
	КонецЕсли;
	
КонецПроцедуры

#Область Реализация

Процедура ЗаполнитьСведенияШапкиПоРеализации(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Контрагент", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Договор", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ВалютаДокумента", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Кратность");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Курс");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ПодписьРуководителя");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ПодписьГлавногоБухгалтера");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ПодписьКладовщика");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ОснованиеПечати");
		
		ВидОперацийВозвратов = Новый Массив;
		ВидОперацийВозвратов.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику);
		ВидОперацийВозвратов.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту);
		ВидОперацийВозвратов.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки);
		ВидОперацийВозвратов.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения);
		
		Если СведенияДокументовОснований.ЭтоВозврат <> Перечисления.ДаНет.Да Тогда
			
			СведенияДокументовОснований.ЭтоВозврат = ?(ВидОперацийВозвратов.Найти(ДанныеЗаполнения.ВидОперации) = Неопределено, Перечисления.ДаНет.Нет, Перечисления.ДаНет.Да);
			
		КонецЕсли;
		
		// Прослеживаемость
		ЕстьПрослеживаемыеТовары = (ДанныеЗаполнения.Запасы.Итог("ПрослеживаемыйТовар") > 0);
		СведенияДокументовОснований.ЕстьПрослеживаемыеТовары = Макс(
			СведенияДокументовОснований.ЕстьПрослеживаемыеТовары,
			ЕстьПрослеживаемыеТовары);
		// Конец Прослеживаемость
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
	
		ДокументРеализацииСсылка = Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(ДанныеЗаполнения, Истина);
		Если НЕ ПустаяСтрока(ДокументРеализацииСсылка.ОснованиеПечати) Тогда
			
			СведенияДокументовОснований.ОснованиеПечати = ДокументРеализацииСсылка.ОснованиеПечати;
			
		КонецЕсли;
		
		СведенияДокументовОснований.Вставить("ИсправляемыйСчетФактура", Неопределено);
		СведенияДокументовОснований.Вставить("ВидОперации", Неопределено);
		СведенияДокументовОснований.Вставить("НомерИсходногоДокумента", Неопределено);
		СведенияДокументовОснований.Вставить("ДатаИсходногоДокумента", Неопределено);
		СведенияДокументовОснований.Вставить("НомерИсправляемогоКорректировочногоДокумента", Неопределено);
		СведенияДокументовОснований.Вставить("ДатаИсправляемогоКорректировочногоДокумента", Неопределено);
		СведенияДокументовОснований.Вставить("НомерИсправления", Неопределено);
		СведенияДокументовОснований.Вставить("Исправление", Неопределено);
		СведенияДокументовОснований.Вставить("УчитыватьИсправлениеИсходногоДокумента", Неопределено);
		СведенияДокументовОснований.Вставить("НомерИсправленияИсходногоДокумента", Неопределено);
		СведенияДокументовОснований.Вставить("ДатаИсправленияИсходногоДокумента", Неопределено);
		
		РеквизитыКорректировки = Документы.СчетФактура.ПолучитьПараметрыЗаполненияКорректировочногоСчетаФактуры(ДанныеЗаполнения);
		Для каждого ЭлементСтруктуры Из РеквизитыКорректировки Цикл
			
			Если СведенияДокументовОснований.Свойство(ЭлементСтруктуры.Ключ) Тогда
				
				СведенияДокументовОснований[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ОснованиеПечати");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДатаНомерДокументовОплатыПоРеализации(ДанныеЗаполнения, СведенияДокументовОснований)
	
	Если НЕ ДанныеОбОплатеИзмененыВручную Тогда
		текДатаНомерДокументовОплаты = Документы.СчетФактура.ПолучитьДатаНомерДокументовОплаты(ДанныеЗаполнения);
		Если текДатаНомерДокументовОплаты <> Неопределено Тогда
			ДатаНомерДокументовОплаты.Загрузить(текДатаНомерДокументовОплаты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоРеализации(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходнаяНакладная")
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		СуммаДокументаОснования = ДанныеЗаполнения.Запасы.Итог("Сумма") + ДанныеЗаполнения.СтоимостьДоставки;
		СуммаНДСДокументаОснования = (ДанныеЗаполнения.Запасы.Итог("СуммаНДС") + ДанныеЗаполнения.СуммаНДСДоставки);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		СуммаДокументаОснования = ДанныеЗаполнения.РаботыИУслуги.Итог("Сумма");
		СуммаНДСДокументаОснования = ДанныеЗаполнения.РаботыИУслуги.Итог("СуммаНДС");
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		
		СуммаДокументаОснования = ДанныеЗаполнения.Запасы.Итог("Сумма") ;
		СуммаНДСДокументаОснования = ДанныеЗаполнения.Запасы.Итог("СуммаНДС");
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		СуммаДокументаОснования = ДанныеЗаполнения.Запасы.Итог("Сумма") + ДанныеЗаполнения.Работы.Итог("Сумма");
		СуммаНДСДокументаОснования = ДанныеЗаполнения.Запасы.Итог("СуммаНДС") + ДанныеЗаполнения.Работы.Итог("СуммаНДС"); 
		// Суммы доставки - доставка в ЗН не автоматизирована.
		
	КонецЕсли;
	
	ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьСведенияШапкиПоПередачеТоваровМеждуОрганизациями(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация", Истина);
	СведенияДокументовОснований.Контрагент = ДанныеЗаполнения.КонтрагентПолучатель;
	СведенияДокументовОснований.Договор = ДанныеЗаполнения.Договор;
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ВалютаДокумента", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Кратность");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Курс");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ПодписьРуководителя");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ПодписьГлавногоБухгалтера");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ПодписьКладовщика");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ОснованиеПечати");
	
КонецПроцедуры

#Область ОтчетКомитенту

Процедура ЗаполнитьСведенияШапкиПоОтчетуКомитента(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Контрагент", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Договор", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ВалютаДокумента", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Кратность");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Курс");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ОснованиеПечати");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ПодписьРуководителя");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения.Организация, "ПодписьГлавногоБухгалтера");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоОтчетуКомитента(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований)
	
	СуммыДокументовОснований.СуммаДокумента = ДанныеЗаполнения.Запасы.Итог("СуммаВознаграждения");
	СуммыДокументовОснований.СуммаНДСДокумента = ДанныеЗаполнения.Запасы.Итог("СуммаНДСВознаграждения");
	Если ДанныеЗаполнения.СуммаВключаетНДС Тогда
		
		СуммыДокументовОснований.СуммаДокумента = СуммыДокументовОснований.СуммаДокумента - СуммыДокументовОснований.СуммаНДСДокумента;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтчетКомиссионера

// Поддержка механизма заполнения сводных счетов-фактур на основании отчетов комиссионеров
//

Процедура ЗаполнитьПоПокупателямОтчетаКомиссионера(СтруктураЗаполнения) Экспорт
	
	// Заполнение шапки.
	ДанныеЗаполнения	= СтруктураЗаполнения.Ссылка;
	Дата				= СтруктураЗаполнения.Дата;
	ВидОперации			= Перечисления.ВидыОперацийСчетФактура.Продажа;
	Организация			= СтруктураЗаполнения.Организация;
	Контрагент			= СтруктураЗаполнения.Покупатель;
	Договор				= Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(СтруктураЗаполнения.Покупатель);
	СводныйКомиссионный = СтруктураЗаполнения.СводныйКомиссионный;
	ВалютаДокумента		= СтруктураЗаполнения.ВалютаДокумента;
	СуммаВключаетНДС	= СтруктураЗаполнения.СуммаВключаетНДС; // переменная
	Курс				= СтруктураЗаполнения.Курс;
	Кратность			= СтруктураЗаполнения.Кратность;
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
		
	КонецЕсли;
	
	Если ДокументыОснования.Найти(ДанныеЗаполнения, "ДокументОснование") = Неопределено Тогда
		
		НоваяСтрока = ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = ДанныеЗаполнения;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ПодписьРуководителя = Организация.ПодписьРуководителя;
		ПодписьГлавногоБухгалтера = Организация.ПодписьГлавногоБухгалтера;
		
	КонецЕсли;
	
	// Прослеживаемость
	Для Каждого СтрокаЗапасы Из СтруктураЗаполнения.Запасы Цикл
		Если СтрокаЗапасы.ПрослеживаемыйТовар Тогда
			ЕстьПрослеживаемыеТовары = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьТабличнуюЧастьПоОтчетуКомиссионера(СтруктураЗаполнения, СуммаВключаетНДС);
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПоОтчетуКомиссионера(СтруктураЗаполнения, СуммаВключаетНДС) Экспорт
	
	ФорматСчетФактуры = ?(УдалитьЗапасы.Количество() > 0, "1.6.11", "1.6.12");
	
	Если ФорматСчетФактуры = "1.6.11" Тогда
		
		УдалитьЗапасы.Очистить();
		
	КонецЕсли;
	
	СуммаДокумента = 0;
	СуммаНДСДокумента = 0;
	
	РезультатПоиска = СтруктураЗаполнения.Запасы;
	Для Каждого СтрокаТабличнойЧасти Из РезультатПоиска Цикл
		
		Если ФорматСчетФактуры = "1.6.11" Тогда
			
			НоваяСтрока = УдалитьЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			
			Если НоваяСтрока.Количество = 0 Тогда
				НоваяСтрока.Цена = 0;
			ИначеЕсли СуммаВключаетНДС Тогда
				НоваяСтрока.Цена = НоваяСтрока.Сумма / ((НоваяСтрока.СтавкаНДС.Ставка + 100) / 100) / НоваяСтрока.Количество;
			Иначе
				НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СуммаВключаетНДС Тогда
			
			СуммаБезНДС = Окр(СтрокаТабличнойЧасти.Сумма / ((СтрокаТабличнойЧасти.СтавкаНДС.Ставка + 100) / 100), 2);
			
		Иначе
			
			СуммаБезНДС = СтрокаТабличнойЧасти.Сумма;
			
		КонецЕсли;
		
		Если ФорматСчетФактуры = "1.6.11" Тогда
			
			НоваяСтрока.Сумма = СуммаБезНДС;
			
		КонецЕсли;
		
		СуммаДокумента = СуммаДокумента + СуммаБезНДС;
		СуммаНДСДокумента = СуммаНДСДокумента + СтрокаТабличнойЧасти.СуммаНДС;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтчетОПереработке

Процедура ЗаполнитьСведенияШапкиПоПереработке(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Контрагент", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Договор", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ВалютаДокумента", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Кратность");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Курс");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ОснованиеПечати");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ПодписьРуководителя");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ПодписьГлавногоБухгалтера");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ПодписьКладовщика");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоПереработке(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
	
	СуммаДокументаОснования = ДанныеЗаполнения.Продукция.Итог("Сумма");
	СуммаНДСДокументаОснования = ДанныеЗаполнения.Продукция.Итог("СуммаНДС");
	
	ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования);
	
КонецПроцедуры

#КонецОбласти

#Область Ремонт

Процедура ЗаполнитьСведенияШапкиПоРемонту(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Контрагент", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Договор", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ВалютаДокумента", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Кратность");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Курс");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ПодписьРуководителя");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ПодписьГлавногоБухгалтера");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ПодписьКладовщика");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	
	СведенияДокументовОснований.ОснованиеПечати = ДанныеЗаполнения.Договор.Наименование;
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоРемонту(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
	
	СуммаДокументаОснования = ДанныеЗаполнения.СуммаДокумента;
	СуммаНДСДокументаОснования = ДанныеЗаполнения.СуммаНДС;
	
	ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования);
	
КонецПроцедуры

#КонецОбласти

#Область Авансы

Процедура ЗаполнитьСведенияШапкиПоАвансу(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ВидОперацииСчетФактуры = Перечисления.ВидыОперацийСчетФактура[?(ДополнительныеСвойства.Свойство("ЭтоСуммоваяРазница"), "СуммовыеРазницы", "Аванс")];
	СведенияДокументовОснований.Вставить("ВидОперации", ВидОперацииСчетФактуры);
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация", Истина);
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Контрагент", Истина);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
		
		ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ПодписьРуководителя");
		ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ПодписьГлавногоБухгалтера");
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеНаСчет")
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
		
		ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения.Организация, "ПодписьРуководителя");
		ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения.Организация, "ПодписьГлавногоБухгалтера");
		
	КонецЕсли;
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	
	Если ДанныеЗаполнения.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения.РасшифровкаПлатежа[0], "Договор", Истина);
		
	КонецЕсли;
	
	Если СведенияДокументовОснований.ВидОперации = Перечисления.ВидыОперацийСчетФактура.СуммовыеРазницы Тогда
		
		СведенияДокументовОснований.Вставить("ВалютаДокумента", Константы.НациональнаяВалюта.Получить());
		СведенияДокументовОснований.Вставить("СтавкаНДССуммовойРазницы", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(18));
		
	ИначеЕсли СведенияДокументовОснований.Свойство("ВалютаДокумента")
		И ЗначениеЗаполнено(СведенияДокументовОснований.ВалютаДокумента)
		И СведенияДокументовОснований.ВалютаДокумента <> ДанныеЗаполнения.ВалютаДенежныхСредств Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru ='Ввод счета-фактуры по различающимся значениям запрещен (%1).'"), НСтр("ru ='Валюта документа'"));
		
	Иначе
		
		СведенияДокументовОснований.Вставить("ВалютаДокумента", ДанныеЗаполнения.ВалютаДенежныхСредств);
		Если ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда 
			
			Если ДанныеЗаполнения.ВалютаДенежныхСредств <> Константы.НациональнаяВалюта.Получить() Тогда
				
				СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ДанныеЗаполнения.ВалютаДенежныхСредств));
				СведенияДокументовОснований.Вставить("Курс", СтруктураПоВалюте.Курс);
				СведенияДокументовОснований.Вставить("Кратность", СтруктураПоВалюте.Кратность);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоАвансу(ДанныеЗаполнения, СуммыДокументовОснований)
	
	СтавкаБезНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	
	СуммаНДСДокументаОснования = 0;
	СуммаДокументаОснования = 0;
	Для каждого СтрокаРасшифровки Из ДанныеЗаполнения.РасшифровкаПлатежа Цикл
		
		Если НЕ СтрокаРасшифровки.ПризнакАванса
			ИЛИ СтрокаРасшифровки.СтавкаНДС = СтавкаБезНДС Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СуммаНДСДокументаОснования = СуммаНДСДокументаОснования + СтрокаРасшифровки.СуммаНДС;
		СуммаДокументаОснования = СуммаДокументаОснования + (СтрокаРасшифровки.СуммаПлатежа - СтрокаРасшифровки.СуммаНДС);
		
	КонецЦикла;
	
	СуммыДокументовОснований.СуммаДокумента = СуммыДокументовОснований.СуммаДокумента + СуммаДокументаОснования;
	СуммыДокументовОснований.СуммаНДСДокумента = СуммыДокументовОснований.СуммаНДСДокумента + СуммаНДСДокументаОснования;
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуАванса(ДанныеЗаполнения, СуммыДокументовОснований)
	
	СтавкаБезНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	
	Для каждого СтрокаРасшифровки Из ДанныеЗаполнения.РасшифровкаПлатежа Цикл
		
		Если НЕ СтрокаРасшифровки.ПризнакАванса
			ИЛИ СтрокаРасшифровки.СтавкаНДС = СтавкаБезНДС Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтавкуНДСРасчетная = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(СтрокаРасшифровки.СтавкаНДС);
		
		Если Авансы.Количество() > 0
			И Авансы[0].СтавкаНДС = СтавкуНДСРасчетная Тогда
			
			СтрокаДатаНомерДокументовОплаты = Авансы[0];
			СтрокаДатаНомерДокументовОплаты.Сумма = СтрокаДатаНомерДокументовОплаты.Сумма + (СтрокаРасшифровки.СуммаПлатежа);
			СтрокаДатаНомерДокументовОплаты.СуммаНДС = СтрокаДатаНомерДокументовОплаты.СуммаНДС + СтрокаРасшифровки.СуммаНДС;
			
		Иначе
			
			СтрокаДатаНомерДокументовОплаты = Авансы.Добавить();
			СтрокаДатаНомерДокументовОплаты.Содержание = НСтр("ru ='Предварительная оплата'");
			СтрокаДатаНомерДокументовОплаты.Сумма = СтрокаРасшифровки.СуммаПлатежа;
			СтрокаДатаНомерДокументовОплаты.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(СтрокаРасшифровки.СтавкаНДС);
			СтрокаДатаНомерДокументовОплаты.СуммаНДС = СтрокаРасшифровки.СуммаНДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДатаНомерДокументовОплаты.Очистить();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
		
		СтрокаДатаНомерДокументовОплаты = ДатаНомерДокументовОплаты.Добавить();
		СтрокаДатаНомерДокументовОплаты.ДатаПлатежноРасчетногоДокумента = ДанныеЗаполнения.Дата;
		СтрокаДатаНомерДокументовОплаты.НомерПлатежноРасчетногоДокумента = ДанныеЗаполнения.Номер;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
		
		СтрокаДатаНомерДокументовОплаты = ДатаНомерДокументовОплаты.Добавить();
		СтрокаДатаНомерДокументовОплаты.ДатаПлатежноРасчетногоДокумента = ДанныеЗаполнения.ДатаВходящегоДокумента;
		СтрокаДатаНомерДокументовОплаты.НомерПлатежноРасчетногоДокумента = ДанныеЗаполнения.НомерВходящегоДокумента;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьСведения(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований)
	
	ТипыДокументовРеализаций = Новый Массив;
	ТипыДокументовРеализаций.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
	ТипыДокументовРеализаций.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	ТипыДокументовРеализаций.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
	ТипыДокументовРеализаций.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	
	Если ТипыДокументовРеализаций.Найти(ТипЗнч(ДанныеЗаполнения)) <> Неопределено Тогда
		
		ЗаполнитьСведенияШапкиПоРеализации(ДанныеЗаполнения, СведенияДокументовОснований);
		ЗаполнитьСуммуДокументаПоРеализации(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
		ЗаполнитьДатаНомерДокументовОплатыПоРеализации(ДанныеЗаполнения, СведенияДокументовОснований);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		
		ЗаполнитьСведенияШапкиПоОтчетуКомитента(ДанныеЗаполнения, СведенияДокументовОснований);
		ЗаполнитьСуммуДокументаПоОтчетуКомитента(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		
		// см. ЗаполнитьПоПокупателямОтчетаКомиссионера
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетОПереработке") Тогда
		
		ЗаполнитьСведенияШапкиПоПереработке(ДанныеЗаполнения, СведенияДокументовОснований);
		ЗаполнитьСуммуДокументаПоПереработке(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриемИПередачаВРемонт") Тогда
		
		ЗаполнитьСведенияШапкиПоРемонту(ДанныеЗаполнения, СведенияДокументовОснований);
		ЗаполнитьСуммуДокументаПоРемонту(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеВКассу")
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеНаСчет")
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
		
		ЗаполнитьСведенияШапкиПоАвансу(ДанныеЗаполнения, СведенияДокументовОснований);
		
		Если СведенияДокументовОснований.ВидОперации <> Перечисления.ВидыОперацийСчетФактура.СуммовыеРазницы Тогда
			
			ЗаполнитьСуммуДокументаПоАвансу(ДанныеЗаполнения, СуммыДокументовОснований);
			ЗаполнитьРасшифровкуАванса(ДанныеЗаполнения, СуммыДокументовОснований);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		
		ЗаполнитьСведенияШапкиПоПередачеТоваровМеждуОрганизациями(ДанныеЗаполнения, СведенияДокументовОснований);
		ЗаполнитьСуммуДокументаПоРеализации(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
		ЗаполнитьДатаНомерДокументовОплатыПоРеализации(ДанныеЗаполнения, СведенияДокументовОснований);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработкуЗаполнения()
	
	СуммыДокументовОснований = Новый Структура("СуммаДокумента, СуммаНДСДокумента", 0, 0);
	
	Если ДокументыОснования.Количество() < 1 Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СуммыДокументовОснований);
		Возврат;
		
	КонецЕсли;
	
	СведенияДокументовОснований = Новый Структура(
		"
		|Организация,
		|Контрагент, Договор,
		|ВалютаДокумента, Кратность, Курс,
		|ОснованиеПечати, ПодписьРуководителя, ПодписьГлавногоБухгалтера, ПодписьКладовщика,
		|Автор,
		|ХозяйственнаяОперация,
		|ЭтоВозврат"
	);
	
	СведенияДокументовОснований.Вставить("ЕстьПрослеживаемыеТовары", Ложь);
	
	УдалитьЗапасы.Очистить();
	Авансы.Очистить();
	Если НЕ ДанныеОбОплатеИзмененыВручную Тогда
		ДатаНомерДокументовОплаты.Очистить();
	КонецЕсли;
	
	Если НЕ ДополнительныеСвойства.Свойство("ЭтоСинхронизация")
		ИЛИ ДополнительныеСвойства.ЭтоСинхронизация = Ложь Тогда
		
		Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументыОснования[0].ДокументОснование, "Дата");
		
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ДокументыОснования Цикл
		
		ЗаполнитьСведения(СтрокаТаблицы.ДокументОснование, СведенияДокументовОснований, СуммыДокументовОснований);
		
		Если ТипЗнч(СтрокаТаблицы.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СведенияДокументовОснований,
				"НомерИсходногоДокумента, ДатаИсходногоДокумента, УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(СведенияДокументовОснований.ЭтоВозврат) Тогда
		
		СведенияДокументовОснований.ЭтоВозврат = Перечисления.ДаНет.Нет;
		
	КонецЕсли;
	
	СведенияДокументовОснований.Автор = Пользователи.АвторизованныйПользователь();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СведенияДокументовОснований);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СуммыДокументовОснований);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ВызватьИсключение НСтр("ru ='Для документа счет-фактура копирование не предусмотрено'");
	
КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И НЕ ДанныеЗаполнения.Свойство("Ссылка") Тогда
		
		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения)
		ИЛИ (ТипЗнч(ДанныеЗаполнения) = Тип("ТаблицаЗначений")) Тогда
		
		ЗаполнитьДокументыОснования(ДанныеЗаполнения);
		ВыполнитьОбработкуЗаполнения();
		
	Иначе
		
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		
	КонецЕсли;
	
	Если ЭтоВозврат <> Перечисления.ДаНет.Да Тогда
		
		ЭтоВозврат = Перечисления.ДаНет.Нет;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Исправление Тогда
		
		ПроверяемыеРеквизиты.Добавить("НомерИсправления");
		ПроверяемыеРеквизиты.Добавить("ДатаИсправления");
		
	КонецЕсли;
	
	Если ДокументыОснования.Количество() < 1 Тогда
		
		НеобходимоЗаполнитьДокументы = НСтр(
			"ru = 'Необходимо заполнить документы, которые являются основаниями счета-фактуры.'");
		ОбщегоНазначения.СообщитьПользователю(НеобходимоЗаполнитьДокументы, ЭтотОбъект, , , Отказ);
		
	Иначе
		
		Для каждого СтрокаТаблицы Из ДокументыОснования Цикл
			
			ДокументОснование = СтрокаТаблицы.ДокументОснование;
			
			Если ЗначениеЗаполнено(ДокументОснование)
				И НЕ ДокументОснование.Проведен Тогда
				
				ДокументОснованиеНеПроведен = СтрШаблон(НСтр(
					"ru = 'Документ-основание %1 № %2 от %3 не проведен. Проведение счет фактуры невозможно.'"),
					ТипЗнч(ДокументОснование), ДокументОснование.Номер, Формат(ДокументОснование.Дата, "ДЛФ=D;"));
				ОбщегоНазначения.СообщитьПользователю(ДокументОснованиеНеПроведен, ЭтотОбъект, , , Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
		
	КонецЕсли;
	
	Если ТребуетсяОтразитьСуммыДокументаВНациональнойВалюте() Тогда
		
		Если ДокументыОснования.Количество() = 1 И НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
			
			НеВыбранДокументОснование = НСтр("ru = 'Не выбран документ-основание.'");
			ОбщегоНазначения.СообщитьПользователю(НеВыбранДокументОснование, ЭтотОбъект, , , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСчетФактура.КорректировкаАванса Тогда
		
		ИмяСписка = НСтр("ru = 'Расшифровка аванса'");
		Для Каждого СтрокаАвансы Из Авансы Цикл
			
			ИндексСтроки = Формат(СтрокаАвансы.НомерСтроки - 1, "ЧН=0; ЧГ=");
			Если СтрокаАвансы.СуммаДоКорректировки > СтрокаАвансы.Сумма Тогда
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", НСтр("ru = 'Сумма'"), СтрокаАвансы.НомерСтроки, ИмяСписка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, СтрШаблон("Авансы[%1].Сумма", ИндексСтроки), "Объект", Отказ);
				
			КонецЕсли;
			
			Если СтрокаАвансы.СуммаНДСДоКорректировки > СтрокаАвансы.СуммаНДС Тогда
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", НСтр("ru = 'Сумма НДС'"), СтрокаАвансы.НомерСтроки, ИмяСписка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, СтрШаблон("Авансы[%1].СуммаНДС", ИндексСтроки), "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Авансы.КорректируемыйСчетФактура");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Авансы.СуммаДоКорректировки");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Авансы.СтавкаНДСДоКорректировки");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Авансы.СуммаНДСДоКорректировки");
		
	КонецЕсли; 
	
	ИменаТабличныхЧастей = Новый Массив;
	ИменаТабличныхЧастей.Добавить("УдалитьЗапасы");
	
	ГрузовыеТаможенныеДекларацииСервер.ПриОбработкеПроверкиЗаполнения(Отказ, ЭтотОбъект, ИменаТабличныхЧастей);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	// Проверка на уникальность счета-фактуры
	Для каждого СтрокаОснование Из ДокументыОснования Цикл
		
		ДокументОснование = СтрокаОснование.ДокументОснование;
		Если ЗначениеЗаполнено(ДокументОснование) 
			И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
			
			НайденныйСчетФактура = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(ДокументОснование);
			Если ЗначениеЗаполнено(НайденныйСчетФактура) И НайденныйСчетФактура.Ссылка <> Ссылка Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для документа ""%1"" 
												|уже введен счет-фактура ""%2"". 
												|Запись еще одного документа ""счет-фактура"" не допускается.'"),
					ДокументОснование, НайденныйСчетФактура.Ссылка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДокументОснование", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Контрагент)
		И НЕ Контрагент.ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(Договор) Тогда
		
		Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Не ТребуетсяОтразитьСчетФактуройЗапасыВРазрезеГТД() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТребуетсяОтразитьСуммыДокументаВНациональнойВалюте() Тогда
		Возврат;
	КонецЕсли;
		
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.Вставить("НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД",
		ТребуетсяОтразитьСчетФактуройЗапасыВРазрезеГТД());
	
	// Взаиморасчеты
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект,
		ДополнительныеСвойства, Отказ, Ложь);
	
	// Инициализация данных документа.
	Документы.СчетФактура.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	
	// Суммы документов регламентированный учет
	ПроведениеДокументовУНФ.ОтразитьДвижения("СуммыДокументовРегламентированныйУчет", ТаблицыДляДвижений, Движения,
		Отказ);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.СчетФактура.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.СчетФактура.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);

КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию")
		ИЛИ ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО")) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Константы.ФункциональнаяОпцияИспользоватьСчетаФактурыИсходящие.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли