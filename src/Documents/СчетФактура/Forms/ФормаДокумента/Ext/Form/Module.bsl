
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьИзменениеДоговора()
	
	ДоговорПередИзменением = КэшЗначений.ДоговорТекущий;
	КэшЗначений.ДоговорТекущий = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.Договор, Объект.ВидОперации);
		
		Объект.ВалютаДокумента = ?(СтруктураДанные.РасчетыВУсловныхЕдиницах, КэшЗначений.НациональнаяВалюта, СтруктураДанные.ВалютаРасчетов);
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда 
			
			Объект.Курс		= ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0,		1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность= ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0,	1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументамОснованиямНаКлиенте(АдресДокументыОснованияВХранилище)
	
	ЗаполнитьПоДокументамОснованиям(АдресДокументыОснованияВХранилище);
	ЗаглавиеДокументовОснований();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаглавиеДокументовОснований()
	
	Если Объект.ДокументыОснования.Количество() = 0 Тогда
		
		Содержание = НСтр("ru ='Выбор'");
		
	Иначе
		
		Содержание = Строка(Объект.ДокументыОснования[0].ДокументОснование);
		Если Объект.ДокументыОснования.Количество() > 1 Тогда
			
			Содержание = Содержание + СтрШаблон(НСтр("ru =' (и еще %1 док.)'"), Объект.ДокументыОснования.Количество() - 1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументыОснования = Содержание;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.СуммаДокумента + Объект.СуммаНДСДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(Объект.Курс) + " " + СокрЛП(КэшЗначений.НациональнаяВалюта);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(КурсНовый) + " " + СокрЛП(КэшЗначений.НациональнаяВалюта);
		
		ТекстВопроса = НСтр("ru = 'На дату документа у валюты документа (" + КурсВалютыСтрокой + ") был задан курс.
									|Установить курс документа (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
									
		НовыйКурсКратность = Новый Структура;
		НовыйКурсКратность.Вставить("КурсНовый", КурсНовый);
		НовыйКурсКратность.Вставить("КратностьНовый", КратностьНовый);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьУстановкиНовогоКурсаИКратности", ЭтотОбъект, НовыйКурсКратность);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьКурсКратностьВалютыДокумента()

&НаСервере
Функция ПоместитьВХранилищеТабличнуюЧасть(ИмяТабличнойЧасти)
	Перем ТабличнаяЧасть;
	
	Если ИмяТабличнойЧасти = "ДокументыОснования" Тогда
		
		ТабличнаяЧасть = Объект.ДокументыОснования.Выгрузить(, "ДокументОснование");
		
	ИначеЕсли ИмяТабличнойЧасти = "Авансы" Тогда
		
		ТабличнаяЧасть = Объект.Авансы.Выгрузить();
		
	ИначеЕсли ИмяТабличнойЧасти = "ДатаНомерДокументовОплаты" Тогда
		
		ТабличнаяЧасть = Объект.ДатаНомерДокументовОплаты.Выгрузить();
		
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ТабличнаяЧасть, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоДокументамОснованиям(АдресДокументыОснованияВХранилище)
	
	Если АдресДокументыОснованияВХранилище = Неопределено Тогда
		
		Если Объект.ДокументыОснования.Количество() < 1 Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ТаблицаДокументыОснования = Объект.ДокументыОснования.Выгрузить();
		
	Иначе
		
		ТаблицаДокументыОснования = ПолучитьИзВременногоХранилища(АдресДокументыОснованияВХранилище);
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактура.КорректировкаАванса
		И ТаблицаДокументыОснования.Количество() > 1 Тогда
		
		ВызватьИсключение НСтр("ru ='Корректировка аванса может содержать только один документ-основание.'");
		
	КонецЕсли;
	
	Документ = РеквизитФормыВЗначение("Объект");
	
	Если Документ.ВидОперации = Перечисления.ВидыОперацийСчетФактура.СуммовыеРазницы Тогда
		
		Документ.ДополнительныеСвойства.Вставить("ЭтоСуммоваяРазница", Истина);
		
	КонецЕсли;
	
	Документ.Заполнить(ТаблицаДокументыОснования);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасшифровкуАванса(АдресРасшифровкиАвансаВХранилище)
	
	ТаблицаРасшифровкаАванса = ПолучитьИзВременногоХранилища(АдресРасшифровкиАвансаВХранилище);
	
	Объект.Авансы.Очистить();
	Объект.Авансы.Загрузить(ТаблицаРасшифровкаАванса);
	
	Объект.СуммаНДСДокумента = Объект.Авансы.Итог("СуммаНДС")  - Объект.Авансы.Итог("СуммаНДСДоКорректировки");;
	Объект.СуммаДокумента = Объект.Авансы.Итог("Сумма") - Объект.Авансы.Итог("СуммаДоКорректировки") - Объект.СуммаНДСДокумента;
	
	ИтогВсего = Объект.СуммаНДСДокумента + Объект.СуммаДокумента;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	
	РазностьДат = ДокументыУНФ.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДокумента));
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Объект.Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"Договор", ДоговорПоУмолчанию);
	
	УстановитьСвойстваРеквизитовФормы();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, Договор, ВидОперации)
		
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Договор.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		Ложь
	);
	
	ДопустимыеВидыОпераций = Новый Массив;
	ДопустимыеВидыОпераций.Добавить(Перечисления.ВидыОперацийСчетФактура.Продажа);
	ДопустимыеВидыОпераций.Добавить(Перечисления.ВидыОперацийСчетФактура.Корректировка);
	
	СтруктураДанные.Вставить(
		"ПодходящийВО",
		(ДопустимыеВидыОпераций.Найти(ВидОперации) <> Неопределено)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаСервере
Процедура ПолучитьДокументыОплатыИзХранилища(АдресДокументыОплатыВХранилище)
	
	// Проверим, были ли изменения.
	// При вводе на основании данные уже должны быть заполнены.
	// Если пользователь меняет их вручную, то считаем, что вариант пользователя более приоритетен.
	// Проверяем не зависимо от того, записан документ или нет.
	// Пользователь мог передумать и поменять все обратно. Значит будем проверять при любых значениях реквизита
	// Объект.ДанныеОбОплатеИзмененыВручную.
	Объект.ДанныеОбОплатеИзмененыВручную = Ложь;
	ТаблицаИзФормыРедактирования = ПолучитьИзВременногоХранилища(АдресДокументыОплатыВХранилище);
	Если ДатаНомерДокументовОплатыПриСоздании.Количество() <> ТаблицаИзФормыРедактирования.Количество() Тогда
		Объект.ДанныеОбОплатеИзмененыВручную = Истина;
	Иначе
		Сч = 0;
		Для каждого ТекущаяСтрока Из ДатаНомерДокументовОплатыПриСоздании Цикл
			Если ТекущаяСтрока.ДатаПлатежноРасчетногоДокумента <> ТаблицаИзФормыРедактирования[Сч].ДатаПлатежноРасчетногоДокумента
				ИЛИ ТекущаяСтрока.НомерПлатежноРасчетногоДокумента <> ТаблицаИзФормыРедактирования[Сч].НомерПлатежноРасчетногоДокумента
				Тогда
				Объект.ДанныеОбОплатеИзмененыВручную = Истина;
				Прервать;
			КонецЕсли;
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;
	
	// Загрузим данные в табличную часть документа
	Объект.ДатаНомерДокументовОплаты.Загрузить(ПолучитьИзВременногоХранилища(АдресДокументыОплатыВХранилище));
	
КонецПроцедуры // ПолучитьДокументыОплатыИзХранилища()

&НаСервере
Процедура УстановитьСвойстваРеквизитовФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Договор", "Видимость", Объект.Контрагент.ВестиРасчетыПоДоговорам);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНомерДата", "Видимость", Не Объект.Исправление);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсправлениеНомерДата", "Видимость", Объект.Исправление);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НадписьСчетФактура", "Видимость", Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Корректировка ИЛИ Объект.Исправление);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасшифровкаАванса", "Видимость", Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактура.КорректировкаАванса);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактура.СуммовыеРазницы Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаДокумента", "ТолькоПросмотр", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаНДСДокумента", "ТолькоПросмотр", Ложь);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтавкаНДССуммовойРазницы", "Видимость", Ложь);
		
	КонецЕсли;
	
	ТекстНадписи = "";
	Если ЗначениеЗаполнено(Объект.НомерИсходногоДокумента) Тогда
		
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"),
			Объект.НомерИсходногоДокумента, Формат(Объект.ДатаИсходногоДокумента,"ДЛФ=Д"));
		
	КонецЕсли;
	
	НадписьСчетФактура = ТекстНадписи;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммыДокумента()
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДССуммовойРазницы);
	
	Объект.СуммаНДСДокумента = ОКР(Объект.СуммаДокумента * СтавкаНДС / 100, 2);
	ИтогВсего = Объект.СуммаДокумента + Объект.СуммаНДСДокумента;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации, Знач ДокументыОснования)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	// Интеркампани
	Интеркампани = Ложь;
	Если ПолучитьФункциональнуюОпцию("ПередачаТоваровМеждуОрганизациями") Тогда
		Для каждого СтрокаОснования Из ДокументыОснования Цикл
			Если ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") 
				И ЗначениеЗаполнено(СтрокаОснования.ДокументОснование) Тогда
				Интеркампани = Истина;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	Если Интеркампани Тогда
		ПараметрыФормы.Вставить("Владелец", Организация);
		ПараметрыФормы.Вставить("Интеркампани", Истина);
		ПараметрыФормы.Вставить("ЭтоПоступление", Истина);
	КонецЕсли;
	// Конец Интеркампани
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

#Область АвтоподборКонтактов

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОпределитьНеобходимостьУстановкиНовогоКурсаИКратности(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Объект.Курс = ДополнительныеПараметры.КурсНовый;
		Объект.Кратность = ДополнительныеПараметры.КратностьНовый;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьПересчетаПоНовомуКурсу()

#КонецОбласти

#Область УправлениеВнешнимВидом

&НаКлиенте
Процедура УстановитьНадписьДокументыОплаты()
	
	Если Объект.ДатаНомерДокументовОплаты.Количество() = 0 Тогда
		ДокументыОплаты = НСтр("ru='Редактировать...'");
	КонецЕсли;
	
	ПредставленияДокументовОплаты = Новый Массив;
	
	Для каждого ТекСтрока Из Объект.ДатаНомерДокументовОплаты Цикл
		ПредставленияДокументовОплаты.Добавить(СтрШаблон(НСтр("ru = '№ %1 от %2'"),
			ТекСтрока.НомерПлатежноРасчетногоДокумента, Формат(ТекСтрока.ДатаПлатежноРасчетногоДокумента, "ДЛФ=D;")));
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПредставленияДокументовОплаты) Тогда
		ДокументыОплаты = СтрСоединить(ПредставленияДокументовОплаты, ", ");
	КонецЕсли;
	
	Если Объект.ДатаНомерДокументовОплаты.Количество() = 1 Тогда
		Элементы.ДокументыОплаты.Заголовок = НСтр("ru = 'Документ оплаты'");
	Иначе
		Элементы.ДокументыОплаты.Заголовок = НСтр("ru = 'Документы оплаты'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭДО
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие(Элемент)
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект,Элементы.ДекорацияСостояниеОригинала);
КонецПроцедуры
//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("Компания", Константы.УчетПоКомпании.Компания(Объект.Организация));
	КэшЗначений.Вставить("КонтрагентТекущий", Объект.Контрагент);
	КэшЗначений.Вставить("ДоговорТекущий", Объект.Договор);
	КэшЗначений.Вставить("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	КэшЗначений.Вставить("УчетВалютныхОпераций", ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", КэшЗначений.НациональнаяВалюта));
	КэшЗначений.Вставить("КурсНациональнаяВалюта", СтруктураПоВалюте.Курс);
	КэшЗначений.Вставить("КратностьНациональнаяВалюта", СтруктураПоВалюте.Кратность);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиРеализаций") Тогда
		ЭлементКУдалению = Элементы.ВидОперации.СписокВыбора.НайтиПоЗначению(Перечисления.ВидыОперацийСчетФактура.Корректировка);
		Если ЭлементКУдалению <> Неопределено Тогда
			Элементы.ВидОперации.СписокВыбора.Удалить(ЭлементКУдалению);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСвойстваРеквизитовФормы();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаВыставления", "Доступность", Объект.ВыставленСтатус = 2);
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец ЭДО
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюПечатьФаксимиле);
	
	ДатаНомерДокументовОплатыПриСоздании.Загрузить(Объект.ДатаНомерДокументовОплаты.Выгрузить());
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФ.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
	ЗаглавиеДокументовОснований();
	УстановитьНадписьДокументыОплаты();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеЗаписиКонтрагента"
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		УстановитьСвойстваРеквизитовФормы();
		
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ЭДО
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец ЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения,
			Объект.Договор,
			Объект.Ссылка,
			Объект.Организация,
			Объект.Контрагент,
			Отказ,
			Объект.ВидОперации);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ?(Отказ, НСтр("ru = 'Документ не проведен! '") + ТекстСообщения, ТекстСообщения);
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
			КонецЕсли;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЭДО
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭДО
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПредставлениеСчетФактуры", Неопределено);
	ПараметрыОповещения.Вставить("ДокументыОснования", Объект.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование"));
	
	ПараметрыЗаписи.Вставить("ПараметрыОповещения", ПараметрыОповещения);
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	ПараметрыЗаписи.ПараметрыОповещения.ПредставлениеСчетФактуры = СчетаФактурыУНФКлиент.ПредставлениеСчетаФактуры(Объект.Дата, Объект.Номер);
	Оповестить("ОбновлениеТекстаПроСчетФактуру", ПараметрыЗаписи.ПараметрыОповещения, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ДекорацияПечатьНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиСчетФактура", Новый Структура("КонтекстПечати", Объект), ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДокументовОснований(Команда)
	
	Если Объект.СводныйКомиссионный
		ИЛИ Объект.СводныйКорректировочный Тогда
		
		ТекстСообщения = НСтр("ru ='Основание сводного счета-фактуры не редактируется.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	АдресДокументовОснований = ПоместитьВХранилищеТабличнуюЧасть("ДокументыОснования");
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Ссылка",			Объект.Ссылка);
	ПараметрыПодбора.Вставить("ВидОперации",	Объект.ВидОперации);
	ПараметрыПодбора.Вставить("Организация",	Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент",		Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор",		Объект.Договор);
	ПараметрыПодбора.Вставить("Валюта",			Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("Исправление",	Объект.Исправление);
	ПараметрыПодбора.Вставить("ЭтоВозврат",		Объект.ЭтоВозврат);
	ПараметрыПодбора.Вставить("АдресОснований",	АдресДокументовОснований);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСписокДокументовОснованийЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СчетФактура.Форма.ФормаДокументыОснования", ПараметрыПодбора, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДокументовОснованийЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура")
		И РезультатВыбора.ВыполненаКоманда = КодВозвратаДиалога.OK Тогда
		
		ЗаполнитьПоДокументамОснованиямНаКлиенте(РезультатВыбора.АдресОснований);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ДокументыОснования.Количество() < 1 Тогда
		
		ОткрытьСписокДокументовОснований(Неопределено);
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, Объект.ДокументыОснования[0].ДокументОснование);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаАвансаНажатие(Элемент)
	
	АдресРасшифровки = ПоместитьВХранилищеТабличнуюЧасть("Авансы");
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Ссылка",			Объект.Ссылка);
	ПараметрыПодбора.Вставить("Дата",			Объект.Дата);
	ПараметрыПодбора.Вставить("ВидОперации",	Объект.ВидОперации);
	ПараметрыПодбора.Вставить("Организация",	Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент",		Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор",		Объект.Договор);
	ПараметрыПодбора.Вставить("Валюта",			Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СуммаНДС",		Объект.СуммаНДСДокумента);
	ПараметрыПодбора.Вставить("Сумма",			Объект.СуммаДокумента);
	ПараметрыПодбора.Вставить("АдресРасшифровки",АдресРасшифровки);
	ПараметрыПодбора.Вставить("ДопустимаКорректировка", НЕ Объект.ДокументыОснования.Количество() > 1);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РасшифровкаАвансаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СчетФактура.Форма.ФормаРасшифровкаАванса", ПараметрыПодбора, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаАвансаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		
		Если РезультатВыбора.ВыполненаКоманда = КодВозвратаДиалога.OK Тогда
			
			Модифицированность = Истина;
			ЗаполнитьРасшифровкуАванса(РезультатВыбора.АдресРасшифровки);
			
			ИмяПредопределенного = "Перечисление.ВидыОперацийСчетФактура." + ?(РезультатВыбора.ЭтоКорректировкаАвансаНДС20 = Истина, "КорректировкаАванса", "Аванс");
			НовыйВидОперации = ПредопределенноеЗначение(ИмяПредопределенного);
			Если Объект.ВидОперации <> НовыйВидОперации Тогда
				
				Объект.ВидОперации = НовыйВидОперации;
				ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область УчетОригиналовПервичныхДокументов

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ИзменитьСостояниеОригинала(Команда)
	УчетОригиналовПервичныхДокументовУНФКлиент.ИзменитьСостояниеОригинала(Команда, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиЭлементов

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение( , Объект.ИсправляемыйСчетФактура);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = КэшЗначений.КонтрагентТекущий;
	КэшЗначений.КонтрагентТекущий = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент);
		Объект.Договор 	= СтруктураДанные.Договор;
		
		ОбработатьИзменениеДоговора();
		
	Иначе
		
		Объект.Договор = КэшЗначений.ДоговорТекущий; // Восстанавливаем автоматически очищенный договор.
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.ВидОперации, Объект.ДокументыОснования);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОплатыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресДокументыОплатыВХранилище", ПоместитьВХранилищеТабличнуюЧасть("ДатаНомерДокументовОплаты"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДокументыОплатыНажатиеЗавершение", ЭтотОбъект, ПараметрыПодбора);
	ОткрытьФорму("Документ.СчетФактура.Форма.ФормаРедактированияДокументовОплаты", ПараметрыПодбора , , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОплатыНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресДокументыОплатыВХранилище = ДополнительныеПараметры.АдресДокументыОплатыВХранилище;
	
	Если Результат = КодВозвратаДиалога.OK Тогда
		
		Модифицированность = Истина;
		ПолучитьДокументыОплатыИзХранилища(АдресДокументыОплатыВХранилище);
		
	КонецЕсли;
	
	УстановитьНадписьДокументыОплаты();
	
КонецПроцедуры // ДокументыОплатыНажатие()

&НаКлиенте
Процедура ВыставленСтатусПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаВыставления", "Доступность", Объект.ВыставленСтатус = 2);
	Объект.ДатаВыставления = ?(Объект.ВыставленСтатус = 2, Объект.Дата, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КодСпособаВыставленияПриИзменении(Элемент)
	
	Объект.ВыставленСтатус = ?(Объект.КодСпособаВыставления = 2, 1, 2);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаВыставления", "Доступность", Объект.ВыставленСтатус = 2);
	Объект.ДатаВыставления = ?(Объект.ВыставленСтатус = 2, Объект.Дата, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если КэшЗначений.Свойство("ПрошлаяВалюта") Тогда
		
		КэшЗначений.ПрошлаяВалюта = Объект.ВалютаДокумента;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДССуммовойРазницыПриИзменении(Элемент)
	
	РассчитатьСуммыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	РассчитатьСуммыДокумента();
	
КонецПроцедуры

#КонецОбласти