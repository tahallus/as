#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
//@skip-warning переопределяемый метод
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

Функция ПроверитьДоступностьЗаказов(Объект) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Или Не УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		Возврат Истина;
	КонецЕсли; 
	
	МассивЗаказов = Новый Массив;
	Для каждого Стр Из Объект.Заказы Цикл
		Если ЗначениеЗаполнено(Стр.Заказ) И МассивЗаказов.Найти(Стр.Заказ)=Неопределено Тогда
			МассивЗаказов.Добавить(Стр.Заказ);
		КонецЕсли; 
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&Заказы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()<>МассивЗаказов.Количество() Тогда
		// Часть заказов недоступна
		Возврат Ложь;
	КонецЕсли; 
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсПечати

Процедура ВызватьИсходныйМетодПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, СоздаватьСчетаФактуры = Ложь)
	
	МассивОбъектовИзмененный = МассивРасходныхНакладных(МассивОбъектов);
	
	Если СоздаватьСчетаФактуры Тогда
		
		СообщенияПользователю = Новый Массив;
		ИсточникиПечати = Новый Структура("ИмяИсточника, СчетФактура, ДокументыРеализации, СозданныеСчетаФактуры", Неопределено, Новый Массив, Неопределено, Неопределено);
		СчетаФактурыУНФ.ЗаполнитьПараметрыПечатиУПД(МассивОбъектовИзмененный, ИсточникиПечати, СообщенияПользователю);
		МассивОбъектовИзмененный = ОбщегоНазначения.СкопироватьРекурсивно(ИсточникиПечати.СчетФактура);
		Если ТипЗнч(ИсточникиПечати.ДокументыРеализации)=Тип("Массив") Тогда
			// Реализации, для которых не требуется формирование счета-фактуры
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОбъектовИзмененный, ИсточникиПечати.ДокументыРеализации);
		КонецЕсли; 
		Для каждого Сообщение Из СообщенияПользователю Цикл
			ОбщегоНазначения.СообщитьПользователю(Сообщение);
		КонецЦикла;
		
	КонецЕсли; 
	
	Если МассивОбъектовИзмененный.Количество() = 0 Тогда
		
		ТекстСообщенияОбОшибке = НСтр("ru = 'По маршрутному листу нет сформированных расходных документов. Данные для печати отсутствуют.'");
		ВызватьИсключение ТекстСообщенияОбОшибке;
		
	КонецЕсли;
	
	Обработки.ПечатьСчетФактура.Печать(МассивОбъектовИзмененный, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛистСчетФактура") Тогда
		
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "МаршрутныйЛистСчетФактура");
		ПечатнаяФорма.ИмяВРЕГ = ВРег("СчетФактура");
		ПечатнаяФорма.ИмяМакета = "СчетФактура";
		
		ВызватьИсходныйМетодПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Истина);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛистУниверсальныйПередаточныйДокумент") Тогда
		
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "МаршрутныйЛистУниверсальныйПередаточныйДокумент");
		ПечатнаяФорма.ИмяВРЕГ = ВРег("УниверсальныйПередаточныйДокумент");
		ПечатнаяФорма.ИмяМакета = "УниверсальныйПередаточныйДокумент";
		
		ВызватьИсходныйМетодПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Истина);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛистУниверсальныйПередаточныйДокументФаксимиле") Тогда
		
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "МаршрутныйЛистУниверсальныйПередаточныйДокументФаксимиле");
		ПечатнаяФорма.ИмяВРЕГ = ВРег("УниверсальныйПередаточныйДокументФаксимиле");
		ПечатнаяФорма.ИмяМакета = "УниверсальныйПередаточныйДокументФаксимиле";
		
		ВызватьИсходныйМетодПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Истина);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛист") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МаршрутныйЛист", "Маршрутный лист", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "МаршрутныйЛист"));
		
	Иначе
		
		МассивДокументов = МассивРасходныхНакладных(МассивОбъектов);
		
		Если МассивДокументов.Количество()=0 Тогда
			ТекстСообщенияОбОшибке = НСтр("ru = 'По маршрутному листу нет сформированных расходных документов. Данные для печати отсутствуют.'");
			ВызватьИсключение ТекстСообщенияОбОшибке;
		КонецЕсли;
		
		Документы.РасходнаяНакладная.Печать(МассивДокументов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода); 
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, 
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "МаршрутныйЛист";
	КомандаПечати.Представление = НСтр("ru = 'Маршрутный лист'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 2;
	
	Документы.РасходнаяНакладная.ДобавитьКомандыПечати(КомандыПечати);
	
	// Отключаем печать ТН и конверта для маршрутных листов (по поддерживается массовая печать)
	ОтключаемыеИдентификаторы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ТН,Конверт");
	Для каждого Идентификатор Из ОтключаемыеИдентификаторы Цикл
		КомандаПечати = КомандыПечати.Найти(Идентификатор, "Идентификатор");
		Если КомандаПечати<>Неопределено Тогда
			КомандыПечати.Удалить(КомандаПечати);
		КонецЕсли; 
	КонецЦикла;
	
	ЗаменяемыеИдентификаторы = Новый Соответствие;
	ЗаменяемыеИдентификаторы.Вставить("Обработка.ПечатьСчетФактура.СчетФактура", "МаршрутныйЛистСчетФактура");
	ЗаменяемыеИдентификаторы.Вставить("Обработка.ПечатьСчетФактура.УниверсальныйПередаточныйДокумент", "МаршрутныйЛистУниверсальныйПередаточныйДокумент");
	ЗаменяемыеИдентификаторы.Вставить("Обработка.ПечатьСчетФактура.УниверсальныйПередаточныйДокументФаксимиле", "МаршрутныйЛистУниверсальныйПередаточныйДокументФаксимиле");
	
	Для каждого КомандаПечати Из КомандыПечати Цикл
		Для каждого КлючИЗначение Из ЗаменяемыеИдентификаторы Цикл
			КомандаПечати.Идентификатор = СтрЗаменить(КомандаПечати.Идентификатор, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

// Функция формирует печатную форму документа по указанному макету.
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент в который будет выводится печатная
//				   форма.
//  ИмяМакета    - Строка, имя макета печатной формы.
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ИмяМакета="МаршрутныйЛист" Тогда
		
		ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_МаршрутныйЛист";
		
		ПервыйДокумент = Истина;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.МаршрутныйЛист.ПФ_MXL_МаршрутныйЛист");
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МаршрутныйЛист.Ссылка КАК Ссылка,
		|	МаршрутныйЛист.Дата КАК ДатаДокумента,
		|	МаршрутныйЛист.Номер КАК Номер,
		|	МаршрутныйЛист.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	МаршрутныйЛист.СлужбаДоставки.Наименование КАК СлужбаДоставки,
		|	МаршрутныйЛист.Курьер.Наименование КАК Курьер
		|ИЗ
		|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
		|ГДЕ
		|	МаршрутныйЛист.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутныйЛистЗаказы.Ссылка КАК Ссылка,
		|	МаршрутныйЛистЗаказы.НомерСтроки КАК НомерСтроки,
		|	МаршрутныйЛистЗаказы.Заказ.Дата КАК ДатаЗаказа,
		|	МаршрутныйЛистЗаказы.Заказ.Номер КАК НомерЗаказа,
		|	МаршрутныйЛистЗаказы.РасходнаяНакладная КАК РасходнаяНакладная,
		|	МаршрутныйЛистЗаказы.РасходнаяНакладная.Дата КАК ДатаНакладной,
		|	МаршрутныйЛистЗаказы.РасходнаяНакладная.Номер КАК НомерНакладной,
		|	МаршрутныйЛистЗаказы.Заказ.ОжидаемаяДатаВручения КАК ДатаДоставки,
		|	МаршрутныйЛистЗаказы.Заказ.ВремяДоставкиС КАК ВремяС,
		|	МаршрутныйЛистЗаказы.Заказ.ВремяДоставкиПо КАК ВремяПо,
		|	МаршрутныйЛистЗаказы.Заказ.АдресДоставки КАК Адрес,
		|	МаршрутныйЛистЗаказы.Заказ.КонтактноеЛицо КАК Получатель,
		|	МаршрутныйЛистЗаказы.Заказ.КонтактныйТелефон КАК Телефон,
		|	МаршрутныйЛистЗаказы.Заказ.ЗапаснойТелефон КАК ЗапаснойТелефон,
		|	МаршрутныйЛистЗаказы.Заказ.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформация,
		|	МаршрутныйЛистЗаказы.Заказ.СтоимостьДоставки КАК СтоимостьДоставки,
		|	МаршрутныйЛистЗаказы.Заказ.Вес КАК ЗаказВес,
		|	МаршрутныйЛистЗаказы.Заказ.Объем КАК ЗаказОбъем,
		|	ВЫБОР
		|		КОГДА МаршрутныйЛистЗаказы.Заказ.ВалютаДокумента.СимвольноеПредставление = """"
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(МаршрутныйЛистЗаказы.Заказ.ВалютаДокумента)
		|		ИНАЧЕ МаршрутныйЛистЗаказы.Заказ.ВалютаДокумента.СимвольноеПредставление
		|	КОНЕЦ КАК ВалютаПредставление,
		|	МаршрутныйЛистЗаказы.Заказ.СуммаДокумента - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот, 0) КАК КОплате,
		|	ВЫБОР
		|		КОГДА МаршрутныйЛистЗаказы.РасходнаяНакладная.ВалютаДокумента.СимвольноеПредставление = """"
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(МаршрутныйЛистЗаказы.РасходнаяНакладная.ВалютаДокумента)
		|		ИНАЧЕ МаршрутныйЛистЗаказы.РасходнаяНакладная.ВалютаДокумента.СимвольноеПредставление
		|	КОНЕЦ КАК ВалютаПредставлениеНакладная,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстаткиПоЗаказу.СуммаОстаток, 0) < ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0)
		|			ТОГДА ЕСТЬNULL(РасчетыСПокупателямиОстаткиПоЗаказу.СуммаОстаток, 0)
		|		ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0)
		|	КОНЕЦ КАК КОплатеНакладная
		|ИЗ
		|	Документ.МаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаСчетовИЗаказов.Обороты КАК ОплатаСчетовИЗаказовОбороты
		|		ПО МаршрутныйЛистЗаказы.Заказ = ОплатаСчетовИЗаказовОбороты.СчетНаОплату
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки КАК РасчетыСПокупателямиОстатки
		|		ПО МаршрутныйЛистЗаказы.РасходнаяНакладная = РасчетыСПокупателямиОстатки.Документ
		|			И МаршрутныйЛистЗаказы.Заказ = РасчетыСПокупателямиОстатки.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки КАК РасчетыСПокупателямиОстаткиПоЗаказу
		|		ПО МаршрутныйЛистЗаказы.Заказ = РасчетыСПокупателямиОстаткиПоЗаказу.Заказ
		|ГДЕ
		|	МаршрутныйЛистЗаказы.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки";
		
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаДокументов = Результат[0].Выбрать();
		ТаблицаЗаказов = Результат[1].Выгрузить();
		
		СтруктураПараметров = Новый Структура;
		Пока ВыборкаДокументов.Следующий() Цикл
			ТекущийДокумент = ВыборкаДокументов.Ссылка;
			
			Если НЕ ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументов.Номер, Истина, Истина);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
			СтруктураПараметров.Очистить();
			Шаблон = НСтр("ru = 'Маршрутный лист №%1 от %2'");
			СтруктураПараметров.Вставить("ЗаголовокДокумента", СтрШаблон(Шаблон, НомерДокумента, Формат(ВыборкаДокументов.ДатаДокумента, "ДЛФ=DD")));
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			СтруктураПараметров.Очистить();
			Если ЗначениеЗаполнено(ВыборкаДокументов.СлужбаДоставки) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("СлужбаДоставки");
				СтруктураПараметров.Вставить("ПредставлениеЭкспедитора", ВыборкаДокументов.СлужбаДоставки);
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("Курьер");
				СтруктураПараметров.Вставить("ПредставлениеЭкспедитора", ВыборкаДокументов.Курьер);
			КонецЕсли;
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Ссылка", ВыборкаДокументов.Ссылка);
			СтрокиЗаказы = ТаблицаЗаказов.НайтиСтроки(СтруктураОтбора);
			Вес = 0;
			Объем = 0;
			Для каждого СтрокаЗаказ Из СтрокиЗаказы Цикл
				
				СтруктураПараметров.Очистить();
				ПредставлениеДата = Формат(СтрокаЗаказ.ДатаЗаказа, "ДЛФ=D");
				СтруктураПараметров.Вставить("ДатаЗаказа", ПредставлениеДата);
				ПредставлениеНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаЗаказ.НомерЗаказа, Истина, Истина);
				СтруктураПараметров.Вставить("НомерЗаказа", ПредставлениеНомер);
				СтруктураПараметров.Вставить("ПредставлениеЗаказа", СтрШаблон(НСтр("ru = 'Заказ %1 от %2'"), ПредставлениеНомер, ПредставлениеДата));
				Если ЗначениеЗаполнено(СтрокаЗаказ.РасходнаяНакладная) Тогда
					ПредставлениеДата = Формат(СтрокаЗаказ.ДатаНакладной, "ДЛФ=D");
					СтруктураПараметров.Вставить("ДатаНакладной", ПредставлениеДата);
					ПредставлениеНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаЗаказ.НомерНакладной, Истина, Истина);
					СтруктураПараметров.Вставить("НомерНакладной", ПредставлениеНомер);
					СтруктураПараметров.Вставить("ПредставлениеНакладной", СтрШаблон(НСтр("ru = ', накладная %1 от %2'"), ПредставлениеНомер, ПредставлениеДата));
					КОплатеПоЗаказу = ?(СтрокаЗаказ.КОплатеНакладная < 0, 0, СтрокаЗаказ.КОплатеНакладная);
					ВалютаПредставление = СтрокаЗаказ.ВалютаПредставлениеНакладная;
				Иначе
					КОплатеПоЗаказу = ?(СтрокаЗаказ.КОплате < 0, 0, СтрокаЗаказ.КОплате);
					ВалютаПредставление = СтрокаЗаказ.ВалютаПредставление;
				КонецЕсли; 
				Если КОплатеПоЗаказу = 0 Тогда
					СтруктураПараметров.Вставить("СуммаКОплате", НСтр("ru = 'Оплачен'"));
				Иначе
					СтруктураПараметров.Вставить("СуммаКОплате", Формат(КОплатеПоЗаказу, "ЧДЦ=2") + " " + ВалютаПредставление);
				КонецЕсли; 
				
				ТекстКонтактноеЛицо = "";
				Если ЗначениеЗаполнено(СтрокаЗаказ.Получатель) Тогда
					ТекстКонтактноеЛицо = СтрокаЗаказ.Получатель;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаЗаказ.Телефон) Тогда
					ТекстКонтактноеЛицо = ТекстКонтактноеЛицо+?(ПустаяСтрока(ТекстКонтактноеЛицо), НСтр("ru = 'Тел. '"), НСтр("ru = ', тел. '"))+СтрокаЗаказ.Телефон;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаЗаказ.ЗапаснойТелефон) Тогда
					ТекстКонтактноеЛицо = ТекстКонтактноеЛицо+
					?(НЕ ЗначениеЗаполнено(СтрокаЗаказ.Телефон) И ПустаяСтрока(ТекстКонтактноеЛицо), НСтр("ru = 'Тел. '"), 
					?(НЕ ЗначениеЗаполнено(СтрокаЗаказ.Телефон), НСтр("ru = ', тел. '"), НСтр("ru = ', '")))+СтрокаЗаказ.ЗапаснойТелефон;
				КонецЕсли;
				Если ПустаяСтрока(ТекстКонтактноеЛицо) Тогда
					ТекстКонтактноеЛицо = НСтр("ru = 'Не указано'");
				КонецЕсли; 
				СтруктураПараметров.Вставить("ТекстКонтактноеЛицо", ТекстКонтактноеЛицо);
				Если НЕ ЗначениеЗаполнено(СтрокаЗаказ.ДатаДоставки)
					И НЕ ЗначениеЗаполнено(СтрокаЗаказ.ВремяС)
					И НЕ ЗначениеЗаполнено(СтрокаЗаказ.ВремяПо) Тогда
					ТекстДатаИВремяДоставки = НСтр("ru = 'Не указаны'");
				Иначе
					ТекстДатаИВремяДоставки = "";
					Если ЗначениеЗаполнено(СтрокаЗаказ.ДатаДоставки) Тогда
						ТекстДатаИВремяДоставки = Формат(СтрокаЗаказ.ДатаДоставки, "ДЛФ=DD");
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаЗаказ.ВремяС) Тогда
						ТекстДатаИВремяДоставки = ТекстДатаИВремяДоставки+?(ПустаяСтрока(ТекстДатаИВремяДоставки), "", ", ")+НСтр("ru = 'с '")+Формат(СтрокаЗаказ.ВремяС, "ДФ=ЧЧ:мм");
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаЗаказ.ВремяПо) Тогда
						ТекстДатаИВремяДоставки = ТекстДатаИВремяДоставки+?(ПустаяСтрока(ТекстДатаИВремяДоставки), "", " ")+НСтр("ru = 'по '")+Формат(СтрокаЗаказ.ВремяПо, "ДФ=ЧЧ:мм");
					КонецЕсли;
				КонецЕсли; 
				СтруктураПараметров.Вставить("ТекстДатаИВремяДоставки", ТекстДатаИВремяДоставки);
				
				ОбластьМакета.Параметры.Заполнить(СтрокаЗаказ);
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				Вес = Вес + СтрокаЗаказ.ЗаказВес;
				Объем = Объем + СтрокаЗаказ.ЗаказОбъем;
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
			СтруктураПараметров.Очистить();
			Шаблон = НСтр("ru = 'Вес (всего):   %1 кг
                           |Объем (всего): %2 м3'");
			СтруктураПараметров.Вставить("ДопИнформация", СтрШаблон(Шаблон, Вес, Объем));
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		КонецЦикла;
		
	КонецЕсли; 
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция МассивРасходныхНакладных(МассивМаршрутныхЛистов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивМаршрутныхЛистов", МассивМаршрутныхЛистов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаршрутныйЛистЗаказы.РасходнаяНакладная КАК РасходнаяНакладная
	|ИЗ
	|	Документ.МаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
	|ГДЕ
	|	МаршрутныйЛистЗаказы.Ссылка В(&МассивМаршрутныхЛистов)
	|	И МаршрутныйЛистЗаказы.РасходнаяНакладная <> ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РасходнаяНакладная");
	
КонецФункции
 
#КонецОбласти

#Область ФоновоеЗадание

Процедура ВыполнитьОтгрузку(Параметры, ВременноеХранилищеРезультата) Экспорт
	
	Результат = Новый Структура;
	Ошибки = Новый СписокЗначений;
	СостояниеЗавершен = Справочники.СостоянияЗаказовПокупателей.Завершен;
	
	Если НЕ Параметры.Свойство("МаршрутныйЛист") ИЛИ НЕ ЗначениеЗаполнено(Параметры.МаршрутныйЛист) Тогда
		Ошибка = НСтр("ru = 'Не указан маршрутный лист для выполнения отгрузки.'");
		Ошибки.Добавить(, Ошибка);
		Результат.Вставить("Ошибки", Ошибки);
		ПоместитьВоВременноеХранилище(Результат, ВременноеХранилищеРезультата);
		Возврат;
	КонецЕсли;
	
	МаршрутныйЛист = Параметры.МаршрутныйЛист;
	
	Выборка = ВыборкаПоЗаказам(МаршрутныйЛист);
	КоличествоСтрок = Выборка.Количество();
	НомерСтроки = 0;
	СозданныеНакладные = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		НомерСтроки = НомерСтроки + 1;
		ДлительныеОперации.СообщитьПрогресс(Окр(НомерСтроки / КоличествоСтрок * 100), Выборка.Заказ);
		Если Выборка.Сформирован Тогда
			Продолжить;
		КонецЕсли; 
		ПовторноЗавершитьЗаказ = Ложь;
		НачатьТранзакцию();
		Попытка
			Если ЗначениеЗаполнено(Выборка.СостояниеОжидаетОтгрузки) 
				И Выборка.ТекущееСостояние = СостояниеЗавершен Тогда
				// Если заказ завершен, то нужно отменить завершение перед вводом расходных накладных
				ПовторноЗавершитьЗаказ = Истина;
			    ИзменитьСостояниеЗаказа(Выборка, Выборка.СостояниеОжидаетОтгрузки);
			КонецЕсли;
			СформироватьРасходнуюНакладную(Выборка, СозданныеНакладные);
			Если ПовторноЗавершитьЗаказ Тогда
				ИзменитьСостояниеЗаказа(Выборка, СостояниеЗавершен);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Информация = ИнформацияОбОшибке();
			ДобавитьОписаниеОшибки(Выборка.Заказ, Ошибки, РекурсивноеОписаниеОшибки(Информация));
		КонецПопытки; 
	КонецЦикла;
	
	Если СозданныеНакладные.Количество() > 0 Тогда
		НачатьТранзакцию();
		Попытка
			МаршрутныйЛистОбъект = МаршрутныйЛист.ПолучитьОбъект();
			Для каждого КлючИЗначение Из СозданныеНакладные Цикл
				СтрокаТабличнойЧасти = МаршрутныйЛистОбъект.Заказы[КлючИЗначение.Ключ];
				Если СтрокаТабличнойЧасти = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				СтрокаТабличнойЧасти.РасходнаяНакладная = КлючИЗначение.Значение;
			КонецЦикла; 
			МаршрутныйЛистОбъект.Записать(?(МаршрутныйЛистОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = НСтр("ru = 'Не удалось зафиксировать изменения маршрутного листа:
                                |%1'");
			Информация = ИнформацияОбОшибке();
			Ошибка = СтрШаблон(ТекстОшибки, РекурсивноеОписаниеОшибки(Информация));
			ДобавитьОписаниеОшибки(МаршрутныйЛист, Ошибки, Ошибка);
		КонецПопытки; 
	КонецЕсли; 
	
	Если Ошибки.Количество() > 0 Тогда
		Результат.Вставить("Ошибки", Ошибки);
	КонецЕсли;
	ПоместитьВоВременноеХранилище(Результат, ВременноеХранилищеРезультата);
	
КонецПроцедуры

Функция ВыборкаПоЗаказам(МаршрутныйЛист)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МаршрутныйЛист", МаршрутныйЛист);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МаршрутныйЛистЗаказы.Заказ КАК Заказ,
	|	МаршрутныйЛистЗаказы.Заказ.Номер КАК Номер,
	|	МаршрутныйЛистЗаказы.Заказ.Дата КАК Дата,
	|	МаршрутныйЛистЗаказы.Заказ.Проведен КАК ЗаказПроведен,
	|	МаршрутныйЛистЗаказы.Заказ.СостояниеЗаказа КАК ТекущееСостояние,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛистЗаказы.РасходнаяНакладная = ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Сформирован,
	|	МаршрутныйЛистЗаказы.РасходнаяНакладная КАК РасходнаяНакладная,
	|	МаршрутныйЛистЗаказы.Ссылка.Автомобиль КАК Автомобиль,
	|	МаршрутныйЛистЗаказы.Ссылка.Курьер КАК Курьер,
	|	ЕСТЬNULL(ВидыЗаказовПокупателей.СостояниеОжидаетОтгрузки, ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка)) КАК СостояниеОжидаетОтгрузки,
	|	ЕСТЬNULL(ВидыЗаказовПокупателей.СостояниеОтгружен, ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка)) КАК СостояниеОтгружен,
	|	МаршрутныйЛистЗаказы.НомерСтроки - 1 КАК Индекс
	|ИЗ
	|	Документ.МаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗаказовПокупателей КАК ВидыЗаказовПокупателей
	|		ПО МаршрутныйЛистЗаказы.Заказ.ВидЗаказа = ВидыЗаказовПокупателей.Ссылка
	|ГДЕ
	|	МаршрутныйЛистЗаказы.Ссылка = &МаршрутныйЛист
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутныйЛистЗаказы.Заказ,
	|	МаршрутныйЛистЗаказы.РасходнаяНакладная,
	|	МаршрутныйЛистЗаказы.Ссылка.Автомобиль,
	|	МаршрутныйЛистЗаказы.Ссылка.Курьер,
	|	ЕСТЬNULL(ВидыЗаказовПокупателей.СостояниеОжидаетОтгрузки, ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка)),
	|	ЕСТЬNULL(ВидыЗаказовПокупателей.СостояниеОтгружен, ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка)),
	|	МаршрутныйЛистЗаказы.Заказ.Проведен,
	|	МаршрутныйЛистЗаказы.Заказ.СостояниеЗаказа,
	|	МаршрутныйЛистЗаказы.НомерСтроки - 1,
	|	МаршрутныйЛистЗаказы.Заказ.Номер,
	|	МаршрутныйЛистЗаказы.Заказ.Дата";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ИзменитьСостояниеЗаказа(Выборка, НовоеСостояние)
	
	ПредставлениеЗаказа = ПредставлениеЗаказа(Выборка.Заказ);
	ТекстОшибки = НСтр("ru = 'Не удалось заблокировать заказ %1:
                        |%2'");
	Попытка
		ДокЗаказ = Выборка.Заказ.ПолучитьОбъект();
		ДокЗаказ.Заблокировать();
	Исключение
		Информация = ИнформацияОбОшибке();
		Ошибка = СтрШаблон(ТекстОшибки, ПредставлениеЗаказа, РекурсивноеОписаниеОшибки(Информация));
		ВызватьИсключение Ошибка;
	КонецПопытки; 
	ДокЗаказ.СостояниеЗаказа = НовоеСостояние;
	ТекстОшибки = НСтр("ru = 'Не удалось изменить состояние заказа %1:
                        |%2'");
	Если ДокЗаказ.Проведен И НЕ ДокЗаказ.ПроверитьЗаполнение() Тогда
		Информация = ИнформацияОбОшибке();
		Ошибка = СтрШаблон(ТекстОшибки, ПредставлениеЗаказа, РекурсивноеОписаниеОшибки(Информация));
		ВызватьИсключение Ошибка;
	КонецЕсли; 
	Попытка
		ДокЗаказ.Записать(?(ДокЗаказ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось изменить состояние заказа %1:
                            |%2'");
		Информация = ИнформацияОбОшибке();
		Ошибка = СтрШаблон(ТекстОшибки, ПредставлениеЗаказа, РекурсивноеОписаниеОшибки(Информация));
		ВызватьИсключение Ошибка;
	КонецПопытки; 
	
КонецПроцедуры

Процедура СформироватьРасходнуюНакладную(Выборка, СозданныеНакладные)
	
	ПредставлениеЗаказа = ПредставлениеЗаказа(Выборка.Заказ);
	ТекстОшибки = НСтр("ru = 'Заказ %1 отгружен полностью. Расходная накладная не была сформирована.'");
	Док = Документы.РасходнаяНакладная.СоздатьДокумент();
	Док.Заполнить(Выборка.Заказ);
	Если Док.Запасы.Количество() = 0 Тогда
		// Не формируем пустые документы
		Ошибка = СтрШаблон(ТекстОшибки, ПредставлениеЗаказа);
		ВызватьИсключение Ошибка;
	КонецЕсли; 
	Док.Дата = ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(Выборка.Автомобиль) Тогда
		Док.Автомобиль = Выборка.Автомобиль;
	КонецЕсли; 
	Если ЗначениеЗаполнено(Выборка.Курьер) Тогда
		Док.Водитель = Выборка.Курьер;
	КонецЕсли;
	Док.Заказ = Выборка.Заказ;
	Док.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	ТекстОшибки = НСтр("ru = 'Не удалось сформировать отгрузку для заказа %1:
                        |%2'");
	Если НЕ Док.ПроверитьЗаполнение() Тогда
		Информация = ИнформацияОбОшибке();
		Ошибка = СтрШаблон(ТекстОшибки, ПредставлениеЗаказа, РекурсивноеОписаниеОшибки(Информация));
		ВызватьИсключение Ошибка;
	КонецЕсли; 
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Информация = ИнформацияОбОшибке();
		Ошибка = СтрШаблон(ТекстОшибки, ПредставлениеЗаказа, РекурсивноеОписаниеОшибки(Информация));
		ВызватьИсключение Ошибка;
	КонецПопытки;
	СозданныеНакладные.Вставить(Выборка.Индекс, Док.Ссылка);
	
КонецПроцедуры

Процедура ДобавитьОписаниеОшибки(Заказ, Ошибки, Текст)
	
	Ошибка = Текст;
	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	Для каждого Сообщение Из СообщенияПользователю Цикл
		Если Найти(Сообщение.Текст, ДлительныеОперации.СообщениеПрогресса()) > 0 Тогда
			Продолжить;
		КонецЕсли;
		Ошибка = Ошибка+Символы.ПС+Сообщение.Текст;
	КонецЦикла; 
	Ошибки.Добавить(Заказ, Ошибка);
	
КонецПроцедуры

Функция РекурсивноеОписаниеОшибки(Информация)
	
	Если Информация.Причина = Неопределено Тогда
		ОписаниеОшибки = ""; 
	Иначе
		ОписаниеОшибки = РекурсивноеОписаниеОшибки(Информация.Причина);
	КонецЕсли;
	ОписаниеКратко = КраткоеПредставлениеОшибки(Информация);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		Возврат СокрЛП(ОписаниеКратко);
	ИначеЕсли СтрНайти(ОписаниеОшибки, ОписаниеКратко) > 0 Тогда
		Возврат СокрЛП(ОписаниеОшибки);
	Иначе
		Возврат ОписаниеКратко + Символы.ПС + ОписаниеОшибки;	
	КонецЕсли; 
	
КонецФункции

Функция ПредставлениеЗаказа(Выборка)
		
	Возврат СтрШаблон(
	НСтр("ru = '%1 от %2'"),
	ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина),
	Формат(Выборка.Дата, "ДЛФ=D"));
	
КонецФункции

#КонецОбласти 

#КонецЕсли