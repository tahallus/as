
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Заказы.Количество()>0 
		И НЕ Документы.МаршрутныйЛист.ПроверитьДоступностьЗаказов(Объект) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Недостаточно прав для открытия документа.'"),,,, Отказ);
		Возврат;
	КонецЕсли; 	
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	ПредставленияДокументов = Новый ФиксированноеСоответствие(Новый Соответствие);
	
	УстановитьУсловноеОформление();
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НесколькоОрганизаций", ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") 
	И НЕ ЗначениеЗаполнено(Справочники.Организации.ОрганизацияКомпания())); 
	СтруктураПараметров.Вставить("НесколькоСкладов", ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам"));
	СтруктураПараметров.Вставить("НесколькоВидовЗаказов", ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей"));
	СтруктураПараметров.Вставить("ТребуетсяНастройка", ТребуетсяНастройка(СтруктураПараметров.НесколькоВидовЗаказов));
	СтруктураПараметров.Вставить("НеПредупреждатьПередФормированием", ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить("МаршрутныйЛист", "НеПредупреждатьПередФормированием", Ложь));
	ФормаПараметры = Новый ФиксированнаяСтруктура(СтруктураПараметров);
	
	ОбновитьАдресОтправкиНаФорме();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ВариантДоставки = "Курьер";
		Объект.СлужбаДоставки = Справочники.СлужбыДоставки.ДоставкаСобственнымиСилами;
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			ЗаполнитьДанныеСклада();
		КонецЕсли; 
	Иначе
		Если ЗначениеЗаполнено(Объект.СлужбаДоставки) И НЕ Объект.СлужбаДоставки=Справочники.СлужбыДоставки.ДоставкаСобственнымиСилами Тогда
			ВариантДоставки = "СлужбаДоставки";
		Иначе
			ВариантДоставки = "Курьер";
			Если НЕ ЗначениеЗаполнено(Объект.СлужбаДоставки) Тогда
				Объект.СлужбаДоставки = Справочники.СлужбыДоставки.ДоставкаСобственнымиСилами;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	ОтображатьПодсказки = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(Объект.Ссылка.Метаданные().Имя, "ОтображатьПодсказки", Истина);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюПечатьФаксимиле);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	ЗаполнитьИУстановитьВидимостьНастройкиСостоянийЗаказов();
	
	ЗаполнитьФильтры();
	ЗаполнитьЗаказы(Истина);
	
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы, "Заказы");
	
	// Если маршрутный лист открывается из заказа покупателя,
	// то сделаем строку с заказом текущей.
	Если Параметры.Свойство("ЗаказПокупателя") И ЗначениеЗаполнено(Параметры.ЗаказПокупателя) Тогда
		СтруктураДляОтбора = Новый Структура("Заказ", Параметры.ЗаказПокупателя);
		СтрокиСЗаказом = Объект.Заказы.НайтиСтроки(СтруктураДляОтбора);
		Если СтрокиСЗаказом.Количество() > 0 Тогда
			Элементы.Заказы.ТекущаяСтрока = СтрокиСЗаказом[0].ПолучитьИдентификатор();
			Элементы.Заказы.ТекущийЭлемент = Элементы.ЗаказыПредставлениеЗаказа;
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЗаголовокФильтров();
	
	Если ФормаПараметры.ТребуетсяНастройка Тогда
		#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		ПодключитьОбработчикОжидания("ПриОткрытииЗадержка", 1, Истина);	
		#Иначе
		ПодключитьОбработчикОжидания("ПриОткрытииЗадержка", 0.1, Истина);	
		#КонецЕсли 
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗадержка()
	
	Если ФормаПараметры.НесколькоВидовЗаказов Тогда
		ПодсказкаНастройки = НСтр("ru = 'Укажите фиксированные состояния для разных видов заказов. Данные требуются для корректной работы механизма доставки.'");
	Иначе
		ПодсказкаНастройки = НСтр("ru = 'Укажите фиксированные состояния заказов. Данные требуются для корректной работы механизма доставки.'");
	КонецЕсли; 
	ОткрытьФормуНастройкиСостояний(
	НСтр("ru = 'Состояния доставки заказов'"),
	ПодсказкаНастройки);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ФормаПараметры.НесколькоВидовЗаказов 
		И (Элементы.НовоеСостояниеЗаказов.Доступность ИЛИ Элементы.СостояниеЗаказов.Доступность) Тогда
		ВидЗаказаОбъект = Справочники.ВидыЗаказовПокупателей.Основной.ПолучитьОбъект();
		Если Элементы.НовоеСостояниеЗаказов.Доступность И ЗначениеЗаполнено(НовоеСостояниеЗаказов) Тогда
			ВидЗаказаОбъект.СостояниеОтгружен = НовоеСостояниеЗаказов;
		КонецЕсли;
		Если Элементы.СостояниеЗаказов.Доступность И ЗначениеЗаполнено(СостояниеЗаказов) Тогда
			ВидЗаказаОбъект.СостояниеОжидаетОтгрузки = СостояниеЗаказов;
		КонецЕсли;
		ВидЗаказаОбъект.Записать();
	КонецЕсли;

	// Заполнение табличной части по данным формы
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПринятьВРаботу", Истина);
	ОтгружаемыеДокументы = Заказы.Выгрузить(СтруктураОтбора, "Заказ, РасходнаяНакладная, Доставлен");
	ОтгружаемыеДокументы.Свернуть("Заказ, РасходнаяНакладная, Доставлен");
	ТекущийОбъект.Заказы.Загрузить(ОтгружаемыеДокументы);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="Запись_НаборКонстант" Тогда
		ЗаполнитьИУстановитьВидимостьНастройкиСостоянийЗаказов();
	ИначеЕсли ИмяСобытия="Запись_Склад" И Параметр=Объект.Склад Тогда
		ЗаполнитьДанныеСклада();
	ИначеЕсли ИмяСобытия="ИзмененыФиксированныеСостоянияЗаказов" Тогда
		Если Параметр="НеНастроено" Тогда
			#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
			ТолькоПросмотр = Истина;
			ПодключитьОбработчикОжидания("ЗакрытьСЗадержкой", 0.1, Истина);	
			#Иначе
			Закрыть();
			#КонецЕсли 
			Возврат;
		Иначе
			ПриИзмененииФиксированныхСостояний(Параметр);
		КонецЕсли; 
	ИначеЕсли ИмяСобытия="Запись_ВидыЗаказовПокупателей" Тогда
		ЗаполнитьЗаказы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСЗадержкой()
	
	Закрыть();	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ВариантДоставкиПриИзменении(Элемент)
	
	СобственнаяДоставка = (ВариантДоставки="Курьер");
	
	Если СобственнаяДоставка Тогда
		Если ЗначениеЗаполнено(Объект.АдресОтправки) Тогда
			Объект.АдресОтправки = "";
			Объект.АдресОтправкиЗначенияПолей = "";
		КонецЕсли; 
		Если Объект.СлужбаДоставки<>ПредопределенноеЗначение("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами") Тогда
			Объект.СлужбаДоставки = ПредопределенноеЗначение("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами");
			ФильтрСлужбаДоставки = Объект.СлужбаДоставки;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Объект.СпособОтгрузки) Тогда
			Объект.СпособОтгрузки = Неопределено;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = Неопределено;
			ФильтрСклад = Объект.Склад;
		КонецЕсли; 
	Иначе
		Если Объект.СлужбаДоставки=ПредопределенноеЗначение("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами") Тогда
			Объект.СлужбаДоставки = ПредопределенноеЗначение("Справочник.СлужбыДоставки.ПустаяСсылка");
			ФильтрСлужбаДоставки = Объект.СлужбаДоставки;
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(Объект.СпособОтгрузки) Тогда
			Объект.СпособОтгрузки = ПредопределенноеЗначение("Перечисление.СпособыОтгрузки.СамостоятельноПривезтиНаСкладСлужбыДоставки");
		КонецЕсли;
		ПередачаНаСкладКК = (Объект.СпособОтгрузки=ПредопределенноеЗначение("Перечисление.СпособыОтгрузки.СамостоятельноПривезтиНаЕдиныйСклад") 
			ИЛИ Объект.СпособОтгрузки=ПредопределенноеЗначение("Перечисление.СпособыОтгрузки.СамостоятельноПривезтиНаСкладСлужбыДоставки"));
		Если ЗначениеЗаполнено(Объект.Автомобиль) И НЕ ПередачаНаСкладКК Тогда
			Объект.Автомобиль = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	
	ЗаполнитьЗаказы();
	ОбновитьЗаголовокФильтров();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтгрузкиПриИзменении(Элемент)
	
	ПередачаКурьеромКК = (Объект.СпособОтгрузки=ПредопределенноеЗначение("Перечисление.СпособыОтгрузки.ПередатьКурьеруЕдиногоСклада") 
		ИЛИ Объект.СпособОтгрузки=ПредопределенноеЗначение("Перечисление.СпособыОтгрузки.ПередатьКурьеруСлужбыДоставки"));
	ПередачаНаСкладКК = (Объект.СпособОтгрузки=ПредопределенноеЗначение("Перечисление.СпособыОтгрузки.СамостоятельноПривезтиНаЕдиныйСклад") 
		ИЛИ Объект.СпособОтгрузки=ПредопределенноеЗначение("Перечисление.СпособыОтгрузки.СамостоятельноПривезтиНаСкладСлужбыДоставки"));
		
	Если ПередачаКурьеромКК Тогда
		Если ЗначениеЗаполнено(Объект.Курьер) Тогда
			Объект.Курьер = Неопределено;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
			Объект.Автомобиль = Неопределено;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			ЗаполнитьДанныеСклада();
		КонецЕсли; 
	ИначеЕсли ПередачаНаСкладКК Тогда
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = Неопределено;
			ФильтрСклад = Объект.Склад;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Объект.АдресОтправки) Тогда
			Объект.АдресОтправки = "";
			Объект.АдресОтправкиЗначенияПолей = "";
		КонецЕсли; 
	КонецЕсли; 
	
	ЗаполнитьЗаказы();
	ОбновитьЗаголовокФильтров();
	
КонецПроцедуры

&НаКлиенте
Процедура СлужбаДоставкиПриИзменении(Элемент)
	
	ФильтрСлужбаДоставки = Объект.СлужбаДоставки;
	ЗаполнитьЗаказы();
	ОбновитьЗаголовокФильтров();
	
КонецПроцедуры

&НаКлиенте
Процедура КурьерПриИзменении(Элемент)
	
	ФильтрКурьер = Объект.Курьер;
	ЗаполнитьЗаказы();
	ОбновитьЗаголовокФильтров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ФормаПараметры.НесколькоОрганизаций Тогда
		ФильтрОрганизация = Объект.Организация;
	КонецЕсли; 
	ЗаполнитьЗаказы();
	ОбновитьЗаголовокФильтров();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ФормаПараметры.НесколькоСкладов Тогда
		ФильтрСклад = Объект.Склад;
	КонецЕсли; 
	СкладПриИзмененииСервер();
	ОбновитьЗаголовокФильтров();
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииСервер()
	
	ЗаполнитьДанныеСклада();
	ЗаполнитьЗаказы();
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПриИзменении(Элемент)
	
	ЗаполнитьЗаказы();
	ОбновитьЗаголовокФильтров();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказовРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуНастройкиСостояний(
	НСтр("ru = 'Состояния доступных к отгрузке заказов'"),
	НСтр("ru = 'Укажите состояние заказов, которые будут заполняться в маршрутный лист.'"),
	"СостояниеОжидаетОтгрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура НовоеСостояниеЗаказовРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуНастройкиСостояний(
	НСтр("ru = 'Состояния отгруженных заказов'"),
	НСтр("ru = 'Укажите состояние, в которое будут переведены заказы покупателя после проведения маршрутного листа.'"),
	"СостояниеОтгружен");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если Поле = Элементы.ЗаказыПредставлениеЗаказа И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("Ключ", СтрокаТабличнойЧасти.Заказ);
		СтруктураОткрытия.Вставить("Страница", "СтраницаДоставка");
		ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта", СтруктураОткрытия);
	ИначеЕсли Поле = Элементы.ЗаказыПредставлениеРасходнойНакладной И ЗначениеЗаполнено(СтрокаТабличнойЧасти.РасходнаяНакладная) Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("Ключ", СтрокаТабличнойЧасти.РасходнаяНакладная);
		СтруктураОткрытия.Вставить("Страница", "ГруппаДоставка");
		ОткрытьФорму("Документ.РасходнаяНакладная.ФормаОбъекта", СтруктураОткрытия);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПринятьВРаботуПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	ОбновитьИтогиОбъемИВес(Заказы, ВесВсего, ОбъемВсего);
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура АдресНаЯндексКартах(Команда)
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выберите строку'"));
		Возврат;
	КонецЕсли;
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(
		СтрШаблон("https://maps.yandex.ru/?text=%1", КодироватьСтрокуНаСервере(ТекущиеДанные.АдресДоставки)));
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ЗаказыКонтекстноеМенюАдресНаЯндексКартах, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНаGoogleMaps(Команда)
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выберите строку'"));
		Возврат;
	КонецЕсли;
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(
		СтрШаблон("https://maps.google.ru/?q=%1", КодироватьСтрокуНаСервере(ТекущиеДанные.АдресДоставки)));
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ЗаказыКонтекстноеМенюАдресНаGoogleMaps, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыОтгрузки(Команда)
	
	ПараметрыСовета = Новый Структура;
	ПараметрыСовета.Вставить("Заголовок", НСтр("ru = 'Формирование документов отгрузки'"));
	ПараметрыСовета.Вставить("ТекстСообщения", НСтр("ru = 'Сейчас будут сформированы расходные накладные по всем заказам из маршрутного листа (если они еще не были созданы). Отгрузка будет произведена со склада, указанного в заказе.'"));
	ПараметрыСовета.Вставить("ВидимостьБольшеНеПоказывать", Истина);
	ПараметрыСовета.Вставить("ЗаголовокКнопкиОк", НСтр("ru = 'Продолжить'"));
	Если ФормаПараметры.НеПредупреждатьПередФормированием Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("БольшеНеПоказывать", ФормаПараметры.НеПредупреждатьПередФормированием);
		СтруктураВозврата.Вставить("КодВозврата", КодВозвратаДиалога.ОК);
		СформироватьДокументыОтгрузкиПродолжение(СтруктураВозврата, ПараметрыСовета);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьДокументыОтгрузкиПродолжение", ЭтотОбъект, ПараметрыСовета);
		ОткрытьФорму("ОбщаяФорма.ФормаПредупреждения", ПараметрыСовета, ЭтаФорма, Истина, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыОтгрузкиПродолжение(Результат, ПараметрыСовета) Экспорт
	
	Если ТипЗнч(Результат)<>Тип("Структура") ИЛИ НЕ Результат.Свойство("КодВозврата") ИЛИ Результат.КодВозврата<>КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
		Записать(ПараметрыЗаписи);
	КонецЕсли; 
	
	ЗапуститьФоновоеЗадание();
	
	Если Результат.БольшеНеПоказывать<>ФормаПараметры.НеПредупреждатьПередФормированием Тогда
		СохранитьНастройкуНеПредупреждатьПередФормированием(Результат.БольшеНеПоказывать);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуНеПредупреждатьПередФормированием(БольшеНеПоказывать)
	
	ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить("МаршрутныйЛист", "НеПредупреждатьПередФормированием", БольшеНеПоказывать);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	ОтметитьЗаказы(Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	ОтметитьЗаказы(Ложь);	
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьЗаказы();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьНовоеСостояниеЗаказов(Команда)
	
	ОткрытьФормуНастройкиСостояний(
	НСтр("ru = 'Состояния отгруженных заказов'"),
	НСтр("ru = 'Укажите состояния, в которые будут переведены заказы покупателя после проведения маршрутного листа.'"),
	"СостояниеОтгружен");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСостояниеЗаказов(Команда)
	
	ОткрытьФормуНастройкиСостояний(
	НСтр("ru = 'Состояния доступных к отгрузке заказов'"),
	НСтр("ru = 'Укажите состояния для разных видов заказов, которые будут заполняться в маршрутный лист.'"),
	"СостояниеОжидаетОтгрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчитатьсяОДоставке(Команда)
	
	СтруктураОткрытия = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтруктураОткрытия.Вставить("МаршрутныйЛист", Объект.Ссылка);
	КонецЕсли; 
	ОткрытьФорму("Обработка.ФормированиеДокументовДоставки.Форма", СтруктураОткрытия, ЭтотОбъект);	
	
КонецПроцедуры

#КонецОбласти 

#Область ФоновоеЗаданиеПолучениеДанных

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание()
	
	УстановитьДоступностьФормы(Ложь);
	
	Задание = ЗаданиеФормированиеДокументовОтгрузки();
	Если Задание=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессФормированияДокументов", ЭтотОбъект); 
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
	Задание,
	Новый ОписаниеОповещения("ОбработатьФормированиеДокументов", ЭтотОбъект),
	ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессФормированияДокументов(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если Прогресс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Прогресс.Статус <> "Выполняется" ИЛИ Прогресс.Прогресс=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндикаторВыполнения = Прогресс.Прогресс.Процент;
	ДлительнаяОперацияДокумент = Прогресс.Прогресс.Текст;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФормированиеДокументов(Результат, Параметры) Экспорт
	
	УстановитьДоступностьФормы(Истина);
	
	// Обработка исключений
	Если ТипЗнч(Результат)=Тип("Структура") И Результат.Свойство("Статус") И Результат.Статус <> "Выполнено" Тогда
		Если Результат.Свойство("КраткоеПредставлениеОшибки") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			Результат.КраткоеПредставлениеОшибки);
		КонецЕсли; 
		Элементы.СтраницыСтатусФоновогоЗадания.ТекущаяСтраница = Элементы.ЗаданиеЗавершеноСОшибкой;
		Возврат;
	КонецЕсли;
	
	// Вывод ошибок формирования документов отгрузки
	Если ТипЗнч(Результат)=Тип("Структура") И Результат.Свойство("АдресРезультата") Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ТипЗнч(РезультатВыполнения)=Тип("Структура") И РезультатВыполнения.Свойство("Ошибки") И ТипЗнч(РезультатВыполнения.Ошибки)=Тип("СписокЗначений") И РезультатВыполнения.Ошибки.Количество()>0 Тогда
			Для каждого Ошибка Из РезультатВыполнения.Ошибки Цикл
				ОбщегоНазначенияКлиент.СообщитьПользователю(
				Ошибка.Представление,
				Ошибка.Значение);
			КонецЦикла;
			Элементы.СтраницыСтатусФоновогоЗадания.ТекущаяСтраница = Элементы.ЗаданиеЗавершеноСОшибкой;
		КонецЕсли;
	КонецЕсли; 
	
	ОбработатьФормированиеДокументовСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьФормированиеДокументовСервер()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыСтатусФоновогоЗадания", "Видимость", Ложь);
	
	Прочитать();
	Заказы.Очистить();
	ЗаполнитьЗаказы(Истина);
	
КонецПроцедуры
 
&НаСервере
Функция ЗаданиеФормированиеДокументовОтгрузки()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыСтатусФоновогоЗадания", "Видимость", Истина);
	Элементы.СтраницыСтатусФоновогоЗадания.ТекущаяСтраница = Элементы.ЗаданиеВыполняется;
	ДлительнаяОперацияДокумент = "";
	ИндикаторВыполнения = 0;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("МаршрутныйЛист", Объект.Ссылка);
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
	"Документы.МаршрутныйЛист.ВыполнитьОтгрузку",
	ПараметрыЗадания,
	ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьФормы(Доступность)
	
	ТолькоПросмотр = НЕ Доступность;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВариантДоставки", "ТолькоПросмотр", НЕ Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаказыКоманды", "Доступность", Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Заказы", "ТолькоПросмотр", НЕ Доступность);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаСервереБезКонтекста
Функция КодироватьСтрокуНаСервере(Знач ИсходнаяСтрока)
	
	Возврат КодироватьСтроку(ИсходнаяСтрока, СпособКодированияСтроки.КодировкаURL);
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	ФормаПараметры = Форма.ФормаПараметры;
	
	СобственнаяДоставка = (Форма.ВариантДоставки="Курьер");
	ПередачаКурьеромКК = (Объект.СпособОтгрузки=ПредопределенноеЗначение("Перечисление.СпособыОтгрузки.ПередатьКурьеруЕдиногоСклада") 
		ИЛИ Объект.СпособОтгрузки=ПредопределенноеЗначение("Перечисление.СпособыОтгрузки.ПередатьКурьеруСлужбыДоставки"));
	ПередачаНаСкладКК = (Объект.СпособОтгрузки=ПредопределенноеЗначение("Перечисление.СпособыОтгрузки.СамостоятельноПривезтиНаЕдиныйСклад") 
		ИЛИ Объект.СпособОтгрузки=ПредопределенноеЗначение("Перечисление.СпособыОтгрузки.СамостоятельноПривезтиНаСкладСлужбыДоставки"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СлужбаДоставки", "Видимость", НЕ СобственнаяДоставка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СпособОтгрузки", "Видимость", НЕ СобственнаяДоставка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "Видимость", НЕ СобственнаяДоставка И ПередачаКурьеромКК И Форма.ФормаПараметры.НесколькоСкладов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресОтправки", "Видимость", НЕ СобственнаяДоставка И ПередачаКурьеромКК);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Курьер", "Видимость", СобственнаяДоставка ИЛИ ПередачаНаСкладКК);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Автомобиль", "Видимость", СобственнаяДоставка ИЛИ ПередачаНаСкладКК);
	
	ЕстьНеотгруженные = Ложь;
	ЕстьРасходные = Ложь;
	ЕстьНесохраненные = Ложь;
	Для каждого СтрокаТабличнойЧасти Из Форма.Заказы Цикл
		Если СтрокаТабличнойЧасти.ПринятьВРаботу И НЕ СтрокаТабличнойЧасти.Отгружен Тогда
			ЕстьНеотгруженные = Истина;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.Отгружен Тогда
			ЕстьРасходные = Истина;
		КонецЕсли; 
		Если НЕ СтрокаТабличнойЧасти.Сохранен Тогда
			ЕстьНесохраненные = Истина;
		КонецЕсли;
	КонецЦикла; 
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СформироватьДокументыОтгрузки", "Доступность", Объект.Проведен И ЕстьНеотгруженные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтчитатьсяОДоставке", "Доступность", Объект.Проведен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаказыГрупповойВыбор", "Доступность", ЕстьНеотгруженные ИЛИ ЕстьНесохраненные);
	Если НЕ ПустаяСтрока(Форма.ИмяКомандыПечатиМаршрутныйЛист) Тогда
		Для каждого Элемент Из Элементы.ПодменюПечать.ПодчиненныеЭлементы Цикл
			Если Элемент.Имя=Форма.ИмяКомандыПечатиМаршрутныйЛист Тогда
				Продолжить;
			КонецЕсли; 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элемент.Имя, "Доступность", ЕстьРасходные);
		КонецЦикла; 
	КонецЕсли; 
	
	// Видимость фильтров
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФильтрОрганизация", "Видимость", ФормаПараметры.НесколькоОрганизаций);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФильтрСклад", "Видимость", ФормаПараметры.НесколькоСкладов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФильтрВидЗаказа", "Видимость", ФормаПараметры.НесколькоВидовЗаказов);
	
	Если НЕ ФормаПараметры.НесколькоВидовЗаказов Тогда
		Форма.ФильтрВидЗаказа = ПредопределенноеЗначение("Справочник.ВидыЗаказовПокупателей.Основной");
	КонецЕсли; 
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", ДокументыУНФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
Функция ТребуетсяНастройка(НесколькоВидовЗаказов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВидыЗаказовПокупателей.Ссылка
	|ИЗ
	|	Справочник.ВидыЗаказовПокупателей КАК ВидыЗаказовПокупателей
	|ГДЕ
	|	(ВидыЗаказовПокупателей.СостояниеОжидаетОтгрузки = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка)
	|			ИЛИ ВидыЗаказовПокупателей.СостояниеОтгружен = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка))
	|	И НЕ ВидыЗаказовПокупателей.ПометкаУдаления И НЕ ВидыЗаказовПокупателей.НеИспользоватьДоставку";

	Если НЕ НесколькоВидовЗаказов Тогда
		Запрос.Текст = Запрос.Текст+"
		|	И ВидыЗаказовПокупателей.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыЗаказовПокупателей.Основной)";	
	КонецЕсли;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНастройкиСостояний(Заголовок, Подсказка, ИмяРеквизита = "")
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Заголовок", Заголовок);
	СтруктураОткрытия.Вставить("Подсказка", Подсказка);
	Если НЕ ПустаяСтрока(ИмяРеквизита) Тогда
		СтруктураОткрытия.Вставить("ИмяРеквизита", ИмяРеквизита);
	КонецЕсли; 
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиФиксированныхСостоянийЗаказов", СтруктураОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФиксированныхСостояний(ИмяРеквизита)
	
	ЗаполнитьИУстановитьВидимостьНастройкиСостоянийЗаказов();
	Если ИмяРеквизита="СостояниеОжидаетОтгрузки" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		ЗаполнитьЗаказы();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтогиОбъемИВес(Заказы, ВесВсего, ОбъемВсего)
	
	ОбъемВсего = 0;
	ВесВсего = 0;
	
	Для каждого СтрокаТабличнойЧасти Из Заказы Цикл
		Если НЕ СтрокаТабличнойЧасти.ПринятьВРаботу Тогда
			Продолжить;
		КонецЕсли; 
		ВесВсего = ВесВсего + СтрокаТабличнойЧасти.Вес;
		ОбъемВсего = ОбъемВсего + СтрокаТабличнойЧасти.Объем;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьЗаказы(Значение)
	
	Для Каждого СтрокаТабличнойЧасти Из Заказы Цикл
		Если СтрокаТабличнойЧасти.Отгружен Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаТабличнойЧасти.ПринятьВРаботу = Значение;
	КонецЦикла;
	ОбновитьИтогиОбъемИВес(Заказы, ВесВсего, ОбъемВсего);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИУстановитьВидимостьНастройкиСостоянийЗаказов()
	
	Если НЕ ФормаПараметры.НесколькоВидовЗаказов Тогда
		
		СтруктураСостояний = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Справочники.ВидыЗаказовПокупателей.Основной, "СостояниеОжидаетОтгрузки, СостояниеОтгружен");
		
		СостояниеЗаказов = СтруктураСостояний.СостояниеОжидаетОтгрузки;
		Элементы.СостояниеЗаказов.Доступность = НЕ ЗначениеЗаполнено(СостояниеЗаказов);
		Элементы.СостояниеЗаказов.КнопкаОчистки = НЕ ЗначениеЗаполнено(СостояниеЗаказов);
		Элементы.СостояниеЗаказов.КнопкаВыпадающегоСписка = НЕ ЗначениеЗаполнено(СостояниеЗаказов);
		Если ЗначениеЗаполнено(СостояниеЗаказов) Тогда
			Элементы.СостояниеЗаказовРасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Маршрутный лист заполняется заказами с состоянием «%1». Настраивается '"), СостояниеЗаказов),
				Новый ФорматированнаяСтрока(НСтр("ru = 'здесь'"),,,,"Переход"));
		Иначе
			Элементы.СостояниеЗаказовРасширеннаяПодсказка.Заголовок = "";	
		КонецЕсли;
		
		НовоеСостояниеЗаказов = СтруктураСостояний.СостояниеОтгружен;
		Элементы.НовоеСостояниеЗаказов.Доступность = НЕ ЗначениеЗаполнено(НовоеСостояниеЗаказов);
		Элементы.НовоеСостояниеЗаказов.КнопкаОчистки = НЕ ЗначениеЗаполнено(НовоеСостояниеЗаказов);
		Элементы.НовоеСостояниеЗаказов.КнопкаВыпадающегоСписка = НЕ ЗначениеЗаполнено(НовоеСостояниеЗаказов);
		Если ЗначениеЗаполнено(НовоеСостояниеЗаказов) Тогда
			Элементы.НовоеСостояниеЗаказовРасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
				Элементы.ДекорацияИконкаПодсказка.Подсказка+". ",
				Новый ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Состояние заказов изменится при проведении на «%1». Настраивается '"), НовоеСостояниеЗаказов)),
				Новый ФорматированнаяСтрока(НСтр("ru = 'здесь'"),,,,"Переход"));
		Иначе
			Элементы.НовоеСостояниеЗаказовРасширеннаяПодсказка.Заголовок = "";	
		КонецЕсли; 
			
	КонецЕсли; 
	
	ТолькоГотовыеКОтгрузке = Истина;
	Элементы.НовоеСостояниеЗаказов.Видимость = НЕ ФормаПараметры.НесколькоВидовЗаказов;
	Элементы.НастроитьНовоеСостояниеЗаказов.Видимость = ФормаПараметры.НесколькоВидовЗаказов;
	Элементы.СостояниеЗаказов.Видимость = НЕ ФормаПараметры.НесколькоВидовЗаказов;
	Элементы.ГруппаОтгруженныеЗаказы.Видимость = ФормаПараметры.НесколькоВидовЗаказов;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресОтправкиНаФорме()
	
	Если ПустаяСтрока(Объект.АдресОтправки) Тогда
		Строки = Новый Массив;
		Строки.Добавить(НСтр("ru = 'Заполните фактический адрес в карточке '"));
		Если ФормаПараметры.НесколькоСкладов Тогда
			Строки.Добавить(НСтр("ru = 'склада '"));
			Строки.Добавить(Новый ФорматированнаяСтрока(Строка(Объект.Склад),,,, ПолучитьНавигационнуюСсылку(Объект.Склад)));
		Иначе
			Строки.Добавить(НСтр("ru = 'организации '"));
			Строки.Добавить(Новый ФорматированнаяСтрока(Строка(Объект.Организация),,,, ПолучитьНавигационнуюСсылку(Объект.Организация)));
		КонецЕсли;
		АдресОтправки = Новый ФорматированнаяСтрока(Строки);
		Элементы.АдресОтправки.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	Иначе
		АдресОтправки = Новый ФорматированнаяСтрока(Объект.АдресОтправки);
		Элементы.АдресОтправки.ЦветТекста = Новый Цвет;
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФильтры()
	
	ФильтрСлужбаДоставки 	= Объект.СлужбаДоставки;
	ФильтрКурьер 			= Объект.Курьер;
	ФильтрСпособДоставки 	= Объект.СпособДоставки;
	Если ФормаПараметры.НесколькоОрганизаций Тогда
		ФильтрОрганизация 	= Объект.Организация;
	Иначе
		ФильтрОрганизация 	= Справочники.Организации.ПустаяСсылка();
	КонецЕсли; 
	Если ФормаПараметры.НесколькоСкладов Тогда
		ФильтрСклад 		= Объект.Склад;
	Иначе
		ФильтрСклад 		= Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаказы(ПервоеЗаполнение = Ложь)
	
	Если ПервоеЗаполнение Тогда
		ОтгружаемыеДокументы = Объект.Заказы.Выгрузить();
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПринятьВРаботу", Истина);
		ОтгружаемыеДокументы = Заказы.Выгрузить(СтруктураОтбора, "Заказ, РасходнаяНакладная, Доставлен");
		ОтгружаемыеДокументы.Свернуть("Заказ, РасходнаяНакладная, Доставлен");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ОтгружаемыеДокументы", ОтгружаемыеДокументы);
	Запрос.УстановитьПараметр("ВидЗаказа", ФильтрВидЗаказа);
	Запрос.УстановитьПараметр("Организация", ФильтрОрганизация); 
	Запрос.УстановитьПараметр("ДатаДоставкиНачало", ФильтрДатаДоставки.ДатаНачала); 
	Запрос.УстановитьПараметр("ДатаДоставкиОкончание", ФильтрДатаДоставки.ДатаОкончания); 
	Запрос.УстановитьПараметр("ДатаОтгрузкиНачало", ФильтрДатаОтгрузки.ДатаНачала); 
	Запрос.УстановитьПараметр("ДатаОтгрузкиОкончание", ФильтрДатаОтгрузки.ДатаОкончания); 
	Запрос.УстановитьПараметр("СлужбаДоставки", ФильтрСлужбаДоставки); 
	Запрос.УстановитьПараметр("Курьер", ФильтрКурьер); 
	Запрос.УстановитьПараметр("СпособДоставки", ФильтрСпособДоставки); 
	Запрос.УстановитьПараметр("Склад", ФильтрСклад); 
	Запрос.УстановитьПараметр("ЗонаТариф", ФильтрЗонаТариф);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтгружаемыеДокументы.Заказ КАК Заказ,
	|	ОтгружаемыеДокументы.РасходнаяНакладная КАК РасходнаяНакладная,
	|	ОтгружаемыеДокументы.Доставлен КАК Доставлен
	|ПОМЕСТИТЬ ОтгружаемыеДокументыПлан
	|ИЗ
	|	&ОтгружаемыеДокументы КАК ОтгружаемыеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаршрутныйЛистЗаказы.Заказ КАК Заказ,
	|	МаршрутныйЛистЗаказы.РасходнаяНакладная КАК РасходнаяНакладная,
	|	МаршрутныйЛистЗаказы.Доставлен КАК Доставлен
	|ПОМЕСТИТЬ ОтгружаемыеДокументыФакт
	|ИЗ
	|	Документ.МаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
	|ГДЕ
	|	МаршрутныйЛистЗаказы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутныйЛистЗаказы.Заказ,
	|	МаршрутныйЛистЗаказы.РасходнаяНакладная,
	|	МаршрутныйЛистЗаказы.Доставлен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЗаказовПокупателей.Ссылка КАК ВидЗаказа,
	|	ВидыЗаказовПокупателей.СостояниеОжидаетОтгрузки КАК Состояние
	|ПОМЕСТИТЬ ДоступныеСостояния
	|ИЗ
	|	Справочник.ВидыЗаказовПокупателей КАК ВидыЗаказовПокупателей
	|ГДЕ
	|	НЕ ВидыЗаказовПокупателей.ПометкаУдаления
	|	И НЕ ВидыЗаказовПокупателей.НеИспользоватьДоставку
	|	И (ВидыЗаказовПокупателей.Ссылка = &ВидЗаказа
	|			ИЛИ &ВидЗаказа = ЗНАЧЕНИЕ(Справочник.ВидыЗаказовПокупателей.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателя.Ссылка КАК Заказ
	|ПОМЕСТИТЬ ПодходящиеЗаказы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Проведен
	|	И ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу)
	|	И (ЗаказПокупателя.ВидЗаказа = ЗНАЧЕНИЕ(Справочник.ВидыЗаказовПокупателей.ПустаяСсылка)
	|			ИЛИ (ЗаказПокупателя.ВидЗаказа, ЗаказПокупателя.СостояниеЗаказа) В
	|				(ВЫБРАТЬ
	|					ДоступныеСостояния.ВидЗаказа,
	|					ДоступныеСостояния.Состояние
	|				ИЗ
	|					ДоступныеСостояния))
	|	И (ЗаказПокупателя.СлужбаДоставки = &СлужбаДоставки
	|			ИЛИ &СлужбаДоставки = ЗНАЧЕНИЕ(Справочник.СлужбыДоставки.ПустаяСсылка))
	|	И (ЗаказПокупателя.Курьер = &Курьер
	|			ИЛИ &Курьер = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|	И (ЗаказПокупателя.ОжидаемаяДатаВручения МЕЖДУ &ДатаДоставкиНачало И &ДатаДоставкиОкончание
	|			ИЛИ &ДатаДоставкиОкончание = ДАТАВРЕМЯ(1, 1, 1)
	|				И ЗаказПокупателя.ОжидаемаяДатаВручения > &ДатаДоставкиНачало)
	|	И (ЗаказПокупателя.ДатаОтгрузки МЕЖДУ &ДатаОтгрузкиНачало И &ДатаОтгрузкиОкончание
	|			ИЛИ &ДатаОтгрузкиОкончание = ДАТАВРЕМЯ(1, 1, 1)
	|				И ЗаказПокупателя.ДатаОтгрузки > &ДатаОтгрузкиНачало)
	|	И (ЗаказПокупателя.Организация = &Организация
	|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И (ЗаказПокупателя.СтруктурнаяЕдиницаРезерв = &Склад
	|			ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|	И (ЗаказПокупателя.ЗонаТариф = &ЗонаТариф
	|			ИЛИ &ЗонаТариф = ЗНАЧЕНИЕ(Справочник.ЗоныТарифыДоставки.ПустаяСсылка))
	|	И (ЗаказПокупателя.СпособДоставки = &СпособДоставки
	|			ИЛИ &СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПустаяСсылка))
	|	И (ЗаказПокупателя.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПунктВыдачи)
	|			ИЛИ ЗаказПокупателя.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Курьер)
	|			ИЛИ ЗаказПокупателя.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Почта))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК Заказ
	|ПОМЕСТИТЬ НеотгруженныеЗаказы
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки КАК ЗаказыПокупателейОстатки
	|ГДЕ
	|	ЗаказыПокупателейОстатки.КоличествоОстаток > 0
	|	И ЗаказыПокупателейОстатки.ЗаказПокупателя В
	|			(ВЫБРАТЬ
	|				ПодходящиеЗаказы.Заказ
	|			ИЗ
	|				ПодходящиеЗаказы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодходящиеЗаказы.Заказ КАК Заказ,
	|	РасходнаяНакладная.Ссылка КАК РасходнаяНакладная
	|ПОМЕСТИТЬ ЗаказыИНакладные
	|ИЗ
	|	ПодходящиеЗаказы КАК ПодходящиеЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|		ПО (РасходнаяНакладная.Заказ ССЫЛКА Документ.ЗаказПокупателя)
	|			И ПодходящиеЗаказы.Заказ = РасходнаяНакладная.Заказ
	|ГДЕ
	|	РасходнаяНакладная.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодходящиеЗаказы.Заказ,
	|	РасходнаяНакладная.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НеотгруженныеЗаказы.Заказ,
	|	ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
	|ИЗ
	|	НеотгруженныеЗаказы КАК НеотгруженныеЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыИНакладные.Заказ КАК Заказ,
	|	ЗаказыИНакладные.РасходнаяНакладная КАК РасходнаяНакладная
	|ПОМЕСТИТЬ НеотгруженныеЗаказыИНакладные
	|ИЗ
	|	ЗаказыИНакладные КАК ЗаказыИНакладные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист КАК МаршрутныйЛист
	|			ПО МаршрутныйЛистЗаказы.Ссылка = МаршрутныйЛист.Ссылка
	|		ПО ЗаказыИНакладные.Заказ = МаршрутныйЛистЗаказы.Заказ
	|			И ЗаказыИНакладные.РасходнаяНакладная = МаршрутныйЛистЗаказы.РасходнаяНакладная
	|ГДЕ
	|	(МаршрутныйЛистЗаказы.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ МаршрутныйЛист.Проведен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ КАК Заказ,
	|	ВложенныйЗапрос.РасходнаяНакладная КАК РасходнаяНакладная,
	|	ВложенныйЗапрос.Доставлен КАК Доставлен
	|ПОМЕСТИТЬ ЗаполняемыеЗаказыИНакладные
	|ИЗ
	|	(ВЫБРАТЬ
	|		НеотгруженныеЗаказыИНакладные.Заказ КАК Заказ,
	|		НеотгруженныеЗаказыИНакладные.РасходнаяНакладная КАК РасходнаяНакладная,
	|		ЛОЖЬ КАК Доставлен
	|	ИЗ
	|		НеотгруженныеЗаказыИНакладные КАК НеотгруженныеЗаказыИНакладные
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтгружаемыеДокументыПлан.Заказ,
	|		ОтгружаемыеДокументыПлан.РасходнаяНакладная,
	|		ОтгружаемыеДокументыПлан.Доставлен
	|	ИЗ
	|		ОтгружаемыеДокументыПлан КАК ОтгружаемыеДокументыПлан
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтгружаемыеДокументыФакт.Заказ,
	|		ОтгружаемыеДокументыФакт.РасходнаяНакладная,
	|		ОтгружаемыеДокументыФакт.Доставлен
	|	ИЗ
	|		ОтгружаемыеДокументыФакт КАК ОтгружаемыеДокументыФакт) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.РасходнаяНакладная,
	|	ВложенныйЗапрос.Доставлен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаполняемыеЗаказыИНакладные.Заказ КАК Заказ,
	|	ЗаполняемыеЗаказыИНакладные.РасходнаяНакладная КАК РасходнаяНакладная,
	|	ЗаполняемыеЗаказыИНакладные.Доставлен КАК Доставлен,
	|	ВЫБОР
	|		КОГДА (ЗаполняемыеЗаказыИНакладные.Заказ, ЗаполняемыеЗаказыИНакладные.РасходнаяНакладная) В
	|				(ВЫБРАТЬ
	|					ОтгружаемыеДокументыПлан.Заказ,
	|					ОтгружаемыеДокументыПлан.РасходнаяНакладная
	|				ИЗ
	|					ОтгружаемыеДокументыПлан)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПринятьВРаботу,
	|	ВЫБОР
	|		КОГДА (ЗаполняемыеЗаказыИНакладные.Заказ, ЗаполняемыеЗаказыИНакладные.РасходнаяНакладная) В
	|				(ВЫБРАТЬ
	|					ОтгружаемыеДокументыФакт.Заказ,
	|					ОтгружаемыеДокументыФакт.РасходнаяНакладная
	|				ИЗ
	|					ОтгружаемыеДокументыФакт)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Сохранен,
	|	ЗаказПокупателя.АдресДоставки КАК АдресДоставки,
	|	ЗаказПокупателя.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ЗаказПокупателя.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ЗаказПокупателя.Вес КАК Вес,
	|	ЗаказПокупателя.Объем КАК Объем,
	|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
	|	ЗаказПокупателя.ОжидаемаяДатаВручения КАК ДатаДоставки,
	|	ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА ЗаполняемыеЗаказыИНакладные.РасходнаяНакладная <> ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отгружен
	|ИЗ
	|	ЗаполняемыеЗаказыИНакладные КАК ЗаполняемыеЗаказыИНакладные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ПО ЗаполняемыеЗаказыИНакладные.Заказ = ЗаказПокупателя.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПринятьВРаботу УБЫВ,
	|	ЗаказПокупателя.ВремяДоставкиС,
	|	ЗаказПокупателя.Номер,
	|	ЗаполняемыеЗаказыИНакладные.РасходнаяНакладная УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ДокументыДляПолученияПредставлений = Новый Массив;
	Заказы.Очистить();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Заказы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	    Если ПредставленияДокументов.Получить(Выборка.Заказ) = Неопределено Тогда
			ДокументыДляПолученияПредставлений.Добавить(Выборка.Заказ);
		КонецЕсли; 
	    Если ЗначениеЗаполнено(Выборка.РасходнаяНакладная) И ПредставленияДокументов.Получить(Выборка.РасходнаяНакладная) = Неопределено Тогда
			ДокументыДляПолученияПредставлений.Добавить(Выборка.РасходнаяНакладная);
		КонецЕсли; 
	КонецЦикла;
	Если ДокументыДляПолученияПредставлений.Количество() > 0 Тогда
		ДополнитьПредставления(ДокументыДляПолученияПредставлений);
	КонецЕсли;
	Для каждого СтрокаТабличнойЧасти Из Заказы Цикл
		СтрокаТабличнойЧасти.ПредставлениеЗаказа = ПредставленияДокументов.Получить(СтрокаТабличнойЧасти.Заказ);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.РасходнаяНакладная) Тогда
			СтрокаТабличнойЧасти.ПредставлениеРасходнойНакладной = ПредставленияДокументов.Получить(СтрокаТабличнойЧасти.РасходнаяНакладная);
		КонецЕсли; 
	КонецЦикла; 
	
	ОбновитьИтогиОбъемИВес(Заказы, ВесВсего, ОбъемВсего);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПредставления(ДокументыДляПолученияПредставлений)
	
	Соответствие = Новый Соответствие(ПредставленияДокументов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", ДокументыДляПолученияПредставлений);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателя.Ссылка,
	|	ЗаказПокупателя.Номер,
	|	ЗаказПокупателя.Дата
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходнаяНакладная.Ссылка,
	|	РасходнаяНакладная.Номер,
	|	РасходнаяНакладная.Дата
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка В(&Ссылки)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Представление = СтрШаблон(
		НСтр("ru = '№%1 от %2'"),
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина),
		Формат(Выборка.Дата, "ДЛФ=D"));
		Соответствие.Вставить(Выборка.Ссылка, Представление);
	КонецЦикла; 
	
	ПредставленияДокументов = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФильтров()
	
	ЗаголовокГруппы = "";
	Если ЗначениеЗаполнено(ФильтрСлужбаДоставки) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + ?(ПустаяСтрока(ЗаголовокГруппы), "", ", ") + Строка(ФильтрСлужбаДоставки);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ФильтрКурьер) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + ?(ПустаяСтрока(ЗаголовокГруппы), "", ", ") + Строка(ФильтрКурьер);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ФильтрСпособДоставки) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + ?(ПустаяСтрока(ЗаголовокГруппы), "", ", ") + Строка(ФильтрСпособДоставки);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ФильтрЗонаТариф) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + ?(ПустаяСтрока(ЗаголовокГруппы), "", ", ") + Строка(ФильтрЗонаТариф);
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрДатаДоставки) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + ?(ПустаяСтрока(ЗаголовокГруппы), "", ", ") + НСтр("ru = 'доставка '") + Строка(ФильтрДатаДоставки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрДатаОтгрузки) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + ?(ПустаяСтрока(ЗаголовокГруппы), "", ", ") + НСтр("ru = 'отгрузка '") + Строка(ФильтрДатаОтгрузки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрОрганизация) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + ?(ПустаяСтрока(ЗаголовокГруппы), "", ", ") + Строка(ФильтрОрганизация);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ФильтрСклад) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + ?(ПустаяСтрока(ЗаголовокГруппы), "", ", ") + Строка(ФильтрСклад);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ФильтрВидЗаказа) И ФормаПараметры.НесколькоВидовЗаказов Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + ?(ПустаяСтрока(ЗаголовокГруппы), "", ", ") + Строка(ФильтрВидЗаказа);
	КонецЕсли; 
	Если ЗначениеЗаполнено(СостояниеЗаказов) И НЕ ФормаПараметры.НесколькоВидовЗаказов Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + ?(ПустаяСтрока(ЗаголовокГруппы), "", ", ") + Строка(СостояниеЗаказов);
	КонецЕсли;
	Если ФормаПараметры.НесколькоВидовЗаказов Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + ?(ПустаяСтрока(ЗаголовокГруппы), "", ", ") + НСтр("ru = 'только готовые к отгрузке'");
	КонецЕсли; 
	
	Если ПустаяСтрока(ЗаголовокГруппы) Тогда
		Элементы.ГруппаФильтры.Заголовок = НСтр("ru = 'Фильтры'");
	Иначе
		Элементы.ГруппаФильтры.Заголовок = СтрШаблон(НСтр("ru = 'Фильтры: %1'"), ЗаголовокГруппы);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСклада()
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) И ФормаПараметры.НесколькоСкладов Тогда
		Объект.Склад = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойСклад");
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
		КонецЕсли; 
		ФильтрСклад = Объект.Склад;
	КонецЕсли; 
	
	Если ФормаПараметры.НесколькоСкладов Тогда	
		Адреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Склад,
			Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы,
			ТекущаяДатаСеанса(), Ложь);
	Иначе
		Адреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Организация,
			Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
			ТекущаяДатаСеанса(), Ложь);
	КонецЕсли;
		
	Если Адреса.Количество() > 0  Тогда
		Объект.АдресОтправки = Адреса[0].Представление;
		Объект.АдресОтправкиЗначенияПолей = Адреса[0].ЗначенияПолей;
	Иначе
		Объект.АдресОтправки = "";
		Объект.АдресОтправкиЗначенияПолей = "";
	КонецЕсли;
	
	ОбновитьАдресОтправкиНаФорме();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
