#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьОшибкуВТаблицу(ОписаниеОшибки, ВидОперации, ТаблицаОшибок, Аналитика = Неопределено)
	
	Если Аналитика = Неопределено Тогда
		Аналитика = Документы.ЗаказПокупателя.ПустаяСсылка()
	КонецЕсли;
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.Период = Дата;
	НоваяСтрока.Организация = ДополнительныеСвойства.ДляПроведения.Организация;
	НоваяСтрока.ВидОперации = ВидОперации;
	НоваяСтрока.Аналитика = Аналитика;
	НоваяСтрока.ОписаниеОшибки = ОписаниеОшибки;
	НоваяСтрока.Регистратор = Ссылка;
	НоваяСтрока.Активность = Истина;
	
КонецПроцедуры // ДобавитьОшибкуВТаблицу()

Функция СформироватьОписаниеОшибкиРаспределенияЗатрат(СчетУчета, СпособРаспределения, ФильтрПоЗаказ, Сумма)
	
	ОписаниеОшибки = НСтр(
		"ru = 'Затрата ""%СчетУчета%"" в сумме %Сумма%, распределяемая на выпуск продукции по %СпособРаспределения% не может быть распределена, т.к. в рассчитываемом периоде не было %ДополнительноеОписание%.'");
	
	ОписаниеОшибки = СтрЗаменить(
		ОписаниеОшибки,
		"%СчетУчета%",
		Строка(СчетУчета));
	
	ОписаниеОшибки = СтрЗаменить(
		ОписаниеОшибки,
		"%Сумма%",
		Строка(Сумма) + " " + СокрЛП(Строка(Константы.ВалютаУчета.Получить())));
	
	ОписаниеОшибки = СтрЗаменить(
		ОписаниеОшибки,
		"%СпособРаспределения%",
		?(СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемВыпуска,
			НСтр("ru = 'объему выпуска'"),
			НСтр("ru = 'прямым затратам'")));
	
	ОписаниеОшибки = СтрЗаменить(
		ОписаниеОшибки,
		"%ДополнительноеОписание%",
		?(СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемВыпуска,
			НСтр("ru = 'выпусков продукции%Заказ%'"),
			НСтр("ru = 'распределения прямых затрат%Заказ%, указанных в настройке распределения'")));
			
	Если ЗначениеЗаполнено(ФильтрПоЗаказ) Тогда
		ПодстрокаЗаказ = СтрШаблон(НСтр("ru = '%1 по %2'"), "", Строка(ФильтрПоЗаказ));
	Иначе
		ПодстрокаЗаказ = "";	
	КонецЕсли;
	ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Заказ%", ПодстрокаЗаказ);
	
	Возврат ОписаниеОшибки;
	
КонецФункции

Функция СформироватьОписаниеОшибкиРаспределенияРасходов(СчетУчета, СпособРаспределения, Сумма)
	
	ОписаниеОшибки = НСтр(
		"ru = 'Расход ""%СчетУчета%"" в сумме %Сумма%, распределяемый на финансовый результат по %СпособРаспределения% не может быть распределен, т.к. в рассчитываемом периоде не было %ДополнительноеОписание%.'");
	
	ОписаниеОшибки = СтрЗаменить(
		ОписаниеОшибки,
		"%СчетУчета%",
		Строка(СчетУчета));
	
	ОписаниеОшибки = СтрЗаменить(
		ОписаниеОшибки,
		"%Сумма%",
		Строка(Сумма) + " " + СокрЛП(Строка(Константы.ВалютаУчета.Получить())));
	
	Если СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж Тогда
		ТекстСпособРаспределения = "объему продаж";
	ИначеЕсли СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ВыручкаОтПродаж Тогда
		ТекстСпособРаспределения = "выручке от продаж";
	ИначеЕсли СпособРаспределения = Перечисления.БазыРаспределенияРасходов.СебестоимостьПродаж Тогда
		ТекстСпособРаспределения = "себестоимости продаж";
	ИначеЕсли СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ВаловаяПрибыль Тогда
		ТекстСпособРаспределения = "валовой прибыли";
	КонецЕсли;
		
	ОписаниеОшибки = СтрЗаменить(
		ОписаниеОшибки,
		"%СпособРаспределения%",
		ТекстСпособРаспределения);
	
	Если СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж Тогда
		ТекстДополнительноеОписание = "продаж";
	ИначеЕсли СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ВыручкаОтПродаж Тогда
		ТекстДополнительноеОписание = "выручки от продаж";
	ИначеЕсли СпособРаспределения = Перечисления.БазыРаспределенияРасходов.СебестоимостьПродаж Тогда
		ТекстДополнительноеОписание = "себестоимости продаж";
	ИначеЕсли СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ВаловаяПрибыль Тогда
		ТекстДополнительноеОписание = "валовой прибыли";
	КонецЕсли;
	
	ОписаниеОшибки = СтрЗаменить(
		ОписаниеОшибки,
		"%ДополнительноеОписание%",
		ТекстДополнительноеОписание);
	
	Возврат ОписаниеОшибки;
	
КонецФункции // СформироватьОписаниеОшибкиРаспределенияРасходов()

#КонецОбласти

#Область РасчетФактическойСебестоимостиВыпуска

// Функция формирует движения по регистру сведений УзлыКорректировкиСтоимостиСписания.
//
// Параметры:
//  Отказ        - Булево - флаг отказа проведения документа.
//
// Возвращаемое значение:
//  Число - номер записанного узла.
//
Функция СформироватьДвиженияПоРегиструУзлыКорректировкиСтоимостиСписания(Отказ)
	
	Запрос = Новый Запрос();
	
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНач", ДополнительныеСвойства.ДляПроведения.НачальнаяДатаПериода);
	Запрос.УстановитьПараметр("ДатаКон", ДополнительныеСвойства.ДляПроведения.КонечнаяДатаПериод);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ПустойСчет", ДополнительныеСвойства.ДляПроведения.ПустойСчет);
	Запрос.УстановитьПараметр("Организация", ДополнительныеСвойства.ДляПроведения.Организация);
	
	// Получим таблицу новых узлов, каждый узел определяется комбинацией всех
	// измерений учета. В колонку Сумма помещается средняя цена по соответствующему
	// ресурсу регистра УчетЗапасовИЗатрат по внешнему поступлению для каждого узла.
	// Эти колонки являются правыми частями в системе линейных уравнений. В колонки
	// Количество помещается общее количество поступления в каждый узел. Если по
	// данному узлу движений по количеству не было, а были только движения по
	// стоимости, значит вместо количества используется стоимость (узел
	// соответствует не материальным расходам). Если из узла было списание по
	// фиксированной стоимости то уменьшаем количество и стоимость поступления в
	// данный узел на количество и стоимость по фиксированной операции.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетЗатратДляРасчетов.Организация КАК Организация,
	|	УчетЗатратДляРасчетов.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	УчетЗатратДляРасчетов.СчетУчета КАК СчетУчета,
	|	УчетЗатратДляРасчетов.Номенклатура КАК Номенклатура,
	|	УчетЗатратДляРасчетов.Характеристика КАК Характеристика,
	|	УчетЗатратДляРасчетов.Партия КАК Партия,
	|	УчетЗатратДляРасчетов.ЗаказПокупателя КАК ЗаказПокупателя,
	|	УчетЗатратДляРасчетов.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) = 0
	|			ТОГДА СУММА(ВложенныйЗапрос.СуммаДляКоличества)
	|		ИНАЧЕ СУММА(ВложенныйЗапрос.Количество)
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) = 0
	|				И СУММА(ВложенныйЗапрос.СуммаДляКоличества) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ВложенныйЗапрос.Сумма) / ВЫБОР
	|					КОГДА СУММА(ВложенныйЗапрос.Количество) = 0
	|						ТОГДА СУММА(ВложенныйЗапрос.СуммаДляКоличества)
	|					ИНАЧЕ СУММА(ВложенныйЗапрос.Количество)
	|				КОНЕЦ КАК ЧИСЛО(23, 10))
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ ТаблицаУзлыКорректировкиСтоимостиСписания
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		УчетЗатрат.Организация КАК Организация,
	|		УчетЗатрат.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		УчетЗатрат.СчетУчета КАК СчетУчета,
	|		УчетЗатрат.Номенклатура КАК Номенклатура,
	|		УчетЗатрат.Характеристика КАК Характеристика,
	|		УчетЗатрат.Партия КАК Партия,
	|		УчетЗатрат.ЗаказПокупателя КАК ЗаказПокупателя,
	|		УчетЗатрат.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|	ИЗ
	|		РегистрНакопления.Запасы КАК УчетЗатрат
	|	ГДЕ
	|		УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		И УчетЗатрат.Организация = &Организация
	|		И (УчетЗатрат.Количество <> 0
	|				ИЛИ УчетЗатрат.Сумма <> 0)) КАК УчетЗатратДляРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			УчетЗатрат.Организация КАК Организация,
	|			УчетЗатрат.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|			УчетЗатрат.СчетУчета КАК СчетУчета,
	|			УчетЗатрат.Номенклатура КАК Номенклатура,
	|			УчетЗатрат.Характеристика КАК Характеристика,
	|			УчетЗатрат.Партия КАК Партия,
	|			УчетЗатрат.ЗаказПокупателя КАК ЗаказПокупателя,
	|			УчетЗатрат.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|			ВЫБОР
	|				КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА УчетЗатрат.Количество
	|				ИНАЧЕ -УчетЗатрат.Количество
	|			КОНЕЦ КАК Количество,
	|			ВЫБОР
	|				КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА УчетЗатрат.Сумма
	|				ИНАЧЕ -УчетЗатрат.Сумма
	|			КОНЕЦ КАК СуммаДляКоличества,
	|			ВЫБОР
	|				КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						И УчетЗатрат.ФиксированнаяСтоимость
	|					ТОГДА УчетЗатрат.Сумма
	|				КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						И УчетЗатрат.ФиксированнаяСтоимость
	|					ТОГДА -УчетЗатрат.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК Сумма
	|		ИЗ
	|			РегистрНакопления.Запасы КАК УчетЗатрат
	|		ГДЕ
	|			УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	|			И (УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						И НЕ УчетЗатрат.Возврат
	|					ИЛИ УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						И УчетЗатрат.Возврат)
	|			И УчетЗатрат.Организация = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			УчетЗатрат.Организация,
	|			УчетЗатрат.СтруктурнаяЕдиница,
	|			УчетЗатрат.СчетУчета,
	|			УчетЗатрат.Номенклатура,
	|			УчетЗатрат.Характеристика,
	|			УчетЗатрат.Партия,
	|			УчетЗатрат.ЗаказПокупателя,
	|			УчетЗатрат.ЗаказНаПроизводство,
	|			ВЫБОР
	|				КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА УчетЗатрат.Количество
	|				ИНАЧЕ 0 - УчетЗатрат.Количество
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА УчетЗатрат.Сумма
	|				ИНАЧЕ 0 - УчетЗатрат.Сумма
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА УчетЗатрат.Сумма
	|				ИНАЧЕ 0 - УчетЗатрат.Сумма
	|			КОНЕЦ
	|		ИЗ
	|			РегистрНакопления.Запасы КАК УчетЗатрат
	|		ГДЕ
	|			УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	|			И (УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						И НЕ УчетЗатрат.Возврат
	|					ИЛИ УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						И УчетЗатрат.Возврат)
	|			И УчетЗатрат.ФиксированнаяСтоимость
	|			И УчетЗатрат.Организация = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			УчетЗатратОстатки.Организация,
	|			УчетЗатратОстатки.СтруктурнаяЕдиница,
	|			УчетЗатратОстатки.СчетУчета,
	|			УчетЗатратОстатки.Номенклатура,
	|			УчетЗатратОстатки.Характеристика,
	|			УчетЗатратОстатки.Партия,
	|			УчетЗатратОстатки.ЗаказПокупателя,
	|			УчетЗатратОстатки.ЗаказНаПроизводство,
	|			УчетЗатратОстатки.КоличествоОстаток,
	|			УчетЗатратОстатки.СуммаОстаток,
	|			УчетЗатратОстатки.СуммаОстаток
	|		ИЗ
	|			РегистрНакопления.Запасы.Остатки(&ДатаНач, Организация = &Организация) КАК УчетЗатратОстатки) КАК ВложенныйЗапрос
	|		ПО УчетЗатратДляРасчетов.Организация = ВложенныйЗапрос.Организация
	|			И УчетЗатратДляРасчетов.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
	|			И УчетЗатратДляРасчетов.СчетУчета = ВложенныйЗапрос.СчетУчета
	|			И УчетЗатратДляРасчетов.Номенклатура = ВложенныйЗапрос.Номенклатура
	|			И УчетЗатратДляРасчетов.Характеристика = ВложенныйЗапрос.Характеристика
	|			И УчетЗатратДляРасчетов.Партия = ВложенныйЗапрос.Партия
	|			И УчетЗатратДляРасчетов.ЗаказПокупателя = ВложенныйЗапрос.ЗаказПокупателя
	|			И УчетЗатратДляРасчетов.ЗаказНаПроизводство = ВложенныйЗапрос.ЗаказНаПроизводство
	|ГДЕ
	|	УчетЗатратДляРасчетов.Номенклатура.МетодОценки = ЗНАЧЕНИЕ(Перечисление.МетодОценкиЗапасов.FIFO)
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетЗатратДляРасчетов.Организация,
	|	УчетЗатратДляРасчетов.СтруктурнаяЕдиница,
	|	УчетЗатратДляРасчетов.СчетУчета,
	|	УчетЗатратДляРасчетов.Номенклатура,
	|	УчетЗатратДляРасчетов.Характеристика,
	|	УчетЗатратДляРасчетов.Партия,
	|	УчетЗатратДляРасчетов.ЗаказПокупателя,
	|	УчетЗатратДляРасчетов.ЗаказНаПроизводство";
	Запрос.Выполнить();
	
	// Формируем остатки на конец периода, которые будем закрывать по ФИФО.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетЗатратОстатки.Организация КАК Организация,
	|	УчетЗатратОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	УчетЗатратОстатки.СчетУчета КАК СчетУчета,
	|	УчетЗатратОстатки.Номенклатура КАК Номенклатура,
	|	УчетЗатратОстатки.Характеристика КАК Характеристика,
	|	УчетЗатратОстатки.Партия КАК Партия,
	|	УчетЗатратОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	УчетЗатратОстатки.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ВЫБОР
	|		КОГДА УчетЗатратОстатки.КоличествоОстаток > 0
	|			ТОГДА УчетЗатратОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА УчетЗатратОстатки.КоличествоОстаток > 0
	|			ТОГДА УчетЗатратОстатки.КоличествоОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоОстатокНаКонецПериода,
	|	ДОБАВИТЬКДАТЕ(&ДатаКон, СЕКУНДА, 1) КАК Период,
	|	0 КАК СуммаОстаток
	|ПОМЕСТИТЬ ТаблицаОстатковПартий
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И Номенклатура.МетодОценки = ЗНАЧЕНИЕ(Перечисление.МетодОценкиЗапасов.FIFO)) КАК УчетЗатратОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Поле1
	|ПОМЕСТИТЬ ПериодыПартий";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"УНИЧТОЖИТЬ ПериодыПартий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетЗатрат.Организация КАК Организация,
	|	УчетЗатрат.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	УчетЗатрат.СчетУчета КАК СчетУчета,
	|	УчетЗатрат.Номенклатура КАК Номенклатура,
	|	УчетЗатрат.Характеристика КАК Характеристика,
	|	УчетЗатрат.Партия КАК Партия,
	|	УчетЗатрат.ЗаказПокупателя КАК ЗаказПокупателя,
	|	УчетЗатрат.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(УчетЗатрат.Период, ДЕНЬ)) КАК Период
	|ПОМЕСТИТЬ ПериодыПартий
	|ИЗ
	|	РегистрНакопления.Запасы КАК УчетЗатрат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПартий КАК ТаблицаОстатковПартий
	|		ПО (ТаблицаОстатковПартий.Организация = УчетЗатрат.Организация)
	|			И (ТаблицаОстатковПартий.СтруктурнаяЕдиница = УчетЗатрат.СтруктурнаяЕдиница)
	|			И (ТаблицаОстатковПартий.СчетУчета = УчетЗатрат.СчетУчета)
	|			И (ТаблицаОстатковПартий.Номенклатура = УчетЗатрат.Номенклатура)
	|			И (ТаблицаОстатковПартий.Характеристика = УчетЗатрат.Характеристика)
	|			И (ТаблицаОстатковПартий.Партия = УчетЗатрат.Партия)
	|			И (ТаблицаОстатковПартий.ЗаказПокупателя = УчетЗатрат.ЗаказПокупателя)
	|			И (ТаблицаОстатковПартий.ЗаказНаПроизводство = УчетЗатрат.ЗаказНаПроизводство)
	|			И (ТаблицаОстатковПартий.КоличествоОстаток <> 0)
	|ГДЕ
	|	УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И УчетЗатрат.КоррСчетУчета = &ПустойСчет
	|	И (УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И (НЕ УчетЗатрат.Возврат)
	|			ИЛИ УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И УчетЗатрат.Возврат)
	|	И УчетЗатрат.Период < ТаблицаОстатковПартий.Период
	|	И УчетЗатрат.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетЗатрат.Организация,
	|	УчетЗатрат.СтруктурнаяЕдиница,
	|	УчетЗатрат.СчетУчета,
	|	УчетЗатрат.Номенклатура,
	|	УчетЗатрат.Характеристика,
	|	УчетЗатрат.Партия,
	|	УчетЗатрат.ЗаказПокупателя,
	|	УчетЗатрат.ЗаказНаПроизводство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыПартий.Организация КАК Организация,
	|	ПериодыПартий.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПериодыПартий.СчетУчета КАК СчетУчета,
	|	ПериодыПартий.Номенклатура КАК Номенклатура,
	|	ПериодыПартий.Характеристика КАК Характеристика,
	|	ПериодыПартий.Партия КАК Партия,
	|	ПериодыПартий.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ПериодыПартий.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА УчетЗатрат.Количество
	|			ИНАЧЕ -УчетЗатрат.Количество
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА УчетЗатрат.Сумма
	|			ИНАЧЕ -УчетЗатрат.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	ПериодыПартий.Период
	|ПОМЕСТИТЬ ВнешниеПоступленияЗаПериод
	|ИЗ
	|	ПериодыПартий КАК ПериодыПартий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы КАК УчетЗатрат
	|		ПО ПериодыПартий.Организация = УчетЗатрат.Организация
	|			И ПериодыПартий.СтруктурнаяЕдиница = УчетЗатрат.СтруктурнаяЕдиница
	|			И ПериодыПартий.СчетУчета = УчетЗатрат.СчетУчета
	|			И ПериодыПартий.Номенклатура = УчетЗатрат.Номенклатура
	|			И ПериодыПартий.Характеристика = УчетЗатрат.Характеристика
	|			И ПериодыПартий.Партия = УчетЗатрат.Партия
	|			И ПериодыПартий.ЗаказПокупателя = УчетЗатрат.ЗаказПокупателя
	|			И ПериодыПартий.ЗаказНаПроизводство = УчетЗатрат.ЗаказНаПроизводство
	|			И (УчетЗатрат.Период МЕЖДУ ПериодыПартий.Период И КОНЕЦПЕРИОДА(ПериодыПартий.Период, ДЕНЬ))
	|			И (УчетЗатрат.КоррСчетУчета = &ПустойСчет)
	|			И (УчетЗатрат.ФиксированнаяСтоимость)
	|			И (УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					И (НЕ УчетЗатрат.Возврат)
	|				ИЛИ УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И УчетЗатрат.Возврат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыПартий.Организация,
	|	ПериодыПартий.СтруктурнаяЕдиница,
	|	ПериодыПартий.СчетУчета,
	|	ПериодыПартий.Номенклатура,
	|	ПериодыПартий.Характеристика,
	|	ПериодыПартий.Партия,
	|	ПериодыПартий.ЗаказПокупателя,
	|	ПериодыПартий.ЗаказНаПроизводство,
	|	ПериодыПартий.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатковПартий.Организация КАК Организация,
	|	ТаблицаОстатковПартий.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаОстатковПартий.СчетУчета КАК СчетУчета,
	|	ТаблицаОстатковПартий.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатковПартий.Характеристика КАК Характеристика,
	|	ТаблицаОстатковПартий.Партия КАК Партия,
	|	ТаблицаОстатковПартий.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаОстатковПартий.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ВЫБОР
	|		КОГДА ТаблицаОстатковПартий.КоличествоОстаток > ЕСТЬNULL(ВнешниеПоступленияЗаПериод.Количество, 0)
	|			ТОГДА ТаблицаОстатковПартий.КоличествоОстаток - ЕСТЬNULL(ВнешниеПоступленияЗаПериод.Количество, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА ТаблицаОстатковПартий.КоличествоОстаток >= ЕСТЬNULL(ВнешниеПоступленияЗаПериод.Количество, 0)
	|			ТОГДА ТаблицаОстатковПартий.СуммаОстаток + ЕСТЬNULL(ВнешниеПоступленияЗаПериод.Сумма, 0)
	|		ИНАЧЕ ТаблицаОстатковПартий.СуммаОстаток + ВЫРАЗИТЬ(ВнешниеПоступленияЗаПериод.Сумма * ТаблицаОстатковПартий.КоличествоОстаток / ВнешниеПоступленияЗаПериод.Количество КАК ЧИСЛО(23, 10))
	|	КОНЕЦ КАК СуммаОстаток,
	|	ТаблицаОстатковПартий.КоличествоОстатокНаКонецПериода,
	|	ВнешниеПоступленияЗаПериод.Период
	|ПОМЕСТИТЬ ТаблицаТекущихОстатковПартий
	|ИЗ
	|	ТаблицаОстатковПартий КАК ТаблицаОстатковПартий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешниеПоступленияЗаПериод КАК ВнешниеПоступленияЗаПериод
	|		ПО ТаблицаОстатковПартий.Организация = ВнешниеПоступленияЗаПериод.Организация
	|			И ТаблицаОстатковПартий.СтруктурнаяЕдиница = ВнешниеПоступленияЗаПериод.СтруктурнаяЕдиница
	|			И ТаблицаОстатковПартий.СчетУчета = ВнешниеПоступленияЗаПериод.СчетУчета
	|			И ТаблицаОстатковПартий.Номенклатура = ВнешниеПоступленияЗаПериод.Номенклатура
	|			И ТаблицаОстатковПартий.Характеристика = ВнешниеПоступленияЗаПериод.Характеристика
	|			И ТаблицаОстатковПартий.Партия = ВнешниеПоступленияЗаПериод.Партия
	|			И ТаблицаОстатковПартий.ЗаказПокупателя = ВнешниеПоступленияЗаПериод.ЗаказПокупателя
	|			И ТаблицаОстатковПартий.ЗаказНаПроизводство = ВнешниеПоступленияЗаПериод.ЗаказНаПроизводство
	|			И (ТаблицаОстатковПартий.КоличествоОстаток <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОстатковПартий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВнешниеПоступленияЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТекущихОстатковПартий.Организация КАК Организация,
	|	ТаблицаТекущихОстатковПартий.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаТекущихОстатковПартий.СчетУчета КАК СчетУчета,
	|	ТаблицаТекущихОстатковПартий.Номенклатура КАК Номенклатура,
	|	ТаблицаТекущихОстатковПартий.Характеристика КАК Характеристика,
	|	ТаблицаТекущихОстатковПартий.Партия КАК Партия,
	|	ТаблицаТекущихОстатковПартий.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаТекущихОстатковПартий.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ТаблицаТекущихОстатковПартий.КоличествоОстаток КАК КоличествоОстаток,
	|	ТаблицаТекущихОстатковПартий.КоличествоОстатокНаКонецПериода КАК КоличествоОстатокНаКонецПериода,
	|	ТаблицаТекущихОстатковПартий.СуммаОстаток КАК СуммаОстаток,
	|	ТаблицаТекущихОстатковПартий.Период КАК Период
	|ПОМЕСТИТЬ ТаблицаОстатковПартий
	|ИЗ
	|	ТаблицаТекущихОстатковПартий КАК ТаблицаТекущихОстатковПартий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаТекущихОстатковПартий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	ПериодыПартий КАК ПериодыПартий";
	
	// Выполняем поиск партий.
	КоличествоИтераций = 0;
	Результат = Запрос.Выполнить();
	Пока НЕ Результат.Пустой() Цикл
		КоличествоИтераций = КоличествоИтераций + 1;
		Результат = Запрос.Выполнить();
	КонецЦикла;
	
	// Уменьшаем количество и сумму прихода в узлах, на количество и сумму
	// "зафиксированного" конечного остатка.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаУзлыКорректировкиСтоимостиСписания.Организация КАК Организация,
	|	ТаблицаУзлыКорректировкиСтоимостиСписания.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаУзлыКорректировкиСтоимостиСписания.СчетУчета КАК СчетУчета,
	|	ТаблицаУзлыКорректировкиСтоимостиСписания.Номенклатура КАК Номенклатура,
	|	ТаблицаУзлыКорректировкиСтоимостиСписания.Характеристика КАК Характеристика,
	|	ТаблицаУзлыКорректировкиСтоимостиСписания.Партия КАК Партия,
	|	ТаблицаУзлыКорректировкиСтоимостиСписания.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаУзлыКорректировкиСтоимостиСписания.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ТаблицаУзлыКорректировкиСтоимостиСписания.Количество - ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоОстатокНаКонецПериода, 0) + ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоОстаток, 0) КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаУзлыКорректировкиСтоимостиСписания.Количество - ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоОстатокНаКонецПериода, 0) + ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ (ТаблицаУзлыКорректировкиСтоимостиСписания.Сумма * ТаблицаУзлыКорректировкиСтоимостиСписания.Количество - ЕСТЬNULL(ТаблицаОстатковПартий.СуммаОстаток, 0)) / (ТаблицаУзлыКорректировкиСтоимостиСписания.Количество - ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоОстатокНаКонецПериода, 0) + ЕСТЬNULL(ТаблицаОстатковПартий.КоличествоОстаток, 0))
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	ТаблицаУзлыКорректировкиСтоимостиСписания КАК ТаблицаУзлыКорректировкиСтоимостиСписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатковПартий КАК ТаблицаОстатковПартий
	|		ПО ТаблицаУзлыКорректировкиСтоимостиСписания.Организация = ТаблицаОстатковПартий.Организация
	|			И ТаблицаУзлыКорректировкиСтоимостиСписания.СтруктурнаяЕдиница = ТаблицаОстатковПартий.СтруктурнаяЕдиница
	|			И ТаблицаУзлыКорректировкиСтоимостиСписания.СчетУчета = ТаблицаОстатковПартий.СчетУчета
	|			И ТаблицаУзлыКорректировкиСтоимостиСписания.Номенклатура = ТаблицаОстатковПартий.Номенклатура
	|			И ТаблицаУзлыКорректировкиСтоимостиСписания.Характеристика = ТаблицаОстатковПартий.Характеристика
	|			И ТаблицаУзлыКорректировкиСтоимостиСписания.Партия = ТаблицаОстатковПартий.Партия
	|			И ТаблицаУзлыКорректировкиСтоимостиСписания.ЗаказПокупателя = ТаблицаОстатковПартий.ЗаказПокупателя
	|			И ТаблицаУзлыКорректировкиСтоимостиСписания.ЗаказНаПроизводство = ТаблицаОстатковПартий.ЗаказНаПроизводство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетЗатратДляРасчетов.Организация,
	|	УчетЗатратДляРасчетов.СтруктурнаяЕдиница,
	|	УчетЗатратДляРасчетов.СчетУчета,
	|	УчетЗатратДляРасчетов.Номенклатура,
	|	УчетЗатратДляРасчетов.Характеристика,
	|	УчетЗатратДляРасчетов.Партия,
	|	УчетЗатратДляРасчетов.ЗаказПокупателя,
	|	УчетЗатратДляРасчетов.ЗаказНаПроизводство,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) = 0
	|			ТОГДА СУММА(ВложенныйЗапрос.СуммаДляКоличества)
	|		ИНАЧЕ СУММА(ВложенныйЗапрос.Количество)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) = 0
	|				И СУММА(ВложенныйЗапрос.СуммаДляКоличества) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ВложенныйЗапрос.Сумма) / ВЫБОР
	|				КОГДА СУММА(ВложенныйЗапрос.Количество) = 0
	|					ТОГДА СУММА(ВложенныйЗапрос.СуммаДляКоличества)
	|				ИНАЧЕ СУММА(ВложенныйЗапрос.Количество)
	|			КОНЕЦ КАК ЧИСЛО(23, 10))
	|	КОНЕЦ
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		УчетЗатрат.Организация КАК Организация,
	|		УчетЗатрат.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		УчетЗатрат.СчетУчета КАК СчетУчета,
	|		УчетЗатрат.Номенклатура КАК Номенклатура,
	|		УчетЗатрат.Характеристика КАК Характеристика,
	|		УчетЗатрат.Партия КАК Партия,
	|		УчетЗатрат.ЗаказПокупателя КАК ЗаказПокупателя,
	|		УчетЗатрат.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|	ИЗ
	|		РегистрНакопления.Запасы КАК УчетЗатрат
	|	ГДЕ
	|		УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		И УчетЗатрат.Организация = &Организация
	|		И (УчетЗатрат.Количество <> 0
	|				ИЛИ УчетЗатрат.Сумма <> 0)) КАК УчетЗатратДляРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			УчетЗатрат.Организация КАК Организация,
	|			УчетЗатрат.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|			УчетЗатрат.СчетУчета КАК СчетУчета,
	|			УчетЗатрат.Номенклатура КАК Номенклатура,
	|			УчетЗатрат.Характеристика КАК Характеристика,
	|			УчетЗатрат.Партия КАК Партия,
	|			УчетЗатрат.ЗаказПокупателя КАК ЗаказПокупателя,
	|			УчетЗатрат.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|			ВЫБОР
	|				КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА УчетЗатрат.Количество
	|				ИНАЧЕ -УчетЗатрат.Количество
	|			КОНЕЦ КАК Количество,
	|			ВЫБОР
	|				КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА УчетЗатрат.Сумма
	|				ИНАЧЕ -УчетЗатрат.Сумма
	|			КОНЕЦ КАК СуммаДляКоличества,
	|			ВЫБОР
	|				КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						И (УчетЗатрат.ФиксированнаяСтоимость)
	|					ТОГДА УчетЗатрат.Сумма
	|				КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						И (УчетЗатрат.ФиксированнаяСтоимость)
	|					ТОГДА -УчетЗатрат.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК Сумма
	|		ИЗ
	|			РегистрНакопления.Запасы КАК УчетЗатрат
	|		ГДЕ
	|			УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	|			И (УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						И (НЕ УчетЗатрат.Возврат)
	|					ИЛИ УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						И УчетЗатрат.Возврат)
	|			И УчетЗатрат.Организация = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			УчетЗатрат.Организация,
	|			УчетЗатрат.СтруктурнаяЕдиница,
	|			УчетЗатрат.СчетУчета,
	|			УчетЗатрат.Номенклатура,
	|			УчетЗатрат.Характеристика,
	|			УчетЗатрат.Партия,
	|			УчетЗатрат.ЗаказПокупателя,
	|			УчетЗатрат.ЗаказНаПроизводство,
	|			ВЫБОР
	|				КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА УчетЗатрат.Количество
	|				ИНАЧЕ 0 - УчетЗатрат.Количество
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА УчетЗатрат.Сумма
	|				ИНАЧЕ 0 - УчетЗатрат.Сумма
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА УчетЗатрат.Сумма
	|				ИНАЧЕ 0 - УчетЗатрат.Сумма
	|			КОНЕЦ
	|		ИЗ
	|			РегистрНакопления.Запасы КАК УчетЗатрат
	|		ГДЕ
	|			УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	|			И (УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						И (НЕ УчетЗатрат.Возврат)
	|					ИЛИ УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						И УчетЗатрат.Возврат)
	|			И УчетЗатрат.ФиксированнаяСтоимость
	|			И УчетЗатрат.Организация = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			УчетЗатратОстатки.Организация,
	|			УчетЗатратОстатки.СтруктурнаяЕдиница,
	|			УчетЗатратОстатки.СчетУчета,
	|			УчетЗатратОстатки.Номенклатура,
	|			УчетЗатратОстатки.Характеристика,
	|			УчетЗатратОстатки.Партия,
	|			УчетЗатратОстатки.ЗаказПокупателя,
	|			УчетЗатратОстатки.ЗаказНаПроизводство,
	|			УчетЗатратОстатки.КоличествоОстаток,
	|			УчетЗатратОстатки.СуммаОстаток,
	|			УчетЗатратОстатки.СуммаОстаток
	|		ИЗ
	|			РегистрНакопления.Запасы.Остатки(&ДатаНач, Организация = &Организация) КАК УчетЗатратОстатки) КАК ВложенныйЗапрос
	|		ПО УчетЗатратДляРасчетов.Организация = ВложенныйЗапрос.Организация
	|			И УчетЗатратДляРасчетов.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
	|			И УчетЗатратДляРасчетов.СчетУчета = ВложенныйЗапрос.СчетУчета
	|			И УчетЗатратДляРасчетов.Номенклатура = ВложенныйЗапрос.Номенклатура
	|			И УчетЗатратДляРасчетов.Характеристика = ВложенныйЗапрос.Характеристика
	|			И УчетЗатратДляРасчетов.Партия = ВложенныйЗапрос.Партия
	|			И УчетЗатратДляРасчетов.ЗаказПокупателя = ВложенныйЗапрос.ЗаказПокупателя
	|			И УчетЗатратДляРасчетов.ЗаказНаПроизводство = ВложенныйЗапрос.ЗаказНаПроизводство
	|ГДЕ
	|	(УчетЗатратДляРасчетов.Номенклатура.МетодОценки = ЗНАЧЕНИЕ(Перечисление.МетодОценкиЗапасов.ПоСредней)
	|			ИЛИ УчетЗатратДляРасчетов.Номенклатура.МетодОценки = ЗНАЧЕНИЕ(Перечисление.МетодОценкиЗапасов.ПустаяСсылка)
	|			ИЛИ УчетЗатратДляРасчетов.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетЗатратДляРасчетов.Организация,
	|	УчетЗатратДляРасчетов.СтруктурнаяЕдиница,
	|	УчетЗатратДляРасчетов.СчетУчета,
	|	УчетЗатратДляРасчетов.Номенклатура,
	|	УчетЗатратДляРасчетов.Характеристика,
	|	УчетЗатратДляРасчетов.Партия,
	|	УчетЗатратДляРасчетов.ЗаказПокупателя,
	|	УчетЗатратДляРасчетов.ЗаказНаПроизводство";
	
	НомерУзла = 0;
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		НаборЗаписей = РегистрыСведений.УзлыКорректировкиСтоимостиСписания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
		НаборЗаписей.Записать(Истина);
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НомерУзла = НомерУзла + 1;
			НовыйУзел = НаборЗаписей.Добавить();
			НовыйУзел.НомерУзла = НомерУзла;
			НовыйУзел.Регистратор = Ссылка;
			НовыйУзел.Период = Дата;
			ЗаполнитьЗначенияСвойств(НовыйУзел, Выборка);
		КонецЦикла;
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
	// Первое приближение (решение на первой итерации).
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УзлыКорректировкиСтоимостиСписания.НомерУзла,
	|	УзлыКорректировкиСтоимостиСписания.Сумма
	|ПОМЕСТИТЬ ТаблицаРешений
	|ИЗ
	|	РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
	|ГДЕ
	|	УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУзла
	|";
	Запрос.Выполнить();
	
	Возврат НомерУзла;
	
КонецФункции // СформироватьДвиженияПоРегиструУзлыКорректировкиСтоимостиСписания()

// Решает систему линейных уравнений
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//  Булево - флаг нахождения решения.
//
Функция РешитьСЛУ()
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНач", ДополнительныеСвойства.ДляПроведения.НачальнаяДатаПериода);
	Запрос.УстановитьПараметр("ДатаКон", ДополнительныеСвойства.ДляПроведения.КонечнаяДатаПериод);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ПустойСчет", ДополнительныеСвойства.ДляПроведения.ПустойСчет);
	Запрос.УстановитьПараметр("Организация", ДополнительныеСвойства.ДляПроведения.Организация);
	
	ТекущееОтклонение = 1;
	ТребуемаяТочность = 0.00001;
	КоличествоИтераций = 0;
	
	// Подготовим таблицу перемещений и списаний за отчетный период. Возвраты
	// текущего периода отрабатываются как обычные перемещения.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетЗапасовИЗатрат.Организация КАК Организация,
	|	УчетЗапасовИЗатрат.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	УчетЗапасовИЗатрат.СчетУчета КАК СчетУчета,
	|	УчетЗапасовИЗатрат.Номенклатура КАК Номенклатура,
	|	УчетЗапасовИЗатрат.Характеристика КАК Характеристика,
	|	УчетЗапасовИЗатрат.Партия КАК Партия,
	|	УчетЗапасовИЗатрат.ЗаказПокупателя КАК ЗаказПокупателя,
	|	УчетЗапасовИЗатрат.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	УчетЗапасовИЗатрат.ЗаказПродажи КАК ЗаказПродажи,
	|	УчетЗапасовИЗатрат.ДокументПродажи КАК ДокументПродажи,
	|	-СУММА(УчетЗапасовИЗатрат.Количество) КАК Количество,
	|	-СУММА(УчетЗапасовИЗатрат.Сумма) КАК Сумма
	|ПОМЕСТИТЬ УчетЗатратВозвратыТекПериода
	|ИЗ
	|	РегистрНакопления.Запасы КАК УчетЗапасовИЗатрат
	|ГДЕ
	|	УчетЗапасовИЗатрат.Организация = &Организация
	|	И УчетЗапасовИЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И УчетЗапасовИЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И УчетЗапасовИЗатрат.Возврат
	|	И НЕ УчетЗапасовИЗатрат.ФиксированнаяСтоимость
	|	И УчетЗапасовИЗатрат.ДокументПродажи <> НЕОПРЕДЕЛЕНО
	|	И КОНЕЦПЕРИОДА(УчетЗапасовИЗатрат.ДокументПродажи.Дата, МЕСЯЦ) = КОНЕЦПЕРИОДА(УчетЗапасовИЗатрат.Период, МЕСЯЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетЗапасовИЗатрат.Организация,
	|	УчетЗапасовИЗатрат.СтруктурнаяЕдиница,
	|	УчетЗапасовИЗатрат.СчетУчета,
	|	УчетЗапасовИЗатрат.Номенклатура,
	|	УчетЗапасовИЗатрат.Характеристика,
	|	УчетЗапасовИЗатрат.Партия,
	|	УчетЗапасовИЗатрат.ЗаказПокупателя,
	|	УчетЗапасовИЗатрат.ЗаказНаПроизводство,
	|	УчетЗапасовИЗатрат.ЗаказПродажи,
	|	УчетЗапасовИЗатрат.ДокументПродажи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПродажи,
	|	Организация,
	|	СтруктурнаяЕдиница,
	|	СчетУчета,
	|	Номенклатура,
	|	Характеристика,
	|	Партия,
	|	ЗаказПокупателя,
	|	ЗаказНаПроизводство,
	|	ЗаказПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетЗатратВозвратыТекПериода.Организация КАК Организация,
	|	УчетЗатратВозвратыТекПериода.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	УчетЗатратВозвратыТекПериода.СчетУчета КАК СчетУчета,
	|	УчетЗатратВозвратыТекПериода.Номенклатура КАК Номенклатура,
	|	УчетЗатратВозвратыТекПериода.Характеристика КАК Характеристика,
	|	УчетЗатратВозвратыТекПериода.Партия КАК Партия,
	|	УчетЗатратВозвратыТекПериода.ЗаказПокупателя КАК ЗаказПокупателя,
	|	УчетЗатратВозвратыТекПериода.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	УзлыКорректировкиСтоимостиСписания.НомерУзла КАК НомерУзла,
	|	СУММА(ЕСТЬNULL(УчетЗапасовИЗатрат.Количество, 0)) КАК КоличествоПродано,
	|	СУММА(ЕСТЬNULL(УчетЗапасовИЗатрат.Сумма, 0)) КАК СуммаПродано,
	|	УчетЗатратВозвратыТекПериода.Количество КАК КоличествоВозврат,
	|	УчетЗатратВозвратыТекПериода.Сумма КАК СуммаВозврат,
	|	УчетЗатратВозвратыТекПериода.ДокументПродажи КАК ДокументПродажи
	|ПОМЕСТИТЬ УчетЗатратВозвратыПоРезервам
	|ИЗ
	|	УчетЗатратВозвратыТекПериода КАК УчетЗатратВозвратыТекПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы КАК УчетЗапасовИЗатрат
	|		ПО УчетЗатратВозвратыТекПериода.ДокументПродажи = УчетЗапасовИЗатрат.ДокументПродажи
	|			И УчетЗатратВозвратыТекПериода.Организация = УчетЗапасовИЗатрат.Организация
	|			И УчетЗатратВозвратыТекПериода.Номенклатура = УчетЗапасовИЗатрат.Номенклатура
	|			И УчетЗатратВозвратыТекПериода.Характеристика = УчетЗапасовИЗатрат.Характеристика
	|			И УчетЗатратВозвратыТекПериода.Партия = УчетЗапасовИЗатрат.Партия
	|			И УчетЗатратВозвратыТекПериода.ЗаказПродажи = УчетЗапасовИЗатрат.ЗаказПродажи
	|			И УчетЗатратВозвратыТекПериода.ЗаказПродажи = УчетЗапасовИЗатрат.ЗаказПокупателя
	|			И (УчетЗапасовИЗатрат.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	|			И (УчетЗапасовИЗатрат.ЗаказНаПроизводство = ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка))
	|			И (НЕ УчетЗапасовИЗатрат.Возврат)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
	|		ПО (УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор)
	|			И (УчетЗапасовИЗатрат.Организация = УзлыКорректировкиСтоимостиСписания.Организация)
	|			И (УчетЗапасовИЗатрат.СтруктурнаяЕдиница = УзлыКорректировкиСтоимостиСписания.СтруктурнаяЕдиница)
	|			И (УчетЗапасовИЗатрат.СчетУчета = УзлыКорректировкиСтоимостиСписания.СчетУчета)
	|			И (УчетЗапасовИЗатрат.Номенклатура = УзлыКорректировкиСтоимостиСписания.Номенклатура)
	|			И (УчетЗапасовИЗатрат.Характеристика = УзлыКорректировкиСтоимостиСписания.Характеристика)
	|			И (УчетЗапасовИЗатрат.Партия = УзлыКорректировкиСтоимостиСписания.Партия)
	|			И (УчетЗапасовИЗатрат.ЗаказПокупателя = УзлыКорректировкиСтоимостиСписания.ЗаказПокупателя)
	|			И (УчетЗапасовИЗатрат.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	|			И (УчетЗапасовИЗатрат.ЗаказНаПроизводство = ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка))
	|ГДЕ
	|			УчетЗапасовИЗатрат.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			И УчетЗапасовИЗатрат.ЗаказНаПроизводство = ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	УчетЗатратВозвратыТекПериода.Организация,
	|	УчетЗатратВозвратыТекПериода.СтруктурнаяЕдиница,
	|	УчетЗатратВозвратыТекПериода.СчетУчета,
	|	УчетЗатратВозвратыТекПериода.Номенклатура,
	|	УчетЗатратВозвратыТекПериода.Характеристика,
	|	УчетЗатратВозвратыТекПериода.Партия,
	|	УчетЗатратВозвратыТекПериода.ЗаказПокупателя,
	|	УчетЗатратВозвратыТекПериода.ЗаказНаПроизводство,
	|	УзлыКорректировкиСтоимостиСписания.НомерУзла,
	|	УчетЗатратВозвратыТекПериода.Количество,
	|	УчетЗатратВозвратыТекПериода.Сумма,
	|	УчетЗатратВозвратыТекПериода.ДокументПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетЗатратВозвратыТекПериода.Организация КАК Организация,
	|	УчетЗатратВозвратыТекПериода.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	УчетЗатратВозвратыТекПериода.СчетУчета КАК СчетУчета,
	|	УчетЗатратВозвратыТекПериода.Номенклатура КАК Номенклатура,
	|	УчетЗатратВозвратыТекПериода.Характеристика КАК Характеристика,
	|	УчетЗатратВозвратыТекПериода.Партия КАК Партия,
	|	УчетЗатратВозвратыТекПериода.ЗаказПокупателя КАК ЗаказПокупателя,
	|	УчетЗатратВозвратыТекПериода.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	УзлыКорректировкиСтоимостиСписания.НомерУзла КАК НомерУзла,
	|	СУММА(ЕСТЬNULL(УчетЗапасовИЗатрат.Количество, 0)) КАК КоличествоПродано,
	|	СУММА(ЕСТЬNULL(УчетЗапасовИЗатрат.Сумма, 0)) КАК СуммаПродано,
	|	УчетЗатратВозвратыТекПериода.Количество КАК КоличествоВозврат,
	|	УчетЗатратВозвратыТекПериода.Сумма КАК СуммаВозврат,
	|	УчетЗатратВозвратыТекПериода.ДокументПродажи КАК ДокументПродажи
	|ПОМЕСТИТЬ УчетЗатратВозвратыСвободные
	|ИЗ
	|	УчетЗатратВозвратыТекПериода КАК УчетЗатратВозвратыТекПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы КАК УчетЗапасовИЗатрат
	|		ПО УчетЗатратВозвратыТекПериода.ДокументПродажи = УчетЗапасовИЗатрат.ДокументПродажи
	|			И УчетЗатратВозвратыТекПериода.Организация = УчетЗапасовИЗатрат.Организация
	|			И УчетЗатратВозвратыТекПериода.Номенклатура = УчетЗапасовИЗатрат.Номенклатура
	|			И УчетЗатратВозвратыТекПериода.Характеристика = УчетЗапасовИЗатрат.Характеристика
	|			И УчетЗатратВозвратыТекПериода.Партия = УчетЗапасовИЗатрат.Партия
	|			И УчетЗатратВозвратыТекПериода.ЗаказПродажи = УчетЗапасовИЗатрат.ЗаказПродажи
	|			И (УчетЗапасовИЗатрат.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	|			И (УчетЗапасовИЗатрат.ЗаказНаПроизводство = ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка))
	|			И (НЕ УчетЗапасовИЗатрат.Возврат)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
	|		ПО (УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор)
	|			И (УчетЗапасовИЗатрат.Организация = УзлыКорректировкиСтоимостиСписания.Организация)
	|			И (УчетЗапасовИЗатрат.СтруктурнаяЕдиница = УзлыКорректировкиСтоимостиСписания.СтруктурнаяЕдиница)
	|			И (УчетЗапасовИЗатрат.СчетУчета = УзлыКорректировкиСтоимостиСписания.СчетУчета)
	|			И (УчетЗапасовИЗатрат.Номенклатура = УзлыКорректировкиСтоимостиСписания.Номенклатура)
	|			И (УчетЗапасовИЗатрат.Характеристика = УзлыКорректировкиСтоимостиСписания.Характеристика)
	|			И (УчетЗапасовИЗатрат.Партия = УзлыКорректировкиСтоимостиСписания.Партия)
	|			И (УчетЗапасовИЗатрат.ЗаказПокупателя = УзлыКорректировкиСтоимостиСписания.ЗаказПокупателя)
	|			И (УчетЗапасовИЗатрат.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	|			И (УчетЗапасовИЗатрат.ЗаказНаПроизводство = ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка))
	|ГДЕ
	|			УчетЗапасовИЗатрат.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			И УчетЗапасовИЗатрат.ЗаказНаПроизводство = ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетЗатратВозвратыТекПериода.Организация,
	|	УчетЗатратВозвратыТекПериода.СтруктурнаяЕдиница,
	|	УчетЗатратВозвратыТекПериода.СчетУчета,
	|	УчетЗатратВозвратыТекПериода.Номенклатура,
	|	УчетЗатратВозвратыТекПериода.Характеристика,
	|	УчетЗатратВозвратыТекПериода.Партия,
	|	УчетЗатратВозвратыТекПериода.ЗаказПокупателя,
	|	УчетЗатратВозвратыТекПериода.ЗаказНаПроизводство,
	|	УзлыКорректировкиСтоимостиСписания.НомерУзла,
	|	УчетЗатратВозвратыТекПериода.Количество,
	|	УчетЗатратВозвратыТекПериода.Сумма,
	|	УчетЗатратВозвратыТекПериода.ДокументПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетЗатратВозвраты.Организация КАК Организация,
	|	УчетЗатратВозвраты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	УчетЗатратВозвраты.СчетУчета КАК СчетУчета,
	|	УчетЗатратВозвраты.Номенклатура КАК Номенклатура,
	|	УчетЗатратВозвраты.Характеристика КАК Характеристика,
	|	УчетЗатратВозвраты.Партия КАК Партия,
	|	УчетЗатратВозвраты.ЗаказПокупателя КАК ЗаказПокупателя,
	|	УчетЗатратВозвраты.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	УчетЗатратВозвраты.НомерУзла КАК НомерУзла,
	|	УчетЗатратВозвраты.КоличествоПродано КАК КоличествоПродано,
	|	УчетЗатратВозвраты.СуммаПродано КАК СуммаПродано,
	|	УчетЗатратВозвраты.КоличествоВозврат КАК КоличествоВозврат,
	|	УчетЗатратВозвраты.СуммаВозврат КАК СуммаВозврат,
	|	0 КАК КоличествоРаспределено,
	|	0 КАК СуммаРаспределено,
	|	УчетЗатратВозвраты.ДокументПродажи КАК ДокументПродажи
	|ИЗ
	|	(ВЫБРАТЬ
	|		УчетЗатратВозвраты.Организация КАК Организация,
	|		УчетЗатратВозвраты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		УчетЗатратВозвраты.СчетУчета КАК СчетУчета,
	|		УчетЗатратВозвраты.Номенклатура КАК Номенклатура,
	|		УчетЗатратВозвраты.Характеристика КАК Характеристика,
	|		УчетЗатратВозвраты.Партия КАК Партия,
	|		УчетЗатратВозвраты.ЗаказПокупателя КАК ЗаказПокупателя,
	|		УчетЗатратВозвраты.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|		УчетЗатратВозвраты.НомерУзла КАК НомерУзла,
	|		УчетЗатратВозвраты.КоличествоПродано КАК КоличествоПродано,
	|		УчетЗатратВозвраты.СуммаПродано КАК СуммаПродано,
	|		УчетЗатратВозвраты.КоличествоВозврат КАК КоличествоВозврат,
	|		УчетЗатратВозвраты.СуммаВозврат КАК СуммаВозврат,
	|		УчетЗатратВозвраты.ДокументПродажи КАК ДокументПродажи
	|	ИЗ
	|		УчетЗатратВозвратыСвободные КАК УчетЗатратВозвраты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УчетЗатратВозвраты.Организация,
	|		УчетЗатратВозвраты.СтруктурнаяЕдиница,
	|		УчетЗатратВозвраты.СчетУчета,
	|		УчетЗатратВозвраты.Номенклатура,
	|		УчетЗатратВозвраты.Характеристика,
	|		УчетЗатратВозвраты.Партия,
	|		УчетЗатратВозвраты.ЗаказПокупателя,
	|		УчетЗатратВозвраты.ЗаказНаПроизводство,
	|		УчетЗатратВозвраты.НомерУзла,
	|		УчетЗатратВозвраты.КоличествоПродано,
	|		УчетЗатратВозвраты.СуммаПродано,
	|		УчетЗатратВозвраты.КоличествоВозврат,
	|		УчетЗатратВозвраты.СуммаВозврат,
	|		УчетЗатратВозвраты.ДокументПродажи
	|	ИЗ
	|		УчетЗатратВозвратыПоРезервам КАК УчетЗатратВозвраты) КАК УчетЗатратВозвраты
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерУзла
	|ИТОГИ ПО
	|	Организация,
	|	СтруктурнаяЕдиница,
	|	СчетУчета,
	|	Номенклатура,
	|	Характеристика,
	|	Партия,
	|	ДокументПродажи,
	|	СуммаВозврат,
	|	КоличествоВозврат";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаВозвратов = РезультатЗапроса[3].Выгрузить();
	ТаблицаВозвратов.Очистить();
	
	ОбходПоОрганизация = РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоОрганизация.Следующий() Цикл
		ОбходПоСтруктурнаяЕдиница = ОбходПоОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоСтруктурнаяЕдиница.Следующий() Цикл
			ОбходПоСчетУчета = ОбходПоСтруктурнаяЕдиница.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоСчетУчета.Следующий() Цикл
				ОбходПоНоменклатура = ОбходПоСчетУчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ОбходПоНоменклатура.Следующий() Цикл
					ОбходПоХарактеристика = ОбходПоНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ОбходПоХарактеристика.Следующий() Цикл
						ОбходПоПартия = ОбходПоХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ОбходПоПартия.Следующий() Цикл
							ОбходПоДокументПродажи = ОбходПоПартия.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока ОбходПоДокументПродажи.Следующий() Цикл
								ОбходПоСуммаВозврат = ОбходПоДокументПродажи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
								Пока ОбходПоСуммаВозврат.Следующий() Цикл
									ОбходПоКоличествоВозврат = ОбходПоСуммаВозврат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
									Пока ОбходПоКоличествоВозврат.Следующий() Цикл
										КоличествоОсталосьРаспределить = ОбходПоКоличествоВозврат.КоличествоВозврат;
										СуммаОсталосьРаспределить = ОбходПоКоличествоВозврат.СуммаВозврат;
										ВыборкаДетальныеЗаписи = ОбходПоКоличествоВозврат.Выбрать();
										Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
											Если КоличествоОсталосьРаспределить > 0 Тогда
												НоваяСтрока = ТаблицаВозвратов.Добавить();
												ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
												Если КоличествоОсталосьРаспределить <= ВыборкаДетальныеЗаписи.КоличествоПродано Тогда
													НоваяСтрока.КоличествоРаспределено = КоличествоОсталосьРаспределить;
													КоличествоОсталосьРаспределить = 0;
													НоваяСтрока.СуммаРаспределено = СуммаОсталосьРаспределить;
													СуммаОсталосьРаспределить = 0;
												Иначе
													НоваяСтрока.КоличествоРаспределено = ВыборкаДетальныеЗаписи.КоличествоПродано;
													КоличествоОсталосьРаспределить = КоличествоОсталосьРаспределить - ВыборкаДетальныеЗаписи.КоличествоПродано;
													НоваяСтрока.СуммаРаспределено = ВыборкаДетальныеЗаписи.СуммаПродано;
													СуммаОсталосьРаспределить = СуммаОсталосьРаспределить - ВыборкаДетальныеЗаписи.СуммаПродано;
												КонецЕсли;
											КонецЕсли;
										КонецЦикла;
									КонецЦикла;
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаВозвратов", ТаблицаВозвратов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВозвратов.Организация КАК Организация,
	|	ТаблицаВозвратов.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаВозвратов.СчетУчета КАК СчетУчета,
	|	ТаблицаВозвратов.Номенклатура КАК Номенклатура,
	|	ТаблицаВозвратов.Характеристика КАК Характеристика,
	|	ТаблицаВозвратов.Партия КАК Партия,
	|	ТаблицаВозвратов.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаВозвратов.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ТаблицаВозвратов.НомерУзла КАК НомерУзла,
	|	ТаблицаВозвратов.КоличествоРаспределено КАК Количество,
	|	ТаблицаВозвратов.СуммаРаспределено КАК Сумма,
	|	ТаблицаВозвратов.ДокументПродажи КАК ДокументПродажи
	|ПОМЕСТИТЬ УчетЗатратВозвраты
	|ИЗ
	|	&ТаблицаВозвратов КАК ТаблицаВозвратов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетЗапасовИЗатрат.Организация КАК Организация,
	|	УчетЗапасовИЗатрат.КоррСтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	УчетЗапасовИЗатрат.КоррСчетУчета КАК СчетУчета,
	|	УчетЗапасовИЗатрат.КоррНоменклатура КАК Номенклатура,
	|	УчетЗапасовИЗатрат.КоррХарактеристика КАК Характеристика,
	|	УчетЗапасовИЗатрат.КоррПартия КАК Партия,
	|	УчетЗапасовИЗатрат.КоррЗаказПокупателя КАК ЗаказПокупателя,
	|	УчетЗапасовИЗатрат.КоррЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	УзлыКорректировкиСтоимостиСписания.НомерУзла КАК НомерУзла,
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗапасовИЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И НЕ УчетЗапасовИЗатрат.Возврат
	|				ТОГДА УчетЗапасовИЗатрат.Количество
	|			КОГДА УчетЗапасовИЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					И УчетЗапасовИЗатрат.Возврат
	|				ТОГДА -УчетЗапасовИЗатрат.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА УчетЗапасовИЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						И НЕ УчетЗапасовИЗатрат.Возврат
	|					ТОГДА УчетЗапасовИЗатрат.Сумма
	|				КОГДА УчетЗапасовИЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						И УчетЗапасовИЗатрат.Возврат
	|					ТОГДА -УчетЗапасовИЗатрат.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ЧИСЛО(23, 10))) КАК Сумма
	|ПОМЕСТИТЬ УчетЗатратБезУчетаВозвратов
	|ИЗ
	|	РегистрНакопления.Запасы КАК УчетЗапасовИЗатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
	|		ПО (УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор)
	|			И УчетЗапасовИЗатрат.Организация = УзлыКорректировкиСтоимостиСписания.Организация
	|			И УчетЗапасовИЗатрат.СтруктурнаяЕдиница = УзлыКорректировкиСтоимостиСписания.СтруктурнаяЕдиница
	|			И УчетЗапасовИЗатрат.СчетУчета = УзлыКорректировкиСтоимостиСписания.СчетУчета
	|			И УчетЗапасовИЗатрат.Номенклатура = УзлыКорректировкиСтоимостиСписания.Номенклатура
	|			И УчетЗапасовИЗатрат.Характеристика = УзлыКорректировкиСтоимостиСписания.Характеристика
	|			И УчетЗапасовИЗатрат.Партия = УзлыКорректировкиСтоимостиСписания.Партия
	|			И УчетЗапасовИЗатрат.ЗаказПокупателя = УзлыКорректировкиСтоимостиСписания.ЗаказПокупателя
	|			И УчетЗапасовИЗатрат.ЗаказНаПроизводство = УзлыКорректировкиСтоимостиСписания.ЗаказНаПроизводство
	|ГДЕ
	|	УчетЗапасовИЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И УчетЗапасовИЗатрат.Организация = &Организация
	|	И НЕ УчетЗапасовИЗатрат.ФиксированнаяСтоимость
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетЗапасовИЗатрат.Организация,
	|	УчетЗапасовИЗатрат.КоррСтруктурнаяЕдиница,
	|	УчетЗапасовИЗатрат.КоррСчетУчета,
	|	УчетЗапасовИЗатрат.КоррНоменклатура,
	|	УчетЗапасовИЗатрат.КоррХарактеристика,
	|	УчетЗапасовИЗатрат.КоррПартия,
	|	УчетЗапасовИЗатрат.КоррЗаказПокупателя,
	|	УчетЗапасовИЗатрат.КоррЗаказНаПроизводство,
	|	УзлыКорректировкиСтоимостиСписания.НомерУзла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетЗатрат.Организация КАК Организация,
	|	УчетЗатрат.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	УчетЗатрат.СчетУчета КАК СчетУчета,
	|	УчетЗатрат.Номенклатура КАК Номенклатура,
	|	УчетЗатрат.Характеристика КАК Характеристика,
	|	УчетЗатрат.Партия КАК Партия,
	|	УчетЗатрат.ЗаказПокупателя КАК ЗаказПокупателя,
	|	УчетЗатрат.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	УчетЗатрат.НомерУзла КАК НомерУзла,
	|	СУММА(УчетЗатрат.Количество) КАК Количество,
	|	СУММА(УчетЗатрат.Сумма) КАК Сумма
	|ПОМЕСТИТЬ УчетЗатрат
	|ИЗ
	|	(ВЫБРАТЬ
	|		УчетЗатратЗаВычетомВозвратов.Организация КАК Организация,
	|		УчетЗатратЗаВычетомВозвратов.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		УчетЗатратЗаВычетомВозвратов.СчетУчета КАК СчетУчета,
	|		УчетЗатратЗаВычетомВозвратов.Номенклатура КАК Номенклатура,
	|		УчетЗатратЗаВычетомВозвратов.Характеристика КАК Характеристика,
	|		УчетЗатратЗаВычетомВозвратов.Партия КАК Партия,
	|		УчетЗатратЗаВычетомВозвратов.ЗаказПокупателя КАК ЗаказПокупателя,
	|		УчетЗатратЗаВычетомВозвратов.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|		УчетЗатратЗаВычетомВозвратов.НомерУзла КАК НомерУзла,
	|		УчетЗатратЗаВычетомВозвратов.Количество КАК Количество,
	|		УчетЗатратЗаВычетомВозвратов.Сумма КАК Сумма
	|	ИЗ
	|		УчетЗатратБезУчетаВозвратов КАК УчетЗатратЗаВычетомВозвратов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УчетЗатратВозвраты.Организация,
	|		УчетЗатратВозвраты.СтруктурнаяЕдиница,
	|		УчетЗатратВозвраты.СчетУчета,
	|		УчетЗатратВозвраты.Номенклатура,
	|		УчетЗатратВозвраты.Характеристика,
	|		УчетЗатратВозвраты.Партия,
	|		УчетЗатратВозвраты.ЗаказПокупателя,
	|		УчетЗатратВозвраты.ЗаказНаПроизводство,
	|		УчетЗатратВозвраты.НомерУзла,
	|		УчетЗатратВозвраты.Количество,
	|		УчетЗатратВозвраты.Сумма
	|	ИЗ
	|		УчетЗатратВозвраты КАК УчетЗатратВозвраты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УчетЗатратВозвраты.Организация,
	|		НЕОПРЕДЕЛЕНО,
	|		ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка),
	|		УчетЗатратВозвраты.НомерУзла,
	|		-УчетЗатратВозвраты.Количество,
	|		-УчетЗатратВозвраты.Сумма
	|	ИЗ
	|		УчетЗатратВозвраты КАК УчетЗатратВозвраты) КАК УчетЗатрат
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетЗатрат.Организация,
	|	УчетЗатрат.СтруктурнаяЕдиница,
	|	УчетЗатрат.СчетУчета,
	|	УчетЗатрат.Номенклатура,
	|	УчетЗатрат.Характеристика,
	|	УчетЗатрат.Партия,
	|	УчетЗатрат.ЗаказПокупателя,
	|	УчетЗатрат.ЗаказНаПроизводство,
	|	УчетЗатрат.НомерУзла
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СтруктурнаяЕдиница,
	|	СчетУчета,
	|	Номенклатура,
	|	Характеристика,
	|	Партия,
	|	ЗаказПокупателя,
	|	ЗаказНаПроизводство,
	|	НомерУзла";
	
	
	Запрос.ВыполнитьПакет();
	
	// Итерационно ищем решение системы линейных уравнений, пока отклонение не
	// будет меньше требуемого или не будет выполнено 100 итераций расчета.
	Пока (ТекущееОтклонение > ТребуемаяТочность * ТребуемаяТочность) И (КоличествоИтераций < 100) Цикл
		
		КоличествоИтераций = КоличествоИтераций + 1;
		
		// Следующая итерация расчета.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УзлыКорректировкиСтоимостиСписания.НомерУзла КАК НомерУзла,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА УзлыКорректировкиСтоимостиСписания.Количество <> 0
		|					ТОГДА ТаблицаРешений.Сумма * ВЫБОР
		|							КОГДА УчетЗатрат.Количество = 0
		|								ТОГДА УчетЗатрат.Сумма
		|							ИНАЧЕ УчетЗатрат.Количество
		|						КОНЕЦ / УзлыКорректировкиСтоимостиСписания.Количество
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК ЧИСЛО(23, 10))) КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаРешений
		|ИЗ
		|	РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ УчетЗатрат КАК УчетЗатрат
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРешений КАК ТаблицаРешений
		|			ПО УчетЗатрат.НомерУзла = ТаблицаРешений.НомерУзла
		|		ПО УзлыКорректировкиСтоимостиСписания.Организация = УчетЗатрат.Организация
		|			И УзлыКорректировкиСтоимостиСписания.СтруктурнаяЕдиница = УчетЗатрат.СтруктурнаяЕдиница
		|			И УзлыКорректировкиСтоимостиСписания.СчетУчета = УчетЗатрат.СчетУчета
		|			И УзлыКорректировкиСтоимостиСписания.Номенклатура = УчетЗатрат.Номенклатура
		|			И УзлыКорректировкиСтоимостиСписания.Характеристика = УчетЗатрат.Характеристика
		|			И УзлыКорректировкиСтоимостиСписания.Партия = УчетЗатрат.Партия
		|			И УзлыКорректировкиСтоимостиСписания.ЗаказПокупателя = УчетЗатрат.ЗаказПокупателя
		|			И УзлыКорректировкиСтоимостиСписания.ЗаказНаПроизводство = УчетЗатрат.ЗаказНаПроизводство
		|ГДЕ
		|	УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	УзлыКорректировкиСтоимостиСписания.НомерУзла
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерУзла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА((ЕСТЬNULL(ТаблицаРешений.Сумма, 0) - (УзлыКорректировкиСтоимостиСписания.Сумма + ЕСТЬNULL(ВременнаяТаблицаРешений.Сумма, 0))) * (ЕСТЬNULL(ТаблицаРешений.Сумма, 0) - (УзлыКорректировкиСтоимостиСписания.Сумма + ЕСТЬNULL(ВременнаяТаблицаРешений.Сумма, 0)))) КАК СуммаКвадратовОтклонений
		|ИЗ
		|	РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаРешений КАК ВременнаяТаблицаРешений
		|		ПО (ВременнаяТаблицаРешений.НомерУзла = УзлыКорректировкиСтоимостиСписания.НомерУзла)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРешений КАК ТаблицаРешений
		|		ПО (ТаблицаРешений.НомерУзла = УзлыКорректировкиСтоимостиСписания.НомерУзла)
		|ГДЕ
		|	УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор";
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		Результат = МассивРезультатов[1];
		
		СтароеОтклонение = ТекущееОтклонение;
		Если Результат.Пустой() Тогда
			ТекущееОтклонение = 0; // отклонений нет
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			// Определим текущее отклонение от решения.
			ТекущееОтклонение = ?(Выборка.СуммаКвадратовОтклонений = NULL, 0, Выборка.СуммаКвадратовОтклонений);
		КонецЕсли;
		
		Запрос.Текст =
		"УНИЧТОЖИТЬ ТаблицаРешений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УзлыКорректировкиСтоимостиСписания.НомерУзла КАК НомерУзла,
		|	УзлыКорректировкиСтоимостиСписания.Сумма + ЕСТЬNULL(ВременнаяТаблицаРешений.Сумма, 0) КАК Сумма
		|ПОМЕСТИТЬ ТаблицаРешений
		|ИЗ
		|	РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаРешений КАК ВременнаяТаблицаРешений
		|		ПО (ВременнаяТаблицаРешений.НомерУзла = УзлыКорректировкиСтоимостиСписания.НомерУзла)
		|ГДЕ
		|	УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерУзла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВременнаяТаблицаРешений";
		
		Запрос.ВыполнитьПакет();
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции // РешитьСЛУ()

// Формирует движения по регистру учета затрат.
//
// Параметры:
//  НаборЗаписей - Набор записей регистра Запасы
//  НаборЗаписейУправленческий - Набор записей регистра бухгалтерии Управленческий
//  СтрокаДвижения - СтрокаТаблицыЗначений содержащая данные для движения
//                 по регистру
//  Сумма        - Число содержащее сумму движения
//  ФиксированнаяСтоимость - Булево - флаг фиксированной стоимости.
//
Процедура СформироватьДвиженияПоРегиструУчетаЗатрат(НаборЗаписей, НаборЗаписейУправленческий, СтрокаДвижения, Сумма, ФиксированнаяСтоимость, СодержаниеПроводки = Неопределено)
	
	Если СодержаниеПроводки = Неопределено Тогда
		Если СтрокаДвижения.СчетУчетаТипСчета = Перечисления.ТипыСчетов.Запасы Тогда
			СодержаниеПроводки = НСтр("ru = 'Списание запасов со склада'");
		Иначе
			Если ЗначениеЗаполнено(СтрокаДвижения.Номенклатура) Тогда
				СодержаниеПроводки = НСтр("ru = 'Списание расходов'");
			Иначе
				СодержаниеПроводки = НСтр("ru = 'Списание запасов из производства'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Расход по регистру Учет запасов и затрат.
	НоваяСтрока = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
	НоваяСтрока.Период = ?(ЗначениеЗаполнено(НоваяСтрока.Период), НоваяСтрока.Период, Дата); // для возвратов период будет заполнен, это нужно для FIFO
	НоваяСтрока.Регистратор = Ссылка;
	НоваяСтрока.ФиксированнаяСтоимость = ФиксированнаяСтоимость;
	НоваяСтрока.Количество = 0;
	НоваяСтрока.Сумма = Сумма;
	НоваяСтрока.СодержаниеПроводки = СодержаниеПроводки;
	
	Если СтрокаДвижения.КоррСчетУчета = ДополнительныеСвойства.ДляПроведения.ПустойСчет Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДвижения.КоррСчетУчетаТипСчета = Перечисления.ТипыСчетов.Запасы Тогда
		СодержаниеПроводки = НСтр("ru = 'Оприходование запасов на склад'");
	Иначе
		Если ЗначениеЗаполнено(СтрокаДвижения.Номенклатура) Тогда
			СодержаниеПроводки = НСтр("ru = 'Поступление расходов'");
		Иначе
			СодержаниеПроводки = НСтр("ru = 'Оприходование запасов в производство'");
		КонецЕсли;
	КонецЕсли;
		
	// Приход по регистру Учет запасов и затрат.
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Период = Дата;
	НоваяСтрока.Регистратор = Ссылка;
	НоваяСтрока.Организация = СтрокаДвижения.Организация;
	НоваяСтрока.СтруктурнаяЕдиница = СтрокаДвижения.КоррСтруктурнаяЕдиница;
	НоваяСтрока.СчетУчета = СтрокаДвижения.КоррСчетУчета;
	НоваяСтрока.Номенклатура = СтрокаДвижения.КоррНоменклатура;
	НоваяСтрока.Характеристика = СтрокаДвижения.КоррХарактеристика;
	НоваяСтрока.Партия = СтрокаДвижения.КоррПартия;
	НоваяСтрока.ЗаказПокупателя = СтрокаДвижения.КоррЗаказПокупателя;	
	НоваяСтрока.ЗаказНаПроизводство = СтрокаДвижения.КоррЗаказНаПроизводство;	
	НоваяСтрока.Спецификация = СтрокаДвижения.КоррСпецификация;
	НоваяСтрока.КоррСпецификация = СтрокаДвижения.Спецификация;
	НоваяСтрока.КоррСтруктурнаяЕдиница = СтрокаДвижения.СтруктурнаяЕдиница;
	НоваяСтрока.КоррСчетУчета = СтрокаДвижения.СчетУчета;
	НоваяСтрока.КоррНоменклатура = СтрокаДвижения.Номенклатура;
	НоваяСтрока.КоррХарактеристика = СтрокаДвижения.Характеристика;
	НоваяСтрока.КоррПартия = СтрокаДвижения.Партия;
	НоваяСтрока.КоррЗаказПокупателя = СтрокаДвижения.ЗаказПокупателя;
	НоваяСтрока.КоррЗаказНаПроизводство = СтрокаДвижения.ЗаказНаПроизводство;
	НоваяСтрока.ФиксированнаяСтоимость = ФиксированнаяСтоимость;
	НоваяСтрока.Сумма = Сумма;
	НоваяСтрока.СодержаниеПроводки = СодержаниеПроводки;
	
	// Движения по регистру Управленческий.
	НоваяСтрока = НаборЗаписейУправленческий.Добавить();
	НоваяСтрока.Период = Дата;
	НоваяСтрока.Регистратор = Ссылка;
	НоваяСтрока.Организация = СтрокаДвижения.Организация;
	НоваяСтрока.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
	НоваяСтрока.СчетДт = СтрокаДвижения.КоррСчетУчета;
	НоваяСтрока.СчетКт = СтрокаДвижения.СчетУчета;
	НоваяСтрока.Сумма = Сумма; 
	НоваяСтрока.Содержание = СодержаниеПроводки;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструУчетаЗатрат()

// Формирует корректирующие движения по регистру учета затрат.
//
// Параметры:
//  Нет.
//
Процедура СформироватьКорректирующиеДвиженияПоРегиструУчетаЗатрат(ТаблицаОшибок)
	
	ДатаНач = ДополнительныеСвойства.ДляПроведения.НачальнаяДатаПериода;
	ДатаКон = ДополнительныеСвойства.ДляПроведения.КонечнаяДатаПериод;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.СписаниеЗапасов)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ОтчетКомиссионераОСписании)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПересортицаЗапасов)
	|			ТОГДА УчетЗатрат.ДокументПродажи.Корреспонденция
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|				И УчетЗатрат.ДокументПродажи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы)
	|			ТОГДА УчетЗатрат.ДокументПродажи.СчетЗатрат
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА УчетЗатрат.Номенклатура.СчетУчетаЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетУчетаСписания,
	|	ВЫБОР
	|		КОГДА УчетЗатрат.ПеремещениеВРозницуСуммовойУчет
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПриходнаяНакладная)
	|						ТОГДА УчетЗатрат.ДокументПродажи.СтруктурнаяЕдиница
	|					КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|						ТОГДА УчетЗатрат.ДокументПродажи.СтруктурнаяЕдиницаПолучатель
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК РозничнаяСтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.СписаниеЗапасов)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ОтчетКомиссионераОСписании)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПересортицаЗапасов)
	|			ТОГДА УчетЗатрат.ДокументПродажи.Корреспонденция.ТипСчета
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|				И УчетЗатрат.ДокументПродажи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы)
	|			ТОГДА УчетЗатрат.ДокументПродажи.СчетЗатрат.ТипСчета
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА УчетЗатрат.Номенклатура.СчетУчетаЗатрат.ТипСчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетУчетаСписанияТипСчета,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА УчетЗатрат.ДокументПродажи.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НаправлениеДеятельностиСписания,
	|	УчетЗатрат.Организация КАК Организация,
	|	УчетЗатрат.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА УчетЗатрат.ДокументПродажи.СтруктурнаяЕдиницаПолучатель
	|		ИНАЧЕ УчетЗатрат.ДокументПродажи.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиницаПолучатель,
	|	УчетЗатрат.СчетУчета КАК СчетУчета,
	|	УчетЗатрат.Номенклатура КАК Номенклатура,
	|	УчетЗатрат.Характеристика КАК Характеристика,
	|	УчетЗатрат.Партия КАК Партия,
	|	УчетЗатрат.ЗаказПокупателя КАК ЗаказПокупателя,
	|	УчетЗатрат.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	УчетЗатрат.Спецификация КАК Спецификация,
	|	УчетЗатрат.КоррСпецификация КАК КоррСпецификация,
	|	УчетЗатрат.КоррСтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	УчетЗатрат.КоррСчетУчета КАК КоррСчетУчета,
	|	УчетЗатрат.КоррНоменклатура КАК КоррНоменклатура,
	|	УчетЗатрат.КоррХарактеристика КАК КоррХарактеристика,
	|	УчетЗатрат.КоррПартия КАК КоррПартия,
	|	УчетЗатрат.КоррЗаказПокупателя КАК КоррЗаказПокупателя,
	|	УчетЗатрат.КоррЗаказНаПроизводство КАК КоррЗаказНаПроизводство,
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА УчетЗатрат.Количество
	|			ИНАЧЕ -УчетЗатрат.Количество
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА УчетЗатрат.Сумма
	|			ИНАЧЕ -УчетЗатрат.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	УчетЗатрат.Номенклатура.КатегорияНоменклатуры КАК НоменклатураКатегорияНоменклатуры,
	|	УчетЗатрат.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельностиПродажи,
	|	УчетЗатрат.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж КАК НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродаж,
	|	УчетЗатрат.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж.ТипСчета КАК НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродажТипСчета,
	|	УчетЗатрат.ДокументПродажи КАК ДокументПродажи,
	|	УчетЗатрат.ЗаказПродажи КАК ЗаказПродажи,
	|	УчетЗатрат.ЗаказПродажи.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	УчетЗатрат.Подразделение КАК Подразделение,
	|	УчетЗатрат.Ответственный КАК Ответственный,
	|	УчетЗатрат.СтавкаНДС КАК СтавкаНДС,
	|	УчетЗатрат.ЗатратыНаВыпуск КАК ЗатратыНаВыпуск,
	|	УчетЗатрат.ПеремещениеВРозницуСуммовойУчет КАК ПеремещениеВРозницуСуммовойУчет
	|ПОМЕСТИТЬ УчетЗатратСписания
	|ИЗ
	|	РегистрНакопления.Запасы КАК УчетЗатрат
	|ГДЕ
	|	УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И (УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И НЕ УчетЗатрат.Возврат
	|			ИЛИ УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И УчетЗатрат.Возврат)
	|	И УчетЗатрат.Организация = &Организация
	|	И НЕ УчетЗатрат.ФиксированнаяСтоимость
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА УчетЗатрат.ПеремещениеВРозницуСуммовойУчет
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПриходнаяНакладная)
	|						ТОГДА УчетЗатрат.ДокументПродажи.СтруктурнаяЕдиница
	|					КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|						ТОГДА УчетЗатрат.ДокументПродажи.СтруктурнаяЕдиницаПолучатель
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА УчетЗатрат.ДокументПродажи.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	УчетЗатрат.Организация,
	|	УчетЗатрат.СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА УчетЗатрат.ДокументПродажи.СтруктурнаяЕдиницаПолучатель
	|		ИНАЧЕ УчетЗатрат.ДокументПродажи.СтруктурнаяЕдиница
	|	КОНЕЦ,
	|	УчетЗатрат.СчетУчета,
	|	УчетЗатрат.Номенклатура,
	|	УчетЗатрат.Характеристика,
	|	УчетЗатрат.Партия,
	|	УчетЗатрат.ЗаказПокупателя,
	|	УчетЗатрат.ЗаказНаПроизводство,
	|	УчетЗатрат.Спецификация,
	|	УчетЗатрат.КоррСпецификация,
	|	УчетЗатрат.КоррСтруктурнаяЕдиница,
	|	УчетЗатрат.КоррСчетУчета,
	|	УчетЗатрат.КоррНоменклатура,
	|	УчетЗатрат.КоррХарактеристика,
	|	УчетЗатрат.КоррПартия,
	|	УчетЗатрат.КоррЗаказПокупателя,
	|	УчетЗатрат.КоррЗаказНаПроизводство,
	|	УчетЗатрат.Номенклатура.КатегорияНоменклатуры,
	|	УчетЗатрат.Номенклатура.НаправлениеДеятельности,
	|	УчетЗатрат.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж,
	|	УчетЗатрат.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж.ТипСчета,
	|	УчетЗатрат.ДокументПродажи,
	|	УчетЗатрат.ЗаказПродажи,
	|	УчетЗатрат.Подразделение,
	|	УчетЗатрат.Ответственный,
	|	УчетЗатрат.СтавкаНДС,
	|	УчетЗатрат.ЗатратыНаВыпуск,
	|	УчетЗатрат.ПеремещениеВРозницуСуммовойУчет,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.СписаниеЗапасов)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ОтчетКомиссионераОСписании)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПересортицаЗапасов)
	|			ТОГДА УчетЗатрат.ДокументПродажи.Корреспонденция
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|				И УчетЗатрат.ДокументПродажи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы)
	|			ТОГДА УчетЗатрат.ДокументПродажи.СчетЗатрат
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА УчетЗатрат.Номенклатура.СчетУчетаЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.СписаниеЗапасов)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ОтчетКомиссионераОСписании)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПересортицаЗапасов)
	|			ТОГДА УчетЗатрат.ДокументПродажи.Корреспонденция.ТипСчета
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|				И УчетЗатрат.ДокументПродажи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы)
	|			ТОГДА УчетЗатрат.ДокументПродажи.СчетЗатрат.ТипСчета
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА УчетЗатрат.Номенклатура.СчетУчетаЗатрат.ТипСчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СтруктурнаяЕдиница,
	|	СчетУчета,
	|	Номенклатура,
	|	Характеристика,
	|	Партия,
	|	ЗаказПокупателя,
	|	ЗаказНаПроизводство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УзлыКорректировкиСтоимостиСписания.Организация КАК Организация,
	|	УзлыКорректировкиСтоимостиСписания.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	УчетЗатрат.СтруктурнаяЕдиницаПолучатель КАК СтруктурнаяЕдиницаПолучатель,
	|	УзлыКорректировкиСтоимостиСписания.СчетУчета КАК СчетУчета,
	|	УзлыКорректировкиСтоимостиСписания.СчетУчета.ТипСчета КАК СчетУчетаТипСчета,
	|	УзлыКорректировкиСтоимостиСписания.Номенклатура КАК Номенклатура,
	|	УзлыКорректировкиСтоимостиСписания.Характеристика КАК Характеристика,
	|	УзлыКорректировкиСтоимостиСписания.Партия КАК Партия,
	|	УзлыКорректировкиСтоимостиСписания.ЗаказПокупателя КАК ЗаказПокупателя,
	|	УзлыКорректировкиСтоимостиСписания.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	УзлыКорректировкиСтоимостиСписания.НомерУзла КАК НомерУзла,
	|	УчетЗатрат.Спецификация КАК Спецификация,
	|	УчетЗатрат.КоррСпецификация КАК КоррСпецификация,
	|	УчетЗатрат.СчетУчетаСписания КАК СчетУчетаСписания,
	|	УчетЗатрат.СчетУчетаСписанияТипСчета КАК СчетУчетаСписанияТипСчета,
	|	УчетЗатрат.КоррСтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	УчетЗатрат.КоррСчетУчета КАК КоррСчетУчета,
	|	УчетЗатрат.КоррСчетУчета.ТипСчета КАК КоррСчетУчетаТипСчета,
	|	УчетЗатрат.КоррНоменклатура КАК КоррНоменклатура,
	|	УчетЗатрат.КоррХарактеристика КАК КоррХарактеристика,
	|	УчетЗатрат.КоррПартия КАК КоррПартия,
	|	УчетЗатрат.КоррЗаказПокупателя КАК КоррЗаказПокупателя,
	|	УчетЗатрат.КоррЗаказНаПроизводство КАК КоррЗаказНаПроизводство,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УчетЗатрат.Количество, 0) = 0
	|			ТОГДА ЕСТЬNULL(УчетЗатрат.Сумма, 0)
	|		ИНАЧЕ ЕСТЬNULL(УчетЗатрат.Количество, 0)
	|	КОНЕЦ КАК Количество,
	|	ЕСТЬNULL(УчетЗатрат.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(ТаблицаРешений.Сумма, 0) КАК Цена,
	|	УчетЗатрат.НоменклатураКатегорияНоменклатуры КАК НоменклатураКатегорияНоменклатуры,
	|	УчетЗатрат.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельностиПродажи,
	|	УчетЗатрат.НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродаж КАК НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродаж,
	|	УчетЗатрат.НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродажТипСчета КАК НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродажТипСчета,
	|	УчетЗатрат.ДокументПродажи КАК ДокументПродажи,
	|	УчетЗатрат.ЗаказПродажи КАК ЗаказПродажи,
	|	УчетЗатрат.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	УчетЗатрат.Подразделение КАК Подразделение,
	|	УчетЗатрат.Ответственный КАК Ответственный,
	|	УчетЗатрат.СтавкаНДС КАК СтавкаНДС,
	|	УчетЗатрат.ЗатратыНаВыпуск КАК ЗатратыНаВыпуск,
	|	УчетЗатрат.НаправлениеДеятельностиСписания КАК НаправлениеДеятельностиСписания,
	|	УчетЗатрат.ПеремещениеВРозницуСуммовойУчет КАК ПеремещениеВРозницуСуммовойУчет,
	|	УчетЗатрат.РозничнаяСтруктурнаяЕдиница КАК РозничнаяСтруктурнаяЕдиница
	|ИЗ
	|	РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ УчетЗатратСписания КАК УчетЗатрат
	|		ПО УзлыКорректировкиСтоимостиСписания.Организация = УчетЗатрат.Организация
	|			И УзлыКорректировкиСтоимостиСписания.СтруктурнаяЕдиница = УчетЗатрат.СтруктурнаяЕдиница
	|			И УзлыКорректировкиСтоимостиСписания.СчетУчета = УчетЗатрат.СчетУчета
	|			И УзлыКорректировкиСтоимостиСписания.Номенклатура = УчетЗатрат.Номенклатура
	|			И УзлыКорректировкиСтоимостиСписания.Характеристика = УчетЗатрат.Характеристика
	|			И УзлыКорректировкиСтоимостиСписания.Партия = УчетЗатрат.Партия
	|			И УзлыКорректировкиСтоимостиСписания.ЗаказПокупателя = УчетЗатрат.ЗаказПокупателя
	|			И УзлыКорректировкиСтоимостиСписания.ЗаказНаПроизводство = УчетЗатрат.ЗаказНаПроизводство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРешений КАК ТаблицаРешений
	|		ПО (ТаблицаРешений.НомерУзла = УзлыКорректировкиСтоимостиСписания.НомерУзла)
	|ГДЕ
	|	УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерУзла УБЫВ";
	
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Организация", ДополнительныеСвойства.ДляПроведения.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Создадим набор записей регистра накопления Учет запасов и затрат.
	НаборЗаписейЗапасы = РегистрыНакопления.Запасы.СоздатьНаборЗаписей();
	НаборЗаписейЗапасы.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления Продажи.
	НаборЗаписейПродажи = РегистрыНакопления.Продажи.СоздатьНаборЗаписей();
	НаборЗаписейПродажи.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления УчетДоходовИРасходов.
	НаборЗаписейДоходыИРасходы = РегистрыНакопления.ДоходыИРасходы.СоздатьНаборЗаписей();
	НаборЗаписейДоходыИРасходы.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления СуммовойУчетВРознице.
	НаборЗаписейСуммовойУчетВРознице = РегистрыНакопления.СуммовойУчетВРознице.СоздатьНаборЗаписей();
	НаборЗаписейСуммовойУчетВРознице.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления Управленческий.
	НаборЗаписейУправленческий = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();
	НаборЗаписейУправленческий.Отбор.Регистратор.Установить(Ссылка);
	
	ВыборкаДетальныеЗаписи = Результат[1].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		// Сделаем проверку, на случай, если есть не закрытые кассовые смены.
		Если ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.ЧекККМ")
			ИЛИ ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
			Продолжить;
		КонецЕсли;
		
		// Посчитаем суммы перемещения и корректировки.
		СуммаПеремещения = ВыборкаДетальныеЗаписи.Цена * ВыборкаДетальныеЗаписи.Количество;
		СуммаКорректировки = СуммаПеремещения - ВыборкаДетальныеЗаписи.Сумма;
		
		Если Окр(СуммаКорректировки, 2) <> 0 Тогда
			
			// Движения по регистру Учет запасов и затрат.
			СформироватьДвиженияПоРегиструУчетаЗатрат(
				НаборЗаписейЗапасы,
				НаборЗаписейУправленческий,
				ВыборкаДетальныеЗаписи,
				СуммаКорректировки,
				Ложь);
			
			Если ВыборкаДетальныеЗаписи.КоррСчетУчета = ДополнительныеСвойства.ДляПроведения.ПустойСчет Тогда
				
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДокументПродажи)
				   И ((ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.РасходнаяНакладная")
					 И ВыборкаДетальныеЗаписи.ДокументПродажи.ВидОперации <> Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
				  ИЛИ ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
				  ИЛИ ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.АктВыполненныхРабот")
				  ИЛИ ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.ОтчетКомиссионера")
				  ИЛИ ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.ЗаказПокупателя")
				  ИЛИ ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.ОтчетОПереработке")
				  ИЛИ ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")) Тогда
					
					// Движения по регистру Продажи.
					НоваяСтрока = НаборЗаписейПродажи.Добавить();
					НоваяСтрока.Период = Дата;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.ЗаказПокупателя = ВыборкаДетальныеЗаписи.ЗаказПродажи;
					НоваяСтрока.Подразделение = ВыборкаДетальныеЗаписи.Подразделение;
					НоваяСтрока.Ответственный = ВыборкаДетальныеЗаписи.Ответственный;
					НоваяСтрока.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
					НоваяСтрока.Характеристика = ВыборкаДетальныеЗаписи.Характеристика;
					НоваяСтрока.Партия = ВыборкаДетальныеЗаписи.Партия;
					НоваяСтрока.Документ = ВыборкаДетальныеЗаписи.ДокументПродажи;
					НоваяСтрока.СтавкаНДС = ВыборкаДетальныеЗаписи.СтавкаНДС;
					НоваяСтрока.Себестоимость = СуммаКорректировки;
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаказПродажи) 
						И ВыборкаДетальныеЗаписи.УчетПотребностиПоСкладам Тогда
						НоваяСтрока.Склад = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;	
					КонецЕсли;
					
					// Движения по регистру ДоходыИРасходы.
					НоваяСтрока = НаборЗаписейДоходыИРасходы.Добавить();
					НоваяСтрока.Период = Дата;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.Подразделение;
					НоваяСтрока.ЗаказПокупателя = ВыборкаДетальныеЗаписи.ЗаказПродажи;
					НоваяСтрока.НаправлениеДеятельности = ВыборкаДетальныеЗаписи.НаправлениеДеятельностиПродажи;
					НоваяСтрока.СчетУчета = ВыборкаДетальныеЗаписи.НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродаж;
					НоваяСтрока.СуммаРасходов = СуммаКорректировки;
					НоваяСтрока.СодержаниеПроводки = НСтр("ru = 'Отражение расходов'");
					
					// Движения по регистру Управленческий.
					НоваяСтрока = НаборЗаписейУправленческий.Добавить();
					НоваяСтрока.Период = Дата;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
					НоваяСтрока.СчетДт = ВыборкаДетальныеЗаписи.НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродаж;
					НоваяСтрока.СчетКт = ВыборкаДетальныеЗаписи.СчетУчета;
					НоваяСтрока.Содержание = НСтр("ru = 'Отражение расходов'");
					НоваяСтрока.Сумма = СуммаКорректировки;
					
				ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДокументПродажи)
						И ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.РасходнаяНакладная")
						И ВыборкаДетальныеЗаписи.ДокументПродажи.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику Тогда
						
					// Движения по регистру Доходы и расходы.
					НоваяСтрока = НаборЗаписейДоходыИРасходы.Добавить();
					НоваяСтрока.Период = ДополнительныеСвойства.ДляПроведения.Дата;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.СтруктурнаяЕдиница = Неопределено;
					НоваяСтрока.ЗаказПокупателя = Неопределено;
					НоваяСтрока.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Прочее;
					
					Если СуммаКорректировки < 0 Тогда
						НоваяСтрока.СчетУчета = ПланыСчетов.Управленческий.ПрочиеРасходы;
						НоваяСтрока.СуммаРасходов = СуммаКорректировки;
						НоваяСтрока.СодержаниеПроводки = НСтр("ru = 'Прочие расходы'");
					Иначе
						НоваяСтрока.СчетУчета = ПланыСчетов.Управленческий.ПрочиеДоходы;
						НоваяСтрока.СуммаДоходов = СуммаКорректировки;
						НоваяСтрока.СодержаниеПроводки = НСтр("ru = 'Прочие доходы'");
					КонецЕсли;
					НоваяСтрока.Аналитика = ВыборкаДетальныеЗаписи.Номенклатура;
					
					// Движения по регистру Управленческий.
					НоваяСтрока = НаборЗаписейУправленческий.Добавить();
					НоваяСтрока.Период = Дата;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
					
					Если СуммаКорректировки < 0 Тогда
						НоваяСтрока.СчетДт = ПланыСчетов.Управленческий.ПрочиеРасходы;
						НоваяСтрока.СчетКт = ВыборкаДетальныеЗаписи.СчетУчета;
						НоваяСтрока.Сумма = - СуммаКорректировки;
						НоваяСтрока.Содержание = НСтр("ru = 'Прочие расходы'");
					Иначе
						НоваяСтрока.СчетДт = ВыборкаДетальныеЗаписи.СчетУчета;
						НоваяСтрока.СчетКт = ПланыСчетов.Управленческий.ПрочиеДоходы;
						НоваяСтрока.Сумма = СуммаКорректировки;
						НоваяСтрока.Содержание = НСтр("ru = 'Прочие доходы'");
					КонецЕсли;
					
				ИначеЕсли ВыборкаДетальныеЗаписи.ПеремещениеВРозницуСуммовойУчет Тогда
					
					// Движения по регистру СуммовойУчетВРознице.
					НоваяСтрока = НаборЗаписейСуммовойУчетВРознице.Добавить();
					НоваяСтрока.Период = Дата;
					НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.РозничнаяСтруктурнаяЕдиница;
					НоваяСтрока.Валюта = ВыборкаДетальныеЗаписи.РозничнаяСтруктурнаяЕдиница.РозничныйВидЦен.ВалютаЦены;
					НоваяСтрока.СодержаниеПроводки = НСтр("ru = 'Перемещение в розницу'");
					НоваяСтрока.Себестоимость = СуммаКорректировки;
					
					// Движения по регистру Управленческий.
					НоваяСтрока = НаборЗаписейУправленческий.Добавить();
					НоваяСтрока.Период = Дата;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
					НоваяСтрока.СчетДт = ВыборкаДетальныеЗаписи.РозничнаяСтруктурнаяЕдиница.СчетУчетаВРознице;
					НоваяСтрока.СчетКт = ВыборкаДетальныеЗаписи.СчетУчета;
					НоваяСтрока.Содержание = НСтр("ru = 'Перемещение в розницу'");
					НоваяСтрока.Сумма = СуммаКорректировки; 
					
				ИначеЕсли ВыборкаДетальныеЗаписи.СчетУчетаСписанияТипСчета = Перечисления.ТипыСчетов.ПрочиеРасходы
					  ИЛИ ВыборкаДетальныеЗаписи.СчетУчетаСписанияТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
					
					// Движения по регистру Доходы и расходы.
					НоваяСтрока = НаборЗаписейДоходыИРасходы.Добавить();
					НоваяСтрока.Период = ДополнительныеСвойства.ДляПроведения.Дата;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиницаПолучатель;
					
					Если ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.ПеремещениеЗапасов")
					   И ВыборкаДетальныеЗаписи.СчетУчетаСписанияТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
						НоваяСтрока.НаправлениеДеятельности = ВыборкаДетальныеЗаписи.НаправлениеДеятельностиСписания;
						НоваяСтрока.ЗаказПокупателя = ВыборкаДетальныеЗаписи.ЗаказПокупателя;
					Иначе
						НоваяСтрока.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Прочее;
					КонецЕсли;
					
					НоваяСтрока.СчетУчета = ВыборкаДетальныеЗаписи.СчетУчетаСписания;
					НоваяСтрока.Аналитика = ВыборкаДетальныеЗаписи.Номенклатура;
					НоваяСтрока.СуммаРасходов = СуммаКорректировки;
					НоваяСтрока.СодержаниеПроводки = НСтр("ru = 'Прочие расходы'");
					
					// Движения по регистру Управленческий.
					НоваяСтрока = НаборЗаписейУправленческий.Добавить();
					НоваяСтрока.Период = Дата;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
					НоваяСтрока.СчетДт = ВыборкаДетальныеЗаписи.СчетУчетаСписания;
					НоваяСтрока.СчетКт = ВыборкаДетальныеЗаписи.СчетУчета;
					НоваяСтрока.Содержание = НСтр("ru = 'Прочие расходы'");
					НоваяСтрока.Сумма = СуммаКорректировки;
					
				Иначе
					
					Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СчетУчетаСписания) 
						ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СчетУчета) Тогда
						
						// Некорректная проводка
						ПараметрыНоменклатуры = Новый Структура;
						ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", ВыборкаДетальныеЗаписи.Номенклатура);
						ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", ВыборкаДетальныеЗаписи.Характеристика);
						ПараметрыНоменклатуры.Вставить("ПредставлениеПартии", ВыборкаДетальныеЗаписи.Партия);
						ПредставлениеНоменклатуры = ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры);
						Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СчетУчетаСписания) Тогда
							ПредставлениеСчета = НСтр("ru = 'счет затрат (списания)'");
						Иначе
							ПредставлениеСчета = НСтр("ru = 'счет учета запасов'");
						КонецЕсли; 
						ШаблонОшибки = НСтр("ru = 'В движениях номенклатуры %1 не заполнен %2, движение не выполнено. Требуется проверка корректности заполнения счетов в карточке номенклатуры и корреспондирующих счетов при непосредственном списании и/или оприходовании запаса'");
						ОписаниеОшибки = СтрШаблон(ШаблонОшибки, ПредставлениеНоменклатуры, ПредставлениеСчета);
						Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДокументПродажи) Тогда
							ШаблонОшибки = НСтр("ru = '%1. Документ: %2'");
							ОписаниеОшибки = СтрШаблон(ШаблонОшибки, ОписаниеОшибки, ВыборкаДетальныеЗаписи.ДокументПродажи);
						КонецЕсли; 
						ДобавитьОшибкуВТаблицу(ОписаниеОшибки, "РаспределениеЗатрат", ТаблицаОшибок);
						
					Иначе
						
						// Движения по регистру Управленческий.
						НоваяСтрока = НаборЗаписейУправленческий.Добавить();
						НоваяСтрока.Период = Дата;
						НоваяСтрока.Регистратор = Ссылка;
						НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
						НоваяСтрока.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
						НоваяСтрока.СчетДт = ВыборкаДетальныеЗаписи.СчетУчетаСписания;
						НоваяСтрока.СчетКт = ВыборкаДетальныеЗаписи.СчетУчета;
						НоваяСтрока.Содержание = НСтр("ru = 'Списание запасов на произвольный счет'");
						НоваяСтрока.Сумма = СуммаКорректировки;
						
					КонецЕсли; 
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Пишем оставшиеся записи Учет запасов и затрат.
	НаборЗаписейЗапасы.Записать(Ложь);
	
	// Пишем оставшиеся записи Продажи.
	НаборЗаписейПродажи.Записать(Ложь);
	
	// Пишем оставшиеся записи Учет доходов и расходов.
	НаборЗаписейДоходыИРасходы.Записать(Ложь);
	
	// Пишем оставшиеся записи Суммовой учет в рознице.
	НаборЗаписейСуммовойУчетВРознице.Записать(Ложь);
	
	// Пишем оставшиеся записи Управленческий.
	НаборЗаписейУправленческий.Записать(Ложь);
	
КонецПроцедуры // СформироватьКорректирующиеДвиженияПоРегиструУчетаЗатрат()

// Процедура распределения зависших сумм без количества (ошибки округления при решении СЛУ).
//
//
Процедура РаспределитьСуммыБезКоличества(ВидОперации, ТаблицаОшибок)
	
	СписокОбработанныхУзлов = Новый Массив();
	СписокОбработанныхУзлов.Добавить("");
	
	ДатаНач = ДополнительныеСвойства.ДляПроведения.НачальнаяДатаПериода;
	ДатаКон = ДополнительныеСвойства.ДляПроведения.КонечнаяДатаПериод;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", ДополнительныеСвойства.ДляПроведения.Организация);
	
	// Готовится таблица перемещений.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетЗатрат.Организация КАК Организация,
	|	УчетЗатрат.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	УчетЗатрат.СчетУчета КАК СчетУчета,
	|	УчетЗатрат.СчетУчета.ТипСчета КАК СчетУчетаТипСчета,
	|	УчетЗатрат.Номенклатура КАК Номенклатура,
	|	УчетЗатрат.Характеристика КАК Характеристика,
	|	УчетЗатрат.Партия КАК Партия,
	|	УчетЗатрат.ЗаказПокупателя КАК ЗаказПокупателя,
	|	УчетЗатрат.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	УчетЗатрат.КоррСтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	УчетЗатрат.КоррСчетУчета КАК КоррСчетУчета,
	|	УчетЗатрат.КоррСчетУчета.ТипСчета КАК КоррСчетУчетаТипСчета,
	|	УчетЗатрат.КоррНоменклатура КАК КоррНоменклатура,
	|	УчетЗатрат.КоррХарактеристика КАК КоррХарактеристика,
	|	УчетЗатрат.КоррПартия КАК КоррПартия,
	|	УчетЗатрат.КоррЗаказПокупателя КАК КоррЗаказПокупателя,
	|	УчетЗатрат.КоррЗаказНаПроизводство КАК КоррЗаказНаПроизводство,
	|	УчетЗатрат.ДокументПродажи КАК ДокументПродажи,
	|	УчетЗатрат.ЗаказПродажи КАК ЗаказПродажи,
	|	УчетЗатрат.ЗаказПродажи.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	УчетЗатрат.Подразделение КАК Подразделение,
	|	УчетЗатрат.Ответственный КАК Ответственный,
	|	УчетЗатрат.СтавкаНДС КАК СтавкаНДС,
	|	УчетЗатрат.ЗатратыНаВыпуск КАК ЗатратыНаВыпуск,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.СписаниеЗапасов)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ОтчетКомиссионераОСписании)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПересортицаЗапасов)
	|			ТОГДА УчетЗатрат.ДокументПродажи.Корреспонденция
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|				И УчетЗатрат.ДокументПродажи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы)
	|			ТОГДА УчетЗатрат.ДокументПродажи.СчетЗатрат
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА УчетЗатрат.Номенклатура.СчетУчетаЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетУчетаСписания,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.СписаниеЗапасов)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ОтчетКомиссионераОСписании)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПересортицаЗапасов)
	|			ТОГДА УчетЗатрат.ДокументПродажи.Корреспонденция.ТипСчета
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|				И УчетЗатрат.ДокументПродажи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы)
	|			ТОГДА УчетЗатрат.ДокументПродажи.СчетЗатрат.ТипСчета
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА УчетЗатрат.Номенклатура.СчетУчетаЗатрат.ТипСчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетУчетаСписанияТипСчета,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА УчетЗатрат.ДокументПродажи.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НаправлениеДеятельностиСписания,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА УчетЗатрат.ДокументПродажи.СтруктурнаяЕдиницаПолучатель
	|		ИНАЧЕ УчетЗатрат.ДокументПродажи.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиницаПолучатель,
	|	ВЫБОР
	|		КОГДА УчетЗатрат.ПеремещениеВРозницуСуммовойУчет
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПриходнаяНакладная)
	|						ТОГДА УчетЗатрат.ДокументПродажи.СтруктурнаяЕдиница
	|					КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|						ТОГДА УчетЗатрат.ДокументПродажи.СтруктурнаяЕдиницаПолучатель
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК РозничнаяСтруктурнаяЕдиница,
	|	УчетЗатрат.ПеремещениеВРозницуСуммовойУчет КАК ПеремещениеВРозницуСуммовойУчет,
	|	УчетЗатрат.Номенклатура.КатегорияНоменклатуры КАК НоменклатураКатегорияНоменклатуры,
	|	УчетЗатрат.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельностиПродажи,
	|	УчетЗатрат.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж КАК НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродаж,
	|	УчетЗатрат.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж.ТипСчета КАК НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродажТипСчета,
	|	СУММА(ВЫБОР
	|			КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						И НЕ УчетЗатрат.Возврат
	|					ИЛИ УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						И УчетЗатрат.Возврат
	|				ТОГДА УчетЗатрат.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма
	|ПОМЕСТИТЬ УчетЗатратДвиженияРасход
	|ИЗ
	|	РегистрНакопления.Запасы КАК УчетЗатрат
	|ГДЕ
	|	УчетЗатрат.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И УчетЗатрат.Организация = &Организация
	|	И НЕ УчетЗатрат.ФиксированнаяСтоимость
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетЗатрат.Организация,
	|	УчетЗатрат.СтруктурнаяЕдиница,
	|	УчетЗатрат.СчетУчета,
	|	УчетЗатрат.Номенклатура,
	|	УчетЗатрат.Характеристика,
	|	УчетЗатрат.Партия,
	|	УчетЗатрат.ЗаказПокупателя,
	|	УчетЗатрат.ЗаказНаПроизводство,
	|	УчетЗатрат.КоррСтруктурнаяЕдиница,
	|	УчетЗатрат.КоррСчетУчета,
	|	УчетЗатрат.КоррНоменклатура,
	|	УчетЗатрат.КоррХарактеристика,
	|	УчетЗатрат.КоррПартия,
	|	УчетЗатрат.КоррЗаказПокупателя,
	|	УчетЗатрат.КоррЗаказНаПроизводство,
	|	УчетЗатрат.ДокументПродажи,
	|	УчетЗатрат.ЗаказПродажи,
	|	УчетЗатрат.Подразделение,
	|	УчетЗатрат.Ответственный,
	|	УчетЗатрат.СтавкаНДС,
	|	УчетЗатрат.ЗатратыНаВыпуск,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА УчетЗатрат.ДокументПродажи.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА УчетЗатрат.ДокументПродажи.СтруктурнаяЕдиницаПолучатель
	|		ИНАЧЕ УчетЗатрат.ДокументПродажи.СтруктурнаяЕдиница
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УчетЗатрат.ПеремещениеВРозницуСуммовойУчет
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПриходнаяНакладная)
	|						ТОГДА УчетЗатрат.ДокументПродажи.СтруктурнаяЕдиница
	|					КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|						ТОГДА УчетЗатрат.ДокументПродажи.СтруктурнаяЕдиницаПолучатель
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	УчетЗатрат.ПеремещениеВРозницуСуммовойУчет,
	|	УчетЗатрат.Номенклатура.КатегорияНоменклатуры,
	|	УчетЗатрат.Номенклатура.НаправлениеДеятельности,
	|	УчетЗатрат.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж,
	|	УчетЗатрат.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж.ТипСчета,
	|	УчетЗатрат.СчетУчета.ТипСчета,
	|	УчетЗатрат.КоррСчетУчета.ТипСчета,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.СписаниеЗапасов)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ОтчетКомиссионераОСписании)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПересортицаЗапасов)
	|			ТОГДА УчетЗатрат.ДокументПродажи.Корреспонденция
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|				И УчетЗатрат.ДокументПродажи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы)
	|			ТОГДА УчетЗатрат.ДокументПродажи.СчетЗатрат
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА УчетЗатрат.Номенклатура.СчетУчетаЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.СписаниеЗапасов)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ОтчетКомиссионераОСписании)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПересортицаЗапасов)
	|			ТОГДА УчетЗатрат.ДокументПродажи.Корреспонденция.ТипСчета
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|				И УчетЗатрат.ДокументПродажи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы)
	|			ТОГДА УчетЗатрат.ДокументПродажи.СчетЗатрат.ТипСчета
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетЗатрат.ДокументПродажи) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА УчетЗатрат.Номенклатура.СчетУчетаЗатрат.ТипСчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтруктурнаяЕдиница,
	|	СчетУчета,
	|	Номенклатура,
	|	Характеристика,
	|	Партия,
	|	ЗаказПокупателя,
	|	ЗаказНаПроизводство,
	|	КоррСтруктурнаяЕдиница,
	|	КоррСчетУчета,
	|	КоррНоменклатура,
	|	КоррХарактеристика,
	|	КоррПартия,
	|	КоррЗаказПокупателя,
	|	КоррЗаказНаПроизводство";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
	Запрос.Выполнить();
	
	// Определяются направления списания всех сумм меньше рубля, для узлов по которым
	// есть остатки по суммам и без количества.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""РаспределитьСуммыБезКоличества"" КАК Поле1,
	|	УчетЗатратОстатки.Организация КАК Организация,
	|	УчетЗатратОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	УчетЗатратОстатки.СчетУчета КАК СчетУчета,
	|	УчетЗатратОстатки.СчетУчета.ТипСчета КАК СчетУчетаТипСчета,
	|	УчетЗатратОстатки.Номенклатура КАК Номенклатура,
	|	УчетЗатратОстатки.Характеристика КАК Характеристика,
	|	УчетЗатратОстатки.Партия КАК Партия,
	|	УчетЗатратОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	УчетЗатратОстатки.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ВЫБОР
	|		КОГДА УчетЗатратОстатки.КоличествоОстаток = 0
	|				И ВложенныйЗапрос.Сумма <> 0
	|				И (УчетЗатратОстатки.СуммаОстаток МЕЖДУ -1 И 1
	|					ИЛИ УчетЗатратОстатки.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|			ТОГДА УчетЗатратОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВложенныйЗапрос.КоррСтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	НЕОПРЕДЕЛЕНО КАК Спецификация,
	|	НЕОПРЕДЕЛЕНО КАК КоррСпецификация,
	|	ВложенныйЗапрос.КоррСчетУчета КАК КоррСчетУчета,
	|	ВложенныйЗапрос.КоррСчетУчетаТипСчета КАК КоррСчетУчетаТипСчета,
	|	ВложенныйЗапрос.КоррНоменклатура КАК КоррНоменклатура,
	|	ВложенныйЗапрос.КоррХарактеристика КАК КоррХарактеристика,
	|	ВложенныйЗапрос.КоррПартия КАК КоррПартия,
	|	ВложенныйЗапрос.КоррЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ВложенныйЗапрос.КоррЗаказНаПроизводство КАК КоррЗаказНаПроизводство,
	|	ВложенныйЗапрос.ДокументПродажи КАК ДокументПродажи,
	|	ВложенныйЗапрос.ЗаказПродажи КАК ЗаказПродажи,
	|	ВложенныйЗапрос.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	ВложенныйЗапрос.Подразделение КАК Подразделение,
	|	ВложенныйЗапрос.Ответственный КАК Ответственный,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	ВложенныйЗапрос.ЗатратыНаВыпуск КАК ЗатратыНаВыпуск,
	|	ВложенныйЗапрос.НоменклатураКатегорияНоменклатуры КАК НоменклатураКатегорияНоменклатуры,
	|	ВложенныйЗапрос.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельностиПродажи,
	|	ВложенныйЗапрос.НаправлениеДеятельностиСписания КАК НаправлениеДеятельностиСписания,
	|	ВложенныйЗапрос.НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродаж КАК НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродаж,
	|	ВложенныйЗапрос.НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродажТипСчета КАК НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродажТипСчета,
	|	УзлыКорректировкиСтоимостиСписания.НомерУзла КАК НомерУзла,
	|	УзлыКорректировкиСтоимостиСписанияИсточник.НомерУзла КАК НомерУзлаИсточник,
	|	ВложенныйЗапрос.СчетУчетаСписания КАК СчетУчетаСписания,
	|	ВложенныйЗапрос.СчетУчетаСписанияТипСчета КАК СчетУчетаСписанияТипСчета,
	|	ВложенныйЗапрос.СтруктурнаяЕдиницаПолучатель КАК СтруктурнаяЕдиницаПолучатель,
	|	ВложенныйЗапрос.ПеремещениеВРозницуСуммовойУчет КАК ПеремещениеВРозницуСуммовойУчет,
	|	ВложенныйЗапрос.РозничнаяСтруктурнаяЕдиница КАК РозничнаяСтруктурнаяЕдиница,
	|	ЕСТЬNULL(УчетЗатратОстаткиКор.КоличествоОстаток, 0) КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(&ГраницаДатаКон, Организация = &Организация) КАК УчетЗатратОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ УчетЗатратДвиженияРасход КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&ГраницаДатаКон, ) КАК УчетЗатратОстаткиКор
	|			ПО ВложенныйЗапрос.Организация = УчетЗатратОстаткиКор.Организация
	|				И ВложенныйЗапрос.КоррСтруктурнаяЕдиница = УчетЗатратОстаткиКор.СтруктурнаяЕдиница
	|				И ВложенныйЗапрос.КоррСчетУчета = УчетЗатратОстаткиКор.СчетУчета
	|				И ВложенныйЗапрос.КоррНоменклатура = УчетЗатратОстаткиКор.Номенклатура
	|				И ВложенныйЗапрос.КоррХарактеристика = УчетЗатратОстаткиКор.Характеристика
	|				И ВложенныйЗапрос.КоррПартия = УчетЗатратОстаткиКор.Партия
	|				И ВложенныйЗапрос.КоррЗаказПокупателя = УчетЗатратОстаткиКор.ЗаказПокупателя
	|				И ВложенныйЗапрос.КоррЗаказНаПроизводство = УчетЗатратОстаткиКор.ЗаказНаПроизводство
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
	|			ПО ВложенныйЗапрос.Организация = УзлыКорректировкиСтоимостиСписания.Организация
	|				И ВложенныйЗапрос.КоррСтруктурнаяЕдиница = УзлыКорректировкиСтоимостиСписания.СтруктурнаяЕдиница
	|				И ВложенныйЗапрос.КоррСчетУчета = УзлыКорректировкиСтоимостиСписания.СчетУчета
	|				И ВложенныйЗапрос.КоррНоменклатура = УзлыКорректировкиСтоимостиСписания.Номенклатура
	|				И ВложенныйЗапрос.КоррХарактеристика = УзлыКорректировкиСтоимостиСписания.Характеристика
	|				И ВложенныйЗапрос.КоррПартия = УзлыКорректировкиСтоимостиСписания.Партия
	|				И ВложенныйЗапрос.КоррЗаказПокупателя = УзлыКорректировкиСтоимостиСписания.ЗаказПокупателя
	|				И ВложенныйЗапрос.КоррЗаказНаПроизводство = УзлыКорректировкиСтоимостиСписания.ЗаказНаПроизводство
	|				И (УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор)
	|		ПО УчетЗатратОстатки.Организация = ВложенныйЗапрос.Организация
	|			И УчетЗатратОстатки.СтруктурнаяЕдиница = ВложенныйЗапрос.СтруктурнаяЕдиница
	|			И УчетЗатратОстатки.СчетУчета = ВложенныйЗапрос.СчетУчета
	|			И УчетЗатратОстатки.Номенклатура = ВложенныйЗапрос.Номенклатура
	|			И УчетЗатратОстатки.Характеристика = ВложенныйЗапрос.Характеристика
	|			И УчетЗатратОстатки.Партия = ВложенныйЗапрос.Партия
	|			И УчетЗатратОстатки.ЗаказПокупателя = ВложенныйЗапрос.ЗаказПокупателя
	|			И УчетЗатратОстатки.ЗаказНаПроизводство = ВложенныйЗапрос.ЗаказНаПроизводство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписанияИсточник
	|		ПО (УзлыКорректировкиСтоимостиСписанияИсточник.Регистратор = &Регистратор)
	|			И УчетЗатратОстатки.Организация = УзлыКорректировкиСтоимостиСписанияИсточник.Организация
	|			И УчетЗатратОстатки.СтруктурнаяЕдиница = УзлыКорректировкиСтоимостиСписанияИсточник.СтруктурнаяЕдиница
	|			И УчетЗатратОстатки.СчетУчета = УзлыКорректировкиСтоимостиСписанияИсточник.СчетУчета
	|			И УчетЗатратОстатки.Номенклатура = УзлыКорректировкиСтоимостиСписанияИсточник.Номенклатура
	|			И УчетЗатратОстатки.Характеристика = УзлыКорректировкиСтоимостиСписанияИсточник.Характеристика
	|			И УчетЗатратОстатки.Партия = УзлыКорректировкиСтоимостиСписанияИсточник.Партия
	|			И УчетЗатратОстатки.ЗаказПокупателя = УзлыКорректировкиСтоимостиСписанияИсточник.ЗаказПокупателя
	|			И УчетЗатратОстатки.ЗаказНаПроизводство = УзлыКорректировкиСтоимостиСписанияИсточник.ЗаказНаПроизводство
	|ГДЕ
	|	УчетЗатратОстатки.СуммаОстаток <> 0
	|	И УчетЗатратОстатки.КоличествоОстаток = 0
	|	И ВложенныйЗапрос.Сумма <> 0
	|	И (УчетЗатратОстатки.СуммаОстаток МЕЖДУ -1 И 1
	|			ИЛИ УчетЗатратОстатки.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	И УчетЗатратОстатки.СуммаОстаток <> 0
	|	И НЕ ВложенныйЗапрос.СчетУчета ЕСТЬ NULL
	|	И НЕ ЕСТЬNULL(УзлыКорректировкиСтоимостиСписанияИсточник.НомерУзла, 0) = ЕСТЬNULL(УзлыКорректировкиСтоимостиСписания.НомерУзла, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоОстаток УБЫВ,
	|	ВЫБОР
	|		КОГДА УзлыКорректировкиСтоимостиСписания.НомерУзла В (&СписокОбработанныхУзлов)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ УБЫВ";
	
	Запрос.УстановитьПараметр("ГраницаДатаКон", Новый Граница(ДатаКон, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("СписокОбработанныхУзлов", СписокОбработанныхУзлов);
	
	// Создадим набор записей регистра накопления Учет запасов и затрат.
	НаборЗаписейЗапасы = РегистрыНакопления.Запасы.СоздатьНаборЗаписей();
	НаборЗаписейЗапасы.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления Продажи.
	НаборЗаписейПродажи = РегистрыНакопления.Продажи.СоздатьНаборЗаписей();
	НаборЗаписейПродажи.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления УчетДоходовИРасходов.
	НаборЗаписейДоходыИРасходы = РегистрыНакопления.ДоходыИРасходы.СоздатьНаборЗаписей();
	НаборЗаписейДоходыИРасходы.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления СуммовойУчетВРознице.
	НаборЗаписейСуммовойУчетВРознице = РегистрыНакопления.СуммовойУчетВРознице.СоздатьНаборЗаписей();
	НаборЗаписейСуммовойУчетВРознице.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра бухгалтерии НаборЗаписейУправленческий.
	НаборЗаписейУправленческий = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();
	НаборЗаписейУправленческий.Отбор.Регистратор.Установить(Ссылка);
	
	КоличествоИтераций = 0;
	
	Результат = Запрос.Выполнить();
	
	Пока НЕ Результат.Пустой() Цикл
		
		КоличествоИтераций = КоличествоИтераций + 1;
		Если КоличествоИтераций > 60 Тогда
			ТаблицаНоменклатуры = Результат.Выгрузить();
			ТаблицаНоменклатуры.Свернуть("Номенклатура, Характеристика, Партия");
			Подробности = "";
			ДлинаСтроки = 0;
			ДополнительноеКоличество = 0;
			ПараметрыНоменклатуры = Новый Структура;
			ЭлементыПредставления = Новый Массив;
			Для каждого СтрокаНоменклатура Из ТаблицаНоменклатуры Цикл
				ПараметрыНоменклатуры.Очистить();
				ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаНоменклатура.Номенклатура);
				ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаНоменклатура.Характеристика);
				ПараметрыНоменклатуры.Вставить("ПредставлениеПартии", СтрокаНоменклатура.Партия);
				ПредставлениеНоменклатуры = ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры);
				Если НЕ ПустаяСтрока(Подробности) Тогда
					ЭлементыПредставления.Добавить(Подробности);
				КонецЕсли;
				Если ДлинаСтроки > 0 И ДлинаСтроки + СтрДлина(ПредставлениеНоменклатуры) + 2 > 250 Тогда
					// Ограничение слишком большого перечня номенклатуры
					ДополнительноеКоличество = ДополнительноеКоличество + 1;
					Продолжить;	
				КонецЕсли;
				ДлинаСтроки = ДлинаСтроки + СтрДлина(ПредставлениеНоменклатуры) + ?(ДлинаСтроки = 0, 0, 2);
				ЭлементыПредставления.Добавить(ПредставлениеНоменклатуры);
			КонецЦикла; 
			Подробности = СтрСоединить(ЭлементыПредставления, "; ");        
			Если ДополнительноеКоличество > 0 Тогда
				Подробности = СтрШаблон(НСтр("ru = '%1 и еще %2'"), Подробности, ДополнительноеКоличество);
			КонецЕсли;
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось скорректировать суммовые остатки по затрат по позициям номенклатуры: %1.'"),
				Подробности);
			ДобавитьОшибкуВТаблицу(ОписаниеОшибки, ВидОперации, ТаблицаОшибок);
			Прервать;
		КонецЕсли;
		
		НаборЗаписейЗапасы.Очистить();
		НаборЗаписейПродажи.Очистить();
		НаборЗаписейДоходыИРасходы.Очистить();
		НаборЗаписейСуммовойУчетВРознице.Очистить();
		НаборЗаписейУправленческий.Очистить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		СписокОбработанныхУзловИсточников = Новый Массив();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			// Сделаем проверку, на случай, если есть не закрытые кассовые смены.
			Если ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.ЧекККМ")
				ИЛИ ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СписокОбработанныхУзловИсточников.Найти(ВыборкаДетальныеЗаписи.НомерУзлаИсточник) = Неопределено Тогда
				СписокОбработанныхУзловИсточников.Добавить(ВыборкаДетальныеЗаписи.НомерУзлаИсточник);
			Иначе
				Продолжить; // Этот источник уже скорректировали.
			КонецЕсли;
			
			Если СписокОбработанныхУзлов.Найти(ВыборкаДетальныеЗаписи.НомерУзла) = Неопределено Тогда
				СписокОбработанныхУзлов.Добавить(ВыборкаДетальныеЗаписи.НомерУзла);
			КонецЕсли;
			
			СуммаКорректировки = ВыборкаДетальныеЗаписи.Сумма;
			
			СформироватьДвиженияПоРегиструУчетаЗатрат(
				НаборЗаписейЗапасы,
				НаборЗаписейУправленческий,
				ВыборкаДетальныеЗаписи,
				СуммаКорректировки,
				Ложь,);
			
			Если ВыборкаДетальныеЗаписи.КоррСчетУчета = ДополнительныеСвойства.ДляПроведения.ПустойСчет Тогда
				
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДокументПродажи)
				   И ((ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.РасходнаяНакладная")
					 И ВыборкаДетальныеЗаписи.ДокументПродажи.ВидОперации <> Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
				  ИЛИ ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
				  ИЛИ ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.АктВыполненныхРабот")
				  ИЛИ ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.ОтчетКомиссионера")
				  ИЛИ ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.ЗаказПокупателя")
				  ИЛИ ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.ОтчетОПереработке")
				  ИЛИ ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")) Тогда
					
					// Движения по регистру Продажи.
					НоваяСтрока = НаборЗаписейПродажи.Добавить();
					НоваяСтрока.Период = Дата;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.ЗаказПокупателя = ВыборкаДетальныеЗаписи.ЗаказПродажи;
					НоваяСтрока.Подразделение = ВыборкаДетальныеЗаписи.Подразделение;
					НоваяСтрока.Ответственный = ВыборкаДетальныеЗаписи.Ответственный;
					НоваяСтрока.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
					НоваяСтрока.Характеристика = ВыборкаДетальныеЗаписи.Характеристика;
					НоваяСтрока.Партия = ВыборкаДетальныеЗаписи.Партия;
					НоваяСтрока.Документ = ВыборкаДетальныеЗаписи.ДокументПродажи;
					НоваяСтрока.СтавкаНДС = ВыборкаДетальныеЗаписи.СтавкаНДС;
					НоваяСтрока.Себестоимость = СуммаКорректировки;
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаказПродажи) 
						И ВыборкаДетальныеЗаписи.УчетПотребностиПоСкладам Тогда
						НоваяСтрока.Склад = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;
					КонецЕсли;
					
					// Движения по регистру ДоходыИРасходы.
					НоваяСтрока = НаборЗаписейДоходыИРасходы.Добавить();
					НоваяСтрока.Период = Дата;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.Подразделение;
					НоваяСтрока.ЗаказПокупателя = ВыборкаДетальныеЗаписи.ЗаказПродажи;
					НоваяСтрока.НаправлениеДеятельности = ВыборкаДетальныеЗаписи.НаправлениеДеятельностиПродажи;
					НоваяСтрока.СчетУчета = ВыборкаДетальныеЗаписи.НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродаж;
					НоваяСтрока.СуммаРасходов = СуммаКорректировки;
					НоваяСтрока.СодержаниеПроводки = НСтр("ru = 'Отражение расходов по продаже'");
					
					// Движения по регистру Управленческий.
					НоваяСтрока = НаборЗаписейУправленческий.Добавить();
					НоваяСтрока.Период = Дата;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
					НоваяСтрока.СчетДт = ВыборкаДетальныеЗаписи.НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродаж;
					НоваяСтрока.СчетКт = ВыборкаДетальныеЗаписи.СчетУчета;
					НоваяСтрока.Содержание = НСтр("ru = 'Отражение расходов по продаже'");
					НоваяСтрока.Сумма = СуммаКорректировки;
					
				ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДокументПродажи)
						И ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.РасходнаяНакладная")
						И ВыборкаДетальныеЗаписи.ДокументПродажи.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику Тогда
						
					// Движения по регистру Доходы и расходы.
					НоваяСтрока = НаборЗаписейДоходыИРасходы.Добавить();
					НоваяСтрока.Период = ДополнительныеСвойства.ДляПроведения.Дата;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.СтруктурнаяЕдиница = Неопределено;
					НоваяСтрока.ЗаказПокупателя = Неопределено;
					НоваяСтрока.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Прочее;
					
					Если СуммаКорректировки < 0 Тогда
						НоваяСтрока.СчетУчета = ПланыСчетов.Управленческий.ПрочиеРасходы;
						НоваяСтрока.СуммаРасходов = СуммаКорректировки;
						НоваяСтрока.СодержаниеПроводки = НСтр("ru = 'Прочие расходы по возврату поставщику'");
					Иначе
						НоваяСтрока.СчетУчета = ПланыСчетов.Управленческий.ПрочиеДоходы;
						НоваяСтрока.СуммаДоходов = СуммаКорректировки;
						НоваяСтрока.СодержаниеПроводки = НСтр("ru = 'Прочие доходы по возврату поставщику'");
					КонецЕсли;
					НоваяСтрока.Аналитика = ВыборкаДетальныеЗаписи.Номенклатура;
					
					// Движения по регистру Управленческий.
					НоваяСтрока = НаборЗаписейУправленческий.Добавить();
					НоваяСтрока.Период = Дата;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
					
					Если СуммаКорректировки < 0 Тогда
						НоваяСтрока.СчетДт = ПланыСчетов.Управленческий.ПрочиеРасходы;
						НоваяСтрока.СчетКт = ВыборкаДетальныеЗаписи.СчетУчета;
						НоваяСтрока.Сумма = - СуммаКорректировки;
						НоваяСтрока.Содержание = НСтр("ru = 'Прочие расходы по возврату поставщику'");
					Иначе
						НоваяСтрока.СчетДт = ВыборкаДетальныеЗаписи.СчетУчета;
						НоваяСтрока.СчетКт = ПланыСчетов.Управленческий.ПрочиеДоходы;
						НоваяСтрока.Сумма = СуммаКорректировки;
						НоваяСтрока.Содержание = НСтр("ru = 'Прочие доходы по возврату поставщику'");
					КонецЕсли;
					
				ИначеЕсли ВыборкаДетальныеЗаписи.ПеремещениеВРозницуСуммовойУчет Тогда
					
					// Движения по регистру СуммовойУчетВРознице.
					НоваяСтрока = НаборЗаписейСуммовойУчетВРознице.Добавить();
					НоваяСтрока.Период = Дата;
					НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.РозничнаяСтруктурнаяЕдиница;
					НоваяСтрока.Валюта = ВыборкаДетальныеЗаписи.РозничнаяСтруктурнаяЕдиница.РозничныйВидЦен.ВалютаЦены;
					НоваяСтрока.СодержаниеПроводки = НСтр("ru = 'Перемещение в розницу'");
					НоваяСтрока.Себестоимость = СуммаКорректировки;
					
					// Движения по регистру Управленческий.
					НоваяСтрока = НаборЗаписейУправленческий.Добавить();
					НоваяСтрока.Период = Дата;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
					НоваяСтрока.СчетДт = ВыборкаДетальныеЗаписи.РозничнаяСтруктурнаяЕдиница.СчетУчетаВРознице;
					НоваяСтрока.СчетКт = ВыборкаДетальныеЗаписи.СчетУчета;
					НоваяСтрока.Содержание = НСтр("ru = 'Перемещение в розницу'");
					НоваяСтрока.Сумма = СуммаКорректировки; 
					
				ИначеЕсли ВыборкаДетальныеЗаписи.СчетУчетаСписанияТипСчета = Перечисления.ТипыСчетов.ПрочиеРасходы
					  ИЛИ ВыборкаДетальныеЗаписи.СчетУчетаСписанияТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
					
					// Движения по регистру Доходы и расходы.
					НоваяСтрока = НаборЗаписейДоходыИРасходы.Добавить();
					НоваяСтрока.Период = ДополнительныеСвойства.ДляПроведения.Дата;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиницаПолучатель;
					
					Если ТипЗнч(ВыборкаДетальныеЗаписи.ДокументПродажи) = Тип("ДокументСсылка.ПеремещениеЗапасов")
					   И ВыборкаДетальныеЗаписи.СчетУчетаСписанияТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
						НоваяСтрока.НаправлениеДеятельности = ВыборкаДетальныеЗаписи.НаправлениеДеятельностиСписания;
						НоваяСтрока.ЗаказПокупателя = ВыборкаДетальныеЗаписи.ЗаказПокупателя;
					Иначе
						НоваяСтрока.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Прочее;
					КонецЕсли;
					
					НоваяСтрока.СчетУчета = ВыборкаДетальныеЗаписи.СчетУчетаСписания;
					НоваяСтрока.Аналитика = ВыборкаДетальныеЗаписи.Номенклатура;
					НоваяСтрока.СуммаРасходов = СуммаКорректировки;
					НоваяСтрока.СодержаниеПроводки = НСтр("ru = 'Прочие расходы'");
					
					// Движения по регистру Управленческий.
					НоваяСтрока = НаборЗаписейУправленческий.Добавить();
					НоваяСтрока.Период = Дата;
					НоваяСтрока.Регистратор = Ссылка;
					НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
					НоваяСтрока.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
					НоваяСтрока.СчетДт = ВыборкаДетальныеЗаписи.СчетУчетаСписания;
					НоваяСтрока.СчетКт = ВыборкаДетальныеЗаписи.СчетУчета;
					НоваяСтрока.Содержание = НСтр("ru = 'Прочие расходы'");
					НоваяСтрока.Сумма = СуммаКорректировки;
					
				Иначе
					
					Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СчетУчетаСписания) 
						ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СчетУчета) Тогда
						
						// Некорректная проводка
						ПараметрыНоменклатуры = Новый Структура;
						ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", ВыборкаДетальныеЗаписи.Номенклатура);
						ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", ВыборкаДетальныеЗаписи.Характеристика);
						ПараметрыНоменклатуры.Вставить("ПредставлениеПартии", ВыборкаДетальныеЗаписи.Партия);
						ПредставлениеНоменклатуры = ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры);
						Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СчетУчетаСписания) Тогда
							ПредставлениеСчета = НСтр("ru = 'счет затрат (списания)'");
						Иначе
							ПредставлениеСчета = НСтр("ru = 'счет учета запасов'");
						КонецЕсли; 
						ШаблонОшибки = НСтр("ru = 'В движениях номенклатуры %1 не заполнен %2, движение не выполнено. Требуется проверка корректности заполнения счетов в карточке номенклатуры и корреспондирующих счетов при непосредственном списании и/или оприходовании запаса'");
						ОписаниеОшибки = СтрШаблон(ШаблонОшибки, ПредставлениеНоменклатуры, ПредставлениеСчета);
						Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДокументПродажи) Тогда
							ШаблонОшибки = НСтр("ru = '%1. Документ: %2'");
							ОписаниеОшибки = СтрШаблон(ШаблонОшибки, ОписаниеОшибки, ВыборкаДетальныеЗаписи.ДокументПродажи);
						КонецЕсли; 
						ДобавитьОшибкуВТаблицу(ОписаниеОшибки, "РаспределениеЗатрат", ТаблицаОшибок);
						
					Иначе
						
						// Движения по регистру Управленческий.
						НоваяСтрока = НаборЗаписейУправленческий.Добавить();
						НоваяСтрока.Период = Дата;
						НоваяСтрока.Регистратор = Ссылка;
						НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
						НоваяСтрока.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
						НоваяСтрока.СчетДт = ВыборкаДетальныеЗаписи.СчетУчетаСписания;
						НоваяСтрока.СчетКт = ВыборкаДетальныеЗаписи.СчетУчета;
						НоваяСтрока.Содержание = НСтр("ru = 'Списание запасов на произвольный счет'");
						НоваяСтрока.Сумма = СуммаКорректировки;
					
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписейЗапасы.Записать(Ложь);
		НаборЗаписейПродажи.Записать(Ложь);
		НаборЗаписейДоходыИРасходы.Записать(Ложь);
		НаборЗаписейСуммовойУчетВРознице.Записать(Ложь);
		НаборЗаписейУправленческий.Записать(Ложь);
		
		Если КоличествоИтераций = 15 ИЛИ КоличествоИтераций = 30 ИЛИ КоличествоИтераций = 45 Тогда
			// Сброс списка отработанных узлов.
			СписокОбработанныхУзлов.Очистить();
			СписокОбработанныхУзлов.Добавить("");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СписокОбработанныхУзлов", СписокОбработанныхУзлов);
		Результат = Запрос.Выполнить();
		
	КонецЦикла;
	
	Запрос.Текст = "УНИЧТОЖИТЬ УчетЗатратДвиженияРасход";
	Запрос.Выполнить();
	
КонецПроцедуры // РаспределитьСуммыБезКоличества()

// Корректирует списание учета затрат.
//
// Параметры:
//  Отказ        - Булево - флаг отказа проведения документа.
//
Процедура КорректировкаСписанияУчетЗатрат(ВидОперации, ТаблицаОшибок, Отказ)
	
	// Сформируем список состояний.
	КоличествоУравненийСЛУ = СформироватьДвиженияПоРегиструУзлыКорректировкиСтоимостиСписания(Отказ);
	
	Если КоличествоУравненийСЛУ > 0 Тогда
		
		// Решим СЛУ и определим среднюю цену в каждом состоянии.
		РешениеНайдено = РешитьСЛУ();
		
		Если НЕ РешениеНайдено Тогда
			Возврат;
		КонецЕсли;
		
		// Скорректируем движения по состояниям.
		СформироватьКорректирующиеДвиженияПоРегиструУчетаЗатрат(ТаблицаОшибок);
		
		// Распределим оставшиеся в состояниях копейки (результаты ошибок округления).
		РаспределитьСуммыБезКоличества(ВидОперации, ТаблицаОшибок);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	""Уравнений нет"" КАК Поле1
		|ПОМЕСТИТЬ УчетЗатрат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Уравнений нет"" КАК Поле1
		|ПОМЕСТИТЬ УчетЗатратВозвратыТекПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Уравнений нет"" КАК Поле1
		|ПОМЕСТИТЬ УчетЗатратСписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Уравнений нет"" КАК Поле1
		|ПОМЕСТИТЬ УчетЗатратВозвратыПоРезервам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Уравнений нет"" КАК Поле1
		|ПОМЕСТИТЬ УчетЗатратВозвратыСвободные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Уравнений нет"" КАК Поле1
		|ПОМЕСТИТЬ УчетЗатратВозвраты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Уравнений нет"" КАК Поле1
		|ПОМЕСТИТЬ УчетЗатратБезУчетаВозвратов";
		
		Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
КонецПроцедуры // КорректировкаСписанияУчетЗатрат()

// Процедура выполняет корректировку стоимости возвратов от клиента.
//
Процедура РассчитатьСтоимостьВозвратов(ОкончательныйРасчет = Ложь)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Запасы.Период КАК Период,
	|	Запасы.Организация КАК Организация,
	|	Запасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	Запасы.СчетУчета КАК СчетУчета,
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	Запасы.Партия КАК Партия,
	|	Запасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	Запасы.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Запасы.ЗаказПродажи КАК ЗаказПродажи,
	|	Запасы.ЗаказПродажи.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	Запасы.СтавкаНДС КАК СтавкаНДС,
	|	Запасы.ДокументПродажи КАК ДокументПродажи,
	|	Запасы.Подразделение КАК Подразделение,
	|	Запасы.КоррСчетУчета КАК КоррСчетУчета,
	|	Запасы.Ответственный КАК Ответственный,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(Запасы.ДокументПродажи.Дата, МЕСЯЦ) < КОНЕЦПЕРИОДА(Запасы.Период, МЕСЯЦ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратПрошлогоПериода,
	|	-СУММА(Запасы.Количество) КАК Количество,
	|	-СУММА(Запасы.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВтВозвраты
	|ИЗ
	|	РегистрНакопления.Запасы КАК Запасы
	|ГДЕ
	|	Запасы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Запасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Запасы.Возврат
	|	И Запасы.Организация = &Организация
	|	И Запасы.КоррСчетУчета = &ПустойСчет
	|	И Запасы.ДокументПродажи <> НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	Запасы.Период,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(Запасы.ДокументПродажи.Дата, МЕСЯЦ) < КОНЕЦПЕРИОДА(Запасы.Период, МЕСЯЦ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	Запасы.Организация,
	|	Запасы.СтруктурнаяЕдиница,
	|	Запасы.СчетУчета,
	|	Запасы.Номенклатура,
	|	Запасы.Характеристика,
	|	Запасы.Партия,
	|	Запасы.ЗаказПокупателя,
	|	Запасы.ЗаказНаПроизводство,
	|	Запасы.ЗаказПродажи,
	|	Запасы.СтавкаНДС,
	|	Запасы.ДокументПродажи,
	|	Запасы.Подразделение,
	|	Запасы.КоррСчетУчета,
	|	Запасы.Ответственный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВозвратов.Период КАК Период,
	|	ИСТИНА КАК Возврат,
	|	&Организация КАК Организация,
	|	ТаблицаВозвратов.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаВозвратов.СчетУчета КАК СчетУчета,
	|	ТаблицаВозвратов.Номенклатура КАК Номенклатура,
	|	ТаблицаВозвратов.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельностиПродажи,
	|	ТаблицаВозвратов.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж КАК НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродаж,
	|	ТаблицаВозвратов.Характеристика КАК Характеристика,
	|	ТаблицаВозвратов.Партия КАК Партия,
	|	ТаблицаВозвратов.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаВозвратов.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ТаблицаВозвратов.ЗаказПродажи КАК ЗаказПродажи,
	|	ТаблицаВозвратов.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	ТаблицаВозвратов.Количество КАК КоличествоВозвратов,
	|	ТаблицаВозвратов.Сумма КАК СуммаВозвратов,
	|	ТаблицаВозвратов.ДокументПродажи КАК ДокументПродажи,
	|	ТаблицаВозвратов.Подразделение КАК Подразделение,
	|	ТаблицаВозвратов.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаВозвратов.Ответственный КАК Ответственный,
	|	ТаблицаВозвратов.ЭтоВозвратПрошлогоПериода КАК ЭтоВозвратПрошлогоПериода,
	|	&ПустойСчет КАК КоррСчетУчета,
	|	СУММА(ТаблицаПродажи.Количество) КАК КоличествоПродаж,
	|	СУММА(ТаблицаПродажи.Сумма) КАК СуммаПродаж
	|ИЗ
	|	ВтВозвраты КАК ТаблицаВозвратов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы КАК ТаблицаПродажи
	|		ПО ТаблицаВозвратов.Номенклатура = ТаблицаПродажи.Номенклатура
	|			И ТаблицаВозвратов.Характеристика = ТаблицаПродажи.Характеристика
	|			И ТаблицаВозвратов.Партия = ТаблицаПродажи.Партия
	|			И ТаблицаВозвратов.ЗаказПродажи = ТаблицаПродажи.ЗаказПродажи
	|			И (ТаблицаПродажи.Организация = &Организация)
	|			И ТаблицаВозвратов.ДокументПродажи = ТаблицаПродажи.ДокументПродажи
	|			И ТаблицаВозвратов.СчетУчета = ТаблицаПродажи.СчетУчета
	|			И ТаблицаВозвратов.СтавкаНДС = ТаблицаПродажи.СтавкаНДС
	|			И (ТаблицаПродажи.КоррСчетУчета = &ПустойСчет)
	|			И (ТаблицаПродажи.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|			И (НЕ ТаблицаПродажи.Возврат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВозвратов.Период,
	|	ТаблицаВозвратов.СтруктурнаяЕдиница,
	|	ТаблицаВозвратов.СчетУчета,
	|	ТаблицаВозвратов.Номенклатура,
	|	ТаблицаВозвратов.Характеристика,
	|	ТаблицаВозвратов.Партия,
	|	ТаблицаВозвратов.ЗаказПокупателя,
	|	ТаблицаВозвратов.ЗаказНаПроизводство,
	|	ТаблицаВозвратов.ЗаказПродажи,
	|	ТаблицаВозвратов.УчетПотребностиПоСкладам,
	|	ТаблицаВозвратов.Количество,
	|	ТаблицаВозвратов.Сумма,
	|	ТаблицаВозвратов.ДокументПродажи,
	|	ТаблицаВозвратов.Подразделение,
	|	ТаблицаВозвратов.СтавкаНДС,
	|	ТаблицаВозвратов.Ответственный,
	|	ТаблицаВозвратов.ЭтоВозвратПрошлогоПериода,
	|	ТаблицаВозвратов.Номенклатура.НаправлениеДеятельности,
	|	ТаблицаВозвратов.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|
	|ИМЕЮЩИЕ
	|	(ВЫРАЗИТЬ(СУММА(ТаблицаПродажи.Сумма) - ТаблицаВозвратов.Сумма КАК ЧИСЛО(15, 2))) <> 0");
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПустойСчет", ДополнительныеСвойства.ДляПроведения.ПустойСчет);
	Запрос.УстановитьПараметр("Организация", ДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", ДополнительныеСвойства.ДляПроведения.НачальнаяДатаПериода);
	Запрос.УстановитьПараметр("КонецПериода", ДополнительныеСвойства.ДляПроведения.КонечнаяДатаПериод);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОстатков = Неопределено;
	Если ОкончательныйРасчет Тогда
		// Корректировка себестоимости возвратов при нулевых остатках запаса на конец месяца 
		// может приводить к зависанию себестоимости
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаНоменклатуры", Результат.Выгрузить());
		Запрос.УстановитьПараметр("Организация", ДополнительныеСвойства.ДляПроведения.Организация);
		Запрос.УстановитьПараметр("ГраницаДатаКон", Новый 
			Граница(ДополнительныеСвойства.ДляПроведения.КонечнаяДатаПериод, ВидГраницы.Включая));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	ТаблицаНоменклатуры.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ТаблицаНоменклатуры.СчетУчета КАК СчетУчета,
		|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
		|	ТаблицаНоменклатуры.Партия КАК Партия,
		|	ТаблицаНоменклатуры.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ТаблицаНоменклатуры.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	ТаблицаНоменклатуры.СуммаПродаж КАК СуммаПродаж,
		|	ТаблицаНоменклатуры.КоличествоПродаж КАК КоличествоПродаж,
		|	ТаблицаНоменклатуры.КоличествоВозвратов КАК КоличествоВозвратов,
		|	ТаблицаНоменклатуры.СуммаВозвратов КАК СуммаВозвратов
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Организация КАК Организация,
		|	ТаблицаНоменклатуры.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ТаблицаНоменклатуры.СчетУчета КАК СчетУчета,
		|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
		|	ТаблицаНоменклатуры.Партия КАК Партия,
		|	ТаблицаНоменклатуры.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ТаблицаНоменклатуры.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ПОМЕСТИТЬ ТаблицаНоменклатурыСвернуто
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|ГДЕ
		|	ТаблицаНоменклатуры.КоличествоПродаж <> 0
		|	И (ВЫРАЗИТЬ(ТаблицаНоменклатуры.СуммаВозвратов - ТаблицаНоменклатуры.СуммаПродаж * ТаблицаНоменклатуры.КоличествоВозвратов / ТаблицаНоменклатуры.КоличествоПродаж КАК ЧИСЛО(15, 2))) <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНоменклатуры.ЗаказНаПроизводство,
		|	ТаблицаНоменклатуры.Партия,
		|	ТаблицаНоменклатуры.ЗаказПокупателя,
		|	ТаблицаНоменклатуры.Организация,
		|	ТаблицаНоменклатуры.СчетУчета,
		|	ТаблицаНоменклатуры.Номенклатура,
		|	ТаблицаНоменклатуры.Характеристика,
		|	ТаблицаНоменклатуры.СтруктурнаяЕдиница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапасыОстатки.Организация КАК Организация,
		|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
		|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
		|	ЗапасыОстатки.Характеристика КАК Характеристика,
		|	ЗапасыОстатки.Партия КАК Партия,
		|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ЗапасыОстатки.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	ЗапасыОстатки.КоличествоОстаток КАК Остаток
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки(
		|			&ГраницаДатаКон,
		|			(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя, ЗаказНаПроизводство) В
		|				(ВЫБРАТЬ
		|					ТаблицаНоменклатурыСвернуто.Организация,
		|					ТаблицаНоменклатурыСвернуто.СтруктурнаяЕдиница,
		|					ТаблицаНоменклатурыСвернуто.СчетУчета,
		|					ТаблицаНоменклатурыСвернуто.Номенклатура,
		|					ТаблицаНоменклатурыСвернуто.Характеристика,
		|					ТаблицаНоменклатурыСвернуто.Партия,
		|					ТаблицаНоменклатурыСвернуто.ЗаказПокупателя,
		|					ТаблицаНоменклатурыСвернуто.ЗаказНаПроизводство
		|				ИЗ
		|					ТаблицаНоменклатурыСвернуто)) КАК ЗапасыОстатки";
		ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
		ТаблицаОстатков.Индексы.Добавить("Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя, ЗаказНаПроизводство");
	КонецЕсли; 
	
	// Корректировка стоимости.
	
	// Создадим набор записей регистра накопления Учет запасов и затрат.
	НаборЗаписейЗапасы = РегистрыНакопления.Запасы.СоздатьНаборЗаписей();
	НаборЗаписейЗапасы.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления Продажи.
	НаборЗаписейПродажи = РегистрыНакопления.Продажи.СоздатьНаборЗаписей();
	НаборЗаписейПродажи.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления УчетДоходовИРасходов.
	НаборЗаписейДоходыИРасходы = РегистрыНакопления.ДоходыИРасходы.СоздатьНаборЗаписей();
	НаборЗаписейДоходыИРасходы.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления Управленческий.
	НаборЗаписейУправленческий = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();
	НаборЗаписейУправленческий.Отбор.Регистратор.Установить(Ссылка);
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.КоличествоПродаж = 0 Тогда
			СуммаКорректировки = 0;
		Иначе
			ЦенаПродажи = ВыборкаДетальныеЗаписи.СуммаПродаж / ВыборкаДетальныеЗаписи.КоличествоПродаж;
			СуммаВозвратов = ЦенаПродажи * ВыборкаДетальныеЗаписи.КоличествоВозвратов;
			СуммаКорректировки = ВыборкаДетальныеЗаписи.СуммаВозвратов - ЦенаПродажи * ВыборкаДетальныеЗаписи.КоличествоВозвратов;
		КонецЕсли;
		
		Если ОкончательныйРасчет И ТаблицаОстатков <> Неопределено И Окр(СуммаКорректировки, 2) <> 0 Тогда
			СтруктураПоиска = Новый Структура("Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя, ЗаказНаПроизводство");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаДетальныеЗаписи);
			СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
			Если СтрокиОстатков.Количество() = 0 ИЛИ СтрокиОстатков[0].Остаток = 0 Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		Если (НЕ Окр(СуммаКорректировки, 2) = 0) Тогда
			
			// Движения по регистру Учет запасов и затрат.
			СформироватьДвиженияПоРегиструУчетаЗатрат(
				НаборЗаписейЗапасы,
				НаборЗаписейУправленческий,
				ВыборкаДетальныеЗаписи,
				СуммаКорректировки,
				ВыборкаДетальныеЗаписи.ЭтоВозвратПрошлогоПериода, // возвраты прошлого периода по фиксированной стоимости
				НСтр("ru = 'Себестоимость возврата от покупателя'"));
			
			// Движения по регистру Продажи.
			НоваяСтрока = НаборЗаписейПродажи.Добавить();
			НоваяСтрока.Период = Дата;
			НоваяСтрока.Регистратор = Ссылка;
			НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
			НоваяСтрока.ЗаказПокупателя = ВыборкаДетальныеЗаписи.ЗаказПродажи;
			НоваяСтрока.Подразделение = ВыборкаДетальныеЗаписи.Подразделение;
			НоваяСтрока.Ответственный = ВыборкаДетальныеЗаписи.Ответственный;
			НоваяСтрока.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
			НоваяСтрока.Характеристика = ВыборкаДетальныеЗаписи.Характеристика;
			НоваяСтрока.Партия = ВыборкаДетальныеЗаписи.Партия;
			НоваяСтрока.Документ = ВыборкаДетальныеЗаписи.ДокументПродажи;
			НоваяСтрока.СтавкаНДС = ВыборкаДетальныеЗаписи.СтавкаНДС;
			НоваяСтрока.Себестоимость = СуммаКорректировки;
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаказПродажи) 
				И ВыборкаДетальныеЗаписи.УчетПотребностиПоСкладам Тогда
				НоваяСтрока.Склад = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;
			КонецЕсли;
			
			// Движения по регистру ДоходыИРасходы.
			НоваяСтрока = НаборЗаписейДоходыИРасходы.Добавить();
			НоваяСтрока.Период = Дата;
			НоваяСтрока.Регистратор = Ссылка;
			НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
			НоваяСтрока.СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.Подразделение;
			НоваяСтрока.ЗаказПокупателя = ВыборкаДетальныеЗаписи.ЗаказПродажи;
			НоваяСтрока.НаправлениеДеятельности = ВыборкаДетальныеЗаписи.НаправлениеДеятельностиПродажи;
			НоваяСтрока.СчетУчета = ВыборкаДетальныеЗаписи.НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродаж;
			НоваяСтрока.СуммаРасходов = СуммаКорректировки;
			НоваяСтрока.СодержаниеПроводки = НСтр("ru = 'Отражение расходов'");
			
			// Движения по регистру Управленческий.
			НоваяСтрока = НаборЗаписейУправленческий.Добавить();
			НоваяСтрока.Период = Дата;
			НоваяСтрока.Регистратор = Ссылка;
			НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
			НоваяСтрока.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
			НоваяСтрока.СчетДт = ВыборкаДетальныеЗаписи.НаправлениеДеятельностиПродажиСчетУчетаСебестоимостиПродаж;
			НоваяСтрока.СчетКт = ВыборкаДетальныеЗаписи.СчетУчета;
			НоваяСтрока.Содержание = НСтр("ru = 'Отражение расходов'");
			НоваяСтрока.Сумма = СуммаКорректировки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Пишем оставшиеся записи Учет запасов и затрат.
	НаборЗаписейЗапасы.Записать(Ложь);
	
	// Пишем оставшиеся записи Продажи.
	НаборЗаписейПродажи.Записать(Ложь);
	
	// Пишем оставшиеся записи Учет доходов и расходов.
	НаборЗаписейДоходыИРасходы.Записать(Ложь);
	
	// Пишем оставшиеся записи Управленческий.
	НаборЗаписейУправленческий.Записать(Ложь);

КонецПроцедуры

// Процедура производит расчет фактической себестоимости выпуска.
//
// Параметры:
//  Отказ        - Булево - флаг отказа проведения документа.
//
Процедура РассчитатьФактическуюСебестоимостьВыпуска(Отказ, ВидОперации, ТаблицаОшибок)
	
	КорректировкаСписанияУчетЗатрат(ВидОперации, ТаблицаОшибок, Отказ);
	
	// Уничтожим временные таблицы.
	Запрос = Новый Запрос();
	Запрос.Текст = "УНИЧТОЖИТЬ ТаблицаРешений; УНИЧТОЖИТЬ УчетЗатрат; УНИЧТОЖИТЬ ТаблицаУзлыКорректировкиСтоимостиСписания; УНИЧТОЖИТЬ ТаблицаОстатковПартий; УНИЧТОЖИТЬ ПериодыПартий; УНИЧТОЖИТЬ УчетЗатратВозвратыТекПериода; УНИЧТОЖИТЬ УчетЗатратСписания; УНИЧТОЖИТЬ УчетЗатратВозвратыПоРезервам; УНИЧТОЖИТЬ УчетЗатратВозвратыСвободные; УНИЧТОЖИТЬ УчетЗатратВозвраты; УНИЧТОЖИТЬ УчетЗатратБезУчетаВозвратов";
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.ВыполнитьПакет();
	
	// Очистим набор записей УзлыКорректировкиСтоимостиСписания.
	НаборЗаписей = РегистрыСведений.УзлыКорректировкиСтоимостиСписания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры // РассчитатьФактическуюСебестоимостьВыпуска()

#КонецОбласти

#Область Распределение

// Формирует таблицу базы распределения.
//
// Параметры:
//	БазаРаспределения - Перечисления.БазыРаспределенияРасходов
//	МассивСчетовУчета - Массив, содержащий фильтр по счетам учета
//	ФильтрПоСтруктурнаяЕдиница - фильтр по структурным единицам
//	ФильтрПоЗаказ - фильтр по заказам
//
// Возвращаемое значение:
//  ТаблицаЗначений, содержащая базу распределения.
//
Функция СформироватьТаблицуБазыРаспределения(БазаРаспределения, МассивСчетовУчета, ФильтрПоСтруктурнаяЕдиница, ФильтрПоЗаказ) Экспорт
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	
	Если БазаРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемВыпуска Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВыпускПродукцииОбороты.Организация КАК Организация,
		|	ВыпускПродукцииОбороты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ВыпускПродукцииОбороты.Номенклатура КАК Номенклатура,
		|	ВыпускПродукцииОбороты.Характеристика КАК Характеристика,
		|	ВыпускПродукцииОбороты.Партия КАК Партия,
		|	ВыпускПродукцииОбороты.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ВыпускПродукцииОбороты.Спецификация КАК Спецификация,
		|	ВыпускПродукцииОбороты.Номенклатура.СчетУчетаЗатрат КАК СчетУчета,
		|	ВыпускПродукцииОбороты.Номенклатура.СчетУчетаЗатрат.ТипСчета КАК СчетУчетаТипСчета,
		|	ВыпускПродукцииОбороты.КоличествоОборот КАК База
		|ИЗ
		|	РегистрНакопления.ВыпускПродукции.Обороты(
		|			&НачДата,
		|			&КонДата,
		|			,
		|			Организация = &Организация
		|			// ФильтрПоЗаказ
		|			// ФильтрПоСтруктурнаяЕдиница
		|	) КАК ВыпускПродукцииОбороты
		|ГДЕ
		|	ВыпускПродукцииОбороты.Организация = &Организация
		|	И ВыпускПродукцииОбороты.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
		|	И ВыпускПродукцииОбороты.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоЗаказ", ?(ЗначениеЗаполнено(ФильтрПоЗаказ), "И ЗаказПокупателя В (&МассивЗаказов)", ""));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоСтруктурнаяЕдиница", ?(ЗначениеЗаполнено(ФильтрПоСтруктурнаяЕдиница), "И СтруктурнаяЕдиница В (&МассивСтруктурныхЕдиниц)", ""));
		
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияРасходов.ПрямыеЗатраты Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	УчетЗатрат.Организация КАК Организация,
		|	УчетЗатрат.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
		|	НЕОПРЕДЕЛЕНО КАК Характеристика,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	НЕОПРЕДЕЛЕНО КАК ЗаказПокупателя,
		|	НЕОПРЕДЕЛЕНО КАК ЗаказНаПроизводство,
		|	НЕОПРЕДЕЛЕНО КАК Спецификация,
		|	УчетЗатрат.СчетУчета КАК СчетУчета,
		|	УчетЗатрат.СчетУчета.ТипСчета КАК СчетУчетаТипСчета,
		|	УчетЗатрат.СуммаКонечныйОстаток КАК База
		|ИЗ
		|	РегистрНакопления.Запасы.ОстаткиИОбороты(
		|			&НачДата,
		|			&КонДата,
		|			,
		|			,
		|			Организация = &Организация
		|				И СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
		|				И СчетУчета В (&МассивСчетовУчета)
		|			// ФильтрПоСтруктурнаяЕдиницаОбороты
		|			// ФильтрПоЗаказОбороты
		|	) КАК УчетЗатрат
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УчетЗатрат.Организация,
		|	УчетЗатрат.КоррСтруктурнаяЕдиница,
		|	УчетЗатрат.КоррНоменклатура,
		|	УчетЗатрат.КоррХарактеристика,
		|	УчетЗатрат.КоррПартия,
		|	УчетЗатрат.КоррЗаказПокупателя,
		|	УчетЗатрат.КоррЗаказНаПроизводство,
		|	УчетЗатрат.КоррСпецификация,
		|	УчетЗатрат.КоррСчетУчета,
		|	УчетЗатрат.КоррСчетУчета.ТипСчета,
		|	СУММА(УчетЗатрат.Сумма)
		|ИЗ
		|	РегистрНакопления.Запасы КАК УчетЗатрат
		|ГДЕ
		|	УчетЗатрат.Период МЕЖДУ &НачДата И &КонДата
		|	И УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И УчетЗатрат.Организация = &Организация
		|	И УчетЗатрат.СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
		|	И УчетЗатрат.СчетУчета В(&МассивСчетовУчета)
		|	И УчетЗатрат.ЗатратыНаВыпуск
		|	// ФильтрПоСтруктурнаяЕдиница
		|	// ФильтрПоЗаказ
		|
		|СГРУППИРОВАТЬ ПО
		|	УчетЗатрат.Организация,
		|	УчетЗатрат.КоррСтруктурнаяЕдиница,
		|	УчетЗатрат.КоррНоменклатура,
		|	УчетЗатрат.КоррХарактеристика,
		|	УчетЗатрат.КоррПартия,
		|	УчетЗатрат.КоррЗаказПокупателя,
		|	УчетЗатрат.КоррЗаказНаПроизводство,
		|	УчетЗатрат.КоррСпецификация,
		|	УчетЗатрат.КоррСчетУчета,
		|	УчетЗатрат.КоррСчетУчета.ТипСчета";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоСтруктурнаяЕдиницаОбороты", ?(ЗначениеЗаполнено(ФильтрПоСтруктурнаяЕдиница), "И СтруктурнаяЕдиница В (&МассивСтруктурныхЕдиниц)", ""));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоЗаказОбороты", ?(ЗначениеЗаполнено(ФильтрПоЗаказ), "И ЗаказПокупателя В (&МассивЗаказов)", ""));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоСтруктурнаяЕдиница", ?(ЗначениеЗаполнено(ФильтрПоСтруктурнаяЕдиница), "И УчетЗатрат.КоррСтруктурнаяЕдиница В (&МассивСтруктурныхЕдиниц)", ""));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоЗаказ", ?(ЗначениеЗаполнено(ФильтрПоЗаказ), "И УчетЗатрат.КоррЗаказПокупателя В (&МассивЗаказов)", ""));
		
		Запрос.УстановитьПараметр("МассивСчетовУчета", МассивСчетовУчета);
		
	Иначе
		Возврат ТаблицаРезультата;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачДата"    , ДополнительныеСвойства.ДляПроведения.НачальнаяДатаПериода);
	Запрос.УстановитьПараметр("КонДата"    , ДополнительныеСвойства.ДляПроведения.КонечнаяДатаПериод);
	Запрос.УстановитьПараметр("Организация", ДополнительныеСвойства.ДляПроведения.Организация);
	
	Если ЗначениеЗаполнено(ФильтрПоЗаказ) Тогда
		Если ТипЗнч(ФильтрПоЗаказ) = Тип("Массив") Тогда
			Запрос.УстановитьПараметр("МассивЗаказов", ФильтрПоЗаказ);
		Иначе
			МассивДляОтбора = Новый Массив;
			МассивДляОтбора.Добавить(ФильтрПоЗаказ);
			Запрос.УстановитьПараметр("МассивЗаказов", МассивДляОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФильтрПоСтруктурнаяЕдиница) Тогда
		Если ТипЗнч(ФильтрПоСтруктурнаяЕдиница) = Тип("Массив") Тогда
			Запрос.УстановитьПараметр("МассивСтруктурныхЕдиниц", ФильтрПоСтруктурнаяЕдиница);
		Иначе
			МассивДляОтбора = Новый Массив;
			МассивДляОтбора.Добавить(ФильтрПоСтруктурнаяЕдиница);
			Запрос.УстановитьПараметр("МассивСтруктурныхЕдиниц", МассивДляОтбора);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультата;
	
КонецФункции // СформироватьТаблицуБазыРаспределения()

// Распределяет затраты.
//
// Параметры:
//  Отказ        - Булево - флаг отказа проведения документа.
//
Процедура РаспределитьЗатраты(Отказ, ТаблицаОшибок)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетЗапасовИЗатрат.Организация КАК Организация,
	|	УчетЗапасовИЗатрат.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	УчетЗапасовИЗатрат.СчетУчета КАК СчетУчета,
	|	УчетЗапасовИЗатрат.СчетУчета.ТипСчета КАК СчетУчетаТипСчета,
	|	УчетЗапасовИЗатрат.СчетУчета.СпособРаспределения КАК СчетУчетаСпособРаспределения,
	|	УчетЗапасовИЗатрат.СчетУчета.СчетЗакрытия КАК СчетУчетаСчетЗакрытия,
	|	УчетЗапасовИЗатрат.СчетУчета.СчетЗакрытия.ТипСчета КАК СчетУчетаСчетЗакрытияТипСчета,
	|	УчетЗапасовИЗатрат.Номенклатура КАК Номенклатура,
	|	УчетЗапасовИЗатрат.Характеристика КАК Характеристика,
	|	УчетЗапасовИЗатрат.Партия КАК Партия,
	|	УчетЗапасовИЗатрат.ЗаказПокупателя КАК ЗаказПокупателя,
	|	УчетЗапасовИЗатрат.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	УчетЗапасовИЗатрат.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			&КонДата,
	|			Организация = &Организация
	|				И СчетУчета.СпособРаспределения <> ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияРасходов.НеРаспределять)
	|				И (СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|					ИЛИ СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|						И Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))) КАК УчетЗапасовИЗатрат
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетУчетаСпособРаспределения,
	|	СтруктурнаяЕдиница,
	|	ЗаказПокупателя,
	|	ЗаказНаПроизводство
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	СчетУчетаСпособРаспределения,
	|	СтруктурнаяЕдиница,
	|	ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Организация", ДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("НачДата"    , ДополнительныеСвойства.ДляПроведения.НачальнаяДатаПериода);
	Запрос.УстановитьПараметр("КонДата"    , ДополнительныеСвойства.ДляПроведения.КонечнаяГраницаПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Создадим набор записей регистра накопления Учет запасов и затрат.
	НаборЗаписейЗапасы = РегистрыНакопления.Запасы.СоздатьНаборЗаписей();
	НаборЗаписейЗапасы.Отбор.Регистратор.Установить(ДополнительныеСвойства.ДляПроведения.Ссылка);
	
	// Создадим набор записей регистра накопления Учет доходов и расходов.
	НаборЗаписейУправленческий = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();
	НаборЗаписейУправленческий.Отбор.Регистратор.Установить(Ссылка);
	
	ОбходПоСпособРаспределения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ОбходПоСпособРаспределения.Следующий() Цикл
		
		ОбходПоСтруктурнаяЕдиница = ОбходПоСпособРаспределения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		// Обход по подразделениям.
		Пока ОбходПоСтруктурнаяЕдиница.Следующий() Цикл
			
			ФильтрПоСтруктурнаяЕдиница = ОбходПоСтруктурнаяЕдиница.СтруктурнаяЕдиница;
			ОбходПоЗаказ = ОбходПоСтруктурнаяЕдиница.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			// Обход по заказам.
			Пока ОбходПоЗаказ.Следующий() Цикл
				
				ФильтрПоЗаказ = ОбходПоЗаказ.ЗаказПокупателя;
				
				Если ОбходПоЗаказ.СчетУчетаСпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять Тогда
					Продолжить;
				КонецЕсли;
				
				ОбходПоСчетамУчета = ОбходПоЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				// Обход по счетам затрат.
				Пока ОбходПоСчетамУчета.Следующий() Цикл
					
					// Сформируем таблицу базы распределения.
					ТаблицаБазы = СформироватьТаблицуБазыРаспределения(
						ОбходПоСчетамУчета.СчетУчетаСпособРаспределения,
						ОбходПоСчетамУчета.СчетУчета.СчетаУчета.ВыгрузитьКолонку("СчетУчета"),
						ФильтрПоСтруктурнаяЕдиница,
						ФильтрПоЗаказ);
					
					Если ТаблицаБазы.Количество() = 0 Тогда
						ТаблицаБазы = СформироватьТаблицуБазыРаспределения(
							ОбходПоСчетамУчета.СчетУчетаСпособРаспределения,
							ОбходПоСчетамУчета.СчетУчета.СчетаУчета.ВыгрузитьКолонку("СчетУчета"),
							Неопределено,
							ФильтрПоЗаказ);
					КонецЕсли;
				
					// Проверим таблицу базы распределения.
					Если ТаблицаБазы.Количество() = 0 Тогда
						ОписаниеОшибки = СформироватьОписаниеОшибкиРаспределенияЗатрат(
							ОбходПоСчетамУчета.СчетУчета,
							ОбходПоСчетамУчета.СчетУчетаСпособРаспределения,
							ФильтрПоЗаказ,
							ОбходПоСчетамУчета.Сумма);
						ДобавитьОшибкуВТаблицу(ОписаниеОшибки, "РаспределениеЗатрат", ТаблицаОшибок, ФильтрПоЗаказ);
						Продолжить;
					КонецЕсли;
					
					ВсегоБазаРаспределения = ТаблицаБазы.Итог("База");
					КоличествоНаправлений  = ТаблицаБазы.Количество() - 1;
					
					// Распределяем сумму.
					Если ОбходПоСчетамУчета.Сумма <> 0 Тогда
						
						СуммаКРаспределению = ОбходПоСчетамУчета.Сумма;
						СуммаРаспределили = 0;
					
						Для каждого НаправлениеРаспределения Из ТаблицаБазы Цикл
							
							СуммаЗатрат = ?(СуммаКРаспределению = 0, 0, Окр(НаправлениеРаспределения.База / ВсегоБазаРаспределения * СуммаКРаспределению, 2, 1));
							СуммаРаспределили = СуммаРаспределили + СуммаЗатрат;
							
							// Если это последняя строка - скорректируем сумму в ней на ошибку округления.
							Если ТаблицаБазы.Индекс(НаправлениеРаспределения) = КоличествоНаправлений Тогда
								СуммаЗатрат = СуммаЗатрат + СуммаКРаспределению - СуммаРаспределили;
								СуммаРаспределили = СуммаРаспределили + СуммаЗатрат;
							КонецЕсли;
							
							Если СуммаЗатрат <> 0 Тогда
								
								Если ОбходПоСчетамУчета.СчетУчетаТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты Тогда // косвенные распределяются через счет закрытия
								
									СтрокаДвижения = Новый Структура;
									СтрокаДвижения.Вставить("Организация"             , ОбходПоСчетамУчета.Организация);
									СтрокаДвижения.Вставить("СтруктурнаяЕдиница"      , ОбходПоСчетамУчета.СтруктурнаяЕдиница);
									СтрокаДвижения.Вставить("СчетУчета"               , ОбходПоСчетамУчета.СчетУчета);
									СтрокаДвижения.Вставить("СчетУчетаТипСчета"       , ОбходПоСчетамУчета.СчетУчетаТипСчета);
									СтрокаДвижения.Вставить("Номенклатура"            , ОбходПоСчетамУчета.Номенклатура);
									СтрокаДвижения.Вставить("Характеристика"          , ОбходПоСчетамУчета.Характеристика);
									СтрокаДвижения.Вставить("Партия"                  , ОбходПоСчетамУчета.Партия);
									СтрокаДвижения.Вставить("ЗаказПокупателя"         , ОбходПоСчетамУчета.ЗаказПокупателя);
									СтрокаДвижения.Вставить("ЗаказНаПроизводство"     , ОбходПоСчетамУчета.ЗаказНаПроизводство);
									СтрокаДвижения.Вставить("КоррСтруктурнаяЕдиница"  , НаправлениеРаспределения.СтруктурнаяЕдиница);
									СтрокаДвижения.Вставить("КоррСчетУчета"           , ОбходПоСчетамУчета.СчетУчетаСчетЗакрытия);
									СтрокаДвижения.Вставить("КоррСчетУчетаТипСчета"   , ОбходПоСчетамУчета.СчетУчетаСчетЗакрытияТипСчета);
									СтрокаДвижения.Вставить("КоррНоменклатура"        , Справочники.Номенклатура.ПустаяСсылка());
									СтрокаДвижения.Вставить("КоррХарактеристика"      , Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
									СтрокаДвижения.Вставить("КоррПартия"              , Справочники.ПартииНоменклатуры.ПустаяСсылка());
									СтрокаДвижения.Вставить("КоррЗаказПокупателя"     , Документы.ЗаказПокупателя.ПустаяСсылка());
									СтрокаДвижения.Вставить("КоррЗаказНаПроизводство" , Документы.ЗаказНаПроизводство.ПустаяСсылка());
									СтрокаДвижения.Вставить("ДокументПродажи"         , Неопределено);
									СтрокаДвижения.Вставить("ЗатратыНаВыпуск"         , Ложь);
									СтрокаДвижения.Вставить("Спецификация"            , Справочники.Спецификации.ПустаяСсылка());
									СтрокаДвижения.Вставить("КоррСпецификация"        , Справочники.Спецификации.ПустаяСсылка());
									СтрокаДвижения.Вставить("СтавкаНДС"               , Справочники.СтавкиНДС.ПустаяСсылка());
									
									// Движения по регистру Учет запасов и затрат.
									СформироватьДвиженияПоРегиструУчетаЗатрат(
										НаборЗаписейЗапасы,
										НаборЗаписейУправленческий,
										СтрокаДвижения,
										СуммаЗатрат,
										Истина);
									
									Если ЗначениеЗаполнено(НаправлениеРаспределения.Номенклатура) Тогда
										
										СтрокаДвижения = Новый Структура;
										СтрокаДвижения.Вставить("Организация"             , ОбходПоСчетамУчета.Организация);
										СтрокаДвижения.Вставить("СтруктурнаяЕдиница"      , НаправлениеРаспределения.СтруктурнаяЕдиница);
										СтрокаДвижения.Вставить("СчетУчета"               , ОбходПоСчетамУчета.СчетУчетаСчетЗакрытия);
										СтрокаДвижения.Вставить("СчетУчетаТипСчета"       , ОбходПоСчетамУчета.СчетУчетаСчетЗакрытияТипСчета);
										СтрокаДвижения.Вставить("Номенклатура"            , Справочники.Номенклатура.ПустаяСсылка());
										СтрокаДвижения.Вставить("Характеристика"          , Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
										СтрокаДвижения.Вставить("Партия"                  , Справочники.ПартииНоменклатуры.ПустаяСсылка());
										СтрокаДвижения.Вставить("ЗаказПокупателя"         , Документы.ЗаказПокупателя.ПустаяСсылка());
										СтрокаДвижения.Вставить("ЗаказНаПроизводство"     , Документы.ЗаказНаПроизводство.ПустаяСсылка());
										СтрокаДвижения.Вставить("КоррСтруктурнаяЕдиница"  , НаправлениеРаспределения.СтруктурнаяЕдиница);
										СтрокаДвижения.Вставить("КоррСчетУчета"           , НаправлениеРаспределения.СчетУчета);
										СтрокаДвижения.Вставить("КоррСчетУчетаТипСчета"   , НаправлениеРаспределения.СчетУчетаТипСчета);
										СтрокаДвижения.Вставить("КоррНоменклатура"        , НаправлениеРаспределения.Номенклатура);
										СтрокаДвижения.Вставить("КоррХарактеристика"      , НаправлениеРаспределения.Характеристика);
										СтрокаДвижения.Вставить("КоррПартия"              , НаправлениеРаспределения.Партия);
										СтрокаДвижения.Вставить("КоррЗаказПокупателя"     , НаправлениеРаспределения.ЗаказПокупателя);
										СтрокаДвижения.Вставить("КоррЗаказНаПроизводство" , Документы.ЗаказНаПроизводство.ПустаяСсылка());
										СтрокаДвижения.Вставить("ДокументПродажи"         , Неопределено);
										СтрокаДвижения.Вставить("ЗатратыНаВыпуск"         , Истина);
										СтрокаДвижения.Вставить("Спецификация"            , Справочники.Спецификации.ПустаяСсылка());
										СтрокаДвижения.Вставить("КоррСпецификация"        , НаправлениеРаспределения.Спецификация);
										СтрокаДвижения.Вставить("СтавкаНДС"               , Справочники.СтавкиНДС.ПустаяСсылка());
									
										// Движения по регистру Учет запасов и затрат.
										СформироватьДвиженияПоРегиструУчетаЗатрат(
											НаборЗаписейЗапасы,
											НаборЗаписейУправленческий,
											СтрокаДвижения,
											СуммаЗатрат,
											Истина);
										
									КонецЕсли;
									
								ИначеЕсли ЗначениеЗаполнено(НаправлениеРаспределения.Номенклатура) Тогда // распределение прямых
									
									СтрокаДвижения = Новый Структура;
									СтрокаДвижения.Вставить("Организация"             , ОбходПоСчетамУчета.Организация);
									СтрокаДвижения.Вставить("СтруктурнаяЕдиница"      , ОбходПоСчетамУчета.СтруктурнаяЕдиница);
									СтрокаДвижения.Вставить("СчетУчета"               , ОбходПоСчетамУчета.СчетУчета);
									СтрокаДвижения.Вставить("СчетУчетаТипСчета"       , ОбходПоСчетамУчета.СчетУчетаТипСчета);
									СтрокаДвижения.Вставить("Номенклатура"            , ОбходПоСчетамУчета.Номенклатура);
									СтрокаДвижения.Вставить("Характеристика"          , ОбходПоСчетамУчета.Характеристика);
									СтрокаДвижения.Вставить("Партия"                  , ОбходПоСчетамУчета.Партия);
									СтрокаДвижения.Вставить("ЗаказПокупателя"         , ОбходПоСчетамУчета.ЗаказПокупателя);
									СтрокаДвижения.Вставить("ЗаказНаПроизводство"     , ОбходПоСчетамУчета.ЗаказНаПроизводство);
									СтрокаДвижения.Вставить("КоррСтруктурнаяЕдиница"  , НаправлениеРаспределения.СтруктурнаяЕдиница);
									СтрокаДвижения.Вставить("КоррСчетУчета"           , НаправлениеРаспределения.СчетУчета);
									СтрокаДвижения.Вставить("КоррСчетУчетаТипСчета"   , НаправлениеРаспределения.СчетУчетаТипСчета);
									СтрокаДвижения.Вставить("КоррНоменклатура"        , НаправлениеРаспределения.Номенклатура);
									СтрокаДвижения.Вставить("КоррХарактеристика"      , НаправлениеРаспределения.Характеристика);
									СтрокаДвижения.Вставить("КоррПартия"              , НаправлениеРаспределения.Партия);
									СтрокаДвижения.Вставить("КоррЗаказПокупателя"     , НаправлениеРаспределения.ЗаказПокупателя);
									Если ТаблицаБазы.Колонки.Найти("ЗаказНаПроизводство") <> Неопределено Тогда
										СтрокаДвижения.Вставить("КоррЗаказНаПроизводство" , НаправлениеРаспределения.ЗаказНаПроизводство);
									Иначе
										СтрокаДвижения.Вставить("КоррЗаказНаПроизводство" , Документы.ЗаказНаПроизводство.ПустаяСсылка());
									КонецЕсли; 
									СтрокаДвижения.Вставить("ДокументПродажи"         , Неопределено);
									СтрокаДвижения.Вставить("ЗатратыНаВыпуск"         , Истина);
									СтрокаДвижения.Вставить("Спецификация"            , Справочники.Спецификации.ПустаяСсылка());
									СтрокаДвижения.Вставить("КоррСпецификация"        , НаправлениеРаспределения.Спецификация);
									СтрокаДвижения.Вставить("СтавкаНДС"               , Справочники.СтавкиНДС.ПустаяСсылка());
									
									// Движения по регистру Учет запасов и затрат.
									СформироватьДвиженияПоРегиструУчетаЗатрат(
										НаборЗаписейЗапасы,
										НаборЗаписейУправленческий,
										СтрокаДвижения,
										СуммаЗатрат,
										Истина);
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
						Если СуммаРаспределили = 0 Тогда
							ОписаниеОшибки = СформироватьОписаниеОшибкиРаспределенияЗатрат(
								ОбходПоСчетамУчета.СчетУчета,
								ОбходПоСчетамУчета.СчетУчетаСпособРаспределения,
								ФильтрПоЗаказ,
								ОбходПоСчетамУчета.Сумма);
							ДобавитьОшибкуВТаблицу(ОписаниеОшибки, "РаспределениеЗатрат", ТаблицаОшибок, ФильтрПоЗаказ);
							Продолжить;
						КонецЕсли;
						
					КонецЕсли
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Пишем оставшиеся записи Учет запасов и затрат.
	НаборЗаписейЗапасы.Записать(Ложь);
	
	// Пишем оставшиеся записи управленческий.
	НаборЗаписейУправленческий.Записать(Ложь);
	
КонецПроцедуры // РаспределитьЗатраты()

#КонецОбласти

#Область РасчетФинансовогоРезультата

// Формирует таблицу базы распределения.
//
// Параметры:
//	БазаРаспределения - Перечисления.БазыРаспределенияРасходов
//	МассивСчетовУчета - Массив, содержащий фильтр по счетам учета
//	ФильтрПоСтруктурнаяЕдиница - фильтр по структурным единицам
//	ФильтрПоЗаказ - фильтр по заказам
//
// Возвращаемое значение:
//  ТаблицаЗначений, содержащая базу распределения.
//
Функция СформироватьТаблицуБазыРаспределенияФинансовогоРезультата(БазаРаспределения, ФильтрПоСтруктурнаяЕдиница, ФильтрПоНаправлениеДеятельности, ФильтрПоЗаказ, ФильтрПоПроект = Неопределено) Экспорт
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	
	Если БазаРаспределения = Перечисления.БазыРаспределенияРасходов.ВыручкаОтПродаж
	 ИЛИ БазаРаспределения = Перечисления.БазыРаспределенияРасходов.СебестоимостьПродаж
	 ИЛИ БазаРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж
	 ИЛИ БазаРаспределения = Перечисления.БазыРаспределенияРасходов.ВаловаяПрибыль Тогда
		
		Если БазаРаспределения = Перечисления.БазыРаспределенияРасходов.ВыручкаОтПродаж Тогда
			ТекстБазы = "СУММА(ПродажиОбороты.СуммаОборот)";
		ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияРасходов.СебестоимостьПродаж Тогда 
			ТекстБазы = "СУММА(ПродажиОбороты.СебестоимостьОборот)";
		ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияРасходов.ВаловаяПрибыль Тогда 
			ТекстБазы = "СУММА(ПродажиОбороты.СуммаОборот - ПродажиОбороты.СебестоимостьОборот)";
		Иначе
			ТекстБазы = "СУММА(ПродажиОбороты.КоличествоОборот)";
		КонецЕсли; 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПродажиОбороты.Организация КАК Организация,
		|	ПродажиОбороты.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ПродажиОбороты.ЗаказПокупателя КАК Заказ,
		|	ПродажиОбороты.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж КАК СчетУчетаВыручкиОтПродаж,
		|	ПродажиОбороты.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж КАК СчетУчетаСебестоимостиПродаж,
		|	ПродажиОбороты.Номенклатура.НаправлениеДеятельности.СчетУчетаПрибыли КАК СчетУчетаПрибыли,
		|	// ТекстБазы КАК База,
		|	ПродажиОбороты.Подразделение КАК СтруктурнаяЕдиница,
		|	ПродажиОбороты.Проект КАК Проект
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(
		|			&НачДата,
		|			&КонДата,
		|			Авто,
		|			Организация = &Организация
		|				// ФильтрПоСтруктурнаяЕдиница
		|				// ФильтрПоПроект
		|				// ФильтрПоНаправлениеДеятельности
		|				// ФильтрПоЗаказ
		|			) КАК ПродажиОбороты
		|ГДЕ
		|	ПродажиОбороты.Номенклатура.НаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее)
		|СГРУППИРОВАТЬ ПО
		|	ПродажиОбороты.Организация,
		|	ПродажиОбороты.Номенклатура.НаправлениеДеятельности,
		|	ПродажиОбороты.ЗаказПокупателя,
		|	ПродажиОбороты.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж,
		|	ПродажиОбороты.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж,
		|	ПродажиОбороты.Номенклатура.НаправлениеДеятельности.СчетУчетаПрибыли,
		|	ПродажиОбороты.Подразделение,
		|	ПродажиОбороты.Проект";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоСтруктурнаяЕдиница", ?(ЗначениеЗаполнено(ФильтрПоСтруктурнаяЕдиница), "И Подразделение В (&МассивСтруктурныхЕдиниц)", ""));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоПроект", ?(ЗначениеЗаполнено(ФильтрПоПроект), "И Проект В (&МассивПроектов)", ""));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоНаправлениеДеятельности", ?(ЗначениеЗаполнено(ФильтрПоНаправлениеДеятельности), "И Номенклатура.НаправлениеДеятельности В (&МассивНаправленийДеятельности)", ""));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоЗаказ", ?(ЗначениеЗаполнено(ФильтрПоЗаказ), "И ЗаказПокупателя В (&МассивЗаказов)", ""));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ТекстБазы", ТекстБазы);
		
	Иначе
		Возврат ТаблицаРезультата;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачДата"    , ДополнительныеСвойства.ДляПроведения.НачальнаяДатаПериода);
	Запрос.УстановитьПараметр("КонДата"    , ДополнительныеСвойства.ДляПроведения.КонечнаяДатаПериод);
	Запрос.УстановитьПараметр("Организация", ДополнительныеСвойства.ДляПроведения.Организация);
		
	Если ЗначениеЗаполнено(ФильтрПоЗаказ) Тогда
		Если ТипЗнч(ФильтрПоЗаказ) = Тип("Массив") Тогда
			Запрос.УстановитьПараметр("МассивЗаказов", ФильтрПоЗаказ);
		Иначе
			МассивДляОтбора = Новый Массив;
			МассивДляОтбора.Добавить(ФильтрПоЗаказ);
			Запрос.УстановитьПараметр("МассивЗаказов", МассивДляОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФильтрПоСтруктурнаяЕдиница) Тогда
		Если ТипЗнч(ФильтрПоСтруктурнаяЕдиница) = Тип("Массив") Тогда
			Запрос.УстановитьПараметр("МассивСтруктурныхЕдиниц", ФильтрПоСтруктурнаяЕдиница);
		Иначе
			МассивДляОтбора = Новый Массив;
			МассивДляОтбора.Добавить(ФильтрПоСтруктурнаяЕдиница);
			Запрос.УстановитьПараметр("МассивСтруктурныхЕдиниц", МассивДляОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФильтрПоПроект) Тогда
		Если ТипЗнч(ФильтрПоПроект) = Тип("Массив") Тогда
			Запрос.УстановитьПараметр("МассивПроектов", ФильтрПоПроект);
		Иначе
			МассивДляОтбора = Новый Массив;
			МассивДляОтбора.Добавить(ФильтрПоПроект);
			Запрос.УстановитьПараметр("МассивПроектов", МассивДляОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФильтрПоНаправлениеДеятельности) Тогда
		Если ТипЗнч(ФильтрПоНаправлениеДеятельности) = Тип("Массив") Тогда
			Запрос.УстановитьПараметр("МассивНаправленийДеятельности", ФильтрПоНаправлениеДеятельности);
		Иначе
			МассивДляОтбора = Новый Массив;
			МассивДляОтбора.Добавить(ФильтрПоНаправлениеДеятельности);
			Запрос.УстановитьПараметр("МассивНаправленийДеятельности", ФильтрПоНаправлениеДеятельности);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультата;
	
КонецФункции // СформироватьТаблицуБазыРаспределения()

// Рассчитывает финансовый результат.
//
// Параметры:
//  Отказ        - Булево - флаг отказа проведения документа.
//
Процедура РассчитатьФинансовыйРезультат(Отказ, ТаблицаОшибок)
	
	// 1) Прямое распределение.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоходыИРасходыОбороты.Организация КАК Организация,
	|	ДоходыИРасходыОбороты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ДоходыИРасходыОбороты.Проект КАК Проект,
	|	ДоходыИРасходыОбороты.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДоходыИРасходыОбороты.НаправлениеДеятельности.СчетУчетаПрибыли КАК СчетУчетаПрибыли,
	|	ДоходыИРасходыОбороты.ЗаказПокупателя КАК Заказ,
	|	ДоходыИРасходыОбороты.СчетУчета КАК СчетУчета,
	|	ДоходыИРасходыОбороты.Аналитика КАК Аналитика,
	|	СУММА(ДоходыИРасходыОбороты.СуммаДоходовОборот) КАК СуммаДоходов,
	|	СУММА(ДоходыИРасходыОбороты.СуммаРасходовОборот) КАК СуммаРасходов
	|ИЗ
	|	РегистрНакопления.ДоходыИРасходы.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			Авто,
	|			Организация = &Организация
	|				И (СчетУчета.СпособРаспределения = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияРасходов.НеРаспределять)
	|					ИЛИ (НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж = СчетУчета
	|						ИЛИ НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж = СчетУчета)
	|						И НаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее))) КАК ДоходыИРасходыОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыИРасходыОбороты.Организация,
	|	ДоходыИРасходыОбороты.СтруктурнаяЕдиница,
	|	ДоходыИРасходыОбороты.Проект,
	|	ДоходыИРасходыОбороты.НаправлениеДеятельности,
	|	ДоходыИРасходыОбороты.НаправлениеДеятельности.СчетУчетаПрибыли,
	|	ДоходыИРасходыОбороты.ЗаказПокупателя,
	|	ДоходыИРасходыОбороты.СчетУчета,
	|	ДоходыИРасходыОбороты.Аналитика";
	
	Запрос.УстановитьПараметр("Организация", ДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("НачДата"    , ДополнительныеСвойства.ДляПроведения.НачальнаяДатаПериода);
	Запрос.УстановитьПараметр("КонДата"    , ДополнительныеСвойства.ДляПроведения.КонечнаяГраницаПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда

		// Создадим набор записей регистра накопления Финансовый результат.
		НаборЗаписейФинансовыйРезультат = РегистрыНакопления.ФинансовыйРезультат.СоздатьНаборЗаписей();
		НаборЗаписейФинансовыйРезультат.Отбор.Регистратор.Установить(ДополнительныеСвойства.ДляПроведения.Ссылка);
		
		// Создадим набор записей регистра бухгалтерии "Управленческий".
		НаборЗаписейУправленческий = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();
		НаборЗаписейУправленческий.Отбор.Регистратор.Установить(Ссылка);
		
	КонецЕсли;
	
	ВыборкаРезультатЗапроса = РезультатЗапроса.Выбрать();

	Пока ВыборкаРезультатЗапроса.Следующий() Цикл
		
		// Движения по регистру Финансовый результат.
		НоваяСтрока = НаборЗаписейФинансовыйРезультат.Добавить();
		НоваяСтрока.Период = Дата;
		НоваяСтрока.Регистратор = Ссылка;
		НоваяСтрока.Организация = ВыборкаРезультатЗапроса.Организация;
		НоваяСтрока.СтруктурнаяЕдиница = ВыборкаРезультатЗапроса.СтруктурнаяЕдиница;
		НоваяСтрока.Проект = ВыборкаРезультатЗапроса.Проект;
		НоваяСтрока.НаправлениеДеятельности = ?(ЗначениеЗаполнено(ВыборкаРезультатЗапроса.НаправлениеДеятельности), 
			ВыборкаРезультатЗапроса.НаправлениеДеятельности, Справочники.НаправленияДеятельности.ОсновноеНаправление);
		НоваяСтрока.ЗаказПокупателя = ВыборкаРезультатЗапроса.Заказ;
		НоваяСтрока.СчетУчета = ВыборкаРезультатЗапроса.СчетУчета;
		НоваяСтрока.Аналитика = ВыборкаРезультатЗапроса.Аналитика;
		
		Если ВыборкаРезультатЗапроса.СуммаДоходов <> 0 Тогда
			НоваяСтрока.СуммаДоходов = ВыборкаРезультатЗапроса.СуммаДоходов;
		ИначеЕсли ВыборкаРезультатЗапроса.СуммаРасходов <> 0 Тогда
			НоваяСтрока.СуммаРасходов = ВыборкаРезультатЗапроса.СуммаРасходов;
		КонецЕсли;
		
		НоваяСтрока.СодержаниеПроводки = "Финансовый результат";
		
		// Движения по регистру Управленческий.
		НоваяСтрока = НаборЗаписейУправленческий.Добавить();
		НоваяСтрока.Период = Дата;
		НоваяСтрока.Регистратор = Ссылка;
		НоваяСтрока.Организация = ВыборкаРезультатЗапроса.Организация;
		НоваяСтрока.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
		
		Если ВыборкаРезультатЗапроса.СуммаДоходов <> 0 Тогда
			НоваяСтрока.СчетДт = ВыборкаРезультатЗапроса.СчетУчета;
			НоваяСтрока.СчетКт = ?(
				ЗначениеЗаполнено(ВыборкаРезультатЗапроса.НаправлениеДеятельности),
				ВыборкаРезультатЗапроса.СчетУчетаПрибыли,
				Справочники.НаправленияДеятельности.ОсновноеНаправление.СчетУчетаПрибыли);
			НоваяСтрока.Сумма = ВыборкаРезультатЗапроса.СуммаДоходов; 
		ИначеЕсли ВыборкаРезультатЗапроса.СуммаРасходов <> 0 Тогда
			НоваяСтрока.СчетДт = ?(
				ЗначениеЗаполнено(ВыборкаРезультатЗапроса.НаправлениеДеятельности),
				ВыборкаРезультатЗапроса.СчетУчетаПрибыли,
				Справочники.НаправленияДеятельности.ОсновноеНаправление.СчетУчетаПрибыли);
			НоваяСтрока.СчетКт = ВыборкаРезультатЗапроса.СчетУчета;
			НоваяСтрока.Сумма = ВыборкаРезультатЗапроса.СуммаРасходов;
		КонецЕсли;
		
		НоваяСтрока.Содержание = "Финансовый результат";
		
	КонецЦикла;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		// Пишем оставшиеся записи Финансовый результат.
		НаборЗаписейФинансовыйРезультат.Записать(Ложь);
		
		// Пишем оставшиеся записи Управленческий.
		НаборЗаписейУправленческий.Записать(Ложь);
		
	КонецЕсли;
	
	// 2) Распределение по базе распределения.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоходыИРасходыОбороты.Организация КАК Организация,
	|	ДоходыИРасходыОбороты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ДоходыИРасходыОбороты.Проект КАК Проект,
	|	ДоходыИРасходыОбороты.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДоходыИРасходыОбороты.НаправлениеДеятельности.СчетУчетаПрибыли КАК СчетУчетаПрибыли,
	|	ДоходыИРасходыОбороты.ЗаказПокупателя КАК Заказ,
	|	ДоходыИРасходыОбороты.СчетУчета КАК СчетУчета,
	|	ДоходыИРасходыОбороты.Аналитика КАК Аналитика,
	|	ДоходыИРасходыОбороты.СчетУчета.СпособРаспределения КАК СчетУчетаСпособРаспределения,
	|	СУММА(ДоходыИРасходыОбороты.СуммаДоходовОборот) КАК СуммаДоходов,
	|	СУММА(ДоходыИРасходыОбороты.СуммаРасходовОборот) КАК СуммаРасходов
	|ИЗ
	|	РегистрНакопления.ДоходыИРасходы.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			Авто,
	|			Организация = &Организация
	|				И СчетУчета.СпособРаспределения <> ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияРасходов.НеРаспределять)
	|				И (НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж <> СчетУчета
	|						И НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж <> СчетУчета
	|					ИЛИ НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее)
	|					ИЛИ НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК ДоходыИРасходыОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыИРасходыОбороты.Организация,
	|	ДоходыИРасходыОбороты.СтруктурнаяЕдиница,
	|	ДоходыИРасходыОбороты.Проект,
	|	ДоходыИРасходыОбороты.НаправлениеДеятельности,
	|	ДоходыИРасходыОбороты.НаправлениеДеятельности.СчетУчетаПрибыли,
	|	ДоходыИРасходыОбороты.ЗаказПокупателя,
	|	ДоходыИРасходыОбороты.СчетУчета,
	|	ДоходыИРасходыОбороты.Аналитика,
	|	ДоходыИРасходыОбороты.СчетУчета.СпособРаспределения
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетУчетаСпособРаспределения,
	|	Проект,
	|	СтруктурнаяЕдиница,
	|	НаправлениеДеятельности,
	|	Заказ
	|ИТОГИ
	|	СУММА(СуммаДоходов),
	|	СУММА(СуммаРасходов)
	|ПО
	|	СчетУчетаСпособРаспределения,
	|	Проект,
	|	СтруктурнаяЕдиница,
	|	НаправлениеДеятельности,
	|	Заказ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		// Создадим набор записей регистра накопления Учет запасов и затрат.
		НаборЗаписейФинансовыйРезультат = РегистрыНакопления.ФинансовыйРезультат.СоздатьНаборЗаписей();
		НаборЗаписейФинансовыйРезультат.Отбор.Регистратор.Установить(ДополнительныеСвойства.ДляПроведения.Ссылка);
		
		// Создадим набор записей регистра накопления Учет доходов и расходов.
		НаборЗаписейУправленческий = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();
		НаборЗаписейУправленческий.Отбор.Регистратор.Установить(Ссылка);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ОбходПоСпособРаспределения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Обход по способам распределения.
	Пока ОбходПоСпособРаспределения.Следующий() Цикл
		
		ОбходПоПроектам = ОбходПоСпособРаспределения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		// Обход по проектам.
		Пока ОбходПоПроектам.Следующий() Цикл
			
			ФильтрПоПроект = ОбходПоПроектам.Проект;
			
			ОбходПоСтруктурнаяЕдиница = ОбходПоПроектам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			// Обход по подразделениям.
			Пока ОбходПоСтруктурнаяЕдиница.Следующий() Цикл
				
				ФильтрПоСтруктурнаяЕдиница = ОбходПоСтруктурнаяЕдиница.СтруктурнаяЕдиница;
				
				ОбходПоНаправлениеДеятельности = ОбходПоСтруктурнаяЕдиница.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				// Обход по направлениям деятельности.
				Пока ОбходПоНаправлениеДеятельности.Следующий() Цикл
					
					ФильтрПоНаправлениеДеятельности = ОбходПоНаправлениеДеятельности.НаправлениеДеятельности;
					
					ОбходПоЗаказ = ОбходПоНаправлениеДеятельности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					// Обход по заказам.
					Пока ОбходПоЗаказ.Следующий() Цикл
						
						ФильтрПоЗаказ = ОбходПоЗаказ.Заказ;
						
						Если ОбходПоЗаказ.СчетУчетаСпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять Тогда
							Продолжить;
						КонецЕсли;
						
						// Сформируем таблицу базы распределения.
						ТаблицаБазыПоСтруктурнойЕдинице = СформироватьТаблицуБазыРаспределенияФинансовогоРезультата(
							ОбходПоЗаказ.СчетУчетаСпособРаспределения,
							ФильтрПоСтруктурнаяЕдиница,
							Неопределено,
							Неопределено,
							Неопределено);
						
						Если ТаблицаБазыПоСтруктурнойЕдинице.Количество() > 0 Тогда
							
							ТаблицаБазы = СформироватьТаблицуБазыРаспределенияФинансовогоРезультата(
								ОбходПоЗаказ.СчетУчетаСпособРаспределения,
								ФильтрПоСтруктурнаяЕдиница,
								ФильтрПоНаправлениеДеятельности,
								ФильтрПоЗаказ,
								ФильтрПоПроект);
							
							Если ТаблицаБазы.Количество() = 0 Тогда
								ТаблицаБазы = СформироватьТаблицуБазыРаспределенияФинансовогоРезультата(
									ОбходПоЗаказ.СчетУчетаСпособРаспределения,
									ФильтрПоСтруктурнаяЕдиница,
									ФильтрПоНаправлениеДеятельности,
									Неопределено,
									ФильтрПоПроект);
							КонецЕсли;
							
							Если ТаблицаБазы.Количество() = 0 Тогда
								ТаблицаБазы = СформироватьТаблицуБазыРаспределенияФинансовогоРезультата(
									ОбходПоЗаказ.СчетУчетаСпособРаспределения,
									ФильтрПоСтруктурнаяЕдиница,
									Неопределено,
									Неопределено,
									ФильтрПоПроект);
							КонецЕсли;
							
							Если ТаблицаБазы.Количество() = 0 Тогда
								ТаблицаБазы = ТаблицаБазыПоСтруктурнойЕдинице;
							КонецЕсли;
							
						Иначе
							
							ТаблицаБазы = СформироватьТаблицуБазыРаспределенияФинансовогоРезультата(
								ОбходПоЗаказ.СчетУчетаСпособРаспределения,
								Неопределено,
								ФильтрПоНаправлениеДеятельности,
								ФильтрПоЗаказ,
								ФильтрПоПроект);
							
							Если ТаблицаБазы.Количество() = 0 Тогда
								ТаблицаБазы = СформироватьТаблицуБазыРаспределенияФинансовогоРезультата(
									ОбходПоЗаказ.СчетУчетаСпособРаспределения,
									Неопределено,
									ФильтрПоНаправлениеДеятельности,
									Неопределено,
									ФильтрПоПроект);
							КонецЕсли;
							
							Если ТаблицаБазы.Количество() = 0 Тогда
								ТаблицаБазы = СформироватьТаблицуБазыРаспределенияФинансовогоРезультата(
									ОбходПоЗаказ.СчетУчетаСпособРаспределения,
									Неопределено,
									Неопределено,
									Неопределено,
									ФильтрПоПроект);
							КонецЕсли;
							
							Если ТаблицаБазы.Количество() = 0 Тогда
								ТаблицаБазы = СформироватьТаблицуБазыРаспределенияФинансовогоРезультата(
									ОбходПоЗаказ.СчетУчетаСпособРаспределения,
									Неопределено,
									Неопределено,
									Неопределено,
									Неопределено);
							КонецЕсли;
						
						КонецЕсли;
					
					Если ТаблицаБазы.Количество() > 0 Тогда
						ВсегоБазаРаспределения = ТаблицаБазы.Итог("База");
						КоличествоНаправлений  = ТаблицаБазы.Количество() - 1;
					Иначе
						ВсегоБазаРаспределения = 0;
						КоличествоНаправлений  = 0;
					КонецЕсли;
					
					ОбходПоСчетамУчета = ОбходПоЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					// Обход по счетам затрат.
					Пока ОбходПоСчетамУчета.Следующий() Цикл
						
						Если ТаблицаБазы.Количество() = 0
						 ИЛИ ВсегоБазаРаспределения = 0 Тогда
							ТаблицаБазы = Новый ТаблицаЗначений;
							ТаблицаБазы.Колонки.Добавить("Организация");
							ТаблицаБазы.Колонки.Добавить("СтруктурнаяЕдиница");
							ТаблицаБазы.Колонки.Добавить("Проект");
							ТаблицаБазы.Колонки.Добавить("НаправлениеДеятельности");
							ТаблицаБазы.Колонки.Добавить("Заказ");
							ТаблицаБазы.Колонки.Добавить("СчетУчетаВыручкиОтПродаж");
							ТаблицаБазы.Колонки.Добавить("СчетУчетаСебестоимостиПродаж");
							ТаблицаБазы.Колонки.Добавить("СчетУчетаПрибыли");
							ТаблицаБазы.Колонки.Добавить("База");
							СтрокаТаблицы = ТаблицаБазы.Добавить();
							СтрокаТаблицы.Организация = ОбходПоСчетамУчета.Организация;
							СтрокаТаблицы.СтруктурнаяЕдиница = ОбходПоСчетамУчета.СтруктурнаяЕдиница;
							СтрокаТаблицы.Проект = ОбходПоСчетамУчета.Проект;
							СтрокаТаблицы.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
							СтрокаТаблицы.Заказ = ОбходПоСчетамУчета.Заказ;
							СтрокаТаблицы.СчетУчетаВыручкиОтПродаж = ОбходПоСчетамУчета.СчетУчета;
							СтрокаТаблицы.СчетУчетаСебестоимостиПродаж = ОбходПоСчетамУчета.СчетУчета;
							СтрокаТаблицы.СчетУчетаПрибыли = Справочники.НаправленияДеятельности.ОсновноеНаправление.СчетУчетаПрибыли;
							СтрокаТаблицы.База = 1;
							ВсегоБазаРаспределения = 1;
						КонецЕсли;
						
						// Распределяем сумму.
						Если ОбходПоСчетамУчета.СуммаДоходов <> 0 
						 ИЛИ ОбходПоСчетамУчета.СуммаРасходов <> 0 Тогда
							
							Если ОбходПоСчетамУчета.СуммаДоходов <> 0 Тогда
								СуммаКРаспределению = ОбходПоСчетамУчета.СуммаДоходов;
							ИначеЕсли ОбходПоСчетамУчета.СуммаРасходов <> 0 Тогда
								СуммаКРаспределению = ОбходПоСчетамУчета.СуммаРасходов;
							КонецЕсли;
							
							СуммаРаспределили = 0;
							
							Для каждого НаправлениеРаспределения Из ТаблицаБазы Цикл
								
								СуммаЗатрат = ?(СуммаКРаспределению = 0, 0, Окр(НаправлениеРаспределения.База / ВсегоБазаРаспределения * СуммаКРаспределению, 2, 1));
								СуммаРаспределили = СуммаРаспределили + СуммаЗатрат;
								
								// Если это последняя строка - скорректируем сумму в ней на ошибку округления.
								Если ТаблицаБазы.Индекс(НаправлениеРаспределения) = КоличествоНаправлений Тогда
									СуммаЗатрат = СуммаЗатрат + СуммаКРаспределению - СуммаРаспределили;
									СуммаРаспределили = СуммаРаспределили + СуммаЗатрат;
								КонецЕсли;
								
								Если СуммаЗатрат <> 0 Тогда
									
									// Движения по регистру Финансовый результат.
									НоваяСтрока	= НаборЗаписейФинансовыйРезультат.Добавить();
									НоваяСтрока.Период = Дата;
									НоваяСтрока.Регистратор	= Ссылка;
									НоваяСтрока.Организация	= НаправлениеРаспределения.Организация;
									НоваяСтрока.СтруктурнаяЕдиница = НаправлениеРаспределения.СтруктурнаяЕдиница;
									НоваяСтрока.Проект = НаправлениеРаспределения.Проект;
									НоваяСтрока.НаправлениеДеятельности	= НаправлениеРаспределения.НаправлениеДеятельности;
									НоваяСтрока.ЗаказПокупателя	= НаправлениеРаспределения.Заказ;
									
									НоваяСтрока.СчетУчета = ОбходПоСчетамУчета.СчетУчета;
									НоваяСтрока.Аналитика = ОбходПоСчетамУчета.Аналитика;
									Если ОбходПоСчетамУчета.СуммаДоходов <> 0 Тогда
										НоваяСтрока.СуммаДоходов = СуммаЗатрат;
									ИначеЕсли ОбходПоСчетамУчета.СуммаРасходов <> 0 Тогда
										НоваяСтрока.СуммаРасходов = СуммаЗатрат;
									КонецЕсли;
									
									НоваяСтрока.СодержаниеПроводки = "Финансовый результат";
									
									// Движения по регистру Управленческий.
									НоваяСтрока = НаборЗаписейУправленческий.Добавить();
									НоваяСтрока.Период = Дата;
									НоваяСтрока.Регистратор = Ссылка;
									НоваяСтрока.Организация = НаправлениеРаспределения.Организация;
									НоваяСтрока.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
									
									Если ОбходПоСчетамУчета.СуммаДоходов <> 0 Тогда
										НоваяСтрока.СчетДт = ОбходПоСчетамУчета.СчетУчета;
										НоваяСтрока.СчетКт = НаправлениеРаспределения.СчетУчетаПрибыли;
										НоваяСтрока.Сумма = СуммаЗатрат; 
									ИначеЕсли ОбходПоСчетамУчета.СуммаРасходов <> 0 Тогда
										НоваяСтрока.СчетДт = НаправлениеРаспределения.СчетУчетаПрибыли;
										НоваяСтрока.СчетКт = ОбходПоСчетамУчета.СчетУчета;
										НоваяСтрока.Сумма = СуммаЗатрат;
									КонецЕсли;
									
									НоваяСтрока.Содержание = "Финансовый результат";
									
								КонецЕсли;
								
							КонецЦикла;
							
							Если СуммаРаспределили = 0 Тогда
								
								ОписаниеОшибки = СформироватьОписаниеОшибкиРаспределенияРасходов(
									ОбходПоСчетамУчета.СчетУчета,
									ОбходПоЗаказ.СчетУчетаСпособРаспределения,
									?(ОбходПоСчетамУчета.СуммаДоходов <> 0,
										ОбходПоСчетамУчета.СуммаДоходов,
										ОбходПоСчетамУчета.СуммаРасходов));
								ДобавитьОшибкуВТаблицу(ОписаниеОшибки, "РасчетФинансовогоРезультата", ТаблицаОшибок);
								Продолжить;
								
							КонецЕсли;
							
						КонецЕсли
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Пишем Финансовый результат.
	НаборЗаписейФинансовыйРезультат.Записать(Ложь);
	НаборЗаписейФинансовыйРезультат.Очистить();
	
	// Пишем Управленческий.
	НаборЗаписейУправленческий.Записать(Ложь);
	НаборЗаписейУправленческий.Очистить();
	
КонецПроцедуры // РассчитатьФинансовыйРезультат()

#КонецОбласти

#Область РасчетСебестоимостиВРозницеСуммовойУчет

Процедура РассчитатьСебестоимостьВРозницеСуммовойУчет(Отказ, ТаблицаОшибок)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНач", ДополнительныеСвойства.ДляПроведения.НачальнаяДатаПериода);
	Запрос.УстановитьПараметр("ДатаКон", ДополнительныеСвойства.ДляПроведения.КонечнаяДатаПериод);
	Запрос.УстановитьПараметр("Организация", ДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммовойУчетВРозницеОбороты.Организация КАК Организация,
	|	СуммовойУчетВРозницеОбороты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СуммовойУчетВРозницеОбороты.Валюта КАК Валюта,
	|	СуммовойУчетВРозницеОбороты.СуммаВалПриход КАК СуммаВалПриход,
	|	СуммовойУчетВРозницеОбороты.СуммаВалРасход КАК СуммаВалРасход,
	|	СуммовойУчетВРозницеОбороты.СебестоимостьПриход КАК СебестоимостьПриход,
	|	СуммовойУчетВРозницеОбороты.СебестоимостьРасход КАК СебестоимостьРасход,
	|	ВЫБОР
	|		КОГДА СуммовойУчетВРозницеОбороты.СуммаВалПриход <> 0
	|			ТОГДА (ВЫРАЗИТЬ(СуммовойУчетВРозницеОбороты.СуммаВалРасход * СуммовойУчетВРозницеОбороты.СебестоимостьПриход / СуммовойУчетВРозницеОбороты.СуммаВалПриход КАК ЧИСЛО(15, 2))) - СуммовойУчетВРозницеОбороты.СебестоимостьРасход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОбщаяСуммаКорректировки
	|ПОМЕСТИТЬ ВременнаяТаблицаСуммаКорректировки
	|ИЗ
	|	РегистрНакопления.СуммовойУчетВРознице.Обороты(, &ДатаКон, , Организация = &Организация) КАК СуммовойУчетВРозницеОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммовойУчетВРознице.Организация КАК Организация,
	|	СуммовойУчетВРознице.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СуммовойУчетВРознице.Валюта КАК Валюта,
	|	СУММА(СуммовойУчетВРознице.Себестоимость) КАК СебестоимостьРасход
	|ПОМЕСТИТЬ ВременнаяТаблицаОбщаяСебестоимостьРасход
	|ИЗ
	|	РегистрНакопления.СуммовойУчетВРознице КАК СуммовойУчетВРознице
	|ГДЕ
	|	СуммовойУчетВРознице.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И СуммовойУчетВРознице.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И СуммовойУчетВРознице.Себестоимость <> 0
	|	И СуммовойУчетВРознице.Организация = &Организация
	|	И СуммовойУчетВРознице.ДокументПродажи <> ЗНАЧЕНИЕ(Документ.ПоступлениеВКассу.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммовойУчетВРознице.Организация,
	|	СуммовойУчетВРознице.СтруктурнаяЕдиница,
	|	СуммовойУчетВРознице.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммовойУчетВРознице.Организация КАК Организация,
	|	СуммовойУчетВРознице.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СуммовойУчетВРознице.Валюта КАК Валюта,
	|	СуммовойУчетВРознице.ДокументПродажи КАК ДокументПродажи,
	|	СуммовойУчетВРознице.ДокументПродажи.Подразделение КАК ДокументПродажиПодразделение,
	|	СуммовойУчетВРознице.ДокументПродажи.СтруктурнаяЕдиница.РозничныйВидЦен.ВалютаЦены КАК ДокументПродажиСтруктурнаяЕдиницаРозничныйВидЦенВалютаЦены,
	|	СуммовойУчетВРознице.ДокументПродажи.НаправлениеДеятельности КАК ДокументПродажиНаправлениеДеятельности,
	|	СуммовойУчетВРознице.ДокументПродажи.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж КАК ДокументПродажиНаправлениеДеятельностиСчетУчетаСебестоимостиПродаж,
	|	СуммовойУчетВРознице.ДокументПродажи.СтруктурнаяЕдиница.СчетУчетаВРознице КАК ДокументПродажиСтруктурнаяЕдиницаСчетУчетаВРознице,
	|	СуммовойУчетВРознице.ДокументПродажи.СтруктурнаяЕдиница.СчетУчетаНаценки КАК ДокументПродажиСтруктурнаяЕдиницаСчетУчетаНаценки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВременнаяТаблицаОбщаяСебестоимостьРасход.СебестоимостьРасход, 0) <> 0
	|			ТОГДА ВЫРАЗИТЬ(СуммовойУчетВРознице.Себестоимость / ВременнаяТаблицаОбщаяСебестоимостьРасход.СебестоимостьРасход * ВременнаяТаблицаСуммаКорректировки.ОбщаяСуммаКорректировки КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКорректировки
	|ИЗ
	|	РегистрНакопления.СуммовойУчетВРознице КАК СуммовойУчетВРознице
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСуммаКорректировки КАК ВременнаяТаблицаСуммаКорректировки
	|		ПО СуммовойУчетВРознице.Организация = ВременнаяТаблицаСуммаКорректировки.Организация
	|			И СуммовойУчетВРознице.СтруктурнаяЕдиница = ВременнаяТаблицаСуммаКорректировки.СтруктурнаяЕдиница
	|			И СуммовойУчетВРознице.Валюта = ВременнаяТаблицаСуммаКорректировки.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОбщаяСебестоимостьРасход КАК ВременнаяТаблицаОбщаяСебестоимостьРасход
	|		ПО СуммовойУчетВРознице.Организация = ВременнаяТаблицаОбщаяСебестоимостьРасход.Организация
	|			И СуммовойУчетВРознице.СтруктурнаяЕдиница = ВременнаяТаблицаОбщаяСебестоимостьРасход.СтруктурнаяЕдиница
	|			И СуммовойУчетВРознице.Валюта = ВременнаяТаблицаОбщаяСебестоимостьРасход.Валюта
	|ГДЕ
	|	СуммовойУчетВРознице.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И СуммовойУчетВРознице.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И СуммовойУчетВРознице.Себестоимость <> 0
	|	И СуммовойУчетВРознице.Организация = &Организация
	|	И СуммовойУчетВРознице.ДокументПродажи <> ЗНАЧЕНИЕ(Документ.ПоступлениеВКассу.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяТаблицаСуммаКорректировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяТаблицаОбщаяСебестоимостьРасход";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[2].Выбрать();
	
	// Создадим набор записей регистра накопления СуммовойУчетВРознице.
	НаборЗаписейСуммовойУчетВРознице = РегистрыНакопления.СуммовойУчетВРознице.СоздатьНаборЗаписей();
	НаборЗаписейСуммовойУчетВРознице.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления УчетДоходовИРасходов.
	НаборЗаписейДоходыИРасходы = РегистрыНакопления.ДоходыИРасходы.СоздатьНаборЗаписей();
	НаборЗаписейДоходыИРасходы.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления Управленческий.
	НаборЗаписейУправленческий = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();
	НаборЗаписейУправленческий.Отбор.Регистратор.Установить(Ссылка);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Окр(ВыборкаДетальныеЗаписи.СуммаКорректировки, 2) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Движения по регистру СуммовойУчетВРознице.
		НоваяСтрока = НаборЗаписейСуммовойУчетВРознице.Добавить();
		НоваяСтрока.Период = Дата;
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
		НоваяСтрока.Регистратор = Ссылка;
		НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
		НоваяСтрока.СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;
		НоваяСтрока.Валюта = ВыборкаДетальныеЗаписи.ДокументПродажиСтруктурнаяЕдиницаРозничныйВидЦенВалютаЦены;
		НоваяСтрока.СодержаниеПроводки = НСтр("ru = 'Себестоимость'");
		НоваяСтрока.Себестоимость = ВыборкаДетальныеЗаписи.СуммаКорректировки;
		
		// Движения по регистру ДоходыИРасходы.
		НоваяСтрока = НаборЗаписейДоходыИРасходы.Добавить();
		НоваяСтрока.Период = Дата;
		НоваяСтрока.Регистратор = Ссылка;
		НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
		НоваяСтрока.СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.ДокументПродажиПодразделение;
		НоваяСтрока.НаправлениеДеятельности = ВыборкаДетальныеЗаписи.ДокументПродажиНаправлениеДеятельности;
		НоваяСтрока.СчетУчета = ВыборкаДетальныеЗаписи.ДокументПродажиНаправлениеДеятельностиСчетУчетаСебестоимостиПродаж;
		НоваяСтрока.СуммаРасходов = ВыборкаДетальныеЗаписи.СуммаКорректировки;
		НоваяСтрока.СодержаниеПроводки = НСтр("ru = 'Отражение расходов'");
		
		// Движения по регистру Управленческий.
		НоваяСтрока = НаборЗаписейУправленческий.Добавить();
		НоваяСтрока.Период = Дата;
		НоваяСтрока.Регистратор = Ссылка;
		НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
		НоваяСтрока.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
		НоваяСтрока.СчетДт = ВыборкаДетальныеЗаписи.ДокументПродажиНаправлениеДеятельностиСчетУчетаСебестоимостиПродаж;
		НоваяСтрока.СчетКт = ВыборкаДетальныеЗаписи.ДокументПродажиСтруктурнаяЕдиницаСчетУчетаВРознице;
		НоваяСтрока.Содержание = НСтр("ru = 'Себестоимость'");
		НоваяСтрока.Сумма = ВыборкаДетальныеЗаписи.СуммаКорректировки;
		
		// Движения по регистру Управленческий.
		НоваяСтрока = НаборЗаписейУправленческий.Добавить();
		НоваяСтрока.Период = Дата;
		НоваяСтрока.Регистратор = Ссылка;
		НоваяСтрока.Организация = ВыборкаДетальныеЗаписи.Организация;
		НоваяСтрока.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
		НоваяСтрока.СчетДт = ВыборкаДетальныеЗаписи.ДокументПродажиСтруктурнаяЕдиницаСчетУчетаВРознице;
		НоваяСтрока.СчетКт = ВыборкаДетальныеЗаписи.ДокументПродажиСтруктурнаяЕдиницаСчетУчетаНаценки;
		НоваяСтрока.Содержание = НСтр("ru = 'Наценка'");
		НоваяСтрока.Сумма = - ВыборкаДетальныеЗаписи.СуммаКорректировки;
		
	КонецЦикла;
	
	// Пишем оставшиеся записи Учет доходов и расходов.
	НаборЗаписейДоходыИРасходы.Записать(Ложь);
	
	// Пишем оставшиеся записи Суммовой учет в рознице.
	НаборЗаписейСуммовойУчетВРознице.Записать(Ложь);
	
	// Пишем оставшиеся записи Управленческий.
	НаборЗаписейУправленческий.Записать(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетКурсовыхРазниц

Процедура РассчитатьКурсовыеРазницы(Отказ, ТаблицаОшибок)
	
	// Создадим набор записей регистра накопления ДенежныеСредства.
	НаборЗаписейДенежныеСредства = РегистрыНакопления.ДенежныеСредства.СоздатьНаборЗаписей();
	НаборЗаписейДенежныеСредства.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления ДенежныеСредстваВКассахККМ.
	НаборЗаписейДенежныеСредстваВКассахККМ = РегистрыНакопления.ДенежныеСредстваВКассахККМ.СоздатьНаборЗаписей();
	НаборЗаписейДенежныеСредстваВКассахККМ.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления ДенежныеСредстваКПоступлению.
	НаборЗаписейДенежныеСредстваКПоступлению = РегистрыНакопления.ДенежныеСредстваКПоступлению.СоздатьНаборЗаписей();
	НаборЗаписейДенежныеСредстваКПоступлению.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления РасчетыСПерсоналом.
	НаборЗаписейРасчетыСПерсоналом = РегистрыНакопления.РасчетыСПерсоналом.СоздатьНаборЗаписей();
	НаборЗаписейРасчетыСПерсоналом.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления РасчетыСПодотчетниками.
	НаборЗаписейРасчетыСПодотчетниками = РегистрыНакопления.РасчетыСПодотчетниками.СоздатьНаборЗаписей();
	НаборЗаписейРасчетыСПодотчетниками.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления РасчетыСПокупателями.
	НаборЗаписейРасчетыСПокупателями = РегистрыНакопления.РасчетыСПокупателями.СоздатьНаборЗаписей();
	НаборЗаписейРасчетыСПокупателями.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления РасчетыСПоставщиками.
	НаборЗаписейРасчетыСПоставщиками = РегистрыНакопления.РасчетыСПоставщиками.СоздатьНаборЗаписей();
	НаборЗаписейРасчетыСПоставщиками.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра накопления УчетДоходовИРасходов.
	НаборЗаписейДоходыИРасходы = РегистрыНакопления.ДоходыИРасходы.СоздатьНаборЗаписей();
	НаборЗаписейДоходыИРасходы.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра сведений ОтчетПоКурсовымРазницам.
	НаборЗаписейОтчетПоКурсовымРазницам = РегистрыСведений.ОтчетПоКурсовымРазницам.СоздатьНаборЗаписей();
	НаборЗаписейОтчетПоКурсовымРазницам.Отбор.Регистратор.Установить(Ссылка);
	
	// Создадим набор записей регистра бухгалтерии Управленческий.
	НаборЗаписейУправленческий = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();
	НаборЗаписейУправленческий.Отбор.Регистратор.Установить(Ссылка);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаКон", ДополнительныеСвойства.ДляПроведения.КонечнаяДатаПериод);
	Запрос.УстановитьПараметр("Организация", ДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	// Денежные средства.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОстатки.Организация КАК Организация,
	|	&Дата КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ТаблицаОстатки.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|	ТаблицаОстатки.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеДоходы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы)
	|	КОНЕЦ КАК Аналитика,
	|	ТаблицаОстатки.Валюта КАК Валюта,
	|	ТаблицаОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ТаблицаОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвиженияУправленческий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0)
	|		ИНАЧЕ -(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0))
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПоложительнаяКурсоваяРазница)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОтрицательнаяКурсоваяРазница)
	|	КОНЕЦ КАК Статья,
	|	&КурсоваяРазница КАК СодержаниеПроводки,
	|	НЕОПРЕДЕЛЕНО КАК СтруктурнаяЕдиница,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДоходов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА 0
	|		ИНАЧЕ -(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0))
	|	КОНЕЦ КАК СуммаРасходов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеДоходы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы)
	|	КОНЕЦ КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ТаблицаОстатки.БанковскийСчетКасса.СчетУчета
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы)
	|	КОНЕЦ КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеДоходы)
	|		ИНАЧЕ ТаблицаОстатки.БанковскийСчетКасса.СчетУчета
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|				И ТаблицаОстатки.БанковскийСчетКасса.СчетУчета.Валютный
	|			ТОГДА ТаблицаОстатки.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) < 0
	|				И ТаблицаОстатки.БанковскийСчетКасса.СчетУчета.Валютный
	|			ТОГДА ТаблицаОстатки.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	&КурсоваяРазница КАК Содержание
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(&ДатаКон, Организация = &Организация) КАК ТаблицаОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&ДатаКон,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыВалютУчетаСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКон, ) КАК КурсыВалютБанковскийСчетКассаСрезПоследних
	|		ПО ТаблицаОстатки.Валюта = КурсыВалютБанковскийСчетКассаСрезПоследних.Валюта
	|ГДЕ
	|	ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) <> ТаблицаОстатки.СуммаОстаток
	|	И (ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ТаблицаОстатки.СуммаОстаток >= 0.005
	|			ИЛИ ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ТаблицаОстатки.СуммаОстаток <= -0.005)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Окр(ВыборкаДетальныеЗаписи.Сумма, 2) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Движения по регистрам.
		НоваяСтрока = НаборЗаписейДенежныеСредства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.ХозяйственнаяОперация = ХозяйственнаяОперация; // Хозяйственная операция
		НоваяСтрока.ВидДвижения = ВыборкаДетальныеЗаписи.ВидДвиженияУправленческий;
		НоваяСтрока = НаборЗаписейДоходыИРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.Аналитика = ВыборкаДетальныеЗаписи.Валюта;
		НоваяСтрока = НаборЗаписейУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока = НаборЗаписейОтчетПоКурсовымРазницам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.Сумма = ?(ВыборкаДетальныеЗаписи.ВидДвиженияУправленческий = ВидДвиженияНакопления.Приход, НоваяСтрока.Сумма, -НоваяСтрока.Сумма);
		НоваяСтрока.Аналитика = Строка(ВыборкаДетальныеЗаписи.БанковскийСчетКасса);
		НоваяСтрока.Раздел = НСтр("ru = 'Денежные средства'");
		
	КонецЦикла;
	
	// Денежные средства в кассах ККМ.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОстатки.Организация КАК Организация,
	|	&Дата КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ТаблицаОстатки.КассаККМ КАК КассаККМ,
	|	ТаблицаОстатки.КассаККМ.ВалютаДенежныхСредств КАК Валюта,
	|	ТаблицаОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ТаблицаОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвиженияУправленческий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0)
	|		ИНАЧЕ -(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0))
	|	КОНЕЦ КАК Сумма,
	|	&КурсоваяРазница КАК СодержаниеПроводки,
	|	НЕОПРЕДЕЛЕНО КАК СтруктурнаяЕдиница,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДоходов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА 0
	|		ИНАЧЕ -(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0))
	|	КОНЕЦ КАК СуммаРасходов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеДоходы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы)
	|	КОНЕЦ КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ТаблицаОстатки.КассаККМ.СчетУчета
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы)
	|	КОНЕЦ КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеДоходы)
	|		ИНАЧЕ ТаблицаОстатки.КассаККМ.СчетУчета
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|				И ТаблицаОстатки.КассаККМ.СчетУчета.Валютный
	|			ТОГДА ТаблицаОстатки.КассаККМ.ВалютаДенежныхСредств
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) < 0
	|				И ТаблицаОстатки.КассаККМ.СчетУчета.Валютный
	|			ТОГДА ТаблицаОстатки.КассаККМ.ВалютаДенежныхСредств
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	&КурсоваяРазница КАК Содержание
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(&ДатаКон, Организация = &Организация) КАК ТаблицаОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&ДатаКон,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыВалютУчетаСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКон, ) КАК КурсыВалютБанковскийСчетКассаСрезПоследних
	|		ПО ТаблицаОстатки.КассаККМ.ВалютаДенежныхСредств = КурсыВалютБанковскийСчетКассаСрезПоследних.Валюта
	|ГДЕ
	|	ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) <> ТаблицаОстатки.СуммаОстаток
	|	И (ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ТаблицаОстатки.СуммаОстаток >= 0.005
	|			ИЛИ ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ТаблицаОстатки.СуммаОстаток <= -0.005)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Окр(ВыборкаДетальныеЗаписи.Сумма, 2) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Движения по регистрам.
		НоваяСтрока = НаборЗаписейДенежныеСредстваВКассахККМ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.ВидДвижения = ВыборкаДетальныеЗаписи.ВидДвиженияУправленческий;
		НоваяСтрока = НаборЗаписейДоходыИРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.Аналитика = ВыборкаДетальныеЗаписи.Валюта;
		НоваяСтрока = НаборЗаписейУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока = НаборЗаписейОтчетПоКурсовымРазницам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.Сумма = ?(ВыборкаДетальныеЗаписи.ВидДвиженияУправленческий = ВидДвиженияНакопления.Приход, НоваяСтрока.Сумма, -НоваяСтрока.Сумма);
		НоваяСтрока.Аналитика = Строка(ВыборкаДетальныеЗаписи.КассаККМ);
		НоваяСтрока.Раздел = НСтр("ru = 'Денежные средства в кассах ККМ'");
		
	КонецЦикла;
	
	// Денежные средства к поступлению.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОстатки.Организация КАК Организация,
	|	&Дата КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ТаблицаОстатки.Касса КАК Касса,
	|	ТаблицаОстатки.ДокументПередачи КАК ДокументПередачи,
	|	ТаблицаОстатки.ДокументПередачи.ВалютаДенежныхСредств КАК Валюта,
	|	ТаблицаОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ТаблицаОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвиженияУправленческий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0)
	|		ИНАЧЕ -(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0))
	|	КОНЕЦ КАК Сумма,
	|	&КурсоваяРазница КАК СодержаниеПроводки,
	|	НЕОПРЕДЕЛЕНО КАК СтруктурнаяЕдиница,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДоходов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА 0
	|		ИНАЧЕ -(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0))
	|	КОНЕЦ КАК СуммаРасходов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеДоходы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы)
	|	КОНЕЦ КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПереводыВПути)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы)
	|	КОНЕЦ КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеДоходы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПереводыВПути)
	|	КОНЕЦ КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	&КурсоваяРазница КАК Содержание
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКПоступлению.Остатки(&ДатаКон, Организация = &Организация) КАК ТаблицаОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&ДатаКон,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыВалютУчетаСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКон, ) КАК КурсыВалютБанковскийСчетКассаСрезПоследних
	|		ПО ТаблицаОстатки.ДокументПередачи.ВалютаДенежныхСредств = КурсыВалютБанковскийСчетКассаСрезПоследних.Валюта
	|ГДЕ
	|	ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) <> ТаблицаОстатки.СуммаОстаток
	|	И (ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ТаблицаОстатки.СуммаОстаток >= 0.005
	|			ИЛИ ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ТаблицаОстатки.СуммаОстаток <= -0.005)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Окр(ВыборкаДетальныеЗаписи.Сумма, 2) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Движения по регистрам.
		НоваяСтрока = НаборЗаписейДенежныеСредстваКПоступлению.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.ВидДвижения = ВыборкаДетальныеЗаписи.ВидДвиженияУправленческий;
		НоваяСтрока = НаборЗаписейДоходыИРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.Аналитика = ВыборкаДетальныеЗаписи.Валюта;
		НоваяСтрока = НаборЗаписейУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока = НаборЗаписейОтчетПоКурсовымРазницам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.Сумма = ?(ВыборкаДетальныеЗаписи.ВидДвиженияУправленческий = ВидДвиженияНакопления.Приход, НоваяСтрока.Сумма, -НоваяСтрока.Сумма);
		НоваяСтрока.Аналитика = Строка(ВыборкаДетальныеЗаписи.Касса);
		НоваяСтрока.Раздел = НСтр("ru = 'Денежные средства к поступлению'");
		
	КонецЦикла;
	
	// Расчеты с персоналом.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОстатки.Организация КАК Организация,
	|	&Дата КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ТаблицаОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаОстатки.Сотрудник КАК Сотрудник,
	|	ТаблицаОстатки.Сотрудник.Код КАК СотрудникКод,
	|	ТаблицаОстатки.Валюта КАК Валюта,
	|	ТаблицаОстатки.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ТаблицаОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвиженияУправленческий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0)
	|		ИНАЧЕ -(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0))
	|	КОНЕЦ КАК Сумма,
	|	&КурсоваяРазница КАК СодержаниеПроводки,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА 0
	|		ИНАЧЕ -(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0))
	|	КОНЕЦ КАК СуммаДоходов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРасходов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеДоходы)
	|	КОНЕЦ КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы)
	|		ИНАЧЕ ТаблицаОстатки.Сотрудник.СчетРасчетовСПерсоналом
	|	КОНЕЦ КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ТаблицаОстатки.Сотрудник.СчетРасчетовСПерсоналом
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеДоходы)
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) < 0
	|				И ТаблицаОстатки.Сотрудник.СчетРасчетовСПерсоналом.Валютный
	|			ТОГДА ТаблицаОстатки.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|				И ТаблицаОстатки.Сотрудник.СчетРасчетовСПерсоналом.Валютный
	|			ТОГДА ТаблицаОстатки.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	&КурсоваяРазница КАК Содержание
	|ИЗ
	|	РегистрНакопления.РасчетыСПерсоналом.Остатки(&ДатаКон, Организация = &Организация) КАК ТаблицаОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&ДатаКон,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыВалютУчетаСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКон, ) КАК КурсыВалютБанковскийСчетКассаСрезПоследних
	|		ПО ТаблицаОстатки.Валюта = КурсыВалютБанковскийСчетКассаСрезПоследних.Валюта
	|ГДЕ
	|	ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) <> ТаблицаОстатки.СуммаОстаток
	|	И (ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ТаблицаОстатки.СуммаОстаток >= 0.005
	|			ИЛИ ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ТаблицаОстатки.СуммаОстаток <= -0.005)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Окр(ВыборкаДетальныеЗаписи.Сумма, 2) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Движения по регистрам.
		НоваяСтрока = НаборЗаписейРасчетыСПерсоналом.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.ВидДвижения = ВыборкаДетальныеЗаписи.ВидДвиженияУправленческий;
		НоваяСтрока = НаборЗаписейДоходыИРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.Аналитика = ВыборкаДетальныеЗаписи.Валюта;
		НоваяСтрока.СтруктурнаяЕдиница = Неопределено;
		НоваяСтрока = НаборЗаписейУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока = НаборЗаписейОтчетПоКурсовымРазницам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.Сумма = ?(ВыборкаДетальныеЗаписи.ВидДвиженияУправленческий = ВидДвиженияНакопления.Приход, НоваяСтрока.Сумма, -НоваяСтрока.Сумма);
		НоваяСтрока.Аналитика = СтрШаблон(НСтр("ru = '%1 (%2) / %3 / %4 г.'"), ВыборкаДетальныеЗаписи.Сотрудник,
			ВыборкаДетальныеЗаписи.СотрудникКод, ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница, 
			Формат(ВыборкаДетальныеЗаписи.ПериодРегистрации, НСтр("ru = 'ДФ=''ММММ гггг'''")));
		НоваяСтрока.Раздел = НСтр("ru = 'Расчеты с персоналом'");
		
	КонецЦикла;
	
	// Расчеты с подотчетниками.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОстатки.Организация КАК Организация,
	|	&Дата КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ТаблицаОстатки.Сотрудник КАК Сотрудник,
	|	ТаблицаОстатки.Документ КАК Документ,
	|	ТаблицаОстатки.Валюта КАК Валюта,
	|	ТаблицаОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ТаблицаОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвиженияУправленческий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0)
	|		ИНАЧЕ -(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0))
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПоложительнаяКурсоваяРазница)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОтрицательнаяКурсоваяРазница)
	|	КОНЕЦ КАК Статья,
	|	&КурсоваяРазница КАК СодержаниеПроводки,
	|	НЕОПРЕДЕЛЕНО КАК СтруктурнаяЕдиница,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДоходов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА 0
	|		ИНАЧЕ -(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0))
	|	КОНЕЦ КАК СуммаРасходов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеДоходы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы)
	|	КОНЕЦ КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) > 0
	|						ТОГДА ТаблицаОстатки.Сотрудник.СчетРасчетовСПодотчетниками
	|					ИНАЧЕ ТаблицаОстатки.Сотрудник.СчетРасчетовПоПерерасходу
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы)
	|	КОНЕЦ КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеДоходы)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) > 0
	|					ТОГДА ТаблицаОстатки.Сотрудник.СчетРасчетовСПодотчетниками
	|				ИНАЧЕ ТаблицаОстатки.Сотрудник.СчетРасчетовПоПерерасходу
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|				И ВЫБОР
	|					КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) > 0
	|						ТОГДА ТаблицаОстатки.Сотрудник.СчетРасчетовСПодотчетниками.Валютный
	|					ИНАЧЕ ТаблицаОстатки.Сотрудник.СчетРасчетовПоПерерасходу.Валютный
	|				КОНЕЦ
	|			ТОГДА ТаблицаОстатки.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) < 0
	|				И ВЫБОР
	|					КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) > 0
	|						ТОГДА ТаблицаОстатки.Сотрудник.СчетРасчетовСПодотчетниками.Валютный
	|					ИНАЧЕ ТаблицаОстатки.Сотрудник.СчетРасчетовПоПерерасходу.Валютный
	|				КОНЕЦ
	|			ТОГДА ТаблицаОстатки.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	&КурсоваяРазница КАК Содержание
	|ИЗ
	|	РегистрНакопления.РасчетыСПодотчетниками.Остатки(&ДатаКон, Организация = &Организация) КАК ТаблицаОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&ДатаКон,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыВалютУчетаСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКон, ) КАК КурсыВалютБанковскийСчетКассаСрезПоследних
	|		ПО ТаблицаОстатки.Валюта = КурсыВалютБанковскийСчетКассаСрезПоследних.Валюта
	|ГДЕ
	|	ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) <> ТаблицаОстатки.СуммаОстаток
	|	И (ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ТаблицаОстатки.СуммаОстаток >= 0.005
	|			ИЛИ ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ТаблицаОстатки.СуммаОстаток <= -0.005)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Окр(ВыборкаДетальныеЗаписи.Сумма, 2) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Движения по регистрам.
		НоваяСтрока = НаборЗаписейРасчетыСПодотчетниками.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.ВидДвижения = ВыборкаДетальныеЗаписи.ВидДвиженияУправленческий;
		НоваяСтрока = НаборЗаписейДоходыИРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.Аналитика = ВыборкаДетальныеЗаписи.Валюта;
		НоваяСтрока = НаборЗаписейУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока = НаборЗаписейОтчетПоКурсовымРазницам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.Сумма = ?(ВыборкаДетальныеЗаписи.ВидДвиженияУправленческий = ВидДвиженияНакопления.Приход, НоваяСтрока.Сумма, -НоваяСтрока.Сумма);
		НоваяСтрока.Аналитика = СтрШаблон(НСтр("ru = '%1 / %2'"), ВыборкаДетальныеЗаписи.Сотрудник, 
			ВыборкаДетальныеЗаписи.Документ);
		НоваяСтрока.Раздел = НСтр("ru = 'Расчеты с подотчетниками'");
		
	КонецЦикла;
	
	// Расчеты с покупателями.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОстатки.Организация КАК Организация,
	|	&Дата КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ТаблицаОстатки.ТипРасчетов КАК ТипРасчетов,
	|	ТаблицаОстатки.Контрагент КАК Контрагент,
	|	ТаблицаОстатки.Договор КАК Договор,
	|	ТаблицаОстатки.Документ КАК Документ,
	|	ТаблицаОстатки.Заказ КАК Заказ,
	|	ТаблицаОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ТаблицаОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
	|	ТаблицаОстатки.Договор.ВалютаРасчетов КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвиженияУправленческий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0)
	|		ИНАЧЕ -(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0))
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс / КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс / КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0)
	|		ИНАЧЕ - (ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс / КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0))
	|	КОНЕЦ КАК СуммаРег,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПоложительнаяКурсоваяРазница)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОтрицательнаяКурсоваяРазница)
	|	КОНЕЦ КАК Статья,
	|	&КурсоваяРазница КАК СодержаниеПроводки,
	|	НЕОПРЕДЕЛЕНО КАК СтруктурнаяЕдиница,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДоходов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА 0
	|		ИНАЧЕ -(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0))
	|	КОНЕЦ КАК СуммаРасходов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеДоходы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы)
	|	КОНЕЦ КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|						ТОГДА ТаблицаОстатки.Контрагент.СчетУчетаРасчетовСПокупателем
	|					ИНАЧЕ ТаблицаОстатки.Контрагент.СчетУчетаАвансовПокупателя
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы)
	|	КОНЕЦ КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеДоходы)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|					ТОГДА ТаблицаОстатки.Контрагент.СчетУчетаРасчетовСПокупателем
	|				ИНАЧЕ ТаблицаОстатки.Контрагент.СчетУчетаАвансовПокупателя
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|				И ВЫБОР
	|					КОГДА ТаблицаОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|						ТОГДА ТаблицаОстатки.Контрагент.СчетУчетаРасчетовСПокупателем.Валютный
	|					ИНАЧЕ ТаблицаОстатки.Контрагент.СчетУчетаАвансовПокупателя.Валютный
	|				КОНЕЦ
	|			ТОГДА ТаблицаОстатки.Договор.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) < 0
	|				И ВЫБОР
	|					КОГДА ТаблицаОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|						ТОГДА ТаблицаОстатки.Контрагент.СчетУчетаРасчетовСПокупателем.Валютный
	|					ИНАЧЕ ТаблицаОстатки.Контрагент.СчетУчетаАвансовПокупателя.Валютный
	|				КОНЕЦ
	|			ТОГДА ТаблицаОстатки.Договор.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	&КурсоваяРазница КАК Содержание
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)) КАК ТаблицаОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&ДатаКон,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыВалютУчетаСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКон, ) КАК КурсыВалютБанковскийСчетКассаСрезПоследних
	|		ПО ТаблицаОстатки.Договор.ВалютаРасчетов = КурсыВалютБанковскийСчетКассаСрезПоследних.Валюта
	|ГДЕ
	|	ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) <> ТаблицаОстатки.СуммаОстаток
	|	И (ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ТаблицаОстатки.СуммаОстаток >= 0.005
	|			ИЛИ ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ТаблицаОстатки.СуммаОстаток <= -0.005
	|			ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс / КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность - ТаблицаОстатки.СуммаРегОстаток >= 0.005
	|			ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс / КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность - ТаблицаОстатки.СуммаРегОстаток <= -0.005 )";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Окр(ВыборкаДетальныеЗаписи.Сумма, 2) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Движения по регистрам.
		НоваяСтрока = НаборЗаписейРасчетыСПокупателями.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.ВидДвижения = ВыборкаДетальныеЗаписи.ВидДвиженияУправленческий;
		НоваяСтрока = НаборЗаписейДоходыИРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.Аналитика = ВыборкаДетальныеЗаписи.Валюта;
		НоваяСтрока = НаборЗаписейУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока = НаборЗаписейОтчетПоКурсовымРазницам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.Сумма = ?(ВыборкаДетальныеЗаписи.ВидДвиженияУправленческий = ВидДвиженияНакопления.Приход, НоваяСтрока.Сумма, -НоваяСтрока.Сумма);
		НоваяСтрока.Аналитика = СтрШаблон(НСтр("ru = '%1 / %2 / %3 / %4'"), ВыборкаДетальныеЗаписи.Контрагент,
			ВыборкаДетальныеЗаписи.Договор, ВыборкаДетальныеЗаписи.Документ, ВыборкаДетальныеЗаписи.Заказ);
		НоваяСтрока.Раздел = НСтр("ru = 'Расчеты с покупателями'");
		
	КонецЦикла;
	
	// Расчеты с поставщиками.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОстатки.Организация КАК Организация,
	|	&Дата КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ТаблицаОстатки.ТипРасчетов КАК ТипРасчетов,
	|	ТаблицаОстатки.Контрагент КАК Контрагент,
	|	ТаблицаОстатки.Договор КАК Договор,
	|	ТаблицаОстатки.Документ КАК Документ,
	|	ТаблицаОстатки.Заказ КАК Заказ,
	|	ТаблицаОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ТаблицаОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
	|	ТаблицаОстатки.Договор.ВалютаРасчетов КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвиженияУправленческий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0)
	|		ИНАЧЕ -(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0))
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс / КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс / КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0)
	|		ИНАЧЕ - (ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс / КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность - ЕСТЬNULL(ТаблицаОстатки.СуммаРегОстаток, 0))
	|	КОНЕЦ КАК СуммаРег,
	|	&КурсоваяРазница КАК СодержаниеПроводки,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА 0
	|		ИНАЧЕ -(ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0))
	|	КОНЕЦ КАК СуммаДоходов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРасходов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеДоходы)
	|	КОНЕЦ КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|					ТОГДА ТаблицаОстатки.Контрагент.СчетУчетаРасчетовСПоставщиком
	|				ИНАЧЕ ТаблицаОстатки.Контрагент.СчетУчетаАвансовПоставщику
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|						ТОГДА ТаблицаОстатки.Контрагент.СчетУчетаРасчетовСПоставщиком
	|					ИНАЧЕ ТаблицаОстатки.Контрагент.СчетУчетаАвансовПоставщику
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеДоходы)
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) < 0
	|				И ВЫБОР
	|					КОГДА ТаблицаОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|						ТОГДА ТаблицаОстатки.Контрагент.СчетУчетаРасчетовСПоставщиком.Валютный
	|					ИНАЧЕ ТаблицаОстатки.Контрагент.СчетУчетаАвансовПоставщику.Валютный
	|				КОНЕЦ
	|			ТОГДА ТаблицаОстатки.Договор.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0) > 0
	|				И ВЫБОР
	|					КОГДА ТаблицаОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|						ТОГДА ТаблицаОстатки.Контрагент.СчетУчетаРасчетовСПоставщиком.Валютный
	|					ИНАЧЕ ТаблицаОстатки.Контрагент.СчетУчетаАвансовПоставщику.Валютный
	|				КОНЕЦ
	|			ТОГДА ТаблицаОстатки.Договор.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	&КурсоваяРазница КАК Содержание
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)) КАК ТаблицаОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&ДатаКон,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыВалютУчетаСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКон, ) КАК КурсыВалютБанковскийСчетКассаСрезПоследних
	|		ПО ТаблицаОстатки.Договор.ВалютаРасчетов = КурсыВалютБанковскийСчетКассаСрезПоследних.Валюта
	|ГДЕ
	|	ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) <> ТаблицаОстатки.СуммаОстаток
	|	И (ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ТаблицаОстатки.СуммаОстаток >= 0.005
	|			ИЛИ ТаблицаОстатки.СуммаВалОстаток * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность) - ТаблицаОстатки.СуммаОстаток <= -0.005
	|			ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс / КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность - ТаблицаОстатки.СуммаРегОстаток >= 0.005
	|			ИЛИ ЕСТЬNULL(ТаблицаОстатки.СуммаВалОстаток, 0) * КурсыВалютБанковскийСчетКассаСрезПоследних.Курс / КурсыВалютБанковскийСчетКассаСрезПоследних.Кратность - ТаблицаОстатки.СуммаРегОстаток <= -0.005)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Окр(ВыборкаДетальныеЗаписи.Сумма, 2) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Движения по регистрам.
		НоваяСтрока = НаборЗаписейРасчетыСПоставщиками.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.ВидДвижения = ВыборкаДетальныеЗаписи.ВидДвиженияУправленческий;
		НоваяСтрока = НаборЗаписейДоходыИРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.Аналитика = ВыборкаДетальныеЗаписи.Валюта;
		НоваяСтрока = НаборЗаписейУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока = НаборЗаписейОтчетПоКурсовымРазницам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.Сумма = ?(ВыборкаДетальныеЗаписи.ВидДвиженияУправленческий = ВидДвиженияНакопления.Приход, НоваяСтрока.Сумма, -НоваяСтрока.Сумма);
		НоваяСтрока.Аналитика = СтрШаблон(НСтр("ru = '%1 / %2 / %3 / %4'"), ВыборкаДетальныеЗаписи.Контрагент,
			ВыборкаДетальныеЗаписи.Договор, ВыборкаДетальныеЗаписи.Документ, ВыборкаДетальныеЗаписи.Заказ);
		НоваяСтрока.Раздел = НСтр("ru = 'Расчеты с поставщиками'");
		
	КонецЦикла;
	
	// Пишем оставшиеся записи.
	НаборЗаписейДенежныеСредства.Записать(Ложь);
	НаборЗаписейДенежныеСредстваВКассахККМ.Записать(Ложь);
	НаборЗаписейДенежныеСредстваКПоступлению.Записать(Ложь);
	НаборЗаписейРасчетыСПерсоналом.Записать(Ложь);
	НаборЗаписейРасчетыСПодотчетниками.Записать(Ложь);
	НаборЗаписейРасчетыСПокупателями.Записать(Ложь);
	НаборЗаписейРасчетыСПоставщиками.Записать(Ложь);
	НаборЗаписейДоходыИРасходы.Записать(Ложь);
	ТаблицаЗаписей = НаборЗаписейОтчетПоКурсовымРазницам.Выгрузить();
	ТаблицаЗаписей.Свернуть("Период, Активность, Организация, Аналитика, Валюта, Раздел", "Сумма, СуммаДоходов, СуммаРасходов, СуммаОстаток, СуммаВалОстаток");
	НаборЗаписейОтчетПоКурсовымРазницам.Загрузить(ТаблицаЗаписей);
	НаборЗаписейОтчетПоКурсовымРазницам.Записать(Ложь);
	НаборЗаписейУправленческий.Записать(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Добавляет дополнительные реквизиты, необходимые для проведения документа в
// переданную структуру.
//
// Параметры:
//  СтруктураДополнительныеСвойства - Структура дополнительных свойств документа.
//
Процедура ДобавитьРеквизитыВДополнительныеСвойстваДляПроведения(СтруктураДополнительныеСвойства)
	
	НачальнаяГраницаПериода = Новый Граница(НачалоМесяца(Дата), ВидГраницы.Включая);
	КонечнаяГраницаПериода = Новый Граница(КонецМесяца (Дата), ВидГраницы.Включая);
	НачальнаяДатаПериода = НачалоМесяца(Дата);
	КонечнаяДатаПериод   = КонецМесяца (Дата);
	
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ПустойСчет", ПланыСчетов.Управленческий.ПустаяСсылка());
	
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("НачальнаяГраницаПериода", НачальнаяГраницаПериода);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("КонечнаяГраницаПериода", КонечнаяГраницаПериода);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("НачальнаяДатаПериода", НачальнаяДатаПериода);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("КонечнаяДатаПериод", КонечнаяДатаПериод);
	
КонецПроцедуры // ДобавитьРеквизитыВДополнительныеСвойстваДляПроведения()

// Устанавливает свойство записывать для наборов записей документа в переданное
// значение.
//
// Параметры:
//  ФлагЗаписи   - Булево, флаг разрешения записи наборов записей.
//
Процедура УстановитьСвойстваНаборовЗаписейДокумента(ФлагЗаписи)
	
	Движения.УзлыКорректировкиСтоимостиСписания.Записывать = ФлагЗаписи;
	Движения.Запасы.Записывать = ФлагЗаписи;
	Движения.Продажи.Записывать = ФлагЗаписи;
	Движения.ДоходыИРасходы.Записывать = ФлагЗаписи;
	Движения.Управленческий.Записывать = ФлагЗаписи;
	Движения.ОшибкиЗакрытияМесяца.Записывать = ФлагЗаписи;
	Движения.ОтчетПоКурсовымРазницам.Записывать = ФлагЗаписи;
	
КонецПроцедуры // УстановитьСвойстваНаборовЗаписейДокумента()

// Сворачивает набор записей Доходы и расходы.
//
Процедура СвернутьНаборЗаписейДоходыИРасходы(НаборЗаписейРегистра)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоходыИРасходы.Период,
	|	ДоходыИРасходы.Активность,
	|	ДоходыИРасходы.Организация,
	|	ДоходыИРасходы.СтруктурнаяЕдиница,
	|	ДоходыИРасходы.НаправлениеДеятельности,
	|	ДоходыИРасходы.ЗаказПокупателя,
	|	ДоходыИРасходы.СчетУчета,
	|	ДоходыИРасходы.Аналитика,
	|	СУММА(ДоходыИРасходы.СуммаДоходов) КАК СуммаДоходов,
	|	СУММА(ДоходыИРасходы.СуммаРасходов) КАК СуммаРасходов,
	|	ДоходыИРасходы.СодержаниеПроводки
	|ИЗ
	|	РегистрНакопления.ДоходыИРасходы КАК ДоходыИРасходы
	|ГДЕ
	|	ДоходыИРасходы.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыИРасходы.Период,
	|	ДоходыИРасходы.Активность,
	|	ДоходыИРасходы.Организация,
	|	ДоходыИРасходы.СтруктурнаяЕдиница,
	|	ДоходыИРасходы.НаправлениеДеятельности,
	|	ДоходыИРасходы.ЗаказПокупателя,
	|	ДоходыИРасходы.СчетУчета,
	|	ДоходыИРасходы.Аналитика,
	|	ДоходыИРасходы.СодержаниеПроводки
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ДоходыИРасходы.СуммаДоходов) <> 0
	|		ИЛИ СУММА(ДоходыИРасходы.СуммаРасходов) <> 0)";
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	ТаблицаЗаписейРегистра = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписейРегистра.Загрузить(ТаблицаЗаписейРегистра);
	
КонецПроцедуры // СвернутьНаборЗаписейДоходыИРасходы()

// Сворачивает набор записей Запасы.
//
Процедура СвернутьНаборЗаписейЗапасы(НаборЗаписейРегистра)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Запасы.Период,
	|	Запасы.Активность,
	|	Запасы.ВидДвижения,
	|	Запасы.Организация,
	|	Запасы.СтруктурнаяЕдиница,
	|	Запасы.СчетУчета,
	|	Запасы.Номенклатура,
	|	Запасы.Характеристика,
	|	Запасы.Партия,
	|	Запасы.ЗаказПокупателя,
	|	Запасы.ЗаказНаПроизводство,
	|	СУММА(Запасы.Количество) КАК Количество,
	|	СУММА(Запасы.Сумма) КАК Сумма,
	|	Запасы.КоррСтруктурнаяЕдиница,
	|	Запасы.КоррСчетУчета,
	|	Запасы.КоррНоменклатура,
	|	Запасы.КоррХарактеристика,
	|	Запасы.КоррПартия,
	|	Запасы.КоррЗаказПокупателя,
	|	Запасы.КоррЗаказНаПроизводство,
	|	Запасы.Спецификация,
	|	Запасы.КоррСпецификация,
	|	Запасы.ЗаказПродажи,
	|	Запасы.Подразделение,
	|	Запасы.Ответственный,
	|	Запасы.ДокументПродажи,
	|	Запасы.СтавкаНДС,
	|	Запасы.ФиксированнаяСтоимость,
	|	Запасы.ЗатратыНаВыпуск,
	|	Запасы.Возврат,
	|	Запасы.СодержаниеПроводки,
	|	Запасы.ПеремещениеВРозницуСуммовойУчет
	|ИЗ
	|	РегистрНакопления.Запасы КАК Запасы
	|ГДЕ
	|	Запасы.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	Запасы.Период,
	|	Запасы.Активность,
	|	Запасы.ВидДвижения,
	|	Запасы.Организация,
	|	Запасы.СтруктурнаяЕдиница,
	|	Запасы.СчетУчета,
	|	Запасы.Номенклатура,
	|	Запасы.Характеристика,
	|	Запасы.Партия,
	|	Запасы.ЗаказПокупателя,
	|	Запасы.ЗаказНаПроизводство,
	|	Запасы.КоррСтруктурнаяЕдиница,
	|	Запасы.КоррСчетУчета,
	|	Запасы.КоррНоменклатура,
	|	Запасы.КоррХарактеристика,
	|	Запасы.КоррПартия,
	|	Запасы.КоррЗаказПокупателя,
	|	Запасы.КоррЗаказНаПроизводство,
	|	Запасы.Спецификация,
	|	Запасы.КоррСпецификация,
	|	Запасы.ЗаказПродажи,
	|	Запасы.Подразделение,
	|	Запасы.Ответственный,
	|	Запасы.ДокументПродажи,
	|	Запасы.СтавкаНДС,
	|	Запасы.ФиксированнаяСтоимость,
	|	Запасы.ЗатратыНаВыпуск,
	|	Запасы.Возврат,
	|	Запасы.СодержаниеПроводки,
	|	Запасы.ПеремещениеВРозницуСуммовойУчет
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Запасы.Количество) <> 0
	|		ИЛИ СУММА(Запасы.Сумма) <> 0)";
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	ТаблицаЗаписейРегистра = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписейРегистра.Загрузить(ТаблицаЗаписейРегистра); 
	
КонецПроцедуры // СвернутьНаборЗаписейЗапасы()

// Сворачивает набор записей Продажи.
//
Процедура СвернутьНаборЗаписейПродажи(НаборЗаписейРегистра)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Продажи.Период,
	|	Продажи.Активность,
	|	Продажи.Номенклатура,
	|	Продажи.Характеристика,
	|	Продажи.Партия,
	|	Продажи.Документ,
	|	Продажи.СтавкаНДС,
	|	Продажи.Организация,
	|	Продажи.ЗаказПокупателя,
	|	Продажи.Подразделение,
	|	Продажи.Склад,
	|	Продажи.Ответственный,
	|	СУММА(Продажи.Количество) КАК Количество,
	|	СУММА(Продажи.Сумма) КАК Сумма,
	|	СУММА(Продажи.СуммаНДС) КАК СуммаНДС,
	|	СУММА(Продажи.Себестоимость) КАК Себестоимость
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	Продажи.Период,
	|	Продажи.Активность,
	|	Продажи.Номенклатура,
	|	Продажи.Характеристика,
	|	Продажи.Партия,
	|	Продажи.Документ,
	|	Продажи.СтавкаНДС,
	|	Продажи.Организация,
	|	Продажи.ЗаказПокупателя,
	|	Продажи.Подразделение,
	|	Продажи.Склад,
	|	Продажи.Ответственный
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Продажи.Количество) <> 0
	|		ИЛИ СУММА(Продажи.Сумма) <> 0
	|		ИЛИ СУММА(Продажи.СуммаНДС) <> 0
	|		ИЛИ СУММА(Продажи.Себестоимость) <> 0)";
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);

	ТаблицаЗаписейРегистра = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписейРегистра.Загрузить(ТаблицаЗаписейРегистра);
	
КонецПроцедуры // СвернутьНаборЗаписейПродажи()

// Сворачивает набор записей ФинансовыйРезультат.
//
Процедура СвернутьНаборЗаписейФинансовыйРезультат(НаборЗаписейРегистра)
			
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФинансовыйРезультат.Период,
	|	ФинансовыйРезультат.Активность,
	|	ФинансовыйРезультат.Организация,
	|	ФинансовыйРезультат.СтруктурнаяЕдиница,
	|	ФинансовыйРезультат.Проект,
	|	ФинансовыйРезультат.НаправлениеДеятельности,
	|	ФинансовыйРезультат.ЗаказПокупателя,
	|	ФинансовыйРезультат.СчетУчета,
	|	ФинансовыйРезультат.Аналитика,
	|	СУММА(ФинансовыйРезультат.СуммаДоходов) КАК СуммаДоходов,
	|	СУММА(ФинансовыйРезультат.СуммаРасходов) КАК СуммаРасходов,
	|	ФинансовыйРезультат.СодержаниеПроводки
	|ИЗ
	|	РегистрНакопления.ФинансовыйРезультат КАК ФинансовыйРезультат
	|ГДЕ
	|	ФинансовыйРезультат.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ФинансовыйРезультат.Период,
	|	ФинансовыйРезультат.Активность,
	|	ФинансовыйРезультат.Организация,
	|	ФинансовыйРезультат.СтруктурнаяЕдиница,
	|	ФинансовыйРезультат.Проект,
	|	ФинансовыйРезультат.НаправлениеДеятельности,
	|	ФинансовыйРезультат.ЗаказПокупателя,
	|	ФинансовыйРезультат.СчетУчета,
	|	ФинансовыйРезультат.Аналитика,
	|	ФинансовыйРезультат.СодержаниеПроводки
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ФинансовыйРезультат.СуммаДоходов) <> 0
	|		ИЛИ СУММА(ФинансовыйРезультат.СуммаРасходов) <> 0)";

	Запрос.УстановитьПараметр("Регистратор", Ссылка);

	ТаблицаЗаписейРегистра = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписейРегистра.Загрузить(ТаблицаЗаписейРегистра);

КонецПроцедуры // СвернутьНаборЗаписейФинансовыйРезультат()

// Сворачивает набор записей Управленческий.
//
Процедура СвернутьНаборЗаписейУправленческий(НаборЗаписейРегистра)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Управленческий.Период,
	|	Управленческий.Активность,
	|	Управленческий.СчетДт,
	|	Управленческий.СчетКт,
	|	Управленческий.Организация,
	|	Управленческий.СценарийПланирования,
	|	Управленческий.ВалютаДт,
	|	Управленческий.ВалютаКт,
	|	СУММА(Управленческий.Сумма) КАК Сумма,
	|	СУММА(Управленческий.СуммаВалДт) КАК СуммаВалДт,
	|	СУММА(Управленческий.СуммаВалКт) КАК СуммаВалКт,
	|	Управленческий.Содержание
	|ИЗ
	|	РегистрБухгалтерии.Управленческий КАК Управленческий
	|ГДЕ
	|	Управленческий.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	Управленческий.Период,
	|	Управленческий.Активность,
	|	Управленческий.СчетДт,
	|	Управленческий.СчетКт,
	|	Управленческий.Организация,
	|	Управленческий.СценарийПланирования,
	|	Управленческий.ВалютаДт,
	|	Управленческий.ВалютаКт,
	|	Управленческий.Содержание
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Управленческий.Сумма) <> 0
	|		ИЛИ СУММА(Управленческий.СуммаВалДт) <> 0
	|		ИЛИ СУММА(Управленческий.СуммаВалКт) <> 0)"; 

	Запрос.УстановитьПараметр("Регистратор", Ссылка);

	ТаблицаЗаписейРегистра = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписейРегистра.Загрузить(ТаблицаЗаписейРегистра);
	
КонецПроцедуры // СвернутьНаборЗаписейУправленческий()

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаПроведения. Формирует движения
// документа по регистрам накопления и бухгалтерскому регистру.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ДобавитьРеквизитыВДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	// Разрешение записи наборов записей.
	УстановитьСвойстваНаборовЗаписейДокумента(Истина);
	
	НаборЗаписейОшибкиЗакрытияМесяца = РегистрыСведений.ОшибкиЗакрытияМесяца.СоздатьНаборЗаписей();
	НаборЗаписейОшибкиЗакрытияМесяца.Отбор.Регистратор.Установить(Ссылка);
	ТаблицаОшибок = НаборЗаписейОшибкиЗакрытияМесяца.ВыгрузитьКолонки();
	
	// Установка блокировок
	СоответствиеРегистровБлокировки = Новый Соответствие;
	Если РасчетПрямыхЗатрат Тогда
		СоответствиеРегистровБлокировки.Вставить("РегистрНакопления.Запасы");
		СоответствиеРегистровБлокировки.Вставить("РегистрНакопления.Продажи");
		СоответствиеРегистровБлокировки.Вставить("РегистрНакопления.ДоходыИРасходы");
		СоответствиеРегистровБлокировки.Вставить("РегистрБухгалтерии.Управленческий");
		СоответствиеРегистровБлокировки.Вставить("РегистрСведений.УзлыКорректировкиСтоимостиСписания");
	КонецЕсли;
	Если РаспределениеЗатрат Тогда
		СоответствиеРегистровБлокировки.Вставить("РегистрНакопления.Запасы");
		СоответствиеРегистровБлокировки.Вставить("РегистрБухгалтерии.Управленческий");
	КонецЕсли;
	Если РасчетФактическойСебестоимости Тогда
		СоответствиеРегистровБлокировки.Вставить("РегистрНакопления.СуммовойУчетВРознице");
		СоответствиеРегистровБлокировки.Вставить("РегистрНакопления.ДоходыИРасходы");
		СоответствиеРегистровБлокировки.Вставить("РегистрБухгалтерии.Управленческий");
	КонецЕсли;
	Если РасчетКурсовыхРазниц Тогда
		СоответствиеРегистровБлокировки.Вставить("РегистрНакопления.ДенежныеСредства");
		СоответствиеРегистровБлокировки.Вставить("РегистрНакопления.ДенежныеСредстваВКассахККМ");
		СоответствиеРегистровБлокировки.Вставить("РегистрНакопления.ДенежныеСредстваКПоступлению");
		СоответствиеРегистровБлокировки.Вставить("РегистрНакопления.РасчетыСПерсоналом");
		СоответствиеРегистровБлокировки.Вставить("РегистрНакопления.РасчетыСПодотчетниками");
		СоответствиеРегистровБлокировки.Вставить("РегистрНакопления.РасчетыСПокупателями");
		СоответствиеРегистровБлокировки.Вставить("РегистрНакопления.РасчетыСПоставщиками");
		СоответствиеРегистровБлокировки.Вставить("РегистрНакопления.ДоходыИРасходы");
		СоответствиеРегистровБлокировки.Вставить("РегистрСведений.ОтчетПоКурсовымРазницам");
		СоответствиеРегистровБлокировки.Вставить("РегистрБухгалтерии.Управленческий");
	КонецЕсли;
	Если РасчетФинансовогоРезультата Тогда
		СоответствиеРегистровБлокировки.Вставить("РегистрНакопления.ДоходыИРасходы");
		СоответствиеРегистровБлокировки.Вставить("РегистрБухгалтерии.Управленческий");
	КонецЕсли;
	Если СоответствиеРегистровБлокировки.Количество()>0 Тогда
		Блокировка = Новый БлокировкаДанных;
		Для каждого РегистрБлокировки Из СоответствиеРегистровБлокировки Цикл
			ЭлементБлокировки = Блокировка.Добавить(РегистрБлокировки.Ключ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
		КонецЦикла; 
		Блокировка.Заблокировать();
	КонецЕсли;
	
	// Расчет прямых затрат.
	Если РасчетПрямыхЗатрат Тогда
		РассчитатьСтоимостьВозвратов(); // предварительный расчет стоимости возвратов.
		РассчитатьФактическуюСебестоимостьВыпуска(Отказ, "РасчетПрямыхЗатрат", ТаблицаОшибок);
		РассчитатьСтоимостьВозвратов(); // окончательный расчет стоимости возвратов.
	КонецЕсли;
	
	// Распределение затрат.
	Если РаспределениеЗатрат Тогда
		РаспределитьЗатраты(Отказ, ТаблицаОшибок);
	КонецЕсли;
	
	// Расчет фактической себестоимости.
	Если РасчетФактическойСебестоимости Тогда
		РассчитатьСтоимостьВозвратов(); // предварительный расчет стоимости возвратов.
		РассчитатьФактическуюСебестоимостьВыпуска(Отказ, "РасчетФактическойСебестоимости", ТаблицаОшибок);
		РассчитатьСтоимостьВозвратов(Истина); // окончательный расчет стоимости возвратов.
	КонецЕсли;
	
	// Расчет себестоимости в рознице суммовой учет.
	Если РасчетСебестоимостиВРозницеСуммовойУчет Тогда
		РассчитатьСебестоимостьВРозницеСуммовойУчет(Отказ, ТаблицаОшибок);
	КонецЕсли;
	
	// Расчет курсовых разниц.
	Если РасчетКурсовыхРазниц Тогда
		РассчитатьКурсовыеРазницы(Отказ, ТаблицаОшибок);
	КонецЕсли;
	
	// Расчет финансового результата.
	Если РасчетФинансовогоРезультата Тогда
		РассчитатьФинансовыйРезультат(Отказ, ТаблицаОшибок);
	КонецЕсли;
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru = 'При закрытии месяца были сформированы предупреждения.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Сворачивание наборов записей регистров.
	НаборЗаписейЗапасы = РегистрыНакопления.Запасы.СоздатьНаборЗаписей();
	НаборЗаписейЗапасы.Отбор.Регистратор.Установить(Ссылка);
	СвернутьНаборЗаписейЗапасы(НаборЗаписейЗапасы);
	НаборЗаписейЗапасы.Записать(Истина);
	
	НаборЗаписейДоходыИРасходы = РегистрыНакопления.ДоходыИРасходы.СоздатьНаборЗаписей();
	НаборЗаписейДоходыИРасходы.Отбор.Регистратор.Установить(Ссылка);
	СвернутьНаборЗаписейДоходыИРасходы(НаборЗаписейДоходыИРасходы);
	НаборЗаписейДоходыИРасходы.Записать(Истина);
	
	НаборЗаписейПродажи = РегистрыНакопления.Продажи.СоздатьНаборЗаписей();
	НаборЗаписейПродажи.Отбор.Регистратор.Установить(Ссылка);
	СвернутьНаборЗаписейПродажи(НаборЗаписейПродажи);
	НаборЗаписейПродажи.Записать(Истина);
	
	НаборЗаписейФинансовыйРезультат = РегистрыНакопления.ФинансовыйРезультат.СоздатьНаборЗаписей();
	НаборЗаписейФинансовыйРезультат.Отбор.Регистратор.Установить(Ссылка);
	СвернутьНаборЗаписейФинансовыйРезультат(НаборЗаписейФинансовыйРезультат);
	НаборЗаписейФинансовыйРезультат.Записать(Истина);
	
	НаборЗаписейУправленческий = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();
	НаборЗаписейУправленческий.Отбор.Регистратор.Установить(Ссылка);
	СвернутьНаборЗаписейУправленческий(НаборЗаписейУправленческий);
	НаборЗаписейУправленческий.Записать(Истина);
	
	ТаблицаОшибок.Свернуть("Период, Регистратор, Активность, Организация, ВидОперации, ОписаниеОшибки, Аналитика");
	НаборЗаписейОшибкиЗакрытияМесяца.Загрузить(ТаблицаОшибок);
	НаборЗаписейОшибкиЗакрытияМесяца.Записать(Истина);
	
	// Запрет записи наборов записей.
	УстановитьСвойстваНаборовЗаписейДокумента(Ложь);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

#Область ХозяйственныеОперации

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ХозяйственнаяОперация = ХозяйственныеОперацииСервер.ХозяйственнаяОперацияПоВидуОперацииДокумента(Неопределено, Ссылка);
	
КонецПроцедуры

#КонецОбласти

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УчетПоКомпании = Константы.УчетПоКомпании.Получить();
	
	Если УчетПоКомпании И Организация <> Константы.Компания.Получить() Тогда
		ТекстСообщения = НСтр("ru = 'При использовании учета по компании закрытие месяца по прочим организациям не выполняется.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("РасчетПрямыхЗатрат", РасчетПрямыхЗатрат);
	Запрос.УстановитьПараметр("РаспределениеЗатрат", РаспределениеЗатрат);
	Запрос.УстановитьПараметр("РасчетФактическойСебестоимости", РасчетФактическойСебестоимости);
	Запрос.УстановитьПараметр("РасчетФинансовогоРезультата", РасчетФинансовогоРезультата);
	Запрос.УстановитьПараметр("РасчетКурсовыхРазниц", РасчетКурсовыхРазниц);
	Запрос.УстановитьПараметр("РасчетСебестоимостиВРозницеСуммовойУчет", РасчетСебестоимостиВРозницеСуммовойУчет);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗакрытиеМесяца.Ссылка КАК Ссылка,
	|	ЗакрытиеМесяца.РасчетПрямыхЗатрат КАК РасчетПрямыхЗатрат,
	|	ЗакрытиеМесяца.РаспределениеЗатрат КАК РаспределениеЗатрат,
	|	ЗакрытиеМесяца.РасчетФактическойСебестоимости КАК РасчетФактическойСебестоимости,
	|	ЗакрытиеМесяца.РасчетФинансовогоРезультата КАК РасчетФинансовогоРезультата,
	|	ЗакрытиеМесяца.РасчетКурсовыхРазниц КАК РасчетКурсовыхРазниц,
	|	ЗакрытиеМесяца.РасчетСебестоимостиВРозницеСуммовойУчет КАК РасчетСебестоимостиВРозницеСуммовойУчет
	|ИЗ
	|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца,
	|	Константа.УчетПоКомпании КАК УчетПоКомпании
	|ГДЕ
	|	ЗакрытиеМесяца.Проведен
	|	И ЗакрытиеМесяца.Ссылка <> &Ссылка
	|	И ЗакрытиеМесяца.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И (ЗакрытиеМесяца.Организация = &Организация
	|			ИЛИ УчетПоКомпании.Значение)
	|	И (ЗакрытиеМесяца.РасчетПрямыхЗатрат = &РасчетПрямыхЗатрат
	|				И ЗакрытиеМесяца.РасчетПрямыхЗатрат
	|			ИЛИ ЗакрытиеМесяца.РаспределениеЗатрат = &РаспределениеЗатрат
	|				И ЗакрытиеМесяца.РаспределениеЗатрат
	|			ИЛИ ЗакрытиеМесяца.РасчетФактическойСебестоимости = &РасчетФактическойСебестоимости
	|				И ЗакрытиеМесяца.РасчетФактическойСебестоимости
	|			ИЛИ ЗакрытиеМесяца.РасчетФинансовогоРезультата = &РасчетФинансовогоРезультата
	|				И ЗакрытиеМесяца.РасчетФинансовогоРезультата
	|			ИЛИ ЗакрытиеМесяца.РасчетКурсовыхРазниц = &РасчетКурсовыхРазниц
	|				И ЗакрытиеМесяца.РасчетКурсовыхРазниц
	|			ИЛИ ЗакрытиеМесяца.РасчетСебестоимостиВРозницеСуммовойУчет = &РасчетСебестоимостиВРозницеСуммовойУчет
	|				И ЗакрытиеМесяца.РасчетСебестоимостиВРозницеСуммовойУчет)";
	Выборка = Запрос.Выполнить().Выбрать();
	МассивНастроек = Новый Массив;
	ПоляНастроек = Новый Структура("РасчетПрямыхЗатрат, РаспределениеЗатрат, РасчетФактическойСебестоимости, РасчетФинансовогоРезультата, РасчетКурсовыхРазниц, РасчетСебестоимостиВРозницеСуммовойУчет");
	Пока Выборка.Следующий() Цикл
		Для каждого КлючИЗначение Из ПоляНастроек Цикл
			Если ЭтотОбъект[КлючИЗначение.Ключ] И Выборка[КлючИЗначение.Ключ] Тогда
				ЗаголовокНастройки = НРег(Метаданные().Реквизиты.Найти(КлючИЗначение.Ключ).Представление());
				Если МассивНастроек.Найти(ЗаголовокНастройки) = Неопределено Тогда
					МассивНастроек.Добавить(ЗаголовокНастройки);
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;  
	КонецЦикла;
	Если МассивНастроек.Количество() > 0 Тогда
		МесяцСтрокой = НРег(Формат(Дата, НСтр("ru = 'ДФ=''ММММ гггг'''")));
		Если УчетПоКомпании Тогда
			ТекстСообщения = НСтр("ru = 'За %1 уже есть другие закрытия месяца (%2).'");
			ТекстСообщения = СтрШаблон(
			ТекстСообщения,
			МесяцСтрокой,
			СтрСоединить(МассивНастроек, ", "));
		Иначе
			ТекстСообщения = НСтр("ru = 'За %1 уже есть другие закрытия месяца (%2) по организации %3.'");
			ТекстСообщения = СтрШаблон(
			ТекстСообщения,
			МесяцСтрокой,
			СтрСоединить(МассивНастроек, ", "),
			Организация);
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ Отказ И Проведен И РасчетФактическойСебестоимости Тогда
		НаборЗаписей = РегистрыСведений.ИзмененияЗакрытогоМесяца.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Месяц.Установить(НачалоМесяца(Дата));
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Записать(Истина);
	КонецЕсли; 	
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли