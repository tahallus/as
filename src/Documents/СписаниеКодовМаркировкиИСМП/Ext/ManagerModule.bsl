#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область Статусы

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.КодыМаркировкиСписаны);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.ОшибкаПередачи);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статус по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров=Неопределено) Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеИСМП

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки 
		Или Операция = Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.КПередаче);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки
		Или Операция = Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.Обрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ИСМП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИСМП.
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт

	Если Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента Тогда
		
		Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента Тогда
			
			Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
			Статусы.Принят = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.КодыМаркировкиСписаны;
			
			Статусы.Обрабатывается = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.Обрабатывается;
			Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
			
			Статусы.Ошибка = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.ОшибкаПередачи;
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
				ДокументСсылка,
				ДополнительныеПараметры.СтатусОбработки,
				Статусы);
		Иначе
			
			Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
			Статусы.Принят = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.КодыМаркировкиСписаны;
			
			Статусы.Ошибка = Перечисления.СтатусыОбработкиСписанияКодовМаркировкиИСМП.ОшибкаПередачи;
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
				ДокументСсылка,
				ДополнительныеПараметры.СтатусОбработки,
				Статусы);
			
		КонецЕсли
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры обновления статуса.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры обновления статуса.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Обновить статус после получения данных из ИСМП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИСМП.
//  ДополнительныеПараметры - Структура -Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Изменяет и возвращает статус документа ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ ИС МП.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - новый статус документа ИС МП.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево - Не используется.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияИСМП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ИнтеграцияИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 0,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки);
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 01,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента); 
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияИСМП.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияИСМППереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияИСМП.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Списание кодов маркировок ИС МП.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные Тогда
		
		Возврат СписаниеКодовМаркировкиJSON(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

// Формирует JSON сообщения для списания кодов маркировки
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеКодовМаркировкиИСМП - Документ Приемка товаров ИСМП
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция СписаниеКодовМаркировкиJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеКодовМаркировкиИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.Ссылка                             КАК Документ,
	|
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	
	|	Шапка.ВидПродукции КАК ВидПродукции,
	|	&Операция          КАК Операция,
	|	
	|	Шапка.ПричинаСписания                      КАК ПричинаСписания,
	|	Шапка.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа,
	|	Шапка.ИдентификаторПроизводственнойЛинии   КАК ИдентификаторПроизводственнойЛинии,
	|	Шапка.ПроизводственныйОбъект               КАК ПроизводственныйОбъект,
	|	Шапка.ПроизводственныйОбъектИдентификатор  КАК ПроизводственныйОбъектИдентификатор,
	|	Шапка.ПроизводственныйОбъектАдрес          КАК ПроизводственныйОбъектАдрес,
	|	Шапка.ПроизводственныйОбъектАдресСтрокой   КАК ПроизводственныйОбъектАдресСтрокой,
	|	Шапка.ОтчетПроизводственнойЛинии           КАК ОтчетПроизводственнойЛинии,
	|
	|	Шапка.ВидПервичногоДокумента               КАК ВидПервичногоДокумента,
	|	Шапка.ДатаПервичногоДокумента              КАК ДатаПервичногоДокумента,
	|	Шапка.НомерПервичногоДокумента             КАК НомерПервичногоДокумента,
	|	Шапка.НаименованиеПервичногоДокумента      КАК НаименованиеПервичногоДокумента,
	|
	|	Шапка.Ответственный                КАК Ответственный,
	|	Представление(Шапка.Ответственный) КАК ОтветственныйПредставление,
	|	Шапка.Ссылка                       КАК Ссылка
	|ИЗ
	|	Документ.СписаниеКодовМаркировкиИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	// Универсальные реквизиты
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.GTIN               КАК GTIN,
	|	Товары.Серия              КАК Серия,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|
	|	// Дополнительные реквизиты
	|	Товары.ПричинаСписания КАК ПричинаСписания
	|ИЗ
	|	Документ.СписаниеКодовМаркировкиИСМП.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ИЗ
	|	Документ.СписаниеКодовМаркировкиИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"ШтрихкодыУпаковок");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеОтчета.ЗначениеШтрихкода         КАК ЗначениеШтрихкода,
	|	ДанныеОтчета.ЗначениеШтрихкодаУпаковки КАК ЗначениеШтрихкодаУпаковки,
	|	ДанныеОтчета.ФорматBase64              КАК ФорматBase64,
	|	
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкода         КАК НормализованноеЗначениеШтрихкода,
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкодаУпаковки КАК НормализованноеЗначениеШтрихкодаУпаковки
	|ИЗ
	|	Документ.СписаниеКодовМаркировкиИСМП.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеОтчета
	|ГДЕ
	|	ДанныеОтчета.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"ДанныеОтчетаПроизводственнойЛинии");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары            = РезультатЗапроса["Товары"].Выгрузить();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	//@skip-warning
	ДанныеОтчета      = РезультатЗапроса["ДанныеОтчетаПроизводственнойЛинии"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или (Товары.Количество() = 0 И ДанныеОтчета.Количество() = 0) Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Шапка.Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	// Параметры нормализации
	ПараметрыНормализации = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализации.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализации.НачинаетсяСоСкобки = Ложь;
	ПараметрыНормализации.ВключатьМРЦ        = Ложь;
	
	КодыМаркировки = ШтрихкодированиеИСМП.НоваяТаблицаПоискаКодаМаркировкиВПуле(Ложь);
	НормализованныеДанныеОтчета = ИнициализироватьНормализованныеДанныеОтчета();

	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	
	ЭтоТабак = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак;
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Организация = Шапка.Организация;
	СообщениеJSON.Документ    = ДокументСсылка;
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Шапка.Операция, ДокументСсылка);
	
	Если Шапка.ОтчетПроизводственнойЛинии Тогда
		
		ПараметрыРазбора = Новый Структура;
		ПараметрыРазбора.Вставить("УпрощеннаяОбработкаКодовМаркировки",     ПараметрыСканирования.УпрощеннаяОбработкаКодовМаркировки);
		ПараметрыРазбора.Вставить("ВосстанавливатьСтруктуруКодаМаркировки", Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки);
		ПараметрыРазбора.Вставить("ПроверятьАлфавитКодовМаркировки",        ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки);
		
		ДанныеОтчета.Колонки.Добавить("ТекстОшибки", Новый ОписаниеТипов("Строка"));
		
		РезультатОбработкиДанныхОтчета = ШтрихкодированиеИСМПСлужебный.ОбработатьКодыМаркировкиДляОтчетаОНанесении(
			ДанныеОтчета, Шапка.ВидПродукции, ПараметрыРазбора);
		ВидыУпаковокДляПередачиОтчетаОНанесении = ШтрихкодированиеИСКлиентСервер.ВидыУпаковокДляПередачиОтчетаОНанесении();
		
		КешДанныхРазбора       = Новый Соответствие;
		КешКодовДляПоискаВПуле = Новый Соответствие;
		
		// 1. Разбор кодов, подготовка данных для построения дерева упаковок.
		
		ЕстьОшибки = РезультатОбработкиДанныхОтчета.ЕстьОшибки;
		
		Для Каждого СтрокаДанных Из РезультатОбработкиДанныхОтчета.ОбработанныеДанныеОтчета Цикл
			
			ИсходнаяСтрока = СтрокаДанных.ИсходнаяСтрока;
			
			Если ЕстьОшибки Или ЗначениеЗаполнено(ИсходнаяСтрока.ТекстОшибки) Тогда
				
				ЕстьОшибки = Истина;
				Прервать;
				
			КонецЕсли;
			
			Для Каждого ИменаКолонок Из РезультатОбработкиДанныхОтчета.ГруппыКолонок Цикл
				
				Если Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.КодМаркировки]) Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаДанных.ЕстьОшибки
					Или Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки]) Тогда
					ВызватьИсключение НСтр("ru = 'Внутренняя ошибка разбора кодов маркировки.'");
				КонецЕсли;
				
				Если КешДанныхРазбора[ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки]] = Неопределено Тогда
					
					КешДанныхРазбора.Вставить(ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки], Истина);
					
					Если ЭтоТабак Тогда
						
						Если ВидыУпаковокДляПередачиОтчетаОНанесении.Получить(СтрокаДанных[ИменаКолонок.ВидУпаковки]) <> Неопределено Тогда
							
							// При передаче данных через СУЗ для табака требуется указание полных кодов.
							Если ЗначениеЗаполнено(СтрокаДанных[ИменаКолонок.ПолныйКодМаркировки]) Тогда
								СтрокаДанныхОтчета = НормализованныеДанныеОтчета.Добавить();
								СтрокаДанныхОтчета.КодМаркировки = ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки];
								СтрокаДанныхОтчета.ПолныйКодМаркировки = СтрокаДанных[ИменаКолонок.ПолныйКодМаркировки];
							ИначеЕсли Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки Тогда
								// Искать полный код в пуле.
								ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
									ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки], КодыМаркировки);
								СтрокиТаблицыДляОбработки = КешКодовДляПоискаВПуле[ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки]];
								Если СтрокиТаблицыДляОбработки = Неопределено Тогда
									СтрокиТаблицыДляОбработки = Новый Массив;
								КонецЕсли;
								СтрокиТаблицыДляОбработки.Добавить(ИсходнаяСтрока);
								КешКодовДляПоискаВПуле[ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки]] = СтрокиТаблицыДляОбработки;
								
							Иначе
								ДобавитьТекстОшибкиНеНайденПолныйКод(ИсходнаяСтрока, ИменаКолонок.КодМаркировки);
								ЕстьОшибки = Истина;
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						
						СтрокаДанныхОтчета = НормализованныеДанныеОтчета.Добавить();
						СтрокаДанныхОтчета.КодМаркировки = ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки];
						
					КонецЕсли;
					
				ИначеЕсли ВидыУпаковокДляПередачиОтчетаОНанесении.Получить(СтрокаДанных[ИменаКолонок.ВидУпаковки]) <> Неопределено
					И Не ЗначениеЗаполнено(СтрокаДанных[ИменаКолонок.ПолныйКодМаркировки]) 
					И ЭтоТабак Тогда
					
					Если Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки Тогда
						СтрокиТаблицыДляОбработки = КешКодовДляПоискаВПуле[ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки]];
						Если СтрокиТаблицыДляОбработки = Неопределено Тогда
							СтрокиТаблицыДляОбработки = Новый Массив;
						КонецЕсли;
						СтрокиТаблицыДляОбработки.Добавить(ИсходнаяСтрока);
					Иначе
						ДобавитьТекстОшибкиНеНайденПолныйКод(ИсходнаяСтрока, ИменаКолонок.КодМаркировки);
						ЕстьОшибки = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ЭтоТабак И Не (ЕстьОшибки Или ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки) Тогда
			// 2. Поиск.
			РезультатПоискаВПуле = ШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки(
				КодыМаркировки, "ПолныйКодМаркировки");
			РезультатПоискаВПуле.Индексы.Добавить("КодМаркировки");
			
			// 3. Обход результатов поиска.
			Для Каждого КлючИЗначение Из КешКодовДляПоискаВПуле Цикл
				
				КодМаркировки = КлючИЗначение.Ключ;
				ИсходныеСтроки = КлючИЗначение.Значение;
				СтрокаПулаКодовМаркировки = РезультатПоискаВПуле.Найти(КодМаркировки, "КодМаркировки");
				
				Если СтрокаПулаКодовМаркировки = Неопределено Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не найден полный код маркировки для %1'"), 
						КодМаркировки);
					Для Каждого ИсходнаяСтрока Из ИсходныеСтроки Цикл
						ИсходнаяСтрока.ТекстОшибки = ?(ЗначениеЗаполнено(ИсходнаяСтрока.ТекстОшибки),
							ИсходнаяСтрока.ТекстОшибки + Символы.ПС + ТекстОшибки,
							ТекстОшибки);
					КонецЦикла;
					ЕстьОшибки = Истина;
				Иначе
					СтрокаДанныхОтчета = НормализованныеДанныеОтчета.Добавить();
					СтрокаДанныхОтчета.КодМаркировки = КодМаркировки;
					СтрокаДанныхОтчета.ПолныйКодМаркировки = СтрокаПулаКодовМаркировки.ПолныйКодМаркировки;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// 4. Сохранение в документ.
		СохранитьДанныеОтчетаПроизводственнойЛинии(ДокументСсылка, ДанныеОтчета);
		Если ЕстьОшибки Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				НСтр("ru = 'Некорректный формат данных отчета производственной линии'"));
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		НормализованныеДанныеОтчета.Сортировать("КодМаркировки");
		
	Иначе
		// Заполнение данных по маркируемым товарам
		ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
		ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП = Ложь;
		
		РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
			ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
			ПараметрыСканирования,, Истина);
		
		Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
			
			СоответствиеБлоков = Новый Соответствие;
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				
				Если СтрокаТЧМаркированныеТовары.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
					СтрокаДанныхОтчета = НормализованныеДанныеОтчета.Добавить();
					СтрокаДанныхОтчета.КодМаркировки = СтрокаТЧМаркированныеТовары.Штрихкод;
					ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
						СтрокаТЧМаркированныеТовары, КодыМаркировки);
				КонецЕсли;
				
				СтрокаРодитель = СтрокаТЧМаркированныеТовары.СтрокаДерева.Родитель;
				Если СтрокаРодитель <> Неопределено Тогда
					Если СоответствиеБлоков[СтрокаРодитель.Штрихкод] = Неопределено Тогда
						СоответствиеБлоков.Вставить(СтрокаРодитель.Штрихкод, Истина);
						Если СтрокаРодитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
							СтрокаДанныхОтчета = НормализованныеДанныеОтчета.Добавить();
							СтрокаДанныхОтчета.КодМаркировки = СтрокаРодитель.Штрихкод;
							ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
								СтрокаРодитель, КодыМаркировки);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			РезультатПоискаВПуле = ШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки(
				КодыМаркировки, "ПолныйКодМаркировки", Ложь);
			РезультатПоискаВПуле.Индексы.Добавить("КодМаркировки");
			
			Для Каждого СтрокаДанныхОтчета Из НормализованныеДанныеОтчета Цикл
				
				СтрокаПулаКодовМаркировки = РезультатПоискаВПуле.Найти(СтрокаДанныхОтчета.КодМаркировки, "КодМаркировки");
				
				Если СтрокаПулаКодовМаркировки <> Неопределено Тогда
					СтрокаДанныхОтчета.ПолныйКодМаркировки = СтрокаПулаКодовМаркировки.ПолныйКодМаркировки;
				КонецЕсли;
				
			КонецЦикла;
			
			НормализованныеДанныеОтчета.Сортировать("КодМаркировки");
		КонецЕсли;
		
	КонецЕсли;
	
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	
	Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Шапка.Операция, ДокументСсылка, НомерВерсии);
		
		РезультатОпределенияСУЗ = ИнтеграцияИСМПСлужебный.ОпределитьСтанциюУправленияЗаказами(
			СообщенияJSON, СообщениеJSON, Шапка, ДополнительныеПараметры);
		Если Не РезультатОпределенияСУЗ.Успешно Тогда
			Возврат СообщенияJSON;
		КонецЕсли;
		
		СтанцияУправленияЗаказами = РезультатОпределенияСУЗ.СтанцияУправленияЗаказами;
		
		Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
		КонецЕсли;
		
		ТелоЗапроса = Новый Структура;
		
		// Обязательные реквизиты
		ТелоЗапроса.Вставить("dropoutReason", ИнтерфейсСУЗСлужебный.ПричинаСписанияКМ(Шапка.ПричинаСписания));
		ТелоЗапроса.Вставить("sntins",        Новый Массив);
		
		ТелоЗапроса.Вставить("sourceDocDate",  Формат(Шапка.Дата, "ДФ=yyyy-MM-dd;"));
		ТелоЗапроса.Вставить("sourceDocNum",   Шапка.Номер);
		ТелоЗапроса.Вставить("address",        Шапка.ПроизводственныйОбъектАдресСтрокой);
		ТелоЗапроса.Вставить("withChild",      Ложь);
		ТелоЗапроса.Вставить("participantId",  РеквизитыОрганизации.ИНН);
		
		// Необязательные реквизиты
		Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственнойЛинии) Тогда
			ТелоЗапроса.Вставить("productionLineId",  Шапка.ИдентификаторПроизводственнойЛинии);
		КонецЕсли;
		Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственногоЗаказа) Тогда
			ТелоЗапроса.Вставить("productionOrderId",  Шапка.ИдентификаторПроизводственногоЗаказа);
		КонецЕсли;
		
		ЕстьОшибки = Ложь;
		Для Каждого СтрокаДанныхОтчета Из НормализованныеДанныеОтчета Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДанныхОтчета.ПолныйКодМаркировки) Тогда
				ЕстьОшибки = Истина;
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(НСтр("ru = 'Не найден полный код маркировки для кода %1.'"), СтрокаДанныхОтчета.КодМаркировки));
			Иначе
				ТелоЗапроса.sntins.Добавить(ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(СтрокаДанныхОтчета.ПолныйКодМаркировки));
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьОшибки Тогда
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
		ТекстСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		
		СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Версия              = НомерВерсии;
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		
		СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		СообщениеJSON.Операция                  = Шапка.Операция;
		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		СообщениеJSON.ФорматОбмена              = Перечисления.ВерсииФорматаОбменаСУЗ.V2;
		СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
		СообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("КонтролироватьСтатусДокументаСписаниеИСМП", Истина);
		
		СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	ИначеЕсли Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Шапка.Операция, ДокументСсылка, НомерВерсии);
		
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Версия              = НомерВерсии;
		СообщениеJSON.ТребуетсяПодписание = Истина;
		
		СообщениеJSON.ВидПродукции        = Шапка.ВидПродукции;
		СообщениеJSON.Операция            = Шапка.Операция;
		СообщениеJSON.Назначение          = Перечисления.НазначениеСообщенийИСМП.ИСМП;
		
		МетаданныеXDTO = Метаданные.ПакетыXDTO.ВыбытиеМОТП;
		ФайлXDTO       = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(МетаданныеXDTO.ПространствоИмен, "Файл");
		
		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("Дата",  Шапка.Дата);
		ДанныеДокумента.Вставить("Номер", Шапка.Номер);
		ДанныеДокумента.Вставить("ИНН",   РеквизитыОрганизации.ИНН);
		
		ВерсияПрограммы = ИнтерфейсМОТПСлужебный.ВерсияПрограммы();
		ИмяФайла        = ИнтерфейсМОТПСлужебный.ИмяФайлаXDTO(ДанныеДокумента, МетаданныеXDTO);
		
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(ФайлXDTO, "ИмяФайла",        ИмяФайла,        СообщениеJSON);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(ФайлXDTO, "ВерсияПрограммы", ВерсияПрограммы, СообщениеJSON);
		
		// Уведомление
		УведомлениеXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
			МетаданныеXDTO.ПространствоИмен, "Уведомление", ФайлXDTO);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(ФайлXDTO, "Уведомление", УведомлениеXDTO, СообщениеJSON);
		СведенияВыбытииXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
			МетаданныеXDTO.ПространствоИмен, "СведенияОВыбытии", УведомлениеXDTO);
		
		// ИНН
		ИННXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
			МетаданныеXDTO.ПространствоИмен, "ИНН", СведенияВыбытииXDTO);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
			ИННXDTO, "ИННЮЛТип", РеквизитыОрганизации.ИНН, СообщениеJSON);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(СведенияВыбытииXDTO, "ИНН", ИННXDTO, СообщениеJSON);
		
		// Первичный документ
		ПервичныйДокументXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
			МетаданныеXDTO.ПространствоИмен, "ПервичныйДокумент", СведенияВыбытииXDTO);
		ЗначениеДаты = Формат(Шапка.ДатаПервичногоДокумента, "ДФ=dd.MM.yyyy;");
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(ПервичныйДокументXDTO, "Дата",  ЗначениеДаты, СообщениеJSON);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(ПервичныйДокументXDTO, "Время", Шапка.ДатаПервичногоДокумента, СообщениеJSON);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(ПервичныйДокументXDTO, "Номер", Шапка.НомерПервичногоДокумента, СообщениеJSON);
		Если Шапка.ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументовИСМП.Прочее Тогда
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
				ПервичныйДокументXDTO, "Наименование", Шапка.НаименованиеПервичногоДокумента, СообщениеJSON);
		Иначе
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
				ПервичныйДокументXDTO, "Наименование", СокрЛП(Шапка.ВидПервичногоДокумента), СообщениеJSON);
		КонецЕсли;
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
			СведенияВыбытииXDTO, "ПервичныйДокумент", ПервичныйДокументXDTO, СообщениеJSON);
		
		// Адрес
		АдресXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
			МетаданныеXDTO.ПространствоИмен, "АдресПлощадки", СведенияВыбытииXDTO);
		
		ДанныеСтраны = УправлениеКонтактнойИнформацией.СтранаАдресаКонтактнойИнформации(Шапка.ПроизводственныйОбъектАдрес);
		
		Если ДанныеСтраны.Ссылка = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			
			АдресРФXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(МетаданныеXDTO.ПространствоИмен, "АдрРФ", АдресXDTO);
			
			ДанныеКИ         = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(Шапка.ПроизводственныйОбъектАдрес);
			СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеКИ);
			
			Индекс           = СведенияОбАдресе.Индекс;
			КодРегиона       = СведенияОбАдресе.КодРегиона;
			Район            = СведенияОбАдресе.Район;
			Город            = РаботаСАдресами.ГородАдресаКонтактнойИнформации(ДанныеКИ);
			НаселунныйПункт  = СведенияОбАдресе.НаселенныйПункт;
			Улица            = СведенияОбАдресе.Улица;
			Дом              = СведенияОбАдресе.Здание.Номер;
			Корпус           = "";
			Квартира         = "";
			
			ДанныеКорпусов = Новый Массив();
			Для Каждого КорпусАдреса Из СведенияОбАдресе.Корпуса Цикл
				ДанныеКорпусов.Добавить(КорпусАдреса.Номер);
			КонецЦикла;
			Корпус = СтрСоединить(ДанныеКорпусов, ", ");
			
			ДанныеПомещений = Новый Массив();
			Для Каждого ДанныеПомещения Из СведенияОбАдресе.Помещения Цикл
				ДанныеКорпусов.Добавить(ДанныеПомещения.Номер);
			КонецЦикла;
			Квартира = СтрСоединить(ДанныеПомещений, ", ");
			
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "КодСтр",    ДанныеСтраны.Код, СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "Индекс",    Индекс,           СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "КодРегион", КодРегиона,       СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "Район",     Район,            СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "Город",     Город,            СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "НаселунныйПункт", НаселунныйПункт, СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "Улица",     Улица,            СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "Дом",       Дом,              СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "Корпус",    Корпус,           СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "Квартира",  Квартира,         СообщениеJSON);
			
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресXDTO, "АдрРФ", АдресРФXDTO, СообщениеJSON);
			
		Иначе
			
			АдресИнфXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(МетаданныеXDTO.ПространствоИмен, "АдрИнф", АдресXDTO);
			
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресИнфXDTO, "КодСтр",   ДанныеСтраны.Код, СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресИнфXDTO, "АдрТекст", Лев(Шапка.АдресПлощадкиСтрока, 1000), СообщениеJSON);
			
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресXDTO, "АдрИнф", АдресИнфXDTO, СообщениеJSON);
			
		КонецЕсли;
		
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(СведенияВыбытииXDTO, "АдресПлощадки", АдресXDTO, СообщениеJSON);
		
		// Причина вывода из оборота
		ПричинаВыводаИзОборота = ИнтерфейсИСМПСлужебный.ПричинаВыводаИзОборотаПоПричинеСписания(Шапка.ПричинаСписания, Шапка.ВидПродукции);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
				СведенияВыбытииXDTO, "ПричинаВыбытия", ПричинаВыводаИзОборота, СообщениеJSON);
		
		// Коды идентификации
		КодыИдентификацииXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
			МетаданныеXDTO.ПространствоИмен, "КодыИдентификации", СведенияВыбытииXDTO);
		
		МассивКодовМаркировки = Новый Массив;
		
		Если Шапка.ОтчетПроизводственнойЛинии Тогда
			
			Для Каждого СтрокаДанныхОтчета Из НормализованныеДанныеОтчета Цикл
				
				РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
					СтрокаДанныхОтчета.КодМаркировки, Шапка.ВидПродукции, Ложь);
				МассивКодовМаркировки.Добавить(
					ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализации));
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				
				РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
					СтрокаТЧМаркированныеТовары.Штрихкод, Шапка.ВидПродукции, Ложь);
				МассивКодовМаркировки.Добавить(
					ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализации));
				
			КонецЦикла;
			
		КонецЕсли;
		
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
			КодыИдентификацииXDTO, "Список", СтрСоединить(МассивКодовМаркировки, " "), СообщениеJSON);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
			КодыИдентификацииXDTO, "СписыватьВложения", Истина, СообщениеJSON);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
			СведенияВыбытииXDTO, "КодыИдентификации", КодыИдентификацииXDTO, СообщениеJSON);
		
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
			УведомлениеXDTO, "СведенияОВыбытии", СведенияВыбытииXDTO, СообщениеJSON);
		
		// Сообщение
		ТекстСообщенияXML                 = ИнтеграцияИСМП.ОбъектXDTOВXML(ФайлXDTO, "Файл");
		СообщениеJSON.Назначение          = Перечисления.НазначениеСообщенийИСМП.ИСМП;
		СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияXML;
		
		Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Ошибка формирования XML:
				|%1'"),
				СообщениеJSON.ТекстОшибки);
		КонецЕсли;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(Шапка.ВидПродукции) Тогда
		
		ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
		ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
		ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Шапка.Операция, ДокументСсылка, НомерВерсии);
		
		Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
		КонецЕсли;
		
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("trade_participant_inn",   РеквизитыОрганизации.ИНН);
		ТелоЗапроса.Вставить("cancellation_doc_date",   ИнтеграцияИС.ДатаUTC(Шапка.Дата));
		ТелоЗапроса.Вставить("cancellation_doc_number", Шапка.Номер);
		ТелоЗапроса.Вставить("km_list", Новый Массив);
		
		Если Шапка.ОтчетПроизводственнойЛинии Тогда
			
			ПричинаСписания = ИнтерфейсИСМПСлужебный.ПричинаСписанияКодаМаркировки(Шапка.ПричинаСписания);
			Для Каждого СтрокаДанныхОтчета Из НормализованныеДанныеОтчета Цикл
				
				СтрокаТЧ = Новый Структура;
				РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
					СтрокаДанныхОтчета.КодМаркировки, Шапка.ВидПродукции, Ложь);
				СтрокаТЧ.Вставить(
					"uit",
					ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
				СтрокаТЧ.Вставить("cancellation_reason", ПричинаСписания);
				
				ТелоЗапроса.km_list.Добавить(СтрокаТЧ);
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				
				ПараметрыОтбора = Новый Структура;
				
				Если ЗначениеЗаполнено(СтрокаТЧМаркированныеТовары.Номенклатура) Тогда
					
					ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТЧМаркированныеТовары.Номенклатура);
					ПараметрыОтбора.Вставить("Характеристика", СтрокаТЧМаркированныеТовары.Характеристика);
					ПараметрыОтбора.Вставить("Серия",          СтрокаТЧМаркированныеТовары.Серия);
					
				Иначе
					
					ПараметрыОтбора.Вставить("GTIN", "");
					
					ПримечаниеКРезультатуРазбора = Неопределено;
					ДанныеКодаМаркировки         = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
						СтрокаТЧМаркированныеТовары.Штрихкод, Шапка.ВидПродукции, ПримечаниеКРезультатуРазбора);
					
					Если ДанныеКодаМаркировки = Неопределено Тогда
						ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							СтрШаблон(
								НСтр("ru = 'Не удалось разобрать код маркировки %1:
									       |%2'"),
									СтрокаТЧМаркированныеТовары.Штрихкод,
									ПримечаниеКРезультатуРазбора.ТекстОшибки));
					Иначе
						ПараметрыОтбора.GTIN = ДанныеКодаМаркировки.СоставКодаМаркировки.GTIN;
					КонецЕсли;
					
				КонецЕсли;
				
				НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 1 Тогда
					
					СтрокаТЧТовары = НайденныеСтроки[0];
					
					Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
						ПричинаСписания = Шапка.ПричинаСписания;
					Иначе
						ПричинаСписания = СтрокаТЧТовары.ПричинаСписания;
					КонецЕсли;
					
					СтрокаТЧ = Новый Структура;
					РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
						СтрокаТЧМаркированныеТовары.Штрихкод, Шапка.ВидПродукции, Ложь);
					ШтрихкодированиеИС.ЗаполнитьВидУпаковкиПоДаннымРазбораИлиСтрокеДанных(
						СтрокаТЧМаркированныеТовары, РезультатРазбора);
					СтрокаТЧ.Вставить(
						"uit",
						ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
					СтрокаТЧ.Вставить("cancellation_reason", ИнтерфейсИСМПСлужебный.ПричинаСписанияКодаМаркировки(ПричинаСписания));
					
					ТелоЗапроса.km_list.Добавить(СтрокаТЧ);
					
				ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
					
					Если ЗначениеЗаполнено(СтрокаТЧМаркированныеТовары.Номенклатура) Тогда
						СообщениеОшибки = СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия));
					Иначе
						СообщениеОшибки = СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" дублируется GTIN %1.'"),
							ПараметрыОтбора.GTIN);
					КонецЕсли;
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеJSON, СообщениеОшибки);
					
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаТЧМаркированныеТовары.Номенклатура) Тогда
						СообщениеОшибки = СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия));
					Иначе
						СообщениеОшибки = СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" не найден GTIN %1.'"),
							ПараметрыОтбора.GTIN);
					КонецЕсли;
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеJSON, СообщениеОшибки);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТекстСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		
		СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Версия              = НомерВерсии;
		СообщениеJSON.ТребуетсяПодписание = Истина;
		
		СообщениеJSON.Операция                  = Шапка.Операция;
		СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
		СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Вид продукции ""%1"" не поддерживается.'"),
			Шапка.ВидПродукции);
	КонецЕсли;
	
	Возврат СообщенияJSON;
	
КонецФункции

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.СписаниеКодовМаркировкиИСМП);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - параметры указания серий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.СписаниеКодовМаркировкиИСМП, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//   ПараметрыУказанияСерий - Произвольный - параметры указания серий
//
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.СписаниеКодовМаркировкиИСМП, ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область ПанельОбменИСМП

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, требующих ожидания пользователем
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
//
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ОбработкаКодовМаркировки

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		Результат = ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	Иначе
		Результат = ОбработатьДанныеШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма,,,"GTIN");
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды)
	
	РезультатОбработки = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = ПараметрыЗаполнения();
	
	ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат РезультатОбработки;
	
КонецФункции

Процедура ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(
			Форма, СтрокаДерева, ПараметрыЗаполнения, УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ПараметрыЗаполнения.РодительскийШтрихкод = УпаковкаВерхнегоУровня;
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, СтрокаДерева, Неопределено, ПараметрыЗаполнения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыЗаполнения()
	
	Возврат Новый Структура("ИзмененныеСтроки, ДобавленныеСтроки, РодительскийШтрихкод", Новый Массив, Новый Массив);
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования)
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
		
		Возврат ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования, ПараметрыЗаполнения = Неопределено)
	
	ИсточникДанных = Форма.Объект;
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Тогда 
		КоличествоМаркируемыхЕдиниц = ДанныеШтрихкода.КоличествоПачек;
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции) Тогда
		КоличествоМаркируемыхЕдиниц = ДанныеШтрихкода.КоличествоВложенныхЕдиниц;
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		
		ПараметрыЗаполнения  = ПараметрыЗаполнения();
		РезультатОбработки   = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
		РодительскийШтрихкод = Неопределено;
		
	Иначе
		
		РезультатОбработки   = ПараметрыЗаполнения;
		РодительскийШтрихкод = ПараметрыЗаполнения.РодительскийШтрихкод;
		
	КонецЕсли;
	
	ОбработкаБезМаркировки = ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
		И ДанныеШтрихкода.Свойство("ОбработатьБезМаркировки")
		И ДанныеШтрихкода.ОбработатьБезМаркировки;
	
	ОбновляемаяСтрока = ПроверкаИПодборПродукцииИС.ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкода, "ДоступныКодыМаркировкиОстатков");
	ОбновляемаяСтрока.Количество = КоличествоМаркируемыхЕдиниц;
	Если РодительскийШтрихкод <> Неопределено Тогда
		ОбновляемаяСтрока.ШтрихкодУпаковки = РодительскийШтрихкод;
	КонецЕсли;
	
	ПараметрыПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Истина, Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура));
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеШтрихкода);
	
	НайденныеСтрокиТовары = ИсточникДанных.Товары.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
		ОбработатьНайденныеСтрокиВТаблицеТовары(Форма, НайденныеСтрокиТовары, ОбновляемаяСтрока, РезультатОбработки);
		
	Иначе
		
		СтрокаТовары = ИсточникДанных.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ОбновляемаяСтрока);
		СтрокаТовары.КоличествоУпаковок = СтрокаТовары.Количество;
		
		РезультатОбработки.ДобавленныеСтроки.Добавить(СтрокаТовары);
		
	КонецЕсли;
	
	Если Не ОбработкаБезМаркировки Тогда
		
		ПроверкаИПодборПродукцииИС.ДополнитьКешИТаблицуШтрихкодовУпаковок(Форма, ОбновляемаяСтрока);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
		
		РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
			ИсточникДанных.Товары, ИсточникДанных.Организация, ИсточникДанных.ВидПродукции);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

Процедура ОбработатьНайденныеСтрокиВТаблицеТовары(Форма, НайденныеСтрокиТоваров, ОбновляемаяСтрока, РезультатОбработки)
	
	КоличествоМаркируемойПродукции = ОбновляемаяСтрока.Количество;
	
	ВсегоПоПараметрамПоиска = 0;
	Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТоваров Цикл
		ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.Количество;
	КонецЦикла;
	
	ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока);
	
	Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
		КоличествоМаркируемойПродукции = Макс(0, КоличествоМаркируемойПродукции + ВсегоВКеше - ВсегоПоПараметрамПоиска);
	КонецЕсли;
	
	СтрокаТовары = НайденныеСтрокиТоваров[0];
	
	СтрокаТовары.Количество         = СтрокаТовары.Количество + КоличествоМаркируемойПродукции;
	СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок + КоличествоМаркируемойПродукции;
	
	Если КоличествоМаркируемойПродукции > 0 Тогда
		РезультатОбработки.ИзмененныеСтроки.Добавить(СтрокаТовары);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗавершениеПроверкиИПодбораМаркируемойПродукции

// Отражает результаты проверки и подбора в документе, из которого была вызвана соответствующая форма.
//
// Параметры:
// 	ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборМОТП.ЗафиксироватьРезультатПроверкиИПодбора)
Процедура ОтразитьРезультатыПроверкиИПодбора(ПараметрыОкончанияПроверки) Экспорт
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	МассивОбработанныхСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции Цикл
		
		Если СтрокаТаблицы.КоличествоПодобрано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			СтрокаТаблицы.GTIN = "";
		КонецЕсли;
		
		ПараметрыОтбора = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Истина, Истина);
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТаблицы);
		
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТаблицы);
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				СтрокаТовары.GTIN = Неопределено;
			КонецЕсли;
		Иначе
			СтрокаТовары = НайденныеСтроки[0];
		КонецЕсли;
		
		Если МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			СтрокаТовары.Количество = СтрокаТаблицы.КоличествоПодобрано;
			МассивОбработанныхСтрок.Добавить(СтрокаТовары);
		Иначе
			СтрокаТовары.Количество = СтрокаТовары.Количество + СтрокаТаблицы.КоличествоПодобрано;
		КонецЕсли;
		
		ОбработатьСтрокуТабличнойЧасти(СтрокаТовары, ДокументОбъект);
		
	КонецЦикла;
	
	// Удаление лишних строк документа.
	ИндексТабЧастиТовары = ДокументОбъект.Товары.Количество() - 1;
	Пока ИндексТабЧастиТовары >= 0 Цикл
		
		СтрокаТовары = ДокументОбъект.Товары[ИндексТабЧастиТовары];
		Если СтрокаТовары.Количество = 0
		 Или МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			
			ДокументОбъект.Товары.Удалить(СтрокаТовары);
			
		КонецЕсли;
		
		ИндексТабЧастиТовары = ИндексТабЧастиТовары - 1;
	КонецЦикла;
	
	ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, ДокументОбъект)

	ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
	ПустойСклад = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Склад");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ПустойСклад, ПараметрыУказанияСерий));
	
	ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий);
	
КонецПроцедуры

Процедура ЗаполнитьМаркируемуюПродукциюДокумента(ТаблицаМаркируемойПродукции, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеКодовМаркировкиИСМП.Номенклатура,
	|	СписаниеКодовМаркировкиИСМП.Характеристика,
	|	СписаниеКодовМаркировкиИСМП.Серия,
	|	СписаниеКодовМаркировкиИСМП.Количество,
	|	СписаниеКодовМаркировкиИСМП.GTIN
	|ИЗ
	|	Документ.СписаниеКодовМаркировкиИСМП.Товары КАК СписаниеКодовМаркировкиИСМП
	|ГДЕ
	|	СписаниеКодовМаркировкиИСМП.Ссылка = &ДокументСсылка";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
		ДокументСсылка,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидПродукции"),
		ТаблицаМаркируемойПродукции);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее
Процедура СохранитьДанныеОтчетаПроизводственнойЛинии(ДокументСсылка, ДанныеОтчета)
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.ДанныеОтчетаПроизводственнойЛинии.Загрузить(ДанныеОтчета);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТекстОшибкиНеНайденПолныйКод(ИсходнаяСтрока, ИмяКолонки)
	ТекстОшибки = СтрШаблон(
		НСтр("ru = 'Не найден полный код маркировки для %1'"), 
		ИсходнаяСтрока[ИмяКолонки]);
	ИсходнаяСтрока.ТекстОшибки = ?(ЗначениеЗаполнено(ИсходнаяСтрока.ТекстОшибки), ИсходнаяСтрока.ТекстОшибки + Символы.ПС + ТекстОшибки, ТекстОшибки);
КонецПроцедуры

Функция ИнициализироватьНормализованныеДанныеОтчета()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("КодМаркировки",          Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПолныйКодМаркировки",              Новый ОписаниеТипов("Строка"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.СписаниеКодовМаркировкиИСМП, Ограничение);

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли
