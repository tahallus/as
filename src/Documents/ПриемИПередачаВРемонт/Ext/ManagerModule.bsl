#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Контрагент)
	|	И ЗначениеРазрешено(СтруктурнаяЕдиница)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Проведение

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВременнаяТаблицаКурсыВалютСрезПоследних
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаУчета, &ВалютаНациональная, &ВалютаДокумента)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемИПередачаВРемонт.Дата КАК ДатаПриемаВРемонт,
	|	ПриемИПередачаВРемонт.ДатаРемонтВыполнен КАК Период,
	|	&Организация КАК Организация,
	|	ПриемИПередачаВРемонт.ВариантРемонта КАК СостояниеРемонта,
	|	ПриемИПередачаВРемонт.Ссылка КАК Документ,
	|	ПриемИПередачаВРемонт.Ссылка КАК ПриемИПередачаВРемонт,
	|	ПриемИПередачаВРемонт.НаправлениеДеятельности КАК НаправлениеДеятельностиРемонт,
	|	ПриемИПередачаВРемонт.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж КАК СчетУчетаПродажи,
	|	ПриемИПередачаВРемонт.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж КАК СчетУчетаСебестоимость,
	|	ПриемИПередачаВРемонт.Ответственный КАК Ответственный,
	|	ПриемИПередачаВРемонт.Контрагент КАК Контрагент,
	|	ПриемИПередачаВРемонт.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ПриемИПередачаВРемонт.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ПриемИПередачаВРемонт.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ПриемИПередачаВРемонт.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ПриемИПередачаВРемонт.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ПриемИПередачаВРемонт.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	ПриемИПередачаВРемонт.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ПриемИПередачаВРемонт.Договор КАК Договор,
	|	ПриемИПередачаВРемонт.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПриемИПередачаВРемонт.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ПриемИПередачаВРемонт.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ПриемИПередачаВРемонт.Серия КАК Серия,
	|	ПриемИПередачаВРемонт.Номенклатура.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	1 КАК Количество,
	|	ПриемИПередачаВРемонт.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриемИПередачаВРемонт.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПриемИПередачаВРемонт.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ПриемИПередачаВРемонт.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ПриемИПередачаВРемонт.СуммаНДС * ПриемИПередачаВРемонт.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ПриемИПередачаВРемонт.Кратность)
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриемИПередачаВРемонт.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ПриемИПередачаВРемонт.СуммаДокумента * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ПриемИПередачаВРемонт.СуммаДокумента * ПриемИПередачаВРемонт.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ПриемИПередачаВРемонт.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриемИПередачаВРемонт.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПриемИПередачаВРемонт.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ПриемИПередачаВРемонт.СуммаНДС * КурсыРегВалюты.Курс * ПриемИПередачаВРемонт.Кратность / (ПриемИПередачаВРемонт.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ПриемИПередачаВРемонт.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриемИПередачаВРемонт.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ПриемИПередачаВРемонт.СуммаДокумента * КурсыРегВалюты.Курс * ПриемИПередачаВРемонт.Кратность / (ПриемИПередачаВРемонт.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ПриемИПередачаВРемонт.СуммаДокумента
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриемИПередачаВРемонт.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ПриемИПередачаВРемонт.СуммаДокумента
	|			ИНАЧЕ ПриемИПередачаВРемонт.СуммаДокумента * ПриемИПередачаВРемонт.Курс / ПриемИПередачаВРемонт.Кратность
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРег,
	|	ПриемИПередачаВРемонт.ВариантРемонта КАК ВариантРемонта,
	|	ПриемИПередачаВРемонт.ДатаПередачаВСервисныйЦентр КАК ДатаПередачаВСервисныйЦентр,
	|	ПриемИПередачаВРемонт.ДатаРемонтВыполнен КАК ДатаРемонтВыполнен,
	|	ПриемИПередачаВРемонт.ДатаВыдачаИзРемонта КАК ДатаВыдачаИзРемонта,
	|	ПриемИПередачаВРемонт.ПередачаВСервисныйЦентр КАК ПередачаВСервисныйЦентр,
	|	ПриемИПередачаВРемонт.РемонтВыполнен КАК РемонтВыполнен,
	|	ПриемИПередачаВРемонт.ВыдачаИзРемонта КАК ВыдачаИзРемонта,
	|	ПриемИПередачаВРемонт.СервисЦентр КАК СервисЦентр,
	|	ПриемИПередачаВРемонт.СервисЦентр.ВестиРасчетыПоДоговорам КАК СервисЦентрВестиРасчетыПоДоговорам,
	|	ПриемИПередачаВРемонт.СервисЦентр.ВестиРасчетыПоДокументам КАК СервисЦентрВестиРасчетыПоДокументам,
	|	ПриемИПередачаВРемонт.СервисЦентр.ВестиРасчетыПоЗаказам КАК СервисЦентрВестиРасчетыПоЗаказам,
	|	ПриемИПередачаВРемонт.СервисЦентр.ВестиУчетОплатыПоСчетам КАК СервисЦентрВестиУчетОплатыПоСчетам,
	|	ПриемИПередачаВРемонт.СервисЦентр.СчетУчетаРасчетовСПокупателем КАК СервисЦентрСчетУчетаРасчетовСПокупателем,
	|	ПриемИПередачаВРемонт.СервисЦентр.СчетУчетаРасчетовСПоставщиком КАК СервисЦентрСчетУчетаРасчетовСПоставщиком,
	|	ПриемИПередачаВРемонт.ВариантЗавершенияРемонта КАК ВариантЗавершенияРемонта,
	|	ПриемИПередачаВРемонт.Ссылка.Проект КАК Проект
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.ПриемИПередачаВРемонт КАК ПриемИПередачаВРемонт
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыУпрВалюты
	|		ПО (КурсыУпрВалюты.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыРегВалюты
	|		ПО (КурсыРегВалюты.Валюта = &ВалютаНациональная)
	|ГДЕ
	|	ПриемИПередачаВРемонт.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.ДатаРемонтВыполнен КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка КАК ПриемИПередачаВРемонт,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПоставщику КАК СчетУчетаАвансовПоставщику,
	|	ТаблицаДокумента.Ссылка.Договор КАК Договор,
	|	ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельностиПродажи,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетовКуда,
	|	ТаблицаДокумента.Документ КАК Документ,
	|	ТаблицаДокумента.Ссылка.ВариантРемонта КАК ВариантРемонта,
	|	ТаблицаДокумента.Ссылка.ДатаПередачаВСервисныйЦентр КАК ДатаПередачаВСервисныйЦентр,
	|	ТаблицаДокумента.Ссылка.ДатаРемонтВыполнен КАК ДатаРемонтВыполнен,
	|	ТаблицаДокумента.Ссылка.ДатаВыдачаИзРемонта КАК ДатаВыдачаИзРемонта,
	|	ТаблицаДокумента.Ссылка.ПередачаВСервисныйЦентр КАК ПередачаВСервисныйЦентр,
	|	ТаблицаДокумента.Ссылка.РемонтВыполнен КАК РемонтВыполнен,
	|	ТаблицаДокумента.Ссылка.ВыдачаИзРемонта КАК ВыдачаИзРемонта,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.Взаимозачет)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Статья
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|			КОНЕЦ
	|	КОНЕЦ КАК Статья,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.Взаимозачет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.Взаимозачет).Дата
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.Дата
	|	КОНЕЦ КАК ДокументДата,
	|	СУММА(ВЫРАЗИТЬ(ТаблицаДокумента.СуммаПлатежа * КурсыВалютДокументаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютДокументаСрезПоследних.Кратность) КАК ЧИСЛО(15, 2))) КАК Сумма,
	|	СУММА(ТаблицаДокумента.СуммаРасчетов) КАК СуммаВал,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ТаблицаДокумента.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|					ТОГДА ТаблицаДокумента.СуммаРасчетов
	|				ИНАЧЕ ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс / ТаблицаДокумента.Кратность
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаРег,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.ОперацияПоПлатежнымКартам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЭквайринговаяОперация,
	|	ТаблицаДокумента.Документ.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Документ.Дата, ДЕНЬ) КАК ДатаПлатежа
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплата
	|ИЗ
	|	Документ.ПриемИПередачаВРемонт.Предоплата КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалютУчетаСрезПоследних
	|		ПО (КурсыВалютУчетаСрезПоследних.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалютДокументаСрезПоследних
	|		ПО (КурсыВалютДокументаСрезПоследних.Валюта = &ВалютаДокумента)
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.Ссылка.РемонтВыполнен
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Документ,
	|	ТаблицаДокумента.Ссылка.Контрагент,
	|	ТаблицаДокумента.Ссылка.Договор,
	|	ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПокупателя,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПоставщику,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.Взаимозачет)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Статья
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.Взаимозачет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.Взаимозачет).Дата
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.Дата
	|	КОНЕЦ,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДоговорам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоЗаказам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам,
	|	ТаблицаДокумента.Документ.ЭквайринговыйТерминал,
	|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Документ.Дата, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.ОперацияПоПлатежнымКартам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ТаблицаДокумента.Ссылка.ДатаРемонтВыполнен,
	|	ТаблицаДокумента.Ссылка.ВариантРемонта,
	|	ТаблицаДокумента.Ссылка.ДатаПередачаВСервисныйЦентр,
	|	ТаблицаДокумента.Ссылка.ДатаВыдачаИзРемонта,
	|	ТаблицаДокумента.Ссылка.ПередачаВСервисныйЦентр,
	|	ТаблицаДокумента.Ссылка.РемонтВыполнен,
	|	ТаблицаДокумента.Ссылка.ВыдачаИзРемонта,
	|	ТаблицаДокумента.Ссылка.ДатаРемонтВыполнен";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриемИПередачаВРемонт);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ВалютаДокумента", ДокументСсылкаПриемИПередачаВРемонт.ВалютаДокумента);
	
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДатаРемонтВыполнен);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДатаРемонтВыполнен, ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("ИспользоватьСерииНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры);
	
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаНациональная", Константы.НациональнаяВалюта.Получить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если (СтруктураДополнительныеСвойства.ВариантРемонта = Перечисления.ВариантыРемонта.НашаМастерскаяПростойРемонт
		ИЛИ СтруктураДополнительныеСвойства.ВариантРемонта = Перечисления.ВариантыРемонта.СервисЦентр)
		И СтруктураДополнительныеСвойства.РемонтВыполнен Тогда
	
		СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства);
		СформироватьТаблицаДоходыИРасходы(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства);
		СформироватьТаблицаДоходыИРасходыОтложенные(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства);
		
		ПроведениеДокументовУНФ.СформироватьТаблицуПроводок(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства);
		СформироватьТаблицаУправленческий(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства);
		
	КонецЕсли;
	
	СформироватьТаблицаТоварыВРемонте(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСерииНоменклатуры(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства);
	
	Если СтруктураДополнительныеСвойства.ВариантРемонта = Перечисления.ВариантыРемонта.СервисЦентр Тогда
		
		СформироватьТаблицаТоварыПереданныеВРемонте(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства);
		
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаУправленческий(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаУправленческий.Период КАК Период,
	|	ТаблицаУправленческий.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ТаблицаУправленческий.СчетУчетаПродажи КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	0 КАК СуммаВалКт,
	|	ТаблицаУправленческий.Сумма КАК Сумма,
	|	&ОтражениеВыручки КАК Содержание
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	ТаблицаУправленческий.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаДокумента.СчетУчетаАвансовПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.Сумма,
	|	&ЗачетПредоплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.Период КАК Период,
	|		ТаблицаДокумента.Организация КАК Организация,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный КАК СчетУчетаАвансовПокупателяВалютный,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный КАК СчетУчетаРасчетовСПокупателемВалютный,
	|		ТаблицаДокумента.ВалютаРасчетов КАК ВалютаРасчетов,
	|		СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
	|		СУММА(ТаблицаДокумента.Сумма) КАК Сумма
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Период КАК Период,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|			ТаблицаДокумента.СчетУчетаАвансовПокупателя.Валютный КАК СчетУчетаАвансовПокупателяВалютный,
	|			ТаблицаДокумента.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|			ТаблицаДокумента.СчетУчетаРасчетовСПокупателем.Валютный КАК СчетУчетаРасчетовСПокупателемВалютный,
	|			ТаблицаДокумента.ВалютаРасчетов КАК ВалютаРасчетов,
	|			ТаблицаДокумента.СуммаВал КАК СуммаВал,
	|			ТаблицаДокумента.Сумма КАК Сумма
	|		ИЗ
	|			ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя.Валютный,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем.Валютный,
	|			ТаблицаДокумента.Валюта,
	|			0,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаДокумента
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаДокумента.Период,
	|		ТаблицаДокумента.Организация,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателя,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный,
	|		ТаблицаДокумента.ВалютаРасчетов
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаДокумента.Сумма) >= 0.005
	|			ИЛИ СУММА(ТаблицаДокумента.Сумма) <= -0.005
	|			ИЛИ СУММА(ТаблицаДокумента.СуммаВал) >= 0.005
	|			ИЛИ СУММА(ТаблицаДокумента.СуммаВал) <= -0.005)) КАК ТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.УстановитьПараметр("ЗачетПредоплаты", НСтр("ru = 'Зачет предоплаты'"));
	Запрос.УстановитьПараметр("ОтражениеВыручки", НСтр("ru = 'Выручка от продажи'"));
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		НоваяПроводка = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Выборка);
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаУправленческий()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриемИПередачаВРемонт);
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДатаРемонтВыполнен);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДатаРемонтВыполнен, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ВозникновениеОбязательствПокупателя", НСтр("ru='Задолженность покупателя за услуги ремонта'"));
	Запрос.УстановитьПараметр("ЗачетАванса", НСтр("ru='Зачет предоплаты'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("УчетВалютныхОпераций", СтруктураДополнительныеСвойства.УчетВалютныхОпераций);
	
	// Формирование временной таблицы по расчетам с покупателями.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаДокумента.ДатаРемонтВыполнен КАК Дата,
	|	ТаблицаДокумента.ПриемИПередачаВРемонт КАК Заказ,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем КАК СчетУчета,
	|	ТаблицаДокумента.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ТаблицаДокумента.ВалютаРасчетов КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетов,
	|	СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
	|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
	|	СУММА(ВЫБОР
	|			КОГДА &УчетВалютныхОпераций
	|				ТОГДА ТаблицаДокумента.СуммаРег
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРег,
	|	СУММА(ТаблицаДокумента.Сумма) КАК СуммаДляОстатка,
	|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВалДляОстатка,
	|	ВЫРАЗИТЬ(&ВозникновениеОбязательствПокупателя КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателями
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ДатаРемонтВыполнен,
	|	ТаблицаДокумента.ПриемИПередачаВРемонт,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаДокумента.ДатаРемонтВыполнен,
	|	ТаблицаДокумента.ПриемИПередачаВРемонт,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.СчетУчетаАвансовПокупателя,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетов,
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал),
	|	СУММА(ВЫБОР
	|			КОГДА &УчетВалютныхОпераций
	|				ТОГДА ТаблицаДокумента.СуммаРег
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ЗачетАванса КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ДатаРемонтВыполнен,
	|	ТаблицаДокумента.ПриемИПередачаВРемонт,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТаблицаДокумента.ТипРасчетов,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.СчетУчетаАвансовПокупателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаДокумента.ДатаРемонтВыполнен,
	|	ТаблицаДокумента.ПриемИПередачаВРемонт,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетовКуда,
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал),
	|	СУММА(ВЫБОР
	|			КОГДА &УчетВалютныхОпераций
	|				ТОГДА ТаблицаДокумента.СуммаРег
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ЗачетАванса КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ДатаРемонтВыполнен,
	|	ТаблицаДокумента.ПриемИПередачаВРемонт,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетовКуда
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Контрагент,
	|	Договор,
	|	Валюта,
	|	Документ,
	|	ТипРасчетов,
	|	СчетУчета";
	
	Запрос.Выполнить();
	
	// Установка исключительной блокировки контролируемых остатков расчетов с контрагентами.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРасчетыСПокупателями.Организация КАК Организация,
	|	ВременнаяТаблицаРасчетыСПокупателями.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаРасчетыСПокупателями.Договор КАК Договор,
	|	ВременнаяТаблицаРасчетыСПокупателями.Документ КАК Документ,
	|	ВременнаяТаблицаРасчетыСПокупателями.Заказ КАК Заказ,
	|	ВременнаяТаблицаРасчетыСПокупателями.ТипРасчетов КАК ТипРасчетов
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПокупателями";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПокупателями");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	РасчетыПроведениеДокументов.ПодготовитьТаблицуВзаиморасчетовСУчетомАвансов(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства, Ложь);
	
	НомерЗапроса = 0;
	Запрос.Текст = КурсовыеРазницыУНФ.ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПокупателями(Запрос.МенеджерВременныхТаблиц, Истина, НомерЗапроса);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПокупателями", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриемИПередачаВРемонт);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка КАК СчетНаОплату,
	|	ТаблицаДокумента.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ПриемИПередачаВРемонт КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Контрагент.ВестиУчетОплатыПоСчетам
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.СуммаДокумента <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходы(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаДоходыИРасходы.ДатаРемонтВыполнен КАК Период,
	|	ТаблицаДоходыИРасходы.Организация КАК Организация,
	|	ТаблицаДоходыИРасходы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаДоходыИРасходы.Проект КАК Проект,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиРемонт КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи КАК СчетУчета,
	|	ТаблицаДоходыИРасходы.Номенклатура КАК Аналитика,
	|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК СуммаДоходов,
	|	0 КАК СуммаРасходов,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДоходыИРасходы
	|ГДЕ
	|	ТаблицаДоходыИРасходы.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.ДатаРемонтВыполнен,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.СтруктурнаяЕдиница,
	|	ТаблицаДоходыИРасходы.Проект,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиРемонт,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи,
	|	ТаблицаДоходыИРасходы.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.УстановитьПараметр("ОтражениеДоходов", НСтр("ru='Отражение доходов'"));
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыОтложенные(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриемИПередачаВРемонт);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаДокумента.ДатаРемонтВыполнен КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ТаблицаДокумента.НаправлениеДеятельностиРемонт КАК НаправлениеДеятельности,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов,
	|	ТаблицаДокумента.Сумма КАК НеРаспределено
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.Сумма <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыОтложенные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыОтложенные()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаТоварыВРемонте(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасы.ДатаПриемаВРемонт КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.ЭтапыРемонта.ПринятВРемонт) КАК СостояниеРемонта,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Серия КАК Серия,
	|	1 КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗапасы.ДатаПередачаВСервисныйЦентр,
	|	ЗНАЧЕНИЕ(Справочник.ЭтапыРемонта.ВРаботе) КАК СостояниеРемонта,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Серия,
	|	1
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ПередачаВСервисныйЦентр
	|	И ТаблицаЗапасы.ВариантРемонта = ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.СервисЦентр)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасы.ДатаРемонтВыполнен,
	|	ЗНАЧЕНИЕ(Справочник.ЭтапыРемонта.РемонтВыполнен) КАК СостояниеРемонта,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Серия,
	|	1
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.РемонтВыполнен
	|	И ТаблицаЗапасы.ВариантРемонта = ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.СервисЦентр)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗапасы.ДатаВыдачаИзРемонта,
	|	ЗНАЧЕНИЕ(Справочник.ЭтапыРемонта.ВыданПокупателю) КАК СостояниеРемонта,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Серия,
	|	1
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ВыдачаИзРемонта
	|	И ТаблицаЗапасы.ВариантРемонта <> ЗНАЧЕНИЕ(Перечисление.ВариантыРемонта.ПустаяСсылка)";
    		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыВРемонте", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыНаСкладах()

Процедура СформироватьТаблицаТоварыПереданныеВРемонте(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасы.СервисЦентр КАК СервисныйЦентр,
	|	ТаблицаЗапасы.ДатаПередачаВСервисныйЦентр КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Серия КАК Серия,
	|	1 КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ПередачаВСервисныйЦентр
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗапасы.СервисЦентр,
	|	ТаблицаЗапасы.ДатаРемонтВыполнен,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Серия,
	|	1
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.РемонтВыполнен";
    		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПереданныеВРемонте", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаСерииНоменклатуры(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка.Серия) Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасы.ДатаПриемаВРемонт КАК ДатаСобытия,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Серия КАК Серия,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Приход) КАК Операция,
	|	1 КАК Количество,
	|	ТаблицаЗапасы.ДатаПриемаВРемонт КАК Период
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ИспользоватьСерииНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	КОНЕЦПЕРИОДА(ТаблицаЗапасы.ДатаВыдачаИзРемонта, ДЕНЬ),
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Серия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВариантЗавершенияРемонта = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияРемонта.ПереведенВУчетКомпании)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Движение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Расход)
	|	КОНЕЦ,
	|	1,
	|	КОНЕЦПЕРИОДА(ТаблицаЗапасы.ДатаВыдачаИзРемонта, ДЕНЬ)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ИспользоватьСерииНоменклатуры
	|	И ТаблицаЗапасы.ВыдачаИзРемонта";
	
	Результат = Запрос.Выполнить();
	
	Если Не СтруктураДополнительныеСвойства.УчетнаяПолитика.МиграцияСерийНоменклатурыВыполнена Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Результат.Выгрузить());
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Новый ТаблицаЗначений);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Результат.Выгрузить());
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
	КонецЕсли;

	
КонецПроцедуры // СформироватьТаблицаСерииНоменклатуры()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаПриемИПередачаВРемонт, СтруктураДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	СтруктураВременныеТаблицы = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияРасчетыСПокупателямиИзменение"
	// содержат записи, необходимо выполнить контроль взаиморасчетов.
	ДвиженияРасчетыСПокупателями = СтруктураДополнительныеСвойства.РемонтВыполнен И СтруктураВременныеТаблицы.ДвиженияРасчетыСПокупателямиИзменение;
		
	Если ДвиженияРасчетыСПокупателями Тогда

		НомерЗапроса=0;
		НомерЗапросаЗапасыПереданные=0;
		НомерЗапросаРасчетыСПокупателями=0;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДвиженияРасчетыСПокупателямиИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияРасчетыСПокупателямиИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Контрагент КАК КонтрагентПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Договор КАК ДоговорПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Договор.ВалютаРасчетов КАК ВалютаПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Документ КАК ДокументПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Заказ КАК ЗаказПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетовПредставление,
		|	ЛОЖЬ КАК ДвиженияДенежныхДокументов,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение КАК СуммаВалИзменение,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи - ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаПолученныхАвансов,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение + ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаНепогашеннойЗадолженности,
		|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
		|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетов
		|ИЗ
		|	ДвиженияРасчетыСПокупателямиИзменение КАК ДвиженияРасчетыСПокупателямиИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки(&МоментВремени, ) КАК РасчетыСПокупателямиОстатки
		|		ПО ДвиженияРасчетыСПокупателямиИзменение.Организация = РасчетыСПокупателямиОстатки.Организация
		|			И ДвиженияРасчетыСПокупателямиИзменение.Контрагент = РасчетыСПокупателямиОстатки.Контрагент
		|			И ДвиженияРасчетыСПокупателямиИзменение.Договор = РасчетыСПокупателямиОстатки.Договор
		|			И ДвиженияРасчетыСПокупателямиИзменение.Документ = РасчетыСПокупателямиОстатки.Документ
		|			И ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = РасчетыСПокупателямиОстатки.ТипРасчетов
		|			И (ВЫБОР
		|				КОГДА ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|					ТОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) > &СуммаДокумента
		|				ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) < 0
		|			КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментВремени", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		Запрос.УстановитьПараметр("СуммаДокумента", СтруктураДополнительныеСвойства.СуммаДокумента);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();

		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ДокументОбъектПриемИПередачаВРемонт = ДокументСсылкаПриемИПередачаВРемонт.ПолучитьОбъект();
			
			// Отрицательный остаток по расчетам с покупателями.
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			КонтрольОстатковУНФ.РасчетыСПокупателями(ДокументОбъектПриемИПередачаВРемонт, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

#КонецОбласти

#Область ИнтерфейсПечати

Процедура ДобавитьУслугуРемонт(ТаблицаДанных, ПечатнаяФормаТолькоВРублях)
	
	ТипЧисло0 = Новый ОписаниеТипов(Новый КвалификаторыЧисла(15, 0));
	ТипЧисло2 = Новый ОписаниеТипов(Новый КвалификаторыЧисла(15, 2));
	ТипЧисло3 = Новый ОписаниеТипов(Новый КвалификаторыЧисла(15, 3));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	ШаблонТаблицы = Новый ТаблицаЗначений;
	ШаблонТаблицы.Колонки.Добавить("НомерСтроки", ТипЧисло0);
	ШаблонТаблицы.Колонки.Добавить("Содержание", ТипСтрока);
	ШаблонТаблицы.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ШаблонТаблицы.Колонки.Добавить("ПредставлениеНоменклатуры", ТипСтрока);
	ШаблонТаблицы.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	ШаблонТаблицы.Колонки.Добавить("ЗапасКод", ТипСтрока);
	ШаблонТаблицы.Колонки.Добавить("Код", ТипСтрока);
	ШаблонТаблицы.Колонки.Добавить("Артикул", ТипСтрока);
	ШаблонТаблицы.Колонки.Добавить("КодТНВЭД", ТипСтрока);
	ШаблонТаблицы.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ШаблонТаблицы.Колонки.Добавить("ЕдиницаИзмеренияПоОКЕИ_Наименование", ТипСтрока);
	ШаблонТаблицы.Колонки.Добавить("ЕдиницаИзмеренияПоОКЕИ_Код", ТипСтрока);
	ШаблонТаблицы.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ШаблонТаблицы.Колонки.Добавить("ВидУпаковки");
	ШаблонТаблицы.Колонки.Добавить("КоэффициентЕдиницыИзмерения", ТипЧисло0);
	ШаблонТаблицы.Колонки.Добавить("Количество", ТипЧисло3);
	ШаблонТаблицы.Колонки.Добавить("КоличествоВОдномМесте", ТипЧисло3);
	ШаблонТаблицы.Колонки.Добавить("КоличествоМест", ТипЧисло3);
	ШаблонТаблицы.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ШаблонТаблицы.Колонки.Добавить("МассаБрутто", ТипЧисло0);
	ШаблонТаблицы.Колонки.Добавить("Цена", ТипЧисло2);
	ШаблонТаблицы.Колонки.Добавить("Сумма", ТипЧисло2);
	ШаблонТаблицы.Колонки.Добавить("СуммаНДС", ТипЧисло2);
	ШаблонТаблицы.Колонки.Добавить("Всего", ТипЧисло2);
	ШаблонТаблицы.Колонки.Добавить("ПроцентСкидкиНаценки", ТипЧисло0);
	ШаблонТаблицы.Колонки.Добавить("ЕстьСкидка", ТипЧисло0);
	ШаблонТаблицы.Колонки.Добавить("СтранаСсылка", Новый ОписаниеТипов("СправочникСсылка.СтраныМира"));
	ШаблонТаблицы.Колонки.Добавить("СтранаПредставление", ТипСтрока);
	ШаблонТаблицы.Колонки.Добавить("СтранаКод", ТипСтрока);
	ШаблонТаблицы.Колонки.Добавить("ПредставлениеГТД", ТипСтрока);
	// Прослеживаемость
	ШаблонТаблицы.Колонки.Добавить("ДатаОтгрузочногоДокумента");
	ШаблонТаблицы.Колонки.Добавить("НомерОтгрузочногоДокумента");
	ШаблонТаблицы.Колонки.Добавить("Ссылка");
	// Конец Прослеживаемость
	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	
	Для каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		СтрокаДанных.ТаблицаЗапасы = ШаблонТаблицы.Скопировать();
		
		СтрокаЗапасы = СтрокаДанных.ТаблицаЗапасы.Добавить();
		СтрокаЗапасы.Содержание = ?(ПустаяСтрока(СтрокаДанных.ОписаниеРемонта), НСтр("ru ='Ремонт'"), СтрокаДанных.ОписаниеРемонта);
		СтрокаЗапасы.Количество = 1;
		СтрокаЗапасы.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
		СтрокаЗапасы.ЕдиницаИзмеренияПоОКЕИ_Наименование = Справочники.КлассификаторЕдиницИзмерения.шт.Наименование;
		СтрокаЗапасы.ЕдиницаИзмеренияПоОКЕИ_Код = Справочники.КлассификаторЕдиницИзмерения.шт.Код;
		СтрокаЗапасы.КоэффициентЕдиницыИзмерения = 1;
		СтрокаЗапасы.МассаБрутто = 0;
		СтрокаЗапасы.КоличествоВОдномМесте = 0;
		СтрокаЗапасы.КоличествоМест = 0;
		СтрокаЗапасы.Цена = СтрокаДанных.СуммаДокумента;
		СтрокаЗапасы.СтавкаНДС = СтрокаДанных.СтавкаНДС;
		СтрокаЗапасы.СуммаНДС = СтрокаДанных.СуммаНДС;
		СтрокаЗапасы.Сумма = СтрокаДанных.СуммаДокумента;
		СтрокаЗапасы.Всего = СтрокаДанных.СуммаДокумента;
		// Прослеживаемость
		СтрокаЗапасы.ДатаОтгрузочногоДокумента = СтрокаДанных.ДатаОтгрузочногоДокумента;
		СтрокаЗапасы.НомерОтгрузочногоДокумента = СтрокаДанных.НомерОтгрузочногоДокумента;
		СтрокаЗапасы.Ссылка = СтрокаДанных.Ссылка;
		// Конец Прослеживаемость
		
		Если НЕ СтрокаДанных.СуммаВключаетНДС Тогда
			
			СтрокаЗапасы.Всего = СтрокаДанных.СуммаДокумента + СтрокаДанных.СуммаНДС;
			
		КонецЕсли;
		
		Если ПечатнаяФормаТолькоВРублях Тогда
			
			Если СтрокаДанных.РасчетыВУсловныхЕдиницах
				И СтрокаДанных.ВалютаДокументаОригинал <> НациональнаяВалюта Тогда
				
				СтрокаЗапасы.Всего		= ОКР(СтрокаЗапасы.Всего * СтрокаДанных.Курс / СтрокаДанных.Кратность, 2);
				СтрокаЗапасы.Сумма		= ОКР(СтрокаЗапасы.Сумма * СтрокаДанных.Курс / СтрокаДанных.Кратность, 2);
				СтрокаЗапасы.СуммаНДС	= ОКР(СтрокаЗапасы.СуммаНДС * СтрокаДанных.Курс / СтрокаДанных.Кратность, 2);
				СтрокаЗапасы.Цена		= СтрокаЗапасы.Сумма;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеДокументовРегУчет(МассивОбъектов, ИспользоватьФаксимиле, ПечатнаяФормаТолькоВРублях = Истина, Ошибки = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ИспользоватьФаксимиле", ИспользоватьФаксимиле);
	Запрос.УстановитьПараметр("ПечатнаяФормаТолькоВРублях", ПечатнаяФормаТолькоВРублях);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриемИПередачаВРемонт.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(ПриемИПередачаВРемонт.Номер КАК СТРОКА(12)) КАК Номер,
	|	ВЫБОР
	|		КОГДА ПриемИПередачаВРемонт.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ПриемИПередачаВРемонт.Организация.ЦифровойИндексОбособленногоПодразделения
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЦифровойИндексОбособленногоПодразделения,
	|	ПриемИПередачаВРемонт.Дата КАК ДатаДокумента,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправления,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Продажа) КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ПриемИПередачаВРемонт.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ПриемИПередачаВРемонт.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ ПриемИПередачаВРемонт.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА ПриемИПередачаВРемонт.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ПриемИПередачаВРемонт.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ ПриемИПередачаВРемонт.Организация
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ПриемИПередачаВРемонт.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ПриемИПередачаВРемонт.Организация
	|		ИНАЧЕ ПриемИПередачаВРемонт.Организация
	|	КОНЕЦ КАК ОбособленноеПодразделениеПоставщика,
	|	ПриемИПередачаВРемонт.Организация КАК Грузоотправитель,
	|	ПриемИПередачаВРемонт.Организация.Префикс КАК Префикс,
	|	ПриемИПередачаВРемонт.Организация.ФайлФаксимильнаяПечать КАК ФаксимилеПечати,
	|	НЕОПРЕДЕЛЕНО КАК ПредставлениеПодразделения,
	|	ПРЕДСТАВЛЕНИЕ(ПриемИПередачаВРемонт.СтруктурнаяЕдиница) КАК ПредставлениеСкладаСписания,
	|	ВЫБОР
	|		КОГДА ПриемИПередачаВРемонт.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ПриемИПередачаВРемонт.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СтатусУПД,
	|	НЕОПРЕДЕЛЕНО КАК ФаксимилеПустая,
	|	ВЫБОР
	|		КОГДА &ИспользоватьФаксимиле = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДаНет.Да)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ДаНет.Нет)
	|	КОНЕЦ КАК ИспользоватьФаксимиле,
	|	ПриемИПередачаВРемонт.ПодписьРуководителя.Должность КАК ДолжностьРуководителя,
	|	ПриемИПередачаВРемонт.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя,
	|	ПриемИПередачаВРемонт.ПодписьРуководителя.Факсимиле КАК ФаксимилеРуководителя,
	|	ПриемИПередачаВРемонт.ПодписьГлавногоБухгалтера.Должность КАК ДолжностьГлавногоБухгалтера,
	|	ПриемИПередачаВРемонт.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК РасшифровкаПодписиГлавногоБухгалтера,
	|	ПриемИПередачаВРемонт.ПодписьГлавногоБухгалтера.Факсимиле КАК ФаксимилеГлавногоБухгалтера,
	|	ПриемИПередачаВРемонт.ПодписьКладовщика.Должность КАК ДолжностьКладовщика,
	|	ПриемИПередачаВРемонт.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщика,
	|	ПриемИПередачаВРемонт.ПодписьКладовщика.Факсимиле КАК ФаксимилеКладовщика,
	|	ПриемИПередачаВРемонт.Договор.Наименование КАК ПредставлениеОснования,
	|	ПриемИПередачаВРемонт.ОписаниеРемонта КАК ОписаниеРемонта,
	|	НЕОПРЕДЕЛЕНО КАК ОснованиеПечатиСсылка,
	|	ВЫБОР
	|		КОГДА ПриемИПередачаВРемонт.Контрагент.ГоловнойКонтрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ПриемИПередачаВРемонт.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ПриемИПередачаВРемонт.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ ПриемИПередачаВРемонт.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ПриемИПередачаВРемонт.Контрагент.ГоловнойКонтрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ПриемИПередачаВРемонт.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ПриемИПередачаВРемонт.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ ПриемИПередачаВРемонт.Контрагент
	|	КОНЕЦ КАК Покупатель,
	|	ПриемИПередачаВРемонт.Контрагент КАК Грузополучатель,
	|	ПриемИПередачаВРемонт.Контрагент КАК ОбособленноеПодразделениеПокупателя,
	|	ПриемИПередачаВРемонт.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиКонтрагента,
	|	ЕСТЬNULL(ПриемИПередачаВРемонт.Договор.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	ПриемИПередачаВРемонт.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях = ИСТИНА
	|			ТОГДА НациональнаяВалюта.Значение
	|		ИНАЧЕ ПриемИПередачаВРемонт.ВалютаДокумента
	|	КОНЕЦ КАК Валюта,
	|	ПриемИПередачаВРемонт.ВалютаДокумента КАК ВалютаДокументаОригинал,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях = ИСТИНА
	|			ТОГДА НациональнаяВалюта.Значение
	|		ИНАЧЕ ПриемИПередачаВРемонт.ВалютаДокумента
	|	КОНЕЦ КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях = ИСТИНА
	|			ТОГДА НациональнаяВалюта.Значение.НаименованиеПолное
	|		ИНАЧЕ ПриемИПередачаВРемонт.ВалютаДокумента.НаименованиеПолное
	|	КОНЕЦ КАК ВалютаНаименование,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях = ИСТИНА
	|			ТОГДА НациональнаяВалюта.Значение.Код
	|		ИНАЧЕ ПриемИПередачаВРемонт.ВалютаДокумента.Код
	|	КОНЕЦ КАК ВалютаКод,
	|	ПриемИПередачаВРемонт.СтавкаНДС КАК СтавкаНДС,
	|	ПриемИПередачаВРемонт.СуммаНДС КАК СуммаНДС,
	|	ПриемИПередачаВРемонт.СуммаДокумента КАК СуммаДокумента,
	|	ЛОЖЬ КАК ЭтоКорректировка,
	|	ЛОЖЬ КАК ЭтоСводныйСчетФактура,
	|	0 КАК Вес,
	|	0 КАК Объем,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьНомер,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьВыдана,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьДата,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьЛицо,
	|	ПриемИПередачаВРемонт.Организация.БанковскийСчетПоУмолчанию КАК БанковскийСчет,
	|	ПриемИПередачаВРемонт.Контрагент.БанковскийСчетПоУмолчанию КАК БанковскийСчетКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК АдресДоставки,
	|	ПриемИПередачаВРемонт.Договор.Представление КАК Основание,
	|	ПриемИПередачаВРемонт.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ПриемИПередачаВРемонт.Курс КАК Курс,
	|	ПриемИПередачаВРемонт.Кратность КАК Кратность,
	|	ЛОЖЬ КАК ЕстьПрослеживаемыеТовары,
	|	ПриемИПередачаВРемонт.Дата КАК ДатаОтгрузочногоДокумента,
	|	ПриемИПередачаВРемонт.Номер КАК НомерОтгрузочногоДокумента,
	|	НЕОПРЕДЕЛЕНО КАК ОснованиеНомер,
	|	НЕОПРЕДЕЛЕНО КАК ОснованиеДата,
	|	НЕОПРЕДЕЛЕНО КАК ТранспортнаяНакладнаяНомер,
	|	НЕОПРЕДЕЛЕНО КАК ТранспортнаяНакладнаяДата,
	|	НЕОПРЕДЕЛЕНО КАК ТаблицаЗапасы
	|ИЗ
	|	Документ.ПриемИПередачаВРемонт КАК ПриемИПередачаВРемонт,
	|	Константа.НациональнаяВалюта КАК НациональнаяВалюта
	|ГДЕ
	|	ПриемИПередачаВРемонт.Ссылка В(&МассивОбъектов)";
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	ДобавитьУслугуРемонт(ТаблицаДанных, ПечатнаяФормаТолькоВРублях);
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура СформироватьАктВозврата(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати)
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПечатнаяФорма.ПолныйПутьКМакету);
	ПараметрыНоменклатуры = Новый Структура;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемИПередачаВРемонт.Дата КАК ДатаДокумента,
		|	ПриемИПередачаВРемонт.СтруктурнаяЕдиница КАК ПредставлениеСклада,
		|	ПриемИПередачаВРемонт.Номер,
		|	ПриемИПередачаВРемонт.Организация.Префикс КАК Префикс,
		|	ПриемИПередачаВРемонт.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ПриемИПередачаВРемонт.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
		|			ТОГДА ПриемИПередачаВРемонт.Номенклатура.Наименование
		|		ИНАЧЕ ПриемИПередачаВРемонт.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК ПредставлениеНоменклатуры,
		|	ПриемИПередачаВРемонт.Номенклатура КАК Номенклатура,
		|	ПриемИПередачаВРемонт.Характеристика КАК Характеристика,
		|	ПриемИПередачаВРемонт.Серия КАК СерийныйНомер,
		|	ПриемИПередачаВРемонт.Гарантийный КАК Гарантийный,
		|	ПриемИПередачаВРемонт.Контрагент КАК Контрагент,
		|	ПриемИПередачаВРемонт.Контрагент.НомерТелефонаДляПоиска КАК Телефон,
		|	ПриемИПередачаВРемонт.Контрагент.АдресЭПДляПоиска КАК Email,
		|	ПриемИПередачаВРемонт.ОписаниеРемонта КАК Содержание,
		|	ПриемИПередачаВРемонт.Комплектация КАК Комплектация,
		|	ПриемИПередачаВРемонт.ОписаниеМеханическихПовреждений КАК ОписаниеМеханическихПовреждений,
		|	ПриемИПередачаВРемонт.УсловияПриемки,
		|	ПриемИПередачаВРемонт.СуммаНДС,
		|	ПриемИПередачаВРемонт.СуммаДокумента,
		|	ПриемИПередачаВРемонт.ВалютаДокумента,
		|	ПриемИПередачаВРемонт.НалогообложениеНДС,
		|	ПриемИПередачаВРемонт.СуммаВключаетНДС,
		|	ПриемИПередачаВРемонт.Автор,
		|	ПриемИПередачаВРемонт.СрокДействияГарантии,
		|	ПриемИПередачаВРемонт.УсловияГарантии КАК УсловияГарантии,
		|	ПриемИПередачаВРемонт.ГарантияНаРемонт,
		|	ПриемИПередачаВРемонт.ПодписьКладовщика.Должность КАК ДолжностьКладовщика,
		|	ПриемИПередачаВРемонт.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщика,
		|	ПриемИПередачаВРемонт.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиКонтрагента,
		|	ПриемИПередачаВРемонт.Номенклатура.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры
		|ИЗ
		|	Документ.ПриемИПередачаВРемонт КАК ПриемИПередачаВРемонт
		|ГДЕ
		|	ПриемИПередачаВРемонт.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента, Шапка.Номер, Шапка.Префикс);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ШаблонЗаголовка = НСтр("ru ='Возврат из ремонта № %1 от %2'");
		ОбластьМакета.Параметры.ТекстЗаголовка = СтрШаблон(ШаблонЗаголовка, НомерДокумента, ПечатьДокументовУНФ.ПредставлениеДатыВДокументах(Шапка.ДатаДокумента));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Организация = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Контрагент = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,Телефоны,ЭлектроннаяПочта");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ВремяПечати");
		ОбластьМакета.Параметры.ВремяПечати = "Дата и время печати: " + ТекущаяДата();
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Изделие");
		ПараметрыНоменклатуры.Очистить();
		ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", Шапка.ПредставлениеНоменклатуры);
		ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", Шапка.Характеристика);
		ОбластьМакета.Параметры.НоменклатураХарактеристика = ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры);
		ОбластьМакета.Параметры.Комплектация = Шапка.Комплектация;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Шапка.ИспользоватьСерииНоменклатуры Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("СерийныйНомер");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("РаботыШапка");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("РаботыСтрока");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		Если СокрЛП(Шапка.Содержание) = "" Тогда
			ОбластьМакета.Параметры.Содержание = "Ремонт";
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Шапка.СуммаДокумента > 0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Итого");
			ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru ='Всего наименований 1, на сумму '") + ПечатьДокументовУНФ.ФорматСумм(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
			ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
			Если Шапка.СуммаНДС = 0 Тогда
				ОбластьМакета.Параметры.НДС = НСтр("ru='Без налога (НДС)'");
				ОбластьМакета.Параметры.СуммаНДС = НСтр("ru='-'");
			Иначе
				ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru ='В том числе НДС:'"), НСтр("ru ='Сумма НДС:'"));
				ОбластьМакета.Параметры.СуммаНДС = ПечатьДокументовУНФ.ФорматСумм(Шапка.СуммаНДС);
			КонецЕсли;
			ОбластьМакета.Параметры.СуммаДокумента = ПечатьДокументовУНФ.ФорматСумм(Шапка.СуммаДокумента);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 
		
		Если Шапка.ГарантияНаРемонт<>0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Гарантия");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет,"ДополнительныеУсловия", "", Ошибки);
		Если ЗначениеЗаполнено(Шапка.УсловияГарантии)
			И ОбластьМакета <> Неопределено Тогда
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ТекстДополнительныхУсловий = Шапка.УсловияГарантии.ТекстУсловий;
			ЧислоСтрокТекста = СтрЧислоСтрок(ТекстДополнительныхУсловий);
			Для СчетчикСтрок = 1 По ЧислоСтрокТекста Цикл
				
				СтруктураПараметров = Новый Структура("ТекстДополнительныхУсловий", СтрПолучитьСтроку(ТекстДополнительныхУсловий, СчетчикСтрок));
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалПодписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЧек(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати)
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПечатнаяФорма.ПолныйПутьКМакету);
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемИПередачаВРемонт.ДатаВыдачаИзРемонта КАК ДатаДокумента,
		|	ПриемИПередачаВРемонт.СтруктурнаяЕдиница КАК ПредставлениеСклада,
		|	ПриемИПередачаВРемонт.Номер,
		|	ПриемИПередачаВРемонт.Организация.Префикс КАК Префикс,
		|	ПриемИПередачаВРемонт.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ПриемИПередачаВРемонт.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
		|			ТОГДА ПриемИПередачаВРемонт.Номенклатура.Наименование
		|		ИНАЧЕ ПриемИПередачаВРемонт.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК ПредставлениеНоменклатуры,
		|	ПриемИПередачаВРемонт.Номенклатура КАК Номенклатура,
		|	ПриемИПередачаВРемонт.Характеристика КАК Характеристика,
		|	ПриемИПередачаВРемонт.Серия КАК Серия,
		|	ПриемИПередачаВРемонт.Гарантийный КАК Гарантийный,
		|	ПриемИПередачаВРемонт.Контрагент КАК Контрагент,
		|	ПриемИПередачаВРемонт.Контрагент.НомерТелефонаДляПоиска КАК Телефон,
		|	ПриемИПередачаВРемонт.Контрагент.АдресЭПДляПоиска КАК Email,
		|	ПриемИПередачаВРемонт.ОписаниеРемонта КАК Содержание,
		|	ПриемИПередачаВРемонт.Комплектация КАК Комплектация,
		|	ПриемИПередачаВРемонт.ОписаниеМеханическихПовреждений КАК ОписаниеМеханическихПовреждений,
		|	ПриемИПередачаВРемонт.УсловияПриемки,
		|	ПриемИПередачаВРемонт.СтавкаНДС КАК СтавкаНДС,
		|	ПриемИПередачаВРемонт.СуммаНДС,
		|	ПриемИПередачаВРемонт.СуммаДокумента,
		|	ПриемИПередачаВРемонт.ВалютаДокумента,
		|	ПриемИПередачаВРемонт.НалогообложениеНДС,
		|	ПриемИПередачаВРемонт.СуммаВключаетНДС,
		|	ПриемИПередачаВРемонт.Автор,
		|	ПриемИПередачаВРемонт.СрокДействияГарантии,
		|	ПриемИПередачаВРемонт.УсловияГарантии КАК УсловияГарантии,
		|	ПриемИПередачаВРемонт.ПодписьКладовщика.Должность КАК ДолжностьКладовщика,
		|	ПриемИПередачаВРемонт.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщика,
		|	ПриемИПередачаВРемонт.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиКонтрагента,
		|	ПриемИПередачаВРемонт.ГарантияНаРемонт
		|ИЗ
		|	Документ.ПриемИПередачаВРемонт КАК ПриемИПередачаВРемонт
		|ГДЕ
		|	ПриемИПередачаВРемонт.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента, Шапка.Номер, Шапка.Префикс);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ШаблонЗаголовка = НСтр("ru ='Товарный чек № %1 от %2'");
		ОбластьМакета.Параметры.ТекстЗаголовка = СтрШаблон(ШаблонЗаголовка, НомерДокумента, ПечатьДокументовУНФ.ПредставлениеДатыВДокументах(Шапка.ДатаДокумента));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Организация = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Контрагент = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,Телефоны,ЭлектроннаяПочта");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("РаботыШапка");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("РаботыСтрока");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		Если СокрЛП(Шапка.Содержание) = "" Тогда
			ОбластьМакета.Параметры.Содержание = НСтр("ru ='Ремонт'");
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Шапка.СуммаДокумента > 0 Тогда
			
			ЕстьСтавкаНольПроцентов = (Шапка.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
			
			ОбластьМакета = Макет.ПолучитьОбласть("Итого");
			ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru ='Всего наименований 1, на сумму '") + ПечатьДокументовУНФ.ФорматСумм(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
			ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
			ОбластьМакета.Параметры.НДС = ПечатьДокументовУНФ.ПредставлениеЗаголовкаНДС(Шапка.СуммаНДС, Шапка.СуммаВключаетНДС, Ложь, ЕстьСтавкаНольПроцентов);
			ОбластьМакета.Параметры.СуммаНДС = ?(Шапка.СуммаНДС = 0 И НЕ ЕстьСтавкаНольПроцентов, "-", ПечатьДокументовУНФ.ФорматСумм(Шапка.СуммаНДС, , "0,00"));
			ОбластьМакета.Параметры.СуммаДокумента = ПечатьДокументовУНФ.ФорматСумм(Шапка.СуммаДокумента);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли; 
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьТалонПриемки(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати)
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПечатнаяФорма.ПолныйПутьКМакету);
	ПараметрыНоменклатуры = Новый Структура;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемИПередачаВРемонт.Дата КАК ДатаДокумента,
		|	ПриемИПередачаВРемонт.СтруктурнаяЕдиница КАК ПредставлениеСклада,
		|	ПриемИПередачаВРемонт.Номер КАК Номер,
		|	ПриемИПередачаВРемонт.Организация.Префикс КАК Префикс,
		|	ПриемИПередачаВРемонт.Организация.ФайлЛоготип КАК ФайлЛоготип,
		|	ПриемИПередачаВРемонт.Организация КАК Организация,
		|	ПриемИПередачаВРемонт.Номенклатура.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ПриемИПередачаВРемонт.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
		|			ТОГДА ПриемИПередачаВРемонт.Номенклатура.Наименование
		|		ИНАЧЕ ПриемИПередачаВРемонт.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК ПредставлениеНоменклатуры,
		|	ПриемИПередачаВРемонт.Номенклатура КАК Номенклатура,
		|	ПриемИПередачаВРемонт.Характеристика КАК Характеристика,
		|	ПриемИПередачаВРемонт.Номенклатура.Артикул КАК Артикул,
		|	ПриемИПередачаВРемонт.Номенклатура.Штрихкод КАК Штрихкод,
		|	ПриемИПередачаВРемонт.Номенклатура.Код КАК Код,
		|	ПриемИПередачаВРемонт.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|	ПриемИПередачаВРемонт.Серия КАК СерийныйНомер,
		|	ПриемИПередачаВРемонт.Гарантийный КАК Гарантийный,
		|	ПриемИПередачаВРемонт.Контрагент КАК Контрагент,
		|	ПриемИПередачаВРемонт.Контрагент.НомерТелефонаДляПоиска КАК Телефон,
		|	ПриемИПередачаВРемонт.Контрагент.АдресЭПДляПоиска КАК Email,
		|	ПриемИПередачаВРемонт.ОписаниеНеисправности КАК Содержание,
		|	ПриемИПередачаВРемонт.Комплектация КАК Комплектация,
		|	ПриемИПередачаВРемонт.ДатаОкончанияРемонта КАК ДатаОкончанияРемонта,
		|	ПриемИПередачаВРемонт.ОписаниеМеханическихПовреждений КАК ОписаниеМеханическихПовреждений,
		|	ПриемИПередачаВРемонт.УсловияПриемки КАК УсловияПриемки,
		|	ПриемИПередачаВРемонт.ПодписьКладовщика.Должность КАК ДолжностьКладовщика,
		|	ПриемИПередачаВРемонт.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщика,
		|	ПриемИПередачаВРемонт.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиКонтрагента,
		|	ПриемИПередачаВРемонт.Номенклатура.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры
		|ИЗ
		|	Документ.ПриемИПередачаВРемонт КАК ПриемИПередачаВРемонт
		|ГДЕ
		|	ПриемИПередачаВРемонт.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента, Шапка.Номер, Шапка.Префикс);
		
		Если ЗначениеЗаполнено(Шапка.ФайлЛоготип) Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСЛоготипом");
			
			ДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(Шапка.ФайлЛоготип);
			Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
				
				ОбластьМакета.Рисунки.Логотип.Картинка = Новый Картинка(ДанныеКартинки);
				
			КонецЕсли;
			
		Иначе // Если картинки не выбраны печатаем обычный заголовок
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			
		КонецЕсли;
		
		ШаблонЗаголовка = НСтр("ru ='Поступление в ремонт № %1 от %2'");
		ОбластьМакета.Параметры.ТекстЗаголовка = СтрШаблон(ШаблонЗаголовка, НомерДокумента, ПечатьДокументовУНФ.ПредставлениеДатыВДокументах(Шапка.ДатаДокумента));
		
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		
		ОбластьМакета.Параметры.Организация = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Контрагент");
		ОбластьМакета.Параметры.Контрагент = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование");
		ОбластьМакета.Параметры.ТелефонКонтрагента = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбКонтрагенте, "Телефоны");
		ОбластьМакета.Параметры.EmailКонтрагента = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбКонтрагенте, "ЭлектроннаяПочта");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Гарантия");
		ОбластьМакета.Параметры[?(Шапка.Гарантийный, "Гарантия", "НеГарантия")] = НСтр("ru ='X'");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ВремяПечати");
		ОбластьМакета.Параметры.ВремяПечати = НСтр("ru ='Дата и время печати: '") + ТекущаяДата();
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Изделие");
		ПараметрыНоменклатуры.Очистить();
		ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", Шапка.ПредставлениеНоменклатуры);
		ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", Шапка.Характеристика);
		ОбластьМакета.Параметры.НоменклатураХарактеристика = ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Шапка.ИспользоватьСерииНоменклатуры Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("СерийныйНомер");
			ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИзделиеОписание");
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если СокрЛП(Шапка.ОписаниеМеханическихПовреждений)<>"" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("МеханическиеПовреждения");
			ОбластьМакета.Параметры.ОписаниеМеханическихПовреждений = Шапка.ОписаниеМеханическихПовреждений;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет,"ДополнительныеУсловия", "", Ошибки);
		Если ЗначениеЗаполнено(Шапка.УсловияПриемки)
			И ОбластьМакета <> Неопределено Тогда
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ТекстДополнительныхУсловий = Шапка.УсловияПриемки.ТекстУсловий;
			ЧислоСтрокТекста = СтрЧислоСтрок(ТекстДополнительныхУсловий);
			Для СчетчикСтрок = 1 По ЧислоСтрокТекста Цикл
				
				СтруктураПараметров = Новый Структура("ТекстДополнительныхУсловий", СтрПолучитьСтроку(ТекстДополнительныхУсловий, СчетчикСтрок));
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьМакета = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "ПодвалПодписи", "", Ошибки);
		Если ОбластьМакета <> Неопределено Тогда
			
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ПФ_MXL_ТалонПриемки");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемИПередачаВРемонт_ТалонПриемки";
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.ПриемИПередачаВРемонт.ПФ_MXL_ТалонПриемки";
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Талон приемки'");
		
		СформироватьТалонПриемки(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати);
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ПФ_MXL_АктВозврата");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемИПередачаВРемонт_АктВозврата";
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.ПриемИПередачаВРемонт.ПФ_MXL_АктВозврата";
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Акт возврата'");
		
		СформироватьАктВозврата(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати);
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ПФ_MXL_ЧекРемонт");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемИПередачаВРемонт_ЧекРемонт";
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.ПриемИПередачаВРемонт.ПФ_MXL_ЧекРемонт";
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Товарный чек'");
		
		СформироватьЧек(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов,
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_ТалонПриемки";
	КомандаПечати.Представление = НСтр("ru = 'Талон приемки'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_АктВозврата";
	КомандаПечати.Представление = НСтр("ru = 'Акт возврата'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 4;

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_ЧекРемонт";
	КомандаПечати.Представление = НСтр("ru = 'Товарный чек'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 7;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Обработка.ПечатьСчетФактура.СчетФактура";
	КомандаПечати.Представление = Обработки.ПечатьСчетФактура.ПредставлениеПФ(Ложь, Ложь);
	КомандаПечати.ФункциональныеОпции = "ПередачаТоваровНаКомиссию,ПриемТоваровНаКомиссию,ИспользуетсяОСНО,ИспользоватьСчетаФактурыИсходящие";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 10;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Обработка.ПечатьСчетФактура.УниверсальныйПередаточныйДокумент";
	КомандаПечати.Представление = Обработки.ПечатьСчетФактура.ПредставлениеПФ(Истина, Ложь);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 14;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Обработка.ПечатьСчетФактура.УниверсальныйПередаточныйДокументФаксимиле";
	КомандаПечати.Представление = Обработки.ПечатьСчетФактура.ПредставлениеПФ(Истина, Истина);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
	КомандаПечати.Порядок = 17;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсРабочегоПроцесса

Функция РеквизитыНедоступныеДляИсточникаРабочегоПроцесса(ТипДействия = Неопределено) Экспорт
	
	НедоступныеРеквизиты = Новый Массив;
	
	Возврат НедоступныеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли