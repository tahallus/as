
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()

	УсловноеОформление.Элементы.Очистить();

	ИмяПоляПроверятьЗаполнениеХарактеристики = "ПроверятьЗаполнениеХарактеристики";
	ИмяПоляХарактеристики = "Характеристика";

	НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор,
		ИмяПоляПроверятьЗаполнениеХарактеристики, Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);

	НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор,
		ИмяПоляПроверятьЗаполнениеХарактеристики, Ложь, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);

	НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Характеристика",
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюПечатьФаксимиле);
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	ВариантРемонта = Объект.ВариантРемонта;
	Если ЗначениеЗаполнено(Договор) Тогда
		ВалютаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВалютаРасчетов");
	КонецЕсли;
	НациональнаяВалюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Объект.СтавкаНДС = ?(Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС, Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса())), УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
		Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка = Истина;
	КонецЕсли;
	
	ПолучитьПодчиненныеДокументыРемонта();
	ДокументОприходованияСсылка = ПолучитьПодчиненныйДокументОприходования();
	
	ОбновитьРеквизитыВидимостиФормы();
	ОбновитьДокументПродажи();
	ОбновитьВидимостьОтДоступностиЗаказНаряда();
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ОбновитьНадписьЦеныИВалюта(ЭтотОбъект);
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ВерсияПодчиненногоСчетФактуры", Неопределено);
	КэшЗначений.Вставить("МодифицированностьФормы", Ложь);
	
	// Установить надписи счет-фактура и основание
	СчетФактураСсылка = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Ложь);
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(
		СчетФактураСсылка);
	КэшЗначений.Вставить("СчетФактураСсылка", ?(ТипЗнч(СчетФактураСсылка) = Тип("Структура"), СчетФактураСсылка.Ссылка,
		Неопределено));
	
	// Установка видимости договора.
	УстановитьВидимостьДоговора();
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	// Конец ПодключаемоеОборудование
	
	ВосстановитьНастройки();
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(
		Объект.Предоплата, Объект.ВалютаДокумента);
	
	ОбновитьСостояниеРемонта(Объект);
	
	УстановитьУсловноеОформлениеФормы();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Функция возвращает ссылку на подчиненный счет-фактуру
//
&НаСервере
Функция ПолучитьПодчиненныеДокументыРемонта() Экспорт

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокРемонта.Ссылка КАК Ссылка,
	|	ДокРемонта.Дата КАК Дата,
	|	ДокРемонта.СуммаДокумента КАК СуммаДокумента,
	|	ДокРемонта.ВалютаДокумента.СимвольноеПредставление КАК Валюта
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ДокРемонта
	|ГДЕ
	|	ДокРемонта.ДокументОснование = &ДокументОснование
	|	И НЕ ДокРемонта.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокРемонта.Ссылка,
	|	ДокРемонта.Дата,
	|	ДокРемонта.СуммаДокумента,
	|	ДокРемонта.ВалютаДокумента.СимвольноеПредставление
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ДокРемонта
	|ГДЕ
	|	ДокРемонта.ДокументОснование = &ДокументОснование
	|	И НЕ ДокРемонта.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокРемонта.Ссылка,
	|	ДокРемонта.Дата,
	|	ДокРемонта.СуммаДокумента,
	|	ДокРемонта.ВалютаДокумента.СимвольноеПредставление
	|ИЗ
	|	Документ.РасходнаяНакладная КАК ДокРемонта
	|ГДЕ
	|	ДокРемонта.ДокументОснование = &ДокументОснование
	|	И НЕ ДокРемонта.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	СуммаВсего = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДобавитьМетку(Выборка.Ссылка, Выборка.СуммаДокумента, Выборка.Валюта);
		
		СуммаВсего = СуммаВсего + Выборка.СуммаДокумента;
	КонецЦикла;
	
	ОбновитьЭлементыМеток();

	Если Объект.СуммаДокумента < СуммаВсего Тогда
		Объект.СуммаДокумента = СуммаВсего;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйДокументОприходования() Экспорт

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ Объект.ВариантЗавершенияРемонта = Перечисления.ВариантыЗавершенияРемонта.ПереведенВУчетКомпании Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокРемонта.Ссылка КАК Ссылка,
	|	ДокРемонта.Дата КАК Дата
	|ИЗ
	|	Документ.ОприходованиеЗапасов КАК ДокРемонта
	|ГДЕ
	|	ДокРемонта.ДокументОснование = &ДокументОснование
	|	И НЕ ДокРемонта.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокРемонта.Ссылка,
	|	ДокРемонта.Дата
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ДокРемонта
	|ГДЕ
	|	ДокРемонта.ДокументОснование = &ДокументОснование
	|	И НЕ ДокРемонта.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбновитьВидимостьОтДоступностиЗаказНаряда()
	
	ЗаказНарядДоступен = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы");
	Элементы.ДобавитьЗаказНаряд.Видимость = ЗаказНарядДоступен;
	Если НЕ ЗаказНарядДоступен Тогда
		
		ИсходныйТекст = "Заказ-наряд, Акт";
		// АПК:1036-выкл - краткое представление накладной
		ТекстБезЗаказНарядаСокр = "Акт, Расходная накл.";
		// АПК:1036-вкл
		ТекстБезЗаказНарядаПолн = "Акт, Расходная накладная";
		
		Элементы.Декорация31.Заголовок = СтрЗаменить(Элементы.Декорация31.Заголовок, ИсходныйТекст, ТекстБезЗаказНарядаСокр);
		Элементы.Декорация32.Заголовок = СтрЗаменить(Элементы.Декорация32.Заголовок, "Заказ-наряд и др.", "Расходная накладная");
		Элементы.ВариантРемонта.СписокВыбора.НайтиПоЗначению(Перечисления.ВариантыРемонта.НашаМастерскаяМногоэтапныйРемонт).Представление = 
			СтрЗаменить(Перечисления.ВариантыРемонта.НашаМастерскаяМногоэтапныйРемонт, ИсходныйТекст, ТекстБезЗаказНарядаПолн);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	СохраняемоеЗначение = Новый Массив;
	спВыбора = Элементы.ОписаниеМеханическихПовреждений.СписокВыбора;
	Для н=0 По Мин(4, спВыбора.Количество()-1) Цикл
		Если СокрЛП(спВыбора[н].Значение)="" Тогда
			Продолжить;
		КонецЕсли;
		СохраняемоеЗначение.Добавить(спВыбора[н].Значение);
	КонецЦикла;
	
	ХранилищеСистемныхНастроек.Сохранить(Объект.Ссылка.Метаданные().Имя, "ОписаниеМеханическихПовреждений", СохраняемоеЗначение);
	ХранилищеСистемныхНастроек.Сохранить(Объект.Ссылка.Метаданные().Имя, "УсловияПриемки", Объект.УсловияПриемки);
	ХранилищеСистемныхНастроек.Сохранить(Объект.Ссылка.Метаданные().Имя, "УсловияГарантии", Объект.УсловияГарантии);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	СохраненноеЗначение = ХранилищеСистемныхНастроек.Загрузить(Объект.Ссылка.Метаданные().Имя, "ОписаниеМеханическихПовреждений");
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Элементы.ОписаниеМеханическихПовреждений.СписокВыбора.ЗагрузитьЗначения(СохраненноеЗначение);
	КонецЕсли; 
	
	Объект.УсловияПриемки = ХранилищеСистемныхНастроек.Загрузить(Объект.Ссылка.Метаданные().Имя, "УсловияПриемки");
	Объект.УсловияГарантии = ХранилищеСистемныхНастроек.Загрузить(Объект.Ссылка.Метаданные().Имя, "УсловияГарантии");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УправлениеФормой();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ВерсияПодчиненногоСчетФактуры", КэшЗначений.ВерсияПодчиненногоСчетФактуры);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка) И ТекущийОбъект.ПередачаВСервисныйЦентр И ТекущийОбъект.Дата > ТекущийОбъект.ДатаПередачаВСервисныйЦентр Тогда
		// Если пользователь установил ДатаПередачаВСервисныйЦентр в новом документе до записи, она будет меньше даты и
		// времени записи документа
		ТекущийОбъект.Дата = ТекущийОбъект.ДатаПередачаВСервисныйЦентр;
	КонецЕсли; 
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	 УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьРеквизитыВидимостиФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	КэшЗначений.МодифицированностьФормы = Модифицированность;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Если КэшЗначений.МодифицированностьФормы = Истина
		И КэшЗначений.ВерсияПодчиненногоСчетФактуры = "1.6.11" Тогда
		
		ТекстВопроса = НСтр("ru = 'В накладную были внесены изменения.
			|Требуется самостоятельно поправить подчиненный документ счет-фактура'");
		
		ПоказатьПредупреждение(, ТекстВопроса, 0, НСтр("ru ='Счет-фактура'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура ДекорацияПечатьНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиПриемИПередачаВРемонт", Новый Структура("КонтекстПечати", Объект), ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры // ДанныеПечати()

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ПриемИПередачаВРемонт"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеСтруктурнойЕдиницыПриИзменении(Объект.СтруктурнаяЕдиница);
	
	Объект.ПодписьКладовщика = СтруктураДанные.ПодписьКладовщика;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.ОписаниеРемонта", "Описание ремонта");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СчетаФактурыУНФКлиент.ОткрытьСчетФактуру(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении();
	Компания = СтруктураДанные.Компания;
	
	ОбновитьНадписьЦеныИВалюта(ЭтотОбъект);
	
	Объект.ПодписьРуководителя = СтруктураДанные.ПодписьРуководителя;
	Объект.ПодписьГлавногоБухгалтера = СтруктураДанные.ПодписьГлавногоБухгалтера;
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация);
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтруктурнойЕдиницыПриИзменении(СтруктурнаяЕдиница)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить("ПодписьКладовщика", СтруктурнаяЕдиница.ПодписьМОЛ);
	
	Возврат СтруктураДанные;
	
КонецФункции

// Получает набор данных с сервера.
//
&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении()
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", Константы.УчетПоКомпании.Компания(Объект.Организация));
	СтруктураДанные.Вставить("ПодписьРуководителя", Объект.Организация.ПодписьРуководителя);
	СтруктураДанные.Вставить("ПодписьГлавногоБухгалтера", Объект.Организация.ПодписьГлавногоБухгалтера);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения
// организации.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(ЭтоОткрытие = Ложь)
	
	Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
	
	ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
		Элементы.СчетФактураНадпись.Видимость = Истина;
	Иначе
		Элементы.СчетФактураНадпись.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура",Объект.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",Объект.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикДляНоменклатуры(СтруктураДанные);
	
	ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	ПроверятьЗаполнениеХарактеристики =  СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	
	Если ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			Объект.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
		Иначе
			Объект.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	ОбновитьУсловияГарантии();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика");
		КонецЕсли;
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	ОбновитьУсловияГарантии();
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыВидимостиФормы()
	
	СтрокаРеквизитов = "ГарантийныйСрок,ИспользоватьСерииНоменклатуры,ВыписыватьГарантийныйТалон,ИспользоватьХарактеристики,ПроверятьЗаполнениеХарактеристики";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Номенклатура, СтрокаРеквизитов);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияРеквизитов, СтрокаРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловияГарантии()
	
	// Пересчитать условия гарантии и записать в реквизиты документа
	ОбновитьСрокДействияГарантии();
	ОбновитьРеквизитыВидимостиФормы();

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС();
	
КонецПроцедуры // СуммаПриИзменении()

&НаКлиенте
Процедура ПересчитатьСуммуНДС()
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДС);
			
	Объект.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
		Объект.СуммаДокумента - (Объект.СуммаДокумента) / ((СтавкаНДС + 100) / 100),
		Объект.СуммаДокумента * СтавкаНДС / 100);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	КонтрагентВестиРасчетыПоЗаказамПередИзменением = КонтрагентВестиРасчетыПоЗаказам;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		ВидимостьДоговораПередИзменением = Элементы.Договор.Видимость;
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Контрагент, Объект.Организация);
		
		Объект.Договор = СтруктураДанные.Договор;
		Объект.КонтактноеЛицоПодписант = СтруктураДанные.КонтактноеЛицоПодписант;
		ДоговорПередИзменением = Договор;
		Договор = Объект.Договор;
		
		Если СтруктураДанные.Свойство("Проект") Тогда
			Объект.Проект = СтруктураДанные.Проект;
		КонецЕсли;
	
		Если Объект.Предоплата.Количество() > 0
			И Объект.Договор <> ДоговорПередИзменением Тогда
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("ИзменениеКонтрагента", Истина);
			ПараметрыДокумента.Вставить("ДанныеДоговора", СтруктураДанные);
			ПараметрыДокумента.Вставить("КонтрагентПередИзменением", КонтрагентПередИзменением);
			ПараметрыДокумента.Вставить("КонтрагентВестиРасчетыПоЗаказамПередИзменением", КонтрагентВестиРасчетыПоЗаказамПередИзменением);
			ПараметрыДокумента.Вставить("ВидимостьДоговораПередИзменением", ВидимостьДоговораПередИзменением);
			ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбОчисткеПредоплатыЗавершение", ЭтотОбъект, ПараметрыДокумента);
			ТекстВопроса = НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ОбработатьИзменениеУсловийДоговора(СтруктураДанные, ДоговорПередИзменением);
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищенный договор.
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииОбновитьДоговор()

	ДанныеДоговора = ПолучитьДанныеКонтрагентПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Контрагент,
		Объект.Организация);

	Объект.Договор = ДанныеДоговора.Договор;
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;

	ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;

	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;

	Если Не ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
		Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.Курс = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1,
			ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1,
			ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
	КонецЕсли;

	ОбновитьНадписьЦеныИВалюта(ЭтотОбъект);

	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(
		Объект.Предоплата, Объект.ВалютаДокумента);

КонецПроцедуры

// Процедура обрабатывает изменение реквизитов документов Вид цен и Валюта расчетов.
//
&НаКлиенте
Процедура ОбработатьИзменениеУсловийДоговора(ДанныеДоговора, ДоговорПередИзменением)
	
	ВалютаРасчетовПередИзменением = ВалютаРасчетов;
	ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
	
	Если Не ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
		Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Курс      = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
	КонецЕсли;
	
	
	ОткрытьФормуЦеныИВалюты = (ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов)
		И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеДоговора.ВалютаРасчетов)
		И Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
		И Объект.СуммаДокумента > 0;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
	ПараметрыДокумента.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением);
	ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
	
	Объект.ВалютаДокумента = ВалютаРасчетов;
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом! 
										|Необходимо проверить валюту документа!'");
		
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Ложь, Истина, ТекстПредупреждения);
		
	Иначе
		
		ОбновитьНадписьЦеныИВалюта(ЭтотОбъект);
		
	КонецЕсли;	

	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
КонецПроцедуры // ОбработатьИзменениеУсловийДоговора()

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Дата, ВалютаДокумента, Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"КонтактноеЛицоПодписант",
		Контрагент.КонтактноеЛицоПодписант
	);
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию
	);
		
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорПоУмолчанию.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		ДоговорПоУмолчанию.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		Неопределено
	);
	
	Если ПолучитьФункциональнуюОпцию("УчетПоПроектам") И ЗначениеЗаполнено(ДоговорПоУмолчанию) И НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		СтруктураДанные.Вставить("Проект", Справочники.Проекты.ПолучитьПроектПоДоговору(ДоговорПоУмолчанию));
	КонецЕсли;
	
	УстановитьВидимостьДоговора();
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Контрагент.АвтоМаксимальнаяШирина = Не Элементы.ОстатокВзаиморасчетов.Видимость;
	
	Если НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		// Только для новых объектов
		Возврат;
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	
КонецПроцедуры

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			Если СтруктураНадписи.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
				ТекстНадписи = ТекстНадписи + НСтр("ru = ' %Курс%'");
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(СтруктураНадписи.ВалютаДокумента)));
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Курс%", СокрЛП(Строка(СтруктураНадписи.Курс)));
			Иначе
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	// Налогообложение НДС
	Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %НалогообложениеНДС%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", РаботаСФормойДокументаКлиентСервер.КраткоеПредставлениеТипаНалогообложенияНДС(СтруктураНадписи.НалогообложениеНДС));
	КонецЕсли;
	
	// Флаг сумма включает НДС
	Если ПустаяСтрока(ТекстНадписи) Тогда	
		Если СтруктураНадписи.СуммаВключаетНДС Тогда
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // ТекстНадписиЦеныИВалюта()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ТекстПредупреждения = "")
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТолькоПросмотр", 		  ЭтотОбъект.ТолькоПросмотр);
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			  Объект.Кратность);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	  Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость", Объект.НДСВключатьВСтоимость);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.Договор);
	СтруктураПараметров.Вставить("Организация",			  Компания);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("ТекстПредупреждения",   ТекстПредупреждения);
	
	// Открываем форму "Цены и Валюта".
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
// Процедура-обработчик результата открытия формы "Цены и валюты"
//
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураЦеныИВалюта = РезультатЗакрытия;
	ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		Объект.ВалютаДокумента = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.Курс = СтруктураЦеныИВалюта.КурсРасчетов;
		Объект.Кратность = СтруктураЦеныИВалюта.КратностьРасчетов;
		Объект.НалогообложениеНДС = СтруктураЦеныИВалюта.НалогообложениеНДС;
		Объект.СуммаВключаетНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.НДСВключатьВСтоимость = СтруктураЦеныИВалюта.НДСВключатьВСтоимость;
		
		Если НЕ СтруктураЦеныИВалюта.ПерезаполнитьЦены
			  И СтруктураЦеныИВалюта.ПересчитатьЦены Тогда	
			
			СтруктураКурсы = ЦенообразованиеСервер.ПолучитьКурсыВалют(ВалютаРасчетовПередИзменением, Объект.ВалютаДокумента, Объект.Дата);
			
			Объект.СуммаДокумента = ВалютыУНФКлиентСервер.Пересчитать(Объект.СуммаДокумента, 
																	СтруктураКурсы.КурсНач, 
																	СтруктураКурсы.Курс, 
																	СтруктураКурсы.КратностьНач, 
																	СтруктураКурсы.Кратность);
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС 
			ИЛИ СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС
			Тогда
			
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));  
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьНадписьЦеныИВалюта(ЭтотОбъект);
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если НЕ Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		Элементы.СтавкаНДС.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.СчетФактураНадпись.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			Объект.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			Объект.СтавкаНДС =  УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
		
		Объект.СуммаНДС = 0;
	Иначе
		Элементы.СтавкаНДС.Видимость = Истина;
		Элементы.СуммаНДС.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
		
		Объект.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДС);
		Объект.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
			Объект.СуммаДокумента - (Объект.СуммаДокумента) / ((СтавкаНДС + 100) / 100),
			Объект.СуммаДокумента * СтавкаНДС / 100);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	
	СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС", 
		Объект.ВалютаДокумента, 
		Форма.ВалютаРасчетов, 
		Объект.Курс, 
		Форма.КурсНациональнаяВалюта, 
		Объект.СуммаВключаетНДС, 
		Форма.УчетВалютныхОпераций, 
		Объект.НалогообложениеНДС);
		
	Форма.ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры

// Получает договор по умолчанию в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	Если Контрагент.ВестиРасчетыПоДоговорам = Ложь Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Процедура устанавливает видимость договора в зависимости от установленного параметра контрагенту.
//
&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ПараметрыРасчетовСКонтрагентом = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "ВестиРасчетыПоЗаказам, ВестиРасчетыПоДоговорам");
		
		КонтрагентВестиРасчетыПоЗаказам = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоЗаказам;
		Элементы.Договор.Видимость = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоДоговорам;
		
	Иначе
		
		КонтрагентВестиРасчетыПоЗаказам = Ложь;
		Элементы.Договор.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

// Процедура - обработчик события ПриИзменении поля ввода Договор.
// Заполняет реквизиты формы курс и кратность.
//
&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры // ДоговорПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Договор.
//
&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговора()
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
		
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		ДанныеДоговора = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Договор);
		
		Если Объект.Предоплата.Количество() > 0
			И Объект.Договор <> ДоговорПередИзменением Тогда
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
			ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбОчисткеПредоплатыЗавершение", ЭтотОбъект, ПараметрыДокумента);
			ТекстВопроса = НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ОбработатьИзменениеУсловийДоговора(ДанныеДоговора, ДоговорПередИзменением);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает структуру параметров формы выбора договора контрагента.
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, Договор)
		
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Договор.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля.
//
&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	Модифицированность = Истина;
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

&НаКлиенте
Процедура ОписаниеМеханическихПоврежденийПриИзменении(Элемент)
	
	НовоеЗначение = СокрЛП(Объект.ОписаниеМеханическихПовреждений);
	
	спВыбора = Элементы.ОписаниеМеханическихПовреждений.СписокВыбора;
	Для н=0 По Мин(4, спВыбора.Количество()-1) Цикл
		Если СокрЛП(спВыбора[н].Значение)="" Тогда
			Продолжить;
		КонецЕсли;
		
		ДлинаСтроки = Мин(СтрДлина(спВыбора[н].Значение), СтрДлина(НовоеЗначение));
		Если Лев(спВыбора[н].Значение, ДлинаСтроки) = Лев(НовоеЗначение, ДлинаСтроки) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	спВыбора.Вставить(0, НовоеЗначение);
	Если спВыбора.Количество()>5 Тогда
		спВыбора.Удалить(спВыбора[спВыбора.Количество()-1]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСрокДействияГарантии()
	
	Если НЕ ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		ОбновитьДокументПродажи();
		Возврат;
	КонецЕсли;
	
	ЗначРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Номенклатура, "ИспользоватьСерииНоменклатуры,ГарантийныйСрок");
	ИспользоватьСерииНоменклатуры = ЗначРеквизитов.ИспользоватьСерииНоменклатуры;
	ГарантийныйСрок = ЗначРеквизитов.ГарантийныйСрок;
	
	Если ИспользоватьСерииНоменклатуры И ЗначениеЗаполнено(Объект.Серия) Тогда
		
		Запрос = Новый Запрос;
		
		Если Константы.МиграцияСерийНоменклатурыВыполнена.Получить() Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДвиженияСерииНоменклатуры.Регистратор КАК ДокументПродажи,
			|	ВЫБОР
			|		КОГДА ДвиженияСерииНоменклатуры.Регистратор ССЫЛКА Документ.РасходнаяНакладная
			|			ТОГДА ВЫРАЗИТЬ(ДвиженияСерииНоменклатуры.Регистратор КАК Документ.РасходнаяНакладная).Контрагент
			|		КОГДА ДвиженияСерииНоменклатуры.Регистратор ССЫЛКА Документ.ЗаказПокупателя
			|			ТОГДА ВЫРАЗИТЬ(ДвиженияСерииНоменклатуры.Регистратор КАК Документ.ЗаказПокупателя).Контрагент
			|	КОНЕЦ КАК Контрагент,
			|	ДвиженияСерииНоменклатуры.Номенклатура.ГарантийныйСрок КАК ГарантийныйСрокМесяцев,
			|	ДвиженияСерииНоменклатуры.Период КАК ДатаПродажи,
			|	РАЗНОСТЬДАТ(ДвиженияСерииНоменклатуры.Период, &ТекДата, МЕСЯЦ) КАК ПрошлоМесяцев,
			|	ДОБАВИТЬКДАТЕ(ДвиженияСерииНоменклатуры.Период, МЕСЯЦ, ДвиженияСерииНоменклатуры.Номенклатура.ГарантийныйСрок) КАК ГарантияДо,
			|	ДвиженияСерииНоменклатуры.Номенклатура.ГарантийныйСрок КАК ГарантийныйСрок
			|ИЗ
			|	РегистрНакопления.ДвиженияСерииНоменклатуры КАК ДвиженияСерииНоменклатуры
			|ГДЕ
			|	ДвиженияСерииНоменклатуры.Номенклатура = &Номенклатура
			|	И ДвиженияСерииНоменклатуры.Характеристика = &Характеристика
			|	И ДвиженияСерииНоменклатуры.Серия = &Серия
			|	И ДвиженияСерииНоменклатуры.Операция = &Операция
			|	И НЕ ТИПЗНАЧЕНИЯ(ДвиженияСерииНоменклатуры.Регистратор) = ТИП(Документ.ПриемИПередачаВРемонт)";
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СерииНоменклатурыГарантии.Регистратор КАК ДокументПродажи,
			|	ВЫБОР
			|		КОГДА СерииНоменклатурыГарантии.Регистратор ССЫЛКА Документ.РасходнаяНакладная
			|			ТОГДА ВЫРАЗИТЬ(СерииНоменклатурыГарантии.Регистратор КАК Документ.РасходнаяНакладная).Контрагент
			|		КОГДА СерииНоменклатурыГарантии.Регистратор ССЫЛКА Документ.ЗаказПокупателя
			|			ТОГДА ВЫРАЗИТЬ(СерииНоменклатурыГарантии.Регистратор КАК Документ.ЗаказПокупателя).Контрагент
			|	КОНЕЦ КАК Контрагент,
			|	СерииНоменклатурыГарантии.Номенклатура.ГарантийныйСрок КАК ГарантийныйСрокМесяцев,
			|	СерииНоменклатурыГарантии.ДатаСобытия КАК ДатаПродажи,
			|	РАЗНОСТЬДАТ(СерииНоменклатурыГарантии.ДатаСобытия, &ТекДата, МЕСЯЦ) КАК ПрошлоМесяцев,
			|	ДОБАВИТЬКДАТЕ(СерииНоменклатурыГарантии.ДатаСобытия, МЕСЯЦ, СерииНоменклатурыГарантии.Номенклатура.ГарантийныйСрок) КАК ГарантияДо,
			|	СерииНоменклатурыГарантии.Номенклатура.ГарантийныйСрок КАК ГарантийныйСрок
			|ИЗ
			|	РегистрСведений.СерииНоменклатурыГарантии КАК СерииНоменклатурыГарантии
			|ГДЕ
			|	СерииНоменклатурыГарантии.Номенклатура = &Номенклатура
			|	И СерииНоменклатурыГарантии.Характеристика = &Характеристика
			|	И СерииНоменклатурыГарантии.Серия = &Серия
			|	И СерииНоменклатурыГарантии.Операция = &Операция
			|	И НЕ ТИПЗНАЧЕНИЯ(СерииНоменклатурыГарантии.Регистратор) = ТИП(Документ.ПриемИПередачаВРемонт)
			|
			|УПОРЯДОЧИТЬ ПО
			|	СерииНоменклатурыГарантии.ДатаСобытия УБЫВ";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Объект.Характеристика);
		Запрос.УстановитьПараметр("Серия", Объект.Серия);
		Запрос.УстановитьПараметр("Операция", Перечисления.ОперацииСерийНоменклатуры.Расход);
		Запрос.УстановитьПараметр("ТекДата", КонецДня(Объект.Дата));
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если Выборка.ГарантийныйСрок>0 Тогда
				Объект.СрокДействияГарантии = Выборка.ГарантияДо;
				Элементы.СрокДействияГарантии.Видимость = Истина;
				Если Выборка.ГарантийныйСрокМесяцев > Выборка.ПрошлоМесяцев Тогда
					Объект.Гарантийный = Истина;
				КонецЕсли;
			КонецЕсли;
			Объект.ДокументПродажи = ПолучитьНавигационнуюСсылку(Выборка.ДокументПродажи);
			
			Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Объект.Контрагент = Выборка.Контрагент;
				КонтрагентПриИзмененииОбновитьДоговор();
			КонецЕсли;
			
		Иначе
			Объект.ДокументПродажи = "";
		КонецЕсли;
		
	ИначеЕсли НЕ ИспользоватьСерииНоменклатуры Тогда
		
		Объект.Гарантийный = Ложь;
		Объект.СрокДействияГарантии = Неопределено;
		Элементы.СрокДействияГарантии.Видимость = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Продажи.Документ КАК ДокументПродажи
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Номенклатура = &Номенклатура
		|	И Продажи.Характеристика = &Характеристика
		|	И Продажи.Контрагент = &Контрагент
		|	И Продажи.Период <= &Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Продажи.Период УБЫВ";
		
		Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Объект.Характеристика);
		Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
		Запрос.УстановитьПараметр("Операция", Перечисления.ОперацииСерийНоменклатуры.Расход);
		Запрос.УстановитьПараметр("Период", КонецДня(Объект.Дата));
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Объект.ДокументПродажи = ПолучитьНавигационнуюСсылку(Выборка.ДокументПродажи);
		Иначе
			Объект.ДокументПродажи = "";
		КонецЕсли;

	Иначе
		//Очистить
		Объект.ДокументПродажи = "";
	КонецЕсли;

	ОбновитьДокументПродажи();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДокументПродажи()
	
	// Гарантийный срок
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		Если ГарантийныйСрок>0 Тогда
			Элементы.ТекстГарантии.Заголовок = НСтр("ru = 'Гарантийный срок: '")+ГарантийныйСрок+НСтр("ru = ' мес.'");
		Иначе
			Элементы.ТекстГарантии.Заголовок = НСтр("ru = 'Гарантия не предоставляется'");
		КонецЕсли;
	Иначе
		Элементы.ТекстГарантии.Заголовок = "";
		ГарантийныйСрок = 0;
	КонецЕсли;	
	
	// Документ продажи
	Если ЗначениеЗаполнено(Объект.Номенклатура) И (ЗначениеЗаполнено(Объект.Серия) ИЛИ НЕ ИспользоватьСерииНоменклатуры) Тогда
		Если ЗначениеЗаполнено(Объект.ДокументПродажи) И Лев(Объект.ДокументПродажи,11)="e1cib/data/" Тогда
			ДокументПродажиСсылка = ОбсужденияУНФ.ПолучитьСсылкуИзНавигационной(Объект.ДокументПродажи);
			Элементы.ДокументПродажи.Гиперссылка = Истина;
		Иначе	
			ДокументПродажиСсылка = НСтр("ru = '<Не найден>'");
			Элементы.ДокументПродажи.Гиперссылка = Ложь;
		КонецЕсли;
	Иначе	
		Объект.ДокументПродажи = "";
		ДокументПродажиСсылка = Неопределено;
		Элементы.ДокументПродажи.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПродажНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите номенклатуру!'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "Основной");
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Номенклатура", Объект.Номенклатура));
	Если ЗначениеЗаполнено(Объект.Характеристика) Тогда
		ПараметрыФормы.Отбор.Вставить("Характеристика", Объект.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Серия) Тогда
		ПараметрыФормы.Отбор.Вставить("Серия", Объект.Серия);
	ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПараметрыФормы.Отбор.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);

	Если ЗначениеЗаполнено(Объект.Серия) Тогда
		ОткрытьФорму("Отчет.ДвиженияСерийНоменклатуры.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	Иначе
		ОткрытьФорму("Отчет.Продажи.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		УправлениеФормой();
		
	ИначеЕсли ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" Тогда
		
		ПредставлениеЗаголовка = РаботаСФормойДокументаКлиент.ПредставлениеЗаголовкаПодчиненногоСчетаФактуры(
			Объект.Ссылка, Источник, Параметр, КэшЗначений);
		Если ПредставлениеЗаголовка <> Неопределено Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетФактураНадпись", "Заголовок",
				ПредставлениеЗаголовка);

		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОповещениеОбОплатеЗаказа" Тогда
		
		ЗаполнитьТЧОплата(Параметр);
		Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(
			Объект.Предоплата, Объект.ВалютаДокумента);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
 
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения	

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС();
	ОбновитьНадписьЦеныИВалюта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация11Нажатие(Элемент)

	Объект.ВариантРемонта = ПредопределенноеЗначение("Перечисление.ВариантыРемонта.СервисЦентр");
	ОбновитьСостояниеРемонта(Объект);
	Модифицированность = Истина;
	УправлениеФормой();
	ЭтотОбъект.ТекущийЭлемент = Элементы.ПередачаВСервисныйЦентр;
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация21Нажатие(Элемент)
	
	Объект.ВариантРемонта = ПредопределенноеЗначение("Перечисление.ВариантыРемонта.НашаМастерскаяПростойРемонт");
	ОбновитьСостояниеРемонта(Объект);
	Модифицированность = Истина;
	УправлениеФормой();
	ЭтотОбъект.ТекущийЭлемент = Элементы.РемонтВыполнен;
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация31Нажатие(Элемент)
	
	Объект.ВариантРемонта = ПредопределенноеЗначение("Перечисление.ВариантыРемонта.НашаМастерскаяМногоэтапныйРемонт");
	ОбновитьСостояниеРемонта(Объект);
	Модифицированность = Истина;
	УправлениеФормой();
	ЭтотОбъект.ТекущийЭлемент = Элементы.РемонтВыполнен;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПередачаВСервисныйЦентрПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаПередачаВСервисныйЦентр) Тогда
		Объект.ПередачаВСервисныйЦентр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРемонтВыполненПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаРемонтВыполнен) Тогда
		Объект.РемонтВыполнен = Истина;
	КонецЕсли;
	
	ДатаРемонтВыполненПересчитатьКурс();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРемонтВыполненПересчитатьКурс()

	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.ДатаРемонтВыполнен;
	Если Объект.ДатаРемонтВыполнен <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
			ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные);
		КонецЕсли;	
		
		// Сформируем надпись цены и валюты.
		ОбновитьНадписьЦеныИВалюта(ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры	

// Процедура пересчитывает курс и кратность валюты расчетов при изменении
// даты документа.
//
&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(Объект.Курс) + " " + СокрЛП(НациональнаяВалюта);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(КурсНовый) + " " + СокрЛП(НациональнаяВалюта);
		
		ПараметрыВопроса = Новый Структура;
		ПараметрыВопроса.Вставить("КурсНовый", КурсНовый);
		ПараметрыВопроса.Вставить("КратностьНовый", КратностьНовый);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОПересчетеКурсаКратностиВалютыРасчетовЗавершение", ЭтотОбъект, ПараметрыВопроса);
		
		ТекстВопроса = НСтр("ru = 'На дату документа у валюты расчетов (" + КурсВалютыСтрокой + ") был задан курс.
									|Установить курс расчетов (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьКурсКратностьВалютыРасчетов()

// Выполняет действия после ответа на вопрос о пересчете курса и кратности валюты расчетов.
//
&НаКлиенте
Процедура ВопросОПересчетеКурсаКратностиВалютыРасчетовЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.Курс = ДополнительныеПараметры.КурсНовый;
		Объект.Кратность = ДополнительныеПараметры.КратностьНовый;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));
		КонецЦикла;
			
		// Сформируем надпись цены и валюты.
		ОбновитьНадписьЦеныИВалюта(ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов)
	
	РазностьДат = ДокументыУНФ.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаРасчетов));
		
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаКлиенте
Процедура ДатаВыдачаИзРемонтаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДатаВыдачаИзРемонта) Тогда
		Объект.ВыдачаИзРемонта = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта",Новый Структура("Владелец, Организация, ВидДоговора, ОповеститьОЗаписиДоговора",Объект.Контрагент,Объект.Организация,ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СПокупателем"), Истина), Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиДокументыРемонта

&НаКлиенте
Процедура ДобавитьСвязанныйДокумент(ТипДокумента)
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = "Данные еще не записаны.
		|Выполнение действия возможно только после записи данных.
		|Данные будут записаны.";
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументВопрос", ЭтотОбъект, ТипДокумента);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ДобавитьДокумент(ТипДокумента);
	КонецЕсли;
	
КонецПроцедуры

// Завершение процедуры ПримененныеСкидки. Вызывается после закрытия формы ответа на вопрос.
//
&НаКлиенте
Процедура ДобавитьДокументВопрос(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		ДобавитьДокумент(Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокумент(ТипДокумента) Экспорт
	
	ЗначенияЗаполнения = Новый Структура("ДокументОснование", Объект.Ссылка);
	Если ТипДокумента = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд"));
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя"));
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя"));
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПокупателя"));
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя"));
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ДополнительныеПараметры.Вставить("Основание",  Объект.Ссылка);
	ДополнительныеПараметры.Вставить("ТипДокумента",  ТипДокумента);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументРемонтаДокументВведен", ЭтотОбъект, ДополнительныеПараметры);
	ИмяФормыСтрока = РаботаСФормойДокументаКлиент.ИмяДокументаПоТипу(ТипДокумента);
	
	ОткрытьФорму("Документ."+ИмяФормыСтрока+".ФормаОбъекта",ДополнительныеПараметры, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры // ПримененныеСкидкиЗавершение()

&НаКлиенте
Процедура ДобавитьДокументРемонтаДокументВведен(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры<>Неопределено И 
		(ДополнительныеПараметры.ТипДокумента = Тип("ДокументСсылка.ПриходнаяНакладная") 
		ИЛИ ДополнительныеПараметры.ТипДокумента = Тип("ДокументСсылка.ОприходованиеЗапасов"))
		Тогда
		// Внутренние документы оприходования
		ДокументОприходованияСсылка = ПолучитьПодчиненныйДокументОприходования();
		ОбновитьВидимостьРезультатРемонта();
	ИначеЕсли ДополнительныеПараметры<>Неопределено И 
		(ДополнительныеПараметры.ТипДокумента = Тип("ДокументСсылка.ПоступлениеВКассу") 
		ИЛИ ДополнительныеПараметры.ТипДокумента = Тип("ДокументСсылка.ПоступлениеНаСчет"))
		Тогда
		
		Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);

	Иначе	
		// Внутренние документы ремонта
		ВнутренниеДокументыРемонта.Очистить();
		ПолучитьПодчиненныеДокументыРемонта();
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ДобавитьМетку(ДокСсылка, ДокСумма=0, ДокВалюта)
	
	СтрокаМеток = ВнутренниеДокументыРемонта.Добавить();
	НавигационнаяСсылкаДокумента= "Документ_" + СтрокаМеток.ПолучитьИдентификатор();
	
	Цвет = ЦветаСтиля.ТекстВторостепеннойНадписи;
	Шрифт = ШрифтыСтиля.ШрифтПравойПанелиОтборов;
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Строка(ДокСсылка) + " ", Шрифт, Цвет,,НавигационнаяСсылкаДокумента));
	Если ДокСумма>0 Тогда
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока("Сумма: "+Формат(ДокСумма,"ЧЦ=15; ЧДЦ=2") + " " + ДокВалюта, Шрифт, Цвет,,НавигационнаяСсылкаДокумента));
	КонецЕсли;
	ПредставлениеМетки = Новый ФорматированнаяСтрока(КомпонентыФС);
	
	СтрокаМеток.Представление = ПредставлениеМетки;
	СтрокаМеток.Ссылка = ДокСсылка;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыМеток() Экспорт
	
	ГруппаРодитель = Элементы.ВнутренниеДокументыРемонта;
	УдаляемыеЭлементы = Новый Массив;
	
	Для Каждого СтрокаМеток Из ГруппаРодитель.ПодчиненныеЭлементы Цикл
		Если СтрокаМеток.Вид=ВидПоляФормы.ПолеВвода Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеЭлементы.Добавить(СтрокаМеток);
	КонецЦикла;
		
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	НомерМетки = 0;
	Для Каждого ДанныеМетки Из ВнутренниеДокументыРемонта Цикл
		
		ПолеМетки = Элементы.Добавить("Метка_" + НомерМетки, Тип("ПолеФормы"), ГруппаРодитель);
		ПолеМетки.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеМетки.ПутьКДанным = "ВнутренниеДокументыРемонта[" + НомерМетки + "].Представление";
		ПолеМетки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеМетки.РастягиватьПоГоризонтали = Истина;
		ПолеМетки.Ширина = 46;
		ПолеМетки.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_МеткаОбработкаНавигационнойСсылки");
		ПолеМетки.Подсказка = ДанныеМетки.Ссылка;
		
		НомерМетки = НомерМетки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАкт(Команда)
	
	ДобавитьСвязанныйДокумент(Тип("ДокументСсылка.АктВыполненныхРабот"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаказНаряд(Команда)
	
	ДобавитьСвязанныйДокумент(Тип("ДокументСсылка.ЗаказПокупателя"));

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРасходная(Команда)
	
	ДобавитьСвязанныйДокумент(Тип("ДокументСсылка.РасходнаяНакладная"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОприходование(Команда)

	ДобавитьСвязанныйДокумент(Тип("ДокументСсылка.ОприходованиеЗапасов"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВозврат(Команда)
	
	ДобавитьСвязанныйДокумент(Тип("ДокументСсылка.ПриходнаяНакладная"));
	
КонецПроцедуры

#КонецОбласти

#Область МеткиОтборов

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Лев(НавигационнаяСсылкаФорматированнойСтроки,8) = "Документ" Тогда
		МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
		
		ДокСсылка = ВнутренниеДокументыРемонта[Число(МеткаИД)].Ссылка;
		ИмяФормыСтрока = РаботаСФормойДокументаКлиент.ИмяДокументаПоТипу(ТипЗнч(ДокСсылка));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументРемонтаДокументВведен", ЭтотОбъект);
		Если ИмяФормыСтрока="ЗаказПокупателя" Тогда
			ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаЗаказНаряда", Новый Структура("Ключ", ДокСсылка), ЭтотОбъект,,,,ОписаниеОповещения);
		Иначе
			ОткрытьФорму("Документ."+ИмяФормыСтрока+".ФормаОбъекта", Новый Структура("Ключ", ДокСсылка), ЭтотОбъект,,,,ОписаниеОповещения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭтапыРемонта

&НаКлиенте
Процедура ПланРемонтаПриИзменении(Элемент)
	
	ВариантРемонтаПередИзменением = ВариантРемонта;
	ВариантРемонта = Объект.ВариантРемонта;
		
	Если ВариантРемонтаПередИзменением <> Объект.ВариантРемонта 
		И Объект.ВариантРемонта = ПредопределенноеЗначение("Перечисление.ВариантыРемонта.НашаМастерскаяМногоэтапныйРемонт")
		И Объект.Предоплата.Количество()>0 Тогда
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("ВариантРемонтаПередИзменением", ВариантРемонтаПередИзменением);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбОчисткеПредоплатыВариантРемонтаЗавершение", ЭтотОбъект, ПараметрыДокумента);
		ТекстВопроса = НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	
	КонецЕсли; 
	
	ОбновитьСостояниеРемонта(Объект);
	
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура ВопросОбОчисткеПредоплатыВариантРемонтаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВариантРемонтаПередИзменением = ДополнительныеПараметры.ВариантРемонтаПередИзменением;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Предоплата.Очистить();
	Иначе
		Объект.ВариантРемонта = ВариантРемонтаПередИзменением;
		ВариантРемонта = ВариантРемонтаПередИзменением;
		Возврат;
	КонецЕсли;
	
	ОбновитьСостояниеРемонта(Объект);
	
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	// Обновить доступность и доступность полей на форме, в зависимости от выбранного значения
	Элементы.Характеристика.Видимость = ЗначениеЗаполнено(Объект.Номенклатура) И ИспользоватьХарактеристики;
	Элементы.ГруппаСерииШапка.Видимость = ЗначениеЗаполнено(Объект.Номенклатура) И ИспользоватьСерииНоменклатуры;
	СтатусыСерийНоменклатуры = ?(ЗначениеЗаполнено(Объект.Серия), 2, 1);
	
	Элементы.ГруппаРеквизитыГарантии.Видимость = ЗначениеЗаполнено(Объект.Номенклатура)
		И (ИспользоватьСерииНоменклатуры И ЗначениеЗаполнено(Объект.Серия) ИЛИ НЕ ИспользоватьСерииНоменклатуры)
		И (ВыписыватьГарантийныйТалон ИЛИ ГарантийныйСрок>0);
	
	
	Если ЗначениеЗаполнено(Объект.ВариантРемонта) Тогда
		
		Элементы.ГруппаВариантРемонта.Видимость = Истина;
		Элементы.ГруппаИнформация.Видимость = Ложь;
		
		Элементы.ГруппаПланРемонта.Видимость = Истина;
		Элементы.ГруппаКолонки.Видимость = Истина;
	Иначе
		Элементы.ГруппаВариантРемонта.Видимость = Ложь;
		Элементы.ГруппаИнформация.Видимость = Истина;
		
		Элементы.ГруппаПланРемонта.Видимость = Ложь;
		Элементы.ГруппаКолонки.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВариантРемонта = ПредопределенноеЗначение("Перечисление.ВариантыРемонта.СервисЦентр") Тогда
		Элементы.ПередачаВСервисныйЦентр.Видимость = Истина;
		Элементы.ДатаПередачаВСервисныйЦентр.Видимость = Истина;
		Элементы.СервисЦентр.Видимость = Истина;
		
		Элементы.ГруппаВнутренниеДокументыРемонта.Видимость = Ложь;
		Элементы.РемонтВыполнен.Заголовок = " " + НСтр("ru = 'Принят из сервисного центра'");
		Элементы.РемонтПолностьюОплачен.Видимость = Ложь;
		Элементы.ГруппаПредоплата.Видимость = Истина;
		
		Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	ИначеЕсли Объект.ВариантРемонта = ПредопределенноеЗначение("Перечисление.ВариантыРемонта.НашаМастерскаяПростойРемонт") Тогда
		
		Элементы.ПередачаВСервисныйЦентр.Видимость = Ложь;
		Элементы.ДатаПередачаВСервисныйЦентр.Видимость = Ложь;
		Элементы.СервисЦентр.Видимость = Ложь;
		
		Элементы.ГруппаВнутренниеДокументыРемонта.Видимость = Ложь;
		Элементы.РемонтВыполнен.Заголовок = " " + НСтр("ru = 'Ремонт выполнен'");
		Элементы.РемонтПолностьюОплачен.Видимость = Ложь;
		Элементы.ГруппаПредоплата.Видимость = Истина;
		
		Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	ИначеЕсли Объект.ВариантРемонта = ПредопределенноеЗначение("Перечисление.ВариантыРемонта.НашаМастерскаяМногоэтапныйРемонт") Тогда
		
		Элементы.ПередачаВСервисныйЦентр.Видимость = Ложь;
		Элементы.ДатаПередачаВСервисныйЦентр.Видимость = Ложь;
		Элементы.СервисЦентр.Видимость = Ложь;
		
		Элементы.ГруппаВнутренниеДокументыРемонта.Видимость = Истина;
		Элементы.РемонтВыполнен.Заголовок = " " + НСтр("ru = 'Ремонт выполнен'");
		Элементы.РемонтПолностьюОплачен.Видимость = Истина;
		Если Объект.Предоплата.Количество()=0 Тогда
			Элементы.ГруппаПредоплата.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьВидимостьРезультатРемонта();
	
	Элементы.ГруппаИнформация.Доступность = НЕ ЭтаФорма.ТолькоПросмотр;

КонецПроцедуры
	
&НаКлиенте
Процедура ПередачаВСервисныйЦентрПриИзменении(Элемент)
	
	Если Объект.ПередачаВСервисныйЦентр И НЕ ЗначениеЗаполнено(Объект.ДатаПередачаВСервисныйЦентр) Тогда
 		Объект.ДатаПередачаВСервисныйЦентр = ТекущаяДата();		
	КонецЕсли;
	
	ОбновитьСостояниеРемонта(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыдачаИзРемонтаПриИзменении(Элемент)
	
	Если Объект.ВыдачаИзРемонта И НЕ ЗначениеЗаполнено(Объект.ДатаВыдачаИзРемонта) Тогда
 		Объект.ДатаВыдачаИзРемонта = ТекущаяДата();		
	КонецЕсли;
	
	ОбновитьСостояниеРемонта(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтВыполненПриИзменении(Элемент)
	
	Если Объект.РемонтВыполнен И НЕ ЗначениеЗаполнено(Объект.ДатаРемонтВыполнен) Тогда
 		Объект.ДатаРемонтВыполнен = ТекущаяДата();
		
		ДатаРемонтВыполненПересчитатьКурс();
	КонецЕсли;
	
	ОбновитьСостояниеРемонта(Объект);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСостояниеРемонта(Объект)
	
	Если Объект.ВыдачаИзРемонта Тогда
		Объект.СостояниеРемонта = ПредопределенноеЗначение("Справочник.ЭтапыРемонта.ВыданПокупателю");
	ИначеЕсли Объект.РемонтВыполнен Тогда
		Объект.СостояниеРемонта = ПредопределенноеЗначение("Справочник.ЭтапыРемонта.РемонтВыполнен");
	ИначеЕсли Объект.ПередачаВСервисныйЦентр Тогда
		Объект.СостояниеРемонта = ПредопределенноеЗначение("Справочник.ЭтапыРемонта.ВРаботе");
	ИначеЕсли ЗначениеЗаполнено(Объект.ВариантРемонта) Тогда
		Объект.СостояниеРемонта = ПредопределенноеЗначение("Справочник.ЭтапыРемонта.ВРаботе");
	Иначе
		Объект.СостояниеРемонта = ПредопределенноеЗначение("Справочник.ЭтапыРемонта.ПринятВРемонт");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатРемонтаПриИзменении(Элемент)
	
	ОбновитьСостояниеРемонта(Объект);
	ОбновитьВидимостьРезультатРемонта();
	Если НЕ ЗначениеЗаполнено(Объект.ДатаВыдачаИзРемонта) Тогда
		Объект.ДатаВыдачаИзРемонта = ТекущаяДата();
	КонецЕсли;
	Объект.ВыдачаИзРемонта = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьРезультатРемонта()
	
	Если Объект.ВариантЗавершенияРемонта = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияРемонта.ПереведенВУчетКомпании") Тогда
		Элементы.ОписаниеРемонта.Видимость = Ложь;

		Если ЗначениеЗаполнено(ДокументОприходованияСсылка) Тогда
			Элементы.ДокументОприходованияСсылка.Видимость = Истина;
			Элементы.ДобавитьДокументОприходования.Видимость = Ложь;
		Иначе
			Элементы.ДокументОприходованияСсылка.Видимость = Ложь;
			Элементы.ДобавитьДокументОприходования.Видимость = Истина;
		КонецЕсли; 

	Иначе
		Элементы.ОписаниеРемонта.Видимость = Истина;
		Элементы.ДокументОприходованияСсылка.Видимость = Ложь;
		Элементы.ДобавитьДокументОприходования.Видимость = Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредоплата

// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура РедактироватьЗачетПредоплаты(Команда)

	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Укажите вначале контрагента!'"));
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Укажите вначале договор контрагента!'"));
		Возврат;
	КонецЕсли;

	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище);
	ПараметрыПодбора.Вставить("Подбор", Истина);
	ПараметрыПодбора.Вставить("ЕстьЗаказ", Истина);
	ПараметрыПодбора.Вставить("ЗаказВШапке", Истина);
	ПараметрыПодбора.Вставить("Компания", Компания);
	ПараметрыПодбора.Вставить("Заказ", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Дата", ?(Объект.РемонтВыполнен, Объект.ДатаРемонтВыполнен, Объект.Дата));
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("Курс", Объект.Курс);
	ПараметрыПодбора.Вставить("Кратность", Объект.Кратность);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.СуммаДокумента - Объект.Предоплата.Итог("СуммаПлатежа"));

	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПокупателей", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение1", ЭтотОбъект,
		Новый Структура("АдресПредоплатаВХранилище, ПараметрыПодбора", АдресПредоплатаВХранилище, ПараметрыПодбора)));

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение1(Результат, ДополнительныеПараметры) Экспорт

	АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
	КодВозврата = Результат;

	РедактироватьЗачетПредоплатыФрагмент1(АдресПредоплатаВХранилище, КодВозврата);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыФрагмент1(Знач АдресПредоплатаВХранилище, Знач КодВозврата)

	РедактироватьЗачетПредоплатыФрагмент(АдресПредоплатаВХранилище, КодВозврата);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыФрагмент(Знач АдресПредоплатаВХранилище, Знач КодВозврата)

	Если (КодВозврата = КодВозвратаДиалога.OK) Тогда
		ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
	КонецЕсли;

КонецПроцедуры

// Функция помещает список авансов во временное хранилище и возвращает адрес
//
&НаСервере
Функция ПоместитьПредоплатаВХранилище()
	
	ТЗПредоплата = Объект.Предоплата.Выгрузить(,
		"Документ,
		|СуммаРасчетов,
		|Курс,
		|Кратность,
		|СуммаПлатежа");
		
	ТЗПредоплата.Колонки.Добавить("Заказ",Новый ОписаниеТипов("ДокументСсылка.ПриемИПередачаВРемонт"));
	ТЗПредоплата.ЗаполнитьЗначения(Объект.Ссылка, "Заказ");
		
	Возврат ПоместитьВоВременноеХранилище(ТЗПредоплата, УникальныйИдентификатор);
	
КонецФункции // ПоместитьПредоплатаВХранилище()

// Функция получает список авансов из временного хранилища
//
&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Объект.Предоплата.Загрузить(ТаблицаДляЗагрузки);
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

// Выполняет действия после ответа на вопрос об очистке предоплаты.
//
&НаКлиенте
Процедура ВопросОбОчисткеПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДоговорПередИзменением = ДополнительныеПараметры.ДоговорПередИзменением;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Предоплата.Очистить();
	Иначе
		Если ДополнительныеПараметры.Свойство("ИзменениеКонтрагента") Тогда
			Объект.Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			КонтрагентВестиРасчетыПоЗаказам = ДополнительныеПараметры.КонтрагентВестиРасчетыПоЗаказамПередИзменением;
			Элементы.Договор.Видимость = ДополнительныеПараметры.ВидимостьДоговораПередИзменением;
		КонецЕсли;
		Объект.Договор = ДоговорПередИзменением;
		Договор = ДоговорПередИзменением;
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеУсловийДоговора(ДополнительныеПараметры.ДанныеДоговора, ДоговорПередИзменением);

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)

	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(
		Объект.Предоплата, Объект.ВалютаДокумента);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПредоплата

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
			?(Объект.Курс = 0,
			1,
			Объект.Курс),
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
			?(Объект.Кратность = 0,
			1,
			Объект.Кратность),
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	КурсПересчета = ?(Объект.ВалютаДокумента = НациональнаяВалюта, 1, Объект.Курс);
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * КурсПересчета
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
		
		СтруктураДанные = ПолучитьДанныеДокументПриИзменении(СтрокаТабличнойЧасти.Документ);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = СтруктураДанные.СуммаРасчетов;
		
		СтрокаТабличнойЧасти.Курс = 
			?(СтрокаТабличнойЧасти.Курс = 0,
				?(Объект.Курс = 0,
				1,
				Объект.Курс),
			СтрокаТабличнойЧасти.Курс
		);
		
		СтрокаТабличнойЧасти.Кратность =
			?(СтрокаТабличнойЧасти.Кратность = 0,
				?(Объект.Кратность = 0,
				1,
				Объект.Кратность),
			СтрокаТабличнойЧасти.Кратность
		);
			
		СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаТабличнойЧасти.СуммаРасчетов,
			СтрокаТабличнойЧасти.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаТабличнойЧасти.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ПредоплатаДокументПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДокументПриИзменении(Документ)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("СуммаРасчетов", Документ.РасшифровкаПлатежа.Итог("СуммаРасчетов"));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДокументПриИзменении()

&НаКлиенте
Процедура ПредоплатаКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры


#КонецОбласти

#Область РаботаССериямиНоменклатуры

&НаСервере
Процедура ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	СерииНоменклатурыУНФ.ПолучитьСерияИзХранилища(Объект, АдресВоВременномХранилище);
	
	ОбновитьУсловияГарантии();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыПодбораСерийНоменклатурыВПолеВвода()

	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатурыДляРемонтов(Объект,
		ЭтотОбъект.УникальныйИдентификатор, Ложь);

КонецФункции

&НаКлиенте
Процедура СерииНоменклатурыПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатурыВПолеВвода();
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СерияПриИзменении(Элемент)
	
	ОбновитьУсловияГарантии();
	
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура НомерГарантииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументПродажи) Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Объект.ДокументПродажи);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование
// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)

	ТекШтрихкод = "";

	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));

	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для Каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл

		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);

	КонецЦикла;

	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(
		СтруктураДанные.МассивШтрихкодов);

	Для Каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл

		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];

		Если МассивДанныхШтрихкода <> Неопределено И МассивДанныхШтрихкода.Количество() <> 0 Тогда

			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл

				СтруктураДанныеНоменклатуры = Новый Структура;
				СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);

				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(
					СтруктураДанныеНоменклатуры));

				Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);

	Для Каждого парам Из Метаданные.Документы.ПриемИПередачаВРемонт.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение) = Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;

			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда

			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект,
				Новый Структура("СтруктураДанные", СтруктураДанные));

			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам",
				ПараметрыОткрытия, ЭтаФорма, , , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

			Продолжить;
		КонецЕсли;

		Если ДанныеШтрихкода <> Неопределено И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(
			ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено
			Или ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			СвойстваШтрихКода = Новый Структура;
			СвойстваШтрихКода.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
			СвойстваШтрихКода.Вставить("Номенклатура", ДанныеШтрихкода[0].Номенклатура);
			СвойстваШтрихКода.Вставить("ТипНоменклатуры", ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры);
			СвойстваШтрихКода.Вставить("ЭтоНабор", ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор);
			ШтрихкодыНекорректногоТипа.Добавить(СвойстваШтрихКода);
		Иначе

			ДанныеШтрихкода = ДанныеШтрихкода[0];

			Объект.Номенклатура = ДанныеШтрихкода.Номенклатура;
			Объект.Характеристика = ДанныеШтрихкода.Характеристика;
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				Объект.Серия = ДанныеШтрихкода.Серия;
			КонецЕсли;

			ОбновитьУсловияГарантии();

		КонецЕсли;
	КонецЦикла;

	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа", НеизвестныеШтрихкоды,
		ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено 
		ИЛИ ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
		ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор"
		, ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор));
	Иначе
		Объект.Номенклатура = ДанныеШтрихкода.Номенклатура;
		Объект.Характеристика = ДанныеШтрихкода.Характеристика;
		Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
			Объект.Серия = ДанныеШтрихкода.Серия;
		КонецЕсли;
		
		ОбновитьУсловияГарантии();
		
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
КонецПроцедуры

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
	УправлениеФормой();
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт

	Для Каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл

		СтрокаСообщения = НСтр(
			"ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этого документа'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		Если ТекНекорректныйШтрихкод.Свойство("ЭтоНабор") И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", НСтр("ru = 'Набор'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		КонецЕсли;
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);

	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)

	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	СтруктураДанные.Вставить("ЭтоЗапас", СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение(
		"Перечисление.ТипыНоменклатуры.Запас"));
	// Наборы
	СтруктураДанные.Вставить("ЭтоНабор", СтруктураДанные.Номенклатура.ЭтоНабор);

	Если СтруктураДанные.Свойство("НалогообложениеНДС") И Не СтруктураДанные.НалогообложениеНДС
		= ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда

		Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение(
			"Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;

	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(
			СтруктураДанные.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки),
			СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(
			СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки),
			СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	КонецЕсли;
	
	// Серии номенклатуры
	СтруктураДанные.Вставить("ИспользоватьСерииНоменклатуры", СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры);
	// Серии номенклатуры
	
	// Характеристики
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(
			СтруктураДанные.Номенклатура);

		Если Не ЗначенияПоУмолчанию = Неопределено Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;

		Если Не СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика", ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика),
				СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
	КонецЕсли; 
	// Конец Характеристики	

	Возврат СтруктураДанные;

КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикДляНоменклатуры(СтруктураДанные)

	СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтруктураДанные.Номенклатура.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",
		СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);

	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(
			СтруктураДанные.Номенклатура);

		Если Не ЗначенияПоУмолчанию = Неопределено Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;

		Если Не СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика", ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика),
				СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураДанные;

КонецФункции 

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
// @skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

// @skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТЧОплата(ДокументПлатежа) Экспорт

	Если ДокументПлатежа = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	// Удалим старые строки расчетов по этому документу
	ОтборПлатеж = Новый Структура("Документ",ДокументПлатежа);
	НайденныеСтроки = Объект.Предоплата.НайтиСтроки(ОтборПлатеж);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Объект.Предоплата.Удалить(НайденнаяСтрока);
		
		Модифицированность = Истина;
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокОплаты.Ссылка КАК Документ,
	|	ДокОплаты.Ссылка.Дата КАК Дата,
	|	ДокОплаты.СуммаРасчетов КАК СуммаРасчетов,
	|	ДокОплаты.СуммаПлатежа КАК СуммаПлатежа,
	|	ДокОплаты.Курс КАК Курс,
	|	ДокОплаты.Кратность КАК Кратность
	|ИЗ
	|	Документ.ПоступлениеВКассу.РасшифровкаПлатежа КАК ДокОплаты
	|ГДЕ
	|	ДокОплаты.Заказ = &ДокументОснование
	|	И ДокОплаты.Ссылка = &ДокументПлатежа
	|	И ДокОплаты.ПризнакАванса
	|	И НЕ ДокОплаты.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокОплаты.Ссылка,
	|	ДокОплаты.Ссылка.Дата,
	|	ДокОплаты.СуммаРасчетов,
	|	ДокОплаты.СуммаПлатежа,
	|	ДокОплаты.Курс,
	|	ДокОплаты.Кратность
	|ИЗ
	|	Документ.ПоступлениеНаСчет.РасшифровкаПлатежа КАК ДокОплаты
	|ГДЕ
	|	ДокОплаты.Заказ = &ДокументОснование
	|	И ДокОплаты.Ссылка = &ДокументПлатежа
	|	И ДокОплаты.ПризнакАванса
	|	И НЕ ДокОплаты.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокОплаты.Ссылка,
	|	ДокОплаты.Ссылка.Дата,
	|	ДокОплаты.СуммаРасчетов,
	|	ДокОплаты.СуммаПлатежа,
	|	ДокОплаты.Курс,
	|	ДокОплаты.Кратность
	|ИЗ
	|	Документ.ОперацияПоПлатежнымКартам.РасшифровкаПлатежа КАК ДокОплаты
	|ГДЕ
	|	ДокОплаты.Заказ = &ДокументОснование
	|	И ДокОплаты.Ссылка = &ДокументПлатежа
	|	И ДокОплаты.ПризнакАванса
	|	И НЕ ДокОплаты.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|ИТОГИ ПО
	|	Документ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДокументПлатежа", ДокументПлатежа);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	ВыборкаДокумент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаДокумент.Следующий();
	ВыборкаСтроки = ВыборкаДокумент.Выбрать();
	Пока ВыборкаСтроки.Следующий() Цикл
		НовСтр = Объект.Предоплата.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаСтроки);
		
		Модифицированность = Истина;
	КонецЦикла;
	
КонецФункции

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
