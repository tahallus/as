
#Область ОписаниеПеременных

&НаКлиенте
Перем КопированиеСтрокиЗапасы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ОтчетКомиссионера.ТабличныеЧасти.Запасы, НастройкиЗагрузкиДанных, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	НеУчитыватьЗаказыПриПередачеНаКомиссию = Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию;
	ВалютаРасчетов = Объект.Договор.ВалютаРасчетов;
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	СпособЗаполненияСтавкиНДС = Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(
		Договор);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не ЗначениеЗаполнено(Параметры.Основание) 
		И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) 
		И Не ЗаполнениеОбъектовУНФ.ЭтоЗаполнениеПоШаблону(Параметры.ЗначенияЗаполнения) Тогда
		ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(Истина);
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ЗапасыСуммаНДСПередачи.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДСПередачи.Видимость = Ложь;
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
			Элементы.СчетФактураНадпись.Видимость = Истина;
		Иначе
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	СтруктураНадписи = Новый Структура("ВидЦен, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС", Объект.ВидЦен, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) 
		И Не ЗаполнениеОбъектовУНФ.ЭтоЗаполнениеПоШаблону(Параметры.ЗначенияЗаполнения) Тогда
		Объект.СтавкаНДСВознаграждения = Справочники.СтавкиНДС.СтавкаНДС(Компания.ВидСтавкиНДСПоУмолчанию);
	КонецЕсли;
	
	// Установка видимости договора.
	УстановитьВидимостьДоговора();
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	Элементы.ЗапасыЦенаПередачи.ТолькоПросмотр 	   = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаПередачи.ТолькоПросмотр    = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДСПередачи.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	
	ИменаТЧ = Новый Массив;
	ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ИмяПоляОформления", "Объект.Запасы.СтранаПроисхождения",
		"ЗапасыНомерГТД"));
	
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервере(ЭтаФорма, ИменаТЧ, КэшЗначений);
	КэшЗначений.Вставить("ВерсияПодчиненногоСчетФактуры", Неопределено);
	КэшЗначений.Вставить("ВерсияПодчиненногоПолученногоСчетФактуры", Неопределено);
	КэшЗначений.Вставить("МодифицированностьФормы", Ложь);
	
	// Счета-фактуры на реализованные товары и услуги
	Элементы.ВыписыватьСчетаФактурыСводно.Доступность = ДатаДокумента >= '20150101';
	УстановитьОтборВыписыватьСчетаФактурыСводно();
	
	// Установить надписи счет-фактура и основание
	СчетФактураСсылка = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Истина);
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(
		СчетФактураСсылка, Истина);
	КэшЗначений.Вставить("СчетФактураСсылка", ?(ТипЗнч(СчетФактураСсылка) = Тип("Структура"), СчетФактураСсылка.Ссылка,
	Неопределено));
	
	// Прослеживаемость
	Если КэшЗначений = Неопределено Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	Если Объект.Контрагент.Пустая() Тогда
		КэшЗначений.Вставить("РеализацияВЕАЭС", Ложь);
	Иначе
		КэшЗначений.Вставить("РеализацияВЕАЭС", Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	КонецЕсли;
	РеализацияВЕАЭС = КэшЗначений.РеализацияВЕАЭС;
	Если Объект.Ссылка.Пустая() Тогда
		
		ОбновитьПризнакПрослеживаемости = (ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЗаказПокупателя"))
		И ПрослеживаемаяОперация(Объект.ВидОперации);
		
		Если ОбновитьПризнакПрослеживаемости Тогда
			ОбновитьПризнакПрослеживаемости();
		КонецЕсли;
		
		ОбновитьОтображениеПрослеживаемости();
		
	КонецЕсли;
	// Конец Прослеживаемость
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий(РазрешеноРедактированиеЦенДокументов);
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер(), ЭтаФорма.ЗапасыИзменениеСтрокДействие);
	ЗапасыИзменениеСтрокДействиеПриОткрытии = ЗапасыИзменениеСтрокДействие;
	УстановитьПометку(Истина);
	// Конец ГрупповоеИзменениеСтрок
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	
	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	// Характеристики
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
	Если Параметры.Ключ.Пустая() Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина)
	КонецЕсли;
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ОтчетКомиссионера", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера;
	КонецЕсли;
	
	ОбработатьДоступныеОтчетыКомиссионера(ЭтотОбъект);
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	ЗаполнитьСписокДокументОснование();
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	ОбновитьЗаголовокФормы();
	
	// ГТД и РНПТ.
	ИменаТЧИПолей = ГрузовыеТаможенныеДекларацииСервер.ИменаТЧИПолейДляТаблицыЗапасы_БазовыеПоляСПрослеживаемостью();
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервереДляДокументаСПрослеживаемостью(ЭтаФорма, ИменаТЧИПолей, КэшЗначений);
	// Конец ГТД и РНПТ.
	
	// Для отражения информации по новой схеме движений
	ИмяКлючаОбъекта = "ОтчетКомиссионераНоваяСхемаДвижений";
	
	ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_" + "ПоказыватьИнформациюПоНовойСхемеДвижений");
	
	Если ЗначениеНастройки = Неопределено Тогда
		ПоказыватьИнформациюПоНовойСхемеДвижений = Истина;
	Иначе
		ПоказыватьИнформациюПоНовойСхемеДвижений = ЗначениеНастройки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не Объект.УдержатьКомиссионноеВознаграждение Тогда
			Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр("ru ='Оформление приходной накладной для учета комиссионного вознаграждения не требуется.'");
			Элементы.ДекорацияСхемаДвижений.Видимость = Истина;
		Иначе
			Элементы.ДекорацияСхемаДвижений.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Если Не Объект.УдержатьКомиссионноеВознаграждение Тогда
			Если Объект.ИспользоватьНовуюСхемуДвижений Тогда
				Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр("ru ='Оформление приходной накладной для учета комиссионного вознаграждения не требуется.'");
			Иначе
				Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр("ru ='Чтобы учесть комиссионное вознаграждение необходимо оформить приходную накладную.'");
			КонецЕсли;
		Иначе
			Элементы.ДекорацияСхемаДвижений.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	ОбновитьЗаголовокФормы();
	
	НеУчитыватьЗаказыПриПередачеНаКомиссию = Объект.Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию;
	Элементы.ЗапасыЗаказПокупателя.Видимость = Не НеУчитыватьЗаказыПриПередачеНаКомиссию;
	Элементы.ПредоплатаЗаказ.Видимость = Не НеУчитыватьЗаказыПриПередачеНаКомиссию;
	
	// Прослеживаемость
	Если КэшЗначений = Неопределено Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("РеализацияВЕАЭС", Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	РеализацияВЕАЭС = КэшЗначений.РеализацияВЕАЭС;
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы ПередЗаписью
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	КэшЗначений.МодифицированностьФормы = Модифицированность;
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписьюНаСервере формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
		ТекстСообщения,
		Объект.Договор,
		Объект.Ссылка,
		Объект.Организация,
		Объект.Контрагент,
		Отказ);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ?(Отказ, НСтр("ru = 'Документ не проведен! '") + ТекстСообщения, ТекстСообщения);
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
				Сообщение.Сообщить();
				Возврат;
			Иначе
				Сообщение.Сообщить();
			КонецЕсли;
			
		КонецЕсли;
		
		Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройкиЗачетаАвансов() = Перечисления.ДаНет.Да
			И ТекущийОбъект.Предоплата.Количество() = 0 Тогда
			ЗаполнитьПредоплату(ТекущийОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ИсторияВыбора", "", Элементы.ЗапасыНоменклатура.СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры // ПередЗаписьюНаСервере()

// Процедура заполняет авансы.
//
&НаСервере
Процедура ЗаполнитьПредоплату(ТекущийОбъект)
	
	ТекущийОбъект.ЗаполнитьПредоплату();
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
	Если КэшЗначений.МодифицированностьФормы = Истина
		И (КэшЗначений.ВерсияПодчиненногоСчетФактуры = "1.6.11" 
			ИЛИ КэшЗначений.ВерсияПодчиненногоПолученногоСчетФактуры = "1.6.11" ) Тогда
		
		ТекстВопроса = НСтр("ru = 'В накладную были внесены изменения.
			|Требуется самостоятельно поправить подчиненный документ счет-фактура'");
		
		ПоказатьПредупреждение(, ТекстВопроса, 0, НСтр("ru ='Счет-фактура'"));
		
	КонецЕсли;
	
	// Прослеживаемость
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	// Конец Прослеживаемость
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ВерсияПодчиненногоСчетФактуры", КэшЗначений.ВерсияПодчиненногоСчетФактуры);
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ВерсияПодчиненногоПолученногоСчетФактуры", КэшЗначений.ВерсияПодчиненногоПолученногоСчетФактуры);
	
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаЗапасыИзменениеСтрок.Видимость Тогда
		УстановитьПометку(Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	Справочники.ДоговорыКонтрагентов.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(ТекущийОбъект.Договор,
		ТекущийОбъект.Ссылка, ТекущийОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
		
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	ОбновитьЗаголовокФормы();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьИДоступность(ЭтотОбъект);
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений();
	// Конец ГрупповоеИзменениеСтрок
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
		// Конец ГрупповоеИзменениеСтрок
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ИмяТабличнойЧасти = "Покупатели";
			Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, "Запасы") Тогда
				Возврат;
			КонецЕсли;
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ОбновлениеТекстаПроСчетФактуруПолученный" Тогда
		
		ПредставлениеЗаголовка = РаботаСФормойДокументаКлиент.ПредставлениеЗаголовкаПодчиненногоСчетаФактуры(Объект.Ссылка, Источник, Параметр, КэшЗначений);
		Если ПредставлениеЗаголовка <> Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетФактураНадпись", "Заголовок", ПредставлениеЗаголовка);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		УстановитьВидимостьДоговора();
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ИмяТабличнойЧасти	= "Запасы";
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, Истина, Ложь);
		
		СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы[ИмяТабличнойЧасти].ОтборСтрок["КлючСвязи"]);
		Элементы[ИмяТабличнойЧасти].ОтборСтрок = СтрОтбора;
		
		ОбновитьКолонкуВсегоНаКлиенте();
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Если ИзменилосьКоличество Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти();
		КонецЕсли; 
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект.Ссылка);
	// Конец Обсуждения
	
КонецПроцедуры // ОбработкаОповещения()

// Процедура - обработчик события ОбработкаВыбора.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ОтчетКомиссионера.Форма.ФормаПодбораПоОстаткам" Тогда
		
		ПолучитьЗапасыПереданныеИзХранилища(ВыбранноеЗначение);
		ОбновитьКолонкуВсегоНаКлиенте(Истина);
		ЭтаФорма.Модифицированность = Истина;
		
		// Прослеживаемость
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		
		ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбора" Тогда
		
		ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение);
		
		// Конец Прослеживаемость
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
			ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные);
		КонецЕсли;	
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС", Объект.ВидЦен, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		// Счета-фактуры на реализованные товары и услуги
		СчетаФактурыСводно = Объект.ВыписыватьСчетаФактурыСводно;
		Если ДатаДокумента < '20150101' Тогда
			Объект.ВыписыватьСчетаФактурыСводно = Ложь;
			Элементы.ВыписыватьСчетаФактурыСводно.Доступность = Ложь;
		Иначе
			Объект.ВыписыватьСчетаФактурыСводно = Истина;
			Элементы.ВыписыватьСчетаФактурыСводно.Доступность = Истина;
		КонецЕсли;
		Если СчетаФактурыСводно <> Объект.ВыписыватьСчетаФактурыСводно Тогда
			УстановитьОтборВыписыватьСчетаФактурыСводно();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении();
	Компания = СтруктураДанные.Компания;
	Объект.СтавкаНДСВознаграждения = СтруктураДанные.СтавкаНДС;
	
	СтруктураНадписи = Новый Структура("ВидЦен, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС", Объект.ВидЦен, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация);
	ОбработатьИзменениеДоговора();
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ВыписыватьСчетаФактурыСводно.
//
&НаКлиенте
Процедура ВыписыватьСчетаФактурыСводноПриИзменении(Элемент)
	
	УстановитьОтборВыписыватьСчетаФактурыСводно();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СпособРасчетаКомиссионногоВознаграждения.
//
&НаКлиенте
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзменении(Элемент)
	
	Если Не Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение(
		"Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") И ЗначениеЗаполнено(
		Объект.ПроцентКомиссионногоВознаграждения) Тогда
		Если Объект.Запасы.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("СпособРасчетаКомиссионногоВознагражденияПриИзмененииЗавершение",
				ЭтотОбъект), НСтр("ru = 'Изменился способ расчета. Пересчитать комиссионное вознаграждение?'"),
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Возврат;
		КонецЕсли;
	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение(
		"Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		Если Объект.Запасы.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("СпособРасчетаКомиссионногоВознагражденияПриИзмененииЗавершение",
				ЭтотОбъект), НСтр("ru = 'Комиссионное вознаграждение будет очищено, продолжить?'"),
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СпособРасчетаКомиссионногоВознагражденияПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;
	
	СпособРасчетаКомиссионногоВознагражденияПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзмененииФрагмент()
	
	УстановитьВидимостьИДоступность(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДСВознаграждения.
//
&НаКлиенте
Процедура СтавкаНДСВознагражденияПриИзменении(Элемент)

	Если Объект.Запасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПоказатьВопрос(Новый ОписаниеОповещения("СтавкаНДСВознагражденияПриИзмененииЗавершение", ЭтотОбъект),
		НСтр("ru = 'Пересчитать суммы НДС вознаграждения?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСВознагражденияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
		СтрокаТабличнойЧасти.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС,
		СтрокаТабличнойЧасти.СуммаВознаграждения - (СтрокаТабличнойЧасти.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.СуммаВознаграждения * СтавкаНДС / 100);
		
	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПроцентКомиссионногоВознаграждения.
//
&НаКлиенте
Процедура ПроцентКомиссионногоВознагражденияПриИзменении(Элемент)
	
	Если Объект.Запасы.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроцентКомиссионногоВознагражденияПриИзмененииЗавершение",
			ЭтотОбъект), НСтр("ru = 'Изменился процент вознаграждения. Пересчитать комиссионное вознаграждение?'"),
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентКомиссионногоВознагражденияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Надо предложить пересчитать комиссионное вознаграждение.
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроцентКомиссионногоВознагражденияПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
// Выполняет очистку договора и табличной части.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтрагента();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеКонтрагента()
	
	КонтрагентПередИзменением = Контрагент;
	КонтрагентВестиРасчетыПоЗаказамПередИзменением = КонтрагентВестиРасчетыПоЗаказам;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Контрагент, Объект.Организация);
		Объект.Договор = СтруктураДанные.Договор;
		
		СтруктураДанные.Вставить("КонтрагентПередИзменением", КонтрагентПередИзменением);
		СтруктураДанные.Вставить("КонтрагентВестиРасчетыПоЗаказамПередИзменением", КонтрагентВестиРасчетыПоЗаказамПередИзменением);
		
		ОбработатьИзменениеДоговора(СтруктураДанные);
		
		Если СтруктураДанные.Свойство("Проект") Тогда
			Объект.Проект = СтруктураДанные.Проект;
		КонецЕсли;
		
		// Прослеживаемость
		НастроитьЭлементыПрослеживаемостиПриИзмененииКонтрагента(СтруктураДанные);
		// Конец Прослеживаемость
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищенный договор.
		Элементы.ЗапасыЗаказПокупателя.Видимость = Не НеУчитыватьЗаказыПриПередачеНаКомиссию;
		Элементы.ПредоплатаЗаказ.Видимость = Не НеУчитыватьЗаказыПриПередачеНаКомиссию;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор.
// Заполняет реквизиты формы курс и кратность.
//
&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры // ДоговорПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Договор.
//
&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержатьКомиссионноеВознаграждениеПриИзменении(Элемент)
	
	Если Элементы.Найти("УчитыватьВНУ") <> Неопределено Тогда
		Элементы.УчитыватьВНУ.Доступность = Объект.УдержатьКомиссионноеВознаграждение;
		Объект.УчитыватьВНУ = Объект.УдержатьКомиссионноеВознаграждение;
	КонецЕсли;
	
	Если Объект.УдержатьКомиссионноеВознаграждение Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НоменклатураДляОтраженияСуммыБезВознаграждения", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НоменклатураДляОтраженияСуммыБезВознаграждения", "Видимость", Ложь);
		Объект.НоменклатураДляОтраженияСуммыБезВознаграждения = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не Объект.УдержатьКомиссионноеВознаграждение Тогда
			Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр("ru ='Оформление приходной накладной для учета комиссионного вознаграждения не требуется.'");
			Элементы.ДекорацияСхемаДвижений.Видимость = Истина;
		Иначе
			Элементы.ДекорацияСхемаДвижений.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Если Не Объект.УдержатьКомиссионноеВознаграждение Тогда
			Если Объект.ИспользоватьНовуюСхемуДвижений Тогда
				Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр("ru ='Оформление приходной накладной для учета комиссионного вознаграждения не требуется.'");
			Иначе
				Элементы.ДекорацияСхемаДвижений.Заголовок = НСтр("ru ='Чтобы учесть комиссионное вознаграждение необходимо оформить приходную накладную.'");
			КонецЕсли;
			Элементы.ДекорацияСхемаДвижений.Видимость = Истина;
		Иначе
			Элементы.ДекорацияСхемаДвижений.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	ОбработатьИзменениеВидаОперации();
	ПроверитьПоложениеКолонкиСебестоимость();
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиОтчетКомиссионераПриИзменении(Элемент)
	ОбработатьДоступныеОтчетыКомиссионера(ЭтотОбъект);
	ПроверитьПоложениеКолонкиСебестоимость();
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не Копирование
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах") Тогда
		
		ТекущиеДанныеПокупатели = Элементы.Покупатели.ТекущиеДанные;
		
		Если Не Объект.Покупатели.Количество() Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть Покупатели'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Покупатели", , Отказ);
			Возврат
		КонецЕсли;
		
		Если Не ТекущиеДанныеПокупатели = Неопределено И ЗначениеЗаполнено(ТекущиеДанныеПокупатели.ОтчетКомиссионера) Тогда
			Отказ = Истина;
			НоваяСтрока = Объект.Предоплата.Добавить();
			НоваяСтрока.ОтчетКомиссионера = ТекущиеДанныеПокупатели.ОтчетКомиссионера;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиПослеУдаления(Элемент)
	ОбработатьДоступныеОтчетыКомиссионера(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НайденныйСчетФактура = ПолучитьПодчиненныйСчетФактуру();
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах")
		И ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'На основании документа введена счет фактура. Смена операции невозможна.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЗаполнитьПризнакАвтораспределенияЗаказовКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияПоНовойСхемеЗакрытьНажатие(Элемент)
	Элементы.ГруппаИнформацияПоНовойСхеме.Видимость = Ложь;
	ПоказыватьИнформациюПоНовойСхемеДвижений = Ложь;
	
	СохранитьНастройкуПоказыватьИнформациюПоНовойСхеме();
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуПоказыватьИнформациюПоНовойСхеме()

	ИмяКлючаОбъекта = "ОтчетКомиссионераНоваяСхемаДвижений";
	ХранилищеСистемныхНастроек.Сохранить(ИмяКлючаОбъекта,
	ИмяКлючаОбъекта+"_" + "ПоказыватьИнформациюПоНовойСхемеДвижений", ПоказыватьИнформациюПоНовойСхемеДвижений);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура СчетФактураНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СчетаФактурыУНФКлиент.ОткрытьСчетФактуру(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		// Выбрать основание
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДокументОснование, Элементы.ДокументОснованиеНадпись);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу(Объект.ДокументОснование);
		ОбработатьИзменениеКонтрагента();
		УстановитьВидимостьИДоступность(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;

	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбранноеИмяФормы, Параметры) Экспорт
	
	Если ВыбранноеИмяФормы<>Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		Если ВыбранноеИмяФормы.Значение = "Документ.РасходнаяНакладная.ФормаВыбора" Тогда
			ВидОперацииРасходнаяНакладная = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию");
			СтруктураПараметровОтбора = Новый Структура("Отбор", Новый Структура("Контрагент, Договор, ВидОперации", Контрагент, Договор, ВидОперацииРасходнаяНакладная));
		КонецЕсли;
		
		Если ВыбранноеИмяФормы.Значение = "Документ.ОтчетКомиссионера.ФормаВыбора" Тогда
			
			СписокОтбора = Новый СписокЗначений;
			СписокОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера"));
			СписокОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ПустаяСсылка"));
			
			СтруктураПараметровОтбора.Вставить("Отбор", Новый Структура("Контрагент, Договор, ВидОперации", Контрагент, Договор, СписокОтбора));
		КонецЕсли;
		
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбранноеИмяФормы.Значение, СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбранноеЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбранноеЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументОснование()
	СписокДокументОснование.Очистить();
	СписокДокументОснование.Добавить("Документ.РасходнаяНакладная.ФормаВыбора", НСтр("ru = 'Расходная накладная'"));
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах Тогда
		СписокДокументОснование.Добавить("Документ.ОтчетКомиссионера.ФормаВыбора", НСтр("ru = 'Отчет комиссионера о продажах'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПокупатели

// Процедура - обработчик события ПриАктивизацииСтроки табличной части Покупатели.
//
&НаКлиенте
Процедура ПокупателиПриАктивизацииСтроки(Элемент)
	
	ИмяТабличнойЧасти = "Покупатели";
	ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "Запасы");
	
	ПроверитьПоложениеКолонкиСебестоимость();
	
КонецПроцедуры // ПокупателиПриАктивизацииСтроки()

&НаКлиенте
Процедура ПроверитьПоложениеКолонкиСебестоимость()
	
	ДанныеСтроки = Элементы.Покупатели.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах") Тогда
		
		Если Не ДанныеСтроки = Неопределено И ЗначениеЗаполнено(ДанныеСтроки.ОтчетКомиссионера) Тогда
			
			Элементы.ЗапасыСебестоимость.Видимость = Ложь;
			
		ПараметрыОтбора = Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи);
		НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
			
		Для Каждого СтрокаЗапасы Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(СтрокаЗапасы.Себестоимость) Тогда
				СтрокаЗапасы.Себестоимость = 0;
			КонецЕсли;
		КонецЦикла;
			
		Иначе
			Элементы.ЗапасыСебестоимость.Видимость = Истина;
		КонецЕсли;
		
	Иначе
		
		Элементы.ЗапасыСебестоимость.Видимость = Ложь;
		
		Если Не ДанныеСтроки = Неопределено Тогда
		
		ПараметрыОтбора = Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязи);
		НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаЗапасы Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(СтрокаЗапасы.Себестоимость) Тогда
				СтрокаЗапасы.Себестоимость = 0;
			КонецЕсли;
		КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования табличной части Покупатели.
//
&НаКлиенте
Процедура ПокупателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "Покупатели";
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтаФорма);
		ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "Запасы");
	КонецЕсли;
	
	Если Копирование Тогда
		СтрокаТабличнойЧасти.Всего = 0;
	КонецЕсли;
	
КонецПроцедуры // ПокупателиПриНачалеРедактирования()

// Процедура - обработчик события ПередУдалением табличной части Покупатели.
//
&НаКлиенте
Процедура ПокупателиПередУдалением(Элемент, Отказ)
	
	// Серии
	ТекущийПокупатель = Элементы.Покупатели.ТекущиеДанные;
	РезультатПоиска = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСвязи", ТекущийПокупатель.КлючСвязи));
	Для каждого СтрокаЗапасы Из РезультатПоиска Цикл
		
		РезультатПоискаСН = Объект.СерииНоменклатуры.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаЗапасы.КлючСвязиСерииНоменклатуры));
		Для Каждого СтрокаСерииНоменклатуры Из РезультатПоискаСН Цикл
			ИндексУдаления = Объект.СерииНоменклатуры.Индекс(СтрокаСерииНоменклатуры);
			Объект.СерииНоменклатуры.Удалить(ИндексУдаления);
		КонецЦикла;
	КонецЦикла;
	// Серии
	
	ИмяТабличнойЧасти = "Покупатели";
	ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "Запасы");
	
КонецПроцедуры // ПокупателиПередУдалением()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

// Процедура - обработчик события ПриНачалеРедактирования табличной части Запасы.
//
&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "Покупатели";
	
	Если НоваяСтрока Тогда
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, Элемент.Имя);
	КонецЕсли;
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязиСерииНоменклатуры = 0;
		Элемент.ТекущиеДанные.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, Элемент.ТекущиеДанные);
		
		// Прослеживаемость
		Элемент.ТекущиеДанные.ИдентификаторСтроки = "";
		Элемент.ТекущиеДанные.РНПТ = "";
	КонецЕсли;

	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыСерииНоменклатуры" Тогда
		ОткрытьПодборСерииНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПриНачалеРедактирования()

// Процедура - обработчик события ПередНачаломДобавления табличной части Запасы.
//
&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ИмяТабличнойЧасти = "Покупатели";
	
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, Элемент.Имя) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если Не Отказ И Копирование Тогда
		
		ОбновитьКолонкуВсегоНаКлиенте();
		
		ТекСтрокаПокупатели = Элементы.Покупатели.ТекущиеДанные;
		ТекСтрокаПокупатели.Всего = ТекСтрокаПокупатели.Всего + Элемент.ТекущиеДанные.Всего;
		
		КопированиеСтрокиЗапасы = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПередНачаломДобавления()

// Процедура - обработчик события ПриИзменении табличной части Запасы.
//
&НаКлиенте
Процедура ЗапасыПриИзменении(Элемент)
	
	Если КопированиеСтрокиЗапасы = Неопределено ИЛИ НЕ КопированиеСтрокиЗапасы Тогда
		ОбновитьКолонкуВсегоНаКлиенте();
	Иначе
		КопированиеСтрокиЗапасы = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",	 СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
		СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
		СтруктураДанные.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("Коэффициент",		 1);
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.ЦенаПередачи = 0;
	СтрокаТабличнойЧасти.СуммаПередачи = 0;
	СтрокаТабличнойЧасти.СуммаНДСПередачи = 0;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
	// Серии
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,,ИспользоватьСерииНоменклатурыОстатки);
	КонецЦикла;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	// Прослеживаемость
	Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров
		И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
		СтрокаТабличнойЧасти.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
	Иначе
		СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
		СтрокаТабличнойЧасти.КодТНВЭД = Неопределено;
	КонецЕсли;
	// Конец Прослеживаемость
	
	СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	ОбновитьКолонкуВсегоНаКлиенте();
	ЗаполнитьПризнакАвтораспределенияЗаказовКлиент();
	
	// Прослеживаемость
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ОтчетКомиссионера", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		ВыбранноеЗначение = СтрокаТабличнойЧасти.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация",	 		Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",		СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",		СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
		СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
		СтруктураДанные.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("СтавкаНДС", 		 СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		СтруктураДанные.Вставить("Цена",			 СтрокаТабличнойЧасти.Цена);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПартияПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения= СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД			= СтруктураДанные.НомерГТД;
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
	// Прослеживаемость
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗапасыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация",	 		Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",		СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",		СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПартияПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения= СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД			= СтруктураДанные.НомерГТД;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
	// Сумма передачи.
	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	// Сумма НДС передачи.
	СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
		СтрокаТабличнойЧасти.СуммаПередачи - (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
	 ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		
		СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		РассчитатьСуммыПередачи();
		
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		
	// Сумма НДС передачи.
	СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
												СтрокаТабличнойЧасти.СуммаПередачи - (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
												СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);
	
КонецПроцедуры  // ЗапасыСтавкаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ЦенаПередачи.
//
&НаКлиенте
Процедура ЗапасыЦенаПередачиПриИзменении(Элемент)
	
	РассчитатьСуммыПередачи();
	
КонецПроцедуры // ЗапасыЦенаПередачиПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СуммаПередачи.
//
&НаКлиенте
Процедура ЗапасыСуммаПередачиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТабличнойЧасти.СуммаПередачи / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС передачи.
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		
	СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
												СтрокаТабличнойЧасти.СуммаПередачи - (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
												СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);	
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыСуммаПередачиПриИзменении

// Процедура - обработчик события ПриИзменении поля ввода СуммаВознаграждения.
//
&НаКлиенте
Процедура ЗапасыСуммаВознагражденияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
		
	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС,
													СтрокаТабличнойЧасти.СуммаВознаграждения - (СтрокаТабличнойЧасти.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаВознаграждения * СтавкаНДС / 100);
	Объект.СуммаВознаграждения = Объект.Запасы.Итог("СуммаВознаграждения");
	
КонецПроцедуры // ЗапасыСуммаВознагражденияПриИзменении(Элемент)

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
		
		СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
		
		Курс = ?(Объект.Курс = 0, 1, Объект.Курс);
		СтрокаТабличнойЧасти.Курс = ?(СтрокаТабличнойЧасти.Курс = 0, Курс, СтрокаТабличнойЧасти.Курс);
		
		Кратность = ?(Объект.Кратность = 0, 1, Объект.Кратность);
		СтрокаТабличнойЧасти.Кратность = ?(СтрокаТабличнойЧасти.Кратность = 0, Кратность, СтрокаТабличнойЧасти.Кратность);
		
		ВалютаДокумента = ?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс);
		ВалютаДокументаКратность = ?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность);
		
		СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс, ВалютаДокумента, СтрокаТабличнойЧасти.Кратность, ВалютаДокументаКратность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	КурсПересчета = ?(Объект.ВалютаДокумента = НациональнаяВалюта, 1, Объект.Курс);
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * КурсПересчета
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Серии номера
	Для Каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,,ИспользоватьСерииНоменклатурыОстатки);
		// Прослеживаемость
		УдалитьСвязанныеЗаписи(ТекущиеДанныеСтроки);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание: выбранная ГТД датирована более поздней датой, чем текущий документ.'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Запасы",
				СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах") Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь, Истина);
	Иначе
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРНПТОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Прослеживаемость
	СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле = Элементы.ЗапасыРНПТ И СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах") Тогда
			ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь, Истина);
		Иначе
			ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь);
		КонецЕсли; 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	// Конец Прослеживаемость
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
		// Прослеживаемость
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
		// Конец Прослеживаемость
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта",Новый Структура("Владелец, Организация, ВидДоговора, ОповеститьОЗаписиДоговора",Объект.Контрагент,Объект.Организация,ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СКомиссионером"), Истина), Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредоплата

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля.
//
&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	Модифицированность = Истина;
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

// Процедура вызывается при нажатии кнопки "ДобавитьКонтрагентаВПокупатели"
//
&НаКлиенте
Процедура ДобавитьКонтрагентаВПокупатели(Команда)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		НоваяСтрока = Объект.Покупатели.Добавить();
		НоваяСтрока.Покупатель = Объект.Контрагент;
		
		ИмяТабличнойЧасти = "Покупатели";
		НоваяСтрока.КлючСвязи = ТабличныеЧастиУНФКлиентСервер.СоздатьНовыйКлючСвязи(ЭтаФорма);
		ТабличныеЧастиУНФКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "Запасы");
		
		Элементы.Покупатели.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьКонтрагентаВПокупатели()

// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура РедактироватьЗачетПредоплаты(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале контрагента!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале договор контрагента!'"));
		Возврат;
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	
	Для каждого ТекЭлемент Из Объект.Запасы Цикл
		
		СтруктураЗаказа = Новый Структура("Заказ, Всего");
		СтруктураЗаказа.Заказ = ТекЭлемент.ЗаказПокупателя;
		СтруктураЗаказа.Всего = ТекЭлемент.Всего;
		МассивЗаказов.Добавить(СтруктураЗаказа);
		
	КонецЦикла;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	ПараметрыПодбора = Новый Структура();
	
	ПараметрыПодбора.Вставить("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище);
	ПараметрыПодбора.Вставить("Подбор", Истина);
	ПараметрыПодбора.Вставить("ЕстьЗаказ", Истина);
	ПараметрыПодбора.Вставить("ЗаказВШапке", Ложь);
	ПараметрыПодбора.Вставить("Компания", Компания);
	ПараметрыПодбора.Вставить("Заказ", ?(КонтрагентВестиРасчетыПоЗаказам, МассивЗаказов, Неопределено));
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("Курс", Объект.Курс);
	ПараметрыПодбора.Вставить("Кратность", Объект.Кратность);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.Запасы.Итог("Всего"));
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПокупателей", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение", ЭтотОбъект,
		Новый Структура("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
    
    
    КодВозврата = Результат;
    
    Если КодВозврата = КодВозвратаДиалога.OK Тогда
        ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
    КонецЕсли;

КонецПроцедуры // РедактироватьЗачетПредоплаты()

// ПодключаемоеОборудование
// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ИмяТабличнойЧасти = "Покупатели";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "Запасы") Тогда
		Возврат;
	КонецЕсли;
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));
	
	#Если МобильныйКлиент Тогда
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
	ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
		
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

// Процедура - обработчик события Действие команды ПолучитьВес
//
&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтаФорма, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
	// Сумма передачи.
	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	// Сумма НДС передачи.
	СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
		СтрокаТабличнойЧасти.СуммаПередачи - (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик команды ЗагрузитьДанныеИзТСД.
//
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ИмяТабличнойЧасти = "Покупатели";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "Запасы") Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтаФорма);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Ложь, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура РежимГТД(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТД", "Пометка", НЕ Элементы.РежимГТД.Пометка);
	
	ИзменитьРежимРаботаГТД(Элементы.РежимГТД.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДЗаполнитьПоФактическимОстаткам(Команда)
	
	ТекущиеДанныеСтрокиПокупатели = Элементы.Покупатели.ТекущиеДанные;
	Если ТекущиеДанныеСтрокиПокупатели = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru ='Необходимо выделить строку с покупателем!'");
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	КлючСвязи = ТекущиеДанныеСтрокиПокупатели.КлючСвязи;
	НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(КлючСвязи, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДЗаполнитьПоОстаткамПереданным(Команда)
	
	ТекущиеДанныеСтрокиПокупатели = Элементы.Покупатели.ТекущиеДанные;
	Если ТекущиеДанныеСтрокиПокупатели = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru ='Необходимо выделить строку с покупателем!'");
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	КлючСвязи = ТекущиеДанныеСтрокиПокупатели.КлючСвязи;
	НомераГТДПодобратьПоПереданнымНаСервере(КлючСвязи, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДПодобрать(Команда)
	
	ТекущиеДанныеСтрокиПокупатели = Элементы.Покупатели.ТекущиеДанные;
	Если ТекущиеДанныеСтрокиПокупатели = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru ='Необходимо выделить строку с покупателем!'");
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	КлючСвязи = ТекущиеДанныеСтрокиПокупатели.КлючСвязи;
	НомераГТДПодобратьНаСервере(КлючСвязи, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	Отказ = ЗаполнениеОстаткамиНеВозможно();
	Если Отказ Тогда Возврат КонецЕсли;
	
	Если Объект.Запасы.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросОчиститьЗапасы", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;

	ЗаполнитьПоОстаткамНаСервере();
	ОбновитьКолонкуВсегоНаКлиенте(Истина);
	ЭтаФорма.Модифицированность = Объект.Запасы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьЗапасы(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда Возврат КонецЕсли;
	
	ЗаполнитьПоОстаткамНаСервере();
	ОбновитьКолонкуВсегоНаКлиенте(Истина);
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоЗаказам(Команда)
	
	Отказ = ЗаполнениеОстаткамиНеВозможно();
	
	Если Отказ Тогда Возврат КонецЕсли;
	
	Если Не Объект.Запасы.Количество() Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Распределение производится по номенклатуре которая предварительно добавлена в таблицу.'"),, НСтр("ru = 'Добавьте номенклатуру в таблицу'"));
		Возврат
	КонецЕсли;
	
	РаспределитьПоЗаказамСервер();
	ОбновитьКолонкуВсегоНаКлиенте(Истина);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьПоЗаказамСервер()
	
	ТекущийКлючСвязи = Элементы.Запасы.ОтборСтрок["КлючСвязи"];
	
	РаботаСКомиссионерамиКомитентамиСервер.РаспределитьНоменклатуруПоЗаказам(ЭтотОбъект, Неопределено, "Запасы", ТекущийКлючСвязи);
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенуПоЦенаПередачи(Команда)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ЗаполнитьЦенуПоЦенеПереданной"
		+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.ЦенаПередачи;
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	Если НЕ ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "Запасы") Тогда
		
		НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ОтчетКомиссионера.ТабличнаяЧасть.Запасы";
		
		НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ОтчетКомиссионера.Запасы");
		НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайлаЗапасы");
		НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка запасов из файла'"));
		НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
		НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги", Ложь);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
		
		ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьПодчиненныйСчетФактуру()
	Возврат СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Истина);
КонецФункции

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Состояние = "";
	Если Объект.ПометкаУдаления Тогда
		Состояние = НСтр("ru='(удален)'");
	ИначеЕсли Не Объект.Проведен Тогда
		Состояние = НСтр("ru='(не проведен)'");
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Состояние = НСтр("ru='(создание)'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Состояние = НСтр("ru='(создание)'");
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2'"),
		Объект.Ссылка.Метаданные().Представление(), Состояние);
	Иначе
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2 от %3 %4'"),
		Объект.Ссылка.Метаданные().Представление(),
		?(ЗначениеЗаполнено(Объект.Номер), ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер, Истина, Истина), "")
		,Формат(Объект.Дата, "ДЛФ=D"), Состояние);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах Тогда
		Заголовок = СтрЗаменить(Представление, НСтр("ru='Отчет комиссионера'"), НСтр("ru='Отчет комиссионера о возвратах'"));
	Иначе
		Заголовок = СтрЗаменить(Представление, НСтр("ru='Отчет комиссионера'"), НСтр("ru='Отчет комиссионера о продажах'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакАвтораспределенияЗаказов()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера Тогда
		Возврат
	КонецЕсли;
		
	Для Каждого СтрокаПокупатели Из Объект.Покупатели Цикл
		
		ПараметрыОтбора = Новый Структура("КлючСвязи", СтрокаПокупатели.КлючСвязи);
		НайденныеСтрокиЗапасы = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
		ОтчетВыбран = ЗначениеЗаполнено(СтрокаПокупатели.ОтчетКомиссионера);
		
		Для Каждого СтрокаЗапасы Из НайденныеСтрокиЗапасы Цикл
			СтрокаЗапасы.ОтчетКомиссионераВыбран = ОтчетВыбран;
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПризнакАвтораспределенияЗаказовКлиент()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера") Тогда
		Возврат
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Покупатели.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
		
	ПараметрыОтбора = Новый Структура("КлючСвязи", ТекущиеДанные.КлючСвязи);
	НайденныеСтрокиЗапасы = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
	ОтчетВыбран = ЗначениеЗаполнено(ТекущиеДанные.ОтчетКомиссионера);
	
	Для Каждого СтрокаЗапасы Из НайденныеСтрокиЗапасы Цикл
		СтрокаЗапасы.ОтчетКомиссионераВыбран = ОтчетВыбран;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьДоступныеОтчетыКомиссионера(Форма)
	
	ОбъектФормы = Форма.Объект;
	Форма.Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(ОбъектФормы.Предоплата, ОбъектФормы.ВалютаДокумента);
	
	Если Не ОбъектФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах") Тогда
		Возврат
	КонецЕсли;
	
	Форма.Элементы.ПредоплатаОтчетКомиссионера.СписокВыбора.Очистить();
	
	Для Каждого СтрокаТабличнойЧасти Из ОбъектФормы.Покупатели Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОтчетКомиссионера) Тогда
			Форма.Элементы.ПредоплатаОтчетКомиссионера.СписокВыбора.Добавить(СтрокаТабличнойЧасти.ОтчетКомиссионера);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеВидаОперации()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах Тогда
		
		УдержатьКомиссионноеВознаграждение = Ложь;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			УдержатьКомиссионноеВознаграждение = Объект.Договор.УдержатьКомиссионноеВознаграждение;
		КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Покупатели Цикл
			СтрокаТабличнойЧасти.ОтчетКомиссионера = Документы.ОтчетКомиссионера.ПустаяСсылка();
			СтрокаТабличнойЧасти.ВыставленСФ = Ложь;
			СтрокаТабличнойЧасти.ДатаСФ = Неопределено;
			СтрокаТабличнойЧасти.СчетФактура = Неопределено;
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			СтрокаТабличнойЧасти.ОтчетКомиссионера = Документы.ОтчетКомиссионера.ПустаяСсылка();
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьВидимостьИДоступность(ЭтотОбъект);
	
	РазрешеноРедактированиеЦенДокументов = Не Элементы.ЗапасыЦенаПередачи.ТолькоПросмотр;
	
	Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
	ЗаполнитьСписокДействий(РазрешеноРедактированиеЦенДокументов);
	
	ЗаполнитьСписокДокументОснование();
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере(ПараметрыЗаполнения = Неопределено)
	
	ЗаполнениеПоНоменклатуре = Ложь;
	
	КлючСвязи = Элементы["Запасы"].ОтборСтрок["КлючСвязи"];
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ЗапасыПереданные = РаботаСКомиссионерамиКомитентамиСервер.ТаблицаОстатковТоваровУКомиссионера(Объект, , ,
			КлючСвязи);
	Иначе

		Если ТипЗнч(ПараметрыЗаполнения) = Тип("Структура") И ПараметрыЗаполнения.Свойство("ПоВсемуКоличеству")
			И Не ПараметрыЗаполнения.ПоВсемуКоличеству Тогда
			ЗаполнениеПоНоменклатуре = Истина;
			КоличествоДляРаспределения = ПараметрыЗаполнения.Количество;
		КонецЕсли;

		ЗапасыПереданные = РаботаСКомиссионерамиКомитентамиСервер.ТаблицаОстатковТоваровУКомиссионера(Объект,
			ПараметрыЗаполнения);

	КонецЕсли;
	
	ПрерватьЦикл = Ложь;
	
	Для каждого СтрокаТабличнойЧасти Из ЗапасыПереданные Цикл
		
		НоваяСтрока = Объект.Запасы.Добавить();
		
		Если ЗаполнениеПоНоменклатуре Тогда
			Если СтрокаТабличнойЧасти.Количество > КоличествоДляРаспределения И Не КоличествоДляРаспределения = 0 Тогда
				СтрокаТабличнойЧасти.СуммаРасчетов = Окр(СтрокаТабличнойЧасти.СуммаРасчетов
					/ СтрокаТабличнойЧасти.Количество * КоличествоДляРаспределения, 2, РежимОкругления.Окр15как20);
				СтрокаТабличнойЧасти.Количество = КоличествоДляРаспределения;
				СтрокаТабличнойЧасти.Остаток = КоличествоДляРаспределения;
				ПрерватьЦикл = Истина;
			ИначеЕсли КоличествоДляРаспределения = 0 Тогда
				ПрерватьЦикл = Истина;
			Иначе
				КоличествоДляРаспределения = КоличествоДляРаспределения - СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия",	 СтрокаТабличнойЧасти.Партия);
		
		Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
			СтруктураДанные.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
			СтруктураДанные.Вставить("Коэффициент",		 1);
		КонецЕсли;
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		НоваяСтрока.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		НоваяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		НоваяСтрока.Цена = СтруктураДанные.Цена;
		
		Если СтрокаТабличнойЧасти.Количество > СтрокаТабличнойЧасти.Остаток
			ИЛИ СтрокаТабличнойЧасти.СуммаРасчетов = 0 Тогда
			НоваяСтрока.СуммаПередачи = 0;
		ИначеЕсли СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Остаток Тогда
			НоваяСтрока.СуммаПередачи = СтрокаТабличнойЧасти.СуммаРасчетов;
		Иначе
			НоваяСтрока.СуммаПередачи = Окр(СтрокаТабличнойЧасти.СуммаРасчетов / СтрокаТабличнойЧасти.Остаток * СтрокаТабличнойЧасти.Количество,2,0);
		КонецЕсли;
		
		Если НоваяСтрока.Количество > 0 Тогда
			НоваяСтрока.ЦенаПередачи = НоваяСтрока.СуммаПередачи / НоваяСтрока.Количество;
		Иначе
			НоваяСтрока.ЦенаПередачи = НоваяСтрока.СуммаПередачи;
		КонецЕсли;
			
		РаботаСКомиссионерамиКомитентамиСервер.РассчитатьСуммуВСтрокеТабличнойЧастиЗапасыОтчетКомиссионера(Объект, ИспользоватьСерииНоменклатурыОстатки, НоваяСтрока);
		РаботаСКомиссионерамиКомитентамиСервер.РассчитатьКомиссионноеВознаграждениеЗапасыОтчетКомиссионера(Объект, НоваяСтрока);
		
		НоваяСтрока.КлючСвязи = КлючСвязи;
		
		Если ПрерватьЦикл Тогда Прервать КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Функция ЭтоВозвратСервер()
	Возврат Объект.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах");
КонецФункции

&НаКлиенте
Функция ЗаполнениеОстаткамиНеВозможно() 
	
	ИмяТабличнойЧасти = "Покупатели";
	Отказ = Ложь;
	
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, "Покупатели") Тогда
		Отказ = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Договор"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Договор", , Отказ);
	КонецЕсли;
	
	Возврат Отказ;

КонецФункции

&НаСервере
Процедура ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита()
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"ОтчетКомиссионера", "Запасы", НастройкиФормыВыбораНоменклатуры);
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьНастроекУчетаВНалогообложении()
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		Элементы.УчитыватьВНУ.Видимость = Ложь;
		
		Возврат;
	КонецЕсли;
	
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, Объект.Дата);
	
	Элементы.УчитыватьВНУ.Видимость = СистемаНалогообложенияСтруктура.ПлательщикУСН;
	Элементы.УчитыватьВНУ.Доступность = Объект.УдержатьКомиссионноеВознаграждение;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И СистемаНалогообложенияСтруктура.ПлательщикУСН Тогда
		Объект.УчитыватьВНУ = Объект.УдержатьКомиссионноеВознаграждение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает изменение реквизитов документов Вид цен и Валюта расчетов
//
Процедура ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента)
	
	ВалютаРасчетовПередИзменением = ПараметрыДокумента.ВалютаРасчетовПередИзменением;
	ДанныеДоговора = ПараметрыДокумента.ДанныеДоговора;
	ВопросВидЦен = ПараметрыДокумента.ВопросВидЦен;
	ОткрытьФормуЦеныИВалюты = ПараметрыДокумента.ОткрытьФормуЦеныИВалюты;
	ИзменилсяВидЦен = ПараметрыДокумента.ИзменилсяВидЦен;
	ПересчетНеобходим = ПараметрыДокумента.ПересчетНеобходим;
	
	Если НЕ ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
		
		Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		
		Объект.Курс      = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
		
	КонецЕсли;
	
	Если ИзменилсяВидЦен Тогда
		
		Объект.ВидЦен = ДанныеДоговора.ВидЦен;
		
	КонецЕсли;
	
	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
	
	СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦен, НалогообложениеНДС",
		ДанныеДоговора.ВалютаРасчетов,
		ВалютаРасчетов,
		Объект.Курс,
		КурсНациональнаяВалюта,
		Объект.СуммаВключаетНДС,
		УчетВалютныхОпераций,
		Объект.ВидЦен,
		Объект.НалогообложениеНДС);
	
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = "";
		Если ВопросВидЦен И ПересчетНеобходим Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает вид цен, 
				|отличный от установленного в документе! 
				|Пересчитать документ в соответствии с договором?'") + Символы.ПС + Символы.ПС;
				
		КонецЕсли;
		
		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом! 
			|Необходимо проверить валюту документа!'");
			
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, ВопросВидЦен, ТекстПредупреждения);
		
	ИначеЕсли ВопросВидЦен Тогда
		
		Если ПересчетНеобходим Тогда
			
			ТекстВопроса = НСтр("ru = 'Договор с контрагентом предусматривает вид цен, отличный от установленного в документе! 
				|Пересчитать документ в соответствии с договором?'");
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора", ЭтотОбъект, ПараметрыДокумента);
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеВидаЦенИВалютыРасчетов()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов)
	
	РазностьДат = ДокументыУНФ.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаРасчетов));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	// Прослеживаемость
	КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата));
	ОбновитьПризнакПрослеживаемости();
	// Конец Прослеживаемость
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера для процедуры ОрганизацияПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении()
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("Компания", Константы.УчетПоКомпании.Компания(Объект.Организация));
	СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса())));
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	// Прослеживаемость
	СтруктураДанные.Вставить("ТоварнаяНоменклатураВЭД", СтруктураДанные.Номенклатура.ТоварнаяНоменклатураВЭД);
	
	// Наборы
	СтруктураДанные.Вставить("ЭтоНабор", СтруктураДанные.Номенклатура.ЭтоНабор);
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") И Не СтруктураДанные.НалогообложениеНДС
		= Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда

		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;

	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(
			СтруктураДанные.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки),
			СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(
			СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки),
			СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики", Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(
			СтруктураДанные.Номенклатура);

		Если Не ЗначенияПоУмолчанию = Неопределено Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;

		Если Не СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика", ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика),
				СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;

		СтруктураДанные.Вставить("ИспользоватьХарактеристики", Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",
			СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии", Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий", Ложь);

	Если Не СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии Тогда

		СтатусПартии = ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы");
		ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(
			СтруктураДанные.Номенклатура, СтатусПартии);

		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();

		Если Не ЗначенияПартииПоУмолчанию = Неопределено Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;

		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);

		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;

	КонецЕсли;
	// Конец Партии
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВКомиссииНомераГТДПереданного(СтруктураДанные);
	
	// Прослеживаемость
	СтруктураДанные.Вставить("ПрослеживаемыйТовар", СтруктураДанные.Номенклатура.ПрослеживаемыйТовар 
	И СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	Если СтруктураДанные.ПрослеживаемыйТовар 
		И ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров") Тогда
		СтруктураДанные.Вставить("НомерГТД", Неопределено);
	КонецЕсли; 
	// Конец Прослеживаемость
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПартияПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ЕдиницаИзмерения") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
			
		Иначе
			
			СтруктураДанные.Вставить("Коэффициент", 1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидЦен")
		И ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("Цена", ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СтранаПроисхождения) Тогда
		
		СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВКомиссииНомераГТДПереданного(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
		
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе	
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Дата, ВалютаДокумента, Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("Договор", ДоговорПоУмолчанию);
	
	Если ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
		СтруктураДанные.Вставить("УдержатьКомиссионноеВознаграждение", ДоговорПоУмолчанию.УдержатьКомиссионноеВознаграждение);
		СтруктураДанные.Вставить("СпособРасчетаКомиссионногоВознаграждения", ДоговорПоУмолчанию.СпособРасчетаКомиссионногоВознаграждения);
		СтруктураДанные.Вставить("ПроцентКомиссионногоВознаграждения", ДоговорПоУмолчанию.ПроцентКомиссионногоВознаграждения);
	Иначе
		СтруктураДанные.Вставить("УдержатьКомиссионноеВознаграждение", Ложь);
		СтруктураДанные.Вставить("СпособРасчетаКомиссионногоВознаграждения", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
		СтруктураДанные.Вставить("ПроцентКомиссионногоВознаграждения", 0);
	КонецЕсли;
	
	СтруктураДанные.Вставить("ВалютаРасчетов", ДоговорПоУмолчанию.ВалютаРасчетов);
	СтруктураДанные.Вставить("ВалютаРасчетовКурсКратность", РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов)));
	СтруктураДанные.Вставить("РасчетыВУсловныхЕдиницах", ДоговорПоУмолчанию.РасчетыВУсловныхЕдиницах);
	СтруктураДанные.Вставить("ВидЦен", ДоговорПоУмолчанию.ВидЦен);
	СтруктураДанные.Вставить("СуммаВключаетНДС", ?(ЗначениеЗаполнено(ДоговорПоУмолчанию.ВидЦен), ДоговорПоУмолчанию.ВидЦен.ЦенаВключаетНДС, Неопределено));
	СтруктураДанные.Вставить("СпособЗаполненияСтавкиНДС", Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(ДоговорПоУмолчанию));
	СтруктураДанные.Вставить("НеУчитыватьЗаказыПриПередачеНаКомиссию", ?(ЗначениеЗаполнено(ДоговорПоУмолчанию), ДоговорПоУмолчанию.НеУчитыватьЗаказыПриПередачеНаКомиссию, Ложь));
	
	Если ПолучитьФункциональнуюОпцию("УчетПоПроектам") И НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		СтруктураДанные.Вставить("Проект", Справочники.Проекты.ПолучитьПроектПоДоговору(ДоговорПоУмолчанию));
	КонецЕсли;
	
	УстановитьВидимостьДоговора();
	
	Если ЗначениеЗаполнено(СтруктураДанные.Договор) Тогда
		СтруктураДанные.Вставить("НоменклатураДляОтраженияСуммыБезВознаграждения", СтруктураДанные.Договор.НоменклатураДляОтраженияСуммыБезВознаграждения);
	КонецЕсли;
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	// Прослеживаемость
	СтруктураДанные.Вставить(
	"РеализацияВЕАЭС",
	Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	РеализацияВЕАЭС = КэшЗначений.РеализацияВЕАЭС;
	// Конец Прослеживаемость
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, Договор)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("ВалютаРасчетов", Договор.ВалютаРасчетов);
	СтруктураДанные.Вставить("ВалютаРасчетовКурсКратность", РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов)));
	СтруктураДанные.Вставить("ВидЦен", Договор.ВидЦен);
	СтруктураДанные.Вставить("РасчетыВУсловныхЕдиницах", Договор.РасчетыВУсловныхЕдиницах);
	СтруктураДанные.Вставить("НоменклатураДляОтраженияСуммыБезВознаграждения", Договор.НоменклатураДляОтраженияСуммыБезВознаграждения);
	СтруктураДанные.Вставить("СуммаВключаетНДС", ?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено));
	СтруктураДанные.Вставить("СпособЗаполненияСтавкиНДС", Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(Договор));
	СтруктураДанные.Вставить("НеУчитыватьЗаказыПриПередачеНаКомиссию", ?(ЗначениеЗаполнено(Договор), Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию, Ложь));
	
	Если ЗначениеЗаполнено(Договор) Тогда
		СтруктураДанные.Вставить("УдержатьКомиссионноеВознаграждение", Договор.УдержатьКомиссионноеВознаграждение);
		СтруктураДанные.Вставить("СпособРасчетаКомиссионногоВознаграждения", Договор.СпособРасчетаКомиссионногоВознаграждения);
		СтруктураДанные.Вставить("ПроцентКомиссионногоВознаграждения", Договор.ПроцентКомиссионногоВознаграждения);
	Иначе
		СтруктураДанные.Вставить("УдержатьКомиссионноеВознаграждение", Ложь);
		СтруктураДанные.Вставить("СпособРасчетаКомиссионногоВознаграждения", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
		СтруктураДанные.Вставить("ПроцентКомиссионногоВознаграждения", 0);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения
// организации.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(ЭтоОткрытие = Ложь)
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	Если Не ЗначениеЗаполнено(СпособЗаполненияСтавкиНДС) Тогда
		Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
	ИначеЕсли СпособЗаполненияСтавкиНДС = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСтавкиНДС.БезНДС") Тогда
		Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС");
	Иначе
		Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
	КонецЕсли;
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС ИЛИ ЭтоОткрытие Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
//
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ЗапасыСуммаНДСПередачи.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
											
			СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
													СтрокаТабличнойЧасти.СуммаПередачи - (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);
								                    											
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;	
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДСПередачи.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			Элементы.СчетФактураНадпись.Видимость = Истина;
		КонецЕсли;	
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.СуммаНДСПередачи = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Серии номера
	Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено Тогда
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти,,"КлючСвязиСерииНоменклатуры");
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура РассчитатьСуммыПередачи()
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Сумма передачи.
	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаПередачи;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	// Сумма НДС передачи.
	СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
												СтрокаТабличнойЧасти.СуммаПередачи - (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
												СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);	
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Рассчитывает комиссионное вознаграждение в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//
&НаКлиенте
Процедура РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти)
	
	Если Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи") Тогда
		СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения * СтрокаТабличнойЧасти.Сумма / 100;
	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления") Тогда
		СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения * (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПередачи) / 100;
	Иначе
		СтрокаТабличнойЧасти.СуммаВознаграждения = 0;
	КонецЕсли;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
	
	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС,
													СтрокаТабличнойЧасти.СуммаВознаграждения - (СтрокаТабличнойЧасти.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаВознаграждения * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьКомиссионноеВознаграждение()

// Процедура пересчитывает курс и кратность валюты расчетов при изменении
// даты документа.
//
&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(Объект.Курс) + " " + СокрЛП(НациональнаяВалюта);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(КурсНовый) + " " + СокрЛП(НациональнаяВалюта);
		
		ТекстВопроса = НСтр("ru = 'На дату документа у валюты расчетов (" + КурсВалютыСтрокой + ") был задан курс.
							|Установить курс расчетов (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
							
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КурсНовый", КурсНовый);
		ДополнительныеПараметры.Вставить("КратностьНовый", КратностьНовый);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьУстановкиНовогоКурсаВалюты", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьКурсКратностьВалютыРасчетов()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь, ТекстПредупреждения = "")
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТолькоПросмотр", 		ЭтотОбъект.ТолькоПросмотр);
	СтруктураПараметров.Вставить("ВидЦен",				Объект.ВидЦен);
	СтруктураПараметров.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			Объект.Кратность);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость",Объект.НДСВключатьВСтоимость);
	СтруктураПараметров.Вставить("Контрагент",			Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				Объект.Договор);
	СтруктураПараметров.Вставить("Организация",			Компания);
	СтруктураПараметров.Вставить("ДатаДокумента",		Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",Ложь);
	СтруктураПараметров.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

// Рассчитывается значение колонки Всего ТЧ Покупатели на клиенте.
//
&НаКлиенте
Процедура РассчитатьКолонкуВсегоНаКлиенте(СтрокаПокупатели)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("КлючСвязи", СтрокаПокупатели.КлючСвязи);
	РезультатПоиска = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
	Если РезультатПоиска.Количество() = 0 Тогда
		СтрокаПокупатели.Всего = 0;
	Иначе
		ИтогВсего = 0;
		Для каждого СтрокаТЧ Из РезультатПоиска Цикл
			ИтогВсего = ИтогВсего + СтрокаТЧ.Всего;
		КонецЦикла;
		СтрокаПокупатели.Всего = ИтогВсего;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКолонкуВсегоНаКлиенте

// Обновить значение колонки Всего ТЧ Покупатели на клиенте.
//
&НаКлиенте
Процедура ОбновитьКолонкуВсегоНаКлиенте(ОбновитьВсеСтроки = Ложь)
	
	ТекущаяСтрокаПокупатели = Элементы.Покупатели.ТекущиеДанные;
	Если ТекущаяСтрокаПокупатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновитьВсеСтроки Тогда
		
		Для каждого СтрокаПокупатели Из Объект.Покупатели Цикл
			
			РассчитатьКолонкуВсегоНаКлиенте(СтрокаПокупатели);
			
		КонецЦикла;
		
	Иначе
		
		РассчитатьКолонкуВсегоНаКлиенте(ТекущаяСтрокаПокупатели);
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьКолонкуВсегоНаКлиенте()

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			Если СтруктураНадписи.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
				ТекстНадписи = ТекстНадписи + НСтр("ru = ' %Курс%'");
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(СтруктураНадписи.ВалютаДокумента)));
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Курс%", СокрЛП(Строка(СтруктураНадписи.Курс)));
			Иначе
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Вид цен.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦен%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидЦен%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(СтруктураНадписи.ВидЦен)));
	КонецЕсли;
	
	// Налогообложение НДС.
	Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %НалогообложениеНДС%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", РаботаСФормойДокументаКлиентСервер.КраткоеПредставлениеТипаНалогообложенияНДС(СтруктураНадписи.НалогообложениеНДС));
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда	
		Если СтруктураНадписи.СуммаВключаетНДС Тогда	
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // ТекстНадписиЦеныИВалюта()

// ПодключаемоеОборудование
// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				Если ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦен", СтруктураДанные.ВидЦен);
					Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
						И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
					Иначе
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
					КонецЕсли;
				КонецЕсли;
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ОтчетКомиссионера.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	ТекущийКлючСвязи = Элементы.Запасы.ОтборСтрок["КлючСвязи"];
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные",СтруктураДанные));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено 
			ИЛИ ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор"
			, ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор));
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения,КлючСвязи",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения,ТекущийКлючСвязи));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("СтранаПроисхождения", НоваяСтрока.СтранаПроисхождения);
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				
				// Прослеживаемость
				НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
					НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйТовар;
					ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
					НоваяСтрока.КодТНВЭД = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТоварнаяНоменклатураВЭД;
				Иначе
					НоваяСтрока.ПрослеживаемыйТовар = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
					ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				КонецЕсли;
				// Конец Прослеживаемость
				
				НоваяСтрока.КлючСвязи = ТекущийКлючСвязи;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект, , , "КлючСвязиСерииНоменклатуры");
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	
	ТекущийКлючСвязи = Элементы.Запасы.ОтборСтрок["КлючСвязи"];
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено ИЛИ ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор));
		Иначе
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения,КлючСвязи",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения,ТекущийКлючСвязи));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("СтранаПроисхождения", НоваяСтрока.СтранаПроисхождения);
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				
				// Прослеживаемость
				НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
					НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйТовар;
					ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
				Иначе
					НоваяСтрока.ПрослеживаемыйТовар = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
					ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				КонецЕсли; 
				// Конец Прослеживаемость
				
				НоваяСтрока.КлючСвязи = ТекущийКлючСвязи;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект, , , "КлючСвязиСерииНоменклатуры");
			КонецЕсли;
			
		КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт

	Модифицированность = Истина;

	НеДобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды = НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа = НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;

	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда

		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);

		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект, , , , Оповещение);

		Возврат;

	КонецЕсли;

	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);

КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ИмяТабличнойЧасти = "Запасы";
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы[ИмяТабличнойЧасти].ОтборСтрок["КлючСвязи"]);
	Элементы[ИмяТабличнойЧасти].ОтборСтрок = СтрОтбора;
	
	ОбновитьКолонкуВсегоНаКлиенте();
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакАвтораспределенияЗаказов();
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		Если ТекНекорректныйШтрихкод.Свойство("ЭтоНабор") И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", НСтр("ru = 'Набор'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		КонецЕсли; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

// Процедура устанавливает видимость договора в зависимости от установленного параметра контрагенту.
//
&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ПараметрыРасчетовСКонтрагентом = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "ВестиРасчетыПоЗаказам, ВестиРасчетыПоДоговорам");
		
		КонтрагентВестиРасчетыПоЗаказам = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоЗаказам;
		Элементы.Договор.Видимость = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоДоговорам;
		
	Иначе
		
		КонтрагентВестиРасчетыПоЗаказам = Ложь;
		Элементы.Договор.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

// Получает структуру параметров формы выбора договора контрагента.
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Получает договор по умолчанию в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговора(ДанныеДоговора = Неопределено)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		ПараметрыДокумента = Новый Структура;
		Если ДанныеДоговора = Неопределено Тогда
			
			ДанныеДоговора = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Договор);
			
		Иначе
			
			ПараметрыДокумента.Вставить("КонтрагентПередИзменением", ДанныеДоговора.КонтрагентПередИзменением);
			ПараметрыДокумента.Вставить("КонтрагентВестиРасчетыПоЗаказамПередИзменением", ДанныеДоговора.КонтрагентВестиРасчетыПоЗаказамПередИзменением);
			
		КонецЕсли;
		
		
		Объект.НоменклатураДляОтраженияСуммыБезВознаграждения = ДанныеДоговора.НоменклатураДляОтраженияСуммыБезВознаграждения;
		
		НеУчитыватьЗаказыПриПередачеНаКомиссию = ДанныеДоговора.НеУчитыватьЗаказыПриПередачеНаКомиссию;
		
		ВопросПредоплата = Объект.Предоплата.Количество() > 0 И Объект.Договор <> ДоговорПередИзменением;
		
		ИзменилсяВидЦен = Объект.ВидЦен <> ДанныеДоговора.ВидЦен И ЗначениеЗаполнено(ДанныеДоговора.ВидЦен);
		ВопросВидЦен = ЗначениеЗаполнено(Объект.Договор) И ИзменилсяВидЦен;
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
		
		ПересчетНеобходим = (Объект.Запасы.Количество() > 0);
		
		НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
			И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеДоговора.ВалютаРасчетов;
		ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
			И Объект.Запасы.Количество() > 0;
		
		ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
		ПараметрыДокумента.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением);
		ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
		ПараметрыДокумента.Вставить("ПересчетНеобходим", ПересчетНеобходим);
		ПараметрыДокумента.Вставить("ИзменилсяВидЦен", ИзменилсяВидЦен);
		ПараметрыДокумента.Вставить("ВопросПредоплата", ВопросПредоплата);
		ПараметрыДокумента.Вставить("ВопросВидЦен", ВопросВидЦен);
		ПараметрыДокумента.Вставить("ОткрытьФормуЦеныИВалюты", ОткрытьФормуЦеныИВалюты);
		ПараметрыДокумента.Вставить("ВидимостьДоговораПередИзменением", Элементы.Договор.Видимость);
		
		СпособЗаполненияСтавкиНДСДоИзменения = СпособЗаполненияСтавкиНДС;
		СпособЗаполненияСтавкиНДС = ДанныеДоговора.СпособЗаполненияСтавкиНДС;
		Если СпособЗаполненияСтавкиНДСДоИзменения <> СпособЗаполненияСтавкиНДС Тогда
			ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
		КонецЕсли;
		
		Объект.УдержатьКомиссионноеВознаграждение = ДанныеДоговора.УдержатьКомиссионноеВознаграждение;
		Объект.СпособРасчетаКомиссионногоВознаграждения = ДанныеДоговора.СпособРасчетаКомиссионногоВознаграждения;
		Объект.ПроцентКомиссионногоВознаграждения = ДанныеДоговора.ПроцентКомиссионногоВознаграждения;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НоменклатураДляОтраженияСуммыБезВознаграждения", "Видимость", Объект.УдержатьКомиссионноеВознаграждение);
		
		Если Не ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения) Тогда
			Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается");
		КонецЕсли;
		
		Если ВопросПредоплата = Истина Тогда
			
			ТекстВопроса = НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьОбновитьЗачетыАванса", ЭтотОбъект, ПараметрыДокумента);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента);
			
		КонецЕсли;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах") Тогда
			УдержатьКомиссионноеВознаграждение = Ложь;
		КонецЕсли;
		
		Если Объект.СпособРасчетаКомиссионногоВознаграждения <> ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается")
			И ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
			Если Объект.Запасы.Количество() > 0 Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("СпособРасчетаКомиссионногоВознагражденияПриИзмененииЗавершение", ЭтотОбъект), "Изменился способ расчета. Пересчитать комиссионное вознаграждение?",
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ЗапасыЗаказПокупателя.Видимость = Не НеУчитыватьЗаказыПриПередачеНаКомиссию;
		Элементы.ПредоплатаЗаказ.Видимость = Не НеУчитыватьЗаказыПриПередачеНаКомиссию;
		
		Если НеУчитыватьЗаказыПриПередачеНаКомиссию Тогда
			
			Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
				СтрокаЗапасы.ЗаказПокупателя = Неопределено;
			КонецЦикла;
			
			Для Каждого СтрокаПредоплата Из Объект.Предоплата Цикл
				СтрокаПредоплата.Заказ = Неопределено;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Контрагент.АвтоМаксимальнаяШирина = Не Элементы.ОстатокВзаиморасчетов.Видимость;
	
	Если НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		// Только для новых объектов
		Возврат;
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРаботаГТД()
	
	НеизменяемыеРеквизиты = Новый Массив;
	НеизменяемыеРеквизиты.Добавить("ЗапасыПометка");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерСтроки");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНоменклатура");
	НеизменяемыеРеквизиты.Добавить("ЗапасыХарактеристика");
	НеизменяемыеРеквизиты.Добавить("ЗапасыПартия");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКоличество");
	НеизменяемыеРеквизиты.Добавить("ЗапасыЕдиницаИзмерения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыСтранаПроисхождения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерГТД");
	ПрослеживаемостьФормыКлиентСерверУНФ.ДобавитьНеизменяемыеРеквизитыДляРежимаГТД(НеизменяемыеРеквизиты);
	
	Для каждого ЭлементФормы Из Элементы.Запасы.ПодчиненныеЭлементы Цикл
		
		Если НеизменяемыеРеквизиты.Найти(ЭлементФормы.Имя) = Неопределено
			И ЭлементФормы.Видимость = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			КэшЗначений.ОбрабатываемыеРеквизиты.Добавить(ЭлементФормы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРежимРаботаГТД()
	
	Для каждого ИмяЭлементаФормы Из КэшЗначений.ОбрабатываемыеРеквизиты Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаФормы, "Видимость", Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Истина);
	
	КэшЗначений.ОбрабатываемыеРеквизиты = Новый Массив;
	
КонецПроцедуры

&НаКлиенте 
Процедура ИзменитьРежимРаботаГТД(ВключитьРежимГТД)
	
	Если НЕ КэшЗначений.Свойство("ОбрабатываемыеРеквизиты") Тогда
		
		КэшЗначений.Вставить("ОбрабатываемыеРеквизиты", Новый Массив);
		
	КонецЕсли;
	
	Если ВключитьРежимГТД Тогда
		
		ВключитьРежимРаботаГТД();
		
	Иначе
		
		ВыключитьРежимРаботаГТД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(КлючСвязи, ЭтоКонтекстныйВызов)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("ОстаткиПоГТД", Неопределено);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ИндексТекущейСтроки", ?(ЗначениеЗаполнено(Элементы.Запасы.ТекущаяСтрока), Объект.Запасы.Индекс(Объект.Запасы.НайтиПоИдентификатору(Элементы.Запасы.ТекущаяСтрока)), 0));
	ПараметрыПодбора.Вставить("КлючСвязи", КлючСвязи);
	
	Если НЕ ЭтоКонтекстныйВызов Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	МассивИменПолей = Новый Массив;
	МассивИменПолей.Добавить("Сумма");
	МассивИменПолей.Добавить("СуммаНДС");
	МассивИменПолей.Добавить("Всего");
	МассивИменПолей.Добавить("СуммаПередачи");
	МассивИменПолей.Добавить("СуммаНДСПередачи");
	МассивИменПолей.Добавить("СуммаВознаграждения");
	МассивИменПолей.Добавить("СуммаНДСВознаграждения");
	ПараметрыПодбора.Вставить("ИменаПолей", МассивИменПолей);
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
	ГрузовыеТаможенныеДекларацииСервер.СформироватьОстаткиНомеровГТД(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиОстаткиНомеровГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
	
	Если ПараметрыПодбора.ИндексТекущейСтроки <> -1 Тогда
		
		СтрокаКоллекции = Объект.Запасы.Получить(ПараметрыПодбора.ИндексТекущейСтроки);
		Элементы.Запасы.ТекущаяСтрока = СтрокаКоллекции.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДПодобратьПоПереданнымНаСервере(КлючСвязи, ЭтоКонтекстныйВызов)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("ОстаткиПоГТД", Неопределено);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ИндексТекущейСтроки", ?(ЗначениеЗаполнено(Элементы.Запасы.ТекущаяСтрока), Объект.Запасы.Индекс(Объект.Запасы.НайтиПоИдентификатору(Элементы.Запасы.ТекущаяСтрока)), 0));
	ПараметрыПодбора.Вставить("КлючСвязи", КлючСвязи);
	
	Если НЕ ЭтоКонтекстныйВызов Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	МассивИменПолей = Новый Массив;
	МассивИменПолей.Добавить("Сумма");
	МассивИменПолей.Добавить("СуммаНДС");
	МассивИменПолей.Добавить("Всего");
	МассивИменПолей.Добавить("СуммаПередачи");
	МассивИменПолей.Добавить("СуммаНДСПередачи");
	МассивИменПолей.Добавить("СуммаВознаграждения");
	МассивИменПолей.Добавить("СуммаНДСВознаграждения");
	ПараметрыПодбора.Вставить("ИменаПолей", МассивИменПолей);
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
	ГрузовыеТаможенныеДекларацииСервер.СформироватьОстаткиПереданныеНомеровГТД(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиОстаткиНомеровГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
	
	Если ПараметрыПодбора.ИндексТекущейСтроки <> -1 Тогда
		
		СтрокаКоллекции = Объект.Запасы.Получить(ПараметрыПодбора.ИндексТекущейСтроки);
		Элементы.Запасы.ТекущаяСтрока = СтрокаКоллекции.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДПодобратьНаСервере(КлючСвязи, ЭтоКонтекстныйВызов)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("КлючСвязи", КлючСвязи);
	
	Если НЕ ЭтоКонтекстныйВызов Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
	ГрузовыеТаможенныеДекларацииСервер.ПодобратьНомераГТДПоПредыдущимПоступлениям(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиНомераГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости();
	// Конец Прослеживаемость
	
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТовары = Объект.Запасы.Добавить();
		НоваяСтрокаТовары.Номенклатура = СтрокаТаблицы.Номенклатура;
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "Заказ", "ПоложениеЗаказаПокупателя");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			НоваяСтрокаТовары.Характеристика = СтрокаТаблицы.Характеристика;
			
		КонецЕсли;
		
		НоваяСтрокаТовары.Цена = СтрокаТаблицы.Цена;
		НоваяСтрокаТовары.Количество = СтрокаТаблицы.Количество;
		
		Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрокаТовары.Номенклатура) Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
			
		КонецЕсли;
		
		ТоварыДобавлены = Истина;
		
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	
	Для каждого СтрокаТаблицы Из Объект.Запасы Цикл 
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ДлительнаяОперация = ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки);
			
			СтруктураПараметров = Новый Структура;
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров);
			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки);
		
	КонецЕсли;
	
	ОбновитьКолонкуВсегоНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(АдресРезультатаЗагрузки)
	
	ИменаСвойств = "Номенклатура, Количество, ЕдиницаИзмерения, Заказ";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		ИменаСвойств = ИменаСвойств + ", Характеристика";
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		ИменаСвойств = ИменаСвойств + ", Партия";
	КонецЕсли;
	ИменаСвойств = ЗагрузкаДанныхИзВнешнегоИсточника.УдалитьНесуществующиеСвойства(
		СтрРазделить(ИменаСвойств, ", "), 
		Метаданные.Документы.ОтчетКомиссионера.ТабличныеЧасти.Запасы.Реквизиты);
	
	Попытка
		
		НачатьТранзакцию();
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				СтрокаТабличнойЧасти = Объект.Запасы.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы, ИменаСвойств);
				
				Если Объект.Покупатели.Количество() > 0 Тогда
					
					СтрокаТабличнойЧасти.КлючСвязи = Элементы["Запасы"].ОтборСтрок["КлючСвязи"];
					
				КонецЕсли; 
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "Цена_ВходящиеДанные")
					И ЗначениеЗаполнено(СтрокаТаблицы.Цена_ВходящиеДанные) Тогда
					СтрокаТабличнойЧасти.Цена = СтрокаТаблицы.Цена_ВходящиеДанные;
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Сумма_ВходящиеДанные) Тогда
					СтрокаТабличнойЧасти.Сумма = СтрокаТаблицы.Сумма_ВходящиеДанные;
					СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
				КонецЕсли;
				
				// расчет сумм и НДС
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "СтавкаНДС")
					И ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
				Иначе
					СтрокаТабличнойЧасти.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
				КонецЕсли;
				
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
				
				СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
												  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
												  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
				СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "Заказ") Тогда
					
					СтрокаТабличнойЧасти.ЗаказПокупателя = СтрокаТаблицы.Заказ;
					
				КонецЕсли;
				
				// Серии номера
				Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено Тогда
					СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти,,"КлючСвязиСерииНоменклатуры");
				КонецЕсли;
				
				// Сумма передачи.
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "ЦенаПередачи_ВходящиеДанные")
					И ЗначениеЗаполнено(СтрокаТаблицы.ЦенаПередачи_ВходящиеДанные) Тогда
					СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТаблицы.ЦенаПередачи_ВходящиеДанные;
					СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.СуммаПередачи_ВходящиеДанные) Тогда
					СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТаблицы.СуммаПередачи_ВходящиеДанные;
					СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТабличнойЧасти.СуммаПередачи / СтрокаТабличнойЧасти.Количество;
				КонецЕсли;
				
				// Сумма НДС передачи.
				СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
					СтрокаТабличнойЧасти.СуммаПередачи - (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
					СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);
				
				// Сумма вознаграждения.
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "СуммаВознаграждения_ВходящиеДанные") 
					И ЗначениеЗаполнено(СтрокаТаблицы.СуммаВознаграждения_ВходящиеДанные) Тогда
				    СтрокаТабличнойЧасти.СуммаВознаграждения = СтрокаТаблицы.СуммаВознаграждения_ВходящиеДанные;
				ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи") Тогда
					СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения * СтрокаТабличнойЧасти.Сумма / 100;
				ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления") Тогда
					СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения * (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПередачи) / 100;
				Иначе
					СтрокаТабличнойЧасти.СуммаВознаграждения = 0;
				КонецЕсли;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "СуммаНДСВознаграждения_ВходящиеДанные") 
					И ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДСВознаграждения_ВходящиеДанные) Тогда
					СтрокаТабличнойЧасти.СуммаНДСВознаграждения = СтрокаТаблицы.СуммаНДСВознаграждения_ВходящиеДанные;
				Иначе
					СтрокаТабличнойЧасти.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС,
						СтрокаТабличнойЧасти.СуммаВознаграждения - (СтрокаТабличнойЧасти.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
						СтрокаТабличнойЧасти.СуммаВознаграждения * СтавкаНДС / 100);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;	
	
	ИмяМетода = "Справочники.Номенклатура.ОбработатьПодготовленныеДанные";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если НЕ Прогресс = Неопределено Тогда
		ОбработатьПодготовленныеДанные(Прогресс.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров = Неопределено)
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПослеВыполненияФоновогоЗадания(ДлительнаяОперация, СтруктураПараметров);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗадания", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);		
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

// Процедура-обработчик результата открытия формы "Цены и валюты"
//
&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") 
		И РезультатЗакрытия.БылиВнесеныИзменения Тогда
		
		Объект.ВидЦен = РезультатЗакрытия.ВидЦен;
		Объект.ВалютаДокумента = РезультатЗакрытия.ВалютаДокумента;
		Объект.Курс = РезультатЗакрытия.КурсРасчетов;
		Объект.Кратность = РезультатЗакрытия.КратностьРасчетов;
		Объект.НалогообложениеНДС = РезультатЗакрытия.НалогообложениеНДС;
		Объект.СуммаВключаетНДС = РезультатЗакрытия.СуммаВключаетНДС;
		Объект.НДСВключатьВСтоимость = РезультатЗакрытия.НДСВключатьВСтоимость;
		ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
		
		// Пересчитываем цены по виду цен.
		Если РезультатЗакрытия.ПерезаполнитьЦены Тогда
			
			ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтаФорма, "Запасы");
			
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И РезультатЗакрытия.ПересчитатьЦены Тогда
			
			ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, ВалютаРасчетовПередИзменением, "Запасы", РезультатЗакрытия.КурсПересчетаЦен);
			
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если РезультатЗакрытия.НалогообложениеНДС <> РезультатЗакрытия.ПредНалогообложениеНДС Тогда
			
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
			
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И НЕ РезультатЗакрытия.СуммаВключаетНДС = РезультатЗакрытия.ПредСуммаВключаетНДС Тогда
			
			ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Запасы");
			
		КонецЕсли;
		
		// Сумма вознаграждения.
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			
			СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(
					Объект.ВалютаДокумента = НациональнаяВалюта,
					КурсНациональнаяВалюта,
					Объект.Курс
				),
				СтрокаТабличнойЧасти.Кратность,
				?(
					Объект.ВалютаДокумента = НациональнаяВалюта,
					КратностьНациональнаяВалюта,
					Объект.Кратность)
				);
				
		КонецЦикла;
		
		ОбновитьКолонкуВсегоНаКлиенте(Истина);
		
	КонецЕсли;
	
	СтруктураНадписи = Новый Структура("ВидЦен, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС", 
		Объект.ВидЦен, 
		Объект.ВалютаДокумента, 
		ВалютаРасчетов, 
		Объект.Курс, 
		КурсНациональнаяВалюта, 
		Объект.СуммаВключаетНДС, 
		УчетВалютныхОпераций, 
		Объект.НалогообложениеНДС);
		
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

// Процедура-обработчик ответа на вопрос о необходимости установки нового курса валюты
//
&НаКлиенте
Процедура ОпределитьНеобходимостьУстановкиНовогоКурсаВалюты(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Объект.Курс = ДополнительныеПараметры.КурсНовый;
		Объект.Кратность = ДополнительныеПараметры.КратностьНовый;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			
			СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность)
				);
				
		КонецЦикла;
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС", 
			Объект.ВидЦен, 
			Объект.ВалютаДокумента, 
			ВалютаРасчетов, 
			Объект.Курс, 
			КурсНациональнаяВалюта, 
			Объект.СуммаВключаетНДС, 
			УчетВалютныхОпераций, 
			Объект.НалогообложениеНДС
			);
			
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьУстановкиНовогоКурсаВалюты()

// Процедура-обработчик ответа на вопрос о повторном зачете авансов
//
&НаКлиенте
Процедура ОпределитьНеобходимостьОбновитьЗачетыАванса(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Объект.Предоплата.Очистить();
		
	Иначе
		
		Объект.Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		
		Если ДополнительныеПараметры.Свойство("КонтрагентПередИзменением") Тогда
			
			Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			КонтрагентВестиРасчетыПоЗаказам = ДополнительныеПараметры.КонтрагентВестиРасчетыПоЗаказамПередИзменением;
			Объект.Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			Элементы.Договор.Видимость = ДополнительныеПараметры.ВидимостьДоговораПередИзменением;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьОбновитьЗачетАванса()

// Процедура-обработчик ответа на вопрос о пересчете документа по данным договора
//
&НаКлиенте
Процедура ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтаФорма, "Запасы");
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора()

#КонецОбласти

#Область РаботаСПодбором

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти = "Покупатели";
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "Запасы") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти	= "Запасы";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // Подбор()

// Процедура - обработчик события Действие команды Подбор по остаткам.
//
&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	ИмяТабличнойЧасти = "Покупатели";
	
	Отказ = Ложь;
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, "Запасы") Тогда
		Отказ = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Договор"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Договор", , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = "Запасы";
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("Организация", Компания);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыПодбора.Вставить("Проведен", Объект.Проведен);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ОтчетКомиссионера.Форма.ФормаПодбораПоОстаткам", ПараметрыПодбора, ЭтотОбъект);
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы[ИмяТабличнойЧасти].ОтборСтрок["КлючСвязи"]);
	Элементы[ИмяТабличнойЧасти].ОтборСтрок = СтрОтбора;
	
КонецПроцедуры // ПодборПоОстаткам()

&НаКлиенте
Процедура ПодборПродажи(Команда)
	
	ТекущиеДанныеПокупатели = Элементы.Покупатели.ТекущиеДанные;
	
	ОтчетКомиссионера = Неопределено;
	Если Не ТекущиеДанныеПокупатели = Неопределено Тогда
		ОтчетКомиссионера = ТекущиеДанныеПокупатели.ОтчетКомиссионера;
	КонецЕсли;
		
	ИмяТабличнойЧасти = "Покупатели";
	Отказ = Ложь;
	
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтотОбъект, "Запасы") Тогда
		Отказ = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент", , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = "Запасы";
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("Организация", Компания);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыПодбора.Вставить("Проведен", Объект.Проведен);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("ВидОперации", Объект.ВидОперации);
	ПараметрыПодбора.Вставить("ОтчетКомиссионера", ОтчетКомиссионера);
	ПараметрыПодбора.Вставить("НеПоказыватьЗаказ", НеУчитыватьЗаказыПриПередачеНаКомиссию);
	
	ОткрытьФорму("Документ.ОтчетКомиссионера.Форма.ФормаПодбораПоОстаткам", ПараметрыПодбора, ЭтаФорма);
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы[ИмяТабличнойЧасти].ОтборСтрок["КлючСвязи"]);
	Элементы[ИмяТабличнойЧасти].ОтборСтрок = СтрОтбора;
КонецПроцедуры

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		Если НоваяСтрока.Свойство("Пометка") Тогда
			НоваяСтрока.Пометка = Истина;
		КонецЕсли;
		
		НоваяСтрока.ЦенаПередачи = НоваяСтрока.Цена;
		НоваяСтрока.СуммаПередачи = НоваяСтрока.Сумма;
		НоваяСтрока.СуммаНДСПередачи = НоваяСтрока.СуммаНДС;
		
		НоваяСтрока.КлючСвязи = Элементы[ИмяТабличнойЧасти].ОтборСтрок["КлючСвязи"];
		
		// Характеристики 
		СтруктураДанныеНоменклатуры = Новый Структура();
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
		
		СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
		НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики
			Тогда
			НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
		// Конец Характеристики
		
		//Партии
		НоваяСтрока.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, СтруктураДанные.Партия);
		// Конец Партии
		
		НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязиСерииНоменклатуры");
		
		НоваяСтрока.СтранаПроисхождения	= СтруктураДанные.СтранаПроисхождения;
		НоваяСтрока.НомерГТД			= СтруктураДанные.НомерГТД;
		
		// Прослеживаемость
		НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
			НоваяСтрока.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
			ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
			НоваяСтрока.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
		Иначе
			НоваяСтрока.ПрослеживаемыйТовар = Ложь;
		КонецЕсли;
		Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
			НоваяСтрока.НомерГТД = СтруктураДанные.НомерГТД;
		Иначе
			НоваяСтрока.НомерГТД = Неопределено;
		КонецЕсли; 
		// Конец Прослеживаемость
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// Функция получает список запасов переданных из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыПереданныеИзХранилища(АдресЗапасовПереданныхВХранилище)
	
	ЗапасыПереданные = ПолучитьИзВременногоХранилища(АдресЗапасовПереданныхВХранилище);
	
	КлючСвязи = Элементы[ИмяТабличнойЧасти].ОтборСтрок["КлючСвязи"];
	
	ПараметрыПоиска = Новый Структура("КлючСвязи", КлючСвязи); 
	ТекущаяСтрокаПокупатели = Объект.Покупатели.НайтиСтроки(ПараметрыПоиска);
	
	ПараметрыПоискаОтчетКомиссионера = Новый Структура("ОтчетКомиссионера", );
	
	ОтчетТекущейСтрокиВыбран = Ложь;
	ОтчетИсходнойСтроки = Неопределено;
	
	Если ТекущаяСтрокаПокупатели.Количество() Тогда
		ИсходнаяСтрокаПокупатели = ТекущаяСтрокаПокупатели[0];
		ОтчетИсходнойСтроки = ИсходнаяСтрокаПокупатели.ОтчетКомиссионера;
		ОтчетТекущейСтрокиВыбран = ЗначениеЗаполнено(ОтчетИсходнойСтроки);
	КонецЕсли;
	
	ЕстьКолонкаОтчетКомиссионера = НЕ ЗапасыПереданные.Колонки.Найти("ОтчетКомиссионера") = Неопределено;
	
	ЕстьКолонкаСЦеной = Не ЗапасыПереданные.Колонки.Найти("Цена") = Неопределено;
	
	Для каждого СтрокаТабличнойЧасти Из ЗапасыПереданные Цикл
		
		НоваяСтрока = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия",	 СтрокаТабличнойЧасти.Партия);
		
		Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
			СтруктураДанные.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
			СтруктураДанные.Вставить("Коэффициент",		 1);
		КонецЕсли;
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		НоваяСтрока.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		НоваяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах Тогда
			Если ЕстьКолонкаСЦеной И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена)
				Тогда
				НоваяСтрока.Цена = СтрокаТабличнойЧасти.Цена;
			Иначе
				НоваяСтрока.Цена = СтруктураДанные.Цена;
			КонецЕсли;
			
			НоваяСтрока.СуммаПередачи = СтрокаТабличнойЧасти.СуммаРасчетов;
						
		Иначе
			НоваяСтрока.Цена = СтруктураДанные.Цена;
			НоваяСтрока.СуммаПередачи = СтрокаТабличнойЧасти.СуммаРасчетов;
		КонецЕсли;
		
		НоваяСтрока.ЦенаПередачи = НоваяСтрока.СуммаПередачи / НоваяСтрока.Количество;
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
		НоваяСтрока.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
										НоваяСтрока.СуммаПередачи - (НоваяСтрока.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
										НоваяСтрока.СуммаПередачи * СтавкаНДС / 100);
		
		Если ЕстьКолонкаОтчетКомиссионера Тогда
			
			Если Не ОтчетТекущейСтрокиВыбран Тогда
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОтчетКомиссионера) Тогда
					ИсходнаяСтрокаПокупатели.ОтчетКомиссионера = СтрокаТабличнойЧасти.ОтчетКомиссионера;
					ОтчетИсходнойСтроки = ИсходнаяСтрокаПокупатели.ОтчетКомиссионера;
					ОтчетТекущейСтрокиВыбран = Истина;
				КонецЕсли;
				НоваяСтрока.КлючСвязи = КлючСвязи;
			ИначеЕсли ОтчетТекущейСтрокиВыбран И Не СтрокаТабличнойЧасти.ОтчетКомиссионера = ОтчетИсходнойСтроки Тогда
				
				ПараметрыПоискаОтчетКомиссионера.ОтчетКомиссионера = СтрокаТабличнойЧасти.ОтчетКомиссионера;
				НайденнаяСтрокаПокупатели = Объект.Покупатели.НайтиСтроки(ПараметрыПоискаОтчетКомиссионера);
				
				Если НайденнаяСтрокаПокупатели.Количество() Тогда
					НоваяСтрока.КлючСвязи = НайденнаяСтрокаПокупатели[0].КлючСвязи;
				Иначе
					НоваяСтрокаПокупатели = Объект.Покупатели.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПокупатели, ИсходнаяСтрокаПокупатели);
					НоваяСтрокаПокупатели.ОтчетКомиссионера = СтрокаТабличнойЧасти.ОтчетКомиссионера;
					ИмяТабличнойЧасти = "Покупатели";
					НоваяСтрокаПокупатели.КлючСвязи = ТабличныеЧастиУНФКлиентСервер.СоздатьНовыйКлючСвязи(ЭтаФорма);
					НоваяСтрока.КлючСвязи = НоваяСтрокаПокупатели.КлючСвязи;
				КонецЕсли;
			Иначе
				НоваяСтрока.КлючСвязи = КлючСвязи;
			КонецЕсли;
		Иначе
			НоваяСтрока.КлючСвязи = КлючСвязи;
		КонецЕсли;
		
		РаботаСКомиссионерамиКомитентамиСервер.РассчитатьСуммуВСтрокеТабличнойЧастиЗапасыОтчетКомиссионера(Объект, ИспользоватьСерииНоменклатурыОстатки, НоваяСтрока);
		РаботаСКомиссионерамиКомитентамиСервер.РассчитатьКомиссионноеВознаграждениеЗапасыОтчетКомиссионера(Объект, НоваяСтрока);
		
		// Прослеживаемость
		НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
			НоваяСтрока.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
			ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
			НоваяСтрока.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
		Иначе
			НоваяСтрока.ПрослеживаемыйТовар = Ложь;
		КонецЕсли;
		Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
			НоваяСтрока.НомерГТД = СтруктураДанные.НомерГТД;
		Иначе
			НоваяСтрока.НомерГТД = Неопределено;
		КонецЕсли; 
		// Конец Прослеживаемость
		
	КонецЦикла;
	
	Если Не ЕстьКолонкаОтчетКомиссионера Тогда
		КлючСвязи = Элементы[ИмяТабличнойЧасти].ОтборСтрок["КлючСвязи"];
		НомераГТДПодобратьПоПереданнымНаСервере(КлючСвязи, Истина);
	Иначе
		Для Каждого СтрокаПокупатели Из Объект.Покупатели Цикл
			НомераГТДПодобратьПоПереданнымНаСервере(СтрокаПокупатели.КлючСвязи, Истина);
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры // ПолучитьЗапасыПереданныеИзХранилища()

// Функция помещает список авансов во временное хранилище и возвращает адрес
//
&НаСервере
Функция ПоместитьПредоплатаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Предоплата.Выгрузить(,
			"Документ,
			|Заказ,
			|СуммаРасчетов,
			|Курс,
			|Кратность,
			|СуммаПлатежа"),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьПредоплатаВХранилище()

// Функция получает список авансов из временного хранилища
//
&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Объект.Предоплата.Загрузить(ТаблицаДляЗагрузки);
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

// Процедура устанавливает доступность элементов формы.
//
// Параметры:
//  Нет.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьИДоступность(Форма)
	
	Если Форма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		Форма.Объект.ПроцентКомиссионногоВознаграждения = 0;
		Форма.Элементы.ПроцентКомиссионногоВознаграждения.Доступность = Ложь;
	Иначе
		Форма.Элементы.ПроцентКомиссионногоВознаграждения.Доступность = Истина;
	КонецЕсли;
	
	Если Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах") Тогда
		
		Форма.Элементы.ЗапасыПодобратьВозвраты.Видимость = Истина;
		Форма.Элементы.ЗапасыПодобрать.Видимость = Ложь;
		
		Форма.Элементы.ЗаполнитьПоОстаткам.Видимость = Ложь;
		Форма.Элементы.РаспределитьПоЗаказам.Видимость = Ложь;
		
		Форма.Элементы.ГруппаРаботаСНомерамиГТД.Видимость = Ложь;
		Форма.Элементы.ПокупателиОтчетКомиссионера.Видимость = Истина;
		Форма.Элементы.ПредоплатаОтчетКомиссионера.Видимость = Истина;
		
		Форма.Элементы.ПредоплатаРедактироватьЗачетПредоплаты.Видимость = Ложь;
		
		Форма.Элементы.ПокупателиВыставленСФ.Видимость = Ложь;
		Форма.Элементы.ПокупателиДатаСФ.Видимость = Ложь;
		Форма.Элементы.ПокупателиСчетФактура.Видимость = Ложь;
		Форма.Элементы.СчетФактураНадпись.Видимость = Ложь;
		
		Форма.Элементы.ЗапасыЦена.Заголовок = НСтр("ru = 'Цена в отчете'");
		Форма.Элементы.ЗапасыСумма.Заголовок = НСтр("ru = 'Сумма в отчете'");
		Форма.Элементы.ЗапасыСуммаНДС.Заголовок = НСтр("ru = 'Сумма НДС в отчете'");
		
	Иначе
		
		Форма.Элементы.ЗапасыПодобратьВозвраты.Видимость = Ложь;
		Форма.Элементы.ЗапасыПодобрать.Видимость = Истина;
		
		Форма.Элементы.ЗаполнитьПоОстаткам.Видимость = Истина;
		Форма.Элементы.РаспределитьПоЗаказам.Видимость = Истина;
		
		Форма.Элементы.ГруппаРаботаСНомерамиГТД.Видимость = Истина;
		Форма.Элементы.ПокупателиОтчетКомиссионера.Видимость = Ложь;
		Форма.Элементы.ПредоплатаОтчетКомиссионера.Видимость = Ложь;
		
		Форма.Элементы.ПредоплатаРедактироватьЗачетПредоплаты.Видимость = Истина;
		
		Форма.Элементы.ПокупателиВыставленСФ.Видимость = Истина;
		Форма.Элементы.ПокупателиДатаСФ.Видимость = Истина;
		Форма.Элементы.ПокупателиСчетФактура.Видимость = Истина;
		Форма.Элементы.СчетФактураНадпись.Видимость = Истина;
		
		Форма.Элементы.ЗапасыЦена.Заголовок = НСтр("ru = 'Цена'");
		Форма.Элементы.ЗапасыСумма.Заголовок = НСтр("ru = 'Сумма'");
		Форма.Элементы.ЗапасыСуммаНДС.Заголовок = НСтр("ru = 'Сумма НДС'");
		
	КонецЕсли;
	
	Форма.Элементы.ЗапасыЗаказПокупателя.Видимость = Не Форма.НеУчитыватьЗаказыПриПередачеНаКомиссию;
	Форма.Элементы.ПредоплатаЗаказ.Видимость = Не Форма.НеУчитыватьЗаказыПриПередачеНаКомиссию;
	
	Форма.Элементы.ГруппаИнформацияПоНовойСхеме.Видимость = Форма.ПоказыватьИнформациюПоНовойСхемеДвижений;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НоменклатураДляОтраженияСуммыБезВознаграждения", "Видимость", Форма.Объект.УдержатьКомиссионноеВознаграждение);
	
	// Прослеживаемость
	ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(Форма, , , ПрослеживаемаяОперация(Форма.Объект.ВидОперации));
	// Конец Прослеживаемость
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

// Процедура устанавливает связи параметров выбора поля ввода СчФ.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьОтборВыписыватьСчетаФактурыСводно()
	
	Если Объект.ВыписыватьСчетаФактурыСводно Тогда
		НовыйМассив = Новый Массив();
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПокупателиСчетФактура.СвязиПараметровВыбора = НовыеСвязи;
	Иначе
		НовыйМассив = Новый Массив();
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Элементы.Покупатели.ТекущиеДанные.Покупатель");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПокупателиСчетФактура.СвязиПараметровВыбора = НовыеСвязи;
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтборВыписыватьСчетаФактурыСводно()

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "Запасы") Тогда
		Возврат;
	КонецЕсли;
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

// Вызывает процедуру копирования строк и оповещает пользователя о количестве скопированных.
//
&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру вставки строк и оповещает пользователя о количестве вставленных.
//
&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
		
КонецПроцедуры

// Выполняет копирование выделенных строк в буфер обмена.
//
&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

// Вставляет скопированные строки из буфера обмена в выбранную табличную часть.
//
&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, ИмяТЧ, Строка);
		
		Элементы[ИмяТЧ].ВыделенныеСтроки.Добавить(Строка.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
		РассчитатьКомиссионноеВознаграждение(Строка);
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Строка.СтавкаНДС);
		
		Строка.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
										Строка.СуммаПередачи - (Строка.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
										Строка.СуммаПередачи * СтавкаНДС / 100);
		
	КонецЦикла;
	
	ОбновитьКолонкуВсегоНаКлиенте();
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.ЦенаПередачи) Тогда
			Строка.ЦенаПередачи = Строка.Цена;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.СуммаПередачи) Тогда
			Строка.СуммаПередачи = Строка.Сумма;
		КонецЕсли;
		
		Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		
		// Прослеживаемость
		Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров
			И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
			Строка.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
			Строка.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
		Иначе
			Строка.ПрослеживаемыйТовар = Ложь;
			Строка.КодТНВЭД = Неопределено;
		КонецЕсли;
		// КонецПрослеживаемость
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеСтрок

// Процедура - обработчик нажатия кнопки Снять флажки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыСнятьФлажки(Команда)
	УстановитьПометку(Ложь);
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Установить флажки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыУстановитьФлажки(Команда)
	УстановитьПометку(Истина);
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Изменить в ТЧ Запасы.
// Показывает/скрывает панель редактирования таблицы.
//
&НаКлиенте
Процедура ЗапасыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования(Истина);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Выполнить в панели редактирования таблицы
// Производит выбранные преобразования с таблицей
//
&НаКлиенте
Процедура ЗапасыВыполнитьДействие(Команда)
	
	Если ТабличныеЧастиУНФКлиент.НеВыбранаСтрокаОсновнойТЧ(ЭтаФорма, "Запасы") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьТаблицу();
	НастроитьОформлениеПанелиРедактирования(4);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Отменить в панели редактирования таблицы
// Скрывает панель редактирования и восстанавливает данные таблицы до внесения изменений
//
&НаКлиенте
Процедура ЗапасыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЗапасыИзменениеСтрокДействие.
//
&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений();
	НастроитьОформлениеПанелиРедактирования(2);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЗапасыИзменениеСтрокЗначение.
//
&НаКлиенте
Процедура ЗапасыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования(3);
	
КонецПроцедуры

// Устанавливает/снимает пометку для всех строк таблицы.
//
&НаСервере
Процедура УстановитьПометку(Пометка)
	
	Элементы.ЗапасыСнятьФлажки.Видимость = НЕ Элементы.ЗапасыСнятьФлажки.Видимость;
	Элементы.ЗапасыУстановитьФлажки.Видимость = НЕ Элементы.ЗапасыУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект.Запасы Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Открывает/закрывает панель редактирования ТЧ.
//
Процедура ПоказатьСкрытьПанельРедактирования(ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(),
		СостояниеПерехода,
		ИзменяетДанные
	);
	
	УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
// Управляет сохранением/отменой изменений в ТЧ.
//
Процедура УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные)
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект.Запасы,
		ЗапасыРезервнаяКопияТаблицыАдрес,
		СостояниеПерехода,
		ИзменяетДанные
	);
	
КонецПроцедуры

// Управляет оформлением панели редактирования таблицы.
//
&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(Состояние, СохранитьИзменения = Неопределено)
	
	ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(),
		Состояние,
		ЗапасыИзменениеСтрокЗначение
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	Если ЗапасыИзменениеСтрокДействие = ЗапасыИзменениеСтрокДействиеПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер();
	
КонецПроцедуры

// Записывает в пользовательские настройки последнее выбранное действие для изменения таблицы.
//
&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер()
	
	ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер());
	
КонецПроцедуры

// Производит пересчет связанных реквизитов в строках таблицы после из группового изменения.
//
&НаКлиенте
Процедура ОбработатьТаблицу()
	
	КлючСвязи = -1;
	
	ТекущиеДанныеСтрокиПокупатели = Элементы.Покупатели.ТекущиеДанные;
	Если ТекущиеДанныеСтрокиПокупатели <> Неопределено Тогда
		
		КлючСвязи = ТекущиеДанныеСтрокиПокупатели.КлючСвязи;
		
	КонецЕсли;
	
	ОбработатьТаблицуНаСервере(КлючСвязи);
	
	ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого Строка Из ИзменяемыеСтроки Цикл
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			
			// Сумма вознаграждения.
			РассчитатьКомиссионноеВознаграждение(Строка);
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			// Сумма вознаграждения.
			РассчитатьКомиссионноеВознаграждение(Строка);
			ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, "Запасы", Строка);
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			РассчитатьСуммуНДС(Строка);
			Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			РассчитатьСуммуНДС(Строка);
			Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			
			// Сумма вознаграждения.
			РассчитатьКомиссионноеВознаграждение(Строка);
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммеПередачи") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.ЦенаПередачи = Строка.СуммаПередачи / Строка.Количество;
			КонецЕсли;
			
			// Сумма вознаграждения.
			РассчитатьКомиссионноеВознаграждение(Строка);
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммеВознаграждения") Тогда
			
			// Сумма вознаграждения не пересчитывается
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
			
			Строка.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС,
															Строка.СуммаВознаграждения - (Строка.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
															Строка.СуммаВознаграждения * СтавкаНДС / 100);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьКолонкуВсегоНаКлиенте(Истина);
	
КонецПроцедуры

// Производит пересчет связанных реквизитов в строках таблицы после из группового изменения.
//
&НаСервере
Процедура ОбработатьТаблицуНаСервере(КлючСвязи = -1)
	
	ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
		ЭтаФорма,
		Объект.Запасы,
		ЗапасыИзменениеСтрокДействие,
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит,
		ЗапасыИзменениеСтрокЗначение,
		"ЗапасыНоменклатура"
	);
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
		Для каждого Строка Из ИзменяемыеСтроки Цикл
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", Объект.Организация);
			СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
			СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
			
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
				СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
				СтруктураДанные.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
				СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
				СтруктураДанные.Вставить("Характеристика",	 Строка.Характеристика);
				СтруктураДанные.Вставить("Коэффициент",		 1);
			КонецЕсли;
			
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
				Строка.Количество = 1;
			КонецЕсли;
			Строка.Цена = СтруктураДанные.Цена;
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			Строка.ЦенаПередачи = 0;
			Строка.СуммаПередачи = 0;
			Строка.СуммаНДСПередачи = 0;
			
			// Прослеживаемость
			Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров
				И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
				Строка.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
			Иначе
				Строка.ПрослеживаемыйТовар = Ложь;
			КонецЕсли; 
			// Конец Прослеживаемость
			
		КонецЦикла;
		
		// Прослеживаемость
		ОбновитьОтображениеПрослеживаемости();
		// Конец Прослеживаемость
		
	КонецЕсли;
	
	Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ЗаполнитьПоФактическимОстаткамНомераГТД
		И КлючСвязи >= 0 Тогда
		
		НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(КлючСвязи, Ложь);
		
	КонецЕсли;
	
	Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ПодобратьНомераГТД
		И КлючСвязи >= 0 Тогда
		
		НомераГТДПодобратьНаСервере(КлючСвязи, Ложь);
		
	КонецЕсли;
	
	Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ОчиститьНомераГТДИСтраныПроисхождения
		И КлючСвязи >= 0 Тогда
		
		ГрузовыеТаможенныеДекларацииСервер.ОчиститьНомераГТДИСтраныПроисхождения(Объект.Запасы, КлючСвязи);
		
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

// Определяет в зависимости от выбранного действия изменяемый реквизит и связанный с ним элемент на форме.
//
&НаКлиенте
Процедура ОпределитьОбъектИзменений()
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммеПередачи") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СуммаПередачи";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСуммаПередачи";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммеВознаграждения") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СуммаВознаграждения";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСуммаВознаграждения";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСтавкаНДС";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
		ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "";
		
	КонецЕсли;
	
КонецПроцедуры

// Создает набор необходимых реквизитов и элементов формы для управления оформлением панели редактирования.
//
&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтаФорма.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтаФорма.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

// Создает набор необходимых реквизитов и элементов формы для управления оформлением панели редактирования.
//
&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер()

	НаборЭлементов = Новый Структура;
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КнопкаИзменитьСтроки", Элементы.ЗапасыИзменитьСтроки);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтаФорма.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтаФорма.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент),
		Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;

КонецФункции

// Заполняет список выбора реквизита Действие в панели редактирования ТЧ
//
&НаСервере
Процедура ЗаполнитьСписокДействий(РазрешеноРедактированиеЦенДокументов)
	
	Действия = Новый Массив;
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммеПередачи);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммеВознаграждения);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
	
	Если Не ЭтоВозвратСервер() Тогда
		ГрузовыеТаможенныеДекларацииСервер.ЗаполнитьСписокДействий(Действия, Истина, "Запасы");
	КонецЕсли;
	
	Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
	Для каждого Действие Из Действия Цикл
		ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
		Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Запасы, Элементы.ЗапасыУстановитьФлажки, Элементы.ЗапасыСнятьФлажки);
КонецПроцедуры

#КонецОбласти

#Область АвтоподборКонтактов

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССериями
&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Модифицированность = Истина;
	
	ПараметрыИменаПолей = Новый Структура;
	ПараметрыИменаПолей.Вставить("ИмяТЧЗапасы", "Запасы");
	ПараметрыИменаПолей.Вставить("ИмяТЧСерииНоменклатуры", "СерииНоменклатуры");
	ПараметрыИменаПолей.Вставить("ИмяПоляКлючСвязи", "КлючСвязиСерииНоменклатуры");
	
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки, ПараметрыИменаПолей);
			
КонецФункции

&НаСервере
Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор)
	
	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, Ложь,
		"Запасы","СерииНоменклатуры","КлючСвязиСерииНоменклатуры");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКлючиСвязиВТабличнойЧастиТовары() Экспорт
	
	Индекс = 0;
	Для Каждого СтрокаТЧ Из Объект.Запасы Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.КлючСвязиСерииНоменклатуры) Тогда
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, СтрокаТЧ, "КлючСвязиСерииНоменклатуры");
		КонецЕсли;
		Если Индекс < СтрокаТЧ.КлючСвязиСерииНоменклатуры Тогда
			Индекс = СтрокаТЧ.КлючСвязиСерииНоменклатуры;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКлючиСвязиВТабличнойЧастиТовары()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область Прослеживаемость

&НаКлиенте
Процедура ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТННаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		// Если в результате выбора пришло только значение,
		// то переложим его в структуру.
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НомераГТД") Тогда
			ВыбранноеЗначение = Новый Структура("НомерГТД", ВыбранноеЗначение);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
			
			ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
			Если ДатаГТД > КонецДня(Объект.Дата) Тогда
				
				ТекстСообщения = НСтр("ru ='Выбранная ГТД датирована более поздней датой, чем текущий документ'");
				ТекстПутьКДанным = СтрШаблон("Объект.Запасы[%1].РНПТ", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , ТекстПутьКДанным);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТННаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыУНФ.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязанныеЗаписи(СтрокаЗапасы)
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаЗапасы.ИдентификаторСтроки);
	МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
		Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
	КонецЦикла;
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаЗапасы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакПрослеживаемости()
	
	Если Не КэшЗначений.Свойство("ВестиУчетПрослеживаемыхТоваров") Тогда
		КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата));
	КонецЕсли;
	ИспользуетсяПрослеживаемость = КэшЗначений.ВестиУчетПрослеживаемыхТоваров
		И ПрослеживаемаяОперация(Объект.ВидОперации);
	ПрослеживаемостьФормыУНФ.ОбновитьПризнакПрослеживаемости(Объект.Запасы, Объект.СведенияПрослеживаемости, ИспользуетсяПрослеживаемость);
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПрослеживаемаяОперация(Операция)
	
	Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции 

&НаСервере
Процедура ОбновитьОтображениеПрослеживаемости()
	
	ПрослеживаемостьФормыУНФ.ПриСозданииФормы(ЭтотОбъект, КэшЗначений);
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПрослеживаемостиПриИзмененииКонтрагента(СтруктураДанные);
	
	Если КэшЗначений.РеализацияВЕАЭС <> СтруктураДанные.РеализацияВЕАЭС Тогда
		КэшЗначений.Вставить("РеализацияВЕАЭС", СтруктураДанные.РеализацияВЕАЭС);
		РеализацияВЕАЭС = СтруктураДанные.РеализацияВЕАЭС;
		Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
			ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(
				ЭтотОбъект,
				,,
				ПрослеживаемаяОперация(Объект.ВидОперации),
				КэшЗначений.РеализацияВЕАЭС);
			
			Объект.СведенияПрослеживаемости.Очистить();
			ОбновитьОтображениеПрослеживаемости();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

