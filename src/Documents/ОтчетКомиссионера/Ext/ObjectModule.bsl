#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Процедура заполняет авансы.
//
Процедура ЗаполнитьПредоплату() Экспорт
	
	Компания = Константы.УчетПоКомпании.Компания(Организация);
	
	// Подготовка таблицы заказов.
	ТаблицаЗаказов = Запасы.Выгрузить(, "ЗаказПокупателя, Всего");
	ТаблицаЗаказов.Колонки.Добавить("ВсегоРасч");
	Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
		Если НЕ Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекСтрока.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
		ТекСтрока.ВсегоРасч = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			ТекСтрока.Всего,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Курс, 1),
			Курс,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Кратность, 1),
			Кратность
		);
	КонецЦикла;
	ТаблицаЗаказов.Свернуть("ЗаказПокупателя", "Всего, ВсегоРасч");
	ТаблицаЗаказов.Сортировать("ЗаказПокупателя Возр");
	
	// Заполнение расшифровки предоплаты.
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателямиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ В (&Заказ)
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПокупателями.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПокупателями.Договор = &Договор
	|		И ДвиженияДокументаРасчетыСПокупателями.Заказ В (&Заказ)
	|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаУчета / ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|				ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|			ИНАЧЕ 1
	|		КОНЕЦ) * (КурсыВалютыУчетаКурс / КурсыВалютыУчетаКратность) КАК Курс,
	|	1 КАК Кратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс КАК КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность КАК КурсыВалютыДокументаКратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * &КратностьВалютыДокумента / (&КурсВалютыДокумента * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		КурсыВалютыУчета.Курс КАК КурсыВалютыУчетаКурс,
	|		КурсыВалютыУчета.Кратность КАК КурсыВалютыУчетаКратность,
	|		&КурсВалютыДокумента КАК КурсыВалютыДокументаКурс,
	|		&КратностьВалютыДокумента КАК КурсыВалютыДокументаКратность
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПокупателямиОстатки КАК РасчетыСПокупателямиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	КурсыВалютыУчетаКурс,
	|	КурсыВалютыУчетаКратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Запрос.УстановитьПараметр("Заказ", ТаблицаЗаказов.ВыгрузитьКолонку("ЗаказПокупателя"));
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Если Договор.ВалютаРасчетов = ВалютаДокумента Тогда
		Запрос.УстановитьПараметр("КурсВалютыДокумента", Курс);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", Кратность);
	Иначе
		Запрос.УстановитьПараметр("КурсВалютыДокумента", 1);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = ТекстЗапроса;
	
	Предоплата.Очистить();
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		НайденнаяСтрока = ТаблицаЗаказов.Найти(ВыборкаРезультатаЗапроса.Заказ, "ЗаказПокупателя");
		
		Если НайденнаяСтрока.ВсегоРасч = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаРезультатаЗапроса.СуммаРасчетов <= НайденнаяСтрока.ВсегоРасч Тогда // сумма остатка меньше или равна чем осталось распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НайденнаяСтрока.ВсегоРасч = НайденнаяСтрока.ВсегоРасч - ВыборкаРезультатаЗапроса.СуммаРасчетов;
			
		Иначе // сумма остатка больше чем нужно распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НоваяСтрока.СуммаРасчетов = НайденнаяСтрока.ВсегоРасч;
			НоваяСтрока.СуммаПлатежа = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				НоваяСтрока.СуммаРасчетов,
				ВыборкаРезультатаЗапроса.Курс,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКурс,
				ВыборкаРезультатаЗапроса.Кратность,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКратность
			);
			НайденнаяСтрока.ВсегоРасч = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик заполнения на основании документа РасходнаяНакладная.
//
// Параметры:
//	ДокументСсылкаРасходнаяНакладная - ДокументСсылка.РасходнаяНакладная.
//	
Процедура ЗаполнитьПоРасходнаяНакладная(ДокументСсылкаРасходнаяНакладная) Экспорт
	
	Если ДокументСсылкаРасходнаяНакладная.ВидОперации <> Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Нельзя ввести Отчет комиссионера на основании операции ""%1""'"),
		ДокументСсылкаРасходнаяНакладная.ВидОперации);
	КонецЕсли;
	
	Запасы.Очистить();
	Покупатели.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Ссылка.Организация КАК Организация,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Контрагент КАК Контрагент,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Договор КАК Договор,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	РасходнаяНакладнаяЗапасы.Ссылка.ВидЦен КАК ВидЦен,
	|	РасходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	РасходнаяНакладнаяЗапасы.Ссылка.НалогообложениеНДС КАК НалогообложениеНДС,
	|	РасходнаяНакладнаяЗапасы.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РасходнаяНакладнаяЗапасы.Ссылка.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Курс КАК Курс,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Кратность КАК Кратность,
	|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|	РасходнаяНакладнаяЗапасы.Партия КАК Партия,
	|	РасходнаяНакладнаяЗапасы.Количество КАК Количество,
	|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РасходнаяНакладнаяЗапасы.Цена КАК ЦенаПередачи,
	|	РасходнаяНакладнаяЗапасы.Сумма КАК СуммаПередачи,
	|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДСПередачи,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Заказ
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	0 КАК КлючСвязи,
	|	РасходнаяНакладнаяЗапасы.КлючСвязи КАК КлючСвязиСерииНоменклатуры,
	|	РасходнаяНакладнаяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	РасходнаяНакладнаяЗапасы.НомерГТД КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.СтранаПроисхождения В (ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия), ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрямоеСписаниеГТД,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Договор.УдержатьКомиссионноеВознаграждение КАК УдержатьКомиссионноеВознаграждение,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Договор.УслугаКомиссионногоВознаграждения КАК УслугаКомиссионногоВознаграждения,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Договор.СпособРасчетаКомиссионногоВознаграждения КАК СпособРасчетаКомиссионногоВознаграждения,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Договор.ПроцентКомиссионногоВознаграждения КАК ПроцентКомиссионногоВознаграждения,
	|	РасходнаяНакладнаяЗапасы.КодТНВЭД КАК КодТНВЭД
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылкаРасходнаяНакладная);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	ВыборкаИзРезультатаЗапроса.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
		Дата,
		Новый Структура("Валюта", ВыборкаИзРезультатаЗапроса.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	НоваяСтрока = Покупатели.Добавить();
	НоваяСтрока.Покупатель = ВыборкаИзРезультатаЗапроса.Контрагент;
	НоваяСтрока.КлючСвязи = ВыборкаИзРезультатаЗапроса.КлючСвязи;
	
	СтруктураДанных = Новый Структура;
	
	ВыборкаИзРезультатаЗапроса.Сбросить();
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаИзРезультатаЗапроса);
	КонецЦикла;
	
	СтруктураДанных.Вставить("Дата",				Дата);
	СтруктураДанных.Вставить("Организация",			Организация);
	СтруктураДанных.Вставить("ВидЦен",				ВидЦен);
	СтруктураДанных.Вставить("ВалютаДокумента",		ВалютаДокумента);
	СтруктураДанных.Вставить("СуммаВключаетНДС",	СуммаВключаетНДС);
	
	ЦенообразованиеСервер.ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, Запасы);
	
	СтавкаНДСВознаграждения = Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию);
	
	Для Каждого СтрокаЗапасы Из Запасы Цикл
		РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаЗапасы);
		РассчитатьКомиссионноеВознаграждение(СтрокаЗапасы);
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("КлючСвязи");
	
	Для каждого СтрокаПокупатели Из Покупатели Цикл
		РассчитатьКолонкуВсего(ПараметрыОтбора, СтрокаПокупатели);
	КонецЦикла;
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		СерииНоменклатуры.Загрузить(ДокументСсылкаРасходнаяНакладная.СерииНоменклатуры.Выгрузить());
		Для каждого стр Из Запасы Цикл
			стр.СерииНоменклатуры = СерииНоменклатурыУНФКлиентСервер.СтроковоеПредставлениеСерийНоменклатурыСтроки(СерииНоменклатуры, стр.КлючСвязиСерииНоменклатуры);
		КонецЦикла;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументСсылкаРасходнаяНакладная, "Проект") Тогда
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылкаРасходнаяНакладная,"Проект");
	КонецЕсли;
	
	ЗаполнитьОтчетКомиссионераПоДоговору();
	
КонецПроцедуры // ЗаполнитьПоРасходнаяНакладная()

Процедура РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабЧасти)
	
	СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Количество * СтрокаТабЧасти.Цена;
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабЧасти.СтавкаНДС);
			
	Если СуммаВключаетНДС Тогда
		СтрокаТабЧасти.СуммаНДС = ?(СуммаВключаетНДС, СтрокаТабЧасти.Сумма - (СтрокаТабЧасти.Сумма)/((СтавкаНДС + 100)/100), СтрокаТабЧасти.Сумма * СтавкаНДС/100);
		СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабЧасти.СуммаНДС);
	Иначе
		СтрокаТабЧасти.СуммаНДС = СтрокаТабЧасти.Сумма*СтавкаНДС/100;
		СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма+СтрокаТабЧасти.СуммаНДС;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти)
	
	Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
	
	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
		СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения * СтрокаТабличнойЧасти.Сумма / 100;
	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления Тогда
		СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения * (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПередачи) / 100;
	Иначе
		СтрокаТабличнойЧасти.СуммаВознаграждения = 0;
	КонецЕсли;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСВознаграждения);
	
	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = ?(СуммаВключаетНДС,
													СтрокаТабличнойЧасти.СуммаВознаграждения - (СтрокаТабличнойЧасти.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаВознаграждения * СтавкаНДС / 100);
	
КонецПроцедуры

Процедура РассчитатьКолонкуВсего(ПараметрыОтбора, СтрокаПокупатели)
	
	ПараметрыОтбора.КлючСвязи = СтрокаПокупатели.КлючСвязи;
	РезультатПоиска = Запасы.НайтиСтроки(ПараметрыОтбора);
	Если РезультатПоиска.Количество() = 0 Тогда
		СтрокаПокупатели.Всего = 0;
	Иначе
		ИтогВсего = 0;
		Для каждого СтрокаТЧ Из РезультатПоиска Цикл
			ИтогВсего = ИтогВсего + СтрокаТЧ.Всего;
		КонецЦикла;
		СтрокаПокупатели.Всего = ИтогВсего;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения документа на основании отчета комиссионера.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.РасходнаяНакладная - Расходная накладная
//	ДанныеЗаполнения - ДокументСсылка.ОтчетКомиссионера - Отчет комиссионера
//	
Процедура ЗаполнитьПоОтчетуКомиссионера(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах Тогда
		ТекстИсключения = НСтр(
			"ru = 'Документ вводится только на основании отчета комиссионера с видом операции - отчет комиссионера о продажах.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Запасы.Очистить();
	Покупатели.Очистить();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	ЭтотОбъект.Проведен = Ложь;
	Номер = Неопределено;
	
	Покупатели.Загрузить(ДанныеЗаполнения.Покупатели.Выгрузить());
	
	Для Каждого СтрокаЗапасов Из ДанныеЗаполнения.Запасы Цикл
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
	КонецЦикла;
	
	Предоплата.Загрузить(ДанныеЗаполнения.Предоплата.Выгрузить());
	СерииНоменклатуры.Загрузить(ДанныеЗаполнения.СерииНоменклатуры.Выгрузить());
	
	ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах;
	
	Для Каждого СтрокаПокупатели Из Покупатели Цикл
		СтрокаПокупатели.ОтчетКомиссионера = ДанныеЗаполнения;
	КонецЦикла;
	
	Для Каждого СтрокаПредоплата Из Предоплата Цикл
		СтрокаПредоплата.ОтчетКомиссионера = ДанныеЗаполнения;
	КонецЦикла;
	
	ДокументОснование = ДанныеЗаполнения.Ссылка;
	Комментарий = "";
	
КонецПроцедуры

// Процедура формирует счет-фактуры.
//
Процедура СформироватьСчетаФактуры(СсылкаНового = Неопределено)
	
	Если ВыписыватьСчетаФактурыСводно Тогда
		СформироватьСчетаФактурыСводно(СсылкаНового);
	Иначе
		СформироватьСчетаФактурыПокупатели(СсылкаНового);
	КонецЕсли;
	
КонецПроцедуры // СформироватьСчетаФактуры()

// Процедура формирует счет-фактуры для покупателей.
//
Процедура СформироватьСчетаФактурыПокупатели(СсылкаНового)
	
	ТаблицаПодчиненныхСчетФактур = ПолучитьСписокПодчиненныхСчетФактурПокупателей();
	Для каждого СтрокаТабличнойЧасти Из Покупатели Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Покупатель) Тогда
			 СтрокаТабличнойЧасти.ВыставленСФ = Ложь;
		КонецЕсли;
		
		Если Не СтрокаТабличнойЧасти.ВыставленСФ
			ИЛИ Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаСФ) Тогда
			СтрокаТабличнойЧасти.СчетФактура = Документы.СчетФактура.ПустаяСсылка();
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Использован", Ложь);
		ПараметрыОтбора.Вставить("Контрагент", СтрокаТабличнойЧасти.Покупатель);
		ПараметрыОтбора.Вставить("Дата", СтрокаТабличнойЧасти.ДатаСФ);
		
		СформированНовыйСчетФактура = Ложь;
		РезультатПоиска = ТаблицаПодчиненныхСчетФактур.НайтиСтроки(ПараметрыОтбора);
		Если РезультатПоиска.Количество() = 0 Тогда
			
			ДокСчетФактура = Документы.СчетФактура.СоздатьДокумент();
			ДокСчетФактура.Дата = СтрокаТабличнойЧасти.ДатаСФ;
			СформированНовыйСчетФактура = Истина;
			
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
				ИндексПоиска = 0;
				РезультатИндекс = Неопределено;
				Для каждого СтрокаПоиска Из РезультатПоиска Цикл
					Если СтрокаПоиска.Ссылка = СтрокаТабличнойЧасти.СчетФактура Тогда
						РезультатИндекс = ИндексПоиска;
					КонецЕсли;
					ИндексПоиска = ИндексПоиска + 1;
				КонецЦикла;
				Если РезультатИндекс = Неопределено Тогда
					НайденнаяСчФ = РезультатПоиска[0].Ссылка;
					РезультатПоиска[0].Использован = Истина;
				Иначе
					НайденнаяСчФ = РезультатПоиска[РезультатИндекс].Ссылка;
					РезультатПоиска[РезультатИндекс].Использован = Истина;
				КонецЕсли;
			Иначе
				НайденнаяСчФ = РезультатПоиска[0].Ссылка;
				РезультатПоиска[0].Использован = Истина;
			КонецЕсли;
			
			ДокСчетФактура = НайденнаяСчФ.ПолучитьОбъект();
			
		КонецЕсли;
		
		СтруктураДанных = Новый Структура;
		Если СсылкаНового = Неопределено Тогда
			СтруктураДанных.Вставить("Ссылка", Ссылка);
		Иначе
			СтруктураДанных.Вставить("Ссылка", СсылкаНового);
		КонецЕсли;
		СтруктураДанных.Вставить("Дата", СтрокаТабличнойЧасти.ДатаСФ);
		СтруктураДанных.Вставить("Организация", Организация);
		СтруктураДанных.Вставить("Покупатель", СтрокаТабличнойЧасти.Покупатель);
		СтруктураДанных.Вставить("ОснованиеПечати", Неопределено);
		СтруктураДанных.Вставить("СводныйКомиссионный", Ложь);
		СтруктураДанных.Вставить("ВалютаДокумента", ВалютаДокумента);
		СтруктураДанных.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		СтруктураДанных.Вставить("Курс", Курс);
		СтруктураДанных.Вставить("Кратность", Кратность);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		РезультатПоиска = Запасы.НайтиСтроки(ПараметрыОтбора);
		
		СтруктураДанных.Вставить("Запасы", РезультатПоиска);
		
		ДокСчетФактура.ЗаполнитьПоПокупателямОтчетаКомиссионера(СтруктураДанных);
		
		Если ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
			ДокСчетФактура.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов",
				ДополнительныеСвойства.ОтключитьМеханизмРегистрацииОбъектов);
		КонецЕсли;
		
		ДокСчетФактура.Записать();
		
		СтрокаТабличнойЧасти.СчетФактура = ДокСчетФактура.Ссылка;
		
		Если СформированНовыйСчетФактура Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Сформирован Счет-фактура (выданный) №%1 от %2'"),
				ДокСчетФактура.Номер, Формат(ДокСчетФактура.Дата, "ДЛФ=D;"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьСчетаФактурыПокупатели()

// Процедура формирует счет-фактуры для покупателей.
//
Процедура СформироватьСчетаФактурыСводно(СсылкаНового)
	
	ТаблицаПодчиненныхСчетФактур = ПолучитьСписокПодчиненныхСчетФактурПокупателей();
	КлючСвязиПокупателиСводно = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из Покупатели Цикл
		
		Если КлючСвязиПокупателиСводно.Найти(СтрокаТабличнойЧасти.КлючСвязи) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Покупатель) Тогда
			 СтрокаТабличнойЧасти.ВыставленСФ = Ложь;
		КонецЕсли;
		
		Если Не СтрокаТабличнойЧасти.ВыставленСФ
			ИЛИ Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаСФ) Тогда
			СтрокаТабличнойЧасти.СчетФактура = Документы.СчетФактура.ПустаяСсылка();
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Использован", Ложь);
		ПараметрыОтбора.Вставить("Контрагент", Контрагент);
		ПараметрыОтбора.Вставить("Дата", СтрокаТабличнойЧасти.ДатаСФ);
		
		СформированНовыйСчетФактура = Ложь;
		РезультатПоиска = ТаблицаПодчиненныхСчетФактур.НайтиСтроки(ПараметрыОтбора);
		Если РезультатПоиска.Количество() = 0 Тогда
			
			ДокСчетФактура = Документы.СчетФактура.СоздатьДокумент();
			ДокСчетФактура.Дата = СтрокаТабличнойЧасти.ДатаСФ;
			СформированНовыйСчетФактура = Истина;
			
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
				ИндексПоиска = 0;
				РезультатИндекс = Неопределено;
				Для каждого СтрокаПоиска Из РезультатПоиска Цикл
					Если СтрокаПоиска.Ссылка = СтрокаТабличнойЧасти.СчетФактура Тогда
						РезультатИндекс = ИндексПоиска;
					КонецЕсли;
					ИндексПоиска = ИндексПоиска + 1;
				КонецЦикла;
				Если РезультатИндекс = Неопределено Тогда
					НайденнаяСчФ = РезультатПоиска[0].Ссылка;
					РезультатПоиска[0].Использован = Истина;
				Иначе
					НайденнаяСчФ = РезультатПоиска[РезультатИндекс].Ссылка;
					РезультатПоиска[РезультатИндекс].Использован = Истина;
				КонецЕсли;
			Иначе
				НайденнаяСчФ = РезультатПоиска[0].Ссылка;
				РезультатПоиска[0].Использован = Истина;
			КонецЕсли;
			
			ДокСчетФактура = НайденнаяСчФ.ПолучитьОбъект();
			
		КонецЕсли;
		
		ПараметрыОтбораСводно = Новый Структура;
		ПараметрыОтбораСводно.Вставить("ДатаСФ", СтрокаТабличнойЧасти.ДатаСФ);
		РезультатПоискаСводно = Покупатели.НайтиСтроки(ПараметрыОтбораСводно);
		
		КлючСвязиСводно = Новый Массив;
		Для каждого СтрокаСводно Из РезультатПоискаСводно Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаСводно.Покупатель) Тогда
				СтрокаСводно.ВыставленСФ = Ложь;
			КонецЕсли;
				
			Если Не СтрокаСводно.ВыставленСФ
				ИЛИ Не ЗначениеЗаполнено(СтрокаСводно.ДатаСФ) Тогда
				СтрокаСводно.СчетФактура = Документы.СчетФактура.ПустаяСсылка();
				Продолжить;
			КонецЕсли;
			
			КлючСвязиСводно.Добавить(СтрокаСводно.КлючСвязи);
			КлючСвязиПокупателиСводно.Добавить(СтрокаСводно.КлючСвязи);
			
		КонецЦикла;
		
		СтруктураДанных = Новый Структура;
		Если СсылкаНового = Неопределено Тогда
			СтруктураДанных.Вставить("Ссылка", Ссылка);
		Иначе
			СтруктураДанных.Вставить("Ссылка", СсылкаНового);
		КонецЕсли;
		СтруктураДанных.Вставить("Дата", СтрокаТабличнойЧасти.ДатаСФ);
		СтруктураДанных.Вставить("Организация", Организация);
		СтруктураДанных.Вставить("Покупатель", Контрагент);
		СтруктураДанных.Вставить("ОснованиеПечати", Неопределено);
		СтруктураДанных.Вставить("СводныйКомиссионный", Истина);
		СтруктураДанных.Вставить("ВалютаДокумента", ВалютаДокумента);
		СтруктураДанных.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		СтруктураДанных.Вставить("Курс", Курс);
		СтруктураДанных.Вставить("Кратность", Кратность);
		
		МассивСтрокЗапасы = Новый Массив;
		Для каждого СтрокаЗапасы Из Запасы Цикл
			Если КлючСвязиСводно.Найти(СтрокаЗапасы.КлючСвязи) <> Неопределено Тогда
				МассивСтрокЗапасы.Добавить(СтрокаЗапасы);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураДанных.Вставить("Запасы", МассивСтрокЗапасы);
		
		ДокСчетФактура.ЗаполнитьПоПокупателямОтчетаКомиссионера(СтруктураДанных);
		
		Если ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
			ДокСчетФактура.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов",
				ДополнительныеСвойства.ОтключитьМеханизмРегистрацииОбъектов);
		КонецЕсли;
		
		ДокСчетФактура.Записать();
		
		Для каждого СтрокаПокупатели Из Покупатели Цикл
			Если КлючСвязиСводно.Найти(СтрокаПокупатели.КлючСвязи) <> Неопределено Тогда
				СтрокаПокупатели.СчетФактура = ДокСчетФактура.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		Если СформированНовыйСчетФактура Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Сформирован Счет-фактура (выданный) №%1 от %2'"),
				ДокСчетФактура.Номер, Формат(ДокСчетФактура.Дата, "ДЛФ=D;"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры // СформироватьСчетаФактурыСводно()

// Функция обновляет параметры подчиненных счет-фактур.
//
Функция ПолучитьСписокПодчиненныхСчетФактурПокупателей()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("СписокКонтрагентов", Покупатели.ВыгрузитьКолонку("Покупатель"));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧДокОснования.Ссылка КАК Ссылка
	|	,ТЧДокОснования.Ссылка.Контрагент КАК Контрагент
	|	,НАЧАЛОПЕРИОДА(ТЧДокОснования.Ссылка.Дата, День) КАК Дата
	|	,ЛОЖЬ КАК Использован
	|ИЗ Документ.СчетФактура.ДокументыОснования КАК ТЧДокОснования
	|ГДЕ ТЧДокОснования.ДокументОснование = &ДокументОснование И НЕ ТЧДокОснования.Ссылка.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСписокПодчиненныхСчетФактурПокупателей()

// Процедура обновляет параметры подчиненных счет-фактур.
//
Процедура ОбновитьСсылкиСчетФактур() Экспорт
	
	// Удаляем незадействованные счета-фактуры.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧДокОснования.Ссылка КАК Ссылка
	|	,ТЧДокОснования.Ссылка.Номер КАК Номер
	|	,ТЧДокОснования.Ссылка.Дата КАК Дата
	|ИЗ Документ.СчетФактура.ДокументыОснования КАК ТЧДокОснования
	|ГДЕ ТЧДокОснования.ДокументОснование = &ДокументОснование И (НЕ ТЧДокОснования.Ссылка.ПометкаУдаления)";
	
	ТаблицаСчетФактур = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаСчФ Из ТаблицаСчетФактур Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("СчетФактура", СтрокаСчФ.Ссылка);
		ПараметрыОтбора.Вставить("ВыставленСФ", Истина);
		РезультатПоиска = Покупатели.НайтиСтроки(ПараметрыОтбора);
		Если РезультатПоиска.Количество() = 0 Тогда
			
			ТекущийСчетФактура = СтрокаСчФ.Ссылка.ПолучитьОбъект();
			ТекущийСчетФактура.Заблокировать();
			Если ТекущийСчетФактура.ДокументыОснования.Количество() > 0 Тогда
				
				СтрокаОснование = ТекущийСчетФактура.ДокументыОснования.Найти(Ссылка, "ДокументОснование");
				Если НЕ СтрокаОснование = Неопределено Тогда
					
					ТекущийСчетФактура.ДокументыОснования.Удалить(СтрокаОснование);
					ТекущийСчетФактура.Записать();
					
					ТекстСообщения = СтрШаблон(НСтр(
						"ru = 'Из счета-фактуры (выданного) №%1 от %2 удалена ссылка на текущий документ.'"),
						ТекущийСчетФактура.Номер, ТекущийСчетФактура.Дата);
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			Иначе
				
				ТекущийСчетФактура.УстановитьПометкуУдаления(Истина);
				ТекущийСчетФактура.Записать();
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Счет-фактура (выданный) №%1 от %2 помечен на удаление.'"),
					ТекущийСчетФактура.Номер, ТекущийСчетФактура.Дата);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработкаПодчиненныхСчетФактур(Проведен);
	
КонецПроцедуры // ОбновитьСсылкиСчетФактур()

// Процедура отмены / проведения у подчиненных счет-фактур.
//
Процедура ОбработкаПодчиненныхСчетФактур(Провести = Истина)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакПроведения", НЕ Провести);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураДокументыОснования.Ссылка КАК Ссылка,
	|	СчетФактураДокументыОснования.Ссылка.Номер КАК Номер,
	|	СчетФактураДокументыОснования.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
	|ГДЕ
	|	СчетФактураДокументыОснования.Ссылка.Проведен = &ПризнакПроведения
	|		И СчетФактураДокументыОснования.ДокументОснование = &ДокументОснование
	|		И (НЕ СчетФактураДокументыОснования.Ссылка.ПометкаУдаления)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		ТекущийДокумент = СтрокаРезультата.Ссылка.ПолучитьОбъект();
		Если Провести И НЕ ТекущийДокумент.ПроверитьЗаполнение() Тогда
			Продолжить;
		КонецЕсли;
		
		СостояниеПроведен = ТекущийДокумент.Проведен;
		
		ТекущийДокумент.Проведен = Провести;
		ТекущийДокумент.Записать();
		
		Если СостояниеПроведен И НЕ Провести Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Отменено проведение счета-фактуры (выданного) №%1 от %2'"),
				ТекущийДокумент.Номер, ТекущийДокумент.Дата);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		ИначеЕсли Не СостояниеПроведен И Провести Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Проведен счет-фактура (выданный) №%1 от %2'"),
				ТекущийДокумент.Номер, ТекущийДокумент.Дата);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПодчиненныхСчетФактур()

// Процедура синхронизирует пометку удаления для подчиненных счет-фактур.
//
Процедура СинхронизацияПометкиНаУдалениеУПодчиненныхСчетовФактур(ПометитьНаУдаление = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакУдаления", НЕ ПометитьНаУдаление);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧДокОснования.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактура.ДокументыОснования КАК ТЧДокОснования
	|ГДЕ
	|	ТЧДокОснования.ДокументОснование = &ДокументОснование
	|	И ТЧДокОснования.ДокументОснование.ПометкаУдаления = &ПризнакУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		ТекущийДокумент = СтрокаРезультата.Ссылка.ПолучитьОбъект();
		ТекущийДокумент.УстановитьПометкуУдаления(ПометитьНаУдаление);
		
	КонецЦикла;
	
КонецПроцедуры // СинхронизацияПометкиНаУдалениеУПодчиненныхСчетовФактур()

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ТаблицаЗапасы = Запасы.Выгрузить(, "ЗаказПокупателя, Всего");
	ТаблицаЗапасы.Свернуть("ЗаказПокупателя", "Всего");
	
	ТаблицаПредоплата = Предоплата.Выгрузить(, "Заказ, СуммаПлатежа");
	ТаблицаПредоплата.Свернуть("Заказ", "СуммаПлатежа");
	
	КоличествоЗапасы = Запасы.Количество();
	
	// Заказы
	Для каждого Строка Из ТаблицаПредоплата Цикл
		
		Если Контрагент.ВестиРасчетыПоЗаказам
		   И Строка.Заказ <> Неопределено
		   И Строка.Заказ <> Документы.ЗаказПокупателя.ПустаяСсылка() Тогда
			НайденнаяСтрокаЗапасы = Запасы.Найти(Строка.Заказ, "ЗаказПокупателя");
		ИначеЕсли Контрагент.ВестиРасчетыПоЗаказам Тогда
			НайденнаяСтрокаЗапасы = ТаблицаЗапасы.Найти(Неопределено, "ЗаказПокупателя");
			НайденнаяСтрокаЗапасы = ?(НайденнаяСтрокаЗапасы = Неопределено, ТаблицаЗапасы.Найти(Документы.ЗаказПокупателя.ПустаяСсылка(), "ЗаказПокупателя"), НайденнаяСтрокаЗапасы);
		КонецЕсли;
		
		Если НайденнаяСтрокаЗапасы = Неопределено И КоличествоЗапасы > 0 И Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекстСообщения = НСтр(
				"ru = 'Нельзя зачесть аванс по заказу отличному от указанных в табличной части ""Запасы"".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	// Отчеты комиссионера
	Для каждого Строка Из Предоплата Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ОтчетКомиссионера) Тогда Продолжить КонецЕсли;
		
		НайденнаяСтрокаПокупатели = Покупатели.Найти(Строка.ОтчетКомиссионера, "ОтчетКомиссионера");
		
		Если НайденнаяСтрокаПокупатели = Неопределено Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Отчет комиссионера в строке %1 таблицы ""Предоплата"" не найден в табличной части ""Покупатели"".'"),
				Строка.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Предоплата", Строка.НомерСтроки,
				"ОтчетКомиссионера");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	// Отчеты комиссионера на продажу ТЧ Покупатели
	
	Если ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах Тогда
		
		Для Каждого СтрокаПокупателей Из Покупатели Цикл
			
			ОтчетКомиссионера = СтрокаПокупателей.ОтчетКомиссионера;
			ДоговорОтчетКомиссионера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтчетКомиссионера, "Договор");
			
			Если ОтчетКомиссионера.ИспользоватьНовуюСхемуДвижений И ОтчетКомиссионера.СуммаВознаграждения > 0 Тогда
				Если Не ЗначениеЗаполнено(ДоговорОтчетКомиссионера.УслугаКомиссионногоВознаграждения) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Необходимо заполнить услугу комиссионного вознаграждения в договоре документа %1.
					|Услуга находится в группе - Комиссия. Договор документа должен иметь вид - С комиссионером'"), Строка(ОтчетКомиссионера));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОтчетКомиссионера) Тогда Продолжить КонецЕсли;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не выбран Отчет комиссионера в строке %1 таблицы ""Покупатели""'"),
				СтрокаПокупателей.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Покупатели", СтрокаПокупателей.НомерСтроки,
				"ОтчетКомиссионера");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
	РасчетыРаботаСФормамиВызовСервера.ПроверитьЗаполнениеДокументаПредоплаты(Контрагент, ПроверяемыеРеквизиты);
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	СерииНоменклатурыУНФ.ПроверкаЗаполненияСерийНоменклатуры(Отказ, Запасы, СерииНоменклатуры, Неопределено, ЭтотОбъект, "КлючСвязиСерииНоменклатуры");
	
	ГрузовыеТаможенныеДекларацииСервер.ПриОбработкеПроверкиЗаполнения(Отказ, ЭтотОбъект);
	
	Если ИспользоватьНовуюСхемуДвижений И Запасы.Итог("СуммаВознаграждения") > 0 И ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера Тогда
		Если Не ЗначениеЗаполнено(Договор.УслугаКомиссионногоВознаграждения) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить услугу комиссионного вознаграждения в договоре документа.
			|Услуга находится в группе - Комиссия. Договор документа должен иметь вид - С комиссионером'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Договор.ДоговорУслугиКомиссионногоВознаграждения) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить договор для услуги комиссионного вознаграждения в договоре документа.
			|Договор для услуги комиссии выбирается в группе - Комиссия. Договор документа должен иметь вид - С комиссионером'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Прослеживаемость
	РеализацияВЕАЭС = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Контрагент);
	// Исключаем из проверки те реквизиты табличных частей, обязательность которых
	//  зависит от значений других реквизитов в строках табличных частей:
	ИсключаемыеРеквизиты = Новый Массив;
	ИсключаемыеРеквизиты.Добавить("Запасы.КодТНВЭД");
	
	// Проверяем табличную часть "Товары":
	Если Запасы.Количество() > 0 Тогда
		ИмяСписка = НСтр("ru = 'Запасы'");
		
		Для каждого СтрокаЗапасы Из Запасы Цикл
			
			Если Не СтрокаЗапасы.ПрослеживаемыйТовар Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверка кода ТН ВЭД.
			Если РеализацияВЕАЭС
				И СтрокаЗапасы.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль()
				И НЕ ЗначениеЗаполнено(СтрокаЗапасы.КодТНВЭД) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Код ТН ВЭД'"),
					СтрокаЗапасы.НомерСтроки, ИмяСписка);
					
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки, "КодТНВЭД");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			// Для прослеживаемого товара обязательно указывается страна происхождения.
			Если СтрокаЗапасы.ПрослеживаемыйТовар
				И НЕ ЗначениеЗаполнено(СтрокаЗапасы.СтранаПроисхождения) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Страна происхождения'"),
					СтрокаЗапасы.НомерСтроки, ИмяСписка);
					
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки, "СтранаПроисхождения");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	// Конец Прослеживаемость
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ИсключаемыеРеквизиты);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	// Прослеживаемость
	СведенияПрослеживаемости.Очистить();
	// Конец Прослеживаемость
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.РасходнаяНакладная")] = "ЗаполнитьПоРасходнаяНакладная";
	СтратегияЗаполнения[Тип("ДокументСсылка.ОтчетКомиссионера")] = "ЗаполнитьПоОтчетуКомиссионера";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	Если Не ДанныеЗаполнения = Неопределено Тогда
		
		ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
		Если (ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("Договор"))
			Или (ОбщегоНазначения.ЭтоСсылка(ТипДанныхЗаполнения) И Не ДанныеЗаполнения.Метаданные().Реквизиты.Найти("Договор") = Неопределено) Тогда
			
			Если ДанныеЗаполнения.Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию Тогда
				
				Для Каждого СтрокаЗапасы Из Запасы Цикл
					СтрокаЗапасы.ЗаказПокупателя = Неопределено;
				КонецЦикла;
				
				Для Каждого СтрокаПредоплата Из Предоплата Цикл
					СтрокаПредоплата.Заказ = Неопределено;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(Запасы, Дата);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Заполняет реквизиты документа по договору
//
Процедура ЗаполнитьОтчетКомиссионераПоДоговору()
	
	ДоговорКонтрагента = Договор;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		УдержатьКомиссионноеВознаграждение = ДоговорКонтрагента.УдержатьКомиссионноеВознаграждение;
		СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
		НоменклатураДляОтраженияСуммыБезВознаграждения = ДоговорКонтрагента.НоменклатураДляОтраженияСуммыБезВознаграждения;
		
		Если Не ЗначениеЗаполнено(СпособРасчетаКомиссионногоВознаграждения) Тогда
			СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда 
		ИспользоватьНовуюСхемуДвижений = Истина;
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего");
	СуммаВознаграждения = Запасы.Итог("СуммаВознаграждения");
	
	Если УдержатьКомиссионноеВознаграждение Тогда
		СуммаДокументаСУчетомВознаграждения = СуммаДокумента - СуммаВознаграждения;
	Иначе
		СуммаДокументаСУчетомВознаграждения = СуммаДокумента;
	КонецЕсли;
	
	СинхронизацияПометкиНаУдалениеУПодчиненныхСчетовФактур(ПометкаУдаления);
	
	Если НЕ ПометкаУдаления Тогда
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			СформироватьСчетаФактуры();
		Иначе
			СсылкаНового = ПолучитьСсылкуНового();
			Если НЕ ЗначениеЗаполнено(СсылкаНового) Тогда
				СсылкаНового = Документы.ОтчетКомиссионера.ПолучитьСсылку();
			КонецЕсли;
			СформироватьСчетаФактуры(СсылкаНового);
			УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
	И НЕ Контрагент.ВестиРасчетыПоДоговорам
	И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионера;
	КонецЕсли;
	
	// Прослеживаемость
	// Для реализации не в страны ЕАЭС очистим колонку "Код ТН ВЭД"
	РеализацияВЕАЭС = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Контрагент);
	
	Если НЕ РеализацияВЕАЭС Тогда 
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Запасы Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД) Тогда
				СтрокаТаблицы.КодТНВЭД = Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Запасы Цикл
			Если СтрокаТаблицы.ПрослеживаемыйТовар Тогда
				СтрокаТаблицы.НомерГТД = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Автоматический подбор РНПТ и очистка признака прослеживаемого товара.
	ПрослеживаемыйТовар = Запасы.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	ЕстьПрослеживаемыйТовар = ПрослеживаемыйТовар.Количество() <> 0;
	Если ЕстьПрослеживаемыйТовар Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ПрослеживаемостьУНФ.ПодобратьРНПТКомиссия(ЭтотОбъект, Отказ);
		КонецЕсли; 
	Иначе
		СведенияПрослеживаемости.Очистить();
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
		КонецЦикла; 
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ДополнительныеСвойства.Вставить("ИспользоватьНовуюСхемуДвижений", ИспользоватьНовуюСхемуДвижений);
	ДополнительныеСвойства.Вставить("ВидОперации", ВидОперации);
	
	// Инициализация данных документа.
	Документы.ОтчетКомиссионера.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыПереданныеВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Продажи", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Закупки", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыПереданные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетод", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыНераспределенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыОтложенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПокупателями", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПоставщиками", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// СерииНоменклатуры
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыГарантии", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДвиженияСерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	
	// Прослеживаемость
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПрослеживаемыеТовары", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОперацииСПрослеживаемымиТоварами", ТаблицыДляДвижений, Движения, Отказ);
	// Конец Прослеживаемость
	
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаДокументов", ТаблицыДляДвижений, Движения, Отказ);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.ОтчетКомиссионера.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Контроль превышения возвратов над продажами
	Документы.ОтчетКомиссионера.ВыполнитьКонтрольВозвраты(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
	// Подчиненные счет-фактуры.
	Если НЕ Отказ Тогда
		
		ОбработкаПодчиненныхСчетФактур();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.Вставить("ИспользоватьНовуюСхемуДвижений", ИспользоватьНовуюСхемуДвижений);
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.ОтчетКомиссионера.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Подчиненные счет-фактуры.
	Если НЕ Отказ Тогда
		
		ОбработкаПодчиненныхСчетФактур(Ложь);
		
	КонецЕсли;
	
	// Подчиненные счета-фактуры
	Если Не Отказ Тогда
		СчетаФактурыУНФ.ОтменитьПроведениеПодчиненногоСчетаФактуры(Ссылка, Номер, Дата, ДополнительныеСвойства, Истина);
		СчетаФактурыУНФ.ОтменитьПроведениеПодчиненногоСчетаФактуры(Ссылка, Номер, Дата, ДополнительныеСвойства, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	Предоплата.Очистить();
	
	// Счета-фактуры на реализованные товары и услуги
	ВыписыватьСчетаФактурыСводно = ВыписыватьСчетаФактурыСводно И Дата >= '20150101';
	
КонецПроцедуры // ПриКопировании()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СчетаФактурыУНФ.ПриЗаписиДокументаОснованияСчетаФактуры(Ссылка, ДополнительныеСвойства, Истина);
	
	// Перезаполнение выданных счетов-фактур см. СформироватьСчетаФактуры
	
	ДополнительныеСвойства.Вставить("ВерсияПодчиненногоПолученногоСчетФактуры", ДополнительныеСвойства.ВерсияПодчиненногоСчетФактуры);
	ДополнительныеСвойства.ВерсияПодчиненногоСчетФактуры = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли