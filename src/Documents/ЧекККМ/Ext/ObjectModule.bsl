#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Инициализирует документ чек ККМ.
//
Процедура ИнициализироватьДокумент()
	
	ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(КассаККМ);
	
КонецПроцедуры // ИнициализироватьДокумент()

// Заполняет документ чек ККМ по кассе ККМ.
//
// Параметры
//  КассаККМ - СправочникСсылка.КассыККМ
//
Процедура ЗаполнитьДокументПоКассеККМ(КассаККМ) Экспорт
	
	СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СостояниеКассовойСмены);
	Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	
КонецПроцедуры // ЗаполнитьДокументПоКассеККМ()

Процедура ОбойтиВыборкуКассККМ(Выборка, ЗаказОснование)
	
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		КассаККМ = Выборка.Ссылка;
		
		СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СостояниеКассовойСмены);
		КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
		
		Если НЕ СостояниеКассовойСмены.СменаОткрыта Тогда
			
			ТекстСообщения = НСтр("ru = 'Не открыта кассовая смена для кассы ККМ ""%1"". Открыть смену можно в журнале ""Чеки ККМ"". Также можно оформить чек в рабочем месте кассира (РМК).'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", КассаККМ);
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	ИначеЕсли Выборка.Количество() Тогда
		
		ЕстьОткрытаяСмена = Ложь;
		Пока Выборка.Следующий() Цикл
			
			ТекКассаККМ = Выборка.Ссылка;
		
			СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(ТекКассаККМ);
			
			Если СостояниеКассовойСмены.СменаОткрыта Тогда
				ЕстьОткрытаяСмена = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьОткрытаяСмена Тогда
			ИспользуетсяРезервированиеЗапасов = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
			Если ЗаказОснование.СтруктурнаяЕдиницаРезерв.Пустая() Тогда
				Если ИспользуетсяРезервированиеЗапасов Тогда
					ТекстСообщения = НСтр("ru = 'Не открыта ни одна кассовая смена для основного склада (склад можно выбрать в заказе - закладка ""Дополнительно""). Открыть смену можно в журнале ""Чеки ККМ"". Также можно оформить чек в рабочем месте кассира (РМК).'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Не открыта ни одна кассовая смена для основного склада. Открыть смену можно в журнале ""Чеки ККМ"". Также можно оформить чек в рабочем месте кассира (РМК).'");
				КонецЕсли;
			ИначеЕсли ИспользуетсяРезервированиеЗапасов Тогда
				ТекстСообщения = НСтр("ru = 'Не открыта ни одна кассовая смена для склада, который выбран в заказе. Открыть смену можно в журнале ""Чеки ККМ"". Также можно оформить чек в рабочем месте кассира (РМК).'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Не открыта ни одна кассовая смена для основного склада. Открыть смену можно в журнале ""Чеки ККМ"". Также можно оформить чек в рабочем месте кассира (РМК).'");
			КонецЕсли;
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик заполнения на основании Заказа покупателя.
//
// Параметры:
//  ДанныеЗаполнения - Структура, ДокументСсылка.ЗаказПокупателя - Основание для заполнения документа.
//
Процедура ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения) Экспорт
	
	ТекущаяКассаККМ = КассаККМ;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаказОснование = ДанныеЗаполнения.Основание;
	Иначе
		ЗаказОснование = ДанныеЗаполнения;
	КонецЕсли;
	
	Если НЕ ЭтоВводНаОснованииЗаказНаПродажу(ЗаказОснование) Тогда
		ВызватьИсключение НСтр("ru = 'Чек ККМ ввести только на основании заказа покупателя (на продажу) или независимо!'");
	КонецЕсли;
	
	// Основание и настройка документа.
	МассивЗаказов = Новый Массив;
	МассивЗаказов.Добавить(ЗаказОснование.Ссылка);
	ПоложениеЗаказаПокупателя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеЗаказаПокупателяВДокументахОтгрузки");
	Если НЕ ЗначениеЗаполнено(ПоложениеЗаказаПокупателя) Тогда
		ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	КонецЕсли;
	Если ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Заказ = ЗаказОснование;
	КонецЕсли;
	
	// Заполнение шапки.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК ОснованиеСсылка,
	|	ЗаказПокупателя.Проведен КАК ОснованиеПроведен,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.БанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателя.Организация.БанковскийСчетПоУмолчанию
	|		ИНАЧЕ ЗаказПокупателя.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА РезервированиеЗапасов.Значение
	|			ТОГДА ЗаказПокупателя.СтруктурнаяЕдиницаРезерв
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.Договор КАК Договор,
	|	ЗаказПокупателя.ВидЦен КАК ВидЦен,
	|	ЗаказПокупателя.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ЗаказПокупателя.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЗаказПокупателя.ПроцентСкидкиПоДисконтнойКарте КАК ПроцентСкидкиПоДисконтнойКарте,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ВалютаДокумента = НациональнаяВалюта.Значение
	|			ТОГДА ЗаказПокупателя.Курс
	|		ИНАЧЕ КурсыВалютСрезПоследних.Курс
	|	КОНЕЦ КАК Курс,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ВалютаДокумента = НациональнаяВалюта.Значение
	|			ТОГДА ЗаказПокупателя.Кратность
	|		ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК Кратность,
	|	ЗаказПокупателя.ОжидаетсяВыборВариантаКП КАК ОжидаетсяВыборВариантаКП,
	|	ЗаказПокупателя.ПоложениеСклада КАК ПоложениеСклада
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО ЗаказПокупателя.Договор.ВалютаРасчетов = КурсыВалютСрезПоследних.Валюта},
	|	Константа.НациональнаяВалюта КАК НациональнаяВалюта,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК РезервированиеЗапасов
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивЗаказов)";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("ДатаДокумента", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначенияПроверяемыхРеквизитов = Новый Структура("СостояниеЗаказа, Проведен, ОжидаетсяВыборВариантаКП", Выборка.СостояниеЗаказа, Выборка.ОснованиеПроведен, Выборка.ОжидаетсяВыборВариантаКП);
		Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(Выборка.ОснованиеСсылка, ЗначенияПроверяемыхРеквизитов);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущаяКассаККМ) Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка,, "ВалютаДокумента, СтруктурнаяЕдиница");
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка,, "ВалютаДокумента");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойСклад");
		Если НЕ ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Организация, СтруктурнаяЕдиница, Дата);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("РМК") И ЗначениеЗаполнено(ДанныеЗаполнения.КассаККМ) Тогда
		
		// Чек оформляется из РМК на основании заказа покупателя, который в нем выбран.
		КассаККМ = ДанныеЗаполнения.КассаККМ;
		СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СостояниеКассовойСмены);
		КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
		
		Если НЕ СостояниеКассовойСмены.СменаОткрыта Тогда
			
			ТекстСообщения = НСтр("ru = 'Не открыта кассовая смена для кассы ККМ ""%1"". Открыть смену можно в журнале ""Чеки ККМ"". Также можно оформить чек в рабочем месте кассира (РМК).'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", КассаККМ);
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
		ЗаполнитьСтруктурнуюЕдиницуПоЗаказу(ДанныеЗаполнения, Выборка.СтруктурнаяЕдиница);
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") И ЗначениеЗаполнено(СтруктурнаяЕдиница) И НЕ ЗначениеЗаполнено(ТекущаяКассаККМ) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КассыККМ.Ссылка
			|ИЗ
			|	Справочник.КассыККМ КАК КассыККМ
			|ГДЕ
			|	КассыККМ.ТипКассы = &ТипКассы
			|	И НЕ КассыККМ.ПометкаУдаления
			|	И КассыККМ.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
			|	И КассыККМ.Владелец = &Организация";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("ТипКассы", Перечисления.ТипыКассККМ.ФискальныйРегистратор);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ОбойтиВыборкуКассККМ(Выборка, ЗаказОснование);
		
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") И НЕ ЗначениеЗаполнено(ТекущаяКассаККМ) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КассыККМ.Ссылка
			|ИЗ
			|	Справочник.КассыККМ КАК КассыККМ
			|ГДЕ
			|	КассыККМ.ТипКассы = &ТипКассы
			|	И НЕ КассыККМ.ПометкаУдаления
			|	И КассыККМ.Владелец = &Организация";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ТипКассы", Перечисления.ТипыКассККМ.ФискальныйРегистратор);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		ОбойтиВыборкуКассККМ(Выборка, ЗаказОснование);
		
	КонецЕсли;
	
	// Заполнение табличной части.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				,
	|				ЗаказПокупателя В (&МассивЗаказов)
	|					И (Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|						ИЛИ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|						ИЛИ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗаказыПокупателей.ЗаказПокупателя,
	|		ДвиженияДокументаЗаказыПокупателей.Номенклатура,
	|		ДвиженияДокументаЗаказыПокупателей.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей КАК ДвиженияДокументаЗаказыПокупателей
	|	ГДЕ
	|		ДвиженияДокументаЗаказыПокупателей.Регистратор = &Ссылка) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|				ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипНоменклатурыЗапас,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	ЗаказПокупателяЗапасы.КоличествоСобрано КАК КоличествоСобрано,
	|	ЗаказПокупателяЗапасы.ЕстьСборка КАК ЕстьСборка,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Цена КАК Цена,
	|	ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяЗапасы.Всего КАК Всего,
	|	ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
	|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
	|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.КлючСвязи,
	|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки1,
	|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки1,
	|	ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность,
	|	ЗаказПокупателяЗапасы.Номенклатура.ВидАлкогольнойПродукции.Маркируемый КАК МаркируемыйАлкоголь,
	|	ЗаказПокупателяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказПокупателяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказПокупателяЗапасы.ДоляСтоимости КАК ДоляСтоимости,
	|	ЗаказПокупателяЗапасы.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ЗаказПокупателяЗапасы.Ячейка КАК Ячейка
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	(ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК Заказ,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК Сумма,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.СкидкаНаценка.СпособПредоставления КАК СпособПредоставления
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&МассивЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДобавленныеНаборы.Ссылка КАК Заказ,
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.ДобавленныеНаборы КАК ДобавленныеНаборы
	|ГДЕ
	|	ДобавленныеНаборы.Ссылка В(&МассивЗаказов) 
	|		И ДобавленныеНаборы.НомерВариантаКП = ДобавленныеНаборы.Ссылка.ОсновнойВариантКП";
	
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(МассивЗаказов, Запрос.МенеджерВременныхТаблиц, Истина);
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("ЗаказПокупателя,Номенклатура,Характеристика");
	
	// АвтоматическиеСкидки.
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		СкидкиНаценкиЗаказа = МассивРезультатов[2].Выгрузить();
		СкидкиНаценки.Очистить();
	КонецЕсли;
	// Конец АвтоматическиеСкидки.
	
	ЕстьМаркируемыйАлкоголь = Ложь;
	
	Запасы.Очистить();
	// Наборы
	ПропускаемыеНаборы = Новый Массив;
	// Конец Наборы
	Если ТаблицаОстатков.Количество() > 0 Тогда
		
		Выборка = МассивРезультатов[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.МаркируемыйАлкоголь = Истина Тогда
				ЕстьМаркируемыйАлкоголь = Истина;
				Продолжить;
			КонецЕсли;
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Выборка.Заказ);
			СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
			
			МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
			Если МассивСтрокОстатков.Количество() = 0 Тогда
				// Наборы
				Если ЗначениеЗаполнено(Выборка.НоменклатураНабора) Тогда
					ДобавитьОписаниеНабора(ПропускаемыеНаборы, Выборка.НоменклатураНабора, Выборка.ХарактеристикаНабора);
				КонецЕсли;
				// Конец Наборы
				Продолжить;
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьСборкуЗаказов") И Выборка.ЕстьСборка Тогда
				КоличествоСобрано = Выборка.КоличествоСобрано;
				УжеОтгружено = Выборка.Количество - МассивСтрокОстатков[0].КоличествоОстаток;
				СобраноНеОтгружено = КоличествоСобрано - ?(УжеОтгружено > 0, УжеОтгружено, 0);
				Если СобраноНеОтгружено > 0 Тогда
					ВыборкаКоличество = СобраноНеОтгружено;
				Иначе
					ВыборкаКоличество = 0;
					// Наборы
					Если ЗначениеЗаполнено(Выборка.НоменклатураНабора) Тогда
						ДобавитьОписаниеНабора(ПропускаемыеНаборы, Выборка.НоменклатураНабора, Выборка.ХарактеристикаНабора);
					КонецЕсли;
					// Конец Наборы
					Продолжить;
				КонецЕсли;
			Иначе
				ВыборкаКоличество = Выборка.Количество;
			КонецЕсли;
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			КоличествоКСписанию = ВыборкаКоличество * Выборка.Коэффициент;
			МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоКСписанию;
			Если МассивСтрокОстатков[0].КоличествоОстаток < 0
				ИЛИ ВыборкаКоличество <> Выборка.Количество Тогда
				
				// Наборы
				Если ЗначениеЗаполнено(Выборка.НоменклатураНабора) Тогда
					ДобавитьОписаниеНабора(ПропускаемыеНаборы, Выборка.НоменклатураНабора, Выборка.ХарактеристикаНабора);
				КонецЕсли;
				// Конец Наборы
				
				Если МассивСтрокОстатков[0].КоличествоОстаток < 0 Тогда
					КоличествоКСписанию = (КоличествоКСписанию + МассивСтрокОстатков[0].КоличествоОстаток) / Выборка.Коэффициент;
				Иначе
					КоличествоКСписанию = КоличествоКСписанию / Выборка.Коэффициент;
				КонецЕсли;
				
				ДанныеСтроки = Новый Структура;
				ДанныеСтроки.Вставить("Количество", КоличествоКСписанию);
				ДанныеСтроки.Вставить("Цена", Выборка.Цена);
				ДанныеСтроки.Вставить("Сумма", 0);
				ДанныеСтроки.Вставить("ПроцентСкидкиНаценки", Выборка.ПроцентСкидкиНаценки);
				ДанныеСтроки.Вставить("СуммаСкидкиНаценки", 0);
				ДанныеСтроки.Вставить("СтавкаНДС", Выборка.СтавкаНДС);
				ДанныеСтроки.Вставить("СуммаНДС", 0);
				ДанныеСтроки.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
				ДанныеСтроки.Вставить("Всего", 0);
				ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
			
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
				
			КонецЕсли;
			
			// АвтоматическиеСкидки
			Если ИспользоватьАвтоматическиеСкидки Тогда
				КоличествоВДокументе = Выборка.Количество * Выборка.Коэффициент;
				ПересчитатьСуммы = КоличествоВДокументе <> КоличествоКСписанию;
				КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, КоличествоКСписанию / КоличествоВДокументе, 1);
				Если КоэффициентПересчетаСкидки <> 1 Тогда
					НоваяСтрока.СуммаАвтоматическойСкидки = ОКР(Выборка.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки,2);
				КонецЕсли;
				
				// Формирование табличной части скидок
				
				СуммаАвтоматическойСкидки = 0;
				Если Выборка.КлючСвязи <> 0 Тогда
					ОтборСтрок = Новый Структура("Заказ,КлючСвязи", Выборка.Заказ, Выборка.КлючСвязи);
					Для Каждого СтрокаСкидкиЗаказа Из СкидкиНаценкиЗаказа.НайтиСтроки(ОтборСтрок) Цикл
						
						СтрокаСкидки = СкидкиНаценки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
						Если ЗначениеЗаполнено(СтрокаСкидкиЗаказа.ЗначениеСкидкиНаценки)
							И СтрокаСкидкиЗаказа.СпособПредоставления
							= Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
							СтрокаСкидки.Сумма = ОКР(НоваяСтрока.Цена * НоваяСтрока.Количество
								* СтрокаСкидкиЗаказа.ЗначениеСкидкиНаценки / 100, 2);
						Иначе
							СтрокаСкидки.Сумма = КоэффициентПересчетаСкидки * СтрокаСкидки.Сумма;
						КонецЕсли;
						СуммаАвтоматическойСкидки = СуммаАвтоматическойСкидки + СтрокаСкидки.Сумма;
						
					КонецЦикла;
				КонецЕсли;
				
				НоваяСтрока.СуммаАвтоматическойСкидки = СуммаАвтоматическойСкидки;
				
			КонецЕсли;
			// Конец АвтоматическиеСкидки
			
			Если МассивСтрокОстатков[0].КоличествоОстаток <= 0 Тогда
				ТаблицаОстатков.Удалить(МассивСтрокОстатков[0]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьМаркируемыйАлкоголь Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В заказе присутствует маркируемая алкогольная продукция. Ее необходимо добавить в чек вручную.'");
		Сообщение.Сообщить();
	КонецЕсли;
	
	// Наборы
	
	// Удаление неполных наборов
	Для каждого ОписаниеНабора Из ПропускаемыеНаборы Цикл
		УдаляемыеСтроки = Запасы.НайтиСтроки(ОписаниеНабора);
		Для каждого СтрокаЗапаса Из УдаляемыеСтроки Цикл
			Для Каждого СтрокаСкидки Из СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаЗапаса.КлючСвязи)) Цикл
				СкидкиНаценки.Удалить(СтрокаСкидки);
			КонецЦикла;
			Запасы.Удалить(СтрокаЗапаса);
		КонецЦикла; 
	КонецЦикла;
	
	// Добавленные наборы
	ДобавленныеНаборы.Очистить();
	ДобавленныеНаборыЗаказа = МассивРезультатов[3].Выгрузить();
	Для каждого СтрокаНабора Из ДобавленныеНаборыЗаказа Цикл
		Пропустить = Ложь;
		Для каждого ОписаниеНабора Из ПропускаемыеНаборы Цикл
			Если ОписаниеНабора.НоменклатураНабора=СтрокаНабора.НоменклатураНабора И
				ОписаниеНабора.ХарактеристикаНабора=СтрокаНабора.ХарактеристикаНабора Тогда
				Пропустить = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли; 
		НоваяСтрока = ДобавленныеНаборы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНабора);
	КонецЦикла;
	
	// Конец Наборы
	
	// Заполнение резервов.
	Если Запасы.Количество() > 0
		И Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() Тогда
		ЗаполнитьКолонкуРезервПоРезервам();
		Если ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
				Документы.ЧекККМ.ПроверитьСтруктурнуюЕдиницуВЗаказе(ЗаказОснование, СтрокаТабличнойЧасти.СтруктурнаяЕдиница, 
					СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
			КонецЦикла;
		Иначе
			Документы.ЧекККМ.ПроверитьСтруктурнуюЕдиницуВЗаказе(ЗаказОснование, СтруктурнаяЕдиница);
		КонецЕсли;
	КонецЕсли;
	
	// АвтоматическиеСкидки.
	Если ИспользоватьАвтоматическиеСкидки Тогда
		//@skip-warning
		РезультатРасчетаСкидокНаценок = СкидкиНаценки.Выгрузить();
		СкидкиРассчитаны = Истина;
	КонецЕсли;
	
	// Предоплата
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПредоплатуВЧекахККМ") И Контрагент.ВестиРасчетыПоЗаказам Тогда
		
		Если ЗначениеЗаполнено(Заказ) Тогда
			ТаблицаАвансов = ПолучитьТаблицуАвансовПоЗаказу(Заказ);
			Предоплата.Загрузить(ТаблицаАвансов);
		ИначеЕсли Запасы.Количество() > 0 И ЗначениеЗаполнено(Запасы[0].Заказ) Тогда
			ТаблицаАвансов = ПолучитьТаблицуАвансовПоЗаказу(Запасы[0].Заказ);
			Предоплата.Загрузить(ТаблицаАвансов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказПокупателя()

// Процедура заполняет колонку Количество по резервам под заказ.
//
Процедура ЗаполнитьКолонкуРезервПоРезервам() Экспорт
	
	Если ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			СтрокаТабличнойЧасти.Ячейка = Ячейка;
		КонецЦикла;	
	КонецЕсли;
	
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "Резерв");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА &ЗаказВШапке
	|			ТОГДА &Заказ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|						И ТаблицаЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ТОГДА ТаблицаЗапасы.Заказ
	|				ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатурыЗапас";
	
	ТаблицаЗапасы = Запасы.Выгрузить();
	ТаблицаЗапасы.Колонки.Добавить("ТипНоменклатурыЗапас", Новый ОписаниеТипов("Булево"));
	Для Каждого ТекущаяСтрока Из ТаблицаЗапасы Цикл
		ТекущаяСтрока.ТипНоменклатурыЗапас = (ТекущаяСтрока.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
			Или ТекущаяСтрока.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	КонецЦикла;
	Запрос.УстановитьПараметр("ТаблицаЗапасы", ТаблицаЗапасы);
	ЗаказВШапке = ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	Запрос.УстановитьПараметр("ЗаказВШапке", ЗаказВШапке);
	Запрос.УстановитьПараметр("Заказ", ?(ЗначениеЗаполнено(Заказ), Заказ, Документы.ЗаказПокупателя.ПустаяСсылка()));
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		Если НЕ ЗаказВШапке Тогда
			СтруктураДляПоиска.Вставить("Заказ", Выборка.ЗаказПокупателя);
		КонецЕсли;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоРезервам()

// Заполняет документ чек ККМ в соответствии с отбором.
//
// Параметры
//  ДанныеЗаполнения - Структура со значениями отбора
//
Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("РМК") Тогда
		
		ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения);
		
	ИначеЕсли ДанныеЗаполнения.Свойство("КассаККМ") Тогда
		
		ЗаполнитьДокументПоКассеККМ(ДанныеЗаполнения.КассаККМ);
		ДанныеЗаполнения.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоОтбору()

// Добавляет дополнительные реквизиты, необходимые для проведения документа в
// переданную структуру.
//
// Параметры:
//  СтруктураДополнительныеСвойства - Структура дополнительных свойств документа.
//
Процедура ДобавитьРеквизитыВДополнительныеСвойстваДляПроведения(СтруктураДополнительныеСвойства)
	
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ЧекПробит", Статус = Перечисления.СтатусыЧековККМ.Пробит);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ТоварЗарезервирован", Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("Архивный", Архивный);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ОперацияСДенежнымиСредствами", ОперацияСДенежнымиСредствами);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ДвиженияПоЗапасамУдалять", ДвиженияПоЗапасамУдалять);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить(
		"КомиссияОбработана",
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("ОбработкаКомиссииЗавершена"));
	
КонецПроцедуры // ДобавитьРеквизитыВДополнительныеСвойстваДляПроведения()

// Наборы
Процедура ДобавитьОписаниеНабора(ПропускаемыеНаборы, НоменклатураНабора, ХарактеристикаНабора)
	
	Для каждого ОписаниеНабора Из ПропускаемыеНаборы Цикл
		Если ОписаниеНабора.НоменклатураНабора=НоменклатураНабора И ОписаниеНабора.ХарактеристикаНабора=ХарактеристикаНабора Тогда
			// Уже добавлено
			Возврат;
		КонецЕсли; 
	КонецЦикла; 	
	СтруктураНабора = Новый Структура;
	СтруктураНабора.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураНабора.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	ПропускаемыеНаборы.Добавить(СтруктураНабора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события При копировании.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	НомерЧекаККМ = 0;
	Телефон = "";
	АдресЭП = "";
	Архивный = Ложь;
	Статус = Перечисления.СтатусыЧековККМ.ЧекНеПробит;
	ДвиженияПоЗапасамУдалять = Ложь;
	СкидкиРассчитаны = Ложь;
	
	АкцизныеМарки.Очистить();
	
	// Очистим информацию о заказе покупателя.
	Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
	Для Каждого ТекущаяСтрока Из Запасы Цикл
		ТекущаяСтрока.Заказ = Заказ;
		ТекущаяСтрока.КодМаркировки = "";
	КонецЦикла;
	
	ПолученоНаличными = 0;
	БезналичнаяОплата.Очистить();
	Запасы.ЗагрузитьКолонку(Новый Массив, "КодМаркировки");

	СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СостояниеКассовойСмены);
	КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если БезналичнаяОплата.Итог("Сумма") > СуммаДокумента Тогда
		
		ТекстСообщения = НСтр("ru='Сумма безналичной оплаты превышает сумму документа'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "БезналичнаяОплата", , Отказ);
	
	КонецЕсли;  
	
	ТипКассыККМ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаККМ, "ТипКассы");
	Если ТипКассыККМ = Перечисления.ТипыКассККМ.АвтономнаяККМ Тогда 
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "КассоваяСмена");
		Если Не ДополнительныеСвойства.Свойство("НеПроверятьСмену") Тогда
			
			ДополнительныеСвойства.Вставить("НеПроверятьСмену", Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.Свойство("НеПроверятьСмену") Тогда
		
		ТекстСообщения = НСтр("ru='Кассовая смена не открыта'");
		
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Дата, ТекстСообщения) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "КассоваяСмена", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьЗаполненностьСтруктурнойЕдиницы(Отказ, ПроверяемыеРеквизиты);
	
	Если Не ОперацияСДенежнымиСредствами Тогда
		
		// Серии
		СерииНоменклатурыУНФ.ПроверкаЗаполненияСерийНоменклатуры(Отказ, Запасы, СерииНоменклатуры, СтруктурнаяЕдиница, ЭтотОбъект);
		
	КонецЕсли;
	
	// Наборы
	НаборыСервер.ПроверитьТабличнуюЧасть(ЭтотОбъект, "Запасы", Отказ);
	// КонецНаборы
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	
	// ПодарочныеСертификаты
	Если Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты.Получить() Тогда
		
		Если Не РаботаСПодарочнымиСертификатами.УказанКонтрагентДляПредоплаты() Тогда
			ТекстСообщения = НСтр(
				"ru = 'Не заполнена константа ""Служебный контрагент для подарочных сертификатов"".
				|Необходимо указать контрагента: Продажи - Еще больше возможностей.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		КонецЕсли;
		
		// Проверка срока и области действия подарочных сертификатов
		ВыполнитьПроверкуОграниченийСертификатов(Отказ);
		
	КонецЕсли;
	// Конец ПодарочныеСертификаты
	
	// Бонусы
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммы") Тогда
		Если Не БезналичнаяОплата.Найти(Перечисления.ВидыБезналичныхОплат.Бонусы, "ВидОплаты") = Неопределено Тогда
			
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("БезналичнаяОплата.Сумма"));
			
			Для Каждого СтрокаОплаты Из БезналичнаяОплата Цикл
				
				Если СтрокаОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Бонусы Тогда
					Если Не ЗначениеЗаполнено(СтрокаОплаты.СуммаБонусов) Тогда
						
						ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке №%1 не указана сумма оплаты.'"),
							СтрокаОплаты.НомерСтроки);
						КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("БезналичнаяОплата",
							СтрокаОплаты.НомерСтроки, "СуммаБонусов");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
						
					КонецЕсли;
				Иначе
					Если Не ЗначениеЗаполнено(СтрокаОплаты.Сумма) Тогда
						
						ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке №%1 не указана сумма оплаты.'"),
							СтрокаОплаты.НомерСтроки);
						КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("БезналичнаяОплата",
							СтрокаОплаты.НомерСтроки, "Сумма");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	// Конец Бонусы
	
	Если Не ОперацияСДенежнымиСредствами Тогда
		Если Предоплата.Количество() > 0 Тогда
			ПроверитьТоварныйСоставПредоплаты(Отказ);
		Иначе
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Курс");
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Кратность");
		КонецЕсли;
	КонецЕсли;
	
	// ИнтеграцияГосИС
	Если ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() 
		И КассаККМ.ТипКассы <> Перечисления.ТипыКассККМ.ККМED Тогда
		ИнтеграцияИСУНФ.ПроверитьЗаполнениеАкцизныхМарок(ЭтотОбъект, Отказ);
	КонецЕсли;
	// Конец ИнтеграцияГосИС
	
	// ++( ГосИС 1.1.1.12
	//Если ПолучитьФункциональнуюОпцию("ВестиУчетШинИПокрышек") Тогда
	//	Ошибки = Неопределено;
	//	Для каждого ТекСтрока Из Запасы Цикл
	//		Если ТекСтрока.Номенклатура.ШиныИПокрышки И НЕ ЗначениеЗаполнено(ТекСтрока.КодМаркировки) Тогда
	//			Шаблон = НСтр("ru='В строке %1 для %2 должен быть введен код маркировки.'");
	//			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//				Шаблон,
	//				ТекСтрока.НомерСтроки,
	//				ТекСтрока.Номенклатура);
	//			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
	//				Ошибки,
	//				"Объект.Товары[%1].Номенклатура",
	//				ТекстОшибки,
	//				"",
	//				ТекСтрока.НомерСтроки-1);
	//		КонецЕсли;
	//	КонецЦикла;
	//	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	//КонецЕсли;
	//)++
		
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") И
		ТипЗнч(ДанныеЗаполнения) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ДанныеЗаполнения = Справочники.КассыККМ.ПолучитьКассуККМПоУмолчанию();
	КонецЕсли;
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьДокументПоОтбору";
	СтратегияЗаполнения[Тип("СправочникСсылка.КассыККМ")] = "ЗаполнитьДокументПоКассеККМ";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения, "Контрагент, КассаККМ");
	
	ИнициализироватьДокумент();
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ПередЗаписью.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыЧековККМ.Пробит
	   И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
	   И НЕ КассаККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		ТекстСообщения = НСтр("ru='Чек ККМ пробит на фискальном регистраторе. Отмена проведения невозможна.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		
		Возврат;
		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
	   И КассаККМ.ИспользоватьБезПодключенияОборудования
	   И КассоваяСмена.Проведен
	   И КассоваяСмена.КассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Закрыта 
	   И (НомерЧекаККМ > 0 ИЛИ БезналичнаяОплата.Количество() > 0)
	   Тогда
		
		ТекстСообщения = НСтр("ru='Кассовая смена закрыта. Отмена проведения невозможна'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		
		Возврат;
		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		НомерЧекаККМ = 0;
		Статус = Неопределено;
	КонецЕсли;
	
	// Заказы покупателей в розничной торговле
	Если ПоложениеЗаказаПокупателя <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ЕстьЗаказы = НЕ Заказ.Пустая();
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.Заказ = ?(ЗначениеЗаполнено(Заказ), Заказ, Неопределено);
			Если НЕ ЕстьЗаказы Тогда
				СтрокаТабличнойЧасти.Резерв = 0;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЕстьЗаказы = Ложь;
		Заказ = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Запасы, "Заказ");
	КонецЕсли;
	
	Если НЕ ЕстьЗаказы Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			Если НЕ СтрокаТабличнойЧасти.Заказ.Пустая() Тогда
				ЕстьЗаказы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Конец Заказы покупателей в розничной торговле
	
	// Заполнение безналичной оплаты для старых документов
	Если БезналичнаяОплата.Количество() > 0 Тогда
		РаботаСПодарочнымиСертификатами.ПроверитьЗаполнитьБезналичнуюОплатуДокумента(ЭтотОбъект);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// До включения автоматических скидок будем считать, что скидки рассчитаны.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		СкидкиРассчитаны = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Взаиморасчеты
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства, Отказ, Ложь);
	
	ДобавитьРеквизитыВДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализация данных документа.
	Документы.ЧекККМ.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыНаСкладах", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДенежныеСредстваВКассахККМ", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетод", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыНераспределенные", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьДвижения("Продажи", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// ДисконтныеКарты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПродажиПоДисконтнымКартам", ТаблицыДляДвижений, Движения, Отказ);
	// АвтоматическиеСкидки
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПредоставленныеСкидки", ТаблицыДляДвижений, Движения, Отказ);
	// Эквайринг
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаПлатежнымиКартами", ТаблицыДляДвижений, Движения, Отказ);
	// Заказ покупателя в розничной торговле
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗаказыПокупателей", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПлатежныйКалендарь", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаСчетовИЗаказов", ТаблицыДляДвижений, Движения, Отказ);
	
	// Серии
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыГарантии", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДвиженияСерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	
	// Подарочные сертификаты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПодарочныеСертификаты", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаПодарочнымиСертификатами", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПокупателями", ТаблицыДляДвижений, Движения, Отказ);
	
	// Бонусы
	ПроведениеДокументовУНФ.ОтразитьДвижения("БонусныеБаллы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("НачисленияБонусныхБаллов", ТаблицыДляДвижений, Движения, Отказ);
	
	АссистентУправленияПриСрабатыванииСобытия();
	
	// Интеркампани
	ПроведениеДокументовУНФ.ОтразитьДвижения("РезервыТоваровОрганизаций", ТаблицыДляДвижений, Движения, Отказ);
	// Конец Интеркампани
	
	// Акцизные марки
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОстаткиАлкогольнойПродукцииЕГАИС", ТаблицыДляДвижений, Движения, Отказ);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Если КассаККМ.ТипКассы <> Перечисления.ТипыКассККМ.ККМED Тогда
		Документы.ЧекККМ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Если КассаККМ.ТипКассы <> Перечисления.ТипыКассККМ.ККМED Тогда
		Документы.ЧекККМ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполненностьСтруктурнойЕдиницы(Отказ, ПроверяемыеРеквизиты)
	
	Если ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ПроверяемыеРеквизиты.Добавить("СтруктурнаяЕдиница");
		Возврат;
	КонецЕсли;
		
	Для Каждого ТекСтрокаТЧ Из Запасы Цикл
		Если ТекСтрокаТЧ.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас
			И ТекСтрокаТЧ.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрокаТЧ.СтруктурнаяЕдиница) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена колонка ""Склад""  в строке %1 списка ""Запасы""'"),
			ТекСтрокаТЧ.НомерСтроки);
		КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", ТекСтрокаТЧ.НомерСтроки,
			"СтруктурнаяЕдиница");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоВводНаОснованииЗаказНаПродажу(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ВидОперацииЗаказаПокупателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ВидОперации");
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Основание")
		И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
		Тогда
		ВидОперацииЗаказаПокупателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Основание, "ВидОперации");
	КонецЕсли;
	
	Возврат ВидОперацииЗаказаПокупателя = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
	
КонецФункции

Процедура ВыполнитьПроверкуОграниченийСертификатов(Отказ)
	
	// Проверка срока действия
	РаботаСПодарочнымиСертификатами.ПроверитьСрокДействия(ЭтотОбъект, "Запасы", Отказ);
	РаботаСПодарочнымиСертификатами.ПроверитьСрокДействия(ЭтотОбъект, "БезналичнаяОплата", Отказ);
	
	// Проверка области действия
	СтруктураДляПроверки = Новый Структура;
	СтруктураДляПроверки.Вставить("Запасы", Запасы.Выгрузить(,"Номенклатура, Характеристика, Сумма"));
	СтруктураДляПроверки.Вставить("Сертификаты", БезналичнаяОплата.Выгрузить(
		Новый Структура("ВидОплаты", Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат),
		"ПодарочныйСертификат, Сумма"));
	РаботаСПодарочнымиСертификатами.ПроверитьОбластьДействияСертификатов(СтруктураДляПроверки, Отказ);
	
КонецПроцедуры

Процедура АссистентУправленияПриСрабатыванииСобытия()
	
	Если Не ДополнительныеСвойства.ДляПроведения.ЧекПробит Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		Возврат;
	КонецЕсли;
	
	Начислено = БонусныеБаллыКНачислению.Итог("КоличествоБонусныхБаллов");
	Списано   = БезналичнаяОплата.Итог("СуммаБонусов");
	
	ЕстьНачисление = Начислено <> 0;
	ЕстьСписание = Списано <> 0;
	
	Событие = Неопределено;
	Если ЕстьНачисление И ЕстьСписание Тогда
		Событие = "СписаниеНачислениеБонусовПриПродаже";
	ИначеЕсли ЕстьНачисление Тогда
		Событие = "НачислениеБонусовПриПродаже";
	ИначеЕсли ЕстьСписание Тогда
		Событие = "СписаниеБонусовПриПродаже";
	КонецЕсли;
	
	Если Событие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Начислено", Начислено);
	ПараметрыСообщения.Вставить("Списано", Списано);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыСообщения", ПараметрыСообщения);
	
	АссистентУправления.ПриСрабатыванииСобытия(ДисконтнаяКарта, Событие, Ссылка, ДополнительныеПараметры);
	
КонецПроцедуры

Функция ПолучитьТаблицуАвансовПоЗаказу(ПараметрЗаказ)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаРегОстаток) КАК СуммаРегОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателямиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРегОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ = &Заказ
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПокупателями.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|		И ДвиженияДокументаРасчетыСПокупателями.Заказ = &Заказ) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРег) КАК СуммаРег,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРег, 0) = 0
	|				ТОГДА РасчетыСПокупателямиОстатки.СуммаУчета / ВЫБОР
	|						КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|							ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|						ИНАЧЕ 1
	|					КОНЕЦ * (КурсыВалютыУчета.Курс / КурсыВалютыУчета.Кратность)
	|			ИНАЧЕ РасчетыСПокупателямиОстатки.СуммаРег / ВЫБОР
	|					КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|						ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК Курс,
	|	1 КАК Кратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * КурсыВалютыДокумента.Кратность / (КурсыВалютыДокумента.Курс * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРег
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПокупателямиОстатки КАК РасчетыСПокупателямиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаДокумента) КАК КурсыВалютыДокумента
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПокупателямиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	КурсыВалютыУчета.Курс,
	|	КурсыВалютыУчета.Кратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Заказ", ПараметрЗаказ);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ВалютаРасчетов", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	РезультатТЗ = Результат.Выгрузить();
	
	Возврат РезультатТЗ;
	
КонецФункции

Процедура ПроверитьТоварныйСоставПредоплаты(Отказ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	Запасы.Количество КАК Количество,
	|	Запасы.Всего КАК Всего
	|ПОМЕСТИТЬ ВТ_Запасы
	|ИЗ
	|	&Запасы КАК Запасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Запасы.Номенклатура КАК Номенклатура,
	|	ВТ_Запасы.Характеристика КАК Характеристика,
	|	-ВТ_Запасы.Количество КАК Количество,
	|	-ВТ_Запасы.Всего КАК Всего
	|ИЗ
	|	ВТ_Запасы КАК ВТ_Запасы");
	Запрос.УстановитьПараметр("Запасы", Запасы);
	ТаблицаЗапасы = Запрос.Выполнить().Выгрузить();
	
	МассивОтличающихсяЧеков = Новый Массив;
	Для Каждого СтрокаПредоплаты Из Предоплата Цикл
		
		Если ТипЗнч(СтрокаПредоплаты.Документ) <> Тип("ДокументСсылка.ЧекККМ") Тогда
			Продолжить;
		КонецЕсли;
			
		Если СтрокаПредоплаты.Документ.Запасы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
			
		ТаблицаЧекаПредоплаты = СтрокаПредоплаты.Документ.Запасы.Выгрузить(, "Номенклатура, Характеристика, Количество, Всего");
		
		ТаблицаСравнения = ТаблицаЗапасы.Скопировать();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЧекаПредоплаты, ТаблицаСравнения);
		
		ТаблицаСравнения.Свернуть("Номенклатура, Характеристика", "Количество, Всего");
		
		// По заказу чек отгрузки может отличаться от чека предоплаты
		// потому что состав отгружаемых товаров контролируется заказом
		Если ЗначениеЗаполнено(Заказ) Тогда
			
			Если ТаблицаСравнения.Итог("Количество") < 0
				ИЛИ ТаблицаСравнения.Итог("Всего") < 0 Тогда
				МассивОтличающихсяЧеков.Добавить(СтрокаПредоплаты.Документ);
			КонецЕсли;
			
		Иначе
			
			Если ТаблицаСравнения.Итог("Количество") <> 0
				ИЛИ ТаблицаСравнения.Итог("Всего") <> 0 Тогда
				МассивОтличающихсяЧеков.Добавить(СтрокаПредоплаты.Документ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСообщения = "";
	Для Каждого ЭлементМассива Из МассивОтличающихсяЧеков Цикл
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Товарный состав документа предоплаты %1 отличается от текущего.'"),
			ЭлементМассива);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстСообщения)
		И Не ЗначениеЗаполнено(Заказ) Тогда
		
		ТекстСообщения = НСтр(
			"ru = 'Для возможности частичной отгрузки по предоплате, оформляйте чеки на основании заказа покупателя.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктурнуюЕдиницуПоЗаказу(ДанныеЗаполнения, СтруктурнаяЕдиницаЗаказа)
	
	Если Не ДанныеЗаполнения.Свойство("ДоступныеСклады") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктурнаяЕдиницаЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктурнаяЕдиницаЗаказа = СтруктурнаяЕдиница Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ДоступныеСклады.НайтиПоЗначению(СтруктурнаяЕдиницаЗаказа) <> Неопределено Тогда
		СтруктурнаяЕдиница = СтруктурнаяЕдиницаЗаказа;
		СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Организация, СтруктурнаяЕдиница, Дата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли