#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПриСозданииНаСервере формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимПросмотра = Не ПравоДоступа("Редактирование", Метаданные.Документы.ЧекККМ);
	
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	
	КэшЗначений.Вставить("ИспользоватьМинимальныеЦены", ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются());
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");

	УстановитьУсловноеОформлениеФормы();
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Контрагент = Объект.Контрагент;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПолучитьСписокВыбораВидовПлатежныхКарт();
		ОбновитьТипНоменклатурыЗапас();
	КонецЕсли;
	
	// Наборы
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Параметры.ЗначенияЗаполнения.Свойство("Запасы") Тогда
			Для каждого ДанныеСтроки Из Параметры.ЗначенияЗаполнения.Запасы Цикл
				Если ДанныеСтроки.Свойство("ЭтоНабор") И ДанныеСтроки.ЭтоНабор Тогда
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
					Если ДанныеСтроки.Свойство("Характеристика") И ЗначениеЗаполнено(ДанныеСтроки.Характеристика) Тогда
						СтруктураОтбора.Вставить("Характеристика", ДанныеСтроки.Характеристика);
					КонецЕсли;
					Строки = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
					Для каждого СтрокаНабора Из Строки Цикл
						СтруктураДанные = Новый Структура;
						СтруктураДанные.Вставить("Организация", Объект.Организация);
						СтруктураДанные.Вставить("Номенклатура", СтрокаНабора.Номенклатура);
						СтруктураДанные.Вставить("Характеристика", СтрокаНабора.Характеристика);
						СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
						Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
							СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
							СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
							СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
							СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
							СтруктураДанные.Вставить("Коэффициент", 1);
							СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
						КонецЕсли;
						// ДисконтныеКарты
						СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
						СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
						// Конец ДисконтныеКарты   
						
						ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаНабора, СтруктураДанные);

						СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
						Если НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
							ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаНабора, СтруктураДанные);
						КонецЕсли;
						Если СтруктураДанные.Свойство("Склад") Тогда
							Если СписокДоступныхСкладов.НайтиПоЗначению(СтруктураДанные.Склад) = Неопределено Тогда
								СтруктураДанные.Склад = Объект.СтруктурнаяЕдиница;
								СтруктураДанные.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
							КонецЕсли;
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
		ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
		ОбновитьПризнакиНабора(Объект.Запасы);
	КонецЕсли;
	// Конец Наборы
	
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПолучитьСсылкиНаОборудование();
	Иначе
		УстановитьВидимостьИДоступность();
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	
	КонтрольНаСкладеОтключен = НЕ Константы.КонтролироватьОстаткиПриПроведении.Получить()
						   ИЛИ НЕ Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить();
	Элементы.Зарезервировать.Видимость = НЕ КонтрольНаСкладеОтключен;
	Элементы.СнятьРезервирование.Видимость = НЕ КонтрольНаСкладеОтключен;
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДокумента));
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Константы.НациональнаяВалюта.Получить()));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Если ЗначениеЗаполнено(Объект.Заказ) Тогда
			ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
			ПроверитьВалютуДокументаОснования(Истина);
		Иначе
			Объект.НалогообложениеНДС = Неопределено;
			ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
		КонецЕсли;
		Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
		Если Объект.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН Тогда
			ЗаполнитьПатент();
		КонецЕсли;
	КонецЕсли;
	УстановитьВидимостьПоНалогообложению();
	
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	
	ИспользоватьАгентскиеПлатежиИРазделениеВыручки = ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки");
	
	КассаККМИспользоватьБезПодключенияОборудования = Объект.КассаККМ.ИспользоватьБезПодключенияОборудования;
	
	ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСУНФВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС();
	ИспользуетсяМаркировкаТабачнойПродукции = ИнтеграцияИСМПВызовСервера.ВестиУчетМаркируемойПродукции(Перечисления.ВидыПродукцииИС.Табак);
	ИспользуетсяМаркировкаОбуви = ИнтеграцияИСМПВызовСервера.ВестиУчетМаркируемойПродукции(Перечисления.ВидыПродукцииИС.Обувь);
	ИспользуетсяМаркировкаШинИПокрышек = ПолучитьФункциональнуюОпцию("ВестиУчетШинИПокрышек");
	
	УстановитьДоступностьПечатиЧека();
	
	УстановитьДоступностьОплаты();
	
	Если Объект.Статус = Перечисления.СтатусыЧековККМ.Пробит Тогда
		УстановитьРежимТолькоПросмотр();
	КонецЕсли;
	
	Элементы.ЗапасыСуммаСкидкиНаценки.Видимость = Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить();
	
	РаботаСФормойДокумента.НастроитьГруппуЦеныИВалюты(ЭтотОбъект);
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	Элементы.ЗапасыЦена.ТолькоПросмотр 					= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСумма.ТолькоПросмотр 				= НЕ РазрешеноРедактированиеЦенДокументов; 
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаСкидкиНаценки.ТолькоПросмотр 	= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр 				= НЕ РазрешеноРедактированиеЦенДокументов;
	
	РаботаСФормойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	ЗаголовокСуммаЧека = НСтр("ru='Сумма чека (%Валюта%)'");
	ЗаголовокСуммаЧека = СтрЗаменить(ЗаголовокСуммаЧека, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.СуммаДокумента.Подсказка = ЗаголовокСуммаЧека;
	
	ЗаголовокПолученоНаличными = НСтр("ru='Получено наличными (%Валюта%)'");
	ЗаголовокПолученоНаличными = СтрЗаменить(ЗаголовокПолученоНаличными, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.ПолученоНаличными.Подсказка = ЗаголовокПолученоНаличными;
	
	ЗаголовокОплатаПлатежнымиКартами = НСтр("ru='Платежными картами (%Валюта%)'");
	ЗаголовокОплатаПлатежнымиКартами = СтрЗаменить(ЗаголовокОплатаПлатежнымиКартами, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.ОплатаПлатежнымиКартамиИтогСумма.Подсказка = ЗаголовокОплатаПлатежнымиКартами;
	
	ЗаголовокЗачтенаПредоплата = НСтр("ru='Зачтена предоплата (%Валюта%)'");
	ЗаголовокЗачтенаПредоплата = СтрЗаменить(ЗаголовокЗачтенаПредоплата, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.ПредоплатаИтогСуммаПлатежа.Подсказка = ЗаголовокЗачтенаПредоплата;
	
	ЗаголовокСуммаСдачи = НСтр("ru='Сдача (%Валюта%)'");
	ЗаголовокСуммаСдачи = СтрЗаменить(ЗаголовокСуммаСдачи, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.СуммаСдачи.Подсказка = ЗаголовокСуммаСдачи;

	// Заказы покупателей в Рознице
	ПоложениеРеквизитаНаФормеВШапке = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке");
	РезервироватьЗапасыИИспользоватьЗаказы = (ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") И ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	Элементы.ЗапасыИзменитьРезерв.Видимость = РезервироватьЗапасыИИспользоватьЗаказы;
	Элементы.ЗапасыРезерв.Видимость = РезервироватьЗапасыИИспользоватьЗаказы;
	
	Если РезервироватьЗапасыИИспользоватьЗаказы Тогда
		Элементы.Зарезервировать.Заголовок = НСтр("ru = 'Провести'");
		Элементы.СнятьРезервирование.Заголовок = НСтр("ru = 'Отмена проведения'");
		Элементы.СнятьРезервирование.ТолькоВоВсехДействиях = Истина;
	Иначе
		Элементы.Зарезервировать.Заголовок = НСтр("ru = 'Зарезервировать'");
		Элементы.СнятьРезервирование.Заголовок = НСтр("ru = 'Снять резерв'");
		Элементы.СнятьРезервирование.ТолькоВоВсехДействиях = Ложь;
	КонецЕсли;
	
	// Дисконтные карты
	УстановитьВидимостьЭлементаКонтрагент();
	ОбновитьКартинкуДисконтнойКарты();
	// Конец. Дисконтные карты
	
	УстановитьВидимостьОтправкиЭлектронныхЧеков();
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Справочники.Контрагенты.ДанныеКИКонтрагентаДляВыбораНаФорме(Объект.Контрагент, Элементы, ПоляКИДляОтправкиЧека());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СпециальныйНалоговыйРежим) Тогда
		Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
		Если Объект.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН Тогда
			ЗаполнитьПатент();
		КонецЕсли;
	КонецЕсли;
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, Объект.ВалютаДокумента, Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.СпециальныйНалоговыйРежим, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	// Установка видимости реквизитов от пользовательских настроек
	УстановитьВидимостьОтПользовательскихНастроек(); 
	// Конец. Заказы покупателей в Рознице
	
	// СтруктурнаяЕдиница - пустой быть не может
	ТипСтруктурнойЕдиницы = Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы;
	
	// АвтоматическиеСкидки.
	АвтоматическиеСкидкиПриСозданииНаСервере();
	
	// СтандартныеПодсистемы.Печать
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	
	// Подарочные сертификаты
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПоискПоШтрихкоду",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты"));
	
	// Заполнение безналичной оплаты для старых документов
	Если ЗначениеЗаполнено(Объект.Ссылка) И Объект.БезналичнаяОплата.Количество() > 0 Тогда
		РаботаСПодарочнымиСертификатами.ПроверитьЗаполнитьБезналичнуюОплатуДокумента(Объект);
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая()
		Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина)
	КонецЕсли;
	
	УстановитьВидимостьДоговора();
	
	// Бонусы
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СтраницаБонусы",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммы")
	);
	
	// Взаиморасчеты
	ВариантЗаполненияРасшифровкиПросмотр = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Просмотр");
	ВариантЗаполненияРасшифровкиВручную = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Вручную");
	ВзаиморасчетыПриСозданииНаСервере();
	
	НастроитьЭлементыПоВидуКлиента();
	
	РезервированиеЗапасов= ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	Элементы.ОстаткиИРезервы.Доступность = Не ЭтаФорма.ТолькоПросмотр;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		СтруктурнаяЕдиницаККМ = Объект.КассаККМ.СтруктурнаяЕдиница;
	КонецЕсли;
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЧекККМ", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	
	ТребуетсяПроверкаКассираПриСменеОтветственного = ТребуетсяПроверкаКассираПриСменеОтветственного();
	УстановитьВидимостьПредупрежденияОКассире();
	
	НастроитьЭлементыСтруктурныхЕдиниц();
	
	// ИнтеграцияГосИС
	ФОВестиУчетМаркируемойПродукцииИСМП = ИнтеграцияИСМПВызовСервера.ВестиУчетМаркируемойПродукции();
	ДобавитьКолонкуКоличествоВБазовыхЕдиницахГосИС();
	СобытияФормИС.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура);
	ШтрихкодированиеИС.ИнициализироватьКэшМаркируемойПродукции(ЭтаФорма);
	ИнициализироватьКэшСтрок(Элементы.Запасы);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
	// Конец ИнтеграцияГосИС
	
	// ШиныИПокрышки
	Если ИспользуетсяМаркировкаШинИПокрышек
		И Элементы.Найти("ЗапасыСтатусПроверкиГосИС") = Неопределено Тогда
		Элементы.ЗапасыИндексАкцизнойМарки.Видимость = Истина;
		Для каждого ТекСтрока Из Объект.Запасы Цикл
			ЗаполнитьИндексАкцизнойМарки(ТекСтрока);
		КонецЦикла;
	Иначе
		Элементы.ЗапасыИндексАкцизнойМарки.Видимость = Ложь;
	КонецЕсли;
	// Конец ШиныИПокрышки
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	РазрешитьСкладыВТабличныхЧастях = ПолучитьФункциональнуюОпцию("РазрешитьСкладыВТабличныхЧастях");
	
	// Ячейки
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КэшЗначений.Вставить("УчетПоЯчейкам", ПолучитьФункциональнуюОпцию("УчетПоЯчейкам"));
		ОбновитьДоступностьЯчеек();
		ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	КонецЕсли; 
	// Конец Ячейки
	
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		АгентскиеПлатежиУНФ.УправлениеЭлементамиАгентскогоВознаграждения(ЭтотОбъект, Объект);
	КонецЕсли;
	
	УстановитьВидимостьДанныхПоДоставке();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	
	УстановитьДоступностьПечатиЧека();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы); 
	ОбновитьПризнакиНабора(Объект.Запасы);
	// Конец Наборы
	
	// Ячейки
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("УчетПоЯчейкам", ПолучитьФункциональнуюОпцию("УчетПоЯчейкам"));
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	// Признак ЭтоЗапас
	ОбновитьТипНоменклатурыЗапас();
	
	// Обновим реквизиты формы
	ЭтотОбъект.Контрагент = Объект.Контрагент;
	
	// ИнтеграцияГосИС
	ДобавитьКолонкуКоличествоВБазовыхЕдиницахГосИС();
	СобытияФормИС.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец ИнтеграцияГосИС
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПриОткрытии формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ГосИС 1.1.1.12
	Если ИнтеграцияИСУНФВызовСервера.НеобходимоЗавершитьЗаполнениеРеквизитаВидПродукцииИС() Тогда
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
		Оповещение = Новый ОписаниеОповещения("НеобходимоЗавершитьЗаполнениеРеквизитаВидПродукцииИС_ПослеЗакрытияВопроса", ИнтеграцияИСУНФКлиент, ДополнительныеПараметры);
		ТекстВопроса = "В фоновом режиме выполняется обработка данных о маркируемых товарах. Розничная торговля будет доступна после завершения обработки.";
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ПодождатьЗавершенияОбработки", "Подождать завершения обработки");
		Кнопки.Добавить("ВыполнитьОбработкуСейчас", "Выполнить обработку сейчас (может занять длительное время, работа в программе будет невозможна)");
		ЗаголовокВопроса = "Выполняется обработка данных о маркируемой продукции";
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки,,, ЗаголовокВопроса);
		
	КонецЕсли;
	// Конец ГосИС 1.1.1.12
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода,ДисплейПокупателя");
	// Конец ПодключаемоеОборудование
	
	//ЗаполнитьСуммыСкидок();
	
	ПересчитатьДокументНаКлиенте();
	
	УправлениеНебольшойФирмойКлиент.ЗаполнитьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	
	Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("ФункциональнаяОпцияИспользоватьПредоплатуВЧекахККМ") Тогда
		УправлениеЭлементамиИОплатойПриИзмененииОперацииСДС();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьТаблицуБезналичныхОплат();
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	
	НастроитьЭлементыЯчеек();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ПередЗаписьюНаСервере формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ИспользоватьРежимПроведения = ИспользованиеРежимаПроведения.Неоперативный;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПредоплатуВЧекахККМ") Тогда
			ТекстСообщения = "";
			Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
				ТекстСообщения,
				Объект.Договор,
				Объект.Ссылка,
				Объект.Организация,
				Объект.Контрагент,
				Отказ);
		
			Если ТекстСообщения <> "" Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Если Отказ Тогда
					Сообщение.Текст = СтрШаблон(НСтр("ru = 'Документ не проведен. %1'"), ТекстСообщения);
				Иначе
					Сообщение.Текст = ТекстСообщения;
				КонецЕсли;
				
				Если Отказ Тогда
					Сообщение.ПутьКДанным = "Объект";
					Сообщение.Поле = "Договор";
					Сообщение.Сообщить();
					Возврат;
				Иначе
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

// Процедура - обработчик события ПриЗакрытии формы.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// АвтоматическиеСкидки
	СкидкиНаценкиКлиент.ПриЗакрытииФормы(Объект.Ссылка, ИспользоватьАвтоматическиеСкидки, СкидкиРассчитаныПередЗаписью);
	// Конец АвтоматическиеСкидки
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьАвтоматическиеСкидкиПередЗаписью()
	
	// АвтоматическиеСкидки
	СкидкиРассчитаныПередЗаписью = Ложь;
	// Если документ проводится, проверим рассчитанность скидок.
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЧекККМ_РассчитатьСкидкиНаценкиКлиент", Истина, Ложь);
			РассчитатьСкидкиНаценкиКлиент();
			ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
			РассчиталиСкидки = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Рассчитаны автоматические скидки (наценки).'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			
			СкидкиРассчитаныПередЗаписью = Истина;
		Иначе
			Объект.СкидкиРассчитаны = Истина;
			ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Истина;
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		КонецЕсли;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

// Процедура обработчик события ПередЗаписью.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПроверитьПоложениеЗаказа(Отказ);
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП, Истина);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("ЧекККМ_Проведение_"+Объект.Запасы.Количество()+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	// АвтоматическиеСкидки
	РассчитатьАвтоматическиеСкидкиПередЗаписью();
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере формы.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьТаблицуБезналичныхОплат();
	
	// АвтоматическиеСкидки
	Если ОбновитьКартинкуАвтоСкидкиПослеЗаписи Тогда
		//Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Ложь;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Наборы
	ОбновитьПризнакиНабора(Объект.Запасы);	
	// Конец Наборы
	
	// Признак ЭтоЗапас
	ОбновитьТипНоменклатурыЗапас();
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");

	// ИнтеграцияГосИС
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтаФорма);
	// Конец ИнтеграцияГосИС
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		АгентскиеПлатежиУНФ.УправлениеЭлементамиАгентскогоВознаграждения(ЭтотОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи формы.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	// АвтоматическиеСкидки
	Если СкидкиРассчитаныПередЗаписью Тогда
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	ЗаполненЗаказ = Ложь;
	Для каждого СтрокаТЧ Из Объект.Запасы Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Заказ) Тогда
			ЗаполненЗаказ = Истина;
			Прервать;
		КонецЕсли;		
	КонецЦикла;	
	
	Если ЗаполненЗаказ Тогда
		Оповестить("Запись_ЧекККМ_с_ЗаказомПокупателя", Новый Структура("Ссылка, Номер, Дата", Объект.Ссылка, Объект.Номер, Объект.Дата));
	КонецЕсли;
	
	Оповестить("ОбновитьФормуСпискаДокументовЧекККМ");
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы); 
	// Конец Наборы
	
КонецПроцедуры // ПослеЗаписи()

// ИнтеграцияГосИС
&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)

	ДополнительныеПараметры = Новый Структура("ИмяСобытия, Параметр, Источник", ИмяСобытия, Параметр, Источник);
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Событие", ДополнительныеПараметры);

КонецПроцедуры
// Конец ИнтеграцияГосИС

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшированныеЗначения",    КэшированныеЗначения);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка",    Истина);
	ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов", Ложь);
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	КэшированныеЗначения = ДополнительныеПараметры.КэшированныеЗначения;
	Если ДополнительныеПараметры.ТребуетсяСерверныйВызов Тогда
		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	Если СтрНачинаетсяС(ИмяСобытия, "ЗакрытиеФормыПроверкиИПодбораГосИС") Тогда
		ИндексВидаПродукции     = Число(СтрЗаменить(ИмяСобытия, "ЗакрытиеФормыПроверкиИПодбораГосИС", ""));
		ВидМаркируемойПродукции = ИнтеграцияИСКлиентСервер.ИндексВидаПродукцииИС(ИндексВидаПродукции);
		РассчитатьСуммыВСтрокахТабличнойЧастиПоВидуМаркируемойПродукции(ВидМаркируемойПродукции);
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	Если Не ДополнительныеПараметры.СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	// Конец ИнтеграцияГосИС
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() И Не СчитанаДисконтнаяКарта Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Штрихкод = Параметр[0];
			Иначе
				Штрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			Данные.Добавить(Новый Структура("Штрихкод, Количество", Штрихкод, 1));
			
			Если Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаБезналичнаяОплата" Тогда
				ПоискСертификатаПоНомеруЗавершение(Данные[0].Штрихкод, Новый Структура("ТекНомер", Данные[0].Штрихкод));
			Иначе
				ПолученыШтрихкоды(Данные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ДисконтныеКарты
	Если СчитанаДисконтнаяКарта Тогда
		СчитанаДисконтнаяКарта = Ложь;
	КонецЕсли;
	// Конец ДисконтныеКарты
	
	Если ИмяСобытия = "ОбновитьФормуСпискаДокументовЧекККМ" Тогда
		
		Для каждого ТекСтрока Из Объект.Запасы Цикл
			
			ТекСтрока.СуммаСкидкиНаценки = ТекСтрока.Цена * ТекСтрока.Количество - ТекСтрока.Сумма - ТекСтрока.СуммаАвтоматическойСкидки - ТекСтрока.СуммаСкидкиОплатыБонусом;
			
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", Истина, Истина);
		
		ПересчитатьДокументНаКлиенте();
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Если ИзменилосьКоличество Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти();
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "ПослеЗаписи_ВидыДисконтныхКарт" Тогда
		
		УстановитьВидимостьЭлементаКонтрагент();
		
	КонецЕсли;
		
	// Наборы
	Если НаборыКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ОбновитьСоставНабора(Параметр.НоменклатураНабора, Параметр.ХарактеристикаНабора, Параметр.Количество, 
			Параметр.Цена, Параметр.СоставНабора);
		ПересчитатьДокументНаКлиенте();
		//Ячейки
		ОбновитьДоступностьЯчеек();
		ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
		// Конец Ячейки
	КонецЕсли;
	// Конец Наборы
	
	Если ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		УстановитьВидимостьДоговора();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьСписокЗаказовНаДоставку" Тогда
		УстановитьВидимостьДанныхПоДоставке();
	КонецЕсли;
	
КонецПроцедуры

// ИнтеграцияГосИС
&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец ИнтеграцияГосИС

#КонецОбласти

#Область ДействияКомандныхПанелейФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура осуществляет вывод информации на дисплей покупателя.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя()



	ДПТекст = ?(
		Элементы.Запасы.ТекущиеДанные = Неопределено,
		"",
		СокрЛП(Элементы.Запасы.ТекущиеДанные.Номенклатура)
	  + Символы.ПС
	  + НСтр("ru='Итого: '")
	  + Формат(Объект.СуммаДокумента, "ЧДЦ=2; ЧРГ=' '; ЧН=0")
	);
	
	ИдентификаторУстройства = Неопределено; // Если ИдентификаторУстройства = Неопределено, будут очищены все подключенные дисплеи покупателя.
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыводТекстаНаДисплейПокупателяЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыводИнформацииНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, ДПТекст);
	
КонецПроцедуры // ВывестиИнформациюНаДисплейПокупателя()

&НаКлиенте
Процедура ВыводТекстаНаДисплейПокупателяЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр(
				"ru = 'При использовании дисплея покупателя произошла ошибка.
				|Дополнительное описание:
				|%ДополнительноеОписание%'"
			);
			ТекстСообщения = СтрЗаменить(
				ТекстСообщения,
				"%ДополнительноеОписание%",
				РезультатВыполнения.ОписаниеОшибки
			);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
	КонецЕсли;
	
КонецПроцедуры

// ПодключаемоеОборудование
// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	// Поиск подарочного сертификата
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаБезналичнаяОплата" Тогда
		ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискСертификатаПоНомеруЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод));
	Иначе
		ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод));
	КонецЕсли;
	
	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду",,,,,,ОбработкаЗавершения);
	#Иначе
		//ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
		ОткрытьФорму(
			"Документ.ЧекККМ.Форма.ФормаВводаШтрихкода",
			Новый Структура("ТекШтрихкод", ТекШтрихкод),,,,,
			ОбработкаЗавершения);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("Штрихкод") Тогда
			ТекШтрихкод = Результат.Штрихкод;
		Иначе
			ТекШтрихкод = "";
		КонецЕсли;
	ИначеЕсли Результат <> Неопределено Тогда
		ТекШтрихкод = Результат;
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ТекШтрихкод") Тогда
		ТекШтрихкод = ДополнительныеПараметры.ТекШтрихкод;
	Иначе
		ТекШтрихкод = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ТекШтрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	Данные = Новый Массив();
	Данные.Добавить(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1)); 
	
	ПолученыШтрихкоды(Данные);
	
КонецПроцедуры // ПоискПоШтрихкоду()

// Процедура - обработчик события Действие команды ПолучитьВес
//
&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	ЗапасыПриОкончанииРедактирования(Элементы.Запасы, Ложь, Ложь);
	
КонецПроцедуры

// Процедура - обработчик команды ЗагрузитьДанныеИзТСД.
//
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

// Процедура отмена пробития чека если оборудование не подключено.
//
&НаКлиенте
Процедура ОтменитьПробитиеЧека()
	
	РезультатПроведения = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	Если РезультатПроведения = Истина Тогда
		ОтменитьРежимТолькоПросмотр();
	КонецЕсли;
	
КонецПроцедуры // ОтменитьПробитиеЧека()

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено)
	
	ОбщиеПараметры = Документы.ЧекККМ.ПодготовитьДанныеДляПробитияЧека(Объект, Объект.Ссылка, ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС);
	Возврат ОбщиеПараметры;
	
КонецФункции

// Процедура печати чека на фискальном регистраторе.
//
&НаКлиенте
Процедура ПробитьЧек()
	
	ОписаниеОшибки = "";
	
	Если Объект.НомерЧекаККМ <> 0
	И НЕ КассаККМИспользоватьБезПодключенияОборудования Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПоказыватьПредупреждение = Ложь;
	ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЧекККМ_ПроверкаВозможностиПечатиЧека_"+Объект.Запасы.Количество(), Истина, Ложь);
	Если ПечатьДокументовУНФКлиент.ПечатьЧекаНевозможна(ЭтотОбъект, ПоказыватьПредупреждение, Истина) Тогда
		Если ПоказыватьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Не удалось выполнить проведение документа'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	
	Если НЕ ИспользоватьПодключаемоеОборудование 
		ИЛИ КассаККМИспользоватьБезПодключенияОборудования Тогда
		// Внешнее оборудование не используется
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		РезультатПроведения = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатПроведения = Истина Тогда
			УстановитьРежимТолькоПросмотр();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
		
	ИдентификаторУстройстваФР = ?(ЗначениеЗаполнено(ФискальныйРегистратор),
		ФискальныйРегистратор,
		Неопределено);
	
	Если ИдентификаторУстройстваФР <> Неопределено Тогда
		
		ЭтотОбъект.Доступность = Ложь;
		
		// Готовим данные
		ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено;
		ТранспортныйМодуль = Неопределено;
		ДанныеЕГАИСДостаточны = Ложь;
		
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЧекККМ_ПодготовитьДанныеДляПробития_"+Объект.Запасы.Количество(), Истина, Ложь);
		ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС);
		ОбщиеПараметры.ДатаВремя = ТекущаяДата();
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
		
		Если ЕстьАлкогольнаяПродукцияЕГАИС И НЕ ДанныеЕГАИСДостаточны Тогда
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбщиеПараметры", ОбщиеПараметры);
		ДополнительныеПараметры.Вставить("ЕстьАлкогольнаяПродукцияЕГАИС", ЕстьАлкогольнаяПродукцияЕГАИС);
		ДополнительныеПараметры.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
		ДополнительныеПараметры.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
		ДополнительныеПараметры.Вставить("АдресТорговогоОбъекта", ОбщиеПараметры.АдресМагазина);
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьКодМаркировкиСредствамиККТЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		РозничныеПродажиКлиент.ПроверитьКодМаркировкиСредствамиККТ(ОбщиеПараметры, ЭтотОбъект, НСтр("ru = 'Пробить чек'"), ОповещениеОЗавершении);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // ПробитьЧек()

&НаКлиенте
Процедура ПроверитьКодМаркировкиСредствамиККТЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ШтрихкодированиеИСМПКлиент.РезультатПроверкиСредствамиККТТребуетФискализации(Результат)
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбщиеПараметры") Тогда
		
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЧекККМ_ФискализацияЧекаНаУстройстве_"+Объект.Запасы.Количество(), Истина, Ложь);
		ДополнительныеПараметры.Вставить("ИДЗамера", ИДЗамера);
		
		Оповещение            = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека", ЭтотОбъект, ДополнительныеПараметры);
		ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, ДополнительныеПараметры);
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
			Оповещение,
			УникальныйИдентификатор,
			ДополнительныеПараметры.ОбщиеПараметры,
			ДополнительныеПараметры.ИдентификаторУстройстваФР,
			,
			ПослеОткрытияЧека,
			ПослеОшибкиПечатиЧека);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены",    НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека",     НомерЧека);
		ПараметрыОперации.Вставить("АдресТорговогоОбъекта", ДополнительныеПараметры.АдресТорговогоОбъекта);
		ПараметрыОперации.Вставить("СерийныйНомер", "");
		Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
			ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыОперации.СерийныйНомер) Тогда
			ПараметрыОперации.СерийныйНомер = "1";
		КонецЕсли;
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"),
			ПараметрыОперации,
			Новый ОписаниеОповещения("ПослеПередачиЧекаЕГАИС", ЭтотОбъект, ПараметрыВыполнения));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт

	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	Попытка
		ШапкаЧека.НомерЧека = ШапкаЧека.НомерЧека + 1000000;
	Исключение
		ШапкаЧека.НомерЧека = 1000000;
	КонецПопытки;
	
	Если ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств") Тогда
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
	Иначе
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены",    НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека",     НомерЧека + 1000000);
		ПараметрыОперации.Вставить("АдресТорговогоОбъекта", ДополнительныеПараметры.АдресТорговогоОбъекта);
		ПараметрыОперации.Вставить("СерийныйНомер", "");
		Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
			ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыОперации.СерийныйНомер) Тогда
			ПараметрыОперации.СерийныйНомер = "1";
		КонецЕсли;
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию"),
			ПараметрыОперации,
			Новый ОписаниеОповещения("ПослеПередачиОтменыЧекаЕГАИС", ЭтотОбъект, ПараметрыВыполнения));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("ru = 'В процессе передачи данных в ЕГАИС возникли ошибки:'"));
	КонецЕсли;
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	ПараметрыВыполнения.ПродолжитьПечать = Не ЕстьОшибки;
	ПараметрыВыполнения.ОписаниеОшибки   = ОписаниеОшибки;
	
	ПараметрыВыполнения.Вставить("АдресЧека",   Изменения[0].ИдентификаторЗапроса);
	ПараметрыВыполнения.Вставить("ПодписьЧека", Изменения[0].Подпись);
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПередачиОтменыЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("ru = 'В процессе передачи данных в ЕГАИС возникли ошибки:'"));
	КонецЕсли;
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(Параметры.ИДЗамера, Ложь);
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если РезультатВыполнения.ВыходныеПараметры <> Неопределено Тогда
			Объект.НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		КонецЕсли;
		
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЧекККМ_ЗаписьЧекаВПробитьЧекЗавершение_"+Объект.Запасы.Количество(), Истина, Ложь);
		РезультатПроведения = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
		
		Если РезультатПроведения Тогда
			УстановитьРежимТолькоПросмотр();
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр(
			"ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном регистраторе.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки
		);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки НапечататьЧек командной панели.
//
&НаКлиенте
Процедура ПробитьЧекВыполнить(Команда)
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		ТекстОшибки = НСтр("ru='Документ помечен на удаление'");
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	ПроверитьСуммыОплат(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ПробитьЧек"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы)+"_"+Объект.Запасы.Количество());
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	// Бонусы
	РассчитатьБонусыНаКлиенте();
	// Конец Бонусы
	
	Если ТолькоПросмотр Тогда
		ОтменитьПробитиеЧека();
		УстановитьДоступностьОплаты();
	ИначеЕсли ПроверитьЗаполнениеПоОперацииСДС() Тогда
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		ПробитьЧек();
	КонецЕсли;
	
КонецПроцедуры // ПробитьЧекВыполнить()

// Процедура - обработчик команды ДобавитьОплатуКартой.
//
&НаКлиенте
Процедура ДобавитьОплатуКартой(Команда)
	
	НомерКарты = "";
	ПоказыватьПредупреждение = Ложь;
	
	Если ПечатьДокументовУНФКлиент.ПечатьЧекаНевозможна(ЭтотОбъект, ПоказыватьПредупреждение) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не удалось выполнить оплату через платежный терминал'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда // Проверка на включенную ФО "Использовать ВО"
		Возврат;
	КонецЕсли;
		
	// Выбор устройства ЭТ
	ИдентификаторУстройстваЭТ = ?(
		ЗначениеЗаполнено(ЭквайринговыйТерминал),
		ЭквайринговыйТерминал,
		Неопределено
	);
	
	// Выбор устройства ФР
	ИдентификаторУстройстваФР = ?(
		ЗначениеЗаполнено(ФискальныйРегистратор),
		ФискальныйРегистратор,
		Неопределено
	);
	
	Если ИдентификаторУстройстваЭТ <> Неопределено 
		И (ИдентификаторУстройстваФР <> Неопределено ИЛИ КассаККМИспользоватьБезПодключенияОборудования) Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Сумма", Объект.СуммаДокумента - Объект.ПолученоНаличными - Объект.БезналичнаяОплата.Итог("Сумма"));
		ПараметрыФормы.Вставить("ПределСуммы", Объект.СуммаДокумента - Объект.БезналичнаяОплата.Итог("Сумма"));
		ПараметрыФормы.Вставить("СписокТиповКарт", Новый СписокЗначений());
		Индекс = 0;
		Для каждого ВидКарты Из Элементы.ОплатаПлатежнымиКартамиВидПлатежнойКарты.СписокВыбора Цикл
			ПараметрыФормы.СписокТиповКарт.Добавить(Индекс, ВидКарты.Значение);
			Индекс = Индекс + 1;
		КонецЦикла;
		
		Результат = Неопределено;
		
		ОткрытьФорму(
			"Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ",
			ПараметрыФормы,,,,,
			Новый ОписаниеОповещения("ДобавитьОплатуКартойЗавершение",
				ЭтотОбъект,
				Новый Структура(
					"ИдентификаторУстройстваФР, ИдентификаторУстройстваЭТ, НомерКарты",
					ИдентификаторУстройстваФР, ИдентификаторУстройстваЭТ, НомерКарты
				)
			)
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИдентификаторУстройстваФР = ДополнительныеПараметры.ИдентификаторУстройстваФР;
	ИдентификаторУстройстваЭТ = ДополнительныеПараметры.ИдентификаторУстройстваЭТ;
	НомерКарты = ДополнительныеПараметры.НомерКарты;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ВидКарты = Элементы.ОплатаПлатежнымиКартамиВидПлатежнойКарты.СписокВыбора[Результат.ТипКарты].Значение;
		
		ЭтотОбъект.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeSales";
		ПараметрыОперации.НомерКарты     = Результат.НомерКарты;
		ПараметрыОперации.СуммаОперации  = Результат.Сумма;
		ПараметрыОперации.НомерЧека      = Результат.НомерЧека;
		ПараметрыОперации.СсылочныйНомер = Результат.СсылочныйНомер;
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("ВидКарты", ВидКарты);
		Оповещение = Новый ОписаниеОповещения("ОперацияПоПлатежнойКартеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
			Оповещение,
			УникальныйИдентификатор,
			ИдентификаторУстройстваЭТ,
			ИдентификаторУстройстваФР,
			ПараметрыОперации
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПоПлатежнойКартеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если РезультатВыполнения.Результат Тогда
		
		// Сохранить в таблице данные оплаты картой
		СтрокаОплатыКартой = Объект.БезналичнаяОплата.Добавить();
		
		СтрокаОплатыКартой.ВидПлатежнойКарты   = Параметры.ВидКарты;
		СтрокаОплатыКартой.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты; // Возможна запись пустого номера карты или номера вида "****************"
		СтрокаОплатыКартой.Сумма               = РезультатВыполнения.СуммаОперации;
		СтрокаОплатыКартой.СсылочныйНомер      = РезультатВыполнения.СсылочныйНомер;
		СтрокаОплатыКартой.НомерЧекаЭТ         = РезультатВыполнения.НомерЧекаЭТ;
		
		ПересчитатьДокументНаКлиенте();
		
		Записать(); // Обязательно необходимо записать документ, для предотвращения потери информации.
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды УдалитьОплатуКартой.
//
&НаКлиенте
Процедура УдалитьОплатуКартой(Команда)
	
	ПоказыватьПредупреждение = Ложь;
	
	// Проверка выбранной строки в таблице оплат платежными картами
	ТекущиеДанные = Элементы.БезналичнаяОплата.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Выберите строку удаляемой оплаты картой.'"));
		Возврат;
	КонецЕсли;
	
	Если ПечатьДокументовУНФКлиент.ПечатьЧекаНевозможна(ЭтотОбъект, ПоказыватьПредупреждение) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Не удалось выполнить отмену оплаты картой.'"));
		Возврат;
	КонецЕсли;
		
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда // Проверка на включенную ФО "Использовать ВО"
		Возврат;
	КонецЕсли;
	
	СуммаОперации       = ТекущиеДанные.Сумма;
	НомерСсылкиОперации = ТекущиеДанные.СсылочныйНомер;
	НомерЧекаЭТ         = ТекущиеДанные.НомерЧекаЭТ;
	
	// Выбор устройства ЭТ
	ИдентификаторУстройстваЭТ = ?(
		ЗначениеЗаполнено(ЭквайринговыйТерминал),
		ЭквайринговыйТерминал,
		Неопределено);
		
	// Выбор устройства ФР
	ИдентификаторУстройстваФР = ?(
		ЗначениеЗаполнено(ФискальныйРегистратор),
		ФискальныйРегистратор,
		Неопределено);
	
	Если ИдентификаторУстройстваЭТ <> Неопределено 
			И (ИдентификаторУстройстваФР <> Неопределено ИЛИ КассаККМИспользоватьБезПодключенияОборудования) Тогда
		
		ЭтотОбъект.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeVoid";
		ПараметрыОперации.СуммаОперации  = СуммаОперации;
		ПараметрыОперации.НомерЧека      = НомерЧекаЭТ;
		ПараметрыОперации.СсылочныйНомер = НомерСсылкиОперации;
		
		Оповещение = Новый ОписаниеОповещения("ОтменаОперацииПоПлатежнойКартеЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
			Оповещение,
			УникальныйИдентификатор, 
			ИдентификаторУстройстваЭТ,
			ИдентификаторУстройстваФР,
			ПараметрыОперации
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаОперацииПоПлатежнойКартеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если РезультатВыполнения.Результат Тогда
		ТекущиеДанные = Элементы.БезналичнаяОплата.ТекущиеДанные;
		Объект.БезналичнаяОплата.Удалить(ТекущиеДанные);
		ПересчитатьДокументНаКлиенте();
		Записать();
	Иначе
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды НапечататьПоследнийСлипЧек.
//
&НаКлиенте
Процедура НапечататьПоследнийСлипЧек(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(глПодключаемоеОборудование.ПоследнийСлипЧек) Тогда
		ЭтотОбъект.Доступность = Ложь;
		Оповещение = Новый ОписаниеОповещения("НапечататьПоследнийСлипЧекЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПечатьТекста(Оповещение, УникальныйИдентификатор, , глПодключаемоеОборудование.ПоследнийСлипЧек, Ложь);
	Иначе
		ТекстСообщения = НСтр("ru = 'Отсутствует последний слип чек.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды НапечататьПоследнийСлипЧек.
//
&НаКлиенте
Процедура НапечататьПоследнийСлипЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
КонецПроцедуры

// Процедура - обработчик команды Зарезервировать на сервере.
&НаСервере
Процедура ЗарезервироватьНаСервере(ОтменаРезервирования = Ложь)
	
	СтарыйСтатус = Объект.Статус;
	
	Если ОтменаРезервирования Тогда
		Объект.Статус = Неопределено;
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	Иначе
		Объект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован;
		РежимЗаписи= РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	Попытка
		Если НЕ Записать(Новый Структура("РежимЗаписи", РежимЗаписи)) Тогда
			Объект.Статус = СтарыйСтатус;
		КонецЕсли;
	Исключение
		Объект.Статус = СтарыйСтатус;
	КонецПопытки;
	
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
	ОбновитьПризнакиНабора(Объект.Запасы);
	
	УстановитьДоступностьПечатиЧека();
	УстановитьДоступностьОплаты();
	
КонецПроцедуры // ЗарезервироватьНаСервере()

// Процедура - обработчик команды Зарезервировать.
//
&НаКлиенте
Процедура Зарезервировать(Команда)
	
	Отказ = Ложь;
	ПроверитьПоложениеЗаказа(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Перед записью выполним расчет автоматических скидок.
	// Т.к. расчет автоматических скидок лучше выполнять до получения денег.
	// Это особенно актуально, если оплата выполняется пластиковой картой.
	// Не должно быть ситуации, когда кассир провел оплату картой на всю сумму, а потом рассчитались автоматические скидки и
	// сумма по документу стала меньше.
	// Автоматические скидки
	РассчитатьАвтоматическиеСкидкиПередЗаписью();
	// Конец Автоматические скидки
	
	// Бонусы
	РассчитатьБонусыНаКлиенте();
	// Конец Бонусы
	
	ЗарезервироватьНаСервере();
	
	Оповестить("ОбновитьФормуСпискаДокументовЧекККМ");
	
КонецПроцедуры // Зарезервировать()

// Процедура - обработчик команды СнятьРезервирование.
//
&НаКлиенте
Процедура СнятьРезервирование(Команда)
	
	ЗарезервироватьНаСервере(Истина);
	
	Оповестить("ОбновитьФормуСпискаДокументовЧекККМ");
	
КонецПроцедуры // СнятьРезервирование()

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти = "Запасы";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПодборВыполнить()

// Процедура рассчитывает сумму наличной оплаты.
//
&НаКлиенте
Процедура РассчитатьСуммуНаличнойОплаты(Команда)
	
	СуммаОплатыПлатежнымиКартами = Объект.БезналичнаяОплата.Итог("Сумма");
	СуммаПредоплаты = Объект.Предоплата.Итог("СуммаРасчетов");
	СуммаБезналичнойОплаты = СуммаОплатыПлатежнымиКартами + СуммаПредоплаты;
	Объект.ПолученоНаличными = Объект.СуммаДокумента
							 - ?(СуммаБезналичнойОплаты > Объект.СуммаДокумента, 0, СуммаБезналичнойОплаты);
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	Модифицированность = Истина;
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

&НаКлиенте
Процедура ПоискСертификатаПоНомеруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("Штрихкод") Тогда
			ТекНомер = Результат.Штрихкод;
		Иначе
			ТекНомер = "";
		КонецЕсли;
	ИначеЕсли Результат = Неопределено Тогда
		ТекНомер = ДополнительныеПараметры.ТекШтрихкод;
	КонецЕсли;
	
	НуженВыборИзСписка = Ложь;
	
	Если Не ПустаяСтрока(ТекНомер) Тогда
		НуженВыборИзСписка = ВыполнитьПоискСертификатаПоНомеру(ТекНомер);
	КонецЕсли;
	
	Если НуженВыборИзСписка Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВыбранныйСертификат", ЭтаФорма);
		СтруктураПараметров = Новый Структура("Адрес", АдресВыбранногоСертификатаХранилище);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораСертификата", СтруктураПараметров,,,,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПоискСертификатаПоНомеру(Номер)
	
	Результат = РаботаСПодарочнымиСертификатами.ВыполнитьПоискСертификатаПоНомеру(Номер);
	
	Если Результат.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не найден сертификат по номеру: '") + Номер);
		Возврат Ложь;
	ИначеЕсли Результат.Количество() = 1 Тогда
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("ВидОплаты", Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат);
		СтруктураСтроки.Вставить("ПодарочныйСертификат", Результат[0].ПодарочныйСертификат);
		СтруктураСтроки.Вставить("НомерСертификата", Результат[0].НомерСертификата);
		СтруктураСтроки.Вставить("Сумма", Мин(Результат[0].Остаток,
											  Объект.СуммаДокумента
											  - Объект.ПолученоНаличными
											  - Объект.БезналичнаяОплата.Итог("Сумма")
											  - Объект.Предоплата.Итог("СуммаРасчетов")));
		СтруктураСтроки.Вставить("СуммаПогашенияСертификата", ОпределитьСуммуПогашенияСертификата(Результат[0], СтруктураСтроки.Сумма));
		Если ТакойСертификатУжеЕсть(СтруктураСтроки) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'В таблице оплат уже есть такой сертификат. Повторное добавление невозможно'"));
			Возврат Ложь;
		КонецЕсли;
		ДобавитьСтрокуОплаты(СтруктураСтроки);
		ОбновитьТаблицуБезналичныхОплат();
		Возврат Ложь;
	Иначе
		АдресВыбранногоСертификатаХранилище = ПоместитьВоВременноеХранилище(Результат);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Определяет сумму погашения исходя из параметров сертификата
//
// Параметры:
//  ПараметрыСертификата - СтрокаТаблицыЗначений - См. РаботаСПодарочнымиСертификатами.ВыполнитьПоискСертификатаПоНомеру()
//  Сумма - Число - сумма, которая пойдет на оплату товаров
//
// Возвращаемое значение:
//  Число - сумма, которая будет списана с остатка по сертификату
//
&НаСервере
Функция ОпределитьСуммуПогашенияСертификата(ПараметрыСертификата, Сумма)
	
	Если ПараметрыСертификата.ПодарочныйСертификат.ЧастичноеПогашение Тогда
		СуммаПогашенияСертификата = Сумма;
	ИначеЕсли ПараметрыСертификата.ПодарочныйСертификат.ИспользоватьСерииНоменклатуры Тогда
		СуммаПогашенияСертификата = ПараметрыСертификата.Остаток;
	Иначе
		СуммаПогашенияСертификата = ПараметрыСертификата.ПодарочныйСертификат.Номинал;
	КонецЕсли;
	
	Возврат СуммаПогашенияСертификата;
	
КонецФункции

&НаСервере
Процедура ДобавитьВыбранныйСертификат(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("ПодарочныйСертификат", Результат.ПодарочныйСертификат);
	СтруктураСтроки.Вставить("НомерСертификата", Результат.НомерСертификата);
	СтруктураСтроки.Вставить("Сумма", Мин(Результат.Остаток, Объект.СуммаДокумента-Объект.ПолученоНаличными-Объект.БезналичнаяОплата.Итог("Сумма")));
	ДобавитьСтрокуОплаты(СтруктураСтроки);
	ОбновитьТаблицуБезналичныхОплат();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовШапки

&НаСервере
Процедура ОбновитьДоступностьЯчеек()
	
	Если Не КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		КэшЗначений.Вставить("ДоступностьЯчеек", Новый ФиксированноеСоответствие(Новый Соответствие));
	КонецЕсли;
	
	МассивСтруктурныхЕдиниц = Новый Массив;
	Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			МассивСтруктурныхЕдиниц.Добавить(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		КонецЦикла;
	Иначе
		МассивСтруктурныхЕдиниц.Добавить(Объект.СтруктурнаяЕдиница);
	КонецЕсли;
	МассивСтруктурныхЕдиниц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСтруктурныхЕдиниц);
	ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	Если ТребуетсяПроверкаКассираПриСменеОтветственного Тогда
		УстановитьВидимостьПредупрежденияОКассире();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля КассаККМ на сервере.
//
&НаСервере
Функция КассаККМПриИзмененииНаСервере()
	
	СтруктурнаяЕдиницаККМ = Объект.КассаККМ.СтруктурнаяЕдиница;
	НастроитьЭлементыСтруктурныхЕдиниц();
	
	СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСменыНаДату(Объект.КассаККМ, ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса()));
	
	Если СостояниеКассовойСмены.СменаОткрыта Тогда
		ЗаполнитьЗначенияСвойств(Объект, СостояниеКассовойСмены,, "НалогообложениеНДС");
		Объект.КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	Иначе
		Объект.КассоваяСмена = Неопределено;
	КонецЕсли;
	
	Элементы.Зарезервировать.Видимость = НЕ КонтрольНаСкладеОтключен;
	Элементы.СнятьРезервирование.Видимость = НЕ КонтрольНаСкладеОтключен;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	Объект.ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(Объект.КассаККМ);
	
	ПолучитьСсылкиНаОборудование();
	
	Объект.Подразделение = Объект.КассаККМ.Подразделение;
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		Пользователь = Пользователи.ТекущийПользователь();
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
		ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Объект.Подразделение = ОсновноеПодразделение;
		
	КонецЕсли;
	
	Объект.ПодписьКассира = Объект.СтруктурнаяЕдиница.ПодписьМОЛ;
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	КассаККМИспользоватьБезПодключенияОборудования = Объект.КассаККМ.ИспользоватьБезПодключенияОборудования;
	
	УстановитьВидимостьРезервов();
	УстановитьВидимостьОтправкиЭлектронныхЧеков();
	
	Если Объект.ПоложениеЗаказаПокупателя <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти 
		И Объект.ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Если ЗначениеЗаполнено(Объект.Заказ) Тогда
			Документы.ЧекККМ.ПроверитьСтруктурнуюЕдиницуВЗаказе(Объект.Заказ, Объект.СтруктурнаяЕдиница);
		КонецЕсли;
	Иначе
		Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Заказ) Тогда
				Продолжить;	
			КонецЕсли;
			ПроверкаПройдена = Документы.ЧекККМ.ПроверитьСтруктурнуюЕдиницуВЗаказе(ТекущаяСтрока.Заказ, ТекущаяСтрока.СтруктурнаяЕдиница, 
				ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
			Если НЕ ПроверкаПройдена Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"ЧекККМ", "Запасы", НастройкиФормыВыбораНоменклатуры);
	
	ТребуетсяПроверкаКассираПриСменеОтветственного = ТребуетсяПроверкаКассираПриСменеОтветственного();
	УстановитьВидимостьПредупрежденияОКассире();
	
	Возврат СостояниеКассовойСмены.СменаОткрыта;
	
КонецФункции // КассаККМПриИзмененииНаСервере()

// Процедура - обработчик события ПриИзменении поля КассаККМ.
//
&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	СменаОткрыта = КассаККМПриИзмененииНаСервере();
	НастроитьЭлементыЯчеек();
	
	Если НЕ СменаОткрыта Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Кассовая смена не открыта. Открыть смену можно в журнале ""Чеки ККМ"". После открытия смены перевыберите кассу ККМ в текущем документе.'");
		Сообщение.Поле = "Объект.КассоваяСмена";
		Сообщение.Сообщить();
	КонецЕсли;
	
	ЕстьЗаказВШапке = НЕ Объект.Заказ.Пустая() И Объект.ПоложениеЗаказаПокупателя = ПоложениеРеквизитаНаФормеВШапке;
	Если Не ЕстьЗаказВШапке Тогда
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина, Ложь);
	КонецЕсли;
	СброситьФлагСкидкиРассчитаныКлиент("КассаККМПриИзменении");
	ПересчитатьДокументНаКлиенте();
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, Объект.ВалютаДокумента, Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.СпециальныйНалоговыйРежим, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	
КонецПроцедуры // КассаККМПриИзменении()

// Процедура - обработчик события ПриИзменении поля СуммаОплатыНаличными.
//
&НаКлиенте
Процедура ПолученоНаличнымиПриИзменении(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры // ПолученоНаличнымиПриИзменении()

// Процедура - обработчик события ПриИзменении поля ЭквайринговыйТерминал на сервере.
//
&НаСервере
Процедура ЭквайринговыйТерминалПриИзмененииНаСервере()
	
	ПолучитьСсылкиНаОборудование();
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	УстановитьДоступностьОплаты();
	
КонецПроцедуры // ЭквайринговыйТерминалПриИзмененииНаСервере()

// Процедура - обработчик события ПриИзменении поля ЭквайринговыйТерминал.
//
&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	ЭквайринговыйТерминалПриИзмененииНаСервере();
	
КонецПроцедуры // ЭквайринговыйТерминалПриИзменении()

// Процедура - обработчик события ПриИзменении поля ФормаОплаты на сервере.
//
&НаСервере
Функция ФормаОплатыПриИзмененииНаСервере(ОписаниеОшибки = "")
	
	Если Объект.ФормаОплаты = Перечисления.ТипыДенежныхСредств.Наличные Тогда
		
		Если Объект.БезналичнаяОплата.Количество() > 0 Тогда
			
			Объект.ФормаОплаты = Перечисления.ТипыДенежныхСредств.ПустаяСсылка();
			
			ОписаниеОшибки = НСтр("ru = 'Проведена оплата платежными картами. Установить форму оплаты ""Наличными"" возможно после удаления оплаты картами.'");
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда // Смешанная
		
	Иначе // Платежными картами
		
		Объект.ПолученоНаличными = 0;
		
	КонецЕсли;
	
	УстановитьДоступностьОплаты();
	
	Возврат Истина;
	
КонецФункции // ФормаОплатыПриИзмененииНаСервере()

// Процедура - обработчик события ПриИзменении поля ФормаОплаты.
//
&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	ОписаниеОшибки = "";
	Если НЕ ФормаОплатыПриИзмененииНаСервере(ОписаниеОшибки) Тогда
		ПоказатьПредупреждение(Неопределено,ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры // ФормаОплатыПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		// Сформируем надпись цены и валюты.
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, Объект.ВалютаДокумента, Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.СпециальныйНалоговыйРежим, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		// ДисконтныеКарты
		// В этой процедуре происходить вызов не модального окна вопроса.
		ПересчитатьПроцентСкидкиПриИзмененииДатыДокумента();
		// Конец ДисконтныеКарты
	КонецЕсли;
	
	// АвтоматическиеСкидки
	ДатаДокументаИзмененаВручную = Истина;
	СброситьФлагСкидкиРассчитаныКлиент("ДатаПриИзменении");
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события ПриИзменении поля Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, Объект.ВалютаДокумента, Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.СпециальныйНалоговыйРежим, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	УстановитьНастройкиУчетаВНалогообложении();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события ПриИзменении поля СтруктурнаяЕдиница.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	СтруктураДанных = ПолучитьДеталиПодразделения(Объект.СтруктурнаяЕдиница, Объект.Организация, Объект.Дата);
	Объект.ПодписьКассира = СтруктураДанных.ПодписьМОЛ;
	Объект.СпециальныйНалоговыйРежим = СтруктураДанных.СпециальныйНалоговыйРежим;
	Если Объект.СпециальныйНалоговыйРежим = ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.ПСН") Тогда
		ЗаполнитьПатент();
	Иначе
		Объект.Патент = ПредопределенноеЗначение("Справочник.Патенты.ПустаяСсылка");
	КонецЕсли;
	
	ОбработатьИзменениеРозничнойТочкиНаСервере();
	
	НастроитьЭлементыЯчеек();
	
КонецПроцедуры // СтруктурнаяЕдиницаПриИзменении()

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	ПустойКонтрагентПередИзменением = КонтрагентПередИзменением.Пустая();
	
	ИзмениласьДисконтнаяКарта = КонтрагентПриИзмененииНаСервере(ПустойКонтрагентПередИзменением);
	Если ИзмениласьДисконтнаяКарта Тогда
		ПересчитатьДокументНаКлиенте();
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Информация о дисконтной карте была очищена, т.к. изменился контрагент'"));
	КонецЕсли;
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация);
	
КонецПроцедуры

&НаСервере
Функция КонтрагентПриИзмененииНаСервере(ПустойКонтрагентПередИзменением)
	
	МассивСвязейДляЗаказа = Новый Массив;
	
	Если НЕ ОБъект.Заказ.Пустая() И Объект.Контрагент <> Объект.Заказ.Контрагент Тогда
		Объект.Заказ = Неопределено;
		ОчищатьЗаказаВТЧ = Истина;
	Иначе
		ОчищатьЗаказаВТЧ = Ложь;
	КонецЕсли;
	
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивСвязейДляЗаказа.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент"));
	КонецЕсли;
	
	Элементы.Заказ.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязейДляЗаказа);
	
	Объект.КонтактноеЛицоПодписант = Объект.Контрагент.КонтактноеЛицоПодписант;
	
	УстановитьВидимостьРезервов(Истина, ОчищатьЗаказаВТЧ);
	СброситьФлагСкидкиРассчитаныСервер("ЗаказПриИзменении");
	
	ДанныеКИКонтрагента = Справочники.Контрагенты.ДанныеКИКонтрагентаДляВыбораНаФорме(Объект.Контрагент, Элементы,
		ПоляКИДляОтправкиЧека());
	ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИКонтрагента);
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	УстановитьВидимостьДоговора();
	
	ИзмениласьДисконтнаяКарта = ОбработатьИзменениеВладельцаДисконтнойКарты(ПустойКонтрагентПередИзменением);
	
	Возврат ИзмениласьДисконтнаяКарта;
	
КонецФункции

&НаКлиенте
Процедура ЗаказПриИзменении(Элемент)
	
	Если НЕ Объект.Заказ.Пустая() Тогда
		// Лучше заполнить контрагента до того, как зададим вопрос, а то может казаться, что нажали "Нет", а данные все равно
		// заполнились по документу.
		РеквизитыЗаказа = ПолучитьКонтрагентаИДоговорИзЗаказа(Объект.Заказ);
		Объект.Контрагент = РеквизитыЗаказа.Контрагент;
		УстановитьВидимостьДоговора();
		Объект.Договор = РеквизитыЗаказа.Договор;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоЗаказуЗавершение", ЭтотОбъект);
		ПоказатьВопрос(
			ОписаниеОповещения, 
			НСтр("ru = 'Заполнить документ по выбранному заказу покупателя?'"),
			РежимДиалогаВопрос.ДаНет, 0);
			
		Если НЕ ВидимостьРезервов Тогда
			УстановитьВидимостьРезервов();
		КонецЕсли;
	ИначеЕсли ВидимостьРезервов Тогда
		УстановитьВидимостьРезервов(Истина, Истина);
	КонецЕсли;
	
	СброситьФлагСкидкиРассчитаныКлиент("ЗаказПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если (НЕ ПустаяСтрока(Объект.Комментарий) И Элементы.СтраницаДополнительно.Картинка = Новый Картинка) ИЛИ
		(ПустаяСтрока(Объект.Комментарий) И Элементы.СтраницаДополнительно.Картинка <> Новый Картинка)
		Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	КонецЕсли;
	
	УстановитьВидимостьДанныхПоДоставке();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПриИзменении(Элемент)
	УстановитьНалоговыйСпецРежим();
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, Объект.ВалютаДокумента, Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.СпециальныйНалоговыйРежим, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
КонецПроцедуры

&НаКлиенте
Процедура ОперацияСДенежнымиСредствамиПриИзменении(Элемент)
	
	УправлениеЭлементамиИОплатойПриИзмененииОперацииСДС();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементамиИОплатойПриИзмененииОперацииСДС()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Запасы", "АвтоОтметкаНезаполненного", Не Объект.ОперацияСДенежнымиСредствами);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Контрагент", "АвтоОтметкаНезаполненного", Объект.ОперацияСДенежнымиСредствами);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Договор", "АвтоОтметкаНезаполненного", Объект.ОперацияСДенежнымиСредствами);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаДокумента", "ТолькоПросмотр", Не Объект.ОперацияСДенежнымиСредствами);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БезналДобавитьОплатуБонусами", "Видимость", Не Объект.ОперацияСДенежнымиСредствами);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БезналДобавитьОплатуКредитом", "Видимость", Не Объект.ОперацияСДенежнымиСредствами);
	
	// Итог по документу
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыИтогВсего", "Видимость", Объект.ОперацияСДенежнымиСредствами);
	Шрифт = Новый Шрифт(, ?(Объект.ОперацияСДенежнымиСредствами, 10, 20), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаДокумента", "Шрифт", Шрифт);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаДокумента", "КнопкаВыпадающегоСписка", ?(Объект.ОперацияСДенежнымиСредствами, Истина, Неопределено));
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		УдалитьОплатуНедоступныхВидов();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаПредоплата", "Видимость", Не Объект.ОперацияСДенежнымиСредствами);
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		Объект.Предоплата.Очистить();
		ЭтаФорма.ТекущийЭлемент = Элементы.СуммаДокумента;
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОплатуНедоступныхВидов()
	
	Для Индекс = 1 - Объект.БезналичнаяОплата.Количество() По 0 Цикл
		Строка = Объект.БезналичнаяОплата.Получить(-Индекс);
		Если Строка.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.Бонусы")
			ИЛИ Строка.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.Кредит") Тогда
			Объект.БезналичнаяОплата.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Запасы Цикл
		Строка.СуммаСкидкиОплатыБонусом = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(ДанныеДоговора = Неопределено)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
		
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		Если ДанныеДоговора = Неопределено Тогда
			
			ДанныеДоговора = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Договор, Объект.Контрагент);
			
		КонецЕсли;
		
		Если Объект.Предоплата.Количество() > 0
			И Объект.Договор <> ДоговорПередИзменением Тогда
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
			ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбОчисткеПредоплатыЗавершение", ЭтотОбъект, ПараметрыДокумента);
			ТекстВопроса = НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Возврат;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия после ответа на вопрос об очистке предоплаты.
//
&НаКлиенте
Процедура ВопросОбОчисткеПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДоговорПередИзменением = ДополнительныеПараметры.ДоговорПередИзменением;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Предоплата.Очистить();
	Иначе
		Если ДополнительныеПараметры.Свойство("ИзменениеКонтрагента") Тогда
			Объект.Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			Объект.КонтактноеЛицоПодписант = ДополнительныеПараметры.КонтактноеЛицоПодписант;
			Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			КонтрагентВестиРасчетыПоЗаказам = ДополнительныеПараметры.КонтрагентВестиРасчетыПоЗаказамПередИзменением;
			Элементы.Договор.Видимость = ДополнительныеПараметры.ВидимостьДоговораПередИзменением;
		КонецЕсли;
		Объект.Договор = ДоговорПередИзменением;
		Договор = ДоговорПередИзменением;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовТабличнойЧастиЗапасы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ЗАПАСЫ

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаПриИзменении(Элемент)
	
	Если КэшЗначений.Свойство("ИспользоватьМинимальныеЦены") 
		И КэшЗначений.ИспользоватьМинимальныеЦены Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
		
		Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			
			СтруктураДанные.Вставить("ДатаОбработки",	 	Объект.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента",	 	Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
			
			СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
			СтруктураДанные.Вставить("Цена",			 	СтрокаТабличнойЧасти.Цена);
			
			СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
			
		КонецЕсли;
		
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);
		
		СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
		
		Если СтруктураДанные.Свойство("МинимальнаяЦена") 
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",	 СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("Содержание", "");
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	// Конец ДисконтныеКарты
	
	Если СкладВШапке Тогда
		СтруктураДанные.Вставить("Склад", Объект.СтруктурнаяЕдиница);
		СтруктураДанные.Вставить("Ячейка", Объект.Ячейка);
	КонецЕсли;
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);

	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Склад") Тогда
		Если СписокДоступныхСкладов.НайтиПоЗначению(СтруктураДанные.Склад) = Неопределено Тогда
			СтруктураДанные.Склад = Объект.СтруктурнаяЕдиница;
			СтруктураДанные.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	СтруктураДанные.Вставить("СписокДоступныхСкладов", СписокДоступныхСкладов);
	
	СтрокаТабличнойЧасти.КодМаркировки = "";
	
	Если СтруктураДанные.ЭтоНабор И НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
		
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные);
		// Конец Наборы
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
		КонецЕсли;
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
		ПересчитатьДокументНаКлиенте();
		
		#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Элементы.Запасы.ЗакончитьРедактированиеСтроки(Истина);
		#КонецЕсли 
		
	Иначе
		
		СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Количество = 1;
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки = СтруктураДанные.НеобходимостьВводаАкцизнойМарки;
		СтрокаТабличнойЧасти.НеобходимостьВводаКодаМаркировки = СтруктураДанные.НеобходимостьВводаКодаМаркировки;
		// Наборы
		СтрокаТабличнойЧасти.ЭтоНабор = СтруктураДанные.ЭтоНабор;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		
		// Серии номенклатуры
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла;
		
		СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
				СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		//Партии
		СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		Если СтруктураДанные.ИспользоватьПартии Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
				СтруктураВыбораНоменклатуры.Партия = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
			КонецЕсли;
		КонецЕсли;
		// Конец Партии
		
		СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
		
		Если Не (ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) И ПодборНоменклатурыИзСписка) Тогда
			ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(СтрокаТабличнойЧасти, Объект, СтруктураДанные);
			ЗапасыСтруктурнаяЕдиницаПриИзменении(Элемент);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		
		// Интеграция ГосИС
		Если ФОВестиУчетМаркируемойПродукцииИСМП Тогда
			ИнтеграцияИСМПУНФКлиент.ЗаполнитьСлужебныеРеквизитыИСМПВСтрокеТЧ(СтрокаТабличнойЧасти, СтруктураДанные);
		КонецЕсли;
		ДополнительныеПараметры = Новый Структура;
		СобытияФормИСКлиент.ПриИзмененииЭлемента(ЭтаФорма, "Запасы", ДополнительныеПараметры);
		Если ДополнительныеПараметры.Свойство("ТребуетсяСерверныйВызов") Тогда
			ПодключитьОбработчикОжидания("ЗапасыПриОкончанииРедактированияДляСерверногоВызова", 0.5, Истина);
		КонецЕсли;
		// Конец ИнтеграцияГосИС
		
		ОткрытьВводАкцизнойМарки(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные, СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;
	
	//Агентские платежи
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		СтрокаТабличнойЧасти.ЦенаСАгентскимВознаграждением = 0;
		СтрокаТабличнойЧасти.ДоговорПлатежногоАгента = СтруктураДанные.ДоговорКонтрагента;
		СтрокаТабличнойЧасти.ДанныеАгентскогоДоговора = СтруктураДанные.ДанныеАгентскогоДоговора;
		АгентскиеПлатежиУНФКлиентСервер.ВыделитьАгентскоеВознаграждениеВТаблице(Объект, СтрокаТабличнойЧасти);
		Если СтрокаТабличнойЧасти.Цена <> 0 Тогда
			АгентскиеПлатежиУНФКлиентСервер.ЗаполнитьРасчетныеПоляАгентскогоВознаграждения(Объект,, ЭтаФорма);
			СтрокаУслуги = АгентскиеПлатежиУНФКлиентСервер.СтрокаУслугаАгента(Объект.Запасы, СтрокаТабличнойЧасти);
			РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаУслуги);
			ПересчитатьДокументНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
		
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 	Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента",	 	Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена",			 	СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);
	
	Если Не РежимОстаткиИРезервы Тогда
		СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	Иначе
		СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
		СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	Если СтруктураДанные.ЭтоНабор Тогда
		
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные);
		// Конец Наборы
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
	
		ПересчитатьДокументНаКлиенте();
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
		КонецЕсли
		
	Иначе
		
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные, СтрокаТабличнойЧасти.Номенклатура);
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти)
	КонецЕсли;
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

// Процедура - обработчик события ОбработкаВыбора поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		Если КэшЗначений.ИспользоватьМинимальныеЦены
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтрокаТабличнойЧасти.МинимальнаяЦена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		
		КонецЕсли;
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	
	// В процедуре РассчитатьСуммуВСтрокеТабличнойЧасти есть вызов серверной процедуры.
	// Из-за этого данный вызов нельзя выполнить в процедуре ЗапасыЕдиницаИзмеренияОбработкаВыбора.
	// Использование ЗапасыЕдиницаИзмеренияОбработкаВыбора более оптимально, т.к. позволяет отказаться от выполнения
	// большей части алгоритма, если единица измерения не поменялась.
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти)
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		АгентскиеПлатежиУНФКлиентСервер.ВыделитьАгентскоеВознаграждениеВТаблице(Объект, СтрокаТабличнойЧасти);
		АгентскиеПлатежиУНФКлиентСервер.ЗаполнитьРасчетныеПоляАгентскогоВознаграждения(Объект,, ЭтаФорма);
		СтрокаУслуги = АгентскиеПлатежиУНФКлиентСервер.СтрокаУслугаАгента(Объект.Запасы, СтрокаТабличнойЧасти);
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаУслуги);
	КонецЕсли;
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

&НаКлиенте
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры // ЗапасыПроцентСкидкиНаценкиПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьПроцентСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны, РассчитатьЦену", Истина, Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);

КонецПроцедуры // ЗапасыСуммаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры // ЗапасыСтавкаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);	
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

// Процедура - обработчик события ПриОкончанииРедактирования строки списка Запасы.
//
&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчитатьДокументНаКлиенте();
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	СобытияФормИСКлиент.ПриИзмененииЭлемента(ЭтаФорма, "Запасы", ДополнительныеПараметры);
	Если ДополнительныеПараметры.Свойство("ТребуетсяСерверныйВызов") Тогда
		ПодключитьОбработчикОжидания("ЗапасыПриОкончанииРедактированияДляСерверногоВызова", 0.5, Истина);
	КонецЕсли;
	// Конец ИнтеграцияГосИС
	
	// ШиныИПокрышки
	СтрокаТЧ = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоШиныИПокрышки = УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура, "ШиныИПокрышки");
	
	Если ЭтоШиныИПокрышки <> Неопределено 
		И ЭтоШиныИПокрышки Тогда
		Если СтрокаТЧ.Свойство("СтатусПроверкиГосИС") Тогда
			СтрокаТЧ.СтатусПроверкиГосИС = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 1, 2);
		КонецЕсли;
		СтрокаТЧ.ИндексАкцизнойМарки = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 1, 2);
	КонецЕсли;
	// ШиныИПокрышки
	
КонецПроцедуры

// ИнтеграцияГосИС
&НаКлиенте
Процедура ЗапасыПриОкончанииРедактированияДляСерверногоВызова()
	
	ЗапасыПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗапасыПриОкончанииРедактированияНаСервере()
	
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Запасы", Новый Структура);
	
КонецПроцедуры
// Конец ИнтеграцияГосИС

// Процедура - обработчик события ПослеУдаления строки списка Запасы.
//
&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
	
	ЗапасыПослеУдаленияСервер();
	
КонецПроцедуры // ТоварыПослеУдаления()

&НаСервере
Процедура ЗапасыПослеУдаленияСервер()
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриИзмененииЭлемента(ЭтаФорма, "Запасы", Неопределено);
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриАктивизацииПоля(Элемент)
	// Поле не редактируется если агентский договор не заполнен
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыЦенаСАгентскимВознаграждением
		И Элемент.ТекущиеДанные.ДанныеАгентскогоДоговора = Неопределено Тогда
		Элемент.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЗаказПриИзменении(Элемент)
	
	// АвтоматическиеСкидки
	Если СброситьФлагСкидкиРассчитаныКлиент("ЗапасыЗаказПриИзменении") Тогда
		РассчитатьСуммуВСтрокеТабличнойЧасти(Неопределено);
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры // КомментарийПриИзменении()

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	
	РаботаСФормойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
КонецПроцедуры

// Процедура - обработчик события Выбор табличной части Запасы.
//
&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Наборы
	СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если НЕ ТолькоПросмотр И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) И  
		(Элемент.ТекущийЭлемент = Элементы.ЗапасыНоменклатура ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыХарактеристика ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыКартинкаНабора ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыКоличество ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыЕдиницаИзмерения) Тогда 
		
		СтандартнаяОбработка = Ложь;
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	// Конец Наборы
	
	// Подарочные сертификаты
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыЦена И Элемент.ТекущийЭлемент.ТолькоПросмотр Тогда
		
		ПоляНоменклатуры = ТипНоменклатурыПроизвольныйНоминал(СтрокаТабличнойЧасти.Номенклатура);
			
		Если ПоляНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")
			И ПоляНоменклатуры.ПроизвольныйНоминал Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("УказатьЦенуСертификата", ЭтотОбъект, СтрокаТабличнойЧасти);
			ПоказатьВводЧисла(ОписаниеОповещения, СтрокаТабличнойЧасти.Цена, НСтр(
				"ru = 'Введите стоимость сертификата'"), 15, 2);
			
		КонецЕсли;
			
	КонецЕсли;
	// Конец Подарочные сертификаты
	
	// АвтоматическиеСкидки
	// Размещать в конце процедуры. Возможно перезаполнение табличной части
	Если (Элемент.ТекущийЭлемент = Элементы.ЗапасыПроцентАвтоматическойСкидки ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыСуммаАвтоматическойСкидки)
		И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьИнформациюОСкидкахКлиент()
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Запасы и Остатки
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Номенклатура = ТекущиеДанные.Номенклатура;
	Характеристика = ТекущиеДанные.Характеристика;
	Партия = ТекущиеДанные.Партия;
	Склад =  Объект.СтруктурнаяЕдиница;
	
	СтруктураПараметров = Новый Структура("ОрганизацияОбъекта, Номенклатура, Характеристика, Партия, Склад, ЕдиницаИзмерения, ЗаказПокупателя, НомерВариантаКП");
	
	СтруктураПараметров.Номенклатура = Номенклатура;
	СтруктураПараметров.Характеристика = Характеристика;
	СтруктураПараметров.Партия = Партия;
	СтруктураПараметров.Склад = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница),
								  СтрокаТабличнойЧасти.СтруктурнаяЕдиница,
								  Объект.СтруктурнаяЕдиница);
	СтруктураПараметров.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
	СтруктураПараметров.ЗаказПокупателя = Объект.Заказ;
	СтруктураПараметров.НомерВариантаКП = 0;
	СтруктураПараметров.ОрганизацияОбъекта = Объект.Организация;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		Если Элемент.ТекущийЭлемент = Элементы.ЗапасыОстатокОбщий Тогда
			
			ЗначениеПоля = ТекущиеДанные.ОстатокОбщий;
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыОстатокОбщий");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				СписокДокументов = СписокДокументовПоЗаказу("ОбщиеЗапасы", СтруктураПараметров);
				
				Если СписокДокументов.Количество() Тогда
					СписокДокументов.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"),, БиблиотекаКартинок.Отчет);
				КонецЕсли;
				
				Если Элемент.ТекущийЭлемент = Элементы.ЗапасыОстатокОбщий Тогда
					ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент = Элементы.ЗапасыСтруктурнаяЕдиницаДляРежимаОстатки Тогда
			
			ЗначениеПоля = СтрокаТабличнойЧасти.МожноОтгрузить;
			
			СписокВыбораСклад = Элементы.ЗапасыСтруктурнаяЕдиницаДляРежимаОстатки.СписокВыбора;
			СписокВыбораСклад.Очистить();
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыДоступно");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				СписокДокументов = СписокДокументовПоЗаказу("ОбщиеЗапасы", СтруктураПараметров);
				
				Для Каждого ЭлементСписка Из СписокДокументов Цикл
					Если СписокДоступныхСкладов.НайтиПоЗначению(ЭлементСписка.Значение.Склад) <> Неопределено Тогда
						СписокВыбораСклад.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление,, ЭлементСписка.Картинка);
					КонецЕсли;
				КонецЦикла;
				
				Если СписокДокументов.Количество() Тогда
					СписокДокументов.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"),, БиблиотекаКартинок.Отчет);
					СписокВыбораСклад.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"),, БиблиотекаКартинок.Отчет);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент = Элементы.ЗапасыВРезервеВсего 
			Или Элемент.ТекущийЭлемент = Элементы.ЗапасыЗарезервировано Тогда
			
			ЗначениеПоля = ?(Элемент.ТекущийЭлемент = Элементы.ЗапасыВРезервеВсего, ТекущиеДанные.ВРезерве, ТекущиеДанные.ВРезервеТекСклад);
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыВРезерве");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
				
				СтруктураПараметров.Склад = ?(Элемент.ТекущийЭлемент = Элементы.ЗапасыВРезервеВсего, Неопределено, СтруктураПараметров.Склад);
				
				СписокДокументов = СписокДокументовПоЗаказу("Остаток", СтруктураПараметров);
				
				ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки
			И НЕ ТолькоПросмотр
			И(Элемент.ТекущийЭлемент = Элементы.ЗапасыЦенаСАгентскимВознаграждением
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыЦена) Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.ДанныеАгентскогоДоговора) Тогда
				ВводДополнительнойИнформации = Истина;
				ВводПараметровАгентскогоПлатежа(ТекущиеДанные, Элемент.ТекущийЭлемент);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередНачаломИзменения(Элемент, Отказ)
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		
		// Строка не редактируется вообще
		Если Элемент.ТекущиеДанные.УслугаАгента Тогда
			Отказ = Истина
		КонецЕсли;
		
		// Поле не редактируется если агентский договор не заполнен
		Если Элемент.ТекущийЭлемент = Элементы.ЗапасыЦенаСАгентскимВознаграждением
			И Элемент.ТекущиеДанные.ДанныеАгентскогоДоговора = Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипНоменклатурыПроизвольныйНоминал(Знач Номенклатура)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ТипНоменклатуры, ПроизвольныйНоминал");
КонецФункции

&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Наборы
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если Копирование И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
		// Состав набора не копируется
		Отказ = Истина;
	КонецЕсли; 
	// Конец Наборы
	
	Если Копирование И РежимОстаткиИРезервы Тогда
		
		Отказ = Истина;
		
		НоваяСтрока = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "Ячейка", "ПоложениеСклада");
		
		НоваяСтрока.Резерв = 0;
		
		// АвтоматическиеСкидки
		Если НоваяСтрока.ПроцентАвтоматическойСкидки <> 0 ИЛИ НоваяСтрока.СуммаАвтоматическойСкидки <> 0 Тогда
			НоваяСтрока.ПроцентАвтоматическойСкидки = 0;
			НоваяСтрока.СуммаАвтоматическойСкидки = 0;
			РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
		ИначеЕсли ИспользоватьАвтоматическиеСкидки Тогда
			// Автоматические скидки стали неактуальны.
			СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
		КонецЕсли;
		// Конец АвтоматическиеСкидки
		
		НоваяСтрока.КлючСвязи = 0;
		НоваяСтрока.СерииНоменклатуры = "";
		НоваяСтрока.КодМаркировки = "";
		
		Если РежимОстаткиИРезервы Тогда
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", Компания);
			СтруктураДанные.Вставить("Номенклатура", 	НоваяСтрока.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", 	НоваяСтрока.Характеристика);
			СтруктураДанные.Вставить("Партия", 	НоваяСтрока.Партия);
			СтруктураДанные.Вставить("ИспользоватьХарактеристики", НоваяСтрока.ИспользоватьХарактеристики);
			СтруктураДанные.Вставить("ИспользоватьПартии", НоваяСтрока.ИспользоватьПартии);
			
			ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
			
		КонецЕсли;
		
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования табличной части Запасы формы.
//
&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтеграцияГосИС
	КэшироватьТекущуюСтроку(Элементы.Запасы, ЭтотОбъект);
	// Конец ИнтеграцияГосИС
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(Элемент.ТекущиеДанные, Объект, "Заказ", "ПоложениеЗаказаПокупателя");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(Элемент.ТекущиеДанные, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(Элемент.ТекущиеДанные, Объект, "Ячейка", "ПоложениеСклада");
	КонецЕсли;
	
	// АвтоматическиеСкидки
	Если НоваяСтрока И Копирование И
		(Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки <> 0 ИЛИ Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки <> 0) Тогда
		Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки = 0;
		Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	ИначеЕсли ИспользоватьАвтоматическиеСкидки И НоваяСтрока И Копирование Тогда
		// Автоматические скидки стали неактуальны.
		СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// ШиныИПокрышки
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КодМаркировки = "";
		ЗаполнитьИндексАкцизнойМарки(Элемент.ТекущиеДанные);
	ИначеЕсли Копирование Тогда
		ЗаполнитьИндексАкцизнойМарки(Элемент.ТекущиеДанные);
	КонецЕсли;
	// Конец ШиныИПокрышки
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Элемент.ТекущиеДанные.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, Элемент.ТекущиеДанные);
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыСерииНоменклатуры" Тогда
		ОткрытьПодборСерииНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПередУдалением строки списка Запасы.
//
&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// ИнтеграцияГосИС
	КэшироватьТекущуюСтроку(Элементы.Запасы, ЭтотОбъект);
	// Конец ИнтеграцияГосИС
	
	// Наборы
	Если Элементы.Запасы.ВыделенныеСтроки.Количество()=Объект.Запасы.Количество() Тогда
		// Если выделены все строки - проверки удаления наборов не выполняются
		Объект.ДобавленныеНаборы.Очистить();
	Иначе
		ДанныеНабора = Новый Структура("НоменклатураНабора, ХарактеристикаНабора");
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			Если ДанныеНабора.НоменклатураНабора=Неопределено Тогда
				ДанныеНабора.НоменклатураНабора = ТекущиеДанныеСтроки.НоменклатураНабора;
				ДанныеНабора.ХарактеристикаНабора = ТекущиеДанныеСтроки.ХарактеристикаНабора;
			ИначеЕсли ДанныеНабора.НоменклатураНабора<>ТекущиеДанныеСтроки.НоменклатураНабора 
				ИЛИ ДанныеНабора.ХарактеристикаНабора<>ТекущиеДанныеСтроки.ХарактеристикаНабора Тогда
				// Выделены строки разных наборов
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
				Сообщение.Поле = "Объект.Запасы";
				Сообщение.Сообщить();
				Отказ = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если НЕ Отказ И ЗначениеЗаполнено(ДанныеНабора.НоменклатураНабора) Тогда
			// Набор можно удалить только целиком
			Отказ = Истина;
			ДобавленныеНаборы = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
			Оповещение = Новый ОписаниеОповещения("ЗапасыПередУдалениемЗавершение", ЭтотОбъект, ДанныеНабора);
			СписокКнопок = Новый СписокЗначений;
			Если ДобавленныеНаборы.Количество()>0 И ДобавленныеНаборы[0].Количество>1 Тогда
				// в ТЧ есть несколько одинаковых наборов
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком. В табличную часть добавлено несколько экземпляров данного набора'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить все'"));
				СписокКнопок.Добавить("УдалитьОдин", НСтр("ru = 'Удалить один экземпляр'"));
			Иначе
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'"));
			КонецЕсли; 
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Редактировать состав'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, 0, КодВозвратаДиалога.Да);
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные.УслугаАгента Тогда
			Отказ = Истина;
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ДоговорПлатежногоАгента) Тогда
			АгентскиеПлатежиУНФКлиентСервер.УдалитьСтрокиАгентскогоВознаграждения(Объект.Запасы, ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.КлючСвязи) Тогда
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, ТекущиеДанные, "КлючСвязи");
		КонецЕсли;
		ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.АкцизныеМарки, ТекущиеДанные);
		ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.СкидкиНаценки, ТекущиеДанные);
		ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.БонусныеБаллыКНачислению, ТекущиеДанные);
		// Серии номенклатуры
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла;
	КонецЕсли;
	
	// Остатки и резервы
	Если РежимОстаткиИРезервы И Не Отказ Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
		НоменклатураУдаленнойСтроки = ТекущиеДанные.Номенклатура;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалениемЗавершение(Результат, ДанныеНабора) Экспорт
	
	// Наборы
	Если Результат=Неопределено ИЛИ Результат=КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;
	
	СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = СтрокиНабора[0];
	
	Если Результат=КодВозвратаДиалога.Нет Тогда
		
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	ИначеЕсли Результат=КодВозвратаДиалога.Да Тогда
		
		Для каждого Стр Из СтрокиНабора Цикл
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, Стр,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла; 
		НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, Объект.ДобавленныеНаборы);
		
		Модифицированность = Истина;
		ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
		
	ИначеЕсли Результат="УдалитьОдин" Тогда
		
		ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
		Если ДобавленныеСтроки.Количество()=0 ИЛИ ДобавленныеСтроки[0].Количество<=1 Тогда
			Для каждого Стр Из СтрокиНабора Цикл
				СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, Стр,
					ИспользоватьСерииНоменклатурыОстатки);
			КонецЦикла; 
			НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, Объект.ДобавленныеНаборы);
		Иначе
			СтароеКоличество = ДобавленныеСтроки[0].Количество;
			ДобавленныеСтроки[0].Количество = СтароеКоличество-1;
			НаборыКлиентСервер.УдалитьЭкземплярНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, , СтароеКоличество);
			НаборыКлиент.УдалитьЛишниеСтрокиПодчиненнойТЧ(Объект.Запасы, Объект.СерииНоменклатуры);
			СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
			Для каждого Стр Из СтрокиНабора Цикл
				РассчитатьСуммуВСтрокеТабличнойЧасти(Стр);
			КонецЦикла;
		КонецЕсли;
		
		Модифицированность = Истина;
		ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
		
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеУдаленияСтрокиЗапасов()
	
	ПересчитатьДокументНаКлиенте();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("УдалениеСтроки");
	
	Если РежимОстаткиИРезервы Тогда
		Если ЗначениеЗаполнено(НоменклатураУдаленнойСтроки) Тогда
			ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(,НоменклатураУдаленнойСтроки);
		Иначе
			ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ХарактеристикиНабора(СтрокаТабличнойЧасти.Номенклатура, Текст);
	КонецЕсли;                              
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураОткрытия.Вставить("РежимВыбора", Истина);
		СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
		ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	КонецЕсли;                              
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЧекККМ", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьСотрудника(Команда)
	
	РабочееМестоКассираКлиент.ОткрытьФормуСотрудника(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПечатьНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиЧекККМ", Новый Структура("КонтекстПечати", Объект), ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

// Процедура - обработчик команды ЗаполнитьПоРезервам подменю ИзменитьРезерв.
//
&НаКлиенте
Процедура ИзменитьРезервЗаполнитьПоРезервам(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Запасы и услуги"" не заполнена.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКолонкуРезервПоРезервамНаСервере();
	
КонецПроцедуры // ИзменитьРезервЗаполнитьПоРезервам()

// Процедура - обработчик команды ОчиститьРезерв подменю ИзменитьРезерв.
//
&НаКлиенте
Процедура ИзменитьРезервОчиститьРезерв(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Запасы и услуги"" не заполнена.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
		СтрокаТабличнойЧасти.Резерв = 0;
		
	КонецЦикла;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьРезервЗаполнитьПоОстаткам()

// Процедура заполняет колонку Резерв по резервам под заказ.
//
&НаСервере
Процедура ЗаполнитьКолонкуРезервПоРезервамНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьКолонкуРезервПоРезервам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ОбновитьТипНоменклатурыЗапас();
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
	ОбновитьПризнакиНабора(Объект.Запасы);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоРезервамНаСервере()

// Процедура вызывается при нажатии кнопки "ЗаполнитьПоЗаказу" командной панели
// табличного поля.
//
&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	
	Если Объект.Заказ.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Сначала нужно ВЫБРАТЬ заказ покупателя'");
		Сообщение.Поле = "Объект.Заказ";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	Ответ = Неопределено;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоЗаказуЗавершение", ЭтотОбъект), НСтр(
		"ru = 'Документ будет полностью перезаполнен по ""Заказу"". Продолжить выполнение операции?'"),
		РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ЗаполнитьПоЗаказу" командной панели
// табличного поля. После подтверждения пользователя.
//
&НаКлиенте
Процедура ЗаполнитьПоЗаказуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если ЗаполнитьПоДокументу(Объект.Заказ) Тогда
			
			ЗаполнитьСуммыСкидок();
			
			// Сформируем надпись цены и валюты.
			СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, Объект.ВалютаДокумента, Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.СпециальныйНалоговыйРежим, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
			ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
			
		КонецЕсли;
		
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказу()

// Процедура - обработчик команды НастройкаДокумента.
//
&НаКлиенте
Процедура ШапкаТабличнаяЧасть(Команда)
	
	// 1. Формируем структуру параметров для заполнения формы "Настройка документа".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоложениеЗаказаПокупателяВДокументахОтгрузки", Объект.ПоложениеЗаказаПокупателя);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	Если НесколькоСкладов() Тогда
		СтруктураПараметров.Вставить("ПоложениеСкладаВДокументахОтгрузки", Объект.ПоложениеСклада);
		СтруктураПараметров.Вставить("Доступность", Новый Структура("ПоложениеСкладаВДокументахОтгрузки", НЕ РежимОстаткиИРезервы));
	КонецЕсли;
	
	СтруктураНастройкаДокумента = Неопределено;
	
	ОткрытьФорму("ОбщаяФорма.ШапкаТабличнаяЧасть", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ШапкаТабличнаяЧастьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

// Процедура вызывается после завершения настройки формы пользователем.
//
&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// 2. Открываем форму "Цены и Валюта".
	СтруктураНастройкаДокумента = Результат;
	
	// 3. Применяем изменения, сделанные в форме "Настройка документа".
	Если ТипЗнч(СтруктураНастройкаДокумента) = Тип("Структура") И СтруктураНастройкаДокумента.БылиВнесеныИзменения Тогда
		
		Если СтруктураНастройкаДокумента.Свойство("ПоложениеЗаказаПокупателяВДокументахОтгрузки")
			И Объект.ПоложениеЗаказаПокупателя<>СтруктураНастройкаДокумента.ПоложениеЗаказаПокупателяВДокументахОтгрузки Тогда
			
			Объект.ПоложениеЗаказаПокупателя = СтруктураНастройкаДокумента.ПоложениеЗаказаПокупателяВДокументахОтгрузки;
			ЗаполнениеОбъектовУНФКлиент.ОбработатьИзменениеПоложения(Объект, "Запасы", "Заказ", "ПоложениеЗаказаПокупателя");
			
		КонецЕсли; 
		
		Если СтруктураНастройкаДокумента.Свойство("ПоложениеСкладаВДокументахОтгрузки")
			И Объект.ПоложениеСклада <> СтруктураНастройкаДокумента.ПоложениеСкладаВДокументахОтгрузки Тогда
			
			ШапкаТабличнаяЧастьЗавершениеНаСервере(СтруктураНастройкаДокумента);
			
		КонецЕсли;
		
		УстановитьВидимостьОтПользовательскихНастроек();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШапкаТабличнаяЧастьЗавершениеНаСервере(Результат)
	
	Объект.ПоложениеСклада = Результат.ПоложениеСкладаВДокументахОтгрузки;
	Если НЕ РежимОстаткиИРезервы Тогда
		Если Объект.ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			СтруктураПолей = ЗаполнениеОбъектовУНФ.СтруктурнаяЕдиницаИЯчейкаДляШапки(Объект.Запасы);
			Если ЗначениеЗаполнено(СтруктураПолей.СтруктурнаяЕдиница) Тогда
				ЗаполнитьЗначенияСвойств(Объект, СтруктураПолей);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
				Объект.СтруктурнаяЕдиница = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					Пользователи.ТекущийПользователь(), 
					"ОсновнойСклад");
				Объект.Ячейка = Справочники.Ячейки.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
			СтрокаТабличнойЧасти.Ячейка = Объект.Ячейка;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьВидимостьОтПользовательскихНастроек();
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонАдресЭППриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплату(Команда)
	
	РассчитатьСкидкиНаценки(Команда);
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьОплатуЗавершение", ЭтаФорма);
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КОплате", Объект.СуммаДокумента
										- Объект.ПолученоНаличными
										- Объект.БезналичнаяОплата.Итог("Сумма")
	);
	СтруктураПараметров.Вставить("Сумма", СтруктураПараметров.КОплате);
	СтруктураПараметров.Вставить("КассаККМ", Объект.КассаККМ);
	СтруктураПараметров.Вставить("Документ", Объект);
	
	Если Команда.Имя = "БезналДобавитьОплатуСертификатом" Тогда
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаОплатыСертификатом", СтруктураПараметров, ЭтотОбъект,,,, Оповещение);
		
	ИначеЕсли Команда.Имя = "БезналДобавитьОплатуКартой" Тогда
		ОткрытьФорму("Справочник.ЭквайринговыеТерминалы.Форма.ФормаОплатыКартой", СтруктураПараметров, ЭтотОбъект,,,, Оповещение);
		
	ИначеЕсли Команда.Имя = "БезналДобавитьОплатуБонусами" Тогда
		Если Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
			ДополнительныеПараметры.Вставить("СтруктураПараметров", СтруктураПараметров);
			ОповещениеКарты = Новый ОписаниеОповещения("СчитатьДисконтнуюКартуИДобавитьОплатуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.СчитываниеДисконтнойКарты",, ЭтаФорма,,,, ОповещениеКарты, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.ФормаОплатыБонусами", СтруктураПараметров, ЭтотОбъект,,,, Оповещение);
		КонецЕсли;
		
	ИначеЕсли Команда.Имя = "БезналДобавитьОплатуКредитом" Тогда
		ОткрытьФорму("Справочник.ЭквайринговыеТерминалы.Форма.ФормаОплатыКредитом", СтруктураПараметров, ЭтотОбъект,,,, Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		Если ТакойСертификатУжеЕсть(Результат) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'В таблице оплат уже есть такой сертификат. Повторное добавление невозможно'"));
			Возврат;
		КонецЕсли;
		
		ДобавитьСтрокуОплаты(Результат);
		
		Если Результат.Свойство("ЕстьОплатаБонусами") Тогда
			РаспределитьОплатуБонусамиНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
// Проверяет дубли сертификата в таблице оплат
//
// Параметры:
//  ПараметрыСтрокиОплаты - Структура - результат работы формы добавления оплаты (см. ДобавитьОплату)
//
// Возвращаемое значение
//  Булево - Истина, если в таблице уже есть такой сертификат
//
Функция ТакойСертификатУжеЕсть(ПараметрыСтрокиОплаты)
	
	Если ПараметрыСтрокиОплаты.ВидОплаты <> ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыСтрокиОплаты.НомерСертификата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПоиска = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыСтрокиОплаты);
	Если СтруктураПоиска.Свойство("Сумма") Тогда
		СтруктураПоиска.Удалить("Сумма");
	КонецЕсли;
	Если СтруктураПоиска.Свойство("СуммаПогашенияСертификата") Тогда
		СтруктураПоиска.Удалить("СуммаПогашенияСертификата");
	КонецЕсли;
	
	Если Объект.БезналичнаяОплата.НайтиСтроки(СтруктураПоиска).Количество() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СчитатьДисконтнуюКартуИДобавитьОплатуЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		СчитанаДисконтнаяКарта = Результат.СчитанаДисконтнаяКарта;
		ВыбранаДисконтнаяКарта(Результат.ДисконтнаяКарта);
		ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.ФормаОплатыБонусами", Параметры.СтруктураПараметров, ЭтотОбъект,,,, Параметры.Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьОплатуБонусамиНаСервере()
	
	РаботаСБонусами.РаспределитьОплатуБонусамиКакСкидку(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьБонусы(Команда)
	
	РассчитатьБонусыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьБонусыНаКлиенте()
	
	Если Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РеквизитыБП = РаботаСБонусами.РеквизитыБонуснойПрограммы(Объект.ДисконтнаяКарта);
	
	Если РеквизитыБП.БонуснаяПрограмма.Пустая() Тогда
		Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РеквизитыБП.НеНачислятьПриОплатеБонусами Тогда
		Если РаботаСБонусами.ЕстьОплатаБонусами(Объект.БезналичнаяОплата) Тогда
			Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
				Объект.БонусныеБаллыКНачислению.Очистить();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("БонуснаяПрограмма", РеквизитыБП.БонуснаяПрограмма);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧека(Команда)
	
	ИдентификаторУстройстваФР = ?(ЗначениеЗаполнено(ФискальныйРегистратор),
		ФискальныйРегистратор,
		Неопределено);
	
	Если ИдентификаторУстройстваФР <> Неопределено Тогда
		
		ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено;
		ТранспортныйМодуль = Неопределено;
		ДанныеЕГАИСДостаточны = Ложь;
		
		ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС);
		ОбщиеПараметры.ДатаВремя = ТекущаяДата();
		
		РабочееМестоКассираКлиент.ПредпросмотрЧекаДенежныхДокументов(ОбщиеПараметры, ЭтаФорма, ИдентификаторУстройстваФР);

	Иначе
		
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЗаказуВСервисе(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументОснование", Объект.Ссылка);
	ПараметрыФормы.Вставить("ОрганизацияБизнесСети", Объект.Организация);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказаНаДоставку);
	ПараметрыФормы.Вставить("РежимМастера", 2);
	СервисДоставкиКлиент.ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция НесколькоСкладов()
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкаРМК = РабочееМестоКассираВызовСервера.ПолучитьНастройкуРМК(РабочееМесто);
	Если Не ЗначениеЗаполнено(НастройкаРМК) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НастройкаРМК.СтруктурныеЕдиницы.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеРозничнойТочкиНаСервере()
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов()
	ДополнительныеСвойства = Новый Структура("ИзменениеКлючевыхРеквизитов", Истина);
	СерииНоменклатурыУНФ.ЗаполнитьПризнакиИспользованияСерий(Объект, ДополнительныеСвойства);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПатент()
	
	Объект.Патент = НалогиУНФ.ПатентПоСкладу(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
	Если Не ЗначениеЗаполнено(Объект.Патент) Тогда
		Объект.Патент = Справочники.Патенты.ПолучитьПатентПоУмолчанию(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, возможна ли печать чека на ККТ, и в зависимости от результата
// регулирует видимость предупреждения
//
&НаСервере
Процедура УстановитьВидимостьПредупрежденияОКассире(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Объект.КассаККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		Видимость = Ложь;
		
	Иначе
		
		РеквизитыДокумента = УправлениеНебольшойФирмойКлиентСервер.СформироватьСтруктуруДляПроверкиКассира();
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, Объект);
		РеквизитыКассира = РабочееМестоКассираВызовСервера.ПолучитьРеквизитыКассира(РеквизитыДокумента);
		Видимость = Не ЗначениеЗаполнено(РеквизитыКассира.ФизЛицо);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОтсутствиеКассира",
		"Видимость",
		Видимость);
	
	ЕстьПравоНаСотрудника =  ПравоДоступа("Изменение", Метаданные.Справочники.Сотрудники);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОткрытьСотрудника",
		"Видимость",
		ЕстьПравоНаСотрудника);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НадписьОтсутствиеКассира2",
		"Видимость",
		Не ЕстьПравоНаСотрудника);
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверкаКассираПриСменеОтветственного()
	
	Возврат (Объект.КассаККМ.ИсточникФИОКассираВЧеке = Перечисления.ИсточникиФИОКассираВЧекеККМ.Ответственный)
		И Не Объект.КассаККМ.ИспользоватьБезПодключенияОборудования;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДеталиПодразделения(Подразделение, Организация, Дата)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ПодписьМОЛ", Подразделение.ПодписьМОЛ);
	
	СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Организация, Подразделение, Дата);
	СтруктураДанных.Вставить("СпециальныйНалоговыйРежим", СпециальныйНалоговыйРежим);
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтправкиЭлектронныхЧеков()
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И 
		Объект.КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор Тогда
		Если Объект.КассаККМ.ПодключаемоеОборудование.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
			Элементы.ГруппаНомерЧекаПраваяКолонка.Видимость = Истина;
		Иначе
			Элементы.ГруппаНомерЧекаПраваяКолонка.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаНомерЧекаПраваяКолонка.Видимость = Ложь;
	КонецЕсли;
	
	Если КассаККМИспользоватьБезПодключенияОборудования Тогда
		Элементы.ГруппаНомерЧекаПраваяКолонка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет суммы скидок на клиенте.
//
&НаКлиенте
Процедура ЗаполнитьСуммыСкидок()
	
	Для каждого ТекСтрока Из Объект.Запасы Цикл
		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Новый Структура("РассчитатьСуммуСкидки", Истина));
	КонецЦикла;
	
КонецПроцедуры

// Процедура пересчитывает документ на клиенте.
//
&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Если Не РежимПросмотра Тогда
		
		СуммаТоваров = Объект.Запасы.Итог("Всего");
		
		Если Не Объект.ОперацияСДенежнымиСредствами Тогда
			Объект.СуммаДокумента = СуммаТоваров;
		КонецЕсли;
		
		Элементы.СуммаДокумента.СписокВыбора.Очистить();
		Если СуммаТоваров > 0 Тогда
			ПредставлениеСуммы = НСтр("ru = 'Сумма товаров (%1)'");
			ПредставлениеСуммы = СтрШаблон(ПредставлениеСуммы, СуммаТоваров);
			Элементы.СуммаДокумента.СписокВыбора.Добавить(СуммаТоваров, ПредставлениеСуммы);
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаСдачи = Объект.БезналичнаяОплата.Итог("Сумма")
			   + Объект.Предоплата.Итог("СуммаРасчетов")
			   + Объект.ПолученоНаличными
			   - Объект.СуммаДокумента;
	
	СформироватьПодсказкиКРеквизитам();
	
	ВывестиИнформациюНаДисплейПокупателя();
	
	ОбновитьТаблицуБезналичныхОплат();
	
КонецПроцедуры // ПересчитатьДокументНаКлиенте()

// Процедура пересчитывает документ на клиенте.
//
&НаКлиенте
Процедура СформироватьПодсказкиКРеквизитам()
	
	ЗаголовокСуммаЧека = НСтр("ru='Сумма чека (%Валюта%)'");
	ЗаголовокСуммаЧека = СтрЗаменить(ЗаголовокСуммаЧека, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.СуммаДокумента.Подсказка = ЗаголовокСуммаЧека;
	
	ЗаголовокПолученоНаличными = НСтр("ru='Получено наличными (%Валюта%)'");
	ЗаголовокПолученоНаличными = СтрЗаменить(ЗаголовокПолученоНаличными, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.ПолученоНаличными.Подсказка = ЗаголовокПолученоНаличными;
	
	ЗаголовокОплатаПлатежнымиКартами = НСтр("ru='Платежными картами (%Валюта%)'");
	ЗаголовокОплатаПлатежнымиКартами = СтрЗаменить(ЗаголовокОплатаПлатежнымиКартами, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.ОплатаПлатежнымиКартамиИтогСумма.Подсказка = ЗаголовокОплатаПлатежнымиКартами;
	
	ЗаголовокЗачтенаПредоплата = НСтр("ru='Зачтена предоплата (%Валюта%)'");
	ЗаголовокЗачтенаПредоплата = СтрЗаменить(ЗаголовокЗачтенаПредоплата, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.ПредоплатаИтогСуммаПлатежа.Подсказка = ЗаголовокЗачтенаПредоплата;
	
	ЗаголовокСуммаСдачи = НСтр("ru='Сдача (%Валюта%)'");
	ЗаголовокСуммаСдачи = СтрЗаменить(ЗаголовокСуммаСдачи, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.СуммаСдачи.Подсказка = ЗаголовокСуммаСдачи;
	
	ЗаголовокСуммаТоваров = НСтр("ru='Сумма товаров (%Валюта%)'");
	ЗаголовокСуммаТоваров = СтрЗаменить(ЗаголовокСуммаТоваров, "%Валюта%", Объект.ВалютаДокумента);
	Элементы.ЗапасыИтогВсего.Подсказка = ЗаголовокСуммаТоваров;
	
КонецПроцедуры // ПересчитатьДокументНаКлиенте()

&НаКлиенте
Процедура ПроверитьСуммыОплат(Отказ)
	
	Если Объект.СуммаДокумента > Объект.ПолученоНаличными
		+ Объект.БезналичнаяОплата.Итог("Сумма")
		+ Объект.Предоплата.Итог("СуммаРасчетов") Тогда
		
		ТекстОшибки = НСтр("ru='Сумма оплаты меньше суммы чека'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Поле = "СуммаСдачи";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Объект.СуммаДокумента < (Объект.БезналичнаяОплата.Итог("Сумма") + Объект.Предоплата.Итог("СуммаРасчетов")) Тогда
		
		ТекстОшибки = НСтр("ru='Сумма безналичной оплаты превышает сумму чека'");
		// Если нужно резервировать, то подскажем пользователю, что нужно нажать кнопку "Зарезервировать".
		Если Элементы.Зарезервировать.Видимость И НЕ Элементы.РассчитатьСуммуНаличнойОплаты.Доступность Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + 
				НСтр("ru='Прежде чем вводить сумму оплаты, требуется нажать кнопку %1.'");
			Если РезервироватьЗапасыИИспользоватьЗаказы Тогда	
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", НСтр("ru='""Провести""'"));
			Иначе
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", НСтр("ru='""Зарезервировать""'"));
			КонецЕсли;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Поле = "СуммаСдачи";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		
		Если Объект.СуммаДокумента = 0 Тогда
			ТекстОшибки = НСтр("ru='Сумма чека не может равняться нулю'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "СуммаДокумента",, Отказ);
		КонецЕсли;
		
		Если Объект.Запасы.Количество() > 0 И Объект.СуммаДокумента > Объект.Запасы.Итог("Всего") Тогда
			ТекстОшибки = НСтр("ru='Сумма чека не может превышать сумму товаров'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "СуммаДокумента",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// ПодключаемоеОборудование
// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов, т. к. они не были преобразованы библиотекой
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов, СтруктураДанные.СтруктурнаяЕдиница);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл 
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				Если ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦен", СтруктураДанные.ВидЦен);
					Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
						И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
					Иначе
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
					КонецЕсли;
					СтруктураДанныеНоменклатуры.Вставить("Содержание", "");
					СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки);
				КонецЕсли;
				// ДисконтныеКарты
				СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
				СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", СтруктураДанные.ДисконтнаяКарта);
				// Конец ДисконтныеКарты 
				
				// МинимальныеЦены
				Если СтруктураДанные.Свойство("СтруктурнаяЕдиница") Тогда
					СтруктураДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", СтруктураДанные.СтруктурнаяЕдиница);					
				КонецЕсли;
				// Конец МинимальныеЦены 
				
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ЧекККМ.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	ДобавленныеСтроки = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	// Удалим пустые значения.
	ИндексЭлемента = МассивШтрихкодов.Количество() - 1;
	Пока ИндексЭлемента >= 0 Цикл
		Если НЕ ЗначениеЗаполнено(МассивШтрихкодов[ИндексЭлемента].Штрихкод) Тогда
			МассивШтрихкодов.Удалить(ИндексЭлемента);
		КонецЕсли;
			
		ИндексЭлемента = ИндексЭлемента - 1;
	КонецЦикла;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	// Конец ДисконтныеКарты
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	СтруктураДанные.Вставить("Ячейка", Объект.Ячейка);
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, Неопределено, СтруктураДанные);

	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение"
			, ЭтотОбъект, Новый Структура("СтруктураДанные, ДобавленныеСтроки", СтруктураДанные, ДобавленныеСтроки));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры"
			, ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры));
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения,НоменклатураНабора",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения,ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")));
			Если (ИспользуетсяМаркировкаТабачнойПродукции
				ИЛИ ИспользуетсяМаркировкаШинИПокрышек)
				И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки
				И ТекШтрихкод.Свойство("ДанныеМаркировки")
				И ТекШтрихкод.ДанныеМаркировки.Разобран 
				И ЗначениеЗаполнено(ТекШтрихкод.ДанныеМаркировки.КодМаркировки) Тогда
				МассивСтрокТЧСМаркировкой = Объект.Запасы.НайтиСтроки(Новый Структура("КодМаркировки", ТекШтрихкод.ДанныеМаркировки.КодМаркировки));
				Если МассивСтрокТЧСМаркировкой.Количество() > 0 Тогда
					СтрокаСообщения = НСтр("ru = 'Код маркировки уже присутствует в чеке'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если МассивСтрокТЧ.Количество() = 0
				ИЛИ (ИспользуетсяРегистрацияРозничныхПродажВЕГАИС И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки)
				ИЛИ (ИспользуетсяМаркировкаТабачнойПродукции И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки)
				ИЛИ (ИспользуетсяМаркировкаШинИПокрышек И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки) Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Заказ", "ПоложениеЗаказаПокупателя");
				НоваяСтрока.ТипНоменклатурыЗапас = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас;
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.ИспользоватьХарактеристики = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ИспользоватьХарактеристики;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				Если КэшЗначений.ИспользоватьМинимальныеЦены
					И НоваяСтрока.Свойство("МинимальнаяЦена")
					И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("МинимальнаяЦена") Тогда
					
					НоваяСтрока.МинимальнаяЦена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.МинимальнаяЦена;
					
				КонецЕсли;
				НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.НеобходимостьВводаАкцизнойМарки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки;
				НоваяСтрока.НеобходимостьВводаКодаМаркировки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки;
				Если НоваяСтрока.НеобходимостьВводаКодаМаркировки
					И ТекШтрихкод.Свойство("ДанныеМаркировки")
					И ТекШтрихкод.ДанныеМаркировки.Разобран Тогда
					НоваяСтрока.КодМаркировки = ТекШтрихкод.ДанныеМаркировки.КодМаркировки;
				КонецЕсли;
				Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("Склад") Тогда
					Если СписокДоступныхСкладов.НайтиПоЗначению(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Склад) = Неопределено Тогда
						ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Склад = Объект.СтруктурнаяЕдиница;
						ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
					КонецЕсли;
				КонецЕсли;
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Вставить("СписокДоступныхСкладов", СписокДоступныхСкладов);
				НоваяСтрока.СтруктурнаяЕдиница = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Склад;
				НоваяСтрока.Ячейка = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Ячейка;
				Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					// Наборы
					ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
					// Конец Наборы
					// АвтоматическиеСкидки.
					СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
					// Конец АвтоматическиеСкидки
				Иначе
					РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки
						ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
						ДобавленныеСтроки.Добавить(НоваяСтрока);
					КонецЕсли;
				КонецЕсли;
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки 
					ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
					ДобавленныеСтроки.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
			
			//Агентские платежи
			Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
				НоваяСтрока.ЦенаСАгентскимВознаграждением = 0;
				НоваяСтрока.ДоговорПлатежногоАгента = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ДоговорКонтрагента;
				НоваяСтрока.ДанныеАгентскогоДоговора = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ДанныеАгентскогоДоговора;
				АгентскиеПлатежиУНФКлиентСервер.ВыделитьАгентскоеВознаграждениеВТаблице(Объект, НоваяСтрока);
				Если НоваяСтрока.Цена <> 0 Тогда
					АгентскиеПлатежиУНФКлиентСервер.ЗаполнитьРасчетныеПоляАгентскогоВознаграждения(Объект,, ЭтаФорма);
					СтрокаУслуги = АгентскиеПлатежиУНФКлиентСервер.СтрокаУслугаАгента(Объект.Запасы, НоваяСтрока);
					РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаУслуги);
					ПересчитатьДокументНаКлиенте();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПересчитатьДокументНаКлиенте();
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа, ДобавленныеСтроки",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа, ДобавленныеСтроки);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодовМаркировкаШинИПокрышек(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	ДобавленныеСтроки = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	// Удалим пустые значения.
	ИндексЭлемента = МассивШтрихкодов.Количество() - 1;
	Пока ИндексЭлемента >= 0 Цикл
		Если НЕ ЗначениеЗаполнено(МассивШтрихкодов[ИндексЭлемента].Штрихкод) Тогда
			МассивШтрихкодов.Удалить(ИндексЭлемента);
		КонецЕсли;
			
		ИндексЭлемента = ИндексЭлемента - 1;
	КонецЦикла;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	// Конец ДисконтныеКарты
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	СтруктураДанные.Вставить("БезМаркировок", Ложь);
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, Неопределено, СтруктураДанные);

	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовМаркировкаШинИПокрышекЗавершение"
			, ЭтотОбъект, Новый Структура("СтруктураДанные, ДобавленныеСтроки", СтруктураДанные, ДобавленныеСтроки));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры"
			, ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры));
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки
				И ТекШтрихкод.Свойство("ДанныеМаркировки")
				И ТекШтрихкод.ДанныеМаркировки.Разобран 
				И ЗначениеЗаполнено(ТекШтрихкод.ДанныеМаркировки.КодМаркировки) Тогда
				МассивСтрокТЧСМаркировкой = Объект.Запасы.НайтиСтроки(Новый Структура("КодМаркировки", ТекШтрихкод.ДанныеМаркировки.КодМаркировки));
				Если МассивСтрокТЧСМаркировкой.Количество() > 0 Тогда
					СтрокаСообщения = НСтр("ru = 'Код маркировки уже присутствует в чеке'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЗаполненаМарка = Ложь;
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения,НоменклатураНабора",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения,ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")));
			Если МассивСтрокТЧ.Количество() > 0
				И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки
				И ТекШтрихкод.Свойство("ДанныеМаркировки")
				И ЗначениеЗаполнено(ТекШтрихкод.ДанныеМаркировки.КодМаркировки) Тогда
				Для каждого ТекСтрокаМассива Из МассивСтрокТЧ Цикл
					Если НЕ ЗначениеЗаполнено(ТекСтрокаМассива.КодМаркировки) Тогда
						ТекСтрокаМассива.КодМаркировки = ТекШтрихкод.ДанныеМаркировки.КодМаркировки;
						Если ТекСтрокаМассива.Свойство("СтатусПроверкиГосИС") Тогда
							ТекСтрокаМассива.СтатусПроверкиГосИС = 1;
						КонецЕсли;
						ТекСтрокаМассива.ИндексАкцизнойМарки = 1;
						ЗаполненаМарка = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НЕ ЗаполненаМарка 
				И (МассивСтрокТЧ.Количество() = 0
				ИЛИ ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки) Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.ИспользоватьХарактеристики = ЗначениеЗаполнено(НоваяСтрока.Характеристика);
				НоваяСтрока.ИспользоватьПартии = ЗначениеЗаполнено(НоваяСтрока.Партия);
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.НеобходимостьВводаАкцизнойМарки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки;
				НоваяСтрока.НеобходимостьВводаКодаМаркировки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки;
				Если НоваяСтрока.НеобходимостьВводаКодаМаркировки
					И ТекШтрихкод.Свойство("ДанныеМаркировки")
					И ТекШтрихкод.ДанныеМаркировки.Разобран Тогда
					НоваяСтрока.КодМаркировки = ТекШтрихкод.ДанныеМаркировки.КодМаркировки;
					Если НоваяСтрока.Свойство("СтатусПроверкиГосИС") Тогда
						НоваяСтрока.СтатусПроверкиГосИС = ?(ЗначениеЗаполнено(НоваяСтрока.КодМаркировки), 1, 2);
					КонецЕсли;
					НоваяСтрока.ИндексАкцизнойМарки = ?(ЗначениеЗаполнено(НоваяСтрока.КодМаркировки), 1, 2);
				КонецЕсли;
				Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					// Наборы
					ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
					// Конец Наборы
					// АвтоматическиеСкидки.
					СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
					// Конец АвтоматическиеСкидки
				Иначе
					РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки
						ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
						ДобавленныеСтроки.Добавить(НоваяСтрока);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли НЕ ЗаполненаМарка Тогда
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки 
					ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
					ДобавленныеСтроки.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ПересчитатьДокументНаКлиенте();
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа, ДобавленныеСтроки",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа, ДобавленныеСтроки);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт 
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	ДобавленныеСтроки = Параметры.ДобавленныеСтроки;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
		ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));
	Иначе
		МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения,НоменклатураНабора",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения,ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")));
		Если (ИспользуетсяМаркировкаТабачнойПродукции
			ИЛИ ИспользуетсяМаркировкаШинИПокрышек)
			И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки
			И ТекШтрихкод.Свойство("ДанныеМаркировки")
			И ТекШтрихкод.ДанныеМаркировки.Разобран 
			И ЗначениеЗаполнено(ТекШтрихкод.ДанныеМаркировки.КодМаркировки) Тогда
			МассивСтрокТЧСМаркировкой = Объект.Запасы.НайтиСтроки(Новый Структура("КодМаркировки", ТекШтрихкод.ДанныеМаркировки.КодМаркировки));
			Если МассивСтрокТЧСМаркировкой.Количество() > 0 Тогда
				СтрокаСообщения = НСтр("ru = 'Код маркировки уже присутствует в чеке'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если МассивСтрокТЧ.Количество() = 0
			ИЛИ (ИспользуетсяРегистрацияРозничныхПродажВЕГАИС И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки)
			ИЛИ (ИспользуетсяМаркировкаТабачнойПродукции И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки)
			ИЛИ (ИспользуетсяМаркировкаШинИПокрышек И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки) Тогда
			НоваяСтрока = Объект.Запасы.Добавить();
			ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Заказ", "ПоложениеЗаказаПокупателя");
			НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
			НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
			НоваяСтрока.ИспользоватьХарактеристики = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ИспользоватьХарактеристики;
			НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
			НоваяСтрока.Количество = ТекШтрихкод.Количество;
			НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
			НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
			НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
			НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
			НоваяСтрока.НеобходимостьВводаАкцизнойМарки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки;
			НоваяСтрока.НеобходимостьВводаКодаМаркировки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки;
			НоваяСтрока.ТипНоменклатурыЗапас = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас;
			Если НоваяСтрока.НеобходимостьВводаКодаМаркировки
				И ТекШтрихкод.Свойство("ДанныеМаркировки")
				И ТекШтрихкод.ДанныеМаркировки.Разобран Тогда
				НоваяСтрока.КодМаркировки = ТекШтрихкод.ДанныеМаркировки.КодМаркировки;
			КонецЕсли;
			Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
				// Наборы
				ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
				// Конец Наборы
				// АвтоматическиеСкидки.
				СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
				// Конец АвтоматическиеСкидки
			Иначе
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки
					ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
					ДобавленныеСтроки.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЕсли;
		Иначе
			НоваяСтрока = МассивСтрокТЧ[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
			РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки 
				ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
				ДобавленныеСтроки.Добавить(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
			СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);

	ВыполнитьДействияПоЗавершениюДобавленияШКСервер();
	
	Если ДобавленныеСтроки.Количество() > 0 Тогда
		ОткрытьВводАкцизнойМарки(ДобавленныеСтроки[0]);
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовМаркировкаШинИПокрышекЗавершение(СтруктураНоменклатуры, Параметры) Экспорт 
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	ДобавленныеСтроки = Параметры.ДобавленныеСтроки;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
		ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));
	Иначе
		Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки
			И ТекШтрихкод.Свойство("ДанныеМаркировки")
			И ТекШтрихкод.ДанныеМаркировки.Разобран 
			И ЗначениеЗаполнено(ТекШтрихкод.ДанныеМаркировки.КодМаркировки) Тогда
			МассивСтрокТЧСМаркировкой = Объект.Запасы.НайтиСтроки(Новый Структура("КодМаркировки", ТекШтрихкод.ДанныеМаркировки.КодМаркировки));
			Если МассивСтрокТЧСМаркировкой.Количество() > 0 Тогда
				СтрокаСообщения = НСтр("ru = 'Код маркировки уже присутствует в чеке'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗаполненаМарка = Ложь;
		МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения,НоменклатураНабора",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения,ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")));
		Если МассивСтрокТЧ.Количество() > 0
			И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки
			И ТекШтрихкод.Свойство("ДанныеМаркировки")
			И ЗначениеЗаполнено(ТекШтрихкод.ДанныеМаркировки.КодМаркировки) Тогда
			Для каждого ТекСтрокаМассива Из МассивСтрокТЧ Цикл
				Если НЕ ЗначениеЗаполнено(ТекСтрокаМассива.КодМаркировки) Тогда
					ТекСтрокаМассива.КодМаркировки = ТекШтрихкод.ДанныеМаркировки.КодМаркировки;
					Если ТекСтрокаМассива.Свойство("СтатусПроверкиГосИС") Тогда
						ТекСтрокаМассива.СтатусПроверкиГосИС = 1;
					КонецЕсли;
					ТекСтрокаМассива.ИндексАкцизнойМарки = 1;
					ЗаполненаМарка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если НЕ ЗаполненаМарка 
			И (МассивСтрокТЧ.Количество() = 0
			ИЛИ ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки) Тогда
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
			НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
			НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
			НоваяСтрока.ИспользоватьХарактеристики = ЗначениеЗаполнено(НоваяСтрока.Характеристика);
			НоваяСтрока.ИспользоватьПартии = ЗначениеЗаполнено(НоваяСтрока.Партия);
			НоваяСтрока.Количество = ТекШтрихкод.Количество;
			НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
			НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
			НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
			НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
			НоваяСтрока.НеобходимостьВводаАкцизнойМарки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки;
			НоваяСтрока.НеобходимостьВводаКодаМаркировки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки;
			Если НоваяСтрока.НеобходимостьВводаКодаМаркировки
				И ТекШтрихкод.Свойство("ДанныеМаркировки")
				И ТекШтрихкод.ДанныеМаркировки.Разобран Тогда
				НоваяСтрока.КодМаркировки = ТекШтрихкод.ДанныеМаркировки.КодМаркировки;
				Если НоваяСтрока.Свойство("СтатусПроверкиГосИС") Тогда
					НоваяСтрока.СтатусПроверкиГосИС = ?(ЗначениеЗаполнено(НоваяСтрока.КодМаркировки), 1, 2);
				КонецЕсли;
				НоваяСтрока.ИндексАкцизнойМарки = ?(ЗначениеЗаполнено(НоваяСтрока.КодМаркировки), 1, 2);
			КонецЕсли;
			Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
				// Наборы
				ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
				// Конец Наборы
				// АвтоматическиеСкидки.
				СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
				// Конец АвтоматическиеСкидки
			Иначе
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки
					ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
					ДобавленныеСтроки.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ ЗаполненаМарка Тогда
			НоваяСтрока = МассивСтрокТЧ[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
			РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки 
				ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
				ДобавленныеСтроки.Добавить(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
			СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	ВыполнитьДействияПоЗавершениюДобавленияШКСервер();
	
	Если ДобавленныеСтроки.Количество() > 0 Тогда
		ОткрытьВводАкцизнойМаркиШиныИПокрышки(ДобавленныеСтроки[0]);
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПоЗавершениюДобавленияШКСервер()
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Или ИнтеграцияИСМПВызовСервера.ВестиУчетМаркируемойПродукции() Тогда
		
		Для Каждого Элемент Из ДанныеШтрихкодов Цикл
			ОбработатьКодМаркировки(Элемент);	
		КонецЦикла;
		
	Иначе
		
		ПолученыШтрихкодыБезГОСИС(ДанныеШтрихкодов);
		
	КонецЕсли;
	
КонецПроцедуры // ПолученыШтрихкоды()

#Область Штрихкодирование

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект, Новый Структура("ЭтоВызовОповещенияОбработкиКодаМаркировки", Истина));
	
КонецФункции

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИсходныеДанные.Свойство("Количество") Тогда
		ПересчитатьДокументНаКлиенте();
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	ШтрихкодКоличество = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ИсходныеДанные, Ложь);
	// ++( ГосИС 1.1.1.12
	//ШтрихкодКоличество.Штрихкод = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ИсходныеДанные.Штрихкод);
	ШтрихкодированиеИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ШтрихкодКоличество);
	//)++
	
	РезультатОбработки = ОбработатьВводШтрихкода(ШтрихкодКоличество, Неопределено, ПараметрыСканирования);
	
	ПересчитатьДокументНаКлиенте();
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
		И ДополнительныеПараметры.Свойство("ЭтоВызовОповещенияОбработкиКодаМаркировки")
		И ДополнительныеПараметры.ЭтоВызовОповещенияОбработкиКодаМаркировки Тогда
		
		ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода.ТребуетсяСопоставлениеНоменклатуры = Ложь;
		
	КонецЕсли;
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
	Если ТребуетсяОбработкаШтрихкода Тогда
		
		// приводим к ожидаемому типу
		Если ТипЗнч(ИсходныеДанные) = Тип("Структура") Тогда
			МассивШтрихкодов = Новый Массив();
			МассивШтрихкодов.Добавить(ИсходныеДанные);
		ИначеЕсли  ТипЗнч(ИсходныеДанные) = Тип("Массив") Тогда
			МассивШтрихкодов = ИсходныеДанные;
		КонецЕсли;
		
		ПолученыШтрихкодыБезГОСИС(МассивШтрихкодов);
		ТребуетсяОбработкаШтрихкода = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода  = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                        = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования        = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода              = ИсходныеДанные;
	ПараметрыЗавершенияВводаШтрихкода.ЗавершениеОбработки          = "ОбработатьКодМаркировки";
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаСервере
Функция ОбработатьВводШтрихкода(ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования);
		
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	Если ТипЗнч(РезультатОбработкиШтрихкода.ДобавленныеСтроки) = Тип("Массив") Тогда
		
		Для Каждого ДобавленнаяСтрока Из РезультатОбработкиШтрихкода.ДобавленныеСтроки Цикл
			
			СерииНоменклатурыУНФКлиентСервер.ОбновитьСтроковоеПредставлениеСерийНоменклатурыСтроки(ДобавленнаяСтрока, Объект, "КлючСвязи", "СерииНоменклатуры");
			
		КонецЦикла;
		
	КонецЕсли;

	Если ТипЗнч(РезультатОбработкиШтрихкода.ИзмененныеСтроки) = Тип("Массив") Тогда
		
		Для Каждого ИзмененнаяСтрока Из РезультатОбработкиШтрихкода.ИзмененныеСтроки Цикл
			
			СерииНоменклатурыУНФКлиентСервер.ОбновитьСтроковоеПредставлениеСерийНоменклатурыСтроки(ИзмененнаяСтрока, Объект, "КлючСвязи", "СерииНоменклатуры");
			
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Функция ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецФункции

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Процедура ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования)
	
	ТребуетсяОбработкаШтрихкода = РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода;
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

#КонецОбласти

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкодыБезГОСИС(ДанныеШтрихкодов)
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	ДобавленныеСтроки	= НеДобавленныеШтрихкоды.ДобавленныеСтроки;
	Если ДобавленныеСтроки.Количество() > 0 Тогда
		ОткрытьВводАкцизнойМарки(ДобавленныеСтроки[0]);
		Возврат;
	КонецЕсли;
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтаФорма, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтаФорма,,,,Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкодыБезГОСИС()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			ЗаполняемыйЭлемент = ЭлементМассива;
			Для каждого ТекЭлемент Из НеизвестныеШтрихкоды Цикл
				Если ЭлементМассива.Штрихкод = ТекЭлемент.Штрихкод Тогда
					ЗаполняемыйЭлемент = ТекЭлемент;
				КонецЕсли;
			КонецЦикла;
			МассивШтрихкодов.Добавить(ЗаполняемыйЭлемент);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ПересчитатьДокументНаКлиенте();
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
КонецПроцедуры
// Конец ПодключаемоеОборудование

// Процедура заполнения списка видов платежных карт.
//
&НаСервере
Процедура ПолучитьСписокВыбораВидовПлатежныхКарт()
	
	МассивВидовПлатежныхКарт = Справочники.ЭквайринговыеТерминалы.ВидыПлатежныхКарт(Объект.ЭквайринговыйТерминал);
	
	Элементы.ОплатаПлатежнымиКартамиВидПлатежнойКарты.СписокВыбора.ЗагрузитьЗначения(МассивВидовПлатежныхКарт);
	
КонецПроцедуры // ПолучитьСписокВыбораВидовПлатежныхКарт()

// Получает ссылки на внешнее оборудование.
//
&НаСервере
Процедура ПолучитьСсылкиНаОборудование()

	ФискальныйРегистратор = ?(
		ИспользоватьПодключаемоеОборудование // Проверка на включенную ФО "Использовать ПО"
	  И ЗначениеЗаполнено(Объект.КассаККМ)
	  И ЗначениеЗаполнено(Объект.КассаККМ.ПодключаемоеОборудование),
	  Объект.КассаККМ.ПодключаемоеОборудование.Ссылка,
	  Справочники.ПодключаемоеОборудование.ПустаяСсылка()
	);

	ЭквайринговыйТерминал = ?(
		ИспользоватьПодключаемоеОборудование
	  И ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал)
	  И ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал.ПодключаемоеОборудование)
	  И НЕ Объект.ЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования,
	  Объект.ЭквайринговыйТерминал.ПодключаемоеОборудование,
	  Справочники.ПодключаемоеОборудование.ПустаяСсылка()
	);

	УстановитьВидимостьИДоступность();
	
КонецПроцедуры // ПолучитьСсылкиНаОборудование()

&НаСервере
Процедура УстановитьВидимостьПоНалогообложению()
	
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда	
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		Элементы.Патент.Видимость = Ложь;
	Иначе
		СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, Объект.Дата);
		Если СистемаНалогообложенияСтруктура.ПрименяетсяПатент Тогда
			Элементы.Патент.Видимость = Истина;
		Иначе
			Элементы.Патент.Видимость = Ложь;
		КонецЕсли;
		// Если только патент и он только один, подставим его
		Если СистемаНалогообложенияСтруктура.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок
			И СистемаНалогообложенияСтруктура.ПрименяетсяПатент 
			И Элементы.Патент.Видимость
			И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				ЗаполнитьПатент();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	Элементы.ГруппаАвтоматизированнойОплатыКартами.Видимость = ЗначениеЗаполнено(ЭквайринговыйТерминал);
	
	// Наборы
	Элементы.ЗапасыКартинкаНабора.Видимость			= Ложь;
	Для каждого Стр Из Объект.Запасы Цикл
		Если Стр.КартинкаНабора>0 Тогда
			Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	// Конец Наборы
	
КонецПроцедуры

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения
// организации.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС()
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	УстановитьВидимостьПоНалогообложению();
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			КонецЕсли;
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(
				Объект.СуммаВключаетНДС,
				СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
				СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100
			);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
	Иначе
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Наборы
	Если НЕ СтруктураДанные.Свойство("ЕдиницаИзмерения") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	КонецЕсли; 
	Если НЕ СтруктураДанные.Свойство("Коэффициент") Тогда
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли; 
	КонецЕсли;
	// Конец Наборы
	
	СтруктураДанные.Вставить("ЭтоЗапас", (СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
								ИЛИ (СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")));
	
	СтруктураДанные.Вставить(
		"Содержание",
		ПечатьДокументовУНФ.ПредставлениеНоменклатурыДляПечати(
		?(ЗначениеЗаполнено(СтруктураДанные.Номенклатура.НаименованиеПолное),
		СтруктураДанные.Номенклатура.НаименованиеПолное, СтруктураДанные.Номенклатура.Наименование),
		СтруктураДанные.Характеристика, СтруктураДанные.Номенклатура.Артикул)
	);
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли;
	// Конец Характеристики
	
	Если СтруктураДанные.Свойство("Цена") И ЗначениеЗаполнено(СтруктураДанные.Цена) Тогда
		// При подборе наборов расчет цены не требуется - используется цена, указанная в подборе
	ИначеЕсли СтруктураДанные.Свойство("ВидЦен") Тогда
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));

	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанные.ДисконтнаяКарта) Тогда
		ТекПроцент = СтруктураДанные.ПроцентСкидкиНаценки;
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", ТекПроцент + СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
	КонецЕсли;
	
	СтруктураДанные.Вставить("НеобходимостьВводаАкцизнойМарки", СтруктураДанные.Номенклатура.ВидАлкогольнойПродукции.Маркируемый);
	СтруктураДанные.Вставить("НеобходимостьВводаКодаМаркировки", НЕ СтруктураДанные.Номенклатура.ВидПродукцииИС.Пустая());
	
	Если Не СтруктураДанные.Свойство("Склад") Тогда
		СтруктураДанные.Вставить("Склад", СтруктураДанные.Номенклатура.Склад);
		СтруктураДанные.Вставить("Ячейка", СтруктураДанные.Номенклатура.Ячейка);
	КонецЕсли;
	
	// Наборы
	НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	// Конец Наборы
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии")
			Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации")
				Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	// ИнтеграцияГосИС
		ИнтеграцияИСМПУНФ.ЗаполнитьСлужебныеРеквизитыИСМП(СтруктураДанные);
	// Конец ИнтеграцияГосИС
	
	// Агентские платежи
	АгентскиеПлатежиУНФ.ЗаполнитьДоговорПлатежногоАгентаВСтроке(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли;
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));
	
	// Наборы
	НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	// Конец Наборы
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("РазностьДат", ДокументыУНФ.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением));
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, ПараметрыРасчета = Неопределено)
	
	Если ПараметрыРасчета = Неопределено Тогда
		
		ПараметрыРасчета = Новый Структура("СброситьФлагСкидкиРассчитаны", Истина);
		
	КонецЕсли;
	
	ПараметрыРасчета.Вставить("ИспользоватьМинимальныеЦены", КэшЗначений.ИспользоватьМинимальныеЦены);

	РозничныеПродажиКлиент.РассчитатьСуммуВСтрокеТабличнойЧасти(ЭтотОбъект, СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(ПараметрыРасчета);

	// АвтоматическиеСкидки.
	ТребуетсяПересчет = СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
	
	// Если была изменена картинка, то фокус уходит из ТЧ и процедура ПересчитатьДокументНаКлиенте() не вызывается.
	Если ТребуетсяПересчет Тогда
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Серии номенклатуры
	Если ИспользоватьСерииНоменклатурыОстатки <> Неопределено Тогда
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	НоваяСтрока = Неопределено;
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗагрузки.Номенклатура, "ТипНоменклатуры, Вес, Объем, ЭтоНабор, СпособРасчетаЦеныНабора");
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
			
			СтатусПартии = Новый СписокЗначений;
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
			
			СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
			СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", СтрокаЗагрузки.ЕдиницаИзмерения);
			СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
			
			Если ЗначенияРеквизитов.ЭтоНабор Тогда
				
				// Наборы
				Если ЗначениеЗаполнено(НоваяСтрока.Цена) 
					И ЗначенияРеквизитов.СпособРасчетаЦеныНабора <> Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих Тогда
					СтруктураДанныеНоменклатуры.Вставить("Цена", НоваяСтрока.Цена);
				КонецЕсли;
				Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
					СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
				КонецЕсли;
				
				// ДисконтныеКарты
				СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
				СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
				// Конец ДисконтныеКарты
				
				ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);
				
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
				Если СтруктураДанные.Свойство("Склад") Тогда
					Если СписокДоступныхСкладов.НайтиПоЗначению(СтруктураДанные.Склад) = Неопределено Тогда
						СтруктураДанные.Склад = Объект.СтруктурнаяЕдиница;
						СтруктураДанные.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
					КонецЕсли;
				КонецЕсли;
				СтруктураДанные.Вставить("СписокДоступныхСкладов", СписокДоступныхСкладов);
				
				ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, СтруктураДанные);
				
				ЗаполнитьПризнакиИспользованияХарактеристик();
				
				Продолжить;
				// Конец Наборы
				
			Иначе
				
				НоваяСтрока.ТипНоменклатурыЗапас = (ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
												ИЛИ (ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
				
				Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки
					И ЗначениеЗаполнено(СтрокаЗагрузки.КодАкцизнойМарки) Тогда
					ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
					
					СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
					СтрокаАкцизнаяМарка.КлючСвязи = НоваяСтрока.КлючСвязи;
					СтрокаАкцизнаяМарка.КодАкцизнойМарки = СтрокаЗагрузки.КодАкцизнойМарки;
					
					Если НЕ ЗначениеЗаполнено(СтрокаАкцизнаяМарка.АкцизнаяМарка) Тогда
						СтрокаАкцизнаяМарка.АкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", СтрокаАкцизнаяМарка.КодАкцизнойМарки);
					КонецЕсли;
					
					НоваяСтрока.СтатусПроверкиГосИС = ?(ЗначениеЗаполнено(СтрокаАкцизнаяМарка.КодАкцизнойМарки), 1, 2);
				КонецЕсли;
				
				НоваяСтрока.СуммаСкидкиНаценки = (НоваяСтрока.Количество * НоваяСтрока.Цена) - НоваяСтрока.Сумма - НоваяСтрока.СуммаАвтоматическойСкидки;
				
				ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

				СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
				
				Если НоваяСтрока.Свойство("СтруктурнаяЕдиница") Тогда
					Если СписокДоступныхСкладов.НайтиПоЗначению(НоваяСтрока.СтруктурнаяЕдиница) = Неопределено Тогда
						НоваяСтрока.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
						НоваяСтрока.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			// Характеристики
			НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
			НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
			НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
			
			Если СтруктураДанные.ИспользоватьХарактеристики
				Тогда
				НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
			// Конец Характеристики
			
			//Партии
			НоваяСтрока.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
			НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
			
			НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, СтруктураДанные.Партия);
			// Конец Партии
			
			НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
			
			// ИнтеграцияГосИС
			Если ФОВестиУчетМаркируемойПродукцииИСМП Тогда
				ИнтеграцияИСМПУНФ.ЗаполнитьСлужебныеРеквизитыИСМПВСтрокеТЧ(НоваяСтрока);
			КонецЕсли;
			// Конец ИнтеграцияГосИС
			
			//Агентские платежи
			Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
				НоваяСтрока.ДоговорПлатежногоАгента = СтруктураДанные.ДоговорКонтрагента;
				НоваяСтрока.ДанныеАгентскогоДоговора = СтруктураДанные.ДанныеАгентскогоДоговора;
				АгентскиеПлатежиУНФКлиентСервер.ВыделитьАгентскоеВознаграждениеВТаблице(Объект, НоваяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");

	// АвтоматическиеСкидки
	Если ТаблицаДляЗагрузки.Количество() > 0 Тогда
		СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	КонецЕсли;
	
	Если НоваяСтрока <> Неопределено Тогда
		Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Запасы", Новый Структура);
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТолькоПросмотр", 		  ЭтотОбъект.ТолькоПросмотр);
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	  Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость", Объект.НДСВключатьВСтоимость);
	СтруктураПараметров.Вставить("Организация",			  Компания);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("ДоступностьВалютыДокумента", Ложь);
	СтруктураПараметров.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураПараметров.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
	СтруктураПараметров.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	
	ЦенообразованиеКлиент.ДополнитьСтруктуруВызоваФормыЦеныИВалютыСтруктурнойЕдиницей(Объект, Объект.Запасы, Элементы.Запасы.ТекущиеДанные, СтруктураПараметров);

	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
// Процедура-обработчик результата открытия формы "Цены и валюты"
//
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	// 3. Перезаполняем табличную часть "Затраты" если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура")
	   И РезультатЗакрытия.БылиВнесеныИзменения Тогда
		
		Объект.ВидЦен = РезультатЗакрытия.ВидЦен;
		Объект.ВидСкидкиНаценки = РезультатЗакрытия.ВидСкидки;
		// ДисконтныеКарты
		// В чеках не проверяем контрагента, т.к. все продажи обезличенные.
		Объект.ДисконтнаяКарта = РезультатЗакрытия.ДисконтнаяКарта;
		
		Если ЗначениеЗаполнено(РезультатЗакрытия.ДисконтнаяКарта) Тогда
			КонтрагентИзменился = РозничныеПродажиКлиент.ВыбранаДисконтнаяКарта(ЭтотОбъект, РезультатЗакрытия.ДисконтнаяКарта);
			Если КонтрагентИзменился Тогда
				КонтрагентПриИзменении(Элементы.Контрагент);
			КонецЕсли;
		КонецЕсли;
		
		Объект.ДисконтнаяКарта = РезультатЗакрытия.ДисконтнаяКарта;
		Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатЗакрытия.ПроцентСкидкиПоДисконтнойКарте;
		
		ОбновитьКартинкуДисконтнойКарты();
		
		// Конец ДисконтныеКарты
		Объект.НалогообложениеНДС = РезультатЗакрытия.НалогообложениеНДС;
		Объект.СпециальныйНалоговыйРежим = РезультатЗакрытия.СпециальныйНалоговыйРежим;
		Объект.СуммаВключаетНДС = РезультатЗакрытия.СуммаВключаетНДС;
		Объект.НДСВключатьВСтоимость = РезультатЗакрытия.НДСВключатьВСтоимость;
		
		// Пересчитываем цены по виду цен.
		Если РезультатЗакрытия.ПерезаполнитьЦены Тогда
			ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);
			ЗаполнитьСуммыСкидок();
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			  И РезультатЗакрытия.ПересчитатьЦены Тогда
			ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Запасы", РезультатЗакрытия.КурсПересчетаЦен);
			ЗаполнитьСуммыСкидок();
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если РезультатЗакрытия.НалогообложениеНДС <> РезультатЗакрытия.ПредНалогообложениеНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
			ЗаполнитьСуммыСкидок();
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И НЕ РезультатЗакрытия.СуммаВключаетНДС = РезультатЗакрытия.ПредСуммаВключаетНДС Тогда
			ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Запасы");
			ЗаполнитьСуммыСкидок();
		КонецЕсли;
		
		// ДисконтныеКарты
		Если РезультатЗакрытия.ПерезаполнитьСкидки И НЕ РезультатЗакрытия.ПерезаполнитьЦены Тогда
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект, "Запасы");
			ЗаполнитьСуммыСкидок();
		КонецЕсли;
		// Конец ДисконтныеКарты
		
		// АвтоматическиеСкидки
		Если РезультатЗакрытия.ПерезаполнитьСкидки ИЛИ РезультатЗакрытия.ПерезаполнитьЦены ИЛИ РезультатЗакрытия.ПересчитатьЦены Тогда
			СброситьФлагСкидкиРассчитаныКлиент("ПерезаполнениеПоДаннымФормыЦеныИВалюта");
		КонецЕсли;
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, Объект.ВалютаДокумента, Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.СпециальныйНалоговыйРежим, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	// Обновим подвал документа
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			Если СтруктураНадписи.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
				ТекстНадписи = ТекстНадписи + НСтр("ru = ' %Курс%'");
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(СтруктураНадписи.ВалютаДокумента)));
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Курс%", СокрЛП(Строка(СтруктураНадписи.Курс)));
			Иначе
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Вид цен.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦен%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидЦен%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(СтруктураНадписи.ВидЦен)));
	КонецЕсли;
	
	// Вид скидки наценки.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидСкидки) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидСкидкиНаценки%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидСкидкиНаценки%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидСкидкиНаценки%", СокрЛП(Строка(СтруктураНадписи.ВидСкидки)));
	КонецЕсли;
	
	// Дисконтная карта.
	Если ЗначениеЗаполнено(СтруктураНадписи.ДисконтнаяКарта) И ДисконтныеКартыУНФВызовСервера.СтарыйМеханизмСкидок(СтруктураНадписи.ДисконтнаяКарта) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ДисконтнаяКарта%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ДисконтнаяКарта%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ДисконтнаяКарта%", Строка(СтруктураНадписи.ПроцентСкидкиПоДисконтнойКарте)+"% по карте"); //СокрЛП(Строка(СтруктураНадписи.ДисконтнаяКарта)));
	КонецЕсли;	
	
	// Налогообложение НДС.
	Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %НалогообложениеНДС%'");
		КонецЕсли;	
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", СокрЛП(Строка(СтруктураНадписи.НалогообложениеНДС)));
	КонецЕсли;
	
	// Специальный налоговый режим.
	Если ЗначениеЗаполнено(СтруктураНадписи.СпециальныйНалоговыйРежим)
		И СтруктураНадписи.СпециальныйНалоговыйРежим <> ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется") Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%СпециальныйНалоговыйРежим%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %СпециальныйНалоговыйРежим%'");
		КонецЕсли;	
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%СпециальныйНалоговыйРежим%", СокрЛП(Строка(СтруктураНадписи.СпециальныйНалоговыйРежим)));
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда	
		Если СтруктураНадписи.СуммаВключаетНДС Тогда	
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()	

&НаСервере
Функция ПроверитьВалютуДокументаОснования(БратьКурсНаТекущуюДату = Ложь)
	
	// Если валюта документа-основания не совпадает с валютой текущего документа, то пересчитаем суммы и
	// автоматические скидки.
	Если НЕ Объект.Заказ.Пустая() Тогда
		Если Объект.ВалютаДокумента <> Объект.Заказ.ВалютаДокумента Тогда
			
			ТекстСообщения = НСтр("ru = 'Валюта документа-основания (%1) отличается от валюты чека ККМ (%2). Суммы были пересчитаны.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Объект.Заказ.ВалютаДокумента.СимвольноеПредставление);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Объект.ВалютаДокумента.СимвольноеПредставление);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
			
			ЦенообразованиеСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, Объект.Заказ.ВалютаДокумента, "Запасы", БратьКурсНаТекущуюДату);
			
			ИспользоватьАвтоСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
			Если ИспользоватьАвтоСкидки И Объект.Запасы.Количество() <> 0 Тогда
				
				СтруктураПараметры = Новый Структура;
				СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
				СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
				
				РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
				
			ИначеЕсли ИспользоватьАвтоСкидки Тогда
				
				Если Объект.СкидкиНаценки.Количество() > 0 Тогда
					Объект.СкидкиНаценки.Очистить();
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Функция ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура();
	СтруктураНадписи.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураНадписи.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
	СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ВалютаРасчетов", Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("Курс", Курс);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("УчетВалютныхОпераций", УчетВалютныхОпераций);
	СтруктураНадписи.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураНадписи.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
	СтруктураНадписи.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураНадписи.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	УстановитьВидимостьПоНалогообложению();
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
	// Конец Наборы
	
	УстановитьВидимостьИДоступность();

	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли; 
	
	Если КэшЗначений.ИспользоватьМинимальныеЦены Тогда
		ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	КонецЕсли;
	
	Если ПроверитьВалютуДокументаОснования() Тогда
		Возврат Истина;
	Иначе
		Если НЕ Объект.СкидкиРассчитаны Тогда
	 		Объект.СкидкиРассчитаны = Истина;
		КонецЕсли;
		Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЗаполнитьПоДокументу()

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	// Наборы
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.НоменклатураНабора", Справочники.Номенклатура.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыНоменклатура,ЗапасыХарактеристика,ЗапасыКоличество,ЗапасыЕдиницаИзмерения");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	// Конец Наборы
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.ПроцентСкидкиНаценки", 100);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.СуммаСкидкиНаценки", Новый ПолеКомпоновкиДанных("Объект.Запасы.Сумма"),ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	// Скидки
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПроцентСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СуммаСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "сумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПроцентАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СуммаАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "сумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);	
	// Конец Скидки
	
	// Ячейки
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ЯчейкаДоступна", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЯчейка");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЯчейкаДляРежимаОстатки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "");
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	// Доступность колонки СтруктурнаяЕдиница
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ТипНоменклатурыЗапас", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСтруктурнаяЕдиница,ЗапасыЯчейка,ЗапасыСтруктурнаяЕдиницаДляРежимаОстатки,ЗапасыЯчейкаДляРежимаОстатки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Для товаров>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	// Характеристики
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
	// КонецХарактеристики
	
	НоменклатураВДокументахСервер.УстановитьУсловноеОформлениеЗапасыИРезервы(ЭтаФорма);
	
	// Минимальные цены
	ЦенообразованиеСервер.УстановитьУсловноеОформлениеМинимальнойЦены(УсловноеОформление, "Запасы", ?(КэшЗначений.Свойство("ИспользоватьМинимальныеЦены"), КэшЗначений.ИспользоватьМинимальныеЦены, Ложь));

КонецПроцедуры

&НаСервере
Функция ПоляКИДляОтправкиЧека()
	
	ПоляКИ = Новый Соответствие;
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Элементы.АдресЭП.Имя);
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, Элементы.Телефон.Имя);
	
	Возврат ПоляКИ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИ)
	
	Если ДанныеКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АдресЭП = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Объект.Телефон = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуОплаты(ДанныеСтроки)
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки 
		И ДанныеСтроки.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.БанковскаяКарта") Тогда
		
		СуммыПоДоговорамПлатежныхАгентов = Объект.Запасы.Выгрузить();
		СуммыПоДоговорамПлатежныхАгентов.Свернуть("ДоговорПлатежногоАгента", "Всего");
		СуммыПоДоговорамПлатежныхАгентов.Сортировать("ДоговорПлатежногоАгента");
		
		Если СуммыПоДоговорамПлатежныхАгентов.Количество() = 1 Тогда
			
			ДанныеСтроки.Вставить("ДоговорПлатежногоАгента", СуммыПоДоговорамПлатежныхАгентов[0].ДоговорПлатежногоАгента);
			
		ИначеЕсли СуммыПоДоговорамПлатежныхАгентов.Количество() > 1 Тогда
			
			ОплаченоНаличнымиОстаток = Объект.ПолученоНаличными;
			ОплаченоБезналичнымиОстаток = ДанныеСтроки.Сумма;
			
			Для каждого СтрокаСуммы Из СуммыПоДоговорамПлатежныхАгентов Цикл
				
				Если СтрокаСуммы.Всего >= ОплаченоНаличнымиОстаток Тогда
					СтрокаСуммы.Всего = СтрокаСуммы.Всего - ОплаченоНаличнымиОстаток;
				Иначе
					СтрокаСуммы.Всего = 0;
				КонецЕсли;
				
				Если СтрокаСуммы.Всего = 0 Тогда
					Продолжить;
				Иначе
					
					ДанныеСтроки.Вставить("ДоговорПлатежногоАгента", СтрокаСуммы.ДоговорПлатежногоАгента);
					
					СтрокаОплаты = Объект.БезналичнаяОплата.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОплаты, ДанныеСтроки);
					СтрокаОплаты.Сумма = ОплаченоБезналичнымиОстаток;
					
					Если СтрокаСуммы.Всего >= ОплаченоБезналичнымиОстаток Тогда
						Прервать;
					Иначе
						СтрокаОплаты.Сумма = СтрокаСуммы.Всего;
						ОплаченоБезналичнымиОстаток = ОплаченоБезналичнымиОстаток - СтрокаСуммы.Всего;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Записать();
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаОплаты = Объект.БезналичнаяОплата.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаОплаты, ДанныеСтроки);
	Если СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.БанковскаяКарта") Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуБезналичныхОплат()
	
	Для Каждого СтрокаОплаты Из Объект.БезналичнаяОплата Цикл
		РозничныеПродажиСервер.ЗаполнитьОписаниеОплаты(СтрокаОплаты);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОплатуЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Элементы.БезналичнаяОплата.ТекущиеДанные, Результат);
		
		Если Результат.Свойство("ЕстьОплатаБонусами") Тогда
			РаспределитьОплатуБонусамиНаСервере();
		КонецЕсли;
		
		ПересчитатьДокументНаКлиенте();
		
	ИначеЕсли Результат = "Удалить строку" Тогда
		
		Объект.БезналичнаяОплата.Удалить(Элементы.БезналичнаяОплата.ТекущаяСтрока);
		Записать();
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьЦенуСертификата(Результат, ВыбраннаяСтрока) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ВыбраннаяСтрока.Цена = Результат;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкуДисконтнойКарты()
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Команды.СчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.СчитанаДисконтнаяКарта;
	Иначе
		Команды.СчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.СчитатьДисконтнуюКарту;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиУчетаВНалогообложении()
	
	Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
	Если Объект.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН Тогда
		ЗаполнитьПатент();
	Иначе
		Объект.Патент = Справочники.Патенты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтрагентаИДоговорИзЗаказа(Заказ)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Контрагент", Заказ.Контрагент);
	СтруктураРеквизитов.Вставить("Договор", Заказ.Договор);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, Договор, Контрагент)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Договор.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"ВидЦен",
		Договор.ВидЦен
	);
	
	СтруктураДанные.Вставить(
		"ВидСкидкиНаценки",
		Договор.ВидСкидкиНаценки
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено)
	);
	
	СтруктураДанные.Вставить(
		"ОснованиеПечатиЗаказПокупателя",
		Константы.ОснованиеПечатиЗаказПокупателя.Получить()
	);
	
	СтруктураДанные.Вставить(
		"СпособЗачетаПредоплаты",
		РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Договор, Контрагент, Истина)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ВестиРасчетыПоДоговорам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ВестиРасчетыПоДоговорам");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Договор",
			"Видимость",
			ВестиРасчетыПоДоговорам);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Договор",
			"Видимость",
			Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеПоОперацииСДС()
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ТекстОшибки = НСтр("ru='Необходимо указать контрагента'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Контрагент");
			Возврат Ложь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
			ТекстОшибки = НСтр("ru='Необходимо указать договор контрагента'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Договор");
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПоложениеЗаказа(Отказ)
	
	Если Не Объект.ОперацияСДенежнымиСредствами Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПоложениеЗаказаПокупателя <> ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьЗаказ = Ложь;
	Для Каждого СтрокаТЧ Из Объект.Запасы Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Заказ) Тогда
			ЕстьЗаказ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьЗаказ Тогда
		ТекстСообщения = НСтр("ru = 'При приеме предоплаты заказ должен находиться в шапке документа'");
		Поле = СтрШаблон("Объект.Запасы[%1].Заказ", СтрокаТЧ.ПолучитьИдентификатор());
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьИзменениеВладельцаДисконтнойКарты(ПустойКонтрагентПередИзменением)
	
	ИзмениласьДисконтнаяКарта = Ложь;
	
	Если НЕ Объект.ДисконтнаяКарта.Пустая()
		И ДисконтныеКартыУНФВызовСервера.НужноОчиститьДисконтнуюКартуПриСменеВладельца(
		Объект.Контрагент,
		Объект.ДисконтнаяКарта,
		ПустойКонтрагентПередИзменением) Тогда
		
		ИзмениласьДисконтнаяКарта = Истина;
		
		Объект.ПроцентСкидкиПоДисконтнойКарте = 0;
		Объект.ДисконтнаяКарта = Неопределено;
		
		ОбновитьКартинкуДисконтнойКарты();
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, Объект.ВалютаДокумента, Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.СпециальныйНалоговыйРежим, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		РассчитатьСкидкиНаценкиСервер();
		
	КонецЕсли;
	
	Возврат ИзмениласьДисконтнаяКарта;
	
КонецФункции

&НаСервере
Процедура ДобавитьКолонкуКоличествоВБазовыхЕдиницахГосИС()
	
	Реквизиты = ПолучитьРеквизиты("Объект.Запасы");
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		Если Реквизит.Имя = "КоличествоВБазовыхЕдиницахГосИС" Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	ДобавляемыйРеквизит = Новый РеквизитФормы("КоличествоВБазовыхЕдиницахГосИС",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,2)), "Объект.Запасы"	, "Количество в базовых единицах ГосИС");
	ДобавляемыеРеквизиты.Добавить(ДобавляемыйРеквизит);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыВСтрокахТабличнойЧастиПоВидуМаркируемойПродукции(ВидМаркируемойПродукции)
	
	Для Каждого Строка Из Объект.Запасы Цикл
		
		Если Строка.ВидПродукцииИС = ВидМаркируемойПродукции Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устанавливает режим Только просмотр.
//
Процедура УстановитьРежимТолькоПросмотр()
	
	ТолькоПросмотр = Истина; // Чек пробит. Изменение информации запрещено.
	
	Если КассаККМИспользоватьБезПодключенияОборудования Тогда
		Элементы.ПробитьЧек.Заголовок = НСтр("ru='Отменить пробитие'");
		Элементы.ПробитьЧек.Доступность = ПравоДоступа("Редактирование", Метаданные.Документы.ЧекККМ);
	Иначе
		Элементы.ПробитьЧек.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ЦеныИВалюта.Доступность = Ложь;
	Элементы.ЗапасыВес.Доступность = Ложь;
	Элементы.ЗапасыПодбор.Доступность = Ложь;
	Элементы.ОплатаПлатежнымиКартамиДобавитьОплатуКартой.Доступность = Ложь;
	Элементы.ОплатаПлатежнымиКартамиУдалитьОплатуКартой.Доступность = Ложь;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Доступность = Ложь;
	// ДисконтныеКарты
	Элементы.СчитатьДисконтнуюКарту.Доступность = Ложь;
	// АвтоматическиеСкидки
	Элементы.ЗапасыРассчитатьСкидкиНаценки.Доступность = Ложь;
	Элементы.ТелефонАдресЭП.Доступность = Ложь;
	
КонецПроцедуры // УстановитьРежимТолькоПросмотр()

// Процедура отменяет режим Только просмотр.
//
Процедура ОтменитьРежимТолькоПросмотр()
	
	Элементы.ПробитьЧек.Заголовок = НСтр("ru='Пробить чек'");
	ТолькоПросмотр = Ложь;
	Элементы.ЦеныИВалюта.Доступность = Истина;
	Элементы.ЗапасыВес.Доступность = Истина;
	Элементы.ЗапасыПодбор.Доступность = Истина;
	Элементы.ОплатаПлатежнымиКартамиДобавитьОплатуКартой.Доступность = Истина;
	Элементы.ОплатаПлатежнымиКартамиУдалитьОплатуКартой.Доступность = Истина;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Доступность = Истина;
	// ДисконтныеКарты
	Элементы.СчитатьДисконтнуюКарту.Доступность = Истина;
	// АвтоматическиеСкидки
	Элементы.ЗапасыРассчитатьСкидкиНаценки.Доступность = Истина;
	
КонецПроцедуры // УстановитьРежимТолькоПросмотр()

// Процедура устанавливает доступность оплаты.
//
&НаСервере
Процедура УстановитьДоступностьОплаты()
	
	Если Объект.ФормаОплаты = Перечисления.ТипыДенежныхСредств.Наличные Тогда
	
		Элементы.БезналичнаяОплата.Доступность = Ложь;
		Элементы.СтраницаБезналичнаяОплата.Видимость = Ложь;
		Элементы.ПолученоНаличными.Доступность = ?(
			КонтрольНаСкладеОтключен,
			Истина,
			Объект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован
		);
		Элементы.РассчитатьСуммуНаличнойОплаты.Доступность = ?(
			КонтрольНаСкладеОтключен,
			Истина,
			Объект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован
		);
	
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда // Смешанная
	
		Элементы.БезналичнаяОплата.Доступность = ?(
			КонтрольНаСкладеОтключен,
			Истина,
			Объект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован
		);
		Элементы.СтраницаБезналичнаяОплата.Видимость = Истина;
		Элементы.ПолученоНаличными.Доступность = ?(
			КонтрольНаСкладеОтключен,
			Истина,
			Объект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован
		);
		Элементы.ГруппаДобавленияОплаты.Доступность = ?(
			КонтрольНаСкладеОтключен,
			Истина,
			Объект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован
		);
		Элементы.РассчитатьСуммуНаличнойОплаты.Доступность = ?(
			КонтрольНаСкладеОтключен,
			Истина,
			Объект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован
		);
	
	Иначе // Платежными картами
		
		Элементы.БезналичнаяОплата.Доступность = ?(
			КонтрольНаСкладеОтключен,
			Истина,
			Объект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован
		);
		Элементы.ГруппаДобавленияОплаты.Доступность = ?(
			КонтрольНаСкладеОтключен,
			Истина,
			Объект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован
		);
		Элементы.СтраницаБезналичнаяОплата.Видимость = Истина;
		Элементы.ПолученоНаличными.Доступность = Ложь;
		Элементы.РассчитатьСуммуНаличнойОплаты.Доступность = Ложь;
	
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьОплаты()

// Процедура устанавливает доступность печати чека.
//
&НаСервере
Процедура УстановитьДоступностьПечатиЧека()
	
	Если НЕ Объект.ПометкаУдаления И 
		ПравоДоступа("Редактирование", Метаданные.Документы.ЧекККМ) И
		(Объект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован
	 	ИЛИ (Объект.КассаККМ.ИспользоватьБезПодключенияОборудования И НЕ Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить())
	 	ИЛИ КонтрольНаСкладеОтключен) Тогда
		Элементы.ПробитьЧек.Доступность = Истина;
	Иначе
		Элементы.ПробитьЧек.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьПечатиЧека()

// Процедура устанавливает видимость элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьВидимостьОтПользовательскихНастроек()
	
	ЗначениеВидимости = (Объект.ПоложениеЗаказаПокупателя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке"));
	
	Элементы.Заказ.Видимость 		= ЗначениеВидимости;
	Элементы.ЗапасыЗаказ.Видимость	= НЕ ЗначениеВидимости;
	Элементы.ЗаполнитьПоЗаказу.Видимость = ЗначениеВидимости;
	ЗаказВШапке 					= ЗначениеВидимости;
	
	УстановитьВидимостьРезервов();
	
	Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ячейка", "Видимость", Ложь);
		Если Не РежимОстаткиИРезервы Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиница", "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейка", "Видимость", Истина);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиницаДляРежимаОстатки", "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейкаДляРежимаОстатки", "Видимость", Истина);
		КонецЕсли;
		СкладВШапке = Ложь;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ячейка", "Видимость", Не Объект.СтруктурнаяЕдиница.ОрдерныйСклад);
		Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = НЕ УправлениеНебольшойФирмойПовтИсп.ВключеноИспользованиеЯчеек() ИЛИ НЕ Элементы.Ячейка.Видимость;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиница", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиницаДляРежимаОстатки", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейка", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейкаДляРежимаОстатки", "Видимость", Ложь);
		СкладВШапке = Истина;
	КонецЕсли;
	
	Элементы.ЗапасыЗаполнитьПоОстаткамИРезервамВсеСклады.Видимость = Не СкладВШапке Или РежимОстаткиИРезервы;
	Элементы.ЗапасыКонтекстноеМенюЗаполнитьПоОстаткамИРезервамВсеСклады.Видимость = Не СкладВШапке Или РежимОстаткиИРезервы;
	
КонецПроцедуры // УстановитьВидимостьОтПользовательскихНастроек()

// Процедура устанавливает видимость элементов формы, которые относятся к резервированию запасов.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьВидимостьРезервов(ОчищатьКолонкуРезерв=Ложь, ОчищатьКолонкуЗаказ=Ложь)
	
	ВШапке = (Объект.ПоложениеЗаказаПокупателя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке"));
	
	ВидимостьРезервов = НЕ (ВШапке И Объект.Заказ.Пустая()) И
		ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") И
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле")
	;
	
	Элементы.ЗапасыРезерв.Видимость = ВидимостьРезервов;
	Элементы.ЗапасыИзменитьРезерв.Видимость = ВидимостьРезервов;
	
	Если ОчищатьКолонкуРезерв ИЛИ ОчищатьКолонкуЗаказ Тогда
		Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
			Если ТекущаяСтрока.Резерв <> 0 Тогда
				ТекущаяСтрока.Резерв = 0;
			КонецЕсли;
			Если ОчищатьКолонкуЗаказ И НЕ ТекущаяСтрока.Заказ.Пустая() Тогда
				ТекущаяСтрока.Заказ = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементаКонтрагент()
	
	ЕстьИменныеВидыДисконтныхКарт = ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныеКарты") И Справочники.ВидыДисконтныхКарт.ЕстьИменныеВиды();
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле")
		И ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныеКарты") Тогда
		Элементы.Контрагент.Видимость = ЕстьИменныеВидыДисконтныхКарт;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПоВидуКлиента()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СуммаДокумента.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Элементы.ОплатаПлатежнымиКартамиИтогСумма.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Элементы.ПредоплатаИтогСуммаПлатежа.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Элементы.ПолученоНаличными.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Элементы.СуммаСдачи.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	
	Элементы.СуммаДокумента.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элементы.ОплатаПлатежнымиКартамиИтогСумма.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элементы.ПредоплатаИтогСуммаПлатежа.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элементы.ПолученоНаличными.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элементы.СуммаСдачи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	
	Элементы.СуммаДокумента.Шрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	Элементы.ОплатаПлатежнымиКартамиИтогСумма.Шрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	Элементы.ПредоплатаИтогСуммаПлатежа.Шрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	Элементы.ПолученоНаличными.Шрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	Элементы.СуммаСдачи.Шрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// Интеграция ГосИС
&НаСервере
Функция Подключаемый_ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеШтрихкода"            , ДанныеШтрихкода);
	ДополнительныеПараметры.Вставить("КэшированныеЗначения"       , КэшированныеЗначения);
	ДополнительныеПараметры.Вставить("РезультатОбработкиШтрихкода", Неопределено);
	ДополнительныеПараметры.Вставить("ПараметрыСканирования",       ПараметрыСканирования);

	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Подключаемый_ОбработатьВводШтрихкода", ДополнительныеПараметры);

	РезультатОбработкиШтрихкода = ДополнительныеПараметры.РезультатОбработкиШтрихкода;
	КэшированныеЗначения = ДополнительныеПараметры.КэшированныеЗначения;

	ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Функция Подключаемый_ВыполнитьДействие(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт
	
	ПараметрыОбработкиВыбора	= ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода	= ВыполнитьДействиеНаСервере(Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодов(
		РезультатОбработкиШтрихкода,
		КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Функция ВыполнитьДействиеНаСервере(Действие, ПараметрыОбработкиВыбора)
	
	Возврат ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеОбработкиШтрихкодов()
	
	Если ЗначениеЗаполнено(ШтрихкодДляОбработки) Тогда
		
		Штрихкод = ШтрихкодДляОбработки;
		ШтрихкодДляОбработки = Неопределено;
		
		ПараметрыМаркировки = ИнтеграцияМОТПУНФКлиент.ИнициализироватьПараметрыОткрытияФормыВводаКодаМаркировки();
		ЗаполнитьПараметрыМаркировкиНоменклатуры(Штрихкод, ПараметрыМаркировки);
		Если ПараметрыМаркировки.МаркируемаяПродукция Тогда
			ИнтеграцияМОТПУНФКлиент.ОткрытьФормуСчитыванияКодаМаркировки(ЭтотОбъект, ПараметрыМаркировки);
			Возврат;
		КонецЕсли;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(Штрихкод);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
		
		Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
			
			Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
			
			ОткрытьФорму(
				"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
				Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение);
			
			Возврат;
			
		КонецЕсли;
		
		ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
		
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыМаркировкиНоменклатуры(ДанныеШтрихкода, ПараметрыМаркировки)
	
	Номенклатура = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ДанныеШтрихкода);
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		ПараметрыМаркировки.Вставить("МаркируемаяПродукция", Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыМаркировки.Вставить("Номенклатура", Номенклатура);
	
	Если Номенклатура.ТабачнаяПродукция Тогда
		ПараметрыМаркировки.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.Табак);
		ПараметрыМаркировки.Вставить("МаркируемаяПродукция", Истина);
	ИначеЕсли Номенклатура.ОбувнаяПродукция Тогда
		ПараметрыМаркировки.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.Обувь);
		ПараметрыМаркировки.Вставить("МаркируемаяПродукция", Истина);
	ИначеЕсли Номенклатура.ВидАлкогольнойПродукции.Маркируемый Тогда
		ПараметрыМаркировки.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.Алкогольная);
		ПараметрыМаркировки.Вставить("МаркируемаяПродукция", Истина);
	Иначе
		ПараметрыМаркировки.Вставить("МаркируемаяПродукция", Ложь);
	КонецЕсли;
	
	ПараметрыМаркировки.Вставить("ПараметрыСканирования", ШтрихкодированиеИС.ПараметрыСканирования(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт
	
	Модифицированность = Истина;
	Если РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		
		ШтрихкодДляОбработки = РезультатОбработкиШтрихкода.ИсходныеДанные;
		
		Если ШтрихкодДляОбработки.Свойство("Номенклатура") Тогда
		
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура", ШтрихкодДляОбработки.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", ШтрихкодДляОбработки.Характеристика);
			ПараметрыПоиска.Вставить("Партия", ?(ШтрихкодДляОбработки.Серия = Неопределено,
												 Справочники.ПартииНоменклатуры.ПустаяСсылка(),
												 ШтрихкодДляОбработки.Серия));
			ПараметрыПоиска.Вставить("МаркируемаяПродукция", Ложь);
			
			НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				НайденнаяСтрока = НайденныеСтроки[0];
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ШтрихкодДляОбработки.Количество;
				
			Иначе
				
				НоваяСтрока = Объект.Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ШтрихкодДляОбработки);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыПоиска);
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШтрихкодДляОбработки, "ВидПродукции") Тогда
					НоваяСтрока.ВидПродукцииИС = ШтрихкодДляОбработки.ВидПродукции;
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШтрихкодДляОбработки, "ВидыПродукции") Тогда
					Если ШтрихкодДляОбработки.ВидыПродукции.Количество() > 0 Тогда
						НоваяСтрока.ВидПродукцииИС = ШтрихкодДляОбработки.ВидыПродукции[0];
					КонецЕсли;
				КонецЕсли;
				
				Настройки = ИнтеграцияИСУНФ.НастройкиИсточникаКешаЧека();
				ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(ЭтотОбъект, Настройки);
				ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект, Настройки);
				ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
				
				НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(Объект, "Запасы", НоваяСтрока);
				
				НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СуммаТоваров = Объект.Запасы.Итог("Всего");
		Если Не Объект.ОперацияСДенежнымиСредствами Тогда
			Объект.СуммаДокумента = СуммаТоваров;
		КонецЕсли;
		Элементы.СуммаДокумента.СписокВыбора.Очистить();
		Если СуммаТоваров > 0 Тогда
			ПредставлениеСуммы = НСтр("ru = 'Сумма товаров (%1)'");
			ПредставлениеСуммы = СтрШаблон(ПредставлениеСуммы, СуммаТоваров);
			Элементы.СуммаДокумента.СписокВыбора.Добавить(СуммаТоваров, ПредставлениеСуммы);
		КонецЕсли;
	
		СуммаСдачи = Объект.БезналичнаяОплата.Итог("Сумма")
				   + Объект.Предоплата.Итог("СуммаРасчетов")
				   + Объект.ПолученоНаличными
				   - Объект.СуммаДокумента;
		
	КонецЕсли;
	
КонецПроцедуры

#Область КэшированиеСтрок

// Инициализирует кэш строк на форме для для указанной таблицы.
// Для использования кэширования строк необходимо добавить на форму реквизит "КэшированныеСтроки" с типом "Произвольный".
//
// Параметры:
//  ТаблицаФормы - ТаблицаФормы - элемент формы, содержащий табличную часть.
//
&НаСервере
Процедура ИнициализироватьКэшСтрок(ТаблицаФормы) Экспорт
	
	Форма = ТаблицаФормы.Родитель;
	Пока ТипЗнч(Форма) <> Тип("УправляемаяФорма") Цикл
		Форма = Форма.Родитель;
	КонецЦикла;
	
	КэшСтроки = Новый Структура;
	
	РеквизитыТаблицы = Форма.ПолучитьРеквизиты(ТаблицаФормы.ПутьКДанным);
	Для Каждого Реквизит Из РеквизитыТаблицы Цикл
		КэшСтроки.Вставить(Реквизит.Имя, Неопределено);
	КонецЦикла;
	
	Если Форма.КэшированныеСтроки = Неопределено Тогда
		Форма.КэшированныеСтроки = Новый Структура;
	КонецЕсли;
	Форма.КэшированныеСтроки.Вставить(ТаблицаФормы.Имя, Новый ФиксированнаяСтруктура(КэшСтроки));
	
КонецПроцедуры

// Сохраняет в кэше на форме текущую строку указанной таблицы.
// Перед использованием необходим разовый вызов РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок().
//
// Параметры:
//  ТаблицаФормы - ТаблицаФормы - элемент формы, содержащий табличную часть.
//  Форма - УправляемаяФорма - форма объекта метаданных.
//
&НаКлиенте
Процедура КэшироватьТекущуюСтроку(ТаблицаФормы, Форма) Экспорт
	
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	КэшСтроки     = Новый Структура(Форма.КэшированныеСтроки[ТаблицаФормы.Имя]);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(КэшСтроки, ТекущиеДанные);
	Иначе
		Для Каждого КлючИЗначение Из КэшСтроки Цикл
			КэшСтроки[КлючИЗначение.Ключ] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	Форма.КэшированныеСтроки[ТаблицаФормы.Имя] = Новый ФиксированнаяСтруктура(КэшСтроки);
	
КонецПроцедуры

#КонецОбласти
// Конец ИнтеграцияГосИС

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ДисконтныеКарты

// Процедура - обработчик команды СчитатьДисконтнуюКарту формы.
//
&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СчитатьДисконтнуюКартуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.СчитываниеДисконтнойКарты", , ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

// Завершающая часть процедуры - обработчика команды СчитатьДисконтнуюКарту формы.
// Вызывается после закрытия формы считывания дисконтной карты.
//
&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатиеЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт

	Если ТипЗнч(ВозвращаемыеПараметры) = Тип("Структура") Тогда
		СчитанаДисконтнаяКарта = ВозвращаемыеПараметры.СчитанаДисконтнаяКарта;
		ВыбранаДисконтнаяКарта(ВозвращаемыеПараметры.ДисконтнаяКарта);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик выбора дисконтной карты, начало.
//
&НаКлиенте
Процедура ВыбранаДисконтнаяКарта(ДисконтнаяКарта)

	КонтрагентИзменился = РозничныеПродажиКлиент.ВыбранаДисконтнаяКарта(ЭтотОбъект, ДисконтнаяКарта);
	Если КонтрагентИзменился Тогда
		КонтрагентПриИзменении(Элементы.Контрагент);
	КонецЕсли;
	
	ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта);
	
КонецПроцедуры

// Процедура - обработчик выбора дисконтной карты, окончание.
//
&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта)
	
	Если Не Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Объект.ДисконтнаяКарта = ДисконтнаяКарта;
	Объект.ПроцентСкидкиПоДисконтнойКарте = ДисконтныеКартыУНФВызовСервера.ВычислитьПроцентСкидкиПоДисконтнойКарте(Объект.Дата, ДисконтнаяКарта);
	
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, Объект.ВалютаДокумента, Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.СпециальныйНалоговыйРежим, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	ОбновитьКартинкуДисконтнойКарты();
	
	Если ДисконтныеКартыУНФВызовСервера.СтарыйМеханизмСкидок(ДисконтнаяКарта) Тогда
		
		Если Объект.Запасы.Количество() > 0 Тогда
			Текст = НСтр("ru = 'Перезаполнить скидки во всех строках?'");
			Оповещение = Новый ОписаниеОповещения("ВыбранаДисконтнаяКартаДополнительноЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		КонецЕсли;
		
	Иначе
		
		РассчитатьСкидкиНаценки(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик выбора дисконтной карты, завершение.
//
&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительноЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Скидка = ДисконтныеКартыУНФВызовСервера.ПолучитьПроцентСкидкиПоВидуСкидокНаценок(Объект.ВидСкидкиНаценки) + Объект.ПроцентСкидкиПоДисконтнойКарте;
	
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Скидка;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
			        
		КонецЦикла;
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("ПересчетСкидокПоДисконтнойКарте");

КонецПроцедуры

// Функция возвращает Истина, если дисконтная карта, которая передана в качестве параметра, является фиксированной.
//
&НаСервереБезКонтекста
Функция ЭтоДисконтнаяКартаСФиксированнойСкидкой(ДисконтнаяКарта)
	
	Возврат ДисконтнаяКарта.Владелец.ВидСкидкиВДисконтныхКартах = Перечисления.ВидыСкидокВДисконтныхКартах.ФиксированнаяСкидка;
	
КонецФункции

// Процедура выполняется только для НАКОПИТЕЛЬНЫХ дисконтных карт.
// Процедура пересчитывает скидки документа, после изменения даты документа. Пересчёт выполняется, если процент скидки
// по выбранной дисконтной карте, изменился. 
//
&НаКлиенте
Процедура ПересчитатьПроцентСкидкиПриИзмененииДатыДокумента()
	
	Если Объект.ДисконтнаяКарта.Пустая() ИЛИ ЭтоДисконтнаяКартаСФиксированнойСкидкой(Объект.ДисконтнаяКарта) Тогда
		Возврат;
	КонецЕсли;
	
	ПредПроцентСкидкиПоДисконтнойКарте = Объект.ПроцентСкидкиПоДисконтнойКарте;
	НовПроцентСкидкиПоДисконтнойКарте = ДисконтныеКартыУНФВызовСервера.ВычислитьПроцентСкидкиПоДисконтнойКарте(Объект.Дата, Объект.ДисконтнаяКарта);
	
	Если ПредПроцентСкидкиПоДисконтнойКарте <> НовПроцентСкидкиПоДисконтнойКарте Тогда
		
		Если Объект.Запасы.Количество() > 0 Тогда
			Текст = НСтр("ru = 'Изменить % скидки по накопительной дисконтной карте с "+ПредПроцентСкидкиПоДисконтнойКарте+"% на "+НовПроцентСкидкиПоДисконтнойКарте+"% и перезаполнить скидки во всех строках?'");
			
			ДополнительныеПараметры = Новый Структура("НовПроцентСкидкиПоДисконтнойКарте, ПересчитатьТЧ", НовПроцентСкидкиПоДисконтнойКарте, Истина);
			Оповещение = Новый ОписаниеОповещения("ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Иначе
			Текст = НСтр("ru = 'Изменить % скидки по накопительной дисконтной карте с "+ПредПроцентСкидкиПоДисконтнойКарте+"% на "+НовПроцентСкидкиПоДисконтнойКарте+"%?'");
			
			ДополнительныеПараметры = Новый Структура("НовПроцентСкидкиПоДисконтнойКарте, ПересчитатьТЧ", НовПроцентСкидкиПоДисконтнойКарте, Ложь);
			Оповещение = Новый ОписаниеОповещения("ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		КонецЕсли;
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняется только для НАКОПИТЕЛЬНЫХ дисконтных карт.
// Процедура пересчитывает скидки документа, после изменения даты документа. Пересчёт выполняется, если процент скидки
// по выбранной дисконтной карте, изменился. 
//
&НаКлиенте
Процедура ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ПроцентСкидкиПоДисконтнойКарте = ДополнительныеПараметры.НовПроцентСкидкиПоДисконтнойКарте;
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, Объект.ВалютаДокумента, Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.СпециальныйНалоговыйРежим, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		Если ДополнительныеПараметры.ПересчитатьТЧ Тогда
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект, "Запасы");
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АвтоматическиеСкидки

&НаСервере
Процедура РассчитатьСкидкиНаценкиПоЗаказуСервер()

	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы",, Истина);
	
	МассивЗаказов = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПоложениеЗаказаПокупателя) Тогда
		ПоложениеЗаказаПокупателя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеЗаказаПокупателяВДокументахОтгрузки");
		Если Не ЗначениеЗаполнено(Объект.ПоложениеЗаказаПокупателя) Тогда
			ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
	Иначе
		ПоложениеЗаказаПокупателя = Объект.ПоложениеЗаказаПокупателя;
	КонецЕсли;
	Если ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		МассивЗаказов.Добавить(Объект.Заказ);
	Иначе
		ТЗЗаказов = Объект.Запасы.Выгрузить(, "Заказ");
		ТЗЗаказов.Свернуть("Заказ");
		МассивЗаказов = ТЗЗаказов.ВыгрузитьКолонку("Заказ");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК Заказ,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СУММА(СкидкиНаценки.Сумма) КАК СуммаАвтоматическойСкидки,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипНоменклатурыЗапас,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ЗаказПокупателяЗапасы.Количество) КАК Количество,
	|	СУММА(ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.Цена) КАК СуммаБезСкидки,
	|	ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателяЗапасы.Ссылка.Курс КАК Курс,
	|	ЗаказПокупателяЗапасы.Ссылка.Кратность КАК Кратность,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.СкидкаНаценка.СпособПредоставления КАК СпособПредоставления
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК СкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|		ПО СкидкиНаценки.Ссылка = ЗаказПокупателяЗапасы.Ссылка
	|			И СкидкиНаценки.КлючСвязи = ЗаказПокупателяЗапасы.КлючСвязи
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&МассивЗаказов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента,
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Характеристика,
	|	СкидкиНаценки.Ссылка,
	|	СкидкиНаценки.СкидкаНаценка,
	|	ЗаказПокупателяЗапасы.Ссылка.Кратность,
	|	ЗаказПокупателяЗапасы.Ссылка.Курс,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	СкидкиНаценки.СкидкаНаценка.СпособПредоставления";
	
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(МассивЗаказов, Запрос.МенеджерВременныхТаблиц, Истина);
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СкидкиНаценкиЗаказа = МассивРезультатов[0].Выгрузить();
	
	Объект.СкидкиНаценки.Очистить();
	РезультатРасчетаСкидокНаценок = Объект.СкидкиНаценки.Выгрузить();
	
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Объект.Дата,
			Новый Структура("Валюта", Объект.ВалютаДокумента)
	);
	
	ОбъектЗапасы = Объект.Запасы.Выгрузить();
	ОбъектЗапасы.Колонки.Добавить("ОсталосьРаспределить");
	Для Каждого ТекущаяСтрокаДокумента Из ОбъектЗапасы Цикл
		ТекущаяСтрокаДокумента.ОсталосьРаспределить = ТекущаяСтрокаДокумента.Количество *
			?(ТипЗнч(ТекущаяСтрокаДокумента.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"), 1, ТекущаяСтрокаДокумента.ЕдиницаИзмерения.Коэффициент);
	КонецЦикла;
	
	Для Каждого ТекущаяСтрокаЗаказа Из СкидкиНаценкиЗаказа Цикл
		
		Если ТекущаяСтрокаЗаказа.ВалютаДокумента <> Объект.ВалютаДокумента Тогда
			ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки, 
																	ТекущаяСтрокаЗаказа.Курс,
																	?(ВалютаКурсКратность.Курс = 0, 1, ВалютаКурсКратность.Курс),
																	ТекущаяСтрокаЗаказа.Кратность,
																	?(ВалютаКурсКратность.Кратность = 0, 1, ВалютаКурсКратность.Кратность));
		КонецЕсли;
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Заказ", ТекущаяСтрокаЗаказа.Заказ);
		СтруктураДляПоиска.Вставить("Номенклатура", ТекущаяСтрокаЗаказа.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", ТекущаяСтрокаЗаказа.Характеристика);
		
		МассивСтрокДокумента = ОбъектЗапасы.НайтиСтроки(СтруктураДляПоиска);
		Если МассивСтрокДокумента.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяСтрокаЗаказа.ВалютаДокумента <> Объект.ВалютаДокумента Тогда
			СуммаВЗаказе = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(ТекущаяСтрокаЗаказа.СуммаБезСкидки, 
																	ТекущаяСтрокаЗаказа.Курс,
																	?(ВалютаКурсКратность.Курс = 0, 1, ВалютаКурсКратность.Курс),
																	ТекущаяСтрокаЗаказа.Кратность,
																	?(ВалютаКурсКратность.Кратность = 0, 1, ВалютаКурсКратность.Кратность));
		Иначе
			СуммаВЗаказе = ТекущаяСтрокаЗаказа.СуммаБезСкидки;
		КонецЕсли; 
		
		Распределено = 0;
		Для Каждого ТекущаяСтрокаДокумента Из МассивСтрокДокумента Цикл
			
			СуммаКСписанию = ТекущаяСтрокаДокумента.Количество * ТекущаяСтрокаДокумента.Цена;
			
			ПересчитатьСуммы = СуммаВЗаказе <> СуммаКСписанию;
			
			КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, СуммаКСписанию / СуммаВЗаказе, 1);
			Если ЗначениеЗаполнено(ТекущаяСтрокаЗаказа.ЗначениеСкидкиНаценки) И ТекущаяСтрокаЗаказа.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
				ТекущаяСуммаАвтоматическойСкидки = ОКР(ТекущаяСтрокаДокумента.Цена * ТекущаяСтрокаДокумента.Количество * ТекущаяСтрокаЗаказа.ЗначениеСкидкиНаценки / 100, 2);
			ИначеЕсли КоэффициентПересчетаСкидки <> 1 Тогда
				ТекущаяСуммаАвтоматическойСкидки = ОКР(ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки, 2);
			Иначе
				ТекущаяСуммаАвтоматическойСкидки = ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки;
			КонецЕсли;
		
			СтрокаСкидки = РезультатРасчетаСкидокНаценок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСкидки, ТекущаяСтрокаЗаказа);
			СтрокаСкидки.Сумма = ТекущаяСуммаАвтоматическойСкидки;
			СтрокаСкидки.КлючСвязи = ТекущаяСтрокаДокумента.КлючСвязи;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Объект.Запасы.Загрузить(ОбъектЗапасы);
	
	СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", РезультатРасчетаСкидокНаценок);
	
КонецПроцедуры

// Процедура - обработчик команды РассчитатьСкидкиНаценки формы.
//
&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Если Объект.СкидкиНаценки.Количество() > 0 Тогда
			Объект.СкидкиНаценки.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЧекККМ_РассчитатьСкидкиНаценкиКлиент", Истина, Ложь);
	РассчитатьСкидкиНаценкиКлиент();
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	
КонецПроцедуры

// Процедура рассчитывает скидки по документу.
//
&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЧекККМ_РассчитатьСкидкиНаценкиКлиент_"+Объект.Запасы.Количество(), Истина, Ложь);
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(СтруктураПараметры);

	ПересчитатьДокументНаКлиенте();
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	
КонецПроцедуры

// Процедура рассчитывает скидки по документу.
//
&НаСервере
Процедура РассчитатьСкидкиНаценкиСервер()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("РабочееМесто", "");
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
КонецПроцедуры

// Функция сравнивает данные расчёта скидок на текущий момент времени с данными последнего расчёт скидок в документе.
// Если скидки изменились, то функция возвращает значение Истина.
//
&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Запасы.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Если Не СкидкиИзменились Тогда
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка Тогда
					СкидкиИзменились = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПараметровРасчетаАвтоСкидокСервер()

	СтруктураПараметровЗаказа = Новый Структура("РеализацияПоЗаказам, РеализацияСверхЗаказа", Ложь, Ложь);
	
	Если НЕ ЗначениеЗаполнено(Объект.ПоложениеЗаказаПокупателя) Тогда
		ПоложениеЗаказаПокупателя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеЗаказаПокупателяВДокументахОтгрузки");
		Если НЕ ЗначениеЗаполнено(ПоложениеЗаказаПокупателя) Тогда
			ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
	Иначе
		ПоложениеЗаказаПокупателя = Объект.ПоложениеЗаказаПокупателя;
	КонецЕсли;
	Если ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Если ЗначениеЗаполнено(Объект.Заказ) Тогда
			СтруктураПараметровЗаказа.РеализацияПоЗаказам = Истина;
		Иначе
			СтруктураПараметровЗаказа.РеализацияПоЗаказам = Ложь;
		КонецЕсли;
		СтруктураПараметровЗаказа.РеализацияСверхЗаказа = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасходнаяНакладнаяЗапасы.Заказ КАК Заказ
			|ПОМЕСТИТЬ ВТ_Запасы
			|ИЗ
			|	&Запасы КАК РасходнаяНакладнаяЗапасы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Запасы.Заказ КАК Заказ
			|ИЗ
			|	ВТ_Запасы КАК ВТ_Запасы
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Запасы.Заказ";
		
		Запрос.УстановитьПараметр("Запасы", Объект.Запасы.Выгрузить());
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Заказ) Тогда
				СтруктураПараметровЗаказа.РеализацияПоЗаказам = Истина;
			Иначе
				СтруктураПараметровЗаказа.РеализацияСверхЗаказа = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПараметровЗаказа;
	
КонецФункции // ЕстьЗаказыВТЧ()

// Процедура рассчитывает скидки по документу.
//
&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	СтруктураПараметровЗаказа = ПолучитьСтруктуруПараметровРасчетаАвтоСкидокСервер(); // Если в ТЧ "Товары" есть заказы, то нужно автоматическую скидку для таких строк рассчитывать по заказу.
	Если СтруктураПараметровЗаказа.РеализацияПоЗаказам И Не СтруктураПараметры.Свойство("БонуснаяПрограмма") Тогда
		РассчитатьСкидкиНаценкиПоЗаказуСервер();
		Если СтруктураПараметровЗаказа.РеализацияСверхЗаказа Тогда
			СтруктураПараметры.Вставить("РеализацияСверхЗаказа", Истина);
			ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
		Иначе
			СтруктураПараметры.Вставить("ПрименятьКОбъекту", Ложь);
			ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
		КонецЕсли;
	Иначе
		СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы",, Истина);
		ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	КонецЕсли;
	
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект, "Запасы");
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
	
		Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
	Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
	
КонецПроцедуры

// Процедура - обработчик команды "ОткрытьИнформациюОСкидках".
//
&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахКлиент()
	
КонецПроцедуры

// Процедура открывает общую форму для анализа информации о скидках по текущей строке.
//
&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		ТекстВопроса = НСтр("ru='Скидки (наценки) не рассчитаны, рассчитать?'");
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("СтруктураПараметры", СтруктураПараметры);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросРассчитатьСкидки", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Завершение немодального открытия окна "ПоказатьВопрос()". Процедура открывает общую форму для анализа информации о
// скидках по текущей строке.
//
&НаКлиенте
Процедура ОповещениеВопросРассчитатьСкидки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметры = ДополнительныеПараметры.СтруктураПараметры;
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	
КонецПроцедуры

// Процедура открывает общую форму для анализа информации о скидках по текущей строке после расчета автоматических скидок (если это было необходимо).
//
&НаКлиенте
Процедура РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры)
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЧекККМ_РассчитатьСкидкиНаценкиКлиент", Истина, Ложь);
		РассчитатьСкидкиНаценкиКлиент();
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект);
	
КонецПроцедуры

// Функция сбрасывает флаг "СкидкиРассчитаны", если это необходимо, и возвращает Истина, если требуется пересчёт скидок.
//
&НаСервере
Функция СброситьФлагСкидкиРассчитаныСервер(Действие, КолонкаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И Объект.Запасы.Количество() > 0 И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ);
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

// Функция сбрасывает флаг "СкидкиРассчитаны", если это необходимо, и возвращает Истина, если требуется пересчёт скидок.
//
&НаКлиенте
Функция СброситьФлагСкидкиРассчитаныКлиент(Действие, КолонкаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И Объект.Запасы.Количество() > 0 И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ);
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

// Функция сбрасывает флаг СкидкиРассчитаны, если это необходимо, и возвращает Истина, если требуется пересчёт скидок.
//
&НаСервере
Функция СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ = "")
	
	Возврат СкидкиНаценкиСервер.СброситьФлагСкидкиРассчитаны(ЭтотОбъект, Действие, КолонкаТЧ);
	
КонецФункции

// Процедура выполняет действия необходимые при создании формы на сервере.
//
&НаСервере
Процедура АвтоматическиеСкидкиПриСозданииНаСервере()
	
	УстановленСерыйЦвет = Ложь;
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Объект.Запасы.Количество() = 0 Тогда
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьСерый;
			УстановленСерыйЦвет = Истина;
		ИначеЕсли НЕ Объект.СкидкиРассчитаны Тогда
			Объект.СкидкиРассчитаны = Ложь;
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьКрасный;
		Иначе
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПримененныеСкидки формы.
&НаКлиенте
Процедура ПримененныеСкидки(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = "Данные еще не записаны.
		|Переход к ""Примененные скидки"" возможен только после записи данных.
		|Данные будут записаны.";
		ОписаниеОповещения = Новый ОписаниеОповещения("ПримененныеСкидкиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ПараметрыФормы = Новый Структура("ДокументСсылка", Объект.Ссылка);
		ОткрытьФорму("Отчет.ПримененныеСкидкиВДокументе.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Завершение процедуры ПримененныеСкидки. Вызывается после закрытия формы ответа на вопрос.
//
&НаКлиенте
Процедура ПримененныеСкидкиЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;

	Если Записать() Тогда
		ПараметрыФормы = Новый Структура("ДокументСсылка", Объект.Ссылка);
		ОткрытьФорму("Отчет.ПримененныеСкидкиВДокументе.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры // ПримененныеСкидкиЗавершение()

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаАкцизнойМаркиАП(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("КлючСвязи", ДополнительныеПараметры.ТекущийКлючСвязи));
	Для каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
		Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
	КонецЦикла;
		
	СтрокаТЧ = Объект.Запасы.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОткрытияФормы = Неопределено Тогда
		Объект.Запасы.Удалить(СтрокаТЧ);
		Возврат;
	КонецЕсли;
	
	СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
	СтрокаАкцизнаяМарка.КлючСвязи = ДополнительныеПараметры.ТекущийКлючСвязи;
	СтрокаАкцизнаяМарка.КодАкцизнойМарки = РезультатОткрытияФормы.Штрихкод;
	СтрокаАкцизнаяМарка.АкцизнаяМарка    = РезультатОткрытияФормы.ШтрихкодУпаковки;
	СтрокаАкцизнаяМарка.Справка2         = РезультатОткрытияФормы.Справка2;
	
	СтрокаТЧ.НоменклатураЕГАИС    = РезультатОткрытияФормы.АлкогольнаяПродукция;
	СтрокаТЧ.Количество = 1;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Штрихкод) Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПараметров.Вставить("Характеристика", СтрокаТЧ.Характеристика);
		СтруктураПараметров.Вставить("Партия", СтрокаТЧ.Партия);
		СтруктураПараметров.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмерения);
		СтрокаТЧ.Штрихкод = ИнтеграцияЕГАИСУНФВызовСервера.ПолучитьШтрихкодПоНоменклатуре(СтруктураПараметров);
	КонецЕсли;
	
	СтрокаТЧ.СтатусПроверкиГосИС = ?(ЗначениеЗаполнено(СтрокаАкцизнаяМарка.КодАкцизнойМарки), 1, 2);
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТЧ);
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаАкцизнойМаркиТП(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	СтрокаТЧ = Объект.Запасы.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОткрытияФормы = Неопределено Тогда
		Объект.Запасы.Удалить(СтрокаТЧ);
		Возврат;
	КонецЕсли;
	
	Если НЕ КодМаркировкиСоответствуетНоменклатуре(РезультатОткрытияФормы, ДополнительныеПараметры) Тогда
		Объект.Запасы.Удалить(СтрокаТЧ);
		Возврат;
	КонецЕсли;
	СтрокаТЧ.КодМаркировки = РезультатОткрытияФормы;
	Если СтрокаТЧ.Свойство("СтатусПроверкиГосИС") Тогда
		СтрокаТЧ.СтатусПроверкиГосИС = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 1, 2);
	КонецЕсли;
	СтрокаТЧ.ИндексАкцизнойМарки = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 1, 2);
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТЧ);
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Функция КодМаркировкиСоответствуетНоменклатуре(РезультатОткрытияФормы, ДополнительныеПараметры)
	
	СтрокаТЧ = Объект.Запасы.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если СтрокаТЧ = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка в табличной части ""Товары и услуги"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	Иначе
		Возврат АкцизныеМаркиУНФ.КодМаркировкиСоответствуетНоменклатуре(РезультатОткрытияФормы, СтрокаТЧ.Номенклатура, СтрокаТЧ.ЕдиницаИзмерения);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВвестиАкцизнуюМарку(СтрокаТЧ)
	
	ПараметрыОткрытияФормы = ИнтеграцияМОТПУНФКлиент.ИнициализироватьПараметрыОткрытияФормыВводаКодаМаркировки();
	ПараметрыОткрытияФормы.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
	ПараметрыОткрытияФормы.Вставить("Характеристика", СтрокаТЧ.Характеристика);
	ПараметрыОткрытияФормы.Вставить("МаркируемаяПродукция", Истина);
	Если СтрокаТЧ.НеобходимостьВводаКодаМаркировки Тогда
		ПараметрыОткрытияФормы.Вставить("ВидПродукции", ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак"));
	КонецЕсли;
	ПараметрыОткрытияФормы.Вставить("ПараметрыСканирования", ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект));
	
	ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
	Номенклатура = СтрокаТЧ.Номенклатура;
	ТекущийКлючСвязи = СтрокаТЧ.КлючСвязи;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура"         , Номенклатура);
	ПараметрыФормы.Вставить("КонтрольАкцизныхМарок", Истина);
	

	
	ПараметрыФормы.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
	ПараметрыФормы.Вставить("ТекущийКлючСвязи"         , ТекущийКлючСвязи);
	

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	ДополнительныеПараметры.Вставить("ТекущийКлючСвязи", ТекущийКлючСвязи);
	
	Если СтрокаТЧ.НеобходимостьВводаКодаМаркировки Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаАкцизнойМаркиТП", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("ОбщаяФорма.ФормаВводаАкцизнойМарки", ПараметрыФормы, ЭтаФорма, ,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаАкцизнойМаркиАП", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.РаботаСАкцизнымиМаркамиЕГАИС.Форма.ФормаВводаАкцизнойМарки", ПараметрыФормы, ЭтаФорма, ,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиАкцизнуюМаркуШиныИПокрышки(СтрокаТЧ)
	
	ПараметрыОткрытияФормы = ИнтеграцияМОТПУНФКлиент.ИнициализироватьПараметрыОткрытияФормыВводаКодаМаркировки();
	ПараметрыОткрытияФормы.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
	ПараметрыОткрытияФормы.Вставить("Характеристика", СтрокаТЧ.Характеристика);
	ПараметрыОткрытияФормы.Вставить("МаркируемаяПродукция", Истина);
	ПараметрыОткрытияФормы.Вставить("ПараметрыСканирования", ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект));
	
	ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
	Номенклатура = СтрокаТЧ.Номенклатура;
	ТекущийКлючСвязи = СтрокаТЧ.КлючСвязи;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура"         , Номенклатура);
	ПараметрыФормы.Вставить("КонтрольАкцизныхМарок", Истина);
	ПараметрыФормы.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
	ПараметрыФормы.Вставить("ТекущийКлючСвязи"         , ТекущийКлючСвязи);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	ДополнительныеПараметры.Вставить("ТекущийКлючСвязи", ТекущийКлючСвязи);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаАкцизнойМаркиТП", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаАкцизнойМаркиШиныИПокрышки", ПараметрыФормы, ЭтаФорма, ,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


&НаКлиенте
Функция ОткрытьВводАкцизнойМарки(СтрокаТЧ)
	
	ВернутьЛожь = Ложь;
	Если НЕ ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
		ВернутьЛожь = Истина;
	ИначеЕсли СтрокаТЧ = Неопределено Тогда
		ВернутьЛожь = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		ВернутьЛожь = Истина;
	ИначеЕсли НЕ СтрокаТЧ.НеобходимостьВводаАкцизнойМарки Тогда
		ВернутьЛожь = Истина;
	КонецЕсли;
	
	Если ВернутьЛожь Тогда
		ПересчитатьДокументНаКлиенте();
		Возврат Ложь;
	КонецЕсли;
	
	Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС
		И НЕ ЗначениеЗаполнено(СтрокаТЧ.КлючСвязи) Тогда
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, СтрокаТЧ, "КлючСвязи");
	КонецЕсли;
	
	ВвестиАкцизнуюМарку(СтрокаТЧ);
	
КонецФункции

&НаКлиенте
Функция ОткрытьВводАкцизнойМаркиШиныИПокрышки(СтрокаТЧ)
	
	ВернутьЛожь = Ложь;
	Если НЕ ИспользуетсяМаркировкаШинИПокрышек Тогда
		ВернутьЛожь = Истина;
	ИначеЕсли СтрокаТЧ = Неопределено Тогда
		ВернутьЛожь = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		ВернутьЛожь = Истина;
	ИначеЕсли НЕ СтрокаТЧ.НеобходимостьВводаАкцизнойМарки
		И НЕ СтрокаТЧ.НеобходимостьВводаКодаМаркировки Тогда
		ВернутьЛожь = Истина;
	КонецЕсли;
	
	ЭтоШиныИПокрышки = УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура, "ШиныИПокрышки");
	
	Если ЭтоШиныИПокрышки = Неопределено 
		ИЛИ НЕ ЭтоШиныИПокрышки Тогда
		ВернутьЛожь = Истина;
	КонецЕсли;
	
	Если ВернутьЛожь Тогда
		ПересчитатьДокументНаКлиенте();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КлючСвязи) Тогда
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, СтрокаТЧ, "КлючСвязи");
	КонецЕсли;
	
	Если СтрокаТЧ.Свойство("СтатусПроверкиГосИС") Тогда
		СтрокаТЧ.СтатусПроверкиГосИС = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 1, 2);
	КонецЕсли;
	СтрокаТЧ.ИндексАкцизнойМарки = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 1, 2);
	
	ВвестиАкцизнуюМаркуШиныИПокрышки(СтрокаТЧ);
	
КонецФункции

&НаКлиенте
Процедура УстановитьНалоговыйСпецРежим()
	Если ЗначениеЗаполнено(Объект.Патент) Тогда
		Объект.СпециальныйНалоговыйРежим = ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.ПСН");
	Иначе
		Если Объект.СпециальныйНалоговыйРежим = ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.ПСН") Тогда
			Объект.СпециальныйНалоговыйРежим = ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область РаботаССериямиНоменклатуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Модифицированность = Истина;
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки);
	
КонецФункции

Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор)
	
	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОплатаПлатежнымиКартамиСуммаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	ОсталосьОплатить = (Объект.СуммаДокумента - Объект.ПолученоНаличными);
	Если ОсталосьОплатить > 0 Тогда
		НадписьВСкобках = "" + Объект.ВалютаДокумента;
		Элемент.СписокВыбора.Добавить(ОсталосьОплатить, ""+ОсталосьОплатить+" ("+НадписьВСкобках+")");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьСтрокуЗапасовДаннымиНабора(Форма, СтрокаТабличнойЧасти, СтруктураДанные)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, СтрокаТабличнойЧасти,
		Форма.ИспользоватьСерииНоменклатурыОстатки);
	
	НаборыКлиентСервер.ЗаменитьСтрокуДаннымиНабора(Объект, "Запасы", СтрокаТабличнойЧасти, СтруктураДанные); 
	
	Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСоставНабора(СтрокаТабличнойЧасти)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
	СтруктураОткрытия.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
	ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОткрытия);
	СтрокиНабора = Объект.Запасы.НайтиСтроки(СтруктураОткрытия);
	Если ДобавленныеСтроки.Количество() = 0 Тогда
		СтруктураОткрытия.Вставить("Количество", 1);
	Иначе
		СтруктураОткрытия.Вставить("Количество", ДобавленныеСтроки[0].Количество);
	КонецЕсли; 
	СтруктураОткрытия.Вставить("СоставНабора", Новый Массив);
	Для каждого Стр Из СтрокиНабора Цикл
		СтруктураСтроки = Новый Структура("Номенклатура,Характеристика,Количество,Цена,ДоляСтоимости,ЕдиницаИзмерения,Активная");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Стр);
		СтруктураСтроки.Активная = (Стр = СтрокаТабличнойЧасти); 
		СтруктураОткрытия.СоставНабора.Добавить(СтруктураСтроки);
	КонецЦикла; 
	ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, ЭтотОбъект, , , , , 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставНабора(НоменклатураНабора, ХарактеристикаНабора, КоличествоНаборов, ЦенаНабора, СоставНабора)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураДанных.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	СтруктураДанных.Вставить("ИмяТабличнойЧасти", "Запасы");
	СтруктураДанных.Вставить("СоставНабора", СоставНабора);
	СтруктураДанных.Вставить("КоличествоНаборов", КоличествоНаборов);
	СтруктураДанных.Вставить("ЦенаНабора", ЦенаНабора);
	НаборыСервер.ОбновитьСоставНабораВДокументе(СтруктураДанных, Объект);
	Модифицированность = Истина;
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	// Конец АвтоматическиеСкидки
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеКартинокНаборов(Запасы, ДобавленныеНаборы)
	
	Для каждого Стр Из Запасы Цикл
		Стр.КартинкаНабора = НаборыКлиентСервер.КартинкаНабора(Стр, ДобавленныеНаборы);
		Если Стр.КартинкаНабора>5 Тогда
			Стр.КартинкаНабора = ((Стр.КартинкаНабора - 1) % 5) + 1;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
&НаСервереБезКонтекста
Процедура ОбновитьПризнакиНабора(Запасы)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
		Возврат;
	КонецЕсли; 
	
	МассивНоменклатуры = Новый Массив;
	Для каждого Стр Из Запасы Цикл
		Если ЗначениеЗаполнено(Стр.Номенклатура) И НЕ ЗначениеЗаполнено(Стр.НоменклатураНабора) И ТипЗнч(Стр.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
			МассивНоменклатуры.Добавить(Стр.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНоменклатуры.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		|	И Номенклатура.ЭтоНабор";
		Выборка = Запрос.Выполнить().Выбрать();
		ПараметрыНоменклатуры = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ПараметрыНоменклатуры.Вставить(Выборка.Ссылка, Истина);	
		КонецЦикла; 
		
		Для каждого Стр Из Запасы Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) ИЛИ ЗначениеЗаполнено(Стр.НоменклатураНабора) ИЛИ ТипЗнч(Стр.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
				Стр.ЭтоНабор = Ложь;
			Иначе
				Стр.ЭтоНабор = ПараметрыНоменклатуры.Получить(Стр.Номенклатура);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция  ХарактеристикиНабора(Номенклатура, Текст)
	
	СтруктураПараметров = Новый Структура();
	Если ПустаяСтрока(Текст) Тогда
		СтруктураПараметров.Вставить("СтрокаПоиска", Неопределено);
	Иначе
		СтруктураПараметров.Вставить("СтрокаПоиска", Текст);
	КонецЕсли; 
	СтруктураПараметров.Вставить("Отбор", Новый Структура);
	СтруктураПараметров.Отбор.Вставить("Владелец", Номенклатура);
	Возврат Справочники.ХарактеристикиНоменклатуры.ПолучитьДанныеВыбора(СтруктураПараметров);
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиСобытийРеквизитовТабличнойЧастиБезналичнаяОплата

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ОПЛАТА ПЛАТЕЖНЫМИ КАРТАМИ

// Процедура - обработчик события ПриОкончанииРедактирования строки списка БезналичнаяОплата.
//
&НаКлиенте
Процедура ОплатаПлатежнымиКартамиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры // ОплатаПлатежнымиКартамиПриОкончанииРедактирования()

// Процедура - обработчик события ПередНачаломДобавления табличной части БезналичнаяОплата формы.
//
&НаКлиенте
Процедура ОплатаПлатежнымиКартамиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// АвтоматическиеСкидки
	Если ИспользоватьАвтоматическиеСкидки Тогда
		
		Если Объект.Запасы.Количество() = 0 Тогда
			Если Объект.СкидкиНаценки.Количество() > 0 Тогда
				Объект.СкидкиНаценки.Очистить();
			КонецЕсли;
			Возврат;
		КонецЕсли;
	
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЧекККМ_РассчитатьСкидкиНаценкиКлиент", Истина, Ложь);
			РассчитатьСкидкиНаценкиКлиент();
			ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Рассчитаны автоматические скидки (наценки).'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

&НаКлиенте
Процедура БезналичнаяОплатаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура БезналичнаяОплатаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РозничныеПродажиКлиент.РедактироватьОплату(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БезналичнаяОплатаПередУдалением(Элемент, Отказ)
	
	РозничныеПродажиКлиент.ПроверитьВозможностьУдаленияОплаты(Элемент, Отказ);
	
	Если Не Отказ И Элемент.ТекущиеДанные.СуммаБонусов <> 0 Тогда
		
		Для Каждого СтрокаЗапаса Из Объект.Запасы Цикл
			СтрокаЗапаса.СуммаСкидкиОплатыБонусом = 0;
			ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
			РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаЗапаса, ПараметрыРасчета);
		КонецЦикла;
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовТабличнойЧастиПредоплата

&НаКлиенте
Процедура ПредоплатаДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
		
		СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеДокументПриИзменении(СтрокаТабличнойЧасти.Документ, Объект.Контрагент, Объект.Договор);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = СтруктураДанные.СуммаРасчетов;
		
		СтрокаТабличнойЧасти.Курс = 
			?(СтрокаТабличнойЧасти.Курс = 0,
				?(Объект.Курс = 0,
				1,
				Объект.Курс),
			СтрокаТабличнойЧасти.Курс
		);
		
		СтрокаТабличнойЧасти.Кратность =
			?(СтрокаТабличнойЧасти.Кратность = 0,
				?(Объект.Кратность = 0,
				1,
				Объект.Кратность),
			СтрокаТабличнойЧасти.Кратность
		);
			
		СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаРасчетов,
			СтрокаТабличнойЧасти.Курс,
			КурсНациональнаяВалюта,
			СтрокаТабличнойЧасти.Кратность,
			КратностьНациональнаяВалюта
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
			?(Объект.Курс = 0,
			1,
			Объект.Курс),
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
			?(Объект.Кратность = 0,
			1,
			Объект.Кратность),
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		Объект.Курс,
		СтрокаТабличнойЧасти.Кратность,
		Объект.Кратность
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * Объект.Курс
	);
	
КонецПроцедуры

#КонецОбласти

#Область Взаиморасчеты

&НаСервере
Процедура ВзаиморасчетыПриСозданииНаСервере()
	
	ИспользованиеПредоплаты = ПолучитьФункциональнуюОпцию("ИспользоватьПредоплатуВЧекахККМ");
	Если Не ИспользованиеПредоплаты Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаПредоплата", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЗачтенаПредоплата", "Видимость", Ложь);
		Возврат;
	КонецЕсли;
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	ВидОперацииПомощника = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
	Если Объект.Ссылка.Пустая() ИЛИ Объект.СпособЗачетаПредоплаты.Пустая() Тогда
		// В заказе всегда ручной зачет предоплаты, т.к. не факт, что заказ стоит оплачивать, даже если он проведен.
		Объект.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	КонецЕсли;
	
	ВариантЗаполненияРасшифровки = РасчетыРаботаСФормамиВызовСервера.ПолучитьВариантЗаполненияРасшифровкиДляДокументаОтгрузки(Объект.Проведен, Объект.СпособЗачетаПредоплаты);
	ИстинаПриСозданииНаСервере = Истина;
	ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ИстинаПриСозданииНаСервере);
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьРеквизитыРасчетов(ЭтотОбъект, СтруктураПараметровРасчетов, Неопределено, Истина);
	
	Массив = Новый Массив();
	Массив.Добавить(Тип("ДокументСсылка.ЧекККМ"));
	
	ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
	Элементы.ПредоплатаДокумент.ОграничениеТипа = ДопустимыеТипы;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Если (ОбщегоНазначения.ЭтоМобильныйКлиент() ИЛИ НЕ Элементы.СтраницаПредоплата.Видимость) Тогда
		Элементы.ОстатокВзаиморасчетовСтраницаОплата.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ОстатокВзаиморасчетовСтраницаОплата.Видимость = НЕ Объект.Контрагент.Ссылка.Пустая();
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетовСтраницаОплата.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ПриСозданииНаСервере = Ложь)
	РасчетыРаботаСФормамиВызовСервера.ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ЭтотОбъект, ПриСозданииНаСервере);
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияРасшифровкиПриИзменении(Элемент)
	ВариантЗаполненияРасшифровкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотра(Команда)
	ЗаполнитьТаблицуПросмотраНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПросмотраНаСервере()
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьТаблицуПросмотраНаСервере(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСуммуПлатежаПослеРаспределения(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ДеревоРаспределенияСуммыПлатежа") Тогда
		
		РасчетыРаботаСФормамиКлиент.РаспределитьСуммуПлатежаПослеРаспределения(ЭтотОбъект, РезультатЗакрытия, ДопПараметры);
		
		РаспределитьСуммуПлатежаПослеРаспределенияЗавершение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммуПлатежаПослеРаспределенияЗавершение()
	
	РасчетыРаботаСФормамиВызовСервера.РаспределитьСуммуПлатежаПослеРаспределенияЗавершение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПодбор(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ЗаказВШапке = (Объект.ПоложениеЗаказаПокупателя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке"));
	
	МассивЗаказов = Новый Массив;
	Если Не ЗаказВШапке Тогда
		Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
			СтруктураЗаказа = Новый Структура("Заказ, Всего");
			СтруктураЗаказа.Заказ = ?(СтрокаЗапасы.Заказ = Неопределено, ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка"), СтрокаЗапасы.Заказ);
			СтруктураЗаказа.Всего = СтрокаЗапасы.Всего;
			МассивЗаказов.Добавить(СтруктураЗаказа);
		КонецЦикла;
	КонецЕсли;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	ПараметрыПодбора = Новый Структура(
		"АдресПредоплатаВХранилище,
		|Подбор,
		|ЕстьЗаказ,
		|ЗаказВШапке,
		|Компания,
		|Заказ,
		|Дата,
		|Ссылка,
		|Контрагент,
		|Договор,
		|Курс,
		|Кратность,
		|ВалютаДокумента,
		|СуммаДокумента",
		АдресПредоплатаВХранилище, // АдресПредоплатаВХранилище
		Истина, // Подбор
		ЗначениеЗаполнено(Объект.Заказ), // ЕстьЗаказ
		ЗаказВШапке, // ЗаказВШапке
		Компания, // Компания
		?(ЗаказВШапке, Объект.Заказ, МассивЗаказов), // Заказ
		Объект.Дата, // Дата
		Объект.Ссылка, // Ссылка
		Объект.Контрагент, // Контрагент
		Объект.Договор, // Договор
		Объект.Курс, // Курс
		Объект.Кратность, // Кратность
		Объект.ВалютаДокумента, // ВалютаДокумента
		Объект.Запасы.Итог("Всего") // СуммаДокумента
	);
	
	КодВозврата = Неопределено;
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПокупателей", ПараметрыПодбора,,,,, Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение", ЭтотОбъект, Новый Структура("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
	
	КодВозврата = Результат;
	Если КодВозврата = КодВозвратаДиалога.OK Тогда
		ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры // РедактироватьЗачетПредоплаты()

&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Объект.Предоплата.Загрузить(ТаблицаДляЗагрузки);
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

&НаСервере
Функция ПоместитьПредоплатаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Предоплата.Выгрузить(),
		УникальныйИдентификатор
	);
	
КонецФункции

&НаКлиенте
Процедура ТаблицаДляПросмотраОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	РасчетыРаботаСФормамиКлиент.ТаблицаДляПросмотраОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка, СтруктураПараметровРасчетов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ОбработкаНавигационнойСсылки");
	
КонецПроцедуры

#КонецОбласти

#Область ОстаткиИРезервы

&НаКлиенте
Процедура ОстаткиИРезервы(Команда)
	
	РежимОстаткиИРезервы = Не РежимОстаткиИРезервы;
	Элементы.ОстаткиИРезервы.Пометка = Не Элементы.ОстаткиИРезервы.Пометка;
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	
	Если РежимОстаткиИРезервы Тогда
		Элементы.Запасы.ВысотаШапки = 2;
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	Иначе
		Элементы.Запасы.ВысотаШапки = 1;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКолонокВРазрезеЗапасов()
	
	Элементы.ЗапасыКонтекстноеМенюГруппаРаботаССтроками.Видимость = РежимОстаткиИРезервы;
	Элементы.ЗапасыОстатки.Видимость = РежимОстаткиИРезервы;
	Элементы.ЗапасыКонтекстноеМенюГруппаРаботаССтроками.Видимость = РежимОстаткиИРезервы;
	
	Если РежимОстаткиИРезервы Тогда
		Элементы.ЗапасыСтруктурнаяЕдиница.Видимость = Ложь;
	Иначе
		Элементы.ЗапасыСтруктурнаяЕдиница.Видимость = Не СкладВШапке;
	КонецЕсли;
	
	Элементы.ЗапасыСтруктурнаяЕдиницаДляРежимаОстатки.Видимость = РежимОстаткиИРезервы И РазрешитьСкладыВТабличныхЧастях;
	
	Если РежимОстаткиИРезервы Тогда
		Если КэшЗначений.УчетПоЯчейкам И Элементы.ЗапасыЯчейка.Видимость Тогда
			Элементы.ЗапасыЯчейка.Видимость = Ложь;
			Элементы.ЗапасыЯчейкаДляРежимаОстатки.Видимость = РазрешитьСкладыВТабличныхЧастях;
		КонецЕсли;
	Иначе
		Если КэшЗначений.УчетПоЯчейкам И Элементы.ЗапасыЯчейкаДляРежимаОстатки.Видимость Тогда
			Элементы.ЗапасыЯчейка.Видимость = РазрешитьСкладыВТабличныхЧастях;
			Элементы.ЗапасыЯчейкаДляРежимаОстатки.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ЗапасыЗаполнитьПоОстаткамИРезервамВсеСклады.Видимость = Не СкладВШапке Или РежимОстаткиИРезервы;
	Элементы.ЗапасыКонтекстноеМенюЗаполнитьПоОстаткамИРезервамВсеСклады.Видимость = Не СкладВШапке Или РежимОстаткиИРезервы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если Параметры.ВыбранноеПоле = "ЗапасыВРезерве" И Результат.Значение = Объект.Ссылка Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ЗапасыРезервДляРежимаОстатки;
		Возврат;
	КонецЕсли;
	
	Если Параметры.ВыбранноеПоле = "ЗапасыОстатокОбщий" ИЛИ Параметры.ВыбранноеПоле = "ЗапасыВРезерве" Тогда
		
		Если Результат.Значение = "ОтчетОстаткиНаСкладах" Тогда
			
			Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда Возврат КонецЕсли;
			
			Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "ПоМестамХранения");
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
			ОтборРасшифровки = Новый Соответствие;
			ОтборРасшифровки.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
			ОтборРасшифровки.Вставить("Характеристика", ТекущиеДанные.Характеристика);
			ОтборРасшифровки.Вставить("СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
			ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
			
			ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия);
			
		Иначе
			
			Если ТипЗнч(Результат.Значение) = Тип("Структура") И Результат.Значение.Свойство("Склад") 
				И Не ТекущиеДанные.СтруктурнаяЕдиница = Результат.Значение.Склад Тогда
				
				ТекущиеДанные.СтруктурнаяЕдиница = Результат.Значение.Склад;
				
				СтруктураОстатков = СвободныйОстатокПоСтруктурнойЕдинице(
					ТекущиеДанные.СтруктурнаяЕдиница,
					ТекущиеДанные.Номенклатура,
					ТекущиеДанные.Характеристика,
					ТекущиеДанные.Партия,
					ТекущиеДанные.ЕдиницаИзмерения);
				
				ТекущиеДанные.Доступно = СтруктураОстатков.КоличествоРезерв + СтруктураОстатков.КоличествоСвободно;
				
				ЗаполнитьЗначенияОстатковПоНоменклатуре(ТекущиеДанные);
				
			Иначе
				
				Если Не ТипЗнч(Результат.Значение) = Тип("Структура") Тогда
					ПоказатьЗначение(,Результат.Значение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗначение(,Результат.Значение);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияОстатковПоНоменклатуре(ТекущиеДанные)
	
	Если РежимОстаткиИРезервы Тогда
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	ТекущиеДанные.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	ТекущиеДанные.Характеристика);
		СтруктураДанные.Вставить("Партия", 	ТекущиеДанные.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", ТекущиеДанные.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", ТекущиеДанные.ИспользоватьПартии);
		
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные, ТекущиеДанные.Номенклатура);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРезервДляРежимаОстаткиПриИзменении(Элемент)
	Если РежимОстаткиИРезервы Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
		ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОбновить(Команда)
	ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоТемЧтоМожноОтгрузить(Команда)
	
	Если Не РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	Для Каждого СтрокаЗапасов Из Объект.Запасы Цикл
		СтрокаЗапасов.Количество = СтрокаЗапасов.МожноОтгрузить;
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаЗапасов);
	КонецЦикла;
	
	ПересчитатьДокументНаКлиенте();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПартияПриИзменении(Элемент)
		Если РежимОстаткиИРезервы Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
		ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРазбитьСтроку(Команда)

	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в текущей строке равно нулю.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
		
	
	ПараметрыОповещения = Новый Структура("СтрокаТабличнойЧасти, АвтоматическиеСкидкиРассчитаны", СтрокаТабличнойЧасти, Объект.СкидкиРассчитаны);
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТабличнойЧастиЗавершение", ЭтаФорма, ПараметрыОповещения);
	
	ПоказатьВводЧисла(Оповещение, СтрокаТабличнойЧасти.Количество, "Введите количество в новой строке", 15, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТабличнойЧастиЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	СтрокаТабличнойЧасти = Параметры.СтрокаТабличнойЧасти;
	
	Если Результат <= 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в новой строке должно быть больше нуля.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	Если Результат >= СтрокаТабличнойЧасти.Количество Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в новой строке должно быть меньше чем в текущей.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;

	НоваяСтрока = Объект.Запасы.Вставить(СтрокаТабличнойЧасти.НомерСтроки);
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);

	НоваяСтрока.Резерв = 0;
	
	СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество - Результат;
	НоваяСтрока.Количество = Результат;
	
	// АвтоматическиеСкидки
	Если НоваяСтрока.ПроцентАвтоматическойСкидки <> 0 ИЛИ НоваяСтрока.СуммаАвтоматическойСкидки <> 0 Тогда
		НоваяСтрока.ПроцентАвтоматическойСкидки = 0;
		НоваяСтрока.СуммаАвтоматическойСкидки = 0;
	ИначеЕсли ИспользоватьАвтоматическиеСкидки Тогда
		// Автоматические скидки стали неактуальны.
		СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	НоваяСтрока.КлючСвязи = 0;
	НоваяСтрока.СерииНоменклатуры = "";
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, НоваяСтрока);
	НоваяСтрока.КодМаркировки = "";
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
	
	ПересчитатьДокументНаКлиенте();
	
	Если РежимОстаткиИРезервы Тогда
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия", 	СтрокаТабличнойЧасти.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
		
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
		
	КонецЕсли;
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	СобытияФормИСКлиент.ПриИзмененииЭлемента(ЭтаФорма, Элементы.Запасы, ДополнительныеПараметры);
	Если ДополнительныеПараметры.Свойство("ТребуетсяСерверныйВызов") Тогда
		ПодключитьОбработчикОжидания("ЗапасыПриОкончанииРедактированияДляСерверногоВызова", 0.5, Истина);
	КонецЕсли;
	// Конец ИнтеграцияГосИС
	
	Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДублиСтрок(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если Не Элементы.ДекорацияОтборПоДублям.Видимость Тогда
		
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, Партия"
		, СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрокаТабличнойЧасти.Партия);
		
		НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() <=1 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Дубли строки не найдены.'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			Возврат
		КонецЕсли;
		
		Если Элементы.Запасы.ОтборСтрок <> Неопределено Тогда
			Элементы.Запасы.ОтборСтрок = Неопределено;
		КонецЕсли;
		
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("Номенклатура, Характеристика, Партия"
		, СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрокаТабличнойЧасти.Партия);
		
		Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтрок.Пометка = Истина;
		
		Элементы.ДекорацияОтборПоДублям.Заголовок = ИнформацияОбОтборе(СтрокаТабличнойЧасти.НомерСтроки);
		Элементы.ДекорацияОтборПоДублям.Видимость = Истина;
		
		Элементы.Запасы.ОтборСтрок = ПараметрыОтбора;
		
	Иначе
		Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтрок.Пометка = Ложь;
		Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
		Элементы.Запасы.ОтборСтрок = Неопределено;
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтборПоДублямОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтрок.Пометка = Ложь;
	Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
	
	Элементы.Запасы.ОтборСтрок = Неопределено;
КонецПроцедуры

&НаСервере
Функция ИнформацияОбОтборе(НомерСтроки)
	Возврат НоменклатураВДокументахСервер.ИнформацияОбОтбореДубльСтроки(НомерСтроки);
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные = Неопределено, НоменклатураОтбора = Неопределено)
	
	НоменклатураВДокументахСервер.ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиЧекККМ(Объект, СтруктураДанные, НоменклатураОтбора);
	НоменклатураВДокументахСервер.ЗаполнитьПризнакТипаЗапасНоменклатуры(Объект);
	
КонецПроцедуры

&НаСервере
Функция СписокДокументовПоЗаказу(ТипОперации, СтруктураПараметров)
	Возврат НоменклатураВДокументахСервер.СписокДокументовПоЗаказу(Объект, ТипОперации, СтруктураПараметров);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока)
	
	Если ТекущаяСтрока.НеобходимостьВводаКодаМаркировки Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировки) Тогда
			ТекущаяСтрока.ИндексАкцизнойМарки = 1;
		Иначе
			ТекущаяСтрока.ИндексАкцизнойМарки = 2;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.ИндексАкцизнойМарки = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтруктурныеЕдиницы

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамИРезервамНаСервере()
	
	Если СкладВШапке Тогда
		ЗначениеСклада = ?(Не ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница), Неопределено, Объект.СтруктурнаяЕдиница);
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ЗначениеСклада;
		КонецЦикла;
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьКоличествоПоОстаткамИРезервамРасходнаяНакладная(Объект);
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
	ОбновитьПризнакиНабора(Объект.Запасы);
	// Конец Наборы
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПризнакиДоступностиЯчеек(Форма)

	Объект = Форма.Объект;
	КэшЗначений = Форма.КэшЗначений;
	
	Если Не КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПоложениеСклада <> ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		Если Результат = Неопределено Тогда
			Результат = Ложь;
		КонецЕсли;
		СтрокаТабличнойЧасти.ЯчейкаДоступна = Результат И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) И СтрокаТабличнойЧасти.ТипНоменклатурыЗапас;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамИРезервамВсеСклады(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Товары, услуги"" не заполнена.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьПоОстаткамИРезервамНаСервере();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЯчейкаДляРежимаОстаткиПриИзменении(Элемент)
	
	Если РежимОстаткиИРезервы Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаДляРежимаОстаткиОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат
	КонецЕсли;
	ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаДляРежимаОстаткиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = Неопределено Тогда Возврат КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если ВыбранноеЗначение = "ОтчетОстаткиНаСкладах" Тогда
		
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда Возврат КонецЕсли;
		
		Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "ПоМестамХранения");
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
		ОтборРасшифровки = Новый Соответствие;
		ОтборРасшифровки.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		ОтборРасшифровки.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		ОтборРасшифровки.Вставить("СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
		ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
		
		ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("Склад") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ВыбранноеЗначение.Склад;
		СтрокаТабличнойЧасти.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
	Иначе
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ВыбранноеЗначение;
		СтрокаТабличнойЧасти.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
	КонецЕсли;
	СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	
	ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьДоступностьЯчеек(СтруктурныеЕдиницы, СоответствиеСтруктурныхЕдиниц)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурныеЕдиницы", СтруктурныеЕдиницы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка,
	|	СтруктурныеЕдиницы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&СтруктурныеЕдиницы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Соответствие = Новый Соответствие(СоответствиеСтруктурныхЕдиниц);
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Ссылка, Не Выборка.ОрдерныйСклад И Выборка.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	КонецЦикла;
	СоответствиеСтруктурныхЕдиниц = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

&НаКлиенте
Функция ЯчейкаДоступна(СтруктурнаяЕдиница)
	
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) ИЛИ ТипЗнч(СтруктурнаяЕдиница)<>Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если НЕ КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
	Если Результат = Неопределено Тогда
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
		Если Результат=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СвободныйОстатокПоСтруктурнойЕдинице(СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, ЕдиницаИзмерения)
	
	Коэффициент = ?(ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), ЕдиницаИзмерения.Коэффициент, 1);
	
	Организация = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Партия", Партия);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	ЕстьЗаказ = ЗначениеЗаполнено(Объект.Заказ);
	
	Если ЕстьЗаказ Тогда
		Запрос.УстановитьПараметр("Заказ", Объект.Заказ);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЗапасыОстаткиСвободные.КоличествоОстаток) КАК КоличествоСвободно,
		|	СУММА(ЗапасыОстаткиРезерв.КоличествоОстаток) КАК КоличествоРезерв
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|				И ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|				И Организация = &Организация
		|				И Характеристика = &Характеристика
		|				И Партия = &Партия
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстаткиСвободные,
		|	РегистрНакопления.Запасы.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|				И ЗаказПокупателя = &Заказ
		|				И Организация = &Организация
		|				И Характеристика = &Характеристика
		|				И Партия = &Партия
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстаткиРезерв
		|
		|УПОРЯДОЧИТЬ ПО
		|	КоличествоСвободно УБЫВ";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЗапасыОстаткиСвободные.КоличествоОстаток) КАК КоличествоСвободно
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|				И ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|				И Организация = &Организация
		|				И Характеристика = &Характеристика
		|				И Партия = &Партия
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстаткиСвободные
		|
		|УПОРЯДОЧИТЬ ПО
		|	КоличествоСвободно УБЫВ";
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СтруктураВозврата = Новый Структура("КоличествоСвободно, КоличествоРезерв");
	
	Пока Результат.Следующий() Цикл
		СтруктураВозврата.КоличествоСвободно = Результат.КоличествоСвободно/Коэффициент;
		СтруктураВозврата.КоличествоРезерв = ?(ЕстьЗаказ, Результат.КоличествоРезерв/Коэффициент, 0);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыСтруктурныхЕдиниц()
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		Возврат;
	КонецЕсли;
	НастройкаРМК = РабочееМестоКассираВызовСервера.ПолучитьНастройкуРМК(РабочееМесто);
	Если Не ЗначениеЗаполнено(НастройкаРМК) Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаРМК.СтруктурныеЕдиницы.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "ТолькоПросмотр", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Заголовок", НСтр("ru = 'Склад продажи'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", СкладВШапке);
		
		СписокДоступныхСкладов.Очистить();
		СписокДоступныхСкладов.Добавить(Объект.КассаККМ.СтруктурнаяЕдиница);
		Для Каждого СтрокаСтруктурнойЕдиницы Из НастройкаРМК.СтруктурныеЕдиницы Цикл
			СписокДоступныхСкладов.Добавить(СтрокаСтруктурнойЕдиницы.СтруктурнаяЕдиница);
		КонецЦикла;
		
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Очистить();
		Элементы.ЗапасыСтруктурнаяЕдиница.СписокВыбора.Очистить();
		Элементы.ЗапасыСтруктурнаяЕдиницаДляРежимаОстатки.СписокВыбора.Очистить();
		Для Каждого ЭлементСписка Из СписокДоступныхСкладов Цикл
			Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(ЭлементСписка.Значение);
			Элементы.ЗапасыСтруктурнаяЕдиница.СписокВыбора.Добавить(ЭлементСписка.Значение);
			Элементы.ЗапасыСтруктурнаяЕдиницаДляРежимаОстатки.СписокВыбора.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыЯчеек()
	
	ВидимостьЯчейки = ЕстьЯчейки(Объект.СтруктурнаяЕдиница);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ячейка", "Видимость", ВидимостьЯчейки И СкладВШапке);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЯчейки(СтруктурнаяЕдиница)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Ячейки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Ячейки КАК Ячейки
	|ГДЕ
	|	Ячейки.Владелец = &СтруктурнаяЕдиница");
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	ЕстьЯчейки = Не Запрос.Выполнить().Пустой();
	
	Возврат ЕстьЯчейки;
	
КонецФункции

&НаСервере
Процедура ОбновитьТипНоменклатурыЗапас()
	
	Если НЕ КэшЗначений.Свойство("ТипНоменклатурыЗапас") Тогда
		КэшЗначений.Вставить("ТипНоменклатурыЗапас", Новый Соответствие);
	КонецЕсли;
	
	Кешировать = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		Если КэшЗначений.ТипНоменклатурыЗапас.Получить(СтрокаТабличнойЧасти.Номенклатура) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Кешировать.Добавить(СтрокаТабличнойЧасти.Номенклатура);
	КонецЦикла;
	
	Если Кешировать.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Кешировать", Кешировать);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)) КАК ТипНоменклатурыЗапас
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&Кешировать)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			КэшЗначений.ТипНоменклатурыЗапас.Вставить(Выборка.Номенклатура, Выборка.ТипНоменклатурыЗапас);	
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = КэшЗначений.ТипНоменклатурыЗапас.Получить(СтрокаТабличнойЧасти.Номенклатура);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область АгентскиеПлатежи

&НаКлиенте
Процедура ВводПараметровАгентскогоПлатежа(ТекущиеДанные, Элемент)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РедактируемаяСтрока", ТекущиеДанные);
	
	ПараметрыФормы = Новый Структура;
	Если Элемент = Элементы.ЗапасыСумма Тогда
		ПараметрыФормы.Вставить("Платеж", ТекущиеДанные.Сумма);
		ДополнительныеПараметры.Вставить("ПересчиталиСумму", Истина);
	Иначе
		ПараметрыФормы.Вставить("Платеж", ТекущиеДанные.Цена);
	КонецЕсли;
	ПараметрыФормы.Вставить("ДанныеАгентскогоДоговора",         ТекущиеДанные.ДанныеАгентскогоДоговора);
	ПараметрыФормы.Вставить("ВознаграждениеВключеноВСтоимость", Элемент = Элементы.ЗапасыЦенаСАгентскимВознаграждением);
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
									"ОповещениеВводПараметровАгентскогоПлатежа" ,
									ЭтотОбъект,
									ДополнительныеПараметры);
									
	ОткрытьФорму("ОбщаяФорма.ВводПараметровАгентскогоПлатежа", ПараметрыФормы, ЭтотОбъект,,,,ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводПараметровАгентскогоПлатежа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	РедактируемаяСтрока = ДополнительныеПараметры.РедактируемаяСтрока;
	Если ДополнительныеПараметры.Свойство("ПересчиталиСумму") И ДополнительныеПараметры.ПересчиталиСумму Тогда
		РедактируемаяСтрока.Сумма = Результат.Платеж;
		ЗапасыСуммаПриИзменении(Неопределено);
	Иначе
		РедактируемаяСтрока.Цена = Результат.Платеж;
		ЗапасыЦенаПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Доставка

Процедура УстановитьВидимостьДанныхПоДоставке()
	ДоставкаСервер.ОбновитьДанныеПоДоставкеИзСервиса(Объект.Ссылка,"СтраницаДоставка", Объект.Организация, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

