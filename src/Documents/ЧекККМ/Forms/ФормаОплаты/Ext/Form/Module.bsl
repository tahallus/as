#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	
	ПересчитатьСуммы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияБоковаяПанельНажатие(Элемент)
	
	Если Элементы.ДекорацияБоковаяПанель.Заголовок = ">>" Тогда
		Элементы.ГруппаБоковаяПанель.Видимость = Ложь;
		Элементы.ДекорацияБоковаяПанель.Заголовок = "<<";
		Элементы.ДекорацияБоковаяПанель.Картинка = БиблиотекаКартинок.РМК_РазвернутьДополнительнуюПанель;
	Иначе
		Элементы.ГруппаБоковаяПанель.Видимость = Истина;
		Элементы.ДекорацияБоковаяПанель.Заголовок = ">>";
		Элементы.ДекорацияБоковаяПанель.Картинка = БиблиотекаКартинок.РМК_СвернутьДополнительнуюПанель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПредоплатыПриИзменении(Элемент)
	
	ПересчитатьСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура Договор1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура СоставЧековПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		СформироватьЗаголовокСоставаЧека(Элемент.ТекущиеДанные.КоличествоСтрок);
		СоставЧека = Элемент.ТекущиеДанные.Состав;
		РеквизитыЧека = Элемент.ТекущиеДанные.Реквизиты;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОплатитьСмешаннаяОплата1",
			"Доступность",
			Элемент.ТекущиеДанные.Пометка);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОплатитьКартой1",
			"Доступность",
			Элемент.ТекущиеДанные.Пометка);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаБезналичнаяОплата",
			"Доступность",
			Элемент.ТекущиеДанные.Пометка);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаБезналичнаяОплата_МК",
			"Доступность",
			Элемент.ТекущиеДанные.Пометка);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"СтраницаПредоплата",
			"Доступность",
			Элемент.ТекущиеДанные.Пометка);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОплатитьНаличными1",
			"Доступность",
			Элемент.ТекущиеДанные.Пометка Или (Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Чек) И Не Объект.ОперацияСДенежнымиСредствами));
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНаличнаяОплата",
			"Доступность",
			Элемент.ТекущиеДанные.Пометка Или (Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Чек) И Не Объект.ОперацияСДенежнымиСредствами));
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"СоставЧека",
			"Доступность",
			ЗначениеЗаполнено(Элемент.ТекущиеДанные.Чек));
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"РеквизитыЧека",
			"Доступность",
			ЗначениеЗаполнено(Элемент.ТекущиеДанные.Чек));
			
		СуммаДокумента = Элемент.ТекущиеДанные.Сумма;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ЭквайринговыйТерминал формы.
//
&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	ЭквайринговыйТерминалПриИзмененииОбработчикСобытия();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ЭквайринговыйТерминал формы.
//
&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении_МК(Элемент)
	ЭквайринговыйТерминалПриИзмененииОбработчикСобытия();
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзмененииОбработчикСобытия()

	ЭквайринговыйТерминалПриИзмененииНаСервере();
	Если НЕ ЭтоМобильныйКлиент Тогда
		Для Каждого ПодчиненныйЭлемент Из Элементы.ГруппаКартыОплаты.ПодчиненныеЭлементы Цикл
			ПодчиненныйЭлемент.Доступность = ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Или (СтрНайти(ПодчиненныйЭлемент.Имя, "Сертификат") > 0);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ЭквайринговыйТерминал на сервере.
//
&НаСервере
Процедура ЭквайринговыйТерминалПриИзмененииНаСервере()
	
	ПолучитьСсылкиНаОборудование();
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	
	НастроитьЭлементыНаСтраницеГруппаОплатаКартой();
	
КонецПроцедуры // ЭквайринговыйТерминалПриИзмененииНаСервере()

// Процедура - обработчик события ПриИзменении элемента ПолученоНаличными формы.
//
&НаКлиенте
Процедура ДокументЧекККМПолученоНаличнымиПриИзменении(Элемент)
	
	ПересчитатьСуммы();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ОплатаКартой_N формы, где N - индекс строки в ТЗ ВременнаяТаблицаКарт.
//
&НаКлиенте
Процедура СуммаОплатыКартойПриИзменении(Элемент)
	
	ТекущееПолеВводаСуммы = Элемент.Имя;
	Если ВременнаяТаблицаКарт.Количество() < 2 Тогда
		Элементы.НадписьТекущееПолеВвода.Видимость = Ложь;
	Иначе
		ТекС = СтрНайти(СокрЛП(ТекущееПолеВводаСуммы), "_");
		Индекс = Число(Сред(СокрЛП(ТекущееПолеВводаСуммы), ТекС+1));
		НадписьТекущееПолеВвода = "Для строки оплаты №"+(Индекс+1);
		Элементы.НадписьТекущееПолеВвода.Видимость = Истина;
	КонецЕсли;
	
	ПересчитатьСуммы();
	
	КоличествоКартДляЗаголовка = КоличествоКарт;
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора элемента ОплатаКартой_N формы, где N - индекс строки в ТЗ ВременнаяТаблицаКарт.
//
&НаКлиенте
Процедура СуммаОплатыКартойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущееПолеВводаСуммы = Элемент.Имя;
	Если ВременнаяТаблицаКарт.Количество() < 2 Тогда
		Элементы.НадписьТекущееПолеВвода.Видимость = Ложь;
	Иначе
		ТекС = СтрНайти(СокрЛП(ТекущееПолеВводаСуммы), "_");
		Индекс = Число(Сред(СокрЛП(ТекущееПолеВводаСуммы), ТекС+1));
		НадписьТекущееПолеВвода = "Для строки оплаты №"+(Индекс+1);
		Элементы.НадписьТекущееПолеВвода.Видимость = Истина;
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.Кнопка7_2;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплатыБонусамиПриИзменении(Элемент)
	
	Индекс = Число(НайтиИндексВНаименованииНаКлиенте(Элемент.Имя));
	
	Если ВременнаяТаблицаКарт[Индекс].СуммаБонусов = 0 Тогда
		// Удаление скидок
	КонецЕсли;
	
	РаспределитьОплатуБонусамиНаСервере();
	
	СуммаДокумента = Объект.Запасы.Итог("Всего");
	Объект.СуммаДокумента = СуммаДокумента;
	
	ПересчитатьСуммы();
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьОплатуБонусамиНаСервере()
	
	РаботаСБонусами.РаспределитьОплатуБонусамиКакСкидку(Объект, ВременнаяТаблицаКарт);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элементов ВидПлатежнойКарты_N, НомерПлатежнойКарты_N, НомерЧекаЭТ_N и СсылочныйНомер_N,
// где N - индекс строки в ТЗ ВременнаяТаблицаКарт.
//
//@skip-warning - подключаемый обработчик
&НаКлиенте
Процедура РеквизитКартыПриИзменении(Элемент)

	КоличествоКартДляЗаголовка = КоличествоКарт;

КонецПроцедуры

// Процедура - обработчик события ПриСменеСтраницы элемента ГруппаОплата формы.
//
&НаКлиенте
Процедура ГруппаОплатаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// Нужно очищать комбинации клавиш, чтобы на странице оплаты платежными картами
	// можно было ввести номер карты с цифровой клавиатуры.
	Если ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата Тогда
		Для Сч = 0 По 9 Цикл
			Элементы["Кнопка"+Сч].СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша["Num"+Сч], Ложь, Истина, Ложь);
		КонецЦикла;
		Элементы.РазделительДробнойЧасти.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.NumDecimal, Ложь, Истина, Ложь);
		Элементы.Сбросить.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.BackSpace, Ложь, Истина, Ложь);
	Иначе
		Для Сч = 0 По 9 Цикл
			Элементы["Кнопка"+Сч].СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
		КонецЦикла;
		Элементы.РазделительДробнойЧасти.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
		Элементы.Сбросить.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
		
		Если ТекущаяСтраница = Элементы.ГруппаБезналичнаяОплата И ВременнаяТаблицаКарт.Количество() > 0 И НЕ ЭтоМобильныйКлиент Тогда
			ТекущийЭлемент = Элементы.ОплатаКартой_0;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаВыборФормыОплатыМК Тогда
		Элементы.ГруппаПодвал_МК.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитСертификатаПриИзменении(Элемент)
	
	Если Найти(Элемент.Имя, "ПодарочныйСертификат") <> 0 Тогда
		
		УстановитьДоступностьНомераСертификатаНаСервере(Элемент.Имя);
		ПересчитатьСуммы();
		
	ИначеЕсли Найти(Элемент.Имя, "НомерСертификата") <> 0 Тогда
		
		ЗаполнитьОстатокПоСертификату(НайтиИндексВНаименовании(Элемент.Имя));
		ПересчитатьСуммы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьНомераСертификатаНаСервере(ИмяЭлемента, ОчищатьНомер = Истина)
	
	ИндексЭлемента = НайтиИндексВНаименовании(ИмяЭлемента);
	СтрокаТаблицы = ВременнаяТаблицаКарт[Число(ИндексЭлемента)];
	НомерСертификата = Элементы.Найти(ИмяЭлемента).Родитель.ПодчиненныеЭлементы.Найти("НомерСертификата_"
		+ ИндексЭлемента);
		
	Если Не НомерСертификата = Неопределено Тогда
		Если ОчищатьНомер Тогда
			СтрокаТаблицы.НомерСертификата = Справочники.СерииНоменклатуры.ПустаяСсылка();
			СтрокаТаблицы.ОстатокСертификата = 0;
		КонецЕсли;
		Если СтрокаТаблицы.ПодарочныйСертификат.ИспользоватьСерииНоменклатуры Тогда
			НомерСертификата.Доступность = Истина;
			СтрокаТаблицы.НоминалСертификата = 0;
		Иначе
			НомерСертификата.Доступность = Ложь;
			СтрокаТаблицы.НоминалСертификата = СтрокаТаблицы.ПодарочныйСертификат.Номинал;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСертификатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = ПодготовитьСтруктуруВыбораСертификатаНаСервере(Элемент.Имя);
	
	ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаВыбора", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьСтруктуруВыбораСертификатаНаСервере(ИмяЭлемента)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПодборДляОплаты", Истина);
	СтруктураПараметров.Вставить("Отбор", Новый Структура("Владелец",
								ВременнаяТаблицаКарт[Число(НайтиИндексВНаименовании(ИмяЭлемента))].ПодарочныйСертификат));
								
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура РеквизитКредитаПриИзменении(Элемент)
	
	ОбработатьИзменениеРеквизитаКредитаНаСервере(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеРеквизитаКредитаНаСервере(ИмяЭлемента)
	
	ИндексСтроки = НайтиИндексВНаименовании(ИмяЭлемента);
	МассивТерминалов = ЭквайринговыеОперацииСервер.ПолучитьТерминалыПоДоговору(ВременнаяТаблицаКарт[Число(ИндексСтроки)].ДоговорКредита);
	
	Если МассивТерминалов.Количество() > 0 Тогда
		ВременнаяТаблицаКарт[Число(ИндексСтроки)].ЭквайринговыйТерминал = МассивТерминалов[0];
		ВременнаяТаблицаКарт[Число(ИндексСтроки)].ВидПлатежнойКарты = ЭквайринговыеОперацииКлиентСервер.ВидПлатежнойКартыДляКредита();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура пересчитывает сумму сдачи и перезаполняет списки выбора в полях ввода суммы.
//
&НаКлиенте
Процедура ПересчитатьСуммы()
	
	Если МножественныйРежимЧеков
		И Элементы.СоставЧеков.ТекущиеДанные <> Неопределено Тогда
		СуммаДокумента = Элементы.СоставЧеков.ТекущиеДанные.Сумма;
	ИначеЕсли Объект.ОперацияСДенежнымиСредствами Тогда
		СуммаДокумента = Объект.СуммаДокумента;
	Иначе
		СуммаДокумента = Объект.Запасы.Итог("Всего");
	КонецЕсли;
	ОплатаКартами = ВременнаяТаблицаКарт.Итог("Сумма");
	Предоплата = Объект.Предоплата.Итог("СуммаРасчетов");
	СуммаСдачи = ПолученоНаличными + ОплатаКартами + Предоплата - СуммаДокумента;
	// Сумма сдачи не должна быть больше оплаты наличными.
	// Если это так, то возвращать нужно на карту.
	Если СуммаСдачи > ПолученоНаличными Тогда
		// Нужно выдать предупреждение пользователю.
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр(
			"ru = 'Сумма сдачи превышает сумму оплаты наличными. Требуется уменьшить сумму оплаты картой или вернуть на карту %1 %2'"),
			СуммаСдачи - ПолученоНаличными, ВалютаДокумента);
		Сообщение.Сообщить();
	КонецЕсли;
	
	Дельта = СуммаДокумента - ПолученоНаличными - ОплатаКартами - Предоплата;
	
	Элементы.ПолученоНаличными.СписокВыбора.Очистить();
	Если Дельта > 0 И НЕ ЭтоМобильныйКлиент Тогда
		Элементы.ПолученоНаличными.СписокВыбора.Добавить(Дельта, СтрШаблон(НСтр("ru = '%1 %2 (к оплате)'"), Дельта,
			ВалютаДокумента));
	КонецЕсли;
	Если Дельта <> СуммаДокумента И НЕ ЭтоМобильныйКлиент Тогда
		Элементы.ПолученоНаличными.СписокВыбора.Добавить(СуммаДокумента, СтрШаблон(НСтр("ru = '%1 %2 (сумма док-та)'"),
			СуммаДокумента, ВалютаДокумента));
	КонецЕсли;
	
	Если НЕ ЭтоМобильныйКлиент Тогда
		Для Каждого ТекущаяСтрока Из ВременнаяТаблицаКарт Цикл
			Индекс = ВременнаяТаблицаКарт.Индекс(ТекущаяСтрока);
			Если ТекущаяСтрока.СуммаБонусов > 0 Тогда
				Продолжить;
			КонецЕсли;
			Элементы["ОплатаКартой_" + Индекс].СписокВыбора.Очистить();
			Если Дельта > 0 Тогда
				Элементы["ОплатаКартой_" + Индекс].СписокВыбора.Добавить(Дельта, СтрШаблон(НСтр(
					"ru = '%1 %2 (к оплате)'"), Дельта, ВалютаДокумента));
			КонецЕсли;
			Если ТекущаяСтрока.ОстатокСертификата > 0 Тогда
				Элементы["ОплатаКартой_" + Индекс].СписокВыбора.Добавить(ТекущаяСтрока.ОстатокСертификата, СтрШаблон(
					НСтр("ru = '%1 %2 (остаток)'"), ТекущаяСтрока.ОстатокСертификата, ВалютаДокумента));
			КонецЕсли;
			Если ТекущаяСтрока.НоминалСертификата > 0 Тогда
				Элементы["ОплатаКартой_" + Индекс].СписокВыбора.Добавить(ТекущаяСтрока.НоминалСертификата, СтрШаблон(
					НСтр("ru = '%1 %2 (номинал)'"), ТекущаяСтрока.НоминалСертификата, ВалютаДокумента));
			КонецЕсли;
			Если Дельта <> СуммаДокумента Тогда
				Элементы["ОплатаКартой_" + Индекс].СписокВыбора.Добавить(СуммаДокумента, СтрШаблон(НСтр(
					"ru = '%1 %2 (сумма док-та)'"), СуммаДокумента, ВалютаДокумента));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьДоступностьВариантовОплатНаКлиенте()
	
	Если Объект.БезналичнаяОплата.Количество() > 0 Тогда
		Элементы.ОплатитьНаличными.Доступность = Ложь;
		Элементы.ОплатитьКартой.Доступность = Ложь;
	Иначе
		Элементы.ОплатитьНаличными.Доступность = Истина;
		Элементы.ОплатитьКартой.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если 1=0 Тогда
		ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	Если 1=0 Тогда
		ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	Если 1=0 Тогда
		ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	КонецЕсли;
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	Если 1=0 Тогда
		ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Процедура удаляет строки с нулевой суммой в ТЧ БезналичнаяОплата.
//
&НаКлиенте
Процедура УдалитьСтрокиОплатыСНулевойСуммой()

	МСтрокДляУдаления = Новый Массив;
	Для каждого ТекущаяСтрока Из Объект.БезналичнаяОплата Цикл
		Если (ТекущаяСтрока.Сумма = 0) И (ТекущаяСтрока.СуммаБонусов = 0) Тогда
			МСтрокДляУдаления.Добавить(ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекущаяСтрокаДляУдаления Из МСтрокДляУдаления Цикл
		Объект.БезналичнаяОплата.Удалить(ТекущаяСтрокаДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОплатуБонусами()
	
	Для Каждого СтрокаТЧ Из Объект.Запасы Цикл
		СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + СтрокаТЧ.СуммаСкидкиОплатыБонусом;
		СтрокаТЧ.СуммаСкидкиОплатыБонусом = 0;
		СтрокаТЧ.Всего = СтрокаТЧ.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.Запасы.Итог("Всего");
	
КонецПроцедуры

// Процедура заполнения списка видов платежных карт.
//
&НаСервере
Процедура ПолучитьСписокВыбораВидовПлатежныхКарт()
	
	МассивВидовПлатежныхКарт = Справочники.ЭквайринговыеТерминалы.ВидыПлатежныхКарт(Объект.ЭквайринговыйТерминал);
	ВидыПлатежныхКарт.ЗагрузитьЗначения(МассивВидовПлатежныхКарт);
	
КонецПроцедуры // ПолучитьСписокВыбораВидовПлатежныхКарт()

&НаСервере
Процедура УстановитьВидимостьОтправкиЭлектронныхЧеков()
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И 
		Объект.КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор Тогда
		Если Объект.КассаККМ.ПодключаемоеОборудование.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
			Элементы.ГруппаОтправкаЧека.Видимость = Истина;
		Иначе
			Элементы.ГруппаОтправкаЧека.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаОтправкаЧека.Видимость = Ложь;
	КонецЕсли;
	
	Если КассаККМИспользоватьБезПодключенияОборудования Тогда
		Элементы.ГруппаОтправкаЧека.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьДанныеОСуммахОплатыНаКлиенте()
	
	ПолученоНаличными = 0;
	
	ВременнаяТаблицаКарт.Очистить();
	Для каждого СтрокаОплатыКартой Из Объект.БезналичнаяОплата Цикл
		НоваяСтрока = ВременнаяТаблицаКарт.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплатыКартой);
		ОбновитьТаблицуБезналичныхОплат();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДанныеОСуммахОплатыНаСервере()
	
	ПолученоНаличными = 0;
	
	ВременнаяТаблицаКарт.Очистить();
	Для каждого СтрокаОплатыКартой Из Объект.БезналичнаяОплата Цикл
		НоваяСтрока = ВременнаяТаблицаКарт.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплатыКартой);
		ОбновитьТаблицуБезналичныхОплат();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если 1=0 Тогда
		ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект); // для проверки внедрения БСП
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Получим документ из РМК.
	ТекЗначение = ДанныеФормыВЗначение(Параметры.Объект, Тип("ДокументОбъект.ЧекККМ"));
	ЗначениеВРеквизитФормы(ТекЗначение, "Объект"); // Получим данные документа.
	
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	
	// Предопределенные значения
	ТипыДенежныхСредствБезналичные = Перечисления.ТипыДенежныхСредств.Безналичные;
	ТипыДенежныхСредствНаличные = Перечисления.ТипыДенежныхСредств.Наличные;
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	// Заполним временные реквизиты.
	СуммаДокумента = Параметры.СуммаДокумента;
	ВалютаДокумента = Параметры.ВалютаДокумента;
	КассаККМ = Параметры.КассаККМ;
	СформироватьТоварныйЧек = Параметры.СформироватьТоварныйЧек;
	
	// Подключаемое оборудование.
	ИспользоватьПодключаемоеОборудование = Параметры.ИспользоватьПодключаемоеОборудование;
	Объект.ЭквайринговыйТерминал = Параметры.ЭквайринговыйТерминал;
	ЭквайринговыйТерминалПриИзмененииНаСервере();
	
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПолучитьСсылкиНаОборудование();
	КонецЕсли;
	
	КонтрольНаСкладеОтключен = НЕ Константы.КонтролироватьОстаткиПриПроведении.Получить()
						   ИЛИ НЕ Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить();
	
	КассаККМИспользоватьБезПодключенияОборудования = КассаККМ.ИспользоватьБезПодключенияОборудования;
	
	Элементы.ГруппаШаблонКартыОплаты.Видимость = Ложь;
	Элементы.ГруппаШаблонСертификатаОплаты.Видимость = Ложь;
	
	// Кнопки командной панели.
	Элементы.ФормаПоказатьВсеРеквизитыШапки.Видимость = ЭтоМобильныйКлиент;
	Элементы.ФормаПрименитьРучнуюСкидку.Видимость = Ложь;
	
	ЗначенияЗаполнения = РабочееМестоКассираВызовСервера.ПолучитьТерминалПоУмолчанию(Объект.КассаККМ);
	Если ЗначенияЗаполнения.КоличествоЭквайринговыхТерминалов = 1 Тогда
		Объект.ЭквайринговыйТерминал = ЗначенияЗаполнения.ЭквайринговыйТерминал;
		ЭквайринговыйТерминалПриИзмененииНаСервере();
		Элементы.ЭквайринговыйТерминал_МК.Видимость = Ложь;
		ДоступенОдинТерминал = Истина;
	КонецЕсли;
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	
	// Обработка карт.
	Если ЭтоМобильныйКлиент Тогда
		ИнициализироватьДанныеОСуммахОплатыНаСервере();
		
		// Дисконтная карта.
		Элементы.ГруппаБонусы.Видимость = Ложь;
		Если НЕ Объект.ДисконтнаяКарта.Пустая() Тогда
			ВыбранаДисконтнаяКартаДополнительноНаСервере();
		КонецЕсли;
	Иначе
		КоличествоКартВДокументе = Параметры.БезналичнаяОплата.Количество();
		Если КоличествоКартВДокументе = 0 И Не ЗначениеЗаполнено(ЭквайринговыйТерминал) И КоличествоТерминаловПоКассе() = 1 Тогда
			Элементы.ГруппаКалькуляторИНомерКарты.Доступность = Истина;
			ДобавитьКартуНаСервере();
			КоличествоКартДляЗаголовка = 0;
		Иначе
			Элементы.ГруппаКалькуляторИНомерКарты.Доступность = Ложь;
			Если КоличествоКартВДокументе = 0 Тогда
				Элементы.НадписьТекущееПолеВвода.Видимость = Ложь;
			Иначе
				Для каждого СтрокаОплатыКартой Из Объект.БезналичнаяОплата Цикл
					НоваяСтрока = ВременнаяТаблицаКарт.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплатыКартой);
					Если СтрокаОплатыКартой.ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта Тогда
						ДобавитьКартуНаСервере(НоваяСтрока);
					ИначеЕсли СтрокаОплатыКартой.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат Тогда
						ДобавитьСертификатНаСервере(НоваяСтрока);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ОсталосьОплатить = СуммаДокумента - ВременнаяТаблицаКарт.Итог("Сумма") - Объект.Предоплата.Итог("СуммаРасчетов");
	КонецЕсли;
	
	Элементы.ПолученоНаличными.СписокВыбора.Очистить();
	Элементы.ПолученоНаличными.СписокВыбора.Добавить(ОсталосьОплатить, ""+ОсталосьОплатить+" "+ВалютаДокумента);
	
	КоличествоСимволовПослеЗапятой = 2;
	ПервыйВвод = Истина;
	
	// Установка сочетания клавиш
	Для Сч = 0 По 9 Цикл
		Элементы["Кнопка"+Сч].СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша["Num"+Сч], Ложь, Истина, Ложь);
	КонецЦикла;
	Элементы.РазделительДробнойЧасти.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.NumDecimal, Ложь, Истина, Ложь);
	Элементы.Сбросить.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.BackSpace, Ложь, Истина, Ложь);
	
	Для Каждого ПодчиненныйЭлемент Из Элементы.ГруппаКартыОплаты.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Доступность = ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Или (СтрНайти(ПодчиненныйЭлемент.Имя, "Сертификат") > 0);
	КонецЦикла;
	
	// Блокировка.
	Если Не Объект.Ссылка.Пустая() И Параметры.Свойство("ИдентификаторФормы") Тогда
		Попытка
			РазблокироватьДанныеДляРедактирования(Объект.Ссылка, Параметры.ИдентификаторФормы);
			ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка, , УникальныйИдентификатор); // Блокировка будет снята при закрытии формы.
		Исключение
			//
		КонецПопытки;
	КонецЕсли;
	
	УстановитьВидимостьОтправкиЭлектронныхЧеков();
	
	// Автоматические скидки.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		Если Объект.СкидкиРассчитаны И Параметры.СуммаДоРасчетаАвтоСкидок <> Объект.Запасы.Итог("Всего") Тогда
			Элементы.НадписьАвтоСкидкиРассчитаны.Заголовок = НСтр("ru = '(автоскидки рассчитаны)'");
		Иначе
			Элементы.НадписьАвтоСкидкиРассчитаны.Заголовок = "";
		КонецЕсли;
	Иначе
		Элементы.НадписьАвтоСкидкиРассчитаны.Заголовок = "";
	КонецЕсли;
	
	УстановитьВидимостьКнопокСНоминалом();
	
	// Взаиморасчеты
	ВариантЗаполненияРасшифровкиПросмотр = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Просмотр");
	ВариантЗаполненияРасшифровкиВручную = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Вручную");
	ВзаиморасчетыПриСозданииНаСервере();
	
	УстановитьВидимостьДоговора();
	
	// РаспределениеПродаж
	РаспределениеПродажПриСоздании();
	// Конец РаспределениеПродаж
	
	// Форма оплаты.
	УстановитьВидимостьПриСозданииПоВидуКлиента();
	
	ОбновитьКартинкуВидаСкидки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопокСНоминалом()

	ВалютаДокументаПредставление = ВалютаДокумента.СимвольноеПредставление;
	Для Каждого ТекущаяКнопка Из Элементы.ГруппаКнопкиСНоминалом.ПодчиненныеЭлементы Цикл
		Если Лев(ТекущаяКнопка.Имя, 4) = "Плюс" Тогда
			ТекущаяКнопка.Заголовок = ТекущаяКнопка.Заголовок + " " + ВалютаДокументаПредставление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьКнопокСНоминалом()

&НаСервере
Процедура УстановитьВидимостьПриСозданииПоВидуКлиента()
	
	Элементы.ГруппаБезналичнаяОплата_МК.Видимость = Ложь;
	
	Если ЭтоМобильныйКлиент Тогда
		
		Элементы.ГруппаОплата.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаВыборФормыОплатыМК;
		
		Элементы.ГруппаПодвал.Видимость = Ложь;
		
		Элементы.ГруппаТелефонМК.Видимость = Ложь;
		Элементы.ГруппаАдресЭП_МК.Видимость = Ложь;
		
		Элементы.ГруппаСуммаСдачи.Видимость = Ложь;
		
		НастроитьСуммуСкидкиНаСервере();
		
		Элементы.ГруппаСуммаДокумента.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.НадписьАвтоСкидкиРассчитаны.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		Элементы.НадписьАвтоСкидкиРассчитаны.Видимость = Ложь;
		
		Элементы.ВалютаДокумента.Видимость = Ложь;
		Элементы.ГруппаПодвал_МК.Видимость = Ложь;
		
		Элементы.ГруппаПараметровПредоплаты.Видимость = Ложь;
		Элементы.ГруппаВыборФормыОплаты.Видимость = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыИтогСумма", "Видимость", Объект.ОперацияСДенежнымиСредствами);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаДокумента", "Видимость", Не Объект.ОперацияСДенежнымиСредствами);
		
		Элементы.ДекорацияБоковаяПанель.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаВыборФормыОплаты.Видимость = Истина;
		
		Элементы.ГруппаСкидка.Видимость = Ложь;
		Элементы.ГруппаСуммаСдачи.Видимость = Ложь;
		
		Элементы.ГруппаОплатаКартой.Видимость = Ложь;
		Элементы.ГруппаВыборФормыОплатыМК.Видимость = Ложь;
		Элементы.ГруппаРучнойСкидки.Видимость = Ложь;
		
		Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаВыборФормыОплаты;
		
		Элементы.ГруппаОплата.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		Элементы.ПолученоНаличными.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		Элементы.ГруппаПодвал_МК.Видимость = Ложь;
		Элементы.ГруппаКнопки_1_МК.Видимость = Ложь;
		Элементы.ГруппаКнопки.Видимость = Ложь;
		
		Элементы.ГруппаКнопкиСНоминаломСтрока_МК.Видимость = Ложь;
		
		Элементы.ГруппаПараметровПредоплаты.Видимость = Ложь;
		
		ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
		Элементы.СуммаДокумента.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаПредоплаты", "Видимость", Объект.ОперацияСДенежнымиСредствами);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыИтогСумма", "Видимость", Объект.ОперацияСДенежнымиСредствами);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаДокумента", "Видимость", Не Объект.ОперацияСДенежнымиСредствами);
		
		Если Объект.ОперацияСДенежнымиСредствами И ЗначениеЗаполнено(Объект.Заказ) Тогда
			ЗаполнитьСписокВыбораСуммыПредоплаты();
		КонецЕсли;
		
		Если Объект.Предоплата.Количество() > 0
		 ИЛИ Объект.БезналичнаяОплата.Количество() > 0
		 ИЛИ (НетЭквайринговыхТерминалов() И Не Объект.ОперацияСДенежнымиСредствами И СоставЧеков.Количество() = 1) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоставЧеков", "Доступность", Ложь);
			Объект.ФормаОплаты = Неопределено;
			ЗаполнитьТаблицуПросмотраНаСервере();
			УстановитьВидимостьОтФормыОплаты();
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОплатитьНаличными1", "КнопкаПоУмолчанию", Истина);
		КонецЕсли;
		
		Элементы.Контрагент1.АвтоОтметкаНезаполненного = Объект.ОперацияСДенежнымиСредствами;
		Элементы.Договор1.АвтоОтметкаНезаполненного = Объект.ОперацияСДенежнымиСредствами;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементамиИОплатойПоОперацииСДС()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписатьБаллы", "Видимость", Не Объект.ОперацияСДенежнымиСредствами);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОплатитьКредитом", "Видимость", Не Объект.ОперацияСДенежнымиСредствами);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаПредоплата", "Видимость", ИспользоватьПредоплату И Не Объект.ОперацияСДенежнымиСредствами);
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		УдалитьОплатуНедоступныхВидов();
	КонецЕсли;
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		Объект.Предоплата.Очистить();
	КонецЕсли;
	
	ПересчитатьСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОплатуНедоступныхВидов()
	
	Для Индекс = 1 - Объект.БезналичнаяОплата.Количество() По 0 Цикл
		Строка = Объект.БезналичнаяОплата.Получить(-Индекс);
		Если Строка.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.Бонусы")
			ИЛИ Строка.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.Кредит") Тогда
			Объект.БезналичнаяОплата.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Запасы Цикл
		Строка.СуммаСкидкиОплатыБонусом = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСуммуСкидкиНаСервере()
	
	Сумма = 0;
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		Сумма = Сумма + ТекущаяСтрока.Цена * ТекущаяСтрока.Количество;
	КонецЦикла;
	
	СуммаСкидки = (Сумма - Объект.СуммаДокумента);
	Элементы.ГруппаСкидка.Видимость = (СуммаСкидки > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСуммуСкидкиНаКлиенте()
	
	Сумма = 0;
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		Сумма = Сумма + ТекущаяСтрока.Цена * ТекущаяСтрока.Количество;
	КонецЦикла;
	
	СуммаСкидки = (Сумма - Объект.СуммаДокумента);
	Элементы.ГруппаСкидка.Видимость = (СуммаСкидки > 0);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыНаСтраницеГруппаОплатаКартой()
	
	Элементы.ВидКартыОплатаКартой.СписокВыбора.ЗагрузитьЗначения(ВидыПлатежныхКарт.ВыгрузитьЗначения());
	Если Элементы.ВидКартыОплатаКартой.СписокВыбора.Количество() = 1
		ИЛИ Объект.ЭквайринговыйТерминал.Пустая() Тогда
		Элементы.ВидКартыОплатаКартой.Доступность = Ложь;
	Иначе
		Элементы.ВидКартыОплатаКартой.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.ЭквайринговыйТерминал.ВидыПлатежныхКарт.Количество() = 1 Тогда
		ВидКартыОплатаКартой = Объект.ЭквайринговыйТерминал.ВидыПлатежныхКарт[0].ВидПлатежнойКарты;
	КонецЕсли;
	
	Элементы.ПередатьНаТерминал.Видимость = НЕ ЭквайринговыйТерминал.Пустая() И Элементы.ЭквайринговыйТерминал.Видимость; // TODO. Должно зависеть от того, сколько терминалов и подключен терминал или нет.
	Элементы.ДекорацияДанныеПереданыНаТерминал.Видимость = Ложь;
	
	Элементы.НомерКартыОплатаКартой.Доступность = ЭквайринговыйТерминал.Пустая() И НЕ Объект.ЭквайринговыйТерминал.Пустая();
	Элементы.НомерЧекаЭТОплатаКартой.Доступность = Элементы.НомерКартыОплатаКартой.Доступность;
	Элементы.СсылочныйНомерОплатаКартой.Доступность = Элементы.НомерКартыОплатаКартой.Доступность;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьОплатуКартойТолькоКарта()
	
	Если Не ЗначениеЗаполнено(ВидКартыОплатаКартой) Тогда
		ТекстСообщения = НСтр("ru = 'Заполните вид карты'");
		Возврат ТекстСообщения;
	КонецЕсли;
	
	ОсталосьОплатить = СуммаДокумента;
	СуммаОплатаКартой = ОсталосьОплатить;
	
	ДоговорПлатежногоАгента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки") Тогда
		
		СуммыПоДоговорамПлатежныхАгентов = Объект.Запасы.Выгрузить();
		СуммыПоДоговорамПлатежныхАгентов.Свернуть("ДоговорПлатежногоАгента", "Всего");
		СуммыПоДоговорамПлатежныхАгентов.Сортировать("ДоговорПлатежногоАгента");
		
		Если СуммыПоДоговорамПлатежныхАгентов.Количество() = 1 Тогда
			
			ДоговорПлатежногоАгента = СуммыПоДоговорамПлатежныхАгентов[0].ДоговорПлатежногоАгента;
			
		ИначеЕсли СуммыПоДоговорамПлатежныхАгентов.Количество() > 1 Тогда
			
			ОплаченоБезналичнымиОстаток = СуммаОплатаКартой;
			
			Для каждого СтрокаСуммы Из СуммыПоДоговорамПлатежныхАгентов Цикл
				
				ДоговорПлатежногоАгента = СтрокаСуммы.ДоговорПлатежногоАгента;
				
				НоваяСтрока = ДобавитьКартуВТаблицуОплат(Неопределено, Перечисления.ВидыБезналичныхОплат.БанковскаяКарта);
				НоваяСтрока.Сумма = ОплаченоБезналичнымиОстаток;
				НоваяСтрока.ВидПлатежнойКарты = ВидКартыОплатаКартой;
				НоваяСтрока.НомерПлатежнойКарты = НомерПлатежнойКартыОплатаКартой;
				НоваяСтрока.ДоговорПлатежногоАгента = ДоговорПлатежногоАгента;
				
				Если СтрокаСуммы.Всего >= ОплаченоБезналичнымиОстаток Тогда
					Прервать;
				Иначе
					НоваяСтрока.Сумма = СтрокаСуммы.Всего;
					ОплаченоБезналичнымиОстаток = ОплаченоБезналичнымиОстаток - СтрокаСуммы.Всего;
				КонецЕсли;
				
			КонецЦикла;
			
			Возврат "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтрока = ДобавитьКартуВТаблицуОплат(Неопределено, Перечисления.ВидыБезналичныхОплат.БанковскаяКарта);
	НоваяСтрока.Сумма = ОсталосьОплатить;
	НоваяСтрока.ВидПлатежнойКарты = ВидКартыОплатаКартой;
	НоваяСтрока.НомерПлатежнойКарты = НомерПлатежнойКартыОплатаКартой;
	НоваяСтрока.ДоговорПлатежногоАгента = ДоговорПлатежногоАгента;
	
	Возврат "";
	
КонецФункции

// Процедура - обработчик события ПередЗакрытием формы.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоМобильныйКлиент И Не НажатаКнопкаПробитьЧек Тогда
		Если Элементы.ГруппаОплата.ТекущаяСтраница <> Элементы.ГруппаВыборФормыОплатыМК Тогда
			Отказ = Истина;
			
			
			// Очистим суммы
			ИнициализироватьДанныеОСуммахОплатыНаКлиенте();
			ПересчитатьСуммы();
			
			Если Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаРучнойСкидки Тогда
				Объект.ВидСкидкиНаценки = ВидСкидкиДоИзменения;
				ВидСкидкиНаценкиПриИзменении(Неопределено);
			КонецЕсли;
			
			Элементы.ГруппаВыборФормыОплатыМК.Видимость = Истина;
			Элементы.ГруппаОплата.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаВыборФормыОплатыМК;
			ОпределитьДоступностьВариантовОплатНаКлиенте();
			Возврат;
		Иначе
			
			// Если была оплата бонусами, то нужно ее удалить
			Если СписатьБонусы Тогда
				СписатьБонусы = Ложь;
				СписатьБонусыПриИзменении(Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не НажатаКнопкаОтменить И Не НажатаКнопкаПробитьЧек Тогда
		Отменить(Неопределено);
	КонецЕсли;
	
	Попытка
		РазблокироватьДанныеФормыДляРедактирования();
	Исключение
		//
	КонецПопытки;
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПересчитатьСуммы();
	УправлениеНебольшойФирмойКлиент.ЗаполнитьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	ОпределитьДоступностьВариантовОплатНаКлиенте();
	Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("ФункциональнаяОпцияИспользоватьПредоплатуВЧекахККМ") Тогда
		УправлениеЭлементамиИОплатойПоОперацииСДС();
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			
			Если Параметр.Количество() = 0 Тогда
				Возврат;
			ИначеЕсли Параметр[1] = Неопределено Тогда
				Результат = Параметр[0]; // Достаем штрихкод из основных данных
			Иначе
				Результат = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПоискПоНомеруЗавершение(Результат, Новый Структура("ТекНомер", Результат));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды ДобавитьКарту формы.
//
&НаКлиенте
Процедура ДобавитьКарту(Команда)
	
	Если Объект.ЭквайринговыйТерминал.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите эквайринговый терминал'"), ,
			"Объект.ЭквайринговыйТерминал");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда // Оборудование подключено
		ДобавитьОплатуКартой();
	Иначе // Оборудование не подключено
		ДобавитьКартуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьКартуВТаблицуОплат(ТекущаяСтрокаИдентификатор, ВидОплаты)
	
	Если ТекущаяСтрокаИдентификатор = Неопределено Тогда
		НоваяСтрока = ВременнаяТаблицаКарт.Добавить();
		НоваяСтрока.ПервыйВвод = Истина;
	ИначеЕсли ТипЗнч(ТекущаяСтрокаИдентификатор) = Тип("Число") Тогда
		НоваяСтрока = ВременнаяТаблицаКарт.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Иначе
		НоваяСтрока = ТекущаяСтрокаИдентификатор;
	КонецЕсли;
	НоваяСтрока.ВидОплаты = ВидОплаты;
	
	Если НЕ ЗначениеЗаполнено(ЭквайринговыйТерминал) И ВидыПлатежныхКарт.Количество() = 1 Тогда
		// Если в таблице видов оплат в карточке ЭТ только одна строка, то вид оплаты заполним сразу.
		НоваяСтрока.ВидПлатежнойКарты = ВидыПлатежныхКарт.Получить(0).Значение;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НоваяСтрока.ЭквайринговыйТерминал) Тогда
		НоваяСтрока.ЭквайринговыйТерминал = Объект.ЭквайринговыйТерминал;
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Процедура ДобавитьКартуВТаблицуОплат_МК(ДанныеСтроки, ВидКарты = "")
	
	НоваяСтрока = ВременнаяТаблицаКарт.Добавить();
	НоваяСтрока.ПервыйВвод = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
	Если НЕ НоваяСтрока.ЭквайринговыйТерминал.Пустая() И
		НЕ НоваяСтрока.ЭквайринговыйТерминал.ПодключаемоеОборудование.Пустая() Тогда
		ДобавитьСтрокуОбъектБезналичнаяОплата(НоваяСтрока, ВидКарты);
	КонецЕсли;
	
	ОбновитьТаблицуБезналичныхОплат();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуБезналичныхОплат()
	
	Для Каждого ТекущаяСтрока Из ВременнаяТаблицаКарт Цикл
		РозничныеПродажиСервер.ЗаполнитьОписаниеОплаты(ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет информацию по карте в случае, когда эквайринговый терминал НЕ ПОДКЛЮЧЕН.
//
&НаСервере
Процедура ДобавитьКартуНаСервере(ТекущаяСтрокаИдентификатор = Неопределено)
	
	Элементы.ГруппаКалькуляторИНомерКарты.Доступность = Истина;
	
	КоличествоКарт = КоличествоКарт + 1;
	КоличествоКартДляЗаголовка = КоличествоКарт;
	
	Если КоличествоКарт % 2 = 0 Тогда
		ЦветФонаГруппы = ЦветаСтиля.ЦветТекстаНевыбраннойКартинки; //ЦветаСтиля.ФонУправляющегоПоля;
	Иначе
		ЦветФонаГруппы = Новый Цвет(235, 235, 235);
	КонецЕсли;
	
	// Добавим новую строку в таблицу оплат.
	НоваяСтрока = ДобавитьКартуВТаблицуОплат(ТекущаяСтрокаИдентификатор, Перечисления.ВидыБезналичныхОплат.БанковскаяКарта);
	Индекс = ВременнаяТаблицаКарт.Индекс(НоваяСтрока);
	
	// Добавим элементы на форму.
	НоваяГруппа = Элементы.Добавить("ГруппаОплатаКартой_"+Индекс, Тип("ГруппаФормы"), Элементы.ГруппаКартыОплаты);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.ЦветФона = ЦветФонаГруппы;
	НоваяГруппа.Ширина = 51;
	НоваяГруппа.РастягиватьПоГоризонтали = Ложь;
	НоваяГруппа.ТолькоПросмотр = ЗначениеЗаполнено(ЭквайринговыйТерминал);
	
	НоваяГруппаСуммаКарты = Элементы.Добавить("ГруппаОплатаКартойСумма_"+Индекс, Тип("ГруппаФормы"), НоваяГруппа);
	НоваяГруппаСуммаКарты.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппаСуммаКарты.ОтображатьЗаголовок = Ложь;
	НоваяГруппаСуммаКарты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппаСуммаКарты.ЦветФона = ЦветФонаГруппы;
	
	НоваяГруппаГоризонтальная = Элементы.Добавить("ГруппаОплатаКартойГоризонтальная_"+Индекс, Тип("ГруппаФормы"), НоваяГруппа);
	НоваяГруппаГоризонтальная.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппаГоризонтальная.ОтображатьЗаголовок = Ложь;
	НоваяГруппаГоризонтальная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппаГоризонтальная.ТолькоПросмотр = ЗначениеЗаполнено(ЭквайринговыйТерминал);
	НоваяГруппаГоризонтальная.ЦветФона = ЦветФонаГруппы;
	
	НоваяГруппаРеквизитыКартыЧасть1 = Элементы.Добавить("ГруппаРеквизитыКартыЧасть1"+Индекс, Тип("ГруппаФормы"), НоваяГруппаГоризонтальная);
	НоваяГруппаРеквизитыКартыЧасть1.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппаРеквизитыКартыЧасть1.ОтображатьЗаголовок = Ложь;
	НоваяГруппаРеквизитыКартыЧасть1.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппаРеквизитыКартыЧасть1.ЦветФона = ЦветФонаГруппы;
	
	НоваяГруппаРеквизитыКартыЧасть2 = Элементы.Добавить("ГруппаРеквизитыКартыЧасть2"+Индекс, Тип("ГруппаФормы"), НоваяГруппаГоризонтальная);
	НоваяГруппаРеквизитыКартыЧасть2.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппаРеквизитыКартыЧасть2.ОтображатьЗаголовок = Ложь;
	НоваяГруппаРеквизитыКартыЧасть2.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппаРеквизитыКартыЧасть2.ЦветФона = ЦветФонаГруппы;
	
	// НадписьУдаленияОплатыКартой
	ЭлементНадписьОбУдалении = Элементы.Добавить("НадписьОбУдаленииОплатыКартой_"+Индекс, Тип("ДекорацияФормы"), НоваяГруппаСуммаКарты);
	ЭлементНадписьОбУдалении.Вид = ВидДекорацииФормы.Надпись;
	ЭлементНадписьОбУдалении.Заголовок = "";
	ЭлементНадписьОбУдалении.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	ЭлементНадписьОбУдалении.ЦветТекста = Новый Цвет(255, 0, 0);
	ЭлементНадписьОбУдалении.Ширина = 35;
	ЭлементНадписьОбУдалении.РастягиватьПоГоризонтали = Ложь;
	ЭлементНадписьОбУдалении.Видимость = Ложь;
	// Конец НадписьУдаленияОплатыКартой
	
	НовыйЭлемент = Элементы.Добавить("ОплатаКартой_"+Индекс, Тип("ПолеФормы"), НоваяГруппаСуммаКарты);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].Сумма";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.Ширина = 32;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.Подсказка = НСтр(
	"ru = 'Калькулятор изменяет данные в нижнем поле ""Сумма"" или в последнем измененном поле ""Сумма"".
	|Если нужно привязать калькулятор к другому полю, то нажмите в этом поле кнопку с изображением калькулятора.'");
	Если ЭтоМобильныйКлиент Тогда
		НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Иначе
		НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		НовыйЭлемент.КнопкаВыбора = Истина;
		НовыйЭлемент.КнопкаВыпадающегоСписка = Истина;
	КонецЕсли;
	
	ТекущееПолеВводаСуммы = НовыйЭлемент.Имя;
	Если ВременнаяТаблицаКарт.Количество() < 2 Тогда
		Элементы.НадписьТекущееПолеВвода.Видимость = Ложь;
	Иначе
		ТекС = СтрНайти(СокрЛП(ТекущееПолеВводаСуммы), "_");
		Индекс = Число(Сред(СокрЛП(ТекущееПолеВводаСуммы), ТекС+1));
		НадписьТекущееПолеВвода = "Для строки оплаты №"+(Индекс+1);
		Элементы.НадписьТекущееПолеВвода.Видимость = Истина;
	КонецЕсли;
	
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "СуммаОплатыКартойПриИзменении");
	НовыйЭлемент.УстановитьДействие("НачалоВыбора", "СуммаОплатыКартойНачалоВыбора");
	
	ОплатаКартами = ВременнаяТаблицаКарт.Итог("Сумма");
	Если НЕ ЭтоМобильныйКлиент Тогда
		НовыйЭлемент.СписокВыбора.Очистить();
		Дельта = СуммаДокумента - ПолученоНаличными - ОплатаКартами - Объект.Предоплата.Итог("СуммаРасчетов");
		Если Дельта > 0 Тогда
			НовыйЭлемент.СписокВыбора.Добавить(Дельта, СтрШаблон(НСтр("ru = '%1 %2 (к оплате)'"), Дельта,
				ВалютаДокумента));
		КонецЕсли;
		Если Дельта <> СуммаДокумента Тогда
			НовыйЭлемент.СписокВыбора.Добавить(СуммаДокумента, СтрШаблон(НСтр("ru = '%1 %2 (сумма док-та)'"),
				СуммаДокумента, ВалютаДокумента));
		КонецЕсли;
	КонецЕсли;
	
	НовыйЭлемент = Элементы.Добавить("ВалютаДокумента_"+Индекс, Тип("ДекорацияФормы"), НоваяГруппаСуммаКарты);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок = СокрЛП(ВалютаДокумента);
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	
	// КнопкаУдаленияОплатыКартой
	Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
		НоваяСтрока.ИмяКоманды = ДобавитьКнопкуУдаленияОплатыКартой(Индекс);
	КонецЕсли;
	// Конец КнопкаУдаленияОплатыКартой
	
	НовыйЭлемент = Элементы.Добавить("ВидПлатежнойКарты_"+Индекс, Тип("ПолеФормы"), НоваяГруппаРеквизитыКартыЧасть1);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].ВидПлатежнойКарты";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.ПодсказкаВвода = НСтр("ru = 'Вид карты'");
	НовыйЭлемент.Ширина = 16;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(ВидыПлатежныхКарт.ВыгрузитьЗначения());
	НовыйЭлемент.РежимВыбораИзСписка = Истина;
	НовыйЭлемент.ВыбиратьТип = Ложь;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "РеквизитКартыПриИзменении");
	Если ВидыПлатежныхКарт.Количество() = 1 Тогда
		ВременнаяТаблицаКарт[Индекс].ВидПлатежнойКарты = ВидыПлатежныхКарт[0];
	КонецЕсли;
	НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
	НовыйЭлемент.ОтметкаНезаполненного = Истина;
	
	НовыйЭлемент = Элементы.Добавить("НомерПлатежнойКарты_"+Индекс, Тип("ПолеФормы"), НоваяГруппаРеквизитыКартыЧасть2);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].НомерПлатежнойКарты";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.ПодсказкаВвода = НСтр("ru = 'Номер карты'");
	НовыйЭлемент.Ширина = 27;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "РеквизитКартыПриИзменении");
	
	НовыйЭлемент = Элементы.Добавить("НомерЧекаЭТ_"+Индекс, Тип("ПолеФормы"), НоваяГруппаРеквизитыКартыЧасть1);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].НомерЧекаЭТ";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.ПодсказкаВвода = НСтр("ru = '№ чека ЭТ'");
	НовыйЭлемент.Ширина = 16;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "РеквизитКартыПриИзменении");
	
	НовыйЭлемент = Элементы.Добавить("СсылочныйНомер_"+Индекс, Тип("ПолеФормы"), НоваяГруппаРеквизитыКартыЧасть2);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].СсылочныйНомер";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.ПодсказкаВвода = НСтр("ru = 'Ссылочный номер'");
	НовыйЭлемент.Ширина = 27;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "РеквизитКартыПриИзменении");
	
	НовыйЭлемент = Элементы.Добавить("ЭквайринговыйТерминал_"+Индекс, Тип("ПолеФормы"), НоваяГруппа);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].ЭквайринговыйТерминал";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьКнопкуУдаленияОплатыКартой(Индекс)
	
	ИмяКнопки = "КнопкаУдаленияОплаты_"+Индекс;
	
	НоваяКоманда = ЭтаФорма.Команды.Добавить(ИмяКнопки);
	НоваяКоманда.Действие = "ВыбратьКартуДляУдаленияОплаты";
	НоваяКоманда.Заголовок = "";
	НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
	НоваяКоманда.Картинка = БиблиотекаКартинок.ПометитьНаУдаление;
	НоваяКоманда.ИзменяетСохраняемыеДанные = Ложь;
	НоваяКоманда.Подсказка = НСтр("ru = 'Отменить оплату картой на эквайринговом терминале'");
	
	НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Элементы["ГруппаОплатаКартойСумма_"+Индекс]);
	НоваяКнопка.ТолькоВоВсехДействиях = Ложь;
	НоваяКнопка.Видимость = Истина;
	НоваяКнопка.ИмяКоманды = НоваяКоманда.Имя;
	НоваяКнопка.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
	
	Возврат ИмяКнопки;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСертификат(Команда)
	
	ДобавитьСертификатНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСертификатНаСервере(ТекущаяСтрокаИдентификатор = Неопределено)
	
	КоличествоКарт = КоличествоКарт + 1;
	КоличествоКартДляЗаголовка = КоличествоКарт;
	
	Если КоличествоКарт % 2 = 0 Тогда
		ЦветФонаГруппы = ЦветаСтиля.ЦветТекстаНевыбраннойКартинки; //ЦветаСтиля.ФонУправляющегоПоля;
	Иначе
		ЦветФонаГруппы = Новый Цвет(235, 235, 235);
	КонецЕсли;
	
	Если ТекущаяСтрокаИдентификатор = Неопределено Тогда
		НоваяСтрока = ВременнаяТаблицаКарт.Добавить();
		НоваяСтрока.ПервыйВвод = Истина;
	ИначеЕсли ТипЗнч(ТекущаяСтрокаИдентификатор) = Тип("Число") Тогда
		НоваяСтрока = ВременнаяТаблицаКарт.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Иначе
		НоваяСтрока = ТекущаяСтрокаИдентификатор;
	КонецЕсли;
	
	НоваяСтрока.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат;
	
	Индекс = ВременнаяТаблицаКарт.Индекс(НоваяСтрока);
	
	НоваяГруппа = Элементы.Добавить("ГруппаОплатаСертификатом_"+Индекс, Тип("ГруппаФормы"), Элементы.ГруппаКартыОплаты);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.Ширина = 50;
	НоваяГруппа.РастягиватьПоГоризонтали = Ложь;
	НоваяГруппа.ЦветФона = ЦветФонаГруппы;
	
	НоваяГруппаСуммаСертификата = Элементы.Добавить("ГруппаОплатаСертификатомСумма_"+Индекс, Тип("ГруппаФормы"), НоваяГруппа);
	НоваяГруппаСуммаСертификата.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппаСуммаСертификата.ОтображатьЗаголовок = Ложь;
	НоваяГруппаСуммаСертификата.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппаСуммаСертификата.ЦветФона = ЦветФонаГруппы;
	
	НоваяГруппаРеквизитыСертификата = Элементы.Добавить("ГруппаОплатаСертификатомРеквизиты_"+Индекс, Тип("ГруппаФормы"), НоваяГруппа);
	НоваяГруппаРеквизитыСертификата.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппаРеквизитыСертификата.ОтображатьЗаголовок = Ложь;
	НоваяГруппаРеквизитыСертификата.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппаРеквизитыСертификата.ЦветФона = ЦветФонаГруппы;
	
	НовыйЭлемент = Элементы.Добавить("ОплатаКартой_"+Индекс, Тип("ПолеФормы"), НоваяГруппаСуммаСертификата);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].Сумма";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.Ширина = 35;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.КнопкаВыбора = Истина;
	НовыйЭлемент.КнопкаВыпадающегоСписка = Истина;
	НовыйЭлемент.Подсказка = НСтр(
	"ru = 'Калькулятор изменяет данные в нижнем поле ""Сумма"" или в последнем измененном поле ""Сумма"".
	|Если нужно привязать калькулятор к другому полю, то нажмите в этом поле кнопку с изображением калькулятора.'");
	НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	
	ТекущееПолеВводаСуммы = НовыйЭлемент.Имя;
	Если ВременнаяТаблицаКарт.Количество() < 2 Тогда
		Элементы.НадписьТекущееПолеВвода.Видимость = Ложь;
	Иначе
		ТекС = СтрНайти(СокрЛП(ТекущееПолеВводаСуммы), "_");
		Индекс = Число(Сред(СокрЛП(ТекущееПолеВводаСуммы), ТекС+1));
		НадписьТекущееПолеВвода = "Для строки оплаты №"+(Индекс+1);
		Элементы.НадписьТекущееПолеВвода.Видимость = Истина;
	КонецЕсли;
	
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "СуммаОплатыКартойПриИзменении");
	НовыйЭлемент.УстановитьДействие("НачалоВыбора", "СуммаОплатыКартойНачалоВыбора");
	
	ОплатаКартами = ВременнаяТаблицаКарт.Итог("Сумма");
	НовыйЭлемент.СписокВыбора.Очистить();
	Дельта = СуммаДокумента - ПолученоНаличными - ОплатаКартами - Объект.Предоплата.Итог("СуммаРасчетов");
	Если Дельта > 0 Тогда
		НовыйЭлемент.СписокВыбора.Добавить(Дельта, СтрШаблон(НСтр("ru = '%1 %2 (к оплате)'"), Дельта, ВалютаДокумента));
	КонецЕсли;
	Если Дельта <> СуммаДокумента Тогда
		НовыйЭлемент.СписокВыбора.Добавить(СуммаДокумента, СтрШаблон(НСтр("ru = '%1 %2 (сумма док-та)'"),
			СуммаДокумента, ВалютаДокумента));
	КонецЕсли;
	
	НовыйЭлемент = Элементы.Добавить("ВалютаДокумента_"+Индекс, Тип("ПолеФормы"), НоваяГруппаСуммаСертификата);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ПутьКДанным = "ВалютаДокумента";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	
	НовыйЭлемент = Элементы.Добавить("ПодарочныйСертификат_"+Индекс, Тип("ПолеФормы"), НоваяГруппаРеквизитыСертификата);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].ПодарочныйСертификат";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.ПодсказкаВвода = НСтр("ru = 'Подарочный сертификат'");
	НовыйЭлемент.ВыбиратьТип = Ложь;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "РеквизитСертификатаПриИзменении");
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПодарочныйСертификат));
	ФиксированныйМассив = Новый ФиксированныйМассив(МассивПараметров);
	НовыйЭлемент.ПараметрыВыбора = ФиксированныйМассив;
	
	НовыйЭлемент = Элементы.Добавить("НомерСертификата_"+Индекс, Тип("ПолеФормы"), НоваяГруппаРеквизитыСертификата);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].НомерСертификата";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.ПодсказкаВвода = НСтр("ru = 'Номер сертификата'");
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "РеквизитСертификатаПриИзменении");
	НовыйЭлемент.УстановитьДействие("НачалоВыбора", "НомерСертификатаНачалоВыбора");
	НовыйЭлемент.УстановитьДействие("АвтоПодбор", "ПолеНомерСертификатаАвтоПодбор");
	НовыйЭлемент.Доступность = Ложь;
	НовыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	НовыйЭлемент.КнопкаСоздания = Ложь;
	
	УстановитьДоступностьНомераСертификатаНаСервере("ПодарочныйСертификат_"+Индекс, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискСертификатаПоНомеру(Команда)
	
	ТекНомер = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоНомеруЗавершение", ЭтотОбъект, Новый Структура("ТекНомер", ТекНомер)), ТекНомер, НСтр("ru = 'Введите номер'"));
	Элементы.Группа4.ТекущаяСтраница = Элементы.Группа2;
	
КонецПроцедуры

// Процедура - обработчик команды ОК формы.
//
&НаКлиенте
Процедура ОК(Команда)
	
	// Если оплата картой и ЭТ не подключен, то добавим строку об оплате.
	Если Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаОплатаКартой
		И НЕ Объект.ЭквайринговыйТерминал.Пустая()
		И ЭквайринговыйТерминал.Пустая() Тогда
		СообщениеОбОшибке = ДобавитьОплатуКартойТолькоКарта();
		Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке, , "ВидКартыОплатаКартой");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьОплатаСертификатами = Ложь;
	
	// Проверим информацию об оплате, которая собрана в таблице значений "ВременнаяТаблицаКарт"
	Отмена = Ложь;
	Для Каждого ТекущаяСтрока Из ВременнаяТаблицаКарт Цикл
		Если ТекущаяСтрока.Сумма > 0 Или ТекущаяСтрока.СуммаБонусов > 0 Тогда
			Если ТекущаяСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.БанковскаяКарта") Тогда
				
				Если Не ЗначениеЗаполнено(ТекущаяСтрока.ВидПлатежнойКарты) Тогда
					Отмена = Истина;
					КонтекстноеПоле = СтрШаблон("ВременнаяТаблицаКарт[%1].ВидПлатежнойКарты", Формат(
						ВременнаяТаблицаКарт.Индекс(ТекущаяСтрока), "ЧН=0; ЧГ=;"));
					ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните вид карты'"), , КонтекстноеПоле);
				КонецЕсли;
				
			ИначеЕсли ТекущаяСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат") Тогда
				
				ЕстьОплатаСертификатами = Истина;
				
				Если Не ЗначениеЗаполнено(ТекущаяСтрока.ПодарочныйСертификат) Тогда
					Отмена = Истина;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Укажите подарочный сертификат'");
					Сообщение.Сообщить();
				Иначе
					СвойстваПодарочногоСертификата = СвойстваПодарочногоСертификата(ТекущаяСтрока.ПодарочныйСертификат);
					Если СвойстваПодарочногоСертификата.ИспользоватьСерииНоменклатуры Тогда
						Если Не ЗначениеЗаполнено(ТекущаяСтрока.НомерСертификата) Тогда
							Отмена = Истина;
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = НСтр("ru = 'Укажите номер сертификата'");
							Сообщение.Сообщить();
						КонецЕсли;
						Если НЕ ЭтоМобильныйКлиент И ТекущаяСтрока.Сумма > ТекущаяСтрока.ОстатокСертификата Тогда
							Отмена = Истина;
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = НСтр("ru = 'Превышен остаток средств по сертификату'");
							Сообщение.Сообщить();
						КонецЕсли;
					Иначе
						Если НЕ ЭтоМобильныйКлиент И 
							ТекущаяСтрока.Сумма > СвойстваПодарочногоСертификата.Номинал Тогда
							Отмена = Истина;
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = НСтр("ru = 'Превышен номинал сертификата'");
							Сообщение.Сообщить();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТекущаяСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.Бонусы") Тогда
				
				Если ТекущаяСтрока.СуммаБонусов > ТекущаяСтрока.МаксимальнаяСуммаОплатыБонусами Тогда
					Отмена = Истина;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Превышена максимальная сумма оплаты бонусами'");
					Сообщение.Сообщить();
				КонецЕсли;
				
				Если ТекущаяСтрока.СуммаБонусов > ТекущаяСтрока.ОстатокБонуснойКарты Тогда
					Отмена = Истина;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Превышен остаток бонусов по карте'");
					Сообщение.Сообщить();
				КонецЕсли;
				
			ИначеЕсли ТекущаяСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.Кредит") Тогда
				
				Если Не ЗначениеЗаполнено(ТекущаяСтрока.ДоговорКредита) Тогда
					Отмена = Истина;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Заполните договор с банком'");
					Сообщение.Сообщить();
				ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.ЭквайринговыйТерминал) Тогда
					Отмена = Истина;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'По данному договору невозможно определить параметры кредита.
												 |Пожалуйста, проверьте настройки договора'");
					Сообщение.Сообщить();
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// Конец. Проверим информацию об оплате, которая собрана в таблице значений "ВременнаяТаблицаКарт"
	
	РаботаСПодарочнымиСертификатами.ВыполнитьПроверкуОграниченийСертификатовВРМК(
		Новый Структура("Запасы, БезналичнаяОплата", Объект.Запасы, ВременнаяТаблицаКарт),
		Отмена
		);

	Если Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьОплатаСертификатами Тогда
		ЗаполнитьСуммуПогашенияСертификатовНаСервере();
	КонецЕсли;
	
	СкопироватьДанныеТаблицВПриемникИзИсточникаНаКлиенте(Объект.БезналичнаяОплата, ВременнаяТаблицаКарт);
	УдалитьСтрокиОплатыСНулевойСуммой();
	
	ЭтоОбщаяОплата = (Элементы.СоставЧеков.ТекущиеДанные <> Неопределено)
		И (Не ЗначениеЗаполнено(Элементы.СоставЧеков.ТекущиеДанные.Чек));
	Если ЭтоОбщаяОплата Тогда
		ИтоговаяСумма = Элементы.СоставЧеков.ТекущиеДанные.Сумма;
	ИначеЕсли Объект.ОперацияСДенежнымиСредствами Тогда
		ИтоговаяСумма = Объект.СуммаДокумента;
	Иначе
		ИтоговаяСумма = Объект.Запасы.Итог("Всего");
	КонецЕсли;
		
	Если ИтоговаяСумма > ПолученоНаличными + Объект.БезналичнаяОплата.Итог("Сумма") + Объект.Предоплата.Итог("СуммаРасчетов") Тогда
		
		ТекстОшибки = НСтр("ru='Сумма оплаты меньше суммы чека'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Поле = "СуммаСдачи";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	Если ИтоговаяСумма < Объект.БезналичнаяОплата.Итог("Сумма") + Объект.Предоплата.Итог("СуммаРасчетов") Тогда
		
		ТекстОшибки = НСтр("ru='Сумма безналичной оплаты превышает сумму чека'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Поле = "СуммаСдачи";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	Если Не Объект.ОперацияСДенежнымиСредствами Тогда
		Объект.СуммаДокумента = Объект.Запасы.Итог("Всего");
	КонецЕсли;
	
	// Бонусы
	Если Не Объект.ОперацияСДенежнымиСредствами
		И Не МножественныйРежимЧеков Тогда
		РассчитатьБонусыНаКлиенте();
	КонецЕсли;
	// Конец Бонусы
	
	Если Модифицированность Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("Объект", Объект);
	ПараметрыЗакрытия.Вставить("Наличными", ПолученоНаличными);
	ПараметрыЗакрытия.Вставить("ПлатежнымиКартами", Объект.БезналичнаяОплата.Итог("Сумма"));
	ПараметрыЗакрытия.Вставить("Предоплата", Объект.Предоплата.Итог("СуммаРасчетов"));
	ПараметрыЗакрытия.Вставить("Сдача", СуммаСдачи);
	ПараметрыЗакрытия.Вставить("Бонусы", Объект.БонусныеБаллыКНачислению.Итог("КоличествоБонусныхБаллов"));
	ПараметрыЗакрытия.Вставить("СформироватьТоварныйЧек", СформироватьТоварныйЧек);
	ПараметрыЗакрытия.Вставить("БезналичнаяОплата", Объект.БезналичнаяОплата);
	ПараметрыЗакрытия.Вставить("ЗаписатьДокумент", ЗаписатьДокумент);
	ПараметрыЗакрытия.Вставить("ОбщаяОплата", ЭтоОбщаяОплата);
	ПараметрыЗакрытия.Вставить("Кнопка", "Пробить чек");
	
	НажатаКнопкаПробитьЧек = Истина;
	Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СвойстваПодарочногоСертификата(Знач ПодарочныйСертификат)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодарочныйСертификат, "ИспользоватьСерииНоменклатуры, Номинал");
КонецФункции

// Процедура - обработчик команды Отменить формы.
//
&НаКлиенте
Процедура Отменить(Команда)
	
	Если Команда <> Неопределено Тогда
		Если ЕстьОплатаЭТ() Тогда
			ПоказатьПредупреждение(
				,НСтр("ru = 'Сначала необходимо отменить оплату на эквайринговом терминале'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Модифицированность = Ложь; // Чтобы не появлялся вопрос о принятии изменений. Вопрос появляется, т.к. у формы основной реквизит типа "ДокументОбъект.ЧекККМ".
	КонецЕсли;
	
	УдалитьСтрокиОплатыСНулевойСуммой();
	УдалитьОплатуБонусами();
	
	НажатаКнопкаОтменить = Истина;
	
	Попытка
		РазблокироватьДанныеФормыДляРедактирования();
	Исключение
		//
	КонецПопытки;
	
	Закрыть(Новый Структура("Объект, ЗаписатьДокумент, Кнопка", Объект, ЗаписатьДокумент, "Отмена"));
	
КонецПроцедуры

&НаСервере
Функция ЕстьОплатаЭТ()
	
	Для Каждого СтрокаОплаты Из ВременнаяТаблицаКарт Цикл
		Если ЗначениеЗаполнено(СтрокаОплаты.ЭквайринговыйТерминал) Тогда
			Если Не СтрокаОплаты.ЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования
				И Не СтрокаОплаты.ОплатаУдалена Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ТелефонАдресЭППриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонАдресЭППриИзменении_МК(Элемент)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП, Истина, "ГруппаТелефонМК", "ГруппаАдресЭП_МК");
	
КонецПроцедуры

&НаКлиенте
Процедура СписатьБаллы(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СписатьБаллыЗавершение", ЭтаФорма);
		ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.СчитываниеДисконтнойКарты",, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		СписатьБаллыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписатьБаллыЗавершение(Результат, Параметры) Экспорт
	
	ВладелецФормы.СчитатьДисконтнуюКартуНажатиеЗавершение(Результат, Параметры);
	ПерезаполнитьОбъектНаСервере(ВладелецФормы.Объект);
	ПересчитатьСуммы();
	СписатьБаллыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьОбъектНаСервере(Знач ОбъектВладельца)
	
	ТекЗначение = ДанныеФормыВЗначение(ОбъектВладельца, Тип("ДокументОбъект.ЧекККМ"));
	
	ДК = "";
	Если Не ЗначениеЗаполнено(ТекЗначение.ДисконтнаяКарта) Тогда
		ДК = Объект.ДисконтнаяКарта;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТекЗначение, "Объект");
	
	Если ЗначениеЗаполнено(ДК) Тогда
		Объект.ДисконтнаяКарта = ДК;
		Объект.ДисконтнаяКарта = ДК.ВладелецКарты;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписатьБаллыНаСервере(ТекущаяСтрокаИдентификатор = Неопределено)
	
	КоличествоКарт = КоличествоКарт + 1;
	КоличествоКартДляЗаголовка = КоличествоКарт;
	
	Если КоличествоКарт % 2 = 0 Тогда
		ЦветФонаГруппы = ЦветаСтиля.ЦветТекстаНевыбраннойКартинки; //ЦветаСтиля.ФонУправляющегоПоля;
	Иначе
		ЦветФонаГруппы = Новый Цвет(235, 235, 235);
	КонецЕсли;
	
	Если ТекущаяСтрокаИдентификатор = Неопределено Тогда
		НоваяСтрока = ВременнаяТаблицаКарт.Добавить();
		НоваяСтрока.ПервыйВвод = Истина;
		НоваяСтрока.БонуснаяКарта = Объект.ДисконтнаяКарта;
	ИначеЕсли ТипЗнч(ТекущаяСтрокаИдентификатор) = Тип("Число") Тогда
		НоваяСтрока = ВременнаяТаблицаКарт.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Иначе
		НоваяСтрока = ТекущаяСтрокаИдентификатор;
	КонецЕсли;
	
	НоваяСтрока.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Бонусы;
	
	Индекс = ВременнаяТаблицаКарт.Индекс(НоваяСтрока);
	
	НоваяГруппа = Элементы.Добавить("ГруппаСписаниеБонусов_"+Индекс, Тип("ГруппаФормы"), Элементы.ГруппаКартыОплаты);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.Ширина = 50;
	НоваяГруппа.РастягиватьПоГоризонтали = Ложь;
	НоваяГруппа.ЦветФона = ЦветФонаГруппы;
	
	НоваяГруппаСуммаБаллов = Элементы.Добавить("ГруппаСписаниеБонусовСумма_"+Индекс, Тип("ГруппаФормы"), НоваяГруппа);
	НоваяГруппаСуммаБаллов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппаСуммаБаллов.ОтображатьЗаголовок = Ложь;
	НоваяГруппаСуммаБаллов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппаСуммаБаллов.ЦветФона = ЦветФонаГруппы;
	
	НоваяГруппаДанныеБонуснойКарты = Элементы.Добавить("НоваяГруппаДанныеБонуснойКарты_"+Индекс, Тип("ГруппаФормы"), НоваяГруппа);
	НоваяГруппаДанныеБонуснойКарты.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппаДанныеБонуснойКарты.ОтображатьЗаголовок = Ложь;
	НоваяГруппаДанныеБонуснойКарты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппаДанныеБонуснойКарты.ЦветФона = ЦветФонаГруппы;
	
	НовыйЭлемент = Элементы.Добавить("ОплатаКартой_"+Индекс, Тип("ПолеФормы"), НоваяГруппаСуммаБаллов);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].СуммаБонусов";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.Ширина = 35;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.КнопкаВыбора = Истина;
	НовыйЭлемент.КнопкаВыпадающегоСписка = Истина;
	НовыйЭлемент.Подсказка = НСтр(
	"ru = 'Калькулятор изменяет данные в нижнем поле ""Сумма"" или в последнем измененном поле ""Сумма"".
	|Если нужно привязать калькулятор к другому полю, то нажмите в этом поле кнопку с изображением калькулятора.'");
	НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	
	ТекущееПолеВводаСуммы = НовыйЭлемент.Имя;
	Если ВременнаяТаблицаКарт.Количество() < 2 Тогда
		Элементы.НадписьТекущееПолеВвода.Видимость = Ложь;
	Иначе
		ТекС = СтрНайти(СокрЛП(ТекущееПолеВводаСуммы), "_");
		Индекс = Число(Сред(СокрЛП(ТекущееПолеВводаСуммы), ТекС+1));
		НадписьТекущееПолеВвода = "Для строки оплаты №"+(Индекс+1);
		Элементы.НадписьТекущееПолеВвода.Видимость = Истина;
	КонецЕсли;
	
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "СуммаОплатыБонусамиПриИзменении");
	
	НовыйЭлемент.СписокВыбора.Очистить();
	
	СтруктураДанных = РаботаСБонусами.ПолучитьДанныеБонуснойКарты(Объект.ДисконтнаяКарта, Объект.Дата);
	МаксимальныйПроцент = ОпределитьОграничениеБонуснойПрограммы(Объект.ДисконтнаяКарта);
	
	Если МаксимальныйПроцент <> 0 Тогда
		НоваяСтрока.МаксимальнаяСуммаОплатыБонусами = Окр(СуммаДокумента * МаксимальныйПроцент / 100, 2);
	Иначе
		НоваяСтрока.МаксимальнаяСуммаОплатыБонусами = СуммаДокумента;
	КонецЕсли;
	
	НоваяСтрока.ОстатокБонуснойКарты = СтруктураДанных.Остаток;
	НоваяСтрока.ВладелецКарты = СтруктураДанных.Владелец;
	
	ОплатаКартами = ВременнаяТаблицаКарт.Итог("Сумма");
	КОплате = СуммаДокумента - ПолученоНаличными - ОплатаКартами - Объект.Предоплата.Итог("СуммаРасчетов");
	
	МинимальнаяСумма = Мин(НоваяСтрока.ОстатокБонуснойКарты, КОплате, НоваяСтрока.МаксимальнаяСуммаОплатыБонусами);
	
	Если НоваяСтрока.ОстатокБонуснойКарты = МинимальнаяСумма Тогда
		НовыйЭлемент.СписокВыбора.Добавить(НоваяСтрока.ОстатокБонуснойКарты, СтрШаблон(НСтр("ru = '%1 (Остаток)'"),
			НоваяСтрока.ОстатокБонуснойКарты));
	ИначеЕсли КОплате = МинимальнаяСумма Тогда
		НовыйЭлемент.СписокВыбора.Добавить(КОплате, СтрШаблон(НСтр("ru = '%1 (К оплате)'"), КОплате));
	ИначеЕсли НоваяСтрока.МаксимальнаяСуммаОплатыБонусами = МинимальнаяСумма Тогда
		НовыйЭлемент.СписокВыбора.Добавить(НоваяСтрока.МаксимальнаяСуммаОплатыБонусами, СтрШаблон(НСтр(
			"ru = '%1 (Макс.)'"), НоваяСтрока.МаксимальнаяСуммаОплатыБонусами));
	КонецЕсли;
	
	НовыйЭлемент = Элементы.Добавить("БонуснаяКарта_"+Индекс, Тип("ПолеФормы"), НоваяГруппаДанныеБонуснойКарты);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].БонуснаяКарта";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.ВыбиратьТип = Ложь;
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
	НовыйЭлемент = Элементы.Добавить("ОстатокКарты_"+Индекс, Тип("ПолеФормы"), НоваяГруппаДанныеБонуснойКарты);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].ОстатокБонуснойКарты";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	
	НовыйЭлемент = Элементы.Добавить("МаксимальнаяСумма_"+Индекс, Тип("ПолеФормы"), НоваяГруппаДанныеБонуснойКарты);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].МаксимальнаяСуммаОплатыБонусами";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	
	НовыйЭлемент = Элементы.Добавить("ВладелецКарты"+Индекс, Тип("ПолеФормы"), НоваяГруппаДанныеБонуснойКарты);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].ВладелецКарты";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКредитНаСервере(ТекущаяСтрокаИдентификатор = Неопределено)
	
	Элементы.ГруппаКалькуляторИНомерКарты.Доступность = Истина;
	
	КоличествоКарт = КоличествоКарт + 1;
	КоличествоКартДляЗаголовка = КоличествоКарт;
	
	Если КоличествоКарт % 2 = 0 Тогда
		ЦветФонаГруппы = ЦветаСтиля.ЦветТекстаНевыбраннойКартинки; //ЦветаСтиля.ФонУправляющегоПоля;
	Иначе
		ЦветФонаГруппы = Новый Цвет(235, 235, 235);
	КонецЕсли;
	
	Если ТекущаяСтрокаИдентификатор = Неопределено Тогда
		НоваяСтрока = ВременнаяТаблицаКарт.Добавить();
		НоваяСтрока.ПервыйВвод = Истина;
	ИначеЕсли ТипЗнч(ТекущаяСтрокаИдентификатор) = Тип("Число") Тогда
		НоваяСтрока = ВременнаяТаблицаКарт.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Иначе
		НоваяСтрока = ТекущаяСтрокаИдентификатор;
	КонецЕсли;
	
	НоваяСтрока.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Кредит;
	ЕдинственныйДоговор = Справочники.ДоговорыКонтрагентов.ЕдинственныйДоговорКредита(Объект.Организация);
	Если Не ЕдинственныйДоговор = Неопределено Тогда
		НоваяСтрока.ДоговорКредита = ЕдинственныйДоговор;
		МассивТерминалов = ЭквайринговыеОперацииСервер.ПолучитьТерминалыПоДоговору(ЕдинственныйДоговор);
		Если МассивТерминалов.Количество() > 0 Тогда
			НоваяСтрока.ЭквайринговыйТерминал = МассивТерминалов[0];
			НоваяСтрока.ВидПлатежнойКарты = ЭквайринговыеОперацииКлиентСервер.ВидПлатежнойКартыДляКредита();
		КонецЕсли;
	КонецЕсли;
	
	Индекс = ВременнаяТаблицаКарт.Индекс(НоваяСтрока);
	
	НоваяГруппа = Элементы.Добавить("ГруппаОплатаКредитом_"+Индекс, Тип("ГруппаФормы"), Элементы.ГруппаКартыОплаты);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.Ширина = 50;
	НоваяГруппа.РастягиватьПоГоризонтали = Ложь;
	НоваяГруппа.ЦветФона = ЦветФонаГруппы;
	
	НоваяГруппаСуммаКредита = Элементы.Добавить("ГруппаОплатаКредитомСумма_"+Индекс, Тип("ГруппаФормы"), НоваяГруппа);
	НоваяГруппаСуммаКредита.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппаСуммаКредита.ОтображатьЗаголовок = Ложь;
	НоваяГруппаСуммаКредита.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппаСуммаКредита.ЦветФона = ЦветФонаГруппы;
	
	НовыйЭлемент = Элементы.Добавить("ОплатаКартой_"+Индекс, Тип("ПолеФормы"), НоваяГруппаСуммаКредита);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].Сумма";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.Ширина = 35;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.Подсказка = НСтр(
	"ru = 'Калькулятор изменяет данные в нижнем поле ""Сумма"" или в последнем измененном поле ""Сумма"".
	|Если нужно привязать калькулятор к другому полю, то нажмите в этом поле кнопку с изображением калькулятора.'");
	Если ЭтоМобильныйКлиент Тогда
		НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Иначе
		НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		НовыйЭлемент.КнопкаВыбора = Истина;
		НовыйЭлемент.КнопкаВыпадающегоСписка = Истина;
	КонецЕсли;
	
	ТекущееПолеВводаСуммы = НовыйЭлемент.Имя;
	Если ВременнаяТаблицаКарт.Количество() < 2 Тогда
		Элементы.НадписьТекущееПолеВвода.Видимость = Ложь;
	Иначе
		ТекС = СтрНайти(СокрЛП(ТекущееПолеВводаСуммы), "_");
		Индекс = Число(Сред(СокрЛП(ТекущееПолеВводаСуммы), ТекС+1));
		НадписьТекущееПолеВвода = СтрШаблон(НСтр("ru = 'Для строки оплаты №%1'"), Индекс + 1);
		Элементы.НадписьТекущееПолеВвода.Видимость = Истина;
	КонецЕсли;
	
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "СуммаОплатыКартойПриИзменении");
	НовыйЭлемент.УстановитьДействие("НачалоВыбора", "СуммаОплатыКартойНачалоВыбора");
	
	ОплатаКартами = ВременнаяТаблицаКарт.Итог("Сумма");
	Если НЕ ЭтоМобильныйКлиент Тогда
		НовыйЭлемент.СписокВыбора.Очистить();
		Дельта = СуммаДокумента - ПолученоНаличными - ОплатаКартами - Объект.Предоплата.Итог("СуммаРасчетов");
		Если Дельта > 0 Тогда
			НовыйЭлемент.СписокВыбора.Добавить(Дельта, СтрШаблон(НСтр("ru = '%1 %2 (к оплате)'"), Дельта,
				ВалютаДокумента));
			НоваяСтрока.Сумма = Дельта;
		КонецЕсли;
		Если Дельта <> СуммаДокумента Тогда
			НовыйЭлемент.СписокВыбора.Добавить(СуммаДокумента, СтрШаблон(НСтр("ru = '%1 %2 (сумма док-та)'"),
				СуммаДокумента, ВалютаДокумента));
		КонецЕсли;
	КонецЕсли;
	
	НовыйЭлемент = Элементы.Добавить("ВалютаДокумента_"+Индекс, Тип("ПолеФормы"), НоваяГруппаСуммаКредита);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ПутьКДанным = "ВалютаДокумента";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	//НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	
	НовыйЭлемент = Элементы.Добавить("ДоговорКредита_"+Индекс, Тип("ПолеФормы"), НоваяГруппа);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ВременнаяТаблицаКарт["+Индекс+"].ДоговорКредита";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.ПодсказкаВвода = НСтр("ru = 'Договор с банком'");
	НовыйЭлемент.ВыбиратьТип = Ложь;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "РеквизитКредитаПриИзменении");
	МассивСвязей = Новый Массив;
	МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	ФиксированныйМассив = Новый ФиксированныйМассив(МассивСвязей);
	НовыйЭлемент.СвязиПараметровВыбора = ФиксированныйМассив;
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЭтоДоговорКредита", Истина));
	ФиксированныйМассив = Новый ФиксированныйМассив(МассивПараметров);
	НовыйЭлемент.ПараметрыВыбора = ФиксированныйМассив;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКредитом(Команда)
	
	ДобавитьКредитНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПредоплату(Команда)
	
	Объект.ОперацияСДенежнымиСредствами = Истина;
	УдалитьОплатуНедоступныхВидов();
	
	Элементы.ФормаПоказатьВсеРеквизитыШапки.Видимость = Истина;
	Элементы.ФормаПрименитьПредоплату.Видимость = Ложь;
	Элементы.ГруппаПараметровПредоплаты.Видимость = Ложь;
	Элементы.ГруппаСкидка.Видимость = Ложь;
	Элементы.Контрагент.ОтметкаНезаполненного = Истина;
	Элементы.Договор.ОтметкаНезаполненного = Истина;
	
	Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаВыборФормыОплатыМК;
	
	ОбновитьКартинкуПредоплаты();
	
КонецПроцедуры

#Область Калькулятор

// Процедура - обработчик команды РазделительДробнойЧасти формы.
//
&НаКлиенте
Процедура КомандаТочка(Команда)
	
	Если Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата Тогда
		ВводимоеЧисло = ПолученоНаличнымиСтрока;
		ТекПервыйВвод = ПервыйВвод;
	Иначе
		Если ВременнаяТаблицаКарт.Количество() = 1 Тогда
			Индекс = 0;
		Иначе
			ТекС = СтрНайти(СокрЛП(ТекущееПолеВводаСуммы), "_");
			Индекс = Число(Сред(СокрЛП(ТекущееПолеВводаСуммы), ТекС+1));
		КонецЕсли;
		ВводимоеЧисло = ВременнаяТаблицаКарт[Индекс].СуммаСтрока;
		ТекущаяСтрокаТаблицыКарт = ВременнаяТаблицаКарт[Индекс];
		
		ТекПервыйВвод = ТекущаяСтрокаТаблицыКарт.ПервыйВвод;
	КонецЕсли;
	
	Если ТекПервыйВвод Тогда
		ВводимоеЧисло = "";
		ТекПервыйВвод = Ложь;
	КонецЕсли;
	
	Если ВводимоеЧисло = "" Тогда
		ВводимоеЧисло = "0";
	КонецЕсли;
	
	ЧислоВхождений = СтрЧислоВхождений(ВводимоеЧисло, ",");
	
	Если Не ЧислоВхождений > 0 Тогда
		ВводимоеЧисло = ВводимоеЧисло + ",";
	КонецЕсли;
	
	Если Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата Тогда
		ПолученоНаличнымиСтрока = ВводимоеЧисло;
	Иначе
		
	КонецЕсли;
	
	Если Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата Тогда
		ПолученоНаличнымиСтрока = ВводимоеЧисло;
		ПервыйВвод = ТекПервыйВвод;
	Иначе
		ТекущаяСтрокаТаблицыКарт.СуммаСтрока = ВводимоеЧисло;
		ТекущаяСтрокаТаблицыКарт.ПервыйВвод = ТекПервыйВвод;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды Сбросить формы.
//
&НаКлиенте
Процедура КомандаСтереть(Команда)
	Стереть();
КонецПроцедуры

&НаКлиенте
Процедура ПлюсСбросить(Команда)
	Стереть();
КонецПроцедуры

&НаКлиенте
Процедура Стереть()
	
	Если Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата Тогда
		ПолученоНаличными = 0;
		ПолученоНаличнымиСтрока = "";
		ПервыйВвод = Ложь;
	Иначе
		Если ВременнаяТаблицаКарт.Количество() = 1 Тогда
			Индекс = 0;
		Иначе
			ТекС = СтрНайти(СокрЛП(ТекущееПолеВводаСуммы), "_");
			Индекс = Число(Сред(СокрЛП(ТекущееПолеВводаСуммы), ТекС+1));
		КонецЕсли;
		ВременнаяТаблицаКарт[Индекс].СуммаСтрока = "";
		ВременнаяТаблицаКарт[Индекс].Сумма = 0;
		ВременнаяТаблицаКарт[Индекс].ПервыйВвод = Ложь;
	КонецЕсли;
	
	ПересчитатьСуммы();
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка7 формы.
//
&НаКлиенте
Процедура Кнопка7(Команда)
	
	ДобавитьЦифру("7");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка8 формы.
//
&НаКлиенте
Процедура Кнопка8(Команда)
	
	ДобавитьЦифру("8");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка9 формы.
//
&НаКлиенте
Процедура Кнопка9(Команда)
	
	ДобавитьЦифру("9");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка4 формы.
//
&НаКлиенте
Процедура Кнопка4(Команда)
	
	ДобавитьЦифру("4");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка5 формы.
//
&НаКлиенте
Процедура Кнопка5(Команда)
	
	ДобавитьЦифру("5");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка6 формы.
//
&НаКлиенте
Процедура Кнопка6(Команда)
	
	ДобавитьЦифру("6");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка1 формы.
//
&НаКлиенте
Процедура Кнопка1(Команда)
	
	ДобавитьЦифру("1");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка2 формы.
//
&НаКлиенте
Процедура Кнопка2(Команда)
	
	ДобавитьЦифру("2");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка3 формы.
//
&НаКлиенте
Процедура Кнопка3(Команда)
	
	ДобавитьЦифру("3");
	
КонецПроцедуры

// Процедура - обработчик команды Кнопка0 формы.
//
&НаКлиенте
Процедура Кнопка0(Команда)
	
	ДобавитьЦифру("0");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура РаспределениеПродажПриСоздании()
	
	Если Параметры.Свойство("СписокЧековКОплате")
		И Параметры.СписокЧековКОплате.Количество() > 0 Тогда
		
		МножественныйРежимЧеков = Истина;
		
		Для Каждого ЭлементСписка Из Параметры.СписокЧековКОплате Цикл
			СтрокаСостава = СоставЧеков.Добавить();
			СтрокаСостава.Чек		= ЭлементСписка.Значение;
			СтрокаСостава.Номер		= СтрокаСостава.Чек.Номер;
			СтрокаСостава.Сумма		= СтрокаСостава.Чек.СуммаДокумента;
			РабочееМестоКассира.ЗаполнитьТекстовоеПредставлениеЧека(СтрокаСостава, ЭлементСписка.Значение);
			СтрокаСостава.Пометка	= (СтрокаСостава.Чек = Объект.Ссылка);
			СтрокаСостава.КоличествоСтрок = СтрокаСостава.Чек.Запасы.Количество();
			
			СформироватьЗаголовокСоставаЧека(СтрокаСостава.КоличествоСтрок);
			СоставЧека = СтрокаСостава.Состав;
			РеквизитыЧека = СтрокаСостава.Реквизиты;
		КонецЦикла;
		
		Если СоставЧеков.Количество() > 1 Тогда
			Элементы.СоставЧеков.Видимость = Истина;
			Если Объект.ОперацияСДенежнымиСредствами Тогда
				НазваниеПункта = НСтр("ru = 'Итог:'");
			Иначе
				НазваниеПункта = НСтр("ru = 'Оплатить все:'");
			КонецЕсли;
			
			СтрокаСостава = СоставЧеков.Добавить();
			СтрокаСостава.Номер		= НазваниеПункта;
			СтрокаСостава.Сумма		= СоставЧеков.Итог("Сумма");
		КонецЕсли;
		
		Если Параметры.Свойство("Сдача") И Параметры.Сдача <> 0 Тогда
			Элементы.ПолученоНаличными.СписокВыбора.Добавить(
				Параметры.Сдача,
				""+Параметры.Сдача+" "+ВалютаДокумента+" (сдача)");
		КонецЕсли;
		
	Иначе
		
		СтрокаСостава = СоставЧеков.Добавить();
		СтрокаСостава.Номер		= Объект.Номер;
		СтрокаСостава.Сумма		= Объект.СуммаДокумента;
		ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.ЧекККМ"));
		РабочееМестоКассира.ЗаполнитьТекстовоеПредставлениеЧека(СтрокаСостава, ДокументОбъект, ФискальныйРегистратор);
		ЗначениеВДанныеФормы(ДокументОбъект, Объект);
		СтрокаСостава.КоличествоСтрок = Объект.Запасы.Количество();
		
		СформироватьЗаголовокСоставаЧека(СтрокаСостава.КоличествоСтрок);
		СоставЧека = СтрокаСостава.Состав;
		РеквизитыЧека = СтрокаСостава.Реквизиты;
		
		Если Не ЭтоМобильныйКлиент Тогда
			Элементы.ГруппаБоковаяПанель.Видимость = Ложь;
			Элементы.ДекорацияБоковаяПанель.Заголовок = "<<";
			Элементы.ДекорацияБоковаяПанель.Картинка = БиблиотекаКартинок.РМК_РазвернутьДополнительнуюПанель;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокСоставаЧека(КоличествоСтрок)
	
	Если ЗначениеЗаполнено(КоличествоСтрок) Тогда
		Элементы.СоставЧека.Заголовок = СтрШаблон(НСтр("ru = 'Состав (%1)'"), КоличествоСтрок);
	Иначе
		Элементы.СоставЧека.Заголовок = НСтр("ru = 'Состав'");
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет цифру справа от введенного числа. Учитывается наличие разделителя дробной части.
//
&НаКлиенте
Процедура ДобавитьЦифру(ВведеннаяЦифраСтрокой)
	
	Если ВременнаяТаблицаКарт.Количество() = 0 И Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаБезналичнаяОплата Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Добавьте карту.'");
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата Тогда
		ВводимоеЧисло = ПолученоНаличнымиСтрока;
		ТекПервыйВвод = ПервыйВвод;
	Иначе
		Если Объект.ЭквайринговыйТерминал.Пустая() Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Выберите эквайринговый терминал'");
			Сообщение.Сообщить();
			
			Возврат;
		КонецЕсли;
		
		Если ВременнаяТаблицаКарт.Количество() = 1 Тогда
			Индекс = 0;
		Иначе
			ТекС = СтрНайти(СокрЛП(ТекущееПолеВводаСуммы), "_");
			Индекс = Число(Сред(СокрЛП(ТекущееПолеВводаСуммы), ТекС+1));
		КонецЕсли;
		ВводимоеЧисло = ВременнаяТаблицаКарт[Индекс].СуммаСтрока;
		ТекущаяСтрокаТаблицыКарт = ВременнаяТаблицаКарт[Индекс];
		
		ТекПервыйВвод = ТекущаяСтрокаТаблицыКарт.ПервыйВвод;
	КонецЕсли;
	
	Если ТекПервыйВвод Тогда
		ВводимоеЧисло = "";
		ТекПервыйВвод = Ложь;
	КонецЕсли;
	
	Запятая = Сред(ВводимоеЧисло, СтрДлина(ВводимоеЧисло) - КоличествоСимволовПослеЗапятой, 1);
	
	Если НЕ Запятая = "," Тогда
		ВводимоеЧисло = ВводимоеЧисло + ВведеннаяЦифраСтрокой;
	КонецЕсли;
	
	ЧислоВвода = ПривестиСтрокуКЧислу(ВводимоеЧисло, Истина);
	
	Если Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата Тогда
		ПолученоНаличными = ЧислоВвода;
		ПолученоНаличнымиСтрока = ВводимоеЧисло;
		ПервыйВвод = ТекПервыйВвод;
	Иначе
		ТекущаяСтрокаТаблицыКарт.Сумма = ЧислоВвода;
		ТекущаяСтрокаТаблицыКарт.СуммаСтрока = ВводимоеЧисло;
		ТекущаяСтрокаТаблицыКарт.ПервыйВвод = ТекПервыйВвод;
		
		СуммаОплатыКартойПриИзменении(Элементы["ОплатаКартой_"+Индекс]);
	КонецЕсли;
	
	ПересчитатьСуммы();
	
КонецПроцедуры

// Функция выполняет приведение строки к числу
// Параметры:
//  ЧислоСтрокой           - Строка - Строка приводимая к числу
//  ВозвращатьНеопределено - Булево - Если Истина и строка содержит некорректное значение, то возвращать Неопределено
//
// Возвращаемое значение:
//  Число
//
&НаКлиенте
Функция ПривестиСтрокуКЧислу(ЧислоСтрокой, ВозвращатьНеопределено = Ложь)
	
	ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
	ЗначениеЧисла = ОписаниеТипаЧисла.ПривестиЗначение(ЧислоСтрокой);
	
	Если ВозвращатьНеопределено И (ЗначениеЧисла = 0) Тогда
		
		Стр = Строка(ЧислоСтрокой);
		Если Стр = "" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Стр = СтрЗаменить(СокрЛП(Стр), "0", "");
		Если (Стр <> "") И (Стр <> ".") И (Стр <> ",") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеЧисла;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиИндексВНаименовании(Имя)
	
	Индекс = Найти(Имя, "_");
	
	Если Индекс = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Сред(Имя, Индекс + 1);
	
КонецФункции

&НаКлиенте
Функция НайтиИндексВНаименованииНаКлиенте(Имя)
	
	Индекс = Найти(Имя, "_");
	
	Если Индекс = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Сред(Имя, Индекс + 1);
	
КонецФункции

&НаКлиенте
Процедура ПоискПоНомеруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекНомер = ?(Результат = Неопределено, ДополнительныеПараметры.ТекНомер, Результат);
	
	НуженВыборИзСписка = Ложь;
	
	Если Не ПустаяСтрока(ТекНомер) Тогда
		НуженВыборИзСписка = ВыполнитьПоискСертификатаПоНомеру(ТекНомер);
	КонецЕсли;
	
	Если НуженВыборИзСписка Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВыбранныйСертификат", ЭтотОбъект);
		СтруктураПараметров = Новый Структура("Адрес", АдресВХранилище);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораСертификата", СтруктураПараметров, , , , ,
			ОписаниеОповещения);
	КонецЕсли;
	
	ПересчитатьСуммы();
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПоискСертификатаПоНомеру(Номер)
	
	Результат = РаботаСПодарочнымиСертификатами.ВыполнитьПоискСертификатаПоНомеру(Номер);
	
	Если Результат.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не найден сертификат по номеру: '") + Номер);
		Возврат Ложь;
	ИначеЕсли Результат.Количество() = 1 Тогда
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("ВидОплаты", Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат);
		СтруктураСтроки.Вставить("ПодарочныйСертификат", Результат[0].ПодарочныйСертификат);
		СтруктураСтроки.Вставить("НомерСертификата", Результат[0].НомерСертификата);
		СтруктураСтроки.Вставить("Сумма", Мин(Результат[0].Остаток,
											  СуммаДокумента
											  - Объект.ПолученоНаличными
											  - ВременнаяТаблицаКарт.Итог("Сумма")
											  - Объект.Предоплата.Итог("СуммаРасчетов")));
		СтруктураСтроки.Вставить("СуммаПогашенияСертификата", ОпределитьСуммуПогашенияСертификата(Результат[0], СтруктураСтроки.Сумма));
		Если ТакойСертификатУжеЕсть(СтруктураСтроки) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'В таблице оплат уже есть такой сертификат. Повторное добавление невозможно'"));
			Возврат Ложь;
		КонецЕсли;
		НоваяСтрока = ВременнаяТаблицаКарт.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтроки);
		ДобавитьСертификатНаСервере(НоваяСтрока);
		ЗаполнитьОстатокПоСертификату(ВременнаяТаблицаКарт.Индекс(НоваяСтрока));
		Возврат Ложь;
	Иначе
		АдресВХранилище = ПоместитьВоВременноеХранилище(Результат);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Определяет сумму погашения исходя из параметров сертификата
//
// Параметры:
//  ПараметрыСертификата - СтрокаТаблицыЗначений - См. РаботаСПодарочнымиСертификатами.ВыполнитьПоискСертификатаПоНомеру()
//  Сумма - Число - сумма, которая пойдет на оплату товаров
//
// Возвращаемое значение:
//  Число - сумма, которая будет списана с остатка по сертификату
//
&НаСервере
Функция ОпределитьСуммуПогашенияСертификата(ПараметрыСертификата, Сумма)
	
	Если ПараметрыСертификата.ПодарочныйСертификат.ЧастичноеПогашение Тогда
		СуммаПогашенияСертификата = Сумма;
	ИначеЕсли ПараметрыСертификата.ПодарочныйСертификат.ИспользоватьСерииНоменклатуры Тогда
		СуммаПогашенияСертификата = ПараметрыСертификата.Остаток;
	Иначе
		СуммаПогашенияСертификата = ПараметрыСертификата.ПодарочныйСертификат.Номинал;
	КонецЕсли;
	
	Возврат СуммаПогашенияСертификата;
	
КонецФункции

&НаСервере
// Проверяет дубли сертификата в таблице оплат
//
// Параметры:
//  ПараметрыСтрокиОплаты - Структура - результат работы формы добавления оплаты (см. ДобавитьОплату)
//
// Возвращаемое значение
//  Булево - Истина, если в таблице уже есть такой сертификат
//
Функция ТакойСертификатУжеЕсть(ПараметрыСтрокиОплаты)
	
	Если ПараметрыСтрокиОплаты.ВидОплаты <> ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыСтрокиОплаты.НомерСертификата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПоиска = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыСтрокиОплаты);
	Если СтруктураПоиска.Свойство("Сумма") Тогда
		СтруктураПоиска.Удалить("Сумма");
	КонецЕсли;
	Если СтруктураПоиска.Свойство("СуммаПогашенияСертификата") Тогда
		СтруктураПоиска.Удалить("СуммаПогашенияСертификата");
	КонецЕсли;
	
	Если ВременнаяТаблицаКарт.НайтиСтроки(СтруктураПоиска).Количество() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВыбранныйСертификат(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДобавитьВыбранныйСертификатНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныйСертификатНаСервере(Результат)
	
	Если ТакойСертификатУжеЕсть(Результат) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В таблице оплат уже есть такой сертификат. Повторное добавление невозможно'"));
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ВременнаяТаблицаКарт.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
	НоваяСтрока.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат;
	НоваяСтрока.Сумма = Мин(Результат.Остаток, СуммаДокумента - ВременнаяТаблицаКарт.Итог("Сумма")
		- Объект.Предоплата.Итог("СуммаРасчетов"));
	ДобавитьСертификатНаСервере(НоваяСтрока);
	ЗаполнитьОстатокПоСертификату(ВременнаяТаблицаКарт.Индекс(НоваяСтрока));
	
КонецПроцедуры

&НаСервере
Функция КоличествоТерминаловПоКассе()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Касса = &Касса
	|	И НЕ ЭквайринговыеТерминалы.ПометкаУдаления");
	Запрос.УстановитьПараметр("Касса", Объект.КассаККМ);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.Количество();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОстатокПоСертификату(ИндексЭлемента)
	
	// Проверка дублей
	СтрокаТаблицы = ВременнаяТаблицаКарт[Число(ИндексЭлемента)];
	Если ЗначениеЗаполнено(СтрокаТаблицы.НомерСертификата) Тогда
		Если ВременнаяТаблицаКарт.НайтиСтроки(Новый Структура("НомерСертификата", СтрокаТаблицы.НомерСертификата)).Количество() > 1 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'В таблице оплат уже есть такой сертификат. Повторное добавление невозможно'"));
			СтрокаТаблицы.НомерСертификата = Справочники.СерииНоменклатуры.ПустаяСсылка();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСертификата = РаботаСПодарочнымиСертификатами.ПолучитьСтруктуруДанныхСертификата(
		СтрокаТаблицы.ПодарочныйСертификат,
		СтрокаТаблицы.НомерСертификата,
		Объект.Ссылка);
	
	СтрокаТаблицы.ОстатокСертификата = ДанныеСертификата.Остаток;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьОграничениеБонуснойПрограммы(ДисконтнаяКарта)
	
	БонуснаяПрограмма = ДисконтнаяКарта.Владелец.БонуснаяПрограмма;
	
	Если ЗначениеЗаполнено(БонуснаяПрограмма) Тогда
		
		Возврат БонуснаяПрограмма.МаксимальныйПроцентОплаты;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораСуммыПредоплаты()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПлатежныйКалендарьОбороты.СуммаОборот, 0) - ЕСТЬNULL(ПлатежныйКалендарьОбороты.СуммаОплатыОборот, 0) КАК ОсталосьОплатить
	|ИЗ
	|	РегистрНакопления.ПлатежныйКалендарь.Обороты(, , , СчетНаОплату = &Заказ) КАК ПлатежныйКалендарьОбороты");
	Запрос.УстановитьПараметр("Заказ", Объект.Заказ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ОсталосьОплатить > 0 Тогда
			Элементы.СуммаПредоплаты.СписокВыбора.Добавить(Выборка.ОсталосьОплатить, СтрШаблон(НСтр(
				"ru = '%1 (остаток по заказу)'"), Выборка.ОсталосьОплатить));
			Объект.СуммаДокумента = Выборка.ОсталосьОплатить;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Получает ссылки на внешнее оборудование.
//
&НаСервере
Процедура ПолучитьСсылкиНаОборудование()

	ФискальныйРегистратор = ?(
		ИспользоватьПодключаемоеОборудование // Проверка на включенную ФО "Использовать ПО"
	  И ЗначениеЗаполнено(КассаККМ)
	  И ЗначениеЗаполнено(КассаККМ.ПодключаемоеОборудование),
	  КассаККМ.ПодключаемоеОборудование.Ссылка,
	  Справочники.ПодключаемоеОборудование.ПустаяСсылка()
	);

	ЭквайринговыйТерминал = ?(
		ИспользоватьПодключаемоеОборудование
	  И ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал)
	  И ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал.ПодключаемоеОборудование)
	  И НЕ Объект.ЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования,
	  Объект.ЭквайринговыйТерминал.ПодключаемоеОборудование,
	  Справочники.ПодключаемоеОборудование.ПустаяСсылка()
	);
	
КонецПроцедуры // ПолучитьСсылкиНаОборудование()

#КонецОбласти

#Область АвтоматизированнаяОплатаКартами

// Процедура - обработчик команды ДобавитьОплатуКартой.
//
&НаКлиенте
Процедура ДобавитьОплатуКартой(ОднаКарта_МК = Ложь, ПробитьЧек = Ложь)
	
	// При записи очищаются значения в дополнительных колонках, т.ч. запомним ТЧ, а потом восстановим.
	СкопироватьДанныеТаблицВПриемникИзИсточникаНаКлиенте(Объект.БезналичнаяОплата, ВременнаяТаблицаКарт);
	УдалитьСтрокиОплатыСНулевойСуммой();
	
	НомерКарты = "";
	
	Если ПечатьДокументовУНФКлиент.ПечатьЧекаНевозможна(ЭтотОбъект, НСтр(
		"ru = 'Не удалось выполнить оплату через платежный терминал'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда // Проверка на включенную ФО "Использовать ВО"
		Возврат;
	КонецЕсли;
		
	// Выбор устройства ЭТ
	ИдентификаторУстройстваЭТ = ?(
		ЗначениеЗаполнено(ЭквайринговыйТерминал),
		ЭквайринговыйТерминал,
		Неопределено
	);
	
	// Выбор устройства ФР
	ИдентификаторУстройстваФР = ?(
		ЗначениеЗаполнено(ФискальныйРегистратор),
		ФискальныйРегистратор,
		Неопределено
	);
	
	Если ИдентификаторУстройстваЭТ <> Неопределено 
		И (ИдентификаторУстройстваФР <> Неопределено ИЛИ КассаККМИспользоватьБезПодключенияОборудования) Тогда
		
		ОплатаКартами = ВременнаяТаблицаКарт.Итог("Сумма");
		Дельта = СуммаДокумента - ПолученоНаличными - ОплатаКартами - Объект.Предоплата.Итог("СуммаРасчетов");
		ПределСуммы = СуммаДокумента - ОплатаКартами;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Сумма", Дельта);
		ПараметрыФормы.Вставить("ПределСуммы", ПределСуммы);
		ПараметрыФормы.Вставить("СписокТиповКарт", Новый СписокЗначений());
		Индекс = 0;
		Для Каждого ВидКарты Из ВидыПлатежныхКарт Цикл
			ПараметрыФормы.СписокТиповКарт.Добавить(Индекс, ВидКарты.Значение);
			Индекс = Индекс + 1;
		КонецЦикла;
		
		Результат = Неопределено;
		
		ДополнительныеПараметры = Новый Структура(
			"ИдентификаторУстройстваФР, ИдентификаторУстройстваЭТ, НомерКарты, ОднаКарта_МК, ПробитьЧек",
			ИдентификаторУстройстваФР, ИдентификаторУстройстваЭТ, НомерКарты, ОднаКарта_МК, ПробитьЧек
		);
		
		Если ОднаКарта_МК Тогда
			Результат = Новый Структура("ВидКарты, НомерКарты, Сумма, НомерЧека, СсылочныйНомер",
				ВидКартыОплатаКартой, "", Дельта, "", ""
			);
			ДобавитьОплатуКартойЗавершение(Результат, ДополнительныеПараметры);
		Иначе
			ОткрытьФорму(
				"Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ",
				ПараметрыФормы,,,,,
				Новый ОписаниеОповещения("ДобавитьОплатуКартойЗавершение",
					ЭтотОбъект,
					ДополнительныеПараметры
				),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
			);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИдентификаторУстройстваФР = ДополнительныеПараметры.ИдентификаторУстройстваФР;
	ИдентификаторУстройстваЭТ = ДополнительныеПараметры.ИдентификаторУстройстваЭТ;
	ПробитьЧек = ДополнительныеПараметры.ПробитьЧек;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("ВидКарты") Тогда
			ВидКарты = Результат.ВидКарты;
		Иначе
			ВидКарты = ВидыПлатежныхКарт[Результат.ТипКарты].Значение;
		КонецЕсли;
		
		ЭтаФорма.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeSales";
		ПараметрыОперации.НомерКарты     = Результат.НомерКарты;
		ПараметрыОперации.СуммаОперации  = Результат.Сумма;
		ПараметрыОперации.НомерЧека      = Результат.НомерЧека;
		ПараметрыОперации.СсылочныйНомер = Результат.СсылочныйНомер;
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("ВидКарты", ВидКарты);
		ДополнительныеПараметры.Вставить("ПробитьЧек", ПробитьЧек);

		Оповещение = Новый ОписаниеОповещения("ОперацияПоПлатежнойКартеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
			Оповещение,
			УникальныйИдентификатор,
			ИдентификаторУстройстваЭТ,
			ИдентификаторУстройстваФР,
			ПараметрыОперации
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПоПлатежнойКартеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если РезультатВыполнения.Результат Тогда
		
		// Добавим строку во временную таблицу.
		Если ВременнаяТаблицаКарт.Количество() = 1 И 
			ВременнаяТаблицаКарт[0].Сумма = 0 И Не ЗначениеЗаполнено(ВременнаяТаблицаКарт[0].НомерПлатежнойКарты) И
			НЕ ЗначениеЗаполнено(ВременнаяТаблицаКарт[0].ВидПлатежнойКарты) И Не ЗначениеЗаполнено(ВременнаяТаблицаКарт[0].СсылочныйНомер) И Не ЗначениеЗаполнено(ВременнаяТаблицаКарт[0].НомерЧекаЭТ)
			И ВременнаяТаблицаКарт[0].ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.БанковскаяКарта") Тогда
			СтрокаОплатыКартой = ВременнаяТаблицаКарт[0];
			ДобавитьЭлементыНаФорму = Ложь;
		Иначе
			СтрокаОплатыКартой = ВременнаяТаблицаКарт.Добавить();
			ДобавитьЭлементыНаФорму = Истина;
		КонецЕсли;
		
		СтрокаОплатыКартой.ВидПлатежнойКарты		= Параметры.ВидКарты;
		СтрокаОплатыКартой.НомерПлатежнойКарты		= РезультатВыполнения.НомерКарты; // Возможна запись пустого номера карты или номера вида "****************"
		СтрокаОплатыКартой.Сумма					= РезультатВыполнения.СуммаОперации;
		СтрокаОплатыКартой.СсылочныйНомер			= РезультатВыполнения.СсылочныйНомер;
		СтрокаОплатыКартой.НомерЧекаЭТ				= РезультатВыполнения.НомерЧекаЭТ;
		СтрокаОплатыКартой.ЭквайринговыйТерминал	= Объект.ЭквайринговыйТерминал;
		
		Если ДобавитьЭлементыНаФорму Тогда
			ДобавитьКартуНаСервере(СтрокаОплатыКартой.ПолучитьИдентификатор());
		Иначе
			СтрокаОплатыКартой.ИмяКоманды = ДобавитьКнопкуУдаленияОплатыКартой(0);
		КонецЕсли;
		
		ПересчитатьСуммы();
		
		ДобавитьСтрокуОбъектБезналичнаяОплата(РезультатВыполнения, Параметры.ВидКарты);
		
		Если Параметры.ПробитьЧек Тогда
			ОК(Неопределено);
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		Сообщить(ТекстСообщения);
		
		НастроитьВидимостьЭлементовПередачиДанныхНаЭТ(Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуОбъектБезналичнаяОплата(ДанныеДляЗаполнения, ВидКарты)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки") Тогда
		
		СуммыПоДоговорамПлатежныхАгентов = Объект.Запасы.Выгрузить();
		СуммыПоДоговорамПлатежныхАгентов.Свернуть("ДоговорПлатежногоАгента", "Всего");
		СуммыПоДоговорамПлатежныхАгентов.Сортировать("ДоговорПлатежногоАгента");
		
		Если СуммыПоДоговорамПлатежныхАгентов.Количество() = 1 Тогда
			
			ДанныеДляЗаполнения.Вставить("ДоговорПлатежногоАгента", СуммыПоДоговорамПлатежныхАгентов[0].ДоговорПлатежногоАгента);
			
		ИначеЕсли СуммыПоДоговорамПлатежныхАгентов.Количество() > 1 Тогда
			
			ОплаченоНаличнымиОстаток = Объект.ПолученоНаличными;
			Если ДанныеДляЗаполнения.Свойство("Сумма") Тогда
				ОплаченоБезналичнымиОстаток = ДанныеДляЗаполнения.Сумма;
			Иначе
				ОплаченоБезналичнымиОстаток = ДанныеДляЗаполнения.СуммаОперации;
			КонецЕсли;
			
			Для каждого СтрокаСуммы Из СуммыПоДоговорамПлатежныхАгентов Цикл
				
				Если СтрокаСуммы.Всего >= ОплаченоНаличнымиОстаток Тогда
					СтрокаСуммы.Всего = СтрокаСуммы.Всего - ОплаченоНаличнымиОстаток;
				Иначе
					СтрокаСуммы.Всего = 0;
				КонецЕсли;
				
				Если СтрокаСуммы.Всего = 0 Тогда
					Продолжить;
				Иначе
					
					ДанныеДляЗаполнения.Вставить("ДоговорПлатежногоАгента", СтрокаСуммы.ДоговорПлатежногоАгента);
					
					// Добавим строку в ТЧ оплат документа.
					СтрокаОплатыКартой = Объект.БезналичнаяОплата.Добавить();
					СтрокаОплатыКартой.ВидОплаты				= ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.БанковскаяКарта");
					СтрокаОплатыКартой.ВидПлатежнойКарты		= ВидКарты;
					Если ДанныеДляЗаполнения.Свойство("НомерПлатежнойКарты") Тогда
						СтрокаОплатыКартой.НомерПлатежнойКарты		= ДанныеДляЗаполнения.НомерПлатежнойКарты; // Возможна запись пустого номера карты или номера вида "****************"
					Иначе
						СтрокаОплатыКартой.НомерПлатежнойКарты		= ДанныеДляЗаполнения.НомерКарты; // Возможна запись пустого номера карты или номера вида "****************"
					КонецЕсли;
					СтрокаОплатыКартой.СсылочныйНомер			= ДанныеДляЗаполнения.СсылочныйНомер;
					СтрокаОплатыКартой.НомерЧекаЭТ				= ДанныеДляЗаполнения.НомерЧекаЭТ;
					Если ДанныеДляЗаполнения.Свойство("ЭквайринговыйТерминал") Тогда
						СтрокаОплатыКартой.ЭквайринговыйТерминал	= ДанныеДляЗаполнения.ЭквайринговыйТерминал;
					Иначе
						СтрокаОплатыКартой.ЭквайринговыйТерминал	= Объект.ЭквайринговыйТерминал;
					КонецЕсли;
					Если ДанныеДляЗаполнения.Свойство("ДоговорПлатежногоАгента") Тогда
						СтрокаОплатыКартой.ДоговорПлатежногоАгента	= ДанныеДляЗаполнения.ДоговорПлатежногоАгента;
					КонецЕсли;
					
					СтрокаОплатыКартой.Сумма = ОплаченоБезналичнымиОстаток;
					
					Если СтрокаСуммы.Всего >= ОплаченоБезналичнымиОстаток Тогда
						Прервать;
					Иначе
						СтрокаОплатыКартой.Сумма = СтрокаСуммы.Всего;
						ОплаченоБезналичнымиОстаток = ОплаченоБезналичнымиОстаток - СтрокаСуммы.Всего;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Запись
			Записать(); // Обязателено необходимо записать документ, для предотвращения потери информации.
			ЗаписатьДокумент = Истина;
			// Конец Запись
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавим строку в ТЧ оплат документа.
	СтрокаОплатыКартой = Объект.БезналичнаяОплата.Добавить();
	СтрокаОплатыКартой.ВидОплаты				= ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.БанковскаяКарта");
	СтрокаОплатыКартой.ВидПлатежнойКарты		= ВидКарты;
	Если ДанныеДляЗаполнения.Свойство("НомерПлатежнойКарты") Тогда
		СтрокаОплатыКартой.НомерПлатежнойКарты		= ДанныеДляЗаполнения.НомерПлатежнойКарты; // Возможна запись пустого номера карты или номера вида "****************"
	Иначе
		СтрокаОплатыКартой.НомерПлатежнойКарты		= ДанныеДляЗаполнения.НомерКарты; // Возможна запись пустого номера карты или номера вида "****************"
	КонецЕсли;
	Если ДанныеДляЗаполнения.Свойство("Сумма") Тогда
		СтрокаОплатыКартой.Сумма					= ДанныеДляЗаполнения.Сумма;
	Иначе
		СтрокаОплатыКартой.Сумма					= ДанныеДляЗаполнения.СуммаОперации;
	КонецЕсли;
	СтрокаОплатыКартой.СсылочныйНомер			= ДанныеДляЗаполнения.СсылочныйНомер;
	СтрокаОплатыКартой.НомерЧекаЭТ				= ДанныеДляЗаполнения.НомерЧекаЭТ;
	Если ДанныеДляЗаполнения.Свойство("ЭквайринговыйТерминал") Тогда
		СтрокаОплатыКартой.ЭквайринговыйТерминал	= ДанныеДляЗаполнения.ЭквайринговыйТерминал;
	Иначе
		СтрокаОплатыКартой.ЭквайринговыйТерминал	= Объект.ЭквайринговыйТерминал;
	КонецЕсли;
	Если ДанныеДляЗаполнения.Свойство("ДоговорПлатежногоАгента") Тогда
		СтрокаОплатыКартой.ДоговорПлатежногоАгента	= ДанныеДляЗаполнения.ДоговорПлатежногоАгента;
	КонецЕсли;
	
	// Запись
	Записать(); // Обязателено необходимо записать документ, для предотвращения потери информации.
	ЗаписатьДокумент = Истина;
	// Конец Запись
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОплатуКартойТерминалНеПодключен(СтрокаТаблицы);
	
	ТекущиеДанные = СтрокаТаблицы;
	
	Если ТекущиеДанные.Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ОплатаУдаленаСумма = ТекущиеДанные.Сумма;
	ТекущиеДанные.Сумма = 0;
	ТекущиеДанные.ОплатаУдалена = Истина;
	
	Индекс = ВременнаяТаблицаКарт.Индекс(ТекущиеДанные);
	ИзменитьЭлементыПослеУдаленияОплатыНаСервере(Индекс, ТекущиеДанные.ОплатаУдаленаСумма);
	
	ПересчитатьСуммы();
	
КонецПроцедуры

// Процедура - обработчик команды УдалитьОплатуКартой.
//
&НаКлиенте
Процедура УдалитьОплатуКартойТерминалПодключен(ТекущиеДанные)
	
	// Проверка выбранной строки в талице оплат платежными картами
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Выберите строку удаляемой оплаты картой.'"));
		Возврат;
	КонецЕсли;
	
	Если ПечатьДокументовУНФКлиент.ПечатьЧекаНевозможна(ЭтотОбъект, НСтр(
		"ru = 'Не удалось выполнить отмену оплаты картой.'")) Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда // Проверка на включенную ФО "Использовать ВО"
		Возврат;
	КонецЕсли;
	
	СкопироватьДанныеТаблицВПриемникИзИсточникаНаКлиенте(Объект.БезналичнаяОплата, ВременнаяТаблицаКарт);
	УдалитьСтрокиОплатыСНулевойСуммой();
	
	СуммаОперации       = ТекущиеДанные.Сумма;
	НомерСсылкиОперации = ТекущиеДанные.СсылочныйНомер;
	НомерЧекаЭТ         = ТекущиеДанные.НомерЧекаЭТ;
	
	// Выбор устройства ЭТ
	ИдентификаторУстройстваЭТ = ?(
		ЗначениеЗаполнено(ЭквайринговыйТерминал),
		ЭквайринговыйТерминал,
		Неопределено);
		
	// Выбор устройства ФР
	ИдентификаторУстройстваФР = ?(
		ЗначениеЗаполнено(ФискальныйРегистратор),
		ФискальныйРегистратор,
		Неопределено);
	
	Если ИдентификаторУстройстваЭТ <> Неопределено 
			И (ИдентификаторУстройстваФР <> Неопределено ИЛИ КассаККМИспользоватьБезПодключенияОборудования) Тогда
		
		ЭтаФорма.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeVoid";
		ПараметрыОперации.СуммаОперации  = СуммаОперации;
		ПараметрыОперации.НомерЧека      = НомерЧекаЭТ;
		ПараметрыОперации.СсылочныйНомер = НомерСсылкиОперации;
		
		Оповещение = Новый ОписаниеОповещения("ОтменаОперацииПоПлатежнойКартеЗавершение", ЭтотОбъект, ТекущиеДанные);
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
			Оповещение,
			УникальныйИдентификатор, 
			ИдентификаторУстройстваЭТ,
			ИдентификаторУстройстваФР,
			ПараметрыОперации
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаОперацииПоПлатежнойКартеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если РезультатВыполнения.Результат Тогда
		ТекущиеДанные = Параметры;
		ТекущиеДанные.ОплатаУдаленаСумма = ТекущиеДанные.Сумма;
		ТекущиеДанные.Сумма = 0;
		ТекущиеДанные.ОплатаУдалена = Истина;
		
		Индекс = ВременнаяТаблицаКарт.Индекс(ТекущиеДанные);
		Если НЕ РезультатВыполнения.Свойство("ЭтоРМК_МК") Тогда
			ИзменитьЭлементыПослеУдаленияОплатыНаСервере(Индекс, ТекущиеДанные.ОплатаУдаленаСумма);
		КонецЕсли;
		
		ПересчитатьСуммы();
		
		СкопироватьДанныеТаблицВПриемникИзИсточникаНаКлиенте(Объект.БезналичнаяОплата, ВременнаяТаблицаКарт);
		УдалитьСтрокиОплатыСНулевойСуммой();
		
		// Запись
		Записать();
		ЗаписатьДокумент = Истина;
		// Конец Запись
	Иначе
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура изменяет состав элементов формы для удаленной карты.
//
&НаСервере
Процедура ИзменитьЭлементыПослеУдаленияОплатыНаСервере(Индекс, ОплатаУдаленаСумма);
	
	Элементы["НадписьОбУдаленииОплатыКартой_"+Индекс].Заголовок = НСтр("ru = 'Оплата отменена: -'")+ОплатаУдаленаСумма;
	Элементы["ОплатаКартой_"+Индекс].Видимость = Ложь;
	Элементы["НадписьОбУдаленииОплатыКартой_"+Индекс].Видимость = Истина;
	Элементы["КнопкаУдаленияОплаты_"+Индекс].Видимость = Ложь;
	
КонецПроцедуры

// Процедура - обработчик команды КнопкаУдаленияОплаты_N формы, где N - индекс карты в ТЗ ВременнаяТаблицаКарт.
//
&НаКлиенте
Процедура ВыбратьКартуДляУдаленияОплаты(Команда)
	
	НайденныеСтроки = ВременнаяТаблицаКарт.НайтиСтроки(Новый Структура("ИмяКоманды", ""+Команда.Имя));
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Если НайденныеСтроки[0].Сумма = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура("СтрокаТаблицы", НайденныеСтроки[0]);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьКартуДляУдаленияОплатыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, "Отменить оплату картой", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Ошибка: не обнаружена команда удаления.'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды КнопкаУдаленияОплаты_N после подтверждения отмены оплаты. N - индекс карты в ТЗ ВременнаяТаблицаКарт.
//
&НаКлиенте
Процедура ВыбратьКартуДляУдаленияОплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
		УдалитьОплатуКартойТерминалПодключен(ДополнительныеПараметры.СтрокаТаблицы);
	Иначе
		УдалитьОплатуКартойТерминалНеПодключен(ДополнительныеПараметры.СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура копирует данные между ТЗ ВременнаяТаблицаКарт и ТЧ БезналичнаяОплата.
//
&НаКлиенте
Процедура СкопироватьДанныеТаблицВПриемникИзИсточникаНаКлиенте(Приемник, Источник);
	
	Приемник.Очистить();
	Для каждого ТекущаяСтрокаИсточника Из Источник Цикл
		Если ТекущаяСтрокаИсточника.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат") Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ВидОплаты", ТекущаяСтрокаИсточника.ВидОплаты);
			СтруктураПоиска.Вставить("ПодарочныйСертификат", ТекущаяСтрокаИсточника.ПодарочныйСертификат);
			СтруктураПоиска.Вставить("НомерСертификата", ТекущаяСтрокаИсточника.НомерСертификата);
			НайденныеСтроки = Приемник.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() Тогда
				НоваяСтрокаПриемника = НайденныеСтроки[0];
				НоваяСтрокаПриемника.Сумма = НоваяСтрокаПриемника.Сумма + ТекущаяСтрокаИсточника.Сумма;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрокаПриемника = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемника, ТекущаяСтрокаИсточника);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КнопкиСНоминалом

&НаКлиенте
Процедура ДобавитьСумму(пСумма)
	
	ПолученоНаличными = ПолученоНаличными + пСумма;
	ПолученоНаличнымиСтрока = ""+ПолученоНаличными;
	ПолученоНаличнымиСтрока = СтрЗаменить(ПолученоНаличнымиСтрока, " ", "");
	ПолученоНаличнымиСтрока = СтрЗаменить(ПолученоНаличнымиСтрока, Символы.НПП, "");
	ПервыйВвод = Ложь;
	
	ПересчитатьСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура Плюс50(Команда)
	ДобавитьСумму(50);
КонецПроцедуры

&НаКлиенте
Процедура БезСдачи(Команда)
	
	ПолученоНаличными = 0;
	ДобавитьСумму(СуммаДокумента - ВременнаяТаблицаКарт.Итог("Сумма") - Объект.Предоплата.Итог("СуммаРасчетов"));
	ОК(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Плюс1(Команда)
	ДобавитьСумму(1);
КонецПроцедуры

&НаКлиенте
Процедура Плюс2(Команда)
	ДобавитьСумму(2);
КонецПроцедуры

&НаКлиенте
Процедура Плюс5(Команда)
	ДобавитьСумму(5);
КонецПроцедуры

&НаКлиенте
Процедура Плюс10(Команда)
	ДобавитьСумму(10);
КонецПроцедуры

&НаКлиенте
Процедура Плюс100(Команда)
	ДобавитьСумму(100);
КонецПроцедуры

&НаКлиенте
Процедура Плюс500(Команда)
	ДобавитьСумму(500);
КонецПроцедуры

&НаКлиенте
Процедура Плюс1000(Команда)
	ДобавитьСумму(1000);
КонецПроцедуры

&НаКлиенте
Процедура Плюс5000(Команда)
	ДобавитьСумму(5000);
КонецПроцедуры

&НаКлиенте
Процедура Плюс200(Команда)
	ДобавитьСумму(200);
КонецПроцедуры

&НаКлиенте
Процедура Плюс2000(Команда)
	ДобавитьСумму(2000);
КонецПроцедуры

&НаКлиенте
Процедура ПолеНомерСертификатаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Владелец = ВременнаяТаблицаКарт[Число(НайтиИндексВНаименованииНаКлиенте(Элемент.Имя))].ПодарочныйСертификат;
	
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = РаботаСПодарочнымиСертификатами.СформироватьСписокНомеровСертификатов(Текст, Владелец);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ПроверкиПередОплатойПройдены()
	
	Если Объект.СуммаДокумента = 0 Тогда
		ТекстОшибки = НСтр("ru='Сумма чека не может равняться нулю'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "Объект.СуммаДокумента");
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() > 0 И Объект.СуммаДокумента > Объект.Запасы.Итог("Всего") Тогда
		ТекстОшибки = НСтр("ru='Сумма чека не может превышать сумму товаров'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "Объект.СуммаДокумента");
		Объект.СуммаДокумента = СуммаДокумента;
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.ОперацияСДенежнымиСредствами
		И (Не ЗначениеЗаполнено(Объект.Контрагент) ИЛИ Не ЗначениеЗаполнено(Объект.Договор))Тогда
		ТекстОшибки = НСтр("ru='Необходимо указать контрагента и договор'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты(
		"ФункциональнаяОпцияИспользоватьПредоплатуВЧекахККМ") Тогда
		
		Если Не ПроверенДоговорНаСервере() Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина
	
КонецФункции

&НаСервере
Функция ПроверенДоговорНаСервере()
	
	Отказ = Ложь;
	
	ТекстСообщения = "";
	Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
		ТекстСообщения,
		Объект.Договор,
		Объект.Ссылка,
		Объект.Организация,
		Объект.Контрагент,
		Отказ);

	Если ТекстСообщения <> "" Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Если Отказ Тогда
			Сообщение.Текст = СтрШаблон(НСтр("ru = 'Документ не проведен. %1'"), ТекстСообщения);
		Иначе
			Сообщение.Текст = ТекстСообщения;
		КонецЕсли;
		
		Если Отказ Тогда
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Поле = "Договор1";
			Сообщение.Сообщить();
		Иначе
			Сообщение.Сообщить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

&НаКлиенте
Процедура ОплатитьНаличными(Команда)
	
	ПроверкиПройдены = ПроверкиПередОплатойПройдены();
	Если Не ПроверкиПройдены Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ФормаОплаты = ТипыДенежныхСредствНаличные;
	Если ЭтоМобильныйКлиент Тогда
		УстановитьВидимостьОтФормыОплаты_МК();
	Иначе
		УстановитьВидимостьОтФормыОплаты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартой(Команда)
	
	Объект.ФормаОплаты = ТипыДенежныхСредствБезналичные;
	
	ПроверкиПройдены = ПроверкиПередОплатойПройдены();
	Если Не ПроверкиПройдены Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоставЧеков", "Доступность", Ложь);
	
	Если ЭтоМобильныйКлиент Тогда
		УстановитьВидимостьОтФормыОплаты_МК();
	Иначе
		УстановитьВидимостьОтФормыОплаты();
	КонецЕсли;
	
	// Если терминал один, он подключен и вид карт тоже один, то сразу оправим данные на терминал.
	Если ДоступенОдинТерминал И НЕ ЭквайринговыйТерминал.Пустая()
		И НЕ Элементы.ВидКартыОплатаКартой.Доступность Тогда
		ПередатьНаТерминал(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьСмешаннаяОплата(Команда)
	
	Объект.ФормаОплаты = Неопределено;
	
	ПроверкиПройдены = ПроверкиПередОплатойПройдены();
	Если Не ПроверкиПройдены Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоставЧеков", "Доступность", Ложь);
	
	Если ЭтоМобильныйКлиент Тогда
		УстановитьВидимостьОтФормыОплаты_МК();
	Иначе
		УстановитьВидимостьОтФормыОплаты();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтФормыОплаты_МК()
	
	Элементы.ГруппаСуммаСдачи.Видимость = Истина;
	Элементы.ГруппаСкидка.Видимость = Ложь;
	Элементы.ГруппаРучнойСкидки.Видимость = Ложь;
	
	Если Объект.ФормаОплаты = ТипыДенежныхСредствНаличные Тогда
		Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата;
		Элементы.ГруппаОплата.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		Элементы.ГруппаКнопки_1_МК.Видимость = Истина;
		Элементы.ГруппаКнопки_2_МК.Видимость = Ложь;
		Элементы.ГруппаПодвал_МК.Видимость = Ложь;
	ИначеЕсли Объект.ФормаОплаты = ТипыДенежныхСредствБезналичные Тогда
		Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаОплатаКартой;
		Элементы.ГруппаОплата.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ГруппаОплатаКартой.Видимость = Истина;
		НастроитьЭлементыНаСтраницеГруппаОплатаКартой();
		
		Элементы.ГруппаКнопки_1_МК.Видимость = Ложь;
		Элементы.ГруппаКнопки_1_МК.Видимость = Истина;
		Элементы.ГруппаПодвал_МК.Видимость = Ложь;
		Элементы.ГруппаКнопки_2_МК.Видимость = Истина;
	Иначе
		Элементы.ГруппаВыборФормыОплатыМК.Видимость = Ложь;
		Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата;
		Элементы.ГруппаОплатаКартой.Видимость = Ложь;
		Элементы.ГруппаОплата.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Элементы.ГруппаКнопки_1_МК.Видимость = Ложь;
		Элементы.ГруппаКнопки_2_МК.Видимость = Ложь;
		Элементы.ГруппаПодвал_МК.Видимость = Истина;
		Элементы.ГруппаКалькуляторИНомерКарты.Видимость = Ложь;
		
		Элементы.ГруппаБезналичнаяОплата_МК.Видимость = Истина;
		Элементы.ГруппаБезналичнаяОплата.Видимость = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БезналДобавитьОплатуБонусами", "Видимость", Не Объект.ОперацияСДенежнымиСредствами);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаПредоплата", "Видимость", ИспользоватьПредоплату И Не Объект.ОперацияСДенежнымиСредствами);
		
	КонецЕсли;
	
	Элементы.ГруппаОтправкаЧека.Видимость = Ложь;
	Элементы.ГруппаПечатьТоварногоЧека.Видимость = Ложь;
	Элементы.ГруппаКнопки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	Элементы.ФормаОтменить.Высота = 2;
	Элементы.ОК.Высота = 2;
	
	Элементы.ГруппаПраваяКолонка.Видимость = Ложь;
	Элементы.ГруппаКнопкиСНоминаломСтрока.Видимость = Ложь;
	Элементы.ГруппаКнопкиСНоминаломСтрока_МК.Видимость = Истина;
	Элементы.БезСдачи.Видимость = Ложь;
	
	Элементы.ГруппаКнопкиСНоминаломИБезСдачи.ЦветФона = Новый Цвет;
	Элементы.ГруппаКнопкиСНоминалом.ЦветФона = Новый Цвет;
	
	Элементы.СуммаСдачи.Высота = 1;
	
	Элементы.ГруппаСуммаДокумента.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	//Элементы.НадписьАвтоСкидкиРассчитаны.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	
	Элементы.ГруппаКнопки.Видимость = Ложь;
	
	Элементы.ДекорацияРазделитель.Видимость = Ложь;
	Элементы.ФормаПоказатьВсеРеквизитыШапки.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтФормыОплаты()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыИтогСумма", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаДокумента", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКнопки", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОК", "КнопкаПоУмолчанию", Истина);
	
	Если Объект.ФормаОплаты = ТипыДенежныхСредствНаличные Тогда
		
		Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата;
		Элементы.ГруппаОплата.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
	ИначеЕсли Объект.ФормаОплаты = ТипыДенежныхСредствБезналичные Тогда
		
		Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаОплатаКартой;
		Элементы.ГруппаОплата.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ГруппаОплатаКартой.Видимость = Истина;
		Элементы.ГруппаКнопки_2_МК.Видимость = Ложь;
		НастроитьЭлементыНаСтраницеГруппаОплатаКартой();
		
	Иначе
		
		Элементы.ГруппаВыборФормыОплаты.Видимость = Ложь;
		Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаНаличнаяОплата;
		Элементы.ГруппаОплатаКартой.Видимость = Ложь;
		Элементы.ГруппаОплата.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Элементы.ГруппаКнопки_1_МК.Видимость = Ложь;
		Элементы.ГруппаКнопки_2_МК.Видимость = Ложь;
		Элементы.ГруппаКалькуляторИНомерКарты.Видимость = Истина;
		
		Элементы.ГруппаБезналичнаяОплата.Видимость = Истина;
		
		Элементы.СтраницаПредоплата.Видимость = ИспользоватьПредоплату И Не Объект.ОперацияСДенежнымиСредствами;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеРеквизитыШапки(Команда)
	
	СтруктураДопРеквизиты = Новый Структура;
	
	СтруктураДопРеквизиты.Вставить("Патент", Объект.Патент);
	СтруктураДопРеквизиты.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
	СтруктураДопРеквизиты.Вставить("Комментарий", Объект.Комментарий);
	СтруктураДопРеквизиты.Вставить("Контрагент", Объект.Контрагент);
	СтруктураДопРеквизиты.Вставить("Ответственный", Объект.Ответственный);
	СтруктураДопРеквизиты.Вставить("Подразделение", Объект.Подразделение);
	СтруктураДопРеквизиты.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПоказатьВсеРеквизитыШапкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.РеквизитыШапки_МК", СтруктураДопРеквизиты, ЭтотОбъект, УникальныйИдентификатор,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеРеквизитыШапкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Если Объект.ДисконтнаяКарта <> Результат.ДисконтнаяКарта Тогда
			Объект.ДисконтнаяКарта = Результат.ДисконтнаяКарта;
			ВыбранаДисконтнаяКартаДополнительно(Объект.ДисконтнаяКарта);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Объект, Результат);
	КонецЕсли;
	
КонецПроцедуры


#Область ДисконтныеКарты

// Процедура - обработчик команды СчитатьДисконтнуюКарту формы.
//
&НаКлиенте
Процедура СчитатьДисконтнуюКарту(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СчитатьДисконтнуюКартуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.СчитываниеДисконтнойКарты", , ЭтаФорма, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


// Завершающая часть процедуры - обработчика команды СчитатьДисконтнуюКарту формы.
// Вызывается после закрытия формы считывания дисконтной карты.
//
&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатиеЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт

	Если ТипЗнч(ВозвращаемыеПараметры) = Тип("Структура") Тогда
		ВыбранаДисконтнаяКарта(ВозвращаемыеПараметры.ДисконтнаяКарта);
	КонецЕсли;

КонецПроцедуры


// Завершающая часть процедуры - обработчика команды СчитатьДисконтнуюКарту формы.
// Вызывается после закрытия формы считывания дисконтной карты.
//
&НаКлиенте
Процедура УстановитьСкидкуНаценкуЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт

	Если ТипЗнч(ВозвращаемыеПараметры) = Тип("Структура") Тогда
		Если Объект.ВидСкидкиНаценки <> ВозвращаемыеПараметры.ВидСкидкиНаценки Тогда
			Объект.ВидСкидкиНаценки = ВозвращаемыеПараметры.ВидСкидкиНаценки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


// Процедура - обработчик выбора дисконтной карты, начало.
//
&НаКлиенте
Процедура ВыбранаДисконтнаяКарта(ДисконтнаяКарта)

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Считана дисконтная карта'"),
		ПолучитьНавигационнуюСсылку(ДисконтнаяКарта),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Считана дисконтная карта %1'"), ДисконтнаяКарта),
		БиблиотекаКартинок.Информация32);
	
	ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта);
		
КонецПроцедуры


// Процедура - обработчик выбора дисконтной карты, окончание.
//
&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта)
	
	Если Не Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Объект.ДисконтнаяКарта = ДисконтнаяКарта;
	Объект.ПроцентСкидкиПоДисконтнойКарте = ДисконтныеКартыУНФВызовСервера.ВычислитьПроцентСкидкиПоДисконтнойКарте(Объект.Дата, ДисконтнаяКарта);
	
	ВладелецДисконтнойКарты = УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "ВладелецКарты");
	Если ЗначениеЗаполнено(ВладелецДисконтнойКарты) Тогда
		Объект.Контрагент = ВладелецДисконтнойКарты;
	КонецЕсли;
	
	Если ДисконтныеКартыУНФВызовСервера.СтарыйМеханизмСкидок(ДисконтнаяКарта) Тогда
		РассчитатьРучныеИАвтоматическиеСкидки();
	Иначе
		РассчитатьАвтоматическиеСкидки();
	КонецЕсли;
	
	ВыбранаДисконтнаяКартаДополнительноНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыбранаДисконтнаяКартаДополнительноНаСервере()
	
	// Данные и бизнес-логика.
	ЭтоБонуснаяКарта = ЗначениеЗаполнено(РаботаСБонусами.ПолучитьБонуснуюПрограмму(Объект.ДисконтнаяКарта));
	Если ЭтоБонуснаяКарта Тогда
		СтруктураДанных = РаботаСБонусами.ПолучитьДанныеБонуснойКарты(Объект.ДисконтнаяКарта, Объект.Дата);
		ОграничениеОплаты = РаботаСБонусами.ОпределитьОграничениеОплаты(Объект.ДисконтнаяКарта, СуммаДокумента);
		МожноСписатьБонусов = Мин(СтруктураДанных.Остаток, СуммаДокумента, ОграничениеОплаты);
	Иначе
		МожноСписатьБонусов = 0;
	КонецЕсли;
	
	// Представление данных.
	ПоказыватьОплатуБонусами = ЭтоБонуснаяКарта;
	Элементы.ГруппаБонусы.Видимость = ПоказыватьОплатуБонусами;
	ОбновитьКартинкуДисконтнойКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРучныеИАвтоматическиеСкидки()

	Скидка = ДисконтныеКартыУНФВызовСервера.ПолучитьПроцентСкидкиПоВидуСкидокНаценок(Объект.ВидСкидкиНаценки) + Объект.ПроцентСкидкиПоДисконтнойКарте;
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Скидка;
		
		ПараметрыРасчета = Новый Структура("СброситьФлагСкидкиРассчитаны", Истина);
		ПараметрыРасчета.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЦикла;
	
	// Пересчитаем автоматические скидки.
	РассчитатьАвтоматическиеСкидки();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкуДисконтнойКарты()
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Элементы.ДекорацияСчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.РМК_ДисконтнаяКартаВыбрана_МК;
	Иначе
		Элементы.ДекорацияСчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.РМК_СчитатьДисконтнуюКарту_МК;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьНаТерминал(Команда)
	
	Если Не ЗначениеЗаполнено(ВидКартыОплатаКартой) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните вид карты'"), , "ВидКартыОплатаКартой");
		Возврат;
	КонецЕсли;
	
	ОднаКарта_МК = Истина;
	ПробитьЧек = Истина;
	
	НастроитьВидимостьЭлементовПередачиДанныхНаЭТ(Истина, Ложь);
	
	ДобавитьОплатуКартой(ОднаКарта_МК, ПробитьЧек);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьЭлементовПередачиДанныхНаЭТ(ВидимостьДекорации, ВидимостьКнопки)
	
	Элементы.ДекорацияДанныеПереданыНаТерминал.Видимость = ВидимостьДекорации;
	Элементы.ПередатьНаТерминал.Видимость = ВидимостьКнопки;
	Элементы.ЭквайринговыйТерминал_МК.Доступность = ВидимостьКнопки;
	
КонецПроцедуры

// Процедура рассчитывает скидки по документу.
//
&НаКлиенте
Процедура РассчитатьАвтоматическиеСкидки()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Если Не Объект.ОперацияСДенежнымиСредствами Тогда
		Объект.СуммаДокумента = Объект.Запасы.Итог("Всего");
	КонецЕсли;
	СуммаДокумента = Объект.СуммаДокумента;
	НастроитьСуммуСкидкиНаКлиенте();
	
КонецПроцедуры

// Процедура рассчитывает скидки по документу.
//
&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	РозничныеПродажиСервер.РассчитатьСкидкиНаценкиНаСервере(ЭтотОбъект, СтруктураПараметры);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьБонусыНаКлиенте()
	
	Если Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РеквизитыБП = РаботаСБонусами.РеквизитыБонуснойПрограммы(Объект.ДисконтнаяКарта);
	
	Если РеквизитыБП.БонуснаяПрограмма.Пустая() Тогда
		Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РеквизитыБП.НеНачислятьПриОплатеБонусами Тогда
		Если РаботаСБонусами.ЕстьОплатаБонусами(Объект.БезналичнаяОплата) Тогда
			Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
				Объект.БонусныеБаллыКНачислению.Очистить();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("БонуснаяПрограмма", РеквизитыБП.БонуснаяПрограмма);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ДобавитьКарту_МК(Команда)
	пЭтоФормаОплатыРМК = Истина;
	РозничныеПродажиКлиент.ДобавитьОплату(ЭтотОбъект, "Карта", пЭтоФормаОплатыРМК);
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьСертификат_МК(Команда)
	РозничныеПродажиКлиент.ДобавитьОплату(ЭтотОбъект, "Сертификат");
КонецПроцедуры


&НаКлиенте
Процедура СписатьБаллы_МК(Команда)
	РозничныеПродажиКлиент.ДобавитьОплату(ЭтотОбъект, "Бонусы");
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьОплатуЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		ДобавитьКартуВТаблицуОплат_МК(Результат);
		
		Если Результат.Свойство("ЕстьОплатаБонусами") Тогда
			РаспределитьОплатуБонусамиНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьСуммы();
	
КонецПроцедуры


&НаКлиенте
Процедура СчитатьДисконтнуюКартуИДобавитьОплатуЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ВыбранаДисконтнаяКарта(Результат.ДисконтнаяКарта);
		ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.ФормаОплатыБонусами", Параметры.СтруктураПараметров, ЭтотОбъект,
			, , , Параметры.Оповещение);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВременнаяТаблицаКартВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РозничныеПродажиКлиент.РедактироватьОплату(ЭтотОбъект, Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ВременнаяТаблицаКартПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ВременнаяТаблицаКартПередУдалением(Элемент, Отказ)
	РозничныеПродажиКлиент.ПроверитьВозможностьУдаленияОплаты(Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ВременнаяТаблицаКартПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчитатьДокументНаКлиенте();
КонецПроцедуры


&НаКлиенте
Процедура РедактироватьОплатуЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Элементы.ВременнаяТаблицаКарт.ТекущиеДанные, Результат);
		
		Если Результат.Свойство("ЕстьОплатаБонусами") Тогда
			РаспределитьОплатуБонусамиНаСервере();
		КонецЕсли;
		
		ПересчитатьДокументНаКлиенте();
		
	ИначеЕсли Результат = "Удалить строку" Тогда
		
		//ВременнаяТаблицаКарт.Удалить(Элементы.ВременнаяТаблицаКарт.ТекущаяСтрока);
		//Записать();
		//ЗаписатьДокумент = Истина;
		//ПересчитатьДокументНаКлиенте();
		
		ОтменаОперацииПоПлатежнойКартеЗавершение(
			Новый Структура("Результат, ЭтоРМК_МК", Истина, Истина),
			Элементы.ВременнаяТаблицаКарт.ТекущиеДанные
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписатьБонусыПриИзменении(Элемент)
	
	Если СписатьБонусы И НЕ Объект.ДисконтнаяКарта.Пустая() Тогда
		ДанныеБонуснойКарты = Новый Структура("БонуснаяКарта, СуммаБонусов, ВидОплаты, ЕстьОплатаБонусами",
			Объект.ДисконтнаяКарта,
			МожноСписатьБонусов,
			ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.Бонусы"),
			Истина);
		ДобавитьКартуВТаблицуОплат_МК(ДанныеБонуснойКарты);
		РаспределитьОплатуБонусамиНаСервере();
		ПересчитатьСуммы();
	Иначе
		// Обнулим скидки и ...
		Для Каждого СтрокаЗапаса Из Объект.Запасы Цикл
			СтрокаЗапаса.СуммаСкидкиОплатыБонусом = 0;
			ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
			РозничныеПродажиКлиент.РассчитатьСуммуВСтрокеТабличнойЧасти(ЭтотОбъект, СтрокаЗапаса, ПараметрыРасчета);
		КонецЦикла;
		РассчитатьАвтоматическиеСкидки();
		
		// ... удалим строку с оплатой.
		МассивСтрокДляУдаления = Новый Массив;
		Для каждого СтрокаОплаты Из ВременнаяТаблицаКарт Цикл
			Если СтрокаОплаты.ПервыйВвод И СтрокаОплаты.СуммаБонусов > 0 Тогда
				МассивСтрокДляУдаления.Добавить(СтрокаОплаты);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекущаяСтрока Из МассивСтрокДляУдаления Цикл
			ВременнаяТаблицаКарт.Удалить(ТекущаяСтрока);
		КонецЦикла;
		
		ПересчитатьСуммы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСкидкиНаценкиПриИзменении(Элемент)
	
	РассчитатьРучныеИАвтоматическиеСкидки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьРучнуюСкидку(Команда)
	
	Элементы.ФормаПоказатьВсеРеквизитыШапки.Видимость = Истина;
	Элементы.ФормаПрименитьРучнуюСкидку.Видимость = Ложь;
	
	Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаВыборФормыОплатыМК;
	
	ОбновитьКартинкуВидаСкидки();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкуВидаСкидки()
	
	Если ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда
		Элементы.ДекорацияВыбратьВидСкидкиНаценки.Картинка = БиблиотекаКартинок.РМК_ВидСкидкиНаценкиВыбран_МК;
	Иначе
		Элементы.ДекорацияВыбратьВидСкидкиНаценки.Картинка = БиблиотекаКартинок.РМК_ВыбратьВидСкидкиНаценки_МК;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкуПредоплаты()
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		Элементы.ДекорацияВнестиПредоплату.Картинка = БиблиотекаКартинок.РМК_Предоплата_МК_вкл;
	Иначе
		Элементы.ДекорацияВнестиПредоплату.Картинка = БиблиотекаКартинок.РМК_Предоплата_МК_выкл;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВнестиПредоплатуНажатие(Элемент)
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		Объект.ОперацияСДенежнымиСредствами = Ложь;
		Объект.СуммаДокумента = Объект.Запасы.Итог("Сумма");
		СуммаДокумента = Объект.СуммаДокумента;
		Элементы.Контрагент.ОтметкаНезаполненного = Ложь;
		Элементы.Договор.ОтметкаНезаполненного = Ложь;
		ОбновитьКартинкуПредоплаты();
	Иначе
		Элементы.ГруппаПараметровПредоплаты.Видимость = Истина;
		Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаПараметровПредоплаты;
		Элементы.ФормаПоказатьВсеРеквизитыШапки.Видимость = Ложь;
		Элементы.ФормаПрименитьПредоплату.Видимость = Истина;
		СуммаПредоплаты_МКПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСчитатьДисконтнуюКартуНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СчитатьДисконтнуюКартуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.СчитываниеДисконтнойКарты", , ЭтаФорма, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыбратьВидСкидкиНаценкиНажатие(Элемент)
	
	ВидСкидкиДоИзменения = Объект.ВидСкидкиНаценки;
	Элементы.ГруппаРучнойСкидки.Видимость = Истина;
	Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаРучнойСкидки;
	Элементы.ФормаПоказатьВсеРеквизитыШапки.Видимость = Ложь;
	Элементы.ФормаПрименитьРучнуюСкидку.Видимость = Истина;
	
КонецПроцедуры

// ПодключаемоеОборудование
// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	// Поиск подарочного сертификата
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискСертификатаПоНомеруЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));
	
	#Если МобильныйКлиент Тогда
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
	ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискСертификатаПоНомеруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекНомер = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
	
	НуженВыборИзСписка = Ложь;
	
	Если Не ПустаяСтрока(ТекНомер) Тогда
		НуженВыборИзСписка = ВыполнитьПоискСертификатаПоНомеру(ТекНомер);
	КонецЕсли;
	
	Если НуженВыборИзСписка Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВыбранныйСертификат", ЭтаФорма);
		СтруктураПараметров = Новый Структура("Адрес", АдресВыбранногоСертификатаХранилище);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораСертификата", СтруктураПараметров, , , , ,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммуПогашенияСертификатовНаСервере()
	
	Для Каждого СтрокаОплаты Из ВременнаяТаблицаКарт Цикл
		Если СтрокаОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат Тогда
			Если СтрокаОплаты.ПодарочныйСертификат.ЧастичноеПогашение Тогда
				СтрокаОплаты.СуммаПогашенияСертификата = СтрокаОплаты.Сумма;
			ИначеЕсли СтрокаОплаты.ПодарочныйСертификат.ИспользоватьСерииНоменклатуры Тогда
				СтрокаОплаты.СуммаПогашенияСертификата = СтрокаОплаты.ОстатокСертификата;
			Иначе
				СтрокаОплаты.СуммаПогашенияСертификата = СтрокаОплаты.НоминалСертификата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НетЭквайринговыхТерминалов()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭквайринговыеТерминалы.Ссылка КАК ЭквайринговыйТерминал
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Касса = &Касса
	|	И НЕ ЭквайринговыеТерминалы.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Касса", КассаККМ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#Область Взаиморасчеты

&НаСервере
Процедура ВзаиморасчетыПриСозданииНаСервере()
	
	ИспользоватьПредоплату = ПолучитьФункциональнуюОпцию("ИспользоватьПредоплатуВЧекахККМ");
	Если Не ИспользоватьПредоплату Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаПредоплата", "Видимость", Ложь);
		Возврат;
	КонецЕсли;
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	ВидОперацииПомощника = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
	Если Объект.Ссылка.Пустая() ИЛИ Объект.СпособЗачетаПредоплаты.Пустая() Тогда
		// В заказе всегда ручной зачет предоплаты, т.к. не факт, что заказ стоит оплачивать, даже если он проведен.
		Объект.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	КонецЕсли;
	
	ВариантЗаполненияРасшифровки = РасчетыРаботаСФормамиВызовСервера.ПолучитьВариантЗаполненияРасшифровкиДляДокументаОтгрузки(Объект.Проведен, Объект.СпособЗачетаПредоплаты);
	ИстинаПриСозданииНаСервере = Истина;
	ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ИстинаПриСозданииНаСервере);
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьРеквизитыРасчетов(ЭтотОбъект, СтруктураПараметровРасчетов, Неопределено, Истина);
	
	Массив = Новый Массив();
	Массив.Добавить(Тип("ДокументСсылка.ЧекККМ"));
	
	ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
	Элементы.ПредоплатаДокумент.ОграничениеТипа = ДопустимыеТипы;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Если (ОбщегоНазначения.ЭтоМобильныйКлиент() ИЛИ НЕ Элементы.СтраницаПредоплата.Видимость) Тогда
		Элементы.ОстатокВзаиморасчетовСтраницаОплата.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ОстатокВзаиморасчетовСтраницаОплата.Видимость = НЕ Объект.Контрагент.Ссылка.Пустая();
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетовСтраницаОплата.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(
		Объект.Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ПриСозданииНаСервере = Ложь)
	РасчетыРаботаСФормамиВызовСервера.ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ЭтотОбъект, ПриСозданииНаСервере);
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияРасшифровкиПриИзменении(Элемент)
	ВариантЗаполненияРасшифровкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотра(Команда)
	ЗаполнитьТаблицуПросмотраНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПросмотраНаСервере()
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьТаблицуПросмотраНаСервере(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСуммуПлатежаПослеРаспределения(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ДеревоРаспределенияСуммыПлатежа") Тогда
		
		РасчетыРаботаСФормамиКлиент.РаспределитьСуммуПлатежаПослеРаспределения(ЭтотОбъект, РезультатЗакрытия, ДопПараметры);
		
		РаспределитьСуммуПлатежаПослеРаспределенияЗавершение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммуПлатежаПослеРаспределенияЗавершение()
	
	РасчетыРаботаСФормамиВызовСервера.РаспределитьСуммуПлатежаПослеРаспределенияЗавершение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПодбор(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстВопроса = НСтр("ru = 'Для зачета предоплаты необходимо указать контрагента'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОКонтрагенте", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ТекстВопроса = НСтр("ru = 'Для зачета предоплаты необходимо указать договор контрагента'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОКонтрагенте", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	ПараметрыПодбора = Новый Структура(
		"АдресПредоплатаВХранилище,
		|Подбор,
		|ЕстьЗаказ,
		|ЗаказВШапке,
		|Компания,
		|Заказ,
		|Дата,
		|Ссылка,
		|Контрагент,
		|Договор,
		|Курс,
		|Кратность,
		|ВалютаДокумента,
		|СуммаДокумента",
		АдресПредоплатаВХранилище, // АдресПредоплатаВХранилище
		Истина, // Подбор
		ЗначениеЗаполнено(Объект.Заказ), // ЕстьЗаказ
		Истина, // ЗаказВШапке
		Компания, // Компания
		Объект.Заказ, // Заказ
		Объект.Дата, // Дата
		Объект.Ссылка, // Ссылка
		Объект.Контрагент, // Контрагент
		Объект.Договор, // Договор
		Объект.Курс, // Курс
		Объект.Кратность, // Кратность
		Объект.ВалютаДокумента, // ВалютаДокумента
		Объект.Запасы.Итог("Всего") // СуммаДокумента
	);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПокупателей", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение", ЭтотОбъект,
		Новый Структура("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОКонтрагенте(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ПолученоНаличными = 0;
		Если ЭтоМобильныйКлиент Тогда
			Элементы.ГруппаОплата.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаВыборФормыОплатыМК;
			Элементы.ГруппаВыборФормыОплатыМК.Видимость = Истина;
			Элементы.ГруппаПодвал_МК.Видимость = Ложь;
			Если Объект.Предоплата.Количество() > 0 ИЛИ ВременнаяТаблицаКарт.Количество() > 0 Тогда
				Элементы.ОплатитьКартой.Доступность = Ложь;
				Элементы.ОплатитьНаличными.Доступность = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаОплата.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			Элементы.ГруппаОплата.ТекущаяСтраница = Элементы.ГруппаВыборФормыОплаты;
			Элементы.ГруппаВыборФормыОплаты.Видимость = Истина;
			Если Объект.Предоплата.Количество() > 0 ИЛИ ВременнаяТаблицаКарт.Количество() > 0 Тогда
				Элементы.ОплатитьКартой1.Доступность = Ложь;
				Элементы.ОплатитьНаличными1.Доступность = Ложь;
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОплатитьНаличными1", "КнопкаПоУмолчанию", Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
	
	КодВозврата = Результат;
	Если КодВозврата = КодВозвратаДиалога.OK Тогда
		ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
		ПересчитатьСуммы();
	КонецЕсли;
	
КонецПроцедуры // РедактироватьЗачетПредоплаты()

&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Объект.Предоплата.Загрузить(ТаблицаДляЗагрузки);
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

&НаСервере
Функция ПоместитьПредоплатаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Предоплата.Выгрузить(),
		УникальныйИдентификатор
	);
	
КонецФункции

&НаКлиенте
Процедура ТаблицаДляПросмотраОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	РасчетыРаботаСФормамиКлиент.ТаблицаДляПросмотраОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка, СтруктураПараметровРасчетов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ОбработкаНавигационнойСсылки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
			?(Объект.Курс = 0,
			1,
			Объект.Курс),
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
			?(Объект.Кратность = 0,
			1,
			Объект.Кратность),
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		Объект.Курс,
		СтрокаТабличнойЧасти.Кратность,
		Объект.Кратность
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * Объект.Курс
	);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	УстановитьВидимостьДоговора();
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаКлиенте
Процедура СуммаПредоплаты_МКПриИзменении(Элемент)
	
	Если Объект.Запасы.Итог("Сумма") = 0 Тогда
		ПроцентПредоплаты = 100;
	Иначе
		ПроцентПредоплаты = Объект.СуммаДокумента/Объект.Запасы.Итог("Сумма")*100;
	КонецЕсли;
	
	СуммаДокумента = Объект.СуммаДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентПредоплатыПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.Запасы.Итог("Сумма") * ПроцентПредоплаты/100;
	
	СуммаДокумента = Объект.СуммаДокумента;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ВестиРасчетыПоДоговорам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ВестиРасчетыПоДоговорам");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Договор1",
			"Видимость",
			ВестиРасчетыПоДоговорам);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Договор1",
			"Видимость",
			Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти