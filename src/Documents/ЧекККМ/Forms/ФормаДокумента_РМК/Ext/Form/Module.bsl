#Область ОписаниеПеременных

&НаКлиенте
Перем Дисплеи;

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура ОбработатьИзменениеСтруктурнойЕдиницыНаСервере()
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	// Наборы
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.НоменклатураНабора", Справочники.Номенклатура.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыНоменклатура,ЗапасыХарактеристика,ЗапасыКоличество,ЗапасыЕдиницаИзмерения");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	// Конец Наборы

	// Скидки	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.ПроцентСкидкиНаценки", 100);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.СуммаСкидкиНаценки", Новый ПолеКомпоновкиДанных("Объект.Запасы.Сумма"),ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПроцентСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СуммаСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "сумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПроцентАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СуммаАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "сумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	// Конец Скидки
	
	// Характеристики и партии
	ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристикИПартий();
	
	// Остатки и резервы
	
	ПолеДляОформления = ?(Не ЭтоМобильныйКлиент, "ЗапасыДоступно", "ЗапасыМКДоступно");
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Доступно", Новый ПолеКомпоновкиДанных("Объект.Запасы.Количество")
	, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ПолеДляОформления);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Зеленый);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Доступно", Новый ПолеКомпоновкиДанных("Объект.Запасы.Количество")
	, ВидСравненияКомпоновкиДанных.Меньше);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Доступно", 0, ВидСравненияКомпоновкиДанных.Больше);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ПолеДляОформления);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветТекстаПредупреждениеОбОкончанииДоговора);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Доступно", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ПолеДляОформления);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "0");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", WebЦвета.Красный);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ТипНоменклатурыЗапас", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ПолеДляОформления);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "");
	
	// Ячейки
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ЯчейкаДоступна", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЯчейка");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЯчейкаДляРежимаОстатки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "");
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	// Доступность колонки СтруктурнаяЕдиница
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ТипНоменклатурыЗапас", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСтруктурнаяЕдиница,ЗапасыЯчейка,ЗапасыСтруктурнаяЕдиницаДляРежимаОстатки,ЗапасыЯчейкаДляРежимаОстатки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Для товаров>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	// Минимальные цены
	ЦенообразованиеСервер.УстановитьУсловноеОформлениеМинимальнойЦены(УсловноеОформление, "Запасы", ?(КэшЗначений.Свойство("ИспользоватьМинимальныеЦены"), КэшЗначений.ИспользоватьМинимальныеЦены, Ложь));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	// Наборы
	Элементы.ЗапасыКартинкаНабора.Видимость			= Ложь;
	Для каждого Стр Из Объект.Запасы Цикл
		Если Стр.КартинкаНабора>0 Тогда
			Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	// Конец Наборы
	
КонецПроцедуры

// Процедура инициализирует параметры нового чека.
//
&НаСервере
Процедура ИнициализироватьНовыйЧек(ВыдатьОкноУспешноПробит = Ложь)
	
	СсылкаНаЧек_МК = Объект.Ссылка;
	
	НовыйЧек = Документы.ЧекККМ.СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(НовыйЧек, Объект,, "Запасы, БезналичнаяОплата, СкидкиНаценки, Номер, Проведен, ПометкаУдаления, Заказ");
	Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены) Тогда
		МассивРеквизитов = Новый Массив;
		ПолучитьСтрокуРеквизитыИсключения(МассивРеквизитов);
		
		Для Каждого ЗначениеМассива Из МассивРеквизитов Цикл
			НовыйЧек[ЗначениеМассива] = СтруктураСостояниеКассовойСмены[ЗначениеМассива];
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		РазблокироватьДанныеДляРедактирования(Объект.Ссылка, УникальныйИдентификатор);
	Исключение
		//
	КонецПопытки;
	
	ЗначениеВДанныеФормы(НовыйЧек, Объект);
	
	УстановитьОтборОтложенныхЧековПоСсылке();
	
	Объект.СуммаДокумента = 0;
	ОбновитьНадписьКнопкиКОплатеНаСервере();
	
	Объект.ВидСкидкиНаценки = Неопределено;
	Объект.ДисконтнаяКарта = Неопределено;
	Объект.Контрагент = Неопределено;
	Объект.Договор = Неопределено;
	Объект.ПроцентСкидкиПоДисконтнойКарте = 0;
	Объект.СкидкиРассчитаны = Ложь;
	СуммаСкидки = 0;
	
	Объект.ПолученоНаличными = 0;
	ПолученоПлатежнымиКартами = 0;
	
	СуммаЧекаБезСкидки = 0;
	СуммаСдачи = 0;
	
	Объект.Запасы.Очистить();
	Объект.БезналичнаяОплата.Очистить();
	Объект.СкидкиНаценки.Очистить();
	
	Объект.НомерЧекаККМ = 0;
	Объект.Архивный = Ложь;
	Объект.Статус = Перечисления.СтатусыЧековККМ.ЧекНеПробит;
	Объект.Телефон = "";
	Объект.АдресЭП = "";
	Объект.Комментарий = "";
	
	УстановленСерыйЦвет = Истина;
	Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьСерый;
	
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(ПолучитьСтруктуруНадписиЦеныИВалютаНаСервере());
	
	Если ЭтоМобильныйКлиент Тогда
		Если ВыдатьОкноУспешноПробит Тогда
			Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница = Элементы.ГруппаФормаЗавершенияПродажи;
			Элементы.ПечатьТоварногоЧека_МК.Видимость = Истина;
		Иначе
			Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница = Элементы.ГруппаПродажаМК;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьНовыйЧек()

// Заполняет суммы скидок на клиенте.
//
&НаКлиенте
Процедура ЗаполнитьСуммыСкидок()
	
	Для каждого ТекСтрока Из Объект.Запасы Цикл
		СуммаБезСкидки = ТекСтрока.Цена * ТекСтрока.Количество;
		ОбщаяСкидка = СуммаБезСкидки - ТекСтрока.Сумма;
		СуммаРучнойСкидкиНаценки = ?((ОбщаяСкидка - ТекСтрока.СуммаАвтоматическойСкидки) > 0, ОбщаяСкидка - ТекСтрока.СуммаАвтоматическойСкидки, 0);
		
		ТекСтрока.СуммаСкидкиНаценки = СуммаРучнойСкидкиНаценки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура пересчитывает документ на клиенте.
//
&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте(ПоказатьСтраницуДанныеПоСтроке = Истина)
	
	Если Не Объект.ОперацияСДенежнымиСредствами Тогда
		Объект.СуммаДокумента = Объект.Запасы.Итог("Всего");
	ИначеЕсли Объект.Запасы.Количество() Тогда
		Объект.СуммаДокумента = Мин(Объект.СуммаДокумента, Объект.Запасы.Итог("Всего"));
	КонецЕсли;
	
	Оплачено = Объект.ПолученоНаличными + Объект.БезналичнаяОплата.Итог("Сумма") + Объект.Предоплата.Итог("СуммаРасчетов");
	СуммаСдачи = ?(Оплачено = 0, 0, Оплачено - Объект.СуммаДокумента);
	
	СуммаСкидки = Объект.Запасы.Итог("СуммаСкидкиНаценки") + Объект.Запасы.Итог("СуммаАвтоматическойСкидки");
	СуммаЧекаБезСкидки = Объект.СуммаДокумента + СуммаСкидки;	
	
	Если ПоказатьСтраницуДанныеПоСтроке И
		Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница <> Элементы.СтраницаДанныеПоСтроке Тогда
		Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница = Элементы.СтраницаДанныеПоСтроке;
	КонецЕсли;
	
	ОбновитьНадписьКнопкиКОплатеНаКлиенте();
	ВывестиИнформациюНаДисплейПокупателя();
	
КонецПроцедуры // ПересчитатьДокументНаКлиенте()

&НаКлиенте
Процедура ОбновитьНадписьКнопкиКОплатеНаКлиенте()
	
	Элементы.КнопкаКОплате.Заголовок = НСтр("ru = 'К оплате: '") + Формат(Объект.СуммаДокумента, "ЧДЦ=2; ЧН=0.00");
	Если Объект.СуммаДокумента = 0 Тогда
		Элементы.КнопкаКОплате.ЦветФона = Новый Цвет;
	Иначе
		Элементы.КнопкаКОплате.ЦветФона = WebЦвета.Золотой;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьКнопкиКОплатеНаСервере()
	
	Элементы.КнопкаКОплате.Заголовок = НСтр("ru = 'К оплате: '") + Формат(Объект.СуммаДокумента, "ЧДЦ=2; ЧН=0.00");
	
КонецПроцедуры

// Процедура заполнения списка видов платежных карт.
//
&НаСервере
Процедура ПолучитьСписокВыбораВидовПлатежныхКарт()
	
	МассивВидовПлатежныхКарт = Справочники.ЭквайринговыеТерминалы.ВидыПлатежныхКарт(Объект.ЭквайринговыйТерминал);
	
	Элементы.ОплатаПлатежнымиКартамиВидПлатежнойКарты.СписокВыбора.ЗагрузитьЗначения(МассивВидовПлатежныхКарт);
	
КонецПроцедуры // ПолучитьСписокВыбораВидовПлатежныхКарт()

// Получает ссылки на внешнее оборудование.
//
&НаСервере
Процедура ПолучитьСсылкиНаОборудование()

	ФискальныйРегистратор = ?(
		ИспользоватьПодключаемоеОборудование // Проверка на включенную ФО "Использовать ПО"
	  И ЗначениеЗаполнено(Объект.КассаККМ)
	  И ЗначениеЗаполнено(Объект.КассаККМ.ПодключаемоеОборудование),
	  Объект.КассаККМ.ПодключаемоеОборудование.Ссылка,
	  Справочники.ПодключаемоеОборудование.ПустаяСсылка()
	);

	ЭквайринговыйТерминал = ?(
		ИспользоватьПодключаемоеОборудование
	  И ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал)
	  И ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал.ПодключаемоеОборудование)
	  И НЕ Объект.ЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования,
	  Объект.ЭквайринговыйТерминал.ПодключаемоеОборудование,
	  Справочники.ПодключаемоеОборудование.ПустаяСсылка()
	);
	
КонецПроцедуры // ПолучитьСсылкиНаОборудование()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения
// организации.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС()
	
	Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
	
	ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			КонецЕсли;
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(
				Объект.СуммаВключаетНДС,
				СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
				СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100
			);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Наборы
	Если НЕ СтруктураДанные.Свойство("ЕдиницаИзмерения") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	КонецЕсли; 
	Если НЕ СтруктураДанные.Свойство("Коэффициент") Тогда
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли; 
	КонецЕсли;
	// Конец Наборы
	
	СтруктураДанные.Вставить("ЭтоЗапас", (СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
								ИЛИ (СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")));
	
	СтруктураДанные.Вставить(
		"Содержание",
		ПечатьДокументовУНФ.ПредставлениеНоменклатурыДляПечати(
			?(ЗначениеЗаполнено(СтруктураДанные.Номенклатура.НаименованиеПолное),
			СтруктураДанные.Номенклатура.НаименованиеПолное, СтруктураДанные.Номенклатура.Наименование),
			СтруктураДанные.Характеристика, СтруктураДанные.Номенклатура.Артикул)
	);
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
	
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	Если СтруктураДанные.Свойство("Цена") И ЗначениеЗаполнено(СтруктураДанные.Цена) Тогда
		// При подборе наборов расчет цены не требуется - используется цена, указанная в подборе
	ИначеЕсли СтруктураДанные.Свойство("ВидЦен") Тогда
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;       
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));

	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
		
	Если СтруктураДанные.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанные.ДисконтнаяКарта) Тогда
		ТекПроцент = СтруктураДанные.ПроцентСкидкиНаценки;
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", ТекПроцент + СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
	КонецЕсли;
	
	СтруктураДанные.Вставить("НеобходимостьВводаАкцизнойМарки", СтруктураДанные.Номенклатура.ВидАлкогольнойПродукции.Маркируемый);
	// ++( ГосИС 1.1.1
	//СтруктураДанные.Вставить("НеобходимостьВводаКодаМаркировки", СтруктураДанные.Номенклатура.ТабачнаяПродукция ИЛИ СтруктураДанные.Номенклатура.ШиныИПокрышки);
	СтруктураДанные.Вставить("НеобходимостьВводаКодаМаркировки", СтруктураДанные.Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табак ИЛИ СтруктураДанные.Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Шины);
	//)++
	
	Если Не СтруктураДанные.Свойство("Склад") Тогда
		СтруктураДанные.Вставить("Склад", СтруктураДанные.Номенклатура.Склад);
		СтруктураДанные.Вставить("Ячейка", СтруктураДанные.Номенклатура.Ячейка);
	КонецЕсли;
	
	// Наборы
	НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	// Конец Наборы
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		
		Если Не СтруктураДанные.Свойство("ВидОперации")
			Тогда
			ВидОперации = Неопределено
		Иначе
			ВидОперации = СтруктураДанные.ВидОперации
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("СтатусПартии")
			Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации")
				Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	// ИнтеграцияГосИС
	ИнтеграцияИСМПУНФ.ЗаполнитьСлужебныеРеквизитыИСМП(СтруктураДанные);
	// Конец ИнтеграцияГосИС
	
	// Агентские платежи
	АгентскиеПлатежиУНФ.ЗаполнитьДоговорПлатежногоАгентаВСтроке(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура заполняет данные при изменении номенклатуры.
//
&НаКлиенте
Процедура НоменклатураПриИзменении(СтрокаТабличнойЧасти)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта",  Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	// Конец ДисконтныеКарты
		
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Склад") Тогда
		Если СписокДоступныхСкладов.НайтиПоЗначению(СтруктураДанные.Склад) = Неопределено Тогда
			СтруктураДанные.Склад = Объект.СтруктурнаяЕдиница;
			СтруктураДанные.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	СтруктураДанные.Вставить("СписокДоступныхСкладов", СписокДоступныхСкладов);
	
	Если СтруктураДанные.ЭтоНабор И НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
		
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные);
		// Конец Наборы
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
	
		ПересчитатьДокументНаКлиенте();
		
	Иначе
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Количество = 1;
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки = СтруктураДанные.НеобходимостьВводаАкцизнойМарки;
		СтрокаТабличнойЧасти.НеобходимостьВводаКодаМаркировки = СтруктураДанные.НеобходимостьВводаКодаМаркировки;
		// Наборы
		СтрокаТабличнойЧасти.ЭтоНабор = СтруктураДанные.ЭтоНабор;
		
		//Характеристики
		СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
		
		СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
				СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		//Конец Характеристики
		
		//Партии
		СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		Если СтруктураДанные.ИспользоватьПартии Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
				СтруктураВыбораНоменклатуры.Партия = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
			КонецЕсли;
		КонецЕсли;
		// Конец Партии
		
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = СтруктураДанные.Склад;
		СтрокаТабличнойЧасти.Ячейка = СтруктураДанные.Ячейка;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		
		ОткрытьВводАкцизнойМарки(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
	ОбновитьДанныеОстатковИПризнакиХарактеристикИПартий();
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	// ИнтеграцияГосИС
	Если ФОВестиУчетМаркируемойПродукцииИСМП Тогда
		ИнтеграцияИСМПУНФКлиент.ЗаполнитьСлужебныеРеквизитыИСМПВСтрокеТЧ(СтрокаТабличнойЧасти, СтруктураДанные);
	КонецЕсли;
	КэшироватьТекущуюСтроку(СтрокаТабличнойЧасти);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", СтрокаТабличнойЧасти);
	СобытияФормИСКлиент.ПриИзмененииЭлемента(ЭтаФорма, "Запасы", ДополнительныеПараметры);
	Если ДополнительныеПараметры.Свойство("ТребуетсяСерверныйВызов") Тогда
		ПодключитьОбработчикОжидания("ЗапасыПриОкончанииРедактированияДляСерверногоВызова", 0.5, Истина);
	КонецЕсли;
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры // НоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли;
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));

	// Наборы
	НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	// Конец Наборы
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, ПараметрыРасчета = Неопределено, УстановитьОписание = Истина)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	Если ПараметрыРасчета=Неопределено Тогда
		ПараметрыРасчета = Новый Структура("СброситьФлагСкидкиРассчитаны",Истина);
	КонецЕсли;	 
	ПараметрыРасчета.Вставить("ИспользоватьМинимальныеЦены", КэшЗначений.ИспользоватьМинимальныеЦены);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС);
	ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(ПараметрыРасчета);

	// АвтоматическиеСкидки.
	ТребуетсяПересчет = СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
	
	// РаспределениеПродаж
	ЗапретПересчетаСкидок = Ложь;
	
	// Если была изменена картинка, то фокус уходит из ТЧ и процедура ПересчитатьДокументНаКлиенте() не вызывается.
	Если ТребуетсяПересчет Тогда
		ПересчитатьДокументНаКлиенте();
		ДокументПересчитанНаКлиенте = Истина;
	Иначе
		ДокументПересчитанНаКлиенте = Ложь;
	КонецЕсли;
	// Конец АвтоматическиеСкидки

	// РМК
	Если УстановитьОписание Тогда
		УстановитьОписаниеДляСтрокиТЧЗапасы(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	// Серии номенклатуры
	Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено Тогда
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	НоваяСтрока = Неопределено;
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗагрузки.Номенклатура, "ТипНоменклатуры, Вес, Объем, ЭтоНабор, СпособРасчетаЦеныНабора");
		
		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) И ЗначенияРеквизитов.ЭтоНабор Тогда
			
			// Наборы
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
			СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", СтрокаЗагрузки.ЕдиницаИзмерения);
			СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
			Если ЗначениеЗаполнено(НоваяСтрока.Цена) 
				И ЗначенияРеквизитов.СпособРасчетаЦеныНабора <> Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих Тогда
				СтруктураДанныеНоменклатуры.Вставить("Цена", НоваяСтрока.Цена);
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
				СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
				СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
				СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
				СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
			КонецЕсли;
			
			// ДисконтныеКарты
			СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
			СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
			// Конец ДисконтныеКарты 
			
			ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);
			
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
			Если СтруктураДанные.Свойство("Склад") Тогда
				Если СписокДоступныхСкладов.НайтиПоЗначению(СтруктураДанные.Склад) = Неопределено Тогда
					СтруктураДанные.Склад = Объект.СтруктурнаяЕдиница;
					СтруктураДанные.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
				КонецЕсли;
			КонецЕсли;
			СтруктураДанные.Вставить("СписокДоступныхСкладов", СписокДоступныхСкладов);
			
			ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, СтруктураДанные);
			НоваяСтрока = Неопределено;
			
			ЗаполнитьПризнакиИспользованияХарактеристик();
			
			Продолжить;
			// Конец Наборы
			
		Иначе
			
			НоваяСтрока.ТипНоменклатурыЗапас = (ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
												ИЛИ (ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
			НоваяСтрока.СуммаСкидкиНаценки = (НоваяСтрока.Количество * НоваяСтрока.Цена) - НоваяСтрока.Сумма;
			НоваяСтрока.НоменклатураХарактеристикаИПартия = СокрЛП(НоваяСтрока.Номенклатура.Наименование)+?(НоваяСтрока.Характеристика.Пустая(), "", ". "+НоваяСтрока.Характеристика)+?(НоваяСтрока.Партия.Пустая(), "", ". "+НоваяСтрока.Партия);
			Если НоваяСтрока.СуммаСкидкиНаценки <> 0 Тогда
				ПроцентСкидки = Формат(НоваяСтрока.СуммаСкидкиНаценки * 100 / (НоваяСтрока.Количество * НоваяСтрока.Цена), "ЧДЦ=2");
				ТекстСкидки = ?(НоваяСтрока.СуммаСкидкиНаценки > 0, " - "+НоваяСтрока.СуммаСкидкиНаценки, " + "+(-НоваяСтрока.СуммаСкидкиНаценки))+" "+Объект.ВалютаДокумента
							  +" ("+?(НоваяСтрока.СуммаСкидкиНаценки > 0, " - "+ПроцентСкидки+"%)", " + "+(-ПроцентСкидки)+"%)");
			Иначе
				ТекстСкидки = "";
			КонецЕсли;
			НоваяСтрока.ДанныеПоСтроке = ""+НоваяСтрока.Цена+" "+Объект.ВалютаДокумента+" Х "+НоваяСтрока.Количество+" "+НоваяСтрока.ЕдиницаИзмерения+ТекстСкидки+" = "+НоваяСтрока.Сумма+" "+Объект.ВалютаДокумента;
			
			Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки
				И ЗначениеЗаполнено(СтрокаЗагрузки.КодАкцизнойМарки) Тогда
				ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
				
				СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
				СтрокаАкцизнаяМарка.КлючСвязи = НоваяСтрока.КлючСвязи;
				СтрокаАкцизнаяМарка.КодАкцизнойМарки = СтрокаЗагрузки.КодАкцизнойМарки;
				
				Если НЕ ЗначениеЗаполнено(СтрокаАкцизнаяМарка.АкцизнаяМарка) Тогда
					СтрокаАкцизнаяМарка.АкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", СтрокаАкцизнаяМарка.КодАкцизнойМарки);
				КонецЕсли;
				
				НоваяСтрока.СтатусПроверкиГосИС = ?(ЗначениеЗаполнено(СтрокаАкцизнаяМарка.КодАкцизнойМарки), 1, 2);
			КонецЕсли;
			
			//Характеристики
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
			СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			
			СтатусПартии = Новый СписокЗначений;
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
			СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
			
			СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
			
			СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);

			ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);
			
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
			
			Если НоваяСтрока.Свойство("СтруктурнаяЕдиница") Тогда
				Если СписокДоступныхСкладов.НайтиПоЗначению(НоваяСтрока.СтруктурнаяЕдиница) = Неопределено Тогда
					НоваяСтрока.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
					НоваяСтрока.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
			НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
			НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
			
			Если СтруктураДанные.ИспользоватьХарактеристики
				Тогда
				НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
			// Конец Характеристики
			
			//Партии
			НоваяСтрока.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
			НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
			
			НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, СтруктураДанные.Партия);
			// Конец Партии
			
			НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
			
			// ИнтеграцияГосИС
			Если ФОВестиУчетМаркируемойПродукцииИСМП Тогда
				ИнтеграцияИСМПУНФ.ЗаполнитьСлужебныеРеквизитыИСМПВСтрокеТЧ(НоваяСтрока);
			КонецЕсли;
			// Конец ИнтеграцияГосИС
			
			//Агентские платежи
			Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
				НоваяСтрока.ДоговорПлатежногоАгента = СтруктураДанные.ДоговорКонтрагента;
				НоваяСтрока.ДанныеАгентскогоДоговора = СтруктураДанные.ДанныеАгентскогоДоговора;
				АгентскиеПлатежиУНФКлиентСервер.ВыделитьАгентскоеВознаграждениеВТаблице(Объект, НоваяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	
	// АвтоматическиеСкидки
	Если ТаблицаДляЗагрузки.Количество() > 0 Тогда
		СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
		ОбновитьКартинкуДисконтнойКарты();
	КонецЕсли;

	ПоказатьСкрытьСдачуНаСервере(Ложь, Истина);
	
	Если НоваяСтрока <> Неопределено Тогда
		Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Запасы", Новый Структура);
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТолькоПросмотр", 		  ЭтотОбъект.ТолькоПросмотр);
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	  Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость", Объект.НДСВключатьВСтоимость);
	СтруктураПараметров.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
	СтруктураПараметров.Вставить("Организация",			  Компания);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("ДоступностьВалютыДокумента", Ложь);
	СтруктураПараметров.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураПараметров.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
	СтруктураПараметров.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	
	ЦенообразованиеКлиент.ДополнитьСтруктуруВызоваФормыЦеныИВалютыСтруктурнойЕдиницей(Объект, Объект.Запасы, Элементы.Запасы.ТекущиеДанные, СтруктураПараметров);

	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
// Процедура-обработчик результата открытия формы "Цены и валюты"
//
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	// 3. Перезаполняем табличную часть "Затраты" если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура")
	   И РезультатЗакрытия.БылиВнесеныИзменения Тогда
		
		Объект.ВидЦен = РезультатЗакрытия.ВидЦен;
		Объект.ВидСкидкиНаценки = РезультатЗакрытия.ВидСкидки;
		
		// ДисконтныеКарты
		// В чеках не проверяем контрагента, т.к. все продажи обезличенные.
		Объект.ДисконтнаяКарта = РезультатЗакрытия.ДисконтнаяКарта;
		
		Если ЗначениеЗаполнено(РезультатЗакрытия.ДисконтнаяКарта) Тогда
			КонтрагентИзменился = РозничныеПродажиКлиент.ВыбранаДисконтнаяКарта(ЭтотОбъект, РезультатЗакрытия.ДисконтнаяКарта);
			Если КонтрагентИзменился Тогда
				КонтрагентПриИзменении(Элементы.Контрагент);
			КонецЕсли;
		КонецЕсли;
		
		Объект.ДисконтнаяКарта = РезультатЗакрытия.ДисконтнаяКарта;
		Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатЗакрытия.ПроцентСкидкиПоДисконтнойКарте;
		
		ОбновитьКартинкуДисконтнойКарты();
		// Конец ДисконтныеКарты
		
		Объект.НалогообложениеНДС = РезультатЗакрытия.НалогообложениеНДС;
		Объект.СпециальныйНалоговыйРежим = РезультатЗакрытия.СпециальныйНалоговыйРежим;
		Объект.СуммаВключаетНДС = РезультатЗакрытия.СуммаВключаетНДС;
		Объект.НДСВключатьВСтоимость = РезультатЗакрытия.НДСВключатьВСтоимость;
		
		// Пересчитываем цены по виду цен.
		Если РезультатЗакрытия.ПерезаполнитьЦены Тогда
			ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтаФорма, "Запасы", Истина);
			ЗаполнитьСуммыСкидок();
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			  И РезультатЗакрытия.ПересчитатьЦены Тогда
			ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Запасы", РезультатЗакрытия.КурсПересчетаЦен);
			ЗаполнитьСуммыСкидок();
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если РезультатЗакрытия.НалогообложениеНДС <> РезультатЗакрытия.ПредНалогообложениеНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
			ЗаполнитьСуммыСкидок();
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И НЕ РезультатЗакрытия.СуммаВключаетНДС = РезультатЗакрытия.ПредСуммаВключаетНДС Тогда
			ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Запасы");
			ЗаполнитьСуммыСкидок();
		КонецЕсли;
		
		// ДисконтныеКарты
		Если РезультатЗакрытия.ПерезаполнитьСкидки И НЕ РезультатЗакрытия.ПерезаполнитьЦены Тогда
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтаФорма, "Запасы");
			ЗаполнитьСуммыСкидок();
		КонецЕсли;
		// Конец ДисконтныеКарты
		
		// АвтоматическиеСкидки
		Если РезультатЗакрытия.ПерезаполнитьСкидки ИЛИ РезультатЗакрытия.ПерезаполнитьЦены ИЛИ РезультатЗакрытия.ПересчитатьЦены Тогда
			СброситьФлагСкидкиРассчитаныКлиент("ПерезаполнениеПоДаннымФормыЦеныИВалюта");
		КонецЕсли;
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(ПолучитьСтруктуруНадписиЦеныИВалютаНаКлиенте());
	
	// Обновим подвал документа
	ПересчитатьДокументНаКлиенте();
	
	// Обновим надписи для всех строк ТЧ Запасы.
	ЗаполнитьОписаниеДляТЧЗапасыНаКлиенте();
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуСвойстваСтруктурыРеквизитов()
	
	СтрокаСвойств = "ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте";
	Возврат СтрокаСвойств;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруНадписиЦеныИВалютаНаКлиенте()
	
	СтруктураНадписи = Новый Структура(ПолучитьСтрокуСвойстваСтруктурыРеквизитов(),
		Объект.ВидЦен,
		Объект.ВидСкидкиНаценки,
		Объект.ВалютаДокумента,
		Объект.ВалютаДокумента,
		Курс,
		КурсНациональнаяВалюта,
		Объект.СуммаВключаетНДС,
		УчетВалютныхОпераций,
		Объект.НалогообложениеНДС,
		Объект.СпециальныйНалоговыйРежим,
		Объект.ДисконтнаяКарта,
		Объект.ПроцентСкидкиПоДисконтнойКарте)
	;
	
	Возврат СтруктураНадписи;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруНадписиЦеныИВалютаНаСервере()
	
	СтруктураНадписи = Новый Структура(ПолучитьСтрокуСвойстваСтруктурыРеквизитов(),
		Объект.ВидЦен,
		Объект.ВидСкидкиНаценки,
		Объект.ВалютаДокумента,
		Объект.ВалютаДокумента,
		Курс,
		КурсНациональнаяВалюта,
		Объект.СуммаВключаетНДС,
		УчетВалютныхОпераций,
		Объект.НалогообложениеНДС,
		Объект.СпециальныйНалоговыйРежим,
		Объект.ДисконтнаяКарта,
		Объект.ПроцентСкидкиПоДисконтнойКарте)
	;
	
	Возврат СтруктураНадписи;
	
КонецФункции

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
		КонецЕсли;
	КонецЕсли;
	
	// Вид цен.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦен%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидЦен%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(СтруктураНадписи.ВидЦен)));
	КонецЕсли;
	
	// Вид скидки наценки.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидСкидки) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидСкидкиНаценки%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидСкидкиНаценки%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидСкидкиНаценки%", СокрЛП(Строка(СтруктураНадписи.ВидСкидки)));
	КонецЕсли;
	
	// Дисконтная карта.
	Если ЗначениеЗаполнено(СтруктураНадписи.ДисконтнаяКарта) И ДисконтныеКартыУНФВызовСервера.СтарыйМеханизмСкидок(СтруктураНадписи.ДисконтнаяКарта) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ДисконтнаяКарта%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ДисконтнаяКарта%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ДисконтнаяКарта%", Строка(СтруктураНадписи.ПроцентСкидкиПоДисконтнойКарте)+"% по карте"); //СокрЛП(Строка(СтруктураНадписи.ДисконтнаяКарта)));
	КонецЕсли;	
	
	// Налогообложение НДС.
	Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %НалогообложениеНДС%'");
		КонецЕсли;	
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", РаботаСФормойДокументаКлиентСервер.КраткоеПредставлениеТипаНалогообложенияНДС(СтруктураНадписи.НалогообложениеНДС));
	КонецЕсли;
	
	// Специальный налоговый режим.
	Если ЗначениеЗаполнено(СтруктураНадписи.СпециальныйНалоговыйРежим)
		И СтруктураНадписи.СпециальныйНалоговыйРежим <> ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется") Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%СпециальныйНалоговыйРежим%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %СпециальныйНалоговыйРежим%'");
		КонецЕсли;	
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%СпециальныйНалоговыйРежим%", СокрЛП(Строка(СтруктураНадписи.СпециальныйНалоговыйРежим)));
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда	
		Если СтруктураНадписи.СуммаВключаетНДС Тогда	
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

// Процедура формирует заголовок формы.
//
&НаСервере
Процедура СформироватьЗаголовок(СтруктураСостояниеКассовойСмены)
	
	Если СтруктураСостояниеКассовойСмены = Неопределено Тогда
		СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
		Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
			ДополнитьСтруктуруСостоянияКассовойСмены(СтруктураСостояниеКассовойСмены);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураСостояниеКассовойСмены.СменаОткрыта И НЕ ЭтоМобильныйКлиент Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='%1, Смена № %2  %3'"),
			СокрЛП(СтруктураСостояниеКассовойСмены.СтруктурнаяЕдиницаПредставление),
			СокрЛП(СтруктураСостояниеКассовойСмены.НомерКассовойСмены),
			Формат(СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса, "ДЛФ=D;"));
	Иначе
		Если ЭтоМобильныйКлиент Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru='Чек - %1'"), СокрЛП(КассаККМ.Наименование));
		Иначе
			ТекстСообщения = НСтр("ru='%ТорговаяТочка%'");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.СтруктурнаяЕдиницаПредставление) Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТорговаяТочка%", СокрЛП(СтруктураСостояниеКассовойСмены.СтруктурнаяЕдиницаПредставление));
		Иначе
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТорговаяТочка%", СокрЛП(КассаККМ.СтруктурнаяЕдиница));
		КонецЕсли;
	КонецЕсли;
	Заголовок = ТекстСообщения;
	
КонецПроцедуры // СформироватьЗаголовок()

// Процедура формирует заголовок формы.
//
&НаКлиенте
Процедура СформироватьЗаголовокНаКлиенте(СтруктураСостояниеКассовойСмены)
	
	Заголовок = СтрШаблон(НСтр("ru='%1, Смена № %2  %3, %4'"),
		СокрЛП(СтруктураСостояниеКассовойСмены.СтруктурнаяЕдиница),
		СокрЛП(СтруктураСостояниеКассовойСмены.НомерКассовойСмены),
		Формат(СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса, "ДЛФ=D;"),
		Объект.Ответственный);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыДляМобильногоКлиента()
	
	Если НЕ ЭтоМобильныйКлиент Тогда
		Элементы.ГруппаПродажаМК.Видимость = Ложь;
		Элементы.ГруппаФормаЗавершенияПродажи.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницыПродажаМК.ТекущаяСтраница = Элементы.ГруппаНетДанных;
	Элементы.ПечатьТоварногоЧека_МК.Видимость = Ложь;
	Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница = Элементы.ГруппаПродажаМК;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущийЧекПоЗаказу(ПараметрыНовогоЧекаККМ)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.ЧекККМ"));
	ДокументОбъект.Заполнить(ПараметрыНовогоЧекаККМ);
	ДокументОбъект.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	ДокументОбъект.Заказ = ПараметрыНовогоЧекаККМ.Основание;
	ДокументОбъект.ОперацияСДенежнымиСредствами = Ложь;
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	Для Каждого Элемент Из Объект.Запасы Цикл
		Если НЕ Элемент.Номенклатура.ВидПродукцииИС.Пустая() Тогда
			Элемент.МаркируемаяПродукция = Истина;
			Элемент.СтатусПроверкиГосИС = 2;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьПризнакиИспользованияХарактеристик();
	ОбновитьТипНоменклатурыЗапас();
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
 
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначенияКассоваяСмена

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено)
	
	ОбщиеПараметры = Документы.ЧекККМ.ПодготовитьДанныеДляПробитияЧека(Объект, Объект.Ссылка, ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС);
	Возврат ОбщиеПараметры;
	
КонецФункции

// Функция печати чека на фискальном регистраторе.
//
&НаКлиенте
Процедура ПробитьЧек(СформироватьТоварныйЧек = Ложь)
	
	БезОшибок = Истина;
	ОписаниеОшибки = "";
	
	Если Объект.НомерЧекаККМ <> 0
	И НЕ КассаККМИспользоватьБезПодключенияОборудования Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПоказыватьПредупреждение = Ложь;
	ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_ПроверкаВозможностиПечатиЧека_" + Объект.Запасы.Количество(), Истина, Ложь);
	Если ВключенКонтрольОстатков И ПечатьДокументовУНФКлиент.ПечатьЧекаНевозможна(ЭтаФорма, ПоказыватьПредупреждение) Тогда
		Если ПоказыватьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не удалось выполнить проведение документа'"));
		КонецЕсли;
		Возврат;
	ИначеЕсли Не ВключенКонтрольОстатков Тогда
		Попытка
			Записать(); // Наличие ссылки требуется для подсистемы ЕГАИС
		Исключение
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не удалось выполнить запись документа'"));
			Возврат;
		КонецПопытки;
	КонецЕсли;
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	
	Если НЕ ИспользоватьПодключаемоеОборудование // Проверка на включенную ФО "Использовать ПО"
		ИЛИ КассаККМИспользоватьБезПодключенияОборудования Тогда
		
		// Внешнее оборудование не используется
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		Попытка
			РезультатПроведения = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
			ПоказатьСкрытьСдачуНаКлиенте();
		Исключение
			ЗаполнитьОписаниеДляТЧЗапасыНаКлиенте();
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Не удалось выполнить проведение документа'"));
			Возврат;
		КонецПопытки;
		
		Если СформироватьТоварныйЧек И НЕ Объект.Ссылка.Пустая() Тогда
			
			ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
			ПараметрыОткрытия.ИмяМенеджераПечати = "Документ.ЧекККМ";
			ПараметрыОткрытия.ИменаМакетов		 = "ТоварныйЧек";
			МассивЧековККМ = Новый Массив;
			МассивЧековККМ.Добавить(Объект.Ссылка);
			ПараметрыОткрытия.ПараметрКоманды	 = МассивЧековККМ;
			ПараметрыОткрытия.ПараметрыПечати	 = Неопределено;
			
			ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ЭтаФорма, КлючУникальности);
			
		КонецЕсли;
		ИнициализироватьНовыйЧек(Истина);
		ВывестиИнформациюНаДисплейПокупателя();
		Возврат;
	КонецЕсли;
		
	ИдентификаторУстройстваФР = ?(ЗначениеЗаполнено(ФискальныйРегистратор),
		ФискальныйРегистратор,
		Неопределено);
	
	Если ИдентификаторУстройстваФР <> Неопределено Тогда
		
		// Готовим данные
		ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено;
		ТранспортныйМодуль = Неопределено;
		ДанныеЕГАИСДостаточны = Ложь;
		
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_ПодготовитьДанныеДляПробития_" + Объект.Запасы.Количество(), Истина, Ложь);
		ОбщиеПараметры = ЗаблокироватьФормуИПодготовитьДанныеДляПробития(ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС);
		ОбщиеПараметры.ДатаВремя = ТекущаяДата();
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
		
		Если ЕстьАлкогольнаяПродукцияЕГАИС И НЕ ДанныеЕГАИСДостаточны Тогда
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбщиеПараметры", ОбщиеПараметры);
		ДополнительныеПараметры.Вставить("ЕстьАлкогольнаяПродукцияЕГАИС", ЕстьАлкогольнаяПродукцияЕГАИС);
		ДополнительныеПараметры.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
		ДополнительныеПараметры.Вставить("СформироватьТоварныйЧек", СформироватьТоварныйЧек);
		ДополнительныеПараметры.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
		ДополнительныеПараметры.Вставить("АдресТорговогоОбъекта", ОбщиеПараметры.АдресМагазина);
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьКодМаркировкиСредствамиККТЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		РозничныеПродажиКлиент.ПроверитьКодМаркировкиСредствамиККТ(ОбщиеПараметры, ЭтотОбъект, НСтр("ru = 'Пробить чек'"), ОповещениеОЗавершении);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		БезОшибок = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ПробитьЧек()

&НаКлиенте
Процедура ПроверитьКодМаркировкиСредствамиККТЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ШтрихкодированиеИСМПКлиент.РезультатПроверкиСредствамиККТТребуетФискализации(Результат)
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбщиеПараметры") Тогда
		
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_ФискализацияЧекаНаУстройстве_" + Объект.Запасы.Количество(), Истина, Ложь);
		ДополнительныеПараметры.Вставить("ИДЗамера", ИДЗамера);
		
		Оповещение            = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека", ЭтотОбъект, ДополнительныеПараметры);
		ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, ДополнительныеПараметры);
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
			Оповещение,
			УникальныйИдентификатор,
			ДополнительныеПараметры.ОбщиеПараметры,
			ДополнительныеПараметры.ИдентификаторУстройстваФР,
			,
			ПослеОткрытияЧека,
			ПослеОшибкиПечатиЧека);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаблокироватьФормуИПодготовитьДанныеДляПробития(ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС)
	
	ЭтаФорма.Доступность = Ложь;
	Возврат ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС);
	
КонецФункции

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены",    НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека",     НомерЧека);
		ПараметрыОперации.Вставить("АдресТорговогоОбъекта", ДополнительныеПараметры.АдресТорговогоОбъекта);
		ПараметрыОперации.Вставить("СерийныйНомер", "");
		Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
			ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыОперации.СерийныйНомер) Тогда
			ПараметрыОперации.СерийныйНомер = "1";
		КонецЕсли;
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"),
			ПараметрыОперации,
			Новый ОписаниеОповещения("ПослеПередачиЧекаЕГАИС", ЭтотОбъект, ПараметрыВыполнения));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт

	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	Попытка
		ШапкаЧека.НомерЧека = ШапкаЧека.НомерЧека + 1000000;
	Исключение
		ШапкаЧека.НомерЧека = 1000000;
	КонецПопытки;
	
	Если ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств") Тогда
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
	Иначе
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены",    НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека",     НомерЧека + 1000000);
		ПараметрыОперации.Вставить("АдресТорговогоОбъекта", ДополнительныеПараметры.АдресТорговогоОбъекта);
		ПараметрыОперации.Вставить("СерийныйНомер", "");
		Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
			ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыОперации.СерийныйНомер) Тогда
			ПараметрыОперации.СерийныйНомер = "1";
		КонецЕсли;
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию"),
			ПараметрыОперации,
			Новый ОписаниеОповещения("ПослеПередачиОтменыЧекаЕГАИС", ЭтотОбъект, ПараметрыВыполнения));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("ru = 'В процессе передачи данных в ЕГАИС возникли ошибки:'"));
	КонецЕсли;
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	ПараметрыВыполнения.ПродолжитьПечать = Не ЕстьОшибки;
	ПараметрыВыполнения.ОписаниеОшибки   = ОписаниеОшибки;
	
	ПараметрыВыполнения.Вставить("АдресЧека",   Изменения[0].ИдентификаторЗапроса);
	ПараметрыВыполнения.Вставить("ПодписьЧека", Изменения[0].Подпись);
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПередачиОтменыЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("ru = 'В процессе передачи данных в ЕГАИС возникли ошибки:'"));
	КонецЕсли;
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(Параметры.ИДЗамера, Ложь);
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если РезультатВыполнения.ВыходныеПараметры <> Неопределено Тогда
			Объект.НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		КонецЕсли;
		
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_ЗаписьЧекаВПробитьЧекЗавершение_" + Объект.Запасы.Количество(), Истина, Ложь);
		Попытка
			РезультатПроведения = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
			ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
			ПоказатьСкрытьСдачуНаКлиенте();
		Исключение
			ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Истина);
			ЗаполнитьОписаниеДляТЧЗапасыНаКлиенте();
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не удалось выполнить проведение документа'")); // Асинхронный метод.
			Возврат;
		КонецПопытки;
		
		Если Параметры.СформироватьТоварныйЧек И НЕ Объект.Ссылка.Пустая() Тогда
			
			ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
			ПараметрыОткрытия.ИмяМенеджераПечати = "Документ.ЧекККМ";
			ПараметрыОткрытия.ИменаМакетов		 = "ТоварныйЧек";
			МассивЧековККМ = Новый Массив;
			МассивЧековККМ.Добавить(Объект.Ссылка);
			ПараметрыОткрытия.ПараметрКоманды	 = МассивЧековККМ;
			ПараметрыОткрытия.ПараметрыПечати	 = Неопределено;
			
			ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ЭтаФорма, КлючУникальности);
			
		КонецЕсли;
		ИнициализироватьНовыйЧек(Истина);
		ВывестиИнформациюНаДисплейПокупателя();
		
	Иначе
		
		ТекстСообщения = НСтр(
			"ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном регистраторе.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки
		);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_СформироватьЗаголовокИПолучитьСостояниеСмены", Истина, Ложь);
	СформироватьЗаголовок(Неопределено);
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	
КонецПроцедуры

// Функция выполняет получение состояния кассовой смены на сервере.
//
&НаСервереБезКонтекста
Функция ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ)
	
	Возврат РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	
КонецФункции // ПолучитьСостояниеКассовойСменыНаСервере()

// Функция возвращает остаток денежных средств в кассе ККМ на сервере.
//
&НаСервереБезКонтекста
Функция ПолучитьОстатокДенежныхСредствВКассеККМНаСервере(КассаККМ)
	
	Возврат РозничныеПродажиСервер.ПолучитьОстатокДенежныхСредствВКассеККМ(КассаККМ);
	
КонецФункции // ПолучитьОстатокДенежныхСредствВКассеККМНаСервере()

// Процедура - обработчик события "ОткрытьКассовуюСмену".
//
&НаКлиенте
Процедура ОткрытьКассовуюСмену()
	
	ОписаниеОшибки = "";
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", ПараметрыКассыККМ.СтруктурнаяЕдиница);
	ДополнительныеПараметры.Вставить("Организация", ПараметрыКассыККМ.Организация);
	
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьБезПодключенияОборудования И ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		
		ЭтаФорма.Доступность = Ложь;
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		
		РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(Объект.Автор);
		Если РеквизитыКассира.ИмяКассираИДолжность <> "" Тогда
			ПараметрыОперации.Кассир = РеквизитыКассира.ИмяКассираИДолжность;
			ПараметрыОперации.КассирИНН = РеквизитыКассира.КассирИНН;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьКассовуюСменуЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(
			Оповещение,
			УникальныйИдентификатор,
			ПараметрыОперации,
			ИдентификаторУстройства,
			,
			ДополнительныеПараметры
		);
	Иначе
		Результат = ОткрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки);
		Если НЕ Результат Тогда
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
			                            |Смена не открыта.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ОбновитьСостояниеКассовойСмены(КассаККМ);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьКассовуюСмену()

&НаКлиенте
Процедура ОткрытьКассовуюСменуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	Если РезультатВыполнения.Результат Тогда 
		ОписаниеОшибки = "";
		Результат = ОткрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки); 
		Если НЕ Результат Тогда
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка. Смена не открыта.
							       |Дополнительное описание: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ОбновитьСостояниеКассовойСмены(КассаККМ);
	Иначе
		ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
			                      |Смена не открыта на фискальном регистраторе.
			                      |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеКассовойСмены(КассаККМ)
	
	ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_ПолучитьСостояниеКассовойСменыНаСервере", Истина, Ложь);
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		ДополнитьСтруктуруСостоянияКассовойСмены(СтруктураСостояниеКассовойСмены);
	КонецЕсли;
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	СформироватьЗаголовокНаКлиенте(СтруктураСостояниеКассовойСмены);
	
КонецПроцедуры

// Функция выполняет открытие кассовой смены на сервере.
//
&НаСервере
Функция ОткрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки = "")
	
	Результат = РозничныеПродажиСервер.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки);
	ВключенКонтрольОстатков = Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить();
	Возврат Результат;
	
КонецФункции // ОткрытьКассовуюСменуНаСервере()

// Процедура выполняет закрытие кассовой смены на сервере.
//
&НаСервере
Функция ЗакрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки = "", СсылкаНаОтчет = Неопределено)
	
	//Возврат Документы.ОтчетОРозничныхПродажах.СформироватьОтчетОРозничныхПродажахИВыполнитьАрхивацию(КассаККМ, ОписаниеОшибки);
	Возврат РозничныеПродажиСервер.ЗакрытьКассовуюСмену(КассаККМ, ОписаниеОшибки, СсылкаНаОтчет);
	
КонецФункции // ЗакрытьКассовуюСменуНаСервере()

// Процедура - обработчик команды "ВнесениеДенег".
//
&НаКлиенте
Процедура ВнесениеДенег(Команда)
	
	Если Не СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
		ТекстСообщения = НСтр("ru = 'Внесение денег производится только при открытой кассовой смене'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если ИспользоватьБезПодключенияОборудования Тогда
		ОткрытьФормуДляВыбораРасходаИзКассы(Истина);
	ИначеЕсли МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОткрытьФормуДляВыбораРасходаИзКассы(Ложь);
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ВнесениеДенег".
//
&НаКлиенте
Процедура ВнесениеДенегЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено И ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	Иначе
		ОстатокВКассеСтрока = "" + ПолучитьОстатокДенежныхСредствВКассеККМНаСервере(КассаККМ);
	КонецЕсли;
	
	ВносимаяСумма = ?(Результат = Неопределено, ДополнительныеПараметры.ВносимаяСумма, Результат);
	
	Если (Результат <> Неопределено) Тогда
		
		ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		ЭтаФорма.Доступность = Ложь; // Блокируем интерфейс пользователя.
			
		Если ИдентификаторУстройства <> Неопределено Тогда
			ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыИнкассации();
			ПараметрыОперации.ТипИнкассации = 1;
			ПараметрыОперации.Сумма = ВносимаяСумма;
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("ИнкассацияНаФискальномУстройствеЗавершение", ЭтотОбъект);
			МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ВнесениеДенег()

&НаКлиенте
Процедура ИнкассацияНаФискальномУстройствеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка.
			                        |Чек не напечатан на фискальном устройстве.
			                        |Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	Если Параметры <> Неопределено И Параметры.Свойство("СоздатьВыемкуНаличных") И Параметры.СоздатьВыемкуНаличных Тогда
		
		ДополнительныеПараметры = Новый Структура("ИзымаемаяСумма", Параметры.Сумма);
		
		Если Параметры.Свойство("ОповещениеЗакрытияСмены") Тогда
			ДополнительныеПараметры.Вставить("ОповещениеЗакрытияСмены", Параметры.ОповещениеЗакрытияСмены);
		КонецЕсли;
		
		Если Параметры.Свойство("ОповещениеПоступленияВКассу") Тогда
			ДополнительныеПараметры.Вставить("ОповещениеПоступленияВКассу", Параметры.ОповещениеПоступленияВКассу);
		КонецЕсли;
		
		Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки И Параметры.Свойство("ДеньгиКВыемке") Тогда
			СформироватьДокументВыемки(Параметры, ДополнительныеПараметры);
		Иначе
			СформироватьДокументВыемки(Параметры.Сумма, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РассчитатьСуммуВыемки(ОстатокВКассе, ПараметрыКассыККМ);
	
	СуммаВыемки = Макс(ОстатокВКассе - ПараметрыКассыККМ.МинимальныйОстатокВКассеККМ, 0);
	
	Возврат СуммаВыемки;
	
КонецФункции

// Процедура - обработчик команды "ИзъятиеДенег".
//
&НаКлиенте
Процедура ВыемкаДенег(Команда, ПараметрыКассыККМ = Неопределено, ОповещениеЗакрытияСмены = Неопределено)
	
	Если Не СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
		ТекстСообщения = НСтр("ru = 'Выемка денег производится только при открытой кассовой смене'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыКассыККМ = Неопределено Тогда
		ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	КонецЕсли;
	
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	ИзымаемаяСумма = РассчитатьСуммуВыемки(ПолучитьОстатокДенежныхСредствВКассеККМНаСервере(КассаККМ), ПараметрыКассыККМ);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИзымаемаяСумма", ИзымаемаяСумма);
	ДополнительныеПараметры.Вставить("ОповещениеЗакрытияСмены", ОповещениеЗакрытияСмены);
	Если ОповещениеЗакрытияСмены <> Неопределено И ПараметрыКассыККМ.СоздаватьПоступлениеВКассу Тогда
		ОповещениеПоступленияВКассу = Новый ОписаниеОповещения("СоздатьПоступлениеВКассу", ЭтотОбъект, ПараметрыКассыККМ.КассаДляРозничнойВыручки);
		ДополнительныеПараметры.Вставить("ОповещениеПоступленияВКассу", ОповещениеПоступленияВКассу);
	КонецЕсли;
	
	Если ИспользоватьБезПодключенияОборудования Тогда
		ОбработкаЗавершения = Новый ОписаниеОповещения("СформироватьДокументВыемки", ЭтотОбъект, ДополнительныеПараметры);
	ИначеЕсли МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОбработкаЗавершения = Новый ОписаниеОповещения("ВыемкаДенегЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки И СтруктураСостояниеКассовойСмены.СуммаАгентскихПлатежей > 0 Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ОбщаяСумма", ИзымаемаяСумма);
		ПараметрыОткрытия.Вставить("СуммаАгентскихПлатежей", СтруктураСостояниеКассовойСмены.СуммаАгентскихПлатежей);
		ПараметрыОткрытия.Вставить("ДеньгиПоДоговорамПлатежногоАгента", СтруктураСостояниеКассовойСмены.ДеньгиПоДоговорамПлатежногоАгента);
		
		ОткрытьФорму("ОбщаяФорма.ВводПараметровВыемкиДенежныхСредств",ПараметрыОткрытия,,,,,ОбработкаЗавершения);
		
	Иначе
		
		ЗаголовокОкна = НСтр("ru='Сумма выемки, %Валюта%'");
		ЗаголовокОкна = СтрЗаменить(
			ЗаголовокОкна,
			"%Валюта%",
			СтруктураСостояниеКассовойСмены.ВалютаДокументаПредставление
		);
		
		ПоказатьВводЧисла(ОбработкаЗавершения, ИзымаемаяСумма, ЗаголовокОкна, 15, 2);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ИзъятиеДенег".
//
&НаКлиенте
Процедура ВыемкаДенегЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки И ТипЗнч(Результат) = Тип("Структура") Тогда
		ИзымаемаяСумма = Результат.ИзымаемаяСумма;
	Иначе
		ИзымаемаяСумма = ?(Результат = Неопределено, ДополнительныеПараметры.ИзымаемаяСумма, Результат);
	КонецЕсли;
	
	Если (Результат <> Неопределено) И (Результат <> 0) Тогда
		
		ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		ЭтаФорма.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыИнкассации();
			ПараметрыОперации.ТипИнкассации = 0;
			ПараметрыОперации.Сумма = ИзымаемаяСумма;
			ПараметрыОповещения = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыОперации);
			ПараметрыОповещения.Вставить("СоздатьВыемкуНаличных", Истина);
			Если ДополнительныеПараметры.Свойство("ОповещениеЗакрытияСмены") Тогда
				ПараметрыОповещения.Вставить("ОповещениеЗакрытияСмены", ДополнительныеПараметры.ОповещениеЗакрытияСмены);
			КонецЕсли;
			Если ДополнительныеПараметры.Свойство("ОповещениеПоступленияВКассу") Тогда
				ПараметрыОповещения.Вставить("ОповещениеПоступленияВКассу", ДополнительныеПараметры.ОповещениеПоступленияВКассу);
			КонецЕсли;
			Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки И ТипЗнч(Результат) = Тип("Структура") Тогда
				ПараметрыОповещения.Вставить("ДеньгиКВыемке", Результат.ДеньгиКВыемке);
			КонецЕсли;
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("ИнкассацияНаФискальномУстройствеЗавершение", ЭтотОбъект, ПараметрыОповещения);
			МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства);
		КонецЕсли;
		
	Иначе
		
		Если ДополнительныеПараметры.Свойство("ОповещениеЗакрытияСмены") И ДополнительныеПараметры.ОповещениеЗакрытияСмены <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗакрытияСмены, Результат);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВыемкаДенегЗавершение()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуРеквизитыИсключения(МассивРеквизитовДляИнициализацииНовогоЧека = Неопределено)
	
	СтрокаИсключений = "Ответственный, Подразделение, ВидЦен, НалогообложениеНДС, СуммаВключаетНДС, СтруктурнаяЕдиница";
	
	Если ТипЗнч(МассивРеквизитовДляИнициализацииНовогоЧека) = Тип("Массив") Тогда
		МассивРеквизитовДляИнициализацииНовогоЧека.Добавить("ВидЦен");
		МассивРеквизитовДляИнициализацииНовогоЧека.Добавить("НалогообложениеНДС");
		МассивРеквизитовДляИнициализацииНовогоЧека.Добавить("СуммаВключаетНДС");
	КонецЕсли;
	
	Возврат СтрокаИсключений;
	
КонецФункции

// Процедура вызывается при нажатии кнопки НапечататьЧек командной панели.
//
&НаКлиенте
Процедура ПробитьЧекВыполнить(Команда, СформироватьТоварныйЧек = Ложь)
	
	Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.СтатусКассовойСмены) Тогда
		ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены,, ПолучитьСтрокуРеквизитыИсключения());
		Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах;
		ОстатокВКассе = СтруктураСостояниеКассовойСмены.НаличностьВКассе;
		ОстатокВКассеСтрока = "" + ОстатокВКассе;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		
		ТекстОшибки = НСтр("ru='Документ помечен на удаление'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Объект.СуммаДокумента > Объект.ПолученоНаличными + Объект.БезналичнаяОплата.Итог("Сумма") + Объект.Предоплата.Итог("СуммаРасчетов") Тогда
		
		ТекстОшибки = НСтр("ru='Сумма оплаты меньше суммы чека'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Поле = "СуммаСдачи";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Объект.СуммаДокумента < Объект.БезналичнаяОплата.Итог("Сумма") + Объект.Предоплата.Итог("СуммаРасчетов") Тогда
		
		ТекстОшибки = НСтр("ru='Сумма оплаты платежными картами превышает сумму чека'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Поле = "СуммаСдачи";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		// СтандартныеПодсистемы.ОценкаПроизводительности
		ОценкаПроизводительностиКлиент.ЗамерВремени("ПробитьЧек"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы), Ложь, Истина);
		// СтандартныеПодсистемы.ОценкаПроизводительности
		
		ПробитьЧек(СформироватьТоварныйЧек);
		
		СформироватьЗаголовокНаКлиенте(СтруктураСостояниеКассовойСмены);
		
	КонецЕсли;
	
КонецПроцедуры // ПробитьЧекВыполнить()

// Процедура печати X-отчёта.
//
&НаКлиенте
Процедура ПечатьОтчетаБезГашенияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	ТекстСообщения = ?(РезультатВыполнения.Результат, НСтр("ru='Операция успешна завершена.'"), РезультатВыполнения.ОписаниеОшибки);
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Процедура - обработчик команды "ПечатьОтчетаБезГашения".
//
&НаКлиенте
Процедура ПечатьОтчетаБезГашенияВыполнить()
	
	ЭтаФорма.Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
	РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(Объект.Автор);
	ФИОКассира = РеквизитыКассира.ИмяКассираИДолжность;
	Если ЗначениеЗаполнено(ФИОКассира) Тогда
		ПараметрыОперации.Кассир = ФИОКассира;
		ПараметрыОперации.КассирИНН = РеквизитыКассира.КассирИНН;
	Иначе
		ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения("ПечатьОтчетаБезГашенияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФормированиеОтчетаБезГашения(
		Оповещение,
		УникальныйИдентификатор,
		ПараметрыОперации
	);
	
КонецПроцедуры // ПечатьОтчетаБезГашенияВыполнить()

// Процедура - обработчик команды "ПечатьОтчетаБезГашения".
//
&НаКлиенте
Процедура ПечатьОтчетаБезГашенияВыполнитьМояКасса()
	
	ЭтаФорма.Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
	РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(Объект.Автор);
	ФИОКассира = РеквизитыКассира.ИмяКассираИДолжность;
	Если ЗначениеЗаполнено(ФИОКассира) Тогда
		ПараметрыОперации.Кассир = ФИОКассира;
		ПараметрыОперации.КассирИНН = РеквизитыКассира.КассирИНН;
	Иначе
		ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения("ПечатьОтчетаБезГашенияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФормированиеОтчетаБезГашения(
		Оповещение,
		УникальныйИдентификатор,
		ПараметрыОперации
	);

КонецПроцедуры // ПечатьОтчетаБезГашенияВыполнить()

// Процедура - обработчик команды "ЗакрытьКассовуюСмену".
//
&НаКлиенте
Процедура ЗакрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстОшибки = НСтр("ru='Выберите кассу ККМ.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстОшибки,
			,
			"КассаККМ"
		);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	Если Не ПараметрыКассыККМ.СоздаватьВыемку Тогда
		ЗакрытьКассовуюСменуПродолжение(Истина, Новый Структура);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ЗакрытьКассовуюСменуПродолжение", ЭтотОбъект);
		ВыемкаДенег(Неопределено, ПараметрыКассыККМ, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКассовуюСменуПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_ПолучитьСостояниеКассовойСменыНаСервере", Истина, Ложь);
	СостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		ДополнитьСтруктуруСостоянияКассовойСмены(СостояниеКассовойСмены);
	КонецЕсли;
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	
	Если ИспользоватьБезПодключенияОборудования Тогда
		СформироватьОтчетОРозничныхПродажах(ИспользоватьБезПодключенияОборудования);
	ИначеЕсли ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(Объект.Автор);
		Если РеквизитыКассира.ИмяКассираИДолжность <> "" Тогда
			ПараметрыОперации.Кассир = РеквизитыКассира.ИмяКассираИДолжность;
			ПараметрыОперации.КассирИНН = РеквизитыКассира.КассирИНН;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПечатьФискальногоОтчетаЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(
			Оповещение, 
			УникальныйИдентификатор,
			ПараметрыОперации,
			ИдентификаторУстройства, 
			,
			СостояниеКассовойСмены.КассоваяСмена
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетОРозничныхПродажах(ИспользоватьБезПодключенияОборудования) Экспорт
	
	// 1. Формирование отчета о розничных продажах
	ДлительнаяОперация = НачатьФормированиеОтчетаОРозничныхПродажах(КассаККМ);
	
	глОперацияЗакрытияКассовойСмены = ДлительнаяОперация;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется закрытие смены'");
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ПриЗавершенииФормированияОтчетаОРозничныхПродажах", ЭтотОбъект, ИспользоватьБезПодключенияОборудования);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьФормированиеОтчетаОРозничныхПродажах(КассаККМ)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"Документы.ОтчетОРозничныхПродажах.СформироватьОтчетОРозничныхПродажахИВыполнитьАрхивацию",
		КассаККМ);
	
КонецФункции
	
&НаКлиенте
Процедура ПриЗавершенииФормированияОтчетаОРозничныхПродажах(Результат, ДополнительныеПараметры) Экспорт
	
	глОперацияЗакрытияКассовойСмены = Неопределено;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ИспользоватьБезПодключенияОборудования = ДополнительныеПараметры;
	
	СтруктураРезультата	= ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ОписаниеОшибки		= СтруктураРезультата.ОписаниеОшибки;
	Документ			= СтруктураРезультата.ОтчетОРозничныхПродажах;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки)
	   И ИспользоватьБезПодключенияОборудования Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОшибки)
		 И НЕ ИспользоватьБезПодключенияОборудования Тогда
		ТекстСообщения = НСтр(
			"ru = 'При формировании отчета о розничных продажах возникли ошибки.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// 2. Заполнение параметров кассовой смены.
	Результат = ЗакрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки); 
	Если НЕ Результат Тогда
		ТекстСообщения = НСтр("ru = 'При закрытии смены произошла ошибка.
		                            |Смена не закрыта.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Все результирующие документы выводим пользователю.
	Если Документ <> Неопределено Тогда
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", Новый Структура("Ключ", Документ));
		
		Если СверятьИтогиНаЭТПриЗакрытииСмены И ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьСверкуИтоговЗавершение", ЭтотОбъект);
			МенеджерОборудованияКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(ОписаниеОповещения, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	КоличествоОтложенныхЧеков = 0;
	УправлениеСтраницейОтложенныеЧеки();
	ИнициализироватьНовыйЧек();
	Если НужноОбновлятьСписокНаКлиенте() Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	Оповестить("ОбновитьФормыПослеСнятияZОтчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьФискальногоОтчетаЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если РезультатВыполнения.Результат Тогда
		СформироватьОтчетОРозничныхПродажах(Ложь);
	Иначе
		ТекстСообщения = НСтр(
			"ru = 'При закрытии смены на фискальном регистраторе произошла ошибка.
			|""%ОписаниеОшибки%""
			|Отчет на фискальном регистраторе не сформирован.'"
		);
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ОписаниеОшибки%",
			РезультатВыполнения.ОписаниеОшибки
		);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ИнициализироватьНовыйЧек();
		Если НужноОбновлятьСписокНаКлиенте() Тогда
			Элементы.Список.Обновить();
		КонецЕсли;
		Оповестить("ОбновитьФормыПослеСнятияZОтчета");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоследнийОтчетОРозничныхПродажахЗаЗакрытуюКассовуюСмену(пКассаККМ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ГДЕ
		|	ОтчетОРозничныхПродажах.Проведен
		|	И ОтчетОРозничныхПродажах.КассоваяСмена.Статус <> &СтатусКассовойСмены
		|	И ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтчетОРозничныхПродажах.МоментВремени УБЫВ";
	
	Запрос.УстановитьПараметр("СтатусКассовойСмены", Перечисления.СтатусыКассовойСмены.Открыта);
	Запрос.УстановитьПараметр("КассаККМ", пКассаККМ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ПолучитьПоследнююЗакрытуюКассовуюСмену()

&НаСервере
Функция ПараметрыОперацииАннулированияЧекаККМ()
	
	// Подготовка таблицы общих параметров.
	ТипЧека = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОперацииАннулированияЧека();
	ПараметрыОперации.ТипРасчета = ТипЧека;
	
	Возврат ПараметрыОперации;
	
КонецФункции

// Процедура аннулирования чека на фискальном регистраторе.
//
&НаКлиенте
Процедура АннулироватьЧекККМ(КассаККМ)
	
	ОписаниеОшибки = "";
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если НЕ ИспользоватьПодключаемоеОборудование 
		ИЛИ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		Возврат;

	КонецЕсли;
	
	Если ИдентификаторУстройстваФР <> Неопределено Тогда
		
		ЭтаФорма.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		ПараметрыОперацииАннулирования = ПараметрыОперацииАннулированияЧекаККМ();
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("АннулированиеЧекаЗавершение", ЭтотОбъект);
		
		МенеджерОборудованияКлиент.НачатьАннулированиеЧекаНаФискальномУстройстве(
			ОповещениеПриЗавершении, 
			УникальныйИдентификатор, 
			ПараметрыОперацииАннулирования, 
			ИдентификаторУстройстваФР);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран фискальный регистратор.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура АннулированиеЧекаЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр("ru = 'При аннулировании чека произошла ошибка. Чек не аннулирован на фискальном регистраторе.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,
				"%ДополнительноеОписание%",
				РезультатВыполнения.ОписаниеОшибки
		);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды АннулированиеЧека формы.
//
&НаКлиенте
Процедура АннулированиеЧека(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("АннулированиеЧекаОтветНаВопрос", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Аннулировать последний чек?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// Процедура - обработчик команды АннулированиеЧека формы. Вызывается после подтверждения аннулирования в окне вопроса.
//
&НаКлиенте
Процедура АннулированиеЧекаОтветНаВопрос(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		АннулироватьЧекККМ(КассаККМ);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик команды ПечатьКопииНаФискальномРегистраторе формы.
//
&НаКлиенте
Процедура ПечатьКопииНаФискальномРегистраторе(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(глПодключаемоеОборудование.ПоследнийСлипЧек) Тогда
		ЭтаФорма.Доступность = Ложь;
		Оповещение = Новый ОписаниеОповещения("НапечататьПоследнийСлипЧекЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПечатьТекста(Оповещение, УникальныйИдентификатор, глПодключаемоеОборудование.ПоследнийСлипЧек);
	
	Иначе
		ТекстСообщения = НСтр("ru = 'Отсутствует последний слип чек.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды НапечататьПоследнийСлипЧек.
//
&НаКлиенте
Процедура НапечататьПоследнийСлипЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КассовыеСмены(Команда)
	
	ОткрытьФорму("Документ.КассоваяСмена.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура КорректировочныеЧеки(Команда)
	
	ОткрытьФорму("Документ.ЧекККМКоррекции.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДляВыбораРасходаИзКассы(БезПодключения = Истина)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Касса", КассаККМ);
	
	Если БезПодключения Тогда
		ОткрытьФорму("Документ.РасходИзКассы.Форма.ФормаВнесенияНаличных",
			ПараметрыОткрытия,
			ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ВнесениеДенегБезОборудованияЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("Документ.РасходИзКассы.Форма.ФормаВнесенияНаличных",
			ПараметрыОткрытия,
			ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ВнесениеДенегЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнесениеДенегБезОборудованияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОстатокВКассеСтрока = "" + ПолучитьОстатокДенежныхСредствВКассеККМНаСервере(КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументВыемки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат <> 0 Тогда
		
		Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ОповещениеЗакрытияСмены") Тогда
			Результат.Удалить("ОповещениеЗакрытияСмены");
		КонецЕсли;
		
		ДокументВыемка = СформироватьДокументВыемкиНаСервере(Результат, ДополнительныеПараметры.ИзымаемаяСумма);
		
		Если ДокументВыемка <> Неопределено Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Создан документ'"),
										   ПолучитьНавигационнуюСсылку(ДокументВыемка), ДокументВыемка);
			ОстатокВКассеСтрока = "" + ПолучитьОстатокДенежныхСредствВКассеККМНаСервере(КассаККМ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеПоступленияВКассу") И ДополнительныеПараметры.ОповещениеПоступленияВКассу <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПоступленияВКассу, ДокументВыемка);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеЗакрытияСмены") И ДополнительныеПараметры.ОповещениеЗакрытияСмены <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗакрытияСмены, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьДокументВыемкиНаСервере(Результат, ИзымаемаяСумма)
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Для каждого СтруктураДокумента Из Результат.ДеньгиКВыемке Цикл
			
			ДокументВыемка = Документы.ВыемкаНаличных.СоздатьДокумент();
			СтруктураЗаполнения = Новый Структура;
			СтруктураЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
			СтруктураЗаполнения.Вставить("ДоговорПлатежногоАгента", СтруктураДокумента.ДоговорКонтрагента);
			СтруктураЗаполнения.Вставить("СуммаДокумента", СтруктураДокумента.Сумма);
			СтруктураЗаполнения.Вставить("КассаККМ", КассаККМ);
			СтруктураЗаполнения.Вставить("ВалютаДенежныхСредств", КассаККМ.ВалютаДенежныхСредств);
			СтруктураЗаполнения.Вставить("Организация", КассаККМ.Владелец);
			СтруктураЗаполнения.Вставить("ОтчетОРозничныхПродажах", СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах);
			ДокументВыемка.Заполнить(СтруктураЗаполнения);
			ДокументВыемка.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЦикла;
		
		Возврат ДокументВыемка.Ссылка;
		
	КонецЕсли;
	
	СуммаДокумента = ?(Результат = Неопределено, ИзымаемаяСумма, Результат);
	
	Если Результат <> Неопределено Тогда
		
		ДокументВыемка = Документы.ВыемкаНаличных.СоздатьДокумент();
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
		СтруктураЗаполнения.Вставить("СуммаДокумента", СуммаДокумента);
		СтруктураЗаполнения.Вставить("КассаККМ", КассаККМ);
		СтруктураЗаполнения.Вставить("ВалютаДенежныхСредств", КассаККМ.ВалютаДенежныхСредств);
		СтруктураЗаполнения.Вставить("Организация", КассаККМ.Владелец);
		СтруктураЗаполнения.Вставить("ОтчетОРозничныхПродажах", СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах);
		ДокументВыемка.Заполнить(СтруктураЗаполнения);
		ДокументВыемка.Записать(РежимЗаписиДокумента.Проведение);
		
		Возврат ДокументВыемка.Ссылка;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СоздатьПоступлениеВКассу(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоступлениеВКассу = СоздатьПоступлениеВКассуНаСервере(Результат, ДополнительныеПараметры);
	
	Если ПоступлениеВКассу <> Неопределено Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Создан документ'"),
									   ПолучитьНавигационнуюСсылку(ПоступлениеВКассу), ПоступлениеВКассу);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьПоступлениеВКассуНаСервере(Основание, Касса)
	
	ЕстьПравоЧтения = ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеВКассу, Пользователи.ТекущийПользователь());
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоступлениеВКассу = Документы.ПоступлениеВКассу.СоздатьДокумент();
	
	ПоступлениеВКассу.Заполнить(Основание);
	ПоступлениеВКассу.Касса = Касса;
	ПоступлениеВКассу.Дата = ТекущаяДатаСеанса();
	ПоступлениеВКассу.Записать(РежимЗаписиДокумента.Проведение);
	
	Если ЕстьПравоЧтения Тогда
		Возврат ПоступлениеВКассу.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устанавливает режим Только просмотр.
//
Процедура УстановитьРежимТолькоПросмотр()
	
	ТолькоПросмотр = Истина; // Чек пробит. Изменение информации запрещено.
	Элементы.ПринятьОплату.Доступность = Ложь;
	Элементы.ЦеныИВалюта.Доступность = Ложь;
	Элементы.ЗапасыВес.Доступность = Ложь;
	Элементы.ЗапасыПодбор.Доступность = Ложь;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Доступность = Ложь;
	
КонецПроцедуры // УстановитьРежимТолькоПросмотр()

// Процедура устанавливает доступность печати чека.
//
&НаСервере
Процедура УстановитьДоступностьПечатиЧека()
	
	Если Объект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован
	 ИЛИ Объект.КассаККМ.ИспользоватьБезПодключенияОборудования
	 ИЛИ КонтрольНаСкладеОтключен Тогда
		Элементы.ПринятьОплату.Доступность = Истина;
	Иначе
		Элементы.ПринятьОплату.Доступность = Истина; // Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьПечатиЧека()

// Процедура устанавливает заголовки кнопок и комбинации клавиш для команд формы.
//
&НаСервере
Процедура НастроитьКнопкиИКомандыМеню()
	
	Если Не ЗначениеЗаполнено(НастройкаРМК) Тогда
		// Сообщение выдаём в процедуре "ЗаполнитьБыстрыеТовары()".
		Возврат;
	КонецЕсли;
	
	// Удалим элементы
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого Элемент Из Элементы.ГруппаСлужебнаяКоманды.ПодчиненныеЭлементы Цикл
		МассивУдаляемыхЭлементов.Добавить(Элемент);
	КонецЦикла;
	Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
		Попытка
			Элементы.Удалить(Элемент);
		Исключение КонецПопытки;
	КонецЦикла;
	// Конец Удалим элементы
	
	НеПоказыватьПриОткрытииФормуВыбораКассы = НастройкаРМК.НеПоказыватьПриОткрытииФормуВыбораКассы;
	СверятьИтогиНаЭТПриЗакрытииСмены = НастройкаРМК.СверятьИтогиНаЭТПриЗакрытииСмены;
	ПечататьТоварныйЧекПоУмолчанию = НастройкаРМК.ПечататьТоварныйЧекПоУмолчанию;
	
	ПоискНоменклатурыПоШтрихКодуЗначениеНастройкиРМК = НастройкаРМК.ПоискНоменклатурыПоШтрихКоду;
	ПоискНоменклатурыПоШтрихКоду = ПоискНоменклатурыПоШтрихКодуЗначениеНастройкиРМК;
	Элементы.ЗначениеПоискаНоменклатурыПоШтрихКоду.Видимость = ПоискНоменклатурыПоШтрихКоду;
	Элементы.ЗначениеПоискаНоменклатуры.Видимость = Не ПоискНоменклатурыПоШтрихКоду;
	
	Для Каждого ТекущаяНастройкаКнопкиКоманды Из НастройкаРМК.КнопкиНижнейПанели Цикл
		Попытка
			Если ТекущаяНастройкаКнопкиКоманды.ИмяКнопки = "ЗначениеПоискаНоменклатуры" Тогда
				Если ЗначениеЗаполнено(ТекущаяНастройкаКнопкиКоманды.Клавиша) Тогда
					Элементы.ЗначениеПоискаНоменклатуры.СочетаниеКлавиш = Новый СочетаниеКлавиш(
						Клавиша[ТекущаяНастройкаКнопкиКоманды.Клавиша],
						ТекущаяНастройкаКнопкиКоманды.Alt,
						ТекущаяНастройкаКнопкиКоманды.Ctrl,
						ТекущаяНастройкаКнопкиКоманды.Shift);
					Элементы.ЗначениеПоискаНоменклатуры.ПодсказкаВвода = СтрШаблон(НСтр(
						"ru = 'Введите наименование, код или артикул %1'"),
						ПредставлениеСочетанияКлавиш(Элементы.ЗначениеПоискаНоменклатуры.СочетаниеКлавиш, Ложь));
				Иначе
					Элементы.ЗначениеПоискаНоменклатуры.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
					Элементы.ЗначениеПоискаНоменклатуры.ПодсказкаВвода = НСтр(
						"ru = 'Введите наименование, код или артикул'");
				КонецЕсли;
			Иначе
				ТекущаяКнопка = Элементы[ТекущаяНастройкаКнопкиКоманды.ИмяКнопки];
				ТекущаяКоманда = Команды[ТекущаяНастройкаКнопкиКоманды.ИмяКоманды];
				
				// Невидимый элементы, чтобы быстрые клавиши работали, когда дополнительная панель не активна.
				ИмяКнопки = ТекущаяНастройкаКнопкиКоманды.ИмяКнопки+"_НевидимаяКнопка";
				НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Элементы.ГруппаСлужебнаяКоманды);
				НоваяКнопка.Отображение = ОтображениеКнопки.Текст;
				НоваяКнопка.ТолькоВоВсехДействиях = Истина;
				НоваяКнопка.Видимость = Истина;
				НоваяКнопка.ИмяКоманды = ТекущаяНастройкаКнопкиКоманды.ИмяКоманды;
				НоваяКнопка.Ширина = 1;
				НоваяКнопка.Высота = 1;
				Если ЗначениеЗаполнено(ТекущаяНастройкаКнопкиКоманды.Клавиша) Тогда
					НоваяКнопка.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[ТекущаяНастройкаКнопкиКоманды.Клавиша],
						ТекущаяНастройкаКнопкиКоманды.Alt,
						ТекущаяНастройкаКнопкиКоманды.Ctrl,
						ТекущаяНастройкаКнопкиКоманды.Shift);
				Иначе
					НоваяКнопка.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
				КонецЕсли;
				// Конец Невидимый элемент
				
				Если ЗначениеЗаполнено(ТекущаяНастройкаКнопкиКоманды.ИмяКнопки) Тогда
					ТекущаяКнопка.Заголовок = ТекущаяНастройкаКнопкиКоманды.ЗаголовокКнопки;
					
					Если ТекущаяНастройкаКнопкиКоманды.ИмяКнопки = "ПоказатьЖурнал" Тогда
						Элементы.ПереключательЖурналБыстрыеТовары.СписокВыбора.Получить(0).Представление = ТекущаяНастройкаКнопкиКоманды.ЗаголовокКнопки;
					ИначеЕсли ТекущаяНастройкаКнопкиКоманды.ИмяКнопки = "ПоказатьБыстрыеТовары" Тогда
						Элементы.ПереключательЖурналБыстрыеТовары.СписокВыбора.Получить(1).Представление = ТекущаяНастройкаКнопкиКоманды.ЗаголовокКнопки;
					ИначеЕсли ТекущаяНастройкаКнопкиКоманды.ИмяКнопки = "ПоказатьМоюКассу" Тогда
						Элементы.ПереключательЖурналБыстрыеТовары.СписокВыбора.Получить(2).Представление = ТекущаяНастройкаКнопкиКоманды.ЗаголовокКнопки;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекущаяНастройкаКнопкиКоманды.Клавиша) Тогда
					ТекущаяКоманда.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[ТекущаяНастройкаКнопкиКоманды.Клавиша], ТекущаяНастройкаКнопкиКоманды.Alt,
						ТекущаяНастройкаКнопкиКоманды.Ctrl, ТекущаяНастройкаКнопкиКоманды.Shift);
				Иначе
					ТекущаяКоманда.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
				КонецЕсли;
			КонецЕсли;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(НСтр("ru = 'Произошла ошибка при настройке кнопок и команд меню.
											 |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента СвернутьРазвернутьБоковуюПанельПродаж формы.
//
&НаКлиенте
Процедура СвернутьРазвернутьБоковуюПанельПродажНажатие(Элемент)
	
	ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_СвернутьРазвернутьБоковуюПанель", Истина, Ложь);
	СвернутьРазвернутьБоковуюПанельПродажНажатиеНаСервере();
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента СвернутьРазвернутьБоковуюПанельПродаж на сервере.
//
&НаСервере
Процедура СвернутьРазвернутьБоковуюПанельПродажНажатиеНаСервере()
	
	Если Элементы.СвернутьРазвернутьБоковуюПанельПродаж.Заголовок = ">>" Тогда
		Элементы.БоковаяПанельПродажи.Видимость = Ложь;
		Элементы.СвернутьРазвернутьБоковуюПанельПродаж.Заголовок = "<<";
		Элементы.СвернутьРазвернутьБоковуюПанельПродаж.Картинка = БиблиотекаКартинок.РМК_РазвернутьДополнительнуюПанель;
	Иначе
		Элементы.БоковаяПанельПродажи.Видимость = Истина;
		Элементы.СвернутьРазвернутьБоковуюПанельПродаж.Заголовок = ">>";
		Элементы.СвернутьРазвернутьБоковуюПанельПродаж.Картинка = БиблиотекаКартинок.РМК_СвернутьДополнительнуюПанель;
		
		ОбновитьФормуСпискаДокументовНаСервере();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента СвернутьБоковуюПанельВозвраты формы.
//
&НаКлиенте
Процедура СвернутьБоковуюПанельВозвратыНажатие(Элемент)
	
	СвернутьБоковуюПанельВозвратыНажатиеНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента СвернутьБоковуюПанельВозвраты на сервере.
//
&НаСервере
Процедура СвернутьБоковуюПанельВозвратыНажатиеНаСервере()
	
	Если Элементы.СвернутьБоковуюПанельВозвраты.Заголовок = ">>" Тогда
		Элементы.БоковаяПанельВозвраты.Видимость = Ложь;
		Элементы.СвернутьБоковуюПанельВозвраты.Заголовок = "<<";
		Элементы.СвернутьБоковуюПанельВозвраты.Картинка = БиблиотекаКартинок.РМК_РазвернутьДополнительнуюПанель;
	Иначе
		Элементы.БоковаяПанельВозвраты.Видимость = Истина;
		Элементы.СвернутьБоковуюПанельВозвраты.Заголовок = ">>";
		Элементы.СвернутьБоковуюПанельВозвраты.Картинка = БиблиотекаКартинок.РМК_СвернутьДополнительнуюПанель;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента СвернутьБоковуюПанельЗаказы формы.
//
&НаКлиенте
Процедура СвернутьБоковуюПанельЗаказыНажатие(Элемент)
	
	СвернутьБоковуюПанельЗаказыНажатиеНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента СвернутьБоковуюПанельЗаказы на сервере.
//
&НаСервере
Процедура СвернутьБоковуюПанельЗаказыНажатиеНаСервере()
	
	Если Элементы.СвернутьРазвернутьБоковуюПанельЗаказы.Заголовок = ">>" Тогда
		Элементы.ПраваяПанельСтраницы.Видимость = Ложь;
		Элементы.СвернутьРазвернутьБоковуюПанельЗаказы.Заголовок = "<<";
		Элементы.СвернутьРазвернутьБоковуюПанельЗаказы.Картинка = БиблиотекаКартинок.РМК_РазвернутьДополнительнуюПанель;
	Иначе
		Элементы.ПраваяПанельСтраницы.Видимость = Истина;
		Элементы.СвернутьРазвернутьБоковуюПанельЗаказы.Заголовок = ">>";
		Элементы.СвернутьРазвернутьБоковуюПанельЗаказы.Картинка = БиблиотекаКартинок.РМК_СвернутьДополнительнуюПанель;
	КонецЕсли;
	
КонецПроцедуры

// Процедура изменяет видимость страницы, на которой отображается СДАЧА.
//
&НаСервере
Процедура ПоказатьСкрытьСдачуНаСервере(Показать = Истина, Проверять = Ложь)
	
	Если Не Проверять ИЛИ Не Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница = Элементы.СтраницаДанныеПоСтроке Тогда
		СдачаСтрока = "Сдача: "+Сдача+" "+ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВалютаДокумента, "СимвольноеПредставление");
		
		Если Показать Тогда
			Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница = Элементы.СтраницаСдача;
		Иначе
			Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница = Элементы.СтраницаДанныеПоСтроке;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура изменяет видимость страницы, на которой отображается СДАЧА.
//
&НаКлиенте
Процедура ПоказатьСкрытьСдачуНаКлиенте(Показать = Истина, Проверять = Ложь)
	
	Если Не Проверять ИЛИ Не Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница = Элементы.СтраницаДанныеПоСтроке Тогда
		СдачаСтрока = "Сдача: "+Сдача+" "+Объект.ВалютаДокумента;
		
		Если Показать Тогда
			Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница = Элементы.СтраницаСдача;
		Иначе
			Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница = Элементы.СтраницаДанныеПоСтроке;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокЗаказовПокупателейПриСозданииНаСервере()
	
	Если НЕ ИспользоватьЗаказыВРозничнойТорговле Тогда
		Элементы.ПродажаПоЗаказам.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	СостоянияЗаказов.УстановитьУсловноеОформлениеОтмененногоЗаказа(
		СписокЗаказов.КомпоновщикНастроек.Настройки.УсловноеОформление
	);
	
	УстановитьУсловноеОформлениеПоЦветамСостоянийСервер();
	
	Элементы.ОтборОплата.СписокВыбора.Добавить("Без оплаты", НСтр("ru = 'Без оплаты'"));
	Элементы.ОтборОплата.СписокВыбора.Добавить("Оплачен частично", НСтр("ru = 'Оплачен частично'"));
	Элементы.ОтборОплата.СписокВыбора.Добавить("Оплачен полностью", НСтр("ru = 'Оплачен полностью'"));
	
	Элементы.ОтборОтгрузка.СписокВыбора.Добавить("Без отгрузки", НСтр("ru = 'Без отгрузки'"));
	Элементы.ОтборОтгрузка.СписокВыбора.Добавить("Отгружен частично", НСтр("ru = 'Отгружен частично'"));
	Элементы.ОтборОтгрузка.СписокВыбора.Добавить("Отгружен полностью", НСтр("ru = 'Отгружен полностью'"));

	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку"));
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЗаказов, "ВидОперации",
		СписокЗначений, ВидСравненияКомпоновкиДанных.ВСписке);
	
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("АктуальнаяДатаСеанса", НачалоДня(ТекущаяДатаСеанса()));
	
	УстановитьОтборТекущиеДела();
	КонтекстноеОткрытие = Параметры.Свойство("ТекущиеДела");
	
	// УНФ.ОтборыСписка
	РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект);
	Если Не КонтекстноеОткрытие Тогда
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, СписокЗаказов);
	КонецЕсли;
	// Конец УНФ.ОтборыСписка
	
	ВосстановитьНастройкиОтборов();
	ВосстановитьНастройкиФормы();
	
	// Установим формат для текущей даты: ДФ=Ч:мм
	ДинамическиеСпискиУНФ.ОтображатьТолькоВремяДляТекущейДаты(СписокЗаказов);
	
	// УНФ.ПанельКонтактнойИнформации
	КонтактнаяИнформацияПанельУНФ.ПриСозданииНаСервере(ЭтотОбъект, "КонтактнаяИнформация", "СписокЗаказовКонтекстноеМеню");
	// Конец УНФ.ПанельКонтактнойИнформации
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.ДанныеПанелиКонтактнойИнформации.ЦветФона = ЦветаСтиля.РабочееМестоКассираЦветДополнительнойПанели;
		Элементы.ДанныеПанелиКонтактнойИнформации.РастягиватьПоГоризонтали = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиОтборов()
	
	Если УчетПоКомпанииВЦелом Тогда
		//УНФ.ОтборыСписка
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, СписокЗаказов, "СписокЗаказов");
		//Конец УНФ.ОтборыСписка
		
		Возврат
	КонецЕсли;
	
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить("ЧекККМФормаРМКДопНастройки", "СтруктураНастроек");
	
	ИспользоватьНастройкиПоУмолчанию = Ложь;
	
	Если СтруктураНастроек = Неопределено Тогда
		
		ИспользоватьНастройкиПоУмолчанию = Истина;
		
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("ИспользоватьНастройкиПоУмолчанию", Истина);
		ХранилищеНастроекДанныхФорм.Сохранить("ЧекККМФормаРМКДопНастройки", "СтруктураНастроек", СтруктураНастроек);
		
	ИначеЕсли ТипЗнч(СтруктураНастроек) = Тип("Структура") 
		И СтруктураНастроек.Свойство("ИспользоватьНастройкиПоУмолчанию") Тогда
		ИспользоватьНастройкиПоУмолчанию = СтруктураНастроек.ИспользоватьНастройкиПоУмолчанию;
	КонецЕсли;
	
	Если ИспользоватьНастройкиПоУмолчанию Тогда
		
		СписокПолейИсключений = Новый СписокЗначений;
		СписокПолейИсключений.Добавить("Организация");
		
		//УНФ.ОтборыСписка
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, СписокЗаказов, "СписокЗаказов",,,,,,СписокПолейИсключений);
		//Конец УНФ.ОтборыСписка
		
		УстановитьМеткуИОтборСписка("Организация", "ГруппаОтборОрганизация", КассаККМ.Владелец);
		
	Иначе
		
		//УНФ.ОтборыСписка
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, СписокЗаказов, "СписокЗаказов");
		//Конец УНФ.ОтборыСписка
		
	КонецЕсли;
	
	Элементы.ОтборОрганизацияКонтекстноеМенюОрганизацияИзККМ.Пометка = ИспользоватьНастройкиПоУмолчанию;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОрганизациюПоВладельцуККМ()
	
	Если Не УчетПоКомпанииВЦелом И ИспользоватьНастройкиПоУмолчанию Тогда
		
		ПараметрыОтбора = Новый Структура("ИмяПоляОтбора", "Организация");
		
		НайденныеСтроки = ДанныеМеток.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ДанныеМеток.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(КассаККМ) Тогда
			УстановитьМеткуИОтборСписка("Организация", "ГруппаОтборОрганизация", КассаККМ.Владелец);
			СтруктурнаяЕдиницаККМ = КассаККМ.СтруктурнаяЕдиница;
		Иначе
			СтруктурнаяЕдиницаККМ = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользоватьАвторизациюПоОтветственному = ?(ЗначениеЗаполнено(КассаККМ.ИспользоватьАвторизациюПоОтветственному), КассаККМ.ИспользоватьАвторизациюПоОтветственному, Ложь);
	
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"ЧекККМ", "Запасы", НастройкиФормыВыбораНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьБоковуюПанельКомандНажатие(Элемент)
	
	Если Элементы.СвернутьРазвернутьБоковуюПанельКоманд.Заголовок = ">>" Тогда
		Элементы.БоковаяПанельКоманд.Видимость = Ложь;
		Элементы.ГруппаПодвал.Видимость = Истина;
		Элементы.СвернутьРазвернутьБоковуюПанельКоманд.Заголовок = "<<";
		Элементы.СвернутьРазвернутьБоковуюПанельКоманд.Картинка = БиблиотекаКартинок.РМК_РазвернутьДополнительнуюПанель;
	Иначе
		Элементы.БоковаяПанельКоманд.Видимость = Истина;
		Элементы.ГруппаПодвал.Видимость = Ложь;
		Элементы.СвернутьРазвернутьБоковуюПанельКоманд.Заголовок = ">>";
		Элементы.СвернутьРазвернутьБоковуюПанельКоманд.Картинка = БиблиотекаКартинок.РМК_СвернутьДополнительнуюПанель;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокОтложенныхЧековПриСозданииНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтложенныеЧекиЗаказ",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	
	ИспользоватьДисконтныеКарты = ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныеКарты");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтложенныеЧекиДисконтнаяКарта",
		"Видимость",
		ИспользоватьДисконтныеКарты);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтборПоДКЧеки",
		"Видимость",
		ИспользоватьДисконтныеКарты);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	ВключенКонтрольОстатков = Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить();
	
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	
	КэшЗначений.Вставить("ИспользоватьМинимальныеЦены", ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются());
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");

	УстановитьУсловноеОформлениеФормы();
	
	// Заказы покупателей в Рознице
	ИспользоватьЗаказыВРозничнойТорговле = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле");
	ИспользоватьРезервированиеЗапасов = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	// Конец Заказы покупателей в Рознице
	
	УчетПоКомпанииВЦелом = Константы.УчетПоКомпании.Получить();
	
	Элементы.ОтборОрганизацияКонтекстноеМенюОрганизацияИзККМ.Видимость = Не УчетПоКомпанииВЦелом;
	
	// РМК
	
	КассаТерминал = РабочееМестоКассираВызовСервера.ПолучитьКассуККМИТерминалПоУмолчанию();
	Если параметры.ЗначенияЗаполнения.Свойство("КассаККМ") Тогда
		КассаККМ = Параметры.ЗначенияЗаполнения.КассаККМ;
	Иначе
		КассаККМ = КассаТерминал.КассаККМ;
	КонецЕсли;
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ПредыдущаяКассаККМ = КассаККМ;
	КассаККМИспользоватьБезПодключенияОборудования = КассаККМ.ИспользоватьБезПодключенияОборудования;
	
	ИспользоватьАгентскиеПлатежиИРазделениеВыручки = ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки");
	
	Если Параметры.ЗначенияЗаполнения.Свойство("ЭквайринговыйТерминал") Тогда
		Объект.ЭквайринговыйТерминал = Параметры.ЗначенияЗаполнения.ЭквайринговыйТерминал;
	Иначе
		Объект.ЭквайринговыйТерминал = КассаТерминал.ЭквайринговыйТерминал;
	КонецЕсли;
	
	ИнициализацияФормы();
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ЭтаФорма.Доступность = Ложь;
	КонецЕсли;
	
	// Восстановим настройки
	ИмяКлючаОбъекта = "РМКНаНачальнойСтранице";
	СтруктураДляОткрытияНаНачальнойСтранице = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ДляНачальнойСтраницы");
	Если СтруктураДляОткрытияНаНачальнойСтранице <> Неопределено Тогда
		КассаККМИзНастроек = СтруктураДляОткрытияНаНачальнойСтранице.КассаККМ;
		ЭквайринговыйТерминалИзНастроек = СтруктураДляОткрытияНаНачальнойСтранице.ЭквайринговыйТерминал;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина);
		ОбновитьТипНоменклатурыЗапас();
	КонецЕсли;
	
	ИспользоватьПредоплату = ПолучитьФункциональнуюОпцию("ИспользоватьПредоплатуВЧекахККМ");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"СписокКонтекстноеМенюЗаполнитьПоЧеку",
																"Видимость",
																 ИспользоватьПредоплату);
	
	// УНФ.ПанельКонтактнойИнформации
	КонтактнаяИнформацияПанельУНФ.ПриСозданииНаСервере(ЭтотОбъект, "КонтактнаяИнформация", "СписокЗаказовКонтекстноеМеню");
	// Конец УНФ.ПанельКонтактнойИнформации
	
	УстановитьВидимостьДоговора();
	
	НастроитьЭлементыДляМобильногоКлиента();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// РаспределениеПродаж
	РаспределениеПродажПриОткрытии();
	// Конец РаспределениеПродаж
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		СтруктурнаяЕдиницаККМ = КассаККМ.СтруктурнаяЕдиница;
	КонецЕсли;
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЧекККМ", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	
	// ИнтеграцияГосИС
	ФОВестиУчетМаркируемойПродукцииИСМП = ИнтеграцияИСМПВызовСервера.ВестиУчетМаркируемойПродукции();
	ДобавитьКолонкуКоличествоВБазовыхЕдиницахГосИС();
	СобытияФормИС.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура);
	ШтрихкодированиеИС.ИнициализироватьКэшМаркируемойПродукции(ЭтаФорма);
	ИнициализироватьКэшСтрок();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияРазделитель",
		"Видимость",
		ФОВестиУчетМаркируемойПродукцииИСМП);
		
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
	// Конец ИнтеграцияГосИС
	
	// ШиныИПокрышки
	Если ИспользуетсяМаркировкаШинИПокрышек
		И Элементы.Найти("ЗапасыСтатусПроверкиГосИС") = Неопределено Тогда
		Элементы.ЗапасыИндексАкцизнойМарки.Видимость = Истина;
		Для каждого ТекСтрока Из Объект.Запасы Цикл
			ЗаполнитьИндексАкцизнойМарки(ТекСтрока);
		КонецЦикла;
	Иначе
		Элементы.ЗапасыИндексАкцизнойМарки.Видимость = Ложь;
	КонецЕсли;
	// Конец ШиныИПокрышки
	
	// Дисконтные карты
	ЕстьИменныеВидыДисконтныхКарт = ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныеКарты") И Справочники.ВидыДисконтныхКарт.ЕстьИменныеВиды();
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	РазрешитьСкладыВТабличныхЧастях = ПолучитьФункциональнуюОпцию("РазрешитьСкладыВТабличныхЧастях");
	
	// Ячейки
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КэшЗначений.Вставить("УчетПоЯчейкам", ПолучитьФункциональнуюОпцию("УчетПоЯчейкам"));
		ОбновитьДоступностьЯчеек();
		ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	КонецЕсли; 
	// Конец Ячейки
	
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		АгентскиеПлатежиУНФ.УправлениеЭлементамиАгентскогоВознаграждения(ЭтотОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы); 
	ОбновитьПризнакиНабора(Объект.Запасы);
	// Конец Наборы
	
	// Ячейки
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("УчетПоЯчейкам", ПолучитьФункциональнуюОпцию("УчетПоЯчейкам"));
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	ОбновитьДанныеОстатковИПризнакиХарактеристикИПартий();
	
	// ИнтеграцияГосИС
	ДобавитьКолонкуКоличествоВБазовыхЕдиницахГосИС();
	СобытияФормИС.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец ИнтеграцияГосИС
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеОборудования() Экспорт
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода,ДисплейПокупателя");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры


// Процедура - обработчик события ПриОткрытии формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ГосИС 1.1.1.12
	Если ИнтеграцияИСУНФВызовСервера.НеобходимоЗавершитьЗаполнениеРеквизитаВидПродукцииИС() Тогда
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
		Оповещение = Новый ОписаниеОповещения("НеобходимоЗавершитьЗаполнениеРеквизитаВидПродукцииИС_ПослеЗакрытияВопроса", ИнтеграцияИСУНФКлиент, ДополнительныеПараметры);
		ТекстВопроса = "В фоновом режиме выполняется обработка данных о маркируемых товарах. Розничная торговля будет доступна после завершения обработки.";
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ПодождатьЗавершенияОбработки", "Подождать завершения обработки");
		Кнопки.Добавить("ВыполнитьОбработкуСейчас", "Выполнить обработку сейчас (может занять длительное время, работа в программе будет невозможна)");
		ЗаголовокВопроса = "Выполняется обработка данных о маркируемой продукции";
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки,,, ЗаголовокВопроса);
		
	КонецЕсли;
	// Конец ГосИС 1.1.1.12
	
	Окна = ПолучитьОкна();
	
	Для Каждого мОкно Из Окна Цикл
		Если мОкно.НачальнаяСтраница Тогда
			Если мОкно.Содержимое.Количество() > 0 И мОкно.Содержимое[0].ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК" Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОтключитьОбработчикОжидания("ПодключениеОборудования");
	ПодключитьОбработчикОжидания("ПодключениеОборудования", 1, Истина);
	
	ЗаполнитьСуммыСкидок();
	
	ПересчитатьДокументНаКлиенте();
	
	Если КассаККМ.Пустая() Тогда
		ЗначенияЗаполнения = РабочееМестоКассираВызовСервера.ПолучитьКассуККМИТерминалПоУмолчанию();
		
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
		
		Если РабочееМестоКассираКлиент.ТребуетсяОткрытьОкноВыбораКассы(ЗначенияЗаполнения) Тогда
			
			РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
			Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не удалось определить рабочее место для работы с подключаемым оборудованием.'");
				Сообщение.Сообщить();
			КонецЕсли;
			
			ВВидеСтруктуры = Истина;
			НастройкаРМКСтруктура = РабочееМестоКассираВызовСервера.ПолучитьНастройкуРМК(РабочееМесто, ВВидеСтруктуры);
			Если Объект.КассаККМ.Пустая() Тогда
				Если Не ЗначениеЗаполнено(НастройкаРМКСтруктура.Ссылка) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Не удалось получить настройки РМК для текущего рабочего места.'");
					Сообщение.Сообщить();
				Иначе
					НеПоказыватьПриОткрытииФормуВыбораКассы = НастройкаРМКСтруктура.НеПоказыватьПриОткрытииФормуВыбораКассы;
					СверятьИтогиНаЭТПриЗакрытииСмены = НастройкаРМКСтруктура.СверятьИтогиНаЭТПриЗакрытииСмены;
				КонецЕсли;
			Иначе
				Если ЗначенияЗаполнения.КоличествоЭквайринговыхТерминалов < 2 Тогда
					НеПоказыватьПриОткрытииФормуВыбораКассы = Истина;
					СверятьИтогиНаЭТПриЗакрытииСмены = Ложь;
				Иначе
					НеПоказыватьПриОткрытииФормуВыбораКассы = НастройкаРМКСтруктура.НеПоказыватьПриОткрытииФормуВыбораКассы;
					СверятьИтогиНаЭТПриЗакрытииСмены = НастройкаРМКСтруктура.СверятьИтогиНаЭТПриЗакрытииСмены;
				КонецЕсли;
			КонецЕсли;
			ПечататьТоварныйЧекПоУмолчанию = НастройкаРМКСтруктура.ПечататьТоварныйЧекПоУмолчанию;
			
			Если НеПоказыватьПриОткрытииФормуВыбораКассы И НЕ КассаККМИзНастроек.Пустая() Тогда
				КассаККМВыбрана(
					Новый Структура("КассаККМ, ЭквайринговыйТерминал", КассаККМИзНастроек, ЭквайринговыйТерминалИзНастроек),
					Неопределено
				);
			ИначеЕсли НеПоказыватьПриОткрытииФормуВыбораКассы Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не удалось определить кассу ККМ для открытия РМК. Удалите РМК с начальной страницы и отройте РМК из раздела ""Продажи"".'");
				Сообщение.Сообщить();
				Отказ = Истина;
				Возврат;
			Иначе
				//
				ОткрытьФорму(
					"Документ.ЧекККМ.Форма.ФормаДокумента_РМК_ОкноВыбораКассы",
					Новый Структура("ОткрытаДляПодбора", Истина),
					,
					,
					,
					,
					Новый ОписаниеОповещения("КассаККМВыбрана", ЭтотОбъект),
					РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс
				);
			КонецЕсли;
		Иначе
			КассаККМВыбрана(ЗначенияЗаполнения, Неопределено);
		КонецЕсли;
	Иначе
		Если ИспользоватьАвторизациюПоОтветственному Тогда
			АвторизацияПоОтветственному();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	УстановитьГорячиеКлавишиПоискаПоШК();
	
	// РаспределениеПродаж
	ОбработатьКассыККМ();
	// Конец РаспределениеПродаж
	
	НастроитьЭлементыЯчеек();
	
	Если ИспользоватьАвторизациюПоОтветственному Тогда
		ПодключитьОбработчикОжидания("ОповеститьОбОткрытииФормы", 0.1, Истина);
	КонецЕсли;
	
	УправлениеСтраницейОтложенныеЧеки();
	
	Если глОперацияЗакрытияКассовойСмены <> Неопределено Тогда
		ДлительнаяОперация = глОперацияЗакрытияКассовойСмены;
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется закрытие смены'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОповеститьОбОткрытииФормы()
	Оповестить("РМКОткрыт");
КонецПроцедуры

// Процедура - обработчик события ПередЗаписьюНаСервере формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Дата = ТекущаяДатаСеанса();
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ИспользоватьРежимПроведения = ИспользованиеРежимаПроведения.Неоперативный;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПредоплатуВЧекахККМ") Тогда
			ТекстСообщения = "";
			Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
				ТекстСообщения,
				Объект.Договор,
				Объект.Ссылка,
				Объект.Организация,
				Объект.Контрагент,
				Отказ);
		
			Если ТекстСообщения <> "" Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Если Отказ Тогда
					Сообщение.Текст = СтрШаблон(НСтр("ru = 'Документ не проведен. %1'"), ТекстСообщения);
				Иначе
					Сообщение.Текст = ТекстСообщения;
				КонецЕсли;
				
				Если Отказ Тогда
					Сообщение.ПутьКДанным = "Объект";
					Сообщение.Поле = "Договор";
					Сообщение.Сообщить();
					Возврат;
				Иначе
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается после закрытия формы вопроса. Форма вопроса вызывается из процедуры ПередЗакрытием.
//
&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт

	//

КонецПроцедуры // ПередЗакрытиемЗавершение()

// Процедура - обработчик события ПриЗакрытии формы.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	// АвтоматическиеСкидки
	СкидкиНаценкиКлиент.ПриЗакрытииФормы(Объект.Ссылка, ИспользоватьАвтоматическиеСкидки, СкидкиРассчитаныПередЗаписью);
	// Конец АвтоматическиеСкидки

	// РМК
	РабочееМестоКассираВызовСервера.ОбновитьНастройкиРМК(НастройкаРМК, НеПоказыватьПриОткрытииФормуВыбораКассы, СверятьИтогиНаЭТПриЗакрытииСмены);
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	СохранитьНастройки();
	
КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события ПередЗаписью формы.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// АвтоматическиеСкидки
	СкидкиРассчитаныПередЗаписью = Ложь;
	// Если документ проводится, проверим рассчитанность скидок.
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() И Не ЗапретПересчетаСкидок Тогда
			ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_РассчитатьСкидкиНаценкиКлиент", Истина, Ложь);
			РассчитатьСкидкиНаценкиКлиент();
			ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
			
			РассчиталиСкидки = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Рассчитаны автоматические скидки (наценки).'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			
			СкидкиРассчитаныПередЗаписью = Истина;
		Иначе
			Объект.СкидкиРассчитаны = Истина;
			ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Истина;
		КонецЕсли;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи формы.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	// АвтоматическиеСкидки
	Если СкидкиРассчитаныПередЗаписью Тогда
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	
	ОбновитьФормуСпискаДокументовНаКлиенте();
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы); 
	// Конец Наборы
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события ПослеЗаписиНаСервере формы.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// АвтоматическиеСкидки
	Если ОбновитьКартинкуАвтоСкидкиПослеЗаписи Тогда
		Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Ложь;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Наборы
	ОбновитьПризнакиНабора(Объект.Запасы);
	// Конец Наборы
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	ОбновитьДанныеОстатковИПризнакиХарактеристикИПартий();
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");

	// ИнтеграцияГосИС
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтаФорма);
	// Конец ИнтеграцияГосИС
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		АгентскиеПлатежиУНФ.УправлениеЭлементамиАгентскогоВознаграждения(ЭтотОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры

// ИнтеграцияГосИС
&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)

	ДополнительныеПараметры = Новый Структура("ИмяСобытия, Параметр, Источник", ИмяСобытия, Параметр, Источник);
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Событие", ДополнительныеПараметры);

КонецПроцедуры
// Конец ИнтеграцияГосИС

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница = Элементы.ГруппаОтложенные Тогда
		Если Источник = "ПодключаемоеОборудование"
			И ВводДоступен() И ИмяСобытия = "ScanData" Тогда
			
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Штрихкод = Параметр[0];
			Иначе
				Штрихкод = Параметр[1][1];
			КонецЕсли;
			
			ДисконтныеКарты = ДисконтныеКартыУНФВызовСервера.НайтиДисконтныеКартыПоШтрихкоду(Штрихкод);
			Если ДисконтныеКарты.ЗарегистрированныеДисконтныеКарты.Количество() Тогда
				ОтборПоДКЧеки = ДисконтныеКарты.ЗарегистрированныеДисконтныеКарты[0].Ссылка;
				ОтборПоДКЧекиПриИзменении(Неопределено);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшированныеЗначения",    КэшированныеЗначения);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка",    Истина);
	ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов", Ложь);
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	КэшированныеЗначения = ДополнительныеПараметры.КэшированныеЗначения;
	Если ДополнительныеПараметры.ТребуетсяСерверныйВызов Тогда
		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	Если СтрНачинаетсяС(ИмяСобытия, "ЗакрытиеФормыПроверкиИПодбораГосИС") Тогда
		ИндексВидаПродукции     = Число(СтрЗаменить(ИмяСобытия, "ЗакрытиеФормыПроверкиИПодбораГосИС", ""));
		ВидМаркируемойПродукции = ИнтеграцияИСКлиентСервер.ИндексВидаПродукцииИС(ИндексВидаПродукции);
		РассчитатьСуммыВСтрокахТабличнойЧастиПоВидуМаркируемойПродукции(ВидМаркируемойПродукции);
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	Если Не ДополнительныеПараметры.СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	// Конец ИнтеграцияГосИС
	
	РаботаСФормойКлиент.СписокЗаказовОбработкаОповещенияФрагмент(ЭтотОбъект, ИмяСобытия, "СписокЗаказов");
	
	Если Не БылаАвторизация Тогда
		// ПодключаемоеОборудование
		Если Источник = "ПодключаемоеОборудование"
			И ВводДоступен() И Не СчитанаДисконтнаяКарта Тогда
			Если ИмяСобытия = "ScanData" Тогда
				// Преобразуем предварительно к ожидаемому формату
				Данные = Новый Массив();
				Если Параметр[1] = Неопределено Тогда
					Штрихкод = Параметр[0];
				Иначе
					Штрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
				КонецЕсли;
				
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Штрихкод, 1));
				
				ПолученыШтрихкоды(Данные);
				
			КонецЕсли;
		КонецЕсли;
		// Конец ПодключаемоеОборудование
		
	Иначе
		БылаАвторизация = Ложь;
	КонецЕсли;
	
	// ДисконтныеКарты
	Если СчитанаДисконтнаяКарта Тогда
		СчитанаДисконтнаяКарта = Ложь;
	КонецЕсли;
	// Конец ДисконтныеКарты
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", Истина, Истина);
		
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьФормуСпискаДокументовЧекККМ" Тогда
		Если НужноОбновлятьСписокНаКлиенте() Тогда
			ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_ОбновитьСписок", Истина, Ложь);
			Элементы.Список.Обновить();
			ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
		КонецЕсли;
		
		Если НЕ (ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("НеОбновлятьОстатокВКассе") И Параметр.НеОбновлятьОстатокВКассе) Тогда
			ОстатокВКассеСтрока = "" + ПолучитьОстатокДенежныхСредствВКассеККМНаСервере(КассаККМ);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавленаНоменклатураИзРМК" И ЗначениеЗаполнено(Параметр) Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
				ТекущиеДанные.Номенклатура = Параметр;
				НоменклатураПриИзменении(ТекущиеДанные);
				ПересчитатьДокументНаКлиенте();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененаНастройкаРМК" Тогда
		Если НастройкаРМК = Параметр Тогда
			ЗаполнитьБыстрыеТовары();
			НастроитьКнопкиИКомандыМеню();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "РМК_Запись_ПриходнаяНакладнаяВозврат" Тогда
		Элементы.СоздатьПриходнуюНакладнуюНаВозврат.ЦветТекста = ?(ЧекНеПредъявлен, WebЦвета.Серый, Новый Цвет);
		Элементы.СоздатьРКОНаОснованииПриходнойНакладной.ЦветТекста = Новый Цвет;
		ПриходнаяНакладнаяНаВозврат = Параметр.Ссылка;
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Параметр.Номер, Истина, Истина);
		Элементы.ДекорацияПриходнаяНакладная.Заголовок = СтрШаблон(НСтр("ru = 'Прих. нак-я №%1 от %2'"),
			НомерДокумента, Формат(Параметр.Дата, "ДЛФ=D;"));
		Элементы.ДекорацияПриходнаяНакладная.Видимость = Истина;
	ИначеЕсли ИмяСобытия = "РМК_Запись_РКО" Тогда
		Элементы.СоздатьРКОНаОснованииПриходнойНакладной.ЦветТекста = ?(ЧекНеПредъявлен, WebЦвета.Серый, Новый Цвет);
		РКО = Параметр.Ссылка;
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Параметр.Номер, Истина, Истина);
		Элементы.ДекорацияРКО.Заголовок = СтрШаблон(НСтр("ru = 'РКО №%1 от %2'"), СокрЛП(НомерДокумента),
			Формат(Параметр.Дата, "ДЛФ=D;"));
		Элементы.ДекорацияРКО.Видимость = Истина;
	ИначеЕсли ИмяСобытия = "РМК_Запись_ЧекККМВозврат" Тогда
		ЧекККМНаВозврат = Параметр.Ссылка;
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Параметр.Номер, Истина, Истина);
		Если ПустаяСтрока(Элементы.ДекорацияЧекККМНаВозврат.Заголовок) Тогда
			Элементы.ДекорацияЧекККМНаВозврат.Заголовок = СтрШаблон(НСтр("ru = 'Чек ККМ на возврат №%1 от %2'"),
				НомерДокумента, Формат(Параметр.Дата, "ДЛФ=D;"));
		Иначе
			Элементы.ДекорацияЧекККМНаВозврат.Заголовок = СтрШаблон(НСтр("ru = '%1; №%2 от %3'"),
				Элементы.ДекорацияЧекККМНаВозврат.Заголовок, НомерДокумента, Формат(Параметр.Дата, "ДЛФ=D;"));
		КонецЕсли;
		Элементы.СоздатьЧекККМНаВозврат.ЦветТекста = WebЦвета.Серый;
	ИначеЕсли ИмяСобытия = "Запись_ЧекККМ_с_ЗаказомПокупателя" Тогда
		Элементы.СписокЗаказов.Обновить();
		ЧекККМ = Параметр.Ссылка;
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Параметр.Номер, Истина, Истина);
		Элементы.ДекорацияЧекККМ.Заголовок = СтрШаблон(НСтр("ru = 'Чек ККМ на возврат №%1 от %2'"), НомерДокумента,
			Формат(Параметр.Дата, "ДЛФ=D;"));
		Элементы.СоздатьЧекККМНаОснованииЗаказа.ЦветТекста = WebЦвета.Серый;
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Если ИзменилосьКоличество Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти();
		КонецЕсли; 
		
	КонецЕсли;
	
	Если Истина И ИмяСобытия = "ОбновитьФормыПослеСнятияZОтчета" Тогда
		ОбновитьВидимостьНадписиИстеклоБолее24Часов();
		
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_ПолучитьСостояниеКассовойСменыНаСервере", Истина, Ложь);
		СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
		Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
			ДополнитьСтруктуруСостоянияКассовойСмены(СтруктураСостояниеКассовойСмены);
		КонецЕсли;
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	КонецЕсли;
	
	// УНФ.ПанельКонтактнойИнформации
	Если ИспользоватьЗаказыВРозничнойТорговле И КонтактнаяИнформацияПанельУНФКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьПанельКонтактнойИнформации();
	КонецЕсли;
	// Конец УНФ.ПанельКонтактнойИнформации
	
	// Наборы
	Если НаборыКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ОбновитьСоставНабора(Параметр.НоменклатураНабора, Параметр.ХарактеристикаНабора, Параметр.Количество, 
			Параметр.Цена, Параметр.СоставНабора);
		ПересчитатьДокументНаКлиенте();
		//Ячейки
		ОбновитьДоступностьЯчеек();
		ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
		// Конец Ячейки
	КонецЕсли; 
	// Конец Наборы
	
	Если ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		УстановитьВидимостьДоговора();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

// ИнтеграцияГосИС
&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец ИнтеграцияГосИС

&НаСервере
Процедура ОбновитьВидимостьНадписиИстеклоБолее24Часов(СтруктураСостояниеКассовойСмены = Неопределено)

	Дата = ТекущаяДатаСеанса();
	
	Если СтруктураСостояниеКассовойСмены = Неопределено Тогда
		СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
		Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
			ДополнитьСтруктуруСостоянияКассовойСмены(СтруктураСостояниеКассовойСмены);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьНадписи = Ложь;
	Если СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
		ТекстСообщения = НСтр("ru='Кассовая смена открыта'");
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(Объект.КассоваяСмена, Дата, ТекстСообщения) Тогда
			Если СтрНайти(ТекстСообщения, "24") > 0 Тогда
				Элементы.НадписьСМоментаОткрытияСменыПрошлоБолее24Часов.Заголовок = ТекстСообщения;
				УстановитьВидимостьНадписи = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Элементы.НадписьСМоментаОткрытияСменыПрошлоБолее24Часов.Видимость = УстановитьВидимостьНадписи;
	Элементы.ЗакрытьСменуМК.Видимость = УстановитьВидимостьНадписи;
	
КонецПроцедуры

// Процедура - обработчик события ПередЗагрузкойДанныхИзНастроекНаСервере.
//
&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	СписокДляСохранения = Настройки.Получить("СписокДляСохраненияНастроек");
	Если ТипЗнч(СписокДляСохранения) = Тип("СписокЗначений") Тогда
		// Восстановление периодов.
		ВидПериода = СписокДляСохранения.Получить(0).Значение;
		Если ВидПериода = ЗаПроизвольныйПериод Тогда
			ДатаНачала = СписокДляСохранения.Получить(1).Значение;
			ДатаОкончания = СписокДляСохранения.Получить(2).Значение;
			Если ВидПериода <> ВидПериодаЖурналаПеречисление ИЛИ Элементы.Список.Период.ДатаНачала <> ДатаНачала ИЛИ Элементы.Список.Период.ДатаОкончания <> ДатаОкончания Тогда
				УстановитьПериодНаСервере(ВидПериода, "Список", Новый СтандартныйПериод(ДатаНачала, ДатаОкончания));
			КонецЕсли;
		ИначеЕсли ВидПериода <> ВидПериодаЖурналаПеречисление Тогда
			УстановитьПериодНаСервере(ВидПериода, "Список");
		КонецЕсли;
		
		ВидПериода = СписокДляСохранения.Получить(3).Значение;
		Если ВидПериода = ЗаПроизвольныйПериод Тогда
			ДатаНачала = СписокДляСохранения.Получить(4).Значение;
			ДатаОкончания = СписокДляСохранения.Получить(5).Значение;
			Если ВидПериода <> ВидПериодаЧековККМПеречисление ИЛИ Элементы.СписокЧековККМ.Период.ДатаНачала <> ДатаНачала ИЛИ Элементы.СписокЧековККМ.Период.ДатаОкончания <> ДатаОкончания Тогда
				УстановитьПериодНаСервере(ВидПериода, "СписокЧековККМ", Новый СтандартныйПериод(ДатаНачала, ДатаОкончания));
			КонецЕсли;
		ИначеЕсли ВидПериода <> ВидПериодаЧековККМПеречисление Тогда
			УстановитьПериодНаСервере(ВидПериода, "СписокЧековККМ");
		КонецЕсли;
		
		ВидПериода = СписокДляСохранения.Получить(6).Значение;
		Если ВидПериода = ЗаПроизвольныйПериод Тогда
			ДатаНачала = СписокДляСохранения.Получить(7).Значение;
			ДатаОкончания = СписокДляСохранения.Получить(8).Значение;
			Если ВидПериода <> ВидПериодаЧековККМНаВозвратПеречисление ИЛИ Элементы.СписокЧековККМНаВозврат.Период.ДатаНачала <> ДатаНачала ИЛИ Элементы.СписокЧековККМНаВозврат.Период.ДатаОкончания <> ДатаОкончания Тогда
				УстановитьПериодНаСервере(ВидПериода, "СписокЧековККМНаВозврат", Новый СтандартныйПериод(ДатаНачала, ДатаОкончания));
			КонецЕсли;
		ИначеЕсли ВидПериода <> ВидПериодаЧековККМНаВозвратПеречисление Тогда
			УстановитьПериодНаСервере(ВидПериода, "СписокЧековККМНаВозврат");
		КонецЕсли;
		
		Если СписокДляСохранения.Количество() > 10 Тогда
			ДатаНачала = СписокДляСохранения.Получить(10).Значение;
			ДатаОкончания = СписокДляСохранения.Получить(11).Значение;
			Если Элементы.СписокЗаказов.Период.ДатаНачала <> ДатаНачала ИЛИ Элементы.СписокЗаказов.Период.ДатаОкончания <> ДатаОкончания Тогда
				УстановитьПериодНаСервере(ЗаПроизвольныйПериод, "СписокЗаказов", Новый СтандартныйПериод(ДатаНачала, ДатаОкончания));
			КонецЕсли;
		КонецЕсли;
		
		// Восстановление текущей страницы.
		Если ЭтоМобильныйКлиент Тогда
			Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница = Элементы.ГруппаПродажаМК;
		Иначе
			ИмяТекущейСтраницы = СписокДляСохранения.Получить(9).Значение;
			Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
				Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница = Элементы[ИмяТекущейСтраницы];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриСохраненииДанныхВНастройкахНаСервере.
//
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	СписокДляСохраненияНастроек = Новый СписокЗначений;
	// Настройки периодов. Элементы 0 - 8.
	СписокДляСохраненияНастроек.Добавить(ВидПериодаЖурналаПеречисление);
	СписокДляСохраненияНастроек.Добавить(Элементы.Список.Период.ДатаНачала);
	СписокДляСохраненияНастроек.Добавить(Элементы.Список.Период.ДатаОкончания);
	СписокДляСохраненияНастроек.Добавить(ВидПериодаЧековККМПеречисление);
	СписокДляСохраненияНастроек.Добавить(Элементы.СписокЧековККМ.Период.ДатаНачала);
	СписокДляСохраненияНастроек.Добавить(Элементы.СписокЧековККМ.Период.ДатаОкончания);
	СписокДляСохраненияНастроек.Добавить(ВидПериодаЧековККМНаВозвратПеречисление);
	СписокДляСохраненияНастроек.Добавить(Элементы.СписокЧековККМНаВозврат.Период.ДатаНачала);
	СписокДляСохраненияНастроек.Добавить(Элементы.СписокЧековККМНаВозврат.Период.ДатаОкончания);
	// Текущая страница. Элемент 9.
	Если Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница <> Неопределено Тогда
		СписокДляСохраненияНастроек.Добавить(Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница.Имя);
	Иначе
		СписокДляСохраненияНастроек.Добавить("ГруппаПродажа");
	КонецЕсли;
	
	СписокДляСохраненияНастроек.Добавить(Элементы.СписокЗаказов.Период.ДатаНачала);
	СписокДляСохраненияНастроек.Добавить(Элементы.СписокЗаказов.Период.ДатаОкончания);
	СписокДляСохраненияНастроек.Добавить(ПереключательЖурналБыстрыеТовары);
	
	Настройки.Вставить("СписокДляСохраненияНастроек", СписокДляСохраненияНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияФормы(пПриСозданииНаСервере = Истина)
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		ДополнитьСтруктуруСостоянияКассовойСмены(СтруктураСостояниеКассовойСмены);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены);
	Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	ОстатокВКассе = СтруктураСостояниеКассовойСмены.НаличностьВКассе;
	ОстатокВКассеСтрока = "" + ОстатокВКассе;
	
	Объект.КассаККМ = КассаККМ;
	Объект.СтруктурнаяЕдиница = КассаККМ.СтруктурнаяЕдиница;
	Объект.ВидЦен = ВидЦен(КассаККМ.СтруктурнаяЕдиница.РозничныйВидЦен);
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = КассаККМ.ВалютаДенежныхСредств;
	КонецЕсли;
	// При оформлении первого чека по выбранной кассе.
	Если НЕ ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.КассоваяСмена) Тогда
		Если НЕ Объект.ВидЦен.Пустая() Тогда
			Объект.СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидЦен, "ЦенаВключаетНДС");
		КонецЕсли;
	КонецЕсли;
	
	Объект.Организация = Объект.КассаККМ.Владелец;
	Объект.Подразделение = Объект.КассаККМ.Подразделение;
	Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойОтветственный");
	
	ЕстьПравоОформлятьРКО = ПравоДоступа("Добавление", Метаданные.Документы.РасходИзКассы);
	// Конец РМК
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	// Временно.
	Объект.НДСВключатьВСтоимость = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПолучитьСписокВыбораВидовПлатежныхКарт();
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПолучитьСсылкиНаОборудование();
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	
	КонтрольНаСкладеОтключен = НЕ Константы.КонтролироватьОстаткиПриПроведении.Получить()
						   ИЛИ НЕ Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить();
	
	Элементы.СнятьРезервирование.Видимость = НЕ КонтрольНаСкладеОтключен;
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДокумента));
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Константы.НациональнаяВалюта.Получить()));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И (НЕ Параметры.Свойство("ЗначениеКопирования")
			ИЛИ НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)) Тогда
		
		ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда	
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница)
		И НЕ ЗначениеЗаполнено(Объект.СпециальныйНалоговыйРежим) Тогда
		Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
		Если Объект.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН Тогда
			ЗаполнитьПатент();
		КонецЕсли;
	КонецЕсли;
	
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(ПолучитьСтруктуруНадписиЦеныИВалютаНаСервере());
	
	КассаККМИспользоватьБезПодключенияОборудования = Объект.КассаККМ.ИспользоватьБезПодключенияОборудования;
	
	ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСУНФВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС();
	ИспользуетсяМаркировкаТабачнойПродукции = ИнтеграцияИСМПВызовСервера.ВестиУчетМаркируемойПродукции(Перечисления.ВидыПродукцииИС.Табак);
	ИспользуетсяМаркировкаОбуви = ИнтеграцияИСМПВызовСервера.ВестиУчетМаркируемойПродукции(Перечисления.ВидыПродукцииИС.Обувь);
	ИспользуетсяМаркировкаШинИПокрышек = ПолучитьФункциональнуюОпцию("ВестиУчетШинИПокрышек");
	
	УстановитьДоступностьПечатиЧека();
	
	Элементы.ЗапасыСуммаСкидкиНаценки.Видимость = Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить();
	
	Если Объект.Статус = Перечисления.СтатусыЧековККМ.Пробит
	И НЕ КассаККМИспользоватьБезПодключенияОборудования Тогда
		УстановитьРежимТолькоПросмотр();
	КонецЕсли;
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	ПродажаСоСклада = Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад;
	
	Элементы.ЗапасыЦена.ТолькоПросмотр 					= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСумма.ТолькоПросмотр 				= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаСкидкиНаценки.ТолькоПросмотр 	= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр 				= НЕ РазрешеноРедактированиеЦенДокументов;
	
	// СтруктурнаяЕдиница - пустой быть не может
	ТипСтруктурнойЕдиницы = Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы;
	
	// АвтоматическиеСкидки.
	АвтоматическиеСкидкиПриСозданииНаСервере();
	
	// РМК
	СменаОткрыта = Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта;
	
	Список.Параметры.УстановитьЗначениеПараметра("КассаККМ", КассаККМ);
	Список.Параметры.УстановитьЗначениеПараметра("БезПодключенияОборудования", КассаККМИспользоватьБезПодключенияОборудования);
	Список.Параметры.УстановитьЗначениеПараметра("Статус", СменаОткрыта);
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("КассоваяСмена", Документы.ОтчетОРозничныхПродажах.ПустаяСсылка());
	
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("КассаККМ", КассаККМ);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("БезПодключенияОборудования", КассаККМИспользоватьБезПодключенияОборудования);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("Статус", СменаОткрыта);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Истина);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("КассоваяСмена", Документы.ОтчетОРозничныхПродажах.ПустаяСсылка());
	
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("КассаККМ", КассаККМ);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("БезПодключенияОборудования", КассаККМИспользоватьБезПодключенияОборудования);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("Статус", СменаОткрыта);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Истина);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("КассоваяСмена", Документы.ОтчетОРозничныхПродажах.ПустаяСсылка());
	
	УстановитьОтборОтложенныхЧековПоКассовойСмене();
	УстановитьОтборОтложенныхЧековПоОтветственному();
	ПересчитатьОтложенныеЧеки();
	
	// СтруктурнаяЕдиница - пустой быть не может
	ТипСтруктурнойЕдиницы = Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы;
	
	СформироватьЗаголовок(СтруктураСостояниеКассовойСмены);
	
	// Быстрые товары и настройки кнопок и команд меню.
	ЗаполнитьБыстрыеТовары(пПриСозданииНаСервере);
	НастроитьКнопкиИКомандыМеню();
	
	ЦветВажныхКнопок = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	
	// Виды периодов.
	ЗаТекущуюСмену = Перечисления.ВидыПериодовРМК.ЗаТекущуюСмену;
	ЗаПроизвольныйПериод = Перечисления.ВидыПериодовРМК.ЗаПроизвольныйПериод;
	ЗаВчерашнийДень = Перечисления.ВидыПериодовРМК.ЗаВчерашнийДень;
	ЗаВесьПериод = Перечисления.ВидыПериодовРМК.ЗаВесьПериод;
	ЗаПрошлуюСмену = Перечисления.ВидыПериодовРМК.ЗаПрошлуюСмену;
	
	ЗаполнитьСпискиВидыПериодов();
	
	УстановитьПериодНаСервере(ЗаТекущуюСмену, "СписокЧековККМ");
	УстановитьПериодНаСервере(ЗаТекущуюСмену, "СписокЧековККМНаВозврат");
	УстановитьПериодНаСервере(ЗаТекущуюСмену, "Список");
	УстановитьПериодНаСервере(ЗаПроизвольныйПериод, "СписокЗаказов", Новый СтандартныйПериод);
	
	ПереключательЖурналБыстрыеТовары = 1;
	
	// Установим формат для текущей даты: ДФ=Ч:мм
	ДинамическиеСпискиУНФ.ОтображатьТолькоВремяДляТекущейДаты(Список);
	ДинамическиеСпискиУНФ.ОтображатьТолькоВремяДляТекущейДаты(СписокЧековККМНаВозврат);
	ДинамическиеСпискиУНФ.ОтображатьТолькоВремяДляТекущейДаты(СписокЗаказов);
	ДинамическиеСпискиУНФ.ОтображатьТолькоВремяДляТекущейДаты(СписокОтложенныхЧеков);
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		ДополнитьСтруктуруСостоянияКассовойСмены(СтруктураСостояниеКассовойСмены);
	КонецЕсли;
	ОбновитьВидимостьНадписиИстеклоБолее24Часов(СтруктураСостояниеКассовойСмены);
	
	ТипНоменклатурыЗапас = Перечисления.ТипыНоменклатуры.Запас;
	ТипНоменклатурыУслуга = Перечисления.ТипыНоменклатуры.Услуга;
	
	ТипыДенежныхСредствБезналичные = Перечисления.ТипыДенежныхСредств.Безналичные;
	ТипыДенежныхСредствНаличные = Перечисления.ТипыДенежныхСредств.Наличные;
	// Конец РМК
	
	// Заказы покупателей в Рознице
	НастроитьСписокЗаказовПокупателейПриСозданииНаСервере();
	// Конец Заказы покупателей в Рознице
	
	НастроитьСписокОтложенныхЧековПриСозданииНаСервере();
	
	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	
	// Наборы
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
		ОбновитьПризнакиНабора(Объект.Запасы);
	КонецЕсли;
	// Конец Наборы
	
	ТребуетсяПроверкаКассираПриСменеОтветственного = ТребуетсяПроверкаКассираПриСменеОтветственного();
	УстановитьВидимостьПредупрежденияОКассире();
	
	НастроитьЭлементыСтруктурныхЕдиниц();
	УстановитьВидимостьОтПользовательскихНастроек();
	
	УправлениеФормой(ЭтотОбъект);
	
	УправлениеВидимостьюЗакладок();
	
	НачальнаяСтраница = РМКВходитВСоставНачальнойСтраницы();
	ИспользоватьАвторизациюПоОтветственному = ?(ЗначениеЗаполнено(КассаККМ.ИспользоватьАвторизациюПоОтветственному), КассаККМ.ИспользоватьАвторизациюПоОтветственному, Ложь);
	
КонецПроцедуры

&НаСервере
Функция ВидЦен(РозничныйВидЦен)
	
	Если ЗначениеЗаполнено(РозничныйВидЦен) И УправлениеДоступом.ЧтениеРазрешено(РозничныйВидЦен) Тогда
		Возврат РозничныйВидЦен;
	КонецЕсли;
	
	Если УправлениеДоступом.ЧтениеРазрешено(Справочники.ВидыЦен.Оптовая) Тогда
		// Значение заполнения реквизита ВидЦен в документе ОтчетОРозничныхПродажах.
		Возврат Справочники.ВидыЦен.Оптовая;
	КонецЕсли;
	
	Возврат Справочники.ВидыЦен.ПустаяСсылка();
	
КонецФункции

&НаСервере
Процедура УправлениеВидимостьюЗакладок()
	
	ДоступныВозвраты = ПравоДоступа("Просмотр", Метаданные.Документы.ПриходнаяНакладная);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВозврат", "Видимость",
		ДоступныВозвраты);
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.ГруппаПродажаИВозврат.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		Элементы.ГруппаПродажа.Видимость = Ложь;
		Элементы.ГруппаВозврат.Видимость = Ложь;
		Элементы.ПродажаПоЗаказам.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМВыбрана(Результат, Параметры) Экспорт
	Если Результат = Неопределено Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	КассаККМ = Результат.КассаККМ;
	Объект.ЭквайринговыйТерминал = Результат.ЭквайринговыйТерминал;
	
	ЭтаФорма.Доступность = Истина;
	ИнициализацияФормы(Ложь);
	
	Если ИспользоватьАвторизациюПоОтветственному Тогда
		АвторизацияПоОтветственному();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьСотрудника(Команда)
	
	РабочееМестоКассираКлиент.ОткрытьФормуСотрудника(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти = "Запасы";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПодборВыполнить()

// Процедура - обработчик команды ПоказатьЖурнал формы. Обходной путь для реализации быстрых клавиш для переключателя.
//
&НаКлиенте
Процедура ПоказатьЖурнал(Команда)
	
	ПереключательЖурналБыстрыеТовары = 1;
	ПереключательЖурналБыстрыеТоварыПриИзменении(Элементы.ПереключательЖурналБыстрыеТовары);
	
КонецПроцедуры

// Процедура - обработчик команды ПоказатьБыстрыеТовары формы. Обходной путь для реализации быстрых клавиш для переключателя.
//
&НаКлиенте
Процедура ПоказатьБыстрыеТовары(Команда)
	
	ПереключательЖурналБыстрыеТовары = 2;
	ПереключательЖурналБыстрыеТоварыПриИзменении(Элементы.ПереключательЖурналБыстрыеТовары);
	
КонецПроцедуры

// Процедура - обработчик команды ПоказатьМоюКассу формы. Обходной путь для реализации быстрых клавиш для переключателя.
//
&НаКлиенте
Процедура ПоказатьМоюКассу(Команда)
	
	ПереключательЖурналБыстрыеТовары = 3;
	ПереключательЖурналБыстрыеТоварыПриИзменении(Элементы.ПереключательЖурналБыстрыеТовары);
	
КонецПроцедуры

// Процедура - обработчик команды НастройкаБыстрыхТоваров формы
//
&НаКлиенте
Процедура НастройкаБыстрыхТоваров(Команда)
	
	НастройкаБыстрыхТоваровОбработкаКоманды("НастройкаБыстрыхТоваров_2");
	
КонецПроцедуры

// Процедура - обработчик команды НастройкаБыстрыхТоваров формы
//
&НаКлиенте
Процедура НастройкаБыстрыхТоваровЖурнал(Команда)
	
	НастройкаБыстрыхТоваровОбработкаКоманды("НастройкаБыстрыхТоваров");
	
КонецПроцедуры

// Процедура - обработчик команды СоздатьПриходнуюНакладнуюНаВозврат формы
//
&НаКлиенте
Процедура СоздатьПриходнуюНакладнуюНаВозврат(Команда)
	
	Если ЧекНеПредъявлен Тогда
		// СтандартныеПодсистемы.ОценкаПроизводительности
		ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыПриходнаяНакладнаяВозврат");
		// СтандартныеПодсистемы.ОценкаПроизводительности
		ОткрытьФорму("Документ.ПриходнаяНакладная.ФормаОбъекта", Новый Структура("РМК, ВидОперацииВозврат", Истина, Истина), ЭтотОбъект, УникальныйИдентификатор);
	Иначе
		ТекущиеДанные = Элементы.СписокЧековККМ.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыПриходнаяНакладнаяВозврат");
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОткрытьФорму("Документ.ПриходнаяНакладная.ФормаОбъекта", Новый Структура("Основание, РМК", ТекущиеДанные.Ссылка, Истина), ЭтотОбъект, УникальныйИдентификатор);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не выбран чек ККМ.'");
			Сообщение.Поле = "СписокЧековККМ";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды СоздатьЧекККМНаВозврат формы
//
&НаКлиенте
Процедура СоздатьЧекККМНаВозврат(Команда)
	
	ТекущиеДанные = Элементы.СписокЧековККМ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЧекККМНаВозврат.Пустая() Или МожноСоздатьЧекНаВозврат(ТекущиеДанные.Ссылка, ТекущиеДанные.СуммаДокумента) Тогда
			ПроверитьСостояниеКассовойСмены();
			ОткрытьФорму("Документ.ЧекККМВозврат.ФормаОбъекта", Новый Структура("Основание", ТекущиеДанные.Ссылка), ЭтотОбъект);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Чек на возврат уже создан.'");
			Сообщение.Поле = "Элементы.СоздатьЧекККМНаВозврат";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбран чек ККМ.'");
		Сообщение.Поле = "СписокЧековККМ";
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик команды СоздатьЧекККМНаВозврат формы
//
&НаКлиенте
Процедура СоздатьЧекККМНаОснованииЗаказа(Команда)
	
	ПроверитьСостояниеКассовойСмены();
	
	Если НЕ ЧекККМ.Пустая() И ЕстьПередачаТоваров Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Ранее по заказу уже оформлялись чеки: '") + Элементы.ДекорацияЧекККМ.Заголовок;
		Сообщение.Поле = "Элементы.СоздатьЧекККМНаОснованииЗаказа";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокЗаказов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ОрганизацияЗаказаПодходит(ТекущиеДанные.Ссылка) Тогда
			СтароеПоложениеСклада = Объект.ПоложениеСклада;
			ПараметрыНовогоЧекаККМ = Новый Структура("Основание, КассаККМ, РМК, ДоступныеСклады", ТекущиеДанные.Ссылка, КассаККМ, Истина, СписокДоступныхСкладов);
			ЗаполнитьТекущийЧекПоЗаказу(ПараметрыНовогоЧекаККМ);
			Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница = Элементы.ГруппаПродажа;
			Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.ОсновныеРеквизиты;
			ПереключательЖурналБыстрыеТовары = 3;
			УстановитьВидимостьДоговора();
			ПересчитатьДокументНаКлиенте();
			Если Объект.ПоложениеСклада <> СтароеПоложениеСклада Тогда
				ШапкаТабличнаяЧастьЗавершениеНаСервере(
					Новый Структура("ПоложениеСкладаВДокументахОтгрузки, ЗаполнениеПоЗаказу",
									Объект.ПоложениеСклада, Истина));
			КонецЕсли;
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Организация заказа не соответствует организации РМК. Измените организацию в РМК, чтобы создать чек по выбранному заказу
			|или включите учет по компании в целом.'");
			Сообщение.Поле = "Элементы.СоздатьЧекККМНаОснованииЗаказа";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбран заказ.'");
		Сообщение.Поле = "СписокЗаказов";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды СоздатьРКОНаОснованииПриходнойНакладной формы
//
&НаКлиенте
Процедура СоздатьРКОНаОснованииПриходнойНакладной(Команда)
	
	Если ПриходнаяНакладнаяНаВозврат.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'В первую очередь нужно создать приходную накладную на возврат.'");
		Сообщение.Поле = "СоздатьПриходнуюНакладнуюНаВозврат";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
	Иначе
		ТекущиеДанные = Элементы.СписокЧековККМ.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено ИЛИ ЧекНеПредъявлен Тогда
			ОткрытьФорму("Документ.РасходИзКассы.ФормаОбъекта", Новый Структура("Основание, РМК", ПриходнаяНакладнаяНаВозврат, Истина), ЭтотОбъект, УникальныйИдентификатор);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не выбран чек ККМ.'");
			Сообщение.Поле = "СписокЧековККМ";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораТипаВозврата(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОтвета.Значение = "ПН" Тогда
		
		СоздатьПриходнуюНакладнуюНаВозврат(Неопределено);
		
	ИначеЕсли РезультатОтвета.Значение = "Чек" Тогда
		
		СоздатьЧекККМНаВозврат(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСостояниеКассовойСмены(ПоказыватьПредупреждение = Ложь)
	
	ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_ПолучитьСостояниеКассовойСменыНаСервере", Истина, Ложь);
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		ДополнитьСтруктуруСостоянияКассовойСмены(СтруктураСостояниеКассовойСмены);
	КонецЕсли;
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	
	Если НЕ СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
		ОткрытьКассовуюСмену();
		УстановитьОтборОтложенныхЧековПоКассовойСмене();
	ИначеЕсли ПоказыватьПредупреждение Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Кассовая смена уже открыта'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСостояниеКассовойСменыДляМассовыхОпераций(ПоказыватьПредупреждение = Ложь)
	
	Если СтруктураСостояниеКассовойСмены = Неопределено Тогда
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_ПолучитьСостояниеКассовойСменыНаСервере", Истина, Ложь);
		СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
		Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
			ДополнитьСтруктуруСостоянияКассовойСмены(СтруктураСостояниеКассовойСмены);
		КонецЕсли;
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	КонецЕсли;
	Если НЕ СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
		ОткрытьКассовуюСмену();
		УстановитьОтборОтложенныхЧековПоКассовойСмене();
	ИначеЕсли ПоказыватьПредупреждение Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Кассовая смена уже открыта'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСмену(Команда)
	
	ПроверитьСостояниеКассовойСмены(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОплату(Команда)
	
	Если Элементы.СвернутьРазвернутьБоковуюПанельКоманд.Заголовок = ">>" Тогда
		СвернутьРазвернутьБоковуюПанельКомандНажатие(Неопределено);
	КонецЕсли;
	
	КассаККМПриОткрытии = КассаККМ;
	ЭквайринговыйТерминалПриОткрытии = Объект.ЭквайринговыйТерминал;
	НалоговыйРежимПриОткрытии = Объект.СпециальныйНалоговыйРежим;
	ПатентПриОткрытии = Объект.Патент;
	
	Если Команда.Имя = "ПринятьПредоплату" Тогда
		
		Объект.ОперацияСДенежнымиСредствами = Истина;
		Оплатить("");
		
	Иначе
		
		Объект.ОперацияСДенежнымиСредствами = Ложь;
		Оплатить("");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОплатуНаличными(Команда)
	Оплатить(ТипыДенежныхСредствНаличные);
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОплатуКартой(Команда)
	Оплатить(ТипыДенежныхСредствБезналичные);
КонецПроцедуры

// Процедура - обработчик команды ПринятьОплату формы.
//
&НаКлиенте
Процедура Оплатить(ТипыДенежныхСредств)
	
	// РаспределениеПродаж
	Если СписокРаспределенныхЧеков.Количество() > 0 Тогда
		НуженПересчет = ЗагрузитьСледующийРаспределенныйЧек();
		Если НуженПересчет Тогда
			ПересчитатьДокументНаКлиенте();
		КонецЕсли;
	Иначе
		Если РаспределениеНоменклатурыНастроено Тогда
			РассчитатьСкидкиНаценки(Команды.РассчитатьСкидкиНаценки);
			РаспределитьЗапасыПоЧекам();
			Если СписокРаспределенныхЧеков.Количество() > 0 Тогда
				ЗапретПересчетаСкидок = Истина;
				ЭтоПервыйЧек = Истина;
				НуженПересчет = ЗагрузитьСледующийРаспределенныйЧек(ЭтоПервыйЧек);
				Если НуженПересчет Тогда
					ПересчитатьДокументНаКлиенте();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец РаспределениеПродаж
	
	Если РаспределениеНоменклатурыНастроено Тогда
		ПроверитьСостояниеКассовойСмены();
	Иначе
		ПроверитьСостояниеКассовойСменыДляМассовыхОпераций();
	КонецЕсли;
	
	// Бонусы
	Если Не Объект.ОперацияСДенежнымиСредствами Тогда
		РассчитатьБонусыНаКлиенте();
	КонецЕсли;
	// Конец Бонусы
	
	Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.СтатусКассовойСмены) Тогда
		ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены,, ПолучитьСтрокуРеквизитыИсключения());
		Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	КонецЕсли;
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		СуммаДляПроверки = Объект.СуммаДокумента;
	Иначе
		СуммаДляПроверки = Объект.Запасы.Итог("Всего");
	КонецЕсли;
	
	СуммаДоРасчетаАвтоСкидок = СуммаДляПроверки;
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Объект.Запасы.Количество() > 0 И Не Объект.СкидкиРассчитаны И Не ЗапретПересчетаСкидок Тогда
			РассчитатьСкидкиНаценки(Команды.РассчитатьСкидкиНаценки);
		КонецЕсли;
	КонецЕсли;
	
	// Вызовем проверку документа, т.к. есть ещё более специфичные проверки, например, серийных номеров.
	НужноОбновитьФормуСписка = Ложь;
	Если НЕ ПроверкаЗаполненияПрошлаУспешно(НужноОбновитьФормуСписка) Тогда
		Возврат;
	КонецЕсли;
	Если НужноОбновитьФормуСписка Тогда
		ПараметрОповещения = Новый Структура("НеОбновлятьОстатокВКассе", Истина);
		ОбновитьФормуСпискаДокументовНаКлиенте(ПараметрОповещения);
	КонецЕсли;
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		Объект.Предоплата.Очистить();
	КонецЕсли;
	
	Если СуммаДляПроверки <= 0 И Не Объект.ОперацияСДенежнымиСредствами Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОплатитьОбработкаОтветаНаВопрос", ЭтотОбъект, Новый Структура("СуммаДоРасчетаАвтоСкидок, ТипыДенежныхСредств", СуммаДоРасчетаАвтоСкидок, ТипыДенежныхСредств)),
			НСтр("ru = 'Сумма к оплате = 0. Уверены, что нужно продолжить?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет,
			НСтр("ru = 'Запрос о подтверждении действия'"));
	Иначе
		ОплатитьФрагмент(СуммаДоРасчетаАвтоСкидок, ТипыДенежныхСредств);
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ПроверкаЗаполненияПрошлаУспешно(НужноОбновитьФормуСписка)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	РезультатЗаполнения = ДокОбъект.ПроверитьЗаполнение();
	Если РезультатЗаполнения Тогда
		Если Не КонтрольНаСкладеОтключен Тогда
			Если Не ЗарезервироватьНаСервере() Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить резервирование.'"));
				Если Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница <> Элементы.СтраницаДанныеПоСтроке Тогда
					Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница = Элементы.СтраницаДанныеПоСтроке;
				КонецЕсли;
				Возврат Ложь;
			Иначе
				ЗаполнитьОписаниеДляТЧЗапасыНаСервере();
			КонецЕсли;
			
			НужноОбновитьФормуСписка = Истина;
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОплатитьОбработкаОтветаНаВопрос(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		ОплатитьФрагмент(ДополнительныеПараметры.СуммаДоРасчетаАвтоСкидок, ДополнительныеПараметры.ТипыДенежныхСредств);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды ПринятьОплату формы.
//
&НаКлиенте
Процедура ОплатитьФрагмент(СуммаДоРасчетаАвтоСкидок, ТипыДенежныхСредств)
	
	Оповещение = Новый ОписаниеОповещения("ОплатитьЗавершение", ЭтаФорма);
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("Объект", Объект);
	СтруктураПараметров.Вставить("БезналичнаяОплата", Объект.БезналичнаяОплата);
	СтруктураПараметров.Вставить("СуммаДокумента", Объект.СуммаДокумента);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ВидыКарт", Элементы.ОплатаПлатежнымиКартамиВидПлатежнойКарты.СписокВыбора);
	СтруктураПараметров.Вставить("КассаККМ", КассаККМ);
	СтруктураПараметров.Вставить("ИспользоватьПодключаемоеОборудование", ИспользоватьПодключаемоеОборудование);
	СтруктураПараметров.Вставить("ЭквайринговыйТерминал", Объект.ЭквайринговыйТерминал);
	СтруктураПараметров.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	СтруктураПараметров.Вставить("СуммаДоРасчетаАвтоСкидок", СуммаДоРасчетаАвтоСкидок);
	СтруктураПараметров.Вставить("ТипыДенежныхСредств", ТипыДенежныхСредств);
	СтруктураПараметров.Вставить("Заказ", Объект.Заказ);
	СтруктураПараметров.Вставить("СписокЧековКОплате", СписокРаспределенныхЧеков);
	СтруктураПараметров.Вставить("Сдача", Сдача);
	СтруктураПараметров.Вставить("СформироватьТоварныйЧек", ПечататьТоварныйЧекПоУмолчанию);
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаОплаты", СтруктураПараметров, ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

// Процедура обновляет данные основного реквизита формы после закрытия формы оплаты.
//
&НаСервере
Процедура ОбновитьДокументНаСервере(ПараметрОбъект)
	
	ЗначениеВДанныеФормы(ДанныеФормыВЗначение(ПараметрОбъект, Тип("ДокументОбъект.ЧекККМ")), Объект);
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка, , УникальныйИдентификатор);
		Исключение
			//
		КонецПопытки;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		УстановитьОписаниеДляСтрокиТЧЗапасы(Объект, ТекущаяСтрока);
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	ОбновитьТипНоменклатурыЗапас();
	
	Если ФОВестиУчетМаркируемойПродукцииИСМП Тогда
		Для Каждого Строка Из Объект.Запасы Цикл
			ИнтеграцияИСМПУНФ.ЗаполнитьСлужебныеРеквизитыИСМПВСтрокеТЧ(Строка);
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		АгентскиеПлатежиУНФ.УправлениеЭлементамиАгентскогоВознаграждения(ЭтотОбъект, Объект);
	КонецЕсли;
	
	ЗаполнитьКомиссиюЭквайрера();
	
КонецПроцедуры

// Процедура - обработчик команды ПринятьОплату. Вызывается после закрытия формы оплаты.
//
&НаКлиенте
Процедура ОплатитьЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Были оплаты пластиковыми картами или отмены оплат пластиковыми картами и в этом случае документ был записан или проведён.
		ОбновитьДокументНаСервере(Результат.Объект);
		
		Если Результат.Кнопка = "Пробить чек" Тогда
			
			// РаспределениеПродаж
			Если Результат.Свойство("ОбщаяОплата") И Результат.ОбщаяОплата Тогда
				
				ОплатитьРаспределенныеЧеки(Результат);
				Возврат;
				
			Иначе
			// Конец РаспределениеПродаж
			
				Объект.ПолученоНаличными = Результат.Наличными;
				
				// Заполним реквизит "ФормаОплаты".
				Если Объект.ПолученоНаличными > 0 И Объект.БезналичнаяОплата.Количество() = 0 Тогда
					Объект.ФормаОплаты = ТипыДенежныхСредствНаличные;
				ИначеЕсли Объект.ПолученоНаличными = 0 И Объект.БезналичнаяОплата.Количество() > 0 Тогда
					Объект.ФормаОплаты = ТипыДенежныхСредствБезналичные;
				Иначе
					Объект.ФормаОплаты = Неопределено;
				КонецЕсли;
				
				Сдача = Формат(Результат.Сдача, "ЧДЦ=2");
				Если ЗначениеЗаполнено(Результат.Бонусы) Тогда
					НачисленныеБонусы = СтрШаблон(НСтр("ru = 'Начислено бонусов: %1 б.'"), Результат.Бонусы);
				Иначе
					НачисленныеБонусы = "";
				КонецЕсли;
			
				ПоказатьСтраницуДанныеПоСтроке = Ложь;
				ПересчитатьДокументНаКлиенте(ПоказатьСтраницуДанныеПоСтроке);
				
				СформироватьТоварныйЧек = Результат.СформироватьТоварныйЧек;
				
				ПробитьЧекВыполнить(Команды.ПробитьЧек, СформироватьТоварныйЧек);
				
				Если ИспользоватьАвторизациюПоОтветственному Тогда
					АвторизацияПоОтветственному();
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			СкидкиИзменились = Ложь;
			ВосстановитьЗапасыИзРаспределенныхЧеков(СкидкиИзменились);
			Если СкидкиИзменились Тогда
				ТекстПредупреждения = НСтр(
					"ru = 'Если товарный состав будет изменен, произойдет пересчет скидок.
						  |Результат может отличаться от первоначального расчета.
						  |Если необходимо изменить товарный состав, то для сохранения первоначального
						  |результата отмените уже пробитые чеки и заполните документ заново'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
			КонецЕсли;
			
			Если Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница <> Элементы.СтраницаДанныеПоСтроке Тогда
				Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница = Элементы.СтраницаДанныеПоСтроке;
			КонецЕсли;
			
		КонецЕсли;
		
		// РаспределениеПродаж
		Если СписокРаспределенныхЧеков.Количество() > 0 Тогда
			СписокРаспределенныхЧеков.Удалить(0);
		КонецЕсли;
		Если СписокРаспределенныхЧеков.Количество() > 0 Тогда
			Оплатить("");
		Иначе
			Если КассаККМ <> КассаККМПриОткрытии Тогда
				КассаККМ = КассаККМПриОткрытии;
				КассаККМПриИзмененииНаСервере(Новый Структура("ВалютаДенежныхСредств"));
				УстановитьОрганизациюПоВладельцуККМ();
			КонецЕсли;
			Объект.ЭквайринговыйТерминал = ЭквайринговыйТерминалПриОткрытии;
			Объект.СпециальныйНалоговыйРежим = НалоговыйРежимПриОткрытии;
			Объект.Патент = ПатентПриОткрытии;
			ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(ПолучитьСтруктуруНадписиЦеныИВалютаНаКлиенте());
			ЗапретПересчетаСкидок = Ложь;
		КонецЕсли;
		// Конец РаспределениеПродаж
		
	КонецЕсли;
	
	ОбновитьНадписьКнопкиКОплатеНаКлиенте();
	ОбновитьКартинкуДисконтнойКарты();
	
	Если РежимОстаткиИРезервы Тогда
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_ЗаполнитьОстатки", Истина, Ложь);
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	КонецЕсли;
	
	ПересчитатьОтложенныеЧеки();
	УправлениеСтраницейОтложенныеЧеки();
	
КонецПроцедуры

// Процедура - обработчик команды ПечатьТоварногоЧека формы
//
&НаКлиенте
Процедура ПечатьТоварногоЧека(Команда)
	РозничныеПродажиКлиент.НапечататьТоварныйЧек(ЭтотОбъект);
КонецПроцедуры


&НаКлиенте
Процедура ПечатьТоварногоЧека_МК(Команда)
	РозничныеПродажиКлиент.НапечататьТоварныйЧек(ЭтотОбъект, СсылкаНаЧек_МК);
КонецПроцедуры


// Процедура - обработчик команды СтруктураПодчиненности формы
//
&НаКлиенте
Процедура СтруктураПодчиненности(Команда)
	
	ТекущийДокумент = Элементы.СписокЧековККМ.ТекущаяСтрока;
	
	Если ТекущийДокумент <> Неопределено Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаСтруктурыПодчиненности",Новый Структура("ДокументСсылка", ТекущийДокумент),
					ЭтотОбъект,
					ТекущийДокумент.УникальныйИдентификатор(),
					Неопределено
					);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выберите документ.'");
		Сообщение.Поле = "СписокЧековККМ";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды Зарезервировать на сервере.
&НаСервере
Функция ЗарезервироватьНаСервере(ОтменаРезервирования = Ложь)
	
	ВозвращаемоеЗначение = Ложь;
	Если ОтменаРезервирования Тогда
		ТекущийДокумент = Элементы.Список.ТекущаяСтрока;
		Если ЗначениеЗаполнено(ТекущийДокумент) И ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ЧекККМ") Тогда
			ДокОбъект = ТекущийДокумент.ПолучитьОбъект();
			
			СтарыйСтатус = ДокОбъект.Статус;
			
			ДокОбъект.Статус = Неопределено;
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
			
			Попытка
				ДокОбъект.Записать(РежимЗаписи);
				Если Не ДокОбъект.Проведен Тогда
					ВозвращаемоеЗначение = Истина;
					// Если проводим объект, с которым работаем в форме, то нужно обновить объект формы.
					// Такая ситуация возникает в следующем случае. 
					// Включен контроль остатков.
					// 1. Нажать кнопку "Принять оплату". Документ будет записан, т.к. будет выполнено резервирование.
					// 2. В форме оплаты нажать кнопку "Отмена".
					// 3. В списке выбрать текущий документ и выбрать "Еще..."-"Снять резерв".
					// 4. Нажать кнопку "Принять оплату".
					Если ДокОбъект.Ссылка = Объект.Ссылка Тогда
						ЗначениеВДанныеФормы(ДокОбъект, Объект);
					КонецЕсли;
				КонецЕсли;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОписаниеОшибки();
				Сообщение.Поле = "Список";
				Сообщение.Сообщить();
			КонецПопытки;
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не выбран чек ККМ.'");
			Сообщение.Поле = "Список";
			Сообщение.Сообщить();
		КонецЕсли;
	Иначе
		СтарыйСтатус = Объект.Статус;
		
		Объект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован;
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		
		Попытка
			Если НЕ Записать(Новый Структура("РежимЗаписи", РежимЗаписи)) Тогда
				Объект.Статус = СтарыйСтатус;
			Иначе
				ВозвращаемоеЗначение = Истина;
			КонецЕсли;
		Исключение
			Объект.Статус = СтарыйСтатус;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не удалось выполнить проведение документа.'");
			Сообщение.Сообщить();
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			Если СтрНайти(ОписаниеОшибки, НСтр("ru='Не удалось провести'")) = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон(НСтр("ru = 'Описание ошибки: %1'"), ОписаниеОшибки);
				Сообщение.Сообщить();
			КонецЕсли;
		КонецПопытки;
		
		УстановитьДоступностьПечатиЧека();
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции // ЗарезервироватьНаСервере()

// Процедура - обработчик команды СнятьРезервирование.
//
&НаКлиенте
Процедура СнятьРезервирование(Команда)
	
	ЗарезервироватьНаСервере(Истина);
	ОбновитьФормуСпискаДокументовНаКлиенте();
	
КонецПроцедуры // СнятьРезервирование()

&НаКлиенте
Процедура ВыбратьВариантПоУмолчанию(Команда)
	
	Если ЭтоПолноправныйПользователь() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьВариантВозврата", ЭтотОбъект);
		ОткрытьФорму("Обработка.НастройкаПрограммы.Форма",
			Новый Структура("РазделПоУмолчанию", "Продажи"),
			ЭтотОбъект,
			Ложь,,,
			ОписаниеОповещения);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Эта настройка доступна только администратору'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантВозврата(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Элементы.СписокЧековККМ.ТекущаяСтрока) Тогда
		ЗаполнитьСоставЧекаИСсылкиНаДокументыНаСервере(Элементы.СписокЧековККМ.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВариантВозврата()
	
	Возврат Константы.ВариантВозвратаПоЗакрытойСмене.Получить();
	
КонецФункции

&НаСервере
Функция ЭтоПолноправныйПользователь()
	
	Возврат Пользователи.ЭтоПолноправныйПользователь();
	
КонецФункции

&НаСервере
Функция ЗаполненПоЧекуНаСервере(СсылкаНаДокумент)
	
	ТекстСообщения = НСтр("ru = 'Заполнение возможно только на основании чека ККМ по предоплате'");
	
	Если ТипЗнч(СсылкаНаДокумент) <> Тип("ДокументСсылка.ЧекККМ") Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СсылкаНаДокумент.ОперацияСДенежнымиСредствами Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	СвойстваДляКопирования = "
	|ДисконтнаяКарта,
	|ЕстьЗаказы,
	|Заказ,
	|КонтактноеЛицоПодписант,
	|Контрагент,
	|Договор,
	|Подразделение,
	|ПроцентСкидкиПоДисконтнойКарте,
	|СуммаДокумента,
	|Телефон,
	|ХозяйственнаяОперация";
	
	ЗаполнитьЗначенияСвойств(Объект, СсылкаНаДокумент, СвойстваДляКопирования);
	Объект.Запасы.Загрузить(СсылкаНаДокумент.Запасы.Выгрузить());
	ЗаполнитьПризнакиИспользованияХарактеристик();
	ОбновитьТипНоменклатурыЗапас();
	Объект.СерииНоменклатуры.Загрузить(СсылкаНаДокумент.СерииНоменклатуры.Выгрузить());
	Объект.ДобавленныеНаборы.Загрузить(СсылкаНаДокумент.ДобавленныеНаборы.Выгрузить());
	СтрокаПредоплаты = Объект.Предоплата.Добавить();
	СтрокаПредоплаты.Документ = СсылкаНаДокумент;
	СтрокаПредоплаты.Заказ = СсылкаНаДокумент.Заказ;
	СтрокаПредоплаты.СуммаРасчетов = СсылкаНаДокумент.СуммаДокумента;
	СтрокаПредоплаты.Курс = СсылкаНаДокумент.Курс;
	СтрокаПредоплаты.Кратность = СсылкаНаДокумент.Кратность;
	СтрокаПредоплаты.СуммаПлатежа = СсылкаНаДокумент.СуммаДокумента;
	
	Объект.ОперацияСДенежнымиСредствами = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоЧеку(Команда)
	
	Если ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Ссылка) Тогда
		ЧекЗаполнен = ЗаполненПоЧекуНаСервере(Элементы.Список.ТекущиеДанные.Ссылка);
		Если ЧекЗаполнен Тогда
			УстановитьВидимостьДоговора();
			ПересчитатьДокументНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПоискПоШК(Команда)
	
	ПоискНоменклатурыПоШтрихКоду = Истина;
	Элементы.ЗначениеПоискаНоменклатурыПоШтрихКоду.Видимость = ПоискНоменклатурыПоШтрихКоду;
	Элементы.ЗначениеПоискаНоменклатуры.Видимость = Не ПоискНоменклатурыПоШтрихКоду;
	
	ОбновитьСправочникНастройкиРМК();
	
	УстановитьГорячиеКлавишиПоискаПоШК();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПоискПоРеквизитам(Команда)
	
	ПоискНоменклатурыПоШтрихКоду = Ложь;
	Элементы.ЗначениеПоискаНоменклатурыПоШтрихКоду.Видимость = ПоискНоменклатурыПоШтрихКоду;
	Элементы.ЗначениеПоискаНоменклатуры.Видимость = Не ПоискНоменклатурыПоШтрихКоду;
	
	ОбновитьСправочникНастройкиРМК();
	
	УстановитьГорячиеКлавишиПоискаПоШК();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГорячиеКлавишиПоискаПоШК()
	
	ПустоеСочетание = Новый СочетаниеКлавиш(Клавиша.Нет);
	СочетаниеПоиск = Новый СочетаниеКлавиш(Клавиша.F,Истина,Ложь,Ложь); 
	
	Если Элементы.ЗначениеПоискаНоменклатуры.Видимость Тогда
		Элементы.ЗначениеПоискаНоменклатуры.СочетаниеКлавиш = СочетаниеПоиск;
		Элементы.ЗначениеПоискаНоменклатурыПоШтрихКоду.СочетаниеКлавиш = ПустоеСочетание;
	Иначе
		Элементы.ЗначениеПоискаНоменклатуры.СочетаниеКлавиш = ПустоеСочетание;
		Элементы.ЗначениеПоискаНоменклатурыПоШтрихКоду.СочетаниеКлавиш = СочетаниеПоиск;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЧек(Команда)
	
	Если Объект.Запасы.Количество()
		И (Не ЗначениеЗаполнено(Объект.Ссылка)
		ИЛИ Модифицированность) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеВопросаПродолжитьЧек", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Текущий чек не пустой. Его можно отложить, либо заменить новым'");
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Отложить", НСтр("ru = 'Отложить'"));
		СписокКнопок.Добавить("Заменить", НСтр("ru = 'Заменить'"));
		СписокКнопок.Добавить("Отменить", НСтр("ru = 'Отменить'"));
		ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок);
		
	Иначе
		
		ПослеВопросаПродолжитьЧек("Заменить", Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаПродолжитьЧек(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "Заменить" Тогда
		
		ПродолжитьЧекНаСервере();
		УправлениеСтраницейОтложенныеЧеки();
		Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница = Элементы.ГруппаПродажа;
		
	ИначеЕсли Результат = "Отложить" Тогда
		
		Если УдалосьОтложитьЧек() Тогда
			
			ТекстСообщения = НСтр("ru = 'Чек ККМ отложен'");
			ТекстПояснения = НСтр("ru = 'Можно пробить его позже на странице ""Отложенные чеки""'");
			
			ПоказатьОповещениеПользователя(
				ТекстСообщения,,
				ТекстПояснения,,
				СтатусОповещенияПользователя.Информация);
			
			ПродолжитьЧекНаСервере();
			УправлениеСтраницейОтложенныеЧеки();
			Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница = Элементы.ГруппаПродажа;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПродолжитьЧекНаСервере()
	
	ТекЧекККМ = Элементы.СписокОтложенныхЧеков.ТекущаяСтрока;
	
	Если ТекЧекККМ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧекОбъект = ТекЧекККМ.ПолучитьОбъект();
	
	ЗначениеВДанныеФормы(ЧекОбъект, Объект);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	ОбновитьТипНоменклатурыЗапас();
	
	ПересчитатьОтложенныеЧеки();
	КоличествоОтложенныхЧеков = КоличествоОтложенныхЧеков - 1;
	
	УстановитьОтборОтложенныхЧековПоСсылке();
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьЧек(Команда)
	
	СвернутьРазвернутьБоковуюПанельКомандНажатие(Неопределено);
	
	ПометитьНаУдалениеТекущийЧек();
	
	ИнициализироватьНовыйЧек();
	
	УправлениеСтраницейОтложенныеЧеки();
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеТекущийЧек()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		
		Если ДокументОбъект.Модифицированность() Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Попытка
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает текущий чек без проведения и инициализирует новый
//
&НаКлиенте
Процедура ОтложитьЧек(Команда)
	
	СвернутьРазвернутьБоковуюПанельКомандНажатие(Неопределено);
	
	Если УдалосьОтложитьЧек() Тогда
		
		ТекстСообщения = НСтр("ru = 'Чек ККМ отложен'");
		ТекстПояснения = НСтр("ru = 'Можно пробить его позже на странице ""Отложенные чеки""'");
		
		ПоказатьОповещениеПользователя(
			ТекстСообщения,,
			ТекстПояснения,,
			СтатусОповещенияПользователя.Информация);
		
		ИнициализироватьНовыйЧек();
		
		Если КоличествоОтложенныхЧеков = 0 Тогда
			КоличествоОтложенныхЧеков = 1;
		КонецЕсли;
		
		УправлениеСтраницейОтложенныеЧеки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция УдалосьОтложитьЧек()
	
	Если ЕстьОплатыЧерезЭТ() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Прежде чем отложить чек, необходимо отменить оплату банковской картой'"));
		Возврат Ложь;
	КонецЕсли;
	
	ПроверитьСостояниеКассовойСмены();
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка");
	Объект.БезналичнаяОплата.Очистить();
	Объект.Предоплата.Очистить();
	Объект.БонусныеБаллыКНачислению.Очистить();
	Объект.СкидкиНаценки.Очистить();
	
	Если Объект.Проведен Тогда
		Попытка
			Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
		Исключение
			Возврат Ложь
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийЭлементовФормы

// Процедура - обработчик события ПриИзменении поля ввода ЗначениеПоискаНоменклатуры.
//
&НаКлиенте
Процедура ЗначениеПоискаНоменклатурыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЗначениеПоискаНоменклатуры) Тогда
		
		СтруктураДанныеНоменклатуры = Новый Структура();
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ЗначениеПоискаНоменклатуры);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", Неопределено);
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
		
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		
		СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
		
		СтруктураДанныеНоменклатуры = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
		Если СтруктураДанныеНоменклатуры.Свойство("Склад") Тогда
			Если СписокДоступныхСкладов.НайтиПоЗначению(СтруктураДанныеНоменклатуры.Склад) = Неопределено Тогда
				СтруктураДанныеНоменклатуры.Склад = Объект.СтруктурнаяЕдиница;
				СтруктураДанныеНоменклатуры.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
		СтруктураДанныеНоменклатуры.Вставить("СписокДоступныхСкладов", СписокДоступныхСкладов);
		
		// Если требуется ввод акцизной марки, то нужно добавлять отдельную строку?
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия, ЕдиницаИзмерения, НоменклатураНабора");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураДанныеНоменклатуры);
		
		МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрокТЧ.Количество() = 0
			ИЛИ (ИспользуетсяРегистрацияРозничныхПродажВЕГАИС И СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки) 
			ИЛИ (ИспользуетсяМаркировкаТабачнойПродукции И СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки) 
			ИЛИ (ИспользуетсяМаркировкаОбуви И СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки) Тогда
			
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = ЗначениеПоискаНоменклатуры;
			НоваяСтрока.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
			НоменклатураПриИзменении(НоваяСтрока);
			
			//Агентские платежи
			Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
				НоваяСтрока.ДоговорПлатежногоАгента = СтруктураДанныеНоменклатуры.ДоговорКонтрагента;
				НоваяСтрока.ДанныеАгентскогоДоговора = СтруктураДанныеНоменклатуры.ДанныеАгентскогоДоговора;
				АгентскиеПлатежиУНФКлиентСервер.ВыделитьАгентскоеВознаграждениеВТаблице(Объект, НоваяСтрока);
				Если НоваяСтрока.Цена <> 0 Тогда
					АгентскиеПлатежиУНФКлиентСервер.ЗаполнитьРасчетныеПоляАгентскогоВознаграждения(Объект,, ЭтаФорма);
					СтрокаУслуги = АгентскиеПлатежиУНФКлиентСервер.СтрокаУслугаАгента(Объект.Запасы, НоваяСтрока);
					Если СтрокаУслуги <> Неопределено Тогда
						РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаУслуги);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока = МассивСтрокТЧ[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + 1;
			РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
			
		КонецЕсли;
		
		ЗначениеПоискаНоменклатуры = Неопределено;
		ЭтаФорма.Модифицированность = Истина;
		
		ТекущийЭлемент = Элементы.ЗначениеПоискаНоменклатуры;
		Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыКоличество;
		
		ПересчитатьДокументНаКлиенте();
		
		ПодборНоменклатурыИзСписка = Ложь;
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанныеНоменклатуры, ЗначениеПоискаНоменклатуры);
		КонецЕсли
		
	КонецЕсли;
	
	НастроитьЗакладкиПродажиМК();
	
	ПодключитьОбработчикОжидания("СпозиционироватьНаПоискеНоменклатура", 0.1, Истина);
	
КонецПроцедуры // ЗначениеПоискаНоменклатурыПриИзменении()

&НаКлиенте
Процедура ЗначениеПоискаНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЧекККМ", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаНоменклатурыПоШтрихКодуПриИзменении(Элемент)
	
	ТекШтрихкод = ЗначениеПоискаНоменклатурыПоШтрихКоду;
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		
		Данные = Новый Массив();
		Данные.Добавить(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1)); 
		
		ПолученыШтрихкоды(Данные);
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("СпозиционироватьНаПоискеШК", 0.1, Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ЧекНеПредъявлен формы.
//
&НаКлиенте
Процедура ЧекНеПредъявленПриИзменении(Элемент)
	
	ЧекНеПредъявленПриИзмененииНаСервере();
	
	Если Не ЧекНеПредъявлен Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздатьПриходнуюНакладнуюНаВозврат", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздатьРКОНаОснованииПриходнойНакладной", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздатьЧекККМНаВозврат", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КоманднаяПанельВозврата", "Видимость", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ЧекНеПредъявлен на сервере.
//
&НаСервере
Процедура ЧекНеПредъявленПриИзмененииНаСервере()
	
	Если ЧекНеПредъявлен Тогда
		ПриходнаяНакладнаяНаВозврат = "";
		РКО = "";
		
		Элементы.ДекорацияЗаголовокЧекиККМ.Заголовок = НСтр("ru = 'Создайте приходную накладную и РКО'");
		
		Элементы.ДекорацияПриходнаяНакладная.Заголовок = "";
		Элементы.ДекорацияРКО.Заголовок = "";
		
		Элементы.ДекорацияЧекККМНаВозврат.Видимость = Ложь;
		Элементы.ДекорацияПриходнаяНакладная.Видимость = Истина;
		Элементы.ДекорацияРКО.Видимость = Истина;
		
		Элементы.СоздатьЧекККМНаВозврат.Видимость = Ложь;
		Элементы.СоздатьПриходнуюНакладнуюНаВозврат.Видимость = Истина;
		Элементы.СоздатьРКОНаОснованииПриходнойНакладной.Видимость = Истина И ЕстьПравоОформлятьРКО;
		
		Элементы.СоздатьПриходнуюНакладнуюНаВозврат.ЦветТекста = Новый Цвет;
		Элементы.СоздатьРКОНаОснованииПриходнойНакладной.ЦветТекста = ?(ЧекНеПредъявлен, WebЦвета.Серый, Новый Цвет);
		Элементы.КоманднаяПанельВозврата.Видимость = Ложь;
		
		Элементы.СтраницыСписокЧековККМ_и_СоставЧекаККМ_и_СтраницаСНадписью.ТекущаяСтраница = Элементы.СтраницаСПустойНадписью;
	Иначе
		Элементы.ДекорацияЗаголовокЧекиККМ.Заголовок = НСтр("ru = 'Выберите основание для возврата'");
		
		Элементы.СтраницыСписокЧековККМ_и_СоставЧекаККМ_и_СтраницаСНадписью.ТекущаяСтраница = Элементы.СтраницаСписокЧековККМ_и_СоставЧекаККМ;
	КонецЕсли;
	
КонецПроцедуры

// Функция получает связанные документы определенного вида, помещает их во временное хранилище
// и возвращает адрес
//
&НаСервере
Функция ПоместитьСвязанныеДокументыВХранилище(ЧекККМ, Вид)
	
	// Заполним ссылки на документы.
	Запрос = Новый Запрос;
	
	Если Вид = "ПриходнаяНакладная" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПриходнаяНакладная.Ссылка КАК СвязанныйДокумент
			|ИЗ
			|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
			|ГДЕ
			|	ПриходнаяНакладная.Проведен
			|	И ПриходнаяНакладная.ЧекККМ = &ЧекККМ";
	ИначеЕсли Вид = "РасходИзКассы" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПриходнаяНакладная.Ссылка,
			|	ПриходнаяНакладная.Номер,
			|	ПриходнаяНакладная.Дата
			|ПОМЕСТИТЬ ПриходнаяНакладная
			|ИЗ
			|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
			|ГДЕ
			|	ПриходнаяНакладная.Проведен
			|	И ПриходнаяНакладная.ЧекККМ = &ЧекККМ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасходИзКассы.Ссылка КАК СвязанныйДокумент
			|ИЗ
			|	Документ.РасходИзКассы КАК РасходИзКассы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриходнаяНакладная КАК ПриходнаяНакладная
			|		ПО РасходИзКассы.ДокументОснование = ПриходнаяНакладная.Ссылка
			|ГДЕ
			|	РасходИзКассы.Проведен";
	ИначеЕсли Вид = "ЧекККМВозврат" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЧекККМВозврат.Ссылка КАК СвязанныйДокумент
			|ИЗ
			|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
			|ГДЕ
			|	ЧекККМВозврат.Проведен
			|	И ЧекККМВозврат.ЧекККМ = &ЧекККМ";
	ИначеЕсли Вид = "ЧекККМ" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЧекККМЗапасы.Ссылка КАК СвязанныйДокумент
			|ИЗ
			|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
			|ГДЕ
			|	ЧекККМЗапасы.Ссылка.Проведен
			|	И ЧекККМЗапасы.Заказ = &ЧекККМ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЧекККМВозвратЗапасы.Ссылка
			|ИЗ
			|	Документ.ЧекККМВозврат.Запасы КАК ЧекККМВозвратЗапасы
			|ГДЕ
			|	ЧекККМВозвратЗапасы.Ссылка.Проведен
			|	И ЧекККМВозвратЗапасы.Заказ = &ЧекККМ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПриходнаяНакладнаяЗапасы.Ссылка
			|ИЗ
			|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
			|ГДЕ
			|	ПриходнаяНакладнаяЗапасы.Ссылка.Проведен
			|	И ПриходнаяНакладнаяЗапасы.Заказ = &ЧекККМ
			|	И ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
	
	Результат = Запрос.Выполнить();
	
	Возврат ПоместитьВоВременноеХранилище(
		Результат.Выгрузить(),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьДокументыОснованияВХранилище()

// Процедура - обработчик события Нажатие элемента ДекорацияПриходнаяНакладная формы.
//
&НаКлиенте
Процедура ДекорацияПриходнаяНакладнаяНажатие(Элемент)
	
	Если ЧекНеПредъявлен Тогда
		Если Не ПриходнаяНакладнаяНаВозврат.Пустая() Тогда
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыПриходнаяНакладнаяВозврат");
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОткрытьФорму("Документ.ПриходнаяНакладная.ФормаОбъекта", Новый Структура("Ключ", ПриходнаяНакладнаяНаВозврат));
		КонецЕсли;
	Иначе
		ТекЧекККМ = Элементы.СписокЧековККМ.ТекущаяСтрока;
		Если ТекЧекККМ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		АдресВХранилищеСвязанныхДокументов = ПоместитьСвязанныеДокументыВХранилище(ТекЧекККМ, "ПриходнаяНакладная");
		ПараметрыФормы = Новый Структура("АдресВХранилищеСвязанныхДокументов", АдресВХранилищеСвязанныхДокументов);
		ОткрытьФорму("Документ.ЧекККМ.Форма.СвязанныеДокументы", ПараметрыФормы
			,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента ДекорацияРКО формы.
//
&НаКлиенте
Процедура ДекорацияРКОНажатие(Элемент)
	
	Если ЧекНеПредъявлен Тогда
		Если Не РКО.Пустая() Тогда
			ОткрытьФорму("Документ.РасходИзКассы.ФормаОбъекта", Новый Структура("Ключ", РКО));
		КонецЕсли;
	Иначе
		ТекЧекККМ = Элементы.СписокЧековККМ.ТекущаяСтрока;
		Если ТекЧекККМ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		АдресВХранилищеСвязанныхДокументов = ПоместитьСвязанныеДокументыВХранилище(ТекЧекККМ, "РасходИзКассы");
		ПараметрыФормы = Новый Структура("АдресВХранилищеСвязанныхДокументов", АдресВХранилищеСвязанныхДокументов);
		ОткрытьФорму("Документ.ЧекККМ.Форма.СвязанныеДокументы", ПараметрыФормы
			,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента ДекорацияЧекККМНаВозврат формы.
//
&НаКлиенте
Процедура ДекорацияЧекККМНаВозвратНажатие(Элемент)
		
	ТекЧекККМ = Элементы.СписокЧековККМ.ТекущаяСтрока;
	Если ТекЧекККМ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	АдресВХранилищеСвязанныхДокументов = ПоместитьСвязанныеДокументыВХранилище(ТекЧекККМ, "ЧекККМВозврат");
	ПараметрыФормы = Новый Структура("АдресВХранилищеСвязанныхДокументов", АдресВХранилищеСвязанныхДокументов);
	ОткрытьФорму("Документ.ЧекККМ.Форма.СвязанныеДокументы", ПараметрыФормы
		,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЧекККМНажатие(Элемент)
	
	ТекЗаказ = Элементы.СписокЗаказов.ТекущаяСтрока;
	Если ТекЗаказ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	АдресВХранилищеСвязанныхДокументов = ПоместитьСвязанныеДокументыВХранилище(ТекЗаказ, "ЧекККМ");
	ПараметрыФормы = Новый Структура("АдресВХранилищеСвязанныхДокументов", АдресВХранилищеСвязанныхДокументов);
	ОткрытьФорму("Документ.ЧекККМ.Форма.СвязанныеДокументы", ПараметрыФормы
		,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ПереключательЖурналБыстрыеТовары формы.
//
&НаКлиенте
Процедура ПереключательЖурналБыстрыеТоварыПриИзменении(Элемент)
	
	// Значение переключателя запоминается между сеансами.
	
	Если ПереключательЖурналБыстрыеТовары = 1 Тогда // Журнал
		Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.Журнал;
		ОбновитьФормуСпискаДокументовНаКлиенте();
	ИначеЕсли ПереключательЖурналБыстрыеТовары = 2 Тогда // Быстрые товары
		Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.БыстрыеТовары;
	Иначе // Основные реквизиты
		Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.ОсновныеРеквизиты;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриСменеСтраницы элемента ГруппаПродажаИВозврат формы.
//
&НаКлиенте
Процедура ГруппаПродажаИВозвратПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыЖурналИБыстрыеТоварыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.Журнал Тогда // Журнал
		ПереключательЖурналБыстрыеТовары = 1;
	ИначеЕсли Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.БыстрыеТовары Тогда // Быстрые товары
		ПереключательЖурналБыстрыеТовары = 2;
	Иначе // Основные реквизиты
		ПереключательЖурналБыстрыеТовары = 3;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		КонтрагентАктивнойСтроки = ?(Элемент.ТекущиеДанные = Неопределено, Неопределено, Элемент.ТекущиеДанные.Контрагент);
		ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаЗаказов", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Контрагент", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОтборВидЗаказаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ВидЗаказа", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СостояниеЗаказа", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОплатаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СтатусОплаты", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтгрузкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	Если ВыбранноеЗначение = "Отгружен полностью" Тогда
		СтатусОтгрузки = 0;
	ИначеЕсли ВыбранноеЗначение = "Отгружен частично" Тогда
		СтатусОтгрузки = 1;
	ИначеЕсли ВыбранноеЗначение = "Без отгрузки" Тогда
		СтатусОтгрузки = 2;
	Иначе
		Возврат;
	КонецЕсли;	
	
	УстановитьМеткуИОтборСписка("СтатусОтгрузки", Элемент.Родитель.Имя, СтатусОтгрузки, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Ответственный", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Организация", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивОтбора = Новый Массив;
	
	МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
	МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение"));
	МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница"));
	МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет"));
	
	СтруктураОтбора = Новый Структура("ТипСтруктурнойЕдиницы", МассивОтбора);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);

	ОткрытьФорму("Справочник.СтруктурныеЕдиницы.ФормаСписка", ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СтруктурнаяЕдиницаРезерв", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДКОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ДисконтнаяКарта", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ЭквайринговыйТерминал формы.
//
&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	ЭквайринговыйТерминалПриИзмененииНаСервере();
	
КонецПроцедуры // ЭквайринговыйТерминалПриИзменении()

// Процедура - обработчик события ПриИзменении поля ЭквайринговыйТерминал на сервере.
//
&НаСервере
Процедура ЭквайринговыйТерминалПриИзмененииНаСервере()
	
	ПолучитьСсылкиНаОборудование();
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	
КонецПроцедуры // ЭквайринговыйТерминалПриИзмененииНаСервере()

// Процедура - обработчик события ПриИзменении поля КассаККМ.
//
&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	Если КассаККМ.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Касса ККМ не может быть пустой'");
		Сообщение.Поле = "КассаККМ";
		Сообщение.Сообщить();
		
		КассаККМ = ПредыдущаяКассаККМ;
		Возврат;
	КонецЕсли;
	
	Если КассаККМ = ПредыдущаяКассаККМ Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяКассаККМ = КассаККМ;
	Объект.КассаККМ = КассаККМ;
	
	ПараметрыКассы = Новый Структура("ВалютаДенежныхСредств");
	КассаККМПриИзмененииНаСервере(ПараметрыКассы);
	НастроитьЭлементыЯчеек();
	
	Если Объект.Запасы.Количество() > 0 Тогда
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтаФорма, "Запасы", Истина);
		ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, ПараметрыКассы.ВалютаДенежныхСредств, "Запасы");
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Запасы");
		
		ЗаполнитьСуммыСкидок();
		
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(ПолучитьСтруктуруНадписиЦеныИВалютаНаКлиенте());
	
	УстановитьОрганизациюПоВладельцуККМ();
	
	УправлениеСтраницейОтложенныеЧеки();
	
	Если ИспользоватьАвторизациюПоОтветственному Тогда
		АвторизацияПоОтветственному();
	КонецЕсли;
	
КонецПроцедуры // КассаККМПриИзменении()

// Процедура - обработчик события ПриИзменении поля КассаККМ на сервере.
//
&НаСервере
Процедура КассаККМПриИзмененииНаСервере(ПараметрыКассы)
	
	ПараметрыКассы.Вставить("ВалютаДенежныхСредств", ПредыдущаяКассаККМ.ВалютаДенежныхСредств);
	
	КассаККМИспользоватьБезПодключенияОборудования = КассаККМ.ИспользоватьБезПодключенияОборудования;
	
	Объект.ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(Объект.КассаККМ);
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСменыНаСервере(КассаККМ);
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		ДополнитьСтруктуруСостоянияКассовойСмены(СтруктураСостояниеКассовойСмены);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены,, "Ответственный");
	Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	
	Элементы.СнятьРезервирование.Видимость = НЕ КонтрольНаСкладеОтключен;
	
	ОбновитьВидимостьНадписиИстеклоБолее24Часов(СтруктураСостояниеКассовойСмены);
	
	ОстатокВКассе = СтруктураСостояниеКассовойСмены.НаличностьВКассе;
	ОстатокВКассеСтрока = "" + ОстатокВКассе;
	
	Объект.КассаККМ = КассаККМ;
	Объект.СтруктурнаяЕдиница = КассаККМ.СтруктурнаяЕдиница;
	Объект.ВидЦен = КассаККМ.СтруктурнаяЕдиница.РозничныйВидЦен;
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = КассаККМ.ВалютаДенежныхСредств;
	КонецЕсли;
	Объект.Организация = Объект.КассаККМ.Владелец;
	Объект.Подразделение = Объект.КассаККМ.Подразделение;
	Если Не ПараметрыКассы.Свойство("РежимРаспределения") Тогда
		Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойОтветственный");
	КонецЕсли;
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);

	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПолучитьСписокВыбораВидовПлатежныхКарт();
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПолучитьСсылкиНаОборудование();
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДокумента));
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Константы.НациональнаяВалюта.Получить()));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(ПолучитьСтруктуруНадписиЦеныИВалютаНаСервере());
	
	КассаККМИспользоватьБезПодключенияОборудования = Объект.КассаККМ.ИспользоватьБезПодключенияОборудования;
	
	УстановитьДоступностьПечатиЧека();
	
	Если Объект.Статус = Перечисления.СтатусыЧековККМ.Пробит
	И НЕ КассаККМИспользоватьБезПодключенияОборудования Тогда
		УстановитьРежимТолькоПросмотр();
	КонецЕсли;
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	ПродажаСоСклада = Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад;
	
	Элементы.ЗапасыЦена.ТолькоПросмотр 					= НЕ РазрешеноРедактированиеЦенДокументов; // ИЛИ НЕ ПродажаСоСклада;
	Элементы.ЗапасыСумма.ТолькоПросмотр 				= НЕ РазрешеноРедактированиеЦенДокументов; // ИЛИ НЕ ПродажаСоСклада; 
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр  = НЕ РазрешеноРедактированиеЦенДокументов;
	
	Элементы.ЗапасыСуммаСкидкиНаценки.ТолькоПросмотр	= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр 				= НЕ РазрешеноРедактированиеЦенДокументов; // ИЛИ НЕ ПродажаСоСклада;
	
	// СтруктурнаяЕдиница - пустой быть не может
	ТипСтруктурнойЕдиницы = Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы;
	
	Список.Параметры.УстановитьЗначениеПараметра("КассаККМ", КассаККМ);
	Список.Параметры.УстановитьЗначениеПараметра("БезПодключенияОборудования", КассаККМИспользоватьБезПодключенияОборудования);
	Список.Параметры.УстановитьЗначениеПараметра("Статус", Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта);
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("КассоваяСмена", Документы.ОтчетОРозничныхПродажах.ПустаяСсылка());
	
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("КассаККМ", КассаККМ);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("БезПодключенияОборудования", КассаККМИспользоватьБезПодключенияОборудования);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("Статус", Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Истина);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
	СписокЧековККМ.Параметры.УстановитьЗначениеПараметра("КассоваяСмена", Документы.ОтчетОРозничныхПродажах.ПустаяСсылка());
	
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("КассаККМ", КассаККМ);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("БезПодключенияОборудования", КассаККМИспользоватьБезПодключенияОборудования);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("Статус", Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Истина);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
	СписокЧековККМНаВозврат.Параметры.УстановитьЗначениеПараметра("КассоваяСмена", Документы.ОтчетОРозничныхПродажах.ПустаяСсылка());
	
	УстановитьОтборОтложенныхЧековПоКассовойСмене();
	ПересчитатьОтложенныеЧеки();
	
	// СтруктурнаяЕдиница - пустой быть не может
	ТипСтруктурнойЕдиницы = Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы;
	НастроитьЭлементыСтруктурныхЕдиниц();
	
	СформироватьЗаголовок(СтруктураСостояниеКассовойСмены);
	
	УстановитьПериодНаСервере(ВидПериодаЧековККМПеречисление, "СписокЧековККМ", 
							  Новый СтандартныйПериод(Элементы.СписокЧековККМ.Период.ДатаНачала, Элементы.СписокЧековККМ.Период.ДатаОкончания));
	УстановитьПериодНаСервере(ВидПериодаЧековККМНаВозвратПеречисление, "СписокЧековККМНаВозврат", 
							  Новый СтандартныйПериод(Элементы.СписокЧековККМНаВозврат.Период.ДатаНачала, Элементы.СписокЧековККМНаВозврат.Период.ДатаОкончания));
	УстановитьПериодНаСервере(ВидПериодаЖурналаПеречисление, "Список", 
							  Новый СтандартныйПериод(Элементы.Список.Период.ДатаНачала, Элементы.Список.Период.ДатаОкончания));
	
	// Пересчёт ТЧ Запасы
	СброситьФлагСкидкиРассчитаныСервер("ИзменениеКассыККМ");
	
	ТребуетсяПроверкаКассираПриСменеОтветственного = ТребуетсяПроверкаКассираПриСменеОтветственного();
	УстановитьВидимостьПредупрежденияОКассире();
	
КонецПроцедуры // КассаККМПриИзмененииНаСервере()

// Процедура - обработчик события ПриИзменении поля Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	// Сформируем надпись цены и валюты.
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(ПолучитьСтруктуруНадписиЦеныИВалютаНаКлиенте());
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флага НеПоказыватьПриОткрытииФормуВыбораКассы.
//
&НаКлиенте
Процедура НеПоказыватьПриОткрытииФормуВыбораКассыПриИзменении(Элемент)
	
	// РМК
	РабочееМестоКассираВызовСервера.ОбновитьНастройкиРМК(НастройкаРМК, НеПоказыватьПриОткрытииФормуВыбораКассы, СверятьИтогиНаЭТПриЗакрытииСмены);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийТекущегоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	УстановитьВидимостьДоговора();
	ТребуетсяПересчет = УстановитьДоговорПоУмолчанию();
	Если ТребуетсяПересчет Тогда
		ПересчитатьРучныеСкидкиПоВидуСкидки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьДоговорПоУмолчанию()
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация);
	ТребуетсяПересчет = ДоговорПриИзмененииНаСервере();
	
	Возврат ТребуетсяПересчет;
	
КонецФункции

// Функция пересчитывает ручные скидки по виду скидок из договора.
// Возвращаемое значение
//   Булево - Истина, если требуется пересчет скидок; Ложь - если не требуется.
&НаСервере
Функция ДоговорПриИзмененииНаСервере()
	
	ДоговорВидСкидкиНаценки = Объект.Договор.ВидСкидкиНаценки;
	ИзменилсяВидСкидки = Объект.ВидСкидкиНаценки <> ДоговорВидСкидкиНаценки;
	Если ИзменилсяВидСкидки Тогда
		Объект.ВидСкидкиНаценки = ДоговорВидСкидкиНаценки;
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(ПолучитьСтруктуруНадписиЦеныИВалютаНаСервере());
		
		Возврат (Объект.Запасы.Количество() > 0);
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
// Процедура-обработчик ответа на вопрос о пересчете документа по виду цен и скидок.
//
Процедура ПересчитатьРучныеСкидкиПоВидуСкидки()
	
	Скидка = ДисконтныеКартыУНФВызовСервера.ПолучитьПроцентСкидкиПоВидуСкидокНаценок(Объект.ВидСкидкиНаценки);
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Скидка;
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры // ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора()

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	ТребуетсяПересчет = ДоговорПриИзмененииНаСервере();
	Если ТребуетсяПересчет Тогда
		ПересчитатьРучныеСкидкиПоВидуСкидки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОтборПоДКЧекиПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокОтложенныхЧеков,
		"ДисконтнаяКарта",
		ОтборПоДКЧеки,
		ВидСравненияКомпоновкиДанных.Равно,,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоДКЧекиОчистка(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокОтложенныхЧеков,
		"ДисконтнаяКарта");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	УстановитьОтборОтложенныхЧековПоОтветственному();
	ПересчитатьОтложенныеЧеки();
	УправлениеСтраницейОтложенныеЧеки();
	
	Если ТребуетсяПроверкаКассираПриСменеОтветственного Тогда
		УстановитьВидимостьПредупрежденияОКассире();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	СтруктураДанных = ПолучитьДеталиПодразделения(Объект.СтруктурнаяЕдиница, Объект.Организация, Объект.Дата);
	Объект.ПодписьКассира = СтруктураДанных.ПодписьМОЛ;
	Объект.СпециальныйНалоговыйРежим = СтруктураДанных.СпециальныйНалоговыйРежим;
	Если Объект.СпециальныйНалоговыйРежим = ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.ПСН") Тогда
		ЗаполнитьПатент();
	Иначе
		Объект.Патент = ПредопределенноеЗначение("Справочник.Патенты.ПустаяСсылка");
	КонецЕсли;
	
	ОбработатьИзменениеСтруктурнойЕдиницыНаСервере();
	НастроитьЭлементыЯчеек();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовТабличнойЧасти

// Процедура - обработчик события ПриИзменении колонки Номенклатура ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	ЗапасыНоменклатураПриИзмененииОбработчик("Запасы");
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении_МК(Элемент)
	ЗапасыНоменклатураПриИзмененииОбработчик("ЗапасыМК");
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзмененииОбработчик(ИмяТЧ)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	
	Если СтрокаТабличнойЧасти.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("Содержание", "");
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	// Конец ДисконтныеКарты
	
	Если СкладВШапке Тогда
		СтруктураДанные.Вставить("Склад", Объект.СтруктурнаяЕдиница);
		СтруктураДанные.Вставить("Ячейка", Объект.Ячейка);
	Иначе
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
	КонецЕсли;
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);

	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Склад") Тогда
		Если СписокДоступныхСкладов.НайтиПоЗначению(СтруктураДанные.Склад) = Неопределено Тогда
			СтруктураДанные.Склад = Объект.СтруктурнаяЕдиница;
			СтруктураДанные.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	СтруктураДанные.Вставить("СписокДоступныхСкладов", СписокДоступныхСкладов);
	
	СтрокаТабличнойЧасти.КодМаркировки = "";
	
	Если СтруктураДанные.ЭтоНабор И НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
		
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные);
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
	
		#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Элементы[ИмяТЧ].ЗакончитьРедактированиеСтроки(Истина);
		#КонецЕсли 
		
		ПересчитатьДокументНаКлиенте();
		
	Иначе
		
		СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Количество = 1;
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки = СтруктураДанные.НеобходимостьВводаАкцизнойМарки;
		СтрокаТабличнойЧасти.НеобходимостьВводаКодаМаркировки = СтруктураДанные.НеобходимостьВводаКодаМаркировки;
		// Наборы
		СтрокаТабличнойЧасти.ЭтоНабор = СтруктураДанные.ЭтоНабор;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		
		// Серии номенклатуры
		Для каждого ВыделеннаяСтрока Из Элементы[ИмяТЧ].ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы[ИмяТЧ].ДанныеСтроки(ВыделеннаяСтрока);
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла;
		
		//Характеристики
		СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
				СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		//Конец Характеристики
		
		//Партии
		СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		Если СтруктураДанные.ИспользоватьПартии Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
				СтруктураВыбораНоменклатуры.Партия = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
			КонецЕсли;
		КонецЕсли;
		// Конец Партии
		
		Если ИмяТЧ = "Запасы" Тогда
			СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
		КонецЕсли;
		
		Если Не (ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) И ПодборНоменклатурыИзСписка) Тогда
			ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(СтрокаТабличнойЧасти, Объект, СтруктураДанные);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		
		// ИнтеграцияГосИС
		Если ФОВестиУчетМаркируемойПродукцииИСМП Тогда
			ИнтеграцияИСМПУНФКлиент.ЗаполнитьСлужебныеРеквизитыИСМПВСтрокеТЧ(СтрокаТабличнойЧасти, СтруктураДанные);
		КонецЕсли;
		ДополнительныеПараметры = Новый Структура;
		СобытияФормИСКлиент.ПриИзмененииЭлемента(ЭтаФорма, "Запасы", ДополнительныеПараметры);
		Если ДополнительныеПараметры.Свойство("ТребуетсяСерверныйВызов") Тогда
			ПодключитьОбработчикОжидания("ЗапасыПриОкончанииРедактированияДляСерверногоВызова", 0.5, Истина);
		КонецЕсли;
		// Конец ИнтеграцияГосИС
		
		Если ИспользуетсяМаркировкаШинИПокрышек Тогда
			ОткрытьВводАкцизнойМаркиШиныИПокрышки(СтрокаТабличнойЧасти);
		Иначе
			ОткрытьВводАкцизнойМарки(СтрокаТабличнойЧасти);
		КонецЕсли;
		
	КонецЕсли;
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные, СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;
	
	//Агентские платежи
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		СтрокаТабличнойЧасти.ЦенаСАгентскимВознаграждением = 0;
		СтрокаТабличнойЧасти.ДоговорПлатежногоАгента = СтруктураДанные.ДоговорКонтрагента;
		СтрокаТабличнойЧасти.ДанныеАгентскогоДоговора = СтруктураДанные.ДанныеАгентскогоДоговора;
		АгентскиеПлатежиУНФКлиентСервер.ВыделитьАгентскоеВознаграждениеВТаблице(Объект, СтрокаТабличнойЧасти);
		Если СтрокаТабличнойЧасти.Цена <> 0 Тогда
			АгентскиеПлатежиУНФКлиентСервер.ЗаполнитьРасчетныеПоляАгентскогоВознаграждения(Объект,, ЭтаФорма);
			СтрокаУслуги = АгентскиеПлатежиУНФКлиентСервер.СтрокаУслугаАгента(Объект.Запасы, СтрокаТабличнойЧасти);
			Если СтрокаУслуги <> Неопределено Тогда
				РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаУслуги);
			КонецЕсли;
			ПересчитатьДокументНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаПриИзмененииОбработчик(ИмяТЧ)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	Если КэшЗначений.Свойство("ИспользоватьМинимальныеЦены")
		И КэшЗначений.ИспользоватьМинимальныеЦены Тогда
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
		
		Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			
			СтруктураДанные.Вставить("ДатаОбработки",	 	Объект.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента",	 	Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
			
			СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
			СтруктураДанные.Вставить("Цена",			 	СтрокаТабличнойЧасти.Цена);
			
			СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
			
		КонецЕсли;   
		
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);
		
		СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
		
		Если СтруктураДанные.Свойство("МинимальнаяЦена") 
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
		КонецЕсли;
		
		Если СтруктураДанные.ЭтоНабор Тогда
			
			// Наборы
			ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные);
			
			// АвтоматическиеСкидки.
			СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
			// Конец АвтоматическиеСкидки
			
			#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
				Элементы[ИмяТЧ].ЗакончитьРедактированиеСтроки(Истина);
			#КонецЕсли 
			
			ПересчитатьДокументНаКлиенте();
			
			ОбновитьДанныеОстатковИПризнакиХарактеристикИПартий();
			
		Иначе
			
			СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти();
			
			СтрокаТабличнойЧасти.НоменклатураХарактеристикаИПартия = СокрЛП(""+СтрокаТабличнойЧасти.Номенклатура)
				+?(СтрокаТабличнойЧасти.Характеристика.Пустая(), "", ". "+СтрокаТабличнойЧасти.Характеристика)
				+?(СтрокаТабличнойЧасти.Партия.Пустая(), "", ". "+СтрокаТабличнойЧасти.Партия);
			
			Если РежимОстаткиИРезервы Тогда
				ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти);
			КонецЕсли
			
		КонецЕсли;		
		
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаПриИзменении(Элемент)
	
	ЗапасыСтруктурнаяЕдиницаПриИзмененииОбработчик("Запасы");
	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования табличной части Запасы формы.
//
&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтеграцияГосИС
	КэшироватьТекущуюСтроку();
	// Конец ИнтеграцияГосИС
	
	Если НоваяСтрока И Копирование И
		(Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки <> 0 ИЛИ Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки <> 0) Тогда
		Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки = 0;
		Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	ИначеЕсли ИспользоватьАвтоматическиеСкидки И НоваяСтрока И Копирование Тогда
		// Автоматические скидки стали неактуальны.
		СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
	КонецЕсли;
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Элемент.ТекущиеДанные.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, Элемент.ТекущиеДанные);
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(Элемент.ТекущиеДанные, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(Элемент.ТекущиеДанные, Объект, "Ячейка", "ПоложениеСклада");
	КонецЕсли;
	
	// ШиныИПокрышки
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КодМаркировки = "";
		ЗаполнитьИндексАкцизнойМарки(Элемент.ТекущиеДанные);
	ИначеЕсли Копирование Тогда
		ЗаполнитьИндексАкцизнойМарки(Элемент.ТекущиеДанные);
	КонецЕсли;
	// Конец ШиныИПокрышки
	
КонецПроцедуры

// Процедура - обработчик события ПриОкончанииРедактирования строки списка Запасы.
//
&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчитатьДокументНаКлиенте();
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	СобытияФормИСКлиент.ПриИзмененииЭлемента(ЭтаФорма, "Запасы", ДополнительныеПараметры);
	Если ДополнительныеПараметры.Свойство("ТребуетсяСерверныйВызов") Тогда
		// ГосИС_11
		//ПодключитьОбработчикОжидания("ЗапасыПриОкончанииРедактированияДляСерверногоВызова", 0.5, Истина);
		ЗапасыПриОкончанииРедактированияДляСерверногоВызова();
	КонецЕсли;
	// Конец ИнтеграцияГосИС
	
	// ШиныИПокрышки
	СтрокаТЧ = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоШиныИПокрышки = УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура, "ШиныИПокрышки");
	
	Если ЭтоШиныИПокрышки <> Неопределено 
		И ЭтоШиныИПокрышки Тогда
		Если СтрокаТЧ.Свойство("СтатусПроверкиГосИС") Тогда
			СтрокаТЧ.СтатусПроверкиГосИС = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 1, 2);
		КонецЕсли;
		СтрокаТЧ.ИндексАкцизнойМарки = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 1, 2);
	КонецЕсли;
	// ШиныИПокрышки
	
КонецПроцедуры// ЗапасыПриОкончанииРедактирования()

// ИнтеграцияГосИС
&НаКлиенте
Процедура ЗапасыПриОкончанииРедактированияДляСерверногоВызова()
	
	ЗапасыПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗапасыПриОкончанииРедактированияНаСервере()
	
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Запасы", Новый Структура);
	
КонецПроцедуры
// Конец ИнтеграцияГосИС

// Процедура - обработчик события ПередУдалением строки списка Запасы.
//
&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	ЗапасыПередУдалениемОбработчикСобытия("Запасы", Отказ);
	
КонецПроцедуры

// Процедура - обработчик события ПередУдалением строки списка Запасы.
//
&НаКлиенте
Процедура ЗапасыПередУдалением_МК(Элемент, Отказ)
	
	ЗапасыПередУдалениемОбработчикСобытия("ЗапасыМК", Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалениемОбработчикСобытия(ИмяТЧ, Отказ)
	
	// ИнтеграцияГосИС
	КэшироватьТекущуюСтроку();
	// Конец ИнтеграцияГосИС
	
	// Наборы
	Если Элементы[ИмяТЧ].ВыделенныеСтроки.Количество()= Объект.Запасы.Количество() Тогда
		// Если выделены все строки - проверки удаления наборов не выполняются
		Объект.ДобавленныеНаборы.Очистить();
	Иначе
		ДанныеНабора = Новый Структура("НоменклатураНабора, ХарактеристикаНабора");
		Для каждого ВыделеннаяСтрока Из Элементы[ИмяТЧ].ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы[ИмяТЧ].ДанныеСтроки(ВыделеннаяСтрока);
			Если ДанныеНабора.НоменклатураНабора=Неопределено Тогда
				ДанныеНабора.НоменклатураНабора = ТекущиеДанныеСтроки.НоменклатураНабора;
				ДанныеНабора.ХарактеристикаНабора = ТекущиеДанныеСтроки.ХарактеристикаНабора;
			ИначеЕсли ДанныеНабора.НоменклатураНабора<>ТекущиеДанныеСтроки.НоменклатураНабора 
				ИЛИ ДанныеНабора.ХарактеристикаНабора<>ТекущиеДанныеСтроки.ХарактеристикаНабора Тогда
				// Выделены строки разных наборов
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
				Сообщение.Поле = "Объект.Запасы";
				Сообщение.Сообщить();
				Отказ = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ Отказ И ЗначениеЗаполнено(ДанныеНабора.НоменклатураНабора) Тогда
			// Набор можно удалить только целиком
			Отказ = Истина;
			ДобавленныеНаборы = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
			Оповещение = Новый ОписаниеОповещения("ЗапасыПередУдалениемЗавершение", ЭтотОбъект, ДанныеНабора);
			СписокКнопок = Новый СписокЗначений;
			Если ДобавленныеНаборы.Количество()>0 И ДобавленныеНаборы[0].Количество>1 Тогда
				// в ТЧ есть несколько одинаковых наборов
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком. В табличную часть добавлено несколько экземпляров данного набора'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить все'"));
				СписокКнопок.Добавить("УдалитьОдин", НСтр("ru = 'Удалить один экземпляр'"));
			Иначе
				ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком'");
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'"));
			КонецЕсли; 
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Редактировать состав'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, 0, КодВозвратаДиалога.Да);
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные.УслугаАгента Тогда
			Отказ = Истина;
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ДоговорПлатежногоАгента) Тогда
			АгентскиеПлатежиУНФКлиентСервер.УдалитьСтрокиАгентскогоВознаграждения(Объект.Запасы, ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.КлючСвязи) Тогда
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, ТекущиеДанные, "КлючСвязи");
		КонецЕсли;
		ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.АкцизныеМарки, ТекущиеДанные);
		ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.СкидкиНаценки, ТекущиеДанные);
		// Серии номенклатуры
		Для каждого ВыделеннаяСтрока Из Элементы[ИмяТЧ].ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы[ИмяТЧ].ДанныеСтроки(ВыделеннаяСтрока);
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалениемЗавершение(Результат, ДанныеНабора) Экспорт
	
	// Наборы
	Если Результат=Неопределено ИЛИ Результат=КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;
	
	СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = СтрокиНабора[0];
	
	Если Результат=КодВозвратаДиалога.Нет Тогда
		
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	ИначеЕсли Результат=КодВозвратаДиалога.Да Тогда
		
		Для каждого Стр Из СтрокиНабора Цикл
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, Стр,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла; 
		НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, Объект.ДобавленныеНаборы);
		
		Модифицированность = Истина;
		ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
		
	ИначеЕсли Результат="УдалитьОдин" Тогда
		
		ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
		Если ДобавленныеСтроки.Количество()=0 ИЛИ ДобавленныеСтроки[0].Количество<=1 Тогда
			Для каждого Стр Из СтрокиНабора Цикл
				СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, Стр,
					ИспользоватьСерииНоменклатурыОстатки);
			КонецЦикла; 
			НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, Объект.ДобавленныеНаборы);
		Иначе
			СтароеКоличество = ДобавленныеСтроки[0].Количество;
			ДобавленныеСтроки[0].Количество = СтароеКоличество-1;
			НаборыКлиентСервер.УдалитьЭкземплярНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, , СтароеКоличество);
			НаборыКлиент.УдалитьЛишниеСтрокиПодчиненнойТЧ(Объект.Запасы, Объект.СерииНоменклатуры);
			СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
			Для каждого Стр Из СтрокиНабора Цикл
				РассчитатьСуммуВСтрокеТабличнойЧасти(Стр);
			КонецЦикла;
		КонецЕсли;
		
		Модифицированность = Истина;
		ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
		
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления строки списка Запасы.
//
&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
	
	ЗапасыПослеУдаленияСервер();
	
КонецПроцедуры // ТоварыПослеУдаления()

&НаСервере
Процедура ЗапасыПослеУдаленияСервер()
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриИзмененииЭлемента(ЭтаФорма, "Запасы", Неопределено);
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеУдаленияСтрокиЗапасов()
	
	ПересчитатьДокументНаКлиенте();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("УдалениеСтроки");
	
	Если РежимОстаткиИРезервы Тогда
		Если ЗначениеЗаполнено(НоменклатураУдаленнойСтроки) Тогда
			ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(,НоменклатураУдаленнойСтроки);
		Иначе
			ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	ХарактеристикаПриИзмененииОбработчикСобытия("Запасы");
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении_МК(Элемент)
	
	ХарактеристикаПриИзмененииОбработчикСобытия("ЗапасыМК");
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзмененииОбработчикСобытия(ИмяТЧ)

	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
		
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
		
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 	Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента",	 	Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена",			 	СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;   
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	Если СтруктураДанные.ЭтоНабор Тогда
		
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные);
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
	
		#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Элементы[ИмяТЧ].ЗакончитьРедактированиеСтроки(Истина);
		#КонецЕсли 
		
		ПересчитатьДокументНаКлиенте();
		
		ОбновитьДанныеОстатковИПризнакиХарактеристикИПартий();
		
	Иначе
		
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		
		СтрокаТабличнойЧасти.НоменклатураХарактеристикаИПартия = СокрЛП(""+СтрокаТабличнойЧасти.Номенклатура)+?(СтрокаТабличнойЧасти.Характеристика.Пустая(), "", ". "+СтрокаТабличнойЧасти.Характеристика)+
			?(СтрокаТабличнойЧасти.Партия.Пустая(), "", ". "+СтрокаТабличнойЧасти.Партия);
			
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти);
		КонецЕсли
			
	КонецЕсли;
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

// Процедура - обработчик события ПриИзменении колонки Партия ТЧ Запасы.
//
&НаКлиенте
Процедура ДокументЧекККМЗапасыПартияПриИзменении(Элемент)
	ТЧПартияПриИзменении("Запасы");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении колонки Партия ТЧ Запасы.
//
&НаКлиенте
Процедура ДокументЧекККМЗапасыПартияПриИзменении_МК(Элемент)
	ТЧПартияПриИзменении("ЗапасыМК");
КонецПроцедуры

&НаКлиенте
Процедура ТЧПартияПриИзменении(ИмяТЧ)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		СтрокаТабличнойЧасти.НоменклатураХарактеристикаИПартия = "" + СтрокаТабличнойЧасти.Номенклатура + ?(СтрокаТабличнойЧасти.Характеристика.Пустая(), "", ". "+СтрокаТабличнойЧасти.Характеристика)+
			?(СтрокаТабличнойЧасти.Партия.Пустая(), "", ". "+СтрокаТабличнойЧасти.Партия);
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти)
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти)
	КонецЕсли;
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении_МК(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.ЗапасыМК.ТекущиеДанные);
	
	Если РежимОстаткиИРезервы Тогда
		
		СтрокаТабличнойЧасти = Элементы.ЗапасыМК.ТекущиеДанные;
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
		ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти)
	КонецЕсли;
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

// Процедура - обработчик события ОбработкаВыбора поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТЧЕдиницаИзмеренияОбработкаВыбора("Запасы", ВыбранноеЗначение);
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

// Процедура - обработчик события ОбработкаВыбора поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора_МК(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТЧЕдиницаИзмеренияОбработкаВыбора("ЗапасыМК", ВыбранноеЗначение);
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ТЧЕдиницаИзмеренияОбработкаВыбора(ИмяТЧ, ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		Если КэшЗначений.ИспользоватьМинимальныеЦены
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтрокаТабличнойЧасти.МинимальнаяЦена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		
		КонецЕсли;
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

// Процедура - обработчик события ПриИзменении поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	ТЧЕдиницаИзмеренияПриИзменении("Запасы");
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧЕдиницаИзмеренияПриИзменении(ИмяТЧ)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти,, Ложь);
	УстановитьОписаниеДляСтрокиТЧЗапасы(Объект, СтрокаТабличнойЧасти);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти)
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении_МК(Элемент)
	ТЧЕдиницаИзмеренияПриИзменении("ЗапасыМК");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		АгентскиеПлатежиУНФКлиентСервер.ВыделитьАгентскоеВознаграждениеВТаблице(Объект, СтрокаТабличнойЧасти);
		АгентскиеПлатежиУНФКлиентСервер.ЗаполнитьРасчетныеПоляАгентскогоВознаграждения(Объект,, ЭтаФорма);
		СтрокаУслуги = АгентскиеПлатежиУНФКлиентСервер.СтрокаУслугаАгента(Объект.Запасы, СтрокаТабличнойЧасти);
		Если СтрокаУслуги <> Неопределено Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаУслуги);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
&НаКлиенте
Процедура ЗапасыЦенаПриИзменении_МК(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.ЗапасыМК.ТекущиеДанные);
КонецПроцедуры // ЗапасыЦенаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении(Элемент)
	ТЧПроцентСкидкиНаценкиПриИзменении("Запасы");
КонецПроцедуры // ЗапасыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении_МК(Элемент)
	ТЧПроцентСкидкиНаценкиПриИзменении("ЗапасыМК");
КонецПроцедуры // ЗапасыПроцентСкидкиНаценкиПриИзменении()

&НаКлиенте
Процедура ТЧПроцентСкидкиНаценкиПриИзменении(ИмяТЧ)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры // ЗапасыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СуммаСкидкиНаценки.
//
&НаКлиенте
Процедура ЗапасыСуммаСкидкиНаценкиПриИзменении(Элемент)
	ТЧСуммаСкидкиНаценкиПриИзменении("Запасы");
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаСкидкиНаценки.
//
&НаКлиенте
Процедура ЗапасыСуммаСкидкиНаценкиПриИзменении_МК(Элемент)
	ТЧСуммаСкидкиНаценкиПриИзменении("ЗапасыМК");
КонецПроцедуры

&НаКлиенте
Процедура ТЧСуммаСкидкиНаценкиПриИзменении(ИмяТЧ)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьПроцентСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);	
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	ТЧСуммаПриИзменении("Запасы");
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении_МК(Элемент)
	ТЧСуммаПриИзменении("ЗапасыМК");
КонецПроцедуры

&НаКлиенте
Процедура ТЧСуммаПриИзменении(ИмяТЧ)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны, РассчитатьЦену", Истина, Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	ТЧСтавкаНДСПриИзменении("Запасы");
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении_МК(Элемент)
	ТЧСтавкаНДСПриИзменении("ЗапасыМК");
КонецПроцедуры

&НаКлиенте
Процедура ТЧСтавкаНДСПриИзменении(ИмяТЧ)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
	
КонецПроцедуры // ЗапасыСтавкаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	ТЧСуммаНДСПриИзменении("Запасы");
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении_МК(Элемент)
	ТЧСуммаНДСПриИзменении("ЗапасыМК");
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ТЧСуммаНДСПриИзменении(ИмяТЧ)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыПриИзменении(Элемент)
	
	Если Не Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница = Элементы.СтраницаДанныеПоСтроке Тогда
		ПоказатьСкрытьСдачуНаКлиенте(Ложь);
	КонецЕсли;
	
	НастроитьЗакладкиПродажиМК();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗакладкиПродажиМК()
	
	Если ЭтоМобильныйКлиент Тогда
		Если Объект.Запасы.Количество() = 0
			И Элементы.ГруппаСтраницыПродажаМК.ТекущаяСтраница = Элементы.ГруппаТЧ Тогда
			Элементы.ГруппаСтраницыПродажаМК.ТекущаяСтраница = Элементы.ГруппаНетДанных;
		ИначеЕсли Объект.Запасы.Количество() > 0
			И Элементы.ГруппаСтраницыПродажаМК.ТекущаяСтраница = Элементы.ГруппаНетДанных Тогда
			Элементы.ГруппаСтраницыПродажаМК.ТекущаяСтраница = Элементы.ГруппаТЧ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ХарактеристикиНабора(СтрокаТабличнойЧасти.Номенклатура, Текст);
	КонецЕсли;                              
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТЧХарактеристикаНачалоВыбора("Запасы", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаНачалоВыбора_МК(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТЧХарактеристикаНачалоВыбора("ЗапасыМК", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧХарактеристикаНачалоВыбора(ИмяТЧ, Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураОткрытия.Вставить("РежимВыбора", Истина);
		СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
		ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	КонецЕсли;                              
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ЧекККМ", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийДинамическихСписков

// Процедура - обработчик события ПриАктивизацииСтроки элемента СписокЧековККМ.
//
&НаКлиенте
Процедура СписокЧековККМПриАктивизацииСтроки(Элемент)
	
	// Лучше период немного побольше сделать, иначе пользователь не будет успевать ввести номер в поле поиска.
	ПодключитьОбработчикОжидания("СписокЧековККМПриАктивизацииСтрокиОбработкаОжидания", 0.3, Истина);
	
КонецПроцедуры

// Процедура обновляет информацию о составе, гиперссылках и настраивает кнопки подвала на закладке Возврат.
//
&НаКлиенте
Процедура СписокЧековККМПриАктивизацииСтрокиОбработкаОжидания()
	
	ТекЧекККМ = Элементы.СписокЧековККМ.ТекущаяСтрока;
	Если ТекЧекККМ <> Неопределено Тогда
		ЗаполнитьСоставЧекаИСсылкиНаДокументыНаСервере(ТекЧекККМ);
	Иначе
		СоставЧека = "";
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("СписокЧековККМПриАктивизацииСтрокиОбработкаОжидания");
	
КонецПроцедуры

// Процедура заполняет информацию о составе ТЧ текущего чека ККМ в элементе СписокЧековККМ.
//
&НаСервере
Процедура ЗаполнитьСоставЧекаИСсылкиНаДокументыНаСервере(ЧекККМ)
	
	// Заполним состав чека.
	ЭтоПерваяСтрока = Истина;
	Для Каждого ТекСтрока Из ЧекККМ.Запасы Цикл
		Если ЭтоПерваяСтрока Тогда
			ЭтоПерваяСтрока = Ложь;
			СоставЧека = ""+ТекСтрока.Номенклатура+". "+Символы.ПС+Символы.Таб+ПолучитьОписаниеДляСтрокиТЧЗапасыНаСервере(ТекСтрока);
		Иначе
			СоставЧека = СоставЧека+Символы.ПС+ТекСтрока.Номенклатура+". "+Символы.ПС+Символы.Таб+ПолучитьОписаниеДляСтрокиТЧЗапасыНаСервере(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним ссылки на документы.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриходнаяНакладная.Ссылка,
	|	ПриходнаяНакладная.Номер,
	|	ПриходнаяНакладная.Дата
	|ПОМЕСТИТЬ ПриходнаяНакладная
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|ГДЕ
	|	ПриходнаяНакладная.Проведен
	|	И ПриходнаяНакладная.ЧекККМ = &ЧекККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриходнаяНакладная.Ссылка,
	|	ПриходнаяНакладная.Номер,
	|	ПриходнаяНакладная.Дата
	|ИЗ
	|	ПриходнаяНакладная КАК ПриходнаяНакладная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходИзКассы.Ссылка,
	|	РасходИзКассы.Дата,
	|	РасходИзКассы.Номер
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриходнаяНакладная КАК ПриходнаяНакладная
	|		ПО РасходИзКассы.ДокументОснование = ПриходнаяНакладная.Ссылка
	|ГДЕ
	|	РасходИзКассы.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМВозврат.Ссылка,
	|	ЧекККМВозврат.Номер,
	|	ЧекККМВозврат.Дата
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.Проведен
	|	И ЧекККМВозврат.ЧекККМ = &ЧекККМ";
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
	
	МРезультатов = Запрос.ВыполнитьПакет();
	
	ЕстьПН  = Не МРезультатов[1].Пустой();
	ЕстьРКО = Не МРезультатов[2].Пустой();
	ЕстьЧек = Не МРезультатов[3].Пустой();
	
	#Область ПН_РКО
	Если ЕстьПН Тогда // Приходная накладная
		
		// Включение кнопок
		Элементы.ДекорацияПриходнаяНакладная.Видимость				= Истина;
		Элементы.СоздатьПриходнуюНакладнуюНаВозврат.Видимость		= Истина;
		Элементы.СоздатьРКОНаОснованииПриходнойНакладной.Видимость	= Истина;
		Элементы.СоздатьПриходнуюНакладнуюНаВозврат.ЦветТекста		= WebЦвета.Серый;
		Элементы.СоздатьРКОНаОснованииПриходнойНакладной.ЦветТекста	= Новый Цвет;
		
		// Заполнение ссылок и декораций
		Выборка = МРезультатов[1].Выбрать();
		Выборка.Следующий();
		ПриходнаяНакладнаяНаВозврат = Выборка.Ссылка;
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
		Элементы.ДекорацияПриходнаяНакладная.Заголовок = СтрШаблон(НСтр("ru = 'Прих. нак-я №%1 от %2'"),
			СокрЛП(НомерДокумента), Формат(Выборка.Дата, "ДЛФ=D;"));
		Пока Выборка.Следующий() Цикл
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
			Элементы.ДекорацияПриходнаяНакладная.Заголовок = СтрШаблон(НСтр("ru = '%1; №%2 от %3'"),
				Элементы.ДекорацияПриходнаяНакладная.Заголовок, НомерДокумента, Формат(Выборка.Дата, "ДЛФ=D;"));
		КонецЦикла;
		
		// Выключение лишних элементов
		Элементы.КоманднаяПанельВозврата.Видимость	= Ложь;
		Элементы.ДекорацияЧекККМНаВозврат.Видимость	= Ложь;
		Элементы.СоздатьЧекККМНаВозврат.Видимость	= Ложь;
		ЧекККМНаВозврат								= Документы.ЧекККМВозврат.ПустаяСсылка();
		Элементы.ДекорацияРКО.Видимость				= Ложь;
		РКО											= Документы.РасходИзКассы.ПустаяСсылка();
		
	КонецЕсли;
	
	Если ЕстьРКО Тогда // Расход из кассы
		
		// Включение кнопок
		Элементы.СоздатьРКОНаОснованииПриходнойНакладной.ЦветТекста	= WebЦвета.Серый;
		Элементы.ДекорацияРКО.Видимость								= Истина;
		
		// Заполнение ссылок и декораций
		Выборка = МРезультатов[2].Выбрать();
		Выборка.Следующий();
		РКО = Выборка.Ссылка;
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
		Элементы.ДекорацияРКО.Заголовок = СтрШаблон(НСтр("ru = 'РКО №%1 от %2'"), НомерДокумента,
			Формат(Выборка.Дата, "ДЛФ=D;"));
		Пока Выборка.Следующий() Цикл
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
			Элементы.ДекорацияРКО.Заголовок = СтрШаблон(НСтр("ru = '%1; №%2 от %3'"), Элементы.ДекорацияРКО.Заголовок,
				Формат(Выборка.Дата, "ДЛФ=D;"));
		КонецЦикла;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область Чек
	Если ЕстьЧек Тогда // Чек ККМ
		
		// Включение кнопок
		Элементы.ДекорацияЧекККМНаВозврат.Видимость	= Истина;
		Элементы.СоздатьЧекККМНаВозврат.Видимость	= Истина;
		Элементы.СоздатьЧекККМНаВозврат.ЦветТекста	= WebЦвета.Серый;
		
		// Заполнение ссылок и декораций
		Выборка = МРезультатов[3].Выбрать();
		Выборка.Следующий();
		ЧекККМНаВозврат = Выборка.Ссылка;
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
		Элементы.ДекорацияЧекККМНаВозврат.Заголовок = СтрШаблон(НСтр("ru = 'Чек ККМ на возврат №%1 от %2'"),
			СокрЛП(НомерДокумента), Формат(Выборка.Дата, "ДЛФ=D;"));
		Пока Выборка.Следующий() Цикл
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
			Элементы.ДекорацияЧекККМНаВозврат.Заголовок = СтрШаблон(НСтр("ru = '%1; №%2 от %3'"),
				Элементы.ДекорацияЧекККМНаВозврат.Заголовок, НомерДокумента, Формат(Выборка.Дата, "ДЛФ=D;"));
		КонецЦикла;
		
		// Выключение лишних элементов
		Элементы.КоманднаяПанельВозврата.Видимость					= Ложь;
		Элементы.СоздатьПриходнуюНакладнуюНаВозврат.Видимость		= Ложь;
		Элементы.СоздатьРКОНаОснованииПриходнойНакладной.Видимость	= Ложь;
		Элементы.ДекорацияПриходнаяНакладная.Видимость				= Ложь;
		Элементы.ДекорацияРКО.Видимость								= Ложь;
		ПриходнаяНакладнаяНаВозврат									= Документы.ПриходнаяНакладная.ПустаяСсылка();
		РКО															= Документы.РасходИзКассы.ПустаяСсылка();
		
	КонецЕсли;
	#КонецОбласти
	
	#Область НетДокументов	
	Если Не (ЕстьПН ИЛИ ЕстьРКО ИЛИ ЕстьЧек) Тогда
		
		ПриходнаяНакладнаяНаВозврат	= Документы.ПриходнаяНакладная.ПустаяСсылка();
		РКО							= Документы.РасходИзКассы.ПустаяСсылка();
		ЧекККМНаВозврат				= Документы.ЧекККМВозврат.ПустаяСсылка();
		
		Элементы.ДекорацияПриходнаяНакладная.Видимость	= Ложь;
		Элементы.ДекорацияРКО.Видимость					= Ложь;
		Элементы.ДекорацияЧекККМНаВозврат.Видимость		= Истина;
		Элементы.ДекорацияЧекККМНаВозврат.Заголовок		= "";
		
		Элементы.СоздатьПриходнуюНакладнуюНаВозврат.Видимость		= Ложь;
		Элементы.СоздатьРКОНаОснованииПриходнойНакладной.Видимость	= Ложь;
		Элементы.СоздатьЧекККМНаВозврат.Видимость					= Ложь;
		Элементы.КоманднаяПанельВозврата.Видимость					= Ложь;
		
		// Получим вариант оформления возврата
		ВариантВозврата = ПолучитьВариантВозврата();
		
		Если ЧекККМ.КассоваяСмена.КассоваяСмена.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКассовойСмены.Открыта") Тогда
			
			Элементы.СоздатьЧекККМНаВозврат.Видимость	= Истина;
			Элементы.СоздатьЧекККМНаВозврат.ЦветТекста	= Новый Цвет;
			
		ИначеЕсли ВариантВозврата = ПредопределенноеЗначение("Перечисление.ВариантыВозвратаПоЗакрытойСмене.ПН") Тогда
			
			Элементы.СоздатьПриходнуюНакладнуюНаВозврат.Видимость		= Истина;
			Элементы.СоздатьРКОНаОснованииПриходнойНакладной.Видимость	= Истина;
			
			Элементы.СоздатьПриходнуюНакладнуюНаВозврат.ЦветТекста		= Новый Цвет;
			Элементы.СоздатьРКОНаОснованииПриходнойНакладной.ЦветТекста	= WebЦвета.Серый;
			
		ИначеЕсли ВариантВозврата = ПредопределенноеЗначение("Перечисление.ВариантыВозвратаПоЗакрытойСмене.Чек") Тогда
			
			Элементы.СоздатьЧекККМНаВозврат.Видимость	= Истина;
			Элементы.СоздатьЧекККМНаВозврат.ЦветТекста	= Новый Цвет;
			
		ИначеЕсли ВариантВозврата = ПредопределенноеЗначение("Перечисление.ВариантыВозвратаПоЗакрытойСмене.ПН_Чек") Тогда
			
			Элементы.КоманднаяПанельВозврата.Видимость = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

// Процедура заполняет информацию о составе ТЧ текущего заказа покупателя в элементе СписокЗаказов.
//
&НаСервере
Процедура ЗаполнитьСоставЗаказаИСсылкиНаДокументыНаСервере(Заказ)
	
	ЗаказОсновнойВариант = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "ОсновнойВариантКП");
	
	// Заполним состав чека.
	ЭтоПерваяСтрока = Истина;
	Для Каждого ТекСтрока Из Заказ.Запасы Цикл
		
		Если ТекСтрока.ЭтоРазделитель ИЛИ ТекСтрока.НомерВариантаКП <> ЗаказОсновнойВариант Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоПерваяСтрока Тогда
			ЭтоПерваяСтрока = Ложь;
			СоставЗаказа = ""+ТекСтрока.Номенклатура+". "+Символы.ПС+Символы.Таб+ПолучитьОписаниеДляСтрокиТЧЗапасыНаСервере(ТекСтрока);
		Иначе
			СоставЗаказа = СоставЗаказа+Символы.ПС+ТекСтрока.Номенклатура+". "+Символы.ПС+Символы.Таб+ПолучитьОписаниеДляСтрокиТЧЗапасыНаСервере(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним ссылки на документы.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЧекККМЗапасы.Ссылка КАК Ссылка,
		|	ЧекККМЗапасы.Ссылка.Номер КАК Номер,
		|	ЧекККМЗапасы.Ссылка.Дата КАК Дата,
		|	НЕ ЧекККМЗапасы.Ссылка.ОперацияСДенежнымиСредствами КАК ПередачаТоваров,
		|	1 КАК Порядок
		|ИЗ
		|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
		|ГДЕ
		|	ЧекККМЗапасы.Заказ = &Заказ
		|	И ЧекККМЗапасы.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриходнаяНакладнаяЗапасы.Ссылка,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.Номер,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.Дата,
		|	ИСТИНА,
		|	2
		|ИЗ
		|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
		|ГДЕ
		|	ПриходнаяНакладнаяЗапасы.Заказ = &Заказ
		|	И ПриходнаяНакладнаяЗапасы.Ссылка.Проведен
		|	И ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = &ВидОперацииВозвратОтПокупателя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЧекККМВозвратЗапасы.Ссылка,
		|	ЧекККМВозвратЗапасы.Ссылка.Номер,
		|	ЧекККМВозвратЗапасы.Ссылка.Дата,
		|	НЕ ЧекККМВозвратЗапасы.Ссылка.ОперацияСДенежнымиСредствами,
		|	3
		|ИЗ
		|	Документ.ЧекККМВозврат.Запасы КАК ЧекККМВозвратЗапасы
		|ГДЕ
		|	ЧекККМВозвратЗапасы.Заказ = &Заказ
		|	И ЧекККМВозвратЗапасы.Ссылка.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ВидОперацииВозвратОтПокупателя", Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя);
	
	Результат = Запрос.Выполнить();
	
	// Определим видимость кнопок и гиперссылок.
	Выборка = Результат.Выбрать();
	Если НЕ Результат.Пустой() Тогда
		
		Элементы.ДекорацияЧекККМ.Заголовок = "";
		
		ЕстьПередачаТоваров = Ложь;
		
		Пока Выборка.Следующий() Цикл
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
			Если Выборка.Порядок = 1 Тогда
				ЧекККМ = Выборка.Ссылка;
				
				ПредставлениеДокумента = СтрШаблон(НСтр("ru = 'Чек ККМ №%1 от %2'"), НомерДокумента,
					Формат(Выборка.Дата, "ДЛФ=D;"));
			ИначеЕсли Выборка.Порядок = 2 Тогда
				ПредставлениеДокумента = СтрШаблон(НСтр("ru = 'Прих. накл. (возврат) №%1 от %2'"), НомерДокумента,
					Формат(Выборка.Дата, "ДЛФ=D;"));
			ИначеЕсли Выборка.Порядок = 3 Тогда
				ПредставлениеДокумента = СтрШаблон(НСтр("ru = 'Чек ККМ на возврат №%1 от %2'"), НомерДокумента,
				Формат(Выборка.Дата, "ДЛФ=D;"));
			КонецЕсли;
			
			Если Элементы.ДекорацияЧекККМ.Заголовок <> "" Тогда
				Элементы.ДекорацияЧекККМ.Заголовок = Элементы.ДекорацияЧекККМ.Заголовок + "; ";
			КонецЕсли;
			Элементы.ДекорацияЧекККМ.Заголовок = Элементы.ДекорацияЧекККМ.Заголовок + ПредставлениеДокумента;
			
			ЕстьПередачаТоваров = ЕстьПередачаТоваров ИЛИ Выборка.ПередачаТоваров;
			
		КонецЦикла;
		
		Если ЕстьПередачаТоваров Тогда
			Элементы.СоздатьЧекККМНаОснованииЗаказа.ЦветТекста = WebЦвета.Серый;
		Иначе
			Элементы.СоздатьЧекККМНаОснованииЗаказа.ЦветТекста = Новый Цвет;
		КонецЕсли;
		
	Иначе
		ЧекККМ = Документы.ЧекККМ.ПустаяСсылка();
		Элементы.ДекорацияЧекККМ.Заголовок = "";
		Элементы.СоздатьЧекККМНаОснованииЗаказа.ЦветТекста = Новый Цвет;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
		Элементы.ДекорацияЧекККМ.Заголовок = СтрШаблон(НСтр("ru = '%1; №%2 от %3'"),
			Элементы.ДекорацияЧекККМ.Заголовок, НомерДокумента, Формат(Выборка.Дата, "ДЛФ=D;"));
	КонецЦикла;
	
	Элементы.СоздатьЧекККМНаОснованииЗаказа.Видимость = Истина;
	
	Элементы.ДекорацияЧекККМ.Видимость = Истина;
	
КонецПроцедуры

// Процедура - обработчик события ВыборЗначения элемента Список.
//
&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыЧекККМ");
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОткрытьФорму("Документ.ЧекККМ.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Ссылка));
		ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыЧекККМВозврат");
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОткрытьФорму("Документ.ЧекККМВозврат.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Ссылка));
		ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыОтчетОРозничныхПродажах");
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Ссылка));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтложенныхЧековПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаОтложенныхЧеков", 0.3, Истина);
	
КонецПроцедуры

// Заполняет реквизит формы "СоставОтложенногоЧека" текстовым
// представлением табличной части "Запасы"
//
// Параметры:
//  ТекЧекККМ - ДокументСсылка.ЧекККМ - выбранный чек, состав которого
//                                      необходимо отобразить
&НаСервере
Процедура ЗаполнитьСоставОтложенногоЧека(ТекЧекККМ)
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекСтрока Из ТекЧекККМ.Запасы Цикл
		СтрокаЧека = СтрШаблон("%1. %2", ТекСтрока.Номенклатура, Символы.ПС + Символы.Таб + ПолучитьОписаниеДляСтрокиТЧЗапасыНаСервере(ТекСтрока));
		МассивСтрок.Добавить(СтрокаЧека);
	КонецЦикла;
	
	СоставОтложенногоЧека = СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДействияКомандныхПанелейФормы

// Процедура - обработчик команды ЗагрузитьДанныеИзТСД.
//
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтаФорма);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

// Процедура - обработчик события Действие команды ПолучитьВес
//
&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.НеобходимостьВводаАкцизнойМарки
			ИЛИ ТекущиеДанные.НеобходимостьВводаКодаМаркировки Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Действие недоступно для маркируемой продукции.'");
			Сообщение.Поле = "Объект.Запасы";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		// Наборы
		Если ЗначениеЗаполнено(ТекущиеДанные.НоменклатураНабора) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
			Сообщение.Поле = "Объект.Запасы";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		// Конец Наборы
	КонецЕсли;
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтаФорма, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

// Процедура - обработчик команды ПолучитьВес формы. Выполняется после получения веса от электронных весов.
//
&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	ЗапасыПриОкончанииРедактирования(Элементы.Запасы, Ложь, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события Нажатие элемента ЦеныИВалюта формы.
//
&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

// Процедура - обработчик команды УвеличитьКоличество формы.
//
&НаКлиенте
Процедура УвеличитьКоличество(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.НеобходимостьВводаАкцизнойМарки
			ИЛИ ТекущиеДанные.НеобходимостьВводаКодаМаркировки Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Действие недоступно для маркируемой продукции'");
			Сообщение.Поле = "Объект.Запасы";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		// Наборы
		Если ЗначениеЗаполнено(ТекущиеДанные.НоменклатураНабора) Тогда
			РедактироватьСоставНабора(ТекущиеДанные);
			Возврат;
		КонецЕсли;
		// Конец Наборы
		ТекущиеДанные.Количество = ТекущиеДанные.Количество + 1;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		ПересчитатьДокументНаКлиенте();
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияОстатковПоНоменклатуре(ТекущиеДанные)
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана строка'");
		Сообщение.Поле = "Объект.Запасы";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды УменьшитьКоличество формы.
//
&НаКлиенте
Процедура УменьшитьКоличество(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.НеобходимостьВводаАкцизнойМарки
			ИЛИ ТекущиеДанные.НеобходимостьВводаКодаМаркировки Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Действие недоступно для маркируемой продукции'");
			Сообщение.Поле = "Объект.Запасы";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		// Наборы
		Если ЗначениеЗаполнено(ТекущиеДанные.НоменклатураНабора) Тогда
			РедактироватьСоставНабора(ТекущиеДанные);
			Возврат;
		КонецЕсли;
		// Конец Наборы
		ТекущиеДанные.Количество = ТекущиеДанные.Количество - 1;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		ПересчитатьДокументНаКлиенте();
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияОстатковПоНоменклатуре(ТекущиеДанные)
		КонецЕсли;
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана строка.'");
		Сообщение.Поле = "Объект.Запасы";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды ИзменитьКоличествоСПомощьюКалькулятора формы.
//
&НаКлиенте
Процедура ИзменитьКоличествоСПомощьюКалькулятора(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.НеобходимостьВводаАкцизнойМарки
			ИЛИ ТекущиеДанные.НеобходимостьВводаКодаМаркировки Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Действие недоступно для маркируемой продукции'");
			Сообщение.Поле = "Объект.Запасы";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		// Наборы
		Если ЗначениеЗаполнено(ТекущиеДанные.НоменклатураНабора) Тогда
			РедактироватьСоставНабора(ТекущиеДанные);
			Возврат;
		КонецЕсли;
		// Конец Наборы
		
		Оповещение = Новый ОписаниеОповещения("ИзменитьКоличествоСПомощьюКалькулятораЗавершение", ЭтотОбъект);
		
		СтруктураПараметров = Новый Структура("Количество, НоменклатураХарактеристикаИПартия, Цена, Сумма, ПроцентСкидкиНаценки, ПроцентАвтоматическойСкидки", 
			ТекущиеДанные.Количество, 
			ТекущиеДанные.НоменклатураХарактеристикаИПартия,
			ТекущиеДанные.Цена,
			ТекущиеДанные.Сумма,
			ТекущиеДанные.ПроцентСкидкиНаценки,
			ТекущиеДанные.ПроцентАвтоматическойСкидки);
			
		ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаВводаКоличества", СтруктураПараметров, , , , , Оповещение);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Действие недоступно для маркируемой продукции'");
		Сообщение.Поле = "Объект.Запасы";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды ИзменитьКоличествоСПомощьюКалькулятораЗавершение после закрытия формы изменения количества.
//
&НаКлиенте
Процедура ИзменитьКоличествоСПомощьюКалькулятораЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.Количество = Результат.Количество;
			РассчитатьСуммуВСтрокеТабличнойЧасти();
			ПересчитатьДокументНаКлиенте();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды ОчиститьТЧЗапасы формы.
//
&НаКлиенте
Процедура ОчиститьТЧЗапасы(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТЧЗапасыЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Очистить табличную часть?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

// Процедура - обработчик команды ОчиститьТЧЗапасыЗавершение после подтверждения удаления всех строк ТЧ запасы в форме вопроса.
//
&НаКлиенте
Процедура ОчиститьТЧЗапасыЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Запасы.Очистить();
		Объект.СуммаДокумента = Объект.Запасы.Итог("Всего");
		ОбновитьНадписьКнопкиКОплатеНаКлиенте();
		ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик команды ОткрытьКарточкуНоменклатуры формы.
//
&НаКлиенте
Процедура ОткрытьКарточкуНоменклатуры(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		МОграничениеТипа = Новый Массив;
		МОграничениеТипа.Добавить(ТипНоменклатурыЗапас);
		МОграничениеТипа.Добавить(ТипНоменклатурыУслуга);
		
		ДопПараметры = Новый Структура("ОграничениеТипа", МОграничениеТипа);
		ЗначенияЗаполнения = Новый Структура("ТипНоменклатуры", МОграничениеТипа);
		
		ПараметрыНовойПозицииНоменклатуры = Новый Структура("Ключ, ДополнительныеПараметры, ЗначенияЗаполнения", ТекущиеДанные.Номенклатура, ДопПараметры, ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыНовойПозицииНоменклатуры, ЭтотОбъект);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана строка.'");
		Сообщение.Поле = "Объект.Запасы";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды СписокСоздатьЧекККМНаВозврат формы.
//
&НаКлиенте
Процедура СписокСоздатьЧекККМНаВозврат(Команда)
	
	ТекстСообщения = "";
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыЧекККМВозврат");
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОткрытьФорму("Документ.ЧекККМВозврат.ФормаОбъекта", Новый Структура("Основание", ТекущиеДанные.Ссылка));
		Иначе
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Чек ККМ на возврат нельзя вводить на основании документов вида ""%1"".'"), ТипЗнч(ТекущиеДанные.Ссылка));
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран чек ККМ.'");
	КонецЕсли;
	
	Если ТекстСообщения <> "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = "Список";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды СписокСоздатьПриходнуюНакладнуюНаВозврат формы.
//
&НаКлиенте
Процедура СписокСоздатьПриходнуюНакладнуюНаВозврат(Команда)
	
	ТекстСообщения = "";
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыПриходнаяНакладнаяВозврат");
			// СтандартныеПодсистемы.ОценкаПроизводительности
			ОткрытьФорму("Документ.ПриходнаяНакладная.ФормаОбъекта", Новый Структура("Основание, РМК", ТекущиеДанные.Ссылка, Истина), ЭтотОбъект, УникальныйИдентификатор);
		Иначе
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Чек ККМ на возврат нельзя вводить на основании документов вида ""%1"".'"), ТипЗнч(ТекущиеДанные.Ссылка));
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбран чек ККМ.'");
	КонецЕсли;
	
	Если ТекстСообщения <> "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = "Список";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КэшированиеСтрок

// Инициализирует кэш строк на форме для для указанной таблицы.
// Для использования кэширования строк необходимо добавить на форму реквизит "КэшированныеСтроки" с типом "Произвольный".
//
// Параметры:
//  ТаблицаФормы - ТаблицаФормы - элемент формы, содержащий табличную часть.
//
&НаСервере
Процедура ИнициализироватьКэшСтрок() Экспорт
	
	КэшСтроки = Новый Структура;
	
	РеквизитыТаблицы = ПолучитьРеквизиты(Элементы.Запасы.ПутьКДанным);
	Для Каждого Реквизит Из РеквизитыТаблицы Цикл
		КэшСтроки.Вставить(Реквизит.Имя, Неопределено);
	КонецЦикла;
	
	Если КэшированныеСтроки = Неопределено Тогда
		КэшированныеСтроки = Новый Структура;
	КонецЕсли;
	КэшированныеСтроки.Вставить("Запасы", Новый ФиксированнаяСтруктура(КэшСтроки));
	
КонецПроцедуры

// Сохраняет в кэше на форме текущую строку указанной таблицы.
// Перед использованием необходим разовый вызов РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок().
//
// Параметры:
//  ТаблицаФормы - ТаблицаФормы - элемент формы, содержащий табличную часть.
//  Форма - УправляемаяФорма - форма объекта метаданных.
//
&НаКлиенте
Процедура КэшироватьТекущуюСтроку(ТекущаяСтрока = Неопределено) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Иначе
		ТекущиеДанные = ТекущаяСтрока;
	КонецЕсли;
	КэшСтроки     = Новый Структура(КэшированныеСтроки.Запасы);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(КэшСтроки, ТекущиеДанные);
	Иначе
		Для Каждого КлючИЗначение Из КэшСтроки Цикл
			КэшСтроки[КлючИЗначение.Ключ] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	КэшированныеСтроки.Запасы = Новый ФиксированнаяСтруктура(КэшСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область АвтоматическиеСкидки

// Процедура - обработчик команды РассчитатьСкидкиНаценки формы.
//
&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Если Объект.СкидкиНаценки.Количество() > 0 Тогда
			Объект.СкидкиНаценки.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СуммаДоРасчетаАвтоСкидок = Объект.Запасы.Итог("Всего");
	ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_РассчитатьСкидкиНаценкиКлиент", Истина, Ложь);
	РассчитатьСкидкиНаценкиКлиент();
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	
	Если СуммаДоРасчетаАвтоСкидок <> Объект.Запасы.Итог("Всего") Тогда
		СообщениеСтрока = НСтр("ru = 'Автоматические скидки (наценки) рассчитаны'");
		Элементы.СтраницыДанныеПоСтрокеИСдача.ТекущаяСтраница = Элементы.СтраницаСообщений;
	КонецЕсли;
	
КонецПроцедуры

// Процедура рассчитывает скидки по документу.
//
&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);  
	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(СтруктураПараметры);

	Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

// Функция сравнивает данные расчёта скидок на текущий момент времени с данными последнего расчёт скидок в документе.
// Если скидки изменились, то функция возвращает значение Истина.
//
&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Запасы.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Если Не СкидкиИзменились Тогда
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка Тогда
					СкидкиИзменились = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

// Процедура рассчитывает скидки по документу.
//
&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	РозничныеПродажиСервер.РассчитатьСкидкиНаценкиНаСервере(ЭтотОбъект, СтруктураПараметры);
КонецПроцедуры

// Процедура открывает общую форму для анализа информации о скидках по текущей строке.
//
&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		ТекстВопроса = НСтр("ru='Скидки (наценки) не рассчитаны, рассчитать?'");
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("СтруктураПараметры", СтруктураПараметры);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросРассчитатьСкидки", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Завершение немодального открытия окна "ПоказатьВопрос()". Процедура открывает общую форму для анализа информации о
// скидках по текущей строке.
//
&НаКлиенте
Процедура ОповещениеВопросРассчитатьСкидки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметры = ДополнительныеПараметры.СтруктураПараметры;
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
	РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	
КонецПроцедуры

// Процедура открывает общую форму для анализа информации о скидках по текущей строке после расчета автоматических скидок (если это было необходимо).
//
&НаКлиенте
Процедура РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры)
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_РассчитатьСкидкиНаценкиКлиент", Истина, Ложь);
		РассчитатьСкидкиНаценкиКлиент();
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события Выбор табличной части Запасы.
//
&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Наборы
	СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если НЕ ТолькоПросмотр И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) И  
		(Элемент.ТекущийЭлемент = Элементы.ЗапасыНоменклатура ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыХарактеристика ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыКартинкаНабора ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыКоличество ИЛИ
		Элемент.ТекущийЭлемент = Элементы.ЗапасыЕдиницаИзмерения) Тогда 
		
		СтандартнаяОбработка = Ложь;
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	// Конец Наборы
	
	// Подарочные сертификаты
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыЦена И Элемент.ТекущийЭлемент.ТолькоПросмотр Тогда
		
		ПоляНоменклатуры = ТипНоменклатурыПроизвольныйНоминал(СтрокаТабличнойЧасти.Номенклатура);
			
		Если ПоляНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")
			И ПоляНоменклатуры.ПроизвольныйНоминал Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("УказатьЦенуСертификата", ЭтотОбъект, СтрокаТабличнойЧасти);
			ПоказатьВводЧисла(ОписаниеОповещения, СтрокаТабличнойЧасти.Цена, НСтр(
				"ru = 'Введите стоимость сертификата'"), 15, 2);
		КонецЕсли;
			
	КонецЕсли;
	// Конец Подарочные сертификаты
	
	Если (Элемент.ТекущийЭлемент = Элементы.ЗапасыПроцентАвтоматическойСкидки ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыСуммаАвтоматическойСкидки)
		И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьИнформациюОСкидкахКлиент();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		
		СтруктураПараметров = Новый Структура("ОрганизацияОбъекта, Номенклатура, Характеристика, Партия, Склад, ЕдиницаИзмерения, ЗаказПокупателя, НомерВариантаКП");
		
		СтруктураПараметров.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
		СтруктураПараметров.Характеристика = СтрокаТабличнойЧасти.Характеристика;
		СтруктураПараметров.Партия = СтрокаТабличнойЧасти.Партия;
		СтруктураПараметров.Склад = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница),
									  СтрокаТабличнойЧасти.СтруктурнаяЕдиница,
									  Объект.СтруктурнаяЕдиница);
		СтруктураПараметров.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
		СтруктураПараметров.ЗаказПокупателя =Объект.Заказ;
		СтруктураПараметров.ОрганизацияОбъекта = Объект.Организация;
		
		ПолеДляПроверки = ?(ЭтоМобильныйКлиент, Элементы.ЗапасыМККПоступлению, Элементы.ЗапасыКПоступлению);
		
		Если Элемент.ТекущийЭлемент = ПолеДляПроверки Тогда
			
			ЗначениеПоля = СтрокаТабличнойЧасти.КПоступлению;
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыПоступления");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтотОбъект, ПараметрыОповещения);
				
				СписокДокументов = СписокДокументовПоЗаказу("ЗапасыПоступления", СтруктураПараметров);
				ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент = Элементы.ЗапасыСтруктурнаяЕдиницаДляРежимаОстатки Тогда
			
			ЗначениеПоля = СтрокаТабличнойЧасти.Доступно;
			
			СписокВыбораСклад = Элементы.ЗапасыСтруктурнаяЕдиницаДляРежимаОстатки.СписокВыбора;
			СписокВыбораСклад.Очистить();
			
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				
				ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыДоступно");
				Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтотОбъект, ПараметрыОповещения);
				
				СписокДокументов = СписокДокументовПоЗаказу("ОбщиеЗапасы", СтруктураПараметров);
				
				Для Каждого ЭлементСписка Из СписокДокументов Цикл
					Если СписокДоступныхСкладов.НайтиПоЗначению(ЭлементСписка.Значение.Склад) <> Неопределено Тогда
						СписокВыбораСклад.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление,, ЭлементСписка.Картинка);
					КонецЕсли;
				КонецЦикла;
				
				Если СписокДокументов.Количество() Тогда
					СписокДокументов.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"),, БиблиотекаКартинок.Отчет);
					СписокВыбораСклад.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"),, БиблиотекаКартинок.Отчет);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки
			И НЕ ТолькоПросмотр
			И(Элемент.ТекущийЭлемент = Элементы.ЗапасыЦенаСАгентскимВознаграждением
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыЦена) Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.ДанныеАгентскогоДоговора) Тогда
				ВводДополнительнойИнформации = Истина;
				ВводПараметровАгентскогоПлатежа(ТекущиеДанные, Элемент.ТекущийЭлемент);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипНоменклатурыПроизвольныйНоминал(Знач Номенклатура)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ТипНоменклатуры, ПроизвольныйНоминал");
КонецФункции

&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Наборы
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если Копирование И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
		// Состав набора не копируется
		Отказ = Истина;
	КонецЕсли; 
	// Конец Наборы
	
	Если Копирование И РежимОстаткиИРезервы Тогда
		
		Отказ = Истина;
		
		НоваяСтрока = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "Ячейка", "ПоложениеСклада");
		
		Если Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки <> 0 ИЛИ Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки <> 0 Тогда
			НоваяСтрока.ПроцентАвтоматическойСкидки = 0;
			НоваяСтрока.СуммаАвтоматическойСкидки = 0;
			РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
		ИначеЕсли ИспользоватьАвтоматическиеСкидки Тогда
			// Автоматические скидки стали неактуальны.
			СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
		КонецЕсли;
		
		НоваяСтрока.КлючСвязи = 0;
		НоваяСтрока.СерииНоменклатуры = "";
		НоваяСтрока.КодМаркировки = "";
		
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, НоваяСтрока);
		
		// ГосИС
		Если НоваяСтрока.Свойство("КоличествоАкцизныхМарок") Тогда
			НоваяСтрока.КоличествоАкцизныхМарок = 0;
			АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(НоваяСтрока);
		КонецЕсли;
		// Конец ГосИС
		
		НоваяСтрока.Резерв = 0;
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	НоваяСтрока.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	НоваяСтрока.Характеристика);
		СтруктураДанные.Вставить("Партия", 	НоваяСтрока.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", НоваяСтрока.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", НоваяСтрока.ИспользоватьПартии);
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
		КонецЕсли;
		
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли
	
КонецПроцедуры

// Функция сбрасывает флаг "СкидкиРассчитаны", если это необходимо, и возвращает Истина, если требуется пересчёт скидок.
//
&НаСервере
Функция СброситьФлагСкидкиРассчитаныСервер(Действие, КолонкаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И Объект.Запасы.Количество() > 0 И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ);
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

// Функция сбрасывает флаг "СкидкиРассчитаны", если это необходимо, и возвращает Истина, если требуется пересчёт скидок.
//
&НаКлиенте
Функция СброситьФлагСкидкиРассчитаныКлиент(Действие, КолонкаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И Объект.Запасы.Количество() > 0 И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ);
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

// Функция сбрасывает флаг СкидкиРассчитаны, если это необходимо, и возвращает Истина, если требуется пересчёт скидок.
//
&НаСервере
Функция СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ = "")
	
	Возврат СкидкиНаценкиСервер.СброситьФлагСкидкиРассчитаны(ЭтотОбъект, Действие, КолонкаТЧ);
	
КонецФункции

// Процедура выполняет действия необходимые при создании формы на сервере.
//
&НаСервере
Процедура АвтоматическиеСкидкиПриСозданииНаСервере()
	
	УстановленСерыйЦвет = Ложь;
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Объект.Запасы.Количество() = 0 Тогда
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьСерый;
			УстановленСерыйЦвет = Истина;
		ИначеЕсли НЕ Объект.СкидкиРассчитаны Тогда
			Объект.СкидкиРассчитаны = Ложь;
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьКрасный;
		Иначе
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывает форму отчёта "Применённые скидки" для текущего документа в элементе "Список".
//
&НаКлиенте
Процедура ПримененныеСкидки(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = "Не выбран документ.
		|Переход к ""Примененные скидки"" возможен только после выбора документа в списке.";
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = "Список";
		Сообщение.Сообщить();
		Возврат;
	ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) <> Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ПараметрыФормы = Новый Структура("ДокументСсылка", ТекущиеДанные.Ссылка);
		ОткрытьФорму("Отчет.ПримененныеСкидкиВДокументе.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	Иначе
		ТекстСообщения = "Выберите чек ККМ или чек ККМ на возврат";
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = "Список";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьБонусыНаКлиенте()
	
	Если Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РеквизитыБП = РаботаСБонусами.РеквизитыБонуснойПрограммы(Объект.ДисконтнаяКарта);
	
	Если РеквизитыБП.БонуснаяПрограмма.Пустая() Тогда
		Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РеквизитыБП.НеНачислятьПриОплатеБонусами Тогда
		Если РаботаСБонусами.ЕстьОплатаБонусами(Объект.БезналичнаяОплата) Тогда
			Если Не Объект.БонусныеБаллыКНачислению.Количество() = 0 Тогда
				Объект.БонусныеБаллыКНачислению.Очистить();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("БонуснаяПрограмма", РеквизитыБП.БонуснаяПрограмма);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ДисконтныеКарты

// Процедура - обработчик команды СчитатьДисконтнуюКарту формы.
//
&НаКлиенте
Процедура СчитатьДисконтнуюКарту(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СчитатьДисконтнуюКартуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.СчитываниеДисконтнойКарты", , ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Завершающая часть процедуры - обработчика команды СчитатьДисконтнуюКарту формы.
// Вызывается после закрытия формы считывания дисконтной карты.
//
&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатиеЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт

	Если ТипЗнч(ВозвращаемыеПараметры) = Тип("Структура") Тогда
		СчитанаДисконтнаяКарта = ВозвращаемыеПараметры.СчитанаДисконтнаяКарта;
		ВыбранаДисконтнаяКарта(ВозвращаемыеПараметры.ДисконтнаяКарта);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик выбора дисконтной карты, начало.
//
&НаКлиенте
Процедура ВыбранаДисконтнаяКарта(ДисконтнаяКарта)

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Считана дисконтная карта'"),
		ПолучитьНавигационнуюСсылку(ДисконтнаяКарта),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Считана дисконтная карта %1'"), ДисконтнаяКарта),
		БиблиотекаКартинок.Информация32);
	
	ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта);
	
КонецПроцедуры

// Процедура - обработчик выбора дисконтной карты, окончание.
//
&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта)
	
	Если Не Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Объект.ДисконтнаяКарта = ДисконтнаяКарта;
	Объект.ПроцентСкидкиПоДисконтнойКарте = ДисконтныеКартыУНФВызовСервера.ВычислитьПроцентСкидкиПоДисконтнойКарте(Объект.Дата, ДисконтнаяКарта);
	
	ВладелецДисконтнойКарты = УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "ВладелецКарты");
	Если Не ВладелецДисконтнойКарты.Пустая() Тогда
		Объект.Контрагент = ВладелецДисконтнойКарты;
		КонтрагентПриИзменении(Элементы.Контрагент);
	КонецЕсли;
	
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(ПолучитьСтруктуруНадписиЦеныИВалютаНаКлиенте());
	
	ОбновитьКартинкуДисконтнойКарты();
	
	Если ДисконтныеКартыУНФВызовСервера.СтарыйМеханизмСкидок(ДисконтнаяКарта) Тогда
	
		Если Объект.Запасы.Количество() > 0 Тогда
			Текст = НСтр("ru = 'Перезаполнить скидки во всех строках?'");
			Оповещение = Новый ОписаниеОповещения("ВыбранаДисконтнаяКартаДополнительноЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		КонецЕсли;
		
	Иначе
		
		РассчитатьСкидкиНаценки(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик выбора дисконтной карты, завершение.
//
&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительноЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Скидка = ДисконтныеКартыУНФВызовСервера.ПолучитьПроцентСкидкиПоВидуСкидокНаценок(Объект.ВидСкидкиНаценки) + Объект.ПроцентСкидкиПоДисконтнойКарте;
	
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Скидка;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
			        
		КонецЦикла;
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("ПересчетСкидокПоДисконтнойКарте");

КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Процедура осуществляет вывод информации на дисплей покупателя.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя()
	
	ДПТекст = ?(
		Элементы.Запасы.ТекущиеДанные = Неопределено,
		"",
		СокрЛП(Элементы.Запасы.ТекущиеДанные.Номенклатура)
	  + Символы.ПС
	  + НСтр("ru='Итого: '")
	  + Формат(Объект.СуммаДокумента, "ЧДЦ=2; ЧРГ=' '; ЧН=0")
	);
	
	ИдентификаторУстройства = Неопределено; // Если ИдентификаторУстройства = Неопределено, будут очищены все подключенные дисплеи покупателя.
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыводТекстаНаДисплейПокупателяЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыводИнформацииНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, ДПТекст);
	
КонецПроцедуры // ВывестиИнформациюНаДисплейПокупателя()

&НаКлиенте
Процедура ВыводТекстаНаДисплейПокупателяЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр(
				"ru = 'При использовании дисплея покупателя произошла ошибка.
				|Дополнительное описание:
				|%ДополнительноеОписание%'"
			);
			ТекстСообщения = СтрЗаменить(
				ТекстСообщения,
				"%ДополнительноеОписание%",
				РезультатВыполнения.ОписаниеОшибки
			);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов, т. к. они не были преобразованы библиотекой
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;

	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов, СтруктураДанные.СтруктурнаяЕдиница);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				
				СтруктураДанныеНоменклатуры.Вставить("ИспользоватьХарактеристики", ?(НЕ ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура), Ложь, ДанныеШтрихкода.Номенклатура.ИспользоватьХарактеристики));
				СтруктураДанныеНоменклатуры.Вставить("ПроверятьЗаполнениеХарактеристики", ?(НЕ ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура), Ложь, ДанныеШтрихкода.Номенклатура.ПроверятьЗаполнениеХарактеристики));
				
				СтруктураДанныеНоменклатуры.Вставить("ИспользоватьПартии", ?(НЕ ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура), Ложь, ДанныеШтрихкода.Номенклатура.ПроверятьЗаполнениеПартий));
				СтруктураДанныеНоменклатуры.Вставить("ПроверятьЗаполнениеПартий", ?(НЕ ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура), Ложь, ДанныеШтрихкода.Номенклатура.ПроверятьЗаполнениеПартий));
				
				СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				Если ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦен", СтруктураДанные.ВидЦен);
					Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
						И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
					Иначе
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
					КонецЕсли;
					СтруктураДанныеНоменклатуры.Вставить("Содержание", "");
					СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки);
				КонецЕсли;
				// ДисконтныеКарты
				СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
				СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", СтруктураДанные.ДисконтнаяКарта);
				// Конец ДисконтныеКарты 
				
				// МинимальныеЦены
				Если СтруктураДанные.Свойство("СтруктурнаяЕдиница") Тогда 					
					СтруктураДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", СтруктураДанные.СтруктурнаяЕдиница);					
				КонецЕсли;				
				// Конец МинимальныеЦены

				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ЧекККМ.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	ДобавленныеСтроки = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	// Удалим пустые значения.
	ИндексЭлемента = МассивШтрихкодов.Количество() - 1;
	Пока ИндексЭлемента >= 0 Цикл
		Если НЕ ЗначениеЗаполнено(МассивШтрихкодов[ИндексЭлемента].Штрихкод) Тогда
			МассивШтрихкодов.Удалить(ИндексЭлемента);
		КонецЕсли;
			
		ИндексЭлемента = ИндексЭлемента - 1;
	КонецЦикла;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	// Конец ДисконтныеКарты
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	СтруктураДанные.Вставить("Ячейка", Объект.Ячейка);
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, Неопределено, СтруктураДанные);
	
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение"
			, ЭтотОбъект, Новый Структура("СтруктураДанные, ДобавленныеСтроки", СтруктураДанные, ДобавленныеСтроки));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры"
			, ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры));			
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			// РежимУдаленияСтрокПоШК
			Если ТекШтрихкод.Свойство("РежимУдаления") И ТекШтрихкод.РежимУдаления Тогда
				Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("НоменклатураНабора, ХарактеристикаНабора", ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.Характеристика));
				Иначе
					МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения));
				КонецЕсли;
				Если МассивСтрокТЧ.Количество() = 0 Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'Товар по штрихкоду %1 не найден в документе'"), ТекШтрихкод.Штрихкод));
				ИначеЕсли ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					ЗапасыПередУдалениемЗавершение(
						"УдалитьОдин",
						Новый Структура("НоменклатураНабора, ХарактеристикаНабора", ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.Характеристика));
				Иначе
					НайденнаяСтрока = МассивСтрокТЧ[0];
					Элементы.Запасы.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
					Отказ = Ложь;
					ЗапасыПередУдалениемОбработчикСобытия("Запасы", Отказ);
					Если Не Отказ Тогда
						НайденнаяСтрока.Количество = Макс(0, НайденнаяСтрока.Количество - ТекШтрихкод.Количество);
						РассчитатьСуммуВСтрокеТабличнойЧасти(НайденнаяСтрока);
						Если НайденнаяСтрока.Количество = 0 Тогда
							Объект.Запасы.Удалить(НайденнаяСтрока);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			// Конец РежимУдаленияСтрокПоШК
			Если ИспользуетсяМаркировкаТабачнойПродукции
				И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки
				И ТекШтрихкод.Свойство("ДанныеМаркировки")
				И ТекШтрихкод.ДанныеМаркировки.Разобран 
				И ЗначениеЗаполнено(ТекШтрихкод.ДанныеМаркировки.КодМаркировки) Тогда
				МассивСтрокТЧСМаркировкой = Объект.Запасы.НайтиСтроки(Новый Структура("КодМаркировки", ТекШтрихкод.ДанныеМаркировки.КодМаркировки));
				Если МассивСтрокТЧСМаркировкой.Количество() > 0 Тогда
					СтрокаСообщения = НСтр("ru = 'Код маркировки уже присутствует в чеке'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения,НоменклатураНабора",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения,ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")));
			Если МассивСтрокТЧ.Количество() = 0
				ИЛИ (ИспользуетсяРегистрацияРозничныхПродажВЕГАИС И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки)
				ИЛИ (ИспользуетсяМаркировкаТабачнойПродукции И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки) Тогда
				
				НоваяСтрока = ИнициализироватьСтрокуЗапасовПоДаннымШтрихкода(ДанныеШтрихкода, ТекШтрихкод);
				
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				НоваяСтрока.Штрихкод = ТекШтрихкод.Штрихкод;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
			КонецЕсли;
			
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки 
				ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
				ДобавленныеСтроки.Добавить(НоваяСтрока);
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
			
			//Агентские платежи
			Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
				НоваяСтрока.ЦенаСАгентскимВознаграждением = 0;
				НоваяСтрока.ДоговорПлатежногоАгента = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ДоговорКонтрагента;
				НоваяСтрока.ДанныеАгентскогоДоговора = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ДанныеАгентскогоДоговора;
				АгентскиеПлатежиУНФКлиентСервер.ВыделитьАгентскоеВознаграждениеВТаблице(Объект, НоваяСтрока);
				Если НоваяСтрока.Цена <> 0 Тогда
					АгентскиеПлатежиУНФКлиентСервер.ЗаполнитьРасчетныеПоляАгентскогоВознаграждения(Объект,, ЭтаФорма);
					СтрокаУслуги = АгентскиеПлатежиУНФКлиентСервер.СтрокаУслугаАгента(Объект.Запасы, НоваяСтрока);
					Если СтрокаУслуги <> Неопределено Тогда
						РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаУслуги);
					КонецЕсли;
					ПересчитатьДокументНаКлиенте();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа, ДобавленныеСтроки",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа, ДобавленныеСтроки);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодовМаркировкаШинИПокрышек(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	ДобавленныеСтроки = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	// Удалим пустые значения.
	ИндексЭлемента = МассивШтрихкодов.Количество() - 1;
	Пока ИндексЭлемента >= 0 Цикл
		Если НЕ ЗначениеЗаполнено(МассивШтрихкодов[ИндексЭлемента].Штрихкод) Тогда
			МассивШтрихкодов.Удалить(ИндексЭлемента);
		КонецЕсли;
			
		ИндексЭлемента = ИндексЭлемента - 1;
	КонецЦикла;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	// Конец ДисконтныеКарты
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	СтруктураДанные.Вставить("БезМаркировок", Ложь);
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, Неопределено, СтруктураДанные);

	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовМаркировкаШинИПокрышекЗавершение"
			, ЭтотОбъект, Новый Структура("СтруктураДанные, ДобавленныеСтроки", СтруктураДанные, ДобавленныеСтроки));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры"
			, ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры));
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки
				И ТекШтрихкод.Свойство("ДанныеМаркировки")
				И ТекШтрихкод.ДанныеМаркировки.Разобран 
				И ЗначениеЗаполнено(ТекШтрихкод.ДанныеМаркировки.КодМаркировки) Тогда
				МассивСтрокТЧСМаркировкой = Объект.Запасы.НайтиСтроки(Новый Структура("КодМаркировки", ТекШтрихкод.ДанныеМаркировки.КодМаркировки));
				Если МассивСтрокТЧСМаркировкой.Количество() > 0 Тогда
					СтрокаСообщения = НСтр("ru = 'Код маркировки уже присутствует в чеке'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЗаполненаМарка = Ложь;
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения,НоменклатураНабора",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения,ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")));
			Если МассивСтрокТЧ.Количество() > 0
				И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки
				И ТекШтрихкод.Свойство("ДанныеМаркировки")
				И ЗначениеЗаполнено(ТекШтрихкод.ДанныеМаркировки.КодМаркировки) Тогда
				Для каждого ТекСтрокаМассива Из МассивСтрокТЧ Цикл
					Если НЕ ЗначениеЗаполнено(ТекСтрокаМассива.КодМаркировки) Тогда
						ТекСтрокаМассива.КодМаркировки = ТекШтрихкод.ДанныеМаркировки.КодМаркировки;
						Если ТекСтрокаМассива.Свойство("СтатусПроверкиГосИС") Тогда
							ТекСтрокаМассива.СтатусПроверкиГосИС = 1;
						КонецЕсли;
						ТекСтрокаМассива.ИндексАкцизнойМарки = 1;
						ЗаполненаМарка = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НЕ ЗаполненаМарка 
				И (МассивСтрокТЧ.Количество() = 0
				ИЛИ ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки) Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.ИспользоватьХарактеристики = ЗначениеЗаполнено(НоваяСтрока.Характеристика);
				НоваяСтрока.ИспользоватьПартии = ЗначениеЗаполнено(НоваяСтрока.Партия);
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.НеобходимостьВводаАкцизнойМарки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки;
				НоваяСтрока.НеобходимостьВводаКодаМаркировки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки;
				Если НоваяСтрока.НеобходимостьВводаКодаМаркировки
					И ТекШтрихкод.Свойство("ДанныеМаркировки")
					И ТекШтрихкод.ДанныеМаркировки.Разобран Тогда
					НоваяСтрока.КодМаркировки = ТекШтрихкод.ДанныеМаркировки.КодМаркировки;
					Если НоваяСтрока.Свойство("СтатусПроверкиГосИС") Тогда
						НоваяСтрока.СтатусПроверкиГосИС = ?(ЗначениеЗаполнено(НоваяСтрока.КодМаркировки), 1, 2);
					КонецЕсли;
					НоваяСтрока.ИндексАкцизнойМарки = ?(ЗначениеЗаполнено(НоваяСтрока.КодМаркировки), 1, 2);
				КонецЕсли;
				Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					// Наборы
					ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
					// Конец Наборы
					// АвтоматическиеСкидки.
					СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
					// Конец АвтоматическиеСкидки
				Иначе
					РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки
						ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
						ДобавленныеСтроки.Добавить(НоваяСтрока);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли НЕ ЗаполненаМарка Тогда
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки 
					ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
					ДобавленныеСтроки.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ПересчитатьДокументНаКлиенте();
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа, ДобавленныеСтроки",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа, ДобавленныеСтроки);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	ДобавленныеСтроки = Параметры.ДобавленныеСтроки;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
		ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));			
	Иначе
		// РежимУдаленияСтрокПоШК
		Если ТекШтрихкод.Свойство("РежимУдаления") И ТекШтрихкод.РежимУдаления Тогда
			Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
				МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("НоменклатураНабора, ХарактеристикаНабора", ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.Характеристика));
			Иначе
				МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения));
			КонецЕсли;
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Товар по штрихкоду %1 не найден в документе'"), ТекШтрихкод.Штрихкод));
			ИначеЕсли ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
				ЗапасыПередУдалениемЗавершение(
					"УдалитьОдин",
					Новый Структура("НоменклатураНабора, ХарактеристикаНабора", ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.Характеристика));
			Иначе
				НайденнаяСтрока = МассивСтрокТЧ[0];
				Элементы.Запасы.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				Отказ = Ложь;
				ЗапасыПередУдалениемОбработчикСобытия("Запасы", Отказ);
				Если Не Отказ Тогда
					НайденнаяСтрока.Количество = Макс(0, НайденнаяСтрока.Количество - ТекШтрихкод.Количество);
					РассчитатьСуммуВСтрокеТабличнойЧасти(НайденнаяСтрока);
					Если НайденнаяСтрока.Количество = 0 Тогда
						Объект.Запасы.Удалить(НайденнаяСтрока);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		// Конец РежимУдаленияСтрокПоШК
		ИначеЕсли ИспользуетсяМаркировкаТабачнойПродукции
			И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки
			И ТекШтрихкод.Свойство("ДанныеМаркировки")
			И ТекШтрихкод.ДанныеМаркировки.Разобран 
			И ЗначениеЗаполнено(ТекШтрихкод.ДанныеМаркировки.КодМаркировки) Тогда
			МассивСтрокТЧСМаркировкой = Объект.Запасы.НайтиСтроки(Новый Структура("КодМаркировки", ТекШтрихкод.ДанныеМаркировки.КодМаркировки));
			Если МассивСтрокТЧСМаркировкой.Количество() > 0 Тогда
				СтрокаСообщения = НСтр("ru = 'Код маркировки уже присутствует в чеке'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения,НоменклатураНабора",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения,ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")));
		Если МассивСтрокТЧ.Количество() = 0
			ИЛИ (ИспользуетсяРегистрацияРозничныхПродажВЕГАИС И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки)
			ИЛИ (ИспользуетсяМаркировкаТабачнойПродукции И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки) Тогда
			
			НоваяСтрока = ИнициализироватьСтрокуЗапасовПоДаннымШтрихкода(ДанныеШтрихкода, ТекШтрихкод);
			
		Иначе
			НоваяСтрока = МассивСтрокТЧ[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
			НоваяСтрока.Штрихкод = ТекШтрихкод.Штрихкод;
			РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
		КонецЕсли;
		
		Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки 
			ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
			ДобавленныеСтроки.Добавить(НоваяСтрока);
		КонецЕсли;
		
		Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
			СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	ПересчитатьДокументНаКлиенте();
	
	ВыполнитьДействияПоЗавершениюДобавленияШКСервер();
	
	Если ДобавленныеСтроки.Количество() > 0 Тогда
		ОткрытьВводАкцизнойМарки(ДобавленныеСтроки[0]);
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ИнициализироватьСтрокуЗапасовПоДаннымШтрихкода(ДанныеШтрихкода, ТекШтрихкод)
	
	НоваяСтрока = Объект.Запасы.Добавить();
	НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
	НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
	НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
	НоваяСтрока.Количество = ТекШтрихкод.Количество;
	НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
	НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
	Если КэшЗначений.ИспользоватьМинимальныеЦены
		И НоваяСтрока.Свойство("МинимальнаяЦена")
		И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("МинимальнаяЦена") Тогда
		
		НоваяСтрока.МинимальнаяЦена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.МинимальнаяЦена;
		
	КонецЕсли;
	НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
	НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
	НоваяСтрока.НеобходимостьВводаАкцизнойМарки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки;
	НоваяСтрока.НеобходимостьВводаКодаМаркировки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки;
	Если НоваяСтрока.НеобходимостьВводаКодаМаркировки
		И ТекШтрихкод.Свойство("ДанныеМаркировки")
		И ТекШтрихкод.ДанныеМаркировки.Разобран Тогда
		НоваяСтрока.КодМаркировки = ТекШтрихкод.ДанныеМаркировки.КодМаркировки;
	КонецЕсли;
	НоваяСтрока.Штрихкод = ТекШтрихкод.Штрихкод;
	НоваяСтрока.ИспользоватьХарактеристики = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ИспользоватьХарактеристики;
	НоваяСтрока.ПроверятьЗаполнениеХарактеристики = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроверятьЗаполнениеХарактеристики;
	НоваяСтрока.ИспользоватьПартии = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ИспользоватьПартии;
	НоваяСтрока.ПроверятьЗаполнениеПартий = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроверятьЗаполнениеПартий;
	НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
	НоваяСтрока.ТипНоменклатурыЗапас = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас;
	Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("Склад") Тогда
		Если СписокДоступныхСкладов.НайтиПоЗначению(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Склад) = Неопределено Тогда
			ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Склад = Объект.СтруктурнаяЕдиница;
			ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Вставить("СписокДоступныхСкладов", СписокДоступныхСкладов);
	НоваяСтрока.СтруктурнаяЕдиница = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Склад;
	НоваяСтрока.Ячейка = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Ячейка;
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
		// Конец Наборы
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
	Иначе
		РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовМаркировкаШинИПокрышекЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	ДобавленныеСтроки = Параметры.ДобавленныеСтроки;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
		ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));
	Иначе
		Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки
			И ТекШтрихкод.Свойство("ДанныеМаркировки")
			И ТекШтрихкод.ДанныеМаркировки.Разобран 
			И ЗначениеЗаполнено(ТекШтрихкод.ДанныеМаркировки.КодМаркировки) Тогда
			МассивСтрокТЧСМаркировкой = Объект.Запасы.НайтиСтроки(Новый Структура("КодМаркировки", ТекШтрихкод.ДанныеМаркировки.КодМаркировки));
			Если МассивСтрокТЧСМаркировкой.Количество() > 0 Тогда
				СтрокаСообщения = НСтр("ru = 'Код маркировки уже присутствует в чеке'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗаполненаМарка = Ложь;
		МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения,НоменклатураНабора",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения,ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")));
		Если МассивСтрокТЧ.Количество() > 0
			И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки
			И ТекШтрихкод.Свойство("ДанныеМаркировки")
			И ЗначениеЗаполнено(ТекШтрихкод.ДанныеМаркировки.КодМаркировки) Тогда
			Для каждого ТекСтрокаМассива Из МассивСтрокТЧ Цикл
				Если НЕ ЗначениеЗаполнено(ТекСтрокаМассива.КодМаркировки) Тогда
					ТекСтрокаМассива.КодМаркировки = ТекШтрихкод.ДанныеМаркировки.КодМаркировки;
					Если ТекСтрокаМассива.Свойство("СтатусПроверкиГосИС") Тогда
						ТекСтрокаМассива.СтатусПроверкиГосИС = 1;
					КонецЕсли;
					ТекСтрокаМассива.ИндексАкцизнойМарки = 1;
					ЗаполненаМарка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если НЕ ЗаполненаМарка 
			И (МассивСтрокТЧ.Количество() = 0
			ИЛИ ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки) Тогда
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
			НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
			НоваяСтрока.ИспользоватьХарактеристики = ЗначениеЗаполнено(НоваяСтрока.Характеристика);
			НоваяСтрока.ИспользоватьПартии = ЗначениеЗаполнено(НоваяСтрока.Партия);
			НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
			НоваяСтрока.Количество = ТекШтрихкод.Количество;
			НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
			НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
			НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
			НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
			НоваяСтрока.НеобходимостьВводаАкцизнойМарки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки;
			НоваяСтрока.НеобходимостьВводаКодаМаркировки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки;
			Если НоваяСтрока.НеобходимостьВводаКодаМаркировки
				И ТекШтрихкод.Свойство("ДанныеМаркировки")
				И ТекШтрихкод.ДанныеМаркировки.Разобран Тогда
				НоваяСтрока.КодМаркировки = ТекШтрихкод.ДанныеМаркировки.КодМаркировки;
				Если НоваяСтрока.Свойство("СтатусПроверкиГосИС") Тогда
					НоваяСтрока.СтатусПроверкиГосИС = ?(ЗначениеЗаполнено(НоваяСтрока.КодМаркировки), 1, 2);
				КонецЕсли;
				НоваяСтрока.ИндексАкцизнойМарки = ?(ЗначениеЗаполнено(НоваяСтрока.КодМаркировки), 1, 2);
			КонецЕсли;
			Если ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
				// Наборы
				ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
				// Конец Наборы
				// АвтоматическиеСкидки.
				СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
				// Конец АвтоматическиеСкидки
			Иначе
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки
					ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
					ДобавленныеСтроки.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ ЗаполненаМарка Тогда
			НоваяСтрока = МассивСтрокТЧ[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
			РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки 
				ИЛИ (НоваяСтрока.НеобходимостьВводаКодаМаркировки И НЕ ЗначениеЗаполнено(НоваяСтрока.КодМаркировки)) Тогда
				ДобавленныеСтроки.Добавить(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
			СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	ПересчитатьДокументНаКлиенте();
	
	ВыполнитьДействияПоЗавершениюДобавленияШКСервер();
	
	Если ДобавленныеСтроки.Количество() > 0 Тогда
		ОткрытьВводАкцизнойМаркиШиныИПокрышки(ДобавленныеСтроки[0]);
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПоЗавершениюДобавленияШКСервер()
	
	ОбновитьДанныеОстатковИПризнакиХарактеристикИПартий();
	
КонецПроцедуры

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Если ДанныеШтрихкодов[0].Свойство("РежимУдаления")
		И ДанныеШтрихкодов[0].РежимУдаления Тогда
		
		ПолученыШтрихкодыБезГОСИС(ДанныеШтрихкодов);
		
	ИначеЕсли ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Или ИнтеграцияИСМПВызовСервера.ВестиУчетМаркируемойПродукции() Тогда

		Для Каждого Элемент Из ДанныеШтрихкодов Цикл
			ОбработатьКодМаркировки(Элемент);	
		КонецЦикла;
		
	Иначе
		
		ПолученыШтрихкодыБезГОСИС(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		НастроитьЗакладкиПродажиМК();
	КонецЕсли;
	
КонецПроцедуры // ПолученыШтрихкоды()

#Область Штрихкодирование

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект, Новый Структура("ЭтоВызовОповещенияОбработкиКодаМаркировки", Истина));
	
КонецФункции

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИсходныеДанные.Свойство("Количество") Тогда
		ПересчитатьДокументНаКлиенте(Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	ШтрихкодКоличество = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ИсходныеДанные, Ложь);
	// ++( ГосИС 1.1.1.12
	//ШтрихкодКоличество.Штрихкод = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ИсходныеДанные.Штрихкод);
	ШтрихкодированиеИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ШтрихкодКоличество);
	//)++
	
	РезультатОбработки = ОбработатьВводШтрихкода(ШтрихкодКоличество, Неопределено, ПараметрыСканирования);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
		И ДополнительныеПараметры.Свойство("ЭтоВызовОповещенияОбработкиКодаМаркировки")
		И ДополнительныеПараметры.ЭтоВызовОповещенияОбработкиКодаМаркировки Тогда
		
		ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода.ТребуетсяСопоставлениеНоменклатуры = Ложь;
		
	КонецЕсли;
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
	ПересчитатьДокументНаКлиенте(Ложь);
	
	Если ТребуетсяОбработкаШтрихкода Тогда
		
		// приводим к ожидаемому типу
		Если ТипЗнч(ИсходныеДанные) = Тип("Структура") Тогда
			МассивШтрихкодов = Новый Массив();
			МассивШтрихкодов.Добавить(ИсходныеДанные);
		ИначеЕсли  ТипЗнч(ИсходныеДанные) = Тип("Массив") Тогда
			МассивШтрихкодов = ИсходныеДанные;
		КонецЕсли;
		
		ПолученыШтрихкодыБезГОСИС(МассивШтрихкодов);
		ТребуетсяОбработкаШтрихкода = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода  = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                        = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования        = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода              = ИсходныеДанные;
	ПараметрыЗавершенияВводаШтрихкода.ЗавершениеОбработки		   = "ОбработатьКодМаркировки";
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаСервере
Функция ОбработатьВводШтрихкода(ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Функция ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецФункции

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Процедура ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования)
	
	ТребуетсяОбработкаШтрихкода = РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода;
	
	Если ТипЗнч(РезультатОбработкиШтрихкода.ДобавленныеСтроки) = Тип("Массив") Тогда
		
		Для Каждого ДобавленнаяСтрока Из РезультатОбработкиШтрихкода.ДобавленныеСтроки Цикл
			
			ДобавленнаяСтрока.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
			СерииНоменклатурыУНФКлиентСервер.ОбновитьСтроковоеПредставлениеСерийНоменклатурыСтроки(ДобавленнаяСтрока, Объект, "КлючСвязи", "СерииНоменклатуры");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(РезультатОбработкиШтрихкода.ИзмененныеСтроки) = Тип("Массив") Тогда
		
		Для Каждого ИзмененнаяСтрока Из РезультатОбработкиШтрихкода.ИзмененныеСтроки Цикл
			
			СерииНоменклатурыУНФКлиентСервер.ОбновитьСтроковоеПредставлениеСерийНоменклатурыСтроки(ИзмененнаяСтрока, Объект, "КлючСвязи", "СерииНоменклатуры");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

#КонецОбласти

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкодыБезГОСИС(ДанныеШтрихкодов)
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	ДобавленныеСтроки	= НеДобавленныеШтрихкоды.ДобавленныеСтроки;
	Если ДобавленныеСтроки.Количество() > 0 Тогда
		ОткрытьВводАкцизнойМарки(ДобавленныеСтроки[0]);
		Возврат;
	КонецЕсли;
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
		// Для тех, у кого есть профиль "Рабочее место кассира" мы не разрешаем регистрацию штрихкодов
		Если ПараметрыРаботыКлиента.Свойство("ЕстьПрофильРМК") И ПараметрыРаботыКлиента.ЕстьПрофильРМК Тогда
			
			ОповеститьОНенайденныхШтрихкодах(НеизвестныеШтрихкоды, Истина);
			Возврат;
			
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтаФорма, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтаФорма,,,,Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкодыБезГОСИС()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОНенайденныхШтрихкодах(НеизвестныеШтрихкоды, ПоказыватьСообщением = Истина)
	
	СтрокаПредупреждения = "";
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		
		СтрокаПредупреждения = СтрокаПредупреждения + СтрокаСообщения + Символы.ПС;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаПредупреждения) Тогда
		Если ПоказыватьСообщением Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаПредупреждения);
		Иначе
			ПоказатьПредупреждение(,СтрокаПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	ОповеститьОНенайденныхШтрихкодах(НеизвестныеШтрихкоды);
	ПересчитатьДокументНаКлиенте();
	
	ОбновитьДанныеОстатковИПризнакиХарактеристикИПартий();
	
	Если ЭтоМобильныйКлиент Тогда
		НастроитьЗакладкиПродажиМК();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));
	
	#Если МобильныйКлиент Тогда
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
	ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаВводаШтрихкода", Новый Структура("ТекШтрихкод", ТекШтрихкод), , , , ,
			ОбработкаЗавершения);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РежимУдаления = Ложь;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("Штрихкод") Тогда
			ТекШтрихкод = Результат.Штрихкод;
		Иначе
			ТекШтрихкод = "";
		КонецЕсли;
		Если Результат.Свойство("РежимУдаления") Тогда
			РежимУдаления = Результат.РежимУдаления;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Результат) = Тип("КодВозвратаДиалога") Тогда
		ТекШтрихкод = "";
	ИначеЕсли Результат <> Неопределено Тогда
		ТекШтрихкод = Результат;
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ТекШтрихкод") Тогда
		ТекШтрихкод = ДополнительныеПараметры.ТекШтрихкод;
	Иначе
		ТекШтрихкод = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ТекШтрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	Данные = Новый Массив();
	Данные.Добавить(Новый Структура("Штрихкод, Количество, РежимУдаления", ТекШтрихкод, 1, РежимУдаления));
	
	ПолученыШтрихкоды(Данные);
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияГосИС
&НаСервере
Функция Подключаемый_ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеШтрихкода"            , ДанныеШтрихкода);
	ДополнительныеПараметры.Вставить("КэшированныеЗначения"       , КэшированныеЗначения);
	ДополнительныеПараметры.Вставить("РезультатОбработкиШтрихкода", Неопределено);
	ДополнительныеПараметры.Вставить("ПараметрыСканирования",       ПараметрыСканирования);

	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Подключаемый_ОбработатьВводШтрихкода", ДополнительныеПараметры);

	РезультатОбработкиШтрихкода = ДополнительныеПараметры.РезультатОбработкиШтрихкода;
	КэшированныеЗначения = ДополнительныеПараметры.КэшированныеЗначения;

	ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Функция Подключаемый_ВыполнитьДействие(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт
	
	ПараметрыОбработкиВыбора	= ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода	= ВыполнитьДействиеНаСервере(Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодов(
		РезультатОбработкиШтрихкода,
		КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Функция ВыполнитьДействиеНаСервере(Действие, ПараметрыОбработкиВыбора)
	
	Возврат ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеОбработкиШтрихкодов()
	
	Если ЗначениеЗаполнено(ШтрихкодДляОбработки) Тогда
		
		Штрихкод = ШтрихкодДляОбработки;
		ШтрихкодДляОбработки = Неопределено;
		
		ПараметрыМаркировки = ИнтеграцияМОТПУНФКлиент.ИнициализироватьПараметрыОткрытияФормыВводаКодаМаркировки();
		ЗаполнитьПараметрыМаркировкиНоменклатуры(Штрихкод, ПараметрыМаркировки);
		Если ПараметрыМаркировки.МаркируемаяПродукция Тогда
			ИнтеграцияМОТПУНФКлиент.ОткрытьФормуСчитыванияКодаМаркировки(ЭтотОбъект, ПараметрыМаркировки);
			Возврат;
		КонецЕсли;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(Штрихкод);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
		
		Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
			
			Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
			
			ОткрытьФорму(
				"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
				Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение);
			
			Возврат;
			
		КонецЕсли;
		
		ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
		
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыМаркировкиНоменклатуры(ДанныеШтрихкода, ПараметрыМаркировки)
	
	Номенклатура = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ДанныеШтрихкода);
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		ПараметрыМаркировки.Вставить("МаркируемаяПродукция", Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыМаркировки.Вставить("Номенклатура", Номенклатура);
	
	// ++( ГосИС 1.1.1
	//Если Номенклатура.ТабачнаяПродукция Тогда
	//	ПараметрыМаркировки.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.Табачная);
	//	ПараметрыМаркировки.Вставить("МаркируемаяПродукция", Истина);
	//ИначеЕсли Номенклатура.ОбувнаяПродукция Тогда
	//	ПараметрыМаркировки.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.Обувная);
	//	ПараметрыМаркировки.Вставить("МаркируемаяПродукция", Истина);
	Если Не Номенклатура.ВидПродукцииИС.Пустая() Тогда
		ПараметрыМаркировки.Вставить("ВидПродукции", Номенклатура.ВидПродукцииИС);
		ПараметрыМаркировки.Вставить("МаркируемаяПродукция", Истина);
	//)++
	ИначеЕсли Номенклатура.ВидАлкогольнойПродукции.Маркируемый Тогда
		ПараметрыМаркировки.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.Алкогольная);
		ПараметрыМаркировки.Вставить("МаркируемаяПродукция", Истина);
	Иначе
		ПараметрыМаркировки.Вставить("МаркируемаяПродукция", Ложь);
	КонецЕсли;
	
	ПараметрыМаркировки.Вставить("ПараметрыСканирования", ШтрихкодированиеИС.ПараметрыСканирования(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	Если СтрНайти(Команда.Имя, "АкцизныеМарки") <> 0 Тогда
		СвернутьРазвернутьБоковуюПанельКомандНажатие(Неопределено);
	КонецЕсли;
	
	СобытияФормИСКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт
	
	Модифицированность = Истина;
	Если РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		
		ШтрихкодДляОбработки = РезультатОбработкиШтрихкода.ИсходныеДанные;
		
		Если ШтрихкодДляОбработки.Свойство("Номенклатура") Тогда
		
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура", ШтрихкодДляОбработки.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", ШтрихкодДляОбработки.Характеристика);
			ПараметрыПоиска.Вставить("Партия", ?(ШтрихкодДляОбработки.Серия = Неопределено,
												 Справочники.ПартииНоменклатуры.ПустаяСсылка(),
												 ШтрихкодДляОбработки.Серия));
			ПараметрыПоиска.Вставить("МаркируемаяПродукция", Ложь);
			
			НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				НайденнаяСтрока = НайденныеСтроки[0];
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ШтрихкодДляОбработки.Количество;
				
			Иначе
				
				НоваяСтрока = Объект.Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ШтрихкодДляОбработки);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыПоиска);
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШтрихкодДляОбработки, "ВидПродукции") Тогда
					НоваяСтрока.ВидПродукцииИС = ШтрихкодДляОбработки.ВидПродукции;
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШтрихкодДляОбработки, "ВидыПродукции") Тогда
					Если ШтрихкодДляОбработки.ВидыПродукции.Количество() > 0 Тогда
						НоваяСтрока.ВидПродукцииИС = ШтрихкодДляОбработки.ВидыПродукции[0];
					КонецЕсли;
				КонецЕсли;
				
				ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(ЭтотОбъект, "Объект", "АкцизныеМарки", "АкцизнаяМарка");
				ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект, ИнтеграцияИСУНФ.НастройкиИсточникаКешаЧека());
				ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
				
				НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(Объект, "Запасы", НоваяСтрока);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого СтрокаТЧ Из РезультатОбработкиШтрихкода.ДобавленныеСтроки Цикл
			ИнтеграцияИСМПУНФ.ЗаполнитьСлужебныеРеквизитыИСМПВСтрокеТЧ(СтрокаТЧ);
			СтрокаТЧ.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
		КонецЦикла;
		
		СуммаТоваров = Объект.Запасы.Итог("Всего");
		Если Не Объект.ОперацияСДенежнымиСредствами Тогда
			Объект.СуммаДокумента = СуммаТоваров;
		КонецЕсли;
	
		СуммаСдачи = Объект.БезналичнаяОплата.Итог("Сумма")
				   + Объект.Предоплата.Итог("СуммаРасчетов")
				   + Объект.ПолученоНаличными
				   - Объект.СуммаДокумента;
		
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры
// Конец ИнтеграцияГосИС

#КонецОбласти

#Область УстановкаПериодовДинамическихСписков

// Процедура заполняет списки выбора в элементах, которые управляют периодом в списках документов.
//
&НаСервере
Процедура ЗаполнитьСпискиВидыПериодов()
	
	Элементы.ВидПериодаЖурнала.СписокВыбора.Очистить();
	Элементы.ВидПериодаЖурнала.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаТекущуюСмену);
	Элементы.ВидПериодаЖурнала.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаПрошлуюСмену);
	Элементы.ВидПериодаЖурнала.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаПроизвольныйПериод);
	
	Элементы.ВидПериодаЧековККМ.СписокВыбора.Очистить();
	Элементы.ВидПериодаЧековККМ.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаТекущуюСмену);
	Элементы.ВидПериодаЧековККМ.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаПрошлуюСмену);
	Элементы.ВидПериодаЧековККМ.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаПроизвольныйПериод);
	
	Элементы.ВидПериодаЧековККМНаВозврат.СписокВыбора.Очистить();
	Элементы.ВидПериодаЧековККМНаВозврат.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаТекущуюСмену);
	Элементы.ВидПериодаЧековККМНаВозврат.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаПрошлуюСмену);
	Элементы.ВидПериодаЧековККМНаВозврат.СписокВыбора.Добавить(Перечисления.ВидыПериодовРМК.ЗаПроизвольныйПериод);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора элемента ВидПериодаЖурнала формы.
//
&НаКлиенте
Процедура ВидПериодаЖурналаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УстановитьПериодНаКлиенте(ВыбранноеЗначение, "Список");
	СтандартнаяОбработка = Ложь;
	Элементы.ВидПериодаЖурнала.ОбновитьТекстРедактирования();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора элемента ВидПериодаЧековККМ формы.
//
&НаКлиенте
Процедура ВидПериодаЧековККМОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УстановитьПериодНаКлиенте(ВыбранноеЗначение, "СписокЧековККМ");
	СтандартнаяОбработка = Ложь;
	Элементы.ВидПериодаЧековККМ.ОбновитьТекстРедактирования();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора элемента ВидПериодаЧековККМНаВозврат формы.
//
&НаКлиенте
Процедура ВидПериодаЧековККМНаВозвратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УстановитьПериодНаКлиенте(ВыбранноеЗначение, "СписокЧековККМНаВозврат");
	СтандартнаяОбработка = Ложь;
	Элементы.ВидПериодаЧековККМНаВозврат.ОбновитьТекстРедактирования();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора элемента ВидПериодаЗаказов формы.
//
&НаКлиенте
Процедура ВидПериодаЗаказовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "СписокЗаказов", "Дата");
	
КонецПроцедуры

// Процедура настраивает период динамического списка.
//
&НаКлиенте
Процедура УстановитьПериодНаКлиенте(ВидПериодаРМК, ИмяСписка, ПараметрСтандартныйПериод = Неопределено)
	
	Если ВидПериодаРМК = ЭтотОбъект.ЗаПроизвольныйПериод Тогда
		
		Если ИмяСписка = "Список" Тогда
			ВидПериодаЖурналаПеречисление = ВидПериодаРМК;
		ИначеЕсли ИмяСписка = "СписокЧековККМНаВозврат" Тогда
			ВидПериодаЧековККМНаВозвратПеречисление = ВидПериодаРМК;
		ИначеЕсли ИмяСписка = "СписокЧековККМ" Тогда
			ВидПериодаЧековККМПеречисление = ВидПериодаРМК;
		ИначеЕсли ИмяСписка = "СписокЗаказов" Тогда
			ВидПериодаЗаказовПеречисление = ВидПериодаЗаказов;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПериодЗавершение", ЭтотОбъект, Новый Структура("ИмяСписка", ИмяСписка));
		Диалог = Новый ДиалогРедактированияСтандартногоПериода();
		Диалог.Период = ЭтотОбъект.Элементы[ИмяСписка].Период;
		Диалог.Показать(ОписаниеОповещения);
		
	Иначе
		
		УстановитьПериодНаСервере(ВидПериодаРМК, ИмяСписка, ПараметрСтандартныйПериод);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура настривает период динамического списка (если требуется интерактивный выбор периода).
//
&НаКлиенте
Процедура УстановитьПериодЗавершение(Результат, Параметры) Экспорт
	
	УстановитьПериодЗавершениеНаСервере(Результат, Параметры);
	
КонецПроцедуры

// Процедура настривает период динамического списка на сервере (если требуется интерактивный выбор периода).
//
&НаСервере
Процедура УстановитьПериодЗавершениеНаСервере(Результат, Параметры)
	
	Если Результат <> Неопределено Тогда
		
		Если Параметры.ИмяСписка <> "СписокЗаказов" Тогда
			ЭтотОбъект[Параметры.ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Ложь);
			ЭтотОбъект[Параметры.ИмяСписка].Параметры.УстановитьЗначениеПараметра("Статус", СменаОткрыта);
			ЭтотОбъект[Параметры.ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
		КонецЕсли;
		
		Элементы[Параметры.ИмяСписка].Период.Вариант = Результат.Вариант;
		Элементы[Параметры.ИмяСписка].Период.ДатаНачала = Результат.ДатаНачала;
		Элементы[Параметры.ИмяСписка].Период.ДатаОкончания = Результат.ДатаОкончания;
		Элементы[Параметры.ИмяСписка].Обновить();
		
		Если Параметры.ИмяСписка = "Список" Тогда
			Элементы.Дата.Видимость = Истина;
			ВидПериодаЖурнала = ПолучитьПредставлениеПериода(Результат, " - ");
		ИначеЕсли Параметры.ИмяСписка = "СписокЧековККМНаВозврат" Тогда
			ВидПериодаЧековККМНаВозврат = ПолучитьПредставлениеПериода(Результат, " - ");
		ИначеЕсли Параметры.ИмяСписка = "СписокЧековККМ" Тогда
			ВидПериодаЧековККМ = ПолучитьПредставлениеПериода(Результат, " - ");
		ИначеЕсли Параметры.ИмяСписка = "СписокЗаказов" Тогда
			ВидПериодаЗаказов = ПолучитьПредставлениеПериода(Результат, " - ");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура настривает период динамического списка на сервере.
//
&НаСервере
Процедура УстановитьПериодНаСервере(ВидПериодаРМК, ИмяСписка, ПараметрСтандартныйПериод = Неопределено)
	
	Если ИмяСписка = "Список" Тогда
		ВидПериодаЖурналаПеречисление = ВидПериодаРМК;
	ИначеЕсли ИмяСписка = "СписокЧековККМНаВозврат" Тогда
		ВидПериодаЧековККМНаВозвратПеречисление = ВидПериодаРМК;
	ИначеЕсли ИмяСписка = "СписокЧековККМ" Тогда
		ВидПериодаЧековККМПеречисление = ВидПериодаРМК;
	КонецЕсли;
	
	Если ВидПериодаРМК = ЗаТекущуюСмену Тогда
		
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Истина);
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
		Элементы[ИмяСписка].Период = Новый СтандартныйПериод;
		Элементы[ИмяСписка].Обновить();
		Если ИмяСписка = "Список" Тогда
			Элементы.Дата.Видимость = Ложь;
			ВидПериодаЖурнала = "За текущую смену";
		ИначеЕсли ИмяСписка = "СписокЧековККМНаВозврат" Тогда
			ВидПериодаЧековККМНаВозврат = "За текущую смену";
		ИначеЕсли ИмяСписка = "СписокЧековККМ" Тогда
			ВидПериодаЧековККМ = "За текущую смену";
		КонецЕсли;
		
	ИначеЕсли ВидПериодаРМК = ЗаПрошлуюСмену Тогда
		
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Ложь);
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Истина);
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("КассоваяСмена", ПолучитьПоследнийОтчетОРозничныхПродажахЗаЗакрытуюКассовуюСмену(КассаККМ));
		Элементы[ИмяСписка].Период = Новый СтандартныйПериод;
		Элементы[ИмяСписка].Обновить();
		Если ИмяСписка = "Список" Тогда
			Элементы.Дата.Видимость = Ложь;
			ВидПериодаЖурнала = "За прошлую смену";
		ИначеЕсли ИмяСписка = "СписокЧековККМНаВозврат" Тогда
			ВидПериодаЧековККМНаВозврат = "За прошлую смену";
		ИначеЕсли ИмяСписка = "СписокЧековККМ" Тогда
			ВидПериодаЧековККМ = "За прошлую смену";
		КонецЕсли;
		
	ИначеЕсли ВидПериодаРМК = ЗаВчерашнийДень Тогда
		
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Ложь);
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
		Элементы[ИмяСписка].Обновить();
		Элементы[ИмяСписка].Период.ДатаНачала = НачалоДня(НачалоДня(ТекущаяДата())-1);
		Элементы[ИмяСписка].Период.ДатаОкончания = НачалоДня(ТекущаяДата())-1;
		Элементы[ИмяСписка].Обновить();
		Если ИмяСписка = "Список" Тогда
			Элементы.Дата.Видимость = Ложь;
			ВидПериодаЖурнала = "За вчерашний день";
		ИначеЕсли ИмяСписка = "СписокЧековККМНаВозврат" Тогда
			ВидПериодаЧековККМНаВозврат = "За вчерашний день";
		ИначеЕсли ИмяСписка = "СписокЧековККМ" Тогда
			ВидПериодаЧековККМ = "За вчерашний день";
		КонецЕсли;
		
	ИначеЕсли ВидПериодаРМК = ЗаПроизвольныйПериод Тогда
		
		Элементы[ИмяСписка].Период.ДатаНачала = ПараметрСтандартныйПериод.ДатаНачала;
		Элементы[ИмяСписка].Период.ДатаОкончания = ПараметрСтандартныйПериод.ДатаОкончания;
		Если ИмяСписка <> "СписокЗаказов" Тогда
			ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Ложь);
			ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
		КонецЕсли;
		Элементы[ИмяСписка].Обновить();
		Если ИмяСписка = "Список" Тогда
			Элементы.Дата.Видимость = Истина;
			ВидПериодаЖурнала = ПолучитьПредставлениеПериода(Элементы.Список.Период, " - ");
		ИначеЕсли ИмяСписка = "СписокЧековККМНаВозврат" Тогда
			ВидПериодаЧековККМНаВозврат = ПолучитьПредставлениеПериода(Элементы.СписокЧековККМНаВозврат.Период, " - ");
		ИначеЕсли ИмяСписка = "СписокЧековККМ" Тогда
			ВидПериодаЧековККМ = ПолучитьПредставлениеПериода(Элементы.СписокЧековККМ.Период, " - ");
		ИначеЕсли ИмяСписка = "СписокЗаказов" Тогда
			ВидПериодаЗаказов = ПолучитьПредставлениеПериода(Элементы.СписокЗаказов.Период, " - ");
		КонецЕсли;
		
	ИначеЕсли ВидПериодаРМК = ЗаВесьПериод Тогда
		
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСтатусам", Ложь);
		ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ОтборПоСмене", Ложь);
		Элементы[ИмяСписка].Период = Новый СтандартныйПериод;
		Элементы[ИмяСписка].Обновить();
		Если ИмяСписка = "Список" Тогда
			Элементы.Дата.Видимость = Истина;
			ВидПериодаЖурнала = "За всё время";
		ИначеЕсли ИмяСписка = "СписокЧековККМНаВозврат" Тогда
			ВидПериодаЧековККМНаВозврат = "За всё время";
		ИначеЕсли ИмяСписка = "СписокЧековККМ" Тогда
			ВидПериодаЧековККМ = "За всё время";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает представление стандартного периода.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеПериода(СтандартныйПериод, Разделитель = " по ")
	
	Возврат РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(СтандартныйПериод);
	
КонецФункции

#КонецОбласти

#Область БыстрыеТовары

// Процедура создает кнопки на панели быстрых товаров.
//
&НаСервере
Процедура ЗаполнитьБыстрыеТовары(ПриОткрытии = Ложь)

	КоличествоСтолбцов = 3;
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось определить рабочее место для работы с подключаемым оборудованием.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	НастройкаРМК = РабочееМестоКассираВызовСервера.ПолучитьНастройкуРМК(РабочееМесто);
	Если Не ЗначениеЗаполнено(НастройкаРМК) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось получить настройки РМК для текущего рабочего места.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БыстрыеТовары.Номенклатура КАК Номенклатура,
		|	БыстрыеТовары.Характеристика КАК Характеристика,
		|	БыстрыеТовары.Ctrl,
		|	БыстрыеТовары.Shift,
		|	БыстрыеТовары.Alt,
		|	БыстрыеТовары.СочетаниеКлавиш,
		|	БыстрыеТовары.Клавиша,
		|	БыстрыеТовары.Заголовок,
		|	БыстрыеТовары.Номенклатура.ИспользоватьХарактеристики КАК ХарактеристикиИспользуются,
		|	БыстрыеТовары.Номенклатура.Наименование КАК Наименование,
		|	БыстрыеТовары.Характеристика.Наименование,
		|	ВЫБОР
		|		КОГДА БыстрыеТовары.ПолеСоритровки = """"
		|			ТОГДА ""999999""
		|		ИНАЧЕ БыстрыеТовары.ПолеСоритровки
		|	КОНЕЦ КАК ПолеСоритровки
		|ИЗ
		|	Справочник.НастройкиРМК.БыстрыеТовары КАК БыстрыеТовары
		|ГДЕ
		|	БыстрыеТовары.Ссылка = &НастройкаРМК
		|	И НЕ БыстрыеТовары.Отключено
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеСоритровки,
		|	Номенклатура,
		|	Характеристика
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НастройкаРМК", НастройкаРМК);
	
	МРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРезультата = МРезультатов[0].Выгрузить();
	
	// Удалим команды.
	Если Не ПриОткрытии Тогда
		МассивУдаляемыхКоманд = Новый Массив;
		Для Каждого Команда Из Команды Цикл
			Если (СтрНайти(Команда.Имя, "БыстрыйТовар_") > 0) 
				ИЛИ (СтрНайти(Команда.Имя, "ГруппаБыстрыхТоваров_") > 0) 
				Тогда
				МассивУдаляемыхКоманд.Добавить(Команда);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Команда Из МассивУдаляемыхКоманд Цикл
			Команды.Удалить(Команда);
		КонецЦикла;
		// Удалим элементы.
		МассивУдаляемыхЭлементов = Новый Массив;
		Для Каждого Элемент Из Элементы Цикл
			Если (СтрНайти(Элемент.Имя, "БыстрыйТовар_") > 0) 
				ИЛИ (СтрНайти(Элемент.Имя, "ГруппаОплатаКартой_") > 0) 
				ИЛИ (СтрНайти(Элемент.Имя, "ГруппаБыстрыхТоваров_")) Тогда
				МассивУдаляемыхЭлементов.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
			Попытка
				Элементы.Удалить(Элемент);
			Исключение КонецПопытки;
		КонецЦикла;
		
		БыстрыеТовары.Очистить();
	КонецЕсли;
	
	ТекСч = 1;
	Для Каждого БыстрыйТовар Из ТаблицаРезультата Цикл
		Если Не ЗначениеЗаполнено(БыстрыйТовар.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = БыстрыеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, БыстрыйТовар);
		
		ИмяКнопки = "БыстрыйТовар_" + БыстрыеТовары.Индекс(НоваяСтрока);
			
		НоваяКоманда = ЭтаФорма.Команды.Добавить(ИмяКнопки);
		НоваяКоманда.Действие = "ВыбранБыстрыйТовар";
		Если ЗначениеЗаполнено(БыстрыйТовар.Заголовок) Тогда
			НоваяКоманда.Заголовок = БыстрыйТовар.Заголовок;
		Иначе
			НоваяКоманда.Заголовок = Строка(БыстрыйТовар.Наименование)+?(ЗначениеЗаполнено(БыстрыйТовар.ХарактеристикаНаименование), ". "+СокрЛП(БыстрыйТовар.ХарактеристикаНаименование), "");
		КонецЕсли;
		НоваяКоманда.Отображение               = ОтображениеКнопки.Текст;
		НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
		Если ЗначениеЗаполнено(БыстрыйТовар.Клавиша) Тогда
			НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша[БыстрыйТовар.Клавиша], БыстрыйТовар.Alt, БыстрыйТовар.Ctrl, БыстрыйТовар.Shift);
		КонецЕсли;
		
		Если ТекСч = 1 ИЛИ (ТекСч-1) % КоличествоСтолбцов = 0 Тогда
			НоваяГруппа = Элементы.Добавить("ГруппаОплатаКартой_"+ТекСч, Тип("ГруппаФормы"), Элементы.ГруппаКнопкиБыстрыхТоваров);
			НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			НоваяГруппа.ОтображатьЗаголовок = Ложь;
			НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			НоваяГруппа.РастягиватьПоГоризонтали = Истина;
		КонецЕсли;

		НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), НоваяГруппа);
		НоваяКнопка.ТолькоВоВсехДействиях = Ложь;
		НоваяКнопка.Видимость = Истина;
		НоваяКнопка.ИмяКоманды = НоваяКоманда.Имя;
		Если ЗначениеЗаполнено(БыстрыйТовар.Заголовок) Тогда
			НоваяКнопка.Заголовок = СокрЛП(БыстрыйТовар.Заголовок);
		Иначе
			НоваяКнопка.Заголовок = СокрЛП(БыстрыйТовар.Наименование)+?(ЗначениеЗаполнено(БыстрыйТовар.ХарактеристикаНаименование), ". "+СокрЛП(БыстрыйТовар.ХарактеристикаНаименование), "");
		КонецЕсли;
		ПредставлениеСочетания = ПредставлениеСочетанияКлавиш(НоваяКоманда.СочетаниеКлавиш);
		Если ЗначениеЗаполнено(ПредставлениеСочетания) Тогда
			НоваяКнопка.Заголовок = Лев(СокрЛП(НоваяКнопка.Заголовок), 20) + " " + ПредставлениеСочетания;
		КонецЕсли;
		НоваяКнопка.Ширина = 9;
		НоваяКнопка.Высота = 3;
		НоваяКнопка.ВысотаЗаголовка = 3;
		НоваяКнопка.СочетаниеКлавиш = НоваяКоманда.СочетаниеКлавиш;
		
		НоваяКнопка.РастягиватьПоГоризонтали = Истина;
		НоваяКнопка.АвтоМаксимальнаяШирина = Ложь;
		НоваяКнопка.МаксимальнаяШирина = 0;
		
		НоваяСтрока.ИмяКоманды = ИмяКнопки;
		
		ТекСч = ТекСч + 1;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьБыстрыеТовары()

// Процедура - обработчика нажатия кнопки быстрого товара.
&НаКлиенте
Процедура ВыбранБыстрыйТовар(Команда, СтруктураНоменклатураХарактеристика = Неопределено)
	
	СтруктураОтбора = Неопределено;
	Если СтруктураНоменклатураХарактеристика = Неопределено Тогда
		НайденныеСтроки = БыстрыеТовары.НайтиСтроки(Новый Структура("ИмяКоманды", ""+Команда.Имя));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика", НайденныеСтроки[0].Номенклатура, НайденныеСтроки[0].Характеристика);
		КонецЕсли;
	Иначе
		СтруктураОтбора = СтруктураНоменклатураХарактеристика;
	КонецЕсли;
	
	Если СтруктураОтбора <> Неопределено Тогда
		ЗапасыНайденныеСтроки = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
		
		Если ЗапасыНайденныеСтроки.Количество() = 0
			ИЛИ ЗапасыНайденныеСтроки[0].НеобходимостьВводаАкцизнойМарки
			ИЛИ ЗапасыНайденныеСтроки[0].НеобходимостьВводаКодаМаркировки Тогда
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = СтруктураОтбора.Номенклатура;
			НоваяСтрока.Характеристика = СтруктураОтбора.Характеристика;
			
			ДокументПересчитанНаКлиенте = Ложь;
			НоменклатураПриИзменении(НоваяСтрока);
		Иначе
			ЗапасыНайденныеСтроки[0].Количество = ЗапасыНайденныеСтроки[0].Количество + 1;
			
			ДокументПересчитанНаКлиенте = Ложь;
			РассчитатьСуммуВСтрокеТабличнойЧасти(ЗапасыНайденныеСтроки[0]);
			
			НоваяСтрока = ЗапасыНайденныеСтроки[0];
		КонецЕсли;
		
		УстановитьОписаниеДляСтрокиТЧЗапасы(Объект, НоваяСтрока);
		
		Элементы.Запасы.Обновить();
		Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СочетанияКлавиш

// Функция возвращает представление клавиши
// Параметры:
//	ЗначениеКлавиша						- Клавиша
//
// Возвращаемое значение
//	Строка - Представление клавиши
//
&НаСервере
Функция ПредставлениеКлавиши(ЗначениеКлавиша) Экспорт
	
	Если Строка(Клавиша._1) = Строка(ЗначениеКлавиша) Тогда
		Возврат "1";
	ИначеЕсли Строка(Клавиша._2) = Строка(ЗначениеКлавиша) Тогда
		Возврат "2";
	ИначеЕсли Строка(Клавиша._3) = Строка(ЗначениеКлавиша) Тогда
		Возврат "3";
	ИначеЕсли Строка(Клавиша._4) = Строка(ЗначениеКлавиша) Тогда
		Возврат "4";
	ИначеЕсли Строка(Клавиша._5) = Строка(ЗначениеКлавиша) Тогда
		Возврат "5";
	ИначеЕсли Строка(Клавиша._6) = Строка(ЗначениеКлавиша) Тогда
		Возврат "6";
	ИначеЕсли Строка(Клавиша._7) = Строка(ЗначениеКлавиша) Тогда
		Возврат "7";
	ИначеЕсли Строка(Клавиша._8) = Строка(ЗначениеКлавиша) Тогда
		Возврат "8";
	ИначеЕсли Строка(Клавиша._9) = Строка(ЗначениеКлавиша) Тогда
		Возврат "9";
	ИначеЕсли Строка(Клавиша.Num0) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 0";
	ИначеЕсли Строка(Клавиша.Num1) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 1";
	ИначеЕсли Строка(Клавиша.Num2) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 2";
	ИначеЕсли Строка(Клавиша.Num3) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 3";
	ИначеЕсли Строка(Клавиша.Num4) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 4";
	ИначеЕсли Строка(Клавиша.Num5) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 5";
	ИначеЕсли Строка(Клавиша.Num6) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 6";
	ИначеЕсли Строка(Клавиша.Num7) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 7";
	ИначеЕсли Строка(Клавиша.Num8) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 8";
	ИначеЕсли Строка(Клавиша.Num9) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 9";
	ИначеЕсли Строка(Клавиша.NumAdd) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num +";
	ИначеЕсли Строка(Клавиша.NumDecimal) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num .";
	ИначеЕсли Строка(Клавиша.NumDivide) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num /";
	ИначеЕсли Строка(Клавиша.NumMultiply) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num *";
	ИначеЕсли Строка(Клавиша.NumSubtract) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num -";
	Иначе
		Возврат Строка(ЗначениеКлавиша);
	КонецЕсли;
	
КонецФункции

// Функция возвращает представление клавиши
// Параметры:
//	СочетаниеКлавиш						- Сочетание клавиш для которого нужно сформировать представление
//	БезСкобок							- Флаг, указывающий, что представление должно быть сформировано без скобок
//
// Возвращаемое значение
//	Строка - Представление сочетания клавиш
//
&НаСервере
Функция ПредставлениеСочетанияКлавиш(СочетаниеКлавиш, БезСкобок = Ложь) Экспорт
	
	Если СочетаниеКлавиш.Клавиша = Клавиша.Нет Тогда
		Возврат "";
	КонецЕсли;
	
	Наименование = ?(БезСкобок, "", "(");
	Если СочетаниеКлавиш.Ctrl Тогда
		Наименование = Наименование + "Ctrl+"
	КонецЕсли;
	Если СочетаниеКлавиш.Alt Тогда
		Наименование = Наименование + "Alt+"
	КонецЕсли;
	Если СочетаниеКлавиш.Shift Тогда
		Наименование = Наименование + "Shift+"
	КонецЕсли;
	Наименование = Наименование + ПредставлениеКлавиши(СочетаниеКлавиш.Клавиша) + ?(БезСкобок, "", ")");
	
	Возврат Наименование;
	
КонецФункции

#КонецОбласти

#Область ПредставлениеСтрокиТЧЗапасыНаЧеке

// Функция возвращает информацию о количестве и суммах в виде строки. Используется для заполнения состава чека на
// закладке "Возврат".
//
&НаСервере
Функция ПолучитьОписаниеДляСтрокиТЧЗапасыНаСервере(Строка)
	
	СуммаСкидкиСтроки = (Строка.Количество * Строка.Цена) - Строка.Сумма;
	НоменклатураХарактеристикаИПартия = СокрЛП(Строка.Номенклатура.Наименование)+?(Строка.Характеристика.Пустая(), "", ". "+Строка.Характеристика)+?(Строка.Партия.Пустая(), "", ". "+Строка.Партия);
	Если СуммаСкидкиСтроки <> 0 Тогда
		ПроцентСкидки = Формат(СуммаСкидкиСтроки * 100 / (Строка.Количество * Строка.Цена), "ЧДЦ=2");
		ТекстСкидки = ?(СуммаСкидкиСтроки > 0, " - "+СуммаСкидкиСтроки, " + "+(-СуммаСкидкиСтроки))+" "+Объект.ВалютаДокумента
					  +" ("+?(СуммаСкидкиСтроки > 0, " - "+ПроцентСкидки+"%)", " + "+(-ПроцентСкидки)+"%)");
	Иначе
		ТекстСкидки = "";
	КонецЕсли;
	Возврат ""+Строка.Цена+" "+Объект.ВалютаДокумента+" Х "+Строка.Количество+" "+Строка.ЕдиницаИзмерения+ТекстСкидки+" = "+Строка.Сумма+" "+Объект.ВалютаДокумента;
	
КонецФункции

// Функция заполняет реквизиты ДанныеПоСтроке и НоменклатураХарактеристикаИПартия строки ТЧ Запасы.
//
&НаКлиентеНаСервереБезКонтекста
Функция УстановитьОписаниеДляСтрокиТЧЗапасы(Объект, Строка)
	
	СуммаСкидкиСтроки = (Строка.Количество * Строка.Цена) - Строка.Сумма;
	Строка.НоменклатураХарактеристикаИПартия = СокрЛП(""+Строка.Номенклатура)+?(Строка.Характеристика.Пустая(), "", ". "+Строка.Характеристика)+?(Строка.Партия.Пустая(), "", ". "+Строка.Партия);
	Если СуммаСкидкиСтроки <> 0 Тогда
		ПроцентСкидки = Формат(СуммаСкидкиСтроки * 100 / (Строка.Количество * Строка.Цена), "ЧДЦ=2");
		ТекстСкидки = ?(СуммаСкидкиСтроки > 0, " - "+СуммаСкидкиСтроки, " + "+(-СуммаСкидкиСтроки))+" "+Объект.ВалютаДокумента
					  +" ("+?(СуммаСкидкиСтроки > 0, " - "+ПроцентСкидки+"%)", " + "+(-ПроцентСкидки)+"%)");
	Иначе
		ТекстСкидки = "";
	КонецЕсли;
	Строка.ДанныеПоСтроке = ""+Строка.Цена+" "+Объект.ВалютаДокумента+" Х "+Строка.Количество+" "+Строка.ЕдиницаИзмерения+ТекстСкидки+" = "+Строка.Сумма+" "+Объект.ВалютаДокумента;
	
КонецФункции

// Функция заполняет реквизиты ДанныеПоСтроке и НоменклатураХарактеристикаИПартия для всех строк ТЧ Запасы.
//
&НаКлиенте
Процедура ЗаполнитьОписаниеДляТЧЗапасыНаКлиенте()
	
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		УстановитьОписаниеДляСтрокиТЧЗапасы(Объект, ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Функция заполняет реквизиты ДанныеПоСтроке и НоменклатураХарактеристикаИПартия для всех строк ТЧ Запасы.
//
&НаСервере
Процедура ЗаполнитьОписаниеДляТЧЗапасыНаСервере()
	
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		УстановитьОписаниеДляСтрокиТЧЗапасы(Объект, ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаАкцизнойМаркиАП(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("КлючСвязи", ДополнительныеПараметры.ТекущийКлючСвязи));
	Для каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
		Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
	КонецЦикла;
	
	СтрокаТЧ = Объект.Запасы.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОткрытияФормы = Неопределено Тогда
		Объект.Запасы.Удалить(СтрокаТЧ);
		Возврат;
	КонецЕсли;
	
	СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
	СтрокаАкцизнаяМарка.КлючСвязи = ДополнительныеПараметры.ТекущийКлючСвязи;
	СтрокаАкцизнаяМарка.КодАкцизнойМарки = РезультатОткрытияФормы.Штрихкод;
	СтрокаАкцизнаяМарка.АкцизнаяМарка    = РезультатОткрытияФормы.ШтрихкодУпаковки;
	СтрокаАкцизнаяМарка.Справка2         = РезультатОткрытияФормы.Справка2;
	
	СтрокаТЧ.НоменклатураЕГАИС    = РезультатОткрытияФормы.АлкогольнаяПродукция;
	СтрокаТЧ.Количество = 1;
	
	Если Не ЗначениеЗаполнено(СтрокаТЧ.Штрихкод) Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПараметров.Вставить("Характеристика", СтрокаТЧ.Характеристика);
		СтруктураПараметров.Вставить("Партия", СтрокаТЧ.Партия);
		СтруктураПараметров.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмерения);
		
		СтрокаТЧ.Штрихкод = ИнтеграцияЕГАИСУНФВызовСервера.ПолучитьШтрихкодПоНоменклатуре(СтруктураПараметров);
	КонецЕсли;
	
	СтрокаТЧ.СтатусПроверкиГосИС = ?(ЗначениеЗаполнено(СтрокаАкцизнаяМарка.КодАкцизнойМарки), 1, 2);
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТЧ);
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаАкцизнойМаркиТП(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	СтрокаТЧ = Объект.Запасы.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОткрытияФормы = Неопределено Тогда
		Объект.Запасы.Удалить(СтрокаТЧ);
		Возврат;
	КонецЕсли;
	
	Если НЕ КодМаркировкиСоответствуетНоменклатуре(РезультатОткрытияФормы, ДополнительныеПараметры) Тогда
		Объект.Запасы.Удалить(СтрокаТЧ);
		Возврат;
	КонецЕсли;
	СтрокаТЧ.КодМаркировки = РезультатОткрытияФормы;
	Если СтрокаТЧ.Свойство("СтатусПроверкиГосИС") Тогда
		СтрокаТЧ.СтатусПроверкиГосИС = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 1, 2);
	КонецЕсли;
	СтрокаТЧ.ИндексАкцизнойМарки = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 1, 2);
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТЧ);
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Функция КодМаркировкиСоответствуетНоменклатуре(РезультатОткрытияФормы, ДополнительныеПараметры)
	
	СтрокаТЧ = Объект.Запасы.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если СтрокаТЧ = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка в табличной части ""Товары и услуги"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	Иначе
		Возврат АкцизныеМаркиУНФ.КодМаркировкиСоответствуетНоменклатуре(РезультатОткрытияФормы, СтрокаТЧ.Номенклатура, СтрокаТЧ.ЕдиницаИзмерения);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВвестиАкцизнуюМарку(СтрокаТЧ)
	
	ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
	Номенклатура = СтрокаТЧ.Номенклатура;
	ТекущийКлючСвязи = СтрокаТЧ.КлючСвязи;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура"         , Номенклатура);
	ПараметрыФормы.Вставить("КонтрольАкцизныхМарок", Истина);
	
	Если СтрокаТЧ.НеобходимостьВводаКодаМаркировки Тогда
		ПараметрыФормы.Вставить("КодыМаркировки", Истина);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
	ПараметрыФормы.Вставить("ТекущийКлючСвязи"         , ТекущийКлючСвязи);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	ДополнительныеПараметры.Вставить("ТекущийКлючСвязи", ТекущийКлючСвязи);
	
	Если СтрокаТЧ.НеобходимостьВводаКодаМаркировки Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаАкцизнойМаркиТП", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("ОбщаяФорма.ФормаВводаАкцизнойМарки", ПараметрыФормы, ЭтаФорма, ,,,ОписаниеОповещения, РежимОткрытияОкнаФОрмы.БлокироватьОкноВладельца);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаАкцизнойМаркиАП", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.РаботаСАкцизнымиМаркамиЕГАИС.Форма.ФормаВводаАкцизнойМарки", ПараметрыФормы, ЭтаФорма, ,,,ОписаниеОповещения, РежимОткрытияОкнаФОрмы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиАкцизнуюМаркуШиныИПокрышки(СтрокаТЧ)
	
	ПараметрыОткрытияФормы = ИнтеграцияМОТПУНФКлиент.ИнициализироватьПараметрыОткрытияФормыВводаКодаМаркировки();
	ПараметрыОткрытияФормы.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
	ПараметрыОткрытияФормы.Вставить("Характеристика", СтрокаТЧ.Характеристика);
	ПараметрыОткрытияФормы.Вставить("МаркируемаяПродукция", Истина);
	ПараметрыОткрытияФормы.Вставить("ПараметрыСканирования", ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект));
	
	ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
	Номенклатура = СтрокаТЧ.Номенклатура;
	ТекущийКлючСвязи = СтрокаТЧ.КлючСвязи;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура"         , Номенклатура);
	ПараметрыФормы.Вставить("КонтрольАкцизныхМарок", Истина);
	ПараметрыФормы.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
	ПараметрыФормы.Вставить("ТекущийКлючСвязи"         , ТекущийКлючСвязи);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	ДополнительныеПараметры.Вставить("ТекущийКлючСвязи", ТекущийКлючСвязи);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаАкцизнойМаркиТП", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаАкцизнойМаркиШиныИПокрышки", ПараметрыФормы, ЭтаФорма, ,,,ОписаниеОповещения, РежимОткрытияОкнаФОрмы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьВводАкцизнойМарки(СтрокаТЧ)

	ВернутьЛожь = Ложь;
	Если НЕ ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
		ВернутьЛожь = Истина;
	ИначеЕсли СтрокаТЧ = Неопределено Тогда
		ВернутьЛожь = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		ВернутьЛожь = Истина;
	ИначеЕсли НЕ СтрокаТЧ.НеобходимостьВводаАкцизнойМарки Тогда
		ВернутьЛожь = Истина;
	КонецЕсли;
	
	Если ВернутьЛожь Тогда
		ПересчитатьДокументНаКлиенте();
		Возврат Ложь;
	КонецЕсли;
	
	Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС 
		И НЕ ЗначениеЗаполнено(СтрокаТЧ.КлючСвязи) Тогда
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, СтрокаТЧ, "КлючСвязи");
	КонецЕсли;
	
	ВвестиАкцизнуюМарку(СтрокаТЧ);
	
КонецФункции

&НаКлиенте
Функция ОткрытьВводАкцизнойМаркиШиныИПокрышки(СтрокаТЧ)
	
	ВернутьЛожь = Ложь;
	Если НЕ ИспользуетсяМаркировкаШинИПокрышек Тогда
		ВернутьЛожь = Истина;
	ИначеЕсли СтрокаТЧ = Неопределено Тогда
		ВернутьЛожь = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		ВернутьЛожь = Истина;
	ИначеЕсли НЕ СтрокаТЧ.НеобходимостьВводаАкцизнойМарки
		И НЕ СтрокаТЧ.НеобходимостьВводаКодаМаркировки Тогда
		ВернутьЛожь = Истина;
	КонецЕсли;
	
	ЭтоШиныИПокрышки = УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура, "ШиныИПокрышки");
	
	Если ЭтоШиныИПокрышки = Неопределено 
		ИЛИ НЕ ЭтоШиныИПокрышки Тогда
		ВернутьЛожь = Истина;
	КонецЕсли;
	
	Если ВернутьЛожь Тогда
		ПересчитатьДокументНаКлиенте();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КлючСвязи) Тогда
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, СтрокаТЧ, "КлючСвязи");
	КонецЕсли;
	
	Если СтрокаТЧ.Свойство("СтатусПроверкиГосИС") Тогда
		СтрокаТЧ.СтатусПроверкиГосИС = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 1, 2);
	КонецЕсли;
	СтрокаТЧ.ИндексАкцизнойМарки = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 1, 2);
	
	ВвестиАкцизнуюМаркуШиныИПокрышки(СтрокаТЧ);
	
КонецФункции

#КонецОбласти

#Область Отборы

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения, "СписокЗаказов");
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, СписокЗаказов, ИмяПоляОтбораСписка, "СписокЗаказов");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, СписокЗаказов, МеткаИД, "СписокЗаказов");

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект, "СписокЗаказов");
	
	Если Не УчетПоКомпанииВЦелом Тогда
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("ИспользоватьНастройкиПоУмолчанию", ИспользоватьНастройкиПоУмолчанию);
		ХранилищеНастроекДанныхФорм.Сохранить("ЧекККМФормаРМКДопНастройки", "СтруктураНастроек", СтруктураНастроек);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ИмяРеквизитаСписка = "СписокЗаказов";
	ИмяТЧДанныеМеток = "ДанныеМеток";
	ИмяТЧДанныеОтборов = "ДанныеОтборов";
	ИмяГруппыОтборов = "ГруппаОтборы";
	ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчанию";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаСписка", ИмяРеквизитаСписка);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеМеток", ИмяТЧДанныеМеток);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеОтборов", ИмяТЧДанныеОтборов);
	ДополнительныеПараметры.Вставить("ИмяГруппыОтборов", ИмяГруппыОтборов);
	ДополнительныеПараметры.Вставить("ИмяПредопределенныеОтборыПоУмолчанию", ИмяПредопределенныеОтборыПоУмолчанию);
	
	РаботаСОтборамиКлиент.НастроитьОтборыНажатие(ЭтотОбъект, ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры), ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры)
	
	Возврат РаботаСОтборами.ПараметрыДляОткрытияФормыСНастройкамиОтборов(ЭтотОбъект, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура НастройкаОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтборовЗавершениеНаСервере(Результат.АдресВыбранныеОтборы, Результат.АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовЗавершениеНаСервере(АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ИмяРеквизитаСписка = "СписокЗаказов";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
	Иначе
		ИмяРеквизитаСписка = ДополнительныеПараметры.ИмяРеквизитаСписка;
		ИмяТЧДанныеМеток = ДополнительныеПараметры.ИмяТЧДанныеМеток;
		ИмяТЧДанныеОтборов = ДополнительныеПараметры.ИмяТЧДанныеОтборов;
	КонецЕсли;
	
	РаботаСОтборами.НастройкаОтборовЗавершение(ЭтотОбъект, АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборПриИзменении(Элемент)
	
	Подключаемый_ОтборПриИзмененииНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборПриИзмененииНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборПриИзменении(ЭтотОбъект, ЭлементИмя, ЭлементРодительИмя, "СписокЗаказов");
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборОчистка(Элемент)
	
	Подключаемый_ОтборОчисткаНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборОчисткаНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборОчистка(ЭтотОбъект, ЭлементИмя, "СписокЗаказов");

КонецПроцедуры

#КонецОбласти

#Область ПанельКонтактнойИнформации

// УНФ.ПанельКонтактнойИнформации
&НаКлиенте
Процедура ОбновитьПанельКонтактнойИнформации()
	
	ДанныеПанелиКИ = ДанныеПанелиКонтактнойИнформации(ТекущийКонтрагент);
	КонтактнаяИнформацияПанельУНФКлиент.ЗаполнитьДанныеПанелиКИ(ЭтотОбъект, ДанныеПанелиКИ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПанелиКонтактнойИнформации(ВладелецКИ)
	
	Возврат КонтактнаяИнформацияПанельУНФ.ДанныеПанелиКонтактнойИнформации(ВладелецКИ);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец УНФ.ПанельКонтактнойИнформации

#КонецОбласти

#Область РаботаССериямиНоменклатуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора_МК(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры("ЗапасыМК");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры(ИмяТЧ)
		
	ТекущиеДанныеИдентификатор = Элементы[ИмяТЧ].ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Модифицированность = Истина;
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки);
	
КонецФункции

Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор)
	
	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор);
	
КонецФункции

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьСтрокуЗапасовДаннымиНабора(Форма, СтрокаТабличнойЧасти, СтруктураДанные)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, СтрокаТабличнойЧасти,
		Форма.ИспользоватьСерииНоменклатурыОстатки);
	
	НаборыКлиентСервер.ЗаменитьСтрокуДаннымиНабора(Объект, "Запасы", СтрокаТабличнойЧасти, СтруктураДанные); 
	
	Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСоставНабора(СтрокаТабличнойЧасти)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
	СтруктураОткрытия.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
	ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОткрытия);
	СтрокиНабора = Объект.Запасы.НайтиСтроки(СтруктураОткрытия);
	Если ДобавленныеСтроки.Количество() = 0 Тогда
		СтруктураОткрытия.Вставить("Количество", 1);
	Иначе
		СтруктураОткрытия.Вставить("Количество", ДобавленныеСтроки[0].Количество);
	КонецЕсли; 
	СтруктураОткрытия.Вставить("СоставНабора", Новый Массив);
	Для каждого Стр Из СтрокиНабора Цикл
		СтруктураСтроки = Новый Структура("Номенклатура,Характеристика,Количество,Цена,ДоляСтоимости,ЕдиницаИзмерения,Активная");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Стр);
		СтруктураСтроки.Активная = (Стр = СтрокаТабличнойЧасти); 
		СтруктураОткрытия.СоставНабора.Добавить(СтруктураСтроки);
	КонецЦикла; 
	ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, ЭтотОбъект, , , , , 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставНабора(НоменклатураНабора, ХарактеристикаНабора, КоличествоНаборов, ЦенаНабора, СоставНабора)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураДанных.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	СтруктураДанных.Вставить("ИмяТабличнойЧасти", "Запасы");
	СтруктураДанных.Вставить("СоставНабора", СоставНабора);
	СтруктураДанных.Вставить("КоличествоНаборов", КоличествоНаборов);
	СтруктураДанных.Вставить("ЦенаНабора", ЦенаНабора);
	НаборыСервер.ОбновитьСоставНабораВДокументе(СтруктураДанных, Объект);
	Модифицированность = Истина;

	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеКартинокНаборов(Запасы, ДобавленныеНаборы)
	
	Для каждого Стр Из Запасы Цикл
		Стр.КартинкаНабора = НаборыКлиентСервер.КартинкаНабора(Стр, ДобавленныеНаборы);
		Если Стр.КартинкаНабора>5 Тогда
			Стр.КартинкаНабора = ((Стр.КартинкаНабора - 1) % 5) + 1;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
&НаСервереБезКонтекста
Процедура ОбновитьПризнакиНабора(Запасы)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
		Возврат;
	КонецЕсли; 
	
	МассивНоменклатуры = Новый Массив;
	Для каждого Стр Из Запасы Цикл
		Если ЗначениеЗаполнено(Стр.Номенклатура) И НЕ ЗначениеЗаполнено(Стр.НоменклатураНабора) И ТипЗнч(Стр.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
			МассивНоменклатуры.Добавить(Стр.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНоменклатуры.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		|	И Номенклатура.ЭтоНабор";
		Выборка = Запрос.Выполнить().Выбрать();
		ПараметрыНоменклатуры = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ПараметрыНоменклатуры.Вставить(Выборка.Ссылка, Истина);	
		КонецЦикла; 
		
		Для каждого Стр Из Запасы Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) ИЛИ ЗначениеЗаполнено(Стр.НоменклатураНабора) ИЛИ ТипЗнч(Стр.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
				Стр.ЭтоНабор = Ложь;
			Иначе
				Стр.ЭтоНабор = ПараметрыНоменклатуры.Получить(Стр.Номенклатура);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция  ХарактеристикиНабора(Номенклатура, Текст)
	
	СтруктураПараметров = Новый Структура();
	Если ПустаяСтрока(Текст) Тогда
		СтруктураПараметров.Вставить("СтрокаПоиска", Неопределено);
	Иначе
		СтруктураПараметров.Вставить("СтрокаПоиска", Текст);
	КонецЕсли; 
	СтруктураПараметров.Вставить("Отбор", Новый Структура);
	СтруктураПараметров.Отбор.Вставить("Владелец", Номенклатура);
	Возврат Справочники.ХарактеристикиНоменклатуры.ПолучитьДанныеВыбора(СтруктураПараметров);
	
КонецФункции
 
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПатент()
	
	Объект.Патент = НалогиУНФ.ПатентПоСкладу(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
	Если Не ЗначениеЗаполнено(Объект.Патент) Тогда
		Объект.Патент = Справочники.Патенты.ПолучитьПатентПоУмолчанию(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДеталиПодразделения(Подразделение, Организация, Дата)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ПодписьМОЛ", Подразделение.ПодписьМОЛ);
	
	СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Организация, Подразделение, Дата);
	СтруктураДанных.Вставить("СпециальныйНалоговыйРежим", СпециальныйНалоговыйРежим);
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервере
Процедура ДобавитьКолонкуКоличествоВБазовыхЕдиницахГосИС()
	
	Реквизиты = ПолучитьРеквизиты("Объект.Запасы");
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		Если Реквизит.Имя = "КоличествоВБазовыхЕдиницахГосИС" Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	ДобавляемыйРеквизит = Новый РеквизитФормы("КоличествоВБазовыхЕдиницахГосИС",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,2)), "Объект.Запасы"	, "Количество в базовых единицах ГосИС");
	ДобавляемыеРеквизиты.Добавить(ДобавляемыйРеквизит);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыВСтрокахТабличнойЧастиПоВидуМаркируемойПродукции(ВидМаркируемойПродукции)
	
	Для Каждого Строка Из Объект.Запасы Цикл
		
		Если Строка.ВидПродукцииИС = ВидМаркируемойПродукции Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОстатковИПризнакиХарактеристикИПартий()
	ЗаполнитьПризнакиИспользованияХарактеристик();
	ОбновитьТипНоменклатурыЗапас();
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли
КонецПроцедуры

Функция РМКВходитВСоставНачальнойСтраницы()
	
	НастройкиНачальнойСтраницы = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиНачальнойСтраницы");
	
	Если НастройкиНачальнойСтраницы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СоставФорм = НастройкиНачальнойСтраницы.ПолучитьСоставФорм();
	
	Левая = СоставФорм.ЛеваяКолонка;
	Правая = СоставФорм.ПраваяКолонка; 
	
	ИмяФормыРМК = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК";
	
	ИндексФормыЛеваяКолонка = Левая.Найти(ИмяФормыРМК);
	ИндексФормыПраваяКолонка = Правая.Найти(ИмяФормыРМК);
	
	Возврат ?(ИндексФормыЛеваяКолонка = Неопределено И ИндексФормыПраваяКолонка = Неопределено, Ложь, Истина);
	
КонецФункции

// Проверяет, возможна ли печать чека на ККТ, и в зависимости от результата
// регулирует видимость предупреждения
//
&НаСервере
Процедура УстановитьВидимостьПредупрежденияОКассире(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(КассаДляПроверкиОтветственного) Тогда
		
		РеквизитыДокумента = УправлениеНебольшойФирмойКлиентСервер.СформироватьСтруктуруДляПроверкиКассира();
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, Объект);
		РеквизитыКассира = РабочееМестоКассираВызовСервера.ПолучитьРеквизитыКассира(РеквизитыДокумента);
		Видимость = Не ЗначениеЗаполнено(РеквизитыКассира.ФизЛицо);
		
		РеквизитыДокумента.КассаККМ = КассаДляПроверкиОтветственного;
		РеквизитыКассира = РабочееМестоКассираВызовСервера.ПолучитьРеквизитыКассира(РеквизитыДокумента);
		Видимость = Видимость Или Не ЗначениеЗаполнено(РеквизитыКассира.ФизЛицо);
		
	ИначеЕсли КассаККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		Видимость = Ложь;
		
	Иначе
		
		РеквизитыДокумента = УправлениеНебольшойФирмойКлиентСервер.СформироватьСтруктуруДляПроверкиКассира();
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, Объект);
		РеквизитыКассира = РабочееМестоКассираВызовСервера.ПолучитьРеквизитыКассира(РеквизитыДокумента);
		Видимость = Не ЗначениеЗаполнено(РеквизитыКассира.ФизЛицо);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОтсутствиеКассира",
		"Видимость",
		Видимость);
	
	ЕстьПравоНаСотрудника =  ПравоДоступа("Изменение", Метаданные.Справочники.Сотрудники);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОткрытьСотрудника",
		"Видимость",
		ЕстьПравоНаСотрудника);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НадписьОтсутствиеКассира2",
		"Видимость",
		Не ЕстьПравоНаСотрудника);
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверкаКассираПриСменеОтветственного()
	
	Если (КассаККМ.ИсточникФИОКассираВЧеке = Перечисления.ИсточникиФИОКассираВЧекеККМ.Ответственный)
			И Не КассаККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		Возврат Истина;
		
	ИначеЕсли РаспределениеНоменклатурыНастроено() Тогда
		
		Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
			РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НастройкиРМКРаспределениеНоменклатуры.КассаККМ КАК КассаККМ
		|ИЗ
		|	Справочник.НастройкиРМК.РаспределениеНоменклатуры КАК НастройкиРМКРаспределениеНоменклатуры
		|ГДЕ
		|	НастройкиРМКРаспределениеНоменклатуры.Ссылка.РабочееМесто = &РабочееМесто
		|	И НЕ НастройкиРМКРаспределениеНоменклатуры.КассаККМ = ЗНАЧЕНИЕ(Справочник.КассыККМ.ПустаяСсылка)
		|	И НЕ НастройкиРМКРаспределениеНоменклатуры.КассаККМ.ИспользоватьБезПодключенияОборудования
		|	И НастройкиРМКРаспределениеНоменклатуры.КассаККМ.ИсточникФИОКассираВЧеке = ЗНАЧЕНИЕ(Перечисление.ИсточникиФИОКассираВЧекеККМ.Ответственный)");
		Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			КассаДляПроверкиОтветственного = Неопределено;
			Возврат Ложь;
		Иначе
			КассаДляПроверкиОтветственного = Результат.Выгрузить().Получить(0).КассаККМ;
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура АвторизацияПоОтветственному()
	
	РежимБлокировкиИнтерфейса = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработкаАвторизации", ЭтотОбъект, Новый Структура());
	ПараметрыОткрытия = Новый Структура("Ответственный, НачальнаяСтраница", Объект.Ответственный, НачальнаяСтраница);
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаАвторизации_РМК", ПараметрыОткрытия,,,,, ОповещениеОЗакрытии, РежимБлокировкиИнтерфейса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАвторизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(Результат.Ответственный) Тогда
			Объект.Ответственный = Результат.Ответственный;
			
			УстановитьОтборОтложенныхЧековПоОтветственному();
			ПересчитатьОтложенныеЧеки();
			УправлениеСтраницейОтложенныеЧеки();
			
			Если ТребуетсяПроверкаКассираПриСменеОтветственного Тогда
				УстановитьВидимостьПредупрежденияОКассире();
			КонецЕсли;
			
			СформироватьЗаголовокНаКлиенте(СтруктураСостояниеКассовойСмены);
			
			ТекстСообщения = НСтр("ru = '%ИмяОтветственного'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОтветственного", Строка(Объект.Ответственный));
			
			ПоказатьОповещениеПользователя(НСтр("ru = 'Выбран ответственный'"),,ТекстСообщения, БиблиотекаКартинок.ПользовательБезНеобходимыхСвойств);
			
			БылаАвторизация = Истина;
			
		Иначе
			ЭтаФорма.Модифицированность = Ложь;
			ЭтаФорма.Закрыть();
		КонецЕсли;
		
	Иначе
		АвторизацияПоОтветственному();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСоставИПанельКонтактнойИнформации(ТекЗаказ)
	
	Если КонтрагентАктивнойСтроки <> ТекущийКонтрагент Тогда
		ТекущийКонтрагент = КонтрагентАктивнойСтроки;
		ОбновитьПанельКонтактнойИнформации();
	КонецЕсли;
	
	Если ТекЗаказ <> Неопределено Тогда
		ЗаполнитьСоставЗаказаИСсылкиНаДокументыНаСервере(ТекЗаказ);
	Иначе
		СоставЗаказа = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСпискаЗаказов()
	
	Если Элементы.СписокЗаказов.ТекущиеДанные <> Неопределено Тогда
		ОбновитьСоставИПанельКонтактнойИнформации(Элементы.СписокЗаказов.ТекущиеДанные.Ссылка);
	Иначе
		ОбновитьСоставИПанельКонтактнойИнформации(Неопределено);
	КонецЕсли;
	ОтключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаЗаказов");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияПанельУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ТекущийКонтрагент);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоЦветамСостоянийСервер()
	
	СостоянияЗаказов.УстановитьУсловноеОформлениеПоЦветамСостояний(
		СписокЗаказов.КомпоновщикНастроек.Настройки.УсловноеОформление,
		Метаданные.Справочники.СостоянияЗаказовПокупателей.ПолноеИмя()
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТекущиеДела()
	
	Если НЕ Параметры.Свойство("ТекущиеДела") Тогда
		Возврат;
	КонецЕсли;
	
	АвтоЗаголовок = Ложь;
	Заголовок = НСтр("ru='Заказы покупателей'");
	СотрудникиПользователя = РегистрыСведений.СотрудникиПользователя.ПолучитьСотрудниковПользователя();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПометкаУдаления", Ложь);
	
	РаботаСОтборами.СоздатьЭлементыМеток(ЭтотОбъект, "Закрыт", "ГруппаОтборЗакрыт", Ложь, НСтр("ru='Не закрытые'"));
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, "Закрыт");
	
	РаботаСОтборами.ПрикрепитьМеткиОтбораИзМассива(ЭтотОбъект, "Ответственный", "ГруппаОтборОтветственный", СотрудникиПользователя);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, "Ответственный");
	
	Если Параметры.Свойство("ПросроченоВыполнение") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='просрочено выполнение'");
		Список.УстановитьОбязательноеИспользование("ПросроченоВыполнение", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПросроченоВыполнение", Истина);
		
	ИначеЕсли Параметры.Свойство("ПросроченаОплата") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='просрочена оплата'");
		Список.УстановитьОбязательноеИспользование("ПросроченаОплата", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПросроченаОплата", Истина);
		
	ИначеЕсли Параметры.Свойство("НаСегодня") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='на сегодня'");
		Список.УстановитьОбязательноеИспользование("НаСегодня", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "НаСегодня", Истина);
		
	ИначеЕсли Параметры.Свойство("ВРаботе") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='в работе'");
		Список.УстановитьОбязательноеИспользование("ЗаказВРаботе", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЗаказВРаботе", Истина);
		
	ИначеЕсли Параметры.Свойство("Новые") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='новые'");
		Список.УстановитьОбязательноеИспользование("ЗаказНовый", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЗаказНовый", Истина);
		
	КонецЕсли;
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверкуИтогов(Команда)
	
	ОчиститьСообщения();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьСверкуИтоговВопросЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Выполнить сверку итогов на эквайринговом терминале?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверкуИтоговВопросЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьСверкуИтоговЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(ОписаниеОповещения, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверкуИтоговЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'Операция выполнена успешно.'");
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнятьСверкуИтогоПриЗакрытииСменыПриИзменении(Элемент)
	
	// РМК
	РабочееМестоКассираВызовСервера.ОбновитьНастройкиРМК(НастройкаРМК, НеПоказыватьПриОткрытииФормуВыбораКассы, СверятьИтогиНаЭТПриЗакрытииСмены);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыЦена" ИЛИ Элемент.ТекущийЭлемент.Имя = "ЗапасыЦена_МК" Тогда
		Если НЕ ПродажаСоСклада И РазрешеноРедактированиеЦенДокументов Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, "Цену можно установить в карточке номенклатуры. В рабочем месте кассира можно менять цену только при продаже с оптового склада.");
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		
		// Строка не редактируется вообще
		Если Элемент.ТекущиеДанные.УслугаАгента Тогда
			Отказ = Истина
		КонецЕсли;
		
		// Поле не редактируется если агентский договор не заполнен
		Если Элемент.ТекущийЭлемент = Элементы.ЗапасыЦенаСАгентскимВознаграждением
			И Элемент.ТекущиеДанные.ДанныеАгентскогоДоговора = Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьЦенуСертификата(Результат, ВыбраннаяСтрока) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ВыбраннаяСтрока.Цена = Результат;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает условное оформления Таб. частей для отображения доступности характеристик
//
&НаСервере
Процедура ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристикИПартий()
			
			НаименованиеПоляХарактеристика = "ЗапасыХарактеристика";
			НаименованиеПоляХарактеристикаОприходование = "ЗапасыХарактеристикаОприходование";
			
			НаименованиеПоляПартия = "ЗапасыПартия";
			НаименованиеПоляПартияОприходование = "ЗапасыПартияОприхдование";

			
			ЗначениеПоиска = ЭтаФорма.Элементы.Найти(НаименованиеПоляХарактеристика);
			ЗначениеПоискаХарактеристикаОприходование = ЭтаФорма.Элементы.Найти(НаименованиеПоляХарактеристикаОприходование);
			
			ЗначениеПоискаПартия = ЭтаФорма.Элементы.Найти(НаименованиеПоляПартия);
			ЗначениеПоискаПартияОприходование = ЭтаФорма.Элементы.Найти(НаименованиеПоляПартияОприходование);

			
			Если НЕ ЗначениеПоиска = Неопределено
				Тогда
				ИмяПоляПроверятьЗаполнениеХарактеристики = "Объект.Запасы.ПроверятьЗаполнениеХарактеристики";
				ИмяПоляИспользоватьХарактеристики = "Объект.Запасы.ИспользоватьХарактеристики";
				ИмяПоляХарактеристики = НаименованиеПоляХарактеристика;
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляИспользоватьХарактеристики, Ложь, ВидСравненияКомпоновкиДанных.Равно);
		
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используется>'"));
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляПроверятьЗаполнениеХарактеристики, Истина, ВидСравненияКомпоновкиДанных.Равно);
				
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
				
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
			КонецЕсли;
			
			Если НЕ ЗначениеПоискаПартия = Неопределено
				Тогда
				ИмяПоляПроверятьЗаполнениеПартии = "Объект.Запасы.ПроверятьЗаполнениеПартий";
				ИмяПоляИспользоватьПартии = "Объект.Запасы.ИспользоватьПартии";
				ИмяПоляПартии = НаименованиеПоляПартия;
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляИспользоватьПартии, Ложь, ВидСравненияКомпоновкиДанных.Равно);
		
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляПартии);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используется>'"));
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляПроверятьЗаполнениеПартии, Истина, ВидСравненияКомпоновкиДанных.Равно);
				
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляПартии);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Партия", Справочники.ПартииНоменклатуры.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляПартии);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
			КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкуДисконтнойКарты()
	
	РозничныеПродажиСервер.ОбновитьКартинкуДисконтнойКарты(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ВестиРасчетыПоДоговорам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ВестиРасчетыПоДоговорам");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Договор",
			"Видимость",
			ВестиРасчетыПоДоговорам);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Договор",
			"Видимость",
			Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОрганизацияЗаказаПодходит(СсылкаНаЗаказ)
	
	Если Константы.УчетПоКомпании.Получить() Тогда
		Результат = Истина;
	ИначеЕсли СсылкаНаЗаказ.Организация = Объект.Организация Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СпозиционироватьНаПоискеНоменклатура()
	
	Если Не ЭтаФорма.ТекущийЭлемент = Элементы.ЗначениеПоискаНоменклатуры Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ЗначениеПоискаНоменклатуры;
		ЗначениеПоискаНоменклатуры = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпозиционироватьНаПоискеШК()
	
	Если Не ЭтаФорма.ТекущийЭлемент = Элементы.ЗначениеПоискаНоменклатурыПоШтрихКоду Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ЗначениеПоискаНоменклатурыПоШтрихКоду;
		ЗначениеПоискаНоменклатурыПоШтрихКоду = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаБыстрыхТоваровОбработкаКоманды(ИмяЭлементаОткрытия = "")
	
	Если ЗначениеЗаполнено(НастройкаРМК) Тогда
		СтруктураПараметров = Новый Структура("Ключ, ИмяСтраницы", НастройкаРМК, ИмяЭлементаОткрытия);
		ОткрытьФорму("Справочник.НастройкиРМК.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана настройка РМК'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСправочникНастройкиРМК()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ОбъектНастройка = НастройкаРМК.ПолучитьОбъект();
		ОбъектНастройка.ПоискНоменклатурыПоШтрихКоду = ПоискНоменклатурыПоШтрихКоду;
		ОбъектНастройка.Записать();
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = Не изменина настройка быстрого поиска. '") + ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьТоварамиЧека(Команда)
	
	Если ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Ссылка) Тогда
		ДополнитьТоварамиЧекаНаСервере(Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТоварамиЧекаНаСервере(СсылкаНаЧек)
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СсылкаНаЧек.Запасы, Объект.Запасы);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	ОбновитьТипНоменклатурыЗапас();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуСпискаДокументовНаКлиенте(Параметр = Неопределено)
	
	Если НужноОбновлятьСписокНаКлиенте() Тогда // Журнал
		
		Если НЕ (ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("НеОбновлятьОстатокВКассе") И Параметр.НеОбновлятьОстатокВКассе) Тогда
			ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_ОбновитьСписок", Истина, Ложь);
			ОбновитьСписокИОстатокВКассе();
			ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
		Иначе
			ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("РМК_ОбновитьСписок", Истина, Ложь);
			Элементы.Список.Обновить();
			ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуСпискаДокументовНаСервере(Параметр = Неопределено)
	
	Если НужноОбновлятьСписокНаСервере() Тогда // Журнал
		
		Если НЕ (ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("НеОбновлятьОстатокВКассе") И Параметр.НеОбновлятьОстатокВКассе) Тогда
			ОбновитьСписокИОстатокВКассе();
		Иначе
			Элементы.Список.Обновить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НужноОбновлятьСписокНаКлиенте()
	
	НужноОбновлять = Элементы.БоковаяПанельПродажи.Видимость
		И ПереключательЖурналБыстрыеТовары = 1;
	
	Возврат НужноОбновлять;
	
КонецФункции

&НаСервере
Функция НужноОбновлятьСписокНаСервере()
	
	НужноОбновлять = Элементы.БоковаяПанельПродажи.Видимость
		И ПереключательЖурналБыстрыеТовары = 1;
	
	Возврат НужноОбновлять;
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокИОстатокВКассе()
	
	Элементы.Список.Обновить();
	ОстатокВКассеСтрока = "" + ПолучитьОстатокДенежныхСредствВКассеККМНаСервере(КассаККМ);
	
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		АгентскиеПлатежиУНФ.УправлениеЭлементамиАгентскогоВознаграждения(ЭтотОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	// УНФ.ОтборыСписка
	СохранитьНастройкиОтборов();
	// Конец УНФ.ОтборыСписка
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ПереключательЖурналБыстрыеТовары", ПереключательЖурналБыстрыеТовары);
	ХранилищеНастроекДанныхФорм.Сохранить("ЧекККМФормаРМК_НастройкиФормы", "СтруктураНастроек", СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиФормы()
	
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить("ЧекККМФормаРМК_НастройкиФормы", "СтруктураНастроек");
	
	Если СтруктураНастроек = Неопределено Тогда
		ПереключательЖурналБыстрыеТовары = 3;
		Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.ОсновныеРеквизиты;
	ИначеЕсли ТипЗнч(СтруктураНастроек) = Тип("Структура") 
		И СтруктураНастроек.Свойство("ПереключательЖурналБыстрыеТовары") Тогда
		ЗначениеПереключательЖурналБыстрыеТовары = СтруктураНастроек.ПереключательЖурналБыстрыеТовары;
		Если ЗначениеЗаполнено(ЗначениеПереключательЖурналБыстрыеТовары) Тогда
			ПереключательЖурналБыстрыеТовары = ЗначениеПереключательЖурналБыстрыеТовары;
			Если ПереключательЖурналБыстрыеТовары = 1 Тогда // Журнал
 				Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.Журнал;
			ИначеЕсли ПереключательЖурналБыстрыеТовары = 2 Тогда // Быстрые товары
				Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.БыстрыеТовары;
			ИначеЕсли ПереключательЖурналБыстрыеТовары = 3 Тогда // Основные реквизиты
				Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.ОсновныеРеквизиты;
			КонецЕсли;
		Иначе
			ПереключательЖурналБыстрыеТовары = 3;
			Элементы.СтраницыЖурналИБыстрыеТовары.ТекущаяСтраница = Элементы.ОсновныеРеквизиты;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, есть ли оплаты картами, которые прошли через
// подключенный эквайринговый терминал
//
// Возвращаемое значение
//  Булево - Истина, если есть хотя бы одна строка с признаками
//           оплаты через терминал
&НаКлиенте
Функция ЕстьОплатыЧерезЭТ()
	
	Для Каждого СтрокаОплаты Из Объект.БезналичнаяОплата Цикл
		Если ЗначениеЗаполнено(СтрокаОплаты.НомерЧекаЭТ)
			ИЛИ ЗначениеЗаполнено(СтрокаОплаты.СсылочныйНомер) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Определяет количество отложенных чеков
// по текущей кассовой смене и записывает в реквизит
// "КоличествоОтложенныхЧеков".
//
&НаСервере
Процедура ПересчитатьОтложенныеЧеки()
	
	Если Не СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
		КоличествоОтложенныхЧеков = 0;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ПустаяСсылка)
	|	И ЧекККМ.КассоваяСмена = &КассоваяСмена
	|	И НЕ ЧекККМ.ПометкаУдаления
	|	И НЕ ЧекККМ.Проведен
	|	И ЧекККМ.Ответственный = &Ответственный");
	Запрос.УстановитьПараметр("КассоваяСмена", СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("Ответственный", Объект.Ответственный);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	КоличествоОтложенныхЧеков = Результат.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеСтраницейОтложенныеЧеки()
	
	ТекущаяСтраница = Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница;
	ТекущаяВидимость = Элементы.ГруппаОтложенные.Видимость;
	
	Элементы.ГруппаОтложенные.Видимость = КоличествоОтложенныхЧеков > 0;
	
	Если Элементы.ГруппаОтложенные.Видимость <> ТекущаяВидимость Тогда
		Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница = ТекущаяСтраница;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборОтложенныхЧековПоКассовойСмене()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокОтложенныхЧеков,
		"КассоваяСмена",
		Объект.КассоваяСмена,
		ВидСравненияКомпоновкиДанных.Равно,,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборОтложенныхЧековПоОтветственному()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокОтложенныхЧеков,
		"Ответственный",
		Объект.Ответственный,
		ВидСравненияКомпоновкиДанных.Равно,,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборОтложенныхЧековПоСсылке()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокОтложенныхЧеков,
		"Ссылка",
		Объект.Ссылка,
		ВидСравненияКомпоновкиДанных.НеРавно,,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСпискаОтложенныхЧеков()
	
	ТекЧекККМ = Элементы.СписокОтложенныхЧеков.ТекущаяСтрока;
	Если ТекЧекККМ <> Неопределено Тогда
		ЗаполнитьСоставОтложенногоЧека(ТекЧекККМ);
	Иначе
		СоставОтложенногоЧека = "";
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаОтложенныхЧеков");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомиссиюЭквайрера()
	
	СписокКолонок = "ВидОплаты, ВидПлатежнойКарты, ЭквайринговыйТерминал";
	ТаблицаКарт = Объект.БезналичнаяОплата.Выгрузить(, СписокКолонок);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаКарт.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	ТаблицаКарт.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал
	|ПОМЕСТИТЬ Карты
	|ИЗ
	|	&ТаблицаКарт КАК ТаблицаКарт
	|ГДЕ
	|	ТаблицаКарт.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Карты.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	Карты.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссии КАК ПроцентКомиссии
	|ИЗ
	|	Карты КАК Карты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы.ВидыПлатежныхКарт КАК ЭквайринговыеТерминалыВидыПлатежныхКарт
	|		ПО Карты.ЭквайринговыйТерминал = ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка
	|			И Карты.ВидПлатежнойКарты = ЭквайринговыеТерминалыВидыПлатежныхКарт.ВидПлатежнойКарты");
	Запрос.УстановитьПараметр("ТаблицаКарт", ТаблицаКарт);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("ВидПлатежнойКарты, ЭквайринговыйТерминал",
			Выборка.ВидПлатежнойКарты, Выборка.ЭквайринговыйТерминал);
		НайденныеСтроки = Объект.БезналичнаяОплата.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаОплаты Из НайденныеСтроки Цикл
			СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * Выборка.ПроцентКомиссии/100;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки1(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область МобильныйКлиент

&НаКлиенте
Процедура ВыборИзСпискаБыстрыхТоваровМКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ВыбранБыстрыйТовар(Неопределено, Результат);
		НастроитьЗакладкиПродажиМК();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйЧек(Команда)
	
	Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница = Элементы.ГруппаПродажаМК;
	Элементы.ГруппаСтраницыПродажаМК.ТекущаяСтраница = Элементы.ГруппаНетДанных;
	Элементы.ПечатьТоварногоЧека_МК.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация1Нажатие(Элемент)
	
	ПоискПоШтрихкоду(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация2Нажатие(Элемент)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДобавлениеНоменклатуры_МК", ЭтотОбъект);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", Новый Структура("РежимВыбора, ТекущаяСтрока", Истина, ВыбранныйТовар), ЭтаФорма,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеНоменклатуры_МК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		НоваяСтрока = Объект.Запасы.Добавить();
		НоваяСтрока.Номенклатура = Результат;
		Элементы.ЗапасыМК.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		ЗапасыНоменклатураПриИзменении_МК(Неопределено);
		НастроитьЗакладкиПродажиМК();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаПоискаНоменклатуры_МК_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ЗначениеПоискаНоменклатуры = Результат;
		ЗначениеПоискаНоменклатурыПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоискНоменклатурыНажатие(Элемент)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ФормаПоискаНоменклатуры_МК_Завершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаПоискаНоменклатуры_МК",, ЭтаФорма,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоискНоменклатуры1Нажатие(Элемент)
	
	Если ЗначениеЗаполнено(НастройкаРМК) Тогда
		СтруктураПараметров = Новый Структура("Ключ", НастройкаРМК);
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборИзСпискаБыстрыхТоваровМКЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.НастройкиРМК.Форма.ФормаЭлемента", СтруктураПараметров, ЭтотОбъект, УникальныйИдентификатор,,, ОповещениеОЗакрытии);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана настройка РМК'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказОчистка(Элемент, СтандартнаяОбработка)
	
	ИнициализироватьНовыйЧек();
	
КонецПроцедуры

#КонецОбласти

#Область ОстаткиИРезервы

&НаКлиенте
Процедура ОстаткиИРезервы(Команда)
	
	РежимОстаткиИРезервы = Не РежимОстаткиИРезервы;
	
	Если Элементы.ГруппаПродажаИВозврат.ТекущаяСтраница.Имя = "ГруппаПродажа" Тогда
		Элементы.ОстаткиИРезервы.Пометка = Не Элементы.ОстаткиИРезервы.Пометка;
	Иначе
		Элементы.ЗапасыМККонтекстноеМенюОстаткиИРезервы.Пометка = Не Элементы.ЗапасыМККонтекстноеМенюОстаткиИРезервы.Пометка;
	КонецЕсли;
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	
	Если РежимОстаткиИРезервы Тогда ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере() КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКолонокВРазрезеЗапасов()
	
	Если Не ЭтоМобильныйКлиент Тогда
		Элементы.ЗапасыКонтекстноеМенюГруппаРаботаССтроками.Видимость = РежимОстаткиИРезервы;
		Элементы.ГруппаОстатки.Видимость = РежимОстаткиИРезервы;
		Элементы.ЗапасыКонтекстноеМенюГруппаРаботаССтроками.Видимость = РежимОстаткиИРезервы;
		
		Если РежимОстаткиИРезервы Тогда
			Элементы.ЗапасыСтруктурнаяЕдиница.Видимость = Ложь;
		Иначе
			Элементы.ЗапасыСтруктурнаяЕдиница.Видимость = Не СкладВШапке;
		КонецЕсли;
		
		Элементы.ЗапасыСтруктурнаяЕдиницаДляРежимаОстатки.Видимость = РежимОстаткиИРезервы И РазрешитьСкладыВТабличныхЧастях;
		
		Если РежимОстаткиИРезервы Тогда
			Если КэшЗначений.УчетПоЯчейкам И Элементы.ЗапасыЯчейка.Видимость Тогда
				Элементы.ЗапасыЯчейка.Видимость = Ложь;
				Элементы.ЗапасыЯчейкаДляРежимаОстатки.Видимость = РазрешитьСкладыВТабличныхЧастях;
			КонецЕсли;
		Иначе
			Если КэшЗначений.УчетПоЯчейкам И Элементы.ЗапасыЯчейкаДляРежимаОстатки.Видимость Тогда
				Элементы.ЗапасыЯчейка.Видимость = РазрешитьСкладыВТабличныхЧастях;
				Элементы.ЗапасыЯчейкаДляРежимаОстатки.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаОстатки_МК.Видимость = РежимОстаткиИРезервы;
		Элементы.ЗапасыМККонтекстноеМенюГруппаРаботаССтроками.Видимость = РежимОстаткиИРезервы;
	КонецЕсли;
	
	Элементы.ГруппаЗаполнитьПоВсемСкладам.Видимость = Не СкладВШапке Или РежимОстаткиИРезервы;
	Элементы.ЗапасыКонтекстноеМенюЗаполнитьПоОстаткамИРезервамВсеСклады.Видимость = Не СкладВШапке Или РежимОстаткиИРезервы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если Параметры.ВыбранноеПоле = "ЗапасыДоступно" Тогда
		
		Если Результат.Значение = "ОтчетОстаткиНаСкладах" Тогда
			
			Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда Возврат КонецЕсли;
			
			Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "ПоМестамХранения");
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
			ОтборРасшифровки = Новый Соответствие;
			ОтборРасшифровки.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
			ОтборРасшифровки.Вставить("Характеристика", ТекущиеДанные.Характеристика);
			ОтборРасшифровки.Вставить("СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
			ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
			
			ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия);
			
		Иначе
			
			Если ТипЗнч(Результат.Значение) = Тип("Структура") И Результат.Значение.Свойство("Склад") 
				И Не ТекущиеДанные.СтруктурнаяЕдиница = Результат.Значение.Склад Тогда
				
				ТекущиеДанные.СтруктурнаяЕдиница = Результат.Значение.Склад;
				
				СтруктураОстатков = СвободныйОстатокПоСтруктурнойЕдинице(
					ТекущиеДанные.СтруктурнаяЕдиница,
					ТекущиеДанные.Номенклатура,
					ТекущиеДанные.Характеристика,
					ТекущиеДанные.Партия,
					ТекущиеДанные.ЕдиницаИзмерения);
				
				ТекущиеДанные.Доступно = СтруктураОстатков.КоличествоРезерв + СтруктураОстатков.КоличествоСвободно;
				
				ЗаполнитьЗначенияОстатковПоНоменклатуре(ТекущиеДанные);
				
			Иначе
				
				Если Не ТипЗнч(Результат.Значение) = Тип("Структура") Тогда
					ПоказатьЗначение(,Результат.Значение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗначение(,Результат.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияОстатковПоНоменклатуре(ТекущиеДанные)
	
	Если РежимОстаткиИРезервы Тогда
		СтруктураДанные = Новый Структура;
		
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	ТекущиеДанные.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	ТекущиеДанные.Характеристика);
		СтруктураДанные.Вставить("Партия", 	ТекущиеДанные.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", ТекущиеДанные.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", ТекущиеДанные.ИспользоватьПартии);
		
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные, ТекущиеДанные.Номенклатура);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОстатки(Команда)
	ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДублиСтрок(Команда)
	
	СтрокаТабличнойЧасти = ?(ЭтоМобильныйКлиент, Элементы.ЗапасыМК.ТекущиеДанные, Элементы.Запасы.ТекущиеДанные);
	ИмяДекорации = ?(ЭтоМобильныйКлиент, "ДекорацияОтборПоДублямМК", "ДекорацияОтборПоДублям");
	ИмяКоманды = ?(ЭтоМобильныйКлиент, "ЗапасыМККонтекстноеМенюПоказатьДублиСтрок", "ЗапасыКонтекстноеМенюПоказатьДублиСтрок");
	ИмяТЧ = ?(ЭтоМобильныйКлиент, "ЗапасыМК", "Запасы");
	
	Если Не Элементы[ИмяДекорации].Видимость Тогда
		
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, Партия"
		, СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрокаТабличнойЧасти.Партия);
		
		НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() <=1 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Дубли строки не найдены.'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			Возврат
		КонецЕсли;
		
		Если Элементы.Запасы.ОтборСтрок <> Неопределено Тогда
			Элементы.Запасы.ОтборСтрок = Неопределено;
		КонецЕсли;
		
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("Номенклатура, Характеристика, Партия"
		, СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрокаТабличнойЧасти.Партия);
		
		Элементы[ИмяКоманды].Пометка = Истина;
		
		Элементы[ИмяДекорации].Заголовок = ИнформацияОбОтборе(СтрокаТабличнойЧасти.НомерСтроки);
		Элементы[ИмяДекорации].Видимость = Истина;
		
		Элементы[ИмяТЧ].ОтборСтрок = ПараметрыОтбора;
		
	Иначе
		Элементы[ИмяКоманды].Пометка = Ложь;
		Элементы[ИмяДекорации].Видимость = Ложь;
		Элементы[ИмяТЧ].ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтборПоДублямОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.ЗапасыМККонтекстноеМенюПоказатьДублиСтрок.Пометка = Ложь;
		Элементы.ДекорацияОтборПоДублямМК.Видимость = Ложь;
		Элементы.ЗапасыМК.ОтборСтрок = Неопределено;
	Иначе
		Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтрок.Пометка = Ложь;
		Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
		Элементы.Запасы.ОтборСтрок = Неопределено;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ИнформацияОбОтборе(НомерСтрокиПредставление)
	ТекстСообщения = НСтр("ru = 'Дубли строки '");
	Возврат НоменклатураВДокументахСервер.ИнформацияОбОтборе(ТекстСообщения + Строка(НомерСтрокиПредставление));
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные = Неопределено, НоменклатураОтбора = Неопределено)
	
	НоменклатураВДокументахСервер.ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиЧекККМ_РМК(Объект, СтруктураДанные, НоменклатураОтбора);
	НоменклатураВДокументахСервер.ЗаполнитьПризнакТипаЗапасНоменклатуры(Объект);
	
КонецПроцедуры

&НаСервере
Функция СписокДокументовПоЗаказу(ТипОперации, СтруктураПараметров)
	Возврат НоменклатураВДокументахСервер.СписокДокументовПоЗаказу(Объект, ТипОперации,СтруктураПараметров);
КонецФункции

&НаКлиенте
Процедура ОрганизацияИзККМ(Команда)
	
	Элементы.ОтборОрганизацияКонтекстноеМенюОрганизацияИзККМ.Пометка = Не Элементы.ОтборОрганизацияКонтекстноеМенюОрганизацияИзККМ.Пометка;
	ИспользоватьНастройкиПоУмолчанию = Элементы.ОтборОрганизацияКонтекстноеМенюОрганизацияИзККМ.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтветственного(Команда)
	АвторизацияПоОтветственному();
КонецПроцедуры

#КонецОбласти

#Область РаспределениеПродаж

&НаСервереБезКонтекста
Функция МожноСоздатьЧекНаВозврат(пЧекККМ, пСуммаЧекаККМ)
	
	Создавать = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЧекККМВозврат.СуммаДокумента) КАК СуммаДокумента
		|ИЗ
		|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
		|ГДЕ
		|	ЧекККМВозврат.Проведен
		|	И ЧекККМВозврат.ЧекККМ = &ЧекККМ";
	
	Запрос.УстановитьПараметр("ЧекККМ", пЧекККМ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Создавать = ВыборкаДетальныеЗаписи.СуммаДокумента < пСуммаЧекаККМ;
	КонецЕсли;
	
	Возврат Создавать;
	
КонецФункции

&НаСервере
Функция ЗагрузитьСледующийРаспределенныйЧек(ЭтоПервыйЧек = Ложь)
	
	Если СписокРаспределенныхЧеков[0].Значение = Объект.Ссылка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеВДанныеФормы(СписокРаспределенныхЧеков[0].Значение.ПолучитьОбъект(), Объект);
	Если КассаККМ <> Объект.КассаККМ Тогда
		КассаККМ = Объект.КассаККМ;
		КассаККМПриИзмененииНаСервере(Новый Структура("ВалютаДенежныхСредств, РежимРаспределения"));
		УстановитьОрганизациюПоВладельцуККМ();
		СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
		Если Объект.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН Тогда
			ЗаполнитьПатент();
		Иначе
			Объект.Патент = Справочники.Патенты.ПустаяСсылка();
		КонецЕсли;
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(ПолучитьСтруктуруНадписиЦеныИВалютаНаСервере());
	КонецЕсли;
	
	Если Объект.Договор.Организация <> Объект.Организация Тогда
		Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация);
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	ОбновитьТипНоменклатурыЗапас();
	
	Возврат Истина;
	
КонецФункции

// Возвращает Истина, если в РС "РаспределениеНоменклатуры"
// присутствуют записи по текущему рабочему месту
//
// Возвращаемое значение - Булево
&НаСервере
Функция РаспределениеНоменклатурыНастроено()
	
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиРМКРаспределениеНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРМК.РаспределениеНоменклатуры КАК НастройкиРМКРаспределениеНоменклатуры
	|ГДЕ
	|	НастройкиРМКРаспределениеНоменклатуры.Ссылка.РабочееМесто = &РабочееМесто");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВосстановитьЗапасыИзРаспределенныхЧеков(СкидкиИзменились = Ложь)
	
	Если СписокРаспределенныхЧеков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокРаспределенныхЧеков Цикл
		
		Если ЭлементСписка.Значение = Объект.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЭлементСписка.Значение.Запасы, Объект.Запасы);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЭлементСписка.Значение.СкидкиНаценки, Объект.СкидкиНаценки);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЭлементСписка.Значение.АкцизныеМарки, Объект.АкцизныеМарки);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЭлементСписка.Значение.СерииНоменклатуры, Объект.СерииНоменклатуры);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЭлементСписка.Значение.БонусныеБаллыКНачислению, Объект.БонусныеБаллыКНачислению);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЭлементСписка.Значение.ДобавленныеНаборы, Объект.ДобавленныеНаборы);
		
		НачатьТранзакцию();
		
		Попытка
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ЧекККМ");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементСписка.Значение);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			ЧекОбъект = ЭлементСписка.Значение.ПолучитьОбъект();
			ЧекОбъект.Комментарий = НСтр("ru = '#Отменено распределение продаж'");
			ЧекОбъект.Записать();
			ЧекОбъект.УстановитьПометкуУдаления(Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			// Сообщение об ошибке не выводится потому, что документы все равно будут удалены позже (при закрытии смены)
			
		КонецПопытки;
		
	КонецЦикла;
	
	СписокРаспределенныхЧеков.Очистить();
	
	// Проверка скидок
	СкидкиИзменились = СкидкиИзменились();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуКатегориюПоСтроке(НоваяСтрока, ГруппыКатегории)
	
	Если ЗначениеЗаполнено(НоваяСтрока.ГруппаКатегория) Тогда
		ИмяКолонки = "ГруппаКатегория";
	ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.НоменклатураНабора) Тогда
		ИмяКолонки = "НоменклатураНабора";
	Иначе
		ИмяКолонки = "Номенклатура";
	КонецЕсли;
	
	Если ГруппыКатегории = 0 Или ИмяКолонки = "ГруппаКатегория" Тогда
		НоваяСтрока.ГруппаКатегория = НоваяСтрока[ИмяКолонки].Родитель;
	Иначе
		НоваяСтрока.ГруппаКатегория = НоваяСтрока[ИмяКолонки].КатегорияНоменклатуры;
	КонецЕсли;
	
	Если Не НоваяСтрока.ГруппаКатегория.Пустая() Тогда
		НоваяСтрока.Уровень = НоваяСтрока.ГруппаКатегория.Уровень();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаспределенныеЧеки(ЗапасыДляРаспределения)
	
	КопияСкидкиНаценки				= Объект.СкидкиНаценки.Выгрузить();
	КопияАкцизныеМарки				= Объект.АкцизныеМарки.Выгрузить();
	КопияСерииНоменклатуры				= Объект.СерииНоменклатуры.Выгрузить();
	КопияБонусныеБаллыКНачислению	= Объект.БонусныеБаллыКНачислению.Выгрузить();
	КопияДобавленныеНаборы			= Объект.ДобавленныеНаборы.Выгрузить();
	
	Объект.Запасы.Очистить();
	Объект.СкидкиНаценки.Очистить();
	Объект.АкцизныеМарки.Очистить();
	Объект.СерииНоменклатуры.Очистить();
	Объект.БонусныеБаллыКНачислению.Очистить();
	Объект.ДобавленныеНаборы.Очистить();
	
	// Реквизиты шапки
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("АдресЭП");
	СтруктураРеквизитов.Вставить("Телефон");
	СтруктураРеквизитов.Вставить("Контрагент");
	СтруктураРеквизитов.Вставить("Договор");
	СтруктураРеквизитов.Вставить("Заказ");
	СтруктураРеквизитов.Вставить("Ответственный");
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Объект);
	
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаЗапасов Из ЗапасыДляРаспределения Цикл
		
		// Надо ли формировать новый чек
		Если (ЗначениеЗаполнено(СтрокаЗапасов.КассаККМ)
			И СтрокаЗапасов.КассаККМ <> КассаККМ)
			Или (ЗначениеЗаполнено(СтрокаЗапасов.СпециальныйНалоговыйРежим)
			И (СтрокаЗапасов.СпециальныйНалоговыйРежим <> Объект.СпециальныйНалоговыйРежим
			Или СтрокаЗапасов.Патент <> Объект.Патент)) Тогда
			
			Если Объект.Запасы.Количество() > 0 Тогда
				Объект.СуммаДокумента = Объект.Запасы.Итог("Всего");
				КассаККМПриИзмененииНаСервере(Новый Структура("ВалютаДенежныхСредств, РежимРаспределения"));
				ДокОбъект = РеквизитФормыВЗначение("Объект");
				ДокОбъект.ДополнительныеСвойства.Вставить("НеПроверятьСмену");
				Если Не ДокОбъект.ПроверитьЗаполнение() Тогда
					ЕстьОшибки = Истина;
				КонецЕсли;
				Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
				СписокРаспределенныхЧеков.Добавить(Объект.Ссылка);
				ИнициализироватьНовыйЧек();
				ЗаполнитьЗначенияСвойств(Объект, СтруктураРеквизитов);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаЗапасов.КассаККМ)
				И СтрокаЗапасов.КассаККМ <> КассаККМ Тогда
				КассаККМ = СтрокаЗапасов.КассаККМ;
				ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(ПолучитьСтруктуруНадписиЦеныИВалютаНаСервере());
				УстановитьОрганизациюПоВладельцуККМ();
				Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
				Если Объект.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН Тогда
					ЗаполнитьПатент();
				Иначе
					Объект.Патент = Справочники.Патенты.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаЗапасов.СпециальныйНалоговыйРежим)
				И (СтрокаЗапасов.СпециальныйНалоговыйРежим <> Объект.СпециальныйНалоговыйРежим
				Или СтрокаЗапасов.Патент <> Объект.Патент) Тогда
				Объект.СпециальныйНалоговыйРежим = СтрокаЗапасов.СпециальныйНалоговыйРежим;
				Объект.Патент = СтрокаЗапасов.Патент;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрокаЗапасов = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасов, СтрокаЗапасов);
		
		// Скидки наценки
		МассивНайденныхСтрок = КопияСкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", НоваяСтрокаЗапасов.КлючСвязи));
		Если МассивНайденныхСтрок.Количество() > 0 Тогда
			Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
				НоваяСтрока = Объект.СкидкиНаценки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
				КопияСкидкиНаценки.Удалить(НайденнаяСтрока);
			КонецЦикла;
		КонецЕсли;
		
		// Акцизные марки
		МассивНайденныхСтрок = Новый Массив;
		Для Каждого СтрокаМарок Из КопияАкцизныеМарки Цикл
			Марка = СтрокаМарок.АкцизнаяМарка;
			Если Марка.Номенклатура = НоваяСтрокаЗапасов.Номенклатура
				И Марка.Характеристика = НоваяСтрокаЗапасов.Характеристика
				И ?(ЗначениеЗаполнено(НоваяСтрокаЗапасов.Партия), Марка.Серия = НоваяСтрокаЗапасов.Партия, Марка.Серия = Неопределено) Тогда
				НоваяСтрока = Объект.АкцизныеМарки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМарок);
				МассивНайденныхСтрок.Добавить(СтрокаМарок);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаКУдалению Из МассивНайденныхСтрок Цикл
			КопияАкцизныеМарки.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		// Серии номенклатуры
		МассивНайденныхСтрок = КопияСерииНоменклатуры.НайтиСтроки(Новый Структура("КлючСвязи", НоваяСтрокаЗапасов.КлючСвязи));
		Если МассивНайденныхСтрок.Количество() > 0 Тогда
			Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
				НоваяСтрока = Объект.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
				КопияСерииНоменклатуры.Удалить(НайденнаяСтрока);
			КонецЦикла;
		КонецЕсли;
		
		// Бонусные баллы
		МассивНайденныхСтрок = КопияБонусныеБаллыКНачислению.НайтиСтроки(Новый Структура("КлючСвязи", НоваяСтрокаЗапасов.КлючСвязи));
		Если МассивНайденныхСтрок.Количество() > 0 Тогда
			Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
				НоваяСтрока = Объект.БонусныеБаллыКНачислению.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
				КопияБонусныеБаллыКНачислению.Удалить(НайденнаяСтрока);
			КонецЦикла;
		КонецЕсли;
		
		// Наборы
		Если ЗначениеЗаполнено(НоваяСтрокаЗапасов.НоменклатураНабора) Тогда
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("НоменклатураНабора", НоваяСтрокаЗапасов.НоменклатураНабора);
			СтруктураПоиска.Вставить("ХарактеристикаНабора", НоваяСтрокаЗапасов.ХарактеристикаНабора);
			МассивНайденныхСтрок = КопияДобавленныеНаборы.НайтиСтроки(СтруктураПоиска);
			Если МассивНайденныхСтрок.Количество() > 0 Тогда
				Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
					НоваяСтрока = Объект.ДобавленныеНаборы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
					КопияДобавленныеНаборы.Удалить(НайденнаяСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.Запасы.Количество() > 0 Тогда
		Объект.СуммаДокумента = Объект.Запасы.Итог("Всего");
		КассаККМПриИзмененииНаСервере(Новый Структура("ВалютаДенежныхСредств, РежимРаспределения"));
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.ДополнительныеСвойства.Вставить("НеПроверятьСмену");
		Если Не ДокОбъект.ПроверитьЗаполнение() Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		СписокРаспределенныхЧеков.Добавить(Объект.Ссылка);
		ЗаполнитьПризнакиИспользованияХарактеристик();
		ОбновитьТипНоменклатурыЗапас();
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ВосстановитьЗапасыИзРаспределенныхЧеков();
		Если КассаККМ <> КассаККМПриОткрытии Тогда
			КассаККМ = КассаККМПриОткрытии;
			КассаККМПриИзмененииНаСервере(Новый Структура("ВалютаДенежныхСредств, РежимРаспределения"));
			УстановитьОрганизациюПоВладельцуККМ();
		КонецЕсли;
		Объект.ЭквайринговыйТерминал = ЭквайринговыйТерминалПриОткрытии;
		Объект.СпециальныйНалоговыйРежим = НалоговыйРежимПриОткрытии;
		Объект.Патент = ПатентПриОткрытии;
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(ПолучитьСтруктуруНадписиЦеныИВалютаНаСервере());
		ЗапретПересчетаСкидок = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРаспределениеПродаж(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НастроитьРаспределениеПродаж",
		"Видимость",
		Ложь);
	ПроверитьСостояниеКассовыхСмен();
	ОбработатьКассыККМ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКассыККМ()
	
	Если СписокККМКОбработке.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработатьКассыККМЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Есть смены с момента открытия которых истекло более 24 часов.
								  |Для продолжения работы в режиме распределения продаж необходимо закрыть их.
								  |Закрыть смены?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru= 'Распределение продаж отключено'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКассыККМЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		КассаККМПриОткрытии = КассаККМ;
		Для Каждого КассаКОбработке Из СписокККМКОбработке Цикл
			КассаККМ = КассаКОбработке.Значение;
			ЗакрытьКассовуюСмену(Неопределено);
		КонецЦикла;
		СписокККМКОбработке.Очистить();
		КассаККМ = КассаККМПриОткрытии;
		
		Если Не РаспределениеНоменклатурыНастроено Тогда
			РаспределениеНоменклатурыНастроено = Истина;
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"НастроитьРаспределениеПродаж",
			"Видимость",
			Истина);
			
		РаспределениеНоменклатурыНастроено = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьРаспределенныеЧеки(Результат)
	
	Если Не Элементы.ГруппаГрупповоеПробитиеЧеков.Видимость Тогда
		Элементы.ГруппаГрупповоеПробитиеЧеков.Видимость = Истина;
		Элементы.ГруппаПродажаИВозврат.Видимость = Ложь;
	КонецЕсли;
	
	Объект.ФормаОплаты = ТипыДенежныхСредствНаличные;
	
	Если СписокРаспределенныхЧеков.Количество() > 1 Тогда
		Объект.ПолученоНаличными = Объект.СуммаДокумента;
		Результат.Наличными = Результат.Наличными - Объект.ПолученоНаличными;
	Иначе
		Объект.ПолученоНаличными = Результат.Наличными;
		Сдача = Формат(Объект.ПолученоНаличными - Объект.СуммаДокумента, "ЧДЦ=2");
	КонецЕсли;
	
	КоличествоБонусов = КоличествоБонусов + Объект.БонусныеБаллыКНачислению.Итог("КоличествоБонусныхБаллов");
	Если КоличествоБонусов > 0 Тогда
		НачисленныеБонусы = СтрШаблон(НСтр("ru = 'Начислено бонусов: %1 б.'"), КоличествоБонусов);
	Иначе
		НачисленныеБонусы = "";
	КонецЕсли;
	
	Если Не Объект.ОперацияСДенежнымиСредствами Тогда
		Объект.СуммаДокумента = Объект.Запасы.Итог("Всего");
	КонецЕсли;
	
	Оплачено = Объект.ПолученоНаличными + Объект.БезналичнаяОплата.Итог("Сумма") + Объект.Предоплата.Итог("СуммаРасчетов");
	СуммаСдачи = ?(Оплачено = 0, 0, Оплачено - Объект.СуммаДокумента);
	
	СуммаСкидки = Объект.Запасы.Итог("СуммаСкидкиНаценки") + Объект.Запасы.Итог("СуммаАвтоматическойСкидки");
	СуммаЧекаБезСкидки = Объект.СуммаДокумента + СуммаСкидки;
	
	СформироватьТоварныйЧек = Результат.СформироватьТоварныйЧек;
	ПробитьЧекВыполнить(Команды.Найти("ПробитьЧек"), СформироватьТоварныйЧек);
	
	Если СписокРаспределенныхЧеков.Количество() > 0 Тогда
		СписокРаспределенныхЧеков.Удалить(0);
	КонецЕсли;
	Если СписокРаспределенныхЧеков.Количество() > 0 Тогда
		ЗагрузитьСледующийРаспределенныйЧек();
		ПроверитьСостояниеКассовойСмены();
		ОплатитьРаспределенныеЧеки(Результат);
	Иначе
		КассаККМ = КассаККМПриОткрытии;
		КассаККМПриИзмененииНаСервере(Новый Структура("ВалютаДенежныхСредств"));
		УстановитьОрганизациюПоВладельцуККМ();
		Объект.ЭквайринговыйТерминал = ЭквайринговыйТерминалПриОткрытии;
		Объект.СпециальныйНалоговыйРежим = НалоговыйРежимПриОткрытии;
		Объект.Патент = ПатентПриОткрытии;
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(ПолучитьСтруктуруНадписиЦеныИВалютаНаКлиенте());
		ЗапретПересчетаСкидок = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаГрупповоеПробитиеЧеков.Видимость = Ложь;
	Элементы.ГруппаПродажаИВозврат.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСостояниеКассовыхСмен()
	
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиРМКРаспределениеНоменклатуры.КассаККМ КАК КассаККМ
	|ИЗ
	|	Справочник.НастройкиРМК.РаспределениеНоменклатуры КАК НастройкиРМКРаспределениеНоменклатуры
	|ГДЕ
	|	НастройкиРМКРаспределениеНоменклатуры.Ссылка.РабочееМесто = &РабочееМесто
	|	И НЕ НастройкиРМКРаспределениеНоменклатуры.КассаККМ = ЗНАЧЕНИЕ(Справочник.КассыККМ.ПустаяСсылка)");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка указанных в настройках касс
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СостояниеККМ = ПолучитьСостояниеКассовойСменыНаСервере(Выборка.КассаККМ);
		Если СостояниеККМ.СменаОткрыта Тогда
			ТекстСообщения = "";
			Если Не РозничныеПродажиСервер.СменаОткрыта(СостояниеККМ.ОтчетОРозничныхПродажах, ТекущаяДатаСеанса(), ТекстСообщения) Тогда
				Если СтрНайти(ТекстСообщения, "24") > 0 Тогда
					СписокККМКОбработке.Добавить(Выборка.КассаККМ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка выбранной в РМК кассы
	Если ЗначениеЗаполнено(КассаККМ) И Элементы.ЗакрытьСменуМК.Видимость Тогда
		СписокККМКОбработке.Вставить(0, КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределениеПродажПриОткрытии()
	
	РаспределениеНоменклатурыНастроено = РаспределениеНоменклатурыНастроено();
	Если РаспределениеНоменклатурыНастроено Тогда
		ПроверитьСостояниеКассовыхСмен();
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"НастроитьРаспределениеПродаж",
			"Видимость",
			Ложь);
	Иначе
		СписокККМКОбработке.Очистить();
	КонецЕсли;
	
КонецПроцедуры

// Распределяет ТЧ "Запасы" по ККТ и налоговым режимам,
// создает Чеки ККМ, проводит их и сохраняет список в реквизит формы.
//
&НаСервере
Процедура РаспределитьЗапасыПоЧекам()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиРМК.ГруппыКатегории КАК ГруппыКатегории
	|ИЗ
	|	Справочник.НастройкиРМК КАК НастройкиРМК
	|ГДЕ
	|	НастройкиРМК.РабочееМесто = &РабочееМесто");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ГруппыКатегории = Результат.ГруппыКатегории;
	Иначе
		Возврат;
	КонецЕсли;
	
	ТаблицаНоменклатуры = Объект.Запасы.Выгрузить(,"Номенклатура, НоменклатураНабора");
	ТаблицаИерархии = ТаблицаНоменклатуры.Скопировать(Новый Массив);
	ОписаниеТипа = ?(ГруппыКатегории = 0, "СправочникСсылка.Номенклатура", "СправочникСсылка.КатегорииНоменклатуры");
	ТаблицаИерархии.Колонки.Добавить("ГруппаКатегория", Новый ОписаниеТипов(ОписаниеТипа));
	ТаблицаИерархии.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
		НоваяСтрока = ТаблицаИерархии.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНоменклатуры);
		ЗаполнитьГруппуКатегориюПоСтроке(НоваяСтрока, ГруппыКатегории);
		Пока Не НоваяСтрока.Уровень = 0 Цикл
			ПредыдущаяСтрока = НоваяСтрока;
			НоваяСтрока = ТаблицаИерархии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПредыдущаяСтрока);
			ЗаполнитьГруппуКатегориюПоСтроке(НоваяСтрока, ГруппыКатегории);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаИерархии.Номенклатура КАК Номенклатура,
	|	ТаблицаИерархии.ГруппаКатегория КАК ГруппаКатегория,
	|	ТаблицаИерархии.Уровень КАК Уровень
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	&ТаблицаИерархии КАК ТаблицаИерархии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
	|	ВТ_Номенклатура.Уровень КАК Уровень,
	|	НастройкиРМКРаспределениеНоменклатуры.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим,
	|	НастройкиРМКРаспределениеНоменклатуры.Патент КАК Патент,
	|	НастройкиРМКРаспределениеНоменклатуры.КассаККМ КАК КассаККМ
	|ПОМЕСТИТЬ ВТ_Настройки
	|ИЗ
	|	ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРМК.РаспределениеНоменклатуры КАК НастройкиРМКРаспределениеНоменклатуры
	|		ПО ВТ_Номенклатура.ГруппаКатегория = НастройкиРМКРаспределениеНоменклатуры.ГруппаНоменклатуры
	|			И (НастройкиРМКРаспределениеНоменклатуры.Ссылка.РабочееМесто = &РабочееМесто)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Номенклатура.Номенклатура,
	|	ВТ_Номенклатура.Уровень,
	|	НастройкиРМКРаспределениеНоменклатуры.СпециальныйНалоговыйРежим,
	|	НастройкиРМКРаспределениеНоменклатуры.Патент,
	|	НастройкиРМКРаспределениеНоменклатуры.КассаККМ
	|ИЗ
	|	ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРМК.РаспределениеНоменклатуры КАК НастройкиРМКРаспределениеНоменклатуры
	|		ПО ВТ_Номенклатура.ГруппаКатегория = НастройкиРМКРаспределениеНоменклатуры.КатегорияНоменклатуры
	|			И (НастройкиРМКРаспределениеНоменклатуры.Ссылка.РабочееМесто = &РабочееМесто)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Настройки.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ВТ_Настройки.Уровень) КАК Уровень
	|ПОМЕСТИТЬ ВТ_УровниНастроек
	|ИЗ
	|	ВТ_Настройки КАК ВТ_Настройки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Настройки.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Настройки.Номенклатура КАК Номенклатура,
	|	ВТ_Настройки.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим,
	|	ВТ_Настройки.Патент КАК Патент,
	|	ВТ_Настройки.КассаККМ КАК КассаККМ
	|ИЗ
	|	ВТ_Настройки КАК ВТ_Настройки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УровниНастроек КАК ВТ_УровниНастроек
	|		ПО ВТ_Настройки.Номенклатура = ВТ_УровниНастроек.Номенклатура
	|			И ВТ_Настройки.Уровень = ВТ_УровниНастроек.Уровень");
	Запрос.УстановитьПараметр("ТаблицаИерархии", ТаблицаИерархии);
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	НастройкиРаспределения = Запрос.Выполнить().Выгрузить();
	
	Если НастройкиРаспределения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапасыДляРаспределения = Объект.Запасы.Выгрузить();
	ЗапасыДляРаспределения.Колонки.Добавить("КассаККМ", Новый ОписаниеТипов("СправочникСсылка.КассыККМ"));
	ЗапасыДляРаспределения.Колонки.Добавить("СпециальныйНалоговыйРежим", Новый ОписаниеТипов("ПеречислениеСсылка.СпециальныеНалоговыеРежимы"));
	ЗапасыДляРаспределения.Колонки.Добавить("Патент", Новый ОписаниеТипов("СправочникСсылка.Патенты"));
	// Колонки для сортировки
	ЗапасыДляРаспределения.Колонки.Добавить("ДругаяКасса");
	ЗапасыДляРаспределения.Колонки.Добавить("ДругойРежим");
	// 
	
	ЕстьДругиеКассыСпецрежимы = Ложь;
	ЕстьДругиеОрганизации = Ложь;
	Для Каждого СтрокаЗапасов Из ЗапасыДляРаспределения Цикл
		
		ПараметрыПоиска = Новый Структура("Номенклатура", СтрокаЗапасов.Номенклатура);
		НайденныеСтроки = НастройкиРаспределения.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаЗапасов.ДругаяКасса = Ложь;
			СтрокаЗапасов.ДругойРежим = Ложь;
			Продолжить;
		КонецЕсли;
		
		СтрокаЗапасов.КассаККМ = НайденныеСтроки[0].КассаККМ;
		СтрокаЗапасов.СпециальныйНалоговыйРежим = НайденныеСтроки[0].СпециальныйНалоговыйРежим;
		СтрокаЗапасов.Патент = НайденныеСтроки[0].Патент;
		
		Если ЗначениеЗаполнено(СтрокаЗапасов.КассаККМ)
			И СтрокаЗапасов.КассаККМ <> Объект.КассаККМ Тогда
			СтрокаЗапасов.ДругаяКасса = Истина;
			ЕстьДругиеКассыСпецрежимы = Истина;
			Если СтрокаЗапасов.КассаККМ.Владелец <> Объект.КассаККМ.Владелец Тогда
				ЕстьДругиеОрганизации = Истина;
			КонецЕсли;
		Иначе
			СтрокаЗапасов.ДругаяКасса = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаЗапасов.СпециальныйНалоговыйРежим)
			И (СтрокаЗапасов.СпециальныйНалоговыйРежим <> Объект.СпециальныйНалоговыйРежим
			ИЛИ СтрокаЗапасов.Патент <> Объект.Патент) Тогда
			СтрокаЗапасов.ДругойРежим = Истина;
			ЕстьДругиеКассыСпецрежимы = Истина;
		Иначе
			СтрокаЗапасов.ДругойРежим = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаСортировки = "ДругаяКасса, ДругойРежим";
	Если ЕстьДругиеКассыСпецрежимы Тогда
		СтрокаСортировки = СтрШаблон("%1, %2", СтрокаСортировки, "КассаККМ, СпециальныйНалоговыйРежим, Патент");
	КонецЕсли;
	ЗапасыДляРаспределения.Сортировать(СтрокаСортировки);
	// Удаление колонок для сортировки
	ЗапасыДляРаспределения.Колонки.Удалить("ДругаяКасса");
	ЗапасыДляРаспределения.Колонки.Удалить("ДругойРежим");
	// 
	
	Если ЕстьДругиеОрганизации Тогда
		ПроверитьВозможностьРаспределенияПоЗаказу(ЕстьДругиеКассыСпецрежимы);
	КонецЕсли;
	
	Если ЕстьДругиеКассыСпецрежимы Тогда
		ЗаполнитьРаспределенныеЧеки(ЗапасыДляРаспределения);
	Иначе
		СписокРаспределенныхЧеков.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьРаспределенияПоЗаказу(ЕстьДругиеКассыСпецрежимы)
	
	Если Не ЗначениеЗаполнено(Объект.Заказ) Тогда
		Возврат
	КонецЕсли;
	
	УчетПоКомпании = Константы.УчетПоКомпании.Получить();
	
	Если УчетПоКомпании Тогда
		Возврат;
	Иначе
		ЕстьДругиеКассыСпецрежимы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока)
	
	Если ТекущаяСтрока.НеобходимостьВводаКодаМаркировки Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировки) Тогда
			ТекущаяСтрока.ИндексАкцизнойМарки = 1;
		Иначе
			ТекущаяСтрока.ИндексАкцизнойМарки = 2;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.ИндексАкцизнойМарки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтложенныхЧековПриИзменении(Элемент)
	
	ПересчитатьОтложенныеЧеки();
	
	УправлениеСтраницейОтложенныеЧеки();
	
КонецПроцедуры

#КонецОбласти

#Область СтруктурныеЕдиницы

&НаСервере
Процедура НастроитьЭлементыСтруктурныхЕдиниц()
	
	Если Не ЗначениеЗаполнено(НастройкаРМК) Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаРМК.СтруктурныеЕдиницы.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "ТолькоПросмотр", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "РежимВыбораИзСписка", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Заголовок", НСтр("ru = 'Склад продажи'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", СкладВШапке);
		
		СписокДоступныхСкладов.Очистить();
		СписокДоступныхСкладов.Добавить(КассаККМ.СтруктурнаяЕдиница);
		Для Каждого СтрокаСтруктурнойЕдиницы Из НастройкаРМК.СтруктурныеЕдиницы Цикл
			Если ЗначениеЗаполнено(СтрокаСтруктурнойЕдиницы.СтруктурнаяЕдиница) Тогда
				СписокДоступныхСкладов.Добавить(СтрокаСтруктурнойЕдиницы.СтруктурнаяЕдиница);
			КонецЕсли;
		КонецЦикла;
		
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Очистить();
		Элементы.ЗапасыСтруктурнаяЕдиница.СписокВыбора.Очистить();
		Элементы.ЗапасыСтруктурнаяЕдиницаДляРежимаОстатки.СписокВыбора.Очистить();
		Для Каждого ЭлементСписка Из СписокДоступныхСкладов Цикл
			Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(ЭлементСписка.Значение);
			Элементы.ЗапасыСтруктурнаяЕдиница.СписокВыбора.Добавить(ЭлементСписка.Значение);
			Элементы.ЗапасыСтруктурнаяЕдиницаДляРежимаОстатки.СписокВыбора.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ШапкаТабличнаяЧасть", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыКонтекстноеМенюШапкаТабличнаяЧасть", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиницаКонтекстноеМенюШапкаТабличнаяЧасть", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыЯчеек()
	
	ВидимостьЯчейки = ЕстьЯчейки(Объект.СтруктурнаяЕдиница);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ячейка", "Видимость", ВидимостьЯчейки И СкладВШапке);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЯчейки(СтруктурнаяЕдиница)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Ячейки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Ячейки КАК Ячейки
	|ГДЕ
	|	Ячейки.Владелец = &СтруктурнаяЕдиница");
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	ЕстьЯчейки = Не Запрос.Выполнить().Пустой();
	
	Возврат ЕстьЯчейки;
	
КонецФункции

&НаКлиенте
Процедура ШапкаТабличнаяЧасть(Команда)
	
	ПараметрыДиалога = Новый Структура;
	ПараметрыДиалога.Вставить("ПоложениеСкладаВДокументахОтгрузки", Объект.ПоложениеСклада);
	ПараметрыДиалога.Вставить("БылиВнесеныИзменения", Ложь);
	ПараметрыДиалога.Вставить("Доступность", Новый Структура("ПоложениеСкладаВДокументахОтгрузки", НЕ РежимОстаткиИРезервы));
	
	ОткрытьФорму(
	"ОбщаяФорма.ШапкаТабличнаяЧасть",
	ПараметрыДиалога,,,,,
	Новый ОписаниеОповещения("ШапкаТабличнаяЧастьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураНастройкаДокумента = Результат;
	
	Если ТипЗнч(СтруктураНастройкаДокумента) = Тип("Структура") И СтруктураНастройкаДокумента.БылиВнесеныИзменения Тогда
		
		Если Объект.ПоложениеСклада <> СтруктураНастройкаДокумента.ПоложениеСкладаВДокументахОтгрузки Тогда
			ШапкаТабличнаяЧастьЗавершениеНаСервере(СтруктураНастройкаДокумента);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШапкаТабличнаяЧастьЗавершениеНаСервере(Результат)
	
	Объект.ПоложениеСклада = Результат.ПоложениеСкладаВДокументахОтгрузки;
	Если НЕ РежимОстаткиИРезервы Тогда
		Если Объект.ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			СтруктураПолей = ЗаполнениеОбъектовУНФ.СтруктурнаяЕдиницаИЯчейкаДляШапки(Объект.Запасы);
			Если ЗначениеЗаполнено(СтруктураПолей.СтруктурнаяЕдиница) Тогда
				ЗаполнитьЗначенияСвойств(Объект, СтруктураПолей);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
				Объект.СтруктурнаяЕдиница = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					Пользователи.ТекущийПользователь(), 
					"ОсновнойСклад");
				Объект.Ячейка = Справочники.Ячейки.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
		Если Не Результат.Свойство("ЗаполнениеПоЗаказу") Тогда
			Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
				СтрокаТабличнойЧасти.Ячейка = Объект.Ячейка;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьОтПользовательскихНастроек();
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтПользовательскихНастроек()
	
	Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ячейка", "Видимость", Ложь);
		Если Не РежимОстаткиИРезервы Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиница", "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейка", "Видимость", Истина);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиницаДляРежимаОстатки", "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейкаДляРежимаОстатки", "Видимость", Истина);
		КонецЕсли;
		СкладВШапке = Ложь;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ячейка", "Видимость", Не Объект.СтруктурнаяЕдиница.ОрдерныйСклад);
		Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = НЕ УправлениеНебольшойФирмойПовтИсп.ВключеноИспользованиеЯчеек() ИЛИ НЕ Элементы.Ячейка.Видимость;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиница", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиницаДляРежимаОстатки", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейка", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейкаДляРежимаОстатки", "Видимость", Ложь);
		СкладВШапке = Истина;
	КонецЕсли;
	
	Элементы.ГруппаЗаполнитьПоВсемСкладам.Видимость = Не СкладВШапке Или РежимОстаткиИРезервы;
	Элементы.ЗапасыКонтекстноеМенюЗаполнитьПоОстаткамИРезервамВсеСклады.Видимость = Не СкладВШапке Или РежимОстаткиИРезервы;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьЯчеек()
	
	Если Не КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		КэшЗначений.Вставить("ДоступностьЯчеек", Новый ФиксированноеСоответствие(Новый Соответствие));
	КонецЕсли;
	
	МассивСтруктурныхЕдиниц = Новый Массив;
	Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			МассивСтруктурныхЕдиниц.Добавить(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		КонецЦикла;
	Иначе
		МассивСтруктурныхЕдиниц.Добавить(Объект.СтруктурнаяЕдиница);
	КонецЕсли;
	МассивСтруктурныхЕдиниц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСтруктурныхЕдиниц);
	ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьДоступностьЯчеек(СтруктурныеЕдиницы, СоответствиеСтруктурныхЕдиниц)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурныеЕдиницы", СтруктурныеЕдиницы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка,
	|	СтруктурныеЕдиницы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&СтруктурныеЕдиницы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Соответствие = Новый Соответствие(СоответствиеСтруктурныхЕдиниц);
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Ссылка, Не Выборка.ОрдерныйСклад И Выборка.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	КонецЦикла;
	СоответствиеСтруктурныхЕдиниц = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

&НаКлиенте
Функция ЯчейкаДоступна(СтруктурнаяЕдиница)
	
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) ИЛИ ТипЗнч(СтруктурнаяЕдиница)<>Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если НЕ КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
	Если Результат = Неопределено Тогда
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
		Если Результат=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПризнакиДоступностиЯчеек(Форма)

	Объект = Форма.Объект;
	КэшЗначений = Форма.КэшЗначений;
	
	Если Не КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПоложениеСклада <> ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		Если Результат = Неопределено Тогда
			Результат = Ложь;
		КонецЕсли;
		СтрокаТабличнойЧасти.ЯчейкаДоступна = Результат И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) И СтрокаТабличнойЧасти.ТипНоменклатурыЗапас;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамИРезервамВсеСклады(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Товары, услуги"" не заполнена.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьПоОстаткамИРезервамНаСервере();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамИРезервамНаСервере()
	
	Если СкладВШапке Тогда
		ЗначениеСклада = ?(Не ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница), Неопределено, Объект.СтруктурнаяЕдиница);
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ЗначениеСклада;
		КонецЦикла;
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьКоличествоПоОстаткамИРезервамРасходнаяНакладная(Объект);
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
	ОбновитьПризнакиНабора(Объект.Запасы);
	// Конец Наборы
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	ОбновитьДанныеОстатковИПризнакиХарактеристикИПартий();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЯчейкаДляРежимаОстаткиПриИзменении(Элемент)
	
	Если РежимОстаткиИРезервы Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаДляРежимаОстаткиОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат
	КонецЕсли;
	ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаСервере
Функция СвободныйОстатокПоСтруктурнойЕдинице(СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, ЕдиницаИзмерения)
	
	Коэффициент = ?(ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), ЕдиницаИзмерения.Коэффициент, 1);
	
	Организация = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Партия", Партия);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	ЕстьЗаказ = ЗначениеЗаполнено(Объект.Заказ);
	
	Если ЕстьЗаказ Тогда
		Запрос.УстановитьПараметр("Заказ", Объект.Заказ);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЗапасыОстаткиСвободные.КоличествоОстаток) КАК КоличествоСвободно,
		|	СУММА(ЗапасыОстаткиРезерв.КоличествоОстаток) КАК КоличествоРезерв
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|				И ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|				И Организация = &Организация
		|				И Характеристика = &Характеристика
		|				И Партия = &Партия
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстаткиСвободные,
		|	РегистрНакопления.Запасы.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|				И ЗаказПокупателя = &Заказ
		|				И Организация = &Организация
		|				И Характеристика = &Характеристика
		|				И Партия = &Партия
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстаткиРезерв
		|
		|УПОРЯДОЧИТЬ ПО
		|	КоличествоСвободно УБЫВ";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЗапасыОстаткиСвободные.КоличествоОстаток) КАК КоличествоСвободно
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|				И ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|				И Организация = &Организация
		|				И Характеристика = &Характеристика
		|				И Партия = &Партия
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстаткиСвободные
		|
		|УПОРЯДОЧИТЬ ПО
		|	КоличествоСвободно УБЫВ";
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СтруктураВозврата = Новый Структура("КоличествоСвободно, КоличествоРезерв");
	
	Пока Результат.Следующий() Цикл
		СтруктураВозврата.КоличествоСвободно = Результат.КоличествоСвободно/Коэффициент;
		СтруктураВозврата.КоличествоРезерв = ?(ЕстьЗаказ, Результат.КоличествоРезерв/Коэффициент, 0);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаДляРежимаОстаткиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = Неопределено Тогда Возврат КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если ВыбранноеЗначение = "ОтчетОстаткиНаСкладах" Тогда
		
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда Возврат КонецЕсли;
		
		Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "ПоМестамХранения");
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
		ОтборРасшифровки = Новый Соответствие;
		ОтборРасшифровки.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		ОтборРасшифровки.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		ОтборРасшифровки.Вставить("СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
		ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
		
		ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("Склад") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ВыбранноеЗначение.Склад;
		СтрокаТабличнойЧасти.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
	Иначе
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ВыбранноеЗначение;
		СтрокаТабличнойЧасти.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
	КонецЕсли;
	СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	
	ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТипНоменклатурыЗапас()
	
	Если НЕ КэшЗначений.Свойство("ТипНоменклатурыЗапас") Тогда
		КэшЗначений.Вставить("ТипНоменклатурыЗапас", Новый Соответствие);
	КонецЕсли;
	
	Кешировать = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		Если КэшЗначений.ТипНоменклатурыЗапас.Получить(СтрокаТабличнойЧасти.Номенклатура) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Кешировать.Добавить(СтрокаТабличнойЧасти.Номенклатура);
	КонецЦикла;
	
	Если Кешировать.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Кешировать", Кешировать);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)) КАК ТипНоменклатурыЗапас
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&Кешировать)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			КэшЗначений.ТипНоменклатурыЗапас.Вставить(Выборка.Номенклатура, Выборка.ТипНоменклатурыЗапас);	
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = КэшЗначений.ТипНоменклатурыЗапас.Получить(СтрокаТабличнойЧасти.Номенклатура);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область АгентскиеПлатежи

&НаКлиенте
Процедура ВводПараметровАгентскогоПлатежа(ТекущиеДанные, Элемент)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РедактируемаяСтрока", ТекущиеДанные);
	
	ПараметрыФормы = Новый Структура;
	Если Элемент = Элементы.ЗапасыСумма Тогда
		ПараметрыФормы.Вставить("Платеж", ТекущиеДанные.Сумма);
		ДополнительныеПараметры.Вставить("ПересчиталиСумму", Истина);
	Иначе
		ПараметрыФормы.Вставить("Платеж", ТекущиеДанные.Цена);
	КонецЕсли;
	ПараметрыФормы.Вставить("ДанныеАгентскогоДоговора",         ТекущиеДанные.ДанныеАгентскогоДоговора);
	ПараметрыФормы.Вставить("ВознаграждениеВключеноВСтоимость", Элемент = Элементы.ЗапасыЦенаСАгентскимВознаграждением);
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
									"ОповещениеВводПараметровАгентскогоПлатежа" ,
									ЭтотОбъект,
									ДополнительныеПараметры);
									
	ОткрытьФорму("ОбщаяФорма.ВводПараметровАгентскогоПлатежа", ПараметрыФормы, ЭтотОбъект,,,,ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводПараметровАгентскогоПлатежа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	РедактируемаяСтрока = ДополнительныеПараметры.РедактируемаяСтрока;
	Если ДополнительныеПараметры.Свойство("ПересчиталиСумму") И ДополнительныеПараметры.ПересчиталиСумму Тогда
		РедактируемаяСтрока.Сумма = Результат.Платеж;
		ЗапасыСуммаПриИзменении(Неопределено);
	Иначе
		РедактируемаяСтрока.Цена = Результат.Платеж;
		ЗапасыЦенаПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруСостоянияКассовойСмены(СтруктураСостояниеКассовойСмены)
	
	АгентскиеПлатежиУНФ.ДополнитьСтруктуруСостоянияКассовойСмены(СтруктураСостояниеКассовойСмены);
	
КонецПроцедуры

#КонецОбласти