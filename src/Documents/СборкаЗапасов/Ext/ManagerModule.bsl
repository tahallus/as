#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
// @skip-warning
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(СтруктурнаяЕдиницаЗапасов)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#Область ЗагрузкаДанныхИзВнешнегоИсточника

// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
//
// Параметры:
//   ТаблицаПолейЗагрузки - таблица значений, которая будет наполнена колонками
//   НастройкиЗагрузкиДанных - структура настроек загрузки
//
Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	ОписаниеТиповСтрока11 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(11));	
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока30 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(30));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока110 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(110));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2,
		ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3,
		ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ЭтоЗапасы = (ПолноеИмяОбъектаЗаполнения = "Документ.СборкаЗапасов.ТабличнаяЧасть.Запасы");
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ОбязательноеЗаполнениеГруппыНоменклатуры = Не ПолучитьФункциональнуюОпцию("УчетНоменклатурыПоставщиков");
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
		ТаблицаПолейЗагрузки, "Штрихкод",
		НСтр("ru = 'Штрихкод'"), ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура",
		1, , ОбязательноеЗаполнениеГруппыНоменклатуры, ЭтоЗапасы);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
		ТаблицаПолейЗагрузки, "Артикул",
		НСтр("ru = 'Артикул'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура",
		2, , ОбязательноеЗаполнениеГруппыНоменклатуры);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
		ТаблицаПолейЗагрузки, "НоменклатураНаименование",
		НСтр("ru = 'Номенклатура (наименование)'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура",
		3, , ОбязательноеЗаполнениеГруппыНоменклатуры);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
		ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное",
		НСтр("ru = 'Номенклатура (полное наименование)'"), ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура",
		5, , ОбязательноеЗаполнениеГруппыНоменклатуры);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительКод",
		НСтр("ru = 'Код'", ОбщегоНазначения.КодОсновногоЯзыка()), 			ОписаниеТиповСтрока11, ОписаниеТиповКолонка, "Родитель", 1);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительНаименование", 
		НСтр("ru = 'Группа (наименование)'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Родитель", 2);	

	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
			ТаблицаПолейЗагрузки, "ХарактеристикаНаименование", 
			НСтр("ru = 'Характеристика (наименование)'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			ОписаниеТиповСтрока150, ОписаниеТиповКолонка, "Характеристика", 1);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
			ТаблицаПолейЗагрузки, "ХарактеристикаАртикул", 
			НСтр("ru = 'Характеристика (артикул)'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Характеристика", 2);
		
	КонецЕсли;
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаДоходов", 
		НСтр("ru = 'Счет учета доходов'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗапасов", 
		НСтр("ru = 'Счет учета запасов'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗатрат", 
		НСтр("ru = 'Счет учета затрат'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НаправлениеДеятельности",
		НСтр("ru = 'Направление деятельности'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.МетодОценкиЗапасов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "МетодОценки",
		НСтр("ru = 'Способ списания'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПополненияЗапасов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СпособПополнения",
		НСтр("ru = 'Способ пополнения'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Картинка", 
		НСтр("ru = 'Картинка'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000,,,,,Ложь);
		
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЭтоУслуга", 
		НСтр("ru = 'Это услуга'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповБулево, ОписаниеТиповБулево,,,,,);

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "КатегорияНоменклатуры", 
		НСтр("ru = 'Категория номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);   	

	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Партия",
			НСтр("ru = 'Партия (наименование)'"), ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Серия",
			НСтр("ru = 'Серия'"), ОписаниеТиповСтрока1000, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", НСтр("ru = 'Количество'"),
		ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , Истина);

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения",
		НСтр("ru = 'Ед. изм.'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, , , , ,
		ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	
	ВидимостьСклада = (ЭтоЗапасы
					   И ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам")
					   И НастройкиЗагрузкиДанных.Свойство("ПоложениеСклада")
					   И НастройкиЗагрузкиДанных.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтруктурнаяЕдиница",
		НСтр("ru = 'Склад'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка, , , , , ВидимостьСклада);
		
	ВидимостьЗаказа = (ЭтоЗапасы					   
					   И НастройкиЗагрузкиДанных.Свойство("ПоложениеЗаказаПокупателя")
					   И НастройкиЗагрузкиДанных.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЗаказПокупателя",
		НСтр("ru = 'Заказ покупателя'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка, , , , , ВидимостьЗаказа);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтавкаНДС",
		НСтр("ru = 'Ставка НДС'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка);

	Если НастройкиЗагрузкиДанных.Свойство("ВидОперации") Тогда		
		Если НастройкиЗагрузкиДанных.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Разборка Тогда    				
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДоляСтоимости", НСтр("ru = 'ДоляСтоимости'"),
				ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Ложь); 			
		Иначе         			
			Если НастройкиЗагрузкиДанных.ЗаказЗаполнен Тогда
				ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Резерв", НСтр("ru = 'Резерв'"),
					ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Ложь);
			КонецЕсли;    			
		КонецЕсли;
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда

		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтраныМира");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтранаПроисхождения",
			НСтр("ru = 'Страна происхождения'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);

		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НомераГТД");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НомерГТД",
			НСтр("ru = 'Номер ГТД'"), ОписаниеТиповСтрока30, ОписаниеТиповКолонка);

	КонецЕсли;
	
КонецПроцедуры

// Добавляет в структуру НастройкиЗагрузкиДанных адреса макетов-образцов загрузки данных
//
// Параметры:
//   НастройкиЗагрузкиДанных - структура настроек загрузки
//   УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

// АПК:299-выкл процедура вызывается программно в форме ПомощникЗагрузкиДанныхИзВнешнегоИсточника обработки ЗагрузкаДанныхИзВнешнегоИсточника

// Сопоставляет загружаемые данные из внешнего источника с данными в базе
//
// Параметры:
//   ПараметрыСопоставления - структура, параметры сопоставления загружаемых данных
//   АдресРезультата - адрес, куда будет помещена таблица сопоставления данных
//
Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ПараметрыСопоставления, АдресРезультата) Экспорт
	
	ТаблицаСопоставленияДанных	= ПараметрыСопоставления.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных		= ПараметрыСопоставления.НастройкиЗагрузкиДанных;
	НастройкиПоиска				= НастройкиЗагрузкиДанных.НастройкиПоиска;
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	ТаблицаДублирующихСтрок = ЗагрузкаДанныхИзВнешнегоИсточника.ПустаяТаблицаДублирующихСтрокНоменклатуры();
	НастройкиПоиска.Вставить("ТаблицаДублирующихСтрок", ТаблицаДублирующихСтрок);
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		НоменклатураСопоставлена = Ложь;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "НоменклатураПоставщиков") 
			И (ЗначениеЗаполнено(СтрокаТаблицыФормы.АртикулПоставщика)
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.Идентификатор)
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураПоставщиковНаименование)) Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуруПоставщиков(СтрокаТаблицыФормы, НастройкиЗагрузкиДанных);	
			НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураПоставщиков);
		КонецЕсли;
		
		Если НЕ НоменклатураСопоставлена Тогда
		
			// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы, НастройкиПоиска);
		
		КонецЕсли; 
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "КатегорияНоменклатуры_ВходящиеДанные")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "КатегорияНоменклатуры") Тогда
		
			ЗначениеПоУмолчанию = Справочники.КатегорииНоменклатуры.БезКатегории;					
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьКатегориюНоменклатуры(СтрокаТаблицыФормы.КатегорияНоменклатуры, СтрокаТаблицыФормы.КатегорияНоменклатуры_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "Родитель")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "РодительНаименование")
			И ЗначениеЗаполнено(СтрокаТаблицыФормы.РодительНаименование) Тогда
			
			ЗначениеПоУмолчанию = Справочники.Номенклатура.ПустаяСсылка();
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьРодителяНоменклатуры(СтрокаТаблицыФормы.Родитель, "", СтрокаТаблицыФормы.РодительНаименование, ЗначениеПоУмолчанию);
			
		КонецЕсли; 
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "ЭтоУслуга_ВходящиеДанные") Тогда
			
			СтрокаТаблицыФормы.ЭтоУслуга = СтрокаТаблицыФормы.ЭтоУслуга_ВходящиеДанные;
			
		КонецЕсли; 
		
		СтрокаТаблицыФормы.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
		СтрокаТаблицыФормы.СчетУчетаЗатрат = ?(ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство"), 
			ПланыСчетов.Управленческий.НезавершенноеПроизводство, ПланыСчетов.Управленческий.КоммерческиеРасходы);
		СтрокаТаблицыФормы.СчетУчетаДоходов = ?(СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"), 
			ПланыСчетов.Управленческий.ПрочиеДоходы, ПланыСчетов.Управленческий.ПустаяСсылка());
			
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "НаправлениеДеятельности") Тогда
				
			ЗначениеПоУмолчанию = Справочники.НаправленияДеятельности.Прочее;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНаправлениеДеятельности(СтрокаТаблицыФормы.НаправлениеДеятельности, СтрокаТаблицыФормы.НаправлениеДеятельности_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "МетодОценки") Тогда
				
			ЗначениеПоУмолчанию = Перечисления.МетодОценкиЗапасов.ПоСредней;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьМетодОценки(СтрокаТаблицыФормы.МетодОценки, СтрокаТаблицыФормы.МетодОценки_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "СпособПополнения") Тогда
				
			ЗначениеПоУмолчанию = Перечисления.СпособыПополненияЗапасов.Закупка;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСпособПополнения(СтрокаТаблицыФормы.СпособПополнения, СтрокаТаблицыФормы.СпособПополнения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ПолноеИмяОбъектаЗаполнения = "Документ.СборкаЗапасов.ТабличнаяЧасть.Запасы" Тогда
			
			Если СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
				
				СтрокаТаблицыФормы.Номенклатура = Неопределено;
				
			КонецЕсли;
			
			Если НЕ НоменклатураСопоставлена И ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") И ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				// Характеристика по Владельцу и Наименованию
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы);
				
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
				
				Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
					
					// Партия по Владельцу и Наименованию
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПартию(СтрокаТаблицыФормы.Партия, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Партия_ВходящиеДанные);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Серии номенклатуры
			Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
				
				Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) 
					И  ЗначениеЗаполнено(СтрокаТаблицыФормы.Серия_ВходящиеДанные) Тогда
					
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСерия(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Серия, СтрокаТаблицыФормы.Серия_ВходящиеДанные);
					
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли;
		
		// Количество
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
		
		// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
		ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Заказ по номеру, дате, признаку
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЗаказ(СтрокаТаблицыФормы.ЗаказПокупателя, СтрокаТаблицыФормы.ЗаказПокупателя_ВходящиеДанные);
		
		// Доля стоимости и резерв
		Если НастройкиЗагрузкиДанных.Свойство("ВидОперации") Тогда		
			Если НастройкиЗагрузкиДанных.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Разборка Тогда    				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.ДоляСтоимости, СтрокаТаблицыФормы.ДоляСтоимости_ВходящиеДанные, 0); 			
			Иначе         			
				Если НастройкиЗагрузкиДанных.ЗаказЗаполнен Тогда
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Резерв, СтрокаТаблицыФормы.Резерв_ВходящиеДанные, 0);
				КонецЕсли;    			
			КонецЕсли;
		КонецЕсли; 
		
		// Склад
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтруктурнуюЕдиницу(СтрокаТаблицыФормы.СтруктурнаяЕдиница, СтрокаТаблицыФормы.СтруктурнаяЕдиница_ВходящиеДанные, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		// Страна и ГТД
		Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
			
			ЗначениеПоУмолчанию = Неопределено;
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				ЗначениеПоУмолчанию = СтрокаТаблицыФормы.Номенклатура.СтранаПроисхождения;
				
			КонецЕсли;
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтрануПроисхождения(СтрокаТаблицыФормы.СтранаПроисхождения, СтрокаТаблицыФормы.СтранаПроисхождения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.СтранаПроисхождения)
				И СтрокаТаблицыФормы.СтранаПроисхождения <> Справочники.СтраныМира.Россия Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНомерГТД(СтрокаТаблицыФормы.НомерГТД, СтрокаТаблицыФормы.НомерГТД_ВходящиеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПрогрессСопоставленияДанных(ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицыФормы), РазмерТаблицыДанных);
		
	КонецЦикла;
	
	ТаблицаСопоставленияДанных.ЗагрузитьКолонку(ТаблицаДублирующихСтрок.ВыгрузитьКолонку("КлючСвязи"), "_КлючСвязи");
	ПоместитьВоВременноеХранилище(ТаблицаСопоставленияДанных, АдресРезультата);
	
КонецПроцедуры

// АПК:299-вкл

// Проверяет корректность данных в строке табличной части "Запасы"
//
// Параметры:
//   СтрокаТаблицыФормы - строка таблицы формы для проверки заполнения
//   ПолноеИмяОбъектаЗаполнения - строка, полное имя объекта для заполнения
//
Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт

	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	НоменклатураЗаполнена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
	ЗагрузкаНоменклатурыВозможна = Ложь;
	Если НЕ НоменклатураЗаполнена Тогда
		ЗагрузкаНоменклатурыВозможна = (ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименование) 
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименованиеПолное));
	КонецЕсли;

	Если ПолноеИмяОбъектаЗаполнения = "Документ.СборкаЗапасов.ТабличнаяЧасть.Запасы" Тогда
		
		Если НоменклатураЗаполнена Тогда

			СтрокаТаблицыФормы[ИмяСлужебногоПоля] = СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
				И НЕ СтрокаТаблицыФормы.Номенклатура.ЭтоНабор // Исключая наборы
				И СтрокаТаблицыФормы.Количество <> 0;
			СтрокаТаблицыФормы._СтрокаСопоставлена = НоменклатураЗаполнена;
				
		Иначе
			
			СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗагрузкаНоменклатурыВозможна И НЕ СтрокаТаблицыФормы.ЭтоУслуга;

		КонецЕсли;    			

	КонецЕсли;   			

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

#Область Отходы

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыОтходы(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства)
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыОтходы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыОтходы[н];
		
		СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
		
		// Автоперемещение возвратных отходов.
		Если ЗначениеЗаполнено(СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаОтходов) Тогда
			
			// Расход.
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаОтходов;
			СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчетаОтходов;
			
			СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
			СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
			СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
			СтрокаТаблицыРасход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПокупателя;
			
			СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
            СтрокаТаблицыРасход.Содержание = НСтр("ru = 'Перемещение запасов'");
			
			// Приход.
			СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаОтходов;
			СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаОтходов;

			СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
			СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
			
			СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
			СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
			СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
			СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПокупателя;
			
			СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
			СтрокаТаблицыПриход.Содержание = НСтр("ru = 'Перемещение запасов'");
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыОтходы");
	
КонецПроцедуры // СформироватьТаблицаЗапасыОтходы()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеПоОтходам(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СборкаЗапасовОтходы.НомерСтроки КАК НомерСтроки,
	|	&Организация КАК Организация,
	|	СборкаЗапасовОтходы.Ссылка.Дата КАК Период,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовОтходы.Ссылка.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовОтходы.Ссылка.ЯчейкаОтходов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК ЯчейкаОтходов,
	|	СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиницаОтходов КАК СтруктурнаяЕдиницаОтходов,
	|	СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиницаОтходов.ОрдерныйСклад КАК ОрдерныйСкладОтходов,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовОтходы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовОтходы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовОтходы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовОтходы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовОтходы.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовОтходы.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовОтходы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовОтходы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовОтходы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовОтходы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиницаОтходов.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовОтходы.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовОтходы.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчетаОтходов,
	|	СборкаЗапасовОтходы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СборкаЗапасовОтходы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовОтходы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|				И СборкаЗапасовОтходы.Партия.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение), ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии), ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье))
	|			ТОГДА СборкаЗапасовОтходы.Ссылка.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовОтходы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА СборкаЗапасовОтходы.Количество
	|		ИНАЧЕ СборкаЗапасовОтходы.Количество * СборкаЗапасовОтходы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	0 КАК Сумма,
	|	&ВозвратныеОтходы КАК СодержаниеПроводки,
	|	&ВозвратныеОтходы КАК Содержание
	|ПОМЕСТИТЬ ВТОтходы
	|ИЗ
	|	Документ.СборкаЗапасов.Отходы КАК СборкаЗапасовОтходы
	|ГДЕ
	|	СборкаЗапасовОтходы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаЗапасовОтходы.НомерСтроки КАК НомерСтроки,
	|	СборкаЗапасовОтходы.Организация КАК Организация,
	|	СборкаЗапасовОтходы.Период КАК Период,
	|	СборкаЗапасовОтходы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СборкаЗапасовОтходы.Ячейка КАК Ячейка,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовОтходы.СтруктурнаяЕдиница = СборкаЗапасовОтходы.СтруктурнаяЕдиницаОтходов
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|		ИНАЧЕ СборкаЗапасовОтходы.СтруктурнаяЕдиницаОтходов
	|	КОНЕЦ КАК СтруктурнаяЕдиницаОтходов,
	|	СборкаЗапасовОтходы.СчетУчета КАК СчетУчета,
	|	СборкаЗапасовОтходы.СчетУчетаОтходов КАК СчетУчетаОтходов,
	|	СборкаЗапасовОтходы.Номенклатура КАК Номенклатура,
	|	СборкаЗапасовОтходы.Характеристика КАК Характеристика,
	|	СборкаЗапасовОтходы.Партия КАК Партия,
	|	СборкаЗапасовОтходы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СборкаЗапасовОтходы.Количество КАК Количество,
	|	СборкаЗапасовОтходы.Сумма КАК Сумма,
	|	СборкаЗапасовОтходы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	СборкаЗапасовОтходы.Содержание КАК Содержание
	|ИЗ
	|	ВТОтходы КАК СборкаЗапасовОтходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаЗапасовОтходы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	СборкаЗапасовОтходы.Период КАК Период,
	|	СборкаЗапасовОтходы.Организация КАК Организация,
	|	СборкаЗапасовОтходы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СборкаЗапасовОтходы.Ячейка КАК Ячейка,
	|	СборкаЗапасовОтходы.СтруктурнаяЕдиницаОтходов КАК СтруктурнаяЕдиницаОтходов,
	|	СборкаЗапасовОтходы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СборкаЗапасовОтходы.ОрдерныйСкладОтходов КАК ОрдерныйСкладОтходов,
	|	СборкаЗапасовОтходы.ЯчейкаОтходов КАК ЯчейкаОтходов,
	|	СборкаЗапасовОтходы.Номенклатура КАК Номенклатура,
	|	СборкаЗапасовОтходы.Характеристика КАК Характеристика,
	|	СборкаЗапасовОтходы.Партия КАК Партия,
	|	СборкаЗапасовОтходы.Количество КАК Количество
	|ИЗ
	|	ВТОтходы КАК СборкаЗапасовОтходы
	|ГДЕ
	|	(СборкаЗапасовОтходы.Период < &ДатаОбновленияНаРелиз_1_2_1
	|			ИЛИ СборкаЗапасовОтходы.Период >= &ДатаОбновленияНаРелиз_1_2_1
	|				И НЕ СборкаЗапасовОтходы.ОрдерныйСклад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаЗапасовОтходы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	СборкаЗапасовОтходы.Период КАК Период,
	|	СборкаЗапасовОтходы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СборкаЗапасовОтходы.Организация КАК Организация,
	|	СборкаЗапасовОтходы.Номенклатура КАК Номенклатура,
	|	СборкаЗапасовОтходы.Характеристика КАК Характеристика,
	|	СборкаЗапасовОтходы.Партия КАК Партия,
	|	СборкаЗапасовОтходы.Количество КАК Количество
	|ИЗ
	|	ВТОтходы КАК СборкаЗапасовОтходы
	|ГДЕ
	|	СборкаЗапасовОтходы.Период >= &ДатаОбновленияНаРелиз_1_2_1
	|	И СборкаЗапасовОтходы.ОрдерныйСклад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СборкаЗапасовОтходы.НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	СборкаЗапасовОтходы.Период,
	|	СборкаЗапасовОтходы.СтруктурнаяЕдиницаОтходов,
	|	СборкаЗапасовОтходы.Организация,
	|	СборкаЗапасовОтходы.Номенклатура,
	|	СборкаЗапасовОтходы.Характеристика,
	|	СборкаЗапасовОтходы.Партия,
	|	СборкаЗапасовОтходы.Количество
	|ИЗ
	|	ВТОтходы КАК СборкаЗапасовОтходы
	|ГДЕ
	|	СборкаЗапасовОтходы.ОрдерныйСкладОтходов
	|	И СборкаЗапасовОтходы.СтруктурнаяЕдиницаОтходов <> СборкаЗапасовОтходы.СтруктурнаяЕдиница
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СборкаЗапасовОтходы.НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	СборкаЗапасовОтходы.Период,
	|	СборкаЗапасовОтходы.СтруктурнаяЕдиницаОтходов,
	|	СборкаЗапасовОтходы.Организация,
	|	СборкаЗапасовОтходы.Номенклатура,
	|	СборкаЗапасовОтходы.Характеристика,
	|	СборкаЗапасовОтходы.Партия,
	|	СборкаЗапасовОтходы.Количество
	|ИЗ
	|	ВТОтходы КАК СборкаЗапасовОтходы
	|ГДЕ
	|	СборкаЗапасовОтходы.ОрдерныйСкладОтходов
	|	И СборкаЗапасовОтходы.Период < &ДатаОбновленияНаРелиз_1_2_1
	|	И СборкаЗапасовОтходы.СтруктурнаяЕдиницаОтходов <> СборкаЗапасовОтходы.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	СборкаЗапасовОтходы.Период КАК Период,
	|	СборкаЗапасовОтходы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СборкаЗапасовОтходы.Организация КАК Организация,
	|	СборкаЗапасовОтходы.Номенклатура КАК Номенклатура,
	|	СборкаЗапасовОтходы.Характеристика КАК Характеристика,
	|	СборкаЗапасовОтходы.Партия КАК Партия,
	|	СборкаЗапасовОтходы.Количество КАК Количество
	|ИЗ
	|	ВТОтходы КАК СборкаЗапасовОтходы
	|ГДЕ
	|	СборкаЗапасовОтходы.ОрдерныйСклад
	|	И СборкаЗапасовОтходы.Период >= &ДатаОбновленияНаРелиз_1_2_1
	|	И СборкаЗапасовОтходы.СтруктурнаяЕдиницаОтходов <> СборкаЗапасовОтходы.СтруктурнаяЕдиница";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	Запрос.УстановитьПараметр("ИспользоватьРезервирование",  СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	
	// Временно: изменение движений по ордерному складу.
	ДатаОбновленияНаРелиз_1_2_1 = Константы.ДатаОбновленияНаРелиз_1_2_1.Получить();
	Запрос.УстановитьПараметр("ДатаОбновленияНаРелиз_1_2_1", ДатаОбновленияНаРелиз_1_2_1);
	
	Запрос.УстановитьПараметр("ВозвратныеОтходы", НСтр("ru = 'Возвратные отходы'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Определим таблицу для учета запасов.
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыОтходы", МассивРезультатов[1].Выгрузить());

	// Сформируем таблицу для учета запасов.
	СформироватьТаблицаЗапасыОтходы(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);

	// Дополним таблицу для запасов.
	ВыборкаРезультатов = МассивРезультатов[2].Выбрать();
	
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, ВыборкаРезультатов);
		
		// Автоперемещение возвратных отходов (дополним таблицу ТаблицаЗапасыНаСкладах).
		Если (ВыборкаРезультатов.СтруктурнаяЕдиницаОтходов = ВыборкаРезультатов.СтруктурнаяЕдиница
			И ВыборкаРезультатов.ЯчейкаОтходов <> ВыборкаРезультатов.Ячейка)
			ИЛИ ВыборкаРезультатов.СтруктурнаяЕдиницаОтходов <> ВыборкаРезультатов.СтруктурнаяЕдиница Тогда
					
			// Расход.			
			Если (ВыборкаРезультатов.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (ВыборкаРезультатов.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ ВыборкаРезультатов.ОрдерныйСклад) Тогда	
				
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, ВыборкаРезультатов);
			
				СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
				
			КонецЕсли;	
			
			// Приход.
			Если (ВыборкаРезультатов.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (ВыборкаРезультатов.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ ВыборкаРезультатов.ОрдерныйСкладОтходов) Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, ВыборкаРезультатов);
			
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = ВыборкаРезультатов.СтруктурнаяЕдиницаОтходов;
				СтрокаТаблицыПриход.Ячейка = ВыборкаРезультатов.ЯчейкаОтходов;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Автоперемещение возвратных отходов (дополним таблицу ТаблицаЗапасыКПоступлениюНаСклады).
	ВыборкаРезультатов = МассивРезультатов[3].Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		СтрокаТаблицыРасходПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыКПоступлениюНаСклады.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПриход, ВыборкаРезультатов);		
		
	КонецЦикла;

	// Автоперемещение возвратных отходов (дополним таблицу ТаблицаЗапасыКРасходуСоСкладов).
	ВыборкаРезультатов = МассивРезультатов[4].Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		СтрокаТаблицыРасходПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыКРасходуСоСкладов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПриход, ВыборкаРезультатов);		
		
	КонецЦикла;
	
КонецПроцедуры // ИнициализироватьДанныеПоОтходам()

#КонецОбласти 

#Область ЗапасыСборка

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки)
	
	ТекстСодержаниеПеремещение = НСтр("ru = 'Перемещение запасов'");
	ТекстСодержаниеЗавершениеПроизводства = НСтр("ru = 'Завершение производства'");
	ТекстСодержаниеСборкаЗапасов = НСтр("ru = 'Сборка запасов'");
	
	// Таблица запасов для проведения
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаПродукцииПроизводство КАК СчетУчетаПродукцииПроизводство,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	ТаблицаЗапасы.СчетУчетаЗапасовПроизводство КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Спецификация КАК Спецификация,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ТаблицаЗапасы.КоррСпецификация КАК КоррСпецификация,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ТаблицаЗапасы.Количество КАК Количество,
	|	ТаблицаЗапасы.Резерв КАК Резерв,
	|	ТаблицаЗапасы.Сумма КАК Сумма,
	|	ТаблицаЗапасы.КоррКоличество КАК КоррКоличество,
	|	ТаблицаЗапасы.ЗавершающийЭтап КАК ЗавершающийЭтап,
	|	ТаблицаЗапасы.ИспользуютсяЭтапы КАК ИспользуютсяЭтапы,
	|	ТаблицаЗапасы.ПодразделениеЗавершающегоЭтапа КАК ПодразделениеЗавершающегоЭтапа,
	|	ТаблицаЗапасы.Содержание КАК Содержание,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.ПодразделениеЗавершающегоЭтапа КАК ПодразделениеЗавершающегоЭтапа,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	ТаблицаЗапасы.СчетУчетаЗапасовПроизводство КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Спецификация КАК Спецификация,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма,
	|	ТаблицаЗапасы.ЗавершающийЭтап КАК ЗавершающийЭтап,
	|	ТаблицаЗапасы.ИспользуютсяЭтапы КАК ИспользуютсяЭтапы
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.СчетУчетаЗапасовПроизводство,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Спецификация,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаЗапасы.ЗавершающийЭтап,
	|	ТаблицаЗапасы.ИспользуютсяЭтапы,
	|	ТаблицаЗапасы.ЗаказНаПроизводство,
	|	ТаблицаЗапасы.ПодразделениеЗавершающегоЭтапа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаПродукция.Период КАК Период,
	|	ТаблицаПродукция.Организация КАК Организация,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	ТаблицаПродукция.СчетУчета КАК СчетУчета,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	ТаблицаПродукция.Спецификация КАК Спецификация,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаПродукция.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ТаблицаПродукция.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ТаблицаПродукция.Количество КАК Количество,
	|	ТаблицаПродукция.ЗавершающийЭтап КАК ЗавершающийЭтап,
	|	ТаблицаПродукция.ИспользуютсяЭтапы КАК ИспользуютсяЭтапы,
	|	ТаблицаПродукция.ПодразделениеЗавершающегоЭтапа КАК ПодразделениеЗавершающегоЭтапа
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаРаспределение = РезультатЗапроса.Получить(0).Выгрузить();
	ТаблицаЗапасы = РезультатЗапроса.Получить(1).Выгрузить();
	ТаблицаПродукция = РезультатЗапроса.Получить(2).Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка) КАК ЗаказНаПроизводство
	|ПОМЕСТИТЬ ПоляПолученияОстатков
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|ГДЕ
	|	ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.ПодразделениеЗавершающегоЭтапа,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.НезавершенноеПроизводство),
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаПродукция.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаПродукция.ЗаказНаПроизводство
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|ГДЕ
	|	(ТаблицаПродукция.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ИЛИ ТаблицаПродукция.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка))
	|	И ТаблицаПродукция.ИспользуютсяЭтапы
	|	И ТаблицаПродукция.ЗавершающийЭтап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоляПолученияОстатков.Организация КАК Организация,
	|	ПоляПолученияОстатков.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПоляПолученияОстатков.СчетУчета КАК СчетУчета,
	|	ПоляПолученияОстатков.Номенклатура КАК Номенклатура,
	|	ПоляПолученияОстатков.Характеристика КАК Характеристика,
	|	ПоляПолученияОстатков.Партия КАК Партия,
	|	ПоляПолученияОстатков.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ПоляПолученияОстатков.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ИЗ
	|	ПоляПолученияОстатков КАК ПоляПолученияОстатков
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоляПолученияОстатков.Организация,
	|	ПоляПолученияОстатков.СтруктурнаяЕдиница,
	|	ПоляПолученияОстатков.СчетУчета,
	|	ПоляПолученияОстатков.Номенклатура,
	|	ПоляПолученияОстатков.Характеристика,
	|	ПоляПолученияОстатков.Партия,
	|	ПоляПолученияОстатков.ЗаказПокупателя,
	|	ПоляПолученияОстатков.ЗаказНаПроизводство";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ПОМЕСТИТЬ ВЗЗапасыОстатки
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			&МоментКонтроля,
	|			(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя, ЗаказНаПроизводство) В
	|				(ВЫБРАТЬ
	|					ТаблицаЗапасы.Организация,
	|					ТаблицаЗапасы.СтруктурнаяЕдиница,
	|					ТаблицаЗапасы.СчетУчета,
	|					ТаблицаЗапасы.Номенклатура,
	|					ТаблицаЗапасы.Характеристика,
	|					ТаблицаЗапасы.Партия,
	|					ТаблицаЗапасы.ЗаказПокупателя,
	|					ТаблицаЗапасы.ЗаказНаПроизводство
	|				ИЗ
	|					ПоляПолученияОстатков КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.ЗаказНаПроизводство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|		ЗапасыОстатки.СуммаОстаток КАК СуммаОстаток
	|	ИЗ
	|		ВЗЗапасыОстатки КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ДвиженияДокументаЗапасы.ЗаказНаПроизводство,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.ЗаказНаПроизводство";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	
	// Этап 1: Перемещение
	ВременнаяТаблицаЗапасыПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	
	ПустаяСпецификация = Справочники.Спецификации.ПустаяСсылка();
	ПустойЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
	ПустойЗаказНаПроизводство = Документы.ЗаказНаПроизводство.ПустаяСсылка();
	
	Для каждого СтрокаТаблицы Из ТаблицаЗапасы Цикл
		
		СтруктураДляПоискаПеремещение = Новый Структура;
		СтруктураДляПоискаПеремещение.Вставить("Организация", СтрокаТаблицы.Организация);
		СтруктураДляПоискаПеремещение.Вставить("СтруктурнаяЕдиница", СтрокаТаблицы.СтруктурнаяЕдиницаЗапасов);
		СтруктураДляПоискаПеремещение.Вставить("СчетУчета", СтрокаТаблицы.СчетУчетаЗапасов);
		СтруктураДляПоискаПеремещение.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		СтруктураДляПоискаПеремещение.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
		СтруктураДляПоискаПеремещение.Вставить("Партия", СтрокаТаблицы.Партия);
		СтруктураДляПоискаПеремещение.Вставить("ЗаказНаПроизводство", ПустойЗаказНаПроизводство);
		
		КоличествоТребуетсяРезервПеремещение = СтрокаТаблицы.Резерв;
		КоличествоТребуетсяСвободныйОстатокПеремещение = СтрокаТаблицы.Количество;
		
		// Перемещение резерва
		Если КоличествоТребуетсяРезервПеремещение > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение
															 - КоличествоТребуетсяРезервПеремещение;
			
			СтруктураДляПоискаПеремещение.Вставить("ЗаказПокупателя", СтрокаТаблицы.ЗаказПокупателя);
			
			МассивСтрокОстатковПеремещение = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоискаПеремещение);
			
			КоличествоОстатокПеремещение = 0;
			СуммаОстатокПеремещение = 0;
			
			Если МассивСтрокОстатковПеремещение.Количество() > 0 Тогда
				КоличествоОстатокПеремещение = МассивСтрокОстатковПеремещение[0].КоличествоОстаток;
				СуммаОстатокПеремещение = МассивСтрокОстатковПеремещение[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстатокПеремещение > 0 И КоличествоОстатокПеремещение > КоличествоТребуетсяРезервПеремещение Тогда

				СуммаКСписаниюПеремещение = Окр(СуммаОстатокПеремещение * КоличествоТребуетсяРезервПеремещение / КоличествоОстатокПеремещение , 2, 1);

				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = МассивСтрокОстатковПеремещение[0].КоличествоОстаток - КоличествоТребуетсяРезервПеремещение;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = МассивСтрокОстатковПеремещение[0].СуммаОстаток - СуммаКСписаниюПеремещение;

			ИначеЕсли КоличествоОстатокПеремещение = КоличествоТребуетсяРезервПеремещение Тогда

				СуммаКСписаниюПеремещение = СуммаОстатокПеремещение;

				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = 0;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = 0;

			Иначе
				СуммаКСписаниюПеремещение = 0;	
			КонецЕсли;
	
			// Расход.
			НоваяСтрокаРасход = ВременнаяТаблицаЗапасыПеремещение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасход, СтрокаТаблицы);
			
			НоваяСтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			НоваяСтрокаРасход.СтруктурнаяЕдиница = СтрокаТаблицы.СтруктурнаяЕдиницаЗапасов;
			НоваяСтрокаРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицы.СтруктурнаяЕдиница;
			НоваяСтрокаРасход.СчетУчета = СтрокаТаблицы.СчетУчетаЗапасов;
			НоваяСтрокаРасход.КоррСчетУчета = СтрокаТаблицы.СчетУчета;
			
			НоваяСтрокаРасход.Спецификация = ПустаяСпецификация;
			НоваяСтрокаРасход.ЗаказНаПроизводство = ПустойЗаказНаПроизводство;
			
			НоваяСтрокаРасход.КоррНоменклатура = СтрокаТаблицы.Номенклатура;
			НоваяСтрокаРасход.КоррХарактеристика = СтрокаТаблицы.Характеристика;
			НоваяСтрокаРасход.КоррПартия = СтрокаТаблицы.Партия;
			НоваяСтрокаРасход.КоррСпецификация = ПустаяСпецификация;
			НоваяСтрокаРасход.КоррЗаказПокупателя = СтрокаТаблицы.ЗаказПокупателя;
			НоваяСтрокаРасход.КоррЗаказНаПроизводство = ПустойЗаказНаПроизводство;
			НоваяСтрокаРасход.Содержание = ТекстСодержаниеПеремещение;
			НоваяСтрокаРасход.СодержаниеПроводки = ТекстСодержаниеПеремещение;
			
			НоваяСтрокаРасход.Сумма = СуммаКСписаниюПеремещение;
			НоваяСтрокаРасход.Количество = КоличествоТребуетсяРезервПеремещение;
												
			// Приход.
			НоваяСтрокаПриход = ВременнаяТаблицаЗапасыПеремещение.Добавить();
			ПроизводствоСервер.ЗаполнитьДвижениеЗапасыЗеркально(НоваяСтрокаПриход, НоваяСтрокаРасход);
					
		КонецЕсли;
		
		// Перемещение свободного остатка
		Если КоличествоТребуетсяСвободныйОстатокПеремещение > 0 Тогда
			
			СтруктураДляПоискаПеремещение.Вставить("ЗаказПокупателя", ПустойЗаказПокупателя);
			
			МассивСтрокОстатковПеремещение = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоискаПеремещение);
			
			КоличествоОстатокПеремещение = 0;
			СуммаОстатокПеремещение = 0;
			
			Если МассивСтрокОстатковПеремещение.Количество() > 0 Тогда
				КоличествоОстатокПеремещение = МассивСтрокОстатковПеремещение[0].КоличествоОстаток;
				СуммаОстатокПеремещение = МассивСтрокОстатковПеремещение[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстатокПеремещение > 0 И КоличествоОстатокПеремещение > КоличествоТребуетсяСвободныйОстатокПеремещение Тогда

				СуммаКСписаниюПеремещение = Окр(СуммаОстатокПеремещение * КоличествоТребуетсяСвободныйОстатокПеремещение / КоличествоОстатокПеремещение , 2, 1);

				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = МассивСтрокОстатковПеремещение[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстатокПеремещение;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = МассивСтрокОстатковПеремещение[0].СуммаОстаток - СуммаКСписаниюПеремещение;

			ИначеЕсли КоличествоОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение Тогда

				СуммаКСписаниюПеремещение = СуммаОстатокПеремещение;

				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = 0;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = 0;

			Иначе
				СуммаКСписаниюПеремещение = 0;	
			КонецЕсли;
	
			// Расход.
			НоваяСтрокаРасход = ВременнаяТаблицаЗапасыПеремещение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасход, СтрокаТаблицы);
			
			НоваяСтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			НоваяСтрокаРасход.СтруктурнаяЕдиница = СтрокаТаблицы.СтруктурнаяЕдиницаЗапасов;
			НоваяСтрокаРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицы.СтруктурнаяЕдиница;
			НоваяСтрокаРасход.СчетУчета = СтрокаТаблицы.СчетУчетаЗапасов;
			НоваяСтрокаРасход.КоррСчетУчета = СтрокаТаблицы.СчетУчета;
			
			НоваяСтрокаРасход.Спецификация = ПустаяСпецификация;
			НоваяСтрокаРасход.ЗаказПокупателя = ПустойЗаказПокупателя;
			НоваяСтрокаРасход.ЗаказНаПроизводство = ПустойЗаказНаПроизводство;
			
			НоваяСтрокаРасход.КоррНоменклатура = СтрокаТаблицы.Номенклатура;
			НоваяСтрокаРасход.КоррХарактеристика = СтрокаТаблицы.Характеристика;
			НоваяСтрокаРасход.КоррПартия = СтрокаТаблицы.Партия;
			НоваяСтрокаРасход.КоррСпецификация = ПустаяСпецификация;
			НоваяСтрокаРасход.КоррЗаказПокупателя = СтрокаТаблицы.ЗаказПокупателя;
			НоваяСтрокаРасход.КоррЗаказНаПроизводство = ПустойЗаказНаПроизводство;
			НоваяСтрокаРасход.Содержание = ТекстСодержаниеПеремещение;
			НоваяСтрокаРасход.СодержаниеПроводки = ТекстСодержаниеПеремещение;
			
			НоваяСтрокаРасход.Сумма = СуммаКСписаниюПеремещение;
			НоваяСтрокаРасход.Количество = КоличествоТребуетсяСвободныйОстатокПеремещение;
			
			// Приход.
			НоваяСтрокаПриход = ВременнаяТаблицаЗапасыПеремещение.Добавить();
			ПроизводствоСервер.ЗаполнитьДвижениеЗапасыЗеркально(НоваяСтрокаПриход, НоваяСтрокаРасход);
			
		КонецЕсли;
					
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ВременнаяТаблицаЗапасыПеремещение Цикл
		
		Если СтрокаТаблицы.СтруктурнаяЕдиница=СтрокаТаблицы.КоррСтруктурнаяЕдиница
			И СтрокаТаблицы.ЗаказПокупателя=СтрокаТаблицы.КоррЗаказПокупателя Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаТаблицыЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗапасы, СтрокаТаблицы);

		// Сформируем проводки.
		Если СтрокаТаблицы.Сумма<>0 И СтрокаТаблицы.ВидДвижения=ВидДвиженияНакопления.Приход Тогда
			СтрокаТаблицаУправленческийПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческийПеремещение, СтрокаТаблицы);
		КонецЕсли;
			
	КонецЦикла;	
	
	// Этап 2: Списание запасов
	ВременнаяТаблицаЗапасыПеремещение.Свернуть("ВидДвижения,Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя", "Количество,Сумма");
	ВременнаяТаблицаЗапасыПроизводство = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	
	Для каждого СтрокаТаблицы Из ТаблицаРаспределение Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицы.Партия);
		
		КоличествоТребуетсяОстаток = СтрокаТаблицы.Количество;
		
		Если КоличествоТребуетсяОстаток > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицы.ЗаказПокупателя);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			МассивСтрокОстатков = ВременнаяТаблицаЗапасыПеремещение.НайтиСтроки(СтруктураДляПоиска);
			Если МассивСтрокОстатков.Количество()>0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].Количество;
				СуммаОстаток = МассивСтрокОстатков[0].Сумма;
			КонецЕсли; 
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяОстаток Тогда

				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяОстаток / КоличествоОстаток , 2, 1);

				МассивСтрокОстатков[0].Количество = МассивСтрокОстатков[0].Количество - КоличествоТребуетсяОстаток;
				МассивСтрокОстатков[0].Сумма = МассивСтрокОстатков[0].Сумма - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяОстаток Тогда

				СуммаКСписанию = СуммаОстаток;

				МассивСтрокОстатков[0].Количество = 0;
				МассивСтрокОстатков[0].Сумма = 0;

			Иначе
				СуммаКСписанию = 0;	
			КонецЕсли;
			
			СуммаСборки = СуммаСборки + СуммаКСписанию;
	
			// Расход.
			НоваяСтрокаРасход = ВременнаяТаблицаЗапасыПроизводство.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасход, СтрокаТаблицы);
			
			НоваяСтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			НоваяСтрокаРасход.Сумма = СуммаКСписанию;
			НоваяСтрокаРасход.Количество = КоличествоТребуетсяОстаток;
			НоваяСтрокаРасход.ЗатратыНаВыпуск = Истина;
			НоваяСтрокаРасход.ЗаказПокупателя = СтрокаТаблицы.ЗаказПокупателя;
			НоваяСтрокаРасход.КоррЗаказПокупателя = СтрокаТаблицы.ЗаказПокупателя;
			НоваяСтрокаРасход.ЗаказНаПроизводство = ПустойЗаказНаПроизводство;

			Если СтрокаТаблицы.ИспользуютсяЭтапы Тогда
				НоваяСтрокаРасход.КоррЗаказНаПроизводство = СтрокаТаблицы.ЗаказНаПроизводство;
				НоваяСтрокаРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицы.ПодразделениеЗавершающегоЭтапа;
				НоваяСтрокаРасход.КоррСчетУчета = ПланыСчетов.Управленческий.НезавершенноеПроизводство;
			Иначе
				НоваяСтрокаРасход.КоррЗаказНаПроизводство = ПустойЗаказНаПроизводство;
				НоваяСтрокаРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицы.СтруктурнаяЕдиница;
				НоваяСтрокаРасход.КоррСчетУчета = СтрокаТаблицы.СчетУчетаПродукцииПроизводство;
			КонецЕсли; 
			
			// Приход.
			Если Окр(СуммаКСписанию, 2, 1) <> 0 ИЛИ СтрокаТаблицы.ИспользуютсяЭтапы Тогда
				
				НоваяСтрокаПриход = ВременнаяТаблицаЗапасыПроизводство.Добавить();
				ПроизводствоСервер.ЗаполнитьДвижениеЗапасыЗеркально(НоваяСтрокаПриход, НоваяСтрокаРасход);
				
				НоваяСтрокаПриход.Количество = 0;
				НоваяСтрокаПриход.ЗатратыНаВыпуск = Ложь;
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ВременнаяТаблицаЗапасыПроизводство Цикл
		
		Если СтрокаТаблицы.Сумма=0 И СтрокаТаблицы.ВидДвижения=ВидДвиженияНакопления.Приход Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаТаблицыЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗапасы, СтрокаТаблицы);

		Если СтрокаТаблицы.Сумма=0 ИЛИ СтрокаТаблицы.ВидДвижения<>ВидДвиженияНакопления.Приход Тогда
			Продолжить;
		КонецЕсли; 
		
		// Сформируем проводки.
		СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицы);
		
	КонецЦикла;	
	
	// Этап 3: Перемещение себестоимости продукции
	ВременнаяТаблицаЗапасыПроизводство.Свернуть("ВидДвижения,Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,Спецификация,ЗаказПокупателя,ЗаказНаПроизводство", "Сумма");
	
	КолонкиСвертки = "";
	КолонкиСуммирования = "";
	Для каждого Колонка Из ТаблицаПродукция.Колонки Цикл
		Если Колонка.Имя="НомерСтроки" Тогда
			Продолжить;
		КонецЕсли; 
		Если Колонка.ТипЗначения.Типы().Найти(Тип("Число"))<>Неопределено Тогда
			КолонкиСуммирования = КолонкиСуммирования + ?(ПустаяСтрока(КолонкиСуммирования), "", ", ") + Колонка.Имя;
		Иначе
			КолонкиСвертки = КолонкиСвертки + ?(ПустаяСтрока(КолонкиСвертки), "", ", ") + Колонка.Имя;
		КонецЕсли; 
	КонецЦикла; 
	ТаблицаПродукция.Свернуть(КолонкиСвертки, КолонкиСуммирования);
	
	Для каждого СтрокаТаблицы Из ТаблицаПродукция Цикл
		
		Если СтрокаТаблицы.ИспользуютсяЭтапы 
			И НЕ СтрокаТаблицы.ЗавершающийЭтап Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицы.Организация);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицы.Партия);
		СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицы.ЗаказПокупателя);
		СтруктураДляПоиска.Вставить("Спецификация", СтрокаТаблицы.Спецификация);
		Если СтрокаТаблицы.ИспользуютсяЭтапы Тогда
			СтруктураДляПоиска.Вставить("ЗаказНаПроизводство", СтрокаТаблицы.ЗаказНаПроизводство);
			СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицы.ПодразделениеЗавершающегоЭтапа);
			СтруктураДляПоиска.Вставить("СчетУчета", ПланыСчетов.Управленческий.НезавершенноеПроизводство);
		Иначе
			СтруктураДляПоиска.Вставить("ЗаказНаПроизводство", ПустойЗаказНаПроизводство);
			СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицы.СтруктурнаяЕдиница);
			СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицы.СчетУчета);
		КонецЕсли; 
			
		СуммаПроизводство = 0;
		МассивСтрокОстатков = ВременнаяТаблицаЗапасыПроизводство.НайтиСтроки(СтруктураДляПоиска);
		Если МассивСтрокОстатков.Количество()>0 Тогда
			СуммаПроизводство = МассивСтрокОстатков[0].Сумма;
		КонецЕсли; 
			
		// Перемещение накопленной себестоимости при завершении производства
		Если СтрокаТаблицы.ИспользуютсяЭтапы 
			И СтрокаТаблицы.ЗавершающийЭтап Тогда
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицы.Организация);
			СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицы.ПодразделениеЗавершающегоЭтапа);
			СтруктураДляПоиска.Вставить("СчетУчета", ПланыСчетов.Управленческий.НезавершенноеПроизводство);
			СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
			СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицы.Партия);
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицы.ЗаказПокупателя);
			СтруктураДляПоиска.Вставить("ЗаказНаПроизводство", СтрокаТаблицы.ЗаказНаПроизводство);
			
			МассивСтрокОстатковНакопление = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			СуммаОстаток = 0;
			Если МассивСтрокОстатковНакопление.Количество() > 0 Тогда
				СуммаОстаток = МассивСтрокОстатковНакопление[0].СуммаОстаток;
				МассивСтрокОстатковНакопление[0].СуммаОстаток = 0;
			КонецЕсли;
			
			СуммаПроизводство = СуммаПроизводство + СуммаОстаток;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаказНаПроизводство)
				ИЛИ СтрокаТаблицы.СчетУчета<>ПланыСчетов.Управленческий.НезавершенноеПроизводство
				ИЛИ СтрокаТаблицы.СтруктурнаяЕдиница<>СтрокаТаблицы.ПодразделениеЗавершающегоЭтапа Тогда
				
				// Расход.
				НоваяСтрокаРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРасход, СтрокаТаблицы);
				
				НоваяСтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
				
				НоваяСтрокаРасход.СтруктурнаяЕдиница = СтрокаТаблицы.ПодразделениеЗавершающегоЭтапа;
				НоваяСтрокаРасход.СчетУчета = ПланыСчетов.Управленческий.НезавершенноеПроизводство;
				НоваяСтрокаРасход.ЗаказНаПроизводство = СтрокаТаблицы.ЗаказНаПроизводство;
				
				НоваяСтрокаРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицы.СтруктурнаяЕдиница;
				НоваяСтрокаРасход.КоррСчетУчета = СтрокаТаблицы.СчетУчета;
				НоваяСтрокаРасход.КоррЗаказНаПроизводство = ПустойЗаказНаПроизводство;
				НоваяСтрокаРасход.КоррЗаказПокупателя = СтрокаТаблицы.ЗаказПокупателя;
				НоваяСтрокаРасход.КоррНоменклатура = СтрокаТаблицы.Номенклатура;
				НоваяСтрокаРасход.КоррХарактеристика = СтрокаТаблицы.Характеристика;
				НоваяСтрокаРасход.КоррПартия = СтрокаТаблицы.Партия;
				НоваяСтрокаРасход.КоррСпецификация = СтрокаТаблицы.Спецификация;
				НоваяСтрокаРасход.Содержание = ТекстСодержаниеЗавершениеПроизводства;
				НоваяСтрокаРасход.СодержаниеПроводки = ТекстСодержаниеЗавершениеПроизводства;
				
				НоваяСтрокаРасход.Сумма = СуммаПроизводство;
				НоваяСтрокаРасход.Количество = 0;
				
				// Приход.
				НоваяСтрокаПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ПроизводствоСервер.ЗаполнитьДвижениеЗапасыЗеркально(НоваяСтрокаПриход, НоваяСтрокаРасход);
				
				Если СуммаПроизводство<>0 Тогда
					// Сформируем проводки.
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, НоваяСтрокаПриход);
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли; 
		
		// Приход количества продукции.
		НоваяСтрокаПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПриход, СтрокаТаблицы, "Организация, СценарийПланирования, Период, Номенклатура, Характеристика, Партия, Спецификация, ЗаказПокупателя, СтруктурнаяЕдиница, СчетУчета, Количество");
		
		НоваяСтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
		
		НоваяСтрокаПриход.Содержание = ТекстСодержаниеСборкаЗапасов;
		НоваяСтрокаПриход.СодержаниеПроводки = ТекстСодержаниеСборкаЗапасов;
		
		// Перемещение итоговой себестоимости продукции
		Если СтрокаТаблицы.СтруктурнаяЕдиница<>СтрокаТаблицы.СтруктурнаяЕдиницаПродукции
			ИЛИ СтрокаТаблицы.СчетУчета<>СтрокаТаблицы.СчетУчетаПродукции Тогда
			
			// Расход.
			НоваяСтрокаРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасход, СтрокаТаблицы);
			
			НоваяСтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			НоваяСтрокаРасход.ЗаказНаПроизводство = ПустойЗаказНаПроизводство;
			
			НоваяСтрокаРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицы.СтруктурнаяЕдиницаПродукции;
			НоваяСтрокаРасход.КоррСчетУчета = СтрокаТаблицы.СчетУчетаПродукции;
			НоваяСтрокаРасход.КоррЗаказПокупателя = СтрокаТаблицы.ЗаказПокупателя;
			НоваяСтрокаРасход.КоррЗаказНаПроизводство = ПустойЗаказНаПроизводство;
			НоваяСтрокаРасход.КоррНоменклатура = СтрокаТаблицы.Номенклатура;
			НоваяСтрокаРасход.КоррХарактеристика = СтрокаТаблицы.Характеристика;
			НоваяСтрокаРасход.КоррПартия = СтрокаТаблицы.Партия;
			НоваяСтрокаРасход.КоррСпецификация = СтрокаТаблицы.Спецификация;
			НоваяСтрокаРасход.Содержание = ТекстСодержаниеПеремещение;
			НоваяСтрокаРасход.СодержаниеПроводки = ТекстСодержаниеПеремещение;
			
			НоваяСтрокаРасход.Сумма = СуммаПроизводство;
			
			// Приход.
			НоваяСтрокаПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ПроизводствоСервер.ЗаполнитьДвижениеЗапасыЗеркально(НоваяСтрокаПриход, НоваяСтрокаРасход);

			Если СуммаПроизводство<>0 Тогда
				// Сформируем проводки.
				СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, НоваяСтрокаПриход);
			КонецЕсли; 
			
		КонецЕсли; 

	КонецЦикла; 
	
КонецПроцедуры // СформироватьТаблицаЗапасыЗапасыСборкаПеремещение()

Процедура СформироватьТаблицаЗапасыВРазрезеГТДСборка(СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки
	|	,ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|	,ТаблицаЗапасыНаСкладах.Период КАК Период
	|	,ТаблицаЗапасыНаСкладах.Организация КАК Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия КАК Партия
	|	,ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД
	|	,ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения
	|	,СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.Россия)
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.ПустаяСсылка)
	|	И ТаблицаЗапасыНаСкладах.НомерГТД <> Значение(Справочник.НомераГТД.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Период
	|	,ТаблицаЗапасыНаСкладах.Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия
	|	,ТаблицаЗапасыНаСкладах.НомерГТД
	|	,ТаблицаЗапасыНаСкладах.СтранаПроисхождения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ВременнаяТаблицаПродукция.НомерСтроки) КАК НомерСтроки
	|	,ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
	|	,ВременнаяТаблицаПродукция.Период КАК Период
	|	,ВременнаяТаблицаПродукция.Организация КАК Организация
	|	,ВременнаяТаблицаПродукция.Номенклатура КАК Номенклатура
	|	,ВременнаяТаблицаПродукция.Характеристика КАК Характеристика
	|	,ВременнаяТаблицаПродукция.Партия КАК Партия
	|	,ВременнаяТаблицаПродукция.НомерГТД КАК НомерГТД
	|	,ВременнаяТаблицаПродукция.СтранаПроисхождения КАК СтранаПроисхождения
	|	,СУММА(ВременнаяТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ВременнаяТаблицаПродукция
	|ГДЕ
	|	ВременнаяТаблицаПродукция.СтранаПроисхождения <> Значение(Справочник.СтраныМира.Россия)
	|	И ВременнаяТаблицаПродукция.СтранаПроисхождения <> Значение(Справочник.СтраныМира.ПустаяСсылка)
	|	И ВременнаяТаблицаПродукция.НомерГТД <> Значение(Справочник.НомераГТД.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаПродукция.Период
	|	,ВременнаяТаблицаПродукция.Организация
	|	,ВременнаяТаблицаПродукция.Номенклатура
	|	,ВременнаяТаблицаПродукция.Характеристика
	|	,ВременнаяТаблицаПродукция.Партия
	|	,ВременнаяТаблицаПродукция.НомерГТД
	|	,ВременнаяТаблицаПродукция.СтранаПроисхождения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыВРазрезеГТД", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПотребностьВЗапасахСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИспользоватьРезервирование", СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|				ИЛИ ВЫБОР
	|					КОГДА ТаблицаЗапасы.ЗаказНаПроизводство ССЫЛКА Документ.ЗаказНаПроизводство
	|							И ТаблицаЗапасы.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|						ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|					ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказПокупателя КАК Документ.ЗаказПокупателя).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|				КОНЕЦ
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|					И ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказамНаПроизводство, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|			ТОГДА ТаблицаЗапасы.ЗаказНаПроизводство
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказНаПроизводство,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|				ИЛИ ВЫБОР
	|					КОГДА ТаблицаЗапасы.ЗаказНаПроизводство ССЫЛКА Документ.ЗаказНаПроизводство
	|							И ТаблицаЗапасы.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|						ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|					ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказПокупателя КАК Документ.ЗаказПокупателя).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|				КОНЕЦ
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|					И ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказамНаПроизводство, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|			ТОГДА ТаблицаЗапасы.ЗаказНаПроизводство
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаПотребностьВЗапасах = Запрос.Выполнить().Выгрузить();
	РегистрыНакопления.ПотребностьВЗапасах.ДобавитьДвиженияСУчетомСкладовИОстатков(ДокументСсылкаСборкаЗапасов, 
		ТаблицаПотребностьВЗапасах);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПотребностьВЗапасах", ТаблицаПотребностьВЗапасах);
	
КонецПроцедуры // СформироватьТаблицаПотребностьВЗапасахСборка()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицуРаспределенияМатериаловСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства) Экспорт
	
	ТаблицаРаспределения = ПроизводствоСервер.ОбъединитьЗапасыИРаспределение(ДокументСсылкаСборкаЗапасов);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаРаспределения.Ссылка КАК Документ.СборкаЗапасов) КАК Ссылка,
	|	ТаблицаРаспределения.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРаспределения.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	ВЫРАЗИТЬ(ТаблицаРаспределения.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаРаспределения.Характеристика КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаРаспределения.Партия КАК Справочник.ПартииНоменклатуры) КАК Партия,
	|	ТаблицаРаспределения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаРаспределения.Спецификация КАК Спецификация,
	|	ВЫРАЗИТЬ(ТаблицаРаспределения.СтруктурнаяЕдиница КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница,
	|	ТаблицаРаспределения.Ячейка КАК Ячейка,
	|	ТаблицаРаспределения.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаРаспределения.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаРаспределения.НомерГТД КАК НомерГТД,
	|	ТаблицаРаспределения.Количество КАК Количество,
	|	ТаблицаРаспределения.Резерв КАК Резерв,
	|	ТаблицаРаспределения.ДоляСтоимости КАК ДоляСтоимости
	|ПОМЕСТИТЬ ТаблицаРаспределения
	|ИЗ
	|	&ТаблицаРаспределения КАК ТаблицаРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРаспределения.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРаспределения.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	ТаблицаРаспределения.Ссылка КАК Ссылка,
	|	ТаблицаРаспределения.Ссылка.Дата КАК Период,
	|	ТаблицаРаспределения.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаРаспределения.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад КАК ОрдерныйСклад,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА ТаблицаРаспределения.Ссылка.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	ТаблицаРаспределения.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаРаспределения.СтруктурнаяЕдиница.ОрдерныйСклад КАК ОрдерныйСкладЗапасов,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА ТаблицаРаспределения.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК ЯчейкаЗапасов,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ТаблицаРаспределения.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаРаспределения.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА ТаблицаРаспределения.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ ТаблицаРаспределения.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ТаблицаРаспределения.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаРаспределения.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА ТаблицаРаспределения.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ ТаблицаРаспределения.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчетаЗапасов,
	|	ТаблицаРаспределения.Номенклатура КАК Номенклатура,
	|	ТаблицаРаспределения.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаРаспределения.НомерГТД КАК НомерГТД,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК КоррНоменклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ТаблицаРаспределения.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ТаблицаРаспределения.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ТаблицаРаспределения.Партия.Статус
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ПустаяСсылка)
	|	КОНЕЦ КАК ПартияСтатус,
	|	ТаблицаРаспределения.Спецификация КАК Спецификация,
	|	ТаблицаРаспределения.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаРаспределения.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаРаспределения.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Коэффициент,
	|	ТаблицаРаспределения.Количество КАК Количество,
	|	ТаблицаРаспределения.Резерв КАК Резерв,
	|	ЛОЖЬ КАК Распределено
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	ТаблицаРаспределения КАК ТаблицаРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.НомерСтроки КАК НомерСтроки,
	|	Запасы.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	Запасы.Ссылка КАК Ссылка,
	|	Запасы.Период КАК Период,
	|	Запасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	Запасы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	Запасы.Ячейка КАК Ячейка,
	|	Запасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиницаЗапасов,
	|	Запасы.ЯчейкаЗапасов КАК ЯчейкаЗапасов,
	|	Запасы.ОрдерныйСкладЗапасов КАК ОрдерныйСкладЗапасов,
	|	Продукция.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	Продукция.ЯчейкаПродукции КАК ЯчейкаПродукции,
	|	Продукция.ОрдерныйСкладПродукции КАК ОрдерныйСкладПродукции,
	|	Запасы.СчетУчета КАК СчетУчетаЗапасовПроизводство,
	|	Продукция.СчетУчета КАК СчетУчетаПродукцииПроизводство,
	|	Запасы.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	Продукция.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	Запасы.НомерГТД КАК НомерГТД,
	|	Запасы.Характеристика КАК Характеристика,
	|	Запасы.Партия КАК Партия,
	|	Запасы.ПартияСтатус КАК ПартияСтатус,
	|	Запасы.Спецификация КАК Спецификация,
	|	Продукция.Номенклатура КАК КоррНоменклатура,
	|	Продукция.Характеристика КАК КоррХарактеристика,
	|	Продукция.Партия КАК КоррПартия,
	|	Продукция.Спецификация КАК КоррСпецификация,
	|	Запасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА Продукция.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Продукция.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоСкладам
	|		КОГДА Запасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Запасы.ЗаказПокупателя КАК Документ.ЗаказПокупателя).УчетПотребностиПоСкладам
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчетПотребностиПоСкладам,
	|	ВЫРАЗИТЬ(Запасы.Количество * Запасы.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(Запасы.Резерв * Запасы.Коэффициент КАК ЧИСЛО(15, 3)) КАК Резерв,
	|	Запасы.Распределено КАК Распределено,
	|	Продукция.Количество КАК КоррКоличество,
	|	Продукция.ЗавершающийЭтап КАК ЗавершающийЭтап,
	|	Продукция.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Продукция.ПодразделениеЗавершающегоЭтапа КАК ПодразделениеЗавершающегоЭтапа,
	|	Продукция.ИспользуютсяЭтапы КАК ИспользуютсяЭтапы
	|ИЗ
	|	Запасы КАК Запасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПродукция КАК Продукция
	|		ПО (Продукция.КлючСвязи = Запасы.КлючСвязиПродукция)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Партия КАК Партия,
	|	ВложенныйЗапрос.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВложенныйЗапрос.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиницаЗапасов,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	СУММА(ВложенныйЗапрос.Резерв) КАК Резерв
	|ИЗ
	|	(ВЫБРАТЬ
	|		Запасы.Номенклатура КАК Номенклатура,
	|		Запасы.Характеристика КАК Характеристика,
	|		Запасы.Партия КАК Партия,
	|		Запасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|		Запасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиницаЗапасов,
	|		-СУММА(ВЫРАЗИТЬ(Запасы.Количество * Запасы.Коэффициент КАК ЧИСЛО(15, 3))) КАК Количество,
	|		-СУММА(ВЫРАЗИТЬ(Запасы.Резерв * Запасы.Коэффициент КАК ЧИСЛО(15, 3))) КАК Резерв
	|	ИЗ
	|		Запасы КАК Запасы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Запасы.Номенклатура,
	|		Запасы.Характеристика,
	|		Запасы.Партия,
	|		Запасы.ЗаказПокупателя,
	|		Запасы.СтруктурнаяЕдиницаЗапасов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Запасы.Номенклатура,
	|		Запасы.Характеристика,
	|		Запасы.Партия,
	|		Запасы.ЗаказПокупателя,
	|		Запасы.СтруктурнаяЕдиницаЗапасов,
	|		ВЫРАЗИТЬ(СУММА(Запасы.Количество) * Запасы.Коэффициент КАК ЧИСЛО(15, 3)),
	|		ВЫРАЗИТЬ(СУММА(Запасы.Резерв) * Запасы.Коэффициент КАК ЧИСЛО(15, 3))
	|	ИЗ
	|		Запасы КАК Запасы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Запасы.Номенклатура,
	|		Запасы.Характеристика,
	|		Запасы.Партия,
	|		Запасы.ЗаказПокупателя,
	|		Запасы.СтруктурнаяЕдиницаЗапасов,
	|		Запасы.Коэффициент) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Партия,
	|	ВложенныйЗапрос.ЗаказПокупателя,
	|	ВложенныйЗапрос.СтруктурнаяЕдиницаЗапасов
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВложенныйЗапрос.Количество) <> 0
	|		ИЛИ СУММА(ВложенныйЗапрос.Резерв) <> 0)";
	
	Запрос.УстановитьПараметр("ТаблицаРаспределения", ТаблицаРаспределения);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаМатериалов = Результат.Получить(2).Выгрузить();
	
	// Проверка ошибок округления. Расхождение добавляется к строке с максимальным значением 
	ВыборкаОкругления = Результат.Получить(3).Выбрать();
	Пока ВыборкаОкругления.Следующий() Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", ВыборкаОкругления.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", ВыборкаОкругления.Характеристика);
		СтруктураОтбора.Вставить("Партия", ВыборкаОкругления.Партия);
		СтруктураОтбора.Вставить("ЗаказПокупателя", ВыборкаОкругления.ЗаказПокупателя);
		СтруктураОтбора.Вставить("СтруктурнаяЕдиницаЗапасов", ВыборкаОкругления.СтруктурнаяЕдиницаЗапасов);
		Строки = ТаблицаМатериалов.НайтиСтроки(СтруктураОтбора);
		Если ВыборкаОкругления.Количество<>0 Тогда
			МаксимальноеЗначение = 0;
			СтрокаКорректировки = Неопределено;
			Для каждого СтрокаРаспределения Из Строки Цикл
				Если СтрокаРаспределения.Количество>МаксимальноеЗначение И СтрокаРаспределения.Количество+ВыборкаОкругления.Количество>0 Тогда
					СтрокаКорректировки = СтрокаРаспределения;
					МаксимальноеЗначение = СтрокаРаспределения.Количество;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаКорректировки<>Неопределено Тогда
				СтрокаКорректировки.Количество = СтрокаКорректировки.Количество+ВыборкаОкругления.Количество;
			КонецЕсли; 
		КонецЕсли; 
		Если ВыборкаОкругления.Резерв<>0 Тогда
			МаксимальноеЗначение = 0;
			СтрокаКорректировки = Неопределено;
			Для каждого СтрокаРаспределения Из Строки Цикл
				Если СтрокаРаспределения.Резерв>МаксимальноеЗначение И СтрокаРаспределения.Резерв+ВыборкаОкругления.Резерв>0 Тогда
					СтрокаКорректировки = СтрокаРаспределения;
					МаксимальноеЗначение = СтрокаРаспределения.Резерв;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаКорректировки<>Неопределено Тогда
				СтрокаКорректировки.Резерв = СтрокаКорректировки.Резерв+ВыборкаОкругления.Резерв;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРаспределенияМатериаловСборка", ТаблицаМатериалов);
	
КонецПроцедуры // СформироватьТаблицуРаспределенияМатериаловСборка()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеПоЗапасамСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СборкаЗапасовЗапасы.НомерСтроки КАК НомерСтроки,
	|	СборкаЗапасовЗапасы.Период КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	СборкаЗапасовЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СборкаЗапасовЗапасы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СборкаЗапасовЗапасы.Ячейка КАК Ячейка,
	|	СборкаЗапасовЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиницаЗапасов,
	|	СборкаЗапасовЗапасы.ОрдерныйСкладЗапасов КАК ОрдерныйСкладЗапасов,
	|	СборкаЗапасовЗапасы.ЯчейкаЗапасов КАК ЯчейкаЗапасов,
	|	СборкаЗапасовЗапасы.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	СборкаЗапасовЗапасы.ОрдерныйСкладПродукции КАК ОрдерныйСкладПродукции,
	|	СборкаЗапасовЗапасы.ЯчейкаПродукции КАК ЯчейкаПродукции,
	|	СборкаЗапасовЗапасы.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	СборкаЗапасовЗапасы.СчетУчетаЗапасовПроизводство КАК СчетУчетаЗапасовПроизводство,
	|	СборкаЗапасовЗапасы.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	СборкаЗапасовЗапасы.СчетУчетаПродукцииПроизводство КАК СчетУчетаПродукцииПроизводство,
	|	СборкаЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	СборкаЗапасовЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СборкаЗапасовЗапасы.НомерГТД КАК НомерГТД,
	|	СборкаЗапасовЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	СборкаЗапасовЗапасы.Характеристика КАК Характеристика,
	|	СборкаЗапасовЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	СборкаЗапасовЗапасы.Партия КАК Партия,
	|	СборкаЗапасовЗапасы.ПартияСтатус КАК ПартияСтатус,
	|	СборкаЗапасовЗапасы.КоррПартия КАК КоррПартия,
	|	СборкаЗапасовЗапасы.Спецификация КАК Спецификация,
	|	СборкаЗапасовЗапасы.КоррСпецификация КАК КоррСпецификация,
	|	СборкаЗапасовЗапасы.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	СборкаЗапасовЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СборкаЗапасовЗапасы.Количество КАК Количество,
	|	СборкаЗапасовЗапасы.КоррКоличество КАК КоррКоличество,
	|	СборкаЗапасовЗапасы.Резерв КАК Резерв,
	|	0 КАК Сумма,
	|	СборкаЗапасовЗапасы.ЗавершающийЭтап КАК ЗавершающийЭтап,
	|	СборкаЗапасовЗапасы.ИспользуютсяЭтапы КАК ИспользуютсяЭтапы,
	|	СборкаЗапасовЗапасы.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	СборкаЗапасовЗапасы.ПодразделениеЗавершающегоЭтапа КАК ПодразделениеЗавершающегоЭтапа,
	|	&РаспределениеЗапасов КАК СодержаниеПроводки,
	|	&РаспределениеЗапасов КАК Содержание,
	|	&ДатаОбновленияНаРелиз_1_2_1 КАК ДатаОбновленияНаРелиз_1_2_1
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаРаспределенияМатериаловСборка КАК СборкаЗапасовЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	ТаблицаЗапасы.СчетУчетаЗапасовПроизводство КАК СчетУчета,
	|	ТаблицаЗапасы.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ТаблицаЗапасы.Спецификация КАК Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация КАК КоррСпецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ТаблицаЗапасы.ЗаказНаПроизводство КАК КоррЗаказНаПроизводство,
	|	ТаблицаЗапасы.ЗавершающийЭтап КАК ЗавершающийЭтап,
	|	ТаблицаЗапасы.ИспользуютсяЭтапы КАК ИспользуютсяЭтапы,
	|	ТаблицаЗапасы.ПодразделениеЗавершающегоЭтапа КАК ПодразделениеЗавершающегоЭтапа,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК Содержание,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	ЛОЖЬ КАК ЗатратыНаВыпуск,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	0 КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаПродукции,
	|	ТаблицаЗапасы.СчетУчетаЗапасовПроизводство,
	|	ТаблицаЗапасы.СчетУчетаПродукции,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррПартия,
	|	ТаблицаЗапасы.Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.ЗавершающийЭтап,
	|	ТаблицаЗапасы.ИспользуютсяЭтапы,
	|	ТаблицаЗапасы.ПодразделениеЗавершающегоЭтапа,
	|	ТаблицаЗапасы.ЗаказНаПроизводство,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.ЗаказНаПроизводство,
	|	ТаблицаЗапасы.СодержаниеПроводки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.ЯчейкаЗапасов КАК ЯчейкаЗапасов,
	|	ТаблицаЗапасы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов КАК ОрдерныйСкладЗапасов,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Ячейка КАК Ячейка,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.Период < ТаблицаЗапасы.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.ЯчейкаЗапасов,
	|	ТаблицаЗапасы.ОрдерныйСклад,
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Ячейка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки),
	|	ТаблицаЗапасы.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.ЯчейкаЗапасов,
	|	ТаблицаЗапасы.ОрдерныйСклад,
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Ячейка,
	|	СУММА(ТаблицаЗапасы.Количество)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	НЕ ТаблицаЗапасы.ОрдерныйСклад
	|	И ТаблицаЗапасы.Период >= ТаблицаЗапасы.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.ЯчейкаЗапасов,
	|	ТаблицаЗапасы.ОрдерныйСклад,
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Ячейка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаЗапасы.ЗаказПокупателя
	|	КОНЕЦ КАК Заказ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтчетПоПереработке) КАК ТипПриемаПередачи,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ПартияСтатус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаЗапасы.ЗаказПокупателя
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов
	|	И ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов <> ТаблицаЗапасы.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	СУММА(ТаблицаЗапасы.Количество)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад
	|	И ТаблицаЗапасы.Период >= ТаблицаЗапасы.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад
	|	И ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов <> ТаблицаЗапасы.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	СУММА(ТаблицаЗапасы.Количество)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад
	|	И ТаблицаЗапасы.Период < ТаблицаЗапасы.ДатаОбновленияНаРелиз_1_2_1
	|	И ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов <> ТаблицаЗапасы.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("ИспользоватьРезервирование", СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	Запрос.УстановитьПараметр("ТаблицаРаспределенияМатериаловСборка", СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРаспределенияМатериаловСборка);
	
	// Временно: изменение движений по ордерному складу.
	ДатаОбновленияНаРелиз_1_2_1 = Константы.ДатаОбновленияНаРелиз_1_2_1.Получить();
	Запрос.УстановитьПараметр("ДатаОбновленияНаРелиз_1_2_1", ДатаОбновленияНаРелиз_1_2_1);
	
	Запрос.УстановитьПараметр("РаспределениеЗапасов", НСтр("ru = 'Распределение запасов'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Определим таблицу для учета запасов.
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыРаспределение", МассивРезультатов[1].Выгрузить());
	
	СформироватьТаблицаЗапасыСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки);
	
	СформироватьТаблицаЗапасыВРазрезеГТДСборка(СтруктураДополнительныеСвойства);
	
	// Дополним таблицу для запасов.
	ВыборкаРезультатов = МассивРезультатов[2].Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		// Автоперемещение запасов.
		Если (ВыборкаРезультатов.СтруктурнаяЕдиницаЗапасов = ВыборкаРезультатов.СтруктурнаяЕдиница
			И ВыборкаРезультатов.ЯчейкаЗапасов <> ВыборкаРезультатов.Ячейка)
			ИЛИ ВыборкаРезультатов.СтруктурнаяЕдиницаЗапасов <> ВыборкаРезультатов.СтруктурнаяЕдиница Тогда
			
			// Расход.
			Если (ВыборкаРезультатов.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (ВыборкаРезультатов.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ ВыборкаРезультатов.ОрдерныйСкладЗапасов) Тогда
				
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, ВыборкаРезультатов);
			
				СтрокаТаблицыРасход.СтруктурнаяЕдиница = ВыборкаРезультатов.СтруктурнаяЕдиницаЗапасов;
				СтрокаТаблицыРасход.Ячейка = ВыборкаРезультатов.ЯчейкаЗапасов;
				
			КонецЕсли;
			
			// Приход.
			Если (ВыборкаРезультатов.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (ВыборкаРезультатов.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ ВыборкаРезультатов.ОрдерныйСклад) Тогда
			
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, ВыборкаРезультатов);
			
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, ВыборкаРезультатов);
		
	КонецЦикла;
 
	// Определим таблицу израсходованного давальческого сырья, принятого в переработку, за которые будет необходимо
	// отчитаться перед давальцем.
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыИАгентскиеУслугиПринятые", МассивРезультатов[3].Выгрузить());
	
	// Определим таблицу для движения по потребности позиций зависимого спроса.
	СформироватьТаблицаПотребностьВЗапасахСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Автоперемещение запасов (дополним таблицу ТаблицаЗапасыКРасходуСоСкладов).
	ВыборкаРезультатов = МассивРезультатов[4].Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		СтрокаТаблицыРасходПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыКРасходуСоСкладов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПриход, ВыборкаРезультатов);
		
	КонецЦикла;
		
	// Автоперемещение запасов (дополним таблицу ТаблицаЗапасыКПоступлениюНаСклады).
	ВыборкаРезультатов = МассивРезультатов[5].Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		СтрокаТаблицыРасходПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыКПоступлениюНаСклады.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПриход, ВыборкаРезультатов);
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаРаспределенияМатериаловСборка");
	
КонецПроцедуры // ИнициализироватьДанныеПоЗапасамСборка()

#КонецОбласти 

#Область ПродукцияСборка

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРазмещениеЗаказовСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых размещений заказов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПродукция.Организация КАК Организация,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.ИсточникОбеспечения КАК ИсточникОбеспечения
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ИсточникОбеспечения <> НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.ИсточникОбеспечения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РазмещениеЗаказов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	ТаблицаПродукция.Организация КАК Организация,
	|	РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукция.Количество > ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|			ТОГДА ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|		КОГДА ТаблицаПродукция.Количество <= ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|			ТОГДА ТаблицаПродукция.Количество
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РазмещениеЗаказовОстатки.Организация КАК Организация,
	|			РазмещениеЗаказовОстатки.Номенклатура КАК Номенклатура,
	|			РазмещениеЗаказовОстатки.Характеристика КАК Характеристика,
	|			РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|			РазмещениеЗаказовОстатки.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|			СУММА(РазмещениеЗаказовОстатки.КоличествоОстаток) КАК Количество
	|		ИЗ
	|			(ВЫБРАТЬ
	|				РазмещениеЗаказовОстатки.Организация КАК Организация,
	|				РазмещениеЗаказовОстатки.Номенклатура КАК Номенклатура,
	|				РазмещениеЗаказовОстатки.Характеристика КАК Характеристика,
	|				РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|				РазмещениеЗаказовОстатки.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|				РазмещениеЗаказовОстатки.КоличествоОстаток КАК КоличествоОстаток
	|			ИЗ
	|				РегистрНакопления.РазмещениеЗаказов.Остатки(
	|						&МоментКонтроля,
	|						(Организация, Номенклатура, Характеристика, ИсточникОбеспечения) В
	|							(ВЫБРАТЬ
	|								ТаблицаПродукция.Организация КАК Организация,
	|								ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|								ТаблицаПродукция.Характеристика КАК Характеристика,
	|								ТаблицаПродукция.ИсточникОбеспечения КАК ИсточникОбеспечения
	|							ИЗ
	|								ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|							ГДЕ
	|								ТаблицаПродукция.ИсточникОбеспечения <> НЕОПРЕДЕЛЕНО)) КАК РазмещениеЗаказовОстатки
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ДвиженияДокументаРазмещениеЗаказов.Организация,
	|				ДвиженияДокументаРазмещениеЗаказов.Номенклатура,
	|				ДвиженияДокументаРазмещениеЗаказов.Характеристика,
	|				ДвиженияДокументаРазмещениеЗаказов.ЗаказПокупателя,
	|				ДвиженияДокументаРазмещениеЗаказов.ИсточникОбеспечения,
	|				ВЫБОР
	|					КОГДА ДвиженияДокументаРазмещениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						ТОГДА ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|					ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|				КОНЕЦ
	|			ИЗ
	|				РегистрНакопления.РазмещениеЗаказов КАК ДвиженияДокументаРазмещениеЗаказов
	|			ГДЕ
	|				ДвиженияДокументаРазмещениеЗаказов.Регистратор = &Ссылка
	|				И ДвиженияДокументаРазмещениеЗаказов.Период <= &ПериодКонтроля) КАК РазмещениеЗаказовОстатки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РазмещениеЗаказовОстатки.Организация,
	|			РазмещениеЗаказовОстатки.Номенклатура,
	|			РазмещениеЗаказовОстатки.Характеристика,
	|			РазмещениеЗаказовОстатки.ЗаказПокупателя,
	|			РазмещениеЗаказовОстатки.ИсточникОбеспечения) КАК РазмещениеЗаказовОстатки
	|		ПО ТаблицаПродукция.Организация = РазмещениеЗаказовОстатки.Организация
	|			И ТаблицаПродукция.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|			И ТаблицаПродукция.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|			И ТаблицаПродукция.ИсточникОбеспечения = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|			И ТаблицаПродукция.ЗаказПокупателя = РазмещениеЗаказовОстатки.ЗаказПокупателя
	|ГДЕ
	|	ТаблицаПродукция.ИсточникОбеспечения <> НЕОПРЕДЕЛЕНО
	|	И РазмещениеЗаказовОстатки.ЗаказПокупателя ЕСТЬ НЕ NULL ";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.ПериодКонтроля);
	
	РезультатЗапроса = Запрос.Выполнить();

	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРазмещениеЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаРазмещениеЗаказовСборка()

#КонецОбласти 

#Область ЗапасыРазборка

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыЗапасыРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|	ГДЕ
	|		ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток),
	|		СУММА(ЗапасыОстатки.СуммаОстаток)
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		ТребуетсяРезерв = СтрокаТаблицаЗапасы.Резерв;
		ТребуетсяКоличество = СтрокаТаблицаЗапасы.Количество;
		
		Если ТребуетсяРезерв > 0 Тогда
			
			ТребуетсяКоличество = ТребуетсяКоличество - ТребуетсяРезерв;
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
				
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > ТребуетсяРезерв Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * ТребуетсяРезерв / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - ТребуетсяРезерв;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = ТребуетсяРезерв Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			СуммаСборки = СуммаСборки + СуммаКСписанию;
			
			// Спишем запасы со склада (производственного подразделения).
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = ТребуетсяРезерв;
			
			// Отнесем списанные запасы либо на стоимость запасов на складе либо на затраты НЗП.
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.Спецификация = СтрокаТаблицаЗапасы.КоррСпецификация;
				СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
				
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасы.Спецификация;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПокупателя;
				
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
				// Списание запасов.
				Если ЗначениеЗаполнено(СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции) Тогда
					
					// Расход.
					СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыРасход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыРасход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					СтрокаТаблицыРасход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыРасход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыРасход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыРасход.Спецификация = Неопределено;
					СтрокаТаблицыРасход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции;
					СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчетаПродукции;
					СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыРасход.КоррСпецификация = Неопределено;
					СтрокаТаблицыРасход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
					СтрокаТаблицыРасход.Количество = 0;
					
					// Приход.
					СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
					СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции;
					СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаПродукции;
					СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыПриход.Спецификация = Неопределено;
					СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриход.СчетДт = СтрокаТаблицаЗапасы.СчетДтПродукции;
					СтрокаТаблицыПриход.СчетКт = СтрокаТаблицаЗапасы.СчетКтПродукции;
					
					СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыПриход.КоррСпецификация = Неопределено;
					СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
					СтрокаТаблицыПриход.Количество = 0;
					
					СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
					СтрокаТаблицыПриход.Содержание = НСтр("ru = 'Перемещение запасов'");
					
					// Сформируем проводки.
					Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
						СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребуетсяКоличество > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
				
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > ТребуетсяКоличество Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * ТребуетсяКоличество / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - ТребуетсяКоличество;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = ТребуетсяКоличество Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			СуммаСборки = СуммаСборки + СуммаКСписанию;
			
			// Расход.
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = ТребуетсяКоличество;
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			СтрокаТаблицыРасход.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			// Приход
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.Спецификация = СтрокаТаблицаЗапасы.КоррСпецификация;
				СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
				
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасы.Спецификация;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
				
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
				// Списание запасов.
				Если ЗначениеЗаполнено(СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции) Тогда
					
					// Расход.
					СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыРасход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыРасход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					СтрокаТаблицыРасход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыРасход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыРасход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыРасход.Спецификация = Неопределено;
					СтрокаТаблицыРасход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции;
					СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчетаПродукции;
					СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыРасход.КоррСпецификация = Неопределено;
					СтрокаТаблицыРасход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
					СтрокаТаблицыРасход.Количество = 0;
					
					// Приход.
					СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
					СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции;
					СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаПродукции;
					СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыПриход.Спецификация = Неопределено;
					СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриход.СчетДт = СтрокаТаблицаЗапасы.СчетДтПродукции;
					СтрокаТаблицыПриход.СчетКт = СтрокаТаблицаЗапасы.СчетКтПродукции;
					
					СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыПриход.КоррСпецификация = Неопределено;
					СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
					СтрокаТаблицыПриход.Количество = 0;
					
					СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
					СтрокаТаблицыПриход.Содержание = НСтр("ru = 'Перемещение запасов'");
					
					// Сформируем проводки.
					Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
						СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыЗапасы");
	
КонецПроцедуры // СформироватьТаблицаЗапасыЗапасыРазборка()

Процедура СформироватьТаблицаЗапасыВРазрезеГТДРазборка(СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки
	|	,ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|	,ТаблицаЗапасыНаСкладах.Период КАК Период
	|	,ТаблицаЗапасыНаСкладах.Организация КАК Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия КАК Партия
	|	,ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД
	|	,ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения
	|	,СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	СписаниеПоНомерамГТД КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.Россия)
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.ПустаяСсылка)
	|	И ТаблицаЗапасыНаСкладах.НомерГТД <> Значение(Справочник.НомераГТД.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Период
	|	,ТаблицаЗапасыНаСкладах.Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия
	|	,ТаблицаЗапасыНаСкладах.НомерГТД
	|	,ТаблицаЗапасыНаСкладах.СтранаПроисхождения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ОприходованиеПоНомерамГТД.НомерСтроки) КАК НомерСтроки
	|	,ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
	|	,ОприходованиеПоНомерамГТД.Период КАК Период
	|	,ОприходованиеПоНомерамГТД.Организация КАК Организация
	|	,ОприходованиеПоНомерамГТД.Номенклатура КАК Номенклатура
	|	,ОприходованиеПоНомерамГТД.Характеристика КАК Характеристика
	|	,ОприходованиеПоНомерамГТД.Партия КАК Партия
	|	,ОприходованиеПоНомерамГТД.НомерГТД КАК НомерГТД
	|	,ОприходованиеПоНомерамГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|	,СУММА(ОприходованиеПоНомерамГТД.Количество) КАК Количество
	|ИЗ
	|	ОприходованиеПоНомерамГТД КАК ОприходованиеПоНомерамГТД
	|ГДЕ
	|	ОприходованиеПоНомерамГТД.СтранаПроисхождения <> Значение(Справочник.СтраныМира.Россия)
	|	И ОприходованиеПоНомерамГТД.СтранаПроисхождения <> Значение(Справочник.СтраныМира.ПустаяСсылка)
	|	И ОприходованиеПоНомерамГТД.НомерГТД <> Значение(Справочник.НомераГТД.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОприходованиеПоНомерамГТД.Период
	|	,ОприходованиеПоНомерамГТД.Организация
	|	,ОприходованиеПоНомерамГТД.Номенклатура
	|	,ОприходованиеПоНомерамГТД.Характеристика
	|	,ОприходованиеПоНомерамГТД.Партия
	|	,ОприходованиеПоНомерамГТД.НомерГТД
	|	,ОприходованиеПоНомерамГТД.СтранаПроисхождения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыВРазрезеГТД", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыЗапасыРазборкаПеремещение(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|	ТаблицаЗапасы.СчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Номенклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Характеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Партия КАК КоррПартия,
	|	ТаблицаЗапасы.Спецификация КАК Спецификация,
	|	ТаблицаЗапасы.Спецификация КАК КоррСпецификация,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК КоррЗаказПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК ДокументПродажи,
	|	НЕОПРЕДЕЛЕНО КАК ЗаказПродажи,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК Ответственный,
	|	ТаблицаЗапасы.СчетУчета КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетКт,
	|	&ПеремещениеЗапасов КАК Содержание,
	|	&ПеремещениеЗапасов КАК СодержаниеПроводки,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.СценарийПланирования,
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Спецификация,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Спецификация,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("ПеремещениеЗапасов", НСтр("ru = 'Перемещение запасов'"));
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПеремещение", Запрос.Выполнить().Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|	ГДЕ
	|		ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|		ТаблицаЗапасы.СчетУчетаЗапасов,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток),
	|		СУММА(ЗапасыОстатки.СуммаОстаток)
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстаткиПеремещение = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстаткиПеремещение.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	ВременнаяТаблицаЗапасыПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение.СкопироватьКолонки();
	
	ПустойЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасыПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение[н];
		
		СтруктураДляПоискаПеремещение = Новый Структура;
		СтруктураДляПоискаПеремещение.Вставить("Организация", СтрокаТаблицаЗапасыПеремещение.Организация);
		СтруктураДляПоискаПеремещение.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница);
		СтруктураДляПоискаПеремещение.Вставить("СчетУчета", СтрокаТаблицаЗапасыПеремещение.СчетУчета);
		СтруктураДляПоискаПеремещение.Вставить("Номенклатура", СтрокаТаблицаЗапасыПеремещение.Номенклатура);
		СтруктураДляПоискаПеремещение.Вставить("Характеристика", СтрокаТаблицаЗапасыПеремещение.Характеристика);
		СтруктураДляПоискаПеремещение.Вставить("Партия", СтрокаТаблицаЗапасыПеремещение.Партия);
		
		КоличествоТребуетсяРезервПеремещение = СтрокаТаблицаЗапасыПеремещение.Резерв;
		КоличествоТребуетсяСвободныйОстатокПеремещение = СтрокаТаблицаЗапасыПеремещение.Количество;
		
		Если КоличествоТребуетсяРезервПеремещение > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение - КоличествоТребуетсяРезервПеремещение;
			
			СтруктураДляПоискаПеремещение.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасыПеремещение.ЗаказПокупателя);
			
			МассивСтрокОстатковПеремещение = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоискаПеремещение);
			
			КоличествоОстатокПеремещение = 0;
			СуммаОстатокПеремещение = 0;
			
			Если МассивСтрокОстатковПеремещение.Количество() > 0 Тогда
				КоличествоОстатокПеремещение = МассивСтрокОстатковПеремещение[0].КоличествоОстаток;
				СуммаОстатокПеремещение = МассивСтрокОстатковПеремещение[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстатокПеремещение > 0 И КоличествоОстатокПеремещение > КоличествоТребуетсяРезервПеремещение Тогда
				
				СуммаКСписаниюПеремещение = Окр(СуммаОстатокПеремещение * КоличествоТребуетсяРезервПеремещение / КоличествоОстатокПеремещение , 2, 1);
				
				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = МассивСтрокОстатковПеремещение[0].КоличествоОстаток - КоличествоТребуетсяРезервПеремещение;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = МассивСтрокОстатковПеремещение[0].СуммаОстаток - СуммаКСписаниюПеремещение;
				
			ИначеЕсли КоличествоОстатокПеремещение = КоличествоТребуетсяРезервПеремещение Тогда
				
				СуммаКСписаниюПеремещение = СуммаОстатокПеремещение;
				
				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = 0;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписаниюПеремещение = 0;
			КонецЕсли;
			
			// Расход.
			СтрокаТаблицыРасходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПеремещение, СтрокаТаблицаЗапасыПеремещение);
			
			СтрокаТаблицыРасходПеремещение.Спецификация = Неопределено;
			СтрокаТаблицыРасходПеремещение.КоррСпецификация = Неопределено;
			
			СтрокаТаблицыРасходПеремещение.Сумма = СуммаКСписаниюПеремещение;
			СтрокаТаблицыРасходПеремещение.Количество = КоличествоТребуетсяРезервПеремещение;
			
			// Сформируем проводки.
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 Тогда
				СтрокаТаблицаУправленческийПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческийПеремещение, СтрокаТаблицаЗапасыПеремещение);
				СтрокаТаблицаУправленческийПеремещение.Сумма = СуммаКСписаниюПеремещение;
			КонецЕсли;
			
			// Приход.
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 ИЛИ КоличествоТребуетсяРезервПеремещение > 0 Тогда
				
				СтрокаТаблицыПриходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриходПеремещение, СтрокаТаблицаЗапасыПеремещение);
				
				СтрокаТаблицыПриходПеремещение.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриходПеремещение.Организация = СтрокаТаблицаЗапасыПеремещение.Организация;
				СтрокаТаблицыПриходПеремещение.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				СтрокаТаблицыПриходПеремещение.Номенклатура = СтрокаТаблицаЗапасыПеремещение.КоррНоменклатура;
				СтрокаТаблицыПриходПеремещение.Характеристика = СтрокаТаблицаЗапасыПеремещение.КоррХарактеристика;
				СтрокаТаблицыПриходПеремещение.Партия = СтрокаТаблицаЗапасыПеремещение.КоррПартия;
				СтрокаТаблицыПриходПеремещение.Спецификация = Неопределено;
				
				СтрокаТаблицыПриходПеремещение.ЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.КоррЗаказПокупателя;
				
				СтрокаТаблицыПриходПеремещение.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.КоррСчетУчета = СтрокаТаблицаЗапасыПеремещение.СчетУчета;
				СтрокаТаблицыПриходПеремещение.КоррНоменклатура = СтрокаТаблицаЗапасыПеремещение.Номенклатура;
				СтрокаТаблицыПриходПеремещение.КоррХарактеристика = СтрокаТаблицаЗапасыПеремещение.Характеристика;
				СтрокаТаблицыПриходПеремещение.КоррПартия = СтрокаТаблицаЗапасыПеремещение.Партия;
				СтрокаТаблицыПриходПеремещение.КоррСпецификация = Неопределено;
				СтрокаТаблицыПриходПеремещение.КоррЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.ЗаказПокупателя;
				
				СтрокаТаблицыПриходПеремещение.Сумма = СуммаКСписаниюПеремещение;
				
				СтрокаТаблицыПриходПеремещение.Количество = КоличествоТребуетсяРезервПеремещение;
				
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоТребуетсяСвободныйОстатокПеремещение > 0 Тогда
			
			СтруктураДляПоискаПеремещение.Вставить("ЗаказПокупателя", ПустойЗаказПокупателя);
			
			МассивСтрокОстатковПеремещение = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоискаПеремещение);
			
			КоличествоОстатокПеремещение = 0;
			СуммаОстатокПеремещение = 0;
			
			Если МассивСтрокОстатковПеремещение.Количество() > 0 Тогда
				КоличествоОстатокПеремещение = МассивСтрокОстатковПеремещение[0].КоличествоОстаток;
				СуммаОстатокПеремещение = МассивСтрокОстатковПеремещение[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстатокПеремещение > 0 И КоличествоОстатокПеремещение > КоличествоТребуетсяСвободныйОстатокПеремещение Тогда
				
				СуммаКСписаниюПеремещение = Окр(СуммаОстатокПеремещение * КоличествоТребуетсяСвободныйОстатокПеремещение / КоличествоОстатокПеремещение , 2, 1);
				
				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = МассивСтрокОстатковПеремещение[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстатокПеремещение;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = МассивСтрокОстатковПеремещение[0].СуммаОстаток - СуммаКСписаниюПеремещение;
				
			ИначеЕсли КоличествоОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение Тогда
				
				СуммаКСписаниюПеремещение = СуммаОстатокПеремещение;
				
				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = 0;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписаниюПеремещение = 0;
			КонецЕсли;
			
			// Расход.
			СтрокаТаблицыРасходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПеремещение, СтрокаТаблицаЗапасыПеремещение);
			
			СтрокаТаблицыРасходПеремещение.Спецификация = Неопределено;
			СтрокаТаблицыРасходПеремещение.КоррСпецификация = Неопределено;
			
			СтрокаТаблицыРасходПеремещение.Сумма = СуммаКСписаниюПеремещение;
			СтрокаТаблицыРасходПеремещение.Количество = КоличествоТребуетсяСвободныйОстатокПеремещение;
			СтрокаТаблицыРасходПеремещение.ЗаказПокупателя = ПустойЗаказПокупателя;
			
			// Сформируем проводки.
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 Тогда
				СтрокаТаблицаУправленческийПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческийПеремещение, СтрокаТаблицаЗапасыПеремещение);
				СтрокаТаблицаУправленческийПеремещение.Сумма = СуммаКСписаниюПеремещение;
			КонецЕсли;
			
			// Приход
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 ИЛИ КоличествоТребуетсяСвободныйОстатокПеремещение > 0 Тогда
				
				СтрокаТаблицыПриходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриходПеремещение, СтрокаТаблицаЗапасыПеремещение);
				
				СтрокаТаблицыПриходПеремещение.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриходПеремещение.Организация = СтрокаТаблицаЗапасыПеремещение.Организация;
				СтрокаТаблицыПриходПеремещение.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				СтрокаТаблицыПриходПеремещение.Номенклатура = СтрокаТаблицаЗапасыПеремещение.КоррНоменклатура;
				СтрокаТаблицыПриходПеремещение.Характеристика = СтрокаТаблицаЗапасыПеремещение.КоррХарактеристика;
				СтрокаТаблицыПриходПеремещение.Партия = СтрокаТаблицаЗапасыПеремещение.КоррПартия;
				СтрокаТаблицыПриходПеремещение.Спецификация = Неопределено;
				
				СтрокаТаблицыПриходПеремещение.ЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.ЗаказПокупателя;
				
				СтрокаТаблицыПриходПеремещение.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.КоррСчетУчета = СтрокаТаблицаЗапасыПеремещение.СчетУчета;
				СтрокаТаблицыПриходПеремещение.КоррНоменклатура = СтрокаТаблицаЗапасыПеремещение.Номенклатура;
				СтрокаТаблицыПриходПеремещение.КоррХарактеристика = СтрокаТаблицаЗапасыПеремещение.Характеристика;
				СтрокаТаблицыПриходПеремещение.КоррПартия = СтрокаТаблицаЗапасыПеремещение.Партия;
				СтрокаТаблицыПриходПеремещение.КоррСпецификация = Неопределено;
				СтрокаТаблицыПриходПеремещение.КоррЗаказПокупателя = ПустойЗаказПокупателя;
				
				СтрокаТаблицыПриходПеремещение.Сумма = СуммаКСписаниюПеремещение;
				
				СтрокаТаблицыПриходПеремещение.Количество = КоличествоТребуетсяСвободныйОстатокПеремещение;
				
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение = ВременнаяТаблицаЗапасыПеремещение;
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение[н];
		
		Если СтрокаТаблицаЗапасы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
		
	КонецЦикла;
	
	ВременнаяТаблицаЗапасыПеремещение.Индексы.Добавить("ВидДвижения,Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		ТребуетсяРезерв = СтрокаТаблицаЗапасы.Резерв;
		ТребуетсяКоличество = СтрокаТаблицаЗапасы.Количество;
		
		Если ТребуетсяРезерв > 0 Тогда
			
			ТребуетсяКоличество = ТребуетсяКоличество - ТребуетсяРезерв;
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
			
			МассивКоличествоОстаток = 0;
			МассивСуммаОстаток = 0;
			МассивСтрокОстатков = ВременнаяТаблицаЗапасыПеремещение.НайтиСтроки(СтруктураДляПоиска);
			Для каждого СтрокаОстатков Из МассивСтрокОстатков Цикл
				МассивКоличествоОстаток = МассивКоличествоОстаток + СтрокаОстатков.Количество;
				МассивСуммаОстаток = МассивСуммаОстаток + СтрокаОстатков.Сумма;
			КонецЦикла;
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				
				МассивСтрокОстатков[0].Количество = МассивКоличествоОстаток;
				МассивСтрокОстатков[0].Сумма = МассивСуммаОстаток;
				КоличествоОстаток = МассивСтрокОстатков[0].Количество;
				СуммаОстаток = МассивСтрокОстатков[0].Сумма;
				
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > ТребуетсяРезерв Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * ТребуетсяРезерв / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].Количество = МассивСтрокОстатков[0].Количество - ТребуетсяРезерв;
				МассивСтрокОстатков[0].Сумма = МассивСтрокОстатков[0].Сумма - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = ТребуетсяРезерв Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			СуммаСборки = СуммаСборки + СуммаКСписанию;
			
			// Спишем запасы со склада (производственного подразделения).
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = ТребуетсяРезерв;
			
			// Отнесем списанные запасы либо на стоимость запасов на складе либо на затраты НЗП.
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
				
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПокупателя;
				
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
				// Списание запасов.
				Если ЗначениеЗаполнено(СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции) Тогда
					
					// Расход.
					СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыРасход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыРасход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					СтрокаТаблицыРасход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыРасход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыРасход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыРасход.Спецификация = Неопределено;
					СтрокаТаблицыРасход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции;
					СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчетаПродукции;
					СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыРасход.КоррСпецификация = Неопределено;
					СтрокаТаблицыРасход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
					СтрокаТаблицыРасход.Количество = 0;
					
					// Приход.
					СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
					СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции;
					СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаПродукции;
					СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыПриход.Спецификация = Неопределено;
					СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриход.СчетДт = СтрокаТаблицаЗапасы.СчетДтПродукции;
					
					СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыПриход.КоррСпецификация = Неопределено;
					СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
					СтрокаТаблицыПриход.Количество = 0;
					
					СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
					СтрокаТаблицыПриход.Содержание = НСтр("ru = 'Перемещение запасов'");
					
					// Сформируем проводки.
					Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
						СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребуетсяКоличество > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
			
			МассивКоличествоОстаток = 0;
			МассивСуммаОстаток = 0;
			МассивСтрокОстатков = ВременнаяТаблицаЗапасыПеремещение.НайтиСтроки(СтруктураДляПоиска);
			Для каждого СтрокаОстатков Из МассивСтрокОстатков Цикл
				МассивКоличествоОстаток = МассивКоличествоОстаток + СтрокаОстатков.Количество;
				МассивСуммаОстаток = МассивСуммаОстаток + СтрокаОстатков.Сумма;
			КонецЦикла;
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				
				МассивСтрокОстатков[0].Количество = МассивКоличествоОстаток;
				МассивСтрокОстатков[0].Сумма = МассивСуммаОстаток;
				КоличествоОстаток = МассивСтрокОстатков[0].Количество;
				СуммаОстаток = МассивСтрокОстатков[0].Сумма;
				
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > ТребуетсяКоличество Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * ТребуетсяКоличество / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].Количество = МассивСтрокОстатков[0].Количество - ТребуетсяКоличество;
				МассивСтрокОстатков[0].Сумма = МассивСтрокОстатков[0].Сумма - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = ТребуетсяКоличество Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			СуммаСборки = СуммаСборки + СуммаКСписанию;
			
			// Расход.
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = ТребуетсяКоличество;
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			СтрокаТаблицыРасход.ЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПокупателя;
			
			// Приход
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
				
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
				
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
				// Списание запасов.
				Если ЗначениеЗаполнено(СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции) Тогда
					
					// Расход.
					СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыРасход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыРасход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					СтрокаТаблицыРасход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыРасход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыРасход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыРасход.Спецификация = Неопределено;
					СтрокаТаблицыРасход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции;
					СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчетаПродукции;
					СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыРасход.КоррСпецификация = Неопределено;
					СтрокаТаблицыРасход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
					СтрокаТаблицыРасход.Количество = 0;
					
					// Приход.
					СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
					СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции;
					СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаПродукции;
					СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыПриход.Спецификация = Неопределено;
					СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриход.СчетДт = СтрокаТаблицаЗапасы.СчетДтПродукции;
					СтрокаТаблицыПриход.СчетКт = СтрокаТаблицаЗапасы.СчетКтПродукции;
					
					СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыПриход.КоррСпецификация = Неопределено;
					СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
					СтрокаТаблицыПриход.Количество = 0;
					
					СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
					СтрокаТаблицыПриход.Содержание = НСтр("ru = 'Перемещение запасов'");
					
					// Сформируем проводки.
					Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
						СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыЗапасы");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыПеремещение");
	
КонецПроцедуры // СформироватьТаблицаЗапасыЗапасыРазборкаПеремещение()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПотребностьВЗапасахРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|				ИЛИ ВЫБОР
	|					КОГДА ТаблицаЗапасы.ЗаказНаПроизводство ССЫЛКА Документ.ЗаказНаПроизводство
	|							И ТаблицаЗапасы.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|						ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|					ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказПокупателя КАК Документ.ЗаказПокупателя).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|				КОНЕЦ
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|					И ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказамНаПроизводство, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|			ТОГДА ТаблицаЗапасы.ЗаказНаПроизводство
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказНаПроизводство,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы";
	
	Запрос.УстановитьПараметр("ИспользоватьРезервирование", СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПотребностьВЗапасах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();

	// Получение остатков.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ПотребностьВЗапасахОстатки.Организация КАК Организация,
	|	ПотребностьВЗапасахОстатки.Склад КАК Склад,
	|	ПотребностьВЗапасахОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ПотребностьВЗапасахОстатки.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ПотребностьВЗапасахОстатки.Номенклатура КАК Номенклатура,
	|	ПотребностьВЗапасахОстатки.Характеристика КАК Характеристика,
	|	СУММА(ПотребностьВЗапасахОстатки.Количество) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПотребностьВЗапасахОстатки.Организация КАК Организация,
	|		ПотребностьВЗапасахОстатки.Склад КАК Склад,
	|		ПотребностьВЗапасахОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ПотребностьВЗапасахОстатки.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|		ПотребностьВЗапасахОстатки.Номенклатура КАК Номенклатура,
	|		ПотребностьВЗапасахОстатки.Характеристика КАК Характеристика,
	|		ПотребностьВЗапасахОстатки.КоличествоОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.ПотребностьВЗапасах.Остатки(
	|				&МоментКонтроля,
	|				(Организация, ТипДвижения, ЗаказПокупателя, ЗаказНаПроизводство, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация КАК Организация,
	|						ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|						ВЫБОР
	|							КОГДА &ИспользоватьРезервирование
	|									ИЛИ ВЫБОР
	|										КОГДА ТаблицаЗапасы.ЗаказНаПроизводство ССЫЛКА Документ.ЗаказНаПроизводство
	|												И ТаблицаЗапасы.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|											ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|										ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказПокупателя КАК Документ.ЗаказПокупателя).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|									КОНЕЦ
	|								ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|							ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						КОНЕЦ КАК ЗаказПокупателя,
	|						ВЫБОР
	|							КОГДА &ИспользоватьРезервирование
	|										И ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказамНаПроизводство, ЛОЖЬ)
	|									ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|								ТОГДА ТаблицаЗапасы.ЗаказНаПроизводство
	|							ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|						КОНЕЦ КАК ЗаказНаПроизводство,
	|						ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|						ТаблицаЗапасы.Характеристика КАК Характеристика
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ПотребностьВЗапасахОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаПотребностьВЗапасах.Организация,
	|		ДвиженияДокументаПотребностьВЗапасах.Склад,
	|		ДвиженияДокументаПотребностьВЗапасах.ЗаказПокупателя,
	|		ДвиженияДокументаПотребностьВЗапасах.ЗаказНаПроизводство,
	|		ДвиженияДокументаПотребностьВЗапасах.Номенклатура,
	|		ДвиженияДокументаПотребностьВЗапасах.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаПотребностьВЗапасах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаПотребностьВЗапасах.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаПотребностьВЗапасах.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ПотребностьВЗапасах КАК ДвиженияДокументаПотребностьВЗапасах
	|	ГДЕ
	|		ДвиженияДокументаПотребностьВЗапасах.Регистратор = &Ссылка
	|		И ДвиженияДокументаПотребностьВЗапасах.Период <= &ПериодКонтроля) КАК ПотребностьВЗапасахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотребностьВЗапасахОстатки.Организация,
	|	ПотребностьВЗапасахОстатки.Склад,
	|	ПотребностьВЗапасахОстатки.ЗаказПокупателя,
	|	ПотребностьВЗапасахОстатки.ЗаказНаПроизводство,
	|	ПотребностьВЗапасахОстатки.Номенклатура,
	|	ПотребностьВЗапасахОстатки.Характеристика";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	
	Если ЗначениеЗаполнено(ДокументСсылкаСборкаЗапасов.ЗаказПокупателя) Тогда
		Запрос.УстановитьПараметр("МоментКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Иначе
		Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.ПериодКонтроля);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПотребностьВЗапасахОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаПотребностьВЗапасахОстатки.Индексы.Добавить("Организация, ЗаказПокупателя, ЗаказНаПроизводство, Номенклатура, Характеристика");
	
	ВременнаяТаблицаПотребностьВЗапасах = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВЗапасах.СкопироватьКолонки();
	
	Для каждого СтрокаТаблицыПотребностьВЗапасах Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВЗапасах Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", 			СтрокаТаблицыПотребностьВЗапасах.Организация);
		СтруктураДляПоиска.Вставить("ЗаказПокупателя", 		СтрокаТаблицыПотребностьВЗапасах.ЗаказПокупателя);
		СтруктураДляПоиска.Вставить("ЗаказНаПроизводство", 	СтрокаТаблицыПотребностьВЗапасах.ЗаказНаПроизводство);
		СтруктураДляПоиска.Вставить("Номенклатура", 		СтрокаТаблицыПотребностьВЗапасах.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", 		СтрокаТаблицыПотребностьВЗапасах.Характеристика);
		МассивСтрокОстатков = ТаблицаПотребностьВЗапасахОстатки.НайтиСтроки(СтруктураДляПоиска);
		СтруктураДляПоиска.Удалить("Склад");
		ДополнительныеСтроки = ТаблицаПотребностьВЗапасахОстатки.НайтиСтроки(СтруктураДляПоиска);;
		Для каждого ДополнительнаяСтрока Из ДополнительныеСтроки Цикл
			Если СтрокаТаблицыПотребностьВЗапасах.Склад = ДополнительнаяСтрока.Склад Тогда
				Продолжить;
			КонецЕсли;     
			МассивСтрокОстатков.Добавить(ДополнительнаяСтрока);
		КонецЦикла;

		Для каждого СтрокаОстатка Из МассивСтрокОстатков Цикл
			Зачтено = Мин(СтрокаТаблицыПотребностьВЗапасах.Количество, СтрокаОстатка.КоличествоОстаток);
			Если Зачтено <= 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицыРасход = ВременнаяТаблицаПотребностьВЗапасах.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицыПотребностьВЗапасах);
			СтрокаТаблицыРасход.Количество = Зачтено;
			СтрокаТаблицыПотребностьВЗапасах.Количество = СтрокаТаблицыПотребностьВЗапасах.Количество - Зачтено;
			СтрокаОстатка.КоличествоОстаток = СтрокаОстатка.КоличествоОстаток - Зачтено;
			Если СтрокаТаблицыПотребностьВЗапасах.Количество <= 0 Тогда
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВЗапасах = ВременнаяТаблицаПотребностьВЗапасах;
	
КонецПроцедуры // СформироватьТаблицаПотребностьВЗапасахРазборка()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицуРаспределенияМатериаловРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, ТаблицаПродукция) Экспорт
	
	ТаблицаРаспределения = ПроизводствоСервер.ОбъединитьЗапасыИРаспределение(ДокументСсылкаСборкаЗапасов);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	ТаблицаПродукция.ПартияСтатус КАК ПартияСтатус,
	|	ТаблицаПродукция.Спецификация КАК Спецификация,
	|	ТаблицаПродукция.СчетУчета КАК СчетУчета,
	|	ТаблицаПродукция.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	ТаблицаПродукция.СчетКт КАК СчетКт,
	|	ТаблицаПродукция.Количество КАК Количество,
	|	ТаблицаПродукция.Резерв КАК Резерв,
	|	ВЫРАЗИТЬ(ТаблицаПродукция.СтруктурнаяЕдиница КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Ячейка КАК Ячейка,
	|	ТаблицаПродукция.КлючСвязи КАК КлючСвязи,
	|	ТаблицаПродукция.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ПОМЕСТИТЬ Продукция
	|ИЗ
	|	&ТаблицаПродукция КАК ТаблицаПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаРаспределения.Ссылка КАК Документ.СборкаЗапасов) КАК Ссылка,
	|	ТаблицаРаспределения.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРаспределения.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	ВЫРАЗИТЬ(ТаблицаРаспределения.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаРаспределения.Характеристика КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаРаспределения.Партия КАК Справочник.ПартииНоменклатуры) КАК Партия,
	|	ТаблицаРаспределения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаРаспределения.Спецификация КАК Спецификация,
	|	ВЫРАЗИТЬ(ТаблицаРаспределения.СтруктурнаяЕдиница КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница,
	|	ТаблицаРаспределения.Ячейка КАК Ячейка,
	|	ТаблицаРаспределения.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаРаспределения.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаРаспределения.НомерГТД КАК НомерГТД,
	|	ТаблицаРаспределения.Количество КАК Количество,
	|	ТаблицаРаспределения.Резерв КАК Резерв,
	|	ТаблицаРаспределения.ДоляСтоимости КАК ДоляСтоимости
	|ПОМЕСТИТЬ ТаблицаРаспределения
	|ИЗ
	|	&ТаблицаРаспределения КАК ТаблицаРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРаспределения.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРаспределения.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	ТаблицаРаспределения.Ссылка КАК Ссылка,
	|	ТаблицаРаспределения.Ссылка.Дата КАК Период,
	|	ТаблицаРаспределения.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаРаспределения.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад КАК ОрдерныйСклад,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспределения.Ссылка.СтруктурнаяЕдиница = ТаблицаРаспределения.Ссылка.СтруктурнаяЕдиницаПродукции
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаРаспределения.Ссылка.СтруктурнаяЕдиницаПродукции
	|	КОНЕЦ КАК СтруктурнаяЕдиницаПродукции,
	|	ТаблицаРаспределения.Ссылка.СтруктурнаяЕдиницаПродукции.ОрдерныйСклад КАК ОрдерныйСкладПродукции,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА ТаблицаРаспределения.Ссылка.ЯчейкаЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК ЯчейкаЗапасов,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка) КАК СчетУчета,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка) КАК СчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ТаблицаРаспределения.Номенклатура.СчетУчетаЗапасов
	|		КОГДА ТаблицаРаспределения.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА ТаблицаРаспределения.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ТаблицаРаспределения.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК КоррСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ТаблицаРаспределения.Номенклатура.СчетУчетаЗапасов
	|		КОГДА ТаблицаРаспределения.Ссылка.СтруктурнаяЕдиницаПродукции.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА ТаблицаРаспределения.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ТаблицаРаспределения.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетУчетаПродукции,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ТаблицаРаспределения.Номенклатура КАК КоррНоменклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ТаблицаРаспределения.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррХарактеристика,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ПустаяСсылка) КАК ПартияСтатус,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ТаблицаРаспределения.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррПартия,
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка) КАК Спецификация,
	|	ТаблицаРаспределения.Спецификация КАК КоррСпецификация,
	|	ТаблицаРаспределения.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ТаблицаРаспределения.Номенклатура.СчетУчетаЗапасов
	|		КОГДА ТаблицаРаспределения.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА ТаблицаРаспределения.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ТаблицаРаспределения.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ТаблицаРаспределения.Номенклатура.СчетУчетаЗапасов
	|		КОГДА ТаблицаРаспределения.Ссылка.СтруктурнаяЕдиницаПродукции.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА ТаблицаРаспределения.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ТаблицаРаспределения.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетДтПродукции,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка) КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ ТаблицаРаспределения.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ТаблицаРаспределения.Номенклатура.СчетУчетаЗапасов
	|		КОГДА ТаблицаРаспределения.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА ТаблицаРаспределения.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ТаблицаРаспределения.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетКтПродукции,
	|	ТаблицаРаспределения.ДоляСтоимости КАК ДоляСтоимости
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	ТаблицаРаспределения КАК ТаблицаРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРаспределения.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	СУММА(ТаблицаРаспределения.ДоляСтоимости) КАК ДоляСтоимости,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаРаспределения.НомерСтроки) КАК КоличествоСтрок
	|ПОМЕСТИТЬ БазаРаспределения
	|ИЗ
	|	ТаблицаРаспределения КАК ТаблицаРаспределения
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРаспределения.КлючСвязиПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.НомерСтроки КАК НомерСтроки,
	|	Запасы.Ссылка КАК Ссылка,
	|	Запасы.Период КАК Период,
	|	Запасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	Запасы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА Запасы.Ссылка.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	ВЫБОР
	|		КОГДА Запасы.Ссылка.СтруктурнаяЕдиница = Продукция.СтруктурнаяЕдиница
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|		ИНАЧЕ Продукция.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиницаЗапасов,
	|	Продукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаЗапасовНаСклад,
	|	Продукция.СтруктурнаяЕдиница.ОрдерныйСклад КАК ОрдерныйСкладЗапасов,
	|	Запасы.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	Запасы.ОрдерныйСклад КАК ОрдерныйСкладПродукции,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА Продукция.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК ЯчейкаЗапасов,
	|	Продукция.СчетУчета КАК СчетУчета,
	|	Продукция.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	Запасы.КоррСчетУчета КАК КоррСчетУчета,
	|	Запасы.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	Продукция.Номенклатура КАК Номенклатура,
	|	Запасы.КоррНоменклатура КАК КоррНоменклатура,
	|	Продукция.Характеристика КАК Характеристика,
	|	Запасы.КоррХарактеристика КАК КоррХарактеристика,
	|	Продукция.Партия КАК Партия,
	|	Продукция.ПартияСтатус КАК ПартияСтатус,
	|	Запасы.КоррПартия КАК КоррПартия,
	|	Продукция.Спецификация КАК Спецификация,
	|	Запасы.КоррСпецификация КАК КоррСпецификация,
	|	Запасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	Продукция.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ВЫБОР
	|		КОГДА Продукция.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Продукция.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоСкладам
	|		КОГДА Запасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Запасы.ЗаказПокупателя КАК Документ.ЗаказПокупателя).УчетПотребностиПоСкладам
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчетПотребностиПоСкладам,
	|	ВЫРАЗИТЬ(Продукция.Количество * ВЫБОР
	|			КОГДА ЕСТЬNULL(БазаРаспределения.ДоляСтоимости, 0) = 0
	|					И ЕСТЬNULL(БазаРаспределения.КоличествоСтрок, 0) = 0
	|				ТОГДА 0
	|			КОГДА ЕСТЬNULL(БазаРаспределения.ДоляСтоимости, 0) = 0
	|				ТОГДА 1 / ЕСТЬNULL(БазаРаспределения.КоличествоСтрок, 0)
	|			ИНАЧЕ Запасы.ДоляСтоимости / ЕСТЬNULL(БазаРаспределения.ДоляСтоимости, 0)
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(Продукция.Резерв * ВЫБОР
	|			КОГДА ЕСТЬNULL(БазаРаспределения.ДоляСтоимости, 0) = 0
	|					И ЕСТЬNULL(БазаРаспределения.КоличествоСтрок, 0) = 0
	|				ТОГДА 0
	|			КОГДА ЕСТЬNULL(БазаРаспределения.ДоляСтоимости, 0) = 0
	|				ТОГДА 1 / ЕСТЬNULL(БазаРаспределения.КоличествоСтрок, 0)
	|			ИНАЧЕ Запасы.ДоляСтоимости / ЕСТЬNULL(БазаРаспределения.ДоляСтоимости, 0)
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Резерв,
	|	0 КАК Сумма,
	|	Продукция.КлючСвязи КАК КлючСвязиПродукция,
	|	Запасы.СчетДт КАК СчетДт,
	|	Запасы.СчетДтПродукции КАК СчетДтПродукции,
	|	Продукция.СчетКт КАК СчетКт,
	|	Запасы.СчетКтПродукции КАК СчетКтПродукции,
	|	Запасы.ДоляСтоимости КАК ДоляСтоимости,
	|	ЛОЖЬ КАК НоваяСтрока,
	|	ЛОЖЬ КАК ВыполненРасчет,
	|	ЛОЖЬ КАК Распределено
	|ИЗ
	|	Запасы КАК Запасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Продукция КАК Продукция
	|		ПО (Продукция.КлючСвязи = Запасы.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ БазаРаспределения КАК БазаРаспределения
	|		ПО (БазаРаспределения.КлючСвязиПродукция = Запасы.КлючСвязиПродукция)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ТаблицаПродукция", ТаблицаПродукция);
	Запрос.УстановитьПараметр("ТаблицаРаспределения", ТаблицаРаспределения);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	
	ТаблицаМатериалов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаКоличества = ТаблицаПродукция.Скопировать(, "КлючСвязи, Количество, Резерв");
	ТаблицаКоличества.Свернуть("КлючСвязи", "Количество, Резерв");
	
	ТаблицаРаспределения = ТаблицаМатериалов.Скопировать(, "КлючСвязиПродукция, Количество, Резерв");
	ТаблицаРаспределения.Свернуть("КлючСвязиПродукция", "Количество, Резерв");
	
	Для каждого СтрокаКоличества Из ТаблицаКоличества Цикл
		СтрокаРаспределения = ТаблицаРаспределения.Найти(СтрокаКоличества.КлючСвязи, "КлючСвязиПродукция");
		Если СтрокаРаспределения=Неопределено ИЛИ СтрокаРаспределения.Количество=0 Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаРаспределения.Количество=СтрокаКоличества.Количество И СтрокаРаспределения.Резерв=СтрокаКоличества.Резерв Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязиПродукция", СтрокаКоличества.КлючСвязи);
		Строки = ТаблицаМатериалов.НайтиСтроки(СтруктураОтбора);
		Если СтрокаРаспределения.Количество<>СтрокаКоличества.Количество Тогда
			НайденнаяСтрока = Неопределено; 
			МаксимальноеЗначение = 0;
			Для каждого СтрокаМатериала Из Строки Цикл
				Если СтрокаМатериала.Количество>МаксимальноеЗначение Тогда
					НайденнаяСтрока = СтрокаМатериала;
					МаксимальноеЗначение = СтрокаМатериала.Количество;
				КонецЕсли; 
			КонецЦикла;
			Если НайденнаяСтрока<>Неопределено Тогда
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + СтрокаКоличества.Количество - СтрокаРаспределения.Количество;
			КонецЕсли; 
		КонецЕсли; 
		Если СтрокаРаспределения.Резерв<>СтрокаКоличества.Резерв Тогда
			НайденнаяСтрока = Неопределено; 
			МаксимальноеЗначение = 0;
			Для каждого СтрокаМатериала Из Строки Цикл
				Если СтрокаМатериала.Резерв>МаксимальноеЗначение Тогда
					НайденнаяСтрока = СтрокаМатериала;
					МаксимальноеЗначение = СтрокаМатериала.Резерв;
				КонецЕсли; 
			КонецЦикла;
			Если НайденнаяСтрока<>Неопределено Тогда
				НайденнаяСтрока.Резерв = НайденнаяСтрока.Резерв + СтрокаКоличества.Резерв - СтрокаРаспределения.Резерв;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 

	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРаспределенияМатериаловРазборка", ТаблицаМатериалов);
	ТаблицаМатериалов = Неопределено;
	
КонецПроцедуры // СформироватьТаблицуРаспределенияМатериаловРазборка()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеПоЗапасамРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СборкаЗапасовЗапасы.НомерСтроки КАК НомерСтроки,
	|	СборкаЗапасовЗапасы.Период КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	СборкаЗапасовЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СборкаЗапасовЗапасы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СборкаЗапасовЗапасы.Ячейка КАК Ячейка,
	|	СборкаЗапасовЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиницаЗапасов,
	|	СборкаЗапасовЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад КАК СтруктурнаяЕдиницаЗапасовНаСклад,
	|	СборкаЗапасовЗапасы.ОрдерныйСкладЗапасов КАК ОрдерныйСкладЗапасов,
	|	СборкаЗапасовЗапасы.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	СборкаЗапасовЗапасы.ОрдерныйСкладПродукции КАК ОрдерныйСкладПродукции,
	|	СборкаЗапасовЗапасы.ЯчейкаЗапасов КАК ЯчейкаЗапасов,
	|	СборкаЗапасовЗапасы.СчетУчета КАК СчетУчета,
	|	СборкаЗапасовЗапасы.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	СборкаЗапасовЗапасы.КоррСчетУчета КАК КоррСчетУчета,
	|	СборкаЗапасовЗапасы.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	СборкаЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	СборкаЗапасовЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	СборкаЗапасовЗапасы.Характеристика КАК Характеристика,
	|	СборкаЗапасовЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	СборкаЗапасовЗапасы.Партия КАК Партия,
	|	СборкаЗапасовЗапасы.ПартияСтатус КАК ПартияСтатус,
	|	СборкаЗапасовЗапасы.КоррПартия КАК КоррПартия,
	|	СборкаЗапасовЗапасы.Спецификация КАК Спецификация,
	|	СборкаЗапасовЗапасы.КоррСпецификация КАК КоррСпецификация,
	|	СборкаЗапасовЗапасы.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	СборкаЗапасовЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СборкаЗапасовЗапасы.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	СборкаЗапасовЗапасы.Количество КАК Количество,
	|	СборкаЗапасовЗапасы.Резерв КАК Резерв,
	|	0 КАК Сумма,
	|	СборкаЗапасовЗапасы.СчетДт КАК СчетДт,
	|	СборкаЗапасовЗапасы.СчетДтПродукции КАК СчетДтПродукции,
	|	СборкаЗапасовЗапасы.СчетКт КАК СчетКт,
	|	СборкаЗапасовЗапасы.СчетКтПродукции КАК СчетКтПродукции,
	|	СборкаЗапасовЗапасы.ДоляСтоимости КАК ДоляСтоимости,
	|	&РаспределениеЗапасов КАК СодержаниеПроводки,
	|	&РаспределениеЗапасов КАК Содержание,
	|	&ДатаОбновленияНаРелиз_1_2_1 КАК ДатаОбновленияНаРелиз_1_2_1
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаРаспределенияМатериаловРазборка КАК СборкаЗапасовЗапасы
	|ГДЕ
	|	СборкаЗапасовЗапасы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ТаблицаЗапасы.Спецификация КАК Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация КАК КоррСпецификация,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	ЛОЖЬ КАК ЗатратыНаВыпуск,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	0 КАК Сумма,
	|	ТаблицаЗапасы.СчетДт КАК СчетДт,
	|	ТаблицаЗапасы.СчетКт КАК СчетКт,
	|	ТаблицаЗапасы.СчетДтПродукции КАК СчетДтПродукции,
	|	ТаблицаЗапасы.СчетКтПродукции КАК СчетКтПродукции,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК Содержание,
	|	ТаблицаЗапасы.ДоляСтоимости КАК ДоляСтоимости
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаПродукции,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчета,
	|	ТаблицаЗапасы.СчетУчетаПродукции,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррПартия,
	|	ТаблицаЗапасы.Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаЗапасы.СчетДт,
	|	ТаблицаЗапасы.СчетКт,
	|	ТаблицаЗапасы.СчетДтПродукции,
	|	ТаблицаЗапасы.СчетКтПродукции,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.ДоляСтоимости,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад КАК СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.ЯчейкаЗапасов КАК ЯчейкаЗапасов,
	|	ТаблицаЗапасы.ОрдерныйСкладПродукции КАК ОрдерныйСкладПродукции,
	|	ТаблицаЗапасы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов КАК ОрдерныйСкладЗапасов,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Ячейка КАК Ячейка,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.Период < ТаблицаЗапасы.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад,
	|	ТаблицаЗапасы.ЯчейкаЗапасов,
	|	ТаблицаЗапасы.ОрдерныйСкладПродукции,
	|	ТаблицаЗапасы.ОрдерныйСклад,
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Ячейка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки),
	|	ТаблицаЗапасы.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад,
	|	ТаблицаЗапасы.ЯчейкаЗапасов,
	|	ТаблицаЗапасы.ОрдерныйСкладПродукции,
	|	ТаблицаЗапасы.ОрдерныйСклад,
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Ячейка,
	|	СУММА(ТаблицаЗапасы.Количество)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	НЕ ТаблицаЗапасы.ОрдерныйСклад
	|	И ТаблицаЗапасы.Период >= ТаблицаЗапасы.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад,
	|	ТаблицаЗапасы.ЯчейкаЗапасов,
	|	ТаблицаЗапасы.ОрдерныйСкладПродукции,
	|	ТаблицаЗапасы.ОрдерныйСклад,
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Ячейка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаЗапасы.ЗаказПокупателя
	|	КОНЕЦ КАК Заказ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтчетПоПереработке) КАК ТипПриемаПередачи,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ПартияСтатус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаЗапасы.ЗаказПокупателя
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|				ИЛИ ВЫБОР
	|					КОГДА ТаблицаЗапасы.ЗаказНаПроизводство ССЫЛКА Документ.ЗаказНаПроизводство
	|							И ТаблицаЗапасы.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|						ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|					ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказПокупателя КАК Документ.ЗаказПокупателя).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|				КОНЕЦ
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|					И ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказамНаПроизводство, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|			ТОГДА ТаблицаЗапасы.ЗаказНаПроизводство
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказНаПроизводство,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|				ИЛИ ВЫБОР
	|					КОГДА ТаблицаЗапасы.ЗаказНаПроизводство ССЫЛКА Документ.ЗаказНаПроизводство
	|							И ТаблицаЗапасы.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|						ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|					ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказПокупателя КАК Документ.ЗаказПокупателя).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|				КОНЕЦ
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРезервирование
	|					И ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказамНаПроизводство, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоЗаказам, ЛОЖЬ)
	|			ТОГДА ТаблицаЗапасы.ЗаказНаПроизводство
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов
	|	И ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад <> ТаблицаЗапасы.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	СУММА(ТаблицаЗапасы.Количество)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад
	|	И ТаблицаЗапасы.Период >= ТаблицаЗапасы.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад
	|	И ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад <> ТаблицаЗапасы.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	СУММА(ТаблицаЗапасы.Количество)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад
	|	И ТаблицаЗапасы.Период < ТаблицаЗапасы.ДатаОбновленияНаРелиз_1_2_1
	|	И ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад <> ТаблицаЗапасы.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("ИспользоватьРезервирование", СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	Запрос.УстановитьПараметр("ТаблицаРаспределенияМатериаловРазборка", СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРаспределенияМатериаловРазборка);
	
	// Временно: изменение движений по ордерному складу.
	ДатаОбновленияНаРелиз_1_2_1 = Константы.ДатаОбновленияНаРелиз_1_2_1.Получить();
	Запрос.УстановитьПараметр("ДатаОбновленияНаРелиз_1_2_1", ДатаОбновленияНаРелиз_1_2_1);
	
	Запрос.УстановитьПараметр("РаспределениеЗапасов", НСтр("ru = 'Распределение запасов'"));
	Запрос.УстановитьПараметр("ПеремещениеЗапасов", НСтр("ru = 'Перемещение запасов'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Определим таблицу для учета запасов.
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыЗапасы", МассивРезультатов[1].Выгрузить());
	
	// Сформируем таблицу для учета запасов.
	Если ВыполнятьПеремещение(ДокументСсылкаСборкаЗапасов) Тогда
		
		// Автоперемещение запасов.
		СформироватьТаблицаЗапасыЗапасыРазборкаПеремещение(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки);
		
	Иначе
		
		СформироватьТаблицаЗапасыЗапасыРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки);
		
	КонецЕсли;
	
	// Дополним таблицу для запасов.
	ВыборкаРезультатов = МассивРезультатов[2].Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		// Автоперемещение запасов.
		Если (ВыборкаРезультатов.СтруктурнаяЕдиницаЗапасов = ВыборкаРезультатов.СтруктурнаяЕдиница
			И ВыборкаРезультатов.ЯчейкаЗапасов <> ВыборкаРезультатов.Ячейка)
			ИЛИ ВыборкаРезультатов.СтруктурнаяЕдиницаЗапасов <> ВыборкаРезультатов.СтруктурнаяЕдиница Тогда
			
			// Расход.
			Если (ВыборкаРезультатов.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (ВыборкаРезультатов.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ ВыборкаРезультатов.ОрдерныйСкладЗапасов) Тогда
				
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, ВыборкаРезультатов);
				
				СтрокаТаблицыРасход.СтруктурнаяЕдиница = ВыборкаРезультатов.СтруктурнаяЕдиницаЗапасов;
				СтрокаТаблицыРасход.Ячейка = ВыборкаРезультатов.ЯчейкаЗапасов;
				
			КонецЕсли;
			
			// Приход.
			Если (ВыборкаРезультатов.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (ВыборкаРезультатов.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ ВыборкаРезультатов.ОрдерныйСклад) Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, ВыборкаРезультатов);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, ВыборкаРезультатов);
		
	КонецЦикла;
	
	// Определим таблицу израсходованного давальческого сырья, принятого в переработку, за которые будет необходимо
	// отчитаться перед давальцем.
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыИАгентскиеУслугиПринятые", МассивРезультатов[3].Выгрузить());
	
	// Определим таблицу для движения по потребности позиций зависимого спроса.
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПотребностьВЗапасах", МассивРезультатов[4].Выгрузить());
	СформироватьТаблицаПотребностьВЗапасахРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Автоперемещение запасов (дополним таблицу ТаблицаЗапасыКРасходуСоСкладов).
	ВыборкаРезультатов = МассивРезультатов[5].Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		СтрокаТаблицыРасходПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыКРасходуСоСкладов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПриход, ВыборкаРезультатов);
		
	КонецЦикла;
	
	// Автоперемещение запасов (дополним таблицу ТаблицаЗапасыКПоступлениюНаСклады).
	ВыборкаРезультатов = МассивРезультатов[6].Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		СтрокаТаблицыРасходПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыКПоступлениюНаСклады.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПриход, ВыборкаРезультатов);
		
	КонецЦикла;
	
КонецПроцедуры // ИнициализироватьДанныеПоЗапасамРазборка()

#КонецОбласти 

#Область ПродукцияРазборка

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПродукцияРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки)
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРазмещениеЗаказов.Индексы.Добавить("ВидДвижения,Организация,Номенклатура,Характеристика");;
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Индексы.Добавить("ВидДвижения,Организация,Номенклатура,Характеристика,Партия,КоррНоменклатура,КоррХарактеристика,КоррПартия,ЗатратыНаВыпуск");;
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПродукция.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасыПродукция = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПродукция[н];
		
		// Сформируем выпуск продукции в количественном выражении. Если заказ покупателя указан - под заказ
		// покупателя, если нет - то под пустой заказ.
		СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасыПродукция);
		
		// Автоперемещение продукции.
		Если ЗначениеЗаполнено(СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции) Тогда
			
			// Расход.
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасыПродукция);
			
			СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			СтрокаТаблицыРасход.Спецификация = Неопределено;
			
			СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции;
			СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасыПродукция.СчетУчетаПродукции;
			
			СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасыПродукция.Номенклатура;
			СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасыПродукция.Характеристика;
			СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасыПродукция.Партия;
			СтрокаТаблицыРасход.КоррСпецификация = Неопределено;
			СтрокаТаблицыРасход.КоррЗаказПокупателя = СтрокаТаблицаЗапасыПродукция.ЗаказПокупателя;
			
			СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
			СтрокаТаблицыРасход.Содержание = НСтр("ru = 'Перемещение запасов'");
			
			// Приход.
			СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасыПродукция);
			
			СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции;
			СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасыПродукция.СчетУчетаПродукции;
			СтрокаТаблицыПриход.Спецификация = Неопределено;
			
			СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиница;
			СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасыПродукция.СчетУчета;
			
			СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасыПродукция.Номенклатура;
			СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасыПродукция.Характеристика;
			СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасыПродукция.Партия;
			СтрокаТаблицыПриход.КоррСпецификация = Неопределено;
			СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасыПродукция.ЗаказПокупателя;
			
			СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
			СтрокаТаблицыПриход.Содержание = НСтр("ru = 'Перемещение запасов'");
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыПродукция");
	
КонецПроцедуры // СформироватьТаблицаЗапасыПродукцияРазборка()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРазмещениеЗаказовРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых размещений заказов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПродукция.Организация КАК Организация,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.ИсточникОбеспечения КАК ИсточникОбеспечения
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ИсточникОбеспечения <> НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.ИсточникОбеспечения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РазмещениеЗаказов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	ТаблицаПродукция.Организация КАК Организация,
	|	РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукция.Количество > ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|			ТОГДА ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|		КОГДА ТаблицаПродукция.Количество <= ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|			ТОГДА ТаблицаПродукция.Количество
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РазмещениеЗаказовОстатки.Организация КАК Организация,
	|			РазмещениеЗаказовОстатки.Номенклатура КАК Номенклатура,
	|			РазмещениеЗаказовОстатки.Характеристика КАК Характеристика,
	|			РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|			РазмещениеЗаказовОстатки.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|			СУММА(РазмещениеЗаказовОстатки.КоличествоОстаток) КАК Количество
	|		ИЗ
	|			(ВЫБРАТЬ
	|				РазмещениеЗаказовОстатки.Организация КАК Организация,
	|				РазмещениеЗаказовОстатки.Номенклатура КАК Номенклатура,
	|				РазмещениеЗаказовОстатки.Характеристика КАК Характеристика,
	|				РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|				РазмещениеЗаказовОстатки.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|				РазмещениеЗаказовОстатки.КоличествоОстаток КАК КоличествоОстаток
	|			ИЗ
	|				РегистрНакопления.РазмещениеЗаказов.Остатки(
	|						&МоментКонтроля,
	|						(Организация, Номенклатура, Характеристика, ИсточникОбеспечения) В
	|							(ВЫБРАТЬ
	|								ТаблицаПродукция.Организация КАК Организация,
	|								ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|								ТаблицаПродукция.Характеристика КАК Характеристика,
	|								ТаблицаПродукция.ИсточникОбеспечения КАК ИсточникОбеспечения
	|							ИЗ
	|								ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|							ГДЕ
	|								ТаблицаПродукция.ИсточникОбеспечения <> НЕОПРЕДЕЛЕНО)) КАК РазмещениеЗаказовОстатки
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ДвиженияДокументаРазмещениеЗаказов.Организация,
	|				ДвиженияДокументаРазмещениеЗаказов.Номенклатура,
	|				ДвиженияДокументаРазмещениеЗаказов.Характеристика,
	|				ДвиженияДокументаРазмещениеЗаказов.ЗаказПокупателя,
	|				ДвиженияДокументаРазмещениеЗаказов.ИсточникОбеспечения,
	|				ВЫБОР
	|					КОГДА ДвиженияДокументаРазмещениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						ТОГДА ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|					ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|				КОНЕЦ
	|			ИЗ
	|				РегистрНакопления.РазмещениеЗаказов КАК ДвиженияДокументаРазмещениеЗаказов
	|			ГДЕ
	|				ДвиженияДокументаРазмещениеЗаказов.Регистратор = &Ссылка
	|				И ДвиженияДокументаРазмещениеЗаказов.Период <= &ПериодКонтроля) КАК РазмещениеЗаказовОстатки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РазмещениеЗаказовОстатки.Организация,
	|			РазмещениеЗаказовОстатки.Номенклатура,
	|			РазмещениеЗаказовОстатки.Характеристика,
	|			РазмещениеЗаказовОстатки.ЗаказПокупателя,
	|			РазмещениеЗаказовОстатки.ИсточникОбеспечения) КАК РазмещениеЗаказовОстатки
	|		ПО ТаблицаПродукция.Организация = РазмещениеЗаказовОстатки.Организация
	|			И ТаблицаПродукция.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|			И ТаблицаПродукция.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|			И ТаблицаПродукция.ИсточникОбеспечения = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|ГДЕ
	|	ТаблицаПродукция.ИсточникОбеспечения <> НЕОПРЕДЕЛЕНО
	|	И РазмещениеЗаказовОстатки.ЗаказПокупателя ЕСТЬ НЕ NULL ";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.ПериодКонтроля);
	
	РезультатЗапроса = Запрос.Выполнить();

	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРазмещениеЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаРазмещениеЗаказовРазборка()

#КонецОбласти 

#Область ИнициализацияДанных

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СборкаЗапасовВыполненныеЭтапы.КлючСвязи КАК КлючСвязи,
	|	СборкаЗапасовВыполненныеЭтапы.Этап КАК Этап
	|ПОМЕСТИТЬ ВременнаяТаблицаВыполненныеЭтапы
	|ИЗ
	|	Документ.СборкаЗапасов.ВыполненныеЭтапы КАК СборкаЗапасовВыполненныеЭтапы
	|ГДЕ
	|	&ИспользоватьЭтапыПроизводства
	|	И СборкаЗапасовВыполненныеЭтапы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаЗапасовПродукция.НомерСтроки КАК НомерСтроки,
	|	СборкаЗапасовПродукция.Ссылка.Дата КАК Период,
	|	СборкаЗапасовПродукция.КлючСвязи КАК КлючСвязи,
	|	СборкаЗапасовПродукция.Ссылка КАК Ссылка,
	|	&Организация КАК Организация,
	|	СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовПродукция.Ссылка.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиницаПродукции.ОрдерныйСклад КАК ОрдерныйСкладПродукции,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовПродукция.Ссылка.ЯчейкаПродукции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК ЯчейкаПродукции,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Ссылка.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(СборкаЗапасовПродукция.Ссылка.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоСкладам
	|		КОГДА СборкаЗапасовПродукция.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(СборкаЗапасовПродукция.ЗаказПокупателя КАК Документ.ЗаказПокупателя).УчетПотребностиПоСкладам
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчетПотребностиПоСкладам,
	|	СборкаЗапасовПродукция.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СборкаЗапасовПродукция.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовПродукция.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	СборкаЗапасовПродукция.Спецификация КАК Спецификация,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиницаПродукции.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетУчетаПродукции,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетДт,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиницаПродукции.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетДтПродукции,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетКтПродукции,
	|	СборкаЗапасовПродукция.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК КоррЗаказПокупателя,
	|	СборкаЗапасовПродукция.Ссылка.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка) КАК КоррЗаказНаПроизводство,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Ссылка.ЗаказНаПроизводство = ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ СборкаЗапасовПродукция.Ссылка.ЗаказНаПроизводство
	|	КОНЕЦ КАК ИсточникОбеспечения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовПродукция.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА СборкаЗапасовПродукция.Количество
	|			ИНАЧЕ СборкаЗапасовПродукция.Количество * СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	0 КАК Сумма,
	|	ВЫРАЗИТЬ(&СборкаЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ВЫРАЗИТЬ(&СборкаЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	&ДатаОбновленияНаРелиз_1_2_1 КАК ДатаОбновленияНаРелиз_1_2_1,
	|	СборкаЗапасовПродукция.ПодразделениеЗавершающегоЭтапа КАК ПодразделениеЗавершающегоЭтапа,
	|	ВЫБОР
	|		КОГДА ВыполнениеПоЭтапам.КлючСвязи ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИспользуютсяЭтапы,
	|	ВЫБОР
	|		КОГДА НЕ ЗавершенныеЭтапы.Этап ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗавершающийЭтап,
	|	СборкаЗапасовПродукция.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СборкаЗапасовПродукция.НомерГТД КАК НомерГТД,
	|	ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий, СборкаЗапасовПродукция.Номенклатура.ПолитикаУчетаСерий) КАК ПолитикаУчетаСерий
	|ПОМЕСТИТЬ ВременнаяТаблицаПродукция
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВыполненныеЭтапы.КлючСвязи КАК КлючСвязи
	|		ИЗ
	|			ВременнаяТаблицаВыполненныеЭтапы КАК ВыполненныеЭтапы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВыполненныеЭтапы.КлючСвязи) КАК ВыполнениеПоЭтапам
	|		ПО СборкаЗапасовПродукция.КлючСвязи = ВыполнениеПоЭтапам.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СборкаЗапасовПродукция.КлючСвязи КАК КлючСвязи,
	|			ЕСТЬNULL(ВременнаяТаблицаВыполненныеЭтапы.Этап, ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства)) КАК Этап
	|		ИЗ
	|			Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыполненныеЭтапы КАК ВременнаяТаблицаВыполненныеЭтапы
	|				ПО СборкаЗапасовПродукция.КлючСвязи = ВременнаяТаблицаВыполненныеЭтапы.КлючСвязи
	|		ГДЕ
	|			СборкаЗапасовПродукция.Ссылка = &Ссылка
	|			И ЕСТЬNULL(ВременнаяТаблицаВыполненныеЭтапы.Этап, ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства)) = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства)) КАК ЗавершенныеЭтапы
	|		ПО СборкаЗапасовПродукция.КлючСвязи = ЗавершенныеЭтапы.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО СборкаЗапасовПродукция.Номенклатура = ПолитикиУчетаСерий.Владелец
	|			И СборкаЗапасовПродукция.СтруктурнаяЕдиница = ПолитикиУчетаСерий.СтруктурнаяЕдиница
	|			И (&Организация = ПолитикиУчетаСерий.Организация)
	|ГДЕ
	|	СборкаЗапасовПродукция.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаПродукция.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	ТаблицаПродукция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК СценарийПланирования,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	НЕОПРЕДЕЛЕНО КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.СчетУчета КАК СчетУчета,
	|	ТаблицаПродукция.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	НЕОПРЕДЕЛЕНО КАК КоррСчетУчета,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК КоррНоменклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК КоррХарактеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК КоррПартия,
	|	ТаблицаПродукция.Спецификация КАК Спецификация,
	|	НЕОПРЕДЕЛЕНО КАК КоррСпецификация,
	|	ТаблицаПродукция.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка) КАК ЗаказНаПроизводство,
	|	ТаблицаПродукция.КоррЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка) КАК КоррЗаказНаПроизводство,
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК Содержание,
	|	ТаблицаПродукция.СодержаниеПроводки КАК СодержаниеПроводки,
	|	ЛОЖЬ КАК ЗатратыНаВыпуск,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество,
	|	СУММА(ТаблицаПродукция.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	ТаблицаПродукция.ЗавершающийЭтап КАК ЗавершающийЭтап,
	|	ТаблицаПродукция.ИспользуютсяЭтапы КАК ИспользуютсяЭтапы
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.СчетУчета,
	|	ТаблицаПродукция.СчетУчетаПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	ТаблицаПродукция.Спецификация,
	|	ТаблицаПродукция.ЗаказПокупателя,
	|	ТаблицаПродукция.КоррЗаказПокупателя,
	|	ТаблицаПродукция.СодержаниеПроводки,
	|	ТаблицаПродукция.ЗавершающийЭтап,
	|	ТаблицаПродукция.ИспользуютсяЭтапы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Ячейка КАК Ячейка,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.ОрдерныйСклад КАК ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции КАК ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.ЯчейкаПродукции КАК ЯчейкаПродукции,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.Период < ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаПродукция.Период,
	|	&Организация,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	СУММА(ТаблицаПродукция.Количество)
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыполненныеЭтапы КАК ВыполненныеЭтапы
	|		ПО ТаблицаПродукция.КлючСвязи = ВыполненныеЭтапы.КлючСвязи
	|ГДЕ
	|	НЕ ТаблицаПродукция.ОрдерныйСклад
	|	И ТаблицаПродукция.Период >= ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|	И (ВыполненныеЭтапы.Этап ЕСТЬ NULL
	|			ИЛИ ВыполненныеЭтапы.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаПродукция.Период,
	|	&Организация,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	СУММА(ТаблицаПродукция.Количество)
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыполненныеЭтапы КАК ВыполненныеЭтапы
	|		ПО ТаблицаПродукция.КлючСвязи = ВыполненныеЭтапы.КлючСвязи
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСклад
	|	И НЕ ТаблицаПродукция.ОрдерныйСкладПродукции
	|	И ТаблицаПродукция.Период >= ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|	И (ВыполненныеЭтапы.Этап ЕСТЬ NULL
	|			ИЛИ ВыполненныеЭтапы.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукция.Период КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаПродукция.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	ТаблицаПродукция.Спецификация КАК Спецификация,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыполненныеЭтапы КАК ВыполненныеЭтапы
	|		ПО ТаблицаПродукция.КлючСвязи = ВыполненныеЭтапы.КлючСвязи
	|ГДЕ
	|	(ВыполненныеЭтапы.Этап ЕСТЬ NULL
	|			ИЛИ ВыполненныеЭтапы.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.ЗаказПокупателя,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	ТаблицаПродукция.Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукция.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаПродукция.СтруктурнаяЕдиницаПродукции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ТаблицаПродукция.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаЗаказыНаПроизводство
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыполненныеЭтапы КАК ВыполненныеЭтапы
	|		ПО ТаблицаПродукция.КлючСвязи = ВыполненныеЭтапы.КлючСвязи
	|ГДЕ
	|	ТаблицаПродукция.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|	И (ВыполненныеЭтапы.Этап ЕСТЬ NULL
	|			ИЛИ ВыполненныеЭтапы.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукция.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаПродукция.СтруктурнаяЕдиницаПродукции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаПродукция.ЗаказНаПроизводство,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Организация КАК Организация,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыполненныеЭтапы КАК ВыполненныеЭтапы
	|		ПО ТаблицаПродукция.КлючСвязи = ВыполненныеЭтапы.КлючСвязи
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСклад
	|	И ТаблицаПродукция.Период >= ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|	И (ВыполненныеЭтапы.Этап ЕСТЬ NULL
	|			ИЛИ ВыполненныеЭтапы.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	СУММА(ТаблицаПродукция.Количество)
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыполненныеЭтапы КАК ВыполненныеЭтапы
	|		ПО ТаблицаПродукция.КлючСвязи = ВыполненныеЭтапы.КлючСвязи
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСкладПродукции
	|	И ТаблицаПродукция.СтруктурнаяЕдиницаПродукции <> ТаблицаПродукция.СтруктурнаяЕдиница
	|	И (ВыполненныеЭтапы.Этап ЕСТЬ NULL
	|			ИЛИ ВыполненныеЭтапы.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	СУММА(ТаблицаПродукция.Количество)
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыполненныеЭтапы КАК ВыполненныеЭтапы
	|		ПО ТаблицаПродукция.КлючСвязи = ВыполненныеЭтапы.КлючСвязи
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСкладПродукции
	|	И ТаблицаПродукция.Период < ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|	И ТаблицаПродукция.СтруктурнаяЕдиницаПродукции <> ТаблицаПродукция.СтруктурнаяЕдиница
	|	И (ВыполненныеЭтапы.Этап ЕСТЬ NULL
	|			ИЛИ ВыполненныеЭтапы.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Организация КАК Организация,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыполненныеЭтапы КАК ВыполненныеЭтапы
	|		ПО ТаблицаПродукция.КлючСвязи = ВыполненныеЭтапы.КлючСвязи
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСклад
	|	И ТаблицаПродукция.Период >= ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|	И ТаблицаПродукция.СтруктурнаяЕдиницаПродукции <> ТаблицаПродукция.СтруктурнаяЕдиница
	|	И (ВыполненныеЭтапы.Этап ЕСТЬ NULL
	|			ИЛИ ВыполненныеЭтапы.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукция.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК ДатаСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Приход) КАК Операция,
	|	ТаблицаСерииНоменклатурыПродукция.Серия КАК Серия,
	|	&Организация КАК Организация,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.ЯчейкаПродукции КАК Ячейка,
	|	ВЫБОР
	|		КОГДА ТаблицаСерииНоменклатурыПродукция.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаСерииНоменклатурыПродукция.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукция.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикаУчетаСерий.ПустаяСсылка)
	|			ТОГДА &ОстаткиСерийНоменклатуры
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаПродукция.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ОстаткиСерийНоменклатуры
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыполненныеЭтапы КАК ВыполненныеЭтапы
	|		ПО ТаблицаПродукция.КлючСвязи = ВыполненныеЭтапы.КлючСвязи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаЗапасов.СерииНоменклатурыПродукция КАК ТаблицаСерииНоменклатурыПродукция
	|		ПО ТаблицаПродукция.Ссылка = ТаблицаСерииНоменклатурыПродукция.Ссылка
	|			И ТаблицаПродукция.КлючСвязи = ТаблицаСерииНоменклатурыПродукция.КлючСвязи
	|ГДЕ
	|	&ИспользоватьСерииНоменклатуры
	|	И ТаблицаСерииНоменклатурыПродукция.Ссылка = &Ссылка
	|	И НЕ ТаблицаПродукция.ОрдерныйСкладПродукции
	|	И (ВыполненныеЭтапы.Этап ЕСТЬ NULL
	|			ИЛИ ВыполненныеЭтапы.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗапасы.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Расход),
	|	ТаблицаСерииНоменклатуры.Серия,
	|	&Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Ячейка,
	|	ВЫБОР
	|		КОГДА ТаблицаСерииНоменклатуры.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаСерииНоменклатуры.Количество
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЗапасы.Номенклатура.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикаУчетаСерий.ПустаяСсылка)
	|						ТОГДА &ОстаткиСерийНоменклатуры
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТаблицаЗапасы.Номенклатура.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикаУчетаСерий.ПустаяСсылка)
	|					ТОГДА &ОстаткиСерийНоменклатуры
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	Документ.СборкаЗапасов.Запасы КАК ТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаЗапасов.СерииНоменклатуры КАК ТаблицаСерииНоменклатуры
	|		ПО ТаблицаЗапасы.Ссылка = ТаблицаСерииНоменклатуры.Ссылка
	|			И ТаблицаЗапасы.КлючСвязи = ТаблицаСерииНоменклатуры.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО ТаблицаЗапасы.Номенклатура = ПолитикиУчетаСерий.Владелец
	|			И ТаблицаЗапасы.СтруктурнаяЕдиница = ПолитикиУчетаСерий.СтруктурнаяЕдиница
	|			И (&Организация = ПолитикиУчетаСерий.Организация)
	|ГДЕ
	|	&ИспользоватьСерииНоменклатуры
	|	И ТаблицаСерииНоменклатуры.Ссылка = &Ссылка
	|	И НЕ ТаблицаЗапасы.СтруктурнаяЕдиница.ОрдерныйСклад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукция.Период КАК Период,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукция.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ТаблицаПродукция.ЗаказНаПроизводство
	|		ИНАЧЕ ТаблицаПродукция.ЗаказПокупателя
	|	КОНЕЦ КАК Заказ,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Спецификация КАК Спецификация,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	ВыполненныеЭтапы.Этап КАК Этап,
	|	0 КАК КоличествоПлан,
	|	ТаблицаПродукция.Количество КАК КоличествоФакт,
	|	ТаблицаПродукция.ПодразделениеЗавершающегоЭтапа КАК СтруктурнаяЕдиница
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыполненныеЭтапы КАК ВыполненныеЭтапы
	|		ПО ТаблицаПродукция.КлючСвязи = ВыполненныеЭтапы.КлючСвязи
	|ГДЕ
	|	&ИспользоватьЭтапыПроизводства
	|	И &ИспользоватьРезервирование
	|	И ТаблицаПродукция.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|	И ТаблицаПродукция.ИспользуютсяЭтапы
	|	И НЕ ВыполненныеЭтапы.Этап ЕСТЬ NULL
	|	И (ТаблицаПродукция.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ИЛИ ТаблицаПродукция.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПродукция.Период,
	|	&Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукция.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ТаблицаПродукция.ЗаказНаПроизводство
	|		ИНАЧЕ ТаблицаПродукция.ЗаказПокупателя
	|	КОНЕЦ,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Спецификация,
	|	ТаблицаПродукция.Партия,
	|	ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства),
	|	0,
	|	ТаблицаПродукция.Количество,
	|	ТаблицаПродукция.СтруктурнаяЕдиница
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	&ИспользоватьЭтапыПроизводства
	|	И &ИспользоватьРезервирование
	|	И ТаблицаПродукция.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|	И НЕ ТаблицаПродукция.ИспользуютсяЭтапы
	|	И (ТаблицаПродукция.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ИЛИ ТаблицаПродукция.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Дата КАК Дата,
	|	Шапка.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК КорректируемыйДокумент
	|ПОМЕСТИТЬ ВременнаяТаблицаШапка
	|ИЗ
	|	Документ.СборкаЗапасов КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	СборкаЗапасовЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СборкаЗапасовЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СборкаЗапасовЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	NULL КАК КорректируемыйДокумент,
	|	СборкаЗапасовЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасыПрослеживаемость
	|ИЗ
	|	Документ.СборкаЗапасов.Запасы КАК СборкаЗапасовЗапасы
	|ГДЕ
	|	СборкаЗапасовЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	СведенияПрослеживаемости.НомерСтроки КАК НомерСтроки,
	|	СведенияПрослеживаемости.РНПТ КАК РНПТ,
	|	СведенияПрослеживаемости.Количество КАК Количество,
	|	СведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	СведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВременнаяТаблицаСведенияПрослеживаемости
	|ИЗ
	|	Документ.СборкаЗапасов.СведенияПрослеживаемости КАК СведенияПрослеживаемости
	|ГДЕ
	|	СведенияПрослеживаемости.Ссылка = &Ссылка
	|	И &ВестиУчетПрослеживаемыхТоваров";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("ГраницаСреза", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам",  СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	Запрос.УстановитьПараметр("ИспользоватьТехоперации",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьТехоперации);
	Запрос.УстановитьПараметр("ИспользоватьЭтапыПроизводства",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьЭтапыПроизводства);
	Запрос.УстановитьПараметр("ИспользоватьРезервирование",  СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	
	Запрос.УстановитьПараметр("ИспользоватьСерииНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры);
	Запрос.УстановитьПараметр("ОстаткиСерийНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийНоменклатуры);
	
	// Прослеживаемость
	Запрос.УстановитьПараметр("ВестиУчетПрослеживаемыхТоваров",
		СтруктураДополнительныеСвойства.УчетнаяПолитика.ВестиУчетПрослеживаемыхТоваров);
	
	// Временно: изменение движений по ордерному складу.
	ДатаОбновленияНаРелиз_1_2_1 = Константы.ДатаОбновленияНаРелиз_1_2_1.Получить();
	Запрос.УстановитьПараметр("ДатаОбновленияНаРелиз_1_2_1", ДатаОбновленияНаРелиз_1_2_1);
	
	Запрос.УстановитьПараметр("СборкаЗапасов", НСтр("ru = 'Сборка запасов'"));

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", МассивРезультатов[2].Выгрузить().СкопироватьКолонки());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", МассивРезультатов[3].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыпускПродукции", МассивРезультатов[4].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЭтапыПроизводства", МассивРезультатов[9].Выгрузить());
	
	// Автоперемещение продукции (дополним таблицу ТаблицаЗапасыНаСкладах).
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасыНаСкладах = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах[н];
		
		Если (СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиницаПродукции = СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница
			И СтрокаТаблицаЗапасыНаСкладах.ЯчейкаПродукции <> СтрокаТаблицаЗапасыНаСкладах.Ячейка)
			ИЛИ СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиницаПродукции <> СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница Тогда
			
			// Расход.
			Если (СтрокаТаблицаЗапасыНаСкладах.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (СтрокаТаблицаЗапасыНаСкладах.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ СтрокаТаблицаЗапасыНаСкладах.ОрдерныйСклад) Тогда
				
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасыНаСкладах);
				
				СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
				
			КонецЕсли;
			
			// Приход.
			Если (СтрокаТаблицаЗапасыНаСкладах.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (СтрокаТаблицаЗапасыНаСкладах.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ СтрокаТаблицаЗапасыНаСкладах.ОрдерныйСкладПродукции
				И НЕ СтрокаТаблицаЗапасыНаСкладах.ОрдерныйСклад) Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасыНаСкладах);
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиницаПродукции;
				СтрокаТаблицыПриход.Ячейка = СтрокаТаблицаЗапасыНаСкладах.ЯчейкаПродукции;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Автоперемещение продукции (сформируем таблицу ТаблицаЗапасыКПоступлениюНаСклады).
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКПоступлениюНаСклады", МассивРезультатов[6].Выгрузить());
	
	// Автоперемещение продукции (сформируем таблицу ТаблицаЗапасыКРасходуСоСкладов).
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКРасходуСоСкладов", МассивРезультатов[7].Выгрузить());
	
	// Формирование структуры таблицы проводок документа.
	ПроведениеДокументовУНФ.СформироватьТаблицуПроводок(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Сформируем таблицу по размещению заказов.
	СформироватьТаблицаРазмещениеЗаказовСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Сформируем таблицу распределения материалов.
	СформироватьТаблицуРаспределенияМатериаловСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Запасы.
	СуммаСборки = 0;
	ИнициализироватьДанныеПоЗапасамСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки);
	
	// Отходы.
	ИнициализироватьДанныеПоОтходам(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Серии номенклатуры
	ТаблицаСерииНоменклатуры = МассивРезультатов[8].Выгрузить();
	
	Если Не СтруктураДополнительныеСвойства.УчетнаяПолитика.МиграцияСерийНоменклатурыВыполнена Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", ТаблицаСерииНоменклатуры);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Новый ТаблицаЗначений);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", ТаблицаСерииНоменклатуры);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ОстаткиСерийНоменклатуры", Истина);
	ОстаткиСерийНоменклатурыСтроки = ТаблицаСерииНоменклатуры.НайтиСтроки(ПараметрыОтбора);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатуры", ТаблицаСерииНоменклатуры.Скопировать(ОстаткиСерийНоменклатурыСтроки));
	
	ПроизводствоСервер.СформироватьДвиженияЗаказыНаПроизводствоСУчетомОстатков(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Прослеживаемость
	ПрослеживаемостьУНФ.СформироватьДвиженияРеализацияТоваров(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, "ВременнаяТаблицаЗапасыПрослеживаемость");
	
КонецПроцедуры // ИнициализироватьДанныеДокументаСборка()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СборкаЗапасовЗапасы.НомерСтроки КАК НомерСтроки,
	|	СборкаЗапасовЗапасы.Ссылка.Дата КАК Период,
	|	СборкаЗапасовЗапасы.КлючСвязи КАК КлючСвязи,
	|	СборкаЗапасовЗапасы.Ссылка КАК Ссылка,
	|	&Организация КАК Организация,
	|	СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад КАК ОрдерныйСклад,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовЗапасы.Ссылка.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница = СборкаЗапасовЗапасы.СтруктурнаяЕдиница
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|		ИНАЧЕ СборкаЗапасовЗапасы.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиницаПродукции,
	|	СборкаЗапасовЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПродукцииНаСклад,
	|	СборкаЗапасовЗапасы.СтруктурнаяЕдиница.ОрдерныйСклад КАК ОрдерныйСкладПродукции,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовЗапасы.Ссылка.ЯчейкаПродукции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК ЯчейкаПродукции,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Ссылка.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(СборкаЗапасовЗапасы.Ссылка.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство).УчетПотребностиПоСкладам
	|		КОГДА СборкаЗапасовЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(СборкаЗапасовЗапасы.ЗаказПокупателя КАК Документ.ЗаказПокупателя).УчетПотребностиПоСкладам
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчетПотребностиПоСкладам,
	|	СборкаЗапасовЗапасы.Спецификация КАК Спецификация,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетУчетаПродукции,
	|	СборкаЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	СборкаЗапасовЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СборкаЗапасовЗапасы.НомерГТД КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СборкаЗапасовЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	СборкаЗапасовЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК КоррЗаказПокупателя,
	|	СборкаЗапасовЗапасы.Ссылка.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Ссылка.ЗаказНаПроизводство = ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ СборкаЗапасовЗапасы.Ссылка.ЗаказНаПроизводство
	|	КОНЕЦ КАК ИсточникОбеспечения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА СборкаЗапасовЗапасы.Количество
	|			ИНАЧЕ СборкаЗапасовЗапасы.Количество * СборкаЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	0 КАК Сумма,
	|	ВЫРАЗИТЬ(&СборкаЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ВЫРАЗИТЬ(&СборкаЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	&ДатаОбновленияНаРелиз_1_2_1 КАК ДатаОбновленияНаРелиз_1_2_1,
	|	ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий, СборкаЗапасовЗапасы.Номенклатура.ПолитикаУчетаСерий) КАК ПолитикаУчетаСерий
	|ПОМЕСТИТЬ ВременнаяТаблицаПродукция
	|ИЗ
	|	Документ.СборкаЗапасов.Запасы КАК СборкаЗапасовЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО СборкаЗапасовЗапасы.Номенклатура = ПолитикиУчетаСерий.Владелец
	|			И СборкаЗапасовЗапасы.СтруктурнаяЕдиница = ПолитикиУчетаСерий.СтруктурнаяЕдиница
	|			И (&Организация = ПолитикиУчетаСерий.Организация)
	|ГДЕ
	|	СборкаЗапасовЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаПродукция.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	ТаблицаПродукция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК СценарийПланирования,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	НЕОПРЕДЕЛЕНО КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.СчетУчета КАК СчетУчета,
	|	ТаблицаПродукция.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	НЕОПРЕДЕЛЕНО КАК КоррСчетУчета,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК КоррНоменклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК КоррХарактеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК КоррПартия,
	|	ТаблицаПродукция.Спецификация КАК Спецификация,
	|	НЕОПРЕДЕЛЕНО КАК КоррСпецификация,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаПродукция.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка) КАК ЗаказНаПроизводство,
	|	ТаблицаПродукция.КоррЗаказПокупателя КАК КоррЗаказПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК Содержание,
	|	ТаблицаПродукция.СодержаниеПроводки КАК СодержаниеПроводки,
	|	ЛОЖЬ КАК ЗатратыНаВыпуск,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество,
	|	СУММА(ТаблицаПродукция.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.СчетУчета,
	|	ТаблицаПродукция.СчетУчетаПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	ТаблицаПродукция.Спецификация,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаПродукция.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаПродукция.ЗаказНаПроизводство,
	|	ТаблицаПродукция.КоррЗаказПокупателя,
	|	ТаблицаПродукция.СодержаниеПроводки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад КАК СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.Ячейка КАК Ячейка,
	|	ТаблицаПродукция.ЯчейкаПродукции КАК ЯчейкаПродукции,
	|	ТаблицаПродукция.ОрдерныйСклад КАК ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции КАК ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.Период < ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаПродукция.Период,
	|	&Организация,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	СУММА(ТаблицаПродукция.Количество)
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	НЕ ТаблицаПродукция.ОрдерныйСклад
	|	И ТаблицаПродукция.Период >= ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаПродукция.Период,
	|	&Организация,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	СУММА(ТаблицаПродукция.Количество)
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСклад
	|	И НЕ ТаблицаПродукция.ОрдерныйСкладПродукции
	|	И ТаблицаПродукция.Период >= ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукция.Период КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаПродукция.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	ТаблицаПродукция.Спецификация КАК Спецификация,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.ЗаказПокупателя,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	ТаблицаПродукция.Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукция.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаПродукция.СтруктурнаяЕдиницаПродукции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ТаблицаПродукция.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаЗаказыНаПроизводство
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукция.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаПродукция.СтруктурнаяЕдиницаПродукции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаПродукция.ЗаказНаПроизводство,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Организация КАК Организация,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСклад
	|	И ТаблицаПродукция.Период >= ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	СУММА(ТаблицаПродукция.Количество)
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСкладПродукции
	|	И ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад <> ТаблицаПродукция.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	СУММА(ТаблицаПродукция.Количество)
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСкладПродукции
	|	И ТаблицаПродукция.Период < ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|	И ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад <> ТаблицаПродукция.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Организация КАК Организация,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСклад
	|	И ТаблицаПродукция.Период >= ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|	И ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад <> ТаблицаПродукция.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаЗапасовПродукция.НомерСтроки КАК НомерСтроки,
	|	СборкаЗапасовПродукция.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СборкаЗапасовПродукция.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовПродукция.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовПродукция.Партия.Статус
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ПустаяСсылка)
	|	КОНЕЦ КАК ПартияСтатус,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовПродукция.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчетаЗапасов,
	|	СборкаЗапасовПродукция.Спецификация КАК Спецификация,
	|	СборкаЗапасовПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СборкаЗапасовПродукция.Ячейка КАК Ячейка,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовПродукция.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА СборкаЗапасовПродукция.Количество
	|			ИНАЧЕ СборкаЗапасовПродукция.Количество * СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовПродукция.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА СборкаЗапасовПродукция.Резерв
	|			ИНАЧЕ СборкаЗапасовПродукция.Резерв * СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Резерв,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетКт,
	|	ЛОЖЬ КАК Распределено,
	|	СборкаЗапасовПродукция.КлючСвязи КАК КлючСвязи,
	|	СборкаЗапасовПродукция.Ссылка.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
	|ГДЕ
	|	СборкаЗапасовПродукция.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукция.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК ДатаСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Приход) КАК Операция,
	|	ТаблицаСерииНоменклатуры.Серия КАК Серия,
	|	&Организация КАК Организация,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.ЯчейкаПродукции КАК Ячейка,
	|	ВЫБОР
	|		КОГДА ТаблицаСерииНоменклатуры.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаСерииНоменклатуры.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукция.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикаУчетаСерий.ПустаяСсылка)
	|			ТОГДА &ОстаткиСерийНоменклатуры
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаПродукция.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ОстаткиСерийНоменклатуры
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаЗапасов.СерииНоменклатуры КАК ТаблицаСерииНоменклатуры
	|		ПО ТаблицаПродукция.Ссылка = ТаблицаСерииНоменклатуры.Ссылка
	|			И ТаблицаПродукция.КлючСвязи = ТаблицаСерииНоменклатуры.КлючСвязи
	|ГДЕ
	|	ТаблицаПродукция.Ссылка = &Ссылка
	|	И &ИспользоватьСерииНоменклатуры
	|	И НЕ ТаблицаПродукция.ОрдерныйСклад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗапасы.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Расход),
	|	ТаблицаСерииНоменклатуры.Серия,
	|	&Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Ячейка,
	|	ВЫБОР
	|		КОГДА ТаблицаСерииНоменклатуры.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаСерииНоменклатуры.Количество
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЗапасы.Номенклатура.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикаУчетаСерий.ПустаяСсылка)
	|						ТОГДА &ОстаткиСерийНоменклатуры
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТаблицаЗапасы.Номенклатура.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикаУчетаСерий.ПустаяСсылка)
	|					ТОГДА &ОстаткиСерийНоменклатуры
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК ТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаЗапасов.СерииНоменклатурыПродукция КАК ТаблицаСерииНоменклатуры
	|		ПО ТаблицаЗапасы.Ссылка = ТаблицаСерииНоменклатуры.Ссылка
	|			И ТаблицаЗапасы.КлючСвязи = ТаблицаСерииНоменклатуры.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО ТаблицаЗапасы.Номенклатура = ПолитикиУчетаСерий.Владелец
	|			И ТаблицаЗапасы.СтруктурнаяЕдиница = ПолитикиУчетаСерий.СтруктурнаяЕдиница
	|			И (&Организация = ПолитикиУчетаСерий.Организация)
	|ГДЕ
	|	ТаблицаСерииНоменклатуры.Ссылка = &Ссылка
	|	И &ИспользоватьСерииНоменклатуры
	|	И НЕ ТаблицаЗапасы.СтруктурнаяЕдиница.ОрдерныйСклад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасыНаСкладах.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗапасыНаСкладах.Ссылка.Дата КАК Период,
	|	ТаблицаЗапасыНаСкладах.Ссылка.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД,
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаЗапасыНаСкладах.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыНаСкладах.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница
	|		ИНАЧЕ ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА ТаблицаЗапасыНаСкладах.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка
	|ПОМЕСТИТЬ СписаниеПоНомерамГТД
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.Ссылка = &Ссылка
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И ТаблицаЗапасыНаСкладах.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасыНаСкладах.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗапасыНаСкладах.Ссылка.Дата КАК Период,
	|	ТаблицаЗапасыНаСкладах.Ссылка.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД,
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаЗапасыНаСкладах.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыНаСкладах.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница
	|		ИНАЧЕ ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА ТаблицаЗапасыНаСкладах.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка
	|ПОМЕСТИТЬ ОприходованиеПоНомерамГТД
	|ИЗ
	|	Документ.СборкаЗапасов.Запасы КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.Ссылка = &Ссылка
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И ТаблицаЗапасыНаСкладах.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Дата КАК Дата,
	|	Шапка.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК КорректируемыйДокумент
	|ПОМЕСТИТЬ ВременнаяТаблицаШапка
	|ИЗ
	|	Документ.СборкаЗапасов КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаЗапасовПродукция.Номенклатура КАК Номенклатура,
	|	СборкаЗапасовПродукция.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СборкаЗапасовПродукция.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СборкаЗапасовПродукция.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовПродукция.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	NULL КАК КорректируемыйДокумент
	|ПОМЕСТИТЬ ВременнаяТаблицаПродукцияПрослеживаемость
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
	|ГДЕ
	|	СборкаЗапасовПродукция.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	СведенияПрослеживаемости.НомерСтроки КАК НомерСтроки,
	|	СведенияПрослеживаемости.РНПТ КАК РНПТ,
	|	СведенияПрослеживаемости.Количество КАК Количество,
	|	СведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	СведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВременнаяТаблицаСведенияПрослеживаемости
	|ИЗ
	|	Документ.СборкаЗапасов.СведенияПрослеживаемости КАК СведенияПрослеживаемости
	|ГДЕ
	|	СведенияПрослеживаемости.Ссылка = &Ссылка
	|	И &ВестиУчетПрослеживаемыхТоваров";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам",  СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	Запрос.УстановитьПараметр("ИспользоватьТехоперации",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьТехоперации);
	
	Запрос.УстановитьПараметр("ИспользоватьСерииНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры);
	Запрос.УстановитьПараметр("ОстаткиСерийНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийНоменклатуры);
	
	// Прослеживаемость
	Запрос.УстановитьПараметр("ВестиУчетПрослеживаемыхТоваров",
		СтруктураДополнительныеСвойства.УчетнаяПолитика.ВестиУчетПрослеживаемыхТоваров);
	
	// Временно: изменение движений по ордерному складу.
	ДатаОбновленияНаРелиз_1_2_1 = Константы.ДатаОбновленияНаРелиз_1_2_1.Получить();
	Запрос.УстановитьПараметр("ДатаОбновленияНаРелиз_1_2_1", ДатаОбновленияНаРелиз_1_2_1);
	
	Запрос.УстановитьПараметр("СборкаЗапасов", НСтр("ru = 'Сборка запасов'"));

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПродукция", МассивРезультатов[1].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПродукция.СкопироватьКолонки());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", МассивРезультатов[2].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыпускПродукции", МассивРезультатов[3].Выгрузить());
	
	СформироватьТаблицаЗапасыВРазрезеГТДРазборка(СтруктураДополнительныеСвойства);
	
	// Автоперемещение продукции (дополним таблицу ТаблицаЗапасыНаСкладах).
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасыНаСкладах = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах[н];
		
		Если (СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиницаПродукции = СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница
			И СтрокаТаблицаЗапасыНаСкладах.ЯчейкаПродукции <> СтрокаТаблицаЗапасыНаСкладах.Ячейка)
			ИЛИ СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиницаПродукции <> СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница Тогда
			
			// Расход.
			Если (СтрокаТаблицаЗапасыНаСкладах.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (СтрокаТаблицаЗапасыНаСкладах.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ СтрокаТаблицаЗапасыНаСкладах.ОрдерныйСклад) Тогда
				
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасыНаСкладах);
				
				СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
				
			КонецЕсли;
			
			// Приход.
			Если (СтрокаТаблицаЗапасыНаСкладах.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (СтрокаТаблицаЗапасыНаСкладах.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ СтрокаТаблицаЗапасыНаСкладах.ОрдерныйСкладПродукции
				И НЕ СтрокаТаблицаЗапасыНаСкладах.ОрдерныйСклад) Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасыНаСкладах);
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиницаПродукции;
				СтрокаТаблицыПриход.Ячейка = СтрокаТаблицаЗапасыНаСкладах.ЯчейкаПродукции;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Автоперемещение продукции (сформируем таблицу ТаблицаЗапасыКПоступлениюНаСклады).
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКПоступлениюНаСклады", МассивРезультатов[5].Выгрузить());
	
	// Автоперемещение продукции (сформируем таблицу ТаблицаЗапасыКРасходуСоСкладов).
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКРасходуСоСкладов", МассивРезультатов[6].Выгрузить());
	
	// Формирование проводок документа.
	ПроведениеДокументовУНФ.СформироватьТаблицуПроводок(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Сформируем таблицу по размещению заказов.
	СформироватьТаблицаРазмещениеЗаказовРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Сформируем таблицу распределения материалов.
	ТаблицаПродукция = МассивРезультатов[7].Выгрузить();
	СформироватьТаблицуРаспределенияМатериаловРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, ТаблицаПродукция);
	
	// Запасы.
	СуммаСборки = 0;
	ИнициализироватьДанныеПоЗапасамРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки);
	
	// Продукция.
	СформироватьТаблицаЗапасыПродукцияРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки);
	
	// Отходы.
	ИнициализироватьДанныеПоОтходам(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Серии номенклатуры
	Если СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Количество()>0 Тогда
		РезультатЗапроса8 = МассивРезультатов[8].Выгрузить();
		
		Если Не СтруктураДополнительныеСвойства.УчетнаяПолитика.МиграцияСерийНоменклатурыВыполнена Тогда
			СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", РезультатЗапроса8);
			СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Новый ТаблицаЗначений);
		Иначе
			СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", РезультатЗапроса8);
			СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("ОстаткиСерийНоменклатуры", Истина);
		ОстаткиСерийНоменклатурыСтроки = РезультатЗапроса8.НайтиСтроки(ПараметрыОтбора);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатуры", РезультатЗапроса8.Скопировать(ОстаткиСерийНоменклатурыСтроки));
	
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатуры", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Новый ТаблицаЗначений);
	КонецЕсли; 
	
	ПроизводствоСервер.СформироватьДвиженияЗаказыНаПроизводствоСУчетомОстатков(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Прослеживаемость
	ПрослеживаемостьУНФ.СформироватьДвиженияПрослеживаемыхТоваров(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, "ВременнаяТаблицаПродукцияПрослеживаемость");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОперацииСПрослеживаемымиТоварами", Новый ТаблицаЗначений);
	
КонецПроцедуры // ИнициализироватьДанныеДокументаРазборка()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства) Экспорт
	
	ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылкаСборкаЗапасов, "ВидОперации");
	
	Если ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка Тогда
		
		ИнициализироватьДанныеДокументаСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства)
		
	Иначе
		
		ИнициализироватьДанныеДокументаРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства)
		
	КонецЕсли;	
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти 

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаСборкаЗапасов, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если ПроведениеДокументовУНФ.КонтрольОстатковВыключен() Тогда
		Возврат;
	КонецЕсли;

	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗаказыНаПроизводствоИзменение", 
	// "ДвиженияРазмещениеЗаказовИзменение", "ДвиженияЗапасыИзменение"
	// содержат записи, необходимо выполнить контроль реализации товаров.
	
	Если СтруктураВременныеТаблицы.ДвиженияЗаказыНаПроизводствоИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияРазмещениеЗаказовИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыВРазрезеГТДИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыПринятыеИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияСерииНоменклатурыИзменение
		Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Ячейка) КАК ЯчейкаПредставление,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыНаСкладахИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
		|					ИЗ
		|						ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК ЗапасыНаСкладахОстатки
		|		ПО ДвиженияЗапасыНаСкладахИзменение.Организация = ЗапасыНаСкладахОстатки.Организация
		|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.СчетУчета) КАК СчетУчетаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.ЗаказПокупателя) КАК ЗаказПокупателяПредставление,
		|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
		|ИЗ
		|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчета,
		|						ДвиженияЗапасыИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателя
		|					ИЗ
		|						ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение)) КАК ЗапасыОстатки
		|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
		|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
		|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
		|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
		|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыПринятыеИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи) КАК ТипПриемаПередачиПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.Заказ) КАК ЗаказПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыПринятыеОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыПринятыеИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыПринятые,
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыПринятые,
		|	0 КАК СуммаРасчетовОстатокЗапасыПринятые
		|ИЗ
		|	ДвиженияЗапасыПринятыеИзменение КАК ДвиженияЗапасыПринятыеИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыИАгентскиеУслугиПринятые.Остатки(
		|				&МоментКонтроля,
		|				(Организация, ТипПриемаПередачи, Номенклатура, Характеристика, Партия, Заказ) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыПринятыеИзменение.Организация КАК Организация,
		|						ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтчетПоПереработке) КАК ТипПриемаПередачи,
		|						ДвиженияЗапасыПринятыеИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыПринятыеИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыПринятыеИзменение.Партия КАК Партия,
		|						НЕОПРЕДЕЛЕНО КАК Заказ
		|					ИЗ
		|						ДвиженияЗапасыПринятыеИзменение КАК ДвиженияЗапасыПринятыеИзменение)) КАК ЗапасыПринятыеОстатки
		|		ПО ДвиженияЗапасыПринятыеИзменение.Организация = ЗапасыПринятыеОстатки.Организация
		|			И ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи = ЗапасыПринятыеОстатки.ТипПриемаПередачи
		|			И ДвиженияЗапасыПринятыеИзменение.Номенклатура = ЗапасыПринятыеОстатки.Номенклатура
		|			И ДвиженияЗапасыПринятыеИзменение.Характеристика = ЗапасыПринятыеОстатки.Характеристика
		|			И ДвиженияЗапасыПринятыеИзменение.Партия = ЗапасыПринятыеОстатки.Партия
		|			И ДвиженияЗапасыПринятыеИзменение.Заказ = ЗапасыПринятыеОстатки.Заказ
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыНаПроизводствоИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыНаПроизводствоИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыНаПроизводствоИзменение.Склад) КАК СкладПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыНаПроизводствоИзменение.ЗаказНаПроизводство) КАК ЗаказНаПроизводствоПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыНаПроизводствоИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыНаПроизводствоИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаказыНаПроизводствоОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыНаПроизводствоИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыНаПроизводствоОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыНаПроизводство,
		|	ЕСТЬNULL(ЗаказыНаПроизводствоОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыНаПроизводство
		|ИЗ
		|	ДвиженияЗаказыНаПроизводствоИзменение КАК ДвиженияЗаказыНаПроизводствоИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаПроизводство.Остатки(
		|				&МоментКонтроля,
		|				(Организация, Склад, ЗаказНаПроизводство, Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗаказыНаПроизводствоИзменение.Организация КАК Организация,
		|						ДвиженияЗаказыНаПроизводствоИзменение.Склад КАК Склад,
		|						ДвиженияЗаказыНаПроизводствоИзменение.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|						ДвиженияЗаказыНаПроизводствоИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗаказыНаПроизводствоИзменение.Характеристика КАК Характеристика
		|					ИЗ
		|						ДвиженияЗаказыНаПроизводствоИзменение КАК ДвиженияЗаказыНаПроизводствоИзменение)) КАК ЗаказыНаПроизводствоОстатки
		|		ПО ДвиженияЗаказыНаПроизводствоИзменение.Организация = ЗаказыНаПроизводствоОстатки.Организация
		|			И ДвиженияЗаказыНаПроизводствоИзменение.Склад = ЗаказыНаПроизводствоОстатки.Склад
		|			И ДвиженияЗаказыНаПроизводствоИзменение.ЗаказНаПроизводство = ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство
		|			И ДвиженияЗаказыНаПроизводствоИзменение.Номенклатура = ЗаказыНаПроизводствоОстатки.Номенклатура
		|			И ДвиженияЗаказыНаПроизводствоИзменение.Характеристика = ЗаказыНаПроизводствоОстатки.Характеристика
		|ГДЕ
		|	ЕСТЬNULL(ЗаказыНаПроизводствоОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияРазмещениеЗаказовИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.ЗаказПокупателя) КАК ЗаказПокупателяПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.ИсточникОбеспечения) КАК ИсточникОбеспеченияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(РазмещениеЗаказовОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияРазмещениеЗаказовИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) КАК ОстатокРазмещениеЗаказов,
		|	ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокРазмещениеЗаказов
		|ИЗ
		|	ДвиженияРазмещениеЗаказовИзменение КАК ДвиженияРазмещениеЗаказовИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
		|				&МоментКонтроля,
		|				(Организация, ЗаказПокупателя, Номенклатура, Характеристика, ИсточникОбеспечения) В
		|					(ВЫБРАТЬ
		|						ДвиженияРазмещениеЗаказовИзменение.Организация КАК Организация,
		|						ДвиженияРазмещениеЗаказовИзменение.ЗаказПокупателя КАК ЗаказПокупателя,
		|						ДвиженияРазмещениеЗаказовИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияРазмещениеЗаказовИзменение.Характеристика КАК Характеристика,
		|						ДвиженияРазмещениеЗаказовИзменение.ИсточникОбеспечения КАК ИсточникОбеспечения
		|					ИЗ
		|						ДвиженияРазмещениеЗаказовИзменение КАК ДвиженияРазмещениеЗаказовИзменение)) КАК РазмещениеЗаказовОстатки
		|		ПО ДвиженияРазмещениеЗаказовИзменение.Организация = РазмещениеЗаказовОстатки.Организация
		|			И ДвиженияРазмещениеЗаказовИзменение.ЗаказПокупателя = РазмещениеЗаказовОстатки.ЗаказПокупателя
		|			И ДвиженияРазмещениеЗаказовИзменение.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
		|			И ДвиженияРазмещениеЗаказовИзменение.Характеристика = РазмещениеЗаказовОстатки.Характеристика
		|			И ДвиженияРазмещениеЗаказовИзменение.ИсточникОбеспечения = РазмещениеЗаказовОстатки.ИсточникОбеспечения
		|ГДЕ
		|	ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияСерииНоменклатурыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияСерииНоменклатурыИзменение.Серия КАК СерияПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Ячейка КАК ЯчейкаПредставление,
		|	СерииНоменклатурыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	СерииНоменклатурыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияСерииНоменклатурыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияСерииНоменклатурыИзменение КАК ДвиженияСерииНоменклатурыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СерииНоменклатуры.Остатки(&МоментКонтроля, ) КАК СерииНоменклатурыОстатки
		|		ПО ДвиженияСерииНоменклатурыИзменение.СтруктурнаяЕдиница = СерииНоменклатурыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияСерииНоменклатурыИзменение.Номенклатура = СерииНоменклатурыОстатки.Номенклатура
		|			И ДвиженияСерииНоменклатурыИзменение.Характеристика = СерииНоменклатурыОстатки.Характеристика
		|			И ДвиженияСерииНоменклатурыИзменение.Партия = СерииНоменклатурыОстатки.Партия
		|			И ДвиженияСерииНоменклатурыИзменение.Серия = СерииНоменклатурыОстатки.Серия
		|			И ДвиженияСерииНоменклатурыИзменение.Ячейка = СерииНоменклатурыОстатки.Ячейка
		|			И (ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыВРазрезеГТДИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД) КАК НомерГТДПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения) КАК СтранаПроисхожденияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыВРазрезеГТДОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыВРазрезеГТДИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыВРазрезеГТД,
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыВРазрезеГТД
		|ИЗ
		|	ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыВРазрезеГТД.Остатки(
		|				&МоментКонтроля,
		|				(Организация, НомерГТД, Номенклатура, Характеристика, Партия, СтранаПроисхождения) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД КАК НомерГТД,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения КАК СтранаПроисхождения
		|					ИЗ
		|						ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение)) КАК ЗапасыВРазрезеГТДОстатки
		|		ПО ДвиженияЗапасыВРазрезеГТДИзменение.Организация = ЗапасыВРазрезеГТДОстатки.Организация
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД = ЗапасыВРазрезеГТДОстатки.НомерГТД
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура = ЗапасыВРазрезеГТДОстатки.Номенклатура
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика = ЗапасыВРазрезеГТДОстатки.Характеристика
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Партия = ЗапасыВРазрезеГТДОстатки.Партия
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения = ЗапасыВРазрезеГТДОстатки.СтранаПроисхождения
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
			ИЛИ НЕ МассивРезультатов[1].Пустой()
			ИЛИ НЕ МассивРезультатов[2].Пустой()
			ИЛИ НЕ МассивРезультатов[3].Пустой()
			ИЛИ НЕ МассивРезультатов[4].Пустой()
			ИЛИ НЕ МассивРезультатов[5].Пустой()
			ИЛИ НЕ МассивРезультатов[6].Пустой()
			Тогда
			
			ДокументОбъектСборкаЗапасов = ДокументСсылкаСборкаЗапасов.ПолучитьОбъект()
			
		КонецЕсли;
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			КонтрольОстатковУНФ.ЗапасыНаСкладахСписком(ДокументОбъектСборкаЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток запасов.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			КонтрольОстатковУНФ.ЗапасыСписком(ДокументОбъектСборкаЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток запасов принятых.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			КонтрольОстатковУНФ.ЗапасыПринятые(ДокументОбъектСборкаЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по заказам на производство.
		Если НЕ МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			КонтрольОстатковУНФ.ЗаказыНаПроизводство(ДокументОбъектСборкаЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по размещению запасов.
		Если НЕ МассивРезультатов[4].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
			КонтрольОстатковУНФ.РазмещениеЗаказов(ДокументОбъектСборкаЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета серийных номеров.
		Если НЕ МассивРезультатов[5].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[5].Выбрать();
			КонтрольОстатковУНФ.СерииНоменклатуры(ДокументОбъектСборкаЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по остаткам запасов в разрезе номеров ГТД.
		Если Константы.КонтролироватьОстаткиПоНомерамГТД.Получить()
			И НЕ МассивРезультатов[6].Пустой() Тогда
			
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[6].Выбрать();
			КонтрольОстатковУНФ.ЗапасыВРазрезеГТД(ДокументОбъектСборкаЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

#КонецОбласти 

#Область ИнтерфейсПечати

Функция ДанныеДокументовБланкТоварногоНаполнения(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ПроизводствоСборка", НСтр("ru = 'Производство (сборка)'"));
	Запрос.УстановитьПараметр("ПроизводствоРазборка", НСтр("ru = 'Производство (разборка)'"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СборкаЗапасов.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СборкаЗапасов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСборкаЗапасов.Сборка)
	|			ТОГДА &ПроизводствоСборка
	|		ИНАЧЕ &ПроизводствоРазборка
	|	КОНЕЦ КАК ПредставлениеРегистратора,
	|	СборкаЗапасов.ВидОперации КАК ВидОперации,
	|	СборкаЗапасов.Номер КАК Номер,
	|	СборкаЗапасов.Дата КАК ДатаДокумента,
	|	СборкаЗапасов.ПоложениеСклада КАК ПоложениеСклада,
	|	СборкаЗапасов.СтруктурнаяЕдиница КАК ПредставлениеСклада,
	|	СборкаЗапасов.Ячейка КАК ПредставлениеЯчейки,
	|	СборкаЗапасов.Организация.Префикс КАК Префикс,
	|	СборкаЗапасов.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		НЕОПРЕДЕЛЕНО КАК Содержание,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(СборкаЗапасов.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА СборкаЗапасов.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(СборкаЗапасов.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ПредставлениеНоменклатуры,
	|		Характеристика КАК Характеристика,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		СтруктурнаяЕдиница КАК Склад,
	|		Ячейка КАК Ячейка,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		КлючСвязи КАК КлючСвязи
	|	) КАК ТаблицаЗапасы,
	|	СборкаЗапасов.Продукция.(
	|		НомерСтроки КАК НомерСтроки,
	|		НЕОПРЕДЕЛЕНО КАК Содержание,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(СборкаЗапасов.Продукция.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
	|				ТОГДА СборкаЗапасов.Продукция.Номенклатура.Наименование
	|			ИНАЧЕ СборкаЗапасов.Продукция.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК ПредставлениеНоменклатуры,
	|		Характеристика КАК Характеристика,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		СтруктурнаяЕдиница КАК Склад,
	|		Ячейка КАК Ячейка,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		КлючСвязи КАК КлючСвязи
	|	) КАК ТаблицаПродукция,
	|	СборкаЗапасов.СерииНоменклатуры.(
	|		Серия КАК Серия,
	|		КлючСвязи КАК КлючСвязи
	|	) КАК ТаблицаСерииНоменклатуры,
	|	СборкаЗапасов.СерииНоменклатурыПродукция.(
	|		Серия КАК Серия,
	|		КлючСвязи КАК КлючСвязи
	|	) КАК ТаблицаСерииНоменклатурыПродукции
	|ИЗ
	|	Документ.СборкаЗапасов КАК СборкаЗапасов
	|ГДЕ
	|	СборкаЗапасов.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Разборка Тогда
			
			СтрокаТаблицы.ТаблицаЗапасы = СтрокаТаблицы.ТаблицаПродукция;
			СтрокаТаблицы.ТаблицаСерииНоменклатуры = СтрокаТаблицы.ТаблицаСерииНоменклатурыПродукции;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Удалить("ТаблицаПродукция");
	ТаблицаДанных.Колонки.Удалить("ТаблицаСерииНоменклатурыПродукции");
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ДанныеДокументовМХ18(МассивОбъектов)
	
	ДанныеДокументов = Неопределено;
	Для каждого ОбъектПечати Из МассивОбъектов Цикл
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущийДокумент",	ОбъектПечати);
		Запрос.УстановитьПараметр("ДатаКурса",			ОбъектПечати.Дата);
		Запрос.УстановитьПараметр("ВалютаВидаЦен",		Справочники.ВидыЦен.Учетная.ВалютаЦены);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СборкаЗапасов.Ссылка КАК Ссылка
		|	,СборкаЗапасов.Дата КАК ДатаДокумента
		|	,СборкаЗапасов.Организация КАК Организация
		|	,СборкаЗапасов.Номер КАК Номер
		|	,СборкаЗапасов.Организация.Префикс КАК Префикс
		|	,СборкаЗапасов.СтруктурнаяЕдиница КАК Отправитель
		|	,СборкаЗапасов.СтруктурнаяЕдиницаПродукции КАК Получатель
		|	,Неопределено КАК КорСчет
		|	,НациональнаяВалюта.Значение КАК ВалютаДокумента
		|	,СборкаЗапасов.ПодписьКладовщикаОтправил.Должность КАК ДолжностьКладовщикаОтпустил
		|	,СборкаЗапасов.ПодписьКладовщикаОтправил.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщикаОтпустил
		|	,СборкаЗапасов.ПодписьКонтролера.Должность КАК ДолжностьКонтролера
		|	,СборкаЗапасов.ПодписьКонтролера.РасшифровкаПодписи КАК РасшифровкаПодписиКонтролера
		|	,СборкаЗапасов.ПодписьКладовщикаПолучил.Должность КАК ДолжностьКладовщикаПринял
		|	,СборкаЗапасов.ПодписьКладовщикаПолучил.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщикаПринял
		|	,Выбор КОГДА СборкаЗапасов.ВидОперации = Значение(Перечисление.ВидыОперацийСборкаЗапасов.Сборка)
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЭтоСборкаЗапасов
		|	,Неопределено КАК ТаблицаЗапасы
		|ИЗ Документ.СборкаЗапасов КАК СборкаЗапасов
		|	,Константа.НациональнаяВалюта КАК НациональнаяВалюта
		|ГДЕ СборкаЗапасов.Ссылка = &ТекущийДокумент
		|
		//::: Продукция
		|;Выбрать
		|	СборкаЗапасовПродукция.НомерСтроки
		|	,Выбор КОГДА (ВЫРАЗИТЬ(СборкаЗапасовПродукция.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|		ТОГДА СборкаЗапасовПродукция.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(СборкаЗапасовПродукция.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КОНЕЦ КАК ПредставлениеНоменклатуры
		|	,СборкаЗапасовПродукция.Характеристика
		|	,СборкаЗапасовПродукция.Номенклатура.Код КАК Код
		|	,СборкаЗапасовПродукция.Номенклатура.Артикул КАК Артикул
		|	,СборкаЗапасовПродукция.Номенклатура.Штрихкод КАК Штрихкод
		|	,СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов.Код КАК Счет
		|	,СборкаЗапасовПродукция.Номенклатура.Код КАК ТоварКод
		|	,СборкаЗапасовПродукция.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНаименование
		|	,СборкаЗапасовПродукция.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ
		|	,СборкаЗапасовПродукция.Количество КАК Количество
		|	,СборкаЗапасовПродукция.Количество КАК КоличествоМест
		|	,СборкаЗапасовПродукция.Резерв КАК Резерв
		|	,СборкаЗапасовПродукция.ЗаказПокупателя КАК ЗаказПокупателя
		|	,СборкаЗапасовПродукция.ЕдиницаИзмерения.Наименование КАК ВидУпаковки
		|	,Выбор КОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
		|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
		|				И СборкаЗапасовПродукция.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА 1
		|		КОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
		|			ТОГДА 1
		|		ИНАЧЕ СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент КОНЕЦ КАК КоличествоВОдномМесте
		|	,Выбор КОГДА НациональнаяВалюта.Значение = &ВалютаВидаЦен
		|		ТОГДА УчетныеЦены.Цена 
		|		ИНАЧЕ ВЫРАЗИТЬ(УчетныеЦены.Цена * ДанныеВалютыВидаЦен.Курс / ДанныеВалютыВидаЦен.Кратность КАК Число(15,2)) КОНЕЦ КАК Цена
		|	,Выбор КОГДА НациональнаяВалюта.Значение = &ВалютаВидаЦен
		|		ТОГДА ЕСТЬNULL(УчетныеЦены.Цена, 0) * СборкаЗапасовПродукция.Количество
		|		ИНАЧЕ ВЫРАЗИТЬ((ЕСТЬNULL(УчетныеЦены.Цена, 0) * СборкаЗапасовПродукция.Количество) * ДанныеВалютыВидаЦен.Курс / ДанныеВалютыВидаЦен.Кратность КАК Число(15,2)) КОНЕЦ КАК Сумма
		|ИЗ Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,ВидЦен = Значение(Справочник.ВидыЦен.Учетная)) КАК УчетныеЦены
		|		ПО СборкаЗапасовПродукция.Номенклатура = УчетныеЦены.Номенклатура
		|			И СборкаЗапасовПродукция.Характеристика = УчетныеЦены.Характеристика
		|			И СборкаЗапасовПродукция.ЕдиницаИзмерения = УчетныеЦены.ЕдиницаИзмерения
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, Валюта = &ВалютаВидаЦен) КАК ДанныеВалютыВидаЦен
		|		ПО ИСТИНА
		|	,Константа.НациональнаяВалюта КАК НациональнаяВалюта
		|	,Константа.ПечатьПользовательскихЕдиницИзмерения КАК ПечатьПользовательскихЕдиницИзмерения
		|ГДЕ СборкаЗапасовПродукция.Ссылка = &ТекущийДокумент
		|
		//::: Запасы
		|;Выбрать
		|	СборкаЗапасовЗапасы.НомерСтроки
		|	,Выбор КОГДА (ВЫРАЗИТЬ(СборкаЗапасовЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|		ТОГДА СборкаЗапасовЗапасы.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(СборкаЗапасовЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КОНЕЦ КАК ПредставлениеНоменклатуры
		|	,СборкаЗапасовЗапасы.Характеристика
		|	,СборкаЗапасовЗапасы.Номенклатура.Код КАК Код
		|	,СборкаЗапасовЗапасы.Номенклатура.Артикул КАК Артикул
		|	,СборкаЗапасовЗапасы.Номенклатура.Штрихкод КАК Штрихкод
		|	,СборкаЗапасовЗапасы.Количество КАК Количество
		|	,СборкаЗапасовЗапасы.Количество КАК КоличествоМест
		|	,СборкаЗапасовЗапасы.Резерв КАК Резерв
		|	,СборкаЗапасовЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
		|	,СборкаЗапасовЗапасы.ЕдиницаИзмерения.Наименование КАК ВидУпаковки
		|	,СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов.Код КАК Счет
		|	,СборкаЗапасовЗапасы.Номенклатура.Код КАК ТоварКод
		|	,СборкаЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНаименование
		|	,СборкаЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ
		|	,Выбор КОГДА СборкаЗапасовЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
		|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
		|				И СборкаЗапасовЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА 1
		|		КОГДА СборкаЗапасовЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
		|			ТОГДА 1
		|		ИНАЧЕ СборкаЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент КОНЕЦ КАК КоличествоВОдномМесте
		|	,Выбор КОГДА НациональнаяВалюта.Значение = &ВалютаВидаЦен
		|		ТОГДА УчетныеЦены.Цена 
		|		ИНАЧЕ ВЫРАЗИТЬ(УчетныеЦены.Цена * ДанныеВалютыВидаЦен.Курс / ДанныеВалютыВидаЦен.Кратность КАК Число(15,2)) КОНЕЦ КАК Цена
		|	,Выбор КОГДА НациональнаяВалюта.Значение = &ВалютаВидаЦен
		|		ТОГДА ЕСТЬNULL(УчетныеЦены.Цена, 0) * СборкаЗапасовЗапасы.Количество
		|		ИНАЧЕ ВЫРАЗИТЬ((ЕСТЬNULL(УчетныеЦены.Цена, 0) * СборкаЗапасовЗапасы.Количество) * ДанныеВалютыВидаЦен.Курс / ДанныеВалютыВидаЦен.Кратность КАК Число(15,2)) КОНЕЦ КАК Сумма
		|ИЗ Документ.СборкаЗапасов.Запасы КАК СборкаЗапасовЗапасы
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,ВидЦен = Значение(Справочник.ВидыЦен.Учетная)) КАК УчетныеЦены
		|		ПО СборкаЗапасовЗапасы.Номенклатура = УчетныеЦены.Номенклатура
		|			И СборкаЗапасовЗапасы.Характеристика = УчетныеЦены.Характеристика
		|			И СборкаЗапасовЗапасы.ЕдиницаИзмерения = УчетныеЦены.ЕдиницаИзмерения
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, Валюта = &ВалютаВидаЦен) КАК ДанныеВалютыВидаЦен
		|		ПО ИСТИНА
		|	,Константа.НациональнаяВалюта КАК НациональнаяВалюта
		|	,Константа.ПечатьПользовательскихЕдиницИзмерения КАК ПечатьПользовательскихЕдиницИзмерения
		|ГДЕ СборкаЗапасовЗапасы.Ссылка = &ТекущийДокумент";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Если ДанныеДокументов = Неопределено Тогда
			
			ДанныеДокументов = РезультатЗапроса[0].Выгрузить();
			ДанныеДокументов[0].ТаблицаЗапасы = ?(ДанныеДокументов[0].ЭтоСборкаЗапасов, РезультатЗапроса[1].Выгрузить(), РезультатЗапроса[2].Выгрузить());
			
		Иначе
			
			НоваяСтрока			= ДанныеДокументов.Добавить();
			ДанныеПоДокументу	= РезультатЗапроса[0].Выгрузить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоДокументу[0]);
			
			НоваяСтрока.ТаблицаЗапасы = ?(НоваяСтрока.ЭтоСборкаЗапасов, РезультатЗапроса[1].Выгрузить(), РезультатЗапроса[2].Выгрузить());
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДокументов;
	
КонецФункции

// Функция проверяет, проведен документ или нет, и вызывает процедуру печати документа.
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеПечати = Новый Структура;
	ПараметрыНоменклатуры = Новый Структура;
	
	Для каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало,
			ДанныеПечати);
		
		Если ИмяМакета = "М11" Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СборкаЗапасов.ПФ_MXL_М11");
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СборкаЗапасов_М11";
			ЭтоСборкаЗапасов = (ТекущийДокумент.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка);
			
			ТекстЗапроса =
			"
			|//::::: Шапка документа :::::
			|
			|ВЫБРАТЬ
			|	СборкаЗапасов.Дата КАК ДатаДокумента
			|	,СборкаЗапасов.Организация КАК Организация
			|	,СборкаЗапасов.Номер КАК Номер
			|	,СборкаЗапасов.Организация.Префикс КАК Префикс
			|	,СборкаЗапасов.ПоложениеСклада КАК ПоложениеСклада
			|	,СборкаЗапасов.СтруктурнаяЕдиницаЗапасов КАК Отправитель
			|	,СборкаЗапасов.СтруктурнаяЕдиница КАК Получатель
			|	,СборкаЗапасов.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя
			|	,СборкаЗапасов.ПодписьКладовщикаОтправил.Должность КАК ДолжностьКладовщикаОтпустил
			|	,СборкаЗапасов.ПодписьКладовщикаОтправил.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщикаОтпустил
			|	,СборкаЗапасов.ПодписьКладовщикаПолучил.Должность КАК ДолжностьКладовщикаПринял
			|	,СборкаЗапасов.ПодписьКладовщикаПолучил.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщикаПринял
			|ИЗ Документ.СборкаЗапасов КАК СборкаЗапасов
			|ГДЕ СборкаЗапасов.Ссылка = &ТекущийДокумент
			|
			|//::::: Таблица документа :::::
			|
			|;Выбрать
			|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки
			|	,ТабличнаяЧасть.Номенклатура.НаименованиеПолное КАК Запас
			|	,ТабличнаяЧасть.Номенклатура.Артикул КАК Артикул
			|	,ТабличнаяЧасть.Номенклатура.Штрихкод КАК Штрихкод
			|	,ТабличнаяЧасть.Номенклатура.СчетУчетаЗапасов.Код КАК Счет
			|	,ТабличнаяЧасть.Номенклатура.Код КАК НоменклатурныйНомер
			|	,ТабличнаяЧасть.Количество КАК Количество
			|	,ТабличнаяЧасть.Резерв КАК Резерв
			|	,ТабличнаяЧасть.ЗаказПокупателя КАК ЗаказПокупателя
			|	,ТабличнаяЧасть.СтруктурнаяЕдиница КАК Отправитель
			|	,ТабличнаяЧасть.Характеристика КАК Характеристика
			|	,ТабличнаяЧасть.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование
			|	,ТабличнаяЧасть.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод
			|	,Выбор КОГДА &ВалютаВидЦен = НациональнаяВалюта.Значение
			|		ТОГДА ЕСТЬNULL(УчетныеЦены.Цена, 0) / ЕСТЬNULL(УчетныеЦены.ЕдиницаИзмерения.Коэффициент, 1)
			|		ИНАЧЕ (ЕСТЬNULL(УчетныеЦены.Цена, 0) * КурсыВалютыВидаЦен.Курс / КурсыВалютыВидаЦен.Кратность) / ЕСТЬNULL(УчетныеЦены.ЕдиницаИзмерения.Коэффициент, 1)
			|	КОНЕЦ КАК Цена
			|	,Выбор КОГДА &ВалютаВидЦен = НациональнаяВалюта.Значение
			|		ТОГДА ЕСТЬNULL(УчетныеЦены.Цена * ТабличнаяЧасть.Количество, 0) / ЕСТЬNULL(УчетныеЦены.ЕдиницаИзмерения.Коэффициент, 1)
			|		ИНАЧЕ (ЕСТЬNULL(УчетныеЦены.Цена * ТабличнаяЧасть.Количество, 0) * КурсыВалютыВидаЦен.Курс / КурсыВалютыВидаЦен.Кратность) / ЕСТЬNULL(УчетныеЦены.ЕдиницаИзмерения.Коэффициент, 1)
			|	КОНЕЦ КАК Сумма
			|ИЗ
			|	ИмяТабличнойЧасти КАК ТабличнаяЧасть
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, ВидЦен = &ВидЦенПлановойОценки) КАК УчетныеЦены
			|	ПО ТабличнаяЧасть.Номенклатура = УчетныеЦены.Номенклатура
			|		И ТабличнаяЧасть.Характеристика = УчетныеЦены.Характеристика
			|	,РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаВидЦен) КАК КурсыВалютыВидаЦен
			|	,Константа.НациональнаяВалюта КАК НациональнаяВалюта
			|ГДЕ ТабличнаяЧасть.Ссылка = &ТекущийДокумент
			|УПОРЯДОЧИТЬ ПО ТабличнаяЧасть.НомерСтроки";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТабличнойЧасти", СтрШаблон("Документ.СборкаЗапасов.%1", ?(
				ЭтоСборкаЗапасов, "Запасы", "Продукция")));
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
			Запрос.УстановитьПараметр("ДатаДокумента", ТекущийДокумент.Дата);
			Запрос.УстановитьПараметр("ВидЦенПлановойОценки", ТекущийДокумент.ПлановаяОценка);
			Запрос.УстановитьПараметр("ВалютаВидЦен", ?(ЗначениеЗаполнено(ТекущийДокумент.ПлановаяОценка),
				ТекущийДокумент.ПлановаяОценка.ВалютаЦены, Константы.НациональнаяВалюта.Получить()));
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			Шапка = РезультатЗапроса[0].Выбрать();
			Шапка.Следующий();
			
			СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Организация,
				Шапка.ДатаДокумента);
			
			ОбластьШапка = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "Шапка", "", Ошибки);
			Если ОбластьШапка <> Неопределено Тогда
			
				ШаблонЗаголовка = НСтр("ru ='ТРЕБОВАНИЕ-НАКЛАДНАЯ № %1 от %2'");
				НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента,
					Шапка.Номер, Шапка.Префикс);
				ДатаДокумента = ПечатьДокументовУНФ.ПредставлениеДатыВДокументах(Шапка.ДатаДокумента);
				
				ДанныеПечати.Вставить("Заголовок", СтрШаблон(ШаблонЗаголовка, НомерДокумента, ДатаДокумента));
				ДанныеПечати.Вставить("КодОКПО", СведенияОбОрганизации.КодПоОКПО);
				ДанныеПечати.Вставить("ПредставлениеОрганизации", ПечатьДокументовУНФ.ОписаниеОрганизации(
					СведенияОбОрганизации));
				ДанныеПечати.Вставить("ДатаСоставления", Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yy"));
				
				Если Шапка.ПоложениеСклада=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
					СписокСкладов = Новый СписокЗначений;
					ВыборкаСтрокЗапасы = РезультатЗапроса[1].Выбрать();
					Пока ВыборкаСтрокЗапасы.Следующий() Цикл
						Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Отправитель) И СписокСкладов.НайтиПоЗначению(
							ВыборкаСтрокЗапасы.Отправитель) = Неопределено Тогда
							СписокСкладов.Добавить(ВыборкаСтрокЗапасы.Отправитель);
						КонецЕсли;
					КонецЦикла;
					ДанныеПечати.Вставить("Отправитель", Строка(СписокСкладов));
				КонецЕсли; 
				
				ОбластьШапка.Параметры.Заполнить(Шапка);
				ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
				ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет,
					ОбластьШапка, ТекущийДокумент);
				ТабличныйДокумент.Вывести(ОбластьШапка);
				
			КонецЕсли;
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			
			ВыборкаСтрокЗапасы = РезультатЗапроса[1].Выбрать();
			Пока ВыборкаСтрокЗапасы.Следующий() Цикл
				
				ДанныеПечати.Очистить();
				
				ПараметрыНоменклатуры.Очистить();
				ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", ВыборкаСтрокЗапасы.Запас);
				ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", ВыборкаСтрокЗапасы.Характеристика);
				ОписаниеЗапаса = ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры);
				ДанныеПечати.Вставить("Запас", ОписаниеЗапаса);
				
				ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокЗапасы);
				ОбластьСтрока.Параметры.Заполнить(ДанныеПечати);
				
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				
			КонецЦикла;
			
			ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
			ОбластьПодвал.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОбластьПодвал);
			
		ИначеЕсли ИмяМакета = "ГарантийныйТалонПродукция" Тогда
			
			НоменклатураВДокументахСервер.СформироватьГарантийныеТалоныПроизводство(ТабличныйДокумент, ТекущийДокумент,
				Ошибки, "Продукция");
			
		ИначеЕсли ИмяМакета = "ГарантийныйТалонКомплектующие" Тогда
			
			НоменклатураВДокументахСервер.СформироватьГарантийныеТалоныПроизводство(ТабличныйДокумент, ТекущийДокумент,
				Ошибки, "Запасы");
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
			ТекущийДокумент);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М11") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М11", "М-11", ПечатнаяФорма(
			МассивОбъектов, ОбъектыПечати, "М11"));

	КонецЕсли;

	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм,
		Обработки.ПечатьМХ18.ИдентификаторПечатнойФормы());
	Если ПечатнаяФорма <> Неопределено Тогда

		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьМХ18.КлючПараметровПечати();
		ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьМХ18.ПолныйПутьКМакету();
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьМХ18.ПредставлениеПФ();

		ДанныеОбъектовПечати = ДанныеДокументовМХ18(МассивОбъектов);
		Обработки.ПечатьМХ18.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати, Ложь);

	КонецЕсли;

	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "БланкТоварногоНаполнения");
	Если ПечатнаяФорма <> Неопределено Тогда

		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьБланкТоварногоНаполнения.КлючПараметровПечати();
		ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьБланкТоварногоНаполнения.ПолныйПутьКМакету();
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьБланкТоварногоНаполнения.ПредставлениеПФ();

		ДанныеОбъектовПечати = ДанныеДокументовБланкТоварногоНаполнения(МассивОбъектов);
		Обработки.ПечатьБланкТоварногоНаполнения.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати);

	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГарантийныйТалонПродукция") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ГарантийныйТалонПродукция",
			"Гарантийный талон (продукция)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ГарантийныйТалонПродукция"));

	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГарантийныйТалонКомплектующие") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ГарантийныйТалонКомплектующие",
			"Гарантийный талон (комплектующие)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати,
			"ГарантийныйТалонКомплектующие"));

	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов,
		КоллекцияПечатныхФорм);

КонецПроцедуры // Печать()

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М11," + Обработки.ПечатьМХ18.ИдентификаторПечатнойФормы();
	КомандаПечати.Представление = ПечатьДокументовУНФ.ПредставлениеКомплектаДокументов();
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М11";
	КомандаПечати.Представление = НСтр("ru = 'М11 (Требование-накладная)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = Обработки.ПечатьМХ18.ИдентификаторПечатнойФормы();
	КомандаПечати.Представление = Обработки.ПечатьМХ18.ПредставлениеПФ();
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 7;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ГарантийныйТалонПродукция";
	КомандаПечати.Представление = НСтр("ru = 'Гарантийный талон на продукцию'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьСерииНоменклатуры";
	КомандаПечати.Порядок = 10;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ГарантийныйТалонКомплектующие";
	КомандаПечати.Представление = НСтр("ru = 'Гарантийный талон на комплектующие'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьСерииНоменклатуры";
	КомандаПечати.Порядок = 14;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "БланкТоварногоНаполнения";
	КомандаПечати.Представление = Обработки.ПечатьБланкТоварногоНаполнения.ПредставлениеПФ();
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 17;
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПечатьЭтикетокИЦенников)
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатуры)
		И ПолучитьФункциональнуюОпцию("ПечатьЭтикетокИЦенников") Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьЭтикетокИЦенниковИзДокументов";
		КомандаПечати.Идентификатор = "ПечатьЭтикетокИзСборкиЗапасов";
		КомандаПечати.Представление = НСтр("ru = 'Печать этикеток'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Порядок = 20;
		
	КонецЕсли;

	
КонецПроцедуры

#КонецОбласти

Функция ВыполнятьПеремещение(ДокументСсылкаСборкаЗапасов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СборкаЗапасов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СборкаЗапасов КАК СборкаЗапасов
	|ГДЕ
	|	СборкаЗапасов.Ссылка = &Ссылка
	|	И СборкаЗапасов.ПоложениеСклада <> ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|	И СборкаЗапасов.СтруктурнаяЕдиницаЗапасов <> СборкаЗапасов.СтруктурнаяЕдиница
	|	И СборкаЗапасов.СтруктурнаяЕдиницаЗапасов <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СборкаЗапасовЗапасы.Ссылка
	|ИЗ
	|	Документ.СборкаЗапасов.Запасы КАК СборкаЗапасовЗапасы
	|ГДЕ
	|	СборкаЗапасовЗапасы.Ссылка = &Ссылка
	|	И СборкаЗапасовЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСборкаЗапасов.Сборка)
	|	И СборкаЗапасовЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|	И СборкаЗапасовЗапасы.СтруктурнаяЕдиница <> СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница
	|	И СборкаЗапасовЗапасы.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СборкаЗапасовПродукция.Ссылка
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
	|ГДЕ
	|	СборкаЗапасовПродукция.Ссылка = &Ссылка
	|	И СборкаЗапасовПродукция.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСборкаЗапасов.Разборка)
	|	И СборкаЗапасовПродукция.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|	И СборкаЗапасовПродукция.СтруктурнаяЕдиница <> СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница
	|	И СборкаЗапасовПродукция.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)";
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти 

#КонецЕсли