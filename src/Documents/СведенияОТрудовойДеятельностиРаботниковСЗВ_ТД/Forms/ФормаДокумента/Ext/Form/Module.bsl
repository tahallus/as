#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ПФР");	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Организация =Справочники.Организации.ОрганизацияПоУмолчанию();
		Объект.ОтчетныйПериод = НачалоМесяца(НачалоМесяца(ТекущаяДатаСеанса())-1);
		Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.АвторизованныйПользователь(), "ОсновнойОтветственный");
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
		ПриПолученииДанныхНаСервере(ТекущийОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаПечатьПереопределенная;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РедактированиеМероприятийПоСотруднику" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ПриИзмененииДанныхДокументаПоСотруднику(Параметр.АдресВоВременномХранилище);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьДоступностьДанныхФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	Оповестить("Запись_СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйПериодПредставлениеПриИзменении(Элемент)
	
	ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ОтчетныйПериод", "ОтчетныйПериодПредставление", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйПериодПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ОтчетныйПериод", "ОтчетныйПериодПредставление");
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйПериодПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ВводМесяцаРегулирование(ЭтаФорма, "Объект.ОтчетныйПериод", "ОтчетныйПериодПредставление", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйПериодПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйПериодПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ФлагБлокировкиДокументаПриИзменении(Элемент)
	ФлагБлокировкиДокументаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереименованиеОрганизацииПриИзменении(Элемент)
	
	ПереименованиеОрганизацииПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	
	СотрудникиСотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСтраховойНомерПФРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПерсонифицированныйУчетКлиентСервер.УстановитьФорматСтраховогоНомераПФР(ТекущиеДанные.СтраховойНомерПФР);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияКарточкиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	
	СписокСотрудников = Новый Массив;
	Для Каждого Сотрудник Из ВыбранноеЗначение Цикл
		СписокСотрудников.Добавить(Сотрудник);
	КонецЦикла;
	
	ЗаполнитьДанныеСотрудников(СписокСотрудников, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	СотрудникиПередУдалениемНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьКадровымиИзменениями(Команда)
	
	ЗаполнитьКадровымиИзменениямиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсемиСотрудниками(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаПереименования) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана дата переименования.'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВсемиСотрудникамиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	
	ПараметрыОткрытияФормы = Новый Структура;
	СтруктураОтбора = Новый Структура;
	Если Не УправлениеНебольшойФирмойВызовСервера.ПолучитьКонстантуСервер("УчетПоКомпании") Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	ПараметрыОткрытияФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытияФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыОткрытияФормы.Вставить("АдресСпискаПодобранныхСотрудников", АдресСпискаПодобранныхСотрудников());
	
	ОткрытьФорму("Справочник.Сотрудники.Форма.ФормаВыбора", ПараметрыОткрытияФормы, Элементы.Сотрудники);
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	ОчиститьСообщения();	
	
	Отказ = Ложь;
	ПроверкаЗаполненияДокумента(Отказ);
	ПроверкаСтороннимиПрограммами(Отказ);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуЗавершение", ЭтотОбъект, Команда);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключаемуюКомандуЗавершение(Результат, Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);	
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);			
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, Параметры) Экспорт
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);	
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, Параметры) Экспорт
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ПФР");	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ПФР");	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	
	ИспользоватьЗамещение = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ПерсонифицированныйУчетРасширенная") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПерсонифицированныйУчетРасширенный");
	    ИспользоватьЗамещение = Модуль.ИспользоватьЗамещениеГосударственныхМуниципальныхДолжностей();
	КонецЕсли;                                                              
	
	ДанныеОбъектаВДанныеФормы(ТекущийОбъект);
	УстановитьДоступностьДанныхФормы();
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ДанныеОбъектаВДанныеФормы(ТекущийОбъект)
	
	ФлагБлокировкиДокумента = Объект.ДокументПринятВПФР;	
	ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ОтчетныйПериод", "ОтчетныйПериодПредставление");	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДанныхФормы()
	
	Если Объект.ДокументПринятВПФР Тогда  
		ТолькоПросмотр = Истина;	
	КонецЕсли;
	
	УстановитьЗаголовокГруппыПрежнегоСтрахователя(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ПереименованиеОрганизацииГруппа", "Видимость", Объект.ПереименованиеОрганизации);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "СотрудникиЗаполнитьВсемиСотрудниками", "Видимость", Объект.ПереименованиеОрганизации);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "СотрудникиЗаполнитьКадровымиИзменениями", "Видимость", Не Объект.ПереименованиеОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОчиститьДокумент();
	
	Объект.Руководитель = Справочники.ФизическиеЛица.ПустаяСсылка();
	Объект.ДолжностьРуководителя = Справочники.Должности.ПустаяСсылка();
	Объект.ОтчетныйПериод = НачалоМесяца(НачалоМесяца(ТекущаяДатаСеанса())-1);
	Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.АвторизованныйПользователь(), "ОсновнойОтветственный");
	
	Объект.ИмяФайлаДляПФР = Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ИмяФайла(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДокумент()
	
	Объект.Сотрудники.Очистить();
	Объект.Мероприятия.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ФлагБлокировкиДокументаПриИзмененииНаСервере()
	
	Модифицированность = Истина;
	Объект.ДокументПринятВПФР = ФлагБлокировкиДокумента;
	
	Если Не ФлагБлокировкиДокумента Тогда
		ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКадровымиИзменениямиНаСервере()
	
	ВидыСобытий = Новый Массив;
	ВидыСобытий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Прием);
	ВидыСобытий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Увольнение);
	ВидыСобытий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Перевод);
	
	ЗаполнитьНаСервере(ВидыСобытий, Ложь);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьВсемиСотрудникамиНаСервере()
	
	ОчиститьДокумент();
	
	ПеренестиДанныеТрудовойДеятельностиСотрудниковВДокумент(ЭлектронныеТрудовыеКнижки.ДанныеТрудовойДеятельностиСотрудниковОрганизации(
		Истина, Объект.Ссылка, Объект.Организация, Объект.ОтчетныйПериод, КонецМесяца(Объект.ОтчетныйПериод), Истина, Истина), Истина);
		
	Для Каждого СтрокаСотрудника Из Объект.Сотрудники Цикл 
		Мероприятие = Объект.Мероприятия.Добавить();
	    ЗаполнитьЗначенияСвойств(Мероприятие, Объект, "Сведения,НаименованиеДокументаОснования,ДатаДокументаОснования,НомерДокументаОснования,СерияДокументаОснования");
		Мероприятие.Сотрудник = СтрокаСотрудника.Сотрудник;
		Мероприятие.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Переименование;
		Мероприятие.ДатаМероприятия = Объект.ДатаПереименования;
		Мероприятие.Идентификатор = Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	
	Объект.Мероприятия.Сортировать("Сотрудник,ДатаМероприятия");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере(ВидыМероприятий, ЗаполнитьВсемиСотрудниками)
	
	ОчиститьДокумент();
	
	ПеренестиДанныеТрудовойДеятельностиСотрудниковВДокумент(ЭлектронныеТрудовыеКнижки.ДанныеТрудовойДеятельностиСотрудниковОрганизации(
		Истина, Объект.Ссылка, Объект.Организация, Объект.ОтчетныйПериод, КонецМесяца(Объект.ОтчетныйПериод), ВидыМероприятий, ЗаполнитьВсемиСотрудниками), ЗаполнитьВсемиСотрудниками);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСотрудников(СписокСотрудников, ЗаполнитьВсемиСотрудниками = Ложь)
	
	ВидыСобытий = Новый Массив;
	ВидыСобытий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Прием);
	ВидыСобытий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Увольнение);
	ВидыСобытий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Перевод);
	
	ПеренестиДанныеТрудовойДеятельностиСотрудниковВДокумент(ЭлектронныеТрудовыеКнижки.ДанныеТрудовойДеятельностиСотрудников(
		Истина, Объект.Ссылка, СписокСотрудников, Объект.Организация, Объект.ОтчетныйПериод, КонецМесяца(Объект.ОтчетныйПериод), ВидыСобытий, ЗаполнитьВсемиСотрудниками), ЗаполнитьВсемиСотрудниками);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиДанныеТрудовойДеятельностиСотрудниковВДокумент(ДанныеЗаполнения, ЗаполнитьВсемиСотрудниками)
	
	Для Каждого ДанныеЗаполненияСотрудника Из ДанныеЗаполнения Цикл
		Если ЗаполнитьВсемиСотрудниками 
			Или  ДанныеЗаполненияСотрудника.ТрудоваяДеятельность.Количество() > 0
			Или ЗначениеЗаполнено(ДанныеЗаполненияСотрудника.ЗаявлениеОПредоставлении) 
			Или ЗначениеЗаполнено(ДанныеЗаполненияСотрудника.ЗаявлениеОПродолжении) Тогда
			ЗаполнитьЗначенияСвойств(Объект.Сотрудники.Добавить(), ДанныеЗаполненияСотрудника);
			Для Каждого ЗаписьТрудовойДеятельности Из ДанныеЗаполненияСотрудника.ТрудоваяДеятельность Цикл
				ЗаполнитьЗначенияСвойств(Объект.Мероприятия.Добавить(), ЗаписьТрудовойДеятельности);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиСотрудникПриИзмененииНаСервере()
	
	СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	Если Не ЗначениеЗаполнено(СтрокаСотрудника.Сотрудник) Тогда
		ЗаполнитьДанныеСтрокиПустымиЗначениями(СтрокаСотрудника);
		Возврат;
	КонецЕсли;
	
	ВидыСобытий = Новый Массив;
	ВидыСобытий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Прием);
	ВидыСобытий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Увольнение);
	ВидыСобытий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Перевод);

	СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаСотрудника.Сотрудник);
	
	ДанныеЗаполнения = ЭлектронныеТрудовыеКнижки.ДанныеТрудовойДеятельностиСотрудников(
		Истина, Объект.Ссылка, СписокСотрудников, Объект.Организация, Объект.ОтчетныйПериод, КонецМесяца(Объект.ОтчетныйПериод), ВидыСобытий);
	
	Если ДанныеЗаполнения.Количество() > 0 Тогда
		ДанныеЗаполненияСотрудника = ДанныеЗаполнения[0];
		ЗаполнитьЗначенияСвойств(СтрокаСотрудника, ДанныеЗаполненияСотрудника);
		Для Каждого ЗаписьТрудовойДеятельности Из ДанныеЗаполненияСотрудника.ТрудоваяДеятельность Цикл
			ЗаполнитьЗначенияСвойств(Объект.Мероприятия.Добавить(), ЗаписьТрудовойДеятельности);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСтрокиПустымиЗначениями(ДанныеСтроки)
	
	ДанныеСтроки.Фамилия = "";
	ДанныеСтроки.Имя = "";
	ДанныеСтроки.Отчество = "";
	ДанныеСтроки.СтраховойНомерПФР = "";
	ДанныеСтроки.ЯвляетсяСовместителем = Ложь;
	
КонецПроцедуры	

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ПроверкаЗаполненияДокумента(Отказ = Ложь)
		
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	Объект.ИмяФайлаДляПФР = Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ИмяФайла(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура ПереименованиеОрганизацииПриИзмененииНаСервере()
	
	ОчиститьДокумент();
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если Не Объект.Проведен Или Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияПродолжение", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияПродолжение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверкаЗаполненияДокумента(Отказ);	
	
	Если Отказ Тогда 
		ТекстВопроса = НСтр("ru = 'В комплекте обнаружены ошибки.
							|Продолжить (не рекомендуется)?'");
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);					
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.'"));
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);				
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаСтороннимиПрограммами(Отказ)
	
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'При проверке встроенной проверкой обнаружены ошибки.'")
	Иначе	
		ТекстСообщения = НСтр("ru = 'При проверке встроенной проверкой ошибок не обнаружено.'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(Ссылка, УникальныйИдентификатор)
	
	Возврат УчетСтраховыхВзносов.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииДанныхДокументаПоСотруднику(АдресВоВременномХранилище)
	
	ДанныеТекущегоДокументаПоСотрудникуВДанныеФормы(АдресВоВременномХранилище);
	
КонецПроцедуры	

&НаСервере
Процедура ДанныеТекущегоДокументаПоСотрудникуВДанныеФормы(АдресВоВременномХранилище)
	
	ДанныеШапкиДокумента = Объект;
	
	ДанныеТекущегоДокумента = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ДанныеТекущегоДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтрокиПоСотруднику = Неопределено;
	НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ДанныеТекущегоДокумента.Сотрудник));
		
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеТекущейСтрокиПоСотруднику = НайденныеСтроки[0];
		Если ДанныеТекущейСтрокиПоСотруднику.Сотрудник <> ДанныеТекущегоДокумента.Сотрудник Тогда
			ДанныеТекущейСтрокиПоСотруднику = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеТекущейСтрокиПоСотруднику = Неопределено  Тогда
		ВызватьИсключение НСтр("ru = 'В текущем документе не найдены данные по редактируемому сотруднику.'");
	КонецЕсли;
	
	ДанныеТекущейСтрокиПоСотруднику = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(ДанныеТекущейСтрокиПоСотруднику, ДанныеТекущегоДокумента);
		
	СтруктураПоиска = Новый Структура("Сотрудник", ДанныеТекущейСтрокиПоСотруднику.Сотрудник);
	
	СтрокиМероприятий = Объект.Мероприятия.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаМероприятия Из СтрокиМероприятий Цикл
		Объект.Мероприятия.Удалить(Объект.Мероприятия.Индекс(СтрокаМероприятия));
	КонецЦикла;
	
	Для Каждого СтрокаМероприятия Из ДанныеТекущегоДокумента.Мероприятия Цикл
		СтрокаМероприятияОбъекта = Объект.Мероприятия.Добавить();
		СтрокаМероприятияОбъекта.Сотрудник = ДанныеТекущейСтрокиПоСотруднику.Сотрудник;
		ЗаполнитьЗначенияСвойств(СтрокаМероприятияОбъекта, СтрокаМероприятия);
	КонецЦикла;
	
	Если ДанныеТекущегоДокумента.Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СотрудникиПередУдалениемНаСервере()
	
	Для Каждого Идентификатор Из Элементы.Сотрудники.ВыделенныеСтроки Цикл
		СтрокаСотрудник = Объект.Сотрудники.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаСотрудник <> Неопределено Тогда 
			УдалитьСтрокиМероприятий(СтрокаСотрудник.Сотрудник);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиМероприятий(Сотрудник) Экспорт
	
	УдаляемыеСтроки = Объект.Мероприятия.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект.Мероприятия.Удалить(Объект.Мероприятия.Индекс(УдаляемаяСтрока));
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФормуРедактированияКарточкиДокумента()
	
	ДанныеТекущейСтроки = Элементы.Сотрудники.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда	
		
		ДанныеТекущегоДокументаПоСотрудникуВоВременноеХранилище();
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("АдресВоВременномХранилище", АдресДанныхТекущегоДокументаВХранилище);
		ПараметрыОткрытияФормы.Вставить("РедактируемыйДокументСсылка", Объект.Ссылка);
		ПараметрыОткрытияФормы.Вставить("Сотрудник", ДанныеТекущейСтроки.Сотрудник);
		ПараметрыОткрытияФормы.Вставить("Организация", Объект.Организация);
		ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		
		ОткрытьФорму("Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Форма.ФормаРедактированияМероприятий", ПараметрыОткрытияФормы, ЭтаФорма);	
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ДанныеТекущегоДокументаПоСотрудникуВоВременноеХранилище()
	
	Если Элементы.Сотрудники.ТекущаяСтрока = Неопределено Тогда
		АдресДанныхТекущегоДокументаВХранилище = "";
		Возврат;
	КонецЕсли;	
	
	ДанныеТекущейСтрокиПоСотруднику = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	Если ДанныеТекущейСтрокиПоСотруднику = Неопределено Тогда
		АдресДанныхТекущегоДокументаВХранилище = "";
		Возврат;
	КонецЕсли;
	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник", ДанныеТекущейСтрокиПоСотруднику.Сотрудник);
	ДанныеСотрудника.Вставить("СтраховойНомерПФР", ДанныеТекущейСтрокиПоСотруднику.СтраховойНомерПФР);
	ДанныеСотрудника.Вставить("Фамилия", ДанныеТекущейСтрокиПоСотруднику.Фамилия);
	ДанныеСотрудника.Вставить("Имя", ДанныеТекущейСтрокиПоСотруднику.Имя);
	ДанныеСотрудника.Вставить("Отчество", ДанныеТекущейСтрокиПоСотруднику.Отчество);
	ДанныеСотрудника.Вставить("ДатаРождения", ДанныеТекущейСтрокиПоСотруднику.ДатаРождения);
	ДанныеСотрудника.Вставить("ЯвляетсяСовместителем", ДанныеТекущейСтрокиПоСотруднику.ЯвляетсяСовместителем);
	ДанныеСотрудника.Вставить("ЗаявлениеОПродолжении", ДанныеТекущейСтрокиПоСотруднику.ЗаявлениеОПродолжении);
	ДанныеСотрудника.Вставить("ЗаявлениеОПредоставлении", ДанныеТекущейСтрокиПоСотруднику.ЗаявлениеОПредоставлении);
	ДанныеСотрудника.Вставить("ЗаявлениеОПродолженииОтмена", ДанныеТекущейСтрокиПоСотруднику.ЗаявлениеОПродолженииОтмена);
	ДанныеСотрудника.Вставить("ЗаявлениеОПредоставленииОтмена", ДанныеТекущейСтрокиПоСотруднику.ЗаявлениеОПредоставленииОтмена);
	ДанныеСотрудника.Вставить("Мероприятия", Новый Массив);
	
	СтруктураПоиска = Новый Структура("Сотрудник", ДанныеТекущейСтрокиПоСотруднику.Сотрудник);
	СтрокиМероприятий = Объект.Мероприятия.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПолейМероприятия = Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.СтруктураПолейМероприятий();
	Для Каждого СтрокаМероприятия Из СтрокиМероприятий Цикл
		СтруктураПолей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейМероприятия);
		ЗаполнитьЗначенияСвойств(СтруктураПолей, СтрокаМероприятия);
		ДанныеСотрудника.Мероприятия.Добавить(СтруктураПолей);
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(АдресДанныхТекущегоДокументаВХранилище) Тогда
		ПоместитьВоВременноеХранилище(ДанныеСотрудника, АдресДанныхТекущегоДокументаВХранилище);	
	Иначе	
		АдресДанныхТекущегоДокументаВХранилище = ПоместитьВоВременноеХранилище(ДанныеСотрудника, УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьМесяцПоДате(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления)
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
	
КонецПроцедуры


&НаКлиенте
Процедура ВводМесяцаПриИзменении(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность = Ложь)
	
	ЗначениеПредставления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления);
	Значение              = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	ДатаКакМесяцПодобратьДатуПоТексту(ЗначениеПредставления, Значение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено)
	
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	Если ПустаяСтрока(Текст) Тогда
		ДатаПоТексту = Дата(1, 1, 1);
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если СтрНайти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли СтрНайти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли СтрНайти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли СтрНайти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли СтрНайти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 И МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 4 Тогда
				ГодЧислом = Число(Подстроки[1]);
			КонецЕсли;                    
			
		Иначе
			
			Возврат СписокВозврата;
			
		КонецЕсли;                
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 И МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
			
		Иначе
			
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гггг'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

&НаКлиенте
Процедура ВводМесяцаНачалоВыбора(Форма, РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, ИзменитьМодифицированность = Истина, ОповещениеЗавершения = Неопределено, ЗначениеМесяцаПоУмолчанию = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("РедактируемыйОбъект", РедактируемыйОбъект);
	ДополнительныеПараметры.Вставить("ПутьРеквизита", ПутьРеквизита);
	ДополнительныеПараметры.Вставить("ПутьРеквизитаПредставления", ПутьРеквизитаПредставления);
	ДополнительныеПараметры.Вставить("ИзменитьМодифицированность", ИзменитьМодифицированность);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("ВводМесяцаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериодаИС", 
		Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь),
		Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры)Экспорт

	Форма = ДополнительныеПараметры.Форма;
	РедактируемыйОбъект = ДополнительныеПараметры.РедактируемыйОбъект;
	ПутьРеквизита = ДополнительныеПараметры.ПутьРеквизита;
	ПутьРеквизитаПредставления = ДополнительныеПараметры.ПутьРеквизитаПредставления;
	ИзменитьМодифицированность = ДополнительныеПараметры.ИзменитьМодифицированность;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Ложь);
		КонецЕсли;
		
	Иначе
		
		Значение = ВыбранноеЗначение;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		Представление = ПолучитьПредставлениеМесяца(Значение);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, Представление);
		
		Если ИзменитьМодифицированность Тогда 
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеЗавершения = Неопределено Тогда
		Форма.ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаРегулирование(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Направление, Модифицированность = Ложь, ЗначениеМесяцаПоУмолчанию = Неопределено)
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
		НовоеЗначение = Значение;
		
	Иначе
		НовоеЗначение = ДобавитьМесяц(Значение, Направление);
	КонецЕсли; 
	
	Если НовоеЗначение >= '00010101' Тогда
		
		Значение = НовоеЗначение;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
		
		Модифицированность = Истина;
	 	
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Не ПустаяСтрока(Текст) Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Текст <> "" Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает представление месяца по переданной дате.
//
// Параметры:
//		ДатаНачалаМесяца
//
// Возвращаемое значение;
//		Строка
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеМесяца(ДатаНачалаМесяца) 
	
	Возврат Формат(ДатаНачалаМесяца, "ДФ='ММММ гггг'");
	
КонецФункции

// Подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту.
//
&НаКлиенте
Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев  = Новый СписокЗначений;
	Месяцы         = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГруппыПрежнегоСтрахователя(УправляемаяФорма)
	
	Объект = УправляемаяФорма.Объект;
	Элементы = УправляемаяФорма.Элементы;
	
	Если Не ЗначениеЗаполнено(Объект.ПрежнийСтраховательНаименованиеПолное) Тогда
		ПредставлениеСтрахователя = НСтр("ru = 'не задан'");
	Иначе
		
		ПредставленияСтрахователя = Новый Массив;
		ПредставленияСтрахователя.Добавить(СокрЛП(Объект.ПрежнийСтраховательНаименованиеПолное));
		Если ЗначениеЗаполнено(Объект.ПрежнийСтраховательРегистрационныйНомерПФР) Тогда
			ПредставленияСтрахователя.Добавить(СтрШаблон(
				НСтр("ru = 'рег. номер: %1'"), СокрЛП(Объект.ПрежнийСтраховательРегистрационныйНомерПФР)));
		КонецЕсли; 
		Если ЗначениеЗаполнено(Объект.ПрежнийСтраховательИНН) Тогда
			ПредставленияСтрахователя.Добавить(СтрШаблон(
				НСтр("ru = 'ИНН: %1'"), СокрЛП(Объект.ПрежнийСтраховательИНН)));
		КонецЕсли; 
		Если ЗначениеЗаполнено(Объект.ПрежнийСтраховательКПП) Тогда
			ПредставленияСтрахователя.Добавить(СтрШаблон(
				НСтр("ru = 'КПП: %1'"), СокрЛП(Объект.ПрежнийСтраховательКПП)));
		КонецЕсли;
		ПредставлениеСтрахователя = СтрСоединить(ПредставленияСтрахователя, ", ");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПрежнийСтраховательГруппа",
		"ЗаголовокСвернутогоОтображения",
		СтрШаблон(НСтр("ru = 'Прежний страхователь (%1)'"), ПредставлениеСтрахователя));
	
КонецПроцедуры

&НаКлиенте
Процедура ПрежнийСтраховательНаименованиеПолноеПриИзменении(Элемент)
	
	УстановитьЗаголовокГруппыПрежнегоСтрахователя(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПрежнийСтраховательРегистрационныйНомерПФРПриИзменении(Элемент)
	
	УстановитьЗаголовокГруппыПрежнегоСтрахователя(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПрежнийСтраховательИННПриИзменении(Элемент)
	
	УстановитьЗаголовокГруппыПрежнегоСтрахователя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрежнийСтраховательКПППриИзменении(Элемент)
	
	УстановитьЗаголовокГруппыПрежнегоСтрахователя(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти
