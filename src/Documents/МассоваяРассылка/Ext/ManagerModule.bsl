#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Получатели.Контакт, NULL КАК ИСТИНА)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Используется для получения данных сервиса в фоновом задании. См. МассоваяРассылка.Форма.РассылкаСервиса.
//
Функция ЗагрузитьДанныеСервисаДляДанныхФормы(ДанныеРассылки) Экспорт
	
	АдресныеКнигиСервиса = МассовыеРассылкиИнтеграция.ПолучитьАдресныеКнигиСервиса();
	ОтправителиСервиса = МассовыеРассылкиИнтеграция.ПолучитьОтправителейСервиса();
	
	Если ЗначениеЗаполнено(ДанныеРассылки.Идентификатор)
		Или ДанныеРассылки.Свойство("ИдентификаторПисьмаОснования") И ЗначениеЗаполнено(ДанныеРассылки.ИдентификаторПисьмаОснования) Тогда
		МассовыеРассылкиИнтеграция.ПолучитьСостояниеРассылки(ДанныеРассылки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеРассылки.ИдентификаторШаблона) Тогда
		ДанныеШаблона = МассовыеРассылкиИнтеграция.ПолучитьШаблонСервиса(ДанныеРассылки.ИдентификаторШаблона);
	Иначе
		ДанныеШаблона = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеРассылки.ИдентификаторАдреснойКниги) И Не ЗначениеЗаполнено(ДанныеРассылки.Идентификатор) Тогда
		ДанныеАдреснойКниги = МассовыеРассылкиИнтеграция.ДанныеАдреснойКнигиСервиса(ДанныеРассылки.ИдентификаторАдреснойКниги);
	Иначе
		ДанныеАдреснойКниги = Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("АдресныеКнигиСервиса", АдресныеКнигиСервиса);
	Результат.Вставить("ОтправителиСервиса", ОтправителиСервиса);
	Результат.Вставить("ДанныеРассылки", ДанныеРассылки);
	Если ДанныеШаблона <> Неопределено Тогда
		Результат.Вставить("ДанныеШаблона", ДанныеШаблона);
	КонецЕсли;
	Если ДанныеАдреснойКниги <> Неопределено Тогда
		Результат.Вставить("ДанныеАдреснойКниги", ДанныеАдреснойКниги);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Используется для создания массовой рассылки сервиса в фоновом задании. См. МассоваяРассылка.Форма.РассылкаСервиса.
//
Функция СоздатьМассовуюРассылкуСервиса(ДанныеРассылки) Экспорт
	
	ОтправкаЗапросов.Подождать(8);
	МассовыеРассылкиИнтеграция.СоздатьРассылку(ДанныеРассылки);
	Возврат ДанныеРассылки;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("ДатаРассылки");
	Поля.Добавить("Номер");
	Поля.Добавить("ПометкаУдаления");
	Поля.Добавить("СервисМассовойРассылки");
	Поля.Добавить("Состояние");
	Поля.Добавить("СпособОтправки");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидРассылки = СтрШаблон(НСтр("ru='Рассылка %1'"), Данные.СпособОтправки);
	Если ЗначениеЗаполнено(Данные.СервисМассовойРассылки) Тогда
		ВидРассылки = ВидРассылки + " " + МассовыеРассылкиИнтеграция.ПредставлениеСервиса(Данные.СервисМассовойРассылки);
	КонецЕсли;
	
	Если Данные.ПометкаУдаления Тогда
		Состояние = НСтр("ru='(удалена)'");
	Иначе
		Состояние = "(" + НРег(Данные.Состояние) + ")";
	КонецЕсли;
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1: %2 %3 %4'"),
		ВидРассылки,
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Данные.Номер, Истина, Истина),
		?(ЗначениеЗаполнено(Данные.ДатаРассылки), "от " + Формат(Данные.ДатаРассылки, "ДЛФ=D"), ""),
		Состояние);
	
	Представление = СокрЛП(Представление);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если НРег(ВидФормы) = НРег("ФормаДокумента") Или НРег(ВидФормы) = НРег("ФормаОбъекта") Тогда
		
		Ссылка = Неопределено;
		Параметры.Свойство("Ключ", Ссылка);
		
		ЗначениеКопирования = Неопределено;
		Параметры.Свойство("ЗначениеКопирования", ЗначениеКопирования);
		
		ЗначениеЗаполненияСервиса = Неопределено;
		ЗначениеЗаполнения(Параметры, "СервисМассовойРассылки", ЗначениеЗаполненияСервиса);
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			СервисРассылки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "СервисМассовойРассылки");
		ИначеЕсли ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			СервисРассылки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеКопирования, "СервисМассовойРассылки");
		ИначеЕсли ТипЗнч(ЗначениеЗаполненияСервиса) = Тип("ПеречислениеСсылка.СервисыМассовыхРассылок")
			И ЗначениеЗаполнено(ЗначениеЗаполненияСервиса) Тогда
			СервисРассылки = ЗначениеЗаполненияСервиса;
		Иначе
			СервисРассылки = Неопределено;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СервисРассылки) Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = Документы.МассоваяРассылка.ПустаяСсылка().Метаданные().Формы.РассылкаСервиса.Имя;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	//
	// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
	//
	
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Контакт", НСтр("ru = 'Получатель (контакт)'"), ОписаниеТиповСтрока200, ОписаниеТиповСтрока200);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "КакСвязаться", НСтр("ru = 'Электронный адрес'"), ОписаниеТиповСтрока200, ОписаниеТиповСтрока200, , , Истина);
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ПараметрыСопоставления, АдресРезультата) Экспорт
	
	ТаблицаСопоставленияДанных	= ПараметрыСопоставления.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных		= ПараметрыСопоставления.НастройкиЗагрузкиДанных;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Контакт, СтрокаТаблицыФормы.Контакт_ВходящиеДанные);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.КакСвязаться, СтрокаТаблицыФормы.КакСвязаться_ВходящиеДанные);
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПрогрессСопоставленияДанных(ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицыФормы), РазмерТаблицыДанных);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблицаСопоставленияДанных, АдресРезультата);
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.КакСвязаться)
		И СтрНайти(СтрокаТаблицыФормы.КакСвязаться, "@") > 0;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначениеЗаполнения(Параметры, Свойство, Значение)
	
	Если Не Параметры.Свойство("ЗначенияЗаполнения") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Параметры.ЗначенияЗаполнения.Свойство(Свойство) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Значение = Параметры.ЗначенияЗаполнения[Свойство];
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецЕсли