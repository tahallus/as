
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РассылкаПереданаВСервис = ЗначениеЗаполнено(ТекущийОбъект.СервисРассылкиИдентификатор);
	НужноЗаполнитьПолучателей = Получатели.Количество() = 0 Или Не РассылкаПереданаВСервис И ТекущийОбъект.Получатели.Количество() <> 0;
	
	Если НужноЗаполнитьПолучателей Тогда
		Получатели.Очистить();
		Для каждого Получатель Из ТекущийОбъект.Получатели Цикл
			ЗаполнитьЗначенияСвойств(Получатели.Добавить(), Получатель);
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьСлужебныеПоляТаблицыПолучателиСервер();
	
	ЭтоСозданиеНовойАдреснойКнигиСервиса = ЗначениеЗаполнено(ТекущийОбъект.СервисРассылкиИмяНовойАдреснойКниги);
	ЗапланироватьРассылку = ЗначениеЗаполнено(Объект.СервисРассылкиПланируемаяДатаОтправки);
	ЗаполнитьВремяОтправкиНаФорме();
	СформироватьЗаголовокКомандыОтправить();
	ПрочитатьВложения(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обход ошибки: EDT не поддерживает значение Кольцевая в метаданных.
	ПоказателиДоставки.ТипДиаграммы = ТипДиаграммы.Кольцевая;
	ПоказателиПрочтения.ТипДиаграммы = ТипДиаграммы.Кольцевая;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Не ЗначениеЗаполнено(Объект.СервисМассовойРассылки) Тогда
		Объект.СервисМассовойРассылки = МассовыеРассылкиИнтеграция.ПодключенныйСервис();
	КонецЕсли;
	
	ЗаполнитьСвязьФильтровИСерийДиаграмм();
	ЗаполнитьНазваниеСервисаВЭлементах();
	ЗаполнитьПустыеСтатусыДоставки();
	ЗаполнитьВремяОтправкиНаФорме();
	
	НастроитьЭлементыФормыПриСоздании();
	УправлениеФормойДлительнаяОперация(ЭтотОбъект, ЗагружаемыеДанные());
	НачатьПервоначальноеПолучениеДанныхСервиса();
	УстановитьУсловноеОформлениеФормы();
	
	СостояниеРассылки = СостояниеРассылкиСервиса();
	Элементы.СостояниеНеотправленнойРассылки.Заголовок = СостояниеРассылки;
	Элементы.СостояниеОтправленнойРассылки.Заголовок = СостояниеРассылки;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(
		Метаданные.Документы.МассоваяРассылка.ТабличныеЧасти.Получатели,
		НастройкиЗагрузкиДанных, ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НачатьОжиданиеПолученияДанныхСервиса();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоСозданиеНовойАдреснойКнигиСервиса Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СервисРассылкиИмяНовойАдреснойКниги) Тогда
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru='Адресная книга (создание)'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,, "Объект.СервисРассылкиИмяНовойАдреснойКниги", Отказ);
		КонецЕсли;
		
		Для каждого Получатель Из Получатели Цикл
			Если Не ЗначениеЗаполнено(Получатель.КакСвязаться) Тогда
				ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", НСтр("ru='Как связаться'"), Получатель.НомерСтроки, НСтр("ru='Получатели'"));
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,, СтрШаблон("Получатели[%1].КакСвязаться", Получатель.НомерСтроки - 1), Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЭтоЗаписьПередОтправкойРассылки Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СервисРассылкиАдресОтправителя) Или Не ЗначениеЗаполнено(Объект.СервисРассылкиИмяОтправителя) Тогда
		ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", Элементы.СервисРассылкиАдресОтправителя.Заголовок);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,, "Объект.СервисРассылкиАдресОтправителя", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СервисРассылкиНаименованиеШаблона) Тогда
		ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru='Шаблон'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,, "СервисРассылкиНаименованиеШаблона", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СервисРассылкиИдентификаторАдреснойКниги) И Не ЭтоСозданиеНовойАдреснойКнигиСервиса Тогда
		ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru='Адресная книга'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,, "Объект.СервисРассылкиИдентификаторАдреснойКниги", Отказ);
	КонецЕсли;
	
	Если Получатели.Количество() = 0 Тогда
		ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список", "Заполнение",,, НСтр("ru='Получатели'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,, "Получатели", Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.СервисРассылкиИмяНовойАдреснойКниги) Тогда
		ЗаполнитьПолучателейОбъектаИзДанныхФормы(ТекущийОбъект, Получатели);
	КонецЕсли;
	
	Если ЭтоЗаписьПослеОтправкиРассылки Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СоздаватьСобытия", Объект.СоздаватьСобытия);
	КонецЕсли;
	
	ЭтоЗаписьПослеОтправкиРассылки = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьВложения(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьСлужебныеПоляТаблицыПолучателиКлиент();
	УправлениеФормой();
	
	ОповеститьОбИзменении(Объект.Ссылка);
	ОповеститьОбАктивизации(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьЗаголовокФормы(ЭтотОбъект);
	ЗаполнитьСлужебныеПоляТаблицыПолучателиСервер();
	ЗаполнитьПустыеСтатусыДоставки();
	
	СостояниеРассылки = СостояниеРассылкиСервиса();
	Элементы.СостояниеНеотправленнойРассылки.Заголовок = СостояниеРассылки;
	Элементы.СостояниеОтправленнойРассылки.Заголовок = СостояниеРассылки;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗапланироватьРассылкуПриИзменении(Элемент)
	ОбработатьИзменениеПлановойДатыРассылки();
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаОтправкиПриИзменении(Элемент)
	ЗапланироватьРассылку = Истина;
	ОбработатьИзменениеПлановойДатыРассылки();
КонецПроцедуры

&НаКлиенте
Процедура ПлановоеВремяОтправкиПриИзменении(Элемент)
	ЗапланироватьРассылку = Истина;
	ОбработатьИзменениеПлановойДатыРассылки();
КонецПроцедуры

&НаКлиенте
Процедура СервисРассылкиАдресОтправителяПриИзменении(Элемент)
	
	Объект.СервисРассылкиИмяОтправителя = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.СервисРассылкиАдресОтправителя) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОтправителя = ОтправителиСервиса.НайтиСтроки(Новый Структура("Email", Объект.СервисРассылкиАдресОтправителя))[0];
	
	Объект.СервисРассылкиИмяОтправителя = ДанныеОтправителя.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если ТипЗнч(Объект.Тема) = Тип("СправочникСсылка.ТемыСобытий") И ЗначениеЗаполнено(Объект.Тема) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Тема);
	КонецЕсли;
	ПараметрыФормы.Вставить("СкрыватьСодержание", Истина);
	
	ОткрытьФорму("Справочник.ТемыСобытий.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Тема = Строка(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораТемы(Текст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СервисРассылкиНаименованиеШаблонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СервисРассылкиНаименованиеШаблонаОкончаниеВыбора", ЭтотОбъект);
	ОткрытьФорму(
		"Документ.МассоваяРассылка.Форма.ВыборШаблонаСервисаРассылок",
		Новый Структура("ШаблонДляАктивизации", Объект.СервисРассылкиИдентификаторШаблона),
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СервисРассылкиНаименованиеШаблонаОкончаниеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СервисРассылкиНаименованиеШаблона = Результат.Наименование;
	Объект.СервисРассылкиИдентификаторШаблона = Результат.Идентификатор;
	
	ТемаПисьмаПоШаблону = Результат.ТемаПисьма;
	
	Элементы.Тема.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(ТемаПисьмаПоШаблону) Тогда
		Элементы.Тема.КнопкаВыпадающегоСписка = Истина;
		Элементы.Тема.СписокВыбора.Добавить(ТемаПисьмаПоШаблону);
		Если НЕ ЗначениеЗаполнено(Объект.Тема) Тогда
			Объект.Тема = ТемаПисьмаПоШаблону;
		КонецЕсли;
	Иначе
		Элементы.Тема.КнопкаВыпадающегоСписка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СервисРассылкиИдентификаторАдреснойКнигиПриИзменении(Элемент)
	
	Объект.Получатели.Очистить();
	Получатели.Очистить();
	ПосчитатьКоличествоПолучателей();
	
	ЭтоСозданиеНовойАдреснойКнигиСервиса = Объект.СервисРассылкиИдентификаторАдреснойКниги = КодСозданиеНовойАдреснойКниги();
	Если ЭтоСозданиеНовойАдреснойКнигиСервиса Тогда
		Объект.СервисРассылкиИдентификаторАдреснойКниги = Неопределено;
	КонецЕсли;
	
	Если НЕ ЭтоСозданиеНовойАдреснойКнигиСервиса И ЗначениеЗаполнено(Объект.СервисРассылкиИдентификаторАдреснойКниги) Тогда
		НачатьПолучениеДанныхАдреснойКнигиСервиса();
		НачатьОжиданиеПолученияДанныхСервиса();
	КонецЕсли;
	
	УправлениеФормой();
	
	Если ЭтоСозданиеНовойАдреснойКнигиСервиса Тогда
		ТекущийЭлемент = Элементы.НоваяАдреснаяКнигаСервиса;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПисьмоОснованиеРассылкиСервиса(Команда)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СсылкаСтраницаПисьмаОснования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРассылкуСервиса(Команда)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СсылкаСтраницаРассылки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВебВерсиюПисьма(Команда)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СсылкаВебВерсияПисьма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиДоставкиВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	ОбработатьВыборЗначенияДиаграммы(ЗначениеДиаграммы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПрочтенияВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	ОбработатьВыборЗначенияДиаграммы(ЗначениеДиаграммы);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрСтатусДоставкиПриИзменении(Элемент)
	
	ОтобратьПолучателейПоСтатусуДоставки();
	ВыделитьСериюПоФильтру();
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиСнятьФлажки(Команда)
	Для каждого Получатель Из Получатели Цикл
		Получатель.Выбран = Ложь;
	КонецЦикла;
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиУстановитьФлажки(Команда)
	Для каждого Получатель Из Получатели Цикл
		Получатель.Выбран = Истина;
	КонецЦикла;
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыбранныхПолучателейВАдреснуюКнигу(Команда)
	
	МассовыеРассылкиКлиент.ЭкспортКонтактнойИнформацииВСервисРассылок(СсылкаНаТаблицуПолучателейДляЭкспортаВСервис());
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыбранныхПолучателейИзАдреснойКниги(Команда)
	
	ДоступныеДействия = Новый СписокЗначений;
	
	Если Не АдреснаяКнигаНеНайдена Тогда
		ДоступныеДействия.Добавить(
			Новый ОписаниеОповещения("УдалитьВыбранныхПолучателейИзТекущейАдреснойКниги", ЭтотОбъект),
			СтрШаблон(НСтр("ru='Удалить из ""%1""'"), ПредставлениеТекущейАдреснойКниги()));
	КонецЕсли;
	
	ДоступныеДействия.Добавить(
		Новый ОписаниеОповещения("УдалитьВыбранныхПолучателейИзВсехАдресныхКниг", ЭтотОбъект),
		НСтр("ru='Удалить из всех адресных книг'"));
	
	ПоказатьВыборИзМеню(
		Новый ОписаниеОповещения("УдалитьВыбранныхПолучателейИзАдреснойКнигиЗавершение", ЭтотОбъект),
		ДоступныеДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыбранныхПолучателейИзАдреснойКнигиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Результат.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучатели

&НаКлиенте
Процедура ПолучателиПриИзменении(Элемент)
	Если ЭтоСозданиеНовойАдреснойКнигиСервиса Тогда
		ЗаполнитьНомераСтрокТаблицыПолучатели(ЭтотОбъект);
		ПосчитатьКоличествоПолучателей();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПередИзменениемТаблицыПолучатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломИзменения(Элемент, Отказ)
	
	ПередИзменениемТаблицыПолучатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередУдалением(Элемент, Отказ)
	
	ПередИзменениемТаблицыПолучатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиВыбранПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
		ПараметрыФормы.Вставить("ТипКИ", "АдресЭлектроннойПочты");
	Иначе
		ПараметрыФормы.Вставить("ТипКИ", "Телефон");
	КонецЕсли;
	Если ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		Контакт = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).Контакт;
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПараметрыФормы.Вставить("ТекущийКонтрагент", Контакт);
		КонецЕсли;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиКонтактВыборЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаАдреснойКниги", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		Контакт = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).Контакт;
		ПоказатьЗначение(,Контакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		// Выбор осуществлен механизмом автоподбора
		Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).Контакт = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораКонтактов(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле <> Элементы.ПолучателиКонтакт Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоСозданиеНовойАдреснойКнигиСервиса Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Контакт) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Контакт);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавлениеФайлаКВложениям();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		ДополнительныеПараметры = Новый Структура("Имя", ПараметрыПеретаскивания.Значение.Имя);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВложенияПеретаскиваниеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(ОписаниеОповещения, , ПараметрыПеретаскивания.Значение.ПолноеИмя, Ложь);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьРассылкуСервиса(Команда)
	
	ЭтоНовый = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	ОчиститьСообщения();
	
	НачатьСозданиеРассылкиСервиса();
	Если ДлительнаяОперация <> Неопределено Тогда
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Новый ОписаниеОповещения("СоздатьМассовуюРассылкуПродолжение", ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяАдреснаяКнигаСервисаОтмена(Команда)
	
	ЭтоСозданиеНовойАдреснойКнигиСервиса = Ложь;
	Объект.СервисРассылкиИмяНовойАдреснойКниги = "";
	Объект.Получатели.Очистить();
	Получатели.Очистить();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСервиса(Команда)
	
	ОчиститьСообщения();
	НачатьОбновлениеДанныхСервисаНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьПодчиненныеСобытия(Команда)
	
	Объект.СоздаватьСобытия = Не Объект.СоздаватьСобытия;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКонтактов(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
		ПараметрыФормы.Вставить("ТипКИ", "АдресЭлектроннойПочты");
	Иначе
		ПараметрыФормы.Вставить("ТипКИ", "Телефон");
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодборКонтактовЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаАдреснойКниги", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНезаполненные(Команда)
	
	УдаляемыеПолучатели = Новый Массив;
	
	Для Каждого СтрокаПолучатель Из Получатели Цикл
		Если ПустаяСтрока(СтрокаПолучатель.КакСвязаться) Тогда
			УдаляемыеПолучатели.Добавить(СтрокаПолучатель);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйПолучатель Из УдаляемыеПолучатели Цикл
		Получатели.Удалить(УдаляемыйПолучатель);
	КонецЦикла;
	
	ПосчитатьКоличествоПолучателей();
	ЗаполнитьНомераСтрокТаблицыПолучатели(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаДанныхСервиса

&НаСервере
Процедура НачатьПервоначальноеПолучениеДанныхСервиса()
	
	ДанныеРассылки = ДанныеРассылкиИзОбъекта();
	НачатьПолучениеДанныхСервиса("Документы.МассоваяРассылка.ЗагрузитьДанныеСервисаДляДанныхФормы", ДанныеРассылки);
	ДлительнаяОперацияЗавершение = "ЗавершитьПервоначальноеПолучениеДанныхСервиса";
	
	ЗагружаемыеДанные = ЗагружаемыеДанные();
	ЗагружаемыеДанные.ЗагрузкаОтправителя = Не РассылкаПереданаВСервис;
	ЗагружаемыеДанные.ЗагрузкаАдресныхКниг = Истина;
	ЗагружаемыеДанные.ЗагрузкаСтатистики = Истина;
	ЗагружаемыеДанные.ЗагрузкаСтатусовДоставки = Истина;
	УправлениеФормойДлительнаяОперация(ЭтотОбъект, ЗагружаемыеДанные);
	
КонецПроцедуры

&НаСервере
Процедура НачатьПолучениеДанныхАдреснойКнигиСервиса()
	
	НачатьПолучениеДанныхСервиса("МассовыеРассылкиИнтеграция.ДанныеАдреснойКнигиСервиса", Объект.СервисРассылкиИдентификаторАдреснойКниги);
	ДлительнаяОперацияЗавершение = "ЗавершитьПолучениеДанныхАдреснойКнигиСервиса";
	
	ЗагружаемыеДанные = ЗагружаемыеДанные();
	ЗагружаемыеДанные.ЗагрузкаПолучателей = Истина;
	УправлениеФормойДлительнаяОперация(ЭтотОбъект, ЗагружаемыеДанные);
	
КонецПроцедуры

&НаСервере
Процедура НачатьПолучениеДанныхСервиса(ИмяФункции, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = Ложь;
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяФункции, Параметр1, Параметр2, Параметр3);
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	ВыполняетсяЗагрузкаДанныхСервиса = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеПолученияДанныхСервиса()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗагрузкиДанныхСервиса", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиДанныхСервиса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполняетсяЗагрузкаДанныхСервиса = Ложь;
	УправлениеФормойДлительнаяОперация(ЭтотОбъект, ЗагружаемыеДанные());
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	ПоказатьСообщенияПользователюИзФоновогоЗадания();
	
	Если ДлительнаяОперацияЗавершение = "ЗавершитьПервоначальноеПолучениеДанныхСервиса" Тогда
		ЗавершитьПервоначальноеПолучениеДанныхСервиса(Результат.АдресРезультата);
		ТекущийЭлемент = Элементы.СервисРассылкиАдресОтправителя;
	ИначеЕсли ДлительнаяОперацияЗавершение = "ЗавершитьПолучениеДанныхАдреснойКнигиСервиса" Тогда
		ЗавершитьПолучениеДанныхАдреснойКнигиСервиса(Результат.АдресРезультата);
	Иначе
		ТекстОшибки = СтрШаблон(
			НСтр("ru='Не определена процедура ДлительнаяОперацияЗавершение ""%1"".'"),
			ДлительнаяОперацияЗавершение);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	УправлениеФормой();
	
	Если ВыполняетсяЗагрузкаДанныхСервиса Тогда
		НачатьОжиданиеПолученияДанныхСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьПервоначальноеПолучениеДанныхСервиса(АдресРезультатаЗагрузки)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);
	
	АдресныеКнигиСервиса.Загрузить(Результат.АдресныеКнигиСервиса);
	ОтправителиСервиса.Загрузить(Результат.ОтправителиСервиса);
	ДанныеРассылки = Результат.ДанныеРассылки;
	Если Результат.Свойство("ДанныеШаблона") Тогда
		СервисРассылкиНаименованиеШаблона = Результат.ДанныеШаблона.Наименование;
	КонецЕсли;
	Если Результат.Свойство("ДанныеАдреснойКниги") Тогда
		ЗаполнитьДанныеАдреснойКниги(Результат.ДанныеАдреснойКниги);
	КонецЕсли;
	
	ЗаполнитьСписокВыбораАдресныхКниг();
	ЗаполнитьСписокВыбораОтправителей();
	ЗаполнитьСтатистикуРассылки(ДанныеРассылки);
	
	СостояниеРассылки = СостояниеРассылкиСервиса();
	Элементы.СостояниеНеотправленнойРассылки.Заголовок = СостояниеРассылки;
	Элементы.СостояниеОтправленнойРассылки.Заголовок = СостояниеРассылки;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьПолучениеДанныхАдреснойКнигиСервиса(АдресРезультатаЗагрузки)
	
	ДанныеАдреснойКниги = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);
	ЗаполнитьДанныеАдреснойКниги(ДанныеАдреснойКниги);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбновлениеДанныхСервисаНаФорме()
	
	НачатьПервоначальноеПолучениеДанныхСервиса();
	НачатьОжиданиеПолученияДанныхСервиса();
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСАдреснымиКнигамиСервиса

&НаСервере
Процедура СоздатьНовуюАдреснуюКнигуСервиса()
	
	Если НЕ ЭтоСозданиеНовойАдреснойКнигиСервиса Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАдреснойКниги = МассовыеРассылкиИнтеграция.НовыйДанныеАдреснойКнигиСервиса();
	ДанныеАдреснойКниги.Наименование = Объект.СервисРассылкиИмяНовойАдреснойКниги;
	Для каждого ДанныеПолучателя Из Получатели Цикл
		ДанныеПолучателяКниги = ДанныеАдреснойКниги.Получатели.Добавить();
		ДанныеПолучателяКниги.Контакт = ДанныеПолучателя.Контакт;
		ДанныеПолучателяКниги.Email = ДанныеПолучателя.КакСвязаться;
	КонецЦикла;
	МассовыеРассылкиИнтеграция.СоздатьАдреснуюКнигуСервиса(ДанныеАдреснойКниги);
	
	Объект.СервисРассылкиИмяНовойАдреснойКниги = "";
	
	АдресныеКнигиСервиса.Загрузить(МассовыеРассылкиИнтеграция.ПолучитьАдресныеКнигиСервиса());
	ЗаполнитьСписокВыбораАдресныхКниг();
	Объект.СервисРассылкиИдентификаторАдреснойКниги = ДанныеАдреснойКниги.Идентификатор;
	
	ЭтоСозданиеНовойАдреснойКнигиСервиса = Ложь;
	
КонецПроцедуры

&НаСервере
Функция СсылкаНаТаблицуПолучателейДляЭкспортаВСервис()
	
	ВыбранныеПолучатели = Новый ТаблицаЗначений;
	ВыбранныеПолучатели.Колонки.Добавить("Контакт", Метаданные.ОпределяемыеТипы.КонтактСобытия.Тип);
	ВыбранныеПолучатели.Колонки.Добавить("КакСвязаться",Новый ОписаниеТипов("Строка"));
	
	Для каждого Получатель Из Получатели Цикл
		Если Получатель.Выбран Тогда
			НоваяСтрока = ВыбранныеПолучатели.Добавить();
			НоваяСтрока.Контакт = Получатель.Контакт;
			НоваяСтрока.КакСвязаться = Получатель.КакСвязаться;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ВыбранныеПолучатели, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ТаблицаПолучателейДляУдаления()
	
	ТаблицаПолучателейДляУдаления = МассовыеРассылкиИнтеграция.НовыйТаблицаПолучателей();
	Для каждого Получатель Из Получатели Цикл
		Если Получатель.Выбран Тогда
			НоваяСтрока = ТаблицаПолучателейДляУдаления.Добавить();
			НоваяСтрока.Контакт = Получатель.Контакт;
			НоваяСтрока.Email = Получатель.КакСвязаться;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПолучателейДляУдаления;
	
КонецФункции

&НаКлиенте
Процедура УдалитьВыбранныхПолучателейИзТекущейАдреснойКниги(Результат, ДополнительныеПараметры) Экспорт
	
	УдалитьВыбранныхПолучателейИзТекущейАдреснойКнигиСервер();
	ПоказатьОповещениеПользователя(
		НСтр("ru='Удаление'"),,
		СтрШаблон(
			НСтр("ru='Получатели удалены из адресной книги %1 ""%2"".'"),
			ПредставлениеСервиса,
			ПредставлениеТекущейАдреснойКниги()));
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВыбранныхПолучателейИзТекущейАдреснойКнигиСервер()
	
	МассовыеРассылкиИнтеграция.УдалитьИзАдреснойКнигиСервиса(Объект.СервисРассылкиИдентификаторАдреснойКниги, ТаблицаПолучателейДляУдаления());
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыбранныхПолучателейИзВсехАдресныхКниг(Результат, ДополнительныеПараметры) Экспорт
	
	УдалитьВыбранныхПолучателейИзВсехАдресныхКнигСервер();
	ПоказатьОповещениеПользователя(
		НСтр("ru='Удаление'"),,
		СтрШаблон(
			НСтр("ru='Получатели удалены из всех адресных книг %1.'"),
			ПредставлениеСервиса));
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВыбранныхПолучателейИзВсехАдресныхКнигСервер()
	
	МассовыеРассылкиИнтеграция.УдалитьИзВсехАдресныхКнигСервиса(ТаблицаПолучателейДляУдаления());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеАдреснойКниги(ДанныеАдреснойКниги)
	
	Получатели.Очистить();
	
	Для каждого ДанныеПолучателяСервиса Из ДанныеАдреснойКниги.Получатели Цикл
		НоваяСтрока = Получатели.Добавить();
		НоваяСтрока.Контакт = ДанныеПолучателяСервиса.Контакт;
		НоваяСтрока.КакСвязаться = ДанныеПолучателяСервиса.Email;
	КонецЦикла;
	
	ЗаполнитьСлужебныеПоляТаблицыПолучателиСервер();
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеТекущейАдреснойКниги()
	
	ЗначениеАдреснойКниги = Элементы.СервисРассылкиИдентификаторАдреснойКниги.СписокВыбора.НайтиПоЗначению(
		Объект.СервисРассылкиИдентификаторАдреснойКниги);
	
	Если ЗначениеАдреснойКниги <> Неопределено Тогда
		ПредставлениеАдреснойКниги = ЗначениеАдреснойКниги.Представление;
	Иначе
		ПредставлениеАдреснойКниги = "";
	КонецЕсли;
	
	Возврат ПредставлениеАдреснойКниги;
	
КонецФункции

#КонецОбласти

#Область РаботаСМассовымиРассылкамиСервиса

&НаСервере
Функция СловарьСостоянийРассылки()
	
	СловарьСостояний = Новый Структура;
	СловарьСостояний.Вставить("РассылкаНеСоздана", НСтр("ru='Рассылка еще не создана'"));
	СловарьСостояний.Вставить("РассылкаСозданаНеПереданаВСервис", НСтр("ru='Рассылка еще не отправлена'"));
	СловарьСостояний.Вставить("СостояниеНеПолучено", НСтр("ru='Загружаются данные, подождите...'"));
	
	СловарьСостоянийПреобразованный = Новый Структура;
	Для каждого КлючЗначение Из СловарьСостояний Цикл
		СловарьСостоянийПреобразованный.Вставить(КлючЗначение.Ключ, ЗаполнитьНазваниеСервисаВСтроке(КлючЗначение.Значение));
	КонецЦикла;
	
	Возврат СловарьСостоянийПреобразованный;
	
КонецФункции

&НаСервере
Функция СостояниеРассылкиСервиса()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат СловарьСостоянийРассылки().РассылкаНеСоздана;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СервисРассылкиИдентификатор) Тогда
		Возврат СловарьСостоянийРассылки().РассылкаСозданаНеПереданаВСервис;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СостояниеРассылки) Тогда
		Возврат СостояниеРассылки;
	КонецЕсли;
	
	Возврат СловарьСостоянийРассылки().СостояниеНеПолучено;
	
КонецФункции

&НаСервере
Процедура НачатьСозданиеРассылкиСервиса()
	
	ДлительнаяОперация = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка,, УникальныйИдентификатор);
	КонецЕсли;
	
	ЭтоЗаписьПередОтправкойРассылки = Истина;
	ДокументЗаписан = Ложь;
	Если ПроверитьЗаполнение() Тогда
		ДокументЗаписан = Записать();
	КонецЕсли;
	ЭтоЗаписьПередОтправкойРассылки = Ложь;
	
	Если Не ДокументЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПолучателейОбъектаИзДанныхФормы(Объект, Получатели);
	СоздатьНовуюАдреснуюКнигуСервиса();
	
	ДанныеРассылки = ДанныеРассылкиИзОбъекта();
	Если ДанныеРассылки.Свойство("ИдентификаторПисьмаОснования") Тогда
		МассовыеРассылкиИнтеграция.СоздатьПисьмоОснование(ДанныеРассылки);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Документы.МассоваяРассылка.СоздатьМассовуюРассылкуСервиса", ДанныеРассылки);
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМассовуюРассылкуПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	МассоваяРассылкаСозданаИОтправлена = СоздатьМассовуюРассылкуЗавершение(Результат.АдресРезультата);
	
	УправлениеФормой();
	
	Если НЕ МассоваяРассылкаСозданаИОтправлена Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		ОповеститьОЗаписиНового(Объект.Ссылка);
	КонецЕсли;
	ОповеститьОбИзменении(Объект.Ссылка);
	ОповеститьОбАктивизации(Объект.Ссылка);
	
	НачатьОбновлениеДанныхСервисаНаФорме();
	
КонецПроцедуры

&НаСервере
Функция СоздатьМассовуюРассылкуЗавершение(ДанныеРассылкиАдрес)
	
	ПоказатьСообщенияПользователюИзФоновогоЗадания();
	
	ДанныеРассылки = ПолучитьИзВременногоХранилища(ДанныеРассылкиАдрес);
	
	ЗаполнитьОбъектДаннымиРассылки(ДанныеРассылки);
	МассоваяРассылкаСозданаИОтправлена = Истина;
	
	Если ЗначениеЗаполнено(ДанныеРассылки.Идентификатор) Тогда
		Если ЗначениеЗаполнено(Объект.СервисРассылкиПланируемаяДатаОтправки) Тогда
			Объект.ДатаРассылки = Объект.СервисРассылкиПланируемаяДатаОтправки;
		Иначе
			Объект.ДатаРассылки = ТекущаяДатаСеанса();
		КонецЕсли;
		Объект.Состояние = Перечисления.СостоянияОтправкиРассылки.Отправлено;
		ЭтоЗаписьПослеОтправкиРассылки = Истина;
	КонецЕсли;
	
	Записать();
	ЭтоЗаписьПослеОтправкиРассылки = Ложь;
	
	Возврат МассоваяРассылкаСозданаИОтправлена;
	
КонецФункции

&НаСервере
Функция ДанныеРассылкиИзОбъекта()
	
	Возврат РеквизитФормыВЗначение("Объект").ДанныеРассылкиСервиса();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОбъектДаннымиРассылки(ДанныеРассылки, ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	ТекущийОбъект.ЗаполнитьДаннымиРассылкиСервиса(ДанныеРассылки);
	ЗначениеВДанныеФормы(ТекущийОбъект, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПолучателями

&НаКлиенте
Процедура ПодборКонтактовЗавершение(АдресВХранилище, ДополнительныеПараметры) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		
		ЗаблокироватьДанныеФормыДляРедактирования();
		Модифицированность = Истина;
		ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактВыборЗавершение(АдресВХранилище, ДополнительныеПараметры) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		
		ЗаблокироватьДанныеФормыДляРедактирования();
		Модифицированность = Истина;
		ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораКонтактов(Знач СтрокаПоиска)
	
	ДанныеВыбораКонтактов = Новый СписокЗначений;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	
	ДанныеВыбораКонтрагентов = Справочники.Контрагенты.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтрагентов Цикл
		ДанныеВыбораКонтактов.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(ЭлементСписка.Представление, " ", НСтр("ru='(контрагент)'")));
	КонецЦикла;
	
	ДанныеВыбораКонтактныхЛиц = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтактныхЛиц Цикл
		ДанныеВыбораКонтактов.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(ЭлементСписка.Представление, " ", НСтр("ru='(контактное лицо)'")));
	КонецЦикла;
	
	Возврат ДанныеВыбораКонтактов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище)
	
	ТаблицаАдресатов = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ОбработатьТекущуюСтроку = Элементы.Получатели.ТекущаяСтрока <> Неопределено;
	
	Для Каждого ПодобраннаяСтрока Из ТаблицаАдресатов Цикл
		СтрокаПолучатели = Неопределено;
		
		Если ОбработатьТекущуюСтроку Тогда
			ОбработатьТекущуюСтроку = Ложь;
			СтрокаПолучатели = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		КонецЕсли;
		
		Если СтрокаПолучатели <> Неопределено
			И ЗначениеЗаполнено(СтрокаПолучатели.Контакт)
			И ЗначениеЗаполнено(СтрокаПолучатели.КакСвязаться) Тогда
			СтрокаПолучатели = Неопределено;
		КонецЕсли;
		
		Если СтрокаПолучатели = Неопределено Тогда
			СтрокаПолучатели = Получатели.Добавить();
		КонецЕсли;
		
		СтрокаПолучатели.Контакт = ПодобраннаяСтрока.Контакт;
		СтрокаПолучатели.КакСвязаться = ПодобраннаяСтрока.КакСвязаться;
	КонецЦикла;
	
	ЗаполнитьСлужебныеПоляТаблицыПолучателиСервер();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСВложениями

&НаКлиенте
Процедура ДобавлениеФайлаКВложениям()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВоВложенияПослеПомещенияФайлов", ЭтотОбъект);
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(ОписаниеОповещения, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВоВложенияПослеПомещенияФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Или ПомещенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьФайлыВСписок(ПомещенныеФайлы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскиваниеЗавершение(Результат, АдресВременногоХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Файлы = Новый Массив;
	ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.Имя, АдресВременногоХранилища);
	Файлы.Добавить(ПередаваемыйФайл);
	ДобавитьФайлыВСписок(Файлы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлыВСписок(ПомещенныеФайлы)
	
	Для Каждого ОписаниеФайла Из ПомещенныеФайлы Цикл
		
		Файл = Новый Файл(ОписаниеФайла.Имя);
		ПозицияТочки = Найти(Файл.Расширение, ".");
		РасширениеБезТочки = Сред(Файл.Расширение, ПозицияТочки + 1);
		
		Вложение = Вложения.Добавить();
		Вложение.Представление = Файл.Имя;
		Вложение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение), УникальныйИдентификатор);
		Вложение.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение()
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеВложение = Вложения.НайтиПоИдентификатору(Элементы.Вложения.ТекущаяСтрока);
	
	#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		ПолучитьФайл(ВыбранноеВложение.АдресВоВременномХранилище, ВыбранноеВложение.Представление, Истина);
	#Иначе
		ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ИмяВременнойПапки);
		
		ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ВыбранноеВложение.Представление;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВыбранноеВложение.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		Файл = Новый Файл(ИмяВременногоФайла);
		Файл.УстановитьТолькоЧтение(Истина);
		Если Файл.Расширение = ".mxl" Тогда
			ТабличныйДокумент = ПолучитьТабличныйДокументПоДвоичнымДанным(ВыбранноеВложение.АдресВоВременномХранилище);
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ИмяДокумента", ВыбранноеВложение.Представление);
			ПараметрыОткрытия.Вставить("ТабличныйДокумент", ТабличныйДокумент);
			ПараметрыОткрытия.Вставить("ПутьКФайлу", ИмяВременногоФайла);
			ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента", ПараметрыОткрытия, ЭтотОбъект);
		Иначе
			ФайловаяСистемаКлиент.ОткрытьФайл(ИмяВременногоФайла);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументПоДвоичнымДанным(Знач ДвоичныеДанные)
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("Строка") Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДвоичныеДанные);
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
	ДвоичныеДанные.Записать(ИмяФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяФайла);
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение табличного документа'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Процедура СохранитьВложения(МассоваяРассылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Вложения.Ссылка КАК Ссылка,
		|	Вложения.АдресВоВременномХранилище,
		|	Вложения.Представление
		|ПОМЕСТИТЬ втВложения
		|ИЗ
		|	&Вложения КАК Вложения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МассоваяРассылкаПрисоединенныеФайлы.Ссылка
		|ПОМЕСТИТЬ втПрисоединенныеФайлы
		|ИЗ
		|	Справочник.МассоваяРассылкаПрисоединенныеФайлы КАК МассоваяРассылкаПрисоединенныеФайлы
		|ГДЕ
		|	МассоваяРассылкаПрисоединенныеФайлы.ВладелецФайла = &МассоваяРассылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВложения.Ссылка КАК ВложениеСсылка,
		|	втПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайлСсылка,
		|	втВложения.АдресВоВременномХранилище,
		|	втВложения.Представление
		|ИЗ
		|	втВложения КАК втВложения
		|		ПОЛНОЕ СОЕДИНЕНИЕ втПрисоединенныеФайлы КАК втПрисоединенныеФайлы
		|		ПО втВложения.Ссылка = втПрисоединенныеФайлы.Ссылка";
	
	Запрос.УстановитьПараметр("Вложения", Вложения.Выгрузить());
	Запрос.УстановитьПараметр("МассоваяРассылка", МассоваяРассылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПрисоединенныйФайлСсылка = NULL Тогда
			// Добавить вложение в присоединенные файлы
			Если Не ПустаяСтрока(Выборка.АдресВоВременномХранилище) Тогда
				
				ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.Представление, ".", Ложь);
				Если ЧастиИмениФайла.Количество() > 1 Тогда
					РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
					ИмяБезРасширения = Лев(Выборка.Представление, СтрДлина(Выборка.Представление) - (СтрДлина(РасширениеБезТочки)+1));
				Иначе
					РасширениеБезТочки = "";
					ИмяБезРасширения = Выборка.Представление;
				КонецЕсли;
				
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
				ПараметрыФайла.Вставить("ВладелецФайлов", МассоваяРассылка);
				ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
				ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяУниверсальнаяДата());
				
				Вложения.НайтиСтроки(Новый Структура("Представление, АдресВоВременномХранилище", Выборка.Представление, Выборка.АдресВоВременномХранилище))[0].Ссылка =
					РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Выборка.АдресВоВременномХранилище);
			КонецЕсли;
		ИначеЕсли Выборка.ВложениеСсылка = NULL Тогда
			// Удалить вложение из присоединенных файлов
			ПрисоединенныйФайлОбъект = Выборка.ПрисоединенныйФайлСсылка.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.УстановитьПометкуУдаления(Истина);
		Иначе
			// Обновить вложение в присоединенных файлах
			РаботаСФайлами.ОбновитьФайл(Выборка.ПрисоединенныйФайлСсылка, 
				Новый Структура("АдресФайлаВоВременномХранилище, АдресВременногоХранилищаТекста", Выборка.АдресВоВременномХранилище, ""));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВложения(Знач ТекущийОбъект)
	
	Вложения.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МассоваяРассылкаПрисоединенныеФайлы.Ссылка,
	|	МассоваяРассылкаПрисоединенныеФайлы.Наименование,
	|	МассоваяРассылкаПрисоединенныеФайлы.Расширение,
	|	МассоваяРассылкаПрисоединенныеФайлы.ИндексКартинки
	|ИЗ
	|	Справочник.МассоваяРассылкаПрисоединенныеФайлы КАК МассоваяРассылкаПрисоединенныеФайлы
	|ГДЕ
	|	МассоваяРассылкаПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И МассоваяРассылкаПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("ВладелецФайла", ТекущийОбъект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Вложения.Добавить();
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		НоваяСтрока.Представление = Выборка.Наименование + ?(ПустаяСтрока(Выборка.Расширение), "", "." + Выборка.Расширение);
		НоваяСтрока.ИндексКартинки = Выборка.ИндексКартинки;
		НоваяСтрока.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Ссылка), УникальныйИдентификатор);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ПолучателиДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Получатели.Добавить(), СтрокаТаблицы);
		
		ПолучателиДобавлены = Истина;
		
	КонецЦикла;
	
	Если ПолучателиДобавлены Тогда
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ЗаполнитьСлужебныеПоляТаблицыПолучателиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "МассоваяРассылка.Получатели");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка получателей из файла'"));
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ОбработатьПодготовленныеДанные(РезультатЗагрузки);
			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(РезультатЗагрузки)
	
	НачатьТранзакцию();
	Попытка
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				ЗаполнитьЗначенияСвойств(Получатели.Добавить(), СтрокаТаблицы);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		
	КонецПопытки;
	
	ЗаполнитьСлужебныеПоляТаблицыПолучателиСервер();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДиаграммами

&НаСервере
Процедура ДобавитьСериюДиаграммы(Диаграмма, ЗначениеСерии, ЗначениеПоказателя, ПроцентЗначенияПоказателя, Текст, Цвет)
	
	Если Не ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
		Возврат;
	КонецЕсли;
	
	Текст = Текст + " " + ПроцентЗначенияПоказателя + "%";
	
	НоваяСерия = Диаграмма.УстановитьСерию(ЗначениеСерии);
	НоваяСерия.Текст = Текст;
	НоваяСерия.Цвет = Цвет;
	Диаграмма.УстановитьЗначение(Диаграмма.Точки[0], НоваяСерия, ЗначениеПоказателя,, Текст);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДиаграммы()
	
	ЦветСиний    = Новый Цвет(38, 129, 187);
	ЦветКрасный1 = Новый Цвет(242, 89, 75);
	ЦветКрасный2 = Новый Цвет(240, 44, 26);
	ЦветСерый    = Новый Цвет(192, 192, 192);
	ЦветЗеленый1 = Новый Цвет(55, 173, 97);
	ЦветЗеленый2 = Новый Цвет(43, 135, 75);
	ЦветЖелтый   = Новый Цвет(255, 165, 0);
	
	ПоказателиДоставки.ОбластьЗаголовка.Текст = СтрШаблон(НСтр("ru='%1%2Всего'"), ПисемВсего, Символы.ПС);
	ПоказателиДоставки.Точки.Очистить();
	ПоказателиДоставки.Серии.Очистить();
	ПоказателиДоставки.Точки.Добавить();
	
	ТекстСерии = СтрШаблон(НСтр("ru='%1 Доставлено'"), ПисемДоставлено);
	ДобавитьСериюДиаграммы(ПоказателиДоставки, "ПисемДоставлено", ПисемДоставлено, ПроцентОт(ПисемДоставлено, ПисемВсего), ТекстСерии, ЦветСерый);
	
	ТекстСерии = СтрШаблон(НСтр("ru='%1 Не отправлено'"), ПисемНеОтправлено);
	ДобавитьСериюДиаграммы(ПоказателиДоставки, "ПисемНеОтправлено", ПисемНеОтправлено, ПроцентОт(ПисемНеОтправлено, ПисемВсего), ТекстСерии, ЦветСиний);
	
	ТекстСерии = СтрокаСЧислом(НСтр("ru=';%1 Ошибка;;%1 Ошибки;%1 Ошибок;'"), ПисемОшибочных, ВидЧисловогоЗначения.Количественное);
	ДобавитьСериюДиаграммы(ПоказателиДоставки, "ПисемОшибочных", ПисемОшибочных, ПроцентОт(ПисемОшибочных, ПисемВсего), ТекстСерии, ЦветКрасный1);
	
	ТекстСерии = СтрШаблон(НСтр("ru='%1 Исключено'"), ПисемНеВключеноВРассылку);
	ДобавитьСериюДиаграммы(ПоказателиДоставки, "ПисемНеВключеноВРассылку", ПисемНеВключеноВРассылку, ПроцентОт(ПисемНеВключеноВРассылку, ПисемВсего), ТекстСерии, ЦветКрасный2);
	
	
	ПоказателиПрочтения.ОбластьЗаголовка.Текст = СтрШаблон(НСтр("ru='%1%2Доставлено'"), ПисемДоставлено, Символы.ПС);
	ПоказателиПрочтения.Точки.Очистить();
	ПоказателиПрочтения.Серии.Очистить();
	ПоказателиПрочтения.Точки.Добавить();
	
	ТекстСерии = СтрШаблон(НСтр("ru='%1 Не прочитано'"), ПисемНеПрочитано);
	ДобавитьСериюДиаграммы(ПоказателиПрочтения, "ПисемНеПрочитано", ПисемНеПрочитано, ПроцентОт(ПисемНеПрочитано, ПисемДоставлено), ТекстСерии, ЦветЖелтый);
	
	ТекстСерии = СтрокаСЧислом(НСтр("ru=';%1 Прочтение;;%1 Прочтения;%1 Прочтений;'"), ПисемПрочитано, ВидЧисловогоЗначения.Количественное);
	ДобавитьСериюДиаграммы(ПоказателиПрочтения, "ПисемПрочитано", ПисемПрочитано, ПроцентОт(ПисемПрочитано, ПисемДоставлено), ТекстСерии, ЦветЗеленый1);
	
	ТекстСерии = СтрокаСЧислом(НСтр("ru=';%1 Прочтение и переход;;%1 Прочтения и перехода;%1 Прочтений и переходов;'"), ПисемПереходовПоСсылке, ВидЧисловогоЗначения.Количественное);
	ДобавитьСериюДиаграммы(ПоказателиПрочтения, "ПисемПереходовПоСсылке", ПисемПереходовПоСсылке, ПроцентОт(ПисемПереходовПоСсылке, ПисемДоставлено), ТекстСерии, ЦветЗеленый2);
	
	ТекстСерии = СтрокаСЧислом(НСтр("ru=';%1 Прочтение и отписка;;%1 Прочтения и отписки;%1 Прочтений и отписок;'"), ПисемОтписокПослеПрочтения, ВидЧисловогоЗначения.Количественное);
	ДобавитьСериюДиаграммы(ПоказателиПрочтения, "ПисемОтписокПослеПрочтения", ПисемОтписокПослеПрочтения, ПроцентОт(ПисемОтписокПослеПрочтения, ПисемДоставлено), ТекстСерии, ЦветКрасный1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЗначенияДиаграммы(ЗначениеДиаграммы)
	
	Если ТипЗнч(ЗначениеДиаграммы) = Тип("СерияДиаграммы") Тогда
		Серия = ЗначениеДиаграммы;
	ИначеЕсли ТипЗнч(ЗначениеДиаграммы) = Тип("ЗначениеДиаграммы") Тогда
		Серия = ЗначениеДиаграммы.Серия;
	Иначе
		Серия = Неопределено;
	КонецЕсли;
	
	Если Серия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Серия.Раздвигать Тогда
		ФильтрСтатусДоставки = Неопределено;
	Иначе
		ФильтрСтатусДоставки = НайтиФильтрПоСерии(Серия.Значение);
	КонецЕсли;
	
	ОтобратьПолучателейПоСтатусуДоставки();
	ВыделитьСериюПоФильтру();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвязьФильтровИСерийДиаграмм()
	
	НоваяСвязь = СвязьФильтровИСерийДиаграмм.Добавить();
	НоваяСвязь.Серия  = "ПисемНеОтправлено";
	НоваяСвязь.Фильтр = "СообщениеНеОтправлено";
	
	НоваяСвязь = СвязьФильтровИСерийДиаграмм.Добавить();
	НоваяСвязь.Серия  = "ПисемОшибочных";
	НоваяСвязь.Фильтр = "СообщениеОшибочное";
	
	НоваяСвязь = СвязьФильтровИСерийДиаграмм.Добавить();
	НоваяСвязь.Серия  = "ПисемДоставлено";
	НоваяСвязь.Фильтр = "СообщениеДоставлено";
	
	НоваяСвязь = СвязьФильтровИСерийДиаграмм.Добавить();
	НоваяСвязь.Серия  = "ПисемНеПрочитано";
	НоваяСвязь.Фильтр = "СообщениеНеПрочитано";
	
	НоваяСвязь = СвязьФильтровИСерийДиаграмм.Добавить();
	НоваяСвязь.Серия  = "ПисемПрочитано";
	НоваяСвязь.Фильтр = "СообщениеПрочитано";
	
	НоваяСвязь = СвязьФильтровИСерийДиаграмм.Добавить();
	НоваяСвязь.Серия  = "ПисемПереходовПоСсылке";
	НоваяСвязь.Фильтр = "СообщениеПрочитаноПереход";
	
	НоваяСвязь = СвязьФильтровИСерийДиаграмм.Добавить();
	НоваяСвязь.Серия  = "ПисемОтписокПослеПрочтения";
	НоваяСвязь.Фильтр = "СообщениеОтпискаПослеПрочтения";
	
	НоваяСвязь = СвязьФильтровИСерийДиаграмм.Добавить();
	НоваяСвязь.Серия  = "ПисемНеВключеноВРассылку";
	НоваяСвязь.Фильтр = "СообщениеНеВключеноВРассылку";
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСерииПоФильтру(Фильтр)
	
	НайденныеСерии = Новый Массив;
	Связи = СвязьФильтровИСерийДиаграмм.НайтиСтроки(Новый Структура("Фильтр", Фильтр));
	
	Если Связи.Количество() = 0 Тогда
		Возврат НайденныеСерии;
	КонецЕсли;
	
	Для каждого Связь Из Связи Цикл
		НайденныеСерии.Добавить(Связь.Серия);
	КонецЦикла;
	
	Возврат НайденныеСерии;
	
КонецФункции

&НаКлиенте
Функция НайтиФильтрПоСерии(Серия)
	
	Связи = СвязьФильтровИСерийДиаграмм.НайтиСтроки(Новый Структура("Серия", Серия));
	
	Если Связи.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Связи[0].Фильтр;
	
КонецФункции

&НаКлиенте
Процедура ВыделитьСериюПоФильтру()
	
	СнятьВыделениеСерийДиаграмм();
	ВыделяемыеСерии = НайтиСерииПоФильтру(ФильтрСтатусДоставки);
	
	Для каждого Серия Из ПоказателиДоставки.Серии Цикл
		Если ВыделяемыеСерии.Найти(Серия.Значение) <> Неопределено Тогда
			Серия.Раздвигать = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Серия Из ПоказателиПрочтения.Серии Цикл
		Если ВыделяемыеСерии.Найти(Серия.Значение) <> Неопределено Тогда
			Серия.Раздвигать = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделениеСерийДиаграмм()
	
	Для каждого Серия Из ПоказателиДоставки.Серии Цикл
		Серия.Раздвигать = Ложь;
	КонецЦикла;
	
	Для каждого Серия Из ПоказателиПрочтения.Серии Цикл
		Серия.Раздвигать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйОтборПоФильтруСтатусаДоставки(Форма, Фильтр = Неопределено)
	
	Если Фильтр = Неопределено Тогда
		Фильтр = Форма.ФильтрСтатусДоставки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Фильтр) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура(Фильтр, Истина);
	
КонецФункции

&НаКлиенте
Процедура ОтобратьПолучателейПоСтатусуДоставки()
	
	ОтборПоФильтру = НовыйОтборПоФильтруСтатусаДоставки(ЭтотОбъект);
	Если ТипЗнч(ОтборПоФильтру) = Тип("Структура") Тогда
		ОтборПоФильтру = Новый ФиксированнаяСтруктура(ОтборПоФильтру);
	КонецЕсли;
	
	Элементы.Получатели.ОтборСтрок = ОтборПоФильтру;
	ПосчитатьКоличествоПолучателей();
	
КонецПроцедуры

&НаСервере
Функция ЕстьРезультатФильтра(Фильтр)
	
	Строки = Получатели.НайтиСтроки(НовыйОтборПоФильтруСтатусаДоставки(ЭтотОбъект, Фильтр));
	Возврат Строки.Количество() <> 0;
	
КонецФункции

&НаСервере
Процедура ДополнитьСтрокуСостоянияДоставкиСообщения(Строка)
	
	Строка.СообщениеДоставлено = Ложь;
	Строка.СообщениеОшибочное = Ложь;
	Строка.СообщениеНеПрочитано = Ложь;
	Строка.СообщениеПрочитано = Ложь;
	Строка.СообщениеПрочитаноПереход = Ложь;
	
	Код = Строка.СтатусДоставкиКодСостояния;
	
	Если Код = "Ошибка" Тогда
		Строка.СообщениеОшибочное = Истина;
	ИначеЕсли Код = "НеОтправлено" Тогда
		Строка.СообщениеНеОтправлено = Истина;
	ИначеЕсли Код = "Доставлено" Или Код = "ДоставленоНеПрочитано" Тогда
		Строка.СообщениеНеПрочитано = Истина;
		Строка.СообщениеДоставлено = Истина;
	ИначеЕсли Код = "ДоставленоПрочитано" Тогда
		Строка.СообщениеПрочитано = Истина;
		Строка.СообщениеДоставлено = Истина;
	ИначеЕсли Код = "ДоставленоПереходПоСсылке" Тогда
		Строка.СообщениеПрочитаноПереход = Истина;
		Строка.СообщениеДоставлено = Истина;
	ИначеЕсли Код = "ДоставленоПрочитаноОтписался" Тогда
		Строка.СообщениеОтпискаПослеПрочтения = Истина;
		Строка.СообщениеДоставлено = Истина;
	ИначеЕсли Код = "ИсключениеИзРассылки" Тогда
		Строка.СообщениеНеВключеноВРассылку = Истина;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПлановоеВремяОтправки

&НаСервере
Процедура СформироватьЗаголовокКомандыОтправить()
	
	Если НЕ ЗапланироватьРассылку Тогда
		Элементы.СоздатьРассылкуСервиса.Заголовок = НСтр("ru='Отправить сейчас'");
		Возврат;
	КонецЕсли;
	
	Если НачалоСегодняшнегоДня() = НачалоДня(Объект.СервисРассылкиПланируемаяДатаОтправки) Тогда
		Элементы.СоздатьРассылкуСервиса.Заголовок = СтрШаблон(
			НСтр("ru='Отправить сегодня в %1'"),
			Формат(Объект.СервисРассылкиПланируемаяДатаОтправки, "ДЛФ='В'"));
		Возврат;
	КонецЕсли;
	
	Элементы.СоздатьРассылкуСервиса.Заголовок = СтрШаблон(
		НСтр("ru='Отправить %1'"), 
		Формат(Объект.СервисРассылкиПланируемаяДатаОтправки, "ДЛФ='дд ММММ ЧЧ:мм'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВремяОтправкиНаФорме()
	
	ЗапланироватьРассылку = ЗначениеЗаполнено(Объект.СервисРассылкиПланируемаяДатаОтправки);
	
	Если ЗначениеЗаполнено(Объект.СервисРассылкиПланируемаяДатаОтправки) Тогда
		ПлановаяДатаОтправки = Объект.СервисРассылкиПланируемаяДатаОтправки;
		ПлановоеВремяОтправки = Объект.СервисРассылкиПланируемаяДатаОтправки;
	Иначе
		ЗаполнитьНовоеВремяОтправкиНаФорме();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВремяОтправкиВОбъекте()
	
	Если ЗапланироватьРассылку Тогда
		Объект.СервисРассылкиПланируемаяДатаОтправки = ПлановаяДатаОтправки + (ПлановоеВремяОтправки - Дата(1,1,1));
	Иначе
		Объект.СервисРассылкиПланируемаяДатаОтправки = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНовоеВремяОтправкиНаФорме()
	
	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	
	Если НЕ ЗначениеЗаполнено(ПлановаяДатаОтправки) Тогда
		ПлановаяДатаОтправки = НачалоДня;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПлановоеВремяОтправки) Тогда
		
		ТекущееВремя = ТекущаяДатаСеанса();
		НачалоЧаса = НачалоЧаса(ТекущееВремя);
		ПоловинаЧаса = 1800;
		Час = 3600;
		ДваЧаса = 3600 * 2;
		
		СейчасПерваяПоловинаЧаса = НачалоЧаса >= (ТекущееВремя - ПоловинаЧаса);
		
		Если СейчасПерваяПоловинаЧаса Тогда
			ПлановоеВремяОтправки = НачалоЧаса + Час;
		Иначе
			ПлановоеВремяОтправки = НачалоЧаса + ДваЧаса;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачалоСегодняшнегоДня()
	
	Возврат НачалоДня(ТекущаяДатаСеанса());
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеПлановойДатыРассылки()
	
	ЗаполнитьВремяОтправкиВОбъекте();
	ПроверитьПлановуюДату();
	СформироватьЗаголовокКомандыОтправить();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПлановуюДату()
	
	Если НЕ ЗапланироватьРассылку Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Если Объект.СервисРассылкиПланируемаяДатаОтправки > ТекущаяДатаСеанса Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СервисРассылкиПланируемаяДатаОтправки = ТекущаяДатаСеанса;
	ЗаполнитьВремяОтправкиНаФорме();
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеФормы

&НаКлиентеНаСервереБезКонтекста
Функция ЗагружаемыеДанные()
	
	ЗагружаемыеДанные = Новый Структура;
	ЗагружаемыеДанные.Вставить("ЗагрузкаОтправителя", Ложь);
	ЗагружаемыеДанные.Вставить("ЗагрузкаАдресныхКниг", Ложь);
	ЗагружаемыеДанные.Вставить("ЗагрузкаПолучателей", Ложь);
	ЗагружаемыеДанные.Вставить("ЗагрузкаСтатистики", Ложь);
	ЗагружаемыеДанные.Вставить("ЗагрузкаСтатусовДоставки", Ложь);
	Возврат ЗагружаемыеДанные;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	Элементы.ПолучателиКонтакт.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(100));
	Элементы.Тема.ОграничениеТипа              = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(100));
	
	Элементы.СервисРассылкиПланируемаяДатаОтправки.Видимость = ЗначениеЗаполнено(Объект.СервисРассылкиПланируемаяДатаОтправки);
	
	НастройкиИнтерфейса = МассовыеРассылкиИнтеграция.НастройкиИнтерфейса();
	Элементы.ОткрытьПисьмоОснованиеРассылкиСервиса.Видимость = НастройкиИнтерфейса.ИспользоватьПисьмоОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	РассылкаПереданаВСервис = ЗначениеЗаполнено(Объект.СервисРассылкиИдентификатор);
	
	Элементы.ШапкаСозданиеРассылки.Видимость = НЕ РассылкаПереданаВСервис;
	Элементы.ШапкаПросмотрРассылки.Видимость = РассылкаПереданаВСервис;
	Элементы.СервисРассылкиИдентификаторАдреснойКниги.ТолькоПросмотр = РассылкаПереданаВСервис;
	Элементы.ПолучателиГруппаСтатусДоставки.Видимость = РассылкаПереданаВСервис;
	Элементы.ФильтрСтатусДоставки.Видимость = РассылкаПереданаВСервис И Не ВыполняетсяЗагрузкаДанныхСервиса;
	Элементы.КоманднаяПанельРедактированиеАдресныхКниг.Видимость = РассылкаПереданаВСервис;
	Элементы.ПолучателиВыбран.Видимость = РассылкаПереданаВСервис;
	Элементы.ПолучателиНомерСтроки.Видимость = Не РассылкаПереданаВСервис;
	Элементы.ОткрытьВебВерсиюПисьма.Видимость = ЗначениеЗаполнено(СсылкаВебВерсияПисьма);
	
	Элементы.ГруппаАдреснаяКнигаСервиса.Видимость = НЕ ЭтоСозданиеНовойАдреснойКнигиСервиса;
	Элементы.ГруппаПодсказкаСопоставлениеКонтактов.Видимость = НЕ ЭтоСозданиеНовойАдреснойКнигиСервиса
		И ЗначениеЗаполнено(Объект.СервисРассылкиИдентификаторАдреснойКниги)
		И Не ВыполняетсяЗагрузкаДанныхСервиса
		И Не РассылкаПереданаВСервис;
	Элементы.ГруппаНоваяАдреснаяКнигаСервиса.Видимость = ЭтоСозданиеНовойАдреснойКнигиСервиса;
	
	Если ЭтоСозданиеНовойАдреснойКнигиСервиса Тогда
		Элементы.Получатели.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Авто;
	Иначе
		Элементы.Получатели.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	КонецЕсли;
	Элементы.Получатели.ИзменятьСоставСтрок                   = ЭтоСозданиеНовойАдреснойКнигиСервиса;
	Элементы.ПолучателиНомерСтроки.ТолькоПросмотр             = Не ЭтоСозданиеНовойАдреснойКнигиСервиса;
	Элементы.ПолучателиКонтакт.ТолькоПросмотр                 = Не ЭтоСозданиеНовойАдреснойКнигиСервиса;
	Элементы.ПолучателиКакСвязаться.ТолькоПросмотр            = Не ЭтоСозданиеНовойАдреснойКнигиСервиса;
	Элементы.ПолучателиСтатусДоставкиИндикатор.ТолькоПросмотр = Не ЭтоСозданиеНовойАдреснойКнигиСервиса;
	Элементы.ПолучателиСтатусДоставки.ТолькоПросмотр          = Не ЭтоСозданиеНовойАдреснойКнигиСервиса;
	Элементы.ПолучателиКонтакт.ГиперссылкаЯчейки              = Не ЭтоСозданиеНовойАдреснойКнигиСервиса;
	
	Элементы.ИсточникПривлеченияПросмотр.Видимость = ЗначениеЗаполнено(Объект.ИсточникПривлечения);
	Элементы.ПоказателиПрочтения.Видимость = ЗначениеЗаполнено(ПисемДоставлено);
	
	ЕстьВыделенныеПолучатели = ЕстьВыделенныеПолучатели();
	Элементы.ДобавитьВыбранныхПолучателейВАдреснуюКнигу.Доступность = ЕстьВыделенныеПолучатели;
	Элементы.УдалитьВыбранныхПолучателейИзАдреснойКниги.Доступность = ЕстьВыделенныеПолучатели;
	
	Элементы.ФормаСоздаватьПодчиненныеСобытия.Пометка = Объект.СоздаватьСобытия;
	Элементы.ФормаСоздаватьПодчиненныеСобытия.Видимость = Не РассылкаПереданаВСервис;
	
	Элементы.ПолучателиВыбран.Доступность = Не ВыполняетсяЗагрузкаДанныхСервиса;
	Элементы.КоманднаяПанельРедактированиеАдресныхКниг.Доступность = Не ВыполняетсяЗагрузкаДанныхСервиса;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Получатели.КонтактНеСопоставлен", Истина);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ПолучателиКонтакт.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Контакт не сопоставлен>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормойДлительнаяОперация(Форма, ЗагружаемыеДанные)
	
	ЗагружаемыеДанныеФормы = Новый Массив;
	
	Если ЗагружаемыеДанные.ЗагрузкаОтправителя Или Не Форма.ВыполняетсяЗагрузкаДанныхСервиса Тогда
		СвязьЭлементов = Новый Структура("Элементы,Индикатор", Новый Массив, Неопределено);
		СвязьЭлементов.Элементы.Добавить(Форма.Элементы.СервисРассылкиАдресОтправителя);
		СвязьЭлементов.Индикатор = Форма.Элементы.ДлительнаяОперацияАдресОтправителя;
		ЗагружаемыеДанныеФормы.Добавить(СвязьЭлементов);
		
		СвязьЭлементов = Новый Структура("Элементы,Индикатор", Новый Массив, Неопределено);
		СвязьЭлементов.Элементы.Добавить(Форма.Элементы.СервисРассылкиАдресОтправителяПросмотр);
		СвязьЭлементов.Индикатор = Форма.Элементы.ДлительнаяОперацияАдресОтправителяПросмотр;
		ЗагружаемыеДанныеФормы.Добавить(СвязьЭлементов);
	КонецЕсли;
	
	Если ЗагружаемыеДанные.ЗагрузкаСтатистики Или Не Форма.ВыполняетсяЗагрузкаДанныхСервиса Тогда
		СвязьЭлементов = Новый Структура("Элементы,Индикатор", Новый Массив, Неопределено);
		СвязьЭлементов.Элементы.Добавить(Форма.Элементы.ОткрытьВебВерсиюПисьма);
		СвязьЭлементов.Элементы.Добавить(Форма.Элементы.ОткрытьПисьмоОснованиеРассылкиСервиса);
		СвязьЭлементов.Элементы.Добавить(Форма.Элементы.ОткрытьРассылкуСервиса);
		СвязьЭлементов.Индикатор = Форма.Элементы.ДлительнаяОперацияСостояниеРассылки;
		ЗагружаемыеДанныеФормы.Добавить(СвязьЭлементов);
	КонецЕсли;
	
	Если ЗагружаемыеДанные.ЗагрузкаАдресныхКниг Или Не Форма.ВыполняетсяЗагрузкаДанныхСервиса Тогда
		СвязьЭлементов = Новый Структура("Элементы,Индикатор", Новый Массив, Неопределено);
		СвязьЭлементов.Элементы.Добавить(Форма.Элементы.СервисРассылкиИдентификаторАдреснойКниги);
		СвязьЭлементов.Индикатор = Форма.Элементы.ДлительнаяОперацияИдентификаторАдреснойКниги;
		ЗагружаемыеДанныеФормы.Добавить(СвязьЭлементов);
	КонецЕсли;
	
	Если ЗагружаемыеДанные.ЗагрузкаПолучателей Или Не Форма.ВыполняетсяЗагрузкаДанныхСервиса Тогда
		СвязьЭлементов = Новый Структура("Элементы,Индикатор", Новый Массив, Неопределено);
		СвязьЭлементов.Элементы.Добавить(Форма.Элементы.Получатели);
		СвязьЭлементов.Индикатор = Форма.Элементы.ГруппаПодсказкаЗагружаетсяСписокКонтактов;
		ЗагружаемыеДанныеФормы.Добавить(СвязьЭлементов);
	КонецЕсли;
	
	Если ЗагружаемыеДанные.ЗагрузкаСтатусовДоставки Или Не Форма.ВыполняетсяЗагрузкаДанныхСервиса Тогда
		СвязьЭлементов = Новый Структура("Элементы,Индикатор", Новый Массив, Неопределено);
		СвязьЭлементов.Индикатор = Форма.Элементы.ГруппаПодсказкаЗагружаютсяСостоянияДоставки;
		ЗагружаемыеДанныеФормы.Добавить(СвязьЭлементов);
	КонецЕсли;
	
	Для каждого СвязьЭлементов Из ЗагружаемыеДанныеФормы Цикл
		Для каждого Элемент Из СвязьЭлементов.Элементы Цикл
			Элемент.Доступность = НЕ Форма.ВыполняетсяЗагрузкаДанныхСервиса;
		КонецЦикла;
		Если СвязьЭлементов.Индикатор <> Неопределено Тогда
			СвязьЭлементов.Индикатор.Видимость = Форма.ВыполняетсяЗагрузкаДанныхСервиса;
		КонецЕсли;
	КонецЦикла;
	
	Форма.Элементы.ГруппаПодсказкаЗагружаютсяСтатистикаРассылки.Видимость = ЗагружаемыеДанные.ЗагрузкаСтатистики Или Форма.ВыполняетсяЗагрузкаДанныхСервиса;
	Форма.Элементы.ГруппаПоказателиРассылки.Видимость = Не (ЗагружаемыеДанные.ЗагрузкаСтатистики Или Форма.ВыполняетсяЗагрузкаДанныхСервиса);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПоказатьСообщенияПользователюИзФоновогоЗадания()
	
	СообщенияПользователю = ДлительныеОперации.СообщенияПользователю(Истина, ИдентификаторЗадания);
	Для каждого СообщениеПользователю Из СообщенияПользователю Цикл
		ОбщегоНазначения.СообщитьПользователю(СообщениеПользователю.Текст,
			СообщениеПользователю.КлючДанных, СообщениеПользователю.Поле, СообщениеПользователю.ПутьКДанным);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьВыделенныеПолучатели()
	
	Для каждого Получатель Из Получатели Цикл
		Если Получатель.Выбран Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодСозданиеНовойАдреснойКниги()
	
	Возврат "СоздатьНовуюАдреснуюКнигуСервиса";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОбъектНеНайден()
	
	Возврат СтрШаблон("<%1>", НСтр("ru='Объект не найден'"));
	
КонецФункции

&НаСервере
Функция ЗаполнитьНазваниеСервисаВСтроке(ИсходнаяСтрока)
	
	Если СтрНайти(ИсходнаяСтрока, "%1") = 0 Тогда
		Возврат ИсходнаяСтрока;
	КонецЕсли;
	
	Возврат СтрШаблон(ИсходнаяСтрока, ПредставлениеСервиса);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗаголовокФормы(Форма)
	
	Объект = Форма.Объект;
	Форма.Заголовок = "";
	Форма.Автозаголовок = ЗначениеЗаполнено(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонЗаголовка = НСтр("ru='Рассылка E-mail %1 (создание)'");
	Форма.Заголовок = СтрШаблон(ШаблонЗаголовка, Форма.ПредставлениеСервиса);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазваниеСервисаВЭлементах()
	
	ПредставлениеСервиса = МассовыеРассылкиИнтеграция.ПредставлениеСервиса();
	
	ЗаполнитьЗаголовокФормы(ЭтотОбъект);
	
	ИзменяемыеЭлементы = Новый Массив;
	ИзменяемыеЭлементы.Добавить(Элементы.ОткрытьПисьмоОснованиеРассылкиСервиса);
	ИзменяемыеЭлементы.Добавить(Элементы.ОткрытьРассылкуСервиса);
	ИзменяемыеЭлементы.Добавить(Элементы.ДекорацияПодсказкаЗагружаетсяСписокКонтактов);
	ИзменяемыеЭлементы.Добавить(Элементы.ДекорацияПодсказкаСопоставлениеКонтактов);
	ИзменяемыеЭлементы.Добавить(Элементы.СервисРассылкиНаименованиеШаблона);
	ИзменяемыеЭлементы.Добавить(Элементы.СервисРассылкиАдресОтправителя);
	ИзменяемыеЭлементы.Добавить(Элементы.СервисРассылкиИдентификаторАдреснойКниги);
	
	Для каждого Элемент Из ИзменяемыеЭлементы Цикл
		Элемент.Заголовок = ЗаполнитьНазваниеСервисаВСтроке(Элемент.Заголовок);
		Если Элемент.Вид = ВидПоляФормы.ПолеВвода И ЗначениеЗаполнено(Элемент.ПодсказкаВвода) Тогда
			Элемент.ПодсказкаВвода = ЗаполнитьНазваниеСервисаВСтроке(Элемент.ПодсказкаВвода);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораАдресныхКниг()
	
	Элементы.СервисРассылкиИдентификаторАдреснойКниги.СписокВыбора.Очистить();
	Для каждого ДанныеАдреснойКниги Из АдресныеКнигиСервиса Цикл
		Элементы.СервисРассылкиИдентификаторАдреснойКниги.СписокВыбора.Добавить(ДанныеАдреснойКниги.Идентификатор, ДанныеАдреснойКниги.Наименование);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.СервисРассылкиИдентификаторАдреснойКниги) Тогда
		Строки = АдресныеКнигиСервиса.НайтиСтроки(Новый Структура("Идентификатор", Объект.СервисРассылкиИдентификаторАдреснойКниги));
		АдреснаяКнигаНеНайдена = Строки.Количество() = 0;
		Если АдреснаяКнигаНеНайдена Тогда
			Элементы.СервисРассылкиИдентификаторАдреснойКниги.СписокВыбора.Добавить(
				Объект.СервисРассылкиИдентификаторАдреснойКниги,
				ТекстОбъектНеНайден());
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СервисРассылкиИдентификаторАдреснойКниги.СписокВыбора.Добавить(КодСозданиеНовойАдреснойКниги(), НСтр("ru='Создать новую'"),, БиблиотекаКартинок.ДобавитьЭлементСписка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОтправителей()
	
	Элементы.СервисРассылкиАдресОтправителя.СписокВыбора.Очистить();
	
	Для каждого ДанныеОтправителя Из ОтправителиСервиса Цикл
		Элементы.СервисРассылкиАдресОтправителя.СписокВыбора.Добавить(ДанныеОтправителя.Email, СтрШаблон("%1 (%2)", ДанныеОтправителя.Наименование, ДанныеОтправителя.Email));
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.СервисРассылкиАдресОтправителя) Тогда
		Строки = ОтправителиСервиса.НайтиСтроки(Новый Структура("Email", Объект.СервисРассылкиАдресОтправителя));
		Если Строки.Количество() = 0 Тогда
			Элементы.СервисРассылкиАдресОтправителя.СписокВыбора.Добавить(
				Объект.СервисРассылкиАдресОтправителя,
				ТекстОбъектНеНайден());
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Элементы.СервисРассылкиАдресОтправителя.СписокВыбора.Количество() = 1 Тогда
		Объект.СервисРассылкиАдресОтправителя = Элементы.СервисРассылкиАдресОтправителя.СписокВыбора[0].Значение;
		ДанныеОтправителя = ОтправителиСервиса.НайтиСтроки(Новый Структура("Email", Объект.СервисРассылкиАдресОтправителя))[0];
		Объект.СервисРассылкиИмяОтправителя = ДанныеОтправителя.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатистикуРассылки(ДанныеРассылки)
	
	Если Не ЗначениеЗаполнено(ДанныеРассылки.Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПолучателей = Получатели.Количество();
	
	ПисемВсего             = КоличествоПолучателей;
	ПисемДоставлено        = ДанныеРассылки.Статистика.Доставлено;
	ПисемОшибочных         = ДанныеРассылки.Статистика.Ошибок;
	ПисемНеОтправлено      = ДанныеРассылки.Статистика.НеОтправлено;
	ПисемПереходовПоСсылке = ДанныеРассылки.Статистика.ПереходовПоСсылке;
	ПисемПрочитано         = ДанныеРассылки.Статистика.Открыто;
	ПисемНеПрочитано       = ДанныеРассылки.Статистика.НеПрочитано;
	ПисемОтписокПослеПрочтения = ДанныеРассылки.Статистика.ОтписокПослеПрочтения;
	ПисемНеВключеноВРассылку   = ДанныеРассылки.Статистика.Исключено;
	
	ЗаполнитьДиаграммы();
	ЗаполнитьСтатусыДоставки(ДанныеРассылки);
	ЗаполнитьФильтрСтатусДоставки();
	
	СсылкаВебВерсияПисьма         = ДанныеРассылки.ВнешниеСсылки.ВебВерсияПисьма;
	СсылкаСтраницаПисьмаОснования = ДанныеРассылки.ВнешниеСсылки.СтраницаПисьма;
	СсылкаСтраницаРассылки        = ДанныеРассылки.ВнешниеСсылки.СтраницаСтатистикиРассылки;
	
	СостояниеРассылки = ДанныеРассылки.Состояние;
	Элементы.СостояниеНеотправленнойРассылки.Заголовок = СостояниеРассылки;
	Элементы.СостояниеОтправленнойРассылки.Заголовок = СостояниеРассылки;
	Элементы.ОткрытьПисьмоОснованиеРассылкиСервиса.Видимость = ЗначениеЗаполнено(СсылкаСтраницаПисьмаОснования);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтатусыДоставки()
	
	СтатусДоставкиНеопределено = НСтр("ru='<Статус загружается>'");
	Для каждого Получатель Из Получатели Цикл
		Получатель.СтатусДоставки = СтатусДоставкиНеопределено;
		Получатель.СтатусДоставкиИндикатор = 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыДоставки(ДанныеРассылки)
	
	Для каждого СтатистикаПолучателя Из ДанныеРассылки.Получатели Цикл
		
		Строки = Получатели.НайтиСтроки(Новый Структура("Контакт,КакСвязаться", СтатистикаПолучателя.Контакт, СтатистикаПолучателя.Email));
		Для каждого Получатель Из Строки Цикл
			Получатель.СтатусДоставки = СтатистикаПолучателя.Состояние;
			Получатель.СтатусДоставкиКодСостояния = СтатистикаПолучателя.КодСостояния;
			Получатель.СтатусДоставкиИндикатор = ИндексКартинкиПоКодуСостояния(СтатистикаПолучателя.КодСостояния);
			ДополнитьСтрокуСостоянияДоставкиСообщения(Получатель);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФильтрСтатусДоставки()
	
	Элементы.ФильтрСтатусДоставки.СписокВыбора.Очистить();
	ДобавитьФильтрВСписокВыбора("СообщениеНеВключеноВРассылку", НСтр("ru='Не включен в рассылку'"), БиблиотекаКартинок.СостояниеОбъектаОшибкаБлокирующая);
	ДобавитьФильтрВСписокВыбора("СообщениеОшибочное", НСтр("ru='Ошибка доставки'"), БиблиотекаКартинок.СостояниеОбъектаОшибкаБлокирующая);
	ДобавитьФильтрВСписокВыбора("СообщениеНеОтправлено", НСтр("ru='Не отправлено'"), БиблиотекаКартинок.СостояниеОбъектаОжидание);
	ДобавитьФильтрВСписокВыбора("СообщениеНеПрочитано", НСтр("ru='Доставлено, не прочитано'"), БиблиотекаКартинок.СостояниеОбъектаПредупреждение);
	ДобавитьФильтрВСписокВыбора("СообщениеДоставлено", НСтр("ru='Доставлено'"), БиблиотекаКартинок.СостояниеОбъектаУспех);
	ДобавитьФильтрВСписокВыбора("СообщениеПрочитано", НСтр("ru='Доставлено, прочитано'"), БиблиотекаКартинок.СостояниеОбъектаУспех);
	ДобавитьФильтрВСписокВыбора("СообщениеПрочитаноПереход", НСтр("ru='Доставлено, прочитано, есть переход'"), БиблиотекаКартинок.СостояниеОбъектаУспех);
	ДобавитьФильтрВСписокВыбора("СообщениеОтпискаПослеПрочтения", НСтр("ru='Отписались после прочтения'"), БиблиотекаКартинок.СостояниеОбъектаОшибка);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФильтрВСписокВыбора(Фильтр, Представление, Картинка)
	
	Если Не ЕстьРезультатФильтра(Фильтр) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФильтрСтатусДоставки.СписокВыбора.Добавить(Фильтр, Представление,, Картинка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораТемы(Знач СтрокаПоиска)
	
	СписокВыбораТемы = Новый СписокЗначений;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	ДанныеВыбораТемы = Справочники.ТемыСобытий.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораТемы Цикл
		СписокВыбораТемы.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(ЭлементСписка.Представление, " ", НСтр("ru='(тема события)'")));
	КонецЦикла;
	
	Возврат СписокВыбораТемы;
	
КонецФункции

&НаСервере
Функция ИндексКартинкиПоКодуСостояния(КодСостояния)
	
	Если КодСостояния = "Ошибка" Или КодСостояния = "ИсключениеИзРассылки" Тогда
		Возврат 6;
	ИначеЕсли КодСостояния = "НеОтправлено" Тогда
		Возврат 1;
	ИначеЕсли КодСостояния = "Доставлено" Или КодСостояния = "ДоставленоНеПрочитано" Тогда
		Возврат 4;
	ИначеЕсли КодСостояния = "ДоставленоПрочитано" Или КодСостояния = "ДоставленоПереходПоСсылке" Тогда
		Возврат 3;
	ИначеЕсли КодСостояния = "ДоставленоПрочитаноОтписался" Тогда
		Возврат 5;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроцентОт(Искомое, Целое)
	
	Если Целое = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Окр(Искомое * 100 / Целое);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьПолучателейОбъектаИзДанныхФормы(Объект, Получатели)
	
	Объект.Получатели.Очистить();
	Для каждого Получатель Из Получатели Цикл
		НоваяСтрока = Объект.Получатели.Добавить();
		НоваяСтрока.Контакт = Получатель.Контакт;
		НоваяСтрока.КакСвязаться = Получатель.КакСвязаться;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомераСтрокТаблицыПолучатели(Форма)
	
	НомерСтроки = 0;
	Для каждого Получатель Из Форма.Получатели Цикл
		НомерСтроки = НомерСтроки + 1;
		Получатель.НомерСтроки = НомерСтроки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеПоляСтрокТаблицыПолучатели(Форма)
	
	Для каждого Получатель Из Форма.Получатели Цикл
		Получатель.КонтактНеСопоставлен = Не ЗначениеЗаполнено(Получатель.Контакт);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьКоличествоПолучателей()
	
	Если Элементы.Получатели.ОтборСтрок = Неопределено Тогда
		КоличествоПолучателей = Получатели.Количество();
	Иначе
		ОтборСтрок = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Элементы.Получатели.ОтборСтрок, Ложь);
		КоличествоПолучателей = Получатели.НайтиСтроки(ОтборСтрок).Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПосчитатьКоличествоПолучателейСервер()
	
	Если Элементы.Получатели.ОтборСтрок = Неопределено Тогда
		КоличествоПолучателей = Получатели.Количество();
	Иначе
		ОтборСтрок = ОбщегоНазначения.СкопироватьРекурсивно(Элементы.Получатели.ОтборСтрок, Ложь);
		КоличествоПолучателей = Получатели.НайтиСтроки(ОтборСтрок).Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСлужебныеПоляТаблицыПолучателиКлиент()
	
	ПосчитатьКоличествоПолучателей();
	ЗаполнитьНомераСтрокТаблицыПолучатели(ЭтотОбъект);
	ЗаполнитьСлужебныеПоляСтрокТаблицыПолучатели(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеПоляТаблицыПолучателиСервер()
	
	ПосчитатьКоличествоПолучателейСервер();
	ЗаполнитьНомераСтрокТаблицыПолучатели(ЭтотОбъект);
	ЗаполнитьСлужебныеПоляСтрокТаблицыПолучатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередИзменениемТаблицыПолучатели()
	
	Если Не ЭтоСозданиеНовойАдреснойКнигиСервиса Тогда
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти
