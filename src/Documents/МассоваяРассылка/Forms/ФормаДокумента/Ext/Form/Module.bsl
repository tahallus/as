
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.МассоваяРассылка.ТабличныеЧасти.Получатели, НастройкиЗагрузкиДанных, ЭтотОбъект, Ложь);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	Элементы.ПолучателиКонтакт.ОграничениеТипа	= Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(100));
	Элементы.Тема.ОграничениеТипа				= Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(100));
	
	ПровайдерSMS = Константы.ПровайдерSMS.Получить();
	НастройкиSMSВыполнены = ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
	ДоступноПравоНастройкиSMS = Пользователи.ЭтоПолноправныйПользователь();
	
	Элементы.ПровайдерSMS.Видимость = ЗначениеЗаполнено(ЭтотОбъект.ПровайдерSMS);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОтменитьЗаданиеНаРассылку();
		
	Иначе
		
		ЗаполнитьНовоеПисьмоПоУмолчанию();
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Картинки = Параметры.ЗначениеКопирования.КартинкиHTML.Получить();
			Если Картинки = Неопределено Тогда
				Картинки = Новый Структура;
			КонецЕсли;
			ФорматированныйДокумент.УстановитьHTML(Объект.СодержаниеHTML, Картинки);
		КонецЕсли;
		
	КонецЕсли;
	
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы, "Получатели");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если ТекущийОбъект.СпособОтправки = Перечисления.ВидыКаналовСвязи.Email Тогда
		ПрочитатьВложения(ТекущийОбъект);
	КонецЕсли;
	
	Если ТекущийОбъект.СпособОтправки = Перечисления.ВидыКаналовСвязи.SMS Тогда
		ПрочитатьСтатусы(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.СпособОтправки = Перечисления.ВидыКаналовСвязи.Email Тогда
		
		ТекстHTML = "";
		Картинки = Новый Структура;
		ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, Картинки);
		
		ТекущийОбъект.СодержаниеHTML = ТекстHTML;
		ТекущийОбъект.КартинкиHTML = Новый ХранилищеЗначения(Картинки);
		ТекущийОбъект.Содержание = ФорматированныйДокумент.ПолучитьТекст();
		
	Иначе
		
		ТекущийОбъект.СодержаниеHTML = "";
		ТекущийОбъект.КартинкиHTML = Неопределено;
		Вложения.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьВложения(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособОтправкиПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если ТипЗнч(Объект.Тема) = Тип("СправочникСсылка.ТемыСобытий") И ЗначениеЗаполнено(Объект.Тема) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Тема);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ТемыСобытий.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Тема = ВыбранноеЗначение;
		ЗаполнитьСодержаниеСобытия(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораТемы(Текст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучатели

&НаКлиенте
Процедура ПолучателиКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
		ПараметрыФормы.Вставить("ТипКИ", "АдресЭлектроннойПочты");
	Иначе
		ПараметрыФормы.Вставить("ТипКИ", "Телефон");
	КонецЕсли;
	Если ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		Контакт = Объект.Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).Контакт;
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПараметрыФормы.Вставить("ТекущийКонтрагент", Контакт);
		КонецЕсли;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиКонтактВыборЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаАдреснойКниги", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		Контакт = Объект.Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).Контакт;
		ПоказатьЗначение(,Контакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
	// Выбор осуществлен механизмом автоподбора
		
		Объект.Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).Контакт = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораКонтактов(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле <> Элементы.ПолучателиСостояниеСообщенияSMS Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("МассоваяРассылка", Объект.Ссылка);
	Отбор.Вставить("КакСвязаться", Элемент.ТекущиеДанные.КакСвязаться);
	
	КлючЗаписи = Новый(
	Тип("РегистрСведенийКлючЗаписи.ОчередьРассылок"),
	ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отбор));
	
	ПараметрыФормыЗаписи = Новый Структура;
	ПараметрыФормыЗаписи.Вставить("Ключ", КлючЗаписи);
	
	ОткрытьФорму("РегистрСведений.ОчередьРассылок.ФормаЗаписи", ПараметрыФормыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавлениеФайлаКВложениям();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВложенияПеретаскиваниеЗавершение", ЭтотОбъект, Новый Структура("Имя", ПараметрыПеретаскивания.Значение.Имя));
		НачатьПомещениеФайла(ОписаниеОповещения, , ПараметрыПеретаскивания.Значение.ПолноеИмя, Ложь);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьРассылку(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьРассылкуВопросЗадан", ЭтотОбъект);
	ТекстВопроса = ТекстВопроса();
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.Заголовок = НСтр("ru='Подтверждение рассылки'");
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ПараметрыВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеПоТеме(Команда)
	
	Если ЗначениеЗаполнено(Объект.Тема) Тогда
		ЗаполнитьСодержаниеСобытия(Объект.Тема);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКонтактов(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
		ПараметрыФормы.Вставить("ТипКИ", "АдресЭлектроннойПочты");
	Иначе
		ПараметрыФормы.Вставить("ТипКИ", "Телефон");
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодборКонтактовЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаАдреснойКниги", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНезаполненные(Команда)
	
	УдаляемыеПолучатели = Новый Массив;
	
	Для Каждого СтрокаПолучатель Из Объект.Получатели Цикл
		Если ПустаяСтрока(СтрокаПолучатель.КакСвязаться) Тогда
			УдаляемыеПолучатели.Добавить(СтрокаПолучатель);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйПолучатель Из УдаляемыеПолучатели Цикл
		Объект.Получатели.Удалить(УдаляемыйПолучатель);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрВремя(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрВремя());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрДата(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрДата());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяИменительныйПадеж(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяИменительныйПадеж());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяРодительныйПадеж(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяРодительныйПадеж());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяДательныйПадеж(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяДательныйПадеж());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяВинительныйПадеж(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяВинительныйПадеж());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяТворительныйПадеж(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяТворительныйПадеж());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяПредложныйПадеж(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрИмяПолучателяПредложныйПадеж());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрКакОтписатьсяОтРассылки(Команда)
	
	ВставитьПараметр(МассовыеРассылкиУНФКлиентСервер.ПараметрКакОтписатьсяОтРассылки());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОтменитьЗаданиеНаРассылку()
	
	Если Не РегистрыСведений.ОчередьРассылок.ЗаданиеЗапланировано() Тогда
		Возврат;
	КонецЕсли;
	
	Если РегистрыСведений.ОчередьРассылок.ЗаданиеУжеВыполняется() Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ОчередьРассылок.УдалитьЗадание();
	
	Элементы.ЗаданиеРассылкиОтменено.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	ЭтоОтправкаEmail = Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email");
	
	Элементы.СтандартныеКомандыФорматированногоДокумента.Видимость = ЭтоОтправкаEmail;
	Элементы.УчетнаяЗапись.Видимость = ЭтоОтправкаEmail;
	Элементы.АльтернативныеУчетныеЗаписи.Видимость = ЭтоОтправкаEmail;
	Элементы.ПровайдерSMS.Видимость = Не ЭтоОтправкаEmail;
	Элементы.ИмяОтправителяSMS.Видимость = Не ЭтоОтправкаEmail;
	Элементы.ГруппаВложения.Видимость = ЭтоОтправкаEmail;
	Элементы.ПолучателиСостояниеСообщенияSMS.Видимость = Не ЭтоОтправкаEmail;
	Элементы.ФорматированныйДокумент.Видимость = ЭтоОтправкаEmail;
	Элементы.Содержание.Видимость = Не ЭтоОтправкаEmail;
	Элементы.ПараметрКакОтписатьсяОтРассылки.Видимость = ЭтоОтправкаEmail;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПолучателиЗагрузкаДанныхИзВнешнегоИсточника", "Видимость", ЭтоОтправкаEmail);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВложения(Знач ТекущийОбъект)
	
	Вложения.Очистить();
	
	Картинки = ТекущийОбъект.КартинкиHTML.Получить();
	Если Картинки = Неопределено Тогда
		Картинки = Новый Структура;
	КонецЕсли;
	ФорматированныйДокумент.УстановитьHTML(ТекущийОбъект.СодержаниеHTML, Картинки);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МассоваяРассылкаПрисоединенныеФайлы.Ссылка,
	|	МассоваяРассылкаПрисоединенныеФайлы.Наименование,
	|	МассоваяРассылкаПрисоединенныеФайлы.Расширение,
	|	МассоваяРассылкаПрисоединенныеФайлы.ИндексКартинки
	|ИЗ
	|	Справочник.МассоваяРассылкаПрисоединенныеФайлы КАК МассоваяРассылкаПрисоединенныеФайлы
	|ГДЕ
	|	МассоваяРассылкаПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И МассоваяРассылкаПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("ВладелецФайла", ТекущийОбъект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Вложения.Добавить();
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		НоваяСтрока.Представление = Выборка.Наименование + ?(ПустаяСтрока(Выборка.Расширение), "", "." + Выборка.Расширение);
		НоваяСтрока.ИндексКартинки = Выборка.ИндексКартинки;
		НоваяСтрока.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Ссылка), УникальныйИдентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСтатусы(Знач ТекущийОбъект)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОчередьРассылок.МассоваяРассылка КАК МассоваяРассылка,
	|	ОчередьРассылок.КакСвязаться КАК КакСвязаться,
	|	ОчередьРассылок.СостояниеСообщенияSMS КАК СостояниеСообщенияSMS
	|ИЗ
	|	РегистрСведений.ОчередьРассылок КАК ОчередьРассылок
	|ГДЕ
	|	ОчередьРассылок.МассоваяРассылка = &МассоваяРассылка");
	Запрос.УстановитьПараметр("МассоваяРассылка", ТекущийОбъект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СостоянияСообщенийSMS = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СостоянияСообщенийSMS[Выборка.КакСвязаться] = Выборка.СостояниеСообщенияSMS;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из Объект.Получатели Цикл
		ТекСтрока.СостояниеСообщенияSMS = СостоянияСообщенийSMS[ТекСтрока.КакСвязаться];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНовоеПисьмоПоУмолчанию()
	
	Объект.Автор = Пользователи.АвторизованныйПользователь();
	Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Автор, "ОсновнойОтветственный");
	Объект.УчетнаяЗапись = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Автор, "ОсновнаяУчетнаяЗаписьЭлектроннойПочты");
	Объект.ИмяОтправителяSMS = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиSMS", "ИмяОтправителяSMS", "");
	Объект.Состояние = Перечисления.СостоянияОтправкиРассылки.Черновик;
	
	ВключатьПодписьДляНовыхСообщений = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиЭлектроннойПочты", "ВключатьПодписьДляНовыхСообщений", Ложь);
	Если ВключатьПодписьДляНовыхСообщений Тогда
		ПодписьHTML = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиЭлектроннойПочты", "ПодписьHTML", "");
		КартинкиПодписи = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиЭлектроннойПочты", "КартинкиПодписи", Новый Структура);
		ФорматированныйДокумент.УстановитьHTML(ПодписьHTML, КартинкиПодписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстВопроса()
	
	Отказались = Новый Соответствие;
	Дубли = Новый Соответствие;
	КОтправке = Новый Соответствие;
	
	ОтказалисьОтРассылки = РегистрыСведений.ОтказалисьОтРассылки.ЭтиАдреса();
	
	Для Каждого ТекСтрокаПолучатели Из Объект.Получатели Цикл
		
		ТекКонтакт = КакСвязаться(ТекСтрокаПолучатели);
		
		Если ОтказалисьОтРассылки[ТекКонтакт] = Истина Тогда
			Отказались[ТекКонтакт] = Истина;
			Продолжить;
		КонецЕсли;
		
		Если КОтправке[ТекКонтакт] <> Неопределено Тогда
			Дубли[ТекКонтакт] = Истина;
			Продолжить;
		КонецЕсли;
		
		КОтправке[ТекКонтакт] = Истина;
		
	КонецЦикла;
	
	КомпонентыТекстаВопроса = Новый Массив;
	
	Если ЗначениеЗаполнено(Дубли) Тогда
		КомпонентыТекстаВопроса.Добавить(СтрШаблон(НСтр("ru = 'В списке получателей %1 (%2).'"),
		СтрокаСЧислом(НСтр("ru = ';%1 дубль;;%1 дубля;%1 дублей;%1 дубля'"),
		Дубли.Количество(),
		ВидЧисловогоЗначения.Количественное),
		ПервыеТриПолучателя(Дубли)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отказались) Тогда
		КомпонентыТекстаВопроса.Добавить(СтрШаблон(НСтр("ru = '%1 от рассылки (%2).'"),
		СтрокаСЧислом(НСтр("ru = ';%1 получатель отказался;;%1 получателя отказались;%1 получателей отказались;%1 получателя отказались'"),
		Отказались.Количество(),
		ВидЧисловогоЗначения.Количественное),
		ПервыеТриПолучателя(Отказались)));
	КонецЕсли;
	
	Если КОтправке.Количество() > 0 Тогда
		КомпонентыТекстаВопроса.Добавить(СтрШаблон(НСтр("ru='Рассылка будет выполнена для %1.'"),
		СтрокаСЧислом(НСтр("ru = ';%1 получателя;;%1 получателей;%1 получателей;%1 получателя'"),
		КОтправке.Количество(),ВидЧисловогоЗначения.Количественное)));
	Иначе
		КомпонентыТекстаВопроса.Добавить(НСтр("ru = 'Отсутствуют получатели для рассылки.
		|'"));
	КонецЕсли;
	
	Если Объект.ПометкаУдаления Тогда
		КомпонентыТекстаВопроса.Добавить(НСтр("ru = 'Перед отправкой будет снята пометка удаления.'"));
	КонецЕсли;
	
	КомпонентыТекстаВопроса.Добавить(НСтр("ru='Продолжить?'"));
	
	Возврат СтрСоединить(КомпонентыТекстаВопроса, "
	|
	|");

КонецФункции

&НаСервере
Функция ПервыеТриПолучателя(Получатели)
	
	КомпонентыПредставления = Новый Массив;
	
	Индекс = 0;
	Для Каждого ТекПолучатель Из Получатели Цикл
		Индекс = Индекс + 1;
		Если Индекс > 3 Тогда
			Прервать;
		КонецЕсли;
		КомпонентыПредставления.Добавить(ТекПолучатель.Ключ);
	КонецЦикла;
	
	Результат = СтрСоединить(КомпонентыПредставления, ", ");
	
	Если Получатели.Количество() > КомпонентыПредставления.Количество() Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 и другие'"), Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КакСвязаться(ПараметрСтрокаПолучатели)
	
	Если Объект.СпособОтправки = Перечисления.ВидыКаналовСвязи.SMS Тогда
		Возврат МассовыеРассылкиУНФКлиентСервер.НомерДляОтправки(ПараметрСтрокаПолучатели.КакСвязаться);
	КонецЕсли;
	
	Если Объект.СпособОтправки = Перечисления.ВидыКаналовСвязи.Email Тогда
		Возврат НРег(СокрЛП(ПараметрСтрокаПолучатели.КакСвязаться));
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Указан недопустимый способ доставки для массовой рассылки.'");
	
КонецФункции

&НаКлиенте
Процедура ОтправитьРассылкуВопросЗадан(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВопроса) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РезультатВопроса.Свойство("Значение") Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса.Значение <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПометкаУдаления Тогда
		Объект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьСобытияВОчередиНаОтправку();
	Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОтправкиРассылки.Сформировано");
	Объект.ДатаРассылки = ТекущаяДата();
	Записать();
	
	ТекстОповещения = СтрШаблон(
	НСтр("ru = '%1 в очереди на рассылку %2'"),
	ПредставлениеКоличестваСформированныхРассылок(Объект.Ссылка),
	Объект.СпособОтправки);
	
	ПоказатьОповещениеПользователя(ТекстОповещения, ПолучитьНавигационнуюСсылку(Объект.Ссылка), Строка(Объект.Ссылка), БиблиотекаКартинок.Информация32);
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьСобытияВОчередиНаОтправку()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтказалисьОтРассылки = РегистрыСведений.ОтказалисьОтРассылки.ЭтиАдреса();
	
	Для Каждого ТекСтрокаПолучатели Из Объект.Получатели Цикл
		
		Если ОтказалисьОтРассылки[НРег(СокрЛП(ТекСтрокаПолучатели.КакСвязаться))] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.ОчередьРассылок.Зарегистрировать(
		Объект.Ссылка,
		ТекСтрокаПолучатели.КакСвязаться,
		Объект.СпособОтправки,
		Объект.ИнтервалМеждуПопытками,
		Объект.КоличествоПопыток);
		
	КонецЦикла;
	
	РегистрыСведений.ОчередьРассылок.ЗапуститьВыполнениеЗадания();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеКоличестваСформированныхРассылок(МассоваяРассылка)
	
	КоличествоСформированныхРассылок = РегистрыСведений.ОчередьРассылок.КоличествоСформированныхРассылок(МассоваяРассылка);
	
	Результат = СтрокаСЧислом(
	";Зарегистрирована %1 запись;;Зарегистрировано %1 записи;Зарегистрировано %1 записей;Зарегистрировано %1 записи",
	КоличествоСформированныхРассылок,
	ВидЧисловогоЗначения.Количественное);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВставитьПараметр(ИмяПараметра)
	
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
		
		ВставитьПараметрВТекстЭлектронногоПисьма(ИмяПараметра);
		
	Иначе
		
		ВставитьПараметрВСМС(ИмяПараметра);
		
	КонецЕсли;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПараметрВТекстЭлектронногоПисьма(ИмяПараметра)
	
	Перем ЗакладкаНачала;
	Перем ЗакладкаОкончания;
	
	Элементы.ФорматированныйДокумент.ПолучитьГраницыВыделения(ЗакладкаНачала, ЗакладкаОкончания);
	
	Попытка
		
		ПозицияНачала = ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаНачала);
		ПозицияОкончания = ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаОкончания);
		
		Если ЗакладкаНачала <> ЗакладкаОкончания Тогда 
			ФорматированныйДокумент.Удалить(ЗакладкаНачала, ЗакладкаОкончания);
			Элементы.ФорматированныйДокумент.УстановитьГраницыВыделения(ЗакладкаНачала, ЗакладкаНачала);
		КонецЕсли;
		Если ПозицияНачала = 0 Тогда
			ФорматированныйДокумент.Добавить(ИмяПараметра);
		Иначе
			ФорматированныйДокумент.Вставить(ЗакладкаНачала, ИмяПараметра);
		КонецЕсли;
		
		ПозицияОкончания = ПозицияНачала + СтрДлина(ИмяПараметра);
		ЗакладкаОкончания = ФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(ПозицияОкончания);
		Элементы.ФорматированныйДокумент.УстановитьГраницыВыделения(ЗакладкаНачала, ЗакладкаОкончания);
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПараметрВСМС(Знач ИмяПараметра)
	
	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;
	
	Элементы.Содержание.ПолучитьГраницыВыделения(НачалоСтроки,НачалоКолонки,КонецСтроки,КонецКолонки);
	
	Объект.Содержание = Лев(Объект.Содержание, НачалоКолонки - 1) + ИмяПараметра + Сред(Объект.Содержание, НачалоКолонки);
КонецПроцедуры

// Процедура интерактивного добавления вложений.
//
&НаКлиенте
Процедура ДобавлениеФайлаКВложениям()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВоВложенияПослеПомещенияФайлов", ЭтотОбъект);
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(ОписаниеОповещения, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВоВложенияПослеПомещенияФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Или ПомещенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьФайлыВСписок(ПомещенныеФайлы);
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура добавляет файлы во вложения.
//
// Параметры:
//  ПомещенныеФайлы	 - Массив	 - Массив объектов типа ОписаниеПереданногоФайла 
&НаСервере
Процедура ДобавитьФайлыВСписок(ПомещенныеФайлы)
	
	Для Каждого ОписаниеФайла Из ПомещенныеФайлы Цикл
		
		Файл = Новый Файл(ОписаниеФайла.Имя);
		ПозицияТочки = Найти(Файл.Расширение, ".");
		РасширениеБезТочки = Сред(Файл.Расширение, ПозицияТочки + 1);
		
		Вложение = Вложения.Добавить();
		Вложение.Представление = Файл.Имя;
		Вложение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение), УникальныйИдентификатор);
		Вложение.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура в зависимости от типа клиента открывает или сохраняет выбранный файл
//
&НаКлиенте
Процедура ОткрытьВложение()
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеВложение = Вложения.НайтиПоИдентификатору(Элементы.Вложения.ТекущаяСтрока);
	
	#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		ПолучитьФайл(ВыбранноеВложение.АдресВоВременномХранилище, ВыбранноеВложение.Представление, Истина);
	#Иначе
		ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ИмяВременнойПапки);
		
		ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ВыбранноеВложение.Представление;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВыбранноеВложение.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		Файл = Новый Файл(ИмяВременногоФайла);
		Файл.УстановитьТолькоЧтение(Истина);
		Если Файл.Расширение = ".mxl" Тогда
			ТабличныйДокумент = ПолучитьТабличныйДокументПоДвоичнымДанным(ВыбранноеВложение.АдресВоВременномХранилище);
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ИмяДокумента", ВыбранноеВложение.Представление);
			ПараметрыОткрытия.Вставить("ТабличныйДокумент", ТабличныйДокумент);
			ПараметрыОткрытия.Вставить("ПутьКФайлу", ИмяВременногоФайла);
			ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента", ПараметрыОткрытия, ЭтотОбъект);
		Иначе
			ФайловаяСистемаКлиент.ОткрытьФайл(ИмяВременногоФайла);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументПоДвоичнымДанным(Знач ДвоичныеДанные)
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("Строка") Тогда
		// передан адрес двоичных данных во временном хранилище
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДвоичныеДанные);
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
	ДвоичныеДанные.Записать(ИмяФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяФайла);
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение табличного документа'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСодержаниеТемы(ТемаСобытия)
	
	Возврат ТемаСобытия.Содержание;
	
КонецФункции // ПолучитьСодержаниеТемы()

&НаКлиенте
Процедура ПодборКонтактовЗавершение(АдресВХранилище, ДополнительныеПараметры) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		
		ЗаблокироватьДанныеФормыДляРедактирования();
		Модифицированность = Истина;
		ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище)
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище)
	
	ТаблицаАдресатов = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ОбработатьТекущуюСтроку = Элементы.Получатели.ТекущаяСтрока <> Неопределено;
	
	Для Каждого ПодобраннаяСтрока Из ТаблицаАдресатов Цикл
		СтрокаПолучатели = Неопределено;
		
		Если ОбработатьТекущуюСтроку Тогда
			ОбработатьТекущуюСтроку = Ложь;
			СтрокаПолучатели = Объект.Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		КонецЕсли;
		
		Если СтрокаПолучатели <> Неопределено И ЗначениеЗаполнено(СтрокаПолучатели.Контакт) И ЗначениеЗаполнено(СтрокаПолучатели.КакСвязаться) Тогда
			СтрокаПолучатели = Неопределено;
		КонецЕсли;
		
		Если СтрокаПолучатели = Неопределено Тогда
			СтрокаПолучатели = Объект.Получатели.Добавить();
		КонецЕсли;
		
		СтрокаПолучатели.Контакт = ПодобраннаяСтрока.Контакт;
		СтрокаПолучатели.КакСвязаться = ПодобраннаяСтрока.КакСвязаться;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскиваниеЗавершение(Результат, АдресВременногоХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Файлы = Новый Массив;
	ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.Имя, АдресВременногоХранилища);
	Файлы.Добавить(ПередаваемыйФайл);
	ДобавитьФайлыВСписок(Файлы);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьВложения(МассоваяРассылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Вложения.Ссылка КАК Ссылка,
		|	Вложения.АдресВоВременномХранилище,
		|	Вложения.Представление
		|ПОМЕСТИТЬ втВложения
		|ИЗ
		|	&Вложения КАК Вложения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МассоваяРассылкаПрисоединенныеФайлы.Ссылка
		|ПОМЕСТИТЬ втПрисоединенныеФайлы
		|ИЗ
		|	Справочник.МассоваяРассылкаПрисоединенныеФайлы КАК МассоваяРассылкаПрисоединенныеФайлы
		|ГДЕ
		|	МассоваяРассылкаПрисоединенныеФайлы.ВладелецФайла = &МассоваяРассылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВложения.Ссылка КАК ВложениеСсылка,
		|	втПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайлСсылка,
		|	втВложения.АдресВоВременномХранилище,
		|	втВложения.Представление
		|ИЗ
		|	втВложения КАК втВложения
		|		ПОЛНОЕ СОЕДИНЕНИЕ втПрисоединенныеФайлы КАК втПрисоединенныеФайлы
		|		ПО втВложения.Ссылка = втПрисоединенныеФайлы.Ссылка";
	
	Запрос.УстановитьПараметр("Вложения", Вложения.Выгрузить());
	Запрос.УстановитьПараметр("МассоваяРассылка", МассоваяРассылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПрисоединенныйФайлСсылка = NULL Тогда
		// Добавить вложение в присоединенные файлы
			
			Если Не ПустаяСтрока(Выборка.АдресВоВременномХранилище) Тогда
				
				ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.Представление, ".", Ложь);
				Если ЧастиИмениФайла.Количество() > 1 Тогда
					РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
					ИмяБезРасширения = Лев(Выборка.Представление, СтрДлина(Выборка.Представление) - (СтрДлина(РасширениеБезТочки)+1));
				Иначе
					РасширениеБезТочки = "";
					ИмяБезРасширения = Выборка.Представление;
				КонецЕсли;
				
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
				ПараметрыФайла.Вставить("ВладелецФайлов", МассоваяРассылка);
				ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
				ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяУниверсальнаяДата());
				
				Вложения.НайтиСтроки(Новый Структура("Представление, АдресВоВременномХранилище", Выборка.Представление, Выборка.АдресВоВременномХранилище))[0].Ссылка =
					РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Выборка.АдресВоВременномХранилище);
			КонецЕсли;
			
		ИначеЕсли Выборка.ВложениеСсылка = NULL Тогда
		// Удалить вложение из присоединенных файлов
			
			ПрисоединенныйФайлОбъект = Выборка.ПрисоединенныйФайлСсылка.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.УстановитьПометкуУдаления(Истина);
			
		Иначе
		// Обновить вложение в присоединенных файлах
			
			РаботаСФайлами.ОбновитьФайл(Выборка.ПрисоединенныйФайлСсылка, 
				Новый Структура("АдресФайлаВоВременномХранилище, АдресВременногоХранилищаТекста", Выборка.АдресВоВременномХранилище, ""));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ПолучателиДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект.Получатели.Добавить(), СтрокаТаблицы);
		
		ПолучателиДобавлены = Истина;
		
	КонецЦикла;
	
	Если ПолучателиДобавлены Тогда
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "МассоваяРассылка.Получатели");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка получателей из файла'"));
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ОбработатьПодготовленныеДанные(РезультатЗагрузки);
			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(РезультатЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				ЗаполнитьЗначенияСвойств(Объект.Получатели.Добавить(), СтрокаТаблицы);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

#КонецОбласти

#Область ЗаполнениеВторичныхДанных

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытия(ТемаСобытия)
	
	Если ТипЗнч(ТемаСобытия) <> Тип("СправочникСсылка.ТемыСобытий") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоEmail = Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email");
	Если (ЭтоEmail И НЕ ПустаяСтрока(ФорматированныйДокумент.ПолучитьТекст())) Или (НЕ ЭтоEmail И НЕ ПустаяСтрока(Объект.Содержание)) Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСодержаниеСобытияЗавершение", ЭтотОбъект, Новый Структура("ТемаСобытия", ТемаСобытия)),
			НСтр("ru = 'Перезаполнить содержание по выбранной теме?'"), РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьСодержаниеСобытияФрагмент(ТемаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСодержаниеСобытияФрагмент(ДополнительныеПараметры.ТемаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытияФрагмент(Знач ТемаСобытия)
	
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
		ЗаполнитьФорматированныйДокументПоТемеСобытия(ФорматированныйДокумент, ТемаСобытия);
	Иначе
		Объект.Содержание = ПолучитьСодержаниеТемы(ТемаСобытия);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ЗаполнитьФорматированныйДокументПоТемеСобытия(ФорматированныйДокумент, ТемаСобытия)
	
	ФорматированныйДокумент.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ТемаСобытия.Содержание));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораТемы(знач СтрокаПоиска)
	
	СписокВыбораТемы = Новый СписокЗначений;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	ДанныеВыбораТемы = Справочники.ТемыСобытий.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораТемы Цикл
		СписокВыбораТемы.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(ЭлементСписка.Представление, " (тема события)"));
	КонецЦикла;
	
	Возврат СписокВыбораТемы;
	
КонецФункции

&НаКлиенте
Процедура ПолучателиКонтактВыборЗавершение(АдресВХранилище, ДополнительныеПараметры) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		
		ЗаблокироватьДанныеФормыДляРедактирования();
		Модифицированность = Истина;
		ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораКонтактов(знач СтрокаПоиска)
	
	ДанныеВыбораКонтактов = Новый СписокЗначений;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	
	ДанныеВыбораКонтрагентов = Справочники.Контрагенты.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтрагентов Цикл
		ДанныеВыбораКонтактов.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(ЭлементСписка.Представление, " (контрагент)"));
	КонецЦикла;
	
	ДанныеВыбораКонтактныхЛиц = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтактныхЛиц Цикл
		ДанныеВыбораКонтактов.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(ЭлементСписка.Представление, " (контактное лицо)"));
	КонецЦикла;
	
	Возврат ДанныеВыбораКонтактов;
	
КонецФункции

#КонецОбласти
