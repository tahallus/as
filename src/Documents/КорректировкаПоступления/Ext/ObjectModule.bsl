#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	Предоплата.Очистить();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПоступлению";
	СтратегияЗаполнения[Тип("ДокументСсылка.КорректировкаПоступления")] = "ЗаполнитьПоПоступлению";
	СтратегияЗаполнения[Тип("ДокументСсылка.ДополнительныеРасходы")] = "ЗаполнитьПоДопРасходам";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьСуммыДоКорректировки();
	СуммаДокумента = Запасы.Итог("Всего") + Расходы.Итог("Всего");
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Получить() Тогда
		
		Если НЕ ВключатьРасходыВСебестоимость Тогда
			
			Для Каждого СтрокаРасходы Из Расходы Цикл
				
				Если СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
					
					СтрокаРасходы.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
		И НЕ Контрагент.ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение 
		ИЛИ НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "НомерИсправления");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДатаИсправления");
	КонецЕсли;
	
	// Проверка наличия розничной цены.
	ПроверитьНаличиеРозничнойЦены(Отказ);
	
	Если Запасы.Количество() > 0 Тогда
		ПроверяемыеРеквизиты.Добавить("СтруктурнаяЕдиница");
	КонецЕсли;
	
	Если НЕ ВключатьРасходыВСебестоимость
		И ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ДополнительныеРасходы") Тогда
		
		Для Каждого СтрокаРасходы Из Расходы Цикл
			
			Если Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
				И (СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.НезавершенноеПроизводство
				ИЛИ СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты
				ИЛИ СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Доходы
				ИЛИ СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Расходы)
				И НЕ ЗначениеЗаполнено(СтрокаРасходы.СтруктурнаяЕдиница) Тогда
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'Для номенклатуры ""%1"" указанной в строке %2 списка ""Услуги"", должен быть заполнен реквизит ""Подразделение"".'"),
					СокрЛП(СтрокаРасходы.Номенклатура), СтрокаРасходы.НомерСтроки);
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Расходы", СтрокаРасходы.НомерСтроки,
					"СтруктурнаяЕдиница");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если (ВключатьРасходыВСебестоимость
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ДополнительныеРасходы"))
		И Запасы.Итог("СуммаРасходов") <> Расходы.Итог("Всего") Тогда
		
		ТекстСообщения = НСтр("ru = 'Сумма услуг не равна распределенной сумме по запасам.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		
	КонецЕсли;
	
	ТаблицаЗапасы = Запасы.Выгрузить(, "Заказ, Всего");
	ТаблицаЗапасы.Свернуть("Заказ", "Всего");
	
	ТаблицаРасходы = Расходы.Выгрузить(, "ЗаказПоставщику, Всего");
	ТаблицаРасходы.Свернуть("ЗаказПоставщику", "Всего");
	
	ТаблицаПредоплата = Предоплата.Выгрузить(, "Заказ, СуммаПлатежа");
	ТаблицаПредоплата.Свернуть("Заказ", "СуммаПлатежа");
	
	КоличествоЗапасыРасходы = Запасы.Количество() + Расходы.Количество();
	
	Для Каждого Строка Из ТаблицаПредоплата Цикл
		
		НайденнаяСтрокаРасходы = Неопределено;
		НайденнаяСтрокаЗапасы = Неопределено;
		
		Если Контрагент.ВестиРасчетыПоЗаказам
			И Строка.Заказ <> Неопределено
			И Строка.Заказ <> Документы.ЗаказПокупателя.ПустаяСсылка()
			И Строка.Заказ <> Документы.ЗаказПоставщику.ПустаяСсылка() Тогда
			НайденнаяСтрокаЗапасы = ТаблицаЗапасы.Найти(Строка.Заказ, "Заказ");
			НайденнаяСтрокаРасходы = ТаблицаРасходы.Найти(Строка.Заказ, "ЗаказПоставщику");
		ИначеЕсли Контрагент.ВестиРасчетыПоЗаказам Тогда
			НайденнаяСтрокаЗапасы = ТаблицаЗапасы.Найти(Неопределено, "Заказ");
			НайденнаяСтрокаЗапасы = ?(НайденнаяСтрокаЗапасы = Неопределено, ТаблицаЗапасы.Найти(Документы.ЗаказПокупателя.ПустаяСсылка(), "Заказ"), НайденнаяСтрокаЗапасы);
			НайденнаяСтрокаЗапасы = ?(НайденнаяСтрокаЗапасы = Неопределено, ТаблицаЗапасы.Найти(Документы.ЗаказПоставщику.ПустаяСсылка(), "Заказ"), НайденнаяСтрокаЗапасы);
			НайденнаяСтрокаРасходы = ТаблицаРасходы.Найти(Неопределено, "ЗаказПоставщику");
			НайденнаяСтрокаРасходы = ?(НайденнаяСтрокаРасходы = Неопределено, ТаблицаРасходы.Найти(Документы.ЗаказПокупателя.ПустаяСсылка(), "ЗаказПоставщику"), НайденнаяСтрокаРасходы);
			НайденнаяСтрокаРасходы = ?(НайденнаяСтрокаРасходы = Неопределено, ТаблицаРасходы.Найти(Документы.ЗаказПоставщику.ПустаяСсылка(), "ЗаказПоставщику"), НайденнаяСтрокаРасходы);
		КонецЕсли;
		
		Если НайденнаяСтрокаЗапасы = Неопределено
			И НайденнаяСтрокаРасходы = Неопределено
			И КоличествоЗапасыРасходы > 0
			И Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекстСообщения = НСтр(
				"ru = 'Нельзя зачесть аванс по заказу отличному от указанных в табличных частях ""Запасы"" или ""Услуги"".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	
	ГрузовыеТаможенныеДекларацииСервер.ПриОбработкеПроверкиЗаполнения(Отказ, ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.КорректировкаПоступления.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РазмещениеЗаказов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Закупки", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыНаСкладах", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыКПоступлениюНаСклады", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗаказыПоставщикам", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетод", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыНераспределенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыОтложенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПоставщиками", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СуммовойУчетВРознице", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗакупкиДляКУДиР", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
	// Контроль возникновения отрицательного остатка.
	Документы.КорректировкаПоступления.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Запись цен в регистр сведений Цены номенклатуры контрагентов.
	Документы.КорректировкаПоступления.ЗарегистрироватьЦеныПоставщика(Ссылка);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.КорректировкаПоступления.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Удаление цен из регистра сведений Цены номенклатуры контрагентов.
	Документы.КорректировкаПоступления.УдалитьЦеныПоставщика(Ссылка);
	
	// Подчиненный счет-фактура (полученный)
	Если НЕ Отказ Тогда
		
		КонтрольПодчиненногоСчетаФактуры();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СчетаФактурыУНФ.ПриЗаписиДокументаОснованияСчетаФактуры(Ссылка, ДополнительныеСвойства, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

// Процедура заполняет авансы.
//
Процедура ЗаполнитьПредоплату() Экспорт
	
	Компания = Константы.УчетПоКомпании.Компания(Организация);
	
	// Подготовка таблицы заказов.
	ТаблицаЗаказов = Запасы.Выгрузить(, "Заказ, Всего");
	ТаблицаЗаказов.Колонки.Добавить("ВсегоРасч");
	Для Каждого ТекСтрока Из Расходы Цикл
		НоваяСтрока = ТаблицаЗаказов.Добавить();
		НоваяСтрока.Заказ = ТекСтрока.ЗаказПоставщику;
		НоваяСтрока.Всего = ТекСтрока.Всего;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТаблицаЗаказов Цикл
		Если НЕ Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекСтрока.Заказ = Документы.ЗаказПоставщику.ПустаяСсылка();
		Иначе
			ТекСтрока.Заказ = ?(ТекСтрока.Заказ = Неопределено, Документы.ЗаказПоставщику.ПустаяСсылка(), ТекСтрока.Заказ);
		КонецЕсли;
		ТекСтрока.ВсегоРасч = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
		ТекСтрока.Всего,
		?(Договор.ВалютаРасчетов = ВалютаДокумента, Курс, 1),
		Курс,
		?(Договор.ВалютаРасчетов = ВалютаДокумента, Кратность, 1),
		Кратность);
	КонецЦикла;
	ТаблицаЗаказов.Свернуть("Заказ", "Всего, ВсегоРасч");
	ТаблицаЗаказов.Сортировать("Заказ Возр");
	
	// Заполнение расшифровки предоплаты.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПоставщикамиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|		РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|		РасчетыСПоставщикамиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ В (&Заказ)
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПоставщикамиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПоставщиками.Договор,
	|		ДвиженияДокументаРасчетыСПоставщиками.Документ,
	|		ДвиженияДокументаРасчетыСПоставщиками.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПоставщиками.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияДокументаРасчетыСПоставщиками
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПоставщиками.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПоставщиками.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПоставщиками.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПоставщиками.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПоставщиками.Договор = &Договор
	|		И ДвиженияДокументаРасчетыСПоставщиками.Заказ В(&Заказ)
	|		И ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПоставщикамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщикамиОстатки.Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата,
	|	РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПоставщикамиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаУчета / ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаРасчетов, 0) <> 0
	|				ТОГДА РасчетыСПоставщикамиОстатки.СуммаРасчетов
	|			ИНАЧЕ 1
	|		КОНЕЦ) * (РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКурс / РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКратность) КАК Курс,
	|	1 КАК Кратность,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКурс КАК КурсыВалютыДокументаКурс,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКратность КАК КурсыВалютыДокументаКратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПоставщикамиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|		РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * &КратностьВалютыДокумента / (&КурсВалютыДокумента * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		КурсыВалютыУчета.Курс КАК КурсыВалютыУчетаКурс,
	|		КурсыВалютыУчета.Кратность КАК КурсыВалютыУчетаКратность,
	|		&КурсВалютыДокумента КАК КурсыВалютыДокументаКурс,
	|		&КратностьВалютыДокумента КАК КурсыВалютыДокументаКратность
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПоставщикамиОстатки КАК РасчетыСПоставщикамиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПоставщикамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщикамиОстатки.Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата,
	|	РасчетыСПоставщикамиОстатки.ВалютаРасчетов,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКурс,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКратность,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКурс,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата");
	
	Запрос.УстановитьПараметр("Заказ", ТаблицаЗаказов.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Если Договор.ВалютаРасчетов = ВалютаДокумента Тогда
		Запрос.УстановитьПараметр("КурсВалютыДокумента", Курс);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", Кратность);
	Иначе
		Запрос.УстановитьПараметр("КурсВалютыДокумента", 1);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Предоплата.Очистить();
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		НайденнаяСтрока = ТаблицаЗаказов.Найти(ВыборкаРезультатаЗапроса.Заказ, "Заказ");
		
		Если НайденнаяСтрока.ВсегоРасч = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаРезультатаЗапроса.СуммаРасчетов <= НайденнаяСтрока.ВсегоРасч Тогда // сумма остатка меньше или равна чем осталось распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НайденнаяСтрока.ВсегоРасч = НайденнаяСтрока.ВсегоРасч - ВыборкаРезультатаЗапроса.СуммаРасчетов;
			
		Иначе // сумма остатка больше чем нужно распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НоваяСтрока.СуммаРасчетов = НайденнаяСтрока.ВсегоРасч;
			НоваяСтрока.СуммаПлатежа = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				НоваяСтрока.СуммаРасчетов,
				ВыборкаРезультатаЗапроса.Курс,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКурс,
				ВыборкаРезультатаЗапроса.Кратность,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКратность
			);
			НайденнаяСтрока.ВсегоРасч = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПредоплату()

Процедура ЗаполнитьПоПоступлению(ДанныеЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходнаяНакладная")
		И ДанныеЗаполнения.ВидОперации <> Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Корректировку можно вводить только по операции ""Поступление от поставщика"".'"),
		ДанныеЗаполнения);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ВидОперацииЗаполнения = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ВидОперацииЗаполнения = ?(ДанныеЗаполнения.Свойство("ВидОперации"), ДанныеЗаполнения.ВидОперации, Неопределено);
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснование = ДанныеЗаполнения;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапки(ВидОперацииЗаполнения);
	
	Запасы.Очистить();
	Расходы.Очистить();
	Предоплата.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса(ДанныеЗаполнения.Метаданные().Имя);
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	ВыборкаЗапасы = МассивРезультатов[1].Выбрать();
	Пока ВыборкаЗапасы.Следующий() Цикл
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы);
		
	КонецЦикла;
	
	ВыборкаРасходы = МассивРезультатов[2].Выбрать();
	Пока ВыборкаРасходы.Следующий() Цикл
		
		НоваяСтрока = Расходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы);
		
	КонецЦикла;
	
	ВыборкаПредоплата = МассивРезультатов[3].Выбрать();
	Пока ВыборкаПредоплата.Следующий() Цикл
		
		НоваяСтрока = Предоплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПредоплата);
		
	КонецЦикла;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОснование, "Проект") Тогда
		Проект = ДокументОснование.Проект;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапроса(Знач ИмяВидаДокумента)
	
	Результат =
	"ВЫБРАТЬ
	|	ПриходнаяНакладная.Ссылка КАК ДокументОснование,
	|	ПриходнаяНакладная.Организация КАК Организация,
	|	ПриходнаяНакладная.Контрагент КАК Контрагент,
	|	ПриходнаяНакладная.Договор КАК Договор,
	|	ПриходнаяНакладная.Заказ КАК Заказ,
	|	ПриходнаяНакладная.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПриходнаяНакладная.Ячейка КАК Ячейка,
	|	ПриходнаяНакладная.ВключатьРасходыВСебестоимость КАК ВключатьРасходыВСебестоимость,
	|	ПриходнаяНакладная.ВалютаДокумента КАК ВалютаДокумента,
	|	ПриходнаяНакладная.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ПриходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ПриходнаяНакладная.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ПриходнаяНакладная.Курс КАК Курс,
	|	ПриходнаяНакладная.Кратность КАК Кратность,
	|	ПриходнаяНакладная.СуммаДокумента КАК СуммаДокумента,
	|	ПриходнаяНакладная.ВидЦенКонтрагента КАК ВидЦенКонтрагента,
	|	ПриходнаяНакладная.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	ПриходнаяНакладная.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ПриходнаяНакладная.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ПриходнаяНакладная.Подразделение КАК Подразделение,
	|	ПриходнаяНакладная.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|ГДЕ
	|	ПриходнаяНакладная.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ПриходнаяНакладнаяЗапасы.НомерГТД КАК НомерГТД,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	ПриходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|	ПриходнаяНакладнаяЗапасы.Партия КАК Партия,
	|	ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПриходнаяНакладнаяЗапасы.Количество КАК Количество,
	|	ПриходнаяНакладнаяЗапасы.Цена КАК Цена,
	|	ПриходнаяНакладнаяЗапасы.Сумма КАК Сумма,
	|	ПриходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ПриходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ПриходнаяНакладнаяЗапасы.Заказ КАК Заказ,
	|	ПриходнаяНакладнаяЗапасы.Всего КАК Всего,
	|	ПриходнаяНакладнаяЗапасы.Себестоимость КАК Себестоимость,
	|	ПриходнаяНакладнаяЗапасы.СуммаРасходов КАК СуммаРасходов,
	|	ПриходнаяНакладнаяЗапасы.Содержание КАК Содержание,
	|	ПриходнаяНакладнаяЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПриходнаяНакладнаяЗапасы.Ячейка КАК Ячейка,
	|	ПриходнаяНакладнаяЗапасы.Количество КАК КоличествоДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.Цена КАК ЦенаДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.Сумма КАК СуммаДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДСДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.Всего КАК ВсегоДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.СуммаРасходов КАК СуммаРасходовДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.НомерСтроки КАК КлючСвязи,
	|	ПриходнаяНакладнаяЗапасы.Содержание КАК СодержаниеДоИзменения,
	|	ИСТИНА КАК ЕстьВДокументеПоступления,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.Ссылка) = ТИП(Документ.ПриходнаяНакладная)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.ТоварыДляПроизводства
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТоварыДляПроизводства
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяРасходы.Номенклатура КАК Номенклатура,
	|	ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПриходнаяНакладнаяРасходы.Количество КАК Количество,
	|	ПриходнаяНакладнаяРасходы.Цена КАК Цена,
	|	ПриходнаяНакладнаяРасходы.Сумма КАК Сумма,
	|	ПриходнаяНакладнаяРасходы.СтавкаНДС КАК СтавкаНДС,
	|	ПриходнаяНакладнаяРасходы.СуммаНДС КАК СуммаНДС,
	|	ПриходнаяНакладнаяРасходы.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ПриходнаяНакладнаяРасходы.Всего КАК Всего,
	|	ПриходнаяНакладнаяРасходы.Заказ КАК Заказ,
	|	ПриходнаяНакладнаяРасходы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПриходнаяНакладнаяРасходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПриходнаяНакладнаяРасходы.Содержание КАК Содержание,
	|	ПриходнаяНакладнаяРасходы.Количество КАК КоличествоДоИзменения,
	|	ПриходнаяНакладнаяРасходы.Цена КАК ЦенаДоИзменения,
	|	ПриходнаяНакладнаяРасходы.Сумма КАК СуммаДоИзменения,
	|	ПриходнаяНакладнаяРасходы.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	ПриходнаяНакладнаяРасходы.СуммаНДС КАК СуммаНДСДоИзменения,
	|	ПриходнаяНакладнаяРасходы.Всего КАК ВсегоДоИзменения,
	|	ПриходнаяНакладнаяРасходы.НомерСтроки КАК КлючСвязи,
	|	ПриходнаяНакладнаяРасходы.Содержание КАК СодержаниеДоИзменения,
	|	ИСТИНА КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ.ПриходнаяНакладная.Расходы КАК ПриходнаяНакладнаяРасходы
	|ГДЕ
	|	ПриходнаяНакладнаяРасходы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяПредоплата.Документ КАК Документ,
	|	ПриходнаяНакладнаяПредоплата.Заказ КАК Заказ,
	|	ПриходнаяНакладнаяПредоплата.СуммаРасчетов КАК СуммаРасчетов,
	|	ПриходнаяНакладнаяПредоплата.Курс КАК Курс,
	|	ПриходнаяНакладнаяПредоплата.Кратность КАК Кратность,
	|	ПриходнаяНакладнаяПредоплата.СуммаПлатежа КАК СуммаПлатежа,
	|	ПриходнаяНакладнаяПредоплата.СуммаРасчетов КАК СуммаРасчетовДоИзменения,
	|	ПриходнаяНакладнаяПредоплата.СуммаПлатежа КАК СуммаПлатежаДоИзменения,
	|	ИСТИНА КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ.ПриходнаяНакладная.Предоплата КАК ПриходнаяНакладнаяПредоплата
	|ГДЕ
	|	ПриходнаяНакладнаяПредоплата.Ссылка = &Ссылка";
	
	Результат = СтрЗаменить(Результат,
	"Документ.ПриходнаяНакладная КАК ПриходнаяНакладная",
	СтрШаблон("Документ.%1 КАК ПриходнаяНакладная", ИмяВидаДокумента));
	
	Результат = СтрЗаменить(Результат,
	"Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы",
	СтрШаблон("Документ.%1.Запасы КАК ПриходнаяНакладнаяЗапасы", ИмяВидаДокумента));
	
	Результат = СтрЗаменить(Результат,
	"Документ.ПриходнаяНакладная.Расходы КАК ПриходнаяНакладнаяРасходы",
	СтрШаблон("Документ.%1.Расходы КАК ПриходнаяНакладнаяРасходы", ИмяВидаДокумента));
	
	Результат = СтрЗаменить(Результат,
	"Документ.ПриходнаяНакладная.Предоплата КАК ПриходнаяНакладнаяПредоплата",
	СтрШаблон("Документ.%1.Предоплата КАК ПриходнаяНакладнаяПредоплата", ИмяВидаДокумента));
	
	Если ИмяВидаДокумента = "ПриходнаяНакладная" Тогда
		
		МодифицироватьТекстЗапросаПриходнаяНакладная(Результат);
		
	ИначеЕсли ИмяВидаДокумента = "КорректировкаПоступления" Тогда
		
		МодифицироватьТекстЗапросаКорректировкаПоступления(Результат);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Недопустимый вид документа: ""%1"".'"), ИмяВидаДокумента);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура МодифицироватьТекстЗапросаПриходнаяНакладная(Результат)
	
	Результат = СтрЗаменить(Результат,
	"ПриходнаяНакладнаяЗапасы.Количество КАК Количество,",
	"ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ПроверятьРасхожденияСВходящимДокументом
	|			И ПриходнаяНакладнаяЗапасы.Ссылка.ПринятьПоКолонке = ЗНАЧЕНИЕ(Перечисление.ПринятьПоКолонке.КоличествоПоВходящемуДокументу)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.КоличествоСправочно
	|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.Количество
	|	КОНЕЦ КАК Количество,");
	
	Результат = СтрЗаменить(Результат,
	"ПриходнаяНакладнаяЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,",
	"ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.СтруктурнаяЕдиница
	|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.Ссылка.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница,");
	
	Результат = СтрЗаменить(Результат,
	"ПриходнаяНакладнаяЗапасы.Ячейка КАК Ячейка,",
	"ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.Ячейка
	|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.Ссылка.Ячейка
	|	КОНЕЦ КАК Ячейка,");
	
КонецПроцедуры

Процедура МодифицироватьТекстЗапросаКорректировкаПоступления(Результат)
	
	Результат = СтрЗаменить(Результат,
	"	ПриходнаяНакладнаяЗапасы.Содержание КАК СодержаниеДоИзменения,",
	"	ПриходнаяНакладнаяЗапасы.Содержание КАК СодержаниеДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.КоличествоДоКорректировки,
	|	ПриходнаяНакладнаяЗапасы.ЦенаДоКорректировки,
	|	ПриходнаяНакладнаяЗапасы.СуммаДоКорректировки,
	|	ПриходнаяНакладнаяЗапасы.СуммаНДСДоКорректировки,
	|	ПриходнаяНакладнаяЗапасы.ВсегоДоКорректировки,
	|	ПриходнаяНакладнаяЗапасы.СуммаРасходовДоКорректировки,");
	
	Результат = СтрЗаменить(Результат,
	"	ПриходнаяНакладнаяРасходы.Содержание КАК СодержаниеДоИзменения,",
	"	ПриходнаяНакладнаяРасходы.Содержание КАК СодержаниеДоИзменения,
	|	ПриходнаяНакладнаяРасходы.КоличествоДоКорректировки,
	|	ПриходнаяНакладнаяРасходы.ЦенаДоКорректировки,
	|	ПриходнаяНакладнаяРасходы.СуммаДоКорректировки,
	|	ПриходнаяНакладнаяРасходы.СуммаНДСДоКорректировки,
	|	ПриходнаяНакладнаяРасходы.ВсегоДоКорректировки,");
	
	Результат = СтрЗаменить(Результат,
	"	ПриходнаяНакладнаяПредоплата.СуммаПлатежа КАК СуммаПлатежаДоИзменения,",
	"	ПриходнаяНакладнаяПредоплата.СуммаПлатежа КАК СуммаПлатежаДоИзменения,
	|	ПриходнаяНакладнаяПредоплата.СуммаРасчетовДоКорректировки,
	|	ПриходнаяНакладнаяПредоплата.СуммаПлатежаДоКорректировки,");

КонецПроцедуры

Процедура ЗаполнитьПоДопРасходам(ДанныеЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииЗаполнения = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ВидОперацииЗаполнения = ?(ДанныеЗаполнения.Свойство("ВидОперации"), ДанныеЗаполнения.ВидОперации, Неопределено);
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснование = ДанныеЗаполнения;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапки(ВидОперацииЗаполнения);
	
	Запасы.Очистить();
	Расходы.Очистить();
	Предоплата.Очистить();
	
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРасходы.Ссылка КАК ДокументОснование,
	|	ДополнительныеРасходы.Организация,
	|	ДополнительныеРасходы.Контрагент,
	|	ДополнительныеРасходы.Договор,
	|	ДополнительныеРасходы.ЗаказПоставщику КАК Заказ,
	|	ДополнительныеРасходы.СтруктурнаяЕдиница,
	|	ДополнительныеРасходы.ВалютаДокумента,
	|	ДополнительныеРасходы.НалогообложениеНДС,
	|	ДополнительныеРасходы.СуммаВключаетНДС,
	|	ДополнительныеРасходы.НДСВключатьВСтоимость,
	|	ДополнительныеРасходы.Курс,
	|	ДополнительныеРасходы.Кратность,
	|	ДополнительныеРасходы.СуммаДокумента,
	|	ДополнительныеРасходы.НомерВходящегоДокумента,
	|	ДополнительныеРасходы.ДатаВходящегоДокумента,
	|	ДополнительныеРасходы.Подразделение,
	|	ДополнительныеРасходы.Ответственный,
	|	ИСТИНА КАК ВключатьРасходыВСебестоимость
	|ИЗ
	|	Документ.ДополнительныеРасходы КАК ДополнительныеРасходы
	|ГДЕ
	|	ДополнительныеРасходы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРасходыЗапасы.Номенклатура,
	|	ДополнительныеРасходыЗапасы.Характеристика,
	|	ДополнительныеРасходыЗапасы.Партия,
	|	ДополнительныеРасходыЗапасы.ЕдиницаИзмерения,
	|	ДополнительныеРасходыЗапасы.Количество,
	|	ДополнительныеРасходыЗапасы.Цена,
	|	ДополнительныеРасходыЗапасы.Сумма,
	|	ДополнительныеРасходыЗапасы.СтавкаНДС,
	|	ДополнительныеРасходыЗапасы.СуммаНДС,
	|	ДополнительныеРасходыЗапасы.ЗаказПокупателя КАК Заказ,
	|	ДополнительныеРасходыЗапасы.Всего,
	|	ДополнительныеРасходыЗапасы.СуммаРасходов,
	|	ДополнительныеРасходыЗапасы.Количество КАК КоличествоДоИзменения,
	|	ДополнительныеРасходыЗапасы.Цена КАК ЦенаДоИзменения,
	|	ДополнительныеРасходыЗапасы.Сумма КАК СуммаДоИзменения,
	|	ДополнительныеРасходыЗапасы.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	ДополнительныеРасходыЗапасы.СуммаНДС КАК СуммаНДСДоИзменения,
	|	ДополнительныеРасходыЗапасы.Всего КАК ВсегоДоИзменения,
	|	ДополнительныеРасходыЗапасы.СуммаРасходов КАК СуммаРасходовДоИзменения,
	|	ИСТИНА КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ.ДополнительныеРасходы.Запасы КАК ДополнительныеРасходыЗапасы
	|ГДЕ
	|	ДополнительныеРасходыЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРасходыРасходы.Номенклатура,
	|	ДополнительныеРасходыРасходы.ЕдиницаИзмерения,
	|	ДополнительныеРасходыРасходы.Количество,
	|	ДополнительныеРасходыРасходы.Цена,
	|	ДополнительныеРасходыРасходы.Сумма,
	|	ДополнительныеРасходыРасходы.СтавкаНДС,
	|	ДополнительныеРасходыРасходы.СуммаНДС,
	|	ДополнительныеРасходыРасходы.Всего,
	|	ДополнительныеРасходыРасходы.Количество КАК КоличествоДоИзменения,
	|	ДополнительныеРасходыРасходы.Цена КАК ЦенаДоИзменения,
	|	ДополнительныеРасходыРасходы.Сумма КАК СуммаДоИзменения,
	|	ДополнительныеРасходыРасходы.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	ДополнительныеРасходыРасходы.СуммаНДС КАК СуммаНДСДоИзменения,
	|	ДополнительныеРасходыРасходы.Всего КАК ВсегоДоИзменения,
	|	ИСТИНА КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ.ДополнительныеРасходы.Расходы КАК ДополнительныеРасходыРасходы
	|ГДЕ
	|	ДополнительныеРасходыРасходы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРасходыПредоплата.Документ,
	|	ДополнительныеРасходыПредоплата.СуммаРасчетов,
	|	ДополнительныеРасходыПредоплата.Курс,
	|	ДополнительныеРасходыПредоплата.Кратность,
	|	ДополнительныеРасходыПредоплата.СуммаПлатежа,
	|	ДополнительныеРасходыПредоплата.СуммаРасчетов КАК СуммаРасчетовДоИзменения,
	|	ДополнительныеРасходыПредоплата.СуммаПлатежа КАК СуммаПлатежаДоИзменения,
	|	ИСТИНА КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ.ДополнительныеРасходы.Предоплата КАК ДополнительныеРасходыПредоплата
	|ГДЕ
	|	ДополнительныеРасходыПредоплата.Ссылка = &Ссылка";

	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	ВыборкаЗапасы = МассивРезультатов[1].Выбрать();
	Пока ВыборкаЗапасы.Следующий() Цикл
	
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы);
	
	КонецЦикла;
	
	ВыборкаРасходы = МассивРезультатов[2].Выбрать();
	Пока ВыборкаРасходы.Следующий() Цикл
	
		НоваяСтрока = Расходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы);
	
	КонецЦикла;
	
	ВыборкаПредоплата = МассивРезультатов[3].Выбрать();
	Пока ВыборкаПредоплата.Следующий() Цикл
	
		НоваяСтрока = Предоплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПредоплата);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваШапки(ВидОперацииЗаполнения = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИсправления = Документы.КорректировкаПоступления.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		?(ВидОперацииЗаполнения <> Неопределено, ВидОперацииЗаполнения, ВидОперации), Дата, ДокументОснование);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыИсправления);

	ДокументПоступленияСсылка = Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументОснование, Истина);
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступленияСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументОснование, Ложь)) = Тип("ДокументСсылка.КорректировкаПоступления") 
		И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументПоступления = Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументОснование, Ложь);
		Иначе	
			ИсправляемыйДокументПоступления = Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументОснование, Истина);
		КонецЕсли;	
	Иначе
		ИсправляемыйДокументПоступления = Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументОснование, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Распределяет затраты по количеству.
//
Процедура РаспределитьТабЧастьРасходыПоКоличеству() Экспорт
	
	ИсхСумма = 0;
	БазаРаспределенияКоличество = Запасы.Итог("Количество");
	ВсегоРасходы = Расходы.Итог("Всего");
	Для каждого СтрокаЗапасы Из Запасы Цикл
		
		СтрокаЗапасы.СуммаРасходов = ?(БазаРаспределенияКоличество <> 0, Окр((ВсегоРасходы - ИсхСумма) * СтрокаЗапасы.Количество / БазаРаспределенияКоличество, 2, 1),0);
		БазаРаспределенияКоличество = БазаРаспределенияКоличество - СтрокаЗапасы.Количество;
		ИсхСумма = ИсхСумма + СтрокаЗапасы.СуммаРасходов;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоКоличеству()

// Распределяет затраты по сумме.
//
Процедура РаспределитьТабЧастьРасходыПоСумме() Экспорт
	
	ИсхСумма = 0;
	БазаРаспределенияСумма = Запасы.Итог("Всего");
	ВсегоРасходы = Расходы.Итог("Всего");
	Для каждого СтрокаЗапасы Из Запасы Цикл
		
		СтрокаЗапасы.СуммаРасходов = ?(БазаРаспределенияСумма <> 0, Окр((ВсегоРасходы - ИсхСумма) * СтрокаЗапасы.Всего / БазаРаспределенияСумма, 2, 1),0);
		БазаРаспределенияСумма = БазаРаспределенияСумма - СтрокаЗапасы.Всего;
		ИсхСумма = ИсхСумма + СтрокаЗапасы.СуммаРасходов;
		
	КонецЦикла;
	
КонецПроцедуры

// Отменяет проведение подчиненного счета-фактуры (полученного)
//
Процедура КонтрольПодчиненногоСчетаФактуры()
	
	СтруктураСчетаФактуры = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Ссылка, Истина);
	Если СтруктураСчетаФактуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СчетФактура = СтруктураСчетаФактуры.Ссылка;
	Если Не СчетФактура.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеТекущегоДокумента = СтрШаблон(НСтр("ru = '""Приходная накладная № %1 от %2""'"),
		Номер, Формат(Дата, "ДЛФ=D"));
		
	ПредставлениеСчетФактуры = СтрШаблон(НСтр("ru = '""Счет-фактура (полученный) № %1 от %2""'"),
		СтруктураСчетаФактуры.Номер, Формат(СтруктураСчетаФактуры.Дата, "ДЛФ=D"));
		
	ТекстСообщения = СтрШаблон(НСтр("ru = 'В связи с отсутствием движений у документа %1 отменяется проведение %2.'"),
		ПредставлениеТекущегоДокумента, ПредставлениеСчетФактуры);
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
	СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
	СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

// Процедура проверяет наличие розничной цены.
//
Процедура ПроверитьНаличиеРозничнойЦены(Отказ)
	
	Если СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
		ИЛИ СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("ТаблицаДокумента", Запасы);
		Запрос.УстановитьПараметр("РозничныйВидЦен", СтруктурнаяЕдиница.РозничныйВидЦен);
		Запрос.УстановитьПараметр("СписокНоменклатура", Запасы.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("СписокХарактеристика", Запасы.ВыгрузитьКолонку("Характеристика"));
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Характеристика КАК Характеристика,
		|	ТаблицаДокумента.Партия КАК Партия
		|ПОМЕСТИТЬ ПеремещениеЗапасовЗапасы
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПеремещениеЗапасовЗапасы.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕ(ПеремещениеЗапасовЗапасы.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ПеремещениеЗапасовЗапасы.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ПеремещениеЗапасовЗапасы.Партия) КАК ПартияПредставление
		|ИЗ
		|	ПеремещениеЗапасовЗапасы КАК ПеремещениеЗапасовЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				ВидЦен = &РозничныйВидЦен
		|					И Номенклатура В (&СписокНоменклатура)
		|					И Характеристика В (&СписокХарактеристика)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ПеремещениеЗапасовЗапасы.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ПеремещениеЗапасовЗапасы.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|ГДЕ
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) = 0";
		
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Для номенклатуры %1 в строке %2 списка ""Запасы"" не установлена розничная цена.'"),
				Справочники.Номенклатура.Представление(ВыборкаРезультатаЗапроса.НоменклатураПредставление,
					ВыборкаРезультатаЗапроса.ХарактеристикаПредставление, ВыборкаРезультатаЗапроса.ПартияПредставление),
				ВыборкаРезультатаЗапроса.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы",
				ВыборкаРезультатаЗапроса.НомерСтроки, "Номенклатура");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаличиеРозничнойЦены()

Процедура ОбработатьСуммыДоКорректировки()
	
	ИсправлениеКорректировки = ЗначениеЗаполнено(ИсправляемыйДокументПоступления)
	И (ТипЗнч(ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления"))
	И (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
	ИсправляемыйДокументПоступления, "ВидОперации") = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("КоличествоДоИзменения"), "КоличествоДоКорректировки");
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("ЦенаДоИзменения"), "ЦенаДоКорректировки");
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("СуммаДоИзменения"), "СуммаДоКорректировки");
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("СуммаНДСДоИзменения"), "СуммаНДСДоКорректировки");
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("ВсегоДоИзменения"), "ВсегоДоКорректировки");
		
		Расходы.ЗагрузитьКолонку(Расходы.ВыгрузитьКолонку("КоличествоДоИзменения"), "КоличествоДоКорректировки");
		Расходы.ЗагрузитьКолонку(Расходы.ВыгрузитьКолонку("ЦенаДоИзменения"), "ЦенаДоКорректировки");
		Расходы.ЗагрузитьКолонку(Расходы.ВыгрузитьКолонку("СуммаДоИзменения"), "СуммаДоКорректировки");
		Расходы.ЗагрузитьКолонку(Расходы.ВыгрузитьКолонку("СуммаНДСДоИзменения"), "СуммаНДСДоКорректировки");
		Расходы.ЗагрузитьКолонку(Расходы.ВыгрузитьКолонку("ВсегоДоИзменения"), "ВсегоДоКорректировки");
		
		Предоплата.ЗагрузитьКолонку(Предоплата.ВыгрузитьКолонку("СуммаРасчетовДоИзменения"), "СуммаРасчетовДоКорректировки");
		Предоплата.ЗагрузитьКолонку(Предоплата.ВыгрузитьКолонку("СуммаПлатежаДоИзменения"), "СуммаПлатежаДоКорректировки");
		
	ИначеЕсли Не ИсправлениеКорректировки Тогда
		
		Для Каждого СтрокаТаблицы Из Запасы Цикл
			СтрокаТаблицы.КоличествоДоКорректировки = 0;
			СтрокаТаблицы.ЦенаДоКорректировки       = 0;
			СтрокаТаблицы.СуммаДоКорректировки      = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
			СтрокаТаблицы.ВсегоДоКорректировки      = 0;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из Расходы Цикл
			СтрокаТаблицы.КоличествоДоКорректировки = 0;
			СтрокаТаблицы.ЦенаДоКорректировки       = 0;
			СтрокаТаблицы.СуммаДоКорректировки      = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
			СтрокаТаблицы.ВсегоДоКорректировки      = 0;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из Предоплата Цикл
			СтрокаТаблицы.СуммаРасчетовДоКорректировки = 0;
			СтрокаТаблицы.СуммаПлатежаДоКорректировки  = 0;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли