#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Обработчик заполнения на основании документа ПриходныйОрдер.
//
// Параметры:
//	ДокументСсылкаПриходныйОрдер - ДокументСсылка.ПриходныйОрдер - Плановый платеж
//	
Процедура ЗаполнитьПоПриходномуОрдеру(ДокументСсылкаПриходныйОрдер) Экспорт
	
	Организация = ДокументСсылкаПриходныйОрдер.Организация;
	ДокументОснование = ДокументСсылкаПриходныйОрдер.Ссылка;
	Запасы.Очистить();
	
	Для каждого ТекСтрокаЗапасы Из ДокументСсылкаПриходныйОрдер.Запасы Цикл
		
		НоваяСтрока = Запасы.Добавить();
		НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаЗапасы.ЕдиницаИзмерения;
		НоваяСтрока.Количество = ТекСтрокаЗапасы.Количество;
		НоваяСтрока.Номенклатура = ТекСтрокаЗапасы.Номенклатура;
		НоваяСтрока.Партия = ТекСтрокаЗапасы.Партия;
		НоваяСтрока.Характеристика = ТекСтрокаЗапасы.Характеристика;
		НоваяСтрока.СтруктурнаяЕдиница = ДокументСсылкаПриходныйОрдер.СтруктурнаяЕдиница;
		НоваяСтрока.Ячейка = ДокументСсылкаПриходныйОрдер.Ячейка;
		НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрока.Номенклатура.ВидСтавкиНДС, Дата);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоПриходномуОрдеру()

// Обработчик ввода на основании документа РасходИзКассы.
//
// Параметры:
//	ДокументСсылкаРасходИзКассы - ДокументСсылка.РасходИзКассы.
//	
Процедура ЗаполнитьПоРасходуИзКассы(ДокументСсылкаРасходИзКассы) Экспорт
	
	Если ДокументСсылкаРасходИзКассы.ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести Авансовый отчет на основании расхода из кассы с этим видом операции!'");
	КонецЕсли;
	
	Организация = ДокументСсылкаРасходИзКассы.Организация;
	ДокументОснование = ДокументСсылкаРасходИзКассы.Ссылка;
	Сотрудник = ДокументСсылкаРасходИзКассы.Подотчетник;
	ВалютаДокумента = ДокументСсылкаРасходИзКассы.ВалютаДенежныхСредств;
	
	Если НЕ ЗначениеЗаполнено(ПодписьБухгалтера) Тогда
		
		ПодписьБухгалтера = ДокументСсылкаРасходИзКассы.Касса.ПодписьКассира;
		
	КонецЕсли;
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВалютаДокумента));
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	ВыданныеАвансы.Очистить();
	НоваяСтрока = ВыданныеАвансы.Добавить();
	НоваяСтрока.Документ = ДокументСсылкаРасходИзКассы.Ссылка;
	НоваяСтрока.Сумма = ДокументСсылкаРасходИзКассы.СуммаДокумента;
	
	Проект = ДокументСсылкаРасходИзКассы.Проект;
	
КонецПроцедуры // ЗаполнитьПоРасходуИзКассы()

// Обработчик заполнения на основании документа РасходСоСчета.
//
// Параметры:
//	ДокументСсылкаРасходСоСчета - ДокументСсылка.РасходСоСчета.
//	
Процедура ЗаполнитьПоРасходуСоСчета(ДокументСсылкаРасходСоСчета) Экспорт
	
	Если ДокументСсылкаРасходСоСчета.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести Авансовый отчет на основании расхода со счета с этим видом операции!'");
	КонецЕсли;
	
	Организация = ДокументСсылкаРасходСоСчета.Организация;
	ДокументОснование = ДокументСсылкаРасходСоСчета.Ссылка;
	Сотрудник = ДокументСсылкаРасходСоСчета.Подотчетник;
	ВалютаДокумента = ДокументСсылкаРасходСоСчета.ВалютаДенежныхСредств;
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВалютаДокумента));
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	ВыданныеАвансы.Очистить();
	НоваяСтрока = ВыданныеАвансы.Добавить();
	НоваяСтрока.Документ = ДокументСсылкаРасходСоСчета.Ссылка;
	НоваяСтрока.Сумма = ДокументСсылкаРасходСоСчета.СуммаДокумента;
	
	Проект = ДокументСсылкаРасходСоСчета.Проект;
	
КонецПроцедуры // ЗаполнитьПоРасходуСоСчета()

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходныйОрдер")] = "ЗаполнитьПоПриходномуОрдеру";
	СтратегияЗаполнения[Тип("ДокументСсылка.РасходИзКассы")] = "ЗаполнитьПоРасходуИзКассы";
	СтратегияЗаполнения[Тип("ДокументСсылка.РасходСоСчета")] = "ЗаполнитьПоРасходуСоСчета";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ИзрасходованоИтог = ВыданныеАвансы.Итог("Сумма");
	ЗапасыИтог = Запасы.Итог("Всего");
	РасходыИтог = Расходы.Итог("Всего");
	ОплатыИтог = Оплаты.Итог("СуммаПлатежа");
	
	Если ИзрасходованоИтог > ЗапасыИтог + РасходыИтог + ОплатыИтог Тогда
		ТекстСообщения = НСтр("ru = 'Израсходованная сумма авансов превышает сумму по документу.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ВыданныеАвансы[0].Сумма", , Отказ);
	КонецЕсли;
	
	Для Каждого СтрокаОплаты Из Оплаты Цикл
		Если СтрокаОплаты.Контрагент.ВестиРасчетыПоДокументам
			И Не СтрокаОплаты.ПризнакАванса
			И Не ЗначениеЗаполнено(СтрокаОплаты.Документ) Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Не заполнена колонка ""Документ расчетов"" в строке %1 списка ""Оплаты"".'"),
				СтрокаОплаты.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Оплаты", СтрокаОплаты.НомерСтроки,
				"Документ");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаРасходы Из Расходы Цикл
		
		Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям")
			И (СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.НезавершенноеПроизводство
			Или СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты
			Или СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Доходы
			Или СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Расходы)
			И Не ЗначениеЗаполнено(СтрокаРасходы.СтруктурнаяЕдиница) Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Для номенклатуры ""%1"" указанной в строке %2 списка ""Расходы"", должен быть заполнен реквизит ""Подразделение"".'"),
				СтрокаРасходы.Номенклатура, СтрокаРасходы.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Расходы",
				СтрокаРасходы.НомерСтроки, "СтруктурнаяЕдиница");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего") + Расходы.Итог("Всего") + Оплаты.Итог("СуммаПлатежа");
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Получить() Тогда
		
		Для каждого СтрокаРасходы Из Расходы Цикл
			
			Если СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
				
				СтрокаРасходы.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
				
			Иначе
				
				СтрокаРасходы.НаправлениеДеятельности = Неопределено;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Оплаты Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Контрагент)
		И НЕ СтрокаТЧ.Контрагент.ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(СтрокаТЧ.Договор) Тогда
			СтрокаТЧ.Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(СтрокаТЧ.Контрагент);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
		ОсновнойСклад = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			Если СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновнойСклад Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновнойСклад;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.АвансовыйОтчет.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыКПоступлениюНаСклады", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыНаСкладах", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПодотчетниками", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПоставщиками", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетод", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыНераспределенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыОтложенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Закупки", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаСчетовИЗаказов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПлатежныйКалендарь", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Управленческий", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаДокументов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗакупкиДляКУДиР", ТаблицыДляДвижений, Движения, Отказ);
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.АвансовыйОтчет.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.АвансовыйОтчет.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Подчиненный счет-фактура (полученный)
	Если НЕ Отказ Тогда
		
		СчетаФактурыУНФ.ОтменитьПроведениеПодчиненногоСчетаФактуры(Ссылка, Номер, Дата, ДополнительныеСвойства, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СчетаФактурыУНФ.ПриЗаписиДокументаОснованияСчетаФактуры(Ссылка, ДополнительныеСвойства, Истина);
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли