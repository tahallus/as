
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьДатыНачалаОкончанияНаФорме(ЭтотОбъект);
		ТегированиеОбъектов.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект, Объект);
		Действие = "Создание";
	Иначе
		ЗаполнитьЗначенияУстановленногоНапоминания();
		Действие = "Изменение";
	КонецЕсли;
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	ЗаполнитьВыборДатыНачала();
	ЗаполнитьВыборОтветственногоИзОснования();
	ЗаполнитьСписокОснований();
	
	Элементы.Автор.Видимость = ЗначениеЗаполнено(Объект.Автор)
		И Объект.Автор <> Пользователи.АвторизованныйПользователь();
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьОтображениеУстановленногоНапоминания();
	ЗаполнитьОснованиеНаФорме();
	УправлениеФормой();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекущийЭлемент = Элементы.Описание;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьДатыНачалаОкончанияНаФорме(ЭтотОбъект);
	ТегированиеОбъектов.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект, Объект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТегированиеОбъектов.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьАвтоматическоеНапоминаниеЕслиНеобходимо();
	ЗаписатьДанныеЗадачПоОснованию(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗадачаСотрудника", Объект.Ссылка, ЭтотОбъект);
	ПоказатьОповещениеПослеЗаписиЗадачи();	
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ЗакрыватьПриВыборе Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		Для Каждого ВыбранноеОснование Из ВыбранноеЗначение Цикл
			НоваяСтрока = СписокОснований.Добавить();
			НоваяСтрока.Основание = ВыбранноеОснование;
		КонецЦикла;
	Иначе
		НоваяСтрока = СписокОснований.Добавить();
		НоваяСтрока.Основание = ВыбранноеЗначение;
	КонецЕсли;
		
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыполненаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ВремяНачала = Неопределено;
	КонецЕсли;
	СместитьДатуОкончанияАвтоматическиПриИзменении(Элемент);
	ЗаполнитьДатыНачалаОкончанияВОбъекте(ЭтотОбъект);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВремяНачала = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ВремяНачала) И Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ТекущаяДата;
	КонецЕсли;
	СместитьДатуОкончанияАвтоматическиПриИзменении(Элемент);
	ЗаполнитьДатыНачалаОкончанияВОбъекте(ЭтотОбъект);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПриИзменении(Элемент)
	
	ЧасВСекундах = 3600;
	
	Если ЗначениеЗаполнено(ВремяОкончания) И Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ТекущаяДата;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВремяОкончания) И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = ДатаНачала;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВремяНачала) Тогда
		ВремяНачала = ВремяОкончания - ЧасВСекундах;
	КонецЕсли;
	СместитьДатуНачалаАвтоматическиПриИзменении(Элемент);
	ЗаполнитьДатыНачалаОкончанияВОбъекте(ЭтотОбъект);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ЧасВСекундах = 3600;
	
	Если ЗначениеЗаполнено(ДатаОкончания) И Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ТекущаяДата;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаОкончания) И ЗначениеЗаполнено(ВремяНачала) И Не ЗначениеЗаполнено(ВремяОкончания) Тогда
		ВремяОкончания = ВремяНачала + ЧасВСекундах;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		СместитьДатуНачалаАвтоматическиПриИзменении(Элемент);
	КонецЕсли;
	ЗаполнитьДатыНачалаОкончанияВОбъекте(ЭтотОбъект);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура СместитьДатуНачалаАвтоматическиПриИзменении(Элемент)
	
	ЗависимыеЭлементы = Новый Соответствие;
	ЗависимыеЭлементы.Вставить("ДатаОкончания", "ДатаНачала");
	ЗависимыеЭлементы.Вставить("ВремяОкончания", "ВремяНачала");
	
	ИзмененныйРеквизит = Элемент.Имя;
	ИзменяемыйРеквизит = ЗависимыеЭлементы.Получить(ИзмененныйРеквизит);
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект[ИзменяемыйРеквизит]) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект[ИзмененныйРеквизит]) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИзмененныйРеквизит] <= ЭтотОбъект[ИзменяемыйРеквизит] Тогда
		ЭтотОбъект[ИзменяемыйРеквизит] = ЭтотОбъект[ИзмененныйРеквизит] - (Объект.ДатаОкончания - Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СместитьДатуОкончанияАвтоматическиПриИзменении(Элемент)
	
	ЗависимыеЭлементы = Новый Соответствие;
	ЗависимыеЭлементы.Вставить("ДатаНачала", "ДатаОкончания");
	ЗависимыеЭлементы.Вставить("ВремяНачала", "ВремяОкончания");
	
	ИзмененныйРеквизит = Элемент.Имя;
	ИзменяемыйРеквизит = ЗависимыеЭлементы.Получить(ИзмененныйРеквизит);
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект[ИзменяемыйРеквизит]) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИзмененныйРеквизит] >= ЭтотОбъект[ИзменяемыйРеквизит] Тогда
		ЭтотОбъект[ИзменяемыйРеквизит] = ЭтотОбъект[ИзмененныйРеквизит] + (Объект.ДатаОкончания - Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапоминаниеНажатие(Элемент, СтандартнаяОбработка)
	
	ВыбратьНапоминание();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаТегаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПолеВводаТегаОбработкаВыбораСервер(Элемент.Имя, ВыбранноеЗначение, СтандартнаяОбработка);
	
	ТекущийЭлемент = Элементы.ОблакоТегов;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаТегаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПолеВводаТегаОкончаниеВводаТекстаСервер(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
	ТекущийЭлемент = Элементы.ОблакоТегов;
	
КонецПроцедуры

&НаКлиенте
Процедура ОблакоТеговОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОблакоТеговОбработкаНавигационнойСсылкиСервер(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ЗаполнитьКалендарьПоОтветственному();
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриИзменении(Элемент)
	ЗаполнитьКолонкуКалендаря();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОчиститьСписокОснованийНажатие(Элемент)
	СписокОснований.Очистить();
	ОчиститьОснованиеЗадачи();
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодобратьНажатие(Элемент)
	ВыбратьТипОснованияЗадачиИзСписка(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокОснованийПослеУдаления(Элемент)
	УправлениеФормой();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьДатуИзКалендаря(Команда)
	
	НачатьВыборДатыИзКалендаря();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДопРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗадачаСотрудника"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаЗаписатьИЗакрытьЗадачу(Команда)
	Записать();
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ФормаЗаписатьЗадачу(Команда)
	Записать();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПоказатьОповещениеПослеЗаписиЗадачи()
	
	Если СписокОснований.Количество() <> 0 Тогда
		
		ШаблонСтроки = НСтр("ru=';%1 задача;;%1 задачи;%1 задач;%1 задачи'");
		ПоказатьОповещениеПользователя(СтрШаблон(НСтр("ru='%1: '"),Действие),,
			СтрШаблон(НСтр("ru='%1 '"), СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонСтроки,СписокОснований.Количество()))
			,БиблиотекаКартинок.Информация32,,СтатусОповещенияПользователя.Информация);
	Иначе
		ПоказатьОповещениеПользователя(СтрШаблон(НСтр("ru='%1:'"),Действие),ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			СтрШаблон(НСтр("ru='%1 '"), Строка(Объект.Ссылка))
			,БиблиотекаКартинок.Информация32,,СтатусОповещенияПользователя.Информация);
			
	КонецЕсли;
		
	Действие = "Изменение";
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеЗадачПоОснованию(ТекущийОбъект)
	
	Для Каждого Основание Из СписокОснований Цикл
		
		Если Основание.Основание = ТекущийОбъект.Основание Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Основание.Задача) Тогда
			НоваяЗадача = Документы.ЗадачаСотрудника.СоздатьДокумент();
			НоваяЗадача.Заполнить(Неопределено);
			Действие = "Создание";
		Иначе
			НоваяЗадача = Основание.Задача.ПолучитьОбъект();
			Действие = "Изменение";
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(НоваяЗадача,ТекущийОбъект,,"Ссылка,Номер,Дата,ПометкаУдаления,Проведен");
		НоваяЗадача.Основание = Основание.Основание;
		НоваяЗадача.ОснованиеСтроковаяСсылка = Неопределено;
		НоваяЗадача.ОснованиеПредставление = Неопределено;
		
		НоваяЗадача.Теги.Очистить();
		НоваяЗадача.Теги.Загрузить(ТекущийОбъект.Теги.Выгрузить());		
		НоваяЗадача.Записать();
		
		Основание.Задача = НоваяЗадача.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	ФорматПредставленияПустогоВремени = "ДП=00:00";
	
	Элементы.Результат.Видимость = Объект.Выполнена;
	Элементы.Напоминание.Видимость = ЗначениеЗаполнено(ВремяНачала) ИЛИ ЗначениеЗаполнено(ВремяОкончания);
	Если ЗначениеЗаполнено(ВремяОкончания) Тогда
		Элементы.ВремяНачала.ФорматРедактирования = ДобавитьФорматПредставленияВремени(
			Элементы.ВремяОкончания.ФорматРедактирования, "ДП", "ДП=00:00");
	Иначе
		Элементы.ВремяНачала.ФорматРедактирования = Элементы.ВремяОкончания.ФорматРедактирования;
	КонецЕсли;
	
	Элементы.ГруппаМассоваяПостановкаЗадачи.Видимость = СписокОснований.Количество() > 0;
	Элементы.ОснованиеВыборПодбор.Видимость = СписокОснований.Количество() = 0;
	Элементы.ДекорацияПодобрать.Видимость = НЕ ЗначениеЗаполнено(Объект.Основание) 
		И НЕ ЗначениеЗаполнено(Объект.ОснованиеСтроковаяСсылка);
	Элементы.ГруппаСписокОснований.Заголовок = ЗаголовокГруппыОснований();
	Элементы.Подсказка.Заголовок = ЗаголовокПодсказки();
	
	Если Элементы.ДекорацияПодобрать.Видимость Тогда
		Элементы.ОснованиеСтрокой.МаксимальнаяШирина = 10;
	Иначе
		Элементы.ОснованиеСтрокой.МаксимальнаяШирина = 36;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатыНачалаОкончанияНаФорме(Форма)
	
	Форма.ДатаНачала = Форма.Объект.ДатаНачала;
	Форма.ВремяНачала = Форма.Объект.ДатаНачала;
	Форма.ДатаОкончания = Форма.Объект.ДатаОкончания;
	Форма.ВремяОкончания = Форма.Объект.ДатаОкончания;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатыНачалаОкончанияВОбъекте(Форма)
	
	Форма.Объект.ДатаНачала = Неопределено;
	Форма.Объект.ДатаОкончания = Неопределено;
	
	Если ЗначениеЗаполнено(Форма.ДатаНачала) Тогда
		Форма.Объект.ДатаНачала = Форма.ДатаНачала;
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.ВремяНачала) Тогда
		Форма.Объект.ДатаНачала = Форма.Объект.ДатаНачала + (Форма.ВремяНачала - НачалоДня(Форма.ВремяНачала));
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.ДатаОкончания) Тогда
		Форма.Объект.ДатаОкончания = Форма.ДатаОкончания;
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.ВремяОкончания) Тогда
		Форма.Объект.ДатаОкончания = Форма.Объект.ДатаОкончания + (Форма.ВремяОкончания - НачалоДня(Форма.ВремяОкончания));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаголовокГруппыОснований()
	ПараметрыПредмета = "основания, оснований, оснований";
	ШаблонСтроки = НСтр("ru=';выбрано %1 основание;;выбрано %1 основания;выбрано %1 оснований;выбрано %1 основания'");
	СтрокаЗаголовка = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонСтроки,СписокОснований.Количество());
	Возврат СтрокаЗаголовка;
КонецФункции

#Область ДатыЗадачи

&НаКлиенте
Процедура НачатьВыборДатыИзКалендаря()
	
	Продолжение = Новый ОписаниеОповещения("ЗаполнитьДатуЗадачиИзКалендаря", ЭтотОбъект);
	
	ПараметрыВыбораВремениЗадачи = Новый Структура;
	ПараметрыВыбораВремениЗадачи.Вставить("ТекстНовойЗадачи", Объект.Описание);
	ПараметрыВыбораВремениЗадачи.Вставить("Календарь", Объект.Календарь);
	ПараметрыВыбораВремениЗадачи.Вставить("ДатаНачала", Объект.ДатаНачала);
	ПараметрыВыбораВремениЗадачи.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборВремениЗадачи", ПараметрыВыбораВремениЗадачи);
	ПараметрыФормы.Вставить("ОписаниеНовойЗадачи", Объект);
	ОткрытьФорму("Справочник.ЗаписиКалендаряСотрудника.Форма.Календарь", ПараметрыФормы,,,,,
		Продолжение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуЗадачиИзКалендаря(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПриРедактированииСохраняемыхДанных();
	ЗаполнитьЗначенияСвойств(Объект, Результат);
	ЗаполнитьДатыНачалаОкончанияНаФорме(ЭтотОбъект);
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыборДатыНачала()
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	НачалоДня = НачалоДня(ТекущаяДатаСеанса);
	
	КонецДняВСекундах = 60 * 60 * 18;
	ДеньВСекундах = 60 * 60 * 24;
	
	ДатыДляВыбора = Новый СписокЗначений;
	ДатыДляВыбора.Добавить(НачалоДня, НСтр("ru='Сегодня'"));
	ДатыДляВыбора.Добавить(НачалоДня + КонецДняВСекундах, НСтр("ru='В конце дня'"));
	ДатыДляВыбора.Добавить(НачалоДня + ДеньВСекундах, НСтр("ru='Завтра'"));
	ДатыДляВыбора.Добавить(НачалоДня + (5 - ДеньНедели(НачалоДня)) * ДеньВСекундах, НСтр("ru='До конца недели'"));
	ДатыДляВыбора.Добавить(НачалоНедели(НачалоДня) + 7 * ДеньВСекундах, НСтр("ru='На следующей неделе'"));
	ДатыДляВыбора.Добавить(ДобавитьМесяц(НачалоДня, 1), НСтр("ru='Через месяц'"));
	
	Элементы.ДатаНачала.СписокВыбора.Очистить();
	Для каждого ДатаВыбора Из ДатыДляВыбора Цикл
		Элементы.ДатаНачала.СписокВыбора.Добавить(ДатаВыбора.Значение, ПредставлениеДаты(ДатаВыбора.Значение, ДатаВыбора.Представление));
	КонецЦикла;
	
	СобытияУНФКлиентСервер.ЗаполнитьСписокВыбораВремени(Элементы.ВремяНачала);
	СобытияУНФКлиентСервер.ЗаполнитьСписокВыбораВремени(Элементы.ВремяОкончания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеДаты(Дата, ДатаТекстом)
	
	ПредставленияДня = Новый Массив;
	Если НачалоДня(Дата) <> НачалоДня(ТекущаяДатаСеанса()) Тогда
		ПредставленияДня.Добавить(Формат(Дата, "ДФ=ддд"));
	КонецЕсли;
	Если Дата - НачалоДня(Дата) <> 0 Тогда
		Если ПредставленияДня.Количество() = 0 Тогда
			ПредставленияДня.Добавить(" ");
		КонецЕсли;
		ПредставленияДня.Добавить(Формат(Дата, "ДФ=ЧЧ:ММ"));
	КонецЕсли;
	
	КомпонентыСтроки = Новый Массив;
	КомпонентыСтроки.Добавить(ДатаТекстом);
	КомпонентыСтроки.Добавить("   ");
	КомпонентыСтроки.Добавить(Новый ФорматированнаяСтрока(ПредставленияДня,, Метаданные.ЭлементыСтиля.ЦветНедоступногоТекста.Значение));
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыСтроки);
	
КонецФункции

#КонецОбласти

#Область АвтоматическоеНапоминание

&НаКлиенте
Процедура ЗаполнитьОтображениеУстановленногоНапоминания()
	
	Если НЕ СоздатьАвтоматическоеНапоминание Тогда
		Напоминание = НСтр("ru='Не напоминать'");
		Возврат;
	КонецЕсли;
	
	СтрокаНапоминание = СписокНапоминаний().НайтиПоЗначению(СекундДоДатыНачалаДляНапоминания);
	Если СтрокаНапоминание <> Неопределено Тогда
		Напоминание = СтрокаНапоминание.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокНапоминаний()
	
	СписокНапоминаний = Новый СписокЗначений;
	СписокНапоминаний.Добавить(Неопределено, НСтр("ru='Не напоминать'"));
	СписокНапоминаний.Добавить(0, НСтр("ru='При наступлении'"));
	СписокНапоминаний.Добавить(300, НСтр("ru='За 5 минут'"));
	СписокНапоминаний.Добавить(900, НСтр("ru='За 15 минут'"));
	СписокНапоминаний.Добавить(1800, НСтр("ru='За 30 минут'"));
	СписокНапоминаний.Добавить(3600, НСтр("ru='За час'"));
	Возврат СписокНапоминаний;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьНапоминание()
	
	Продолжение = Новый ОписаниеОповещения("ПослеВыбораНапоминания", ЭтотОбъект);
	ПоказатьВыборИзСписка(Продолжение, СписокНапоминаний(), Элементы.Напоминание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораНапоминания(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьАвтоматическоеНапоминание = Результат.Значение <> Неопределено;
	Если СоздатьАвтоматическоеНапоминание Тогда
		СекундДоДатыНачалаДляНапоминания = Результат.Значение;
	КонецЕсли;
	
	ЗаполнитьОтображениеУстановленногоНапоминания();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторАвтоматическогоНапоминания()
	
	Возврат "АвтоматическоеНапоминание";
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияУстановленногоНапоминания()
	
	УстановленноеНапоминание = УстановленноеНапоминание();
	СоздатьАвтоматическоеНапоминание = УстановленноеНапоминание <> Неопределено;
	Если СоздатьАвтоматическоеНапоминание Тогда
		СекундДоДатыНачалаДляНапоминания = УстановленноеНапоминание.ВремяСобытия - УстановленноеНапоминание.СрокНапоминания;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановленноеНапоминание()
	
	НапоминанияПоОбъекту = НапоминанияПользователя.НайтиНапоминания(Объект.Ссылка, ИдентификаторАвтоматическогоНапоминания());
	
	Если НапоминанияПоОбъекту.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НапоминанияПоОбъекту[0];
	
КонецФункции

&НаСервере
Процедура ОбновитьАвтоматическоеНапоминаниеЕслиНеобходимо()
	
	УстановленноеНапоминание = УстановленноеНапоминание();
	
	Если УстановленноеНапоминание <> Неопределено И НЕ СоздатьАвтоматическоеНапоминание Тогда
		НапоминанияПользователя.УдалитьНапоминание(УстановленноеНапоминание);
		Возврат;
	КонецЕсли;
	
	Если НЕ СоздатьАвтоматическоеНапоминание Тогда
		Возврат;
	КонецЕсли;
	
	СрокПредполагаемогоНапоминания = Объект.ДатаНачала - СекундДоДатыНачалаДляНапоминания;
	УстановленноеНапоминаниеУжеПодходит = УстановленноеНапоминание <> Неопределено
		И УстановленноеНапоминание.СрокНапоминания = СрокПредполагаемогоНапоминания;
	
	Если УстановленноеНапоминаниеУжеПодходит Тогда
		Возврат;
	КонецЕсли;
	
	Если УстановленноеНапоминание <> Неопределено Тогда
		НапоминанияПользователя.УдалитьНапоминание(УстановленноеНапоминание);
	КонецЕсли;
	НапоминанияПользователя.УстановитьНапоминание(Объект.Наименование, "ДатаНачала", СекундДоДатыНачалаДляНапоминания, Объект.Ссылка, ИдентификаторАвтоматическогоНапоминания());
	
КонецПроцедуры

#КонецОбласти

#Область ОснованиеЗадачи

&НаСервере
Процедура ЗаполнитьСписокОснований()
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.ЗначенияЗаполнения.Свойство("Основание") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.ЗначенияЗаполнения.Основание) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ОснованиеЗадачи Из Параметры.ЗначенияЗаполнения.Основание Цикл
		НоваяСтрока = СписокОснований.Добавить();
		НоваяСтрока.Основание = ОснованиеЗадачи.Ссылка;
		Объект.Основание = ОснованиеЗадачи;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТипыОснованийЗадачи()
	
	ТипыОснованийЗадачи = Новый СписокЗначений;
	ТипыОснованийЗадачи.Добавить(Тип("СправочникСсылка.Лиды"), НСтр("ru = 'Лид'"));
	ТипыОснованийЗадачи.Добавить(Тип("СправочникСсылка.КонтактныеЛица"), НСтр("ru = 'Контакт'"));
	ТипыОснованийЗадачи.Добавить(Тип("СправочникСсылка.Контрагенты"), НСтр("ru = 'Контрагент'"));
	ТипыОснованийЗадачи.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"), НСтр("ru = 'Заказ покупателя'"));
	ТипыОснованийЗадачи.Добавить(Тип("ДокументСсылка.Событие"), НСтр("ru = 'Событие'"));
	ТипыОснованийЗадачи.Добавить("ПоказатьВсе", НСтр("ru = 'Показать все'"));
	Возврат ТипыОснованийЗадачи;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ГиперссылкаСтрокиОткрытьОбъект()
	
	Возврат "Открыть";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ГиперссылкаСтрокиВыбратьОбъект()
	
	Возврат "Выбрать";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ГиперссылкаСтрокиОчиститьОбъект()
	
	Возврат "Очистить";
	
КонецФункции

&НаКлиенте
Процедура ОснованиеСтрокойОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ГиперссылкаСтрокиОткрытьОбъект() Тогда
		ОткрытьОснованиеЗадачи();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = ГиперссылкаСтрокиВыбратьОбъект() Тогда
		ВыбратьТипОснованияЗадачиИзСписка();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = ГиперссылкаСтрокиОчиститьОбъект() Тогда
		ОчиститьОснованиеЗадачи();
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОснованиеЗадачи()
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		ПоказатьЗначение(, Объект.Основание);
	Иначе
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Объект.ОснованиеСтроковаяСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТипОснованияЗадачиИзСписка(МножественныйВыбор = Ложь)
	
	Продолжение = Новый ОписаниеОповещения("ПослеВыбораТипаОснованияЗадачи", ЭтотОбъект,МножественныйВыбор);
	Если НЕ МножественныйВыбор Тогда
		ЭлементОснования = Элементы.ОснованиеСтрокой;
	Иначе
		ЭлементОснования = Элементы.ДекорацияПодобрать;
	КонецЕсли;
	
	ПоказатьВыборИзМеню(Продолжение, ТипыОснованийЗадачи(), ЭлементОснования);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТипОснованияЗадачиИзФормы(МножественныйВыбор = Ложь)
	
	Продолжение = Новый ОписаниеОповещения("ПослеВыбораТипаОснованияЗадачи", ЭтотОбъект, МножественныйВыбор);
	ОткрытьФорму("Документ.ЗадачаСотрудника.Форма.ВыборТипаОснования",, ЭтотОбъект,,,, Продолжение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораТипаОснованияЗадачи(ТипОснования, ДополнительныеПараметры) Экспорт
	
	Если ТипОснования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипОснования.Значение = "ПоказатьВсе" Тогда
		ВыбратьТипОснованияЗадачиИзФормы(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ВыбратьОснованиеЗадачи(ТипОснования.Значение, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолноеИмяМетаданного(Тип)
	
	Возврат Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
	
КонецФункции

&НаКлиенте
Процедура ВыбратьОснованиеЗадачи(ТипОснования, МножественныйВыбор = Ложь)
	
	ПолноеИмяМетаданного = ПолноеИмяМетаданного(ТипОснования);
	
	Продолжение = Новый ОписаниеОповещения("ЗаполнитьВыбранноеОснованиеЗадачи", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если МножественныйВыбор Тогда
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	КонецЕсли;
	ОткрытьФорму(ПолноеИмяМетаданного + ".ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, Продолжение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВыбранноеОснованиеЗадачиВОбъекте(Объект, ВыбранноеОснование, ОснованиеПредставление = "")
	
	Если ТипЗнч(ВыбранноеОснование) = Тип("Строка") Тогда
		Объект.Основание = Неопределено;
		Объект.ОснованиеСтроковаяСсылка = ВыбранноеОснование;
		Объект.ОснованиеПредставление = ОснованиеПредставление;
	Иначе
		Объект.Основание = ВыбранноеОснование;
		Объект.ОснованиеСтроковаяСсылка = Неопределено;
		Объект.ОснованиеПредставление = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыбранноеОснованиеЗадачи(ВыбранноеОснование, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеОснование = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриРедактированииСохраняемыхДанных();
	ЗаполнитьВыбранноеОснованиеЗадачиВОбъекте(Объект, ВыбранноеОснование);
	ЗаполнитьОснованиеНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОснованиеЗадачи()
	
	ПриРедактированииСохраняемыхДанных();
	
	Объект.Основание = Неопределено;
	Объект.ОснованиеПредставление = Неопределено;
	Объект.ОснованиеСтроковаяСсылка = Неопределено;
	
	ЗаполнитьОснованиеНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОснованиеНаФорме()
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		ПредставлениеОснования = ПредставлениеЗаполненногоОснованияСсылкой();
	ИначеЕсли ЗначениеЗаполнено(Объект.ОснованиеСтроковаяСсылка) Тогда
		ПредставлениеОснования = ПредставлениеЗаполненногоОснованияСтрокой();
	Иначе
		ПредставлениеОснования = ПредставлениеНезаполненногоОснования();
	КонецЕсли;
	
	ОснованиеСтрокой = ПредставлениеОснования.Представление;
	Элементы.ОснованиеСтрокой.Подсказка = ПредставлениеОснования.Подсказка;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КороткоеПредставлениеСтроки(Знач ИсходнаяСтрока)
	
	ОграничениеДлиныСтроки = 50;
	
	Если СтрДлина(ИсходнаяСтрока) < ОграничениеДлиныСтроки Тогда
		Возврат ИсходнаяСтрока;
	КонецЕсли;
	
	Возврат СтрШаблон("%1%2", Лев(ИсходнаяСтрока, ОграничениеДлиныСтроки), "...");
	
КонецФункции

&НаКлиенте
Функция ПредставлениеЗаполненногоОснованияСсылкой()
	
	ПредставлениеСсылки = Строка(Объект.Основание);
	
	Возврат ПредставлениеЗаполненногоОснования(ПредставлениеСсылки);
	
КонецФункции

&НаКлиенте
Функция ПредставлениеЗаполненногоОснованияСтрокой()
	
	Если ЗначениеЗаполнено(Объект.ОснованиеПредставление) Тогда
		ПредставлениеСсылки = Объект.ОснованиеПредставление;
	Иначе
		ПредставлениеСсылки = Объект.ОснованиеСтроковаяСсылка;
	КонецЕсли;
	
	Возврат ПредставлениеЗаполненногоОснования(ПредставлениеСсылки);
	
КонецФункции

&НаКлиенте
Функция ПредставлениеЗаполненногоОснования(ПредставлениеСсылки)
	
	КороткоеПредставлениеСсылки = КороткоеПредставлениеСтроки(ПредставлениеСсылки);
	Если ПредставлениеСсылки <> КороткоеПредставлениеСсылки Тогда
		Подсказка = ПредставлениеСсылки;
	Иначе
		Подсказка = "";
	КонецЕсли;
	
	КомпонентыСтроки = Новый Массив;
	КомпонентыСтроки.Добавить(Новый ФорматированнаяСтрока(КороткоеПредставлениеСсылки,,,, ГиперссылкаСтрокиОткрытьОбъект()));
	КомпонентыСтроки.Добавить(" ");
	КомпонентыСтроки.Добавить(
		Новый ФорматированнаяСтрока(БиблиотекаКартинок.ОчиститьЗначение12х12,,,, ГиперссылкаСтрокиОчиститьОбъект()));
	ПредставлениеОснования = Новый ФорматированнаяСтрока(КомпонентыСтроки);
	
	Результат = Новый Структура;
	Результат.Вставить("Представление", ПредставлениеОснования);
	Результат.Вставить("Подсказка", Подсказка);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПредставлениеНезаполненногоОснования()
	
	Представление = Новый ФорматированнаяСтрока(НСтр("ru='Выбрать'"),,,, ГиперссылкаСтрокиВыбратьОбъект());
	
	Результат = Новый Структура;
	Результат.Вставить("Представление", Представление);
	Результат.Вставить("Подсказка", "");
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВыборОтветственногоИзОснования()
	
	Если НЕ ЗначениеЗаполнено(Объект.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Основание) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	ОтветственныйОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Основание, "Ответственный");
	Если НЕ ЗначениеЗаполнено(ОтветственныйОснования) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОснования = Объект.Основание.Метаданные();
	Если ЗначениеЗаполнено(МетаданныеОснования.ПредставлениеОбъекта) Тогда
		ПредставлениеОбъекта = МетаданныеОснования.ПредставлениеОбъекта;
	Иначе
		ПредставлениеОбъекта = МетаданныеОснования.Синоним;
	КонецЕсли;
	
	ПредставлениеОтветственногоОснования = СтроковыеФункции.ФорматированнаяСтрока(
		НСтр("ru='%1 <span style=""color:РезультатУспехЦвет"">(ответственный за %2)</span>'"),
		Строка(ОтветственныйОснования),
		ПредставлениеОбъекта);
	Элементы.Ответственный.СписокВыбора.Добавить(ОтветственныйОснования, ПредставлениеОтветственногоОснования);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ЗаголовокПодсказки()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат НСтр("ru = 'задача будет создана для каждого основания отдельно'");
	Иначе
		Возврат НСтр("ru = 'задача будет изменена для каждого основания отдельно'");
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьКолонкуКалендаря()
	Объект.КолонкаКалендаря = Справочники.КолонкиКалендарейСотрудников.КолонкаНеобработанное(Объект.Календарь);
КонецПроцедуры

&НаСервере
Процедура ПолеВводаТегаОкончаниеВводаТекстаСервер(Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТегированиеОбъектов.ПолеВводаТегаОкончаниеВводаТекста(ЭтотОбъект, Текст, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПолеВводаТегаОбработкаВыбораСервер(ИмяЭлемента, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТегированиеОбъектов.ПолеВводаТегаОбработкаВыбора(ЭтотОбъект, ИмяЭлемента, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОблакоТеговОбработкаНавигационнойСсылкиСервер(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
	ТегированиеОбъектов.ОблакоТеговОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриРедактированииСохраняемыхДанных()
	
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьФорматПредставленияВремени(ТекущийФормат, ПараметрФормата, ЗначениеФормата)
	
	Если СтрНайти(ТекущийФормат, СтрШаблон("%1=", ПараметрФормата)) <> 0 Тогда
		Возврат ТекущийФормат;
	КонецЕсли;
	
	НоваяСтрокаФормата = ТекущийФормат;
	НоваяСтрокаФормата = СокрЛП(НоваяСтрокаФормата);
	
	Если НЕ СтрЗаканчиваетсяНа(НоваяСтрокаФормата, ";") Тогда
		РазделительЗначений = "; ";
	Иначе
		РазделительЗначений = "";
	КонецЕсли;
	
	НоваяСтрокаФормата = СтрШаблон("%1%2%3", НоваяСтрокаФормата, РазделительЗначений, ЗначениеФормата);
	
	Возврат НоваяСтрокаФормата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКалендарьПоОтветственному()
	
	КалендариСотрудника = Справочники.КалендариСотрудников.ДоступныеСотрудникуКалендари(Объект.Ответственный);
	ТекущийКалендарьДоступенСотруднику = КалендариСотрудника.Найти(Объект.Календарь, "Календарь") <> Неопределено;
	
	Если ТекущийКалендарьДоступенСотруднику Тогда
		Возврат;
	КонецЕсли;
	
	ОсновныеКалендариСотрудников = Справочники.КалендариСотрудников.ОсновныеКалендариСотрудников();
	Объект.Календарь = ОсновныеКалендариСотрудников.Получить(Объект.Ответственный);
	Объект.КолонкаКалендаря = Справочники.КолонкиКалендарейСотрудников.КолонкаНеобработанное(Объект.Календарь);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
