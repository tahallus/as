#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить() Тогда
		
		Для каждого СтрокаНалоги Из Налоги Цикл
			
			Если СтрокаНалоги.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.НезавершенноеПроизводство
			 ИЛИ СтрокаНалоги.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты
			 ИЛИ СтрокаНалоги.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.Доходы
			 ИЛИ СтрокаНалоги.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
				СтрокаНалоги.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Получить() Тогда
		
		Для каждого СтрокаНалоги Из Налоги Цикл
			Если СтрокаНалоги.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.Доходы
			 ИЛИ СтрокаНалоги.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
				СтрокаНалоги.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	
	СуммаДокумента = Налоги.Итог("Сумма");
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаНалоги Из Налоги Цикл
		
		Если Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
		   И (СтрокаНалоги.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.НезавершенноеПроизводство
		 ИЛИ СтрокаНалоги.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты
		 ИЛИ СтрокаНалоги.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.Доходы
		 ИЛИ СтрокаНалоги.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.Расходы)
		 И НЕ ЗначениеЗаполнено(СтрокаНалоги.Подразделение) Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Для счета затрат ""%1"" указанного в строке %2 списка ""Налоги"", должен быть заполнен реквизит ""Подразделение"".'"),
				СтрокаНалоги.Корреспонденция, СтрокаНалоги.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Налоги", СтрокаНалоги.НомерСтроки,
				"Подразделение");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения. Формирует движения
// документа по регистрам накопления и бухгалтерскому регистру.
//
// 1. Удаление существующих движений документа.
// 2. Формирование структуры шапки документа с полями, используемыми алгоритмах
// проведения документа.
// 3. Проверка заполнения значений шапки и табличных частей документа.
// 4. Формирование временной таблицы по документу, необходимой для формирования
// движений.
// 5. Формирование движений документа по регистрам накопления.
// 6. Формирование движений документа по регистру бухгалтерии.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.НачислениеНалогов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыПоНалогам", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли