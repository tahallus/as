
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	ТекущаяОрганизация = Объект.Организация;
	
	УстановитьУсловноеОформление();
	
	ЗаполнитьВременныеРеквизиты();

	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
	ПрослеживаемостьСобытияФормПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = 
			ПрослеживаемостьФормыКлиентПереопределяемый.ФормаВыбораСопроводительногоДокументаВУведомленииОПеремещении() Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.СопроводительныйДокумент = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодготовитьФормуНаСервере();
	
	ПрослеживаемостьСобытияФормПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПрослеживаемостьСобытияФормКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("СопроводительныеДокументы") Тогда
		ПараметрыЗаписи.Вставить("СопроводительныеДокументы", ТекущийОбъект.Товары.ВыгрузитьКолонку("СопроводительныйДокумент"));
	КонецЕсли;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПрослеживаемостьБРУ.СохранитьСтатусОтправки(ЭтотОбъект);
	
	ЗаполнитьВременныеРеквизиты();
	
	УстановитьСостояниеДокумента();
	
	ПрослеживаемостьСобытияФормПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Оповестить("Запись_УведомлениеОПеремещенииПрослеживаемыхТоваров", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.Контрагенты.Количество() <> 0
		ИЛИ Объект.Товары.Количество() <> 0 Тогда

		ТекстВопроса = НСтр("ru = 'Необходимо очистить табличные части. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПриИзмененииОрганизацииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ТекущаяОрганизация = Объект.Организация;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтрагенты

&НаКлиенте
Процедура КонтрагентыПриАктивизацииСтроки(Элемент)
	
	ДанныеКонтрагентыУстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущиеДанные.Контрагент = ТекущийКонтрагент Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("КлючСтроки", ТекущиеДанные.КлючСтроки));
	
	Если НайденныеСтроки.Количество() <> 0 Тогда

		Для каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			
			Объект.Товары.Удалить(ТекущаяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Контрагенты.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого ИдСтроки Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Контрагенты.НайтиПоИдентификатору(ИдСтроки);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхКлючей.Добавить();
			НоваяСтрока.КлючСтроки = ТекДанные.КлючСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекДанныеКонтрагенты = Элементы.Контрагенты.ТекущиеДанные;
		ТекДанныеКонтрагенты.КлючСтроки = Новый УникальныйИдентификатор();
		
		ДанныеКонтрагентыУстановитьОтборСтрок();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ДанныеСтрокиКонтрагента = Элементы.Контрагенты.ТекущиеДанные;
	
	Если ДанныеСтрокиКонтрагента = Неопределено Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Не выбрана строка в списке Контрагенты!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Контрагенты", "Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ЗначенияПоУмолчанию = ПолучитьПоНоменклатуреЗначенияПоУмолчанию(ТекущиеДанные.Номенклатура);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ЗначенияПоУмолчанию);
	
	ДанныеСтрокиКонтрагента = Элементы.Контрагенты.ТекущиеДанные;
	
	Если ТекущиеДанные.ЕдиницаИзмерения <> ТекущиеДанные.ЕдиницаПрослеживаемости Тогда
		
		ДанныеСтрокиКонтрагента.ЕдиницыПрослеживаемостиСовпадают = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПоНоменклатуреЗначенияПоУмолчанию(Номенклатура)
	
	ИзменяемыеПоля = Новый Структура("КодТНВЭД,ЕдиницаИзмерения,ЕдиницаПрослеживаемости,РНПТ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.КодТНВЭД КАК КодТНВЭД,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(Номенклатура.КодТНВЭД КАК Справочник.КлассификаторТНВЭД).ЕдиницаИзмерения КАК ЕдиницаПрослеживаемости
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
	
		ЗаполнитьЗначенияСвойств(ИзменяемыеПоля, Результат);
		
	Иначе
	
		ИзменяемыеПоля.КодТНВЭД = Справочники.КлассификаторТНВЭД.ПустаяСсылка();
		ИзменяемыеПоля.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
		ИзменяемыеПоля.ЕдиницаПрослеживаемости = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
		
	КонецЕсли;
	
	ИзменяемыеПоля.РНПТ = "";
	
	Возврат ИзменяемыеПоля;
КонецФункции

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ПриНачалеРедактированияСтрокиТоваров(
		Элементы.Товары.ТекущиеДанные, Элементы.Контрагенты.ТекущиеДанные, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеРедактированияСтрокиТоваров(ДанныеСтроки, ДанныеСтрокиКонтрагента, НоваяСтрока, Копирование)

	Если НоваяСтрока И ДанныеСтрокиКонтрагента <> Неопределено Тогда
		ДанныеСтроки.КлючСтроки = ДанныеСтрокиКонтрагента.КлючСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСопроводительныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	
	ПрослеживаемостьКлиентПереопределяемый.ОткрытьФормуПодбораСопроводительногоДокумента(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаПрослеживаемости Тогда
		
		ТекущиеДанные.КоличествоПрослеживаемости = ТекущиеДанные.Количество;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	ЕстьДанные = Объект.Контрагенты.Количество() > 0;
	
	Если ЕстьДанные 
		И Объект.Проведен Тогда
		
			ТекстВопроса = НСтр("ru = 'Перед заполнением проведение документа будет отменено, а табличные части будут очищены. Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументЗавершение", ЭтотОбъект, Новый Структура);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьЗаполнениеДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьУведомлениеВXML(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		
		ПрослеживаемостьКлиент.ВыгрузитьВФайлУведомлениеПоПрослеживаемости(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		
		Если НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.ув.о перем.просл.т.") Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Отправка уведомления в электронном виде предусмотрена законодательством с 1 июля 2021 г.'"));
			Возврат;
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечать(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	СписокПечатаемыхЛистов = ПрослеживаемостьВызовСервераПереопределяемый.ПолучитьСписокПечатаемыхЛистовНаСервере(Объект.Ссылка);
	ДополнительныеПараметры = Новый Структура("ЗаголовокФормы", 
		НСтр("ru='Уведомление о перемещении прослеживаемых товаров в ЕАЭС'"));
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
	ЭтотОбъект, "ПоказатьБланк", , СписокПечатаемыхЛистов, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		
		РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФСС");
	
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФСС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	ПараметрыИзменения.Вставить("ТекстВопроса", НСтр("ru='Вы уверены, что уведомление уже сдано?'"));
	
	ИнтерфейсыВзаимодействияБРОКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВопросПриИзмененииОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		Объект.Контрагенты.Очистить();
	Иначе
		Объект.Организация = ТекущаяОрганизация;
	КонецЕсли;
	
	ТекущаяОрганизация = Объект.Организация;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументЗавершение(Результат, ДополнительныйПараметр) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеДокумента()

	ДлительнаяОперация = ЗаполнитьДокументНаСервере();
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Истина;
		НастройкиОжидания.ТекстСообщения = НСтр("ru='Выполняется заполнение документа'");
		
		Обработчик = Новый ОписаниеОповещения("ЗаполнитьДокументЗавершение", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	Иначе
		
		ПоказатьОшибкуЗаполненияДокумента(ДлительнаяОперация);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ЗагрузитьДанныеВДокумент(ДлительнаяОперация.АдресРезультата);
		
	Иначе
		ПоказатьОшибкуЗаполненияДокумента(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеВДокумент(АдресРезультата)
	
	РезультатЗаполненияТаблиц = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Объект.Контрагенты.Загрузить(РезультатЗаполненияТаблиц.Контрагенты);
	Объект.Товары.Загрузить(РезультатЗаполненияТаблиц.Товары);
	
	Если Объект.Контрагенты.Количество() > 0 Тогда
		Элементы.Контрагенты.ТекущаяСтрока = Объект.Контрагенты[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуЗаполненияДокумента(ДлительнаяОперация)
	
	МассивИзДвухСтрок = Новый Массив;
	МассивИзДвухСтрок.Добавить(НСтр("ru = 'Ошибка заполнения документа:'"));
	МассивИзДвухСтрок.Добавить(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	
	ВызватьИсключение СтрСоединить(МассивИзДвухСтрок, Символы.ПС);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДокументНаСервере()
	
	Если Объект.Проведен Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	КонецЕсли;
	
	Объект.Контрагенты.Очистить();
	Объект.Товары.Очистить();
	
	ПараметрыОбработчика = Новый Структура("Организация, Дата",Объект.Организация, КонецДня(Объект.Дата));
	НастройкаЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкаЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение документа....'");
	НастройкаЗапуска.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров.ЗаполнитьДокумент",
		ПараметрыОбработчика,
		НастройкаЗапуска);

	Возврат ДлительнаяОперация;

КонецФункции

&НаКлиенте
Процедура Подключаемый_УдалитьСвязанныеЗаписи()
	
	УдалитьСвязанныеЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	ВидыУдаляемыхСтрок = Новый Структура; 
	
	ВидыУдаляемыхСтрок.Вставить("Товары", ТаблицаУдаленныхКлючей);
	
	Для каждого ВидУдаляемыхСтрок Из ВидыУдаляемыхСтрок Цикл
		ИмяТабличнойЧасти 		= ВидУдаляемыхСтрок.Ключ;
		СписокУдаленныхКлючей 	= ВидУдаляемыхСтрок.Значение;
		Для каждого СтрокаКлюча Из СписокУдаленныхКлючей Цикл
			КлючПоиска = Новый Структура("КлючСтроки", СтрокаКлюча.КлючСтроки);
			МассивСтрокТовары = Объект[ИмяТабличнойЧасти].НайтиСтроки(КлючПоиска);
			
			Для каждого СтрокаТЧ Из МассивСтрокТовары Цикл
				Объект[ИмяТабличнойЧасти].Удалить(СтрокаТЧ);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКонтрагентыУстановитьОтборСтрок()
	
	ТекДанныеКонтрагенты = Элементы.Контрагенты.ТекущиеДанные;
	
	Если ТекДанныеКонтрагенты <> Неопределено Тогда
		КлючСтроки = ТекДанныеКонтрагенты.КлючСтроки;
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки", КлючСтроки);
		
		ТекущийКонтрагент = ТекДанныеКонтрагенты.Контрагент;
		
	Иначе
		
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки", 0);
		
		ТекущийКонтрагент = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// КонтрагентыСтраныПеревозкиПредставление

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КонтрагентыСтраныПеревозкиПредставление");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Контрагенты.СтраныПеревозкиПредставление", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указана>'"));
	
	
	// ТоварыЕдиницаПрослеживаемости, ТоварыКоличествоПрослеживаемости
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЕдиницаПрослеживаемости");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоПрослеживаемости");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Контрагенты.ЕдиницыПрослеживаемостиСовпадают", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	ПрослеживаемостьПереопределяемый.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВременныеРеквизиты()
	
	ФильтрПоТаблице = Новый Структура("КлючСтроки");
	
	Для каждого ТекущаяСтрокаКонтрагенты Из Объект.Контрагенты Цикл
		
		ФильтрПоТаблице.КлючСтроки = ТекущаяСтрокаКонтрагенты.КлючСтроки;
		
		// Если по этой реализации в табличной части товары Единица прослеживаемости = Единицы в документе, то Истина
		ТекущаяСтрокаКонтрагенты.ЕдиницыПрослеживаемостиСовпадают = 
			ЕдиницыПрослеживаемостиИЕдиницаВДокументеСовпадают(ФильтрПоТаблице);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕдиницыПрослеживаемостиИЕдиницаВДокументеСовпадают(ФильтрПоТаблице)
	
	НайденныеСтроки = Объект.Товары.НайтиСтроки(ФильтрПоТаблице);
	ЕдиницыПрослеживаемостиСовпадают = Истина;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Для каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		
			Если ТекущаяСтрока.ЕдиницаИзмерения <> ТекущаяСтрока.ЕдиницаПрослеживаемости Тогда
			
				ЕдиницыПрослеживаемостиСовпадают = Ложь;
			
			КонецЕсли;
		
		КонецЦикла;
	Иначе
		
		ЕдиницыПрослеживаемостиСовпадают = Ложь;
		
	КонецЕсли;
		
	Возврат ЕдиницыПрослеживаемостиСовпадают;
	
КонецФункции

#КонецОбласти
