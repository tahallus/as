#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
		
		Запрос = Новый Запрос( 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИнвентаризацияЗапасов.Количество - ИнвентаризацияЗапасов.КоличествоУчет КАК Количество
		|ИЗ
		|	Документ.ИнвентаризацияЗапасов.Запасы КАК ИнвентаризацияЗапасов
		|ГДЕ
		|	ИнвентаризацияЗапасов.Ссылка = &ДокументОснование
		|	И (ИнвентаризацияЗапасов.Количество - ИнвентаризацияЗапасов.КоличествоУчет > 0
		|			ИЛИ ИнвентаризацияЗапасов.Количество - ИнвентаризацияЗапасов.КоличествоУчет < 0)");
		
		Запрос.УстановитьПараметр("ДокументОснование", Параметры.Основание);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			НеОткрыватьФорму = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	
	ИменаТЧ = Новый Массив;
	ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ИмяПоляОформления", "Объект.Запасы.СтранаПроисхождения",
		"ЗапасыНомерГТД"));
	
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервере(ЭтаФорма, ИменаТЧ, КэшЗначений);
	
	ОбновитьРеквизитыВидимостиФормы();
	УправлениеВидимостью();
	
	// Сформируем надпись цены.
	СтруктураНадписи = Новый Структура("ВидЦен", Объект.ВидЦен);
	ПредставлениеЦены = СформироватьНадписьЦены(СтруктураНадписи);
	
	// Установка способа выбора структурной единицы в зависимости от ФО.
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
		
		Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
	КонецЕсли;
	
	ВосстановитьНастройкиОтборов();
	
	// Установить надписи счет-фактура и основание
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() И
		ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПриходныйОрдер") И
		НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенНаСервере();
		
	КонецЕсли;
	
	ЗаполнитьСписокДокументОснование();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	
	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура);
	ШтрихкодированиеИС.ИнициализироватьКэшМаркируемойПродукции(ЭтаФорма);
	// Конец ИнтеграцияГосИС
	
	// Характеристики
	ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик();
	ЗаполнитьПризнакиИспользованияХарактеристик(Истина);
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ПересортицаЗапасов", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы", "Оприходование");
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	// Синхронизация
	Если Не УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов() Тогда
		Элементы.ПриходоватьТоварыПоСебестоимостиСписания.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
	КонецЕсли;
	
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ИспользоватьСерииНоменклатуры;
	Элементы.ЗапасыГруппаСерииНоменклатурыОприходование.Видимость = ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец ИнтеграцияГосИС
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НеОткрыватьФорму Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных для оформления пересортицы.'");
	КонецЕсли;
	
	ОбновитьЗаголовкиОтборов();
	
	УправлениеФормой(Истина);
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриЗакрытии()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СтруктураНастроекОтборов = Новый Структура;
	СтруктураНастроекОтборов.Вставить("СписокНоменклатуры", СписокНоменклатуры);
	СтруктураНастроекОтборов.Вставить("СписокГруппНоменклатуры", СписокГруппНоменклатуры);
	СтруктураНастроекОтборов.Вставить("СписокКатегорийНоменклатуры", СписокКатегорийНоменклатуры);
	
	ТекущийОбъект.НастройкиОтборов = Новый ХранилищеЗначения(СтруктураНастроекОтборов);
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтаФорма);
	// Конец ИнтеграцияГосИС
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище	= Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", Истина, Истина);
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки, Параметр.ЭтоОприходование);
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_УведомлениеОСписанииКиЗГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ

	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшированныеЗначения",    Неопределено);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка",    Истина);
	ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов", Ложь);
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	// Конец ИнтеграцияГосИС

КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НЕ ВыборОснования И ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
		ЗаполнитьПоИнвентаризацииВсеРасхожденияНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиница.
&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	ОбновитьРеквизитыВидимостиФормы();
	УправлениеФормой();
	
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры // СтруктурнаяЕдиницаПриИзменении()

// Процедура - обработчик события Открытие поля СтруктурнаяЕдиница.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаОткрытие()

&НаКлиенте
Процедура РедактироватьЦены(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦены();
	Модифицированность = Истина;
	
КонецПроцедуры // РедактироватьЦены()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦены()
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПерезаполнитьЦены", Ложь);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ВидЦен", Объект.ВидЦен);

	ОткрытьФорму("Документ.ОприходованиеЗапасов.Форма.ФормаВыбораВидаЦен", СтруктураПараметров, , , , ,
		Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    // 2. Открываем форму "Цены и Валюта".
    СтруктураЦеныИВалюта = Результат;
    
    // 3. Перезаполняем табличную часть "Запасы" если были внесены изменения в форме "Цены и Валюта".
    Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура")
        И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
        
        Объект.ВидЦен = СтруктураЦеныИВалюта.ВидЦен;
        
        // Пересчитываем цены по виду цен.
        Если СтруктураЦеныИВалюта.ПерезаполнитьЦены Тогда
            ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенНаКлиенте();
        КонецЕсли;
        
    КонецЕсли;
    
    // Сформируем надпись цены.
    СтруктураНадписи = Новый Структура("ВидЦен", Объект.ВидЦен);
    ПредставлениеЦены = СформироватьНадписьЦены(СтруктураНадписи);

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦены()

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦены(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Вид цен.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦен) Тогда
		ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦен%'");
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(СтруктураНадписи.ВидЦен)));
	Иначе
		ТекстНадписи = ТекстНадписи + НСтр("ru = 'указать вид цен'");
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦены()

&НаСервереБезКонтекста
Процедура ПолучитьЦеныТабличнойЧастиПоВидуЦенНаСервере(СтруктураДанных, ТабличнаяЧастьДокумента)
	
	СтруктураДанных.Вставить("ВалютаДокумента", Константы.ВалютаУчета.Получить());
	ЦенообразованиеСервер.ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента);
	
КонецПроцедуры // ПолучитьЦеныТабличнойЧастиПоВидуЦенНаСервере()

&НаКлиенте
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенНаКлиенте()
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;
	
	СтруктураДанных.Вставить("Дата", Объект.Дата);
	СтруктураДанных.Вставить("Организация", Компания);
	СтруктураДанных.Вставить("ВидЦен", Объект.ВидЦен);
	Для каждого СтрокаТЧ Из Объект.Запасы Цикл
		
		СтрокаТЧ.Цена = 0;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.НоменклатураОприходование) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура", СтрокаТЧ.НоменклатураОприходование);
		СтрокаТабличнойЧасти.Вставить("Характеристика", СтрокаТЧ.ХарактеристикаОприходование);
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмеренияОприходование);
		СтрокаТабличнойЧасти.Вставить("Цена", 0);
		
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
		
	ПолучитьЦеныТабличнойЧастиПоВидуЦенНаСервере(СтруктураДанных, ТабличнаяЧастьДокумента);
		
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НоменклатураОприходование", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаОприходование", СтрокаТЧ.Характеристика);
		СтруктураПоиска.Вставить("ЕдиницаИзмеренияОприходование", СтрокаТЧ.ЕдиницаИзмерения);
		
		РезультатПоиска = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			СтрокаРезультат.Сумма = СтрокаРезультат.Количество * СтрокаРезультат.Цена;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

&НаСервере
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенНаСервере()
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;
	
	СтруктураДанных.Вставить("Дата", Объект.Дата);
	СтруктураДанных.Вставить("Организация", Компания);
	СтруктураДанных.Вставить("ВидЦен", Объект.ВидЦен);
	Для каждого СтрокаТЧ Из Объект.Запасы Цикл
		
		СтрокаТЧ.Цена = 0;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.НоменклатураОприходование) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура", СтрокаТЧ.НоменклатураОприходование);
		СтрокаТабличнойЧасти.Вставить("Характеристика", СтрокаТЧ.ХарактеристикаОприходование);
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмеренияОприходование);
		СтрокаТабличнойЧасти.Вставить("Цена", 0);
		
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
		
	ПолучитьЦеныТабличнойЧастиПоВидуЦенНаСервере(СтруктураДанных, ТабличнаяЧастьДокумента);
		
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НоменклатураОприходование", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаОприходование", СтрокаТЧ.Характеристика);
		СтруктураПоиска.Вставить("ЕдиницаИзмеренияОприходование", СтрокаТЧ.ЕдиницаИзмерения);
		
		РезультатПоиска = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			СтрокаРезультат.Сумма = СтрокаРезультат.Количество * СтрокаРезультат.Цена;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

&НаСервере
Процедура ЗаполнитьСписокДокументОснование()
	
	СписокДокументОснование.Добавить("Документ.ИнвентаризацияЗапасов.ФормаВыбора", НСтр("ru = 'Инвентаризация запасов'"));
	СписокДокументОснование.Добавить("Документ.ПриходныйОрдер.ФормаВыбора", НСтр("ru = 'Приходный ордер'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыЗапасы

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = Неопределено;
	СтрокаТабличнойЧасти.Количество = 1;
	
	СтрокаТабличнойЧасти.НеобходимостьВводаСправкиНаАлкоголь = СтруктураДанные.ЭтоАлкогольнаяПродукция;
	
	// Серии номенклатуры
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
			ИспользоватьСерииНоменклатурыОстатки);
	КонецЦикла;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
		КонецЕсли
	КонецЕсли;
	// Конец Партии
	
	СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
	
	ПодборНоменклатурыИзСписка = Ложь;
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "ПересортицаЗапасов", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗапасыНоменклатураОприходованиеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.НоменклатураОприходование);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.ХарактеристикаОприходование);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.ПартияОприходование);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		
	КонецЕсли;
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, Истина);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмеренияОприходование = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхожденияОприходование = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТДОприходование = Неопределено;
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристикиОприходование = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристикиОприходование = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПровереноОприходование = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.ХарактеристикаОприходование = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.ХарактеристикаОприходование = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартииОприходование = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартийОприходование = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.ПартияОприходование = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.ПартияОприходование = СтруктураДанные.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	СтрокаТабличнойЧасти.СтатусыСерийНоменклатурыОприходование = СтруктураДанные.СтатусыСерийНоменклатуры;
	
	ПодборНоменклатурыИзСписка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураОприходованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма,
				"ПересортицаЗапасов", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы",
				ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы",
				"Оприходование");
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаОприходованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.НоменклатураОприходование);
		СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.ХарактеристикаОприходование);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмеренияОприходование);
		
		СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
		
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Элемент.ТекущиеДанные.СерииНоменклатуры = "";
		Элемент.ТекущиеДанные.СерииНоменклатурыОприходование = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, Элемент.ТекущиеДанные);
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, Элемент.ТекущиеДанные, "СерииНоменклатурыОприходование");
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыСерииНоменклатуры" Тогда
		ОткрытьПодборСерииНоменклатуры();
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ЗапасыСерииНоменклатурыОприходование" Тогда
		ОткрытьПодборСерииНоменклатуры(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Серии номенклатуры
	Для Каждого ТекущаяСтрокаИдентификатор Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанные = Объект.Запасы.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанные,
			ИспользоватьСерииНоменклатурыОстатки);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатурыОприходование, ТекущиеДанные,
			ИспользоватьСерииНоменклатурыОстатки, , "СерииНоменклатурыОприходование");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыЕдиницаИзмеренияОприходование" Тогда
		Если Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущиеДанные.НоменклатураОприходование = Элемент.ТекущиеДанные.Номенклатура Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, "Номенклатура списания и оприходования совпадают. Единицу измерения можно установить только для списываемой номенклатуры.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Цена = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество);

КонецПроцедуры // ЗапасыСуммаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		// Выбрать основание
		СтруктураПараметровОтбора = Новый Структура();
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		
		Если СписокДокументОснование.Количество()>1 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
			ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДокументОснование, Элементы.ДокументОснованиеНадпись);
		Иначе
			ОткрытьФорму("Документ.ИнвентаризацияЗапасов.ФормаВыбора", СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
		КонецЕсли; 
		
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбранноеИмяФормы, Параметры) Экспорт
	
	Если ВыбранноеИмяФормы<>Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ВыборОснования = Истина;
		ОткрытьФорму(ВыбранноеИмяФормы.Значение, СтруктураПараметровОтбора, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбранноеЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбранноеЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт
	
	ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещенияВопрос, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу();		
    КонецЕсли;

КонецПроцедуры  // ЗаполнитьВыполнить()

&НаКлиенте
Процедура ЗаполнитьПоИнвентаризацииВсеРасхождения(Команда)
	
	ВыборОснования = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) ИЛИ ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
		
		ПараметрыВыбораИнвентаризации = Новый Структура("Организация, СтруктурнаяЕдиница", Объект.Организация, Объект.СтруктурнаяЕдиница);
		ОткрытьФорму("Документ.ИнвентаризацияЗапасов.ФормаВыбора", ПараметрыВыбораИнвентаризации, ЭтотОбъект, УникальныйИдентификатор);
		
	Иначе
		
		ОповещениеПослеОтветаНаВопрос = Новый ОписаниеОповещения("ЗаполнитьПоИнвентаризацииВсеРасхожденияВопросЗавершение", ЭтотОбъект);
		
		КнопкиВопрос = Новый СписокЗначений;
		КнопкиВопрос.Добавить(КодВозвратаДиалога.Да, "Документ-основание");
		КнопкиВопрос.Добавить(КодВозвратаДиалога.Нет, "Другая инвентаризация");
		КнопкиВопрос.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
		
		ПоказатьВопрос(ОповещениеПослеОтветаНаВопрос, НСтр("ru = 'Использовать документ-основание или выбрать другую инвентаризацию?'"), КнопкиВопрос);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение отрицательными остатками
#Область ЗаполнениеОтрицательнымиОстатками

&НаКлиенте
Процедура ЗаполнитьВсемиОтрицательнымиОстаткамиНаСкладе(Команда)
	
	ДанныеДобавлены = ЗаполнитьВсемиОтрицательнымиОстаткамиНаСкладеНаСервере();
	Если НЕ ДанныеДобавлены Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нет данных для заполнения.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьВсемиОтрицательнымиОстаткамиНаСкладеНаСервере()
	
	ЕстьОтборПоНоменклатуре = СписокНоменклатуры.Количество() > 0;
	ЕстьОтборПоГруппамНоменклатуры = СписокГруппНоменклатуры.Количество() > 0;
	ЕстьОтборПоКатегориямНоменклатуры = СписокКатегорийНоменклатуры.Количество() > 0;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ЗначениеЗаполнено(Объект.Ячейка) Тогда
		Запрос.Текст = СформироватьТекстЗапросаПоОстаткамВЯчейкеНаСкладе();
		Запрос.УстановитьПараметр("Ячейка", Объект.Ячейка);
	Иначе
		Запрос.Текст = СформироватьТекстЗапросаПоОстаткамНаСкладе();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	
	Если ЕстьОтборПоНоменклатуре Тогда
		Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Номенклатура В (&СписокНоменклатуры)", "");
	КонецЕсли;
	
	Если ЕстьОтборПоГруппамНоменклатуры Тогда
		Запрос.УстановитьПараметр("СписокГруппНоменклатуры", СписокГруппНоменклатуры);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Номенклатура В ИЕРАРХИИ (&СписокГруппНоменклатуры)", "");
	КонецЕсли;
	
	Если ЕстьОтборПоКатегориямНоменклатуры Тогда
		Запрос.УстановитьПараметр("СписокКатегорийНоменклатуры", СписокКатегорийНоменклатуры);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Номенклатура.КатегорияНоменклатуры В (&СписокКатегорийНоменклатуры)", "");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрНоменклатура.Наименование КАК Наименование,
	|	ЗапасыОстаткиИнвентаризация.Номенклатура КАК НоменклатураОприходование,
	|	ЗапасыОстаткиИнвентаризация.ЕдиницаИзмерения КАК ЕдиницаИзмеренияОприходование,
	|	ЗапасыОстаткиИнвентаризация.Характеристика КАК ХарактеристикаОприходование,
	|	ЗапасыОстаткиИнвентаризация.Партия КАК ПартияОприходование,
	|	-ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.КоличествоУчет, 0) КАК КоличествоУчет,
	|	ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.СуммаУчет, 0) КАК СуммаУчет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.КоличествоУчет, 0) <= 0
	|				ИЛИ ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.Сумма, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.Сумма, 0) / ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.КоличествоУчет, 0)
	|	КОНЕЦ КАК ЦенаУчет,
	|	ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.Сумма, 0) КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЗапасыОстаткиИнвентаризация.ПризнакВЯчейке
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.Количество, 0) < 0
	|						ТОГДА -ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.Количество, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.КоличествоУчет, 0) < 0
	|					ТОГДА -ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.КоличествоУчет, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Отклонение,
	|	СпрНоменклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗапасыОстаткиИнвентаризация КАК ЗапасыОстаткиИнвентаризация
	|		ПО СпрНоменклатура.Ссылка = ЗапасыОстаткиИнвентаризация.Номенклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&СписокНоменклатуры)
	|	И СпрНоменклатура.Недействителен = ЛОЖЬ
	|	И СпрНоменклатура.Ссылка В ИЕРАРХИИ(&СписокГруппНоменклатуры)
	|	И СпрНоменклатура.КатегорияНоменклатуры В(&СписокКатегорийНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ,
	|	Наименование УБЫВ";
	
	Если ЕстьОтборПоНоменклатуре Тогда
		Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Ссылка В (&СписокНоменклатуры)", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СпрНоменклатура.Ссылка В(&СписокНоменклатуры)", "ИСТИНА");
	КонецЕсли;
	
	Если ЕстьОтборПоГруппамНоменклатуры Тогда
		Запрос.УстановитьПараметр("СписокГруппНоменклатуры", СписокГруппНоменклатуры);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Ссылка В ИЕРАРХИИ(&СписокГруппНоменклатуры)", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СпрНоменклатура.Ссылка В ИЕРАРХИИ(&СписокГруппНоменклатуры)", "");
	КонецЕсли;
	
	Если ЕстьОтборПоКатегориямНоменклатуры Тогда
		Запрос.УстановитьПараметр("СписокКатегорийНоменклатуры", СписокКатегорийНоменклатуры);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СпрНоменклатура.КатегорияНоменклатуры В(&СписокКатегорийНоменклатуры)", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеДобавлены = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.НоменклатураОприходование) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Ячейка)
			И Выборка.Количество <> Выборка.КоличествоУчет
			И Выборка.Количество <> 0 Тогда
			
			ДанныеДобавлены = Истина;
			
			НоваяСтрока = Объект.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.Количество = Выборка.Количество;
			
			Если Выборка.ЦенаУчет = 0 Тогда
				НоваяСтрока.Цена = 0;
				НоваяСтрока.Сумма = 0;
			Иначе
				НоваяСтрока.Цена = ?(Выборка.ЦенаУчет < 0, Выборка.ЦенаУчет * (-1), Выборка.ЦенаУчет);
				НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
			КонецЕсли;
			
			НоваяСтрока.СуммаУчет = НоваяСтрока.Сумма;
			
		ИначеЕсли Выборка.КоличествоУчет <> 0 Тогда
			
			ДанныеДобавлены = Истина;
			
			НоваяСтрока = Объект.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Количество = Выборка.КоличествоУчет;
			
			Если Выборка.ЦенаУчет = 0 Тогда
				НоваяСтрока.Сумма = 0;
			Иначе
				НоваяСтрока.Цена = ?(Выборка.ЦенаУчет < 0, Выборка.ЦенаУчет * (-1), Выборка.ЦенаУчет);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	Возврат ДанныеДобавлены;
	
КонецФункции

// Процедура заполняет табличную часть "Запасы" по остаткам
// 
&НаСервере
Функция ПолучитьОстаткиНаСкладе() Экспорт
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ЗначениеЗаполнено(Объект.Ячейка) Тогда
		Запрос.Текст = СформироватьТекстЗапросаПоОстаткамВЯчейкеНаСкладе();
		Запрос.УстановитьПараметр("Ячейка", Объект.Ячейка);
	Иначе
		Запрос.Текст = СформироватьТекстЗапросаПоОстаткамНаСкладе();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	
	Запрос.Выполнить();
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает текст запроса по остаткам на складе.
//
&НаСервере
Функция СформироватьТекстЗапросаПоОстаткамНаСкладе()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК ПризнакВЯчейке,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоУчет,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаУчет,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК Сумма
	|ПОМЕСТИТЬ ЗапасыОстаткиИнвентаризация
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И Номенклатура В (&СписокНоменклатуры)
	|				И Номенклатура В ИЕРАРХИИ (&СписокГруппНоменклатуры)
	|				И Номенклатура.КатегорияНоменклатуры В (&СписокКатегорийНоменклатуры)) КАК ЗапасыОстатки
	|ГДЕ
	|	ЗапасыОстатки.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ЗапасыОстатки.КоличествоОстаток < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоОстаткамНаСкладе()

// Функция возвращает текст запроса по остаткам в ячейке на складе.
//
&НаСервере
Функция СформироватьТекстЗапросаПоОстаткамВЯчейкеНаСкладе()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИСТИНА КАК ПризнакВЯчейке,
	|	ЗапасыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗапасыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ЗапасыНаСкладахОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоУчет,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаУчет,
	|	СУММА(ЗапасыНаСкладахОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК Сумма
	|ПОМЕСТИТЬ ЗапасыОстаткиИнвентаризация
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И Ячейка = &Ячейка
	|				И Номенклатура В (&СписокНоменклатуры)
	|				И Номенклатура В ИЕРАРХИИ (&СписокГруппНоменклатуры)
	|				И Номенклатура.КатегорияНоменклатуры В (&СписокКатегорийНоменклатуры)) КАК ЗапасыНаСкладахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
	|				&Период,
	|				Организация = &Организация
	|					И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|					И Номенклатура В (&СписокНоменклатуры)
	|					И Номенклатура В ИЕРАРХИИ (&СписокГруппНоменклатуры)
	|					И Номенклатура.КатегорияНоменклатуры В (&СписокКатегорийНоменклатуры)) КАК ЗапасыОстатки
	|		ПО ЗапасыНаСкладахОстатки.Номенклатура = ЗапасыОстатки.Номенклатура
	|			И ЗапасыНаСкладахОстатки.Характеристика = ЗапасыОстатки.Характеристика
	|			И ЗапасыНаСкладахОстатки.Партия = ЗапасыОстатки.Партия
	|ГДЕ
	|	ЗапасыОстатки.КоличествоОстаток < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыНаСкладахОстатки.Партия,
	|	ЗапасыНаСкладахОстатки.Номенклатура,
	|	ЗапасыНаСкладахОстатки.Характеристика,
	|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоОстаткамВЯчейкеНаСкладе()

&НаКлиенте
Процедура ОчиститьОтборПоНоменклатуреНажатие(Элемент)
	
	ОчиститьУсловиеОтбораПоНоменклатуре();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборПоГруппамНоменклатурыНажатие(Элемент)
	
	ОчиститьУсловиеОтбораПоГруппамНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборПоКатегориямНоменклатурыНажатие(Элемент)
	
	ОчиститьУсловиеОтбораПоКатегориямНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоНоменклатуре(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидОтбора", "ОтборПоНоменклатуре");
	ПараметрыФормы.Вставить("СписокЗначенийОтбора", СписокНоменклатуры);
	
	Оповещение = Новый ОписаниеОповещения("УстановитьОтборЗавершение",ЭтотОбъект);
	ОткрытьФорму("Документ.ИнвентаризацияЗапасов.Форма.ФормаВыбораЗначенийОтбора", ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоГруппамНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидОтбора", "ОтборПоГруппамНоменклатуры");
	ПараметрыФормы.Вставить("СписокЗначенийОтбора", СписокГруппНоменклатуры);
	
	Оповещение = Новый ОписаниеОповещения("УстановитьОтборЗавершение",ЭтотОбъект);
	ОткрытьФорму("Документ.ИнвентаризацияЗапасов.Форма.ФормаВыбораЗначенийОтбора", ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоКатегориямНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидОтбора", "ОтборПоКатегориямНоменклатуры");
	ПараметрыФормы.Вставить("СписокЗначенийОтбора", СписокКатегорийНоменклатуры);
	
	Оповещение = Новый ОписаниеОповещения("УстановитьОтборЗавершение",ЭтотОбъект);
	ОткрытьФорму("Документ.ИнвентаризацияЗапасов.Форма.ФормаВыбораЗначенийОтбора", ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборЗавершение(Результат,Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		СписокЗначенийОтбора = ПолучитьИзВременногоХранилища(Результат.АдресСпискаЗначенийОтбора);
		ЗаголовокСписка = СформироватьЗаголовокОтбораИзСписка(СписокЗначенийОтбора);
		
		ВидОтбора = Результат.ВидОтбора;
		Если ВидОтбора = "ОтборПоНоменклатуре" Тогда
			СписокНоменклатуры = СписокЗначенийОтбора;
			Элементы.УстановитьОтборПоНоменклатуре.Заголовок = ЗаголовокСписка;
		ИначеЕсли ВидОтбора = "ОтборПоГруппамНоменклатуры" Тогда
			СписокГруппНоменклатуры = СписокЗначенийОтбора;
			Элементы.УстановитьОтборПоГруппамНоменклатуры.Заголовок = ЗаголовокСписка;
		Иначе
			СписокКатегорийНоменклатуры = СписокЗначенийОтбора;
			Элементы.УстановитьОтборПоКатегориямНоменклатуры.Заголовок = ЗаголовокСписка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет заголовки отборов условий проведения инвентаризации.
//
&НаКлиенте
Процедура ОбновитьЗаголовкиОтборов()

	ЗаголовокСписка = СформироватьЗаголовокОтбораИзСписка(СписокНоменклатуры);
	Элементы.УстановитьОтборПоНоменклатуре.Заголовок = ЗаголовокСписка;
	
	ЗаголовокСписка = СформироватьЗаголовокОтбораИзСписка(СписокГруппНоменклатуры);
	Элементы.УстановитьОтборПоГруппамНоменклатуры.Заголовок = ЗаголовокСписка;
	
	ЗаголовокСписка = СформироватьЗаголовокОтбораИзСписка(СписокКатегорийНоменклатуры);
	Элементы.УстановитьОтборПоКатегориямНоменклатуры.Заголовок = ЗаголовокСписка;

КонецПроцедуры // ОбновитьЗаголовкиОтборов()

// Восстанавливает настройки отборов условий проведения инвентаризации.
//
&НаСервере
Процедура ВосстановитьНастройкиОтборов()

	СтруктураНастроекОтборов = РеквизитФормыВЗначение("Объект").НастройкиОтборов.Получить();
	Если ТипЗнч(СтруктураНастроекОтборов) = Тип("Структура") Тогда
		СтруктураНастроекОтборов.Свойство("СписокНоменклатуры", СписокНоменклатуры);
		СтруктураНастроекОтборов.Свойство("СписокГруппНоменклатуры", СписокГруппНоменклатуры);
		СтруктураНастроекОтборов.Свойство("СписокКатегорийНоменклатуры", СписокКатегорийНоменклатуры);
	КонецЕсли;

КонецПроцедуры // ВосстановитьНастройкиОтборов()

&НаКлиенте
Процедура ОчиститьУсловиеОтбораПоНоменклатуре()

	СписокНоменклатуры.Очистить();
	Элементы.УстановитьОтборПоНоменклатуре.Заголовок = НСтр("ru = 'Отбор не установлен'");

КонецПроцедуры // ОчиститьУсловиеОтбораПоНоменклатуре()

&НаКлиенте
Процедура ОчиститьУсловиеОтбораПоГруппамНоменклатуры()

	СписокГруппНоменклатуры.Очистить();
	Элементы.УстановитьОтборПоГруппамНоменклатуры.Заголовок = НСтр("ru = 'Отбор не установлен'");

КонецПроцедуры // ОчиститьУсловиеОтбораПоГруппамНоменклатуры()

&НаКлиенте
Процедура ОчиститьУсловиеОтбораПоКатегориямНоменклатуры()

	СписокКатегорийНоменклатуры.Очистить();
	Элементы.УстановитьОтборПоКатегориямНоменклатуры.Заголовок = НСтр("ru = 'Отбор не установлен'");

КонецПроцедуры // ОчиститьУсловиеОтбораПоКатегориямНоменклатуры()

&НаКлиенте
Функция СформироватьЗаголовокОтбораИзСписка(СписокЭлементов)
	
	ЗаголовокОтбораСтрока = "";
	Для каждого ЭлементСписка Из СписокЭлементов Цикл
		
		ЗаголовокОтбораСтрока = ЗаголовокОтбораСтрока + ?(ЗаголовокОтбораСтрока = "","","; ") + ЭлементСписка.Представление;
		
	КонецЦикла;
	
	Если ЗаголовокОтбораСтрока = "" Тогда
		ЗаголовокОтбораСтрока = НСтр("ru = 'Отбор не установлен'");
	КонецЕсли;
	
	Возврат ЗаголовокОтбораСтрока;
	
КонецФункции // СформироватьЗаголовокОтбораИзСписка()

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПоИнвентаризацииВсеРасхожденияВопросЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоИнвентаризацииВсеРасхожденияНаСервере(Объект.ДокументОснование);
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		ПараметрыВыбораИнвентаризации = Новый Структура("Организация, СтруктурнаяЕдиница", Объект.Организация, Объект.СтруктурнаяЕдиница);
		ОткрытьФорму("Документ.ИнвентаризацияЗапасов.ФормаВыбора", ПараметрыВыбораИнвентаризации, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеВСтроке(ТекущаяСтрока, ЭтоОприходование = Ложь)
	
	Если ЭтоОприходование <> Неопределено И ЭтоОприходование Тогда
		ТекущаяСтрока.НоменклатураОприходование = Неопределено;
		ТекущаяСтрока.ХарактеристикаОприходование = Неопределено;
		ТекущаяСтрока.ПартияОприходование = Неопределено;
		ТекущаяСтрока.СерииНоменклатурыОприходование = Неопределено;
		ТекущаяСтрока.ЕдиницаИзмеренияОприходование = Неопределено;
		ТекущаяСтрока.СтранаПроисхожденияОприходование = Неопределено;
		ТекущаяСтрока.НомерГТДОприходование = Неопределено;
		
		ТекущаяСтрока.Цена = 0;
		ТекущаяСтрока.Сумма = 0;
	Иначе
		ТекущаяСтрока.Номенклатура = Неопределено;
		ТекущаяСтрока.Характеристика = Неопределено;
		ТекущаяСтрока.Партия = Неопределено;
		ТекущаяСтрока.СерииНоменклатуры = Неопределено;
		ТекущаяСтрока.ЕдиницаИзмерения = Неопределено;
		ТекущаяСтрока.СтранаПроисхождения = Неопределено;
		ТекущаяСтрока.НомерГТД = Неопределено;
		ТекущаяСтрока.НеобходимостьВводаСправкиНаАлкоголь = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИнформациюОСписанииИОприходовании(ЭтоОприходование = Ложь)
	
	Модифицированность = Истина;
	Для Каждого ТекущаяСтрокаИдентификатор Из Элементы.Запасы.ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = Объект.Запасы.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
		ОчиститьДанныеВСтроке(ТекущаяСтрока, ЭтоОприходование);
		
		// Серии номенклатуры
		Если ЭтоОприходование <> Неопределено И ЭтоОприходование Тогда
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатурыОприходование, ТекущаяСтрока,
				ИспользоватьСерииНоменклатурыОстатки, , "СерииНоменклатурыОприходование");
		Иначе
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущаяСтрока,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписываемуюНоменклатуру(Команда)
	
	ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ОчиститьСписываемуюПриходуемуюНоменклатуруЗавершение", ЭтотОбъект, Ложь);
	ПоказатьВопрос(
		ОписаниеОповещенияВопрос, 
		НСтр("ru = 'Очистить списываемую номенклатуру?'"), 
		РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПриходуемуюНоменклатуру(Команда)
	
	ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ОчиститьСписываемуюПриходуемуюНоменклатуруЗавершение", ЭтотОбъект, Истина);
	ПоказатьВопрос(
		ОписаниеОповещенияВопрос, 
		НСтр("ru = 'Очистить приходуемую номенклатуру?'"), 
		РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписываемуюПриходуемуюНоменклатуруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьИнформациюОСписанииИОприходовании(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВыполнить()

&НаКлиенте
Процедура ПоменятьМестамиДанныеОСписанииИОприходовании(Команда)
	
	ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ПоменятьМестамиДанныеОСписанииИОприходованииЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещенияВопрос, 
		НСтр("ru = 'Поменять данные о списании и оприходовании?'"), 
		РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьМестамиДанныеОСписанииИОприходованииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоменятьМестамиДанныеОСписанииИОприходованииФрагмент();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВыполнить()

&НаКлиенте
Процедура ПоменятьМестамиДанныеОСписанииИОприходованииФрагмент()
	
	Модифицированность = Истина;
	Для Каждого ТекущаяСтрокаИдентификатор Из Элементы.Запасы.ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = Объект.Запасы.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
		
		ТекДанныеСписания = Новый Структура();
		
		ТекДанныеСписания.Вставить("НоменклатураОприходование", ТекущаяСтрока.Номенклатура);
		ТекДанныеСписания.Вставить("ХарактеристикаОприходование", ТекущаяСтрока.Характеристика);
		ТекДанныеСписания.Вставить("ПартияОприходование", ТекущаяСтрока.Партия);
		ТекДанныеСписания.Вставить("СерииНоменклатурыОприходование", ТекущаяСтрока.СерииНоменклатуры);
		ТекДанныеСписания.Вставить("ЕдиницаИзмеренияОприходование", ТекущаяСтрока.ЕдиницаИзмерения);
		ТекДанныеСписания.Вставить("СтранаПроисхожденияОприходование", ТекущаяСтрока.СтранаПроисхождения);
		ТекДанныеСписания.Вставить("НомерГТДОприходование", ТекущаяСтрока.НомерГТД);
		
		ТекущаяСтрока.Номенклатура = ТекущаяСтрока.НоменклатураОприходование;
		ТекущаяСтрока.Характеристика = ТекущаяСтрока.ХарактеристикаОприходование;
		ТекущаяСтрока.Партия = ТекущаяСтрока.ПартияОприходование;
		ТекущаяСтрока.СерииНоменклатуры = ТекущаяСтрока.СерииНоменклатурыОприходование;
		ТекущаяСтрока.ЕдиницаИзмерения = ТекущаяСтрока.ЕдиницаИзмеренияОприходование;
		ТекущаяСтрока.СтранаПроисхождения = ТекущаяСтрока.СтранаПроисхожденияОприходование;
		ТекущаяСтрока.НомерГТД = ТекущаяСтрока.НомерГТДОприходование;
		ТекущаяСтрока.ИспользоватьХарактеристики = ТекущаяСтрока.ИспользоватьХарактеристикиОприходование;
		ТекущаяСтрока.ПроверятьЗаполнениеХарактеристики = ТекущаяСтрока.ПроверятьЗаполнениеХарактеристикиОприходование;
		ТекущаяСтрока.ЗаполнениеХарактеристикиПроверено = ТекущаяСтрока.ЗаполнениеХарактеристикиПровереноОприходование;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекДанныеСписания);
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Номенклатура", ТекущаяСтрока.НоменклатураОприходование);
		СтруктураДанные.Вставить("Характеристика", ТекущаяСтрока.ХарактеристикаОприходование);
		
		// Заполним цену и сумму
		Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			
			СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
			СтруктураДанные.Вставить("Организация", Объект.Организация);
			СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
			СтруктураДанные.Вставить("Коэффициент", 1);
			
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, Истина);
			
			ТекущаяСтрока.Цена = СтруктураДанные.Цена;
			ТекущаяСтрока.Сумма = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;
			
		Иначе
			
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			
		КонецЕсли;
		
		// Перекинем данные о серийных номерах
		СтруктураПоиска = Новый Структура("КлючСвязи", ТекущаяСтрока.КлючСвязи);
		МассивСтрок = Объект.СерииНоменклатуры.НайтиСтроки(СтруктураПоиска);
		
		// Запомним данные из ТЧ СерииНоменклатуры.
		МассивСерийНоменклатурыСписание = Новый Массив;
		
		Для Каждого ТекущаяСтрокаМассива Из МассивСтрок Цикл
			
			СтруктураСтрока = Новый Структура("Серия, КлючСвязи", ТекущаяСтрокаМассива.Серия, ТекущаяСтрокаМассива.КлючСвязи);
			МассивСерийНоменклатурыСписание.Добавить(СтруктураСтрока);
			
		КонецЦикла;
		
		// Удалим строки с серийными номерами в ТЧ СерииНоменклатуры.
		Сч = МассивСтрок.Количество() - 1;
		Пока Сч >= 0 Цикл
			Объект.СерииНоменклатуры.Удалить(МассивСтрок[Сч]);
			Сч = Сч - 1;
		КонецЦикла;
		
		// Обработаем данные из ТЧ СерииНоменклатурыОприходование
		МассивСтрок = Объект.СерииНоменклатурыОприходование.НайтиСтроки(СтруктураПоиска);
		
		Сч = МассивСтрок.Количество() - 1;
		Пока Сч >= 0 Цикл
			
			ТекущаяСтрокаМассива = МассивСтрок[Сч];
			
			НоваяСтрокаСерииНоменклатурыСписание = Объект.СерииНоменклатуры.Добавить();
			НоваяСтрокаСерииНоменклатурыСписание.КлючСвязи = ТекущаяСтрокаМассива.КлючСвязи;
			НоваяСтрокаСерииНоменклатурыСписание.Серия = ТекущаяСтрокаМассива.Серия;
			
			Объект.СерииНоменклатурыОприходование.Удалить(ТекущаяСтрокаМассива);
			
			Сч = Сч - 1;
		КонецЦикла;
		
		Для каждого ТекущаяСтрокаМассива Из МассивСерийНоменклатурыСписание Цикл
		
			НоваяСтрокаСерииНоменклатурыОприходование = Объект.СерииНоменклатурыОприходование.Добавить();
			НоваяСтрокаСерииНоменклатурыОприходование.КлючСвязи = ТекущаяСтрокаМассива.КлючСвязи;
			НоваяСтрокаСерииНоменклатурыОприходование.Серия = ТекущаяСтрокаМассива.Серия;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧасть(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Табличная часть не заполнена.'"));
	Иначе
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ОчиститьТабличнуюЧастьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(
			ОписаниеОповещенияВопрос, 
			НСтр("ru = 'Табличная часть будет очищена, продолжить?'"),
			РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Запасы.Очистить();
		Объект.СерииНоменклатуры.Очистить();
		Объект.СерииНоменклатурыОприходование.Очистить();
	КонецЕсли;
	
КонецПроцедуры  // ЗаполнитьВыполнить()

&НаКлиенте
Процедура РазделитьСписываемуюИПриходуемуюНоменклатуру(Команда)
	
	РазделитьСписываемуюИПриходуемуюНоменклатуру2();
	
КонецПроцедуры

&НаКлиенте
Процедура РазделитьСписываемуюИПриходуемуюНоменклатуру2(ТолькоВыделенные = Истина)
	
	Модифицированность = Истина;
	
	Если ТолькоВыделенные Тогда
		
		Для Каждого ВыделеннаяСтрокаИдентификатор Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ВыделеннаяСтрока = Объект.Запасы.НайтиПоИдентификатору(ВыделеннаяСтрокаИдентификатор);
			Если НЕ ВыделеннаяСтрока.Номенклатура.Пустая() И НЕ ВыделеннаяСтрока.НоменклатураОприходование.Пустая() Тогда
				
				РазделитьСтроку(ВыделеннаяСтрока);
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ВыделеннаяСтрока Из Объект.Запасы Цикл
			Если НЕ ВыделеннаяСтрока.Номенклатура.Пустая() И НЕ ВыделеннаяСтрока.НоменклатураОприходование.Пустая() Тогда
				
				РазделитьСтроку(ВыделеннаяСтрока);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделитьСтроку(ВыделеннаяСтрока)
	
	НоваяСтрока = Объект.Запасы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыделеннаяСтрока);
	
	ОчиститьДанныеВСтроке(ВыделеннаяСтрока, Истина);
	ОчиститьДанныеВСтроке(НоваяСтрока, Ложь);
	
	НоваяСтрока.КлючСвязи = 0;
	ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, НоваяСтрока, "КлючСвязи");
	
	СтарыйКлючСвязи = ВыделеннаяСтрока.КлючСвязи;
	ЭтоОприходование = Истина;
	УстановитьНовыйКлючСвязиВТаблицеСерийНоменклатурыНаКлиенте(НоваяСтрока, СтарыйКлючСвязи, ЭтоОприходование);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйКлючСвязиВТаблицеСерийНоменклатурыНаКлиенте(НоваяСтрока, СтарыйКлючСвязи, ЭтоОприходование, КоличествоСтрок = 0)
	
	СтруктураПоиска = Новый Структура("КлючСвязи", СтарыйКлючСвязи);
	
	Если ЭтоОприходование Тогда
		МассивСтрок = Объект.СерииНоменклатурыОприходование.НайтиСтроки(СтруктураПоиска);
	Иначе
		МассивСтрок = Объект.СерииНоменклатуры.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	ТекСч = 0;
	Для каждого ТекущаяСтрокаМассива Из МассивСтрок Цикл
		ТекСч = ТекСч + 1;
		Если КоличествоСтрок > 0 И ТекСч > КоличествоСтрок Тогда
			Прервать;
		КонецЕсли;
		ТекущаяСтрокаМассива.КлючСвязи = НоваяСтрока.КлючСвязи;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНовыйКлючСвязиВТаблицеСерийНоменклатурыНаСервере(НоваяСтрока, СтарыйКлючСвязи, ЭтоОприходование, КоличествоСтрок = 0)
	
	СтруктураПоиска = Новый Структура("КлючСвязи", СтарыйКлючСвязи);
	
	Если ЭтоОприходование Тогда
		МассивСтрок = Объект.СерииНоменклатурыОприходование.НайтиСтроки(СтруктураПоиска);
	Иначе
		МассивСтрок = Объект.СерииНоменклатуры.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	ТекСч = 0;
	Для каждого ТекущаяСтрокаМассива Из МассивСтрок Цикл
		ТекСч = ТекСч + 1;
		Если КоличествоСтрок > 0 И ТекСч > КоличествоСтрок Тогда
			Прервать;
		КонецЕсли;
		ТекущаяСтрокаМассива.КлючСвязи = НоваяСтрока.КлючСвязи;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьАвтоматически(Команда)
	
	РазделитьСписываемуюИПриходуемуюНоменклатуру2(Ложь);
	
	Результат = ЗачестьПоПересортицеАвтоСервер();
	Если Результат = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Среди списываемых и приходуемых товаров нет товаров, по которым возможно провести автоматический зачет.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗачестьПоПересортицеАвтоСервер()
	
	Результат = 0;
			
	// по пересортице
	ТаблицаВариантов = ПолучитьВариантыЗачетаПоПересортицеСервер();
	ЗачестьТоварыПоПересортице(ТаблицаВариантов, Результат);
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьВариантыЗачетаПоПересортицеСервер()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Объект.Запасы.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Партия,
	|	ТаблицаТовары.СерииНоменклатуры
	|ПОМЕСТИТЬ ТаблицаКСписанию
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НоменклатураОприходование,
	|	ТаблицаТовары.ХарактеристикаОприходование,
	|	ТаблицаТовары.ПартияОприходование,
	|	ТаблицаТовары.СерииНоменклатурыОприходование
	|ПОМЕСТИТЬ ТаблицаКОприходованию
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.НоменклатураОприходование <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаКСписанию.Номенклатура,
	|	ТаблицаКСписанию.Характеристика,
	|	ТаблицаКСписанию.Партия,
	|	ТаблицаКСписанию.СерииНоменклатуры,
	|	ТаблицаКОприходованию.НоменклатураОприходование,
	|	ТаблицаКОприходованию.ХарактеристикаОприходование,
	|	ТаблицаКОприходованию.ПартияОприходование,
	|	ТаблицаКОприходованию.СерииНоменклатурыОприходование,
	|	ВЫБОР
	|		КОГДА ТаблицаКСписанию.Характеристика = ТаблицаКОприходованию.ХарактеристикаОприходование
	|				И ТаблицаКСписанию.Партия = ТаблицаКОприходованию.ПартияОприходование
	|				И ТаблицаКСписанию.СерииНоменклатуры = ТаблицаКОприходованию.СерииНоменклатурыОприходование
	|			ТОГДА 1
	|		КОГДА ТаблицаКСписанию.Характеристика = ТаблицаКОприходованию.ХарактеристикаОприходование
	|				И ТаблицаКСписанию.Партия = ТаблицаКОприходованию.ПартияОприходование
	|			ТОГДА 2
	|		КОГДА ТаблицаКСписанию.Характеристика = ТаблицаКОприходованию.ХарактеристикаОприходование
	|				И ТаблицаКСписанию.СерииНоменклатуры = ТаблицаКОприходованию.СерииНоменклатурыОприходование
	|			ТОГДА 3
	|		КОГДА ТаблицаКСписанию.Характеристика = ТаблицаКОприходованию.ХарактеристикаОприходование
	|			ТОГДА 4
	|		КОГДА ТаблицаКСписанию.Партия = ТаблицаКОприходованию.ПартияОприходование
	|				И ТаблицаКСписанию.СерииНоменклатуры = ТаблицаКОприходованию.СерииНоменклатурыОприходование
	|			ТОГДА 5
	|		КОГДА ТаблицаКСписанию.Партия = ТаблицаКОприходованию.ПартияОприходование
	|			ТОГДА 6
	|		КОГДА ТаблицаКСписанию.СерииНоменклатуры = ТаблицаКОприходованию.СерииНоменклатурыОприходование
	|			ТОГДА 7
	|		ИНАЧЕ 8
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	ТаблицаКСписанию КАК ТаблицаКСписанию
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКОприходованию КАК ТаблицаКОприходованию
	|		ПО ТаблицаКСписанию.Номенклатура = ТаблицаКОприходованию.НоменклатураОприходование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаКОприходованию.НоменклатураОприходование,
	|	Приоритет,
	|	ТаблицаКОприходованию.ХарактеристикаОприходование,
	|	ТаблицаКОприходованию.ПартияОприходование,
	|	ТаблицаКОприходованию.СерииНоменклатурыОприходование,
	|	ТаблицаКСписанию.Номенклатура,
	|	ТаблицаКСписанию.Характеристика,
	|	ТаблицаКСписанию.Партия,
	|	ТаблицаКСписанию.СерииНоменклатуры";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

&НаСервере
Процедура ЗачестьТоварыПоПересортице(ТаблицаВариантов, Результат)
	
	ТаблицаТоваров = ТаблицаВариантов.Скопировать(, "НоменклатураОприходование, ХарактеристикаОприходование, ПартияОприходование, СерииНоменклатурыОприходование");
	ТаблицаТоваров.Свернуть("НоменклатураОприходование, ХарактеристикаОприходование, ПартияОприходование, СерииНоменклатурыОприходование");
	Для Каждого ТекущаяСтрокаТаблицаТоваров Из ТаблицаТоваров Цикл
		
		Если ТекущаяСтрокаТаблицаТоваров.НоменклатураОприходование.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСтрокВариантов = ТаблицаВариантов.НайтиСтроки(
			Новый Структура("НоменклатураОприходование, ХарактеристикаОприходование, ПартияОприходование, СерииНоменклатурыОприходование",
				ТекущаяСтрокаТаблицаТоваров.НоменклатураОприходование, ТекущаяСтрокаТаблицаТоваров.ХарактеристикаОприходование,
				ТекущаяСтрокаТаблицаТоваров.ПартияОприходование, ТекущаяСтрокаТаблицаТоваров.СерииНоменклатурыОприходование));
		
		МассивСтрокТоварыОприходование = Объект.Запасы.НайтиСтроки(
			Новый Структура("НоменклатураОприходование, ХарактеристикаОприходование, ПартияОприходование, СерииНоменклатурыОприходование, Номенклатура",
				ТекущаяСтрокаТаблицаТоваров.НоменклатураОприходование, ТекущаяСтрокаТаблицаТоваров.ХарактеристикаОприходование,
				ТекущаяСтрокаТаблицаТоваров.ПартияОприходование, ТекущаяСтрокаТаблицаТоваров.СерииНоменклатурыОприходование, Справочники.Номенклатура.ПустаяСсылка()));
		
		Если МассивСтрокТоварыОприходование.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТоварыОприходование = МассивСтрокТоварыОприходование[0];
		НужноРаспределить = СтрокаТоварыОприходование.Количество;
		Для Каждого Вариант Из МассивСтрокВариантов Цикл
			МассивСтрокТоварыСписываемые = Объект.Запасы.НайтиСтроки(
				Новый Структура("Номенклатура, Характеристика, Партия, СерииНоменклатуры, НоменклатураОприходование",
					Вариант.Номенклатура, Вариант.Характеристика, Вариант.Партия, Вариант.СерииНоменклатуры, Справочники.Номенклатура.ПустаяСсылка())
				);
			
			Если МассивСтрокТоварыСписываемые.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТоварыСписываемые = МассивСтрокТоварыСписываемые[0];
			
			НужноРаспределить = НужноРаспределить - Мин(СтрокаТоварыОприходование.Количество, СтрокаТоварыСписываемые.Количество);
			
			Результат = Результат + 1;
			
			МенятьСерииНоменклатурыСтрока = Ложь;
			Сопоставить2СтрокиНаСервере(СтрокаТоварыОприходование, СтрокаТоварыСписываемые, МенятьСерииНоменклатурыСтрока);
			
			Если НужноРаспределить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьИнформациюОСерийныхНомерахВТЧ();
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОСерийныхНомерахВТЧ()
	
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		Если НЕ ТекущаяСтрока.Номенклатура.Пустая() Тогда
			ТекущаяСтрока.СерииНоменклатуры = ПолучитьПредставлениеСерийНоменклатурыНаСервере(ТекущаяСтрока, Ложь);
		КонецЕсли;
		Если НЕ ТекущаяСтрока.НоменклатураОприходование.Пустая() Тогда
			ТекущаяСтрока.СерииНоменклатурыОприходование = ПолучитьПредставлениеСерийНоменклатурыНаСервере(ТекущаяСтрока, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОСписываемойНоменклатуреНаСервере(СтрокаТоварыПриходуемые, СтрокаТоварыСписываемые, МенятьСерииНоменклатурыСтрока = Истина)
	
	СтрокаТоварыПриходуемые.Номенклатура = СтрокаТоварыСписываемые.Номенклатура;
	СтрокаТоварыПриходуемые.Характеристика = СтрокаТоварыСписываемые.Характеристика;
	СтрокаТоварыПриходуемые.Партия = СтрокаТоварыСписываемые.Партия;
	Если МенятьСерииНоменклатурыСтрока Тогда
		СтрокаТоварыПриходуемые.СерииНоменклатуры = СтрокаТоварыСписываемые.СерииНоменклатуры;
	КонецЕсли;
	СтрокаТоварыПриходуемые.ЕдиницаИзмерения = СтрокаТоварыСписываемые.ЕдиницаИзмерения;
	СтрокаТоварыПриходуемые.СтранаПроисхождения = СтрокаТоварыСписываемые.СтранаПроисхождения;
	СтрокаТоварыПриходуемые.НомерГТД = СтрокаТоварыСписываемые.НомерГТД;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеОСписываемойНоменклатуреНаКлиенте(СтрокаТоварыПриходуемые, СтрокаТоварыСписываемые)
	
	СтрокаТоварыПриходуемые.Номенклатура = СтрокаТоварыСписываемые.Номенклатура;
	СтрокаТоварыПриходуемые.Характеристика = СтрокаТоварыСписываемые.Характеристика;
	СтрокаТоварыПриходуемые.Партия = СтрокаТоварыСписываемые.Партия;
	СтрокаТоварыПриходуемые.ЕдиницаИзмерения = СтрокаТоварыСписываемые.ЕдиницаИзмерения;
	СтрокаТоварыПриходуемые.СтранаПроисхождения = СтрокаТоварыСписываемые.СтранаПроисхождения;
	СтрокаТоварыПриходуемые.НомерГТД = СтрокаТоварыСписываемые.НомерГТД;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеОПриходуемойНоменклатуреНаКлиенте(СтрокаТоварыПриходуемые, СтрокаТоварыСписываемые)
	
	СтрокаТоварыСписываемые.НоменклатураОприходование = СтрокаТоварыПриходуемые.НоменклатураОприходование;
	СтрокаТоварыСписываемые.ХарактеристикаОприходование = СтрокаТоварыПриходуемые.ХарактеристикаОприходование;
	СтрокаТоварыСписываемые.ПартияОприходование = СтрокаТоварыПриходуемые.ПартияОприходование;
	СтрокаТоварыСписываемые.ЕдиницаИзмеренияОприходование = СтрокаТоварыПриходуемые.ЕдиницаИзмеренияОприходование;
	СтрокаТоварыСписываемые.СтранаПроисхожденияОприходование = СтрокаТоварыПриходуемые.СтранаПроисхожденияОприходование;
	СтрокаТоварыСписываемые.НомерГТДОприходование = СтрокаТоварыПриходуемые.НомерГТДОприходование;
	
	СтрокаТоварыСписываемые.Цена = СтрокаТоварыПриходуемые.Цена;
	СтрокаТоварыСписываемые.Сумма = СтрокаТоварыПриходуемые.Сумма;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОПриходуемойНоменклатуреНаСервере(СтрокаТоварыПриходуемые, СтрокаТоварыСписываемые, МенятьСерииНоменклатурыСтрока = Истина)
	
	СтрокаТоварыСписываемые.НоменклатураОприходование = СтрокаТоварыПриходуемые.НоменклатураОприходование;
	СтрокаТоварыСписываемые.ХарактеристикаОприходование = СтрокаТоварыПриходуемые.ХарактеристикаОприходование;
	СтрокаТоварыСписываемые.ПартияОприходование = СтрокаТоварыПриходуемые.ПартияОприходование;
	СтрокаТоварыСписываемые.ЕдиницаИзмеренияОприходование = СтрокаТоварыПриходуемые.ЕдиницаИзмеренияОприходование;
	СтрокаТоварыСписываемые.СтранаПроисхожденияОприходование = СтрокаТоварыПриходуемые.СтранаПроисхожденияОприходование;
	СтрокаТоварыСписываемые.НомерГТДОприходование = СтрокаТоварыПриходуемые.НомерГТДОприходование;
	
	СтрокаТоварыСписываемые.Цена = СтрокаТоварыПриходуемые.Цена;
	СтрокаТоварыСписываемые.Сумма = СтрокаТоварыПриходуемые.Сумма;
	
КонецПроцедуры

&НаКлиенте
Процедура Сопоставить2Выделенных(Команда)
	
	Модифицированность = Истина;
	
	Если Элементы.Запасы.ВыделенныеСтроки.Количество() <> 2 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выберите, удерживая клавишу ""Ctrl"", в табличной части 2 строки и нажмите эту кнопку'"));
		Возврат;
	КонецЕсли;
	
	Строка1 = Объект.Запасы.НайтиПоИдентификатору(Элементы.Запасы.ВыделенныеСтроки[0]);
	Строка2 = Объект.Запасы.НайтиПоИдентификатору(Элементы.Запасы.ВыделенныеСтроки[1]);
	
	Если (ЗначениеЗаполнено(Строка1.Номенклатура) И ЗначениеЗаполнено(Строка1.НоменклатураОприходование))
		ИЛИ
		(ЗначениеЗаполнено(Строка2.Номенклатура) И ЗначениеЗаполнено(Строка2.НоменклатураОприходование))
		ИЛИ
		(ЗначениеЗаполнено(Строка1.Номенклатура) И ЗначениеЗаполнено(Строка2.Номенклатура)
			И НЕ ЗначениеЗаполнено(Строка1.НоменклатураОприходование) И НЕ ЗначениеЗаполнено(Строка2.НоменклатураОприходование))
		ИЛИ
		(НЕ ЗначениеЗаполнено(Строка1.Номенклатура) И НЕ ЗначениеЗаполнено(Строка2.Номенклатура)
			И ЗначениеЗаполнено(Строка1.НоменклатураОприходование) И ЗначениеЗаполнено(Строка2.НоменклатураОприходование))
		Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В одной строке должна быть выбрана только списываемая номенклатура, а в другой только приходуемая номенклатура.'"));
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка1.НоменклатураОприходование) Тогда
		СтрокаОприходование = Строка1;
		СтрокаСписание = Строка2;
	Иначе
		СтрокаОприходование = Строка2;
		СтрокаСписание = Строка1;
	КонецЕсли;
	
	Сопоставить2СтрокиНаКлиенте(СтрокаОприходование, СтрокаСписание);
	
КонецПроцедуры

&НаКлиенте
Процедура Сопоставить2СтрокиНаКлиенте(СтрокаОприходование, СтрокаСписание)
	
	СтрокаСписание.ЗаполнениеХарактеристикиПроверено = Ложь;
	СтрокаСписание.ЗаполнениеХарактеристикиПровереноОприходование = Ложь;
	СтрокаОприходование.ЗаполнениеХарактеристикиПроверено = Ложь;	
	СтрокаОприходование.ЗаполнениеХарактеристикиПровереноОприходование = Ложь;
	
	Если СтрокаОприходование.Количество >= СтрокаСписание.Количество Тогда
		
		НужноУдалитьСтрокуОприходование = (СтрокаОприходование.Количество = СтрокаСписание.Количество);
		
		СтрокаОприходование.Количество = СтрокаОприходование.Количество - СтрокаСписание.Количество;
		
		ЗаполнитьДанныеОПриходуемойНоменклатуреНаКлиенте(СтрокаОприходование, СтрокаСписание);
		
		СтарыйКлючСвязи = СтрокаОприходование.КлючСвязи;
		ЭтоОприходование = Истина;
		
		Если НужноУдалитьСтрокуОприходование Тогда
			УстановитьНовыйКлючСвязиВТаблицеСерийНоменклатурыНаКлиенте(СтрокаСписание, СтарыйКлючСвязи, ЭтоОприходование);
			СтрокаСписание.СерииНоменклатурыОприходование = СтрокаОприходование.СерииНоменклатурыОприходование;
			
			Объект.Запасы.Удалить(СтрокаОприходование);
		Иначе
			УстановитьНовыйКлючСвязиВТаблицеСерийНоменклатурыНаКлиенте(СтрокаСписание, СтарыйКлючСвязи, ЭтоОприходование, СтрокаСписание.Количество);
			СтрокаСписание.СерииНоменклатурыОприходование = ПолучитьПредставлениеСерийНоменклатурыНаКлиенте(СтрокаСписание, ЭтоОприходование);
			СтрокаОприходование.СерииНоменклатурыОприходование = ПолучитьПредставлениеСерийНоменклатурыНаКлиенте(СтрокаОприходование, ЭтоОприходование);
		КонецЕсли;
		
	Иначе
		
		СтрокаСписание.Количество = СтрокаСписание.Количество - СтрокаОприходование.Количество;
		
		ЗаполнитьДанныеОСписываемойНоменклатуреНаКлиенте(СтрокаОприходование, СтрокаСписание);
		
		СтарыйКлючСвязи = СтрокаСписание.КлючСвязи;
		ЭтоОприходование = Ложь;
		УстановитьНовыйКлючСвязиВТаблицеСерийНоменклатурыНаКлиенте(СтрокаОприходование, СтарыйКлючСвязи, ЭтоОприходование, СтрокаОприходование.Количество);
		СтрокаСписание.СерииНоменклатуры = ПолучитьПредставлениеСерийНоменклатурыНаКлиенте(СтрокаСписание, ЭтоОприходование);
		СтрокаОприходование.СерииНоменклатуры = ПолучитьПредставлениеСерийНоменклатурыНаКлиенте(СтрокаОприходование, ЭтоОприходование);
		
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура Сопоставить2СтрокиНаСервере(СтрокаОприходование, СтрокаСписание, МенятьСерииНоменклатурыСтрока = Истина)
	
	Если СтрокаОприходование.Количество >= СтрокаСписание.Количество Тогда
		
		НужноУдалитьСтрокуОприходование = (СтрокаОприходование.Количество = СтрокаСписание.Количество);
		
		СтрокаОприходование.Количество = СтрокаОприходование.Количество - СтрокаСписание.Количество;
		
		ЗаполнитьДанныеОПриходуемойНоменклатуреНаСервере(СтрокаОприходование, СтрокаСписание, МенятьСерииНоменклатурыСтрока);
		
		СтарыйКлючСвязи = СтрокаОприходование.КлючСвязи;
		ЭтоОприходование = Истина;
		
		Если НужноУдалитьСтрокуОприходование Тогда
			УстановитьНовыйКлючСвязиВТаблицеСерийНоменклатурыНаСервере(СтрокаСписание, СтарыйКлючСвязи, ЭтоОприходование);
			Если МенятьСерииНоменклатурыСтрока Тогда
				СтрокаСписание.СерииНоменклатурыОприходование = СтрокаОприходование.СерииНоменклатурыОприходование;
			КонецЕсли;
			
			Объект.Запасы.Удалить(СтрокаОприходование);
		Иначе
			УстановитьНовыйКлючСвязиВТаблицеСерийНоменклатурыНаСервере(СтрокаСписание, СтарыйКлючСвязи, ЭтоОприходование, СтрокаСписание.Количество);
			Если МенятьСерииНоменклатурыСтрока Тогда
				СтрокаСписание.СерииНоменклатурыОприходование = ПолучитьПредставлениеСерийНоменклатурыНаСервере(СтрокаСписание, ЭтоОприходование);
				СтрокаОприходование.СерииНоменклатурыОприходование = ПолучитьПредставлениеСерийНоменклатурыНаСервере(СтрокаОприходование, ЭтоОприходование);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		СтрокаСписание.Количество = СтрокаСписание.Количество - СтрокаОприходование.Количество;
		
		ЗаполнитьДанныеОСписываемойНоменклатуреНаСервере(СтрокаОприходование, СтрокаСписание, МенятьСерииНоменклатурыСтрока);
		
		СтарыйКлючСвязи = СтрокаСписание.КлючСвязи;
		ЭтоОприходование = Ложь;
		УстановитьНовыйКлючСвязиВТаблицеСерийНоменклатурыНаСервере(СтрокаОприходование, СтарыйКлючСвязи, ЭтоОприходование, СтрокаОприходование.Количество);
		Если МенятьСерииНоменклатурыСтрока Тогда
			СтрокаСписание.СерииНоменклатуры = ПолучитьПредставлениеСерийНоменклатурыНаСервере(СтрокаСписание, ЭтоОприходование);
			СтрокаОприходование.СерииНоменклатуры = ПолучитьПредставлениеСерийНоменклатурыНаСервере(СтрокаОприходование, ЭтоОприходование);
		КонецЕсли;
		
	КонецЕсли;
	
	Если 1 = 0 Тогда
		Если СтрокаОприходование.Количество >= СтрокаСписание.Количество Тогда
			
			НужноУдалитьСтрокуОприходование = (СтрокаОприходование.Количество = СтрокаСписание.Количество);
			
			СтрокаОприходование.Количество = СтрокаОприходование.Количество - СтрокаСписание.Количество;
			
			ЗаполнитьДанныеОПриходуемойНоменклатуреНаСервере(СтрокаОприходование, СтрокаСписание);
			
			Если НужноУдалитьСтрокуОприходование Тогда
				Объект.Запасы.Удалить(СтрокаОприходование);
			КонецЕсли;
			
		Иначе
			
			СтрокаСписание.Количество = СтрокаСписание.Количество - СтрокаОприходование.Количество;
			
			ЗаполнитьДанныеОСписываемойНоменклатуреНаСервере(СтрокаОприходование, СтрокаСписание);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПредставлениеСерийНоменклатурыНаКлиенте(ТекущаяСтрока, ЭтоОприходование = Ложь)
	
	СтруктураПоиска = Новый Структура("КлючСвязи", ТекущаяСтрока.КлючСвязи);
	Если ЭтоОприходование Тогда
		МассивСтрок = Объект.СерииНоменклатурыОприходование.НайтиСтроки(СтруктураПоиска);
	Иначе
		МассивСтрок = Объект.СерииНоменклатуры.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	СтроковоеПредставлениеСерийНоменклатуры = "";
	Для Каждого ТекущаяСтрокаМассива Из МассивСтрок Цикл
		СтроковоеПредставлениеСерийНоменклатуры = СтроковоеПредставлениеСерийНоменклатуры + ТекущаяСтрокаМассива.Серия+"; ";
	КонецЦикла;
	СтроковоеПредставлениеСерийНоменклатуры = Лев(СтроковоеПредставлениеСерийНоменклатуры, Мин(СтрДлина(СтроковоеПредставлениеСерийНоменклатуры)-2,150));
	
	Возврат СтроковоеПредставлениеСерийНоменклатуры;
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеСерийНоменклатурыНаСервере(ТекущаяСтрока, ЭтоОприходование = Ложь)
	
	СтруктураПоиска = Новый Структура("КлючСвязи", ТекущаяСтрока.КлючСвязи);
	Если ЭтоОприходование Тогда
		МассивСтрок = Объект.СерииНоменклатурыОприходование.НайтиСтроки(СтруктураПоиска);
	Иначе
		МассивСтрок = Объект.СерииНоменклатуры.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	СтроковоеПредставлениеСерийНоменклатуры = "";
	Для Каждого ТекущаяСтрокаМассива Из МассивСтрок Цикл
		СтроковоеПредставлениеСерийНоменклатуры = СтроковоеПредставлениеСерийНоменклатуры + ТекущаяСтрокаМассива.Серия+"; ";
	КонецЦикла;
	СтроковоеПредставлениеСерийНоменклатуры = Лев(СтроковоеПредставлениеСерийНоменклатуры, Мин(СтрДлина(СтроковоеПредставлениеСерийНоменклатуры)-2,150));
	
	Возврат СтроковоеПредставлениеСерийНоменклатуры;
	
КонецФункции

#Область ИнтеграцияИС

// ИнтеграцияИС

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)

	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект, Объект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры
// Конец ИнтеграцияИС

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов()
	ДополнительныеСвойства = Новый Структура("ИзменениеКлючевыхРеквизитов", Истина);
	СерииНоменклатурыУНФ.ЗаполнитьПризнакиИспользованияСерий(Объект, ДополнительныеСвойства);
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", ДокументыУНФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", Константы.УчетПоКомпании.Компания(Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, ЭтоОприходование = Ложь)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	СтруктураДанные.Вставить("ЭтоАлкогольнаяПродукция", СтруктураДанные.Номенклатура.АлкогольнаяПродукция);
	// Наборы
	СтруктураДанные.Вставить("ЭтоНабор", СтруктураДанные.Номенклатура.ЭтоНабор);
	
		// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	Если ЭтоОприходование Тогда
		Если СтруктураДанные.Свойство("ВидЦен") Тогда
			СтруктураДанные.Вставить("ВалютаДокумента", Константы.ВалютаУчета.Получить());
			Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
			СтруктураДанные.Вставить("Цена", Цена);
		Иначе
			СтруктураДанные.Вставить("Цена", 0);
		КонецЕсли;
	КонецЕсли;

	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии")
			Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации")
				Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", 1);
	КонецЕсли;
	
	СтруктураДанные.Вставить("ВалютаДокумента", Константы.ВалютаУчета.Получить());
	Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
	СтруктураДанные.Вставить("Цена", Цена);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаСервере
Процедура ЗаполнитьПоИнвентаризацииВсеРасхожденияНаСервере(ДокументДляЗаполнения)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьПоИнвентаризацииВсеРасхождения(ДокументДляЗаполнения, Истина);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

// ПодключаемоеОборудование
// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ПересортицаЗапасов.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные",СтруктураДанные));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено 
			ИЛИ ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор"
			, ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор));
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("СтранаПроисхождения", НоваяСтрока.СтранаПроисхождения);
				
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено 
		ИЛИ ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
		ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор"
		, ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор));
	Иначе
		МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
			НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
			НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
			НоваяСтрока.Количество = ТекШтрихкод.Количество;
			НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
			
			ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("СтранаПроисхождения", НоваяСтрока.СтранаПроисхождения);
			
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Иначе
			НоваяСтрока = МассивСтрокТЧ[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
		Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
			СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		Если ТекНекорректныйШтрихкод.Свойство("ЭтоНабор") И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", НСтр("ru = 'Набор'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		КонецЕсли; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

// Устанавливает условное оформления Таб. частей для отображения доступности характеристик
//
&НаСервере
Процедура ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик()
			
			НаименованиеПоляХарактеристика = "ЗапасыХарактеристика";
			НаименованиеПоляХарактеристикаОприходование = "ЗапасыХарактеристикаОприходование";
			
			НаименованиеПоляПартия = "ЗапасыПартия";
			НаименованиеПоляПартияОприходование = "ЗапасыПартияОприходование";

			
			ЗначениеПоиска = ЭтаФорма.Элементы.Найти(НаименованиеПоляХарактеристика);
			ЗначениеПоискаХарактеристикаОприходование = ЭтаФорма.Элементы.Найти(НаименованиеПоляХарактеристикаОприходование);
			
			ЗначениеПоискаПартия = ЭтаФорма.Элементы.Найти(НаименованиеПоляПартия);
			ЗначениеПоискаПартияОприходование = ЭтаФорма.Элементы.Найти(НаименованиеПоляПартияОприходование);

			
			Если НЕ ЗначениеПоиска = Неопределено
				Тогда
				ИмяПоляПроверятьЗаполнениеХарактеристики = "Объект.Запасы.ПроверятьЗаполнениеХарактеристики";
				ИмяПоляИспользоватьХарактеристики = "Объект.Запасы.ИспользоватьХарактеристики";
				ИмяПоляХарактеристики = НаименованиеПоляХарактеристика;
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляИспользоватьХарактеристики, Ложь, ВидСравненияКомпоновкиДанных.Равно);
		
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используется>'"));
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляПроверятьЗаполнениеХарактеристики, Истина, ВидСравненияКомпоновкиДанных.Равно);
				
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
				
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
			КонецЕсли;
			
			Если НЕ ЗначениеПоискаПартия = Неопределено
				Тогда
				ИмяПоляПроверятьЗаполнениеПартии = "Объект.Запасы.ПроверятьЗаполнениеПартий";
				ИмяПоляИспользоватьПартии = "Объект.Запасы.ИспользоватьПартии";
				ИмяПоляПартии = НаименованиеПоляПартия;
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляИспользоватьПартии, Ложь, ВидСравненияКомпоновкиДанных.Равно);
		
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляПартии);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используется>'"));
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляПроверятьЗаполнениеПартии, Истина, ВидСравненияКомпоновкиДанных.Равно);
				
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляПартии);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Партия", Справочники.ПартииНоменклатуры.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляПартии);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
			КонецЕсли;
			
			Если НЕ ЗначениеПоискаХарактеристикаОприходование = Неопределено
				Тогда
				ИмяПоляПроверятьЗаполнениеХарактеристикиОприходование = "Объект.Запасы.ПроверятьЗаполнениеХарактеристикиОприходование";
				ИмяПоляИспользоватьХарактеристикиОприходование = "Объект.Запасы.ИспользоватьХарактеристикиОприходование";
				ИмяПоляХарактеристикиОприходование = НаименованиеПоляХарактеристикаОприходование;
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляИспользоватьХарактеристикиОприходование, Ложь, ВидСравненияКомпоновкиДанных.Равно);
		
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристикиОприходование);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используется>'"));
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляПроверятьЗаполнениеХарактеристикиОприходование, Истина, ВидСравненияКомпоновкиДанных.Равно);
				
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристикиОприходование);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ХарактеристикаОприходование", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристикиОприходование);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
			КонецЕсли;
			
			Если НЕ ЗначениеПоискаПартияОприходование = Неопределено
				Тогда
				ИмяПоляПроверятьЗаполнениеПартии = "Объект.Запасы.ПроверятьЗаполнениеПартийОприходование";
				ИмяПоляИспользоватьПартии = "Объект.Запасы.ИспользоватьПартииОприходование";
				ИмяПоляПартии = НаименованиеПоляПартияОприходование;
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляИспользоватьПартии, Ложь, ВидСравненияКомпоновкиДанных.Равно);
		
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляПартии);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используется>'"));
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляПроверятьЗаполнениеПартии, Истина, ВидСравненияКомпоновкиДанных.Равно);
				
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляПартии);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПартияОприходование", Справочники.ПартииНоменклатуры.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляПартии);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
			КонецЕсли;
	
КонецПроцедуры

// Заполняет поля табличной части Запасы признаками использования характеристик
//
// Параметры:
//  ОткрытиеФормы - Булево. Устанавливается в значение - Истина, если заполнение происходит при открытии формы.
//
&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик(ОткрытиеФормы = Ложь)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыДокумента.Номенклатура КАК Справочник.Номенклатура) КАК Ссылка,
	|	ТаблицаНоменклатурыДокумента.НомерСтроки КАК НомерСтрокиНоменклатуры,
	|	ТаблицаНоменклатурыДокумента.Партия КАК Партия,
	|	ТаблицаНоменклатурыДокумента.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВыборкаИзТабличнойЧастиЗапасы
	|ИЗ
	|	&ТаблицаНоменклатурыДокумента КАК ТаблицаНоменклатурыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыборкаИзТабличнойЧастиЗапасы.НомерСтрокиНоменклатуры КАК НомерСтрокиНоменклатуры,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ПроверятьЗаполнениеХарактеристики КАК ПроверятьЗаполнениеХарактеристики,
	|	ИСТИНА КАК ЗаполнениеХарактеристикиПроверено,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ИспользоватьПартии КАК ИспользоватьПартии,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий
	|ИЗ
	|	ВыборкаИзТабличнойЧастиЗапасы КАК ВыборкаИзТабличнойЧастиЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияНоменклатурыПоУмолчанию КАК ЗначенияНоменклатурыПоУмолчанию
	|		ПО ВыборкаИзТабличнойЧастиЗапасы.Ссылка = ЗначенияНоменклатурыПоУмолчанию.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиНоменклатуры";
	
	ЗапросОприходование = Новый Запрос;
	
	ЗапросОприходование.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыДокумента.НоменклатураОприходование КАК Справочник.Номенклатура) КАК Ссылка,
	|	ТаблицаНоменклатурыДокумента.НомерСтроки КАК НомерСтрокиНоменклатуры,
	|	ТаблицаНоменклатурыДокумента.ПартияОприходование КАК ПартияОприходование,
	|	ТаблицаНоменклатурыДокумента.ХарактеристикаОприходование КАК ХарактеристикаОприходование
	|ПОМЕСТИТЬ ВыборкаИзТабличнойЧастиЗапасы
	|ИЗ
	|	&ТаблицаНоменклатурыДокумента КАК ТаблицаНоменклатурыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыборкаИзТабличнойЧастиЗапасы.НомерСтрокиНоменклатуры КАК НомерСтрокиНоменклатуры,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ИспользоватьХарактеристики КАК ИспользоватьХарактеристикиОприходование,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ПроверятьЗаполнениеХарактеристики КАК ПроверятьЗаполнениеХарактеристикиОприходование,
	|	ИСТИНА КАК ЗаполнениеХарактеристикиПровереноОприходование,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ИспользоватьПартии КАК ИспользоватьПартииОприходование,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартийОприходование
	|ИЗ
	|	ВыборкаИзТабличнойЧастиЗапасы КАК ВыборкаИзТабличнойЧастиЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияНоменклатурыПоУмолчанию КАК ЗначенияНоменклатурыПоУмолчанию
	|		ПО ВыборкаИзТабличнойЧастиЗапасы.Ссылка = ЗначенияНоменклатурыПоУмолчанию.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиНоменклатуры";
	
	
	Если Не ОткрытиеФормы
		Тогда
		ОтборНеПроверенныхСтрок = Новый Структура("ЗаполнениеХарактеристикиПроверено", Ложь);
		МассивНеПроверенныхСтрок = Объект["Запасы"].НайтиСтроки(ОтборНеПроверенныхСтрок);
		
		ТаблицаНоменклатурыДокумента =  Объект["Запасы"].Выгрузить(МассивНеПроверенныхСтрок,"Номенклатура, НомерСтроки, Характеристика, Партия");
		
		Запрос.УстановитьПараметр("ТаблицаНоменклатурыДокумента",ТаблицаНоменклатурыДокумента);
		ВыборкаПоХарактеристикам = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект["Запасы"][ВыборкаПоХарактеристикам.НомерСтрокиНоменклатуры-1],ВыборкаПоХарактеристикам);
		КонецЦикла;
		
		ОтборНеПроверенныхСтрок = Новый Структура("ЗаполнениеХарактеристикиПровереноОприходование", Ложь);
		МассивНеПроверенныхСтрок = Объект["Запасы"].НайтиСтроки(ОтборНеПроверенныхСтрок);
		
		ТаблицаНоменклатурыДокумента = Объект["Запасы"].Выгрузить(МассивНеПроверенныхСтрок,"НоменклатураОприходование, НомерСтроки, ХарактеристикаОприходование, ПартияОприходование");
		
		ЗапросОприходование.УстановитьПараметр("ТаблицаНоменклатурыДокумента",ТаблицаНоменклатурыДокумента);
		ВыборкаПоХарактеристикам = ЗапросОприходование.Выполнить().Выбрать();
		
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект["Запасы"][ВыборкаПоХарактеристикам.НомерСтрокиНоменклатуры-1],ВыборкаПоХарактеристикам);
		КонецЦикла;
	Иначе
		ТаблицаНоменклатурыДокумента = Объект["Запасы"].Выгрузить(,"Номенклатура, НомерСтроки, Характеристика, Партия");
		
		Запрос.УстановитьПараметр("ТаблицаНоменклатурыДокумента",ТаблицаНоменклатурыДокумента);
		ВыборкаПоХарактеристикам = Запрос.Выполнить().Выбрать();
		
		ИндексСтроки = 0;
		
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект["Запасы"][ИндексСтроки],ВыборкаПоХарактеристикам);
			ИндексСтроки = ИндексСтроки+1;
		КонецЦикла;
		
		ТаблицаНоменклатурыДокумента = Объект["Запасы"].Выгрузить(,"НоменклатураОприходование, НомерСтроки, ХарактеристикаОприходование, ПартияОприходование");
		
		ЗапросОприходование.УстановитьПараметр("ТаблицаНоменклатурыДокумента",ТаблицаНоменклатурыДокумента);
		ВыборкаПоХарактеристикам = ЗапросОприходование.Выполнить().Выбрать();
		
		ИндексСтроки = 0;
		
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект["Запасы"][ИндексСтроки],ВыборкаПоХарактеристикам);
			ИндексСтроки = ИндексСтроки+1;
		КонецЦикла;
	КонецЕсли;
	
	СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект);
	СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект,,,"СерииНоменклатурыОприходование");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита()
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"ПересортицаЗапасов", "Запасы", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"ПересортицаЗапасов", "Запасы", НастройкиФормыВыбораНоменклатуры, "Оприходование");
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

// Вызывает процедуру копирования строк и оповещает пользователя о количестве скопированных.
//
&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру вставки строк и оповещает пользователя о количестве вставленных.
//
&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

// Выполняет копирование выделенных строк в буфер обмена.
//
&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

// Вставляет скопированные строки из буфера обмена в выбранную табличную часть.
//
&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодбором

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти 	= "Запасы";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПодборВыполнить()

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		// Характеристики
		СтруктураДанныеНоменклатуры = Новый Структура();
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		
		СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
		
		СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
		НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики
			Тогда
			НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
		// Конец Характеристики
		
		//Партии
		НоваяСтрока.ИспользоватьПартии = ?(ИмяТабличнойЧасти = "Отходы", Истина, СтруктураДанные.ИспользоватьПартии);
		НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, СтруктураДанные.Партия);
		// Конец Партии
		
		НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
		
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// ПодключаемоеОборудование
// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
		"ПоискПоШтрихкодуЗавершение",
		ЭтотОбъект, 
		Новый Структура("ТекШтрихкод", ТекШтрихкод)
	);
	
	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду",,,,,,ОбработкаЗавершения);
	#Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

// Процедура - обработчик события Действие команды ПолучитьВес
//
&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы", Ложь);
	
КонецПроцедуры // ПолучитьВес()

// Процедура - обработчик команды ЗагрузитьДанныеИзТСД.
//
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура ОбновитьРеквизитыВидимостиФормы()
	
	СтрокаРеквизитов = "ТипСтруктурнойЕдиницы, ОрдерныйСклад";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СтруктурнаяЕдиница, СтрокаРеквизитов);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияРеквизитов, СтрокаРеквизитов);
	
	УчетПоЯчейкам = ПолучитьФункциональнуюОпцию("УчетПоЯчейкам");
	
КонецПроцедуры

// Получает признак Ордерного склада.
//
&НаКлиенте
Процедура УправлениеФормой(ПриОткрытии = Ложь)
	
	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) 
		И НЕ ОрдерныйСклад 
		И НЕ ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница") 
		И УчетПоЯчейкам Тогда
		Элементы.Ячейка.Видимость = Истина;
		Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = Ложь;
	Иначе
		Элементы.Ячейка.Видимость = Ложь;
		Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССериямиНоменклатуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыОприходованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры(ЭтоОприходование = Ложь)
	
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор, ЭтоОприходование);
	ПараметрыСерийНоменклатуры.Вставить("ЭтоОприходование", ЭтоОприходование);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки, ЭтоОприходование = Ложь)
	
	Модифицированность = Истина;
	
	ПараметрыИменаПолей = Новый Структура;
	ПараметрыИменаПолей.Вставить("ИмяТЧСерииНоменклатуры", ?(ЭтоОприходование, "СерииНоменклатурыОприходование", "СерииНоменклатуры"));
	ПараметрыИменаПолей.Вставить("ЭтоОприходование", ЭтоОприходование);
	
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки, ПараметрыИменаПолей);
	
КонецФункции

Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор, ЭтоОприходование = Ложь)
	
	Если ЭтоОприходование Тогда
		Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор,,, "СерииНоменклатурыОприходование",, ЭтоОприходование);
	Иначе
		Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)

	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	// Серии номенклатуры
	Если ИспользоватьСерииНоменклатурыОстатки <> Неопределено Тогда
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, Элементы.Запасы.ТекущиеДанные);
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, Элементы.Запасы.ТекущиеДанные,
			"СерииНоменклатурыОприходование");
		
		СтрокаТабличнойЧасти = Элементы["Запасы"].ТекущиеДанные;
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти, "СерииНоменклатурыОприходование");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы["Запасы"].ТекущиеДанные;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОприходованиеПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы["Запасы"].ТекущиеДанные;
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти, "СерииНоменклатурыОприходование");
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// ИнтеграцияГосИС
&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец ИнтеграцияГосИС

#КонецОбласти

#Область ИнтеграцияГИСМ
// ИнтеграцияГИСМ
&НаКлиенте
Процедура ТекстУведомленияОСписанииГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияГИСМУНФКлиент.ТекстУведомленияОСписанииКиЗГИСМОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

// ИнтеграцияГИСМ
&НаСервере
Процедура СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер()
	
	ИнтеграцияГИСМУНФ.СформироватьТекстУведомлениеОСписанииКиЗ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание: выбранная ГТД датирована более поздней датой, чем текущий документ.'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Запасы",
				СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриходоватьТоварыПоСебестоимостиСписанияПриИзменении(Элемент)
	УправлениеВидимостью();
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостью()
	
	Элементы.ЗапасыЦена.Видимость = Не Объект.ПриходоватьТоварыПоСебестоимостиСписания;
	Элементы.ЗапасыСумма.Видимость = Не Объект.ПриходоватьТоварыПоСебестоимостиСписания;
	Элементы.ГруппаИтогиСумма.Видимость = Не Объект.ПриходоватьТоварыПоСебестоимостиСписания;
	Элементы.Корреспонденция.Видимость = Не Объект.ПриходоватьТоварыПоСебестоимостиСписания;
	Элементы.КорреспонденцияОприходование.Видимость = Не Объект.ПриходоватьТоварыПоСебестоимостиСписания;
	Элементы.ГруппаПредставлениеЦены.Видимость = Не Объект.ПриходоватьТоварыПоСебестоимостиСписания;
	
КонецПроцедуры

#КонецОбласти