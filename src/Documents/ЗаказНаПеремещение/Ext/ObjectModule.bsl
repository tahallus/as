#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет необходимость перепроведения заказа при смене состояния.
// 
// Возвращаемое значение:
//  РежимЗаписиДокумента - Рекомендуемый режим записи документа.
//
Функция РежимЗаписиПриСменеСостояния() Экспорт
	
	Возврат СостоянияЗаказов.РежимЗаписиДокументаПриСменеСостояния(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ПоложениеЗаказаПокупателя <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = ЗаказПокупателя;
		КонецЦикла;	
	Иначе
		ЗаказПокупателя = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Запасы, "ЗаказПокупателя");
	КонецЕсли;	
	
	ФОИспользоватьХарактеристики = Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить();
	ПредставленияНоменклатуры = Новый Массив;
	Для каждого СтрокаПродукция Из Запасы Цикл
		Если Не ЗначениеЗаполнено(СтрокаПродукция.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		ЭлементыПредставленияНоменклатуры = Новый Массив;
		ЭлементыПредставленияНоменклатуры.Добавить(СокрЛП(СтрокаПродукция.Номенклатура));
		Если ФОИспользоватьХарактеристики И ЗначениеЗаполнено(СтрокаПродукция.Характеристика) Тогда
			ЭлементыПредставленияНоменклатуры.Добавить(СтрШаблон(НСтр("ru = '(%1)'"), СокрЛП(СтрокаПродукция.Характеристика)));
		КонецЕсли;
		ПредставленияНоменклатуры.Добавить(СтрШаблон(НСтр("ru = '%1, %2 %3'"), 
			СтрСоединить(ЭлементыПредставленияНоменклатуры, " "), СтрокаПродукция.Количество, 
			СокрЛП(СтрокаПродукция.ЕдиницаИзмерения))); 
	КонецЦикла;
	СписокНоменклатуры = СтрСоединить(ПредставленияНоменклатуры, Символы.ПС);
	
	ПривестиДанныеКСогласованномуСостоянию();
	
	СостоянияЗаказов.ПередЗаписьюЗаказа(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СостоянияЗаказов.ПриЗаписиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказНаПроизводство")] = "ЗаполнитьПоЗаказуНаПроизводство";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПоставщику")] = "ЗаполнитьПоЗаказуПоставщику";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходныйОрдер")] = "ЗаполнитьПоПриходномуОрдеру";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения, "ЗаказПокупателя");
	
	ДозаполнитьПоУмолчанию();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() Тогда
		
		Для каждого СтрокаЗапасы Из Запасы Цикл
			
			Если ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				ЗаказСтроки = СтрокаЗапасы.ЗаказПокупателя;
			Иначе
				ЗаказСтроки = ЗаказПокупателя;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЗаказСтроки) И СтрокаЗапасы.Резерв > 0 Тогда
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки,
					"Резерв");
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В строке указано количество резерва, но не указан заказ.'"), 
					ЭтотОбъект, КонтекстноеПоле, , Отказ);
			КонецЕсли;
			
			Если СтрокаЗапасы.Резерв > СтрокаЗапасы.Количество Тогда
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'В строке №%1 табл. части ""Запасы"" количество передаваемых в резерв позиций превышает общее количество запасов.'"),
					СтрокаЗапасы.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	
	Если Не СостояниеЗаказа = Справочники.СостоянияЗаказовНаПроизводство.Завершен Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВариантЗавершения"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа
	Документы.ЗаказНаПеремещение.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗаказыНаПеремещение", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ГрафикДвиженияЗапасов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РазмещениеЗаказов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);

	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.ЗаказНаПеремещение.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.ЗаказНаПеремещение.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// АПК:299-выкл процедуры вызываются см. ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент

Процедура ЗаполнитьПоЗаказуНаПроизводство(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаПроизводство.Ссылка КАК ДокументОснование,
	|	ЗаказНаПроизводство.ВидОперации КАК ВидОперации,
	|	ЗаказНаПроизводство.Организация КАК Организация,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиницаРезерв.ИсточникПеремещения КАК СтруктурнаяЕдиницаРезерв,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаПолучатель,
	|	ЗаказНаПроизводство.ПоложениеЗаказаПокупателя КАК ПоложениеЗаказаПокупателя,
	|	ЗаказНаПроизводство.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказНаПроизводство.ПоложениеСклада КАК ПоложениеСклада,
	|	ЗаказНаПроизводство.Запасы.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказНаПроизводство.Запасы.Количество - ЗаказНаПроизводство.Запасы.Резерв КАК Количество,
	|		ЗаказПокупателя КАК ЗаказПокупателя
	|	) КАК Запасы,
	|	ЗаказНаПроизводство.Продукция.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказНаПроизводство.Продукция.Количество - ЗаказНаПроизводство.Продукция.Резерв КАК Количество,
	|		ЗаказПокупателя КАК ЗаказПокупателя
	|	) КАК Продукция
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.Ссылка = &ДокументОснование
	|	И ЗаказНаПроизводство.Запасы.Количество - ЗаказНаПроизводство.Запасы.Резерв > 0");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		Если ВыборкаИзРезультатаЗапроса.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ТекстОшибки = НСтр("ru = 'Склад размещен в табличной части документа %1.
                                |Ввод заказа на перемещение на основании такого документа запрещен.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеЗаполнения);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
		Если ВыборкаИзРезультатаЗапроса.ВидОперации = Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка Тогда
			Запасы.Загрузить(ВыборкаИзРезультатаЗапроса.Продукция.Выгрузить());
		Иначе
			Запасы.Загрузить(ВыборкаИзРезультатаЗапроса.Запасы.Выгрузить());
		КонецЕсли; 
		ЗаполнениеОбъектовУНФ.ЗаполнитьТаблицуПоШапке(ЭтотОбъект, "Запасы", "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуПокупателя(ДокументСсылкаЗаказПокупателя) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументСсылкаЗаказПокупателя) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка документов
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("Организация, Ссылка, ВидОперации, Старт, ДатаОтгрузки, СостояниеЗаказа, Проведен");
	ИменаРеквизитов.Добавить("ОжидаетсяВыборВариантаКП, ПоложениеДатыОтгрузки, ОжидаетсяВыборВариантаКП");
	ИменаРеквизитов.Добавить("СтруктурнаяЕдиницаРезерв, ПоложениеСклада");
	ИменаРеквизитовСтрокой = СтрСоединить(ИменаРеквизитов, ", ");
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылкаЗаказПокупателя, ИменаРеквизитовСтрокой);
	Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(ДокументСсылкаЗаказПокупателя, РеквизитыЗаказа);
	
	Если РеквизитыЗаказа.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ТекстОшибки = НСтр("ru = 'Склад размещен в табличной части документа %1.
                            |Ввод заказа на перемещение на основании такого документа запрещен.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ДокументСсылкаЗаказПокупателя);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли; 
		
	// Шапка
	Организация = РеквизитыЗаказа.Организация;
	ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
	Если РеквизитыЗаказа.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		ДатаПеремещения = РеквизитыЗаказа.Старт;
	Иначе
		ДатаПеремещения = РеквизитыЗаказа.ДатаОтгрузки;
	КонецЕсли;
	СтруктурнаяЕдиницаПолучатель = РеквизитыЗаказа.СтруктурнаяЕдиницаРезерв;
	Если ЗначениеЗаполнено(СтруктурнаяЕдиницаПолучатель.ИсточникПеремещения) Тогда
		СтруктурнаяЕдиницаРезерв = СтруктурнаяЕдиницаПолучатель.ИсточникПеремещения;
	КонецЕсли; 
	
	// Заполнение табличной части.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(ДокументСсылкаЗаказПокупателя, 
		Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Если ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
		
		// При заполнении не учитываются зарезервированные, отгруженные и размещенные запасы
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
		|	ЗапасыОстатки.Характеристика КАК Характеристика,
		|	ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ЗапасыОстатки.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|ПОМЕСТИТЬ ЗаказыОстатки
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки(
		|			,
		|			ЗаказПокупателя = &ЗаказПокупателя
		|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))) КАК ЗапасыОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказыПокупателейОбороты.ЗаказПокупателя,
		|	ЗаказыПокупателейОбороты.Номенклатура,
		|	ЗаказыПокупателейОбороты.Характеристика,
		|	ЗаказыПокупателейОбороты.КоличествоРасход,
		|	ЗаказыПокупателейОбороты.Номенклатура.ТипНоменклатуры
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Обороты(, , Период, ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыПокупателейОбороты
		|ГДЕ
		|	ЗаказыПокупателейОбороты.КоличествоРасход > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РазмещениеОстатки.ЗаказПокупателя,
		|	РазмещениеОстатки.Номенклатура,
		|	РазмещениеОстатки.Характеристика,
		|	РазмещениеОстатки.КоличествоОстаток,
		|	РазмещениеОстатки.Номенклатура.ТипНоменклатуры
		|ИЗ
		|	РегистрНакопления.РазмещениеЗаказов.Остатки(
		|			,
		|			ЗаказПокупателя = &ЗаказПокупателя
		|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))) КАК РазмещениеОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДвиженияДокументаРазмещениеЗаказов.ЗаказПокупателя,
		|	ДвиженияДокументаРазмещениеЗаказов.Номенклатура,
		|	ДвиженияДокументаРазмещениеЗаказов.Характеристика,
		|	ВЫБОР
		|		КОГДА ДвиженияДокументаРазмещениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|			ТОГДА ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
		|		ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
		|	КОНЕЦ,
		|	ДвиженияДокументаРазмещениеЗаказов.Номенклатура.ТипНоменклатуры
		|ИЗ
		|	РегистрНакопления.РазмещениеЗаказов КАК ДвиженияДокументаРазмещениеЗаказов
		|ГДЕ
		|	ДвиженияДокументаРазмещениеЗаказов.Регистратор = &Ссылка
		|	И ДвиженияДокументаРазмещениеЗаказов.ЗаказПокупателя = &ЗаказПокупателя";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказНаПеремещениеЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ЗаказНаПеремещениеЗапасы.Номенклатура КАК Номенклатура,
		|	ЗаказНаПеремещениеЗапасы.Характеристика КАК Характеристика,
		|	ЗаказНаПеремещениеЗапасы.Количество * ВЫБОР
		|		КОГДА ЗаказНаПеремещениеЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
		|			ТОГДА ВЫРАЗИТЬ(ЗаказНаПеремещениеЗапасы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоличествоОстаток,
		|	ЗаказНаПеремещениеЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|ПОМЕСТИТЬ ЗаказыОстатки
		|ИЗ
		|	Документ.ЗаказНаПеремещение.Запасы КАК ЗаказНаПеремещениеЗапасы
		|ГДЕ
		|	ЗаказНаПеремещениеЗапасы.ЗаказПокупателя = &ЗаказПокупателя
		|	И ЗаказНаПеремещениеЗапасы.Ссылка <> &Ссылка
		|	И ЗаказНаПеремещениеЗапасы.Ссылка.Проведен";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	ЗаказыОстатки.ТипНоменклатуры КАК ТипНоменклатуры
	|ИЗ
	|	ЗаказыОстатки КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.ТипНоменклатуры,
	|	ЗаказыОстатки.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателяЗапасы.Ссылка КАК ЗаказПокупателя,
	|	ЗаказПокупателяЗапасы.Ссылка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|			ТОГДА ЗаказПокупателяЗапасы.Ссылка.Старт
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ДатаОтгрузки
	|	КОНЕЦ КАК ДатаПеремещения,
	|	МИНИМУМ(ЗаказПокупателяЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.Коэффициент КАК Коэффициент,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ЗаказПокупателяЗапасы.Количество) КАК Количество,
	|	СУММА(ЗаказПокупателяЗапасы.КоличествоСобрано) КАК КоличествоСобрано,
	|	ЗаказПокупателяЗапасы.ЕстьСборка КАК ЕстьСборка,
	|	ЗаказПокупателяЗапасы.ТипНоменклатуры КАК ТипНоменклатуры
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяЗапасы.Ссылка,
	|	ЗаказПокупателяЗапасы.Ссылка.Организация,
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Коэффициент,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|			ТОГДА ЗаказПокупателяЗапасы.Ссылка.Старт
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ДатаОтгрузки
	|	КОНЕЦ,
	|	ЗаказПокупателяЗапасы.Спецификация,
	|	ЗаказПокупателяЗапасы.СтруктурнаяЕдиницаРезерв,
	|	ЗаказПокупателяЗапасы.ТипНоменклатуры,
	|	ЗаказПокупателяЗапасы.ЕстьСборка,
	|	ЗаказПокупателяЗапасы.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателя,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЗаказНаряды
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ЗаказПокупателя
	|	И ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателяМатериалы.Ссылка КАК ЗаказПокупателя,
	|	ШапкаЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателяМатериалы.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаРезерв,
	|	ШапкаЗаказПокупателя.Старт КАК ДатаПоступления,
	|	МИНИМУМ(ЗаказПокупателяМатериалы.НомерСтроки) КАК НомерСтроки,
	|	ЗаказПокупателяМатериалы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяМатериалы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяМатериалы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяМатериалы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПокупателяМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ЗаказПокупателяМатериалы.Количество) КАК Количество,
	|	ЗаказПокупателяМатериалы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|ИЗ
	|	Документ.ЗаказПокупателя.Материалы КАК ЗаказПокупателяМатериалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ШапкаЗаказПокупателя
	|		ПО ЗаказПокупателяМатериалы.Ссылка = ШапкаЗаказПокупателя.Ссылка
	|ГДЕ
	|	ЗаказПокупателяМатериалы.Ссылка = &ЗаказПокупателя
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяМатериалы.Ссылка,
	|	ЗаказПокупателяМатериалы.Номенклатура,
	|	ЗаказПокупателяМатериалы.Партия,
	|	ЗаказПокупателяМатериалы.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяМатериалы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ,
	|	ШапкаЗаказПокупателя.Старт,
	|	ШапкаЗаказПокупателя.Организация,
	|	ЗаказПокупателяМатериалы.СтруктурнаяЕдиницаРезерв,
	|	ЗаказПокупателяМатериалы.Характеристика,
	|	ЗаказПокупателяМатериалы.Номенклатура.ТипНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателя,
	|	НомерСтроки";
	
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("ЗаказПокупателя, Номенклатура, Характеристика");
	
	Запасы.Очистить();
	СтруктураДляПоиска = Новый Структура;
	
	Выборка = МассивРезультатов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСборкуЗаказов") И Выборка.ЕстьСборка Тогда
			ВыборкаСобрано = Выборка.КоличествоСобрано;
		Иначе
			ВыборкаСобрано = 0;
		КонецЕсли;
		
		СтруктураДляПоиска.Очистить();
		СтруктураДляПоиска.Вставить("ЗаказПокупателя", Выборка.ЗаказПокупателя);
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		
		МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
		КоличествоВБазовой = Выборка.Количество * Выборка.Коэффициент;
		Если МассивСтрокОстатков.Количество() = 0 Тогда
			ДоступноеКоличество = Выборка.Количество - ВыборкаСобрано;
		ИначеЕсли МассивСтрокОстатков[0].КоличествоОстаток > КоличествоВБазовой Тогда
			ДоступноеКоличество = 0;
			МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоВБазовой;
		Иначе
			ДоступноеКоличество = Выборка.Количество - Макс(МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент, ВыборкаСобрано);
			ТаблицаОстатков.Удалить(МассивСтрокОстатков[0]);
		КонецЕсли;
		Если ДоступноеКоличество <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Количество = ДоступноеКоличество;
		
	КонецЦикла;
	
	// Заказ-наряды
	Выборка = МассивРезультатов[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска.Очистить();
		СтруктураДляПоиска.Вставить("ЗаказПокупателя", Выборка.ЗаказПокупателя);
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		
		МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
		КоличествоВБазовой = Выборка.Количество * Выборка.Коэффициент;
		Если МассивСтрокОстатков.Количество() = 0 Тогда
			ДоступноеКоличество = Выборка.Количество;
		ИначеЕсли МассивСтрокОстатков[0].КоличествоОстаток > КоличествоВБазовой Тогда
			ДоступноеКоличество = 0;
			МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоВБазовой;
		Иначе
			ДоступноеКоличество = Выборка.Количество - МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент;
			ТаблицаОстатков.Удалить(МассивСтрокОстатков[0]);
		КонецЕсли;
		Если ДоступноеКоличество <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Количество = ДоступноеКоличество;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуПоставщику(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПоставщику.Ссылка КАК ДокументОснование,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	ЗаказПоставщику.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаРезерв,
	|	ЗаказПоставщику.СтруктурнаяЕдиницаРезерв.ПолучательПеремещения КАК СтруктурнаяЕдиницаПолучатель,
	|	ЗаказПоставщику.ПоложениеЗаказаПокупателя КАК ПоложениеЗаказаПокупателя,
	|	ЗаказПоставщику.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказПоставщику.ПоложениеСклада КАК ПоложениеСклада,
	|	ЗаказПоставщику.Запасы.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		ЗаказПокупателя КАК ЗаказПокупателя
	|	) КАК Запасы
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ДокументОснование");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		Если ВыборкаИзРезультатаЗапроса.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ТекстОшибки = НСтр("ru = 'Склад размещен в табличной части документа %1.
                                |Ввод заказа на перемещение на основании такого документа запрещен.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеЗаполнения);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
		НеРазмещатьЗаказыПокупателей = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");

		Запасы.Загрузить(ВыборкаИзРезультатаЗапроса.Запасы.Выгрузить());
		ЗаполнениеОбъектовУНФ.ЗаполнитьТаблицуПоШапке(ЭтотОбъект, "Запасы", "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоПриходномуОрдеру(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриходныйОрдер.Ссылка КАК ДокументОснование,
	|	ПриходныйОрдер.Организация КАК Организация,
	|	ПриходныйОрдер.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаРезерв,
	|	ПриходныйОрдер.СтруктурнаяЕдиница.ПолучательПеремещения КАК СтруктурнаяЕдиницаПолучатель,
	|	ПриходныйОрдер.Запасы.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Партия КАК Партия,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Количество КАК Количество
	|	) КАК Запасы
	|ИЗ
	|	Документ.ПриходныйОрдер КАК ПриходныйОрдер
	|ГДЕ
	|	ПриходныйОрдер.Ссылка = &ДокументОснование");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
		Запасы.Загрузить(ВыборкаИзРезультатаЗапроса.Запасы.Выгрузить());
		ЗаполнениеОбъектовУНФ.ЗаполнитьТаблицуПоШапке(ЭтотОбъект, "Запасы", "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");
		
	КонецЕсли;
	
КонецПроцедуры

// АПК:299-вкл

// Процедура заполняет табличную часть Запасы по остаткам на складе.
//
Процедура ЗаполнитьЗапасыПоОстаткамНаСкладе() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыНаСкладахОстатки.Организация КАК Организация,
	|	ЗапасыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗапасыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ЗапасыНаСкладахОстатки.Партия КАК Партия,
	|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СУММА(ЗапасыНаСкладахОстатки.КоличествоОстаток) КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах.Остатки(
	|			,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыНаСкладахОстатки
	|ГДЕ
	|	ЗапасыНаСкладахОстатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыНаСкладахОстатки.Организация,
	|	ЗапасыНаСкладахОстатки.Номенклатура,
	|	ЗапасыНаСкладахОстатки.Характеристика,
	|	ЗапасыНаСкладахОстатки.Партия,
	|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница,
	|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
	
	ЭтотОбъект.Запасы.Загрузить(Запрос.Выполнить().Выгрузить());
	ЗаполнениеОбъектовУНФ.ЗаполнитьТаблицуПоШапке(ЭтотОбъект, "Запасы", "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");
	
КонецПроцедуры // ЗаполнитьЗапасыПоОстаткамНаСкладе()

// Процедура заполняет колонку Количество по резервам под заказ.
//
Процедура ЗаполнитьКолонкуРезервПоОстаткам() Экспорт
	
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "Резерв");
	
	ЗаказВШапке = ПоложениеЗаказаПокупателя <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	Если ЗаказВШапке И НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Возврат;
	КонецЕсли; 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА &ЗаказВШапке
	|			ТОГДА &Заказ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|						И ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|				ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Запасы.Выгрузить());
	Запрос.УстановитьПараметр("ЗаказВШапке", ЗаказВШапке);
	Запрос.УстановитьПараметр("Заказ", ?(ЗначениеЗаполнено(ЗаказПокупателя), ЗаказПокупателя, Документы.ЗаказПокупателя.ПустаяСсылка()));
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА ТаблицаЗапасы.Номенклатура.СчетУчетаЗатрат
	|		ИНАЧЕ ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов
	|	КОНЕЦ КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасыОтбор
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО (СтруктурныеЕдиницы.Ссылка = &СтруктурнаяЕдиница)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ИЗ
	|						ВременнаяТаблицаЗапасыОтбор КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			
			Если НЕ ЗаказВШапке И НЕ ЗначениеЗаполнено(СтрокаЗапасы.ЗаказПокупателя) Тогда
				Возврат;
			КонецЕсли; 
			
			Коэффициент = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), 1, СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			ВсегоОстаток = ВсегоОстаток / Коэффициент;
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток * Коэффициент;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоОстаткам()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПривестиДанныеКСогласованномуСостоянию()
	
	Если СостояниеЗаказа <> Справочники.СостоянияЗаказовНаПеремещение.Завершен Тогда
		ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДозаполнитьПоУмолчанию()
	
	Если Не ЗначениеЗаполнено(СостояниеЗаказа) Тогда
		СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаНаПеремещение();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли