#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура - Проверить возможность ввода документа на основании заказа на перемещение
//
// Параметры:
//  ДанныеЗаполнения	 - ДокументСсылка.ЗаказНаПеремещение - Проверяемый документ
//  ЗначенияРеквизитов	 - Структура						 - Структура значений проверяемых реквизитов
//
Процедура ПроверитьВозможностьВводаНаОснованииЗаказаНаПеремещение(ДанныеЗаполнения, ЗначенияРеквизитов) Экспорт
	
	Если ЗначенияРеквизитов.Свойство("Проведен") Тогда
		Если НЕ ЗначенияРеквизитов.Проведен Тогда
			ТекстОшибки = НСтр("ru='Документ %1 не проведен. Ввод на основании непроведенного документа запрещен.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеЗаполнения);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.Свойство("СостояниеЗаказа")
		И ЗначенияРеквизитов.СостояниеЗаказа = Справочники.СостоянияЗаказовНаПеремещение.Завершен Тогда
		ТекстОшибки = НСтр("ru='Документ %1 в состоянии Завершен. Ввод на основании завершенного заказа запрещен.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеЗаполнения);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет состояние заказа
//
// Параметры:
//  Заказ				 - 	ДокументСсылка.ЗаказНаПроизводство 
//  Состояние			 - 	СправочникСсылка.СостоянияЗаказовНаПроизводство 
//  ВариантЗавершения	 - 	ПеречисленияСсылка.ВариантыЗавершенияЗаказа 
//
Процедура ИзменитьСостояниеЗаказа(Заказ, Состояние, ВариантЗавершения = Неопределено) Экспорт
	
	Если Заказ.СостояниеЗаказа = Состояние И Состояние <> Справочники.СостоянияЗаказовНаПеремещение.Завершен Тогда
		Возврат;
	КонецЕсли;
	
	Если Заказ.СостояниеЗаказа = Состояние И Состояние = Справочники.СостоянияЗаказовНаПеремещение.Завершен
		И (ЗначениеЗаполнено(Заказ.ВариантЗавершения) И Заказ.ВариантЗавершения = ВариантЗавершения) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказОбъект = Заказ.ПолучитьОбъект();
	ЗаказОбъект.Заблокировать();
	
	Если ВариантЗавершения <> Неопределено Тогда
		ЗаказОбъект.ВариантЗавершения = ВариантЗавершения;
	КонецЕсли;
	
	ЗаказОбъект.СостояниеЗаказа = Состояние;
	ЗаказОбъект.Записать(ЗаказОбъект.РежимЗаписиПриСменеСостояния());
	ЗаказОбъект.Разблокировать();
	
КонецПроцедуры

// Возвращает Заказы на перемещение оформленные под обеспечение Заказа покупателя.
//
// Параметры:
//  ЗаказПокупателя - ДокументСсылка.ЗаказПокупателя
// 
// Возвращаемое значение:
//   - Массив
//
Функция ЗаказыПодОбеспечение(ЗаказПокупателя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказНаПеремещениеЗапасы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Запасы КАК ЗаказНаПеремещениеЗапасы
	|ГДЕ
	|	ЗаказНаПеремещениеЗапасы.ЗаказПокупателя = &ЗаказПокупателя";
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает Заказы покупателя, обеспечиваемые указанным заказом на перемещение.
//
// Параметры:
//  ЗаказНаПеремещение - ДокументСсылка.ЗаказНаПеремещение
// 
// Возвращаемое значение:
//   - Массив
//
Функция ОбеспечиваемыеЗаказыПокупателя(ЗаказНаПеремещение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказНаПеремещениеЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Запасы КАК ЗаказНаПеремещениеЗапасы
	|ГДЕ
	|	ЗаказНаПеремещениеЗапасы.Ссылка = &ЗаказНаПеремещение
	|	И ЗаказНаПеремещениеЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)";
	Запрос.УстановитьПараметр("ЗаказНаПеремещение", ЗаказНаПеремещение);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("ЗаказПокупателя");
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
// @skip-warning
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ЗаказПокупателя.Контрагент, NULL КАК ИСТИНА)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#Область ЗагрузкаДанныхИзВнешнегоИсточника

// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
//
// Параметры:
//   ТаблицаПолейЗагрузки - таблица значений, которая будет наполнена колонками
//   НастройкиЗагрузкиДанных - структура настроек загрузки
//
Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	ОписаниеТиповСтрока11 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(11));
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока30 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(30));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока110 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(110));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2,
		ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3,
		ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ОбязательноеЗаполнениеГруппыНоменклатуры = Не ПолучитьФункциональнуюОпцию("УчетНоменклатурыПоставщиков");
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
		ТаблицаПолейЗагрузки, "Штрихкод",
		НСтр("ru = 'Штрихкод'"), ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура",
		1, , ОбязательноеЗаполнениеГруппыНоменклатуры);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
		ТаблицаПолейЗагрузки, "Артикул",
		НСтр("ru = 'Артикул'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура",
		2, , ОбязательноеЗаполнениеГруппыНоменклатуры);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
		ТаблицаПолейЗагрузки, "НоменклатураНаименование",
		НСтр("ru = 'Номенклатура (наименование)'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура",
		3, , ОбязательноеЗаполнениеГруппыНоменклатуры);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
		ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное",
		НСтр("ru = 'Номенклатура (полное наименование)'"), ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура",
		5, , ОбязательноеЗаполнениеГруппыНоменклатуры);
		
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительКод",
		НСтр("ru = 'Код'", ОбщегоНазначения.КодОсновногоЯзыка()), 			ОписаниеТиповСтрока11, ОписаниеТиповКолонка, "Родитель", 1);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительНаименование", 
		НСтр("ru = 'Группа (наименование)'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Родитель", 2);	

	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
			ТаблицаПолейЗагрузки, "ХарактеристикаНаименование", 
			НСтр("ru = 'Характеристика (наименование)'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			ОписаниеТиповСтрока150, ОписаниеТиповКолонка, "Характеристика", 1);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(
			ТаблицаПолейЗагрузки, "ХарактеристикаАртикул", 
			НСтр("ru = 'Характеристика (артикул)'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Характеристика", 2);
		
	КонецЕсли;
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаДоходов", 
		НСтр("ru = 'Счет учета доходов'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗапасов", 
		НСтр("ru = 'Счет учета запасов'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗатрат", 
		НСтр("ru = 'Счет учета затрат'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НаправлениеДеятельности",
		НСтр("ru = 'Направление деятельности'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.МетодОценкиЗапасов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "МетодОценки",
		НСтр("ru = 'Способ списания'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПополненияЗапасов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СпособПополнения",
		НСтр("ru = 'Способ пополнения'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Картинка", 
		НСтр("ru = 'Картинка'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000,,,,,Ложь);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "КатегорияНоменклатуры", 
		НСтр("ru = 'Категория номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);   
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Партия",
			НСтр("ru = 'Партия (наименование)'"), ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", НСтр("ru = 'Количество'"),
		ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , Истина);

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения",
		НСтр("ru = 'Ед. изм.'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, , , , ,
		ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
		
	ВидимостьРезервирование = (НастройкиЗагрузкиДанных.Свойство("ИспользуетсяРезервирование") 
		И НастройкиЗагрузкиДанных.Свойство("ЕстьРозничноеПеремещение"))
		И (НастройкиЗагрузкиДанных.ИспользуетсяРезервирование 
		И НЕ НастройкиЗагрузкиДанных.ЕстьРозничноеПеремещение);

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));		
	ОписаниеТиповКолонка = Новый ОписаниеТипов(МассивТипов);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЗаказПокупателя",
		НСтр("ru = 'Заказ покупателя'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка, , , , , ВидимостьРезервирование);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Резерв", НСтр("ru = 'Резерв'"),
		ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , , , ВидимостьРезервирование);

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтавкаНДС", НСтр("ru = 'Ставка НДС (для новой номенклатуры)'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
		
КонецПроцедуры

// Добавляет в структуру НастройкиЗагрузкиДанных адреса макетов-образцов загрузки данных
//
// Параметры:
//   НастройкиЗагрузкиДанных - структура настроек загрузки
//   УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

// Сопоставляет загружаемые данные из внешнего источника с данными в базе
//
// Параметры:
//   ПараметрыСопоставления - структура, параметры сопоставления загружаемых данных
//   АдресРезультата - адрес, куда будет помещена таблица сопоставления данных
//
Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ПараметрыСопоставления, АдресРезультата) Экспорт
	
	ТаблицаСопоставленияДанных	= ПараметрыСопоставления.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных		= ПараметрыСопоставления.НастройкиЗагрузкиДанных;
	НастройкиПоиска				= НастройкиЗагрузкиДанных.НастройкиПоиска;
	ЕстьРозничноеПеремещение	= НастройкиЗагрузкиДанных.ЕстьРозничноеПеремещение;
	ИспользуетсяРезервирование	= НастройкиЗагрузкиДанных.ИспользуетсяРезервирование;
	ЕстьРозничныйСуммовойУчет	= НастройкиЗагрузкиДанных.ЕстьРозничныйСуммовойУчет;  	
	ПолноеИмяОбъектаЗаполнения	= НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;

	ТаблицаДублирующихСтрок = ЗагрузкаДанныхИзВнешнегоИсточника.ПустаяТаблицаДублирующихСтрокНоменклатуры();
	НастройкиПоиска.Вставить("ТаблицаДублирующихСтрок", ТаблицаДублирующихСтрок);

	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		НоменклатураСопоставлена = Ложь;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "НоменклатураПоставщиков") 
			И (ЗначениеЗаполнено(СтрокаТаблицыФормы.АртикулПоставщика)
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.Идентификатор)
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураПоставщиковНаименование)) Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуруПоставщиков(СтрокаТаблицыФормы, НастройкиЗагрузкиДанных);	
			НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураПоставщиков);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "КатегорияНоменклатуры_ВходящиеДанные")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "КатегорияНоменклатуры") Тогда
		
			ЗначениеПоУмолчанию = Справочники.КатегорииНоменклатуры.БезКатегории;					
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьКатегориюНоменклатуры(СтрокаТаблицыФормы.КатегорияНоменклатуры, СтрокаТаблицыФормы.КатегорияНоменклатуры_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если НЕ НоменклатураСопоставлена Тогда
		
			// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы, НастройкиПоиска);
		
		КонецЕсли; 
		
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "Родитель")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "РодительНаименование")
			И ЗначениеЗаполнено(СтрокаТаблицыФормы.РодительНаименование) Тогда
			
			ЗначениеПоУмолчанию = Справочники.Номенклатура.ПустаяСсылка();
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьРодителяНоменклатуры(СтрокаТаблицыФормы.Родитель, "", СтрокаТаблицыФормы.РодительНаименование, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		СтрокаТаблицыФормы.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
		СтрокаТаблицыФормы.СчетУчетаЗатрат = ?(ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство"), 
			ПланыСчетов.Управленческий.НезавершенноеПроизводство, ПланыСчетов.Управленческий.КоммерческиеРасходы);
		СтрокаТаблицыФормы.СчетУчетаДоходов = ?(СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"), 
			ПланыСчетов.Управленческий.ПрочиеДоходы, ПланыСчетов.Управленческий.ПустаяСсылка());
			
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "НаправлениеДеятельности") Тогда
				
			ЗначениеПоУмолчанию = Справочники.НаправленияДеятельности.Прочее;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНаправлениеДеятельности(СтрокаТаблицыФормы.НаправлениеДеятельности, СтрокаТаблицыФормы.НаправлениеДеятельности_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "МетодОценки") Тогда
				
			ЗначениеПоУмолчанию = Перечисления.МетодОценкиЗапасов.ПоСредней;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьМетодОценки(СтрокаТаблицыФормы.МетодОценки, СтрокаТаблицыФормы.МетодОценки_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "СпособПополнения") Тогда
				
			ЗначениеПоУмолчанию = Перечисления.СпособыПополненияЗапасов.Закупка;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСпособПополнения(СтрокаТаблицыФормы.СпособПополнения, СтрокаТаблицыФормы.СпособПополнения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
			
			СтрокаТаблицыФормы.Номенклатура = Неопределено;
			
		КонецЕсли;
		
		Если НЕ НоменклатураСопоставлена И ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") И ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
			
			// Характеристика по Владельцу и Наименованию
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы);
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				// Партия по Владельцу и Наименованию
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПартию(СтрокаТаблицыФормы.Партия, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Партия_ВходящиеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Количество
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
		
		// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
		ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Заказ по номеру, дате, признаку   				
		ДопустимыеТипыЗаказа = Документы.ПриходнаяНакладная.ДопустимыеТипыЗаказа(НастройкиЗагрузкиДанных.ВидОперации);
		Если ДопустимыеТипыЗаказа.СодержитТип(Тип("ДокументСсылка.ЗаказПокупателя")) Тогда
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЗаказ(СтрокаТаблицыФормы.ЗаказПокупателя, СтрокаТаблицыФормы.ЗаказПокупателя_ВходящиеДанные);					
		КонецЕсли;
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Резерв, СтрокаТаблицыФормы.Резерв_ВходящиеДанные, 0);
		
		// СтавкаНДС по наименованию
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтавкуНДС(СтрокаТаблицыФормы.СтавкаНДС, СтрокаТаблицыФормы.СтавкаНДС_ВходящиеДанные, Неопределено);
			
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПрогрессСопоставленияДанных(ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицыФормы), РазмерТаблицыДанных);
		
	КонецЦикла;
	
	ТаблицаСопоставленияДанных.ЗагрузитьКолонку(ТаблицаДублирующихСтрок.ВыгрузитьКолонку("КлючСвязи"), "_КлючСвязи");
	ПоместитьВоВременноеХранилище(ТаблицаСопоставленияДанных, АдресРезультата);
	
КонецПроцедуры

// Проверяет корректность данных в строке табличной части "Запасы"
//
// Параметры:
//   СтрокаТаблицыФормы - строка таблицы формы для проверки заполнения
//   ПолноеИмяОбъектаЗаполнения - строка, полное имя объекта для заполнения
//
Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт

	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	НоменклатураЗаполнена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
	ЗагрузкаНоменклатурыВозможна = Ложь;
	Если НЕ НоменклатураЗаполнена Тогда
		ЗагрузкаНоменклатурыВозможна = (ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименование) 
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименованиеПолное));
	КонецЕсли;

	Если НоменклатураЗаполнена Тогда

		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
			И Не СтрокаТаблицыФормы.Номенклатура.ЭтоНабор // Исключая наборы
			И СтрокаТаблицыФормы.Количество <> 0;
		СтрокаТаблицыФормы._СтрокаСопоставлена = НоменклатураЗаполнена;

	Иначе
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗагрузкаНоменклатурыВозможна;
	
	КонецЕсли;				

КонецПроцедуры

// Возвращает массив с типами доступными для поля Заказ
//
// Параметры:
//   ВидОперации - вид операции документа Перемещение запасов
//
// Возвращаемое значение:
//   Массив - массив, содержащий типы документов для поля Заказ
//
Функция ДопустимыеТипыЗаказа(ВидОперации) Экспорт
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	ДопустимыеТипы = Новый ОписаниеТипов(МассивОтбора);

	Возврат ДопустимыеТипы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - состав полей см. в функции ВерсионированиеОбъектов.НастройкиПодсистемы
//
// @skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсПечати

Функция СформироватьЗаказНаПеремещение(ОписаниеПечатнойФормы, МассивОбъектов, ОбъектыПечати)
	Перем ПервыйДокумент, НомерСтрокиНачало;
	
	ТабличныйДокумент	= ОписаниеПечатнойФормы.ТабличныйДокумент;
	Макет				= УправлениеПечатью.МакетПечатнойФормы(ОписаниеПечатнойФормы.ПолныйПутьКМакету);
	ДанныеПечати		= Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПеремещение.Ссылка КАК Ссылка,
	|	ЗаказНаПеремещение.Номер КАК Номер,
	|	ЗаказНаПеремещение.Дата КАК ДатаДокумента,
	|	ЗаказНаПеремещение.Организация КАК Организация,
	|	ЗаказНаПеремещение.Ответственный КАК Ответственный,
	|	ЗаказНаПеремещение.ЗаказПокупателя КАК Заказ,
	|	ЗаказНаПеремещение.ДатаПеремещения КАК ДатаПеремещения,
	|	ЗаказНаПеремещение.СтруктурнаяЕдиницаРезерв КАК Отправитель,
	|	ЗаказНаПеремещение.СтруктурнаяЕдиницаПолучатель КАК Получатель,
	|	ЗаказНаПеремещение.Организация.Префикс КАК Префикс,
	|	ЗаказНаПеремещение.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказНаПеремещение.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
	|				ТОГДА ЗаказНаПеремещение.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ЗаказНаПеремещение.Запасы.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК ПредставлениеНоменклатуры,
	|		Номенклатура КАК Номенклатура,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Код КАК Код,
	|		Характеристика КАК Характеристика,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Количество КАК Количество
	|	) КАК ТаблицаЗапасы
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ГДЕ
	|	ЗаказНаПеремещение.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Пока Шапка.Следующий() Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало,
			ДанныеПечати);
		
		// Заголовок
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");

		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента,
			Шапка.Номер, Шапка.Префикс);
		ДатаДокумента = Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
		ДанныеПечати.Вставить("ТекстЗаголовка", СтрШаблон(НСтр("ru ='Заказ на перемещение № %1 от %2'"), НомерДокумента,
			ДатаДокумента));

		ОбластьЗаголовок.Параметры.Заполнить(Шапка);
		ОбластьЗаголовок.Параметры.Заполнить(ДанныеПечати);
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок,
			Шапка.Ссылка);

		ТабличныйДокумент.Вывести(ОбластьЗаголовок);

		// Табличная часть "Запасы"
		ОбластьМакетаШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ПараметрыНоменклатуры = Новый Структура;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
		
		ТаблицаЗапасы = Шапка.ТаблицаЗапасы.Выгрузить();
		Для Каждого СтрокаТабличнойЧастиЗапасы Из ТаблицаЗапасы Цикл

			ДанныеПечати.Очистить();
			ДанныеПечати.Вставить("НомерСтроки", СтрокаТабличнойЧастиЗапасы.НомерСтроки);

			ПараметрыНоменклатуры.Очистить();
			ПараметрыНоменклатуры.Вставить("Содержание", Неопределено);
			ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры",
				СтрокаТабличнойЧастиЗапасы.ПредставлениеНоменклатуры);
			ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧастиЗапасы.Характеристика);
			ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", Ложь);

			ДанныеПечати.Вставить("ПредставлениеНоменклатуры", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(
				ПараметрыНоменклатуры));
			ДанныеПечати.Вставить("ПредставлениеКодаНоменклатуры", ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(
				СтрокаТабличнойЧастиЗапасы));

			ДанныеПечати.Вставить("Номенклатура", СтрокаТабличнойЧастиЗапасы.Номенклатура);
			ДанныеПечати.Вставить("Количество", СтрокаТабличнойЧастиЗапасы.Количество);
			ДанныеПечати.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧастиЗапасы.ЕдиницаИзмерения);

			ОбластьМакетаСтрока.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);

		КонецЦикла;
		
		// Подвал
		ОбластьПодвал.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		// Подписи
		ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
		ОбластьПодписи.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьПодписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов			 - Массив		 - ссылки на объекты, которые нужно распечатать
//  ПараметрыПечати			 - Структура	 - дополнительные настройки печати
//  КоллекцияПечатныхФорм	 - ТаблицаЗначений	 - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати			 - СписокЗначений	 - значение - ссылка на объект, представление - имя области, в которой был выведен объект (выходной параметр)
//  ПараметрыВывода			 - Структура		 - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ОписаниеПечатнойФормы = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ЗаказНаПеремещение");
	Если ОписаниеПечатнойФормы <> Неопределено Тогда
		
		ОписаниеПечатнойФормы.ТабличныйДокумент = Новый ТабличныйДокумент;
		ОписаниеПечатнойФормы.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаПеремещение_ЗаказНаПеремещение";
		ОписаниеПечатнойФормы.ПолныйПутьКМакету = "Документ.ЗаказНаПеремещение.ПФ_MXL_ЗаказНаПеремещение";
		ОписаниеПечатнойФормы.СинонимМакета = НСтр("ru ='Заказ на перемещение'");
		
		СформироватьЗаказНаПеремещение(ОписаниеПечатнойФормы, МассивОбъектов, ОбъектыПечати);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, 
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//  КомандыПечати	 - ТаблицаЗначений	 - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаказНаПеремещение";
	КомандаПечати.Представление = НСтр("ru = 'Заказ на перемещение'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела	 - ТаблицаЗначений	 - состав полей см. в функции ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ГруппаДел	= НСтр("ru = 'Заказы на перемещение'");
	ИмяФормы	= "Документ.ЗаказНаПеремещение.Форма.ФормаСписка";
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказНаПеремещение)
		Или ТекущиеДелаСервер.ДелоОтключено(ГруппаДел) Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА КОНЕЦПЕРИОДА(ДокЗаказНаПеремещение.ДатаПеремещения, ДЕНЬ) < &ТекущаяДата
	|					И ЕСТЬNULL(ЗаказыНаПеремещениеОстатки.КоличествоОстаток, 0) > 0
	|				ТОГДА ДокЗаказНаПеремещение.Ссылка
	|		КОНЕЦ) КАК ЗаказыНаПеремещениеПросроченоВыполнение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДокЗаказНаПеремещение.ДатаПеремещения <= КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|					И ДокЗаказНаПеремещение.ДатаПеремещения >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|					И ЕСТЬNULL(ЗаказыНаПеремещениеОстатки.КоличествоОстаток, 0) > 0
	|				ТОГДА ДокЗаказНаПеремещение.Ссылка
	|		КОНЕЦ) КАК ЗаказыНаПеремещениеНаСегодня,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокЗаказНаПеремещение.Ссылка) КАК ЗаказыНаПеремещениеНеЗавершенные
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ДокЗаказНаПеремещение
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаПеремещение.Остатки(, ) КАК ЗаказыНаПеремещениеОстатки
	|		ПО ДокЗаказНаПеремещение.Ссылка = ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение}
	|ГДЕ
	|	ДокЗаказНаПеремещение.Проведен
	|	И НЕ ДокЗаказНаПеремещение.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовНаПеремещение.Завершен)
	|	И ДокЗаказНаПеремещение.Ответственный В(&СотрудникиПользователя)";
	
	ДанныеДел = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	 = "ЗаказыНаПеремещениеПросроченоВыполнение";
	Дело.ЕстьДела		= ДанныеДел.ЗаказыНаПеремещениеПросроченоВыполнение > 0;
	Дело.Важное			= Истина;
	Дело.Представление	= НСтр("ru = 'Просроченные'");
	Дело.Количество		= ДанныеДел.ЗаказыНаПеремещениеПросроченоВыполнение;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,ПросроченоВыполнение", "ПросроченоВыполнение");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаказыНаПеремещениеНаСегодня";
	Дело.ЕстьДела		= ДанныеДел.ЗаказыНаПеремещениеНаСегодня > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'На сегодня'");
	Дело.Количество		= ДанныеДел.ЗаказыНаПеремещениеНаСегодня;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,НаСегодня", "НаСегодня");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаказыНаПеремещениеНеЗавершенные";
	Дело.ЕстьДела		= ДанныеДел.ЗаказыНаПеремещениеНеЗавершенные > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'Не завершенные'");
	Дело.Количество		= ДанныеДел.ЗаказыНаПеремещениеНеЗавершенные;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,НеЗавершенные", "НеЗавершенные");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаЗаказНаПеремещение, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаИнициализироватьДанныеДокумента();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказНаПеремещение);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	
	МассивРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	СформироватьТаблицаЗаказыНаПеремещение(ДокументСсылкаЗаказНаПеремещение, СтруктураДополнительныеСвойства);
	СформироватьТаблицаГрафикДвиженияЗапасов(ДокументСсылкаЗаказНаПеремещение, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРазмещениеЗаказов(ДокументСсылкаЗаказНаПеремещение, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасы(ДокументСсылкаЗаказНаПеремещение, СтруктураДополнительныеСвойства);
	
КонецПроцедуры

Функция ТекстЗапросаИнициализироватьДанныеДокумента()
	
	Возврат
	"ВЫБРАТЬ
	|	ЗаказНаПеремещение.Ссылка КАК Ссылка,
	|	ЗаказНаПеремещение.Дата КАК Дата,
	|	ЗаказНаПеремещение.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказНаПеремещение.ПоложениеЗаказаПокупателя КАК ПоложениеЗаказаПокупателя,
	|	&Организация КАК Организация,
	|	ЗаказНаПеремещение.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаРезерв,
	|	ЗаказНаПеремещение.СтруктурнаяЕдиницаРезерв.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницыРезерв,
	|	ЗаказНаПеремещение.СтруктурнаяЕдиницаПолучатель КАК СтруктурнаяЕдиницаПолучатель,
	|	ЗаказНаПеремещение.СтруктурнаяЕдиницаПолучатель.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницыПолучатель,
	|	ЗаказНаПеремещение.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗаказНаПеремещение.ДатаПеремещения КАК ДатаПеремещения,
	|	ЗаказНаПеремещение.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказНаПеремещение.ВариантЗавершения КАК ВариантЗавершения,
	|	ЗаказНаПеремещение.НеРазмещатьЗаказыПокупателей КАК НеРазмещатьЗаказыПокупателей
	|ПОМЕСТИТЬ Шапка
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ГДЕ
	|	ЗаказНаПеремещение.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаПеремещениеЗапасы.Ссылка КАК Ссылка,
	|	ЗаказНаПеремещениеЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказНаПеремещениеЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказНаПеремещениеЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказНаПеремещениеЗапасы.Номенклатура.СчетУчетаЗатрат КАК СчетУчетаЗатрат,
	|	ЗаказНаПеремещениеЗапасы.Номенклатура.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНаПеремещениеЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЗаказНаПеремещениеЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ЗаказНаПеремещениеЗапасы.Количество * ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПеремещениеЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ЗаказНаПеремещениеЗапасы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Количество,
	|	ЗаказНаПеремещениеЗапасы.Резерв * ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПеремещениеЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ЗаказНаПеремещениеЗапасы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Резерв,
	|	ЗаказНаПеремещениеЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказНаПеремещениеЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Запасы КАК ЗаказНаПеремещениеЗапасы
	|ГДЕ
	|	ЗаказНаПеремещениеЗапасы.Ссылка = &Ссылка";
	
КонецФункции

Процедура ВыполнитьКонтроль(ДокументСсылкаЗаказНаПеремещение, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если ПроведениеДокументовУНФ.КонтрольОстатковВыключен() Тогда
		Возврат;
	КонецЕсли;

	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыНаСкладахИзменение", "ДвиженияЗапасыИзменение"
	// содержат записи, необходимо выполнить контроль реализации товаров.
	
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыНаПеремещениеИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияРазмещениеЗаказовИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчетаПредставление,
		|	ДвиженияЗапасыИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
		|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
		|ИЗ
		|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчета,
		|						ДвиженияЗапасыИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателя
		|					ИЗ
		|						ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение)) КАК ЗапасыОстатки
		|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
		|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
		|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
		|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
		|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
		|			И (ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыНаПеремещениеИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗаказыНаПеремещениеИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗаказыНаПеремещениеИзменение.ТипДвижения КАК ТипДвижения,
		|	ДвиженияЗаказыНаПеремещениеИзменение.Склад КАК СкладПредставление,
		|	ДвиженияЗаказыНаПеремещениеИзменение.ЗаказНаПеремещение КАК ЗаказНаПеремещениеПредставление,
		|	ДвиженияЗаказыНаПеремещениеИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗаказыНаПеремещениеИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ЗаказыНаПеремещениеОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыНаПеремещениеИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыНаПеремещениеОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыНаПеремещение,
		|	ЕСТЬNULL(ЗаказыНаПеремещениеОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыНаПеремещение
		|ИЗ
		|	ДвиженияЗаказыНаПеремещениеИзменение КАК ДвиженияЗаказыНаПеремещениеИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаПеремещение.Остатки(&МоментКонтроля, ) КАК ЗаказыНаПеремещениеОстатки
		|		ПО ДвиженияЗаказыНаПеремещениеИзменение.Организация = ЗаказыНаПеремещениеОстатки.Организация
		|			И ДвиженияЗаказыНаПеремещениеИзменение.ТипДвижения = ЗаказыНаПеремещениеОстатки.ТипДвижения
		|			И ДвиженияЗаказыНаПеремещениеИзменение.Склад = ЗаказыНаПеремещениеОстатки.Склад
		|			И ДвиженияЗаказыНаПеремещениеИзменение.ЗаказНаПеремещение = ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение
		|			И ДвиженияЗаказыНаПеремещениеИзменение.Номенклатура = ЗаказыНаПеремещениеОстатки.Номенклатура
		|			И ДвиженияЗаказыНаПеремещениеИзменение.Характеристика = ЗаказыНаПеремещениеОстатки.Характеристика
		|			И (ЕСТЬNULL(ЗаказыНаПеремещениеОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияРазмещениеЗаказовИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.ЗаказПокупателя) КАК ЗаказПокупателяПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.ИсточникОбеспечения) КАК ИсточникОбеспеченияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(РазмещениеЗаказовОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияРазмещениеЗаказовИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) КАК ОстатокРазмещениеЗаказов,
		|	ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокРазмещениеЗаказов
		|ИЗ
		|	ДвиженияРазмещениеЗаказовИзменение КАК ДвиженияРазмещениеЗаказовИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
		|				&МоментКонтроля,
		|				(Организация, ЗаказПокупателя, Номенклатура, Характеристика, ИсточникОбеспечения) В
		|					(ВЫБРАТЬ
		|						ДвиженияРазмещениеЗаказовИзменение.Организация КАК Организация,
		|						ДвиженияРазмещениеЗаказовИзменение.ЗаказПокупателя КАК ЗаказПокупателя,
		|						ДвиженияРазмещениеЗаказовИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияРазмещениеЗаказовИзменение.Характеристика КАК Характеристика,
		|						ДвиженияРазмещениеЗаказовИзменение.ИсточникОбеспечения КАК ИсточникОбеспечения
		|					ИЗ
		|						ДвиженияРазмещениеЗаказовИзменение КАК ДвиженияРазмещениеЗаказовИзменение)) КАК РазмещениеЗаказовОстатки
		|		ПО ДвиженияРазмещениеЗаказовИзменение.Организация = РазмещениеЗаказовОстатки.Организация
		|			И ДвиженияРазмещениеЗаказовИзменение.ЗаказПокупателя = РазмещениеЗаказовОстатки.ЗаказПокупателя
		|			И ДвиженияРазмещениеЗаказовИзменение.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
		|			И ДвиженияРазмещениеЗаказовИзменение.Характеристика = РазмещениеЗаказовОстатки.Характеристика
		|			И ДвиженияРазмещениеЗаказовИзменение.ИсточникОбеспечения = РазмещениеЗаказовОстатки.ИсточникОбеспечения
		|ГДЕ
		|	ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
			ИЛИ НЕ МассивРезультатов[1].Пустой()
			ИЛИ НЕ МассивРезультатов[2].Пустой() Тогда
			
			ДокументОбъектЗаказНаПеремещение = ДокументСсылкаЗаказНаПеремещение.ПолучитьОбъект()
			
		КонецЕсли;
		
		// Отрицательный остаток учета запасов и затрат.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			КонтрольОстатковУНФ.Запасы(ДокументОбъектЗаказНаПеремещение, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета заказов на перемещение.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			КонтрольОстатковУНФ.ЗаказыНаПеремещение(ДокументОбъектЗаказНаПеремещение, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по размещению заказов.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			КонтрольОстатковУНФ.РазмещениеЗаказов(ДокументОбъектЗаказНаПеремещение, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТаблицаЗаказыНаПеремещение(ДокументСсылкаЗаказНаПеремещение, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Запасы.НомерСтроки КАК НомерСтроки,
	|	Шапка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Шапка.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	Шапка.Ссылка КАК ЗаказНаПеремещение,
	|	Шапка.СтруктурнаяЕдиницаРезерв КАК Склад,
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	Запасы.Количество КАК Количество
	|ИЗ
	|	Шапка КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Запасы КАК Запасы
	|		ПО Шапка.Ссылка = Запасы.Ссылка
	|ГДЕ
	|	Шапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Запасы.НомерСтроки,
	|	Шапка.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	Шапка.Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Поступление),
	|	Шапка.Ссылка,
	|	Шапка.СтруктурнаяЕдиницаПолучатель,
	|	Запасы.Номенклатура,
	|	Запасы.Характеристика,
	|	Запасы.Количество
	|ИЗ
	|	Шапка КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Запасы КАК Запасы
	|		ПО Шапка.Ссылка = Запасы.Ссылка
	|ГДЕ
	|	Шапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыНаПеремещение", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаГрафикДвиженияЗапасов(ДокументСсылкаЗаказНаПеремещение, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Запасы.НомерСтроки КАК НомерСтроки,
	|	Шапка.ДатаПеремещения КАК Период,
	|	Шапка.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	Шапка.Ссылка КАК Заказ,
	|	Шапка.СтруктурнаяЕдиницаРезерв КАК Склад,
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	Запасы.Количество КАК Количество
	|ИЗ
	|	Шапка КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Запасы КАК Запасы
	|		ПО Шапка.Ссылка = Запасы.Ссылка
	|ГДЕ
	|	Шапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Запасы.НомерСтроки,
	|	Шапка.ДатаПеремещения,
	|	Шапка.Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Поступление),
	|	Шапка.Ссылка,
	|	Шапка.СтруктурнаяЕдиницаПолучатель,
	|	Запасы.Номенклатура,
	|	Запасы.Характеристика,
	|	Запасы.Количество
	|ИЗ
	|	Шапка КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Запасы КАК Запасы
	|		ПО Шапка.Ссылка = Запасы.Ссылка
	|ГДЕ
	|	Шапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГрафикДвиженияЗапасов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаРазмещениеЗаказов(ДокументСсылкаЗаказНаПеремещение, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИспользоватьРезервирование", СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Запасы.НомерСтроки КАК НомерСтроки,
	|	Шапка.ДатаПеремещения КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Шапка.Организация КАК Организация,
	|	Запасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	Шапка.Ссылка КАК ИсточникОбеспечения,
	|	Запасы.Количество - Запасы.Резерв КАК Количество
	|ИЗ
	|	Шапка КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Запасы КАК Запасы
	|		ПО Шапка.Ссылка = Запасы.Ссылка
	|ГДЕ
	|	&ИспользоватьРезервирование
	|	И Запасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И Шапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И Запасы.Количество - Запасы.Резерв > 0
	|	И НЕ Шапка.НеРазмещатьЗаказыПокупателей
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРазмещениеЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаЗапасы(ДокументСсылкаЗаказНаПеремещение, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("РезервированиеЗапасов", НСтр("ru = 'Резервирование запасов'"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Запасы.НомерСтроки КАК НомерСтроки,
	|	Шапка.Дата КАК Период,
	|	Шапка.Организация КАК Организация,
	|	Шапка.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	Шапка.СтруктурнаяЕдиницаПолучатель КАК КоррСтруктурнаяЕдиница,
	|	Запасы.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА Шапка.ТипСтруктурнойЕдиницыРезерв = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА Запасы.СчетУчетаЗатрат
	|		ИНАЧЕ Запасы.СчетУчетаЗапасов
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА Шапка.ТипСтруктурнойЕдиницыПолучатель = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА Запасы.СчетУчетаЗатрат
	|		ИНАЧЕ Запасы.СчетУчетаЗапасов
	|	КОНЕЦ КАК КоррСчетУчета,
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	Запасы.Партия КАК Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя,
	|	Запасы.ЗаказПокупателя КАК КоррЗаказПокупателя,
	|	Запасы.Резерв КАК Количество,
	|	0 КАК Сумма,
	|	&РезервированиеЗапасов КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Шапка КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Запасы КАК Запасы
	|		ПО Шапка.Ссылка = Запасы.Ссылка
	|ГДЕ
	|	Запасы.Резерв > 0
	|	И Запасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И Шапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.СчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Номенклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Характеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Партия КАК КоррПартия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	ТаблицаЗапасы.ТипНоменклатуры КАК ТипНоменклатуры
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.ТипНоменклатуры,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Выгрузить());
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ПОМЕСТИТЬ втЗапасы
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			&МоментКонтроля,
	|			(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|				(ВЫБРАТЬ
	|					ВременнаяТаблицаЗапасы.Организация,
	|					ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница,
	|					ВременнаяТаблицаЗапасы.СчетУчета,
	|					ВременнаяТаблицаЗапасы.Номенклатура,
	|					ВременнаяТаблицаЗапасы.Характеристика,
	|					ВременнаяТаблицаЗапасы.Партия,
	|					ВременнаяТаблицаЗапасы.ЗаказПокупателя
	|				ИЗ
	|					ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияДокументаЗапасы.Организация,
	|	ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|	ДвиженияДокументаЗапасы.СчетУчета,
	|	ДвиженияДокументаЗапасы.Номенклатура,
	|	ДвиженияДокументаЗапасы.Характеристика,
	|	ДвиженияДокументаЗапасы.Партия,
	|	ВЫБОР
	|		КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|ГДЕ
	|	ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|	И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля
	|	И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗапасы.Организация КАК Организация,
	|	втЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	втЗапасы.СчетУчета КАК СчетУчета,
	|	втЗапасы.Номенклатура КАК Номенклатура,
	|	втЗапасы.Характеристика КАК Характеристика,
	|	втЗапасы.Партия КАК Партия,
	|	СУММА(втЗапасы.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(втЗапасы.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	втЗапасы КАК втЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗапасы.Организация,
	|	втЗапасы.СтруктурнаяЕдиница,
	|	втЗапасы.СчетУчета,
	|	втЗапасы.Номенклатура,
	|	втЗапасы.Характеристика,
	|	втЗапасы.Партия";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказНаПеремещение);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия");
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();

	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуетсяРезерв = СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуетсяРезерв > 0 Тогда
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда

				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);

				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяРезерв;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;

			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда

				СуммаКСписанию = СуммаОстаток;

				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;

			Иначе
				СуммаКСписанию = 0;	
			КонецЕсли;
	
			// Расход.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
			
			// Приход
			Если Окр(СуммаКСписанию, 2, 1) <> 0 ИЛИ КоличествоТребуетсяРезерв > 0 Тогда
				
				СтрокаТаблицыПриход = ВременнаяТаблицаЗапасы.Добавить();
				ПроизводствоСервер.ЗаполнитьДвижениеЗапасыЗеркально(СтрокаТаблицыПриход, СтрокаТаблицыРасход);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#КонецЕсли