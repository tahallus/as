
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ВариантыКП
	ЗаполнитьВариантыКП();
	ОпределитьИспользованиеРазделителейВТаблице();
	// Конец ВариантыКП
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//ДействияПослеЧтенияОбъекта();
		ЗаполнитьВариантыКП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды



&НаКлиенте
Процедура ОчиститьКалькуляцию()
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ТекущийВариантКППриИзменении(Элемент)
	
	Если ТекущийВариантКП > Объект.КоличествоВариантовКП Тогда
		Модифицированность = Истина;
		ЗаполнитьВариантыКП("Создание");
		ОчиститьКалькуляцию();
	Иначе
		ЗаполнитьВариантыКП();
	КонецЕсли;
	
	//РассчитатьОбъемИВесЗаказа();
	//ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
	//Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтрок.Пометка = Ложь;
	//Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
	
	// СборкаЗаказов
	//СборкаЗаказовПриОткрытии();
	// Конец СборкаЗаказов
	
КонецПроцедуры

// ВариантыКП
&НаКлиенте
Процедура ВариантыКПВыбратьОсновным(Команда)
	
	Если Элементы.ВариантыКПВыбратьОсновным.Пометка Тогда
		Объект.ОсновнойВариантКП = 0;
	Иначе
		Объект.ОсновнойВариантКП = ТекущийВариантКП;
	КонецЕсли;
	
	ЗаполнитьВариантыКП("ВыборОсновного", Ложь);
	//РассчитатьОбъемИВесЗаказа();
	ОчиститьКалькуляцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыКПДобавить(Команда)
	
	ЗаполнитьВариантыКП("Создание");
	ОчиститьКалькуляцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыКПСкопировать(Команда)
	
	ЗаполнитьВариантыКП("Копирование");
	ОчиститьКалькуляцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыКПУдалить(Команда)
	
	ЗаполнитьВариантыКП("Удаление");
	ОчиститьКалькуляцию();
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПозиции(Команда)
	
	// Наборы
	//ВыделенныеНаборы = Новый Массив;
	//Для каждого ИдентификаторСтроки Из Элементы.Запасы.ВыделенныеСтроки Цикл
	//	Строка = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
	//	Если ЗначениеЗаполнено(Строка.НоменклатураНабора) Тогда
	//		ДобавитьОписаниеНабора(ВыделенныеНаборы, Строка.НоменклатураНабора, Строка.ХарактеристикаНабора, Строка.НомерВариантаКП); 
	//	КонецЕсли; 
	//КонецЦикла;
	//Для каждого ОписаниеНабора Из ВыделенныеНаборы Цикл
	//	СтрокиСостава = Объект.Запасы.НайтиСтроки(ОписаниеНабора);
	//	Для каждого СтрокаСостава Из СтрокиСостава Цикл
	//		ИдентификаторСтроки = СтрокаСостава.ПолучитьИдентификатор();
	//		Если Элементы.Запасы.ВыделенныеСтроки.Найти(ИдентификаторСтроки)=Неопределено Тогда
	//			ПоказатьПредупреждение(, НСтр("ru = 'В группу можно добавить только набор целиком'"));
	//			Возврат;
	//		КонецЕсли; 
	//	КонецЦикла; 
	//КонецЦикла; 
	// Конец Наборы
	
	ЗапасыИспользуетсяГруппировка = Истина;
	
	Строки = Объект.Запасы.НайтиСтроки(Новый Структура("ЭтоРазделитель", Истина));
	
	Строка = Объект.Запасы.Добавить();
	Строка.НомерВариантаКП = ТекущийВариантКП;
	Строка.Номенклатура = СтрШаблон(НСтр("ru='Группа %1'"), Строки.Количество() + 1);
	Строка.ЭтоРазделитель = Истина;
	Строка.НомерКартинки = 1;
	Строка.НомерВариантаКП = ТекущийВариантКП;
	
	Если Элементы.Запасы.ВыделенныеСтроки.Количество() > 1 Тогда
		Для каждого ИдентификаторСтроки Из Элементы.Запасы.ВыделенныеСтроки Цикл
			Строка = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
			Объект.Запасы.Сдвинуть(Объект.Запасы.Индекс(Строка), Объект.Запасы.Количество() - Строка.НомерСтроки);
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьУпорядочиваниеСтрокТаблицаЗапасы();
	//ОбновитьИтогиКлиент();
	
	Элементы.Запасы.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
	Элементы.Запасы.ВыделенныеСтроки.Очистить();
	Элементы.Запасы.ВыделенныеСтроки.Добавить(Строка.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереместитьВверхСтрокуКП(Команда)
	
	ПереместитьСтрокуТаблицы(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереместитьВнизСтрокуКП(Команда)
	
	ПереместитьСтрокуТаблицы(1);
	
КонецПроцедуры

// Перемещает выделенные в таблице строки на одну позицию вверх/вниз.
//
// Параметры:
//  Сдвиг	 - Число [-1;1] - Задает направление перемещения строк.
//                            Положительное значение означает, что строка будет передвинута ближе к концу таблицы (вниз),
//                            отрицательное - ближе к началу (вверх).
//
&НаСервере
Процедура ПереместитьСтрокуТаблицы(Направление)
	
	Если Элементы.Запасы.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление > 0 Тогда
		КрайняяСтрокаИдентификатор = Элементы.Запасы.ВыделенныеСтроки[Элементы.Запасы.ВыделенныеСтроки.ВГраница()];
	Иначе
		КрайняяСтрокаИдентификатор = Элементы.Запасы.ВыделенныеСтроки[0];
	КонецЕсли;
	КрайняяСтрока = Объект.Запасы.НайтиПоИдентификатору(КрайняяСтрокаИдентификатор);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерВариантаКП", ТекущийВариантКП);
	СтруктураПоиска.Вставить("НомерСтрокиВнутренний", КрайняяСтрока.НомерСтрокиВнутренний + Направление);
	Строки = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
	СоседняяСтрока = Неопределено;
	Если Строки.Количество() <> 0 Тогда
		СоседняяСтрока = Строки[0];
	КонецЕсли;
	
	Если СоседняяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление > 0 Тогда
		Итератор = Элементы.Запасы.ВыделенныеСтроки.ВГраница();
		Пока Итератор >= 0 Цикл
			ИдентификаторСтроки = Элементы.Запасы.ВыделенныеСтроки[Итератор];
			Строка = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
			Объект.Запасы.Сдвинуть(Объект.Запасы.Индекс(Строка), СоседняяСтрока.НомерСтроки - Строка.НомерСтроки);
			Итератор = Итератор - 1;
		КонецЦикла;
	Иначе
		Для каждого ИдентификаторСтроки Из Элементы.Запасы.ВыделенныеСтроки Цикл
			Строка = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
			Объект.Запасы.Сдвинуть(Объект.Запасы.Индекс(Строка), СоседняяСтрока.НомерСтроки - Строка.НомерСтроки);
		КонецЦикла;
	КонецЕсли;
	
	УстановитьОтборПоВариантуКП();
	
КонецПроцедуры

// Конец ВариантыКП

#Область ВариантыКП

&НаКлиенте
Функция ОжидаетсяВыборВариантаКП()
	
	Возврат Объект.КоличествоВариантовКП <> 0 И Объект.ОсновнойВариантКП = 0;
	
КонецФункции

&НаСервере
Процедура ОпределитьИспользованиеРазделителейВТаблице()
	
	// Признак проверяется при чтении объекта. Взводится при интерактивном вызове команды.
	ЗапасыИспользуетсяГруппировка = Объект.Запасы.НайтиСтроки(
		Новый Структура("ЭтоРазделитель", Истина)
	).Количество();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомераСтрокТаблицаЗапасы(Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок)
	
	ЗапасыНомерПоследнейСтрокиВнутренний    = 1;
	ЗапасыНомерПоследнейСтрокиПредставление = 1;
	ЗапасыКоличествоСтрок = 0;
	
	СтруктураПоиска = Новый Структура("НомерВариантаКП", ТекущийВариантКП);
	НайденныеСтроки = Запасы.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		Строка.НомерСтрокиВнутренний = ЗапасыНомерПоследнейСтрокиВнутренний;
		ЗапасыНомерПоследнейСтрокиВнутренний = ЗапасыНомерПоследнейСтрокиВнутренний + 1;
		
		Если Строка.ЭтоРазделитель Тогда
			ЗапасыНомерПоследнейСтрокиПредставление = 1;
			Строка.НомерСтрокиПредставление = 0;
		Иначе
			ЗапасыКоличествоСтрок = ЗапасыКоличествоСтрок + 1;
			Строка.НомерСтрокиПредставление = ЗапасыНомерПоследнейСтрокиПредставление;
			ЗапасыНомерПоследнейСтрокиПредставление = ЗапасыНомерПоследнейСтрокиПредставление + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУпорядочиваниеСтрокТаблицаЗапасы()
	
	ОпределитьИспользованиеРазделителейВТаблице();
	
	ПлатформенноеУпорядочиваниеСтрок = ТекущийВариантКП = 0 И НЕ ЗапасыИспользуетсяГруппировка;
	
	Элементы.ЗапасыКомандыПеремещенияСтрок.ПодчиненныеЭлементы.ЗапасыПереместитьВверх.Видимость        = ПлатформенноеУпорядочиваниеСтрок;
	Элементы.ЗапасыКомандыПеремещенияСтрок.ПодчиненныеЭлементы.ЗапасыПереместитьВниз.Видимость         = ПлатформенноеУпорядочиваниеСтрок;
	Элементы.ЗапасыКонтекстноеМеню.ПодчиненныеЭлементы.ЗапасыКонтекстноеМенюПереместитьВверх.Видимость = ПлатформенноеУпорядочиваниеСтрок;
	Элементы.ЗапасыКонтекстноеМеню.ПодчиненныеЭлементы.ЗапасыКонтекстноеМенюПереместитьВниз.Видимость  = ПлатформенноеУпорядочиваниеСтрок;
	
	Элементы.ЗапасыКомандыПеремещенияСтрокКП.ПодчиненныеЭлементы.ЗапасыПереместитьВверхСтрокуКП.Видимость            = НЕ ПлатформенноеУпорядочиваниеСтрок;
	Элементы.ЗапасыКомандыПеремещенияСтрокКП.ПодчиненныеЭлементы.ЗапасыПереместитьВнизСтрокуКП.Видимость             = НЕ ПлатформенноеУпорядочиваниеСтрок;
	Элементы.ЗапасыКонтекстноеМеню.ПодчиненныеЭлементы.ЗапасыКонтекстноеМенюЗапасыПереместитьВверхСтрокуКП.Видимость = НЕ ПлатформенноеУпорядочиваниеСтрок;
	Элементы.ЗапасыКонтекстноеМеню.ПодчиненныеЭлементы.ЗапасыКонтекстноеМенюЗапасыПереместитьВнизСтрокуКП.Видимость  = НЕ ПлатформенноеУпорядочиваниеСтрок;
	
	Элементы.ЗапасыНомерСтроки.Видимость              = ПлатформенноеУпорядочиваниеСтрок;
	Элементы.ЗапасыНомерСтрокиПредставление.Видимость = НЕ ПлатформенноеУпорядочиваниеСтрок;
	
	ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСоставаВариантов(Операция)
	
	Если Операция = "Создание" ИЛИ Операция = "Копирование" Тогда
		
		Если Объект.КоличествоВариантовКП = 0 Тогда
			Для каждого Строка Из Объект.Запасы Цикл
				Строка.НомерВариантаКП = 1;
			КонецЦикла;
			Для каждого Строка Из Объект.Варианты Цикл
				Строка.НомерВариантаКП = 1;
			КонецЦикла;
		КонецЕсли;
		
		Если Объект.КоличествоВариантовКП = 0 Тогда
			Объект.КоличествоВариантовКП = 2;
			КопируемыйВариант = 1;
		Иначе
			Объект.КоличествоВариантовКП = Объект.КоличествоВариантовКП + 1;
			КопируемыйВариант = ТекущийВариантКП;
		КонецЕсли;
			
		Если Операция = "Копирование" Тогда
			СтруктураОтбора = Новый Структура("НомерВариантаКП", КопируемыйВариант);
			Строки = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
			Для каждого Строка Из Строки Цикл
				НоваяСтрока = Объект.Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,,);
				Строка.НомерВариантаКП = Объект.КоличествоВариантовКП;
			КонецЦикла;
			Строки = Объект.Варианты.НайтиСтроки(СтруктураОтбора);
			Для каждого Строка Из Строки Цикл
				НоваяСтрока = Объект.Варианты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,,);
				Строка.НомерВариантаКП = Объект.КоличествоВариантовКП;
			КонецЦикла;
		Иначе
			НоваяСтрока = Объект.Варианты.Добавить();
			НоваяСтрока.НомерВариантаКП = Объект.КоличествоВариантовКП;
		КонецЕсли;
		
		ТекущийВариантКП = Объект.КоличествоВариантовКП;
		
	КонецЕсли;
	
	Если Операция = "Удаление" Тогда
		
		Строки = Объект.Запасы.НайтиСтроки(Новый Структура("НомерВариантаКП", ТекущийВариантКП));
		Для каждого Строка Из Строки Цикл
			Объект.Запасы.Удалить(Строка);
		КонецЦикла;
		Строки = Объект.Варианты.НайтиСтроки(Новый Структура("НомерВариантаКП", ТекущийВариантКП));
		Для каждого Строка Из Строки Цикл
			Объект.Варианты.Удалить(Строка);
		КонецЦикла;
		
		Если Объект.КоличествоВариантовКП = 2 Тогда
			Объект.КоличествоВариантовКП = 0;
		Иначе
			Объект.КоличествоВариантовКП = Объект.КоличествоВариантовКП - 1;
		КонецЕсли;
		
		Если Объект.КоличествоВариантовКП = 0 Тогда
			Для каждого Строка Из Объект.Запасы Цикл
				Строка.НомерВариантаКП = 0;
			КонецЦикла;
			Для каждого Строка Из Объект.Варианты Цикл
				Строка.НомерВариантаКП = 0;
			КонецЦикла;
		Иначе
			Для каждого Строка Из Объект.Запасы Цикл
				Если Строка.НомерВариантаКП <= ТекущийВариантКП Тогда
					Продолжить;
				КонецЕсли;
				Строка.НомерВариантаКП = Строка.НомерВариантаКП - 1;
			КонецЦикла;
			Для каждого Строка Из Объект.Варианты Цикл
				Если Строка.НомерВариантаКП <= ТекущийВариантКП Тогда
					Продолжить;
				КонецЕсли;
				Строка.НомерВариантаКП = Строка.НомерВариантаКП - 1;
			КонецЦикла;
		КонецЕсли;
		
		Если Объект.ОсновнойВариантКП = ТекущийВариантКП ИЛИ Объект.КоличествоВариантовКП = 0 Тогда
			Объект.ОсновнойВариантКП = 0;
		ИначеЕсли Объект.ОсновнойВариантКП > ТекущийВариантКП Тогда
			Объект.ОсновнойВариантКП = Объект.ОсновнойВариантКП - 1;
		КонецЕсли;
		
		ТекущийВариантКП = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВариантыКП(Операция = Неопределено, УстановитьОтбор = Истина)
	
	РазрешеноРедактированиеДокумента = Истина;//ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказПокупателя);

	Если Операция <> Неопределено Тогда
		ОбработатьИзменениеСоставаВариантов(Операция);
	КонецЕсли;
	
	Элементы.ТекущийВариантКП.СписокВыбора.Очистить();
	
	ЕстьНесколькоВариантовКП = Объект.КоличествоВариантовКП > 1;
	
	Если ЕстьНесколькоВариантовКП Тогда
		Для НомерВарианта = 1 По Объект.КоличествоВариантовКП Цикл
			Если НомерВарианта = Объект.ОсновнойВариантКП Тогда
				ПостфиксВарианта = НСтр("ru='(основной)'");
			Иначе
				ПостфиксВарианта = "";
			КонецЕсли;
			ИмяВарианта = СтрШаблон(НСтр("ru='Вариант %1 %2'"), НомерВарианта, ПостфиксВарианта);
			
			Элементы.ТекущийВариантКП.СписокВыбора.Добавить(НомерВарианта, ИмяВарианта);
		КонецЦикла;
		
		Если РазрешеноРедактированиеДокумента Тогда
			Элементы.ТекущийВариантКП.СписокВыбора.Добавить(НомерВарианта, "+");
		КонецЕсли;
	Иначе
		ИмяВарианта = НСтр("ru='Основной вариант'");
		Элементы.ТекущийВариантКП.СписокВыбора.Добавить(0, ИмяВарианта);
		Если РазрешеноРедактированиеДокумента Тогда
			Элементы.ТекущийВариантКП.СписокВыбора.Добавить(2, "+");
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ТекущийВариантКП.СписокВыбора.НайтиПоЗначению(ТекущийВариантКП) = Неопределено Тогда
		ТекущийВариантКП = ?(Объект.ОсновнойВариантКП <> 0, Объект.ОсновнойВариантКП, Элементы.ТекущийВариантКП.СписокВыбора[0].Значение);
	КонецЕсли;
	
	Элементы.КоманднаяПанельВариантыКП.Видимость = РазрешеноРедактированиеДокумента И ЕстьНесколькоВариантовКП;
	Элементы.ТекущийВариантКПКонтекстноеМеню.ПодчиненныеЭлементы.ВариантыКПВыбратьОсновнымКонтекстноеМеню.Видимость = РазрешеноРедактированиеДокумента И ЕстьНесколькоВариантовКП;
	Элементы.ТекущийВариантКПКонтекстноеМеню.ПодчиненныеЭлементы.ВариантыКПДобавитьКонтекстноеМеню.Видимость        = РазрешеноРедактированиеДокумента И ЕстьНесколькоВариантовКП;
	Элементы.ТекущийВариантКПКонтекстноеМеню.ПодчиненныеЭлементы.ВариантыКПСкопироватьКонтекстноеМеню.Видимость     = РазрешеноРедактированиеДокумента;
	Элементы.ТекущийВариантКПКонтекстноеМеню.ПодчиненныеЭлементы.ВариантыКПУдалитьКонтекстноеМеню.Видимость         = РазрешеноРедактированиеДокумента И ЕстьНесколькоВариантовКП;
	Элементы.ДействияСВариантом.ПодчиненныеЭлементы.ВариантыКПВыбратьОсновным.Пометка  = (ТекущийВариантКП = Объект.ОсновнойВариантКП);
	Элементы.ТекущийВариантКПКонтекстноеМеню.ПодчиненныеЭлементы.ВариантыКПВыбратьОсновнымКонтекстноеМеню.Пометка = (ТекущийВариантКП = Объект.ОсновнойВариантКП);
	
	Если УстановитьОтбор Тогда
		УстановитьОтборПоВариантуКП();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоВариантуКП()
	
	ОбновитьУпорядочиваниеСтрокТаблицаЗапасы();
	
	Если Объект.КоличествоВариантовКП <= 1 Тогда
		Если Элементы.Запасы.ОтборСтрок <> Неопределено Тогда
			Элементы.Запасы.ОтборСтрок = Неопределено;
		КонецЕсли;
	Иначе
		Элементы.Запасы.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерВариантаКП", ТекущийВариантКП);
	КонецЕсли;
	
	
	Если Объект.КоличествоВариантовКП <= 1 Тогда
		Если Объект.Варианты.Количество() = 0 Тогда
			НоваяСтрока = Объект.Варианты.Добавить();
			Элементы.Варианты.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Иначе 
			Элементы.Варианты.ТекущаяСтрока = Объект.Варианты[0].ПолучитьИдентификатор();
		КонецЕсли;		
	Иначе
		НайденныеСтроки = Объект.Варианты.НайтиСтроки(Новый Структура("НомерВариантаКП", ТекущийВариантКП));
		Элементы.Варианты.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	//ОбновитьИтогиСервер();
	
	// Ручная скидка - заполнение полей ввода на форме
	//СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект,, ПараметрыОтбораСтрок(ТекущийВариантКП));
	// Конец Ручная скидка
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОтбораСтрок(ВариантКП)
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("НомерВариантаКП", ВариантКП);
	ПараметрыОтбора.Вставить("ЭтоРазделитель", Ложь);
	
	Возврат ПараметрыОтбора;
	
КонецФункции

#КонецОбласти


&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	Если Копирование Тогда
		
		Отказ = Истина;
		
		НоваяСтрока = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
				
		НоваяСтрока.КлючСвязи = 0;
		
		ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалениемЗавершение(Результат, ДанныеНабора) Экспорт
	
	Если Результат=Неопределено ИЛИ Результат=КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеУдаленияСтрокиЗапасов()
	
	ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти.НомерВариантаКП = ТекущийВариантКП;
		Если НЕ Копирование Тогда
//			СтрокаТабличнойЧасти.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		КонецЕсли;
		ЗаполнитьНомераСтрокТаблицаЗапасы(Объект.Запасы, ТекущийВариантКП, ЗапасыКоличествоСтрок);
	КонецЕсли;
	
	Если НоваяСтрока И Копирование Тогда
		СтрокаТабличнойЧасти.КлючСвязи = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//РассчитатьОбъемИВесЗаказа();
	//ОбновитьИтогиКлиент();
	//ПересчитатьПлатежныйКалендарь();
	//ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЗаявкаКлиента", Объект.ДокументОснование);
	Оповестить("Запись_Смета", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры
