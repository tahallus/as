
#Область СлужебныеПроцедурыФункции

// Получает набор данных с сервера.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", Константы.УчетПоКомпании.Компания(Организация));
	СтруктураДанные.Вставить("ПодписьГлавногоБухгалтера", Организация.ПодписьГлавногоБухгалтера);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура заполняет описание расчетного документа в строке табличного поля
//
Процедура ЗаполнитьОписаниеРасчетногоДокумента(ДанныеТекущейСтроки, ЭтоДанныеОрганизации)
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		СтруктураДанныхСтроки = Новый Структура;
		СтруктураДанныхСтроки.Вставить("Договор", ДанныеТекущейСтроки.Договор);
		СтруктураДанныхСтроки.Вставить("РасчетныйДокумент", ДанныеТекущейСтроки.РасчетныйДокумент);
		Если ЭтоДанныеОрганизации Тогда
			
			СтруктураДанныхСтроки.Вставить("НомерДокумента", ДанныеТекущейСтроки.НомерДокумента);
			СтруктураДанныхСтроки.Вставить("ДатаДокумента", ДанныеТекущейСтроки.ДатаДокумента);
			
			// При ручном добавлении предполагаем, что вх. номер и дату пользователь указал самостоятельно
			ОписаниеРасчетногоДокументаОрганизации(СтруктураДанныхСтроки);
			ДанныеТекущейСтроки.ВалютаДоговора = ?(СтруктураДанныхСтроки.Свойство("ВалютаДокумента"), СтруктураДанныхСтроки.ВалютаДокумента, Объект.ВалютаДокумента);
			
		Иначе
			
			СтруктураДанныхСтроки.Вставить("ВхНомерДокумента", ДанныеТекущейСтроки.ВхНомерДокумента);
			СтруктураДанныхСтроки.Вставить("ВхДатаДокумента", ДанныеТекущейСтроки.ВхДатаДокумента);
			
			// При ручном добавлении предполагаем, что вх. номер и дату пользователь указал самостоятельно
			ОписаниеРасчетногоДокументаКонтрагента(СтруктураДанныхСтроки);
			ДанныеТекущейСтроки.ВалютаДокумента = ?(СтруктураДанныхСтроки.Свойство("ВалютаДокумента"), СтруктураДанныхСтроки.ВалютаДокумента, Объект.ВалютаДокумента);
			
		КонецЕсли;
		
		ДанныеТекущейСтроки.ОписаниеДокумента = СтруктураДанныхСтроки.ОписаниеДокумента;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОписаниеРасчетногоДокумента()

&НаКлиенте
// Процедура устанавливает картинку для страницы данные контрагента
//
Процедура УстановитьКартинкуСтраницыДанныеКонтрагента()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаДанныеКонтрагента", "Картинка", 
		?(Объект.ДанныеКонтрагента.Количество() > 0, БиблиотекаКартинок.Информация, Новый Картинка));
	
КонецПроцедуры

&НаКлиенте
// Процедура очищает табличные части документа
//
Процедура ОчиститьДанныеДокумента()
	
	Объект.СальдоНачалоПериода = 0;
	Объект.ДанныеОрганизации.Очистить();
	Объект.ДанныеКонтрагента.Очистить();
	
КонецПроцедуры //ОчиститьДанныеДокумента()

&НаКлиенте
// Процедура заполняет заголовок поля ОписаниеВыбораДоговоров
//
Процедура ЗаполнитьЗаголовокПоВыбраннымДоговорам()
	
	МассивОтмеченных = Объект.ДоговорыКонтрагентов.НайтиСтроки(Новый Структура("Отметка", Истина));
	Если Объект.ДоговорыКонтрагентов.Количество() = 0 Тогда
		
		ТекстНадписи = НСтр("ru = 'Список договоров пуст'");
		
	ИначеЕсли МассивОтмеченных.Количество() = 1 Тогда
		
		ТекстНадписи = Строка(МассивОтмеченных[0].Договор);
		
	ИначеЕсли МассивОтмеченных.Количество() = 0 Тогда
		
		ТекстНадписи = НСтр("ru = 'Договоры не выбраны'");
		
	Иначе
		
		ТекстНадписи = Строка(МассивОтмеченных[0].Договор) + ", " + Строка(МассивОтмеченных[1].Договор) + ?(МассивОтмеченных.Количество() > 2, "...", "");
		
	КонецЕсли;
	
	ОписаниеВыбораДоговоров = ТекстНадписи;
	
КонецПроцедуры // ЗаполнитьЗаголовокДоговоров()

&НаКлиенте
// Процедура заполнения табличной части "Данные организации" по данным учета
//
Процедура ЗаполнитьПоОстаткам()
	
	РассчитатьНачальноеСальдо();
	ЗаполнитьПоОстаткамСервер();
	ПосчитатьИтоговоеРасхождениеДанных();
	УстановитьКартинкуСтраницыДанныеКонтрагента();
	
КонецПроцедуры // ЗаполнитьПоОстаткам()

&НаКлиенте
// Процедура заполнения табличной части "Данные контрагента" по данным учета
//
Процедура ЗаполнитьСведенияКонтрагентаПоДаннымОрганизации()
	
	ЗаполнитьПоДаннымОрганизацииНаСервере();
	ПосчитатьИтоговоеРасхождениеДанных();
	УстановитьКартинкуСтраницыДанныеКонтрагента();
	
КонецПроцедуры // ЗаполнитьСведенияКонтрагентаПоДаннымОрганизации()

&НаКлиенте
// Процедура подготавливает массив договоров, по которым рассчитывается начальное сальдо
//
Процедура РассчитатьНачальноеСальдо()
	
	МассивДоговоров = Новый Массив;
	Для каждого СтрокаДоговора Из Объект.ДоговорыКонтрагентов Цикл
		
		Если СтрокаДоговора.Отметка Тогда
			
			МассивДоговоров.Добавить(СтрокаДоговора.Договор);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НачальноеСальдоПоДоговорам(Объект.Организация, Объект.НачалоПериода, МассивДоговоров, Объект.ВалютаДокумента, Объект.СальдоНачалоПериода);
	
КонецПроцедуры // НачальноеСальдо()

&НаСервере
// Вызывает процедуру заполнения пустых дат контрагента на сервере
//
Процедура ЗаполнитьДатыВСведенияхКонтрагентаИзРасчетныхДокументов()
	
	Для каждого СтрокаДанных Из Объект.ДанныеКонтрагента Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВхДатаДокумента) 
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаДанных.РасчетныйДокумент) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТипЗнч(СтрокаДанных.РасчетныйДокумент) = Тип("ДокументСсылка.ЗаказПокупателя")
			И СтрокаДанных.РасчетныйДокумент.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			
			СтрокаДанных.ВхДатаДокумента = СтрокаДанных.РасчетныйДокумент.Финиш;
			
		Иначе
			
			СтрокаДанных.ВхДатаДокумента = СтрокаДанных.РасчетныйДокумент.Дата;
			
		КонецЕсли;
		
		СтрокаДанных.ОписаниеДокумента = 
			Документы.СверкаВзаиморасчетов.ОписаниеРасчетногоДокументаКонтрагента(СтрокаДанных.РасчетныйДокумент, СтрокаДанных.ВхНомерДокумента, СтрокаДанных.ВхДатаДокумента);
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьДатыВСведенияхКонтрагентаИзРасчетныхДокументов()

&НаСервере
// Процедура формирует структуру с данными документа
//
Функция ПолучитьДанныеДокумента(ДокументСсылка = Неопределено)
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("Дата",					Объект.Дата);
	ДанныеДокумента.Вставить("НачалоПериода",			Объект.НачалоПериода);
	ДанныеДокумента.Вставить("КонецПериода", 			Объект.КонецПериода);
	ДанныеДокумента.Вставить("Организация",				Константы.УчетПоКомпании.Компания(Объект.Организация));
	ДанныеДокумента.Вставить("Ссылка",					ДокументСсылка);
	ДанныеДокумента.Вставить("СортироватьПоДоговорам",	Объект.СортироватьПоДоговорам);
	ДанныеДокумента.Вставить("ВалютаДокумента",			Объект.ВалютаДокумента);
	ДанныеДокумента.Вставить("ОрганизациюВПредставление",Объект.ДобавлятьОрганизациюВПредставлениеДокумента);
	ДанныеДокумента.Вставить("УказатьСчетФактуру",		Объект.ДобавлятьСчетФактуруВПредставлениеДокумента);
	ДанныеДокумента.Вставить("ВхНомерВПоступлениеНаСчет",Объект.ВходящийНомерВПредставлениеПоступленияНаСчет);
	ДанныеДокумента.Вставить("ВхНомерВРасходСоСчета",	Объект.ВходящийНомерВПредставлениеРасходаСоСчета);
	ДанныеДокумента.Вставить("ПоВходящимДатам",			ЗаполнятьПоВходящимДатам);
	
	МассивСтрок = Объект.ДоговорыКонтрагентов.НайтиСтроки(Новый Структура("Отметка", Истина));
	ДанныеДокумента.Вставить("ДоговорыКонтрагентов",	Объект.ДоговорыКонтрагентов.Выгрузить(МассивСтрок));
	
	Возврат ДанныеДокумента;
	
КонецФункции //ПолучитьДанныеДокумента()

&НаСервере
// Процедура заполнения табличной части "Данные организации"
//
Процедура ЗаполнитьПоОстаткамСервер()
	
	Документы.СверкаВзаиморасчетов.ЗаполнитьДанныеПоОрганизации(ПолучитьДанныеДокумента(), Объект.ДанныеОрганизации);
	
КонецПроцедуры // ЗаполнитьПоОстаткамСервер()

&НаСервере
// Процедура заполнения табличной части "Данные контрагента" по данным учета
//
Процедура ЗаполнитьПоДаннымОрганизацииНаСервере()
	
	Документы.СверкаВзаиморасчетов.ЗаполнитьСведенияКонтрагентаПоДаннымОрганизации(Объект.ДанныеОрганизации, Объект.ДанныеКонтрагента, Объект.ДобавлятьОрганизациюВПредставлениеДокумента, Объект.ДобавлятьСчетФактуруВПредставлениеДокумента);
	
КонецПроцедуры // ЗаполнитьПоОстаткамСервер()

&НаСервере
// Заполняет описание расчетного документа и валюту взаиморасчетов в табличной части ДанныеОрганизации
//
// Параметры:
//    ДокументСсылка - ДокументСсылка - Ссылка на расчетный документ;
//    ОписаниеДокумента - Строка - Переменная, в которую будет передано описание расчетного документа;
//    ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Переменная, в которую будет передано значение валюты взаиморасчетов.
//
Функция ОписаниеРасчетногоДокументаОрганизации(СтруктураДанныхСтроки)
	
	ДанныеДокумента = ПолучитьДанныеДокумента(СтруктураДанныхСтроки.РасчетныйДокумент);
	ОписаниеДокумента = Документы.СверкаВзаиморасчетов.ОписаниеРасчетногоДокументаОрганизации(СтруктураДанныхСтроки.РасчетныйДокумент, ДанныеДокумента, СтруктураДанныхСтроки.НомерДокумента, СтруктураДанныхСтроки.ДатаДокумента);
	
	СтруктураДанныхСтроки.Вставить("ОписаниеДокумента", ОписаниеДокумента);
	
	Если ЗначениеЗаполнено(СтруктураДанныхСтроки.Договор) Тогда
		
		СтруктураДанныхСтроки.Вставить("ВалютаДокумента", СтруктураДанныхСтроки.Договор.ВалютаРасчетов);
		
	КонецЕсли;
	
КонецФункции // ЗаполнитьСтрокуПоРасчетномуДокументуСервер()

&НаСервереБезКонтекста
// Заполняет описание расчетного документа и валюту взаиморасчетов в табличной части ДанныеКонтрагента
//
// Параметры:
//    ДокументСсылка - ДокументСсылка - Ссылка на расчетный документ;
//    ОписаниеДокумента - Строка - Переменная, в которую будет передано описание расчетного документа;
//    ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Переменная, в которую будет передано значение валюты взаиморасчетов.
//
Функция ОписаниеРасчетногоДокументаКонтрагента(СтруктураДанныхСтроки)
	
	ОписаниеДокумента = 
		Документы.СверкаВзаиморасчетов.ОписаниеРасчетногоДокументаКонтрагента(СтруктураДанныхСтроки.РасчетныйДокумент, СтруктураДанныхСтроки.ВхНомерДокумента, СтруктураДанныхСтроки.ВхДатаДокумента);
	
	СтруктураДанныхСтроки.Вставить("ОписаниеДокумента", ОписаниеДокумента);
	
	Если ЗначениеЗаполнено(СтруктураДанныхСтроки.Договор) Тогда
		
		СтруктураДанныхСтроки.Вставить("ВалютаДокумента", СтруктураДанныхСтроки.Договор.ВалютаРасчетов);
		
	КонецЕсли;
	
КонецФункции // ЗаполнитьСтрокуПоРасчетномуДокументуСервер()

&НаСервереБезКонтекста
// Процедура вычисляет начальное сальдо по указанным договорам контрагента
//
// Организация (Объект.Организация) - организация, по которой вычисляется начальное сальдо взаиморасчетов
// ДоговорыКонтрагентов (Объект.ДоговорыКонтрагентов) - табличная часть документа
//
Процедура НачальноеСальдоПоДоговорам(Организация, Знач НачалоПериода, ДоговорыКонтрагентов, ВалютаДокумента, СальдоНачалоПериода)
	
	Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
		
		НачалоПериода = Дата(1980, 01, 01);
		
	КонецЕсли;
	
	СальдоНачалоПериода = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ДоговорыКонтрагентов", ДоговорыКонтрагентов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ПОМЕСТИТЬ ДоговорыКонтрагентов
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&ДоговорыКонтрагентов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаВалОстаток > 0
	|				И РасчетыСПокупателямиОстатки.СуммаВалОстаток < 0
	|			ТОГДА -1 * РасчетыСПокупателямиОстатки.СуммаВалОстаток + РасчетыСПоставщикамиОстатки.СуммаВалОстаток
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаВалОстаток > 0
	|			ТОГДА РасчетыСПоставщикамиОстатки.СуммаВалОстаток
	|		КОГДА РасчетыСПокупателямиОстатки.СуммаВалОстаток < 0
	|			ТОГДА -РасчетыСПокупателямиОстатки.СуммаВалОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаВалОстаток < 0
	|				И РасчетыСПокупателямиОстатки.СуммаВалОстаток > 0
	|			ТОГДА -1 * РасчетыСПоставщикамиОстатки.СуммаВалОстаток + РасчетыСПокупателямиОстатки.СуммаВалОстаток
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаВалОстаток < 0
	|			ТОГДА -РасчетыСПоставщикамиОстатки.СуммаВалОстаток
	|		КОГДА РасчетыСПокупателямиОстатки.СуммаВалОстаток > 0
	|			ТОГДА РасчетыСПокупателямиОстатки.СуммаВалОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ - ЕСТЬNULL(РасчетыСПрочимиКонтрагентамиОстатки.СуммаВалОстаток, 0) КАК СальдоВал,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток > 0
	|				И РасчетыСПокупателямиОстатки.СуммаОстаток < 0
	|			ТОГДА -1 * РасчетыСПокупателямиОстатки.СуммаОстаток + РасчетыСПоставщикамиОстатки.СуммаОстаток
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток > 0
	|			ТОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток
	|		КОГДА РасчетыСПокупателямиОстатки.СуммаОстаток < 0
	|			ТОГДА -РасчетыСПокупателямиОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
	|				И РасчетыСПокупателямиОстатки.СуммаОстаток > 0
	|			ТОГДА -1 * РасчетыСПоставщикамиОстатки.СуммаОстаток + РасчетыСПокупателямиОстатки.СуммаОстаток
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
	|			ТОГДА -РасчетыСПоставщикамиОстатки.СуммаОстаток
	|		КОГДА РасчетыСПокупателямиОстатки.СуммаОстаток > 0
	|			ТОГДА РасчетыСПокупателямиОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ - ЕСТЬNULL(РасчетыСПрочимиКонтрагентамиОстатки.СуммаОстаток, 0) КАК СальдоУпр,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаРегОстаток > 0
	|				И РасчетыСПокупателямиОстатки.СуммаРегОстаток < 0
	|			ТОГДА -1 * РасчетыСПокупателямиОстатки.СуммаРегОстаток + РасчетыСПоставщикамиОстатки.СуммаРегОстаток
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаРегОстаток > 0
	|			ТОГДА РасчетыСПоставщикамиОстатки.СуммаРегОстаток
	|		КОГДА РасчетыСПокупателямиОстатки.СуммаРегОстаток < 0
	|			ТОГДА -РасчетыСПокупателямиОстатки.СуммаРегОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаРегОстаток < 0
	|				И РасчетыСПокупателямиОстатки.СуммаРегОстаток > 0
	|			ТОГДА -1 * РасчетыСПоставщикамиОстатки.СуммаРегОстаток + РасчетыСПокупателямиОстатки.СуммаРегОстаток
	|		КОГДА РасчетыСПоставщикамиОстатки.СуммаРегОстаток < 0
	|			ТОГДА -РасчетыСПоставщикамиОстатки.СуммаРегОстаток
	|		КОГДА РасчетыСПокупателямиОстатки.СуммаРегОстаток > 0
	|			ТОГДА РасчетыСПокупателямиОстатки.СуммаРегОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ - ЕСТЬNULL(РасчетыСПрочимиКонтрагентамиОстатки.СуммаОстаток, 0) КАК СальдоРег,
	|	ДоговорыКонтрагентов.Договор.ВалютаРасчетов КАК ВалютыРасчетов
	|ИЗ
	|	ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки(&НачалоПериода, Организация = &Организация) КАК РасчетыСПокупателямиОстатки
	|		ПО ДоговорыКонтрагентов.Договор = РасчетыСПокупателямиОстатки.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(&НачалоПериода, Организация = &Организация) КАК РасчетыСПоставщикамиОстатки
	|		ПО ДоговорыКонтрагентов.Договор = РасчетыСПоставщикамиОстатки.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПрочимиКонтрагентами.Остатки(&НачалоПериода, Организация = &Организация) КАК РасчетыСПрочимиКонтрагентамиОстатки
	|		ПО ДоговорыКонтрагентов.Договор = РасчетыСПрочимиКонтрагентамиОстатки.Договор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ВалютаУчета = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
	НациональнаяВалюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту();
	
	Пока Выборка.Следующий() Цикл 
		
		СальдоПоДоговору = 0;
		
		Если УчетВалютныхОпераций Тогда
			
			Если ВалютаДокумента = Выборка.ВалютыРасчетов Тогда
				СальдоПоДоговору = Выборка.СальдоВал;
			ИначеЕсли ВалютаДокумента = ВалютаУчета Тогда
				СальдоПоДоговору = Выборка.СальдоУпр;
			ИначеЕсли ВалютаДокумента = НациональнаяВалюта Тогда
				СальдоПоДоговору = Выборка.СальдоРег;
			Иначе
				
				КурсВалютыРасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.ВалютыРасчетов, НачалоПериода);
				КурсВалютыДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, НачалоПериода);
				
				Если Выборка.СальдоВал <> 0 Тогда
					
					ПараметрыТекущегоКурса = Новый Структура;
					ПараметрыТекущегоКурса.Вставить("Валюта",	Выборка.ВалютыРасчетов);
					ПараметрыТекущегоКурса.Вставить("Курс",		КурсВалютыРасчетов.Курс);
					ПараметрыТекущегоКурса.Вставить("Кратность",КурсВалютыРасчетов.Кратность);
					
					ПараметрыНовогоКурса = Новый Структура;
					ПараметрыНовогоКурса.Вставить("Валюта",		ВалютаДокумента);
					ПараметрыНовогоКурса.Вставить("Курс",		КурсВалютыДокумента.Курс);
					ПараметрыНовогоКурса.Вставить("Кратность",	КурсВалютыДокумента.Кратность);
					
					СальдоПоДоговору = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Выборка.СальдоВал, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			СальдоПоДоговору = Выборка.СальдоВал;
			
		КонецЕсли;
		
		СальдоНачалоПериода = СальдоНачалоПериода + СальдоПоДоговору;
		
	КонецЦикла;
	
КонецПроцедуры // НачальноеСальдоПоДоговорам()

&НаСервере
// Настраивает доступность элементов формы в зависимости от статуса документа
//
Процедура УстановитьДоступностьЭлементов()
	
	// Реквизиты доступны только для статуса Создана
	СтатусСоздана = (Объект.Статус = Перечисления.СтатусыСверокВзаиморасчетов.Создана);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Организация", "Доступность", СтатусСоздана);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПериодСверки", "Доступность", СтатусСоздана);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВалютаДокумента", "Доступность", СтатусСоздана);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Контрагент", "Доступность", СтатусСоздана);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Группа1", "Доступность", СтатусСоздана);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПоДаннымУчета", "Доступность", СтатусСоздана);
	
	// Реквизиты доступны для статусов Создана и НаСверке
	СтатусСверена = (Объект.Статус = Перечисления.СтатусыСверокВзаиморасчетов.Сверена);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДанныеОрганизации", "Доступность", НЕ СтатусСверена);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСальдоВалюта", "Доступность", НЕ СтатусСверена);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаШапкаСтраницыДанныеКонтрагента", "Доступность", НЕ СтатусСверена);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДанныеКонтагента", "Доступность", НЕ СтатусСверена);
	
	// Табличные части не входят в общее правило.
	// Для копирования представлений оставляем всегда доступными, но запрещаем редактирования (управляем свойством ТолькоПросмотр)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеОрганизации",	"ТолькоПросмотр", НЕ СтатусСоздана);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеКонтрагента", "ТолькоПросмотр", СтатусСверена);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Документы", "ТолькоПросмотр", СтатусСверена);
	
КонецПроцедуры // УстановитьДоступностьЭлементов()

&НаСервере
// Процедура получения данных контрагента
//
Процедура ПолучитьДанныеКонтрагента(ДанныеКонтрагента)
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("КонтактноеЛицо", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "КонтактноеЛицоПодписант"));
	
	// Если контрагент поменялся, повторим заполнение договоров
	ЗаполнитьДанные = Истина;
	Если Объект.ДоговорыКонтрагентов.Количество() > 0 Тогда
		
		Если Объект.ДоговорыКонтрагентов[0].Договор.Владелец = Объект.Контрагент Тогда
			
			ЗаполнитьДанные = Ложь;
			
		Иначе
			
			Объект.ДоговорыКонтрагентов.Очистить();
			Объект.ДанныеОрганизации.Очистить();
			Объект.ДанныеКонтрагента.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеКонтрагента.Вставить("ВестиРасчетыПоДоговорам", Объект.Контрагент.ВестиРасчетыПоДоговорам);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОписаниеВыбораДоговоров", "Доступность", Объект.Контрагент.ВестиРасчетыПоДоговорам);
	
	Если ЗаполнитьДанные Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Отметка,
		|	СправочникДоговорыКонтрагентов.Ссылка КАК Договор,
		|	СправочникДоговорыКонтрагентов.ВалютаРасчетов КАК ВалютаДоговора
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК СправочникДоговорыКонтрагентов
		|ГДЕ
		|	СправочникДоговорыКонтрагентов.Владелец = &Контрагент";
		
		Объект.ДоговорыКонтрагентов.Загрузить(Запрос.Выполнить().Выгрузить());
		ОписаниеВыбораДоговоров = НСтр("ru = 'Выбраны все договоры контрагента'");
		
		ДоговорыКонтрагентов = Объект.ДоговорыКонтрагентов.Выгрузить(,"Договор");
		НачальноеСальдоПоДоговорам(Объект.Организация, Объект.НачалоПериода, ДоговорыКонтрагентов, Объект.ВалютаДокумента, Объект.СальдоНачалоПериода);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьДанныеКонтрагента()

&НаСервереБезКонтекста
// Процедура полученных данных договора 
// Вызывается после выбора договора
//
Процедура ПолучитьДанныеДоговора(ДанныеДоговора, Договор)
	
	ДанныеДоговора.Вставить("ВалютаДоговора", Договор.ВалютаРасчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиНаКлиенте()
	
	ВызватьПроцедуруЗаполненияТабличнойЧасти = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		
		ТекстСообщения	= НСтр("ru = 'Неверно заполнена дата окончания периода.'");
		ПолеСообщения	= "Объект.КонецПериода";
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , ПолеСообщения);
		
		ВызватьПроцедуруЗаполненияТабличнойЧасти = Ложь;
		
	КонецЕсли;
	
	Если ВызватьПроцедуруЗаполненияТабличнойЧасти Тогда
		
		Если Объект.ДанныеОрганизации.Количество() > 0 Тогда
			
			ТестВопроса	= НСтр("ru = 'Табличная часть будет очищена и заполнена повторно. Продолжить?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПослеВопросаООчистке", ЭтотОбъект, "ДанныеОрганизации");
			ПоказатьВопрос(ОписаниеОповещения, ТестВопроса, РежимДиалогаВопрос.ДаНет, 0);
			
		Иначе
			
			ЗаполнитьПоОстаткам();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Область БиблиотекаСтандартныхПодсистем
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	#КонецОбласти
	
	УстановитьДоступностьЭлементов();
	
	Если Константы.УчетПоКомпании.Получить() Тогда
		
		// Если ведется учет по компании в целом, необходимо удалить связь выбора по организации
		СвязьПараметровВыбора = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(СвязьПараметровВыбора);
		
		Элементы.ДанныеОрганизацииРасчетныйДокумент.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ДанныеКонтрагентаРасчетныйДокумент.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.Организация = Справочники.Организации.ОрганизацияКомпания();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Объект.ВходящийНомерВПредставлениеПоступленияНаСчет = Истина;
		
	КонецЕсли;
	
	ВестиРасчетыПоДоговорам = ?(ЗначениеЗаполнено(Объект.Контрагент), Объект.Контрагент.ВестиРасчетыПоДоговорам, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОписаниеВыбораДоговоров", "Доступность", ВестиРасчетыПоДоговорам);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюПечатьФаксимиле);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ Объект.Ссылка = Неопределено Тогда
		
		ПосчитатьИтоговоеРасхождениеДанных();
		
	КонецЕсли;
	
	ЗаполнитьЗаголовокПоВыбраннымДоговорам();
	УстановитьКартинкуСтраницыДанныеКонтрагента();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, ЗавершениеРаботы, Объект.Ссылка);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита "ВалютаДокумента"
//
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ОчиститьДанныеДокумента();
	ЗаполнитьПоОстаткам();
	
	//
	// Автоматического заполнения данных контрагента не выполняем, так как ТЧ могла быть заполнена вручную.
	//
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Открытие" поля "ДанныеОрганизацииОписаниеДокумента".
//
Процедура ДанныеОрганизацииОписаниеДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеТекущейСтроки = Элементы.ДанныеОрганизации.ТекущиеДанные;
	Если НЕ ДанныеТекущейСтроки = Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.РасчетныйДокумент) Тогда
			
			ПоказатьЗначение(, ДанныеТекущейСтроки.РасчетныйДокумент);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Строка не привязана к расчетному документу. 
				|Для привязки необходимо включить видимость соответствующей колонки и указать документ самостоятельно.'");
				
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДанныеОрганизацииОписаниеДокументаОткрытие()

&НаКлиенте
// Процедура - обработчик события "Открытие" поля "ДанныеКонтрагентаОписаниеДокумента".
//
Процедура ДанныеКонтрагентаОписаниеДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеТекущейСтроки = Элементы.ДанныеКонтрагента.ТекущиеДанные;
	
	Если НЕ ДанныеТекущейСтроки = Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.РасчетныйДокумент) Тогда
			
			ПоказатьЗначение(, ДанныеТекущейСтроки.РасчетныйДокумент);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Строка не привязана к расчетному документу. 
				|Для привязки необходимо включить видимость соответствующей колонки и указать документ самостоятельно.'");
				
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДанныеКонтрагентаОписаниеДокументаОткрытие()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "ДанныеОрганизацииДоговор".
//
Процедура ДанныеОрганизацииДоговорПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.ДанныеОрганизации.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено 
		И ЗначениеЗаполнено(ДанныеТекущейСтроки.Договор) Тогда
		
		ДанныеДоговора = Новый Структура;
		ПолучитьДанныеДоговора(ДанныеДоговора, ДанныеТекущейСтроки.Договор);
		ДанныеТекущейСтроки.ВалютаДоговора = ДанныеДоговора.ВалютаДоговора;
		
	КонецЕсли;
	
КонецПроцедуры // ДанныеОрганизацииДоговорПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "Статус".
//
Процедура СтатусПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов()
	
КонецПроцедуры // СтатусПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "РасчетныйДокумент" таблицы "ДанныеКонтрагента"
//
Процедура ДанныеКонтрагентаРасчетныйДокументПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.ДанныеКонтрагента.ТекущиеДанные;
	ЗаполнитьОписаниеРасчетногоДокумента(ДанныеТекущейСтроки, Ложь);
	
КонецПроцедуры // ДанныеКонтрагентаРасчетныйДокументПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "Договор" таблицы "ДанныеКонтрагента"
//
Процедура ДанныеКонтрагентаДоговорПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеКонтрагента.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("Договор", ТекущиеДанные.Договор);
		ДанныеСтроки.Вставить("РасчетныйДокумент", ТекущиеДанные.РасчетныйДокумент);
		ДанныеСтроки.Вставить("ВхНомерДокумента", ТекущиеДанные.ВхНомерДокумента);
		ДанныеСтроки.Вставить("ВхДатаДокумента", ТекущиеДанные.ВхДатаДокумента);
		
		// При ручном добавлении предполагаем что вх. номер и дату пользователь указал самостоятельно
		ОписаниеРасчетногоДокументаКонтрагента(ДанныеСтроки);
		
		ТекущиеДанные.ВалютаДокумента = ДанныеСтроки.ВалютаДокумента;
		
	КонецЕсли;
	
КонецПроцедуры // ДанныеКонтрагентаДоговорПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении табличного части ПоДаннымКонтрагента
//
Процедура ДанныеКонтрагентаПриИзменении(Элемент)
	
	ПосчитатьИтоговоеРасхождениеДанных();
	УстановитьКартинкуСтраницыДанныеКонтрагента();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "РасчетныйДокумент" таблицы "ДанныеОрганизации".
//
Процедура ДанныеОрганизацииРасчетныйДокументПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.ДанныеОрганизации.ТекущиеДанные;
	ЗаполнитьОписаниеРасчетногоДокумента(ДанныеТекущейСтроки, Истина);
	
КонецПроцедуры //ДанныеОрганизацииРасчетныйДокументПриИзменении()

&НаКлиенте
// Процедура - обработчик события изменения статуса сверки
//
Процедура СтатусОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Перем Ошибки, Отказ;
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыСверокВзаиморасчетов.Сверена") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ПодписьОтветственного) Тогда
			
			ТекстСообщения = НСтр("ru = 'Неверно заполнено ответственное лицо организации.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.ПодписьОтветственного", ТекстСообщения, Неопределено);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ПредставительКонтрагента) Тогда
			
			ТекстСообщения = НСтр("ru = 'Неверно заполнен представитель контрагента.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.ПредставительКонтрагента", ТекстСообщения, Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры //СтатусОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля контрагент
//
Процедура КонтрагентПриИзменении(Элемент)
	Перем ДанныеКонтрагента;
	
	ОчиститьДанныеДокумента();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ПолучитьДанныеКонтрагента(ДанныеКонтрагента);
		Объект.ПредставительКонтрагента = ДанныеКонтрагента.КонтактноеЛицо;
		ВестиРасчетыПоДоговорам = ДанныеКонтрагента.ВестиРасчетыПоДоговорам;
		
	Иначе
		
		Объект.ДоговорыКонтрагентов.Очистить();
		Объект.ПредставительКонтрагента = Неопределено;
		
		ОписаниеВыбораДоговоров = НСтр("ru = 'Список договоров пуст'");
		
	КонецЕсли;
	
КонецПроцедуры //КонтрагентПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении табличного части ПоДаннымОрганизации
//
Процедура ДанныеОрганизацииПриИзменении(Элемент)
	
	ПосчитатьИтоговоеРасхождениеДанных();
	
КонецПроцедуры //ДанныеОрганизацииПриИзменении()

&НаКлиенте
// Процедура - обработчик события Нажатие реквизита ОписаниеВыбораДоговоров
//
Процедура ОписаниеВыбораДоговоровНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Организация", Объект.Организация);
	ПараметрыДокумента.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыДокумента.Вставить("ДоговорыКонтрагентов", Объект.ДоговорыКонтрагентов);
	ПараметрыДокумента.Вставить("СортироватьПоДоговорам", Объект.СортироватьПоДоговорам);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораДоговоровКонтрагента", ЭтотОбъект);
	
	ОткрытьФорму("Документ.СверкаВзаиморасчетов.Форма.ФормаДоговоровКонтрагента", ПараметрыДокумента, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОписаниеВыбораДоговоровНажатие()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита Организация
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Объект.ПодписьОтветственного = СтруктураДанные.ПодписьГлавногоБухгалтера;
	
	ОчиститьДанныеДокумента();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита НачалоПериода
//
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОчиститьДанныеДокумента();
	
КонецПроцедуры // НачалоПериодаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита НачалоПериода
//
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОчиститьДанныеДокумента();
	
КонецПроцедуры // КонецПериодаПриИзменении()

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКонтрагентаВхДатаПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.ДанныеКонтрагента.ТекущиеДанные;
	ЗаполнитьОписаниеРасчетногоДокумента(ДанныеТекущейСтроки, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКонтрагентаВхНомерПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.ДанныеКонтрагента.ТекущиеДанные;
	ЗаполнитьОписаниеРасчетногоДокумента(ДанныеТекущейСтроки, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОрганизацииДатаДокументаПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.ДанныеОрганизации.ТекущиеДанные;
	ЗаполнитьОписаниеРасчетногоДокумента(ДанныеТекущейСтроки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОрганизацииНомерДокументаПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.ДанныеОрганизации.ТекущиеДанные;
	ЗаполнитьОписаниеРасчетногоДокумента(ДанныеТекущейСтроки, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДекорацияПечатьНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиСверкаВзаиморасчетов", Новый Структура("КонтекстПечати", Объект), ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Вызывает процедуру инициализации пустых входящих дат, датами расчетных документов
//
Процедура ЗаполнитьПоДатамРасчетныхДокументов(Команда)
	
	Если Объект.ДанныеКонтрагента.Количество() < 1 Тогда
		
		ТекстСообщения = НСтр("ru = 'Табличная часть взаиморасчетов по данным контрагента пуста.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьДатыВСведенияхКонтрагентаИзРасчетныхДокументов();
	
КонецПроцедуры //ЗаполнитьПоДатамРасчетныхДокументов()

&НаКлиенте
// Процедура - обработчик команды "КомандаЗаполнитьПоОстаткам".
//
Процедура ЗаполнитьПоДаннымУчета(Команда)
	
	ЗаполнятьПоВходящимДатам = Ложь;
	ЗаполнитьОстаткамиНаКлиенте();
	
КонецПроцедуры // КомандаЗаполнитьПоОстаткам()

// Процедура - обработчик команды "ЗаполнитьПоВходящимДатам".
//
&НаКлиенте
Процедура ЗаполнитьПоВходящимДатам(Команда)
	
	ЗаполнятьПоВходящимДатам = Истина;
	ЗаполнитьОстаткамиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
// Процедура заполняет табличное поле Данные контрагента по данным организации
//
//
Процедура ПеренестиИзДанныхОрганизации(Команда)
	
	Если Объект.ДанныеОрганизации.Количество() < 1 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть с данными организации.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ДанныеКонтрагента.Количество() > 0 Тогда
		
		ТестВопроса	= НСтр("ru = 'Табличная часть будет очищена и заполнена повторно. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПослеВопросаООчистке", ЭтотОбъект, "ДанныеКонтрагента");
		ПоказатьВопрос(ОписаниеОповещения, ТестВопроса, РежимДиалогаВопрос.ДаНет, 0);
		
	Иначе
		
		ЗаполнитьСведенияКонтрагентаПоДаннымОрганизации();
		
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьДанныеКонтрагентаПоДаннымОрганизации()

&НаКлиенте
// Процедура вычисляет расхождение данных и заполняет необходимые реквизиты
//
Процедура ПосчитатьИтоговоеРасхождениеДанных()
	
	СальдоПоДаннымОрганизации	= Объект.ДанныеОрганизации.Итог("СуммаДолгКонтрагента") - Объект.ДанныеОрганизации.Итог("СуммаДолгОрганизации");
	СальдоПоДаннымКонтрагента	= Объект.ДанныеКонтрагента.Итог("СуммаДолгОрганизации") - Объект.ДанныеКонтрагента.Итог("СуммаДолгКонтрагента");
	
	Расхождение					= СальдоПоДаннымОрганизации - СальдоПоДаннымКонтрагента;
	
КонецПроцедуры //ПосчитатьИтоговоеРасхождениеДанных()

&НаКлиенте
// Процедура - обработчик команды "УстановитьИнтервал".
//
Процедура УстановитьИнтервал(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала = Объект.НачалоПериода;
	Диалог.Период.ДатаОкончания = Объект.КонецПериода;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПериодаЗаполнения", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры // УстановитьИнтервал()

&НаКлиенте
// Процедура - обработчик команды РассчитатьНачальноеСальдо
//
Процедура НачальноеСальдо(Команда)
	
	РассчитатьНачальноеСальдо();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
// Процедура обрабатывает результат вопроса о очистке ТЧ 
//
Процедура ОбработчикПослеВопросаООчистке(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Если ДополнительныеПараметры = "ДанныеОрганизации" Тогда
			
			ЗаполнитьПоОстаткам();
			
		ИначеЕсли ДополнительныеПараметры = "ДанныеКонтрагента" Тогда
			
			ЗаполнитьСведенияКонтрагентаПоДаннымОрганизации()
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработчикПослеВопросаООчистке()

&НаКлиенте
// Процедура обрабатывает результат выбора договоров контрагента
//
Процедура ПослеВыбораДоговоровКонтрагента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		ЕстьИзменения = Ложь;
		ЕстьИзменения = РезультатЗакрытия.ДоговорыКонтрагентов.Количество() <> Объект.ДоговорыКонтрагентов.Количество()
			ИЛИ РезультатЗакрытия.СортироватьПоДоговорам <> Объект.СортироватьПоДоговорам;
		Если НЕ ЕстьИзменения Тогда
			
			РазмерСписка = РезультатЗакрытия.ДоговорыКонтрагентов.Количество();
			Пока РазмерСписка > 0 Цикл
				
				ИндексЭлемента = РазмерСписка - 1;
				Если РезультатЗакрытия.ДоговорыКонтрагентов[ИндексЭлемента].Договор <> Объект.ДоговорыКонтрагентов[ИндексЭлемента].Договор 
					ИЛИ РезультатЗакрытия.ДоговорыКонтрагентов[ИндексЭлемента].Отметка <> Объект.ДоговорыКонтрагентов[ИндексЭлемента].Отметка Тогда
					
					ЕстьИзменения = Истина;
					Прервать;
					
				КонецЕсли;
				
				РазмерСписка = РазмерСписка - 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			
			Объект.ДоговорыКонтрагентов.Очистить();
			Объект.ДанныеОрганизации.Очистить();
			Объект.ДанныеКонтрагента.Очистить();
			
			Для каждого ЭлементКоллекции Из РезультатЗакрытия.ДоговорыКонтрагентов Цикл
				
				НоваяСтрока = Объект.ДоговорыКонтрагентов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
				
			КонецЦикла;
			
			Объект.СортироватьПоДоговорам = РезультатЗакрытия.СортироватьПоДоговорам;
			
			ЗаполнитьЗаголовокПоВыбраннымДоговорам();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПослеВыбораДоговоровКонтрагента()

&НаКлиенте
// Процедура обрабатывает результат выбора периода заполнения текущего документа
//
Процедура ПослеВыбораПериодаЗаполнения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		ОчиститьДанныеДокумента();
		Если Объект.НачалоПериода <> РезультатЗакрытия.ДатаНачала Тогда
			
			Объект.НачалоПериода = РезультатЗакрытия.ДатаНачала;
			РассчитатьНачальноеСальдо();
			
		КонецЕсли;
		
		Объект.КонецПериода = РезультатЗакрытия.ДатаОкончания;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
КонецПроцедуры // ОбработкаОповещения()

#КонецОбласти
