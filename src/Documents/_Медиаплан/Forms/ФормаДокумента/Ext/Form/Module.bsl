


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр;
		
		ПолучитьРаботыИУслугиИзХранилища(АдресЗапасовВХранилище, "СтрокиМедиаплана", Истина, Ложь);
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "СтрокиМедиаплана");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	

	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "Нажатие");
	
КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь, ТекстПредупреждения = "")
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс", Объект.Курс);
	СтруктураПараметров.Вставить("Кратность", Объект.Кратность);
	СтруктураПараметров.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость", Объект.НДСВключатьВСтоимость);
	//СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	//СтруктураПараметров.Вставить("Договор", Объект.Договор);
	//СтруктураПараметров.Вставить("Организация",	Компания); 
	СтруктураПараметров.Вставить("ДатаДокумента", Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены", ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены", ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураПараметров.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
	СтруктураПараметров.Вставить("ВалютаПередИзменением",ВалютаРасчетовПередИзменением);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") 
		И РезультатЗакрытия.БылиВнесеныИзменения Тогда
		
		Модифицированность = Истина;
		
		Объект.ВидЦен = РезультатЗакрытия.ВидЦен;
		Объект.ВидСкидкиНаценки = РезультатЗакрытия.ВидСкидки;
			
		Объект.ВалютаДокумента = РезультатЗакрытия.ВалютаДокумента;
		Объект.Курс = РезультатЗакрытия.КурсРасчетов;
		Объект.Кратность = РезультатЗакрытия.КратностьРасчетов;
		Объект.СуммаВключаетНДС = РезультатЗакрытия.СуммаВключаетНДС;
		Объект.НДСВключатьВСтоимость = РезультатЗакрытия.НДСВключатьВСтоимость;
		Объект.НалогообложениеНДС = РезультатЗакрытия.НалогообложениеНДС;
		ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
		
		// Пересчитываем цены по виду цен.
		Если РезультатЗакрытия.ПерезаполнитьЦены Тогда
			
			ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "СтрокиМедиаплана", Ложь);
			
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И РезультатЗакрытия.ПересчитатьЦены Тогда
			
			ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ВалютаРасчетовПередИзменением, "СтрокиМедиаплана", РезультатЗакрытия.КурсПересчетаЦен);
			
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если РезультатЗакрытия.НалогообложениеНДС <> РезультатЗакрытия.ПредНалогообложениеНДС Тогда
			
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
			
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И НЕ РезультатЗакрытия.СуммаВключаетНДС = РезультатЗакрытия.ПредСуммаВключаетНДС Тогда
			
			ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "СтрокиМедиаплана"); 
			
		КонецЕсли;
		
		// Сформируем надпись цены и валюты.
		ПоляНадписи = Новый Структура;
		ПоляНадписи.Вставить("ВидЦен", Объект.ВидЦен);
		ПоляНадписи.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
		ПоляНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		ПоляНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
		ПоляНадписи.Вставить("Курс", Объект.Курс);
		ПоляНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
		ПоляНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		ПоляНадписи.Вставить("УчетВалютныхОпераций", УчетВалютныхОпераций);
		ПоляНадписи.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			
		ЦеныИВалюта = ТекстНадписиЦеныИВалюта(ПоляНадписи);
		
		// Ручная скидка - заполнение полей ввода на форме
		//СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект, "СтрокиМедиаплана");
		// Конец Ручная скидка
		
		//ОбновитьДанныеТабличнойЧасти();
		
	КонецЕсли;
	
	//ОбновитьИтогиКлиент();
	//ПересчитатьПлатежныйКалендарь();
	//ОчиститьКалькуляцию();
	//ВключитьИндикаторНеобходимостиПересчетаСтоимостиДоставки();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстНадписиЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			Если СтруктураНадписи.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
				ТекстНадписи = ТекстНадписи + НСтр("ru = ' %Курс%'");
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(СтруктураНадписи.ВалютаДокумента)));
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Курс%", СокрЛП(Строка(СтруктураНадписи.Курс)));
			Иначе
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Вид цен.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦен%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидЦен%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(СтруктураНадписи.ВидЦен)));
	КонецЕсли;
	
	// Вид скидки наценки.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидСкидки) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидСкидкиНаценки%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидСкидкиНаценки%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидСкидкиНаценки%", СокрЛП(Строка(СтруктураНадписи.ВидСкидки)));
	КонецЕсли;	
	
	// Налогообложение НДС.
	Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %НалогообложениеНДС%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", РаботаСФормойДокументаКлиентСервер.КраткоеПредставлениеТипаНалогообложенияНДС(СтруктураНадписи.НалогообложениеНДС));
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда	
		Если СтруктураНадписи.СуммаВключаетНДС Тогда	
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции



#Область ПодборНоменклатуры
&НаКлиенте
// Процедура - обработчик события Действие команды Подбор
//
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти  = "РаботыИУслуги";
	
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПодборВыполнить()

&НаСервере
// Функция получает список товаров из временного хранилища
//
Процедура ПолучитьРаботыИУслугиИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		Если НоваяСтрока.Свойство("КлючСвязи") и НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
			НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор();
		КонецЕсли;
		Если НоваяСтрока.Свойство("КлючСвязи") Тогда
			СтрокиПериода = Объект.Периоды.НайтиСтроки(Новый Структура("КлючСвязи", НоваяСтрока.КлючСвязи));
			Если СтрокиПериода.Количество() = 0 Тогда 
				НоваяСтрокаПериода = Объект.Периоды.Добавить();
				НоваяСтрокаПериода.ДатаНачала = Объект.ДатаНачала;
				НоваяСтрокаПериода.ДатаОкончания = Объект.ДатаОкончания;
				НоваяСтрокаПериода.КлючСвязи = НоваяСтрока.КлючСвязи;
				НоваяСтрокаПериода.Количество = НоваяСтрока.Количество;
			КонецЕсли;
		КонецЕсли;
		
		
		Если НоваяСтрока.Свойство("Пометка") Тогда
			НоваяСтрока.Пометка = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗагрузки.Номенклатура, "ЭтоНабор, СпособРасчетаЦеныНабора, ТипНоменклатуры");
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
			СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", СтрокаЗагрузки.ЕдиницаИзмерения);
			СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
			
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанные, "НедельныйТрафик,Кликабельность");
				
			
			
		КонецЕсли; 
		
	КонецЦикла;
	
	// АвтоматическиеСкидки
	Если ТаблицаДляЗагрузки.Количество() > 0 Тогда
		//СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	КонецЕсли;

КонецПроцедуры // ПолучитьРаботыИУслугиИзХранилища()

#КонецОбласти

#Область ПересчетСтроки

&НаКлиенте
// Процедура рассчитывает сумму в строке табличной части.
//
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, ПараметрыРасчета = Неопределено)

	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.СтрокиМедиапланаРасшифровка.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПараметрыРасчета=Неопределено Тогда
		ПараметрыРасчета = Новый Структура("СброситьФлагСкидкиРассчитаны",Истина);
	КонецЕсли;	
	
	ПараметрыРасчета.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	
	ОбновитьДанныеИзСтрокиМедиаплана(СтрокаТабличнойЧасти);
	
	ОбновитьДанныеИзНаборыОпций(СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.ЦенаРасчетная = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.ОпциональныйКоэффициент*СтрокаТабличнойЧасти.СезонныйКоэффициент;
	
	ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	РассчитатьПоказателиМедиаПлана(СтрокаТабличнойЧасти);
	
	ОбновитьПодвалФормы();
	
	ОбновитьОписаниеОпции();
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура ОбновитьДанныеИзСтрокиМедиаплана(СтрокаТабличнойЧасти) 

	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийКлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
	ОтборПоКлючюСвязи = Новый Структура("КлючСвязи", ТекущийКлючСвязи);
	Строки = Объект.СтрокиМедиаплана.НайтиСтроки(ОтборПоКлючюСвязи);
	Если Строки.Количество() <> 0 Тогда 
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Строки[0]);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеИзНаборыОпций(СтрокаТабличнойЧасти)

	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ТекущийКлючСвязи = СтрокаТабличнойЧасти.КлючСвязиОпции;
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПолучитьОпцииПоКлючу(ТекущийКлючСвязи));

	
КонецПроцедуры




&НаКлиенте
Процедура РассчитатьПоказателиМедиаПлана(СтрокаТабличнойЧасти) Экспорт
	
	КолвоДнейРазмещения = 0;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаНачала) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончания) Тогда
		КолвоДнейРазмещения = 1 + (НачалоДня(СтрокаТабличнойЧасти.ДатаОкончания) - НачалоДня(СтрокаТабличнойЧасти.ДатаНачала)) / (60 * 60 * 24);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Показов = 1000 * СтрокаТабличнойЧасти.Количество;
	
	СтрокаТабличнойЧасти.БонусКоличество = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Бонус / 100;
	СтрокаТабличнойЧасти.БонусСумма = СтрокаТабличнойЧасти.Сумма * СтрокаТабличнойЧасти.Бонус / 100;
	СтрокаТабличнойЧасти.БонусПоказов = СтрокаТабличнойЧасти.Показов * СтрокаТабличнойЧасти.Бонус / 100;
	
	Если Объект.ВключатьБонусВПрогнозы Тогда 
		СтрокаТабличнойЧасти.ЦенаЗа1000Показов = 1000 * ?(СтрокаТабличнойЧасти.Показов + СтрокаТабличнойЧасти.БонусПоказов = 0, 0, СтрокаТабличнойЧасти.Сумма / (СтрокаТабличнойЧасти.Показов + СтрокаТабличнойЧасти.БонусПоказов));
		СтрокаТабличнойЧасти.Клики = (СтрокаТабличнойЧасти.Показов + СтрокаТабличнойЧасти.БонусПоказов) * СтрокаТабличнойЧасти.Кликабельность / 100;
		СтрокаТабличнойЧасти.ЦенаЗаКлик = ?(СтрокаТабличнойЧасти.Клики = 0, 0, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Клики);
		СтрокаТабличнойЧасти.ОбщийТрафик = КолвоДнейРазмещения * СтрокаТабличнойЧасти.НедельныйТрафик / 7;
		СтрокаТабличнойЧасти.ДоляОтОбщегоТрафика = 100 * ?(СтрокаТабличнойЧасти.ОбщийТрафик = 0, 0, (СтрокаТабличнойЧасти.Показов + СтрокаТабличнойЧасти.БонусПоказов) / СтрокаТабличнойЧасти.ОбщийТрафик);
	Иначе
		СтрокаТабличнойЧасти.ЦенаЗа1000Показов = 1000 * ?(СтрокаТабличнойЧасти.Показов = 0, 0, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Показов);
		СтрокаТабличнойЧасти.Клики = СтрокаТабличнойЧасти.Показов * СтрокаТабличнойЧасти.Кликабельность / 100;
		СтрокаТабличнойЧасти.ЦенаЗаКлик = ?(СтрокаТабличнойЧасти.Клики = 0, 0, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Клики);
		СтрокаТабличнойЧасти.ОбщийТрафик = КолвоДнейРазмещения * СтрокаТабличнойЧасти.НедельныйТрафик / 7;
		СтрокаТабличнойЧасти.ДоляОтОбщегоТрафика = 100 * ?(СтрокаТабличнойЧасти.ОбщийТрафик = 0, 0, СтрокаТабличнойЧасти.Показов / СтрокаТабличнойЧасти.ОбщийТрафик);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СтавкаНДС

&НаСервере
// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.РаботыИУслугиСтавкаНДС.Видимость = Истина;
		Элементы.РаботыИУслугиСуммаНДС.Видимость = Истина;
		Элементы.РаботыИУслугиВсего.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.РаботыИУслуги Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;	
		
	Иначе
		
		Элементы.РаботыИУслугиСтавкаНДС.Видимость = Ложь;
		Элементы.РаботыИУслугиСуммаНДС.Видимость = Ложь;
		Элементы.РаботыИУслугиВсего.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;	
		
		Для каждого СтрокаТабличнойЧасти Из Объект.РаботыИУслуги Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
Процедура РаботыИУслугиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РаботыИУслуги.ТекущиеДанные;
	ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
	
КонецПроцедуры // РаботыИУслугиСтавкаНДСПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
Процедура РаботыИУслугиСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РаботыИУслуги.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РаботыИУслугиСуммаНДСПриИзменении()


#КонецОбласти

#Область Подвал

//--------------------------------------------------------------------------------------
//Обновление подвала

&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	// Ручная скидка - заполнение полей ввода на форме
	//СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект, "РаботыИУслуги");
	// Конец Ручная скидка
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеУдаленияСтрокиРаботыИУслуги()
	
	// АвтоматическиеСкидки.
	//СброситьФлагСкидкиРассчитаныКлиент("УдалениеСтроки");
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ПредварительныйРасчет

&НаКлиенте
Процедура ПредварительныйРасчетПоДнямНеделямПриИзменении(Элемент)
	ОбновитьПредварительныйРасчет();
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеТабличныхЧастей()

	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	ОписаниеДаты = Новый ОписаниеТипов("Дата");
	ОписаниеНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	
	ДанныеТабличныхЧастей = Новый ТаблицаЗначений;
	ДанныеТабличныхЧастей.Колонки.Добавить("НомерСтроки",ОписаниеЧисла);
	ДанныеТабличныхЧастей.Колонки.Добавить("Номенклатура", ОписаниеНоменклатура);
	ДанныеТабличныхЧастей.Колонки.Добавить("Количество",ОписаниеЧисла);
	ДанныеТабличныхЧастей.Колонки.Добавить("ДатаНачала", ОписаниеДаты);
	ДанныеТабличныхЧастей.Колонки.Добавить("ДатаОкончания", ОписаниеДаты);
	ДанныеТабличныхЧастей.Колонки.Добавить("КоличествоДней", ОписаниеЧисла);
	
	Для Каждого СтрокаМедиаплана Из Объект.СтрокиМедиаплана Цикл
		
		СтрокиМедиапланаРасшифровка = Объект.СтрокиМедиапланаРасшифровка.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаМедиаплана.КлючСвязи));
		
		Для Каждого СтрокаМедиапланаРасшифровка Из СтрокиМедиапланаРасшифровка Цикл
			
			НоваяСтрокаМедиаплана = ДанныеТабличныхЧастей.Добавить();
			НоваяСтрокаМедиаплана.НомерСтроки = СтрокаМедиаплана.НомерСтроки;
			НоваяСтрокаМедиаплана.Номенклатура = СтрокаМедиаплана.Номенклатура;
			НоваяСтрокаМедиаплана.Количество = СтрокаМедиапланаРасшифровка.Количество;
			НоваяСтрокаМедиаплана.ДатаНачала = СтрокаМедиапланаРасшифровка.ДатаНачала;
			НоваяСтрокаМедиаплана.ДатаОкончания = СтрокаМедиапланаРасшифровка.ДатаОкончания;
			НоваяСтрокаМедиаплана.КоличествоДней = (НачалоДня(СтрокаМедиапланаРасшифровка.ДатаОкончания) - НачалоДня(СтрокаМедиапланаРасшифровка.ДатаНачала))/86400 + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеТабличныхЧастей;

КонецФункции

&НаСервере
Процедура ОбновитьПредварительныйРасчет()
	
	
	ПредварительныйРасчет.Очистить();
	
	МакетСКД = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	КомпоновщикНастроек  = Неопределено;
	
	ВариантыНастроек = Новый Соответствие;
	ВариантыНастроек.Вставить(1, МакетСКД.ВариантыНастроек.ПоНеделям);
	ВариантыНастроек.Вставить(2, МакетСКД.ВариантыНастроек.ПоДням);
	ВариантыНастроек.Вставить(3, МакетСКД.ВариантыНастроек.ДетальныеЗаписи);
	
	Если КомпоновщикНастроек = Неопределено Тогда
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.ЗагрузитьНастройки(ВариантыНастроек[ПредварительныйРасчетПоДнямНеделям].Настройки);		
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	МакетСКД.Параметры.Найти("ДатаНачала").Значение = Объект.ДатаНачала;
	МакетСКД.Параметры.Найти("ДатаОкончания").Значение = Объект.ДатаОкончания;
	МакетСКД.Параметры.Найти("ДанныеТабличныхЧастей").Значение = ПолучитьДанныеТабличныхЧастей();
	МакетСКД.Параметры.Найти("МедиапланСсылка").Значение = Объект.Ссылка;
	МакетСКД.Параметры.Найти("ПоНеделям").Значение = (ПредварительныйРасчетПоДнямНеделям = 1);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(МакетСКД, Настройки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ПредварительныйРасчет);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаТаблицыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаПредварительныйРасчет Тогда 
		ОбновитьПредварительныйРасчет();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

 #Область ОбщиеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	ПоляНадписи = Новый Структура;
	ПоляНадписи.Вставить("ВидЦен", Объект.ВидЦен);
	ПоляНадписи.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
	ПоляНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПоляНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	ПоляНадписи.Вставить("Курс", Объект.Курс);
	ПоляНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
	ПоляНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	ПоляНадписи.Вставить("УчетВалютныхОпераций", УчетВалютныхОпераций);
	ПоляНадписи.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ЦеныИВалюта = ТекстНадписиЦеныИВалюта(ПоляНадписи);
	
	УстановитьУсловноеОформлениеФормы();
	
	ПредварительныйРасчетПоДнямНеделям = 1;
	ОбновитьПредварительныйРасчет();
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.РаботыИУслуги.ПроцентСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РаботыИУслугиПроцентСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.РаботыИУслуги.СуммаСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РаботыИУслугиСуммаСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "сумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
// @skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти 

#Область Опции

&НаКлиенте
Процедура НаборыОпцийПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		Элементы.НаборыОпцийРасшифровка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязиОпции", Элемент.ТекущиеДанные.КлючСвязиОпции);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаборыОпцийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока и Не ОтменаРедактирования Тогда 
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.КлючСвязиОпции = Новый УникальныйИдентификатор();
		ТекущиеДанные.Коэффициент = 1;
		Если Элемент.ТекущиеДанные <> Неопределено Тогда 
			Элементы.НаборыОпцийРасшифровка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязиОпции", Элемент.ТекущиеДанные.КлючСвязиОпции);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаборыОпцийПослеУдаления(Элемент)

	ОчиститьСтрокиНаборыОпцийРасшифровкаСНесуществующимиКлючамиСвязи();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСтрокиНаборыОпцийРасшифровкаСНесуществующимиКлючамиСвязи()
	
	КлючиСвязиНаборыОпций = Объект.НаборыОпций.Выгрузить(,"КлючСвязиОпции").ВыгрузитьКолонку("КлючСвязиОпции");
	КлючиСвязиНаборыОпцийРасшифровка = Объект.НаборыОпцийРасшифровка.Выгрузить(,"КлючСвязиОпции").ВыгрузитьКолонку("КлючСвязиОпции");
	КлючиКУдалению = Новый Массив;
	Для Каждого КлючСвязиОпции Из КлючиСвязиНаборыОпцийРасшифровка Цикл
		Если КлючиСвязиНаборыОпций.Найти(КлючСвязиОпции) = Неопределено Тогда
			КлючиКУдалению.Добавить(КлючСвязиОпции);
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючКУдалению Из КлючиКУдалению Цикл
		СтрокиНаборыОпцийРасшифровка = Объект.НаборыОпцийРасшифровка.НайтиСтроки(Новый Структура("КлючСвязиОпции", КлючКУдалению));
		Для Каждого СтрокаНаборыОпцийРасшифровка Из СтрокиНаборыОпцийРасшифровка Цикл 
			Объект.НаборыОпцийРасшифровка.Удалить(СтрокаНаборыОпцийРасшифровка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура НаборыОпцийРасшифровкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Элементы.НаборыОпций.ТекущиеДанные = Неопределено Тогда 
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо выборать строку таблицы <Наборы опций>";
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаборыОпцийРасшифровкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда 
		ТекущиеДанные = Элементы.НаборыОпцийРасшифровка.ТекущиеДанные;
		ТекущиеДанные.КлючСвязиОпции = Элементы.НаборыОпций.ТекущиеДанные.КлючСвязиОпции;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаборыОпцийРасшифровкаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.НаборыОпций.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущийКлючСвязиОпции = ТекущиеДанные.КлючСвязиОпции;  
		ОбновитьНаборОпций(ТекущийКлючСвязиОпции);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаборОпций(КлючСвязиОпции)
	
	ОтборПоКлючюСвязи = Новый Структура("КлючСвязиОпции", КлючСвязиОпции);
	СтрокиНаборыОпцийРасшифровка = Объект.НаборыОпцийРасшифровка.НайтиСтроки(ОтборПоКлючюСвязи);
	СтрокаНаборыОпций = Объект.НаборыОпций.НайтиСтроки(ОтборПоКлючюСвязи)[0];
	КоэффициентНабораОпций = 1;
	Для Каждого СтрокаНаборОпцийРасшифровка Из СтрокиНаборыОпцийРасшифровка Цикл
		КоэффициентНабораОпций = КоэффициентНабораОпций * СтрокаНаборОпцийРасшифровка.Коэффициент;
	КонецЦикла;
	СтрокаНаборыОпций.Коэффициент = КоэффициентНабораОпций;
	ОбновитьДанныеИзТаблицыСтрокиМедиаплана(КлючСвязиОпции, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеИзТаблицыСтрокиМедиаплана(КлючСвязиОпции = Неопределено, КлючСвязи = Неопределено);
	
    ОтборПоКлючюСвязи = Новый Структура;
	Если КлючСвязиОпции <> Неопределено Тогда 
		ОтборПоКлючюСвязи.Вставить("КлючСвязиОпции", КлючСвязиОпции);
	КонецЕсли;
	Если КлючСвязи <> Неопределено Тогда 
		ОтборПоКлючюСвязи.Вставить("КлючСвязи", КлючСвязи);
	КонецЕсли;
	Если ОтборПоКлючюСвязи.Количество() = 0 Тогда 
		РассчитатьСтрокиМедиапланаРасшифровка(Объект.СтрокиМедиапланаРасшифровка);
	Иначе
		РассчитатьСтрокиМедиапланаРасшифровка(Объект.СтрокиМедиапланаРасшифровка.НайтиСтроки(ОтборПоКлючюСвязи));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтрокиМедиапланаРасшифровка(СтрокиДляРасчета)

	Для Каждого СтрокаДляРасчета Из СтрокиДляРасчета Цикл
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаДляРасчета);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура НаборыОпцийРасшифровкаОпцияПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено  Тогда 
		ТекущиеДанные.Коэффициент = ПолучитьОпциональныйКоэффициентПоУмолчанию(ТекущиеДанные.Опция);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьОпциональныйКоэффициентПоУмолчанию(ОпцияСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	_ОпциональныеКоэффициентыСрезПоследних.Коэффициент КАК Коэффициент
		|ИЗ
		|	РегистрСведений._ОпциональныеКоэффициенты.СрезПоследних(&Дата, Опция = &Опция) КАК _ОпциональныеКоэффициентыСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Опция", ОпцияСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.Коэффициент;
	Иначе
		Возврат 1;
	КонецЕсли;

КонецФункции  


&НаКлиенте
Процедура СтрокиМедиапланаРасшифровкаОпцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	КлючСвязиОпции = Новый УникальныйИдентификатор(ВыбранноеЗначение);
	ТекущиеДанные = Элементы.СтрокиМедиапланаРасшифровка.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПолучитьОпцииПоКлючу(КлючСвязиОпции)); 

КонецПроцедуры

#КонецОбласти 

#Область СтрокиМедиаплана

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Наборы
	Если НЕ СтруктураДанные.Свойство("ЕдиницаИзмерения") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	КонецЕсли; 
	Если НЕ СтруктураДанные.Свойство("Коэффициент") Тогда
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли; 
	КонецЕсли;
	// Конец Наборы
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
																
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	КонецЕсли;
	
	
	Если СтруктураДанные.Свойство("Цена") И ЗначениеЗаполнено(СтруктураДанные.Цена) Тогда
		// При подборе наборов расчет цены не требуется - используется цена, указанная в подборе
	ИначеЕсли СтруктураДанные.Свойство("ВидЦен") Тогда
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки")
	   И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
	
	СтруктураДанные.Вставить("Кликабельность",СтруктураДанные.Номенклатура._Кликабельность);
	СтруктураДанные.Вставить("КатегорияРазмещения",СтруктураДанные.Номенклатура._КатегорияРазмещения);
	СтруктураДанные.Вставить("НедельныйТрафик",СтруктураДанные.Номенклатура._ТрафикВНеделю);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаКлиенте
Функция ТекущийКлючСвязиСтрокиМедиаплана()

	СтрокиМедиапланаТекущиеДанные = Элементы.СтрокиМедиаплана.ТекущиеДанные;
	Если СтрокиМедиапланаТекущиеДанные = Неопределено Тогда 
		Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	Иначе
		Возврат СтрокиМедиапланаТекущиеДанные.КлючСвязи;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьОпцииПоКлючу(КлючСвязиОпции)
	
	Результат = Новый Структура("Опции, КлючСвязиОпции, ОпциональныйКоэффициент", 0, Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"), 1);
	
	Если КлючСвязиОпции = Результат.КлючСвязиОпции Тогда 
		Возврат Результат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("КлючСвязиОпции", КлючСвязиОпции);
	НайденыеСтроки = Объект.НаборыОпций.НайтиСтроки(ОтборСтрок);
	Если НайденыеСтроки.Количество() <> 0 Тогда 
		СтрокаОпций = НайденыеСтроки[0];
		Результат.Опции = СтрокаОпций.НомерСтроки;
		Результат.КлючСвязиОпции = СтрокаОпций.КлючСвязиОпции;
		Результат.ОпциональныйКоэффициент = СтрокаОпций.Коэффициент;
	КонецЕсли;                                
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьНаборОпций(Команда)

	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"), "Очистить");
	Для Каждого НаборОпций Из Объект.НаборыОпций Цикл 
		СписокВыбора.Добавить(НаборОпций.КлючСвязиОпции,  "№ " + Строка(НаборОпций.НомерСтроки) + " : " + НаборОпций.Коэффициент);
	КонецЦикла;
	
	ВыбранноеЗначение = Неопределено;
	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("УстановитьНаборОпцийЗавершение", ЭтотОбъект), СписокВыбора, Элементы.СтрокиМедиапланаРасшифровкаСезонныйКоэффициент);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНаборОпцийЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	ВыбранноеЗначение = ВыбранныйЭлемент; 
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Опции = ПолучитьОпцииПоКлючу(ВыбранноеЗначение.Значение);
	
	Для Каждого ИдентификаторСтроки Из Элементы.СтрокиМедиапланаРасшифровка.ВыделенныеСтроки Цикл 
		СтрокаТабличнойЧасти = Объект.СтрокиМедиапланаРасшифровка.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Опции);
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиМедиапланаРасшифровкаСнятьФлажки(Команда)
	
	УстановитьПометку(Ложь, "СтрокиМедиапланаРасшифровка", Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиМедиапланаРасшифровкаУстановитьФлажки(Команда)
	
	УстановитьПометку(Истина, "СтрокиМедиапланаРасшифровка", ТекущийКлючСвязиСтрокиМедиаплана());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометку(Пометка, ИмяТЧ, КлючСвязи)
	
	Если КлючСвязи = Неопределено Тогда 
		Элементы[ИмяТЧ + "СнятьФлажки"].Видимость = Ложь;
		Элементы[ИмяТЧ + "УстановитьФлажки"].Видимость = Истина;
	Иначе	
		Элементы[ИмяТЧ + "СнятьФлажки"].Видимость = НЕ Элементы[ИмяТЧ + "СнятьФлажки"].Видимость;
		Элементы[ИмяТЧ + "УстановитьФлажки"].Видимость = НЕ Элементы[ИмяТЧ + "УстановитьФлажки"].Видимость;
	КонецЕсли;
	
	Для каждого Строка Из Объект[ИмяТЧ] Цикл
		Если КлючСвязи = Неопределено ИЛИ (Строка.Свойство("КлючСвязи") И Строка.КлючСвязи = КлючСвязи) Тогда 
			Строка.Пометка = Пометка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиМедиапланаПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		Элементы.СтрокиМедиапланаРасшифровка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", Элемент.ТекущиеДанные.КлючСвязи);
	КонецЕсли;
	УстановитьПометку(Ложь, "СтрокиМедиапланаРасшифровка", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СтрокиМедиапланаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока и Не ОтменаРедактирования Тогда 
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.КлючСвязи = Новый УникальныйИдентификатор();
		Если Элемент.ТекущиеДанные <> Неопределено Тогда 
			Элементы.СтрокиМедиапланаРасшифровка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", Элемент.ТекущиеДанные.КлючСвязи);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтрокиМедиапланаПослеУдаления(Элемент)
	ОчиститьСтрокиСтрокиМедиапланаРасшифровкаСНесуществующимиКлючамиСвязи();
КонецПроцедуры

&НаСервере
Процедура ОчиститьСтрокиСтрокиМедиапланаРасшифровкаСНесуществующимиКлючамиСвязи()
	
	КлючиСвязиСтрокиМедиаплана = Объект.СтрокиМедиаплана.Выгрузить(,"КлючСвязи").ВыгрузитьКолонку("КлючСвязи");
	КлючиСвязиСтрокиМедиапланаРасшифровка = Объект.СтрокиМедиапланаРасшифровка.Выгрузить(,"КлючСвязи").ВыгрузитьКолонку("КлючСвязи");
	КлючиКУдалению = Новый Массив;
	Для Каждого КлючСвязи Из КлючиСвязиСтрокиМедиапланаРасшифровка Цикл
		Если КлючиСвязиСтрокиМедиаплана.Найти(КлючСвязи) = Неопределено Тогда
			КлючиКУдалению.Добавить(КлючСвязи);
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючКУдалению Из КлючиКУдалению Цикл
		СтрокиМедиапланаРасшифровка = Объект.СтрокиМедиапланаРасшифровка.НайтиСтроки(Новый Структура("КлючСвязи", КлючКУдалению));
		Для Каждого СтрокаМедиапланаРасшифровка Из СтрокиМедиапланаРасшифровка Цикл 
			Объект.СтрокиМедиапланаРасшифровка.Удалить(СтрокаМедиапланаРасшифровка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиМедиапланаРасшифровкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;

	Если Элементы.СтрокиМедиаплана.ТекущиеДанные = Неопределено Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо выборать строку таблицы <Строки медиаплана>";
		Сообщение.Сообщить();
	Иначе
	
		ОписаниеОповещения = Новый ОписаниеОповещения("РезультатДобавленияПериода",ЭтотОбъект);
		
		ПараметрыПериода = Новый Структура("НачалоПериода, КонецПериода, Количество", Неопределено, Неопределено, 0);
		ОткрытьФорму("Документ._Медиаплан.Форма.ФормаВыбораПериода",ПараметрыПериода,ЭтотОбъект,Истина,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РезультатДобавленияПериода(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		
		ТекущиеДанныеСтрокиМедиаплана = Элементы.СтрокиМедиаплана.ТекущиеДанные;
		
		РезультатДобавленияПериодаНаСервере(Результат, ТекущиеДанныеСтрокиМедиаплана.КлючСвязи, ТекущиеДанныеСтрокиМедиаплана.КатегорияРазмещения);
		
		ОбновитьДанныеИзТаблицыСтрокиМедиаплана(Неопределено, ТекущиеДанныеСтрокиМедиаплана.КлючСвязи);		

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РезультатДобавленияПериодаНаСервере(АдресВременногоХранилища, КлючСвязи, КатегорияРазмещения) 
	
	ТаблицаПериодов = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Для Каждого Период Из ТаблицаПериодов Цикл
		
		НоваяСтрокаМедиапланаРасшифровка = Объект.СтрокиМедиапланаРасшифровка.Добавить();
		НоваяСтрокаМедиапланаРасшифровка.КлючСвязи = КлючСвязи;
		НоваяСтрокаМедиапланаРасшифровка.ДатаНачала = Период.НачалоПериода;
		НоваяСтрокаМедиапланаРасшифровка.ДатаОкончания = Период.КонецПериода;
		НоваяСтрокаМедиапланаРасшифровка.Количество = Период.Количество;
		НоваяСтрокаМедиапланаРасшифровка.СезонныйКоэффициент = ПолучитьСезонныйКоэффициент(Объект.Дата, КатегорияРазмещения, НачалоМесяца(НоваяСтрокаМедиапланаРасшифровка.ДатаНачала));
		
	КонецЦикла;

КонецПроцедуры





&НаКлиенте
Процедура СтрокиМедиапланаРасшифровкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда 
		ТекущиеДанныеСтрокиМедиапланаРасшифровка = Элементы.СтрокиМедиапланаРасшифровка.ТекущиеДанные;
		ТекущиеДанныеСтрокиМедиаплана = Элементы.СтрокиМедиаплана.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекущиеДанныеСтрокиМедиапланаРасшифровка, ТекущиеДанныеСтрокиМедиаплана);
		ТекущиеДанныеСтрокиМедиапланаРасшифровка.ОпциональныйКоэффициент = 1;
		ТекущиеДанныеСтрокиМедиапланаРасшифровка.СезонныйКоэффициент = 1;
		ТекущиеДанныеСтрокиМедиапланаРасшифровка.ЦенаРасчетная = ТекущиеДанныеСтрокиМедиапланаРасшифровка.Цена;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтрокиМедиапланаНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.СтрокиМедиаплана.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент",		 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	
	СтрокаТабличнойЧасти.НедельныйТрафик = СтруктураДанные.НедельныйТрафик;
	СтрокаТабличнойЧасти.Кликабельность = СтруктураДанные.Кликабельность;
	СтрокаТабличнойЧасти.КатегорияРазмещения = СтруктураДанные.КатегорияРазмещения;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	
	//РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	
	ПодборНоменклатурыИзСписка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ТаргетингиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		КлючСвязи = Элементы.РаботыИУслуги.ТекущиеДанные.КлючСвязи;
		Элемент.ТекущиеДанные.КлючСвязи = КлючСвязи;
	КонецЕсли;
	
КонецПроцедуры


// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
#КонецОбласти

#Область Новые

&НаКлиенте 
Функция ОшибкаВыбораДаты(ДатаНачала, ДатаОкончания, В_Одном_месяце)

	Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ДатаОкончания < ДатаНачала Тогда
		Возврат "Дата начала не может быть больше даты окончания периода";
	КонецЕсли;
	
	Если В_Одном_месяце и НачалоМесяца(ДатаНачала)<>НачалоМесяца(ДатаОкончания) Тогда 
		Возврат "Дата начала и дата окончания должны находится в пределах одного календарного месяца";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура СтрокиМедиапланаРасшифровкаДатаНачалаОкончанияПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыбранноеЗначение = ДополнительныеПараметры.ВыбранноеЗначение;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ИзменяемыйРеквизит = ДополнительныеПараметры.ИзменяемыйРеквизит;

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ТекущиеДанные.ДатаНачала = ВыбранноеЗначение;
		ТекущиеДанные.ДатаОкончания	= ВыбранноеЗначение;
		ОбновитьСезонныйКоэффициентПоПериоду(ТекущиеДанные, ВыбранноеЗначение);
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		ТекущиеДанные[ИзменяемыйРеквизит] = Неопределено;
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиМедиапланаРасшифровкаДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СтрокиМедиапланаРасшифровка.ТекущиеДанные;                                    
	ОшибкаВыбораДатыТекст = ОшибкаВыбораДаты(ТекущиеДанные.ДатаНачала, ТекущиеДанные.ДатаОкончания, Истина);
	Если ОшибкаВыбораДатыТекст <> "" Тогда
		ВариантПродолжения = "Установить <Дата начала> = <Дата окончания> = " + Формат(ТекущиеДанные.ДатаНачала, "ДФ=dd.MM.yyyy") + "?";
		ПоказатьВопрос(Новый ОписаниеОповещения("СтрокиМедиапланаРасшифровкаДатаНачалаОкончанияПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение, ТекущиеДанные, ИзменяемыйРеквизит",
		ТекущиеДанные.ДатаНачала, ТекущиеДанные, "ДатаНачала")),ОшибкаВыбораДатыТекст + Символы.ПС + ВариантПродолжения,РежимДиалогаВопрос.ДаНет,0, КодВозвратаДиалога.Нет, "Ошибка установки даты", КодВозвратаДиалога.Нет);
	Иначе
		ОбновитьСезонныйКоэффициентПоПериоду(ТекущиеДанные, ТекущиеДанные.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиМедиапланаРасшифровкаДатаОкончанияПриИзменении(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СтрокиМедиапланаРасшифровка.ТекущиеДанные;
	ОшибкаВыбораДатыТекст = ОшибкаВыбораДаты(ТекущиеДанные.ДатаНачала, ТекущиеДанные.ДатаОкончания, Истина);
	Если ОшибкаВыбораДатыТекст <> "" Тогда
		ВариантПродолжения = "Установить <Дата начала> = <Дата окончания> = " + Формат(ТекущиеДанные.ДатаОкончания, "ДФ=dd.MM.yyyy") + "?";
		ПоказатьВопрос(Новый ОписаниеОповещения("СтрокиМедиапланаРасшифровкаДатаНачалаОкончанияПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение, ТекущиеДанные, ИзменяемыйРеквизит",
		ТекущиеДанные.ДатаОкончания, ТекущиеДанные, "ДатаОкончания")),ОшибкаВыбораДатыТекст + Символы.ПС + ВариантПродолжения,РежимДиалогаВопрос.ДаНет,0, КодВозвратаДиалога.Нет, "Ошибка установки даты", КодВозвратаДиалога.Нет);
	Иначе
		ОбновитьСезонныйКоэффициентПоПериоду(ТекущиеДанные, ТекущиеДанные.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСезонныйКоэффициентПоПериоду(ТекущиеДанные, ДатаПериода)

	ТекущиеДанные.СезонныйКоэффициент = ПолучитьСезонныйКоэффициент(Объект.Дата, Элементы.СтрокиМедиаплана.ТекущиеДанные.КатегорияРазмещения, НачалоМесяца(ДатаПериода));
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьСезонныйКоэффициент(Дата, КатегорияРазмещения, Месяц)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	_КоэффициентыСезонныеСрезПоследних.Коэффициент КАК Коэффициент
		|ИЗ
		|	РегистрСведений._КоэффициентыСезонные.СрезПоследних(
		|			&Дата,
		|			КатегорияРазмещения = &КатегорияРазмещения
		|				И Месяц = &Месяц) КАК _КоэффициентыСезонныеСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("КатегорияРазмещения", КатегорияРазмещения);
	Запрос.УстановитьПараметр("Месяц", Месяц);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Коэффициент;
	Иначе
		Возврат 1
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура СтрокиМедиапланаРасшифровкаКоличествоПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура СтрокиМедиапланаРасшифровкаПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура СтрокиМедиапланаРасшифровкаПриАктивизацииСтроки(Элемент)
	
	ОбновитьОписаниеОпции();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОписаниеОпции()

	ТекущиеДанныеСтрокиМедиапланаРасшифровка = Элементы.СтрокиМедиапланаРасшифровка.ТекущиеДанные;
	Если ТекущиеДанныеСтрокиМедиапланаРасшифровка <> Неопределено Тогда 
		СтрокаОписанияНабораОпций = ПолучитьОписаниеНабораОпций(ТекущиеДанныеСтрокиМедиапланаРасшифровка.КлючСвязиОпции);
	Иначе 
		СтрокаОписанияНабораОпций = "Опции не установлены. Q = 1";
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Функция ПолучитьОписаниеНабораОпций(КлючСвязиОпции)

	СтрокиНаборыОпций = Объект.НаборыОпций.НайтиСтроки(Новый Структура("КлючСвязиОпции", КлючСвязиОпции));
	
	Если СтрокиНаборыОпций.Количество() <> 1 Тогда 
		Возврат "";
	КонецЕсли;
	
    НаборОпций = СтрокиНаборыОпций[0];
	
	СтрокаОписания = "Набор опций № " + НаборОпций.НомерСтроки + ". Q[опц.] = " + НаборОпций.Коэффициент + ":";
	
	СтрокиНаборыОпцийРасшифровка = Объект.НаборыОпцийРасшифровка.НайтиСтроки(Новый Структура("КлючСвязиОпции", КлючСвязиОпции));
	
	Для Каждого СтрокаОпции из СтрокиНаборыОпцийРасшифровка Цикл 
		
		Уточнение = СокрЛП(СтрокаОпции.Уточнение);
		
		Если Не ПустаяСтрока(Уточнение) Тогда 
			Уточнение = " [" + Уточнение + "]: ";
		Иначе
			Уточнение = ": ";
		КонецЕсли;
			
		СтрокаОписания = СтрокаОписания + Символы.ПС + СтрокаОпции.Опция.Наименование + Уточнение + СтрокаОпции.Коэффициент;
		
	КонецЦикла;

	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиенте
Процедура СтрокиМедиапланаПриИзменении(Элемент)
	ОбновитьДанныеИзТаблицыСтрокиМедиаплана(Неопределено, Элементы.СтрокиМедиаплана.ТекущиеДанные.КлючСвязи);
КонецПроцедуры

&НаКлиенте
Процедура ВключатьБонусВПоказателиПриИзменении(Элемент)
	Для Каждого Строка Из Объект.СтрокиМедиапланаРасшифровка Цикл
		РассчитатьПоказателиМедиаПлана(Строка);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
