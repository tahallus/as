#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Процедура заполняет авансы.
//
Процедура ЗаполнитьПредоплату() Экспорт
	
	Предоплата.Очистить();
	
	ТаблицаЗаказов = ТаблицаЗаказовДляЗаполненияПредоплаты();
	
	Запрос = НовыйЗапросРасшифровкиПредоплаты(ТаблицаЗаказов);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		НайденнаяСтрока = ТаблицаЗаказов.Найти(ВыборкаРезультатаЗапроса.Заказ, "Заказ");
		
		Если НайденнаяСтрока.ВсегоРасч = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаРезультатаЗапроса.СуммаРасчетов <= НайденнаяСтрока.ВсегоРасч Тогда // сумма остатка меньше или равна чем осталось распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НайденнаяСтрока.ВсегоРасч = НайденнаяСтрока.ВсегоРасч - ВыборкаРезультатаЗапроса.СуммаРасчетов;
			
		Иначе // сумма остатка больше чем нужно распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НоваяСтрока.СуммаРасчетов = НайденнаяСтрока.ВсегоРасч;
			НоваяСтрока.СуммаПлатежа = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				НоваяСтрока.СуммаРасчетов,
				ВыборкаРезультатаЗапроса.Курс,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКурс,
				ВыборкаРезультатаЗапроса.Кратность,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКратность
			);
			НайденнаяСтрока.ВсегоРасч = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйЗапросРасшифровкиПредоплаты(Знач ТаблицаЗаказов)
	
	Результат = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаРегОстаток) КАК СуммаРегОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателямиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРегОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ В (&Заказ)
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПокупателями.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПокупателями.Договор = &Договор
	|		И ДвиженияДокументаРасчетыСПокупателями.Заказ В(&Заказ)
	|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРег, 0) = 0
	|				ТОГДА РасчетыСПокупателямиОстатки.СуммаУчета / ВЫБОР
	|						КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|							ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|						ИНАЧЕ 1
	|					КОНЕЦ * (РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКурс / РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКратность)
	|			ИНАЧЕ РасчетыСПокупателямиОстатки.СуммаРег / ВЫБОР
	|					КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|						ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК Курс,
	|	1 КАК Кратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс КАК КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность КАК КурсыВалютыДокументаКратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * &КратностьВалютыДокумента / (&КурсВалютыДокумента * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРег,
	|		КурсыВалютыУчета.Курс КАК КурсыВалютыУчетаКурс,
	|		КурсыВалютыУчета.Кратность КАК КурсыВалютыУчетаКратность,
	|		&КурсВалютыДокумента КАК КурсыВалютыДокументаКурс,
	|		&КратностьВалютыДокумента КАК КурсыВалютыДокументаКратность
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПокупателямиОстатки КАК РасчетыСПокупателямиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата");
	
	Результат.УстановитьПараметр("Заказ", ТаблицаЗаказов.ВыгрузитьКолонку("Заказ"));
	Результат.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	Результат.УстановитьПараметр("Контрагент", Контрагент);
	Результат.УстановитьПараметр("Договор", Договор);
	Результат.УстановитьПараметр("Период", Дата);
	Результат.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Результат.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Если Договор.ВалютаРасчетов = ВалютаДокумента Тогда
		Результат.УстановитьПараметр("КурсВалютыДокумента", Курс);
		Результат.УстановитьПараметр("КратностьВалютыДокумента", Кратность);
	Иначе
		Результат.УстановитьПараметр("КурсВалютыДокумента", 1);
		Результат.УстановитьПараметр("КратностьВалютыДокумента", 1);
	КонецЕсли;
	Результат.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаЗаказовДляЗаполненияПредоплаты()
	
	Результат = Запасы.Выгрузить(, "Заказ, Всего");
	
	Если ЗначениеЗаполнено(НоменклатураДоставки) И ЗначениеЗаполнено(СтоимостьДоставки) Тогда
		СтрокаСтоимостьДоставки = Результат.Добавить();
		СтрокаСтоимостьДоставки.Всего = СтоимостьДоставки;
	КонецЕсли;
	
	Результат.Колонки.Добавить("ВсегоРасч");
	Для каждого ТекСтрока Из Результат Цикл
		Если НЕ Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекСтрока.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
		ИначеЕсли ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			ТекСтрока.Заказ = Заказ;
		Иначе
			ТекСтрока.Заказ = ?(ТекСтрока.Заказ = Неопределено, Документы.ЗаказПокупателя.ПустаяСсылка(), ТекСтрока.Заказ);
		КонецЕсли;
		ТекСтрока.ВсегоРасч = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
		ТекСтрока.Всего,
		?(Договор.ВалютаРасчетов = ВалютаДокумента, Курс, 1),
		Курс,
		?(Договор.ВалютаРасчетов = ВалютаДокумента, Кратность, 1),
		Кратность
		);
	КонецЦикла;
	Результат.Свернуть("Заказ", "Всего, ВсегоРасч");
	Результат.Сортировать("Заказ Возр");
	
	Возврат Результат;
	
КонецФункции // ЗаполнитьПредоплату()

// Обработчик заполнения документа по структуре
//
// Параметры:
// 	ДанныеЗаполнения - Структура - .
Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("Основание")
		И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Основание, "ВидОперации") = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд
		Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести Расходную накладную на основании заказ-наряда!'");
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("МассивЗаказовПокупателей") Тогда
		ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ДокументОснованиеПродажа") Тогда
		ЗаполнитьПоПриходнойНакладной(ДанныеЗаполнения.ДокументОснованиеПродажа, "Продажа");
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ДокументОснованиеВозврат") Тогда
		ЗаполнитьПоПриходнойНакладной(ДанныеЗаполнения.ДокументОснованиеВозврат, "Возврат");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик заполнения документа на основании Приходной накладной.
//
// Параметры:
//  ДанныеЗаполнения - Структура - Основание для заполнения документа.
//
Процедура ЗаполнитьПоПриходнойНакладной(ДанныеЗаполнения, Операция = "") Экспорт
	
	// Заполнение шапки документа.
	Если Операция = "Продажа" Тогда
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика
			ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
		Иначе
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможен ввод операции ""Продажа покупателю"" на основании операции - ""%1""!'"),
			ДанныеЗаполнения.ВидОперации);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		Если НесколькоЗаказовПокупателей(ДанныеЗаполнения)
			ИЛИ НЕ УправлениеНебольшойФирмойПовтИсп.РеквизитВШапке("ПоложениеЗаказаПокупателяВДокументахОтгрузки") Тогда
			ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
			ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		Иначе
			ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
			ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли; 
	ИначеЕсли Операция = "Возврат" Тогда
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения;
		Иначе
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможен ввод операции ""Возврат"" на основании операции - ""%1""!'"),
			ДанныеЗаполнения.ВидОперации);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		ПоложениеЗаказаПокупателя = ДанныеЗаполнения.ПоложениеЗаказаПоставщику;
	Иначе
		ПоложениеЗаказаПокупателя = ?(УправлениеНебольшойФирмойПовтИсп.РеквизитВШапке("ПоложениеЗаказаПокупателяВДокументахОтгрузки"), 
		Перечисления.ПоложениеРеквизитаНаФорме.ВШапке, 
		Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	КонецЕсли;
	
	Если ПоложениеЗаказаПокупателя=Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Заказ = ДанныеЗаполнения.Заказ;
	Иначе
		Заказ = Неопределено;
	КонецЕсли;
	
	Если ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Ссылка, "Проект");
	КонецЕсли;
	
	ДокументОснование = ДанныеЗаполнения.Ссылка;
	Организация = ДанныеЗаполнения.Организация;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения Тогда
		Контрагент = ДанныеЗаполнения.Контрагент;
		Договор = ДанныеЗаполнения.Договор;
		НалогообложениеНДС = ДанныеЗаполнения.НалогообложениеНДС;
	Иначе	
		НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация,, Дата);
	КонецЕсли;
	
	РеквизитыЗаказа = Неопределено;
	Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику
		И ТипЗнч(ДанныеЗаполнения.Заказ)=Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.Заказ, "ЗаказПокупателя, ПоложениеЗаказаПокупателя");
	КонецЕсли; 
	
	СтруктурнаяЕдиница = ДанныеЗаполнения.СтруктурнаяЕдиница;
	Ячейка = ДанныеЗаполнения.Ячейка;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
	НДСВключатьВСтоимость = ДанныеЗаполнения.НДСВключатьВСтоимость;
	
	Курс = ДанныеЗаполнения.Курс;
	Кратность = ДанныеЗаполнения.Кратность;
	
	ПоложениеСклада = ДанныеЗаполнения.ПоложениеСклада;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", ДанныеЗаполнения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РазмещениеЗаказов.ИсточникОбеспечения КАК ЗаказПоставщику,
	|	РазмещениеЗаказов.ЗаказПокупателя КАК ЗаказПокупателя,
	|	РазмещениеЗаказов.Номенклатура КАК Номенклатура,
	|	РазмещениеЗаказов.Характеристика КАК Характеристика,
	|	СУММА(РазмещениеЗаказов.Количество) КАК Количество
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказов КАК РазмещениеЗаказов
	|ГДЕ
	|	РазмещениеЗаказов.Регистратор = &Регистратор
	|	И РазмещениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	РазмещениеЗаказов.ИсточникОбеспечения,
	|	РазмещениеЗаказов.ЗаказПокупателя,
	|	РазмещениеЗаказов.Номенклатура,
	|	РазмещениеЗаказов.Характеристика";
	ТаблицаОстаткиРазмещения = Запрос.Выполнить().Выгрузить();
	
	// Заполнение табличной части документа.
	Запасы.Очистить();
	СерииНоменклатуры.Очистить();
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Запасы Цикл
		
		НоваяСтрока = Запасы.Добавить();
		
		Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти, ,"Цена, Сумма, СуммаНДС, Всего");
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		КонецЕсли;
		
		Если ВидОперации=Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику И ЗначениеЗаполнено(НоваяСтрока.ЗаказПокупателя) Тогда
			НоваяСтрока.Резерв = НоваяСтрока.Количество;
		КонецЕсли; 
		
		Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти, "СтранаПроисхождения, НомерГТД");
			
		КонецЕсли;
		
		НоваяСтрока.ТипНоменклатурыЗапас = (НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас)
										ИЛИ (НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
		
		Если ПоложениеЗаказаПокупателя=Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			НоваяСтрока.Заказ = Заказ;
		КонецЕсли;
		Если ВидОперации<>Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику
			ИЛИ НЕ ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
			НоваяСтрока.ЗаказПокупателя = Неопределено;
		ИначеЕсли РеквизитыЗаказа<>Неопределено И РеквизитыЗаказа.ПоложениеЗаказаПокупателя<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			НоваяСтрока.ЗаказПокупателя = РеквизитыЗаказа.ЗаказПокупателя;
		КонецЕсли; 
		
		Если ПоложениеЗаказаПокупателя<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти
			ИЛИ ВидОперации<>Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
			НоваяСтрока.Заказ = СтрокаТабличнойЧасти.ЗаказПокупателя;
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Заказ) 
			И ТипЗнч(НоваяСтрока.Заказ)=Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЗаказПоставщику", НоваяСтрока.Заказ);
			СтруктураОтбора.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
			СтруктураОтбора.Вставить("Характеристика", НоваяСтрока.Характеристика);
			СтрокиОстатки = ТаблицаОстаткиРазмещения.НайтиСтроки(СтруктураОтбора);
			НоваяСтрока.Заказ = Неопределено;
			Если СтрокиОстатки.Количество()=0 Тогда
				Продолжить;
			Иначе
				Коэффициент = ?(ТипЗнч(НоваяСтрока.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения"), НоваяСтрока.ЕдиницаИзмерения.Коэффициент, 1);
				КСписанию = НоваяСтрока.Количество * Коэффициент;
				Для каждого СтрокаОстатков Из СтрокиОстатки Цикл
					Списать = Мин(СтрокаОстатков.Количество, КСписанию);
					Если Списать<=0 Тогда
						Продолжить;
					КонецЕсли;
					СтрокаОстатков.Количество = СтрокаОстатков.Количество - Списать;
					КСписанию = КСписанию - Списать;
					Если КСписанию=0 Тогда
						НоваяСтрока.Заказ = СтрокаОстатков.ЗаказПокупателя;
						Прервать;
					КонецЕсли;
					СтрокаЗаказ = Запасы.Вставить(Запасы.Индекс(НоваяСтрока));
					ЗаполнитьЗначенияСвойств(СтрокаЗаказ, НоваяСтрока);
					СтрокаЗаказ.Заказ = СтрокаОстатков.ЗаказПокупателя;
					СтрокаЗаказ.Количество = Списать / Коэффициент;
					НоваяСтрока.Количество = НоваяСтрока.Количество - СтрокаЗаказ.Количество;
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
		
		Если ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти И ЗначениеЗаполнено(НоваяСтрока.Заказ)Тогда
			НоваяСтрока.Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Заказ, "Проект");
		КонецЕсли;
		
	КонецЦикла;
	
	// Прослеживаемость
	Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику
		И ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")	Тогда
		СведенияПрослеживаемости.Загрузить(ДанныеЗаполнения.СведенияПрослеживаемости.Выгрузить());
	Иначе
		СведенияПрослеживаемости.Очистить();
	КонецЕсли;
	// Конец Прослеживаемость

	Если НалогообложениеНДС <> ДанныеЗаполнения.НалогообложениеНДС Тогда
		
		Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			
			Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
				
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
				Иначе
					СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию);
				КонецЕсли;
				
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
				СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВключаетНДС, 
				СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
				СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
				СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
				
			КонецЦикла;
			
		Иначе
			
			Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
				СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Иначе
				СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			КонецЕсли;
			
			Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
				
				СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
				СтрокаТабличнойЧасти.СуммаНДС = 0;
				СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения);
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
	
КонецПроцедуры // ЗаполнитьПоПриходнаяНакладная()

// Обработчик заполнения на основании Заказа покупателя.
//
// Параметры:
//  ДанныеЗаполнения - Структура, ДокументСсылка.ПриходнаяНакладная - Основание для заполнения документа.
//
Процедура ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения) Экспорт
	
	Если ЭтоВводНаОснованииЗаказНаряда(ДанныеЗаполнения) Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести Расходную накладную на основании заказ-наряда!'");
	КонецЕсли;
	
	// Основание и настройка документа.
	МассивЗаказов = Новый Массив;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("МассивЗаказовПокупателей") Тогда
		МассивЗаказов = ДанныеЗаполнения.МассивЗаказовПокупателей;
		ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	Иначе
		МассивЗаказов.Добавить(ДанныеЗаполнения.Ссылка);
		ПоложениеЗаказаПокупателя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеЗаказаПокупателяВДокументахОтгрузки");
		Если НЕ ЗначениеЗаполнено(ПоложениеЗаказаПокупателя) Тогда
			ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
		Если ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			Заказ = ДанныеЗаполнения;
		КонецЕсли;
		
		ПоложениеПроекта = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеПроекта");
		Если НЕ ЗначениеЗаполнено(ПоложениеПроекта) Тогда
			ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
		Если ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение шапки.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателя.Ссылка КАК ОснованиеСсылка,
	|	ЗаказПокупателя.Проведен КАК ОснованиеПроведен,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.БанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателя.Организация.БанковскийСчетПоУмолчанию
	|		ИНАЧЕ ЗаказПокупателя.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|	ЗаказПокупателя.ПоложениеСклада КАК ПоложениеСклада,
	|	ВЫБОР
	|		КОГДА РезервированиеЗапасов.Значение
	|				ИЛИ ЗаказПокупателя.УчетПотребностиПоСкладам
	|			ТОГДА ЗаказПокупателя.СтруктурнаяЕдиницаРезерв
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ЗаказПокупателя.СтруктурнаяЕдиницаПродажи КАК Подразделение,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.Контрагент.КонтактноеЛицоПодписант КАК КонтактноеЛицоПодписант,
	|	ЗаказПокупателя.Договор КАК Договор,
	|	ЗаказПокупателя.ОснованиеПечатиСсылка КАК ОснованиеПечатиСсылка,
	|	ЗаказПокупателя.ОснованиеПечати КАК ОснованиеПечати,
	|	ЗаказПокупателя.ВидЦен КАК ВидЦен,
	|	ЗаказПокупателя.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ЗаказПокупателя.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЗаказПокупателя.ПроцентСкидкиПоДисконтнойКарте КАК ПроцентСкидкиПоДисконтнойКарте,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ЗаказПокупателя.ОжидаетсяВыборВариантаКП КАК ОжидаетсяВыборВариантаКП,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ВалютаДокумента = НациональнаяВалюта.Значение
	|			ТОГДА ЗаказПокупателя.Курс
	|		ИНАЧЕ КурсыВалютСрезПоследних.Курс
	|	КОНЕЦ КАК Курс,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ВалютаДокумента = НациональнаяВалюта.Значение
	|			ТОГДА ЗаказПокупателя.Кратность
	|		ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК Кратность,
	|	ЗаказПокупателя.Вес КАК Вес,
	|	ЗаказПокупателя.Объем КАК Объем,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ ЗаказПокупателя.НоменклатураДоставки
	|	КОНЕЦ КАК НоменклатураДоставки,
	|	ЗаказПокупателя.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ЗаказПокупателя.СтавкаНДСДоставки КАК СтавкаНДСДоставки,
	|	ЗаказПокупателя.СуммаНДСДоставки КАК СуммаНДСДоставки,
	|	ЗаказПокупателя.СпособЗачетаПредоплаты КАК СпособЗачетаПредоплаты,
	|	ЗаказПокупателя.Грузоотправитель КАК Грузоотправитель,
	|	ЗаказПокупателя.Грузополучатель КАК Грузополучатель,
	|	ЗаказПокупателя.АдресДоставки КАК АдресДоставки,
	|	ЗаказПокупателя.Проект КАК Проект
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО ЗаказПокупателя.Договор.ВалютаРасчетов = КурсыВалютСрезПоследних.Валюта},
	|	Константа.НациональнаяВалюта КАК НациональнаяВалюта,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК РезервированиеЗапасов
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивЗаказов)";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("ДатаДокумента", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	
	СтруктураИтогов = Новый Структура;
	СтруктураИтогов.Вставить("НоменклатураДоставки");
	СтруктураИтогов.Вставить("СтоимостьДоставки", 0);
	СтруктураИтогов.Вставить("СтавкаНДСДоставки");
	СтруктураИтогов.Вставить("СуммаНДСДоставки", 0);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначенияПроверяемыхРеквизитов = Новый Структура(
			"СостояниеЗаказа, Проведен, ОжидаетсяВыборВариантаКП",
			Выборка.СостояниеЗаказа, Выборка.ОснованиеПроведен, Выборка.ОжидаетсяВыборВариантаКП
		);
		Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(Выборка.ОснованиеСсылка, ЗначенияПроверяемыхРеквизитов);
		Если ЗначениеЗаполнено(Выборка.НоменклатураДоставки) Тогда
			ЗаполнитьЗначенияСвойств(СтруктураИтогов, Выборка, "НоменклатураДоставки, СтавкаНДСДоставки");
			СтруктураИтогов.СтоимостьДоставки = СтруктураИтогов.СтоимостьДоставки + Выборка.СтоимостьДоставки;
			СтруктураИтогов.СуммаНДСДоставки = СтруктураИтогов.СуммаНДСДоставки + Выборка.СуммаНДСДоставки;
		КонецЕсли; 
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураИтогов);
	
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойСклад");
		Если НЕ ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение табличной части.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	ЗаказыОстатки.Склад КАК Склад,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.Склад КАК Склад,
	|		ЗаказыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				,
	|				ЗаказПокупателя В (&МассивЗаказов)
	|					И (Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|						ИЛИ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|						ИЛИ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗаказыПокупателей.ЗаказПокупателя,
	|		ДвиженияДокументаЗаказыПокупателей.Номенклатура,
	|		ДвиженияДокументаЗаказыПокупателей.Характеристика,
	|		ДвиженияДокументаЗаказыПокупателей.Склад,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей КАК ДвиженияДокументаЗаказыПокупателей
	|	ГДЕ
	|		ДвиженияДокументаЗаказыПокупателей.Регистратор = &Ссылка) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика,
	|	ЗаказыОстатки.Склад
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|				ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипНоменклатурыЗапас,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	ЗаказПокупателяЗапасы.КоличествоСобрано КАК КоличествоСобрано,
	|	ЗаказПокупателяЗапасы.ЕстьСборка КАК ЕстьСборка,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Цена КАК Цена,
	|	ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяЗапасы.Всего КАК Всего,
	|	ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
	|	ЗаказПокупателяЗапасы.Ссылка.Проект КАК Проект,
	|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
	|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяЗапасы.Вес КАК Вес,
	|	ЗаказПокупателяЗапасы.Объем КАК Объем,
	|	ЗаказПокупателяЗапасы.Номенклатура.Вес КАК ВесЕдиницыТовара,
	|	ЗаказПокупателяЗапасы.Номенклатура.Объем КАК ОбъемЕдиницыТовара,
	|	ВЫБОР
	|		КОГДА &РезервированиеЗапасов
	|					И ЗаказПокупателяЗапасы.СтруктурнаяЕдиницаРезерв <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				ИЛИ ЗаказПокупателяЗапасы.Ссылка.УчетПотребностиПоСкладам
	|			ТОГДА ЗаказПокупателяЗапасы.СтруктурнаяЕдиницаРезерв
	|		ИНАЧЕ ЗаказПокупателяЗапасы.Номенклатура.Склад
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ЗаказПокупателяЗапасы.Ссылка.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	ЗаказПокупателяЗапасы.Номенклатура.Ячейка КАК Ячейка,
	|	ЗаказПокупателяЗапасы.Номенклатура.Ячейка.Владелец КАК СтруктурнаяЕдиницаЯчейки,
	|	ЗаказПокупателяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказПокупателяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказПокупателяЗапасы.ДоляСтоимости КАК ДоляСтоимости,
	|	ЗаказПокупателяЗапасы.Номенклатура.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	(ЗаказПокупателяЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ЗаказПокупателяЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ИЛИ ЗаказПокупателяЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНаценки.Ссылка КАК Заказ,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&МассивЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДобавленныеНаборы.Ссылка КАК Заказ,
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ПОМЕСТИТЬ ВТДобавленныеНаборы
	|ИЗ
	|	Документ.ЗаказПокупателя.ДобавленныеНаборы КАК ДобавленныеНаборы
	|ГДЕ
	|	ДобавленныеНаборы.Ссылка В(&МассивЗаказов)
	|	И ДобавленныеНаборы.НомерВариантаКП = ДобавленныеНаборы.Ссылка.ОсновнойВариантКП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДобавленныеНаборы.Заказ КАК Заказ,
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ИЗ
	|	ВТДобавленныеНаборы КАК ДобавленныеНаборы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателяПредоплата.Ссылка КАК Ссылка,
	|	ЗаказПокупателяПредоплата.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяПредоплата.Документ КАК Документ,
	|	ЗаказПокупателяПредоплата.НомерСертификата КАК НомерСертификата,
	|	ЗаказПокупателяПредоплата.СуммаРасчетов КАК СуммаРасчетов,
	|	ЗаказПокупателяПредоплата.Курс КАК Курс,
	|	ЗаказПокупателяПредоплата.Кратность КАК Кратность,
	|	ЗаказПокупателяПредоплата.СуммаПлатежа КАК СуммаПлатежа,
	|	ЗаказПокупателяПредоплата.ОплатаСертификатом КАК ОплатаСертификатом,
	|	ЗаказПокупателяПредоплата.Ссылка КАК Заказ
	|ИЗ
	|	Документ.ЗаказПокупателя.Предоплата КАК ЗаказПокупателяПредоплата
	|ГДЕ
	|	ЗаказПокупателяПредоплата.Ссылка В(&МассивЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДобавленныеНаборы.Заказ КАК Заказ,
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ИЗ
	|	ВТДобавленныеНаборы КАК ДобавленныеНаборы
	|ГДЕ
	|	ДобавленныеНаборы.НоменклатураНабора.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(МассивЗаказов, Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("РезервированиеЗапасов", ПолучитьФункциональнуюОпцию("РезервированиеЗапасов"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("ЗаказПокупателя,Номенклатура,Характеристика");
	
	// АвтоматическиеСкидки.
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		СкидкиНаценкиЗаказа = МассивРезультатов[2].Выгрузить();
		СкидкиНаценки.Очистить();
	КонецЕсли;
	// Конец АвтоматическиеСкидки.
	
	// Доставка
	Если ЗначениеЗаполнено(НоменклатураДоставки) И ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", НоменклатураДоставки);
		СтруктураДляПоиска.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		СтруктураДляПоиска.Вставить("ЗаказПокупателя", ДанныеЗаполнения);
		МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
		Если МассивСтрокОстатков.Количество() = 0 Тогда
			НоменклатураДоставки = Неопределено;
			СтоимостьДоставки = 0;
			СуммаНДСДоставки = 0;
		КонецЕсли;
	КонецЕсли; 
	// Конец Доставка
	
	// Наборы
	ПропускаемыеНаборы = Новый Массив;
	ВыборкаИсключаемыеНаборы = МассивРезультатов[6].Выбрать();
	Пока ВыборкаИсключаемыеНаборы.Следующий() Цикл
		ДобавитьОписаниеНабора(ПропускаемыеНаборы, ВыборкаИсключаемыеНаборы.Заказ, ВыборкаИсключаемыеНаборы.НоменклатураНабора, ВыборкаИсключаемыеНаборы.ХарактеристикаНабора);	
	КонецЦикла; 
	// Конец Наборы
	
	Запасы.Очистить();
	СерииНоменклатуры.Очистить();
	// Ключ связи нужно поменять, т.к. накладную можно вводить на основании сразу двух заказов.
	// В этом случае ключи связи могут дублироваться.
	ТекКлючСвязи = 0;
	
	Если ТаблицаОстатков.Количество() > 0 Тогда
		
		Выборка = МассивРезультатов[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Выборка.Заказ);
			СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
			Если Выборка.УчетПотребностиПоСкладам И ЗначениеЗаполнено(Выборка.СтруктурнаяЕдиница) Тогда
	  			СтруктураДляПоиска.Вставить("Склад", Выборка.СтруктурнаяЕдиница);
            КонецЕсли;
			
			МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
			Если МассивСтрокОстатков.Количество() = 0 И Выборка.УчетПотребностиПоСкладам Тогда
				// Попытка поиска остатка по другому складу
				СтруктураДляПоиска.Удалить("Склад");
				МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
			КонецЕсли; 
			Если МассивСтрокОстатков.Количество() = 0 Тогда
				// Наборы
				Если ЗначениеЗаполнено(Выборка.НоменклатураНабора) Тогда
					ДобавитьОписаниеНабора(ПропускаемыеНаборы, Выборка.Заказ, Выборка.НоменклатураНабора, Выборка.ХарактеристикаНабора);
				КонецЕсли;
				// Конец Наборы
				Продолжить;
			КонецЕсли;
			
			ОстатокКОтгрузке = Выборка.Количество;
			ОстатокСобрано = Выборка.КоличествоСобрано;
			
			Для каждого СтрокаОстаток Из МассивСтрокОстатков Цикл
				
				Если СтрокаОстаток.КоличествоОстаток = 0 Тогда
					Продолжить;	
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьСборкуЗаказов") И Выборка.ЕстьСборка Тогда
					Если Выборка.СтруктурнаяЕдиница = СтрокаОстаток.Склад Тогда
						УжеОтгружено = ОстатокКОтгрузке - СтрокаОстаток.КоличествоОстаток;
					Иначе
						УжеОтгружено = 0;
					КонецЕсли;
					СобраноНеОтгружено = ОстатокСобрано - ?(УжеОтгружено > 0, УжеОтгружено, 0);
					Если СобраноНеОтгружено > 0 Тогда
						ВыборкаКоличество = СобраноНеОтгружено;
					Иначе
						ВыборкаКоличество = 0;
						// Наборы
						Если ЗначениеЗаполнено(Выборка.НоменклатураНабора) Тогда
							ДобавитьОписаниеНабора(ПропускаемыеНаборы, Выборка.Заказ, Выборка.НоменклатураНабора, 
								Выборка.ХарактеристикаНабора);
						КонецЕсли;
						// Конец Наборы
						Продолжить;
					КонецЕсли;
				Иначе
					ВыборкаКоличество = ОстатокКОтгрузке;
				КонецЕсли;
				
				НоваяСтрока = Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				Если Выборка.УчетПотребностиПоСкладам Тогда
					НоваяСтрока.СтруктурнаяЕдиница = СтрокаОстаток.Склад;
				КонецЕсли;
				
				Если ПоложениеПроекта <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
					НоваяСтрока.Проект = Проект;
				КонецЕсли;
				
				ТекКлючСвязи = ТекКлючСвязи + 1;
				
				КоличествоКСписанию = Окр(ВыборкаКоличество * Выборка.Коэффициент, 3);
				СтрокаОстаток.КоличествоОстаток = СтрокаОстаток.КоличествоОстаток - КоличествоКСписанию;
				
				Если СтрокаОстаток.КоличествоОстаток < 0 ИЛИ ВыборкаКоличество <> ОстатокКОтгрузке Тогда
					
					// Наборы
					Если ЗначениеЗаполнено(Выборка.НоменклатураНабора) Тогда
						ДобавитьОписаниеНабора(ПропускаемыеНаборы, Выборка.Заказ, Выборка.НоменклатураНабора, 
							Выборка.ХарактеристикаНабора);
					КонецЕсли;
					// Конец Наборы
					
					Если СтрокаОстаток.КоличествоОстаток < 0 Тогда
						КоличествоКСписанию = Окр((КоличествоКСписанию + СтрокаОстаток.КоличествоОстаток) / Выборка.Коэффициент, 3);
						СтрокаОстаток.КоличествоОстаток = 0;
					Иначе
						КоличествоКСписанию = Окр(КоличествоКСписанию / Выборка.Коэффициент, 3);
					КонецЕсли;
					
					ДанныеСтроки = Новый Структура;
					ДанныеСтроки.Вставить("Количество", КоличествоКСписанию);
					ДанныеСтроки.Вставить("Цена", Выборка.Цена);
					ДанныеСтроки.Вставить("Сумма", 0);
					ДанныеСтроки.Вставить("ПроцентСкидкиНаценки", Выборка.ПроцентСкидкиНаценки);
					ДанныеСтроки.Вставить("СуммаСкидкиНаценки", 0);
					ДанныеСтроки.Вставить("СтавкаНДС", Выборка.СтавкаНДС);
					ДанныеСтроки.Вставить("СуммаНДС", 0);
					ДанныеСтроки.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
					ДанныеСтроки.Вставить("Всего", 0);
					ДанныеСтроки.Вставить("Вес", Выборка.ВесЕдиницыТовара * КоличествоКСписанию);
					ДанныеСтроки.Вставить("Объем", Выборка.ОбъемЕдиницыТовара * КоличествоКСписанию);
					
					ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
					
				КонецЕсли;
				
				// АвтоматическиеСкидки
				Если ИспользоватьАвтоматическиеСкидки Тогда
					КоличествоВЗаказе = Окр(ОстатокКОтгрузке * Выборка.Коэффициент, 3);
					ПересчитатьСуммы = КоличествоВЗаказе <> КоличествоКСписанию;
					КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, КоличествоКСписанию / КоличествоВЗаказе, 1);
					Если КоэффициентПересчетаСкидки <> 1 Тогда
						НоваяСтрока.СуммаАвтоматическойСкидки = ОКР(Выборка.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки,2);
					КонецЕсли;
					
					// Формирование табличной части скидок
					СуммаКРаспределению = НоваяСтрока.СуммаАвтоматическойСкидки;
					
					ЕстьСтрокаСкидки = Ложь;
					Если Выборка.КлючСвязи <> 0 Тогда
						Для Каждого СтрокаСкидкиЗаказа Из СкидкиНаценкиЗаказа.НайтиСтроки(Новый Структура("Заказ, КлючСвязи", Выборка.Заказ, Выборка.КлючСвязи)) Цикл
							
							СтрокаСкидки = СкидкиНаценки.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
							// Ключ связи нужно поменять, т.к. накладную можно вводить на основании сразу двух заказов.
							// В этом случае ключи связи могут дублироваться.
							СтрокаСкидки.КлючСвязи = ТекКлючСвязи;
							СтрокаСкидки.Сумма = КоэффициентПересчетаСкидки * СтрокаСкидки.Сумма;
							СуммаКРаспределению = СуммаКРаспределению - СтрокаСкидки.Сумма;
							ЕстьСтрокаСкидки = Истина;
							
						КонецЦикла;
					КонецЕсли;
					
					Если ЕстьСтрокаСкидки И СуммаКРаспределению <> 0 Тогда
						СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + СуммаКРаспределению;
					КонецЕсли;
					
					// Ключ связи нужно поменять, т.к. накладную можно вводить на основании сразу двух заказов.
					// В этом случае ключи связи могут дублироваться.
					НоваяСтрока.КлючСвязи = ТекКлючСвязи;
				КонецЕсли;
				// Конец АвтоматическиеСкидки
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиница) Тогда
					ЗначениеПоУмолчанию = Справочники.СтруктурныеЕдиницы.ОсновнойСклад();
					НоваяСтрока.СтруктурнаяЕдиница = ?(ЗначениеЗаполнено(СтруктурнаяЕдиница), СтруктурнаяЕдиница, ЗначениеПоУмолчанию);
				КонецЕсли;
				
				Если Выборка.СтруктурнаяЕдиницаЯчейки <> НоваяСтрока.СтруктурнаяЕдиница Тогда
					НоваяСтрока.Ячейка = Неопределено;
				КонецЕсли;
				
				ОстатокКОтгрузке = ОстатокКОтгрузке - КоличествоКСписанию;
				ОстатокСобрано = ОстатокСобрано - КоличествоКСписанию;
				Если ОстатокКОтгрузке <= 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Вес = Запасы.Итог("Вес");
	Объем = Запасы.Итог("Объем");
	
	// Наборы
	// Удаление неполных и неподходящих наборов
	Для каждого ОписаниеНабора Из ПропускаемыеНаборы Цикл
		УдаляемыеСтроки = Запасы.НайтиСтроки(ОписаниеНабора);
		Для каждого СтрокаЗапаса Из УдаляемыеСтроки Цикл
			Для Каждого СтрокаСкидки Из СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаЗапаса.КлючСвязи)) Цикл
				СкидкиНаценки.Удалить(СтрокаСкидки);
			КонецЦикла;
			Запасы.Удалить(СтрокаЗапаса);
		КонецЦикла; 
	КонецЦикла;
	
	ДобавленныеНаборы.Очистить();
	ВыборкаНаборы = МассивРезультатов[4].Выбрать();
	Пока ВыборкаНаборы.Следующий() Цикл
		Если ПропуститьНабор(ПропускаемыеНаборы, ВыборкаНаборы) Тогда
			Продолжить;
		КонецЕсли; 
		ДобавитьНаборы(ВыборкаНаборы);
	КонецЦикла; 
	// Конец Наборы
	
	// Заполнение резервов.
	Если Запасы.Количество() > 0
		И Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить()
		И ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		ЗаполнитьКолонкуРезервПоРезервам();
	КонецЕсли;
	
	// АвтоматическиеСкидки.
	Если ИспользоватьАвтоматическиеСкидки Тогда
		РезультатРасчетаСкидокНаценок = СкидкиНаценки.Выгрузить();
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(ЭтотОбъект, "Запасы", РезультатРасчетаСкидокНаценок);
	КонецЕсли;
	
	Ячейка = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Запасы, "Ячейка");
	Если ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти
		И ПолучитьФункциональнуюОпцию("РазрешитьСкладыВТабличныхЧастях") Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			Если СтрокаТабличнойЧасти.СтруктурнаяЕдиница<>СтруктурнаяЕдиница ИЛИ СтрокаТабличнойЧасти.Ячейка<>Ячейка Тогда
				ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	// Взаиморасчеты
	Предоплата.Очистить();
	Предоплата.Загрузить(МассивРезультатов[5].Выгрузить());
	
	Если ЗначениеЗаполнено(Договор) И Договор.ВидДоговора = Перечисления.ВидыДоговоров.СКомиссионером Тогда
		ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию;
	КонецЕсли;
	
	// Учет по УСН
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Организация, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Если СистемаНалогообложенияСтруктура.ПлательщикУСН Тогда
		Если СистемаНалогообложенияСтруктура.ПлательщикЕНВД Тогда
			УчитыватьВНУ = НЕ (Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВЕНВД);
		Иначе
			УчитыватьВНУ = Истина;
		КонецЕсли;
	Иначе
		УчитыватьВНУ = Ложь;
	КонецЕсли; 
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ПеренестиСерииНоменклатуры(ДанныеЗаполнения.СерииНоменклатуры, ДанныеЗаполнения.Запасы);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказПокупателя()

// Обработчик заполнения документа на основании Заказа поставщику.
//
// Параметры:
//  ЗаказПоставщику - ДокументСсылка.ЗаказПоставщику.
//
Процедура ЗаполнитьПоЗаказуПоставщику(ЗаказПоставщику) Экспорт
	
	Если УправлениеНебольшойФирмойПовтИсп.РеквизитВШапке("ПоложениеЗаказаПокупателяВДокументахОтгрузки") Тогда
		Заказ = ЗаказПоставщику.Ссылка;
	Иначе
		Заказ = Неопределено;
	КонецЕсли;
	
	// Заполнение шапки.
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказПоставщику,
	"Организация, ВидОперации, СтруктурнаяЕдиницаРезерв, Контрагент, Договор, ВалютаДокумента, НалогообложениеНДС, СуммаВключаетНДС, НДСВключатьВСтоимость, Курс, Кратность, СостояниеЗаказа, Проведен");
	
	Документы.ЗаказПоставщику.ПроверитьВозможностьВводаНаОснованииЗаказаПоставщику(ЗаказПоставщику, ЗначенияРеквизитов);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов, "Организация, Контрагент, Договор, ВалютаДокумента, НалогообложениеНДС, СуммаВключаетНДС, НДСВключатьВСтоимость, Курс, Кратность");
	ДокументОснование = ЗаказПоставщику;
	
	Если НЕ ВалютаДокумента = Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(?(ЗначениеЗаполнено(Дата), Дата,
			ТекущаяДатаСеанса()), Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	// Заполнение табличной части.
	Запасы.Очистить();
	СерииНоменклатуры.Очистить();
	Если ЗаказПоставщику.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку Тогда
		ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку;
		СтруктурнаяЕдиница = ЗначенияРеквизитов.СтруктурнаяЕдиницаРезерв;
		Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
			СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновнойСклад");
		КонецЕсли; 
		НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , ?(ЗначениеЗаполнено(Дата), Дата,
			ТекущаяДатаСеанса()));
		ЗаполнитьПоЗаказПоставщикуНаПереработку(ЗаказПоставщику);
	Иначе
		ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику;
		ЗаполнитьПоЗаказПоставщикуНаЗакупку(ЗаказПоставщику);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказПоставщику()

// Процедура заполнения документа на основании заказа поставщику.
//
// Параметры:
//  ДанныеЗаполнения - Структура - Данные заполнения документа
//
Процедура ЗаполнитьПоЗаказПоставщикуНаПереработку(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса())) +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(ЗаказыОстатки.НомерСтроки) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЗаказыОстатки.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипНоменклатурыЗапас,
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТСтавкиНДСНоменклатура.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА ВТСтавкиНДСОрганизация.СтавкаНДС
	|		ИНАЧЕ ВТСтавкиНДСНоменклатура.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	ЗаказыОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказыОстатки.Заказ КАК Заказ,
	|	ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗаказыОстатки.Количество) КАК Количество,
	|	СУММА(ЗаказыОстатки.Резерв) КАК Резерв
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПоставщикуМатериалы.НомерСтроки КАК НомерСтроки,
	|		ЗаказПоставщикуМатериалы.Номенклатура КАК Номенклатура,
	|		ЗаказПоставщикуМатериалы.Характеристика КАК Характеристика,
	|		ЗаказПоставщикуМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказПоставщикуМатериалы.Ссылка КАК Заказ,
	|		ЗаказПоставщикуМатериалы.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗаказПоставщикуМатериалы.Количество КАК Количество,
	|		ЗаказПоставщикуМатериалы.Резерв КАК Резерв
	|	ИЗ
	|		Документ.ЗаказПоставщику.Материалы КАК ЗаказПоставщикуМатериалы
	|	ГДЕ
	|		ЗаказПоставщикуМатериалы.Ссылка = &ДокументОснование
	|		И ЗаказПоставщикуМатериалы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриходнаяНакладнаяЗапасы.НомерСтроки,
	|		ПриходнаяНакладнаяЗапасы.Номенклатура,
	|		ПриходнаяНакладнаяЗапасы.Характеристика,
	|		ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
	|		ПриходнаяНакладнаяЗапасы.Заказ,
	|		ПриходнаяНакладнаяЗапасы.ЗаказПокупателя,
	|		ПриходнаяНакладнаяЗапасы.Количество,
	|		ВЫБОР
	|			КОГДА ПриходнаяНакладнаяЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				ТОГДА ПриходнаяНакладнаяЗапасы.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|	ГДЕ
	|		ПриходнаяНакладнаяЗапасы.Ссылка.Проведен
	|		И ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|		И ПриходнаяНакладнаяЗапасы.Заказ = &ДокументОснование
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасходнаяНакладнаяЗапасы.НомерСтроки,
	|		РасходнаяНакладнаяЗапасы.Номенклатура,
	|		РасходнаяНакладнаяЗапасы.Характеристика,
	|		РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
	|		РасходнаяНакладнаяЗапасы.Заказ,
	|		РасходнаяНакладнаяЗапасы.ЗаказПокупателя,
	|		-РасходнаяНакладнаяЗапасы.Количество,
	|		-РасходнаяНакладнаяЗапасы.Резерв
	|	ИЗ
	|		Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|	ГДЕ
	|		РасходнаяНакладнаяЗапасы.Ссылка.Проведен
	|		И РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|		И РасходнаяНакладнаяЗапасы.Заказ = &ДокументОснование
	|		И НЕ РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка) КАК ЗаказыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДСНоменклатура
	|		ПО ЗаказыОстатки.Номенклатура.ВидСтавкиНДС = ВТСтавкиНДСНоменклатура.ВидСтавкиНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДСОрганизация
	|		ПО ЗаказыОстатки.Заказ.Организация.ВидСтавкиНДСПоУмолчанию = ВТСтавкиНДСОрганизация.ВидСтавкиНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЗаказыОстатки.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЗаказыОстатки.Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТСтавкиНДСНоменклатура.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА ВТСтавкиНДСОрганизация.СтавкаНДС
	|		ИНАЧЕ ВТСтавкиНДСНоменклатура.СтавкаНДС
	|	КОНЕЦ,
	|	ЗаказыОстатки.Характеристика,
	|	ЗаказыОстатки.ЕдиницаИзмерения,
	|	ЗаказыОстатки.Заказ,
	|	ЗаказыОстатки.ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура.СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА ЗаказыОстатки.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.Количество) > 0";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			Если НоваяСтрока.Резерв < 0 ИЛИ НЕ ЗначениеЗаполнено(НоваяСтрока.ЗаказПокупателя) Тогда
				НоваяСтрока.Резерв = 0;
			КонецЕсли; 
			НоваяСтрока.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			
			Если НЕ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
				
				Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
				Иначе
					НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				НоваяСтрока.Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ЗаказПокупателя, "Проект");
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
		
	// Заполнение резервов.
	Если Запасы.Количество() > 0
		И Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить()
		И ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		ЗаполнитьКолонкуРезервПоРезервам();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказПоставщикуНаПереработку()

// Процедура заполнения документа на основании заказа поставщику.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоЗаказПоставщикуНаЗакупку(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				,
	|				ЗаказПоставщику = &ДокументОснование
	|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗаказыПоставщикам.Номенклатура,
	|		ДвиженияДокументаЗаказыПоставщикам.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗаказыПоставщикам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗаказыПоставщикам.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗаказыПоставщикам.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам КАК ДвиженияДокументаЗаказыПоставщикам
	|	ГДЕ
	|		ДвиженияДокументаЗаказыПоставщикам.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗаказыПоставщикам.ЗаказПоставщику = &ДокументОснование) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПоставщикуЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПоставщикуЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщикуЗапасы.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипНоменклатурыЗапас,
	|	ЗаказПоставщикуЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПоставщикуЗапасы.Количество КАК Количество,
	|	ЗаказПоставщикуЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПоставщикуЗапасы.Цена КАК Цена,
	|	ЗаказПоставщикуЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ЗаказПоставщикуЗапасы.Сумма КАК Сумма,
	|	ЗаказПоставщикуЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПоставщикуЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПоставщикуЗапасы.Всего КАК Всего,
	|	ЗаказПоставщикуЗапасы.Содержание КАК Содержание,
	|	ЗаказПоставщикуЗапасы.Ссылка КАК Заказ,
	|	ВЫБОР
	|		КОГДА НЕ РезервированиеЗапасов.Значение
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОГДА ЗаказПоставщикуЗапасы.Ссылка.ПоложениеЗаказаПокупателя = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА ЗаказПоставщикуЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.Ссылка.ЗаказПокупателя
	|	КОНЕЦ КАК ЗаказПокупателя
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК РезервированиеЗапасов
	|ГДЕ
	|	ЗаказПоставщикуЗапасы.Ссылка = &ДокументОснование
	|	И ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("Номенклатура,Характеристика");
	
	Выборка = МассивРезультатов[1].Выбрать();
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		
		МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
		Если МассивСтрокОстатков.Количество() = 0 Тогда
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
		ИначеЕсли (МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент) = Выборка.Количество Тогда
			
			МассивСтрокОстатков[0].КоличествоОстаток = 0;
			Продолжить;
			
		ИначеЕсли (МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент) > Выборка.Количество Тогда
			
			МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - Выборка.Количество * Выборка.Коэффициент;
			Продолжить;
			
		ИначеЕсли (МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент) < Выборка.Количество Тогда
			
			КоличествоКСписанию = -1 * (МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент - Выборка.Количество);
			МассивСтрокОстатков[0].КоличествоОстаток = 0;
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					
			ДанныеСтроки = Новый Структура;
			ДанныеСтроки.Вставить("Количество", КоличествоКСписанию);
			ДанныеСтроки.Вставить("Цена", Выборка.Цена);
			ДанныеСтроки.Вставить("Сумма", 0);
			ДанныеСтроки.Вставить("СтавкаНДС", Выборка.СтавкаНДС);
			ДанныеСтроки.Вставить("СуммаНДС", 0);
			ДанныеСтроки.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
			ДанныеСтроки.Вставить("Всего", 0);
			ДанныеСтроки.Вставить("ПроцентСкидкиНаценки", Выборка.ПроцентСкидкиНаценки);
			ДанныеСтроки.Вставить("СуммаСкидкиНаценки", 0);
			
			ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиница) Тогда
			НоваяСтрока.СтруктурнаяЕдиница = ?(ЗначениеЗаполнено(СтруктурнаяЕдиница), СтруктурнаяЕдиница, ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновнойСклад"));
		КонецЕсли; 
		
		Если ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			НоваяСтрока.Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ЗаказПокупателя, "Проект");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоЗаказПоставщикуНаЗакупку()

// Процедура заполнения документа на основании приходной накладной.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.ПриходнаяНакладная - приходная накладная
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоСчетуНаОплату(ДанныеЗаполнения) Экспорт
	
	ВидОперации			 = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
	ЗаказВТабличнойЧасти = НЕ УправлениеНебольшойФирмойПовтИсп.РеквизитВШапке("ПоложениеЗаказаПокупателяВДокументахОтгрузки");	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетНаОплату", ДанныеЗаполнения);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК ДокументОснование,
	|	СчетНаОплату.Организация КАК Организация,
	|	СчетНаОплату.БанковскийСчет КАК БанковскийСчет,
	|	СчетНаОплату.Контрагент КАК Контрагент,
	|	СчетНаОплату.Договор КАК Договор,
	|	СчетНаОплату.ВидЦен КАК ВидЦен,
	|	СчетНаОплату.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	СчетНаОплату.ВалютаДокумента КАК ВалютаДокумента,
	|	СчетНаОплату.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СчетНаОплату.НалогообложениеНДС КАК НалогообложениеНДС,
	|	СчетНаОплату.ОснованиеПечатиСсылка КАК ОснованиеПечатиСсылка,
	|	СчетНаОплату.ОснованиеПечати КАК ОснованиеПечати,
	|	СчетНаОплату.Курс КАК Курс,
	|	СчетНаОплату.Кратность КАК Кратность,
	|	СчетНаОплату.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	СчетНаОплату.ПроцентСкидкиПоДисконтнойКарте КАК ПроцентСкидкиПоДисконтнойКарте,
	|	СчетНаОплату.НоменклатураДоставки КАК НоменклатураДоставки,
	|	СчетНаОплату.СтоимостьДоставки КАК СтоимостьДоставки,
	|	СчетНаОплату.СтавкаНДСДоставки КАК СтавкаНДСДоставки,
	|	СчетНаОплату.СуммаНДСДоставки КАК СуммаНДСДоставки,
	|	СчетНаОплату.Вес КАК Вес,
	|	СчетНаОплату.Объем КАК Объем,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.ДокументОснование ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА СчетНаОплату.ДокументОснование
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя
	|ИЗ
	|	Документ.СчетНаОплату КАК СчетНаОплату
	|ГДЕ
	|	СчетНаОплату.Ссылка = &СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетНаОплатуЗапасы.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуЗапасы.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуЗапасы.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СчетНаОплатуЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СчетНаОплатуЗапасы.ТипНоменклатурыЗапас КАК ТипНоменклатурыЗапас,
	|	СчетНаОплатуЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	СчетНаОплатуЗапасы.Количество КАК Количество,
	|	СчетНаОплатуЗапасы.Партия КАК Партия,
	|	СчетНаОплатуЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СчетНаОплатуЗапасы.Цена КАК Цена,
	|	СчетНаОплатуЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	СчетНаОплатуЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	СчетНаОплатуЗапасы.Сумма КАК Сумма,
	|	СчетНаОплатуЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуЗапасы.СуммаНДС КАК СуммаНДС,
	|	СчетНаОплатуЗапасы.Всего КАК Всего,
	|	СчетНаОплатуЗапасы.Содержание КАК Содержание,
	|	СчетНаОплатуЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	СчетНаОплатуЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	СчетНаОплатуЗапасы.КлючСвязи КАК КлючСвязи,
	|	СчетНаОплатуЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки1,
	|	СчетНаОплатуЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки1,
	|	СчетНаОплатуЗапасы.Вес КАК Вес,
	|	СчетНаОплатуЗапасы.Объем КАК Объем,
	|	СчетНаОплатуЗапасы.Номенклатура.Склад КАК СтруктурнаяЕдиница,
	|	СчетНаОплатуЗапасы.Номенклатура.Ячейка КАК Ячейка,
	|	СчетНаОплатуЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	СчетНаОплатуЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	СчетНаОплатуЗапасы.ДоляСтоимости КАК ДоляСтоимости
	|ИЗ
	|	ВТСчетНаОплатуЗапасы КАК СчетНаОплатуЗапасы
	|ГДЕ
	|	(СчетНаОплатуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ СчетНаОплатуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ИЛИ СчетНаОплатуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНаценки.Ссылка КАК Заказ,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК Сумма
	|ИЗ
	|	Документ.СчетНаОплату.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка = &СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ПОМЕСТИТЬ ВТДобавленныеНаборы
	|ИЗ
	|	Документ.СчетНаОплату.ДобавленныеНаборы КАК ДобавленныеНаборы
	|ГДЕ
	|	ДобавленныеНаборы.Ссылка = &СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ИЗ
	|	ВТДобавленныеНаборы КАК ДобавленныеНаборы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ИЗ
	|	ВТДобавленныеНаборы КАК ДобавленныеНаборы
	|ГДЕ
	|	ДобавленныеНаборы.НоменклатураНабора.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	Документы.СчетНаОплату.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(ДанныеЗаполнения, Запрос.МенеджерВременныхТаблиц, Ложь);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Заполнение шапки	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) 
		И ЗначениеЗаполнено(Организация) Тогда
		БанковскийСчет = Организация.БанковскийСчетПоУмолчанию;
	КонецЕсли;
		 
	Если ВалютаДокумента<>Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс		= СтруктураПоВалюте.Курс;
		Кратность	= СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	ЗаказПокупателяДляЗаполнения = ВыборкаШапка.ЗаказПокупателя;
	Если НЕ ЗаказВТабличнойЧасти Тогда
		Заказ = ЗаказПокупателяДляЗаполнения;
	КонецЕсли;
	
	// Наборы
	ПропускаемыеНаборы = Новый Массив;
	ВыборкаИсключаемыеНаборы = МассивРезультатов[5].Выбрать();
	Пока ВыборкаИсключаемыеНаборы.Следующий() Цикл
		ДобавитьОписаниеНабора(ПропускаемыеНаборы, , ВыборкаИсключаемыеНаборы.НоменклатураНабора, ВыборкаИсключаемыеНаборы.ХарактеристикаНабора);	
	КонецЦикла; 
	// Конец Наборы
	
	// Заполнение табличной части документа.
	Запасы.Очистить();
	СерииНоменклатуры.Очистить();
	ВыборкаЗапасы = МассивРезультатов[1].Выбрать();
	Пока ВыборкаЗапасы.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаЗапасы.НоменклатураНабора) 
			И ПропуститьНабор(ПропускаемыеНаборы, ВыборкаЗапасы) Тогда
			Продолжить;
		КонецЕсли; 
			
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы, , "СтранаПроисхождения, СтруктурнаяЕдиница, Ячейка");
		
		Если ЗаказВТабличнойЧасти Тогда
			НоваяСтрока.Заказ = ЗаказПокупателяДляЗаполнения;
		КонецЕсли;
		
		Если ВыборкаЗапасы.ТипНоменклатурыЗапас Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы, "СтранаПроисхождения, СтруктурнаяЕдиница, Ячейка");
			
		КонецЕсли;
			
	КонецЦикла;
	
	// АвтоматическиеСкидки
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		СкидкиРассчитаны = Истина;
		СкидкиНаценки.Очистить();
		ВыборкаСкидки = МассивРезультатов[2].Выбрать();
		Пока ВыборкаСкидки.Следующий() Цикл
			Если Запасы.Найти(ВыборкаСкидки.КлючСвязи, "КлючСвязи") <> Неопределено Тогда
				НоваяСтрокаСкидкиНаценки = СкидкиНаценки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСкидкиНаценки, ВыборкаСкидки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Наборы
	ДобавленныеНаборы.Очистить();
	ВыборкаНаборы = МассивРезультатов[4].Выбрать();
	Пока ВыборкаНаборы.Следующий() Цикл
		Если ПропуститьНабор(ПропускаемыеНаборы, ВыборкаНаборы) Тогда
			Продолжить;
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(ДобавленныеНаборы.Добавить(), ВыборкаНаборы);
	КонецЦикла; 
	// Конец Наборы
	
КонецПроцедуры // ЗаполнитьПоСчетНаОплату()

// Обработчик заполнения на основании ПеремещениеЗапасов.
//
// Параметры:
//  ДанныеЗаполнения - Структура, ДокументСсылка.ПеремещениеЗапасов - Основание для заполнения документа.
//
Процедура ЗаполнитьПоПеремещениюЗапасов(ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("ДокументСсылка.ПеремещениеЗапасов") Тогда
		Возврат;
	КонецЕсли;
	
	// Если перемещение введено на основании заказа покупателя, заполняем расходную накладную на основании этого заказа, но
	// со складом-получателем перемещения
	ТабЗаказов = ДанныеЗаполнения.Запасы.Выгрузить(, "ЗаказПокупателя");
	ТабЗаказов.Свернуть("ЗаказПокупателя");
	Если ТабЗаказов.Количество() = 1 И ЗначениеЗаполнено(ТабЗаказов[0].ЗаказПокупателя) Тогда
		ОдинЗаказПокупателяВСтроках = Истина;
	Иначе
		ОдинЗаказПокупателяВСтроках = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения.ЗаказПокупателя) ИЛИ (НЕ ОдинЗаказПокупателяВСтроках) Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.СтруктурнаяЕдиницаПолучатель КАК СтруктурнаяЕдиница,
		|	ТаблицаДокумента.ЯчейкаПолучатель КАК Ячейка,
		|	ТаблицаДокумента.Запасы.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		ВЫБОР
		|			КОГДА ТаблицаДокумента.Запасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ТипНоменклатурыЗапас,
		|		Характеристика КАК Характеристика,
		|		Партия КАК Партия,
		|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Количество КАК Количество,
		|		Резерв КАК Резерв,
		|		ЗаказПокупателя КАК ЗаказПокупателя,
		|		СерииНоменклатуры КАК СерииНоменклатуры,
		|		КлючСвязи КАК КлючСвязи
		|	) КАК Запасы
		|ИЗ
		|	Документ.ПеремещениеЗапасов КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
		Запасы.Загрузить(Выборка.Запасы.Выгрузить());
		
		СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения);
		
	Иначе
		
		// Заполнение шапки.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказПокупателя.Ссылка КАК Заказ,
		|	ЗаказПокупателя.Ссылка КАК ОснованиеСсылка,
		|	&ДокументСсылкаПеремещениеЗапасов КАК ДокументОснование,
		|	ЗаказПокупателя.Проведен КАК ОснованиеПроведен,
		|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
		|	ЗаказПокупателя.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.БанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
		|			ТОГДА ЗаказПокупателя.Организация.БанковскийСчетПоУмолчанию
		|		ИНАЧЕ ЗаказПокупателя.БанковскийСчет
		|	КОНЕЦ КАК БанковскийСчет,
		|	ЗаказПокупателя.ПоложениеСклада КАК ПоложениеСклада,
		|	ВЫБОР
		|		КОГДА РезервированиеЗапасов.Значение
		|			ТОГДА ЗаказПокупателя.СтруктурнаяЕдиницаРезерв
		|	КОНЕЦ КАК СтруктурнаяЕдиницаОтправитель,
		|	&СкладПолучатель КАК СтруктурнаяЕдиница,
		|	ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ЗаказПокупателя.Договор КАК Договор,
		|	ЗаказПокупателя.ВидЦен КАК ВидЦен,
		|	ЗаказПокупателя.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
		|	ЗаказПокупателя.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ЗаказПокупателя.ПроцентСкидкиПоДисконтнойКарте КАК ПроцентСкидкиПоДисконтнойКарте,
		|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
		|	ЗаказПокупателя.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ЗаказПокупателя.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.ВалютаДокумента = НациональнаяВалюта.Значение
		|			ТОГДА ЗаказПокупателя.Курс
		|		ИНАЧЕ КурсыВалютСрезПоследних.Курс
		|	КОНЕЦ КАК Курс,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.ВалютаДокумента = НациональнаяВалюта.Значение
		|			ТОГДА ЗаказПокупателя.Кратность
		|		ИНАЧЕ КурсыВалютСрезПоследних.Кратность
		|	КОНЕЦ КАК Кратность
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
		|		ПО ЗаказПокупателя.Договор.ВалютаРасчетов = КурсыВалютСрезПоследних.Валюта},
		|	Константа.НациональнаяВалюта КАК НациональнаяВалюта,
		|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК РезервированиеЗапасов
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &ЗаказВПеремещенииЗапасов";
		
		Запрос.УстановитьПараметр("ЗаказВПеремещенииЗапасов", ДанныеЗаполнения.ЗаказПокупателя);
		Запрос.УстановитьПараметр("СкладПолучатель", ДанныеЗаполнения.СтруктурнаяЕдиницаПолучатель);
		Запрос.УстановитьПараметр("ДокументСсылкаПеремещениеЗапасов", ДанныеЗаполнения);
		Запрос.УстановитьПараметр("ДатаДокумента", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗначенияПроверяемыхРеквизитов = Новый Структура("СостояниеЗаказа, Проведен", Выборка.СостояниеЗаказа, Выборка.ОснованиеПроведен);
			Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(Выборка.ОснованиеСсылка, ЗначенияПроверяемыхРеквизитов);
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
		Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
			ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойСклад");
			Если НЕ ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение табличной части.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыОстатки.Характеристика КАК Характеристика,
		|	СУММА(ВЫБОР
		|			КОГДА ЗаказыОстатки.КоличествоОстаток - ПеремещениеКоличество.Количество >= 0
		|				ТОГДА ПеремещениеКоличество.Количество
		|			ИНАЧЕ ЗаказыОстатки.КоличествоОстаток
		|		КОНЕЦ) КАК КоличествоОстаток,
		|	ЗаказыОстатки.КоличествоОстаток КАК ЗаказыОстаток,
		|	ПеремещениеКоличество.Количество КАК ПеремещениеОстаток
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПеремещениеЗапасовЗапасы.Номенклатура КАК Номенклатура,
		|		ПеремещениеЗапасовЗапасы.Характеристика КАК Характеристика,
		|		СУММА(ПеремещениеЗапасовЗапасы.Количество) КАК Количество,
		|		ПеремещениеЗапасовЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
		|	ИЗ
		|		Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
		|	ГДЕ
		|		ПеремещениеЗапасовЗапасы.Ссылка = &Перемещение
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПеремещениеЗапасовЗапасы.Номенклатура,
		|		ПеремещениеЗапасовЗапасы.Характеристика,
		|		ПеремещениеЗапасовЗапасы.ЗаказПокупателя) КАК ПеремещениеКоличество
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		|			ЗаказыОстатки.Номенклатура КАК Номенклатура,
		|			ЗаказыОстатки.Характеристика КАК Характеристика,
		|			ЗаказыОстатки.КоличествоОстаток КАК КоличествоОстаток
		|		ИЗ
		|			РегистрНакопления.ЗаказыПокупателей.Остатки(
		|					,
		|					ЗаказПокупателя = &ЗаказПокупателя
		|						И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК ЗаказыОстатки
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ДвиженияДокументаЗаказыПокупателей.ЗаказПокупателя,
		|			ДвиженияДокументаЗаказыПокупателей.Номенклатура,
		|			ДвиженияДокументаЗаказыПокупателей.Характеристика,
		|			ВЫБОР
		|				КОГДА ДвиженияДокументаЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					ТОГДА ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
		|				ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
		|			КОНЕЦ
		|		ИЗ
		|			РегистрНакопления.ЗаказыПокупателей КАК ДвиженияДокументаЗаказыПокупателей
		|		ГДЕ
		|			ДвиженияДокументаЗаказыПокупателей.Регистратор = &Ссылка) КАК ЗаказыОстатки
		|		ПО ПеремещениеКоличество.Номенклатура = ЗаказыОстатки.Номенклатура
		|			И ПеремещениеКоличество.Характеристика = ЗаказыОстатки.Характеристика
		|			И ПеремещениеКоличество.ЗаказПокупателя = ЗаказыОстатки.ЗаказПокупателя
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыОстатки.ЗаказПокупателя,
		|	ЗаказыОстатки.Номенклатура,
		|	ЗаказыОстатки.Характеристика,
		|	ЗаказыОстатки.КоличествоОстаток,
		|	ПеремещениеКоличество.Количество
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
		|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
		|	ЗаказПокупателяЗапасы.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТипНоменклатурыЗапас,
		|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
		|			ТОГДА 1
		|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Коэффициент,
		|	ЗаказПокупателяЗапасы.Количество КАК Количество,
		|	ЗаказПокупателяЗапасы.Партия КАК Партия,
		|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказПокупателяЗапасы.Цена КАК Цена,
		|	ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	ЗаказПокупателяЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
		|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
		|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
		|	ЗаказПокупателяЗапасы.Всего КАК Всего,
		|	ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
		|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
		|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	ЗаказПокупателяЗапасы.КлючСвязи КАК КлючСвязи,
		|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки1,
		|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки1
		|ИЗ
		|	ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
		|ГДЕ
		|	(ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СкидкиНаценки.Ссылка КАК Заказ,
		|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
		|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
		|	СкидкиНаценки.Сумма КАК Сумма
		|ИЗ
		|	Документ.ЗаказПокупателя.СкидкиНаценки КАК СкидкиНаценки
		|ГДЕ
		|	СкидкиНаценки.Ссылка = &ЗаказПокупателя";
		
		Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(ДанныеЗаполнения.ЗаказПокупателя, Запрос.МенеджерВременныхТаблиц, Ложь);
		Запрос.УстановитьПараметр("ЗаказПокупателя", ДанныеЗаполнения.ЗаказПокупателя);
		Запрос.УстановитьПараметр("Перемещение", ДанныеЗаполнения);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
		ТаблицаОстатков.Индексы.Добавить("ЗаказПокупателя,Номенклатура,Характеристика");
		
		// АвтоматическиеСкидки.
		ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
		Если ИспользоватьАвтоматическиеСкидки Тогда
			СкидкиНаценкиЗаказа = МассивРезультатов[2].Выгрузить();
			СкидкиНаценки.Очистить();
		КонецЕсли;
		// Конец АвтоматическиеСкидки.
		
		Запасы.Очистить();
		СерииНоменклатуры.Очистить();
		Если ТаблицаОстатков.Количество() > 0 Тогда
			
			Выборка = МассивРезультатов[1].Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СтруктураДляПоиска = Новый Структура;
				СтруктураДляПоиска.Вставить("ЗаказПокупателя", Выборка.Заказ);
				СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
				СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
				
				МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
				Если МассивСтрокОстатков.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
				КоличествоКСписанию = Выборка.Количество * Выборка.Коэффициент;
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоКСписанию;
				Если МассивСтрокОстатков[0].КоличествоОстаток < 0 Тогда
					
					КоличествоКСписанию = (КоличествоКСписанию + МассивСтрокОстатков[0].КоличествоОстаток) / Выборка.Коэффициент;
					
					ДанныеСтроки = Новый Структура;
					ДанныеСтроки.Вставить("Количество", КоличествоКСписанию);
					ДанныеСтроки.Вставить("Цена", Выборка.Цена);
					ДанныеСтроки.Вставить("Сумма", 0);
					ДанныеСтроки.Вставить("ПроцентСкидкиНаценки", Выборка.ПроцентСкидкиНаценки);
					ДанныеСтроки.Вставить("СуммаСкидкиНаценки", 0);
					ДанныеСтроки.Вставить("СтавкаНДС", Выборка.СтавкаНДС);
					ДанныеСтроки.Вставить("СуммаНДС", 0);
					ДанныеСтроки.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
					ДанныеСтроки.Вставить("Всего", 0);
					ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
						
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
					
				КонецЕсли;
				
				
				// АвтоматическиеСкидки
				Если ИспользоватьАвтоматическиеСкидки Тогда
					КоличествоВДокументе = Выборка.Количество * Выборка.Коэффициент;
					ПересчитатьСуммы = КоличествоВДокументе <> КоличествоКСписанию;
					КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, КоличествоКСписанию / КоличествоВДокументе, 1);
					Если КоэффициентПересчетаСкидки <> 1 Тогда
						НоваяСтрока.СуммаАвтоматическойСкидки = ОКР(Выборка.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки,2);
					КонецЕсли;
					
					// Формирование табличной части скидок
					СуммаКРаспределению = НоваяСтрока.СуммаАвтоматическойСкидки;
					
					ЕстьСтрокаСкидки = Ложь;
					Если Выборка.КлючСвязи <> 0 Тогда
						Для Каждого СтрокаСкидкиЗаказа Из СкидкиНаценкиЗаказа.НайтиСтроки(Новый Структура("Заказ,КлючСвязи", Выборка.Заказ, Выборка.КлючСвязи)) Цикл
							
							СтрокаСкидки = СкидкиНаценки.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
							СтрокаСкидки.Сумма = КоэффициентПересчетаСкидки * СтрокаСкидки.Сумма;
							СуммаКРаспределению = СуммаКРаспределению - СтрокаСкидки.Сумма;
							ЕстьСтрокаСкидки = Истина;
							
						КонецЦикла;
					КонецЕсли;
					
					Если ЕстьСтрокаСкидки И СуммаКРаспределению <> 0 Тогда
						СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + СуммаКРаспределению;
					КонецЕсли;
				КонецЕсли;
				// Конец АвтоматическиеСкидки
				
				Если МассивСтрокОстатков[0].КоличествоОстаток <= 0 Тогда
					ТаблицаОстатков.Удалить(МассивСтрокОстатков[0]);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Заполнение резервов.
		Если Запасы.Количество() > 0
			И Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить()
			И ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
			ЗаполнитьКолонкуРезервПоРезервам();
		КонецЕсли;
		
		// АвтоматическиеСкидки.
		Если ИспользоватьАвтоматическиеСкидки Тогда
			РезультатРасчетаСкидокНаценок = СкидкиНаценки.Выгрузить();
			СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(ЭтотОбъект, "Запасы", РезультатРасчетаСкидокНаценок);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
	КонецЕсли;
	
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);

КонецПроцедуры // ЗаполнитьПоПеремещениюЗапасов()

// Обработчик заполнения на основании СборкаЗапасов.
//
// Параметры:
//  ДанныеЗаполнения - ДокументСсылка.СборкаЗапасов - Основание для заполнения документа.
//
Процедура ЗаполнитьПоСборкеЗапасов(ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("ДокументСсылка.СборкаЗапасов") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения,
		"ВидОперации, ПоложениеЗаказаПокупателя, ЗаказПокупателя, Организация, СтруктурнаяЕдиницаПродукции, СтруктурнаяЕдиницаПродукции.ТипСтруктурнойЕдиницы, ЯчейкаПродукции");
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.ПоложениеЗаказаПокупателя) Тогда
		ПоложениеЗаказаПокупателя = ЗначенияРеквизитов.ПоложениеЗаказаПокупателя;
		Если ПоложениеЗаказаПокупателя <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			Заказ = ЗначенияРеквизитов.ЗаказПокупателя;
		КонецЕсли; 
	ИначеЕсли УправлениеНебольшойФирмойПовтИсп.РеквизитВШапке("ПоложениеЗаказаПокупателяВДокументахОтгрузки") Тогда
		Заказ = ЗначенияРеквизитов.ЗаказПокупателя;
	Иначе
		Заказ = Неопределено;
	КонецЕсли;
	
	ДокументОснование = ДанныеЗаполнения;
	Организация = ЗначенияРеквизитов.Организация;
	ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , Дата);
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.СтруктурнаяЕдиницаПродукции) 
		И ЗначенияРеквизитов.СтруктурнаяЕдиницаПродукцииТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		СтруктурнаяЕдиница = ЗначенияРеквизитов.СтруктурнаяЕдиницаПродукции;
		Ячейка = ЗначенияРеквизитов.ЯчейкаПродукции;
	Иначе
		СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.ЗаказПокупателя) И ПоложениеЗаказаПокупателя <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗначенияРеквизитов.ЗаказПокупателя, "Контрагент, Договор, ВидЦен, ВалютаДокумента, СуммаВключаетНДС, НДСВключатьВСтоимость, Курс, Кратность, НалогообложениеНДС");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
	Иначе
		ВидЦен = Справочники.ВидыЦен.Оптовая;
		ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
		КурсДокумента = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(, Новый Структура("Валюта", ВалютаДокумента));
		Курс = КурсДокумента.Курс;
		Кратность = КурсДокумента.Кратность;
		СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидЦен, "ЦенаВключаетНДС", Истина);
		НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , Дата);
	КонецЕсли; 
	
	ЗаполнятьРезерв = ЗначениеЗаполнено(ЗначенияРеквизитов.ЗаказПокупателя) И ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	
	// Заполнение табличной части документа.
	Запасы.Очистить();
	СерииНоменклатуры.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	Запрос.Текст = Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса())) +
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТСтавкиНДСНоменклатура.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА ВТСтавкиНДСОрганизация.СтавкаНДС
	|		ИНАЧЕ ВТСтавкиНДСНоменклатура.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Партия КАК Партия,
	|	ТабличнаяЧасть.СерииНоменклатуры КАК СерииНоменклатуры,
	|	ТабличнаяЧасть.Количество КАК Количество,
	|	ТабличнаяЧасть.Резерв КАК Резерв,
	|	ТабличнаяЧасть.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабличнаяЧасть.Спецификация КАК Спецификация,
	|	ТабличнаяЧасть.КлючСвязи КАК КлючСвязи,
	|	ТабличнаяЧасть.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТабличнаяЧасть.НомерГТД КАК НомерГТД,
	|	ТабличнаяЧасть.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТабличнаяЧасть.Ячейка КАК Ячейка,
	|	ТабличнаяЧасть.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТабличнаяЧасть.Ссылка.ЗаказПокупателя КАК ЗаказПокупателяШапки
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДСНоменклатура
	|		ПО (ТабличнаяЧасть.Номенклатура.ВидСтавкиНДС  = ВТСтавкиНДСНоменклатура.ВидСтавкиНДС)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДСОрганизация
	|		ПО (ТабличнаяЧасть.Ссылка.Организация.ВидСтавкиНДСПоУмолчанию  = ВТСтавкиНДСОрганизация.ВидСтавкиНДС)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСборкаЗапасов.Сборка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Номенклатура.ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТСтавкиНДСНоменклатура.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА ВТСтавкиНДСОрганизация.СтавкаНДС
	|		ИНАЧЕ ВТСтавкиНДСНоменклатура.СтавкаНДС
	|	КОНЕЦ,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Партия,
	|	ТабличнаяЧасть.СерииНоменклатуры,
	|	ТабличнаяЧасть.Количество,
	|	ТабличнаяЧасть.Резерв,
	|	ТабличнаяЧасть.ЕдиницаИзмерения,
	|	ТабличнаяЧасть.Спецификация,
	|	ТабличнаяЧасть.КлючСвязи,
	|	ТабличнаяЧасть.СтранаПроисхождения,
	|	ТабличнаяЧасть.НомерГТД,
	|	ТабличнаяЧасть.СтруктурнаяЕдиница,
	|	ТабличнаяЧасть.Ячейка,
	|	ТабличнаяЧасть.ЗаказПокупателя,
	|	ТабличнаяЧасть.Ссылка.ЗаказПокупателя
	|ИЗ
	|	Документ.СборкаЗапасов.Запасы КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДСНоменклатура
	|		ПО (ТабличнаяЧасть.Номенклатура.ВидСтавкиНДС  = ВТСтавкиНДСНоменклатура.ВидСтавкиНДС)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДСОрганизация
	|		ПО (ТабличнаяЧасть.Ссылка.Организация.ВидСтавкиНДСПоУмолчанию  = ВТСтавкиНДСОрганизация.ВидСтавкиНДС)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСборкаЗапасов.Сборка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.НомерСтроки КАК НомерСтроки,
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Запасы.СтавкаНДС КАК СтавкаНДС,
	|	Запасы.Характеристика КАК Характеристика,
	|	Запасы.Партия КАК Партия,
	|	Запасы.СерииНоменклатуры КАК СерииНоменклатуры,
	|	Запасы.Количество КАК Количество,
	|	Запасы.Резерв КАК Резерв,
	|	Запасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Запасы.Спецификация КАК Спецификация,
	|	Запасы.КлючСвязи КАК КлючСвязи,
	|	Запасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	Запасы.НомерГТД КАК НомерГТД,
	|	Запасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	Запасы.Ячейка КАК Ячейка,
	|	Запасы.ЗаказПокупателя КАК Заказ,
	|	Запасы.ЗаказПокупателяШапки КАК ЗаказПокупателяШапки,
	|	ВЫБОР
	|		КОГДА НЕ ЦеныСХарактеристиками.Цена ЕСТЬ NULL
	|			ТОГДА ЦеныСХарактеристиками.Цена
	|		КОГДА НЕ ЦеныБезХарактеристик.Цена ЕСТЬ NULL
	|			ТОГДА ЦеныБезХарактеристик.Цена
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА НЕ ЦеныСХарактеристиками.ВидЦен.ЦенаВключаетНДС ЕСТЬ NULL
	|			ТОГДА ЦеныСХарактеристиками.ВидЦен.ЦенаВключаетНДС
	|		КОГДА НЕ ЦеныБезХарактеристик.ВидЦен.ЦенаВключаетНДС ЕСТЬ NULL
	|			ТОГДА ЦеныБезХарактеристик.ВидЦен.ЦенаВключаетНДС
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА НЕ ЦеныСХарактеристиками.ВидЦен.ВалютаЦены ЕСТЬ NULL
	|			ТОГДА ЦеныСХарактеристиками.ВидЦен.ВалютаЦены
	|		КОГДА НЕ ЦеныБезХарактеристик.ВидЦен.ВалютаЦены ЕСТЬ NULL
	|			ТОГДА ЦеныБезХарактеристик.ВидЦен.ВалютаЦены
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВалютаЦены
	|ИЗ
	|	Запасы КАК Запасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				ВидЦен = &ВидЦен
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							Запасы.Номенклатура,
	|							Запасы.Характеристика
	|						ИЗ
	|							Запасы КАК Запасы)) КАК ЦеныСХарактеристиками
	|		ПО Запасы.Номенклатура = ЦеныСХарактеристиками.Номенклатура
	|			И Запасы.Характеристика = ЦеныСХарактеристиками.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				ВидЦен = &ВидЦен
	|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							Запасы.Номенклатура
	|						ИЗ
	|							Запасы КАК Запасы)) КАК ЦеныБезХарактеристик
	|		ПО Запасы.Номенклатура = ЦеныБезХарактеристик.Номенклатура";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Курсы = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.ТипНоменклатурыЗапас = (Выборка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас)
										ИЛИ (Выборка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
		
		Если ПоложениеЗаказаПокупателя <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			НоваяСтрока.Заказ = Выборка.ЗаказПокупателяШапки;
		КонецЕсли;
		
		Если ЗаполнятьРезерв Тогда
			НоваяСтрока.Резерв = НоваяСтрока.Количество;
		КонецЕсли;
		
		Если ВалютаДокумента <> Выборка.ВалютаЦены Тогда
			
			КурсЦены = Курсы.Получить(Выборка.ВалютаЦены);
			Если КурсЦены=Неопределено Тогда
				КурсЦены = ЦенообразованиеСервер.ПолучитьКурсыВалют(Выборка.ВалютаЦены, ВалютаДокумента, Дата);
				Курсы.Вставить(Выборка.ВалютаЦены, КурсЦены);
			КонецЕсли; 
			
			НоваяСтрока.Цена = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Цена, КурсЦены.КурсНач, КурсЦены.Курс, КурсЦены.КратностьНач, КурсЦены.Кратность); 
			
		КонецЕсли; 
		
		Если СуммаВключаетНДС <> Выборка.ЦенаВключаетНДС Тогда
			
			НоваяСтрока.Цена = ЦенообразованиеСервер.ПересчитатьСуммуПриИзмененииФлаговНДС(НоваяСтрока.Цена, СуммаВключаетНДС, Выборка.СтавкаНДС);
			
		КонецЕсли;
		
		НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
		
	КонецЦикла;
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
	Иначе
					
		Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		    СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;	
		
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка Тогда
		СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения, "Продукция", "СерииНоменклатурыПродукция");
	Иначе
		СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
	
КонецПроцедуры // ЗаполнитьПоПеремещениюЗапасов()

// Обработчик заполнения на основании ПеремещениеЗапасов.
//
// Параметры:
//  ДанныеЗаполнения - Структура, ДокументСсылка.ПеремещениеЗапасов - Основание для заполнения документа.
//
Процедура ЗаполнитьПоПриемуВРемонт(ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриемИПередачаВРемонт") Тогда
		ДокументСсылкаПриемВРемонт= ДанныеЗаполнения;
	Иначе
		Возврат;
	КонецЕсли;
	
	// Заполнение шапки документа.
	ДокументОснование = ДокументСсылкаПриемВРемонт.Ссылка;
	Организация = ДокументСсылкаПриемВРемонт.Организация;
	Контрагент = ДокументСсылкаПриемВРемонт.Контрагент;
	Договор = ДокументСсылкаПриемВРемонт.Договор;
	
	ВидЦен = Договор.ВидЦен;
	ВидСкидкиНаценки = Договор.ВидСкидкиНаценки;
	ВалютаДокумента = Договор.ВалютаРасчетов;
	СуммаВключаетНДС = ?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено);
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация,, Дата);
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
	Курс = СтруктураПоВалюте.Курс;
	Кратность = СтруктураПоВалюте.Кратность;
	
	ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Проект");
	
КонецПроцедуры

// Процедура заполняет колонку Количество по резервам под заказ.
//
Процедура ЗаполнитьКолонкуРезервПоРезервам() Экспорт
	
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "Резерв");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА &ЗаказВКолонкеЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		КОГДА &ЗаказВШапке
	|			ТОГДА &Заказ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|						И ТаблицаЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ТОГДА ТаблицаЗапасы.Заказ
	|				ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА &СкладВТабличнойЧасти
	|			ТОГДА ТаблицаЗапасы.СтруктурнаяЕдиница
	|		ИНАЧЕ &СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатурыЗапас";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Запасы.Выгрузить());
	ЗаказВКолонкеЗаказПокупателя = ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку;
	Запрос.УстановитьПараметр("ЗаказВКолонкеЗаказПокупателя", ЗаказВКолонкеЗаказПокупателя);
	Запрос.УстановитьПараметр("ЗаказВШапке", ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
	Запрос.УстановитьПараметр("Заказ", ?(ЗначениеЗаполнено(Заказ), Заказ, Документы.ЗаказПокупателя.ПустаяСсылка()));
	Запрос.УстановитьПараметр("СкладВТабличнойЧасти", ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		И ДвиженияДокументаЗапасы.СтруктурнаяЕдиница ССЫЛКА Справочник.СтруктурныеЕдиницы) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		Если ЗаказВКолонкеЗаказПокупателя Тогда
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Выборка.ЗаказПокупателя);
		ИначеЕсли ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			СтруктураДляПоиска.Вставить("Заказ", Выборка.ЗаказПокупателя);
		КонецЕсли;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		Если ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", Выборка.СтруктурнаяЕдиница);
		КонецЕсли;
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоРезервам()

Процедура ЗаполнитьПоДоговоруКонтрагента(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	ДоговорыКонтрагентов.ВалютаРасчетов КАК ВалютаДокумента,
	|	ДоговорыКонтрагентов.ВидЦен КАК ВидЦен,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВидЦен.ЦенаВключаетНДС, ЛОЖЬ) КАК СуммаВключаетНДС,
	|	ДоговорыКонтрагентов.ВидСкидкиНаценки КАК ВидСкидкиНаценки
	|	
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	ВыборкаШапка = Запрос.Выполнить().Выбрать();
	
	ВыборкаШапка.Следующий();
	
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоДоговоруКонтрагента()

#Область ВЕТИС

// Заполнение документа на основании исходящей транспортной операции ВЕТИС.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоИсходящейТранспортнойОперации(ДанныеЗаполнения) Экспорт
	
	Реквизиты = ИнтеграцияВЕТИСУНФ.ДанныеПрикладныхДокументовИзИсходящейТранспортнойОперацииВЕТИС(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
		
	КонецЕсли;
	
	СкладВТабличнойЧасти = ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	
	Товары = Реквизиты.Товары.Выгрузить();
	
	Запасы.Очистить();
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		НоваяСтрокаЗапасы = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, СтрокаТовары);
		НоваяСтрокаЗапасы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрокаЗапасы.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Дата),Дата, ТекущаяДатаСеанса()));
		Если СкладВТабличнойЧасти Тогда 
			НоваяСтрокаЗапасы.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
		КонецЕсли;
		НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(ЭтотОбъект, "Запасы", НоваяСтрокаЗапасы);
		
	КонецЦикла;
	
КонецПроцедуры
	
#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	// Прослеживаемость
	СведенияПрослеживаемости.Очистить();
	// Конец Прослеживаемость
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПриходнойНакладной";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПоставщику")] = "ЗаполнитьПоЗаказуПоставщику";
	СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплату")] = "ЗаполнитьПоСчетуНаОплату";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПеремещениеЗапасов")] = "ЗаполнитьПоПеремещениюЗапасов";
	СтратегияЗаполнения[Тип("ДокументСсылка.СборкаЗапасов")] = "ЗаполнитьПоСборкеЗапасов";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриемИПередачаВРемонт")] = "ЗаполнитьПоПриемуВРемонт";
	СтратегияЗаполнения[Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС")] = "ЗаполнитьПоИсходящейТранспортнойОперации";
	СтратегияЗаполнения[Тип("СправочникСсылка.ДоговорыКонтрагентов")] = "ЗаполнитьПоДоговоруКонтрагента";
	
	ИсключаяСвойства = "Грузоотправитель, Грузополучатель";
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СборкаЗапасов") Тогда
		ИсключаяСвойства = ИсключаяСвойства + ", СуммаВключаетНДС";
	КонецЕсли; 
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения, ИсключаяСвойства);
	
	ПравилоНомераСчетаНаОплату = Константы.ПравилоЗаполненияНомераСчетаНаОплату.Получить();
	Если ЗначениеЗаполнено(ПравилоНомераСчетаНаОплату) Тогда
		
		НомерСчетаНаОплату = ПравилоНомераСчетаНаОплату;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
		И НЕ ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
		
		БанковскийСчетКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "БанковскийСчетПоУмолчанию");
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		НоменклатураВДокументахСервер.ПроверитьПереопределитьПоложениеСклада(ЭтотОбъект);
	КонецЕсли;
	
	// Прослеживаемость
	Если ПрослеживаемаяОперация() Тогда
		ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(Запасы, Дата);
	Иначе
		ПрослеживаемостьУНФ.ОчиститьДанныеПрослеживаемости(Запасы, СведенияПрослеживаемости);
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего") + СтоимостьДоставки + ?(СуммаВключаетНДС, 0, СуммаНДСДоставки);
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьПоляПередЗаписью(ЭтотОбъект);
	
	// Положение склада
	Если ПоложениеСклада<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			СтрокаТабличнойЧасти.Ячейка = Ячейка;
		КонецЦикла;
	Иначе
		СтруктураПолей = ЗаполнениеОбъектовУНФ.СтруктурнаяЕдиницаИЯчейкаДляШапки(Запасы);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураПолей);
	КонецЕсли;
	// Положение заказа покупателя
	Если ПоложениеЗаказаПокупателя <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.Заказ = Заказ;
		КонецЦикла;
	Иначе
		Заказ = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Запасы, "Заказ");
	КонецЕсли;
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность()
		И НЕ ПометкаУдаления Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	// ИнтеграцияГИСМ
	ЕстьМаркируемаяПродукцияГИСМ = ИнтеграцияГИСМУНФ.ЕстьМаркируемаяПродукцияГИСМ(Запасы);
	// Конец ИнтеграцияГИСМ
	
	// Интеграция ВЕТИС
	ЕстьПодконтрольнаяПродукцияВЕТИС = ИнтеграцияВЕТИСУНФ.ЕстьПодконтрольнаяПродукцияВЕТИС(Запасы);
	// Конец ИнтеграцияВЕТИС
	
	РасчетыПроведениеДокументов.ПередЗаписьюНакладной(ЭтотОбъект);
	
	// До включения автоматических скидок будем считать, что скидки рассчитаны.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		СкидкиРассчитаны = Истина;
	КонецЕсли;
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторПлатежа) Тогда
		ИдентификаторПлатежа = РасчетыСлужебный.ПолучитьУникальныйИдентификаторПлатежа(ЭтотОбъект);
	КонецЕсли;
	
	// Прослеживаемость
	// Для реализации не в страны ЕАЭС очистим колонку "Код ТН ВЭД"
	РеализацияВЕАЭС = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Контрагент);
	
	Если НЕ РеализацияВЕАЭС Тогда 
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Запасы Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД) Тогда
				СтрокаТаблицы.КодТНВЭД = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Документы.РасходнаяНакладная.ПрослеживаемаяОперация(ВидОперации) Тогда
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Запасы Цикл
			Если СтрокаТаблицы.ПрослеживаемыйТовар Тогда
				СтрокаТаблицы.НомерГТД = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Автоматический подбор РНПТ и очистка признака прослеживаемого товара.
	ПрослеживаемыйТовар = Запасы.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	ЕстьПрослеживаемыйТовар = ПрослеживаемыйТовар.Количество() <> 0 И ПрослеживаемаяОперация();
	Если ЕстьПрослеживаемыйТовар Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю
				ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
				ПрослеживаемостьУНФ.ПодобратьРНПТОстатки(ЭтотОбъект, Отказ);
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику Тогда 
				ПрослеживаемостьУНФ.ПодобратьРНПТВозврат(ЭтотОбъект, Отказ);
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		СведенияПрослеживаемости.Очистить();
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
		КонецЦикла; 
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ИсключаемыеРеквизиты = Новый Массив;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю Тогда
		ПроверяемыеРеквизиты.Добавить("Подразделение");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения Тогда
		ПроверяемыеРеквизиты.Добавить("Запасы.Партия");
	КонецЕсли;
	
	ЗаказВШапке = ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	
	ТаблицаЗапасы = Запасы.Выгрузить(, "Заказ, Всего");
	ТаблицаЗапасы.Свернуть("Заказ", "Всего");
	
	ТаблицаПредоплата = Предоплата.Выгрузить(, "Заказ, СуммаПлатежа");
	ТаблицаПредоплата.Свернуть("Заказ", "СуммаПлатежа");
	
	Если ЗаказВШапке Тогда
		Для каждого СтрокаЗапасы Из ТаблицаЗапасы Цикл
			СтрокаЗапасы.Заказ = Заказ;
		КонецЦикла;
		Если Контрагент.ВестиРасчетыПоЗаказам Тогда
			Для каждого СтрокаПредоплата Из ТаблицаПредоплата Цикл
				СтрокаПредоплата.Заказ = Заказ;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЗаполненностьСтруктурнойЕдиницы(Отказ, ПроверяемыеРеквизиты);
	
	КоличествоЗапасы = Запасы.Количество();
	Для каждого Строка Из ТаблицаПредоплата Цикл
		
		НайденнаяСтрокаЗапасы = Неопределено;
		
		Если Контрагент.ВестиРасчетыПоЗаказам
		   И Строка.Заказ <> Неопределено
		   И Строка.Заказ <> Документы.ЗаказПокупателя.ПустаяСсылка()
		   И Строка.Заказ <> Документы.ЗаказПоставщику.ПустаяСсылка() Тогда
			НайденнаяСтрокаЗапасы = ТаблицаЗапасы.Найти(Строка.Заказ, "Заказ");
		ИначеЕсли Контрагент.ВестиРасчетыПоЗаказам Тогда
			НайденнаяСтрокаЗапасы = ТаблицаЗапасы.Найти(Неопределено, "Заказ");
			НайденнаяСтрокаЗапасы = ?(НайденнаяСтрокаЗапасы = Неопределено, ТаблицаЗапасы.Найти(Документы.ЗаказПокупателя.ПустаяСсылка(), "Заказ"), НайденнаяСтрокаЗапасы);
			НайденнаяСтрокаЗапасы = ?(НайденнаяСтрокаЗапасы = Неопределено, ТаблицаЗапасы.Найти(Документы.ЗаказПоставщику.ПустаяСсылка(), "Заказ"), НайденнаяСтрокаЗапасы);				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Заказ)
		   И НайденнаяСтрокаЗапасы = Неопределено
		   И КоличествоЗапасы > 0
		   И Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекстСообщения = НСтр(
				"ru = 'Нельзя зачесть аванс по заказу отличному от указанных в табличных частях ""Запасы"" или ""Расходы"".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		КонецЕсли;
	КонецЦикла;
	
	РасчетыРаботаСФормамиВызовСервера.ПроверитьЗаполнениеДокументаПредоплаты(Контрагент, ПроверяемыеРеквизиты);
	
	Если Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить()
		И (ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию) Тогда
		
		Для каждого СтрокаЗапасы Из Запасы Цикл
			
			Если СтрокаЗапасы.Резерв > СтрокаЗапасы.Количество Тогда
				
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'В строке №%1 табл. части ""Запасы и услуги"" количество отгружаемых позиций из резерва превышает общее количество запасов.'"),
					СтрокаЗапасы.НомерСтроки);
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки,
					"Резерв");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Скидка 100%.
	ЕстьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи");
	ЕстьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки"); // АвтоматическиеСкидки
	Если ЕстьРучныеСкидки ИЛИ ЕстьАвтоматическиеСкидки Тогда
		Для каждого СтрокаЗапасы Из Запасы Цикл
			// АвтоматическиеСкидки
			ТекСумма = Окр(СтрокаЗапасы.Цена * СтрокаЗапасы.Количество, 2);
			ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, СтрокаЗапасы.СуммаСкидкиНаценки, 0);
			ТекСуммаАвтоматическойСкидки = ?(ЕстьАвтоматическиеСкидки, СтрокаЗапасы.СуммаАвтоматическойСкидки, 0);
			ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекСуммаАвтоматическойСкидки;
			Если СтрокаЗапасы.ПроцентСкидкиНаценки <> 100 И ТекСуммаСкидки < ТекСумма
				И НЕ ЗначениеЗаполнено(СтрокаЗапасы.Сумма) Тогда
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'Не заполнена колонка ""Сумма"" в строке %1 списка ""Запасы"".'"),
					СтрокаЗапасы.НомерСтроки);
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки,
					"Сумма");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	// Серии номенклатуры
	СерииНоменклатурыУНФ.ПроверкаЗаполненияСерийНоменклатуры(Отказ, Запасы, СерииНоменклатуры, СтруктурнаяЕдиница, ЭтотОбъект);
	
	ПроверитьЗаполнениеНоменклатурыПоДоговоруОбслуживания(Отказ);
	
	// Доставка
	Если СтоимостьДоставки>0 Тогда
		ПроверяемыеРеквизиты.Добавить("НоменклатураДоставки");
	КонецЕсли;
	// Конец Доставка
	
	// Наборы
	НаборыСервер.ПроверитьТабличнуюЧасть(ЭтотОбъект, "Запасы", Отказ);
	// КонецНаборы
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
		
		ГрузовыеТаможенныеДекларацииСервер.ПриОбработкеПроверкиЗаполнения(Отказ, ЭтотОбъект);
		
	КонецЕсли;
	
	// ПодарочныеСертификаты
	Если Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты.Получить() Тогда
		
		Если Не РаботаСПодарочнымиСертификатами.УказанКонтрагентДляПредоплаты() Тогда
			ТекстСообщения = НСтр(
				"ru = 'Не заполнена константа ""Служебный контрагент для подарочных сертификатов"".
				|Необходимо указать контрагента: Продажи - Еще больше возможностей.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		КонецЕсли;
		
		// Проверка срока и области действия подарочных сертификатов
		ВыполнитьПроверкуОграниченийСертификатов(Отказ);
		
	КонецЕсли;
	// Конец ПодарочныеСертификаты
	
	// Прослеживаемость
	РеализацияВЕАЭС = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Контрагент);
	// Исключаем из проверки те реквизиты табличных частей, обязательность которых
	//  зависит от значений других рекивизитов в строках табличных частей:
	ИсключаемыеРеквизиты.Добавить("Запасы.КодТНВЭД");
	
	// Проверяем табличную часть "Товары":
	Если Запасы.Количество() > 0 Тогда
		ИмяСписка = НСтр("ru = 'Запасы'");
		
		Для каждого СтрокаЗапасы Из Запасы Цикл
			
			Если Не СтрокаЗапасы.ПрослеживаемыйТовар Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверка кода ТН ВЭД.
			Если РеализацияВЕАЭС
				И СтрокаЗапасы.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль()
				И НЕ ЗначениеЗаполнено(СтрокаЗапасы.КодТНВЭД) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Код ТН ВЭД'"),
					СтрокаЗапасы.НомерСтроки, ИмяСписка);
					
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки, "КодТНВЭД");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			// Для прослеживаемого товара обязательно указывается страна происхождения.
			Если СтрокаЗапасы.ПрослеживаемыйТовар
				И НЕ ЗначениеЗаполнено(СтрокаЗапасы.СтранаПроисхождения) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Страна происхождения'"),
					СтрокаЗапасы.НомерСтроки, ИмяСписка);
					
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки, "СтранаПроисхождения");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	// Конец Прослеживаемость
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ИсключаемыеРеквизиты);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Взаиморасчеты
	СоответствиеТабличныхЧастейИРеквизитаЗаказ = Новый Соответствие;
	СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Запасы", "Заказ");
	ДополнительныеСвойства.Вставить("ИмяРеквизитаЗаказ", "Заказ");
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства, Отказ, Ложь, СоответствиеТабличныхЧастейИРеквизитаЗаказ);
	// Конец Взаиморасчеты
	
	// Инициализация данных документа.
	Документы.РасходнаяНакладная.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Взаиморасчеты
	// Проверим, можно ли продолжать и не было ли отказа в процедурах
	// формирования движений по взаиморасчетам.
	Отказ = ДополнительныеСвойства.Отказ;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыПереданныеВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыПринятыеВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Закупки", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Продажи", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ВыпускПродукции", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыНаСкладах", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыКРасходуСоСкладов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыИАгентскиеУслугиПринятые", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыПереданные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗаказыПокупателей", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗаказыПоставщикам", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетод", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыНераспределенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыОтложенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПотребностьВЗапасах", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РазмещениеЗаказов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПоставщиками", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПокупателями", ТаблицыДляДвижений, Движения, Отказ);
	
	// СерииНоменклатуры
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыГарантии", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДвиженияСерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыКРасходу", ТаблицыДляДвижений, Движения, Отказ);
	
	// ПодарочныеСертификаты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПодарочныеСертификаты", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаПодарочнымиСертификатами", ТаблицыДляДвижений, Движения, Отказ);
	
	// ДисконтныеКарты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПродажиПоДисконтнымКартам", ТаблицыДляДвижений, Движения, Отказ);
	// АвтоматическиеСкидки
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПредоставленныеСкидки", ТаблицыДляДвижений, Движения, Отказ);
	// Эквайринг
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетодЭквайринг", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// Биллинг
	Если ТаблицыДляДвижений.Свойство("ТаблицаВыполнениеДоговоровОбслуживания") Тогда
		ПроведениеДокументовУНФ.ОтразитьДвижения("ВыполнениеДоговоровОбслуживания", ТаблицыДляДвижений, Движения, Отказ);
	КонецЕсли;
	
	// Суммы документов для регламентированного учета
	ПроведениеДокументовУНФ.ОтразитьДвижения("СуммыДокументовРегламентированныйУчет", ТаблицыДляДвижений, Движения, Отказ);
	
	// Взаиморасчеты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗакупкиДляКУДиР", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаДокументов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаСчетовИЗаказов", ТаблицыДляДвижений, Движения, Отказ);
	// Конец Взаиморасчеты
	
	// Интеркампани
	ПроведениеДокументовУНФ.ОтразитьДвижения("РезервыТоваровОрганизаций", ТаблицыДляДвижений, Движения, Отказ);
	// Конец Интеркампани
	
	// Прослеживаемость
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПрослеживаемыеТовары", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОперацииСПрослеживаемымиТоварами", ТаблицыДляДвижений, Движения, Отказ);
	
	ПрослеживаемостьУНФ.СформироватьДвиженияПрослеживаемыхТоваровВЕАЭС(Движения, ДополнительныеСвойства);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Если ДополнительныеСвойства.Свойство("ТаблицаДокументовДляИзменения")
		И ДополнительныеСвойства.ТаблицаДокументовДляИзменения.Количество() > 0
		Тогда
		РасчетыПроведениеДокументов.ОбработатьТаблицуДокументовДляИзмененияПриОтгрузке(ДополнительныеСвойства, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Контроль возникновения отрицательного остатка.
	Документы.РасходнаяНакладная.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Взаиморасчеты
	СоответствиеТабличныхЧастейИРеквизитаЗаказ = Новый Соответствие;
	СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Запасы", "Заказ");
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства, Отказ, Ложь, СоответствиеТабличныхЧастейИРеквизитаЗаказ);
	// Конец Взаиморасчеты
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Если ДополнительныеСвойства.Свойство("ТаблицаДокументовДляИзменения")
		И ДополнительныеСвойства.ТаблицаДокументовДляИзменения.Количество() > 0
		Тогда
		РасчетыПроведениеДокументов.ОбработатьТаблицуДокументовДляИзмененияПриОтгрузке(ДополнительныеСвойства, Отказ);
	КонецЕсли;
	
	// Контроль возникновения отрицательного остатка.
	Документы.РасходнаяНакладная.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Подчиненный счет-фактура
	Если Не Отказ Тогда
		СчетаФактурыУНФ.ОтменитьПроведениеПодчиненногоСчетаФактуры(Ссылка, Номер, Дата, ДополнительныеСвойства, Ложь);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	Предоплата.Очистить();
	
	ПереданВЕГАИС = Неопределено;
	СпособПродажиГИСМ = "";
	
	НомерЧекаККМ = 0;
	ПодписьКассира = Неопределено;
	
	// Прослеживаемость
	СведенияПрослеживаемости.Очистить();
	Если ПрослеживаемаяОперация() Тогда
		ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(Запасы, Дата);
	Иначе
		ПрослеживаемостьУНФ.ОчиститьДанныеПрослеживаемости(Запасы, СведенияПрослеживаемости);
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры // ПриКопировании()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СчетаФактурыУНФ.ПриЗаписиДокументаОснованияСчетаФактуры(Ссылка, ДополнительныеСвойства, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоВводНаОснованииЗаказНаряда(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ВидОперацииЗаказаПокупателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ВидОперации");
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Основание")
		И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
		Тогда
		ВидОперацииЗаказаПокупателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Основание, "ВидОперации");
	КонецЕсли;
	
	Возврат ВидОперацииЗаказаПокупателя = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	
КонецФункции

Процедура ПроверитьЗаполненностьСтруктурнойЕдиницы(Отказ, ПроверяемыеРеквизиты)
	
	Если ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ПроверяемыеРеквизиты.Добавить("СтруктурнаяЕдиница");
		Возврат;
	КонецЕсли;
		
	Для Каждого ТекСтрокаТЧ Из Запасы Цикл
		Если Не ТекСтрокаТЧ.ТипНоменклатурыЗапас Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрокаТЧ.СтруктурнаяЕдиница) Тогда
			Продолжить;
		КонецЕсли;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена колонка ""Склад""  в строке %1 списка ""Запасы""'"),
			ТекСтрокаТЧ.НомерСтроки);
		КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", ТекСтрокаТЧ.НомерСтроки,
			"СтруктурнаяЕдиница");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПроверкуОграниченийСертификатов(Отказ)
	
	// Проверка срока действия
	РаботаСПодарочнымиСертификатами.ПроверитьСрокДействия(ЭтотОбъект, "Запасы", Отказ);
	РаботаСПодарочнымиСертификатами.ПроверитьСрокДействия(ЭтотОбъект, "Предоплата", Отказ);
	
	// Проверка области действия
	СтруктураДляПроверки = Новый Структура;
	СтруктураДляПроверки.Вставить("Запасы", Запасы.Выгрузить(,"Номенклатура, Характеристика, Сумма"));
	Сертификаты = Предоплата.Выгрузить(
		Новый Структура("ОплатаСертификатом", Истина),
		"Документ, СуммаРасчетов");
	Сертификаты.Колонки.Документ.Имя = "ПодарочныйСертификат";
	Сертификаты.Колонки.СуммаРасчетов.Имя = "Сумма";
	СтруктураДляПроверки.Вставить("Сертификаты", Сертификаты);
	РаботаСПодарочнымиСертификатами.ПроверитьОбластьДействияСертификатов(СтруктураДляПроверки, Отказ);
	
КонецПроцедуры

// Наборы
Процедура ДобавитьОписаниеНабора(ПропускаемыеНаборы, Заказ = Неопределено, НоменклатураНабора, ХарактеристикаНабора)
	
	Для каждого ОписаниеНабора Из ПропускаемыеНаборы Цикл
		Если ОписаниеНабора.НоменклатураНабора=НоменклатураНабора 
			И ОписаниеНабора.ХарактеристикаНабора=ХарактеристикаНабора
			И (Заказ=Неопределено ИЛИ НЕ ОписаниеНабора.Свойство("Заказ") ИЛИ ОписаниеНабора.Заказ=Заказ) Тогда
			// Уже добавлено
			Возврат;
		КонецЕсли; 
	КонецЦикла; 	
	СтруктураНабора = Новый Структура;
	Если Заказ<>Неопределено Тогда
		СтруктураНабора.Вставить("Заказ", Заказ);
	КонецЕсли; 
	СтруктураНабора.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураНабора.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	ПропускаемыеНаборы.Добавить(СтруктураНабора);
	
КонецПроцедуры

Функция ПропуститьНабор(ПропускаемыеНаборы, СтрокаНабора)
	
	Для каждого ОписаниеНабора Из ПропускаемыеНаборы Цикл
		Если ОписаниеНабора.НоменклатураНабора=СтрокаНабора.НоменклатураНабора И
			ОписаниеНабора.ХарактеристикаНабора=СтрокаНабора.ХарактеристикаНабора И
			(НЕ ОписаниеНабора.Свойство("Заказ") ИЛИ ОписаниеНабора.Заказ=СтрокаНабора.Заказ) Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Процедура ДобавитьНаборы(ВыборкаНаборы)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НоменклатураНабора", ВыборкаНаборы.НоменклатураНабора);
	СтруктураОтбора.Вставить("ХарактеристикаНабора", ВыборкаНаборы.ХарактеристикаНабора);
	СтрокиНаборы = ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
	Если СтрокиНаборы.Количество()=0 Тогда
		ЗаполнитьЗначенияСвойств(ДобавленныеНаборы.Добавить(), ВыборкаНаборы);
	Иначе
		СтрокиНаборы[0].Количество = СтрокиНаборы[0].Количество + ВыборкаНаборы.Количество;
	КонецЕсли; 
	
КонецПроцедуры

Функция НесколькоЗаказовПокупателей(Документ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Если ТипЗнч(Документ)=Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщикуЗапасы.ЗаказПокупателя) КАК КоличествоЗаказов
		|ИЗ
		|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
		|ГДЕ
		|	ЗаказПоставщикуЗапасы.Ссылка = &Ссылка";
	Иначе
		Запрос.УстановитьПараметр("Ссылка", Документ);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.ЗаказПокупателя) КАК КоличествоЗаказов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПриходнаяНакладнаяЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
		|	ИЗ
		|		Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
		|	ГДЕ
		|		ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|		И ПриходнаяНакладнаяЗапасы.Заказ В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПриходнаяНакладнаяЗапасы.Заказ
		|	ИЗ
		|		Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
		|	ГДЕ
		|		ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|		И ПриходнаяНакладнаяЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
		|		И ПриходнаяНакладнаяЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказПоставщикуЗапасы.ЗаказПокупателя
		|	ИЗ
		|		Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
		|			ПО ПриходнаяНакладнаяЗапасы.Заказ = ЗаказПоставщикуЗапасы.Ссылка
		|	ГДЕ
		|		ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|		И ПриходнаяНакладнаяЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
		|		И ПриходнаяНакладнаяЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) КАК ВложенныйЗапрос";
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	Выборка.Следующий();
	Возврат Выборка.КоличествоЗаказов>1;
	
КонецФункции

Процедура ПроверитьЗаполнениеНоменклатурыПоДоговоруОбслуживания(Отказ)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ЭтоДоговорОбслуживания, ДоговорОбслуживанияТарифныйПлан");
	
	Если Не ДанныеДоговора.ЭтоДоговорОбслуживания Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЗапасы Из Запасы Цикл
		РазрешенаПродажаПозиции = Справочники.ДоговорыКонтрагентов.РазрешенаПродажаНоменклатурыПоДоговоруОбслуживания(
			Договор, СтрокаЗапасы.Номенклатура, СтрокаЗапасы.Характеристика);
		Если РазрешенаПродажаПозиции Тогда
			Продолжить;
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Запрещено проводить незапланированные товары/услуги по текущему договору обслуживания.'");
		ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", СтрокаЗапасы.НомерСтроки, "Номенклатура");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеДоговора.ДоговорОбслуживанияТарифныйПлан,
			ПутьКДанным, , Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиСерииНоменклатуры(ТаблицаСерииНоменклатурыЗаказа, ТаблицаЗапасыЗаказа)
	
	Если Не ТаблицаСерииНоменклатурыЗаказа.Количество() Тогда
		Возврат
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия");
	СтруктураПоискаКлючСвязи = Новый Структура("КлючСвязи");
	
	ТаблицаСтрокЗапасовССериями = Новый ТаблицаЗначений;
	ТаблицаСтрокЗапасовССериями.Колонки.Добавить("КлючСвязи");
	
	Для Каждого СтрокаСерийЗаказа Из ТаблицаСерииНоменклатурыЗаказа Цикл
		
		СтруктураПоискаКлючСвязи.КлючСвязи = СтрокаСерийЗаказа.КлючСвязи;
		
		НайденныеСтрокиЗапасыЗаказПокупателя = ТаблицаЗапасыЗаказа.НайтиСтроки(СтруктураПоискаКлючСвязи);
		
		Если Не НайденныеСтрокиЗапасыЗаказПокупателя.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = НайденныеСтрокиЗапасыЗаказПокупателя[0];
		
		СтруктураПоиска.Номенклатура = НайденнаяСтрока.Номенклатура;
		СтруктураПоиска.Характеристика = НайденнаяСтрока.Характеристика;
		СтруктураПоиска.Партия = НайденнаяСтрока.Партия;
		
		НайденныеСтрокиЗапасы = Запасы.НайтиСтроки(СтруктураПоиска);
		
		Если Не НайденныеСтрокиЗапасы.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗапасовССериями = ТаблицаСтрокЗапасовССериями.Добавить();
		СтрокаЗапасовССериями.КлючСвязи = НайденныеСтрокиЗапасы[0].КлючСвязи;
		
		НоваяСтрокаСерии = СерииНоменклатуры.Добавить();
		НоваяСтрокаСерии.КлючСвязи = НайденныеСтрокиЗапасы[0].КлючСвязи;
		НоваяСтрокаСерии.Количество = СтрокаСерийЗаказа.Количество;
		НоваяСтрокаСерии.Серия = СтрокаСерийЗаказа.Серия;
		
	КонецЦикла;
	
	ТаблицаСтрокЗапасовССериями.Свернуть("КлючСвязи");
	
	// Заполним строковое представление серий
	
	Для Каждого СтрокаТаблицыЗапасовССериями Из ТаблицаСтрокЗапасовССериями Цикл
		
		СтроковоеПредставлениеСерийНоменклатуры = "";
		СтруктураПоискаКлючСвязи.КлючСвязи = СтрокаТаблицыЗапасовССериями.КлючСвязи;
		
		НайденныеСтрокиСерии = СерииНоменклатуры.НайтиСтроки(СтруктураПоискаКлючСвязи);
		
		Если Не НайденныеСтрокиСерии.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаСерий Из НайденныеСтрокиСерии Цикл
			
			СтроковоеПредставлениеСерийНоменклатуры = СтроковоеПредставлениеСерийНоменклатуры + СтрокаСерий.Серия+"; ";
			
		КонецЦикла;
		
		СтроковоеПредставлениеСерийНоменклатуры = Лев(СтроковоеПредставлениеСерийНоменклатуры, Мин(СтрДлина(СтроковоеПредставлениеСерийНоменклатуры)-2,150));
		
		НайденныеСтрокиЗапасы = Запасы.НайтиСтроки(СтруктураПоискаКлючСвязи);
		
		Если Не НайденныеСтрокиЗапасы.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеСтрокиЗапасы[0].СерииНоменклатуры = СтроковоеПредставлениеСерийНоменклатуры;
		
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#Область Прослеживаемость

Функция ПрослеживаемаяОперация()
	
	Возврат (ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю
	ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику
	ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию);
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли