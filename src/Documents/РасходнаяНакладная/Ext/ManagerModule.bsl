#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Контрагент)
	|	И ЗначениеРазрешено(СтруктурнаяЕдиница)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
// @skip-warning
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Осуществляет проверку возможности ввода на основании.
//
// Параметры:
//  ДанныеЗаполнения	 - ДокументСсылка.РасходнаяНакладная - Проверяемый документ
//  ЗначенияРеквизитов	 - Структура						 - Структура значений проверяемых реквизитов
//
Процедура ПроверитьВозможностьВводаНаОснованииРасходнойНакладной(ДанныеЗаполнения, ЗначенияРеквизитов) Экспорт

	Если ЗначенияРеквизитов.Свойство("Проведен") Тогда
		Если Не ЗначенияРеквизитов.Проведен Тогда
			ТекстОшибки = НСтр(
				"ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//Определяет является ли операция прослеживаемой.
//
// Параметры:
//  Операция	 - ПеречислениеСсылка.ВидыОперацийРасходнаяНакладная - Проверяемая операция
//
Функция ПрослеживаемаяОперация(Операция) Экспорт
	
	Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Проведение

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасы(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Возврат,
	|	ТаблицаЗапасы.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ТОГДА ТаблицаЗапасы.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПродажи,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЗаказПродажи,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ТаблицаЗапасы.ПодразделениеПродажи
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ТаблицаЗапасы.Ответственный
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Ответственный,
	|	ТаблицаЗапасы.ПодразделениеПродажи КАК ПодразделениеПродажи,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.КоррОрганизация КАК КоррОрганизация,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.ТоварыНаКомиссии КАК ТоварыНаКомиссии,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ТОГДА ТаблицаЗапасы.НеУчитыватьЗаказыПриПередачеНаКомиссию
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеУчитыватьЗаказыПриПередачеНаКомиссию,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.УчетПотребностиПоСкладам
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчетПотребностиПоСкладам,
	|	ВЫБОР
	|		КОГДА НЕ ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения)
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение)
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		КОГДА ТаблицаЗапасы.КоррЗаказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.КоррЗаказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК КоррЗаказПокупателя,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|					ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|					ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|					ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения)
	|				ТОГДА -1 * ТаблицаЗапасы.Количество
	|			ИНАЧЕ ТаблицаЗапасы.Количество
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаЗапасы.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|					ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|					ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения)
	|				ТОГДА 0
	|			КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|				ТОГДА -1 * ТаблицаЗапасы.Сумма
	|			ИНАЧЕ ТаблицаЗапасы.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	0 КАК Себестоимость,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ФиксированнаяСтоимость,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ТаблицаЗапасы.СчетУчетаЗатрат
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ТаблицаЗапасы.СчетУчетаСебестоимость
	|		ИНАЧЕ ТаблицаЗапасы.КоррСчетУчета
	|	КОНЕЦ КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчета КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ТОГДА ВЫРАЗИТЬ(&ОприходованиеЗапасов КАК СТРОКА(100))
	|		ИНАЧЕ ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100))
	|	КОНЕЦ КАК Содержание,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ТОГДА ВЫРАЗИТЬ(&ОприходованиеЗапасов КАК СТРОКА(100))
	|		ИНАЧЕ ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100))
	|	КОНЕЦ КАК СодержаниеПроводки,
	|	ТаблицаЗапасы.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаЗапасы.Проект КАК Проект
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Документ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ТОГДА ТаблицаЗапасы.НеУчитыватьЗаказыПриПередачеНаКомиссию
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ТОГДА ТаблицаЗапасы.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ТаблицаЗапасы.ПодразделениеПродажи
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ТаблицаЗапасы.Ответственный
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТаблицаЗапасы.ПодразделениеПродажи,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.КоррОрганизация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчета,
	|	ТаблицаЗапасы.ТоварыНаКомиссии,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.НоменклатураНабора,
	|	ТаблицаЗапасы.ХарактеристикаНабора,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.КоррПартия,
	|	ТаблицаЗапасы.Ответственный,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		КОГДА ТаблицаЗапасы.КоррЗаказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.КоррЗаказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаЗапасы.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ТОГДА ВЫРАЗИТЬ(&ОприходованиеЗапасов КАК СТРОКА(100))
	|		ИНАЧЕ ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ТаблицаЗапасы.СчетУчетаЗатрат
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ТаблицаЗапасы.СчетУчетаСебестоимость
	|		ИНАЧЕ ТаблицаЗапасы.КоррСчетУчета
	|	КОНЕЦ,
	|	ТаблицаЗапасы.ТипНоменклатуры,
	|	ТаблицаЗапасы.Проект,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.УчетПотребностиПоСкладам
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения)
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение)
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаЗапасы.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ТОГДА ВЫРАЗИТЬ(&ОприходованиеЗапасов КАК СТРОКА(100))
	|		ИНАЧЕ ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100))
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("ОприходованиеЗапасов", НСтр("ru = 'Оприходование запасов'"));
	Запрос.УстановитьПараметр("СписаниеЗапасов", НСтр("ru = 'Списание запасов'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Выгрузить());
	
	Если ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю 
		ИЛИ ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию 
		ИЛИ ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку
		ИЛИ ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение Тогда
		
		СформироватьТаблицаЗапасыПродажа(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
		
	ИначеЕсли ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику Тогда
		
		СформироватьТаблицаЗапасыВозврат(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицаЗапасы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыВРазрезеГТД(СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасыНаСкладах.Период КАК Период,
	|	ТаблицаЗапасыНаСкладах.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД,
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И ТаблицаЗапасыНаСкладах.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И (ТаблицаЗапасыНаСкладах.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|			ИЛИ ТаблицаЗапасыНаСкладах.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.СобственныеЗапасы))
	|	И ТаблицаЗапасыНаСкладах.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Период,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.НомерГТД,
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыНаСкладах.Период КАК Период,
	|	ТаблицаЗапасыНаСкладах.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД,
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество,
	|	ТаблицаЗапасыНаСкладах.Документ КАК ДокументПередачи
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И ТаблицаЗапасыНаСкладах.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И ТаблицаЗапасыНаСкладах.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Период,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.НомерГТД,
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения,
	|	ТаблицаЗапасыНаСкладах.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасыНаСкладах.Период КАК Период,
	|	ТаблицаЗапасыНаСкладах.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД,
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество,
	|	ТаблицаЗапасыНаСкладах.Документ КАК ДокументПриема
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И ТаблицаЗапасыНаСкладах.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И ТаблицаЗапасыНаСкладах.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	И ТаблицаЗапасыНаСкладах.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|	И ТаблицаЗапасыНаСкладах.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Период,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.НомерГТД,
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения,
	|	ТаблицаЗапасыНаСкладах.Документ";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыВРазрезеГТД", РезультатЗапроса[0].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПереданныеВРазрезеГТД", РезультатЗапроса[1].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПринятыеВРазрезеГТД", РезультатЗапроса[2].Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПродажа(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ТаблицаЗапасы.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)) КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ВЫБОР
	|			КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				ТОГДА ТаблицаЗапасы.Заказ
	|			КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|					И ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				ТОГДА ТаблицаЗапасы.Заказ.ЗаказПокупателя
	|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОНЕЦ КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|	ГДЕ
	|		ТаблицаЗапасы.Заказ <> НЕОПРЕДЕЛЕНО
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|		ЗапасыОстатки.СуммаОстаток КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация КАК Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|						ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|						ТаблицаЗапасы.Характеристика КАК Характеристика,
	|						ТаблицаЗапасы.Партия КАК Партия,
	|						ВЫБОР
	|							КОГДА ТаблицаЗапасы.Заказ <> НЕОПРЕДЕЛЕНО
	|								ТОГДА ВЫБОР
	|										КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|											ТОГДА ТаблицаЗапасы.Заказ
	|										КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|												И ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|											ТОГДА ТаблицаЗапасы.Заказ.ЗаказПокупателя
	|										ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|									КОНЕЦ
	|							ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						КОНЕЦ КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ВЫБОР
	|							КОГДА ТаблицаЗапасы.Заказ <> НЕОПРЕДЕЛЕНО
	|								ТОГДА ВЫБОР
	|										КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|											ТОГДА ТаблицаЗапасы.Заказ
	|										КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|												И ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|											ТОГДА ТаблицаЗапасы.Заказ.ЗаказПокупателя
	|										ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|									КОНЕЦ
	|							ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						КОНЕЦ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				
	|					ОБЪЕДИНИТЬ ВСЕ
	|				
	|					ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Исключая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	Передача = (ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию
				ИЛИ ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку
				ИЛИ ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение);
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуетсяРезерв = ?(ЗначениеЗаполнено(СтрокаТаблицаЗапасы.Резерв), СтрокаТаблицаЗапасы.Резерв, 0);
		КоличествоТребуетсяСвободныйОстаток = ?(ЗначениеЗаполнено(СтрокаТаблицаЗапасы.Количество), СтрокаТаблицаЗапасы.Количество, 0);
		
		Если КоличествоТребуетсяРезерв > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяСвободныйОстаток - КоличествоТребуетсяРезерв;
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяРезерв;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход. Запасы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
			
			// Сформируем проводки.
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
				СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
			КонецЕсли;
			
			Если Передача Тогда
				
				// Приход.
				СтрокаТаблицыПриход = ВременнаяТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы,,"СтруктурнаяЕдиница, КоррСтруктурнаяЕдиница");
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				
				СтрокаТаблицыПриход.Организация = СтрокаТаблицаЗапасы.КоррОрганизация;
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				
				СтрокаТаблицыПриход.КоррОрганизация = СтрокаТаблицаЗапасы.Организация;
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				
				Если НЕ ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") 
					Или СтрокаТаблицаЗапасы.НеУчитыватьЗаказыПриПередачеНаКомиссию Тогда
					СтрокаТаблицыПриход.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
				КонецЕсли;
			
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = КоличествоТребуетсяРезерв;
				
				СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru='Передача запасов'"); 
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
			Иначе
				
				Если СтрокаТаблицаЗапасы.ТоварыНаКомиссии Тогда
				
				ИначеЕсли Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					
					// Продвигаем доходы и расходы.
					СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
					
					СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.ПодразделениеПродажи;
					СтрокаДоходыИРасходы.ЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПродажи;
					Если СтрокаТаблицаЗапасы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
						СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетДт;
					Иначе
						СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
					КонецЕсли;
					СтрокаДоходыИРасходы.СуммаДоходов = 0;
					СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
					СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
					
					СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
					
				КонецЕсли;
				
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
					// Продвигаем себестоимость продаж.
					Если Не СтрокаТаблицаЗапасы.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
						СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
						СтрокаПродажи.ЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПродажи;
						СтрокаПродажи.Количество = 0;
						СтрокаПродажи.Сумма = 0;
						СтрокаПродажи.СуммаНДС = 0;
						СтрокаПродажи.Себестоимость = СуммаКСписанию;
						СтрокаПродажи.Склад = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;	
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстаток;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход. Запасы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
			СтрокаТаблицыРасход.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			// Сформируем проводки.
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
				СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
			КонецЕсли;
			
			Если Передача Тогда
				
				Если НЕ ПолучитьФункциональнуюОпцию("РезервированиеЗапасов")
					ИЛИ СтрокаТаблицаЗапасы.НеУчитыватьЗаказыПриПередачеНаКомиссию Тогда
					СтрокаТаблицыРасход.КоррЗаказПокупателя = Неопределено;
				КонецЕсли;
			
				// Приход.
				СтрокаТаблицыПриход = ВременнаяТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы,,"СтруктурнаяЕдиница, КоррСтруктурнаяЕдиница");
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.Организация = СтрокаТаблицаЗапасы.КоррОрганизация;
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
 
				Если НЕ ПолучитьФункциональнуюОпцию("РезервированиеЗапасов")
					ИЛИ СтрокаТаблицаЗапасы.НеУчитыватьЗаказыПриПередачеНаКомиссию Тогда
					СтрокаТаблицыПриход.ЗаказПокупателя = Неопределено;
				Иначе
					СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
				КонецЕсли;
				
				СтрокаТаблицыПриход.КоррОрганизация = СтрокаТаблицаЗапасы.Организация;
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
 
				СтрокаТаблицыПриход.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
				
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = КоличествоТребуетсяСвободныйОстаток;
				
				СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru='Передача запасов'");
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
			Иначе
				
				Если СтрокаТаблицаЗапасы.ТоварыНаКомиссии Тогда
								
				ИначеЕсли Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					
					// Продвигаем доходы и расходы.
					СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
					
					СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.ПодразделениеПродажи;
					СтрокаДоходыИРасходы.ЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПродажи;
					Если СтрокаТаблицаЗапасы.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
						СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетДт;
					Иначе
						СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
					КонецЕсли;
					СтрокаДоходыИРасходы.СуммаДоходов = 0;
					СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
					СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
					
					СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
					
				КонецЕсли;
				
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
					// Продвигаем себестоимость продаж.
					Если Не СтрокаТаблицаЗапасы.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
						СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
						СтрокаПродажи.ЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПродажи;
						СтрокаПродажи.Количество = 0;
						СтрокаПродажи.Сумма = 0;
						СтрокаПродажи.СуммаНДС = 0;
						СтрокаПродажи.Себестоимость = СуммаКСписанию;
						СтрокаПродажи.Склад = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;	
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры // СформироватьТаблицаЗапасыПродажа()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыВозврат(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ТаблицаЗапасы.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)) КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				
	|					ОБЪЕДИНИТЬ ВСЕ
	|				
	|					ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
		
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	// Разделение строк в соответствии с заполненностью колонки "Резерв"
	ТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	Для каждого СтрокаТаблицаЗапасы Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицаЗапасы.ЗаказПокупателя) И СтрокаТаблицаЗапасы.Резерв<-СтрокаТаблицаЗапасы.Количество Тогда
			Если СтрокаТаблицаЗапасы.Резерв=0 Тогда
				СтрокаТаблицаЗапасы.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			Иначе
				НоваяСтрока = ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицаЗапасы);
				НоваяСтрока.Количество = -СтрокаТаблицаЗапасы.Резерв;
				НоваяСтрока.Резерв = 0;
				СтрокаТаблицаЗапасы.Количество = СтрокаТаблицаЗапасы.Количество + СтрокаТаблицаЗапасы.Резерв;
				СтрокаТаблицаЗапасы.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
		НоваяСтрока = ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицаЗапасы);
	КонецЦикла;
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ТаблицаЗапасы;
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
		
		КоличествоТребуетсяСвободныйОстаток = - СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстаток;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Запасы.
			Если Окр((СтрокаТаблицаЗапасы.Сумма + СуммаКСписанию), 2, 1) <> 0 Тогда
				
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
				
				РасчетнаяСумма = -(СтрокаТаблицыРасход.Сумма + СуммаКСписанию);
				СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Приход;
				СтрокаТаблицыРасход.Сумма = РасчетнаяСумма;
				
				СтрокаТаблицыРасход.Количество = 0;
				СтрокаТаблицыРасход.ДокументПродажи = ДокументСсылкаРасходнаяНакладная;
				СтрокаТаблицыРасход.Возврат = Истина;
				СтрокаТаблицыРасход.ФиксированнаяСтоимость = Истина;
				
				// Доходы и расходы.
				СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
				
				СтрокаДоходыИРасходы.СтруктурнаяЕдиница = Неопределено;
				СтрокаДоходыИРасходы.ЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПокупателя;
				СтрокаДоходыИРасходы.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Прочее;
				Если СтрокаТаблицыРасход.Сумма < 0 Тогда
					СтрокаДоходыИРасходы.СчетУчета = ПланыСчетов.Управленческий.ПрочиеРасходы;
					СтрокаДоходыИРасходы.СуммаРасходов = - СтрокаТаблицыРасход.Сумма;
				Иначе
					СтрокаДоходыИРасходы.СчетУчета = ПланыСчетов.Управленческий.ПрочиеДоходы;
					СтрокаДоходыИРасходы.СуммаДоходов = СтрокаТаблицыРасход.Сумма;
				КонецЕсли;
				
				СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
				
				// Управленческий.
				СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
				Если СтрокаТаблицыРасход.Сумма < 0 Тогда
					СтрокаТаблицаУправленческий.СчетДт = ПланыСчетов.Управленческий.ПрочиеРасходы;
					СтрокаТаблицаУправленческий.СчетКт = СтрокаТаблицаЗапасы.СчетКт;
					СтрокаТаблицаУправленческий.Сумма = - СтрокаТаблицыРасход.Сумма;
				Иначе
					СтрокаТаблицаУправленческий.СчетДт = СтрокаТаблицаЗапасы.СчетКт;
					СтрокаТаблицаУправленческий.СчетКт = ПланыСчетов.Управленческий.ПрочиеДоходы;
					СтрокаТаблицаУправленческий.Сумма = СтрокаТаблицыРасход.Сумма;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаЗапасыВозврат()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗакупки(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗакупки.Период КАК Период,
	|	ТаблицаЗакупки.Организация КАК Организация,
	|	ТаблицаЗакупки.Номенклатура КАК Номенклатура,
	|	ТаблицаЗакупки.Характеристика КАК Характеристика,
	|	ТаблицаЗакупки.Партия КАК Партия,
	|	ТаблицаЗакупки.Заказ КАК ЗаказПоставщику,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаЗакупки.ДокументОснование) = ТИП(Документ.ПриходнаяНакладная)
	|				И ТаблицаЗакупки.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|			ТОГДА ТаблицаЗакупки.ДокументОснование
	|		ИНАЧЕ ТаблицаЗакупки.Документ
	|	КОНЕЦ КАК Документ,
	|	ТаблицаЗакупки.СтавкаНДС КАК СтавкаНДС,
	|	-СУММА(ТаблицаЗакупки.Количество) КАК Количество,
	|	-СУММА(ТаблицаЗакупки.СуммаНДСЗакупкиПродажи) КАК СуммаНДС,
	|	-СУММА(ТаблицаЗакупки.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗакупки
	|ГДЕ
	|	ТаблицаЗакупки.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И (ТаблицаЗакупки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ИЛИ ТаблицаЗакупки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗакупки.Период,
	|	ТаблицаЗакупки.Организация,
	|	ТаблицаЗакупки.Номенклатура,
	|	ТаблицаЗакупки.Характеристика,
	|	ТаблицаЗакупки.Партия,
	|	ТаблицаЗакупки.Заказ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаЗакупки.ДокументОснование) = ТИП(Документ.ПриходнаяНакладная)
	|				И ТаблицаЗакупки.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|			ТОГДА ТаблицаЗакупки.ДокументОснование
	|		ИНАЧЕ ТаблицаЗакупки.Документ
	|	КОНЕЦ,
	|	ТаблицаЗакупки.СтавкаНДС";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗакупки", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗакупки()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажи(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Период КАК Период,
	|	ТаблицаПродажи.Организация КАК Организация,
	|	ТаблицаПродажи.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажи.Характеристика КАК Характеристика,
	|	ТаблицаПродажи.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаПродажи.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаПродажи.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ТаблицаПродажи.Документ КАК Документ,
	|	ТаблицаПродажи.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПродажи.ПодразделениеПродажи КАК Подразделение,
	|	ТаблицаПродажи.Проект КАК Проект,
	|	ТаблицаПродажи.Ответственный КАК Ответственный,
	|	СУММА(ТаблицаПродажи.Количество) КАК Количество,
	|	СУММА(ТаблицаПродажи.СуммаНДСЗакупкиПродажи) КАК СуммаНДС,
	|	СУММА(ТаблицаПродажи.Сумма) КАК Сумма,
	|	СУММА(ТаблицаПродажи.Сумма + ТаблицаПродажи.СуммаСкидкиНаценки + ТаблицаПродажи.СуммаАвтоматическойСкидки) КАК СуммаБезСкидки,
	|	0 КАК Себестоимость,
	|	ТаблицаПродажи.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора КАК ХарактеристикаНабора
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПродажи
	|ГДЕ
	|	ТаблицаПродажи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И НЕ ТаблицаПродажи.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Период,
	|	ТаблицаПродажи.Организация,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаПродажи.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ТаблицаПродажи.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаПродажи.Документ,
	|	ТаблицаПродажи.СтавкаНДС,
	|	ТаблицаПродажи.ПодразделениеПродажи,
	|	ТаблицаПродажи.Проект,
	|	ТаблицаПродажи.Ответственный,
	|	ТаблицаПродажи.НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаВыпускПродукции(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаВыпускПродукции.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаВыпускПродукции.Период КАК Период,
	|	ТаблицаВыпускПродукции.Организация КАК Организация,
	|	ТаблицаВыпускПродукции.ПодразделениеПродажи КАК СтруктурнаяЕдиница,
	|	ТаблицаВыпускПродукции.Номенклатура КАК Номенклатура,
	|	ТаблицаВыпускПродукции.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаВыпускПродукции.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаВыпускПродукции.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	СУММА(ТаблицаВыпускПродукции.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаВыпускПродукции
	|ГДЕ
	|	ТаблицаВыпускПродукции.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВыпускПродукции.Период,
	|	ТаблицаВыпускПродукции.Организация,
	|	ТаблицаВыпускПродукции.ПодразделениеПродажи,
	|	ТаблицаВыпускПродукции.Номенклатура,
	|	ТаблицаВыпускПродукции.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаВыпускПродукции.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаВыпускПродукции.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыпускПродукции", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаВыпускПродукции()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасыНаСкладах.Период КАК Период,
	|	ТаблицаЗапасыНаСкладах.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.Ячейка КАК Ячейка,
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	(ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И НЕ ТаблицаЗапасыНаСкладах.ОрдерныйСклад
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Период,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.Ячейка";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыНаСкладах()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыКРасходуСоСкладов(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыКРасходуСоСкладов.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыКРасходуСоСкладов.Период КАК Период,
	|	ТаблицаЗапасыКРасходуСоСкладов.Организация КАК Организация,
	|	ТаблицаЗапасыКРасходуСоСкладов.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыКРасходуСоСкладов.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыКРасходуСоСкладов.Партия КАК Партия,
	|	ТаблицаЗапасыКРасходуСоСкладов.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СУММА(ТаблицаЗапасыКРасходуСоСкладов.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыКРасходуСоСкладов
	|ГДЕ
	|	ТаблицаЗапасыКРасходуСоСкладов.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ТаблицаЗапасыКРасходуСоСкладов.ОрдерныйСклад
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыКРасходуСоСкладов.Период,
	|	ТаблицаЗапасыКРасходуСоСкладов.Организация,
	|	ТаблицаЗапасыКРасходуСоСкладов.Номенклатура,
	|	ТаблицаЗапасыКРасходуСоСкладов.Характеристика,
	|	ТаблицаЗапасыКРасходуСоСкладов.Партия,
	|	ТаблицаЗапасыКРасходуСоСкладов.СтруктурнаяЕдиница";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКРасходуСоСкладов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыКРасходуСоСкладов()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыИАгентскиеУслугиПринятые(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	МИНИМУМ(ТаблицаЗапасыИАгентскиеУслугиПринятые.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Период КАК Период,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Организация КАК Организация,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Партия КАК Партия,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Контрагент КАК Контрагент,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Договор КАК Договор,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Заказ КАК Заказ,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.СчетУчета КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИАгентскиеУслугиПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеОтКомитента)
	|		КОГДА ТаблицаЗапасыИАгентскиеУслугиПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеВПереработку)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)
	|	КОНЕЦ КАК ТипПриемаПередачи,
	|	-СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Количество) КАК Количество,
	|	-СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.СуммаРасчетовПринятыеПереданные) КАК СуммаРасчетов,
	|	-СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.СуммаРасчетовПринятыеПереданные) КАК Сумма,
	|	0 КАК СуммаПродажи,
	|	&ВалютаУпрУчета КАК Валюта,
	|	-СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.СуммаРасчетовПринятыеПереданные) КАК СуммаВал,
	|	ВЫРАЗИТЬ(&ПриемЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыИАгентскиеУслугиПринятые
	|ГДЕ
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И (ТаблицаЗапасыИАгентскиеУслугиПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|			ИЛИ ТаблицаЗапасыИАгентскиеУслугиПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|			ИЛИ ТаблицаЗапасыИАгентскиеУслугиПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Период,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Организация,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Характеристика,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Партия,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Контрагент,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Договор,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Заказ,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИАгентскиеУслугиПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеОтКомитента)
	|		КОГДА ТаблицаЗапасыИАгентскиеУслугиПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеВПереработку)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	МИНИМУМ(ТаблицаЗапасыИАгентскиеУслугиПринятые.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Период,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Организация,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Характеристика,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Партия,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Заказ,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.СчетУчетаРасчетовСПоставщиком,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтчетКомитенту),
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Количество),
	|	0,
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Сумма),
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Сумма),
	|	&ВалютаУпрУчета,
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Сумма),
	|	ВЫРАЗИТЬ(&ПриемЗапасовТоварыНаКомиссии КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыИАгентскиеУслугиПринятые
	|ГДЕ
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ТаблицаЗапасыИАгентскиеУслугиПринятые.ТоварыНаКомиссии
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Период,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Организация,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Характеристика,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Партия,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Контрагент,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Договор,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Заказ,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.СчетУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	МИНИМУМ(ТаблицаЗапасыИАгентскиеУслугиПринятые.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Период,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Организация,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Характеристика,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.Поставщик,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.Договор,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Заказ,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.СчетУчетаРасчетовСПоставщиком,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеОтКомитента),
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Количество),
	|	0,
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Сумма),
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Сумма),
	|	&ВалютаУпрУчета,
	|	СУММА(ТаблицаЗапасыИАгентскиеУслугиПринятые.Сумма),
	|	ВЫРАЗИТЬ(&ТекстАгентскаяУслуга КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыИАгентскиеУслугиПринятые
	|ГДЕ
	|	&ИспользуютсяАгентскиеУслуги
	|	И ТаблицаЗапасыИАгентскиеУслугиПринятые.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.ЭтоАгентскаяУслуга
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Период,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Организация,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Характеристика,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.Поставщик,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Номенклатура.Договор,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.Заказ,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаЗапасыИАгентскиеУслугиПринятые.СчетУчета";
	
	Запрос.УстановитьПараметр("ПриемЗапасов", "");
	Запрос.УстановитьПараметр("ПриемЗапасовТоварыНаКомиссии", НСтр("ru = 'Прием запасов'"));
	Запрос.УстановитьПараметр("ИспользуютсяАгентскиеУслуги", ПолучитьФункциональнуюОпцию("АгентскиеУслуги"));
	Запрос.УстановитьПараметр("ТекстАгентскаяУслуга", НСтр("ru = 'Реализация агентской услуги'"));
	Запрос.УстановитьПараметр("ВалютаУпрУчета", УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыИАгентскиеУслугиПринятые", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПереданные(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыПереданные.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыПереданные.Период КАК Период,
	|	ТаблицаЗапасыПереданные.Организация КАК Организация,
	|	ТаблицаЗапасыПереданные.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыПереданные.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыПереданные.Партия КАК Партия,
	|	ТаблицаЗапасыПереданные.Контрагент КАК Контрагент,
	|	ТаблицаЗапасыПереданные.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|				И ТаблицаЗапасыПереданные.НеУчитыватьЗаказыПриПередачеНаКомиссию
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаЗапасыПереданные.Заказ
	|	КОНЕЦ КАК Заказ,
	|	ТаблицаЗапасыПереданные.НеУчитыватьЗаказыПриПередачеНаКомиссию КАК НеУчитыватьЗаказыПриПередачеНаКомиссию,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаКомиссионеру)
	|		КОГДА ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаВПереработку)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)
	|	КОНЕЦ КАК ТипПриемаПередачи,
	|	СУММА(ТаблицаЗапасыПереданные.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасыПереданные.СуммаРасчетовПринятыеПереданные) КАК СуммаРасчетов
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыПереданные
	|ГДЕ
	|	ТаблицаЗапасыПереданные.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И (ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ИЛИ ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|			ИЛИ ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыПереданные.Период,
	|	ТаблицаЗапасыПереданные.Организация,
	|	ТаблицаЗапасыПереданные.Номенклатура,
	|	ТаблицаЗапасыПереданные.Характеристика,
	|	ТаблицаЗапасыПереданные.Партия,
	|	ТаблицаЗапасыПереданные.Контрагент,
	|	ТаблицаЗапасыПереданные.Договор,
	|	ТаблицаЗапасыПереданные.НеУчитыватьЗаказыПриПередачеНаКомиссию,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаКомиссионеру)
	|		КОГДА ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаВПереработку)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|				И ТаблицаЗапасыПереданные.НеУчитыватьЗаказыПриПередачеНаКомиссию
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаЗапасыПереданные.Заказ
	|	КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПереданные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыПереданные()  

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	|ПОМЕСТИТЬ ОстаткиДоставки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыПокупателейОстатки.КоличествоОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				,
	|				(ЗаказПокупателя, Номенклатура) В
	|					(ВЫБРАТЬ
	|						ВременнаяТаблицаЗапасы.Заказ,
	|						ВременнаяТаблицаЗапасы.Номенклатура
	|					ИЗ
	|						ВременнаяТаблицаЗапасы
	|					ГДЕ
	|						ВременнаяТаблицаЗапасы.ЭтоДоставка)) КАК ЗаказыПокупателейОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыПокупателей.ЗаказПокупателя,
	|		ЗаказыПокупателей.Номенклатура,
	|		ВЫБОР
	|			КОГДА ЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЗаказыПокупателей.Количество
	|			ИНАЧЕ -ЗаказыПокупателей.Количество
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|	ГДЕ
	|		ЗаказыПокупателей.Регистратор = &Ссылка
	|		И (ЗаказыПокупателей.ЗаказПокупателя, ЗаказыПокупателей.Номенклатура) В
	|				(ВЫБРАТЬ
	|					ВременнаяТаблицаЗапасы.Заказ,
	|					ВременнаяТаблицаЗапасы.Номенклатура
	|				ИЗ
	|					ВременнаяТаблицаЗапасы
	|				ГДЕ
	|					ВременнаяТаблицаЗапасы.ЭтоДоставка)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ЗаказПокупателя,
	|	ВложенныйЗапрос.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗаказыПокупателей.Период КАК Период,
	|	ТаблицаЗаказыПокупателей.Организация КАК Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика КАК Характеристика,
	|	ТаблицаЗаказыПокупателей.Заказ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказыПокупателей.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ТаблицаЗаказыПокупателей.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаЗаказыПокупателей.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	СУММА(ТаблицаЗаказыПокупателей.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗаказыПокупателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиДоставки КАК ОстаткиДоставки
	|		ПО ТаблицаЗаказыПокупателей.Заказ = ОстаткиДоставки.ЗаказПокупателя
	|			И ТаблицаЗаказыПокупателей.Номенклатура = ОстаткиДоставки.Номенклатура
	|ГДЕ
	|	НЕ ТаблицаЗаказыПокупателей.Заказ В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	|	И ТаблицаЗаказыПокупателей.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|	И (ТаблицаЗаказыПокупателей.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ИЛИ ТаблицаЗаказыПокупателей.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ИЛИ ТаблицаЗаказыПокупателей.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение))
	|	И (НЕ ТаблицаЗаказыПокупателей.ЭтоДоставка
	|			ИЛИ ЕСТЬNULL(ОстаткиДоставки.Количество, 0) > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Период,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.Заказ,
	|	ТаблицаЗаказыПокупателей.ЭтоДоставка,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказыПокупателей.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ТаблицаЗаказыПокупателей.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаЗаказыПокупателей.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗаказыПокупателей = РезультатЗапроса.Выгрузить();
	РегистрыНакопления.ЗаказыПокупателей.ДобавитьДвиженияСУчетомСкладов(ДокументСсылкаРасходнаяНакладная, ТаблицаЗаказыПокупателей);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей", ТаблицаЗаказыПокупателей);
	
КонецПроцедуры // СформироватьТаблицаЗаказыПокупателей()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗаказыПоставщикам(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПоставщикам.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗаказыПоставщикам.Период КАК Период,
	|	ТаблицаЗаказыПоставщикам.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказыПоставщикам.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ТаблицаЗаказыПоставщикам.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаЗаказыПоставщикам.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ТаблицаЗаказыПоставщикам.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказыПоставщикам.Характеристика КАК Характеристика,
	|	ТаблицаЗаказыПоставщикам.Заказ КАК ЗаказПоставщику,
	|	-СУММА(ТаблицаЗаказыПоставщикам.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗаказыПоставщикам
	|ГДЕ
	|	ТаблицаЗаказыПоставщикам.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ТаблицаЗаказыПоставщикам.Заказ <> НЕОПРЕДЕЛЕНО
	|	И (ТаблицаЗаказыПоставщикам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ИЛИ ТаблицаЗаказыПоставщикам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|			ИЛИ ТаблицаЗаказыПоставщикам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПоставщикам.Период,
	|	ТаблицаЗаказыПоставщикам.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказыПоставщикам.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ТаблицаЗаказыПоставщикам.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаЗаказыПоставщикам.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаЗаказыПоставщикам.Номенклатура,
	|	ТаблицаЗаказыПоставщикам.Характеристика,
	|	ТаблицаЗаказыПоставщикам.Заказ";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗаказыПоставщикам = РезультатЗапроса.Выгрузить();
	РегистрыНакопления.ЗаказыПоставщикам.ДобавитьДвиженияСУчетомСкладов(ДокументСсылкаРасходнаяНакладная, ТаблицаЗаказыПоставщикам);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПоставщикам", ТаблицаЗаказыПоставщикам);
	
КонецПроцедуры // СформироватьТаблицаЗаказыПоставщикам()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходы(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	// Установка исключительной блокировки остатков подарочных сертификатов и создание временной таблицы
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Документ КАК ПодарочныйСертификат,
		|	ТаблицаДокумента.НомерСертификата КАК НомерСертификата
		|ИЗ
		|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
		|ГДЕ
		|	НЕ ТаблицаДокумента.ЧастичноеПогашение
		|	И ТаблицаДокумента.ОплатаСертификатом
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.НомерСертификата,
		|	ТаблицаДокумента.Документ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			// Создадим пустую временную таблицу, чтобы избежать
			// ошибок при обращениях к ней в других процедурах
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НЕОПРЕДЕЛЕНО КАК ПодарочныйСертификат,
			|	НЕОПРЕДЕЛЕНО КАК НомерСертификата,
			|	0 КАК СуммаОстаток
			|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиСертификатов";
			Запрос.Выполнить();
			
		Иначе
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПодарочныеСертификаты");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			
			Для Каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
			КонецЦикла;
			Блокировка.Заблокировать();
			
			Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры Тогда
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
				Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВложенныйЗапрос.ПодарочныйСертификат КАК ПодарочныйСертификат,
				|	ВложенныйЗапрос.НомерСертификата КАК НомерСертификата,
				|	СУММА(ВложенныйЗапрос.СуммаОстаток) КАК СуммаОстаток
				|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиСертификатов
				|ИЗ
				|	(ВЫБРАТЬ
				|		ПодарочныеСертификатыОстатки.ПодарочныйСертификат КАК ПодарочныйСертификат,
				|		ПодарочныеСертификатыОстатки.НомерСертификата КАК НомерСертификата,
				|		ПодарочныеСертификатыОстатки.СуммаОстаток КАК СуммаОстаток
				|	ИЗ
				|		РегистрНакопления.ПодарочныеСертификаты.Остатки(, ) КАК ПодарочныеСертификатыОстатки
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаПредоплата КАК ВременнаяТаблицаПредоплата
				|			ПО ПодарочныеСертификатыОстатки.ПодарочныйСертификат = ВременнаяТаблицаПредоплата.Документ
				|				И ПодарочныеСертификатыОстатки.НомерСертификата = ВременнаяТаблицаПредоплата.НомерСертификата
				|				И (ВременнаяТаблицаПредоплата.ОплатаСертификатом)
				|				И (НЕ ВременнаяТаблицаПредоплата.ЧастичноеПогашение)
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ПодарочныеСертификаты.ПодарочныйСертификат,
				|		ПодарочныеСертификаты.НомерСертификата,
				|		ВЫБОР
				|			КОГДА ПодарочныеСертификаты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
				|				ТОГДА ПодарочныеСертификаты.Сумма
				|			ИНАЧЕ -ПодарочныеСертификаты.Сумма
				|		КОНЕЦ
				|	ИЗ
				|		РегистрНакопления.ПодарочныеСертификаты КАК ПодарочныеСертификаты
				|	ГДЕ
				|		ПодарочныеСертификаты.Регистратор = &Ссылка) КАК ВложенныйЗапрос
				|
				|СГРУППИРОВАТЬ ПО
				|	ВложенныйЗапрос.ПодарочныйСертификат,
				|	ВложенныйЗапрос.НомерСертификата";
				
				Запрос.Выполнить();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаДоходыИРасходы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДоходыИРасходы.Период КАК Период,
	|	ТаблицаДоходыИРасходы.Организация КАК Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи КАК СтруктурнаяЕдиница,
	|	ТаблицаДоходыИРасходы.Проект КАК Проект,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаДоходыИРасходы.Заказ КАК ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика,
	|	ВЫРАЗИТЬ(&Выручка КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК СуммаДоходов,
	|	0 КАК СуммаРасходов,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДоходыИРасходы
	|ГДЕ
	|	ТаблицаДоходыИРасходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И НЕ ТаблицаДоходыИРасходы.ТоварыНаКомиссии
	|	И НЕ ТаблицаДоходыИРасходы.ЭтоАгентскаяУслуга
	|	И ТаблицаДоходыИРасходы.Сумма <> 0
	|	И НЕ ТаблицаДоходыИРасходы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Период,
	|	ТаблицаДоходыИРасходы.НомерСтроки,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи,
	|	ТаблицаДоходыИРасходы.Проект,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи,
	|	ТаблицаДоходыИРасходы.Заказ,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее),
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА &ОтрицательнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ &ПоложительнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ТаблицаДокумента.Валюта,
	|	&КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщиками КАК ТаблицаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	1,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее),
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ТаблицаДокумента.Валюта,
	|	&КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата КАК Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация КАК Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта КАК Валюта,
	|		СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) КАК СуммаКурсовойРазницы
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Дата КАК Дата,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.Валюта КАК Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы КАК СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаКурсовыхРазницРасчетыСПокупателями
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) >= 0.005
	|			ИЛИ СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) <= -0.005)) КАК ТаблицаДокумента";
	
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
		Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	4,
			|	0,
			|	ТаблицаДоходыИРасходы.Период,
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.Подразделение,
			|	ТаблицаДоходыИРасходы.Проект,
			|	НЕОПРЕДЕЛЕНО,
			|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов,
			|	НЕОПРЕДЕЛЕНО,
			|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)),
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаДоходыИРасходы.ИспользоватьСерииНоменклатуры
			|				ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ТаблицаДоходыИРасходы.Сумма
			|			ИНАЧЕ ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма
			|		КОНЕЦ),
			|	0,
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаДоходыИРасходы.ИспользоватьСерииНоменклатуры
			|				ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ТаблицаДоходыИРасходы.Сумма
			|			ИНАЧЕ ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма
			|		КОНЕЦ)
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДоходыИРасходы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиСертификатов КАК ПодарочныеСертификатыОстатки
			|		ПО ТаблицаДоходыИРасходы.Документ = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
			|			И ТаблицаДоходыИРасходы.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
			|ГДЕ
			|	ТаблицаДоходыИРасходы.ОплатаСертификатом
			|	И НЕ ТаблицаДоходыИРасходы.ЧастичноеПогашение
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.Подразделение,
			|	ТаблицаДоходыИРасходы.Проект,
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов,
			|	ТаблицаДоходыИРасходы.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок,
			|	НомерСтроки";
			
		Иначе
			
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	4,
			|	0,
			|	ТаблицаДоходыИРасходы.Период,
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.Подразделение,
			|	ТаблицаДоходыИРасходы.Проект,
			|	НЕОПРЕДЕЛЕНО,
			|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов,
			|	НЕОПРЕДЕЛЕНО,
			|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)),
			|	СУММА(ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма),
			|	0,
			|	СУММА(ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма)
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДоходыИРасходы
			|ГДЕ
			|	ТаблицаДоходыИРасходы.ОплатаСертификатом
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.Подразделение,
			|	ТаблицаДоходыИРасходы.Проект,
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов,
			|	ТаблицаДоходыИРасходы.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок,
			|	НомерСтроки";
			
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("Выручка", НСтр("ru='Выручка от продажи'"));
	Запрос.УстановитьПараметр("Доставка", НСтр("ru='Выручка от доставки'"));
	Запрос.УстановитьПараметр("ОтражениеДоходов", НСтр("ru='Отражение доходов'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Исключая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПотребностьВЗапасах(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПотребностьВЗапасах.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаПотребностьВЗапасах.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ВЫБОР
	|		КОГДА ТаблицаПотребностьВЗапасах.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ТаблицаПотребностьВЗапасах.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаПотребностьВЗапасах.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ТаблицаПотребностьВЗапасах.Номенклатура КАК Номенклатура,
	|	ТаблицаПотребностьВЗапасах.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА (&ИспользоватьРезервирование
	|				ИЛИ ТаблицаПотребностьВЗапасах.УчетПотребностиПоЗаказам)
	|				И ТаблицаПотребностьВЗапасах.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ТаблицаПотребностьВЗапасах.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|				И ТаблицаПотребностьВЗапасах.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ТаблицаПотребностьВЗапасах.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка) КАК ЗаказНаПроизводство,
	|	СУММА(ТаблицаПотребностьВЗапасах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПотребностьВЗапасах
	|ГДЕ
	|	ТаблицаПотребностьВЗапасах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ТаблицаПотребностьВЗапасах.Заказ <> НЕОПРЕДЕЛЕНО
	|	И ТаблицаПотребностьВЗапасах.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПотребностьВЗапасах.Период,
	|	ТаблицаПотребностьВЗапасах.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаПотребностьВЗапасах.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ТаблицаПотребностьВЗапасах.УчетПотребностиПоСкладам
	|			ТОГДА ТаблицаПотребностьВЗапасах.СтруктурнаяЕдиница
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаПотребностьВЗапасах.Номенклатура,
	|	ТаблицаПотребностьВЗапасах.Характеристика,
	|	ВЫБОР
	|		КОГДА (&ИспользоватьРезервирование
	|				ИЛИ ТаблицаПотребностьВЗапасах.УчетПотребностиПоЗаказам)
	|				И ТаблицаПотребностьВЗапасах.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ТаблицаПотребностьВЗапасах.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|				И ТаблицаПотребностьВЗапасах.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ТаблицаПотребностьВЗапасах.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("ИспользоватьРезервирование", СтруктураДополнительныеСвойства.УчетнаяПолитика.РезервированиеЗапасов);
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПотребностьВЗапасах", РезультатЗапроса.Выгрузить());
	
	// Получение остатков
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПотребностьВЗапасахОстатки.Организация КАК Организация,
	|	ПотребностьВЗапасахОстатки.Склад КАК Склад,
	|	ПотребностьВЗапасахОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ПотребностьВЗапасахОстатки.Номенклатура КАК Номенклатура,
	|	ПотребностьВЗапасахОстатки.Характеристика КАК Характеристика,
	|	СУММА(ПотребностьВЗапасахОстатки.Количество) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПотребностьВЗапасахОстатки.Организация КАК Организация,
	|		ПотребностьВЗапасахОстатки.Склад КАК Склад,
	|		ПотребностьВЗапасахОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ПотребностьВЗапасахОстатки.Номенклатура КАК Номенклатура,
	|		ПотребностьВЗапасахОстатки.Характеристика КАК Характеристика,
	|		СУММА(ПотребностьВЗапасахОстатки.КоличествоОстаток) КАК Количество
	|	ИЗ
	|		РегистрНакопления.ПотребностьВЗапасах.Остатки(
	|				&МоментКонтроля,
	|				(Организация, ТипДвижения, ЗаказПокупателя, ЗаказНаПроизводство, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация КАК Организация,
	|						ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|						ВЫБОР
	|							КОГДА (&ИспользоватьРезервирование
	|									ИЛИ ТаблицаЗапасы.УчетПотребностиПоЗаказам)
	|									И ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|									И ТаблицаЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|									И ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|								ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|							ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						КОНЕЦ КАК ЗаказПокупателя,
	|						ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка) КАК ЗаказНаПроизводство,
	|						ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|						ТаблицаЗапасы.Характеристика КАК Характеристика
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ПотребностьВЗапасахОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПотребностьВЗапасахОстатки.Организация,
	|		ПотребностьВЗапасахОстатки.Склад,
	|		ПотребностьВЗапасахОстатки.ЗаказПокупателя,
	|		ПотребностьВЗапасахОстатки.ЗаказНаПроизводство,
	|		ПотребностьВЗапасахОстатки.Номенклатура,
	|		ПотребностьВЗапасахОстатки.Характеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаПотребностьВЗапасах.Организация,
	|		ДвиженияДокументаПотребностьВЗапасах.Склад,
	|		ДвиженияДокументаПотребностьВЗапасах.ЗаказПокупателя,
	|		ДвиженияДокументаПотребностьВЗапасах.Номенклатура,
	|		ДвиженияДокументаПотребностьВЗапасах.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаПотребностьВЗапасах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаПотребностьВЗапасах.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаПотребностьВЗапасах.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ПотребностьВЗапасах КАК ДвиженияДокументаПотребностьВЗапасах
	|	ГДЕ
	|		ДвиженияДокументаПотребностьВЗапасах.Регистратор = &Ссылка) КАК ПотребностьВЗапасахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотребностьВЗапасахОстатки.Организация,
	|	ПотребностьВЗапасахОстатки.Склад,
	|	ПотребностьВЗапасахОстатки.ЗаказПокупателя,
	|	ПотребностьВЗапасахОстатки.Номенклатура,
	|	ПотребностьВЗапасахОстатки.Характеристика";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.УстановитьПараметр("МоментКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПотребностьВЗапасахОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаПотребностьВЗапасахОстатки.Индексы.Добавить("Организация, ЗаказПокупателя, Номенклатура, Характеристика");
	
	ВременнаяТаблицаПотребностьВЗапасах = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВЗапасах.СкопироватьКолонки();
	
	Для каждого СтрокаТаблицыПотребностьВЗапасах Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВЗапасах Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицыПотребностьВЗапасах.Организация);
		СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицыПотребностьВЗапасах.ЗаказПокупателя);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицыПотребностьВЗапасах.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицыПотребностьВЗапасах.Характеристика);
		СтруктураДляПоиска.Вставить("Склад", СтрокаТаблицыПотребностьВЗапасах.Склад);
		МассивСтрокОстатков = ТаблицаПотребностьВЗапасахОстатки.НайтиСтроки(СтруктураДляПоиска);
		СтруктураДляПоиска.Удалить("Склад");
		ДополнительныеСтроки = ТаблицаПотребностьВЗапасахОстатки.НайтиСтроки(СтруктураДляПоиска);;
		Для каждого ДополнительнаяСтрока Из ДополнительныеСтроки Цикл
			Если СтрокаТаблицыПотребностьВЗапасах.Склад = ДополнительнаяСтрока.Склад Тогда
				Продолжить;
			КонецЕсли;     
			МассивСтрокОстатков.Добавить(ДополнительнаяСтрока);
		КонецЦикла;
		
		Для каждого СтрокаОстатка Из МассивСтрокОстатков Цикл
			Зачтено = Мин(СтрокаТаблицыПотребностьВЗапасах.Количество, СтрокаОстатка.КоличествоОстаток);
			Если Зачтено <= 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицыРасход = ВременнаяТаблицаПотребностьВЗапасах.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицыПотребностьВЗапасах);
			СтрокаТаблицыРасход.Количество = Зачтено;
			СтрокаТаблицыПотребностьВЗапасах.Количество = СтрокаТаблицыПотребностьВЗапасах.Количество - Зачтено;
			СтрокаОстатка.КоличествоОстаток = СтрокаОстатка.КоличествоОстаток - Зачтено;
			Если СтрокаТаблицыПотребностьВЗапасах.Количество <= 0 Тогда
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВЗапасах = ВременнаяТаблицаПотребностьВЗапасах;
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРазмещениеЗаказов(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Размещение запасов и расходов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРазмещениеЗапасы.Период КАК Период,
	|	ТаблицаРазмещениеЗапасы.Организация КАК Организация,
	|	ТаблицаРазмещениеЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаРазмещениеЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаРазмещениеЗапасы.Заказ КАК Заказ,
	|	ТаблицаРазмещениеЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ТаблицаРазмещениеЗапасы.Количество) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаРазмещение
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаРазмещениеЗапасы
	|ГДЕ
	|	НЕ ТаблицаРазмещениеЗапасы.Заказ В (ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|	И НЕ ТаблицаРазмещениеЗапасы.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И ТаблицаРазмещениеЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРазмещениеЗапасы.Период,
	|	ТаблицаРазмещениеЗапасы.Организация,
	|	ТаблицаРазмещениеЗапасы.Номенклатура,
	|	ТаблицаРазмещениеЗапасы.Характеристика,
	|	ТаблицаРазмещениеЗапасы.Заказ,
	|	ТаблицаРазмещениеЗапасы.ЗаказПокупателя";
	
	Запрос.Выполнить();
	
	// Установка исключительной блокировки контролируемых размещений заказов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРазмещениеЗаказов.Организация КАК Организация,
	|	ТаблицаРазмещениеЗаказов.Номенклатура КАК Номенклатура,
	|	ТаблицаРазмещениеЗаказов.Характеристика КАК Характеристика,
	|	ТаблицаРазмещениеЗаказов.Заказ КАК ИсточникОбеспечения,
	|	ТаблицаРазмещениеЗаказов.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	ВременнаяТаблицаРазмещение КАК ТаблицаРазмещениеЗаказов";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РазмещениеЗаказов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РазмещениеЗаказовОстатки.Организация КАК Организация,
	|	РазмещениеЗаказовОстатки.Номенклатура КАК Номенклатура,
	|	РазмещениеЗаказовОстатки.Характеристика КАК Характеристика,
	|	РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	РазмещениеЗаказовОстатки.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|	СУММА(РазмещениеЗаказовОстатки.КоличествоОстаток) КАК Количество
	|ПОМЕСТИТЬ РазмещениеЗаказовОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РазмещениеЗаказовОбороты.Организация КАК Организация,
	|		РазмещениеЗаказовОбороты.Номенклатура КАК Номенклатура,
	|		РазмещениеЗаказовОбороты.Характеристика КАК Характеристика,
	|		РазмещениеЗаказовОбороты.ЗаказПокупателя КАК ЗаказПокупателя,
	|		РазмещениеЗаказовОбороты.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|		РазмещениеЗаказовОбороты.КоличествоРасход КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.РазмещениеЗаказов.Обороты(
	|				,
	|				,
	|				Авто,
	|				(Организация, Номенклатура, Характеристика, ИсточникОбеспечения, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаРазмещениеЗаказов.Организация КАК Организация,
	|						ТаблицаРазмещениеЗаказов.Номенклатура КАК Номенклатура,
	|						ТаблицаРазмещениеЗаказов.Характеристика КАК Характеристика,
	|						ТаблицаРазмещениеЗаказов.Заказ КАК ИсточникОбеспечения,
	|						ТаблицаРазмещениеЗаказов.ЗаказПокупателя КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаРазмещение КАК ТаблицаРазмещениеЗаказов)) КАК РазмещениеЗаказовОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРазмещениеЗаказов.Организация,
	|		ДвиженияДокументаРазмещениеЗаказов.Номенклатура,
	|		ДвиженияДокументаРазмещениеЗаказов.Характеристика,
	|		ДвиженияДокументаРазмещениеЗаказов.ЗаказПокупателя,
	|		ДвиженияДокументаРазмещениеЗаказов.ИсточникОбеспечения,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРазмещениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РазмещениеЗаказов КАК ДвиженияДокументаРазмещениеЗаказов
	|	ГДЕ
	|		ДвиженияДокументаРазмещениеЗаказов.Регистратор = &Ссылка
	|		И ДвиженияДокументаРазмещениеЗаказов.Период <= &ПериодКонтроля) КАК РазмещениеЗаказовОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РазмещениеЗаказовОстатки.Организация,
	|	РазмещениеЗаказовОстатки.Номенклатура,
	|	РазмещениеЗаказовОстатки.Характеристика,
	|	РазмещениеЗаказовОстатки.ЗаказПокупателя,
	|	РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаРазмещениеЗаказов.Период КАК Период,
	|	ТаблицаРазмещениеЗаказов.Организация КАК Организация,
	|	ТаблицаРазмещениеЗаказов.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаРазмещениеЗаказов.Номенклатура КАК Номенклатура,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ТаблицаРазмещениеЗаказов.Характеристика КАК Характеристика,
	|	ТаблицаРазмещениеЗаказов.Заказ КАК ИсточникОбеспечения,
	|	-ВЫБОР
	|		КОГДА ТаблицаРазмещениеЗаказов.Количество > ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|			ТОГДА ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|		КОГДА ТаблицаРазмещениеЗаказов.Количество <= ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|			ТОГДА ТаблицаРазмещениеЗаказов.Количество
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ВременнаяТаблицаРазмещение КАК ТаблицаРазмещениеЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РазмещениеЗаказовОстатки КАК РазмещениеЗаказовОстатки
	|		ПО ТаблицаРазмещениеЗаказов.Организация = РазмещениеЗаказовОстатки.Организация
	|			И ТаблицаРазмещениеЗаказов.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|			И ТаблицаРазмещениеЗаказов.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|			И ТаблицаРазмещениеЗаказов.Заказ = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|			И ТаблицаРазмещениеЗаказов.ЗаказПокупателя = РазмещениеЗаказовОстатки.ЗаказПокупателя
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТаблицаРазмещениеЗаказов.Количество > ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|				ТОГДА ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|			КОГДА ТаблицаРазмещениеЗаказов.Количество <= ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|				ТОГДА ТаблицаРазмещениеЗаказов.Количество
	|		КОНЕЦ <> 0";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриходнаяНакладная);
	Запрос.УстановитьПараметр("МоментКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.ПериодКонтроля);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРазмещениеЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаРазмещениеЗаказов()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ВозникновениеОбязательствПокупателя", НСтр("ru='Возникновение обязательств покупателя'"));
	Запрос.УстановитьПараметр("ВозникновениеОбязательствПокупателяПоДоставке", НСтр("ru='Возникновение обязательств покупателя по доставке'"));
	Запрос.УстановитьПараметр("ВозникновениеАвансаПокупателя", НСтр("ru='Возникновение аванса покупателя'"));
	Запрос.УстановитьПараметр("ЗачетАванса", НСтр("ru='Зачет предоплаты'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	Для Каждого КлючИЗначение Из СтруктураДополнительныеСвойства.ДляСертификатов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Если ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю Тогда
		
		РасчетыПроведениеДокументов.СформироватьДвиженияПоВзаиморасчетам(СтруктураДополнительныеСвойства, ДокументСсылкаРасходнаяНакладная, Запрос.Параметры);
		РасчетыПроведениеДокументов.ПересчитатьТаблицыПоКурсамВалют(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
		РасчетыПроведениеДокументов.ПоместитьПересчитанныеТаблицыВМенеджерВременныхТаблиц(СтруктураДополнительныеСвойства);
		ПолучатьРеквизитыРасчетов = Истина;
		
	Иначе
		
		РасчетыПроведениеДокументов.СформироватьПустуюВременнуюТаблицуРасчетов(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства, Запрос.Параметры);
		ПолучатьРеквизитыРасчетов = Ложь;
		
	КонецЕсли;
	// Установка исключительной блокировки контролируемых остатков расчетов с контрагентами.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРасчетыСПокупателями.Организация КАК Организация,
	|	ВременнаяТаблицаРасчетыСПокупателями.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаРасчетыСПокупателями.Договор КАК Договор,
	|	ВременнаяТаблицаРасчетыСПокупателями.Документ КАК Документ,
	|	ВременнаяТаблицаРасчетыСПокупателями.Заказ КАК Заказ,
	|	ВременнаяТаблицаРасчетыСПокупателями.ТипРасчетов КАК ТипРасчетов
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПокупателями";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПокупателями");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = КурсовыеРазницыУНФ.ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПокупателями(Запрос.МенеджерВременныхТаблиц, Истина, НомерЗапроса, ПолучатьРеквизитыРасчетов);
	МассивРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПокупателями", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасчетыСПоставщиками(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("СторнированиеДолга", НСтр("ru='Сторнирование долга'"));
	Запрос.УстановитьПараметр("ВосстановлениеПредоплаты", НСтр("ru='Восстановление предоплаты'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	Если ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику Тогда
		СформироватьТаблицуВзаиморасчетовПоОперацииВозврата(Запрос);
	Иначе
		СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком = НЕ СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком;
		РасчетыПроведениеДокументов.СформироватьПустуюВременнуюТаблицуРасчетов(ДокументСсылкаРасходнаяНакладная, 	СтруктураДополнительныеСвойства, Запрос.Параметры);
		СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком = НЕ СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком;
	КонецЕсли;
	
	// Установка исключительной блокировки контролируемых остатков расчетов с контрагентами.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРасчетыСПоставщиками.Организация КАК Организация,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Договор КАК Договор,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Документ КАК Документ,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Заказ КАК Заказ,
	|	ВременнаяТаблицаРасчетыСПоставщиками.ТипРасчетов КАК ТипРасчетов
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПоставщиками КАК ВременнаяТаблицаРасчетыСПоставщиками";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПоставщиками");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = КурсовыеРазницыУНФ.ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПоставщиками(Запрос.МенеджерВременныхТаблиц, Ложь, НомерЗапроса);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПоставщиками", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыОтложенные(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ТаблицаДокумента.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов,
	|	ТаблицаДокумента.Сумма КАК НеРаспределено
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И ТаблицаДокумента.Сумма <> 0
	|	И НЕ ТаблицаДокумента.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Организация КАК Организация,
	|	СУММА(ТаблицаДокумента.Сумма) КАК СуммаКСписанию
	|ИЗ
	|	ВременнаяТаблицаПредоплатаДляКассовогоМетода КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ВременнаяТаблицаШапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Статья КАК Статья
	|ИЗ
	|	ВременнаяТаблицаПредоплатаДляКассовогоМетода КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ВременнаяТаблицаШапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаЗапасыДоходыИРасходыОтложенные = МассивРезультатов[0].Выгрузить();
	ВыборкаРезультатаЗапроса = МассивРезультатов[1].Выбрать();
	
	ТаблицаПредоплатаДоходыИРасходыОтложенные = ТаблицаЗапасыДоходыИРасходыОтложенные.Скопировать();
	ТаблицаПредоплатаДоходыИРасходыОтложенные.Очистить();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		СуммаКСписанию = ВыборкаРезультатаЗапроса.СуммаКСписанию;
		Для каждого СтрокаЗапасыДоходыИРасходыОтложенные Из ТаблицаЗапасыДоходыИРасходыОтложенные Цикл
			Если СуммаКСписанию = 0 Тогда
				Продолжить
			ИначеЕсли СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов <= СуммаКСписанию Тогда
				СтрокаПредоплатаДоходыИРасходыОтложенные = ТаблицаПредоплатаДоходыИРасходыОтложенные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПредоплатаДоходыИРасходыОтложенные, СтрокаЗапасыДоходыИРасходыОтложенные);
				СуммаКСписанию = СуммаКСписанию - СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов;
			ИначеЕсли СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов > СуммаКСписанию Тогда
				СтрокаПредоплатаДоходыИРасходыОтложенные = ТаблицаПредоплатаДоходыИРасходыОтложенные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПредоплатаДоходыИРасходыОтложенные, СтрокаЗапасыДоходыИРасходыОтложенные);
				СтрокаПредоплатаДоходыИРасходыОтложенные.СуммаДоходов = СуммаКСписанию;
				СуммаКСписанию = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаПредоплатаДоходыИРасходыОтложенные Из ТаблицаПредоплатаДоходыИРасходыОтложенные Цикл
		СтрокаЗапасыДоходыИРасходыОтложенные = ТаблицаЗапасыДоходыИРасходыОтложенные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗапасыДоходыИРасходыОтложенные, СтрокаПредоплатаДоходыИРасходыОтложенные);
		СтрокаЗапасыДоходыИРасходыОтложенные.ВидДвижения = ВидДвиженияНакопления.Расход;
		СтрокаЗапасыДоходыИРасходыОтложенные.НеРаспределено = -СтрокаПредоплатаДоходыИРасходыОтложенные.СуммаДоходов;
	КонецЦикла;
	
	ВыборкаРезультатаЗапроса = МассивРезультатов[2].Выбрать();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Статья = ВыборкаРезультатаЗапроса.Статья;
	Иначе
		Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Период КАК Период,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Документ КАК Документ,
	|	&Статья КАК Статья,
	|	Таблица.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Таблица.СуммаДоходов КАК СуммаДоходов
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплатаДоходыИРасходыОтложенные
	|ИЗ
	|	&Таблица КАК Таблица";
	Запрос.УстановитьПараметр("Таблица", ТаблицаПредоплатаДоходыИРасходыОтложенные);
	Запрос.УстановитьПараметр("Статья", Статья);
	
	Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыОтложенные", ТаблицаЗапасыДоходыИРасходыОтложенные);
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыОтложенные()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Если СтруктураДополнительныеСвойства.СпособЗачетаПредоплаты <> Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто
		И СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ТаблицаДокумента.Период КАК Период,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК Документ,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
		|	ТаблицаДокумента.Сумма КАК СуммаДоходов
		|ИЗ
		|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
		|ГДЕ
		|	&КассовыйМетодУчетаДоходовИРасходов
		|	И ТаблицаДокумента.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
		Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
			|	ТаблицаДокумента.Период,
			|	ТаблицаДокумента.Организация,
			|	ВЫБОР
			|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
			|			ТОГДА ТаблицаДокумента.Документ
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ,
			|	ТаблицаДокумента.Статья,
			|	ВЫБОР
			|		КОГДА НЕ ТаблицаДокумента.ОплатаСертификатом
			|			ТОГДА ТаблицаДокумента.Сумма
			|		КОГДА ТаблицаДокумента.ЧастичноеПогашение
			|			ТОГДА ТаблицаДокумента.Сумма
			|		КОГДА ТаблицаДокумента.ИспользоватьСерииНоменклатуры
			|			ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0)
			|		ИНАЧЕ ТаблицаДокумента.Номинал
			|	КОНЕЦ
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиСертификатов КАК ПодарочныеСертификатыОстатки
			|		ПО ТаблицаДокумента.Документ = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
			|			И ТаблицаДокумента.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
			|ГДЕ
			|	&КассовыйМетодУчетаДоходовИРасходов
			|	И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
			|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация";
			
		Иначе
			
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
			|	ТаблицаДокумента.Период,
			|	ТаблицаДокумента.Организация,
			|	ВЫБОР
			|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
			|			ТОГДА ТаблицаДокумента.Документ
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ,
			|	ТаблицаДокумента.Статья,
			|	ВЫБОР
			|		КОГДА НЕ ТаблицаДокумента.ОплатаСертификатом
			|			ТОГДА ТаблицаДокумента.Сумма
			|		ИНАЧЕ ТаблицаДокумента.Номинал
			|	КОНЕЦ
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
			|ГДЕ
			|	&КассовыйМетодУчетаДоходовИРасходов
			|	И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
			|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация";
			
		КонецЕсли;
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ТаблицаДокумента.Период КАК Период,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
		|			ТОГДА ТаблицаДокумента.Документ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Документ,
		|	ТаблицаДокумента.Статья КАК Статья,
		|	ТаблицаДокумента.Сумма КАК СуммаДоходов
		|ИЗ
		|	ВременнаяТаблицаПредоплатаДляКассовогоМетода КАК ТаблицаДокумента,
		|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
		|ГДЕ
		|	&КассовыйМетодУчетаДоходовИРасходов
		|	И ВременнаяТаблицаШапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
		|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыНераспределенные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыНераспределенные()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ДокументДата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаДокумента.Статья,
	|	-ТаблицаДокумента.Сумма
	|ИЗ
	|	ВременнаяТаблицаПредоплатаДляКассовогоМетода КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ВременнаяТаблицаШапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Период,
	|	Таблица.Организация,
	|	Таблица.НаправлениеДеятельности,
	|	Таблица.Статья,
	|	Таблица.СуммаДоходов
	|ИЗ
	|	ВременнаяТаблицаПредоплатаДоходыИРасходыОтложенные КАК Таблица";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетод", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыКассовыйМетод()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаУправленческий(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаУправленческий.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУправленческий.Период КАК Период,
	|	ТаблицаУправленческий.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии ИЛИ ТаблицаУправленческий.ЭтоАгентскаяУслуга
	|			ТОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчетаПродажи
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии ИЛИ ТаблицаУправленческий.ЭтоАгентскаяУслуга
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии ИЛИ ТаблицаУправленческий.ЭтоАгентскаяУслуга
	|			ТОГДА ТаблицаУправленческий.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ТаблицаУправленческий.Сумма КАК Сумма,
	|	&ОтражениеВыручки КАК Содержание
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	ТаблицаУправленческий.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И ТаблицаУправленческий.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Период,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА -ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком.Валютный
	|			ТОГДА -ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ТаблицаУправленческий.Сумма,
	|	&СторнированиеПоставки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	ТаблицаУправленческий.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	1,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом = ИСТИНА
	|			ТОГДА &СчетУчетаАвансовПокупателя
	|		ИНАЧЕ ТаблицаДокумента.СчетУчетаАвансовПокупателя
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом = ИСТИНА
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом = ИСТИНА
	|			ТОГДА 0
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.Сумма,
	|	&ЗачетПредоплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.Период КАК Период,
	|		ТаблицаДокумента.Организация КАК Организация,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный КАК СчетУчетаАвансовПокупателяВалютный,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный КАК СчетУчетаРасчетовСПокупателемВалютный,
	|		ТаблицаДокумента.ВалютаРасчетов КАК ВалютаРасчетов,
	|		СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
	|		СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
	|		ТаблицаДокумента.ОплатаСертификатом КАК ОплатаСертификатом
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Период КАК Период,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя.Валютный КАК СчетУчетаАвансовПокупателяВалютный,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем.Валютный КАК СчетУчетаРасчетовСПокупателемВалютный,
	|			ТаблицаДокумента.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|			ТаблицаДокумента.СуммаВал КАК СуммаВал,
	|			ТаблицаДокумента.Сумма КАК Сумма,
	|			ТаблицаДокумента.ОплатаСертификатом КАК ОплатаСертификатом
	|		ИЗ
	|			ВременнаяТаблицаРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			И ТаблицаДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И (ТаблицаДокумента.СуммаВал <> 0 ИЛИ ТаблицаДокумента.Сумма <> 0)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя.Валютный,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем.Валютный,
	|			ТаблицаДокумента.Валюта,
	|			0,
	|			ТаблицаДокумента.СуммаКурсовойРазницы,
	|			NULL
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаДокумента
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаДокумента.Период,
	|		ТаблицаДокумента.Организация,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателя,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный,
	|		ТаблицаДокумента.ВалютаРасчетов,
	|		ТаблицаДокумента.ОплатаСертификатом
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаДокумента.Сумма) >= 0.005
	|			ИЛИ СУММА(ТаблицаДокумента.Сумма) <= -0.005
	|			ИЛИ СУММА(ТаблицаДокумента.СуммаВал) >= 0.005
	|			ИЛИ СУММА(ТаблицаДокумента.СуммаВал) <= -0.005)) КАК ТаблицаДокумента
	|ГДЕ
	|	&ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаДокумента.СчетУчетаРасчетовСПоставщиком,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПоставщиком.Валютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПоставщиком.Валютный
	|			ТОГДА -ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.СчетУчетаАвансовПоставщику,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПоставщику.Валютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПоставщику.Валютный
	|			ТОГДА -ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ТаблицаДокумента.Сумма,
	|	&СторнированиеПредоплаты
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА &ОтрицательнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы < 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СчетУчета
	|		ИНАЧЕ &ПоложительнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаУправленческий.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	&КурсоваяРазница
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщиками КАК ТаблицаУправленческий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6,
	|	1,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|				И ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы < 0
	|				И ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаУправленческий.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	&КурсоваяРазница
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата КАК Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация КАК Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчета КАК СчетУчета,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчетаВалютный КАК СчетУчетаВалютный,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта КАК Валюта,
	|		СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) КАК СуммаКурсовойРазницы
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Дата КАК Дата,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.СчетУчета КАК СчетУчета,
	|			ТаблицаДокумента.СчетУчета.Валютный КАК СчетУчетаВалютный,
	|			ТаблицаДокумента.Валюта КАК Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы КАК СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.СчетУчета,
	|			ТаблицаДокумента.СчетУчета.Валютный,
	|			ТаблицаДокумента.Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаКурсовыхРазницРасчетыСПокупателями
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчета,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчетаВалютный,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) >= 0.005
	|			ИЛИ СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) <= -0.005)) КАК ТаблицаУправленческий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	7,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Период,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчетаПродажи
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ТаблицаУправленческий.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	&СчетУчетаАвансовПокупателя,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ТаблицаУправленческий.Сумма,
	|	&ВозникновениеАвансаПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	ТаблицаУправленческий.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И ТаблицаУправленческий.Сумма <> 0
	|	И ТаблицаУправленческий.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ЗачетПредоплаты", НСтр("ru = 'Зачет предоплаты'"));
	Запрос.УстановитьПараметр("СторнированиеПредоплаты", НСтр("ru = 'Сторнирование предоплаты'"));
	Запрос.УстановитьПараметр("СторнированиеПоставки", НСтр("ru = 'Сторнирование поставки'"));
	Запрос.УстановитьПараметр("ОтражениеВыручки", НСтр("ru = 'Выручка от продажи'"));
	Запрос.УстановитьПараметр("ОтражениеДоставки", НСтр("ru = 'Выручка от доставки'"));
	Запрос.УстановитьПараметр("ВозникновениеАвансаПокупателя", НСтр("ru = 'Возникновение аванса покупателя'"));
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("ВидОперации", ДокументСсылкаРасходнаяНакладная.ВидОперации);
	
	Для Каждого КлючИЗначение Из СтруктураДополнительныеСвойства.ДляСертификатов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		НоваяПроводка = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Выборка);
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаУправленческий()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗакупкиДляКУДиР(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	// Получение данных
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.УстановитьПараметр("ДатаДокумента", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	
	Запрос.Текст = ТекстЗапросаЗакупкиДляКУДиР(ДокументСсылкаРасходнаяНакладная);
	
	// Обработка данных
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаРезультат = РезультатЗапроса[РезультатЗапроса.Количество()-3].Выгрузить().СкопироватьКолонки();
	
	ТаблицаНеОплаченныеТовары = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выгрузить();
	ТаблицаОплаченныеТовары = РезультатЗапроса[РезультатЗапроса.Количество()-5].Выгрузить();
	ТаблицаТоварыКВозврату = РезультатЗапроса[РезультатЗапроса.Количество()-4].Выгрузить();
	
	УчетВалюты = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	НацВалюта = Константы.НациональнаяВалюта.Получить();
	ВалютаДокумента = ДокументСсылкаРасходнаяНакладная.ВалютаДокумента;
	
	Если УчетВалюты И ВалютаДокумента <> НацВалюта Тогда
		ТекущийКурс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДокументСсылкаРасходнаяНакладная.Дата);
	КонецЕсли;
	
	Для Каждого ТекущаяСтрокаТоварыКВозврату Из ТаблицаТоварыКВозврату Цикл
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ТоварныйДокумент", ТекущаяСтрокаТоварыКВозврату.ТоварныйДокумент);
		СтруктураПоиска.Вставить("Номенклатура", ТекущаяСтрокаТоварыКВозврату.Номенклатура);
		
		// Сторнирую оплаченные товары, если они были
		СтрокиОплаченногоТовара = ТаблицаОплаченныеТовары.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаОпаченногоТовара Из СтрокиОплаченногоТовара Цикл
			Если ТекущаяСтрокаТоварыКВозврату.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НовСтр = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ТекущаяСтрокаТоварыКВозврату);
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаОпаченногоТовара);
			Если СтрокаОпаченногоТовара.СуммаВал >= ТекущаяСтрокаТоварыКВозврату.СуммаВал Тогда
				НовСтр.Сумма = ТекущаяСтрокаТоварыКВозврату.Сумма;
				НовСтр.СуммаВал = ТекущаяСтрокаТоварыКВозврату.СуммаВал;
				НовСтр.Количество =  ТекущаяСтрокаТоварыКВозврату.Количество;
			Иначе
				НовСтр.Сумма = СтрокаОпаченногоТовара.Сумма;
				НовСтр.СуммаВал = СтрокаОпаченногоТовара.СуммаВал;
				Если ТекущаяСтрокаТоварыКВозврату.Сумма = 0 Тогда
					НовСтр.Количество = ТекущаяСтрокаТоварыКВозврату.Количество;
				Иначе
					НовСтр.Количество = ТекущаяСтрокаТоварыКВозврату.Количество * СтрокаОпаченногоТовара.Сумма / ТекущаяСтрокаТоварыКВозврату.Сумма;
				КонецЕсли;
			КонецЕсли;
			СтрокаОпаченногоТовара.Сумма = СтрокаОпаченногоТовара.Сумма - НовСтр.Сумма;
			СтрокаОпаченногоТовара.СуммаВал = СтрокаОпаченногоТовара.СуммаВал - НовСтр.СуммаВал;
			
			НовСтр.СуммаНДС = НовСтр.Сумма - НовСтр.Сумма /((100+ ТекущаяСтрокаТоварыКВозврату.СтавкаНДС)/100);
			НовСтр.Номенклатура = ТекущаяСтрокаТоварыКВозврату.Номенклатура;
			НовСтр.Сумма = НовСтр.Сумма - НовСтр.СуммаНДС;
			
			// Превращаю в сторно
			НовСтр.Сумма = -1 * НовСтр.Сумма;
			НовСтр.СуммаВал = -1 * НовСтр.СуммаВал;
			НовСтр.СуммаНДС = -1 * НовСтр.СуммаНДС;
			НовСтр.Количество = -1 * НовСтр.Количество;
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗакупкиДляКУДиР", ТаблицаРезультат);
	
КонецПроцедуры // СформироватьТаблицаЗакупкиДляКУДиР()

Функция ТекстЗапросаЗакупкиДляКУДиР(ДокументСсылкаРасходнаяНакладная)
	
	Если ЗначениеЗаполнено(ДокументСсылкаРасходнаяНакладная.ДокументОснование)
		И ТипЗнч(ДокументСсылкаРасходнаяНакладная.ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаЗапасы.Период,
		|	ТаблицаЗапасы.ОрганизацияВНУ КАК Организация,
		|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
		|	ТаблицаЗапасы.Количество КАК Количество,
		|	ТаблицаЗапасы.СуммаВал КАК СуммаВал,
		|	ТаблицаЗапасы.СуммаНДС КАК СуммаНДС,
		|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаЗапасы.ВалютаРасчетов КАК ВалютаРасчетов,
		|	ТаблицаЗапасы.Сумма КАК Сумма,
		|	ТаблицаЗапасы.ДокументОснование КАК ТоварныйДокумент
		|ПОМЕСТИТЬ ВТТоварыКВозврату
		|ИЗ
		|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПримененияЕНВД.СрезПоследних(&ДатаДокумента, ) КАК ПримененияЕНВД
		|		ПО ТаблицаЗапасы.ОрганизацияВНУ = ПримененияЕНВД.Организация
		|			И (ПримененияЕНВД.СтруктурнаяЕдиница = ТаблицаЗапасы.СтруктурнаяЕдиницаШапка)
		|ГДЕ
		|	ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
		|	И ТаблицаЗапасы.ВестиРасчетыПоДокументам
		|	И ТаблицаЗапасы.ОрганизацияВНУ.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|	И НЕ ЕСТЬNULL(ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД, ЛОЖЬ)
		|////////////////////////////////////////////////////////////////////////////////
		|;";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПриходнаяНакладная.Ссылка КАК Документ
		|ПОМЕСТИТЬ ВТПриходнаяНакладнаяВозврат
		|ИЗ
		|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
		|		ПО (ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику))
		|			И (ТаблицаЗапасы.ОрганизацияВНУ = ПриходнаяНакладная.Организация)
		|			И (ТаблицаЗапасы.Контрагент = ПриходнаяНакладная.Контрагент)
		|			И ПриходнаяНакладная.Дата < ТаблицаЗапасы.Период
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
		|		ПО (ПриходнаяНакладнаяЗапасы.Ссылка = ПриходнаяНакладная.Ссылка)
		|			И (ПриходнаяНакладнаяЗапасы.Номенклатура = ТаблицаЗапасы.Номенклатура)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриходнаяНакладная.Дата УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗапасы.Период КАК Период,
		|	ТаблицаЗапасы.ОрганизацияВНУ КАК Организация,
		|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
		|	ТаблицаЗапасы.Количество КАК Количество,
		|	ТаблицаЗапасы.СуммаВал КАК СуммаВал,
		|	ТаблицаЗапасы.СуммаНДС КАК СуммаНДС,
		|	ТаблицаЗапасы.Сумма КАК Сумма,
		|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаЗапасы.ВалютаРасчетов КАК ВалютаРасчетов,
		|	ВТПриходнаяНакладнаяВозврат.Документ КАК ТоварныйДокумент
		|ПОМЕСТИТЬ ВТТоварыКВозврату
		|ИЗ
		|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПримененияЕНВД.СрезПоследних(&ДатаДокумента, ) КАК ПримененияЕНВД
		|		ПО ТаблицаЗапасы.ОрганизацияВНУ = ПримененияЕНВД.Организация
		|			И (ПримененияЕНВД.СтруктурнаяЕдиница = ТаблицаЗапасы.СтруктурнаяЕдиницаШапка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриходнаяНакладнаяВозврат КАК ВТПриходнаяНакладнаяВозврат
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
		|	И ТаблицаЗапасы.ВестиРасчетыПоДокументам
		|	И ТаблицаЗапасы.ОрганизацияВНУ.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|	И НЕ ЕСТЬNULL(ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД, ЛОЖЬ)
		|	И ВТПриходнаяНакладнаяВозврат.Документ ЕСТЬ НЕ NULL;";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРасчетыСПоставщиками.Период КАК Период,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Период КАК ДатаДокумента,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Организация КАК Организация,
	|	ВременнаяТаблицаРасчетыСПоставщиками.ТоварныйДокумент КАК ТоварныйДокумент,
	|	ВременнаяТаблицаРасчетыСПоставщиками.СтавкаНДС.Ставка КАК СтавкаНДС,
	|	ЛОЖЬ КАК ЭтоТоварыКРеализации,
	|	ВременнаяТаблицаРасчетыСПоставщиками.ВалютаРасчетов КАК Валюта
	|ПОМЕСТИТЬ ВременнаяТаблицаЗакупкиПоставщиковДляКУДиР
	|ИЗ
	|	ВТТоварыКВозврату КАК ВременнаяТаблицаРасчетыСПоставщиками
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаРасчетыСПоставщиками.Период,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Организация,
	|	ВременнаяТаблицаРасчетыСПоставщиками.ТоварныйДокумент,
	|	ВременнаяТаблицаРасчетыСПоставщиками.СтавкаНДС.Ставка,
	|	ВременнаяТаблицаРасчетыСПоставщиками.ВалютаРасчетов,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ТоварныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗакупкиДляКУДиР.ТоварныйДокумент КАК ТоварныйДокумент,
	|	ЗакупкиДляКУДиР.Номенклатура КАК Номенклатура,
	|	ЗакупкиДляКУДиР.УчитыватьВНУ КАК УчитыватьВНУ,
	|	ЗакупкиДляКУДиР.ЭтоТоварыКРеализации КАК ЭтоТоварыКРеализации,
	|	СУММА(ЗакупкиДляКУДиР.СуммаВал) КАК СуммаВал,
	|	СУММА(ЗакупкиДляКУДиР.Сумма) КАК Сумма,
	|	СУММА(ЗакупкиДляКУДиР.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ЗакупкиДляКУДиР.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТЗакупкиДляКУДиР
	|ИЗ
	|	ВТТоварыКВозврату КАК ВТТоварыКВозврату
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗакупкиДляКУДиР КАК ЗакупкиДляКУДиР
	|		ПО ВТТоварыКВозврату.ТоварныйДокумент = ЗакупкиДляКУДиР.ТоварныйДокумент
	|			И ВТТоварыКВозврату.Номенклатура = ЗакупкиДляКУДиР.Номенклатура
	|			И (ЗакупкиДляКУДиР.Регистратор <> &Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗакупкиДляКУДиР.ТоварныйДокумент,
	|	ЗакупкиДляКУДиР.Номенклатура,
	|	ЗакупкиДляКУДиР.УчитыватьВНУ,
	|	ЗакупкиДляКУДиР.ЭтоТоварыКРеализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТоварыКВозврату.Организация КАК Организация,
	|	ВТТоварыКВозврату.Период КАК Период,
	|	ВТТоварыКВозврату.ТоварныйДокумент КАК ТоварныйДокумент,
	|	ЗакупкиДляКУДиР.ДенежныйДокумент КАК ДенежныйДокумент,
	|	ВТТоварыКВозврату.Номенклатура КАК Номенклатура,
	|	ЗакупкиДляКУДиР.УчитыватьВНУ КАК УчитыватьВНУ,
	|	ЗакупкиДляКУДиР.ЭтоТоварыКРеализации КАК ЭтоТоварыКРеализации,
	|	СУММА(ЗакупкиДляКУДиР.СуммаВал) КАК СуммаВал,
	|	СУММА(ЗакупкиДляКУДиР.Сумма) КАК Сумма,
	|	СУММА(ЗакупкиДляКУДиР.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ЗакупкиДляКУДиР.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТУчтенныеТоварыКВозврату
	|ИЗ
	|	ВТТоварыКВозврату КАК ВТТоварыКВозврату
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗакупкиДляКУДиР КАК ЗакупкиДляКУДиР
	|		ПО ВТТоварыКВозврату.ТоварныйДокумент = ЗакупкиДляКУДиР.ТоварныйДокумент
	|			И ВТТоварыКВозврату.Номенклатура = ЗакупкиДляКУДиР.Номенклатура
	|			И (ЗакупкиДляКУДиР.Регистратор <> &Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТоварыКВозврату.ТоварныйДокумент,
	|	ЗакупкиДляКУДиР.ДенежныйДокумент,
	|	ВТТоварыКВозврату.Организация,
	|	ВТТоварыКВозврату.Период,
	|	ВТТоварыКВозврату.Номенклатура,
	|	ЗакупкиДляКУДиР.УчитыватьВНУ,
	|	ЗакупкиДляКУДиР.ЭтоТоварыКРеализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТоварыКВозврату.Организация КАК Организация,
	|	ВТТоварыКВозврату.Период КАК Период,
	|	ВТТоварыКВозврату.ТоварныйДокумент КАК ТоварныйДокумент,
	|	ВТТоварыКВозврату.ТоварныйДокумент КАК ДенежныйДокумент,
	|	ВТТоварыКВозврату.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ЗакупкиДляКУДиР.УчитыватьВНУ, ИСТИНА) КАК УчитыватьВНУ,
	|	ИСТИНА КАК ЭтоТоварыКРеализации,
	|	СУММА(ВТТоварыКВозврату.СуммаВал - ЕСТЬNULL(ЗакупкиДляКУДиР.СуммаВал, 0)) КАК СуммаВал,
	|	СУММА(ВТТоварыКВозврату.Сумма - ЕСТЬNULL(ЗакупкиДляКУДиР.Сумма, 0)) КАК Сумма,
	|	СУММА(ВТТоварыКВозврату.СуммаНДС - ЕСТЬNULL(ЗакупкиДляКУДиР.СуммаНДС, 0)) КАК СуммаНДС,
	|	СУММА(ВТТоварыКВозврату.Количество - ЕСТЬNULL(ЗакупкиДляКУДиР.Количество, 0)) КАК Количество
	|ПОМЕСТИТЬ ВТТоварыКВозвратуНеучтенныеВЗакупкахДляКУДиР
	|ИЗ
	|	ВТТоварыКВозврату КАК ВТТоварыКВозврату
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗакупкиДляКУДиР КАК ЗакупкиДляКУДиР
	|		ПО ВТТоварыКВозврату.ТоварныйДокумент = ЗакупкиДляКУДиР.ТоварныйДокумент
	|			И ВТТоварыКВозврату.Номенклатура = ЗакупкиДляКУДиР.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТоварыКВозврату.ТоварныйДокумент,
	|	ВТТоварыКВозврату.Организация,
	|	ВТТоварыКВозврату.Период,
	|	ВТТоварыКВозврату.Номенклатура,
	|	ЗакупкиДляКУДиР.УчитыватьВНУ,
	|	ЗакупкиДляКУДиР.ЭтоТоварыКРеализации,
	|	ВТТоварыКВозврату.ТоварныйДокумент
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТТоварыКВозврату.Сумма - ЕСТЬNULL(ЗакупкиДляКУДиР.Сумма, 0)) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТУчтенныеТоварыКВозврату.ДенежныйДокумент КАК ДенежныйДокумент,
	|	ВТУчтенныеТоварыКВозврату.УчитыватьВНУ КАК УчитыватьВНУ,
	|	СУММА(ВТУчтенныеТоварыКВозврату.СуммаВал) КАК СуммаВал,
	|	СУММА(ВТУчтенныеТоварыКВозврату.Сумма) КАК Сумма,
	|	СУММА(ВТУчтенныеТоварыКВозврату.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ВТСуммыКПерераспределению
	|ИЗ
	|	ВТУчтенныеТоварыКВозврату КАК ВТУчтенныеТоварыКВозврату
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТУчтенныеТоварыКВозврату.ДенежныйДокумент,
	|	ВТУчтенныеТоварыКВозврату.УчитыватьВНУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент КАК ТоварныйДокумент
	|ПОМЕСТИТЬ ВТТоварныеДокументы
	|ИЗ
	|	ВТТоварыКВозврату КАК ВТЗакупкиПоставщиковДляКУДиР
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ДокументПриходнаяНакладная
	|		ПО (ДокументПриходнаяНакладная.Ссылка = ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПримененияЕНВД.СрезПоследних(&ДатаДокумента, ) КАК ПримененияЕНВД
	|		ПО ВТЗакупкиПоставщиковДляКУДиР.Организация = ПримененияЕНВД.Организация
	|			И (ПримененияЕНВД.СтруктурнаяЕдиница = ДокументПриходнаяНакладная.СтруктурнаяЕдиница)
	|ГДЕ
	|	(ДокументПриходнаяНакладная.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ ЕСТЬNULL(ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД, ЛОЖЬ))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗакупкиДляКУДиР.ТоварныйДокумент КАК ТоварныйДокумент,
	|	ЗакупкиДляКУДиР.Номенклатура КАК Номенклатура,
	|	ЗакупкиДляКУДиР.ЭтоТоварыКРеализации КАК ЭтоТоварыКРеализации,
	|	СУММА(ЗакупкиДляКУДиР.Сумма) КАК Сумма,
	|	СУММА(ЗакупкиДляКУДиР.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТУчтенныеТовары
	|ИЗ
	|	РегистрНакопления.ЗакупкиДляКУДиР КАК ЗакупкиДляКУДиР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТоварныеДокументы КАК ВТТоварныеДокументы
	|		ПО (ВТТоварныеДокументы.ТоварныйДокумент = ЗакупкиДляКУДиР.ТоварныйДокумент)
	|			И (ЗакупкиДляКУДиР.Регистратор <> &Ссылка)
	|ГДЕ
	|	ЗакупкиДляКУДиР.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗакупкиДляКУДиР.ТоварныйДокумент,
	|	ЗакупкиДляКУДиР.Номенклатура,
	|	ЗакупкиДляКУДиР.ЭтоТоварыКРеализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТоварныеДокументы.ТоварныйДокумент КАК ТоварныйДокумент,
	|	Закупки.Номенклатура КАК Номенклатура,
	|	Закупки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(Закупки.Количество) КАК Количество,
	|	СУММА(Закупки.Всего) КАК Всего,
	|	ЕСТЬNULL(Закупки.СтавкаНДС.Ставка, 0) КАК СтавкаНДС,
	|	НЕ Закупки.ТоварыДляПроизводства КАК ЭтоТоварыКРеализации
	|ПОМЕСТИТЬ ВТЗакупки
	|ИЗ
	|	ВТТоварныеДокументы КАК ВТТоварныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Запасы КАК Закупки
	|		ПО (Закупки.Ссылка = ВТТоварныеДокументы.ТоварныйДокумент)
	|			И (Закупки.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТоварныеДокументы.ТоварныйДокумент,
	|	Закупки.Номенклатура,
	|	Закупки.ЕдиницаИзмерения,
	|	ЕСТЬNULL(Закупки.СтавкаНДС.Ставка, 0),
	|	Закупки.ТоварыДляПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ВТУчтенныеТоварыКВозврату"" КАК ВТ,
	|	ВТУчтенныеТоварыКВозврату.Период КАК Период,
	|	ВТУчтенныеТоварыКВозврату.Период КАК ДатаДокумента,
	|	ВТУчтенныеТоварыКВозврату.Организация КАК Организация,
	|	ВТУчтенныеТоварыКВозврату.ТоварныйДокумент КАК ТоварныйДокумент,
	|	ВТУчтенныеТоварыКВозврату.ДенежныйДокумент КАК ДенежныйДокумент,
	|	ВТУчтенныеТоварыКВозврату.Номенклатура КАК Номенклатура,
	|	ВТУчтенныеТоварыКВозврату.УчитыватьВНУ КАК УчитыватьВНУ,
	|	ВТУчтенныеТоварыКВозврату.ЭтоТоварыКРеализации КАК ЭтоТоварыКРеализации,
	|	ВТУчтенныеТоварыКВозврату.СуммаВал КАК СуммаВал,
	|	ВТУчтенныеТоварыКВозврату.Сумма КАК Сумма,
	|	ВТУчтенныеТоварыКВозврату.СуммаНДС КАК СуммаНДС,
	|	ВТУчтенныеТоварыКВозврату.Количество КАК Количество
	|ИЗ
	|	ВТУчтенныеТоварыКВозврату КАК ВТУчтенныеТоварыКВозврату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ВТТоварыКВозврату"" КАК ВТ,
	|	ВТТоварыКВозврату.Период КАК Период,
	|	ВТТоварыКВозврату.Организация КАК Организация,
	|	ВТТоварыКВозврату.Номенклатура КАК Номенклатура,
	|	ВТТоварыКВозврату.Количество КАК Количество,
	|	ВТТоварыКВозврату.СуммаВал КАК СуммаВал,
	|	ВТТоварыКВозврату.СуммаНДС КАК СуммаНДС,
	|	ЕСТЬNULL(ВТТоварыКВозврату.СтавкаНДС.Ставка, 0) КАК СтавкаНДС,
	|	ВТТоварыКВозврату.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ВТТоварыКВозврату.Сумма КАК Сумма,
	|	ВТТоварыКВозврату.ТоварныйДокумент КАК ТоварныйДокумент
	|ИЗ
	|	ВТТоварыКВозврату КАК ВТТоварыКВозврату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТУчтенныеТоварыКВозврату.Период КАК Период,
	|	ВТУчтенныеТоварыКВозврату.Период КАК ДатаДокумента,
	|	ВТУчтенныеТоварыКВозврату.Организация КАК Организация,
	|	ВТУчтенныеТоварыКВозврату.ТоварныйДокумент КАК ТоварныйДокумент,
	|	ВТУчтенныеТоварыКВозврату.ДенежныйДокумент КАК ДенежныйДокумент,
	|	ВТУчтенныеТоварыКВозврату.Номенклатура КАК Номенклатура,
	|	ВТУчтенныеТоварыКВозврату.УчитыватьВНУ КАК УчитыватьВНУ,
	|	ВТУчтенныеТоварыКВозврату.ЭтоТоварыКРеализации КАК ЭтоТоварыКРеализации,
	|	-ВТУчтенныеТоварыКВозврату.СуммаВал КАК СуммаВал,
	|	-ВТУчтенныеТоварыКВозврату.Сумма КАК Сумма,
	|	-ВТУчтенныеТоварыКВозврату.СуммаНДС КАК СуммаНДС,
	|	-ВТУчтенныеТоварыКВозврату.Количество КАК Количество
	|ИЗ
	|	ВТУчтенныеТоварыКВозврату КАК ВТУчтенныеТоварыКВозврату
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТУчтенныеТоварыКВозврату.Период,
	|	ВТУчтенныеТоварыКВозврату.Период,
	|	ВТУчтенныеТоварыКВозврату.Организация,
	|	ВТУчтенныеТоварыКВозврату.ТоварныйДокумент,
	|	ВТУчтенныеТоварыКВозврату.ДенежныйДокумент,
	|	ВТУчтенныеТоварыКВозврату.Номенклатура,
	|	ВТУчтенныеТоварыКВозврату.УчитыватьВНУ,
	|	ВТУчтенныеТоварыКВозврату.ЭтоТоварыКРеализации,
	|	ВТУчтенныеТоварыКВозврату.СуммаВал,
	|	ВТУчтенныеТоварыКВозврату.Сумма,
	|	ВТУчтенныеТоварыКВозврату.СуммаНДС,
	|	ВТУчтенныеТоварыКВозврату.Количество
	|ИЗ
	|	ВТТоварыКВозвратуНеучтенныеВЗакупкахДляКУДиР КАК ВТУчтенныеТоварыКВозврату
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТУчтенныеТоварыКВозврату.Период,
	|	ВТУчтенныеТоварыКВозврату.Период,
	|	ВТУчтенныеТоварыКВозврату.Организация,
	|	ВТУчтенныеТоварыКВозврату.ТоварныйДокумент,
	|	ВТУчтенныеТоварыКВозврату.ДенежныйДокумент,
	|	ВТУчтенныеТоварыКВозврату.Номенклатура,
	|	ВТУчтенныеТоварыКВозврату.УчитыватьВНУ,
	|	ВТУчтенныеТоварыКВозврату.ЭтоТоварыКРеализации,
	|	-ВТУчтенныеТоварыКВозврату.СуммаВал,
	|	-ВТУчтенныеТоварыКВозврату.Сумма,
	|	-ВТУчтенныеТоварыКВозврату.СуммаНДС,
	|	-ВТУчтенныеТоварыКВозврату.Количество
	|ИЗ
	|	ВТТоварыКВозвратуНеучтенныеВЗакупкахДляКУДиР КАК ВТУчтенныеТоварыКВозврату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаРасчетыСПоставщиками.Период КАК Период,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Период КАК ДатаДокумента,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Организация КАК Организация,
	|	ВременнаяТаблицаРасчетыСПоставщиками.ТоварныйДокумент КАК ТоварныйДокумент,
	|	ВременнаяТаблицаРасчетыСПоставщиками.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблицаРасчетыСПоставщиками.ЭтоТоварыКРеализации КАК ЭтоТоварыКРеализации,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Валюта КАК Валюта,
	|	ВТСуммыКПерераспределению.ДенежныйДокумент КАК ДенежныйДокумент,
	|	ВТСуммыКПерераспределению.УчитыватьВНУ КАК УчитыватьВНУ,
	|	ВТСуммыКПерераспределению.СуммаВал - ЕСТЬNULL(ВременнаяТаблицаПредоплата.СуммаВал, 0) КАК СуммаВал,
	|	ВТСуммыКПерераспределению.Сумма - ЕСТЬNULL(ВременнаяТаблицаПредоплата.СуммаВал, 0) КАК Сумма
	|ИЗ
	|	ВТСуммыКПерераспределению КАК ВТСуммыКПерераспределению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗакупкиПоставщиковДляКУДиР КАК ВременнаяТаблицаРасчетыСПоставщиками
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПредоплата КАК ВременнаяТаблицаПредоплата
	|		ПО (ВременнаяТаблицаПредоплата.Документ = ВТСуммыКПерераспределению.ДенежныйДокумент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Закупки.ТоварныйДокумент КАК ТоварныйДокумент,
	|	Закупки.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Закупки.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА Закупки.Количество * Закупки.ЕдиницаИзмерения.Коэффициент - ЕСТЬNULL(ВТУчтенныеТовары.Количество, 0)
	|		ИНАЧЕ Закупки.Количество - ЕСТЬNULL(ВТУчтенныеТовары.Количество, 0)
	|	КОНЕЦ КАК Количество,
	|	Закупки.Всего - ЕСТЬNULL(ВТУчтенныеТовары.Сумма, 0) КАК Сумма,
	|	Закупки.СтавкаНДС КАК СтавкаНДС,
	|	Закупки.ЭтоТоварыКРеализации КАК ЭтоТоварыКРеализации
	|ИЗ
	|	ВТЗакупки КАК Закупки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУчтенныеТовары КАК ВТУчтенныеТовары
	|		ПО (ВТУчтенныеТовары.ТоварныйДокумент = Закупки.ТоварныйДокумент)
	|			И (ВТУчтенныеТовары.Номенклатура = Закупки.Номенклатура)
	|ГДЕ
	|	Закупки.Всего - ЕСТЬNULL(ВТУчтенныеТовары.Сумма, 0) <> 0";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует таблицу значений, содержащую данные для проведения по регистру "ОплатаДокументов".
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаДокументов(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	МассивДоступныхОпераций = Новый Массив;
	МассивДоступныхОпераций.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю);
	
	РасчетыПроведениеДокументов.СформироватьТаблицаОплатаДокументовНакладные(ДокументСсылка, СтруктураДополнительныеСвойства, МассивДоступныхОпераций);
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру "ОплатаДокументов".
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	МассивДоступныхОпераций = Новый Массив;
	МассивДоступныхОпераций.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю);
	РасчетыПроведениеДокументов.СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылка, СтруктураДополнительныеСвойства, МассивДоступныхОпераций);
	
КонецПроцедуры

// Помещает в менеджер временных таблиц запроса данные для формирования взаиморасчетов по операции возврата
//
Процедура СформироватьТаблицуВзаиморасчетовПоОперацииВозврата(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&СторнированиеДолга КАК СодержаниеПроводки,
	|	ТаблицаДокумента.Период КАК Дата,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПоставщиком КАК СчетУчета,
	|	ТаблицаДокумента.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ДокументОснование) = ТИП(Документ.ПриходнаяНакладная)
	|							И ТаблицаДокумента.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|						ТОГДА ТаблицаДокумента.ДокументОснование
	|					ИНАЧЕ ТаблицаДокумента.Документ
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ КАК Заказ,
	|	ТаблицаДокумента.ВалютаРасчетов КАК Валюта,
	|	ТаблицаДокумента.Курс КАК Курс,
	|	ТаблицаДокумента.Кратность КАК Кратность,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетов,
	|	-СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
	|	-СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
	|	-СУММА(ТаблицаДокумента.СуммаРег) КАК СуммаРег,
	|	-СУММА(ТаблицаДокумента.Сумма) КАК СуммаДляОстатка,
	|	-СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВалДляОстатка
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПоставщиками
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ДокументОснование) = ТИП(Документ.ПриходнаяНакладная)
	|							И ТаблицаДокумента.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|						ТОГДА ТаблицаДокумента.ДокументОснование
	|					ИНАЧЕ ТаблицаДокумента.Документ
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.Курс,
	|	ТаблицаДокумента.Кратность,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПоставщиком
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&ВосстановлениеПредоплаты,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ДокументОснование) = ТИП(Документ.ПриходнаяНакладная)
	|							И ТаблицаДокумента.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|						ТОГДА ТаблицаДокумента.ДокументОснование
	|					ИНАЧЕ &Ссылка
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.Курс,
	|	ТаблицаДокумента.Кратность,
	|	ТаблицаДокумента.ТипРасчетовКуда,
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал),
	|	-СУММА(ТаблицаДокумента.СуммаРег),
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал)
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ДокументОснование) = ТИП(Документ.ПриходнаяНакладная)
	|							И ТаблицаДокумента.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|						ТОГДА ТаблицаДокумента.ДокументОснование
	|					ИНАЧЕ &Ссылка
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ТипРасчетовКуда,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.Курс,
	|	ТаблицаДокумента.Кратность,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПоставщиком
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&ВосстановлениеПредоплаты,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.СчетУчетаАвансовПоставщику,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.Курс,
	|	ТаблицаДокумента.Кратность,
	|	ТаблицаДокумента.ТипРасчетов,
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал),
	|	-СУММА(ТаблицаДокумента.СуммаРег),
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал)
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.Курс,
	|	ТаблицаДокумента.Кратность,
	|	ТаблицаДокумента.ТипРасчетов,
	|	ТаблицаДокумента.СчетУчетаАвансовПоставщику
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Контрагент,
	|	Договор,
	|	Валюта,
	|	Документ,
	|	Заказ,
	|	ТипРасчетов,
	|	СчетУчета";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру "СуммыДокументовРегламентированныйУчет".
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСуммыДокументовРегламентированныйУчет(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю
		 ИЛИ СтруктураДополнительныеСвойства.ВалютаДокумента <> СтруктураДополнительныеСвойства.НациональнаяВалюта Тогда
		
		РасчетыПроведениеДокументов.СформироватьТаблицаСуммыДокументовРегламентированныйУчет(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
		
	Иначе
		
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСуммыДокументовРегламентированныйУчет", Новый ТаблицаЗначений);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРезервыТоваровОрганизаций(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Если Не ПолучитьФункциональнуюОпцию("ПередачаТоваровМеждуОрганизациями") Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРезервыТоваровОрганизаций", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасыНаСкладах.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗапасыНаСкладах.Период КАК Период,
	|	ТаблицаЗапасыНаСкладах.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаЗапасыНаСкладах.Ячейка КАК Ячейка,
	|	ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД,
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаЗапасыНаСкладах.Количество - ТаблицаЗапасыНаСкладах.Резерв КАК Количество
	|ПОМЕСТИТЬ ЗапасыДляРезервовТоваровОрганизаций
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	(ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И НЕ ТаблицаЗапасыНаСкладах.ОрдерныйСклад";
	Запрос.Выполнить();
	
	ИнтеркампаниСервер.СформироватьТаблицаРезервыТоваровОрганизаций(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область ДисконтныеКарты

// Формирует таблицу значений, содержащую данные для проведения по регистру ПродажиПоДисконтнымКартам.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаРасходнаяНакладная.ДисконтнаяКарта.Пустая() Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = ДисконтныеКартыУНФСервер.ТекстЗапросаПродажиПоДисконтнойКарте("РасходнаяНакладная");
	
	Запрос.УстановитьПараметр("ПроцентСкидки", ДисконтныеКартыУНФСервер.ВычислитьПроцентСкидкиПоДисконтнойКарте(СтруктураДополнительныеСвойства.ДляПроведения.Дата,
																													   ДокументСсылкаРасходнаяНакладная.ДисконтнаяКарта));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоДисконтнойКарте()

#КонецОбласти

#Область АвтоматическиеСкидки

// Формирует таблицу значений, содержащую данные для проведения по регистру ПредоставленныеСкидки.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоПредоставленнымСкидкам(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Период КАК Период,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.СкидкаНаценка КАК ВидСкидкиНаценки,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Сумма КАК СуммаСкидки,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаЗапасы.Документ КАК ДокументСкидки,
	|	ВременнаяТаблицаЗапасы.Контрагент КАК ПолучательСкидки,
	|	ВременнаяТаблицаЗапасы.Ответственный КАК Ответственный
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаАвтоСкидкиНаценки КАК ВременнаяТаблицаАвтоСкидкиНаценки
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = ВременнаяТаблицаАвтоСкидкиНаценки.КлючСвязи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаШапка.Дата,
	|	ВременнаяТаблицаШапка.ВидСкидкиНаценки,
	|	ВременнаяТаблицаЗапасы.СуммаСкидкиНаценки,
	|	ВременнаяТаблицаЗапасы.Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика,
	|	ВременнаяТаблицаЗапасы.Документ,
	|	ВременнаяТаблицаЗапасы.Контрагент,
	|	ВременнаяТаблицаЗапасы.Ответственный
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаЗапасы.СуммаСкидкиНаценки <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныеСкидки", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоПредоставленнымАвтоматическимСкидкам()

#КонецОбласти

#Область Биллинг

// Формирует таблицу значений, содержащую данные для проведения по регистру ВыполнениеДоговоровОбслуживания.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаВыполнениеДоговораОбслуживания(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг") Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыполнениеДоговоровОбслуживания", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Период,
	|	ВременнаяТаблицаЗапасы.Договор,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК ОбъектДоговораОбслуживания,
	|	ВременнаяТаблицаЗапасы.Характеристика,
	|	ИСТИНА КАК УказанаСтоимость,
	|	ВременнаяТаблицаЗапасы.Количество,
	|	ВременнаяТаблицаЗапасы.СуммаВал КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоДоговорОбслуживания";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыполнениеДоговоровОбслуживания", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	ОписаниеТиповСтрока11 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(11));
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока30 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(30));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2,
		ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3,
		ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод",
		НСтр("ru = 'Штрихкод'"), ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул",
		НСтр("ru = 'Артикул'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование",
		НСтр("ru = 'Номенклатура (наименование)'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки,
		"НоменклатураНаименованиеПолное", НСтр("ru = 'Номенклатура (полное наименование)'"), ОписаниеТиповСтрока1000,
		ОписаниеТиповКолонка, "Номенклатура", 5, , Истина);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Содержание", НСтр("ru = 'Содержание'"),
		ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000, , , , , НастройкиЗагрузкиДанных.СодержаниеВидимо);
		
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительКод",
		НСтр("ru = 'Код'", ОбщегоНазначения.КодОсновногоЯзыка()), 			ОписаниеТиповСтрока11, ОписаниеТиповКолонка, "Родитель", 1);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительНаименование", 
		НСтр("ru = 'Группа (наименование)'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Родитель", 2);	

	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаНаименование", НСтр("ru = 'Характеристика (наименование)'"), ОписаниеТиповСтрока150, ОписаниеТиповКолонка, "Характеристика", 1);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаАртикул", НСтр("ru = 'Характеристика (артикул)'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Характеристика", 2);
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЭтоУслуга", 
		НСтр("ru = 'Это услуга'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповБулево, ОписаниеТиповБулево); 		
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Картинка", 
		НСтр("ru = 'Картинка'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000,,,,,Ложь);   		
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "КатегорияНоменклатуры", 
		НСтр("ru = 'Категория номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);   
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Партия",
			НСтр("ru = 'Партия (наименование)'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаДоходов", 
		НСтр("ru = 'Счет учета доходов'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗапасов", 
		НСтр("ru = 'Счет учета запасов'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗатрат", 
		НСтр("ru = 'Счет учета затрат'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,,,,, Ложь);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НаправлениеДеятельности",
		НСтр("ru = 'Направление деятельности'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.МетодОценкиЗапасов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "МетодОценки",
		НСтр("ru = 'Способ списания'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПополненияЗапасов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СпособПополнения",
		НСтр("ru = 'Способ пополнения'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество",
		НСтр("ru = 'Количество'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , Истина);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Резерв", НСтр("ru = 'Резерв'"),
		ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , , , ПолучитьФункциональнуюОпцию("РезервированиеЗапасов"));

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения",
		НСтр("ru = 'Ед. изм.'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, , , , , ПолучитьФункциональнуюОпцию(
		"УчетВРазличныхЕдиницахИзмерения"));

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Цена", НСтр("ru = 'Цена'"),
		ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Истина);

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтавкаНДС",
		НСтр("ru = 'Ставка НДС'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СуммаНДС",
		НСтр("ru = 'Сумма НДС'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
	
	// Заказ покупателя
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	ВидимостьЗаказаПокупателя = НастройкиЗагрузкиДанных.Свойство("ПоложениеЗаказаВДокументе")
								И (НастройкиЗагрузкиДанных.ПоложениеЗаказаВДокументе = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	ОписаниеТиповКолонка = Новый ОписаниеТипов(МассивТипов);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Заказ",
		НСтр("ru = 'Заказ (покупатель/поставщик)'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка, , , , ,
		ВидимостьЗаказаПокупателя);
	
	// Склад
	ВидимостьСклада = (ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам")
						И НастройкиЗагрузкиДанных.Свойство("ПоложениеСклада")
					    И НастройкиЗагрузкиДанных.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтруктурнаяЕдиница",
		НСтр("ru = 'Склад'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка, , , , , ВидимостьСклада);
	
	Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтраныМира");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтранаПроисхождения",
			НСтр("ru = 'Страна происхождения'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НомераГТД");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НомерГТД",
			НСтр("ru = 'Номер ГТД'"), ОписаниеТиповСтрока30, ОписаниеТиповКолонка);
		
	КонецЕсли;
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("Булево");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ИспользоватьСерииНоменклатуры", 
			НСтр("ru = 'Использовать Серии номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Серия",
			НСтр("ru = 'Серийный номер'"), ОписаниеТиповСтрока1000, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ПараметрыСопоставления, АдресРезультата) Экспорт
	
	ТаблицаСопоставленияДанных	= ПараметрыСопоставления.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных		= ПараметрыСопоставления.НастройкиЗагрузкиДанных;
	НастройкиПоиска				= НастройкиЗагрузкиДанных.НастройкиПоиска;
	
	ТаблицаДублирующихСтрок = ЗагрузкаДанныхИзВнешнегоИсточника.ПустаяТаблицаДублирующихСтрокНоменклатуры();
	НастройкиПоиска.Вставить("ТаблицаДублирующихСтрок", ТаблицаДублирующихСтрок);
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы, НастройкиПоиска);
		
		// Содержание
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Содержание, СтрокаТаблицыФормы.Содержание_ВходящиеДанные);
		
		СтрокаТаблицыФормы.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
		СтрокаТаблицыФормы.СчетУчетаЗатрат = ?(ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство"), 
			ПланыСчетов.Управленческий.НезавершенноеПроизводство, ПланыСчетов.Управленческий.КоммерческиеРасходы);
		СтрокаТаблицыФормы.СчетУчетаДоходов = ?(СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"), 
			ПланыСчетов.Управленческий.ПрочиеДоходы, ПланыСчетов.Управленческий.ПустаяСсылка());
			
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "НаправлениеДеятельности") Тогда
				
			ЗначениеПоУмолчанию = Справочники.НаправленияДеятельности.Прочее;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНаправлениеДеятельности(СтрокаТаблицыФормы.НаправлениеДеятельности, СтрокаТаблицыФормы.НаправлениеДеятельности_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "МетодОценки") Тогда
				
			ЗначениеПоУмолчанию = Перечисления.МетодОценкиЗапасов.ПоСредней;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьМетодОценки(СтрокаТаблицыФормы.МетодОценки, СтрокаТаблицыФормы.МетодОценки_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "СпособПополнения") Тогда
				
			ЗначениеПоУмолчанию = Перечисления.СпособыПополненияЗапасов.Закупка;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСпособПополнения(СтрокаТаблицыФормы.СпособПополнения, СтрокаТаблицыФормы.СпособПополнения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "КатегорияНоменклатуры_ВходящиеДанные")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "КатегорияНоменклатуры") Тогда
		
			ЗначениеПоУмолчанию = Справочники.КатегорииНоменклатуры.БезКатегории;					
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьКатегориюНоменклатуры(СтрокаТаблицыФормы.КатегорияНоменклатуры, СтрокаТаблицыФормы.КатегорияНоменклатуры_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "Родитель")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "РодительНаименование")
			И ЗначениеЗаполнено(СтрокаТаблицыФормы.РодительНаименование) Тогда
			
			ЗначениеПоУмолчанию = Справочники.Номенклатура.ПустаяСсылка();
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьРодителяНоменклатуры(СтрокаТаблицыФормы.Родитель, "", СтрокаТаблицыФормы.РодительНаименование, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "ЭтоУслуга_ВходящиеДанные") Тогда
			
			СтрокаТаблицыФормы.ЭтоУслуга = СтрокаТаблицыФормы.ЭтоУслуга_ВходящиеДанные;
			                      			
		КонецЕсли;
		
		// Характеристика по Владельцу и Наименованию
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Партия по Владельцу и Наименованию
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПартию(СтрокаТаблицыФормы.Партия, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Партия_ВходящиеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Серии номенклатуры
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) 
				И  ЗначениеЗаполнено(СтрокаТаблицыФормы.Серия_ВходящиеДанные) Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСерия(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Серия, СтрокаТаблицыФормы.Серия_ВходящиеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Количество
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
		
		// Резерв
		Если ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Резерв, СтрокаТаблицыФормы.Резерв_ВходящиеДанные, 0);
			
		КонецЕсли;
		
		// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
		ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Цена
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Цена, СтрокаТаблицыФормы.Цена_ВходящиеДанные, 1);
		
		// СтавкаНДС по наименованию
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтавкуНДС(СтрокаТаблицыФормы.СтавкаНДС, СтрокаТаблицыФормы.СтавкаНДС_ВходящиеДанные, Неопределено);
		
		// СуммаНДС
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СуммаНДС, СтрокаТаблицыФормы.СуммаНДС_ВходящиеДанные, 0);
		
		// Заказ
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЗаказ(СтрокаТаблицыФормы.Заказ, СтрокаТаблицыФормы.Заказ_ВходящиеДанные);
		
		// Склад
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтруктурнуюЕдиницу(СтрокаТаблицыФормы.СтруктурнаяЕдиница, СтрокаТаблицыФормы.СтруктурнаяЕдиница_ВходящиеДанные, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		// Страна и ГТД
		Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
			
			ЗначениеПоУмолчанию = Неопределено;
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				ЗначениеПоУмолчанию = СтрокаТаблицыФормы.Номенклатура.СтранаПроисхождения;
				
			КонецЕсли;
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтрануПроисхождения(СтрокаТаблицыФормы.СтранаПроисхождения, СтрокаТаблицыФормы.СтранаПроисхождения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.СтранаПроисхождения)
				И СтрокаТаблицыФормы.СтранаПроисхождения <> Справочники.СтраныМира.Россия Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНомерГТД(СтрокаТаблицыФормы.НомерГТД, СтрокаТаблицыФормы.НомерГТД_ВходящиеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПрогрессСопоставленияДанных(ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицыФормы), РазмерТаблицыДанных);
		
	КонецЦикла;
	
	ТаблицаСопоставленияДанных.ЗагрузитьКолонку(ТаблицаДублирующихСтрок.ВыгрузитьКолонку("КлючСвязи"), "_КлючСвязи");
	ПоместитьВоВременноеХранилище(ТаблицаСопоставленияДанных, АдресРезультата);
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	НоменклатураЗаполнена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
	ЗагрузкаНоменклатурыВозможна = Ложь;
	Если НЕ НоменклатураЗаполнена Тогда
		ЗагрузкаНоменклатурыВозможна = (ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименование) ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименованиеПолное));
	КонецЕсли;
	
	Если НоменклатураЗаполнена Тогда			
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = Не СтрокаТаблицыФормы.Номенклатура.ЭтоНабор // Исключая наборы 
			И (СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
			   Или СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга)
			И СтрокаТаблицыФормы.Количество <> 0
			И Не СтрокаТаблицыФормы.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
		СтрокаТаблицыФормы._СтрокаСопоставлена = НоменклатураЗаполнена;
		
	Иначе
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗагрузкаНоменклатурыВозможна;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
// @skip-warning
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область РаботаССериямиНоменклатуры

// Формирует таблицу значений, содержащую данные для проведения по регистру СерииНоменклатурыГарантии.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСерииНоменклатуры(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаРасходнаяНакладная.СерииНоменклатуры.Количество()=0 Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатуры", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Движение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Расход)
	|	КОНЕЦ КАК Операция,
	|	ВременнаяТаблицаЗапасы.Период КАК Период,
	|	ВременнаяТаблицаЗапасы.Период КАК ДатаСобытия,
	|	СерииНоменклатуры.Серия КАК Серия,
	|	СерииНоменклатуры.ОстаткиСерийНоменклатуры КАК ОстаткиСерийНоменклатуры,
	|	ВременнаяТаблицаЗапасы.Организация КАК Организация,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ТОГДА ВременнаяТаблицаЗапасы.Контрагент
	|		ИНАЧЕ ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаЗапасы.Ячейка КАК Ячейка,
	|	ВременнаяТаблицаЗапасы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СерииНоменклатуры.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерииНоменклатуры КАК СерииНоменклатуры
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерииНоменклатуры.КлючСвязи
	|ГДЕ
	|	НЕ ВременнаяТаблицаЗапасы.ОрдерныйСклад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Движение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Расход)
	|	КОНЕЦ КАК Операция,
	|	ВременнаяТаблицаЗапасы.Период КАК Период,
	|	ВременнаяТаблицаЗапасы.Период КАК ДатаСобытия,
	|	СерииНоменклатуры.Серия КАК Серия,
	|	СерииНоменклатуры.ОстаткиСерийНоменклатуры КАК ОстаткиСерийНоменклатуры,
	|	ВременнаяТаблицаЗапасы.Организация КАК Организация,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаЗапасы.Партия КАК Партия,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.Ячейка КАК Ячейка,
	|	ВременнаяТаблицаЗапасы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СерииНоменклатуры.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерииНоменклатуры КАК СерииНоменклатуры
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерииНоменклатуры.КлючСвязи
	|ГДЕ
	|	НЕ ВременнаяТаблицаЗапасы.ОрдерныйСклад";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = МассивРезультатов[0].Выгрузить();
	
	Если Не СтруктураДополнительныеСвойства.УчетнаяПолитика.МиграцияСерийНоменклатурыВыполнена Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", РезультатЗапроса);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Новый ТаблицаЗначений);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", РезультатЗапроса);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
	КонецЕсли;
	
	РезультатЗапроса = МассивРезультатов[1].Выгрузить();
	ПараметрыОтбора = Новый Структура("ОстаткиСерийНоменклатуры", Истина);
	ОстаткиСерийНоменклатурыСтроки = РезультатЗапроса.НайтиСтроки(ПараметрыОтбора);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатуры", РезультатЗапроса.Скопировать(ОстаткиСерийНоменклатурыСтроки));
	
КонецПроцедуры // СформироватьТаблицаСерииНоменклатуры()

// Формирует таблицу значений, содержащую данные для проведения по регистру СерииНоменклатурыКРасходу.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСерииНоменклатурыКРасходу(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылка.СерииНоменклатуры.Количество() = 0 Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыКРасходу", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	СерииНоменклатуры.Серия КАК Серия,
	|	СерииНоменклатуры.ОстаткиСерийНоменклатуры КАК ОстаткиСерийНоменклатуры,
	|	ВременнаяТаблицаЗапасы.Организация КАК Организация,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаЗапасы.Партия КАК Партия,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СерииНоменклатуры.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерииНоменклатуры КАК СерииНоменклатуры
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерииНоменклатуры.КлючСвязи
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВременнаяТаблицаЗапасы.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|				ТОГДА ВременнаяТаблицаЗапасы.ОрдерныйСклад
	|			ИНАЧЕ ВременнаяТаблицаЗапасы.СтруктурнаяЕдиницаШапкаОрдерныйСклад
	|		КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ПараметрыОтбора = Новый Структура("ОстаткиСерийНоменклатуры", Истина);
	ОстаткиСерийНоменклатурыСтроки = РезультатЗапроса.НайтиСтроки(ПараметрыОтбора);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыКРасходу", РезультатЗапроса.Скопировать(ОстаткиСерийНоменклатурыСтроки));
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияДанных

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаИнициализироватьДанныеДокумента());
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	// Серии
	Запрос.УстановитьПараметр("ИспользоватьСерииНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры);
	Запрос.УстановитьПараметр("ОстаткиСерийНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийНоменклатуры);
	// Прослеживаемость
	Запрос.УстановитьПараметр("ВестиУчетПрослеживаемыхТоваров",
		СтруктураДополнительныеСвойства.УчетнаяПолитика.ВестиУчетПрослеживаемыхТоваров);
	
	Запрос.УстановитьПараметр("ВалютаУчета", СтруктураДополнительныеСвойства.ВалютаУчета);
	Запрос.УстановитьПараметр("ВалютаНациональная", СтруктураДополнительныеСвойства.НациональнаяВалюта);
	Запрос.УстановитьПараметр("ВалютаНакладной", ДокументСсылкаРасходнаяНакладная.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаРасчетов", СтруктураДополнительныеСвойства.Договор.ВалютаРасчетов);
	
	
	//Перед выполнением запроса проверим, необходим ли пересчет из валюты в валюту
	РасчетыПроведениеДокументов.МодифицироватьЗапросДляПересчетаВВалюту(ДокументСсылкаРасходнаяНакладная, Запрос, СтруктураДополнительныеСвойства);
	
	Запрос.ВыполнитьПакет();
	
	Если НЕ ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю Тогда
		СтруктураДополнительныеСвойства.Вставить("БезУчетаАвансов", Истина);
		РасчетыПроведениеДокументов.ПересчитатьТаблицыПоКурсамВалют(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
		РасчетыПроведениеДокументов.ПоместитьПересчитанныеТаблицыВМенеджерВременныхТаблиц(СтруктураДополнительныеСвойства);
	КонецЕсли;
	
	// Формирование проводок документа.
	ПроведениеДокументовУНФ.СформироватьТаблицуПроводок(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРасчетыСПоставщиками(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗакупки(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПродажи(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаВыпускПродукции(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗапасыВРазрезеГТД(СтруктураДополнительныеСвойства);
	// Прослеживаемость
	ПрослеживаемостьУНФ.СформироватьДвиженияРеализацияТоваров(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	// Конец Прослеживаемость
	
	СформироватьТаблицаЗапасыКРасходуСоСкладов(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыИАгентскиеУслугиПринятые(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыПереданные(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗаказыПоставщикам(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходы(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПотребностьВЗапасах(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРазмещениеЗаказов(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
	// Интеркампани
	СформироватьТаблицаРезервыТоваровОрганизаций(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	// Конец Интеркампани
	
	// ДисконтныеКарты
	СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	// ДисконтныеКарты
	
	// Серии номенклатуры
	СформироватьТаблицаСерииНоменклатуры(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСерииНоменклатурыКРасходу(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	// Серии номенклатуры
	
	// Подарочные сертификаты
	СформироватьТаблицаПодарочныеСертификаты(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаПодарочнымиСертификатами(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	// Подарочные сертификаты
	
	СформироватьТаблицаПродажиПоПредоставленнымСкидкам(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗапасы(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
	// Кассовый метод
	РасчетыПроведениеДокументов.СформироватьВременнаяТаблицаПредоплатаДляКассовогоМетода(СтруктураДополнительныеСвойства, Метаданные.РегистрыНакопления.РасчетыСПокупателями.Имя);
	СформироватьТаблицаДоходыИРасходыОтложенные(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	// Конец Кассовый метод
	
	// Эквайринг
	ЭквайринговыеОперацииСервер.СформироватьТаблицаДоходыИРасходыКассовыйМетодЭквайринг(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаУправленческий(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
	// Биллинг
	СформироватьТаблицаВыполнениеДоговораОбслуживания(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗакупкиДляКУДиР(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаДокументов(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСуммыДокументовРегламентированныйУчет(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Функция ТекстЗапросаИнициализироватьДанныеДокумента()
	
	Возврат
	"ВЫБРАТЬ
	|	РасходнаяНакладная.Договор.ЭтоДоговорОбслуживания КАК ЭтоДоговорОбслуживания,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.Договор.ЭтоДоговорОбслуживания
	|				И РасходнаяНакладная.Договор.ДоговорОбслуживанияНаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВестиУчетРасходовПоДоговорамОбслуживания,
	|	РасходнаяНакладная.Договор.ДоговорОбслуживанияНаправлениеДеятельности КАК НаправлениеДеятельности,
	|	РасходнаяНакладная.Договор.ВалютаРасчетов КАК ДоговорВалютаРасчетов,
	|	РасходнаяНакладная.Договор.РасчетыВУсловныхЕдиницах КАК ДоговорРасчетыВУсловныхЕдиницах,
	|	РасходнаяНакладная.Контрагент КАК Контрагент,
	|	РасходнаяНакладная.ВалютаДокумента КАК ВалютаДокумента,
	|	РасходнаяНакладная.Кратность КАК Кратность,
	|	РасходнаяНакладная.Курс КАК Курс,
	|	РасходнаяНакладная.Договор КАК Договор,
	|	РасходнаяНакладная.Дата КАК Дата,
	|	РасходнаяНакладная.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	РасходнаяНакладная.Дата КАК Период,
	|	РасходнаяНакладная.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасходнаяНакладная.СпособЗачетаПредоплаты КАК СпособЗачетаПредоплаты,
	|	РасходнаяНакладная.Заказ КАК Заказ,
	|	РасходнаяНакладная.Ссылка КАК Ссылка,
	|	РасходнаяНакладная.ПоложениеЗаказаПокупателя КАК ПоложениеЗаказаПокупателя,
	|	РасходнаяНакладная.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	РасходнаяНакладная.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	РасходнаяНакладная.ВидОперации КАК ВидОперации,
	|	РасходнаяНакладная.Ответственный КАК Ответственный,
	|	РасходнаяНакладная.ДокументОснование КАК ДокументОснование,
	|	РасходнаяНакладная.ПоложениеСклада КАК ПоложениеСклада,
	|	РасходнаяНакладная.Организация КАК Организация,
	|	РасходнаяНакладная.Подразделение КАК Подразделение,
	|	РасходнаяНакладная.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	РасходнаяНакладная.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	РасходнаяНакладная.ПоложениеПроекта КАК ПоложениеПроекта,
	|	РасходнаяНакладная.Проект КАК Проект,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ТОГДА РасходнаяНакладная.Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеУчитыватьЗаказыПриПередачеНаКомиссию,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|				И РасходнаяНакладная.ДокументОснование ССЫЛКА Документ.ПриходнаяНакладная
	|				И РасходнаяНакладная.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладная.ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорректируемыйДокумент,
	|	РасходнаяНакладная.Номер КАК Номер
	|ПОМЕСТИТЬ ВременнаяТаблицаШапка
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВременнаяТаблицаКурсыВалютСрезПоследних
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаУчета, &ВалютаНациональная, &ВалютаНакладной, &ВалютаРасчетов)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(РасходнаяНакладнаяЗапасы.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ МаксНомерСтрокиЗапасы
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Ссылка КАК Ссылка,
	|	РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтроки,
	|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	РасходнаяНакладнаяЗапасы.Партия КАК Партия,
	|	РасходнаяНакладнаяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	РасходнаяНакладнаяЗапасы.НомерГТД КАК НомерГТД,
	|	РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|	РасходнаяНакладнаяЗапасы.Заказ КАК Заказ,
	|	РасходнаяНакладнаяЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РасходнаяНакладнаяЗапасы.Количество КАК Количество,
	|	РасходнаяНакладнаяЗапасы.Резерв КАК Резерв,
	|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДС,
	|	РасходнаяНакладнаяЗапасы.Всего КАК Всего,
	|	РасходнаяНакладнаяЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	РасходнаяНакладнаяЗапасы.Ячейка КАК Ячейка,
	|	РасходнаяНакладнаяЗапасы.КлючСвязи КАК КлючСвязи,
	|	РасходнаяНакладнаяЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РасходнаяНакладнаяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	РасходнаяНакладнаяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	РасходнаяНакладнаяЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	РасходнаяНакладнаяЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	РасходнаяНакладнаяЗапасы.Цена КАК Цена,
	|	РасходнаяНакладнаяЗапасы.Проект КАК Проект,
	|	ЛОЖЬ КАК ЭтоДоставка,
	|	РасходнаяНакладнаяЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар
	|ПОМЕСТИТЬ ВТРасходнаяНакладнаяЗапасы
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходнаяНакладная.Ссылка,
	|	ЕСТЬNULL(МаксНомерСтрокиЗапасы.НомерСтроки, 0) + 1,
	|	РасходнаяНакладная.НоменклатураДоставки,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	РасходнаяНакладная.Заказ,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
	|	РасходнаяНакладная.НоменклатураДоставки.ЕдиницаИзмерения,
	|	1,
	|	0,
	|	РасходнаяНакладная.СтавкаНДСДоставки,
	|	РасходнаяНакладная.СуммаНДСДоставки,
	|	РасходнаяНакладная.СтоимостьДоставки + ВЫБОР
	|		КОГДА РасходнаяНакладная.СуммаВключаетНДС
	|			ТОГДА 0
	|		ИНАЧЕ РасходнаяНакладная.СуммаНДСДоставки
	|	КОНЕЦ,
	|	РасходнаяНакладная.СтруктурнаяЕдиница,
	|	РасходнаяНакладная.Ячейка,
	|	0,
	|	0,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	0,
	|	0,
	|	РасходнаяНакладная.СтоимостьДоставки,
	|	РасходнаяНакладная.Проект,
	|	ИСТИНА,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная,
	|	МаксНомерСтрокиЗапасы КАК МаксНомерСтрокиЗапасы
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &Ссылка
	|	И РасходнаяНакладная.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаШапка.ВидОперации КАК ВидОперации,
	|	ВТРасходнаяНакладнаяЗапасы.Ссылка КАК Документ,
	|	ВременнаяТаблицаШапка.Ответственный КАК Ответственный,
	|	ВременнаяТаблицаШапка.ДокументОснование КАК ДокументОснование,
	|	ВременнаяТаблицаШапка.ПоложениеСклада КАК ПоложениеСклада,
	|	ВременнаяТаблицаШапка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаШапка,
	|	ВременнаяТаблицаШапка.СтруктурнаяЕдиница.ОрдерныйСклад КАК СтруктурнаяЕдиницаШапкаОрдерныйСклад,
	|	ВременнаяТаблицаШапка.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаШапка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ВременнаяТаблицаШапка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ВременнаяТаблицаШапка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ВременнаяТаблицаШапка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ВременнаяТаблицаШапка.Договор КАК Договор,
	|	ВременнаяТаблицаШапка.Дата КАК Период,
	|	ВременнаяТаблицаШапка.Организация КАК ОрганизацияВНУ,
	|	&Организация КАК Организация,
	|	ВременнаяТаблицаШапка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение))
	|			ТОГДА &Организация
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррОрганизация,
	|	ВременнаяТаблицаШапка.Подразделение КАК ПодразделениеПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности
	|		ИНАЧЕ ВТРасходнаяНакладнаяЗапасы.Номенклатура.НаправлениеДеятельности
	|	КОНЕЦ КАК НаправлениеДеятельностиПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|		ИНАЧЕ ВТРасходнаяНакладнаяЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|	КОНЕЦ КАК СчетУчетаПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|		ИНАЧЕ ВТРасходнаяНакладнаяЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|	КОНЕЦ КАК СчетУчетаСебестоимость,
	|	ВТРасходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВТРасходнаяНакладнаяЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение))
	|			ТОГДА ВременнаяТаблицаШапка.Контрагент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррСтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ВТРасходнаяНакладнаяЗапасы.СтруктурнаяЕдиница.ОрдерныйСклад
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдерныйСклад,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА ВТРасходнаяНакладнаяЗапасы.Ячейка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Ячейка,
	|	ЕСТЬNULL(ВТРасходнаяНакладнаяЗапасы.Номенклатура.СчетУчетаЗапасов, ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)) КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение))
	|			ТОГДА ВТРасходнаяНакладнаяЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррСчетУчета,
	|	ЕСТЬNULL(ВТРасходнаяНакладнаяЗапасы.Номенклатура.СчетУчетаЗатрат, ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)) КАК СчетУчетаЗатрат,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|				И ВТРасходнаяНакладнаяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				И ВременнаяТаблицаШапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТоварыНаКомиссии,
	|	ВТРасходнаяНакладнаяЗапасы.Номенклатура.ЭтоАгентскаяУслуга КАК ЭтоАгентскаяУслуга,
	|	ВТРасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	ВТРасходнаяНакладнаяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВТРасходнаяНакладнаяЗапасы.НомерГТД КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение))
	|			ТОГДА ВТРасходнаяНакладнаяЗапасы.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррНоменклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ВТРасходнаяНакладнаяЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение))
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользоватьХарактеристики
	|						ТОГДА ВТРасходнаяНакладнаяЗапасы.Характеристика
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррХарактеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ВТРасходнаяНакладнаяЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение))
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользоватьПартии
	|						ТОГДА ВТРасходнаяНакладнаяЗапасы.Партия
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррПартия,
	|	ВЫБОР
	|		КОГДА ВТРасходнаяНакладнаяЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ВТРасходнаяНакладнаяЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ВТРасходнаяНакладнаяЗапасы.Заказ
	|		КОГДА ВТРасходнаяНакладнаяЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ВТРасходнаяНакладнаяЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|			ТОГДА ВТРасходнаяНакладнаяЗапасы.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ВТРасходнаяНакладнаяЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ВТРасходнаяНакладнаяЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ВТРасходнаяНакладнаяЗапасы.Заказ КАК Документ.ЗаказПокупателя).УчетПотребностиПоСкладам
	|		КОГДА ВТРасходнаяНакладнаяЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ВТРасходнаяНакладнаяЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ВТРасходнаяНакладнаяЗапасы.Заказ КАК Документ.ЗаказПоставщику).УчетПотребностиПоСкладам
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчетПотребностиПоСкладам,
	|	ВТРасходнаяНакладнаяЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ВТРасходнаяНакладнаяЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|				И ВТРасходнаяНакладнаяЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ВТРасходнаяНакладнаяЗапасы.ЗаказПокупателя КАК Документ.ЗаказПокупателя).УчетПотребностиПоЗаказам
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчетПотребностиПоЗаказам,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение))
	|			ТОГДА ВЫБОР
	|					КОГДА ВТРасходнаяНакладнаяЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|							И ВТРасходнаяНакладнаяЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						ТОГДА ВТРасходнаяНакладнаяЗапасы.Заказ
	|					КОГДА ВТРасходнаяНакладнаяЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|							И ВТРасходнаяНакладнаяЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|						ТОГДА ВТРасходнаяНакладнаяЗапасы.Заказ
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррЗаказ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВТРасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ВТРасходнаяНакладнаяЗапасы.Количество
	|		ИНАЧЕ ВТРасходнаяНакладнаяЗапасы.Количество * ВТРасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВТРасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ВТРасходнаяНакладнаяЗапасы.Резерв
	|		ИНАЧЕ ВТРасходнаяНакладнаяЗапасы.Резерв * ВТРасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Резерв,
	|	ВТРасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВременнаяТаблицаШапка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ВТРасходнаяНакладнаяЗапасы.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ВТРасходнаяНакладнаяЗапасы.СуммаНДС * ВременнаяТаблицаШапка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ВременнаяТаблицаШапка.Кратность)
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ВТРасходнаяНакладнаяЗапасы.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ВТРасходнаяНакладнаяЗапасы.СуммаНДС * ВременнаяТаблицаШапка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ВременнаяТаблицаШапка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСЗакупкиПродажи,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ВТРасходнаяНакладнаяЗапасы.Всего * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ВТРасходнаяНакладнаяЗапасы.Всего * ВременнаяТаблицаШапка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ВременнаяТаблицаШапка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВременнаяТаблицаШапка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ВТРасходнаяНакладнаяЗапасы.СуммаНДС * КурсыРегВалюты.Курс * ВременнаяТаблицаШапка.Кратность / (ВременнаяТаблицаШапка.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ВТРасходнаяНакладнаяЗапасы.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВременнаяТаблицаШапка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ВТРасходнаяНакладнаяЗапасы.СуммаНДС
	|					ИНАЧЕ ВТРасходнаяНакладнаяЗапасы.СуммаНДС * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРег,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ВТРасходнаяНакладнаяЗапасы.Всего * КурсыРегВалюты.Курс * ВременнаяТаблицаШапка.Кратность / (ВременнаяТаблицаШапка.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ВТРасходнаяНакладнаяЗапасы.Всего
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаШапка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ВТРасходнаяНакладнаяЗапасы.Всего
	|			ИНАЧЕ ВТРасходнаяНакладнаяЗапасы.Всего * ВременнаяТаблицаШапка.Курс / ВременнаяТаблицаШапка.Кратность
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРег,
	|	ВТРасходнаяНакладнаяЗапасы.Всего КАК СуммаРасчетовПринятыеПереданные,
	|	ВТРасходнаяНакладнаяЗапасы.Всего КАК ВсегоВалютаДокумента,
	|	ВременнаяТаблицаШапка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ВременнаяТаблицаШапка.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	ВременнаяТаблицаШапка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ВТРасходнаяНакладнаяЗапасы.КлючСвязи КАК КлючСвязи,
	|	ВТРасходнаяНакладнаяЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВТРасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДСВалютаДокумента,
	|	ВТРасходнаяНакладнаяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ВТРасходнаяНакладнаяЗапасы.ХарактеристикаНабора
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ХарактеристикаНабора,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВТРасходнаяНакладнаяЗапасы.Номенклатура.ПроизвольныйНоминал
	|				ТОГДА ВТРасходнаяНакладнаяЗапасы.Всего / ВЫБОР
	|						КОГДА ВТРасходнаяНакладнаяЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры
	|							ТОГДА ВТРасходнаяНакладнаяЗапасы.Количество
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ ВТРасходнаяНакладнаяЗапасы.Номенклатура.Номинал / ВЫБОР
	|					КОГДА ВТРасходнаяНакладнаяЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры
	|						ТОГДА 1
	|					ИНАЧЕ 1 / ВТРасходнаяНакладнаяЗапасы.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК НоминалСертификата,
	|	ВТРасходнаяНакладнаяЗапасы.Номенклатура.ПроизвольныйНоминал КАК ПроизвольныйНоминал,
	|	ВТРасходнаяНакладнаяЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ВТРасходнаяНакладнаяЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ВТРасходнаяНакладнаяЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ВТРасходнаяНакладнаяЗапасы.Цена КАК Цена,
	|	ВременнаяТаблицаШапка.НеУчитыватьЗаказыПриПередачеНаКомиссию КАК НеУчитыватьЗаказыПриПередачеНаКомиссию,
	|	ВТРасходнаяНакладнаяЗапасы.ЭтоДоставка КАК ЭтоДоставка,
	|	ВременнаяТаблицаШапка.Курс КАК Курс,
	|	ВременнаяТаблицаШапка.Кратность КАК Кратность,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ПоложениеПроекта <> ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|			ТОГДА ВременнаяТаблицаШапка.Проект
	|		ИНАЧЕ ВТРасходнаяНакладнаяЗапасы.Проект
	|	КОНЕЦ КАК Проект,
	|	ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий, ВТРасходнаяНакладнаяЗапасы.Номенклатура.ПолитикаУчетаСерий) КАК ПолитикаУчетаСерий,
	|	NULL КАК КорректируемыйДокумент,
	|	ВТРасходнаяНакладнаяЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	ВТРасходнаяНакладнаяЗапасы КАК ВТРасходнаяНакладнаяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыУпрВалюты
	|		ПО (КурсыУпрВалюты.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыРегВалюты
	|		ПО (КурсыРегВалюты.Валюта = &ВалютаНациональная)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО ВТРасходнаяНакладнаяЗапасы.Номенклатура = ПолитикиУчетаСерий.Владелец
	|			И ВТРасходнаяНакладнаяЗапасы.СтруктурнаяЕдиница = ПолитикиУчетаСерий.СтруктурнаяЕдиница
	|			И (&Организация = ПолитикиУчетаСерий.Организация),
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.ВидОперации КАК ВидОперации,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПоставщику КАК СчетУчетаАвансовПоставщику,
	|	ТаблицаДокумента.Ссылка.Организация КАК ОрганизацияВНУ,
	|	ТаблицаДокумента.Ссылка.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ТаблицаДокумента.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаДокумента.Ссылка.Договор КАК Договор,
	|	ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ТаблицаДокумента.Заказ КАК Заказ,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельностиПродажи,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетовКуда,
	|	&Ссылка КАК ДокументКуда,
	|	ТаблицаДокумента.Ссылка.ДокументОснование КАК ДокументОснование,
	|	ТаблицаДокумента.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.Взаимозачет)
	|				ИЛИ ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Статья
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|			КОНЕЦ
	|	КОНЕЦ КАК Статья,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.ОплатаСертификатом
	|				И ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.Взаимозачет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.Взаимозачет).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ЧекККМ
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ЧекККМ).Дата
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.Дата
	|	КОНЕЦ КАК ДокументДата,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * ТаблицаДокумента.Кратность) КАК ЧИСЛО(15, 2)) КАК СуммаАванса,
	|	ВЫБОР
	|		КОГДА КонстантаВалютаУчета.Значение = &ВалютаРасчетов
	|			ТОГДА ТаблицаДокумента.СуммаРасчетов
	|		КОГДА КонстантаВалютаУчета.Значение = КонстантаНациональнаяВалюта.Значение
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс / ТаблицаДокумента.Кратность КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * ТаблицаДокумента.Кратность) КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаДокумента.СуммаРасчетов КАК СуммаВал,
	|	ВЫБОР
	|		КОГДА КонстантаНациональнаяВалюта.Значение = &ВалютаРасчетов
	|			ТОГДА ТаблицаДокумента.СуммаРасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс / ТаблицаДокумента.Кратность КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаРег,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.ОперацияПоПлатежнымКартам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЭквайринговаяОперация,
	|	ТаблицаДокумента.Документ.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Документ.Дата, ДЕНЬ) КАК ДатаПлатежа,
	|	ТаблицаДокумента.Курс КАК Курс,
	|	ТаблицаДокумента.Кратность КАК Кратность,
	|	ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс / ТаблицаДокумента.Кратность КАК ЧИСЛО(15, 2)) КАК СуммаРубПоКурсуАванса,
	|	ТаблицаДокумента.ОплатаСертификатом КАК ОплатаСертификатом,
	|	ТаблицаДокумента.НомерСертификата КАК НомерСертификата,
	|	ТаблицаДокумента.Документ.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ТаблицаДокумента.Документ.СчетУчетаДоходов КАК СчетУчетаДоходов,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА ТаблицаДокумента.Документ.Номинал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Номинал,
	|	ТаблицаДокумента.Ссылка.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА ТаблицаДокумента.Документ.ЧастичноеПогашение
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЧастичноеПогашение,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА ТаблицаДокумента.СуммаПлатежа
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСертификата,
	|	ТаблицаДокумента.СуммаПлатежа КАК СуммаПлатежа,
	|	ТаблицаДокумента.СуммаРасчетов КАК СуммаРасчетов,
	|	ТаблицаДокумента.Ссылка.Проект КАК Проект
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплата
	|ИЗ
	|	Документ.РасходнаяНакладная.Предоплата КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалютУчетаСрезПоследних
	|		ПО (КурсыВалютУчетаСрезПоследних.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалютДокументаСрезПоследних
	|		ПО (КурсыВалютДокументаСрезПоследних.Валюта = &ВалютаНакладной),
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта,
	|	Константа.ВалютаУчета КАК КонстантаВалютаУчета
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяСкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	РасходнаяНакладнаяСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА РасходнаяНакладнаяСкидкиНаценки.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|				ТОГДА РасходнаяНакладнаяСкидкиНаценки.Сумма * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ РасходнаяНакладнаяСкидкиНаценки.Сумма * РасходнаяНакладнаяСкидкиНаценки.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * РасходнаяНакладнаяСкидкиНаценки.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	РасходнаяНакладнаяСкидкиНаценки.Ссылка.Дата КАК Период,
	|	РасходнаяНакладнаяСкидкиНаценки.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВременнаяТаблицаАвтоСкидкиНаценки
	|ИЗ
	|	Документ.РасходнаяНакладная.СкидкиНаценки КАК РасходнаяНакладнаяСкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаВалютаУчета.Значение
	|					ИЗ
	|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаНациональнаяВалюта.Значение
	|					ИЗ
	|						Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта)) КАК КурсыРегВалюты
	|		ПО (ИСТИНА),
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|ГДЕ
	|	РасходнаяНакладнаяСкидкиНаценки.Ссылка = &Ссылка
	|	И РасходнаяНакладнаяСкидкиНаценки.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяСерииНоменклатуры.КлючСвязи КАК КлючСвязи,
	|	РасходнаяНакладнаяСерииНоменклатуры.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяСерииНоменклатуры.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ РасходнаяНакладнаяСерииНоменклатуры.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикаУчетаСерий.ПустаяСсылка)
	|			ТОГДА &ОстаткиСерийНоменклатуры
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВременнаяТаблицаЗапасы.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий)
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	КОНЕЦ КАК ОстаткиСерийНоменклатуры
	|ПОМЕСТИТЬ ВременнаяТаблицаСерииНоменклатуры
	|ИЗ
	|	Документ.РасходнаяНакладная.СерииНоменклатуры КАК РасходнаяНакладнаяСерииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ПО (ВременнаяТаблицаЗапасы.КлючСвязи = РасходнаяНакладнаяСерииНоменклатуры.КлючСвязи)
	|ГДЕ
	|	РасходнаяНакладнаяСерииНоменклатуры.Ссылка = &Ссылка
	|	И &ИспользоватьСерииНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	СведенияПрослеживаемости.НомерСтроки КАК НомерСтроки,
	|	СведенияПрослеживаемости.РНПТ КАК РНПТ,
	|	СведенияПрослеживаемости.Количество КАК Количество,
	|	СведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	СведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВременнаяТаблицаСведенияПрослеживаемости
	|ИЗ
	|	Документ.РасходнаяНакладная.СведенияПрослеживаемости КАК СведенияПрослеживаемости
	|ГДЕ
	|	СведенияПрослеживаемости.Ссылка = &Ссылка
	|	И &ВестиУчетПрослеживаемыхТоваров";
	
КонецФункции

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаРасходнаяНакладная, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если ПроведениеДокументовУНФ.КонтрольОстатковВыключен() Тогда
		Возврат;
	КонецЕсли;
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Возврат;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыИзменение", "ДвиженияЗапасыНаСкладахИзменение", 
	// "ДвиженияЗапасыКРасходуСоСкладовИзменение", "ДвиженияЗапасыПереданныеИзменение",
	// "ДвиженияЗапасыПринятыеИзменение", "ДвиженияРазмещениеЗаказовИзменение",
	// "ДвиженияПотребностьВЗапасахИзменение содержат записи, необходимо выполнить 
	// контроль реализации товаров.
	
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыКРасходуСоСкладовИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыПереданныеИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыПринятыеИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыПокупателейИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыПоставщикамИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияПотребностьВЗапасахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияРасчетыСПокупателямиИзменение // Для режима зачета аванса Авто тоже выполняем контроль, т.к. может быть более поздняя оплата.
		ИЛИ СтруктураВременныеТаблицы.ДвиженияСерииНоменклатурыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыВРазрезеГТДИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыПринятыеВРазрезеГТДИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияПодарочныеСертификатыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияПрослеживаемыеТоварыИзменение Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыНаСкладахИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК ЯчейкаПредставление,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(
		|				&МоментКонтроля,
		|				Организация В (&МассивОрганизаций)
		|					И (СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
		|						(ВЫБРАТЬ
		|							ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|							ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
		|							ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
		|							ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
		|							ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
		|						ИЗ
		|							ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК ЗапасыНаСкладахОстатки
		|		ПО ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыТоваровОрганизаций.Остатки(
		|				&МоментКонтроля,
		|				Организация В (&МассивОрганизаций)
		|					И (СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
		|						(ВЫБРАТЬ
		|							ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|							ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
		|							ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
		|							ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
		|							ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
		|						ИЗ
		|							ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК РезервыТоваровОрганизацийОстатки
		|		ПО (&ПередачаТоваровМеждуОрганизациями)
		|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = РезервыТоваровОрганизацийОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = РезервыТоваровОрганизацийОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = РезервыТоваровОрганизацийОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = РезервыТоваровОрганизацийОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = РезервыТоваровОрганизацийОстатки.Ячейка
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчетаПредставление,
		|	ДвиженияЗапасыИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
		|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
		|ИЗ
		|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&МоментКонтроля, Организация В (&МассивОрганизаций)) КАК ЗапасыОстатки
		|		ПО ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
		|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
		|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
		|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
		|			И (ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыПереданныеИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыПереданныеИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Контрагент КАК КонтрагентПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Договор КАК ДоговорПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Заказ КАК ЗаказПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.ТипПриемаПередачи КАК ТипПриемаПередачиПредставление,
		|	ЗапасыПереданныеОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыПереданныеИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыПереданныеОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыПереданные,
		|	ЕСТЬNULL(ЗапасыПереданныеОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыПереданные,
		|	ЕСТЬNULL(ДвиженияЗапасыПереданныеИзменение.СуммаРасчетовИзменение, 0) + ЕСТЬNULL(ЗапасыПереданныеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовЗапасыПереданные,
		|	ЕСТЬNULL(ЗапасыПереданныеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовОстатокЗапасыПереданные
		|ИЗ
		|	ДвиженияЗапасыПереданныеИзменение КАК ДвиженияЗапасыПереданныеИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыПереданные.Остатки(&МоментКонтроля, ) КАК ЗапасыПереданныеОстатки
		|		ПО ДвиженияЗапасыПереданныеИзменение.Организация = ЗапасыПереданныеОстатки.Организация
		|			И ДвиженияЗапасыПереданныеИзменение.Номенклатура = ЗапасыПереданныеОстатки.Номенклатура
		|			И ДвиженияЗапасыПереданныеИзменение.Характеристика = ЗапасыПереданныеОстатки.Характеристика
		|			И ДвиженияЗапасыПереданныеИзменение.Партия = ЗапасыПереданныеОстатки.Партия
		|			И ДвиженияЗапасыПереданныеИзменение.Контрагент = ЗапасыПереданныеОстатки.Контрагент
		|			И ДвиженияЗапасыПереданныеИзменение.Договор = ЗапасыПереданныеОстатки.Договор
		|			И ДвиженияЗапасыПереданныеИзменение.Заказ = ЗапасыПереданныеОстатки.Заказ
		|			И ДвиженияЗапасыПереданныеИзменение.ТипПриемаПередачи = ЗапасыПереданныеОстатки.ТипПриемаПередачи
		|			И (ЕСТЬNULL(ЗапасыПереданныеОстатки.КоличествоОстаток, 0) < 0
		|				ИЛИ ЕСТЬNULL(ЗапасыПереданныеОстатки.СуммаРасчетовОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыПринятыеИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыПринятыеИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Контрагент КАК КонтрагентПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Договор КАК ДоговорПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Заказ КАК ЗаказПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи КАК ТипПриемаПередачиПредставление,
		|	ЗапасыПринятыеОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыПринятыеИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыПринятые,
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыПринятые,
		|	ЕСТЬNULL(ДвиженияЗапасыПринятыеИзменение.СуммаРасчетовИзменение, 0) + ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовЗапасыПринятые,
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовОстатокЗапасыПринятые
		|ИЗ
		|	ДвиженияЗапасыПринятыеИзменение КАК ДвиженияЗапасыПринятыеИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыИАгентскиеУслугиПринятые.Остатки(&МоментКонтроля, ) КАК ЗапасыПринятыеОстатки
		|		ПО ДвиженияЗапасыПринятыеИзменение.Организация = ЗапасыПринятыеОстатки.Организация
		|			И ДвиженияЗапасыПринятыеИзменение.Номенклатура = ЗапасыПринятыеОстатки.Номенклатура
		|			И ДвиженияЗапасыПринятыеИзменение.Характеристика = ЗапасыПринятыеОстатки.Характеристика
		|			И ДвиженияЗапасыПринятыеИзменение.Партия = ЗапасыПринятыеОстатки.Партия
		|			И ДвиженияЗапасыПринятыеИзменение.Контрагент = ЗапасыПринятыеОстатки.Контрагент
		|			И ДвиженияЗапасыПринятыеИзменение.Договор = ЗапасыПринятыеОстатки.Договор
		|			И ДвиженияЗапасыПринятыеИзменение.Заказ = ЗапасыПринятыеОстатки.Заказ
		|			И ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи = ЗапасыПринятыеОстатки.ТипПриемаПередачи
		|			И (ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) < 0
		|				ИЛИ ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыПокупателейИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗаказыПокупателейИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Склад КАК СкладПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя КАК ЗаказПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыПокупателейИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыПокупателей,
		|	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыПокупателей
		|ИЗ
		|	ДвиженияЗаказыПокупателейИзменение КАК ДвиженияЗаказыПокупателейИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментКонтроля, ) КАК ЗаказыПокупателейОстатки
		|		ПО ДвиженияЗаказыПокупателейИзменение.Организация = ЗаказыПокупателейОстатки.Организация
		|			И ДвиженияЗаказыПокупателейИзменение.Склад = ЗаказыПокупателейОстатки.Склад
		|			И ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
		|			И ДвиженияЗаказыПокупателейИзменение.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
		|			И ДвиженияЗаказыПокупателейИзменение.Характеристика = ЗаказыПокупателейОстатки.Характеристика
		|			И (ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыПоставщикамИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗаказыПоставщикамИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗаказыПоставщикамИзменение.ЗаказПоставщику КАК ЗаказПоставщикуПредставление,
		|	ДвиженияЗаказыПоставщикамИзменение.Склад КАК СкладПредставление,
		|	ДвиженияЗаказыПоставщикамИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗаказыПоставщикамИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ЗаказыПоставщикамОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыПоставщикамИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыПоставщикам,
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыПоставщикам
		|ИЗ
		|	ДвиженияЗаказыПоставщикамИзменение КАК ДвиженияЗаказыПоставщикамИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&МоментКонтроля, ) КАК ЗаказыПоставщикамОстатки
		|		ПО ДвиженияЗаказыПоставщикамИзменение.Организация = ЗаказыПоставщикамОстатки.Организация
		|			И ДвиженияЗаказыПоставщикамИзменение.Склад = ЗаказыПоставщикамОстатки.Склад
		|			И ДвиженияЗаказыПоставщикамИзменение.ЗаказПоставщику = ЗаказыПоставщикамОстатки.ЗаказПоставщику
		|			И ДвиженияЗаказыПоставщикамИзменение.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		|			И ДвиженияЗаказыПоставщикамИзменение.Характеристика = ЗаказыПоставщикамОстатки.Характеристика
		|			И (ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияПотребностьВЗапасахИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияПотребностьВЗапасахИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.ТипДвижения КАК ТипДвиженияПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.Склад КАК СкладПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.ЗаказНаПроизводство КАК ЗаказНаПроизводствоПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ПотребностьВЗапасахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияПотребностьВЗапасахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) КАК ОстатокПотребностьВЗапасах,
		|	ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокПотребностьВЗапасах
		|ИЗ
		|	ДвиженияПотребностьВЗапасахИзменение КАК ДвиженияПотребностьВЗапасахИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПотребностьВЗапасах.Остатки(&МоментКонтроля, ) КАК ПотребностьВЗапасахОстатки
		|		ПО ДвиженияПотребностьВЗапасахИзменение.Организация = ПотребностьВЗапасахОстатки.Организация
		|			И ДвиженияПотребностьВЗапасахИзменение.ТипДвижения = ПотребностьВЗапасахОстатки.ТипДвижения
		|			И ДвиженияПотребностьВЗапасахИзменение.Склад = ПотребностьВЗапасахОстатки.Склад
		|			И ДвиженияПотребностьВЗапасахИзменение.ЗаказПокупателя = ПотребностьВЗапасахОстатки.ЗаказПокупателя
		|			И ДвиженияПотребностьВЗапасахИзменение.ЗаказНаПроизводство = ПотребностьВЗапасахОстатки.ЗаказНаПроизводство
		|			И ДвиженияПотребностьВЗапасахИзменение.Номенклатура = ПотребностьВЗапасахОстатки.Номенклатура
		|			И ДвиженияПотребностьВЗапасахИзменение.Характеристика = ПотребностьВЗапасахОстатки.Характеристика
		|			И (ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияРасчетыСПокупателямиИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияРасчетыСПокупателямиИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Контрагент КАК КонтрагентПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Договор КАК ДоговорПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Договор.ВалютаРасчетов КАК ВалютаПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Документ КАК ДокументПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Заказ КАК ЗаказПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетовПредставление,
		|	ЛОЖЬ КАК ДвиженияДенежныхДокументов,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение КАК СуммаВалИзменение,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи - ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаПолученныхАвансов,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение + ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаНепогашеннойЗадолженности,
		|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
		|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетов
		|ИЗ
		|	ДвиженияРасчетыСПокупателямиИзменение КАК ДвиженияРасчетыСПокупателямиИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки(&МоментКонтроля, ) КАК РасчетыСПокупателямиОстатки
		|		ПО ДвиженияРасчетыСПокупателямиИзменение.Организация = РасчетыСПокупателямиОстатки.Организация
		|			И ДвиженияРасчетыСПокупателямиИзменение.Контрагент = РасчетыСПокупателямиОстатки.Контрагент
		|			И ДвиженияРасчетыСПокупателямиИзменение.Договор = РасчетыСПокупателямиОстатки.Договор
		|			И ДвиженияРасчетыСПокупателямиИзменение.Документ = РасчетыСПокупателямиОстатки.Документ
		|			И ДвиженияРасчетыСПокупателямиИзменение.Заказ = РасчетыСПокупателямиОстатки.Заказ
		|			И ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = РасчетыСПокупателямиОстатки.ТипРасчетов
		|			И (ВЫБОР
		|				КОГДА ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|					ТОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) > 0
		|				ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) < 0
		|			КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияСерииНоменклатурыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияСерииНоменклатурыИзменение.Серия КАК СерияПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Ячейка КАК ЯчейкаПредставление,
		|	СерииНоменклатурыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	СерииНоменклатурыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияСерииНоменклатурыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах,
		|	ДвиженияСерииНоменклатурыИзменение.КоличествоИзменение КАК КоличествоИзменение
		|ИЗ
		|	ДвиженияСерииНоменклатурыИзменение КАК ДвиженияСерииНоменклатурыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СерииНоменклатуры.Остатки(&МоментКонтроля, ) КАК СерииНоменклатурыОстатки
		|		ПО ДвиженияСерииНоменклатурыИзменение.Серия = СерииНоменклатурыОстатки.Серия
		|			И ДвиженияСерииНоменклатурыИзменение.СтруктурнаяЕдиница = СерииНоменклатурыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияСерииНоменклатурыИзменение.Номенклатура = СерииНоменклатурыОстатки.Номенклатура
		|			И ДвиженияСерииНоменклатурыИзменение.Характеристика = СерииНоменклатурыОстатки.Характеристика
		|			И ДвиженияСерииНоменклатурыИзменение.Партия = СерииНоменклатурыОстатки.Партия
		|			И ДвиженияСерииНоменклатурыИзменение.Ячейка = СерииНоменклатурыОстатки.Ячейка
		|			И (ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыВРазрезеГТДИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД) КАК НомерГТДПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения) КАК СтранаПроисхожденияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыВРазрезеГТДОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыВРазрезеГТДИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыВРазрезеГТД,
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыВРазрезеГТД
		|ИЗ
		|	ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыВРазрезеГТД.Остатки(
		|				&МоментКонтроля,
		|				Организация В (&МассивОрганизаций)
		|					И (НомерГТД, Номенклатура, Характеристика, Партия, СтранаПроисхождения) В
		|						(ВЫБРАТЬ
		|							ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД КАК НомерГТД,
		|							ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура КАК Номенклатура,
		|							ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика КАК Характеристика,
		|							ДвиженияЗапасыВРазрезеГТДИзменение.Партия КАК Партия,
		|							ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения КАК СтранаПроисхождения
		|						ИЗ
		|							ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение)) КАК ЗапасыВРазрезеГТДОстатки
		|		ПО ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД = ЗапасыВРазрезеГТДОстатки.НомерГТД
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура = ЗапасыВРазрезеГТДОстатки.Номенклатура
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика = ЗапасыВРазрезеГТДОстатки.Характеристика
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Партия = ЗапасыВРазрезеГТДОстатки.Партия
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения = ЗапасыВРазрезеГТДОстатки.СтранаПроисхождения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыТоваровОрганизаций.Остатки(
		|				&МоментКонтроля,
		|				Организация В (&МассивОрганизаций)
		|					И (НомерГТД, Номенклатура, Характеристика, Партия, СтранаПроисхождения) В
		|						(ВЫБРАТЬ
		|							ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД КАК НомерГТД,
		|							ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура КАК Номенклатура,
		|							ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика КАК Характеристика,
		|							ДвиженияЗапасыВРазрезеГТДИзменение.Партия КАК Партия,
		|							ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения КАК СтранаПроисхождения
		|						ИЗ
		|							ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение)) КАК РезервыТоваровОрганизацийОстатки
		|		ПО (&ПередачаТоваровМеждуОрганизациями)
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД = РезервыТоваровОрганизацийОстатки.НомерГТД
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура = РезервыТоваровОрганизацийОстатки.Номенклатура
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика = РезервыТоваровОрганизацийОстатки.Характеристика
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Партия = РезервыТоваровОрганизацийОстатки.Партия
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения = РезервыТоваровОрганизацийОстатки.СтранаПроисхождения
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(РезервыТоваровОрганизацийОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.СтранаПроисхождения) КАК СтранаПроисхожденияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.НомерГТД) КАК НомерГТДПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыПринятыеВРазрезеГТДОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыПринятыеВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыПринятые,
		|	ЕСТЬNULL(ЗапасыПринятыеВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыПринятые
		|ИЗ
		|	ДвиженияЗапасыПринятыеВРазрезеГТДИзменение КАК ДвиженияЗапасыПринятыеВРазрезеГТДИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыПринятыеВРазрезеГТД.Остатки(
		|				&МоментКонтроля,
		|				(Организация, Номенклатура, Характеристика, Партия, СтранаПроисхождения, НомерГТД) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.СтранаПроисхождения КАК СтранаПроисхождения,
		|						ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.НомерГТД КАК НомерГТД
		|					ИЗ
		|						ДвиженияЗапасыПринятыеВРазрезеГТДИзменение КАК ДвиженияЗапасыПринятыеВРазрезеГТДИзменение)) КАК ЗапасыПринятыеВРазрезеГТДОстатки
		|		ПО ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.Организация = ЗапасыПринятыеВРазрезеГТДОстатки.Организация
		|			И ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.Номенклатура = ЗапасыПринятыеВРазрезеГТДОстатки.Номенклатура
		|			И ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.Характеристика = ЗапасыПринятыеВРазрезеГТДОстатки.Характеристика
		|			И ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.Партия = ЗапасыПринятыеВРазрезеГТДОстатки.Партия
		|			И ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.СтранаПроисхождения = ЗапасыПринятыеВРазрезеГТДОстатки.СтранаПроисхождения
		|			И ДвиженияЗапасыПринятыеВРазрезеГТДИзменение.НомерГТД = ЗапасыПринятыеВРазрезеГТДОстатки.НомерГТД
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыПринятыеВРазрезеГТДОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияПодарочныеСертификатыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияПодарочныеСертификатыИзменение.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ДвиженияПодарочныеСертификатыИзменение.НомерСертификата КАК НомерСертификата,
		|	ЕСТЬNULL(ДвиженияПодарочныеСертификатыИзменение.СуммаИзменение, 0) + ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) КАК ОстатокПодарочныеСертификаты,
		|	ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) КАК СуммаОстатокПодарочныеСертификаты
		|ИЗ
		|	ДвиженияПодарочныеСертификатыИзменение КАК ДвиженияПодарочныеСертификатыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&МоментКонтроля, ) КАК ПодарочныеСертификатыОстатки
		|		ПО ДвиженияПодарочныеСертификатыИзменение.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
		|			И ДвиженияПодарочныеСертификатыИзменение.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
		|			И (ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияПрослеживаемыеТоварыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияПрослеживаемыеТоварыИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияПрослеживаемыеТоварыИзменение.РНПТ КАК РНПТПредставление,
		|	ДвиженияПрослеживаемыеТоварыИзменение.СтранаПроисхождения КАК СтранаПроисхожденияПредставление,
		|	ДвиженияПрослеживаемыеТоварыИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияПрослеживаемыеТоварыИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияПрослеживаемыеТоварыИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияПрослеживаемыеТоварыИзменение.Комиссионер КАК Комиссионер,
		|	ДвиженияПрослеживаемыеТоварыИзменение.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ДвиженияПрослеживаемыеТоварыИзменение.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПрослеживаемостиПредставление,
		|	ЕСТЬNULL(ДвиженияПрослеживаемыеТоварыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.КоличествоОстаток, 0) КАК ОстатокКоличество,
		|	ЕСТЬNULL(ДвиженияПрослеживаемыеТоварыИзменение.КоличествоПрослеживаемостиИзменение, 0) + ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.КоличествоПрослеживаемостиОстаток, 0) КАК ОстатокКоличествоПрослеживаемости,
		|	ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.КоличествоОстаток, 0) КАК ОстатокКоличествоТекущий,
		|	ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.КоличествоПрослеживаемостиОстаток, 0) КАК ОстатокКоличествоПрослеживаемостиТекущий
		|ИЗ
		|	ДвиженияПрослеживаемыеТоварыИзменение КАК ДвиженияПрослеживаемыеТоварыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПрослеживаемыеТовары.Остатки(&МоментКонтроля, ) КАК ПрослеживаемыеТоварыОстатки
		|		ПО ДвиженияПрослеживаемыеТоварыИзменение.Организация = ПрослеживаемыеТоварыОстатки.Организация
		|			И ДвиженияПрослеживаемыеТоварыИзменение.РНПТ = ПрослеживаемыеТоварыОстатки.РНПТ
		|			И ДвиженияПрослеживаемыеТоварыИзменение.СтранаПроисхождения = ПрослеживаемыеТоварыОстатки.СтранаПроисхождения
		|			И ДвиженияПрослеживаемыеТоварыИзменение.Номенклатура = ПрослеживаемыеТоварыОстатки.Номенклатура
		|			И ДвиженияПрослеживаемыеТоварыИзменение.Характеристика = ПрослеживаемыеТоварыОстатки.Характеристика
		|			И ДвиженияПрослеживаемыеТоварыИзменение.Партия = ПрослеживаемыеТоварыОстатки.Партия
		|			И (ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.КоличествоОстаток, 0) < 0
		|				ИЛИ ЕСТЬNULL(ПрослеживаемыеТоварыОстатки.КоличествоПрослеживаемостиОстаток, 0) < 0)
		|			И ДвиженияПрослеживаемыеТоварыИзменение.Комиссионер = ПрослеживаемыеТоварыОстатки.Комиссионер
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		// Интеркампани
		Запрос.УстановитьПараметр("МассивОрганизаций", 
			РегистрыСведений.НастройкаПередачиТоваровМеждуОрганизациями.ПолучитьСписокОрганизацийДляОстатков(ДополнительныеСвойства.ДляПроведения.Организация));
		Запрос.УстановитьПараметр("ПередачаТоваровМеждуОрганизациями", ДополнительныеСвойства.УчетнаяПолитика.ПередачаТоваровМеждуОрганизациями);
		// Конец Интеркампани
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
			ИЛИ НЕ МассивРезультатов[1].Пустой()
			ИЛИ НЕ МассивРезультатов[2].Пустой()
			ИЛИ НЕ МассивРезультатов[3].Пустой()
			ИЛИ НЕ МассивРезультатов[4].Пустой()
			ИЛИ НЕ МассивРезультатов[5].Пустой()
			ИЛИ НЕ МассивРезультатов[6].Пустой()
			ИЛИ НЕ МассивРезультатов[7].Пустой()
			ИЛИ НЕ МассивРезультатов[8].Пустой()
			ИЛИ НЕ МассивРезультатов[9].Пустой()
			ИЛИ НЕ МассивРезультатов[10].Пустой()
			ИЛИ НЕ МассивРезультатов[11].Пустой()
			ИЛИ НЕ МассивРезультатов[12].Пустой() Тогда
			
			ДокументОбъектРасходнаяНакладная = ДокументСсылкаРасходнаяНакладная.ПолучитьОбъект()
			
		КонецЕсли;
		
		// Неудача при формировании резервов передачи товаров
		// Сообщения выводятся в момент заполнения движений
		Если ДополнительныеСвойства.УчетнаяПолитика.ПередачаТоваровМеждуОрганизациями 
			И ДополнительныеСвойства.Свойство("ЕстьОшибкиПередачиТоваров") 
			И ДополнительныеСвойства.ЕстьОшибкиПередачиТоваров Тогда
			Отказ = Истина;
		КонецЕсли; 
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			КонтрольОстатковУНФ.ЗапасыНаСкладахСписком(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета запасов.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			КонтрольОстатковУНФ.ЗапасыСписком(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток запасов переданных.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			КонтрольОстатковУНФ.ЗапасыПереданные(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток запасов принятых.
		Если НЕ МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			КонтрольОстатковУНФ.ЗапасыПринятые(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по заказу покупателя.
		Если НЕ МассивРезультатов[4].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
			КонтрольОстатковУНФ.ЗаказыПокупателей(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по заказу поставщику.
		Если НЕ МассивРезультатов[5].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[5].Выбрать();
			КонтрольОстатковУНФ.ЗаказыПоставщикам(
				ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, "", Отказ);
		КонецЕсли;
		
		// Отрицательный остаток потребности в запасах.
		Если НЕ МассивРезультатов[6].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[6].Выбрать();
			КонтрольОстатковУНФ.ПотребностьВЗапасах(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по расчетам с покупателями.
		Если НЕ МассивРезультатов[7].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[7].Выбрать();
			КонтрольОстатковУНФ.РасчетыСПокупателями(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по сериям номенклатуры.
		Если НЕ МассивРезультатов[8].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[8].Выбрать();
			КонтрольОстатковУНФ.СерииНоменклатуры(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по остаткам запасов в разрезе номеров ГТД.
		Если Константы.КонтролироватьОстаткиПоНомерамГТД.Получить() Тогда
			
			Если НЕ МассивРезультатов[9].Пустой() Тогда
				
				ВыборкаИзРезультатаЗапроса = МассивРезультатов[9].Выбрать();
				КонтрольОстатковУНФ.ЗапасыВРазрезеГТД(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
				
			КонецЕсли;
			
			Если НЕ МассивРезультатов[10].Пустой() Тогда
				
				ВыборкаИзРезультатаЗапроса = МассивРезультатов[10].Выбрать();
				КонтрольОстатковУНФ.ЗапасыПринятыеВРазрезеГТД(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Отрицательный остаток по подарочным сертификатам
		Если Не МассивРезультатов[11].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[10].Выбрать();
			КонтрольОстатковУНФ.ПодарочныеСертификаты(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета прослеживаемых товаров.
		Если Константы.ВестиУчетПрослеживаемыхТоваров.Получить()
			И НЕ МассивРезультатов[12].Пустой() Тогда
			
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[12].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструПрослеживаемыеТовары(
				ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

#КонецОбласти

#Область ДействияПриОбменеГИСМ

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	НовыйСтатус        = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	ИспользоватьАвтоматическийОбмен = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхГИСМ");
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.КПередаче;
		Если ИспользоватьАвтоматическийОбмен Тогда
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием;
		Иначе
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен;
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РегистрыСведений.СтатусыИнформированияГИСМ.ОбновитьСтатус(
		ДокументСсылка,
		НовыйСтатус,
		ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	НовыйСтатус     = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.Передано;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ПринятоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РегистрыСведений.СтатусыИнформированияГИСМ.ОбновитьСтатус(ДокументСсылка, НовыйСтатус, ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

#КонецОбласти

#Область ГосИС

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки) Тогда
		
		Возврат ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма,ДанныеШтрихкода,ПараметрыСканирования,ВложенныеШтрихкоды);
		
	Иначе
		
		Возврат ОбработатьДанныеШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
КонецФункции

Функция ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ВложенныеШтрихкоды, ПараметрыСканирования) Экспорт
	
	РезультатОбработки = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	// Выполнить обработку и заполнить результат обработки.
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Если ДанныеШтрихкода.ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Алкогольная) <> Неопределено Тогда
		
		Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
			Возврат ОбработатьДанныеШтрихкодаЕдиницыАлкогольнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
		ИначеЕсли ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
			
			Возврат ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования);
			
		КонецЕсли;
		
	ИначеЕсли ДанныеШтрихкода.ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Табак) <> Неопределено Тогда
		
		Возврат ОбработатьДанныеШтрихкодаЕдиницыТабачнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаЕдиницыАлкогольнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
	
	// Заполнение данных формы документа. Заполнение результата обработки.
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	// Заполнение данных формы документа. Заполнение результата обработки.
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаЕдиницыТабачнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования,
	ПараметрыЗаполнения = Неопределено)
	
	Объект = Форма.Объект;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		РезультатОбработки     = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
		РодительскийШтрихкод   = Неопределено;
	Иначе
		РезультатОбработки     = ПараметрыЗаполнения;
		РодительскийШтрихкод   = ПараметрыЗаполнения.РодительскийШтрихкод;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
	
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеШтрихкода);
	
	НайденныеСтрокиТовары = Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
		НайденныеСтрокиТовары[0].Количество = НайденныеСтрокиТовары[0].Количество + ДанныеШтрихкода.КоличествоПачек;
		
		РезультатОбработки.ИзмененныеСтроки.Добавить(НайденныеСтрокиТовары[0]);
		
	Иначе
		
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		НоваяСтрокаТовары.Номенклатура        = ДанныеШтрихкода.Номенклатура;
		НоваяСтрокаТовары.Количество          = ДанныеШтрихкода.КоличествоПачек;
		
		РезультатОбработки.ДобавленныеСтроки.Добавить(НоваяСтрокаТовары);
		
	КонецЕсли;
	
	Если РодительскийШтрихкод <> Неопределено Тогда
		
		ОтборАкцизныхМарок = Новый Структура("АкцизнаяМарка", РодительскийШтрихкод);
		РодительУказан = Объект.АкцизныеМарки.НайтиСтроки(ОтборАкцизныхМарок).Количество();
		
		Если Не РодительУказан Тогда
			НоваяСтрокаУпаковки = Объект.АкцизныеМарки.Добавить();
			НоваяСтрокаУпаковки.АкцизнаяМарка = РодительскийШтрихкод;
		КонецЕсли;
		
	Иначе
		НоваяСтрокаУпаковки = Объект.АкцизныеМарки.Добавить();
		НоваяСтрокаУпаковки.АкцизнаяМарка = ДанныеШтрихкода.ШтрихкодУпаковки;
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

#КонецОбласти

#Область СообщенияГИСМ

Функция СообщениеКПередачеXML(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		Возврат ОтчетОРозничныхПродажахXML(ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		Возврат ИнтеграцияГИСМВызовСервера.ЗапросКвитанцииОФиксацииПоСсылкеXML(ДокументСсылка, Перечисления.ОперацииОбменаГИСМ.ПередачаДанных);
	КонецЕсли;
	
КонецФункции

Функция ОтчетОРозничныхПродажахXML(ДокументСсылка) Экспорт
	
	Если ИнтеграцияГИСМ.ИспользоватьВозможностиВерсии("2.41") Тогда
		Возврат ОтчетОРозничныхПродажахXML2_41(ДокументСсылка);
	Иначе
		ВызватьИсключение НСтр("ru='Формат 2.40 для расходной накладной в розницу не поддерживается'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Версия2_41

Функция ОтчетОРозничныхПродажахXML2_41(ДокументСсылка) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанных)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладная.Дата КАК Дата,
	|	ЕСТЬNULL(ВременнаяТаблица.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	РасходнаяНакладная.Организация КАК Организация,
	|	РасходнаяНакладная.Номер
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО РасходнаяНакладная.Ссылка = ВременнаяТаблица.Ссылка
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.Количество <> 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ Товары.Ссылка.СуммаВключаетНДС
	|						ТОГДА ВЫРАЗИТЬ((Товары.Сумма + Товары.СуммаНДС) / Товары.Количество КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК ЧИСЛО(15, 2))
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|	Серии.Серия.НомерКиЗГИСМ КАК НомерКиЗ,
	|	Товары.СуммаНДС
	|ИЗ
	|	Документ.РасходнаяНакладная.СерииНоменклатуры КАК Серии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.Запасы КАК Товары
	|		ПО (Товары.Ссылка = Серии.Ссылка)
	|			И (Товары.КлючСвязи = Серии.КлючСвязи)
	|ГДЕ
	|	Серии.Ссылка = &Ссылка
	|	И Товары.Номенклатура.ВидМаркировки <> ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.НеМаркируется)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка = Результат[1].Выбрать();
	Товары = Результат[2].Выгрузить();
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа, ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОрганизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Неопределено);
	
	СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа, ДокументСсылка, НомерВерсии);
	
	ИмяТипа   = "query";
	ИмяПакета = "retail_sale";
	
	ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
	
	ОтчетОРозничныхПродажах = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
	ОтчетОРозничныхПродажах.action_id  = ОтчетОРозничныхПродажах.action_id;
	
	Попытка
		ОтчетОРозничныхПродажах.sender_gln = РеквизитыОрганизации.GLN;
	Исключение
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОрганизации.GLN, Шапка);
	КонецПопытки;
	
	ОтчетОРозничныхПродажах.sales = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах, "sales");
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах.sales, "detail");
		
		НоваяСтрока.sign_num   = СтрокаТЧ.НомерКиЗ;
		НоваяСтрока.cost       = СтрокаТЧ.Стоимость;
		Если ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			НоваяСтрока.vat_value = СтрокаТЧ.СуммаНДС;
		КонецЕсли;
		НоваяСтрока.sale_time  = Шапка.Дата;
		
		НоваяСтрока.sale_docs = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(НоваяСтрока, "sale_docs");
		doc = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(НоваяСтрока.sale_docs, "doc");
		doc.doc_type   = 1;
		doc.doc_name   = НСтр("ru = 'Чек'");
		doc.doc_number = НСтр("ru = 'б/н'");
		doc.doc_date   = Шапка.Дата;
		НоваяСтрока.sale_docs.doc.Добавить(doc);
		
		ОтчетОРозничныхПродажах.sales.detail.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ПередачаДанных.version    = ПередачаДанных.version;
	ПередачаДанных[ИмяПакета] = ОтчетОРозничныхПродажах;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
	ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
	СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
	
	СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
	СообщениеXML.Организация  = Шапка.Организация;
	СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных;
	СообщениеXML.Документ     = ДокументСсылка;
	СообщениеXML.Версия       = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#Область Доставка

// Добавляет во временную таблицу все позиции таблицы "Запасы",
// в т.ч. позицию услуги доставки
//
// Параметры:
//  РасходнаяНакладная                  - ДокументСсылка.РасходнаяНакладная, Массив
// 
// Возвращаемое значение:
//   - МенеджерВременныхТаблиц
//
Функция ВТРасходнаяНакладнаяЗапасы(Знач РасходнаяНакладная) Экспорт
	
	Если ТипЗнч(РасходнаяНакладная) <> Тип("Массив") Тогда
		РасходнаяНакладная = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РасходнаяНакладная);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасходнаяНакладная", РасходнаяНакладная);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ РНДоставкаБезЗаказа
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка В(&РасходнаяНакладная)
	|	И РасходнаяНакладнаяЗапасы.Заказ <> РасходнаяНакладнаяЗапасы.Ссылка.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Ссылка КАК Ссылка,
	|	РасходнаяНакладнаяЗапасы.Заказ КАК Заказ,
	|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДС,
	|	РасходнаяНакладнаяЗапасы.Всего КАК Всего
	|ПОМЕСТИТЬ ВТРасходнаяНакладнаяЗапасы
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка В(&РасходнаяНакладная)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходнаяНакладная.Ссылка,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.Заказ В (ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка))
	|				ИЛИ РасходнаяНакладная.ПоложениеЗаказаПокупателя <> ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|					И НЕ РНДоставкаБезЗаказа.Ссылка ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РасходнаяНакладная.Заказ
	|	КОНЕЦ,
	|	РасходнаяНакладная.НоменклатураДоставки,
	|	РасходнаяНакладная.СтавкаНДСДоставки,
	|	РасходнаяНакладная.СуммаНДСДоставки,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.СуммаВключаетНДС
	|			ТОГДА РасходнаяНакладная.СтоимостьДоставки
	|		ИНАЧЕ РасходнаяНакладная.СтоимостьДоставки + РасходнаяНакладная.СуммаНДСДоставки
	|	КОНЕЦ
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РНДоставкаБезЗаказа КАК РНДоставкаБезЗаказа
	|		ПО РасходнаяНакладная.Ссылка = РНДоставкаБезЗаказа.Ссылка
	|ГДЕ
	|	РасходнаяНакладная.Ссылка В(&РасходнаяНакладная)
	|	И РасходнаяНакладная.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РНДоставкаБезЗаказа";
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсПечати

Процедура УчестьОсобенностиФормированияСчетаОплату(ДанныеОбъектовПечати)
	
	Для каждого ОбъектПечати Из ДанныеОбъектовПечати Цикл
		
		Если ОбъектПечати.НомерСчетаНаОплату = Перечисления.НомераСчетаВРасходнойНакладной.ЗаказПокупателя Тогда
			
			Если ОбъектПечати.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
				
				Если ЗначениеЗаполнено(ОбъектПечати.Заказ)
					И ТипЗнч(ОбъектПечати.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					
					ОбъектПечати.Номер = ОбъектПечати.Заказ.Номер;
					
				КонецЕсли;
				
			Иначе
				
				Для каждого СтрокаТабличногоДокумента Из ОбъектПечати.ТаблицаЗапасы Цикл
					
					Если ЗначениеЗаполнено(СтрокаТабличногоДокумента.Заказ)
						И ТипЗнч(СтрокаТабличногоДокумента.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
						
						ОбъектПечати.Номер = СтрокаТабличногоДокумента.Заказ.Номер;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ОбъектПечати.НомерСчетаНаОплату = Перечисления.НомераСчетаВРасходнойНакладной.СчетНаОплату
			И ТипЗнч(ОбъектПечати.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату") Тогда
			
			ОбъектПечати.Номер = ОбъектПечати.ДокументОснование.Номер;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов, ИспользоватьФаксимиле, ИспользоватьНаборы)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ИспользоватьФаксимиле", ИспользоватьФаксимиле);
	
	Запрос.Текст = 
	"
	// :::Шапка
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходнаяНакладная.Ссылка КАК Ссылка
	|	,""Расходная накладная"" КАК ПредставлениеРегистратора
	|	,РасходнаяНакладная.Дата КАК ДатаДокумента
	|	,РасходнаяНакладная.Номер КАК Номер
	|	,РасходнаяНакладная.НомерСчетаНаОплату КАК НомерСчетаНаОплату
	|	,РасходнаяНакладная.ПоложениеЗаказаПокупателя КАК ПоложениеЗаказаПокупателя
	|	,РасходнаяНакладная.ПоложениеСклада КАК ПоложениеСклада
	|	,РасходнаяНакладная.Организация КАК Организация
	|	,РасходнаяНакладная.Организация.ЮридическоеФизическоеЛицо КАК ОрганизацияЮридическоеФизическоеЛицо
	|	,РасходнаяНакладная.Организация.Префикс КАК Префикс
	|	,РасходнаяНакладная.Организация.КодПоОКПО КАК ОрганизацияПоОКПО
	|	,РасходнаяНакладная.Организация.ФайлЛоготип КАК ФайлЛоготип
	|	,РасходнаяНакладная.Организация.ФайлФаксимильнаяПечать КАК ФаксимилеПечати
	|	,Неопределено КАК ВидДеятельностиПоОКДП
	|	,Выбор КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ""(Продажа покупателю)""
	|		КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ТОГДА ""(Передача на комиссию)""
	|		КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|			ТОГДА ""(Передача в переработку)""
	|		КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение)
	|			ТОГДА ""(Передача контрагенту на ответственное хранение)""
	|		КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ТОГДА ""(Возврат поставщику)""
	|		КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|			ТОГДА ""(Возврат комитенту)""
	|		КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|			ТОГДА ""(Возврат контрагенту из переработки)""
	|		КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения)
	|			ТОГДА ""(Возврат контрагенту с ответственного хранения)"" КОНЕЦ КАК ВидОперации
	|	,РасходнаяНакладная.СтруктурнаяЕдиница КАК ПредставлениеСклада
	|	,РасходнаяНакладная.Подразделение КАК ПредставлениеПодразделения
	|	,Неопределено КАК СрокХранения
	|	,Выбор КОГДА &ИспользоватьФаксимиле
	|		ТОГДА Значение(Перечисление.ДаНет.Да)
	|		ИНАЧЕ Значение(Перечисление.ДаНет.Нет) КОНЕЦ КАК ИспользоватьФаксимиле
	|	,РасходнаяНакладная.Ячейка КАК ПредставлениеЯчейки
	|	,РасходнаяНакладная.ПодписьРуководителя.Должность КАК ДолжностьРуководителя
	|	,РасходнаяНакладная.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя
	|	,РасходнаяНакладная.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиВыполнилРаботыУслуги
	|	,РасходнаяНакладная.ПодписьРуководителя.Факсимиле КАК ФаксимилеРуководителя
	|	,РасходнаяНакладная.ПодписьГлавногоБухгалтера.Должность КАК ДолжностьГлавногоБухгалтера
	|	,РасходнаяНакладная.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК РасшифровкаПодписиГлавногоБухгалтера
	|	,РасходнаяНакладная.ПодписьГлавногоБухгалтера.Факсимиле КАК ФаксимилеГлавногоБухгалтера
	|	,РасходнаяНакладная.ПодписьКладовщика.Должность КАК ДолжностьКладовщика
	|	,РасходнаяНакладная.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщика
	|	,РасходнаяНакладная.ПодписьКладовщика.Факсимиле КАК ФаксимилеКладовщика
	|	,РасходнаяНакладная.БанковскийСчет КАК БанковскийСчет
	|	,РасходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС
	|	,РасходнаяНакладная.ВалютаДокумента КАК ВалютаДокумента
	|	,РасходнаяНакладная.Курс КАК Курс
	|	,РасходнаяНакладная.Кратность КАК Кратность
	|	,РасходнаяНакладная.Контрагент КАК Контрагент
	|	,РасходнаяНакладная.Контрагент.КодПоОКПО КАК КонтрагентПоОКПО
	|	,РасходнаяНакладная.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиКонтрагента
	|	,РасходнаяНакладная.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиПринялРаботыУслуги
	|	,РасходнаяНакладная.Договор
	|	,РасходнаяНакладная.Договор.НомерДоговора КАК ДоговорНомер
	|	,РасходнаяНакладная.Договор.ДатаДоговора КАК ДоговорДата
	|	,РасходнаяНакладная.АдресДоставки
	|	,РасходнаяНакладная.УсловияСчетаЗаказа КАК ДополнительныеУсловия
	|	,РасходнаяНакладная.ДокументОснование
	|	,РасходнаяНакладная.Ответственный
	|	,РасходнаяНакладная.Ответственный.Физлицо КАК ФизическоеЛицоОтветственного
	|	,Неопределено КАК ВидОперацииМХ3
	|	,РасходнаяНакладная.Автор
	|	,РасходнаяНакладная.ДисконтнаяКарта
	|	,РасходнаяНакладная.ПроцентСкидкиПоДисконтнойКарте
	|	,РасходнаяНакладная.Комментарий КАК Комментарий
	|	,РасходнаяНакладная.ОснованиеПечати КАК ОснованиеПечати
	|	,РасходнаяНакладная.ОснованиеПечатиСсылка КАК ОснованиеПечатиСсылка
	|	,РасходнаяНакладная.Заказ
	|	,ЛОЖЬ КАК ОжидаетсяВыборВариантаКП
	|	,РасходнаяНакладная.Вес
	|	,РасходнаяНакладная.Объем
	|	,РасходнаяНакладная.НоменклатураДоставки
	|	,Выбор КОГДА (ВЫРАЗИТЬ(РасходнаяНакладная.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|		ТОГДА РасходнаяНакладная.НоменклатураДоставки.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(РасходнаяНакладная.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000)) КОНЕЦ КАК ПредставлениеНоменклатурыДоставки
	|	,РасходнаяНакладная.НоменклатураДоставки.Артикул КАК АртикулДоставки
	|	,РасходнаяНакладная.НоменклатураДоставки.Код КАК КодДоставки
	|	,РасходнаяНакладная.НоменклатураДоставки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДоставки
	|	,РасходнаяНакладная.СтоимостьДоставки
	|	,РасходнаяНакладная.СтавкаНДСДоставки
	|	,РасходнаяНакладная.СуммаНДСДоставки
	|
	// :::Табличная часть "Запасы"
	|	,РасходнаяНакладная.Запасы.(
	|		НомерСтроки КАК НомерСтроки
	|		,Содержание
	|		,Выбор КОГДА(ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА РасходнаяНакладная.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КОНЕЦ КАК ПредставлениеНоменклатуры
	|		,Номенклатура.Код КАК Код
	|		,Номенклатура.Артикул КАК Артикул
	|		,Номенклатура.Штрихкод КАК Штрихкод
	|		,Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|		,СтруктурнаяЕдиница КАК Склад
	|		,Ячейка КАК Ячейка
	|		,Характеристика
	|		,Партия
	|		,ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|		,Выбор КОГДА ЕдиницаИзмерения Ссылка Справочник.ЕдиницыИзмерения
	|			И ПечатьПользовательскихЕдиницИзмерения.Значение = Значение(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|			И ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> Значение(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|				ТОГДА ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Наименование
	|				ИНАЧЕ Номенклатура.ЕдиницаИзмерения.Наименование КОНЕЦ КАК ЕдиницаИзмеренияПоОКЕИ_Наименование
	|		,Выбор КОГДА ЕдиницаИзмерения Ссылка Справочник.ЕдиницыИзмерения
	|			И ПечатьПользовательскихЕдиницИзмерения.Значение = Значение(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|			И ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> Значение(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|				ТОГДА ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Код
	|				ИНАЧЕ Номенклатура.ЕдиницаИзмерения.Код КОНЕЦ КАК ЕдиницаИзмеренияПоОКЕИ_Код
	|		,Цена КАК Цена
	|		,Сумма КАК Сумма
	|		,СтавкаНДС КАК СтавкаНДС
	|		,СуммаНДС КАК СуммаНДС
	|		,Всего КАК Всего
	|		,Количество КАК Количество
	|		,Вес КАК Вес
	|		,Объем КАК Объем
	|		,Выбор КОГДА ЕдиницаИзмерения Ссылка Справочник.ЕдиницыИзмерения 
	|			И ПечатьПользовательскихЕдиницИзмерения.Значение <> Значение(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|			ТОГДА Количество * ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ Количество КОНЕЦ КАК КоличествоПоКоэффициенту
	|		,ПроцентСкидкиНаценки
	|		,Выбор КОГДА РасходнаяНакладная.Запасы.ПроцентСкидкиНаценки <> 0
	|				ИЛИ РасходнаяНакладная.Запасы.СуммаАвтоматическойСкидки <> 0
	|			ТОГДА 1
	|			ИНАЧЕ 0 КОНЕЦ КАК ЕстьСкидка
	|		,СуммаАвтоматическойСкидки
	|		,Заказ
	|		,КлючСвязи
	|		,Ложь КАК ЭтоРазделитель
	|		,Ложь КАК ЭтоНабор
	|		,Выбор КОГДА НоменклатураНабора <> Значение(Справочник.Номенклатура.ПустаяСсылка) 
	|			И НоменклатураНабора.ВариантПечатиНабора = Значение(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора
	|		,НоменклатураНабора КАК НоменклатураНабора
	|		,ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаЗапасы
	|
	// :::Табличная часть "Добавленные наборы"
	|	,РасходнаяНакладная.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора
	|		,ХарактеристикаНабора КАК ХарактеристикаНабора
	|		,Количество КАК Количество
	|		,ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора
	|		,НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора
	|		,НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора
	|		,НоменклатураНабора.Артикул КАК АртикулНабора
	|		,НоменклатураНабора.Код КАК КодНабора
	|		,НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора
	|		,НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора
	|		,ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы
	|
	// :::Табличная часть "СерииНоменклатуры"
	|	,РасходнаяНакладная.СерииНоменклатуры.(
	|		Серия
	|		,КлючСвязи
	|	) КАК ТаблицаСерииНоменклатуры
	|ИЗ Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|	,Константа.ПечатьПользовательскихЕдиницИзмерения КАК ПечатьПользовательскихЕдиницИзмерения
	|ГДЕ РасходнаяНакладная.Ссылка В(&МассивОбъектов)
	|УПОРЯДОЧИТЬ ПО Ссылка, НомерСтроки";
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	ДоставкаСервер.ДобавитьСтрокуДоставкиУниверсальныеДанные(ДанныеДокументов);
	
	ИспользуемыеТЧ = Новый Соответствие;
	ИспользуемыеТЧ.Вставить("ТаблицаЗапасы", Перечисления.ТабличныеЧастиДокументов.Запасы);
	ПечатьДокументовУНФ.ДобавитьСуммовыеПоляЭквивалентовВНациональнойВалюте(ДанныеДокументов, ИспользуемыеТЧ);
	
	Если ИспользоватьНаборы Тогда
		НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаЗапасы");
	КонецЕсли; 
	
	Возврат ДанныеДокументов;
	
КонецФункции

Процедура АдаптироватьДанныеУниверсальногоЗапросаДляМХ1(ДанныеОбъектовПечати)
	
	// 1. Организация (и ее адрес) должна быть поклажедателем
	// 2. Контрагент (и его адрес) выступает в роли хранителя клади
	// 3. Вид операции очистить
	// 4. Структурных подразделений контрагента у нас нет
	// 5. Склад материалов контрагента у нас не храниться
	// 6. Ответственные лица
	
	// (1) и (2)
	ДанныеОбъектовПечати.Колонки.Организация.Имя = "Организация1";
	ДанныеОбъектовПечати.Колонки.ОрганизацияПоОКПО.Имя = "ОрганизацияПоОКПО1";
	
	ДанныеОбъектовПечати.Колонки.Контрагент.Имя = "Организация";
	ДанныеОбъектовПечати.Колонки.КонтрагентПоОКПО.Имя = "ОрганизацияПоОКПО";
	
	ДанныеОбъектовПечати.Колонки.Организация1.Имя = "Контрагент";
	ДанныеОбъектовПечати.Колонки.ОрганизацияПоОКПО1.Имя = "КонтрагентПоОКПО";
	
	// (3)
	ДанныеОбъектовПечати.Колонки.Удалить("ВидОперации");
	ДанныеОбъектовПечати.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1)));
	
	// (4)
	ДанныеОбъектовПечати.Колонки.Удалить("ПредставлениеПодразделения");
	ДанныеОбъектовПечати.Колонки.Добавить("ПредставлениеПодразделения", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1)));
	
	// (5)
	ДанныеОбъектовПечати.Колонки.Удалить("ПредставлениеСклада");
	ДанныеОбъектовПечати.Колонки.Добавить("ПредставлениеСклада", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1)));
	
	// (6)
	ДанныеОбъектовПечати.Колонки.Удалить("ДолжностьРуководителя");
	ДанныеОбъектовПечати.Колонки.Добавить("ДолжностьРуководителя", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1)));
	
	ДанныеОбъектовПечати.Колонки.Удалить("ДолжностьКладовщика");
	ДанныеОбъектовПечати.Колонки.Добавить("ДолжностьКладовщика", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1)));
	
	ДанныеОбъектовПечати.Колонки.РасшифровкаПодписиКладовщика.Имя = "РасшифровкаПодписиКладовщика1";
	ДанныеОбъектовПечати.Колонки.РасшифровкаПодписиКонтрагента.Имя = "РасшифровкаПодписиКладовщика";
	ДанныеОбъектовПечати.Колонки.РасшифровкаПодписиРуководителя.Имя = "РасшифровкаПодписиКонтрагента";
	ДанныеОбъектовПечати.Колонки.Удалить("РасшифровкаПодписиКладовщика1");
	ДанныеОбъектовПечати.Колонки.Добавить("РасшифровкаПодписиРуководителя", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1)));
	
КонецПроцедуры

Функция ДанныеДокументовАктОбОказанииУслуг(МассивОбъектов, ИспользоватьФаксимиле)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ИспользоватьФаксимиле", ИспользоватьФаксимиле);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходнаяНакладная.Ссылка КАК Ссылка
	|	,РасходнаяНакладная.Номер КАК Номер
	|	,РасходнаяНакладная.Дата КАК ДатаДокумента
	|	,РасходнаяНакладная.Организация КАК Организация
	|	,РасходнаяНакладная.Организация.Префикс КАК Префикс
	|	,РасходнаяНакладная.Организация.ФайлЛоготип КАК ФайлЛоготип
	|	,РасходнаяНакладная.Организация.ФайлФаксимильнаяПечать КАК ФаксимилеПечати
	|	,РасходнаяНакладная.Контрагент КАК Контрагент
	|	,РасходнаяНакладная.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиВыполнилРаботыУслуги
	|	,РасходнаяНакладная.ПодписьРуководителя.Факсимиле КАК ФаксимилеРуководителя
	|	,РасходнаяНакладная.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиПринялРаботыУслуги
	|	,РасходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС
	|	,РасходнаяНакладная.ВалютаДокумента КАК ВалютаДокумента
	|	,Выбор КОГДА &ИспользоватьФаксимиле = ИСТИНА 
	|		ТОГДА Значение(Перечисление.ДаНет.Да)
	|		ИНАЧЕ Значение(Перечисление.ДаНет.Нет) КОНЕЦ КАК ИспользоватьФаксимиле
	|	,РасходнаяНакладная.ОснованиеПечати
	|	,РасходнаяНакладная.ОснованиеПечатиСсылка
	|	,РасходнаяНакладная.Комментарий
	|	,РасходнаяНакладная.НоменклатураДоставки
	|	,ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(РасходнаяНакладная.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА РасходнаяНакладная.НоменклатураДоставки.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(РасходнаяНакладная.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ПредставлениеНоменклатурыДоставки
	|	,РасходнаяНакладная.НоменклатураДоставки.Артикул КАК АртикулДоставки
	|	,РасходнаяНакладная.НоменклатураДоставки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДоставки
	|	,РасходнаяНакладная.СтоимостьДоставки
	|	,РасходнаяНакладная.СтавкаНДСДоставки
	|	,РасходнаяНакладная.СуммаНДСДоставки
	|	,РасходнаяНакладная.Запасы.(
	|		НомерСтроки КАК НомерСтроки
	|		,Содержание
	|		,Выбор КОГДА(ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА РасходнаяНакладная.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КОНЕЦ КАК ПредставлениеНоменклатуры
	|		,Номенклатура.Артикул КАК Артикул
	|		,Номенклатура.Штрихкод КАК Штрихкод
	|		,Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|		,ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения
	|		,Количество КАК Количество
	|		,Цена КАК Цена
	|		,Сумма КАК Сумма
	|		,СтавкаНДС КАК СтавкаНДС
	|		,СуммаНДС КАК СуммаНДС
	|		,Всего КАК Всего
	|		,Характеристика
	|		,ПроцентСкидкиНаценки
	|		,Выбор КОГДА РасходнаяНакладная.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ РасходнаяНакладная.Запасы.СуммаАвтоматическойСкидки <> 0
	|			ТОГДА 1
	|			ИНАЧЕ 0 КОНЕЦ КАК ЕстьСкидка
	|		,СуммаАвтоматическойСкидки
	|		,ЛОЖЬ КАК ЭтоНабор
	|		,ВЫБОР
	|			КОГДА НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора
	|		,НоменклатураНабора КАК НоменклатураНабора
	|		,ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаРаботыУслуги
	|
	// :::Табличная часть "Добавленные наборы"
	|	,РасходнаяНакладная.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора
	|		,ХарактеристикаНабора КАК ХарактеристикаНабора
	|		,Количество КАК Количество
	|		,ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора
	|		,НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора
	|		,НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора
	|		,НоменклатураНабора.Артикул КАК АртикулНабора
	|		,НоменклатураНабора.Код КАК КодНабора
	|		,НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора
	|		,НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора
	|		,ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы
	|
	|ИЗ Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ РасходнаяНакладная.Ссылка В(&МассивОбъектов)
	|УПОРЯДОЧИТЬ ПО Ссылка, НомерСтроки";
	
	ДеревоУслуг = Запрос.Выполнить().Выгрузить();
	
	ДоставкаСервер.ДобавитьСтрокуДоставкиУниверсальныеДанные(ДеревоУслуг, "ТаблицаРаботыУслуги");
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДеревоУслуг, "ТаблицаРаботыУслуги");
	
	Возврат ДеревоУслуг;
	
КонецФункции

Функция ДанныеДокументовРегУчет(МассивОбъектов, ИспользоватьФаксимиле, ПечатнаяФормаТолькоВРублях = Истина, Ошибки = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	Запрос.УстановитьПараметр("ПечатнаяФормаТолькоВРублях", ПечатнаяФормаТолькоВРублях);
	Запрос.УстановитьПараметр("ШтукаНаименование", Справочники.КлассификаторЕдиницИзмерения.шт.Наименование);
	Запрос.УстановитьПараметр("ШтукаКод", Справочники.КлассификаторЕдиницИзмерения.шт.Код);
	Запрос.УстановитьПараметр("ИспользоватьФаксимиле", ИспользоватьФаксимиле);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходнаяНакладная.Ссылка КАК Ссылка,
	|	РасходнаяНакладная.Дата КАК ДатаДокумента,
	|	ВЫРАЗИТЬ(РасходнаяНакладная.Номер КАК СТРОКА(12)) КАК Номер,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправления,
	|	НЕОПРЕДЕЛЕНО КАК ФаксимилеПустая,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Продажа) КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладная.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ РасходнаяНакладная.Организация
	|	КОНЕЦ КАК Организация,
	|	РасходнаяНакладная.Организация.Префикс КАК Префикс,
	|	РасходнаяНакладная.Организация.ФайлЛоготип КАК Логотип,
	|	РасходнаяНакладная.Организация.ФайлФаксимильнаяПечать КАК ФаксимилеПечати,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладная.Организация.ЦифровойИндексОбособленногоПодразделения
	|		КОГДА РасходнаяНакладная.Подразделение.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И РасходнаяНакладная.Подразделение.ГоловнаяОрганизация = РасходнаяНакладная.Организация
	|			ТОГДА РасходнаяНакладная.Подразделение.ЦифровойИндексОбособленногоПодразделения
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЦифровойИндексОбособленногоПодразделения,
	|	ВЫБОР
	|		КОГДА &ИспользоватьФаксимиле = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДаНет.Да)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ДаНет.Нет)
	|	КОНЕЦ КАК ИспользоватьФаксимиле,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладная.Организация
	|		КОГДА РасходнаяНакладная.Подразделение.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И РасходнаяНакладная.Подразделение.ГоловнаяОрганизация = РасходнаяНакладная.Организация
	|			ТОГДА РасходнаяНакладная.Подразделение
	|		ИНАЧЕ РасходнаяНакладная.Организация
	|	КОНЕЦ КАК ОбособленноеПодразделениеПоставщика,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СтатусУПД,
	|	ЛОЖЬ КАК ЭтоСводныйСчетФактура,
	|	ЛОЖЬ КАК ЭтоКорректировка,
	|	РасходнаяНакладная.БанковскийСчет КАК БанковскийСчет,
	|	ПРЕДСТАВЛЕНИЕ(РасходнаяНакладная.Подразделение) КАК ПредставлениеПодразделения,
	|	ПРЕДСТАВЛЕНИЕ(РасходнаяНакладная.СтруктурнаяЕдиница) КАК ПредставлениеСкладаСписания,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладная.Грузоотправитель
	|		КОГДА РасходнаяНакладная.Организация.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладная.Организация
	|		КОГДА РасходнаяНакладная.Подразделение.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И РасходнаяНакладная.Подразделение.ГоловнаяОрганизация = РасходнаяНакладная.Организация
	|			ТОГДА РасходнаяНакладная.Подразделение
	|		ИНАЧЕ РасходнаяНакладная.Организация
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.Контрагент.ГоловнойКонтрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И РасходнаяНакладная.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА РасходнаяНакладная.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ РасходнаяНакладная.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.Контрагент.ГоловнойКонтрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И РасходнаяНакладная.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА РасходнаяНакладная.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ РасходнаяНакладная.Контрагент
	|	КОНЕЦ КАК Покупатель,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.Грузополучатель.ГоловнойКонтрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И РасходнаяНакладная.Грузополучатель.ГоловнойКонтрагент = РасходнаяНакладная.Контрагент
	|				И РасходнаяНакладная.Грузополучатель.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА РасходнаяНакладная.Грузополучатель
	|		ИНАЧЕ РасходнаяНакладная.Контрагент
	|	КОНЕЦ КАК ОбособленноеПодразделениеПокупателя,
	|	РасходнаяНакладная.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладная.Грузополучатель
	|		ИНАЧЕ РасходнаяНакладная.Контрагент
	|	КОНЕЦ КАК Грузополучатель,
	|	РасходнаяНакладная.АдресДоставки КАК АдресДоставки,
	|	РасходнаяНакладная.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиКонтрагента,
	|	РасходнаяНакладная.ДоверенностьНомер КАК ДоверенностьНомер,
	|	РасходнаяНакладная.ДоверенностьДата КАК ДоверенностьДата,
	|	РасходнаяНакладная.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	РасходнаяНакладная.ДоверенностьЛицо КАК ДоверенностьЛицо,
	|	РасходнаяНакладная.Договор.Представление КАК Основание,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях = ИСТИНА
	|			ТОГДА НациональнаяВалюта.Значение
	|		ИНАЧЕ РасходнаяНакладная.ВалютаДокумента
	|	КОНЕЦ КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях = ИСТИНА
	|			ТОГДА НациональнаяВалюта.Значение.НаименованиеПолное
	|		ИНАЧЕ РасходнаяНакладная.ВалютаДокумента.НаименованиеПолное
	|	КОНЕЦ КАК ВалютаНаименование,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях = ИСТИНА
	|			ТОГДА НациональнаяВалюта.Значение.Код
	|		ИНАЧЕ РасходнаяНакладная.ВалютаДокумента.Код
	|	КОНЕЦ КАК ВалютаКод,
	|	РасходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РасходнаяНакладная.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	РасходнаяНакладная.Курс КАК Курс,
	|	РасходнаяНакладная.Кратность КАК Кратность,
	|	РасходнаяНакладная.ОснованиеПечати КАК ПредставлениеОснования,
	|	РасходнаяНакладная.ОснованиеПечатиСсылка КАК ОснованиеПечатиСсылка,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.ОснованиеПечатиСсылка ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА РасходнаяНакладная.ОснованиеПечатиСсылка.НомерДоговора
	|		ИНАЧЕ РасходнаяНакладная.ОснованиеПечатиСсылка.Номер
	|	КОНЕЦ КАК ОснованиеНомер,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.ОснованиеПечатиСсылка ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА РасходнаяНакладная.ОснованиеПечатиСсылка.ДатаДоговора
	|		ИНАЧЕ РасходнаяНакладная.ОснованиеПечатиСсылка.Дата
	|	КОНЕЦ КАК ОснованиеДата,
	|	НЕОПРЕДЕЛЕНО КАК ТранспортнаяНакладнаяНомер,
	|	НЕОПРЕДЕЛЕНО КАК ТранспортнаяНакладнаяДата,
	|	РасходнаяНакладная.ПодписьРуководителя.Должность КАК ДолжностьРуководителя,
	|	РасходнаяНакладная.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя,
	|	РасходнаяНакладная.ПодписьРуководителя.Факсимиле КАК ФаксимилеРуководителя,
	|	РасходнаяНакладная.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК РасшифровкаПодписиГлавногоБухгалтера,
	|	РасходнаяНакладная.ПодписьГлавногоБухгалтера.Факсимиле КАК ФаксимилеГлавногоБухгалтера,
	|	РасходнаяНакладная.ПодписьКладовщика.Должность КАК ДолжностьКладовщика,
	|	РасходнаяНакладная.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщика,
	|	РасходнаяНакладная.ПодписьКладовщика.Факсимиле КАК ФаксимилеКладовщика,
	|	РасходнаяНакладная.Вес КАК Вес,
	|	РасходнаяНакладная.Объем КАК Объем,
	|	РасходнаяНакладная.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Содержание КАК Содержание,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА РасходнаяНакладная.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ПредставлениеНоменклатуры,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		Номенклатура.Код КАК ЗапасКод,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА РасходнаяНакладная.Запасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|					И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|					И РасходнаяНакладная.Запасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|				ТОГДА РасходнаяНакладная.Запасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Наименование
	|			ИНАЧЕ РасходнаяНакладная.Запасы.Номенклатура.ЕдиницаИзмерения.Наименование
	|		КОНЕЦ КАК ЕдиницаИзмеренияПоОКЕИ_Наименование,
	|		ВЫБОР
	|			КОГДА РасходнаяНакладная.Запасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|					И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|					И РасходнаяНакладная.Запасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|				ТОГДА РасходнаяНакладная.Запасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Код
	|			ИНАЧЕ РасходнаяНакладная.Запасы.Номенклатура.ЕдиницаИзмерения.Код
	|		КОНЕЦ КАК ЕдиницаИзмеренияПоОКЕИ_Код,
	|		ВЫБОР
	|			КОГДА РасходнаяНакладная.Запасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|					И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|					И РасходнаяНакладная.Запасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|				ТОГДА РасходнаяНакладная.Запасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору
	|			ИНАЧЕ РасходнаяНакладная.Запасы.Номенклатура.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмерения КАК ВидУпаковки,
	|		ВЫБОР
	|			КОГДА РасходнаяНакладная.Запасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|					И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|					И РасходнаяНакладная.Запасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|				ТОГДА 1
	|			КОГДА РасходнаяНакладная.Запасы.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
	|				ТОГДА 1
	|			ИНАЧЕ РасходнаяНакладная.Запасы.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ КАК КоличествоВОдномМесте,
	|		Количество КАК КоличествоМест,
	|		ВЫБОР
	|			КОГДА РасходнаяНакладная.Запасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|					И ПечатьПользовательскихЕдиницИзмерения.Значение <> ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				ТОГДА РасходнаяНакладная.Запасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК КоэффициентЕдиницыИзмерения,
	|		Количество КАК Количество,
	|		СтавкаНДС КАК СтавкаНДС,
	|		Вес КАК МассаБрутто,
	|		ВЫРАЗИТЬ((РасходнаяНакладная.Запасы.СуммаАвтоматическойСкидки + РасходнаяНакладная.Запасы.СуммаСкидкиНаценки) * РасходнаяНакладная.Курс / РасходнаяНакладная.Кратность КАК ЧИСЛО(15, 2)) КАК СуммаСкидкиПоСтроке,
	|		ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.Цена * РасходнаяНакладная.Курс / РасходнаяНакладная.Кратность КАК ЧИСЛО(15, 2)) КАК Цена,
	|		ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.Сумма * РасходнаяНакладная.Курс / РасходнаяНакладная.Кратность КАК ЧИСЛО(15, 2)) КАК Сумма,
	|		ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.СуммаНДС * РасходнаяНакладная.Курс / РасходнаяНакладная.Кратность КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|		ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.Всего * РасходнаяНакладная.Курс / РасходнаяНакладная.Кратность КАК ЧИСЛО(15, 2)) КАК Всего
	|	) КАК ТаблицаЗапасы,
	|	ЛОЖЬ КАК ЕстьПрослеживаемыеТовары,
	|	РасходнаяНакладная.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(РасходнаяНакладная.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА РасходнаяНакладная.ДобавленныеНаборы.НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(РасходнаяНакладная.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ВЫБОР
	|			КОГДА РасходнаяНакладная.ДобавленныеНаборы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.ТолькоНабор)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы,
	|	РасходнаяНакладная.СведенияПрослеживаемости.(
	|		НомерСтроки КАК НомерСтроки,
	|		РНПТ КАК РНПТ,
	|		Количество КАК Количество,
	|		КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|		ИдентификаторСтроки КАК ИдентификаторСтроки
	|	) КАК СведенияПрослеживаемости,
	|	РасходнаяНакладная.НоменклатураДоставки КАК НоменклатураДоставки,
	|	ПРЕДСТАВЛЕНИЕ(РасходнаяНакладная.НоменклатураДоставки) КАК ПредставлениеНоменклатурыДоставки,
	|	РасходнаяНакладная.НоменклатураДоставки.Код КАК КодНоменклатурыДоставки,
	|	РасходнаяНакладная.НоменклатураДоставки.Артикул КАК АртикулНоменклатурыДоставки,
	|	РасходнаяНакладная.СтоимостьДоставки КАК СтоимостьДоставки,
	|	РасходнаяНакладная.СтавкаНДСДоставки КАК СтавкаНДСДоставки,
	|	РасходнаяНакладная.СуммаНДСДоставки КАК СуммаНДСДоставки
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная,
	|	Константа.НациональнаяВалюта КАК НациональнаяВалюта,
	|	Константа.ПечатьПользовательскихЕдиницИзмерения КАК ПечатьПользовательскихЕдиницИзмерения
	|ГДЕ
	|	РасходнаяНакладная.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходнаяНакладная.Запасы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Ссылка КАК Ссылка,
	|	МАКСИМУМ(РасходнаяНакладнаяЗапасы.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ МаксНомерСтрокиЗапасы
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходнаяНакладнаяЗапасы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Ссылка.Дата КАК ДатаОтгрузочногоДокумента,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Номер КАК НомерОтгрузочногоДокумента,
	|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ПредставлениеНоменклатуры,
	|	РасходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	РасходнаяНакладнаяЗапасы.Номенклатура.Код КАК ЗапасКод,
	|	РасходнаяНакладнаяЗапасы.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				И РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Наименование
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияПоОКЕИ_Наименование,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				И РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Код
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияПоОКЕИ_Код,
	|	РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				И РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ВидУпаковки,
	|	РасходнаяНакладнаяЗапасы.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение <> ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|			ТОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоэффициентЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				И РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
	|			ТОГДА 1
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК КоличествоВОдномМесте,
	|	РасходнаяНакладнаяЗапасы.Количество КАК КоличествоМест,
	|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	РасходнаяНакладнаяЗапасы.Вес КАК Вес,
	|	РасходнаяНакладнаяЗапасы.СуммаАвтоматическойСкидки + РасходнаяНакладнаяЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиПоСтроке,
	|	РасходнаяНакладнаяЗапасы.Цена КАК Цена,
	|	РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтроки,
	|	РасходнаяНакладнаяЗапасы.Сумма КАК Сумма,
	|	РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДС,
	|	РасходнаяНакладнаяЗапасы.Всего КАК Всего,
	|	РасходнаяНакладнаяЗапасы.Ссылка КАК Ссылка,
	|	РасходнаяНакладнаяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	РасходнаяНакладнаяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЛОЖЬ КАК ЭтоНабор,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И РасходнаяНакладнаяЗапасы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|	РасходнаяНакладнаяЗапасы.СтранаПроисхождения КАК СтранаСсылка,
	|	ПРЕДСТАВЛЕНИЕ(РасходнаяНакладнаяЗапасы.СтранаПроисхождения) КАК СтранаПредставление,
	|	РасходнаяНакладнаяЗапасы.СтранаПроисхождения.Код КАК СтранаКод,
	|	РасходнаяНакладнаяЗапасы.НомерГТД.РегистрационныйНомер КАК ПредставлениеГТД,
	|	РасходнаяНакладнаяЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РасходнаяНакладнаяЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	РасходнаяНакладнаяЗапасы.КодТНВЭД КАК КодТНВЭД,
	|	РасходнаяНакладнаяЗапасы.Номенклатура.ШтрихКод КАК ШтрихКод
	|ПОМЕСТИТЬ ВременнаяТаблица_РасходнаяНакладнаяЗапасы
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы,
	|	Константа.ПечатьПользовательскихЕдиницИзмерения КАК ПечатьПользовательскихЕдиницИзмерения
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Дата,
	|	РасходнаяНакладнаяЗапасы.Номер,
	|	РасходнаяНакладнаяЗапасы.НоменклатураДоставки,
	|	ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000)),
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА РасходнаяНакладнаяЗапасы.НоменклатураДоставки.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ,
	|	РасходнаяНакладнаяЗапасы.НоменклатураДоставки.ТипНоменклатуры,
	|	РасходнаяНакладнаяЗапасы.НоменклатураДоставки.Код,
	|	РасходнаяНакладнаяЗапасы.НоменклатураДоставки.Артикул,
	|	&ШтукаНаименование,
	|	&ШтукаКод,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.шт),
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.шт),
	|	1,
	|	1,
	|	1,
	|	1,
	|	РасходнаяНакладнаяЗапасы.СтавкаНДСДоставки,
	|	0,
	|	0,
	|	РасходнаяНакладнаяЗапасы.СтоимостьДоставки,
	|	МаксНомерСтрокиЗапасы.НомерСтроки + 1,
	|	РасходнаяНакладнаяЗапасы.СтоимостьДоставки,
	|	РасходнаяНакладнаяЗапасы.СуммаНДСДоставки,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.СуммаВключаетНДС
	|			ТОГДА РасходнаяНакладнаяЗапасы.СтоимостьДоставки
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.СтоимостьДоставки + РасходнаяНакладнаяЗапасы.СуммаНДСДоставки
	|	КОНЕЦ,
	|	РасходнаяНакладнаяЗапасы.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	"""",
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	РасходнаяНакладнаяЗапасы.НоменклатураДоставки.ШтрихКод
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладнаяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксНомерСтрокиЗапасы КАК МаксНомерСтрокиЗапасы
	|		ПО (МаксНомерСтрокиЗапасы.Ссылка = РасходнаяНакладнаяЗапасы.Ссылка),
	|	Константа.ВариантПечатиДоставки КАК ВариантПечатиДоставки
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка В(&МассивОбъектов)
	|	И РасходнаяНакладнаяЗапасы.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И (ВариантПечатиДоставки.Значение <> ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиДоставки.НеВыводитьБесплатнуюДоставку)
	|			ИЛИ РасходнаяНакладнаяЗапасы.СтоимостьДоставки > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.ДатаОтгрузочногоДокумента КАК ДатаОтгрузочногоДокумента,
	|	РасходнаяНакладнаяЗапасы.НомерОтгрузочногоДокумента КАК НомерОтгрузочногоДокумента,
	|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	РасходнаяНакладнаяЗапасы.Содержание КАК Содержание,
	|	РасходнаяНакладнаяЗапасы.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры,
	|	РасходнаяНакладнаяЗапасы.ТипНоменклатуры КАК ТипНоменклатуры,
	|	РасходнаяНакладнаяЗапасы.ЗапасКод КАК ЗапасКод,
	|	РасходнаяНакладнаяЗапасы.ЗапасКод КАК Код,
	|	РасходнаяНакладнаяЗапасы.Артикул КАК Артикул,
	|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмеренияПоОКЕИ_Наименование КАК ЕдиницаИзмеренияПоОКЕИ_Наименование,
	|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмеренияПоОКЕИ_Код КАК ЕдиницаИзмеренияПоОКЕИ_Код,
	|	РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РасходнаяНакладнаяЗапасы.ВидУпаковки КАК ВидУпаковки,
	|	РасходнаяНакладнаяЗапасы.Количество КАК Количество,
	|	РасходнаяНакладнаяЗапасы.КоэффициентЕдиницыИзмерения КАК КоэффициентЕдиницыИзмерения,
	|	РасходнаяНакладнаяЗапасы.КоличествоВОдномМесте КАК КоличествоВОдномМесте,
	|	РасходнаяНакладнаяЗапасы.КоличествоМест КАК КоличествоМест,
	|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	РасходнаяНакладнаяЗапасы.Вес КАК МассаБрутто,
	|	РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|			ТОГДА РасходнаяНакладнаяЗапасы.СуммаСкидкиПоСтроке
	|		ИНАЧЕ ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.СуммаСкидкиПоСтроке * РасходнаяНакладнаяЗапасы.Ссылка.Курс / РасходнаяНакладнаяЗапасы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаСкидкиПоСтроке,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|						ТОГДА РасходнаяНакладнаяЗапасы.Цена
	|					КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Цена * РасходнаяНакладнаяЗапасы.Ссылка.Курс / РасходнаяНакладнаяЗапасы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ВЫБОР
	|							КОГДА РасходнаяНакладнаяЗапасы.Количество = 0
	|								ТОГДА СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС
	|							ИНАЧЕ ВЫРАЗИТЬ((СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС) / РасходнаяНакладнаяЗапасы.Количество КАК ЧИСЛО(15, 2))
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|						ТОГДА РасходнаяНакладнаяЗапасы.Сумма
	|					КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Сумма * РасходнаяНакладнаяЗапасы.Ссылка.Курс / РасходнаяНакладнаяЗапасы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ВЫБОР
	|							КОГДА РасходнаяНакладнаяЗапасы.Ссылка.СуммаВключаетНДС
	|								ТОГДА ВЫРАЗИТЬ(СуммыДокументовРегламентированныйУчет.Всего КАК ЧИСЛО(15, 2))
	|							ИНАЧЕ ВЫРАЗИТЬ(СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС КАК ЧИСЛО(15, 2))
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|						ТОГДА РасходнаяНакладнаяЗапасы.СуммаНДС
	|					КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.СуммаНДС * РасходнаяНакладнаяЗапасы.Ссылка.Курс / РасходнаяНакладнаяЗапасы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ СуммыДокументовРегламентированныйУчет.НДС
	|				КОНЕЦ
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ПечатнаяФормаТолькоВРублях
	|			ТОГДА ВЫБОР
	|					КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|						ТОГДА РасходнаяНакладнаяЗапасы.Всего
	|					КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Всего * РасходнаяНакладнаяЗапасы.Ссылка.Курс / РасходнаяНакладнаяЗапасы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ СуммыДокументовРегламентированныйУчет.Всего
	|				КОНЕЦ
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Всего
	|	КОНЕЦ КАК Всего,
	|	РасходнаяНакладнаяЗапасы.Ссылка КАК Ссылка,
	|	РасходнаяНакладнаяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	РасходнаяНакладнаяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	РасходнаяНакладнаяЗапасы.ЭтоНабор КАК ЭтоНабор,
	|	РасходнаяНакладнаяЗапасы.НеобходимоВыделитьКакСоставНабора КАК НеобходимоВыделитьКакСоставНабора,
	|	РасходнаяНакладнаяЗапасы.СтранаСсылка КАК СтранаСсылка,
	|	РасходнаяНакладнаяЗапасы.СтранаПредставление КАК СтранаПредставление,
	|	РасходнаяНакладнаяЗапасы.СтранаКод КАК СтранаКод,
	|	РасходнаяНакладнаяЗапасы.ПредставлениеГТД КАК ПредставлениеГТД,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ВЫБОР
	|					КОГДА РасходнаяНакладнаяЗапасы.КодТНВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|							ИЛИ РасходнаяНакладнаяЗапасы.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС)
	|							ИЛИ НЕ РасходнаяНакладнаяЗапасы.Ссылка.Контрагент.СтранаРегистрации.УчастникЕАЭС
	|						ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.Код
	|					ИНАЧЕ РасходнаяНакладнаяЗапасы.КодТНВЭД.Код
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КодТНВЭД,
	|	РасходнаяНакладнаяЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РасходнаяНакладнаяЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.ПрослеживаемыйТовар
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПрослеживаемыйТоварЧисло,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ВЫБОР
	|					КОГДА РасходнаяНакладнаяЗапасы.КодТНВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|							ИЛИ РасходнаяНакладнаяЗапасы.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС)
	|							ИЛИ НЕ РасходнаяНакладнаяЗапасы.Ссылка.Контрагент.СтранаРегистрации.УчастникЕАЭС
	|						ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения.Код
	|					ИНАЧЕ РасходнаяНакладнаяЗапасы.КодТНВЭД.ЕдиницаИзмерения.Код
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодТНВЭДЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ВЫБОР
	|					КОГДА РасходнаяНакладнаяЗапасы.КодТНВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|							ИЛИ РасходнаяНакладнаяЗапасы.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС)
	|							ИЛИ НЕ РасходнаяНакладнаяЗапасы.Ссылка.Контрагент.СтранаРегистрации.УчастникЕАЭС
	|						ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения.Наименование
	|					ИНАЧЕ РасходнаяНакладнаяЗапасы.КодТНВЭД.ЕдиницаИзмерения.Наименование
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодТНВЭДЕдиницаИзмеренияНаименование,
	|	РасходнаяНакладнаяЗапасы.ШтрихКод КАК ШтрихКод
	|ИЗ
	|	ВременнаяТаблица_РасходнаяНакладнаяЗапасы КАК РасходнаяНакладнаяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовРегламентированныйУчет КАК СуммыДокументовРегламентированныйУчет
	|		ПО РасходнаяНакладнаяЗапасы.Ссылка = СуммыДокументовРегламентированныйУчет.Регистратор
	|			И РасходнаяНакладнаяЗапасы.НомерСтроки = СуммыДокументовРегламентированныйУчет.НомерСтрокиДокумента
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Результат = МассивРезультатов[0].Выгрузить();
	
	ТЗСтрок = МассивРезультатов[3].Выгрузить();
	Для Каждого ТекущаяСтрока Из Результат Цикл
		
		НайденныеСтроки = ТЗСтрок.НайтиСтроки(Новый Структура("Ссылка", ТекущаяСтрока.Ссылка));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущаяСтрока.ТаблицаЗапасы = ТЗСтрок.Скопировать(НайденныеСтроки);
			ТекущаяСтрока.ЕстьПрослеживаемыеТовары = (ТекущаяСтрока.ТаблицаЗапасы.Итог("ПрослеживаемыйТоварЧисло") > 0);
			Если ТекущаяСтрока.ЕстьПрослеживаемыеТовары Тогда
				ДополнитьСведениямиОПрослеживаемости(ТекущаяСтрока.СведенияПрослеживаемости, ТекущаяСтрока.ТаблицаЗапасы);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(Результат, "ТаблицаЗапасы");
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьСведениямиОПрослеживаемости(СведенияОПрослеживаемости, ТаблицаДокумента)
	
	МассивИдентифицирующихРеквизитов = Новый Массив();
	МассивИдентифицирующихРеквизитов.Добавить("ИдентификаторСтроки");
	
	ТаблицаДокумента.Колонки.Добавить("СведенияОПрослеживаемости");
	
	Для Каждого СтрокаТаблицыДокумента Из ТаблицаДокумента Цикл
		
		ТаблицаСведенийОПрослеживаемости = НовыйТаблицаСведенийОПрослеживаемости();
		
		ПараметрыОтбора = ПараметрыОтбораСтрокДляРНПТ(МассивИдентифицирующихРеквизитов, СтрокаТаблицыДокумента);
		СтрокиСРНПТ = СведенияОПрослеживаемости.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из СтрокиСРНПТ Цикл
			СтрокаСведенийОПрослеживаемости = ТаблицаСведенийОПрослеживаемости.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСведенийОПрослеживаемости, НайденнаяСтрока);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТаблицаСведенийОПрослеживаемости) Тогда
			СтрокаТаблицыДокумента.СведенияОПрослеживаемости = ТаблицаСведенийОПрослеживаемости;
		Иначе
			СтрокаТаблицыДокумента.СведенияОПрослеживаемости = Неопределено;;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыОтбораСтрокДляРНПТ(ИдентифицирующиеРеквизитыСтроки, СтрокаСчетаФактуры)
	
	СтруктураОтбора = Новый Структура;
	Для Каждого ИдентифицирующийРеквизит Из ИдентифицирующиеРеквизитыСтроки Цикл
		СтруктураОтбора.Вставить(ИдентифицирующийРеквизит,СтрокаСчетаФактуры[ИдентифицирующийРеквизит]); 
	КонецЦикла;
	
	Возврат СтруктураОтбора;
	
КонецФункции

Функция НовыйТаблицаСведенийОПрослеживаемости()
	
	ТаблицаСведенийОПрослеживаемости = Новый ТаблицаЗначений();
	ТаблицаСведенийОПрослеживаемости.Колонки.Добавить("ИдентификаторСтроки");
	ТаблицаСведенийОПрослеживаемости.Колонки.Добавить("РНПТ");
	ТаблицаСведенийОПрослеживаемости.Колонки.Добавить("Количество");
	ТаблицаСведенийОПрослеживаемости.Колонки.Добавить("КоличествоПрослеживаемости");
	
	Возврат ТаблицаСведенийОПрослеживаемости;
	
КонецФункции

// Процедура формирования печатной формы Товарный чек
//
Процедура СформироватьТоварныйЧек(ТабличныйДокумент, ТекущийДокумент)
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	ПараметрыНоменклатуры = Новый Структура;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходнаяНакладная_ТоварныйЧек";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЧекККМ.ПФ_MXL_ТоварныйЧек");
	СтруктураЗаполненияСекции = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходнаяНакладная.Ссылка КАК Ссылка,
	|	РасходнаяНакладная.Дата КАК ДатаДокумента,
	|	РасходнаяНакладная.Номер КАК Номер,
	|	РасходнаяНакладная.Организация КАК Организация,
	|	РасходнаяНакладная.Организация.Префикс КАК Префикс,
	|	РасходнаяНакладная.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаСсылка,
	|	РасходнаяНакладная.СтруктурнаяЕдиница.Наименование КАК СтруктурнаяЕдиницаНаименование,
	|	РасходнаяНакладная.Контрагент КАК Контрагент,
	|	РасходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РасходнаяНакладная.ВалютаДокумента КАК ВалютаДокумента,
	|	РасходнаяНакладная.ПодписьКладовщика.Должность КАК ДолжностьКассира,
	|	РасходнаяНакладная.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКассира,
	|	РасходнаяНакладная.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиКонтрагента,
	|	РасходнаяНакладная.НоменклатураДоставки КАК НоменклатураДоставки,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(РасходнаяНакладная.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА РасходнаяНакладная.НоменклатураДоставки.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(РасходнаяНакладная.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ПредставлениеНоменклатурыДоставки,
	|	РасходнаяНакладная.НоменклатураДоставки.Код КАК КодДоставки,
	|	РасходнаяНакладная.НоменклатураДоставки.Артикул КАК АртикулДоставки,
	|	РасходнаяНакладная.НоменклатураДоставки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДоставки,
	|	РасходнаяНакладная.СтоимостьДоставки КАК СтоимостьДоставки,
	|	РасходнаяНакладная.СтавкаНДСДоставки КАК СтавкаНДСДоставки,
	|	РасходнаяНакладная.СуммаНДСДоставки КАК СуммаНДСДоставки,
	|	РасходнаяНакладная.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
	|				ТОГДА РасходнаяНакладная.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		Номенклатура.Код КАК Код,
	|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Характеристика КАК Характеристика,
	|		Партия КАК Партия,
	|		Содержание КАК Содержание,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА РасходнаяНакладная.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ РасходнаяНакладная.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		КлючСвязи КАК КлючСвязи,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА РасходнаяНакладная.Запасы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И РасходнаяНакладная.Запасы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаЗапасы,
	|	РасходнаяНакладная.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(РасходнаяНакладная.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА РасходнаяНакладная.ДобавленныеНаборы.НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(РасходнаяНакладная.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы,
	|	РасходнаяНакладная.СерииНоменклатуры.(
	|		Серия КАК Серия,
	|		КлючСвязи КАК КлючСвязи
	|	) КАК ТаблицаСерииНоменклатуры
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	ДоставкаСервер.ДобавитьСтрокуДоставкиУниверсальныеДанные(ДанныеДокументов);
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаЗапасы");
	
	Для каждого Шапка Из ДанныеДокументов Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		
		// :::Заголовок
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|ОсновныеДанные");
		СтруктураЗаполненияСекции.Очистить();
		
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента, Шапка.Номер, Шапка.Префикс);
		СтруктураЗаполненияСекции.Вставить("ТекстЗаголовка",  НСтр("ru ='Товарный чек № '") + НомерДокумента + НСтр("ru =' от '") + Формат(Шапка.ДатаДокумента, "ДЛФ=DD"));
		
		ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СтруктураЗаполненияСекции.Очистить();
		
		// :::Поставщик
		КонтактнаяИнформацияТоварногоЧека = Константы.КонтактнаяИнформацияТоварногоЧека.Получить();
		Если КонтактнаяИнформацияТоварногоЧека <> Перечисления.КонтактнаяИнформацияТоварногоЧека.СтруктурнаяЕдиница Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
			
			ПредставлениеПоставщика = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
			СтруктураЗаполненияСекции.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
			СтруктураЗаполненияСекции.Вставить("Поставщик", Шапка.Организация);
			
			ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		Если КонтактнаяИнформацияТоварногоЧека <> Перечисления.КонтактнаяИнформацияТоварногоЧека.Организация Тогда
			
			ОбластьМакета = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "СтруктурнаяЕдиница", , Ошибки);
			Если ОбластьМакета <> Неопределено Тогда
				
				ПредставлениеСтруктурнойЕдиницы = Шапка.СтруктурнаяЕдиницаНаименование;
				
				ФактАдресСтруктурнойЕдиницы = ПечатьДокументовУНФ.КонтактнаяИнформация(Шапка.СтруктурнаяЕдиницаСсылка, Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы);
				Если НЕ ПустаяСтрока(ФактАдресСтруктурнойЕдиницы) Тогда
					
					ПредставлениеСтруктурнойЕдиницы = ПредставлениеСтруктурнойЕдиницы + ", " + ФактАдресСтруктурнойЕдиницы;
					
				КонецЕсли;
				
				ТелефонСтруктурнойЕдиницы = ПечатьДокументовУНФ.КонтактнаяИнформация(Шапка.СтруктурнаяЕдиницаСсылка, Справочники.ВидыКонтактнойИнформации.ТелефонСтруктурнойЕдиницы);
				Если НЕ ПустаяСтрока(ТелефонСтруктурнойЕдиницы) Тогда
					
					ПредставлениеСтруктурнойЕдиницы = ПредставлениеСтруктурнойЕдиницы + ", " + ТелефонСтруктурнойЕдиницы;
					
				КонецЕсли;
				
				СтруктураЗаполненияСекции.Вставить("ПредставлениеСтруктурнойЕдиницы", ПредставлениеСтруктурнойЕдиницы);
				
				Если КонтактнаяИнформацияТоварногоЧека = Перечисления.КонтактнаяИнформацияТоварногоЧека.СтруктурнаяЕдиница Тогда
					
					СтруктураЗаполненияСекции.Вставить("ЗаголовокСтруктурнойЕдиницы", НСтр("ru ='Поставщик:'"));
					
				КонецЕсли;
				
				ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// :::Покупатель
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		СтруктураЗаполненияСекции.Очистить();
		СтруктураЗаполненияСекции = Новый Структура(Новый ФиксированнаяСтруктура(СведенияОбКонтрагенте));
		
		ПредставлениеПолучателя = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ФактическийАдрес,Телефоны");
		СтруктураЗаполненияСекции.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
		
		ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// :::ШапкаТаблицы
		ЕстьСкидки = Шапка.ТаблицаЗапасы.Итог("ЕстьСкидка") <> 0;
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьСкидок);
			
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		// :::СтрокиТаблицы
		ОбластьКолонкаЗапас = Макет.Область("Запас");
		Если Не ЕстьСкидки Тогда
			
			ОбластьКолонкаЗапас.ШиринаКолонки = ОбластьКолонкаЗапас.ШиринаКолонки + Макет.Область("СуммаБезСкидки").ШиринаКолонки + Макет.Область("СуммаСкидки").ШиринаКолонки;
			
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
		
		Итоги = Новый Структура;
		Итоги.Вставить("Сумма", 0);
		Итоги.Вставить("СуммаНДС", 0);
		Итоги.Вставить("Всего", 0);
		Итоги.Вставить("Количество", 0);
		Итоги.Вставить("НомерСтроки", 0);
		Итоги.Вставить("ВсегоСкидок", 0);
		Итоги.Вставить("ВсегоБезСкидок", 0);
		Итоги.Вставить("ЕстьСкидки", ЕстьСкидки);
		ПараметрыНоменклатуры = Новый Структура;
		
		Для каждого СтрокаЗапасы Из Шапка.ТаблицаЗапасы Цикл
			
			ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиТоварныйЧек(СтрокаЗапасы, СтруктураЗаполненияСекции, ПараметрыНоменклатуры, Итоги, Шапка);
			
			ОбластьНомера.Параметры.Заполнить(СтруктураЗаполненияСекции);
			ТабличныйДокумент.Вывести(ОбластьНомера);
			ОбластьДанных.Параметры.Заполнить(СтруктураЗаполненияСекции);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			Если Итоги.ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Заполнить(СтруктураЗаполненияСекции);
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли; 
			ОбластьСуммы.Параметры.Заполнить(СтруктураЗаполненияСекции);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
			// Наборы
			НаборыСервер.УчестьОформлениеСтрокиНабора(ТабличныйДокумент, ОбластьДанных, СтрокаЗапасы);
				
		КонецЦикла;
		
		// :::Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
		СтруктураЗаполненияСекции.Очистить();
		
		СтруктураЗаполненияСекции.Вставить("Сумма", ПечатьДокументовУНФ.ФорматСумм(Итоги.Сумма));
		СтруктураЗаполненияСекции.Вставить("Всего", ПечатьДокументовУНФ.ФорматСумм(Итоги.Всего));
		
		Если Итоги.СуммаНДС = 0 Тогда
			
			СтруктураЗаполненияСекции.Вставить("ЗаголовокНДС", "Без налога (НДС)");
			СтруктураЗаполненияСекции.Вставить("СуммаНДС", "-");
			
		Иначе
			
			СтруктураЗаполненияСекции.Вставить("ЗаголовокНДС", ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:"));
			СтруктураЗаполненияСекции.Вставить("СуммаНДС", ПечатьДокументовУНФ.ФорматСумм(Итоги.СуммаНДС));
			
		КонецЕсли; 
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		ОбластьДанных.Параметры.Заполнить(СтруктураЗаполненияСекции);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьСкидки Тогда
			
			СтруктураЗаполненияСекции.Вставить("ВсегоСкидок", Итоги.ВсегоСкидок);
			СтруктураЗаполненияСекции.Вставить("ВсегоБезСкидок", Итоги.ВсегоБезСкидок);
			
			ОбластьСкидок.Параметры.Заполнить(СтруктураЗаполненияСекции);
			ТабличныйДокумент.Присоединить(ОбластьСкидок);
			
		КонецЕсли;
		
		ОбластьСуммы.Параметры.Заполнить(СтруктураЗаполненияСекции);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		// :::СуммаПрописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СтруктураЗаполненияСекции.Очистить();
		
		СуммаКПрописи = Итоги.Всего;
		ИтоговаяСтрока = СтрШаблон(НСтр("ru ='Всего наименований %1, на сумму %2'"), Итоги.Количество,
			ПечатьДокументовУНФ.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента));
		СтруктураЗаполненияСекции.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		СтруктураЗаполненияСекции.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(
			СуммаКПрописи, Шапка.ВалютаДокумента));
		
		ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// :::Подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи|ОсновныеДанные");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	
	КонецЦикла; 
	
КонецПроцедуры // СформироватьТоварныйЧек()

// Процедура формирования печатной формы М15
//
Процедура СформироватьМ15(ТабличныйДокумент, ТекущийДокумент)
	
	ПараметрыНоменклатуры = Новый Структура;
	
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Универсальные_М15";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходнаяНакладная.Дата КАК ДатаДокумента,
	|	РасходнаяНакладная.Номер КАК Номер,
	|	РасходнаяНакладная.Организация КАК Руководители,
	|	РасходнаяНакладная.Организация КАК Организация,
	|	РасходнаяНакладная.БанковскийСчет КАК БанковскийСчет,
	|	РасходнаяНакладная.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	РасходнаяНакладная.Организация.Префикс КАК Префикс,
	|	РасходнаяНакладная.СтруктурнаяЕдиница КАК СкладНаименование,
	|	РасходнаяНакладная.Контрагент КАК Контрагент,
	|	РасходнаяНакладная.Договор.Представление КАК Основание,
	|	РасходнаяНакладная.ВалютаДокумента,
	|	РасходнаяНакладная.СуммаВключаетНДС,
	|	РасходнаяНакладная.СтруктурнаяЕдиница.МОЛ КАК МОЛ,
	|	РасходнаяНакладная.Ответственный.Физлицо КАК Ответственный,
	|	РасходнаяНакладная.НДСВключатьВСтоимость,
	|	РасходнаяНакладная.Курс,
	|	РасходнаяНакладная.Кратность,
	|	РасходнаяНакладная.ПодписьРуководителя.Должность КАК ДолжностьРуководителя,
	|	РасходнаяНакладная.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя,
	|	РасходнаяНакладная.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК РасшифровкаПодписиГлавногоБухгалтера,
	|	РасходнаяНакладная.ПодписьКладовщика.Должность КАК ДолжностьКладовщика,
	|	РасходнаяНакладная.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщика,
	|	РасходнаяНакладная.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиКонтрагента
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ИспользоватьПересчет = (НЕ Шапка.ВалютаДокумента = Константы.НациональнаяВалюта.Получить());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ЗапасНаименование,
	|	РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|	ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание,
	|	РасходнаяНакладнаяЗапасы.Номенклатура.Код КАК ЗапасКод,
	|	РасходнаяНакладнаяЗапасы.Номенклатура.Код КАК Код,
	|	РасходнаяНакладнаяЗапасы.Номенклатура.Артикул КАК Артикул,
	|	РасходнаяНакладнаяЗапасы.Номенклатура.Штрихкод КАК Штрихкод,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				И РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Наименование
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				И РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Код
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	&Цена_Параметр КАК Цена,
	|	СУММА(РасходнаяНакладнаяЗапасы.Количество) КАК Количество,
	|	СУММА(&Сумма_Параметр) КАК Сумма,
	|	СУММА(&СуммаНДС_Параметр) КАК СуммаНДС,
	|	СУММА(&Всего_Параметр) КАК Всего,
	|	МИНИМУМ(РасходнаяНакладнаяЗапасы.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовРегламентированныйУчет КАК СуммыДокументовРегламентированныйУчет
	|		ПО РасходнаяНакладнаяЗапасы.Ссылка = СуммыДокументовРегламентированныйУчет.Регистратор
	|			И РасходнаяНакладнаяЗапасы.НомерСтроки = СуммыДокументовРегламентированныйУчет.НомерСтрокиДокумента,
	|	Константа.ПечатьПользовательскихЕдиницИзмерения КАК ПечатьПользовательскихЕдиницИзмерения
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка = &ТекущийДокумент
	|	И НЕ РасходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходнаяНакладнаяЗапасы.Номенклатура,
	|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
	|	РасходнаяНакладнаяЗапасы.СтавкаНДС,
	|	РасходнаяНакладнаяЗапасы.Характеристика,
	|	ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Содержание КАК СТРОКА(1000)),
	|	РасходнаяНакладнаяЗапасы.Номенклатура.Код,
	|	РасходнаяНакладнаяЗапасы.Номенклатура.Артикул,
	|	РасходнаяНакладнаяЗапасы.Номенклатура.Штрихкод,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				И РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Наименование
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ПечатьПользовательскихЕдиницИзмерения.Значение = ЗНАЧЕНИЕ(Перечисление.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице)
	|				И РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Код
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ,
	|	РасходнаяНакладнаяЗапасы.Номенклатура.Код,
	|	&Цена_Параметр
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если ИспользоватьПересчет Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Цена_Параметр",
		"ВЫБОР КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
		|	   ТОГДА Выразить(РасходнаяНакладнаяЗапасы.Цена * &Курс / &Кратность КАК Число(15,2))
		|	   ИНАЧЕ ВЫБОР КОГДА РасходнаяНакладнаяЗапасы.Количество = 0
		|				   ТОГДА (СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС)
		|				   ИНАЧЕ Выразить((СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС) / РасходнаяНакладнаяЗапасы.Количество КАК ЧИСЛО(15, 2)) 
		|			 КОНЕЦ
		|КОНЕЦ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сумма_Параметр", 	
		"ВЫБОР КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
		|	ТОГДА Выразить(РасходнаяНакладнаяЗапасы.Сумма * &Курс / &Кратность КАК Число(15,2))
		|	ИНАЧЕ ВЫБОР КОГДА РасходнаяНакладнаяЗапасы.Ссылка.СуммаВключаетНДС
		|				ТОГДА Выразить(СуммыДокументовРегламентированныйУчет.Всего КАК ЧИСЛО(15, 2))
		|				ИНАЧЕ Выразить(СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС КАК ЧИСЛО(15, 2)) 
		|		  КОНЕЦ
		|КОНЕЦ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр", 	
		"ВЫБОР КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL 
		|	ТОГДА Выразить(РасходнаяНакладнаяЗапасы.СуммаНДС * &Курс / &Кратность КАК Число(15,2))
		|	ИНАЧЕ СуммыДокументовРегламентированныйУчет.НДС
		|КОНЕЦ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр", 	
		"ВЫБОР КОГДА СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL
		|	ТОГДА Выразить(РасходнаяНакладнаяЗапасы.Всего * &Курс / &Кратность КАК Число(15,2))
		|	ИНАЧЕ СуммыДокументовРегламентированныйУчет.Всего
		|КОНЕЦ");
		
		Запрос.УстановитьПараметр("Курс", Шапка.Курс);
		Запрос.УстановитьПараметр("Кратность", Шапка.Кратность);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Цена_Параметр", "РасходнаяНакладнаяЗапасы.Цена");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сумма_Параметр", "РасходнаяНакладнаяЗапасы.Сумма");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр", "РасходнаяНакладнаяЗапасы.СуммаНДС");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр", "РасходнаяНакладнаяЗапасы.Всего");
		
	КонецЕсли;
	
	ВыборкаСтрокЗапасы = Запрос.Выполнить().Выбрать();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РасходнаяНакладная.ПФ_MXL_М15");
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	
	СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента,
		, Шапка.БанковскийСчет);
	СведенияОГрузополучателе = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Шапка.Контрагент,
		Шапка.ДатаДокумента, , Шапка.БанковскийСчетКонтрагента);
	
	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	
	НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента, Шапка.Номер,
		Шапка.Префикс);
	
	ОбластьМакетаШапка.Параметры.НомерДокумента = НомерДокумента;
	ОбластьМакетаШапка.Параметры.ДатаДокумента = Шапка.ДатаДокумента;
	ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ПечатьДокументовУНФ.ОписаниеОрганизации(
		СведенияОбОрганизации);
	ОбластьМакетаШапка.Параметры.КонтрагентНаименование = ПечатьДокументовУНФ.ОписаниеОрганизации(
		СведенияОГрузополучателе, "ПолноеНаименование,");
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакетаШапка,
		ТекущийДокумент);
	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
	
	// Выводим заголовок таблицы
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	НомерСтраницы = 1;
	НомерСтроки = 0;
	КоличествоСтрок = ВыборкаСтрокЗапасы.Количество();
	
	// Инициализация итогов в документе
	ИтогоСуммаБезНДС = 0;
	ИтогоСуммаНДС = 0;
	ИтогоВсегоСНДС = 0;
	
	// Выводим многострочную часть документа
	Пока ВыборкаСтрокЗапасы.Следующий() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		Если НомерСтроки = 1 Тогда
			СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
		КонецЕсли;                                                   // помещаться заголовок
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал); // помещаться и подвал документа
		КонецЕсли;
		
		Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
			
			// Выведем заголовок таблицы
			НомерСтраницы	= НомерСтраницы + 1;
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			
		КонецЕсли;
		
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрокЗапасы);
		
		Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
			ОбластьМакетаСтрока.Параметры.ЗапасНаименование = ВыборкаСтрокЗапасы.Содержание;
		Иначе
			ПараметрыНоменклатуры.Очистить();
			ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", ВыборкаСтрокЗапасы.ЗапасНаименование);
			ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", ВыборкаСтрокЗапасы.Характеристика);
			ОбластьМакетаСтрока.Параметры.ЗапасНаименование = ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры);
		КонецЕсли;
		
		ПараметрыНоменклатуры.Очистить();
		ПараметрыНоменклатуры.Вставить("Код", ВыборкаСтрокЗапасы.Код);
		ПараметрыНоменклатуры.Вставить("Артикул", ВыборкаСтрокЗапасы.Артикул);
		ОбластьМакетаСтрока.Параметры.ПредставлениеКодаНоменклатуры = ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(
			ПараметрыНоменклатуры);
		
		СуммаСНДС	= ВыборкаСтрокЗапасы.Всего;
		СуммаНДС	= ВыборкаСтрокЗапасы.СуммаНДС;
		СуммаБезНДС = ВыборкаСтрокЗапасы.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрокЗапасы.СуммаНДС, 0);
		
		Количество = ВыборкаСтрокЗапасы.Количество;
		Цена = СуммаБезНДС / Количество;
		
		ОбластьМакетаСтрока.Параметры.Количество = Количество;
		ОбластьМакетаСтрока.Параметры.СуммаСНДС = СуммаСНДС;
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
		ОбластьМакетаСтрока.Параметры.СуммаНДС = СуммаНДС;
		ОбластьМакетаСтрока.Параметры.Цена = Цена;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
		
		ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + СуммаБезНДС;
		ИтогоСуммаНДС = ИтогоСуммаНДС + СуммаНДС;
		ИтогоВсегоСНДС = ИтогоВсегоСНДС + СуммаСНДС;
		
	КонецЦикла;
	
	// Выводим подвал документа
	ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
	
	ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(НомерСтроки, "НП=Ложь",
		",,,,,,,,0");
	ОбластьМакетаПодвал.Параметры.СуммаПрописью = ЧислоПрописью(Цел(ИтогоВсегоСНДС), "НП=Ложь", ",,,,,,,,0");
	ОбластьМакетаПодвал.Параметры.КопейкиСуммы = (ИтогоВсегоСНДС - Цел(ИтогоВсегоСНДС)) * 100;
	ОбластьМакетаПодвал.Параметры.ИтогоСуммаНДС = Цел(ИтогоСуммаНДС);
	ОбластьМакетаПодвал.Параметры.КопейкиСуммыНДС = (ИтогоСуммаНДС - Цел(ИтогоСуммаНДС)) * 100;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
	
КонецПроцедуры

// Процедура формирования печатной формы Бланк товарного наполнения
//
Процедура СформироватьБланкТоварногоНаполнения(ТабличныйДокумент, ТекущийДокумент)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходнаяНакладная.Дата КАК ДатаДокумента,
	|	РасходнаяНакладная.Номер КАК Номер,
	|	РасходнаяНакладная.Организация.Префикс КАК Префикс,
	|	РасходнаяНакладная.СтруктурнаяЕдиница КАК ПредставлениеСклада,
	|	РасходнаяНакладная.Ячейка КАК ПредставлениеЯчейки,
	|	РасходнаяНакладная.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		СтруктурнаяЕдиница КАК Склад,
	|		Ячейка КАК Ячейка,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
	|				ТОГДА РасходнаяНакладная.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Запас,
	|		Содержание КАК Содержание,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Штрихкод КАК Штрихкод,
	|		Номенклатура.Код КАК Код,
	|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		Характеристика,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		КлючСвязи
	|	),
	|	РасходнаяНакладная.СерииНоменклатуры.(
	|		Серия,
	|		КлючСвязи
	|	)
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
	ВыборкаСтрокСерииНоменклатуры = Шапка.СерииНоменклатуры.Выбрать();
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходнаяНакладная_БланкТоварногоНаполнения";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РасходнаяНакладная.ПФ_MXL_БланкТоварногоНаполнения");
	
	НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента, Шапка.Номер,
		Шапка.Префикс);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Расходная накладная № %1 от %2'"), НомерДокумента,
		Формат(Шапка.ДатаДокумента, "ДЛФ=DD"));
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Склад");
	ОбластьМакета.Параметры.ПредставлениеСклада = Шапка.ПредставлениеСклада;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если Константы.ФункциональнаяОпцияУчетПоЯчейкам.Получить() Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("Ячейка");
		ОбластьМакета.Параметры.ПредставлениеЯчейки = Шапка.ПредставлениеЯчейки;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ВремяПечати");
	ОбластьМакета.Параметры.ВремяПечати = СтрШаблон(НСтр("ru = 'Дата и время печати: %1. Пользователь: %2'"),
		ТекущаяДатаСеанса(), Пользователи.ТекущийПользователь());
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	ПараметрыНоменклатуры = Новый Структура;
	
	Пока ВыборкаСтрокЗапасы.Следующий() Цикл
		
		Если НЕ ВыборкаСтрокЗапасы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
		
		Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
			
			ОбластьМакета.Параметры.Запас = ВыборкаСтрокЗапасы.Содержание;
			
		Иначе
			
			СтрокаСерииНоменклатуры = СерииНоменклатурыУНФ.СтрокаСерииНоменклатурыИзВыборки(ВыборкаСтрокСерииНоменклатуры,
				ВыборкаСтрокЗапасы.КлючСвязи);
			ПараметрыНоменклатуры.Очистить();
			ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", ВыборкаСтрокЗапасы.ЗапасНаименование);
			ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", ВыборкаСтрокЗапасы.Характеристика);
			ПараметрыНоменклатуры.Вставить("ПредставлениеСерииНоменклатуры", СтрокаСерииНоменклатуры);
			ОбластьМакета.Параметры.Запас = ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры);
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета, ПараметрыПечати)
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ИмяМакета = "ГарантийныйТалон" Тогда
			
			НоменклатураВДокументахСервер.СформироватьГарантийныеТалоныДокумента(ТабличныйДокумент, ТекущийДокумент, Ошибки);
			
		ИначеЕсли ИмяМакета = "М15" Тогда
			
			СформироватьМ15(ТабличныйДокумент, ТекущийДокумент);
			
		ИначеЕсли ИмяМакета = "ТоварныйЧек" Тогда
			
			СформироватьТоварныйЧек(ТабличныйДокумент, ТекущийДокумент);
			
		ИначеЕсли ИмяМакета = "БланкТоварногоНаполнения" Тогда
			
			СформироватьБланкТоварногоНаполнения(ТабличныйДокумент, ТекущийДокумент);
			
		КонецЕсли;

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Перем Ошибки;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьАктаОбОказанииУслуг.ИдентификаторПечатнойФормы(Ложь, Ложь));
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьАктаОбОказанииУслуг.КлючПараметровПечати();
		ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьАктаОбОказанииУслуг.ПолныйПутьКМакету(Ложь);
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьАктаОбОказанииУслуг.ПредставлениеПФ(Ложь, Ложь);
		
		ДанныеОбъектовПечати = ДанныеДокументовАктОбОказанииУслуг(МассивОбъектов, Ложь);
		Обработки.ПечатьАктаОбОказанииУслуг.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати, Ложь);
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьАктаОбОказанииУслуг.ИдентификаторПечатнойФормы(Ложь, Истина));
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьАктаОбОказанииУслуг.КлючПараметровПечати();
		ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьАктаОбОказанииУслуг.ПолныйПутьКМакету(Ложь);
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьАктаОбОказанииУслуг.ПредставлениеПФ(Ложь, Истина);
		
		ДанныеОбъектовПечати = ДанныеДокументовАктОбОказанииУслуг(МассивОбъектов, Истина);
		Обработки.ПечатьАктаОбОказанииУслуг.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати, Ложь);
		
	КонецЕсли;
	
	ВозможныеВарианты = Обработки.ПечатьНакладная.МатрицаВозможныхВариантов();
	Для каждого СтрокаТаблицы Из ВозможныеВарианты Цикл
		
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьНакладная.ИдентификаторПечатнойФормы(СтрокаТаблицы.ВключаяУслуги, СтрокаТаблицы.ИспользоватьФаксимиле));
		Если ПечатнаяФорма <> Неопределено Тогда
			
			ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
			ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьНакладная.КлючПараметровПечати();
			ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьНакладная.ПолныйПутьКМакету();
			ПечатнаяФорма.СинонимМакета = Обработки.ПечатьНакладная.ПредставлениеПФ(СтрокаТаблицы.ВключаяУслуги, СтрокаТаблицы.ИспользоватьФаксимиле);
			
			ДанныеОбъектовПечати = УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов, СтрокаТаблицы.ИспользоватьФаксимиле, Истина);
			Обработки.ПечатьНакладная.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати, СтрокаТаблицы.ВключаяУслуги);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеПечатнойФормы = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьМХ1.ИдентификаторПечатнойФормы());
	Если ОписаниеПечатнойФормы <> Неопределено Тогда
		
		ОписаниеПечатнойФормы.ТабличныйДокумент = Новый ТабличныйДокумент;
		ОписаниеПечатнойФормы.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьМХ1.КлючПараметровПечати();
		ОписаниеПечатнойФормы.ПолныйПутьКМакету = Обработки.ПечатьМХ1.ПолныйПутьКМакету();
		ОписаниеПечатнойФормы.СинонимМакета = Обработки.ПечатьМХ1.ПредставлениеПФ();
		
		ДанныеОбъектовПечати = УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов, Ложь, Ложь);
		АдаптироватьДанныеУниверсальногоЗапросаДляМХ1(ДанныеОбъектовПечати);
		Обработки.ПечатьМХ1.СформироватьПФ(ОписаниеПечатнойФормы, ДанныеОбъектовПечати, ОбъектыПечати);
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьМХ3.ИдентификаторПечатнойФормы());
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьМХ3.КлючПараметровПечати();
		ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьМХ3.ПолныйПутьКМакету();
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьМХ3.ПредставлениеПФ();
		
		ДанныеОбъектовПечати = УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов, Ложь, Ложь);
		Обработки.ПечатьМХ3.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати);
		
	КонецЕсли;
	
	ВозможныеВарианты = Обработки.ПечатьТОРГ12.МатрицаВозможныхВариантов();
	Для каждого СтрокаТаблицы Из ВозможныеВарианты Цикл
		
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьТОРГ12.ИдентификаторПечатнойФормы(СтрокаТаблицы.ВключаяУслуги, СтрокаТаблицы.ИспользоватьФаксимиле));
		Если ПечатнаяФорма <> Неопределено Тогда
			
			ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
			ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьТОРГ12.КлючПараметровПечати();
			ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьТОРГ12.ПолныйПутьКМакету();
			ПечатнаяФорма.СинонимМакета = Обработки.ПечатьТОРГ12.ПредставлениеПФ(СтрокаТаблицы.ВключаяУслуги, СтрокаТаблицы.ИспользоватьФаксимиле);
			
			ДанныеОбъектовПечати = ДанныеДокументовРегУчет(МассивОбъектов, СтрокаТаблицы.ИспользоватьФаксимиле, Истина, Ошибки);
			Обработки.ПечатьТОРГ12.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати, СтрокаТаблицы.ВключаяУслуги);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьАктПередачиПрав.ИдентификаторПечатнойФормы());
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьАктПередачиПрав.КлючПараметровПечати();
		ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьАктПередачиПрав.ПолныйПутьКМакету();
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьАктПередачиПрав.ПредставлениеПФ();
		
		ДанныеОбъектовПечати = ДанныеДокументовРегУчет(МассивОбъектов, Ложь, Истина, Ошибки);
		Обработки.ПечатьАктПередачиПрав.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М15") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М15", "М15 (Накладная на отпуск материалов)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "М15", ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТТН") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТТН", "1-Т (Товарно-транспортная накладная)", Обработки.ПечатьТТН.ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧек") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТоварныйЧек", "Товарный чек", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ТоварныйЧек", ПараметрыПечати));
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьСчетНаОплату.ИдентификаторПечатнойФормы(Ложь, Ложь));
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьСчетНаОплату.КлючПараметровПечати();
		ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьСчетНаОплату.ПолныйПутьКМакету();
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьСчетНаОплату.ПредставлениеПФ(Ложь, Ложь);
		
		ДанныеОбъектовПечати = УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов, Ложь, Истина);
		УчестьОсобенностиФормированияСчетаОплату(ДанныеОбъектовПечати);
		
		Обработки.ПечатьСчетНаОплату.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати, Ложь);
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьСчетНаОплату.ИдентификаторПечатнойФормы(Ложь, Истина));
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьСчетНаОплату.КлючПараметровПечати();
		ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьСчетНаОплату.ПолныйПутьКМакету();
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьСчетНаОплату.ПредставлениеПФ(Ложь, Истина);
		
		ДанныеОбъектовПечати = УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов, Истина, Истина);
		УчестьОсобенностиФормированияСчетаОплату(ДанныеОбъектовПечати);
		
		Обработки.ПечатьСчетНаОплату.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати, Ложь);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГарантийныйТалон") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ГарантийныйТалон", "Гарантийный талон", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ГарантийныйТалон", ПараметрыПечати));
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "БланкТоварногоНаполнения");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьБланкТоварногоНаполнения.КлючПараметровПечати();
		ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьБланкТоварногоНаполнения.ПолныйПутьКМакету();
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьБланкТоварногоНаполнения.ПредставлениеПФ();
		
		ДанныеОбъектовПечати = УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов, Ложь, Ложь);
		Обработки.ПечатьБланкТоварногоНаполнения.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати);
		
	КонецЕсли;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов,
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ЗначениеИдентификатора = "АктОбОказанииУслуг,ТОРГ12,ТОРГ12СУслугами,Обработка.ПечатьСчетФактура.СчетФактура,%1,Обработка.ПечатьСчетФактура.УниверсальныйПередаточныйДокумент,М15,ТТН,Накладная,НакладнаяСУслугами,СчетНаОплату,ГарантийныйТалон,БланкТоварногоНаполнения";
	ЗначениеИдентификатора = СтрШаблон(ЗначениеИдентификатора, Обработки.ПечатьАктПередачиПрав.ИдентификаторПечатнойФормы());
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		
		ЗначениеИдентификатора = СтрЗаменить(ЗначениеИдентификатора, ",ГарантийныйТалон", "");
		
	КонецЕсли;
		
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = ЗначениеИдентификатора;
	КомандаПечати.Представление = ПечатьДокументовУНФ.ПредставлениеКомплектаДокументов();
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = Обработки.ПечатьАктаОбОказанииУслуг.ИдентификаторПечатнойФормы(Ложь, Ложь);
	КомандаПечати.Представление = Обработки.ПечатьАктаОбОказанииУслуг.ПредставлениеПФ(Ложь, Ложь);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = Обработки.ПечатьАктаОбОказанииУслуг.ИдентификаторПечатнойФормы(Ложь, Истина);
	КомандаПечати.Представление = Обработки.ПечатьАктаОбОказанииУслуг.ПредставлениеПФ(Ложь, Истина);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
	КомандаПечати.Порядок = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = Обработки.ПечатьАктПередачиПрав.ИдентификаторПечатнойФормы();
	КомандаПечати.Представление = Обработки.ПечатьАктПередачиПрав.ПредставлениеПФ();
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 7;
	
	ВозможныеВарианты = Обработки.ПечатьТОРГ12.МатрицаВозможныхВариантов();
	Для каждого СтрокаТаблицы Из ВозможныеВарианты Цикл
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = Обработки.ПечатьТОРГ12.ИдентификаторПечатнойФормы(СтрокаТаблицы.ВключаяУслуги, СтрокаТаблицы.ИспользоватьФаксимиле);
		КомандаПечати.Представление = Обработки.ПечатьТОРГ12.ПредставлениеПФ(СтрокаТаблицы.ВключаяУслуги, СтрокаТаблицы.ИспользоватьФаксимиле);
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Порядок = 10;
		
		Если СтрокаТаблицы.ИспользоватьФаксимиле Тогда
			
			КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
			КомандаПечати.Порядок = КомандаПечати.Порядок + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М15";
	КомандаПечати.Представление = НСтр("ru = 'М15 (Накладная на отпуск материалов)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 17;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТТН";
	КомандаПечати.Представление = НСтр("ru = '1-Т (Товарно-транспортная накладная)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 20;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьТН";
	КомандаПечати.Идентификатор = "ТН";
	КомандаПечати.Представление = Обработки.ПечатьТТН.ПредставлениеПФ();
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 23;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = Обработки.ПечатьМХ1.ИдентификаторПечатнойФормы();
	КомандаПечати.Представление = Обработки.ПечатьМХ1.ПредставлениеПФ();
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ФункциональныеОпции = "ПередачаЗапасовНаОтветХранение";
	КомандаПечати.Порядок = 26;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = Обработки.ПечатьМХ3.ИдентификаторПечатнойФормы();
	КомандаПечати.Представление = Обработки.ПечатьМХ3.ПредставлениеПФ();
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ФункциональныеОпции = "ПриемЗапасовНаОтветХранение";
	КомандаПечати.Порядок = 26;
	
	
	ЗначениеВидимости = Новый Массив;
	ЗначениеВидимости.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю);
	ЗначениеВидимости.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику);
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Обработка.ПечатьСчетФактура.СчетФактура";
	КомандаПечати.Представление = Обработки.ПечатьСчетФактура.ПредставлениеПФ(Ложь, Ложь);
	КомандаПечати.ФункциональныеОпции = "ПередачаТоваровНаКомиссию,ПриемТоваровНаКомиссию,ИспользуетсяОСНО,ИспользоватьСчетаФактурыИсходящие";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "ВидОперации", ЗначениеВидимости, ВидСравнения.ВСписке);
	КомандаПечати.Порядок = 29;
	
	ЗначениеВидимостиУПД = Новый Массив;
	ЗначениеВидимостиУПД.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю);
	ЗначениеВидимостиУПД.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику);
	ЗначениеВидимостиУПД.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию);
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Обработка.ПечатьСчетФактура.УниверсальныйПередаточныйДокумент";
	КомандаПечати.Представление = Обработки.ПечатьСчетФактура.ПредставлениеПФ(Истина, Ложь);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "ВидОперации", ЗначениеВидимостиУПД, ВидСравнения.ВСписке);
	КомандаПечати.Порядок = 32;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Обработка.ПечатьСчетФактура.УниверсальныйПередаточныйДокументФаксимиле";
	КомандаПечати.Представление = Обработки.ПечатьСчетФактура.ПредставлениеПФ(Истина, Истина);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "ВидОперации", ЗначениеВидимости, ВидСравнения.ВСписке);
	КомандаПечати.Порядок = 33;
	
	ВозможныеВарианты = Обработки.ПечатьНакладная.МатрицаВозможныхВариантов();
	Для каждого СтрокаТаблицы Из ВозможныеВарианты Цикл
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = Обработки.ПечатьНакладная.ИдентификаторПечатнойФормы(СтрокаТаблицы.ВключаяУслуги, СтрокаТаблицы.ИспользоватьФаксимиле);
		КомандаПечати.Представление = Обработки.ПечатьНакладная.ПредставлениеПФ(СтрокаТаблицы.ВключаяУслуги, СтрокаТаблицы.ИспользоватьФаксимиле);
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Порядок = 35;
		
		Если СтрокаТаблицы.ИспользоватьФаксимиле Тогда
			
			КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
			КомандаПечати.Порядок = КомандаПечати.Порядок + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = Обработки.ПечатьСчетНаОплату.ИдентификаторПечатнойФормы(Ложь, Ложь);
	КомандаПечати.Представление = Обработки.ПечатьСчетНаОплату.ПредставлениеПФ(Ложь, Ложь);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПредложитьЗаполнитьРеквизитыОрганизации";
	КомандаПечати.Порядок = 38;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = Обработки.ПечатьСчетНаОплату.ИдентификаторПечатнойФормы(Ложь, Истина);
	КомандаПечати.Представление = Обработки.ПечатьСчетНаОплату.ПредставлениеПФ(Ложь, Истина);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПредложитьЗаполнитьРеквизитыОрганизации";
	КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
	КомандаПечати.Порядок = 38;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТоварныйЧек";
	КомандаПечати.Представление = НСтр("ru = 'Товарный чек'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 41;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ГарантийныйТалон";
	КомандаПечати.Представление = НСтр("ru = 'Гарантийный талон'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьСерииНоменклатуры";
	КомандаПечати.Порядок = 44;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "БланкТоварногоНаполнения";
	КомандаПечати.Представление = Обработки.ПечатьБланкТоварногоНаполнения.ПредставлениеПФ();
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 47;
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПечатьЭтикетокИЦенников)
		И ПолучитьФункциональнуюОпцию("ПечатьЭтикетокИЦенников")
		И НЕ УправлениеДоступомУНФ.ЕстьПрофильРабочееМестоКассира() Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьЭтикетокИЦенниковИзДокументов";
		КомандаПечати.Идентификатор = "ПечатьЭтикетокИзРасходнойНакладной";
		КомандаПечати.Представление = НСтр("ru = 'Печать этикеток'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Порядок = 48;
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьЭтикетокИЦенниковИзДокументов";
		КомандаПечати.Идентификатор = "ПечатьЦенниковИзРасходнойНакладной";
		КомандаПечати.Представление = НСтр("ru = 'Печать ценников'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Порядок = 49;
		
	КонецЕсли;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Конверт";
	КомандаПечати.Представление = НСтр("ru = 'Конверт'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьКонверта";
	КомандаПечати.Порядок = 50;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиТоварныйЧек(СтрокаТабличнойЧасти, ДанныеПечати, ПараметрыНоменклатуры, СтруктураИтогов, Шапка)
	
	ДанныеПечати.Очистить();
	
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		НомерСтроки = 0;
	Иначе
		СтруктураИтогов.НомерСтроки = СтруктураИтогов.НомерСтроки+1;
		НомерСтроки = СтруктураИтогов.НомерСтроки;
	КонецЕсли;
	ДанныеПечати.Вставить("НомерСтроки", НомерСтроки);
	
	ПараметрыНоменклатуры.Очистить();
	ПараметрыНоменклатуры.Вставить("Содержание", СтрокаТабличнойЧасти.Содержание);
	ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.Запас);
	ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
	ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
	ПараметрыНоменклатуры.Вставить("ПредставлениеСерииНоменклатуры", СерииНоменклатурыУНФ.СтрокаСерииНоменклатуры(Шапка.ТаблицаСерииНоменклатуры, СтрокаТабличнойЧасти.КлючСвязи));
	// Наборы
	ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора);
	
	ДанныеПечати.Вставить("Запас", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
	ДанныеПечати.Вставить("ПредставлениеКодаНоменклатуры", ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(СтрокаТабличнойЧасти));
	
	ДанныеПечати.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
	ДанныеПечати.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ДанныеПечати.Вставить("Цена", СтрокаТабличнойЧасти.Цена);
	
	Скидка = 0;
	Если СтруктураИтогов.ЕстьСкидки Тогда
		
		Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
			
			Скидка = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			ДанныеПечати.Вставить("Скидка", Скидка);
			ДанныеПечати.Вставить("СуммаБезСкидки", Скидка);
			
		ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0 И СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0 Тогда
			
			ДанныеПечати.Вставить("Скидка", 0);
			ДанныеПечати.Вставить("СуммаБезСкидки", СтрокаТабличнойЧасти.Сумма);
			
		Иначе
			
			Скидка = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.Сумма; // АвтоматическиеСкидки
			ДанныеПечати.Вставить("Скидка", Скидка);
			ДанныеПечати.Вставить("СуммаБезСкидки", СтрокаТабличнойЧасти.Сумма + Скидка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеПечати.Вставить("Сумма", СтрокаТабличнойЧасти.Сумма);
	
	Если НЕ СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтруктураИтогов.Сумма			= СтруктураИтогов.Сумма			+ СтрокаТабличнойЧасти.Сумма;
		СтруктураИтогов.СуммаНДС		= СтруктураИтогов.СуммаНДС		+ СтрокаТабличнойЧасти.СуммаНДС;
		СтруктураИтогов.Всего			= СтруктураИтогов.Всего			+ СтрокаТабличнойЧасти.Всего;
		СтруктураИтогов.ВсегоСкидок		= СтруктураИтогов.ВсегоСкидок	+ Скидка;
		СтруктураИтогов.ВсегоБезСкидок	= СтруктураИтогов.Сумма			+ СтруктураИтогов.ВсегоСкидок;
		СтруктураИтогов.Количество		= СтруктураИтогов.Количество	+ 1;
	КонецЕсли; 
			
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодарочнымиСертификатами

Процедура СформироватьТаблицаПодарочныеСертификаты(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		
		Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВременнаяТаблицаЗапасы.Период КАК Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
			|	ВременнаяТаблицаЗапасы.Номенклатура КАК ПодарочныйСертификат,
			|	СерииНоменклатуры.Серия КАК НомерСертификата,
			|	ВременнаяТаблицаЗапасы.НоминалСертификата КАК Сумма
			|ИЗ
			|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерииНоменклатуры КАК СерииНоменклатуры
			|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерииНоменклатуры.КлючСвязи
			|ГДЕ
			|	ВременнаяТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаДокумента.Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
			|	ТаблицаДокумента.Документ,
			|	ТаблицаДокумента.НомерСертификата,
			|	ВЫБОР
			|		КОГДА ТаблицаДокумента.ЧастичноеПогашение
			|			ТОГДА ТаблицаДокумента.СуммаСертификата
			|		КОГДА ТаблицаДокумента.ИспользоватьСерииНоменклатуры
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(ВременнаяТаблицаОстаткиСертификатов.СуммаОстаток, 0) > ТаблицаДокумента.СуммаСертификата
			|						ТОГДА ЕСТЬNULL(ВременнаяТаблицаОстаткиСертификатов.СуммаОстаток, 0)
			|					ИНАЧЕ ТаблицаДокумента.СуммаСертификата
			|				КОНЕЦ
			|		ИНАЧЕ ТаблицаДокумента.Номинал
			|	КОНЕЦ
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиСертификатов КАК ВременнаяТаблицаОстаткиСертификатов
			|		ПО ТаблицаДокумента.Документ = ВременнаяТаблицаОстаткиСертификатов.ПодарочныйСертификат
			|			И ТаблицаДокумента.НомерСертификата = ВременнаяТаблицаОстаткиСертификатов.НомерСертификата
			|ГДЕ
			|	ТаблицаДокумента.ОплатаСертификатом";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВременнаяТаблицаЗапасы.Период КАК Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
			|	ВременнаяТаблицаЗапасы.Номенклатура КАК ПодарочныйСертификат,
			|	ВременнаяТаблицаЗапасы.НоминалСертификата КАК Сумма
			|ИЗ
			|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
			|ГДЕ
			|	ВременнаяТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаДокумента.Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
			|	ТаблицаДокумента.Документ,
			|	ТаблицаДокумента.Номинал
			|ИЗ
			|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.ОплатаСертификатом";
			
		КонецЕсли;
		
		Результат = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Результат = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПодарочныеСертификаты", Результат);
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру ОплатаПодарочнымиСертификатами.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаПодарочнымиСертификатами(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		
		Запрос.Текст = РаботаСПодарочнымиСертификатами.СформироватьТекстЗапросаПоОплатеПодарочнымиСертификатами(Истина);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Результат = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаПодарочнымиСертификатами", Результат);
	
КонецПроцедуры // СформироватьТаблицаОплатаПодарочнымиСертификатами()

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	ФорматТолькоДата = "ДЛФ=D";
	ДополнительныеПараметры.ФорматыРеквизитов.Вставить("ДоговорДатаДоговора", ФорматТолькоДата);
	ДополнительныеПараметры.ФорматыРеквизитов.Вставить("ДоговорСрокДействия", ФорматТолькоДата);
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
// @skip-warning
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
// @skip-warning
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
// @skip-warning
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли