#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Перем КэшХарактеристикиИПартии;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект,
		"ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	
	КэшЗначений.Вставить("ИспользоватьМинимальныеЦены", ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются() 
			И НЕ Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику);
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	
	УстановитьУсловноеОформлениеФормы();
	
	// Прослеживаемость
	Если КэшЗначений = Неопределено Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	Если Объект.Контрагент.Пустая() Тогда
		КэшЗначений.Вставить("РеализацияВЕАЭС", Ложь);
	Иначе
		КэшЗначений.Вставить("РеализацияВЕАЭС", Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	КонецЕсли;
	РеализацияВЕАЭС = КэшЗначений.РеализацияВЕАЭС;
	Если Объект.Ссылка.Пустая() Тогда
		
		ОбновитьПризнакПрослеживаемости = (ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЗаказПокупателя"))
		И ПрослеживаемаяОперация(Объект.ВидОперации);
		
		Если ОбновитьПризнакПрослеживаемости Тогда
			ОбновитьПризнакПрослеживаемости();
		КонецЕсли;
		
		ОбновитьОтображениеПрослеживаемости();
		
	КонецЕсли;
	// Конец Прослеживаемость

	РазрешеноРедактированиеДокумента = ПравоДоступа("Редактирование", Метаданные.Документы.РасходнаяНакладная);
	
	// Запомним предопределённые значения
	ВариантЗаполненияРасшифровкиПросмотр = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Просмотр;
	ВариантЗаполненияРасшифровкиВручную = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Вручную;
	
	СпособыЗачетаВручную = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	СпособыЗачетаАвто = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
	
	ИспользоватьПроекты = ПолучитьФункциональнуюОпцию("УчетПоПроектам");
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	ЭтотОбъект.ОснованиеСоздания = Параметры.Основание;
	ДатаПриСозданииНаСервере = Объект.Дата;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	Если ЗначениеЗаполнено(Договор) Тогда
		ВалютаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВалютаРасчетов", Истина);
		СпособЗаполненияСтавкиНДС = Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(
			Договор);
	КонецЕсли;
	Заказ = Объект.Заказ;
	НациональнаяВалюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Параметры.Свойство("ВидОперацииВозврат") Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Параметры.Основание) И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(Истина);
		КонецЕсли;
		Если (НЕ ЗначениеЗаполнено(Объект.Заказ) И Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание)=Тип("ДокументСсылка.ПеремещениеЗапасов"))
			Или ТипЗнч(Параметры.Основание)=Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС")
		Тогда
			Для каждого строкаЗапасы Из Объект.Запасы Цикл
				НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(Объект, "Запасы", строкаЗапасы);
			КонецЦикла;
		КонецЕсли;
		// ГИСМ/ВЕТИС
		Если Не ЗначениеЗаполнено(Объект.СпособПродажиГИСМ) Тогда
			Объект.СпособПродажиГИСМ = "опт";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,?(ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница),Объект.СтруктурнаяЕдиница, Неопределено),Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СпециальныйНалоговыйРежим) Тогда
		Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,?(ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница),Объект.СтруктурнаяЕдиница, Неопределено),Объект.Дата);
	КонецЕсли;
	
	ЗаполнитьСписокВыбораВидОперации();
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ПоляНадписи = Новый Структура;
	ПоляНадписи.Вставить("ВидЦен", Объект.ВидЦен);
	ПоляНадписи.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
	ПоляНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПоляНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	ПоляНадписи.Вставить("Курс", Объект.Курс);
	ПоляНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
	ПоляНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	ПоляНадписи.Вставить("УчетВалютныхОпераций", УчетВалютныхОпераций);
	ПоляНадписи.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПоляНадписи.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
	ПоляНадписи.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	ПоляНадписи.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(ПоляНадписи);
	
	// ГТД и РНПТ.
	ИменаТЧИПолей = ГрузовыеТаможенныеДекларацииСервер.ИменаТЧИПолейДляТаблицыЗапасы_БазовыеПоляСПрослеживаемостью();
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервереДляДокументаСПрослеживаемостью(ЭтаФорма, ИменаТЧИПолей, КэшЗначений);
	// Конец ГТД и РНПТ.
	
	КэшЗначений.Вставить("ВерсияПодчиненногоСчетФактуры", Неопределено);
	КэшЗначений.Вставить("МодифицированностьФормы", Ложь);
	КэшЗначений.Вставить("ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати",
		Константы.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати.Получить());
	КэшЗначений.Вставить("Заказы", Новый Соответствие);
	ЗаполнитьСоответствиеЗаказов();
	ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	
	// Наборы
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЭтоПродажа(Объект.ВидОперации) Тогда
		Если Параметры.ЗначенияЗаполнения.Свойство("Запасы") Тогда
			Для каждого ДанныеСтроки Из Параметры.ЗначенияЗаполнения.Запасы Цикл
				Если ДанныеСтроки.Свойство("ЭтоНабор") И ДанныеСтроки.ЭтоНабор Тогда
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
					Если ДанныеСтроки.Свойство("Характеристика") И ЗначениеЗаполнено(ДанныеСтроки.Характеристика) Тогда
						СтруктураОтбора.Вставить("Характеристика", ДанныеСтроки.Характеристика);
					КонецЕсли;
					Строки = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
					Для каждого СтрокаНабора Из Строки Цикл
						СтруктураДанные = Новый Структура;
						СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
						СтруктураДанные.Вставить("Организация", Объект.Организация);
						СтруктураДанные.Вставить("Номенклатура", СтрокаНабора.Номенклатура);
						СтруктураДанные.Вставить("Характеристика", СтрокаНабора.Характеристика);
						СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
						Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
							СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
							СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
							СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
							СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
							СтруктураДанные.Вставить("Коэффициент", 1);
							СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
						КонецЕсли;
						// ДисконтныеКарты
						СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
						СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
						// Конец ДисконтныеКарты
						СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
						Если НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
							ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаНабора, СтруктураДанные);
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
		ОбновитьПризнакиНабора(Объект.Запасы);
	КонецЕсли;
	// Конец Наборы
	
	// НДС 20% Переходный период
	ПересчитатьНДСС18На20 = Ложь;
	Если ЗначениеЗаполнено(Параметры.Основание)
		И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
		И Год(Параметры.Основание.Дата) < 2019 Тогда
		СтавкаНДС18 = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая, Дата('20180101'));
		СтавкаНДС18Расчетная = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.ОбщаяРасчетная, Дата('20180101'));
		Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
			Если СтрокаЗапасы.СтавкаНДС = СтавкаНДС18 Тогда
				ПересчитатьНДСС18На20 = Истина;
				Прервать;
			КонецЕсли;
			Если СтрокаЗапасы.СтавкаНДС = СтавкаНДС18Расчетная Тогда
				ПересчитатьНДСС18На20 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Конец  НДС 20% Переходный период
	
	// Ячейки
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КэшЗначений.Вставить("УчетПоЯчейкам", ПолучитьФункциональнуюОпцию("УчетПоЯчейкам"));
		ОбновитьДоступностьЯчеек();
		ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	КонецЕсли; 
	// Конец Ячейки
	
	УстановитьВидимостьИДоступность();
	
	// Установить надписи счет-фактура и основание
	СчетФактураСсылка = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Ложь);
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(СчетФактураСсылка);
	КэшЗначений.Вставить("СчетФактураСсылка", ?(ТипЗнч(СчетФактураСсылка) = Тип("Структура"), СчетФактураСсылка.Ссылка, Неопределено));
	
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	ЗаполнитьСписокДокументОснование();
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСклад");
	ОсновнойСклад = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	
	// Установка видимости договора.
	УстановитьВидимостьДоговора();
	
	// Настройка подразделения
	Если НЕ ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям") Тогда
		Элементы.ДополнительноПраваяКолонка.Объединенная = Истина;
	КонецЕсли;
	
	// ЭДО
	УстановитьВидЭД();
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец ЭДО
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий();
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер(), ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	ЗапасыИзменениеСтрокДействиеПриОткрытии = ЗапасыИзменениеСтрокДействие;
	УстановитьПометку(Истина);
	// Конец ГрупповоеИзменениеСтрок
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// АвтоматическиеСкидки.
	АвтоматическиеСкидкиПриСозданииНаСервере();
	ОбновитьКартинкуДисконтнойКарты();
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.РасходнаяНакладная.ТабличныеЧасти.Запасы, НастройкиЗагрузкиДанных, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюПечатьФаксимиле);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	УстановитьВидимостьПечатиЧека();
	Если ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Справочники.Контрагенты.ДанныеКИКонтрагентаДляВыбораНаФорме(Объект.Контрагент, Элементы, ПоляКИДляОтправкиЧека());
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Ручные скидки
	//СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	// Конец Ручные скидки
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.ВидОперации.Видимость = Ложь;
		Элементы.ФормаОбщаяКомандаНапомнить.Видимость = Ложь;
		Элементы.ГруппаГлобальныеКоманды.Видимость = Ложь;
		Элементы.ШапкаТабличнаяЧасть.Видимость = Ложь;
		Элементы.ПоказатьВЖурналеКонтрагентов.Видимость = Ложь;
		Элементы.ГруппаПредоплата.Видимость = Ложь;
		Элементы.ГруппаДополнительно.Видимость = Ложь;
		Элементы.ИтогСуммаНДС.Видимость = Ложь;
		Элементы.ГруппаСсылки.Видимость = Ложь;
		Элементы.ГруппаЦеныИВалюта.Видимость = Ложь;
		Элементы.ЗапасыГруппаКопированиеСтрок.Видимость = Ложь;
		Элементы.ЗапасыПодбор.Видимость = Ложь;
		Элементы.ЗагрузкаДанныхИзВнешнегоИсточника.Видимость = Ложь;
		Элементы.ЗапасыИзменитьСтроки.Видимость = Ложь;
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаПровести.Видимость = Ложь;
		Элементы.ФормаОтменаПроведения.Видимость = Ложь;
		Элементы.ФормаПоказатьВСписке.Видимость = Ложь;
		Элементы.ФормаКоманднаяПанельКомандыЭДО.Видимость = Ложь;
		Элементы.ФормаПровестиИЗакрыть.Заголовок = НСтр("ru = 'Готово'");
	КонецЕсли;
	// Конец МобильноеПриложение
	
	//Доставка
	ИспользоватьСервис1СДоставка = ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СДоставка");
	ИспользоватьСервис1СКурьер = ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СКурьер");
	ОбновитьДанныеПоДоставкеИзСервиса();
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияВЕТИС
	ФОВестиУчетПодконтрольныхТоваровВЕТИС = ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС");
	Если ФОВестиУчетПодконтрольныхТоваровВЕТИС Тогда
		ИнтеграцияИС.ПриСозданииНаСервереВФормеДокументаОснования(
			ЭтотОбъект,
			Объект,
			ИнтеграцияИС.ПараметрыИнтеграцииВФорме("ВетИС",ИнтеграцияИС.ИмяЭлементаДляРазмещения()));
	КонецЕсли;
	// Конец ИнтеграцияВЕТИС
	
	// ИнтеграцияГосИС
	ФОВестиУчетМаркируемойПродукцииИСМП = ИнтеграцияИСМПВызовСервера.ВестиУчетМаркируемойПродукции();
	СобытияФормИС.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	ШтрихкодированиеИС.ИнициализироватьКэшМаркируемойПродукции(ЭтаФорма);
	// Конец ИнтеграцияГосИС
	
	ОпределитьВидимостьИУстановитьНастройкиУчетаВНалогообложении();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПрочитатьВесИОбъемЕдиницыТовара();
	КонецЕсли;
	
	Если Параметры.Свойство("Страница")
		И НЕ ПустаяСтрока(Параметры.Страница)
		И НЕ Элементы.Найти(Параметры.Страница) = Неопределено Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[Параметры.Страница];
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая()
		Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина);
	КонецЕсли;
	
	// ПодарочныеСертификаты
	КэшЗначений.Вставить("ВыводитьСоветОплатаСертификатомВВалюте", УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(),
		"ВыводитьСоветОплатаСертификатомВВалюте",
		Истина));
	
	ИсходноеОписаниеТипов = РеквизитФормыВЗначение("Объект").Метаданные().ТабличныеЧасти.Предоплата.Реквизиты.Документ.Тип;
	ОписаниеТиповБезНоменклатуры = Новый ОписаниеТипов(ИсходноеОписаниеТипов,, "СправочникСсылка.Номенклатура");
	Элементы.Предоплата.ПодчиненныеЭлементы.ПредоплатаГруппаДокумент.ПодчиненныеЭлементы.ПредоплатаДокумент.ОграничениеТипа = ОписаниеТиповБезНоменклатуры;
	//Конец ПодарочныеСертификаты
	
	// Взаиморасчеты
	ВзаиморасчетыПриСозданииНаСервере();
	// Конец Взаиморасчеты
	
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы, "Запасы");
	
	РезервированиеЗапасов	= ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	РазрешитьСкладыВТабличныхЧастях = ПолучитьФункциональнуюОпцию("РазрешитьСкладыВТабличныхЧастях");
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФ.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	СтатистикаИспользованияФормКлиент.ПроверитьЗаписатьСтатистикуКоманды(
		"СоздатьНаОсновании.РасходнаяНакладная",
		ЭтотОбъект.ВладелецФормы,
		ЭтотОбъект.ОснованиеСоздания
	);
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений();
	// Конец ГрупповоеИзменениеСтрок
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	УправлениеНебольшойФирмойКлиент.ЗаполнитьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	// Конец ПодключаемоеОборудование
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
	ОбновитьПодвалФормы();
	
	// НДС 20% Переходный период
	Если ПересчитатьНДСС18На20 Тогда
		ОповещениеНДСС18На20 = Новый ОписаниеОповещения("ВыполнитьПересчетНДСС18На20", ЭтаФорма);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Пересчитать(сумма не изменяется)'"));
		Если Объект.СуммаВключаетНДС Тогда
			Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Пересчитать (сумма увеличится на 2% НДС)'"));
		КонецЕсли;
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		ТекстВопроса = НСтр("ru = 'В документе указана ставка 18%. Пересчитать автоматически на 20%?'");
		ПоказатьВопрос(ОповещениеНДСС18На20, ТекстВопроса, Кнопки);
	КонецЕсли;
	// Конец  НДС 20% Переходный период
	
	Элементы.ЗапасыЯчейкаДляРежимаОстатки.Видимость = Ложь;
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	УстановитьДоступностьПечатиЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	// АвтоматическиеСкидки
	СкидкиНаценкиКлиент.ПриЗакрытииФормы(Объект.Ссылка, ИспользоватьАвтоматическиеСкидки, СкидкиРассчитаныПередЗаписью);
	// Конец АвтоматическиеСкидки
	
	СтатистикаИспользованияФормКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПечатьТТН.Форма.ДанныеПечати" Тогда
		
		Для каждого ЗначенияРеквизита Из ВыбранноеЗначение Цикл
			
			Если ЗначенияРеквизита.Ключ = "БанковскийСчетОрганизации" Тогда
				
				Объект.БанковскийСчет = ЗначенияРеквизита.Значение;
				
			Иначе
				
				Объект[ЗначенияРеквизита.Ключ] = ЗначенияРеквизита.Значение;
				
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЦикла;
		
	// Прослеживаемость
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		
		ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбора" Тогда
		
		ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение);
		
	// Конец Прослеживаемость
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ДисконтныеКарты
	Если СчитанаДисконтнаяКарта Тогда
		СчитанаДисконтнаяКарта = Ложь;
	КонецЕсли;
	// Конец ДисконтныеКарты
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьСписокЗаказовНаДоставку" Тогда
		ОбновитьДанныеПоДоставкеИзСервиса();
	КонецЕсли;

	Если ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" Тогда
		
		ПредставлениеЗаголовка = РаботаСФормойДокументаКлиент.ПредставлениеЗаголовкаПодчиненногоСчетаФактуры(
			Объект.Ссылка, Источник, Параметр, КэшЗначений);
		Если ПредставлениеЗаголовка <> Неопределено Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетФактураНадпись", "Заголовок",
				ПредставлениеЗаголовка);

		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр) Тогда
		
		Если Объект.Контрагент = Параметр Тогда
			УстановитьВидимостьДоговора();
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию") Тогда
			Объект.Контрагент = Параметр;
			КонтрагентПриИзменении(Элементы.Контрагент);
			УстановитьВидимостьДоговора();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище	= Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", Истина, Истина);
		
		РассчитатьОбъемИВесВДокументе();
	
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИзменилосьКоличество = ПолучитьСерииНоменклатурыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Если ИзменилосьКоличество Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти();
		КонецЕсли; 
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
	КонецЕсли;
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		ОбновитьСтатусГИСМ();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		ОбновитьСтатусГИСМ();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияГосИС
	Если ФОВестиУчетПодконтрольныхТоваровВЕТИС Тогда
		ИнтеграцияИСКлиент.ОбработкаОповещенияВФормеДокументаОснования(
			ЭтотОбъект,
			Объект,
			ИмяСобытия,
			Параметр,
			Источник);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшированныеЗначения",    Неопределено);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка",    Истина);
	ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов", Ложь);
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	// Конец ИнтеграцияГосИС
	 
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ЭДО
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ОбновлениеФормыРасходнаяНакладная" И ЭтаФорма.УникальныйИдентификатор = Источник Тогда
		
		СтруктураДанныеНоменклатуры = Новый Структура();
		
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура",);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика",);
		СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", );
		СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", );
		
		СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
		// ДисконтныеКарты
		СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
		СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
		// Конец ДисконтныеКарты
		
		Для Каждого ТаблицаДанных Из Параметр Цикл
			
			Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных.Значение Цикл
				НоваяСтрока = Объект[ТаблицаДанных.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыДанных);
				
				Если НоваяСтрока.ЭтоНабор Тогда
					
					// Наборы
					СтруктураДанныеНоменклатуры.Номенклатура = СтрокаТаблицыДанных.Номенклатура;
					СтруктураДанныеНоменклатуры.Характеристика = СтрокаТаблицыДанных.Характеристика;
					СтруктураДанныеНоменклатуры.ТипНоменклатуры = СтрокаТаблицыДанных.ТипНоменклатуры;
					СтруктураДанныеНоменклатуры.ЕдиницаИзмерения = СтрокаТаблицыДанных.ЕдиницаИзмерения;
					
					ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

					СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
					
					ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, СтруктураДанные);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		РассчитатьОбъемИВесВДокументе();
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		
		ОбновитьДоступностьЯчеек();
		ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
		КонецЕсли;
		
		СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
		
	КонецЕсли;
	
	// Наборы
	Если ЭтоПродажа(Объект.ВидОперации) И НаборыКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ОбновитьСоставНабора(Параметр.НоменклатураНабора, Параметр.ХарактеристикаНабора, Параметр.Количество, 
			Параметр.Цена, Параметр.СоставНабора);
	КонецЕсли; 
	// Конец Наборы
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовУНФКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия,ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Прослеживаемость
	Если КэшЗначений = Неопределено Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("РеализацияВЕАЭС", Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	РеализацияВЕАЭС = КэшЗначений.РеализацияВЕАЭС;
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияВЕТИС
	//++(
	//ФОВестиУчетПодконтрольныхТоваровВЕТИС = ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС");
	//Если ФОВестиУчетПодконтрольныхТоваровВЕТИС Тогда
	//	ПараметрыИнтеграции = ИнтеграцияИС.ПараметрыИнтеграцииВФорме();
	//	ИнтеграцияИС.ОбновитьПолеИнтеграцииВФормеДокументаОснования(ЭтотОбъект, Объект, ПараметрыИнтеграции);
	//КонецЕсли;
	//)++
	// Конец ИнтеграцияВЕТИС
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец ИнтеграцияГосИС
	
	ПрочитатьВесИОбъемЕдиницыТовара();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Наборы
	Если ЭтоПродажа(Объект.ВидОперации) Тогда
		ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
		ОбновитьПризнакиНабора(Объект.Запасы); 
	КонецЕсли; 
	// Конец Наборы
	
	// Ячейки
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("УчетПоЯчейкам", ПолучитьФункциональнуюОпцию("УчетПоЯчейкам"));
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
	Если РежимОстаткиИРезервы Тогда
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧасти(Объект);
	КонецЕсли;
	
	// Обновим реквизиты формы
	ЭтотОбъект.Контрагент = Объект.Контрагент;
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец ЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП, Истина);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	КэшЗначений.МодифицированностьФормы = Модифицированность;
	
	// АвтоматическиеСкидки
	СкидкиРассчитаныПередЗаписью = Ложь;
	// Если документ проводится, проверим рассчитанность скидок.
	Если ИспользоватьАвтоматическиеСкидки И ЭтоПродажа(Объект.ВидОперации) Тогда
		
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			РассчитатьСкидкиНаценкиКлиент();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Рассчитаны автоматические скидки (наценки).'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			
			СкидкиРассчитаныПередЗаписью = Истина;
		Иначе
			Объект.СкидкиРассчитаны = Истина;
			ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Истина;
		КонецЕсли;
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения,
			Объект.Договор,
			Объект.Ссылка,
			Объект.Организация,
			Объект.Контрагент,
			Отказ,
			Объект.ВидОперации);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ?(Отказ, НСтр("ru = 'Документ не проведен. '") + ТекстСообщения, ТекстСообщения);
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
				Сообщение.Сообщить();
				Возврат;
			Иначе
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
		Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройкиЗачетаАвансов() = ПредопределенноеЗначение("Перечисление.ДаНет.Да")
			И ЭтоПродажа(ТекущийОбъект.ВидОперации)
			И ТекущийОбъект.Предоплата.Количество() = 0
			И ТекущийОбъект.СпособЗачетаПредоплаты = СпособыЗачетаВручную Тогда
			ЗаполнитьПредоплату(ТекущийОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТаблицаДокументовДляИзменения", ТаблицаДокументовДляИзменения);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
	СохранитьДанныеХарактеристикиПартииВКэш();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И РежимОстаткиИРезервы Тогда
		ПроверитьПоложениеСкладаПриПроведении(ТекущийОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// АвтоматическиеСкидки
	Если ОбновитьКартинкуАвтоСкидкиПослеЗаписи Тогда
		Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Ложь;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// ЭДО
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭДО
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ВерсияПодчиненногоСчетФактуры", КэшЗначений.ВерсияПодчиненногоСчетФактуры);
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");

	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаЗапасыИзменениеСтрок.Видимость Тогда
		УстановитьПометку(Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	// ЕГАИС
	УстановитьДоступностьЭлементовЕГАИС();
	// Конец ЕГАИС
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтаФорма);
	// Конец ИнтеграцияГосИС
	
	ПрочитатьВесИОбъемЕдиницыТовара();
	
	// Наборы
	Если ЭтоПродажа(Объект.ВидОперации) Тогда
		ОбновитьПризнакиНабора(Объект.Запасы);
	КонецЕсли; 
	// Конец Наборы
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	//НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ВосстановитьДанныеХарактеристикиПартииИзКэш();
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	АссистентУправления.ПослеЗаписиНаСервере(ТекущийОбъект);
	
	//Доставка
	Если ТипГрузоперевозки = 1
		ИЛИ ТипГрузоперевозки = 2 Тогда
		РегистрыСведений.ЗаказыСервисовДоставки.ПроверитьЗаписатьДанныеПоДоставке(ТекущийОбъект.Ссылка, 
			ТипГрузоперевозки, ИдентификаторЗаказаНаДоставку, ТрекНомерСервисаДоставки);
	КонецЕсли;
	
	// Взаиморасчеты
	ДатаПриСозданииНаСервере = Объект.Дата;
	
	Если ТекущийОбъект.Проведен ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ТаблицаДокументовДляИзменения.Очистить();
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПредоплата
		И Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаПросмотр Тогда
		ИстинаПослеЗаписиНаСервере = Истина;
		РасчетыРаботаСФормамиВызовСервера.ЗаполнитьТаблицуПросмотраНаСервере(ЭтотОбъект, ИстинаПослеЗаписиНаСервере);
	КонецЕсли;
	// Конец Взаиморасчеты
	
	Если РежимОстаткиИРезервы Тогда
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧасти(Объект);
	КонецЕсли;
	
	СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект);
	
	Если ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику Тогда
		Справочники.ДоговорыКонтрагентов.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(ТекущийОбъект.Договор,
			ТекущийОбъект.Ссылка, ТекущийОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
	КонецЕсли;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	ЗаполненЗаказ = Ложь;
	Для каждого СтрокаТЧ Из Объект.Запасы Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Заказ) Тогда
			Если ТипЗнч(СтрокаТЧ.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ЗаполненЗаказ = Истина;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Наборы
	Если ЭтоПродажа(Объект.ВидОперации) Тогда
		ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы); 
	КонецЕсли; 
	// Конец Наборы
	
	Если ЗаполненЗаказ Тогда
		Оповестить("Запись_РасходнаяНакладная", Объект.Ссылка);
	КонецЕсли;
	
	Если КэшЗначений.МодифицированностьФормы = Истина
		И КэшЗначений.ВерсияПодчиненногоСчетФактуры = "1.6.11" Тогда
		
		ТекстВопроса = НСтр("ru = 'В накладную были внесены изменения.
			|Требуется самостоятельно поправить подчиненный документ счет-фактура'");
		
		ПоказатьПредупреждение(, ТекстВопроса, 0, НСтр("ru ='Счет-фактура'"));
		
	КонецЕсли;
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
	Если ПараметрыЗаписи.Свойство("ПринудительноЗакрытьФорму") И ПараметрыЗаписи.ПринудительноЗакрытьФорму Тогда
		Закрыть();
	КонецЕсли;
	
	// Подарочные сертификаты
	Если Объект.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("НациональнаяВалюта")
		И ЕстьСертификаты() Тогда
		
		Если КэшЗначений.ВыводитьСоветОплатаСертификатомВВалюте Тогда
		
			ПараметрыСовета = Новый Структура;
			ПараметрыСовета.Вставить("Заголовок", НСтр("ru = 'Предупреждение'"));
			ПараметрыСовета.Вставить("ТекстСообщения", НСтр("ru = 'Оплата сертификатом будет возможна только в национальной валюте.'"));
			ПараметрыСовета.Вставить("ВидимостьБольшеНеПоказывать", Истина);
			ПараметрыСовета.Вставить("ИмяПользовательскойНастройки", "ВыводитьСоветОплатаСертификатомВВалюте");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыводаСовета", ЭтотОбъект, ПараметрыСовета);
			ОткрытьФорму("ОбщаяФорма.ФормаСообщения", ПараметрыСовета, ЭтаФорма, Истина, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		КонецЕсли;
		
	КонецЕсли;
	
	// Прослеживаемость
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	// Конец Прослеживаемость
	
	Если Объект.ВалютаДокумента <> НациональнаяВалюта И ЕстьКорректировкиПоДокументу(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru ='По документу создана корректировка, необходимо проверить ее актуальность'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает результаты открытия формы совета пользователю
//
Процедура ПослеВыводаСовета(РезультатЗакрытия, ПараметрыСовета) Экспорт
	
	Если ПараметрыСовета.ВидимостьБольшеНеПоказывать 
		И ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		КэшЗначений.Вставить(ПараметрыСовета.ИмяПользовательскойНастройки, РезультатЗакрытия.ЗначениеПользовательскойНастройки);
		ПерсональныеНастройкиВызовСервера.Установить(РезультатЗакрытия.ЗначениеПользовательскойНастройки,
			ПараметрыСовета.ИмяПользовательскойНастройки);
		
	КонецЕсли;
	
КонецПроцедуры // ПослеВыводаСовета()

&НаСервере
Функция ЕстьСертификаты()
	
	Возврат РаботаСПодарочнымиСертификатами.ЕстьСертификаты(Объект.Запасы.Выгрузить());
	
КонецФункции

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОткрытие(Элемент, СтандартнаяОбработка)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "Открытие");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
			ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные);
		КонецЕсли;	
		
		// Сформируем надпись цены и валюты.
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.СпециальныйНалоговыйРежим, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		// ДисконтныеКарты
		// В этой процедуре происходить вызов не модального окна вопроса.
		ПересчитатьПроцентСкидкиПриИзмененииДатыДокумента();
		// Конец ДисконтныеКарты
		
		ОпределитьВидимостьИУстановитьНастройкиУчетаВНалогообложении();
	КонецЕсли;
	
	// АвтоматическиеСкидки
	ДатаДокументаИзмененаВручную = Истина;
	СброситьФлагСкидкиРассчитаныКлиент("ДатаПриИзменении");
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Номер = "";
	
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении();
	
	Компания = СтруктураДанные.Компания;
	
	Объект.БанковскийСчет = СтруктураДанные.БанковскийСчет;
	Объект.ПодписьРуководителя = СтруктураДанные.ПодписьРуководителя;
	Объект.ПодписьГлавногоБухгалтера = СтруктураДанные.ПодписьГлавногоБухгалтера;
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	ОбработатьИзменениеДоговора();
	
	УстановитьНастройкиУчетаВНалогообложении();
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.СпециальныйНалоговыйРежим, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	ОбновитьПодвалФормы();
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Объект.Предоплата.Очистить();
	
	Если ЭтоПродажа(Объект.ВидОперации) Тогда
		Элементы.Подразделение.АвтоВыборНезаполненного = Истина;
		Элементы.Подразделение.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Подразделение.АвтоВыборНезаполненного = Ложь;
		Элементы.Подразделение.АвтоОтметкаНезаполненного = Ложь;
		ОтключитьОтметкуНезаполненного();
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
			Объект.ДокументОснование = Неопределено;
			Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	ПоляНадписи = Новый Структура;
	ПоляНадписи.Вставить("ВидЦен", Объект.ВидЦен);
	ПоляНадписи.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
	ПоляНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПоляНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	ПоляНадписи.Вставить("Курс", Объект.Курс);
	ПоляНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
	ПоляНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	ПоляНадписи.Вставить("УчетВалютныхОпераций", УчетВалютныхОпераций);
	ПоляНадписи.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПоляНадписи.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
	ПоляНадписи.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	ПоляНадписи.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(ПоляНадписи);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
	ВидОперацииПриИзмененииСервер();
	
	ОбработатьИзменениеДоговора();
	
	// Наборы
	Если НЕ ЭтоПродажа(Объект.ВидОперации) Тогда
		СтрокиКУдалению = Новый Массив;
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
				СтрокиКУдалению.Добавить(СтрокаТабличнойЧасти);
				Продолжить;
			КонецЕсли; 
			СтрокаТабличнойЧасти.НоменклатураНабора = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			СтрокаТабличнойЧасти.ХарактеристикаНабора = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			СтрокаТабличнойЧасти.ДоляСтоимости = 0;
			СтрокаТабличнойЧасти.КартинкаНабора = 0;
		КонецЦикла;
		Для каждого СтрокаТабличнойЧасти Из СтрокиКУдалению Цикл
			Объект.Запасы.Удалить(СтрокаТабличнойЧасти);
		КонецЦикла; 
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	// Прослеживаемость
	КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ВестиУчетПрослеживаемыхТоваров());
	// Конец Прослеживаемость
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	Иначе
		ТекстСообщения = "";
		Отказ = Ложь;
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения,
			Объект.Договор,
			Объект.Ссылка,
			Объект.Организация,
			Объект.Контрагент,
			Отказ,
			Объект.ВидОперации);
		
		Если ТекстСообщения <> "" Тогда
			Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьИДоступность(Истина);
	ОпределитьВидимостьИУстановитьНастройкиУчетаВНалогообложении(Истина);
	ЗаполнитьСписокДокументОснование();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику Тогда
		
		КэшЗначений.Вставить("ИспользоватьМинимальныеЦены", Ложь);
		
	Иначе
		
		КэшЗначений.Вставить("ИспользоватьМинимальныеЦены", ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются());
		
	КонецЕсли;
	
	// Взаиморасчеты
	Если Объект.ВидОперации <> ВидОперацииПомощника Тогда
		Объект.СпособЗачетаПредоплаты = СпособыЗачетаВручную;
		СпособЗачетаПредоплатыПриИзмененииНаСервере();
		ВариантЗаполненияРасшифровки = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Вручную;
		ВариантЗаполненияРасшифровкиПриИзмененииНаСервере();
	КонецЕсли;
	// Конец Взаиморасчеты
	
	УстановитьВидимостьПечатиЧека();
	// Прослеживаемость
	ОбновитьПризнакПрослеживаемости();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	СтруктурнаяЕдиницаПриИзмененииНаСервере();
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
	
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкаПриИзменении(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.Ячейка = Объект.Ячейка;
	КонецЦикла; 
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	ЕстьИзменения = ОбновитьРеквизитыВТЧ(Объект, "СтруктурнаяЕдиница");
	Если ЕстьИзменения И РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	КонтрагентВестиРасчетыПоЗаказамПередИзменением = КонтрагентВестиРасчетыПоЗаказам;
	Контрагент = Объект.Контрагент;
	ПустойКонтрагентПередИзменением = КонтрагентПередИзменением.Пустая();
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		Объект.АдресДоставки = "";
		Объект.БанковскийСчетКонтрагента = Неопределено;
		
		ВидимостьДоговораПередИзменением = Элементы.Договор.Видимость;
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Контрагент, Объект.Организация);
		
		// Прослеживаемость
		РеализацияВЕАЭС = СтруктураДанные.РеализацияВЕАЭС;
		КэшЗначений.Вставить("РеализацияВЕАЭС", РеализацияВЕАЭС);
		// Конец Прослеживаемость
		
		// Дисконтные карты
		СтруктураДанные.Вставить("ВызовИзПроцедурыПриИзмененииКонтрагента", Истина);
		СтруктураДанные.Вставить("ПустойКонтрагентПередИзменением", ПустойКонтрагентПередИзменением);
		// Конец Дисконтные карты.
		
		Объект.Договор = СтруктураДанные.Договор;
		Объект.КонтактноеЛицоПодписант = СтруктураДанные.КонтактноеЛицоПодписант;
		ДоговорПередИзменением = Договор;
		Договор = Объект.Договор;
		
		Если Объект.Договор <> ДоговорПередИзменением 
			И Объект.СпособЗачетаПредоплаты <> СтруктураДанные.СпособЗачетаПредоплаты Тогда
			Объект.СпособЗачетаПредоплаты = СтруктураДанные.СпособЗачетаПредоплаты;
			СпособЗачетаПредоплатыПриИзмененииНаСервере();
		КонецЕсли;
		
		Если Объект.Договор <> ДоговорПередИзменением Тогда
			СпособЗаполненияСтавкиНДСДоИзменения = СпособЗаполненияСтавкиНДС;
			СпособЗаполненияСтавкиНДС = СтруктураДанные.СпособЗаполненияСтавкиНДС;
			Если СпособЗаполненияСтавкиНДСДоИзменения <> СпособЗаполненияСтавкиНДС 
				И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику") Тогда 
				ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
			КонецЕсли;
		КонецЕсли;
		
		ПечатьДокументовУНФКлиент.ПриИзмененииДоговораКонтрагента(Объект.Договор, Объект.ОснованиеПечатиСсылка, Объект.ОснованиеПечати, КэшЗначений);
		
		Если Объект.Предоплата.Количество() > 0
			И Объект.Договор <> ДоговорПередИзменением Тогда
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("ИзменениеКонтрагента", Истина);
			ПараметрыДокумента.Вставить("ДанныеДоговора", СтруктураДанные);
			ПараметрыДокумента.Вставить("КонтрагентПередИзменением", КонтрагентПередИзменением);
			ПараметрыДокумента.Вставить("КонтрагентВестиРасчетыПоЗаказамПередИзменением", КонтрагентВестиРасчетыПоЗаказамПередИзменением);
			ПараметрыДокумента.Вставить("ВидимостьДоговораПередИзменением", ВидимостьДоговораПередИзменением);
			ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбОчисткеПредоплатыЗавершение", ЭтотОбъект, ПараметрыДокумента);
			ТекстВопроса = НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("Проект") Тогда
			Объект.Проект = СтруктураДанные.Проект;
		КонецЕсли;
	
		ОбработатьИзменениеУсловийДоговора(СтруктураДанные, ДоговорПередИзменением);
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищенный договор.
		ПривестиЗаказКТипу();
		
	КонецЕсли;
	
	ЗаполнитьСоответствиеЗаказов();
	ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	Заказ = Объект.Заказ;
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("КонтрагентПриИзменении");
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
	Если Объект.Предоплата.Количество() > 0
		И Объект.Заказ <> Заказ
		И ЭтоПродажа(Объект.ВидОперации) Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаказПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'"), Режим, 0);
		Возврат;
	КонецЕсли;
	
	ЗаказПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Предоплата.Очистить();
	Иначе
		Объект.Заказ = Заказ;
		ПривестиЗаказКТипу();
		Возврат;
	КонецЕсли;
	
	ЗаказПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПриИзмененииФрагмент()
	
	КэшЗначений.Заказы.Очистить();
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.Заказ = Объект.Заказ;
		СтрокаТабличнойЧасти.ЗаказПокупателя = ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка");
	КонецЦикла; 
	ЗаказыПокупателейИзКэша(Объект.Заказ);
	ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	Заказ = Объект.Заказ;
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("ЗаказПриИзменении");
	// Конец АвтоматическиеСкидки
	
	ОбновитьРеквизитыВТЧ(Объект, "ЗаказПокупателя"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		// Выбрать основание
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДокументОснование, Элементы.ДокументОснованиеНадпись);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ОбработкаНавигационнойСсылки");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СчетаФактурыУНФКлиент.ОткрытьСчетФактуру(ЭтотОбъект);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ОбработкаНавигационнойСсылки");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбранноеИмяФормы, Параметры) Экспорт
	
	Если ВыбранноеИмяФормы<>Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		Для каждого элОтбора Из ПараметрыВыбораДокументаОснования Цикл
			ИмяПоляОтбора = СтрЗаменить(элОтбора.Имя,"Отбор.","");
			СтруктураПараметровОтбора.Вставить(ИмяПоляОтбора, элОтбора.Значение);
		КонецЦикла;
		Если ВыбранноеИмяФормы.Значение = "Документ.ПриемИПередачаВРемонт.ФормаВыбора" Тогда
			СтруктураПараметровОтбора.Вставить("Отбор", Новый Структура("ВариантРемонта", ПредопределенноеЗначение("Перечисление.ВариантыРемонта.НашаМастерскаяМногоэтапныйРемонт")));
		КонецЕсли;
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбранноеИмяФормы.Значение, СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбранноеЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбранноеЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);		

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу(Объект.ДокументОснование);
		ОбновитьПодвалФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаПроцентПриИзменении(Элемент)
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
	ЗапасыИзменениеСтрокЗначение = СкидкаПроцент;
	Модифицированность = Истина;
	
	ОбработатьТаблицу();
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаСуммаПриИзменении(Элемент)
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
	ЗапасыИзменениеСтрокЗначение = СкидкаСумма;
	Модифицированность = Истина;
	
	СтруктураОповещения = Новый Структура;
	СтруктураОповещения.Вставить("СуммаДоРасчета", СкидкаСумма);

	ОбработатьТаблицу();
	
	СтруктураОповещения.Вставить("СуммаПослеРасчета", СкидкаСумма);
	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(СтруктураОповещения);

	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДоставкиПриИзменении(Элемент)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", Объект.НоменклатураДоставки);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	Объект.СтавкаНДСДоставки = СтруктураДанные.СтавкаНДС;
	ОбновитьСуммуНДСДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.СтоимостьДоставки = 0;
	Объект.СуммаНДСДоставки = 0;
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьДоставкиПриИзменении(Элемент)
	
	ОбновитьСуммуНДСДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСДоставкиПриИзменении(Элемент)
	
	ОбновитьСуммуНДСДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПродажиГИСМПриИзменении(Элемент)
	
	ИспользоватьГИСМ = Ложь;
	#Если НЕ МобильныйКлиент Тогда
		
		ИспользоватьГИСМ = Объект.ЕстьМаркируемаяПродукцияГИСМ;
		
	#КонецЕсли
	
	Если ИспользоватьГИСМ Тогда
		СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументОснование()
	
	СписокДокументОснование.Очистить();
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРемонты") Тогда
		СписокДокументОснование.Добавить("Документ.ПриемИПередачаВРемонт.ФормаВыбора", НСтр("ru = 'Прием в ремонт'"));
	КонецЕсли;
	Если ЭтоВозвратПоставщику(Объект.ВидОперации) ИЛИ ЭтоПереработка(Объект.ВидОперации) Тогда
		СписокДокументОснование.Добавить("Документ.ЗаказПоставщику.ФормаВыбора", НСтр("ru = 'Заказ поставщику'"));	
	КонецЕсли;
	Если ЭтоПродажа(Объект.ВидОперации) Или ЭтоВозврат(Объект.ВидОперации) Тогда
		СписокДокументОснование.Добавить("Документ.ПриходнаяНакладная.ФормаВыбора", НСтр("ru = 'Приходная накладная'"));
	КонецЕсли;
	СписокДокументОснование.Добавить("Документ.СчетНаОплату.ФормаВыбора", НСтр("ru = 'Счет на оплату'"));
	СписокДокументОснование.Добавить("Документ.ПеремещениеЗапасов.ФормаВыбора", НСтр("ru = 'Перемещение запасов'"));
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
		СписокДокументОснование.Добавить("Документ.СборкаЗапасов.ФормаВыбора", НСтр("ru = 'Производство'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
	
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Выбранная ГТД датирована более поздней датой, чем текущий документ'");
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Запасы",
				СтрокаТабличнойЧасти.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , КонтекстноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СервисДоставкиПриИзменении(Элемент)
	Модифицированность = Истина;
	НастроитьОтображениеДанныхПоДоставке();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента",  Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	// Конец ДисконтныеКарты
	
	Если СкладВШапке Тогда
		СтруктураДанные.Вставить("Склад", Объект.СтруктурнаяЕдиница);
		СтруктураДанные.Вставить("Ячейка", Объект.Ячейка);
	КонецЕсли;    
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);
	
	СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанные);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
	
	// Серии номенклатуры
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
			ИспользоватьСерииНоменклатурыОстатки);
	КонецЦикла;
	
	Если ЭтоПродажа(Объект.ВидОперации) И СтруктураДанные.ЭтоНабор И НЕ СтруктураДанные.ИспользоватьХарактеристики Тогда
		
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные);
		
		#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Элементы.Запасы.ЗакончитьРедактированиеСтроки(Истина);
		#КонецЕсли 
		
		ЗаполнитьПризнакиИспользованияХарактеристик();
		ОбновитьДоступностьЯчеек();
		ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
	
	Иначе
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
		СтрокаТабличнойЧасти.Количество = 1;
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.Содержание = "";
		
		СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
				СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
		
		//Партии
		СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		Если СтруктураДанные.ИспользоватьПартии Тогда
			Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
				СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
				СтруктураВыбораНоменклатуры.Партия = Неопределено;
			Иначе
				СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
			КонецЕсли;
		КонецЕсли;
		// Конец Партии
		
		// Наборы
		Если ЭтоПродажа(Объект.ВидОперации) Тогда
			СтрокаТабличнойЧасти.ЭтоНабор = СтруктураДанные.ЭтоНабор;
		КонецЕсли; 
		
		// Прослеживаемость
		Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров
			И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
			СтрокаТабличнойЧасти.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
		Иначе
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
			СтрокаТабличнойЧасти.КодТНВЭД = Неопределено;
		КонецЕсли;
		// Конец Прослеживаемость
		
		СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
		СтрокаТабличнойЧасти.НеобходимостьВводаСправкиНаАлкоголь = СтруктураДанные.ЭтоАлкогольнаяПродукция;
		
		СтрокаТабличнойЧасти.ВесЕдиницыТовара = СтруктураДанные.ВесЕдиницыТовара;
		СтрокаТабличнойЧасти.Вес = СтруктураДанные.ВесЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.ОбъемЕдиницыТовара = СтруктураДанные.ОбъемЕдиницыТовара;
		СтрокаТабличнойЧасти.Объем = СтруктураДанные.ОбъемЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
		
		Если Не (ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) И ПодборНоменклатурыИзСписка) Тогда
			ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(СтрокаТабличнойЧасти, Объект, СтруктураДанные);
			ЗапасыСтруктурнаяЕдиницаПриИзменении(Элемент);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	КонецЕсли;
	
	ПодборНоменклатурыИзСписка = Ложь;
	
	// Интеграция ГосИС
	Если ФОВестиУчетМаркируемойПродукцииИСМП Тогда
		ИнтеграцияИСМПУНФКлиент.ЗаполнитьСлужебныеРеквизитыИСМПВСтрокеТЧ(СтрокаТабличнойЧасти, СтруктураДанные);
	КонецЕсли;
	// Конец ИнтеграцияГосИС
	
	ОбновитьПодвалФормы();
	РассчитатьОбъемИВесВДокументе();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные, СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;
	
	// Прослеживаемость
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "РасходнаяНакладная", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
		КонецЕсли;
		
		Если РазрешитьСкладыВТабличныхЧастях Тогда
			Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти")
				Или Объект.СтруктурнаяЕдиница = ВыбранноеЗначение.Склад
				Или Не ЗначениеЗаполнено(ВыбранноеЗначение.Склад) Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				
				Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиница") Тогда
					СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ВыбранноеЗначение.Склад;
				КонецЕсли;
				
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
			ИначеЕсли ЗначениеЗаполнено(ВыбранноеЗначение.Склад) И Не Объект.СтруктурнаяЕдиница = ВыбранноеЗначение.Склад Тогда
				Режим = РежимДиалогаВопрос.ДаНет;
				ПараметрыОповещения = ВыбранноеЗначение;
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСкладВТЧ", ЭтотОбъект, ПараметрыОповещения);
				ПоказатьВопрос(Оповещение, НСтр("ru = 'Выбранный склад отличен от склада в шапке. Отобразить склад в табличной части?'"), Режим, 0);
				СтандартнаяОбработка = Ложь;
				Возврат;
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
				НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСкладВТЧ(Результат, ПараметрыОповещения) Экспорт
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
		ЗапасыНоменклатураПриИзменении(Неопределено);
		НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		Возврат;
	КонецЕсли;
	
	Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
	
	ОбновитьДанныеПослеПереключенияСкладШапка();
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыОповещения);
	
	Если СтрокаТабличнойЧасти.Свойство("СтруктурнаяЕдиница") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ПараметрыОповещения.Склад;
	КонецЕсли;
	
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	
	ЗапасыНоменклатураПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 	Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента",	 	Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена",			 	СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;  
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);
	
	Если Не РежимОстаткиИРезервы Тогда
		СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	Иначе
		СтруктураДанные.Вставить("Партия", СтрокаТабличнойЧасти.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", СтрокаТабличнойЧасти.ИспользоватьПартии);
		СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	КонецЕсли;   
	
	Если СтруктураДанные.Свойство("МинимальнаяЦена") 
		И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
		СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
	КонецЕсли;
		
	Если ЭтоПродажа(Объект.ВидОперации) И СтруктураДанные.ЭтоНабор Тогда
		
		// Наборы
		ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, СтрокаТабличнойЧасти, СтруктураДанные);
		
		// АвтоматическиеСкидки.
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
		// Конец АвтоматическиеСкидки
		
		Если РежимОстаткиИРезервы Тогда
			ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
		КонецЕсли
		
	Иначе
		
		СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
		
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.Содержание = "";
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		
		Если РежимОстаткиИРезервы Тогда
			
			ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные, СтрокаТабличнойЧасти.Номенклатура);
			
		КонецЕсли
	
	КонецЕсли;
	
	ОбновитьПодвалФормы();
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	// Прослеживаемость
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", 				Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",				СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия", 						СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",	СтрокаТабличнойЧасти.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", 			СтрокаТабличнойЧасти.ИспользоватьПартии);
	СтруктураДанные.Вставить("СтранаПроисхождения",			СтрокаТабличнойЧасти.СтранаПроисхождения);
	
	ЗапасыПартияПриИзмененииНаСервереБезКонтекста(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		ШаблонСодержания = ТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.ВесЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
	СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.ОбъемЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти);
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	ОбновитьПодвалФормы();
	РассчитатьОбъемИВесВДокументе();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти)
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ЗапасыРезервПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти, "ПриИзмененииРезерваПроверитьКоличество", Объект);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Цена = 0
		И СтрокаТабличнойЧасти.Вес = 0
		И СтрокаТабличнойЧасти.Объем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.Номенклатура, Неопределено, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		СтруктураДанные,
		ВесИОбъемЕдиницТоваров(СтрокаТабличнойЧасти.Номенклатура, ВыбранноеЗначение, Коэффициент));
	КонецЕсли;
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда  
		Если КэшЗначений.ИспользоватьМинимальныеЦены
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтрокаТабличнойЧасти.МинимальнаяЦена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		
		КонецЕсли;
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		СтрокаТабличнойЧасти.ВесЕдиницыТовара = СтруктураДанные.ВесЕдиницыТовара;
		СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.ВесЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.ОбъемЕдиницыТовара = СтруктураДанные.ОбъемЕдиницыТовара;
		СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.ОбъемЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьОбъемИВесВДокументе();
	
	// Прослеживаемость
	УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
	// Конец Прослеживаемость
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	
	// В процедуре РассчитатьСуммуВСтрокеТабличнойЧасти есть вызов серверной процедуры.
	// Из-за этого данный вызов нельзя выполнить в процедуре ЗапасыЕдиницаИзмеренияОбработкаВыбора.
	// Использование ЗапасыЕдиницаИзмеренияОбработкаВыбора более оптимально, т.к. позволяет отказаться от выполнения
	// большей части алгоритма, если единица измерения не поменялась.
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	ОбновитьПодвалФормы();
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		
		ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти)
		
	КонецЕсли;
	
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	ОбновитьПодвалФормы();
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

&НаКлиенте
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки, СброситьФлагСкидкиРассчитаны, РассчитатьЦену", Истина, Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
	
КонецПроцедуры // ЗапасыСтавкаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);	
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	СтруктураРеквизита = Новый Структура;
	СтруктураРеквизита.Вставить("Объект", "Объект");
	СтруктураРеквизита.Вставить("ТабЧасть", "Запасы");
	СтруктураРеквизита.Вставить("НомерСтроки", ТекущаяСтрока.НомерСтроки - 1);
	СтруктураРеквизита.Вставить("ИмяРеквизита", "Содержание");
	ЗаголовокФормыРедактирования = СтрШаблон(НСтр("ru='%1: содержание'"), Строка(ТекущаяСтрока.Номенклатура));
	ОбщегоНазначенияУНФКлиент.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект,
		СтруктураРеквизита, ЗаголовокФормыРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьПодвалФормы();
	РассчитатьОбъемИВесВДокументе();
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	СобытияФормИСКлиент.ПриИзмененииЭлемента(ЭтаФорма, Элементы.Запасы, ДополнительныеПараметры);
	Если ДополнительныеПараметры.Свойство("ТребуетсяСерверныйВызов") Тогда
		ПодключитьОбработчикОжидания("ЗапасыПриОкончанииРедактированияДляСерверногоВызова", 0.5, Истина);
	КонецЕсли;
	// Конец ИнтеграцияГосИС
	
	ЭтоНоваяСтрокаЗапасы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВесПриИзменении(Элемент)
	
	РассчитатьОбъемИВесВДокументе();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОбъемПриИзменении(Элемент)
	
	РассчитатьОбъемИВесВДокументе();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ХарактеристикиНабора(СтрокаТабличнойЧасти.Номенклатура, Текст);
	КонецЕсли;
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	// Наборы
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураОткрытия.Вставить("РежимВыбора", Истина);
		СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
		ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	КонецЕсли;                              
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьПроцентСкидки, СброситьФлагСкидкиРассчитаны", Истина, Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	
	Если КэшЗначений.Свойство("ИспользоватьМинимальныеЦены")
		И КэшЗначений.ИспользоватьМинимальныеЦены Тогда
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
		СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
		Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			
			СтруктураДанные.Вставить("ДатаОбработки",	 	Объект.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента",	 	Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
			
			СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
			СтруктураДанные.Вставить("Цена",			 	СтрокаТабличнойЧасти.Цена);
			
			СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
			
		КонецЕсли;
		
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТабличнойЧасти, СтруктураДанные);
		
		СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
		
		Если СтруктураДанные.Свойство("МинимальнаяЦена") 
			И СтрокаТабличнойЧасти.Свойство("МинимальнаяЦена") Тогда
			СтрокаТабличнойЧасти.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;			
		КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
	ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(СтрокаТабличнойЧасти.НомерСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(НомерСтроки, ИмяТаблицы = "Запасы")
	ДополнительныеСвойства = Новый Структура("НомерСтроки", НомерСтроки);
	СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект, ИмяТаблицы, ДополнительныеСвойства);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтоВозврат(Объект.ВидОперации) Тогда
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь, Истина);
	Иначе
		ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРНПТОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
			УдалитьСвязанныеЗаписи(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЗаказПокупателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьДоступностьПоляЗаказПокупателя(Элемент, СтандартнаяОбработка, Элементы.Запасы.ТекущиеДанные);
	
КонецПроцедуры

// ИнтеграцияГосИС
&НаКлиенте
Процедура ЗапасыПриОкончанииРедактированияДляСерверногоВызова()
	
	ЗапасыПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗапасыПриОкончанииРедактированияНаСервере()
	
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Запасы", Новый Структура);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПредоплата

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
			?(Объект.Курс = 0,
			1,
			Объект.Курс),
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
			?(Объект.Кратность = 0,
			1,
			Объект.Кратность),
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * Объект.Курс
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
		
		СтруктураДанные = ПолучитьДанныеДокументПриИзменении(СтрокаТабличнойЧасти.Документ, Объект.Контрагент, Объект.Договор);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = СтруктураДанные.СуммаРасчетов;
		
		Если СтруктураДанные.Свойство("Курс") Тогда
			СтрокаТабличнойЧасти.Курс = СтруктураДанные.Курс;
		Иначе
			СтрокаТабличнойЧасти.Курс = 
				?(СтрокаТабличнойЧасти.Курс = 0,
					?(Объект.Курс = 0,
					1,
					Объект.Курс),
				СтрокаТабличнойЧасти.Курс
			);
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("Кратность") Тогда
			СтрокаТабличнойЧасти.Кратность = СтруктураДанные.Кратность;
		Иначе
			СтрокаТабличнойЧасти.Кратность =
				?(СтрокаТабличнойЧасти.Кратность = 0,
					?(Объект.Кратность = 0,
					1,
					Объект.Кратность),
				СтрокаТабличнойЧасти.Кратность
			);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаТабличнойЧасти.СуммаРасчетов,
			СтрокаТабличнойЧасти.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаТабличнойЧасти.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
		);
		
		СтруктураДанные.Свойство("ОплатаСертификатом", СтрокаТабличнойЧасти.ОплатаСертификатом);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДокументПриИзменении(Документ, Контрагент, Договор)
	
	СтруктураДанные = Новый Структура();
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		
		СуммаРасчетовПоДокументу = 0;
		
		Если Документ.КонтрагентИсточник = Контрагент Тогда
			ТЧДляАнализа = Документ.Дебитор;
		Иначе
			ТЧДляАнализа = Документ.Кредитор;
		КонецЕсли;
		
		Для Каждого СтрокаДляАнализа Из ТЧДляАнализа Цикл
			Если СтрокаДляАнализа.Договор = Договор Тогда
				СуммаРасчетовПоДокументу = СуммаРасчетовПоДокументу + СтрокаДляАнализа.СуммаРасчетов;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураДанные.Вставить("СуммаРасчетов", СуммаРасчетовПоДокументу);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		СтруктураДанные.Вставить("СуммаРасчетов", Документ.Номинал);
		СтруктураДанные.Вставить("ОплатаСертификатом", Истина);
		
	Иначе
		
		СуммаРасчетовПоДокументу = 0;
		СуммаПлатежаПоДокументу = 0;
		Кратность = 0;
		Курс = 0;
		КоличествоСтрок = 0;
		
		// Нужно обойти все строки, чтобы получить данные только по нужному нам договору.
		Для Каждого СтрокаДляАнализа Из Документ.РасшифровкаПлатежа Цикл
			Если СтрокаДляАнализа.Договор = Договор Тогда
				СуммаРасчетовПоДокументу = СуммаРасчетовПоДокументу + СтрокаДляАнализа.СуммаРасчетов;
				СуммаПлатежаПоДокументу = СуммаПлатежаПоДокументу + СтрокаДляАнализа.СуммаПлатежа;
				Курс = СтрокаДляАнализа.Курс;
				Кратность = СтрокаДляАнализа.Кратность;
				КоличествоСтрок = КоличествоСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураДанные.Вставить("СуммаРасчетов", СуммаРасчетовПоДокументу);
		Если КоличествоСтрок = 1 Тогда
			СтруктураДанные.Вставить("Курс", Курс);
		Иначе
			Если СуммаРасчетовПоДокументу > 0 Тогда
				СтруктураДанные.Вставить("Курс", Окр(СуммаПлатежаПоДокументу / СуммаРасчетовПоДокументу * Кратность, 4));
			КонецЕсли;
		КонецЕсли;
		Если Кратность > 0 Тогда
			СтруктураДанные.Вставить("Кратность", Кратность);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДокументПриИзменении()

&НаКлиенте
Процедура ПредоплатаКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры


&НаКлиенте
Процедура ПредоплатаКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.ПриИзмененииКурсаВСтрокеПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.ОплатаСертификатом Тогда
		СтандартнаяОбработка = Ложь;
		РедактироватьОплату();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОплату()
	
	Оповещение = Новый ОписаниеОповещения("РедактироватьОплатуЗавершение", ЭтаФорма);
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КОплате", ИтогВсего - Объект.Предоплата.Итог("СуммаРасчетов")
									+ Элементы.Предоплата.ТекущиеДанные.СуммаРасчетов);
	СтруктураПараметров.Вставить("ПодарочныйСертификат", Элементы.Предоплата.ТекущиеДанные.Документ);
	СтруктураПараметров.Вставить("НомерСертификата", Элементы.Предоплата.ТекущиеДанные.НомерСертификата);
	СтруктураПараметров.Вставить("Сумма", Элементы.Предоплата.ТекущиеДанные.СуммаРасчетов);
	СтруктураПараметров.Вставить("Документ", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаОплатыСертификатом", СтруктураПараметров,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОплатуЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		СтрокаОплаты = Элементы.Предоплата.ТекущиеДанные;
		
		СтрокаОплаты.Документ = Результат.ПодарочныйСертификат;
		СтрокаОплаты.НомерСертификата = Результат.НомерСертификата;
		СтрокаОплаты.СуммаРасчетов = Результат.Сумма;
		
		СтрокаОплаты.Курс = 
			?(СтрокаОплаты.Курс = 0,
				?(Объект.Курс = 0,
				1,
				Объект.Курс),
			СтрокаОплаты.Курс
		);
			
		СтрокаОплаты.Кратность =
			?(СтрокаОплаты.Кратность = 0,
				?(Объект.Кратность = 0,
				1,
				Объект.Кратность),
			СтрокаОплаты.Кратность
		);
			
		СтрокаОплаты.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаОплаты.СуммаРасчетов,
			СтрокаОплаты.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаОплаты.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
		);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблиц

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Наборы
	Если ЭтоПродажа(Объект.ВидОперации) Тогда
		Если Элементы.Запасы.ВыделенныеСтроки.Количество()=Объект.Запасы.Количество() Тогда
			// Если выделены все строки - проверки удаления наборов не выполняются
			Объект.ДобавленныеНаборы.Очистить();
		Иначе
			ДанныеНабора = Новый Структура("НоменклатураНабора, ХарактеристикаНабора");
			Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
				ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
				Если ДанныеНабора.НоменклатураНабора=Неопределено Тогда
					ДанныеНабора.НоменклатураНабора = ТекущиеДанныеСтроки.НоменклатураНабора;
					ДанныеНабора.ХарактеристикаНабора = ТекущиеДанныеСтроки.ХарактеристикаНабора;
				ИначеЕсли ДанныеНабора.НоменклатураНабора<>ТекущиеДанныеСтроки.НоменклатураНабора 
					ИЛИ ДанныеНабора.ХарактеристикаНабора<>ТекущиеДанныеСтроки.ХарактеристикаНабора Тогда
					// Выделены строки разных наборов
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
					Сообщение.Поле = "Объект.Запасы";
					Сообщение.Сообщить();
					Отказ = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			Если НЕ Отказ И ЗначениеЗаполнено(ДанныеНабора.НоменклатураНабора) Тогда
				// Набор можно удалить только целиком
				Отказ = Истина;
				ДобавленныеНаборы = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
				Оповещение = Новый ОписаниеОповещения("ЗапасыПередУдалениемЗавершение", ЭтотОбъект, ДанныеНабора);
				СписокКнопок = Новый СписокЗначений;
				Если ДобавленныеНаборы.Количество()>0 И ДобавленныеНаборы[0].Количество>1 Тогда
					// в ТЧ есть несколько одинаковых наборов
					ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком. В табличную часть добавлено несколько экземпляров данного набора'");
					СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить все'"));
					СписокКнопок.Добавить("УдалитьОдин", НСтр("ru = 'Удалить один экземпляр'"));
				Иначе
					ТекстВопроса = НСтр("ru = 'Набор можно удалить только целиком'");
					СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'"));
				КонецЕсли; 
				СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Редактировать состав'"));
				СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
				ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, 0, КодВозвратаДиалога.Да);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
	Если НЕ Отказ Тогда
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			// Серии номенклатуры
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, ТекущиеДанныеСтроки,
				ИспользоватьСерииНоменклатурыОстатки);
			// Прослеживаемость
			УдалитьСвязанныеЗаписи(ТекущиеДанныеСтроки);
		КонецЦикла;
	КонецЕсли; 
	
	// Остатки и резервы
	Если РежимОстаткиИРезервы И Не Отказ Тогда
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
		НоменклатураУдаленнойСтроки = ТекущиеДанные.Номенклатура;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	Модифицированность = Истина;
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "Нажатие");
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию"". Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоЗаказуЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет полностью перезаполнен по ""Заказу"". Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу(Объект.Заказ);
		ОбновитьПодвалФормы();
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	КонецЕсли;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказу()

&НаКлиенте
Процедура РедактироватьЗачетПредоплаты(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	Для каждого ТекЭлемент Из Объект.Запасы Цикл
		СтруктураЗаказа = Новый Структура("Заказ, Всего");
		СтруктураЗаказа.Заказ = ?(ТекЭлемент.Заказ = Неопределено, ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка"), ТекЭлемент.Заказ);
		СтруктураЗаказа.Всего = ТекЭлемент.Всего;
		МассивЗаказов.Добавить(СтруктураЗаказа);
	КонецЦикла;
	// Доставка
	Если СтоимостьДоставкиСНДС>0 Тогда
		СтруктураЗаказа = Новый Структура("Заказ, Всего");
		СтруктураЗаказа.Заказ = ?(Заказ = Неопределено, ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка"), Заказ);
		СтруктураЗаказа.Всего = СтоимостьДоставкиСНДС;
		МассивЗаказов.Добавить(СтруктураЗаказа);
	КонецЕсли; 
	// КонецДоставка
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	ПараметрыПодбора = Новый Структура(
		"АдресПредоплатаВХранилище,
		|Подбор,
		|ЕстьЗаказ,
		|ЗаказВШапке,
		|Компания,
		|Заказ,
		|Дата,
		|Ссылка,
		|Контрагент,
		|Договор,
		|Курс,
		|Кратность,
		|ВалютаДокумента,
		|СуммаДокумента",
		АдресПредоплатаВХранилище, // АдресПредоплатаВХранилище
		ЭтоПродажа(Объект.ВидОперации), // Подбор
		Истина, // ЕстьЗаказ
		ЗаказВШапке, // ЗаказВШапке
		Компания, // Компания
		?(КонтрагентВестиРасчетыПоЗаказам, ?(ЗаказВШапке, Объект.Заказ, МассивЗаказов), Неопределено), // Заказ
		Объект.Дата, // Дата
		Объект.Ссылка, // Ссылка
		Объект.Контрагент, // Контрагент
		Объект.Договор, // Договор
		Объект.Курс, // Курс
		Объект.Кратность, // Кратность
		Объект.ВалютаДокумента, // ВалютаДокумента
		Объект.Запасы.Итог("Всего") + СтоимостьДоставкиСНДС // СуммаДокумента
	);
	
	Если ЭтоПродажа(Объект.ВидОперации) Тогда
		КодВозврата = Неопределено;
		ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПокупателей", ПараметрыПодбора, , , , ,
			Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение1", ЭтотОбъект,
			Новый Структура("АдресПредоплатаВХранилище, ПараметрыПодбора", АдресПредоплатаВХранилище, ПараметрыПодбора)));
		Возврат;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику") Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПоставщикам", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение", ЭтотОбъект,
		Новый Структура("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище)));
		Возврат;
	КонецЕсли;
	
	РедактироватьЗачетПредоплатыФрагмент1(АдресПредоплатаВХранилище, КодВозврата);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение1(Результат,
		ДополнительныеПараметры) Экспорт

	АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;

	КодВозврата = Результат;

	РедактироватьЗачетПредоплатыФрагмент1(АдресПредоплатаВХранилище, КодВозврата);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыФрагмент1(Знач АдресПредоплатаВХранилище, Знач КодВозврата)
    
    РедактироватьЗачетПредоплатыФрагмент(АдресПредоплатаВХранилище, КодВозврата);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
    
    
    КодВозврата = Результат;
    
    РедактироватьЗачетПредоплатыФрагмент(АдресПредоплатаВХранилище, КодВозврата);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыФрагмент(Знач АдресПредоплатаВХранилище,
		Знач КодВозврата)

	Если (ЭтоПродажа(Объект.ВидОперации) ИЛИ ЭтоВозврат(Объект.ВидОперации))
			И (КодВозврата = КодВозвратаДиалога.OK) Тогда
		ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
	КонецЕсли;

КонецПроцедуры

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект,
		Новый Структура("ТекШтрихкод", ТекШтрихкод));

	#Если МобильныйКлиент Тогда
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
	ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкодуЗавершение()

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Запасы");
	
	ПодключаемоеОборудованиеУНФКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРезервЗаполнитьПоРезервам(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Запасы и услуги"" не заполнена.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКолонкуРезервПоРезервамНаСервере();
	
КонецПроцедуры // ИзменитьРезервЗаполнитьПоРезервам()

&НаКлиенте
Процедура ЗаполнитьПоОстаткамИРезервамВсеСклады(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Товары, услуги"" не заполнена.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьПоОстаткамИРезервамНаСервере();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамИРезервамНаСервере()
	
	Если СкладВШапке Тогда
		ЗначениеСклада = ?(Не ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница), Неопределено, Объект.СтруктурнаяЕдиница);
			Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ЗначениеСклада;
			КонецЦикла;
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьКоличествоПоОстаткамИРезервамРасходнаяНакладная(Объект);
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
	ОбновитьПризнакиНабора(Объект.Запасы);
	// Конец Наборы
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоТемЧтоМожноОтгрузить(Команда)
	
	Если Не РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.МожноОтгрузить;
		
		СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.ВесЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.ОбъемЕдиницыТовара * СтрокаТабличнойЧасти.Количество;
		
		НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти);
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	РассчитатьОбъемИВесВДокументе();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРезервОчиститьРезерв(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Запасы и услуги"" не заполнена.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
		Если СтрокаТабличнойЧасти.ТипНоменклатурыЗапас Тогда
			СтрокаТабличнойЧасти.Резерв = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьРезервЗаполнитьПоОстаткам()

&НаКлиенте
Процедура ДекорацияПечатьНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КонтекстПечати", Объект);
	ПараметрыОткрытия.Вставить("НаборОснований", НаборОснованийПечати());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиРасходнаяНакладная", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура ШапкаТабличнаяЧасть(Команда)
	
	ЗаполнениеОбъектовУНФКлиент.ЗаполнитьПустыеПоложения(Объект, "ПоложениеЗаказаПокупателя, ПоложениеСклада, ПоложениеПроекта");
	
	ЭтоОтветХранение = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения"));
		
	ПараметрыДиалога = Новый Структура;
	Если НЕ ЭтоОтветХранение Тогда
		ПараметрыДиалога.Вставить("ПоложениеЗаказаПокупателяВДокументахОтгрузки", Объект.ПоложениеЗаказаПокупателя);
	КонецЕсли; 
	ПараметрыДиалога.Вставить("ПоложениеСкладаВДокументахОтгрузки", Объект.ПоложениеСклада);
	ПараметрыДиалога.Вставить("БылиВнесеныИзменения", Ложь);
	ЗаполнитьЗаголовкиПоВидуОперации(ПараметрыДиалога);
	ПараметрыДиалога.Вставить("Доступность", Новый Структура("ПоложениеСкладаВДокументахОтгрузки", 
		НЕ РежимОстаткиИРезервы И НЕ Элементы.РежимГТД.Пометка));
	
	Если ИспользоватьПроекты Тогда
		ПараметрыДиалога.Вставить("ПоложениеПроекта", Объект.ПоложениеПроекта);
	КонецЕсли;
	
	ОткрытьФорму(
	"ОбщаяФорма.ШапкаТабличнаяЧасть",
	ПараметрыДиалога,,,,,
	Новый ОписаниеОповещения("ШапкаТабличнаяЧастьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаголовкиПоВидуОперации(ПараметрыДиалога)
	
	ПараметрыДиалога.Вставить("Заголовки", Новый Структура);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту") Тогда
		ПараметрыДиалога.Заголовки.Вставить(
		"ПоложениеЗаказаПокупателяВДокументахОтгрузки", 
		НСтр("ru = 'Положение заказа поставщику в документах возврата'"));
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку") Тогда
		ПараметрыДиалога.Заголовки.Вставить(
		"ПоложениеЗаказаПокупателяВДокументахОтгрузки", 
		НСтр("ru = 'Положение заказа поставщику в документах отгрузки'"));
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки") Тогда
		ПараметрыДиалога.Заголовки.Вставить(
		"ПоложениеЗаказаПокупателяВДокументахОтгрузки", 
		НСтр("ru = 'Положение заказа покупателя в документах возврата'"));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиВнесеныИзменения Тогда
		
		Если Объект.ПоложениеЗаказаПокупателя<>Результат.ПоложениеЗаказаПокупателяВДокументахОтгрузки Тогда
			Объект.ПоложениеЗаказаПокупателя = Результат.ПоложениеЗаказаПокупателяВДокументахОтгрузки;
			ЗаполнениеОбъектовУНФКлиент.ОбработатьИзменениеПоложения(Объект, "Запасы", "Заказ", "ПоложениеЗаказаПокупателя");
		КонецЕсли;
		
		Если Результат.Свойство("ПоложениеПроекта") Тогда
			Если Объект.ПоложениеПроекта <> Результат.ПоложениеПроекта Тогда
				Объект.ПоложениеПроекта = Результат.ПоложениеПроекта;
				ЗаполнениеОбъектовУНФКлиент.ОбработатьИзменениеПоложения(Объект, "Запасы", "Проект", "ПоложениеПроекта");
			КонецЕсли;
		КонецЕсли;
		
		ШапкаТабличнаяЧастьЗавершениеНаСервере(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШапкаТабличнаяЧастьЗавершениеНаСервере(Знач Результат)
	
	Если Объект.ПоложениеСклада <> Результат.ПоложениеСкладаВДокументахОтгрузки Тогда
		Объект.ПоложениеСклада = Результат.ПоложениеСкладаВДокументахОтгрузки;
		Если НЕ РежимОстаткиИРезервы Тогда
			Если Объект.ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				СтруктураПолей = ЗаполнениеОбъектовУНФ.СтруктурнаяЕдиницаИЯчейкаДляШапки(Объект.Запасы);
				ЗаполнитьЗначенияСвойств(Объект, СтруктураПолей);
				Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
					Объект.СтруктурнаяЕдиница = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
						Пользователи.ТекущийПользователь(), 
						"ОсновнойСклад");
					Объект.Ячейка = Справочники.Ячейки.ПустаяСсылка();
				КонецЕсли; 
			КонецЕсли; 
			Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
				СтрокаТабличнойЧасти.Ячейка = Объект.Ячейка;
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	УстановитьВидимостьОтПользовательскихНастроек();
	ЗаполнитьСписокДействий();
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Наборы
	Если ЭтоПродажа(Объект.ВидОперации) Тогда
		
		СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если НЕ ТолькоПросмотр И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) И  
			(Элемент.ТекущийЭлемент = Элементы.ЗапасыНоменклатура ИЛИ
			Элемент.ТекущийЭлемент = Элементы.ЗапасыХарактеристика ИЛИ
			Элемент.ТекущийЭлемент = Элементы.ЗапасыКартинкаНабора ИЛИ
			Элемент.ТекущийЭлемент = Элементы.ЗапасыКоличество ИЛИ
			Элемент.ТекущийЭлемент = Элементы.ЗапасыЕдиницаИзмерения) Тогда 
			
			СтандартнаяОбработка = Ложь;
			РедактироватьСоставНабора(СтрокаТабличнойЧасти);
			
		КонецЕсли;
		
	КонецЕсли; 
	// Конец Наборы
	
	// Подарочные сертификаты
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыЦена И Элемент.ТекущийЭлемент.ТолькоПросмотр Тогда
		
		ПоляНоменклатуры = ТипНоменклатурыПроизвольныйНоминал(СтрокаТабличнойЧасти.Номенклатура);
			
		Если ПоляНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")
			И ПоляНоменклатуры.ПроизвольныйНоминал Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("УказатьЦенуСертификата", ЭтотОбъект, СтрокаТабличнойЧасти);
			ПоказатьВводЧисла(ОписаниеОповещения, СтрокаТабличнойЧасти.Цена, НСтр(
				"ru = 'Введите стоимость сертификата'"), 15, 2);
			
		КонецЕсли;
			
	КонецЕсли;
	// Конец Подарочные сертификаты
	
	// АвтоматическиеСкидки
	// Размещать в конце процедуры. Возможно перезаполнение табличной части
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыПроцентАвтоматическойСкидки
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыСуммаАвтоматическойСкидки
		И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьИнформациюОСкидкахКлиент()
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Запасы и Остатки
	ВыборЗапасыИОстатки(Элемент);
	
	// Прослеживаемость
	СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле = Элементы.ЗапасыРНПТ И СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
		Если ЭтоВозврат(Объект.ВидОперации) Тогда
			ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь, Истина);
		Иначе
			ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь);
		КонецЕсли; 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипНоменклатурыПроизвольныйНоминал(Знач Номенклатура)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ТипНоменклатуры, ПроизвольныйНоминал");
КонецФункции

&НаКлиенте
Процедура ВыборЗапасыИОстатки(Элемент)

	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОтбора = Новый Структура;

	ПараметрыОтбора.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	ПараметрыОтбора.Вставить("Партия", ТекущиеДанные.Партия);
	Если ЗначениеЗаполнено(ТекущиеДанные.СтруктурнаяЕдиница) Тогда
		ПараметрыОтбора.Вставить("Склад", ТекущиеДанные.СтруктурнаяЕдиница);
	Иначе
		ПараметрыОтбора.Вставить("Склад", Объект.СтруктурнаяЕдиница);
	КонецЕсли;
	ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ТекущиеДанные.ЕдиницаИзмерения);
	Если ЗначениеЗаполнено(ТекущиеДанные.Заказ) Тогда
		ПараметрыОтбора.Вставить("ЗаказПокупателя", ТекущиеДанные.Заказ);
	Иначе
		ПараметрыОтбора.Вставить("ЗаказПокупателя", Объект.Заказ);
	КонецЕсли;
	ПараметрыОтбора.Вставить("НомерВариантаКП", 0);
	ПараметрыОтбора.Вставить("ОрганизацияОбъекта", Объект.Организация);

	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыОстатокОбщий
		Или Элемент.ТекущийЭлемент = Элементы.ЗапасыСтруктурнаяЕдиницаРезерв Тогда

		ЗначениеПоля = ТекущиеДанные.ОстатокОбщий;

		СписокВыбораСклад = Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.СписокВыбора;
		СписокВыбораСклад.Очистить();

		Если ЗначениеЗаполнено(ЗначениеПоля) Тогда

			ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыОстатокОбщий");
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтотОбъект,
				ПараметрыОповещения);

			СписокДокументов = СписокДокументовПоЗаказу("ОбщиеЗапасы", ПараметрыОтбора);

			Для Каждого ЭлементСписка Из СписокДокументов Цикл
				СписокВыбораСклад.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление, ,
					ЭлементСписка.Картинка);
			КонецЦикла;

			Если СписокДокументов.Количество() Тогда
				СписокДокументов.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"), ,
					БиблиотекаКартинок.Отчет);
				СписокВыбораСклад.Добавить("ОтчетОстаткиНаСкладах", НСтр("ru = 'Остатки на складах (отчет)'"), ,
					БиблиотекаКартинок.Отчет);
			КонецЕсли;

			Если Элемент.ТекущийЭлемент = Элементы.ЗапасыОстатокОбщий Тогда
				ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыВРезервеВсего
		Или Элемент.ТекущийЭлемент = Элементы.ЗапасыЗарезервировано Тогда

		ЗначениеПоля = ?(Элемент.ТекущийЭлемент = Элементы.ЗапасыВРезервеВсего, ТекущиеДанные.ВРезерве,
			ТекущиеДанные.ВРезервеТекСклад);

		Если ЗначениеЗаполнено(ЗначениеПоля) Тогда

			ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "ЗапасыВРезерве");
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтотОбъект,
				ПараметрыОповещения);

			ПараметрыОтбора.Склад = ?(Элемент.ТекущийЭлемент = Элементы.ЗапасыВРезервеВсего, Неопределено, ПараметрыОтбора.Склад);

			СписокДокументов = СписокДокументовПоЗаказу("Остаток", ПараметрыОтбора);

			ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриАктивизацииСтроки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Элементы.ЗапасыКонтекстноеМенюЗапасыРазбитьСтроку.Доступность = Не СтрокаТабличнойЧасти.ЭтоНабор;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриАктивизацииЯчейки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	// Прослеживаемость
	Если ЭтоНоваяСтрокаЗапасы
		И Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыРНПТ 
		И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.РНПТ) Тогда
		Если ЭтоВозврат(Объект.ВидОперации) Тогда
			ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь, Истина);
		Иначе
			ПрослеживаемостьФормыКлиентУНФ.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Запасы", Ложь);
		КонецЕсли; 
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Наборы
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если Копирование И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
		// Состав набора не копируется
		Отказ = Истина;
	КонецЕсли; 
	// Конец Наборы
	
	Если Копирование И РежимОстаткиИРезервы Тогда
		
		Отказ = Истина;
		
		НоваяСтрока = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		НоваяСтрока.Резерв = 0;
		
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "Ячейка", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "Заказ", "ПоложениеЗаказаПокупателя");
		
		Если НоваяСтрока.ПроцентАвтоматическойСкидки <> 0 ИЛИ НоваяСтрока.СуммаАвтоматическойСкидки <> 0 Тогда
			НоваяСтрока.ПроцентАвтоматическойСкидки = 0;
			НоваяСтрока.СуммаАвтоматическойСкидки = 0;
			РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
		ИначеЕсли ИспользоватьАвтоматическиеСкидки Тогда
			// Автоматические скидки стали неактуальны.
			СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
		КонецЕсли;
		
		НоваяСтрока.КлючСвязи = 0;
		НоваяСтрока.СерииНоменклатуры = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, НоваяСтрока);
		
		ОбновитьПодвалФормы();
		РассчитатьОбъемИВесВДокументе();
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	НоваяСтрока.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	НоваяСтрока.Характеристика);
		СтруктураДанные.Вставить("Партия", 	НоваяСтрока.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", НоваяСтрока.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", НоваяСтрока.ИспользоватьПартии);
		
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
	
	ЗапасыПослеУдаленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалениемЗавершение(Результат, ДанныеНабора) Экспорт
	
	// Наборы
	Если Результат=Неопределено ИЛИ Результат=КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;
	
	СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = СтрокиНабора[0];
	
	Если Результат=КодВозвратаДиалога.Нет Тогда
		
		РедактироватьСоставНабора(СтрокаТабличнойЧасти);
		
	ИначеЕсли Результат=КодВозвратаДиалога.Да Тогда
		
		Для каждого Стр Из СтрокиНабора Цикл
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, Стр,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЦикла; 
		НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, Объект.ДобавленныеНаборы);
		
		Модифицированность = Истина;
		ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
		
	ИначеЕсли Результат="УдалитьОдин" Тогда
		
		ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(ДанныеНабора);
		Если ДобавленныеСтроки.Количество()=0 ИЛИ ДобавленныеСтроки[0].Количество<=1 Тогда
			Для каждого Стр Из СтрокиНабора Цикл
				СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, Стр,
					ИспользоватьСерииНоменклатурыОстатки);
			КонецЦикла; 
			НаборыКлиент.УдалитьСтрокиНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, Объект.ДобавленныеНаборы);
		Иначе
			СтароеКоличество = ДобавленныеСтроки[0].Количество;
			ДобавленныеСтроки[0].Количество = СтароеКоличество-1;
			НаборыКлиентСервер.УдалитьЭкземплярНабора(СтрокаТабличнойЧасти.НоменклатураНабора, СтрокаТабличнойЧасти.ХарактеристикаНабора, , Объект.Запасы, , СтароеКоличество);
			НаборыКлиент.УдалитьЛишниеСтрокиПодчиненнойТЧ(Объект.Запасы, Объект.СерииНоменклатуры);
			СтрокиНабора = Объект.Запасы.НайтиСтроки(ДанныеНабора);
			Для каждого Стр Из СтрокиНабора Цикл
				РассчитатьСуммуВСтрокеТабличнойЧасти(Стр);
			КонецЦикла;
		КонецЕсли;
		
		Модифицированность = Истина;
		ВыполнитьДействияПослеУдаленияСтрокиЗапасов();
		
	КонецЕсли; 
	// Конец Наборы
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиИРезервы(Команда)
	
	РежимОстаткиИРезервы = Не РежимОстаткиИРезервы;
	Элементы.ОстаткиИРезервы.Пометка = Не Элементы.ОстаткиИРезервы.Пометка;
	
	Элементы.РежимГТД.Пометка = Ложь;
	
	ОбновитьОтображениеКолонокВРазрезеЗапасов();
	
	Если РежимОстаткиИРезервы Тогда
		Элементы.Запасы.ВысотаШапки = 2;
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	Иначе
		ПроверитьПоложениеСклада();
		Элементы.Запасы.ВысотаШапки = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОбновить(Команда)
	ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДублиСтрок(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если Элементы.Запасы.ОтборСтрок = Неопределено Тогда
		
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, Партия"
		, СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрокаТабличнойЧасти.Партия);
		
		НайденныеСтроки = Объект.Запасы.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() <=1 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Дубли строки не найдены.'");
				Сообщение.КлючДанных = Объект.Ссылка;
				Сообщение.Сообщить();
				Возврат
		КонецЕсли;
		
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("Номенклатура, Характеристика, Партия"
		, СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрокаТабличнойЧасти.Партия);
		
		Элементы.Запасы.ОтборСтрок = ПараметрыОтбора;
		Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтрок.Пометка = Истина;
		
		Элементы.ДекорацияОтборПоДублям.Заголовок = ИнформацияОбОтборе(Строка(СтрокаТабличнойЧасти.НомерСтроки));
		Элементы.ДекорацияОтборПоДублям.Видимость = Истина;
		
	Иначе
		Элементы.Запасы.ОтборСтрок = Неопределено;
		Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтрок.Пометка = Ложь;
		Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРазбитьСтроку(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в текущей строке равно нулю.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
		
	
	ПараметрыОповещения = Новый Структура("СтрокаТабличнойЧасти, АвтоматическиеСкидкиРассчитаны", СтрокаТабличнойЧасти, Объект.СкидкиРассчитаны);
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТабличнойЧастиЗавершение", ЭтаФорма, ПараметрыОповещения);
	
	ПоказатьВводЧисла(Оповещение, СтрокаТабличнойЧасти.Количество, "Введите количество в новой строке", 15, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЯчейкаДляРежимаОстаткиПриИзменении(Элемент)
	Если РежимОстаткиИРезервы Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
		ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервОчистка(Элемент, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = Неопределено Тогда Возврат КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если ВыбранноеЗначение = "ОтчетОстаткиНаСкладах" Тогда
		
		ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда Возврат КонецЕсли;
		
		Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "ПоМестамХранения");
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
		ОтборРасшифровки = Новый Соответствие;
		ОтборРасшифровки.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		ОтборРасшифровки.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		ОтборРасшифровки.Вставить("СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
		ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
		
		ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("Склад") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ВыбранноеЗначение.Склад;
		СтрокаТабличнойЧасти.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
	Иначе
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ВыбранноеЗначение;
		СтрокаТабличнойЧасти.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
	КонецЕсли;
	СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	
	ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДляПросмотраОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	РасчетыРаботаСФормамиКлиент.ТаблицаДляПросмотраОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка, СтруктураПараметровРасчетов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтборПоДублямОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Элементы.Запасы.ОтборСтрок = Неопределено;
	Элементы.ЗапасыКонтекстноеМенюПоказатьДублиСтрок.Пометка = Ложь;
	Элементы.ДекорацияОтборПоДублям.Видимость = Ложь;
КонецПроцедуры

&НаСервере
Процедура ЗапасыПослеУдаленияСервер()
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриИзмененииЭлемента(ЭтаФорма, "Запасы", Неопределено);
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи",		РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения",	РежимПроведенияДокумента.Неоперативный);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Истина);
	
	Записать(ПараметрыЗаписи);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ФормаПровестиИЗакрыть, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКоманда(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи",		РежимЗаписиДокумента.Запись);
	
	Записать(ПараметрыЗаписи);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ФормаЗаписать, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи",		РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения",	РежимПроведенияДокумента.Неоперативный);
	
	Записать(ПараметрыЗаписи);
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.ФормаПровести, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура РежимГТД(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТД", "Пометка", НЕ Элементы.РежимГТД.Пометка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТДКонтекст", "Пометка", НЕ Элементы.РежимГТДКонтекст.Пометка);
	
	ИзменитьРежимРаботаГТД(Элементы.РежимГТД.Пометка);
	
	Элементы.ОстаткиИРезервы.Пометка = НЕ Элементы.РежимГТД.Пометка;
	РежимОстаткиИРезервы = НЕ Элементы.РежимГТД.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРаботаГТД()
	
	НеизменяемыеРеквизиты = Новый Массив;
	НеизменяемыеРеквизиты.Добавить("ЗапасыПометка");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерСтроки");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНоменклатура");
	НеизменяемыеРеквизиты.Добавить("ЗапасыХарактеристика");
	НеизменяемыеРеквизиты.Добавить("ЗапасыПартия");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКоличество");
	НеизменяемыеРеквизиты.Добавить("ЗапасыЕдиницаИзмерения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыСтранаПроисхождения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерГТД");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКодТНВЭД");
	ПрослеживаемостьФормыКлиентСерверУНФ.ДобавитьНеизменяемыеРеквизитыДляРежимаГТД(НеизменяемыеРеквизиты);
	
	Для каждого ЭлементФормы Из Элементы.Запасы.ПодчиненныеЭлементы Цикл
		
		Если НеизменяемыеРеквизиты.Найти(ЭлементФормы.Имя) = Неопределено
			И ЭлементФормы.Видимость = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			КэшЗначений.ОбрабатываемыеРеквизиты.Добавить(ЭлементФормы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРежимРаботаГТД()
	
	Для каждого ИмяЭлементаФормы Из КэшЗначений.ОбрабатываемыеРеквизиты Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаФормы, "Видимость", Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Истина);
	
	КэшЗначений.ОбрабатываемыеРеквизиты = Новый Массив;
	
КонецПроцедуры

&НаКлиенте 
Процедура ИзменитьРежимРаботаГТД(ВключитьРежимГТД)
	
	Если НЕ КэшЗначений.Свойство("ОбрабатываемыеРеквизиты") Тогда
		
		КэшЗначений.Вставить("ОбрабатываемыеРеквизиты", Новый Массив);
		
	КонецЕсли;
	
	Если ВключитьРежимГТД Тогда
		
		ВключитьРежимРаботаГТД();
		
	Иначе
		
		ВыключитьРежимРаботаГТД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЗаказуВСервисе(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументОснование", Объект.Ссылка);
	ПараметрыФормы.Вставить("ОрганизацияБизнесСети", Объект.Организация);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	ПараметрыФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказаНаДоставку);
	ПараметрыФормы.Вставить("РежимМастера", 2);
	СервисДоставкиКлиент.ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПередатьЗаказВСервис(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументОснование", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидОперации", Объект.ВидОперации);
	ПараметрыФормы.Вставить("ОрганизацияБизнесСети", Объект.Организация);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	СервисДоставкиКлиент.ОткрытьФормуКарточкиЗаказаНаДоставку(ПараметрыФормы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОкругления(Команда)
	
	ОткрытьФорму("Обработка.ВидыСкидокНаценокРучныеИАвтоматические.Форма", Новый Структура("Округления", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуСертификатом(Команда)
	
	ТекстПредупреждения = "";
	Если РаботаСПодарочнымиСертификатамиКлиентСервер.ИспользованиеСертификатовЗапрещено(ВалютаРасчетов, НациональнаяВалюта, ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	// Проверим рассчитанность скидок перед добавлением сертификата
	Если ИспользоватьАвтоматическиеСкидки Тогда
		
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			РассчитатьСкидкиНаценкиКлиент();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Рассчитаны автоматические скидки (наценки).'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
		Иначе
			Объект.СкидкиРассчитаны = Истина;
			ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Истина;
		КонецЕсли;
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьОплатуСертификатомЗавершение", ЭтаФорма);
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КОплате", ИтогВсего - Объект.Предоплата.Итог("СуммаРасчетов"));
	СтруктураПараметров.Вставить("Документ", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаОплатыСертификатом", СтруктураПараметров,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуСертификатомЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		СтрокаОплаты = Объект.Предоплата.Добавить();
		
		СтрокаОплаты.ОплатаСертификатом			= Истина;
		СтрокаОплаты.Документ					= Результат.ПодарочныйСертификат;
		СтрокаОплаты.НомерСертификата			= Результат.НомерСертификата;
		СтрокаОплаты.СуммаРасчетов				= Результат.Сумма;
		СтрокаОплаты.СуммаПогашенияСертификата	= Результат.СуммаПогашенияСертификата;
		
		СтрокаОплаты.Курс = 
			?(СтрокаОплаты.Курс = 0,
				?(Объект.Курс = 0,
				1,
				Объект.Курс),
			СтрокаОплаты.Курс
		);
			
		СтрокаОплаты.Кратность =
			?(СтрокаОплаты.Кратность = 0,
				?(Объект.Кратность = 0,
				1,
				Объект.Кратность),
			СтрокаОплаты.Кратность
		);
			
		СтрокаОплаты.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
			СтрокаОплаты.СуммаРасчетов,
			СтрокаОплаты.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаОплаты.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
		);
		
		Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДЗаполнитьПоФактическимОстаткам(Команда)
	
	НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДПодобрать(Команда)
	
	НомераГТДПодобратьНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_РасходнаяНакладная"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧека(Команда)
	
	Если Модифицированность Тогда
		Если Объект.Проведен Тогда
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет проведен. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Провести и продолжить'"));
		Иначе
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет записан. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Записать и продолжить'"));
		КонецЕсли;
		Обработчик = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаПродолжение", ЭтотОбъект);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки);
	Иначе
		ПредварительныйПросмотрЧекаПродолжение(Неопределено, "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		Если Объект.Проведен Тогда
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Иначе
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		КонецЕсли;
		Если Не РезультатЗаписи Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаЗавершение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		МассивОборудования.Добавить("ПринтерЧеков");
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, МассивОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаЗавершение(ИдентификаторУстройстваФР, Параметры) Экспорт
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ТекущаяДата();
	
	РабочееМестоКассираКлиент.ПредпросмотрЧекаДенежныхДокументов(ОбщиеПараметры, ЭтаФорма, ИдентификаторУстройстваФР);
	
КонецПроцедуры

#Область ИнтеграцияИС

// ИнтеграцияИС

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры
// Конец ИнтеграцияИС

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияСерийПриИзмененииКлючевыхРеквизитов()
	ДополнительныеСвойства = Новый Структура("ИзменениеКлючевыхРеквизитов", Истина);
	СерииНоменклатурыУНФ.ЗаполнитьПризнакиИспользованияСерий(Объект, ДополнительныеСвойства);
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита()
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"РасходнаяНакладная", "Запасы", НастройкиФормыВыбораНоменклатуры);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеПереключенияСкладШапка()
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьТаблицуПоШапке(Объект, "Запасы", "СтруктурнаяЕдиница", "ПоложениеСклада");
	Если КэшЗначений.УчетПоЯчейкам Тогда
		ЗаполнениеОбъектовУНФ.ЗаполнитьТаблицуПоШапке(Объект, "Запасы", "Ячейка", "ПоложениеСклада");
	КонецЕсли; 
	УстановитьВидимостьОтПользовательскихНастроек();
	ЗаполнитьСписокДействий();
	
КонецПроцедуры
// Конец ГосИС

&НаСервере
Функция ИнформацияОбОтборе(НомерСтрокиПредставление)
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Дубли строки %1'"), НомерСтрокиПредставление);
	Возврат НоменклатураВДокументахСервер.ИнформацияОбОтборе(ТекстСообщения);
КонецФункции

&НаКлиенте
Процедура ВыполнитьПересчетНДСС18На20(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Или 
		Результат = КодВозвратаДиалога.Нет Тогда
		
		СтавкиСоответствие = ПолучитьСтавкиНДС();
		СтавкаНДС18 = СтавкиСоответствие.Получить("НДС18");
		СтавкаНДС18Расчетная = СтавкиСоответствие.Получить("НДС18Расчетная");
		СтавкаНДС20 = СтавкиСоответствие.Получить("НДС20");
		СтавкаНДС20Расчетная = СтавкиСоответствие.Получить("НДС20Расчетная");
		
		Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
			Если СтрокаЗапасы.СтавкаНДС = СтавкаНДС18 И ЗначениеЗаполнено(СтавкаНДС20) Тогда
				// Сумма изменяется на сумму НДС
				Если Результат = КодВозвратаДиалога.Нет  Тогда
					СтавкаНДСТекущая = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаЗапасы.СтавкаНДС);
					СтавкаНДСНовая = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДС20);
					СтрокаЗапасы.Сумма = ТабличныеЧастиУНФКлиент.НоваяСтоимостьСУчетомИзмененийПоНДС2018(СтрокаЗапасы.Сумма, СтавкаНДСТекущая, СтавкаНДСНовая)
				КонецЕсли;
				СтрокаЗапасы.СтавкаНДС = СтавкаНДС20;
				ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаЗапасы, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			ИначеЕсли СтрокаЗапасы.СтавкаНДС = СтавкаНДС18Расчетная И ЗначениеЗаполнено(СтавкаНДС20Расчетная) Тогда
				// Сумма изменяется на сумму НДС
				Если Результат = КодВозвратаДиалога.Нет  Тогда
					СтавкаНДСТекущая = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаЗапасы.СтавкаНДС)%100;
					СтавкаНДСНовая = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДС20Расчетная)%100;
					СтрокаЗапасы.Сумма = ТабличныеЧастиУНФКлиент.НоваяСтоимостьСУчетомИзмененийПоНДС2018(СтрокаЗапасы.Сумма, СтавкаНДСТекущая, СтавкаНДСНовая)
				КонецЕсли;
				СтрокаЗапасы.СтавкаНДС = СтавкаНДС20Расчетная;
				ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаЗапасы, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			КонецЕсли;
		КонецЦикла;
		
		ОбновитьПодвалФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПолучитьСтавкиНДС()
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("НДС18", Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая, Дата('20180101')));
	Соответствие.Вставить("НДС18Расчетная", Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.ОбщаяРасчетная, Дата('20180101')));
	Соответствие.Вставить("НДС20", Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая, Дата('20191111')));
	Соответствие.Вставить("НДС20Расчетная", Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.ОбщаяРасчетная, Дата('20191111')));
	
	Возврат Соответствие;
КонецФункции

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурнаяЕдиницаПриИзмененииНаСервере()
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
	КонецЦикла;
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	УстановитьВидимостьЯчейки("Ячейка", Объект.СтруктурнаяЕдиница);
	
	СтруктураДанные = ПолучитьДанныеСтруктурнойЕдиницыПриИзменении(Объект.СтруктурнаяЕдиница);
	
	Объект.ПодписьКладовщика = СтруктураДанные.ПодписьКладовщика;
	
	Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,
		?(ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница),Объект.СтруктурнаяЕдиница, Неопределено), Объект.Дата);
		
	ПоляНадписи = Новый Структура;
	ПоляНадписи.Вставить("ВидЦен", Объект.ВидЦен);
	ПоляНадписи.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
	ПоляНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПоляНадписи.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	ПоляНадписи.Вставить("Курс", Объект.Курс);
	ПоляНадписи.Вставить("КурсНациональнаяВалюта", КурсНациональнаяВалюта);
	ПоляНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	ПоляНадписи.Вставить("УчетВалютныхОпераций", УчетВалютныхОпераций);
	ПоляНадписи.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПоляНадписи.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
	ПоляНадписи.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	ПоляНадписи.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(ПоляНадписи);
	
	ОбновитьРеквизитыВТЧ(Объект, "СтруктурнаяЕдиница");
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСтруктурнойЕдиницыПриИзменении(СтруктурнаяЕдиница)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ПодписьКладовщика", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ПодписьМол", Истина));
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	Модифицированность = Истина;
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
	Для Каждого ТекСтрокаЗапасы Из Объект.Запасы Цикл
		Если Не ЗначениеЗаполнено(ТекСтрокаЗапасы.Цена) Тогда
			НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(Объект, "Запасы", ТекСтрокаЗапасы);
		КонецЕсли;
	КонецЦикла;

	// Наборы
	Если ЭтоПродажа(Объект.ВидОперации) Тогда
		ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
	КонецЕсли; 
	// Конец Наборы
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки	
	
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
			Элементы.СчетФактураНадпись.Видимость = Истина;
		Иначе
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Договор = Объект.Договор;
	Если ЗначениеЗаполнено(Договор) Тогда
		ВалютаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВалютаРасчетов", Истина);
	КонецЕсли;
	
	УстановитьВидимостьДоговора();
	
	УстановитьВидимостьИДоступность();
	
	ОбновитьРеквизитыВТЧ(Объект);
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");

	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов)
	
	РазностьДат = ДокументыУНФ.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаРасчетов));
		
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	// Прослеживаемость
	КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ВестиУчетПрослеживаемыхТоваров());
	ОбновитьПризнакПрослеживаемости();
	// Конец Прослеживаемость
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении()
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Компания", Константы.УчетПоКомпании.Компания(Объект.Организация));
	СтруктураДанные.Вставить("БанковскийСчет", Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Объект.Организация, Объект.ВалютаДокумента, Объект.Дата));
	СтруктураДанные.Вставить("ПодписьРуководителя", Объект.Организация.ПодписьРуководителя);
	СтруктураДанные.Вставить("ПодписьГлавногоБухгалтера", Объект.Организация.ПодписьГлавногоБухгалтера);
	
	ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Наборы
	Если НЕ СтруктураДанные.Свойство("ЕдиницаИзмерения") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	КонецЕсли; 
	Если НЕ СтруктураДанные.Свойство("Коэффициент") Тогда
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли; 
	КонецЕсли;
	// Конец Наборы
	
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	СтруктураДанные.Вставить("ТоварнаяНоменклатураВЭД", СтруктураДанные.Номенклатура.ТоварнаяНоменклатураВЭД);
	
	СтруктураДанные.Вставить("ЭтоЗапас", (СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
		ИЛИ (СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")));
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию));
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	Если СтруктураДанные.Свойство("Цена") И ЗначениеЗаполнено(СтруктураДанные.Цена) Тогда
		// При подборе наборов расчет цены не требуется - используется цена, указанная в подборе
	ИначеЕсли СтруктураДанные.Свойство("ВидЦен") Тогда
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));

	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанные.ДисконтнаяКарта) Тогда
		ТекПроцент = СтруктураДанные.ПроцентСкидкиНаценки;
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", ТекПроцент + СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
	КонецЕсли;
	
	// Серии номенклатуры
	СтруктураДанные.Вставить("ИспользоватьСерииНоменклатуры", СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры);
	// Серии номенклатуры
	
	СтруктураДанные.Вставить("ЭтоАлкогольнаяПродукция", СтруктураДанные.Номенклатура.АлкогольнаяПродукция);
	
	СтруктураДанные.Вставить("ВесЕдиницыТовара", СтруктураДанные.Номенклатура.Вес);
	СтруктураДанные.Вставить("ОбъемЕдиницыТовара", СтруктураДанные.Номенклатура.Объем);
	
	Если Не СтруктураДанные.Свойство("Склад") Тогда
		СтруктураДанные.Вставить("Склад", СтруктураДанные.Номенклатура.Склад);
		СтруктураДанные.Вставить("Ячейка", СтруктураДанные.Номенклатура.Ячейка);
	КонецЕсли;
	
	// Наборы
	Если СтруктураДанные.Свойство("ВидОперации") И ЭтоПродажа(СтруктураДанные.ВидОперации) Тогда
		НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	Иначе
		СтруктураДанные.Вставить("ЭтоНабор", СтруктураДанные.Номенклатура.ЭтоНабор);
	КонецЕсли; 
	// Конец Наборы
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, СтруктураДанные.ВидОперации);
		ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
	
	КонецЕсли;
	// Конец Партии
	
	// Серии номенклатуры
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("СтатусыСерийНоменклатуры", 0);
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
	// ИнтеграцияГосИС
	ИнтеграцияИСМПУНФ.ЗаполнитьСлужебныеРеквизитыИСМП(СтруктураДанные);
	// Конец ИнтеграцияГосИС
	
	// Прослеживаемость
	СтруктураДанные.Вставить("ПрослеживаемыйТовар", СтруктураДанные.Номенклатура.ПрослеживаемыйТовар 
		И СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	Если СтруктураДанные.ПрослеживаемыйТовар 
		И ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров") Тогда
		СтруктураДанные.Вставить("НомерГТД", Неопределено);
	КонецЕсли; 
	// Конец Прослеживаемость
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
			
		Иначе
			
			СтруктураДанные.Вставить("Коэффициент", 1);
			
		КонецЕсли;
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("МинимальнаяЦена", ЦенообразованиеСервер.ПолучитьМинимальнуюЦенуНоменклатуры(СтруктураДанные));

	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СтранаПроисхождения) Тогда
		
		СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	// Наборы
	Если СтруктураДанные.Свойство("ВидОперации") И ЭтоПродажа(СтруктураДанные.ВидОперации) Тогда
		НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	КонецЕсли; 
	// Конец Наборы
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервере
Процедура ЗапасыПартияПриИзмененииНаСервереБезКонтекста(СтруктураДанные)
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СтранаПроисхождения) Тогда
		
		СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
	Если РежимОстаткиИРезервы Тогда
		
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные, СтруктураДанные.Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(Номенклатура, ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	Результат = Новый Структура;
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		Результат.Вставить("ТекущийКоэффициент", 1);
	Иначе
		Результат.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		Результат.Вставить("Коэффициент", 1);
	Иначе
		Результат.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
	Результат,
	ВесИОбъемЕдиницТоваров(Номенклатура, ЕдиницаИзмерения, Результат.Коэффициент));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВесИОбъемЕдиницТоваров(Знач Номенклатура, Знач ЕдиницаИзмерения, Знач Коэффициент)
	
	Возврат РегистрыСведений.ВесИОбъемЕдиницТоваров.Значения(Номенклатура, ЕдиницаИзмерения, Коэффициент);
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Дата, ВалютаДокумента, Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"КонтактноеЛицоПодписант",
		Контрагент.КонтактноеЛицоПодписант
	);
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию
	);
	
	СтруктураДанные.Вставить(
		"НаименованиеДоговора",
		ДоговорПоУмолчанию.Наименование
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорПоУмолчанию.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		ДоговорПоУмолчанию.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"ВидСкидкиНаценки",
		ДоговорПоУмолчанию.ВидСкидкиНаценки
	);
	
	СтруктураДанные.Вставить(
		"ВидЦен",
		ДоговорПоУмолчанию.ВидЦен
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		?(ЗначениеЗаполнено(ДоговорПоУмолчанию.ВидЦен), ДоговорПоУмолчанию.ВидЦен.ЦенаВключаетНДС, Неопределено)
	);
	
	СтруктураДанные.Вставить(
		"СпособЗаполненияСтавкиНДС",
		Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(ДоговорПоУмолчанию)
	);
	
	СтруктураДанные.Вставить("СпособЗачетаПредоплаты", РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(ДоговорПоУмолчанию, Контрагент, Истина));
	
	СтруктураДанные.Вставить("БанковскийСчетКонтрагента", Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Контрагент, СтруктураДанные.ВалютаРасчетов));
	
	Если ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
		
		СтруктураДанные.Вставить("БанковскийСчет", Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Организация, СтруктураДанные.ВалютаРасчетов, Объект.Дата));
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетПоПроектам") И ЗначениеЗаполнено(ДоговорПоУмолчанию) И НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		СтруктураДанные.Вставить("Проект", Справочники.Проекты.ПолучитьПроектПоДоговору(ДоговорПоУмолчанию));
	КонецЕсли;
	
	УстановитьВидимостьДоговора();
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ДанныеКИКонтрагента = Справочники.Контрагенты.ДанныеКИКонтрагентаДляВыбораНаФорме(Контрагент, Элементы,
			ПоляКИДляОтправкиЧека());
		ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИКонтрагента);
	КонецЕсли;
	
	// Прослеживаемость
	СтруктураДанные.Вставить(
		"РеализацияВЕАЭС",
		Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент));
	// Конец Прослеживаемость
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

&НаСервере
Функция ПолучитьДанныеДоговорПриИзменении()
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"НаименованиеДоговора",
		Объект.Договор.Наименование
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Объект.Договор.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"ВидЦен",
		Объект.Договор.ВидЦен
	);
	
	СтруктураДанные.Вставить(
		"ВидСкидкиНаценки",
		Объект.Договор.ВидСкидкиНаценки
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Объект.Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		?(ЗначениеЗаполнено(Объект.Договор.ВидЦен), Объект.Договор.ВидЦен.ЦенаВключаетНДС, Неопределено)
	);
	
	СтруктураДанные.Вставить(
		"СпособЗачетаПредоплаты",
		РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Объект.Договор, Объект.Контрагент, Истина)
	);
	
	СтруктураДанные.Вставить(
		"СпособЗаполненияСтавкиНДС",
		Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(
			Объект.Договор));
			
	Если Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
		
		СтруктураДанные.Вставить("БанковскийСчет", Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Объект.Организация, СтруктураДанные.ВалютаРасчетов, Объект.Дата));
		СтруктураДанные.Вставить("БанковскийСчетКонтрагента", Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Объект.Контрагент, СтруктураДанные.ВалютаРасчетов, Объект.Дата));
		
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(ЭтоОткрытие = Ложь)
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	
	Если ЭтоПродажа(Объект.ВидОперации) Или ЭтоПередача(Объект.ВидОперации) Тогда
		
		Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
		
	ИначеЕсли  Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику") Тогда
		Если Не ЗначениеЗаполнено(СпособЗаполненияСтавкиНДС) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
				Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
			КонецЕсли;
		ИначеЕсли СпособЗаполненияСтавкиНДС = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСтавкиНДС.БезНДС") Тогда
			Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС");
		Иначе
			Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
		
		Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС");
		
	КонецЕсли;
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС ИЛИ ЭтоОткрытие Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
		// Доставка
		Элементы.СтавкаНДСДоставки.Видимость = Истина;
		Элементы.СуммаНДСДоставки.Видимость = Истина;
		
		СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию);
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС);
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;	
		
		// Доставка
		Если ЗначениеЗаполнено(Объект.НоменклатураДоставки) Тогда
			Объект.СтавкаНДСДоставки = Справочники.СтавкиНДС.СтавкаНДС(Объект.НоменклатураДоставки.ВидСтавкиНДС);
			Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДСДоставки) Тогда
				Объект.СтавкаНДСДоставки = СтавкаНДСПоУмолчанию;
			КонецЕсли; 
			Если Объект.СтоимостьДоставки<>0 Тогда
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСДоставки);
				Объект.СуммаНДСДоставки = СтоимостьДоставкиСНДС - СтоимостьДоставкиСНДС / ((СтавкаНДС + 100) / 100);
				Объект.СтоимостьДоставки = СтоимостьДоставкиСНДС - ?(Объект.СуммаВключаетНДС, 0, Объект.СуммаНДСДоставки);
			КонецЕсли; 
		КонецЕсли;
		// Конец Доставка
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		// Доставка
		Элементы.СтавкаНДСДоставки.Видимость = Ложь;
		Элементы.СуммаНДСДоставки.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
		    СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			Элементы.СчетФактураНадпись.Видимость = Истина;
		КонецЕсли;	
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;	
		
		// Доставка
		Объект.СтавкаНДСДоставки = СтавкаНДСПоУмолчанию;
		Объект.СуммаНДСДоставки = 0;
		// Конец Доставка
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, ПараметрыРасчета = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	
	Если ПараметрыРасчета=Неопределено Тогда
		ПараметрыРасчета = Новый Структура("СброситьФлагСкидкиРассчитаны",Истина);
	КонецЕсли;	
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ИспользоватьМинимальныеЦены", КэшЗначений.ИспользоватьМинимальныеЦены);

	ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(ПараметрыРасчета);

	// АвтоматическиеСкидки.
	Если ПараметрыРасчета.Свойство("СброситьФлагСкидкиРассчитаны") И ПараметрыРасчета.СброситьФлагСкидкиРассчитаны Тогда
		// Обновить кнопку на форме - красным цветом, если есть скидки и нужно их пересчитать
		СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Серии номенклатуры
	Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено Тогда
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(Объект.Курс) + " " + СокрЛП(НациональнаяВалюта);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(КурсНовый) + " " + СокрЛП(НациональнаяВалюта);
		
		ПараметрыВопроса = Новый Структура;
		ПараметрыВопроса.Вставить("КурсНовый", КурсНовый);
		ПараметрыВопроса.Вставить("КратностьНовый", КратностьНовый);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОПересчетеКурсаКратностиВалютыРасчетовЗавершение", ЭтотОбъект, ПараметрыВопроса);
		
		ТекстВопроса = НСтр("ru = 'На дату документа у валюты расчетов (" + КурсВалютыСтрокой + ") был задан курс.
									|Установить курс расчетов (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьКурсКратностьВалютыРасчетов()

&НаКлиенте
Процедура ВопросОПересчетеКурсаКратностиВалютыРасчетовЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.Курс = ДополнительныеПараметры.КурсНовый;
		Объект.Кратность = ДополнительныеПараметры.КратностьНовый;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));
		КонецЦикла;
			
		// Сформируем надпись цены и валюты.
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.СпециальныйНалоговыйРежим, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением,
		ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ТекстПредупреждения = "")
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТолькоПросмотр", 		  ЭтотОбъект.ТолькоПросмотр);
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			  Объект.Кратность);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СпециальныйНалоговыйРежим", Объект.СпециальныйНалоговыйРежим);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	  Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость", Объект.НДСВключатьВСтоимость);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.Договор);
	СтруктураПараметров.Вставить("Организация",			  Компания);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("ТекстПредупреждения",   ТекстПредупреждения);
	СтруктураПараметров.Вставить("ВалютаПередИзменением", ВалютаРасчетовПередИзменением);
	
	Если ЭтоПродажа(Объект.ВидОперации) Или ЭтоПередача(Объект.ВидОперации) Тогда
		СтруктураПараметров.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;
	
	Если ЭтоПродажа(Объект.ВидОперации) Тогда
		СтруктураПараметров.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
		СтруктураПараметров.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	КонецЕсли; 
	
	ЦенообразованиеКлиент.ДополнитьСтруктуруВызоваФормыЦеныИВалютыСтруктурнойЕдиницей(Объект, Объект.Запасы, Элементы.Запасы.ТекущиеДанные, СтруктураПараметров);
	
	// Открываем форму "Цены и Валюта".
	// Перезаполняем табличную часть "Затраты" если были внесены изменения в форме "Цены и Валюта".
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураЦеныИВалюта = РезультатЗакрытия;
	ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		Объект.ВидЦен = СтруктураЦеныИВалюта.ВидЦен;
		Объект.ВидСкидкиНаценки = СтруктураЦеныИВалюта.ВидСкидки;
		
		// ДисконтныеКарты
		Если ЗначениеЗаполнено(РезультатЗакрытия.ДисконтнаяКарта) И ЗначениеЗаполнено(РезультатЗакрытия.Контрагент) И Не Объект.Контрагент.Пустая() Тогда
			Если РезультатЗакрытия.Контрагент = Объект.Контрагент Тогда
				Объект.ДисконтнаяКарта = РезультатЗакрытия.ДисконтнаяКарта;
				Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатЗакрытия.ПроцентСкидкиПоДисконтнойКарте;
			Иначе // Выдадим сообщение и не будем менять данные о дисконтной карте.
				ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Дисконтная карта не считана. Владелец дисконтной карты не совпадает с контрагентом в документе.'"),
				,
				"Контрагент",
				"Объект");
			КонецЕсли;
		Иначе
			Объект.ДисконтнаяКарта = РезультатЗакрытия.ДисконтнаяКарта;
			Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатЗакрытия.ПроцентСкидкиПоДисконтнойКарте;
		КонецЕсли;
		// Конец ДисконтныеКарты
		
		Объект.ВалютаДокумента = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.Курс = СтруктураЦеныИВалюта.КурсРасчетов;
		Объект.Кратность = СтруктураЦеныИВалюта.КратностьРасчетов;
		Объект.НалогообложениеНДС = СтруктураЦеныИВалюта.НалогообложениеНДС;
		Объект.СпециальныйНалоговыйРежим = СтруктураЦеныИВалюта.СпециальныйНалоговыйРежим;
		Объект.СуммаВключаетНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.НДСВключатьВСтоимость = СтруктураЦеныИВалюта.НДСВключатьВСтоимость;
		
		ОбработатьИзмененияПоКнопкеЦеныИВалютыНаСервере(РезультатЗакрытия, ДополнительныеПараметры);
		
		// Пересчитываем цены по виду цен.
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены Тогда
			ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если НЕ СтруктураЦеныИВалюта.ПерезаполнитьЦены
			  И СтруктураЦеныИВалюта.ПересчитатьЦены Тогда	
			ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ВалютаРасчетовПередИзменением, "Запасы", СтруктураЦеныИВалюта.КурсПересчетаЦен);
			// Доставка
			ПересчитатьЦенуДоставки(ВалютаРасчетовПередИзменением, СтруктураЦеныИВалюта.КурсПересчетаЦен);
			ОбновитьСуммуНДСДоставки();
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если НЕ СтруктураЦеныИВалюта.ПерезаполнитьЦены
			И НЕ СтруктураЦеныИВалюта.СуммаВключаетНДС = СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
			ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Запасы");
			Если СтоимостьДоставкиСНДС<>0 Тогда
				ОбновитьСуммуНДСДоставкиПриРасчете();
			КонецЕсли; 
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			СтрокаТабличнойЧасти.СуммаПлатежа = ВалютыУНФКлиентСервер.Пересчитать(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));  
		КонецЦикла;
		
		// АвтоматическиеСкидки
		Если РезультатЗакрытия.ПерезаполнитьСкидки ИЛИ РезультатЗакрытия.ПерезаполнитьЦены ИЛИ РезультатЗакрытия.ПересчитатьЦены Тогда
			СброситьФлагСкидкиРассчитаныКлиент("ПерезаполнениеПоДаннымФормыЦеныИВалюта");
		КонецЕсли;
		
		// Ручная скидка - заполнение полей ввода на форме
		СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
		// Конец Ручная скидка	

	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", 
		Объект.ВидЦен, 
		Объект.ВидСкидкиНаценки, 
		Объект.ВалютаДокумента, 
		ВалютаРасчетов, 
		Объект.Курс, 
		КурсНациональнаяВалюта, 
		Объект.СуммаВключаетНДС, 
		УчетВалютныхОпераций, 
		Объект.НалогообложениеНДС,
		Объект.СпециальныйНалоговыйРежим,
		Объект.ДисконтнаяКарта,
		Объект.ПроцентСкидкиПоДисконтнойКарте);
		
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

&НаСервере
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыНаСервере(РезультатЗакрытия, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ВалютаРасчетовПередИзменением <> РезультатЗакрытия.ВалютаДокумента Тогда
		
		Объект.БанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Объект.Организация, Объект.ВалютаДокумента, Объект.Дата);
		Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.БанковскийСчетСубъекта(Объект.Контрагент, Объект.ВалютаДокумента, Объект.Дата);
		
	КонецЕсли;
	
	ОбновитьКартинкуДисконтнойКарты();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(ПоляНадписи)
	
	ТекстНадписи = "";
	
	// Валюта
	Если ПоляНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(ПоляНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			Если ПоляНадписи.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
				ТекстНадписи = ТекстНадписи + НСтр("ru = ' %Курс%'");
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", 
					СокрЛП(УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(ПоляНадписи.ВалютаДокумента)));
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Курс%", СокрЛП(Строка(ПоляНадписи.Курс)));
			Иначе
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(ПоляНадписи.ВалютаДокумента)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Вид цен
	Если ЗначениеЗаполнено(ПоляНадписи.ВидЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦен%'");
		Иначе	
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидЦен%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(ПоляНадписи.ВидЦен)));
	КонецЕсли;
	
	// Вид скидки наценки
	Если ЗначениеЗаполнено(ПоляНадписи.ВидСкидки) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидСкидкиНаценки%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидСкидкиНаценки%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидСкидкиНаценки%", СокрЛП(Строка(ПоляНадписи.ВидСкидки)));
	КонецЕсли;
	
	// Дисконтная карта.
	Если ЗначениеЗаполнено(ПоляНадписи.ДисконтнаяКарта)
		И ДисконтныеКартыУНФВызовСервера.СтарыйМеханизмСкидок(ПоляНадписи.ДисконтнаяКарта) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ДисконтнаяКарта%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ДисконтнаяКарта%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ДисконтнаяКарта%", Строка(ПоляНадписи.ПроцентСкидкиПоДисконтнойКарте)+ "% по карте"); //СокрЛП(Строка(СтруктураНадписи.ДисконтнаяКарта)));
	КонецЕсли;	
	
	// Налогообложение НДС
	Если ЗначениеЗаполнено(ПоляНадписи.НалогообложениеНДС) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %НалогообложениеНДС%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", РаботаСФормойДокументаКлиентСервер.КраткоеПредставлениеТипаНалогообложенияНДС(ПоляНадписи.НалогообложениеНДС));
	КонецЕсли;
	
	// Специальный налоговый режим.
	Если ЗначениеЗаполнено(ПоляНадписи.СпециальныйНалоговыйРежим)
		И ПоляНадписи.СпециальныйНалоговыйРежим <> ПредопределенноеЗначение("Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется") Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%СпециальныйНалоговыйРежим%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %СпециальныйНалоговыйРежим%'");
		КонецЕсли;	
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%СпециальныйНалоговыйРежим%", СокрЛП(Строка(ПоляНадписи.СпециальныйНалоговыйРежим)));
	КонецЕсли;
	
	// Флаг сумма включает НДС
	Если ПустаяСтрока(ТекстНадписи) Тогда	
		Если ПоляНадписи.СуммаВключаетНДС Тогда
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // ТекстНадписиЦеныИВалюта()

// ПодключаемоеОборудование
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл 
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("ВидОперации", СтруктураДанные.ВидОперации);
				СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("СтранаПроисхождения", ДанныеШтрихкода.Номенклатура.СтранаПроисхождения);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
				Если ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦен", СтруктураДанные.ВидЦен);
					Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
						И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
					Иначе
						СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
					КонецЕсли;
					СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки);
				КонецЕсли;
				
				// ДисконтныеКарты
				СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
				СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", СтруктураДанные.ДисконтнаяКарта);
				// Конец ДисконтныеКарты
				
				// МинимальныеЦены
				Если СтруктураДанные.Свойство("СтруктурнаяЕдиница") Тогда 					
					СтруктураДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", СтруктураДанные.СтруктурнаяЕдиница);					
				КонецЕсли;
				// Конец МинимальныеЦены
				
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из СтруктураДанные.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ПараметрыВыбора", Элементы.ЗапасыНоменклатура.ПараметрыВыбора);
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	// Конец ДисконтныеКарты
	
	ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, Неопределено, СтруктураДанные);

	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные",СтруктураДанные));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено 
			ИЛИ (НЕ ЭтоПродажа(Объект.ВидОперации) И ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор) Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор", ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор));
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения,НоменклатураНабора",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения,ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Заказ", "ПоложениеЗаказаПокупателя");
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				Если КэшЗначений.ИспользоватьМинимальныеЦены
					И НоваяСтрока.Свойство("МинимальнаяЦена")
					И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("МинимальнаяЦена") Тогда
					
					НоваяСтрока.МинимальнаяЦена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.МинимальнаяЦена;
					
				КонецЕсли;
				НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.ТипНоменклатурыЗапас = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас;
				
				НоваяСтрока.ВесЕдиницыТовара = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ВесЕдиницыТовара;
				НоваяСтрока.Вес = НоваяСтрока.ВесЕдиницыТовара * НоваяСтрока.Количество;
				НоваяСтрока.ОбъемЕдиницыТовара = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ОбъемЕдиницыТовара;
				НоваяСтрока.Объем = НоваяСтрока.ОбъемЕдиницыТовара * НоваяСтрока.Количество;
				
				// Прослеживаемость
				НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
					НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйТовар;
					ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
					НоваяСтрока.КодТНВЭД = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТоварнаяНоменклатураВЭД;
				Иначе
					НоваяСтрока.ПрослеживаемыйТовар = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
					ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				КонецЕсли;
				// Конец Прослеживаемость
				
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(НоваяСтрока, Объект, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
				НоваяСтрока.ЯчейкаДоступна = ЯчейкаДоступна(НоваяСтрока.СтруктурнаяЕдиница);
				
				Если ЭтоПродажа(Объект.ВидОперации) И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					// Наборы
					ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
					// Конец Наборы
					// АвтоматическиеСкидки.
					СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
					// Конец АвтоматическиеСкидки
				Иначе
					РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				КонецЕсли; 
				
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				НоваяСтрока.Вес = НоваяСтрока.ВесЕдиницыТовара * НоваяСтрока.Количество;
				НоваяСтрока.Объем = НоваяСтрока.ОбъемЕдиницыТовара * НоваяСтрока.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьОбъемИВесВДокументе();
	ОбновитьПодвалФормы();
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт 
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено
			ИЛИ (НЕ ЭтоПродажа(Объект.ВидОперации) И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор) Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор));
		Иначе
			
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения,НоменклатураНабора",ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения,ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Заказ", "ПоложениеЗаказаПокупателя");
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.ТипНоменклатурыЗапас = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас;
				
				// Прослеживаемость
				НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
				Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
					НоваяСтрока.ПрослеживаемыйТовар = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПрослеживаемыйТовар;
					ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
				Иначе
					НоваяСтрока.ПрослеживаемыйТовар = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
					ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				КонецЕсли; 
				// Конец Прослеживаемость
				
				ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(НоваяСтрока, Объект, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
				НоваяСтрока.ЯчейкаДоступна = ЯчейкаДоступна(НоваяСтрока.СтруктурнаяЕдиница);
				
				Если ЭтоПродажа(Объект.ВидОперации) И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
					// Наборы
					ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, ДанныеШтрихкода.СтруктураДанныеНоменклатуры);
					// Конец Наборы
					// АвтоматическиеСкидки.
					СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
					// Конец АвтоматическиеСкидки
				Иначе
					РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				КонецЕсли; 
				
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
			КонецЕсли;
			
		КонецЕсли;

	
	Если ДанныеШтрихкода.Свойство("Серия") И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
		СерииНоменклатурыУНФКлиентСервер.ДобавитьСерияВСтроку(НоваяСтрока, ДанныеШтрихкода.Серия, Объект);
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	ОбновитьПодвалФормы();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		Если НЕ ЭтоПродажа(Объект.ВидОперации) И ТекНекорректныйШтрихкод.Свойство("ЭтоНабор") И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", НСтр("ru = 'Набор'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		КонецЕсли; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

&НаСервере
Процедура ЗаполнитьКолонкуРезервПоРезервамНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьКолонкуРезервПоРезервам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
	// Наборы
	ОбновитьДанныеКартинокНаборов(Объект.Запасы, Объект.ДобавленныеНаборы);
	ОбновитьПризнакиНабора(Объект.Запасы);
	// Конец Наборы
	
	//Ячейки
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоРезервамНаСервере()

&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ПараметрыРасчетовСКонтрагентом = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "ВестиРасчетыПоЗаказам, ВестиРасчетыПоДоговорам");
		
		КонтрагентВестиРасчетыПоЗаказам = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоЗаказам;
		Элементы.Договор.Видимость = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоДоговорам;
		
	Иначе
		
		КонтрагентВестиРасчетыПоЗаказам = Ложь;
		Элементы.Договор.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	Если Контрагент.ВестиРасчетыПоДоговорам = Ложь Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеДоговора()
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		ДанныеДоговора = ПолучитьДанныеДоговорПриИзменении();
		ПечатьДокументовУНФКлиент.ПриИзмененииДоговораКонтрагента(Объект.Договор, Объект.ОснованиеПечатиСсылка, Объект.ОснованиеПечати, КэшЗначений);
		
		Если Объект.ВидОперации = ВидОперацииПомощника Тогда
			Если Объект.СпособЗачетаПредоплаты <> ДанныеДоговора.СпособЗачетаПредоплаты Тогда
				Объект.СпособЗачетаПредоплаты = ДанныеДоговора.СпособЗачетаПредоплаты;
				СпособЗачетаПредоплатыПриИзмененииНаСервере();
			КонецЕсли;
		ИначеЕсли Объект.СпособЗачетаПредоплаты <> СпособыЗачетаВручную Тогда
			Объект.СпособЗачетаПредоплаты = СпособыЗачетаВручную;
			СпособЗачетаПредоплатыПриИзмененииНаСервере();
		КонецЕсли;
		
		Если Объект.Предоплата.Количество() > 0
			И Объект.Договор <> ДоговорПередИзменением Тогда
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
			ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбОчисткеПредоплатыЗавершение", ЭтотОбъект, ПараметрыДокумента);
			ТекстВопроса = НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ОбработатьИзменениеУсловийДоговора(ДанныеДоговора, ДоговорПередИзменением);
		ЗаполнитьТаблицуПросмотраНаКлиенте();
		СпособЗаполненияСтавкиНДСДоИзменения = СпособЗаполненияСтавкиНДС;
		СпособЗаполненияСтавкиНДС = ДанныеДоговора.СпособЗаполненияСтавкиНДС;
		Если СпособЗаполненияСтавкиНДСДоИзменения <> СпособЗаполненияСтавкиНДС
			И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику") Тогда
			ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
		КонецЕсли;
		
	Иначе
		
		Объект.Заказ = Заказ;
		ПривестиЗаказКТипу();
		
	КонецЕсли;
	
	ЗаполнитьСоответствиеЗаказов();
	ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	Заказ = Объект.Заказ;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбОчисткеПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДоговорПередИзменением = ДополнительныеПараметры.ДоговорПередИзменением;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Предоплата.Очистить();
	Иначе
		Если ДополнительныеПараметры.Свойство("ИзменениеКонтрагента") Тогда
			Объект.Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			КонтрагентВестиРасчетыПоЗаказам = ДополнительныеПараметры.КонтрагентВестиРасчетыПоЗаказамПередИзменением;
			Элементы.Договор.Видимость = ДополнительныеПараметры.ВидимостьДоговораПередИзменением;
		КонецЕсли;
		Объект.Договор = ДоговорПередИзменением;
		Договор = ДоговорПередИзменением;
		Объект.Заказ = Заказ;
		ПривестиЗаказКТипу();
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеУсловийДоговора(ДополнительныеПараметры.ДанныеДоговора, ДоговорПередИзменением);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеУсловийДоговора(ДанныеДоговора, ДоговорПередИзменением)
	
	ЗаголовокПредставления = "";
	Если КэшЗначений.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати Тогда
		
		ЗаголовокПредставления = НСтр("ru = 'Договор: '");
		
	КонецЕсли;
	
	Объект.ОснованиеПечати = ЗаголовокПредставления + Строка(Объект.Договор);
	
	ВалютаРасчетовПередИзменением = ВалютаРасчетов;
	ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
	
	Если Не ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
		Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Курс      = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
	КонецЕсли;
	
	ИзменилсяВидЦен = Объект.ВидЦен <> ДанныеДоговора.ВидЦен 
		И ЗначениеЗаполнено(ДанныеДоговора.ВидЦен);
		
	ИзменилсяВидСкидки = Объект.ВидСкидкиНаценки <> ДанныеДоговора.ВидСкидкиНаценки;
		
	Если ДанныеДоговора.Свойство("ВызовИзПроцедурыПриИзмененииКонтрагента") Тогда
		
		// В дальнейшем реквизит ДисконтнаяКрата будет очищен.
		ОчиститьДисконтнуюКарту = ЗначениеЗаполнено(Объект.ДисконтнаяКарта)
			И ДисконтныеКартыУНФВызовСервера.НужноОчиститьДисконтнуюКартуПриСменеВладельца(
				Объект.Контрагент,
				Объект.ДисконтнаяКарта,
				ДанныеДоговора.ПустойКонтрагентПередИзменением);
		
	Иначе
		ОчиститьДисконтнуюКарту = Ложь;
	КонецЕсли;
	
	Если ОчиститьДисконтнуюКарту Тогда
		Объект.ДисконтнаяКарта = ПредопределенноеЗначение("Справочник.ДисконтныеКарты.ПустаяСсылка");
		Объект.ПроцентСкидкиПоДисконтнойКарте = 0;
		
		ДисконтныеКартыУНФКлиент.ПоказатьПользователюИнформациюОбОчисткеДКИРучныхСкидок();
	КонецЕсли;
	ПечатьДокументовУНФКлиент.ПриИзмененииДоговораКонтрагента(Объект.Договор, Объект.ОснованиеПечатиСсылка, Объект.ОснованиеПечати, КэшЗначений);
	
	ВопросВидЦен = ЗначениеЗаполнено(Объект.Договор) И (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки);
	Если ВопросВидЦен Тогда
		Если ИзменилсяВидЦен Тогда
			Объект.ВидЦен = ДанныеДоговора.ВидЦен;
		КонецЕсли; 
		Если ИзменилсяВидСкидки Тогда
			Объект.ВидСкидкиНаценки = ДанныеДоговора.ВидСкидкиНаценки;
		КонецЕсли; 
	КонецЕсли;
	
	ОткрытьФормуЦеныИВалюты = (ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов)
		И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеДоговора.ВалютаРасчетов)
		И Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
		И Объект.Запасы.Количество() > 0;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
	ПараметрыДокумента.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением);
	ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
	
	Объект.ВалютаДокумента = ВалютаРасчетов;
	Если ДанныеДоговора.Свойство("БанковскийСчет") Тогда
		
		Объект.БанковскийСчет = ДанныеДоговора.БанковскийСчет;
		
	КонецЕсли;
	
	Если ДанныеДоговора.Свойство("БанковскийСчетКонтрагента") Тогда
		
		Объект.БанковскийСчетКонтрагента = ДанныеДоговора.БанковскийСчетКонтрагента;
		
	КонецЕсли;
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = "";
		Если ВопросВидЦен Тогда
			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, 
				|отличные от установленных в документе. 
				|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
		КонецЕсли;
		
		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом. 
										|Необходимо проверить валюту документа.'");
		
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, ИзменилсяВидЦен, Истина, ТекстПредупреждения);
		
	ИначеЕсли ВопросВидЦен Тогда
		
		ПересчетНеобходим = (Объект.Запасы.Количество() > 0);
		
		СтруктураНадписи = 
			Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦен, ВидСкидки, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", 
				Объект.ВалютаДокумента, 
				ВалютаРасчетов, 
				Объект.Курс, 
				КурсНациональнаяВалюта, 
				Объект.СуммаВключаетНДС, 
				УчетВалютныхОпераций, 
				Объект.ВидЦен, 
				Объект.ВидСкидкиНаценки, 
				Объект.НалогообложениеНДС,
				Объект.СпециальныйНалоговыйРежим,
				Объект.ДисконтнаяКарта,
				Объект.ПроцентСкидкиПоДисконтнойКарте);
		
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		Если ПересчетНеобходим Тогда
			
			ТекстВопроса = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, отличные от установленных в документе. 
				|Пересчитать документ в соответствии с договором?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПересчетаПоВидуЦенЗавершение", ЭтотОбъект, ПараметрыДокумента);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	Иначе
		
		СтруктураНадписи = 
			Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦен, ВидСкидки, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", 
				Объект.ВалютаДокумента, 
				ВалютаРасчетов, 
				Объект.Курс, 
				КурсНациональнаяВалюта, 
				Объект.СуммаВключаетНДС, 
				УчетВалютныхОпераций, 
				Объект.ВидЦен, 
				Объект.ВидСкидкиНаценки, 
				Объект.НалогообложениеНДС,
				Объект.СпециальныйНалоговыйРежим,
				Объект.ДисконтнаяКарта,
				Объект.ПроцентСкидкиПоДисконтнойКарте);
		
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
	// Очистка заказа.
	Для каждого ТекСтрока Из Объект.Запасы Цикл
		ТекСтрока.Заказ = Неопределено;
	КонецЦикла;
	
	// Номенклатура
	УстановитьПараметрыВыбораНоменклатуры();
	
КонецПроцедуры // ОбработатьИзменениеУсловийДоговора()

&НаКлиенте
Процедура ВопросПересчетаПоВидуЦенЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора()

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Контрагент.АвтоМаксимальнаяШирина = НЕ Элементы.ОстатокВзаиморасчетов.Видимость;
	
	Если (ОбщегоНазначения.ЭтоМобильныйКлиент() ИЛИ НЕ Элементы.ГруппаПредоплата.Видимость) И НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		Элементы.ОстатокВзаиморасчетовСтраницаОплата.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ОстатокВзаиморасчетовСтраницаОплата.Видимость = НЕ Элементы.ОстатокВзаиморасчетов.Видимость И НЕ Объект.Контрагент.Ссылка.Пустая();
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	Элементы.ОстатокВзаиморасчетовСтраницаОплата.Заголовок = Элементы.ОстатокВзаиморасчетов.Заголовок;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредоплату(ТекущийОбъект)
	
	ТекущийОбъект.ЗаполнитьПредоплату();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	СтоимостьДоставкиСНДС = Объект.СтоимостьДоставки + ?(Объект.СуммаВключаетНДС, 0, Объект.СуммаНДСДоставки);
	// Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	// Конец Ручная скидка
	ИтогВсего = Объект.Запасы.Итог("Всего") + СтоимостьДоставкиСНДС;
	ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.СуммаНДСДоставки;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбъемИВесВДокументе()
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Объект.Вес = 0;
		Объект.Объем = 0;
		Возврат;
	КонецЕсли;
	
	ВесИтог = Объект.Запасы.Итог("Вес");
	Если ЗначениеЗаполнено(ВесИтог) Тогда
		Объект.Вес = ВесИтог;
	КонецЕсли;
	
	ОбъемИтог = Объект.Запасы.Итог("Объем");
	Если ЗначениеЗаполнено(ОбъемИтог) Тогда
		Объект.Объем = ОбъемИтог;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиУчетаВНалогообложении()
	
	ОпределитьВидимостьИУстановитьНастройкиУчетаВНалогообложении();
	Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,?(ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница),Объект.СтруктурнаяЕдиница, Неопределено),Объект.Дата);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПродажа(ВидОперации)
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоВозврат(ВидОперации)
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения");
	
КонецФункции

&НаКлиенте
Функция НаборОснованийПечати()
	
	Результат = Новый Массив;
	
	Если НЕ ЗаказВШапке Тогда
		Для каждого СтрокаТаблицы Из Объект.Запасы Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицы.Заказ = Объект.Заказ Тогда
				Продолжить;
			КонецЕсли;
			
			Если Результат.Найти(СтрокаТаблицы.Заказ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Результат.Добавить(СтрокаТаблицы.Заказ);
			
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		
		Результат.Добавить(Объект.ДокументОснование);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УказатьЦенуСертификата(Результат, ВыбраннаяСтрока) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ВыбраннаяСтрока.Цена = Результат;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеХарактеристикиПартииВКэш()
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	ИспользоватьПартии = ПолучитьФункциональнуюОпцию("ИспользоватьПартии");
	
	Если НЕ ИспользоватьПартии И НЕ ИспользоватьХарактеристики Тогда Возврат КонецЕсли;
	
	КэшХарактеристикиИПартии = Новый ТаблицаЗначений;
	
	КэшХарактеристикиИПартии.Колонки.Добавить("Номенклатура");
	КэшХарактеристикиИПартии.Колонки.Добавить("ИспользоватьХарактеристики");
	КэшХарактеристикиИПартии.Колонки.Добавить("ПроверятьЗаполнениеХарактеристики");
	КэшХарактеристикиИПартии.Колонки.Добавить("ЗаполнениеХарактеристикиПроверено");
	КэшХарактеристикиИПартии.Колонки.Добавить("ИспользоватьПартии");
	КэшХарактеристикиИПартии.Колонки.Добавить("ПроверятьЗаполнениеПартий");
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	МассивИменТабличныхЧастей = Новый Массив;
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		Если НЕ ТабличнаяЧасть.Реквизиты.Найти("Характеристика") = Неопределено
			Тогда
			МассивИменТабличныхЧастей.Добавить(ТабличнаяЧасть.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИмяТабличнойЧасти Из МассивИменТабличныхЧастей Цикл
		
		Для Каждого СтрокаТЧ Из Объект[ИмяТабличнойЧасти] Цикл
			
			НоваяСтрока = КэшХарактеристикиИПартии.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеХарактеристикиПартииИзКэш()
	
	Если КэшХарактеристикиИПартии = Неопределено Тогда Возврат КонецЕсли;
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	МассивИменТабличныхЧастей = Новый Массив;
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		Если НЕ ТабличнаяЧасть.Реквизиты.Найти("Характеристика") = Неопределено
			Тогда
			МассивИменТабличныхЧастей.Добавить(ТабличнаяЧасть.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИмяТабличнойЧасти Из МассивИменТабличныхЧастей Цикл
		
		Для Каждого СтрокаТЧ Из Объект[ИмяТабличнойЧасти] Цикл
		
			ПараметрыОтбора = Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура);
			
			НайденныеСтроки = КэшХарактеристикиИПартии.НайтиСтроки(ПараметрыОтбора);
			
			Если Не НайденныеСтроки.Количество() Тогда Продолжить КонецЕсли;
			
			СтрокаКэша = НайденныеСтроки[0];
			
			СтрокаТЧ.ИспользоватьХарактеристики = СтрокаКэша.ИспользоватьХарактеристики;
			СтрокаТЧ.ПроверятьЗаполнениеХарактеристики = СтрокаКэша.ПроверятьЗаполнениеХарактеристики;
			СтрокаТЧ.ЗаполнениеХарактеристикиПроверено = СтрокаКэша.ЗаполнениеХарактеристикиПроверено;
			СтрокаТЧ.ИспользоватьПартии = СтрокаКэша.ИспользоватьПартии;
			СтрокаТЧ.ПроверятьЗаполнениеПартий = СтрокаКэша.ПроверятьЗаполнениеПартий;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(ЭтоКонтекстныйВызов)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("ОстаткиПоГТД", Неопределено);
	ПараметрыПодбора.Вставить("ПоддержкаИнтеркампани", Истина);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ИндексТекущейСтроки", ?(ЗначениеЗаполнено(Элементы.Запасы.ТекущаяСтрока), Объект.Запасы.Индекс(Объект.Запасы.НайтиПоИдентификатору(Элементы.Запасы.ТекущаяСтрока)), 0));
	ПараметрыПодбора.Вставить("ЕстьКлючСвязиАвтоматическихСкидок", Неопределено);
		
	Если НЕ ЭтоКонтекстныйВызов Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	МассивИменПолей = Новый Массив;
	МассивИменПолей.Добавить("Резерв");
	МассивИменПолей.Добавить("Сумма");
	МассивИменПолей.Добавить("СуммаНДС");
	МассивИменПолей.Добавить("Всего");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи") Тогда
		
		МассивИменПолей.Добавить("СуммаСкидкиНаценки");
		
	КонецЕсли;
	
	ПараметрыПодбора.Вставить("ИменаПолей", МассивИменПолей);
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
	ГрузовыеТаможенныеДекларацииСервер.СформироватьОстаткиНомеровГТД(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиОстаткиНомеровГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
	
	Если ПараметрыПодбора.ИндексТекущейСтроки <> -1 Тогда
		
		СтрокаКоллекции = Объект.Запасы.Получить(ПараметрыПодбора.ИндексТекущейСтроки);
		Элементы.Запасы.ТекущаяСтрока = СтрокаКоллекции.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДПодобратьНаСервере(ЭтоКонтекстныйВызов)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ПоддержкаИнтеркампани", Истина);
	
	Если НЕ ЭтоКонтекстныйВызов Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
	ГрузовыеТаможенныеДекларацииСервер.ПодобратьНомераГТДПоПредыдущимПоступлениям(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиНомераГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
	
	// Прослеживаемость
	ОбновитьОтображениеПрослеживаемости();
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДОчиститьНомераИСтраныПроисхожденияНаСервере()
	
	ГрузовыеТаможенныеДекларацииСервер.ОчиститьНомераГТДИСтраныПроисхождения(Объект.Запасы);
	
	// Прослеживаемость
	ПрослеживаемостьФормыКлиентСерверУНФ.УдалитьСвязанныеЗаписиВыделенныхСтрок(ЭтотОбъект);
	ОбновитьОтображениеПрослеживаемости(); 
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкуДисконтнойКарты()
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Команды.СчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.СчитанаДисконтнаяКарта;
	Иначе
		Команды.СчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.СчитатьДисконтнуюКарту;
	КонецЕсли;
	
КонецПроцедуры

// Остатки в Табличной части
&НаКлиенте
Процедура ОбновитьОтображениеКолонокВРазрезеЗапасов()
	
	Элементы.ЗапасыРезерв.Видимость = Не РежимОстаткиИРезервы;
	Элементы.ЗапасыКонтекстноеМенюГруппаРаботаССтрокамиОбновить.Видимость = РежимОстаткиИРезервы;
	
	Если РежимОстаткиИРезервы Тогда
		Элементы.ЗапасыОстатки.Видимость = Истина;
		Элементы.ЗапасыСтруктурнаяЕдиница.Видимость = Ложь;
		
		Элементы.ЗапасыРезервДляРежимаОстатки.Видимость = Объект.Проведен;
		Элементы.ЗапасыВРезервеВсего.Видимость = Объект.Проведен;
		
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.Видимость = РазрешитьСкладыВТабличныхЧастях;
		
		Элементы.ЗапасыРезервДляРежимаОстатки.Видимость = РезервированиеЗапасов;
		Элементы.ЗапасыВРезервеВсего.Видимость = РезервированиеЗапасов;
		Элементы.ЗапасыЗарезервировано.Видимость = РезервированиеЗапасов;
		Элементы.ЗаполнитьКоличествоТемЧтоМожноОтгрузить.Видимость = Истина;
		Элементы.ЗапасыИзменитьРезервЗаполнитьПоРезервам.Видимость = РезервированиеЗапасов;
		
		Если КэшЗначений.УчетПоЯчейкам И Элементы.ЗапасыЯчейка.Видимость Тогда
			Элементы.ЗапасыЯчейка.Видимость = Ложь;
			Элементы.ЗапасыЯчейкаДляРежимаОстатки.Видимость = РазрешитьСкладыВТабличныхЧастях;
		КонецЕсли;
		
	Иначе
		Элементы.ЗапасыСтруктурнаяЕдиница.Видимость = ?(СкладВШапке, Ложь, Истина);
		Элементы.ЗапасыОстатки.Видимость = Ложь;
		Элементы.ЗаполнитьКоличествоТемЧтоМожноОтгрузить.Видимость = Ложь;
		Элементы.ЗапасыИзменитьРезервЗаполнитьПоРезервам.Видимость = Ложь;
		
		Если КэшЗначений.УчетПоЯчейкам И Элементы.ЗапасыЯчейкаДляРежимаОстатки.Видимость Тогда
			Элементы.ЗапасыЯчейка.Видимость = РазрешитьСкладыВТабличныхЧастях;
			Элементы.ЗапасыЯчейкаДляРежимаОстатки.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаЗаполнитьПоВсемСкладам.Видимость = Не СкладВШапке Или РежимОстаткиИРезервы;
	Элементы.ЗапасыОстатокВЯчейке.Видимость = Элементы.ЗапасыЯчейкаДляРежимаОстатки.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПоложениеСклада()
	
	Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке")
									И РазрешитьСкладыВТабличныхЧастях Тогда
		
		ЗначениеСклада = Объект.СтруктурнаяЕдиница;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если НЕ СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ЗначениеСклада Тогда
				Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
				УстановитьВидимостьОтПользовательскихНастроек();
				Возврат;
			КонецЕсли;
			
			ЗначениеСклада = СтрокаТабличнойЧасти.СтруктурнаяЕдиница;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПоложениеСкладаПриПроведении(ТекущийОбъект)
	
	Если ТекущийОбъект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		
		ЗначениеСклада = ТекущийОбъект.СтруктурнаяЕдиница;
		
		Для Каждого СтрокаТабличнойЧасти Из ТекущийОбъект.Запасы Цикл
			
			Если НЕ СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ЗначениеСклада Тогда
				ТекущийОбъект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");
				Элементы.СтруктурнаяЕдиница.Видимость = Ложь;
				Возврат;
			КонецЕсли;
			
			ЗначениеСклада = СтрокаТабличнойЧасти.СтруктурнаяЕдиница;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные = Неопределено, НоменклатураОтбора = Неопределено)
	
	НоменклатураВДокументахСервер.ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧасти(Объект, СтруктураДанные, НоменклатураОтбора)
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если Параметры.ВыбранноеПоле = "ЗапасыВРезерве" И Результат.Значение = Объект.Ссылка Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ЗапасыРезервДляРежимаОстатки;
		Возврат;
	КонецЕсли;
	
	Если Параметры.ВыбранноеПоле = "ЗапасыОстатокОбщий" ИЛИ Параметры.ВыбранноеПоле = "ЗапасыВРезерве" Тогда
		
		Если Результат.Значение = "ОтчетОстаткиНаСкладах" Тогда
			
			Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда Возврат КонецЕсли;
			
			Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "ПоМестамХранения");
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
			ОтборРасшифровки = Новый Соответствие;
			ОтборРасшифровки.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
			ОтборРасшифровки.Вставить("Характеристика", ТекущиеДанные.Характеристика);
			ОтборРасшифровки.Вставить("СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
			ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
			
			ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия);
			
		Иначе
			
			Если ТипЗнч(Результат.Значение) = Тип("Структура") И Результат.Значение.Свойство("Склад") 
				И Не ТекущиеДанные.СтруктурнаяЕдиница = Результат.Значение.Склад Тогда
				
				Если ЗначениеЗаполнено(ТекущиеДанные.НеХватает) И Не ТекущиеДанные.Количество = ТекущиеДанные.НеХватает Тогда
					
					НоваяСтрока = Объект.Запасы.Вставить(ТекущиеДанные.НомерСтроки);
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущиеДанные);
					
					НоваяСтрока.СтруктурнаяЕдиница = Результат.Значение.Склад;
					
					СтруктураОстатков = СвободныйОстатокПоСтруктурнойЕдинице(НоваяСтрока.СтруктурнаяЕдиница, НоваяСтрока.Номенклатура
					, НоваяСтрока.Характеристика, НоваяСтрока.Партия, НоваяСтрока.ЕдиницаИзмерения);
					
					НоваяСтрока.Количество = ТекущиеДанные.НеХватает;
					
					ТекущиеДанные.Количество = ТекущиеДанные.Количество - ТекущиеДанные.НеХватает;
					
					НоваяСтрока.Резерв = СтруктураОстатков.КоличествоРезерв;
					
					ЗаполнитьЗначенияОстатковПоНоменклатуре(НоваяСтрока);
					
					РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущиеДанные);
					РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
					
					ОбновитьПодвалФормы();
					РассчитатьОбъемИВесВДокументе();
					
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					
				Иначе
					
					ТекущиеДанные.СтруктурнаяЕдиница = Результат.Значение.Склад;
					
					СтруктураОстатков = СвободныйОстатокПоСтруктурнойЕдинице(ТекущиеДанные.СтруктурнаяЕдиница, ТекущиеДанные.Номенклатура
										, ТекущиеДанные.Характеристика, ТекущиеДанные.Партия, ТекущиеДанные.ЕдиницаИзмерения);
					
					ТекущиеДанные.Резерв = СтруктураОстатков.КоличествоРезерв;
					ТекущиеДанные.ОстатокСвободно = СтруктураОстатков.КоличествоСвободно;
					
					ЗаполнитьЗначенияОстатковПоНоменклатуре(ТекущиеДанные);
					
				КонецЕсли;
				
			Иначе
				
				Если Не ТипЗнч(Результат.Значение) = Тип("Структура") Тогда
					ПоказатьЗначение(,Результат.Значение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗначение(,Результат.Значение);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияОстатковПоНоменклатуре(ТекущиеДанные)
	
	Если РежимОстаткиИРезервы Тогда
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", 	ТекущиеДанные.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	ТекущиеДанные.Характеристика);
		СтруктураДанные.Вставить("Партия", 	ТекущиеДанные.Партия);
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", ТекущиеДанные.ИспользоватьХарактеристики);
		СтруктураДанные.Вставить("ИспользоватьПартии", ТекущиеДанные.ИспользоватьПартии);
		
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(СтруктураДанные, ТекущиеДанные.Номенклатура);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СвободныйОстатокПоСтруктурнойЕдинице(СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, ЕдиницаИзмерения)
	
	Коэффициент = ?(ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), ЕдиницаИзмерения.Коэффициент, 1);
	
	Организация = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Партия", Партия);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	ЕстьЗаказ = ЗначениеЗаполнено(Объект.Заказ);
	
	Если ЕстьЗаказ Тогда
		Запрос.УстановитьПараметр("Заказ", Объект.Заказ);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЗапасыОстаткиСвободные.КоличествоОстаток) КАК КоличествоСвободно,
		|	СУММА(ЗапасыОстаткиРезерв.КоличествоОстаток) КАК КоличествоРезерв
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|				И ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|				И Организация = &Организация
		|				И Характеристика = &Характеристика
		|				И Партия = &Партия
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстаткиСвободные,
		|	РегистрНакопления.Запасы.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|				И ЗаказПокупателя = &Заказ
		|				И Организация = &Организация
		|				И Характеристика = &Характеристика
		|				И Партия = &Партия
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстаткиРезерв
		|
		|УПОРЯДОЧИТЬ ПО
		|	КоличествоСвободно УБЫВ";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЗапасыОстаткиСвободные.КоличествоОстаток) КАК КоличествоСвободно
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|				И ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|				И Организация = &Организация
		|				И Характеристика = &Характеристика
		|				И Партия = &Партия
		|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстаткиСвободные
		|
		|УПОРЯДОЧИТЬ ПО
		|	КоличествоСвободно УБЫВ";
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СтруктураВозврата = Новый Структура("КоличествоСвободно, КоличествоРезерв");
	
	Пока Результат.Следующий() Цикл
		СтруктураВозврата.КоличествоСвободно = Результат.КоличествоСвободно/Коэффициент;
		СтруктураВозврата.КоличествоРезерв = ?(ЕстьЗаказ, Результат.КоличествоРезерв/Коэффициент, 0);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция СписокДокументовПоЗаказу(ТипОперации, СтруктураПараметров)
	Возврат НоменклатураВДокументахСервер.СписокДокументовПоЗаказу(Объект, ТипОперации, СтруктураПараметров);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьРеквизитыВТЧ(Объект, ИмяРеквизита = "")
	
	ЕстьИзменения = Ложь;
	
	Если (ПустаяСтрока(ИмяРеквизита)
		ИЛИ ИмяРеквизита="ЗаказПокупателя")
		И Объект.ПоложениеЗаказаПокупателя<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			Если СтрокаТабличнойЧасти.Заказ<>Объект.Заказ Тогда
				ЕстьИзменения = Истина;
				СтрокаТабличнойЧасти.Заказ = Объект.Заказ;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 	
	
	Если (ПустаяСтрока(ИмяРеквизита)
		ИЛИ ИмяРеквизита="СтруктурнаяЕдиница")
		И Объект.ПоложениеСклада<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			Если СтрокаТабличнойЧасти.СтруктурнаяЕдиница<>Объект.СтруктурнаяЕдиница
				ИЛИ СтрокаТабличнойЧасти.Ячейка<>Объект.Ячейка Тогда
				ЕстьИзменения = Истина;
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
				СтрокаТабличнойЧасти.Ячейка = Объект.Ячейка;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	Возврат ЕстьИзменения;
	
КонецФункции

// Заказ резерва при возврате

&НаСервере
Процедура ЗаполнитьСоответствиеЗаказов()
	
	КэшЗначений.Заказы.Очистить();	
	
	Если Объект.ВидОперации<>ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику")
		И Объект.ВидОперации<>ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку") Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаказыПоставщикам = Новый Массив;
	Если Объект.ПоложениеЗаказаПокупателя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") И ЗначениеЗаполнено(Объект.Заказ) Тогда
		ЗаказыПоставщикам.Добавить(Объект.Заказ);
	ИначеЕсли Объект.ПоложениеЗаказаПокупателя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			Если ЗначениеЗаполнено(СтрокаЗапасы.Заказ) И ЗаказыПоставщикам.Найти(СтрокаЗапасы.Заказ)=Неопределено Тогда
				ЗаказыПоставщикам.Добавить(СтрокаЗапасы.Заказ);
			КонецЕсли; 
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли; 
	
	Если ЗаказыПоставщикам.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнитьСоответствиеЗаказов(КэшЗначений.Заказы, ЗаказыПоставщикам);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаказыПокупателейИзКэша(ЗаказПоставщику)
	
	Если НЕ ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		Возврат Новый Массив;
	КонецЕсли; 
	
	Если Объект.ВидОперации<>ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику")
		И Объект.ВидОперации<>ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку") Тогда
		Возврат Новый Массив;
	КонецЕсли; 
	
	Результат = КэшЗначений.Заказы.Получить(ЗаказПоставщику);
	Если Результат=Неопределено Тогда
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(ЗаказПоставщику);
		ДополнитьСоответствиеЗаказов(КэшЗначений.Заказы, МассивЗаказов);
		Результат = КэшЗначений.Заказы.Получить(ЗаказПоставщику);
	КонецЕсли;
	
	Возврат Результат.ВыгрузитьЗначения();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьСоответствиеЗаказов(СоответствиеЗаказов, ЗаказыПоставщикам)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказыПоставщикам", ЗаказыПоставщикам);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаказПоставщику.ПоложениеЗаказаПокупателя = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|				ТОГДА ЗаказПоставщикуЗапасы.ЗаказПокупателя
	|			ИНАЧЕ ЗаказПоставщику.ЗаказПокупателя
	|		КОНЕЦ, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗаказПокупателя
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
	|		ПО (ЗаказПоставщикуЗапасы.Ссылка = ЗаказПоставщику.Ссылка)
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&ЗаказыПоставщикам)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщику.Ссылка,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаказПоставщику.ПоложениеЗаказаПокупателя = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|				ТОГДА ЗаказПоставщикуЗапасы.ЗаказПокупателя
	|			ИНАЧЕ ЗаказПоставщику.ЗаказПокупателя
	|		КОНЕЦ, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	|ИТОГИ ПО
	|	ЗаказПоставщику";
	ВыборкаЗаказы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказы.Следующий() Цикл
		СписокЗаказов = Новый СписокЗначений;
		ВыборкаДетали = ВыборкаЗаказы.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаДетали.ЗаказПокупателя) Тогда
				Продолжить;
			КонецЕсли; 
			СписокЗаказов.Добавить(ВыборкаДетали.ЗаказПокупателя);	
		КонецЦикла;
		СоответствиеЗаказов.Вставить(ВыборкаЗаказы.ЗаказПоставщику, СписокЗаказов);
	КонецЦикла; 
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьДоступностьПоляЗаказПокупателя(Элемент, СтандартнаяОбработка, ТекущаяСтрока)
	
	Если Объект.ПоложениеЗаказаПокупателя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") И ТекущаяСтрока<>Неопределено И ЗначениеЗаполнено(ТекущаяСтрока.Заказ) Тогда
		ДоступныеЗаказы = ЗаказыПокупателейИзКэша(ТекущаяСтрока.Заказ);
	ИначеЕсли Объект.ПоложениеЗаказаПокупателя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") И ЗначениеЗаполнено(Объект.Заказ) Тогда
		ДоступныеЗаказы = ЗаказыПокупателейИзКэша(Объект.Заказ);
	Иначе
		ДоступныеЗаказы = Новый Массив;
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеЗаказы));
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Если ДоступныеЗаказы.Количество()=0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В заказе поставщику не указаны заказы покупателей'"));
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьПоляЗаказыПокупателей(Форма)
	
	ЕстьЗаказыПокупателей = Ложь;
	Для каждого КлючИЗначение Из Форма.КэшЗначений.Заказы Цикл
		Если КлючИЗначение.Значение.Количество()>0 Тогда
			ЕстьЗаказыПокупателей = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ЗапасыЗаказПокупателя", "Видимость", ЕстьЗаказыПокупателей);
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиЗаказКТипу()
	
	Объект.Заказ = Элементы.Заказ.ОграничениеТипа.ПривестиЗначение(Заказ);
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.Заказ = Элементы.Заказ.ОграничениеТипа.ПривестиЗначение(СтрокаТабличнойЧасти.Заказ);
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя = Неопределено;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьКорректировкиПоДокументу(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаРеализации.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.ДокументОснование = &ДокументОснование
		|	И НЕ КорректировкаРеализации.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПередача(ВидОперации)
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение");
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстСодержания(Знач Номенклатура, Знач Характеристика)
	Возврат ТабличныеЧастиУНФ.ТекстСодержания(Номенклатура, Характеристика);
КонецФункции

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если НЕ Прогресс = Неопределено Тогда
		ОбработатьПодготовленныеДанные(Прогресс.АдресРезультата);
		ОбновитьПодвалФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров = Неопределено)
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПослеВыполненияФоновогоЗадания(ДлительнаяОперация, СтруктураПараметров);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗадания", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьИУстановитьНастройкиУчетаВНалогообложении(ЭтоИзменениеОперации = Ложь)
	
	ВидимостьГруппыУчетВНУДоИзменения = Элементы.ГруппаУчетВНУ.Видимость;
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		Элементы.ЗапасыТоварыНеДляПродажи.Видимость = Ложь;
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
		
		Возврат;
	Иначе
		Элементы.ЗапасыТоварыНеДляПродажи.Видимость = Истина;
		Элементы.ГруппаУчетВНУ.Видимость = Истина;
	КонецЕсли;
	
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, Объект.Дата);
	
	Если Не СистемаНалогообложенияСтруктура.ПлательщикУСН Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
	Иначе
		Элементы.ГруппаУчетВНУ.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ЗапасыТоварыНеДляПродажи.Видимость = Элементы.ГруппаУчетВНУ.Видимость;
	
	Если  Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю Тогда
		Элементы.ЗапасыТоварыНеДляПродажи.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Не ЭтоИзменениеОперации
		И СистемаНалогообложенияСтруктура.ПлательщикУСН И СистемаНалогообложенияСтруктура.ПлательщикЕНВД Тогда
		Объект.УчитыватьВНУ = НЕ (Объект.Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВЕНВД);
	КонецЕсли;
	
	ГруппаУчетВНУСталаВидимой = Не ВидимостьГруппыУчетВНУДоИзменения И Элементы.ГруппаУчетВНУ.Видимость;
	ГруппаУчетВНУСталаНевидимой = ВидимостьГруппыУчетВНУДоИзменения И Не Элементы.ГруппаУчетВНУ.Видимость;
	Если Объект.УчитыватьВНУ
		И ((НЕ Элементы.ГруппаУчетВНУ.Видимость И Объект.Ссылка.Пустая())
		Или ГруппаУчетВНУСталаНевидимой) Тогда
		Объект.УчитыватьВНУ = Ложь;
		Модифицированность = Истина;
	ИначеЕсли ГруппаУчетВНУСталаВидимой И Не Объект.УчитыватьВНУ Тогда
		Объект.УчитыватьВНУ = Истина;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоВозвратПоставщику(ВидОперации)
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПереработка(ВидОперации)
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку");
	
КонецФункции

#КонецОбласти

#Область ПодсистемаЭлектронныеДокументы

&НаСервере
Процедура УстановитьВидЭД()
	
	Элементы.ВидЭД.СписокВыбора.Очистить();
	
	Элементы.ВидЭД.СписокВыбора.Добавить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная, НСтр("ru = 'Товарная накладная'"));
	Элементы.ВидЭД.СписокВыбора.Добавить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот, НСтр("ru = 'Акт выполненных работ'"));
	Элементы.ВидЭД.СписокВыбора.Добавить(Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав, НСтр("ru = 'Акт на передачу прав'"));
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВидЭлектронногоДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная; 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодбором

&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти  = "Запасы";
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПодборВыполнить()

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	ЕстьСтруктурнаяЕдинцаВПодборе = НЕ ТаблицаДляЗагрузки.Колонки.Найти("СтруктурнаяЕдиница") = Неопределено;
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Заказ", "ПоложениеЗаказаПокупателя");
		
		Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке И РазрешитьСкладыВТабличныхЧастях Тогда
			Если ЕстьСтруктурнаяЕдинцаВПодборе И ЗначениеЗаполнено(СтрокаЗагрузки.СтруктурнаяЕдиница) И Не СтрокаЗагрузки.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница Тогда
				Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
				УстановитьВидимостьОтПользовательскихНастроек();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
		
		Если НоваяСтрока.Свойство("Пометка") Тогда
			
			НоваяСтрока.Пометка = Истина;
			
		КонецЕсли;
		
		Если НЕ СкладВШапке = Истина Тогда
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиница) Тогда
				
				НоваяСтрока.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗагрузки.Номенклатура, "ТипНоменклатуры, Вес, Объем, ЭтоНабор, СпособРасчетаЦеныНабора");
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("ВидОперации", Объект.ВидОперации);
			СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
			СтруктураДанныеНоменклатуры.Вставить("Партия", СтрокаЗагрузки.Партия);
			СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", СтрокаЗагрузки.ЕдиницаИзмерения);
			СтруктураДанныеНоменклатуры.Вставить("СтруктурнаяЕдиница", НоваяСтрока.СтруктурнаяЕдиница);
			
			Если ЗначенияРеквизитов.ЭтоНабор Тогда
				
				// Наборы
				Если ЗначениеЗаполнено(НоваяСтрока.Цена) 
					И ЗначенияРеквизитов.СпособРасчетаЦеныНабора <> Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих Тогда
					СтруктураДанныеНоменклатуры.Вставить("Цена", НоваяСтрока.Цена);
				КонецЕсли;
				Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", Объект.Дата);
					СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
					СтруктураДанныеНоменклатуры.Вставить("ВидЦен", Объект.ВидЦен);
					СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
				КонецЕсли;
				
				СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
				СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
				
				ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);

				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
				
				ЗаменитьСтрокуЗапасовДаннымиНабора(ЭтотОбъект, НоваяСтрока, СтруктураДанные);
				
				ЗаполнитьПризнакиИспользованияХарактеристик();
				
				Если РежимОстаткиИРезервы Тогда
					НоменклатураВДокументахСервер.ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧасти(Объект);
				КонецЕсли;
				
				Продолжить;
				// Конец Наборы
				
			Иначе
				
				НоваяСтрока.ТипНоменклатурыЗапас = (ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
												ИЛИ (ЗначенияРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
				НоваяСтрока.ВесЕдиницыТовара = ЗначенияРеквизитов.Вес;
				НоваяСтрока.Вес = НоваяСтрока.ВесЕдиницыТовара * СтрокаЗагрузки.Количество;
				НоваяСтрока.ОбъемЕдиницыТовара = ЗначенияРеквизитов.Объем;
				НоваяСтрока.Объем = НоваяСтрока.ОбъемЕдиницыТовара * СтрокаЗагрузки.Количество;
				
				ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, НоваяСтрока, СтруктураДанныеНоменклатуры);
				
				СерииНоменклатурыУНФКлиентСервер.ДополнитьСтруктуруДаннымиДляПолученияСерийНоменклатуры(Объект, СтруктураДанныеНоменклатуры);
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
				
			КонецЕсли;
			
			// Характеристики
			НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
			НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
			НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
			
			Если СтруктураДанные.ИспользоватьХарактеристики
				Тогда
				НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
			// Конец Характеристики
			
			//Партии
			НоваяСтрока.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
			НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
			
			Если СтруктураДанные.ИспользоватьПартии
				Тогда
				НоваяСтрока.Партия = СтруктураДанные.Партия;
			КонецЕсли;
			// Конец Партии
			
			НоваяСтрока.СтатусыСерийНоменклатуры = СтруктураДанные.СтатусыСерийНоменклатуры;
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
			
			// Прослеживаемость
			НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
			Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
				НоваяСтрока.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
				ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, НоваяСтрока);
				НоваяСтрока.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
			Иначе
				НоваяСтрока.ПрослеживаемыйТовар = Ложь;
			КонецЕсли;
			Если НЕ НоваяСтрока.ПрослеживаемыйТовар Тогда
				НоваяСтрока.НомерГТД = СтруктураДанные.НомерГТД;
			Иначе
				НоваяСтрока.НомерГТД = Неопределено;
			КонецЕсли; 
			// Конец Прослеживаемость
			
			// ИнтеграцияГосИС
			Если ФОВестиУчетМаркируемойПродукцииИСМП Тогда
				ИнтеграцияИСМПУНФ.ЗаполнитьСлужебныеРеквизитыИСМПВСтрокеТЧ(НоваяСтрока);
			КонецЕсли;
			// Конец ИнтеграцияГосИС
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаДляЗагрузки.Количество() > 0 Тогда
		
		СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
		
	КонецЕсли;
	
	// Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	// Конец Ручная скидка   
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");
	
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
	КонецЕсли;
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Запасы", Новый Структура);
	// Конец ИнтеграцияГосИС
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаСервере
Функция ПоместитьПредоплатаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Предоплата.Выгрузить(,
			"Документ,
			|НомерСертификата,
			|Заказ,
			|СуммаРасчетов,
			|Курс,
			|Кратность,
			|СуммаПлатежа"),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьПредоплатаВХранилище()

&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Объект.Предоплата.Загрузить(ТаблицаДляЗагрузки);
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Доступность колонки Резерв
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ВидОперации", Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ЗаказПокупателя", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Резерв", 0);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыРезерв");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Под заказ>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ВидОперации", Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Заказ", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.Резерв", 0);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыРезерв");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Под заказ>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ТипНоменклатурыЗапас", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыРезерв");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыРезервДляРежимаОстатки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Для товаров>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	// Доступность колонки СтруктурнаяЕдиница
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ТипНоменклатурыЗапас", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСтруктурнаяЕдиница,ЗапасыЯчейка,ЗапасыЯчейкаДляРежимаОстатки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Для товаров>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	// Наборы
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.НоменклатураНабора", Справочники.Номенклатура.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыНоменклатура,ЗапасыХарактеристика,ЗапасыКоличество,ЗапасыЕдиницаИзмерения");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	// Конец Наборы
	
	// Скидки
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.ПроцентСкидкиНаценки", 100);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "Объект.Запасы.СуммаСкидкиНаценки", Новый ПолеКомпоновкиДанных("Объект.Запасы.Сумма"),ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПроцентСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СуммаСкидкиНаценки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаСкидкиНаценки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "сумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ПроцентАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыПроцентАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "%");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.СуммаАвтоматическойСкидки", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыСуммаАвтоматическойСкидки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "сумма");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	// Конец Скидки
	
	// Характеристики
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
	
	// Ячейки
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ЯчейкаДоступна", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЯчейка");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыОстатокВЯчейке");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЯчейкаДляРежимаОстатки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "");
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	НоменклатураВДокументахСервер.УстановитьУсловноеОформлениеЗапасыИРезервы(ЭтаФорма);
	
	// Минимальные цены
	ЦенообразованиеСервер.УстановитьУсловноеОформлениеМинимальнойЦены(УсловноеОформление, "Запасы", ?(КэшЗначений.Свойство("ИспользоватьМинимальныеЦены"), КэшЗначений.ИспользоватьМинимальныеЦены, Ложь));
	
	// Прослеживаемость
	ПрослеживаемостьФормыУНФ.ОбновитьУсловноеОформлениеТабличнойЧастиДляПрослеживаемости(ЭтаФорма);
	

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность(ИзмененВидОперации = Ложь)
	
	Элементы.ФормаПровести.Доступность = РазрешеноРедактированиеДокумента;
	Элементы.ФормаЗаписать.Доступность = РазрешеноРедактированиеДокумента;
	Элементы.ФормаПровестиИЗакрыть.Доступность = РазрешеноРедактированиеДокумента;
	
	Элементы.ЗапасыГруппаСерииНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	// Доступность типов заказов.
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту") Тогда
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки")
		ИЛИ ЭтоПродажа(Объект.ВидОперации)
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию") Тогда
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
	Иначе
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
		МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		ДопустимыеТипы = Новый ОписаниеТипов(МассивОтбора);
	КонецЕсли;
	
	Элементы.Заказ.ОграничениеТипа = ДопустимыеТипы;
	Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыЗаказ.ОграничениеТипа = ДопустимыеТипы;
	
	Элементы.ЦеныИВалюта.МаксимальнаяШирина = 34;
	
	// ГрупповоеИзменениеСтрок
	Если ИзмененВидОперации Тогда
		ЗаполнитьСписокДействий();
	КонецЕсли;
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПоставщикуЗаказПокупателя") Тогда
		Элементы.ЗапасыИзменениеСтрокЗначение.ОграничениеТипа = ДопустимыеТипы;
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	// Сформируем надпись цены и валюты.
	
	// Виды цен.
	Если ЭтоВозврат(Объект.ВидОперации) Тогда
		Объект.ВидЦен = Справочники.ВидыЦен.ПустаяСсылка();
	КонецЕсли;
	
	// Скидки и дисконтные карты.
	Если ЭтоПродажа(Объект.ВидОперации) Тогда
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРучнаяСкидка.Видимость = Истина;
		Элементы.СчитатьДисконтнуюКарту.Видимость = Истина; // ДисконтныеКарты
		
		// АвтоматическиеСкидки
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыАвтоматическаяСкидка.Видимость = Истина;
		Элементы.ЗапасыРассчитатьСкидкиНаценки.Видимость = Истина;
		// Конец АвтоматическиеСкидки
	Иначе
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиЗакупки") Тогда
			Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРучнаяСкидка.Видимость = Истина;
		Иначе
			Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРучнаяСкидка.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.НастроитьОкругления.Видимость = Ложь;
		
		// АвтоматическиеСкидки
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыАвтоматическаяСкидка.Видимость = Ложь;
		Элементы.ЗапасыРассчитатьСкидкиНаценки.Видимость = Ложь;
		СброситьФлагСкидкиРассчитаныСервер("РассчитатьСуммуВСтрокеТабличнойЧасти");
		// Конец АвтоматическиеСкидки
		
		Объект.ВидСкидкиНаценки = Неопределено;
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			Если СтрокаЗапасы.ПроцентСкидкиНаценки <> 0
					И Не Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРучнаяСкидка.Видимость Тогда
				СтрокаЗапасы.ПроцентСкидкиНаценки = 0;
			КонецЕсли;
			
			// АвтоматическиеСкидки
			Если СтрокаЗапасы.СуммаАвтоматическойСкидки <> 0 Или СтрокаЗапасы.ПроцентАвтоматическойСкидки <> 0 Тогда
				СтрокаЗапасы.ПроцентАвтоматическойСкидки = 0;
				СтрокаЗапасы.СуммаАвтоматическойСкидки = 0;
			КонецЕсли;
			// Конец АвтоматическиеСкидки
		КонецЦикла;
		
		// ДисконтныеКарты
		Элементы.СчитатьДисконтнуюКарту.Видимость = Ложь;
		Если Не Объект.ДисконтнаяКарта.Пустая() Тогда
			Объект.ДисконтнаяКарта = ПредопределенноеЗначение("Справочник.ДисконтныеКарты.ПустаяСсылка");
			Объект.ПроцентСкидкиПоДисконтнойКарте = 0;
		КонецЕсли;
		// Конец ДисконтныеКарты
	КонецЕсли;
	
	ПоляНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.СпециальныйНалоговыйРежим, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(ПоляНадписи);
	
	// Номенклатура.
	УстановитьПараметрыВыбораНоменклатуры();
	
	// Партии.
	МассивСтатусовДляВыбораНоменклатуры = Новый Массив;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту") Тогда
		НовыйМассив = Новый Массив();
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		НовыйМассив.Добавить(НовыйПараметр);
		МассивСтатусовДляВыбораНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		НовыйПараметр = Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки") Тогда
		НовыйМассив = Новый Массив();
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
		НовыйМассив.Добавить(НовыйПараметр);
		МассивСтатусовДляВыбораНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
		НовыйПараметр = Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения") Тогда
		НовыйМассив = Новый Массив();
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ОтветственноеХранение"));
		НовыйМассив.Добавить(НовыйПараметр);
		МассивСтатусовДляВыбораНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ОтветственноеХранение"));
		НовыйПараметр = Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ОтветственноеХранение"));
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
	ИначеЕсли ЭтоПродажа(Объект.ВидОперации) Тогда
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		
		МассивСтатусовДляВыбораНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		МассивСтатусовДляВыбораНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		
		МассивСобственныеЗапасыИТоварыНаКомиссии = Новый ФиксированныйМассив(НовыйМассив);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", МассивСобственныеЗапасыИТоварыНаКомиссии);
		НовыйПараметр2 = Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", МассивСобственныеЗапасыИТоварыНаКомиссии);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыйМассив.Добавить(НовыйПараметр2);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
	Иначе
		НовыйМассив = Новый Массив();
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		НовыйМассив.Добавить(НовыйПараметр);
		МассивСтатусовДляВыбораНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		НовыйПараметр = Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
	КонецЕсли;
	
	// Документ основание.
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию"));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		ПараметрыВыбораДокументаОснования = НовыеПараметры;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку"));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		ПараметрыВыбораДокументаОснования = НовыеПараметры;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение"));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		ПараметрыВыбораДокументаОснования = НовыеПараметры;
	ИначеЕсли ЭтоПродажа(Объект.ВидОперации) Тогда
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию"));
		МассивОтПоставщикаИНаКомиссии = Новый ФиксированныйМассив(НовыйМассив);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", МассивОтПоставщикаИНаКомиссии);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		ПараметрыВыбораДокументаОснования = НовыеПараметры;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика"));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		ПараметрыВыбораДокументаОснования = НовыеПараметры;
	Иначе
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение"));
		МассивОприходование = Новый ФиксированныйМассив(НовыйМассив);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", МассивОприходование);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		ПараметрыВыбораДокументаОснования = НовыеПараметры;
	КонецЕсли;
	
	// Зачет предоплаты.
	Если ЭтоПродажа(Объект.ВидОперации)
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику") Тогда
		Элементы.ГруппаПредоплата.Видимость = Истина;
		Элементы.СпособЗачетаПредоплаты.Доступность = ЭтоПродажа(Объект.ВидОперации);
		Элементы.ВариантЗаполненияРасшифровки.Доступность = Элементы.СпособЗачетаПредоплаты.Доступность;
		Элементы.ОткрытьПомощникЗачетаПредоплаты.Доступность = Элементы.СпособЗачетаПредоплаты.Доступность;
	Иначе
		Элементы.ГруппаПредоплата.Видимость = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредоплатаДобавитьОплатуСертификатом", "Видимость", ЭтоПродажа(Объект.ВидОперации));
	
	// Резервы.
	Если ЭтоПродажа(Объект.ВидОперации)
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку") Тогда
		Элементы.ЗапасыИзменитьРезерв.Видимость = Истина;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость = Истина;
		Элементы.ОстаткиИРезервы.Видимость = Истина;
	Иначе
		Элементы.ЗапасыИзменитьРезерв.Видимость = Ложь;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость = Ложь;
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			СтрокаЗапасы.Резерв = 0;
		КонецЦикла;
		
		РежимОстаткиИРезервы = Ложь;
		Элементы.ОстаткиИРезервы.Пометка = Ложь;
		Элементы.ОстаткиИРезервы.Видимость = Ложь;
		Элементы.ЗапасыСтруктурнаяЕдиница.Видимость = Не СкладВШапке;
		Элементы.ЗапасыОстатки.Видимость = Ложь;
		
	КонецЕсли;
	
	// Подразделение.
	Если ЭтоПродажа(Объект.ВидОперации) Тогда
		
		Элементы.Подразделение.АвтоВыборНезаполненного = Истина;
		Элементы.Подразделение.АвтоОтметкаНезаполненного = Истина;
		
	КонецЕсли;
	
	Элементы.СчетФактураНадпись.Видимость = Истина;
	
	// Ставка НДС, Сумма НДС, Всего.
	Если ИзмененВидОперации Тогда
		ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС();
	Иначе
		
		Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
			
			Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
			Элементы.ЗапасыСуммаНДС.Видимость = Истина;
			Элементы.ЗапасыВсего.Видимость = Истина;
			Элементы.СчетФактураНадпись.Видимость = Истина;
			
		Иначе
			
			Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
			Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
			Элементы.ЗапасыВсего.Видимость = Ложь;
			Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
				Элементы.СчетФактураНадпись.Видимость = Истина;
			Иначе
				Элементы.СчетФактураНадпись.Видимость = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику 
		Или Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту Тогда
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница"));
		
		МассивТипыСтруктурнойЕдиницы = Новый ФиксированныйМассив(НовыйМассив);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивТипыСтруктурнойЕдиницы);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СтруктурнаяЕдиница.ПараметрыВыбора = НовыеПараметры;
		Элементы.ЗапасыСтруктурнаяЕдиница.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СтруктурнаяЕдиница.ПараметрыВыбора = НовыеПараметры;
		Элементы.ЗапасыСтруктурнаяЕдиница.ПараметрыВыбора = НовыеПараметры;
		
		Если Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы <> ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад") Тогда
			Объект.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		КонецЕсли;
		
		Если Не СкладВШапке Тогда 
			
			МассивСтруктурныхЕдиницНеверногоТипа = СтруктурныеЕдиницыНеверногоТипа();
			
			Если МассивСтруктурныхЕдиницНеверногоТипа.Количество() Тогда
				Для Каждого СтрокаТаблицы Из Объект.Запасы Цикл
					Если Не МассивСтруктурныхЕдиницНеверногоТипа.Найти(СтрокаТаблицы.СтруктурнаяЕдиница) = Неопределено Тогда
						СтрокаТаблицы.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВидимостьЭлементовПродажаВозврат = ЭтоПродажа(Объект.ВидОперации)
		Или Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику;
	
	Если Элементы.СчетФактураНадпись.Видимость Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетФактураНадпись", "Видимость", ВидимостьЭлементовПродажаВозврат);
	КонецЕсли;
	
	ЭтоПередачаНаКомиссию = (Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию);
	ЭтоВозвратПоставщику = (Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику);
	ЭтоВозвратКомитенту = (Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту);
	ЭтоПродажаПокупателю = ЭтоПродажа(Объект.ВидОперации);
	
	СведенияОбИмпортеВидны = (ЭтоПродажаПокупателю ИЛИ ЭтоВозвратПоставщику ИЛИ ЭтоПередачаНаКомиссию ИЛИ ЭтоВозвратКомитенту)
		И КэшЗначений.УчетГТД;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыНомерГТД", "Видимость", 							СведенияОбИмпортеВидны
		И Не КэшЗначений.ВестиУчетПрослеживаемыхТоваров);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыГруппаРНПТ", "Видимость", 						СведенияОбИмпортеВидны
		И КэшЗначений.ВестиУчетПрослеживаемыхТоваров);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтранаПроисхождения", "Видимость", 				СведенияОбИмпортеВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТД", "Видимость", 								СведенияОбИмпортеВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТДКонтекст", "Видимость", 						СведенияОбИмпортеВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомераГТДКонтекстЗаполнитьПоФактическимОстаткам", "Видимость", СведенияОбИмпортеВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомераГТДКонтекстПодобрать", "Видимость", 				СведенияОбИмпортеВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомераГТДЗаполнитьПоФактическимОстаткам", "Видимость",	СведенияОбИмпортеВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомераГТДПодобрать", "Видимость", 						СведенияОбИмпортеВидны);
	
	Если НЕ СведенияОбИмпортеВидны Тогда
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			
			СтрокаЗапасы.НомерГТД = Неопределено;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	Элементы.ЗапасыЦена.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаСкидкиНаценки.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСумма.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.Скидки.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	
	Элементы.Контрагент.Заголовок = ЗаголовокПоляКонтрагент();
	
	РаботаСФормойДокумента.НастроитьГруппуЦеныИВалюты(ЭтотОбъект);
	
	// Установка видимости и доступности элементов ЕГАИС
	УстановитьДоступностьЭлементовЕГАИС();
	
	// Доставка
	Элементы.ГруппаДоставка.Видимость = ЭтоПродажа(Объект.ВидОперации);
	// Конец Доставка
	
	// Наборы
	Элементы.ЗапасыКартинкаНабора.Видимость = Ложь;
	Если ЭтоПродажа(Объект.ВидОперации) Тогда
		Для каждого Стр Из Объект.Запасы Цикл
			Если Стр.КартинкаНабора > 0 Тогда
				Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	МассивПараметров = Новый Массив;
	МассивСтатусов = Новый ФиксированныйМассив(МассивСтатусовДляВыбораНоменклатуры);
	Для каждого ЭлементМассива Из Элементы.ЗапасыНоменклатура.ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя="Отбор.ЭтоНабор" Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементМассива.Имя="Дополнительно.СтатусыПартий" Тогда 
			Продолжить;
		КонецЕсли;
		МассивПараметров.Добавить(ЭлементМассива);
	КонецЦикла; 
	Если НЕ ЭтоПродажа(Объект.ВидОперации) Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЭтоНабор", Ложь));
	КонецЕсли;
	
	МассивПараметров.Добавить(Новый ПараметрВыбора("Дополнительно.СтатусыПартий", МассивСтатусов));
	Элементы.ЗапасыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	// Конец Наборы
	
	// Прослеживаемость
	ПрослеживаемостьФормыКлиентСерверУНФ.НастроитьВидимостьКолонокРНПТ(ЭтотОбъект, , , ПрослеживаемаяОперация(Объект.ВидОперации));
	// Конец Прослеживаемость
	
	УстановитьВидимостьОтПользовательскихНастроек();
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаСервере
Функция СтруктурныеЕдиницыНеверногоТипа()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСтруктурныхЕдиниц", Объект.Запасы.Выгрузить(,"СтруктурнаяЕдиница"));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&МассивСтруктурныхЕдиниц)
	|	И НЕ СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораНоменклатуры()
	
	ТипЗапас = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас");
	ТипУслуга = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга");
	ТипПодарочныйСертификат = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтотОбъект,
		"РасходнаяНакладная", НастройкиФормыВыбораНоменклатуры);
	
	ОбщийПараметр = Новый ПараметрВыбора("Дополнительно.ТипВладельца", "РасходнаяНакладная");
	
	Если ЭтоПродажа(Объект.ВидОперации) Тогда
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ТипЗапас);
		НовыйМассив.Добавить(ТипУслуга);
		Если Не РаботаСПодарочнымиСертификатамиКлиентСервер.ИспользованиеСертификатовЗапрещено(ВалютаРасчетов, НациональнаяВалюта) Тогда
			НовыйМассив.Добавить(ТипПодарочныйСертификат);
		КонецЕсли;
		МассивЗапасыИУслуги = Новый ФиксированныйМассив(НовыйМассив);
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивЗапасыИУслуги));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Дополнительно.ОграничениеТипа", МассивЗапасыИУслуги));
		НовыйМассив.Добавить(ОбщийПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыНоменклатура.ПараметрыВыбора = НовыеПараметры;
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			Если СтрокаЗапасы.Номенклатура.ТипНоменклатуры = ТипПодарочныйСертификат
				И РаботаСПодарочнымиСертификатамиКлиентСервер.ИспользованиеСертификатовЗапрещено(ВалютаРасчетов, НациональнаяВалюта) Тогда
				СтрокаЗапасы.Номенклатура = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику") Тогда
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ТипЗапас);
		Если Не РаботаСПодарочнымиСертификатамиКлиентСервер.ИспользованиеСертификатовЗапрещено(ВалютаРасчетов, НациональнаяВалюта) Тогда
			НовыйМассив.Добавить(ТипПодарочныйСертификат);
		КонецЕсли;
		МассивЗапасыИУслуги = Новый ФиксированныйМассив(НовыйМассив);
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивЗапасыИУслуги));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Дополнительно.ОграничениеТипа", МассивЗапасыИУслуги));
		НовыйМассив.Добавить(ОбщийПараметр);
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ЭтоНабор", Ложь));
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыНоменклатура.ПараметрыВыбора = НовыеПараметры;
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			Если СтрокаЗапасы.Номенклатура.ТипНоменклатуры = ТипУслуга Тогда
				СтрокаЗапасы.Номенклатура = Неопределено;
			ИначеЕсли СтрокаЗапасы.Номенклатура.ТипНоменклатуры = ТипПодарочныйСертификат
				И ЗначениеЗаполнено(ВалютаРасчетов) И ВалютаРасчетов <> НациональнаяВалюта Тогда
				СтрокаЗапасы.Номенклатура = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Объект.НоменклатураДоставки) Тогда
			Объект.НоменклатураДоставки = Неопределено;
		КонецЕсли;
		Объект.СтоимостьДоставки = 0;
		Объект.СуммаНДСДоставки = 0;
		
	Иначе
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ТипЗапас));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ЭтоНабор", Ложь));
		НовыйМассив.Добавить(ОбщийПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыНоменклатура.ПараметрыВыбора = НовыеПараметры;
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			Если СтрокаЗапасы.Номенклатура.ТипНоменклатуры = ТипУслуга Тогда
				СтрокаЗапасы.Номенклатура = Неопределено;
			ИначеЕсли СтрокаЗапасы.Номенклатура.ТипНоменклатуры = ТипПодарочныйСертификат Тогда
				СтрокаЗапасы.Номенклатура = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Объект.НоменклатураДоставки) Тогда
			Объект.НоменклатураДоставки = Неопределено;
		КонецЕсли;
		Объект.СтоимостьДоставки = 0;
		Объект.СуммаНДСДоставки = 0;
		
	КонецЕсли;
	
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтПользовательскихНастроек()
	
	ЭтоОтветХранение = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения"));
	
	Если Объект.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЗаказОснование", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПоЗаказу", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЗаказ", "Видимость", НЕ ЭтоОтветХранение);
		ЗаказВШапке = Ложь;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЗаказОснование", "Видимость", НЕ ЭтоОтветХранение);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПоЗаказу", "Видимость", НЕ ЭтоОтветХранение);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЗаказ", "Видимость", Ложь);
		ЗаказВШапке = Истина;
	КонецЕсли;
	
	Если Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ячейка", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиница", "Видимость", Истина);
		Если Не РежимОстаткиИРезервы Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейка", "Видимость", Истина);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейкаДляРежимаОстатки", "Видимость", Истина);
		СкладВШапке = Ложь;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Ячейка", "Видимость", Не Объект.СтруктурнаяЕдиница.ОрдерныйСклад);
		Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = НЕ УправлениеНебольшойФирмойПовтИсп.ВключеноИспользованиеЯчеек() ИЛИ НЕ Элементы.Ячейка.Видимость;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиница", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейка", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейкаДляРежимаОстатки", "Видимость", Ложь);
		СкладВШапке = Истина;
	КонецЕсли;
	
	Если Объект.ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Проект", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыПроект", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Проект", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыПроект", "Видимость", Ложь);
	КонецЕсли;
	
	Элементы.ГруппаЗаполнитьПоВсемСкладам.Видимость = Объект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Или РежимОстаткиИРезервы;
	
КонецПроцедуры // УстановитьВидимостьОтПользовательскихНастроек()

&НаСервере
Процедура УстановитьВидимостьЯчейки(ИмяЯчейки, Склад)
	
	Элементы[ИмяЯчейки].Видимость = НЕ Склад.ОрдерныйСклад;
	Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = НЕ УправлениеНебольшойФирмойПовтИсп.ВключеноИспользованиеЯчеек() ИЛИ НЕ Элементы.Ячейка.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВидОперации()

	Элементы.ВидОперации.СписокВыбора.Очистить();

	РазрешеныПродажи = Пользователи.ЭтоПолноправныйПользователь()
		Или УправлениеДоступомУНФ.ДоступноСозданиеДокументовРазделаПродажи();

	Если РазрешеныПродажи И Не Параметры.Свойство("ВидОперацииВозврат") Тогда

		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю);

		Если ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию") Тогда
			Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию);
		КонецЕсли;

		Если ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") Тогда
			Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку);
		КонецЕсли;

		Если ПолучитьФункциональнуюОпцию("ПередачаЗапасовНаОтветХранение") Тогда
			Элементы.ВидОперации.СписокВыбора.Добавить(
				Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение);
		КонецЕсли;

	КонецЕсли;

	Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику);

	Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту);
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ПереработкаДавальческогоСырья") Тогда
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки);
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ПриемЗапасовНаОтветХранение") Тогда
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения);
	КонецЕсли;

	Если Элементы.ВидОперации.СписокВыбора.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
		Элементы.ВидОперации.СписокВыбора.Добавить(Объект.ВидОперации);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПечатиЧека()
	
	ИспользоватьПО = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	Если ИспользоватьПО
		И НЕ ТолькоПросмотр
		И (Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику) Тогда
		НапечататьЧекВидимость = Истина;
	Иначе
		НапечататьЧекВидимость = Ложь;
	КонецЕсли;
	
	РасчетыРаботаСФормамиВызовСервера.УстановитьВидимостьЭлементовПечатиЧека(ЭтотОбъект, НапечататьЧекВидимость);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПечатиЧека()
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		Элементы.ГруппаОтправкаЧека.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЯчейкаДоступна(СтруктурнаяЕдиница)
	
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) ИЛИ ТипЗнч(СтруктурнаяЕдиница)<>Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если НЕ КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
	Если Результат = Неопределено Тогда
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
		Если Результат=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьДоступностьЯчеек()
	
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли; 	
	
	Если НЕ КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		КэшЗначений.Вставить("ДоступностьЯчеек", Новый ФиксированноеСоответствие(Новый Соответствие));
	КонецЕсли; 
	
	МассивСтруктурныхЕдиниц = Новый Массив;
	Если Объект.ПоложениеСклада=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			МассивСтруктурныхЕдиниц.Добавить(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		КонецЦикла; 
	Иначе
		МассивСтруктурныхЕдиниц.Добавить(Объект.СтруктурнаяЕдиница);
	КонецЕсли;
	МассивСтруктурныхЕдиниц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСтруктурныхЕдиниц);
	ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьДоступностьЯчеек(СтруктурныеЕдиницы, СоответствиеСтруктурныхЕдиниц)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурныеЕдиницы", СтруктурныеЕдиницы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка,
	|	СтруктурныеЕдиницы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&СтруктурныеЕдиницы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Соответствие = Новый Соответствие(СоответствиеСтруктурныхЕдиниц);
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Ссылка, НЕ Выборка.ОрдерныйСклад И Выборка.ТипСтруктурнойЕдиницы=Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	КонецЦикла; 
	СоответствиеСтруктурныхЕдиниц = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПризнакиДоступностиЯчеек(Форма)

	Объект = Форма.Объект;
	КэшЗначений = Форма.КэшЗначений;
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли;
	Если Объект.ПоложениеСклада<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Возврат;
	КонецЕсли; 
	 
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		Если Результат=Неопределено Тогда
			Результат = Ложь;
		КонецЕсли; 
		СтрокаТабличнойЧасти.ЯчейкаДоступна = Результат И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) И СтрокаТабличнойЧасти.ТипНоменклатурыЗапас;
	КонецЦикла; 
	
КонецПроцедуры 

&НаСервере
Функция ЗаголовокПоляКонтрагент()
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат НСтр("ru = 'Покупатель'");
	КонецЕсли;
	
	Если ЭтоПродажа(Объект.ВидОперации) Тогда
		Возврат НСтр("ru = 'Покупатель'");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
		Возврат НСтр("ru = 'Покупатель'");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки Тогда
		Возврат НСтр("ru = 'Покупатель'");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение Тогда
		Возврат НСтр("ru = 'Получатель'");
	КонецЕсли;
	
	Возврат НСтр("ru = 'Поставщик'");
	
КонецФункции

#КонецОбласти

#Область АвтоматическиеСкидки

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Если Объект.СкидкиНаценки.Количество() > 0 Тогда
			Объект.СкидкиНаценки.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиНаценкиПоЗаказуСервер()

	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы",, Истина);
	
	МассивЗаказов = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПоложениеЗаказаПокупателя) Тогда
		ПоложениеЗаказаПокупателя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеЗаказаПокупателяВДокументахОтгрузки");
		Если Не ЗначениеЗаполнено(Объект.ПоложениеЗаказаПокупателя) Тогда
			ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
	Иначе
		ПоложениеЗаказаПокупателя = Объект.ПоложениеЗаказаПокупателя;
	КонецЕсли;
	Если ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		МассивЗаказов.Добавить(Объект.Заказ);
	Иначе
		ТЗЗаказов = Объект.Запасы.Выгрузить(, "Заказ");
		ТЗЗаказов.Свернуть("Заказ");
		МассивЗаказов = ТЗЗаказов.ВыгрузитьКолонку("Заказ");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК Заказ,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СУММА(СкидкиНаценки.Сумма) КАК СуммаАвтоматическойСкидки,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипНоменклатурыЗапас,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ЗаказПокупателяЗапасы.Количество) КАК Количество,
	|	СУММА(ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.Цена) КАК СуммаБезСкидки
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК СкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|		ПО СкидкиНаценки.Ссылка = ЗаказПокупателяЗапасы.Ссылка
	|			И СкидкиНаценки.КлючСвязи = ЗаказПокупателяЗапасы.КлючСвязи
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&МассивЗаказов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяЗапасы.Характеристика,
	|	СкидкиНаценки.СкидкаНаценка,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения,
	|	СкидкиНаценки.Ссылка,
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ";
	
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(МассивЗаказов, Запрос.МенеджерВременныхТаблиц, Ложь);
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СкидкиНаценкиЗаказа = МассивРезультатов[0].Выгрузить();
	
	Объект.СкидкиНаценки.Очистить();
	РезультатРасчетаСкидокНаценок = Объект.СкидкиНаценки.Выгрузить();
	
	ОбъектЗапасы = Объект.Запасы.Выгрузить();
	ОбъектЗапасы.Колонки.Добавить("ОсталосьРаспределить");
	Для Каждого ТекущаяСтрокаДокумента Из ОбъектЗапасы Цикл
		ТекущаяСтрокаДокумента.ОсталосьРаспределить = ТекущаяСтрокаДокумента.Количество *
			?(ТипЗнч(ТекущаяСтрокаДокумента.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"), 1, ТекущаяСтрокаДокумента.ЕдиницаИзмерения.Коэффициент);
	КонецЦикла;
	
	Для Каждого ТекущаяСтрокаЗаказа Из СкидкиНаценкиЗаказа Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Заказ", ТекущаяСтрокаЗаказа.Заказ);
		СтруктураДляПоиска.Вставить("Номенклатура", ТекущаяСтрокаЗаказа.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", ТекущаяСтрокаЗаказа.Характеристика);
		
		МассивСтрокДокумента = ОбъектЗапасы.НайтиСтроки(СтруктураДляПоиска);
		Если МассивСтрокДокумента.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаВЗаказе = ТекущаяСтрокаЗаказа.СуммаБезСкидки;
		Для Каждого ТекущаяСтрокаДокумента Из МассивСтрокДокумента Цикл
			
			СуммаКСписанию = ТекущаяСтрокаДокумента.Количество * ТекущаяСтрокаДокумента.Цена;
			
			ПересчитатьСуммы = СуммаВЗаказе <> СуммаКСписанию;
			
			КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, СуммаКСписанию / СуммаВЗаказе, 1);
			
			Если КоэффициентПересчетаСкидки <> 1 Тогда
				ТекущаяСуммаАвтоматическойСкидки = ОКР(ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки,2);
			Иначе
				ТекущаяСуммаАвтоматическойСкидки = ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки;
			КонецЕсли;
			
			СтрокаСкидки = РезультатРасчетаСкидокНаценок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСкидки, ТекущаяСтрокаЗаказа);
			СтрокаСкидки.Сумма = ТекущаяСуммаАвтоматическойСкидки;
			СтрокаСкидки.КлючСвязи = ТекущаяСтрокаДокумента.КлючСвязи;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Объект.Запасы.Загрузить(ОбъектЗапасы);
	
	СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", РезультатРасчетаСкидокНаценок);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры); 
	
	ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(СтруктураПараметры);
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

// Функция сравнивает данные расчёта скидок на текущий момент времени с данными последнего расчёт скидок в документе.
// Если скидки изменились, то функция возвращает значение Истина.
//
&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Запасы.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Если Не СкидкиИзменились Тогда
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка Тогда
					СкидкиИзменились = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПараметровРасчетаАвтоСкидокСервер()

	СтруктураПараметровЗаказа = Новый Структура("РеализацияПоЗаказам, РеализацияСверхЗаказа", Ложь, Ложь);
	
	Если НЕ ЗначениеЗаполнено(Объект.ПоложениеЗаказаПокупателя) Тогда
		ПоложениеЗаказаПокупателя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеЗаказаПокупателяВДокументахОтгрузки");
		Если НЕ ЗначениеЗаполнено(ПоложениеЗаказаПокупателя) Тогда
			ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
	Иначе
		ПоложениеЗаказаПокупателя = Объект.ПоложениеЗаказаПокупателя;
	КонецЕсли;
	Если ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Если ЗначениеЗаполнено(Объект.Заказ) Тогда
			СтруктураПараметровЗаказа.РеализацияПоЗаказам = Истина;
		Иначе
			СтруктураПараметровЗаказа.РеализацияПоЗаказам = Ложь;
		КонецЕсли;
		СтруктураПараметровЗаказа.РеализацияСверхЗаказа = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасходнаяНакладнаяЗапасы.Заказ КАК Заказ
			|ПОМЕСТИТЬ ВТ_Запасы
			|ИЗ
			|	&Запасы КАК РасходнаяНакладнаяЗапасы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Запасы.Заказ КАК Заказ
			|ИЗ
			|	ВТ_Запасы КАК ВТ_Запасы
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Запасы.Заказ";
		
		Запрос.УстановитьПараметр("Запасы", Объект.Запасы.Выгрузить());
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Заказ) Тогда
				СтруктураПараметровЗаказа.РеализацияПоЗаказам = Истина;
			Иначе
				СтруктураПараметровЗаказа.РеализацияСверхЗаказа = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПараметровЗаказа;
	
КонецФункции // ЕстьЗаказыВТЧ()

&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	СтруктураПараметровЗаказа = ПолучитьСтруктуруПараметровРасчетаАвтоСкидокСервер(); // Если в ТЧ "Товары" есть заказы, то нужно автоматическую скидку для таких строк рассчитывать по заказу.
	Если СтруктураПараметровЗаказа.РеализацияПоЗаказам Тогда
		РассчитатьСкидкиНаценкиПоЗаказуСервер();
		Если СтруктураПараметровЗаказа.РеализацияСверхЗаказа Тогда
			СтруктураПараметры.Вставить("РеализацияСверхЗаказа", Истина);
			ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
		Иначе
			СтруктураПараметры.Вставить("ПрименятьКОбъекту", Ложь);
			ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
		КонецЕсли;
	Иначе
		СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы",, Истина);
		ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	КонецЕсли;
	
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект, "Запасы");
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
	
		Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
	Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахКлиент()
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		ТекстВопроса = НСтр("ru='Скидки (наценки) не рассчитаны, рассчитать?'");
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("СтруктураПараметры", СтруктураПараметры);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросРассчитатьСкидки", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросРассчитатьСкидки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметры = ДополнительныеПараметры.СтруктураПараметры;
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры)
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиНаценкиКлиент();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	
	// АвтоматическиеСкидки
	Если НоваяСтрока И Копирование И
		(СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки <> 0 ИЛИ СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки <> 0) Тогда
		СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
		СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	ИначеЕсли ИспользоватьАвтоматическиеСкидки И НоваяСтрока И Копирование Тогда
		// Автоматические скидки стали неактуальны.
		СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	Если НоваяСтрока И Копирование Тогда
		СтрокаТабличнойЧасти.КлючСвязи = 0;
		СтрокаТабличнойЧасти.СерииНоменклатуры = "";
		СтрокаТабличнойЧасти.ИдентификаторСтроки = "";
		СтрокаТабличнойЧасти.РНПТ = "";
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "Ячейка", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(СтрокаТабличнойЧасти, Объект, "Заказ", "ПоложениеЗаказаПокупателя");
	КонецЕсли;

	// ГрупповоеИзменениеСтрок
	СтрокаТабличнойЧасти.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыСерииНоменклатуры" Тогда
		ОткрытьПодборСерииНоменклатуры();
	КонецЕсли;
	
	ЭтоНоваяСтрокаЗапасы = НоваяСтрока;
	
КонецПроцедуры

&НаСервере
Функция СброситьФлагСкидкиРассчитаныСервер(Действие, КолонкаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ЭтоПродажа(Объект.ВидОперации) Тогда
		Если ИспользоватьАвтоматическиеСкидки И Объект.Запасы.Количество() > 0 И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
			ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ);
		КонецЕсли;
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

&НаКлиенте
Функция СброситьФлагСкидкиРассчитаныКлиент(Действие, КолонкаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ЭтоПродажа(Объект.ВидОперации) Тогда
		Если ИспользоватьАвтоматическиеСкидки И Объект.Запасы.Количество() > 0 И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
			ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ);
		КонецЕсли;
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

&НаСервере
Функция СброситьФлагСкидкиРассчитаны(Действие, КолонкаТЧ = "")
	
	Возврат СкидкиНаценкиСервер.СброситьФлагСкидкиРассчитаны(ЭтотОбъект, Действие, КолонкаТЧ);
	
КонецФункции

&НаСервере
Процедура АвтоматическиеСкидкиПриСозданииНаСервере()
	
	УстановленСерыйЦвет = Ложь;
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Объект.Запасы.Количество() = 0 Тогда
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьСерый;
			УстановленСерыйЦвет = Истина;
		ИначеЕсли НЕ Объект.СкидкиРассчитаны Тогда
			Объект.СкидкиРассчитаны = Ложь;
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьКрасный;
		Иначе
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЗаказПриИзменении(Элемент)
	
	// АвтоматическиеСкидки
	Если СброситьФлагСкидкиРассчитаныКлиент("ЗапасыЗаказПриИзменении") Тогда
		РассчитатьСуммуВСтрокеТабличнойЧасти(Неопределено, Новый Структура("СброситьФлагСкидкиРассчитаны", Ложь));
		ОбновитьПодвалФормы();
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	Если РежимОстаткиИРезервы Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
		
		ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти)
	КонецЕсли;
	
	Элементы.Запасы.ТекущиеДанные.ЗаказПокупателя = ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка");
	ЗаказыПокупателейИзКэша(Элементы.Запасы.ТекущиеДанные.Заказ);
	ОбновитьВидимостьПоляЗаказыПокупателей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеУдаленияСтрокиЗапасов()
	
	ОбновитьПодвалФормы();
	РассчитатьОбъемИВесВДокументе();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("УдалениеСтроки");
	
	Если РежимОстаткиИРезервы Тогда
		Если ЗначениеЗаполнено(НоменклатураУдаленнойСтроки) Тогда
			ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере(,НоменклатураУдаленнойСтроки);
		Иначе
			ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧастиНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДисконтныеКарты

&НаКлиенте
Процедура ВыбранаДисконтнаяКарта(ДисконтнаяКарта)

	ВладелецДисконтнойКарты = ПолучитьВладельцаДисконтнойКарты(ДисконтнаяКарта);
	Если Объект.Контрагент.Пустая() И Не ВладелецДисконтнойКарты.Пустая() Тогда
		Объект.Контрагент = ВладелецДисконтнойКарты;
		КонтрагентПриИзменении(Элементы.Контрагент);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Заполнен контрагент и считана дисконтная карта'"),
			ПолучитьНавигационнуюСсылку(ДисконтнаяКарта),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В документе заполнен контрагент и считана дисконтная карта %1'"), ДисконтнаяКарта),
			БиблиотекаКартинок.Информация32);
	ИначеЕсли Объект.Контрагент <> ВладелецДисконтнойКарты И Не ВладелецДисконтнойКарты.Пустая() Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Дисконтная карта не считана. Владелец дисконтной карты не совпадает с контрагентом в документе.'"),
			,
			"Контрагент",
			"Объект");
		
		Возврат;
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Считана дисконтная карта'"),
			ПолучитьНавигационнуюСсылку(ДисконтнаяКарта),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Считана дисконтная карта %1'"), ДисконтнаяКарта),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта)
	
	Если Не Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Объект.ДисконтнаяКарта = ДисконтнаяКарта;
	Объект.ПроцентСкидкиПоДисконтнойКарте = ДисконтныеКартыУНФВызовСервера.ВычислитьПроцентСкидкиПоДисконтнойКарте(Объект.Дата, ДисконтнаяКарта);
	
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте",
			Объект.ВидЦен,
			Объект.ВидСкидкиНаценки,
			Объект.ВалютаДокумента,
			ВалютаРасчетов,
			Объект.Курс,
			КурсНациональнаяВалюта,
			Объект.СуммаВключаетНДС,
			УчетВалютныхОпераций,
			Объект.НалогообложениеНДС,
			Объект.СпециальныйНалоговыйРежим,
			Объект.ДисконтнаяКарта,
			Объект.ПроцентСкидкиПоДисконтнойКарте);
			
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	ОбновитьКартинкуДисконтнойКарты();
	
	Если ДисконтныеКартыУНФВызовСервера.СтарыйМеханизмСкидок(ДисконтнаяКарта) Тогда
	
		Если Объект.Запасы.Количество() > 0 Тогда
			Текст = НСтр("ru = 'Перезаполнить скидки во всех строках?'");
			Оповещение = Новый ОписаниеОповещения("ВыбранаДисконтнаяКартаДополнительноЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		КонецЕсли;
		
	Иначе
		
		РассчитатьСкидкиНаценки(Неопределено);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительноЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект, "Запасы");
	КонецЕсли;
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("ПересчетСкидокПоДисконтнойКарте");
	
	// Ручные скидки
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	// Конец Ручные скидки
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВладельцаДисконтнойКарты(ДисконтнаяКарта)
	
	Возврат ДисконтнаяКарта.ВладелецКарты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоДисконтнаяКартаСФиксированнойСкидкой(ДисконтнаяКарта)
	
	Возврат ДисконтнаяКарта.Владелец.ВидСкидкиВДисконтныхКартах = Перечисления.ВидыСкидокВДисконтныхКартах.ФиксированнаяСкидка;
	
КонецФункции

// Процедура выполняется только для НАКОПИТЕЛЬНЫХ дисконтных карт.
// Процедура пересчитывает скидки документа, после изменения даты документа. Пересчёт выполняется, если процент скидки
// по выбранной дисконтной карте, изменился. 
//
&НаКлиенте
Процедура ПересчитатьПроцентСкидкиПриИзмененииДатыДокумента()
	
	Если Объект.ДисконтнаяКарта.Пустая() ИЛИ ЭтоДисконтнаяКартаСФиксированнойСкидкой(Объект.ДисконтнаяКарта) Тогда
		Возврат;
	КонецЕсли;
	
	ПредПроцентСкидкиПоДисконтнойКарте = Объект.ПроцентСкидкиПоДисконтнойКарте;
	НовПроцентСкидкиПоДисконтнойКарте = ДисконтныеКартыУНФВызовСервера.ВычислитьПроцентСкидкиПоДисконтнойКарте(Объект.Дата, Объект.ДисконтнаяКарта);
	
	Если ПредПроцентСкидкиПоДисконтнойКарте <> НовПроцентСкидкиПоДисконтнойКарте Тогда
		
		Если Объект.Запасы.Количество() > 0 Тогда
			// АПК: 1036-выкл Корректное сокращение
			Текст = СтрШаблон(НСтр("ru = 'Изменить процент скидки по накопительной дисконтной карте с %1 проц. на %2 проц. и перезаполнить скидки во всех строках?'"), ПредПроцентСкидкиПоДисконтнойКарте, НовПроцентСкидкиПоДисконтнойКарте);
			// АПК: 1036-вкл
			ДополнительныеПараметры = Новый Структура("НовПроцентСкидкиПоДисконтнойКарте, ПересчитатьТЧ", НовПроцентСкидкиПоДисконтнойКарте, Истина);
			Оповещение = Новый ОписаниеОповещения("ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Иначе
			// АПК: 1036-выкл Корректное сокращение
			Текст = СтрШаблон(НСтр("ru = 'Изменить процент скидки по накопительной дисконтной карте с %1 проц. на %2 проц.?'"), ПредПроцентСкидкиПоДисконтнойКарте, НовПроцентСкидкиПоДисконтнойКарте);
			// АПК: 1036-вкл
			ДополнительныеПараметры = Новый Структура("НовПроцентСкидкиПоДисконтнойКарте, ПересчитатьТЧ", НовПроцентСкидкиПоДисконтнойКарте, Ложь);
			Оповещение = Новый ОписаниеОповещения("ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		КонецЕсли;
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняется только для НАКОПИТЕЛЬНЫХ дисконтных карт.
// Процедура пересчитывает скидки документа, после изменения даты документа. Пересчёт выполняется, если процент скидки
// по выбранной дисконтной карте, изменился. 
//
&НаКлиенте
Процедура ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ПроцентСкидкиПоДисконтнойКарте = ДополнительныеПараметры.НовПроцентСкидкиПоДисконтнойКарте;
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, СпециальныйНалоговыйРежим, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте",
				Объект.ВидЦен,
				Объект.ВидСкидкиНаценки,
				Объект.ВалютаДокумента,
				ВалютаРасчетов,
				Объект.Курс,
				КурсНациональнаяВалюта,
				Объект.СуммаВключаетНДС,
				УчетВалютныхОпераций,
				Объект.НалогообложениеНДС,
				Объект.СпециальныйНалоговыйРежим,
				Объект.ДисконтнаяКарта,
				Объект.ПроцентСкидкиПоДисконтнойКарте);
				
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		Если ДополнительныеПараметры.ПересчитатьТЧ Тогда
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект, "Запасы");
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатие(Элемент)
	
	СтруктураПараметров = Новый Структура("Контрагент", Объект.Контрагент);
	ОписаниеОповещения = Новый ОписаниеОповещения("СчитатьДисконтнуюКартуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.СчитываниеДисконтнойКарты", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатиеЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт

	Если ТипЗнч(ВозвращаемыеПараметры) = Тип("Структура") Тогда
		СчитанаДисконтнаяКарта = ВозвращаемыеПараметры.СчитанаДисконтнаяКарта;
		ВыбранаДисконтнаяКарта(ВозвращаемыеПараметры.ДисконтнаяКарта);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");

	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если РежимОстаткиИРезервы Тогда
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧасти(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
		
		Если ИмяТЧ="Запасы" Тогда
			
			// Наборы
			Строка.НоменклатураНабора = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			Строка.ХарактеристикаНабора = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			Строка.ДоляСтоимости = 0;
			// Конец Наборы
			
			Строка.ЯчейкаДоступна = ЯчейкаДоступна(Строка.СтруктурнаяЕдиница);
			
		КонецЕсли; 
			
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	РассчитатьОбъемИВесВДокументе();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("ВидОперации",        Объект.ВидОперации);
		СтруктураДанные.Вставить("Организация",        Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура",       Строка.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, Строка, СтруктураДанные);

		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		Строка.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
		
		// Прослеживаемость
		Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров
			И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
			Строка.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
			Строка.КодТНВЭД = СтруктураДанные.ТоварнаяНоменклатураВЭД;
		Иначе
			Строка.ПрослеживаемыйТовар = Ложь;
			Строка.КодТНВЭД = Неопределено;
		КонецЕсли;
		// КонецПрослеживаемость
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТабличнойЧастиЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	СтрокаТабличнойЧасти = Параметры.СтрокаТабличнойЧасти;
	
	Если Результат <= 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в новой строке должно быть больше нуля.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	Если Результат >= СтрокаТабличнойЧасти.Количество Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Количество в новой строке должно быть меньше чем в текущей.'");
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;

	НоваяСтрока = Объект.Запасы.Вставить(СтрокаТабличнойЧасти.НомерСтроки);
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
	
	Если СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Резерв Тогда
		СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.Резерв - Результат;
		НоваяСтрока.Резерв = Результат;
	Иначе
		НоваяСтрока.Резерв = 0;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество - Результат;
	НоваяСтрока.Количество = Результат;
	
	Если НоваяСтрока.ПроцентАвтоматическойСкидки <> 0 ИЛИ НоваяСтрока.СуммаАвтоматическойСкидки <> 0 Тогда
		
		НоваяСтрока.ПроцентАвтоматическойСкидки = 0;
		НоваяСтрока.СуммаАвтоматическойСкидки = 0;

		СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
		СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
		
	ИначеЕсли ИспользоватьАвтоматическиеСкидки Тогда
		// Автоматические скидки стали неактуальны.
		СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
	КонецЕсли;
	
	НоваяСтрока.КлючСвязи = 0;
	НоваяСтрока.СерииНоменклатуры = "";
	СерииНоменклатурыУНФКлиентСервер.ОбновитьСтатусСерииВСтроке(Объект, НоваяСтрока);
	
	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	СобытияФормИСКлиент.ПриИзмененииЭлемента(ЭтаФорма, Элементы.Запасы, ДополнительныеПараметры);
	Если ДополнительныеПараметры.Свойство("ТребуетсяСерверныйВызов") Тогда
		ПодключитьОбработчикОжидания("ЗапасыПриОкончанииРедактированияДляСерверногоВызова", 0.5, Истина);
	КонецЕсли;
	// Конец ИнтеграцияГосИС
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
	
	ОбновитьПодвалФормы();
	РассчитатьОбъемИВесВДокументе();
	
	Если РежимОстаткиИРезервы Тогда
		ЗаполнитьЗначенияОстатковПоНоменклатуре(СтрокаТабличнойЧасти)
	КонецЕсли;
	
	Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеСтрок

&НаКлиенте
Процедура ЗапасыСнятьФлажки(Команда)
	УстановитьПометку(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыУстановитьФлажки(Команда)
	УстановитьПометку(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу();
	НастроитьОформлениеПанелиРедактирования(4);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений();
	НастроитьОформлениеПанелиРедактирования(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования(3);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометку(Пометка)
	
	Элементы.ЗапасыСнятьФлажки.Видимость = НЕ Элементы.ЗапасыСнятьФлажки.Видимость;
	Элементы.ЗапасыУстановитьФлажки.Видимость = НЕ Элементы.ЗапасыУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект.Запасы Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(),
		СостояниеПерехода,
		ИзменяетДанные
	);
	
	Элементы.Скидки.Доступность = (СостояниеПерехода=0);
	
	УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные)
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект.Запасы,
		ЗапасыРезервнаяКопияТаблицыАдрес,
		СостояниеПерехода,
		ИзменяетДанные
	);
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект.СерииНоменклатуры,
		СерииНоменклатурыРезервнаяКопияТаблицыАдрес,
		СостояниеПерехода,
		ИзменяетДанные
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(Состояние, СохранитьИзменения = Неопределено)
	
	Если ЭтоПродажа(Объект.ВидОперации)
			И ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
		Элементы.НастроитьОкругления.Видимость = Истина;
	Иначе
		Элементы.НастроитьОкругления.Видимость = Ложь;
	КонецЕсли;
	
	Результат = ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(),
		Состояние,
		ЗапасыИзменениеСтрокЗначение
	);
	
	Если Результат.Свойство("УстановитьСвязиПараметровВыбора") И Результат.УстановитьСвязиПараметровВыбора Тогда
		УстановитьСвязиПараметровВыбораДляЗначения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДляЗначения()
	
	ГрупповоеИзменениеСтрокСервер.УстановитьСвязиПараметровВыбора(
		НаборЭлементовГрупповогоИзмененияСтрокСервер()
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	Если ЗапасыИзменениеСтрокДействие = ЗапасыИзменениеСтрокДействиеПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер()
	
	ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицу()
	
	// Наборы
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
		
		ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
		
		Если ИзменяемыеСтроки.Количество()=Объект.Запасы.Количество() Тогда
			// Если выделены все строки - проверки удаления наборов не выполняются
			Объект.ДобавленныеНаборы.Очистить();
		Иначе
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				Если ЗначениеЗаполнено(Строка.НоменклатураНабора) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Действие недоступно для наборов.'");
					Сообщение.Поле = "Объект.Запасы";
					Сообщение.Сообщить();
					Возврат;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	// Конец Наборы
	
	ОбработатьТаблицуНаСервере();
	
	ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	Для каждого Строка Из ИзменяемыеСтроки Цикл
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента")
			Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой") Тогда
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			
			// Ручные скидки
			СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
			// Конец Ручные скидки
			
			// АвтоматическиеСкидки.
			СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
			
			Строка.ПроцентАвтоматическойСкидки = 0;
			Строка.СуммаАвтоматическойСкидки = 0;
			// Конец АвтоматическиеСкидки
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
			
			// Цена.
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
				
			// АвтоматическиеСкидки.
			СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
			// Конец АвтоматическиеСкидки
			
			// Ручная скидка - заполнение полей ввода на форме
			СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
			// Конец Ручная скидка
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС",Объект.СуммаВключаетНДС));
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка, Новый Структура("РассчитатьЦену", Истина));			

			// АвтоматическиеСкидки.
			СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
			// Конец АвтоматическиеСкидки
			
			// Ручная скидка - заполнение полей ввода на форме
			СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
			// Конец Ручная скидка			
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПоставщикуЗаказПокупателя") Тогда
			
			// АвтоматическиеСкидки
			Если СброситьФлагСкидкиРассчитаныКлиент("ЗапасыЗаказПриИзменении") Тогда
				РассчитатьСуммуВСтрокеТабличнойЧасти(Неопределено, Новый Структура("СброситьФлагСкидкиРассчитаны", Ложь));
			КонецЕсли;
			// Конец АвтоматическиеСкидки
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки")
		ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой") Тогда
		
		ГрупповоеИзменениеСтрокКлиент.ОчиститьДействиеЗначение(ЗапасыИзменениеСтрокДействие, ЗапасыИзменениеСтрокЗначение);
	КонецЕсли;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуНаСервере()
	
	ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
		ЭтотОбъект,
		Объект.Запасы,
		ЗапасыИзменениеСтрокДействие,
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит,
		ЗапасыИзменениеСтрокЗначение,
		"ЗапасыНоменклатура"
	);
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту
			И ТипЗнч(ЗапасыИзменениеСтрокЗначение) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
			БратьЦенуИзДокументаОснования = Истина;
		Иначе
			БратьЦенуИзДокументаОснования = Ложь;
		КонецЕсли;
		
		ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
		Для каждого Строка Из ИзменяемыеСтроки Цикл
			
			СтруктураДанные = Новый Структура();
			СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
			СтруктураДанные.Вставить("Организация", Объект.Организация);
			СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
			СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				
				СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
				СтруктураДанные.Вставить("ВалютаДокумента",  Объект.ВалютаДокумента);
				СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
				СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
				СтруктураДанные.Вставить("Коэффициент", 1);
				СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
			
			КонецЕсли;
			
			// ДисконтныеКарты
			СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
			СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
			// Конец ДисконтныеКарты
			
			ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, Строка, СтруктураДанные);

			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
				Строка.Количество = 1;
			КонецЕсли;
			
			Если БратьЦенуИзДокументаОснования Тогда
				Строка.Цена = Строка.Цена;
			Иначе
				Строка.Цена = СтруктураДанные.Цена;
			КонецЕсли; 
			
			Если СтруктураДанные.Свойство("МинимальнаяЦена")
				И Строка.Свойство("МинимальнаяЦена") Тогда
				
				Строка.МинимальнаяЦена = СтруктураДанные.МинимальнаяЦена;
				
			КонецЕсли;
					
			Строка.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			Строка.Содержание = "";
			
			Строка.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
			
			// Прослеживаемость
			Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров
				И ПрослеживаемаяОперация(Объект.ВидОперации) Тогда
				Строка.ПрослеживаемыйТовар = СтруктураДанные.ПрослеживаемыйТовар;
			Иначе
				Строка.ПрослеживаемыйТовар = Ложь;
			КонецЕсли; 
			// Конец Прослеживаемость
			
		КонецЦикла;
		
		// Прослеживаемость
		ОбновитьОтображениеПрослеживаемости();
		// Конец Прослеживаемость
		
	КонецЕсли;
	
	Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ЗаполнитьПоФактическимОстаткамНомераГТД Тогда
		
		НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(Ложь);
		
	КонецЕсли;
	
	Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ПодобратьНомераГТД Тогда
		
		НомераГТДПодобратьНаСервере(Ложь);
		
	КонецЕсли;
	
	Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ОчиститьНомераГТДИСтраныПроисхождения Тогда
		
		НомераГТДОчиститьНомераИСтраныПроисхожденияНаСервере();
		
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если РежимОстаткиИРезервы Тогда
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧасти(Объект);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзменений()
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыПроцентСкидкиНаценки";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСтавкаНДС";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПоставщикуЗаказПокупателя") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Заказ";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЗаказ";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСклад") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СтруктурнаяЕдиница";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСтруктурнаяЕдиница";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЯчейку") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Ячейка";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЯчейка";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
		ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КнопкаИзменитьСтроки", Элементы.ЗапасыИзменитьСтроки);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДействий()
	
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	Действия = Новый Массив;
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
	Если НЕ ЗаказВШапке
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения") Тогда
		
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПоставщикуЗаказПокупателя);
	КонецЕсли;
	Если Не СкладВШапке Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСклад);
		Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЯчейку);
		КонецЕсли;
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю Тогда
		
		ГрузовыеТаможенныеДекларацииСервер.ЗаполнитьСписокДействий(Действия);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ЗаполнитьСерииНоменклатуры);
	КонецЕсли;
	
	Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
	Для каждого Действие Из Действия Цикл
		ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
		Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
	КонецЦикла;
	
	Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПоставщикуЗаказПокупателя
		И Действия.Найти(ЗапасыИзменениеСтрокДействие) = Неопределено Тогда
		
		ЗапасыИзменениеСтрокДействие = Неопределено;
		ГрупповоеИзменениеСтрокСервер.НастроитьИсходнуюПанельРедактирования(ЗапасыИзменениеСтрокЗначение, НаборЭлементовГрупповогоИзмененияСтрокСервер());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Запасы, Элементы.ЗапасыУстановитьФлажки, Элементы.ЗапасыСнятьФлажки);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентСоздание(Элемент, СтандартнаяОбработка)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЭтоКомиссия", ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию"), Истина, Ложь));
		ПараметрыФормы.Вставить("Наименование", Строка(Контрагент));
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта",Новый Структура("Владелец, Организация, ВидДоговора, ОповеститьОЗаписиДоговора",Объект.Контрагент,Объект.Организация,ВидДоговораПриСоздании(Объект.ВидОперации), Истина), Элемент);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидДоговораПриСоздании(ВидОперации)
	Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю Тогда
		Возврат Перечисления.ВидыДоговоров.СПокупателем;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту Тогда
		Возврат Перечисления.ВидыДоговоров.СКомитентом;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение Тогда
		Возврат Перечисления.ВидыДоговоров.СПоставщиком;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
		Возврат Перечисления.ВидыДоговоров.СКомиссионером;
	Иначе
		Возврат Перечисления.ВидыДоговоров.СПокупателем;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область АвтоподборКонтактов

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ЕГАИС

&НаСервере
Процедура УстановитьДоступностьЭлементовЕГАИС()
	
	ДоступнаОтправкаЕГАИС = ЭтоПродажа(Объект.ВидОперации) Или Объект.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику");
		
	Если Элементы.Найти("ФормаОбщаяКомандаВыгрузитьВЕГАИС") <> Неопределено Тогда
		
		Элементы.ФормаОбщаяКомандаВыгрузитьВЕГАИС.Видимость = ДоступнаОтправкаЕГАИС;
		Элементы.ФормаОбщаяКомандаВыгрузитьВЕГАИС.Доступность = Объект.Проведен И Не ЭтотОбъект.ТолькоПросмотр;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССериямиНоменклатуры

&НаКлиенте
Процедура ЗапасыСерииНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерииНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерииНоменклатуры()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийНоменклатуры = ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийНоменклатуры.Форма", ПараметрыСерийНоменклатуры, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПолучитьСерииНоменклатурыИзХранилища(АдресВоВременномХранилище, КлючСтроки)

	Модифицированность = Истина;
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки);

КонецФункции

&НаСервере
Функция ПараметрыПодбораСерийНоменклатуры(ТекущиеДанныеИдентификатор)
	
	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(Объект, ЭтотОбъект.УникальныйИдентификатор,
		ТекущиеДанныеИдентификатор);
	
КонецФункции

#КонецОбласти

#Область Доставка

&НаСервере
Процедура ПрочитатьВесИОбъемЕдиницыТовара()
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтроки,
	|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВТРасходнаяНакладнаяЗапасы
	|ИЗ
	|	&РасходнаяНакладнаяЗапасы КАК РасходнаяНакладнаяЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТРасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ВесИОбъемЕдиницТоваров.Вес, СпрНоменклатура.Вес * ЕСТЬNULL(СпрЕдиницыИзмерения.Коэффициент, 1)) КАК ВесЕдиницыТовара,
	|	ЕСТЬNULL(ВесИОбъемЕдиницТоваров.Объем, СпрНоменклатура.Объем * ЕСТЬNULL(СпрЕдиницыИзмерения.Коэффициент, 1)) КАК ОбъемЕдиницыТовара
	|ИЗ
	|	ВТРасходнаяНакладнаяЗапасы КАК ВТРасходнаяНакладнаяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ВТРасходнаяНакладнаяЗапасы.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СпрЕдиницыИзмерения
	|		ПО ВТРасходнаяНакладнаяЗапасы.ЕдиницаИзмерения = СпрЕдиницыИзмерения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВесИОбъемЕдиницТоваров КАК ВесИОбъемЕдиницТоваров
	|		ПО ВТРасходнаяНакладнаяЗапасы.Номенклатура = ВесИОбъемЕдиницТоваров.Номенклатура
	|			И ВТРасходнаяНакладнаяЗапасы.ЕдиницаИзмерения = ВесИОбъемЕдиницТоваров.ЕдиницаИзмерения");
	Запрос.УстановитьПараметр("РасходнаяНакладнаяЗапасы", Объект.Запасы.Выгрузить(Новый Структура("ТипНоменклатурыЗапас", Истина), "НомерСтроки, Номенклатура, ЕдиницаИзмерения"));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВесИОбъемЕдиницыТовара = Новый Соответствие;
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки] = Новый Структура;
		ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки].Вставить("ВесЕдиницыТовара", Выборка.ВесЕдиницыТовара);
		ВесИОбъемЕдиницыТовара[Выборка.НомерСтроки].Вставить("ОбъемЕдиницыТовара", Выборка.ОбъемЕдиницыТовара);
		
	КонецЦикла;
	
	ТребуетсяРасчетВесаЗаказа = Ложь;
	ТребуетсяРасчетОбъемаЗаказа = Ложь;
	
	Для Каждого ТекСтрокаЗапасы Из Объект.Запасы Цикл
		
		Если ВесИОбъемЕдиницыТовара[ТекСтрокаЗапасы.НомерСтроки] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСтрокаЗапасы.ВесЕдиницыТовара = ВесИОбъемЕдиницыТовара[ТекСтрокаЗапасы.НомерСтроки].ВесЕдиницыТовара;
		Если Не ЗначениеЗаполнено(ТекСтрокаЗапасы.Вес)
			И ЗначениеЗаполнено(ТекСтрокаЗапасы.ВесЕдиницыТовара * ТекСтрокаЗапасы.Количество) Тогда
			ТекСтрокаЗапасы.Вес = ТекСтрокаЗапасы.ВесЕдиницыТовара * ТекСтрокаЗапасы.Количество;
			ТребуетсяРасчетВесаЗаказа = Истина;
		КонецЕсли;
		
		ТекСтрокаЗапасы.ОбъемЕдиницыТовара = ВесИОбъемЕдиницыТовара[ТекСтрокаЗапасы.НомерСтроки].ОбъемЕдиницыТовара;
		Если Не ЗначениеЗаполнено(ТекСтрокаЗапасы.Объем)
			И ЗначениеЗаполнено(ТекСтрокаЗапасы.ВесЕдиницыТовара * ТекСтрокаЗапасы.Количество) Тогда
			ТекСтрокаЗапасы.Объем = ТекСтрокаЗапасы.ОбъемЕдиницыТовара * ТекСтрокаЗапасы.Количество;
			ТребуетсяРасчетОбъемаЗаказа = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТребуетсяРасчетВесаЗаказа И ЗначениеЗаполнено(Объект.Запасы.Итог("Вес")) Тогда
		Объект.Вес = Объект.Запасы.Итог("Вес");
	КонецЕсли;
	
	Если ТребуетсяРасчетОбъемаЗаказа И ЗначениеЗаполнено(Объект.Запасы.Итог("Объем")) Тогда
		Объект.Объем = Объект.Запасы.Итог("Объем");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммуНДСДоставки()
	
	СтавкаНДСДоставки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСДоставки);
	
	Если Объект.СуммаВключаетНДС Тогда
		Объект.СуммаНДСДоставки = Объект.СтоимостьДоставки - Объект.СтоимостьДоставки / ((СтавкаНДСДоставки + 100) / 100);
		СтоимостьДоставкиСНДС = Объект.СтоимостьДоставки;
	Иначе
		Объект.СуммаНДСДоставки = Объект.СтоимостьДоставки * СтавкаНДСДоставки / 100;
		СтоимостьДоставкиСНДС = Объект.СтоимостьДоставки + Объект.СуммаНДСДоставки;
	КонецЕсли;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммуНДСДоставкиПриРасчете()
	
	СтавкаНДСДоставки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСДоставки);
	
	Объект.СуммаНДСДоставки = СтоимостьДоставкиСНДС - СтоимостьДоставкиСНДС / ((СтавкаНДСДоставки + 100) / 100);
	Объект.СтоимостьДоставки = СтоимостьДоставкиСНДС - ?(Объект.СуммаВключаетНДС, 0, Объект.СуммаНДСДоставки);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦенуДоставки(ПредыдущаяВалюта, КурсПересчетаЦен = Неопределено)
	
	СтруктураКурсы = ЦенообразованиеСервер.ПолучитьКурсыВалют(ПредыдущаяВалюта, Объект.ВалютаДокумента, Объект.Дата);
	
	Если КурсПересчетаЦен <> Неопределено И КурсПересчетаЦен.Свойство("Курс") И КурсПересчетаЦен.Свойство("Кратность") Тогда
		Если ПредыдущаяВалюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
			СтруктураКурсы.Курс 	 = ?(КурсПересчетаЦен.Курс 		= 0, 1, КурсПересчетаЦен.Курс);
			СтруктураКурсы.Кратность = ?(КурсПересчетаЦен.Кратность = 0, 1, КурсПересчетаЦен.Кратность);
		Иначе
			СтруктураКурсы.КурсНач 	 	= ?(КурсПересчетаЦен.Курс	   = 0, 1, КурсПересчетаЦен.Курс);
			СтруктураКурсы.КратностьНач = ?(КурсПересчетаЦен.Кратность = 0, 1, КурсПересчетаЦен.Кратность);
		КонецЕсли;
	КонецЕсли;
	
	Объект.СтоимостьДоставки = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(Объект.СтоимостьДоставки, СтруктураКурсы.КурсНач, СтруктураКурсы.Курс, СтруктураКурсы.КратностьНач, СтруктураКурсы.Кратность);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеДанныхПоДоставке()
	ОбновитьДанныеПоДоставкеИзСервиса();
	НастроитьВидимостьСервисовДоставки();
	НастроитьЭлементыПоСервисуДоставки();
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСервисовДоставки()
	
	Элементы.СервисДоставки.СписокВыбора.Очистить();
	Элементы.СервисДоставки.СписокВыбора.Добавить(0, НСтр("ru = 'Без сервиса'"));
	Элементы.СервисДоставки.СписокВыбора.Добавить(1, НСтр("ru = '1С:Доставка'"));
	Элементы.СервисДоставки.СписокВыбора.Добавить(2, НСтр("ru = '1С:Курьер'"));
	
	Если НЕ ИспользоватьСервис1СДоставка Тогда
		Сервис1СДоставка = Элементы.СервисДоставки.СписокВыбора.НайтиПоЗначению(1);
		Элементы.СервисДоставки.СписокВыбора.Удалить(Сервис1СДоставка);
	КонецЕсли;
	
	Если НЕ ИспользоватьСервис1СКурьер Тогда
		Сервис1СКурьер = Элементы.СервисДоставки.СписокВыбора.НайтиПоЗначению(2);
		Элементы.СервисДоставки.СписокВыбора.Удалить(Сервис1СКурьер);
	КонецЕсли;
	
	Элементы.СервисДоставки.Видимость = Элементы.СервисДоставки.СписокВыбора.Количество() > 1;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПоСервисуДоставки()
	Элементы.ГруппаПраваяКолонка.Видимость = ЗначениеЗаполнено(ТипГрузоперевозки);
	Элементы.ПередатьЗаказВСервис.Видимость = НЕ ЗначениеЗаполнено(ИдентификаторЗаказаНаДоставку);
	Элементы.ПерейтиКЗаказуВСервисе.Видимость = ЗначениеЗаполнено(ИдентификаторЗаказаНаДоставку);
	УстановитьЗаголовкиКомандДоставки();
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКомандДоставки()
	
	Если ТипГрузоперевозки = 1 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ПерейтиКЗаказуВСервисе", "Заголовок", НСтр("ru = 'Перейти к заказу в 1С:Доставке'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ПередатьЗаказВСервис", "Заголовок", НСтр("ru = 'Передать в 1С:Доставку'"));
	ИначеЕсли ТипГрузоперевозки = 2 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ПерейтиКЗаказуВСервисе", "Заголовок", НСтр("ru = 'Перейти к заказу в 1С:Курьер'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ПередатьЗаказВСервис", "Заголовок", НСтр("ru = 'Передать в 1С:Курьер'"));
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ПерейтиКЗаказуВСервисе", "Заголовок", НСтр("ru = 'Перейти к заказу в сервисе'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ПередатьЗаказВСервис", "Заголовок", НСтр("ru = 'Передать заказ в сервис'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоДоставкеИзСервиса()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаказаНаДоставку)
		И Элементы.Страницы.ТекущаяСтраница <> Элементы.ГруппаДоставка Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказыСервисовДоставки.ДокументОснование КАК ДокументОснование,
	|	ЗаказыСервисовДоставки.ИдентификаторЗаказа КАК ИдентификаторЗаказа,
	|	ЗаказыСервисовДоставки.ТрекНомер КАК ТрекНомер,
	|	ЗаказыСервисовДоставки.ТипГрузоперевозки КАК ТипГрузоперевозки,
	|	ЗаказыСервисовДоставки.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.ЗаказыСервисовДоставки КАК ЗаказыСервисовДоставки
	|ГДЕ
	|	ЗаказыСервисовДоставки.ДокументОснование = &Основание";
	
	Запрос.УстановитьПараметр("Основание", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();	
	Если Результат.Пустой() И ТипЗнч(ОснованиеСоздания) = Тип("ДокументСсылка.ЗаказПокупателя")
		И ЗначениеЗаполнено(ОснованиеСоздания) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказыСервисовДоставки.ДокументОснование КАК ДокументОснование,
		|	ЗаказыСервисовДоставки.ИдентификаторЗаказа КАК ИдентификаторЗаказа,
		|	ЗаказыСервисовДоставки.ТрекНомер КАК ТрекНомер,
		|	ЗаказыСервисовДоставки.ТипГрузоперевозки КАК ТипГрузоперевозки,
		|	ЗаказыСервисовДоставки.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.ЗаказыСервисовДоставки КАК ЗаказыСервисовДоставки
		|ГДЕ
		|	ЗаказыСервисовДоставки.ДокументОснование = &Основание";
		
		Запрос.УстановитьПараметр("Основание", ОснованиеСоздания);
		Результат = Запрос.Выполнить();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ИдентификаторЗаказаНаДоставку) Тогда
			ИдентификаторЗаказаНаДоставку = Выборка.ИдентификаторЗаказа;
			ТипГрузоперевозки    		  = Выборка.ТипГрузоперевозки;
			НастроитьЭлементыПоСервисуДоставки();
			
			Если НЕ ЗначениеЗаполнено(ИдентификаторЗаказаНаДоставку) Тогда
				Возврат;
			КонецЕсли;
			
			Если Элементы.Страницы.ТекущаяСтраница <> Элементы.ГруппаДоставка Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ТрекНомерСервисаДоставки = Выборка.ТрекНомер;
		
		ДанныеЗаказаИзСервиса = ДоставкаСервер.ПолучитьЗаказНаДоставкуИзСервиса(Объект.Организация,Объект.Ссылка,ИдентификаторЗаказаНаДоставку);
		Если ДанныеЗаказаИзСервиса = "" Тогда
			СтатусЗаказаИзСервиса = Выборка.Статус;
			ТипГрузоперевозки     = Выборка.ТипГрузоперевозки;
		КонецЕсли;
		
		СтатусЗаказаИзСервиса = ДанныеЗаказаИзСервиса.Состояние;
		ТипГрузоперевозки    = ДанныеЗаказаИзСервиса.ТипГрузоперевозки;
		
		Если НЕ ЗначениеЗаполнено(Объект.СтоимостьДоставки) И Модифицированность Тогда
			Объект.СтоимостьДоставки = ДанныеЗаказаИзСервиса.СуммаДокумента;
		КонецЕсли;
		
	КонецЦикла;
	
	НастроитьЭлементыПоСервисуДоставки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭДО
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТовары = Объект.Запасы.Добавить();
		НоваяСтрокаТовары.Номенклатура = СтрокаТаблицы.Номенклатура;
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "Заказ", "ПоложениеЗаказаПокупателя");
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
		ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрокаТовары, Объект, "Ячейка", "ПоложениеСклада");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			НоваяСтрокаТовары.Характеристика = СтрокаТаблицы.Характеристика;
			
		КонецЕсли;
		
		НоваяСтрокаТовары.Цена = СтрокаТаблицы.Цена;
		НоваяСтрокаТовары.Количество = СтрокаТаблицы.Количество;
		
		Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрокаТовары.Номенклатура) Тогда
			
			НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
			НоваяСтрокаТовары.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
		Иначе
			НоваяСтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТаблицы.Номенклатура.ВидСтавкиНДС);
		КонецЕсли;
		
		ТоварыДобавлены = Истина;
		
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если РежимОстаткиИРезервы Тогда
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧасти(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	
	Для каждого СтрокаТаблицы Из Объект.Запасы Цикл 
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТаблицы);
		СтрокаТаблицы.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТаблицы.СтруктурнаяЕдиница);
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "РасходнаяНакладная.Запасы");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка запасов из файла'"));
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
	НастройкиЗагрузкиДанных.Вставить("ПоложениеЗаказаВДокументе", Объект.ПоложениеЗаказаПокупателя);
	НастройкиЗагрузкиДанных.Вставить("ПоложениеСклада", Объект.ПоложениеСклада);
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаТабличнойЧастиУслуги", Ложь);

	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ДлительнаяОперация = ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки);
			
			СтруктураПараметров = Новый Структура;
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров);
			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки);
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(АдресРезультатаЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультатаЗагрузки);
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.Запасы.Добавить();
				
				ИменаСвойств = "Номенклатура, Содержание, Количество, Резерв, ЕдиницаИзмерения, СтавкаНДС, Заказ";
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Характеристика";
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Партия";
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
					
					ИменаСвойств = ИменаСвойств + ", СтруктурнаяЕдиница";
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
					
					ИменаСвойств = ИменаСвойств + ", СтранаПроисхождения, НомерГТД";
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ИменаСвойств);
				ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Заказ", "ПоложениеЗаказаПокупателя");
				ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "СтруктурнаяЕдиница", "ПоложениеСклада");
				ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(НоваяСтрока, Объект, "Ячейка", "ПоложениеСклада");
				
				НоваяСтрока.ТипНоменклатурыЗапас = (НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас)
												ИЛИ (НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
				НоваяСтрока.Цена = СтрокаТаблицы.Цена;
				НоваяСтрока.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
				
				Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
						
						НоваяСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(НоваяСтрока.Номенклатура.ВидСтавкиНДС), Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрока.Номенклатура.ВидСтавкиНДС), Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию));
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДС) Тогда
						
						НоваяСтрока.СуммаНДС = СтрокаТаблицы.СуммаНДС;
						
					Иначе
						
						СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
						
						НоваяСтрока.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
							НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
							НоваяСтрока.Сумма * СтавкаНДС / 100);
						
					КонецЕсли;
					
				Иначе
					
					НоваяСтрока.СтавкаНДС = ?(Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС,
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(),
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
					
					НоваяСтрока.СуммаНДС = 0;
					
				КонецЕсли;
				
				НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
				
				ЗаполнитьГТД = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "СтранаПроисхождения")
					И ЗначениеЗаполнено(СтрокаТаблицы.СтранаПроисхождения)
					И СтрокаТаблицы.СтранаПроисхождения <> Справочники.СтраныМира.Россия
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "НомерГТД")
					И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД)
					И НЕ ПустаяСтрока(СтрокаТаблицы.НомерГТД_ВходящиеДанные);
				
				Если ЗаполнитьГТД Тогда
					
					СправочникОбъект = Справочники.НомераГТД.СоздатьЭлемент();
					СправочникОбъект.Код = СтрокаТаблицы.НомерГТД_ВходящиеДанные;
					СправочникОбъект.ДопускаетсяЗаписьСОшибкой = Ложь;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, Истина, Истина);
					
					НоваяСтрока.НомерГТД = СправочникОбъект.Ссылка;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура,, ПредставлениеОшибки);
		
		ВызватьИсключение ПредставлениеОшибки;
		
	КонецПопытки;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	ЦенообразованиеСервер.ДобавитьКолонкуИЗаполнитьМинимальныеЦеныВТЧ(ЭтотОбъект, "Запасы");

	Если РежимОстаткиИРезервы Тогда
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧасти(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанныеНоменклатуры(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;	
	
	ИмяМетода = "Справочники.Номенклатура.ОбработатьПодготовленныеДанные";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
КонецФункции
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	// TODO: Пересмотреть нестандартное внедрение в пользу стандартного.
	//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	//// УНФ
	//СтатистикаИспользованияФормКлиент.ДобавитьСтатистикуКомандПечати(ЭтотОбъект, Команда);
	//// Конец УНФ
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
//Конец ИнтеграцияГосИС

// СтандартныеПодсистемы.Свойства
// @skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ГосИС

// ИнтеграцияГИСМ
&НаКлиенте
Процедура ТекстУведомленияОбОтгрузкеГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияГИСМУНФКлиент.ТекстУведомленияОбОтгрузкеГИСМОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	//ИнтеграцияГИСМКлиентУНФ.ТекстУведомленияОбОтгрузкеГИСМОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер()
	
	ИспользоватьГИСМ = Объект.ЕстьМаркируемаяПродукцияГИСМ И Не ОбщегоНазначения.ЭтоМобильныйКлиент();
	
	Если ИспользоватьГИСМ Или Объект.ЕстьПодконтрольнаяПродукцияВЕТИС Тогда
		
		Элементы.ГруппаГИСМ.Видимость = Истина;
		Элементы.ТекстУведомленияОбОтгрузкеГИСМ.Видимость = Ложь;
		Элементы.СтатусГИСМ.Видимость = Ложь;
		
		Если ИспользоватьГИСМ Тогда
			Элементы.ГруппаГИСМСсылки.Видимость = Истина;
			Если Объект.СпособПродажиГИСМ = "опт" Тогда
				Элементы.ТекстУведомленияОбОтгрузкеГИСМ.Видимость = Истина;
				ИнтеграцияГИСМУНФ.СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукции(ЭтаФорма);
			Иначе
				Элементы.СтатусГИСМ.Видимость = Ложь;
				ОбновитьСтатусГИСМ();
			КонецЕсли;
		Иначе
			Элементы.ГруппаГИСМСсылки.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		
		Элементы.ГруппаГИСМ.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьОптовойПродажей(Команда)
	Объект.СпособПродажиГИСМ = "опт";
	СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
КонецПроцедуры

&НаКлиенте
Процедура СделатьРозничнойПродажей(Команда)
	Объект.СпособПродажиГИСМ = "роз";
	СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
КонецПроцедуры

&НаКлиенте
Процедура СтатусГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Отчет о розничных продажах был изменен. Записать?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Отчет о розничных продажах не записан. Записать?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ИнтеграцияГИСМКлиент.ПодготовитьСообщениеКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаДанных"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать();
	КонецЕсли;
	
	Если Не Модифицированность И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусГИСМ()
	
	Элементы.СтатусГИСМ.Видимость = Объект.ЕстьМаркируемаяПродукцияГИСМ;
	
	Если НЕ Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
		Возврат
	КонецЕсли;
	
	СтатусГИСМ         = Перечисления.СтатусыИнформированияГИСМ.Черновик;
	ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПустаяСсылка();
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СтатусыИнформированияГИСМ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Черновик)) КАК СтатусИнформированияГИСМ,
		|	ВЫБОР
		|		КОГДА СтатусыИнформированияГИСМ.ДальнейшееДействие В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПустаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(СтатусыИнформированияГИСМ.ДальнейшееДействие, ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные))
		|	КОНЕЦ КАК ДальнейшееДействие
		|ИЗ
		|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
		|		ПО (СтатусыИнформированияГИСМ.Документ = РасходнаяНакладная.Ссылка)
		|ГДЕ
		|	РасходнаяНакладная.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка",                   Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияГИСМ.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусГИСМ         = Выборка.СтатусИнформированияГИСМ;
			ДальнейшееДействие = Выборка.ДальнейшееДействие;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтатусГИСМПредставление = ИнтеграцияГИСМ.ПредставлениеСтатусаГИСМ(
		СтатусГИСМ,
		ДальнейшееДействие,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные);
	
КонецПроцедуры
// Конец ИнтеграцияГИСМ

#КонецОбласти
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияГосИС
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда, Неопределено);
	
КонецПроцедуры
// Конец ИнтеграцияГосИС

// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие(Элемент)
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект,Элементы.ДекорацияСостояниеОригинала);
КонецПроцедуры
//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьСтрокуЗапасовДаннымиНабора(Форма, СтрокаТабличнойЧасти, СтруктураДанные)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, СтрокаТабличнойЧасти,
		Форма.ИспользоватьСерииНоменклатурыОстатки);
	
	НаборыКлиентСервер.ЗаменитьСтрокуДаннымиНабора(Объект, "Запасы", СтрокаТабличнойЧасти, СтруктураДанные); 
	
	// Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(Форма);
	// Конец Ручная скидка
	
	Элементы.ЗапасыКартинкаНабора.Видимость = Истина;
	
	// Прослеживаемость
	Если Форма.КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(Форма, СтрокаЗапасы);
		КонецЦикла; 
	КонецЕсли; 
	// Конец Прослеживаемость
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСоставНабора(СтрокаТабличнойЧасти)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
	СтруктураОткрытия.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
	ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОткрытия);
	СтрокиНабора = Объект.Запасы.НайтиСтроки(СтруктураОткрытия);
	Если ДобавленныеСтроки.Количество() = 0 Тогда
		СтруктураОткрытия.Вставить("Количество", 1);
	Иначе
		СтруктураОткрытия.Вставить("Количество", ДобавленныеСтроки[0].Количество);
	КонецЕсли; 
	СтруктураОткрытия.Вставить("СоставНабора", Новый Массив);
	Для каждого Стр Из СтрокиНабора Цикл
		СтруктураСтроки = Новый Структура("Номенклатура,Характеристика,Количество,Цена,ДоляСтоимости,ЕдиницаИзмерения,Активная");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Стр);
		СтруктураСтроки.Активная = (Стр = СтрокаТабличнойЧасти); 
		СтруктураОткрытия.СоставНабора.Добавить(СтруктураСтроки);
	КонецЦикла; 
	ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, ЭтотОбъект, , , , , 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставНабора(НоменклатураНабора, ХарактеристикаНабора, КоличествоНаборов, ЦенаНабора, СоставНабора)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураДанных.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	СтруктураДанных.Вставить("ИмяТабличнойЧасти", "Запасы");
	СтруктураДанных.Вставить("СоставНабора", СоставНабора);
	СтруктураДанных.Вставить("КоличествоНаборов", КоличествоНаборов);
	СтруктураДанных.Вставить("ЦенаНабора", ЦенаНабора);
	НаборыСервер.ОбновитьСоставНабораВДокументе(СтруктураДанных, Объект);
	Модифицированность = Истина;

	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	// Конец АвтоматическиеСкидки
	
	// Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	// Конец Ручная скидка
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
	Если РежимОстаткиИРезервы Тогда
		НоменклатураВДокументахСервер.ЗаполнитьЗначенияОстатковНоменклатурыВТабличнойЧасти(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеКартинокНаборов(Запасы, ДобавленныеНаборы)
	
	Для каждого Стр Из Запасы Цикл
		Стр.КартинкаНабора = НаборыКлиентСервер.КартинкаНабора(Стр, ДобавленныеНаборы);
		Если Стр.КартинкаНабора>5 Тогда
			Стр.КартинкаНабора = ((Стр.КартинкаНабора - 1) % 5) + 1;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
&НаСервереБезКонтекста
Процедура ОбновитьПризнакиНабора(Запасы)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
		Возврат;
	КонецЕсли; 
	
	МассивНоменклатуры = Новый Массив;
	Для каждого Стр Из Запасы Цикл
		Если ЗначениеЗаполнено(Стр.Номенклатура) И НЕ ЗначениеЗаполнено(Стр.НоменклатураНабора) И ТипЗнч(Стр.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
			МассивНоменклатуры.Добавить(Стр.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНоменклатуры.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		|	И Номенклатура.ЭтоНабор";
		Выборка = Запрос.Выполнить().Выбрать();
		ПараметрыНоменклатуры = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ПараметрыНоменклатуры.Вставить(Выборка.Ссылка, Истина);	
		КонецЦикла; 
		
		Для каждого Стр Из Запасы Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) ИЛИ ЗначениеЗаполнено(Стр.НоменклатураНабора) ИЛИ ТипЗнч(Стр.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
				Стр.ЭтоНабор = Ложь;
			Иначе
				Стр.ЭтоНабор = ПараметрыНоменклатуры.Получить(Стр.Номенклатура);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция  ХарактеристикиНабора(Номенклатура, Текст)
	
	СтруктураПараметров = Новый Структура();
	Если ПустаяСтрока(Текст) Тогда
		СтруктураПараметров.Вставить("СтрокаПоиска", Неопределено);
	Иначе
		СтруктураПараметров.Вставить("СтрокаПоиска", Текст);
	КонецЕсли; 
	СтруктураПараметров.Вставить("Отбор", Новый Структура);
	СтруктураПараметров.Отбор.Вставить("Владелец", Номенклатура);
	Возврат Справочники.ХарактеристикиНоменклатуры.ПолучитьДанныеВыбора(СтруктураПараметров);
	
КонецФункции

#КонецОбласти

#Область УчетОригиналовПервичныхДокументов

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ИзменитьСостояниеОригинала(Команда)
	УчетОригиналовПервичныхДокументовУНФКлиент.ИзменитьСостояниеОригинала(Команда, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ПечатьЧековККМ

&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	Если Объект.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
		ТекстСообщения = НСтр("ru = 'Валюта документа отличается от национальной.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на оборудовании.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ПечатьДокументовУНФКлиент.ПечатьЧекаНевозможна(ЭтотОбъект, НСтр("ru = 'Не удалось провести документ'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключенияФискальногоРегистратораЗавершение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		МассивОборудования.Добавить("ПринтерЧеков");
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, МассивОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // НапечататьЧек()

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР) 
	
	// Подготовка таблицы товаров
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	СуммаПлатежей = 0;
	
	РозничныеПродажиСервер.ДополнитьТоварамиПриОтгрузкеПараметрыПриПробитииЧека(РеквизитФормыВЗначение("Объект"), ОбщиеПараметры, СуммаПлатежей);
	
	// Общие параметры чека
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "НаименованиеПолное,ИНН,КПП");
	
	КассаККМ = Справочники.КассыККМ.ПолучитьКассуККМПоЭкземпляруОборудования(ИдентификаторУстройстваФР);
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена касса ККМ соответствующая устройству %устройство%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%устройство%", ИдентификаторУстройстваФР);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("ЭлектронныйЧекSMSПередаютсяПрограммой1С,ЭлектронныйЧекEmailПередаютсяПрограммой1С,СерийныйНомер,Код,ПодключаемоеОборудование,СтруктурнаяЕдиница");
	СтруктураРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КассаККМ, СтруктураРеквизитов);
	
	РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(Объект.Автор, Объект.ПодписьКассира);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю Тогда
		ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	Иначе
		ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств;
	КонецЕсли;
	
	ОбщиеПараметры.Электронно = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СSMS = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательНомер = "+7" + РозничныеПродажиСервер.УбратьРазделителиВНомереТелефона(Объект.Телефон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СEmail = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательEmail = Объект.АдресЭП;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СведенияОКонтрагенте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "НаименованиеПолное,ИНН,ВидКонтрагента");
		Если СведенияОКонтрагенте.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо 
			ИЛИ ЗначениеЗаполнено(СведенияОКонтрагенте.ИНН) Тогда
			ОбщиеПараметры.Получатель    = СведенияОКонтрагенте.НаименованиеПолное;
			ОбщиеПараметры.ПолучательИНН = СведенияОКонтрагенте.ИНН;
		КонецЕсли;
	КонецЕсли;
	
	ОбщиеПараметры.ДокументОснование = Объект.Ссылка;
	ОбщиеПараметры.ТорговыйОбъект = РеквизитыКассыККМ.СтруктурнаяЕдиница;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.КассаККМ = КассаККМ;
	ОбщиеПараметры.Кассир = РеквизитыКассира.ИмяКассираИДолжность;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассира.ИмяКассира);
	ОбщиеПараметры.КассирИНН = РеквизитыКассира.КассирИНН;
	
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = "1";
	ОбщиеПараметры.НомерСмены     = "1";
	
	АдресМагазина = ПечатьДокументовУНФ.КонтактнаяИнформация(Объект.Организация, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	
	СерийныйНомер = РеквизитыКассыККМ.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(Объект.Организация);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	ОбщиеПараметры.СистемаНалогообложения = РозничныеПродажиСервер.ПолучитьТипСистемыНалогообложенияККТ(
		Объект.Организация,
		,
		Объект.Дата,
		Объект.СпециальныйНалоговыйРежим);
		
	Если РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыКассыККМ.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
		Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ОбщиеПараметры) Тогда
			ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	Если СуммаПлатежей = 0 Тогда
		СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Постоплата, НСтр("ru = 'Постоплата'"), Объект.СуммаДокумента);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	ИначеЕсли СуммаПлатежей >= Объект.СуммаДокумента Тогда
		СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Предоплата, НСтр("ru = 'Зачет аванса'"), Объект.СуммаДокумента);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	Иначе
		СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Предоплата, НСтр("ru = 'Зачет аванса'"), СуммаПлатежей);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		РазницаСумм = Объект.СуммаДокумента - СуммаПлатежей;
		Если РазницаСумм > 0 Тогда
			СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Постоплата, НСтр("ru = 'Постоплата'"), РазницаСумм);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		РаботаСПодарочнымиСертификатами.ДобавитьВнереализационнуюПрибыль(Объект, ОбщиеПараметры);
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

&НаКлиенте
Процедура ПодключенияФискальногоРегистратораЗавершение(ИдентификаторУстройстваФР, Параметры) Экспорт
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ТекущаяДата();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбщиеПараметры", ОбщиеПараметры);
	ДополнительныеПараметры.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьКодМаркировкиСредствамиККТЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РозничныеПродажиКлиент.ПроверитьКодМаркировкиСредствамиККТ(ОбщиеПараметры, ЭтотОбъект, НСтр("ru = 'Пробить чек'"), ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКодМаркировкиСредствамиККТЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ШтрихкодированиеИСМПКлиент.РезультатПроверкиСредствамиККТТребуетФискализации(Результат)
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбщиеПараметры") Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
			Оповещение,
			УникальныйИдентификатор,
			ДополнительныеПараметры.ОбщиеПараметры,
			ДополнительныеПараметры.ИдентификаторУстройстваФР);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если РезультатВыполнения.ВыходныеПараметры <> Неопределено Тогда
			Объект.НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		КонецЕсли;
		
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
	Иначе
		
		ТекстСообщения = СтрШаблон(НСтр(
		"ru = 'При печати чека произошла ошибка.
		|Чек не напечатан на фискальном регистраторе.
		|Дополнительное описание:
		|%1'"), РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	УстановитьДоступностьПечатиЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонАдресЭППриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтотОбъект, ТелефонАдресЭП, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПоляКИДляОтправкиЧека()
	
	ПоляКИ = Новый Соответствие;
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Элементы.АдресЭП.Имя);
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, Элементы.Телефон.Имя);
	
	Возврат ПоляКИ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИ)
	
	Если ДанныеКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АдресЭП = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Объект.Телефон = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

#КонецОбласти

#Область Взаиморасчеты

&НаКлиенте
Процедура СпособЗачетаПредоплатыПриИзменении(Элемент)
	СпособЗачетаПредоплатыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СпособЗачетаПредоплатыПриИзмененииНаСервере()
	РасчетыРаботаСФормамиВызовСервера.СпособЗачетаПредоплатыПриИзмененииНаСервере(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ПриСозданииНаСервере = Ложь)
	РасчетыРаботаСФормамиВызовСервера.ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ЭтотОбъект, ПриСозданииНаСервере);
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияРасшифровкиПриИзменении(Элемент)
	ВариантЗаполненияРасшифровкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотра(Команда)
	ЗаполнитьТаблицуПросмотраНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотраНаКлиенте()
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПредоплата
		И ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиПросмотр Тогда
		ЗаполнитьТаблицуПросмотраНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПросмотраНаСервере()
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьТаблицуПросмотраНаСервере(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникЗачетаПредоплаты(Команда) Экспорт
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Объект.Дата <> ДатаПриСозданииНаСервере Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИОткрытьФормуРаспределенияПлатежа", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
		НСтр("ru = 'Перед открытием помощника данные будут записаны.
					|Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуРаспределенияПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИОткрытьФормуРаспределенияПлатежа(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
		ОткрытьФормуРаспределенияПлатежа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРаспределенияПлатежа()
	
	СтруктураПараметров = Новый Структура();
	СтруктураАдресов = ПолучитьСтруктуруАдресовВХранилище();
	СтруктураПараметров.Вставить("СтруктураАдресов", СтруктураАдресов);
	
	СоответствиеИменТЧИРеквизитовДляИтогов = Новый Соответствие;
	СоответствиеИменТЧИРеквизитовДляИтогов.Вставить("Запасы", "Всего");
	СтруктураПараметров.Вставить("СоответствиеИменТЧИРеквизитовДляИтогов", СоответствиеИменТЧИРеквизитовДляИтогов);
	СтруктураПараметров.Вставить("СоответствиеИменТЧИРеквизитаЗаказ", ПолучитьСоответствиеИменТЧИРеквизитаЗаказ());
	СтруктураПараметров.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	
	СтруктураПараметров.Вставить("ЭтоРасчетыСПоставщиком", Ложь);
	СтруктураПараметров.Вставить("ЕстьДоставка", Истина);
	
	РасчетыРаботаСФормамиКлиент.ОткрытьФормуРаспределенияСуммыПлатежа(Ложь, ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруАдресовВХранилище()
	
	СтруктураДляВозврата = Новый Структура();
	
	СтруктураДляВозврата.Вставить("АдресРасшифровкаПлатежаВХранилище",
		ПоместитьВоВременноеХранилище(
			Объект.Предоплата.Выгрузить(),
			УникальныйИдентификатор
		)
	);
	
	СтруктураДляВозврата.Вставить("АдресТаблицаДокументовДляИзмененияВХранилище",
		ПоместитьВоВременноеХранилище(
			ТаблицаДокументовДляИзменения.Выгрузить(),
			УникальныйИдентификатор
		)
	);
	
	// Суммы в разрезе заказов.
	ТЗЗаказыИСуммы = Объект.Запасы.Выгрузить(, "Заказ, Всего");
	ТЗЗаказыИСуммы.Свернуть("Заказ", "Всего");
	
	// Добавим информацию о доставке.
	Если НЕ Объект.НоменклатураДоставки.Пустая() Тогда
		СтрокаДоставки = ТЗЗаказыИСуммы.Добавить();
		СтрокаДоставки.Всего = Объект.СтоимостьДоставки + ?(Объект.СуммаВключаетНДС, 0, Объект.СуммаНДСДоставки);
		СтрокаДоставки.Заказ = Объект.Заказ;
	КонецЕсли;
	
	Если Объект.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Для каждого ТекущаяСтрока Из ТЗЗаказыИСуммы Цикл
			ТекущаяСтрока.Заказ = Объект.Заказ;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДляВозврата.Вставить("АдресТаблицаЗаказыИСумма",
		ПоместитьВоВременноеХранилище(
			ТЗЗаказыИСуммы,
			УникальныйИдентификатор
		)
	);
	
	Возврат СтруктураДляВозврата;
	
КонецФункции // ПоместитьРасшифровкаПлатежаВХранилище()

&НаКлиенте
Процедура РаспределитьСуммуПлатежаПослеРаспределения(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ДеревоРаспределенияСуммыПлатежа") Тогда
		
		РасчетыРаботаСФормамиКлиент.РаспределитьСуммуПлатежаПослеРаспределения(ЭтотОбъект, РезультатЗакрытия, ДопПараметры);
		
		РаспределитьСуммуПлатежаПослеРаспределенияЗавершение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммуПлатежаПослеРаспределенияЗавершение()
	
	РасчетыРаботаСФормамиВызовСервера.РаспределитьСуммуПлатежаПослеРаспределенияЗавершение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	Если ТекущаяСтраница <> Элементы.ГруппаДоставка Тогда
		Возврат;
	КонецЕсли;
	НастроитьОтображениеДанныхПоДоставке();
КонецПроцедуры

&НаСервере
Функция ПолучитьСоответствиеИменТЧИРеквизитаЗаказ()
	
	СоответствиеИменТЧИРеквизитаЗаказ = Новый Соответствие;
	СоответствиеИменТЧИРеквизитаЗаказ.Вставить("Запасы", "Заказ");
	Возврат СоответствиеИменТЧИРеквизитаЗаказ;
	
КонецФункции

&НаСервере
Процедура ВзаиморасчетыПриСозданииНаСервере()
	
	ВидОперацииПомощника = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
	Если Объект.Ссылка.Пустая() Тогда
		Если ЭтоПродажа(Объект.ВидОперации) Тогда
			ЕстьДанныеИзЗаказа = Объект.Предоплата.Количество() > 0;
			Если ЕстьДанныеИзЗаказа Тогда
				Объект.СпособЗачетаПредоплаты = СпособыЗачетаВручную;
			Иначе
				Объект.СпособЗачетаПредоплаты = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Объект.Договор, Объект.Контрагент, Истина);
			КонецЕсли;
		Иначе
			Объект.СпособЗачетаПредоплаты = СпособыЗачетаВручную;
		КонецЕсли;
	ИначеЕсли Объект.СпособЗачетаПредоплаты.Пустая() Тогда
		Объект.СпособЗачетаПредоплаты = СпособыЗачетаВручную;
	КонецЕсли;
	ВариантЗаполненияРасшифровки = РасчетыРаботаСФормамиВызовСервера.ПолучитьВариантЗаполненияРасшифровкиДляДокументаОтгрузки(Объект.Проведен, Объект.СпособЗачетаПредоплаты);
	ИстинаПриСозданииНаСервере = Истина;
	ВариантЗаполненияРасшифровкиПриИзмененииНаСервере(ИстинаПриСозданииНаСервере);
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьРеквизитыРасчетов(ЭтотОбъект, СтруктураПараметровРасчетов, Неопределено, Истина);
	
	РасчетыРаботаСФормамиВызовСервера.СпособЗачетаПредоплатыПриИзмененииНаСервере(ЭтотОбъект);
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокОплаты(Объект.СпособЗачетаПредоплаты, Объект.Предоплата);
	
КонецПроцедуры

#КонецОбласти

#Область Прослеживаемость

&НаКлиенте
Процедура ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТННаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		// Если в результате выбора пришло только значение,
		// то переложим его в структуру.
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НомераГТД") Тогда
			ВыбранноеЗначение = Новый Структура("НомерГТД", ВыбранноеЗначение);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
			
			ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
			Если ДатаГТД > КонецДня(Объект.Дата) Тогда
				
				ТекстСообщения = НСтр("ru ='Выбранная ГТД датирована более поздней датой, чем текущий документ'");
				ТекстПутьКДанным = СтрШаблон("Объект.Запасы[%1].РНПТ", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , ТекстПутьКДанным);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТННаСервере(ИдентификаторСтроки, ВыбранноеЗначение)
	
	ПрослеживаемостьФормыУНФ.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязанныеЗаписи(СтрокаЗапасы)
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаЗапасы.ИдентификаторСтроки);
	МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
		Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
	КонецЦикла;
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаЗапасы);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере(СтрокаЗапасы)
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаЗапасы.ИдентификаторСтроки);
	МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
		Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
	КонецЦикла;
	ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаЗапасы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакПрослеживаемости()
	
	Если Не КэшЗначений.Свойство("ВестиУчетПрослеживаемыхТоваров") Тогда
		КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ВестиУчетПрослеживаемыхТоваров());
	КонецЕсли;
	ИспользуетсяПрослеживаемость = КэшЗначений.ВестиУчетПрослеживаемыхТоваров
		И ПрослеживаемаяОперация(Объект.ВидОперации);
	ПрослеживаемостьФормыУНФ.ОбновитьПризнакПрослеживаемости(Объект.Запасы, Объект.СведенияПрослеживаемости, ИспользуетсяПрослеживаемость);
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВестиУчетПрослеживаемыхТоваров()
	
	ВестиУчетПрослеживаемыхТоваров = ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата)
		И ПрослеживаемаяОперация(Объект.ВидОперации);
	
	Возврат ВестиУчетПрослеживаемыхТоваров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрослеживаемаяОперация(Операция)
	
	Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции 

&НаСервере
Процедура ОбновитьОтображениеПрослеживаемости()
	
	ПрослеживаемостьФормыУНФ.ПриСозданииФормы(ЭтотОбъект, КэшЗначений, ПрослеживаемаяОперация(Объект.ВидОперации));
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		ПрослеживаемостьФормыКлиентСерверУНФ.ЗаполнитьПредставлениеРНПТ(ЭтотОбъект, СтрокаЗапасы);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ЭтоНоваяСтрокаЗапасы = Ложь;

#КонецОбласти