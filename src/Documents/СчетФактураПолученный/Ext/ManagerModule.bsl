#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Контрагент)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если Данные.Номер = Null
		ИЛИ НЕ ЗначениеЗаполнено(Данные.Ссылка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	НомерДокумента	= Данные.НомерВходящегоДокумента;
	ДатаДокумента	= Формат(Данные.ДатаВходящегоДокумента, "ДЛФ=Д");
	Состояние		= ?(Данные.ПометкаУдаления, НСтр("ru='(удален)'"), ?(Данные.Проведен, "", НСтр("ru='(не проведен)'")));
	
	Представление	= СтрШаблон(НСтр("ru = 'Счет-фактура (%1) %2 от %3 %4'"), Строка(Данные.ВидОперации), НомерДокумента, ДатаДокумента, Состояние);
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Проведен");
	Поля.Добавить("Номер");
	Поля.Добавить("Ссылка");
	Поля.Добавить("ПометкаУдаления");
	Поля.Добавить("ВидОперации");
	Поля.Добавить("НомерВходящегоДокумента");
	Поля.Добавить("ДатаВходящегоДокумента");
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		Если Параметры.Свойство("Ключ")
			И Параметры.Ключ.УдалитьЗапасы.Количество() > 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "УдалитьФормаДокумента";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаСчетФактураПолученный, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КорректировкаПоступления.ОтражатьВУчете, ИСТИНА) КАК ОтражатьВУчете
	|ПОМЕСТИТЬ Вт_ОтражатьВУчете
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК ОснованияСчетовФактурПолученных
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|		ПО ОснованияСчетовФактурПолученных.ДокументОснование = КорректировкаПоступления.Ссылка
	|ГДЕ
	|	ОснованияСчетовФактурПолученных.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОснованияСчетовФактурПолученных.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Вт_КорректируемыйСФ
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК ОснованияСчетовФактурПолученных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт_ОтражатьВУчете КАК Вт_ОтражатьВУчете
	|		ПО (Вт_ОтражатьВУчете.ОтражатьВУчете)
	|ГДЕ
	|	ОснованияСчетовФактурПолученных.ДокументОснование В
	|			(ВЫБРАТЬ
	|				ВЫРАЗИТЬ(ОснованияСчетовФактурПолученных.ДокументОснование КАК Документ.КорректировкаПоступления).ДокументОснование КАК ДокументОснование
	|			ИЗ
	|				Документ.СчетФактураПолученный.ДокументыОснования КАК ОснованияСчетовФактурПолученных
	|			ГДЕ
	|				ОснованияСчетовФактурПолученных.Ссылка = &Ссылка
	|				И ТИПЗНАЧЕНИЯ(ОснованияСчетовФактурПолученных.ДокументОснование) = ТИП(Документ.КорректировкаПоступления))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	СчетФактураПолученныйЗапасы.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	МИНИМУМ(СчетФактураПолученныйЗапасы.НомерСтроки) КАК НомерСтроки,
	|	СчетФактураПолученныйЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СчетФактураПолученныйЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СчетФактураПолученныйЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	СУММА(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СчетФактураПолученныйЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА СчетФактураПолученныйЗапасы.Количество
	|			ИНАЧЕ СчетФактураПолученныйЗапасы.Количество * СчетФактураПолученныйЗапасы.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ) КАК Количество,
	|	СчетФактураПолученныйЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СчетФактураПолученныйЗапасы.НомерГТД КАК НомерГТД
	|ИЗ
	|	Документ.СчетФактураПолученный.УдалитьЗапасы КАК СчетФактураПолученныйЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт_ОтражатьВУчете КАК Вт_ОтражатьВУчете
	|		ПО (Вт_ОтражатьВУчете.ОтражатьВУчете)
	|ГДЕ
	|	СчетФактураПолученныйЗапасы.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И СчетФактураПолученныйЗапасы.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И СчетФактураПолученныйЗапасы.Ссылка = &Ссылка
	|	И (СчетФактураПолученныйЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Поступление)
	|			ИЛИ СчетФактураПолученныйЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка))
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураПолученныйЗапасы.СтранаПроисхождения,
	|	СчетФактураПолученныйЗапасы.НомерГТД,
	|	СчетФактураПолученныйЗапасы.Номенклатура,
	|	СчетФактураПолученныйЗапасы.Ссылка.Дата,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СчетФактураПолученныйЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СчетФактураПолученныйЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапасыВРазрезеГТД.Организация,
	|	ЗапасыВРазрезеГТД.Период,
	|	ЗапасыВРазрезеГТД.ВидДвижения,
	|	ЗапасыВРазрезеГТД.НомерСтроки,
	|	ЗапасыВРазрезеГТД.Номенклатура,
	|	ЗапасыВРазрезеГТД.Характеристика,
	|	ЗапасыВРазрезеГТД.Партия,
	|	-ЗапасыВРазрезеГТД.Количество,
	|	ЗапасыВРазрезеГТД.СтранаПроисхождения,
	|	ЗапасыВРазрезеГТД.НомерГТД
	|ИЗ
	|	РегистрНакопления.ЗапасыВРазрезеГТД КАК ЗапасыВРазрезеГТД
	|ГДЕ
	|	ЗапасыВРазрезеГТД.Регистратор В
	|			(ВЫБРАТЬ
	|				Вт_КорректируемыйСФ.Ссылка
	|			ИЗ
	|				Вт_КорректируемыйСФ КАК Вт_КорректируемыйСФ)
	|	И (ЗапасыВРазрезеГТД.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Поступление)
	|			ИЛИ ЗапасыВРазрезеГТД.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка))");
	
	Запрос.УстановитьПараметр("Ссылка"							, ДокументСсылкаСчетФактураПолученный);
	Запрос.УстановитьПараметр("Организация"						, СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени"					, СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики"   	, СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии"				, СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыВРазрезеГТД", МассивРезультатов[2].Выгрузить());
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаСчетФактураПолученный, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если ПроведениеДокументовУНФ.КонтрольОстатковВыключен() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временная таблицы "ДвиженияЗапасыВРазрезеГТДИзменение"
	// содержат записи, необходимо выполнить контроль поступления товаров.
	
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыВРазрезеГТДИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыВРазрезеГТДИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД) КАК НомерГТДПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения) КАК СтранаПроисхожденияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыВРазрезеГТДОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыВРазрезеГТДИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыВРазрезеГТД,
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыВРазрезеГТД
		|ИЗ
		|	ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыВРазрезеГТД.Остатки(
		|				&МоментКонтроля,
		|				(Организация, НомерГТД, Номенклатура, Характеристика, Партия, СтранаПроисхождения) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД КАК НомерГТД,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения КАК СтранаПроисхождения
		|					ИЗ
		|						ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение)) КАК ЗапасыВРазрезеГТДОстатки
		|		ПО ДвиженияЗапасыВРазрезеГТДИзменение.Организация = ЗапасыВРазрезеГТДОстатки.Организация
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД = ЗапасыВРазрезеГТДОстатки.НомерГТД
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура = ЗапасыВРазрезеГТДОстатки.Номенклатура
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика = ЗапасыВРазрезеГТДОстатки.Характеристика
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Партия = ЗапасыВРазрезеГТДОстатки.Партия
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения = ЗапасыВРазрезеГТДОстатки.СтранаПроисхождения
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		// Отрицательный остаток по товарам в разрезе ГТД.
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ДокументОбъектСчетФактураПолученный = ДокументСсылкаСчетФактураПолученный.ПолучитьОбъект();
			ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
			КонтрольОстатковУНФ.ЗапасыВРазрезеГТД(ДокументОбъектСчетФактураПолученный, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТребуетсяВводитьСчетФактуруНаАванс(СсылкаНаДокумент) Экспорт
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РасходСоСчета") Тогда
		Если СсылкаНаДокумент.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю
			ИЛИ СсылкаНаДокумент.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РасходИзКассы") Тогда
		Если СсылкаНаДокумент.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
			ИЛИ СсылкаНаДокумент.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсПечати

Функция ДанныеДокументовСчетФактура(МассивОбъектов, ИспользоватьФаксимиле) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	Запрос.УстановитьПараметр("ИспользоватьФаксимиле", ИспользоватьФаксимиле);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка КАК Ссылка,
	|	СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаДокумента,
	|	СчетФактураПолученный.НомерВходящегоДокумента КАК Номер,
	|	НЕОПРЕДЕЛЕНО КАК ЦифровойИндексОбособленногоПодразделения,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Поступление)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Продажа)
	|		КОГДА СчетФактураПолученный.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Аванс)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Аванс)
	|		КОГДА СчетФактураПолученный.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Корректировка)
	|		КОГДА СчетФактураПолученный.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.СуммовыеРазницы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.СуммовыеРазницы)
	|	КОНЕЦ КАК ВидОперации,
	|	СчетФактураПолученный.Контрагент КАК Поставщик,
	|	СчетФактураПолученный.Контрагент КАК Организация,
	|	СчетФактураПолученный.Контрагент КАК ОбособленноеПодразделениеПоставщика,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Контрагент.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ФизическоеЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоФизическоеЛицо,
	|	НЕОПРЕДЕЛЕНО КАК Префикс,
	|	НЕОПРЕДЕЛЕНО КАК ФаксимилеПечати,
	|	ЛОЖЬ КАК СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА &ИспользоватьФаксимиле = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДаНет.Да)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ДаНет.Нет)
	|	КОНЕЦ КАК ИспользоватьФаксимиле,
	|	СчетФактураПолученный.Контрагент КАК Грузоотправитель,
	|	СчетФактураПолученный.Организация КАК Плательщик,
	|	СчетФактураПолученный.Организация КАК Покупатель,
	|	СчетФактураПолученный.Организация КАК Контрагент,
	|	СчетФактураПолученный.Организация КАК ОбособленноеПодразделениеПокупателя,
	|	СчетФактураПолученный.Организация КАК Грузополучатель,
	|	НЕОПРЕДЕЛЕНО КАК АдресДоставки,
	|	СчетФактураПолученный.Договор.Представление КАК ПредставлениеДоговора,
	|	СчетФактураПолученный.Договор КАК ОснованиеПечатиСсылка,
	|	ПРЕДСТАВЛЕНИЕ(СчетФактураПолученный.Договор) КАК ПредставлениеОснования,
	|	СчетФактураПолученный.ВалютаДокумента КАК Валюта,
	|	СчетФактураПолученный.ВалютаДокумента.НаименованиеПолное КАК ВалютаНаименование,
	|	СчетФактураПолученный.ВалютаДокумента.Код КАК ВалютаКод,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторГосКонтракта,
	|	1 КАК СтатусУПД,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправления,
	|	ЛОЖЬ КАК ЭтоСводныйСчетФактура,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьНомер,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьВыдана,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьДата,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьЛицо,
	|	НЕОПРЕДЕЛЕНО КАК ФаксимилеПустая,
	|	ЛОЖЬ КАК ЭтоКорректировка,
	|	НЕОПРЕДЕЛЕНО КАК ДолжностьРуководителя,
	|	НЕОПРЕДЕЛЕНО КАК РасшифровкаПодписиРуководителя,
	|	НЕОПРЕДЕЛЕНО КАК ФаксимилеРуководителя,
	|	НЕОПРЕДЕЛЕНО КАК ДолжностьГлавногоБухгалтера,
	|	НЕОПРЕДЕЛЕНО КАК РасшифровкаПодписиГлавногоБухгалтера,
	|	НЕОПРЕДЕЛЕНО КАК ФаксимилеГлавногоБухгалтера,
	|	НЕОПРЕДЕЛЕНО КАК ДолжностьКладовщика,
	|	НЕОПРЕДЕЛЕНО КАК РасшифровкаПодписиКладовщика,
	|	НЕОПРЕДЕЛЕНО КАК ФаксимилеКладовщика,
	|	НЕОПРЕДЕЛЕНО КАК РасшифровкаПодписиКонтрагента,
	|	СчетФактураПолученный.Кратность КАК Кратность,
	|	СчетФактураПолученный.Курс КАК Курс,
	|	СчетФактураПолученный.УдалитьДокументОснование КАК ДокументОснование,
	|	0 КАК Вес,
	|	0 КАК Объем,
	|	НЕОПРЕДЕЛЕНО КАК ПлатежныеДокументы,
	|	СчетФактураПолученный.УдалитьЗапасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Содержание КАК Содержание,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(СчетФактураПолученный.УдалитьЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА СчетФактураПолученный.УдалитьЗапасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(СчетФактураПолученный.УдалитьЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ПредставлениеНоменклатуры,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		Номенклатура.Код КАК ЗапасКод,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.ТоварнаяНоменклатураВЭД.Код КАК КодТНВЭД,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияПоОКЕИ_Наименование,
	|		Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияПоОКЕИ_Код,
	|		Характеристика КАК Характеристика,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		НЕОПРЕДЕЛЕНО КАК ВидУпаковки,
	|		ВЫБОР
	|			КОГДА СчетФактураПолученный.УдалитьЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				ТОГДА СчетФактураПолученный.УдалитьЗапасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК КоэффициентЕдиницыИзмерения,
	|		Количество КАК Количество,
	|		НЕОПРЕДЕЛЕНО КАК КоличествоВОдномМесте,
	|		НЕОПРЕДЕЛЕНО КАК КоличествоМест,
	|		СтавкаНДС КАК СтавкаНДС,
	|		0 КАК МассаБрутто,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		СтранаПроисхождения КАК СтранаСсылка,
	|		СтранаПроисхождения.Код КАК СтранаКод,
	|		ПРЕДСТАВЛЕНИЕ(СчетФактураПолученный.УдалитьЗапасы.СтранаПроисхождения) КАК СтранаПредставление,
	|		ПРЕДСТАВЛЕНИЕ(СчетФактураПолученный.УдалитьЗапасы.НомерГТД) КАК ПредставлениеГТД
	|	) КАК ТаблицаЗапасы,
	|	НЕОПРЕДЕЛЕНО КАК ТаблицаПокупателей,
	|	СчетФактураПолученный.ЕстьПрослеживаемыеТовары КАК ЕстьПрослеживаемыеТовары
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка В(&МассивОбъектов)
	|	И (СчетФактураПолученный.Исправление
	|			ИЛИ СчетФактураПолученный.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеДокументов;
	
КонецФункции

Функция ДанныеПолученныхАвансовыхДокументовРегУчет(МассивДокументов, ИспользоватьФаксимиле) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивДокументов);
	Запрос.УстановитьПараметр("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	Запрос.УстановитьПараметр("ИспользоватьФаксимиле", ИспользоватьФаксимиле);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураПолученный.Ссылка КАК Ссылка
	|	,СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаДокумента
	|	,СчетФактураПолученный.НомерВходящегоДокумента КАК Номер
	|	,Неопределено КАК ЦифровойИндексОбособленногоПодразделения
	|	,СчетФактураПолученный.ВидОперации КАК ВидОперации
	|	,СчетФактураПолученный.Контрагент КАК Организация
	|	,СчетФактураПолученный.Контрагент КАК ОбособленноеПодразделениеПоставщика
	|	,СчетФактураПолученный.Контрагент КАК Поставщик
	|	,Выбор КОГДА СчетФактураПолученный.Контрагент.ВидКонтрагента = Значение(Перечисление.ВидыКонтрагентов.ФизическоеЛицо)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЭтоФизическоеЛицо
	|	,Неопределено КАК Префикс
	|	,Неопределено КАК ФаксимилеПечати
	|	,Выбор КОГДА &ИспользоватьФаксимиле = ИСТИНА
	|		ТОГДА Значение(Перечисление.ДаНет.Да)
	|		ИНАЧЕ Значение(Перечисление.ДаНет.Нет) КОНЕЦ КАК ИспользоватьФаксимиле
	|	,СчетФактураПолученный.Контрагент КАК Грузоотправитель
	|	,СчетФактураПолученный.Организация КАК Плательщик
	|	,СчетФактураПолученный.Организация КАК Покупатель
	|	,СчетФактураПолученный.Организация КАК Контрагент
	|	,СчетФактураПолученный.Организация КАК ОбособленноеПодразделениеПокупателя
	|	,СчетФактураПолученный.Организация КАК Грузополучатель
	|	,СчетФактураПолученный.Договор.Представление КАК ПредставлениеДоговора
	|	,СчетФактураПолученный.Договор КАК ОснованиеПечати
	|	,СчетФактураПолученный.Договор.Представление КАК ПредставлениеОснования
	|	,СчетФактураПолученный.ВалютаДокумента КАК Валюта
	|	,СчетФактураПолученный.ВалютаДокумента.НаименованиеПолное КАК ВалютаНаименование
	|	,СчетФактураПолученный.ВалютаДокумента.Код КАК ВалютаКод
	|	,Неопределено КАК ИдентификаторГосКонтракта
	|	,1 КАК СтатусУПД
	|	,СчетФактураПолученный.НомерИсправления КАК НомерИсправления
	|	,СчетФактураПолученный.ДатаИсправления КАК ДатаИсправления
	|	,Ложь КАК ЭтоСводныйСчетФактура
	|	,ЕСТЬNULL(СчетФактураПолученный.Договор.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах
	|	,Неопределено КАК ДоверенностьНомер
	|	,Неопределено КАК ДоверенностьВыдана
	|	,Неопределено КАК ДоверенностьДата
	|	,Неопределено КАК ДоверенностьЛицо
	|	,Неопределено КАК ФаксимилеПустая
	|	,Неопределено КАК ДолжностьРуководителя
	|	,Неопределено КАК РасшифровкаПодписиРуководителя
	|	,Неопределено КАК ФаксимилеРуководителя
	|	,Неопределено КАК ДолжностьГлавногоБухгалтера
	|	,Неопределено КАК РасшифровкаПодписиГлавногоБухгалтера
	|	,Неопределено КАК ФаксимилеГлавногоБухгалтера
	|	,Неопределено КАК ДолжностьКладовщика
	|	,Неопределено КАК РасшифровкаПодписиКладовщика
	|	,Неопределено КАК ФаксимилеКладовщика
	|	,СчетФактураПолученный.Организация.ПодписьРуководителя.Должность КАК ДолжностьКонтрагента
	|	,СчетФактураПолученный.Организация.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиКонтрагента
	|	,СчетФактураПолученный.Кратность
	|	,СчетФактураПолученный.Курс
	|	,Истина КАК СуммаВключаетНДС
	|	,0 КАК Вес
	|	,0 КАК Объем
	|
	// ::: Документы оплаты 
	|	,Неопределено КАК ПлатежныеДокументы
	|	,1 КАК НомерСтрокиПлатежныеДокументы
	|	,СчетФактураПолученный.ДатаПлатежноРасчетногоДокумента КАК ДатаПлатежноРасчетногоДокумента
	|	,СчетФактураПолученный.НомерПлатежноРасчетногоДокумента КАК НомерПлатежноРасчетногоДокумента
	|	,СчетФактураПолученный.ДатаПлатежноРасчетногоДокумента КАК ДатаПД
	|	,СчетФактураПолученный.НомерПлатежноРасчетногоДокумента КАК НомерПД
	|	
	|
	// ::: Документы основания
	|	,СчетФактураПолученный.ДокументыОснования.(
	|		ДокументОснование КАК ДокументОснование
	|		,ЛОЖЬ КАК ЭтоРасходПереработка
	|		,Неопределено КАК АдресДоставки
	|	) КАК ДокументыОснования
	|
	//::: Доставка
	|	,Неопределено КАК УдалитьНоменклатураДоставки
	|
	//::: Запасы
	|	,СчетФактураПолученный.Авансы.(
	|		Ссылка КАК СчетФактураСсылка
	|		,Содержание КАК Содержание
	|		,Номенклатура КАК НоменклатураСсылка
	|		,Выбор КОГДА(ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КОНЕЦ КАК ПредставлениеНоменклатуры
	|		,ХарактеристикаНоменклатуры КАК Характеристика
	|		,Выбор КОГДА Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА Номенклатура.ТоварнаяНоменклатураВЭД.Код
	|			ИНАЧЕ Неопределено КОНЕЦ КАК КодТНВЭД
	|		,Номенклатура.Код КАК Код
	|		,Номенклатура.Артикул КАК Артикул
	|		,Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|		,Неопределено КАК ЕдиницаИзмерения
	|		,Неопределено КАК ЕдиницаИзмеренияПоОКЕИ_Наименование
	|		,Неопределено КАК ЕдиницаИзмеренияПоОКЕИ_Код
	|		,0 КАК Количество
	|		,1 КАК КоэффициентЕдиницыИзмерения
	|		,0 КАК Цена
	|		,Сумма КАК Сумма
	|		,СтавкаНДС КАК СтавкаНДС
	|		,СуммаНДС КАК СуммаНДС
	|		,Сумма КАК Всего
	|		,ДокументОснование КАК ДокументОснование
	|		,ДатаПлатежноРасчетногоДокумента КАК ДатаПлатежноРасчетногоДокумента
	|		,НомерПлатежноРасчетногоДокумента КАК НомерПлатежноРасчетногоДокумента
	|		,Неопределено КАК НомерСчетаФактурыПродавца
	|		,Ложь КАК ЭтоРазделитель
	|		,Ложь КАК ЭтоНабор
	|		,Неопределено КАК СтранаСсылка
	|		,Неопределено КАК СтранаКод
	|		,Неопределено КАК СтранаПредставление
	|		,Неопределено КАК ПредставлениеГТД
	|	) КАК ТаблицаЗапасы
	|
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка В(&МассивОбъектов)
	|	И (СчетФактураПолученный.Исправление
	|			ИЛИ СчетФактураПолученный.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Корректировка))
	|
	|УПОРЯДОЧИТЬ ПО Ссылка";
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеДокументов;
	
КонецФункции

Функция ПечатнаяФормаКорректировочныхСчетовФактур(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПоСчетамФактурам) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураПолученный_КорректировочныйСчетФактура";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетФактураПолученный.ПФ_MXL_СчетФактураКорректировочный1137");

	ДанныеСчетовФактур = Документы.СчетФактура.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур(
		МассивОбъектов, ТекстЗапросаПоСчетамФактурам);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ВыборкаСФ Из ДанныеСчетовФактур Цикл

		ТаблицаДокумента = ВыборкаСФ.ТаблицаДокумента;
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Документы.СчетФактура.ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаСФ);

		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаСФ.СчетФактура);

	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

Функция ТекстЗапросаПечатьКорректировочныхСчетовФактур() Экспорт

	НачалоИспользованияСФ1137 = Константы.НачалоИспользованияСФ1137.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОснованияСчетовФактурПолученных.Ссылка КАК Ссылка,
	|	ОснованияСчетовФактурПолученных.Ссылка КАК СчетФактура,
	|	ОснованияСчетовФактурПолученных.Ссылка.ДатаВходящегоДокумента КАК ДатаДокумента,
	|	ОснованияСчетовФактурПолученных.Ссылка.ДатаВходящегоДокумента КАК Дата,
	|	ОснованияСчетовФактурПолученных.Ссылка.НомерВходящегоДокумента КАК НомерДокумента,
	|	ОснованияСчетовФактурПолученных.Ссылка.НомерВходящегоДокумента КАК Номер,
	|	НЕОПРЕДЕЛЕНО КАК ЦифровойИндексОбособленногоПодразделения,
	|	ОснованияСчетовФактурПолученных.Ссылка.ВидОперации КАК ВидСчетаФактуры,
	|	ВЫБОР
	|		КОГДА ОснованияСчетовФактурПолученных.ДокументОснование.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СчетФактураБезНДС,
	|	ОснованияСчетовФактурПолученных.Ссылка.Исправление КАК Исправление,
	|	ОснованияСчетовФактурПолученных.Ссылка.НомерИсправления КАК НомерИсправления,
	|	ОснованияСчетовФактурПолученных.Ссылка.ДатаИсправления КАК ДатаИсправления,
	|	ОснованияСчетовФактурПолученных.Ссылка.НомерИсправления КАК НомерИсправленияКорректировочного,
	|	ОснованияСчетовФактурПолученных.Ссылка.ДатаИсправления КАК ДатаИсправленияКорректировочного,
	|	ОснованияСчетовФактурПолученных.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|	ОснованияСчетовФактурПолученных.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	ОснованияСчетовФактурПолученных.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	ОснованияСчетовФактурПолученных.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	ОснованияСчетовФактурПолученных.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА ОснованияСчетовФактурПолученных.Ссылка.Исправление
	|			ТОГДА ОснованияСчетовФактурПолученных.Ссылка.ДатаИсправления
	|		КОГДА ОснованияСчетовФактурПолученных.Ссылка.ДатаВходящегоДокумента <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ОснованияСчетовФактурПолученных.Ссылка.ДатаВходящегоДокумента
	|		ИНАЧЕ ОснованияСчетовФактурПолученных.Ссылка.Дата
	|	КОНЕЦ КАК ДатаСведений,
	|	ОснованияСчетовФактурПолученных.Ссылка.Контрагент КАК Контрагент,
	|	ЛОЖЬ КАК ЭтоСчетФактураВыданный,
	|	ИСТИНА КАК ВыводитьСуммуБезНДС,
	|	ОснованияСчетовФактурПолученных.ДокументОснование КАК ДокументОснование,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторГосКонтракта,
	|	НЕОПРЕДЕЛЕНО КАК РасшифровкаПодписиРуководителя,
	|	НЕОПРЕДЕЛЕНО КАК РасшифровкаПодписиГлавногоБухгалтера,
	|	ОснованияСчетовФактурПолученных.Ссылка.ЕстьПрослеживаемыеТовары КАК ЕстьПрослеживаемыеТовары
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК ОснованияСчетовФактурПолученных
	|ГДЕ
	|	ОснованияСчетовФактурПолученных.Ссылка В(&МассивОбъектов)
	|	И ОснованияСчетовФактурПолученных.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка)
	|	И ОснованияСчетовФактурПолученных.Ссылка.Дата >= &НачалоИспользованияСФ1137
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	СчетФактура
	|ИТОГИ
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(ВидСчетаФактуры),
	|	МАКСИМУМ(СчетФактураБезНДС),
	|	МАКСИМУМ(Исправление),
	|	МАКСИМУМ(НомерИсправления),
	|	МАКСИМУМ(ДатаИсправления),
	|	МАКСИМУМ(ЭтоСчетФактураВыданный),
	|	МАКСИМУМ(ВыводитьСуммуБезНДС)
	|ПО
	|	СчетФактура";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции 

// Заполняет список команд печати Заказа покупателя
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Обработка.ПечатьСчетФактура.СчетФактураПолученный";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (полученный)'");;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 26;
	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

