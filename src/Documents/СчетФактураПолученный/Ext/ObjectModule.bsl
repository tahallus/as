#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД()
	
	Возврат ГрузовыеТаможенныеДекларацииСервер.НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД(Ссылка);
	
КонецФункции

#Область ПроцедурыЗаполненияДокумента

Процедура ДобавитьСтрокуДокументаОснования(СсылкаНаДокументОснование)
	
	Если НЕ ОбщегоНазначения.ЗначениеСсылочногоТипа(СсылкаНаДокументОснование) Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru ='Документ-основание должен быть ссылочного типа'"), СсылкаНаДокументОснование);
		
	КонецЕсли;
		
	Если СсылкаНаДокументОснование.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru ='Для документа %1 ввод счета-фактуры не требуется'"), СсылкаНаДокументОснование);
		
	КонецЕсли;
	
	Если ДокументыОснования.Найти(СсылкаНаДокументОснование, "ДокументОснование") = Неопределено Тогда
		
		НоваяСтрока 					= ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование	= СсылкаНаДокументОснование;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДокументыОснованияСчетФактуры()
	
	Для каждого ТекСтрока Из ДокументыОснования Цикл
	
		Если ТипЗнч(ТекСтрока.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если ТипЗнч(ТекСтрока.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
			ЗаголовокСообщения = НСтр("ru = 'Для добавления счета-фактуры заполните реквизиты на закладке ""Дополнительно"":'");
			ТекстСообщения = "";
			
			ОбязательныеРеквизиты = Новый Структура;
			ОбязательныеРеквизиты.Вставить("СчетФактураДатаВыставления", НСтр("ru ='  - Дата выставления'"));
			ОбязательныеРеквизиты.Вставить("СчетФактураКонтрагент", НСтр("ru ='  - Контрагент'"));
			ОбязательныеРеквизиты.Вставить("СчетФактураДоговорКонтрагента", НСтр("ru ='  - Договор контрагента'"));
			
			Для каждого ЭлементаСтруктуры Из ОбязательныеРеквизиты Цикл
				
				Если ЗначениеЗаполнено(ТекСтрока.ДокументОснование[ЭлементаСтруктуры.Ключ]) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), ЗаголовокСообщения, "") + Символы.ПС + ЭлементаСтруктуры.Значение;
				
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
				
				ВызватьИсключение ТекстСообщения;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ТекСтрока.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекСтрока.ДокументОснование, "ДокументОснование, ВидОперации");
			Если СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(РеквизитыОснования.ДокументОснование, Истина) = Неопределено Тогда
				
				ШаблонТекст = НСтр("ru = 'Перед добавлением %1 счета-фактуры создайте счет-фактуру у документа-основания'");
				
				ЭтоИсправление = (РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
				ОписаниеВидаОперации = ?(ЭтоИсправление, НСтр("ru = 'исправления'"), НСтр("ru = 'корректировочного'"));
				
				ВызватьИсключение СтрШаблон(ШаблонТекст, ОписаниеВидаОперации);
				
			КонецЕсли;
			
			ИсходныйДокумент = Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ТекСтрока.ДокументОснование);
			Если НЕ ЗначениеЗаполнено(ИсходныйДокумент) Тогда
				
				ВызватьИсключение НСтр("ru = 'Не определен исправляемый документ'");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ТекСтрока.ДокументОснование) = Тип("ДокументСсылка.РасходСоСчета")
			ИЛИ ТипЗнч(ТекСтрока.ДокументОснование) = Тип("ДокументСсылка.РасходИзКассы") Тогда
			
			Если НЕ Документы.СчетФактураПолученный.ТребуетсяВводитьСчетФактуруНаАванс(ТекСтрока.ДокументОснование) Тогда
				ТекстИсключения = НСтр("ru = 'Для операции, которая выбрана в документе %1,
					|создание счета-фактуры не требуется.'"
				);
				
				ВызватьИсключение СтрШаблон(ТекстИсключения, СокрЛП(ТекСтрока.ДокументОснование));
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура("ПризнакАванса", Истина);
			
			НайденныеСтроки = ТекСтрока.ДокументОснование.РасшифровкаПлатежа.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() < 1 Тогда
				
				ТекстИсключения = НСтр("ru = 'В документе %1 нет авансовых данных.
					|Создание счета-фактуры полученного не требуется.'");
				
				ВызватьИсключение СтрШаблон(ТекстИсключения, СокрЛП(ТекСтрока.ДокументОснование));
				
			КонецЕсли;
			
			Если ДополнительныеСвойства.Свойство("ЭтоВходящаяСуммоваяРазница") Тогда
				
				ОтсутствуетДоговорУЕ = Истина;
				Для каждого СтрокаРасшифровки Из ТекСтрока.ДокументОснование.РасшифровкаПлатежа Цикл
					
					Если СтрокаРасшифровки.Договор.РасчетыВУсловныхЕдиницах Тогда
						
						ОтсутствуетДоговорУЕ = Ложь;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ОтсутствуетДоговорУЕ Тогда
					
					ТекстИсключения = НСтр("ru = 'Счет-фактура (полученный) с видом операции Суммовые разницы формируется по договорам в У.Е.
						|В документе %1 отсутствуют договоры в условных единицах.'");
					
					ВызватьИсключение СтрШаблон(ТекстИсключения, СокрЛП(ТекСтрока.ДокументОснование));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НайденныйСчетФактура = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(ТекСтрока.ДокументОснование, Истина);
		Если ЗначениеЗаполнено(НайденныйСчетФактура)
			И НайденныйСчетФактура.Ссылка <> Ссылка Тогда
			
			ШаблонТекст = НСтр("ru = 'Для документа ""%1"" 
				|уже введен счет-фактура ""%2"".
				|Запись еще одного документа ""Счет-фактура"" не допускается!'");
				
			ВызватьИсключение СтрШаблон(ШаблонТекст, ТекСтрока.ДокументОснование, НайденныйСчетФактура.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыОснования(ДанныеЗаполнения)
	
	ДокументыОснования.Очистить();
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
		
		ДобавитьСтрокуДокументаОснования(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ТаблицаЗначений") Тогда
		
		Для каждого СтрокаТаблицы Из ДанныеЗаполнения Цикл
			
			ДобавитьСтрокуДокументаОснования(СтрокаТаблицы.ДокументОснование);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Ссылка") Тогда
			
			УдалитьДокументОснование = ДанныеЗаполнения.Ссылка;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЭтоВходящаяСуммоваяРазница") Тогда
			
			ДополнительныеСвойства.Вставить("ЭтоВходящаяСуммоваяРазница", ДанныеЗаполнения.ЭтоВходящаяСуммоваяРазница);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьДокументыОснованияСчетФактуры();
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеСПроверкой(Приемник, Источник, ИмяРеквизита, ЗатиратьЗаполненные = Ложь)
	
	Если ЗатиратьЗаполненные Тогда
		
		Приемник[ИмяРеквизита] = Источник[ИмяРеквизита];
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Приемник[ИмяРеквизита]) Тогда
		
		Приемник[ИмяРеквизита] = Источник[ИмяРеквизита];
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования)
	
	СуммыДокументовОснований.СуммаДокумента = СуммыДокументовОснований.СуммаДокумента + СуммаДокументаОснования;
	СуммыДокументовОснований.СуммаНДСДокумента = СуммыДокументовОснований.СуммаНДСДокумента + СуммаНДСДокументаОснования;
	
	Если ДанныеЗаполнения.СуммаВключаетНДС Тогда
		
		СуммыДокументовОснований.СуммаДокумента = СуммыДокументовОснований.СуммаДокумента - СуммаНДСДокументаОснования;
		
	КонецЕсли;
	
КонецПроцедуры

#Область АвансовыйОтчет

Процедура ЗаполнитьСведенияШапкиПоАвансовомуОтчету(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ВалютаДокумента");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Кратность");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Курс");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	
	СведенияДокументовОснований.Вставить("ДатаВходящегоДокумента", ДанныеЗаполнения.СчетФактураДатаВыставления);
	СведенияДокументовОснований.Вставить("Контрагент", ДанныеЗаполнения.СчетФактураКонтрагент);
	СведенияДокументовОснований.Вставить("Договор", ДанныеЗаполнения.СчетФактураДоговорКонтрагента);
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоАвансовомуОтчету(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований)
	
	СуммаДокументаОснования = (ДанныеЗаполнения.Запасы.Итог("Сумма") + ДанныеЗаполнения.Расходы.Итог("Сумма"));
	СуммаНДСДокументаОснования = (ДанныеЗаполнения.Запасы.Итог("СуммаНДС") + ДанныеЗаполнения.Расходы.Итог("СуммаНДС"));
	
	ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования);
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеРасходы

Процедура ЗаполнитьСведенияШапкиПоДополнительнымРасходам(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Контрагент");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Договор");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ВалютаДокумента");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Кратность");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Курс");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ДатаВходящегоДокумента) Тогда
		СведенияДокументовОснований.Вставить("ДатаВходящегоДокумента", ДанныеЗаполнения.ДатаВходящегоДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоДополнительнымРасходам(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований)
	
	СуммаДокументаОснования = ДанныеЗаполнения.Расходы.Итог("Сумма");
	СуммаНДСДокументаОснования = ДанныеЗаполнения.Расходы.Итог("СуммаНДС");
	
	ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования);
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыКомиссии

Процедура ЗаполнитьСведенияШапкиПоДокументамКомиссии(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Контрагент");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Договор");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ВалютаДокумента");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Кратность");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Курс");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		
		СведенияДокументовОснований.Вставить("Комментарий", НСтр("ru ='Зафиксирован факт выставления счета-фактуры комитентом покупателю.'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоДокументамКомиссии(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований)
	
	СуммаДокументаОснования = ДанныеЗаполнения.Запасы.Итог("СуммаВознаграждения");
	СуммаНДСДокументаОснования = ДанныеЗаполнения.Запасы.Итог("СуммаНДСВознаграждения");
	
	ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования);
	
КонецПроцедуры

#КонецОбласти

#Область ПереработкаМатериалов

Процедура ЗаполнитьСведенияШапкиПоПереработке(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Контрагент");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Договор");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ВалютаДокумента");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Кратность");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Курс");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоПереработке(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
	
	СуммаДокументаОснования = ДанныеЗаполнения.Сумма;
	СуммаНДСДокументаОснования = ДанныеЗаполнения.СуммаНДС;
	
	ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования);
	
КонецПроцедуры

#КонецОбласти

#Область Поступления

Процедура ЗаполнитьСведенияШапкиПоПоступлению(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Контрагент");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Договор");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ВалютаДокумента");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Кратность");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Курс");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	
	// Прослеживаемость
	ЕстьПрослеживаемыеТовары = (ДанныеЗаполнения.Запасы.Итог("ПрослеживаемыйТовар") > 0);
	СведенияДокументовОснований.ЕстьПрослеживаемыеТовары = Макс(
	СведенияДокументовОснований.ЕстьПрослеживаемыеТовары,
	ЕстьПрослеживаемыеТовары);
	// Конец Прослеживаемость       
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		ВидОперацийВозвратов = Новый Массив;
		ВидОперацийВозвратов.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя);
		ВидОперацийВозвратов.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера);
		ВидОперацийВозвратов.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика);
		ВидОперацийВозвратов.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратСОтветХранения);
		
		Если СведенияДокументовОснований.ЭтоВозврат <> Перечисления.ДаНет.Да Тогда
			
			СведенияДокументовОснований.ЭтоВозврат = ?(ВидОперацийВозвратов.Найти(ДанныеЗаполнения.ВидОперации) = Неопределено, Перечисления.ДаНет.Нет, Перечисления.ДаНет.Да);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоПоступлению(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований)
	
	СуммаДокументаОснования = (ДанныеЗаполнения.Запасы.Итог("Сумма") + ДанныеЗаполнения.Расходы.Итог("Сумма"));
	СуммаНДСДокументаОснования = (ДанныеЗаполнения.Запасы.Итог("СуммаНДС") + ДанныеЗаполнения.Расходы.Итог("СуммаНДС"));
	
	ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования);
	
КонецПроцедуры

#КонецОбласти

#Область Авансы

Процедура ЗаполнитьСведенияШапкиПоАвансу(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Контрагент");
	
	ВидОперацииСчетФактуры = Перечисления.ВидыОперацийСчетФактураПолученный[?(ДополнительныеСвойства.Свойство("ЭтоВходящаяСуммоваяРазница"), "СуммовыеРазницы", "Аванс")];
	СведенияДокументовОснований.Вставить("ВидОперации", ВидОперацииСчетФактуры);
	
	СведенияДокументовОснований.Вставить("ВалютаДокумента", ДанныеЗаполнения.ВалютаДенежныхСредств);
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		
		СтруктураПоВалюте	= РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", СведенияДокументовОснований.ВалютаДокумента));
		СведенияДокументовОснований.Вставить("Курс", СтруктураПоВалюте.Курс);
		СведенияДокументовОснований.Вставить("Кратность", СтруктураПоВалюте.Кратность);
		
	КонецЕсли;
	
	Если СведенияДокументовОснований.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.СуммовыеРазницы Тогда
		
		СведенияДокументовОснований.Вставить("ВалютаДокумента", Константы.НациональнаяВалюта.Получить());
		СведенияДокументовОснований.Вставить("СтавкаНДССуммовойРазницы", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(18));
		
	КонецЕсли;
	
	МассивСтрок = ДанныеЗаполнения.РасшифровкаПлатежа.НайтиСтроки(Новый Структура("ПризнакАванса", Истина));
	Если МассивСтрок.Количество() > 0 Тогда
		
		СведенияДокументовОснований.Вставить("Договор", МассивСтрок[0].Договор);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоАвансу(ДанныеЗаполнения, СуммыДокументовОснований)
	
	СуммаДокументаОснования = 0;
	СуммаНДСДокументаОснования = 0;
	СтавкаНДСБезНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	
	МассивСтрок = ДанныеЗаполнения.РасшифровкаПлатежа.НайтиСтроки(Новый Структура("ПризнакАванса", Истина));
	Если МассивСтрок.Количество() > 0 Тогда
		
		Для каждого СтрокаАванса Из МассивСтрок Цикл 
			
			Если СтрокаАванса.СтавкаНДС = СтавкаНДСБезНДС Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СуммаДокументаОснования = СуммаДокументаОснования + (СтрокаАванса.СуммаПлатежа - СтрокаАванса.СуммаНДС);
			СуммаНДСДокументаОснования = СуммаНДСДокументаОснования + СтрокаАванса.СуммаНДС;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СуммыДокументовОснований.СуммаДокумента = СуммаДокументаОснования;
	СуммыДокументовОснований.СуммаНДСДокумента = СуммаНДСДокументаОснования;
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуАванса(ДанныеЗаполнения, СуммыДокументовОснований)
	
	Авансы.Очистить();
	
	СтрокаДатаНомерДокументовОплаты = Авансы.Добавить();
	СтрокаДатаНомерДокументовОплаты.Содержание = НСтр("ru ='Предварительная оплата'");
	СтрокаДатаНомерДокументовОплаты.Сумма = СуммыДокументовОснований.СуммаДокумента + СуммыДокументовОснований.СуммаНДСДокумента;
	СтрокаДатаНомерДокументовОплаты.СуммаНДС = СуммыДокументовОснований.СуммаНДСДокумента;
	
	Если ДанныеЗаполнения.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		СтрокаДатаНомерДокументовОплаты.СтавкаНДС = ДанныеЗаполнения.РасшифровкаПлатежа[0].СтавкаНДС;
		
	Иначе
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(18);
		Если ЗначениеЗаполнено(СтавкаНДС) Тогда
			
			СтрокаДатаНомерДокументовОплаты.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(СтавкаНДС);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КорректировкаПоступления

Процедура ЗаполнитьСведенияШапкиПоКорректировкаПоступления(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Контрагент");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Договор");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ВалютаДокумента");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Кратность");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Курс");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	
	ИмяРеквизита = ?(ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение, "Корректировка", "Поступление");
	ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный[ИмяРеквизита];
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоКорректировкаПоступления(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований)
	
	СуммаДокументаОснования = (ДанныеЗаполнения.Запасы.Итог("Сумма") + ДанныеЗаполнения.Расходы.Итог("Сумма"));
	СуммаНДСДокументаОснования = (ДанныеЗаполнения.Запасы.Итог("СуммаНДС") + ДанныеЗаполнения.Расходы.Итог("СуммаНДС"));
	
	ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования);
	
КонецПроцедуры

Процедура ДозаполнениеНаОснованииКорректировкиПоступления(СтрокаТаблицы)
	
	ДокументОснованиеСФ	= СтрокаТаблицы.ДокументОснование; // ДокументОснованиеСФ
	ДокументПоступления	= ДокументОснованиеСФ.ДокументОснование;
	ИсходныйДокумент	= Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления);
	
	СтрокаТаблицы.УчитыватьИсправлениеИсходногоДокумента = Ложь;
	ПереопределятьПараметрыИсходногоДокумента = Ложь;
	
	ТипИсправляемогоДокумента = ТипЗнч(Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь));
	КорректировкаКорректировочногоСчетаФактуры = (ТипИсправляемогоДокумента = Тип("ДокументСсылка.КорректировкаПоступления")
		И ДокументОснованиеСФ.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
		
	ДанныеСчетФактуры = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(ДокументОснованиеСФ.ИсправляемыйДокументПоступления, Истина);
	Если ДанныеСчетФактуры <> Неопределено Тогда
		
		ИсправляемыйСчетФактура = ДанныеСчетФактуры.Ссылка;
		
	КонецЕсли;
	
	Если Исправление 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИсходныйДокумент", ИсходныйДокумент);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОснованияСчетовФактурПолученных.Ссылка КАК Ссылка,
		|	ОснованияСчетовФактурПолученных.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	ОснованияСчетовФактурПолученных.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ОснованияСчетовФактурПолученных.Ссылка.Исправление КАК Исправление,
		|	ВЫБОР
		|		КОГДА ОснованияСчетовФактурПолученных.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КорректировочныйСчетФактура,
		|	ОснованияСчетовФактурПолученных.Ссылка.НомерИсправления КАК НомерИсправления,
		|	ОснованияСчетовФактурПолученных.Ссылка.ДатаИсправления КАК ДатаИсправления,
		|	ОснованияСчетовФактурПолученных.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
		|	ОснованияСчетовФактурПолученных.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА ОснованияСчетовФактурПолученных.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка)
		|			ТОГДА ОснованияСчетовФактурПолученных.НомерИсходногоДокумента
		|		ИНАЧЕ ОснованияСчетовФактурПолученных.Ссылка.НомерВходящегоДокумента
		|	КОНЕЦ КАК НомерИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА ОснованияСчетовФактурПолученных.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка)
		|			ТОГДА ОснованияСчетовФактурПолученных.ДатаИсходногоДокумента
		|		ИНАЧЕ ОснованияСчетовФактурПолученных.Ссылка.ДатаВходящегоДокумента
		|	КОНЕЦ КАК ДатаИсходногоДокумента
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК ОснованияСчетовФактурПолученных
		|ГДЕ
		|	ОснованияСчетовФактурПолученных.ДокументОснование = &ИсходныйДокумент
		|	И НЕ ОснованияСчетовФактурПолученных.Ссылка.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОснованияСчетовФактурПолученных.Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если КорректировкаКорректировочногоСчетаФактуры Тогда
				
				СтрокаТаблицы.НомерИсходногоДокумента = Выборка.НомерВходящегоДокумента;
				СтрокаТаблицы.ДатаИсходногоДокумента  = Выборка.ДатаВходящегоДокумента;
				
				Если Выборка.Исправление Тогда
					
					СтрокаТаблицы.УчитыватьИсправлениеИсходногоДокумента = Истина;
					СтрокаТаблицы.НомерИсправленияИсходногоДокумента = Выборка.НомерИсправления;
					СтрокаТаблицы.ДатаИсправленияИсходногоДокумента  = Выборка.ДатаИсправления;
					
				КонецЕсли;
				
			Иначе
				
				Если Выборка.КорректировочныйСчетФактура Тогда
					
					ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДатаВходящегоДокумента) Тогда
					
					ДатаВходящегоДокумента  = Выборка.ДатаВходящегоДокумента;
					
				КонецЕсли;
				
				Если ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
					
					СтрокаТаблицы.НомерИсходногоДокумента    = Выборка.НомерИсходногоДокумента;
					СтрокаТаблицы.ДатаИсходногоДокумента     = Выборка.ДатаИсходногоДокумента;
					
					Если Выборка.Исправление И НЕ Выборка.КорректировочныйСчетФактура Тогда
						
						СтрокаТаблицы.НомерИсправленияИсходногоДокумента = Выборка.НомерИсправления;
						СтрокаТаблицы.ДатаИсправленияИсходногоДокумента  = Выборка.ДатаИсправления;
						ПереопределятьПараметрыИсходногоДокумента = Истина;
						
					ИначеЕсли Выборка.КорректировочныйСчетФактура Тогда
						
						СтрокаТаблицы.НомерИсправленияИсходногоДокумента = Выборка.НомерИсправленияИсходногоДокумента;
						СтрокаТаблицы.ДатаИсправленияИсходногоДокумента  = Выборка.ДатаИсправленияИсходногоДокумента;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаИсправленияИсходногоДокумента) 
					ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.НомерИсправленияИсходногоДокумента) Тогда
					
					СтрокаТаблицы.УчитыватьИсправлениеИсходногоДокумента = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтрокаТаблицы.УчитыватьИсправлениеИсходногоДокумента
		ИЛИ ПереопределятьПараметрыИсходногоДокумента Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КорректируемыйДокумент", ДокументПоступления);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОснованияСчетовФактурПолученных.Ссылка КАК Ссылка,
		|	ОснованияСчетовФактурПолученных.Ссылка.Исправление КАК Исправление,
		|	ОснованияСчетовФактурПолученных.Ссылка.НомерИсправления КАК НомерИсправления,
		|	ОснованияСчетовФактурПолученных.Ссылка.ДатаИсправления КАК ДатаИсправления
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК ОснованияСчетовФактурПолученных
		|ГДЕ
		|	ОснованияСчетовФактурПолученных.ДокументОснование = &КорректируемыйДокумент
		|	И ОснованияСчетовФактурПолученных.Ссылка.Исправление = ИСТИНА
		|	И ОснованияСчетовФактурПолученных.Ссылка.ВидОперации = Значение(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка)
		|	И НЕ ОснованияСчетовФактурПолученных.Ссылка.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОснованияСчетовФактурПолученных.Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если ЗначениеЗаполнено(Выборка.НомерИсправления) Тогда
				
				СтрокаТаблицы.НомерИсправленияИсходногоДокумента = Выборка.НомерИсправления;
				СтрокаТаблицы.ДатаИсправленияИсходногоДокумента  = Выборка.ДатаИсправления;
				СтрокаТаблицы.УчитыватьИсправлениеИсходногоДокумента = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьСведения(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований)
	
	ДокументыКомиссии = Новый Массив;
	ДокументыКомиссии.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
	ДокументыКомиссии.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
	
	ДокументыАвансов = Новый Массив;
	ДокументыАвансов.Добавить(Тип("ДокументСсылка.РасходИзКассы"));
	ДокументыАвансов.Добавить(Тип("ДокументСсылка.РасходСоСчета"));
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		ЗаполнитьСведенияШапкиПоПоступлению(ДанныеЗаполнения, СведенияДокументовОснований);
		ЗаполнитьСуммуДокументаПоПоступлению(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		ЗаполнитьСведенияШапкиПоАвансовомуОтчету(ДанныеЗаполнения, СведенияДокументовОснований);
		ЗаполнитьСуммуДокументаПоАвансовомуОтчету(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ДополнительныеРасходы") Тогда
		
		ЗаполнитьСведенияШапкиПоДополнительнымРасходам(ДанныеЗаполнения, СведенияДокументовОснований);
		ЗаполнитьСуммуДокументаПоДополнительнымРасходам(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
		
		ЗаполнитьСведенияШапкиПоПереработке(ДанныеЗаполнения, СведенияДокументовОснований);
		ЗаполнитьСуммуДокументаПоПереработке(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
		
	ИначеЕсли ДокументыКомиссии.Найти(ТипЗнч(ДанныеЗаполнения)) <> Неопределено Тогда
		
		ЗаполнитьСведенияШапкиПоДокументамКомиссии(ДанныеЗаполнения, СведенияДокументовОснований);
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
			
			ЗаполнитьСуммуДокументаПоДокументамКомиссии(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
			
		КонецЕсли;
		
	ИначеЕсли ДокументыАвансов.Найти(ТипЗнч(ДанныеЗаполнения)) <> Неопределено Тогда
		
		ЗаполнитьСведенияШапкиПоАвансу(ДанныеЗаполнения, СведенияДокументовОснований);
		
		Если СведенияДокументовОснований.ВидОперации <> Перечисления.ВидыОперацийСчетФактураПолученный.СуммовыеРазницы Тогда
			
			ЗаполнитьСуммуДокументаПоАвансу(ДанныеЗаполнения, СуммыДокументовОснований);
			ЗаполнитьРасшифровкуАванса(ДанныеЗаполнения, СуммыДокументовОснований);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		ЗаполнитьСведенияШапкиПоКорректировкаПоступления(ДанныеЗаполнения, СведенияДокументовОснований);
		ЗаполнитьСуммуДокументаПоКорректировкаПоступления(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		// Более не поддерживается, сценарий признан избыточным. В следующих версиях УНФ у реквизита документ-основание тип
		// будет исключен. Оставлено для поддержки совместимости (смягчение перехода), предполагаем самостоятельное заполнение пользователем.
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработкуЗаполнения()
	
	СуммыДокументовОснований = Новый Структура("СуммаДокумента, СуммаНДСДокумента", 0, 0);
	
	Если ДокументыОснования.Количество() < 1 Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СуммыДокументовОснований);
		Возврат;
		
	КонецЕсли;
	
	СведенияДокументовОснований = Новый Структура(
		"
		|Организация,
		|Контрагент, Договор,
		|ВалютаДокумента, Кратность, Курс,
		|Автор,
		|ХозяйственнаяОперация,
		|ЭтоВозврат"
	);
	
	СведенияДокументовОснований.Вставить("ЕстьПрослеживаемыеТовары", Ложь);
	
	Если НЕ ДополнительныеСвойства.Свойство("ЭтоСинхронизация")
		ИЛИ ДополнительныеСвойства.ЭтоСинхронизация = Ложь Тогда
		
		ВалидныеТипыДокументов = Новый Массив;
		ВалидныеТипыДокументов.Добавить(Тип("ДокументСсылка.ДополнительныеРасходы"));
		ВалидныеТипыДокументов.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
		ВалидныеТипыДокументов.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		ВалидныеТипыДокументов.Добавить(Тип("ДокументСсылка.РасходСоСчета"));
		
		НеобходимоЗаполнитьВходящуюДату = Ложь;
		Для каждого СтрокаДокументаОснования Из ДокументыОснования Цикл
			
			НеобходимоЗаполнитьВходящуюДату = (ВалидныеТипыДокументов.Найти(ТипЗнч(СтрокаДокументаОснования.ДокументОснование)) <> Неопределено);
			Если НеобходимоЗаполнитьВходящуюДату Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НеобходимоЗаполнитьВходящуюДату Тогда
			
			ДатаВходящегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДокументаОснования.ДокументОснование, "ДатаВходящегоДокумента");
			Если НЕ ЗначениеЗаполнено(ДатаВходящегоДокумента) Тогда
				
				ДатаВходящегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДокументаОснования.ДокументОснование, "Дата");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьЗапасы.Очистить();
	
	Для каждого СтрокаТаблицы Из ДокументыОснования Цикл
		
		ЗаполнитьСведения(СтрокаТаблицы.ДокументОснование, СведенияДокументовОснований, СуммыДокументовОснований);
		
		Если ТипЗнч(СтрокаТаблицы.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			
			ДозаполнениеНаОснованииКорректировкиПоступления(СтрокаТаблицы);
			
			//ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СведенияДокументовОснований,
			//	"НомерИсходногоДокумента, ДатаИсходногоДокумента, УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(СведенияДокументовОснований.ЭтоВозврат) Тогда
		
		СведенияДокументовОснований.ЭтоВозврат = Перечисления.ДаНет.Нет;
		
	КонецЕсли;
	
	СведенияДокументовОснований.Автор = Пользователи.АвторизованныйПользователь();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СведенияДокументовОснований);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СуммыДокументовОснований);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	
КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения)
		ИЛИ (ТипЗнч(ДанныеЗаполнения) = Тип("ТаблицаЗначений")) Тогда
		
		ЗаполнитьДокументыОснования(ДанныеЗаполнения);
		ВыполнитьОбработкуЗаполнения();
		
	Иначе
		
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		
	КонецЕсли;
	
	Если ЭтоВозврат <> Перечисления.ДаНет.Да Тогда
		
		ЭтоВозврат = Перечисления.ДаНет.Нет;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// В обработчике события ОбработкаПроверкиЗаполнения документа выполняется
// копирование и обнуление проверяемых реквизитов для исключения стандартной
// проверки заполнения платформой и последующей проверки средствами встроенного языка.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Исправление Тогда
		
		ПроверяемыеРеквизиты.Добавить("НомерИсправления");
		ПроверяемыеРеквизиты.Добавить("ДатаИсправления");
		
	Иначе
		
		ПроверяемыеРеквизиты.Добавить("НомерВходящегоДокумента");
		ПроверяемыеРеквизиты.Добавить("ДатаВходящегоДокумента");
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
		
		Для каждого СтрокаТаблицыЗапасов Из УдалитьЗапасы Цикл
			
			Если НЕ ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Аванс
				И ЗначениеЗаполнено(СтрокаТаблицыЗапасов.НомерГТД)
				И (НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапасов.СтранаПроисхождения) 
					ИЛИ СтрокаТаблицыЗапасов.СтранаПроисхождения = Справочники.СтраныМира.Россия) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке [%1] не верно указана страна происхождения'"),
					СокрЛП(СтрокаТаблицыЗапасов.НомерСтроки));
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы",
					СтрокаТаблицыЗапасов.НомерСтроки, "СтранаПроисхождения");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
			КонецЕсли;
			
			Если НЕ ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Аванс
				И (ЗначениеЗаполнено(СтрокаТаблицыЗапасов.СтранаПроисхождения)
					И НЕ СтрокаТаблицыЗапасов.СтранаПроисхождения = Справочники.СтраныМира.Россия)
				И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапасов.НомерГТД) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке [%1] не указан номер ГТД'"),
					СокрЛП(СтрокаТаблицыЗапасов.НомерСтроки));
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы",
					СтрокаТаблицыЗапасов.НомерСтроки, "НомерГТД");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.КорректировкаАванса Тогда
		
		ИмяСписка = НСтр("ru = 'Расшифровка аванса'");
		Для Каждого СтрокаАвансы Из Авансы Цикл
			
			ИндексСтроки = Формат(СтрокаАвансы.НомерСтроки - 1, "ЧН=0; ЧГ=");
			Если СтрокаАвансы.СуммаДоКорректировки > СтрокаАвансы.Сумма Тогда
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", НСтр("ru = 'Сумма'"), СтрокаАвансы.НомерСтроки, ИмяСписка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, СтрШаблон("Авансы[%1].Сумма", ИндексСтроки), "Объект", Отказ);
				
			КонецЕсли;
			
			Если СтрокаАвансы.СуммаНДСДоКорректировки > СтрокаАвансы.СуммаНДС Тогда
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", НСтр("ru = 'Сумма НДС'"), СтрокаАвансы.НомерСтроки, ИмяСписка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, СтрШаблон("Авансы[%1].СуммаНДС", ИндексСтроки), "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Авансы.КорректируемыйСчетФактура");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Авансы.СуммаДоКорректировки");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Авансы.СтавкаНДСДоКорректировки");
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Авансы.СуммаНДСДоКорректировки");
		
	КонецЕсли;
	
	// Документ основание должен быть проведен
	Если ЗначениеЗаполнено(УдалитьДокументОснование)
		И НЕ УдалитьДокументОснование.Проведен Тогда
		ТекстСообщения = СтрШаблон(НСтр(
			"ru = 'Документ-основание %1 №%2 от %3 не проведен. Проведение счет фактуры не возможно.'"),
			ТипЗнч(УдалитьДокументОснование), УдалитьДокументОснование.Номер,
			Формат(УдалитьДокументОснование.Дата, "ДЛФ=D;"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
	КонецЕсли;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	ИменаТабличныхЧастей = Новый Массив;
	ИменаТабличныхЧастей.Добавить("УдалитьЗапасы");
	
	ГрузовыеТаможенныеДекларацииСервер.ПриОбработкеПроверкиЗаполнения(Отказ, ЭтотОбъект, ИменаТабличныхЧастей);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	// Проверка на уникальность счета-фактуры полученной
	Если ЗначениеЗаполнено(УдалитьДокументОснование) Тогда
		
		Если ТипЗнч(УдалитьДокументОснование) <> Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		
			НайденныйСчетФактура = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(УдалитьДокументОснование, Истина);
			Если ЗначениеЗаполнено(НайденныйСчетФактура) И НайденныйСчетФактура.Ссылка <> Ссылка Тогда
			
				ТекстСообщения = НСтр("ru = 'Для документа ""%Ссылка%"" 
										|уже введен счет-фактура ""%СчетФактура%"". 
										|Запись еще одного документа ""Счет-фактура (полученный)"" не допускается.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", УдалитьДокументОснование);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетФактура%", НайденныйСчетФактура.Ссылка);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "УдалитьДокументОснование", , Отказ);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
		И НЕ Контрагент.ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(Договор) Тогда
		
		Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД() Тогда
		
		// Инициализация дополнительных свойств для проведения документа.
		ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
		
		// Инициализация данных документа.
		Документы.СчетФактураПолученный.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
		
		// Подготовка наборов записей.
		ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
		
		// Отражение в разделах учета.
		ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыВРазрезеГТД", ДополнительныеСвойства.ТаблицыДляДвижений,
			Движения, Отказ);
		
		// Запись наборов записей.
		ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
		// Контроль
		Документы.СчетФактураПолученный.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);    
		
		ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.СчетФактураПолученный.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию")
		ИЛИ ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО")) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Константы.ФункциональнаяОпцияИспользоватьСчетаФактурыВходящие.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли