////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//// Процедура инициализирует заполнение формы документа по документу основанию
//
//
&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованию(ЗаписатьДокумент = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Объект.УдалитьДокументОснование) Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоДокументу(ЗаписатьДокумент);
	ОбработатьИзменениеВидаОперации(Ложь);
	
	УстановитьНадписьЦеныИВалюта();
	
КонецПроцедуры

// Процедура вызывает обработку заполнения табличной части номерами ГТД.
//
&НаСервере
Процедура ЗаполнитьНомераГТДНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получим обороты по номерам ГТД
	ВременнаяТаблицаЗапасы = Новый ТаблицаЗначений;
	
	Массив = Новый Массив;
	
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	ВременнаяТаблицаЗапасы.Колонки.Добавить("Номенклатура", ОписаниеТипов);
	Массив.Очистить();
	
	Массив.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	ВременнаяТаблицаЗапасы.Колонки.Добавить("Характеристика", ОписаниеТипов);
	Массив.Очистить();
	
	Массив.Добавить(Тип("СправочникСсылка.ПартииНоменклатуры"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	ВременнаяТаблицаЗапасы.Колонки.Добавить("Партия", ОписаниеТипов);
	Массив.Очистить();
	
	Для каждого СтрокаТЧ Из Объект.УдалитьЗапасы Цикл
		
		НоваяСтрока = ВременнаяТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВременнаяТаблицаЗапасы",	ВременнаяТаблицаЗапасы);
	Запрос.УстановитьПараметр("Организация", 			Константы.УчетПоКомпании.Компания(Объект.Организация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураЗапасы.Номенклатура,
	|	СчетФактураЗапасы.Характеристика,
	|	СчетФактураЗапасы.Партия
	|ПОМЕСТИТЬ ТаблицаЗапасы
	|ИЗ
	|	&ВременнаяТаблицаЗапасы КАК СчетФактураЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыВРазрезеГТДОбороты.Регистратор.Контрагент КАК Контрагент,
	|	ЗапасыВРазрезеГТДОбороты.СтранаПроисхождения,
	|	ЗапасыВРазрезеГТДОбороты.Номенклатура,
	|	ЗапасыВРазрезеГТДОбороты.Характеристика,
	|	ЗапасыВРазрезеГТДОбороты.Партия,
	|	ЗапасыВРазрезеГТДОбороты.НомерГТД,
	|	ЗапасыВРазрезеГТДОбороты.НомерГТД.Код КАК КодГТД,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаГТД
	|ИЗ
	|	ТаблицаЗапасы КАК ТаблицаЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыВРазрезеГТД.Обороты(, , Запись, Организация = &Организация) КАК ЗапасыВРазрезеГТДОбороты
	|		ПО ТаблицаЗапасы.Номенклатура = ЗапасыВРазрезеГТДОбороты.Номенклатура
	|			И ТаблицаЗапасы.Характеристика = ЗапасыВРазрезеГТДОбороты.Характеристика
	|			И ТаблицаЗапасы.Партия = ЗапасыВРазрезеГТДОбороты.Партия
	|			И &УсловиеКонтрагента";
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеКонтрагента", "(ЗапасыВРазрезеГТДОбороты.Регистратор.Контрагент = &Контрагент)");
		Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеКонтрагента", "Истина");
		
	КонецЕсли;
	
	ОборотыЗапасовВРазрезеГТД = Запрос.Выполнить().Выгрузить();
	
	// Выделим даты из номеров ГТД (даты должны быть в новом формате = 6 символов)
	Для каждого СтрокаТаблицы Из ОборотыЗапасовВРазрезеГТД Цикл
		
		ПозицияПервогоРазделителя	= СтрНайти(СтрокаТаблицы.КодГТД, "/");
		ДатаГТД						= Прав(СтрокаТаблицы.КодГТД, СтрДлина(СтрокаТаблицы.КодГТД) - ПозицияПервогоРазделителя);
		ПозицияВторогоРазделителя	= СтрНайти(ДатаГТД, "/");
		ДатаГТД						= Лев(ДатаГТД, ПозицияВторогоРазделителя - 1);
		
		Если СтрДлина(ДатаГТД) = 6 Тогда
			
			ДеньДаты	= Лев(ДатаГТД, 2);
			МесяцДаты	= Сред(ДатаГТД, 3, 2);
			ГодДаты		= Сред(ДатаГТД, 5, 2);
			
			Попытка
				ГодДаты					= ?(Число(ГодДаты) >= 30, "19" + ГодДаты, "20" + ГодДаты);
				СтрокаТаблицы.ДатаГТД	= Дата(ГодДаты, МесяцДаты, ДеньДаты);
			Исключение
			
			КонецПопытки;
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	// Сортируем для получение номера ГТД с наибольшей датой
	ОборотыЗапасовВРазрезеГТД.Сортировать("Номенклатура, Характеристика, Партия, ДатаГТД Убыв");
	
	// Отбор по контрагенту:
	//  - если контрагент указан в документе, отбор не критичен
	//  - если контрагент пуст, проставим отбор по первой позиции ГТД (перед окончанием первой итерации цикла) и заполним
	//  поле в шапке
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Партия");
	
	// Заполним поля в таблице запасов
	Для каждого СтрокаТЧ Из Объект.УдалитьЗапасы Цикл
		
		СтруктураОтбора.Номенклатура	= СтрокаТЧ.Номенклатура;
		СтруктураОтбора.Характеристика	= СтрокаТЧ.Характеристика;
		СтруктураОтбора.Партия			= СтрокаТЧ.Партия;
		
		МассивСтрокГТД = ОборотыЗапасовВРазрезеГТД.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрокГТД.Количество() < 1 Тогда
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				
				СтрокаТЧ.СтранаПроисхождения = СтрокаТЧ.Номенклатура.СтранаПроисхождения;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТЧ.СтранаПроисхождения	= МассивСтрокГТД[0].СтранаПроисхождения;
		СтрокаТЧ.НомерГТД				= МассивСтрокГТД[0].НомерГТД;
		
		// Учесть контрагента, если в выборке присутствуют ГТД от разных поставщиков
		Если НЕ СтруктураОтбора.Свойство("Контрагент")
			И ЗначениеЗаполнено(МассивСтрокГТД[0].Контрагент) Тогда
			
			СтруктураОтбора.Вставить("Контрагент", МассивСтрокГТД[0].Контрагент);
			
			// Выбираем ГТД по одному контрагенту, заполним поле для пользователя, если оно пустое
			Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
				
				Объект.Контрагент = МассивСтрокГТД[0].Контрагент;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ЗаполнитьНомераГТДНаСервере()

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу(ЗаписатьДокумент = Ложь)
	
	Документ = РеквизитФормыВЗначение("Объект");
	
	Если Документ.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.СуммовыеРазницы Тогда
		
		Документ.ДополнительныеСвойства.Вставить("ЭтоВходящаяСуммоваяРазница", Истина);
		
	КонецЕсли;
	
	Документ.Заполнить(Объект.УдалитьДокументОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	Если ЗаписатьДокумент Тогда
		
		Записать();
		
	Иначе
		
		Модифицированность = Истина;
		УстановитьВидимостьРеквизитов();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоДокументу()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	
	РазностьДат = ДокументыУНФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаНовая, Новый Структура("Валюта", ВалютаДокумента));
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", Константы.УчетПоКомпании.Компания(Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	// Наборы
	СтруктураДанные.Вставить("ЭтоНабор", СтруктураДанные.Номенклатура.ЭтоНабор);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		ДанныеСтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС);
	Иначе
		ДанныеСтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию);
	КонецЕсли;
	
	Если СтруктураДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс")
		И ЗначениеЗаполнено(ДанныеСтавкаНДС) И НЕ ДанныеСтавкаНДС.Расчетная Тогда
		
		ДанныеСтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(ДанныеСтавкаНДС);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("СтавкаНДС", ДанныеСтавкаНДС);
	
	СтруктураДанные.Вставить("Цена", 0);		
	СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьСтавкуНДСОрганизации(СтруктураДанные)
	
	ДанныеСтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию);
	
	Если ЗначениеЗаполнено(ДанныеСтавкаНДС) И НЕ ДанныеСтавкаНДС.Расчетная Тогда
		
		ДанныеСтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(ДанныеСтавкаНДС);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("СтавкаНДС", ДанныеСтавкаНДС);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
		
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе	
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100;		
	
КонецПроцедуры // ПересчитатьСуммыДокумента() 

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
		
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()	

// Процедура пересчитывает курс и кратность валюты документа при изменении
// даты документа.
//
&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(Объект.Курс) + " " + СокрЛП(НациональнаяВалюта);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(КурсНовый) + " " + СокрЛП(НациональнаяВалюта);
		
		ТекстСообщения = НСтр("ru = 'На дату документа у валюты документа (" + КурсВалютыСтрокой + ") был задан курс.
									|Установить курс документа (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
		
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыДокументаЗавершение", ЭтотОбъект,
			Новый Структура("КратностьНовый, КурсНовый", КратностьНовый, КурсНовый)), ТекстСообщения, Режим, 0);
		Возврат;		
		
	КонецЕсли;	
	
	ПересчитатьКурсКратностьВалютыДокументаФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    КратностьНовый = ДополнительныеПараметры.КратностьНовый;
    КурсНовый = ДополнительныеПараметры.КурсНовый;
    
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        
        Объект.Курс = КурсНовый;
        Объект.Кратность = КратностьНовый;
        
    КонецЕсли;		
    
    
    ПересчитатьКурсКратностьВалютыДокументаФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокументаФрагмент()
    
    УстановитьНадписьЦеныИВалюта();

КонецПроцедуры // ПересчитатьКурсКратностьВалютыДокумента()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаДокументаПередИзменением, ПересчитатьЦены = Ложь, ТекстПредупреждения = "")
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Договор",			Объект.Договор);
	СтруктураПараметров.Вставить("ЭтоСчетФактура", 	Истина);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс", 			Объект.Курс);
	СтруктураПараметров.Вставить("Кратность", 		Объект.Кратность);
	СтруктураПараметров.Вставить("Организация",		Компания); 
	СтруктураПараметров.Вставить("ДатаДокумента", 	Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены", Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены", ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаДокументаПередИзменением", ВалютаДокументаПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()	

// Процедура устанавливает видимость договора в зависимости от установленного параметра контрагенту.
//
&НаСервере
Процедура УстановитьВидимостьРеквизитов()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидОперации", "Доступность", Объект.ВидОперации <> Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка И Не Объект.Исправление);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Договор", "Видимость", Объект.Контрагент.ВестиРасчетыПоДоговорам);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетаФактурыВыданныеПокупателям", "Видимость", (ТипЗнч(Объект.УдалитьДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") И Объект.ДатаВходящегоДокумента >= '20150101'));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВходящийНомерДата", "Видимость", Не Объект.Исправление);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсправлениеНомерДата", "Видимость", Объект.Исправление);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИсправляемый", "Видимость", Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка ИЛИ Объект.Исправление);
	
	Если ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Тогда
		
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"),
			Объект.НомерВходящегоДокумента, Формат(Объект.ДатаВходящегоДокумента,"ДЛФ=Д"));
		
	ИначеЕсли ЗначениеЗаполнено(Объект.НомерИсходногоДокумента) Тогда
		
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"),
			Объект.НомерИсходногоДокумента, Формат(Объект.ДатаИсходногоДокумента,"ДЛФ=Д"));
		
	КонецЕсли;
		
	НадписьСчетФактура = ТекстНадписи;
	
	Если ТипЗнч(Объект.УдалитьДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		Элементы.ЗапасыКоличество.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ЗапасыЦена.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ЗапасыСумма.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьРеквизитов()

// Получает структуру параметров формы выбора договора контрагента.
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Получает договор по умолчанить в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Выполняет действия при изменении вида операции.
//
&НаСервере
Процедура ОбработатьИзменениеВидаОперации(ИзменениеОперации = Истина)
	
	Если ИзменениеОперации Тогда
		Объект.УдалитьДокументОснование = Неопределено;
		Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс") Тогда
		
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
		МассивОтбора.Добавить(Тип("ДокументСсылка.РасходИзКассы"));
		МассивОтбора.Добавить(Тип("ДокументСсылка.РасходСоСчета"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(МассивОтбора);
		
		Элементы.ЗапасыНоменклатура.АвтоВыборНезаполненного = Ложь;
		Элементы.ЗапасыНоменклатура.АвтоОтметкаНезаполненного = Ложь;
		
		Для каждого СтрокаТЧ Из Объект.УдалитьЗапасы Цикл
			
			Если ИзменениеОперации И ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) И НЕ СтрокаТЧ.СтавкаНДС.Расчетная Тогда
				
				СтрокаТЧ.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(СтрокаТЧ.СтавкаНДС);
				
			КонецЕсли;
		
			СтрокаТЧ.СтранаПроисхождения = Неопределено;
			СтрокаТЧ.НомерГТД = Неопределено;
			
		КонецЦикла;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка") Тогда
		
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(МассивОтбора);
		
	Иначе
		
		Для каждого СтрокаТЧ Из Объект.УдалитьЗапасы Цикл
			
			Если ИзменениеОперации И ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) И СтрокаТЧ.СтавкаНДС.Расчетная Тогда
				
				Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.ВидСтавкиНДС) Тогда
					СтрокаТЧ.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТЧ.Номенклатура.ВидСтавкиНДС);
				Иначе
					СтрокаТЧ.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаВозврат Тогда
			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Иначе
			
			ИспользоватьКорректировкиПоступлений = ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиПоступлений");
			ПередачаТоваровНаКомиссию	= ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию");
			ПриемТоваровНаКомиссию		= ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию");
			ОтчетПереработчика			= ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку");
		
			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ДополнительныеРасходы"));
			Если ИспользоватьКорректировкиПоступлений Тогда
				МассивОтбора.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
			КонецЕсли;
			Если ПередачаТоваровНаКомиссию Тогда
				МассивОтбора.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
			КонецЕсли;
			Если ПриемТоваровНаКомиссию Тогда
				МассивОтбора.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
			КонецЕсли;
			Если ОтчетПереработчика Тогда
				МассивОтбора.Добавить(Тип("ДокументСсылка.ОтчетПереработчика"));
			КонецЕсли;
			МассивОтбора.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		КонецЕсли;
		
		ДопустимыеТипы = Новый ОписаниеТипов(МассивОтбора);
		
		Элементы.ЗапасыНоменклатура.АвтоВыборНезаполненного = Истина;
		Элементы.ЗапасыНоменклатура.АвтоОтметкаНезаполненного = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.УдалитьДокументОснование) 
		И ТипЗнч(Объект.УдалитьДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		
		Элементы.ЗапасыНоменклатура.Видимость			= Ложь;
		Элементы.ЗапасыХарактеристика.Видимость			= Ложь;
		Элементы.ЗапасыПартия.Видимость					= Ложь;
		Элементы.ЗапасыЕдиницаИзмерения.Видимость		= Ложь;
		Элементы.ЗапасыСтранаПроисхождения.Видимость	= Ложь;
		Элементы.ЗапасыНомерГТД.Видимость 				= Ложь;
		
		Элементы.ВидОперации.Доступность				= Ложь;
		
		Элементы.ЗапасыСодержание.Видимость				= Истина;
		
	Иначе
		
		Элементы.ЗапасыНоменклатура.Видимость			= Истина;
		Элементы.ЗапасыХарактеристика.Видимость			= Истина;
		Элементы.ЗапасыПартия.Видимость					= Истина;
		Элементы.ЗапасыЕдиницаИзмерения.Видимость 		= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс"));
		Элементы.ЗапасыКоличество.Видимость 			= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс"));
		Элементы.ЗапасыЦена.Видимость 					= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс"));
		Элементы.ЗапасыСтранаПроисхождения.Видимость 	= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс"));
		Элементы.ЗапасыНомерГТД.Видимость 				= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс"));
		
		Элементы.ГруппаЗаполнитьНомераГТД.Доступность 	= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс"));
		Элементы.УстановитьНомерГТД.Доступность 		= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс"));
		
		Элементы.ЗапасыСодержание.Видимость				= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеВидаОперации()

// Выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговора()
	
	ДоговорПередИзменением	= Договор;
	Договор 				= Объект.Договор;
		
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.Договор);
		
		ВалютаРасчетовПередИзменением = Объект.ВалютаДокумента;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда 
			
			Объект.Курс		= ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0,		1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность= ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0,	1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
			
		КонецЕсли;
		
		Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
		
		Если ЗначениеЗаполнено(Объект.Договор)
			И ЗначениеЗаполнено(СтруктураДанные.ВалютаРасчетов)
			И Объект.Договор <> ДоговорПередИзменением
			И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов
			И Объект.УдалитьЗапасы.Количество() > 0 Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом! 
				|Необходимо проверить валюту документа!'");
			
			ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, ТекстПредупреждения);
			
		КонецЕсли;
		
		УстановитьНадписьЦеныИВалюта();
		
	КонецЕсли;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Объект.Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию
	);
		
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорПоУмолчанию.ВалютаРасчетов
	);
	
	УстановитьВидимостьРеквизитов();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, Договор)
		
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Договор.ВалютаРасчетов
	);	
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		Ложь
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

// Функция проверяет номеклалуру по типу
//
&НаСервереБезКонтекста
Функция ТипНоменклатурыЗапас(НоменклатураСсылка)
	
	Возврат НоменклатураСсылка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
	
КонецФункции // ТипНоменклатурыЗапас()

// Функция помещает список запасов во временное хранилище и возвращает адрес 
//
&НаСервере
Функция ПоместитьЗапасыВХранилище() 
	
	Возврат ПоместитьВоВременноеХранилище(Объект.УдалитьЗапасы.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции // ПоместитьЗапасыВХранилище()

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		НоваяСтрока.СтранаПроисхождения = НоваяСтрока.Номенклатура.СтранаПроисхождения; 
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// Процедура получает список товаров и номера ГТД из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилищаДляЗаполненияНомеровГТД(АдресЗапасовВХранилище, ИмяТабличнойЧасти)
	
	Объект[ИмяТабличнойЧасти].Очистить();
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// ПодключаемоеОборудование

// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
			СтруктураДанныеНоменклатуры.Вставить("ВидОперации", СтруктураДанные.ВидОперации);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.СчетФактураПолученный.ТабличныеЧасти.УдалитьЗапасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено ИЛИ ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор));
		Иначе
			МассивСтрокТЧ = Объект.УдалитьЗапасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.УдалитьЗапасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Иначе
				НайденнаяСтрока = МассивСтрокТЧ[0];
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НайденнаяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		Если ТекНекорректныйШтрихкод.Свойство("ЭтоНабор") И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", НСтр("ru = 'Набор'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		КонецЕсли; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает доступность элементов формы.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура УстановитьНадписьЦеныИВалюта()
	
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ЦеныИВалюта = НСтр("ru = '%Валюта%'");
		ЦеныИВалюта = СтрЗаменить(ЦеныИВалюта, "%Валюта%", СокрЛП(Строка(Объект.ВалютаДокумента)));
		
	Иначе
		
		ЦеныИВалюта = НСтр("ru = 'Валюта не указана'");
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("НаВозврат", НаВозврат);
	
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.РасходИзКассы")
		ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.РасходСоСчета") Тогда
		
		Документ = ?(ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.РасходИзКассы"), "РасходИзКассы", "РасходСоСчета");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|		РасходИзКассыРасшифровкаПлатежа.Договор КАК Договор
		|	ИЗ
		|		Документ." + Документ + ".РасшифровкаПлатежа КАК РасходИзКассыРасшифровкаПлатежа
		|	ГДЕ
		|		РасходИзКассыРасшифровкаПлатежа.Ссылка = &Ссылка
		|		И РасходИзКассыРасшифровкаПлатежа.ПризнакАванса"
		);
		
		Запрос.УстановитьПараметр("Ссылка", Параметры.Основание);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			НеОткрыватьФорму = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	
	НациональнаяВалюта 			= Константы.НациональнаяВалюта.Получить();
	СтруктураПоВалюте			= РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта 		= СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс") Тогда
		
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
		МассивОтбора.Добавить(Тип("ДокументСсылка.РасходИзКассы"));
		МассивОтбора.Добавить(Тип("ДокументСсылка.РасходСоСчета"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(МассивОтбора);
		
		Элементы.ЗапасыНоменклатура.АвтоВыборНезаполненного = Ложь;
		Элементы.ЗапасыНоменклатура.АвтоОтметкаНезаполненного = Ложь;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка") Тогда
		
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(МассивОтбора);
		
	Иначе
		
		Если НаВозврат Тогда
			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Иначе
			ИспользоватьКорректировкиПоступлений = ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиПоступлений");
			ПередачаТоваровНаКомиссию	= ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию");
			ПриемТоваровНаКомиссию		= ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию");
			ОтчетПереработчика			= ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку");
		
			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ДополнительныеРасходы"));
			Если ИспользоватьКорректировкиПоступлений Тогда
				МассивОтбора.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
			КонецЕсли;
			Если ПередачаТоваровНаКомиссию Тогда
				МассивОтбора.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
			КонецЕсли;
			Если ПриемТоваровНаКомиссию Тогда
				МассивОтбора.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
			КонецЕсли;
			Если ОтчетПереработчика Тогда
				МассивОтбора.Добавить(Тип("ДокументСсылка.ОтчетПереработчика"));
			КонецЕсли;
			МассивОтбора.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		КонецЕсли;
		
		ДопустимыеТипы = Новый ОписаниеТипов(МассивОтбора);
		
		Элементы.ЗапасыНоменклатура.АвтоВыборНезаполненного = Истина;
		Элементы.ЗапасыНоменклатура.АвтоОтметкаНезаполненного = Истина;
		
	КонецЕсли;
	
	// Когда основание ОтчетКомитенту управление видимостью элементов преобретает другой характер
	Если ЗначениеЗаполнено(Объект.УдалитьДокументОснование) 
		И ТипЗнч(Объект.УдалитьДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		
		Элементы.ЗапасыНоменклатура.Видимость			= Ложь;
		Элементы.ЗапасыХарактеристика.Видимость			= Ложь;
		Элементы.ЗапасыПартия.Видимость					= Ложь;
		Элементы.ЗапасыЕдиницаИзмерения.Видимость		= Ложь;
		Элементы.ЗапасыСтранаПроисхождения.Видимость	= Ложь;
		Элементы.ЗапасыНомерГТД.Видимость 				= Ложь;
		
		Элементы.ВидОперации.Доступность				= Ложь;
		
		Элементы.ЗапасыСодержание.Видимость				= Истина;
		
	Иначе
		
		Элементы.ЗапасыЕдиницаИзмерения.Видимость 		= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс"));
		Элементы.ЗапасыКоличество.Видимость 			= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс"));
		Элементы.ЗапасыЦена.Видимость 					= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс"));
		Элементы.ЗапасыСтранаПроисхождения.Видимость 	= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс"));
		Элементы.ЗапасыНомерГТД.Видимость 				= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс"));
		
		Элементы.ГруппаЗаполнитьНомераГТД.Доступность 	= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс"));
		Элементы.УстановитьНомерГТД.Доступность 		= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс"));
		
		Элементы.ЗапасыСодержание.Видимость				= Ложь;
		
	КонецЕсли;
	
	// Номера ГТД
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс")) 
		И Объект.УдалитьЗапасы.Количество() > 0 Тогда
		
		ЗаполнитьНомераГТДНаСервере();
		
	КонецЕсли;
	
	// Для СФ на основе документов комиссии:
	// Если не видно не номенклатуры не содержания, то нужно вкл. видимость для содержания
	Если НЕ (Элементы.ЗапасыНоменклатура.Видимость 
		И Элементы.ЗапасыСодержание.Видимость) Тогда
		
		Элементы.ЗапасыСодержание.Видимость = Истина;
		
	КонецЕсли;
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	Элементы.ЗапасыЦена.ТолькоПросмотр 		= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСумма.ТолькоПросмотр 	= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр 	= НЕ РазрешеноРедактированиеЦенДокументов;
	
	Если НаВозврат Тогда
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера);
		НовыйМассив.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика);
		НовыйМассив.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя);
		НовыйМассив.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения);
		МассивДоступныхВидовОпераций = Новый ФиксированныйМассив(НовыйМассив);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", МассивДоступныхВидовОпераций);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		
	КонецЕсли;
	
	// Установка видимости договора.
	УстановитьВидимостьРеквизитов();
	
	// Установить надписи основание
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.УдалитьДокументОснование);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭДО
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ПриЧтенииФормыДокумента(ЭтотОбъект);
	// Конец ЭДО
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

// Процедура обработчик события ПередЗаписьюНаСервере.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения,
			Объект.Договор,
			Объект.Ссылка,
			Объект.Организация,
			Объект.Контрагент,
			Отказ,
			Объект.ВидОперации);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ?(Отказ, НСтр("ru = 'Документ не проведен! '") + ТекстСообщения, ТекстСообщения);
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
			КонецЕсли;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ДатаВПредставление			= ?(ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента), Объект.ДатаВходящегоДокумента, Объект.Дата);
	ПредставлениеСчетФактуры	= СчетаФактурыУНФКлиент.ПредставлениеСчетаФактуры(ДатаВПредставление, Объект.НомерВходящегоДокумента);
	
	МассивОснований = Новый Массив(1);
	МассивОснований.Добавить(Объект.УдалитьДокументОснование);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПредставлениеСчетФактуры", ПредставлениеСчетФактуры);
	ПараметрыОповещения.Вставить("ДокументыОснования", МассивОснований);
	
	Оповестить("ОбновлениеТекстаПроСчетФактуруПолученный", ПараметрыОповещения, Объект.Ссылка);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЭДО
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НеОткрыватьФорму Тогда
		Отказ = Истина;
	Иначе	
		УстановитьНадписьЦеныИВалюта();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ОбработкаВыбора.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбора" Тогда
		
		Для каждого ИдентификаторСтроки Из Элементы.Запасы.ВыделенныеСтроки Цикл
			
			СтрокаЗапасы = Объект.УдалитьЗапасы.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если СтрокаЗапасы = Неопределено Тогда
				Продолжить;
			Иначе
				СтрокаЗапасы.НомерГТД = ВыбранноеЗначение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Контрагент"
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		УстановитьВидимостьРеквизитов();
		
	ИначеЕсли ИмяСобытия = "ЗаполнениеНомеровГТД"
		И ЗначениеЗаполнено(Параметр) 
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр;
		
		ПолучитьЗапасыИзХранилищаДляЗаполненияНомеровГТД(АдресЗапасовВХранилище, "Запасы");
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", Истина, Истина);
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ЭДО
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.СостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭДО

КонецПроцедуры // ОбработкаОповещения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	ОбработатьИзменениеДоговора();
	
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ВидОперации.
//
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаОперации();
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры // ВидОперацииПриИзменении()

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение( , Объект.ИсправляемыйСчетФактура);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ЗАПАСЫ

// Процедура - обработчик события ПриНачалеРедактирования табличной части Запасы.
//
&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактураПолученный.Аванс") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
			
		СтруктураДанные = ПолучитьСтавкуНДСОрганизации(СтруктураДанные);
	
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество 			= 1;
	СтрокаТабличнойЧасти.Цена 					= СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС 				= СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание 			= "";
	СтрокаТабличнойЧасти.СтранаПроисхождения 	= СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД 				= Неопределено;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

// Процедура - обработчик события АвтоПодбор поля ввода Содержание.
//
&НаКлиенте
Процедура ЗапасыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		ШаблонСодержания = ТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

// Процедура - обработчик события ОбработкаВыбора поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;	
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли; 		
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
	
КонецПроцедуры  // ЗапасыСтавкаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Всего.	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;	
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Всего.
//
&НаКлиенте
Процедура ЗапасыВсегоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Сумма
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Всего * СтавкаНДС / (100 + СтавкаНДС);		
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Всего * 100 / (100 + СтавкаНДС);
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
// Выполняет очистку договора и табличной части.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент);
		Объект.Договор = СтруктураДанные.Договор;
		
		ОбработатьИзменениеДоговора();
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищеный договор.
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор.
// Заполняет реквизиты формы курс и кратность.
//
&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры // ДоговорПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Договор.
//
&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора поля СтранаПроисхождения табличной части Запасы
//
&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.Запасы.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено
		И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.Номенклатура)
			И НЕ ТипНоменклатурыЗапас(ДанныеТекущейСтроки.Номенклатура) Тогда
			
			ВыбранноеЗначение = Неопределено;
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД в программе ведеться только для номенклатуры с типом ""Запас"".'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыСтранаПроисхожденияОбработкаВыбора()

// Процедура - обработчик события ОбработкаВыбора поля НомерГТД табличной части Запасы
//
&НаКлиенте
Процедура ЗапасыНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.Запасы.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено 
		И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ТекстСообщения = "";
		
		Если (ЗначениеЗаполнено(ДанныеТекущейСтроки.Номенклатура) 
			И НЕ ТипНоменклатурыЗапас(ДанныеТекущейСтроки.Номенклатура)) Тогда
			
			ВыбранноеЗначение = Неопределено;
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД в программе ведеться только для номенклатуры с типом ""Запас"".'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
			ИЛИ	(ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
					И ДанныеТекущейСтроки.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия")) Тогда
			
			ВыбранноеЗначение = Неопределено;
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД для отечественных товаров не ведется!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыНомерГТДОбработкаВыбора()

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	
	УстановитьВидимостьРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	СтруктураРеквизита = Новый Структура;
	СтруктураРеквизита.Вставить("Объект", "Объект");
	СтруктураРеквизита.Вставить("ТабЧасть", "Запасы");
	СтруктураРеквизита.Вставить("НомерСтроки", ТекущаяСтрока.НомерСтроки - 1);
	СтруктураРеквизита.Вставить("ИмяРеквизита", "Содержание");
	ЗаголовокФормыРедактирования = СтрШаблон(НСтр("ru='%1: содержание'"), Строка(ТекущаяСтрока.Номенклатура));
	ОбщегоНазначенияУНФКлиент.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект,
		СтруктураРеквизита, ЗаголовокФормыРедактирования);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ДекорацияОтказОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.УдалитьДокументОснование) Тогда
		
		ТекстСообщения = НСтр("ru ='Отсутствует основание документа.
			|Автоматическая конвертация не возможна.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Объект.УдалитьДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ТекстСообщения = НСтр("ru ='В основании документа выбран Заказ поставщику.
			|Счет-фактура более не поддерживается данный вид документа, поэтому автоматическая конвертация не возможна.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоДокументуОснованию(Истина);
	
	Оповестить("КонвертацияСчетФактуры", Неопределено, Объект.Ссылка);
	Закрыть();
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку ЗаполнитьНомераГТД.
//
&НаКлиенте
Процедура ЗаполнитьНомераГТД(Команда)
	
	Если Объект.УдалитьЗапасы.Количество() < 1 Тогда
		
		ТекстСообщения = НСтр("ru = 'Незаполнена табличная часть с запасами. Выполнение не возможно.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
		
	ТекстВопроса = НСтр("ru = 'В табличной части будет перезаполнена колонка ""Страна происхождения"" и ""Номер ГТД"". Продолжить?'");
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьНомераГТДЗавершение", ЭтотОбъект), ТекстВопроса,
		РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомераГТДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьНомераГТДНаСервере(); 
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура Подбор(Команда)
	
КонецПроцедуры // ПодборВыполнить()

// Процедура обработчик команды ПодборНомеровГТД
//
&НаКлиенте
Процедура ПодборНомеровГТД(Команда)
	
	Если Объект.УдалитьЗапасы.Количество() < 1 Тогда
		
		ТекстСообщения = НСтр("ru = 'Незаполнена табличная часть с запасами. Выполнение не возможно.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ДатаДокумента", Объект.Дата); 
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	ПараметрыПодбора.Вставить("АдресЗапасовВХранилище", ПоместитьЗапасыВХранилище());
	
	ОткрытьФорму("ОбщаяФорма.УдалитьПодборНомеровГТД", ПараметрыПодбора);
	
КонецПроцедуры // ПодборНомеровГТД()

// Процедура - обработчик нажатия на кнопку УстановитьНомерГТД.
//
&НаКлиенте
Процедура УстановитьНомерГТД(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка табличной части. Выполнение не возможно.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.НомераГТД.ФормаВыбора",, ЭтотОбъект);
	
КонецПроцедуры // УстановитьНомерГТД()

// Процедура - обработчик нажатия реквизита ЦеныИВалюта
//
&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	Модифицированность = Истина;
	
КонецПроцедуры // ЦеныИВалютаНажатие()

// ПодключаемоеОборудование

// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
		"ПоискПоШтрихкодуЗавершение",
		ЭтотОбъект, 
		Новый Структура("ТекШтрихкод", ТекШтрихкод)
	);
	
	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду",,,,,,ОбработкаЗавершения);
	#Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

// Процедура - обработчик события Действие команды ПолучитьВес
//
&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик команды ЗагрузитьДанныеИзТСД.
//
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

// Конец ПодключаемоеОборудование

&НаСервереБезКонтекста
Функция ТекстСодержания(Знач Номенклатура, Знач Характеристика)
	Возврат ТабличныеЧастиУНФ.ТекстСодержания(Номенклатура, Характеристика);
КонецФункции

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.УдалитьДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоДокументуОснованию();		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		// Выбрать основание
		СписокОснований = Новый СписокЗначений;
		Для каждого элТип Из ДопустимыеТипы.Типы() Цикл
			СписокОснований.Добавить("Документ." + РаботаСФормойДокументаКлиент.ИмяДокументаПоТипу(элТип) + ".ФормаВыбора", элТип);
		КонецЦикла;
		СписокОснований.СортироватьПоЗначению();
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокОснований, Элементы.ДокументОснованиеНадпись);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.УдалитьДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбИмяФормы, Параметры) Экспорт
	
	Если ВыбИмяФормы<>Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбИмяФормы.Значение, СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбЗначение, Параметры) Экспорт

	Если ВыбЗначение<>Неопределено Тогда
		Объект.УдалитьДокументОснование = ВыбЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоДокументуОснованию();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
// Процедура-обработчик результата открытия формы "Цены и валюты"
//
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура")
		И РезультатЗакрытия.БылиВнесеныИзменения Тогда
		
		Модифицированность		= Истина;
		
		Объект.ВалютаДокумента	= РезультатЗакрытия.ВалютаДокумента;
		Объект.Курс				= РезультатЗакрытия.КурсРасчетов;
		Объект.Кратность		= РезультатЗакрытия.КратностьРасчетов;
		
		// Пересчитываем цены по валюте.
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И РезультатЗакрытия.ПересчитатьЦены Тогда
			
			ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ДополнительныеПараметры.ВалютаДокументаПередИзменением, "Запасы");
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьНадписьЦеныИВалюта();
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭДО
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ПодключаемыеКоманды
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

// Вызывает процедуру копирования строк и оповещает пользователя о количестве скопированных.
//
&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру вставки строк и оповещает пользователя о количетсве вставленных.
//
&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

// Выполняет копирование выделенных строк в буфер обмена.
//
&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

// Вставляет скопированные строки из буфера обмена в выбранную табличную часть.
//
&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура();
		
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		Если НЕ ЗначениеЗаполнено(Строка.СтранаПроисхождения) Тогда
			Строка.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
