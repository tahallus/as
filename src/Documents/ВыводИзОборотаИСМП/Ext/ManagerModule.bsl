#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.КодыМаркировкиВыведеныИзОборота);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.ОшибкаПередачи);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статус по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие по-умолчанию.
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров=Неопределено) Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеИСМП

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВПроцессеРеализацииПоДоговоруРассрочки
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКредитныйДоговор
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияКонфискованныхТоваров
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияПоДоговоруРассрочки
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоОбразцамДистанционнаяПродажа
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБрак
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИстечениеСрокаГодности
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛабораторныеОбразцы
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаОтзывСРынка
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРекламации
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругиеПричины
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаТестированиеПродукта Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.КПередаче);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВПроцессеРеализацииПоДоговоруРассрочки
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКредитныйДоговор
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияКонфискованныхТоваров
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияПоДоговоруРассрочки
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоОбразцамДистанционнаяПродажа
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБрак
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИстечениеСрокаГодности
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛабораторныеОбразцы
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаОтзывСРынка
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРекламации
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругиеПричины
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаТестированиеПродукта Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.Обрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ИСМП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИСМП.
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция квитанции.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.КодыМаркировкиВыведеныИзОборота;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.ОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры обновления статуса
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(
		ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры обновления статуса
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ИСМП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИСМП.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Новый статус.
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Изменяет и возвращает статус документа ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Документ ИС МП.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - новый статус документа ИС МП.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево - Не используется.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияИСМП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ИнтеграцияИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборота);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 111,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 112,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 113,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 114,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 115,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 116,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 117,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 118,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 119,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРекламации);
		
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 121,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругиеПричины);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 122,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаТестированиеПродукта);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 123,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаОтзывСРынка);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 124,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 125,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 126,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКредитныйДоговор);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 127,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияКонфискованныхТоваров);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 128,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияПоДоговоруРассрочки);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 129,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоОбразцамДистанционнаяПродажа);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 131,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБрак);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 132,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИстечениеСрокаГодности);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 133,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛабораторныеОбразцы);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияИСМП.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияИСМППереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияИСМП.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Документ Маркировка товаров ИСМП
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры обновления статуса
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные Тогда
		
		Возврат ВыводИзОборотаJSON(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

// Формирует JSON сообщения для вывода КМ из оборота
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Документ Маркировка товаров ИСМП.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ВыводИзОборотаJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыводИзОборотаИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|
	|	Шапка.Ответственный                КАК Ответственный,
	|	Представление(Шапка.Ответственный) КАК ОтветственныйПредставление,
	|
	|	Шапка.Операция                        КАК Операция,
	|	Шапка.ВидПервичногоДокумента          КАК ВидПервичногоДокумента,
	|	Шапка.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента,
	|	Шапка.НомерПервичногоДокумента        КАК НомерПервичногоДокумента,
	|	Шапка.ДатаПервичногоДокумента         КАК ДатаПервичногоДокумента,
	|	Шапка.ВидПродукции                    КАК ВидПродукции,
	|	Шапка.АдресПлощадки                   КАК АдресПлощадки,
	|	Шапка.АдресПлощадкиСтрокой            КАК АдресПлощадкиСтрокой,
	|	Шапка.Ссылка                          КАК Ссылка
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	// Универсальные реквизиты
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Серия              КАК Серия,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|
	|	// Дополнительные реквизиты
	|	Товары.Цена      КАК Цена,
	|	Товары.Сумма     КАК Сумма,
	|	Товары.СуммаНДС  КАК СуммаНДС,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары            = РезультатЗапроса["Товары"].Выгрузить();
	Товары.Индексы.Добавить("Номенклатура,Характеристика,Серия");
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Шапка.Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Шапка.Операция, ДокументСсылка, НомерВерсии);
	
	// Заполнение данных по маркируемым товарам
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП = Ложь;
	
	РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
		ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
		ПараметрыСканирования,, Истина);
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(
				НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
	КонецЕсли;
	
	ПричинаВыводаИзОборота = ИнтерфейсИСМПСлужебный.ПричинаВыводаИзОборота(Шапка.Операция, Шапка.ВидПродукции);
	
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(Шапка.ВидПродукции) Тогда 
		
		МетаданныеXDTO = Метаданные.ПакетыXDTO.ВыбытиеМОТП;
		ФайлXDTO       = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(МетаданныеXDTO.ПространствоИмен, "Файл");
		
		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("Дата",  Шапка.Дата);
		ДанныеДокумента.Вставить("Номер", Шапка.Номер);
		ДанныеДокумента.Вставить("ИНН",   РеквизитыОрганизации.ИНН);
		
		ВерсияПрограммы = ИнтерфейсМОТПСлужебный.ВерсияПрограммы();
		ИмяФайла        = ИнтерфейсМОТПСлужебный.ИмяФайлаXDTO(ДанныеДокумента, МетаданныеXDTO);
		
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(ФайлXDTO, "ИмяФайла",        ИмяФайла,        СообщениеJSON);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(ФайлXDTO, "ВерсияПрограммы", ВерсияПрограммы, СообщениеJSON);
		
		// Уведомление
		УведомлениеXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
			МетаданныеXDTO.ПространствоИмен, "Уведомление", ФайлXDTO);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(ФайлXDTO, "Уведомление", УведомлениеXDTO, СообщениеJSON);
		СведенияВыбытииXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
			МетаданныеXDTO.ПространствоИмен, "СведенияОВыбытии", УведомлениеXDTO);
		
		// ИНН
		ИННXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
			МетаданныеXDTO.ПространствоИмен, "ИНН", СведенияВыбытииXDTO);
		Если СтрДлина(РеквизитыОрганизации.ИНН) > 10 Тогда
			ИмяПоляИНН = "ИННФЛТип";
		Иначе
			ИмяПоляИНН = "ИННЮЛТип";
		КонецЕсли;
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
			ИННXDTO, ИмяПоляИНН, РеквизитыОрганизации.ИНН, СообщениеJSON);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(СведенияВыбытииXDTO, "ИНН", ИННXDTO, СообщениеJSON);
		
		// Первичный документ
		ПервичныйДокументXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
			МетаданныеXDTO.ПространствоИмен, "ПервичныйДокумент", СведенияВыбытииXDTO);
		ЗначениеДаты = Формат(Шапка.ДатаПервичногоДокумента, "ДФ=dd.MM.yyyy;");
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(ПервичныйДокументXDTO, "Дата",  ЗначениеДаты, СообщениеJSON);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(ПервичныйДокументXDTO, "Время", Шапка.ДатаПервичногоДокумента, СообщениеJSON);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(ПервичныйДокументXDTO, "Номер", Шапка.НомерПервичногоДокумента, СообщениеJSON);
		Если Шапка.ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументовИСМП.Прочее Тогда
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
				ПервичныйДокументXDTO, "Наименование", Шапка.НаименованиеПервичногоДокумента, СообщениеJSON);
		Иначе
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
				ПервичныйДокументXDTO, "Наименование", СокрЛП(Шапка.ВидПервичногоДокумента), СообщениеJSON);
		КонецЕсли;
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
			СведенияВыбытииXDTO, "ПервичныйДокумент", ПервичныйДокументXDTO, СообщениеJSON);
		
		// Адрес
		АдресXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
			МетаданныеXDTO.ПространствоИмен, "АдресПлощадки", СведенияВыбытииXDTO);
		
		ДанныеСтраны = УправлениеКонтактнойИнформацией.СтранаАдресаКонтактнойИнформации(Шапка.АдресПлощадки);
		
		Если ДанныеСтраны.Ссылка = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			
			АдресРФXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(МетаданныеXDTO.ПространствоИмен, "АдрРФ", АдресXDTO);
			
			ДанныеКИ         = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(Шапка.АдресПлощадки);
			СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеКИ);
			
			Индекс           = СведенияОбАдресе.Индекс;
			КодРегиона       = СведенияОбАдресе.КодРегиона;
			Район            = СведенияОбАдресе.Район;
			Город            = РаботаСАдресами.ГородАдресаКонтактнойИнформации(ДанныеКИ);
			НаселунныйПункт  = СведенияОбАдресе.НаселенныйПункт;
			Улица            = СведенияОбАдресе.Улица;
			Дом              = СведенияОбАдресе.Здание.Номер;
			Корпус           = "";
			Квартира         = "";
			
			ДанныеКорпусов = Новый Массив();
			Для Каждого КорпусАдреса Из СведенияОбАдресе.Корпуса Цикл
				ДанныеКорпусов.Добавить(КорпусАдреса.Номер);
			КонецЦикла;
			Корпус = СтрСоединить(ДанныеКорпусов, ", ");
			
			ДанныеПомещений = Новый Массив();
			Для Каждого ДанныеПомещения Из СведенияОбАдресе.Помещения Цикл
				ДанныеКорпусов.Добавить(ДанныеПомещения.Номер);
			КонецЦикла;
			Квартира = СтрСоединить(ДанныеПомещений, ", ");
			
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "КодСтр",    ДанныеСтраны.Код, СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "Индекс",    Индекс,           СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "КодРегион", КодРегиона,       СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "Район",     Район,            СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "Город",     Город,            СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "НаселунныйПункт", НаселунныйПункт, СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "Улица",     Улица,            СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "Дом",       Дом,              СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "Корпус",    Корпус,           СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресРФXDTO, "Квартира",  Квартира,         СообщениеJSON);
			
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресXDTO, "АдрРФ", АдресРФXDTO, СообщениеJSON);
			
		Иначе
			
			АдресИнфXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(МетаданныеXDTO.ПространствоИмен, "АдрИнф", АдресXDTO);
			
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресИнфXDTO, "КодСтр",   ДанныеСтраны.Код, СообщениеJSON);
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресИнфXDTO, "АдрТекст", Лев(Шапка.АдресПлощадкиСтрокой, 1000), СообщениеJSON);
			
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(АдресXDTO, "АдрИнф", АдресИнфXDTO, СообщениеJSON);
			
		КонецЕсли;
		
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(СведенияВыбытииXDTO, "АдресПлощадки", АдресXDTO, СообщениеJSON);
		
		// Стоимость выводимой продукции
		Стоимость = Товары.Итог("Сумма");
		Если ЗначениеЗаполнено(Стоимость) Тогда
			ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
				СведенияВыбытииXDTO, "СтоимостьВыводимойПродукции", Стоимость, СообщениеJSON);
		КонецЕсли;
		
		// Причина вывода из оборота
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
				СведенияВыбытииXDTO, "ПричинаВыбытия", ПричинаВыводаИзОборота, СообщениеJSON);
		
		// Коды идентификации
		КодыИдентификацииXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
			МетаданныеXDTO.ПространствоИмен, "КодыИдентификации", СведенияВыбытииXDTO);
		
		МассивКодовМаркировки = Новый Массив;
		
		Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТЧМаркированныеТовары.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", СтрокаТЧМаркированныеТовары.Характеристика);
			ПараметрыОтбора.Вставить("Серия",          СтрокаТЧМаркированныеТовары.Серия);
			
			НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 1 Тогда
				
				СтрокаТЧТовары = НайденныеСтроки[0];
				
				РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
					СтрокаТЧМаркированныеТовары.Штрихкод, Шапка.ВидПродукции, Ложь);
				МассивКодовМаркировки.Добавить(
					ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
				
			ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
				
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия)));
				
			Иначе
				
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия)));
				
			КонецЕсли;
			
		КонецЦикла;
		
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
			КодыИдентификацииXDTO, "Список", СтрСоединить(МассивКодовМаркировки, " "), СообщениеJSON);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
			КодыИдентификацииXDTO, "СписыватьВложения", Истина, СообщениеJSON);
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
			СведенияВыбытииXDTO, "КодыИдентификации", КодыИдентификацииXDTO, СообщениеJSON);
		
		ИнтеграцияИСМПСлужебный.ЗаполнитьСвойствоXDTO(
			УведомлениеXDTO, "СведенияОВыбытии", СведенияВыбытииXDTO, СообщениеJSON);
		
		// Сообщение
		ТекстСообщенияXML                 = ИнтеграцияИСМП.ОбъектXDTOВXML(ФайлXDTO, "Файл");
		СообщениеJSON.Назначение          = Перечисления.НазначениеСообщенийИСМП.ИСМП;
		СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияXML;
		
		Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Ошибка формирования XML:
				|%1'"),
				СообщениеJSON.ТекстОшибки);
		КонецЕсли;
		
	Иначе
		
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("order_number",   Шапка.Номер);
		ТелоЗапроса.Вставить("order_date",     ИнтеграцияИС.ДатаUTC(Шапка.Дата));
		
		ТелоЗапроса.Вставить("inn",            РеквизитыОрганизации.ИНН);
		ТелоЗапроса.Вставить("action",         ПричинаВыводаИзОборота);
		ТелоЗапроса.Вставить("action_date",    ИнтеграцияИС.ДатаUTC(Шапка.ДатаПервичногоДокумента));
		
		ТелоЗапроса.Вставить(
			"document_type",
			ИнтерфейсИСМПСлужебный.ВидПервичногоДокумента(Шапка.ВидПервичногоДокумента));
		
		Если Шапка.ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументовИСМП.Прочее Тогда
			ТелоЗапроса.Вставить("primary_document_custom_name", Шапка.НаименованиеПервичногоДокумента);
		КонецЕсли;
		
		ТелоЗапроса.Вставить("document_number",              Шапка.НомерПервичногоДокумента);
		ТелоЗапроса.Вставить("document_date",                ИнтеграцияИС.ДатаUTC(Шапка.ДатаПервичногоДокумента));
		
		ТелоЗапроса.Вставить("products", Новый Массив);
		
		Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТЧМаркированныеТовары.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", СтрокаТЧМаркированныеТовары.Характеристика);
			ПараметрыОтбора.Вставить("Серия",          СтрокаТЧМаркированныеТовары.Серия);
			
			НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 1 Тогда
				
				СтрокаТЧТовары = НайденныеСтроки[0];
				
				СтрокаТЧ = Новый Структура;
				РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
					СтрокаТЧМаркированныеТовары.Штрихкод, Шапка.ВидПродукции, Ложь);
				СтрокаТЧ.Вставить(
					"cis",
					ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
				
				Если Не ЗначениеЗаполнено(СтрокаТЧТовары.Цена)
					И Шапка.Операция <> ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС") Тогда
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'Не заполнено поле ""Цена"" для номенклатуры %1.'"), ПараметрыОтбора.Номенклатура));
				КонецЕсли;
				
				Если Шапка.Операция <> ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС") Тогда
					СтрокаТЧ.Вставить("product_cost", СтрокаТЧТовары.Цена * 100);
					СтрокаТЧ.Вставить("product_tax",  СтрокаТЧТовары.СуммаНДС * 100);
				КонецЕсли;
				
				ТелоЗапроса.products.Добавить(СтрокаТЧ);
				
			ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
				
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
										ПараметрыОтбора.Номенклатура,
										ПараметрыОтбора.Характеристика,,
										ПараметрыОтбора.Серия)));
				
			Иначе
				
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
									ПараметрыОтбора.Номенклатура,
									ПараметрыОтбора.Характеристика,,
									ПараметрыОтбора.Серия)));
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстСообщенияJSON                = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		СообщениеJSON.Назначение          = Перечисления.НазначениеСообщенийИСМП.ИСМП;
		СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
		
	КонецЕсли;
	
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = НомерВерсии;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	
	СообщениеJSON.Операция                  = Шапка.Операция;
	СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
	СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменИСМП

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, требующих ожидания пользователем
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
//
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.ВыводИзОборотаИСМП);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - параметры указания серий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.ВыводИзОборотаИСМП, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - Произвольный - параметры указания серий
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.ВыводИзОборотаИСМП, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область ОбработкаКодовМаркировки

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		Результат = ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
		Результат = ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды)
	
	РезультатОбработки = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = ПараметрыЗаполнения();
	
	ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат РезультатОбработки;
	
КонецФункции

Процедура ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(
			Форма, СтрокаДерева, ПараметрыЗаполнения, УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ПараметрыЗаполнения.РодительскийШтрихкод = УпаковкаВерхнегоУровня;
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, СтрокаДерева, Неопределено, ПараметрыЗаполнения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования, ПараметрыЗаполнения = Неопределено)
	
	ИсточникДанных = Форма.Объект;
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Тогда
		КоличествоМаркируемыхЕдиниц = ДанныеШтрихкода.КоличествоПачек;
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции) Тогда
		КоличествоМаркируемыхЕдиниц = ДанныеШтрихкода.КоличествоВложенныхЕдиниц;
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		
		ПараметрыЗаполнения  = ПараметрыЗаполнения();
		РезультатОбработки   = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
		РодительскийШтрихкод = Неопределено;
		
	Иначе
		
		РезультатОбработки   = ПараметрыЗаполнения;
		РодительскийШтрихкод = ПараметрыЗаполнения.РодительскийШтрихкод;
		
	КонецЕсли;
	
	ОбработкаБезМаркировки = ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
		И ДанныеШтрихкода.Свойство("ОбработатьБезМаркировки")
		И ДанныеШтрихкода.ОбработатьБезМаркировки;
	
	ОбновляемаяСтрока = ПроверкаИПодборПродукцииИС.ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкода);
	ОбновляемаяСтрока.Количество = КоличествоМаркируемыхЕдиниц;
	Если РодительскийШтрихкод <> Неопределено Тогда
		ОбновляемаяСтрока.ШтрихкодУпаковки = РодительскийШтрихкод;
	КонецЕсли;
	
	ПараметрыПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции();
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеШтрихкода);
	
	НайденныеСтрокиТовары = ИсточникДанных.Товары.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
		ВсегоПоПараметрамПоиска = 0;
		Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТовары Цикл
			ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.Количество;
		КонецЦикла;
		
		ВсегоВКеше = 0;
		Если Не ОбработкаБезМаркировки Тогда
			
			ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока);
			
			Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
				КоличествоМаркируемыхЕдиниц = Макс(0, КоличествоМаркируемыхЕдиниц + ВсегоВКеше - ВсегоПоПараметрамПоиска);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТовары = НайденныеСтрокиТовары[0];
		
		СтрокаТовары.Количество         = СтрокаТовары.Количество + КоличествоМаркируемыхЕдиниц;
		СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок + КоличествоМаркируемыхЕдиниц;
		
		РезультатОбработки.ИзмененныеСтроки.Добавить(СтрокаТовары);
		
	Иначе
		
		СтрокаТовары = ИсточникДанных.Товары.Добавить();
		СтрокаТовары.Номенклатура       = ДанныеШтрихкода.Номенклатура;
		СтрокаТовары.Характеристика     = ДанныеШтрихкода.Характеристика;
		СтрокаТовары.Серия              = ДанныеШтрихкода.Серия;
		СтрокаТовары.КоличествоУпаковок = КоличествоМаркируемыхЕдиниц;
		
		РезультатОбработки.ДобавленныеСтроки.Добавить(СтрокаТовары);
		
	КонецЕсли;
		
	Если Не ОбработкаБезМаркировки Тогда
		
		ПроверкаИПодборПродукцииИС.ДополнитьКешИТаблицуШтрихкодовУпаковок(Форма, ОбновляемаяСтрока);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ПараметрыЗаполнения()
	
	Возврат Новый Структура("ИзмененныеСтроки, ДобавленныеСтроки, РодительскийШтрихкод", Новый Массив, Новый Массив);
	
КонецФункции

#КонецОбласти

#Область ЗавершениеПроверкиИПодбораМаркируемойПродукции

// Отражает результаты проверки и подбора в документе, из которого была вызвана соответствующая форма.
//
// Параметры:
// 	ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборМОТП.ЗафиксироватьРезультатПроверкиИПодбора)
Процедура ОтразитьРезультатыПроверкиИПодбора(ПараметрыОкончанияПроверки) Экспорт
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	МассивОбработанныхСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции Цикл
		
		Если СтрокаТаблицы.КоличествоПодобрано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТаблицы.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
		ПараметрыОтбора.Вставить("Серия",          СтрокаТаблицы.Серия);
		
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТаблицы);
		Иначе
			СтрокаТовары = НайденныеСтроки[0];
		КонецЕсли;
		
		Если МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			СтрокаТовары.Количество = СтрокаТаблицы.КоличествоПодобрано;
			МассивОбработанныхСтрок.Добавить(СтрокаТовары);
		Иначе
			СтрокаТовары.Количество = СтрокаТовары.Количество + СтрокаТаблицы.КоличествоПодобрано;
		КонецЕсли;
		
		ОбработатьСтрокуТабличнойЧасти(СтрокаТовары, ДокументОбъект);
		
	КонецЦикла;
	
	// Удаление лишних строк документа.
	ИндексТабЧастиТовары = ДокументОбъект.Товары.Количество() - 1;
	Пока ИндексТабЧастиТовары >= 0 Цикл
		
		СтрокаТовары = ДокументОбъект.Товары[ИндексТабЧастиТовары];
		Если СтрокаТовары.Количество = 0
		 Или МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			
			ДокументОбъект.Товары.Удалить(СтрокаТовары);
			
		КонецЕсли;
		
		ИндексТабЧастиТовары = ИндексТабЧастиТовары - 1;
	КонецЦикла;
	
	ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, ДокументОбъект)

	ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
	ПустойСклад = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Склад");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ПустойСклад, ПараметрыУказанияСерий));
	
	ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий);
	
КонецПроцедуры

Процедура ЗаполнитьМаркируемуюПродукциюДокумента(ТаблицаМаркируемойПродукции, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВыводИзОборотаИСМПТовары.Номенклатура,
	|	ВыводИзОборотаИСМПТовары.Характеристика,
	|	ВыводИзОборотаИСМПТовары.Серия,
	|	ВыводИзОборотаИСМПТовары.Количество
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП.Товары КАК ВыводИзОборотаИСМПТовары
	|ГДЕ
	|	ВыводИзОборотаИСМПТовары.Ссылка = &ДокументСсылка";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
		ДокументСсылка,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидПродукции"),
		ТаблицаМаркируемойПродукции);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриВыводеИзОборотаИСМП.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет<> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.ВыводИзОборотаИСМП, Ограничение);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли