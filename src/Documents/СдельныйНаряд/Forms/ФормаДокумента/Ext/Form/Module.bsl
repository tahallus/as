
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Область БиблиотекаСтандартныхПодсистем
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты", , "КомандыСмТакже");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	#КонецОбласти
	
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнитьКэшЗначений();
	КонецЕсли; 
	
	УстановитьУсловноеОформлениеФормы();
	ИмяТабличнойЧасти = "Операции";
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	ЭтотОбъект.ОснованиеСоздания = Параметры.Основание;
	ЭтотОбъект.УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ЭтотОбъект.НациональнаяВалюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ЭтотОбъект.НациональнаяВалюта));
	ЭтотОбъект.КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	ЭтотОбъект.КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДокумента));
	ЭтотОбъект.КурсВалюты = СтруктураПоВалюте.Курс;
	ЭтотОбъект.КратностьВалюты = СтруктураПоВалюте.Кратность;
	
	Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	
	Если ТипЗнч(Объект.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
		ТабНомер = Объект.Исполнитель.Код;
	Иначе
		ТабНомер = "";
	КонецЕсли;
	
	Элементы.ДатаЗакрытия.АвтоОтметкаНезаполненного = Объект.Закрыт;
	
	Если НЕ Константы.ФункциональнаяОпцияИспользоватьСовместительство.Получить() Тогда
		Если Элементы.Найти("СоставБригадыСотрудникКод") <> Неопределено Тогда
			Элементы.СоставБригадыСотрудникКод.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОповеститьРабочийКалендарь = Ложь;
	Иначе
		ОповеститьРабочийКалендарь = Истина;
	КонецЕсли; 
	ДокументМодифицирован = Ложь;
	
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	ЗаполнитьСписокДокументОснование();
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Операции");
	
	ОбновитьКэшиДанныхСервер();
	ЗаполнитьСлужебныеДанныеТЧ(ЭтотОбъект);
	
	// Характеристики
	ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик();
	Если Параметры.Ключ.Пустая()
		Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина);
		ЗаполнитьПризнакиИспользованияЭтапов();
	КонецЕсли;
	
	Если ПравоДоступа("Изменение", Объект.Ссылка.Метаданные())
		И НЕ ТолькоПросмотр Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			Объект.ВидЦен = Справочники.ВидыЦен.Учетная;
		КонецЕсли;
		Если Объект.Исполнитель = Неопределено Тогда
			Объект.Исполнитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли; 
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = СформироватьСтруктуруНадписиЦенаИВалюта(Объект, ЭтотОбъект);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	УправлениеФормой(ЭтотОбъект);
	
	// Установка видимости реквизитов от пользовательских настроек
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект); 
	
	// МобильныйКлиент
	УстановитьВидимостьЭлементовДляМобильногоКлиента();
	// Конец МобильныйКлиент
	
	// Подсказка
	ОтображатьПодсказку = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуЗарплата") 
		И ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормы, "СкрытьПодсказку", Ложь) <> Истина;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПодсказка", "Видимость", ОтображатьПодсказку);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтатистикаИспользованияФормКлиент.ПроверитьЗаписатьСтатистикуКоманды(
		"СоздатьНаОсновании.СдельныйНаряд",
		ЭтотОбъект.ВладелецФормы,
		ЭтотОбъект.ОснованиеСоздания
	);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	
	ЗаполнитьКэшЗначений();
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, ЗавершениеРаботы, Объект.Ссылка);
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//
	// Тут описать другую логику, которая должна выполняться перед закрытием формы документа
	//
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	ЗаполненЗаказ = Ложь;
	Для каждого СтрокаТЧ Из Объект.Операции Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ЗаказНаПроизводство) Тогда
			ЗаполненЗаказ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЗаполненЗаказ Тогда
		Оповестить("Запись_СдельныйНаряд", Объект.Ссылка);
	КонецЕсли;
	
	Если ДокументМодифицирован Тогда
		ОповеститьРабочийКалендарь = Истина;
		ДокументМодифицирован = Ложь;
	КонецЕсли;
	
	ЗаполнитьСлужебныеДанныеТЧ(ЭтотОбъект);
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Обработчик механизма "Свойства"

	Если Модифицированность Тогда
		ДокументМодифицирован = Истина;	
	КонецЕсли;
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Операции");
	ИначеЕсли ИмяСобытия = "Запись_Номенклатура" И КэшФиксированнаяСтоимость.Получить(Параметр)<>Неопределено Тогда
		Соответствие = Новый Соответствие(КэшФиксированнаяСтоимость);
		Соответствие.Удалить(Параметр);
		КэшФиксированнаяСтоимость = Новый ФиксированноеСоответствие(Соответствие);
		ОбновитьКэшиДанных();
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения

КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// Изменен состав бригады в подчиненной форме
	Если ТипЗнч(ВыбранноеЗначение)=Тип("Структура") И ВыбранноеЗначение.Свойство("Событие") И ВыбранноеЗначение.Событие="ИзмененСоставБригады" Тогда
		СтрокаТабличнойЧасти = Объект.Операции.НайтиПоИдентификатору(ВыбранноеЗначение.Идентификатор);
		Если СтрокаТабличнойЧасти.КлючСвязи=0 Тогда
			ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, СтрокаТабличнойЧасти);
		КонецЕсли;
		ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.СоставБригады, СтрокаТабличнойЧасти);
		Для каждого ОписаниеСтроки Из ВыбранноеЗначение.СоставБригады Цикл
			НоваяСтрока = Объект.СоставБригады.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеСтроки);
			НоваяСтрока.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
		КонецЦикла; 
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		// Сформируем надпись цены и валюты.
		СтруктураНадписи = СформироватьСтруктуруНадписиЦенаИВалюта(Объект, ЭтотОбъект);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
	КонецЦикла; 	
	Для каждого СтрокаТабличнойЧасти Из Объект.СоставБригады Цикл
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	Объект.СоставБригады.Очистить();
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
		СтрокаТабличнойЧасти.Исполнитель = Объект.Исполнитель;
	КонецЦикла; 	
	
	Если ЗначениеЗаполнено(Объект.Исполнитель) И ТипЗнч(Объект.Исполнитель)=Тип("СправочникСсылка.Бригады") Тогда
		ЗаполнитьСоставБригадыНаСервере(Объект.Исполнитель);
	ИначеЕсли ЗначениеЗаполнено(Объект.Исполнитель) И ТипЗнч(Объект.Исполнитель)=Тип("СправочникСсылка.Сотрудники") Тогда
		ОбновитьКэшиДанных();
		ТабНомер = КэшТабельныеНомера.Получить(Объект.Исполнитель);
		Подразделение = КэшПодразделения.Получить(Объект.Исполнитель);
		Если НЕ КэшЗначений.УчетПоНесколькимПодразделениям Тогда
			Объект.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновноеПодразделение");
		ИначеЕсли Объект.ПоложениеСтруктурнойЕдиницы=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
			Объект.СтруктурнаяЕдиница = Подразделение;
		ИначеЕсли Объект.ПоложениеСтруктурнойЕдиницы=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
			Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Подразделение;
			КонецЦикла; 
			Для каждого СтрокаТабличнойЧасти Из Объект.СоставБригады Цикл
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Подразделение;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.Исполнитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаЗакрытия) И Объект.Закрыт Тогда
		Объект.ДатаЗакрытия = ТекущаяДата();	
	КонецЕсли;
	
	Если Объект.Закрыт Тогда
		Элементы.ДатаЗакрытия.АвтоОтметкаНезаполненного = Истина;
	Иначе	
		Элементы.ДатаЗакрытия.АвтоОтметкаНезаполненного = Ложь;
		ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗакрытияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаЗакрытия) Тогда
		Объект.Закрыт = Истина;	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		// Выбрать основание
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДокументОснование, Элементы.ДокументОснованиеНадпись);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ОбработкаНавигационнойСсылки");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбранноеИмяФормы, Параметры) Экспорт
	
	Если ВыбранноеИмяФормы<>Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбранноеИмяФормы.Значение, СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбранноеЗначение, Параметры) Экспорт

	Если ВыбранноеЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбранноеЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбранноеЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗакрытьПодсказкуНажатие(Элемент)
	
	ДекорацияЗакрытьПодсказкуНажатиеСервер();	
	
КонецПроцедуры

&НаСервере
Процедура ДекорацияЗакрытьПодсказкуНажатиеСервер()
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, "СкрытьПодсказку", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПодсказка", "Видимость", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНаПроизводствоПриИзменении(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
		СтрокаТабличнойЧасти.ЗаказНаПроизводство = Объект.ЗаказНаПроизводство;
	КонецЦикла; 	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОперации

&НаКлиенте
Процедура ОперацииПериодПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ДатаОбработки", 	СтрокаТабличнойЧасти.Период);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("ВидЦен", 			Объект.ВидЦен);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Спецификация", 	СтрокаТабличнойЧасти.Спецификация);
	СтруктураДанные.Вставить("Операция", 		СтрокаТабличнойЧасти.Операция);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Операция) Тогда
		СтрокаТабличнойЧасти.Расценка = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
	Иначе
		СтрокаТабличнойЧасти.Расценка = 0;
	КонецЕсли;
	
	РассчитатьСтоимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ДатаОбработки", 	СтрокаТабличнойЧасти.Период);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("ВидЦен", 			Объект.ВидЦен);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	Если ЗначениеЗаполнено(СтруктураДанные.Операция) Тогда
		СтрокаТабличнойЧасти.Операция 			= СтруктураДанные.Операция;
		СтрокаТабличнойЧасти.Расценка 			= СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.НормаВремени 		= СтруктураДанные.НормаВремени;
		ОбновитьКэшиДанных();
		ЗаполнитьСлужебныеДанныеТЧ(ЭтотОбъект, , СтрокаТабличнойЧасти);
		РассчитатьДлительность();
		РассчитатьСтоимость();
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики
		Тогда
		СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
	КонецЕсли;
	СтрокаТабличнойЧасти.Спецификация =  СтруктураДанные.Спецификация;
	СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства = СтруктураДанные.ИспользоватьЭтапыПроизводства;
	Если СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства Тогда
		СтрокаТабличнойЧасти.ПодразделениеЗавершающегоЭтапа = Объект.СтруктурнаяЕдиница;
	Иначе
		СтрокаТабличнойЧасти.ПодразделениеЗавершающегоЭтапа = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
	КонецЕсли; 
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии
		Тогда
		СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
	КонецЕсли;
	// Конец Партии
	
	УправлениеВидимостьюЭтапов(ЭтотОбъект);
	
КонецПроцедуры // ОперацииНоменклатураПриИзменении()

&НаКлиенте
Процедура ОперацииХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ДатаОбработки", 	СтрокаТабличнойЧасти.Период);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("ВидЦен", 			Объект.ВидЦен);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства = СтруктураДанные.ИспользоватьЭтапыПроизводства;
	Если СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства Тогда
		СтрокаТабличнойЧасти.ПодразделениеЗавершающегоЭтапа = Объект.СтруктурнаяЕдиница;
	Иначе
		СтрокаТабличнойЧасти.ПодразделениеЗавершающегоЭтапа = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СтруктураДанные.Операция) Тогда
		СтрокаТабличнойЧасти.Операция 			= СтруктураДанные.Операция;
		СтрокаТабличнойЧасти.Расценка 			= СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.НормаВремени 		= СтруктураДанные.НормаВремени;
		ОбновитьКэшиДанных();
		ЗаполнитьСлужебныеДанныеТЧ(ЭтотОбъект, , СтрокаТабличнойЧасти);
		РассчитатьДлительность();
		РассчитатьСтоимость();
	КонецЕсли; 
	
	УправлениеВидимостьюЭтапов(ЭтотОбъект);
	
КонецПроцедуры // ОперацииХарактеристикаПриИзменении()

&НаКлиенте
Процедура ОперацииСпецификацияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ДатаОбработки", 	СтрокаТабличнойЧасти.Период);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("ВидЦен", 			Объект.ВидЦен);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Спецификация", 	СтрокаТабличнойЧасти.Спецификация);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства = СтруктураДанные.ИспользоватьЭтапыПроизводства;
	Если СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства Тогда
		СтрокаТабличнойЧасти.ПодразделениеЗавершающегоЭтапа = Объект.СтруктурнаяЕдиница;
	Иначе
		СтрокаТабличнойЧасти.ПодразделениеЗавершающегоЭтапа = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СтруктураДанные.Операция) Тогда
		СтрокаТабличнойЧасти.Операция 			= СтруктураДанные.Операция;
		СтрокаТабличнойЧасти.Расценка 			= СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.НормаВремени 		= СтруктураДанные.НормаВремени;
		ОбновитьКэшиДанных();
		ЗаполнитьСлужебныеДанныеТЧ(ЭтотОбъект, , СтрокаТабличнойЧасти);
		РассчитатьДлительность();
		РассчитатьСтоимость();
	КонецЕсли; 
		
	УправлениеВидимостьюЭтапов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииОперацияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	
	ОбновитьКэшиДанных();
	ЗаполнитьСлужебныеДанныеТЧ(ЭтотОбъект, , СтрокаТабличнойЧасти);
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ДатаОбработки", 	СтрокаТабличнойЧасти.Период);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("ВидЦен", 			Объект.ВидЦен);
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Спецификация", 	СтрокаТабличнойЧасти.Спецификация);
	СтруктураДанные.Вставить("Операция", 		СтрокаТабличнойЧасти.Операция);
	
	СтруктураРезультат = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Операция) Тогда
		СтрокаТабличнойЧасти.Расценка 			= СтруктураРезультат.Цена;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураРезультат.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.НормаВремени 		= СтруктураРезультат.НормаВремени;
	Иначе
		СтрокаТабличнойЧасти.Расценка 			= 0;
		СтрокаТабличнойЧасти.НормаВремени 		= 0;
	КонецЕсли; 
	
	ОбновитьКэшиДанных();
	ЗаполнитьСлужебныеДанныеТЧ(ЭтотОбъект, , СтрокаТабличнойЧасти);
	РассчитатьДлительность();
	РассчитатьСтоимость();
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ОперацииКоличествоПриИзменении(Элемент)
	
	РассчитатьДлительность();
	РассчитатьСтоимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииНормаВремениПриИзменении(Элемент)
	
	РассчитатьДлительность();
	РассчитатьСтоимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииНормочасыПриИзменении(Элемент)
	
	РассчитатьСтоимость();
	
КонецПроцедуры // ОперацииНормочасыПриИзменении()

&НаКлиенте
Процедура ОперацииРасценкаПриИзменении(Элемент)
	
	РассчитатьСтоимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
	 ИЛИ СтрокаТабличнойЧасти.Расценка = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Расценка = СтрокаТабличнойЧасти.Расценка * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		СтрокаТабличнойЧасти.НормаВремени = СтрокаТабличнойЧасти.НормаВремени * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		РассчитатьДлительность();
		РассчитатьСтоимость();
	КонецЕсли;
	
	РассчитатьСтоимость();
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура СоставБригадыСотрудникПриИзменении(Элемент)
	
	ОбновитьКэшиДанных();
	СтрокаТабличнойЧасти = Элементы.СоставБригады.ТекущиеДанные;
	СтрокаТабличнойЧасти.КТУ = 1;
	ЗаполнитьСлужебныеДанныеТЧ(ЭтотОбъект, "СоставБригады", СтрокаТабличнойЧасти);
	Если Объект.ПоложениеСтруктурнойЕдиницы=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = КэшПодразделения.Получить(СтрокаТабличнойЧасти.Исполнитель);
	Иначе
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииИсполнительПриИзменении(Элемент)
	
	ОбновитьКэшиДанных();
	СтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	ЗаполнитьСлужебныеДанныеТЧ(ЭтотОбъект, , СтрокаТабличнойЧасти);
	Если Объект.ПоложениеСтруктурнойЕдиницы=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") И НЕ СтрокаТабличнойЧасти.ИсполнительБригада Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = КэшПодразделения.Получить(СтрокаТабличнойЧасти.Исполнитель);
	ИначеЕсли Объект.ПоложениеСтруктурнойЕдиницы=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
	КонецЕсли;
	Если СтрокаТабличнойЧасти.ИсполнительБригада Тогда
		Если СтрокаТабличнойЧасти.КлючСвязи=0 Тогда
			ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, СтрокаТабличнойЧасти);
		КонецЕсли;
		ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.СоставБригады, СтрокаТабличнойЧасти);
		ЗаполнитьСоставБригадыНаСервере(СтрокаТабличнойЧасти.Исполнитель, СтрокаТабличнойЧасти.КлючСвязи);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(ТекущаяСтрока, Объект, "ЗаказНаПроизводство", "ПоложениеЗаказаНаПроизводство");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(ТекущаяСтрока, Объект, "СтруктурнаяЕдиница", "ПоложениеСтруктурнойЕдиницы");
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(ТекущаяСтрока, Объект, "Исполнитель", "ПоложениеИсполнителя");
	КонецЕсли; 
	
	Если НоваяСтрока И Копирование Тогда
		ТекущаяСтрока.КлючСвязи = 0;
	КонецЕсли;	
	
	Если НоваяСтрока ИЛИ ТекущаяСтрока.КлючСвязи=0 Тогда
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект);
	КонецЕсли; 
	
	Если ТекущаяСтрока.Исполнитель = Неопределено Тогда
		ТекущаяСтрока.Исполнитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя="ОперацииИзменитьСостав" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуИзмененияСостава(ВыбраннаяСтрока);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПередУдалением(Элемент, Отказ)
	
	ТабличныеЧастиУНФКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "СоставБригады");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИзмененияСостава(Идентификатор)
	
	СтрокаТабличнойЧасти = Объект.Операции.НайтиПоИдентификатору(Идентификатор);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	ПараметрыОткрытия.Вставить("Идентификатор", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	ПараметрыОткрытия.Вставить("ПоложениеСтруктурнойЕдиницы", Объект.ПоложениеСтруктурнойЕдиницы);
	ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	ПараметрыОткрытия.Вставить("СоставБригады", Новый Массив);
	ПараметрыОткрытия.Вставить("Бригада", СтрокаТабличнойЧасти.Исполнитель);
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	СтрокиСостава = Объект.СоставБригады.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТабличнойЧасти Из СтрокиСостава Цикл
		ОписаниеСтроки = Новый Структура("Сотрудник, КТУ, СтруктурнаяЕдиница");
		ЗаполнитьЗначенияСвойств(ОписаниеСтроки, СтрокаТабличнойЧасти);
		ПараметрыОткрытия.СоставБригады.Добавить(ОписаниеСтроки);
	КонецЦикла;
	
	ОткрытьФорму("Документ.СдельныйНаряд.Форма.ФормаИзмененияСоставаБригады", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииЭтапАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.ЗагрузитьЗначения(ЭтапыПроизводства(СтрокаТабличнойЧасти.Спецификация, СтрокаТабличнойЧасти.ЗаказНаПроизводство));
		ОбновитьПредставлениеПустогоЭтапа(ДанныеВыбора); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	СтрокаТабличнойЧасти.Исполнитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставБригады

&НаКлиенте
Процедура СоставБригадыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСтрокуПоШапке(ТекущаяСтрока, Объект, "СтруктурнаяЕдиница", "ПоложениеСтруктурнойЕдиницы");
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_СдельныйНаряд"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды ЗаполнитьСоставБригады.
//
Процедура ЗаполнитьСоставБригады(Команда)
	
	ЗаполнитьСоставБригадыНаСервере(Объект.Исполнитель);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Операции.
//
&НаКлиенте
Процедура ОперацииКопироватьСтроки(Команда)
	
	КопироватьСтроки("Операции");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Операции.
//
&НаКлиенте
Процедура ОперацииВставитьСтроки(Команда)
	
	ВставитьСтроки("Операции");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧасть(Команда)
	
	ЗаполнениеОбъектовУНФКлиент.ЗаполнитьПустыеПоложения(Объект, "ПоложениеИсполнителя, ПоложениеСтруктурнойЕдиницы, ПоложениеЗаказаНаПроизводство");
	
	ПараметрыДиалога = Новый Структура;
	ПараметрыДиалога.Вставить("ПоложениеИсполнителяВСдельномНаряде", 				Объект.ПоложениеИсполнителя);
	ПараметрыДиалога.Вставить("ПоложениеСтруктурнойЕдиницыВСдельномНаряде", 		Объект.ПоложениеСтруктурнойЕдиницы);
	ПараметрыДиалога.Вставить("ПоложениеЗаказаНаПроизводствоВДокументахОтгрузки", 	Объект.ПоложениеЗаказаНаПроизводство);
	ПараметрыДиалога.Вставить("БылиВнесеныИзменения", Ложь);
	
	ОткрытьФорму(
	"ОбщаяФорма.ШапкаТабличнаяЧасть",
	ПараметрыДиалога,,,,,
	Новый ОписаниеОповещения("ШапкаТабличнаяЧастьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиВнесеныИзменения Тогда
		ШапкаТабличнаяЧастьЗавершениеНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШапкаТабличнаяЧастьЗавершениеНаСервере(Знач Результат)
	
	Если Объект.ПоложениеИсполнителя<>Результат.ПоложениеИсполнителяВСдельномНаряде Тогда
		Если Результат.ПоложениеИсполнителяВСдельномНаряде<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			Объект.Исполнитель = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Объект.Операции, "Исполнитель");
		КонецЕсли; 
		Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
			СтрокаТабличнойЧасти.Исполнитель = Объект.Исполнитель;
		КонецЦикла;
		Если Результат.ПоложениеИсполнителяВСдельномНаряде=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			Если ТипЗнч(Объект.Исполнитель)=Тип("СправочникСсылка.Бригады") Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("КлючСвязи", 0);
				СтрокиСостава = Объект.СоставБригады.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрокаОперации Из Объект.Операции Цикл
					Если СтрокаОперации.КлючСвязи=0 Тогда
						ИмяТабличнойЧасти = "Операции";
						СтрокаОперации.КлючСвязи = ТабличныеЧастиУНФКлиентСервер.СоздатьНовыйКлючСвязи(ЭтотОбъект);
					КонецЕсли; 
					Для каждого СтрокаСостава Из СтрокиСостава Цикл
						НоваяСтрока = Объект.СоставБригады.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСостава);
						НоваяСтрока.КлючСвязи = СтрокаОперации.КлючСвязи;
					КонецЦикла; 
				КонецЦикла; 
				Для каждого СтрокаСостава Из СтрокиСостава Цикл
					Объект.СоставБригады.Удалить(СтрокаСостава);
				КонецЦикла; 
			КонецЕсли; 
		Иначе
			Объект.СоставБригады.Очистить();
		КонецЕсли; 
		Объект.ПоложениеИсполнителя = Результат.ПоложениеИсполнителяВСдельномНаряде;
	КонецЕсли; 
	
	Если Объект.ПоложениеСтруктурнойЕдиницы<>Результат.ПоложениеСтруктурнойЕдиницыВСдельномНаряде Тогда
		Если Результат.ПоложениеСтруктурнойЕдиницыВСдельномНаряде<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			Объект.СтруктурнаяЕдиница = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Объект.Операции, "СтруктурнаяЕдиница");
			Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
				Объект.СтруктурнаяЕдиница = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					Пользователи.ТекущийПользователь(), 
					"ОсновноеПодразделение"); 
			КонецЕсли; 
		КонецЕсли; 
		Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из Объект.СоставБригады Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
		КонецЦикла; 
		Объект.ПоложениеСтруктурнойЕдиницы = Результат.ПоложениеСтруктурнойЕдиницыВСдельномНаряде;
	КонецЕсли; 
	
	Если Объект.ПоложениеЗаказаНаПроизводство<>Результат.ПоложениеЗаказаНаПроизводствоВДокументахОтгрузки Тогда
		Если Результат.ПоложениеЗаказаНаПроизводствоВДокументахОтгрузки<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			Объект.ЗаказНаПроизводство = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Объект.Операции, "ЗаказНаПроизводство");
		КонецЕсли; 
		Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
			СтрокаТабличнойЧасти.ЗаказНаПроизводство = Объект.ЗаказНаПроизводство;
		КонецЦикла;
		Объект.ПоложениеЗаказаНаПроизводство = Результат.ПоложениеЗаказаНаПроизводствоВДокументахОтгрузки;
	КонецЕсли;
	
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	ЗаполнитьСлужебныеДанныеТЧ(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПоПлану(Команда)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
		СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.КоличествоПлан;
		СтрокаТабличнойЧасти.Нормочасы = СтрокаТабличнойЧасти.НормаВремени * СтрокаТабличнойЧасти.КоличествоФакт;	
		Если НЕ СтрокаТабличнойЧасти.ФиксированнаяСтоимость Тогда
			СтрокаТабличнойЧасти.Стоимость = СтрокаТабличнойЧасти.Расценка * СтрокаТабличнойЧасти.НормаВремени * СтрокаТабличнойЧасти.КоличествоФакт;
		Иначе
			СтрокаТабличнойЧасти.Стоимость = СтрокаТабличнойЧасти.Расценка * СтрокаТабличнойЧасти.КоличествоФакт;
		КонецЕсли; 
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФакт(Команда)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
		СтрокаТабличнойЧасти.КоличествоФакт = 0;
		СтрокаТабличнойЧасти.Нормочасы = 0;	
		СтрокаТабличнойЧасти.Стоимость = 0;
	КонецЦикла; 	
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область БСП

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ИспользоватьЭтапыПроизводства", ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства"));
	КэшЗначений.Вставить("УчетПоНесколькимПодразделениям", ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям"));
	
КонецПроцедуры

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", ДокументыУНФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера.
//
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", Константы.УчетПоКомпании.Компания(Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервере
// Процедура заполняет состав бригады.
//
Процедура ЗаполнитьСоставБригадыНаСервере(Бригада, КлючСвязи = Неопределено)

	Если КлючСвязи=Неопределено Тогда
		Объект.СоставБригады.Очистить();
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Бригада) И ТипЗнч(Бригада) = Тип("СправочникСсылка.Бригады") Тогда
		
		ТаблицаСостава = Справочники.Бригады.СоставБригады(Бригада, Объект.Организация, Объект.Дата);
		
		Для каждого СтрокаТабличнойЧасти Из ТаблицаСостава Цикл
			НоваяСтрока = Объект.СоставБригады.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			НоваяСтрока.КТУ = 1;
			Если Объект.ПоложениеСтруктурнойЕдиницы=Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
				НоваяСтрока.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
			КонецЕсли;
			Если КлючСвязи<>Неопределено Тогда
				НоваяСтрока.КлючСвязи = КлючСвязи;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли;	
	
	Модифицированность = Истина;	

КонецПроцедуры

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	Если Не СтруктураДанные.Свойство("Спецификация") Тогда
		Если СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(
				СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
		Иначе
			СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(
				СтруктураДанные.Номенклатура));
		КонецЕсли;
	КонецЕсли;
	СтруктураДанные = ПолучитьДанныеСпецификацияПриИзменении(СтруктураДанные);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Спецификация) И ТипЗнч(СтруктураДанные.Спецификация)=Тип("СправочникСсылка.Спецификации") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", СтруктураДанные.Спецификация);
		Если СтруктураДанные.Свойство("Операция") Тогда
			Запрос.УстановитьПараметр("Операция", СтруктураДанные.Операция);
		Иначе
			Запрос.УстановитьПараметр("Операция", Неопределено);
		КонецЕсли; 
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпецификацииОперации.Ссылка КАК Спецификация,
		|	СпецификацииОперации.НомерСтроки КАК НомерСтроки,
		|	СпецификацииОперации.Операция КАК Операция,
		|	СпецификацииОперации.НормаВремени КАК НормаВремени,
		|	СпецификацииОперации.КоличествоПродукции КАК КоличествоПродукции
		|ПОМЕСТИТЬ Операции
		|ИЗ
		|	Справочник.Спецификации.Операции КАК СпецификацииОперации
		|ГДЕ
		|	СпецификацииОперации.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпецификацииОперации.Операция КАК Операция,
		|	СпецификацииОперации.Операция.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА СпецификацииОперации.КоличествоПродукции = 0
		|			ТОГДА 0
		|		ИНАЧЕ СпецификацииОперации.НормаВремени / СпецификацииОперации.КоличествоПродукции
		|	КОНЕЦ КАК НормаВремени
		|ИЗ
		|	Операции КАК СпецификацииОперации
		|ГДЕ
		|	СпецификацииОперации.Операция В
		|			(ВЫБРАТЬ
		|				СпецификацииОперации.Операция
		|			ИЗ
		|				Операции КАК СпецификацииОперации
		|			ГДЕ
		|				(СпецификацииОперации.Операция = &Операция
		|					ИЛИ &Операция = НЕОПРЕДЕЛЕНО)
		|			СГРУППИРОВАТЬ ПО
		|				СпецификацииОперации.Операция
		|			ИМЕЮЩИЕ
		|				КОЛИЧЕСТВО(СпецификацииОперации.НомерСтроки) = 1)";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Норма времени берется из спецификации
			СтруктураДанные.Вставить("Операция", Выборка.Операция);
			СтруктураДанные.Вставить("НормаВремени", Выборка.НормаВремени);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Операция") 
		И ЗначениеЗаполнено(СтруктураДанные.Операция)
		И ТипЗнч(СтруктураДанные.Операция)=Тип("СправочникСсылка.Номенклатура") Тогда
		СтруктураДанные.Вставить("Цена", УчетнаяЦена(СтруктураДанные.Операция, СтруктураДанные.ДатаОбработки, СтруктураДанные.ВалютаДокумента, СтруктураДанные.ВидЦен));
		Если НЕ СтруктураДанные.Свойство("НормаВремени") Тогда
			// Норма времени берется из карточки операции
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДанные.Операция, "НормаВремени, ЕдиницаИзмерения");
			СтруктураДанные.Вставить("НормаВремени", ЗначенияРеквизитов.НормаВремени);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", ЗначенияРеквизитов.ЕдиницаИзмерения);
		КонецЕсли; 
	Иначе
		// Не удалось определить операцию
		СтруктураДанные.Вставить("Операция", Неопределено);
		СтруктураДанные.Вставить("НормаВремени", 0);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", Неопределено);
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии")
			Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации")
				Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеСпецификацияПриИзменении(СтруктураДанные)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства")
		И ЗначениеЗаполнено(СтруктураДанные.Спецификация)
		И ТипЗнч(СтруктураДанные.Спецификация)=Тип("СправочникСсылка.Спецификации") Тогда
		ВидПроизводства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанные.Спецификация, "ВидПроизводства");
		СтруктураДанные.Вставить("ИспользоватьЭтапыПроизводства", ЗначениеЗаполнено(ВидПроизводства));
	Иначе
		СтруктураДанные.Вставить("ИспользоватьЭтапыПроизводства", Ложь);
	КонецЕсли; 
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервереБезКонтекста
Функция УчетнаяЦена(Номенклатура, ДатаОбработки, ВалютаДокумента, ВидЦен)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ДатаОбработки", ДатаОбработки);
	СтруктураДанные.Вставить("Номенклатура", Номенклатура);
	СтруктураДанные.Вставить("ВалютаДокумента", ВалютаДокумента);
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
		СтруктураДанные.Вставить("ВидЦен", Справочники.ВидыЦен.Учетная);
		СтруктураДанные.Вставить("СуммаВключаетНДС", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.ВидыЦен.Учетная, "ЦенаВключаетНДС"));
	Иначе
		СтруктураДанные.Вставить("ВидЦен", ВидЦен);
		СтруктураДанные.Вставить("СуммаВключаетНДС", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидЦен, "ЦенаВключаетНДС"));
	КонецЕсли; 
	СтруктураДанные.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	СтруктураДанные.Вставить("Коэффициент", 1);
	Возврат ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
	
КонецФункции

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура;
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаКлиенте
// Процедура производит расчет длительности выполнения операций.
//
// Параметры:
//  Нет.
//
Процедура РассчитатьДлительность()

	ТекущаяСтрока = Элементы.Операции.ТекущиеДанные;
	ТекущаяСтрока.Нормочасы = ТекущаяСтрока.НормаВремени * ТекущаяСтрока.КоличествоФакт;	
	
КонецПроцедуры

&НаКлиенте
// Процедура производит расчет стоимости выполнения операций.
//
// Параметры:
//  Нет.
//
Процедура РассчитатьСтоимость(ТекущаяСтрока = Неопределено)

	Если ТекущаяСтрока=Неопределено Тогда
		ТекущаяСтрока = Элементы.Операции.ТекущиеДанные;
	КонецЕсли; 
	Если НЕ ТекущаяСтрока.ФиксированнаяСтоимость Тогда
		ТекущаяСтрока.Стоимость = ТекущаяСтрока.Расценка * ТекущаяСтрока.НормаВремени * ТекущаяСтрока.КоличествоФакт;
	Иначе
		ТекущаяСтрока.Стоимость = ТекущаяСтрока.Расценка * ТекущаяСтрока.КоличествоФакт;
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОтображатьЗакладкуБригады(Объект)
	
	Возврат ЗначениеЗаполнено(Объект.Исполнитель) 
		И ТипЗнч(Объект.Исполнитель)=Тип("СправочникСсылка.Бригады") 
		И Объект.ПоложениеИсполнителя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке");
	
КонецФункции 

&НаКлиенте
Процедура ОбновитьКэшиДанных()
	
	СотрудникиКОбновлению = Новый Массив;
	Если Объект.ПоложениеИсполнителя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Исполнитель) ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Исполнитель)<>Тип("СправочникСсылка.Сотрудники") Тогда
				Продолжить;
			КонецЕсли; 
			Если КэшПодразделения.Получить(СтрокаТабличнойЧасти.Исполнитель)=Неопределено
				ИЛИ КэшТабельныеНомера.Получить(СтрокаТабличнойЧасти.Исполнитель)=Неопределено Тогда
				СотрудникиКОбновлению.Добавить(СтрокаТабличнойЧасти.Исполнитель);
			КонецЕсли; 
		КонецЦикла;
		Для каждого СтрокаТабличнойЧасти Из Объект.СоставБригады Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сотрудник) Тогда
				Продолжить;
			КонецЕсли; 
			Если КэшПодразделения.Получить(СтрокаТабличнойЧасти.Сотрудник)=Неопределено
				ИЛИ КэшТабельныеНомера.Получить(СтрокаТабличнойЧасти.Сотрудник)=Неопределено Тогда
				СотрудникиКОбновлению.Добавить(СтрокаТабличнойЧасти.Сотрудник);
			КонецЕсли; 
		КонецЦикла;
	ИначеЕсли Объект.ПоложениеИсполнителя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		Если ЗначениеЗаполнено(Объект.Исполнитель) И ТипЗнч(Объект.Исполнитель)=Тип("СправочникСсылка.Сотрудники") Тогда
			Если КэшПодразделения.Получить(Объект.Исполнитель)=Неопределено
				ИЛИ КэшТабельныеНомера.Получить(Объект.Исполнитель)=Неопределено Тогда
				СотрудникиКОбновлению.Добавить(Объект.Исполнитель);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект.Исполнитель)=Тип("СправочникСсылка.Бригады") Тогда
			Для каждого СтрокаТабличнойЧасти Из Объект.СоставБригады Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сотрудник) Тогда
					Продолжить;
				КонецЕсли; 
				Если КэшПодразделения.Получить(СтрокаТабличнойЧасти.Сотрудник)=Неопределено
					ИЛИ КэшТабельныеНомера.Получить(СтрокаТабличнойЧасти.Сотрудник)=Неопределено Тогда
					СотрудникиКОбновлению.Добавить(СтрокаТабличнойЧасти.Сотрудник);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
	
	ОперацииКОбновлению = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Операция) И КэшФиксированнаяСтоимость.Получить(СтрокаТабличнойЧасти.Операция)=Неопределено Тогда
			ОперацииКОбновлению.Добавить(СтрокаТабличнойЧасти.Операция);
		КонецЕсли; 
	КонецЦикла; 
	
	Если СотрудникиКОбновлению.Количество()>0 ИЛИ ОперацииКОбновлению.Количество()>0 Тогда
		ОбновитьКэшиДанныхСервер(СотрудникиКОбновлению, ОперацииКОбновлению);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКэшиДанныхСервер(МассивСотрудников = Неопределено, МассивОпераций = Неопределено)
	
	Если МассивСотрудников=Неопределено Тогда
		МассивСотрудников = Новый Массив;
		Если Объект.ПоложениеИсполнителя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
			Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Исполнитель) ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Исполнитель)<>Тип("СправочникСсылка.Сотрудники") Тогда
					Продолжить;
				КонецЕсли; 
				МассивСотрудников.Добавить(СтрокаТабличнойЧасти.Исполнитель);
			КонецЦикла;
			Для каждого СтрокаТабличнойЧасти Из Объект.СоставБригады Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сотрудник) Тогда
					Продолжить;
				КонецЕсли; 
				МассивСотрудников.Добавить(СтрокаТабличнойЧасти.Сотрудник);
			КонецЦикла;
		ИначеЕсли Объект.ПоложениеИсполнителя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
			Если ЗначениеЗаполнено(Объект.Исполнитель) И ТипЗнч(Объект.Исполнитель)=Тип("СправочникСсылка.Сотрудники") Тогда
				МассивСотрудников.Добавить(Объект.Исполнитель);
			ИначеЕсли ТипЗнч(Объект.Исполнитель)=Тип("СправочникСсылка.Бригады") Тогда
				Для каждого СтрокаТабличнойЧасти Из Объект.СоставБригады Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сотрудник) Тогда
						Продолжить;
					КонецЕсли; 
					МассивСотрудников.Добавить(СтрокаТабличнойЧасти.Сотрудник);
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОпераций=Неопределено Тогда
		МассивОпераций = Новый Массив;
		Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Операция) Тогда
				МассивОпераций.Добавить(СтрокаТабличнойЧасти.Операция);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	МассивСотрудников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСотрудников);
	МассивОпераций = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОпераций);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("МассивОпераций", МассивОпераций);
	Запрос.УстановитьПараметр("ПериодСреза", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, КонецДня(ТекущаяДата())));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	ЕСТЬNULL(СотрудникиСрезПоследних.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СтруктурнаяЕдиница,
	|	Сотрудники.Код КАК ТабНомер
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники.СрезПоследних(&ПериодСреза, Организация = &Организация) КАК СотрудникиСрезПоследних
	|		ПО (СотрудникиСрезПоследних.Сотрудник = Сотрудники.Ссылка)
	|ГДЕ
	|	Сотрудники.Ссылка В(&МассивСотрудников)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Операция,
	|	Номенклатура.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивОпераций)";
	Результат = Запрос.ВыполнитьПакет();
	
	Если ТипЗнч(КэшПодразделения)=Тип("ФиксированноеСоответствие") Тогда
		СоответствиеПодразделений = Новый Соответствие(КэшПодразделения);
	Иначе
		СоответствиеПодразделений = Новый Соответствие;
	КонецЕсли; 
	Если ТипЗнч(КэшТабельныеНомера)=Тип("ФиксированноеСоответствие") Тогда
		СоответствиеТабельныхНомеров = Новый Соответствие(КэшТабельныеНомера);
	Иначе
		СоответствиеТабельныхНомеров = Новый Соответствие;
	КонецЕсли;
	
	Выборка = Результат.Получить(0).Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеПодразделений.Вставить(Выборка.Сотрудник, Выборка.СтруктурнаяЕдиница);	
		СоответствиеТабельныхНомеров.Вставить(Выборка.Сотрудник, Выборка.ТабНомер);	
	КонецЦикла;
	
	Если ТипЗнч(КэшФиксированнаяСтоимость)=Тип("ФиксированноеСоответствие") Тогда
		СоответствиеФиксированнаяСтоимость = Новый Соответствие(КэшФиксированнаяСтоимость);
	Иначе
		СоответствиеФиксированнаяСтоимость = Новый Соответствие;
	КонецЕсли; 
	Выборка = Результат.Получить(1).Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеФиксированнаяСтоимость.Вставить(Выборка.Операция, Выборка.ФиксированнаяСтоимость);	
	КонецЦикла;
	
	КэшПодразделения = Новый ФиксированноеСоответствие(СоответствиеПодразделений);
	КэшТабельныеНомера = Новый ФиксированноеСоответствие(СоответствиеТабельныхНомеров);
	КэшФиксированнаяСтоимость = Новый ФиксированноеСоответствие(СоответствиеФиксированнаяСтоимость);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеДанныеТЧ(Форма, ИмяТЧ = "Операции", СтрокаТабличнойЧасти = Неопределено)
	
	Объект = Форма.Объект;
	Если СтрокаТабличнойЧасти<>Неопределено Тогда
		Если ИмяТЧ="Операции" Тогда
			СтрокаТабличнойЧасти.ИсполнительБригада = (ТипЗнч(СтрокаТабличнойЧасти.Исполнитель)=Тип("СправочникСсылка.Бригады"));
			Если НЕ СтрокаТабличнойЧасти.ИсполнительБригада Тогда
				СтрокаТабличнойЧасти.ТабНомер = Форма.КэшТабельныеНомера.Получить(СтрокаТабличнойЧасти.Исполнитель);
			Иначе
				СтрокаТабличнойЧасти.ИзменитьСостав = НСтр("ru = 'Изменить состав и КТУ'");
			КонецЕсли;
		ИначеЕсли ИмяТЧ="СоставБригады" Тогда
			СтрокаТабличнойЧасти.ТабНомер = Форма.КэшТабельныеНомера.Получить(СтрокаТабличнойЧасти.Сотрудник);
		КонецЕсли; 
	ИначеЕсли Объект.ПоложениеИсполнителя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Для каждого ТекущаяСтрока Из Объект.Операции Цикл
			ТекущаяСтрока.ИсполнительБригада = (ТипЗнч(ТекущаяСтрока.Исполнитель)=Тип("СправочникСсылка.Бригады"));
			Если НЕ ТекущаяСтрока.ИсполнительБригада Тогда
				ТекущаяСтрока.ТабНомер = Форма.КэшТабельныеНомера.Получить(ТекущаяСтрока.Исполнитель);
			Иначе
				ТекущаяСтрока.ИзменитьСостав = НСтр("ru = 'Изменить состав и КТУ'");
			КонецЕсли;
		КонецЦикла;
		Для каждого ТекущаяСтрока Из Объект.СоставБригады Цикл
			ТекущаяСтрока.ТабНомер = Форма.КэшТабельныеНомера.Получить(ТекущаяСтрока.Сотрудник); 
		КонецЦикла;
	ИначеЕсли Объект.ПоложениеИсполнителя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		Если ОтображатьЗакладкуБригады(Объект) Тогда
			Для каждого ТекущаяСтрока Из Объект.СоставБригады Цикл
				ТекущаяСтрока.ТабНомер = Форма.КэшТабельныеНомера.Получить(ТекущаяСтрока.Сотрудник); 
			КонецЦикла;
		Иначе
			Форма.ТабНомер = Форма.КэшТабельныеНомера.Получить(Объект.Исполнитель);
		КонецЕсли;
		Для каждого ТекущаяСтрока Из Объект.Операции Цикл
			ТекущаяСтрока.ИсполнительБригада = Ложь;
		КонецЦикла; 
	КонецЕсли;
	
	Если ИмяТЧ="Операции" Тогда
		Если СтрокаТабличнойЧасти<>Неопределено Тогда
			СтрокаТабличнойЧасти.ФиксированнаяСтоимость = Форма.КэшФиксированнаяСтоимость.Получить(СтрокаТабличнойЧасти.Операция);
		Иначе
			Для каждого ТекущаяСтрока Из Объект.Операции Цикл
				ТекущаяСтрока.ФиксированнаяСтоимость = Форма.КэшФиксированнаяСтоимость.Получить(ТекущаяСтрока.Операция);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Устанавливает условное оформления Таб. частей для отображения доступности характеристик
//
&НаСервере
Процедура ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик()
			
			НаименованиеПоляХарактеристика = "ОперацииХарактеристика";
			
			ЗначениеПоиска = ЭтаФорма.Элементы.Найти(НаименованиеПоляХарактеристика);
			
			Если НЕ ЗначениеПоиска = Неопределено
				Тогда
				ИмяПоляПроверятьЗаполнениеХарактеристики = "Объект.Операции.ПроверятьЗаполнениеХарактеристики";
				ИмяПоляИспользоватьХарактеристики = "Объект.Операции.ИспользоватьХарактеристики";
				ИмяПоляХарактеристики = НаименованиеПоляХарактеристика; 
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляИспользоватьХарактеристики, Ложь, ВидСравненияКомпоновкиДанных.Равно);
		
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используется>'"));
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляПроверятьЗаполнениеХарактеристики, Истина, ВидСравненияКомпоновкиДанных.Равно);
				
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
			КонецЕсли;
			НаименованиеПоляПартия= "ОперацииПартия";
			
			ЗначениеПоискаПартия = ЭтаФорма.Элементы.Найти(НаименованиеПоляПартия);
			
			Если НЕ ЗначениеПоискаПартия = Неопределено
				Тогда
				ИмяПоляПроверятьЗаполнениеПартии = "Объект.Операции.ПроверятьЗаполнениеПартий";
				ИмяПоляИспользоватьПартии = "Объект.Операции.ИспользоватьПартии";
				ИмяПоляПартии = НаименованиеПоляПартия;
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляИспользоватьПартии, Ложь, ВидСравненияКомпоновкиДанных.Равно);
				
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляПартии);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используется>'"));
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляПроверятьЗаполнениеПартии, Истина, ВидСравненияКомпоновкиДанных.Равно);
				
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляПартии);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
				
				НовоеУсловноеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
				РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.Партия", Справочники.ПартииНоменклатуры.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
				РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляПартии);
				РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
			КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			Если СтруктураНадписи.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
				ТекстНадписи = ТекстНадписи + НСтр("ru = ' %Курс%'");
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(СтруктураНадписи.ВалютаДокумента)));
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Курс%", СокрЛП(Строка(СтруктураНадписи.Курс)));
			Иначе
				ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Вид цен.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦен%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидЦен%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(СтруктураНадписи.ВидЦен)));
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс", КурсВалюты);
	СтруктураПараметров.Вставить("Кратность", КратностьВалюты);
	СтруктураПараметров.Вставить("Организация",	Компания); 
	СтруктураПараметров.Вставить("ДатаДокумента", Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены", ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены", ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ВидЦен", Объект.ВидЦен);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") 
		И РезультатЗакрытия.БылиВнесеныИзменения Тогда
		
		Модифицированность = Истина;
		
		Объект.ВидЦен = РезультатЗакрытия.ВидЦен;
		Объект.ВалютаДокумента = РезультатЗакрытия.ВалютаДокумента;
		
		Если РезультатЗакрытия.ПересчитатьЦены Тогда
			
			Если Объект.ВалютаДокумента=НациональнаяВалюта Тогда
				НовыйКурс = 1;
				СтарыйКурс = ?(РезультатЗакрытия.КурсПересчетаЦен.Курс=0, 1, РезультатЗакрытия.КурсПересчетаЦен.Курс) * ?(РезультатЗакрытия.КурсПересчетаЦен.Кратность=0, 1, РезультатЗакрытия.КурсПересчетаЦен.Кратность);
				КурсВалюты = 1;
				КратностьВалюты = 1;
			Иначе
				НовыйКурс = ?(РезультатЗакрытия.КурсПересчетаЦен.Курс=0, 1, РезультатЗакрытия.КурсПересчетаЦен.Курс) * ?(РезультатЗакрытия.КурсПересчетаЦен.Кратность=0, 1, РезультатЗакрытия.КурсПересчетаЦен.Кратность);
				СтарыйКурс = ?(КурсВалюты=0, 1, КурсВалюты) / ?(КратностьВалюты=0, 1, КратностьВалюты);
				КурсВалюты = РезультатЗакрытия.КурсПересчетаЦен.Курс;
				КратностьВалюты = РезультатЗакрытия.КурсПересчетаЦен.Кратность;
			КонецЕсли;
			
		КонецЕсли; 
		
		// Пересчитываем цены по виду цен.
		Если РезультатЗакрытия.ПерезаполнитьЦены Тогда
			
			ПерезаполнитьПоВидуЦен();
			
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И РезультатЗакрытия.ПересчитатьЦены Тогда
			
			Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
				СтрокаТабличнойЧасти.Расценка = СтрокаТабличнойЧасти.Расценка * СтарыйКурс / НовыйКурс;
				РассчитатьСтоимость(СтрокаТабличнойЧасти);
			КонецЦикла;
			
		КонецЕсли;
		
		// Сформируем надпись цены и валюты.
		СтруктураНадписи = СформироватьСтруктуруНадписиЦенаИВалюта(Объект, ЭтотОбъект);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСтруктуруНадписиЦенаИВалюта(Объект, Форма)
	
	СтруктураНадписи = Новый Структура;
	СтруктураНадписи.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("Курс", Форма.КурсВалюты);
	СтруктураНадписи.Вставить("КурсНациональнаяВалюта", Форма.КурсНациональнаяВалюта);
	СтруктураНадписи.Вставить("УчетВалютныхОпераций", Форма.УчетВалютныхОпераций);
	Возврат СтруктураНадписи;
	
КонецФункции 

&НаСервере
Процедура ПерезаполнитьПоВидуЦен()
	
	МассивОпераций = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Операция) Тогда
			МассивОпераций.Добавить(СтрокаТабличнойЧасти.Операция);
		КонецЕсли; 
	КонецЦикла;
	МассивОпераций = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОпераций);
	Если МассивОпераций.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОбработки", Объект.Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", Объект.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВидЦен", Объект.ВидЦен);
	Запрос.УстановитьПараметр("Операции", МассивОпераций);
	Запрос.УстановитьПараметр("КурсВалюты", КурсВалюты);
	Запрос.УстановитьПараметр("КратностьВалюты", КратностьВалюты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена * ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|			ИНАЧЕ 1
	|		КОНЕЦ * (ВЫБОР
	|			КОГДА КурсЦены.Курс = 0
	|				ТОГДА 1
	|			ИНАЧЕ КурсЦены.Курс
	|		КОНЕЦ / ВЫБОР
	|			КОГДА КурсЦены.Кратность = 0
	|				ТОГДА 1
	|			ИНАЧЕ КурсЦены.Кратность
	|		КОНЕЦ) / (ВЫБОР
	|			КОГДА &КурсВалюты = 0
	|				ТОГДА 1
	|			ИНАЧЕ &КурсВалюты
	|		КОНЕЦ / ВЫБОР
	|			КОГДА &КратностьВалюты = 0
	|				ТОГДА 1
	|			ИНАЧЕ &КратностьВалюты
	|		КОНЕЦ) КАК ЧИСЛО(15, 2)) КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаОбработки,
	|			Номенклатура В (&Операции)
	|				И ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсЦены
	|		ПО ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены = КурсЦены.Валюта";
	СоответствиеЦен = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеЦен.Вставить(Выборка.Номенклатура, Выборка.Цена);	
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
		Цена = СоответствиеЦен.Получить(СтрокаТабличнойЧасти.Операция);
		Если Цена=Неопределено Тогда
			Цена = 0;
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			Цена = Цена * ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ЕдиницаИзмерения, "Коэффициент"); 
		КонецЕсли;
		СтрокаТабличнойЧасти.Расценка = Цена;
		Если НЕ СтрокаТабличнойЧасти.ФиксированнаяСтоимость Тогда
			СтрокаТабличнойЧасти.Стоимость = СтрокаТабличнойЧасти.Расценка * СтрокаТабличнойЧасти.НормаВремени * СтрокаТабличнойЧасти.КоличествоФакт;
		Иначе
			СтрокаТабличнойЧасти.Стоимость = СтрокаТабличнойЧасти.Расценка * СтрокаТабличнойЧасти.КоличествоФакт;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.ИсполнительБригада", Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ОперацииТабНомер");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.ИсполнительБригада", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ОперацииИзменитьСостав");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.ИсполнительБригада", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПоложениеСтруктурнойЕдиницы", Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ОперацииСтруктурнаяЕдиница");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	// Этапы производства
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.ИспользоватьЭтапыПроизводства", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ОперацииПодразделениеЗавершающегоЭтапа");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ОперацииЭтапы");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.ИспользоватьЭтапыПроизводства", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.ПодразделениеЗавершающегоЭтапа", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ОперацииПодразделениеЗавершающегоЭтапа");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.ИспользоватьЭтапыПроизводства", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.Этапы", Справочники.ЭтапыПроизводства.ПустаяСсылка());
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ОперацииЭтапы");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Процедура устанавливает доступность элементов формы в зависимости от типа исполнителя.
//
// Параметры:
//  Нет.
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если ОтображатьЗакладкуБригады(Объект) Тогда
		
		Элементы.ГруппаСоставБригады.Видимость 				= Истина;
		Элементы.ЗаполнитьСоставБригады.Видимость 			= Истина;
		Элементы.Исполнитель.МаксимальнаяШирина				= 36;
		Элементы.ТабНомер.Видимость 						= Ложь;
		
	Иначе
		
		Элементы.ГруппаСоставБригады.Видимость 				= Ложь;
		Элементы.ЗаполнитьСоставБригады.Видимость 			= Ложь;
		Элементы.Исполнитель.МаксимальнаяШирина				= 31;
		Элементы.ТабНомер.Видимость 						= Истина;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументОснованиеНадпись", "Доступность", НЕ Форма.ТолькоПросмотр);
	
	УправлениеВидимостьюЭтапов(Форма);
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюЭтапов(Форма)
	
	Элементы = Форма.Элементы;
	
	ЕстьЭтапы = ПроизводствоСЭтапами(Форма);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииЭтап", "Видимость", 							ЕстьЭтапы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииПодразделениеЗавершающегоЭтапа", "Видимость", 	ЕстьЭтапы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОтПользовательскихНастроек(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Объект.ПоложениеИсполнителя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИсполнитель", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсполнительТНСостав", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСоставБригады", "Видимость", ОтображатьЗакладкуБригады(Объект));
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИсполнитель", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсполнительТНСостав", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСоставБригады", "Видимость", ОтображатьЗакладкуБригады(Объект));
	КонецЕсли;
	
	Если Объект.ПоложениеСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииСтруктурнаяЕдиница", "Видимость", НЕ ОтображатьЗакладкуБригады(Объект));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоставБригадыСтруктурнаяЕдиница", "Видимость", ОтображатьЗакладкуБригады(Объект));
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиница", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииСтруктурнаяЕдиница", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоставБригадыСтруктурнаяЕдиница", "Видимость", Ложь);
	КонецЕсли;
	
	Если Форма.Объект.ПоложениеЗаказаНаПроизводство = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаказНаПроизводство", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПоЗаказуНаПроизводство", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииЗаказНаПроизводство", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаказНаПроизводство", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПоЗаказуНаПроизводство", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииЗаказНаПроизводство", "Видимость", Ложь);
	КонецЕсли;	
	
КонецПроцедуры // УстановитьВидимостьОтПользовательскихНастроек()

&НаСервере
Процедура УстановитьВидимостьЭлементовДляМобильногоКлиента()
	
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаЗакрытия", "Ширина", 8);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВалютаДокумента", "Ширина", 5);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииИтогНормочасы", "ГоризонтальноеПоложение", ГоризонтальноеПоложениеЭлемента.Лево);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииИтогСтоимость", "ГоризонтальноеПоложение", ГоризонтальноеПоложениеЭлемента.Лево);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДокументОснование()
	
	СписокДокументОснование.Очистить();
	СписокДокументОснование.Добавить("Документ.ЗаказПокупателя.ФормаВыбора", НСтр("ru = 'Заказ покупателя'"));
	СписокДокументОснование.Добавить("Документ.ЗаказНаПроизводство.ФормаВыбора", НСтр("ru = 'Заказ на производство'"));
	СписокДокументОснование.Добавить("Документ.СборкаЗапасов.ФормаВыбора", НСтр("ru = 'Производство'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);		

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу(Объект.ДокументОснование);
		// Сформируем надпись цены и валюты.
		СтруктураНадписи = СформироватьСтруктуруНадписиЦенаИВалюта(Объект, ЭтотОбъект);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуНаПроизводство(Команда)
	
	Ответ = Неопределено;
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоЗаказуНаПроизводствоЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Документ будет полностью перезаполнен по ""Заказу на производство""! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуНаПроизводствоЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу(Объект.ЗаказНаПроизводство);
		// Сформируем надпись цены и валюты.
		СтруктураНадписи = СформироватьСтруктуруНадписиЦенаИВалюта(Объект, ЭтотОбъект);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоЗаказу()

&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	Если Объект.ПоложениеИсполнителя=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Объект.СоставБригады.Очистить();
	КонецЕсли; 
		
	ОбновитьКэшиДанныхСервер();
	ЗаполнитьСлужебныеДанныеТЧ(ЭтотОбъект);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	
КонецПроцедуры // ЗаполнитьПоДокументу()

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

// Вызывает процедуру копирования строк и оповещает пользователя о количестве скопированных.
//
&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру вставки строк и оповещает пользователя о количестве вставленных.
//
&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

// Выполняет копирование выделенных строк в буфер обмена.
//
&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

// Вставляет скопированные строки из буфера обмена в выбранную табличную часть.
//
&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	Для Итератор = 1 По КоличествоВставленных Цикл
		СтрокаТабличнойЧасти = Объект[ИмяТЧ][Количество - Итератор];
		СтрокаТабличнойЧасти.КлючСвязи = 0;
	КонецЦикла; 
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		СтрокаТабличнойЧасти = Объект[ИмяТЧ][Количество - Итератор];
		
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТЧ], СтрокаТабличнойЧасти, "КлючСвязи");
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("ДатаОбработки", 	СтрокаТабличнойЧасти.Период);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("ВидЦен", 			Объект.ВидЦен);
		СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
			СтруктураДанные.Вставить("Спецификация", СтрокаТабличнойЧасти.Спецификация);
		КонецЕсли; 
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
		Если ЗначениеЗаполнено(СтруктураДанные.Операция) Тогда
			СтрокаТабличнойЧасти.Операция 			= СтруктураДанные.Операция;
			СтрокаТабличнойЧасти.Расценка 			= СтруктураДанные.Цена;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.НормаВремени 		= СтруктураДанные.НормаВремени;
		Иначе
			СтрокаТабличнойЧасти.Расценка 			= 0;
			СтрокаТабличнойЧасти.НормаВремени 		= 0;
		КонецЕсли;
		
		Если Объект.ПоложениеИсполнителя=Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			СтрокаТабличнойЧасти.Исполнитель = Объект.Исполнитель;
		КонецЕсли; 
		Если Объект.ПоложениеСтруктурнойЕдиницы=Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
		КонецЕсли; 
		
	КонецЦикла;
	
	ОбновитьКэшиДанныхСервер();
	ЗаполнитьСлужебныеДанныеТЧ(ЭтотОбъект);
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		СтрокаТабличнойЧасти = Объект[ИмяТЧ][Количество - Итератор];
		СтрокаТабличнойЧасти.Нормочасы = СтрокаТабличнойЧасти.НормаВремени * СтрокаТабличнойЧасти.КоличествоФакт;	
		Если НЕ СтрокаТабличнойЧасти.ФиксированнаяСтоимость Тогда
			СтрокаТабличнойЧасти.Стоимость = СтрокаТабличнойЧасти.Расценка * СтрокаТабличнойЧасти.НормаВремени * СтрокаТабличнойЧасти.КоличествоФакт;
		Иначе
			СтрокаТабличнойЧасти.Стоимость = СтрокаТабличнойЧасти.Расценка * СтрокаТабличнойЧасти.КоличествоФакт;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ЭтапыПроизводства

&НаКлиентеНаСервереБезКонтекста
Функция ПроизводствоСЭтапами(Форма)
	
	Объект = Форма.Объект;
	КэшЗначений = Форма.КэшЗначений;
	
	Если НЕ КэшЗначений.ИспользоватьЭтапыПроизводства Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ПодЗаказ = Ложь;
	Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
			ПодЗаказ = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если Объект.ПоложениеЗаказаНаПроизводство=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		ПоЗаказуНаПроизводство = Ложь;
		Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказНаПроизводство) Тогда
				ПоЗаказуНаПроизводство = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	Иначе
		ПоЗаказуНаПроизводство = ЗначениеЗаполнено(Объект.ЗаказНаПроизводство);
	КонецЕсли;
	
	Если НЕ ПодЗаказ И НЕ ПоЗаказуНаПроизводство Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ЕстьЭтапы = Ложь;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
		Если СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства Тогда
			ЕстьЭтапы = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ЕстьЭтапы;		
	
КонецФункции 

&НаСервереБезКонтекста
Функция ЭтапыПроизводства(Спецификации, ЗаказНаПроизводство)
	
	Если ЗначениеЗаполнено(ЗаказНаПроизводство) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказНаПроизводство, "ВидОперации")=Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка Тогда
		Возврат Новый Массив;
	КонецЕсли; 
	
	Возврат ПроизводствоСервер.ЭтапыПроизводстваСпецификаций(Спецификации);	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеПустогоЭтапа(Список)
	
	Если Список.Количество()>0 И НЕ ЗначениеЗаполнено(Список[0].Значение) Тогда
		Список[0].Представление = НСтр("ru = '<Без этапов>'");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияЭтапов()
	
	Если НЕ КэшЗначений.ИспользоватьЭтапыПроизводства Тогда
		Возврат;
	КонецЕсли;
	
	МассивСпецификаций = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
		СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства = Ложь;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) И МассивСпецификаций.Найти(СтрокаТабличнойЧасти.Спецификация)=Неопределено Тогда
			МассивСпецификаций.Добавить(СтрокаТабличнойЧасти.Спецификация);
		КонецЕсли; 
	КонецЦикла;
	
	Если МассивСпецификаций.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СпецификацииСПоэтапнымПроизводством = ПроизводствоСервер.СпецификацииСПоэтапнымПроизводством(МассивСпецификаций);
	Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства = (СпецификацииСПоэтапнымПроизводством.Найти(СтрокаТабличнойЧасти.Спецификация)<>Неопределено);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 
