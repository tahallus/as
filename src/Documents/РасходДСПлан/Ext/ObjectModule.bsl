#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// АПК:299-выкл процедуры вызываются в ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент()
// АПК:581-выкл процедуры вызываются в ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент()

// Обработчик заполнения на основании документа ЗаказПоставщику.
//
// Параметры:
//	ДокументСсылкаЗаказПоставщику - ДокументСсылка.ЗаказПоставщику.
//	
Процедура ЗаполнитьПоЗаказПоставщику(ДокументСсылкаЗаказПоставщику) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПоставщику);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	// Заполним данные шапки документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.НомерВходящегоДокумента = """"
	|			ТОГДА ТаблицаДокумента.Номер
	|		ИНАЧЕ ТаблицаДокумента.НомерВходящегоДокумента
	|	КОНЕЦ КАК НомерВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ТаблицаДокумента.Дата
	|		ИНАЧЕ ТаблицаДокумента.ДатаВходящегоДокумента
	|	КОНЕЦ КАК ДатаВходящегоДокумента,
	|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ТаблицаДокумента.Касса КАК Касса,
	|	ТаблицаДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ТаблицаДокумента.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Договор КАК Договор,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказПоставщику()

// Обработчик заполнения на основании документа ПриходнаяНакладная.
//
// Параметры:
//	ДокументСсылкаПриходнаяНакладная - ДокументСсылка.ПриходнаяНакладная.
//	
Процедура ЗаполнитьПоПриходнаяНакладная(ДокументСсылкаПриходнаяНакладная) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриходнаяНакладная);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	// Заполним данные шапки документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.НомерВходящегоДокумента = """"
	|			ТОГДА ТаблицаДокумента.Номер
	|		ИНАЧЕ ТаблицаДокумента.НомерВходящегоДокумента
	|	КОНЕЦ КАК НомерВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ТаблицаДокумента.Дата
	|		ИНАЧЕ ТаблицаДокумента.ДатаВходящегоДокумента
	|	КОНЕЦ КАК ДатаВходящегоДокумента,
	|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Договор КАК Договор,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоПриходнаяНакладная()

// Обработчик заполнения на основании документа АвансовыйОтчет
//
// Параметры:
//	ДокументСсылкаАвансовыйОтчет - ДокументСсылка.АвансовыйОтчет.
//	
Процедура ЗаполнитьПоАвансовыйОтчет(ДокументСсылкаАвансовыйОтчет) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаАвансовыйОтчет);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	// Заполним данные шапки документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Номер КАК НомерВходящегоДокумента,
	|	ТаблицаДокумента.Дата КАК ДатаВходящегоДокумента,
	|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
	
КонецПроцедуры // ЗаполнитьПоАвансовыйОтчет()

// Обработчик заполнения на основании документа ОтчетКомитенту.
//
// Параметры:
//	ДокументСсылкаОтчетКомитенту - ДокументСсылка.ОтчетКомитенту.
//	
Процедура ЗаполнитьПоОтчетКомитенту(ДокументСсылкаОтчетКомитенту) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетКомитенту);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	// Заполним данные шапки документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ШапкаДокумента.Организация КАК Организация,
	|	ШапкаДокумента.Номер КАК НомерВходящегоДокумента,
	|	ШапкаДокумента.Дата КАК ДатаВходящегоДокумента,
	|	ШапкаДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ШапкаДокумента.Контрагент КАК Контрагент,
	|	ШапкаДокумента.Договор КАК Договор,
	|	СУММА(ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА НЕ ШапкаДокумента.СуммаВключаетНДС
	|						ТОГДА ВЫБОР
	|								КОГДА ШапкаДокумента.УдержатьКомиссионноеВознаграждение
	|									ТОГДА ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС - ТаблицаДокумента.СуммаВознаграждения - ТаблицаДокумента.СуммаНДСВознаграждения
	|								ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ШапкаДокумента.УдержатьКомиссионноеВознаграждение
	|								ТОГДА ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаВознаграждения
	|							ИНАЧЕ ТаблицаДокумента.Сумма
	|						КОНЕЦ
	|				КОНЕЦ КАК ЧИСЛО(15, 2)), 0)) КАК СуммаДокумента
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомитенту.Запасы КАК ТаблицаДокумента
	|		ПО (ТаблицаДокумента.Ссылка = ШапкаДокумента.Ссылка)
	|ГДЕ
	|	ШапкаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ШапкаДокумента.Организация,
	|	ШапкаДокумента.Номер,
	|	ШапкаДокумента.Дата,
	|	ШапкаДокумента.ВалютаДокумента,
	|	ШапкаДокумента.Контрагент,
	|	ШапкаДокумента.Договор";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоОтчетКомитенту()

// Обработчик заполнения на основании документа ПлатежнаяВедомость
//
// Параметры:
//	ДокументСсылкаПлатежнаяВедомость - ДокументСсылка.ПлатежнаяВедомость.
//	
Процедура ЗаполнитьПоПлатежнаяВедомость(ДокументСсылкаПлатежнаяВедомость) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПлатежнаяВедомость);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	// Заполним данные шапки документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.Прочее) КАК СтатьяДвиженияДенежныхСредств,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Номер КАК НомерВходящегоДокумента,
	|	ТаблицаДокумента.Дата КАК ДатаВходящегоДокумента,
	|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ПлатежнаяВедомость КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
	
КонецПроцедуры // ЗаполнитьПоПлатежнаяВедомость()

// Обработчик заполнения на основании документа СчетФактураПолученный.
//
// Параметры:
//	ДокументСсылкаСчетФактураПолученный - ДокументСсылка.СчетФактураПолученный.
//	
Процедура ЗаполнитьПоСчетФактураПолученный(ДокументСсылкаСчетФактураПолученный) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСчетФактураПолученный);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	// Заполним данные шапки документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.НомерВходящегоДокумента = """"
	|			ТОГДА ТаблицаДокумента.Номер
	|		ИНАЧЕ ТаблицаДокумента.НомерВходящегоДокумента
	|	КОНЕЦ КАК НомерВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ТаблицаДокумента.Дата
	|		ИНАЧЕ ТаблицаДокумента.ДатаВходящегоДокумента
	|	КОНЕЦ КАК ДатаВходящегоДокумента,
	|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Договор КАК Договор,
	|	ТаблицаДокумента.СуммаДокумента + ТаблицаДокумента.СуммаНДСДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.СчетФактураПолученный КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоСчетФактураПолученный()

// Обработчик заполнения на основании документа ДополнительныеРасходы.
//
// Параметры:
//	ДокументСсылкаДополнительныеРасходы - ДокументСсылка.ДополнительныеРасходы.
//	
Процедура ЗаполнитьПоДополнительныеРасходы(ДокументСсылкаДополнительныеРасходы) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаДополнительныеРасходы);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	// Заполним данные шапки документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.НомерВходящегоДокумента = """"
	|			ТОГДА ТаблицаДокумента.Номер
	|		ИНАЧЕ ТаблицаДокумента.НомерВходящегоДокумента
	|	КОНЕЦ КАК НомерВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ТаблицаДокумента.Дата
	|		ИНАЧЕ ТаблицаДокумента.ДатаВходящегоДокумента
	|	КОНЕЦ КАК ДатаВходящегоДокумента,
	|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Договор КАК Договор,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ДополнительныеРасходы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоДополнительныеРасходы()

// Обработчик заполнения на основании документа ОтчетПереработчика.
//
// Параметры:
//	ДокументСсылкаОтчетПереработчика - ДокументСсылка.ОтчетПереработчика.
//	
Процедура ЗаполнитьПоОтчетПереработчика(ДокументСсылкаОтчетПереработчика) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетПереработчика);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	// Заполним данные шапки документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Номер КАК НомерВходящегоДокумента,
	|	ТаблицаДокумента.Дата КАК ДатаВходящегоДокумента,
	|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Договор КАК Договор,
	|	ТаблицаДокумента.Сумма КАК СуммаДокумента
	|ИЗ
	|	Документ.ОтчетПереработчика КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоОтчетПереработчика()

// Процедура заполнения документа на основании документа СчетаНаОплату
//
// Параметры:
//	ДокументСсылкаСчетНаОплатуПоставщика - ДокументСсылка.СчетНаОплатуПоставщика.
//	
Процедура ЗаполнитьПоСчетуНаОплатуПоставщика(ДокументСсылкаСчетНаОплатуПоставщика) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСчетНаОплатуПоставщика);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	// Заполним данные шапки документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя) КАК ВидОперации,
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.НомерВходящегоДокумента = """"
	|			ТОГДА ТаблицаДокумента.Номер
	|		ИНАЧЕ ТаблицаДокумента.НомерВходящегоДокумента
	|	КОНЕЦ КАК НомерВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ТаблицаДокумента.Дата
	|		ИНАЧЕ ТаблицаДокумента.ДатаВходящегоДокумента
	|	КОНЕЦ КАК ДатаВходящегоДокумента,
	|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ТаблицаДокумента.Касса КАК Касса,
	|	ТаблицаДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ТаблицаДокумента.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Договор КАК Договор,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения документа на основании документа НачислениеЗарплаты
//
// Параметры:
//	ДокументСсылкаНачислениеЗарплаты - ДокументСсылка.НачислениеЗарплаты
//	
Процедура ЗаполнитьПоНачислениеЗарплаты(ДокументСсылкаНачислениеЗарплаты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Номер КАК НомерВходящегоДокумента,
	|	ТаблицаДокумента.Дата КАК ДатаВходящегоДокумента,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаНачислениеЗарплаты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
		Если СуммаДокумента < 0 Тогда
			СуммаДокумента = СуммаДокумента * -1;
		КонецЕсли;
		
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
	
КонецПроцедуры

// Процедура заполнения документа на основании документа НачислениеНалогов
//
// Параметры:
//	ДокументСсылкаНачислениеНалогов - ДокументСсылка.НачислениеНалогов.
//	
Процедура ЗаполнитьПоНачислениеНалогов(ДокументСсылкаНачислениеНалогов) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаНачислениеНалогов);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	// Заполним данные шапки документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Номер КАК НомерВходящегоДокумента,
	|	ТаблицаДокумента.Дата КАК ДатаВходящегоДокумента,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.НачислениеНалогов КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
	
КонецПроцедуры

Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения) Экспорт
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// АПК:299-вкл
// АПК:581-вкл

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПоставщику")] = "ЗаполнитьПоЗаказПоставщику";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПриходнаяНакладная";
	СтратегияЗаполнения[Тип("ДокументСсылка.АвансовыйОтчет")] = "ЗаполнитьПоАвансовыйОтчет";
	СтратегияЗаполнения[Тип("ДокументСсылка.ОтчетКомитенту")] = "ЗаполнитьПоОтчетКомитенту";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПлатежнаяВедомость")] = "ЗаполнитьПоПлатежнаяВедомость";
	СтратегияЗаполнения[Тип("ДокументСсылка.СчетФактураПолученный")] = "ЗаполнитьПоСчетФактураПолученный";
	СтратегияЗаполнения[Тип("ДокументСсылка.ДополнительныеРасходы")] = "ЗаполнитьПоДополнительныеРасходы";
	СтратегияЗаполнения[Тип("ДокументСсылка.ОтчетПереработчика")] = "ЗаполнитьПоОтчетПереработчика";
	СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплатуПоставщика")] = "ЗаполнитьПоСчетуНаОплатуПоставщика";
	СтратегияЗаполнения[Тип("ДокументСсылка.НачислениеЗарплаты")] = "ЗаполнитьПоНачислениеЗарплаты";
	СтратегияЗаполнения[Тип("ДокументСсылка.НачислениеНалогов")] = "ЗаполнитьПоНачислениеНалогов";
	СтратегияЗаполнения[Тип("ДокументСсылка.ДоговорКредитаИЗайма")] = "ЗаполнитьПоДоговоруКредитаИЗайма";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если СтатусУтвержденияПлатежа = Перечисления.СтатусыУтвержденияПлатежей.Утвержден Тогда
		
		ПроверяемыеРеквизиты.Добавить("ТипДенежныхСредств");
		
		Если ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
			ПроверяемыеРеквизиты.Добавить("БанковскийСчет");
		ИначеЕсли ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные Тогда
			ПроверяемыеРеквизиты.Добавить("Касса");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа
	Документы.РасходДСПлан.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПлатежныйКалендарь", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДенежныеСредстваВРезерве", ТаблицыДляДвижений, Движения, Отказ);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка по резервам денежных средств
	Документы.РасходДСПлан.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.РасходДСПлан.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик события ПриЗаписи объекта.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СтатусыДокументов.УстановитьСтатусДокумента(Ссылка);
	
КонецПроцедуры

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	СтатусУтвержденияПлатежа = Перечисления.СтатусыУтвержденияПлатежей.НеУтвержден;
	РезервироватьДенежныеСредства = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеРасчеты

// Обработчик заполнения на основании документа ДоговорКредитаИЗайма.
//
// Параметры:
//	ДокументСсылкаДоговорКредитаИЗайма - ДокументСсылка.ДоговорКредитаИЗайма.
//	
Процедура ЗаполнитьПоДоговоруКредитаИЗайма(ДокументСсылкаДоговорКредитаИЗайма) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаДоговорКредитаИЗайма);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	// Заполним данные шапки документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Номер КАК НомерВходящегоДокумента,
	|	ТаблицаДокумента.Дата КАК ДатаВходящегоДокумента,
	|	ТаблицаДокумента.ВалютаРасчетов КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКредитаИЗайма.КредитПолученный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|	КОНЕЦ КАК ТипДенежныхСредств,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКредитаИЗайма.КредитПолученный)
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаДокумента.СуммаДокумента
	|	КОНЕЦ КАК СуммаДокумента
	|ИЗ
	|	Документ.ДоговорКредитаИЗайма КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	Если Не Контрагент.Пустая() Тогда
		МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
		
		СписокВидовДоговоров = Неопределено;
		Договор = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли