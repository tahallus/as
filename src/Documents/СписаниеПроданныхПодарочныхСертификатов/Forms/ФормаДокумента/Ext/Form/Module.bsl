#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерезаполнитьОстатокПоСертификатам(Команда)
	
	ЗаполнитьОстатокСертификатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПросроченнымиСертификатами(Команда)
	
	Если Объект.ПодарочныеСертификаты.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПросроченнымиСертификатамиЗавершение", ЭтотОбъект),
			НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьПросроченнымиСертификатамиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПросроченнымиСертификатамиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПросроченнымиСертификатамиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПросроченнымиСертификатамиНаСервере()
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК ПодарочныйСертификат,
	|	Номенклатура.ТипСрокаДействия КАК ТипСрокаДействия
	|ПОМЕСТИТЬ Сертификаты
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И Номенклатура.ТипСрокаДействия <> ЗНАЧЕНИЕ(Перечисление.СрокДействияПодарочныхСертификатов.БезОграниченияСрока)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сертификаты.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ЕСТЬNULL(СерииНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК НомерСертификата,
	|	Сертификаты.ТипСрокаДействия КАК ТипСрокаДействия
	|ПОМЕСТИТЬ СертификатыСНомерами
	|ИЗ
	|	Сертификаты КАК Сертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО Сертификаты.ПодарочныйСертификат = СерииНоменклатуры.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатурыОбороты.Серия КАК НомерСертификата,
	|	МАКСИМУМ(СерииНоменклатурыОбороты.Период) КАК ПериодПродажи
	|ПОМЕСТИТЬ ПродажиПоНомерам
	|ИЗ
	|	РегистрНакопления.СерииНоменклатуры.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Серия В
	|				(ВЫБРАТЬ
	|					СертификатыСНомерами.НомерСертификата КАК НомерСертификата
	|				ИЗ
	|					СертификатыСНомерами КАК СертификатыСНомерами)) КАК СерииНоменклатурыОбороты
	|ГДЕ
	|	(СерииНоменклатурыОбороты.Регистратор ССЫЛКА Документ.РасходнаяНакладная
	|			ИЛИ СерииНоменклатурыОбороты.Регистратор ССЫЛКА Документ.ЧекККМ
	|			ИЛИ СерииНоменклатурыОбороты.Регистратор ССЫЛКА Документ.ЗаказПокупателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	СерииНоменклатурыОбороты.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыСНомерами.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	СертификатыСНомерами.НомерСертификата КАК НомерСертификата,
	|	ВЫБОР
	|		КОГДА СертификатыСНомерами.ТипСрокаДействия = ЗНАЧЕНИЕ(Перечисление.СрокДействияПодарочныхСертификатов.СОграничениемНаДату)
	|			ТОГДА СертификатыСНомерами.ПодарочныйСертификат.ДатаОкончанияДействия
	|		КОГДА СертификатыСНомерами.ТипСрокаДействия = ЗНАЧЕНИЕ(Перечисление.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи)
	|			ТОГДА ВЫБОР
	|					КОГДА СертификатыСНомерами.ПодарочныйСертификат.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиПоНомерам.ПериодПродажи, ДЕНЬ, СертификатыСНомерами.ПодарочныйСертификат.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСНомерами.ПодарочныйСертификат.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиПоНомерам.ПериодПродажи, НЕДЕЛЯ, СертификатыСНомерами.ПодарочныйСертификат.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСНомерами.ПодарочныйСертификат.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиПоНомерам.ПериодПродажи, ДЕКАДА, СертификатыСНомерами.ПодарочныйСертификат.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСНомерами.ПодарочныйСертификат.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиПоНомерам.ПериодПродажи, МЕСЯЦ, СертификатыСНомерами.ПодарочныйСертификат.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСНомерами.ПодарочныйСертификат.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиПоНомерам.ПериодПродажи, КВАРТАЛ, СертификатыСНомерами.ПодарочныйСертификат.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСНомерами.ПодарочныйСертификат.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиПоНомерам.ПериодПродажи, ПОЛУГОДИЕ, СертификатыСНомерами.ПодарочныйСертификат.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСНомерами.ПодарочныйСертификат.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиПоНомерам.ПериодПродажи, ГОД, СертификатыСНомерами.ПодарочныйСертификат.КоличествоПериодовДействия), ДЕНЬ)
	|					ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|				КОНЕЦ
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК СрокОкончания
	|ПОМЕСТИТЬ СертификатыСоСроками
	|ИЗ
	|	СертификатыСНомерами КАК СертификатыСНомерами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПродажиПоНомерам КАК ПродажиПоНомерам
	|		ПО СертификатыСНомерами.НомерСертификата = ПродажиПоНомерам.НомерСертификата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыСоСроками.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	СертификатыСоСроками.НомерСертификата КАК НомерСертификата,
	|	ПодарочныеСертификатыОстатки.СуммаОстаток КАК Остаток
	|ИЗ
	|	СертификатыСоСроками КАК СертификатыСоСроками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(, ) КАК ПодарочныеСертификатыОстатки
	|		ПО СертификатыСоСроками.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
	|			И СертификатыСоСроками.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
	|			И (СертификатыСоСроками.СрокОкончания <= &СрокОкончания)");
	Запрос.УстановитьПараметр("СрокОкончания", Объект.Дата);
	
	Объект.ПодарочныеСертификаты.Загрузить(Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение(
		"Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_СписаниеПроданныхПодарочныхСертификатов"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);

	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	// Установка способа выбора структурной единицы в зависимости от ФО.
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить() Тогда
		
		Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		
	КонецЕсли;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект,
		"ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Серии номенклатуры
	ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НеОткрыватьФорму Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект,
		"СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность", Модифицированность);
	// Конец Обсуждения
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Обработчик механизма "Свойства"	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект,
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события Открытие поля СтруктурнаяЕдиница.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаОткрытие()

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы

&НаКлиенте
Процедура ПодарочныеСертификатыНомерСертификатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПодборДляОплаты", Истина);
	СтруктураПараметров.Вставить("Отбор", Новый Структура("Владелец",
		Элементы.ПодарочныеСертификаты.ТекущиеДанные.ПодарочныйСертификат));
	ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаВыбора", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыНомерСертификатаПриИзменении(Элемент)
	
	ЗаполнитьОстатокСертификатов(Элементы.ПодарочныеСертификаты.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыПодарочныйСертификатПриИзменении(Элемент)
	
	ЗаполнитьОстатокСертификатов(Элементы.ПодарочныеСертификаты.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
// @skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьОстатокСертификатов(НомерСтроки = Неопределено)
	
	Если НомерСтроки = Неопределено Тогда
		Результат = РаботаСПодарочнымиСертификатами.ПолучитьСтруктуруДанныхПоТаблицеСертификатов(
			Объект.ПодарочныеСертификаты.Выгрузить(, "ПодарочныйСертификат, НомерСертификата"));
		Объект.ПодарочныеСертификаты.Загрузить(Результат);
	Иначе
		Результат = РаботаСПодарочнымиСертификатами.ПолучитьСтруктуруДанныхСертификата(
			Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(НомерСтроки).ПодарочныйСертификат,
			Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(НомерСтроки).НомерСертификата);
		Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(НомерСтроки).Остаток = Результат.Остаток;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	РазностьДат = ДокументыУНФ.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

#КонецОбласти