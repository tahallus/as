#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура выполняет распределение затрат по количеству.
//
Процедура РаспределитьТабЧастьРасходыПоКоличеству() Экспорт
	
	ИсхСумма = 0;
	БазаРаспределенияКоличество = Запасы.Итог("Количество");
	ВсегоРасходы = Расходы.Итог("Всего");
	Для каждого СтрокаЗапасы Из Запасы Цикл
		
		СтрокаЗапасы.СуммаРасходов = ?(БазаРаспределенияКоличество <> 0, Окр((ВсегоРасходы - ИсхСумма) * СтрокаЗапасы.Количество / БазаРаспределенияКоличество, 2, 1),0);
		БазаРаспределенияКоличество = БазаРаспределенияКоличество - СтрокаЗапасы.Количество;
		ИсхСумма = ИсхСумма + СтрокаЗапасы.СуммаРасходов;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоКоличеству()

// Процедура выполняет распределение затрат по сумме.
//
Процедура РаспределитьТабЧастьРасходыПоСумме() Экспорт
	
	ИсхСумма = 0;
	БазаРаспределенияСумма = Запасы.Итог("Всего");
	ВсегоРасходы = Расходы.Итог("Всего");
	Для каждого СтрокаЗапасы Из Запасы Цикл
		
		СтрокаЗапасы.СуммаРасходов = ?(БазаРаспределенияСумма <> 0, Окр((ВсегоРасходы - ИсхСумма) * СтрокаЗапасы.Всего / БазаРаспределенияСумма, 2, 1),0);
		БазаРаспределенияСумма = БазаРаспределенияСумма - СтрокаЗапасы.Всего;
		ИсхСумма = ИсхСумма + СтрокаЗапасы.СуммаРасходов;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоСумме()

#КонецОбласти

#Область ПроцедурыЗаполненияДокумента

Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения) Экспорт
	
	Если Не ДанныеЗаполнения.Свойство("МассивЗаказовПоставщикам") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоЗаказуПоставщику(ДанныеЗаполнения);
	
КонецПроцедуры

// Процедура заполняет авансы.
//
Процедура ЗаполнитьПредоплату() Экспорт
	
	ЗаказВШапке = (ПоложениеЗаказаПоставщику = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
	Компания = Константы.УчетПоКомпании.Компания(Организация);
	
	// Подготовка таблицы заказов.
	ТаблицаЗаказов = Запасы.Выгрузить(, "Заказ, Всего");
	ТаблицаЗаказов.Колонки.Добавить("ВсегоРасч");
	Для каждого ТекСтрока Из Расходы Цикл
		НоваяСтрока = ТаблицаЗаказов.Добавить();
		НоваяСтрока.Заказ = ТекСтрока.ЗаказПоставщику;
		НоваяСтрока.Всего = ТекСтрока.Всего;
	КонецЦикла;
	Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
		Если НЕ Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекСтрока.Заказ = Документы.ЗаказПоставщику.ПустаяСсылка();
		ИначеЕсли ЗаказВШапке Тогда
			ТекСтрока.Заказ = Заказ;
		Иначе
			ТекСтрока.Заказ = ?(ТекСтрока.Заказ = Неопределено, Документы.ЗаказПоставщику.ПустаяСсылка(), ТекСтрока.Заказ);
		КонецЕсли;
		ТекСтрока.ВсегоРасч = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			ТекСтрока.Всего,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Курс, 1),
			Курс,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Кратность, 1),
			Кратность
		);
	КонецЦикла;
	ТаблицаЗаказов.Свернуть("Заказ", "Всего, ВсегоРасч");
	ТаблицаЗаказов.Сортировать("Заказ Возр");
	
	// Заполнение расшифровки предоплаты.
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПоставщикамиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|		РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|		РасчетыСПоставщикамиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ В (&Заказ)
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПоставщикамиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПоставщиками.Договор,
	|		ДвиженияДокументаРасчетыСПоставщиками.Документ,
	|		ДвиженияДокументаРасчетыСПоставщиками.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПоставщиками.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияДокументаРасчетыСПоставщиками
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПоставщиками.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПоставщиками.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПоставщиками.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПоставщиками.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПоставщиками.Договор = &Договор
	|		И ДвиженияДокументаРасчетыСПоставщиками.Заказ В (&Заказ)
	|		И ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПоставщикамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщикамиОстатки.Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата,
	|	РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПоставщикамиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаУчета / ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаРасчетов, 0) <> 0
	|				ТОГДА РасчетыСПоставщикамиОстатки.СуммаРасчетов
	|			ИНАЧЕ 1
	|		КОНЕЦ) * (РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКурс / РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКратность) КАК Курс,
	|	1 КАК Кратность,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКурс КАК КурсыВалютыДокументаКурс,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКратность КАК КурсыВалютыДокументаКратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПоставщикамиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|		РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * &КратностьВалютыДокумента / (&КурсВалютыДокумента * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		КурсыВалютыУчета.Курс КАК КурсыВалютыУчетаКурс,
	|		КурсыВалютыУчета.Кратность КАК КурсыВалютыУчетаКратность,
	|		&КурсВалютыДокумента КАК КурсыВалютыДокументаКурс,
	|		&КратностьВалютыДокумента КАК КурсыВалютыДокументаКратность
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПоставщикамиОстатки КАК РасчетыСПоставщикамиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПоставщикамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщикамиОстатки.Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата,
	|	РасчетыСПоставщикамиОстатки.ВалютаРасчетов,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКурс,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКратность,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКурс,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Запрос.УстановитьПараметр("Заказ", ТаблицаЗаказов.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Если Договор.ВалютаРасчетов = ВалютаДокумента Тогда
		Запрос.УстановитьПараметр("КурсВалютыДокумента", Курс);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", Кратность);
	Иначе
		Запрос.УстановитьПараметр("КурсВалютыДокумента", 1);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = ТекстЗапроса;
	
	Предоплата.Очистить();
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		НайденнаяСтрока = ТаблицаЗаказов.Найти(ВыборкаРезультатаЗапроса.Заказ, "Заказ");
		
		Если НайденнаяСтрока.ВсегоРасч = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаРезультатаЗапроса.СуммаРасчетов <= НайденнаяСтрока.ВсегоРасч Тогда // сумма остатка меньше или равна чем осталось распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НайденнаяСтрока.ВсегоРасч = НайденнаяСтрока.ВсегоРасч - ВыборкаРезультатаЗапроса.СуммаРасчетов;
			
		Иначе // сумма остатка больше чем нужно распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НоваяСтрока.СуммаРасчетов = НайденнаяСтрока.ВсегоРасч;
			НоваяСтрока.СуммаПлатежа = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				НоваяСтрока.СуммаРасчетов,
				ВыборкаРезультатаЗапроса.Курс,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКурс,
				ВыборкаРезультатаЗапроса.Кратность,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКратность
			);
			НайденнаяСтрока.ВсегоРасч = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПредоплату()

// Процедура заполнения документа на основании расходной накладной.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.РасходнаяНакладная - расходная накладная
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоРасходнойНакладной(ДанныеЗаполнения) Экспорт
	
	// Заполнение шапки документа.
	Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю Тогда
		ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя;
		ДисконтнаяКарта = ДанныеЗаполнения.ДисконтнаяКарта;
		ПоложениеЗаказаПоставщику = ДанныеЗаполнения.ПоложениеЗаказаПокупателя;
		ЗапроситьСпециальныйНалоговыйРежим(ДанныеЗаполнения);
	ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
		ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера;
	ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку Тогда
		ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика;
	ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветХранение Тогда
		ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратСОтветХранения;
	Иначе
		ТекстИсключения = НСтр("ru = 'Невозможен ввод операции ""Поступления"" на основании операции - ""%ВидОперации%"".'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ВидОперации%", ДанныеЗаполнения.ВидОперации);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ПоложениеЗаказаПоставщику<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Заказ = ДанныеЗаполнения.Заказ;
	Иначе
		Заказ = Неопределено;
	КонецЕсли;
	
	ДокументОснование = ДанныеЗаполнения.Ссылка;
	Организация = ДанныеЗаполнения.Организация;
	Контрагент = ДанныеЗаполнения.Контрагент;
	Договор = ДанныеЗаполнения.Договор;
	СтруктурнаяЕдиница = ДанныеЗаполнения.СтруктурнаяЕдиница;
	Ячейка = ДанныеЗаполнения.Ячейка;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
	НДСВключатьВСтоимость = ДанныеЗаполнения.НДСВключатьВСтоимость;
	НалогообложениеНДС = ДанныеЗаполнения.НалогообложениеНДС;
	
	Курс = ДанныеЗаполнения.Курс;
	Кратность = ДанныеЗаполнения.Кратность;
	
	ПоложениеСклада = ДанныеЗаполнения.ПоложениеСклада;
	
	// Заполнение табличной части документа.
	Запасы.Очистить();
	
	Если ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера Тогда
		
		ТаблицаОстатков = РаботаСКомиссионерамиКомитентамиСервер.ТаблицаОстатковТоваровУКомиссионера(ЭтотОбъект, ,,, Ложь);
		ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика, Партия, ЗаказПокупателя");
		
		СтрокиКУдалению = Новый Массив;
		
		НеУчитыватьЗаказы = Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию;
		
		Если НеУчитыватьЗаказы И ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Запасы Цикл
			
			Если СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
				Или СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
				
				ПараметрыПоиска.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
				ПараметрыПоиска.Характеристика = СтрокаТабличнойЧасти.Характеристика;
				ПараметрыПоиска.Партия = СтрокаТабличнойЧасти.Партия;
				
				Если НеУчитыватьЗаказы Тогда
					ПараметрыПоиска.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
				Иначе	
					ПараметрыПоиска.ЗаказПокупателя = СтрокаТабличнойЧасти.Заказ;
				КонецЕсли;
				
				НайденныеСтроки = ТаблицаОстатков.НайтиСтроки(ПараметрыПоиска);
				
				Если Не НайденныеСтроки.Количество() Тогда Продолжить КонецЕсли;
				
				НоваяСтрока = Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
				
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					Если НайденнаяСтрока.Количество = 0 Тогда Продолжить КонецЕсли;
					
					Если НоваяСтрока.Количество >= НайденнаяСтрока.Количество Тогда
						НоваяСтрока.Количество = НайденнаяСтрока.Количество;
						НоваяСтрока.Цена = Окр(НайденнаяСтрока.СуммаРасчетов / НайденнаяСтрока.Количество, 2, РежимОкругления.Окр15как20);
						НоваяСтрока.Сумма = НайденнаяСтрока.СуммаРасчетов;
						СтрокиКУдалению.Добавить(НайденнаяСтрока);
					Иначе
						НоваяСтрока.Цена = Окр(НайденнаяСтрока.СуммаРасчетов / НайденнаяСтрока.Количество, 2, РежимОкругления.Окр15как20);
						НоваяСтрока.Сумма = Окр(НоваяСтрока.Цена * НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
						НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - НоваяСтрока.Количество;
						НайденнаяСтрока.СуммаРасчетов = НайденнаяСтрока.СуммаРасчетов - НоваяСтрока.Сумма;
					КонецЕсли;
					
				КонецЦикла;
				
				Если НоваяСтрока.Количество = 0 Тогда Запасы.Удалить(НоваяСтрока) КонецЕсли;
				
				ДанныеСтроки = Новый Структура;
				ДанныеСтроки.Вставить("Количество", НоваяСтрока.Количество);
				ДанныеСтроки.Вставить("Цена", НоваяСтрока.Цена);
				ДанныеСтроки.Вставить("Сумма", 0);
				ДанныеСтроки.Вставить("СтавкаНДС", НоваяСтрока.СтавкаНДС);
				ДанныеСтроки.Вставить("СуммаНДС", 0);
				ДанныеСтроки.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
				ДанныеСтроки.Вставить("Всего", 0);
				
				ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
							
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
				
				УчестьСкидкиНаценкиПоСтроке(НоваяСтрока);
				
				Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
					ТаблицаОстатков.Удалить(СтрокаКУдалению);
				КонецЦикла;
				СтрокиКУдалению.Очистить();
				
			КонецЕсли;
			
			Если НеУчитыватьЗаказы Тогда
				НоваяСтрока.Заказ = ?(ТипЗнч(НоваяСтрока.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя"), Документы.ЗаказПокупателя.ПустаяСсылка(), НоваяСтрока.Заказ);
				НоваяСтрока.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			КонецЕсли;
			
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Запасы Цикл
			
			Если СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
				Или СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
				
				НоваяСтрока = Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
				Если ВидОперации<>Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика Тогда
					НоваяСтрока.ЗаказПокупателя = Неопределено;
				КонецЕсли; 
				
				УчестьСкидкиНаценкиПоСтроке(НоваяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Прослеживаемость
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И (ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера) Тогда
		СведенияПрослеживаемости.Загрузить(ДанныеЗаполнения.СведенияПрослеживаемости.Выгрузить());
	КонецЕсли;
	// Конец Прослеживаемость
	
	СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения);
	
	// Наборы
	ДобавленныеНаборы.Очистить();
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.ДобавленныеНаборы Цикл
		ЗаполнитьЗначенияСвойств(ДобавленныеНаборы.Добавить(), СтрокаТабличнойЧасти);
	КонецЦикла; 
	// Конец Наборы
	
	// Перенос подарочных сертификатов из табличной части "Предоплата"
	Предоплата.Очистить();
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Предоплата Цикл
		
		Если СтрокаТабличнойЧасти.ОплатаСертификатом Тогда
			Если СтрокаТабличнойЧасти.Документ.ЧастичноеПогашение Тогда
				НоваяСтрока = Предоплата.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДокументОснование <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОснование, "Проект") Тогда
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование,"Проект");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоРасходнаяНакладная()

// Процедура заполнения документа на основании заказа покупателя.
//
// Параметры:
//	ДанныеЗаполнения - Структура, ДокументСсылка.ЗаказПоставщику
//	
Процедура ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения) Экспорт
	
	Если УправлениеНебольшойФирмойПовтИсп.РеквизитВШапке("ПоложениеЗаказаПоставщикуВДокументахПоступления") Тогда
		Заказ = ДанныеЗаполнения;
	Иначе
		Заказ = Неопределено;
	КонецЕсли;
	
	// Заполнение шапки.
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("Организация, Ссылка, ВидОперации, Контрагент, Договор, ВалютаДокумента, НалогообложениеНДС");
	ИменаРеквизитов.Добавить("СуммаВключаетНДС, НДСВключатьВСтоимость, Курс, Кратность, СостояниеЗаказа, ВариантЗавершения");
	ИменаРеквизитов.Добавить("Проведен, ОжидаетсяВыборВариантаКП, ПоложениеСклада, СтруктурнаяЕдиницаРезерв, УчетПотребностиПоСкладам");
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, Новый Структура(СтрСоединить(ИменаРеквизитов, ", ")));
			
	ЗначенияРеквизитов.Вставить("ЗаказНарядВозврат");
	Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(ДанныеЗаполнения, ЗначенияРеквизитов);
	
	ЗаполнитьЗначенияСвойств(
		ЭтотОбъект, 
		ЗначенияРеквизитов, 
		"Организация, Контрагент, Договор, ВалютаДокумента, НалогообложениеНДС, СуммаВключаетНДС, НДСВключатьВСтоимость, Курс, Кратность, ПоложениеСклада");
	ДокументОснование = ДанныеЗаполнения;
	Если ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") ИЛИ ДанныеЗаполнения.УчетПотребностиПоСкладам Тогда
		СтруктурнаяЕдиница = ДанныеЗаполнения.СтруктурнаяЕдиницаРезерв;
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
		СтруктурнаяЕдиница = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСклад");
		Если Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
			СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновнойСклад");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ВалютаДокумента = Константы.НациональнаяВалюта.Получить() Тогда
		ДатаСреза = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаСреза, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		ВидЦенКонтрагента = Договор.ВидЦенКонтрагента;
	КонецЕсли;
	
	// Заполнение табличной части.
	Запасы.Очистить();
	ДобавленныеНаборы.Очистить();
	Если ЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку Тогда
		ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку;
		НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		ЗаполнитьПоЗаказуПокупателяНаПереработку(ДанныеЗаполнения);
	ИначеЕсли ЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя;
		ЗаполнитьПоЗаказНаряду(ДанныеЗаполнения);
		ДисконтнаяКарта = ДанныеЗаполнения.ДисконтнаяКарта;
	Иначе
		ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя;
		ЗаполнитьПоЗаказуПокупателяНаПродажу(ДанныеЗаполнения);
		ДисконтнаяКарта = ДанныеЗаполнения.ДисконтнаяКарта;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			
			СерииНоменклатуры.Очистить();
			
			ТаблицаСерииНоменклатуры = ДанныеЗаполнения.СерииНоменклатуры.Выгрузить();
			Для Каждого СтрокаСерия Из ТаблицаСерииНоменклатуры Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаСерия.КлючСвязи) Тогда
					Продолжить;
				КонецЕсли;
				СтрокиЗапасы = ТабличныеЧастиУНФКлиентСервер.СтрокиПоКлючуСвязи(Запасы, СтрокаСерия.КлючСвязи);
				Если СтрокиЗапасы.Количество()=0 Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерия);
			КонецЦикла;
		КонецЕсли;
		
		СерииНоменклатурыУНФ.УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(ЭтотОбъект);
		
	КонецЕсли;
	
	Если ДокументОснование <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОснование, "Проект") Тогда
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование,"Проект");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказПокупателя()

// Процедура заполнения документа на основании заказа покупателя.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоЗаказуПокупателяНаПереработку(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса())) +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПотребностьОстатки.Номенклатура КАК Номенклатура,
	|	ПотребностьОстатки.Характеристика КАК Характеристика,
	|	СУММА(ПотребностьОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПотребностьОстатки.Номенклатура КАК Номенклатура,
	|		ПотребностьОстатки.Характеристика КАК Характеристика,
	|		ПотребностьОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ПотребностьВЗапасах.Остатки(
	|				,
	|				ЗаказПокупателя = &ДокументОснование
	|					И ТипДвижения = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Поступление)) КАК ПотребностьОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущиеДвижения.Номенклатура,
	|		ТекущиеДвижения.Характеристика,
	|		ВЫБОР
	|			КОГДА ТекущиеДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ТекущиеДвижения.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ТекущиеДвижения.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ПотребностьВЗапасах КАК ТекущиеДвижения
	|	ГДЕ
	|		ТекущиеДвижения.Регистратор = &Ссылка
	|		И ТекущиеДвижения.ТипДвижения = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Поступление)
	|		И ТекущиеДвижения.ЗаказПокупателя = &ДокументОснование) КАК ПотребностьОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотребностьОстатки.Номенклатура,
	|	ПотребностьОстатки.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПотребностьОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(ЗаказПокупателяМатериалыЗаказчика.НомерСтроки) КАК НомерСтроки,
	|	ЗаказПокупателяМатериалыЗаказчика.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяМатериалыЗаказчика.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЗаказПокупателяМатериалыЗаказчика.Характеристика КАК Характеристика,
	|	ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТСтавкиНДСНоменклатура.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА ВТСтавкиНДСОрганизация.СтавкаНДС
	|		ИНАЧЕ ВТСтавкиНДСНоменклатура.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	ЗаказПокупателяМатериалыЗаказчика.Ссылка КАК Заказ,
	|	СУММА(ЗаказПокупателяМатериалыЗаказчика.Количество) КАК Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.МатериалыЗаказчика КАК ЗаказПокупателяМатериалыЗаказчика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДСНоменклатура
	|		ПО ЗаказПокупателяМатериалыЗаказчика.Номенклатура.ВидСтавкиНДС = ВТСтавкиНДСНоменклатура.ВидСтавкиНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДСОрганизация
	|		ПО ЗаказПокупателяМатериалыЗаказчика.Ссылка.Организация.ВидСтавкиНДСПоУмолчанию = ВТСтавкиНДСОрганизация.ВидСтавкиНДС
	|ГДЕ
	|	ЗаказПокупателяМатериалыЗаказчика.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяМатериалыЗаказчика.Номенклатура,
	|	ЗаказПокупателяМатериалыЗаказчика.Характеристика,
	|	ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ,
	|	ЗаказПокупателяМатериалыЗаказчика.Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТСтавкиНДСНоменклатура.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА ВТСтавкиНДСОрганизация.СтавкаНДС
	|		ИНАЧЕ ВТСтавкиНДСНоменклатура.СтавкаНДС
	|	КОНЕЦ,
	|	ЗаказПокупателяМатериалыЗаказчика.Номенклатура.СтранаПроисхождения
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[МассивРезультатов.Количество()-2].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("Номенклатура,Характеристика");
	
	Если ТаблицаОстатков.Количество() > 0 Тогда
		
		Выборка = МассивРезультатов[МассивРезультатов.Количество()-1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
			
			МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
			Если МассивСтрокОстатков.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Если Выборка.Номенклатура.ИспользоватьПартии Тогда
				
				СтатусПартии = Новый СписокЗначений;
				СтатусПартии.Добавить(Перечисления.СтатусыПартий.ДавальческоеСырье);
				
				ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(Выборка.Номенклатура,СтатусПартии);
				
				Если Не ЗначенияПартииПоУмолчанию = Неопределено Тогда
					НоваяСтрока.Партия = ЗначенияПартииПоУмолчанию;
				КонецЕсли;
				
			КонецЕсли;
			
			КоличествоКСписанию = Выборка.Количество * Выборка.Коэффициент;
			МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоКСписанию;
			Если МассивСтрокОстатков[0].КоличествоОстаток < 0 Тогда
				
				НоваяСтрока.Количество = (КоличествоКСписанию + МассивСтрокОстатков[0].КоличествоОстаток) / Выборка.Коэффициент;
				
			КонецЕсли;
			
			Если МассивСтрокОстатков[0].КоличествоОстаток <= 0 Тогда
				ТаблицаОстатков.Удалить(МассивСтрокОстатков[0]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДокументОснование <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОснование, "Проект") Тогда
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование,"Проект");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказПокупателяНаПереработку()

// Процедура заполнения документа на основании заказа покупателя.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоЗаказуПокупателяНаПродажу(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыОстатки.Склад КАК Склад,
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.Склад КАК Склад,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				,
	|				ЗаказПокупателя = &ДокументОснование
	|					И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗаказыПокупателей.Склад,
	|		ДвиженияДокументаЗаказыПокупателей.Номенклатура,
	|		ДвиженияДокументаЗаказыПокупателей.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей КАК ДвиженияДокументаЗаказыПокупателей
	|	ГДЕ
	|		ДвиженияДокументаЗаказыПокупателей.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗаказыПокупателей.ЗаказПокупателя = &ДокументОснование) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.Склад,
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Цена КАК Цена,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяЗапасы.Всего КАК Всего,
	|	ЗаказПокупателяЗапасы.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
	|	ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
	|	ЗаказПокупателяЗапасы.Ссылка.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	ВЫБОР
	|		КОГДА (РезервированиеЗапасов.Значение
	|				ИЛИ ЗаказПокупателяЗапасы.Ссылка.УчетПотребностиПоСкладам)
	|				И ЗаказПокупателяЗапасы.СтруктурнаяЕдиницаРезерв <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяЗапасы.СтруктурнаяЕдиницаРезерв
	|		ИНАЧЕ ЗаказПокупателяЗапасы.Номенклатура.Склад
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ЗаказПокупателяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказПокупателяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказПокупателяЗапасы.ДоляСтоимости КАК ДоляСтоимости
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК РезервированиеЗапасов
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДобавленныеНаборы.Ссылка КАК Заказ,
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.ДобавленныеНаборы КАК ДобавленныеНаборы
	|ГДЕ
	|	ДобавленныеНаборы.Ссылка = &ДокументОснование
	|	И ДобавленныеНаборы.Ссылка.ОсновнойВариантКП = ДобавленныеНаборы.НомерВариантаКП";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(ДанныеЗаполнения, Запрос.МенеджерВременныхТаблиц, Истина);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("Номенклатура,Характеристика");
	
	Выборка = МассивРезультатов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		Если Выборка.УчетПотребностиПоСкладам Тогда
			СтруктураДляПоиска.Вставить("Склад", Выборка.СтруктурнаяЕдиница);
		Иначе
			СтруктураДляПоиска.Вставить("Склад", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
		КонецЕсли; 
		
		МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
		Если МассивСтрокОстатков.Количество() = 0 Тогда
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
		КонецЕсли; 
		
		Для каждого СтрокаОстатка Из МассивСтрокОстатков Цикл
			
			Если (СтрокаОстатка.КоличествоОстаток / Выборка.Коэффициент) = Выборка.Количество Тогда
				
				Прервать;
				
			ИначеЕсли (СтрокаОстатка.КоличествоОстаток / Выборка.Коэффициент) > Выборка.Количество Тогда
				
				СтрокаОстатка.КоличествоОстаток = СтрокаОстатка.КоличествоОстаток - Выборка.Количество * Выборка.Коэффициент;
				Прервать;
				
			ИначеЕсли (МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент) < Выборка.Количество Тогда
				
				КоличествоКСписанию = -1 * (СтрокаОстатка.КоличествоОстаток / Выборка.Коэффициент - Выборка.Количество);
				СтрокаОстатка.КоличествоОстаток = 0;
				
				НоваяСтрока = Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
				ДанныеСтроки = Новый Структура;
				ДанныеСтроки.Вставить("Количество", КоличествоКСписанию);
				ДанныеСтроки.Вставить("Цена", Выборка.Цена);
				ДанныеСтроки.Вставить("Сумма", 0);
				ДанныеСтроки.Вставить("СтавкаНДС", Выборка.СтавкаНДС);
				ДанныеСтроки.Вставить("СуммаНДС", 0);
				ДанныеСтроки.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
				ДанныеСтроки.Вставить("Всего", 0);
				
				ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
				
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) Тогда
			ЗначениеПоУмолчанию = Справочники.СтруктурныеЕдиницы.ОсновнойСклад();
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ?(ЗначениеЗаполнено(СтруктурнаяЕдиница), СтруктурнаяЕдиница, ЗначениеПоУмолчанию);
		КонецЕсли;
		
	КонецЦикла; 
	
	// Наборы
	ДобавленныеНаборыЗаказа = МассивРезультатов[2].Выгрузить();
	Для каждого СтрокаДобавленныхНаборов Из ДобавленныеНаборыЗаказа Цикл
		ЗаполнитьЗначенияСвойств(ДобавленныеНаборы.Добавить(), СтрокаДобавленныхНаборов);
	КонецЦикла;  
	// Конец Наборы
	
	Если ДокументОснование <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОснование, "Проект") Тогда
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование,"Проект");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказПокупателяНаПродажу()

// Процедура заполнения документа на основании заказ-наряд.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоЗаказНаряду(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЗаказПокупателяЗапасы.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ЗаказПокупателяЗапасы.Номенклатура.Ячейка КАК Ячейка,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Цена КАК Цена,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяЗапасы.Всего КАК Всего,
	|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
	|	ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
	|	ЗаказПокупателяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказПокупателяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказПокупателяЗапасы.ДоляСтоимости КАК ДоляСтоимости
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &ДокументОснование
	|	И ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДобавленныеНаборы.Ссылка КАК Заказ,
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.ДобавленныеНаборы КАК ДобавленныеНаборы
	|ГДЕ
	|	ДобавленныеНаборы.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапасы = РезультатЗапроса[0];
	Если НЕ РезультатЗапасы.Пустой() Тогда
		
		Выборка = РезультатЗапасы.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			Если ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				НоваяСтрока.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			КонецЕсли; 
		КонецЦикла;
		
		// Наборы
		Выборка = РезультатЗапроса[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДобавленныеНаборы.Добавить(), Выборка);
		КонецЦикла;  
		// Конец Наборы
		
		УчестьСкидкиНаценкиПоСтроке(НоваяСтрока);
		
	КонецЕсли;
	
	СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ДокументОснование <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОснование, "Проект") Тогда
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование,"Проект");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказНаряд()

// Процедура заполнения документа на основании заказа поставщику.
//
// Параметры:
//	ДанныеЗаполнения - Структура, ДокументСсылка.ЗаказПоставщику
//
//	
Процедура ЗаполнитьПоЗаказуПоставщику(ДанныеЗаполнения) Экспорт
	
	// Основание и настройка документа.
	МассивЗаказов = Новый Массив;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("МассивЗаказовПоставщикам") Тогда
		МассивЗаказов = ДанныеЗаполнения.МассивЗаказовПоставщикам;
		ПоложениеЗаказаПоставщику = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	Иначе
		МассивЗаказов.Добавить(ДанныеЗаполнения.Ссылка);
		ПоложениеЗаказаПоставщику = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеЗаказаПоставщикуВДокументахПоступления");
		Если НЕ ЗначениеЗаполнено(ПоложениеЗаказаПоставщику) Тогда
			ПоложениеЗаказаПоставщику = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
		Если ПоложениеЗаказаПоставщику = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			Заказ = ДанныеЗаполнения;
		КонецЕсли;
	КонецЕсли;
	
	РазрешитьСкладыВТабличныхЧастях = ПолучитьФункциональнуюОпцию("РазрешитьСкладыВТабличныхЧастях");
	Если РазрешитьСкладыВТабличныхЧастях Тогда
		ПоложениеСклада = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеСкладаВДокументахПоступления");
	КонецЕсли;
	
	// Заполнение шапки.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПоставщику.Ссылка КАК ОснованиеСсылка,
	|	ЗаказПоставщику.Проведен КАК ОснованиеПроведен,
	|	ЗаказПоставщику.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказПоставщику.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказПоставщику.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаРасход,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.УчетПотребностиПоСкладам
	|			ТОГДА ЗаказПоставщику.СтруктурнаяЕдиницаРезерв
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.ПоложениеСклада <> ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ПустаяСсылка)
	|				И (ЗаказПоставщику.УчетПотребностиПоСкладам
	|					ИЛИ ЗаказПоставщику.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку))
	|			ТОГДА ЗаказПоставщику.ПоложениеСклада
	|		ИНАЧЕ &ПоложениеСклада
	|	КОНЕЦ КАК ПоложениеСклада,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.Договор КАК Договор,
	|	ЗаказПоставщику.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПоставщику.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПоставщику.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ЗаказПоставщику.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.ВидЦенКонтрагента = ЗНАЧЕНИЕ(Справочник.ВидыЦенКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЗаказПоставщику.Договор.ВидЦенКонтрагента
	|		ИНАЧЕ ЗаказПоставщику.ВидЦенКонтрагента
	|	КОНЕЦ КАК ВидЦенКонтрагента,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.ВалютаДокумента = НациональнаяВалюта.Значение
	|			ТОГДА ЗаказПоставщику.Курс
	|		ИНАЧЕ КурсыВалютСрезПоследних.Курс
	|	КОНЕЦ КАК Курс,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.ВалютаДокумента = НациональнаяВалюта.Значение
	|			ТОГДА ЗаказПоставщику.Кратность
	|		ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК Кратность,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СКомитентом)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|	КОНЕЦ КАК ВидОперации
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО ЗаказПоставщику.Договор.ВалютаРасчетов = КурсыВалютСрезПоследних.Валюта},
	|	Константа.НациональнаяВалюта КАК НациональнаяВалюта
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&МассивЗаказов)");
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("ДатаДокумента", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ПоложениеСклада", ПоложениеСклада);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗначенияПроверяемыхРеквизитов = Новый Структура("СостояниеЗаказа, Проведен", Выборка.СостояниеЗаказа, Выборка.ОснованиеПроведен);
		Документы.ЗаказПоставщику.ПроверитьВозможностьВводаНаОснованииЗаказаПоставщику(Выборка.ОснованиеСсылка, ЗначенияПроверяемыхРеквизитов);
		
		Если РазрешитьСкладыВТабличныхЧастях Тогда
			Если ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти
				И Выборка.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				ПоложениеСклада = Выборка.ПоложениеСклада;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
				СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
			ИначеЕсли СтруктурнаяЕдиница <> Выборка.СтруктурнаяЕдиница
				И ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, , "ПоложениеСклада, СтруктурнаяЕдиница");
	Если НЕ РазрешитьСкладыВТабличныхЧастях Тогда
		ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
			СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад();
		КонецЕсли;
	КонецЕсли;
	
	Если МассивЗаказов.Количество() = 1 Тогда
		ДокументОснование = МассивЗаказов[0];
	КонецЕсли;
	
	// Заполнение документа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ЗаказыОстатки.Склад КАК Склад,
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|		ЗаказыОстатки.Склад КАК Склад,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				,
	|				ЗаказПоставщику В (&МассивЗаказов)
	|					И (Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|						ИЛИ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|						ИЛИ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗаказыПоставщикам.ЗаказПоставщику,
	|		ДвиженияДокументаЗаказыПоставщикам.Склад,
	|		ДвиженияДокументаЗаказыПоставщикам.Номенклатура,
	|		ДвиженияДокументаЗаказыПоставщикам.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗаказыПоставщикам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗаказыПоставщикам.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗаказыПоставщикам.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам КАК ДвиженияДокументаЗаказыПоставщикам
	|	ГДЕ
	|		ДвиженияДокументаЗаказыПоставщикам.Регистратор = &Ссылка) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.ЗаказПоставщику,
	|	ЗаказыОстатки.Склад,
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|				ИЛИ ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА ЗаказПоставщикуЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ЗаказПоставщикуЗапасы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаРасход,
	|	ЗаказПоставщикуЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщикуЗапасы.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказПоставщикуЗапасы.Номенклатура.СчетУчетаЗатрат.ТипСчета КАК ТипСчета,
	|	ЗаказПоставщикуЗапасы.Ссылка.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщикуЗапасы.Ссылка.УчетПотребностиПоСкладам
	|			ТОГДА ЗаказПоставщикуЗапасы.СтруктурнаяЕдиницаРезерв
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.Номенклатура.Склад
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ЗаказПоставщикуЗапасы.Номенклатура.Ячейка КАК Ячейка,
	|	ЗаказПоставщикуЗапасы.Номенклатура.Ячейка.Владелец КАК СтруктурнаяЕдиницаЯчейки,
	|	ЗаказПоставщикуЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	СУММА(ЗаказПоставщикуЗапасы.Количество) КАК Количество,
	|	ЗаказПоставщикуЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПоставщикуЗапасы.Цена КАК Цена,
	|	СУММА(ЗаказПоставщикуЗапасы.Сумма) КАК Сумма,
	|	ЗаказПоставщикуЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ЗаказПоставщикуЗапасы.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ЗаказПоставщикуЗапасы.Всего) КАК Всего,
	|	ПОДСТРОКА(ЗаказПоставщикуЗапасы.Содержание, 1, 1024) КАК Содержание,
	|	ЗаказПоставщикуЗапасы.Ссылка КАК ЗаказОснование,
	|	ЗаказПоставщикуЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	СУММА(ЗаказПоставщикуЗапасы.СуммаСкидкиНаценки) КАК СуммаСкидкиНаценки,
	|	МИНИМУМ(ЗаказПоставщикуЗапасы.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|ГДЕ
	|	ЗаказПоставщикуЗапасы.Ссылка В(&МассивЗаказов)
	|	И (ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ИЛИ ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщикуЗапасы.Ссылка,
	|	ЗаказПоставщикуЗапасы.Характеристика,
	|	ЗаказПоставщикуЗапасы.Номенклатура,
	|	ЗаказПоставщикуЗапасы.ЕдиницаИзмерения,
	|	ЗаказПоставщикуЗапасы.СтавкаНДС,
	|	ЗаказПоставщикуЗапасы.Цена,
	|	ЗаказПоставщикуЗапасы.ПроцентСкидкиНаценки,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|				ИЛИ ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА ЗаказПоставщикуЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЗаказПоставщикуЗапасы.Ссылка.СтруктурнаяЕдиница,
	|	ЗаказПоставщикуЗапасы.Номенклатура.СтранаПроисхождения,
	|	ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры,
	|	ЗаказПоставщикуЗапасы.Номенклатура.СчетУчетаЗатрат.ТипСчета,
	|	ЗаказПоставщикуЗапасы.Ссылка.УчетПотребностиПоСкладам,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщикуЗапасы.Ссылка.УчетПотребностиПоСкладам
	|			ТОГДА ЗаказПоставщикуЗапасы.СтруктурнаяЕдиницаРезерв
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.Номенклатура.Склад
	|	КОНЕЦ,
	|	ЗаказПоставщикуЗапасы.Номенклатура.Ячейка,
	|	ПОДСТРОКА(ЗаказПоставщикуЗапасы.Содержание, 1, 1024),
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ,
	|	ЗаказПоставщикуЗапасы.Номенклатура.Ячейка.Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("ДатаДокумента", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("ЗаказПоставщику,Номенклатура,Характеристика");
	
	Запасы.Очистить();
	Расходы.Очистить();
	Если ТаблицаОстатков.Количество() > 0 Тогда
		
		Выборка = МассивРезультатов[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("ЗаказПоставщику", Выборка.ЗаказОснование);
			СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
			Если Выборка.УчетПотребностиПоСкладам Тогда
				СтруктураДляПоиска.Вставить("Склад", Выборка.СтруктурнаяЕдиница);
			КонецЕсли; 
			
			МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
			Если МассивСтрокОстатков.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				НоваяСтрока = Расходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.ЗаказПоставщику = Выборка.ЗаказОснование;
				НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиницаРасход;
				Если ЗначениеЗаполнено(Выборка.ЗаказПокупателя)
					И (Выборка.ТипСчета = Перечисления.ТипыСчетов.Расходы
					ИЛИ Выборка.ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты
					ИЛИ Выборка.ТипСчета = Перечисления.ТипыСчетов.НезавершенноеПроизводство) Тогда
					НоваяСтрока.Заказ = Выборка.ЗаказПокупателя;
				КонецЕсли;
			Иначе
				НоваяСтрока = Запасы.Добавить();
				НоваяСтрока.Заказ = Выборка.ЗаказОснование;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				Если ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
					НоваяСтрока.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
				КонецЕсли;
				Если Выборка.СтруктурнаяЕдиницаЯчейки <> НоваяСтрока.СтруктурнаяЕдиница Тогда
					НоваяСтрока.Ячейка = Неопределено;
				КонецЕсли; 
			КонецЕсли;
			
			КоличествоКСписанию = Выборка.Количество * Выборка.Коэффициент;
			МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоКСписанию;
			Если МассивСтрокОстатков[0].КоличествоОстаток < 0 Тогда
				
				КоличествоКСписанию = (КоличествоКСписанию + МассивСтрокОстатков[0].КоличествоОстаток) / Выборка.Коэффициент;
				
				ДанныеСтроки = Новый Структура;
				ДанныеСтроки.Вставить("Количество", КоличествоКСписанию);
				ДанныеСтроки.Вставить("Цена", Выборка.Цена);
				ДанныеСтроки.Вставить("Сумма", 0);
				ДанныеСтроки.Вставить("СтавкаНДС", Выборка.СтавкаНДС);
				ДанныеСтроки.Вставить("СуммаНДС", 0);
				ДанныеСтроки.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
				ДанныеСтроки.Вставить("Всего", 0);
				ДанныеСтроки.Вставить("ПроцентСкидкиНаценки", Выборка.ПроцентСкидкиНаценки);
				ДанныеСтроки.Вставить("СуммаСкидкиНаценки", 0);
				
				ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
				
			КонецЕсли;
			
			Если МассивСтрокОстатков[0].КоличествоОстаток <= 0 Тогда
				ТаблицаОстатков.Удалить(МассивСтрокОстатков[0]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Ячейка = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Запасы, "Ячейка");
	Если ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти
		И ПолучитьФункциональнуюОпцию("РазрешитьСкладыВТабличныхЧастях") Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			Если СтрокаТабличнойЧасти.СтруктурнаяЕдиница <> СтруктурнаяЕдиница ИЛИ СтрокаТабличнойЧасти.Ячейка <> Ячейка Тогда
				ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	Если ДокументОснование <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОснование, "Проект") Тогда
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование,"Проект");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказПоставщику()

// Процедура заполнения документа на основании приходного ордера.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоПриходномуОрдеру(ДанныеЗаполнения) Экспорт
	
	// Заполнение шапки документа.
	ДокументОснование = ДанныеЗаполнения.Ссылка;
	ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
	Организация = ДанныеЗаполнения.Организация;
	СтруктурнаяЕдиница = ДанныеЗаполнения.СтруктурнаяЕдиница;
	Ячейка = ДанныеЗаполнения.Ячейка;
	НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	
	// Заполнение табличной части документа.
	Запасы.Очистить();
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Запасы Цикл
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Дата), Дата,ТекущаяДатаСеанса()));
		
		Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
			
			НоваяСтрока.СтранаПроисхождения = НоваяСтрока.Номенклатура.СтранаПроисхождения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ДокументОснование <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОснование, "Проект") Тогда
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование,"Проект");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоПриходныйОрдер()

// Процедура заполнения документа на основании заказа поставщику.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоСчетуНаОплатуПоставщика(ДанныеЗаполнения) Экспорт
	
	// Заполнение шапки документа.
	ДокументОснование = ДанныеЗаполнения.Ссылка;
	ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
	
	Если УправлениеНебольшойФирмойПовтИсп.РеквизитВШапке("ПоложениеЗаказаПоставщикуВДокументахПоступления") Тогда
		Заказ = ДанныеЗаполнения.ДокументОснование;
	Иначе
		Заказ = Неопределено;
	КонецЕсли;
	
	Организация = ДанныеЗаполнения.Организация;
	Контрагент = ДанныеЗаполнения.Контрагент;
	Договор = ДанныеЗаполнения.Договор;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
	НалогообложениеНДС = ДанныеЗаполнения.НалогообложениеНДС;
	
	ВидЦенКонтрагента = ДанныеЗаполнения.ВидЦенКонтрагента;
	Если НЕ ЗначениеЗаполнено(ВидЦенКонтрагента) Тогда
		
		ВидЦенКонтрагента = Договор.ВидЦенКонтрагента;
		
	КонецЕсли;
	
	Если ВалютаДокумента = Константы.НациональнаяВалюта.Получить() Тогда
		Курс = ДанныеЗаполнения.Курс;
		Кратность = ДанныеЗаполнения.Кратность;
	Иначе
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	// Заполнение табличной части документа.
	Запасы.Очистить();
	Расходы.Очистить();
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Запасы Цикл
		
		Если СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
			Или СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
		Тогда
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			НоваяСтрока.Заказ = ДанныеЗаполнения.ДокументОснование;
			НоваяСтрока.СтруктурнаяЕдиница = СтрокаТабличнойЧасти.Номенклатура.Склад;
			НоваяСтрока.Ячейка = СтрокаТабличнойЧасти.Номенклатура.Ячейка;
			
			Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
				
				НоваяСтрока.СтранаПроисхождения = СтрокаТабличнойЧасти.Номенклатура.СтранаПроисхождения;
				
			КонецЕсли;
			
		ИначеЕсли СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			
			НоваяСтрока = Расходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			НоваяСтрока.ЗаказПоставщику = ДанныеЗаполнения.ДокументОснование;
			
			ТипСчетаРасходы = НоваяСтрока.Номенклатура.СчетУчетаЗатрат.ТипСчета;
			Если ТипСчетаРасходы <> Перечисления.ТипыСчетов.Расходы
				И ТипСчетаРасходы <> Перечисления.ТипыСчетов.Доходы
				И ТипСчетаРасходы <> Перечисления.ТипыСчетов.НезавершенноеПроизводство
				И ТипСчетаРасходы <> Перечисления.ТипыСчетов.КосвенныеЗатраты Тогда
				
				НоваяСтрока.Заказ = Неопределено;
				НоваяСтрока.СтруктурнаяЕдиница = Неопределено;
				
			Иначе
				
				НоваяСтрока.СтруктурнаяЕдиница = ДанныеЗаполнения.Подразделение;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоЗаказПоставщику()

// Процедура заполнения документа на основании счета на оплату покупателю.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоСчетуНаОплатуВозврат(ДанныеЗаполнения) Экспорт
	
	// Заполнение шапки документа.
	ДокументОснование = ДанныеЗаполнения.Ссылка;
	ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя;
		
	Организация = ДанныеЗаполнения.Организация;
	Контрагент = ДанныеЗаполнения.Контрагент;
	Договор = ДанныеЗаполнения.Договор;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
	НалогообложениеНДС = ДанныеЗаполнения.НалогообложениеНДС;
	
	ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	
	Если ВалютаДокумента = Константы.НациональнаяВалюта.Получить() Тогда
		Курс = ДанныеЗаполнения.Курс;
		Кратность = ДанныеЗаполнения.Кратность;
	Иначе
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	// Заполнение табличной части документа.
	Запасы.Очистить();
	ДобавленныеНаборы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетНаОплатуЗапасы.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуЗапасы.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СчетНаОплатуЗапасы.Номенклатура.Склад КАК СтруктурнаяЕдиница,
	|	СчетНаОплатуЗапасы.Номенклатура.Ячейка КАК Ячейка,
	|	СчетНаОплатуЗапасы.Партия КАК Партия,
	|	СчетНаОплатуЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	СчетНаОплатуЗапасы.Количество КАК Количество,
	|	СчетНаОплатуЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СчетНаОплатуЗапасы.Цена КАК Цена,
	|	СчетНаОплатуЗапасы.Сумма КАК Сумма,
	|	СчетНаОплатуЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуЗапасы.СуммаНДС КАК СуммаНДС,
	|	СчетНаОплатуЗапасы.Всего КАК Всего,
	|	СчетНаОплатуЗапасы.Содержание КАК Содержание,
	|	СчетНаОплатуЗапасы.Ссылка.ДокументОснование КАК Заказ,
	|	СчетНаОплатуЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	СчетНаОплатуЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	СчетНаОплатуЗапасы.ДоляСтоимости КАК ДоляСтоимости
	|ИЗ
	|	ВТСчетНаОплатуЗапасы КАК СчетНаОплатуЗапасы
	|ГДЕ
	|	СчетНаОплатуЗапасы.ТипНоменклатурыЗапас
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДобавленныеНаборы.Ссылка КАК Заказ,
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ИЗ
	|	Документ.СчетНаОплату.ДобавленныеНаборы КАК ДобавленныеНаборы
	|ГДЕ
	|	ДобавленныеНаборы.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	Документы.СчетНаОплату.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(ДанныеЗаполнения, Запрос.МенеджерВременныхТаблиц, Истина);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	// Наборы
	ДобавленныеНаборыЗаказа = МассивРезультатов[1].Выгрузить();
	Для каждого СтрокаДобавленныхНаборов Из ДобавленныеНаборыЗаказа Цикл
		ЗаполнитьЗначенияСвойств(ДобавленныеНаборы.Добавить(), СтрокаДобавленныхНаборов);
	КонецЦикла;  
	// Конец Наборы
	
КонецПроцедуры // ЗаполнитьПоЗаказПоставщику()

// Процедура заполнения документа на основании расходной накладной.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.РасходнаяНакладная - расходная накладная
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоПриемуВРемонт(ДанныеЗаполнения) Экспорт
	
	// Заполнение шапки документа.
	ДокументОснование = ДанныеЗаполнения.Ссылка;
	ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя;
		
	Организация = ДанныеЗаполнения.Организация;
	Контрагент = ДанныеЗаполнения.Контрагент;
	Договор = ДанныеЗаполнения.Договор;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
	НалогообложениеНДС = ДанныеЗаполнения.НалогообложениеНДС;
	
	Если ВалютаДокумента = Константы.НациональнаяВалюта.Получить() Тогда
		Курс = ДанныеЗаполнения.Курс;
		Кратность = ДанныеЗаполнения.Кратность;
	Иначе
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	// Заполнение табличной части документа.
	Запасы.Очистить();
		
	НоваяСтрока = Запасы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
	НоваяСтрока.КлючСвязи = 1;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
	
	СерииНоменклатуры.Очистить();
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Серия) Тогда
		НоваяСтрокаСН = СерииНоменклатуры.Добавить();
		НоваяСтрокаСН.Серия = ДанныеЗаполнения.Серия;
		НоваяСтрокаСН.КлючСвязи = 1;
		
		НоваяСтрока.СерииНоменклатуры = СерииНоменклатурыУНФКлиентСервер.СтроковоеПредставлениеСерийНоменклатурыСтроки(СерииНоменклатуры, НоваяСтрокаСН.КлючСвязи);
	КонецЕсли;
	
	Если ДокументОснование <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОснование, "Проект") Тогда
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование,"Проект");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоРасходнаяНакладная()

// Процедура заполнения документа на основании отчета комиссионера.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.РасходнаяНакладная - расходная накладная
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоОтчетуКомиссионера(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетКомиссионераОВозвратах Тогда
		ТекстИсключения = НСтр("ru = 'В отчете комиссионера указана неподходящая операция для ввода приходной накладной.
		|Приходная накладная вводится только на основании операции ""Продажа"".'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ИспользоватьНовуюСхемуДвижений Тогда
		Если ДанныеЗаполнения.Запасы.Итог("СуммаВознаграждения")>0 Тогда
			ТекстИсключения = НСтр("ru = 'Ввод приходной накладной не требуется. Услуга вознаграждения включена в движения документа.'");
		Иначе
			ТекстИсключения = НСтр("ru = 'Ввод приходной накладной на услугу комиссионного вознаграждения не требуется'");
		КонецЕсли;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	СуммаВознаграждения = ДанныеЗаполнения.Запасы.Итог("СуммаВознаграждения");
	
	Если СуммаВознаграждения = 0 Или ДанныеЗаполнения.УдержатьКомиссионноеВознаграждение Тогда
		ТекстИсключения = НСтр("ru = 'В отчете комиссионера отсутствует или удерживается комиссионное вознаграждение.
		|Для ввода приходной накладной должна быть заполнена колонка ""Сумма вознаграждения"" в таблице запасов.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	УслугаИзДоговора = ДанныеЗаполнения.Договор.УслугаКомиссионногоВознаграждения;
	
	Если Не ЗначениеЗаполнено(УслугаИзДоговора) Тогда
		ТекстИсключения = НСтр("ru = 'Невозможно ввести приходную накладную.
		|У указанного в отчете комиссионера договора контрагента не выбрана услуга комиссионного вознаграждения.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
	
	ДокументОснование = ДанныеЗаполнения.Ссылка;
	Организация = ДанныеЗаполнения.Организация;
	Контрагент = ДанныеЗаполнения.Контрагент;
	
	КонтрольДоговоров = ПолучитьФункциональнуюОпцию("КонтрольДоговоров");
	
	Если КонтрольДоговоров = Перечисления.ВидыКонтроляДоговоровПриПроведении.НеКонтролировать Тогда
		Договор = ДанныеЗаполнения.Договор;
	Иначе
		Договор = ПолучитьДоговорПоУмолчанию();
	КонецЕсли;
	
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
	НДСВключатьВСтоимость = ДанныеЗаполнения.НДСВключатьВСтоимость;
	НалогообложениеНДС = ДанныеЗаполнения.НалогообложениеНДС;
	Подразделение = ДанныеЗаполнения.Подразделение;
	
	Курс = ДанныеЗаполнения.Курс;
	Кратность = ДанныеЗаполнения.Кратность;
	
	// Заполнение табличной части документа.
	Запасы.Очистить();
	Расходы.Очистить();

	
	ТаблицаВознаграждениеПоДокументам = Документы.ОтчетКомиссионера.РаспределеннаяТаблицаЗапасы(ДанныеЗаполнения);
	
	ТаблицаВознаграждениеПоДокументам.Свернуть("ЗаказПокупателя, СтавкаНДС", "Сумма, СуммаВознаграждения");
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Количество", 1);
	ДанныеСтроки.Вставить("Цена", 0);
	ДанныеСтроки.Вставить("Сумма", 0);
	ДанныеСтроки.Вставить("СтавкаНДС", 0);
	ДанныеСтроки.Вставить("СуммаНДС", 0);
	ДанныеСтроки.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	ДанныеСтроки.Вставить("Всего", 0);
	
	Для Каждого СтрокаТаблицы Из ТаблицаВознаграждениеПоДокументам Цикл
		
		Если СтрокаТаблицы.СуммаВознаграждения = 0 Тогда Продолжить КонецЕсли;
		
		НоваяСтрока = Расходы.Добавить();
		
		НоваяСтрока.Номенклатура = УслугаИзДоговора;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, УслугаИзДоговора);
		
		ДанныеСтроки.Цена = СтрокаТаблицы.СуммаВознаграждения;
		ДанныеСтроки.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
		
		ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
		НоваяСтрока.Заказ = СтрокаТаблицы.ЗаказПокупателя;
		НоваяСтрока.СтруктурнаяЕдиница = ДанныеЗаполнения.Подразделение;
		
	КонецЦикла;
	
	Если ДокументОснование <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОснование, "Проект") Тогда
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование,"Проект");
	КонецЕсли;
	
КонецПроцедуры

#Область РМК

// Процедура заполнения документа на основании расходной накладной.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.РасходнаяНакладная - расходная накладная
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоЧекуККМ(ДанныеЗаполнения) Экспорт
	
	// Заполнение шапки документа.
	ЗапроситьСпециальныйНалоговыйРежим(ДанныеЗаполнения);
	
	ДокументОснование = ДанныеЗаполнения.Ссылка;
	ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя;
	Заказ = Неопределено;
	ДисконтнаяКарта = ДанныеЗаполнения.ДисконтнаяКарта;
	
	ЧекККМ = ДанныеЗаполнения.Ссылка;
	Организация = ДанныеЗаполнения.Организация;
	СтруктурнаяЕдиница = ДанныеЗаполнения.СтруктурнаяЕдиница;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
	НДСВключатьВСтоимость = ДанныеЗаполнения.НДСВключатьВСтоимость;
	НалогообложениеНДС = ДанныеЗаполнения.НалогообложениеНДС;
	// Заказы покупателей в Рознице
	Заказ = ДанныеЗаполнения.Заказ;
	Контрагент = ДанныеЗаполнения.Контрагент;
	Если ЗначениеЗаполнено(Заказ) Тогда
		Договор = Заказ.Договор;
	КонецЕсли;
	// Конец Заказы покупателей в Рознице
	
	Курс = 1; // Чеки оформляются в валюте регламентированного учета.
	Кратность = 1; // Чеки оформляются в валюте регламентированного учета.
	
	ПоложениеСклада = ДанныеЗаполнения.ПоложениеСклада;
	
	// Заполнение табличной части документа.
	Запасы.Очистить();
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Запасы Цикл
		
		Если СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
		
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			
		КонецЕсли;
		
	КонецЦикла;
	
	АкцизныеМарки.Очистить();
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.АкцизныеМарки Цикл
		
		НоваяСтрока = АкцизныеМарки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
	СерииНоменклатурыУНФ.ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры // ЗаполнитьПоРасходнаяНакладная()

#КонецОбласти

#Область ЕГАИС

// Процедура заполнения документа на основании ТТН ЕГАИС.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.ТТНВходящаяЕГАИС - ТТН ЕГАИС
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоНакладнойЕГАИС(ТТНВходящаяЕГАИС) Экспорт

	ПолученИзЕГАИС = Истина;
	
	Запасы.Очистить();
	
	ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТТНВходящаяЕГАИС.НомерТТН КАК НомерВходящегоДокумента,
	|	ТТНВходящаяЕГАИС.ДатаТТН КАК ДатаВходящегоДокумента,
	|	ТТНВходящаяЕГАИС.Ссылка КАК ТТНВходящаяЕГАИС,
	|	ТТНВходящаяЕГАИС.ТорговыйОбъект КАК СтруктурнаяЕдиница,
	|	ТТНВходящаяЕГАИС.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.Поставщик = &ПустаяСсылкаПоставщика
	|			ТОГДА ТТНВходящаяЕГАИС.Грузоотправитель
	|		ИНАЧЕ ТТНВходящаяЕГАИС.Поставщик
	|	КОНЕЦ КАК Поставщик,
	|	ТТНВходящаяЕГАИС.СуммаДокумента КАК СуммаДокумента,
	|	ТТНВходящаяЕГАИС.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаВЗапросе.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ТаблицаВЗапросе.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ТаблицаВЗапросе.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаВЗапросе.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КлассификаторОрганизацийЕГАИС.Сопоставлено, ЛОЖЬ)
	|				И НЕ КлассификаторОрганизацийЕГАИС.СоответствуетОрганизации
	|			ТОГДА КлассификаторОрганизацийЕГАИС.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент,
	|	ТаблицаВЗапросе.СуммаДокумента КАК СуммаДокумента,
	|	ТаблицаВЗапросе.ВидОперации КАК ВидОперации
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО ТаблицаВЗапросе.Поставщик = КлассификаторОрганизацийЕГАИС.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТТНВходящаяЕГАИС);
	Запрос.УстановитьПараметр("ПустаяСсылкаПоставщика", Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;
	
	Если Выборка.ВидОперации = Перечисления.ВидыОперацийТТНВходящейЕГАИС.ВозвратОтПокупателя Тогда
		ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя;
	Иначе
		ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
	КонецЕсли;
	
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация,, Дата);
	СуммаВключаетНДС    = Истина;
	НДСВключатьВСтоимость    = Организация.НДСВключатьВСтоимость;
	
	Если ЗначениеЗаполнено(Контрагент)
		И Не ЗначениеЗаполнено(Договор) Тогда
		СписокВидовДоговора = Новый СписокЗначений;
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		
		Договор = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговора);
	КонецЕсли;
	
	ЗаполнитьТоварыПоступленияПоТТН(ТТНВходящаяЕГАИС);
	
КонецПроцедуры

Процедура ЗаполнитьТоварыПоступленияПоТТН(ТТНВходящаяЕГАИС) Экспорт
	
	Запасы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИСТовары.Ссылка.ЕстьРасхождения
	|			ТОГДА ТТНВходящаяЕГАИСТовары.КоличествоФакт
	|		ИНАЧЕ ТТНВходящаяЕГАИСТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ТТНВходящаяЕГАИСТовары.Сумма КАК Сумма,
	|	ТТНВходящаяЕГАИСТовары.Серия КАК Серия,
	|	ТТНВходящаяЕГАИСТовары.Цена КАК Цена,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТТНВходящаяЕГАИСТовары.НомерСтроки КАК Порядок,
	|	ТТНВходящаяЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	ТТНВходящаяЕГАИСТовары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаЕГАИС
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаЕГАИС.АлкогольнаяПродукция) КАК АлкогольнаяПродукция,
	|	ТаблицаЕГАИС.Количество КАК Количество,
	|	ТаблицаЕГАИС.Серия КАК Серия,
	|	ТаблицаЕГАИС.Сумма КАК Сумма,
	|	ТаблицаЕГАИС.Цена КАК Цена,
	|	ТаблицаЕГАИС.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТаблицаЕГАИС.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаЕГАИС.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ТаблицаЕГАИС.Номенклатура
	|		ИНАЧЕ СоответствиеНоменклатурыЕГАИС.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаЕГАИС.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаЕГАИС.Характеристика
	|		ИНАЧЕ СоответствиеНоменклатурыЕГАИС.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ТаблицаЕГАИС.Порядок КАК Порядок,
	|	ВЫБОР
	|		КОГДА ТаблицаЕГАИС.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ТаблицаЕГАИС.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ СоответствиеНоменклатурыЕГАИС.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения
	|ИЗ
	|	ТаблицаЕГАИС КАК ТаблицаЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ТаблицаЕГАИС.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|			И (СоответствиеНоменклатурыЕГАИС.Порядок = 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЕГАИС.Количество,
	|	ТаблицаЕГАИС.Серия,
	|	ТаблицаЕГАИС.Сумма,
	|	ТаблицаЕГАИС.Цена,
	|	ТаблицаЕГАИС.ИдентификаторУпаковки,
	|	ТаблицаЕГАИС.ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаЕГАИС.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ТаблицаЕГАИС.Номенклатура
	|		ИНАЧЕ СоответствиеНоменклатурыЕГАИС.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЕГАИС.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаЕГАИС.Характеристика
	|		ИНАЧЕ СоответствиеНоменклатурыЕГАИС.Характеристика
	|	КОНЕЦ,
	|	ТаблицаЕГАИС.Порядок,
	|	ВЫБОР
	|		КОГДА ТаблицаЕГАИС.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ТаблицаЕГАИС.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ СоответствиеНоменклатурыЕГАИС.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";

	
	Запрос.УстановитьПараметр("Ссылка", ТТНВходящаяЕГАИС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		
		Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура.ВидСтавкиНДС) Тогда
				СтрокаТаблицы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаТаблицы.Номенклатура.ВидСтавкиНДС);
			Иначе
				СтрокаТаблицы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию);
			КонецЕсли;
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТаблицы.СтавкаНДС);
			СтрокаТаблицы.СуммаНДС = ?(СуммаВключаетНДС, СтрокаТаблицы.Сумма - (СтрокаТаблицы.Сумма) / ((СтавкаНДС + 100) / 100), СтрокаТаблицы.Сумма * СтавкаНДС / 100);
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
			
		Иначе
			
			Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
				СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Иначе
				СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			КонецЕсли;	
			
			СтрокаТаблицы.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТаблицы.СуммаНДС = 0;
			
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьПоДоговоруКонтрагента(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	ДоговорыКонтрагентов.ВалютаРасчетов КАК ВалютаДокумента,
	|	ДоговорыКонтрагентов.ВидЦенКонтрагента КАК ВидЦенКонтрагента,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВидЦенКонтрагента.ЦенаВключаетНДС, ЛОЖЬ) КАК СуммаВключаетНДС
	|	
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	ВыборкаШапка = Запрос.Выполнить().Выбрать();
	
	ВыборкаШапка.Следующий();
	
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоДоговоруКонтрагента()

Процедура ЗаполнитьПоПоступлениюНаСчет(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.ВидОперации <> Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты Тогда
		ТекстИсключения = НСтр("ru = 'В поступлении на счет указана неподходящая операция для ввода приходной накладной. Приходная накладная вводится только на основании операции ""От курьерской компании или почты"".'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	СуммаВознаграждения = ДанныеЗаполнения.РасшифровкаПлатежаОтАгента.Итог("УдержаноАгентом");
	
	Если СуммаВознаграждения = 0 Тогда
		ТекстИсключения = НСтр("ru = 'В поступлении на счет отсутствует информация об удержаниях курьерской компанией. Для ввода приходной накладной должна быть заполнена колонка ""Удержано агентом"" расшифровки платежа.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ДанныеЗаполнения.РасшифровкаПлатежа.Количество() = 0 Тогда
		ДоговорОснования = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Иначе
		ДоговорОснования = ДанныеЗаполнения.РасшифровкаПлатежа[0].Договор;
	КонецЕсли;
	
	УслугаИзДоговора = ДоговорОснования.УслугаДоставки;
	
	Если Не ЗначениеЗаполнено(УслугаИзДоговора) Тогда
		ТекстИсключения = НСтр("ru = 'Невозможно ввести приходную накладную. У указанного в поступлении на счет договора курьерской компании не выбрана услуга доставки.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
	
	ДокументОснование = ДанныеЗаполнения.Ссылка;
	Организация = ДанныеЗаполнения.Организация;
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , ТекущаяДатаСеанса());
	Контрагент = ДанныеЗаполнения.Контрагент;
	
	Если ЗначениеЗаполнено(ДоговорОснования) Тогда
		
		Если ЗначениеЗаполнено(ДоговорОснования.ДоговорСоСлужбойДоставки) Тогда
			Договор = ДоговорОснования.ДоговорСоСлужбойДоставки;
		КонецЕсли;
		
	Иначе
		
		КонтрольДоговоров = ПолучитьФункциональнуюОпцию("КонтрольДоговоров");
		Если КонтрольДоговоров = Перечисления.ВидыКонтроляДоговоровПриПроведении.НеКонтролировать Тогда
			Договор = ДоговорОснования;
		Иначе
			Договор = ПолучитьДоговорПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДенежныхСредств;
	Курс = ДанныеЗаполнения.Курс;
	Кратность = ДанныеЗаполнения.Кратность;
	
	// Заполнение табличной части документа.
	Запасы.Очистить();
	Расходы.Очистить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Заказ КАК Заказ,
	|	СУММА(ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.УдержаноАгентом) КАК УдержаноАгентом,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Заказ.СтруктурнаяЕдиницаПродажи КАК СтруктурнаяЕдиница
	|ИЗ
	|	Документ.ПоступлениеНаСчет.РасшифровкаПлатежаОтАгента КАК ПоступлениеНаСчетРасшифровкаПлатежаОтАгента
	|ГДЕ
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Заказ,
	|	ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.Заказ.СтруктурнаяЕдиницаПродажи
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПоступлениеНаСчетРасшифровкаПлатежаОтАгента.УдержаноАгентом) > 0";
	Выборка = Запрос.Выполнить().Выбрать();
	
	СуммаВключаетНДС = Истина;
	Если НЕ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(УслугаИзДоговора.ВидСтавкиНДС) Тогда
		СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(УслугаИзДоговора.ВидСтавкиНДС, ТекущаяДатаСеанса());
	Иначе
		СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию, ТекущаяДатаСеанса());
	КонецЕсли;
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Количество", 1);
	ДанныеСтроки.Вставить("Цена", 0);
	ДанныеСтроки.Вставить("Сумма", 0);
	ДанныеСтроки.Вставить("СтавкаНДС", СтавкаНДС);
	ДанныеСтроки.Вставить("СуммаНДС", 0);
	ДанныеСтроки.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	ДанныеСтроки.Вставить("Всего", 0);
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Расходы.Добавить();
		НоваяСтрока.Номенклатура = УслугаИзДоговора;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, УслугаИзДоговора);
		
		ДанныеСтроки.Цена = Выборка.УдержаноАгентом;
		ЗаполнениеОбъектовУНФ.РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
		НоваяСтрока.Заказ = Выборка.Заказ;
		НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		
	КонецЦикла;
	
	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты 
		И ДокументОснование.РасшифровкаПлатежа.Количество() 
		И ДокументОснование.РасшифровкаПлатежа[0].УдержаноАгентом >0 Тогда
		
		СтрокаРасшифровки = ДокументОснование.РасшифровкаПлатежа[0];
		
		НоваяСтрока = Предоплата.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасшифровки);
		
		НоваяСтрока.Документ = ДокументОснование;
		НоваяСтрока.СуммаПлатежа = СтрокаРасшифровки.УдержаноАгентом;
		
		ВалютаРасчетов = СтрокаРасшифровки.Договор.ВалютаРасчетов;
		КурсИКратностьВалютыРасчетов = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВалютаРасчетов));
		
		Если ДокументОснование.ВалютаДенежныхСредств = ВалютаРасчетов Тогда
			НоваяСтрока.СуммаРасчетов = НоваяСтрока.СуммаПлатежа;
		Иначе
			КурсИКратностьВалютыДС = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ДокументОснование.ВалютаДенежныхСредств ));
			НоваяСтрока.СуммаРасчетов = НоваяСтрока.СуммаПлатежа * ?(КурсИКратностьВалютыДС.Курс = 0, 1, КурсИКратностьВалютыДС.Курс) * КурсИКратностьВалютыРасчетов.Кратность
			/ ?(КурсИКратностьВалютыДС.Кратность * КурсИКратностьВалютыРасчетов.Курс = 0, 1, КурсИКратностьВалютыДС.Кратность * КурсИКратностьВалютыРасчетов.Курс);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	НомерЧекаККМ = 0;
	ПодписьКассира = Неопределено;
	
	ПолученИзЕГАИС   = Ложь;
	АктПереданВЕГАИС = Ложь;
	АдресЧекаЕГАИС = "";
	ПодписьЧекаЕГАИС = "";
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		ДокументОснование = Документы.ТТНВходящаяЕГАИС.ПустаяСсылка();
	КонецЕсли;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	Предоплата.Очистить();
	
	// Прослеживаемость
	СведенияПрослеживаемости.Очистить();
	Если ПрослеживаемаяОперация() Тогда
		ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(Запасы, Дата);
	Иначе
		ПрослеживаемостьУНФ.ОчиститьДанныеПрослеживаемости(Запасы, СведенияПрослеживаемости);
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	// Прослеживаемость
	СведенияПрослеживаемости.Очистить();
	// Конец Прослеживаемость
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
	СтратегияЗаполнения[Тип("ДокументСсылка.РасходнаяНакладная")] = "ЗаполнитьПоРасходнойНакладной";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПоставщику")] = "ЗаполнитьПоЗаказуПоставщику";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходныйОрдер")] = "ЗаполнитьПоПриходномуОрдеру";
	СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплатуПоставщика")] = "ЗаполнитьПоСчетуНаОплатуПоставщика";
	СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплату")] = "ЗаполнитьПоСчетуНаОплатуВозврат";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЧекККМ")] = "ЗаполнитьПоЧекуККМ";
	СтратегияЗаполнения[Тип("ДокументСсылка.ТТНВходящаяЕГАИС")] = "ЗаполнитьПоНакладнойЕГАИС";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриемИПередачаВРемонт")] = "ЗаполнитьПоПриемуВРемонт";
	СтратегияЗаполнения[Тип("СправочникСсылка.ДоговорыКонтрагентов")] = "ЗаполнитьПоДоговоруКонтрагента";
	СтратегияЗаполнения[Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС")] = "ЗаполнитьПоВходящейТранспортнойОперации";
	СтратегияЗаполнения[Тип("ДокументСсылка.ОтчетКомиссионера")] = "ЗаполнитьПоОтчетуКомиссионера";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеНаСчет")] = "ЗаполнитьПоПоступлениюНаСчет";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриемкаТоваровИСМП")] = "ЗаполнитьПоПриемкеТоваровИСМП";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	РегистрироватьЦеныПоставщика = Договор.АвтоматическиРегистрироватьЦены;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		НоменклатураВДокументахСервер.ПроверитьПереопределитьПоложениеСклада(ЭтотОбъект);
	КонецЕсли;
	
	// Прослеживаемость
	Если ПрослеживаемаяОперация() Тогда
		ПрослеживаемостьУНФ.ОбновитьПризнакПрослеживаемости(Запасы, Дата);
	Иначе
		ПрослеживаемостьУНФ.ОчиститьДанныеПрослеживаемости(Запасы, СведенияПрослеживаемости);
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего") + Расходы.Итог("Всего");
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьПоляПередЗаписью(ЭтотОбъект);
	ЗаполнитьНаправлениеДеятельностиВТЧРасходы();
	ЗаполнитьПризнакиРасхождения();
	
	// Положение склада
	Если ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Если НЕ ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам")
			И НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
			СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
		КонецЕсли; 
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			СтрокаТабличнойЧасти.Ячейка = Ячейка;
		КонецЦикла;
	Иначе
		СтруктураПолей = ЗаполнениеОбъектовУНФ.СтруктурнаяЕдиницаИЯчейкаДляШапки(Запасы);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураПолей);
	КонецЕсли;
	// Положение заказа поставщику
	Если ПоложениеЗаказаПоставщику<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.Заказ = Заказ;
		КонецЦикла;
		Для каждого СтрокаТабличнойЧасти Из Расходы Цикл
			СтрокаТабличнойЧасти.ЗаказПоставщику = Заказ;
		КонецЦикла;
	Иначе
		Если Запасы.Количество() > 0 Тогда
			Заказ = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Запасы, "Заказ");
		ИначеЕсли Расходы.Количество() > 0 Тогда
			Заказ = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Расходы, "ЗаказПоставщику");
		Иначе
			Заказ = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям") Тогда
		ОсновноеПодразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
		Для каждого СтрокаТабличнойЧасти Из Расходы Цикл
			Если СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
		КонецЦикла; 
	КонецЕсли; 
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность()
		И НЕ ПометкаУдаления Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	// ИнтеграцияГИСМ
	ЕстьМаркируемаяПродукцияГИСМ = ИнтеграцияГИСМУНФ.ЕстьМаркируемаяПродукцияГИСМ(Запасы);
	// Конец ИнтеграцияГИСМ
	
	РасчетыПроведениеДокументов.ПередЗаписьюНакладной(ЭтотОбъект);
	
	// Прослеживаемость
	ПрослеживаемыйТовар = Запасы.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	ЕстьПрослеживаемыйТовар = ПрослеживаемыйТовар.Количество() <> 0 И ПрослеживаемаяОперация();
	Если ЕстьПрослеживаемыйТовар Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Если ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда
				ПрослеживаемостьУНФ.ПодобратьРНПТВозврат(ЭтотОбъект, Отказ);
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера Тогда
				ПрослеживаемостьУНФ.ПодобратьРНПТКомиссия(ЭтотОбъект, Отказ);
			КонецЕсли;
		КонецЕсли;
		// Очистим ГТД для прослеживаемых товаров
		ПоставщикРезидентТаможенногоСоюза = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Контрагент);
		Если Не ПоставщикРезидентТаможенногоСоюза Тогда
			Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
				Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар Тогда
					СтрокаТабличнойЧасти.НомерГТД = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		СведенияПрослеживаемости.Очистить();
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
		КонецЦикла;
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка наличия розничной цены.
	ПроверитьНаличиеРозничнойЦены(Отказ);
	
	Если Запасы.Количество() > 0 Тогда
		Если ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ПроверяемыеРеквизиты.Добавить("Запасы.СтруктурнаяЕдиница");
		Иначе
			ПроверяемыеРеквизиты.Добавить("СтруктурнаяЕдиница");
		КонецЕсли;
		Если ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение Тогда
			ПроверяемыеРеквизиты.Добавить("Запасы.Партия");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПроверятьРасхожденияСВходящимДокументом Тогда
		ПроверяемыеРеквизиты.Добавить("Запасы.Количество");
	КонецЕсли;
	
	Если НЕ ВключатьРасходыВСебестоимость Тогда

		Для каждого СтрокаРасходы Из Расходы Цикл

			Если Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
					И (СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.НезавершенноеПроизводство
					ИЛИ СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты
					ИЛИ СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Доходы
					ИЛИ СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Расходы)
					И НЕ ЗначениеЗаполнено(СтрокаРасходы.СтруктурнаяЕдиница) Тогда
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'Для номенклатуры ""%1"" указанной в строке %2 списка ""Услуги"", должен быть заполнен реквизит ""Подразделение"".'"),
					СтрокаРасходы.Номенклатура, СтрокаРасходы.НомерСтроки);
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Расходы",
					СтрокаРасходы.НомерСтроки, "СтруктурнаяЕдиница");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
	Если ВключатьРасходыВСебестоимость И Запасы.Итог("СуммаРасходов") <> Расходы.Итог("Всего") Тогда
		ТекстСообщения = НСтр("ru = 'Сумма услуг не равна распределенной сумме по запасам.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
	КонецЕсли;
	
	ЗаказПриПоступленииВШапке = ПоложениеЗаказаПоставщику = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	
	ТаблицаЗапасы = Запасы.Выгрузить(, "Заказ, Всего");
	ТаблицаЗапасы.Свернуть("Заказ", "Всего");
	
	ТаблицаРасходы = Расходы.Выгрузить(, "ЗаказПоставщику, Всего");
	ТаблицаРасходы.Свернуть("ЗаказПоставщику", "Всего");
	
	ТаблицаПредоплата = Предоплата.Выгрузить(, "Заказ, СуммаПлатежа");
	ТаблицаПредоплата.Свернуть("Заказ", "СуммаПлатежа");
	
	Если ЗаказПриПоступленииВШапке Тогда
		Для каждого СтрокаЗапасы Из ТаблицаЗапасы Цикл
			СтрокаЗапасы.Заказ = Заказ;
		КонецЦикла;
		Если Контрагент.ВестиРасчетыПоЗаказам Тогда
			Для каждого СтрокаПредоплата Из ТаблицаПредоплата Цикл
				СтрокаПредоплата.Заказ = Заказ;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоЗапасыРасходы = Запасы.Количество() + Расходы.Количество();
	
	Для каждого Строка Из ТаблицаПредоплата Цикл

		НайденнаяСтрокаРасходы = Неопределено;
		НайденнаяСтрокаЗапасы = Неопределено;

		Если Контрагент.ВестиРасчетыПоЗаказам И Строка.Заказ <> Неопределено
				И Строка.Заказ <> Документы.ЗаказПокупателя.ПустаяСсылка()
				И Строка.Заказ <> Документы.ЗаказПоставщику.ПустаяСсылка() Тогда
			НайденнаяСтрокаЗапасы = ТаблицаЗапасы.Найти(Строка.Заказ, "Заказ");
			НайденнаяСтрокаРасходы = ТаблицаРасходы.Найти(Строка.Заказ, "ЗаказПоставщику");
		ИначеЕсли Контрагент.ВестиРасчетыПоЗаказам Тогда
			НайденнаяСтрокаЗапасы = ТаблицаЗапасы.Найти(Неопределено, "Заказ");
			НайденнаяСтрокаЗапасы = ?(НайденнаяСтрокаЗапасы = Неопределено, ТаблицаЗапасы.Найти(Документы.ЗаказПокупателя.ПустаяСсылка(), "Заказ"), НайденнаяСтрокаЗапасы);
			НайденнаяСтрокаЗапасы = ?(НайденнаяСтрокаЗапасы = Неопределено, ТаблицаЗапасы.Найти(Документы.ЗаказПоставщику.ПустаяСсылка(), "Заказ"), НайденнаяСтрокаЗапасы);
			НайденнаяСтрокаРасходы = ТаблицаРасходы.Найти(Неопределено, "ЗаказПоставщику");
			НайденнаяСтрокаРасходы = ?(НайденнаяСтрокаРасходы = Неопределено, ТаблицаРасходы.Найти(Документы.ЗаказПокупателя.ПустаяСсылка(), "ЗаказПоставщику"), НайденнаяСтрокаРасходы);
			НайденнаяСтрокаРасходы = ?(НайденнаяСтрокаРасходы = Неопределено, ТаблицаРасходы.Найти(Документы.ЗаказПоставщику.ПустаяСсылка(), "ЗаказПоставщику"), НайденнаяСтрокаРасходы);
		КонецЕсли;

		Если ЗначениеЗаполнено(Строка.Заказ) И НайденнаяСтрокаЗапасы = Неопределено
				И НайденнаяСтрокаРасходы = Неопределено И КоличествоЗапасыРасходы > 0
				И Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекстСообщения = НСтр(
				"ru = 'Нельзя зачесть аванс по заказу отличному от указанных в табличных частях ""Запасы"" или ""Услуги"".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		КонецЕсли;

	КонецЦикла;
	
	РасчетыРаботаСФормамиВызовСервера.ПроверитьЗаполнениеДокументаПредоплаты(Контрагент, ПроверяемыеРеквизиты);
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	// Серии номенклатуры
	Если ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти
		ИЛИ НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница,"ОрдерныйСклад") = Истина Тогда
		// Для ордерного склада Серии номенклатуры не проверяем, они будут указаны в ордерном документе.

		СерииНоменклатурыУНФ.ПроверкаЗаполненияСерийНоменклатуры(Отказ, Запасы, СерииНоменклатуры, СтруктурнаяЕдиница, ЭтотОбъект);
	КонецЕсли;
	
	// Наборы
	НаборыСервер.ПроверитьТабличнуюЧасть(ЭтотОбъект, "Запасы", Отказ);
	// КонецНаборы
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	
	// ПодарочныеСертификаты
	РаботаСПодарочнымиСертификатами.ПроверитьВозможностьИспользованияСертификатов(Отказ, ЭтотОбъект, "Запасы",
	"СтруктурнаяЕдиница", ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке"));
	
	Если Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты.Получить() Тогда
		
		Если Не РаботаСПодарочнымиСертификатами.УказанКонтрагентДляПредоплаты() Тогда
			ТекстСообщения = НСтр(
				"ru = 'Не заполнена константа ""Служебный контрагент для подарочных сертификатов"".
				|Необходимо указать контрагента: Продажи - Еще больше возможностей.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	// Конец ПодарочныеСертификаты
	
	Если ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда
		
		ГрузовыеТаможенныеДекларацииСервер.ПриОбработкеПроверкиЗаполнения(Отказ, ЭтотОбъект);
		
	КонецЕсли;
	
	// Прослеживаемость
	Если ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика Тогда
		ПоставщикРезидентТаможенногоСоюза = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Контрагент);
		Если Не ПоставщикРезидентТаможенногоСоюза Тогда
			ДанныеПроверки = Новый Структура;
			ДанныеПроверки.Вставить("ИмяТЧ", "Запасы");
			ДанныеПроверки.Вставить("ИмяСписка", НСтр("ru = 'Товары'"));
			
			ПрослеживаемостьУНФ.ПроверитьЗаполнениеДанныхПрослеживаемости(ЭтотОбъект, ДанныеПроверки, Отказ);
		КонецЕсли;
	КонецЕсли; 
	// Конец Прослеживаемость
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Взаиморасчеты
	СоответствиеТабличныхЧастейИРеквизитаЗаказ = Новый Соответствие;
	СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Запасы", "Заказ");
	СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Расходы", "ЗаказПоставщику");
	ДополнительныеСвойства.Вставить("ИмяРеквизитаЗаказ", "Заказ");
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства, Отказ, Истина, СоответствиеТабличныхЧастейИРеквизитаЗаказ);
	// Конец Взаиморасчеты
	
	// Инициализация данных документа.
	Документы.ПриходнаяНакладная.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Взаиморасчеты
	// Проверим, можно ли продолжать и не было ли отказа в процедурах
	// формирования движений по взаиморасчетам.
	Отказ = ДополнительныеСвойства.Отказ;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// Подготовка наборов записей.
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыПринятыеВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыПереданныеВРазрезеГТД", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РазмещениеЗаказов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Закупки", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Продажи", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыНаСкладах", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыКПоступлениюНаСклады", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыИАгентскиеУслугиПринятые", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыПереданные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗаказыПокупателей", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗаказыПоставщикам", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыКассовыйМетод", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыНераспределенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходыОтложенные", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПотребностьВЗапасах", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПоставщиками", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("РасчетыСПокупателями", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СуммовойУчетВРознице", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// ДисконтныеКарты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПродажиПоДисконтнымКартам", ТаблицыДляДвижений, Движения, Отказ);
	
	// Серии номенклатуры
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыГарантии", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДвиженияСерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыКПоступлению", ТаблицыДляДвижений, Движения, Отказ);
	
	// ПодарочныеСертификаты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПодарочныеСертификаты", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаПодарочнымиСертификатами", ТаблицыДляДвижений, Движения, Отказ);
	
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗакупкиДляКУДиР", ТаблицыДляДвижений, Движения, Отказ);
	
	// Взаиморасчеты
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаДокументов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОплатаСчетовИЗаказов", ТаблицыДляДвижений, Движения, Отказ);
	// Конец Взаиморасчеты
	
	// Прослеживаемость
	ПроведениеДокументовУНФ.ОтразитьДвижения("ПрослеживаемыеТовары", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ОперацииСПрослеживаемымиТоварами", ТаблицыДляДвижений, Движения, Отказ);
	
	Если ДополнительныеСвойства.ДляПроведения.ЭтоКонтрагентИзЕАЭС Тогда
		
		ПараметрыПроведения = Документы.ПриходнаяНакладная.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПрослеживаемостьУНФ.ЗарегистрироватьПрослеживаемыйТовар(ПараметрыПроведения.Реквизиты); 
		
	КонецЕсли;
	// Конец Прослеживаемость
	
	// Суммы документов для регламентированного учета
	ПроведениеДокументовУНФ.ОтразитьДвижения("СуммыДокументовРегламентированныйУчет", ТаблицыДляДвижений, Движения, Отказ);
	
	// Запись наборов записей.
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Если ДополнительныеСвойства.Свойство("ТаблицаДокументовДляИзменения")
		И ДополнительныеСвойства.ТаблицаДокументовДляИзменения.Количество() > 0
		Тогда
		РасчетыПроведениеДокументов.ОбработатьТаблицуДокументовДляИзмененияПриОтгрузке(ДополнительныеСвойства, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Контроль возникновения отрицательного остатка.
	Документы.ПриходнаяНакладная.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Запись цен в регистр сведений Цены номенклатуры контрагентов.
	Документы.ПриходнаяНакладная.ЗарегистрироватьЦеныПоставщика(Ссылка, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Взаиморасчеты
	СоответствиеТабличныхЧастейИРеквизитаЗаказ = Новый Соответствие;
	СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Запасы", "Заказ");
	СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Расходы", "ЗаказПоставщику");
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства, Отказ, Истина, СоответствиеТабличныхЧастейИРеквизитаЗаказ);
	// Конец Взаиморасчеты
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Если ДополнительныеСвойства.Свойство("ТаблицаДокументовДляИзменения")
		И ДополнительныеСвойства.ТаблицаДокументовДляИзменения.Количество() > 0
		Тогда
		РасчетыПроведениеДокументов.ОбработатьТаблицуДокументовДляИзмененияПриОтгрузке(ДополнительныеСвойства, Отказ);
	КонецЕсли;
	
	// Контроль возникновения отрицательного остатка.
	Документы.ПриходнаяНакладная.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Удаление цен из регистра сведений Цены номенклатуры контрагентов.
	Документы.ПриходнаяНакладная.УдалитьЦеныПоставщика(Ссылка);
	
	// Подчиненный счет-фактура (полученный)
	Если Не Отказ Тогда
		СчетаФактурыУНФ.ОтменитьПроведениеПодчиненногоСчетаФактуры(Ссылка, Номер, Дата, ДополнительныеСвойства, Истина);
	КонецЕсли;
	
	//Прослеживаемость
	ПрослеживаемостьУНФ.УдалениеПроведенияПервичногоДокумента(Ссылка);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Процедура проверяет наличие розничной цены.
//
Процедура ПроверитьНаличиеРозничнойЦены(Отказ)
	
	Если СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
	 ИЛИ СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
	 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("ТаблицаДокумента", Запасы);
		Запрос.УстановитьПараметр("РозничныйВидЦен", СтруктурнаяЕдиница.РозничныйВидЦен);
		Запрос.УстановитьПараметр("СписокНоменклатура", Запасы.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("СписокХарактеристика", Запасы.ВыгрузитьКолонку("Характеристика"));
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Характеристика КАК Характеристика,
		|	ТаблицаДокумента.Партия КАК Партия
		|ПОМЕСТИТЬ ПеремещениеЗапасовЗапасы
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПеремещениеЗапасовЗапасы.НомерСтроки КАК НомерСтроки,
		|	ПеремещениеЗапасовЗапасы.Номенклатура КАК Номенклатура,
		|	ПеремещениеЗапасовЗапасы.Характеристика КАК Характеристика,
		|	ПеремещениеЗапасовЗапасы.Партия КАК Партия
		|ПОМЕСТИТЬ ЗапасыСФильтром
		|ИЗ
		|	ПеремещениеЗапасовЗапасы КАК ПеремещениеЗапасовЗапасы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ПеремещениеЗапасовЗапасы.Номенклатура = СправочникНоменклатура.Ссылка
		|			И (СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗапасыСФильтром.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕ(ЗапасыСФильтром.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ЗапасыСФильтром.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ЗапасыСФильтром.Партия) КАК ПартияПредставление
		|ИЗ
		|	ЗапасыСФильтром КАК ЗапасыСФильтром
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				ВидЦен = &РозничныйВидЦен
		|					И Номенклатура В (&СписокНоменклатура)
		|					И Характеристика В (&СписокХарактеристика)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ЗапасыСФильтром.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ЗапасыСФильтром.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|ГДЕ
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) = 0";
		
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			ПредставлениеНоменклатуры = Справочники.Номенклатура.Представление(
				ВыборкаРезультатаЗапроса.НоменклатураПредставление,
				ВыборкаРезультатаЗапроса.ХарактеристикаПредставление,
				ВыборкаРезультатаЗапроса.ПартияПредставление);
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Для номенклатуры %1 в строке %2 списка ""Запасы"" не установлена розничная цена.'"),
				ПредставлениеНоменклатуры, ВыборкаРезультатаЗапроса.НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы",
				ВыборкаРезультатаЗапроса.НомерСтроки, "Номенклатура");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, КонтекстноеПоле, , Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаличиеРозничнойЦены()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СчетаФактурыУНФ.ПриЗаписиДокументаОснованияСчетаФактуры(Ссылка, ДополнительныеСвойства, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Прослеживаемость

Функция ПрослеживаемаяОперация()
	
	Возврат (ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера);
	
КонецФункции

#КонецОбласти 

#Область ГосИС

#Область ВЕТИС

// Заполнение документа на основании входящей транспортной операции ВЕТИС.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоВходящейТранспортнойОперации(ДанныеЗаполнения) Экспорт
	
	Реквизиты = ИнтеграцияВЕТИСУНФ.ДанныеПрикладныхДокументовИзВходящейТранспортнойОперацииВЕТИС(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
		НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(
			Организация,,
			?(ЗначениеЗаполнено(Дата),Дата, ТекущаяДатаСеанса()));
		
	КонецЕсли;
	
	СкладВТабличнойЧасти = ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	
	Товары = Реквизиты.Товары.Выгрузить();
	ТоварыУточнение = Реквизиты.ТоварыУточнение.Выгрузить();
	
	Товары.Индексы.Добавить("ИдентификаторСтроки");
	
	Для Каждого СтрокаТовары Из ТоварыУточнение Цикл 
		
		ИсходнаяСтрока = Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки));
		Если ИсходнаяСтрока.Количество() = 0 Тогда 
			ИсходнаяСтрока = Новый Структура;
		Иначе 
			ИсходнаяСтрока = ИсходнаяСтрока[0];
			ИсходнаяСтрока.БылоУточнение = Истина;
		КонецЕсли;
		
		НоваяСтрокаЗапасы = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, ИсходнаяСтрока);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, СтрокаТовары);
		Если СкладВТабличнойЧасти Тогда 
			НоваяСтрокаЗапасы.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
		КонецЕсли;
		НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(ЭтотОбъект, "Запасы", НоваяСтрокаЗапасы);
		
	КонецЦикла;
	
	Для Каждого СтрокаТовары Из Товары.НайтиСтроки(Новый Структура("БылоУточнение", Ложь)) Цикл
		
		НоваяСтрокаЗапасы = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, СтрокаТовары);
		Если СкладВТабличнойЧасти Тогда 
			НоваяСтрокаЗапасы.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
		КонецЕсли;
		НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(ЭтотОбъект, "Запасы", НоваяСтрокаЗапасы);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Заполнение документа на основании документа "Приемка товаров ИСМП".
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//
Процедура ЗаполнитьПоПриемкеТоваровИСМП(ДанныеЗаполнения) Экспорт
	
	Реквизиты = ДанныеПрикладныхДокументовИзПриемкиТоваровИСМП(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект.Ссылка) Тогда
		
		//ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		//	ДанныеЗаполнения,
		//	,
		//	Реквизиты.ЕстьОшибкиПроведен,,);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
		
	КонецЕсли;
	
	Запасы.Очистить();
	
	Выборка = Реквизиты.Товары.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
		// заполняем единицу измерения
		НоваяСтрока.ЕдиницаИзмерения = Выборка.Упаковка;
		Если Не ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
			
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
		// заполняем ставку НДС
		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) И ЗначениеЗаполнено(НоваяСтрока.Номенклатура.ВидСтавкиНДС) Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрока.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
		ИначеЕсли ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Организация.ВидСтавкиНДСПоУмолчанию) Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ДанныеПрикладныхДокументовИзПриемкиТоваровИСМП(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемкаТоваровИСМП.Организация КАК Организация,
	|	ПриемкаТоваровИСМП.Контрагент  КАК Контрагент,
	|	ПриемкаТоваровИСМП.Комментарий КАК Комментарий,
	|	ПриемкаТоваровИСМП.Дата        КАК Дата,
	|	Не ПриемкаТоваровИСМП.Проведен КАК ЕстьОшибкиПроведен,
	|	ПриемкаТоваровИСМП.Товары.(
	|		Номенклатура           КАК Номенклатура,
	|		Характеристика         КАК Характеристика,
	|		Серия                  КАК Серия,
	|		Упаковка               КАК Упаковка,
	|		Количество             КАК Количество,
	|		КоличествоУпаковок     КАК КоличествоУпаковок,
	|		СтатусУказанияСерий    КАК СтатусУказанияСерий
	|	) КАК Товары
	|ИЗ
	|	Документ.ПриемкаТоваровИСМП КАК ПриемкаТоваровИСМП
	|ГДЕ
	|	ПриемкаТоваровИСМП.Ссылка = &Ссылка";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗапроситьСпециальныйНалоговыйРежим(ДанныеЗаполнения)
	
	Если ТекущаяДатаСеанса() >= УправлениеНебольшойФирмойСервер.ДатаОтменыЕНВД()
		И ДанныеЗаполнения.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ЕНВД Тогда
		СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(
			ДанныеЗаполнения.Организация,
			ДанныеЗаполнения.СтруктурнаяЕдиница,
			ТекущаяДатаСеанса());
	Иначе
		СпециальныйНалоговыйРежим = ДанныеЗаполнения.СпециальныйНалоговыйРежим;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьНаправлениеДеятельностиВТЧРасходы()
	
	Если Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика Тогда
		Возврат;
	КонецЕсли;
	
	Если ВключатьРасходыВСебестоимость Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРасходы Из Расходы Цикл
		Если СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
			СтрокаРасходы.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакиРасхождения()
	
	Если Не ПроверятьРасхожденияСВходящимДокументом Тогда
		ЕстьРасхождения = Ложь;
		Возврат;
	КонецЕсли;
	
	ЕстьРасхождения = Ложь;
	Для Каждого ТекСтрока Из Запасы Цикл
		Если ТекСтрока.Количество <> ТекСтрока.КоличествоСправочно Тогда
			ЕстьРасхождения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УчестьСкидкиНаценкиПоСтроке(НоваяСтрока)
	
	// В приходной накладной нет автоматических скидок, и нужно обработать ситуацию, когда приходная накладная на возврат
	// вводится на основании, например, расходной накладной, в которой есть автоматические скидки.
	Дельта = НоваяСтрока.Цена * НоваяСтрока.Количество - НоваяСтрока.Сумма - НоваяСтрока.СуммаСкидкиНаценки;
	Если Дельта >= 0.005 ИЛИ Дельта <= -0.005 Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиЗакупки") Тогда
			НоваяСтрока.СуммаСкидкиНаценки = НоваяСтрока.Цена * НоваяСтрока.Количество - НоваяСтрока.Сумма;
			НоваяСтрока.ПроцентСкидкиНаценки = Окр(100*НоваяСтрока.СуммаСкидкиНаценки / (НоваяСтрока.Количество * НоваяСтрока.Цена), 2);
		Иначе
			НоваяСтрока.Цена = ?(НоваяСтрока.Количество=0, 0, НоваяСтрока.Сумма / НоваяСтрока.Количество);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДоговорПоУмолчанию()
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Ссылка, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли